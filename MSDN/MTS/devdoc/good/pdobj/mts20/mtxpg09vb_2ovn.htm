<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Application Design Notes: The Trade-offs of Using Stateful Objects (Visual Basic)</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="asconapplicationdesignnotesthedrawbacksofusingstatefulobjects"></a>Application Design Notes: The Trade-offs of Using Stateful Objects</h1>
<p>
This section explains the trade-offs of using <a href="vipdef01_1yih.htm#asdefstatefulinstance">stateful objects</a> in your applications.</p>
<h6>Why does MoveMoney outperform Stateful MoveMoney?</h6>
<p>
In the <a href="mtxpg09vb_4yyc.htm">previous section</a>, you saw that the time per <a href="vipdef01_1yih.htm#asdeftransaction">transaction</a> in <b>MoveMoney</b> and <b>Stateful MoveMoney</b> using a single Sample Bank client is nearly the same. However, as the number of concurrent transactions increases, <b>MoveMoney</b> begins to outperform <b>Stateful MoveMoney</b> significantly . At first glance, the code doesn't seem to account for the lag.</p>
<p>
Class member variables for each account must be set before calling <a href="sampcodevb_1vjs.htm">StatefulPerform</a>, whereas <a href="sampcodevb_3uk8.htm">Perform</a> passes the account numbers by value through function parameters. The call to return the value of the account number in the MoveMoney <a href="vipdef01_1yih.htm#asdefobject">object</a> isn't an intensive operation. So what explains the performance degradation?</p>
<p>
The reason is that Microsoft Transaction Server cannot commit transactions until it completes a method call. To maintain internal state, additional method calls are made on the MoveMoney object, thereby delaying the object from completing its work. This delay may cause server resources, such as database connections, to be held longer, therefore decreasing the amount of resources available for other clients. In other words, the application won't scale well.</p>
<p>
The following diagram illustrates this point. The arrow on the left indicates time, which translates into performance. The arrow on the right indicates the server resources consumed, which translates into throughput. Transaction A represents a call made to <a href="vipdef01_1yih.htm#asdefstatelessinstance">stateless objects</a>. On return from the method call, Transaction Server determines that the transaction can be committed, allowing the object to release its resources and be deactivated. On the other hand, Transaction B holds state between method calls, which increases the time that the server holds onto resources for that transaction. As the number of clients increases, so does the time required for transactions to be completed.</p>
<p>
<img src="images/vi0902.gif" border=0></p>
<h6>Another Pitfall When Using Stateful Objects</h6>
<p>
Examine the following excerpt from the Sample Bank client code (some code has been omitted for clarity).</p>
<pre><code>For i = 1 To nTrans
    .
    .
    .
    obj.PrimeAccountNo = PrimeAcct
    obj.SecondAccountNo = lSecondAcct
    lRet = obj.StatefulPerform(CLng(Amount), TranType, Res)
    .
    .
    .
Next i</code></pre>
<p>
Because the account numbers don't change, you might be inclined to rearrange the code as follows:</p>
<pre><code>obj.PrimeAccountNo = PrimeAcct
obj.SecondAccountNo = lSecondAcct

For i = 1 To nTrans
    lRet = obj.StatefulPerform(CLng(Amount), TranType, Res)
Next i</code></pre>
<p>
If you modify the code and then run the Sample Bank client for multiple transactions, the application fails on the second transaction. Why?</p>
<p>
The answer is subtle. MoveMoney uses <b>SetComplete</b> to notify Transaction Server that it has completed its work. At this point, the MoveMoney object is deactivated. In the process of deactivation, all of the object's member variables are reinitialized. The next call to MoveMoney causes <a href="vipdef01_1yih.htm#asdefinstancestream">just-in-time activation</a>. The activated object is now in its initial state, meaning the values of PrimeAccountNo and SecondAccountNo are both zero. Thus, the next call to StatefulPerform fails because of an invalid account number.</p>
<p>
This is yet another reason to be careful when maintaining state in objects. Clients of application objects must be aware of how an object uses <b>SetComplete</b> to ensure that any state the object maintains won't be needed after the object undergoes just-in-time activation.</p>
<h5>See Also</h5>
<p>
<a href="mtxpg04_5soj.htm">Transactions</a>, <a href="mtxpg04_5s37.htm">Deactivating Objects</a>, <a href="mtxpg04_8b8z.htm">Context Objects</a>, <a href="mtxpg09vb_5kvn.htm">Stateful Components</a>, <a href="objctxvb_24te.htm"><b>ObjectContext</b> object</a>, <a href="objctxvb_8mw2.htm"><b>SetComplete </b>method</a></p>
<p>&nbsp; </p></body>
</HTML>

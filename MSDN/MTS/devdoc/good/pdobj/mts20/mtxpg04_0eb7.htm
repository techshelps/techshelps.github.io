<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating Transaction Server Objects</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="asconcreatingtransactionserverobjects"></a>Creating MTS Objects</h1>
<p>
You can create <a href="vipdef01_1yih.htm#asdefmicrosofttransactionserverobject">MTS objects</a> by:
<ul>
<li>
Using <a href="vipdef01_1yih.htm#asdefcontext">context</a> objects.</li>
<li>
Using <a href="vipdef01_1yih.htm#asdeftransactioncontext">transaction context objects</a>.</li>
<li>
Using standard <a href="vipdef01_1yih.htm#asdefcom">COM</a> functions like <b>CoCreateInstance</b> or <b>CreateObject</b>.</li>
</ul>
<p>
<b>Note</b>   If you are using Visual C++ and running an MTS component in-process, you must:
<ul>
<li>
Call <b>CoInitialize(</b>NULL<b>)</b> before requesting services from MTS or creating an MTS object.</li>
<li>
Call <b>CoInitializeSecurity</b> to initialize process-specific security. MTS security is disabled when loading an MTS object in-process.</li>
<li>
Call <b>CoUninitialize</b> only after you have finished using MTS or MTS objects, preferably just prior to terminating your application. You cannot call<b> CoInitialize</b> again and invoke more MTS services. Once <b>CoUninitialize</b> has been called, your application no longer executes in the MTS run-time environment.</li>
</ul>
<p>
Creating Objects Using a Context Object</p>
<p>
You can create an MTS object by calling the <b>CreateInstance</b> method on the <b>IObjectContext</b> interface of an object's context object. The new MTS object's context inherits the <a href="vipdef01_1yih.htm#asdefactivity">activity</a>, possibly a <a href="vipdef01_1yih.htm#asdeftransaction">transaction</a>, and all security identities from the <a href="vipdef01_1yih.htm#asdefcreator">creating object's</a> context.</p>
<p>
<b>Creating an object using a context object</b></p>
<p>
<img src="images/vi0405.gif" border=0></p>
<p>
Creating Objects Using a Transaction Context Object</p>
<p>
If you want your <a href="vipdef01_1yih.htm#asdefbaseclient">base client</a> to control transaction boundaries, use a transaction context object<i>. </i>You can create an MTS object by calling the <b>CreateInstance </b>method of the <b>ITransactionContext</b> interface. The new MTS object's context inherits the activity, possibly a transaction, and the identity of the initial client from the transaction context object. You can call the <b>Commit</b> method to commit an object's work and the <b>Abort</b> method to abort its work.</p>
<p>
<b>Creating an object using a transaction context object</b></p>
<p>
<img src="images/vi0404.gif" border=0></p>
<p>
Creating Objects Using CoCreateInstance</p>
<p>
You can create MTS objects by using <b>CoCreateInstance</b> or any equivalent method based on <b>CoGetClassObject</b> and <b>IClassFactory::CreateInstance</b>. While this approach should suffice for many base client applications, there are some significant limitations for the client, including the inability to control transaction boundaries. Base clients that need this additional level of control can use a transaction context object.</p>
<p>
<b>Instantiating an object with CoCreateInstance</b></p>
<p>
<img src="images/vi0406.gif" border=0></p>
<p>
When you use <b>CoGetClassObject</b> with a <a href="vipdef01_1yih.htm#asdefcomponent">component</a> that is registered to run under MTS, it returns a reference to an MTS-provided <a href="vipdef01_1yih.htm#asdefclassfactory">class factory</a>. This allows MTS to participate in the client's calls to <b>IClassFactory</b>::<b>CreateInstance</b>. The MTS class factory creates the context object and then calls the component's real class factory.</p>
<p>
For clustered servers, if you are using the <b>CoCreateInstanceEx</b> function, use the name of the virtual server containing the MSDTC resource in the <i>pwszName</i> field of the COSERVERINFO structure. (See the Microsoft Platform SDK documentation for more details about <b>CoCreateInstanceEx</b>.)</p>
<p>
<b>Important</b> It is recommended that you do not call <b>CoCreateInstance</b> to create MTS objects from within MTS objects. When you do so, the new object's context cannot inherit any properties from its client's context. In particular, the new object cannot execute within the scope of its client's transaction.</p>
<h5>Aggregation</h5>
<p>
You cannot use an MTS object as part of an <a href="vipdef01_1yih.htm#asdefaggregation">aggregate</a> of other objects. <b>CoCreateInstance</b> returns CLASS_E_NOAGGREGATION to indicate an attempt to create an MTS object with another controlling <b>IUnknown</b>.</p>
<p>
You can, however, create an MTS object that is implemented as an aggregation of objects.</p>
<p>
Creating Objects Using Visual Basic</p>
<p>
You can use the following object creation methods in Microsoft Visual Basic to create MTS objects:
<ul>
<li>
The <b>CreateObject</b> function</li>
<li>
The <b>GetObject</b> function</li>
<li>
The <b>New</b> keyword (see the <b>Important </b>note for limitations)</li>
<li>
Automatically if the object is an Application object</li>
</ul>
<p>
Using Visual Basic object creation methods results in the same limitations as using <b>CoCreateInstance</b>. To inherit a transaction from the creating object's context, use <b>CreateInstance</b>.</p>
<p>
<b>Important</b>   Do not use the <b>New</b> operator, or a variable declared <b>As New</b>, to create an <a href="vipdef01_1yih.htm#asdefinstance">instance</a> of a <a href="vipdef01_1yih.htm#asdefclass">class</a> that is part of the active project. In this situation, Visual Basic uses an implementation of object creation that does not use <a href="vipdef01_1yih.htm#asdefcom">COM</a>. To prevent this occurrence, it is recommended that you mark all objects passed out from a Visual Basic componentas <b>Public Creatable</b>, or its equivalent, and created with either the <b>CreateObject</b> function or the <b>CreateInstance</b> method of the <b>ObjectContext</b> object.</p>
<h6>See Also</h6>
<p>
<a href="mtxpg04_3isz.htm">MTS Objects</a>, <a href="building_8iur.htm">Calling MTS Components</a>, <a href="mtxpg04_8b8z.htm">Context Objects</a>, <a href="mtxpg04_3voz.htm">Passing Object References</a>, <a href="mtxpg04_5s37.htm">Deactivating Objects</a>, <a href="disamb01_6w6i.htm"><b>CreateInstance</b></a></p>
<p>&nbsp; </p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Application Design Notes: Using Roles at Development Time (Visual Basic)</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="asconusingrolesdevtime"></a>Application Design Notes: Using Roles</h1>
<p>
This section explains how roles are useful in building secured <a href="vipdef01_1yih.htm#asdefvipercomponent">components</a>. It also discusses how deployment configuration determines security boundaries.</p>
<h2>Roles</h2>
<p>
A role is a symbolic name that defines a group of users for a <a href="vipdef01_1yih.htm#asdefpackage">package</a> of components. Roles extend Windows NT security to allow a developer to build secured components in a distributed application. In this scenario, the Manager role is defined at development time, but not yet bound to specific users. For each deployment of the application, the <a href="vipdef01_1yih.htm#asdefadministrator">administrator</a> can then assign the users and groups to a role in order to customize the application for his or her business.</p>
<p>
In this scenario, role checking is done by the MoveMoney and Account <a href="vipdef01_1yih.htm#asdefobject">objects</a>. When both MoveMoney and Account objects are used, the second check (on the Account object) is redundant. However, it yields the same result, because <b>IsCallerInRole</b> applies to the <a href="vipdef01_1yih.htm#asdefdirectcaller">direct caller</a>, and both the MoveMoney and Account objects run in the same <a href="vipdef01_1yih.htm#asdefasp">server process</a>.</p>
<p>
<img src="images/vi1101.gif" border=0></p>
<p>
If you place the MoveMoney and Account components into separate packages, the components run in separate server processes. In this scenario, calling <b>IsCallerInRole</b> on the Account object <a href="vipdef01_1yih.htm#asdefcontext">context</a> would check if the MoveMoney object's associated server process is running in the Manager role. MoveMoney is now the direct caller because a process boundary has been crossed.</p>
<p>
<img src="images/vi1102.gif" border=0></p>
<p>
The Account object runs under a package identity that gives that process full access to the bank account database. Account objects have the authority to update any account for any amount. Roles provide a means of permitting and denying access to objects. Once this permission is granted, the client, in effect, has the same access rights as the server process.</p>
<p>
When you configured the package, you chose a package identity of <b>Interactive User</b>. In a real-world scenario, packages are more likely to run as a specific user, such as SampleBank, which has access rights to the database.</p>
<p>
Returning to the scenario where you split the MoveMoney and Account components into separate packages, running as the SampleBank user solves the role checking problem. Adding the SampleBank user to the Manager role would allow the second <b>IsCallerInRole</b> check (on the Account object) to always succeed.</p>
<h2>Security Boundaries Are Process-Wide</h2>
<p>
Transaction Server security is enabled only within a server process. Because the MoveMoney component is configured to run within a server process, role checking is enabled.</p>
<p>
If you configure the Sample Bank components to run in-process, role checking would be disabled. In this case, <b>IsCallerInRole</b> always returns TRUE, which means the direct caller would always pass the authorization check.</p>
<p>
You could use the <b>IsSecurityEnabled</b> method to check if Transaction Server security can be used. <b>IsSecurityEnabled</b> returns FALSE when the object runs in-process. Using <b>IsSecurityEnabled</b>, you could rewrite the role-checking code to disable transactions when objects aren't running in a secured environment.</p>
<p>
<a href="vipdef01_1yih.htm#asdefinprocessserver">In-process components</a> share the same level of trust as the <a href="vipdef01_1yih.htm#asdefbaseclient">base client</a>. Because of this, it isn't recommended that you deploy your secured components to be loaded in-process with their clients.</p>
<h5>See Also</h5>
<p>
<a href="mtxpg04_7i49.htm">Programmatic Security</a>, <a href="install_9kvt.htm">Enabling MTS Package Security</a>, <a href="objctxvb_2x5u.htm"><b>IsCallerInRole</b> method</a>, <a href="objctxvb_3276.htm"><b>IsSecurityEnabled</b> method</a></p>
<p>&nbsp; </p></body>
</HTML>

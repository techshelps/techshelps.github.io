<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Debugging Visual Basic MTS Components</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="asdebuggingvisualbasicmtscomponents"></a>Debugging Visual Basic MTS Components</h1>
<p>
Microsoft Transaction Server components written in Visual Basic version 5.0 or Visual C++ version 5.0 can be debugged in the Microsoft Visual Studio 97 Integrated Development Environment (IDE).</p>
<p>
If you want to debug your components after they are compiled, you cannot use the Visual Basic 5.0 debugger, which only debugs at design time. To debug a compiled Visual Basic component, you will need to use the functionality of the Visual Studio 97 debugger.</p>
<p>
Follow these steps to configure Visual Studio to debug MTS components built with Visual Basic 5.0:
<ol>
<li>
In Visual Basic, click <b>Properties</b> on the <b>Project</b> menu and then click the <b>Compile</b> tab to select the <b>Compile to Native Code</b> and the <b>Create Symbolic Debug Info</b> checkbox. It is also recommended that you select the <b>No Optimization</b> checkbox while debugging.</li>
<li>
In the MTS Explorer, right-click the package in which your component is installed, and select the <b>Properties</b> option. Place your cursor over the Package ID, and select and copy the GUID to the clipboard.</li>
<li>
Open Visual Studio. On the <b>File</b> menu, click <b>Open</b> and select the DLL containing the component that you want to debug.</li>
<li>
Select <b>Project Settings</b>, and then click the <b>Debug</b> tab. Select the MTS executable for the debug session (\mtx\mtx.exe). Enter the program arguments as /p:{&lt;package GUID&gt;} for the package GUID that you copied from the package properties. MTS 2.0 allows for the package name to be used in place of the GUID. Open the .cls files containing the code that you want to debug and then set your breakpoints. If you also want to display variable information in the debug environment, go to the Visual Studio Tools menu, select <b>Options</b>, and then select the <b>Debug</b> tab. In the <b>Debug</b> tab, place a check next to <b>Display Unicode strings</b>.</li>
<li>
In the MTS Explorer, shut down all server processes.</li>
<li>
In Visual Studio, select <b>Build</b>, then select <b>Start Debug</b>. Then select <b>Go</b> to run the server process that will host your component(s), and set breakpoints to step through your code.</li>
<li>
Run your client application to access and debug your components in Visual Studio.</li>
<li>
Before you deploy your application, remember to select one of the optimizing options in the <b>Compile</b> tab on the <b>Project</b> menu of Visual Basic (set to <b>No Optimization</b> in Step 1), clear the <b>Create Symbolic Debug Info</b> checkbox, and recompile the project.</li>
</ol>
<p>
To facilitate application debugging using Visual Basic 5.0, a component that uses <b>ObjectContext</b> can be debugged by enabling a special version of the object context. This debug-only version is enabled by creating the registry key:</p>
<p>
<b>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Transaction Server\Debug\RunWithoutContext</b></p>
<p>
Note that when running in debug mode, none of the functionality of MTS is enabled. <b>GetObjectContext</b> will return the debug <b>ObjectContext</b> rather than returning <b>Nothing</b>.</p>
<p>
When running in this debug mode, the <b>ObjectContext</b> operates as follows:
<ul>
<li>
<b>ObjectContext.CreateInstance</b> - calls COM <b>CoCreateInstance</b> (no context flows, no transactions, and so on)</li>
<li>
<b>ObjectContext.SetComplete</b> - no effect</li>
<li>
<b>ObjectContext.SetAbort</b> - no effect</li>
<li>
<b>ObjectContext.EnableCommit</b> - no effect</li>
<li>
<b>ObjectContext.DisableCommit</b> - no effect</li>
<li>
<b>ObjectContext.IsInTransaction</b> - returns FALSE</li>
<li>
<b>ObjectContext.IsSecurityEnabled</b> - returns FALSE</li>
<li>
<b>ObjectContext.IsCallerInRole</b> - returns TRUE (same as normal when <b>IsSecurityEnabled</b> is FALSE)</li>
</ul>
<p>
You can also develop your own testing message box functions to generate an <i>assert</i> in an MTS Visual Basic component. The following sample code can to used to display error messages while debugging Visual Basic code. You can also use this in conjunction with the Microsoft Windows&nbsp;NT® debugger (WinDbg.exe), which is a 32-bit application that, along with a collection of DLLs, is used for debugging the Kernel, device drivers, and applications. Note that you must enter DEBUGGING = -1 in the <b>Conditional Compilation</b> dialog box (located on the <b>Make</b> tab of the <b>Project Properties</b> dialog box) to enable the assert.</p>
<p>
The following code provides an example.</p>
<pre><code>#If DEBUGGING Then
    'API Functions
    Private Declare Sub OutputDebugStringA _
        Lib "KERNEL32" (ByVal strError As String)
    Private Declare Function MessageBoxA _
        Lib "USER32" (ByVal hwnd As Long, _
        ByVal lpText As String, _
        ByVal lpCaption As String, _
        ByVal uType As Long) As Long
    'API Constants
    Private Const API_NULL                  As Long = 0
    Private Const MB_ICONERROR              As Long = &amp;H10
    Private Const MB_SERVICE_NOTIFICATION As Long = &amp;H200000

Public Sub DebugPrint(ByVal strError As String)
    Call OutputDebugStringA(strError)
End Sub

Public Sub DebugMessage(ByVal strError As String)
    Dim lngReturn As Long
        lngReturn = MessageBoxA(API_NULL, strError, "Error In Component", _
            MB_ICONERROR Or MB_SERVICE_NOTIFICATION)
End Sub
#End If</code></pre>
<p>
You can then run checks through your code to aid stress debugging, such as in the following code:</p>
<pre><code>SetobjObjectContext=GetObjectContext()
#If DEBUGGING Then
If objObjectContext Is Nothing Then Call DebugMessage("Context is Not Available")
#End If</code></pre>
<p>&nbsp; </p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Transaction Server Component Requirements</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="ascontransactionservercomponentrequirements"></a>MTS Component Requirements</h1>
<p>
An MTS <a href="vipdef01_1yih.htm#asdefvipercomponent">component</a> is a type of <a href="vipdef01_1yih.htm#asdefcom">COM</a> component that executes in the MTS run-time environment. In addition to the COM requirements, MTS requires that the component must be a <a href="vipdef01_1yih.htm#asdefdll">dynamic-link library (DLL)</a>. Components that are implemented as executable files (.exe files) cannot execute in the MTS run-time environment. For example, if you build a Remote Automation server executable file with Microsoft Visual Basic, you must rebuild it as a DLL.</p>
<h3>Additional Requirements for Visual C++ Components</h3>
<ul>
<li>
The component must have a standard <a href="vipdef01_1yih.htm#asdefclassfactory">class factory</a>.</li>
</ul>
<p>
The component DLL must implement and export the standard <b>DllGetClassObject</b> function and support the <b>IClassFactory</b> <a href="vipdef01_1yih.htm#asdefinterface">interface</a>. MTS uses this interface to create <a href="vipdef01_1yih.htm#asdefobject">objects</a>. <b>IClassFactory::CreateInstance</b> must return a unique instance of an MTS object.
<ul>
<li>
The component must only export interfaces that use standard <a href="vipdef01_1yih.htm#asdefmarshaling">marshaling</a>. For more information, see <a href="mtxpg04_34yv.htm">Passing Parameters</a>.</li>
<li>
All component interfaces and coclasses must be described by a <a href="vipdef01_1yih.htm#asdeftypelibrary">type library</a>. The information in the type library is used by the MTS Explorer to extract information about the installed components.</li>
<li>
For custom interfaces that cannot be marshaled using standard Automation support, you must build the proxy-stub DLL with MIDL version 3.00.44 or later (provided with in the Microsoft Platform SDK for Windows NT version 4.0); use the &nbsp;–Oicf compiler switch; and link the DLL with the mtxih.lib library provided by MTS. The mtxih.lib library must be the first file that you link into your proxy-stub DLL. If the component has both a type library and a proxy-stub DLL, MTS will use the proxy-stub DLL.</li>
<li>
The component must export the <b>DllRegisterServer</b> function and perform self-registration of its CLSID, ProgID, interfaces, and type library in this routine.</li>
</ul>
<p>
Development tools such as Visual Basic and the ActiveX™ Template Library, which is available with Microsoft Visual C++, allow you to generate interfaces that COM can marshal automatically. These interfaces, known as dual interfaces, are derived from <b>IDispatch</b> and use the built-in Automation marshaling support.</p>
<p>
Registering MTS Components</p>
<p>
You manage MTS components by using the <a href="vipdef01_1yih.htm#asdefmicrosofttransactionserverexplorer">MTS Explorer</a>. Before a component can run with <a href="vipdef01_1yih.htm#asdefcontext">context</a> in the MTS run-time environment, you must use the MTS Explorer to define the component in the MTS <a href="vipdef01_1yih.htm#asdefcatalog">catalog</a>. In addition to keeping track of a component's basic COM attributes, such as the name of the implementation DLL, the MTS catalog maintains a set of MTS–specific attributes. MTS uses these attributes to provide capabilities in addition to those provided by COM. For example, the transaction attribute controls the transactional characteristics of a component.</p>
<p>
The MTS Explorer assigns components to a <a href="vipdef01_1yih.htm#asdefpackage">package</a> that controls the assignment of components to <a href="vipdef01_1yih.htm#asdefasp">server processes</a> and control client access to components.</p>
<p>
<b>Note</b>   MTS allows only a single server process associated with a given package to run on a computer at a time. MTS writes a warning event message to the log if you attempt to start a second instance of an already active package. However, COM does not explicitly disallow multiple servers running the same COM classes. MTS writes a warning message to the log in the event that two threads try to start the package at the same time. This event is especially likely on a symmetric multiprocessing (SMP) computer where the two package invocations are concurrent. In these cases, MTS enforces a rule of one server process for each package by terminating one of the extra packages. COM then connects to the one server process still running and successfully returns.</p>
<p>
Running COM Components Under MTS</p>
<p>
Exercise caution when registering a standard <a href="vipdef01_1yih.htm#asdefcom">COM</a> component (one developed without regard to MTS) to execute under MTS control.</p>
<p>
First, ensure that references are safely passed between contexts (see <a href="mtxpg04_3voz.htm">Passing Object References</a>)<i>.</i></p>
<p>
Second, if the component uses other components, consider running them under MTS. Rewrite the code for creating objects in these components to use <b>CreateInstance</b> (see <a href="mtxpg04_0eb7.htm">Creating MTS Objects</a>).</p>
<p>
Third, you can effectively use <a href="vipdef01_1yih.htm#asdefautomatictransaction">automatic transactions</a> only with components that indicate the completion of their work by calling either the <b>SetComplete</b> or <b>SetAbort </b>methods. If a component does not use these methods, an automatic transaction can only be completed when the client releases the object. MTS will attempt to commit the transaction, but there is no way for the client to determine whether the transaction has been  committed or aborted. Therefore, it is recommended that you do not register components as <b>Requires a transaction</b> or <b>Requires a new transaction</b> unless they use <b>SetComplete</b> and <b>SetAbort</b>.</p>
<p>
Including Multiple Components in DLLs</p>
<p>
You can implement multiple components in the same DLL. The MTS Explorer allows components from the same DLL to be installed in separate packages.</p>
<p>
Including Type Libraries and Proxy-Stub DLLs in MTS Components</p>
<p>
Development tools supporting ActiveX components can merge your type library or proxy-stub DLL with your implementation DLL. If you do not want to distribute your implementation DLL to client computers, keep your type libraries and proxy-stub DLLs separate from your implementation DLLs. The client only needs a type library or custom proxy-stub DLL to use your server application remotely.</p>
<p>&nbsp; </p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Passing Parameters</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="asparameterpassing"></a>Passing Parameters</h1>
<p>
This topic covers the following:
<ul>
<li>
Parameter types and marshaling</li>
<li>
Objects as parameters</li>
<li>
Passing large data</li>
</ul>
<p>
Parameter Types and Marshaling</p>
<p>
MTS object interfaces must be able to be marshaled. Marshaling interfaces allows calls across thread, process, and machine boundaries.</p>
<p>
Standard COM marshaling is used. This means MTS object interfaces must either:
<ul>
<li>
Have method parameters which are Automation data types and be described in a type library, or</li>
<li>
Use custom interfaces with a MIDL-generated proxy-stub DLL.</li>
</ul>
<p>
For more information on type libraries and proxy-stub DLLs, see <a href="building_212r.htm">MTS Component Requirements</a>.</p>
<p>
Custom marshaling is not used. Even if a component supports the <b>IMarshal</b> interface, its <b>IMarshal</b> methods are never called by the MTS run-time environment.</p>
<h6>VBScript Parameters</h6>
<p>
Components that are intended for use from Active Server Pages (ASPs) using Microsoft Visual Basic® Scripting Edition (VBScript) should support <b>IDispatch</b> and limit method parameter types as follows:
<ul>
<li>
<b>VBScript version 1.0—</b>Any Automation type may be passed by value, but not by reference. Method return values must be of type <b>Variant</b>.</li>
<li>
<b>VBScript version 2.0—</b>Same as VBScript version 1.0, except parameters of type <b>Variant</b> may now be passed by reference.</li>
</ul>
<p>
Objects as Parameters</p>
<p>
Whether an object is passed <i>by value</i> or <i>by reference</i> is not specified by the client, but is a characteristic of the object itself. Basic COM objects can either be passed by reference or by value, depending on their implementation. If the COM object uses standard marshaling, then it is passed by reference. COM objects can also implement <b>IMarshal</b> to copy data by value. MTS objects are always passed by reference.</p>
<p>
Additionally, the function of the object affects how it should be passed as a parameter. When deciding whether to pass objects by value or by reference, it is useful to classify the objects as follows:
<ul>
<li>
<b>Recordset Objects—</b>Encapsulate raw data, such an ADO recordset. Recordset objects are not registered as MTS objects.</li>
<li>
<b>Business Object—</b>Encapsulate business logic; for example, an order-processing component. Business objects should be registered as MTS objects.</li>
</ul>
<p>
The following table describes when to pass recordset objects by value or by reference:</p>
<table cellspacing=5 cols=3>
<tr valign=top>
<th align=left width=24%>Pass Parameter</th>
<th align=left width=35%>If</th>
<th align=left width=41%>Client Requirements</th>
</tr>
<tr valign=top>
<td colspan=3 width=100%></td>
</tr>
<tr valign=top>
<td width=24%>By value</td>
<td width=35%>Data is relatively small</td>
<td width=41%>Recipient requires all data and can get data without reaccessing caller.</td>
</tr>
<tr valign=top>
<td width=24%>By reference</td>
<td width=35%>Data is relatively large</td>
<td width=41%>Recipient does not require all data and must reaccess caller, possibly many times.</td>
</tr>
</table><br>
<p>
<b>Note</b>   Whether data is "small" or "large" also depends on the speed of the connection. For example, if the component is accessed over a corporate intranet, a much larger recordset can be passed to the client in one call than in a call made by a client accessing the component on an Internet server over a modem.</p>
<p>
Because business objects are MTS objects, they are always passed by reference.</p>
<p>
Passing Large Data</p>
<p>
When returning a large amount of data, consider using a Microsoft Active Data Objects (ADO) <b>Recordset</b> object. In particular, the Microsoft Advanced Data Connector (ADC) provides a recordset implementation that can be disconnected from the server and marshaled by value to the client.</p>
<p>
<img src="images/param1.gif" border=0></p>
<p>
The disconnected recordset moves state to the client, allowing server resources to be freed. The client can make changes to the recordset and reconnect to the server to submit updates. For more information on state, see <a href="building_5xmb.htm">Holding State in Objects</a>.</p>
<p>
Another method of packaging large amounts of data is to use <i>safe arrays</i>. For example, when using Microsoft Remote Data Objects (RDO), you can use the <b>rdoResultSet.GetRows</b> method to copy rows into an array, and then pass the array back to the client. This requires fewer calls and is more efficient than issuing <b>MoveNext</b> calls across the network for each row.</p>
<p>&nbsp; </p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Deactivating Objects</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="ascondeactivatingobjects"></a>Deactivating Objects</h1>
<p>
MTS extends <a href="vipdef01_1yih.htm#asdefcom">COM</a> to allow <a href="vipdef01_1yih.htm#asdefobject">object</a> deactivation, even while <a href="vipdef01_1yih.htm#asdefclient">client</a> references are maintained. This makes server applications more scalable by allowing server resources to be used more efficiently.</p>
<p>
<a href="vipdef01_1yih.htm#asdefmicrosofttransactionserverobject">MTS objects</a> are initially created in the deactivated state. When a client invokes a <a href="vipdef01_1yih.htm#asdefmethod">method</a> on an object that is in a deactivated state, MTS automatically activates the object. During activation, the object is put into its initial state.</p>
<p>
<b>Note</b>   For Visual C++ developers, calls to <b>QueryInterface</b>, <b>AddRef</b>, or <b>Release</b> do not cause activation.</p>
<p>
This ability for an object to be deactivated and reactivated while clients hold references to it is called <i>just-in-time activation</i>. From the client's perspective, only a single instance of the object exists from the time the client creates it to the time it is finally released. In actuality, it is possible that the object has been deactivated and reactivated many times.</p>
<p>
<b>Just-in-time activation</b></p>
<p>
<img src="images/vi0408.gif" border=0></p>
<p>
The <a href="vipdef01_1yih.htm#asdefcontext">context</a> object exists for the entire lifetime of its MTS object, even across one or more deactivation and reactivation cycles.</p>
<p>
Object deactivation allows clients to hold references for long periods of time with limited consumption of server resources. Consider, for example, a client application that spends 99 percent of its time between <a href="vipdef01_1yih.htm#asdeftransaction">transactions</a>. In this case, the MTS objects are activated less than 1 percent of the time.</p>
<p>
When is an object deactivated?</p>
<p>
An MTS object is deactivated when any of the following occurs:
<ul>
<li>
The object requests deactivation.</li>
</ul>
<p>
An object can request deactivation by using the <b>IObjectContext</b> interface. You can use the <b>SetComplete</b> method to indicate that the object has successfully completed its work and that the internal object state doesn't need to be retained for the next call from the client. Similarly, <b>SetAbort</b> indicates that the object cannot successfully complete its work and that its state does not need to be retained.</p>
<p>
You can develop <a href="vipdef01_1yih.htm#asdefstatelessinstance">stateless objects</a> by using MTS objects that deactivate on return from every method.
<ul>
<li>
A <a href="vipdef01_1yih.htm#asdeftransaction">transaction</a> is committed or aborted.</li>
</ul>
<p>
MTS does not allow an object to maintain private state that it acquired during a transaction. When an object's transaction is committed or aborted, the object is deactivated. Of these deactivated objects, the only ones that can continue to exist are the ones that have references from clients outside the transaction. Subsequent calls to these objects reactivate them and cause them to execute in the next transaction.
<ul>
<li>
The last client releases the object.</li>
</ul>
<p>
This occurrence is listed here for completeness. The object is deactivated and never reactivated. The object's context is also released.</p>
<p>
How are objects deactivated?</p>
<p>
MTS deactivates an object by releasing all its references to the object. This causes properly developed components to destroy the object; this feature also requires the component to follow the MTS reference passing rules (see <a href="mtxpg04_3voz.htm">Passing Object References</a>) and the <a href="vipdef01_1yih.htm#asdefcom">COM</a> reference counting rules.</p>
<p>
<b>Note</b>   MTS writes an Informational message to the event log when objects that do not report their reference count are deactivated.</p>
<p>
Application components are responsible for releasing object resources on deactivation. This includes:
<ul>
<li>
Resources that are allocated with MTS <a href="vipdef01_1yih.htm#asdefresourcedispenser">resource dispensers</a>, such as <a href="vipdef01_1yih.htm#asdefodbc">ODBC</a> database connections.</li>
<li>
All other resources, including references to other objects (including MTS objects and context objects) and memory held by any instances of the component, such as using <b>delete</b> <b>this </b>in C++).</li>
</ul>
<p>
Doing Additional Work on Activation and Deactivation</p>
<p>
If an object is not already activated and it supports <b>IObjectControl</b>, MTS calls the <b>Activate</b> method prior to initiating the client request. Components can use the <b>Activate</b> method to initialize objects. This is especially important for initialization that requires access to the <a href="vipdef01_1yih.htm#asdefcontext">context object</a>. Here, keep in mind that the context is not available during calls to the component's <a href="vipdef01_1yih.htm#asdefclassfactory">class factory</a>. Having access to the context object through <b>Activate</b> allows you to pass a reference to the context object to other methods; this reference can then be released in the <b>Deactivate</b> method. The <b>Activate</b> method is also useful for objects that support <a href="vipdef01_1yih.htm#asdefpooling">pooling</a> (see <a href="mtxpg04_8v6v.htm">Object Pooling and Recycling</a>).</p>
<p>
For objects that support the <b>IObjectControl</b> interface, MTS calls the <b>Deactivate</b> method when it deactivates the object. You can use this method to free resources held by the object. The <b>Deactivate</b> method is also useful for objects that support pooling. Like the <b>Activate</b> method, the <b>Deactivate</b> method has access to the object context.</p>
<h6>See Also</h6>
<p>
<a href="mtxpg06vb_2ygj.htm">Building Scalable Components</a>, <a href="mtxpg09vb_5kvn.htm">Stateful Components</a>, <a href="mtxpg04_8v6v.htm">Object Pooling and Recycling</a>, <a href="disamb01_2ns5.htm"><b>SetComplete</b></a>, <a href="disamb01_9kz8.htm"><b>SetAbort</b></a>, <a href="disamb01_7f70.htm"><b>IObjectControl</b></a></p>
<p>&nbsp; </p></body>
</HTML>

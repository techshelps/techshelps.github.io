<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>KeyDown, KeyUp</title>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h2><a name="_vbce_keydown_keyup"></a>KeyDown, KeyUp</h2>
<p>
Occur when the user presses (<b>KeyDown</b>) or releases (<b>KeyUp</b>) a key while an object has the focus. (To interpret ANSI characters, use the <b>KeyPress</b> event.)</p>
<h4>Syntax</h4>
<p>
Private Sub Form_KeyDown(<i>keycode</i> , <i>shift</i> )</p>
<p>
Private Sub Form_KeyUp(<i>keycode</i> , <i>shift</i> )</p>
<p>
The parts of the <b>KeyDown</b> and <b>KeyUp</b> event syntaxes are described in the following table. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>Part</th>
<th align=left width=52%>Description</th>
</tr>
<tr valign=top>
<td width=48%><i>object</i></td>
<td width=52%>An object expression that evaluates to an object.</td>
</tr>
<tr valign=top>
<td width=48%><i>keycode</i></td>
<td width=52%>A key code, such as vbKeyF1 (the F1 key) or <b>vbKeyHome</b> (the HOME key). To specify key codes, use the constants in the Visual Basic (VB) object library in the Object Browser.</td>
</tr>
<tr valign=top>
<td width=48%><i>shift</i></td>
<td width=52%>An integer that corresponds to the state of the SHIFT, CTRL, and ALT keys at the time of the event. The <i>shift</i> argument is a bit field with the least-significant bits corresponding to the SHIFT key (bit 0), the CTRL key (bit 1), and the ALT key (bit 2 ). These bits correspond to the values 1, 2, and 4, respectively. Some, all, or none of the bits can be set, indicating that some, all, or none of the keys are pressed. For example, if both CTRL and ALT are pressed, the value of <i>shift</i> is 6.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
For both events, the object with the focus receives all keystrokes. A form can have the focus only if it has no visible and enabled controls. Although the <b>KeyDown</b> and <b>KeyUp</b> events can apply to most keys, they are most often used for:
<ul>
<li>
Extended character keys such as function keys.</li>
<li>
Navigation keys.</li>
<li>
Combinations of keys with standard keyboard modifiers.</li>
<li>
Distinguishing between the numeric keypad and regular number keys.</li>
</ul>
<p>
Use <b>KeyDown</b> and <b>KeyUp</b> event procedures if you need to respond to both the pressing and releasing of a key. </p>
<p>
<b>KeyDown</b> and KeyUp are not invoked for:
<ul>
<li>
The ENTER key if the form has a <b>CommandButton </b>control with the <b>Default</b> property set to <b>True</b>.</li>
<li>
The ESC key if the form has a <b>CommandButton </b>control with the <b>Cancel</b> property set to <b>True</b>.</li>
<li>
The TAB key.</li>
</ul>
<p>
<b>KeyDown</b> and <b>KeyUp</b> interpret the uppercase and lowercase of each character by means of two arguments: <i>keycode</i>, which indicates the physical key (thus returning A and a as the same key) and <i>shift</i>, which indicates the state of <i>shift</i>+<i>key</i> and therefore returns either A or a.</p>
<p>
If you need to test for the <i>shift</i> argument, you can use the <i>shift</i> constants which define the bits within the argument. The constants have the following values:</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=31%>Constant</th>
<th align=left width=34%>Value</th>
<th align=left width=35%>Description</th>
</tr>
<tr valign=top>
<td width=31%><b>vbShiftMask</b></td>
<td width=34%>1</td>
<td width=35%>SHIFT key bit mask.</td>
</tr>
<tr valign=top>
<td width=31%><b>vbCtrlMask</b></td>
<td width=34%>2</td>
<td width=35%>CTRL key bit mask.</td>
</tr>
<tr valign=top>
<td width=31%><b>vbAltMask</b></td>
<td width=34%>4</td>
<td width=35%>ALT key bit mask.</td>
</tr>
</table><br>
<p>
The constants act as bit masks that you can use to test for any combination of keys.</p>
<p>
You test for a condition by first assigning each result to a temporary integer variable and then comparing <i>shift</i> to a bit mask. Use the <b>And</b> operator with the <i>shift</i> argument to test whether the condition is greater than 0, indicating that the modifier was pressed, as in this example:</p>
<p>
<code>ShiftDown = (Shift And vbShiftMask) &gt; 0</code></p>
<p>
In a procedure, you can test for any combination of conditions, as in this example:</p>
<p>
<code>If ShiftDown And CtrlDown Then</code></p>
<p>
If the <b>KeyPreview</b> property is set to <b>True</b>, a form receives these events before controls on the form receive the events. Use the <b>KeyPreview</b> property to create global keyboard-handling routines.</p>
<p>&nbsp;</p></body>
</HTML>

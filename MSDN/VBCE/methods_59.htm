<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Put</title>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h2><a name="_vbce_put"></a>Put</h2>
<p>
Writes data from a variable to a disk file.</p>
<h4>Syntax</h4>
<p>
<i>file.</i><b>Put </b><i>Data</i>, <i>[Recnumber]</i></p>
<p>
The parts of the <b>Put</b> statement syntax are described in the following table. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>Part</th>
<th align=left width=52%>Description</th>
</tr>
<tr valign=top>
<td width=48%><i>Data</i></td>
<td width=52%>Required. Variant variable containing data to be written to disk.</td>
</tr>
<tr valign=top>
<td width=48%><i>Recnumber</i></td>
<td width=52%>Optional. Variant (Long). Record number (Random mode files) or byte number (Binary mode files) at which writing begins.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
Data written with <b>Put</b> is usually read from a file with <b>Get</b>.</p>
<p>
The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit <i>recnumber</i>, the next record or byte after the last <b>Get</b> or <b>Put</b> statement or pointed to by the last <b>Seek</b> function is written.</p>
<p>
For files opened in Random mode, the following rules apply:
<ul>
<li>
If the length of the data being written is less than the length specified in the Len clause of the Open statement, <b>Put</b> writes subsequent records on record-length boundaries. The space between the end of one record and the beginning of the next record is padded with the existing contents of the file buffer. Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the Len clause of the Open statement, an error occurs.</li>
<li>
If the variable being written is a Variant of a numeric type, <b>Put</b> writes 2 bytes identifying the VarType of the Variant and then writes the variable. For example, when writing a Variant of VarType 3, <b>Put</b> writes 6 bytes: 2 bytes identifying the Variant as VarType 3 (Long) and 4 bytes containing the Long data. The record length specified by the Len clause in the Open statement must be at least 2 bytes greater than the actual number of bytes required to store the variable.</li>
</ul>
<p>
You can use the <b>Put</b> statement to write a Variant array to disk, but you cannot use <b>Put</b> to write a scalar Variant containing an array to disk. You also cannot use <b>Put</b> to write objects to disk.
<ul>
<li>
If the variable being written is a Variant of VarType 8 (String), <b>Put</b> writes 2 bytes identifying the VarType, 2 bytes indicating the length of the string, and then writes the string data. The record length specified by the Len clause in the Open statement must be at least 4 bytes greater than the actual length of the string.</li>
<li>
If the variable being written is a dynamic array, <b>Put</b> writes a descriptor whose length equals 2 plus 8 times the number of dimensions, that is, 2 + 8 * NumberOfDimensions. The record length specified by the Len clause in the Open statement must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 118 bytes when the array is written to disk.</li>
<li>
For files opened in Binary mode, all of the Random rules apply, except:<ul>
<li>
The Len clause in the Open statement has no effect. <b>Put</b> writes all variables to disk contiguously; that is, with no padding between records.</li>
</ul>
</li>
</ul>
<p>&nbsp;</p></body>
</HTML>

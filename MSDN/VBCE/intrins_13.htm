<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Timer Control</title>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h2><a name="_vbce_timer_control"></a>Timer Control</h2>
<p>
A <b>Timer</b> control can execute code at regular intervals by causing a Timer event to occur. The <b>Timer</b> control, invisible to the user, is useful for background processing.</p>
<p>
The <b>Timer</b> control has the following properties, methods, and events.</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=31%>Properties</th>
<th align=left width=34%>Methods</th>
<th align=left width=35%>Events</th>
</tr>
<tr valign=top>
<td width=31%><a href="proprts_76.htm">Enabled</a></td>
<td width=34%></td>
<td width=35%><a href="events_39.htm">Timer</a></td>
</tr>
<tr valign=top>
<td width=31%><a href="proprts_128.htm">Interval</a></td>
<td width=34%></td>
<td width=35%></td>
</tr>
<tr valign=top>
<td width=31%><a href="proprts_135.htm">Left</a>, <a href="proprts_241.htm">Top</a></td>
<td width=34%></td>
<td width=35%></td>
</tr>
<tr valign=top>
<td width=31%><a href="proprts_161.htm">Name</a></td>
<td width=34%></td>
<td width=35%></td>
</tr>
<tr valign=top>
<td width=31%><a href="proprts_170.htm">Parent</a></td>
<td width=34%></td>
<td width=35%></td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
<b>Timer</b> controls respond to the passage of time. They are independent of the user, and you can program them to take actions at regular intervals. A typical response is checking the system clock to see if it is time to perform some task. Timers also are useful for other kinds of background processing.</p>
<p>
Each <b>Timer</b> control has an <b>Interval</b> property that specifies the number of milliseconds that pass between one timer event to the next. Unless it is disabled, a timer continues to receive an event (appropriately named the Timer event) at roughly equal intervals of time.</p>
<p>
The <b>Interval</b> property has a few limitations to consider when you're programming a timer control:
<ul>
<li>
If your application or another application is making heavy demands on the system, your application may not get timer events as often as the <b>Interval</b> property specifies. </li>
<li>
The interval can be between 0 and 64,767, inclusive, which means that even the longest interval can't be much longer than one minute (about 64.8 seconds). </li>
<li>
The interval is not guaranteed to elapse exactly on time. To ensure accuracy, the timer should check the system clock when it needs to, rather than try to keep track of accumulated time internally. </li>
<li>
The system generates 18 clock ticks per second—so even though the <b>Interval</b> property is measured in milliseconds, the true precision of an interval is no more than one-eighteenth of a second. </li>
</ul>
<p>
Every timer control must be associated with a form. Therefore, to create a timer application, you must create at least one form (though you don't have to make the form visible if you don't need it for any other purpose).</p>
<p>
If you want the timer to start working as soon as the form loads, set the <b>Enabled</b> property to <b>True</b>. Otherwise, leave this property set to <b>False</b>. You might choose to have an outside event (such as a click of a command button) start operation of the timer.</p>
<p>
The <b>Enabled</b> property for the timer is different from the <b>Enabled</b> property for other objects. With most objects, the <b>Enabled</b> property determines whether the object can respond to an event caused by the user. With the <b>Timer</b> control, setting <b>Enabled</b> to <b>False</b> suspends timer operation.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MouseDown, MouseUp</title>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h2><a name="_vbce_mousedown_mouseup"></a>MouseDown, MouseUp</h2>
<p>
Occur when the user presses (<b>MouseDown</b>) or releases (<b>MouseUp</b>) a mouse button.</p>
<h4>Syntax</h4>
<p>
<i>Private Sub Form</i>_<b>MouseDown</b>(<i>button</i>, <i>shift</i>, <i>x</i>, <i>y</i>)</p>
<p>
<i>Private Sub Form</i>_<b>MouseUp</b>(<i>button</i>, <i>shift</i>, <i>x</i>, <i>y</i>)</p>
<p>
The parts of the <b>MouseDown</b> and <b>MouseUp</b> event syntaxes are described in the following table. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>Part</th>
<th align=left width=52%>Description</th>
</tr>
<tr valign=top>
<td width=48%><i>object</i></td>
<td width=52%>Returns an object expression that evaluates to an object.</td>
</tr>
<tr valign=top>
<td width=48%><i>button</i></td>
<td width=52%>Returns an integer that identifies the button that was pressed (<b>MouseDown</b>) or released (<b>MouseUp</b>) to cause the event. The <i>button</i> argument is a bit field with bits corresponding to the left button (bit 0), right button (bit 1), and middle button (bit 2). These bits correspond to the values 1, 2, and 4, respectively. Only one of the bits is set, indicating the button that caused the event.</td>
</tr>
<tr valign=top>
<td width=48%><i>shift</i></td>
<td width=52%>Returns an integer that corresponds to the state of the SHIFT, CTRL, and ALT keys when the button specified in the <i>button</i> argument is pressed or released. A bit is set if the key is down. The <i>shift</i> argument is a bit field with the least-significant bits corresponding to the SHIFT key (bit 0), the CTRL key (bit 1), and the ALT key (bit 2 ). These bits correspond to the values 1, 2, and 4, respectively. The <i>shift</i> argument indicates the state of these keys. Some, all, or none of the bits can be set, indicating that some, all, or none of the keys are pressed. For example, if both CTRL and ALT were pressed, the value of <i>shift</i> would be 6.</td>
</tr>
<tr valign=top>
<td width=48%><i>x</i>, <i>y</i></td>
<td width=52%>Returns a number that specifies the current location of the mouse pointer. The <i>x</i> and <i>y</i> values are always expressed in terms of the coordinate system set by the <b>ScaleHeight</b>, <b>ScaleWidth</b>, <b>ScaleLeft</b>, and <b>ScaleTop</b> properties of the object.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
Use a <b>MouseDown</b> or <b>MouseUp</b> event procedure to specify actions that will occur when a given mouse button is pressed or released. Unlike the <b>Click</b> and <b>DblClick</b> events, <b>MouseDown</b> and Mou<b>s</b>eUp events enable you to distinguish between the left, right, and middle mouse buttons. You can also write code for mouse-keyboard combinations that use the SHIFT, CTRL, and ALT keyboard modifiers.</p>
<p>
If you need to test for the <i>button</i> or <i>shift</i> arguments, you can use constants listed below:</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=31%>Constant (Button)</th>
<th align=left width=34%>Value</th>
<th align=left width=35%>Description</th>
</tr>
<tr valign=top>
<td width=31%><b>vbLeftButton</b></td>
<td width=34%>1</td>
<td width=35%>Left button is pressed</td>
</tr>
<tr valign=top>
<td width=31%><b>vbRightButton</b></td>
<td width=34%>2</td>
<td width=35%>Right button is pressed</td>
</tr>
<tr valign=top>
<td width=31%><b>vbMiddleButton</b></td>
<td width=34%>4</td>
<td width=35%>Middle button is pressed</td>
</tr>
</table><br>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=31%>Constant (Shift)</th>
<th align=left width=34%>Value</th>
<th align=left width=35%>Description</th>
</tr>
<tr valign=top>
<td width=31%><b>vbShiftMask</b></td>
<td width=34%>1</td>
<td width=35%>SHIFT key is pressed.</td>
</tr>
<tr valign=top>
<td width=31%><b>vbCtrlMask</b></td>
<td width=34%>2</td>
<td width=35%>CTRL key is pressed.</td>
</tr>
<tr valign=top>
<td width=31%><b>vbAltMask</b></td>
<td width=34%>4</td>
<td width=35%>ALT key is pressed.</td>
</tr>
</table><br>
<p>
The constants then act as bit masks you can use to test for any combination of buttons without having to figure out the unique bit field value for each combination.</p>
<p>
You can use a <b>MouseMove</b> event procedure to respond to an event caused by moving the mouse. The <i>button</i> argument for <b>MouseDown</b> and <b>MouseUp</b> differs from the <i>button</i> argument used for <b>MouseMove</b>. For <b>MouseDown</b> and <b>MouseUp</b>, the <i>button</i> argument indicates exactly one button per event, whereas for <b>MouseMove</b>, it indicates the current state of all buttons.</p>
<p>&nbsp;</p></body>
</HTML>

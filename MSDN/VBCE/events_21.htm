<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>KeyPress</title>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h2><a name="_vbce_keypress"></a>KeyPress</h2>
<p>
Occurs when the user presses and releases an ANSI key.</p>
<h4>Syntax</h4>
<p>
Private Sub Form_KeyPress(<i>keyascii</i> )</p>
<p>
The parts of the <b>KeyPress</b> event syntax are described in the following table. </p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=36%>Part</th>
<th align=left width=54%>Description</th>
<th align=left width=10%></th>
</tr>
<tr valign=top>
<td width=36%><i>object</i></td>
<td width=54%>An object expression that evaluates to an object.</td>
<td width=10%></td>
</tr>
<tr valign=top>
<td width=36%><i>keyascii</i></td>
<td width=54%>An integer that returns a standard numeric ANSI keycode. <i>Keyascii</i> is passed by reference; changing it sends a different character to the object. Changing <i>keyascii</i> to 0 cancels the keystroke so the object receives no character.</td>
<td width=10%></td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
The object with the focus receives the event. A form can receive the event only if it has no visible and enabled controls or if the <b>KeyPreview</b> property is set to <b>True</b>. A <b>KeyPress</b> event can involve any printable keyboard character, the CTRL key combined with a character from the standard alphabet or one of a few special characters, and the ENTER or BACKSPACE key. A <b>KeyPress</b> event procedure is useful for intercepting keystrokes entered in a <b>TextBox</b> or <b>ComboBox</b> control. It enables you to immediately test keystrokes for validity or to format characters as they are typed. Changing the value of the <i>keyascii</i> argument changes the character displayed.</p>
<p>
You can convert the <i>keyascii</i> argument into a character by using the expression:</p>
<p>
<code>Chr(KeyAscii)</code></p>
<p>
You can then perform string operations and translate the character back to an ANSI number that the control can interpret by using the expression:</p>
<p>
<code>KeyAscii = Asc(char)</code></p>
<p>
Use <b>KeyDown</b> and <b>KeyUp</b> event procedures to handle any keystroke not recognized by <b>KeyPress</b>, such as function keys, editing keys, navigation keys, and any combinations of these with keyboard modifiers. Unlike the <b>KeyDown</b> and <b>KeyUp</b> events, <b>KeyPress</b> does not indicate the physical state of the keyboard; instead, it passes a character.</p>
<p>
<b>KeyPress</b> interprets the uppercase and lowercase of each character as separate key codes and, therefore, as two separate characters. <b>KeyDown</b> and <b>KeyUp</b> interpret the uppercase and lowercase of each character by means of two arguments: <i>keycode</i>, which indicates the physical key (thus returning A and a as the same key), and <i>shift</i>, which indicates the state of <i>shift</i>+<i>key</i> and therefore returns either A or a.</p>
<p>
If the <b>KeyPreview</b> property is set to <b>True</b>, a form receives the event before controls on the form receive the event. Use the <b>KeyPreview</b> property to create global keyboard-handling routines.</p>
<p>
<b>Note</b>  The ANSI number for the keyboard combination of CTRL+@ is 0.&nbsp; Because Visual Basic recognizes a <i>keyascii</i> value of 0 as a zero-length string (""), avoid using CTRL+@ in your applications.</p>
<p>&nbsp;</p></body>
</HTML>

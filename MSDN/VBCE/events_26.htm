<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MouseMove</title>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h2><a name="_vbce_mousemove"></a>MouseMove</h2>
<p>
Occurs when the user moves the mouse.</p>
<h4>Syntax</h4>
<p>
<i>Private Sub Form</i>_<b>MouseMove</b>(<i>button</i>, <i>shift</i>, <i>x</i>, <i>y</i>)</p>
<p>
The parts of the <b>MouseMove</b> event syntax are described in the following table. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>Part</th>
<th align=left width=52%>Description</th>
</tr>
<tr valign=top>
<td width=48%><i>object</i></td>
<td width=52%>An object expression that evaluates to an object.</td>
</tr>
<tr valign=top>
<td width=48%><i>button</i></td>
<td width=52%>An integer that corresponds to the state of the mouse buttons in which a <u>bit</u> is set if the button is down. The <i>button</i> argument is a bit field with bits corresponding to the left button (bit 0), right button (bit 1), and middle button (bit 2). These bits correspond to the values 1, 2, and 4, respectively. It indicates the complete state of the mouse buttons; some, all, or none of these three bits can be set, indicating that some, all, or none of the buttons are pressed.</td>
</tr>
<tr valign=top>
<td width=48%><i>shift</i></td>
<td width=52%>An integer that corresponds to the state of the SHIFT, CTRL, and ALT keys. A bit is set if the key is down. The <i>shift</i> argument is a bit field with the least-significant bits corresponding to the SHIFT key (bit 0), the CTRL key (bit 1), and the ALT key (bit 2 ). These bits correspond to the values 1, 2, and 4, respectively. The <i>shift</i> argument indicates the state of these keys. Some, all, or none of the bits can be set, indicating that some, all, or none of the keys are pressed. For example, if both CTRL and ALT were pressed, the value of <i>shift</i> would be 6.</td>
</tr>
<tr valign=top>
<td width=48%><i>x</i>, <i>y</i></td>
<td width=52%>A number that specifies the current location of the mouse pointer. The <i>x</i> and <i>y</i> values are always expressed in terms of the coordinate system set by the <b>ScaleHeight</b>, <b>ScaleWidth</b>, <b>ScaleLeft</b>, and <b>ScaleTop</b> properties of the object.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
The <b>MouseMove</b> event is generated continually as the mouse pointer moves across objects. Unless another object has captured the mouse, an object recognizes a <b>MouseMove</b> event whenever the mouse position is within its borders.</p>
<p>
If you need to test for the <i>button</i> or <i>shift</i> arguments, you can use constants listed elow:</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=31%>Constant (Button)</th>
<th align=left width=34%>Value</th>
<th align=left width=35%>Description</th>
</tr>
<tr valign=top>
<td width=31%><b>vbLeftButton</b></td>
<td width=34%>1</td>
<td width=35%>Left button is pressed.</td>
</tr>
<tr valign=top>
<td width=31%><b>vbRightButton</b></td>
<td width=34%>2</td>
<td width=35%>Right button is pressed.</td>
</tr>
<tr valign=top>
<td width=31%><b>vbMiddleButton</b></td>
<td width=34%>4</td>
<td width=35%>Middle button is pressed.</td>
</tr>
</table><br>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=31%>Constant (Shift)</th>
<th align=left width=34%>Value</th>
<th align=left width=35%>Description</th>
</tr>
<tr valign=top>
<td width=31%><b>vbShiftMask</b></td>
<td width=34%>1</td>
<td width=35%>SHIFT key is pressed.</td>
</tr>
<tr valign=top>
<td width=31%><b>vbCtrlMask</b></td>
<td width=34%>2</td>
<td width=35%>CTRL key is pressed.</td>
</tr>
<tr valign=top>
<td width=31%><b>vbAltMask</b></td>
<td width=34%>4</td>
<td width=35%>ALT key is pressed.</td>
</tr>
</table><br>
<p>
The constants then act as bit masks you can use to test for any combination of buttons without having to figure out the unique bit field value for each combination.</p>
<p>
You test for a condition by first assigning each result to a temporary integer variable and then comparing the <i>button</i> or <i>shift</i> arguments to a bit mask. Use the <b>And</b> operator with each argument to test if the condition is greater than zero, indicating the key or button is pressed, as in this example:</p>
<p>
<code>LeftDown = (Button And vbLeftButton) &gt; 0</code></p>
<p>
<code>CtrlDown = (Shift And vbCtrlMask) &gt; 0</code></p>
<p>
Then, in a procedure, you can test for any combination of conditions, as in this example:</p>
<p>
<code>If LeftDown And CtrlDown Then</code></p>
<p>
<b>Note</b>  You can use <b>MouseDown</b> and <b>MouseUp</b> event procedures to respond to events caused by pressing and releasing mouse buttons.</p>
<p>
The <i>button</i> argument for <b>MouseMove</b> differs from the <i>button</i> argument for <b>MouseDown</b> and <b>MouseUp</b>. For <b>MouseMove</b>, the <i>button</i> argument indicates the current state of all buttons; a single <b>MouseMove</b> event can indicate that some, all, or no buttons are pressed. For <b>MouseDown</b> and <b>MouseUp</b>, the <i>button</i> argument indicates exactly one button per event.</p>
<p>
Any time you move a window inside a Mo<b>u</b>seMove event, it can cause a cascading event. <b>MouseMove</b> events are generated when the window moves underneath the pointer. A <b>MouseMove</b> event can be generated even if the mouse is perfectly stationary.</p>
<p>&nbsp;</p></body>
</HTML>

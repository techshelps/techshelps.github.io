<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Function</title>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h2><a name="_vbce_vbs_function"></a>Function</h2>
<p>
Declares the name, arguments, and code that form the body of a <b>Function</b> procedure.</p>
<h4>Syntax</h4>
<p>
[<b>Public</b> | <b>Private</b>] <b>Function</b> <i>name</i> [<b>(</b><i>arglist</i><b>)</b>]<br>
    [<i>statements</i>]<br>
    [<i>name</i> <b>=</b> <i>expression</i>]<br>
    [<b>Exit Function</b>] <br>
    [<i>statements</i>]<br>
    [<i>name</i> <b>=</b> <i>expression</i>]<br>
<b>End Function</b> </p>
<p>
The <b>Function</b> statement syntax has these parts:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>Part</th>
<th align=left width=52%>Description</th>
</tr>
<tr valign=top>
<td width=48%><b>Public</b></td>
<td width=52%>Indicates that the <b>Function</b> procedure is accessible to all other procedures in all modules.</td>
</tr>
<tr valign=top>
<td width=48%><b>Private</b></td>
<td width=52%>Indicates that the <b>Function</b> procedure is accessible only to other procedures in the module where it is declared </td>
</tr>
<tr valign=top>
<td width=48%><i>name</i></td>
<td width=52%>Name of the <b>Function</b>; follows standard variable naming conventions.</td>
</tr>
<tr valign=top>
<td width=48%><i>arglist</i></td>
<td width=52%>List of variables representing arguments that are passed to the <b>Function</b> procedure when it is called. Multiple variables are separated by commas.</td>
</tr>
<tr valign=top>
<td width=48%><i>statements</i></td>
<td width=52%>Any group of statements to be executed within the body of the <b>Function</b> procedure.</td>
</tr>
<tr valign=top>
<td width=48%><i>expression</i></td>
<td width=52%>Return value of the <b>Function</b>.</td>
</tr>
</table><br>
<p>
The <i>arglist</i> argument has the following syntax and parts:</p>
<p>
[<b>ByVal</b> | <b>ByRef</b>] <i>varname</i>[<b>( )</b>]</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>Part</th>
<th align=left width=52%>Description</th>
</tr>
<tr valign=top>
<td width=48%><b>ByVal</b></td>
<td width=52%>Indicates that the argument is passed by value.</td>
</tr>
<tr valign=top>
<td width=48%><b>Byref</b></td>
<td width=52%>Indicates that the argument is passed by reference.</td>
</tr>
<tr valign=top>
<td width=48%><i>varname</i></td>
<td width=52%>Name of the variable representing the argument; follows standard variable naming conventions.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
If not explicitly specified using either <b>Public</b> or <b>Private</b>, <b>Function</b> procedures are public by default, that is, they are visible to all other procedures in your module. The value of local variables in a <b>Function</b> is not preserved between calls to the procedure.</p>
<p>
All executable code must be contained in procedures. You can't define a <b>Function</b> procedure inside another <b>Function</b> or <b>Sub </b>procedure.</p>
<p>
The <b>Exit Function </b>statement causes an immediate exit from a <b>Function</b> procedure. Program execution continues with the statement following the statement that called the <b>Function</b> procedure. Any number of <b>Exit Function</b> statements can appear anywhere in a <b>Function</b> procedure.</p>
<p>
Like a <b>Sub</b> procedure, a <b>Function</b> procedure is a separate procedure that can take arguments, perform a series of statements, and change the values of its arguments. However, unlike a <b>Sub</b> procedure, you can use a <b>Function</b> procedure on the right side of an expression in the same way you use any intrinsic function, such as <b>Sqr</b>, <b>Cos</b>, or <b>Chr</b>, when you want to use the value returned by the function.</p>
<p>
You call a <b>Function</b> procedure using the function name, followed by the argument list in parentheses, in an expression. See the <b>Call</b> statement for specific information on how to call <b>Function</b> procedures. </p>
<p>
<b>Function</b> procedures can be recursive; that is, they can call themselves to perform a given task. However, recursion can lead to stack overflow.</p>
<p>
To return a value from a function, assign the value to the function name. Any number of such assignments can appear anywhere within the procedure. If no value is assigned to <i>name</i>, the procedure returns a default value: a numeric function returns 0 and a string function returns a zero-length string (""). A function that returns an object reference returns <b>Nothing</b> if no object reference is assigned to <i>name</i> (using <b>Set</b>) within the <b>Function</b>.</p>
<p>
The following example shows how to assign a return value to a function named BinarySearch. In this case, <b>False</b> is assigned to the name to indicate that some value was not found. </p>
<pre><code>Function BinarySearch(. . .)
    . . .
    ' Value not found. Return a value of False.
    If lower &gt; upper Then
        BinarySearch = False  
        Exit Function 
    End If
    . . .
End Function</code></pre>
<p>
Variables used in <b>Function</b> procedures fall into two categories: those that are explicitly declared within the procedure and those that are not. Variables that are explicitly declared in a procedure (using <b>Dim</b> or the equivalent) are always local to the procedure. Variables that are used but not explicitly declared in a procedure are also local unless they are explicitly declared at some higher level outside the procedure. </p>
<p>
A procedure can use a variable that is not explicitly declared in the procedure, but a naming conflict can occur if anything you have defined at the module level has the same name. If your procedure refers to an undeclared variable that has the same name as another procedure, constant, or variable, it is assumed that your procedure is referring to that module-level name. Explicitly declare variables to avoid this kind of conflict. You can use an <b>Option Explicit</b> statement to force explicit declaration of variables.</p>
<p>
Visual Basic for Windows CE run time may rearrange arithmetic expressions to increase internal efficiency. Avoid using a <b>Function</b> procedure in an arithmetic expression when the function changes the value of variables in the same expression.</p>
<p>&nbsp;</p></body>
</HTML>

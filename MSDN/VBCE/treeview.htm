<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TreeView Control</title>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h2><a name="_vbce_treeview_control"></a>TreeView Control</h2>
<p>
A <b>TreeView</b> control displays a hierarchical list of <b>Node</b> objects, each of which consists of a label and an optional bitmap. A <b>TreeView</b> is typically used to display the headings in a document, the entries in an index, the files and directories on a disk, or any other kind of information that might usefully be displayed as a hierarchy.</p>
<h4>Syntax</h4>
<p>
<b>TreeView</b></p>
<p>
The properties, methods and events of the <b>TreeView</b> control are described in the following table. </p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=31%>Properties</th>
<th align=left width=34%>Methods</th>
<th align=left width=35%>Events</th>
</tr>
<tr valign=top>
<td width=31%><a href="proprts_90.htm">FontBold</a></td>
<td width=34%><a href="methods_35.htm">GetVisibleCount</a></td>
<td width=35%><a href="events_2.htm">AfterLabelEdit</a></td>
</tr>
<tr valign=top>
<td width=31%><a href="proprts_92.htm">FontItalic</a></td>
<td width=34%><a href="methods_84.htm">StartLabelEdit</a></td>
<td width=35%><a href="events_3.htm">BeforeLabelEdit</a></td>
</tr>
<tr valign=top>
<td width=31%><a href="proprts_93.htm">FontName</a></td>
<td width=34%></td>
<td width=35%><a href="events_7.htm">Collapse</a></td>
</tr>
<tr valign=top>
<td width=31%><a href="proprts_95.htm">FontSize</a></td>
<td width=34%></td>
<td width=35%><a href="events_17.htm">Expand</a></td>
</tr>
<tr valign=top>
<td width=31%><a href="proprts_96.htm">FontStrikeThrough</a></td>
<td width=34%></td>
<td width=35%><a href="events_27.htm">NodeClick</a></td>
</tr>
<tr valign=top>
<td width=31%><a href="proprts_99.htm">FontUnderline</a></td>
<td width=34%></td>
<td width=35%></td>
</tr>
<tr valign=top>
<td width=31%><a href="proprts_113.htm">HideSelection</a></td>
<td width=34%></td>
<td width=35%></td>
</tr>
<tr valign=top>
<td width=31%><a href="proprts_119.htm">ImageList</a></td>
<td width=34%></td>
<td width=35%></td>
</tr>
<tr valign=top>
<td width=31%><a href="proprts_121.htm">Indentation</a></td>
<td width=34%></td>
<td width=35%></td>
</tr>
<tr valign=top>
<td width=31%><a href="proprts_132.htm">LabelEdit</a></td>
<td width=34%></td>
<td width=35%></td>
</tr>
<tr valign=top>
<td width=31%><a href="proprts_141.htm">LineStyle</a></td>
<td width=34%></td>
<td width=35%></td>
</tr>
<tr valign=top>
<td width=31%><a href="proprts_164.htm">Nodes</a></td>
<td width=34%></td>
<td width=35%></td>
</tr>
<tr valign=top>
<td width=31%><a href="proprts_174.htm">PathSeparator</a></td>
<td width=34%></td>
<td width=35%></td>
</tr>
<tr valign=top>
<td width=31%><a href="proprts_203.htm">SelectedItem</a></td>
<td width=34%></td>
<td width=35%></td>
</tr>
<tr valign=top>
<td width=31%><a href="proprts_215.htm">Sorted (TreeView)</a></td>
<td width=34%></td>
<td width=35%></td>
</tr>
<tr valign=top>
<td width=31%><a href="proprts_226.htm">Style (TreeView)</a></td>
<td width=34%></td>
<td width=35%></td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
After creating a <b>TreeView</b> control, you can add, manipulate, and remove <b>Node</b> objects by setting properties and invoking methods. You can programmatically expand and collapse <b>Node</b> objects to display or hide all child nodes. Three events, the Collapse, Expand, and NodeClick event, also provide programming functionality.</p>
<p>
You can navigate through a tree in code by retrieving a reference to <b>Node</b> objects using <b>Root</b>, <b>Parent</b>, <b>Child</b>, <b>FirstSibling</b>, <b>Next</b>, <b>Previous</b>, and <b>LastSibling</b> properties. Users can navigate through a tree using the keyboard as well. UP ARROW and DOWN ARROW keys cycle downward through all expanded <b>Node</b> objects. <b>Node</b> objects are selected from left to right, and top to bottom. At the bottom of a tree, the selection jumps back to the top of the tree, scrolling the window if necessary. RIGHT ARROW and LEFT ARROW keys also tab through expanded <b>Node</b> objects, but if the RIGHT ARROW key is pressed while an unexpanded <b>Node</b> is selected, the <b>Node</b> expands; a second press will move the selection to the next <b>Node</b>. Conversely, pressing the LEFT ARROW key while an expanded <b>Node</b> has the focus collapses the <b>Node</b>. If a user presses an ANSI key, the focus will jump to the nearest <b>Node</b> that begins with that letter. Subsequent pressings of the key will cause the selection to cycle downward through all expanded nodes that begin with that letter. </p>
<p>
Several styles are available which alter the appearance of the control. <b>Node</b> objects can appear in one of eight combinations of text, bitmaps, lines, and plus/minus signs. </p>
<p>
The <b>TreeView</b> control uses the <b>ImageList</b> control, specified by the <b>ImageList </b>property, to store the bitmaps and icons that are displayed in <b>Node </b>objects. A <b>TreeView</b> control can use only one <b>ImageList </b>at a time. This means that every item in the <b>TreeView</b> control will have an equal-sized image next to it when the <b>TreeView</b> control's <b>Style</b> property is set to a style which displays images.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ReDim</title>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h2><a name="_vbce_vbs_redim"></a>ReDim</h2>
<p>
Used at procedure level to declare dynamic-array variables and allocate or reallocate storage space.</p>
<h4>Syntax</h4>
<p>
<b>ReDim</b> [<b>Preserve</b>] <i>varname</i><b>(</b><i>subscripts</i><b>) </b>[<b>, </b><i>varname</i><b>(</b><i>subscripts</i><b>)</b>] <b>. . .</b></p>
<p>
The <b>ReDim</b> statement syntax has these parts:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>Part</th>
<th align=left width=52%>Description</th>
</tr>
<tr valign=top>
<td width=48%><b>Preserve</b></td>
<td width=52%>Preserves the data in an existing array when you change the size of the last dimension.</td>
</tr>
<tr valign=top>
<td width=48%><i>varname</i></td>
<td width=52%>Name of the variable; follows standard variable naming conventions.</td>
</tr>
<tr valign=top>
<td width=48%><i>subscripts</i></td>
<td width=52%>Dimensions of an array variable; up to 60 multiple dimensions may be declared. The <i>subscripts</i> argument uses the following syntax:<pre><code>upper [<b>, </b>upper] <b>. . .</b></code></pre>
<p>
The lower bound of an array is always zero.</p>
</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
The <b>ReDim</b> statement is used to size or resize a dynamic array that has already been formally declared using a <b>Private</b>, <b>Public</b>, or <b>Dim</b> statement with empty parentheses (without dimension subscripts). You can use the <b>ReDim</b> statement repeatedly to change the number of elements and dimensions in an array.</p>
<p>
If you use the <b>Preserve</b> keyword, you can resize only the last array dimension, and you can't change the number of dimensions at all. For example, if your array has only one dimension, you can resize that dimension because it is the last and only dimension. However, if your array has two or more dimensions, you can change the size of only the last dimension and still preserve the contents of the array. If you make an array smaller than it was originally, data in the eliminated elements is lost.The following example shows how you can increase the size of the last dimension of a dynamic array without erasing any existing data contained in the array.</p>
<pre><code>ReDim X(10, 10, 10)
. . .
ReDim Preserve X(10, 10, 15)</code></pre>
<p>
When variables are initialized, a numeric variable is initialized to 0 and a string variable is initialized to a zero-length string (""). A variable that refers to an object must be assigned an existing object using the <b>Set</b> statement before it can be used. Until it is assigned an object, the declared object variable has the special value <b>Nothing</b>.</p>
<p>&nbsp;</p></body>
</HTML>

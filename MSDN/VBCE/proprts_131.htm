<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>KeyPreview</title>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h2><a name="_vbce_keypreview"></a>KeyPreview</h2>
<p>
Returns or sets a value that determines whether keyboard events for forms are invoked before keyboard events for controls. The keyboard events are <b>KeyDown</b>, <b>KeyUp</b>, and <b>KeyPress</b>.</p>
<h4>Syntax</h4>
<p>
<i>object</i>.<b>KeyPreview</b> [= <i>boolean</i>]</p>
<p>
The parts of the <b>KeyPreview</b> property syntax are described in the following table. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=50%>Part</th>
<th align=left width=50%>Description</th>
</tr>
<tr valign=top>
<td width=50%><i>object</i></td>
<td width=50%>An object expression that evaluates to an object.</td>
</tr>
<tr valign=top>
<td width=50%><i>boolean</i></td>
<td width=50%>A Boolean expression that specifies how events are received, as described in Settings.</td>
</tr>
</table><br>
<h4>Settings</h4>
<p>
The settings for <i>boolean</i> are described in the following table.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=50%>Setting</th>
<th align=left width=50%>Description</th>
</tr>
<tr valign=top>
<td width=50%><b>True</b></td>
<td width=50%>The form receives keyboard events first and then the active control.</td>
</tr>
<tr valign=top>
<td width=50%><b>False</b></td>
<td width=50%>(Default) The active control receives keyboard events; the form does not.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
You can use this property to create a keyboard-handling procedure for a form. For example, when an application uses function keys, you'll want to process the keystrokes at the form level rather than writing code for each control that might receive keystroke events.</p>
<p>
If a form has no visible and enabled controls, it automatically receives all keyboard events.</p>
<p>
To handle keyboard events only at the form level and not allow controls to receive keyboard events, set <i>KeyAscii</i> to 0 in the form's <b>KeyPress</b> event, and set <i>KeyCode</i> to 0 in the form's <b>KeyDown</b> event.</p>
<p>
<b>Note</b>  Some controls intercept keyboard events so that the form cannot receive them. Examples include the ENTER key when focus is on a <b>CommandButton </b>control and arrow keys when focus is on a <b>ListBox </b>control.</p>
<p>&nbsp;</p></body>
</HTML>

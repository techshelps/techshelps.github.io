<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Operator Precedence</title>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h2><a name="_vbce_vbs_operator_precedence"></a>Operator Precedence</h2>
<p>
When several operations occur in an expression, each part is evaluated and resolved in a predetermined order called operator precedence. Parentheses can be used to override the order of precedence and force some parts of an expression to be evaluated before other parts. Operations within parentheses are always performed before those outside. Within parentheses, however, normal operator precedence is maintained.</p>
<p>
When expressions contain operators from more than one category, arithmetic operators are evaluated first, comparison operators are evaluated next, and logical operators are evaluated last. Comparison operators all have equal precedence; that is, they are evaluated in the left-to-right order in which they appear. Arithmetic and logical operators are evaluated in the following order of precedence:</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=38%>Arithmetic</th>
<th align=left width=36%>Comparisons</th>
<th align=left width=26%>Logical</th>
</tr>
<tr valign=top>
<td width=38%>Expotentiation (<b>^</b>)</td>
<td width=36%>Equality (=)</td>
<td width=26%><b>Not</b></td>
</tr>
<tr valign=top>
<td width=38%>Negation (<b>-</b>)</td>
<td width=36%>Inequality (&lt;&gt;)</td>
<td width=26%><b>And</b></td>
</tr>
<tr valign=top>
<td width=38%>Multiplication and Division (<b>*</b>, <b>/</b>)</td>
<td width=36%>Less than (&lt;)</td>
<td width=26%><b>Or</b></td>
</tr>
<tr valign=top>
<td width=38%>Integer Division (<b>\</b>)</td>
<td width=36%>Greater than (&gt;)</td>
<td width=26%><b>Xor</b></td>
</tr>
<tr valign=top>
<td width=38%>Modulus Arithmetic (<b>Mod</b>)</td>
<td width=36%>Less than or equal to (&lt;=)</td>
<td width=26%><b>Eqv</b></td>
</tr>
<tr valign=top>
<td width=38%>Addition and Subtraction (<b>+</b>, <b>-</b>)</td>
<td width=36%>Greater than or equal to (&gt;=)</td>
<td width=26%><b>Imp</b></td>
</tr>
<tr valign=top>
<td width=38%>String Concatination (<b>&amp;</b>)</td>
<td width=36%><b>Is</b></td>
<td width=26%><b>&amp;</b></td>
</tr>
</table><br>
<p>
When multiplication and division occur together in an expression, each operation is evaluated as it occurs from left to right. Likewise, when addition and subtraction occur together in an expression, each operation is evaluated in order of appearance from left to right.</p>
<p>
The string concatenation operator (<b>&amp;</b>) is not an arithmetic operator, but in precedence it does fall after all arithmetic operators and before all comparison operators. The <b>Is</b> operator is an object reference comparison operator. It does not compare objects or their values; it checks only to determine if two object references refer to the same object.</p>
<p>
<b>Version Information</b></p>
<p>
The following table lists the version of Microsoft Visual Basic for Windows CE Run-Time Edition implemented by host applications.</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=34%>Host</th>
<th align=left width=33%>Visual Basic for<br>
Windows CE<br>
Run Time 1.0</th>
<th align=left width=33%>Visual Basic for<br>
Windows CE<br>
Run Time 2.0</th>
</tr>
<tr valign=top>
<td width=34%>Microsoft Internet Explorer 3.0</td>
<td width=33%><b>X</b></td>
<td width=33%></td>
</tr>
<tr valign=top>
<td width=34%>Microsoft Internet <br>
Information Server 2.0</td>
<td width=33%></td>
<td width=33%><b>X</b></td>
</tr>
</table><br>
<p>&nbsp;</p></body>
</HTML>

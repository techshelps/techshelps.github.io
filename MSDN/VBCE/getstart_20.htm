<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Handling Errors with the On Error Resume Next Statement</title>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h2><a name="_vbce_handling_errors_with_the_on_error_resume_next_statement"></a>Handling Errors with the On Error Resume Next Statement</h2>
<p>
The On Error Resume Next statement is useful when performing inline error handling. This statement is the only error handling statement the toolkit supports. On Error Resume Next does not clear the Err object, so you can use inline error handling to display a meaningful error messages rather than displaying the generic Application Error message.</p>
<p>
The following is an example of an inline error handling routine:</p>
<pre><code>Private Sub Command1_Click()
   On Error Resume Next
   Dim N, D
   N = InputBox("Please enter a number to divide by:", "FractionMaker")
   D = 1 / N
   If Err = 0 Then
      MsgBox 1 / N, vbOKOnly, "1 / " &amp; N
   Else
      MsgBox Err.Description, vbExclamation, "Error: " &amp; Err
   End If
End Sub</code></pre>
<p>
The following are possible errors you could handle using this routine:
<ul>
<li>
06: Overflow – enter 1E+999 to get this error</li>
<li>
11: Divide By Zero – enter 0</li>
<li>
13: Type Mismatch</li>
</ul>
<p>
You could handle each error separately based on the <b>Err.Number</b> property.</p>
<p>
For more information on error handling, see <i>Debugging Your Code and Handling Errors</i> your Visual Basic 5.0 Books Online documentation.</p>
<p>&nbsp;</p></body>
</HTML>

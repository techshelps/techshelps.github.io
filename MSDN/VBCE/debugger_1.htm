<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Understanding Error Types</title>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h2><a name="_vbce_understanding_error_types"></a>Understanding Error Types</h2>
<p>
To understand how debugging is useful, consider the three kinds of errors you can encounter:
<ul>
<li>
Compile errors </li>
<li>
Run-time errors </li>
<li>
Logic errors </li>
</ul>
<p>
<b>Compile Errors</b></p>
<p>
<i>Compile errors</i> result from incorrectly constructed code. If you incorrectly type a keyword, omit some necessary punctuation, or use a Next statement without a corresponding For statement at design time, Visual Basic detects these errors when you compile the application.</p>
<p>
Compile errors include errors in syntax. For example, you could have a statement as follows:</p>
<pre><code>Left$</code></pre>
<p>
Left is a valid word in the Visual Basic language, but whenyou add the invalid character $, it does not meet the syntax requirements for that word. If you have selected the Auto Syntax Check option in the Editor tab on the Options dialog box, Visual Basic will display an error message as soon as you enter a syntax error in the Code window. This option is on by default.</p>
<h4><img src="wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To set the Auto Syntax Check option</h4>
<ol>
<li>
From the <b>Tools</b> menu, select <b>Options</b>, and click the <b>Editor</b> tab on the <b>Options</b> dialog box. <ol>
<li>
Select <b>Auto</b> <b>Syntax</b> <b>Check</b>.</li>
</ol>
</li>
</ol>
<p>
For more information on compile errors, see <a href="comperr.htm">Compile-Time Errors</a>.</p>
<p>
<b>Run-Time Errors</b></p>
<p>
<i>Run-time errors</i> occur while the application is running when a statement attempts an operation that is impossible to carry out. An example of this is division by zero. Suppose you have this statement:</p>
<pre><code>Speed = Miles / Hours</code></pre>
<p>
If the variable Hours contains zero, the division is an invalid operation, even though the statement itself is syntactically correct. The application must run before it can detect this error.</p>
<p>
<b>Logic Errors</b></p>
<p>
<i>Logic errors</i> occur when an application doesn't perform the way it was intended. An application can have syntactically valid code, run without performing any invalid operations, and yet produce incorrect results. Only by testing the application and analyzing results can you verify that the application is performing correctly.</p>
<p>
<b>How Debugging Tools Help</b></p>
<p>
Debugging tools are designed to help you with:
<ul>
<li>
Logic and run-time errors. </li>
<li>
Observing the behavior of code that has no errors. </li>
</ul>
<p>
For instance, an incorrect result may be produced at the end of a long series of calculations. In debugging, the task is to determine what and where something went wrong. Perhaps you forgot to initialize a variable, chose the wrong operator, or used an incorrect formula.</p>
<p>
There are no magic tricks to debugging, and there is no fixed sequence of steps that works every time. Basically, debugging helps you understand what's going on while your application runs. Debugging tools give you a snapshot of the current state of your application, including:
<ul>
<li>
Appearance of the user interface (UI). </li>
<li>
Values of variables, expressions, and properties. </li>
<li>
Active procedure calls. </li>
</ul>
<p>
The better you understand how your application is working, the faster you can find bugs.</p>
<p>&nbsp;</p></body>
</HTML>

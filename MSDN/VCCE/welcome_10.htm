<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Debugging a Program</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h2><a name="_vcce_debugging_a_program"></a>Debugging a Program</h2>
<p>
To debug a Windows CE program, the program must be running in either an emulated or remote Windows CE environment. Under emulation, the Windows CE debugging process is similar to the Visual C++ debugging process. However, to debug a Windows CE program, the program is copied to the object store (during the build process) and executed in a simulated Windows CE environment on your desktop computer. </p>
<p>
The remote debugging model varies, depending on the connection between the remote device and the desktop computer. The Windows CE Toolkit for Visual C++ 5.0 builds all binaries on the desktop computer and then downloads the binaries to the remote device. </p>
<h4><img src="wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To prepare to debug a program on a remote device</h4>
<ol>
<li>
Make sure the remote device is properly connected to the desktop computer.</li>
<li>
On the <b>Tools</b> menu, click <b>Remote Connection Server</b> or any of the remote tools to establish a connection to the remote device. </li>
<li>
On the <b>Build</b> menu, click either <b>Set Active Configuration</b> or <b>Configurations</b>, and then click the <b>Debug</b> option for the platform you want to target.</li>
<li>
On the <b>Build</b> menu, click <b>Debugger Remote Connection</b>.</li>
<li>
In the <b>Remote Connection</b> dialog box, select a target platform from the <b>Platform</b> drop-down combo box and click <b>OK</b>.</li>
<li>
On the <b>Build</b> menu, click <b>Update Remote Output File</b> to load your program onto the remote device. </li>
</ol>
<p>
<b>Note</b>  If you enable <b>Always Download</b> on the <b>Build</b> menu, your program will be automatically loaded onto the remote device during the build process.</p>
<h4><img src="wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To debug on a remote device</h4>
<ol>
<li>
On the <b>Build</b> menu, click <b>Start Debug</b>.</li>
<li>
Select <b>Step Into</b> if you want the debugger to stop at the WinMain entry point<p>
-or-
<p>
select <b>Go</b> if you want the debugger to stop only at soft or hard breakpoints.
</li>
<li>
The debug subsystem will download and initialize on the device, and a series of loads will run until a breakpoint is hit. The integrated debugger is then connected to the device and can control the debug session.</li>
<li>
Perform the debug procedure.</li>
<li>
To exit safely, when the debugger is stopped at a breakpoint, click <b>Stop Debugging</b> on the <b>Build</b> menu.</li>
<li>
When you exit safely, the debug cycle of building, downloading, debugging, and exiting can go on indefinitely.</li>
</ol>
<p>
<b>Note</b>  If you stop the debugger when it is not at a breakpoint, you may leave the remote device in an undetermined state. The debugger can only unload the debug subsystem when the device is at a breakpoint.</p>
<p>
Remote debugging differs from native debugging in the following ways:
<ul>
<li>
All exceptions from any process on the target machine are caught by the debugger. By default, the debugger stops when it catches an exception.</li>
<li>
The project directory, and any project subdirectories, are at the top of the remote symbol mapping order.</li>
<li>
Debug\Stop debugging behavior is continued on exit.</li>
<li>
There is no asynchronous communications with the target — no asynchronous stop, breakpoints, memory updates, etc.</li>
<li>
There is no support for single button stepping out of routines. An alternative is to set a breakpoint or run to cursor on the call stack routine calling the current routine.</li>
</ul>
<p>
<b>Tips</b>  You can enable and disable breakpoints while the debugger is running. The procedure is the same if you set the breakpoints before debugging. Use the hand icon to set or remove a breakpoint where the cursor is positioned, or click <b>Breakpoints</b> on the <b>Edit</b> menu, and specify the line number.</p>
<p>
To optimize performance while single-stepping, close any unnecessary windows in the debugger.</p>
<p>
Click <b>Step Into</b> if you have not set a breakpoint in your executable. If you start debugging using <b>Go,</b> and no breakpoints are set, you may lose control of the target device and may have to restart it. </p>
<p>
Verify that the host machine and the remote device are connected by checking for a connection icon in the icon tray of both taskbars. </p>
<p>
If your remote device loses its connection during debugging, there are several ways to attempt reconnection: unplug and replug the PC-link, run Repllog.exe on the remote device, or cycle its power.</p>
<p>
If your workspace contains both EXE and DLL projects, select EXE as the active project when debugging.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SnmpOpen</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_snmpopen"></a>SnmpOpen</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The <b>SnmpOpen</b> function requests the Microsoft WinSNMP implementation to open a session for the WinSNMP manager application. This WinSNMP function enables the implementation to allocate and initialize memory, resources, data structures, and communications mechanisms. The <b>SnmpOpen</b> function returns a handle to the new WinSNMP session. </p>
<pre><code><b>HSNMP_SESSION SnmpOpen(
</b>  <b>HWND </b><i>hWnd</i>,      // handle to the notification window 
  <b>UINT</b><i> wMsg</i>       // window notification message number 
<b>);</b>
 </code></pre>
<h4>Parameters </h4>
<dl>
<dt>
<i>hWnd </i></dt>
<dd>
Handle to a window of the WinSNMP manager application to notify when an asynchronous request completes, or when trap notification occurs. </dd>
<dt>
<i>wMsg </i></dt>
<dd>
Specifies an unsigned integer that identifies the notification message to send to the WinSNMP manager application window. 
</dd>
</dl>
<h4>Return Values </h4>
<p>
If the function succeeds, the return value is a handle that identifies the WinSNMP session that the implementation opens for the calling manager application. </p>
<p>
If the function fails, the return value is SNMPAPI_FAILURE. To get extended error information, call <a href="winsnmpfc_7upe.htm"><b>SnmpGetLastError</b></a>. The <b>SnmpGetLastError</b> function can return one of the following errors. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=42%>Error Code </th>
<th align=left width=58%>Description </th>
</tr>
<tr valign=top>
<td width=42%>SNMPAPI_NOT_INITIALIZED </td>
<td width=58%>The <a href="winsnmpfc_0vn4.htm"><b>SnmpStartup</b></a> function did not complete successfully. </td>
</tr>
<tr valign=top>
<td width=42%>SNMPAPI_ALLOC_ERROR </td>
<td width=58%>An error occurred during memory allocation. </td>
</tr>
<tr valign=top>
<td width=42%>SNMPAPI_HWND_INVALID </td>
<td width=58%>The <i>hWnd</i> parameter is not a valid window handle. </td>
</tr>
<tr valign=top>
<td width=42%>SNMPAPI_OTHER_ERROR </td>
<td width=58%>An unknown or undefined error occurred. </td>
</tr>
</table><br>
<h4>Remarks </h4>
<p>
The <b>SnmpOpen</b> function returns a unique handle to each open WinSNMP session within the calling WinSNMP manager application. The application must use the session handle that <b>SnmpOpen</b> returns in other WinSNMP function calls to facilitate allocation and deallocation of resources by the implementation. When the implementation allocates resources to an individual session, it performs an orderly release of resources in response to a call to <a href="winsnmpfc_1l0l.htm"><b>SnmpClose</b></a> for the session. </p>
<p>
The <b>SnmpOpen</b> function passes to the implementation the handle to an application window and a notification message identifier. If the <i>wParam</i> component of the notification message specified by the <i>wMsg</i> parameter is equal to zero, the WinSNMP manager application must retrieve the incoming protocol data unit (PDU). The application does this by calling the <a href="winsnmpfc_4u93.htm"><b>SnmpRecvMsg</b></a> function with the session handle returned by <b>SnmpOpen</b>. If the <i>wParam</i> parameter of the notification message is not equal to zero, it represents a WinSNMP error code. The error code applies to the PDU identified by the request identifier in the <i>lParam</i> parameter of the notification message. </p>
<p>
One WinSNMP manager application can open multiple WinSNMP sessions. If an application opens multiple sessions using the same window handle, it is recommended that the WinSNMP manager application specify a unique <i>wMsg</i> parameter for each session. </p>
<p>
It is recommended that a WinSNMP manager application call the <a href="winsnmpfc_1l0l.htm"><b>SnmpClose</b></a> function once for each session that the implementation opens as a result of a call to the <b>SnmpOpen</b> function. If a WinSNMP manager application terminates unexpectedly, it must call <a href="winsnmpfc_11yo.htm"><b>SnmpCleanup</b></a> before it terminates to enable the implementation to deallocate all resources. The implementation treats one <b>SnmpCleanup</b> call as if it were a series of <a href="winsnmpfc_1l0l.htm"><b>SnmpClose</b></a> calls, one call for each session the implementation opens as a result of a call to <b>SnmpOpen</b>. </p>
<p>
For additional information, see <a href="winsnmpov_556b.htm">WinSNMP Sessions</a>. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 5.0 or later. Available as a redistributable for Windows NT 4.0.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winsnmp.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use wsnmp32.lib.</p>
<h4>See Also </h4>
<p>
<a href="winsnmpov_6tpl.htm">WinSNMP Manager API Overview</a>, <a href="winsnmpfc_09kj.htm">WinSNMP Functions</a>, <a href="winsnmpfc_1l0l.htm"><b>SnmpClose</b></a>, <a href="winsnmpfc_11yo.htm"><b>SnmpCleanup</b></a>, <a href="winsnmpfc_4u93.htm"><b>SnmpRecvMsg</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SnmpCreatePdu</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_snmpcreatepdu"></a>SnmpCreatePdu</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The WinSNMP <b>SnmpCreatePdu</b> function creates and initializes an SNMP protocol data unit (PDU). </p>
<pre><code><b>HSNMP_PDU SnmpCreatePdu(
</b>  <b>HSNMP_SESSION</b> <i>session</i>, // handle to the WinSNMP session 
  <b>smiINT</b> <i>PDU_type</i>,       // PDU type 
<b>  smiINT32</b> <i>request_id</i><b>,   </b>// PDU request identifier 
<b>  smiINT</b> <i>error_status</i><b>,   </b>//<b> </b>valid only for <b>SNMP_PDU_GETBULK</b> requests
<b>  smiINT</b> <i>error_index</i><b>,    </b>//<b> </b>valid only for <b>SNMP_PDU_GETBULK</b> requests
<b>  HSNMP_VBL</b> <i>varbindlist  </i>// handle to the variable bindings list<i> </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>session </i></dt>
<dd>
Handle to the WinSNMP session. </dd>
<dt>
<i>PDU_type </i></dt>
<dd>
Specifies a PDU type that identifies the SNMP operation. This parameter can be NULL, or it can be one of the following values. If this parameter is NULL, the Microsoft WinSNMP implementation supplies the default PDU type <b>SNMP_PDU_GETNEXT</b>. 

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=43%>Value </th>
<th align=left width=57%>Meaning </th>
</tr>
<tr valign=top>
<td width=43%><b>SNMP_PDU_GET</b> </td>
<td width=57%>Search and retrieve a value from a specified SNMP variable. </td>
</tr>
<tr valign=top>
<td width=43%><b>SNMP_PDU_GETNEXT</b> </td>
<td width=57%>Search and retrieve the value of an SNMP variable without knowing the exact name of the variable. </td>
</tr>
<tr valign=top>
<td width=43%><b>SNMP_PDU_RESPONSE</b> </td>
<td width=57%>Reply to an <b>SNMP_PDU_GET</b> or an <b>SNMP_PDU_GETNEXT</b> request. </td>
</tr>
<tr valign=top>
<td width=43%><b>SNMP_PDU_SET</b> </td>
<td width=57%>Store a value in a specified SNMP variable. </td>
</tr>
<tr valign=top>
<td width=43%><b>SNMP_PDU_V1TRAP</b> </td>
<td width=57%>Alerts the management system to an extraordinary event under the SNMP version 1 (SNMPv1) framework. This type is obsolete in SNMP version 2C (SNMPv2C). </td>
</tr>
<tr valign=top>
<td width=43%><b>SNMP_PDU_GETBULK</b> </td>
<td width=57%>Search and retrieve multiple values with a single request. </td>
</tr>
<tr valign=top>
<td width=43%><b>SNMP_PDU_TRAP</b> </td>
<td width=57%>Alerts the management system to an event under SNMPv2C. </td>
</tr>
</table><br>

</dd>
<dt>
<i>request_id </i></dt>
<dd>
Specifies a unique numeric value that the WinSNMP manager application supplies to identify the PDU. If this parameter is NULL, the implementation assigns a value. </dd>
<dt>
<i>error_status </i></dt>
<dd>
If the <i>PDU_type</i> parameter is equal to <b>SNMP_PDU_GETBULK</b>, this parameter specifies a value for the <b>non_repeaters</b> field of the PDU. This parameter is ignored for other PDU types, and the implementation sets the value of this parameter to SNMP_ERROR_NOERROR. This parameter can be NULL. </dd>
<dt>
<i>error_index </i></dt>
<dd>
If the <i>PDU_type</i> parameter is equal to <b>SNMP_PDU_GETBULK</b>, this parameter specifies a value for the <b>max_repetitions</b> field of the PDU. This parameter is ignored for other PDU types, and the implementation sets the value of this parameter to zero. This parameter can be NULL. </dd>
<dt>
<i>varbindlist </i></dt>
<dd>
Handle to a structure that represents an SNMP variable bindings list. This parameter can be NULL. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is the handle to a new SNMP PDU. </p>
<p>
If the function fails, the return value is SNMPAPI_FAILURE. To get extended error information, call <a href="winsnmpfc_7upe.htm"><b>SnmpGetLastError</b></a>. The <b>SnmpGetLastError</b> function can return one of the following errors. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=44%>Error code </th>
<th align=left width=56%>Description </th>
</tr>
<tr valign=top>
<td width=44%>SNMPAPI_NOT_INITIALIZED </td>
<td width=56%>The <a href="winsnmpfc_0vn4.htm"><b>SnmpStartup</b></a> function did not complete successfully. </td>
</tr>
<tr valign=top>
<td width=44%>SNMPAPI_ALLOC_ERROR </td>
<td width=56%>An error occurred during memory allocation. </td>
</tr>
<tr valign=top>
<td width=44%>SNMPAPI_SESSION_INVALID </td>
<td width=56%>The session handle is invalid. </td>
</tr>
<tr valign=top>
<td width=44%>SNMPAPI_PDU_INVALID </td>
<td width=56%>The PDU type is invalid. </td>
</tr>
<tr valign=top>
<td width=44%>SNMPAPI_VBL_INVALID </td>
<td width=56%>The<i> </i>variable bindings list is invalid. </td>
</tr>
<tr valign=top>
<td width=44%>SNMPAPI_OTHER_ERROR </td>
<td width=56%>An unknown or undefined error occurred. </td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
A WinSNMP manager application must create a PDU before it calls the <a href="winsnmpfc_646f.htm"><b>SnmpSendMsg</b></a> or the <a href="winsnmpfc_036v.htm"><b>SnmpEncodeMsg</b></a> functions. </p>
<p>
All of the parameters of the <b>SnmpCreatePdu</b> function are required. However, all parameters, except the <i>session</i> parameter, can be NULL. In this instance, the new PDU has the following default values. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=42%>Field </th>
<th align=left width=58%>Contents </th>
</tr>
<tr valign=top>
<td width=42%><b>PDU_type</b> </td>
<td width=58%><b>SNMP_PDU_GETNEXT</b> </td>
</tr>
<tr valign=top>
<td width=42%><b>request_id</b> </td>
<td width=58%>The implementation generates a numeric value. </td>
</tr>
<tr valign=top>
<td width=42%><b>error_status</b> </td>
<td width=58%>SNMP_ERROR_NOERROR </td>
</tr>
<tr valign=top>
<td width=42%><b>error_index</b> </td>
<td width=58%>0 </td>
</tr>
<tr valign=top>
<td width=42%><b>varbindlist</b> </td>
<td width=58%>NULL </td>
</tr>
</table><br>
<p>
The application must call the <a href="winsnmpfc_8eb9.htm"><b>SnmpFreePdu</b></a> function to release the resources that the <b>SnmpCreatePdu</b> function allocates for the new PDU. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 5.0 or later. Available as a redistributable for Windows NT 4.0.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winsnmp.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use wsnmp32.lib.</p>
<h4>See Also</h4>
<p>
<a href="winsnmpov_6tpl.htm">WinSNMP Manager API Overview</a>, <a href="winsnmpfc_09kj.htm">WinSNMP Functions</a>, <a href="winsnmpfc_8eb9.htm"><b>SnmpFreePdu</b></a>, <a href="winsnmpfc_646f.htm"><b>SnmpSendMsg</b></a>, <a href="winsnmpfc_036v.htm"><b>SnmpEncodeMsg</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

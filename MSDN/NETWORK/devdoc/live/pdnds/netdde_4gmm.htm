<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Establishing a Network DDE Conversation</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_establishing_a_network_dde_conversation"></a>Establishing a Network DDE Conversation</h2>
<p>
Establishing a conversation between a client application and a server application on different computers is similar to establishing a conversation between a client and server on the same computer. The difference is that the client specifies a computer and a DDE share, rather than an application and a topic.</p>
<p>
The first step is for the server to register with the DDEML by calling the <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_ddeinitialize">
</object><a href=JavaScript:alink_1.Click()><b>DdeInitialize</b></a> function. This call requires a pointer to the application-defined DDE callback function <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_ddecallback">
</object><a href=JavaScript:alink_2.Click()><b>DdeCallback</b></a>. The server also registers the service name that the DDE server supports by calling the <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_ddenameservice">
</object><a href=JavaScript:alink_3.Click()><b>DdeNameService</b></a> function.</p>
<pre><code>DWORD g_idInst;

BOOL MyDdeShareInit( LPTSTR lpszServer, PFNCALLBACK DdeCallback )
{
   HSZ hszService;
   char ServerBuf[MAX_COMPUTERNAME_LENGTH+8];

// Register the server application.
   if( DdeInitialize( 
      &amp;g_idInst,
      (PFNCALLBACK) DdeCallback,
      APPCLASS_STANDARD | CBF_FAIL_SELFCONNECTIONS | 
      CBF_FAIL_REQUESTS | CBF_FAIL_EXECUTES,
      0L 
   ) != DMLERR_NO_ERROR )
      return FALSE;

// Check if "\\server" or just "server" is specified.
   if( lpszServer[0] == '\\' )
      wsprintf( ServerBuf, "%s\\NDDE$", lpszServer );
   else wsprintf( ServerBuf, "\\\\%s\\NDDE$", lpszServer );

// Register the service names.
   hszService = DdeCreateStringHandle( g_idInst, ServerBuf, 0 );
   DdeNameService(
      g_idInst,
      hszService,
      0,
      DNS_REGISTER
     );

   DdeFreeStringHandle( g_idInst, hszService );
   return TRUE;
}
 </code></pre>
<p>
The following example shows how you could call the MyConnect function to initialize DDEML for the server application on computer ServerA:</p>
<pre><code>// Application-supplied callback function.
HDDEDATA CALLBACK DdeCallback( UINT iType, UINT iFmt, HCONV hConv, 
   HSZ hsz1, HSZ hsz2, HDDEDATA hData, DWORD dwData1, DWORD dwData2 )
{
   switch( iType )
   {
      case XTYP_CONNECT:
      // Validate topic for connection.
         ...
         return (HDDEDATA) TRUE;
      ...
      default:
         return (HDDEDATA) 0;
   }
}

MyDdeShareInit( "ServerA", DdeCallback );
 </code></pre>
<p>
As with any DDE conversation, the client and server applications must cooperate to establish a conversation. For network DDE, the client must have the computer name and the share name. The client then uses the <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_ddeconnect">
</object><a href=JavaScript:alink_4.Click()><b>DdeConnect</b></a> function to establish a network DDE conversation.</p>
<pre><code>HCONV g_hConv;

BOOL MyConnect( LPSTR lpszServer, LPTSTR lpszTopic )
{
   HSZ hszServer, hszTopic;
   char ServerBuf[MAX_COMPUTERNAME_LENGTH+8];

// Register the client application.
   if( DdeInitialize( 
      &amp;g_idInst,
      (PFNCALLBACK) DdeCallback,
      APPCLASS_STANDARD | CBF_FAIL_SELFCONNECTIONS | 
      CBF_FAIL_REQUESTS | CBF_FAIL_EXECUTES,
      0L 
   ) != DMLERR_NO_ERROR )
      return FALSE;

// Check if "\\server" or just "server" is specified.
   if( lpszServer[0] == '\\' )
      wsprintf( ServerBuf, "%s\\NDDE$", lpszServer );
   else wsprintf( ServerBuf, "\\\\%s\\NDDE$", lpszServer );

   hszServer = DdeCreateStringHandle(g_idInst, ServerBuf, 0);
   hszTopic = DdeCreateStringHandle(g_idInst, lpszTopic, 0);

   if( (g_hConv = DdeConnect(g_idInst, 
      hszServer, 
      hszTopic, 
      NULL )
   ) == 0 )
      return FALSE;

   DdeFreeStringHandle( g_idInst, hszServer );
   DdeFreeStringHandle( g_idInst, hszTopic );
   return TRUE;
}
 </code></pre>
<p>
The following example shows how you could call this function to connect to the DDE share MyDdeShare$ on computer ServerA:</p>
<pre><code>// Application-supplied callback function.
HDDEDATA CALLBACK DdeCallback( UINT iType, UINT iFmt, HCONV hConv, 
   HSZ hsz1, HSZ hsz2, HDDEDATA hData, DWORD dwData1, DWORD dwData2 )
{
   switch( iType )
   {
      ...
      default:
         return (HDDEDATA) 0;
   }
}

MyConnect( "ServerA", "MyDdeShare$" );
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

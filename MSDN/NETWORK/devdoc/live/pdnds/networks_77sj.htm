<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Enumerating Network Resources</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_enumerating_network_resources"></a>Enumerating Network Resources</h2>
<p>
<b>Windows NT Only</b></p>
<p>
To enumerate a network container resource, your application should pass the address of a <a href="networks_0nle.htm"><b>NETRESOURCE</b></a> structure to the <a href="networks_8wtp.htm"><b>WNetOpenEnum</b></a> function. <b>WNetOpenEnum</b> creates a handle to the resource described by the <b>NETRESOURCE</b> structure. The application then passes this handle to the <a href="networks_03ad.htm"><b>WNetEnumResource</b></a> function, which returns information about the resource in the form of an array of <b>NETRESOURCE</b> structures. When the handle is no longer needed, the application can close it by calling the <a href="networks_40fh.htm"><b>WNetCloseEnum</b></a> function. </p>
<p>
Your application can continue enumerating any container resource described in the array of <b>NETRESOURCE</b> structures retrieved by <b>WNetEnumResource</b>. If the <b>dwUsage</b> member of the <b>NETRESOURCE</b> structure is RESOURCEUSAGE_CONTAINER, the application can pass the address of that structure to <b>WNetOpenEnum</b> to open the container and continue the enumeration. If <b>dwUsage</b> is RESOURCEUSAGE_CONNECTABLE, the application can pass the structure's address to the <a href="networks_84z6.htm"><b>WNetAddConnection2</b></a> function. </p>
<p>
The following example illustrates an application-defined function (EnumerateFunc) that enumerates all the resources on a network. When calling this function, specify NULL for the pointer to the <b>NETRESOURCE</b> structure. When <b>WNetOpenEnum</b> receives the NULL pointer, it retrieves a handle to the root of the network. Whenever a <b>NETRESOURCE</b> structure retrieved by <b>WNetEnumResource</b> is RESOURCEUSAGE_CONTAINER, the EnumerateFunc function calls itself and uses a pointer to that structure in its call to <b>WNetOpenEnum</b>. </p>
<pre><code>BOOL WINAPI EnumerateFunc(HWND hwnd, 
                          HDC hdc, 
                          LPNETRESOURCE lpnr) 
{ 
    DWORD dwResult, dwResultEnum; 
    HANDLE hEnum; 
    DWORD cbBuffer = 16384;      // 16K is a good size 
    DWORD cEntries = 0xFFFFFFFF; // enumerate all possible entries 
    LPNETRESOURCE lpnrLocal;     // pointer to enumerated structures 
    DWORD i; 
 
    dwResult = WNetOpenEnum(RESOURCE_GLOBALNET, 
        RESOURCETYPE_ANY, 
        0,                 // enumerate all resources 
        lpnr,              // NULL first time this function is called 
        &amp;hEnum);           // handle to resource 
 
    if (dwResult != NO_ERROR) { 
 
        // An application-defined error handler is demonstrated in the 
        // section titled "Retrieving Network Errors." 

        NetErrorHandler(hwnd, dwResult, (LPSTR)"WNetOpenEnum"); 
        return FALSE; 
    } 
 
    do { 
 
        // Allocate memory for NETRESOURCE structures.
 
        lpnrLocal = (LPNETRESOURCE) GlobalAlloc(GPTR, cbBuffer); 
 
        dwResultEnum = WNetEnumResource(hEnum, // resource handle 
            &amp;cEntries,               // defined locally as 0xFFFFFFFF 
            lpnrLocal,               // LPNETRESOURCE 
            &amp;cbBuffer);              // buffer size 
 
        if (dwResultEnum == NO_ERROR) { 
            for(i = 0; i &lt; cEntries; i++) 
            { 
                // Following is an application-defined function for 
                // displaying contents of NETRESOURCE structures. 
 
                DisplayStruct(hdc, &amp;lpnrLocal[i]); 
 
                // 
                // If this NETRESOURCE is a container, call the function 
                // recursively. 

                if(RESOURCEUSAGE_CONTAINER == 
                        (lpnrLocal[i].dwUsage &amp; RESOURCEUSAGE_CONTAINER)) 
                    if(!EnumerateFunc(hwnd, hdc, &amp;lpnrLocal[i])) 
                        TextOut(hdc, 10, 10, 
                            "EnumerateFunc returned FALSE.", 29); 
 
            } 
        } 
 
        else if (dwResultEnum != ERROR_NO_MORE_ITEMS) { 
            NetErrorHandler(hwnd, dwResultEnum, (LPSTR)"WNetEnumResource"); 
            break; 
        } 
    } 
    while(dwResultEnum != ERROR_NO_MORE_ITEMS); 
 
    GlobalFree((HGLOBAL) lpnrLocal); 
 
    dwResult = WNetCloseEnum(hEnum); 
 
    if(dwResult != NO_ERROR) { 
        NetErrorHandler(hwnd, dwResult, (LPSTR)"WNetCloseEnum"); 
        return FALSE; 
    } 
 
    return TRUE; 
} 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

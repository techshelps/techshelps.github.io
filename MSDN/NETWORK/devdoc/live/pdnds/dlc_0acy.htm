<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>LLC_BUFFER_GET_PARMS</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_llc_buffer_get_parms_str"></a>LLC_BUFFER_GET_PARMS</h1>
<p>
The <b>LLC_BUFFER_GET_PARMS</b> structure is the DLC parameter table for the LLC_BUFFER_GET command. You pass a pointer to this structure using the <b>pParameterTable</b> member of the <a href="dlc_13le.htm"><b>CCB_PARMS</b></a> union. </p>
<pre><code>typedef struct {
    USHORT usReserved1; 
    USHORT cBuffersLeft; 
    USHORT cBuffersToGet;
    USHORT cbBufferSize;
    PLLC_XMIT_BUFFER pFirstBuffer;
} LLC_BUFFER_GET_PARMS, *PLLC_BUFFER_GET_PARMS;
 </code></pre>
<h4>Members</h4>
<dl>
<dt>
<b>usReserved1</b></dt>
<dd>
Reserved. </dd>
<dt>
<b>cBuffersLeft</b></dt>
<dd>
The number of free buffer segments in the pool after the command completes. </dd>
<dt>
<b>cBuffersToGet</b></dt>
<dd>
The number of buffers to get from the pool. If you specify zero, the buffer list returned can consists of segments of different sizes. </dd>
<dt>
<b>cbBufferSize</b></dt>
<dd>
The size of the requested buffers. The system rounds this number to the next largest segment size (256, 512, 1024, 2048, or 4096). </dd>
<dt>
<b>pFirstBuffer</b></dt>
<dd>
Specifies the address of an <a href="dlc_3yeq.htm"><b>LLC_XMIT_BUFFER</b></a> structure representing the first buffer obtained. 
</dd>
</dl>
<h4>Remarks</h4>
<p>
If <b>cBuffersToGet</b> is zero and <b>cbBufferSize</b> is the size of the frame that is copied to the buffers, the system returns enough buffers to contain the whole frame, including its buffer headers. Then <b>cBuffersLeft</b> receives the size of free locked memory, in 256-byte blocks, or 65536 if the actual size is about 1 MB. </p>
<p>
If the pool contains an inadequate number of buffers, the command fails with the status code LLC_STATUS_INADEQUATE_BUFFERS. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in dlcapi.h.</p>
<h4>See Also</h4>
<p>
<a href="dlc_0pwl.htm">The DLC Interface Overview</a>, <a href="dlc_2s6r.htm">DLC Structures</a>, <a href="dlc_43zi.htm"><b>AcsLan</b></a>, <a href="dlc_13le.htm"><b>CCB_PARMS</b></a>, <a href="dlc_3yeq.htm"><b>LLC_XMIT_BUFFER</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

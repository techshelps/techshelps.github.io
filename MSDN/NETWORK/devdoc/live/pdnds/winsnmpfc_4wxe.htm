<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SnmpRegister</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_snmpregister"></a>SnmpRegister</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The WinSNMP <b>SnmpRegister</b> function registers or unregisters a WinSNMP manager application for trap and notification reception. The application can register and receive traps and notifications, or unregister and disable traps and notifications. </p>
<p>
A WinSNMP manager application can register or unregister for one type of trap or notification, or for all traps and notifications, depending on the value of the <i>notification</i> parameter. </p>
<pre><code><b>SNMPAPI_STATUS SnmpRegister(
</b>  <b>HSNMP_SESSION </b><i>session</i>,   // handle to the WinSNMP session 
  <b>HSNMP_ENTITY </b><i>srcEntity</i>,  // handle to the entity that will
                           // receive traps 
<b>  HSNMP_ENTITY </b><i>dstEntity</i><b>,  </b>//<b> </b>handle to the entity that will
                           // send traps 
<b>  HSNMP_CONTEXT </b><i>context</i><b>,   </b>//<b> </b>handle to the context 
<b>  smiLPCOID </b><i>notification</i><b>,  </b>//<b> </b>trap-matching sequence 
<b>  smiUINT32 </b><i>state</i>          // flag for trap reception 
<b>);</b>
 </code></pre>
<h4>Parameters </h4>
<dl>
<dt>
<i>session </i></dt>
<dd>
Handle to the WinSNMP session that is registering or unregistering for traps and notifications. </dd>
<dt>
<i>srcEntity </i></dt>
<dd>
Handle to the management entity that is the source of the trap or notification registration request. This entity, acting in an SNMP manager role, will receive the trap or notification. 
<p>
If this parameter is NULL, the Microsoft WinSNMP implementation registers or unregisters all sources of trap and notification requests. 

<p>
Note that the <i>srcEntity </i>parameter to the <a href="winsnmpfc_4u93.htm"><b>SnmpRecvMsg</b></a> function receives a handle to the management entity that sends traps. 
</dd>
<dt>
<i>dstEntity </i></dt>
<dd>
Handle to the management entity that is the recipient of the trap or notification registration request. This entity, acting in an SNMP agent role, will send the trap or notification. 
<p>
If this parameter is NULL, the implementation registers or unregisters the WinSNMP manager application for traps and notifications from all management entities. 

<p>
Note that the <i>dstEntity </i>parameter to the <a href="winsnmpfc_4u93.htm"><b>SnmpRecvMsg</b></a> function receives a handle to the management entity that requests traps. 
</dd>
<dt>
<i>context </i></dt>
<dd>
Handle to the context, which is a set of managed object resources. 
<p>
If this parameter is NULL, the implementation registers or unregisters the WinSNMP manager application for traps and notifications for every context. 
</dd>
<dt>
<i>notification </i></dt>
<dd>
Pointer to an <a href="winsnmpst_994i.htm"><b>smiOID</b></a> structure that contains the pattern-matching sequence for one type of trap or notification. The implementation uses this sequence to identify the type of trap or notification for which the WinSNMP manager application is registering or unregistering. For additional information, see the following Remarks section. 
<p>
If this parameter is NULL, the implementation registers or unregisters the WinSNMP manager application for all traps and notifications from the management entity or entities specified by the <i>dstEntity</i> parameter. 
</dd>
<dt>
<i>state</i> </dt>
<dd>
Specifies an unsigned long integer variable that indicates whether the WinSNMP manager application is registering to receive traps and notifications, or if it is unregistering. This parameter should be equal to one of the following values, but if it contains a different value, the implementation registers the application. 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=38%>Value </th>
<th align=left width=62%>Meaning </th>
</tr>
<tr valign=top>
<td width=38%>SNMPAPI_OFF </td>
<td width=62%>Disable traps and notifications. </td>
</tr>
<tr valign=top>
<td width=38%>SNMPAPI_ON </td>
<td width=62%>Register to receive traps and notifications. </td>
</tr>
</table><br>

</dd>
</dl>
<h4>Return Values </h4>
<p>
If the function succeeds, the return value is SNMPAPI_SUCCESS. </p>
<p>
If the function fails, the return value is SNMPAPI_FAILURE. To get extended error information, call <a href="winsnmpfc_7upe.htm"><b>SnmpGetLastError</b></a>. The <b>SnmpGetLastError</b> function may return one of the following WinSNMP or network transport layer errors. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=46%>Error Code </th>
<th align=left width=54%>Description </th>
</tr>
<tr valign=top>
<td width=46%>SNMPAPI_NOT_INITIALIZED </td>
<td width=54%>The <a href="winsnmpfc_0vn4.htm"><b>SnmpStartup</b></a> function did not complete successfully. </td>
</tr>
<tr valign=top>
<td width=46%>SNMPAPI_ALLOC_ERROR </td>
<td width=54%>An error occurred during memory allocation. </td>
</tr>
<tr valign=top>
<td width=46%>SNMPAPI_SESSION_INVALID </td>
<td width=54%>The <i>session</i> parameter is invalid. </td>
</tr>
<tr valign=top>
<td width=46%>SNMPAPI_ENTITY_INVALID </td>
<td width=54%>One or both of the entity parameters is invalid. </td>
</tr>
<tr valign=top>
<td width=46%>SNMPAPI_CONTEXT_INVALID </td>
<td width=54%>The <i>context</i> parameter is invalid. </td>
</tr>
<tr valign=top>
<td width=46%>SNMPAPI_OID_INVALID </td>
<td width=54%>The <i>notification</i> parameter is invalid. </td>
</tr>
<tr valign=top>
<td width=46%>SNMPAPI_TL_NOT_INITIALIZED</td>
<td width=54%>The network transport layer was not initialized. </td>
</tr>
<tr valign=top>
<td width=46%>SNMPAPI_TL_IN_USE</td>
<td width=54%>The trap port is not available. </td>
</tr>
<tr valign=top>
<td width=46%>SNMPAPI_TL_NOT_AVAILABLE</td>
<td width=54%>The network subsystem failed. </td>
</tr>
<tr valign=top>
<td width=46%>SNMPAPI_OTHER_ERROR </td>
<td width=54%>An unknown or undefined error occurred. </td>
</tr>
</table><br>
<p>
For additional information, see <a href="winsnmpov_23qr.htm">Network Transport Errors</a>. </p>
<h4>Remarks </h4>
<p>
If a WinSNMP manager application passes NULL in a call to the <b>SnmpRegister</b> function in the <i>srcEntity</i>, <i>dstEntity</i>, <i>context</i>, or <i>notification</i> parameters, the implementation does not use that parameter to filter traps and notifications from reaching the WinSNMP manager application. </p>
<p>
If a WinSNMP manager application registers to receive a specific type of trap or notification, it must define an object identifier, that is, an <a href="winsnmpst_994i.htm"><b>smiOID</b></a> structure, that corresponds to that type of trap. The <i>notification</i> parameter must point to this structure. RFC 1907, "Management Information Base for Version 2 of the Simple Network Management Protocol (SNMPv2)," defines trap and notification object identifiers. For additional information, see <a href="winsnmpov_88kj.htm">Translating Traps from SNMPv1 to SNMPv2C</a>. </p>
<p>
The implementation uses the value of the <i>notification</i> parameter as a pattern to match against received traps and notifications. For example, if the WinSNMP manager application passes <i>n</i> number of subidentifiers in the <i>notification</i> parameter, and the first <i>n</i> subidentifiers in a received trap match all the passed subidentifiers, then the trap object identifier is a match. If a received trap has fewer subidentifiers than <i>n</i>, the object identifier does not match. If there is a match, the implementation sends the trap or notification to the WinSNMP manager application. </p>
<p>
If any or all of the <i>dstEntity, srcEntity, </i>or <i>context</i> parameters are NULL, the implementation may need to allocate resources on a subsequent call to the <a href="winsnmpfc_4u93.htm"><b>SnmpRecvMsg</b></a> function, for that function's corresponding parameters. When the WinSNMP manager application no longer needs the resources <b>SnmpRecvMsg</b> returns, the application must free the individual resources with the function that corresponds to the resource. For additional information, see <a href="winsnmpfc_7zsp.htm"><b>SnmpFreeEntity</b></a> and <a href="winsnmpfc_4tmc.htm"><b>SnmpFreeContext</b></a>. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 5.0 or later. Available as a redistributable for Windows NT 4.0.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winsnmp.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use wsnmp32.lib.</p>
<h4>See Also </h4>
<p>
<a href="winsnmpov_6tpl.htm">WinSNMP Manager API Overview</a>, <a href="winsnmpfc_09kj.htm">WinSNMP Functions</a>, <a href="winsnmpfc_9tf2.htm"><b>SnmpOpen</b></a>, <a href="winsnmpfc_4u93.htm"><b>SnmpRecvMsg</b></a>, <a href="winsnmpfc_7zsp.htm"><b>SnmpFreeEntity</b></a>, <a href="winsnmpfc_4tmc.htm"><b>SnmpFreeContext</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

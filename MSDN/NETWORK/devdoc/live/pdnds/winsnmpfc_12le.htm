<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SnmpGetVb</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_snmpgetvb"></a>SnmpGetVb</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
A WinSNMP manager application calls the <b>SnmpGetVb</b> function to retrieve information from a variable bindings list. This WinSNMP function retrieves a variable name and its associated value from the variable binding entry specified by the <i>index</i> parameter. </p>
<pre><code><b>SNMPAPI_STATUS SnmpGetVb(
</b>  <b>HSNMP_VBL </b><i>vbl</i>,    // handle to the variable bindings list 
  <b>smiUINT32 </b><i>index</i>,  // position of the variable binding entry
                    // in the list 
<b>  smiLPOID </b><i>name</i><b>,</b>    // pointer to the structure to receive the
                    // variable name 
<b>  smiLPVALUE </b><i>value  </i>// pointer to the structure to receive the
                    // associated value 
<b>);</b>
 </code></pre>
<h4>Parameters </h4>
<dl>
<dt>
<i>vbl </i></dt>
<dd>
Handle to the variable bindings list to retrieve. </dd>
<dt>
<i>index </i></dt>
<dd>
Specifies an unsigned long integer variable that identifies the variable binding entry to retrieve. This variable contains the position of the variable binding entry, within the variable bindings list. 
<p>
Valid values for this parameter are in the range from 1 to <i>n</i>, where 1 indicates the first variable binding entry in the variable bindings list, and <i>n</i> is the total number of entries in the list. For additional information, see the following Remarks section. 
</dd>
<dt>
<i>name </i></dt>
<dd>
Pointer to an <a href="winsnmpst_994i.htm"><b>smiOID</b></a> structure to receive the variable name of the variable binding entry. </dd>
<dt>
<i>value </i></dt>
<dd>
Pointer to an <a href="winsnmpst_5koi.htm"><b>smiVALUE</b></a> structure to receive the value associated with the variable identified by the <i>name</i> parameter. 
<p>
If the function succeeds, the <b>syntax</b> member of the structure pointed to by the <i>value</i> parameter can be one of the following syntax data types. For additional information, see RFC 1902, "Structure of Management Information for Version 2 of the Simple Network Management Protocol (SNMPv2)." 

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=57%>Syntax data type </th>
<th align=left width=43%>Meaning </th>
</tr>
<tr valign=top>
<td width=57%><b>SNMP_SYNTAX_INT</b> </td>
<td width=43%>Indicates a 32-bit signed integer variable. </td>
</tr>
<tr valign=top>
<td width=57%><b>SNMP_SYNTAX_BITS</b> </td>
<td width=43%>Indicates a variable that is an enumeration of named bits with non-negative, contiguous values, starting at zero. </td>
</tr>
<tr valign=top>
<td width=57%><b>SNMP_SYNTAX_OCTETS</b> </td>
<td width=43%>Indicates an octet string variable that is binary or textual data. </td>
</tr>
<tr valign=top>
<td width=57%><b>SNMP_SYNTAX_NULL</b> </td>
<td width=43%>Indicates a NULL value. </td>
</tr>
<tr valign=top>
<td width=57%><b>SNMP_SYNTAX_OID</b> </td>
<td width=43%>Indicates an object identifier variable that is an assigned name with a maximum of 128 subidentifiers. </td>
</tr>
<tr valign=top>
<td width=57%><b>SNMP_SYNTAX_INT32</b> </td>
<td width=43%>Indicates a 32-bit signed integer variable. </td>
</tr>
<tr valign=top>
<td width=57%><b>SNMP_SYNTAX_IPADDR</b> </td>
<td width=43%>Indicates a 32-bit Internet address variable. </td>
</tr>
<tr valign=top>
<td width=57%><b>SNMP_SYNTAX_CNTR32</b> </td>
<td width=43%>Indicates a counter variable that increases until it reaches a maximum value of (2^32) – 1. </td>
</tr>
<tr valign=top>
<td width=57%><b>SNMP_SYNTAX_GAUGE32</b> </td>
<td width=43%>Indicates a gauge variable that is a non-negative integer that can increase or decrease, but never exceed a maximum value. </td>
</tr>
<tr valign=top>
<td width=57%><b>SNMP_SYNTAX_TIMETICKS</b> </td>
<td width=43%>Indicates a counter variable that measures the time in hundredths of a second, until it reaches a maximum value of (2^32) – 1. It is a non-negative integer that is relative to a specific timer event. </td>
</tr>
<tr valign=top>
<td width=57%><b>SNMP_SYNTAX_OPAQUE</b> </td>
<td width=43%>This type provides backward compatibility, and should not be used for new object types. It supports the capability to pass arbitrary Abstract Syntax Notation One (ASN.1) syntax. </td>
</tr>
<tr valign=top>
<td width=57%><b>SNMP_SYNTAX_CNTR64</b> </td>
<td width=43%>Indicates a counter variable that increases until it reaches a maximum value of (2^64) – 1. </td>
</tr>
<tr valign=top>
<td width=57%><b>SNMP_SYNTAX_UINT32</b> </td>
<td width=43%>Indicates a 32-bit unsigned integer variable. </td>
</tr>
<tr valign=top>
<td width=57%><b>SNMP_SYNTAX_NOSUCHOBJECT</b> </td>
<td width=43%>Indicates that the agent does not support the object type that corresponds to the variable. </td>
</tr>
<tr valign=top>
<td width=57%><b>SNMP_SYNTAX_NOSUCHINSTANCE</b> </td>
<td width=43%>Indicates that the object instance does not exist for the operation. </td>
</tr>
<tr valign=top>
<td width=57%><b>SNMP_SYNTAX_ENDOFMIBVIEW</b> </td>
<td width=43%>Indicates the WinSNMP manager application is attempting to reference an object identifier that is beyond the end of the MIB tree that the agent supports. </td>
</tr>
</table><br>

</dd>
</dl>
<p>
The last three syntax types describe exception conditions under the SNMP version 2C(SNMPv2C) framework. </p>
<h4>Return Values </h4>
<p>
If the function succeeds, the return value is SNMPAPI_SUCCESS. </p>
<p>
If the function fails, the return value is SNMPAPI_FAILURE. To get extended error information, call <a href="winsnmpfc_7upe.htm"><b>SnmpGetLastError</b></a>. The <b>SnmpGetLastError</b> function can return one of the following errors. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=44%>Error Code </th>
<th align=left width=56%>Description </th>
</tr>
<tr valign=top>
<td width=44%>SNMPAPI_NOT_INITIALIZED </td>
<td width=56%>The <a href="winsnmpfc_0vn4.htm"><b>SnmpStartup</b></a> function did not complete successfully. </td>
</tr>
<tr valign=top>
<td width=44%>SNMPAPI_ALLOC_ERROR </td>
<td width=56%>An error occurred during memory allocation. </td>
</tr>
<tr valign=top>
<td width=44%>SNMPAPI_INDEX_INVALID </td>
<td width=56%>The <i>index</i> parameter is invalid. </td>
</tr>
<tr valign=top>
<td width=44%>SNMPAPI_VBL_INVALID </td>
<td width=56%>The <i>vbl</i> parameter is invalid. </td>
</tr>
<tr valign=top>
<td width=44%>SNMPAPI_OTHER_ERROR </td>
<td width=56%>An unknown or undefined error occurred. </td>
</tr>
</table><br>
<h4>Remarks </h4>
<p>
The <b>SnmpGetVb</b> function returns the variable name of the variable binding entry in the structure pointed to by the <i>name</i> parameter. It returns the variable's associated value in the structure pointed to by the <i>value</i> parameter. </p>
<p>
On input, the <b>SnmpGetVb</b> function ignores the members of the <a href="winsnmpst_994i.htm"><b>smiOID</b></a> and <a href="winsnmpst_5koi.htm"><b>smiVALUE</b></a> structures pointed to by the <i>name</i> and <i>value</i> parameters respectively. The Microsoft WinSNMP implementation overwrites the members if the function completes successfully. </p>
<p>
Valid values for a WinSNMP manager application to use for the <i>index</i> parameter are as follows: 
<ul>
<li>
The return value from a call to the <a href="winsnmpfc_0ui4.htm"><b>SnmpCountVbl</b></a> function </li>
<li>
The error index field of an <b>SNMP_PDU_RESPONSE</b> protocol data unit (PDU) returned by a call to the <a href="winsnmpfc_4u93.htm"><b>SnmpRecvMsg</b></a> function </li>
</ul>
<p>
The WinSNMP manager application must call the <a href="winsnmpfc_9u42.htm"><b>SnmpFreeDescriptor</b></a> function to free resources allocated for the <b>ptr</b> member of the <a href="winsnmpst_994i.htm"><b>smiOID</b></a> structure pointed to by the <i>name</i> parameter. The application must also call the <b>SnmpFreeDescriptor</b> function to release resources allocated for the <a href="winsnmpst_5koi.htm"><b>smiVALUE</b></a> structure pointed to by the <i>value</i> parameter under the conditions following. If the <b>value</b> member is an <a href="winsnmpst_2rci.htm"><b>smiOCTETS</b></a> or an <a href="winsnmpst_994i.htm"><b>smiOID</b></a> structure, the application must call <a href="winsnmpfc_9u42.htm"><b>SnmpFreeDescriptor</b></a> to free the resources allocated for these structures. For additional information, see <a href="winsnmpov_4lmb.htm">WinSNMP Data Management Concepts</a>. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 5.0 or later. Available as a redistributable for Windows NT 4.0.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winsnmp.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use wsnmp32.lib.</p>
<h4>See Also </h4>
<p>
<a href="winsnmpov_6tpl.htm">WinSNMP Manager API Overview</a>, <a href="winsnmpfc_09kj.htm">WinSNMP Functions</a>, <a href="winsnmpfc_0ui4.htm"><b>SnmpCountVbl</b></a>, <a href="winsnmpfc_4u93.htm"><b>SnmpRecvMsg</b></a>, <a href="winsnmpfc_9u42.htm"><b>SnmpFreeDescriptor</b></a>, <a href="winsnmpst_994i.htm"><b>smiOID</b></a>, <a href="winsnmpst_5koi.htm"><b>smiVALUE</b></a>, <a href="winsnmpst_2rci.htm"><b>smiOCTETS</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

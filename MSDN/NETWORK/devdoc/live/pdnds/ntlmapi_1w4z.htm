<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Audit Functions</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_audit_functions"></a>Audit Functions</h3>
<p>
The auditing functions are obsolete on Windows NT. Windows NT uses an integrated <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_event_logging">
</object><a href=JavaScript:alink_1.Click()>event logging</a> mechanism for reporting both audits and errors. The NetAudit and NetErrorLog functions are provided to access LAN Manager 2.x logs. They will report ERROR_NOT_SUPPORTED if called on a Windows NT system.</p>
<p>
The auditing functions are:</p>
<p>
<a href="ntlmapi_186q.htm"><b>NetAuditClear</b></a> <br>
<a href="ntlmapi_2qp0.htm"><b>NetAuditRead</b></a> </p>
<p>
Auditing functions control the audit log on a LAN Manager computer. Auditing functions monitor operations on the specified server. If auditing is enabled, each monitored operation generates an audit entry. For example, when a user establishes a connection to the server, a single audit entry is generated.</p>
<p>
Audit entries are stored in a binary file called an audit trail or audit log. All Auditing functions perform their operations on this file. LAN Manager defines many types of audit entries.</p>
<p>
<a href="ntlmapi_2qp0.htm"><b>NetAuditRead</b></a> reads the audit log. <a href="ntlmapi_186q.htm"><b>NetAuditClear</b></a> clears the audit log.</p>
<p>
<b>Data Structures</b></p>
<p>
All audit entries include a fixed-length header used in conjunction with variable-length data specific to the entry type. Because of the variable lengths and structures of the <b>ae_data</b> element of the audit entry (it is possible for <b>ae_data</b> to be zero bytes), only the fixed header is defined in the <a href="ntlmapi_29gy.htm"><b>AUDIT_ENTRY</b></a> structure.</p>
<p>
The variable-length portion of the audit entry can contain an offset to a variable-length Unicode string. The offset values are DWORDs. To determine the value of the pointer to this string, add the offset value to the address of <b>ae_data</b>.</p>
<p>
The following example illustrates this procedure. Assume that <b>pAE</b> points to a buffer that contains a complete audit entry and that the <b>ae_type</b> member of the <b>AUDIT_ENTRY</b> structure contains the value AE_CONNSTOP, which specifies the predefined <b>AE_CONNSTOP</b> structure. To point the variable <b>pszComputerName</b> to the Unicode string that contains the name of the client whose connection was stopped, an application would perform the following algorithm:</p>
<pre><code>PAUDIT_ENTRY  pAE<b>;             </b>// Fixed part of audit entry 
LPAE_CONNSTOP pAEvar;          // Variable-length structure 
LPWSTR        pszComputerName; // Pointer to var-length string 

// Calculate the offset to the variable-length structure. 
pAEvar = (_LPAE_CONNSTOP) (((LPBYTE) pAE) + pAE-&gt;ae_data_offset);

// Calculate the offset to the computername. 
pszComputerName = ((LPBYTE) pAEvar) + pAEvar-&gt;ae_cp_compname;
 </code></pre>
<p>
The following structures are specific to the audit entry type The structures follow the <a href="ntlmapi_29gy.htm"><b>AUDIT_ENTRY</b></a> header, but they are not necessarily contiguous.</p>
<p>&nbsp;</p></body>
</HTML>

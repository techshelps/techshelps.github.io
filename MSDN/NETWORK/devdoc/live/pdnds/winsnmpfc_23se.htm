<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SnmpCreateSession</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_snmpcreatesession"></a>SnmpCreateSession</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The <b>SnmpCreateSession</b> function requests the Microsoft WinSNMP implementation to open a session for the WinSNMP manager application. The application can specify how the implementation should inform the WinSNMP session of available SNMP messages and asynchronous events. The application can specify a Windows notification message or an <a href="winsnmpfc_4pt7.htm"><i>SNMPAPI_CALLBACK</i></a> function to notify the session. </p>
<p>
<b>Note</b>&nbsp;&nbsp;The <b>SnmpCreateSession</b> function is an element of the WinSNMP Manager API, version 2.0, which has not been finalized. The Microsoft WinSNMP implementation supports this function because it provides an alternative to the <a href="winsnmpfc_9tf2.htm"><b>SnmpOpen</b></a> function for manager applications that are not Windows-based. </p>
<pre><code><b>HSNMP_SESSION SnmpCreateSession(
</b>  <b>HWND</b> <i>hWnd</i>,                    // handle to the notification window
  <b>UINT</b><i> wMsg</i>,                    // window notification message number
  <b>SNMPAPI_CALLBACK</b><i> pfnCallBack</i>, // notification callback function
  <b>LPVOID</b><i> lpClientData</i>           // pointer to callback function data
<b>)</b>;
 </code></pre>
<h4>Parameters </h4>
<dl>
<dt>
<i>hWnd </i></dt>
<dd>
Handle to a window of the WinSNMP manager application to notify when an asynchronous request completes, or when trap notification occurs. This parameter is required for Windows notification messages for the session. </dd>
<dt>
<i>wMsg </i></dt>
<dd>
Specifies an unsigned integer that identifies the notification message to send to the WinSNMP manager application window. This parameter is required for Windows notification messages for the session. </dd>
<dt>
<i>pfnCallBack </i></dt>
<dd>
Specifies the address of an application-defined, session-specific <a href="winsnmpfc_4pt7.htm"><i>SNMPAPI_CALLBACK</i></a> function. The implementation will call this function to inform the WinSNMP session when notifications are available. 
<p>
This parameter is required to specify callback notifications for the session. This parameter must be NULL to specify Windows notification messages for the session. For additional information, see the following Remarks section. 
</dd>
<dt>
<i>lpClientData </i></dt>
<dd>
Pointer to application-defined data to pass to the callback function specified by the <i>pfnCallBack </i>parameter. This parameter is optional and can be NULL. If the <i>pfnCallBack</i> parameter is NULL, the implementation ignores this parameter. 
</dd>
</dl>
<h4>Return Values </h4>
<p>
If the function succeeds, the return value is a handle that identifies the WinSNMP session that the implementation opens for the calling manager application. </p>
<p>
If the function fails, the return value is SNMPAPI_FAILURE. To get extended error information, call <a href="winsnmpfc_7upe.htm"><b>SnmpGetLastError</b></a>. The <b>SnmpGetLastError</b> function can return one of the following errors. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=50%>Error Code </th>
<th align=left width=50%>Description </th>
</tr>
<tr valign=top>
<td width=50%>SNMPAPI_NOT_INITIALIZED </td>
<td width=50%>The <a href="winsnmpfc_0vn4.htm"><b>SnmpStartup</b></a> function did not complete successfully. </td>
</tr>
<tr valign=top>
<td width=50%>SNMPAPI_ALLOC_ERROR </td>
<td width=50%>An error occurred during memory allocation. </td>
</tr>
<tr valign=top>
<td width=50%>SNMPAPI_HWND_INVALID </td>
<td width=50%>The <i>pfnCallBack </i>parameter is NULL, but the <i>hWnd</i> parameter is not a valid window handle. </td>
</tr>
<tr valign=top>
<td width=50%>SNMPAPI_MSG_INVALID </td>
<td width=50%>The <i>pfnCallBack </i>parameter is NULL, but the <i>wMsg</i> parameter is not a valid message value. </td>
</tr>
<tr valign=top>
<td width=50%>SNMPAPI_MODE_INVALID</td>
<td width=50%>The <i>pfnCallBack </i>parameter is NULL and the <i>hWnd</i> and <i>wMsg</i> parameters are valid individually. However, the values are mutually incompatible on the Windows platform. </td>
</tr>
<tr valign=top>
<td width=50%>SNMPAPI_OPERATION_INVALID</td>
<td width=50%>The combination of parameter values does not specify callback notifications or Windows notification messages. </td>
</tr>
<tr valign=top>
<td width=50%>SNMPAPI_OTHER_ERROR </td>
<td width=50%>An unknown or undefined error occurred. </td>
</tr>
</table><br>
<h4>Remarks </h4>
<p>
If the WinSNMP manager application calls the <b>SnmpCreateSession</b> function with a NULL <i>pfnCallBack </i>parameter, <b>SnmpCreateSession</b> provides the same functionality as the <a href="winsnmpfc_9tf2.htm"><b>SnmpOpen</b></a> function. </p>
<p>
The <b>SnmpCreateSession</b> function returns a unique handle to each open WinSNMP session within the calling WinSNMP manager application. The application must use the session handle that <b>SnmpCreateSession</b> returns in other WinSNMP function calls to facilitate allocation and deallocation of resources by the implementation. </p>
<p>
It is recommended that a WinSNMP manager application call the <a href="winsnmpfc_1l0l.htm"><b>SnmpClose</b></a> function once for each session that the implementation opens as a result of a call to the <b>SnmpCreateSession</b> function. If a WinSNMP manager application terminates unexpectedly, it must call <a href="winsnmpfc_11yo.htm"><b>SnmpCleanup</b></a> before it terminates to enable the implementation to deallocate all resources. </p>
<p>
<b>Callback Notifications </b></p>
<p>
If the <i>pfnCallBack</i> parameter is not NULL on a successful call to the <b>SnmpCreateSession</b> function, the implementation alerts the session to notifications using the callback function specified by the <i>pfnCallBack </i>parameter. </p>
<p>
Following is an example of a call to the <b>SnmpCreateSession</b> function, requesting that the implementation signal the session about messages and events using callback notifications. </p>
<pre><code>hSession = SnmpCreateSession (0, 0, myFunc, &lt;NULL|myData&gt;);
 </code></pre>
<p>
<b>Windows Notification Messages </b></p>
<p>
The <b>SnmpCreateSession</b> function passes to the implementation the handle to an application window and a notification message identifier. When the application window receives the notification message specified by the <i>wMsg</i> parameter, the WinSNMP manager application must retrieve the incoming protocol data unit (PDU). The application does this by calling the <a href="winsnmpfc_4u93.htm"><b>SnmpRecvMsg</b></a> function with the session handle returned by <b>SnmpCreateSession</b>. </p>
<p>
One WinSNMP manager application can open multiple WinSNMP sessions. If an application opens multiple sessions using the same window handle, it is recommended that the WinSNMP manager application specify a unique <i>wMsg</i> parameter for each session. </p>
<p>
Following is an example of a call to the <b>SnmpCreateSession</b> function, requesting that the implementation signal the session about messages and events using Windows notification messages. </p>
<pre><code>hSession = SnmpCreateSession (myWnd, myMsg, NULL, NULL);
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 5.0 or later. Available as a redistributable for Windows NT 4.0.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winsnmp.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use wsnmp32.lib.</p>
<h4>See Also</h4>
<p>
<a href="winsnmpov_6tpl.htm">WinSNMP Manager API Overview</a>, <a href="winsnmpfc_09kj.htm">WinSNMP Functions</a>, <a href="winsnmpfc_4pt7.htm"><b>SNMPAPI_CALLBACK</b></a>, <a href="winsnmpfc_9tf2.htm"><b>SnmpOpen</b></a>, <a href="winsnmpfc_1l0l.htm"><b>SnmpClose</b></a>, <a href="winsnmpfc_11yo.htm"><b>SnmpCleanup</b></a>, <a href="winsnmpfc_4u93.htm"><b>SnmpRecvMsg</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

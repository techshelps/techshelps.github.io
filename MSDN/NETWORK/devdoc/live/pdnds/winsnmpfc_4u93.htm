<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SnmpRecvMsg</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_snmprecvmsg"></a>SnmpRecvMsg</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The WinSNMP <b>SnmpRecvMsg</b> function retrieves the results of a completed asynchronous request submitted by a call to the <a href="winsnmpfc_646f.htm"><b>SnmpSendMsg</b></a> function, in the form of an SNMP message. The <b>SnmpRecvMsg</b> function also returns outstanding trap data and notifications registered for a WinSNMP session. </p>
<pre><code><b>SNMPAPI_STATUS SnmpRecvMsg(
</b>  <b>HSNMP_SESSION </b><i>session</i>,      // handle to the WinSNMP session 
  <b>LPHSNMP_ENTITY </b><i>srcEntity</i>,   // handle to the source entity 
<b>  LPHSNMP_ENTITY </b><i>dstEntity</i><b>,   </b>//<b> </b>handle to the target entity 
<b>  LPHSNMP_CONTEXT </b><i>context</i><b>,    </b>//<b> </b>handle to the context 
<b>  LPHSNMP_PDU </b><i>PDU             </i>//<i> </i>handle to the PDU 
<b>);</b>
 </code></pre>
<h4>Parameters </h4>
<dl>
<dt>
<i>session </i></dt>
<dd>
Handle to the WinSNMP session. </dd>
<dt>
<i>srcEntity </i></dt>
<dd>
Pointer to a variable that receives a handle to the entity that sends the message. Note that the <i>srcEntity </i>parameter to the <a href="winsnmpfc_4wxe.htm"><b>SnmpRegister</b></a> function specifies a handle to the management entity that requests traps. </dd>
<dt>
<i>dstEntity </i></dt>
<dd>
Pointer to a variable that receives a handle to the entity that receives the message. Note that the <i>dstEntity </i>parameter to the <a href="winsnmpfc_4wxe.htm"><b>SnmpRegister</b></a> function specifies a handle to the management entity that sends traps. </dd>
<dt>
<i>context </i></dt>
<dd>
Pointer to a variable that receives a handle to the context, which is a set of managed object resources. The entity specified by the <i>srcEntity</i> parameter issues the message from this context. </dd>
<dt>
<i>PDU </i></dt>
<dd>
Pointer to a variable that receives a handle to the protocol data unit (PDU) component of the message. 
</dd>
</dl>
<h4>Return Values </h4>
<p>
If the function succeeds, the return value is SNMPAPI_SUCCESS, and the output parameters contain the values indicated in the preceding parameter descriptions. </p>
<p>
If the function fails, the return value is SNMPAPI_FAILURE. If the function fails with an extended error code that indicates a network transport layer error, that is, one that begins with SNMPAPI_TL_, the output parameters also contain the values indicated preceding to enable the WinSNMP manager application to recover gracefully. </p>
<p>
To get extended error information, call <a href="winsnmpfc_7upe.htm"><b>SnmpGetLastError</b></a>. The <b>SnmpGetLastError</b> function may return one of the following WinSNMP or network transport layer errors. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=51%>Error Code </th>
<th align=left width=49%>Description </th>
</tr>
<tr valign=top>
<td width=51%>SNMPAPI_NOT_INITIALIZED </td>
<td width=49%>The <a href="winsnmpfc_0vn4.htm"><b>SnmpStartup</b></a> function did not complete successfully. </td>
</tr>
<tr valign=top>
<td width=51%>SNMPAPI_ALLOC_ERROR </td>
<td width=49%>An error occurred during memory allocation. </td>
</tr>
<tr valign=top>
<td width=51%>SNMPAPI_SESSION_INVALID </td>
<td width=49%>The <i>session</i> parameter is invalid. </td>
</tr>
<tr valign=top>
<td width=51%>SNMPAPI_NOOP </td>
<td width=49%>The specified session has no messages in its queue at this time. </td>
</tr>
<tr valign=top>
<td width=51%>SNMPAPI_TL_NOT_INITIALIZED </td>
<td width=49%>The network transport layer was not initialized. </td>
</tr>
<tr valign=top>
<td width=51%>SNMPAPI_TL_NOT_SUPPORTED </td>
<td width=49%>The network transport layer does not support the SNMP protocol. </td>
</tr>
<tr valign=top>
<td width=51%>SNMPAPI_TL_NOT_AVAILABLE </td>
<td width=49%>The network subsystem failed. </td>
</tr>
<tr valign=top>
<td width=51%>SNMPAPI_TL_RESOURCE_ERROR </td>
<td width=49%>A resource error occurred in the network transport layer. </td>
</tr>
<tr valign=top>
<td width=51%>SNMPAPI_TL_UNDELIVERABLE </td>
<td width=49%>The entity specified by the <i>dstEntity </i>parameter is unavailable. </td>
</tr>
<tr valign=top>
<td width=51%>SNMPAPI_TL_SRC_INVALID </td>
<td width=49%>The entity specified by the <i>srcEntity </i>parameter was not initialized. </td>
</tr>
<tr valign=top>
<td width=51%>SNMPAPI_TL_INVALID_PARAM </td>
<td width=49%>A network transport layer function call received an invalid input parameter. </td>
</tr>
<tr valign=top>
<td width=51%>SNMPAPI_TL_PDU_TOO_BIG </td>
<td width=49%>The PDU is too large for the network transport layer to send or receive. </td>
</tr>
<tr valign=top>
<td width=51%>SNMPAPI_TL_OTHER </td>
<td width=49%>An undefined network transport layer error occurred. </td>
</tr>
<tr valign=top>
<td width=51%>SNMPAPI_OTHER_ERROR </td>
<td width=49%>An unknown or undefined error occurred. </td>
</tr>
</table><br>
<p>
For additional information, see <a href="winsnmpov_23qr.htm">Network Transport Errors</a>. </p>
<h4>Remarks </h4>
<p>
The <a href="winsnmpfc_9tf2.htm"><b>SnmpOpen</b></a> function passes an application window handle and notification message identifier to the Microsoft WinSNMP implementation. When the application window receives the notification message specified by the <i>wMsg</i> parameter, the WinSNMP manager application must call the <b>SnmpRecvMsg</b> function with the session handle returned by <a href="winsnmpfc_9tf2.htm"><b>SnmpOpen</b></a> to retrieve an incoming protocol data unit (PDU). For additional information, see <a href="winsnmpov_2ncj.htm">About SNMP Messages</a>. </p>
<p>
The <b>SnmpRecvMsg</b> function instantiates four objects and allocates their resources: two entity handles, a context handle, and a PDU handle. The handle to the variable bindings list component of the returned PDU is not instantiated until the WinSNMP manager application calls the <a href="winsnmpfc_7wwx.htm"><b>SnmpGetPduData</b></a> function. When it no longer needs the resources <b>SnmpRecvMsg</b> returns, the WinSNMP manager application must free the individual resources using the WinSNMP function that corresponds to the resource. For additional information, see <a href="winsnmpfc_8eb9.htm"><b>SnmpFreePdu</b></a>,<b> <a href="winsnmpfc_7zsp.htm">SnmpFreeEntity</a></b>, and <a href="winsnmpfc_4tmc.htm"><b>SnmpFreeContext</b></a>. </p>
<p>
When the implementation receives traps from an entity operating under the SNMP version 1 framework (SNMPv1), it translates the traps to the SNMP version 2C (SNMPv2C) format. Therefore, when <b>SnmpRecvMsg</b> delivers a trap it is always in the SNMPv2C format. For additional information, see <a href="winsnmpov_88kj.htm">Translating Traps from SNMPv1 to SNMPv2C</a> and <a href="winsnmpov_1y2b.htm">WinSNMP Programming Tasks</a>. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 5.0 or later. Available as a redistributable for Windows NT 4.0.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winsnmp.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use wsnmp32.lib.</p>
<h4>See Also </h4>
<p>
<a href="winsnmpov_6tpl.htm">WinSNMP Manager API Overview</a>, <a href="winsnmpfc_09kj.htm">WinSNMP Functions</a>, <a href="winsnmpfc_8eb9.htm"><b>SnmpFreePdu</b></a>, <a href="winsnmpfc_7zsp.htm"><b>SnmpFreeEntity</b></a>, <a href="winsnmpfc_4tmc.htm"><b>SnmpFreeContext</b></a>, <a href="winsnmpfc_646f.htm"><b>SnmpSendMsg</b></a>, <a href="winsnmpfc_4wxe.htm"><b>SnmpRegister</b></a>, <a href="winsnmpfc_7wwx.htm"><b>SnmpGetPduData</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

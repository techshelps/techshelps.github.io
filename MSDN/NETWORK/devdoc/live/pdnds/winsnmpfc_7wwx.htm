<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SnmpGetPduData</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_snmpgetpdudata"></a>SnmpGetPduData</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The WinSNMP <b>SnmpGetPduData</b> function returns selected data fields from a specified SNMP protocol data unit (PDU). </p>
<pre><code><b>SNMPAPI_STATUS SnmpGetPduData(
</b>  <b>HSNMP_PDU </b><i>PDU</i>,            // handle to the PDU 
  <b>smiLPINT </b><i>PDU_type</i>,        // <b>PDU_type</b> field of the PDU 
<b>  smiLPINT32 </b><i>request_id</i><b>,    </b>//<b> request_id</b> field of the PDU 
<b>  smiLPINT </b><i>error_status</i><b>,    </b>// <b>error_status</b> field of the PDU 
<b>  smiLPINT </b><i>error_index</i><b>,     </b>// <b>error_index</b> field of the PDU 
<b>  LPHSNMP_VBL </b><i>varbindlist</i>   // handle to the variable bindings list 
<b>);</b>
 </code></pre>
<h4>Parameters </h4>
<dl>
<dt>
<i>PDU </i></dt>
<dd>
Handle to the SNMP PDU. </dd>
<dt>
<i>PDU_type</i> </dt>
<dd>
Pointer to a variable that receives the <b>PDU_type</b> field of the specified PDU. This parameter can be NULL, or one of the following values. 

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=42%>Value </th>
<th align=left width=58%>Meaning </th>
</tr>
<tr valign=top>
<td width=42%><b>SNMP_PDU_GET</b> </td>
<td width=58%>Search and retrieve a value from a specified SNMP variable. </td>
</tr>
<tr valign=top>
<td width=42%><b>SNMP_PDU_GETNEXT</b> </td>
<td width=58%>Search and retrieve the value of an SNMP variable without knowing the exact name of the variable. </td>
</tr>
<tr valign=top>
<td width=42%><b>SNMP_PDU_RESPONSE</b> </td>
<td width=58%>Reply to an <b>SNMP_PDU_GET</b> or an <b>SNMP_PDU_GETNEXT</b> request. </td>
</tr>
<tr valign=top>
<td width=42%><b>SNMP_PDU_SET</b> </td>
<td width=58%>Store a value in a specified SNMP variable. </td>
</tr>
<tr valign=top>
<td width=42%><b>SNMP_PDU_V1TRAP</b> </td>
<td width=58%>Alerts the management system to an extraordinary event under the SNMP version 1 (SNMPv1) framework. This type is obsolete in SNMP version 2C (SNMPv2C). </td>
</tr>
<tr valign=top>
<td width=42%><b>SNMP_PDU_GETBULK</b> </td>
<td width=58%>Search and retrieve multiple values with a single request. </td>
</tr>
<tr valign=top>
<td width=42%><b>SNMP_PDU_TRAP</b> </td>
<td width=58%>Alerts the management system to an extraordinary event under SNMPv2C. </td>
</tr>
</table><br>

</dd>
<dt>
<i>request_id </i></dt>
<dd>
Pointer to a variable that receives the <b>request_id</b> field of the specified PDU. This parameter can be NULL. </dd>
<dt>
<i>error_status </i></dt>
<dd>
Pointer to a variable that receives the <b>error_status</b> field of the specified PDU. If the <i>PDU_type</i> parameter is equal to <b>SNMP_PDU_GETBULK</b>, this parameter receives the value of the <b>non_repeaters</b> field of the PDU. </dd>
</dl>
<p>
This parameter can be NULL, or one of the following values. The first six errors are common to the SNMP version 1 (SNMPv1) and SNMP version 2C frameworks (SNMPv2C). The remaining errors are available under SNMPv2C only. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=55%>Error Code </th>
<th align=left width=45%>Meaning </th>
</tr>
<tr valign=top>
<td width=55%>SNMP_ERROR_NOERROR </td>
<td width=45%>The agent reports that no errors occurred during transmission. </td>
</tr>
<tr valign=top>
<td width=55%>SNMP_ERROR_TOOBIG </td>
<td width=45%>The agent could not place the results of the requested SNMP operation into a single SNMP message. </td>
</tr>
<tr valign=top>
<td width=55%>SNMP_ERROR_NOSUCHNAME </td>
<td width=45%>The requested SNMP operation identified an unknown variable. </td>
</tr>
<tr valign=top>
<td width=55%>SNMP_ERROR_BADVALUE </td>
<td width=45%>The requested SNMP operation tried to change a variable but it specified either a syntax or value error. </td>
</tr>
<tr valign=top>
<td width=55%>SNMP_ERROR_READONLY </td>
<td width=45%>The requested SNMP operation tried to change a variable that was not allowed to change, according to the community profile of the variable. </td>
</tr>
<tr valign=top>
<td width=55%>SNMP_ERROR_GENERR </td>
<td width=45%>An error other than one of those listed here occurred during the requested SNMP operation. </td>
</tr>
<tr valign=top>
<td width=55%>SNMP_ERROR_NOACCESS </td>
<td width=45%>The specified SNMP variable is not accessible. </td>
</tr>
<tr valign=top>
<td width=55%>SNMP_ERROR_WRONGTYPE </td>
<td width=45%>The value specifies a type that is inconsistent with the type required for the variable. </td>
</tr>
<tr valign=top>
<td width=55%>SNMP_ERROR_WRONGLENGTH </td>
<td width=45%>The value specifies a length that is inconsistent with the length required for the variable. </td>
</tr>
<tr valign=top>
<td width=55%>SNMP_ERROR_WRONGENCODING </td>
<td width=45%>The value contains an Abstract Syntax Notation One (ASN.1) encoding that is inconsistent with the ASN.1 tag of the field. </td>
</tr>
<tr valign=top>
<td width=55%>SNMP_ERROR_WRONGVALUE </td>
<td width=45%>The value cannot be assigned to the variable. </td>
</tr>
<tr valign=top>
<td width=55%>SNMP_ERROR_NOCREATION </td>
<td width=45%>The variable does not exist, and the agent cannot create it. </td>
</tr>
<tr valign=top>
<td width=55%>SNMP_ERROR_<br>
INCONSISTENTVALUE </td>
<td width=45%>The value is inconsistent with values of other managed objects. </td>
</tr>
<tr valign=top>
<td width=55%>SNMP_ERROR_<br>
RESOURCEUNAVAILABLE </td>
<td width=45%>Assigning the value to the variable requires allocation of resources that are currently unavailable. </td>
</tr>
<tr valign=top>
<td width=55%>SNMP_ERROR_COMMITFAILED </td>
<td width=45%>No validation errors occurred, but no variables were updated. </td>
</tr>
<tr valign=top>
<td width=55%>SNMP_ERROR_UNDOFAILED </td>
<td width=45%>No validation errors occurred. Some variables were updated because it was not possible to undo their assignment. </td>
</tr>
<tr valign=top>
<td width=55%>SNMP_ERROR_<br>
AUTHORIZATIONERROR </td>
<td width=45%>An authorization error occurred. </td>
</tr>
<tr valign=top>
<td width=55%>SNMP_ERROR_NOTWRITABLE </td>
<td width=45%>The variable exists but the agent cannot modify it. </td>
</tr>
<tr valign=top>
<td width=55%> SNMP_ERROR_<br>
INCONSISTENTNAME </td>
<td width=45%>The variable does not exist; the agent cannot create it because the named object instance is inconsistent with the values of other managed objects. </td>
</tr>
</table><br>
<dl>
<dt>
<i>error_index </i></dt>
<dd>
Pointer to a variable that receives the <b>error_index</b> field of the specified PDU. 
<p>
If the <i>PDU_type</i> parameter is equal to <b>SNMP_PDU_GETBULK</b>, this parameter receives the value of the <b>max_repetitions</b> field of the specified PDU. This parameter can be NULL. 
</dd>
<dt>
<i>varbindlist</i> </dt>
<dd>
Pointer to a variable that receives a handle to the variable bindings list field of the specified PDU. This parameter can be NULL. For additional information, see the following Remarks section. 
</dd>
</dl>
<h4>Return Values </h4>
<p>
If the function succeeds, the return value is SNMPAPI_SUCCESS. </p>
<p>
If the function fails, the return value is SNMPAPI_FAILURE. To get extended error information, call <a href="winsnmpfc_7upe.htm"><b>SnmpGetLastError</b></a>. The <b>SnmpGetLastError</b> function can return one of the following errors. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=44%>Error Code </th>
<th align=left width=56%>Description </th>
</tr>
<tr valign=top>
<td width=44%>SNMPAPI_NOT_INITIALIZED </td>
<td width=56%>The <a href="winsnmpfc_0vn4.htm"><b>SnmpStartup</b></a> function did not complete successfully. </td>
</tr>
<tr valign=top>
<td width=44%>SNMPAPI_ALLOC_ERROR </td>
<td width=56%>An error occurred during memory allocation. </td>
</tr>
<tr valign=top>
<td width=44%>SNMPAPI_NOOP </td>
<td width=56%>All output parameters are NULL. The SNMP operation was not performed. </td>
</tr>
<tr valign=top>
<td width=44%>SNMPAPI_PDU_INVALID </td>
<td width=56%>The PDU type is invalid. </td>
</tr>
<tr valign=top>
<td width=44%>SNMPAPI_OTHER_ERROR </td>
<td width=56%>An unknown or undefined error occurred. </td>
</tr>
</table><br>
<h4>Remarks </h4>
<p>
All parameters of the <b>SnmpGetPduData</b> function are required. However, all parameters, except the <i>PDU</i> parameter, can be NULL. In parameters the application passes as NULL, the <b>SnmpGetPduData</b> function does not return a value. </p>
<p>
The <b>SnmpGetPduData</b> function always returns a handle to a new variable bindings list object if the <i>varbindlist</i> parameter is not NULL. Additionally, if the <i>PDU</i> parameter specifies a new PDU, the function also attaches a handle to the new PDU. </p>
<p>
When a manager application calls <b>SnmpGetPduData</b> with a <i>varbindlist</i> parameter that is not NULL, but the <i>PDU</i> parameter specifies an existing PDU, the function returns a handle to a new duplicate variable bindings list. The function call does not disturb the handle attached to the existing PDU. An existing PDU is one that an application creates with a call to the <a href="winsnmpfc_89kl.htm"><b>SnmpCreatePdu</b></a> function, or one that the application receives and then reads using a call to <b>SnmpGetPduData</b>. </p>
<p>
When a manager application creates a PDU with <a href="winsnmpfc_89kl.htm"><b>SnmpCreatePdu</b></a>, or after the application reads a PDU using <b>SnmpGetPduData</b>, the Microsoft WinSNMP implementation expects that the application "knows" the values of the PDU fields. If an application reads a PDU a second time with <b>SnmpGetPduData</b>, the call results in a copy of the variable bindings list of the specified PDU. This type of call to <b>SnmpGetPduData</b> also duplicates the handle to the PDU. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 5.0 or later. Available as a redistributable for Windows NT 4.0.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winsnmp.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use wsnmp32.lib.</p>
<h4>See Also </h4>
<p>
<a href="winsnmpov_6tpl.htm">WinSNMP Manager API Overview</a>, <a href="winsnmpfc_09kj.htm">WinSNMP Functions</a>, <a href="winsnmpfc_6k4s.htm"><b>SnmpDuplicateVbl</b></a>, <a href="winsnmpfc_89kl.htm"><b>SnmpCreatePdu</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

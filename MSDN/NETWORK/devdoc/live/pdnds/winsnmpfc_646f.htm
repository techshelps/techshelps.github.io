<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SnmpSendMsg</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_snmpsendmsg"></a>SnmpSendMsg</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
A WinSNMP manager application calls the <b>SnmpSendMsg</b> function to request that the Microsoft WinSNMP implementation transmit an SNMP protocol data unit (PDU), in the form of an SNMP message. The WinSNMP manager application specifies a source entity, a destination entity, and a context for the request. </p>
<p>
If a WinSNMP manager application expects a PDU in response to a <b>SnmpSendMsg</b> request, it must retrieve the PDU. To do this, the application must call the <a href="winsnmpfc_4u93.htm"><b>SnmpRecvMsg</b></a> function using the session handle returned by <a href="winsnmpfc_9tf2.htm"><b>SnmpOpen</b></a>. </p>
<pre><code><b>SNMPAPI_STATUS SnmpSendMsg(
</b>  <b>HSNMP_SESSION </b><i>session</i>,      // handle to the WinSNMP session 
  <b>HSNMP_ENTITY </b><i>srcEntity</i>,     // handle to the source entity 
<b>  HSNMP_ENTITY </b><i>dstEntity</i><b>,     </b>//<b> </b>handle to the target entity 
<b>  HSNMP_CONTEXT </b><i>context</i><b>,      </b>//<b> </b>handle to the context 
<b>  HSNMP_PDU </b><i>PDU               </i>//<i> </i>handle to the PDU 
<b>);</b>
 </code></pre>
<h4>Parameters </h4>
<dl>
<dt>
<i>session </i></dt>
<dd>
Handle to the WinSNMP session. </dd>
<dt>
<i>srcEntity </i></dt>
<dd>
Handle to the management entity that initiates the request to send the SNMP message. </dd>
<dt>
<i>dstEntity </i></dt>
<dd>
Handle to the target management entity that receives the request to send the SNMP message. </dd>
<dt>
<i>context </i></dt>
<dd>
Handle to the context, (a set of managed object resources), that the target management entity controls. </dd>
<dt>
<i>PDU </i></dt>
<dd>
Handle to the protocol data unit that contains the SNMP operation request. 
</dd>
</dl>
<h4>Return Values </h4>
<p>
If the function succeeds, the return value is SNMPAPI_SUCCESS. </p>
<p>
If the function fails, the return value is SNMPAPI_FAILURE. To get extended error information, call <a href="winsnmpfc_7upe.htm"><b>SnmpGetLastError</b></a>. The <b>SnmpGetLastError</b> function may return one of the following WinSNMP or network transport layer errors. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=51%>Error Code </th>
<th align=left width=49%>Description </th>
</tr>
<tr valign=top>
<td width=51%>SNMPAPI_NOT_INITIALIZED </td>
<td width=49%>The <a href="winsnmpfc_0vn4.htm"><b>SnmpStartup</b></a> function did not complete successfully. </td>
</tr>
<tr valign=top>
<td width=51%>SNMPAPI_ALLOC_ERROR </td>
<td width=49%>An error occurred during memory allocation. </td>
</tr>
<tr valign=top>
<td width=51%>SNMPAPI_SESSION_INVALID </td>
<td width=49%>The <i>session</i> parameter is invalid. </td>
</tr>
<tr valign=top>
<td width=51%>SNMPAPI_ENTITY_INVALID </td>
<td width=49%>One or both of the entity parameters is invalid. </td>
</tr>
<tr valign=top>
<td width=51%>SNMPAPI_CONTEXT_INVALID </td>
<td width=49%>The <i>context</i> parameter is invalid. </td>
</tr>
<tr valign=top>
<td width=51%>SNMPAPI_PDU_INVALID </td>
<td width=49%>The <i>PDU</i> parameter is invalid. </td>
</tr>
<tr valign=top>
<td width=51%>SNMPAPI_OPERATION_INVALID </td>
<td width=49%>The operation specified in the <b>PDU_type</b> field of the PDU is inappropriate for the destination entity. </td>
</tr>
<tr valign=top>
<td width=51%>SNMPAPI_TL_NOT_INITIALIZED </td>
<td width=49%>The network transport layer was not initialized. </td>
</tr>
<tr valign=top>
<td width=51%>SNMPAPI_TL_NOT_SUPPORTED </td>
<td width=49%>The network transport layer does not support the SNMP protocol. </td>
</tr>
<tr valign=top>
<td width=51%>SNMPAPI_TL_NOT_AVAILABLE </td>
<td width=49%>The network subsystem failed. </td>
</tr>
<tr valign=top>
<td width=51%>SNMPAPI_TL_RESOURCE_ERROR </td>
<td width=49%>A resource error occurred in the network transport layer. </td>
</tr>
<tr valign=top>
<td width=51%>SNMPAPI_TL_SRC_INVALID </td>
<td width=49%>The entity specified by the <i>srcEntity</i> parameter was not initialized. </td>
</tr>
<tr valign=top>
<td width=51%>SNMPAPI_TL_INVALID_PARAM </td>
<td width=49%>A network transport layer function call received an invalid input parameter. </td>
</tr>
<tr valign=top>
<td width=51%>SNMPAPI_TL_PDU_TOO_BIG </td>
<td width=49%>The PDU is too large for the network transport layer to send or receive. </td>
</tr>
<tr valign=top>
<td width=51%>SNMPAPI_TL_OTHER </td>
<td width=49%>An undefined network transport layer error occurred. </td>
</tr>
<tr valign=top>
<td width=51%>SNMPAPI_OTHER_ERROR </td>
<td width=49%>An unknown or undefined error occurred. </td>
</tr>
</table><br>
<p>
For additional information, see <a href="winsnmpov_23qr.htm">Network Transport Errors</a>. </p>
<h4>Remarks </h4>
<p>
The <b>SnmpSendMsg</b> function executes asynchronously and therefore returns immediately. </p>
<p>
The implementation notifies the WinSNMP manager application when the asynchronous request is completed. The implementation does this by sending a notification message to the window specified by the <i>wMsg</i> and<i> hWnd</i> parameters, respectively, in the initial call to <a href="winsnmpfc_9tf2.htm"><b>SnmpOpen</b></a> for the session. When the application window receives the notification message, the WinSNMP manager application must retrieve the incoming protocol data unit (PDU). The application does this by calling the <a href="winsnmpfc_4u93.htm"><b>SnmpRecvMsg</b></a> function with the session handle returned by <a href="winsnmpfc_9tf2.htm"><b>SnmpOpen</b></a>. </p>
<p>
When a WinSNMP manager application calls the <b>SnmpSendMsg</b> function, the implementation determines which network transport protocol and SNMP version framework to use to complete the transmission request. The implementation determines this by matching its capabilities with properties associated with the requesting session and with the target management entity. This information is available from values in the implementation's database. </p>
<p>
If a WinSNMP manager application requests functionality that is available under the SNMP version 2C framework (SNMPv2C), but the target entity uses the SNMP version 1 framework (SNMPv1), the implementation attempts to translate the request to SNMPv1. To do this, the implementation uses the procedures defined in RFC1908, "Coexistence between Version 1 and Version 2 of the Internet-standard Network Management Framework." If translation is not possible, <b>SnmpSendMsg</b> fails with the extended error code SNMPAPI_OPERATION_INVALID. </p>
<p>
For additional information, see <a href="winsnmpov_1y2b.htm">WinSNMP Programming Tasks</a> and <a href="winsnmpov_2ncj.htm">About SNMP Messages</a>. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 5.0 or later. Available as a redistributable for Windows NT 4.0.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in winsnmp.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use wsnmp32.lib.</p>
<h4>See Also </h4>
<p>
<a href="winsnmpov_6tpl.htm">WinSNMP Manager API Overview</a>, <a href="winsnmpfc_09kj.htm">WinSNMP Functions</a>, <a href="winsnmpfc_9tf2.htm"><b>SnmpOpen</b></a>, <a href="winsnmpfc_4u93.htm"><b>SnmpRecvMsg</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

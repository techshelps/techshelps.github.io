<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Designing the Run-Time Object</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">


<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<H2>Designing the Run-Time Object</H2><P>Next to designing the visual user interface, deciding what form the run-time object should take is perhaps the most important issue in building an ActiveX designer. You have three choices:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">Use the same object at both design time and run time.</LI><LI CLASS="ULI1">Create a run-time object that presents a visual interface but has different type information from the visual designer.</LI><LI CLASS="ULI1">Create a run-time object that does not present a visual interface.</LI></UL></SPAN><P>The simplest approach is to replicate the design-time object as the run-time object. The advantage is that you have to write less code. You don't need to implement <B>IActiveDesigner</B> and you can use the same implementations of <B>IOleObject</B>, <B>IOleInPlaceObject</B>, and <B>IOleInPlaceActiveObject</B> as in the visual designer. </P>
<P>The disadvantage, however, is that the run-time object may contain type information and code used only at design time, and not needed at run time. The increased size can result in poor performance. In addition, you may need to license the run-time object separately from the visual designer. If so, you have to create a separate object.</P>
<P>Whether the visual designer and run-time objects are the same or different, they can be in the same file (.dll or .ocx) or in different files. </P></FONT>
</BODY>
</HTML>

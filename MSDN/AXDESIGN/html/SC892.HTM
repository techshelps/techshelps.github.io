<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Supporting Static Type Information</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<STYLE>
pre { font-size:10 }
</STYLE>
<BODY BGCOLOR="#FFFFFF">


<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<H2>Supporting Static Type Information</H2><P>To support static type information, your ActiveX designer has to implement the <B>IProvideClassInfo</B> interface. The interface has a single method, <B>GetClassInfo</B>. If the designer doesn't support dynamic type information, the host gets type information from <B>GetClassInfo</B> after creating and loading the object and before activating it.  </P>
<P>The <B>GetClassInfo</B> method returns a pointer to a type information object that describes the incoming and outgoing interfaces to the ActiveX designer. In the following example, the method gets a pointer to the designer's type library, and through it, uses the <B>ITypeLib </B>interface to retrieve the type information.</P>

<PRE><FONT FACE="COURIER, COURIER NEW" SIZE="2"><FONT FACE="COURIER, COURIER NEW" SIZE="2">&lt;STYLE&gt;STDMETHODIMP MyDesigner::GetClassInfo (LPTYPEINFO FAR* ppTI)
{
    *ppTI = NULL;                     // Default value if failure.
    ITypeInfo *pITypeInfo = NULL;
    ITypeLib  *pITypeLib  = NULL;

    // Get type library.
    hresult = LoadTypeLib (g_pTypeLibName, &amp;pITypeLib);
    if (SUCCEEDED(hresult) != TRUE)
        { ASSERT(FALSE); return E_NOINTERFACE;}

    //    Note: If loaded it, will have a global reference to it.
    //    Free this later.

    // Get the type information of the coclass from the library.
    hresult = pITypeLib -&gt; GetTypeInfoOfGuid 
            (m_pDesigner-&gt;m_clsidPersist, &amp;pITypeInfo);
    
    // Assign the typeInfo return value.
    // The caller should free this.
    *ppTI = pITypeInfo;

    // Release reference.
    pITypeLib-&gt;Release(); 
}
</font></pre>
<P>The example retains the globally unique identifier (GUID) of the designer's coclass in the global structure pointed to by m_pDesigner, so it uses the <B>GetTypeInfoOfGuid</B> method to obtain the type information. (Alternatively, if you have the index into the type information, you can use the <B>GetTypeInfo </B>method instead.) Then it simply returns the type information object to the caller. </P></FONT>
</BODY>
</HTML>

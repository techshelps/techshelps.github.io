<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ActiveX Designers and Other Visual Basic Objects</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">


<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<H2>ActiveX Designers and Other Visual Basic Objects</H2><P>Visual Basic provides several ways for software developers to supply custom features:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">Class modules.</LI><LI CLASS="ULI1">Insertable ActiveX and OLE objects.</LI><LI CLASS="ULI1">ActiveX controls.</LI><LI CLASS="ULI1">ActiveX designers.</LI></UL></SPAN><P></P>
<P>The following figure shows the interaction among these components. </P>
<P>    <img src="abdes002.gif"></P>
<P>Like Visual Basic forms (.frm) and class modules, ActiveX designers operate at project-level scope. ActiveX designers can host standard controls, ActiveX controls, and other objects, and can create instances of classes defined in class modules. In addition, the code behind an ActiveX designer can create instances of other forms or ActiveX designers. In the same way, the code behind a form can create an instance of another form or ActiveX designer. </P></FONT>
</BODY>
</HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Returning the Extensibility Object</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">


<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<H3>Returning the Extensibility Object</H3><P>The <B>GetExtensibilityObject</B> method gives the host access to a special dispatch interface for the visual designer. This<B> </B>interface is not the same as the standard OLE dispatch interface; this special <B>IDispatch</B> is available to add-ins (such as servers that extend the Visual Basic environment) through the development environment's extensibility object.</P>
<P>Not all ActiveX Designers need to provide access to this extensibility object. You should implement this method if you want to provide the capability for your designer to be manipulated through the host's extensibility mechanism. If your ActiveX Designer doesn't have a separate run-time object, you can implement only this method and return E_NOTIMPL for the other <B>IActiveDesigner</B> methods.</P>
<P>The following example creates a new extensibility object and returns a pointer to its <B>IDispatch</B> interface for add-ins:</P>

<PRE><FONT FACE="COURIER, COURIER NEW" SIZE="2">STDMETHODIMP CMyDesigner::GetExtensibilityObject
(
    IDispatch **ppExtensibilityObject
)
{
    if (!ppExtensibilityObject) return E_POINTER;

    *ppExtensibilityObject = new CMyAddInTopLevelAutomationObject;
    return (*ppExtensibilityObject) ? S_OK : E_OUTOFMEMORY;
}
 </font></pre>
<P>If you don't implement the method, return E_NOTIMPL.</P></FONT>
</BODY>
</HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ISelectionContainer::GetObjects</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">


<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<H3>ISelectionContainer::GetObjects</H3><P>Returns either all selectable objects or all selected objects, depending on the flag passed.</P>
<P><B>HRESULT</B> <B>GetObjects(</B><BR>    <B>DWORD</B> <I>dwFlags,</I><BR>    <B>ULONG</B>  <I>cObjects,</I><BR>    <B>IUnknown</B> *<I>*apUnkObjects</I><BR><B>);</B></P>
<P><B>Parameters</B></P>
<P><I>dwFlags</I></P>
<P>[in] Flag specifying which objects to return, either GETOBJS_ALL or GETOBJS_SELECTED.</P>
<P><I>cObjects</I></P>
<P>[in] Number of objects returned.</P>
<P><I>apUnkObjects</I></P>
<P>[out] Pointer to an array of returned objects.</P>
<P></P>
<P><B>Return Values</B></P>
<P>The return value obtained from HRESULT is one of the following:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="150pt" VALIGN="TOP"><COL WIDTH="198pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Return Value</B></P></TD><TD VALIGN="TOP"><P><B>Meaning</B></P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>S_OK</P></TD><TD VALIGN="TOP"><P>Success.</P></TD></TR><TR><TD VALIGN="TOP"><P>E_INVALIDARG</P></TD><TD VALIGN="TOP"><P>One or more of the arguments is invalid.</P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P><B>Comments</B></P>
<P>The ActiveX designer implements this method.</P>
<P>The <B>GetObjects</B> method returns either all selectable objects or all selected objects, depending on the flag passed. The returned array of objects is used as the basis for <B>SelectObjects</B>.</P>
<P>The designer should pass a pointer to its extended object, rather than to itself. The extended object includes the ambient properties supplied by the host, which the user may wish to browse. The extended object is available through the site. See the&nbsp;<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_com_overview">
</object><a href=JavaScript:alink_1.Click()>COM Programmer's Reference</A> for more information.</P>
<P>Because the returned objects support <B>IDispatch</B>, the host can obtain information directly from them. For example, to get an object's name, the host can call <B>IDispatch::Invoke</B> (or <B>ITypeInfo::Invoke</B>) with a predefined dispatch identifier (DISPID) that signifies the name. The predeclared DISPIDs are negative to ensure that they don't conflict with user-defined identifiers. The table that follows describes some of this information and how it is obtained. </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="157pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Item</B></P></TD><TD VALIGN="TOP"><P><B>How it is Obtained</B></P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>The name of the object.</P></TD><TD VALIGN="TOP"><P>DISPID_NAME</P></TD></TR><TR><TD VALIGN="TOP"><P>The index of the object.</P></TD><TD VALIGN="TOP"><P>DISPID_OBJECT</P></TD></TR><TR><TD VALIGN="TOP"><P>The type of the object.</P></TD><TD VALIGN="TOP"><P>IProvideClassInfo::QueryInterface</P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P><B>Example</B></P>
<P>The following example implements <B>GetObjects</B>; the returned array is used by the <B>SelectObjects</B> method. </P>

<PRE><FONT FACE="COURIER, COURIER NEW" SIZE="2">STDMETHODIMP CMySelectionContainer::GetObjects
(
    DWORD dwFlags,
    ULONG cObjects, 
    IUnknown **apUnkObjects
)
{
    // Initialize the array.
    for (ULONG i = 0; i &lt; cObjects; i++) {
        apUnkObjects[i] = NULL;
    }        

    IUnknown * pUnkUs;
    HRESULT hr;
    BOOL bUsedUnkUs = FALSE;

    // Can't pass self as an object because the user won't be 
    // able to browse ambient properties, so need to pass
    // extender. Get it from site.   
    IDispatch * pDisp = NULL;
    hr = m_pControlSite-&gt;GetExtendedControl(&amp;pDisp);
    if (SUCCEEDED(hr)) {
        hr = pDisp-&gt;QueryInterface(IID_IUnknown, (void**)&amp;pUnkUs);
        pDisp-&gt;Release();
    }

    if (FAILED(hr)) {
        // Can't get the extender, so use self anyway.
        pUnkUs = (IUnknown*)(ISelectionContainer*)this;
        pUnkUs -&gt; AddRef();
    }
    
    if (GETOBJS_ALL == dwFlags) {
        ULONG x = 0;
        for (int i = 0; i &lt; MAXOBJECTS &amp;&amp; x &lt; (int) cObjects; i++) {
                If (m_state.rgObjects[i].bHaveIt) {
                apUnkObjects[x] = m_state.rgObjects[i].pObject;
                apUnkObjects[x]-&gt;AddRef();
                x++;
                }
        }
    if (x &lt; (int) cObjects) {
        apUnkObjects[x] = pUnkUs;
        bUsedUnkUs = TRUE;
        }
    }
    else { 
    // Host requested all selected objects.
    if (cObjects &gt; 0) {
        if (m_state.iSelectedObject != -1) {    
            apUnkObjects[0] =                 
                m_state.rgCircles[m_state.iSelectedObject].pObject;
            apUnkObjects[0]-&gt;AddRef();
                }
        else {
            apUnkObjects[0] = pUnkUs;
            bUsedUnkUs = TRUE;
                }
        }
    }
    if (!bUsedUnkUs) {
        pUnkUs-&gt;Release();
    }
    return S_OK;
}
</font></pre>
<P>See Also</P>
<P>"<A class="normal" href="SC897.HTM">Extended Objects and Aggregation</A>" in Chapter 5, "<A class="normal" href="SC837.HTM">Type Information and Extended Objects.</A>"</P>
<P></P></FONT>
</BODY>
</HTML>

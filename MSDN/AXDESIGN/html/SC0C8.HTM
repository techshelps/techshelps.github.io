<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Implementing the Persistence Interfaces</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">


<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<H2>Implementing the Persistence Interfaces </H2><P>The visual designer must implement <B>IPersist</B> and at least one of its derived interfaces: <B>IPersistStreamInit</B>, <B>IPersistStream</B>, and <B>IPersistStorage</B>. </P>
<P>The <B>IPersist</B> interface is the base interface for the other three interfaces. It has one method, <B>GetClassID</B>, which returns the class identifier of an object that implements one or more of the other persistence interfaces. For an ActiveX Designer, this method should return the class identifier (CLSID) of the visual designer. </P>
<P>You also have to implement one or more of the other persistence interfaces, depending on the type and size of the run-time objects you expect to be built from your ActiveX Designer, and which hosts will use it. </P>
<P>Hosts request a persistence interface by iteratively calling <B>QueryInterface </B>on the ActiveX Designer object, passing interface identifiers (IIDs) in order of preference. Different hosts may request different persistence interfaces. In general, <B>IPersistStreamInit </B>is the preferred interface because it is the fastest and because its <B>InitNew</B> method allows the object to avoid loading itself twice (when the instance is created and again when the <B>Load</B> method is called). <B>IPersistStream </B>is fast, but does not include an <B>InitNew</B> method, so you can't take advantage of this loading optimization. Some hosts, however, use <B>IPersistStorage</B>. Although storage persistence requires significantly more overhead, some applications may need structured storage, and some subobjects may require it. </P>
<P>In the visual designer, you may also want to implement <B>IPersistPropertyBag</B>, which saves information about properties and methods in a textual format. See the<I> </I>"Knowledge Base" section of the Microsoft Developer Network (MSDN)<I> </I>Library<I> </I>for more information on the <B>IPersistPropertyBag </B>interface.</P></FONT>
</BODY>
</HTML>

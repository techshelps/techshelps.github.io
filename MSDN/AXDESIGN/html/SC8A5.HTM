<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Saving Run-Time Information</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">


<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<H3>Saving Run-Time Information</H3><P>The <B>QueryPersistenceInterface</B> and <B>SaveRuntimeState</B> methods allow the host to find and use the persistence interface for the run-time object. (These methods apply to the run-time object only. Persistent data for the visual designer are handled directly through <B>IPersist</B> and its derived<B> </B>interfaces.)</P>
<P>Calls to <B>QueryPersistenceInterface</B> pass the interface identifier (IID) of one of the persistence interfaces (<B>IPersistStreamInit</B>, <B>IPersistStream</B>, or<B> IPersistStorage</B>). If the ActiveX Designer supports the specified interface, it returns S_OK; if not, it returns S_FALSE, as in the following example. </P>

<PRE><FONT FACE="COURIER, COURIER NEW" SIZE="2">STDMETHODIMP CMyDesigner::QueryPersistenceInterface
(
    REFIID riid
)
{
        if (riid == IID_IPersistStreamInit)
                return S_OK;
        else if (riid == IID_IPersistStorage)
                return S_OK;
        else if (riid == IID_IPersistStream)
                return S_OK;
        else 
                return S_FALSE;
} 
 </font></pre>
<P>The example shows a designer that supports all three persistence interfaces for the run-time object.</P>
<P>After the host queries for a persistence interface, it opens a stream or storage object, as appropriate, and calls <B>SaveRuntimeState</B> to save data for the run-time object. <B>SaveRuntimeState</B> passes in the IID of the persistence interface, the IID of the stream or storage object, and a pointer to the stream or storage object. </P>
<P>The following example checks to see what type of interface the host has passed and sets up the pointer appropriately. For storage persistence, it opens a stream within the storage object and writes the data to the stream.</P>

<PRE><FONT FACE="COURIER, COURIER NEW" SIZE="2">STDMETHODIMP CMyDesigner::SaveRuntimeState
(
    REFIID riidItf,
    REFIID riidObj,
    void  *pMedium
)
{
    IStream *pStream;
    long     l;
    HRESULT  hr;
    LPWSTR   pwsz;

    // Get an IStream.
    
    if (riid == IID_IStream) {
            pStream = (IStream *)pMedium;
            pStream-&gt;AddRef();
            }
    else if (riid == IID_IStorage) {
            // Save to the CONTENTS stream.
            
            hr = ((IStorage *)pMedium)-&gt;
                CreateStream(s_wszRuntimeSaveStream, 
                    STGM_WRITE | STGM_SHARE_EXCLUSIVE | STGM_CREATE, 
                    0, 0, &amp;pStream);
            RETURN_ON_FAILURE(hr);
            }
    else {
         FAIL("Unsupported persistence interface!");
        }

    // Save some standard state information. The Load
    // routine will look for it in the stream.
    
    hr = SaveStandardState(pStream);
    RETURN_ON_FAILURE(hr);

    // Save property.
    
    if (m_bstrMyString) {
        pwsz = m_bstrMyString;
        l = SysStringLen(m_bstrMyString) + 1;
    } else {
        pwsz = L"";
        l = 1;
    }

    hr = pStream-&gt;Write(&amp;l, sizeof(l), NULL);
    RETURN_ON_FAILURE(hr);
    hr = pStream-&gt;Write(pwsz, l * sizeof(WCHAR), NULL);

    pStream-&gt;Release();
    return hr;
}
 </font></pre>
<P>The example saves two kinds of persistent data: some standard data that is the same for all objects of this class, and a local property that the end user can change. After writing the data to the stream, the sample code releases the stream pointer and returns.</P>
<P>Your requirements will vary depending on the nature and complexity of your ActiveX Designer. You should make sure that the persistent data includes all the information needed to create an instance of the run-time object. This might include type information, properties, and global variables such as time-out values that may have been set at design time. </P>
<P>When you implement the <B>Load </B>method of the persistence interfaces, you write code to load the saved information into the run-time object. The host calls the <B>Load</B> method when it creates an instance of the run-time object.</P>
<P></P></FONT>
</BODY>
</HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Siting and Containers</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">


<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<H3>Siting and Containers</H3><P>A container communicates with the ActiveX controls and designers it contains through a site. A site<I> </I>is a class implemented by the container. There is one site for each contained object. The site acts as an intermediary between the container and the object. When an ActiveX designer requires the use of a method or property of its container, it requests the feature through its site. This design lets the container know which object is making the request. </P>
<P>The site implements the <B>IOleClientSite </B>interface (or the <B>IOleControlSite</B> interface, if it contains ActiveX controls), and the ActiveX designer implements the <B>IOleObject</B> interface, as in the following figure.</P>
<P></P>
<P>    <img src="abdes028.gif"></P>
<P>At design time, the site calls <B>IOleObject::SetClientSite</B>, which gives the ActiveX designer a pointer to the site. Through this pointer, the ActiveX designer can use the site's <B>IDispatch</B> interface to change ambient properties.</P>
<P>Although the site provides useful information to the container about what the designer and other contained objects are doing, siting makes interactions indirect. To use interfaces implemented by the container, the ActiveX designer must issue requests through the site. Services provide an efficient architecture for locating and using these interfaces.</P></FONT>
</BODY>
</HTML>

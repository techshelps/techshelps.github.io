<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Type Information for ActiveX Designers</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">


<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<H2>Type Information for ActiveX Designers</H2><P>ActiveX designers can support either static or dynamic type information. <I>Static type information </I>remains the same throughout the object's lifetime. <I>Dynamic type information </I>can change while the object is active. ActiveX designers that support dynamic type information change their type information objects and type libraries in response to end user edits. Adding an event, for example, can change the type information for the designer.</P>
<P>Dynamic type information and type libraries allow you to share and reuse code, reducing implementation time. And instead of having to create several type libraries, you create only one, preventing potential inconsistencies that could cause problems for end users. </P>
<P>The <B>IProvideClassInfo</B> interface provides static type information; the <B>IProvideDynamicClassInfo</B> interface provides dynamic type information.</P>
<P>When you create an ActiveX designer, you should consider at the outset which kind of type information to support. If the type information can never change, support static type information. For example, if your ActiveX designer can only be built into other objects and does not allow an end user to attach code that would alter the type information, you can implement <B>IProvideClassInfo</B>. </P>
<P>If the type information can change, you have to support dynamic type information. For example, if you expect end users to add event procedures or controls to your ActiveX designer, implement <B>IProvideDynamicClassInfo</B>. </P>
<P>The visual designer and the run-time object must implement the same type information interface.</P>
<P>Although Visual Basic 5.0 can use either <B>IProvideClassInfo</B> or <B>IProvideDynamicClassInfo</B>, older hosts may support only <B>IProvideClassInfo</B>. If you expect your ActiveX designer to be used with hosts other than Visual Basic 5.0, you should support both interfaces.</P>
<P>For details on the type information interfaces, see Chapter 9, "<A class="normal" href="SC857.HTM">API Reference</A>," and the&nbsp; <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_oa96_introduction">
</object><a href=JavaScript:alink_1.Click()> Automation Programmer's Reference</A>. </P></FONT>
</BODY>
</HTML>

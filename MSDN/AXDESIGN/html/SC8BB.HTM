<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Glossary</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">


<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<H1>Glossary</H1>
<H2>A</H2>
<H4>ActiveX</H4>
<P>Microsoft's brand name for the technologies that enable interoperability using the Component Object Model (COM).</P>
<H4>ActiveX component</H4>
<P>Physical file that contains classes, which are definitions of objects.  Formerly these were known as "OLE Automation servers" and "OLE Automation controllers."</P>
<H4>ActiveX control</H4>
<P>The new name for programmable elements formerly known variously as OLE Controls, OCXs, or OLE Custom Controls. Controls built with the MFC Control Developer's Kit meet the ActiveX control specification.</P>
<H4>ActiveX designer</H4>
<P>An ActiveX component that has a programmable interface and presents a visual interface at design time. Loaded into a host's development environment, ActiveX designers are top-level project components that third-party developers can use to create executable applications. </P>
<H4>ambient properties</H4>
<P>Properties that define a container's surroundings, including default colors, fonts, and alignment. Ambient properties are exposed to the controls contained in the container. </P>
<H4>Application object</H4>
<P>The single instance of the Application class. The Application object controls documents, views, frame windows, and templates, and specifies application behavior such as initialization and cleanup for every instance of an application. </P>
<H4>aspect</H4>
<P>A characteristic of an ActiveX object, specified in the <B>IOleObject</B> interface. An object's aspect includes how it should be displayed and what types of behavior it supports.</P>
<H4>attached code</H4>
<P>Code written by a user and associated with an object. Attached code can be used to customize an object by adding properties, methods, or events.</P>
<H4>Automation</H4>
<P>COM-based technology that enables interoperability among components.</P>
<H2>C</H2>
<H4>class</H4>
<P>The formal definition of an object.  The class acts as the template from which an instance of an object is created at run time. The class defines the properties of the object and the methods used to control the object's behavior. </P>
<P>A Component Object Model (COM) class is not necessarily the same as a class in an object-oriented language. A COM class can be identified by a CLSID. </P>
<H4>class factory </H4>
<P>An object that implements the <B>IClassFactory</B> or <B>IClassFactory2</B> interface, which allows it to create other objects of a specific class.</P>
<H4>Component Object Model (COM)</H4>
<P>The programming model and binary standard on which ActiveX and Automation technologies are based. COM defines how ActiveX and OLE objects and their clients interact within processes or across process boundaries.</P>
<H4>COM object</H4>
<P>An object that conforms to the Component Object Model. Such objects implement and use the set of interfaces that support object interaction.</P>
<H4>container</H4>
<P>An application or object that can contain other objects, and which interacts with the contained object through Automation.</P>
<H4>control</H4>
<P>An object that you can place on a form or designer and that has its own set of recognized properties and events. Controls can receive user input, display output, and trigger event procedures.  You can manipulate most controls using methods.  Some controls are interactive (responsive to user actions), while others are static (accessible only through code). </P>
<H4>control container</H4>
<P>An object that provides sites that can contain controls. Typically these sites all exist on the same document or form. The control container implements entry points for the controls and exposes ambient properties to them. </P>
<H4>controlling extensible object</H4>
<P><I>See</I> extended object.</P>
<H4>controlling IUnknown</H4>
<P>A special instance of the <B>IUnknown</B> interface that is implemented in an extended object. </P>
<H4>cookie</H4>
<P>A special reference or handle that is associated with a specific object.</P>
<H4>customized class</H4>
<P>A class to which an end user has attached code, using Visual Basic's object extension technology. </P>
<H4>customized document</H4>
<P>A document object to which an end user has attached code, using Visual Basic's object extension technology.</P>
<H2>D</H2>
<H4>designer</H4>
<P>A top-level software component that includes a dedicated design environment. The object that controls the look and feel of a user interface at design time.</P>
<H4>design-time object</H4>
<P>An object that is used at design time within a host's development environment. <I>See also</I> run-time object.</P>
<H4>dynamic type information</H4>
<P>Type information that changes when a user attaches code. An object can have dynamic or static type information; it has one dynamic type information object for its lifetime, regardless of how often its type information changes. <I>See also</I> type information.</P>
<H2>E</H2>
<H4>embedded object</H4>
<P>An object whose data is stored along with that of its container but that runs in the process space of its server. </P>
<H4>event sink</H4>
<P>An event sink implements the member functions for a set of events. </P>
<H4>event source</H4>
<P>An event source calls the interface that handles events.</P>
<H4>extended object </H4>
<P>An object that has attached code (usually code that handles events) or added properties, methods, or events. </P>
<H2>F</H2>
<H4>form</H4>
<P>A window or dialog box. Forms are containers for controls. A multiple-document interface (MDI) form can also act as a container for child forms (forms contained within MDI forms) and some controls. An ActiveX designer may work like a form, although it does not have to be a form.</P>
<H4>frame</H4>
<P>A visual enclosure for a form or ActiveX designer in the user interface. The frame looks like a window and defines window-like properties, methods, and events. </P>
<H2>H</H2>
<H4>host application</H4>
<P>The application, such as Visual Basic, into which an ActiveX designer is loaded.</P>
<H4>HRESULT</H4>
<P>An opaque result handle defined to be zero for a successful return from a function and nonzero if error or status information is to be returned. </P>
<H2>I</H2>
<H4>in-process server</H4>
<P>A component is said to run in process when it provides objects from within another component or application's process space. Examples include dynamic-link libraries and controls.<B><I> </I></B></P>
<H4>insertable object</H4>
<P>An object that can be embedded or linked. Also called OLE object.</P>
<H4>instance</H4>
<P>An object for which memory is allocated or which is persistent.</P>
<H2>L</H2>
<H4>license key</H4>
<P>A string that, if present, allows a software component to be created.</P>
<H2>O</H2>
<H4>object</H4>
<P>A combination of code and data that can be treated as a unit, for example a control, form, designer, or application.  Each kind of object is defined by a class.</P>
<P>In object-oriented programming, an object is an entity that has state, behavior, and identity. An object's state consists of its attributes and the attributes' current values. An object's behavior consists of the operations that can be performed on it and the accompanying state changes. An object's identity is what you use to distinguish it from other objects. </P>
<P>In contrast, a COM object's behavior is defined by the interfaces it supports. A COM object's state is not explicitly specified, but is implied by its interfaces. A COM object's identity is defined by the ability to use <B>IUnknown::QueryInterface</B> to move between interfaces.</P>
<P>A COM object follows a specific model in which clients (those using an object's services) gain access to the object's data only through a pointer to an interface consisting of a set of methods (related functions). The client can then call these methods to perform desired operations. </P>
<H4>OLE</H4>
<P>Microsoft's object-based technology for sharing and transferring information between applications through linking and embedding.</P>
<H4>OLE container</H4>
<P>An OLE-aware application that can store embedded or linked objects provided by OLE servers. </P>
<H2>P</H2>
<H4>persistent</H4>
<P>Lasting between program sessions, or renewed when a new program session is begun. </P>
<H4>persistent storage</H4>
<P>Storage of a file or object in a medium such as a file system or database so that the file can be closed and then re-opened at a later time. Data can be retrieved from the file until the underlying file is deleted. </P>
<H4>properties window</H4>
<P>A window used to display or change properties of a selected form or control at design time. <I>See also</I> property page <I>and</I> property sheet.</P>
<H4>property page </H4>
<P>A grouping of properties presented as a tabbed page of a property sheet. </P>
<H4>property set</H4>
<P>Information describing a document, stored in a standard format so that other applications can locate and read that information. For example, a document created with a word processor can have a property set describing the author, title, and keywords. </P>
<H4>property sheet</H4>
<P>A special kind of dialog box (or window) through which users can modify the attributes of an external object, such as the current selection in a view. A property sheet has three main parts: the containing dialog box, one or more property pages shown one at a time, and a tab at the top of each page that the user clicks to select that page. An example of a property sheet is the <B>Project Settings</B> dialog box in the Microsoft Developer Studio. </P>
<H2>R</H2>
<H4>registry key</H4>
<P>A unique identifier assigned to each piece of information in the system registration database. </P>
<H4>run-time object</H4>
<P>An object that is created at run time and used as part of an executable application. <I>See also</I> design-time object. </P>
<H2>S</H2>
<H4>service</H4>
<P>For ActiveX designers, a group of interfaces that perform related tasks.. A caller asks an object for a service and, in return, receives an ActiveX object that supports the designated interfaces. Services do not delegate to their individual member interfaces, but rather to the <B>IServiceProvider </B>interface. </P>
<H4>site</H4>
<P>Object through which project items communicate with their surroundings. Each project item has one site.</P>
<H4>static type information</H4>
<P>Type information that remains the same throughout the lifetime of the object. <I>See also</I> type information.</P>
<H4>subobject</H4>
<P>An object defined, created, and managed by another object. </P>
<H2>T</H2>
<H4>type information</H4>
<P>Type information is the Automation standard for describing exposed objects, properties, and methods to an application or programming tool that accesses an exposed object. You provide type information in one of two ways: (a) As a type library written in Microsoft Object Description Language (ODL) and compiled by the MkTypLib utility or with the Microsoft Interface Definition Language compiler, or (b) As a data structure exported at run time. <I>See also</I> static type information <I>and</I> dynamic type information.</P>
<H2>V</H2>
<H4>visual designer</H4>
<P>The design-time object in an ActiveX designer. Using the visual designer, users can customize objects for use in executable applications.</P>
<P></P></FONT>
</BODY>
</HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Structure of This Document</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">


<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<H2>Structure of This Document</H2><P></P>
<P>This document is organized as follows:</P>
<P><B>Chapter 1, "</B><A class="normal" href="SC811.HTM">Overview of ActiveX Designers</A><B>,"</B> provides an overview of ActiveX designers and how they fit with related technologies.</P>
<P><B>Chapter 2, "</B><A class="normal" href="SC819.HTM">Using ActiveX Designers with Visual Basic</A><B>,"</B> describes how ActiveX designers work in the Visual Basic host environment. Visual Basic 5.0 is the initial host for ActiveX designers.</P>
<P><B>Chapter 3, "</B><A class="normal" href="SC823.HTM">Designing and Implementing an ActiveX Designer</A><B>,"</B> outlines what you must implement to create an ActiveX designer.</P>
<P><B>Chapter 4, "</B><A class="normal" href="SC82A.HTM">Supporting ActiveX Interfaces</A><B>,"</B> outlines the OLE and ActiveX interfaces required for ActiveX designers to support in-place activation, OLE objects, events, and properties.</P>
<P><B>Chapter 5, "</B><A class="normal" href="SC837.HTM">Type Information and Extended Objects</A><B>,"</B> discusses static and dynamic type information and extended objects.</P>
<P><B>Chapter 6, "</B><A class="normal" href="SC840.HTM">Services</A><B>,"</B> describes the service architecture and tells how to use services.</P>
<P><B>Chapter 7, "</B><A class="normal" href="SC849.HTM">Retaining Persistent Data and Saving the Run-Time Object</A><B>,"</B> explains how to save the persistent data you'll need for the visual designer and the run-time object. It also covers the <B>IActiveDesigner</B> interface, which provides information about the run-time object.</P>
<P><B>Chapter 8, "</B><A class="normal" href="SC850.HTM">Registering, Licensing, and Upgrading an ActiveX Designer</A><B>,"</B> covers issues related to licensing and creating multiple versions of ActiveX designers, and tells how to register these objects in the system-wide registry.</P>
<P><B>Chapter 9, "</B><A class="normal" href="SC857.HTM">API Reference</A><B>,"</B> is a reference to the APIs that are specific to ActiveX designers.</P>
<P><B>Chapter 10, "</B><A class="normal" href="SC862.HTM">Service Reference</A><B>,"</B> describes the services ActiveX designers can use.</P>
<P><B>Note</B></P>
<P></P>
<P>The interface syntax in this book follows the variable-naming convention known as Hungarian notation, invented by programmer Charles Simonyi. Variables are prefixed with lowercase letters indicating their data type. For example, <I>lpszNewDocname</I> signifies a long pointer to a zero-terminated string named NewDocname. For information on Hungarian notation, see <I>Programming Windows</I> by Charles Petzold.</P>
<P></P>
<P></P>
<P></P>
<P><B></B></P>
<P></P>
<P></P></FONT>
</BODY>
</HTML>

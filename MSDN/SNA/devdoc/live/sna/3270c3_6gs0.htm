<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Outbound Pacing</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_sna_outbound_pacing_3270"></a>Outbound Pacing</h3>
<p>
If the application has enough resources to handle outbound data as fast as the network can provide it (for example, a screen), or if a higher level protocol (for example, immediate request mode) constrains the data flow, then the application need not be involved in pacing, and it is possible for the local node to handle outbound pacing transparently.</p>
<p>
However, certain types of applications may require involvement in outbound pacing. If the application has limited resources (for example, a printer), then the application should specify the application pacing option in the CICB on the <a href="3270c4_07lc.htm"><b>Open(PLU) OK Response</b></a> (see <a href="3270c3_41gw.htm">Opening the PLU Connection</a>) and provide the local node with information on the state of these resources initially on the <b>Open(PLU) OK Response</b> and periodically using <b>Status-Resource</b> messages.</p>
<p>
To assist the application in calculating the initial credit field in the <b>Open(PLU) OK Response</b>, the local node delivers the pacing window sizes and the primary and secondary maximum RU sizes on the <a href="3270c4_0gvk.htm"><b>Open(PLU) Request</b></a>. The initial credit must be at least as large as the primary to secondary pacing window size; otherwise the BIND will be rejected and the application will be sent an <a href="3270c4_9oxc.htm"><b>Open(PLU) Error Confirm</b></a> message. The local node fills in a suggested initial credit value of one more than the pacing window (to try to avoid stop-start situations).</p>
<p>
Note that the local node will also reject the BIND if the application specifies that it wishes to be involved in pacing (of whatever initial credit), but the BIND specifies that there is no outbound pacing.</p>
<p>
Only FMD (function management data) requests are part of the credit scheme, so the application must maintain space within its buffer for one <a href="3270c4_6prk.htm"><b>Status-Control</b></a> request per RU in addition to the number of RUs specified by the initial credit count (a <b>Status-Control</b> message takes up 36 bytes).</p>
<p>
Each unit of credit that the application delivers to the local node allows the local node to give the application a single RU (or a single chunk if chunking is being used). Note that if the application is receiving segments, then this may correspond to several DATAFMI messages. The application can count RUs for the purpose of outbound flow control by using the BBIU (begin basic information unit) and EBIU (end basic information unit) flags.</p>
<p>
The application should maintain a credit-used count, which it should report to the local node on <a href="3270c4_16uo.htm"><b>Status-Resource</b></a> messages. The application needs to take the following actions:
<ul>
<li>
On processing (not receiving) DATAFMI messages with EBIU set (corresponding to FMD requests), increment the credit-used count by one.</li>
<li>
On processing <b>Status-Control</b> messages and all other messages from the local node, do not increment the credit-used count.</li>
<li>
Periodically report the current credit-used count on a <b>Status-Resource</b> message.</li>
<li>
Report the credit-used count when its buffer becomes empty (whatever the last message processed was), unless the credit-used count is zero.</li>
<li>
When the credit-used count is reported to the local node, reset it to zero.</li>
</ul>
<p>
The frequency at which the application provides <a href="3270c4_16uo.htm"><b>Status-Resource</b></a> messages is not architected. However, the local node will only send the application as many <a href="3270c4_4eeo.htm"><b>Data</b></a> messages as it has received credit for, and so when the application's credit-used count reaches the initial credit value, the local node will not send any more data. The application should attempt to send a <b>Status-Resource</b> message before this happens, because if the local node cannot send a <b>Data</b> message to the application and the host is still sending requests, the local node may not be able to send a pacing response to the host when required, with a consequent degradation of performance.</p>
<p>
If the pacing window is small, such as one or two, the application should send a <b>Status-Resource</b> after processing each DATAFMI message to allow the local node to send the suitable pacing response.</p>
<p>
The following figure shows the local node handling outbound pacing when the application is not involved (APPLPAC = 0x00); the pacing window is assumed to be two.</p>
<p>
<img src="images/32703o.gif" border=0></p>
<p>
The following figure shows the local node and the application handling outbound pacing with the outbound pacing window assumed to be two and the initial credit from the local node to the application assumed to be four. Note that the local node can send an isolated pacing response (IPR) to the host to get another window full of data as soon as the application has sufficient credit for the rest of the present window and the next window.</p>
<p>
<img src="images/32703oa.gif" border=0></p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>APPC Verbs and Windows Extensions</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_sna_appc_verbs_and_windows_extensions_appc"></a>APPC Verbs and Windows Extensions</h2>
<p>
This topic describes the APPC verbs and Windows extensions that are of particular importance in this version of SNA Server:</p>
<h4>APPC Verbs</h4>
<p>
The following APPC verb descriptions contain important features and should be read before using this version of Windows APPC.
<dl>
<dt>
<a href="appc05a_1ckj.htm"><b>ALLOCATE</b></a> or <a href="appc05a_38f7.htm"><b>MC_ALLOCATE</b></a></dt>
<dd>
Issued by the invoking TP, this verb allocates a session between the local LU and partner LU and (in conjunction with <a href="appc05b_0m77.htm"><b>RECEIVE_ALLOCATE</b></a>) establishes a conversation between the invoking TP and the invokable TP. After this verb executes successfully, APPC generates a conversation identifier (<b>conv_id</b>). The <b>conv_id</b> is a required parameter for all other APPC conversation verbs.
<p>
For a user or group using TPs, 5250 emulators, or APPC applications, you can assign default local and remote LUs. In this case, the field for LU alias is left blank or null and the default LUs are accessed when the user or group member starts an APPC program. For more information on using default LUs, see the <i>Microsoft SNA Server Administration Guide</i>.

<p>
For Windows version 3.<i>x</i> systems, it is recommended that you use <a href="appc06_66sj.htm"><b>WinAsyncAPPC</b></a> rather than the blocking version of these calls.
</dd>
<dt>
<a href="appc05b_0m77.htm"><b>RECEIVE_ALLOCATE</b></a></dt>
<dd>
Issued by the invokable TP to confirm that it is ready to begin a conversation with the invoking TP that issued <a href="appc05a_1ckj.htm"><b>ALLOCATE</b></a> or <a href="appc05a_38f7.htm"><b>MC_ALLOCATE</b></a>. This must be the first APPC verb issued by the invokable TP. The initial state is RESET. If the verb executes successfully (<b>primary_rc</b> is ap_ok), the state changes to RECEIVE.</dd>
<dt>
<a href="appc05b_92oz.htm"><b>RECEIVE_AND_POST</b></a> or <a href="appc05a_3jvn.htm"><b>MC_RECEIVE_AND_POST</b></a></dt>
<dd>
Receives application data and status information asynchronously. This allows the local TP to proceed with processing while data is still arriving at the local LU. <b>RECEIVE_AND_POST</b> and <b>MC_RECEIVE_AND_POST</b> are only supported by the Windows NT, Windows 95, and OS/2 operating systems. For similar functionality under the Windows version 3<i>.x</i> system, use <b>RECEIVE_AND_WAIT</b> or <b>MC_RECEIVE_AND_WAIT</b> in conjunction with <a href="appc06_66sj.htm"><b>WinAsyncAPPC</b></a>.
<p>
While an asynchronous <b>RECEIVE_AND_POST</b> or <b>MC_RECEIVE_AND_POST</b> is outstanding, the following verbs can be issued:

<p class=indent1>
<b>REQUEST_TO_SEND</b> or <b>MC_REQUEST_TO_SEND</b></p>

<p class=indent1>
<b>GET_TYPE</b></p>

<p class=indent1>
<b>GET_ATTRIBUTES</b> or <b>MC_GET_ATTRIBUTES</b></p>

<p class=indent1>
<b>TEST_RTS</b> or <b>MC_TEST_RTS</b></p>

<p class=indent1>
<b>DEALLOCATE</b></p>

<p class=indent1>
<b>SEND_ERROR</b> or <b>MC_SEND_ERROR</b></p>

<p class=indent1>
<b>TP_ENDED</b></p>

</dd>
<dt>
<a href="appc05b_19er.htm"><b>RECEIVE_AND_WAIT</b></a> or <a href="appc05a_5qlf.htm"><b>MC_RECEIVE_AND_WAIT</b></a></dt>
<dd>
Receives any data that is currently available from the partner TP. If no data is currently available, the local TP waits for data to arrive. For Windows version 3.<i>x</i> systems, it is recommended that you use <a href="appc06_66sj.htm"><b>WinAsyncAPPC</b></a> rather than the blocking version of this call.
<p>
<b>RECEIVE_AND_WAIT</b> and <b>MC_RECEIVE_AND_WAIT</b> have been altered to act like <b>RECEIVE_AND_POST</b> and <b>MC_RECEIVE_AND_POST</b>. While an asynchronous <b>RECEIVE_AND_WAIT</b> or <b>MC_RECEIVE_AND_WAIT</b> is outstanding, the following verbs can be issued:

<p class=indent1>
<b>REQUEST_TO_SEND</b> or <b>MC_REQUEST_TO_SEND</b></p>

<p class=indent1>
<b>GET_TYPE</b></p>

<p class=indent1>
<b>GET_ATTRIBUTES</b> or <b>MC_GET_ATTRIBUTES</b></p>

<p class=indent1>
<b>TEST_RTS</b> or <b>MC_TEST_RTS</b></p>

<p class=indent1>
<b>DEALLOCATE</b></p>

<p class=indent1>
<b>SEND_ERROR</b> or <b>MC_SEND_ERROR</b></p>

<p class=indent1>
<b>TP_ENDED</b></p>

</dd>
<dt>
<a href="appc04_0fs3.htm"><b>TP_STARTED</b></a></dt>
<dd>
Issued by the invoking TP, this verb notifies APPC that the TP is starting. For a user or group using TPs, 5250 emulators, or APPC applications, you can assign default local and remote APPC LUs. These default LUs are accessed when the user or group member starts an APPC program (a TP, 5250 emulator, or APPC application) and the program does not specify LU aliases. For more information on using default LUs, see the <i>Microsoft SNA Server Administration Guide</i>.
</dd>
</dl>
<h4>Windows Extensions</h4>
<p>
Windows APPC provides a complete set of Windows extensions that allow asynchronous communication using Windows version 3.<i>x</i>. These extensions provide maximum programming compatibility between Windows NT, Windows 95, and Windows version 3.<i>x</i>. They include the following:
<dl>
<dt>
<a href="appc06_9qlf.htm"><b>WinAPPCCancelAsyncRequest</b></a></dt>
<dd>
Cancels an outstanding <b>WinAsyncAPPC</b>-based request.</dd>
<dt>
<a href="appc06_07s3.htm"><b>WinAPPCCancelBlockingCall</b></a></dt>
<dd>
Cancels any outstanding blocking operation for its thread.</dd>
<dt>
<a href="appc06_57fn.htm"><b>WinAPPCCleanup</b></a></dt>
<dd>
Terminates and deregisters an application from a Windows APPC implementation. When an application is finished, it must call this function to deregister itself from a Windows APPC implementation.</dd>
<dt>
<a href="appc06_5un7.htm"><b>WinAPPCIsBlocking</b></a></dt>
<dd>
Determines if a thread is executing while waiting for a previous blocking call to finish.</dd>
<dt>
<a href="appc06_2fs3.htm"><b>WinAPPCSetBlockingHook</b></a></dt>
<dd>
Allows a Windows APPC implementation to block APPC function calls by means of a new function. This call is used by Windows version 3<i>.x</i> applications to make blocking calls without blocking the rest of the system. Blocking procedures apply only if you do not use asynchronous calls. If a function needs to block, the blocking procedure is called repeatedly until the original request completes. This allows Windows to continue to run while the original application waits for the call to return. Note that while inside the blocking procedure, the application can be re-entered. <b>WinAPPCSetBlockingHook</b> is used by Windows version 3.<i>x</i> applications that go into a <b>PeekMessageLoop</b> to make blocking calls without blocking the rest of the system.
<p>
By default, Windows NT and Windows 95 do not go into a <b>PeekMessageLoop</b>; they actually block on an event waiting for the call to complete. The only time you need to use <b>WinAPPCSetBlockingHook</b> for Windows NT or Windows 95 is when a single-threaded application for these systems and Windows version 3.<i>x</i> share common source code. In this case, you must explicitly make this call. Contrast with <b>WinAPPCIsBlocking</b> and <b>WinAPPCUnhookBlockingHook</b>.
</dd>
<dt>
<a href="appc06_4u03.htm"><b>WinAPPCStartup</b></a></dt>
<dd>
Registers an application and specifies the version of Windows APPC required. An application must call this extension to register itself with a Windows APPC implementation before issuing any further Windows APPC calls.</dd>
<dt>
<a href="appc06_1cv7.htm"><b>WinAPPCUnhookBlockingHook</b></a></dt>
<dd>
Removes any previous blocking hook that has been installed and reinstalls the default blocking mechanism.</dd>
<dt>
<a href="appc06_66sj.htm"><b>WinAsyncAPPC</b></a></dt>
<dd>
Provides an asynchronous version for all of the APPC verbs. It is recommended that you use this extension instead of the blocking versions of the verbs if you run your application under Windows version 3.<i>x</i>. APPC verbs that can block are:
<p class=indent1>
<b>ALLOCATE</b> or <b>MC_ALLOCATE</b></p>

<p class=indent1>
<b>CONFIRM</b> or <b>MC_CONFIRM</b></p>

<p class=indent1>
<b>CONFIRMED</b> or <b>MC_CONFIRMED</b></p>

<p class=indent1>
<b>DEALLOCATE</b> or <b>MC_DEALLOCATE</b></p>

<p class=indent1>
<b>FLUSH</b> or <b>MC_FLUSH</b></p>

<p class=indent1>
<b>PREPARE_TO_RECEIVE</b> or <b>MC_PREPARE_TO_RECEIVE</b></p>

<p class=indent1>
<b>RECEIVE_ALLOCATE</b></p>

<p class=indent1>
<b>RECEIVE_AND_WAIT</b> or <b>MC_RECEIVE_AND_WAIT</b></p>

<p class=indent1>
<b>REQUEST_TO_SEND</b> or <b>MC_REQUEST_TO_SEND</b></p>

<p class=indent1>
<b>SEND_CONVERSATION</b> or <b>MC_SEND_CONVERSATION</b></p>

<p class=indent1>
<b>SEND_DATA</b> or <b>MC_SEND_DATA</b></p>

<p class=indent1>
<b>SEND_ERROR</b> or <b>MC_SEND_ERROR</b></p>

<p class=indent1>
<b>TP_ENDED</b></p>

<p class=indent1>
<b>TP_STARTED</b></p>

</dd>
</dl>
<h4>Limits</h4>
<p>
SNA Server permits one outstanding Windows APPC asynchronous call per connection and one blocking verb per thread. For example:</p>
<pre><code>void ProcessVerbCompletion (WPARAM wParam, LPARAM lParam)

{ for (i = 0   i &lt; nPendingVerbs; itt)
    if (pPendingVerbs [i].hAsync = = wParam)
        ProcessVCB ( (LPVCB) lParam);
}    . . .

LRESULT CALLBACK SampleWndProc ( ... )
{
    if (msg = = uAsyncAPPC) {
        ProcessVerbCompletion (wParam; lParam);
    }
        else switch (msg) {
        case WM_USER:
            if (hAsync = WinAsyncAPPC (hwnd, &amp;vcb) )
            pPendingVerbs [nPendingVerbs tt].hAsync = .hAsync;

            break;
    }

}

WinMain ( ... )
{
    if ( ( WinAPPCStartup ( ...) = = FALSE ) {
    return FALSE ;

    }

    uAsyncAPPC = RegisterWindowsMessage ("WinAsyncAPPC") ;
    while (GetMessage ( ...)  )  {

    ...
    WinAPPCCleanup ( ... )

}
</code></pre>
<p>
<b>Note</b>&nbsp;&nbsp;The exceptions to the rule of one outstanding asynchronous call are <a href="appc05b_92oz.htm"><b>RECEIVE_AND_POST</b></a>, <a href="appc05a_3jvn.htm"><b>MC_RECEIVE_AND_POST</b></a>, <a href="appc05b_19er.htm"><b>RECEIVE_AND_WAIT</b></a>, and <a href="appc05a_5qlf.htm"><b>MC_RECEIVE_AND_WAIT</b></a>. While these verbs are outstanding, certain other verbs can also be called.</p>
<p>&nbsp;</p></body>
</HTML>

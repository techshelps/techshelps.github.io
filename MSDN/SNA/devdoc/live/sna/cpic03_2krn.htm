<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Allocate</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_sna_allocate_cpic"></a>Allocate</h1>
<p>
The <b>Allocate</b> call (function name <b>cmallc</b>) is issued by the invoking program to allocate a conversation with the partner program, using the current conversation characteristics. CPI-C can also allocate a session between the local LU and partner LU if one does not already exist.</p>
<pre><code><b>CM_ENTRY Allocate(
  unsigned char FAR</b><i> *conversation_ID</i><b>,  </b>
<b>  CM_INT32 FAR</b><i> *return_code            </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>conversation_ID</i></dt>
<dd>
Supplied parameter. Specifies the conversation identifier. The value of this parameter was returned by <a href="cpic03_0jhf.htm"><b>Initialize_Conversation</b></a>.</dd>
<dt>
<i>return_code</i></dt>
<dd>
The code returned from this call. The valid return codes are listed below.
</dd>
</dl>
<h4>Return Codes</h4>
<dl>
<dt>
cm_ok</dt>
<dd>
Primary return code; the call executed successfully.</dd>
<dt>
cm_operation_not_accepted</dt>
<dd>
Primary return code; this value indicates that a previous operation on this conversation is incomplete.</dd>
<dt>
cm_operation_incomplete</dt>
<dd>
Primary return code; a nonblocking operation has been started on the conversation but is not complete. The program can issue <a href="cpic03_6un7.htm"><b>Wait_For_Conversation</b></a> to wait for the operation to complete or <a href="cpic03_017n.htm"><b>Cancel_Conversation</b></a> to cancel the operation and conversation.</dd>
<dt>
cm_parameter_error</dt>
<dd>
Primary return code; one of the following occurred:
<ul>
<li>
The mode name derived from the side information or set by <a href="cpic03_43hf.htm"><b>Set_Mode_Name</b></a> is not valid.</li>
<li>
The mode name is used by SNA service TPs; the invoking program does not have the authority to use this mode name. An example is SNASVCMG.</li>
<li>
The partner program derived from the side information is an SNA service TP; the local program does not have the privilege required to allocate a conversation to an SNA service TP.</li>
<li>
The partner program is a service TP, which participates in basic conversations, but the conversation is set to CM_MAPPED_CONVERSATION.</li>
<li>
The partner LU name derived from the side information or set by <a href="cpic03_9qg3.htm"><b>Set_Partner_LU_Name</b></a> is not valid.</li>
</ul>
</dd>
<dt>
cm_program_parameter_check</dt>
<dd>
Primary return code; the value specified by <i>conversation_ID</i> is not valid, or the address of a variable is invalid.</dd>
<dt>
cm_program_state_check</dt>
<dd>
Primary return code; the conversation is not in INITIALIZE state.</dd>
<dt>
cm_product_specific_error</dt>
<dd>
Primary return code; a product-specific error occurred and has been logged in the product's error log.</dd>
<dt>
cm_unsuccessful</dt>
<dd>
Primary return code; the conversation's return-control characteristic is set to CM_IMMEDIATE and the local LU did not have an available contention-winner session.
</dd>
</dl>
<p>
The following return codes can be generated if the conversation's return-control type is set to CM_WHEN_SESSION_ALLOCATED.
<dl>
<dt>
cm_allocate_failure_no_retry</dt>
<dd>
Primary return code; the conversation cannot be allocated because of a permanent condition, such as a configuration error or session protocol error. To determine the error, the system administrator should examine the error log file. Do not retry the allocation until the error has been corrected.</dd>
<dt>
cm_allocate_failure_retry</dt>
<dd>
Primary return code; the conversation could not be allocated because of a temporary condition, such as a link failure. The reason for the failure is logged in the system error log. Retry the allocation.
</dd>
</dl>
<h4>State Changes</h4>
<p>
The conversation must be in INITIALIZE state when <b>Allocate</b> is issued.</p>
<p>
State changes, summarized in the following table, are based on the value of the <i>return_code</i> parameter.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=58%><i>return_code</i></th>
<th align=left width=42%>New state</th>
</tr>
<tr valign=top>
<td width=58%>cm_ok</td>
<td width=42%>SEND</td>
</tr>
<tr valign=top>
<td width=58%>cm_allocate_failure_no_retry</td>
<td width=42%>RESET</td>
</tr>
<tr valign=top>
<td width=58%>cm_allocate_failure_retry</td>
<td width=42%>RESET</td>
</tr>
<tr valign=top>
<td width=58%>All others</td>
<td width=42%>No change</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
The type of conversation allocated is based on the conversation type characteristic: mapped or basic.</p>
<p>
When the conversation has been allocated by this call, the following conversation characteristics cannot be changed:
<ul>
<li>
Conversation type</li>
<li>
Mode name</li>
<li>
Partner LU name</li>
<li>
Partner program name</li>
<li>
Return control</li>
<li>
Synchronization level</li>
<li>
Conversation security</li>
<li>
User identifier</li>
<li>
Password</li>
</ul>
<p>
To send the allocation request immediately, the invoking program can issue <a href="cpic03_3vab.htm"><b>Flush</b></a> or <a href="cpic03_5q8z.htm"><b>Confirm</b></a> immediately after <b>Allocate</b>. Otherwise, the allocate request accumulates with other data in the local LU's send buffer until the buffer is full.</p>
<p>
By issuing <b>Confirm</b> after <b>Allocate</b>, the invoking program can immediately determine whether the allocation was successful (if the conversation synchronization level is set to CM_CONFIRM).</p>
<p>
If the partner LU rejects the allocation request generated by <b>Allocate</b>, the error is returned to the invoking program on a subsequent call.</p>
<p>&nbsp;</p></body>
</HTML>

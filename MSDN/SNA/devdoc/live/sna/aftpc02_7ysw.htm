<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>aftp_delete</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_sna_aftp_delete_aftp"></a>aftp_delete</h1>
<p>
The <b>aftp_delete</b> call deletes a single file on the AFTP server. A connection to the AFTP server must be established before using this call.</p>
<p>
<b>AFTP_ENTRY aftp_delete(<br>
IN AFTP_HANDLE_TYPE </b><i>connection_id</i><b>,<br>
IN unsigned char AFTP_PTR </b><i>filename</i><b>,<br>
IN AFTP_LENGTH_TYPE </b><i>length</i><b>,<br>
OUT AFTP_RETURN_CODE_TYPE AFTP_PTR </b><i>return_code<br>
</i><b>);</b></p>
<h4>Parameters</h4>
<dl>
<dt>
<i>connection_id</i></dt>
<dd>
An AFTP connection object originally created with <a href="aftpc02_2nao.htm"><b>aftp_create</b></a>.</dd>
<dt>
<i>filename</i></dt>
<dd>
The name of the file to be removed. The format of this name can be either the native syntax on the AFTP server or the AFTP common naming convention described in the <i>APPC Application Suite User's Guide</i>. The file specified can contain either an absolute or relative path name.</dd>
<dt>
<i>length</i></dt>
<dd>
The length of the <i>filename</i> parameter in bytes.</dd>
<dt>
<i>return_code</i></dt>
<dd>
The return code issued for this function. See <a href="aftpc03_5h0w.htm">AFTP Return Codes</a> for the list of possible return codes.
</dd>
</dl>
<h4>Example</h4>
<pre><code>{
    AFTP_HANDLE_TYPE       connection_id;
    AFTP_RETURN_CODE_TYPE  aftp_rc;

    /* The value used for filespec will vary based on platform:
     *   VM common naming:       filespec="/a/foo*"
     *   VM native naming:       filespec="foo*.*.a"
     *   MVS PDS common naming:  filespec="/user.clist/foo*"
     *   MVS PDS native naming:  filespec="'user.clist(foo*)'"
     *   MVS sequential common:  filespec="/user.qual*.a*.**"
     *   MVS sequential native:  filespec="'user.qual*.a*.**'"
     */
    static unsigned char AFTP_PTR filespec = "/user.clist/foo*";

    /*
     * Before issuing the example call, you must have:
     *    a connection_id, use:         aftp_create()
     *    a connection to server, use:  aftp_connect()
     */

    /*
     * Delete a file
     */

    aftp_delete(
        connection_id,
        filespec,
        (AFTP_LENGTH_TYPE)strlen(filespec),
        &amp;aftp_rc);

    if (aftp_rc != AFTP_RC_OK) {
        fprintf(stderr, "Error deleting AFTP file.\n");
    }

}
 </code></pre>
<h4>Line Flows</h4>
<p>
The file name is sent to the AFTP server and the call waits for a response indicating the success or failure of the delete file operation.</p>
<p>&nbsp;</p></body>
</HTML>

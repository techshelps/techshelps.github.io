<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Writing Portable Applications</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_sna_writing_portable_applications_lua"></a>Writing Portable Applications</h1>
<p>
Use the following guidelines for writing LUA applications that are portable to other environments:
<ul>
<li>
Use the symbolic constant names for parameter values and return codes, not the numeric values shown in the WINLUA.H file. (See the WINLUA.H file in the Microsoft® SNA Server Software Development Kit for more information.)</li>
<li>
When accessing SNA<b> </b>sense codes in a data buffer, use the symbolic constants rather than the numeric values; this ensures that the byte storage order is correct for your particular system. You should use <b>memcpy</b> to set the values, and <b>memcmp</b> to test them. For example:<pre><code>memcpy (this_verb.common.lua_data_ptr, LUA_INCORRECT_REQ_CODE, 4);
if (memcmp (this_verb.common.lua_data_ptr,
LUA_INCORRECT_REQ_CODE, 4) == 0)
{
.....
}</code></pre>
</li>
</ul>
<pre><code></code></pre>
<ul>
<li>
Ensure that any parameters shown as reserved are set to zero.</li>
<li>
Set the <b>lua_verb_length</b> parameter as described in the verb description.</li>
</ul>
<p>&nbsp;</p></body>
</HTML>

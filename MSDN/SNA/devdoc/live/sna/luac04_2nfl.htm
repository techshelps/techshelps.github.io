<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SLI_RECEIVE</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_sna_sli_receive_lua"></a>SLI_RECEIVE</h1>
<p>
The <b>SLI_RECEIVE</b> verb receives responses, SNA commands, and data into a Windows LUA application's buffer. <b>SLI_RECEIVE</b> also provides the current status of the session to the Windows LUA application.</p>
<p>
The following structure describes the <b>LUA_COMMON</b> member of the VCB used by <b>SLI_RECEIVE</b>.</p>
<pre><code>struct LUA_COMMON {
    unsigned short    lua_verb;
    unsigned short    lua_verb_length;
    unsigned short    lua_prim_rc;
    unsigned long     lua_sec_rc;
    unsigned short    lua_opcode;
    unsigned long     lua_correlator;
    unsigned char     lua_luname[8];
    unsigned short    lua_extension_list_offset;
    unsigned short    lua_cobol_offset;
    unsigned long     lua_sid;
    unsigned short    lua_max_length;
    unsigned short    lua_data_length;
    char FAR *        lua_data_ptr;
    unsigned long     lua_post_handle;
    struct LUA_TH     lua_th;
    struct LUA_RH     lua_rh;
    struct LUA_FLAG1  lua_flag1;
    unsigned char     lua_message_type;
    struct LUA_FLAG2  lua_flag2; 
    unsigned char     lua_resv56[7];
    unsigned char     lua_encr_decr_option;
};
 </code></pre>
<h4>Members</h4>
<dl>
<dt>
<b>lua_verb</b></dt>
<dd>
Supplied parameter. Contains the verb code, LUA_VERB_SLI for SLI verbs.</dd>
<dt>
<b>lua_verb_length</b></dt>
<dd>
Supplied parameter. Specifies the length in bytes of the LUA VCB. It must contain the length of the verb record being issued.</dd>
<dt>
<b>lua_prim_rc</b></dt>
<dd>
Primary return code set by LUA at the completion of the verb. The valid return codes vary depending on the LUA verb issued.</dd>
<dt>
<b>lua_sec_rc</b></dt>
<dd>
Secondary return code set by LUA at the completion of the verb. The valid return codes vary depending on the LUA verb issued.</dd>
<dt>
<b>lua_opcode</b></dt>
<dd>
Supplied parameter. Contains the LUA command code (verb operation code) for the verb to be issued, LUA_OPCODE_SLI_RECEIVE.</dd>
<dt>
<b>lua_correlator</b></dt>
<dd>
Supplied parameter. Contains a user-supplied value that links the verb with other user-supplied information. LUA does not use or change this information. This parameter is optional.</dd>
<dt>
<b>lua_luname</b></dt>
<dd>
Supplied parameter. Specifies the ASCII name of the local LU used by the Windows LUA session.
<p>
<b>SLI_RECEIVE</b> only requires this parameter if <b>lua_sid</b> is zero.

<p>
This parameter is eight bytes long, padded on the right with spaces (0x20) if the name is shorter than eight characters.
</dd>
<dt>
<b>lua_extension_list_offset</b></dt>
<dd>
Not used by <b>SLI_RECEIVE</b> and should be set to zero.</dd>
<dt>
<b>lua_cobol_offset</b></dt>
<dd>
Not used by LUA in Microsoft® SNA Server and should be zero.</dd>
<dt>
<b>lua_sid</b></dt>
<dd>
Supplied and returned parameter. Specifies the session identifier and is returned by <a href="luac04_7bxd.htm"><b>SLI_OPEN</b></a> and <a href="luac03_37z5.htm"><b>RUI_INIT</b></a>. Other verbs use this parameter to identify the session used for the command. If other verbs use the <b>lua_luname</b> parameter to identify sessions, set the <b>lua_sid</b> parameter to zero.</dd>
<dt>
<b>lua_max_length</b></dt>
<dd>
Specifies the length of received buffer for <a href="luac03_7dwh.htm"><b>RUI_READ</b></a><b> </b>and <b>SLI_RECEIVE</b>. </dd>
<dt>
<b>lua_data_length</b></dt>
<dd>
Returned parameter. Specifies the length of data returned in the receive buffer.</dd>
<dt>
<b>lua_data_ptr</b></dt>
<dd>
Pointer to the application-supplied buffer that is to receive the data from an <b>SLI_RECEIVE</b> verb. Both SNA commands and data are placed in this buffer, and they can be in an EBCDIC format.
<p>
When <b>SLI_RECEIVE</b> is issued, this parameter points to the location to receive the data from the host.
</dd>
<dt>
<b>lua_post_handle</b></dt>
<dd>
Supplied parameter. Used under Microsoft® Windows NT® and Microsoft® Windows® 95 if asynchronous notification is to be accomplished by events. This variable contains the handle of the event to be signaled or a window handle.
<p>
For all other environments, this parameter is reserved and should be set to zero.
</dd>
<dt>
<b>lua_th</b></dt>
<dd>
Returned parameter. Contains the SNA transmission header (TH) of the message received. Various subparameters are returned for read and bid functions. Its subparameters are as follows:
<dl>
<dt>
<b>lua_th.flags_fid</b></dt>
<dd>
Format identification type 2, four bits.</dd>
<dt>
<b>lua_th.flags_mpf</b></dt>
<dd>
Segmenting mapping field, two bits. Defines the type of data segment. The following values are valid:
<p>
<b>0x00</b>Middle segment<br>
<b>0x04</b>Last segment<br>
<b>0x08</b>First segment<br>
<b>0x0C</b>Only segment
</dd>
<dt>
<b>lua_th.flags_odai</b></dt>
<dd>
Originating address field–destination address field (OAF–DAF) assignor indicator, one bit.</dd>
<dt>
<b>lua_th.flags_efi</b></dt>
<dd>
Expedited flow indicator, one bit.</dd>
<dt>
<b>lua_th.daf</b></dt>
<dd>
Destination address field (DAF), an unsigned char.</dd>
<dt>
<b>lua_th.oaf</b></dt>
<dd>
Originating address field (OAF), an unsigned char.</dd>
<dt>
<b>lua_th.snf</b></dt>
<dd>
Sequence number field, an unsigned char[2].
</dd>
</dl>
</dd>
<dt>
<b>lua_rh</b></dt>
<dd>
Returned parameter. Contains the SNA request/response header (RH) of the message sent or received. Its subparameters are as follows:
<dl>
<dt>
<b>lua_rh.rri</b></dt>
<dd>
Request-response indicator, one bit.</dd>
<dt>
<b>lua_rh.ruc</b></dt>
<dd>
RU category, two bits. The following values are valid:
<p>
<b>LUA_RH_FMD</b>  (<b>0x00</b>)FM data segment<br>
<b>LUA_RH_NC</b>  (<b>0x20</b>)Network control<br>
<b>LUA_RH_DFC</b>  (<b>0x40</b>)Data flow control<br>
<b>LUA_RH_SC</b>  (<b>0x60</b>)Session control
</dd>
<dt>
<b>lua_rh.fi</b></dt>
<dd>
Format indicator, one bit.</dd>
<dt>
<b>lua_rh.sdi</b></dt>
<dd>
Sense data included indicator, one bit.</dd>
<dt>
<b>lua_rh.bci</b></dt>
<dd>
Begin chain indicator, one bit.</dd>
<dt>
<b>lua_rh.eci</b></dt>
<dd>
End chain indicator, one bit.</dd>
<dt>
<b>lua_rh.dr1i</b></dt>
<dd>
Definite response 1 indicator, one bit.</dd>
<dt>
<b>lua_rh.dr2i</b></dt>
<dd>
Definite response 2 indicator, one bit.</dd>
<dt>
<b>lua_rh.ri</b></dt>
<dd>
Exception response indicator (for a request), or response type indicator (for a response), one bit.</dd>
<dt>
<b>lua_rh.qri</b></dt>
<dd>
Queued response indicator, one bit.</dd>
<dt>
<b>lua_rh.pi</b></dt>
<dd>
Pacing indicator, one bit.</dd>
<dt>
<b>lua_rh.bbi</b></dt>
<dd>
Begin bracket indicator, one bit.</dd>
<dt>
<b>lua_rh.ebi</b></dt>
<dd>
End bracket indicator, one bit.</dd>
<dt>
<b>lua_rh.cdi</b></dt>
<dd>
Change direction indicator, one bit.</dd>
<dt>
<b>lua_rh.csi</b></dt>
<dd>
Code selection indicator, one bit.</dd>
<dt>
<b>lua_rh.edi</b></dt>
<dd>
Enciphered data indicator, one bit.</dd>
<dt>
<b>lua_rh.pdi</b></dt>
<dd>
Padded data indicator, one bit.
</dd>
</dl>
</dd>
<dt>
<b>lua_flag1</b></dt>
<dd>
Supplied parameter. Contains a data structure containing flags for messages supplied by the application. This parameter is used by <a href="luac03_8fmp.htm"><b>RUI_BID</b></a>, <a href="luac03_7dwh.htm"><b>RUI_READ</b></a>, <a href="luac03_7uap.htm"><b>RUI_WRITE</b></a>, <a href="luac04_5z8h.htm"><b>SLI_BID</b></a>, <b>SLI_RECEIVE</b>, and <a href="luac04_2lr5.htm"><b>SLI_SEND</b></a>. Its subparameters are as follows:
<dl>
<dt>
<b>lua_flag1.bid_enable</b></dt>
<dd>
Bid enable indicator, one bit. </dd>
<dt>
<b>lua_flag1.close_abend</b></dt>
<dd>
Close immediate indicator, one bit.</dd>
<dt>
<b>lua_flag1.nowait</b></dt>
<dd>
No wait for data flag, one bit. </dd>
<dt>
<b>lua_flag1.sscp_exp</b></dt>
<dd>
SSCP expedited flow, one bit.</dd>
<dt>
<b>lua_flag1.sscp_norm</b></dt>
<dd>
SSCP normal flow, one bit.</dd>
<dt>
<b>lua_flag1.lu_exp</b></dt>
<dd>
LU expedited flow, one bit.</dd>
<dt>
<b>lua_flag1.lu_norm</b></dt>
<dd>
LU normal flow, one bit.
</dd>
</dl>

<p>
Set <b>lua_flag1.bid_enable</b> to 1 to re-enable the most recent <a href="luac04_5z8h.htm"><b>SLI_BID</b></a> (equivalent to issuing <b>SLI_BID</b> again with exactly the same parameters as before), or set it to zero if you do not want to re-enable <b>SLI_BID</b>. Note that re-enabling the previous <b>SLI_BID</b> reuses the VCB originally allocated for it, so this VCB must not have been freed or modified.

<p>
Set <b>lua_flag1.nowait</b> to 1 to indicate that you want <b>SLI_RECEIVE</b> to return immediately whether or not data is available to be read, or set it to zero if you want the verb to wait for data before returning.

<p>
Set one or more of the following flags to 1 to indicate from which message flow to read data:

<p class=indent1>
<b>lua_flag1.sscp_exp</b></p>

<p class=indent1>
<b>lua_flag1.lu_exp</b></p>

<p class=indent1>
<b>lua_flag1.sscp_norm</b></p>

<p class=indent1>
<b>lua_flag1.lu_norm</b></p>


<p>
If more than one flag is set, the highest-priority data available is returned. The order of priorities (highest first) is: SSCP expedited, LU expedited, SSCP normal, LU normal. The equivalent flag in the <b>lua_flag2</b> group is set to indicate from which flow the data was read. 
</dd>
<dt>
<b>lua_message_type</b></dt>
<dd>
Specifies the type of the inbound or outbound SNA commands and data. Returned parameter. Specifies the type of SNA message indicated to <b>SLI_RECEIVE</b>. Possible values are:
<p>
LUA_MESSAGE_TYPE_LU_DATA

<p>
LUA_MESSAGE_TYPE_SSCP_DATA

<p>
LUA_MESSAGE_TYPE_RSP

<p>
LUA_MESSAGE_TYPE_BID

<p>
LUA_MESSAGE_TYPE_BIND

<p>
LUA_MESSAGE_TYPE_BIS

<p>
LUA_MESSAGE_TYPE_CANCEL

<p>
LUA_MESSAGE_TYPE_CHASE

<p>
LUA_MESSAGE_TYPE_LUSTAT_LU

<p>
LUA_MESSAGE_TYPE_LUSTAT_SSCP

<p>
LUA_MESSAGE_TYPE_QC

<p>
LUA_MESSAGE_TYPE_QEC

<p>
LUA_MESSAGE_TYPE_RELQ

<p>
LUA_MESSAGE_TYPE_RTR

<p>
LUA_MESSAGE_TYPE_SBI

<p>
LUA_MESSAGE_TYPE_SIGNAL

<p>
LUA_MESSAGE_TYPE_STSN


<p>
The SLI receives and responds to the BIND and STSN requests through the LUA interface extension routines.

<p>
LU-DATA, LUSTAT_LU, LUSTAT_SSCP, and SSCP_DATA are not SNA commands.
</dd>
<dt>
<b>lua_flag2</b></dt>
<dd>
Returned parameter. Contains flags for messages returned by LUA. Returned by <a href="luac03_8fmp.htm"><b>RUI_BID</b></a>, <a href="luac03_7dwh.htm"><b>RUI_READ</b></a>, <b>RUI_WRITE</b>, <b>SLI_BID</b>, <b>SLI_RECEIVE</b>, and <a href="luac04_2lr5.htm"><b>SLI_SEND</b></a>. Its subparameters are as follows:
<dl>
<dt>
<b>lua_flag2.bid_enable</b></dt>
<dd>
Indicates that <b>RUI_BID</b> was successfully re-enabled if set to 1.</dd>
<dt>
<b>lua_flag2.async</b></dt>
<dd>
Indicates that the LUA interface verb completed asynchronously if set to 1.</dd>
<dt>
<b>lua_flag2.sscp_exp </b></dt>
<dd>
Indicates SSCP expedited flow if set to 1.</dd>
<dt>
<b>lua_flag2.sscp_norm</b></dt>
<dd>
Indicates SSCP normal flow if set to 1.</dd>
<dt>
<b>lua_flag2.lu_exp</b></dt>
<dd>
Indicates LU expedited flow if set to 1.</dd>
<dt>
<b>lua_flag2.lu_norm</b></dt>
<dd>
Indicates LU normal flow if set to 1.
</dd>
</dl>
</dd>
<dt>
<b>lua_resv56</b></dt>
<dd>
Not used by <b>SLI_RECEIVE</b> and should be set to zero.</dd>
<dt>
<b>lua_encr_decr_option</b></dt>
<dd>
Not used by <b>SLI_RECEIVE</b> and should be set to zero.
</dd>
</dl>
<h4>Return Codes</h4>
<dl>
<dt>
LUA_OK</dt>
<dd>
Primary return code; the verb executed successfully.
<dl>
<dt>
LUA_SEC_OK</dt>
<dd>
Secondary return code; no additional information exists for LUA_OK.
</dd>
</dl>
</dd>
<dt>
LUA_PARAMETER_CHECK</dt>
<dd>
Primary return code; the verb did not execute because of a parameter error.
<dl>
<dt>
LUA_INVALID_LUNAME</dt>
<dd>
Secondary return code; an invalid <b>lua_luname</b> was specified.</dd>
<dt>
LUA_BAD_SESSION_ID</dt>
<dd>
Secondary return code; an invalid value for <b>lua_sid</b> was specified in the VCB.</dd>
<dt>
LUA_BAD_DATA_PTR</dt>
<dd>
Secondary return code; the <b>lua_data_ptr</b> parameter either does not contain a valid pointer or does not point to a read/write segment and supplied data is required.</dd>
<dt>
LUA_RESERVED_FIELD_NOT_ZERO</dt>
<dd>
Secondary return code; a reserved parameter for the verb just issued is not set to zero.</dd>
<dt>
LUA_INVALID_POST_HANDLE</dt>
<dd>
Secondary return code; for a Windows NT or Windows 95 system using events as the asynchronous posting method, the Windows LUA VCB does not contain a valid event handle.
<p>
For the Windows version 3.<i>x</i> system, the LUA VCB does not contain the valid procedure address returned by the <b>MakeProcInstance</b> command.

<p>
For OS/2, the LUA VCB does not contain a valid semaphore or queue handle, which is needed when a verb completes asynchronously.
</dd>
<dt>
LUA_BID_VERB_SEGMENT_ERROR</dt>
<dd>
Secondary return code; the buffer with the <a href="luac04_5z8h.htm"><b>SLI_BID</b></a> VCB was released before the <b>SLI_RECEIVE</b> with <b>lua_flag1.bid_enable</b> set to 1 was issued.</dd>
<dt>
LUA_NO_PREVIOUS_BID_ENABLED</dt>
<dd>
Secondary return code; <b>SLI_BID</b> was not issued prior to issuing <b>SLI_RECEIVE</b> with <b>lua_flag1.bid_enable</b>.</dd>
<dt>
LUA_BID_ALREADY_ENABLED</dt>
<dd>
Secondary return code; <b>SLI_RECEIVE</b> was issued with <b>lua_flag1.bid_enable</b> when <b>SLI_BID</b> was already active.</dd>
<dt>
LUA_INVALID_FLOW</dt>
<dd>
Secondary return code; the <b>lua_flag1</b> flow flags were set incorrectly when a verb was issued:
<table cellspacing=4 cols=1>
<tr valign=top>
<td width=100%><font face="Symbol">·</font>&nbsp;&nbsp;&nbsp;&nbsp;When issuing <a href="luac04_2lr5.htm"><b>SLI_SEND</b></a> to send an SNA response, set only one <b>lua_flag1 </b>flow flag.</td>
</tr>
<tr valign=top>
<td width=100%><font face="Symbol">·</font>&nbsp;&nbsp;&nbsp;&nbsp;When issuing <b>SLI_RECEIVE</b>, set at least one <b>lua_flag1</b> flow flag.</td>
</tr>
</table><br>

</dd>
<dt>
LUA_VERB_LENGTH_INVALID</dt>
<dd>
Secondary return code; an LUA verb was issued with a value for <b>lua_verb_length</b> unexpected by LUA.
</dd>
</dl>
</dd>
<dt>
LUA_STATE_CHECK</dt>
<dd>
Primary return code; the verb did not execute because it was issued in an invalid state.
<dl>
<dt>
LUA_NO_SLI_SESSION</dt>
<dd>
Secondary return code; a session was not open or was down due to an <a href="luac04_7sf5.htm"><b>SLI_CLOSE</b></a> or session failure when a command was issued.</dd>
<dt>
LUA_RECEIVE_ON_FLOW_PENDING</dt>
<dd>
Secondary return code; an <b>SLI_RECEIVE</b> was still outstanding when this application issued another <b>SLI_RECEIVE</b> for an SNA flow.
</dd>
</dl>
</dd>
<dt>
LUA_SESSION_FAILURE</dt>
<dd>
Primary return code; an error condition, specified in the secondary return code, caused the session to fail.
<dl>
<dt>
LUA_RUI_WRITE_FAILURE</dt>
<dd>
Secondary return code; an unexpected error was posted to the SLI by <a href="luac03_7uap.htm"><b>RUI_WRITE</b></a>.</dd>
<dt>
LUA_RECEIVED_UNBIND</dt>
<dd>
Secondary return code; the primary LU sent an SNA UNBIND command to the LUA interface when a session was active. As a result, the session was stopped.</dd>
<dt>
LUA_SLI_LOGIC_ERROR</dt>
<dd>
Secondary return code; the LUA interface found an internal error in logic.</dd>
<dt>
LUA_NO_RUI_SESSION</dt>
<dd>
Secondary return code; no session has been initialized for the LUA verb issued or some verb other than <a href="luac04_7bxd.htm"><b>SLI_OPEN</b></a> was issued before the session was initialized.</dd>
<dt>
LUA_MODE_INCONSISTENCY</dt>
<dd>
Secondary return code; performing this function is not allowed by the current status. The request sent to the half-session component was not executed even though it was understood and supported. This SNA sense code is also an exception request sense code.</dd>
<dt>
LUA_RECEIVER_IN_TRANSMIT_MODE</dt>
<dd>
Secondary return code; either resources needed to handle normal flow data were not available or the state of the half-duplex contention was not received when a normal-flow request was received. The result is a race condition. This SNA sense code is also an exception request sense code.</dd>
<dt>
LUA_LU_COMPONENT_DISCONNECTED</dt>
<dd>
Secondary return code; an LU component is unavailable because it is not connected properly. Make sure that the power is on.</dd>
<dt>
LUA_FUNCTION_NOT_SUPPORTED</dt>
<dd>
Secondary return code; LUA does not support the requested function. A control character, an RU parameter, or a formatted request code may have specified the function. Specific sense code information is in bytes 2 and 3.</dd>
<dt>
LUA_CHAINING_ERROR</dt>
<dd>
Secondary return code; the sequence of the chain indicator settings is in error. An invalid request header or request unit for the receiver's current session control or data flow control state was found. Delivery to the half-session component was prevented.</dd>
<dt>
LUA_BRACKET</dt>
<dd>
Secondary return code; the sender failed to enforce the session bracket rules. Note that contention and race conditions are exempt from this error. An invalid request header or request unit for the receiver's current session control or data flow control state was found. Delivery to the half-session component was prevented.</dd>
<dt>
LUA_DIRECTION</dt>
<dd>
Secondary return code; while the half-duplex flip-flop state was NOT_RECEIVE, a request for normal flow was received. An invalid request header or request unit for the receiver's current session control or data flow control state was found. Delivery to the half-session component was prevented.</dd>
<dt>
LUA_DATA_TRAFFIC_QUIESCED</dt>
<dd>
Secondary return code; a DFC or FMD request was received from a half-session that sent either a SHUTC command or QC command, and the DFC or FMD request has not responded to a RELQ command. An invalid request header or request unit for the receiver's current session control or data flow control state was found. Delivery to the half-session component was prevented.</dd>
<dt>
LUA_NO_BEGIN_BRACKET</dt>
<dd>
Secondary return code; the receiver has already sent a positive response to a BIS command when a BID or an FMD request specifying BBI=BB was received. An invalid request header or request unit for the received current session control or data flow control state was found. Delivery to the half-session component was prevented.</dd>
<dt>
LUA_IMMEDIATE_REQUEST_MODE_ERROR</dt>
<dd>
Secondary return code; the request violated the immediate request mode protocol. An invalid header request or request unit for the received current session control or data flow control state was found. Delivery to the half-session component was prevented.</dd>
<dt>
LUA_QUEUED_RESPONSE_ERROR</dt>
<dd>
Secondary return code; the request violated the queued response protocol. An invalid header request or request unit for the received current session control or data flow control state was found. Delivery to the half-session component was prevented.</dd>
<dt>
LUA_ERP_SYNC_EVENT_ERROR</dt>
<dd>
Secondary return code; a violation of the ERP synchronous event protocol occurred. An invalid header request or request unit for the received current session control or data flow control state was found. Delivery to the half-session component was prevented.</dd>
<dt>
LUA_RSP_CORRELATION_ERROR</dt>
<dd>
Secondary return code; a response was sent that does not correspond to a previously received request or a response was received that does not correspond to a previously sent request.</dd>
<dt>
LUA_RSP_PROTOCOL_ERROR</dt>
<dd>
Secondary return code; a violation of the response protocol was found in the response received from the primary half-session.</dd>
<dt>
LUA_BB_NOT_ALLOWED</dt>
<dd>
Secondary return code; the begin bracket indicator was incorrectly specified. The BIND options chosen previously or the architectural rules were violated by the request header parameter values. Delivery to the half-session component was prevented. The errors are not dependent on the current session state. The sender's failure to enforce session rules may have caused the errors.</dd>
<dt>
LUA_EB_NOT ALLOWED</dt>
<dd>
Secondary return code; the end bracket indicator was incorrectly specified. The BIND options chosen previously or the architectural rules were violated by the request header parameter values. Delivery to the half-session component was prevented. The errors are not dependent on the current session state. The sender's failure to enforce session rules may have caused the errors.</dd>
<dt>
LUA_EXCEPTION_RSP_NOT_ALLOWED</dt>
<dd>
Secondary return code; when an exception response was not allowed, one was requested. The BIND options chosen previously or the architectural rules were violated by the request header parameter values. Delivery to the half-session component was prevented. The errors are not dependent on the current session state. The sender's failure to enforce session rules may have caused the errors.</dd>
<dt>
LUA_DEFINITE_RSP_NOT_ALLOWED</dt>
<dd>
Secondary return code; when a definite response was not allowed, one was requested. The BIND options chosen previously or the architectural rules were violated by the request header parameter values. Delivery to the half-session component was prevented. The errors are not dependent on the current session state. The sender's failure to enforce session rules may have caused the errors.</dd>
<dt>
LUA_CD_NOT_ALLOWED</dt>
<dd>
Secondary return code; the change-direction indicator was incorrectly specified. The BIND options chosen previously or the architectural rules were violated by the request header parameter values. Delivery to the half-session component was prevented. The errors are not dependent on the current session state. The sender's failure to enforce session rules may have caused the errors.</dd>
<dt>
LUA_NO_RESPONSE_NOT_ALLOWED</dt>
<dd>
Secondary return code; a request other than an EXR contained a NO RESPONSE. The BIND options chosen previously or the architectural rules were violated by the request header parameter values. Delivery to the half-session component was prevented. The errors are not dependent on the current session state. The sender's failure to enforce session rules may have caused the errors.</dd>
<dt>
LUA_CHAINING_NOT_SUPPORTED</dt>
<dd>
Secondary return code; the chaining indicators were incorrectly specified. The BIND options chosen previously or the architectural rules were violated by the request header parameter values. Delivery to the half-session component was prevented. The errors are not dependent on the current session state. The sender's failure to enforce session rules may have caused the errors.</dd>
<dt>
LUA_BRACKETS_NOT_SUPPORTED</dt>
<dd>
Secondary return code; the bracket indicators were incorrectly specified. The BIND options chosen previously or the architectural rules were violated by the request header parameter values. Delivery to the half-session component was prevented. The errors are not dependent on the current session state. The sender's failure to enforce session rules may have caused the errors.</dd>
<dt>
LUA_CD_NOT_SUPPORTED</dt>
<dd>
Secondary return code; the change-direction indicator was set, but LUA does not support change-direction for this situation. The BIND options chosen previously or the architectural rules were violated by the request header parameter values. Delivery to the half-session component was prevented. The errors are not dependent on the current session state. The sender's failure to enforce session rules may have caused the errors.</dd>
<dt>
LUA_INCORRECT_USE_OF_FI</dt>
<dd>
Secondary return code; the format indicator was incorrectly specified. The BIND options chosen previously or the architectural rules were violated by the request header parameter values. Delivery to the half-session component was prevented. The errors are not dependent on the current session state. The sender's failure to enforce session rules may have caused the errors.</dd>
<dt>
LUA_ALTERNATE_CODE_NOT_SUPPORTED</dt>
<dd>
Secondary return code; the code selection indicator was set, but LUA does not support code selection for this session. The BIND options chosen previously or the architectural rules were violated by the request header parameter values. Delivery to the half-session component was prevented. The errors are not dependent on the current session state. The sender's failure to enforce session rules may have caused the errors.</dd>
<dt>
LUA_INCORRECT_RU_CATEGORY</dt>
<dd>
Secondary return code; the request unit category indicator was incorrectly specified. The BIND options chosen previously or the architectural rules were violated by the request header parameter values. Delivery to the half-session component was prevented. The errors are not dependent on the current session state. The sender's failure to enforce session rules may have caused the errors.</dd>
<dt>
LUA_INCORRECT_REQUEST_CODE</dt>
<dd>
Secondary return code; the request code was incorrectly specified. The BIND options chosen previously or the architectural rules were violated by the request header parameter values. Delivery to the half-session component was prevented. The errors are not dependent on the current session state. The sender's failure to enforce session rules may have caused the errors.</dd>
<dt>
LUA_INCORRECT_SPEC_OF_SDI_RTI</dt>
<dd>
Secondary return code; the SDI and the RTI were not specified correctly on a response. The BIND options chosen previously or the architectural rules were violated by the request header parameter values. Delivery to the half-session component was prevented. The errors are not dependent on the current session state. The sender's failure to enforce session rules may have caused the errors.</dd>
<dt>
LUA_INCORRECT_DR1I_DR2I_ERI</dt>
<dd>
Secondary return code; the DR1I, the DR2I, and the ERI were specified incorrectly. The BIND options chosen previously or the architectural rules were violated by the request header parameter values. Delivery to the half-session component was prevented. The errors are not dependent on the current session state. The sender's failure to enforce session rules may have caused the errors.</dd>
<dt>
LUA_INCORRECT_USE_OF_QRI</dt>
<dd>
Secondary return code; the queued response indicator was incorrectly specified. The BIND options chosen previously or the architectural rules were violated by the request header parameter values. Delivery to the half-session component was prevented. The errors are not dependent on the current session state. The sender's failure to enforce session rules may have caused the errors.</dd>
<dt>
LUA_INCORRECT_USE_OF_EDI</dt>
<dd>
Secondary return code; the EDI was incorrectly specified. The BIND options chosen previously or the architectural rules were violated by the request header parameter values. Delivery to the half-session component was prevented. The errors are not dependent on the current session state. The sender's failure to enforce session rules may have caused the errors.</dd>
<dt>
LUA_INCORRECT_USE_OF_PDI</dt>
<dd>
Secondary return code; the PDI was incorrectly specified. The BIND options chosen previously or the architectural rules were violated by the request header parameter values. Delivery to the half-session component was prevented. The errors are not dependent on the current session state. The sender's failure to enforce session rules may have caused the errors.
</dd>
</dl>
</dd>
<dt>
LUA_UNSUCCESSFUL</dt>
<dd>
Primary return code; the verb record supplied was valid but the verb did not complete successfully.
<dl>
<dt>
LUA_DATA_TRUNCATED</dt>
<dd>
Secondary return code; the data was truncated because the data received was longer than the buffer length specified in <b>lua_max_length</b>.</dd>
<dt>
LUA_DATA_SEGMENT_LENGTH_ERROR</dt>
<dd>
Secondary return code; one of the following has occurred:
<table cellspacing=4 cols=1>
<tr valign=top>
<td width=100%><font face="Symbol">·</font>&nbsp;&nbsp;&nbsp;&nbsp;The supplied data segment for <b>SLI_RECEIVE</b> or <a href="luac04_2lr5.htm"><b>SLI_SEND</b></a> is not a read/write data segment as required.</td>
</tr>
<tr valign=top>
<td width=100%><font face="Symbol">·</font>&nbsp;&nbsp;&nbsp;&nbsp;The supplied data segment for <b>SLI_RECEIVE</b> is not as long as that provided in <b>lua_max_length</b>.</td>
</tr>
<tr valign=top>
<td width=100%><font face="Symbol">·</font>&nbsp;&nbsp;&nbsp;&nbsp;The supplied data segment for <b>SLI_SEND</b> is not as long as that provided in <b>lua_data_length</b>.</td>
</tr>
</table><br>

</dd>
<dt>
LUA_NO_DATA</dt>
<dd>
Secondary return code; no data was available to read when <b>SLI_RECEIVE</b> containing a no wait parameter was issued.</dd>
<dt>
LUA_VERB_RECORD_SPANS_SEGMENTS</dt>
<dd>
Secondary return code; the LUA VCB length parameter plus the segment offset is beyond the segment end.</dd>
<dt>
LUA_NOT_ACTIVE</dt>
<dd>
Secondary return code; LUA was not active within SNA Server when an LUA verb was issued.</dd>
<dt>
LUA_NOT_READY</dt>
<dd>
Secondary return code; one of the following has caused the SLI session to be temporarily suspended:
<table cellspacing=4 cols=1>
<tr valign=top>
<td width=100%><font face="Symbol">·</font>&nbsp;&nbsp;&nbsp;&nbsp;An SNA UNBIND type 0x02 command was received, which indicates a new BIND is coming. If the UNBIND type 0x02 is received after the beginning <a href="luac04_7bxd.htm"><b>SLI_OPEN</b></a> is complete, the session is suspended until a BIND, optional CRV and STSN, and SDT flows are received. These routines are re-entrant because they have to be called again. The session resumes after the SLI processes the SDT command. If the UNBIND type 0x02 is received while the <b>SLI_OPEN</b> is still processing, the primary return code is LUA_SESSION_FAILURE, not LUA_STATUS.</td>
</tr>
<tr valign=top>
<td width=100%><font face="Symbol">·</font>&nbsp;&nbsp;&nbsp;&nbsp;The receipt of an SNA CLEAR caused the suspension. Receipt of an SNA SDT will cause the session to resume.</td>
</tr>
</table><br>

</dd>
<dt>
LUA_SLI_LOGIC_ERROR</dt>
<dd>
Secondary return code; the LUA interface found an internal error in logic.</dd>
<dt>
LUA_INVALID_PROCESS</dt>
<dd>
Secondary return code; the session for which an LUA verb was issued is unavailable because another OS/2 process owns the session.</dd>
<dt>
LUA_LU_INOPERATIVE</dt>
<dd>
Secondary return code; a severe error occurred while the LUA was attempting to stop the session. This LU is unavailable for any LUA requests until an ACTLU is received from the host.</dd>
<dt>
LUA_RECEIVE_CORRELATION_TABLE_FULL</dt>
<dd>
Secondary return code; the session receive correlation table for the flow requested reached its capacity.
</dd>
</dl>
</dd>
<dt>
LUA_NEGATIVE_RESPONSE</dt>
<dd>
Primary return code; either the LUA sent a negative response to a message received from the primary LU because an error was found in the message, or the application responded negatively to a chain for which the end-of-chain has arrived.
<dl>
<dt>
LUA_MODE_INCONSISTENCY</dt>
<dd>
Secondary return code; performing this function is not allowed by the current status. The request sent to the half-session component was not executed even though it was understood and supported. This SNA sense code is also an exception request sense code.</dd>
<dt>
LUA_FUNCTION_NOT_SUPPORTED</dt>
<dd>
Secondary return code; the LUA does not support the requested function. A control character, an RU parameter, or a formatted request code may have specified the function. Specific sense code information is in bytes 2 and 3.</dd>
<dt>
LUA_DATA_TRAFFIC_RESET</dt>
<dd>
Secondary return code; a half-session of an active session but with inactive data traffic received a normal flow DFC or FMD request. An invalid request header or request unit for the receiver's current session control or data flow control state was found. Delivery to the half-session component was prevented.</dd>
<dt>
LUA_DATA_TRAFFIC_NOT_RESET</dt>
<dd>
Secondary return code; while the data traffic state was not reset, the session control request was received. An invalid request header or request unit for the received current session control or data flow control state was found. Delivery to the half-session component was prevented.</dd>
<dt>
LUA_SC_PROTOCOL_VIOLATION</dt>
<dd>
Secondary return code; a violation of SC protocol occurred. A request (that is permitted only after an SC request and a positive response to that request have been successfully exchanged) was received before the required exchange. Byte 4 of the sense data contains the request code. No user data exists for this sense code. An invalid header request or request unit for the received current session control or data flow control state was found. Delivery to the half-session component was prevented.</dd>
<dt>
LUA_INVALID_SC_OR_NC_RH</dt>
<dd>
Secondary return code; the RH of an SC or NC request was invalid.</dd>
<dt>
LUA_PACING_NOT_SUPPORTED</dt>
<dd>
Secondary return code; the request contained a pacing indicator when support of pacing for this session does not exist for the receiving half-session or boundary function half-session. The BIND options chosen previously or the architectural rules were violated by the request header parameter values. Delivery to the half-session component was prevented. The errors are not dependent on the current session state. The sender's failure to enforce session rules may have caused the errors.</dd>
<dt>
LUA_NAU_INOPERATIVE</dt>
<dd>
Secondary return code; the network addressable unit is not able to process responses or requests. Delivery to the receiver could not take place for one of the following reasons:
<table cellspacing=4 cols=1>
<tr valign=top>
<td width=100%><font face="Symbol">·</font>&nbsp;&nbsp;&nbsp;&nbsp;A path information unit error</td>
</tr>
<tr valign=top>
<td width=100%><font face="Symbol">·</font>&nbsp;&nbsp;&nbsp;&nbsp;A path outage</td>
</tr>
<tr valign=top>
<td width=100%><font face="Symbol">·</font>&nbsp;&nbsp;&nbsp;&nbsp;An invalid sequence of requests for activation</td>
</tr>
</table><br>


<p>
If a path error is received during an active session, it usually means there is no longer a valid path to the session partner.

</dd>
</dl>
</dd>
<dt>
LUA_CANCELED</dt>
<dd>
Primary return code; the secondary return code gives the reason for canceling the command.
<dl>
<dt>
LUA_PURGED</dt>
<dd>
Secondary return code; <a href="luac04_75i9.htm"><b>SLI_PURGE</b></a> was issued and canceled <b>SLI_RECEIVE</b>.</dd>
<dt>
LUA_NO_SLI_SESSION</dt>
<dd>
Secondary return code; a session was not open or was down due to an <a href="luac04_7sf5.htm"><b>SLI_CLOSE</b></a> or session failure when a command was issued.</dd>
<dt>
LUA_CANCEL_COMMAND_RECEIVED</dt>
<dd>
Secondary return code; the host sent an SNA CANCEL command to cancel the data chain currently being received by <b>SLI_RECEIVE</b>.</dd>
<dt>
LUA_TERMINATED</dt>
<dd>
Secondary return code; the session was terminated when a verb was pending. The verb process has been canceled.
</dd>
</dl>
</dd>
<dt>
LUA_IN_PROGRESS</dt>
<dd>
Primary return code; an asynchronous command was received but is not completed.</dd>
<dt>
LUA_STATUS</dt>
<dd>
Primary return code; the secondary return code contains SLI status information for the application.
<dl>
<dt>
LUA_READY</dt>
<dd>
Secondary return code; following a NOT READY status, this status is issued to notify you that the SLI is ready to process commands.</dd>
<dt>
LUA_NOT_READY</dt>
<dd>
Secondary return code; the SLI session is temporarily suspended for the following reason:
<table cellspacing=4 cols=1>
<tr valign=top>
<td width=100%><font face="Symbol">·</font>&nbsp;&nbsp;&nbsp;&nbsp;An SNA UNBIND type 0x02 command was received, which means a new BIND is coming. If the UNBIND type 0x02 is received after the beginning <a href="luac04_7bxd.htm"><b>SLI_OPEN</b></a> is complete, the session is suspended until a BIND, optional CRV and STSN, and SDT flows are received. These routines are re-entrant because they have to be called again. The session resumes after the SLI processes the SDT command. If the UNBIND type 0x02 is received while the <b>SLI_OPEN</b> is still processing, the primary return code is session-failure, not status.</td>
</tr>
<tr valign=top>
<td width=100%><font face="Symbol">·</font>&nbsp;&nbsp;&nbsp;&nbsp;The receipt of an SNA CLEAR caused the suspension. Receipt of an SNA SDT will cause the session to resume.</td>
</tr>
</table><br>

</dd>
<dt>
LUA_INIT_COMPLETE</dt>
<dd>
Secondary return code; the LUA interface initialized the session while <a href="luac04_7bxd.htm"><b>SLI_OPEN</b></a> was processing. LUA applications that issue <b>SLI_OPEN</b> with <b>lua_open_type_prim_sscp</b> receive this status on <b>SLI_RECEIVE</b> or <a href="luac04_5z8h.htm"><b>SLI_BID</b></a>.</dd>
<dt>
LUA_SESSION_END_REQUESTED</dt>
<dd>
Secondary return code; the LUA interface received an SNA SHUTD from the host, which means the host is ready to shut down the session.
</dd>
</dl>
</dd>
<dt>
LUA_COMM_SUBSYSTEM_ABENDED</dt>
<dd>
Primary return code; indicates one of the following conditions:
<ul>
<li>
The node used by this conversation encountered an ABEND.</li>
<li>
The connection between the TP and the PU 2.1 node has been broken (a LAN error).</li>
<li>
The SnaBase at the TP's computer encountered an ABEND.</li>
</ul>
</dd>
<dt>
LUA_COMM_SUBSYSTEM_NOT_LOADED</dt>
<dd>
Primary return code; a required component could not be loaded or terminated while processing the verb. Thus, communication could not take place. Contact the system administrator for corrective action.</dd>
<dt>
LUA_INVALID_VERB_SEGMENT</dt>
<dd>
Primary return code; the VCB extended beyond the end of the data segment.</dd>
<dt>
LUA_UNEXPECTED_DOS_ERROR</dt>
<dd>
Primary return code; after issuing an operating system call, an unexpected operating system return code was received and is specified in the secondary return code.</dd>
<dt>
LUA_STACK_TOO_SMALL</dt>
<dd>
Primary return code; the stack size of the application is too small to execute the verb. Increase the stack size of your application.</dd>
<dt>
LUA_INVALID_VERB</dt>
<dd>
Primary return code; either the verb code or the operation code, or both, is invalid. The verb did not execute.
</dd>
</dl>
<h4>Remarks</h4>
<p>
<b>SLI_RECEIVE</b> receives responses, SNA commands, and request unit data from the host. <b>SLI_RECEIVE</b> also provides the status of the session to the Windows LUA application. An <a href="luac04_7bxd.htm"><b>SLI_OPEN</b></a> request must complete before <b>SLI_RECEIVE</b> can be issued. However, if <b>SLI_OPEN</b> is issued with <b>lua_init_type</b> set to LUA_INIT_TYPE_PRIM_SSCP, an <b>SLI_RECEIVE</b> over the SSCP normal flow can be issued as soon as <b>SLI_OPEN</b> returns an IN_PROGRESS.</p>
<p>
Data is received by the application in one of four session flows. The four session flows, from highest to lowest priority are:
<ul>
<li>
SSCP expedited</li>
<li>
LU expedited</li>
<li>
SSCP normal</li>
<li>
LU normal</li>
</ul>
<p>
The data flow type that <b>SLI_RECEIVE</b> will process is specified in <b>lua_flag1</b>. The application can also specify whether it wants to look at more than one type of data flow. When multiple flow bits are set, the highest priority is received first. When <b>SLI_RECEIVE</b> completes processing, <b>lua_flag2</b> indicates the specific type of flow for which data has been received by the Windows LUA application.</p>
<p>
If <a href="luac04_5z8h.htm"><b>SLI_BID</b></a> successfully completes before <b>SLI_RECEIVE</b> is issued, the Windows LUA interface can be instructed to reuse the last <b>SLI_BID</b> verb's VCB. To do this, issue <b>SLI_RECEIVE</b> with <b>lua_flag1.bid_enable</b> set to 1.</p>
<p>
When using <b>lua_flag1.bid_enable</b>, the <b>SLI_BID</b> storage must not be freed because the last <b>SLI_BID</b> verb's VCB is used. Also, when using <b>lua_flag1.bid_enable</b>, the successful completion of <b>SLI_BID</b> will be posted.</p>
<p>
If <b>SLI_RECEIVE</b> is issued with <b>lua_flag1.nowait</b> when no data is available to receive, LUA_NO_DATA will be the secondary return code set by the Windows LUA interface.</p>
<h4>Session Status Return Values</h4>
<p>
If LUA_STATUS is the primary return code, the secondary return code can be one of the following:</p>
<p class=indent1>
LUA_READY</p>
<p class=indent1>
LUA_NOT_READY</p>
<p class=indent1>
LUA_SESSION_END_REQUESTED</p>
<p class=indent1>
LUA_INIT_COMPLETE</p>
<p>
In addition, if LUA_STATUS is the primary return code, the following parameters are used:</p>
<p class=indent1>
<b>lua_sec_rc</b></p>
<p class=indent1>
<b>lua_sid</b></p>
<p>
LUA_READY is returned after an LUA_NOT_READY status and indicates that the SLI is again ready to perform all commands.</p>
<p>
LUA_NOT_READY indicates that the SLI session is suspended because the SLI has received either an SNA CLEAR command or an SNA UNBIND command with an 0x02 UNBIND type (UNBIND with BIND forthcoming). Depending on what caused the suspension, the session can be reactivated as follows:
<ul>
<li>
When the suspension is caused by an SNA CLEAR, receiving an SNA SDT reactivates the session.</li>
<li>
When an SNA UNBIND type BIND forthcoming causes suspension of the session and the <a href="luac04_7bxd.htm"><b>SLI_OPEN</b></a> that opened the session is completed, the session is suspended until the SLI receives a BIND and SDT command. The session can also optionally receive an STSN command. As a result, user-supplied routines issued with the initial <b>SLI_OPEN</b> must be re-entered because they will be recalled.</li>
</ul>
<p>
The application can send SSCP data after a CLEAR or UNBIND type BIND forthcoming arrives and before the NOT_READY status is read. The application can send and receive SSCP data after reading a NOT_READY.</p>
<p>
When an SNA UNBIND type BIND forthcoming arrives before completion of the <b>SLI_OPEN</b> that opened the session, LUA_SESSION_FAILURE (not LUA_STATUS) is the primary return code.</p>
<p>
LUA_SESSION_END_REQUESTED indicates that the application received an SNA SHUTD from the host. The Windows LUA application should issue <a href="luac04_7sf5.htm"><b>SLI_CLOSE</b></a> to close the session when convenient.</p>
<p>
LUA_INIT_COMPLETE is returned only when <b>lua_init_type</b> for <a href="luac04_7bxd.htm"><b>SLI_OPEN</b></a> is LUA_INIT_TYPE_PRIM_SSCP. The status means that the <b>SLI_OPEN</b> has been processed sufficiently to allow SSCP data to now be sent or received.</p>
<h4>Exception Requests</h4>
<p>
If a host application request unit is converted into an EXR, sense data will be returned. When <a href="luac04_5z8h.htm"><b>SLI_BID</b></a> completes with the returned verb parameters set as shown, an EXR conversion occurs.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=42%>Member</th>
<th align=left width=58%>Set to</th>
</tr>
<tr valign=top>
<td width=42%><b>lua_prim_rc</b></td>
<td width=58%>OK (0x0000)</td>
</tr>
<tr valign=top>
<td width=42%><b>lua_sec_rc</b></td>
<td width=58%>OK (0x00000000)</td>
</tr>
<tr valign=top>
<td width=42%><b>lua_rh.rri</b></td>
<td width=58%>bit off (request unit)</td>
</tr>
<tr valign=top>
<td width=42%><b>lua_rh.sdi</b></td>
<td width=58%>bit on (includes sense data)</td>
</tr>
</table><br>
<p>
Of the seven bytes of data in <b>lua_peek_data</b>, bytes 0 through 3 define the error detected. The following table indicates possible sense data and the values of bytes 0 through 3.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=60%>Sense data</th>
<th align=left width=40%>Value of bytes 0–3</th>
</tr>
<tr valign=top>
<td width=60%>LUA_MODE_INCONSISTENCY</td>
<td width=40%>0x08090000</td>
</tr>
<tr valign=top>
<td width=60%>LUA_BRACKET_RACE_ERROR</td>
<td width=40%>0x080B0000</td>
</tr>
<tr valign=top>
<td width=60%>LUA_BB_REJECT_NO_RTR</td>
<td width=40%>0x08130000</td>
</tr>
<tr valign=top>
<td width=60%>LUA_RECEIVER_IN_TRANSMIT_MODE</td>
<td width=40%>0x081B0000</td>
</tr>
<tr valign=top>
<td width=60%>LUA_CRYPTOGRAPHY_FUNCTION_INOP</td>
<td width=40%>0x08480000</td>
</tr>
<tr valign=top>
<td width=60%>LUA_SYNC_EVENT_RESPONSE</td>
<td width=40%>0x10010000</td>
</tr>
<tr valign=top>
<td width=60%>LUA_RU_DATA_ERROR</td>
<td width=40%>0x10020000</td>
</tr>
<tr valign=top>
<td width=60%>LUA_RU_LENGTH_ERROR</td>
<td width=40%>0x10020000</td>
</tr>
<tr valign=top>
<td width=60%>LUA_INCORRECT_SEQUENCE_NUMBER</td>
<td width=40%>0x20010000</td>
</tr>
</table><br>
<p>
The information returned to bytes 3 through 6 in <b>lua_peek_data</b> is determined by the first three bytes of the initial request unit that caused the error.</p>
<h4>See Also</h4>
<p>
<a href="luac03_37z5.htm"><b>RUI_INIT</b></a>, <a href="luac03_4joh.htm"><b>RUI_PURGE</b></a>, <a href="luac03_7dwh.htm"><b>RUI_READ</b></a>, <a href="luac03_7uap.htm"><b>RUI_WRITE</b></a>, <a href="luac04_5z8h.htm"><b>SLI_BID</b></a>, <a href="luac04_7sf5.htm"><b>SLI_CLOSE</b></a>, <a href="luac04_7bxd.htm"><b>SLI_OPEN</b></a>, <a href="luac04_75i9.htm"><b>SLI_PURGE</b></a>, <a href="luac04_2lr5.htm"><b>SLI_SEND</b></a></p>
<p>&nbsp;</p></body>
</HTML>

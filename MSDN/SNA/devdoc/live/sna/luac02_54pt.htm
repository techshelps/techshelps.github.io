<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Windows NT and Windows 95 Considerations</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_sna_windows_nt_and_windows_95_considerations_lua"></a>Windows NT and Windows 95 Considerations</h2>
<p>
This section summarizes information for developing Win32® LUA applications for Microsoft® Windows NT® or Microsoft® Windows® 95.
<dl>
<dt>
<b>Byte ordering</b></dt>
<dd>
The values of constants defined in the WINLUA.H file are dependent on the byte ordering of the hardware used. Macros are used to set the constants to the correct value.
<p>
Currently, the include files in the Windows NT system use the i386, ALPHA, MIPS, and PPC macros to indicate the hardware. These same macros are used by Microsoft® SNA Server, along with the Win32 macro, to indicate the byte ordering needs. The macros must be defined in the application or on the command line when building the application.

<p>
For example, the primary return code of lua_parameter_check is defined to have a value of 0x0001. Depending on the environment, the constant LUA_PARAMETER_CHECK may or may not be 0x0001. Some formats define the value as it appears in memory; others define it as a 2-byte variable. Because it cannot be assumed that an application will always use provided constants rather than hardwired values, a macro can be defined to swap the bytes. The following example shows how the macro can be used:

<pre><code>#define LUA_PARAMETER_CHECK LUA_FLIPI (0X0001)
 </code></pre>
</dd>
<dt>
<b>Events</b></dt>
<dd>
To receive data asynchronously, an event handle is passed in the semaphore field of the VCB. This event must be in the nonsignaled state when passed to LUA, and the handle must have EVENT_MODIFY_STATE access to the event.</dd>
<dt>
<b>Library names</b></dt>
<dd>
In preparation for the coexistence of Win16 and Win32 API libraries on the same computer, the Win32 DLL names have been changed. Win32 stub DLL libraries using the old names are supplied with SNA Server so that older applications are still supported.
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>Old DLL names</th>
<th align=left width=52%>New DLL names</th>
</tr>
<tr valign=top>
<td width=48%>WINRUI.DLL</td>
<td width=52%>WINRUI32.DLL</td>
</tr>
<tr valign=top>
<td width=48%>WINSLI.DLL</td>
<td width=52%>WINSLI32.DLL</td>
</tr>
</table><br>


<p>
The old DLL names should be used for Win32-based applications that are required to run on SNA Server version 2.0. The new DLL names should be used for Win32-based applications that are intended to run only on SNA Server version 2.1 or later.

<p>
If you intend your Win32-based application to be used with SNA Server version 2.0, you should link with the libraries included with SNA Server version 2.0. Otherwise, use the new libraries provided with SNA Server version 2.1 or later.
</dd>
<dt>
<b>Load-time linking</b></dt>
<dd>
To be dynamically linked to LUA at load time, you must do one of the following at link time:
<ul>
<li>
Insert the following <b>IMPORTS</b> statements in the definition (.DEF) file used to link the application:<p>
(For RUI)
<pre><code>IMPORTS WINRUI.RUI
IMPORTS WINRUI WinRUI
IMPORTS WINRUI.WinRUIStartup
IMPORTS WINRUI.WinRUICleanup
 </code></pre>
<p>
(For SLI)
<pre><code>IMPORTS WINSLI.SLI
IMPORTS WINSLI.WinSLI
IMPORTS WINSLI.WinSLIStartup
IMPORTS WINSLI.WinSLICleanup
 </code></pre>
</li>
<li>
Link the application to WINRUI.LIB (for RUI) or WINSLI.LIB (for SLI), which contain the entry-point linkage information.</li>
</ul>
</dd>
<dt>
<b>Multiple threads</b></dt>
<dd>
An LUA application can have multiple threads that issue verbs. LUA for the Win32 system makes provisions for multithreaded Windows NT and Windows 95 processes. A process contains one or more threads of execution. All references to threads refer to actual threads in a multithreaded Windows NT or Windows 95 environment.</dd>
<dt>
<b>Packing</b></dt>
<dd>
For performance considerations, the VCBs are not packed. As a result, DWORDs are on DWORD boundaries, WORDs on WORDs, and BYTEs on BYTEs. This means, for example, that there is a 2-byte gap between the primary and secondary return codes. VCBs should be accessed using the structures provided.</dd>
<dt>
<b>Registering and deregistering applications</b></dt>
<dd>
All LUA applications for the Windows NT or Windows 95 system must call the Windows SNA extension <a href="luac05_0bs1.htm"><b>WinRUIStartup</b></a> or <a href="luac05_74pt.htm"><b>WinSLIStartup</b></a> at the beginning of the session to register the application and <a href="luac05_42zl.htm"><b>WinRUICleanup</b></a> or <a href="luac05_0vxd.htm"><b>WinSLICleanup</b></a> at the end of the session to deregister the application.</dd>
<dt>
<b>Restrictions on 3270-style LUs</b></dt>
<dd>
A Windows NT or Windows 95 process cannot access 3270-style LUs from both the Function Management Interface (FMI) and LUA APIs at the same time. However, the process can use the LUA APIs to access LUA LUs while using FMI APIs to access 3270-style LUs.</dd>
<dt>
<b>Run-time linking</b></dt>
<dd>
For an application to be dynamically linked to LUA at run time, it must issue the following calls:
<ul>
<li>
<b>LoadLibrary</b> to load the specified library module for Windows LUA. That is, WINRUI.DLL or WINRUI32.DLL (for RUI), and WINSLI.DLL or WINSLI32.DLL (for SLI).</li>
<li>
<b>GetProcAddress</b> to retrieve the address of the LUA function entry points exported by the DLL. For RUI, the function entry points are <a href="luac05_29b5.htm"><b>RUI</b></a>, <a href="luac05_5i8x.htm"><b>WinRUI</b></a>, <a href="luac05_0bs1.htm"><b>WinRUIStartup</b></a>, and <a href="luac05_42zl.htm"><b>WinRUICleanup</b></a>. For SLI, the function entry points are <a href="luac05_30gx.htm"><b>SLI</b></a>, <a href="luac05_69ep.htm"><b>WinSLI</b></a>, <a href="luac05_74pt.htm"><b>WinSLIStartup</b></a>, and <a href="luac05_0vxd.htm"><b>WinSLICleanup</b></a>.</li>
</ul>
</dd>
</dl>
<p>&nbsp;</p></body>
</HTML>

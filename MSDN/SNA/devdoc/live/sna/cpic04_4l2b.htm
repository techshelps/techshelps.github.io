<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WinCPICSetBlockingHook</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_sna_wincpicsetblockinghook_cpic"></a>WinCPICSetBlockingHook</h1>
<p>
The <b>WinCPICSetBlockingHook</b> function allows a Windows CPI-C implementation to block CPI-C function calls by means of a new function. This call is used by Microsoft® Windows® version 3.<i>x</i> applications to make blocking calls without blocking the rest of the system. By default in the Microsoft® Windows NT® and Windows 95 systems, blocking calls suspend the calling application's thread until the request is finished. Therefore, if a single-threaded application is targeted at both the Windows version 3.<i>x</i> system and the Windows NT and Windows 95 systems, and relies on this functionality, it should register a blocking hook even if the default hook will suffice.</p>
<p>
<b>FARPROC WINAPI WinCPICSetBlockingHook(</b></p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=96%><b>&nbsp;&nbsp;&nbsp;&nbsp;FARPROC </b><i>lpBlockFunc</i></td>
<td width=4%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=96%><b> &nbsp; );</b></td>
<td width=4%><pre></pre>
</td>
</tr>
</table><br>
<h4>Parameters</h4>
<dl>
<dt>
<i>lpBlockFunc</i></dt>
<dd>
Specifies the procedure instance address of the blocking function to be installed.
</dd>
</dl>
<h4>Return Values</h4>
<p>
The return value points to the procedure instance of the previously installed blocking function. The application or library that calls <b>WinCPICSetBlockingHook</b> should save this return value so that it can be restored if needed. (If nesting is not important, the application can simply discard the value returned by <b>WinCPICSetBlockingHook</b> and eventually use <a href="cpic04_0jhf.htm"><b>WinCPICUnhookBlockingHook</b></a> to restore the default mechanism.)</p>
<h4>Remarks</h4>
<p>
A Windows CPI-C implementation has a default mechanism by which blocking CPI-C functions are implemented. This function gives the application the ability to execute its own function at blocking time in place of the default function.</p>
<p>
The default blocking function is equivalent to:</p>
<pre><code>BOOL DefaultBlockingHook (void)  {
    MSG msg;
    /* get the next message if any */
    if ( PeekMessage (&amp;msg,0,0,PM_NOREMOVE)  )  {
        if ( msg.message = = WM_QUIT  )
            return FALSE;   // let app process WM_QUIT
        PeekMessage (&amp;msg,0,0,PM_REMOVE) ;
        TranslateMessage (&amp;msg) ;
        DispatchMessage (&amp;msg) ;
    }
    /* TRUE if no WM_QUIT received */
    return TRUE;
}
 </code></pre>
<p>
The <b>WinCPICSetBlockingHook</b> function is provided to support applications that require more complex message processing—for example, those employing the multiple document interface (MDI) model or applications with Menu accelerators (TranslateAccelerator).</p>
<p>
Blocking functions must return FALSE in response to a WM_QUIT message so Windows CPI-C can return control to the application to process the message and terminate gracefully. Otherwise, the function should return TRUE.</p>
<h4>See Also</h4>
<p>
<a href="cpic03_5uoz.htm"><b>Set_Processing_Mode</b></a>, <a href="cpic03_3kir.htm"><b>Specify_Windows_Handle</b></a></p>
<p>&nbsp;</p></body>
</HTML>

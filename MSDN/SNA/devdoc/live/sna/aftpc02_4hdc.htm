<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>aftp_local_dir_read</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_sna_aftp_local_dir_read_aftp"></a>aftp_local_dir_read</h1>
<p>
The <b>aftp_local_dir_read</b> call gets an individual directory entry from the AFTP client, based on the search parameters specified on the <a href="aftpc02_8d4g.htm"><b>aftp_local_dir_open</b></a> call. A connection to the AFTP server is not required before using this call. The <b>aftp_local_dir_open</b> call must be issued before listing the directory entries.</p>
<p>
<b>AFTP_ENTRY aftp_local_dir_read(<br>
IN AFTP_HANDLE_TYPE </b><i>connection_id</i><b>,<br>
IN unsigned char AFTP_PTR </b><i>dir_entry</i><b>,<br>
IN AFTP_LENGTH_TYPE </b><i>dir_entry_size</i><b>,<br>
OUT AFTP_LENGTH_TYPE AFTP_PTR </b><i>returned_length</i><b>,<br>
OUT AFTP_BOOLEAN_TYPE AFTP_PTR </b><i>no_more_entries</i><b>,<br>
OUT AFTP_RETURN_CODE_TYPE AFTP_PTR </b><i>return_code<br>
</i><b>);</b></p>
<h4>Parameters</h4>
<dl>
<dt>
<i>connection_id</i></dt>
<dd>
An AFTP connection object originally created with <a href="aftpc02_2nao.htm"><b>aftp_create</b></a>.</dd>
<dt>
<i>dir_entry</i></dt>
<dd>
Pointer to a buffer into which the procedure will write the directory entry.
<p>
Use the AFTP_FILE_NAME_SIZE constant to define the length of this buffer. Add 1 to the size if you want to be able to add a null terminator to the text in the buffer.
</dd>
<dt>
<i>dir_entry_size</i></dt>
<dd>
The size in bytes of the <i>dir_entry</i> buffer.</dd>
<dt>
<i>returned_length</i></dt>
<dd>
The number of bytes returned in the <i>dir_entry</i> parameter.</dd>
<dt>
<i>no_more_entries</i></dt>
<dd>
Whether or not an entry was returned on this call.
<p>
A value of zero indicates that there are more directory entries and that an entry was returned on this call.

<p>
A nonzero value indicates that there are no more directory entries and that no entry was returned on this call. The <i>returned_length</i> parameter is set to zero. Subsequent calls to <b>aftp_local_dir_read</b> will also result in <i>no_more_entries</i> being nonzero. To end the directory listing, your next call should be <a href="aftpc02_9re8.htm"><b>aftp_local_dir_close</b></a>.
</dd>
<dt>
<i>return_code</i></dt>
<dd>
The return code issued for this function. See <a href="aftpc03_5h0w.htm">AFTP Return Codes</a> for the list of possible return codes.
</dd>
</dl>
<h4>Example</h4>
<pre><code>{
    AFTP_HANDLE_TYPE              connection_id;
    AFTP_RETURN_CODE_TYPE         aftp_rc;
    unsigned char                 dir_entry[AFTP_FILE_NAME_SIZE+1];
    AFTP_LENGTH_TYPE              dir_entry_length;

    /* The value used for filespec will vary based on platform:
     *   VM common naming:       filespec="/a/foo*"
     *   VM native naming:       filespec="foo*.*.a"
     *   MVS PDS common naming:  filespec="/user.clist/foo*"
     *   MVS PDS native naming:  filespec="'user.clist(foo*)'"
     *   MVS sequential common:  filespec="/user.qual*.a*.**"
     *   MVS sequential native:  filespec="'user.qual*.a*.**'"
     */
    static unsigned char AFTP_PTR filespec = "/user.clist/foo*";

    unsigned char                 path[AFTP_FILE_NAME_SIZE+1];
    AFTP_LENGTH_TYPE              path_length;
    AFTP_BOOLEAN_TYPE             no_more_entries;

    /*
     * Before issuing the example call, you must have:
     *    a connection_id, use:  aftp_create()
     */

    /*
     * Open a new directory listing on the AFTP client. Both files and
     * directory names will be listed along with their attributes.
     */

    aftp_local_dir_open(
        connection_id,
        filespec,
        (AFTP_LENGTH_TYPE)strlen(filespec),
        AFTP_DIRECTORY | AFTP_FILE,
        AFTP_NATIVE_ATTRIBUTES,
        path,
        (AFTP_LENGTH_TYPE)sizeof(path)-1,
        &amp;path_length,
        &amp;aftp_rc);

    if (aftp_rc == AFTP_RC_OK) {
        path[path_length] = '\0';

        printf("Directory listing of %s.", path);

        do {
            /*
             * Read one directory entry from the AFTP client
             */

            aftp_local_dir_read(
                connection_id,
                dir_entry,
                (AFTP_LENGTH_TYPE)sizeof(dir_entry)-1,
                &amp;dir_entry_length,
                &amp;no_more_entries,
                &amp;aftp_rc);

            if (aftp_rc == AFTP_RC_OK &amp;&amp; no_more_entries == 0) {
                dir_entry[dir_entry_length] = '\0';
                printf("Local file: %s\n", dir_entry);
            }
            /*
             * Loop until we either run out of directory
             * entries or an error occurs.
             */

        } while (aftp_rc == AFTP_RC_OK &amp;&amp; no_more_entries == 0);

        /*
         * Terminate the directory listing by executing
         * a close.
         */

        aftp_local_dir_close(connection_id, &amp;aftp_rc);
        if (aftp_rc != AFTP_RC_OK) {
            fprintf(
                stderr,
                "Error closing local AFTP directory.\n");
        }
    }
    else {
        fprintf(stderr, "Error opening local AFTP directory.\n");
    }
}
 </code></pre>
<h4>Line Flows</h4>
<p>
None.</p>
<p>&nbsp;</p></body>
</HTML>

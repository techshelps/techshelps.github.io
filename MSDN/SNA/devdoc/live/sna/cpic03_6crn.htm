<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Request_To_Send</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_sna_request_to_send_cpic"></a>Request_To_Send</h1>
<p>
The <b>Request_To_Send</b> call (function name <b>cmrts</b>) notifies the partner program that the local program wants to send data.</p>
<pre><code><b>CM_ENTRY Request_To_Send(
  unsigned char FAR</b><i> *conversation_ID</i><b>,  </b>
<b>  CM_INT32 FAR</b><i> *return_code            </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>conversation_ID</i></dt>
<dd>
Supplied parameter. Specifies the identifier for the conversation. The value of this parameter was returned by <a href="cpic03_0jhf.htm"><b>Initialize_Conversation</b></a> or <a href="cpic03_70df.htm"><b>Accept_Conversation</b></a>.</dd>
<dt>
<i>return_code</i></dt>
<dd>
The code returned from this call. The valid return codes are listed below.
</dd>
</dl>
<h4>Return Codes</h4>
<dl>
<dt>
cm_ok</dt>
<dd>
Primary return code; the call executed successfully.</dd>
<dt>
cm_operation_not_accepted</dt>
<dd>
Primary return code; a previous operation on this conversation is incomplete.</dd>
<dt>
cm_operation_incomplete</dt>
<dd>
Primary return code; the operation has not completed (processing mode is nonblocking only) and is still in progress. The program can issue <a href="cpic03_6un7.htm"><b>Wait_For_Conversation</b></a> to await the completion of the operation, or <a href="cpic03_017n.htm"><b>Cancel_Conversation</b></a> to cancel the operation and conversation. If <a href="cpic03_3kir.htm"><b>Specify_Windows_Handle</b></a> has been called, the application should wait for notification by a Windows message and not call <b>Wait_For_Conversation</b>.</dd>
<dt>
cm_program_parameter_check</dt>
<dd>
Primary return code; the value specified by <i>conversation_ID</i> is invalid.</dd>
<dt>
cm_program_state_check</dt>
<dd>
Primary return code; the conversation is not in the RECEIVE, SEND, SEND_PENDING, CONFIRM, CONFIRM_SEND, or CONFIRM_DEALLOCATE state.</dd>
<dt>
cm_product_specific_error</dt>
<dd>
Primary return code; a product-specific error occurred and has been logged in the product's error log.
</dd>
</dl>
<h4>State Changes</h4>
<p>
The conversation can be in any of the following states: RECEIVE, SEND, SEND_PENDING, CONFIRM, CONFIRM_SEND, or CONFIRM_DEALLOCATE.</p>
<p>
There is no state change.</p>
<p>
In response to this request, the partner program can change the conversation to RECEIVE state by issuing one of the following calls:
<ul>
<li>
<a href="cpic03_3vhf.htm"><b>Receive</b></a> with receive type set to CM_RECEIVE_AND_WAIT</li>
<li>
<a href="cpic03_0ihv.htm"><b>Prepare_To_Receive</b></a></li>
<li>
<a href="cpic03_94ir.htm"><b>Send_Data</b></a> with send type set to CM_SEND_AND_PREP_TO_RECEIVE</li>
</ul>
<p>
The partner program can also ignore the request to send.</p>
<p>
The conversation state changes to SEND for the local program when the local program receives one of the following values through the <i>status_received</i> parameter of a subsequent <b>Receive</b> call:
<ul>
<li>
CM_SEND_RECEIVED</li>
<li>
CM_CONFIRM_SEND_RECEIVED and the local program replies with a <a href="cpic03_6c6b.htm"><b>Confirmed</b></a> call</li>
</ul>
<h4>Remarks</h4>
<p>
The request-to-send notification is received by the partner program through the <i>request_to_send_received</i> parameter of the following calls:</p>
<p class=indent1>
<a href="cpic03_6c6b.htm"><b>Confirmed</b></a></p>
<p class=indent1>
<a href="cpic03_3vhf.htm"><b>Receive</b></a></p>
<p class=indent1>
<a href="cpic03_94ir.htm"><b>Send_Data</b></a></p>
<p class=indent1>
<a href="cpic03_2j6r.htm"><b>Send_Error</b></a></p>
<p class=indent1>
<a href="cpic03_1z1f.htm"><b>Test_Request_To_Send_Received</b></a></p>
<p>
Request-to-send notification is sent to the partner program immediately; CPI-C does not wait until the send buffer fills up or is flushed. Consequently, the request-to-send notification can arrive out of sequence. For example, if the local program is in SEND state and issues the <a href="cpic03_0ihv.htm"><b>Prepare_To_Receive</b></a> call followed by the <b>Request_To_Send</b> call, the partner program, in RECEIVE state, can receive the request-to-send notification before it receives the send notification. For this reason, <i>request_to_send</i> can be reported to a program through the <a href="cpic03_3vhf.htm"><b>Receive</b></a> call.</p>
<p>
Upon receiving a request-to-send notification, the partner LU retains the notification until the partner issues a call that returns <i>request_to_send_received</i>. The LU keeps only one request-to-send notification per conversation. Thus the local program can issue more <b>Request_To_Send</b> calls than are explicitly handled by the partner TP.</p>
<p>&nbsp;</p></body>
</HTML>

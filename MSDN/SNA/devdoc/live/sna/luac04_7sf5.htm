<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SLI_CLOSE</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_sna_sli_close_lua"></a>SLI_CLOSE</h1>
<p>
The <b>SLI_CLOSE</b> verb ends a session opened with <a href="luac04_7bxd.htm"><b>SLI_OPEN</b></a>. The LU-LU and LU-SSCP resources are released.</p>
<p>
The following structure describes the <b>LUA_COMMON</b> member of the VCB used by <b>SLI_CLOSE</b>.</p>
<pre><code>struct LUA_COMMON {
    unsigned short   lua_verb;
    unsigned short   lua_verb_length;
    unsigned short   lua_prim_rc;
    unsigned long    lua_sec_rc;
    unsigned short   lua_opcode;
    unsigned long    lua_correlator;
    unsigned char    lua_luname[8];
    unsigned short   lua_extension_list_offset;
    unsigned short   lua_cobol_offset;
    unsigned long    lua_sid;
    unsigned short   lua_max_length;
    unsigned short   lua_data_length;
    char FAR *       lua_data_ptr;
    unsigned long    lua_post_handle;
    struct LUA_TH    lua_th;
    struct LUA_RH    lua_rh;
    struct LUA_FLAG1 lua_flag1;
    unsigned char    lua_message_type;
    struct LUA_FLAG2 lua_flag2;
    unsigned char    lua_resv56[7];
    unsigned char    lua_encr_decr_option;
};
 </code></pre>
<h4>Members</h4>
<dl>
<dt>
<b>lua_verb</b></dt>
<dd>
Supplied parameter. Contains the verb code, LUA_VERB_SLI for SLI verbs.</dd>
<dt>
<b>lua_verb_length</b></dt>
<dd>
Supplied parameter. Specifies the length in bytes of the LUA VCB. It must contain the length of the verb record being issued.</dd>
<dt>
<b>lua_prim_rc</b></dt>
<dd>
Primary return code set by LUA at the completion of the verb. The valid return codes vary depending on the LUA verb issued.</dd>
<dt>
<b>lua_sec_rc</b></dt>
<dd>
Secondary return code set by LUA at the completion of the verb. The valid return codes vary depending on the LUA verb issued.</dd>
<dt>
<b>lua_opcode</b></dt>
<dd>
Supplied parameter. Contains the LUA command code (verb operation code) for the verb to be issued, LUA_OPCODE_SLI_CLOSE.</dd>
<dt>
<b>lua_correlator</b></dt>
<dd>
Supplied parameter. Contains a user-supplied value that links the verb with other user-supplied information. LUA does not use or change this information. This parameter is optional.</dd>
<dt>
<b>lua_luname</b></dt>
<dd>
Supplied parameter. Specifies the ASCII name of the local LU used by the Windows LUA session.
<p>
<b>SLI_CLOSE</b> only requires this parameter if <b>lua_sid</b> is zero.

<p>
This parameter is eight bytes long, padded on the right with spaces (0x20) if the name is shorter than eight characters.
</dd>
<dt>
<b>lua_extension_list_offset</b></dt>
<dd>
Not used by <b>SLI_CLOSE</b> and should be set to zero.</dd>
<dt>
<b>lua_cobol_offset</b></dt>
<dd>
Not used by LUA in Microsoft® SNA Server and should be zero.</dd>
<dt>
<b>lua_sid</b></dt>
<dd>
Supplied parameter. Specifies the session identifier and is returned by <a href="luac04_7bxd.htm"><b>SLI_OPEN</b></a> and <a href="luac03_37z5.htm"><b>RUI_INIT</b></a>. Other verbs use this parameter to identify the session used for the command. If other verbs use the <b>lua_luname</b> parameter to identify sessions, set the <b>lua_sid</b> parameter to zero.</dd>
<dt>
<b>lua_max_length</b></dt>
<dd>
Not used by <b>SLI_CLOSE</b> and should be set to zero. </dd>
<dt>
<b>lua_data_length</b></dt>
<dd>
Not used by <b>SLI_CLOSE</b> and should be set to zero. </dd>
<dt>
<b>lua_data_ptr</b></dt>
<dd>
Not used by <b>SLI_CLOSE</b> and should be set to zero. </dd>
<dt>
<b>lua_post_handle</b></dt>
<dd>
Supplied parameter. Used under Microsoft® Windows NT® and Microsoft® Windows® 95 if asynchronous notification is to be accomplished by events. This variable contains the handle of the event to be signaled or a window handle.
<p>
For all other environments, this parameter is reserved and should be set to zero.
</dd>
<dt>
<b>lua_th</b></dt>
<dd>
Not used by <b>SLI_CLOSE</b> and should be set to zero. </dd>
<dt>
<b>lua_rh</b></dt>
<dd>
Not used by <b>SLI_CLOSE</b> and should be set to zero. </dd>
<dt>
<b>lua_flag1</b></dt>
<dd>
Supplied parameter. Contains a data structure containing flags for messages supplied by the application. Its subparameters are as follows:
<dl>
<dt>
<b>lua_flag1.bid_enable</b></dt>
<dd>
Bid enable indicator, one bit. </dd>
<dt>
<b>lua_flag1.close_abend</b></dt>
<dd>
Close immediate indicator, one bit. A supplied parameter used by <b>SLI_CLOSE</b> to specify whether the session is to be closed immediately (ON) or closed normally (OFF). For verbs other than <b>SLI_CLOSE</b>, this flag must be off.</dd>
<dt>
<b>lua_flag1.nowait</b></dt>
<dd>
No wait for data flag, one bit. </dd>
<dt>
<b>lua_flag1.sscp_exp</b></dt>
<dd>
SSCP expedited flow, one bit.</dd>
<dt>
<b>lua_flag1.sscp_norm</b></dt>
<dd>
SSCP normal flow, one bit.</dd>
<dt>
<b>lua_flag1.lu_exp</b></dt>
<dd>
LU expedited flow, one bit.</dd>
<dt>
<b>lua_flag1.lu_norm</b></dt>
<dd>
LU normal flow, one bit.
</dd>
</dl>
</dd>
<dt>
<b>lua_message_type</b></dt>
<dd>
Not used by <b>SLI_CLOSE</b> and should be set to zero. </dd>
<dt>
<b>lua_flag2</b></dt>
<dd>
Returned parameter. Contains flags for messages returned by LUA. 
<dl>
<dt>
<b>lua_flag2.async</b></dt>
<dd>
Indicates that the LUA interface verb completed asynchronously if set to 1. 
</dd>
</dl>
</dd>
<dt>
<b>lua_resv56</b></dt>
<dd>
Reserved and should be set to zero.</dd>
<dt>
<b>lua_encr_decr_option</b></dt>
<dd>
Not used by <b>SLI_CLOSE</b> and should be set to zero. 
</dd>
</dl>
<h4>Return Codes</h4>
<dl>
<dt>
LUA_OK</dt>
<dd>
Primary return code; the verb executed successfully.
<dl>
<dt>
LUA_SEC_OK</dt>
<dd>
Secondary return code; no additional information exists for LUA_OK.
</dd>
</dl>
</dd>
<dt>
LUA_PARAMETER_CHECK</dt>
<dd>
Primary return code; the verb did not execute because of a parameter error.
<dl>
<dt>
LUA_INVALID_LUNAME</dt>
<dd>
Secondary return code; an invalid <b>lua_luname</b> was specified.</dd>
<dt>
LUA_BAD_SESSION_ID</dt>
<dd>
Secondary return code; an invalid value for <b>lua_sid</b> was specified in the VCB.</dd>
<dt>
LUA_RESERVED_FIELD_NOT_ZERO</dt>
<dd>
Secondary return code; a reserved parameter for the verb just issued is not set to zero.</dd>
<dt>
LUA_INVALID_POST_HANDLE</dt>
<dd>
Secondary return code; for a Windows NT or Windows 95 system using events as the asynchronous posting method, the Windows LUA VCB does not contain a valid event handle.
<p>
For the Windows version 3.<i>x</i> system, the LUA VCB does not contain the valid procedure address returned by the <b>MakeProcInstance</b> command.

<p>
For OS/2, the LUA VCB does not contain a valid semaphore or queue handle, which is needed when a verb completes asynchronously.
</dd>
<dt>
LUA_VERB_LENGTH_INVALID</dt>
<dd>
Secondary return code; an LUA verb was issued with a value for <b>lua_verb_length</b> unexpected by LUA.
</dd>
</dl>
</dd>
<dt>
LUA_STATE_CHECK</dt>
<dd>
Primary return code; the verb did not execute because it was issued in an invalid state.
<dl>
<dt>
LUA_NO_SLI_SESSION</dt>
<dd>
Secondary return code; a session was not open or was down due to an <b>SLI_CLOSE</b> or session failure when a command was issued.</dd>
<dt>
LUA_CLOSE_PENDING</dt>
<dd>
Secondary return code; one of the following has occurred:
<table cellspacing=4 cols=1>
<tr valign=top>
<td width=100%><font face="Symbol">·</font>&nbsp;&nbsp;&nbsp;&nbsp;A CLOSE_ABEND was still pending when another CLOSE_ABEND was issued. You can issue a CLOSE_ABEND if a CLOSE_NORMAL is pending.</td>
</tr>
<tr valign=top>
<td width=100%><font face="Symbol">·</font>&nbsp;&nbsp;&nbsp;&nbsp;Either a CLOSE_ABEND or a CLOSE_NORMAL was still pending when a CLOSE_NORMAL was issued.</td>
</tr>
</table><br>

</dd>
</dl>
</dd>
<dt>
LUA_SESSION_FAILURE</dt>
<dd>
Primary return code; an error condition, specified in the secondary return code, caused the session to fail.
<dl>
<dt>
LUA_NOT_ACTIVE</dt>
<dd>
Secondary return code; LUA was not active within SNA Server when an LUA verb was issued.</dd>
<dt>
LUA_UNEXPECTED_SNA_SEQUENCE</dt>
<dd>
Secondary return code; unexpected data or commands were received from the host while <a href="luac04_7bxd.htm"><b>SLI_OPEN</b></a> was processing.</dd>
<dt>
LUA_NEGATIVE_RSP_CHASE</dt>
<dd>
Secondary return code; a negative response to an SNA CHASE command from the host was received by the LUA interface while <b>SLI_CLOSE</b> was being processed. <b>SLI_CLOSE</b> continued processing to stop the session.</dd>
<dt>
LUA_NEGATIVE_RSP_SHUTC</dt>
<dd>
Secondary return code; a negative response to an SNA SHUTC command from the host was received by the SLI while <b>SLI_CLOSE</b> was still being processed. <b>SLI_CLOSE</b> continued processing to stop the session.</dd>
<dt>
LUA_NEGATIVE_RSP_SHUTD</dt>
<dd>
Secondary return code; a negative response to an SNA RSHUTD command from the host was received by the LUA interface while <b>SLI_CLOSE</b> was still being processed. <b>SLI_CLOSE</b> continued processing to stop the session.</dd>
<dt>
LUA_RECEIVED_UNBIND</dt>
<dd>
Secondary return code; the primary LU sent an SNA UNBIND command to the LUA interface when a session was active. As a result, the session was stopped.</dd>
<dt>
LUA_NO_RUI_SESSION</dt>
<dd>
Secondary return code; no session has been initialized for the LUA verb issued, or some verb other than <a href="luac04_7bxd.htm"><b>SLI_OPEN</b></a> was issued before the session was initialized.</dd>
<dt>
LUA_LU_COMPONENT_DISCONNECTED</dt>
<dd>
Secondary return code; an LU component is unavailable because it is not connected properly. Make sure that the power is on.
</dd>
</dl>
</dd>
<dt>
LUA_IN_PROGRESS</dt>
<dd>
Primary return code; an asynchronous command was received but is not completed.</dd>
<dt>
LUA_COMM_SUBSYSTEM_ABENDED</dt>
<dd>
Primary return code; indicates one of the following conditions:
<ul>
<li>
The node used by this conversation encountered an ABEND.</li>
<li>
The connection between the TP and the PU 2.1 node has been broken (a LAN error).</li>
<li>
The SnaBase at the TP's computer encountered an ABEND.</li>
</ul>
</dd>
<dt>
LUA_COMM_SUBSYSTEM_NOT_LOADED</dt>
<dd>
Primary return code; a required component could not be loaded or terminated while processing the verb. Thus, communication could not take place. Contact the system administrator for corrective action.</dd>
<dt>
LUA_INVALID_VERB_SEGMENT</dt>
<dd>
Primary return code; the VCB extended beyond the end of the data segment.</dd>
<dt>
LUA_UNEXPECTED_DOS_ERROR</dt>
<dd>
Primary return code; after issuing an operating system call, an unexpected operating system return code was received and is specified in the secondary return code.</dd>
<dt>
LUA_STACK_TOO_SMALL</dt>
<dd>
Primary return code; the stack size of the application is too small to execute the verb. Increase the stack size of your application.</dd>
<dt>
LUA_INVALID_VERB</dt>
<dd>
Primary return code; either the verb code or the operation code, or both, is invalid. The verb did not execute.
</dd>
</dl>
<h4>Remarks</h4>
<p>
There are two types of <b>SLI_CLOSE</b>: normal and ABEND. For a normal close, <b>lua_flag1.close_abend</b> is set to zero. The sequence for a normal close can be initiated either as primary (host-initiated) or secondary (requested by a Windows LUA application). During a primary normal close, the Windows LUA interface:
<ul>
<li>
Reads the SHUTD command and posts the SESSION_END_REQUESTED status to the application.</li>
<li>
Writes the CHASE command (if necessary).</li>
<li>
Reads and processes the CHASE command response (if necessary).</li>
<li>
Writes the shutdown complete (SHUTC) command.</li>
<li>
Reads and processes the SHUTC command response.</li>
<li>
Reads and processes the CLEAR command (if necessary).</li>
<li>
Writes the CLEAR command response (if necessary).</li>
<li>
Reads and processes the UNBIND command.</li>
<li>
Writes the UNBIND command response.</li>
<li>
Stops the session.</li>
</ul>
<p>
During a secondary normal close, the Windows LUA interface:
<ul>
<li>
Writes the RSHUTD command.</li>
<li>
Reads and processes the RSHUTD command response.</li>
<li>
Reads and processes the CLEAR command (if necessary).</li>
<li>
Writes the CLEAR command response (if necessary).</li>
<li>
Reads and processes the UNBIND command.</li>
<li>
Writes the UNBIND command response.</li>
<li>
Stops the session.</li>
</ul>
<p>
For an ABEND close, <b>lua_flag1.close_abend</b> is set to 1, which directs the Windows LUA interface to close the session immediately. After <b>SLI_CLOSE</b> starts processing, the LU-LU connection is terminated and the SSCP is informed that the LU is not capable of sustaining a session.</p>
<h4>See Also</h4>
<p>
<a href="luac04_7bxd.htm"><b>SLI_OPEN</b></a></p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Inbound Chaining</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_sna_inbound_chaining_3270"></a>Inbound Chaining</h2>
<p>
The division of application data into <a href="3270c4_4eeo.htm"><b>Data</b></a> messages and the control of inbound chaining are the responsibility of the application.</p>
<p>
The secondary maximum send RU size for the session is a parameter in the BIND from the host and is available in the BICB on the <a href="3270c4_6e40.htm"><b>Open(PLU) (OK) Confirm</b></a> message. The application should ensure that each inbound <b>Data</b> message corresponds to a single RU; that is, it does not contain more data than the maximum RU size given in the BICB.</p>
<p>
The application should use the BCI and ECI application flags in the <b>Data</b> message headers to control chaining (see <a href="3270c3_74vk.htm">Application Flags</a>). The chain is the unit of recovery, and if recoverable errors occur in the chain, then the application should assume responsibility for recovery (see <a href="3270c3_95kg.htm">Recovery</a>).</p>
<p>
An inbound chain can terminate in the following ways:
<ul>
<li>
The complete chain is sent without errors; that is, all the <b>Data</b> messages in the chain have been passed to the host. If the session allows the secondary to send definite-response chains, and the application sets the ACKRQD field in the last <b>Data</b> message of the chain, then the application receives a <a href="3270c4_5z00.htm"><b>Status-Acknowledge(Ack)</b></a> from the local node when the host supplies a response.</li>
<li>
The local node detects a critical error in the format of a <b>Data</b> message from the application or in the state of the session. The local node rejects the <b>Data</b> message with a <a href="3270c4_7wxc.htm"><b>Status-Acknowledge(Nack-2)</b></a> containing an error code and closes the PLU connection. Note that the local node will generate an inbound CANCEL request before closing the PLU connection. The local node will send a TERM-SELF request to the host to elicit an UNBIND.</li>
<li>
The host sends a negative response to a request in the chain. The local node sends a <a href="3270c4_11bk.htm"><b>Status-Acknowledge(Nack-1)</b></a> message to the application with the sense codes and sequence number from the negative response. Where the host rejects a request that does not carry the ECI application flag, and the application did not specify the "application cancel," option in the PLU CICB, the local node also generates an inbound CANCEL request. When the application specifies "application cancel," then it must send EC or <b>Status-Control(CANCEL)</b> to terminate the chain. Any subsequent inbound chains are rejected with a noncritical <b>Status-Acknowledge(Nack-2)</b>, sense code 0x2002 or 0x2004 (chaining or direction). When the application receives the <b>Status-Acknowledge(Nack-1)</b> message, it should stop sending data after this chain for half-duplex flip-flop sessions because the direction has passed to the host (see <a href="3270c3_0168.htm">Direction</a>).</li>
<li>
The application cancels the chain while sending, by sending a <b>Status-Control(CANCEL)</b> message to the local node. The local node sends a CANCEL request to the host and sends a <b>Status-Control(CANCEL) Acknowledge</b> to the application on receiving a positive response from the host. Responses from the host to requests sent before the CANCEL will generate appropriate <b>Status-Acknowledge</b> messages to the application if the original <a href="3270c4_4eeo.htm"><b>Data</b></a> messages had the ACKRQD field set.</li>
<li>
The application closes the PLU connection while sending the chain. The local node sends a <b>Close(PLU) Response</b> to the application. Responses from the host to requests sent before the <b>Close(PLU)</b> message will not generate <b>Status-Acknowledge</b> messages to the application. Note that the local node will also generate an inbound CANCEL request and a TERM-SELF request to elicit an UNBIND.</li>
</ul>
<p>
If the local node detects a noncritical error in the format of a <b>Data</b> message from the application or the state of the session, it does not close the PLU connection. Instead, it rejects the <b>Data</b> message in error with a <b>Status-Acknowledge(Nack-2)</b> containing an appropriate error code. No data is sent to the host.</p>
<p>
If an inbound chain terminates with an error, then if the session uses half-duplex protocols, the application must assume a receive state (see <a href="3270c3_95kg.htm">Recovery</a>).</p>
<p>
The following six figures illustrate inbound chaining protocols between the local node and the application, and how those protocols relate to the underlying SNA protocols.</p>
<p>
In the first illustration, a complete inbound chain is sent without error and accepted by the host; note that after receiving <b>Status-Acknowledge(Ack)</b> the application relinquishes direction to the host.</p>
<p>
<img src="images/32703j.gif" border=0></p>
<p>
In the following illustration, the local node detects a critical error in the format of the second <b>Data</b> message in the chain (ACKRQD without the ECI application flag), sends a <b>Status-Acknowledge(Nack-2)</b> to the application with the appropriate error code, and closes the PLU connection. Note that the local node only generates the CANCEL where the session's FM profile supports CANCEL.</p>
<p>
<img src="images/32703ja.gif" border=0></p>
<p>
In the following illustration, a complete inbound chain is sent without error, but is rejected by the host; after the negative response, the application must enter receive state, pending error-recovery (see <a href="3270c3_95kg.htm">Recovery</a>).</p>
<p>
<img src="images/32703jb.gif" border=0></p>
<p>
In the following illustration, the application cancels the chain by sending <b>Status-Control(CANCEL)</b>; note that the application still has direction and can start a new chain.</p>
<p>
<img src="images/32703jc.gif" border=0></p>
<p>
In the following illustration, the application closes the PLU session while sending the chain; the local node only generates the CANCEL where the session's FM profile supports CANCEL.</p>
<p>
<img src="images/32703jd.gif" border=0></p>
<p>
In the following illustration, the local node detects a noncritical error in the format of the second <b>Data</b> message in the chain and sends a <b>Status-Acknowledge(Nack-2)</b> to the application with the appropriate error code.</p>
<p>
<img src="images/32703je.gif" border=0></p>
<p>&nbsp;</p></body>
</HTML>

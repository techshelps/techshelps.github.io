<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>aftp_format_error</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_sna_aftp_format_error_aftp"></a>aftp_format_error</h1>
<p>
The <b>aftp_format_error</b> call retrieves the current AFTP error information to a text buffer. The AFTP return code for the current error must not be AFTP_RC_HANDLE_NOT_VALID. If the current status is AFTP_RC_OK and the <b>aftp_format_error</b> call is invoked, the <i>return_code</i> value output by this call is AFTP_RC_STATE_CHECK. The <b>aftp_format_error</b> call should only be invoked when an error has occurred.</p>
<p>
<b>AFTP_ENTRY aftp_format_error(<br>
IN AFTP_HANDLE_TYPE </b><i>connection_id</i><b>,<br>
IN AFTP_DETAIL_LEVEL_TYPE </b><i>detail_level</i><b>,<br>
OUT unsigned char AFTP_PTR </b><i>error_str</i><b>,<br>
IN AFTP_LENGTH_TYPE </b><i>error_str_size</i><b>,<br>
OUT AFTP_LENGTH_TYPE AFTP_PTR </b><i>returned_length</i><b>,<br>
OUT AFTP_RETURN_CODE_TYPE AFTP_PTR </b><i>return_code<br>
</i><b>);</b></p>
<h4>Parameters</h4>
<dl>
<dt>
<i>connection_id</i></dt>
<dd>
An AFTP connection object originally created with <a href="aftpc02_2nao.htm"><b>aftp_create</b></a>.</dd>
<dt>
<i>detail_level</i></dt>
<dd>
The detail in which the error string will describe the AFTP error. These values can be <b>OR</b>'ed together to retrieve specific sets of information. For example, to return the primary message and the error log information, specify (AFTP_DETAIL_RC | AFTP_DETAIL_LOG).
<dl>
<dt>
AFTP_DETAIL_RC</dt>
<dd>
The AFTP return code, error category, index, and primary error message will be output.</dd>
<dt>
AFTP_DETAIL_SECOND</dt>
<dd>
The AFTP secondary error message will be output.</dd>
<dt>
AFTP_DETAIL_LOG</dt>
<dd>
The error logging information will be output.</dd>
<dt>
AFTP_DETAIL_INFO</dt>
<dd>
The informational message associated with the error will be output.</dd>
<dt>
AFTP_DETAIL_ALL</dt>
<dd>
All of the previous detail levels will be output in the error string.
</dd>
</dl>
</dd>
<dt>
<i>error_str</i></dt>
<dd>
The buffer into which the error information string will be written.
<p>
Use the AFTP_MESSAGE_SIZE constant to define the length of this buffer. Add 1 to the size if you want to be able to add a null terminator to the text in the buffer.
</dd>
<dt>
<i>error_str_size</i></dt>
<dd>
The size of the buffer into which the error information will be written.</dd>
<dt>
<i>returned_length</i></dt>
<dd>
The actual length of the <i>error_str</i> parameter in bytes.</dd>
<dt>
<i>return_code</i></dt>
<dd>
The return code issued for this function. See <a href="aftpc03_5h0w.htm">AFTP Return Codes</a> for the list of possible return codes.
</dd>
</dl>
<h4>Example</h4>
<pre><code>{
    AFTP_HANDLE_TYPE        connection_id;
    AFTP_RETURN_CODE_TYPE   aftp_rc;
    unsigned char           error_string[AFTP_MESSAGE_SIZE+1];
    AFTP_LENGTH_TYPE        returned_length;


    /*
     * There are no specific prerequisite calls for this call,
     * but you must issue a call that returns an error return code
     */

    if (aftp_rc != AFTP_RC_OK) {
        /*
         * We had an AFTP error - so let's get
         * the description that corresponds to
         * the error.
         */

        aftp_format_error(
            connection_id,
            AFTP_DETAIL_ALL,
            error_string,
            (AFTP_LENGTH_TYPE)sizeof(error_string)-1,
            &amp;returned_length,
            &amp;aftp_rc);
    }
}
 </code></pre>
<h4>Line Flows</h4>
<p>
None.</p>
<p>&nbsp;</p></body>
</HTML>

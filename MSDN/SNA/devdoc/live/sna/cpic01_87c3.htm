<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Windows Considerations</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_sna_windows_considerations_cpic"></a>Windows Considerations</h1>
<p>
This topic summarizes things to keep in mind when you are developing programs on a Microsoft® Windows®-based server.
<dl>
<dt>
<b>Asynchronous completion notification</b></dt>
<dd>
When an asynchronous operation is complete, the application's window <i>hwndNotify</i> receives the message returned by <b>RegisterWindowMessage</b> with "WinAsyncCPIC" as the input string. The <i>wParam</i> value contains the <i>conversation_return_code</i> from the operation that is completing. Its values will depend on which operation was originally issued. The <i>IParam</i> argument contains the CM_PTR to the <i>conversation_ID</i> specified in the original function call.</dd>
<dt>
<b>Load-time linking</b></dt>
<dd>
For a program to be dynamically linked to CPI-C at load time, you must do one of the following at link time:
<ul>
<li>
Insert the following <b>IMPORTS</b> statement in the definition (.DEF) file used to link the program:<p>
<b>IMPORTS WINCPIC.</b>[<i>entry point to be used</i>]
<p>
(Use this statement for each entry point needed.)
</li>
<li>
Link the program to WINCPIC.LIB, which contains the entry-point linkage information for CPI-C. If you intend to use CSV, you must also link to WINCSV.LIB, which contains the entry point information for CSV.</li>
</ul>
</dd>
<dt>
<b>Local LUs</b></dt>
<dd>
CPI-C does not provide a parameter for a program to specify the local LU it wants to use. The APPCLLU environment variable specifies a local LU. This variable can be set through the application section of the WIN.INI file, as in the following example:
<pre><code>[Application]
APPCTPN=TP1
APPCLLU=LU1
 </code></pre>

<p>
Setting APPCLLU is only necessary if the program does not use an LU from the default LU pool.
</dd>
<dt>
<b>Packing</b></dt>
<dd>
VCBs are not packed. As a result, DWORDs and WORDs are on WORD boundaries, and BYTEs are on BYTE boundaries. This means, for example, that there is not a 2-byte gap between the primary and secondary return codes. VCBs should be accessed using the structures provided, and compiler options that change this packing method should be avoided.</dd>
<dt>
<b>Run-time linking</b></dt>
<dd>
For a program to be dynamically linked to CPI-C at run time, the program must issue:
<ul>
<li>
<b>LoadLibrary </b>to dynamically load WINCPIC.DLL, the CPI-C library.</li>
<li>
<b>GetProcAddress</b> to specify CPI-C as the desired entry point to the DLL.</li>
</ul>

<p>
Issue the <b>FreeLibrary</b> call when the CPI-C library is no longer required.
</dd>
<dt>
<b>Simultaneous conversations</b></dt>
<dd>
A program can participate in as many as 64 conversations simultaneously with the Windows environment. However, if more than one CPI-C application is active at once, the total number of conversations cannot exceed 64.</dd>
<dt>
<b>Terminating applications</b></dt>
<dd>
In the Windows environment, CPI-C cannot tell when an application terminates. Therefore, if an application must close (for example, it receives a WM_CLOSE message as a result of an ALT+F4 from a user), the application should call <a href="cpic04_455v.htm"><b>WinCPICCleanup</b></a>.</dd>
<dt>
<b>TP names</b></dt>
<dd>
When a program issues <a href="cpic03_0jhf.htm"><b>Initialize_Conversation</b></a> or <a href="cpic03_70df.htm"><b>Accept_Conversation</b></a>, SNA Server generates an instance of a TP.
<p>
CPI-C does not provide a parameter for specifying the name of the invoking (<b>Initialize_Conversation</b>) TP instance. Instead, it is provided by setting the APPCTPN variable in the application section of the WIN.INI file, as in the following example:

<pre><code>[MyApplication]
APPCTPN=TP1
 </code></pre>

<p>
If APPCTPN is not set, the default value is CPIC_DEFAULT_TPNAME.

<p>
For the invoked program, the value of APPCTPN must match the value set by the invoking program. <b>Accept_Conversation</b> cannot complete unless the allocation request from the invoking program specifies the TP name contained in APPCTPN. The invoked program also sets APPCTPN through an application section of the WIN.INI file.

<p>
If this variable is not set when the invoked program issues <b>Accept_Conversation</b>, the default value is CPIC_DEFAULT_TP_NAME.

<p>
The APPCTPN variable can be an ASCII string from 1 through 64 characters long, consisting of uppercase and lowercase letters, numerals 0 through 9, and special characters, except the space. The APPCTPN variable cannot be set to an SNA service TP name, which contains nonprintable hexadecimal values.

<p>
If the invoking program issues multiple <b>Initialize_Conversation</b> calls, it can set APPCTPN to a different value before each call.
</dd>
<dt>
<b>Yielding to other components</b></dt>
<dd>
When processing CPI-C and CSV, it may be necessary for the library code to yield to allow another component, such as the SnaBase, to receive messages and pass them to the application. This can be accomplished by using <a href="cpic04_4l2b.htm"><b>WinCPICSetBlockingHook</b></a> and <a href="cpic04_0jhf.htm"><b>WinCPICUnhookBlockingHook</b></a>.
<p>
<b>WinCPICSetBlockingHook</b> allows a Windows CPI-C implementation to block CPI-C function calls by means of a new function. This call is used by Windows version 3.<i>x </i>applications to make blocking calls without blocking the rest of the system. To call <b>WinCPICSetBlockingHook</b>:

<pre><code>FARPROC WINAPI WinCPICSetBlockingHook (FARPROC 1pBlockFunc)
 </code></pre>

<p>
<b>WinCPICUnhookBlockingHook</b> removes any previous blocking hook that has been installed and reinstalls the default blocking mechanism. To call <b>WinCPICUnhookBlockingHook</b>:

<pre><code>BOOL WINAPI WinCPICUnhookBlockingHook (void)
 </code></pre>
</dd>
</dl>
<p>&nbsp;</p></body>
</HTML>

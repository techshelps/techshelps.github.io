<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Receiving Data Asynchronously</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_sna_receiving_data_asynchronously_appc"></a>Receiving Data Asynchronously</h2>
<p>
With the Microsoft® Windows NT®, Microsoft® Windows® 95, Windows version 3.<i>x</i>, and OS/2 operating systems, a TP can receive data asynchronously,  without regard to other events occurring within the TP. The following table shows the methods by which a TP can receive data asynchronously. The table also indicates how asynchronous methods can be applied to actions other than receiving data.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=23%>Operating system</th>
<th align=left width=77%>Method</th>
</tr>
<tr valign=top>
<td width=23%>Windows NT, Windows 95, or Windows 3.<i>x</i></td>
<td width=77%><b>Through a Windows message:</b> <br>
Issue <b>RECEIVE_AND_WAIT</b> or <b>MC_RECEIVE_AND_WAIT</b> with <b>WinAsyncAPPC</b>; the application is notified of completion through a <b>PostMessage</b> to the defined window handle.<p>
This method is not restricted to <b>RECEIVE_AND_WAIT</b> and <b>MC_RECEIVE_AND_WAIT</b>, but can be applied to any APPC verb.</p>
<p>
.</p>
</td>
</tr>
<tr valign=top>
<td width=23%>Windows NT or Windows 95</td>
<td width=77%><b>Through a Win32</b>®<b> event:</b> <br>
Issue <b>RECEIVE_AND_WAIT</b> or <b>MC_RECEIVE_AND_WAIT</b> with <b>WinAsyncAPPCEx</b>; the application is notified of completion through a Win32 event.<p>
This method is not restricted to <b>RECEIVE_AND_WAIT</b> and <b>MC_RECEIVE_AND_WAIT</b>, but can be applied to any APPC verb.</p>
<p>
</p>
</td>
</tr>
<tr valign=top>
<td width=23%>Windows NT, Windows 95, or <br>
OS/2</td>
<td width=77%><b>With RECEIVE_AND_POST or MC_RECEIVE_AND_POST:</b> <br>
Issue the <b>RECEIVE_AND_POST</b> or <b>MC_RECEIVE_AND_POST</b> verb. With OS/2, the application is notified of completion through a semaphore. With Windows NT and Windows 95, the application is notified of completion through a Win32 event (the unsignaled event, not a semaphore, is passed in the <b>sema</b> member).</td>
</tr>
</table><br>
<p>
The following list gives details about these methods of receiving data asynchronously. For complete information, see the verb descriptions.
<dl>
<dt>
<a href="appc05b_19er.htm"><b>RECEIVE_AND_WAIT</b></a> or <a href="appc05a_5qlf.htm"><b>MC_RECEIVE_AND_WAIT</b></a> with <a href="appc06_66sj.htm"><b>WinAsyncAPPC</b></a></dt>
<dd>
This method is defined as part of Windows SNA. It allows an application to issue a verb and be notified through a <b>PostMessage</b> when the action is complete. To retrieve the message number that will be posted to the window, call <b>RegisterWindowMessage</b> with "WinAsyncAPPC" as the input string. Then issue <b>RECEIVE_AND_WAIT</b> or <b>MC_RECEIVE_AND_WAIT</b> using the <b>WinAsyncAPPC</b> entry point.</dd>
<dt>
<b>RECEIVE_AND_WAIT</b> or <b>MC_RECEIVE_AND_WAIT</b> with <a href="appc06_6bxf.htm"><b>WinAsyncAPPCEx</b></a></dt>
<dd>
This method allows an application to be notified through a Win32 event. This is particularly useful when writing applications that need to service multiple conversations simultaneously. The event must be in the nonsignaled state when passed to APPC, and the handle must have EVENT_MODIFY_STATE access to the event.</dd>
<dt>
<a href="appc05b_92oz.htm"><b>RECEIVE_AND_POST</b></a> or <a href="appc05a_3jvn.htm"><b>MC_RECEIVE_AND_POST</b></a></dt>
<dd>
When using <b>RECEIVE_AND_POST</b> or <b>MC_RECEIVE_AND_POST</b> with Windows NT or Windows 95, the application is notified through a Win32 event. The event must be in the nonsignaled state when passed to APPC, and the handle must have EVENT_MODIFY_STATE access to the event.
<p>
When using <b>RECEIVE_AND_POST</b> or <b>MC_RECEIVE_AND_POST</b> with OS/2, the application is notified through a semaphore. Use <b>DosSemSet</b> to set the semaphore; APPC will clear the semaphore when the TP finishes receiving data asynchronously.

</dd>
</dl>
<p>
While receiving data asynchronously, the TP performs tasks not related to this conversation; the TP cannot issue most APPC verbs until notification is received. For information about the verbs that can be issued, see the descriptions of <a href="appc06_66sj.htm"><b>WinAsyncAPPC</b></a> or <a href="appc06_6bxf.htm"><b>WinAsyncAPPCEx</b></a>.</p>
<p>
After a verb has completed asynchronously, check the <b>primary_rc</b> to find out whether the data was received without error.</p>
<p>
<b>Note</b>&nbsp;&nbsp;If the initial call to issue the verb returns successfully, the application is guaranteed to be notified (by the applicable method) when the verb completes, regardless of whether the verb is ultimately successful.</p>
<p>&nbsp;</p></body>
</HTML>

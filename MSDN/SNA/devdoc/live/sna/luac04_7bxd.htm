<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SLI_OPEN</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_sna_sli_open_lua"></a>SLI_OPEN</h1>
<p>
The <b>SLI_OPEN</b> verb transfers control of the specified LU to the Windows LUA application. <b>SLI_OPEN</b> establishes a session between the SSCP and the specified LU, as well as an LU-LU session.</p>
<p>
The following structure describes the <b>LUA_COMMON</b> member of the VCB used by <b>SLI_OPEN</b>.</p>
<pre><code>struct LUA_COMMON {
    unsigned short   lua_verb;
    unsigned short   lua_verb_length;
    unsigned short   lua_prim_rc;
    unsigned long    lua_sec_rc;
    unsigned short   lua_opcode;
    unsigned long    lua_correlator;
    unsigned char    lua_luname[8];
    unsigned short   lua_extension_list_offset;
    unsigned short   lua_cobol_offset;
    unsigned long    lua_sid;
    unsigned short   lua_max_length;
    unsigned short   lua_data_length;
    char FAR *       lua_data_ptr;
    unsigned long    lua_post_handle;
    struct LUA_TH    lua_th;
    struct LUA_RH    lua_rh;
    struct LUA_FLAG1 lua_flag1;
    unsigned char    lua_message_type;
    struct LUA_FLAG2 lua_flag2; 
    unsigned char    lua_resv56[7];
    unsigned char    lua_encr_decr_option;
};
 </code></pre>
<p>
The following union describes the <b>LUA_SPECIFIC</b> member of the VCB used by <b>SLI_OPEN</b>. Other union members are omitted for clarity.</p>
<pre><code>union LUA_SPECIFIC {
    struct union SLI_OPEN open;
};
 </code></pre>
<p>
The <b>SLI_OPEN</b> structure contains the following nested structures and members:</p>
<pre><code>struct LUA_EXT_ENTRY {
    unsigned char lua_routine_type;
    unsigned char lua_module_name[9];
    unsigned char lua_procedure_name[33];
} ;
 
struct SLI_OPEN {
    unsigned char         lua_init_type;
    unsigned char         lua_resv65;
    unsigned short        lua_wait;
    struct LUA_EXT_ENTRY  lua_open_extension[3];
    unsigned char         lua_ending_delim;
} ;
 </code></pre>
<h4>Members</h4>
<dl>
<dt>
<b>lua_verb</b></dt>
<dd>
Supplied parameter. Contains the verb code, LUA_VERB_SLI for SLI verbs.</dd>
<dt>
<b>lua_verb_length</b></dt>
<dd>
Supplied parameter. Specifies the length in bytes of the LUA VCB. It must contain the length of the verb record being issued.</dd>
<dt>
<b>lua_prim_rc</b></dt>
<dd>
Primary return code set by LUA at the completion of the verb. The valid return codes vary depending on the LUA verb issued.</dd>
<dt>
<b>lua_sec_rc</b></dt>
<dd>
Secondary return code set by LUA at the completion of the verb. The valid return codes vary depending on the LUA verb issued.</dd>
<dt>
<b>lua_opcode</b></dt>
<dd>
Supplied parameter. Contains the LUA command code (verb operation code) for the verb to be issued, LUA_OPCODE_SLI_OPEN.</dd>
<dt>
<b>lua_correlator</b></dt>
<dd>
Supplied parameter. Contains a user-supplied value that links the verb with other user-supplied information. LUA does not use or change this information. This parameter is optional.</dd>
<dt>
<b>lua_luname</b></dt>
<dd>
Supplied parameter. Specifies the ASCII name of the local LU used by the Windows LUA session.
<p>
<b>SLI_OPEN</b> requires this parameter. 

<p>
This parameter is eight bytes long, padded on the right with spaces (0x20) if the name is shorter than eight characters.
</dd>
<dt>
<b>lua_extension_list_offset</b></dt>
<dd>
Supplied parameter. Specifies the offset from the start of the VCB to the extension list of user-supplied dynamic-link libraries (DLLs). The value must be the beginning of a word boundary unless there is no extension list. In this case, the value must be set to zero.
<p>
If this option is not used by <b>SLI_OPEN</b>, then this member should be set to zero.
</dd>
<dt>
<b>lua_cobol_offset</b></dt>
<dd>
Not used by LUA in Microsoft® SNA Server and should be zero.</dd>
<dt>
<b>lua_sid</b></dt>
<dd>
Returned parameter. Specifies the session identifier. </dd>
<dt>
<b>lua_max_length</b></dt>
<dd>
Not used by <b>SLI_OPEN</b> and should be set to zero. </dd>
<dt>
<b>lua_data_length</b></dt>
<dd>
Supplied parameter. Specifies the actual length of the data being sent.</dd>
<dt>
<b>lua_data_ptr</b></dt>
<dd>
Pointer to the application-supplied buffer that contains the data to be sent for <b>SLI_OPEN</b>.
<p>
Both SNA commands and data are placed in this buffer, and they can be in an EBCDIC format.

<p>
When <b>SLI_OPEN</b> is issued, this parameter can be one of the following:

<ul>
<li>
The LOGON message for the SSCP normal flow when the initialization type is secondary with an unformatted LOGON message.</li>
<li>
The RU for INITSELF. When the initialization type is secondary with INITSELF, the necessary data for the application is provided.</li>
<li>
For all other open types, this field should be set to zero.</li>
</ul>

<p>
This information is provided by the Windows LUA application.
</dd>
<dt>
<b>lua_post_handle</b></dt>
<dd>
Supplied parameter. Used under Microsoft® Windows NT® and Microsoft® Windows® 95 if asynchronous notification is to be accomplished by events. This variable contains the handle of the event to be signaled or a window handle.
<p>
For all other environments, this parameter is reserved and should be set to zero.
</dd>
<dt>
<b>lua_th</b></dt>
<dd>
Not used by <b>SLI_OPEN</b> and should be set to zero.</dd>
<dt>
<b>lua_rh</b>.</dt>
<dd>
Not used by <b>SLI_OPEN</b> and should be set to zero.</dd>
<dt>
<b>lua_flag1</b></dt>
<dd>
Not used by <b>SLI_OPEN</b> and should be set to zero.</dd>
<dt>
<b>lua_message_type</b></dt>
<dd>
Not used by <b>SLI_OPEN</b> and should be set to zero. </dd>
<dt>
<b>lua_flag2</b></dt>
<dd>
Returned parameter. Contains flags for messages returned by LUA. Its subparameters are as follows:
<dl>
<dt>
<b>lua_flag2.async</b></dt>
<dd>
Indicates that the LUA interface verb completed asynchronously if set to 1. 
</dd>
</dl>
</dd>
<dt>
<b>lua_resv56</b></dt>
<dd>
Supplied parameter. Reserved field used by <b>SLI_OPEN</b> and <a href="luac03_37z5.htm"><b>RUI_INIT</b></a>. See Remarks section.
<dl>
<dt>
<b>lua_resv56[1]</b></dt>
<dd>
Supplied parameter. Indicates whether the <b>lua_post_handle</b> is to be used as the Windows handle for a BIND command. If this paramater is set to 2, the <b>lua_post_handle</b> is to be used.</dd>
<dt>
<b>lua_resv56[2]</b></dt>
<dd>
Supplied parameter. Indicates whether an SLI application can access LUs configured as 3270 LUs, in addition to LUA LUs. If this parameter is set to 1, 3270 LUs can be accessed.</dd>
<dt>
<b>lua_resv56[3]</b></dt>
<dd>
Supplied parameter. Indicates whether incomplete reads are supported. If this parameter is set to 1, incomplete or truncated reads are supported. See the remarks for <a href="luac03_7dwh.htm"><b>RUI_READ</b></a> for more details.
</dd>
</dl>
</dd>
<dt>
<b>lua_encr_decr_option</b></dt>
<dd>
Not used by <b>SLI_OPEN</b> and should be set to zero. </dd>
<dt>
<b>open</b></dt>
<dd>
The union member of <b>LUA_SPECIFIC</b> used by <b>SLI_OPEN</b>. A supplied set of parameters contained in an <b>SLI_OPEN</b> structure required with <b>SLI_OPEN</b>. 
<dl>
<dt>
<b>open.lua_init_type</b></dt>
<dd>
Supplied parameter. Defines how the LU-LU session is initialized by the Windows LUA interface.
<p>
Valid values are as follows:

<p>
LUA_INIT_TYPE_SEC_IS

<p>
LUA_INIT_TYPE_SEC_LOG

<p>
LUA_INIT_TYPE_PRIM

<p>
LUA_INIT_TYPE_PRIM_SSCP

</dd>
<dt>
<b>open.lua_resv65</b></dt>
<dd>
Reserved field.</dd>
<dt>
<b>open.lua_wait</b></dt>
<dd>
Supplied parameter. Represents a secondary retry wait time indicating the number of seconds the Windows LUA interface is to wait before retrying the transmission of the INITSELF or the LOGON message after the host sends any one of these messages:
<table cellspacing=4 cols=1>
<tr valign=top>
<td width=100%><font face="Symbol">·</font>&nbsp;&nbsp;&nbsp;&nbsp;A negative response and the secondary return code is one of the following:<br>
<br>
RESOURCE_NOT_AVAILABLE (0x08010000)<br>
SESSION_LIMIT_EXCEEDED (0x08050000)<br>
SESSION_SERVICE_PATH_ERROR (0x087D0000)<br>
<br>
Note that <b>SLI_OPEN</b> terminates with error if <b>lua_wait</b> is set to zero and one of the above occurs.</td>
</tr>
<tr valign=top>
<td width=100%><font face="Symbol">·</font>&nbsp;&nbsp;&nbsp;&nbsp;A network services procedure error (NSPE) message.</td>
</tr>
<tr valign=top>
<td width=100%><font face="Symbol">·</font>&nbsp;&nbsp;&nbsp;&nbsp;A NOTIFY command, which indicates a procedure error.</td>
</tr>
</table><br>

</dd>
<dt>
<b>open.lua_open_extension</b></dt>
<dd>
Supplied parameter. Contains a list of application-supplied extension DLLs to process the BIND, STSN, and CRV commands. </dd>
<dt>
<b>open.open_extension.lua_routine_type</b></dt>
<dd>
The extension routine type. Legal values are:
<p>
LUA_ROUTINE_TYPE_BIND

<p>
LUA_ROUTINE_TYPE_CRV

<p>
LUA_ROUTINE_TYPE_END (indicates end of extension list)

<p>
LUA_ROUTINE_TYPE_STSN

</dd>
<dt>
<b>open.open_extension.lua_module_name</b></dt>
<dd>
Supplied parameter. Provides the ASCII module name for the user-supplied extension DLL. The module name can be up to eight characters long, with the remaining bytes set to 0x00.</dd>
<dt>
<b>open.open_extension.lua_procedure_name</b></dt>
<dd>
Supplied parameter. Provides the procedure name in ASCII for the user-supplied extension DLL. The procedure name can be up to 32 characters long, with the remaining bytes set to 0x00.</dd>
<dt>
<b>open.lua_ending_delim</b></dt>
<dd>
The extension list delimiter.
</dd>
</dl>
</dd>
</dl>
<h4>Return Codes</h4>
<dl>
<dt>
LUA_OK</dt>
<dd>
Primary return code; the verb executed successfully.
<dl>
<dt>
LUA_SEC_OK</dt>
<dd>
Secondary return code; no additional information exists for LUA_OK.
</dd>
</dl>
</dd>
<dt>
LUA_PARAMETER_CHECK</dt>
<dd>
Primary return code; the verb did not execute because of a parameter error.
<dl>
<dt>
LUA_INVALID_LUNAME</dt>
<dd>
Secondary return code; an invalid <b>lua_luname</b> name was specified.</dd>
<dt>
LUA_BAD_SESSION_ID</dt>
<dd>
Secondary return code; an invalid value for <b>lua_sid</b> was specified in the VCB.</dd>
<dt>
LUA_BAD_DATA_PTR</dt>
<dd>
Secondary return code; the <b>lua_data_ptr</b> parameter either does not contain a valid pointer or does not point to a read/write segment and supplied data is required.</dd>
<dt>
LUA_DATA_SEGMENT_LENGTH_ERROR</dt>
<dd>
Secondary return code; one of the following occurred:
<table cellspacing=4 cols=1>
<tr valign=top>
<td width=100%><font face="Symbol">·</font>&nbsp;&nbsp;&nbsp;&nbsp;The supplied data segment for <a href="luac04_2nfl.htm"><b>SLI_RECEIVE</b></a> or <a href="luac04_2lr5.htm"><b>SLI_SEND</b></a> is not a read/write data segment as required.</td>
</tr>
<tr valign=top>
<td width=100%><font face="Symbol">·</font>&nbsp;&nbsp;&nbsp;&nbsp;The supplied data segment for <b>SLI_RECEIVE</b> is not as long as that provided in <b>lua_max_length</b>.</td>
</tr>
<tr valign=top>
<td width=100%><font face="Symbol">·</font>&nbsp;&nbsp;&nbsp;&nbsp;The supplied data segment for <b>SLI_SEND</b> is not as long as that provided in <b>lua_data_length</b>.</td>
</tr>
</table><br>

</dd>
<dt>
LUA_RESERVED_FIELD_NOT_ZERO</dt>
<dd>
Secondary return code; a reserved parameter for the verb just issued is not set to zero.</dd>
<dt>
LUA_INVALID_POST_HANDLE</dt>
<dd>
Secondary return code; for a Windows NT or Windows 95 system using events as the asynchronous posting method, the Windows LUA VCB does not contain a valid event handle.
<p>
For the Windows version 3.<i>x</i> system, the LUA VCB does not contain the valid procedure address returned by the <b>MakeProcInstance</b> command.

<p>
For OS/2, the LUA VCB does not contain a valid semaphore or queue handle, which is needed when a verb completes asynchronously.
</dd>
<dt>
LUA_VERB_LENGTH_INVALID</dt>
<dd>
Secondary return code; an LUA verb was issued with a value for <b>lua_verb_length</b> unexpected by LUA.</dd>
<dt>
LUA_INVALID_OPEN_INIT_TYPE</dt>
<dd>
Secondary return code; the value in the <b>lua_init_type</b> contained in <b>SLI_OPEN</b> is invalid.</dd>
<dt>
LUA_INVALID_OPEN_DATA</dt>
<dd>
Secondary return code; the <b>lua_init_type</b> for the <b>SLI_OPEN</b> issued is set to LUA_INIT_TYPE_SEC_IS when the buffer for data does not have a valid INITSELF command.</dd>
<dt>
LUA_INVALID_OPEN_ROUTINE_TYPE</dt>
<dd>
Secondary return code; the<b> lua_open_routine_type</b> for the <b>SLI_OPEN</b> list of extension routines is invalid.</dd>
<dt>
LUA_DATA_LENGTH_ERROR</dt>
<dd>
Secondary return code; the application did not provide user-supplied data required by the verb issued. Note that when <a href="luac04_2lr5.htm"><b>SLI_SEND</b></a> is issued for an SNA LUSTAT command, status (in four bytes) is required, and that when <b>SLI_OPEN</b> is issued with secondary initialization, data is required.</dd>
<dt>
LUA_INVALID_SLI_ENCR_OPTION</dt>
<dd>
Secondary return code; the <b>lua_encr_decr_option</b> parameter was set to 128 in <b>SLI_OPEN</b>, which is not supported for the encryption/decryption processing option.
</dd>
</dl>
</dd>
<dt>
LUA_STATE_CHECK</dt>
<dd>
Primary return code; the verb did not execute because it was issued in an invalid state.
<dl>
<dt>
LUA_NOT_ACTIVE</dt>
<dd>
Secondary return code; LUA was not active within SNA Server when an LUA verb was issued.</dd>
<dt>
LUA_UNEXPECTED_SNA_SEQUENCE</dt>
<dd>
Secondary return code; unexpected data or commands were received from the host while <b>SLI_OPEN</b> was processing.</dd>
<dt>
LUA_NEG_RSP_FROM_BIND_ROUTINE</dt>
<dd>
Secondary return code; the user-supplied SLI_BIND routine responded negatively to the BIND. <b>SLI_OPEN</b> ended unsuccessfully.</dd>
<dt>
LUA_NEG_RSP_FROM_STSN_ROUTINE</dt>
<dd>
Secondary return code; the user-supplied SLI STSN routine responded negatively to the STSN. <b>SLI_OPEN</b> ended unsuccessfully.</dd>
<dt>
LUA_PROCEDURE_ERROR</dt>
<dd>
Secondary return code; a host procedure error is indicated by the receipt of an NSPE or NOTIFY message. The return code is posted to <b>SLI_OPEN</b> when the retry option is not used. To use the reset option, set <b>lua_wait</b> to a value other than zero. The LOGON or INITSELF command will be retried until the host is ready or until you issue <a href="luac04_7sf5.htm"><b>SLI_CLOSE</b></a>.</dd>
<dt>
LUA_RECEIVED_UNBIND</dt>
<dd>
Secondary return code; the primary LU sent an SNA UNBIND command to the LUA interface when a session was active. As a result, the session was stopped.</dd>
<dt>
LUA_SLI_LOGIC_ERROR</dt>
<dd>
Secondary return code; the LUA interface found an internal error in logic.</dd>
<dt>
LUA_NO_RUI_SESSION</dt>
<dd>
Secondary return code; no session has been initialized for the LUA verb issued, or some verb other than <b>SLI_OPEN</b> was issued before the session was initialized.</dd>
<dt>
LUA_RESOURCE_NOT_AVAILABLE</dt>
<dd>
Secondary return code; the logical unit, physical unit, link, or link station specified in the request unit is unavailable. This return code is posted to <b>SLI_OPEN</b> when a resource is unavailable unless you use the retry option. 
<p>
To use the retry option, set <b>lua_wait</b> to a value other than zero. The LOGON or INITSELF command will be retried until the host is ready or until you issue <a href="luac04_7sf5.htm"><b>SLI_CLOSE</b></a>.
</dd>
<dt>
LUA_SESSION_LIMIT_EXCEEDED</dt>
<dd>
Secondary return code; the session requested was not activated because an NAU is at its session limit. This SNA sense code applies to the following requests: BID, CINIT, INIT, and ACTDRM.
<p>
The code will be posted to <b>SLI_OPEN</b> when an NAU is at its limit, unless you use the RETRY option. 

<p>
To use the reset option, set <b>lua_wait</b> to a value other than zero. The LOGON or INITSELF command will be retried until the host is ready or until you issue <b>SLI_CLOSE</b>.
</dd>
<dt>
LUA_LU_COMPONENT_DISCONNECTED</dt>
<dd>
Secondary return code; an LU component is unavailable because it is not connected properly. Make sure that the power is on.</dd>
<dt>
LUA_NEGOTIABLE_BIND_ERROR</dt>
<dd>
Secondary return code; a negotiable BIND was received, which is only allowed by the SLI when a user-supplied SLI_BIND routine is provided with <b>SLI_OPEN</b>.</dd>
<dt>
LUA_BIND_FM_PROFILE_ERROR</dt>
<dd>
Secondary return code; only file management header profiles 3 and 4 are supported by the LUA interface. A file management profile other than 3 or 4 was found on the BIND.</dd>
<dt>
LUA_BIND_TS_PROFILE_ERROR</dt>
<dd>
Secondary return code; only transmission service (TS) profiles 3 and 4 are supported by the LUA interface. A TS other than 3 or 4 was found on the BIND.</dd>
<dt>
LUA_BIND_LU_TYPE_ERROR</dt>
<dd>
Secondary return code; only LU 0, LU 1, LU 2, and LU 3 are supported by LUA. An LU other than 0, 1, 2, or 3 was found.</dd>
<dt>
LUA_SSCP_LU_SESSION_NOT_ACTIVE</dt>
<dd>
Secondary return code; the required SSCP-LU is inactive. Specific sense code information is in bytes 2 and 3. Valid settings are 0x0000, 0x0001, 0x0002, 0x0003, and 0x0004.</dd>
<dt>
LUA_SESSION_SERVICES_PATH_ERROR</dt>
<dd>
Secondary return code; a request for session services cannot be rerouted to an SSCP-SSCP session path. Specific sense code information in bytes 2 and 3 gives more information about why the request cannot be rerouted.
</dd>
</dl>
</dd>
<dt>
LUA_UNSUCCESSFUL</dt>
<dd>
Primary return code; the verb record supplied was valid but the verb did not complete successfully.
<dl>
<dt>
LUA_VERB_RECORD_SPANS_SEGMENTS</dt>
<dd>
Secondary return code; the LUA VCB length parameter plus the segment offset is beyond the segment end.</dd>
<dt>
LUA_SESSION_ALREADY_OPEN</dt>
<dd>
Secondary return code; a session is already open for the LU name specified in <b>SLI_OPEN</b>.</dd>
<dt>
LUA_INVALID_PROCESS</dt>
<dd>
Secondary return code; the session for which an LUA verb was issued is unavailable because another process owns the session.</dd>
<dt>
LUA_LINK_NOT_STARTED</dt>
<dd>
Secondary return code; the LUA was not able to activate the data link during initialization of the session.</dd>
<dt>
LUA_INVALID_ADAPTER</dt>
<dd>
Secondary return code; the configuration for the data link control (DLC) is in error, or the configuration file is corrupted.</dd>
<dt>
LUA_ENCR_DECR_LOAD_ERROR</dt>
<dd>
Secondary return code; an unexpected return code was received from the OS/2 <b>DosLoadModule</b> function while attempting to load the user-provided encryption or decryption dynamic link module.</dd>
<dt>
LUA_ENCR_DECR_PROC_ERROR</dt>
<dd>
Secondary return code; an unexpected return code was received from the OS/2 <b>DosGetProcAddr</b> function while attempting to get the procedure address within the user-provided encryption or decryption dynamic link module.</dd>
<dt>
LUA_NEG_NOTIFY_RSP</dt>
<dd>
Secondary return code; the SSCP responded negatively to a NOTIFY request issued indicating that the secondary LU was capable of a session. The half-session component that received the request understood and supported the request but could not execute it.</dd>
<dt>
LUA_LU_INOPERATIVE</dt>
<dd>
Secondary return code; a severe error occurred while the SLI was attempting to stop the session. This LU is unavailable for any LUA requests until an ACTLU is received from the host.
</dd>
</dl>
</dd>
<dt>
LUA_CANCELED</dt>
<dd>
Primary return code; the secondary return code gives the reason for canceling the command.
<dl>
<dt>
LUA_TERMINATED</dt>
<dd>
Secondary return code; the session was terminated when a verb was pending. The verb process was canceled.
</dd>
</dl>
</dd>
<dt>
LUA_IN_PROGRESS</dt>
<dd>
Primary return code; an asynchronous command was received but is not completed.</dd>
<dt>
LUA_COMM_SUBSYSTEM_ABENDED</dt>
<dd>
Primary return code; indicates one of the following conditions:
<ul>
<li>
The node used by this conversation encountered an ABEND.</li>
<li>
The connection between the TP and the PU 2.1 node has been broken (a LAN error).</li>
<li>
The SnaBase at the TP's computer encountered an ABEND.</li>
</ul>
</dd>
<dt>
LUA_COMM_SUBSYSTEM_NOT_LOADED</dt>
<dd>
Primary return code; a required component could not be loaded or terminated while processing the verb. Thus, communication could not take place. Contact the system administrator for corrective action.</dd>
<dt>
LUA_INVALID_VERB_SEGMENT</dt>
<dd>
Primary return code; the VCB extended beyond the end of the data segment.</dd>
<dt>
LUA_UNEXPECTED_DOS_ERROR</dt>
<dd>
Primary return code; after issuing an operating system call, an unexpected operating system return code was received and is specified in the secondary return code.</dd>
<dt>
LUA_STACK_TOO_SMALL</dt>
<dd>
Primary return code; the stack size of the application is too small to execute the verb. Increase the stack size of your application.</dd>
<dt>
LUA_INVALID_VERB</dt>
<dd>
Primary return code; either the verb code or the operation code, or both, is invalid. The verb did not execute.
</dd>
</dl>
<h4>Remarks</h4>
<p>
For each <b>SLI_OPEN</b>, the Windows LUA interface:
<ul>
<li>
Starts the communication session.</li>
<li>
Reads and verifies a BIND command from the host, and passes it to the application if a BIND extension routine is supplied.</li>
<li>
Writes a BIND response.</li>
<li>
Reads and processes the STSN command and passes it to the application if a BIND extension is supplied (if necessary).</li>
<li>
Writes the STSN response (if necessary).</li>
<li>
Reads the CRV command (if necessary).</li>
<li>
Writes the CRV response (if necessary).</li>
<li>
Reads and processes the SDT command.</li>
<li>
Writes the SDT response.</li>
</ul>
<p>
The Windows LUA interface does the following additional functions for sessions that issue <b>SLI_OPEN</b> with the open type set to LUA_INIT_TYPE_SEC_IS or LUA_INIT_TYPE_SEC_LOG:
<ul>
<li>
Writes an INITSELF or an unformatted LOGON message.</li>
<li>
Reads and processes an INITSELF response or LOGON message response.</li>
</ul>
<p>
All SNA message traffic is administered by <b>SLI_OPEN</b> through the SDT command response.</p>
<p>
To choose a certain LU configured for Windows LUA, the application sets <b>lua_luname</b> to the LU name in ASCII, padded with trailing spaces if necessary.</p>
<p>
When <b>SLI_OPEN</b> is posted with LUA_OK in the <b>lua_prim_rc</b> parameter, <b>SLI_OPEN</b> successfully completed and the LU-LU data-flow session was established. The application can now issue <a href="luac04_5z8h.htm"><b>SLI_BID</b></a>, <a href="luac04_7sf5.htm"><b>SLI_CLOSE</b></a>, <a href="luac04_75i9.htm"><b>SLI_PURGE</b></a>, <a href="luac04_2nfl.htm"><b>SLI_RECEIVE</b></a>, and <a href="luac04_2lr5.htm"><b>SLI_SEND</b></a>.</p>
<p>
When <b>SLI_OPEN</b> is posted with a primary return code other than LUA_OK or LUA_IN_PROGRESS, the command did not successfully establish a session.</p>
<p>
When using <b>SLI_OPEN</b>, a Windows LUA application must provide a session initialization type. Valid types are:
<ul>
<li>
<a href="luac04_2529.htm">Secondary with INITSELF</a></li>
<li>
<a href="luac04_19k1.htm">Secondary with an unformatted LOGON message</a></li>
<li>
<a href="luac04_9jfl.htm">Primary waiting for a BIND command</a></li>
<li>
<a href="luac04_5jj5.htm">Primary with SSCP access</a></li>
</ul>
<h4>See Also</h4>
<p>
<a href="luac03_37z5.htm"><b>RUI_INIT</b></a>, <a href="#_sna_sli_open_lua"><b>SLI_OPEN</b></a>, <a href="luac04_2nfl.htm"><b>SLI_RECEIVE</b></a>, <a href="luac04_2lr5.htm"><b>SLI_SEND</b></a></p>
<p>&nbsp;</p></body>
</HTML>

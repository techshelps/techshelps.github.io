<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RUI_BID</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_sna_rui_bid_lua"></a>RUI_BID</h1>
<p>
The <b>RUI_BID</b> verb notifies the RUI application that a message is waiting to be read using <a href="luac03_7dwh.htm"><b>RUI_READ</b></a>.</p>
<p>
The following structure describes the <b>LUA_COMMON</b> member of the VCB used by <b>RUI_BID</b>.</p>
<pre><code>struct LUA_COMMON {
    unsigned short lua_verb;
    unsigned short lua_verb_length;
    unsigned short lua_prim_rc;
    unsigned long  lua_sec_rc;
    unsigned short lua_opcode;
    unsigned long  lua_correlator;
    unsigned char  lua_luname[8];
    unsigned short lua_extension_list_offset;
    unsigned short lua_cobol_offset;
    unsigned long  lua_sid;
    unsigned short lua_max_length;
    unsigned short lua_data_length;
    char FAR *     lua_data_ptr;
    unsigned long  lua_post_handle;
    struct LUA_TH  lua_th;
    struct LUA_RH  lua_rh;
    struct LUA_FLAG1 lua_flag1;
    unsigned char  lua_message_type;
    struct LUA_FLAG2 lua_flag2; 
    unsigned char  lua_resv56[7];
    unsigned char  lua_encr_decr_option;
};
 </code></pre>
<p>
The following union describes the <b>LUA_SPECIFIC</b> member of the VCB used by <b>RUI_BID</b>. Other union members are omitted for clarity.</p>
<pre><code>union LUA_SPECIFIC {
    unsigned char lua_peek_data[12];
};
 </code></pre>
<h4>Members</h4>
<dl>
<dt>
<b>lua_verb</b></dt>
<dd>
Supplied parameter. Contains the verb code, LUA_VERB_RUI for RUI verbs.</dd>
<dt>
<b>lua_verb_length</b></dt>
<dd>
Supplied parameter. Specifies the length in bytes of the LUA VCB. It must contain the length of the verb record being issued.</dd>
<dt>
<b>lua_prim_rc</b></dt>
<dd>
Primary return code set by LUA at the completion of the verb. The valid return codes vary depending on the LUA verb issued.</dd>
<dt>
<b>lua_sec_rc</b></dt>
<dd>
Secondary return code set by LUA at the completion of the verb. The valid return codes vary depending on the LUA verb issued.</dd>
<dt>
<b>lua_opcode</b></dt>
<dd>
Supplied parameter. Contains the LUA command code (verb operation code) for the verb to be issued, LUA_OPCODE_RUI_BID.</dd>
<dt>
<b>lua_correlator</b></dt>
<dd>
Supplied parameter. Contains a user-supplied value that links the verb with other user-supplied information. LUA does not use or change this information. This parameter is optional.</dd>
<dt>
<b>lua_luname</b></dt>
<dd>
Supplied parameter. Specifies the ASCII name of the local LU used by the Windows LUA session.
<p>
<b>RUI_BID</b> only requires this parameter if <b>lua_sid</b> is zero.

<p>
This parameter is eight bytes long, padded on the right with spaces (0x20) if the name is shorter than eight characters.
</dd>
<dt>
<b>lua_extension_list_offset</b></dt>
<dd>
Not used by RUI in Microsoft® SNA Server and should be set to zero.</dd>
<dt>
<b>lua_cobol_offset</b></dt>
<dd>
Not used by LUA in SNA Server and should be zero.</dd>
<dt>
<b>lua_sid</b></dt>
<dd>
Supplied parameter. Specifies the session identifier and is returned by <a href="luac04_7bxd.htm"><b>SLI_OPEN</b></a> and <a href="luac03_37z5.htm"><b>RUI_INIT</b></a>. Other verbs use this parameter to identify the session used for the command. If other verbs use the <b>lua_luname</b> parameter to identify sessions, set the <b>lua_sid</b> parameter to zero.</dd>
<dt>
<b>lua_max_length</b></dt>
<dd>
Not used by <b>RUI_BID</b> and should be set to zero. </dd>
<dt>
<b>lua_data_length</b></dt>
<dd>
Returned parameter. Specifies the length of data returned in <b>lua_peek_data</b> for <b>RUI_BID</b>.</dd>
<dt>
<b>lua_data_ptr</b></dt>
<dd>
Pointer to the application-supplied buffer that contains the data to be sent for <a href="luac04_2lr5.htm"><b>SLI_SEND</b></a> and <a href="luac03_7uap.htm"><b>RUI_WRITE</b></a> or that will receive data for <a href="luac04_2nfl.htm"><b>SLI_RECEIVE</b></a> and <a href="luac03_7dwh.htm"><b>RUI_READ</b></a>. For other RUI and SLI verbs, this parameter is not used and should be set to zero.</dd>
<dt>
<b>lua_post_handle</b></dt>
<dd>
Supplied parameter. Used under Microsoft® Windows NT® and Microsoft® Windows® 95 if asynchronous notification is to be accomplished by events. This variable contains the handle of the event to be signaled or a window handle.
<p>
For all other environments, this parameter is reserved and should be set to zero.
</dd>
<dt>
<b>lua_th</b></dt>
<dd>
Returned parameter. Contains the SNA transmission header (TH) of the message received. Various subparameters are set for write functions and returned for read and bid functions. Its subparameters are as follows:
<dl>
<dt>
<b>lua_th.flags_fid</b></dt>
<dd>
Format identification type 2, four bits.</dd>
<dt>
<b>lua_th.flags_mpf</b></dt>
<dd>
Segmenting mapping field, two bits. Defines the type of data segment. The following values are valid:
<p>
<b>0x00</b>Middle segment<br>
<b>0x04</b>Last segment<br>
<b>0x08</b>First segment<br>
<b>0x0C</b>Only segment
</dd>
<dt>
<b>lua_th.flags_odai</b></dt>
<dd>
Originating address field–destination address field (OAF–DAF) assignor indicator, one bit.</dd>
<dt>
<b>lua_th.flags_efi</b></dt>
<dd>
Expedited flow indicator, one bit.</dd>
<dt>
<b>lua_th.daf</b></dt>
<dd>
Destination address field (DAF), an unsigned char.</dd>
<dt>
<b>lua_th.oaf</b></dt>
<dd>
Originating address field (OAF), an unsigned char.</dd>
<dt>
<b>lua_th.snf</b></dt>
<dd>
Sequence number field, an unsigned char[2].
</dd>
</dl>
</dd>
<dt>
<b>lua_rh</b></dt>
<dd>
Returned parameter. Contains the SNA request/response header (RH) of the message sent or received. It is set for the write function and returned by the read and bid functions. Its subparameters are as follows:
<dl>
<dt>
<b>lua_rh.rri</b></dt>
<dd>
Request-response indicator, one bit.</dd>
<dt>
<b>lua_rh.ruc</b></dt>
<dd>
RU category, two bits. The following values are valid:
<p>
<b>LUA_RH_FMD</b>  (<b>0x00</b>)FM data segment<br>
<b>LUA_RH_NC</b>  (<b>0x20</b>)Network control<br>
<b>LUA_RH_DFC</b>  (<b>0x40</b>)Data flow control<br>
<b>LUA_RH_SC</b>  (<b>0x60</b>)Session control
</dd>
<dt>
<b>lua_rh.fi</b></dt>
<dd>
Format indicator, one bit.</dd>
<dt>
<b>lua_rh.sdi</b></dt>
<dd>
Sense data included indicator, one bit.</dd>
<dt>
<b>lua_rh.bci</b></dt>
<dd>
Begin chain indicator, one bit.</dd>
<dt>
<b>lua_rh.eci</b></dt>
<dd>
End chain indicator, one bit.</dd>
<dt>
<b>lua_rh.dr1i</b></dt>
<dd>
Definite response 1 indicator, one bit.</dd>
<dt>
<b>lua_rh.dr2i</b></dt>
<dd>
Definite response 2 indicator, one bit.</dd>
<dt>
<b>lua_rh.ri</b></dt>
<dd>
Exception response indicator (for a request), or response type indicator (for a response), one bit.</dd>
<dt>
<b>lua_rh.qri</b></dt>
<dd>
Queued response indicator, one bit.</dd>
<dt>
<b>lua_rh.pi</b></dt>
<dd>
Pacing indicator, one bit.</dd>
<dt>
<b>lua_rh.bbi</b></dt>
<dd>
Begin bracket indicator, one bit.</dd>
<dt>
<b>lua_rh.ebi</b></dt>
<dd>
End bracket indicator, one bit.</dd>
<dt>
<b>lua_rh.cdi</b></dt>
<dd>
Change direction indicator, one bit.</dd>
<dt>
<b>lua_rh.csi</b></dt>
<dd>
Code selection indicator, one bit.</dd>
<dt>
<b>lua_rh.edi</b></dt>
<dd>
Enciphered data indicator, one bit.</dd>
<dt>
<b>lua_rh.pdi</b></dt>
<dd>
Padded data indicator, one bit.
</dd>
</dl>
</dd>
<dt>
<b>lua_flag1</b></dt>
<dd>
Supplied parameter. Contains a data structure containing flags for messages supplied by the application. Its subparameters are as follows:
<dl>
<dt>
<b>lua_flag1.bid_enable</b></dt>
<dd>
Bid enable indicator, one bit. </dd>
<dt>
<b>lua_flag1.close_abend</b></dt>
<dd>
Close immediate indicator, one bit. </dd>
<dt>
<b>lua_flag1.nowait</b></dt>
<dd>
No wait for data flag, one bit. </dd>
<dt>
<b>lua_flag1.sscp_exp</b></dt>
<dd>
SSCP expedited flow, one bit.</dd>
<dt>
<b>lua_flag1.sscp_norm</b></dt>
<dd>
SSCP normal flow, one bit.</dd>
<dt>
<b>lua_flag1.lu_exp</b></dt>
<dd>
LU expedited flow, one bit.</dd>
<dt>
<b>lua_flag1.lu_norm</b></dt>
<dd>
LU normal flow, one bit.
</dd>
</dl>
</dd>
<dt>
<b>lua_message_type</b></dt>
<dd>
Returned parameter. Specifies the type of SNA message indicated to <b>RUI_BID</b>. Possible values are:
<p>
LUA_MESSAGE_TYPE_LU_DATA

<p>
LUA_MESSAGE_TYPE_SSCP_DATA

<p>
LUA_MESSAGE_TYPE_BID

<p>
LUA_MESSAGE_TYPE_BIND

<p>
LUA_MESSAGE_TYPE_BIS

<p>
LUA_MESSAGE_TYPE_CANCEL

<p>
LUA_MESSAGE_TYPE_CHASE

<p>
LUA_MESSAGE_TYPE_CLEAR

<p>
LUA_MESSAGE_TYPE_CRV

<p>
LUA_MESSAGE_TYPE_LUSTAT_LU

<p>
LUA_MESSAGE_TYPE_LUSTAT_SSCP

<p>
LUA_MESSAGE_TYPE_QC

<p>
LUA_MESSAGE_TYPE_QEC

<p>
LUA_MESSAGE_TYPE_RELQ

<p>
LUA_MESSAGE_TYPE_RQR

<p>
LUA_MESSAGE_TYPE_RTR

<p>
LUA_MESSAGE_TYPE_SBI

<p>
LUA_MESSAGE_TYPE_SHUTD

<p>
LUA_MESSAGE_TYPE_SIGNAL

<p>
LUA_MESSAGE_TYPE_SDT

<p>
LUA_MESSAGE_TYPE_STSN

<p>
LUA_MESSAGE_TYPE_UNBIND


<p>
The SLI receives and responds to the bind, crv, and stsn requests through the LUA interface extension routines.

<p>
lu_data, lustat_lu, lustat_sscp, and sscp_data are not SNA commands.
</dd>
<dt>
<b>lua_flag2</b></dt>
<dd>
Returned parameter. Contains flags for messages returned by LUA. Its subparameters are as follows:
<dl>
<dt>
<b>lua_flag2.bid_enable</b></dt>
<dd>
Indicates that <b>RUI_BID</b> was successfully re-enabled if set to 1.</dd>
<dt>
<b>lua_flag2.async</b></dt>
<dd>
Indicates that the LUA interface verb completed asynchronously if set to 1.</dd>
<dt>
<b>lua_flag2.sscp_exp </b></dt>
<dd>
Indicates SSCP expedited flow if set to 1.</dd>
<dt>
<b>lua_flag2.sscp_norm</b></dt>
<dd>
Indicates SSCP normal flow if set to 1.</dd>
<dt>
<b>lua_flag2.lu_exp</b></dt>
<dd>
Indicates LU expedited flow if set to 1.</dd>
<dt>
<b>lua_flag2.lu_norm</b></dt>
<dd>
Indicates LU normal flow if set to 1.
</dd>
</dl>
</dd>
<dt>
<b>lua_resv56</b></dt>
<dd>
Reserved and should be set to zero.</dd>
<dt>
<b>lua_encr_decr_option</b></dt>
<dd>
Reserved and should be set to zero.</dd>
<dt>
<b>lua_peek_data</b></dt>
<dd>
The union member of <b>LUA_SPECIFIC</b> used by the <b>RUI_BID </b>and <a href="luac04_5z8h.htm"><b>SLI_BID</b></a><b> </b>verbs. Returned parameter. Contains up to 12 bytes of the data waiting to be read.
</dd>
</dl>
<h4>Return Codes</h4>
<dl>
<dt>
lua_ok</dt>
<dd>
Primary return code; the verb executed successfully.</dd>
<dt>
lua_canceled</dt>
<dd>
Primary return code; the verb did not complete successfully because it was canceled by another verb.
<dl>
<dt>
lua_terminated</dt>
<dd>
Secondary return code; <a href="luac03_2c69.htm"><b>RUI_TERM</b></a> was issued while this verb was pending.
</dd>
</dl>
</dd>
<dt>
LUA_PARAMETER_CHECK</dt>
<dd>
Primary return code; the verb did not execute because of a parameter error.
<dl>
<dt>
LUA_BAD_SESSION_ID</dt>
<dd>
Secondary return code; an invalid value for <b>lua_sid </b>was specified in the VCB.</dd>
<dt>
LUA_BID_ALREADY_ENABLED</dt>
<dd>
Secondary return code; <b>RUI_BID</b> was rejected because a previous <b>RUI_BID</b> was already outstanding. Only one <b>RUI_BID</b> can be outstanding at any one time.</dd>
<dt>
LUA_INVALID_POST_HANDLE</dt>
<dd>
Secondary return code; for a Windows NT or Windows 95 system using events as the asynchronous posting method, the Windows LUA VCB does not contain a valid event handle.
<p>
For a Windows version 3.<i>x</i> system, the Windows LUA VCB does not contain the valid procedure address returned by the <b>MakeProcInstance</b> command.

<p>
For OS/2, the Windows LUA VCB does not contain a valid semaphore or queue handle, which is needed when the verb completes asynchronously.
</dd>
<dt>
LUA_RESERVED_FIELD_NOT_ZERO</dt>
<dd>
Secondary return code; a reserved field in the verb record, or a parameter not used by this verb, was set to a nonzero value.</dd>
<dt>
LUA_VERB_LENGTH_INVALID</dt>
<dd>
Secondary return code; an LUA verb was issued with the value of <b>lua_verb_length</b> unexpected by LUA.
</dd>
</dl>
</dd>
<dt>
LUA_STATE_CHECK</dt>
<dd>
Primary return code; the verb did not execute because it was issued in an invalid state.
<dl>
<dt>
LUA_NO_RUI_SESSION</dt>
<dd>
Secondary return code; <a href="luac03_37z5.htm"><b>RUI_INIT</b></a> has not yet completed successfully for the LU name specified on this verb.
</dd>
</dl>
</dd>
<dt>
LUA_UNSUCCESSFUL</dt>
<dd>
Primary return code; the verb record supplied was valid, but the verb did not complete successfully.
<dl>
<dt>
LUA_INVALID_PROCESS</dt>
<dd>
Secondary return code; the process that issued this verb was not the same process that issued <b>RUI_INIT</b> for this session. Only the process that started a session can issue verbs on that session.
</dd>
</dl>
</dd>
<dt>
LUA_NEGATIVE_RSP</dt>
<dd>
Primary return code; LUA detected an error in the data received from the host. Instead of passing the received message to the application on <a href="luac03_7dwh.htm"><b>RUI_READ</b></a>, LUA discards the message (and the rest of the chain if it is in a chain), and sends a negative response to the host.
<p>
LUA informs the application on a subsequent <b>RUI_READ</b> or <b>RUI_BID</b> that a negative response was sent.

<p>
The secondary return code contains the sense code sent to the host on the negative response. See <a href="luac02_5y1t.htm">SNA Considerations</a> for information on interpreting the sense code values that can be returned.

<p>
A zero secondary return code indicates that, following a previous <a href="luac03_7uap.htm"><b>RUI_WRITE</b></a> of a negative response to a message in the middle of a chain, LUA has now received and discarded all messages from this chain.
</dd>
<dt>
LUA_COMM_SUBSYSTEM_ABENDED</dt>
<dd>
Primary return code; indicates one of the following conditions:
<ul>
<li>
The node used by this conversation encountered an ABEND.</li>
<li>
The connection between the TP and the PU 2.1 node has been broken (a LAN error).</li>
<li>
The SnaBase at the TP's computer encountered an ABEND.</li>
</ul>
</dd>
<dt>
LUA_SESSION_FAILURE</dt>
<dd>
Primary return code; a required SNA Server component has terminated.
<dl>
<dt>
LUA_LU_COMPONENT_DISCONNECTED</dt>
<dd>
Secondary return code; indicates that the LUA session has failed because of a problem with the link service or with the host LU.</dd>
<dt>
LUA_RUI_LOGIC_ERROR</dt>
<dd>
Secondary return code; an internal error was detected within LUA. This error should not occur during normal operation.
</dd>
</dl>
</dd>
<dt>
LUA_INVALID_VERB</dt>
<dd>
Primary return code; either the verb code or the operation code, or both, is invalid. The verb did not execute.</dd>
<dt>
LUA_STACK_TOO_SMALL</dt>
<dd>
Primary return code; the stack size of the application is too small to execute the verb. Increase the stack size of your application.</dd>
<dt>
LUA_COMM_SUBSYSTEM_NOT_LOADED</dt>
<dd>
Primary return code; a required component could not be loaded or has terminated while processing the verb. Thus, communication could not take place. Contact the system administrator for corrective action.</dd>
<dt>
LUA_UNEXPECTED_DOS_ERROR</dt>
<dd>
Primary return code; after issuing an operating system call, an unexpected operating system return code was received and is specified in the secondary return code.
</dd>
</dl>
<h4>Remarks</h4>
<p>
<b>RUI_BID</b> is used by applications that require notification that a message is waiting to be read. This allows the application to determine how it will handle the message before issuing <a href="luac03_7dwh.htm"><b>RUI_READ</b></a>.</p>
<p>
When a message is available, <b>RUI_BID</b> returns with details of the message flow on which it was received, the message type, the TH and RH of the message, and up to 12 bytes of message data.</p>
<p>
The main difference between <b>RUI_BID</b> and <b>RUI_READ</b> is that <b>RUI_BID</b> allows the application to check the data without removing it from the incoming message queue, so it can be left and accessed later. <b>RUI_READ</b> removes the message from the queue, so when the application reads the data it must also process it.</p>
<p>
Note the following when using <b>RUI_BID</b>:
<ul>
<li>
<a href="luac03_37z5.htm"><b>RUI_INIT</b></a> must complete successfully before this verb is issued.</li>
<li>
Only one <b>RUI_BID</b> can be outstanding at any one time.</li>
<li>
After <b>RUI_BID</b> has completed successfully, it can be reissued by setting <b>lua_flag1.bid_enable</b> on a subsequent <a href="luac03_7dwh.htm"><b>RUI_READ</b></a>. If the verb is reissued in this way, the application must not free or modify the storage associated with the <b>RUI_BID</b> record.</li>
<li>
If a message arrives from the host when <b>RUI_READ</b> and <b>RUI_BID</b> are both outstanding, <b>RUI_READ</b> completes and <b>RUI_BID</b> is left in progress.</li>
</ul>
<p>
Each message that arrives is bid only once. After <b>RUI_BID</b> indicates that data is waiting on a particular session flow, the application issues <b>RUI_READ</b> to receive the data. Any subsequent <b>RUI_BID</b> does not report data arriving on that session flow until the message that was bid has been accepted by issuing <b>RUI_READ</b>.</p>
<p>
In general, the <b>lua_data_length</b> parameter returned on this verb indicates only the length of data in <b>lua_peek_data</b>, not the total length of data on the waiting message (except when a value of less than 12 is returned). The application should ensure that the data length on <b>RUI_READ</b> that accepts the data is sufficient to contain the message.</p>
<h4>See Also</h4>
<p>
<a href="luac03_37z5.htm"><b>RUI_INIT</b></a>, <a href="luac03_7dwh.htm"><b>RUI_READ</b></a>, <a href="luac03_2c69.htm"><b>RUI_TERM</b></a>, <a href="luac03_7uap.htm"><b>RUI_WRITE</b></a>, <a href="luac04_7bxd.htm"><b>SLI_OPEN</b></a></p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Issuing a CSV</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_sna_issuing_a_csv_appc"></a>Issuing a CSV</h2>
<p>
The procedure for issuing a CSV is shown in the following sample code that uses <a href="appc08c_2vvn.htm"><b>CONVERT</b></a>.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To issue a CSV</h5>
<ol>
<li>
Create a structure variable from the VCB structure that applies to the verb to be issued.<pre><code>#include &lt;wincsv.h&gt;
    .
    .
struct convert  conv_block;
 </code></pre>
<p>
The VCB structures are declared in the WINCSV.H file; one of these structures is named <b>CONVERT</b>.
</li>
<li>
Clear (set to zero) the variables within the structure.<pre><code>memset( conv_block, '\0', sizeof( conv_block ) );
 </code></pre>
<p>
This procedure is not required. However, it helps in debugging and reading the contents of memory. It also eliminates the possibility that future versions of a verb are sensitive to fields that are ignored in the current version.
</li>
<li>
Assign values to the required VCB variables.<pre><code>conv_block.opcode = SV_CONVERT;
conv_block.direction = SV_ASCII_TO_EBCDIC;
conv_block.char_set = SV_AE;
conv_block.len = sizeof(tpstart_name);
conv_block.source = (LPBYTE) tpstart_name;
conv_block.target = (LPBYTE) tpstart.tp_name;
 </code></pre>
<p>
The values SV_CONVERT, SV_ASCII_TO_EBCDIC, and SV_AE are symbolic constants representing integers. These constants are defined in the WINCSV.H file.
<p>
The character array TPSTART_NAME contains an ASCII string to be converted to EBCDIC and placed in the character array TPSTART.TP_NAME.
</li>
<li>
Invoke the verb. The only parameter is a pointer to the address of the structure containing the VCB for the verb.<pre><code>ACSSVC((LONG) &amp;conv_block);
 </code></pre>
<p>
You can also use the following statement:
<pre><code>ACSSVC_C((LONG) &amp;conv_block);
 </code></pre>
</li>
<li>
Use the values returned by the verb.<pre><code>if( conv_block.primary_rc == SV_OK ) {
/* other statements */
    .
    .
    .</code></pre>
</li>
</ol>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

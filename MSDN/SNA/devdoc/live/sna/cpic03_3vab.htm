<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Flush</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_sna_flush_cpic"></a>Flush</h1>
<p>
The <b>Flush</b> call (function name <b>cmflus</b>) sends the contents of the local LU's send buffer to the partner LU (and program). If the send buffer is empty, no action takes place.</p>
<pre><code><b>CM_ENTRY Flush(
  unsigned char FAR</b><i> *conversation_ID</i><b>,  </b>
<b>  CM_INT32 FAR</b><i> *return_code            </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>conversation_ID</i></dt>
<dd>
Supplied parameter. Specifies the identifier for the conversation. The value of this parameter was returned by <a href="cpic03_0jhf.htm"><b>Initialize_Conversation</b></a> or <a href="cpic03_70df.htm"><b>Accept_Conversation</b></a>.</dd>
<dt>
<i>return_code</i></dt>
<dd>
The code returned from this call. The valid return codes are listed below.
</dd>
</dl>
<h4>Return Codes</h4>
<dl>
<dt>
cm_ok</dt>
<dd>
Primary return code; the call executed successfully.</dd>
<dt>
cm_operation_not_accepted</dt>
<dd>
Primary return code; a previous operation on this conversation is incomplete.</dd>
<dt>
cm_operation_incomplete</dt>
<dd>
Primary return code; the operation has not completed (processing mode is nonblocking only) and is still in progress. The program can issue <a href="cpic03_6un7.htm"><b>Wait_For_Conversation</b></a> to await the completion of the operation, or <a href="cpic03_017n.htm"><b>Cancel_Conversation</b></a> to cancel the operation and conversation. If <a href="cpic03_3kir.htm"><b>Specify_Windows_Handle</b></a> has been called, the application should wait for notification by a Windows message and not call <b>Wait_For_Conversation</b>.</dd>
<dt>
cm_program_parameter_check</dt>
<dd>
Primary return code; the value specified by <i>conversation_ID</i> is invalid.</dd>
<dt>
cm_program_state_check</dt>
<dd>
Primary return code; the conversation was not in SEND or SEND_PENDING state when the program issued this call.</dd>
<dt>
cm_product_specific_error</dt>
<dd>
Primary return code; a product-specific error occurred and has been logged in the product's error log.
</dd>
</dl>
<h4>State Changes</h4>
<p>
The conversation must be in SEND or SEND_PENDING state.</p>
<p>
If the call completes successfully, (<i>return_code</i> is cm_ok), the conversation is in SEND state.</p>
<p>
Other return codes result in no state change.</p>
<h4>Remarks</h4>
<p>
Data processed by <a href="cpic03_94ir.htm"><b>Send_Data</b></a> accumulates in the local LU's send buffer until one of the following happens:
<ul>
<li>
The local program issues the <b>Flush</b> call or other call that flushes the LU's send buffer. (Some send types, set by <a href="cpic03_2zkz.htm"><b>Set_Send_Type</b></a>, include flush functionality.)</li>
<li>
The buffer is full.</li>
</ul>
<p>
The allocation request generated by <a href="cpic03_2krn.htm"><b>Allocate</b></a> and error information generated by <a href="cpic03_2j6r.htm"><b>Send_Error</b></a> are also buffered.</p>
<p>&nbsp;</p></body>
</HTML>

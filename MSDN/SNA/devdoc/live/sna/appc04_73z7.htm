<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SET_TP_PROPERTIES</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_sna_set_tp_properties_appc"></a>SET_TP_PROPERTIES</h1>
<p>
The <b>SET_TP_PROPERTIES</b> verb allows a TP to set its logical unit-of-work identifiers (LUWIDs) to either an existing value, by providing the LUWIDs, or request that Microsoft® SNA Server generate new ones and use them from then on. When the LUWID is generated by SNA Server, it is guaranteed to be unique. This verb is used only if Sync Point support is enabled.</p>
<p>
The following structure describes the verb control block used by the <b>SET_TP_PROPERTIES</b> verb.</p>
<pre><code>struct set_tp_properties {
    unsigned short  opcode;
    unsigned char   opext;
    unsigned char   reserv2;
    unsigned short  primary_rc;
    unsigned long   secondary_rc;
    unsigned char   tp_id[8];
    unsigned char   set_prot_id;
    unsigned char   new_prot_id;
    unsigned char   prot_id[26];
    unsigned char   set_unprot_id;
    unsigned char   new_unprot_id;
    unsigned char   unprot_id[26];
    unsigned char   set_user_id;
    unsigned char   reserv3;
    unsigned char   user_id[10];
    unsigned char   reserv4[10];
}; 
 </code></pre>
<h4>Members</h4>
<dl>
<dt>
<b>opcode</b></dt>
<dd>
Supplied parameter. Specifies the verb operation code, AP_SET_TP_PROPERTIES.</dd>
<dt>
<b>opext</b></dt>
<dd>
Supplied parameter. Specifies the verb operation extension. The AP_EXTD_VCB bit must be set to indicate that the <b>set_tp_properties</b> structure requires Sync Point support. </dd>
<dt>
<b>primary_rc</b></dt>
<dd>
Returned parameter. Specifies the primary return code set by APPC at the completion of the verb. The valid return codes vary depending on the APPC verb issued. See Return Codes for valid error codes for this verb.</dd>
<dt>
<b>secondary_rc</b></dt>
<dd>
Returned parameter. Specifies the secondary return code set by APPC at the completion of the verb. The valid return codes vary depending on the APPC verb issued. See Return Codes for valid error codes for this verb.</dd>
<dt>
<b>tp_id</b></dt>
<dd>
Supplied parameter. Identifies the local TP. The value of this parameter was returned by <a href="appc04_0fs3.htm"><b>TP_STARTED</b></a> in the invoking TP or by <a href="appc05b_0m77.htm"><b>RECEIVE_ALLOCATE</b></a> in the invoked TP.</dd>
<dt>
<b>set_prot_id</b></dt>
<dd>
Supplied parameter. Indicates whether the <b>prot_id</b> member should be modified. Legal values are AP_YES or AP_NO.</dd>
<dt>
<b>new_prot_id</b></dt>
<dd>
Supplied parameter. Indicates whether SNA Server should use the supplied <b>prot_id </b>LUWID member or create a new LUWID. Legal values are AP_YES (create a new LUWID) or AP_NO (use the supplied LUWID).</dd>
<dt>
<b>prot_id</b></dt>
<dd>
This member is the protected logical unit-of-work identifier for the transaction in which the TP is participating. It is ignored if <b>set_prot_id </b>is AP_NO. It is a supplied parameter if <b>new_unprot_id</b> is AP_NO or a returned parameter if <b>new_unprot_id</b> is AP_YES.
<p>
Several TPs can be involved in a transaction. This identifier, which is assigned on behalf of the TP initiating the transaction, allows the conversation that makes up the transaction to be logically connected.

<p>
The <b>prot_id</b> can be represented as an <b>luw_id_overlay</b> structure with the following fields:

<pre><code>typedef struct   luw_id_overlay {
    unsigned char  fqla_name_len;
    unsigned char  fqla_name[17];
    nsigned char   instance[6];
    unsigned char  sequence[2];
} LUW_ID_OVERLAY;
 </code></pre>

<dl>
<dt>
<b>luw_id.fqla_name_len</b></dt>
<dd>
A 1-byte length of the fully qualified LU name for the LU of the originating TP.</dd>
<dt>
<b>luw_id.fqla_name</b></dt>
<dd>
The fully qualified name of the LU for the originating TP. The name is returned as a 17-byte EBCDIC string, consisting of the NETID, a period, and the LU name. If the length of the name is fewer than 17 bytes, the <b>instance</b> and <b>sequence</b> numbers follow immediately. (Note that because of this, you should not use the fields of the <b>luw_id_overlay</b> structure to access those values. These are provided for compatibility only).</dd>
<dt>
<b>luw_id.instance</b></dt>
<dd>
A 6-byte string uniquely generated by the LU for the originating TP.</dd>
<dt>
<b>luw_id.sequence</b></dt>
<dd>
A 2-byte number that indicates the segment of unit-of-work. (This is always set to 1 if Sync Point is not supported.)
</dd>
</dl>

<p>
If the <b>luw_id</b> length is fewer than 26 bytes, it is padded on the right with EBCDIC spaces.
</dd>
<dt>
<b>set_unprot_id</b></dt>
<dd>
Supplied parameter. Indicates whether the <b>unprot_id</b> member should be modified. Legal values are AP_YES or AP_NO.</dd>
<dt>
<b>new_unprot_id</b></dt>
<dd>
Supplied parameter. Indicates whether SNA Server should use the supplied <b>unprot_id </b>LUWID member or create a new LUWID. Legal values are AP_YES (create a new LUWID) or AP_NO (use the supplied LUWID).</dd>
<dt>
<b>unprot_id</b></dt>
<dd>
This member is the unprotected logical unit-of-work identifier for the transaction in which the TP is participating. It is ignored if <b>set_unprot_id </b>is AP_NO. It is a supplied parameter if <b>new_unprot_id</b> is AP_NO or a returned parameter if <b>new_unprot_id</b> is AP_YES.
<p>
Several TPs can be involved in a transaction. This identifier, which is assigned on behalf of the TP initiating the transaction, allows the conversation that makes up the transaction to be logically connected.

<p>
The <b>prot_id</b> can be represented as an <b>luw_id_overlay</b> structure with the following fields:

<pre><code>typedef struct   luw_id_overlay {
    unsigned char  fqla_name_len;
    unsigned char  fqla_name[17];
    nsigned char   instance[6];
    unsigned char  sequence[2];
} LUW_ID_OVERLAY;
 </code></pre>

<dl>
<dt>
<b>luw_id.fqla_name_len</b></dt>
<dd>
A 1-byte length of the fully qualified LU name for the LU of the originating TP.</dd>
<dt>
<b>luw_id.fqla_name</b></dt>
<dd>
The fully qualified name of the LU for the originating TP. The name is returned as a 17-byte EBCDIC string, consisting of the NETID, a period, and the LU name. If the length of the name is fewer than 17 bytes, the <b>instance</b> and <b>sequence</b> numbers follow immediately. (Note that because of this, you should not use the fields of the <b>luw_id_overlay</b> structure to access those values. These are provided for compatibility only).</dd>
<dt>
<b>luw_id.instance</b></dt>
<dd>
A 6-byte string uniquely generated by the LU for the originating TP.</dd>
<dt>
<b>luw_id.sequence</b></dt>
<dd>
A 2-byte number that indicates the segment of unit-of-work. (This is always set to 1 if Sync Point is not supported.)
</dd>
</dl>

<p>
If the <b>luw_id</b> length is fewer than 26 bytes, it is padded on the right with EBCDIC spaces.
</dd>
<dt>
<b>set_user_id</b></dt>
<dd>
Supplied parameter. Indicates whether the <b>user_id</b> member should be modified. Legal values are AP_YES or AP_NO.</dd>
<dt>
<b>user_id</b></dt>
<dd>
Supplied parameter. Indicates the <b>user_id</b> that should be used by the initiating TP in the allocation request. The name is a 10-byte EBCDIC string, padded on the right with EBCDIC spaces. This parameter is ignored if <b>set_user_id</b> is AP_NO.
</dd>
</dl>
<h4>Return Codes</h4>
<dl>
<dt>
ap_ok</dt>
<dd>
Primary return code; the verb executed successfully.</dd>
<dt>
ap_parameter_check</dt>
<dd>
Primary return code; the verb did not execute because of a parameter error.
<dl>
<dt>
ap_bad_tp_id</dt>
<dd>
Secondary return code; the value of <b>tp_id</b> did not match a TP identifier assigned by APPC.
</dd>
</dl>
</dd>
<dt>
ap_comm_subsystem_abended</dt>
<dd>
Primary return code; indicates one of the following conditions:
<ul>
<li>
The node used by this conversation encountered an ABEND.</li>
<li>
The connection between the TP and the PU 2.1 node has been broken (a LAN error).</li>
<li>
The SnaBase at the TP's computer encountered an ABEND.</li>
</ul>

<p>
The system administrator should examine the error log to determine the reason for the ABEND.
</dd>
<dt>
ap_comm_subsystem_not_loaded</dt>
<dd>
Primary return code; a required component could not be loaded or terminated while processing the verb. Thus, communication could not take place. Contact the system administrator for corrective action.
<p>
When this return code is used with <a href="appc05a_1ckj.htm"><b>ALLOCATE</b></a> or <a href="appc05a_38f7.htm"><b>MC_ALLOCATE</b></a>, it can indicate that no communications subsystem could be found to support the local LU. (For example, the local LU alias specified with <a href="appc04_0fs3.htm"><b>TP_STARTED</b></a> is incorrect or has not been configured.) Note that if <b>lu_alias</b> or <b>mode_name</b> is fewer than eight characters, you must ensure that these fields are filled with spaces to the right. This error is returned if these parameters are not filled with spaces, since there is no node available that can satisfy the <b>ALLOCATE</b> or <b>MC_ALLOCATE</b> request.

<p>
When <b>ALLOCATE</b> or <b>MC_ALLOCATE</b> produces this return code for an SNA Server system configured with multiple nodes, there are two secondary return codes as follows:

<dl>
<dt>
0xF0000001</dt>
<dd>
Secondary return code; no nodes have been started.</dd>
<dt>
0xF0000002</dt>
<dd>
Secondary return code; at least one node has been started, but the local LU (when <b>TP_STARTED</b> is issued) is not configured on any active nodes. The problem could be either of the following:
<table cellspacing=4 cols=1>
<tr valign=top>
<td width=100%><font face="Symbol">·</font>&nbsp;&nbsp;&nbsp;&nbsp;The node with the local LU is not started.</td>
</tr>
<tr valign=top>
<td width=100%><font face="Symbol">·</font>&nbsp;&nbsp;&nbsp;&nbsp;The local LU is not configured.</td>
</tr>
</table><br>

</dd>
</dl>
</dd>
<dt>
ap_invalid_verb_segment</dt>
<dd>
Primary return code; the VCB extended beyond the end of the data segment.</dd>
<dt>
ap_stack_too_small</dt>
<dd>
Primary return code; the stack size of the application is too small to execute the verb. Increase the stack size of your application.</dd>
<dt>
ap_tp_busy</dt>
<dd>
Primary return code; the local TP has issued a call to APPC while APPC was processing another call for the same TP. This can occur if the local TP has multiple threads, and more than one thread is issuing APPC calls using the same <b>tp_id</b>.</dd>
<dt>
ap_unexpected_dos_error</dt>
<dd>
Primary return code; the operating system has returned an error to APPC while processing an APPC call from the local TP. The operating system return code is returned through the <b>secondary_rc.</b> It appears in Intel byte-swapped order. If the problem persists, consult the system administrator.
</dd>
</dl>
<h4>Remarks</h4>
<p>
This verb relates to the TP rather than a specification conversation, so the TP can issue the verb in any state. There is no state change.</p>
<p>
The <b>prot_id</b> and <b>unprot_id</b> members contain fields for <b>fqla_name_len</b> (the length of the fully qualified LU name of the LU originating the TP),<b> fqla_name</b> (the fully qualified name of the LU originating the TP), <b>instance</b> (generated uniquely by the LU originating the TP), and <b>sequence</b> (always set to 1 and indicating the segment of unit-of-work).</p>
<p>
It is the responsibility of the application (the Sync Point support component) to transmit the new LUWID PS header to the partner Sync Point support when the protected LUWID is changed. Similarly, when the new LUWID PS header is received, the application must inform the LU by issuing a <b>SET_TP_PROPERTIES</b> verb.</p>
<p>&nbsp;</p></body>
</HTML>

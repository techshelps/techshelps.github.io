<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Multithreaded Send and Receive TPs</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_sna_multithreaded_send_and_receive_tps_appc"></a>Multithreaded Send and Receive TPs</h1>
<p>
These multithreaded send and receive TPs are more advanced than the single-threaded equivalents. The samples located in the MSENDRCV subdirectory all use the asynchronous interface of APPC, with verb completion signaled by events (<a href="appc06_6bxf.htm"><b>WinAsyncAPPCEx</b></a>). These TPs show how to code multithreaded APPC applications with multiple conversations per thread. They are more complex than the single-threaded equivalents, but are also more realistic.</p>
<p>
If you are unfamiliar with APPC, examine the single-threaded TPs first. If you are unfamiliar with methods of creating threads or processing events in Microsoft® Windows NT® and Microsoft® Windows® 95, see the Microsoft® Platform SDK documentation along with the multithreaded TPs.</p>
<h4>Setup</h4>
<p>
There are three multithreaded send and receive routines:
<ul>
<li>
MSEND for sending</li>
<li>
MRCV for receiving</li>
<li>
MSENDRCV for simultaneous sending and receiving</li>
</ul>
<p>
To set up these TPs, create an appropriate APPC LU-LU-mode triplet. The default is SENDLU-RECVLU-#INTER, but this can be configured (see the sections that follow). To run a large number of simultaneous conversations, increase the session limits for #INTER or use another mode with large session limits.</p>
<p>
One obvious way of configuring these programs is to configure MSEND to run with MRCV; another way is to configure MSENDRCV to run with another copy of MSENDRCV. However, you can also configure MSEND to run with one or more copies of RECVTP (the single-threaded version) and MRCV to run with one or more copies of SENDTP. You can also configure MSENDRCV to run with MSEND, MRCV, SENDTP or RECVTP. For more information, see the sections that follow.</p>
<p>
One possible arrangement is to place SENDTP (single-threaded) on multiple client computers, and configure MRCV (multithreaded) on a server so that it interacts with all the TPs on the clients. Many other arrangements are possible.</p>
<h4>Input and Output</h4>
<p>
Each TP uses a configuration file for input. To name the file, use .CFG as the extension, and use the same base file name and directory location as the executable file (the TP itself).</p>
<p>
The following table shows examples of CFG files that could be used with MSEND and MRCV.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>Example of MSEND.CFG file</th>
<th align=left width=52%>Example of MRCV.CFG file</th>
</tr>
<tr valign=top>
<td width=48%><code>ResultFile=MSEND.OUT</code></td>
<td width=52%><code>TraceFile=MRCV.TRC</code></td>
</tr>
<tr valign=top>
<td width=48%><code>TraceFile=MSEND.TRC</code></td>
<td width=52%><code>LocalTPName=MRCVTP</code></td>
</tr>
<tr valign=top>
<td width=48%><code>RemoteTPName=MRCVTP</code></td>
<td width=52%><code>NumRcvConvs=32</code></td>
</tr>
<tr valign=top>
<td width=48%><code>LocalLUAlias=LUA</code></td>
<td width=52%><code>NumRcvThreads=4</code></td>
</tr>
<tr valign=top>
<td width=48%><code>RemoteLUAlias=LUB</code></td>
<td width=52%><code>RcvSize=4096</code></td>
</tr>
<tr valign=top>
<td width=48%><code>ModeName=#INTER</code></td>
<td width=52%></td>
</tr>
<tr valign=top>
<td width=48%><code>NumSendConvs=32</code></td>
<td width=52%></td>
</tr>
<tr valign=top>
<td width=48%><code>NumSends=128</code></td>
<td width=52%></td>
</tr>
<tr valign=top>
<td width=48%><code>ConfirmEvery=16</code></td>
<td width=52%></td>
</tr>
<tr valign=top>
<td width=48%><code>SendSize=256 </code></td>
<td width=52%></td>
</tr>
</table><br>
<p>
For MSEND, the configuration file (MSEND.CFG) can contain the following items, one per line, in any order. If a variable is not found in the file or the file is not present at all, the default is used.</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=24%>Line</th>
<th align=left width=29%>Default value</th>
<th align=left width=47%>Value to supply</th>
</tr>
<tr valign=top>
<td width=24%><code>ResultFile =</code></td>
<td width=29%>MSEND.OUT</td>
<td width=47%>File name to print timings to (located in default directory for MSEND)</td>
</tr>
<tr valign=top>
<td width=24%><code>TraceFile =</code></td>
<td width=29%>MSEND.TRC</td>
<td width=47%>Trace file name (located in default directory for MSEND)</td>
</tr>
<tr valign=top>
<td width=24%><code>LocalLUAlias =</code></td>
<td width=29%>SENDLU</td>
<td width=47%>Local LU alias</td>
</tr>
<tr valign=top>
<td width=24%><code>RemoteLUAlias =</code></td>
<td width=29%>RECVLU</td>
<td width=47%>Remote LU alias</td>
</tr>
<tr valign=top>
<td width=24%><code>ModeName =</code></td>
<td width=29%>#INTER</td>
<td width=47%>Mode name</td>
</tr>
<tr valign=top>
<td width=24%><code>RemoteTPName =</code></td>
<td width=29%>MRCVTP</td>
<td width=47%>Name of remote TP (for <a href="appc05a_38f7.htm"><b>MC_ALLOCATE</b></a>)</td>
</tr>
<tr valign=top>
<td width=24%><code>NumSendConvs =</code></td>
<td width=29%>4</td>
<td width=47%>Number of conversations to send</td>
</tr>
<tr valign=top>
<td width=24%><code>NumSends =</code></td>
<td width=29%>8</td>
<td width=47%>Number of <a href="appc05b_8iub.htm"><b>MC_SEND_DATA</b></a> verbs per conversation</td>
</tr>
<tr valign=top>
<td width=24%><code>SendSize =</code></td>
<td width=29%>256</td>
<td width=47%>Size in bytes of data sent each time</td>
</tr>
<tr valign=top>
<td width=24%><code>ConfirmEvery =</code></td>
<td width=29%>2</td>
<td width=47%>Number of <b>MC_SEND_DATA</b> verbs between <a href="appc05a_0b8j.htm"><b>MC_CONFIRM</b></a> verbs</td>
</tr>
</table><br>
<p>
The following lines are for MRCV:</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=24%>Line</th>
<th align=left width=29%>Default value</th>
<th align=left width=47%>Value to supply</th>
</tr>
<tr valign=top>
<td width=24%><code>TraceFile =</code></td>
<td width=29%>MRCV.TRC</td>
<td width=47%>Trace file name (located in default directory for MSEND)</td>
</tr>
<tr valign=top>
<td width=24%><code>LocalTPName =</code></td>
<td width=29%>MRCVTP</td>
<td width=47%>Name of local TP (for <a href="appc05b_0m77.htm"><b>RECEIVE_ALLOCATE</b></a>)</td>
</tr>
<tr valign=top>
<td width=24%><code>NumRcvConvs =</code></td>
<td width=29%>4</td>
<td width=47%>Number of conversations to receive</td>
</tr>
<tr valign=top>
<td width=24%><code>NumRcvThreads =</code></td>
<td width=29%>2</td>
<td width=47%>Number of threads to start for processing receive conversations</td>
</tr>
<tr valign=top>
<td width=24%><code>RcvSize =</code></td>
<td width=29%>4096</td>
<td width=47%>Size in bytes of receive buffer for <a href="appc05a_5qlf.htm"><b>MC_RECEIVE_AND_WAIT</b></a></td>
</tr>
</table><br>
<p>
The following table shows examples of configuration files (MSENDRCV.CFG) that could be used with MSENDRCV. Each row of the table (Example A and Example B) contains two files that work together on a pair of computers.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=49%>Example A of MSENDRCV.CFG</th>
<th align=left width=51%>Example B of MSENDRCV.CFG</th>
</tr>
<tr valign=top>
<td width=49%><code>ResultFile=MSENDRCV.OUT</code></td>
<td width=51%><code>ResultFile=MSENDRCV.OUT</code></td>
</tr>
<tr valign=top>
<td width=49%><code>TraceFile=MSENDRCV.TRC</code></td>
<td width=51%><code>TraceFile=MSENDRCV.TRC</code></td>
</tr>
<tr valign=top>
<td width=49%><code>LocalTPName=TPA</code></td>
<td width=51%><code>LocalTPName=TPB</code></td>
</tr>
<tr valign=top>
<td width=49%><code>RemoteTPName=TPB</code></td>
<td width=51%><code>RemoteTPName=TPA</code></td>
</tr>
<tr valign=top>
<td width=49%><code>LocalLUAlias=LUA</code></td>
<td width=51%><code>LocalLUAlias=LUB</code></td>
</tr>
<tr valign=top>
<td width=49%><code>RemoteLUAlias=LUB</code></td>
<td width=51%><code>RemoteLUAlias=LUA</code></td>
</tr>
<tr valign=top>
<td width=49%><code>ModeName=#INTER</code></td>
<td width=51%><code>ModeName=#INTER</code></td>
</tr>
<tr valign=top>
<td width=49%><code>NumRcvConvs=50</code></td>
<td width=51%><code>NumRcvConvs=25</code></td>
</tr>
<tr valign=top>
<td width=49%><code>NumRcvThreads=4</code></td>
<td width=51%><code>NumRcvThreads=4</code></td>
</tr>
<tr valign=top>
<td width=49%><code>RcvSize=4096</code></td>
<td width=51%><code>RcvSize=4096</code></td>
</tr>
<tr valign=top>
<td width=49%><code>NumSendConvs=25</code></td>
<td width=51%><code>NumSendConvs=50</code></td>
</tr>
<tr valign=top>
<td width=49%><code>NumSends=100</code></td>
<td width=51%><code>NumSends=100</code></td>
</tr>
<tr valign=top>
<td width=49%><code>ConfirmEvery=10</code></td>
<td width=51%><code>ConfirmEvery=10</code></td>
</tr>
<tr valign=top>
<td width=49%><code>SendSize=256</code></td>
<td width=51%><code>SendSize=256</code></td>
</tr>
</table><br>
<p>
The following lines are for MSENDRCV:</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=24%>Line</th>
<th align=left width=29%>Default value</th>
<th align=left width=47%>Value to supply</th>
</tr>
<tr valign=top>
<td width=24%><code>ResultFile =</code></td>
<td width=29%>MSENDRCV.OUT</td>
<td width=47%>File name to print timings to (located in default directory for the MSEND or MSENDRCV sending TP)</td>
</tr>
<tr valign=top>
<td width=24%><code>TraceFile =</code></td>
<td width=29%>MSENDRCV.TRC</td>
<td width=47%>Trace file name (located in default directory for the MSEND or MSENDRCV sending TP)</td>
</tr>
<tr valign=top>
<td width=24%><code>LocalLUAlias =</code></td>
<td width=29%>SENDLU</td>
<td width=47%>Local LU alias</td>
</tr>
<tr valign=top>
<td width=24%><code>RemoteLUAlias =</code></td>
<td width=29%>RECVLU</td>
<td width=47%>Remote LU alias</td>
</tr>
<tr valign=top>
<td width=24%><code>ModeName =</code></td>
<td width=29%>#INTER</td>
<td width=47%>Mode name</td>
</tr>
<tr valign=top>
<td width=24%><code>RemoteTPName =</code></td>
<td width=29%>MRCVTP</td>
<td width=47%>Name of remote TP (for <a href="appc05a_38f7.htm"><b>MC_ALLOCATE</b></a>)</td>
</tr>
<tr valign=top>
<td width=24%><code>NumSendConvs =</code></td>
<td width=29%>4</td>
<td width=47%>Number of conversations to send</td>
</tr>
<tr valign=top>
<td width=24%><code>NumSends =</code></td>
<td width=29%>8</td>
<td width=47%>Number of <a href="appc05b_8iub.htm"><b>MC_SEND_DATA</b></a> verbs per conversation</td>
</tr>
<tr valign=top>
<td width=24%><code>SendSize =</code></td>
<td width=29%>256</td>
<td width=47%>Size in bytes of data sent each time</td>
</tr>
<tr valign=top>
<td width=24%><code>ConfirmEvery =</code></td>
<td width=29%>2</td>
<td width=47%>Number of <b>MC_SEND_DATA</b> verbs between <a href="appc05a_0b8j.htm"><b>MC_CONFIRM</b></a> verbs</td>
</tr>
<tr valign=top>
<td width=24%><code>LocalTPName =</code></td>
<td width=29%>MRCVTP</td>
<td width=47%>Name of local TP (for <a href="appc05b_0m77.htm"><b>RECEIVE_ALLOCATE</b></a>)</td>
</tr>
<tr valign=top>
<td width=24%><code>NumRcvConvs =</code></td>
<td width=29%>4</td>
<td width=47%>Number of conversations to receive</td>
</tr>
<tr valign=top>
<td width=24%><code>NumRcvThreads =</code></td>
<td width=29%>2</td>
<td width=47%>Number of threads to start for processing receive conversations</td>
</tr>
<tr valign=top>
<td width=24%><code>RcvSize =</code></td>
<td width=29%>4096</td>
<td width=47%>Size in bytes of receive buffer for <a href="appc05a_5qlf.htm"><b>MC_RECEIVE_AND_WAIT</b></a></td>
</tr>
</table><br>
<p>
The output from MSEND and MSENDRCV consists of details of the configuration and the time taken for each conversation, and is sent to the result file specified in MSEND.CFG or MSENDRCV.CFG.</p>
<h4>Operation</h4>
<p>
These TPs use Windows NT- or Windows 95-based multiple event processing to avoid creating an unnecessary number of threads.</p>
<p>
The TPs also use Windows-based processing, but this is incidental. Its only purpose is to display beneath the icon on the screen a running count of threads, the number of conversations currently sending or receiving data, and the number of conversations completed. The Windows-based processing could easily be removed to create a completely batch-oriented program. To do this, termination would need to be signaled with an event rather than with <b>WM_CLOSE</b>.</p>
<p>
The TP name used in <a href="appc04_0fs3.htm"><b>TP_STARTED</b></a> is the name of the executable file (MSEND, MRCV, or MSENDRCV). The TP names used in <a href="appc05a_38f7.htm"><b>MC_ALLOCATE</b></a> and <a href="appc05b_0m77.htm"><b>RECEIVE_ALLOCATE</b></a> can be configured, as shown in the preceding tables.</p>
<p>
MSEND reads its configuration file (or uses defaults) to determine the number of send conversations to start. Each conversation reads the value of NumSends (or uses the default), issues that number of <a href="appc05b_8iub.htm"><b>MC_SEND_DATA</b></a> verbs, and then terminates. When all of the conversations for a thread have terminated, the thread itself terminates. When all of the send threads have terminated, the program terminates.</p>
<p>
An <a href="appc05a_0b8j.htm"><b>MC_CONFIRM</b></a> verb is issued before the first <b>MC_SEND_DATA</b> and then at the intervals specified by <b>ConfirmEvery</b>. The complete data flow for a conversation is as follows:</p>
<p class=indent1>
<b>TP_STARTED</b></p>
<p class=indent1>
<b>MC_ALLOCATE</b></p>
<p class=indent1>
<b>MC_CONFIRM</b></p>
<p class=indent1>
<b>MC_SEND_DATA</b> (repeated the number of times specified by <b>ConfirmEvery</b>)</p>
<p class=indent1>
<b>MC_CONFIRM</b></p>
<p class=indent1>
<b>MC_SEND_DATA</b> (repeated the number of times specified by <b>ConfirmEvery</b>)</p>
<p class=indent1>
<b>MC_CONFIRM</b></p>
<p class=indent1>
(Pattern repeats until the number of <b>MC_SEND_DATA</b> verbs equals <b>NumSends</b>.)</p>
<p class=indent1>
<b>MC_DEALLOCATE</b></p>
<p class=indent1>
<b>TP_ENDED</b></p>
<p>
MRCV starts up an initial thread for issuing <a href="appc05b_0m77.htm"><b>RECEIVE_ALLOCATE</b></a> verbs, then reads its configuration file (or uses defaults) to determine the number of receive threads to start and the number of conversations to receive.The initial thread issues a <b>RECEIVE_ALLOCATE</b> and waits. When the <b>RECEIVE_ALLOCATE</b> completes, the initial thread turns the processing of the conversation over to the next available receive thread, and issues another <b>RECEIVE_ALLOCATE</b>. This process continues until the configured number of <b>RECEIVE_ALLOCATE</b> verbs (that is, <b>NumRcvConvs</b>) have completed.</p>
<p>
There is a limit to the number of conversations that can be supported on a thread, because of the limit to the number of events that can be waited for with <b>WaitForMultipleObjects </b>(a function in the Win32® API). For send threads, the limit is 64 conversations per thread; for receive threads, the limit is 63 conversations per thread.</p>
<p>
MSEND works with this limit by starting enough threads to support the configured number of conversations. For example, if <b>NumSendConvs</b> is set to 200, four send threads are started: three of them process 64 conversations each and one processes the remaining eight conversations.</p>
<p>
MRCV works with this limit by comparing <b>NumRcvConvs</b> to <b>NumRcvThreads</b>. If <b>NumRcvConvs</b> is more than (63 * <b>NumRcvThreads</b>), <b>NumRcvThreads</b> is increased. If <b>NumRcvThreads</b> is greater than <b>NumRcvConvs</b>, <b>NumRcvThreads</b> is reduced to prevent creating unneeded threads.</p>
<p>
With MRCV, to ensure that a receive thread correctly picks up the conversation, two special events are used per thread: <i>event1</i> and <i>event2</i>. The following table illustrates their use.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=47%>RECEIVE_ALLOCATE thread</th>
<th align=left width=53%>Receive thread</th>
</tr>
<tr valign=top>
<td width=47%>Issue <a href="appc05b_0m77.htm"><b>RECEIVE_ALLOCATE</b></a> and wait</td>
<td width=53%>Wait on <i>event1</i></td>
</tr>
<tr valign=top>
<td width=47%>(<b>RECEIVE_ALLOCATE</b> completes)</td>
<td width=53%></td>
</tr>
<tr valign=top>
<td width=47%>Select next receive thread and <br>
set <i>event1</i> for that thread;<br>
then wait on <i>event2</i> for that thread</td>
<td width=53%></td>
</tr>
<tr valign=top>
<td width=47%></td>
<td width=53%>(<i>Event1</i> completes)</td>
</tr>
<tr valign=top>
<td width=47%></td>
<td width=53%>Add conversation to list of conversations being processed</td>
</tr>
<tr valign=top>
<td width=47%></td>
<td width=53%>Set <i>event2</i></td>
</tr>
<tr valign=top>
<td width=47%>(<i>Event2</i> completes)</td>
<td width=53%></td>
</tr>
<tr valign=top>
<td width=47%>REPEAT</td>
<td width=53%>REPEAT</td>
</tr>
</table><br>
<p>
The receive thread waits not only on the <i>event1</i> set for it, but also on one event for each conversation the thread is processing.</p>
<p>
If <b>NumRcvConvs</b> is set to zero, the <b>RECEIVE_ALLOCATE</b> thread will never terminate. If <b>NumSends</b> is set to zero, the conversation will never terminate; this is useful for getting the maximum number of simultaneous conversations.</p>
<h4>Tracing</h4>
<p>
If you want to observe the detailed processing of these TPs, you can enable tracing. To do this, find the following line, commented out, near the top of the file:</p>
<pre><code>#define SRTRC
 </code></pre>
<p>
Enable this line, and trace statements will be written to the trace file(s) specified by the <b>TraceFile</b> variable.</p>
<p>
There are also some trace statements that have been commented out. If they are left commented out, only <a href="appc05a_0b8j.htm"><b>MC_CONFIRM</b></a> and <a href="appc05a_5qhv.htm"><b>MC_CONFIRMED</b></a> processing is traced while a conversation is running, to maintain a send or receive count without generating a large amount of trace information. You can activate the detailed tracing of events (such as the sending of data) by enabling one or more trace statements.</p>
<p>
The <b>snatrace</b> utility provides APPC API tracing (for SNA applications). For more information about the <b>snatrace</b> utility, see the <i>Microsoft SNA Server Administration Guide</i>.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

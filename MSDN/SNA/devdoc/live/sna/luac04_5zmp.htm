<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BIND Example</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_sna_bind_example_lua"></a>BIND Example</h1>
<p>
The following example illustrates checking the incoming BIND image using these features of SLI_OPEN.</p>
<pre><code>lua_vcb.specific.open.lua_open_extension[0].lua_routine_type  =  
    LUA_ROUTINE_TYPE_BIND;
strcpy(lua_vcb.specific.open.lua_open_extension[0].lua_module_name, 
    "WINSLI32");
strcpy(lua_vcb.specific.open.lua_open_extension[0].lua_procedure_name,
    "BindValidation");
lua_vcb.specific.open.lua_open_extension[1].lua_routine_type = 
     LUA_ROUTINE_TYPE_END;
</code></pre>
<p>
The following is the skeleton of a sample bind validation callback code for Windows 3.x:</p>
<pre><code>VOID FAR PASCAL BindValidation ( LUA_VERB_RECORD FAR * pVerb )
 {
    pVerb-&gt;common.lua_prim_rc = LUA_STATE_CHECK;
 }
</code></pre>
<p>
Note: For Microsoft Visual C++ 4.0 or 5.0 and Windows 95 or Windows NT, the function prototype should be:</p>
<pre><code>VOID WINAPI BindValidation (LUA_VERB_RECORD FAR * pVerb );
</code></pre>
<p>
On Windows 95 and Windows NT, the WINAPI macro equates to _STDCall.</p>
<p>
The BIND routine has access to the LUA VCB passed to it.  The BIND routine should validate the BIND and indicate the appropriate SLI primary and secondary return code in the LUA verb record.  Also, the routine may indicate the primary and secondary RU sizes supported by the SLI program by setting bytes 10 and 11 in the common.lua_data_ptr field (where the BIND command is indicated).</p>
<p>
The following are the Visual C++ compiler options for the module containing the callback:</p>
<pre><code>/FA -c -Zle -W3 -WX -Ge -Gy -Gz -Ox -Zd
 -DCONDITION_HANDLING -DSTD_CALL
 -Di386=1 -D_X86_ -DNT_UP -DWIN32 -DDEVL
 -D_DLL -D_MT  -DWIN32_SUPPORT
</code></pre>
<p>
The following is the code generated for the callback:</p>
<pre><code>PUBLIC _BindValidation@4
; COMDAT _BindValidation@4
_TEXT SEGMENT
   _pVerb$ = 8
   _BindValidation@4 PROC NEAR    ; COMDAT

   // pVerb-&gt;common.lua_prim_rc = LUA_STATE_CHECK;
   mov eax, DWORD PTR _pVerb$[esp-4]
   mov WORD PTR [eax+4], 512   ; 00000200H
   ret 4
_BindValidation@4 ENDP
_TEXT ENDS
</code></pre>
<p>
The following is the code generated by SLI to call this callback:</p>
<pre><code>// (*aSCB-&gt;bind_rtn)(sliVCB);
   push    ebp
   call    DWORD PTR [ebx+188]
   // note there is no ADD ESP,4 following the call
</code></pre>
<p>
The following is the client internal trace showing WINSLI detecting the user provided bind validation callback:</p>
<pre><code>|00000157.000000f7 OUDMD  Opening User DLL Modules
|00000157.000000f7 OUDMD  Opening a Bind Routine
|00000157.000000f7 OUDMD  Opening DLL = WINSLI32
|00000157.000000f7 OUDMD  Loading Routine = BindValidation</code></pre>
<p>
The following is client internal trace showing the bind validation callback:</p>
<pre><code>|00000157.0000015c CLUAD  Calling BIND Routine
|00000157.0000015c CLUAD  Return from BIND routine, prc=512
|00000157.0000015c CLUAD  Returned With Error From Routine
|00000157.0000015c FrRUI  Freeing RUI vcb = 0x14E424
|00000157.0000015c BINDP  USER BIND ROUTINE FAILED
</code></pre>
<p>
The following is an API trace to show the bind validation error:</p>
<pre><code>000015c SLI    ----------------------------------------------   11:11:52.28
000015c SLI    SLI_OPEN post
000015c SLI    SESSION_FAILURE - NEG_RSP_FROM_BIND_ROUTINE
000015c SLI    ---- Verb Parameter Block at address 00405150 ----
000015c SLI    52004900 000F0000 00000039 01000000      
    &lt;R.I........9....&gt;
000015c SLI    00000000 4C553220 20202020 48000000       
    &lt;....LU2     H...&gt;
000015c SLI    88E01400 00000400 C0904000 F4000000       
    &lt;h.........@.4...&gt;
000015c SLI    00000000 00000000 00000040 00000000       
    &lt;...........@....&gt;
000015c SLI    00000000 02000000 0157494E 534C4933       
    &lt;.........WINSLI3&gt;
000015c SLI    32004269 6E645661 6C696461 74696F6E       
    &lt;2.BindValidation&gt;
000015c SLI    00000000 00000000 00000000 00000000       
    &lt;................&gt;
000015c SLI    00000000 00000000 00000000 00000000       
    &lt;................&gt;
000015c SLI    00000000 00000000 00000000 00000000       
    &lt;................&gt;
000015c SLI    00000000 00000000 00000000 00000000       
    &lt;................&gt;
000015c SLI    00000000 00000000 00000000 00000000       
    &lt;................&gt;
000015c SLI    00000000 00000000 00000000 00000000       
    &lt;................&gt;
000015c SLI    00000000 00000000 0000                    
    &lt;..........      &gt;
000015c SLI    ---- Data at address 004090C0 ----
000015c SLI    86998584                                  
    &lt;fred            &gt;
</code></pre>
<p>&nbsp;</p></body>
</HTML>

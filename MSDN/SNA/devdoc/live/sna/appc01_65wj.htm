<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Windows NT and Windows 95 Considerations</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_sna_windows_nt_and_windows_95_considerations_appc"></a>Windows NT and Windows 95 Considerations</h1>
<p>
This topic summarizes information about developing TPs for the Microsoft® Windows NT® and Windows® 95 systems.
<dl>
<dt>
<b>Byte ordering</b></dt>
<dd>
The values of constants defined in WINAPPC.H and WINCSV.H are dependent on the byte ordering of the hardware used. Macros are used to set the constants to the correct value.
<p>
By default, Intel little-endian byte ordering is used, with the low byte of a 16-bit value followed by the high byte. However, for inline environment defining, the NON_INTEL_BYTE_ORDER macro used in WINAPPC.H and WINCSV.H will not reverse (flip) the byte order for constants. Nonconstant input parameters in VCBs (such as lengths, pointers, and so on) are always in the native format.

<p>
For example, the primary return code of ap_parameter_check is defined to have a value of 0x0001. Depending on the environment (byte ordering), the constant AP_PARAMETER_CHECK may or may not be 0x0001. Some formats define the value as it appears in memory; others define it as a 2-byte variable. Because you cannot assume that the application will always use provided constants rather than hardwired values, you can define a macro to swap the bytes. The following is an example of using the macro:

<pre><code>/* when NON_INTEL_BYTE_ORDER is specified, the APPC_FLIPI macro defined in WINAPPC.H macro becomes */
#define APPC_FLIPI(x)    (x)

/* otherwise this macro flips bytes by defining */
#define APPC_FLIPI(X) APPC_MAKUS(APPC_HI_UC(X),APPC_LO_UC(X))

/* the AP_PARAMETER_CHECK macro is now defined using the APPC_FLIPI macro */
#define AP_PARAMETER_CHECK APPC_FLIPI (0X0001)      /* X '0001' */

 </code></pre>
</dd>
<dt>
<b>Events</b></dt>
<dd>
To receive data asynchronously, an event handle is passed in the semaphore field of the VCB. This event must be in the nonsignaled state when passed to APPC, and the handle must have EVENT_MODIFY_STATE access to the event.</dd>
<dt>
<b>Library names</b></dt>
<dd>
In preparation for the coexistence of Win16 and Win32® API libraries on the same computer, the Win32 DLL names have been changed.
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>Old DLL names</th>
<th align=left width=52%>New DLL names</th>
</tr>
<tr valign=top>
<td width=48%>WINAPPC.DLL</td>
<td width=52%>WAPPC32.DLL</td>
</tr>
<tr valign=top>
<td width=48%>WINCSV.DLL</td>
<td width=52%>WINCSV32.DLL</td>
</tr>
</table><br>


<p>
The old DLL names should be used for Win32-based applications that are required to run on SNA Server version 2.0. The new DLL names should be used for Win32-based applications that are intended to run only on SNA Server version 2.1 or later.

<p>
If you intend your Win32-based application to be used with SNA Server version 2.0, you should link with the libraries included with SNA Server version 2.0. Otherwise, use the new libraries provided with SNA Server versions 2.1 and 3.0.
</dd>
<dt>
<b>Limits</b></dt>
<dd>
For Windows NT and Windows 95, the number of simultaneous CSVs allowed per process is 64. Only one of these verbs per thread can be synchronous (blocking).</dd>
<dt>
<b>Multiple threads</b></dt>
<dd>
A TP can have multiple threads that issue verbs. Windows APPC makes provisions for multithreaded Windows-based processes. A process contains one or more threads of execution. All references to threads refer to actual threads in the multithreaded Windows NT and Windows 95 environments.
<p>
With the exception of <a href="appc05b_92oz.htm"><b>RECEIVE_AND_POST</b></a>. <a href="appc05a_3jvn.htm"><b>MC_RECEIVE_AND_POST</b></a>, <a href="appc05b_19er.htm"><b>RECEIVE_AND_WAIT</b></a>, and <a href="appc05a_5qlf.htm"><b>MC_RECEIVE_AND_WAIT</b></a>, only one conversation verb can be outstanding at a time on any conversation; however, other verbs can be issued for other conversations. This guideline also applies to TP verbs and TPs. Although multiple TP verbs can be issued, only one TP verb can be outstanding at a time on a TP. This applies to both multithreaded applications and single-threaded applications that use asynchronous calls.
</dd>
<dt>
<b>Packing</b></dt>
<dd>
For performance considerations, VCBs are not packed. As a result, DWORDs are on DWORD boundaries, WORDs on WORDs, and BYTEs on BYTEs. This means, for example, that there is a 2-byte gap between the primary and secondary return codes. VCBs should be accessed using the structures provided.</dd>
<dt>
<b>Registering and deregistering applications</b></dt>
<dd>
All Windows APPC applications must call <a href="appc06_4u03.htm"><b>WinAPPCStartup</b></a> at the beginning of the session to register the application and <a href="appc06_57fn.htm"><b>WinAPPCCleanup</b></a> at the end of the session to deregister the application.
<p>
All Windows CSV applications must call the Windows SNA extension <a href="appc09c_197n.htm"><b>WinCSVStartup</b></a> at the beginning of the session to register the application and <a href="appc09c_1mn7.htm"><b>WinCSVCleanup</b></a> to deregister the application when the session is finished.
</dd>
<dt>
<b>Run-time linking</b></dt>
<dd>
For a TP to be dynamically linked to APPC at run time, the TP must issue the following calls:
<ul>
<li>
<b>LoadLibrary</b> to load the dynamic-link libraries WINAPPC.DLL or WAPPC32.DLL.</li>
<li>
<b>GetProcAddress</b> to specify APPC on all the desired entry points to the DLL such as <b>APPC</b>, <b>WinAsyncAPPC</b>, <b>WinAPPCStartup</b>, and <b>WinAPPCCleanup</b>.</li>
</ul>

<p>
For a TP to be dynamically linked to CSV at run time, the TP must issue the following calls:

<ul>
<li>
<b>LoadLibrary</b> to load WINCSV.DLL or WINCSV32.DLL, the dynamic-link libraries for Windows CSV.</li>
<li>
<b>GetProcAddress</b> to specify CSV on all the desired entry points to the DLL such as <b>ACSSVC</b>, <b>WinAsyncCSV</b>, <b>WinCSVStartup</b>, and <b>WinCSVCleanup</b>.</li>
</ul>

<p>
The TP must issue the <b>FreeLibrary</b> call when the APPC or CSV library is no longer required.
</dd>
<dt>
<b>Yielding to other components</b></dt>
<dd>
By default, and because the Windows NT and Windows 95 environments are multithreaded, there is no need to yield to other components. However, if an application is single-threaded and is intended for both Windows NT or Windows 95 and Windows version 3.<i>x</i>, use the Windows extensions <a href="appc06_2fs3.htm"><b>WinAPPCSetBlockingHook</b></a> and <a href="appc06_1cv7.htm"><b>WinAPPCUnhookBlockingHook</b></a>. These extensions must be explicitly called to accomplish the yield procedure.
</dd>
</dl>
<p>&nbsp;</p></body>
</HTML>

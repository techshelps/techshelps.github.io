<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Sample Program for AFTP API</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_sna_sample_program_for_aftp_api_aftp"></a>Sample Program for AFTP API</h1>
<p>
This sample code is made available by Microsoft Corporation on an as-is basis. Anyone receiving this code is considered to be licensed under Microsoft copyrights to use the Microsoft-provided source code in any way he or she deems fit, including copying it, compiling it, modifying it, and redistributing it, with or without modifications. No license under any Microsoft patents or patent applications is to be implied from this copyright license.</p>
<p>
A user of this sample code should understand that Microsoft cannot provide technical support for the code and will not be responsible for any consequences of its use.</p>
<p>
This sample program shows a simple exercise of using the AFTP programming interface. It gets a single file from a remote machine. The user must know the machine name and the file name. Comments are inserted in bold text throughout the sample.</p>
<p>
<b>System include files:</b></p>
<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
 </code></pre>
<p>
<b>AFTP API include file:</b></p>
<pre><code>#include "aftpapi.h"</code></pre>
<p class=indent1>
<b>Note  If you want to use the header file as it was shipped, change the file name in this include statement to APPFFTP.H. Otherwise, rename the member APPFFTP.H to AFTPAPI.H for consistency with other platforms.</b></p>
<pre><code>int main(int argc, char *argv[])
{
    AFTP_HANDLE_TYPE connection_id;    /* connection id               */
    AFTP_RETURN_CODE_TYPE aftp_rc;     /* return code                 */
    AFTP_SECURITY_TYPE sec_type;       /* security type               */
    unsigned char * LU_name;           /* partner LU name             */
    unsigned char * srcfilename;       /* source file name            */
    unsigned char * destfilename;      /* destination file name       */

printf( "\n" );

if( argc != 4 ) {

    printf( "Usage : aget &lt;LU name&gt; &lt;source filename&gt;"  \
            " &lt;destination filename&gt; \n");
    exit( -1 );
}
 
LU_name = argv[1];
srcfilename = argv[2];
destfilename = argv[3];
Create the connection object
aftp_create ( connection_id, &amp;aftp_rc );

if ( aftp_rc != AFTP_RC_OK ) {
      printf ( "Error creating connection object.\n" );
      exit ( -1 );
}
 </code></pre>
<p>
<b>Set the partner LU name as the destination.</b></p>
<pre><code>aftp_set_destination (
        connection_id,
        (unsigned char AFTP_PTR)LU_name,
        (AFTP_LENGTH_TYPE)strlen ( LU_name ),
        &amp;aftp_rc );

if( aftp_rc != AFTP_RC_OK ) {
     printf ( "Error setting the destination.\n" );
     exit ( -1 );
}
 </code></pre>
<p>
<b>Set the security to NONE unless you need security.</b></p>
<pre><code>aftp_set_security_type (
        connection_id,
        AFTP_SECURITY_NONE,
        &amp;aftp_rc );

if ( aftp_rc == AFTP_RC_OK ) {
     printf ( "Setting security type to NONE.\n" );
} else {
     printf ( "Error setting security type.\n" );
}
 </code></pre>
<p>
<b>Establish a connection with AFTPD server.</b></p>
<pre><code>aftp_connect ( connection_id, &amp;aftp_rc );

if ( aftp_rc != AFTP_RC_OK ) {
     printf ( "Error establishing the connection.\n" );
     exit ( -1 );
}
 </code></pre>
<p>
<b>Set up file transfer mode.</b></p>
<pre><code>aftp_set_write_mode (
       connection_id,
       AFTP_REPLACE,
       &amp;aftp_rc );

if ( aftp_rc != AFTP_RC_OK ) {
      printf ( "Error setting write mode.\n" );
}
 </code></pre>
<p>
<b>Extract the security type and display it.</b></p>
<pre><code>aftp_extract_security_type (
       connection_id,
       &amp;sec_type,
       &amp;aftp_rc );

if ( aftp_rc == AFTP_RC_OK ) {
      printf ( "Security type is : %lu\n", sec_type );
} else {
      printf ( "Error extracting security type.\n" );
}
 </code></pre>
<p>
<b>Transfer the file from the server to the client.</b></p>
<pre><code>aftp_receive_file (
        connection_id,
        (unsigned char AFTP_PTR)destfilename,
        (AFTP_LENGTH_TYPE)strlen ( destfilename ),
        (unsigned char AFTP_PTR)srcfilename,
        (AFTP_LENGTH_TYPE)strlen ( srcfilename ),
        &amp;aftp_rc );

if ( aftp_rc == AFTP_RC_OK ) {
     printf ( "File successfully transfered.\n" );
}
 </code></pre>
<p>
<b>This is an example of how to show error reporting.</b></p>
<pre><code>AFTP_LENGTH_TYPE return_length;
char error_string[ AFTP_MESSAGE_SIZE ];

printf ( "Error %lu transfering the file.\n", aftp_rc );
 </code></pre>
<p>
<b>Specify a detail level according to how much information you want returned. In this case, return code information is requested.</b></p>
<pre><code>aftp_format_error (
       connection_id,
       (AFTP_DETAIL_LEVEL_TYPE)AFTP_DETAIL_RC,
       (unsigned char AFTP_PTR)error_string,
       (AFTP_LENGTH_TYPE)( sizeof ( error_string )-1 ),
       &amp;return_length,
       &amp;aftp_rc );
 </code></pre>
<p>
<b>Add a null terminator.</b></p>
<pre><code>error_string[ return_length ] = '\0';
    printf ( "%s", error_string );
}
 </code></pre>
<p>
<b>Close a connection with AFTPD server.</b></p>
<pre><code>aftp_close ( connection_id, &amp;aftp_rc );

if ( aftp_rc != AFTP_RC_OK ) {
     printf ( "Error closing the connection.\n" );
     exit ( -1 );
}
 </code></pre>
<p>
<b>Destroy the connection identifier.</b></p>
<pre><code>aftp_destroy ( connection_id, &amp;aftp_rc );

if (aftp_rc != AFTP_RC_OK) {

     printf ( "Error destroying the connection id.\n" );
     exit ( -1 );
}

return(0);
}

/* END SAMPLE PROGRAM */
 </code></pre>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

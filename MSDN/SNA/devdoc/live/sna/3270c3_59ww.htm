<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Quiesce</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_sna_quiesce_3270"></a>Quiesce</h3>
<p>
The quiesce protocol is only supported on sessions using FM profile 4. The quiesce protocol can be initiated by either half-session.</p>
<p>
When an application wishes to quiesce its partner half-session in the host, it sends a <b>Status-Control(QEC) Request</b> to the local node. The node generates a QEC request to the host, which asks the host to quiesce after completing the current outbound chain.</p>
<p>
If the host quiesces, it sends a QC request, which the local node presents to the application as a <b>Status-Control(QC) Request</b> (with ACKRQD). The host remains in a quiesced state until the application sends a <b>Status-Control(RELQ) Request</b>. The local node sends the RELQ request to the host, and the host resumes communications on the PLU session.</p>
<p>
If the attempt to quiesce the host fails, the host responds with a negative QEC response, which the local node presents to the application as a <b>Status-Control(QEC) Negative-Acknowledge-1</b>.</p>
<p>
Conversely, a <b>Status-Control(QEC) Request</b> (without ACKRQD) is presented to the application if a QEC request is received from the host. In this direction QEC cannot be rejected; the local node will always force the application to quiesce after presenting it with a <b>Status-Control(QEC) Request</b> by rejecting further attempts to send inbound data. When the application has quiesced, it should send a <b>Status-Control(QC) Request</b> to the local node, which sends a QC request to the host. The application can subsequently be released by an RELQ request from the host, which the local node presents to the application as a <b>Status-Control(RELQ) Request</b>.</p>
<p>
The receipt of a CLEAR or UNBIND–BIND sequence (<b>Close(PLU)</b>–<b>Open(PLU)</b>) causes the quiesced state to be released.</p>
<p>
The following three figures illustrate the quiesce protocols between the local node and the application and how those protocols relate to the underlying SNA protocols.</p>
<p>
In the first illustration, the application quiesces the host and then releases the quiesce.</p>
<p>
<img src="images/32703s.gif" border=0></p>
<p>
In the following illustration, the application attempts to quiesce the host, but the host rejects the quiesce and continues with the next chain.</p>
<p>
<img src="images/32703sa.gif" border=0></p>
<p>
In the following illustration, the host sends QEC while the application is sending a chain; the application completes the chain and sends a <b>Status-Control(QC) Request</b>. The host releases the quiesce by sending RELQ, and the local node sends a <b>Status-Control(RELQ) Request</b> to the application, which then initiates a new chain.</p>
<p>
<img src="images/32703sb.gif" border=0></p>
<p>&nbsp;</p></body>
</HTML>

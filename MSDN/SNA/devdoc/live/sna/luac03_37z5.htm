<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RUI_INIT</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_sna_rui_init_lua"></a>RUI_INIT</h1>
<p>
The <b>RUI_INIT</b> verb transfers control of the specified LU to the Windows LUA application. <b>RUI_INIT</b> establishes a session between the SSCP and the specified LU.</p>
<p>
<b>Note</b>&nbsp;&nbsp;For 3270 emulator users, a Microsoft® SNA Server extension has been added that allows you to use 3270 LUs rather than the LUA LUs. For more information, see Remarks in this topic.</p>
<p>
The following structure describes the <b>LUA_COMMON</b> member of the VCB used by <b>RUI_INIT</b>.</p>
<pre><code>struct LUA_COMMON {
    unsigned short lua_verb;
    unsigned short lua_verb_length;
    unsigned short lua_prim_rc;
    unsigned long  lua_sec_rc;
    unsigned short lua_opcode;
    unsigned long  lua_correlator;
    unsigned char  lua_luname[8];
    unsigned short lua_extension_list_offset;
    unsigned short lua_cobol_offset;
    unsigned long  lua_sid;
    unsigned short lua_max_length;
    unsigned short lua_data_length;
    char FAR *     lua_data_ptr;
    unsigned long  lua_post_handle;
    struct LUA_TH  lua_th;
    struct LUA_RH  lua_rh;
    struct LUA_FLAG1 lua_flag1;
    unsigned char  lua_message_type;
    struct LUA_FLAG2 lua_flag2; 
    unsigned char  lua_resv56[7];
    unsigned char  lua_encr_decr_option;
};
 </code></pre>
<h4>Members</h4>
<dl>
<dt>
<b>lua_verb</b></dt>
<dd>
Supplied parameter. Contains the verb code, LUA_VERB_RUI for RUI verbs.</dd>
<dt>
<b>lua_verb_length</b></dt>
<dd>
Supplied parameter. Specifies the length in bytes of the LUA VCB. It must contain the length of the verb record being issued.</dd>
<dt>
<b>lua_prim_rc</b></dt>
<dd>
Primary return code set by LUA at the completion of the verb. The valid return codes vary depending on the LUA verb issued.</dd>
<dt>
<b>lua_sec_rc</b></dt>
<dd>
Secondary return code set by LUA at the completion of the verb. The valid return codes vary depending on the LUA verb issued.</dd>
<dt>
<b>lua_opcode</b></dt>
<dd>
Supplied parameter. Contains the LUA command code (verb operation code) for the verb to be issued, LUA_OPCODE_RUI_INIT.</dd>
<dt>
<b>lua_correlator</b></dt>
<dd>
Supplied parameter. Contains a user-supplied value that links the verb with other user-supplied information. LUA does not use or change this information. This parameter is optional.</dd>
<dt>
<b>lua_luname</b></dt>
<dd>
Supplied parameter. Specifies the ASCII name of the local LU used by the Windows LUA session.
<p>
<b>RUI_INIT</b> requires this parameter. 

<p>
This parameter is eight bytes long, padded on the right with spaces (0x20) if the name is shorter than eight characters.
</dd>
<dt>
<b>lua_extension_list_offset</b></dt>
<dd>
Not used by RUI in Microsoft® SNA Server and should be set to zero.</dd>
<dt>
<b>lua_cobol_offset</b></dt>
<dd>
Not used by LUA in SNA Server and should be zero.</dd>
<dt>
<b>lua_sid</b></dt>
<dd>
Returned parameter. Specifies the session identifier. </dd>
<dt>
<b>lua_max_length</b></dt>
<dd>
Not used by <b>RUI_INIT</b> and should be set to zero. </dd>
<dt>
<b>lua_data_length</b></dt>
<dd>
Not used by <b>RUI_INIT</b> and should be set to zero. </dd>
<dt>
<b>lua_data_ptr</b></dt>
<dd>
Not used by <b>RUI_INIT</b> and should be set to zero. </dd>
<dt>
<b>lua_post_handle</b></dt>
<dd>
Supplied parameter. Used under Microsoft® Windows NT® and Microsoft® Windows® 95 if asynchronous notification is to be accomplished by events. This variable contains the handle of the event to be signaled or a window handle.
<p>
For all other environments, this parameter is reserved and should be set to zero.
</dd>
<dt>
<b>lua_th</b></dt>
<dd>
Not used by <b>RUI_INIT</b> and should be set to zero.</dd>
<dt>
<b>lua_rh</b>.</dt>
<dd>
Not used by <b>RUI_INIT</b> and should be set to zero.</dd>
<dt>
<b>lua_flag1</b></dt>
<dd>
Not used by <b>RUI_INIT</b> and should be set to zero.</dd>
<dt>
<b>lua_message_type</b></dt>
<dd>
Specifies the type of the inbound or outbound SNA commands and data. This is a returned parameter for <b>RUI_INIT</b>. Possible values are:
<p>
LUA_MESSAGE_TYPE_LU_DATA

<p>
LUA_MESSAGE_TYPE_SSCP_DATA

<p>
LUA_MESSAGE_TYPE_BID

<p>
LUA_MESSAGE_TYPE_BIND

<p>
LUA_MESSAGE_TYPE_BIS

<p>
LUA_MESSAGE_TYPE_CANCEL

<p>
LUA_MESSAGE_TYPE_CHASE

<p>
LUA_MESSAGE_TYPE_CLEAR

<p>
LUA_MESSAGE_TYPE_CRV

<p>
LUA_MESSAGE_TYPE_LUSTAT_LU

<p>
LUA_MESSAGE_TYPE_LUSTAT_SSCP

<p>
LUA_MESSAGE_TYPE_QC

<p>
LUA_MESSAGE_TYPE_QEC

<p>
LUA_MESSAGE_TYPE_RELQ

<p>
LUA_MESSAGE_TYPE_RQR

<p>
LUA_MESSAGE_TYPE_RTR

<p>
LUA_MESSAGE_TYPE_SBI

<p>
LUA_MESSAGE_TYPE_SHUTD

<p>
LUA_MESSAGE_TYPE_SIGNAL

<p>
LUA_MESSAGE_TYPE_SDT

<p>
LUA_MESSAGE_TYPE_STSN

<p>
LUA_MESSAGE_TYPE_UNBIND


<p>
The SLI receives and responds to the bind, crv, and stsn requests through the LUA interface extension routines.

<p>
lu_data, lustat_lu, lustat_sscp, and sscp_data are not SNA commands.
</dd>
<dt>
<b>lua_flag2</b></dt>
<dd>
Returned parameter. Contains flags for messages returned by LUA. 
<dl>
<dt>
<b>lua_flag2.async</b></dt>
<dd>
Indicates that the LUA interface verb completed asynchronously if set to 1. (Note that <b>RUI_INIT</b> always completes asynchronously unless it returns an error such as LUA_PARAMETER_CHECK.)
</dd>
</dl>
</dd>
<dt>
<b>lua_resv56</b></dt>
<dd>
Supplied parameter. A reserved field used by <b>RUI_INIT</b> and <a href="luac04_7bxd.htm"><b>SLI_OPEN</b></a>. All other reserved fields in the array must be left blank. See the discussion of these SNA Server extensions in the Remarks section.
<dl>
<dt>
<b>lua_resv56[1]</b></dt>
<dd>
Supplied parameter. Indicates whether an RUI application can access LUs configured as 3270 LUs, in addition to LUA LUs. If this parameter is nonzero, 3270 LUs can be accessed.</dd>
<dt>
<b>lua_resv56[2]</b></dt>
<dd>
Supplied parameter. Indicates whether the RUI library will release the LU when the LU-SSCP session or connection goes away. If this parameter is nonzero, the LU will not be released.</dd>
<dt>
<b>lua_resv56[3]</b></dt>
<dd>
Supplied parameter. Indicates whether incomplete reads are supported. If this parameter is set to a nonzero value, incomplete or truncated reads are supported. See the remarks for <a href="luac03_7dwh.htm"><b>RUI_READ</b></a> for more details.</dd>
<dt>
<b>lua_resv56[4]</b></dt>
<dd>
Supplied parameter. Indicates whether the RUI library will allow the application to keep hold of the LU if it is recycled at the host. If this parameter is nonzero, the application can keep hold of the LU.
</dd>
</dl>
</dd>
<dt>
<b>lua_encr_decr_option</b></dt>
<dd>
Field for cryptography options. On <b>RUI_INIT</b>, only the following are supported:
<ul>
<li>
<b>lua_encr_decr_option</b> = 0</li>
<li>
<b>lua_encr_decr_option</b> = 128</li>
</ul>

<p>
Values from 1 through 127 are not supported.

</dd>
</dl>
<h4>Return Codes</h4>
<dl>
<dt>
LUA_OK</dt>
<dd>
Primary return code; the verb executed successfully.</dd>
<dt>
LUA_CANCELED</dt>
<dd>
Primary return code; the verb did not complete successfully because it was canceled by another verb.
<dl>
<dt>
LUA_TERMINATED</dt>
<dd>
Secondary return code; <a href="luac03_2c69.htm"><b>RUI_TERM</b></a> was issued before <b>RUI_INIT</b> completed.
</dd>
</dl>
</dd>
<dt>
LUA_PARAMETER_CHECK</dt>
<dd>
Primary return code; the verb did not execute because of a parameter error.
<dl>
<dt>
LUA_INVALID_LUNAME</dt>
<dd>
Secondary return code; the <b>lua_luname</b> parameter did not match any LUA LU name or LU pool name in the configuration file.</dd>
<dt>
LUA_INVALID_POST_HANDLE</dt>
<dd>
Secondary return code; for a Windows NT or Windows 95 system using events as the asynchronous posting method, the Windows LUA VCB does not contain a valid event handle.
<p>
For a Windows version 3.<i>x</i> system, the Windows LUA VCB does not contain the valid procedure address returned by the <b>MakeProcInstance</b> command.

<p>
For OS/2, the Windows LUA VCB does not contain a valid semaphore or queue handle, which is needed when the verb completes asynchronously.
</dd>
<dt>
LUA_RESERVED_FIELD_NOT_ZERO</dt>
<dd>
Secondary return code; a reserved field in the verb record, or a parameter not used by this verb, was set to a nonzero value.</dd>
<dt>
LUA_VERB_LENGTH_INVALID</dt>
<dd>
Secondary return code; an LUA verb was issued with the value of <b>lua_verb_length</b> unexpected by LUA.
</dd>
</dl>
</dd>
<dt>
LUA_STATE_CHECK</dt>
<dd>
Primary return code; the verb did not execute because it was issued in an invalid state.
<dl>
<dt>
LUA_DUPLICATE_RUI_INIT</dt>
<dd>
Secondary return code; the <b>lua_luname</b> parameter specified an LU name or LU pool name already in use by this application (or for which this application already has <b>RUI_INIT</b> in progress).
</dd>
</dl>
</dd>
<dt>
LUA_UNSUCCESSFUL</dt>
<dd>
Primary return code; the verb record supplied was valid, but the verb did not complete successfully.
<dl>
<dt>
LUA_COMMAND_COUNT_ERROR</dt>
<dd>
Secondary return code; one of the following occurred:
<table cellspacing=4 cols=1>
<tr valign=top>
<td width=100%><font face="Symbol">·</font>&nbsp;&nbsp;&nbsp;&nbsp;The verb could not be issued because the application had already reached its maximum number of active sessions. In the Windows environment, an application can have as many as 16 sessions active at any time. On Windows NT, Windows 95, and OS/2, an application can have as many as 512 sessions active at any time.</td>
</tr>
<tr valign=top>
<td width=100%><font face="Symbol">·</font>&nbsp;&nbsp;&nbsp;&nbsp;The verb could not be issued because the application had already reached its maximum number of active sessions. In the Windows environment, an application can have as many as 16 sessions active at any time. In OS/2, an application can have as many as 512 sessions active at any time.</td>
</tr>
</table><br>

</dd>
<dt>
LUA_ENCR_DECR_LOAD_ERROR</dt>
<dd>
Secondary return code; the verb specified a value for <b>lua_encr_decr_option</b> other than 0 or 128.</dd>
<dt>
LUA_INVALID_PROCESS</dt>
<dd>
Secondary return code; the LU specified by <b>lua_luname</b> is in use by another process.</dd>
<dt>
LUA_LINK_NOT_STARTED</dt>
<dd>
Secondary return code; the connection to the host has not been started; none of the link services it could use are active.
</dd>
</dl>
</dd>
<dt>
lua_comm_subsystem_abended</dt>
<dd>
Primary return code; indicates one of the following conditions:
<ul>
<li>
The node used by this conversation encountered an ABEND.</li>
<li>
The connection between the TP and the PU 2.1 node has been broken (a LAN error).</li>
<li>
The SnaBase at the TP's computer encountered an ABEND.</li>
</ul>
</dd>
<dt>
LUA_SESSION_FAILURE</dt>
<dd>
Primary return code; a required SNA Server component has terminated.
<dl>
<dt>
LUA_LU_COMPONENT_DISCONNECTED</dt>
<dd>
Secondary return code; indicates that the LUA session failed because of a problem with the link service or with the host LU.
</dd>
</dl>
</dd>
<dt>
LUA_INVALID_VERB</dt>
<dd>
Primary return code; either the verb code or the operation code, or both, is invalid. The verb did not execute.</dd>
<dt>
LUA_STACK_TOO_SMALL</dt>
<dd>
Primary return code; the stack size of the application is too small to execute the verb. Increase the stack size of your application.</dd>
<dt>
LUA_COMM_SUBSYSTEM_NOT_LOADED</dt>
<dd>
Primary return code; a required component could not be loaded or has terminated while processing the verb. Thus, communication could not take place. Contact the system administrator for corrective action.</dd>
<dt>
LUA_UNEXPECTED_DOS_ERROR</dt>
<dd>
Primary return code; after issuing an operating system call, an unexpected operating system return code was received and is specified in the secondary return code.
</dd>
</dl>
<h4>Remarks</h4>
<p>
This verb must be the first LUA verb issued for the session. Until this verb has completed successfully, the only other LUA verb that can be issued for this session is <a href="luac03_2c69.htm"><b>RUI_TERM</b></a> (which terminates a pending <b>RUI_INIT</b>).</p>
<p>
All other verbs issued on this session must identify the session using one of the following parameters from this verb:
<ul>
<li>
The session identifier, returned to the application in <b>lua_sid</b>.</li>
<li>
The LU name or LU pool name, supplied by the application in the <b>lua_luname</b> parameter.</li>
</ul>
<p>
<b>RUI_INIT</b> completes after an ACTLU message is received from the host. If necessary, the verb waits indefinitely. If an ACTLU has already been received prior to <b>RUI_INIT</b>, LUA sends a NOTIFY to the host to inform it that the LU is ready for use. Note that neither ACTLU nor NOTIFY is visible to the LUA application.</p>
<p>
After <b>RUI_INIT</b> has completed successfully, this session uses the LU for which the session was started. No other LUA session (from this or any other application) can use the LU until <b>RUI_TERM</b> is issued, or until an LUA_SESSION_FAILURE primary return code is received.</p>
<h4>Using 3270 LUs</h4>
<p>
To provide 3270 emulator users the ability to use the Emulator Interface Specification (EIS) configuration call with the RUI API, an SNA Server extension has been added to the RUI. This extension allows you to use 3270 LUs rather than LUA LUs. If an application sets <b>lua_resv56[1]</b> to a nonzero value on the <b>RUI_INIT</b> call then 3270 LUs can be used.</p>
<h4>Don't Release the LU</h4>
<p>
If an application sets <b>lua_resv56[2]</b> to a nonzero value on the <b>RUI_INIT</b> call then the RUI library will not release the LU when the LU-SSCP session or connection goes away. When this SNA Server extension is enabled, the application does not have to issue a new <b>RUI_INIT</b> after a session failure or connection failure. When the LU-SSCP session comes back up (the application can use <b>WinRUIGetLastInitStatus</b> to detect this), the application can start using it again.</p>
<h4>Support Chunking on this Session</h4>
<p>
If an application sets <b>lua_resv56[3]</b> to a nonzero value on the <b>RUI_INIT</b> session establishment, this enables an SNA Server extension that can change the behavior of <b>RUI_READ</b>. The default behavior for an <b>RUI_READ</b> call is to truncate data (discarding any data remaining) if the application's data buffer is not large enough for receive all of the data in the RU, returning an error code. When <b>lua_resv56[3]</b> is set to a nonzero value on the <b>RUI_INIT</b> call, then an <b>RUI_READ</b> issued where the application's data buffer is not large enough will not result in the RU data being discarded. The <b>RUI_READ</b> verb will return success (LUA_OK) for the primary return code and LUA_DATA_INCOMPLETE for the secondary return code. Subsequent <b>RUI_READ</b> requests can then be issued to retrieve the data that exceeded the application's data buffer.</p>
<h4>Ignore DACTLUs</h4>
<p>
If an application sets<b> lua_resv56[4]</b> to a nonzero value on the <b>RUI_INIT</b> session establishment, this enables an SNA Server extension and the RUI library will allow the application to keep hold of the LU if it is recycled at the host (that is, deactivated and reactivated). </p>
<p>
<b>Note</b>&nbsp;&nbsp;All other reserved fields must be left blank.</p>
<p>
For more information, see the description of the <a href="entrypts_910w.htm"><b>sepdcrec</b></a> function in the <i>Microsoft SNA Server 3270 Emulator Interface Specification</i>.</p>
<h4>Encryption</h4>
<p>
Session-level cryptography is implemented through Cryptography Verification (CRV) requests; RUI applications must perform all necessary processing of these requests. For all interfaces other than RUI, CRV requests are rejected with a negative response by the SNA Server.</p>
<p>
For <b>RUI_INIT</b>, the following options are supported:
<ul>
<li>
<b>lua_encr_decr_option</b> = 0</li>
<li>
<b>lua_encr_decr_option</b> = 128</li>
</ul>
<p>
Values from 1 through 127 (ACSRENCR and ACSROECR routines) are not supported.</p>
<p>
The sending application is responsible for padding data to a multiple of eight bytes and for setting the padded data indicator bit in the RH as well as for encryption. The receiving application is responsible for removing the padding after decryption.</p>
<h4>See Also</h4>
<p>
<a href="#_sna_rui_init_lua"><b>RUI_INIT</b></a>, <a href="luac03_2c69.htm"><b>RUI_TERM</b></a>, <a href="luac04_7bxd.htm"><b>SLI_OPEN</b></a></p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RUI_WRITE</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_sna_rui_write_lua"></a>RUI_WRITE</h1>
<p>
The <b>RUI_WRITE</b> verb sends an SNA request or response unit from the LUA application to the host over either the LU session or the SSCP session, and sends responses, SNA commands, and data from a Windows LUA application to the host LU.</p>
<p>
The following structure describes the <b>LUA_COMMON</b> member of the VCB used by <b>RUI_WRITE</b>.</p>
<pre><code>struct LUA_COMMON {
    unsigned short lua_verb;
    unsigned short lua_verb_length;
    unsigned short lua_prim_rc;
    unsigned long  lua_sec_rc;
    unsigned short lua_opcode;
    unsigned long  lua_correlator;
    unsigned char  lua_luname[8];
    unsigned short lua_extension_list_offset;
    unsigned short lua_cobol_offset;
    unsigned long  lua_sid;
    unsigned short lua_max_length;
    unsigned short lua_data_length;
    char FAR *     lua_data_ptr;
    unsigned long  lua_post_handle;
    struct LUA_TH  lua_th;
    struct LUA_RH  lua_rh;
    struct LUA_FLAG1 lua_flag1;
    unsigned char  lua_message_type;
    struct LUA_FLAG2 lua_flag2; 
    unsigned char  lua_resv56[7];
    unsigned char  lua_encr_decr_option;
};
 </code></pre>
<h4>Members</h4>
<dl>
<dt>
<b>lua_verb</b></dt>
<dd>
Supplied parameter. Contains the verb code, LUA_VERB_RUI for RUI verbs.</dd>
<dt>
<b>lua_verb_length</b></dt>
<dd>
Supplied parameter. Specifies the length in bytes of the LUA VCB. It must contain the length of the verb record being issued.</dd>
<dt>
<b>lua_prim_rc</b></dt>
<dd>
Primary return code set by LUA at the completion of the verb. The valid return codes vary depending on the LUA verb issued.</dd>
<dt>
<b>lua_sec_rc</b></dt>
<dd>
Secondary return code set by LUA at the completion of the verb. The valid return codes vary depending on the LUA verb issued.</dd>
<dt>
<b>lua_opcode</b></dt>
<dd>
Supplied parameter. Contains the LUA command code (verb operation code) for the verb to be issued, LUA_OPCODE_RUI_WRITE.</dd>
<dt>
<b>lua_correlator</b></dt>
<dd>
Supplied parameter. Contains a user-supplied value that links the verb with other user-supplied information. LUA does not use or change this information. This parameter is optional.</dd>
<dt>
<b>lua_luname</b></dt>
<dd>
Supplied parameter. Specifies the ASCII name of the local LU used by the Windows LUA session.
<p>
<b>RUI_WRITE</b> only requires this parameter if <b>lua_sid</b> is zero.

<p>
This parameter is eight bytes long, padded on the right with spaces (0x20) if the name is shorter than eight characters.
</dd>
<dt>
<b>lua_extension_list_offset</b></dt>
<dd>
Not used by RUI in Microsoft® SNA Server and should be set to zero.</dd>
<dt>
<b>lua_cobol_offset</b></dt>
<dd>
Not used by LUA in SNA Server and should be zero.</dd>
<dt>
<b>lua_sid</b></dt>
<dd>
Supplied and returned parameter. Specifies the session identifier and is returned by <a href="luac04_7bxd.htm"><b>SLI_OPEN</b></a> and <a href="luac03_37z5.htm"><b>RUI_INIT</b></a>. Other verbs use this parameter to identify the session used for the command. If other verbs use the <b>lua_luname</b> parameter to identify sessions, set the <b>lua_sid</b> parameter to zero.</dd>
<dt>
<b>lua_max_length</b></dt>
<dd>
Not used by <b>RUI_WRITE</b> and should be set to zero. </dd>
<dt>
<b>lua_data_length</b></dt>
<dd>
Returned parameter. Specifies the length of data returned in <b>lua_peek_data</b> for the <a href="luac03_8fmp.htm"><b>RUI_BID</b></a> verb.</dd>
<dt>
<b>lua_data_ptr</b></dt>
<dd>
Points to the buffer containing the data to be sent to the host by <b>RUI_WRITE</b>.
<p>
Both SNA commands and data are placed in this buffer, and they can be in an EBCDIC format.
</dd>
<dt>
<b>lua_post_handle</b></dt>
<dd>
Supplied parameter. Used under Microsoft® Windows NT® and Microsoft® Windows® 95 if asynchronous notification is to be accomplished by events. This variable contains the handle of the event to be signaled or a window handle.
<p>
For all other environments, this parameter is reserved and should be set to zero.
</dd>
<dt>
<b>lua_th</b></dt>
<dd>
Returned parameter. Contains the SNA transmission header (TH) of the message sent or received. Various subparameters are set for write functions and returned for read and bid functions. Its subparameters are as follows:
<dl>
<dt>
<b>lua_th.flags_fid</b></dt>
<dd>
Format identification type 2, four bits.</dd>
<dt>
<b>lua_th.flags_mpf</b></dt>
<dd>
Segmenting mapping field, two bits. Defines the type of data segment. The following values are valid:
<p>
<b>0x00</b>Middle segment<br>
<b>0x04</b>Last segment<br>
<b>0x08</b>First segment<br>
<b>0x0C</b>Only segment
</dd>
<dt>
<b>lua_th.flags_odai</b></dt>
<dd>
Originating address field–destination address field (OAF–DAF) assignor indicator, one bit.</dd>
<dt>
<b>lua_th.flags_efi</b></dt>
<dd>
Expedited flow indicator, one bit.</dd>
<dt>
<b>lua_th.daf</b></dt>
<dd>
Destination address field (DAF), an unsigned char.</dd>
<dt>
<b>lua_th.oaf</b></dt>
<dd>
Originating address field (OAF), an unsigned char.</dd>
<dt>
<b>lua_th.snf</b></dt>
<dd>
Sequence number field, an unsigned char[2].
</dd>
</dl>
</dd>
<dt>
<b>lua_rh</b></dt>
<dd>
Returned parameter. Contains the SNA request/response header (RH) of the message sent or received. For the RH for <b>RUI_WRITE</b>, all fields except the queued-response indicator (<b>lua_rh.qri</b>) and pacing indicator (<b>lua_rh.pi</b>) are used. Its subparameters are as follows:
<dl>
<dt>
<b>lua_rh.rri</b></dt>
<dd>
Request-response indicator, one bit.</dd>
<dt>
<b>lua_rh.ruc</b></dt>
<dd>
RU category, two bits. The following values are valid:
<p>
<b>LUA_RH_FMD</b>  (<b>0x00</b>)FM data segment<br>
<b>LUA_RH_NC</b>  (<b>0x20</b>)Network control<br>
<b>LUA_RH_DFC</b>  (<b>0x40</b>)Data flow control<br>
<b>LUA_RH_SC</b>  (<b>0x60</b>)Session control
</dd>
<dt>
<b>lua_rh.fi</b></dt>
<dd>
Format indicator, one bit.</dd>
<dt>
<b>lua_rh.sdi</b></dt>
<dd>
Sense data included indicator, one bit.</dd>
<dt>
<b>lua_rh.bci</b></dt>
<dd>
Begin chain indicator, one bit.</dd>
<dt>
<b>lua_rh.eci</b></dt>
<dd>
End chain indicator, one bit.</dd>
<dt>
<b>lua_rh.dr1i</b></dt>
<dd>
Definite response 1 indicator, one bit.</dd>
<dt>
<b>lua_rh.dr2i</b></dt>
<dd>
Definite response 2 indicator, one bit.</dd>
<dt>
<b>lua_rh.ri</b></dt>
<dd>
Exception response indicator (for a request), or response type indicator (for a response), one bit.</dd>
<dt>
<b>lua_rh.qri</b></dt>
<dd>
Queued response indicator, one bit.</dd>
<dt>
<b>lua_rh.pi</b></dt>
<dd>
Pacing indicator, one bit.</dd>
<dt>
<b>lua_rh.bbi</b></dt>
<dd>
Begin bracket indicator, one bit.</dd>
<dt>
<b>lua_rh.ebi</b></dt>
<dd>
End bracket indicator, one bit.</dd>
<dt>
<b>lua_rh.cdi</b></dt>
<dd>
Change direction indicator, one bit.</dd>
<dt>
<b>lua_rh.csi</b></dt>
<dd>
Code selection indicator, one bit.</dd>
<dt>
<b>lua_rh.edi</b></dt>
<dd>
Enciphered data indicator, one bit.</dd>
<dt>
<b>lua_rh.pdi</b></dt>
<dd>
Padded data indicator, one bit.
</dd>
</dl>
</dd>
<dt>
<b>lua_flag1</b></dt>
<dd>
Supplied parameter. Contains a data structure containing flags for messages supplied by the application. Its subparameters are as follows:
<dl>
<dt>
<b>lua_flag1.bid_enable</b></dt>
<dd>
Bid enable indicator, one bit. </dd>
<dt>
<b>lua_flag1.close_abend</b></dt>
<dd>
Close immediate indicator, one bit. </dd>
<dt>
<b>lua_flag1.nowait</b></dt>
<dd>
No wait for data flag, one bit. </dd>
<dt>
<b>lua_flag1.sscp_exp</b></dt>
<dd>
SSCP expedited flow, one bit.</dd>
<dt>
<b>lua_flag1.sscp_norm</b></dt>
<dd>
SSCP normal flow, one bit.</dd>
<dt>
<b>lua_flag1.lu_exp</b></dt>
<dd>
LU expedited flow, one bit.</dd>
<dt>
<b>lua_flag1.lu_norm</b></dt>
<dd>
LU normal flow, one bit.
</dd>
</dl>

<p>
Set one of the following flags to 1 to indicate on which message flow the data is to be sent:

<p class=indent1>
<b>lua_flag1.sscp_exp</b></p>

<p class=indent1>
<b>lua_flag1.sscp_norm</b></p>

<p class=indent1>
<b>lua_flag1.lu_exp</b></p>

<p class=indent1>
<b>lua_flag1.lu_norm</b></p>

</dd>
<dt>
<b>lua_message_type</b></dt>
<dd>
Not used by <b>RUI_WRITE</b> and should be set to zero. </dd>
<dt>
<b>lua_flag2</b></dt>
<dd>
Returned parameter. Contains flags for messages returned by LUA. Its subparameters are as follows:
<dl>
<dt>
<b>lua_flag2.bid_enable</b></dt>
<dd>
Indicates that <a href="luac03_8fmp.htm"><b>RUI_BID</b></a> was successfully re-enabled if set to 1.</dd>
<dt>
<b>lua_flag2.async</b></dt>
<dd>
Indicates that the LUA interface verb completed asynchronously if set to 1.</dd>
<dt>
<b>lua_flag2.sscp_exp </b></dt>
<dd>
Indicates SSCP expedited flow if set to 1.</dd>
<dt>
<b>lua_flag2.sscp_norm</b></dt>
<dd>
Indicates SSCP normal flow if set to 1.</dd>
<dt>
<b>lua_flag2.lu_exp</b></dt>
<dd>
Indicates LU expedited flow if set to 1.</dd>
<dt>
<b>lua_flag2.lu_norm</b></dt>
<dd>
Indicates LU normal flow if set to 1.
</dd>
</dl>
</dd>
<dt>
<b>lua_resv56</b></dt>
<dd>
Reserved and should be set to zero.</dd>
<dt>
<b>lua_encr_decr_option</b></dt>
<dd>
Reserved and should be set to zero.
</dd>
</dl>
<h4>Return Codes</h4>
<dl>
<dt>
LUA_OK</dt>
<dd>
Primary return code; the verb executed successfully.</dd>
<dt>
LUA_CANCELED</dt>
<dd>
Primary return code; the verb did not complete successfully because it was canceled by another verb.
<dl>
<dt>
LUA_TERMINATED</dt>
<dd>
Secondary return code; the verb was canceled because <a href="luac03_2c69.htm"><b>RUI_TERM</b></a> was issued for this session.
</dd>
</dl>
</dd>
<dt>
LUA_PARAMETER_CHECK</dt>
<dd>
Primary return code; the verb did not execute because of a parameter error.
<dl>
<dt>
LUA_BAD_DATA_PTR</dt>
<dd>
Secondary return code; the <b>lua_data_ptr</b> parameter contained an invalid value.</dd>
<dt>
LUA_BAD_SESSION_ID</dt>
<dd>
Secondary return code; an invalid value for <b>lua_sid</b> was specified in the VCB.</dd>
<dt>
LUA_DUPLICATE_WRITE_FLOW</dt>
<dd>
Secondary return code; <b>RUI_WRITE</b> was already outstanding for the session flow specified on this verb (the session flow is specified by setting one of the <b>lua_flag1</b> flow flags to 1). Only one <b>RUI_WRITE</b> at a time can be outstanding on each session flow.</dd>
<dt>
LUA_INVALID_FLOW</dt>
<dd>
Secondary return code; the <b>lua_flag1.sscp_exp</b> flow flag was set, indicating that the message should be sent on the SSCP expedited flow. LUA does not allow applications to send data on this flow.</dd>
<dt>
LUA_INVALID_POST_HANDLE</dt>
<dd>
Secondary return code; for a Windows NT or Windows 95 system using events as the asynchronous posting method, the Windows LUA VCB does not contain a valid event handle.
<p>
For the Windows version 3.<i>x</i> system, the Windows LUA VCB does not contain the valid procedure address returned by the <b>MakeProcInstance</b> command.

<p>
For OS/2, the Windows LUA VCB does not contain a valid semaphore or queue handle, which is needed when the verb completes asynchronously.
</dd>
<dt>
LUA_MULTIPLE_WRITE_FLOWS</dt>
<dd>
Secondary return code; more than one of the <b>lua_flag1</b> flow flags was set to 1. One and only one of these flags must be set to 1, to indicate which session flow the data is to be sent on.</dd>
<dt>
LUA_REQUIRED_FIELD_MISSING</dt>
<dd>
Secondary return code; indicates one of the following cases:
<table cellspacing=4 cols=1>
<tr valign=top>
<td width=100%><font face="Symbol">·</font>&nbsp;&nbsp;&nbsp;&nbsp;None of the <b>lua_flag1</b> flow flags was set. One and only one of these flags must be set to 1.</td>
</tr>
<tr valign=top>
<td width=100%><font face="Symbol">·</font>&nbsp;&nbsp;&nbsp;&nbsp;<b>RUI_WRITE</b> was used to send a response, and the response required more data than was supplied.</td>
</tr>
</table><br>

</dd>
<dt>
LUA_RESERVED_FIELD_NOT_ZERO</dt>
<dd>
Secondary return code; a reserved field in the verb record or a parameter not used by this verb was set to a nonzero value.</dd>
<dt>
LUA_VERB_LENGTH_INVALID</dt>
<dd>
Secondary return code; an LUA verb was issued with the value of <b>lua_verb_length</b> unexpected by LUA.
</dd>
</dl>
</dd>
<dt>
LUA_STATE_CHECK</dt>
<dd>
Primary return code; the verb did not execute because it was issued in an invalid state.
<dl>
<dt>
LUA_MODE_INCONSISTENCY</dt>
<dd>
Secondary return code; the SNA message sent on <b>RUI_WRITE</b> was not valid at this time. This is caused by trying to send data on the LU session before the session is bound. Check the sequence of SNA messages sent.</dd>
<dt>
LUA_NO_RUI_SESSION</dt>
<dd>
Secondary return code; <a href="luac03_37z5.htm"><b>RUI_INIT</b></a> has not yet completed successfully for the LU name specified on this verb.
</dd>
</dl>
</dd>
<dt>
LUA_UNSUCCESSFUL</dt>
<dd>
Primary return code; the verb record supplied was valid, but the verb did not complete successfully.
<dl>
<dt>
LUA_FUNCTION_NOT_SUPPORTED</dt>
<dd>
Secondary return code; indicates one of the following cases:
<table cellspacing=4 cols=1>
<tr valign=top>
<td width=100%><font face="Symbol">·</font>&nbsp;&nbsp;&nbsp;&nbsp;The <b>lua_rh.fi</b> bit (format indicator) was set to 1, but the first byte of the supplied RU was not a recognized request code.</td>
</tr>
<tr valign=top>
<td width=100%><font face="Symbol">·</font>&nbsp;&nbsp;&nbsp;&nbsp;The <b>lua_rh.ruc</b> parameter (RU category) specified the network control (NC) category; LUA does not allow applications to send requests in this category.</td>
</tr>
</table><br>

</dd>
<dt>
LUA_INVALID_PROCESS</dt>
<dd>
Secondary return code; the OS/2 process that issued this verb was not the same process that issued <b>RUI_INIT</b> for this session. Only the process that started a session can issue verbs on that session.</dd>
<dt>
LUA_INVALID_SESSION_PARAMETERS</dt>
<dd>
Secondary return code; the application used <b>RUI_WRITE</b> to send a positive response to a BIND message received from the host. However, SNA Server cannot accept the BIND parameters as specified, and has sent a negative response to the host. See <a href="luac02_5y1t.htm">SNA Considerations</a> for more information on the BIND profiles accepted by SNA Server.</dd>
<dt>
LUA_RSP_CORRELATION_ERROR</dt>
<dd>
Secondary return code; when using <b>RUI_WRITE</b> to send a response, <b>lua_th.snf</b> (which indicates the sequence number of the received message being responded to) did not contain a valid value.</dd>
<dt>
LUA_RU_LENGTH_ERROR</dt>
<dd>
Secondary return code; the <b>lua_data_length</b> parameter contained an invalid value. When sending data on the LU normal flow, the maximum length is as specified in the BIND received from the host; for all other flows the maximum length is 256 bytes.

<p>
<b>Note  </b>Any other secondary return code is an SNA sense code indicating that the supplied SNA data was invalid or could not be sent. See <a href="luac02_5y1t.htm">SNA Considerations</a> for information on interpreting the SNA sense codes that can be returned.

</dd>
</dl>
</dd>
<dt>
LUA_COMM_SUBSYSTEM_ABENDED</dt>
<dd>
Primary return code; indicates one of the following conditions:
<ul>
<li>
The node used by this conversation encountered an ABEND.</li>
<li>
The connection between the TP and the PU 2.1 node was broken (a LAN error).</li>
<li>
The SnaBase at the TP's computer encountered an ABEND.</li>
</ul>
</dd>
<dt>
LUA_SESSION_FAILURE</dt>
<dd>
Primary return code; a required SNA Server component has terminated.
<dl>
<dt>
LUA_LU_COMPONENT_DISCONNECTED</dt>
<dd>
Secondary return code; indicates that the LUA session has failed because of a problem with the link service or with the host LU.</dd>
<dt>
LUA_RUI_LOGIC_ERROR</dt>
<dd>
Secondary return code; an internal error was detected within LUA. This error should not occur during normal operation.
</dd>
</dl>
</dd>
<dt>
LUA_INVALID_VERB</dt>
<dd>
Primary return code; either the verb code or the operation code, or both, is invalid. The verb did not execute.</dd>
<dt>
LUA_STACK_TOO_SMALL</dt>
<dd>
Primary return code; the stack size of the application is too small to execute the verb. Increase the stack size of your application.</dd>
<dt>
LUA_COMM_SUBSYSTEM_NOT_LOADED</dt>
<dd>
Primary return code; a required component could not be loaded or has terminated while processing the verb. Thus, communication could not take place. Contact the system administrator for corrective action.</dd>
<dt>
LUA_UNEXPECTED_DOS_ERROR</dt>
<dd>
Primary return code; after issuing an operating system call, an unexpected operating system return code was received and is specified in the secondary return code.
</dd>
</dl>
<h4>Remarks</h4>
<p>
<a href="luac03_37z5.htm"><b>RUI_INIT</b></a> must be issued successfully before this verb is issued.</p>
<p>
When sending an SNA request, all applicable values in the <b>lua_rh</b> must be set. Chaining and bracketing are the responsibility of the application.</p>
<p>
When sending a response, the type of response determines the <b>RUI_WRITE</b> information required. For all responses, you must:
<ul>
<li>
Set the selected <b>lua_rh.rri</b> flag to 1.</li>
<li>
Provide the sequence number in <b>lua_th.snf</b> for the request to which you are responding.</li>
</ul>
<p>
For multichain message responses, the sequence number of the last received chain element must be used. For a response to a multichain message ending with a CANCEL command, the CANCEL command sequence number is used.</p>
<p>
For positive responses that only require the request code, set <b>lua_rh.ri </b>to zero (indicating that the response is positive) and <b>lua_data_length</b> to zero (indicating that no data is provided). The request code is filled in by the RUI, using the sequence number provided.</p>
<p>
For negative responses, set <b>lua_rh.ri </b>to 1, <b>lua_data_ptr</b> to the SNA sense code address, and <b>lua_data_length </b>to the SNA sense code length (four bytes). The sequence number is used by the RUI to fill in the request code.</p>
<p>
For positive responses to the BIND and STSN commands that require data in the responses, set <b>lua_data_ptr </b>to point to the response and set <b>lua_data_length </b>to the length of the data provided in <b>lua_data_ptr</b>.</p>
<p>
While an existing <b>RUI_WRITE</b> is pending, you can issue a second <b>RUI_WRITE</b> only if it specifies a different session flow from the pending <b>RUI_WRITE</b>. That is, you cannot have more than one <b>RUI_WRITE</b> outstanding for the same session flow.</p>
<p>
<b>RUI_WRITE</b> can be issued on the SSCP normal flow at any time after a successful <a href="luac03_37z5.htm"><b>RUI_INIT</b></a>. <b>RUI_WRITE</b> verbs on the LU expedited or LU normal flows are permitted only after a BIND has been received, and must abide by the protocols specified on the BIND.</p>
<p>
Note that successful completion of <b>RUI_WRITE</b> indicates that the message was queued successfully to the data link; it does not necessarily indicate that the message was sent successfully, or that the host accepted it.</p>
<p>
Pacing can be used on the secondary-to-primary half-session (specified on the BIND) to prevent the LUA application from sending more data than the local or remote LU can handle. If this is the case, an <b>RUI_WRITE</b> on the LU normal flow may be delayed by LUA and may take some time to complete.</p>
<h4>See Also</h4>
<p>
<a href="luac03_37z5.htm"><b>RUI_INIT</b></a>, <a href="luac03_7dwh.htm"><b>RUI_READ</b></a>, <a href="luac03_2c69.htm"><b>RUI_TERM</b></a>, <a href="luac04_7bxd.htm"><b>SLI_OPEN</b></a>, <a href="luac04_75i9.htm"><b>SLI_PURGE</b></a>, <a href="luac04_2nfl.htm"><b>SLI_RECEIVE</b></a>, <a href="luac04_2lr5.htm"><b>SLI_SEND</b></a></p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

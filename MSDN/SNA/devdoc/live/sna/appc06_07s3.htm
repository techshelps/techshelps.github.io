<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WinAPPCCancelBlockingCall</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_sna_winappccancelblockingcall_appc"></a>WinAPPCCancelBlockingCall</h1>
<p>
The <b>WinAPPCCancelBlockingCall</b> function cancels any outstanding blocking operation for its thread. Any outstanding blocked call canceled will cause an error code of wappccancel to be generated.</p>
<p>
<b>BOOL WINAPI</b><i> </i><b>WinAPPCCancelBlockingCall(</b><i>void</i><b>);</b></p>
<h4>Return Values</h4>
<p>
The return value specifies whether the cancellation request was successful. If the value is zero, the request was canceled. Otherwise, the value is the following:
<dl>
<dt>
wappcinvalid</dt>
<dd>
An error code indicating that there is no outstanding blocking call.
</dd>
</dl>
<h4>Remarks</h4>
<p>
If the outstanding verb relates to a conversation (for example, <a href="appc05b_7wbn.htm"><b>SEND_DATA</b></a> or <a href="appc05b_19er.htm"><b>RECEIVE_AND_WAIT</b></a>), the verb is purged and the session is closed. If the verb relates to a TP (for example, <a href="appc05b_0m77.htm"><b>RECEIVE_ALLOCATE</b></a> or <a href="appc04_0fs3.htm"><b>TP_STARTED</b></a>), the TP is ended. In both cases, while the implementation brings down conversations and sessions as cleanly as possible, it does not flush send buffers, wait for confirmations, and so on. This call is synchronous and after the processing described above is complete, the function is finished.</p>
<p>
In Microsoft® Windows NT® and Microsoft® Windows® 95, a multithreaded application can have multiple blocking operations outstanding, but only one per thread. To distinguish between multiple outstanding calls, <b>WinAPPCCancelBlockingCall</b> cancels the outstanding operation on the current, or calling, application thread if one exists; otherwise, it fails. By default in Windows NT and Windows 95, Windows APPC suspends the calling application thread while an operation is outstanding. As a result, the thread on which the blocking operation was initiated will not regain control (and therefore, will not be able to issue a call to <b>WinAPPCCancelBlockingCall</b>) unless a blocking hook is registered for the thread using <a href="appc06_2fs3.htm"><b>WinAPPCSetBlockingHook</b></a>. This condition does not apply to Microsoft® Windows® version 3.<i>x</i> since applications only have one effective thread and the default blocking hook is registered by default.</p>
<p>&nbsp;</p></body>
</HTML>

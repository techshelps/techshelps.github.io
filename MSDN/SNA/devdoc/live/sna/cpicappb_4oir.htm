<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Multithreaded APINGD</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_sna_multithreaded_apingd_cpic"></a>Multithreaded APINGD</h2>
<p>
The version of APINGD provided in the sample code illustrates how to achieve nonqueued behavior from an invokable TP in Windows NT or Windows 95. This means that multiple copies of APING can talk to the same copy of APINGD at the same time. However, you cannot run multiple copies of an Windows NT service. The features are achieved by always having a thread with an <a href="cpic03_70df.htm"><b>Accept_Conversation</b></a> outstanding, so that any incoming attach for APINGD will always be satisfied immediately.</p>
<h4>Setup</h4>
<p>
Setup requirements are the same as for the single-threaded version. Note that the remote LU and mode used should support parallel sessions so that more than one conversation at a time is possible.</p>
<h4>Input and Output</h4>
<p>
These are the same as for the single-threaded version.</p>
<h4>Operation</h4>
<p>
Operation is similar to that of the single-threaded version. The same three routines are used (<b>main</b>, <b>ServiceMain </b>and <b>ControlHandler</b>). <b>ServiceMain </b>calls the <b>TPStart </b>routine. This routine must not return until the service is ready to terminate.</p>
<p>
The <b>TPStart </b>routine does some initialization, creates the first conversation thread, and then waits on an event created by the <b>ServiceMain </b>routine. This event is set when the service control manager issues an order to STOP or SHUTDOWN. When the event is set, it calls <a href="cpic04_455v.htm"><b>WinCPICCleanup</b></a>, which will cancel any active conversations and return outstanding <a href="cpic03_70df.htm"><b>Accept_Conversation</b></a> calls, thus making all conversation threads exit. It then marks the service as STOPPED.</p>
<p>
The <b>ThreadStart </b>routine is the entry point for each of the conversation threads. It issues <b>Accept_Conversation</b> and <a href="cpic03_6un7.htm"><b>Wait_For_Conversation</b></a>, and when this completes, it creates another thread to wait for the next attach while the existing thread services the first attach.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Confirmation and Rejection of Inbound Data</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_sna_confirmation_and_rejection_of_inbound_data_3270"></a>Confirmation and Rejection of Inbound Data</h3>
<p>
For every SNA chain of data sent or received for which responses are outstanding (RQE or RQD), the local node maintains a correlation table entry (CT). If the CTs become depleted, then the local node will terminate the session using the most CTs. A <a href="3270c4_375c.htm"><b>Status-Error</b></a> message (code 0x46) and a <a href="3270c4_31tc.htm"><b>Close(PLU) Request</b></a> are sent to the application, and a TERM-SELF message is sent to the host. CT shortages (inbound) can be avoided by sending CD (for half-duplex) data, or data ACKRQD, or any <b>Status-Control(CHASE)</b>, or <b>Status-Control(LUSTAT)</b> with ACKRQD. Outbound shortages can be avoided by sending courtesy acknowledge messages as described in <a href="3270c3_41gw.htm">Opening the PLU Connection</a>.</p>
<p>
The local node sends chains of data to the host with their chain response mode specified as follows:
<ol>
<li>
Definite<p>
If the application sends a <a href="3270c4_4eeo.htm"><b>Data</b></a> message to the local node with the ACKRQD field set, and the BIND parameters specified that the secondary uses definite or definite/exception response mode.
</li>
<li>
Exception<p>
If the application sends a <b>Data</b> message to the local node without the ACKRQD field set, and the BIND parameters specified that the secondary uses exception or definite/exception response mode.
</li>
<li>
No-Response<p>
If the application sends a <b>Data</b> message to the local node without the ACKRQD field set, and the BIND parameters specified that the secondary uses no-response mode.
</li>
</ol>
<p>
If the setting of ACKRQD on a <a href="3270c4_4eeo.htm"><b>Data</b></a> message from the application does not reflect the chain response mode specified in the BIND parameters, the local node returns a <a href="3270c4_7wxc.htm"><b>Status-Acknowledge(Nack-2)</b></a> indicating a noncritical error code; for example, if the application specifies ACKRQD but the BIND parameters do not permit the local node to send definite response chains.</p>
<p>
In case 1, the application receives an acknowledgment to all FMD chains it sends to the local node:
<ul>
<li>
Positive responses from the host are returned to the application as <a href="3270c4_5z00.htm"><b>Status-Acknowledge(Ack)</b></a> messages.</li>
<li>
Negative responses from the host are returned as <a href="3270c4_11bk.htm"><b>Status-Acknowledge(Nack-1)</b></a> messages carrying the SNA sense codes.</li>
<li>
Errors detected by the local node when attempting to send the message are returned as <a href="3270c4_7wxc.htm"><b>Status-Acknowledge(Nack-2)</b></a> messages carrying the equivalent error code.</li>
</ul>
<p>
In case 2, the application only receives an acknowledgment of an FMD chain it sends to the local node for:
<ul>
<li>
Negative responses from the host, which are returned as <b>Status-Acknowledge(Nack-1)</b> messages carrying the SNA sense codes.</li>
<li>
Errors detected by the local node when attempting to send the message, which are returned as <b>Status-Acknowledge(Nack-2)</b> messages carrying the equivalent error code.</li>
</ul>
<p>
In case 3, the application only receives an acknowledgment of an FMD chain it sends to the local node when the node detects an error in the message and sends the application a <b>Status-Acknowledge(Nack-2)</b>. The only dissent that the host can make is to send a subsequent LUSTAT 0x400A (no response not supported) with the sequence number of the request in the sense qualifier field; this is presented to the application as a <b>Status-Control(LUSTAT)</b> as usual.</p>
<p>
Whenever an application receives a <b>Status-Acknowledge(Ack)</b> or <b>Status-Acknowledge(Nack-1)</b>, it implicitly confirms receipt by the partner half-session in the host of all previously sent chains.</p>
<p>
In case 2, the application does not usually receive such responses from the host to chains it has sent, and in case 3, the application never receives such responses. Therefore, to get the host to confirm receipt of all previously sent chains, the application should issue a <b>Status-Control(CHASE) Request</b> with ACKRQD set. This causes the local node to generate an SNA CHASE request to the host. The receipt of the response to this CHASE confirms that the host has received this CHASE request and all previous chains sent by the application. The local node issues a <b>Status-Control(CHASE) Acknowledge</b> to notify the application that this is so.</p>
<p>
The following three figures illustrate the inbound data confirmation and rejection protocols between the local node and the application, and how those protocols relate to the underlying SNA protocols.</p>
<p>
In the first illustration, an application sets the ACKRQD field in an inbound data chain to get the host to confirm receipt of the chain and all previously sent chains.</p>
<p>
<img src="images/32703p.gif" border=0></p>
<p>
In the following illustration, the <b>Status-Acknowledge(Nack-1)</b> rejects the last chain, but confirms receipt by the host of all previously sent data chains.</p>
<p>
<img src="images/32703pa.gif" border=0></p>
<p>
In the following illustration, the application uses a <b>Status-Control(CHASE)</b> to get the host to confirm receipt of the corresponding CHASE request and all previously sent chains.</p>
<p>
<img src="images/32703pb.gif" border=0></p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Null-Terminated Strings</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_sna_null_terminated_strings_aftp"></a>Null-Terminated Strings</h1>
<p>
The AFTP API does not require input strings to be null-terminated and does not guarantee that output strings are null-terminated. If there is a null terminator, it is not included in the return size.</p>
<p>
The C programmer should be aware of the fact that strings are handled differently in AFTP than they are in the C standard library. All API calls receiving strings as input require both the string itself and the length of the string. The <b>strlen </b>function can be used for this. The null terminator must not be counted as part of the string length. API calls that output strings require three string-related parameters:
<ul>
<li>
The string.</li>
<li>
The length of the string buffer that has been allocated by the calling program.</li>
<li>
The actual length of the string that is output. AFTP output strings are not null-terminated. For the C programmer to use them as standard C strings, a null character must be added to the end of the string.</li>
</ul>
<p>&nbsp;</p></body>
</HTML>

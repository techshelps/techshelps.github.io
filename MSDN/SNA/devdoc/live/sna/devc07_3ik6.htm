<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Logging Macros</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_sna_logging_macros_dev"></a>Logging Macros</h3>
<p>
The following macros can be used to log messages at levels 6, 8, 10, 12, and 16:</p>
<p class=indent1>
<b>COM_LOG6<br>
COM_LOG8<br>
COM_LOG10<br>
COM_LOG12<br>
COM_LOG16</b></p>
<h4>Syntax</h4>
<p>
<b>COM_LOG<i>a</i> (</b><i> b</i> <b>)</b> "" <b>))</b><br>
for a message with no parameters.</p>
<p>
<b>COM_LOG<i>a</i> (</b><i> b</i> <b>)</b> " %<i>c</i> " ,<i> e</i> <b>))</b><br>
for a message with one parameter.</p>
<p>
<b>COM_LOG<i>a</i> (</b><i> b</i> <b>)</b> " %<i>c</i> | %<i>d</i> | . . ." ,<i> e</i> ,<i> f</i> , . . .<b>))</b><br>
for a message with more than one parameter.</p>
<h4>Parameters</h4>
<dl>
<dt>
<i>a</i></dt>
<dd>
Severity: 6, 8, 10, 12, or 16.</dd>
<dt>
<i>b</i></dt>
<dd>
Message number.</dd>
<dt>
<i>c</i>, <i>d</i>, . . .</dt>
<dd>
Format of the first, second, and so on up to nine variable parameters.</dd>
<dt>
<i>e</i>, <i>f</i>, . . .</dt>
<dd>
First, second, and so on up to nine variable parameters.
</dd>
</dl>
<h4>Remarks</h4>
<p>
Up to nine parameters can be supplied, according to the number of "<i>%n"</i> placeholders in the text of the message being logged. The first parameter replaces %1, the second replaces %2, and so on.</p>
<p>
The formats <i>c</i> and <i>d</i> must be valid formats for the C function <b>sprintf</b>, because the logging macro uses this function to generate the complete text string to be logged. </p>
<p>
Note that the unmatched parentheses on the macro call are deliberate; the expansion of the macro supplies the remaining parentheses so that the resulting code is correct.</p>
<p>&nbsp;</p></body>
</HTML>

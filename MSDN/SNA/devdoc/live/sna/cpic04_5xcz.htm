<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Extensions for the Windows Environment</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_sna_extensions_for_the_windows_environment_cpic"></a>Extensions for the Windows Environment</h1>
<p>
This section describes API extensions to Windows CPI-C that allow nonblocking or asynchronous verb completion. Asynchronous verbs return control to the program immediately, without waiting for full execution, and must notify the application later when the verb has been completed. An application is also notified in response to the completion of a <a href="cpic03_6un7.htm"><b>Wait_For_Conversation</b></a> call. In contrast, synchronous verbs block—the function call does not return until the call has completed.</p>
<p>
Under Microsoft® Windows NT® and Microsoft® Windows® 95, two methods are available for handling asynchronous verb completion:
<ul>
<li>
Message posting using window handles.</li>
<li>
Waiting on Win32® events.</li>
</ul>
<p>
The first method uses messages posted to a window handle to notify an application of verb completion. This method using window handles and messages is also supported on Windows 3.x. There is one such window for each CPI-C application. Each CPI-C conversation can have one asynchronous verb outstanding at any time. When a verb completes, the posting to the window takes as parameters the CPI-C conversation identifier of the verb that has completed, and the return code of the verb. </p>
<p>
The extensions using window handles and message posting described in this section have been designed for all implementations and versions of Microsoft Windows from version 3.0 through the latest versions of Windows NT and Windows 95. They provide compatibility for Windows programming and optimum application performance in the 16-bit operating environment.</p>
<p>
A second method using Win32 events for notification is supported on Microsoft® SNA Server version 3.0 and later. The extensions using Win32 events described in this section (<a href="cpic04_0yw3.htm"><b>WinCPICSetEvent</b></a> and <a href="cpic04_51yb.htm"><b>WinCPICExtractEvent</b></a>)<b> </b>operate only on Windows NT and Windows 95, and offer the optimum application performance in the 32-bit operating environment. If an event has been registered with the conversation, then an application can call the Win32 <b>WaitForSingleObject</b> or <b>WaitForMultipleObjects</b> function to wait to be notified of the completion of the verb.</p>
<p>
Windows CPI-C allows multithreaded Windows-based processes. Multithreading is the running of several processes in rapid sequence within a single program. A process contains one or more threads of execution. The 16-bit Windows environment is not multithreaded. In this instance, a task corresponds to a process with a single thread. All references to threads in this document refer to actual threads in multithreaded Windows environments. Using Win32 events is a common technique used by a multithreaded application that can dedicate a thread or several threads to handle event handling.</p>
<p>
The extension descriptions in this section provide a definition of the function, syntax, return values, and remarks for using these Windows extensions in CPI-C programs. </p>
<p>&nbsp;</p></body>
</HTML>

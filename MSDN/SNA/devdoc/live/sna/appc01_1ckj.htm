<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OS/2 Considerations</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_sna_os.2f.2_considerations_appc"></a>OS/2 Considerations</h1>
<p>
This topic summarizes information about developing TPs for the OS/2 system.
<dl>
<dt>
<b>Critical sections</b></dt>
<dd>
Exercise great caution when using critical sections, which are the parts of a program that must run without interruption. A TP must not issue an APPC verb within a critical section.</dd>
<dt>
<b>Data segments</b></dt>
<dd>
Data is sent from and received in data buffers established by the TP. A data buffer must reside on an unnamed shared data segment and it must fit entirely within the data segment. Many data buffers can reside on the same data segment.
<p>
To allocate a data segment, use the <b>DosAllocSeg</b> function with <i>Flags</i> equal to 1.

<p>
To improve efficiency, a TP can reuse the same data segment each time it issues a verb requiring a data buffer. If necessary, the program can allocate a segment of up to 64K and then partition the segment into data buffers.
</dd>
<dt>
<b>Limits</b></dt>
<dd>
For more information about system limits, see your product documentation.</dd>
<dt>
<b>Load-time linking</b></dt>
<dd>
For a TP to be dynamically linked to APPC at load time, you must do one of the following at link time:
<ul>
<li>
Insert the following <b>IMPORTS</b> statement in the definition (.DEF) file used to link the TP:<pre><code>IMPORTS APPC.APPC
 </code></pre>
</li>
<li>
Link the TP to APPC.LIB, which contains the entry point linkage information for various APIs, including APPC.</li>
</ul>
</dd>
<dt>
<b>Multiple processes</b></dt>
<dd>
Multiple processes cannot have the same TP identifier (<b>tp_id</b>). Only the process that issues <a href="appc04_0fs3.htm"><b>TP_STARTED</b></a> or <a href="appc05b_0m77.htm"><b>RECEIVE_ALLOCATE</b></a> can use the <b>tp_id</b> returned by the verb. Another process wanting to use APPC must issue <b>TP_STARTED</b> or <b>RECEIVE_ALLOCATE</b> to obtain its own <b>tp_id</b>.
<p>
Two or more instances of the same TP can be run as different processes, but each will be assigned a different <b>tp_id</b>.

<p>
One process can contain many TPs, each with its own <b>tp_id</b>. In this case, you may want to create a separate thread for each TP to avoid the possibility of a deadlock. (A deadlock occurs when an APPC verb that is hung blocks the execution of verbs in other conversations and TPs.)

<p>
A process containing many TPs can issue two or more verbs simultaneously, provided that each verb is for a different TP (specifies a different <b>tp_id</b>).
</dd>
<dt>
<b>Multiple threads</b></dt>
<dd>
A TP can have multiple threads that issue verbs. Windows APPC makes provisions for multithreaded processes. A process contains one or more threads of execution. All references to threads refer to actual threads in the multithreaded OS/2 environment.
<p>
With the exception of <a href="appc05b_92oz.htm"><b>RECEIVE_AND_POST</b></a>, <a href="appc05a_3jvn.htm"><b>MC_RECEIVE_AND_POST</b></a>, <a href="appc05b_19er.htm"><b>RECEIVE_AND_WAIT</b></a>, and <a href="appc05a_5qlf.htm"><b>MC_RECEIVE_AND_WAIT</b></a>, only one conversation verb can be outstanding at a time on any conversation; however, other verbs can be issued for other conversations. This guideline also applies to TP verbs and TPs. Although multiple TP verbs can be issued, only one TP verb can be outstanding at a time on a TP. This applies to both multithreaded applications and single-threaded applications that use asynchronous calls.
</dd>
<dt>
<b>Packing</b></dt>
<dd>
VCBs are not packed. As a result, DWORDs and WORDs are on WORD boundaries, and BYTEs are on BYTE boundaries. This means, for example, that there is not a 2-byte gap between the primary and secondary return codes. VCBs should be accessed using the structures provided, and compiler options that change this packing method should be avoided.</dd>
<dt>
<b>Run-time linking</b></dt>
<dd>
For a TP to be dynamically linked to APPC at run time, the TP must issue the following calls:
<ul>
<li>
<b>DosLoadModule</b> to load APPC.DLL, the DLL for APPC.</li>
<li>
<b>DosGetProcAddr</b> to specify APPC as the desired entry point to the DLL.</li>
</ul>

<p>
Unlinking (the <b>DosFreeModule</b> call) is not supported.
</dd>
<dt>
<b>Simultaneous conversations</b></dt>
<dd>
A TP can simultaneously participate in as many as 64 conversations for each OS/2 process.</dd>
<dt>
<b>SNA Server CSVs</b></dt>
<dd>
SNA Server CSVs are compatible with the common services programming interface provided by IBM ES for OS/2 version 1.0, with the following exceptions:
<ul>
<li>
VCBs are not packed. As a result, DWORDs and WORDs are on WORD boundaries, and BYTEs are on BYTE boundaries. This means, for example, that there is not a 2-byte gap between the primary and secondary return codes. VCBs should be accessed using the structures provided, and compiler options that change this packing method should be avoided.</li>
<li>
Trace information for products is stored in trace files, not in a storage buffer. With the SNA Server implementation of <a href="appc08c_6bmr.htm"><b>COPY_TRACE_TO_FILE</b></a>, the trace information in these files is copied to a single trace file.</li>
<li>
The additional tracing features of <a href="appc08c_20yr.htm"><b>DEFINE_TRACE</b></a> are not applicable because of differences between the SNA Server product architecture and the IBM Communications Manager architecture. The tracing features provided in IBM OS/2 ES version 1.0 include event tracing, automatic tracing, and tracing support for the following:</li>
</ul>

<table cellspacing=4 cols=1>
<tr valign=top>
<td width=100%>&nbsp;&nbsp;&nbsp;&nbsp;X.25 API verbs, frame data, and data link control (DLC) data</td>
</tr>
<tr valign=top>
<td width=100%>&nbsp;&nbsp;&nbsp;&nbsp;Twin axial data</td>
</tr>
</table><br>


<ul>
<li>
With the SNA Server implementation of <a href="appc08c_3z6r.htm"><b>GET_CP_CONVERT_TABLE</b></a>, user-defined code pages are applicable only in an OS/2 environment. These code pages are supported for only the Windows NT, Windows 95, and OS/2 systems because of the additional memory occupancy in the MS-DOS and Windows environments. The new user-defined code pages are explained in the description of the verb.</li>
<li>
With the SNA Server implementation of <a href="appc08c_87ab.htm"><b>TRANSFER_MS_DATA</b></a>, support for the PD_STATS subvector type is retained.</li>
<li>
<b>DEFINE_DUMP</b> and <b>SET_USER_LOG_QUEUE</b>, provided in IBM OS/2 ES version 1.0, are not applicable because of differences between the SNA Server architecture and IBM Communications Manager architecture. If either verb is called, INVALID_VERB is returned.</li>
</ul>
</dd>
<dt>
<b>Stack size</b></dt>
<dd>
The recommended stack size for a TP is at least 3000 bytes.
<p>
When executing a verb, APPC uses the calling TP's stack. The combination of OS/2 and APPC requires 2560 bytes of stack space, and the TP requires additional stack space for its variables.
</dd>
<dt>
<b>Translating service TP names to ASCII for SNA.INI</b></dt>
<dd>
For service TPs on SNA Server clients running OS/2, a line must be added to the SNA.INI file, specifying the TP name in ASCII. For more information, see <a href="cpic02_9d0j.htm">Translating SNA Service TP Names to ASCII for SNA.INI</a>.</dd>
<dt>
<b>VCB segment</b></dt>
<dd>
The segment containing the VCB must be a writable segment.</dd>
</dl>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

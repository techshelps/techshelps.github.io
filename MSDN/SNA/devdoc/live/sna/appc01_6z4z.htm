<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Windows Considerations</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_sna_windows_considerations_appc"></a>Windows Considerations</h1>
<p>
This topic summarizes information about developing TPs for the Microsoft® Windows® version 3.<i>x</i> system.
<dl>
<dt>
<b>Blocking routines</b></dt>
<dd>
Do not use blocking functions if your application runs in Windows version 3.<i>x</i>. Instead, use <a href="appc06_66sj.htm"><b>WinAsyncAPPC</b></a> in conjunction with a <b>WinAsyncAPPC</b> Windows message.</dd>
<dt>
<b>Limits</b></dt>
<dd>
For APPC limits, see your product documentation. For the Windows version 3.x system, the number of simultaneous CSVs allowed per computer is 64. Only one of these verbs per process can be synchronous.</dd>
<dt>
<b>Load-time linking</b></dt>
<dd>
For a TP to be dynamically linked to APPC at load time, you must do one of the following at link time:
<ul>
<li>
Insert the following <b>IMPORTS</b> statements in the definition (.DEF) file used to link the TP:<pre><code>IMPORTS WINAPPC.APPC
IMPORTS WINAPPC WinAsyncAPPC.APPC
 </code></pre>
</li>
<li>
Link the TP to WINAPPC.LIB, which contains the entry point linkage information for APPC. If you intend to use CSVs, you must also link to WINCSV.LIB, which contains the entry point information for CSVs.</li>
</ul>
</dd>
<dt>
<b>Packing</b></dt>
<dd>
VCBs are not packed. As a result, DWORDs and WORDs are on WORD boundaries, and BYTEs are on BYTE boundaries. This means, for example, that there is not a 2-byte gap between the primary and secondary return codes. VCBs should be accessed using the structures provided, and compiler options that change this packing method should be avoided.</dd>
<dt>
<a href="appc05b_92oz.htm"><b>RECEIVE_AND_POST</b></a> and <a href="appc05a_3jvn.htm"><b>MC_RECEIVE_AND_POST</b></a></dt>
<dd>
These verbs have been replaced for Windows version 3.<i>x</i> by calling <a href="appc05b_19er.htm"><b>RECEIVE_AND_WAIT</b></a> or <a href="appc05a_5qlf.htm"><b>MC_RECEIVE_AND_WAIT</b></a> using <a href="appc06_66sj.htm"><b>WinAsyncAPPC</b></a>.</dd>
<dt>
<b>Registering and deregistering applications</b></dt>
<dd>
All Windows APPC applications must call <a href="appc06_4u03.htm"><b>WinAPPCStartup</b></a> at the beginning of the session to register the application and <a href="appc06_57fn.htm"><b>WinAPPCCleanup</b></a> at the end of the session to deregister the application.
<p>
All Windows CSV applications must call the Windows SNA extension <a href="appc09c_197n.htm"><b>WinCSVStartup</b></a> at the beginning of the session to register the application and <a href="appc09c_1mn7.htm"><b>WinCSVCleanup</b></a> to deregister the application when the session is finished.
</dd>
<dt>
<b>Run-time linking</b></dt>
<dd>
For a TP to be dynamically linked to APPC at run time, the TP must issue the following calls:
<ul>
<li>
<b>LoadLibrary</b> to load WINAPPC.DLL, the dynamic-link library for APPC.</li>
<li>
<b>GetProcAddress</b> to specify APPC on all the desired entry points to the DLL such as <b>APPC</b>, <b>WinAsyncAPPC</b>, <b>WinAPPCStartup</b>, and <b>WinAPPCCleanup</b>.</li>
</ul>

<p>
The TP must issue the <b>FreeLibrary</b> call when the APPC library is no longer required.
</dd>
<dt>
<b>Simultaneous conversations</b></dt>
<dd>
A TP can participate in as many as 64 conversations simultaneously within the Windows environment. However, if more than one TP is active at once, the total number of conversations cannot exceed 64.</dd>
<dt>
<b>Translating service TP names to ASCII for WIN.INI</b></dt>
<dd>
For service TPs on SNA Server clients running Windows version 3.<i>x</i>, a line must be added to the WIN.INI file, specifying the TP name in ASCII. For more information, see <a href="cpic02_2plv.htm">Translating SNA Service TP Names to ASCII for WIN.INI</a>.</dd>
<dt>
<b>Yielding to other components</b></dt>
<dd>
Because Windows version 3.<i>x</i> is single-threaded, there is only one thread of execution. In the case where a function must wait before completing a task, the only thread of execution could block to allow other tasks to proceed.
<p>
This means that while in a blocking call, the calling application's Window procedure can be called. To test if this is the case, the extension <a href="appc06_5un7.htm"><b>WinAPPCIsBlocking</b></a> is provided. Any attempt to make a second blocking call with one already outstanding will cause the call to fail with the return code ap_thread_blocking.

<p>
Windows APPC and CSV contain a default yield procedure for Windows version 3.<i>x</i> that can yield to other functions while waiting for the first function to complete. The default is:

<pre><code>BOOL DefaultBlockingHook (void)  {
    MSG msg:
    /* get the next message if any */
    if ( PeekMessage (&amp;msg,0,0,PM_NOREMOVE)  )   {
if  ( msg.message = = WM_QUIT  )
    return FALSE;   / /  let app process WM_QUIT
PeekMessage  ( &amp;msg,0,0,PM_REMOVE)  ;
TranslateMessage  (&amp;msg)  ;
DispatchMessage  (&amp;msg)  ;
    }
    /*TRUE if no WM_QUIT received */
    return TRUE;
}
 </code></pre>

<p>
Besides the default yield procedure, Windows APPC provides <a href="appc06_2fs3.htm"><b>WinAPPCSetBlockingHook</b></a> to support applications that require more complex message processing. This call allows a Windows APPC implementation to block APPC function calls by means of a new function. It is used by Windows version 3.<i>x </i>applications to make blocking calls without blocking the rest of the system. To call <b>WinAPPCSetBlockingHook:</b>

<pre><code>FARPROC WINAPI WinAPPCSetBlockingHook (FARPROC 1pBlockFunc)
 </code></pre>

<p>
<a href="appc06_1cv7.htm"><b>WinAPPCUnhookBlockingHook</b></a> removes any previous blocking hook that has been installed and reinstalls the default blocking mechanism. To call <b>WinAPPCUnhookBlockingHook</b>:

<pre><code>BOOL WINAPI WinAPPCUnhookBlockingHook (void)
 </code></pre>
</dd>
</dl>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>APING and APINGD</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_sna_aping_and_apingd_cpic"></a>APING and APINGD</h2>
<p>
The sample code for APING and APINGD is ported from code on the IBM APPC/CPI-C disk. They are end-to-end connectivity testers; they simply show that the configuration is correct by exchanging bytes of data across the link. APING is the client or invoking (local) half and attempts to contact APINGD (the APPC/CPI-C ping daemon or server), which is written here as a Windows NT service so it can be installed as an invokable TP on the remote computer.</p>
<h4>Setup</h4>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To set up APING and APINGD</h5>
<ol>
<li>
Create an appropriate APPC LU-LU-mode triplet (for example, LUPING-LUPINGD-#INTER).</li>
<li>
Set up a CPI-C symbolic destination name that contains the configured remote LU and mode. (The TP name for APINGD is APINGD.)</li>
<li>
Assign the local APPC LU to the APING TP, either by using a registry entry of APING:REG_SZ:<i>LocalLUAlias</i> in the <b>SnaBase\Parameters\Clients</b> key, or by assigning the local LU as the default local APPC LU for the user who will run APING.</li>
</ol>
<h4>Input and Output</h4>
<p>
APING is a console application. The syntax of its command line is</p>
<p>
<b>aping</b> [<b>-s</b><i>size</i>] [<b>-i</b><i>iterations</i>] [<b>-c</b><i>packets</i>] [<b>-m</b><i>mode</i>] [<b>-t</b><i>tpname</i>] <i>PartnerLUName</i></p>
<p>
<b>aping</b> [<b>-s</b><i>size</i>] [<b>-i</b><i>iterations</i>] [<b>-c</b><i>packets</i>] <i>SymbolicDestinationName</i></p>
<p>
where
<dl>
<dt>
<b>-s</b><i>size</i></dt>
<dd>
Specifies the size, in bytes, of the packet transmitted. The default is 100 bytes.</dd>
<dt>
<b>-i</b><i>iterations</i></dt>
<dd>
Specifies the number of iterations to carry out. The default is 2.</dd>
<dt>
<b>-c</b><i>packets</i></dt>
<dd>
Specifies the number of consecutive packets sent by each side. The default is 1.</dd>
<dt>
<b>-m</b><i>mode</i></dt>
<dd>
Specifies the mode name. The default is #INTER.</dd>
<dt>
<b>-t</b><i>tpname</i></dt>
<dd>
Specifies the TP name of the TP to start on the remote server. The default is APINGD.</dd>
<dt>
<i>PartnerLUName</i></dt>
<dd>
Specifies the partner LU name of the destination. </dd>
<dt>
<i>SymbolicDestinationName</i></dt>
<dd>
Specifies the symbolic destination name of the destination.
</dd>
</dl>
<p>
Output goes to <b>stdout</b> and <b>stderr</b>, and details the data rates and timings for each iteration.</p>
<h4>Operation</h4>
<p>
Note that with APINGD, <a href="cpic03_68wz.htm"><b>Specify_Local_TP_Name</b></a> is used to set the local TP name, so <a href="cpic03_6un7.htm"><b>Wait_For_Conversation</b></a> must be used to wait for the <a href="cpic03_70df.htm"><b>Accept_Conversation</b></a> call to complete, since it will return asynchronously.</p>
<p>
The code at the end of APINGD.C is a stub for making any TP into a Windows NT service. There are three routines that are needed: <b>main</b>, <b>ServiceMain</b>, and <b>ControlHandler</b>. See the comment in the file for details of how these work. The <b>TPStart </b>routine is the entry point of the TP proper.</p>
<p>
In particular, note that in response to the SERVICE_CONTROL_STOP or SERVICE_CONTROL_SHUTDOWN messages in the <b>ControlHandler </b>routine, action should normally be taken to stop the service, but because each run does not last long with the samples, no such action is taken.</p>
<p>&nbsp;</p></body>
</HTML>

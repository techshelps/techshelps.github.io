<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>aftp_load_ini_file</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_sna_aftp_load_ini_file_aftp"></a>aftp_load_ini_file</h1>
<p>
The <b>aftp_load_ini_file</b> call reads the AFTP initialization file into memory. This file includes information required to map file names on the current platform. When the AFTP initialization file is stored in memory, AFTP automatically consults the data it contains before proceeding with any operations. It is not necessary to create an AFTP connection object before issuing this call.</p>
<p>
The name of the initialization file varies by operating system:
<ul>
<li>
<b>MVS:</b> DD:APPFTPI</li>
<li>
<b>VM:</b> AFTP INI</li>
<li>
<b>Win32</b>®<b>:</b> AFTP.INI</li>
</ul>
<p>
<b>AFTP_ENTRY aftp_load_ini_file(<br>
IN unsigned char AFTP_PTR </b><i>filename</i><b>,<br>
IN AFTP_LENGTH_TYPE </b><i>filename_size</i><b>,<br>
IN unsigned char AFTP_PTR </b><i>program_path</i><b>,<br>
IN AFTP_LENGTH_TYPE </b><i>path_size</i><b>,<br>
OUT unsigned char AFTP_PTR </b><i>error_string</i><b>,<br>
IN AFTP_LENGTH_TYPE </b><i>error_string_size</i><b>,<br>
OUT AFTP_LENGTH_TYPE AFTP_PTR </b><i>returned_length</i><b>,<br>
OUT AFTP_RETURN_CODE_TYPE AFTP_PTR </b><i>return_code<br>
</i><b>);</b></p>
<h4>Parameters</h4>
<dl>
<dt>
<i>filename</i></dt>
<dd>
The file name of the AFTP initialization file.</dd>
<dt>
<i>filename_size</i></dt>
<dd>
The length of the <i>filename</i> parameter in bytes.</dd>
<dt>
<i>program_path</i></dt>
<dd>
For Win32, the fully qualified file specification of the program that is running. The path from the file specification will be used to locate the AFTP initialization file.
<p>
For MVS or VM where this information is not available, provide a zero-length string (not a null string) for this parameter.
</dd>
<dt>
<i>path_size</i></dt>
<dd>
The length of the <i>program_path</i> parameter in bytes.</dd>
<dt>
<i>error_string</i></dt>
<dd>
The buffer into which any error messages will be written during loading of the initialization file.
<p>
Use the AFTP_INI_MESSAGE_SIZE constant to define the length of this buffer. Add 1 to the size if you want to be able to add a null terminator to the text in the buffer.
</dd>
<dt>
<i>error_string_size</i></dt>
<dd>
The size of the buffer into which the error information will be written.</dd>
<dt>
<i>returned_length</i></dt>
<dd>
The actual size of the error information in bytes.</dd>
<dt>
<i>return_code</i></dt>
<dd>
The return code issued for this function. See <a href="aftpc03_5h0w.htm">AFTP Return Codes</a> for the list of possible return codes.
</dd>
</dl>
<h4>Example</h4>
<pre><code>{
    AFTP_RETURN_CODE_TYPE         aftp_rc;
    static unsigned char AFTP_PTR init_file_name = "DD:APPFTPI";
    static unsigned char AFTP_PTR program_name = ""
    unsigned char                 error_string[AFTP_INI_MESSAGE_SIZE+1];
    AFTP_LENGTH_TYPE              returned_length;

    /*
     * There are no prerequisite calls for this call.
     */

    /*
     * Load the AFTP initialization file into memory.
     */
    aftp_load_ini_file(
        init_file_name,
        (AFTP_LENGTH_TYPE)strlen(init_file_name),
        program_name,
        (AFTP_LENGTH_TYPE)strlen(program_name),
        error_string,
        (AFTP_LENGTH_TYPE)sizeof(error_string),
        &amp;returned_length,
        &amp;aftp_rc);
    if (aftp_rc != AFTP_RC_OK {
        error_string[returned_length]='\0';
        printf(stderr, error_string);
    }
}
 </code></pre>
<h4>Line Flows</h4>
<p>
None.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>aftp_get_record_format_string</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_sna_aftp_get_record_format_string_aftp"></a>aftp_get_record_format_string</h1>
<p>
The <b>aftp_get_record_format_string</b> call gets a string that corresponds to the input AFTP record format value. This string is available to allow all users of the AFTP API to have consistent strings for each record format type. It is not necessary to create an AFTP connection object before issuing this call.</p>
<p>
<b>AFTP_ENTRY aftp_get_record_format_string(<br>
IN AFTP_RECORD_FORMAT_TYPE </b><i>record_format</i><b>,<br>
OUT unsigned char AFTP_PTR </b><i>record_format_string</i><b>,<br>
IN AFTP_LENGTH_TYPE </b><i>record_format_size</i><b>,<br>
OUT AFTP_LENGTH_TYPE AFTP_PTR </b><i>returned_length</i><b>,<br>
OUT AFTP_RETURN_CODE_TYPE AFTP_PTR </b><i>return_code<br>
</i><b>);</b></p>
<h4>Parameters</h4>
<dl>
<dt>
<i>record_format</i></dt>
<dd>
An AFTP record format value.
<dl>
<dt>
AFTP_DEFAULT_RECORD_FORMAT</dt>
<dd>
Specifies that the system on which the file will be written should use its own default setting for record format. This is the initial setting.</dd>
<dt>
AFTP_V</dt>
<dd>
Variable length record, unblocked.</dd>
<dt>
AFTP_VA</dt>
<dd>
Variable length record, unblocked, ASA print-control characters.</dd>
<dt>
AFTP_VB</dt>
<dd>
Variable length record, blocked.</dd>
<dt>
AFTP_VBA</dt>
<dd>
Variable length record, blocked, ASA print-control characters.</dd>
<dt>
AFTP_VBM</dt>
<dd>
Variable length record, blocked, machine print-control codes.</dd>
<dt>
AFTP_VBS</dt>
<dd>
Variable length record, blocked, spanned.</dd>
<dt>
AFTP_VBSA</dt>
<dd>
Variable length record, blocked, spanned, ASA print-control characters.</dd>
<dt>
AFTP_VBSM</dt>
<dd>
Variable length record, blocked, spanned, machine print-control codes.</dd>
<dt>
AFTP_VM</dt>
<dd>
Variable length record, unblocked, machine print-control codes.</dd>
<dt>
AFTP_VS</dt>
<dd>
Variable length record, unblocked, spanned.</dd>
<dt>
AFTP_VSA</dt>
<dd>
Variable length record, unblocked, spanned, ASA print-control characters.</dd>
<dt>
AFTP_VSM</dt>
<dd>
Variable length record, unblocked, spanned, machine print-control codes.</dd>
<dt>
AFTP_F</dt>
<dd>
Fixed length record, unblocked.</dd>
<dt>
AFTP_FA</dt>
<dd>
Fixed length record, unblocked, ASA print-control characters.</dd>
<dt>
AFTP_FB</dt>
<dd>
Fixed length record, blocked.</dd>
<dt>
AFTP_FBA</dt>
<dd>
Fixed length record, blocked, ASA print-control characters.</dd>
<dt>
AFTP_FBM</dt>
<dd>
Fixed length record, blocked, machine print-control codes.</dd>
<dt>
AFTP_FBS</dt>
<dd>
Fixed length record, blocked, standard.</dd>
<dt>
AFTP_FBSA</dt>
<dd>
Fixed length record, blocked, standard, ASA print-control characters.</dd>
<dt>
AFTP_FBSM</dt>
<dd>
Fixed length record, blocked, standard, machine print-control codes.</dd>
<dt>
AFTP_FM</dt>
<dd>
Fixed length record, unblocked, machine print-control codes.</dd>
<dt>
AFTP_U</dt>
<dd>
Undefined length record.</dd>
<dt>
AFTP_UA</dt>
<dd>
Undefined length record, ASA print-control characters.</dd>
<dt>
AFTP_UM</dt>
<dd>
Undefined length record, machine print-control codes.
</dd>
</dl>
</dd>
<dt>
<i>record_format_string</i></dt>
<dd>
The buffer into which the record format string will be written.
<p>
Use the AFTP_RECORD_FORMAT_SIZE constant to define the length of this buffer. Add 1 to the size if you want to be able to add a null terminator to the text in the buffer.
</dd>
<dt>
<i>record_format_size</i></dt>
<dd>
The size of the buffer into which the record format string will be written.</dd>
<dt>
<i>returned_length</i></dt>
<dd>
The actual length of the <i>record_format_string</i> parameter in bytes.</dd>
<dt>
<i>return_code</i></dt>
<dd>
The return code issued for this function. See <a href="aftpc03_5h0w.htm">AFTP Return Codes</a> for the list of possible return codes.
</dd>
</dl>
<h4>Example</h4>
<pre><code>{
    AFTP_RETURN_CODE_TYPE         aftp_rc;
    unsigned char                 recfm[AFTP_RECORD_FORMAT_SIZE+1];
    AFTP_LENGTH_TYPE              returned_length;

    /*
     * There are no prerequisite calls for this call.
     */

    /*
     * Get the record format string.
     */

    aftp_get_record_format_string(
        AFTP_F,
        recfm,
        (AFTP_LENGTH_TYPE)sizeof(recfm)-1,
        &amp;returned_length,
        &amp;aftp_rc);
}
 </code></pre>
<h4>Line Flows</h4>
<p>
None.</p>
<p>&nbsp;</p></body>
</HTML>

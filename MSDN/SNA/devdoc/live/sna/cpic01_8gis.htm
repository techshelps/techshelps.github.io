<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OS/2 Considerations</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_sna_os_2_considerations_cpic"></a>OS/2 Considerations</h1>
<p>
This topic summarizes processing considerations you need to be aware of when developing programs on an OS/2 server, client, or workstation.
<dl>
<dt>
<b>Critical sections</b></dt>
<dd>
Exercise great caution when using critical sections, which are the parts of a program that must run without interruption. A program must not issue a CPI-C call within a critical section.</dd>
<dt>
<b>Load-time linking</b></dt>
<dd>
For a program to be dynamically linked to CPI-C at load time, you must do one of the following at link time:
<ul>
<li>
Insert the following <b>IMPORTS</b> statement in the definition (.DEF) file used to link the program:<p>
<b>IMPORTS CPIC.</b>[<i>entry point to be used</i>]
<p>
(Use this statement for each entry point needed.)
</li>
<li>
Link the program to WINCPIC.LIB, which contains the entry-point linkage information for CPI-C.</li>
</ul>
</dd>
<dt>
<b>Local LUs</b></dt>
<dd>
CPI-C does not provide a parameter for a program to specify the local LU it wants to use. The APPCLLU environment variable specifies a local LU. This variable can be set:
<ul>
<li>
By the program itself.</li>
<li>
By the operator if the program is operator-started.</li>
<li>
During configuration if the program is automatically started.</li>
</ul>

<p>
Setting APPCLLU is necessary only if the program does not use an LU from the default LU pool.
</dd>
<dt>
<b>Multiple processes</b></dt>
<dd>
Multiple processes cannot have the same conversation identifier. Only the process that issues <a href="cpic03_0jhf.htm"><b>Initialize_Conversation</b></a> or <a href="cpic03_70df.htm"><b>Accept_Conversation</b></a> can use the conversation identifier returned by the call. Another process wanting to use CPI-C must issue <b>Initialize_Conversation</b> or <b>Accept_Conversation</b> to obtain its own conversation identifier.
<p>
Two or more instances of the same program can be run as different processes.

<p>
One process can engage in multiple conversations, subject to the restrictions described under "Simultaneous conversations" in this topic.
</dd>
<dt>
<b>Multiple threads</b></dt>
<dd>
A program can have multiple threads that issue calls. However, the program cannot issue two calls simultaneously on the same conversation. If CPI-C is issuing a call and another thread of the program issues a call on the same conversation, the thread will hang until the first call completes.</dd>
<dt>
<b>OS/2 exception TRAP 000D</b></dt>
<dd>
The OS/2 exception TRAP 000D occurs when CPI-C is unable to pass a return code to the local program because the return code pointer parameter supplied to CPI-C is invalid.</dd>
<dt>
<b>Packing</b></dt>
<dd>
VCBs are not packed. As a result, DWORDs and WORDs are on WORD boundaries, and BYTEs are on BYTE boundaries. This means, for example, that there is not a 2-byte gap between the primary and secondary return codes. VCBs should be accessed using the structures provided, and compiler options that change this packing method should be avoided.</dd>
<dt>
<b>Run-time linking</b></dt>
<dd>
For a program to be dynamically linked to CPI-C at run time, the program must issue:
<ul>
<li>
<b>DosLoadModule</b> to dynamically load CPIC.DLL, the CPI-C library.</li>
<li>
<b>DosGetProcAddr</b> to specify the desired entry points to the DLL. Each CPI-C call is an entry point to the DLL.</li>
</ul>

<p>
Unlinking (the <b>DosFreeModule</b> call) is not supported.
</dd>
<dt>
<b>Simultaneous conversations</b></dt>
<dd>
A program can simultaneously participate in as many as 64 conversations for each OS/2 process.</dd>
<dt>
<b>Stack size</b></dt>
<dd>
The recommended stack size for a program is at least 3000 bytes.
<p>
When executing a call, CPI-C uses the calling program's stack. The combination of OS/2 and CPI-C requires 2560 bytes of stack space, and the program requires additional stack space for its variables.
</dd>
<dt>
<b>Terminating applications</b></dt>
<dd>
When an application terminates, it should issue the APPC <a href="appc04_8k0z.htm"><b>TP_ENDED</b></a> verb with the type set to AP_HARD for all active TPs.</dd>
<dt>
<b>TP names</b></dt>
<dd>
When a program issues <a href="cpic03_0jhf.htm"><b>Initialize_Conversation</b></a> or <a href="cpic03_70df.htm"><b>Accept_Conversation</b></a>, SNA Server generates an instance of a TP.
<p>
CPI-C does not provide a parameter for specifying the name of the invoking (<b>Initialize_Conversation</b>) TP instance. Instead, it is provided through the APPCTPN environment variable. For the invoking program, APPCTPN can be set by the operator or by the program itself. If APPCTPN is not set, the default value is CPIC_DEFAULT_TPNAME.

<p>
For the invoked program, the value of APPCTPN must match the value set by the invoking program. <b>Accept_Conversation</b> cannot be completed unless the allocation request from the invoking program specifies the TP name contained in APPCTPN.

<p>
If the invoked program is operator-started, the value of APPCTPN can be set by the operator or by the program. If the program is automatically started, the value of APPCTPN is set when configuring the invokable program. It can also be set by the program itself. If this variable is not set when the invoked program issues <b>Accept_Conversation</b>, the default value is CPIC_DEFAULT_TP_NAME.

<p>
The APPCTPN variable can be an ASCII string from 1 through 64 characters long, consisting of uppercase and lowercase letters, numerals from 0 through 9, and special characters, except the space. The APPCTPN variable cannot be set to an SNA service TP name, which contains nonprintable hexadecimal values.

<p>
If the invoking program issues multiple <b>Initialize_Conversation</b> calls, it can set APPCTPN to a different value before each call.
</dd>
</dl>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

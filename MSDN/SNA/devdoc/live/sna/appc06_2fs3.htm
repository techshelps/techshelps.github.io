<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WinAPPCSetBlockingHook</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_sna_winappcsetblockinghook_appc"></a>WinAPPCSetBlockingHook</h1>
<p>
The <b>WinAPPCSetBlockingHook</b> function allows a Windows APPC implementation to block APPC function calls by means of a new function. This call is used by Microsoft® Windows® version 3.<i>x</i> applications to make blocking calls without blocking the rest of the system. By default in Microsoft® Windows NT® and Windows 95, blocking calls suspend the calling application's thread until the request is finished. Therefore, if a single-threaded application is targeted at both Windows NT or Windows 95 and Windows version 3.<i>x</i>, and relies on this functionality, it should register a blocking hook even if the default hook will suffice.</p>
<p>
<b>FARPROC WINAPI</b><i> </i><b>WinAPPCSetBlockingHook (<br>
FARPROC</b><i> lpBlockFunc<br>
</i><b>);</b></p>
<h4>Parameters</h4>
<dl>
<dt>
<i>lpBlockFunc</i></dt>
<dd>
Specifies the procedure instance address of the blocking function to be installed.
</dd>
</dl>
<h4>Return Values</h4>
<p>
The return value points to the procedure instance of the previously installed blocking function. The application or library that calls <b>WinAPPCSetBlockingHook</b> should save this return value so that it can be restored if needed. (If nesting is not important, the application can simply discard the value returned by <b>WinAPPCSetBlockingHook</b> and eventually use <a href="appc06_1cv7.htm"><b>WinAPPCUnhookBlockingHook</b></a> to restore the default mechanism.)</p>
<h4>Remarks</h4>
<p>
A Windows APPC implementation has a default mechanism by which blocking APPC functions are implemented. This function gives the application the ability to execute its own function at blocking time in place of the default function.</p>
<p>
The default blocking function is equivalent to:</p>
<pre><code>BOOL DefaultBlockingHook (void)  {
    MSG msg;
    /* get the next message if any */
    if ( PeekMessage (&amp;msg,0,0,PM_NOREMOVE)  )  {
        if ( msg.message = = WM_QUIT  )
            return FALSE;   // let app process WM_QUIT
        PeekMessage (&amp;msg,0,0,PM_REMOVE) ;
        TranslateMessage (&amp;msg) ;
        DispatchMessage (&amp;msg) ;
    }
    /* TRUE if no WM_QUIT received */
    return TRUE;
}
 </code></pre>
<p>
A blocking function must return FALSE if it receives a WM_QUIT message so Windows APPC can return control to the application to process the message and terminate gracefully. Otherwise, the function should return TRUE.</p>
<p>
This function is implemented on a per-thread basis. It provides for a particular thread to replace the blocking mechanism without affecting other threads.</p>
<p>
The <b>WinAPPCSetBlockingHook</b> function is provided to support those applications that require more complex message processing—for example, those employing the multiple document interface (MDI) model.</p>
<h4>See Also</h4>
<p>
<a href="appc06_5un7.htm"><b>WinAPPCIsBlocking</b></a>, <a href="appc06_07s3.htm"><b>WinAPPCCancelBlockingCall</b></a></p>
<p>&nbsp;</p></body>
</HTML>

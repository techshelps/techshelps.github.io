<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>aftp_rename</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_sna_aftp_rename_aftp"></a>aftp_rename</h1>
<p>
The <b>aftp_rename</b> call renames a file on the AFTP server. A connection to the AFTP server must be established before using this call.</p>
<p>
<b>AFTP_ENTRY aftp_rename(<br>
IN AFTP_HANDLE_TYPE </b><i>connection_id</i><b>,<br>
IN unsigned char AFTP_PTR </b><i>oldfile</i><b>,<br>
IN AFTP_LENGTH_TYPE </b><i>oldlength</i><b>,<br>
IN unsigned char AFTP_PTR </b><i>newfile</i><b>,<br>
IN AFTP_LENGTH_TYPE </b><i>newlength</i><b>,<br>
OUT AFTP_RETURN_CODE_TYPE AFTP_PTR </b><i>return_code<br>
</i><b>);</b></p>
<h4>Parameters</h4>
<dl>
<dt>
<i>connection_id</i></dt>
<dd>
An AFTP connection object originally created with <a href="aftpc02_2nao.htm"><b>aftp_create</b></a>.</dd>
<dt>
<i>oldfile</i></dt>
<dd>
The name of the file to be renamed.
<p>
The format of this name can be either the native syntax on the AFTP server or the AFTP common naming convention described in the <i>APPC Application Suite User's Guide</i>. The file specified can be either an absolute or relative path name.
</dd>
<dt>
<i>oldlength</i></dt>
<dd>
The length in bytes of the <i>oldfile</i> parameter.</dd>
<dt>
<i>newfile</i></dt>
<dd>
The new name of the file.
<p>
The format of this name can be either the native syntax on the AFTP server or the AFTP common naming convention described in the <i>APPC Application Suite User's Guide</i>. The file specified can be either an absolute or relative path name.
</dd>
<dt>
<i>newlength</i></dt>
<dd>
The length in bytes of the <i>newfile</i> parameter.</dd>
<dt>
<i>return_code</i></dt>
<dd>
The return code issued for this function. See <a href="aftpc03_5h0w.htm">AFTP Return Codes</a> for the list of possible return codes.
</dd>
</dl>
<h4>Example</h4>
<pre><code>{
    AFTP_HANDLE_TYPE              connection_id;
    AFTP_RETURN_CODE_TYPE         aftp_rc;

    /* The value used for filespec will vary based on platform:
     *   VM common naming:       newfile="/a/foo.file"
     *   VM native naming:       newfile="foo.file.a"
     *   MVS PDS common naming:  newfile="/user.clist/foo"
     *   MVS PDS native naming:  newfile="'user.clist(foo)'"
     *   MVS sequential common:  newfile="/user.qual.a.foo"
     *   MVS sequential native:  newfile="'user.qual.a.foo'"
     */
    static unsigned char AFTP_PTR newfile = "/user.clist/foo";
    static unsigned char AFTP_PTR oldfile = "/user.clist/abc";

    /*
     * Before issuing the example call, you must have:
     *    a connection_id, use:         aftp_create()
     *    a connection to server, use:  aftp_connect()
     */

    aftp_rename(
        connection_id,
        oldfile,
        (AFTP_LENGTH_TYPE)strlen(oldfile),
        newfile,
        (AFTP_LENGTH_TYPE)strlen(newfile),
        &amp;aftp_rc);

    if (aftp_rc != AFTP_RC_OK) {
        fprintf(stderr, "Error renaming AFTP file.\n");
    }

}
 </code></pre>
<h4>Line Flows</h4>
<p>
The rename request and the old and new file names are sent to the AFTP server and the call waits for a response indicating the success or failure of the rename operation.</p>
<p>&nbsp;</p></body>
</HTML>

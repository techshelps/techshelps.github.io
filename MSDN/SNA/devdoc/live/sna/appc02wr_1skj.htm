<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Registry Entries for Clients Running Windows NT</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_sna_registry_entries_for_clients_running_windows_nt_appc"></a>Registry Entries for Clients Running Windows NT</h3>
<p>
The following list gives details about Windows NT registry entries for clients running Windows NT. For each TP type, the applicable variables and their locations are shown in <a href="appc02wr_7nxf.htm">Clients Running Windows NT</a>.</p>
<h4>Registry Entries for TPName on Clients Running Windows NT</h4>
<dl>
<dt>
<b>TPName:</b>REG_MULTI_SZ</dt>
<dd>
The name of the transaction program (TP) that is executed. A TP name is up to 64 ASCII characters in length and cannot contain spaces or nulls.
<p>
SNA service TPs are a special set of TPs defined by the the SNA protocols. Each service TP is a specially-defined function with a special name. An SNA service TP name is represented by up to four EBCDIC bytes; the first byte is a hexadecimal number in the range 0x00 to 0x3F, and the remaining bytes are EBCDIC characters. The first byte defines the function class of the TP. Therefore, to convert a service TP name to an ASCII TP name form, convert the first byte as shown in the following table, and convert the EBCDIC values to ASCII letter equivalents.

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=31%>First byte of TP name (hexadecimal number)</th>
<th align=left width=69%><br>
ASCII character equivalent for WIN.INI</th>
</tr>
<tr valign=top>
<td width=31%>0x07</td>
<td width=69%>DDM</td>
</tr>
<tr valign=top>
<td width=31%>0x20</td>
<td width=69%>DIA</td>
</tr>
<tr valign=top>
<td width=31%>0x21</td>
<td width=69%>SNAD</td>
</tr>
<tr valign=top>
<td width=31%>0x24</td>
<td width=69%>FS</td>
</tr>
<tr valign=top>
<td width=31%>0x30</td>
<td width=69%>PO</td>
</tr>
<tr valign=top>
<td width=31%>All others</td>
<td width=69%>UN</td>
</tr>
</table><br>


<p>
For example, an EBCDIC service TP name of 0x21 0xD7 0xD7 is equivalent to a TP name of SNADPP (0x21 converts to SNAD and each 0xD7 converts to P).
</dd>
</dl>
<h4>Registry Entries for the TPName Subtree on Clients Running Windows NT</h4>
<dl>
<dt>
<b>OtherDependencies:</b>REG_MULTI_SZ:SnaBase</dt>
<dd>
For a TP running as a service, ensures that the SnaBase service will be started before the TP is started. This entry belongs under the <b>Linkage</b> subkey.</dd>
<dt>
<b>SNAServiceType:</b>REG_DWORD:{ 0x5 | 0x6 | 0x1A }</dt>
<dd>
Indicates the type of TP. Use a value of 0x5 for an autostarted queued TP, 0x6<b> </b>for an autostarted nonqueued TP, and 0x1A for an operator-started TP.
<p>
Note that the value for an autostarted TP running as a service must be 0x5, because these TPs are always queued, as described in <a href="appc02wr_2vkz.htm">Invokable TPs</a>.
</dd>
<dt>
<b>PathName:</b>REG_SZ<b>:</b><i>path</i></dt>
<dd>
For an autostarted TP running as an application, specifies the path and file name of the TP. The data type of REG_EXPAND_SZ means that the path can contain an expandable data string; for example, %SystemRoot% represents the directory containing the Windows NT system files. Note that for a TP running as a service, an equivalent entry is inserted by the <b>CreateService</b> call; no additional path entry is needed.</dd>
<dt>
<b>LocalLU:</b>REG_SZ:<i>LUalias</i></dt>
<dd>
Specifies the alias of the local LU to be used when this TP is started on this computer.</dd>
<dt>
<b>Parameters:</b>REG_SZ:<i>ParameterList</i></dt>
<dd>
Lists parameters to be used by the TP. Separate parameters with spaces.</dd>
<dt>
<b>Timeout:</b>REG_DWORD:<i>number</i></dt>
<dd>
Specifies the time, in milliseconds, that a <a href="appc05b_0m77.htm"><b>RECEIVE_ALLOCATE</b></a> will wait before timing out. Specify <i>number</i> in decimal; the registry editor converts this to hexadecimal before displaying it. The default is infinity (no limit).</dd>
<dt>
<b>ConversationSecurity:</b>REG_SZ:{ YES | NO }</dt>
<dd>
Indicates whether this TP supports conversation security. The default is NO.</dd>
<dt>
<b>AlreadyVerified:</b>REG_SZ:{ YES | NO }</dt>
<dd>
Indicates whether this TP can be invoked with a user identifier and password that have already been verified. <b>AlreadyVerified</b> is ignored if <b>ConversationSecurity</b> is set to NO. The default value is NO.
<p>
For a diagram of three TPs in a conversation, where the third TP can be invoked with a password that is already verified by the second TP, see <a href="appc02wr_2orn.htm">Communication Between TPs</a>. The following table shows the requirements for using password verification in a chain of TPs.

<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=31%><br>
<br>
First TP <br>
(invoking TP)</th>
<th align=left width=33%>Second TP (invokable TP that confirms password and then invokes another TP)</th>
<th align=left width=36%><br>
Third and subsequent TPs (invokable TPs that invoke other TPs)</th>
</tr>
<tr valign=top>
<td width=31%>Does not need registry or environment variables.<p>
</p>
</td>
<td width=33%><b>ConversationSecurity</b> setting must be YES.</td>
<td width=36%><b>ConversationSecurity</b> setting must be YES.</td>
</tr>
<tr valign=top>
<td width=31%>Does not need registry or environment variables.<p>
</p>
</td>
<td width=33%><b>AlreadyVerified</b> setting can be YES or NO<b>.</b></td>
<td width=36%><b>AlreadyVerified</b> setting must be YES<b>.</b></td>
</tr>
<tr valign=top>
<td width=31%><a href="appc05a_1ckj.htm"><b>ALLOCATE</b></a> or <a href="appc05a_38f7.htm"><b>MC_ALLOCATE</b></a> in this TP has a <b>security</b> parameter of AP_PGM; as a result, the TP passes along the <b>user_id</b> and <b>pwd</b> values supplied in <b>ALLOCATE</b> or <b>MC_ALLOCATE</b> .</td>
<td width=33%><b>ALLOCATE</b> or <b>MC_ALLOCATE</b> in this TP has a <b>security</b> parameter of AP_SAME; as a result, after confirming the user identifier and password, the TP passes along the user identifier and an already-verified flag.</td>
<td width=36%><b>ALLOCATE</b> or <b>MC_ALLOCATE</b> in this TP has a <b>security</b> parameter of AP_SAME; as a result, the TP passes along the user identifier as received, along with the already-verified flag.</td>
</tr>
</table><br>


<p>
If you set <b>AlreadyVerified</b> to NO, this TP cannot join in a chain of conversations where password verification is already done. The exception to this is when <b>ConversationSecurity</b> is set to NO, in which case the TP could be the final TP in such a chain, since it performs no checking.

<p>
If you are configuring a TP that sometimes needs to confirm a password and sometimes accepts an already-verified flag, set <b>AlreadyVerified</b> to YES and configure the <i>UsernameX</i> variable appropriately. In this case, whenever the TP is invoked without the already-verified flag set, <b>AlreadyVerified</b> is ignored; verification is attempted with the user identifier and password configured for the TP.

<p>
If you want to have a chain of conversations where the user identifier and password are reverified at every step, carry out the following. For all the TPs, set <b>ConversationSecurity</b> to YES, and in each <b>ALLOCATE</b> or <b>MC_ALLOCATE</b> issued, set the <b>security</b> parameter to AP_PGM and the <b>pwd</b> and <b>user_id</b> parameters to valid combinations.

<p>
If you set <b>AlreadyVerified</b> to YES, make sure that <b>ConversationSecurity</b> is also set to YES.
</dd>
<dt>
<b><i>Username1</i>:</b>REG_SZ:<i>Password1</i><br>
...<br>
<b><i>UsernameX</i>:</b>REG_SZ:<i>PasswordX</i></dt>
<dd>
Sets one or more user names and passwords to be compared with those sent by the invoking TP. The user name and password can each be as many as 10 characters. Both parameters are case-sensitive.
<p>
This variable is ignored if conversation security is not activated or if the password has already been verified, as described for the <b>AlreadyVerified</b> entry.

</dd>
</dl>
<p>&nbsp;</p></body>
</HTML>

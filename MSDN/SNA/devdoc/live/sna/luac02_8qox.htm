<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OS/2 Considerations</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_sna_os_2_considerations_lua"></a>OS/2 Considerations</h2>
<p>
This section summarizes information for developing LUA applications on OS/2.</p>
<p>
This implementation of LUA is binary-compatible with the implementation of the RUI and SLI interfaces in IBM Extended Services (ES) for OS/2 version 1.0 LUA. Therefore, there are no migration steps for IBM ES for OS/2 version 1.0 applications. However, if you recompile an IBM ES for OS/2 version 1.0 LUA application for use with LUA, include the WINLUA.H header file provided in the SNA Server Software Development Kit to ensure complete platform compatibility.</p>
<p>
Note that this LUA implementation does not support user-defined encryption and decryption routines.
<dl>
<dt>
<b>Critical sections</b></dt>
<dd>
Exercise great caution when using critical sections, which are the parts of a program that must run without interruption. An application must not issue an LUA verb within a critical section.</dd>
<dt>
<b>Data segments</b></dt>
<dd>
Data is sent from and received in data buffers established by the application. A data buffer must reside on an unnamed shared data segment and must fit entirely within the data segment. Many data buffers can reside on the same data segment.
<p>
The data segment for the VCB must have read and write attributes. It can be one of the following:

<ul>
<li>
A variable (not a local variable because LUA will copy data to it on completion of the verb).</li>
<li>
Allocated dynamically using <b>DosAllocSeg</b> or <b>DosSubAlloc</b>.</li>
</ul>
</dd>
<dt>
<b>Load-time linking</b></dt>
<dd>
For an application to be dynamically linked to LUA at load time, you must do one of the following at link time:
<ul>
<li>
Insert the following <b>IMPORTS</b> statement in the definition (.DEF) file used to link the application:<p>
(For RUI)
<pre><code>IMPORTS RUI.RUI
 </code></pre>
<p>
(For SLI)
<pre><code>IMPORTS SLI.SLI
 </code></pre>
</li>
<li>
Link the application to ACSRUI.LIB (for RUI) or ACSSLI.LIB (for SLI), which contain the entry-point linkage information for various APIs.</li>
</ul>
</dd>
<dt>
<b>Multiple threads</b></dt>
<dd>
An application session can have multiple threads that issue verbs. However, the same thread of an application cannot issue two verbs simultaneously. If LUA is executing a verb and the same thread of the application issues a verb, LUA returns the lua_unsuccessful return code to the later verb and leaves it unexecuted.</dd>
<dt>
<b>OS/2 exception TRAP 000D</b></dt>
<dd>
The OS/2 exception TRAP 000D is issued when LUA is unable to pass a return code to the application for one of the following reasons:
<ul>
<li>
The data segment containing the VCB is not read/writable.</li>
<li>
The VCB is fewer than 10 bytes in length.</li>
<li>
The semaphore supplied through the <b>lua_post_handle</b> parameter is neither a valid RAM or OS/2 system semaphore nor a pointer to a location within a writable segment.</li>
</ul>
</dd>
<dt>
<b>Packing</b></dt>
<dd>
VCBs are not packed. As a result, DWORDs and WORDs are on WORD boundaries, and BYTEs are on BYTE boundaries. This means, for example, that there is not a 2-byte gap between the primary and secondary return codes. VCBs should be accessed using the structures provided, and compiler options that change this packing method should be avoided.</dd>
<dt>
<b>Process support</b></dt>
<dd>
A single RUI or SLI LU can be used by only a single process. A single process can act as multiple RUI/SLI applications and have sessions using multiple LUs.</dd>
<dt>
<b>Run-time linking</b></dt>
<dd>
For an application to be dynamically linked to LUA at run time, it must issue the following calls:
<ul>
<li>
Call the <b>DosLoadModule</b> function to dynamically load the ACSRUI.DLL (for RUI) or ACSSLI.DLL (for SLI) library module for LUA.</li>
<li>
Call the <b>DosGetProcAddr</b> function to set the entry point <b>RUI</b> or <b>SLI</b> to the dynamic-link library.</li>
</ul>

<p>
Unlinking (the <b>DosFreeModule</b> call) is not supported.
</dd>
<dt>
<b>Simultaneous sessions</b></dt>
<dd>
An application can participate simultaneously in as many as 512 sessions per OS/2 process.</dd>
<dt>
<b>Stack size</b></dt>
<dd>
The recommended stack size for an application is at least 3000 bytes.
<p>
When executing a verb, LUA uses the calling application's stack. The combination of OS/2 and LUA requires 2560 bytes of stack space, and the application requires additional stack space for its variables.
</dd>
<dt>
<b>VCB segment</b></dt>
<dd>
The segment containing the VCB must be a writable segment. All reserved and unused fields in the VCB should be set to 0x00.
</dd>
</dl>
<p>&nbsp;</p></body>
</HTML>

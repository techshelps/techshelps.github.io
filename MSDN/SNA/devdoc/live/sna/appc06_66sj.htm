<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WinAsyncAPPC</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_sna_winasyncappc_appc"></a>WinAsyncAPPC</h1>
<p>
The <b>WinAsyncAPPC</b> function provides an asynchronous entry point for all of the APPC verbs. Use this function instead of the blocking versions of the verbs if you run your application under Microsoft® Windows® version 3.<i>x</i>.</p>
<p>
<b>HANDLE WINAPI WinAsyncAPPC(<br>
HANDLE </b><i>hWnd</i><b>,<br>
long </b><i>lpVcb</i><b><br>
);</b></p>
<h4>Parameters</h4>
<dl>
<dt>
<i>hWnd</i></dt>
<dd>
A window handle that will be used for message posting to notify an application when an APPC verb completes.</dd>
<dt>
<i>lpVcb</i></dt>
<dd>
Pointer to the verb control block 
</dd>
</dl>
<h4>Return Values</h4>
<p>
The return value specifies whether the asynchronous resolution request was successful. If the function was successful, the return value is an asynchronous task handle. If the function was not successful, a zero is returned.</p>
<h4>Remarks</h4>
<p>
APPC verbs used in basic conversations that can block are as follows:</p>
<p class=indent1>
<a href="appc05a_1ckj.htm"><b>ALLOCATE</b></a></p>
<p class=indent1>
<a href="appc05a_4i1v.htm"><b>CONFIRM</b></a></p>
<p class=indent1>
<a href="appc05a_53z7.htm"><b>CONFIRMED</b></a></p>
<p class=indent1>
<a href="appc05a_4ndv.htm"><b>DEALLOCATE</b></a></p>
<p class=indent1>
<a href="appc05a_2n37.htm"><b>FLUSH</b></a></p>
<p class=indent1>
<a href="appc05b_9aar.htm"><b>PREPARE_TO_RECEIVE</b></a></p>
<p class=indent1>
<a href="appc05b_0m77.htm"><b>RECEIVE_ALLOCATE</b></a></p>
<p class=indent1>
<a href="appc05b_19er.htm"><b>RECEIVE_AND_WAIT</b></a></p>
<p class=indent1>
<a href="appc05b_54kj.htm"><b>REQUEST_TO_SEND</b></a></p>
<p class=indent1>
<a href="appc05b_16ub.htm"><b>SEND_CONVERSATION</b></a></p>
<p class=indent1>
<a href="appc05b_7wbn.htm"><b>SEND_DATA</b></a></p>
<p class=indent1>
<a href="appc05b_1azn.htm"><b>SEND_ERROR</b></a></p>
<p class=indent1>
<a href="appc04_8k0z.htm"><b>TP_ENDED</b></a></p>
<p class=indent1>
<a href="appc04_0fs3.htm"><b>TP_STARTED</b></a></p>
<p>
APPC verbs used in mapped conversations that can block are as follows:</p>
<p class=indent1>
<a href="appc05a_38f7.htm"><b>MC_ALLOCATE</b></a></p>
<p class=indent1>
<a href="appc05a_0b8j.htm"><b>MC_CONFIRM</b></a></p>
<p class=indent1>
<a href="appc05a_5qhv.htm"><b>MC_CONFIRMED</b></a></p>
<p class=indent1>
<a href="appc05a_4okj.htm"><b>MC_DEALLOCATE</b></a></p>
<p class=indent1>
<a href="appc05a_0axv.htm"><b>MC_FLUSH</b></a></p>
<p class=indent1>
<a href="appc05a_8ktf.htm"><b>MC_PREPARE_TO_RECEIVE</b></a></p>
<p class=indent1>
<a href="appc05a_5qlf.htm"><b>MC_RECEIVE_AND_WAIT</b></a></p>
<p class=indent1>
<a href="appc05b_0737.htm"><b>MC_REQUEST_TO_SEND</b></a></p>
<p class=indent1>
<a href="appc05b_7qoz.htm"><b>MC_SEND_CONVERSATION</b></a></p>
<p class=indent1>
<a href="appc05b_8iub.htm"><b>MC_SEND_DATA</b></a></p>
<p class=indent1>
<a href="appc05b_1c6b.htm"><b>MC_SEND_ERROR</b></a></p>
<p>
When using the synchronous or asynchronous versions of a verb, an application can only have one outstanding function in progress on a conversation at a time. An attempt to initiate a second function results in the error code ap_conv_busy.</p>
<p>
<b>Note</b>&nbsp;&nbsp;The exceptions to the preceding paragraph are <a href="appc05b_92oz.htm"><b>RECEIVE_AND_POST</b></a>, <a href="appc05a_3jvn.htm"><b>MC_RECEIVE_AND_POST</b></a>, <a href="appc05b_19er.htm"><b>RECEIVE_AND_WAIT</b></a>, and <a href="appc05a_5qlf.htm"><b>MC_RECEIVE_AND_WAIT</b></a>. To allow full use of the asynchronous support, asynchronously issued <b>RECEIVE_AND_WAIT</b> and <b>MC_RECEIVE_AND_WAIT</b> verbs have been altered to act like the <b>RECEIVE_AND_POST</b> and <b>MC_RECEIVE_AND_POST</b> verbs. Specifically, while an asynchronous version of one of these verbs is outstanding, the following verbs can be issued on the same conversation:
<ul>
<li>
<a href="appc05a_4ndv.htm"><b>DEALLOCATE</b></a> (AP_ABEND_PROG, AP_ABEND_SVC, or AP_ABEND_TIMER)</li>
<li>
<a href="appc05a_5o0z.htm"><b>GET_ATTRIBUTES</b></a> or <a href="appc05a_1zvn.htm"><b>MC_GET_ATTRIBUTES</b></a></li>
<li>
<a href="appc05a_4nab.htm"><b>GET_TYPE</b></a></li>
<li>
<a href="appc05b_54kj.htm"><b>REQUEST_TO_SEND</b></a> or <a href="appc05b_0737.htm"><b>MC_REQUEST_TO_SEND</b></a></li>
<li>
<a href="appc05b_1azn.htm"><b>SEND_ERROR</b></a> or <a href="appc05b_1c6b.htm"><b>MC_SEND_ERROR</b></a></li>
<li>
<a href="appc05b_8kf7.htm"><b>TEST_RTS</b></a> or <a href="appc05b_0g9v.htm"><b>MC_TEST_RTS</b></a></li>
<li>
<a href="appc04_8k0z.htm"><b>TP_ENDED</b></a></li>
</ul>
<p>
This allows an application, in particular, a 5250 emulator, to use an asynchronous <b>RECEIVE_AND_WAIT</b> or <b>MC_RECEIVE_AND_WAIT</b> to receive data. While the<b> RECEIVE_AND_POST</b>, <b>MC_RECEIVE_AND_POST</b>, <b>RECEIVE_AND_WAIT</b>, or <b>MC_RECEIVE_AND_WAIT</b> is outstanding, it can still use <b>SEND_ERROR</b> or <b>MC_SEND_ERROR</b> and <b>REQUEST_TO_SEND</b> or <b>MC_REQUEST_TO_SEND</b>. It is recommended that you use this feature for full asynchronous support.</p>
<p>
When the asynchronous operation is complete, the application's window <i>hWnd</i> receives the message returned by <b>RegisterWindowMessage</b> with "WinAsyncAPPC" as the input string. The <i>wParam</i> argument contains the asynchronous task handle returned by the original function call. The<i> lParam</i> argument contains the original VCB pointer and can be dereferenced to determine the final return code.</p>
<p>
As part of the Windows APPC definition, <a href="appc06_9qlf.htm"><b>WinAPPCCancelAsyncRequest</b></a> allows an application to cancel any asynchronous APPC action; but terminates the related conversation or TP as appropriate. Any outstanding operations return with ap_canceled as the return code.</p>
<p>
If the function returns successfully, a <b>WinAsyncAPPC</b> message is posted to the application when the operation completes or the conversation is canceled.</p>
<p>&nbsp;</p></body>
</HTML>

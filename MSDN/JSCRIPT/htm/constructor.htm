<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Advanced Object Creation</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css">
<META NAME="MS-HKWD" CONTENT="JScript tutorial">
<META NAME="MS-HKWD" CONTENT="constructors">
<META NAME="MS-HKWD" CONTENT="new statement">
<META NAME="MS-HKWD" CONTENT="this statement">
<META NAME="MS-HKWD" CONTENT="prototypes">
<META NAME="MS-HKWD" CONTENT="function constructor">
<META NAME="MS-HKWD" CONTENT="creating objects">
<META NAME="MS-HKWD" CONTENT="objects">
<META NAME="MS-HKWD" CONTENT="initializing objects">
<META NAME="MS-HKWD" CONTENT="prototype properties">
<META NAME="MS-HKWD" CONTENT="anonymous function">
<META NAME=MS-HAID CONTENT="constructor">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso8859-1">
<META NAME="PRODUCT" CONTENT="JScript">
<META NAME="TECHNOLOGY" CONTENT="SCRIPTING">
<META NAME="CATEGORY" CONTENT="Tutorial">
<META NAME="Description" CONTENT="Advanced Object Creation">
<META NAME="keywords" CONTENT="JScript tutorial; constructors; new statement; this statement; prototypes; Function constructor; creating objects; objects; initializing objects; prototype properties; anonymous function">


</HEAD>
<BODY BGCOLOR=FFFFFF LINK=#0033CC>

<!--TOOLBAR_START-->
<!--TOOLBAR_EXEMPT-->
<!--TOOLBAR_END-->
<FONT FACE="Verdana, ARIAL, HELVETICA" SIZE=2>
<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH=100%><TR VALIGN=TOP><TD WIDTH=360>
<FONT SIZE=1 COLOR=#660033>Microsoft&#174; JScript&trade;</FONT><BR>
<FONT SIZE=5 COLOR=#660033><B>Advanced Object Creation</B></FONT><br>

</TD>
<TD ALIGN=RIGHT>
<FONT SIZE=2>&nbsp;<A HREF="jstutor.htm" TARGET="_top">JScript&nbsp;Tutorial</A><BR><A HREF="usingarr.htm">Previous</A><br><A HREF="specialcharacter.htm">Next</A><P></FONT>
</TD></TR>
</TABLE> 

<p>
<HR SIZE=1 NOSHADE>

<h5>Using Constructors to Create Objects</h5>
<blockquote>
In Microsoft JScript, you use constructors to create and build a class of <a href="objects.htm">objects</a>. You invoke a constructor with the <b>new</b> statement. It returns whatever it constructs.

<p>The special case Function constructor lets you create functions that are <i>anonymous</i>. An anonymous function is one that does not have a name. You can use the Function constructor to build a function "on the fly", for example, as one of the instructions inside another function. Such a function, which is only called from the one location, doesn't need a name. 
<p>In the following example, such an anonymous function generates one line of a "name-and-email-address" listing. It checks the value of the <i>firstNameFirst</i> variable to decide whether to put the first name or the last name first, and the value of the <i>emailNameFirst</i> variable to decide whether to put the name or the email address first. The example assumes that the values of <i>firstNameFirst</i> and <i>emailNameFirst</i> are set elsewhere.
<BLOCKQUOTE><pre><FONT FACE="Courier New, Courier" Size=3>for (j = 1; j < addressList[length]; j++) 
{
oneListingLine = new Function(emailNameFirst, firstNameFirst, addressList, j, theName = new Function(firstNameFirst, addressList, j, var theName=(addressList[j].firstName + addressList[j].lastName); 
if(firstNameFirst)
      {
      theName=(addressList[j].firstName + addressList[j].lastName);
      },) ; 
if (emailNameFirst) 
      {
theListing = addressList[j].emailName+ ":\t" + theName 
      } else theListing = theName + ":\t" + addressList[j].emailName; return theListing;)
document.write(oneListingLine + "&lt;br&gt;");
}
</FONT></pre></BLOCKQUOTE>

</blockquote>
<h5>Writing Constructors</h5>
<blockquote>
To write your own constructors, you use the <b>this</b> keyword within the constructor to refer to the newly-created object. The constructor initializes the object.<p>

Though the constructor in the next example starts at an index of 0, this is not required. You can start with a first index of 1 if, for example, you want a parameter that indicates the actual number of indexes of the array or object. In the example, it's called <i>extent</i> to distinguish it from the automatically maintained length parameter of the built-in <b>Array( )</b> object). If you write code that adds properties to the array, you have to update the <i>extent</i> parameter (or your equivalent) because this parameter is not maintained by JScript. Notice that even this extremely simple example uses both object (dot) and array (bracket) notation styles to refer to the current object.
<BLOCKQUOTE><pre><FONT FACE="Courier New, Courier" Size=3>function MakeStringArray(length) {
this.extent = length;
for (iNum = 0; iNum < length; i++) {
this[iNum] = "";
}
}

// Use the constructor to create and initialize an array.
myStringArray = new MakeStringArray(63);
</FONT></pre></BLOCKQUOTE>

</blockquote>
<h5>Using Prototypes to Create Objects</h5>
<blockquote>
When you write an object definition, you can use <i>prototype</i> properties to create properties that are held in common by all objects
that are generated by the definition. Prototype properties are copied by reference into each object of a class, so they have the same value for all objects in the class. However, you can change the value of a prototype property in one object, and the new value overrides the
default, but only in that one instance. Other objects that are members of the class are not affected by the change.

<p>Using this principle, you can define additional properties for objects that are part of the JScript language, which all have prototypes. For example, if you want a special constant for a calculation, and the constant is not among those provided in the <b>Math</b> and <b>Number</b> objects, you can define it yourself and then assign it their respective object prototypes, or the prototype property of your object class.
<BLOCKQUOTE><pre><FONT FACE="Courier New, Courier" Size=3>Math.prototype.Avogadro = 6.0232E23;
function howManyMolecules(wtGrams,molWt) {
return ((wtGrams/molWt)*Math.prototype.Avogadro);
}
document.write("There are " + howManyMolecules(window.prompt("How many grams?",0),window.prompt
("What's the molecular weight?",0)) +
 " molecules in that amount.");
</FONT></pre></BLOCKQUOTE>

Perhaps more to the point, you can define a function, assign it to String.prototype as a method, and use it on any string anywhere in your script. The following example assumes the existence of a Periodic Chart array called "theElements", defined elsewhere in the script, which contains symbols for the elements, their names, their atomic weights, and other relevant information about them.
<BLOCKQUOTE><pre><FONT FACE="Courier New, Courier" Size=3>
function atomName(theSymbol) {
return(theElements[theSymbol].fullName);
}

String.prototype.atomName = atomName;

function decodeFormula(theFormula) {
var theCurrentPiece = "";
var theDecodedFormula = "";
for (i = 1; i = theFormula.length ; i++);
if (theFormtheCurrentPiece 
// Code statements to separate the formula string into an array of symbols and numbers.
// Loop through the formula array and assemble the decoded string. Each term is:
theDecodedFormula += formula[n].number
theDecodedFormula += " ";
theDecodedFormula += formula[n].symbol.prototype.atomName;
theDecodedFormula += " "
// End of loop.

return theDecodedFormula;
}

decodeFormula(window.prompt("Formula?","Al2O3"));
</FONT></pre></BLOCKQUOTE>
</BLOCKQUOTE>


<hr noshade size=1>

</FONT></font>
</BODY>
</HTML>

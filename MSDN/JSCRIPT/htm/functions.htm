<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>JScript Functions</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css">
<META NAME="MS-HKWD" CONTENT="JScript tutorial">
<META NAME="MS-HKWD" CONTENT="functions">
<META NAME="MS-HKWD" CONTENT="built-in functions">
<META NAME="MS-HKWD" CONTENT="intrinsic functions">
<META NAME="MS-HKWD" CONTENT="arguments">
<META NAME="MS-HKWD" CONTENT="parameters">
<META NAME="MS-HKWD" CONTENT="escape method">
<META NAME="MS-HKWD" CONTENT="unescape method">
<META NAME="MS-HKWD" CONTENT="eval method">
<META NAME="MS-HKWD" CONTENT="creating functions">
<META NAME="MS-HKWD" CONTENT="user-defined functions">
<META NAME=MS-HAID CONTENT="functions">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso8859-1">
<META NAME="PRODUCT" CONTENT="JScript">
<META NAME="TECHNOLOGY" CONTENT="SCRIPTING">
<META NAME="CATEGORY" CONTENT="Tutorial">
<META NAME="Description" CONTENT="JScript Functions">
<META NAME="Keywords" CONTENT="JScript tutorial; functions; built-in functions; intrinsic functions; arguments; parameters; escape method; unescape method; eval method; creating functions; user-defined functions">

</HEAD>



<BODY BGCOLOR=FFFFFF LINK=#0033CC>

<!--TOOLBAR_START-->
<!--TOOLBAR_EXEMPT-->
<!--TOOLBAR_END-->
<FONT FACE="Verdana, ARIAL, HELVETICA" SIZE=2>
<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH=100%><TR VALIGN=TOP><TD WIDTH=360>
<FONT SIZE=1 COLOR=#660033>Microsoft&#174; JScript&#153;</FONT><BR>
<FONT SIZE=5 COLOR=#660033><B>JScript Functions</B></FONT><br>

</TD>
<TD ALIGN=RIGHT>
<FONT SIZE=2>&nbsp;<A HREF="jstutor.htm">JScript&nbspTutorial</A><br><A HREF="conditionals.htm">Previous</A><br><A HREF="objects.htm">Next</A><P></FONT>


</TD></TR>
</TABLE><p>


<hr noshade size=1>

<h5>What Is a Function?</h5>
<blockquote>
Microsoft JScript functions perform actions. They can also return results. Sometimes these are the results of calculations or comparisons.<p>

Functions combine several operations under one name. This lets you streamline your code. You can write out a set of statements, name it,
and then execute the entire set any time you want to, just by calling it and passing to it any information it needs.<p>

You pass information to a function by enclosing the information in parentheses after the name of the function. Pieces of information that are being passed to a function are called arguments or parameters. Some functions don't take any arguments at all; some functions take one argument; some take several. There are even functions for which the number of arguments depends on how you are using the function.<p>

JScript supports two kinds of functions: those that are built into the language, and those you create yourself.<p>


</blockquote>
<h5>Special Built-in Functions</h5>
<blockquote>
The JScript language includes several built-in functions. Some of them let you handle expressions and special characters, and convert strings to numeric values.<p>

For example, <a href="jsglobalescape.htm"><b>escape()</b></a> and <a href="jsglobalunescape.htm"><b>unescape()</b></a> are used to convert characters that have special meanings in HTML code, characters that you cannot just put directly into text. For example, the angle brackets, "&lt;" and "&gt;", delineate HTML tags.<p>

The <b>escape</b> function takes as its argument any of these special characters, and returns the escape code for the character. Each escape code consists of a percent sign (%) followed by a two-digit number. The <b>unescape</b> function is the exact inverse. It takes as its argument a string consisting of a percent sign and a two-digit number, and returns a character.<p>

Another useful built-in function is <A href="jsglobaleval.htm"><b>eval()</b></a>, which evaluates any valid mathematical expression that is presented in string form. The <b>eval()</b> function takes one argument, the expression to be evaluated.
<BLOCKQUOTE><pre><FONT FACE="Courier New, Courier" Size=3>var anExpression = "6 * 9 % 7";
var total = eval(anExpression);        // Assigns the value 5 to the variable total.
var yetAnotherExpression = "6 * (9 % 7)";
total = eval(yetAnotherExpression)        // Assigns the value 12 to the variable total.

var totality = eval("...surrounded by acres of clams.");        // Generates an error.
</FONT></pre></BLOCKQUOTE>

Consult the <a href="jstoc.htm"> language reference</a> for more information about these and other built-in functions.

</blockquote>
<h5>Creating Your Own Functions</h5>
<blockquote>
You can create your own functions and use them where you need them. A function definition consists of a function statement and a block of JScript statements.<p>

The checkTriplet function in the following example takes as its arguments the lengths of the sides of a triangle, and calculates from them whether the triangle is a right triangle by checking whether the three numbers constitute a Pythagorean triplet. (The square
of the length of the hypotenuse of a right triangle is equal to the sum of the squares of the lengths of the other two sides.) The checkTriplet function calls one of two other functions to make the actual test.<p>

Notice the use of a very small number ("epsilon") as a testing variable in the floating-point version of the test. Because of uncertainties and roundoff errors in floating-point calculations, it is not practical to make a direct test of whether the square of the hypotenuse is equal to the sum of the squares of the other two sides unless all three values in question are known to be integers. Because a direct test
is more accurate, the code in this example determines whether it is appropriate and, if it is, uses it.
<BLOCKQUOTE><pre><FONT FACE="Courier New, Courier" Size=3>var epsilon = 0.0000000000001;  // Some very small number to test against.
var triplet = false;

function integerCheck(a, b, c)  {  // The test function for integers.
    if ( (a*a) == ((b*b) + (c*c)) )  {  // The test itself.
    triplet = true;
    }
}  // End of the integer checking function.

function floatCheck(a, b, c)  {  // The test function for floating-point numbers.
var theCheck = ((a*a) - ((b*b) + (c*c)))  // Make the test number.
    if (theCheck &lt; 0)  {  // The test requires the absolute value, so invert theCheck if it's negative.
    theCheck *= -1;
    }
    if (epsilon &gt; theCheck)  {  // If it's as close as that, it's pretty darn close!
    triplet = true;
    }
}  // End of the floating-poing check function.

function checkTriplet(a, b, c)  {  // The triplet checker. First, move the longest side to position "a".
var d = 0;  // Create a temporary holding bin.
    if (c &gt; b)  {  // If c &gt; b, swap them.
    d = c;
    c = b;
    b = d;
    }  // If not, ignore them.
    if (b &gt; a)  {  // If b &gt; a, swap them.
    d = b;
    b = a;
    a = d;
    }  // If not, ignore them.

// Side "a" is now the hypotenuse, if there is one.

    if (((a%1) == 0) && ((b%1) == 0) && ((c%1) == 0))  {  // Test all 3 values. Are they integers?
    integerCheck(a, b, c);  // If so, use the precise check.
    }
    else
        floatCheck(a, b, c);  // If not, get as close as is reasonably possible.
}  // End of the triplet check function.

// The next three statements assign sample values for testing purposes.
var sideA = 5;
var sideB = 5;
var sideC = Math.sqrt(50);

checkTriplet(sideA, sideB, sideC);  // Call the function. After the call, triplet contains the result.
</FONT></pre></BLOCKQUOTE>

</BLOCKQUOTE>

<hr noshade size=1>
 
</FONT>
</BODY>
</HTML>

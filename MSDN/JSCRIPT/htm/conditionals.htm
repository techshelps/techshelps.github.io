<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Controlling Program Flow</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css">
<META NAME="MS-HKWD" CONTENT="JScript tutorial">
<META NAME="MS-HKWD" CONTENT="conditional statements">
<META NAME="MS-HKWD" CONTENT="Boolean values">
<META NAME="MS-HKWD" CONTENT="if statement">
<META NAME="MS-HKWD" CONTENT="if...else statement">
<META NAME="MS-HKWD" CONTENT="conditional operator">
<META NAME="MS-HKWD" CONTENT="trinary operator">
<META NAME="MS-HKWD" CONTENT="?: operator">
<META NAME="MS-HKWD" CONTENT="looping statements">
<META NAME="MS-HKWD" CONTENT="for statement">
<META NAME="MS-HKWD" CONTENT="for...in statement">
<META NAME="MS-HKWD" CONTENT="while statement">
<META NAME="MS-HKWD" CONTENT="do...while statement">
<META NAME="MS-HKWD" CONTENT="switch statement">
<META NAME="MS-HKWD" CONTENT="break statement">
<META NAME="MS-HKWD" CONTENT="continue statement">
<META NAME=MS-HAID CONTENT="conditionals">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso8859-1">
<META NAME="PRODUCT" CONTENT="JScript">
<META NAME="TECHNOLOGY" CONTENT="SCRIPTING">
<META NAME="CATEGORY" CONTENT="Tutorial">
<META NAME="Description" CONTENT="Controlling Program Flow">
<META NAME="Keywords" CONTENT="JScript tutorial; conditional statements; boolean values; if statement; if...else statement; conditional operator; trinary operator; ?: operator; looping statements; for statement; for...in statement; while statement; do...while statement; switch statement; break statement; continue statement; ">

</HEAD>



<BODY BGCOLOR=FFFFFF LINK=#0033CC>

<!--TOOLBAR_START-->
<!--TOOLBAR_EXEMPT-->
<!--TOOLBAR_END-->
<FONT FACE="Verdana, ARIAL, HELVETICA" SIZE=2>
<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH=100%><TR VALIGN=TOP><TD WIDTH=360>
<FONT SIZE=1 COLOR=#660033>Microsoft&#174; JScript&#153;</FONT><BR>
<FONT SIZE=5 COLOR=#660033><B>
Controlling Program Flow
</B></FONT><br>

</TD>
<TD ALIGN=RIGHT>
<FONT SIZE=2>&nbsp;<A HREF="jstutor.htm">JScript&nbspTutorial</A><br><A HREF="jsoperators.htm">Previous</A><br><A HREF="functions.htm">Next</A><P></FONT>

</TD></TR>
</TABLE><p>


<hr noshade size=1>
<h5> Why Control the Flow of Execution?</h5>
<blockquote>
Fairly often, you need a script to do different things under different conditions. For example, you might write a script that checks the time every hour, and changes some parameter appropriately during the course of the day. You might write a script that can accept some sort of input, and act accordingly. Or you might write a script that repeats a specified action.<p>

There are several kinds of conditions that you can test. All conditional tests in Microsoft JScript are Boolean, so the result of any test is either <b>true</b> or <b>false</b>. You can freely test values that are of Boolean, numeric, or string type.<p>

JScript provides control structures for a range of possibilities. The simplest control structures are the conditional statements.
</blockquote>

<h5> Using Conditional Statements </h5>
<BLOCKQUOTE>
JScript supports <b>if</b> and <a href="jsstmif.htm"><b>if...else</b></a> conditional statements. In <b>if</b> statements a condition is tested, and if the condition meets the test, some JScript code you've written is executed. (In the <b>if...else</b> statement, different code is executed if the condition fails the test.) The simplest form of an <b>if</b> statement can be written entirely on one line, but multiline <b>if</b> and <b>if...else</b> statements are much more common.<p>

The following examples demonstrate syntaxes you can use with <b>if</b> and <b>if...else</b> statements. The first example shows the simplest kind of Boolean test. If (and only if) the item between the parentheses evaluates to <b>true</b>, the statement
or block of statements after the <b>if</b> is executed.
<BLOCKQUOTE><pre><FONT FACE="Courier New, Courier" Size=3>// The smash() function is defined elsewhere in the code.
if (newShip)
   smash(champagneBottle,bow);  // Boolean test of whether newShip is true.

// In this example, the test fails unless both conditions are true.
if (rind.color == "deep yellow " && rind.texture == "large and small wrinkles")
{
        theResponse = ("Is it a Crenshaw melon? &lt;br&gt; ");
}

// In this example, the test succeeds if either condition is true.
var theReaction = "";
if ((lbsWeight &gt; 15) || (lbsWeight &gt; 45))
{
    theReaction = ("Oh, what a cute kitty! &lt;br&gt;");
}
else
    theReaction = ("That's one huge cat you've got there! &lt;br&gt;");
</FONT></pre></BLOCKQUOTE>

</blockquote>
<h5>Conditional Operator</h5>
<BLOCKQUOTE>
JScript also supports an implicit conditional form. It uses a question mark after the condition to be tested (rather than the word <b>if</b> before the condition), and specifies two alternatives, one to be used if the condition is met and one if it is not. The alternatives are separated by a colon.
<BLOCKQUOTE><pre><FONT FACE="Courier New, Courier" Size=3>var hours = "";

// Code specifying that hours contains either the contents of
// theHour, or theHour - 12.

hours += (theHour &gt;= 12) ? " PM" : " AM";
</FONT></pre></BLOCKQUOTE>

<TABLE CELLSPACING=0 CELLPADDING=0 BORDER=0 WIDTH=87%><TR><TD COLSPAN=2 VALIGN=BOTTOM><hr noshade size=1></TD></TR><TR><P><TD VALIGN=TOP><FONT SIZE=2><BR>

<b>Tip</b>&nbsp;&nbsp; If you have several conditions to be tested together, and you know that one is more likely to pass or fail than any of the others, depending on whether the tests are connected with OR (||) or AND (&&), you can speed execution of your script by
putting that condition first in the conditional statement. For example, if three conditions must all be true (using && operators) and the second test fails, the third condition is not tested. 
<P>Similarly, if only one of several conditions must be true (using || operators), testing stops as soon as any one
condition passes the test. This is particularly effective if the conditions to be tested involve
execution of function calls or other code.<p>
An example of the side effect of short-circuiting is that runsecond will not be executed in the following example if runfirst() returns 0 or <b>false</b>.
<BLOCKQUOTE><pre><FONT FACE="Courier New, Courier" Size=3>if ((runfirst() == 0) || (runsecond() == 0))
// some code  </font></pre></BLOCKQUOTE>
</FONT></TD></TR><P><TR><TD COLSPAN=2 VALIGN=TOP><hr noshade size=1></TD></TR></TABLE>

</blockquote>
<h5>Using Repetition, or Loops</h5>
<BLOCKQUOTE>
There are several ways to execute a statement or block of statements repeatedly. In general, repetitive execution is called <i>looping</i>. It is typically controlled by a test of some variable, the value of which is changed each time the loop is executed. Microsoft JScript supports many types of loops: <a href="jsstmfor.htm"><b>for</b></a> loops, <a href="jsstmforin.htm"><b>for...in</b></a> loops, <a href="jsstmwhile.htm"><b>while</b></a> loops, <a href="jsstmdowhile.htm"><b>do...while</b></a> loops, and <a href="jsstmswitch.htm"><b>switch</b></a> loops.
</blockquote>
<h5>Using <b>for</b> Loops</h5>
<BLOCKQUOTE>
The <b>for</b> statement specifies a counter variable, a test condition, and an action that updates the counter. Just before each time the loop is executed (this is called one pass or one iteration of the loop), the condition is tested. After the loop is executed, the counter variable is updated before the next iteration begins.<p>

If the condition for looping is never met, the loop is never executed at all. If the test condition is always met, an infinite loop results. While the former may be desirable in certain cases, the latter rarely is, so take care when writing your loop conditions.
<BLOCKQUOTE><pre><FONT FACE="Courier New, Courier" Size=3>/*
The update expression ("icount++" in the following examples)
is executed at the end of the loop, after the block of statements that forms the
body of the loop is executed, and before the condition is tested.
*/

var howFar = 11;  // Sets a limit of 11 on the loop.

var sum = new Array(howFar);  // Creates an array called sum with 11 members, 0 through 10.
var theSum = 0;
sum[0] = 0;

for(var icount = 1; icount &lt; howFar; icount++)  {        // Counts from 1 through 10 in this case.
theSum += icount;
sum[icount] = theSum;
}

var newSum = 0;
for(var icount = 1; icount &gt; howFar; icount++)  {        // This isn't executed at all.
newSum += icount;
}

var sum = 0;
for(var icount = 1; icount &gt; 0; icount++)  {        // This is an infinite loop.
sum += icount;
}
</FONT></pre></BLOCKQUOTE>

</blockquote>
<h5>Using <b>for...in</b> Loops</h5>
<blockquote>JScript provides a special kind of loop for stepping through all the properties of an <a href="objects.htm">object</a>. The loop counter in a <b>for...in</b> loop steps through all indexes in the array. It is a string, not a number.
<BLOCKQUOTE><pre><FONT FACE="Courier New, Courier" Size=3>for (j in tagliatelleVerde)  // tagliatelleVerde is an object with several properties
{
// Various JScript code statements.
}
</FONT></pre></BLOCKQUOTE>
</blockquote>
<h5>Using <b>while</b> Loops</h5>
<blockquote>The <b>while</b> loop is very similar to a <b>for</b> loop. The difference is that a <b>while</b> loop does not have a built-in counter variable or update expression. If you already have some changing condition that is reflected in the value assigned to a variable, and you want to use it to control repetitive execution of a statement or block of statements, use a <b>while</b> loop.
<BLOCKQUOTE><pre><FONT FACE="Courier New, Courier" Size=3>var theMoments = "";
var theCount = 42;        // Initialize the counter variable.
while (theCount &gt;= 1)  {
    if (theCount &gt; 1)  {
        theMoments = "Only " + theCount + " moments left!";
}
    else  {
        theMoments = "Only one moment left!";
    }
theCount--;        // Update the counter variable.
}
theMoments = "BLASTOFF!";
</FONT></pre></BLOCKQUOTE>
<TABLE CELLSPACING=0 CELLPADDING=0 BORDER=0 WIDTH=87%><TR><TD COLSPAN=2 VALIGN=BOTTOM><hr noshade size=1></TD></TR><TR><P><TD VALIGN=TOP><FONT SIZE=2><BR>

<b>Note</b>&nbsp;&nbsp;Because <b>while</b> loops do not have explicit built-in counter variables, they are even more vulnerable to infinite looping than the other types. Moreover, partly because it is not necessarily easy to discover where or when the loop condition is updated, it is only too easy to write a <b>while</b> loop in which the condition, in fact, never does get updated. You should be extremely careful when you design <b>while</b> loops.<p>
</FONT></TD></TR><P><TR><TD COLSPAN=2 VALIGN=TOP><hr noshade size=1></TD></TR></TABLE>
</blockquote>

<h5>Using <b>break</b> and <b>continue</b> Statements</h5>
<blockquote>
Microsoft JScript provides a statement to stop the execution of a loop. The <a href="jsstmbreak.htm"><b>break</b></a> statement can be used to stop execution if some (presumably special) condition is met. The <a href="jsstmcontinue.htm"><b>continue</b></a> statement can be used to jump immediately to the next iteration, skipping the rest of the code block but updating the counter variable as usual if the loop is a <b>for</b> or <b>for...in</b> loop.
<BLOCKQUOTE><pre><FONT FACE="Courier New, Courier" Size=3>var theComment = "";
var theRemainder = 0;
var theEscape = 3;
var checkMe = 27;
for (kcount = 1; kcount &lt;= 10; kcount++) 
{
    theRemainder = checkMe % kcount;
    if (theRemainder == theEscape)
      {
            break;  // Exits from the loop at the first encounter with a remainder that equals the escape.
}
theComment = checkMe + " divided by " + kcount + " leaves a remainder of  " + theRemainder;
}

for (kcount = 1; kcount &lt;= 10; kcount++) 
{
   theRemainder = checkMe % kcount;
   if (theRemainder != theEscape) 

   {
      continue;  // Selects only those remainders that equal the escape, ignoring all others.
}
// JScript code that uses the selected remainders.
}

var theMoments = "";
var theCount = 42;  // The counter is initialized.
while (theCount &gt;= 1)  {
// if (theCount &lt; 10)  {  // Warning!
// This use of continue creates an infinite loop!
// continue;
// }
    if (theCount &gt; 1)  {
        theMoments = "Only " + theCount + " moments left!";
}
    else  {
        theMoments = "Only one moment left!";
    }
theCount--;  // The counter is updated.
}
theCount = "BLASTOFF!";
</FONT></pre></BLOCKQUOTE>

</BLOCKQUOTE>


<hr noshade size=1>
 
</FONT>
</BODY>
</HTML>

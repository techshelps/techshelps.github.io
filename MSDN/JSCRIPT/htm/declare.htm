<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>JScript Variables</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css">
<META NAME="MS-HKWD" CONTENT="variables">
<META NAME="MS-HKWD" CONTENT="JScript tutorial">
<META NAME="MS-HKWD" CONTENT="variables">
<META NAME="MS-HKWD" CONTENT="var statement">
<META NAME="MS-HKWD" CONTENT="storing values">
<META NAME="MS-HKWD" CONTENT="declaring variables">
<META NAME="MS-HKWD" CONTENT="naming variables">
<META NAME="MS-HKWD" CONTENT="case sensitivity">
<META NAME="MS-HKWD" CONTENT="coercing data types">
<META NAME="MS-HKWD" CONTENT="converting types">
<META NAME="MS-HKWD" CONTENT="conversion functions">
<META NAME=MS-HAID CONTENT="declare">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso8859-1">
<META NAME="PRODUCT" CONTENT="JScript">
<META NAME="TECHNOLOGY" CONTENT="SCRIPTING">
<META NAME="CATEGORY" CONTENT="Tutorial">
<META NAME="Description" CONTENT="JScript Variables">
<META NAME="Keywords" CONTENT="variables; JScript tutorial; variables; var statement; storing values; declaring variables; naming variables; case sensitivity; coercing data types; converting types; conversion functions">

</HEAD>



<BODY BGCOLOR=FFFFFF LINK=#0033CC>

<!--TOOLBAR_START-->
<!--TOOLBAR_EXEMPT-->
<!--TOOLBAR_END-->
<FONT FACE="Verdana, ARIAL, HELVETICA" SIZE=2>
<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH=100%><TR VALIGN=TOP><TD WIDTH=360>
<FONT SIZE=1 COLOR=#660033>Microsoft&#174; JScript&#153;</FONT><BR>
<FONT SIZE=5 COLOR=#660033><B>
JScript Variables
</B></FONT><br>

</TD>
<TD ALIGN=RIGHT>
<FONT SIZE=2>&nbsp;<A HREF="jstutor.htm">JScript&nbspTutorial</A><BR><A HREF="statement.htm">Previous</A><br><A HREF="datatype.htm">Next</A><P></FONT>


</TD></TR>
</TABLE><p>


<hr noshade size=1>


<BLOCKQUOTE>
Variables are used in Microsoft JScript to store values in your scripts. They are a way to retrieve and manipulate values using names. When used effectively then can help in understanding what a script does.

</blockquote>
<h5>Declaring Variables</h5>
<blockquote>
Although not required, it is considered good practice to declare variables before using them. You do this using the <a href="jsstmvar.htm"><b>var</b></a> statement. The only time you must use the <b>var</b> statement is when declaring variables that are <a href="scope.htm">local</a> to a function. At all other times, using the
<b>var </b>statement to declare variables before their use is a recommended practice.

<p>The following code examples are of variable declaration:
<BLOCKQUOTE><pre><FONT FACE="Courier New, Courier" Size=3>
var mim = "A man, a plan, a canal, Panama!";  // The value stored in mim is of string type.
// The sentence in quotes, the value of which is assigned to mim, is a string literal.

var ror = 3;        // The value stored in ror has numeric type.
var nen = true;        // The value stored in nen has Boolean type.
var fif = 2.718281828        // The value stored in fif has numeric type.
</FONT></pre></BLOCKQUOTE>


</blockquote>
<H5>Naming Variables</H5>
<blockquote>
JScript is a case-sensitive language, so naming a variable <i>myCounter </i>is different from naming it <i>MYCounter</i>. In addition, variable names, which can be of any length, must follow certain rules:
<ul>
<li>The first character must be a letter (either uppercase or lowercase) or an underscore (_), or a dollar sign ($).
<li>Subsequent characters can be letters, numbers, underscores, or dollar signs.
<li>The variable name can't be a <a href="jsreserved.htm">reserved word</a>.
</ul>
Some examples of valid variable names:
<ul>
<li>_pagecount
<li>Part9
<li>Number_Items
</ul>

Some invalid variable names:
<ul>
<li>99Balloons     	// Starts with a number.
<li>Smith&Wesson   // Ampersand (&) is not a valid character for variable names.
</ul>

In instances in which you want to declare a variable and initialize it,
but without giving it any particular value, you may assign it a special value,
<a href="glossary.htm#defnull"><b>null</b></a>.
<BLOCKQUOTE><pre><FONT FACE="Courier New, Courier" Size=3>var zaz = null;
var notalot = 3 * zaz;        // At this point, notalot becomes 0.
</FONT></pre></BLOCKQUOTE>

If you declare a variable without assigning any value to it, it exists but is
<a href="glossary.htm#defundefined">undefined</a>.
<BLOCKQUOTE><pre><FONT FACE="Courier New, Courier" Size=3>var godot;
var waitingFor = 1 * godot;  // Places the value NaN in waitingFor as godot is undefined.
</FONT></pre></BLOCKQUOTE>

You can declare a variable implicitly (without using <b>var</b>) by assigning a
value to it. You cannot, however, use a variable that has never been declared at all.
To do so generates an error at runtime.
<BLOCKQUOTE><pre><FONT FACE="Courier New, Courier" Size=3>lel = "";  // The variable lel is declared implicitly.

var aMess = vyv + zez;  // Generates an error because vyv and zez don't exist.
</FONT></pre></BLOCKQUOTE>


</blockquote>
<h5>Coercion</h5>
<blockquote>
As JScript is a loosely-typed language, variables in JScript technically have no fixed type. Instead, they have a type equivalent to the type of the value they contain. It is possible, under some circumstances, to force the automatic conversion (or coercion) of a variable or a piece of data into a different type. Numbers can easily be included in strings, but strings cannot be included directly in numbers, so explicit conversion functions, <a href="jsglobalparseInt.htm"><b>parseInt()</b></a> and
<a href="jsglobalparseFloat.htm"><b>parseFloat()</b></a>, are provided.
<BLOCKQUOTE><pre><FONT FACE="Courier New, Courier" Size=3>var theFrom = 1;
var theTo = 10;
var doWhat = "Count from ";
doWhat += theFrom + " to " + theTo + ".";        
</FONT></pre></BLOCKQUOTE>

After this code is executed, the <i>doWhat</i> variable contains "Count from 1 to 10."
The number data have been coerced into string form.
<BLOCKQUOTE><pre><FONT FACE="Courier New, Courier" Size=3>var nowWhat = 0;
nowWhat += 1 + "10";  // In this case, because "10" is a string,
			// the "+=" operator concatenates.
</FONT></pre></BLOCKQUOTE>

After this code is executed, the <i>nowWhat</i> variable contains "0110". The following steps are followed to arrive at this result:
<ol>
<li> Look at the types of 1 and "10". The "10" is a string, the 1 is a number, so the number is coerced into a string.
<li> As the values on either side of the <b>+</b> operator are both strings, do a string concatenation.  This results in "110"
<LI> Look at the types of the values on either side of the +=.  <i>nowWhat</i> contains a number, and "110" is a string, so convert the number to a string.
<li> As there are now strings on either side of the += operator, do a string concatentation. This results in "0110".
<li> Store this result in <i>nowWhat</i>.
</ol>

<BLOCKQUOTE><pre><FONT FACE="Courier New, Courier" Size=3>var nowThen = 0;
nowThen += 1 + parseInt("10");        // In this case, "+=" performs addition.
</FONT></pre></BLOCKQUOTE>

After this code is executed, the <i>nowThen</i> variable contains the integer 11.
</BLOCKQUOTE>



<hr noshade size=1>
 
</FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Intrinsic Objects</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css">
<META NAME="MS-HKWD" CONTENT="JScript tutorial">
<META NAME="MS-HKWD" CONTENT="intrinsic objects">
<META NAME="MS-HKWD" CONTENT="built-in objects">
<META NAME="MS-HKWD" CONTENT="Array object">
<META NAME="MS-HKWD" CONTENT="Boolean object">
<META NAME="MS-HKWD" CONTENT="Date object">
<META NAME="MS-HKWD" CONTENT="Function object">
<META NAME="MS-HKWD" CONTENT="Global object">
<META NAME="MS-HKWD" CONTENT="Math object">
<META NAME="MS-HKWD" CONTENT="Number object">
<META NAME="MS-HKWD" CONTENT="Object object">
<META NAME="MS-HKWD" CONTENT="String object">
<META NAME="MS-HKWD" CONTENT="properties">
<META NAME="MS-HKWD" CONTENT="methods">
<META NAME="MS-HKWD" CONTENT="subscripts">
<META NAME="MS-HKWD" CONTENT="new operator">
<META NAME="MS-HKWD" CONTENT="Array constructor">
<META NAME="MS-HKWD" CONTENT="length property">
<META NAME="MS-HKWD" CONTENT="substring method">
<META NAME="MS-HKWD" CONTENT="UTC">
<META NAME="MS-HKWD" CONTENT="MAX_VALUE property">
<META NAME="MS-HKWD" CONTENT="MIN_VALUE property">
<META NAME="MS-HKWD" CONTENT="NaN property">
<META NAME="MS-HKWD" CONTENT="POSITIVE_INFINITY property">
<META NAME="MS-HKWD" CONTENT="NEGATIVE_INFINITY property">
<META NAME="MS-HKWD" CONTENT="isNaN function">
<META NAME=MS-HAID CONTENT="builtinobjects">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso8859-1">
<META NAME="PRODUCT" CONTENT="JScript">
<META NAME="TECHNOLOGY" CONTENT="SCRIPTING">
<META NAME="CATEGORY" CONTENT="Tutorial">
<META NAME="Description" CONTENT="JScript Intrinsic Objects">
<META NAME="Keywords" CONTENT="JScript tutorial; intrinsic objects; built-in objects; Array object; Boolean object; Date object; Function object; Global object; Math object; Number object; Object object; String object; properties; methods; subscripts; new operator; Array constructor; length property; substring method; UTC; MAX_VALUE property; MIN_VALUE property; NaN property; POSITIVE_INFINITY property; NEGATIVE_INFINITY property; isNaN function">

</HEAD>



<BODY BGCOLOR=FFFFFF LINK=#0033CC>

<!--TOOLBAR_START-->
<!--TOOLBAR_EXEMPT-->
<!--TOOLBAR_END-->
<FONT FACE="Verdana, ARIAL, HELVETICA" SIZE=2>
<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH=100%><TR VALIGN=TOP><TD WIDTH=360>
<FONT SIZE=1 COLOR=#660033>Microsoft&#174; JScript&#153;</FONT><BR>
<FONT SIZE=5 COLOR=#660033><B>Intrinsic Objects</B></FONT><br>

</TD>
<TD ALIGN=RIGHT>
<FONT SIZE=2>&nbsp;<A HREF="jstutor.htm">JScript&nbspTutorial</A>&nbsp;<br>&nbsp;<A HREF="objects.htm">Previous</A>&nbsp;<P></FONT>


</TD></TR>
</TABLE><p>


<HR SIZE=1 NOSHADE>
<P>
<BLOCKQUOTE>
Microsoft JScript provides nine intrinsic (or "built-in") objects. They are the <b>Array</b>, <b>Boolean</b>, <b>Date</b>, b>Function</b>, <b>Global</b>, <b>Math</b>,  <b>Number</b>, <b>Object</b>, and <b>String</b> objects. Each of the intrinsic objects has associated methods and properties that are described in detail in the <a href="jstoc.htm">language reference</a>. Certain of the objects are also described here.

</blockquote>

<h5>Array Object</h5>
<blockquote>
In JScript, objects are handled as arrays and arrays are handled as objects. The subscripts of an array, which are entirely equivalent to the properties of an object, can be referred to by number (or by name, if you assign names to them). To create a new array, use the <b>new</b> operator and the <b>Array()</b> <a href="glossary.htm#defConstructor">constructor</a>, as in the following example.
<BLOCKQUOTE><pre><FONT FACE="Courier New, Courier" Size=3>var theMonths = new Array(12)  {
theMonths[0] = "Jan";
theMonths[1] = "Feb";
theMonths[2] = "Mar";
theMonths[3] = "Apr";
theMonths[4] = "May";
theMonths[5] = "Jun";
theMonths[6] = "Jul";
theMonths[7] = "Aug";
theMonths[8] = "Sep";
theMonths[9] = "Oct";
theMonths[10] = "Nov";
theMonths[11] = "Dec";
}
</FONT></pre></BLOCKQUOTE>

When you create an array by using the <b>Array</b> keyword, JScript includes in the array a write-only <a href="jsarraylength.htm">length</a> property, which records the number of entries in the array. If you do not specify a number, the length is set to 0, and the array has no entries. If you specify a number, the length is set to that number. If you specify more than one parameter, the parameters are used as entries in the array, and the number of parameters is assigned to the length property, as in the following example, which is equivalent to the preceding one.
<BLOCKQUOTE><pre><FONT FACE="Courier New, Courier" Size=3>var theMonths = new Array("Jan", "Feb", "Mar", "Apr", "May", "Jun", 
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec");
</FONT></pre></BLOCKQUOTE>

JScript automatically changes the value of <b>length</b> if you add elements to an array that you created with the <b>Array</b> keyword.
</blockquote>
<h5>String Object</h5>
<blockquote>
In JScript, strings are objects. This means that any time you declare a string variable or use a string literal, what you're actually doing is creating a new string object. The <a href="jsobjstring.htm"><b>String</b></a> object has certain built-in methods, which you can use with your strings. One of these is the <a href="jsstringsubstring.htm"><b>substring</b></a> method,
which returns part of the string. It takes two numbers as its arguments.
<BLOCKQUOTE><pre><FONT FACE="Courier New, Courier" Size=3>aString = "0123456789";
var aChunk = aString.substring(4, 7);  // Sets aChunk to "456".
var aNotherChunk = aString.substring(7, 4);  // Sets aNotherChunk to "456".

// Using the preceding Array creation example:
firstLetter = theMonths [5].substring(0,1);  // Sets the firstLetter variable to "J".
</FONT></pre></BLOCKQUOTE>

Another property of the <b>String</b> object is the <a href="jsstringlength.htm"><b>length</b></a> property. This property contains the number of characters in the string, which is 0 for an empty string. This a numeric value, and can be used directly in calculations.
<BLOCKQUOTE><pre><FONT FACE="Courier New, Courier" Size=3>var howLong = "Hello World".length  // Sets the howLong variable to 11.
</FONT></pre></BLOCKQUOTE>

</blockquote>
<h5>Math Object</h5>
<blockquote>
The <a href="jsobjmath.htm"><b>Math</b></a> object has a number of properties and methods, all predefined. The properties are specific numbers. One of these is the value of pi (approximately 3.14159...). This is the <b>Math.PI</b> property, shown in the following example.
<BLOCKQUOTE><pre><FONT FACE="Courier New, Courier" Size=3>// A radius variable is declared and assigned a numeric value.
var circleArea = Math.PI * radius * radius;  // Note capitalization of Math and PI.
</FONT></pre></BLOCKQUOTE>

One of the built-in methods of the <b>Math</b> object is the exponentiation method, or <a  href="jsmathpow.htm"><b>pow</b></a>, which raises a number to a specified power. The following example makes use of both pi and exponentiation.
<BLOCKQUOTE><pre><FONT FACE="Courier New, Courier" Size=3>// This formula calculates the volume of a sphere with the given radius.
volume = (4/3)*(Math.PI*Math.pow(radius,3));
</FONT></pre></BLOCKQUOTE>

</blockquote>
<h5>Date Object</h5>
<blockquote>
Use the <a href="jsobjdate.htm"><b>Date</b></a> object to capture today's date, and to calculate differences between
dates. It has a number of properties and methods, all predefined. In general, the <b>Date</b> object provides the day of the week; the month, day, and year; and the time in hours, minutes, and seconds. This information is based on the number of milliseconds since January 1, 1970, 00:00:00.000 GMT. GMT stands for "Greenwich Mean Time"; the preferred term is UTC, or "Universal Coordinated Time," which refers to signals issued by the World Time Standard.<p>
<TABLE CELLSPACING=0 CELLPADDING=0 BORDER=0 WIDTH=87%><TR><TD COLSPAN=2 VALIGN=BOTTOM><hr noshade size=1></TD></TR><TR><P><TD VALIGN=TOP><FONT SIZE=2>

<b>Note</b>&nbsp;&nbsp;As far as JScript is concerned, time begins at midnight on January 1, 1970; you cannot ask JScript to create a <b>Date</b> object that represents an earlier time than that. If you need to deal with earlier times you must write your own code to do so, a formidable task.
</FONT></TD></TR><P><TR><TD COLSPAN=2 VALIGN=TOP><hr noshade size=1></TD></TR></TABLE><p>

To create a new <b>Date</b> object you use the <A href="jsoprnew.htm"><b>new</b></a> operator. The following
example calculates, for the current year, the number of days that have passed and the number of days that are left.
<BLOCKQUOTE><pre><FONT FACE="Courier New, Courier" Size=3>/*
This example uses the array of month names defined previously.
The first statement assigns today's date, in "Day Month Date 00:00:00 Year"
format, to the thisIsToday variable.
*/
var thisIsToday = new Date();

var toDay = new Date();  // Capture today's date.

// Extract the year, the month, and the day.
var thisYear = toDay.getYear() + 1900;
var thisMonth = theMonths[toDay.getMonth()];
var thisDay = thisMonth  + " " + toDay.getDate() + "," + (parseInt(toDay.getYear()) + 1900);

// Determine the # of days since the start.
thisDay = Math.round(Date.parse(thisDay)/8.64e7);

// Do the same for the beginning of the year.
var firstDay = "Jan 1, " + thisYear;
firstDay = Math.floor(Date.parse(firstDay)/8.64e7); 

// Do it again for the end of the year, in case it's a leap year.
var lastDay = "Dec 31, " + thisYear;
lastDay = Math.floor(Date.parse(lastDay)/8.64e7);

// Compute the number of days in the year.
var daysInYear = (lastDay - firstDay) + 1;

// Determine how many days have elapsed, and how many are left.
var daysElapsed = thisDay - firstDay;
var daysLeft = daysInYear - daysElapsed; 

// Set up comments for most of the year.
var comment1 = daysElapsed+ " days have elapsed in the year.";
var comment2 = "That means there are " + daysLeft + " days left in " + thisYear + ".";

// Cover the special cases: beginning & end of year, and single day.
if (daysElapsed == 0)  {
comment1 = "It's January first, " + thisYear + ".";
}
if (daysElapsed == 1) {
comment1 = "Only one day gone so far.";
}
if(daysElapsed == daysInYear) {
comment1 = thisYear + " is just about over.";
}

if (daysLeft == 0)  {
comment2 = "Best wishes for the New Year!";
}
if (daysLeft == 1)  {
comment2 = "There's only one day left in " + thisYear + ".";
}
if (daysLeft == daysInYear)  {
comment2 = "Happy New Year!";
}
</FONT></pre></BLOCKQUOTE>
</blockquote>
<h5>Number Object</h5>
<blockquote>
In addition to the special numeric properties (<b>PI</b>, for example) that are available in the <b>Math</b> object, several other properties are available in Microsoft JScript through the <b>Number</b> object.
<p>

<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0><TR>
<TD BGCOLOR="#DDDDDD" COLSPAN=1><FONT SIZE=2><B>Property</B></FONT></TD><TD BGCOLOR="#DDDDDD" COLSPAN=1><FONT SIZE=2><B>Description</B></FONT></TD>
</TR>
<TR>
        <TD><FONT SIZE=2>MAX_VALUE</FONT></TD><TD><FONT SIZE=2>Largest possible number, about
1.79E+308; can be positive or negative. (Value varies slightly from system to system.)<p></FONT></TD>
      </TR>
<TR VALIGN=TOP>
        <TD><FONT SIZE=2>MIN_VALUE</FONT></TD><TD><FONT SIZE=2>Smallest possible number, about 2.22E-308; can be positive or negative. (Value varies slightly from system to system.)</FONT></TD>
      </TR>
<TR VALIGN=TOP>
        <TD><FONT SIZE=2>NaN</FONT></TD><TD><FONT SIZE=2>Special nonnumeric value, "not a number."</FONT></TD>
      </TR>
<TR VALIGN=TOP>
        <TD><FONT SIZE=2>POSITIVE_INFINITY</FONT></TD><TD><FONT SIZE=2>Any positive value larger than Number.MAX_VALUE <br>is automatically converted to this value; represented as "Inf".</FONT></TD>
      </TR>
<TR VALIGN=TOP>
        <TD><FONT SIZE=2>NEGATIVE_INFINITY</FONT></TD><TD><FONT SIZE=2>Any negative value larger than -Number.MAX_VALUE <br>is automatically converted to this value; represented as "-Inf".</FONT></TD>
      </TR>
</TABLE>

<P>

<b>Number.NaN</b> is a special property that is defined as "not a number." Division by zero, for example, returns <b>NaN</b>. An attempt
to parse a string that cannot be parsed as a number also returns <b>Number.NaN</b>. <b>NaN</b> compares unequal to any number and also to itself. To test for a <b>NaN</b> result, do not compare against <b>Number.NaN</b>; use the <b>isNaN()</b> function instead.
</blockquote>

<hr noshade size=1>
 
</FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Arrays</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css">
<META NAME="MS-HKWD" CONTENT="JScript tutorial">
<META NAME="MS-HKWD" CONTENT="objects">
<META NAME="MS-HKWD" CONTENT="arrays">
<META NAME="MS-HKWD" CONTENT="addressing arrays">
<META NAME="MS-HKWD" CONTENT="intrinsic objects">
<META NAME="MS-HKWD" CONTENT="built-in objects">
<META NAME="MS-HKWD" CONTENT="properties">
<META NAME="MS-HKWD" CONTENT="methods">
<META NAME="MS-HKWD" CONTENT="subscripts">
<META NAME="MS-HKWD" CONTENT="numbered properties">
<META NAME="MS-HKWD" CONTENT="indexing arrays">
<META NAME=MS-HAID CONTENT="usingarr">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso8859-1">
<META NAME="PRODUCT" CONTENT="JScript">
<META NAME="TECHNOLOGY" CONTENT="SCRIPTING">
<META NAME="CATEGORY" CONTENT="Tutorial">
<META NAME="Description" CONTENT="Using Arrays">
<META NAME="Keywords" CONTENT="JScript tutorial; objects; arrays; addressing arrays; intrinsic objects; built-in objects; properties; methods; subscripts; numbered properties; indexing arrays">



</HEAD>
<BODY BGCOLOR=FFFFFF LINK=#0033CC>

<!--TOOLBAR_START-->
<!--TOOLBAR_EXEMPT-->
<!--TOOLBAR_END-->
<FONT FACE="Verdana, ARIAL, HELVETICA" SIZE=2>
<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH=100%><TR VALIGN=TOP><TD WIDTH=360>
<FONT SIZE=1 COLOR=#660033>Microsoft&#174; JScript&trade;</FONT><BR>
<FONT SIZE=5 COLOR=#660033><B>Using Arrays</B></FONT><br>

</TD>
<TD ALIGN=RIGHT>
<FONT SIZE=2>&nbsp;<A HREF="jstutor.htm" TARGET="_top">JScript&nbsp;Tutorial</A><BR><A HREF="valref.htm">Previous</A><br><A HREF="constructor.htm">Next</A><P></FONT>


</TD></TR>
</TABLE> 

<P>
<HR SIZE=1 NOSHADE>

<h5>Array Indexing</h5>
<blockquote>
Arrays in JScript are <i>sparse.</i> That is, if you have an array with three elements that are numbered 0, 1, and 2, you can create element 50 without worrying about elements 3 through 49. If the array has an automatic length variable (see <a href="builtinobjects.htm">Intrinsic Objects</a> for an explanation of automatic monitoring of array length), the length variable is set to 51, rather than to 4. You can certainly create arrays in which there are no gaps in the numbering of elements, but you aren't required to. In fact, in JScript, your arrays don't have to have numbered subscripts at all.<p>

In JScript, objects and arrays are essentially identical to each other. The real difference is not in the data, but rather in the way you address the members of an array or the <A HREF="glossary.htm#defProperty">properties</a> and methods of an object.
</blockquote>
<h5>Addressing Arrays</h5>
<blockquote>
There are two main ways to address the members of an array. Ordinarily, you address arrays by using brackets. The brackets enclose either a numeric value or an <A HREF="glossary.htm#defExpression">expression</a> that evaluates to a nonnegative integer. The following example assumes that the <i>entryNum</I> variable is defined and assigned a value elsewhere in the script.
<BLOCKQUOTE><pre><FONT FACE="Courier New, Courier" Size=3>theListing = addressBook[entryNum];
theFirstLine = theListing[1];
</FONT></pre></BLOCKQUOTE>

This method of addressing is equivalent to the method for addressing objects, though in object addressing, what follows the period must be the name of an actual property. If there is no such property, your code generates an error.<p>

The second way to address an array is to make an object/array that contains properties that are numbered, and then generate the numbers in a loop. The following example generates two arrays, one for the name and one for the address, from a listing in <i>addressBook</i>. Each of these contains four properties. An instance of <i>theName</i>, for example, built from the [Name1] through
[Name4] properties of <i>theListing</i>, might contain "G." "Edward" "Heatherington" "IV", or "George" "" "Sand" "".
<BLOCKQUOTE><pre><FONT FACE="Courier New, Courier" Size=3>theListing = addressBook[entryNum];
for (i = 1; i < 4; i++)  {
theName[i] = theListing["Name" + i];
theAddress[i] = theListing["Address" + i];
}
</FONT></pre></BLOCKQUOTE>

While this particular instance is short, and could easily have been written in the "dot" style of notation, (that is, addressing <i>theListing</i>, <i>theName</i>, and <i>theAddress</i> as objects rather than as arrays), that is not always possible. Sometimes the particular property may not exist until run time, or there may be no way to know which one it will be in advance. For example, if the <i>addressBook</i> array were arranged by last name instead of by numbered listings, the user would probably be entering names "on the fly," while the script is running, to look people up. The following example assumes the existence
of appropriate function definitions elsewhere in the script.
<BLOCKQUOTE><pre><FONT FACE="Courier New, Courier" Size=3>theListing = addressBook[getName()];
theIndivListing = theListing[getFirstName()];
</FONT></pre></BLOCKQUOTE>

This is <i>associative</i> addressing of the array, that is, addressing by means of fully arbitrary strings. Objects in JScript are actually associative arrays. Although you can (and frequently do) use the "dot" style of addressing, you are not by any means required to.


</BLOCKQUOTE>


<hr noshade size=1>

</FONT></FONT></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Variable Scope</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css">
<META NAME="MS-HKWD" CONTENT="JScript tutorial">
<META NAME="MS-HKWD" CONTENT="global scope">
<META NAME="MS-HKWD" CONTENT="local scope">
<META NAME="MS-HKWD" CONTENT="declaring variables">
<META NAME="MS-HKWD" CONTENT="global variables">
<META NAME="MS-HKWD" CONTENT="local variables">
<META NAME="MS-HKWD" CONTENT="undefined">
<META NAME=MS-HAID CONTENT="scope">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso8859-1">
<META NAME="PRODUCT" CONTENT="JScript">
<META NAME="TECHNOLOGY" CONTENT="SCRIPTING">
<META NAME="CATEGORY" CONTENT="Tutorial">
<META NAME="Description" CONTENT="Variable Scope">
<META NAME="Keywords" CONTENT="JScript tutorial; global scope; local scope; declaring variables; global variables; local variables; undefined">

</HEAD>



<BODY BGCOLOR=FFFFFF LINK=#0033CC>

<!--TOOLBAR_START-->
<!--TOOLBAR_EXEMPT-->
<!--TOOLBAR_END-->
<FONT FACE="Verdana, ARIAL, HELVETICA" SIZE=2>
<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH=100%><TR VALIGN=TOP><TD WIDTH=360>
<FONT SIZE=1 COLOR=#660033>Microsoft&#174; JScript&#153;</FONT><BR>
<FONT SIZE=5 COLOR=#660033><B>Variable Scope</B></FONT><br>

</TD>
<TD ALIGN=RIGHT>
<FONT SIZE=2>&nbsp;<A HREF="jstutor.htm">JScript&nbspTutorial</A><br><A HREF="recurse.htm">Previous</A><br><A HREF="valref.htm">Next</A><P></FONT>
</TD></TR>
</TABLE><p>


<hr noshade size=1>
<BLOCKQUOTE>
<p>
Microsoft JScript has two scopes: global and local. If you declare a <a href="glossary.htm#defVariable">variable</a> outside of any function definition, it is a global variable, and its value is accessible and modifiable throughout your program. If you declare a variable inside of a function definition, that variable is local. It is created and destroyed every time the function is executed; it cannot be accessed by anything outside the function.<p>

A local variable can have the same name as a global variable, but it is entirely distinct and separate. Consequently, changing the value of one variable has no effect on the other. Inside the function in which the local variable is declared, only the local version has meaning.
<BLOCKQUOTE><pre><FONT FACE="Courier New, Courier" Size=3>var aCentaur = "a horse with rider,";  // Global definition of aCentaur.

// JScript code, omitted for brevity.
function antiquities()  // A local aCentaur variable is declared in this function.
{

// JScript code, omitted for brevity.
var aCentaur = "A centaur is probably a mounted Scythian warrior";

// JScript code, omitted for brevity.
  aCentaur += ", misreported; that is, ";  // Adds to the local variable.

// JScript code, omitted for brevity.
}  // End of the function.

var nothinginparticular = antiquities();
aCentaur += " as seen from a distance by a naive innocent.";

/*
Within the function, the variable contains "A centaur is probably a mounted Scythian warrior,
misreported; that is, "; outside the function, the variable contains the rest of the sentence:
"a horse with rider, as seen from a distance by a naive innocent."
*/  
</FONT></pre></BLOCKQUOTE>

It's important to note that variables act as if they were declared at the beginning of whatever scope they exist in. Sometimes this results in unexpected behaviors.
<BLOCKQUOTE><pre><FONT FACE="Courier New, Courier" Size=3>var aNumber = 100;
var withAdditive = 0;

withAdditive += aNumber;  // withAdditive is now 100.
tweak();
withAdditive += aNumber;  // withAdditive is now 200.

function tweak()  {
var newThing = 0;  // Explicit declaration of the newThing variable.
// The next statement, if it were not commented out, would generate an error.
// newThing = aNumber;
// The next statement assigns the value 42 to the local aNumber, implicitly declaring it.
aNumber = 42;
if (false)  {
    var aNumber;  // This statement is never executed.
    aNumber = "Hello!";  // This statement is never executed.
    }  // End of the conditional.
}  // End of the function definition.
</FONT></pre></BLOCKQUOTE>

The statement that is commented out attempts to assign the value of the local variable <i>aNumber</i> to the local variable <i>newThing</i>. It fails, despite the fact that a local <i>aNumber</i> variable is defined elsewhere in the function, and therefore exists throughout. The <i>aNumber</i> variable does not have any assigned value at the point where this statement occurs in the code, and is thus <a href="glossary.htm#defundefined">undefined</a>.
</BLOCKQUOTE>

<hr noshade size=1>
 
</FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating Your Own Objects</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css">
<META NAME="MS-HKWD" CONTENT="JScript tutorial">
<META NAME="MS-HKWD" CONTENT="creating objects">
<META NAME="MS-HKWD" CONTENT="user-defined objects">
<META NAME="MS-HKWD" CONTENT="this statement">
<META NAME="MS-HKWD" CONTENT="defining properties">
<META NAME="MS-HKWD" CONTENT="methods">
<META NAME="MS-HKWD" CONTENT="properties">
<META NAME="MS-HKWD" CONTENT="for...in statement">
<META NAME="MS-HKWD" CONTENT="looping statements">
<META NAME="MS-HKWD" CONTENT="indexing">
<META NAME=MS-HAID CONTENT="createobjects">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso8859-1">
<META NAME="PRODUCT" CONTENT="JScript">
<META NAME="TECHNOLOGY" CONTENT="SCRIPTING">
<META NAME="CATEGORY" CONTENT="Tutorial">
<META NAME="Description" CONTENT="Creating Your Own Objects">
<META NAME="Keywords" CONTENT="JScript tutorial; creating objects; user-defined objects; this statement; defining properties; methods; properties; for...in statement; looping statements; indexing">

</HEAD>



<BODY BGCOLOR=FFFFFF LINK=#0033CC>

<!--TOOLBAR_START-->
<!--TOOLBAR_EXEMPT-->
<!--TOOLBAR_END-->
<FONT FACE="Verdana, ARIAL, HELVETICA" SIZE=2>
<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH=100%><TR VALIGN=TOP><TD WIDTH=360>
<FONT SIZE=1 COLOR=#660033>Microsoft&#174; JScript&#153;</FONT><BR>
<FONT SIZE=5 COLOR=#660033><B>Creating Your Own Objects</B></FONT><br>

</TD>
<TD ALIGN=RIGHT>
<FONT SIZE=2>&nbsp;<A HREF="jstutor.htm">JScript&nbspTutorial</A>&nbsp;<br>&nbsp;<A HREF="objects.htm">Previous</A>&nbsp;<P></FONT>


</TD></TR>
</TABLE><p>


<hr noshade size=1>
<P>
<BLOCKQUOTE>
To create instances of an object, you must first define it by giving it properties and, if appropriate, methods. For instance, the following example defines a pasta object. Notice the keyword <a href="jsstmthis.htm"><b>this</b></a>, which you use to refer to
the current object.
<BLOCKQUOTE><pre><FONT FACE="Courier New, Courier" Size=3>function pasta( grain, grain2, width, shape, shapenum, extent, egg )
{
  this.length = 7;   // Number of properties in the object, not including this one.
  this.grain = grain;   // What grain is it made of? (string)
  this.grain2 = grain2;   // Any other flour in it? (string)
  this.width = width;     // How wide is it? (number)
  this.shape = shape;   // What is the cross-section? (string)
  this.shapenum = shapenum;  // Is it one of the registered shapes? (number)
  this.extent = extent;    // How long is it? (number)
  this.egg = egg;  // Does it have egg yolk as a binder? (Boolean)
}
</FONT></pre></BLOCKQUOTE>

Once you define an object, you create instances of it with the <a href="jsoprnew.htm"><b>new</b></a> operator.
<BLOCKQUOTE><pre><FONT FACE="Courier New, Courier" Size=3>var spaghetti = new pasta("wheat", "", 0.2, "circle", 9, 30, true);
var linguine = new pasta("wheat", "", 0.3, "oval", 17, 30, true);
</FONT></pre></BLOCKQUOTE>

You can add properties to one instance of an object, to change that instance, but those properties do not become part of the definition of the object, and do not show up in other instances unless you specifically add them. If you want the extra properties to show up in all instances of the object, you must add them to the object definition.
<BLOCKQUOTE><pre><FONT FACE="Courier New, Courier" Size=3>// Additional properties for spaghetti.
spaghetti.color = "pale straw";
spaghetti.drycook = 7;
spaghetti.freshcook = 0.5;

var chowFun = new pasta("rice", "", 3, "flat", , 12, false); 
/*
Neither the chowFun object, the linguine object, nor the pasta object definition
has the three extra properties given to the spaghetti object.
*/
</FONT></pre></BLOCKQUOTE>

</blockquote>
<h5>Including Methods in the Definition</h5>
<blockquote>
It is possible to include methods in the definition of an object. The following example builds an object that consists of an array of strings, and a method. The method adds a string to the array, increasing its size in order to do so. Notice that this makes each instance of the object indefinitely extensible.
<BLOCKQUOTE><pre><FONT FACE="Courier New, Courier" Size=3>function addItem(newItem)  // Define a function to extend the list.
{
    this.length += 1;  // Increment the length of the array.
    this[(this.length-1)] = newItem;  // Add the new item, maintaining item numbering.
}

function shoppingList(firstItem) // Define a "shopping list" object.
{
    this.length = 2;  // Number of properties in the object, not including this one.
    this.addItem = addItem;   // Include the addItem function as a method.
    this[(this.length-1)] = firstItem;  // The first item is numbered 1.
}

var myList = new shoppingList("Milk");
myList.addItem("Eggs");  // Use the method to add Eggs, which become item 2.
myList.addItem("Breadfruit");  // Breadfruit becomes item 3.
</FONT></pre></BLOCKQUOTE>

At this point, the contents of the array are as follows:
<ul>
<li>myList[length] is 4
<li>myList[addItem] is the addItem function
<li>myList[1] is Milk
<li>myList[2] is Eggs
<li>myList[3] is Breadfruit
</ul>
Note that the indexing is not exactly as you might expect it to be if it were handled in a strictly numeric way. If you execute a <a href="jsstmforin.htm"><b>for...in</b></a> loop on this array, the loop iterates in the order given here, and the loop variable has the initial value "length" rather than 0.

</BLOCKQUOTE>
<hr noshade size=1>
 
</FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Microsoft DrawPrimitive API</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_drawprim"></a>The Microsoft DrawPrimitive API</h1>
<p>
Microsoft Corporation</p>
<p>
September 1997</p>
<h2>Abstract</h2>
<p>
Microsoft® DrawPrimitive provides a simple, yet extremely powerful set of functions to perform the foundation operations of three-dimensional (3-D) drawing. It is an easy-to-use application programming interface (API) that draws 3-D triangles, lines, and points—the fundamental primitives of 3-D—into DirectDraw® API surfaces. This article describes the features, architecture, and use of DrawPrimitive.</p>
<h2>Introduction</h2>
<p>
Microsoft DrawPrimitive is an easy-to-use API for 3-D drawing. DrawPrimitive draws 3-D triangles, lines, and points—the fundamental primitives of 3-D—into DirectDraw API surfaces.</p>
<p>
DrawPrimitive is a simple, compact API. This design simplicity makes it ideal for a wide range of 3-D–related tasks, from quick prototyping and adding 3-D elements to existing applications, to more complex challenges such as interfacing 3-D engines and toolkits to 3-D hardware.</p>
<p>
DrawPrimitive does not require specific 3-D hardware; it is optimized to deliver maximum performance on both software-only and hardware-accelerated systems. DrawPrimitive is designed to be a foundation interface for 3-D acceleration, which is rapidly becoming a standard computing capability.</p>
<h2>Design Goals</h2>
<p>
DrawPrimitive was designed to achieve three key goals: ease-of-use, compatibility with the Microsoft DirectX® set of APIs, and scalable performance.</p>
<h3>Ease of Use for All Potential Users</h3>
<p>
Ease of use is a key design goal of DrawPrimitive because it is a critical feature for anyone using a 3-D API.
<ul type=disc>
<li>
<b>Novice 3-D users.</b> By extending familiar 2-D draw paradigms into 3-D, DrawPrimitive simplifies the introduction of 3-D terms and concepts, lowers the 3-D learning curve, and speeds up the display of results on-screen. Supporting macros and library routines further simplify common activities.<br><br></li>
<li>
<b>Experienced 3-D users.</b> For experienced 3-D programmers, ease of use is more than a 3-D learning-curve issue. A clean, simple API means rapid prototyping, easier debugging and maintenance, and clearer optimization strategies.<br><br></li>
<li>
<b>3-D engine and toolkit builders.</b> DrawPrimitive is a true immediate-mode abstraction of a 3-D drawing device. This means that 3-D engines and toolkits (such as 3-D game or binary space partitioning (BSP) tree engines, scene graph frameworks, or 3-D tools) can use DrawPrimitive as a quick and transparent interface to 3-D hardware without going through an intermediate data structure.<br><br></li>
<li>
<b>Hardware designers.</b> DrawPrimitive defines a foundation interface and clear target for 3-D hardware designers. This speeds up time to market for 3-D device drivers, freeing resources to focus on performance optimization and feature extensions.</li>
</ul>
<h3>Compatibility with DirectX</h3>
<p>
The second design goal for DrawPrimitive is compatibility with DirectX. The reason is simple: DirectX is enormously successful, with hundreds of applications using DirectX technologies and millions of DirectX-enabled devices already in use. The DirectX family of performance graphics and media services is quickly becoming a core, universal PC media playback facility. As an extension of DirectX, the DrawPrimitive API continues the DirectX "direct" design and interface philosophy, combining software emulation and hardware abstraction to unify and allow innovation in digital media playback.</p>
<p>
And, indeed, users of DirectX will find DrawPrimitive familiar. Users of the immediate mode in the Microsoft Direct3D® API will perceive DrawPrimitive as a natural extension of the Direct3D execute buffers, which are essentially user-compiled blocks of DrawPrimitive commands. Users of DirectDraw will find DrawPrimitive a simple and fast way to draw 3-D primitives into the DirectDraw surfaces they already use. Device-driver writers will find that adding a DrawPrimitive extension to existing drivers for DirectX involves only a matter of days or weeks of effort.</p>
<p>
All of the foregoing underscores the Microsoft commitment to DirectX as a core technology. DrawPrimitive protects the investment that ISVs and IHVs have made in DirectX technologies; at the same time, DrawPrimitive extends the functionality of DirectX over time.</p>
<h3>Scalable Performance</h3>
<p>
The final design goal of DrawPrimitive is scalable performance. This means that DrawPrimitive is designed to deliver to the API user the maximum performance available on the full range of 3-D-capable computing architectures.</p>
<p>
There is no single, universal, 3-D computing architecture and innovation in media computing architectures is sure to continue. A foundation 3-D draw API must therefore be scalable from software-only systems to various media processing architectures, and from simple hardware triangle engines to advanced commodity media architectures such as the Microsoft hardware reference design, code-named "Talisman." This requirement is a major design challenge that requires hardware abstraction, software emulation, and the capability of the programmer to query and configure for a particular system.</p>
<h2>Draw Primitive</h2>
<p>
DrawPrimitive is designed to do one thing very well—draw 3-D primitives. This requires supporting a variety of formats for describing 3-D primitives.</p>
<h3>Triangles</h3>
<p>
<b>DrawPrimitive</b> supports triangle fans, triangle strips, and triangle lists.</p>
<p>
<img src="drawprim01.gif" border=0></p>
<p class=label>
<b>Figure 1. Triangles</b></p>
<p>
DrawPrimitive uses triangles to represent both simple and complex surfaces through texture mapping and shading algorithms.</p>
<h3>Lines and Points</h3>
<p>
DrawPrimitive supports line lists, line strips, and point lists.</p>
<p>
<img src="drawprim02.gif" border=0></p>
<p class=label>
<b>Figure 2. Lines and points</b></p>
<h3>Indexed Primitives</h3>
<p>
DrawPrimitive can represent primitives in two formats: as a list of vertices, or as a list of vertices plus an index into the list of vertices. For primitives described as a list of vertices, the draw engine simply processes the vertices in the order they appear in the list. For indexed primitives, the draw engine processes the list of vertices in the order described by the index.</p>
<h3>Choosing a Format</h3>
<p>
The choice of which primitive format to use depends on the application. Some 3-D hardware designs achieve optimal performance with triangle strips and fans. Indexed primitives are commonly used in 3-D file formats, modeling tools, and surface-deforming algorithms.</p>
<h2>The DrawPrimitive Architecture</h2>
<p>
The conceptual architecture of DrawPrimitive is straightforward. A core set of functions is used to pass 3-D primitives to a draw engine, which then draws the primitives into a DirectDraw surface. The draw engine uses a transform formula to calculate how to convert locations in 3-D space into 2-D screen coordinates, and it uses a set of state variables that specify the stylistic characteristics of the draw operation.</p>
<p>
The DrawPrimitive architecture is summarized in Figure 3.</p>
<p>
<img src="drawprim03.gif" border=0></p>
<p class=label>
<b>Figure 3. The DrawPrimitive architecture</b></p>
<p>
The three components of the Direct3D-based device are transform, state variables and draw engine.
<ul type=disc>
<li>
<b>Transform.</b> Transform is a set of formulas that describe how to convert the position of vertices in 3-D space into 2-D screen coordinates. Transform comprises three matrix formulas: the world, view, and projection matrices. Transform matrices are configured with the <b>SetTransform</b> or <b>MultiplyTransform</b> methods or with helper macros.<br><br></li>
<li>
<b>State variables.</b> State variables are used to describe the current style settings for drawing operations.<br><br></li>
<li>
<b>Draw engine.</b> The draw engine performs three separate functions: transformation, lighting, and rasterization. The API user can choose which of these functions the draw engine should perform by describing the vertex data in a particular vertex format. <b>D3DVertex</b> describes a vertex for the draw engine to transform, light, and rasterize. <b>D3DLVertex</b> describes a vertex for which the calling application has already determined the color (a "lit" vertex). <b>D3DTLVertex</b> is used by the calling application to describe a vertex that has already been transformed and lit (the draw engine only needs to draw the primitive).</li>
</ul>
<h2>Using DrawPrimitive</h2>
<p>
Using the DrawPrimitive API is a three-step process: set up, set the state, and draw the primitives.</p>
<h3>Step 1: Set up</h3>
<p>
The first step is to initialize the appropriate DirectDraw-based and Direct3D-based devices.</p>
<h3>Step 2: Set state</h3>
<p>
The next step is to set the transform and specify any desired state variable settings.</p>
<p>
For example, a statement like the following would be used to turn on anti-aliasing for drawing operations:</p>
<pre><code>lpD3DDevice-&gt;SetRenderState(ANTIALIAS,TRUE) //turn on anti-aliasing
</code></pre>
<h3>Step 3: Draw Primitives</h3>
<p>
The third step is to draw the primitives. Each group of like primitives is drawn together in blocks of commands. For example, a code fragment to draw a single triangle would look something like the following:</p>
<pre><code>lpD3DDevice-&gt;Begin(0,Vertex,TriangleList); //begin drawing a triangle list
lpD3DDevice-&gt;Vertex(lpVertex1); //vertex 1
lpD3DDevice-&gt;Vertex(lpVertex2); //vertex 2
lpD3DDevice-&gt;Vertex(lpVertex3); //vertex 3
lpD3Ddevice-&gt;End(0); //end drawing
</code></pre>
<p>
Code to draw a triangle strip from a list of vertices would look like this:</p>
<pre><code>lpD3DDevice-&gt;DrawIndexedPrimitive(0, TriangleStrip, Vertex, lpVertexList, dwVertexCount, lpIndex, dwIndexCount);
</code></pre>
<p>
In the preceding examples:
<ul type=disc>
<li>
<b>TriangleStrip</b> is the type of primitive to draw.<br><br></li>
<li>
<b>Vertex </b>is the type of vertex (slightly different vertex data is used).<br><br></li>
<li>
<b>lpVertexList</b> is a pointer to a list of vertices.<br><br></li>
<li>
<b>dwVertexCount</b> is the number of vertices in the list.<br><br></li>
<li>
<b>lpIndex</b> is a pointer to an index list. (An index list of 0, 1, 2, 3 would mean use the first, second, third, and fourth vertices, in that order, to draw a triangle strip of two adjacent triangles—the first triangle with vertices 0, 1, and 2, the second with vertices 1, 2, and 3.)<br><br></li>
<li>
<b>dwIndexCount</b> is the number of indices in the index list.</li>
</ul>
<h2>Conclusion</h2>
<p>
DrawPrimitive provides a simple yet extremely powerful set of functions to perform the foundation operations of 3-D drawing. Whether one's task is to add a few 3-D elements to an existing application or create an interface between an entire 3-D game engine or tool to 3-D hardware, DrawPrimitive provides the essential primitive-level draw functionality needed.</p>
<h2>Summary of DrawPrimitive Methods</h2>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=36%><b>Method</b></td>
<td class=label width=64%><b>Description</b></td>
</tr>
</table><br>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=36%><b>Set Up</b></td>
<td class=label width=64%></td>
</tr>
<tr valign=top>
<td width=36%><b>SetRenderTarget</b></td>
<td width=64%>Select a DirectDraw-based surface to draw to</td>
</tr>
<tr valign=top>
<td width=36%><b>SetCurrentViewport</b></td>
<td width=64%>Describe 3-D space to be viewable on screen </td>
</tr>
</table><br>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=36%><b>Set State</b></td>
<td class=label width=64%></td>
</tr>
<tr valign=top>
<td width=36%><b>SetRenderState</b></td>
<td width=64%>Set a state variable in the draw engine</td>
</tr>
<tr valign=top>
<td width=36%><b>SetLightState</b></td>
<td width=64%>Set a state variable for a light</td>
</tr>
<tr valign=top>
<td width=36%><b>Get</b>/<b>SetTransform</b></td>
<td width=64%>Get/set the transformation formula from world space (3-D) to screen coordinates (2-D)</td>
</tr>
<tr valign=top>
<td width=36%><b>MultiplyTransform</b></td>
<td width=64%>Modify the transformation formula</td>
</tr>
<tr valign=top>
<td width=36%><b>GetStatus</b></td>
<td width=64%>Get the current value of a state variable</td>
</tr>
</table><br>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=36%><b>Draw </b></td>
<td class=label width=64%></td>
</tr>
<tr valign=top>
<td width=36%><b>Begin</b>, <b>BeginIndexed</b></td>
<td width=64%>Start drawing primitives (triangles, lines or points)</td>
</tr>
<tr valign=top>
<td width=36%><b>DrawPrimitive</b></td>
<td width=64%>Draw a primitive</td>
</tr>
<tr valign=top>
<td width=36%><b>DrawIndexedPrimitive</b></td>
<td width=64%>Draw a primitive from an indexed list</td>
</tr>
<tr valign=top>
<td width=36%><b>Vertex</b>, <b>Lvertex</b>, <b>TLVertex</b></td>
<td width=64%>Add a vertex</td>
</tr>
<tr valign=top>
<td width=36%><b>Index</b></td>
<td width=64%>Add an entry to an index</td>
</tr>
<tr valign=top>
<td width=36%><b>End</b></td>
<td width=64%>Complete drawing primitives</td>
</tr>
</table><br>
<h2>Glossary</h2>
<p>
<b>Indexed primitive.</b> A method of describing a group of 3-D primitives.<b> </b>The vertices of the primitives are stored in a vertex list, and each primitive (a triangle or line segment) is described as index values that point to particular vertices in the vertex list.</p>
<p>
<b>Matrix (plural: matrices).</b> Shorthand for a type of mathematical formula commonly used in 3-D calculations. A matrix is a grid of numbers that represent the coefficients of a set of equations.</p>
<p>
<b>Rasterize.</b> To draw the pixels of a primitive. Rasterization is the third step of the draw engine, after transformation and lighting.</p>
<p>
<b>Transform.</b> To convert a spatial coordinate—for example, to convert a 3-D coordinate into 2-D screen coordinates.</p>
<p>
<b>Triangle fan.</b> A series of triangles that share a common central vertex.</p>
<p>
<b>Triangle strip.</b> A series of triangles organized so that each new triangle shares two vertices with the previous triangle. Triangle strips are convenient for 3-D hardware because less bandwidth is required to send the vertices to the hardware, and the hardware can load a single vertex to draw another triangle.</p>
<p>
<b>Vertex (plural: vertices).</b> A point in space. A vertex can represent a corner of a triangle or an end point of a line segment. DrawPrimitive uses three data structures to describe vertices, depending on whether the calling application wants the draw engine to transform the vertices from 3-D to 2-D space or perform lighting calculations before drawing a triangle.</p>
<h2>For More Information</h2>
<p>
For the latest information on DirectX, check out the Microsoft DirectX Web site (<a href="http://www.microsoft.com/directX">http://www.microsoft.com/directX</a>).</p>
<p>
<i>The information contained in this document represents the current view of Microsoft Corporation on the issues discussed as of the date of publication. Because Microsoft must respond to changing market conditions, it should not be interpreted to be a commitment on the part of Microsoft, and Microsoft cannot guarantee the accuracy of any information presented after the date of publication.</i></p>
<p>
<i>This document is for informational purposes only. MICROSOFT MAKES NO WARRANTIES, EXPRESS OR IMPLIED, IN THIS DOCUMENT.</i></p>
</BODY>
</HTML>

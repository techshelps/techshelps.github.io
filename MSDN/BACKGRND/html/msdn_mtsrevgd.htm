<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>A Guide to Reviewing and Evaluating Microsoft Transaction Server</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_mtsrevgd"></a>A Guide to Reviewing and Evaluating Microsoft Transaction Server</h1>
<p>
Microsoft Corporation</p>
<h4>Contents</h4>
<p>
<a href="#mtsrevgd_over">Microsoft Transaction Server Overview</a><br>
<a href="#mtsrevgd_ben">Microsoft Transaction Server Benefits</a><br>
<a href="#mtsrevgd_glance">Microsoft Transaction Server Features at a Glance</a><br>
<a href="#mtsrevgd_tour">A Quick Tour through Microsoft Transaction Server</a><br>
<a href="#mtsrevgd_easy">Easier Application-Server Development</a><br>
<a href="#mtsrevgd_main">Mainframe-Class Reliability</a><br>
<a href="#mtsrevgd_more">More Development Choices</a><br>
<a href="#mtsrevgd_man">Easier Management</a><br>
<a href="#mtsrevgd_prod">Microsoft Transaction Server Product Comparison</a><br>
<a href="#mtsrevgd_sugg">Suggested Reading</a></p>
<h2><a name="mtsrevgd_over"></a>Microsoft Transaction Server Overview</h2>
<h3>Introduction</h3>
<p>
The growth of the Internet and distributed computing will increase the demand for businesses to deploy solutions on servers. The Internet has grown into a widely used environment for publishing and sharing information online. Businesses can achieve an even greater return on their online systems by moving beyond document sharing to running actual business functions online. Instead of simply publishing sales reports and product catalogs, businesses can operate accounting systems and order-entry systems on servers, with users accessing the shared business functions from browsers and desktop systems. This new environment of online solutions will require shared business applications running on servers.</p>
<p>
Historically, there has been a problem with this vision. Building and deploying shared applications running on servers is much harder than on desktop systems. Server applications require a sophisticated infrastructure that is costly to develop and difficult to maintain. Server applications need to be more reliable than desktop applications, because the impact of system failure or data corruption on a server can effect an entire business, not just a single user. Server applications need to be as easy to deploy and maintain as desktop applications, without requiring special training or a costly infrastructure.</p>
<p>
To solve these problems, Microsoft has developed the Microsoft® Transaction Server (MTS); a product that combines the flexibility and low cost of desktop applications with the mission-critical transaction-processing features normally found in high-end mainframe systems. Microsoft Transaction Server is a component-based transaction processing system for developing, deploying, and managing high performance, scalable, and robust enterprise, Internet, and intranet server applications. MTS defines an application-programming model for developing distributed, component-based applications. It also provides a run-time infrastructure for deploying and managing these applications.</p>
<p>
Microsoft Transaction Server provides the easiest way to run scalable, robust applications on the Microsoft Windows&nbsp;NT® Server operating system:
<ul type=disc>
<li>
Applications are built using ActiveX® controls, enabling easier development and greater reuse by a broad pool of existing developers.<br><br></li>
<li>
Transactions are automatically built into applications, providing mission-critical reliability for distributed applications.<br><br></li>
<li>
MTS is integrated with Windows&nbsp;NT Server, the Microsoft BackOffice® family of products, and other systems, thus lowering deployment and management costs.</li>
</ul>
<p>
By integrating component software with a transaction-processing infrastructure, Microsoft Transaction Server eliminates the problems inherent in building and deploying server solutions.</p>
<h4>Complexity</h4>
<p>
Building and deploying a networked server solution is no easy task. Implementing the actual business function (or example, handling orders for an online bookstore) is actually a small fraction of the work involved. A scalable solution also requires <i>plumbing</i>, the sophisticated application infrastructure that enables the business function to be shared by a large number of users. Server plumbing includes:
<ul type=disc>
<li>
Managing the low-level operating system resources—for example, processes and system threads—so multiple users can access and execute an application at the same time.<br><br></li>
<li>
Synchronizing access to shared data, so that performance does not suffer when multiple users access the same parts of a database.<br><br></li>
<li>
Tracking information about users—who they are and what operations they are performing—so that one user's work does not corrupt or interfere with another user's work.<br><br></li>
<li>
Implementing security, so unauthorized users do not access the system.<br><br></li>
<li>
Implementing management and configuration, so applications can be deployed, managed, and modified in a cost-effective manner.</li>
</ul>
<h4>Costs</h4>
<p>
Building server plumbing into an application is expensive. Independent software vendors (ISVs) estimate that server plumbing consumes 30 to 40 percent of their development costs. This applies across a broad spectrum of applications, from large warehouse management applications to small systems used for managing a doctor's office.</p>
<h4>Reliability</h4>
<p>
The importance of data integrity and system reliability increases as more users access a shared system. Businesses simply cannot afford to lose information or corrupt business processes in the event of a system or software failure. Since these problems become harder to solve in a distributed environment, businesses have been willing to pay a premium, using proprietary, high-end technologies to make sure that their solutions are designed to operate under mission-critical situations.</p>
<h3>Using This Reviewer's Guide</h3>
<p>
Microsoft Transaction Server solves these problems, and this Reviewer's Guide is designed to efficiently help the reader understand how. The Reviewer's Guide is divided into the following sections:
<ul type=disc>
<li>
<b>Microsoft Transaction Server Benefits.</b> A summary of how Transaction delivers lower cost server development, mainframe-class reliability, more deployment choices, and easier management.<br><br></li>
<li>
<b>Microsoft Transaction Server Features at a Glance.</b> A table that describes the product features.<br><br></li>
<li>
<b>A Quick Tour through Microsoft Transaction Server.</b> The reviewer is guided in the setup and installation of the MTS, including the use of two sample applications. The first application, Bank, runs business transactions against a database. The second application, Hockey, is a multiplayer game that uses MTS to manage shared state.<br><br></li>
<li>
<b>Detailed Feature Descriptions.</b> A more detailed review of MTS product features and how they benefit developers and business users.<br><br></li>
<li>
<b>Product Comparison.</b> We compare and contrast MTS features with alternative approaches for deploying server applications.</li>
</ul>
<h2><a name="mtsrevgd_ben"></a>Microsoft Transaction Server Benefits</h2>
<p>
This section of the Reviewer's Guide contains a quick overview of MTS benefits and the features that deliver them. Each of these features is explored in more depth later in the Guide.</p>
<h3>Lower-Cost Server Development</h3>
<p>
Microsoft Transaction Server delivers a series of plumbing features to drive down the complexity and cost of building applications on the server. These features enable developers to focus on building business logic without having to build an application infrastructure. The result is shorter development time, less complex programming, and easier deployment and integration.
<ul type=disc>
<li>
<b>Accessible three-tiered application model.</b> Three-tiered applications, a design where presentation, business, and data logic are separated from each other, provide more deployment flexibility than two-tiered client/server programming, where application code is location-dependent. To date, businesses have had to purchase costly, high-end application platforms to enjoy the benefits of a three-tiered approach. MTS provides an accessible three-tiered model on a commodity platform, delivering high-end distributed features at a much lower cost.<br><br></li>
<li>
<b>ActiveX support.</b> Developers build MTS applications as software components using tools that support ActiveX, including Microsoft Visual Basic®, Visual C++®, and Visual J++™. This takes advantage of existing investments in training, people, and the $240 million market for prebuilt ActiveX components.<br><br></li>
<li>
<b>Simple interfaces.</b> Server environments like transaction processing (TP) monitors and Object Request Brokers (ORB) require mastering hundreds of application programming interfaces (APIs) before developers become productive. MTS has only two main APIs, which lowers training costs while improving developer productivity.<br><br></li>
<li>
<b>Automatic thread and process management.</b> MTS manages low-level system resources, enabling components to automatically operate in a multiuser environment without forcing developers to build this complexity into their applications.<br><br></li>
<li>
<b>Object management.</b> MTS provides "just-in-time" instantiation, making it easier to use components to deliver high-performance applications on servers.<br><br></li>
<li>
<b>Component packaging.</b> MTS includes a component packaging service, so developers do not have to wrestle with the complicated logistics of integrating, installing, and deploying many components as a single application.<br><br></li>
<li>
<b>Database connection pool.</b> MTS manages a pool of ODBC connections to a database, providing high-performance database access without forcing the developer to manage complex database synchronization issues.<br><br></li>
<li>
<b>Shared property manager.</b> MTS provides a mechanism that makes it easy to share data among multiple concurrently executing objects without forcing the developer to program complex state sharing and synchronization logic.<br><br></li>
<li>
<b>Sample applications as learning tools.</b> MTS includes two sample applications to help developers come up to speed quickly on the product.</li>
</ul>
<h3>Mainframe-Class Reliability</h3>
<p>
Easier development only solves part of the problem that businesses will face with online server applications. Applications need to run reliably and recover from failures accurately. Otherwise, records can be corrupted and business disrupted. The type of reliability and transaction processing features that have been running on mainframe applications for twenty-five years are essential for the new generation of online application servers. Transactions are to application servers what brakes are to cars.
<ul type=disc>
<li>
<b>Automatic support for transactions.</b> MTS automatically provides transaction support to applications running on the server, providing a reliable failure isolation and recovery mechanism. Transaction support is transparent to the application programmer, making mainframe-class reliability available to a mass market of solution developers. This transparent support for transactions is a technology breakthrough compared to previous generations of transaction processing systems, where developers had to explicitly program low-level transaction control primitives into their applications.<br><br></li>
<li>
<b>Process isolation.</b> Using MTS packages, developers and administrators can easily isolate components so that they operate in their own system process, providing an additional level of failure isolation and data protection.<br><br></li>
<li>
<b>Automatic distributed security service.</b> MTS provides a distributed security service that is integrated with Windows&nbsp;NT security, making it easy to prevent unauthorized access to business applications, even if the application includes prebuilt components purchased from third parties.</li>
</ul>
<h3>More Deployment Choices</h3>
<p>
Easier development and mainframe-class reliability have limited benefits if businesses are forced to deploy the applications in rigid, static configurations. MTS is designed for flexibility, providing businesses with many deployment choices based on their current systems and continuously changing requirements.
<ul type=disc>
<li>
<b>Location transparency.</b> MTS application components are location transparent. The exact same components can be deployed in a standalone, workgroup, departmental, divisional, or Internet configurations. Businesses and ISVs only have to support one set of source code for multiple configurations of their solution, thereby lowering their maintenance costs while increasing their deployment options.<br><br></li>
<li>
<b>Integration with DCOM.</b> MTS uses the Distributed Component Object Model (DCOM) for component-to-component communications across a network. DCOM is a fast, native object transport for Windows&nbsp;NT and Windows® 95 and is being licensed as an open-industry standard to technology vendors through the Open Group.<br><br></li>
<li>
<b>Integration with Microsoft Internet Information Server.</b> MTS applications can use HTML browsers as clients through integration with Microsoft Internet Information Server (IIS) version 3.0 and Active Server Pages (ASP). This broadens the reach of MTS applications to any desktop system running an Internet browser—including Netscape Navigator.<br><br></li>
<li>
<b>Database and resource manager flexibility.</b> MTS is designed to work with any resource manager, including relational databases, file systems, and image stores, that supports a transactional two-phase commit protocol. This will enable businesses to deploy high-performance applications on MTS that take advantage of current investments in UNIX and mainframe data stores.<br><br></li>
<li>
<b>Integration with Microsoft SQL Server.</b> MTS is tightly integrated with Microsoft SQL Server™ through support of the OLE Transactions two-phase commit protocol and through common use of the Microsoft Distributed Transaction Coordinator (MS DTC). This tight integration provides the lowest possible deployment costs and highest performance for MTS applications.<br><br></li>
<li>
<b>"Fat" and "thin" client support.</b> Microsoft Win32® "fat" clients and Hypertext Markup Language (HTML) "thin" clients can access MTS applications at the same time, providing businesses with an unlimited number of client deployment options for MTS applications.<br><br></li>
<li>
<b>No client footprint.</b> MTS does not require any specific MTS code or libraries to operate on a client system that accesses MTS applications, thus lowering the cost and complexity of distributed applications.<br><br></li>
<li>
<b>Application partitioning.</b> Administrators can easily partition an application across multiple servers by deploying an application's components into several packages, with each package running on its own server. This improves system fault isolation, while increasing application performance and scalability.</li>
</ul>
<h3>Easier Management</h3>
<p>
Businesses have learned that the costs of deploying and managing a distributed application can far exceed the costs of developing and acquiring it. MTS has been designed from the ground up to lower the costs and complexity of distributed applications by providing easier management.
<ul type=disc>
<li>
<b>Transaction Server Explorer.</b> MTS includes an integrated graphic user interface (GUI) management system, the Transaction Server Explorer, which provides point-and-click wizards for component, package, transaction, security, and performance configuration and administration. Compared to traditional TP monitors and ORBs, the Transaction Server Explorer represents a significant breakthrough in terms of ease-of-installation and management for server applications.</li>
</ul>
<h2><a name="mtsrevgd_glance"></a>Microsoft Transaction Server features at a Glance</h2>
<p>
Table 1 provides a brief list of features in Microsoft Transaction Server.</p>
<p class=label>
<b>Table 1. Microsoft Transaction Server—Features At A Glance</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=47%><b>Feature</b></td>
<td class=label width=53%><b>Description</b></td>
</tr>
<tr valign=top>
<td class=label width=47%><b>Easier Application Server Development</b></td>
<td class=label width=53%></td>
</tr>
<tr valign=top>
<td width=47%><b>Accessible three-tier application model</b></td>
<td width=53%><ul type=disc>
<li>
Developers build distributed business solutions from software components.<br><br></li>
<li>
Services separate network programming and server plumbing from business logic.<br><br></li>
<li>
Applications can be built as "single-user" but deployed as "multiuser."</li>
</ul>
</td>
</tr>
<tr valign=top>
<td width=47%><b>ActiveX support</b></td>
<td width=53%><ul type=disc>
<li>
MTS supports tools that produce ActiveX dynamic-link libraries (DLLs), including Microsoft Visual C++, Microsoft Visual Basic, and Microsoft Visual J++.</li>
</ul>
</td>
</tr>
<tr valign=top>
<td width=47%><b>Two new APIs and two new interfaces</b></td>
<td width=53%><ul type=disc>
<li>
Developers who are already skilled in COM and ActiveX have to learn only two new APIs to deploy solutions in the MTS run-time environment.<br><br></li>
<li>
Extensive knowledge of COM APIs and Win32 APIs is not required.<br><br></li>
<li>
Supports <b>CoCreateInstance</b> and <b>CreateObject</b>, the two common APIs used in Visual C++ and Visual Basic, respectively.</li>
</ul>
</td>
</tr>
<tr valign=top>
<td width=47%><b>Automatic thread and process management</b></td>
<td width=53%><ul type=disc>
<li>
Developers do not have to create processes or threads as part of their application.</li>
</ul>
</td>
</tr>
<tr valign=top>
<td width=47%><b>Object instance management</b></td>
<td width=53%><ul type=disc>
<li>
Provides just-in-time object activation, allowing server resources to be used efficiently in high-performance applications.</li>
</ul>
</td>
</tr>
<tr valign=top>
<td width=47%><b>Component packaging</b></td>
<td width=53%><ul type=disc>
<li>
Packages provide an easy mechanism to collect components into a single application unit, with common security, management, and deployment characteristics.</li>
</ul>
</td>
</tr>
<tr valign=top>
<td width=47%><b>Database connection pool</b></td>
<td width=53%><ul type=disc>
<li>
Manages a pool of database connections that can be shared by multiple clients.</li>
</ul>
</td>
</tr>
<tr valign=top>
<td width=47%><b>Shared Property Manager</b></td>
<td width=53%><ul type=disc>
<li>
Multiple concurrent users can easily share global resources.</li>
</ul>
</td>
</tr>
<tr valign=top>
<td width=47%><b>Sample applications as learning tools</b></td>
<td width=53%><ul type=disc>
<li>
Sample Bank is a simple transactional database application that demonstrates how to use MTS APIs.<br><br></li>
<li>
Hockey is a simple multiuser game that shows non-transactional components managing shared state.</li>
</ul>
</td>
</tr>
<tr valign=top>
<td class=label width=47%><b>Mainframe-Class Reliability</b></td>
<td class=label width=53%></td>
</tr>
<tr valign=top>
<td width=47%><b>Automatic transactions through DTC</b></td>
<td width=53%><ul type=disc>
<li>
Integration with the Microsoft Distributed Transaction Coordinator provides a robust transaction management infrastructure.<br><br></li>
<li>
This transaction-processing infrastructure enables high-performance server applications.<br><br></li>
<li>
Transaction support is transparent to the programmer.</li>
</ul>
</td>
</tr>
<tr valign=top>
<td width=47%><b>Process isolation</b></td>
<td width=53%><ul type=disc>
<li>
Administrators can configure components across systems processes for enhanced integrity.</li>
</ul>
</td>
</tr>
<tr valign=top>
<td width=47%><b>Distributed security service</b></td>
<td width=53%><ul type=disc>
<li>
MTS uses Windows&nbsp;NT security to control application access and use.</li>
</ul>
</td>
</tr>
<tr valign=top>
<td width=47%><b>More Deployment Choices</b></td>
<td width=53%></td>
</tr>
<tr valign=top>
<td width=47%><b>Integration with DCOM</b></td>
<td width=53%><ul type=disc>
<li>
Developers and administrators can deploy distributed component applications using standard technology.</li>
</ul>
</td>
</tr>
<tr valign=top>
<td width=47%><b>Integration with Microsoft Internet Information Server</b></td>
<td width=53%><ul type=disc>
<li>
Developers can build distributed applications using HTML, HTTP, and ASP.</li>
</ul>
</td>
</tr>
<tr valign=top>
<td width=47%><b>Support for multiple databases and resource managers</b></td>
<td width=53%><ul type=disc>
<li>
The architecture supports multiple types of resource managers, including relational databases from different software vendors, file systems, and document storage systems.</li>
</ul>
</td>
</tr>
<tr valign=top>
<td width=47%><b>Integration with Microsoft SQL Server</b></td>
<td width=53%><ul type=disc>
<li>
Microsoft SQL Server supports the OLE Transactions two-phase commit protocol, for fast MTS applications.<br><br></li>
<li>
Integration of DTC with SQL Enterprise Manager provides common management for SQL Server and MTS applications.</li>
</ul>
</td>
</tr>
<tr valign=top>
<td width=47%><b>"Fat" and "thin" client support</b></td>
<td width=53%><ul type=disc>
<li>
Win32 "fat" clients and HTML "thin" clients can access MTS applications at the same time.</li>
</ul>
</td>
</tr>
<tr valign=top>
<td width=47%><b>No client footprint</b></td>
<td width=53%><ul type=disc>
<li>
Client applications require no client libraries or client run time.</li>
</ul>
</td>
</tr>
<tr valign=top>
<td width=47%><b>Dynamic configuration</b></td>
<td width=53%><ul type=disc>
<li>
New clients and servers can be dynamically added and dropped from a distributed application.</li>
</ul>
</td>
</tr>
<tr valign=top>
<td class=label width=47%><b>Easier Management</b></td>
<td class=label width=53%></td>
</tr>
<tr valign=top>
<td width=47%><b>Transaction Server Explorer</b></td>
<td width=53%><ul type=disc>
<li>
GUI management console<br><br></li>
<li>
Easier deployment, with the ability to:<ul type=disc>
<li>
Create packages<br><br></li>
<li>
Install components<br><br></li>
<li>
Install packages<br><br></li>
<li>
Export packages across servers<br><br></li>
<li>
Configure transaction support<br><br></li>
<li>
Configure security</li>
</ul>
</li>
<li>
Easier management, with the ability to:<ul type=disc>
<li>
Manage transactions<br><br></li>
<li>
Monitor transactions<br><br></li>
<li>
Resolve transactions<br><br></li>
<li>
View transaction statistics<br><br></li>
<li>
View trace messages<br><br></li>
<li>
Manage components</li>
</ul>
</li>
</ul>
</td>
</tr>
</table><br>
<h2><a name="mtsrevgd_tour"></a>A Quick Tour through Microsoft Transaction Server</h2>
<p>
In this section of the Reviewer's Guide, the reviewer will install Microsoft Transaction Server and run two sample applications. This will provide a first-hand example of the easy configuration and management features of MTS.</p>
<h3>Setting up Microsoft Transaction Server</h3>
<p>
Before you install Microsoft Transaction Server, make sure that your computer meets the minimum requirements. For the latest information on supported platforms and hardware and software requirements, see the <b>readme.hlp</b> file in the root directory of the <b>Setup</b> disc.</p>
<h4>Hardware Requirements</h4>
<p>
To run Microsoft Transaction Server, you must meet certain hardware requirements, which include:
<ul type=disc>
<li>
Any Windows&nbsp;NT x86 compatible computer. See the readme file for the most updated information for other platforms.<br><br></li>
<li>
A hard disk with a minimum of 30 megabytes available space for a full installation. See the readme file for the most updated information for other platforms.<br><br></li>
<li>
A CD-ROM drive.<br><br></li>
<li>
Any display supported by Windows&nbsp;NT 4.0.<br><br></li>
<li>
At least 32 megabytes of memory. See the readme file for the most updated information for other platforms.<br><br></li>
<li>
A mouse or other suitable pointing device.</li>
</ul>
<p>
Before you install Microsoft Transaction Server, you must install Microsoft Windows&nbsp;NT version 4.0 on your computer. See the readme.hlp file for the latest information on other platforms.
<ul type=disc>
<li>
If you want your components to access databases, use Microsoft SQL Server, version 6.5 or later, or another Microsoft Transaction Server compatible database. See the readme file for more information.<br><br></li>
<li>
If you plan to create components with Microsoft Visual Basic, use Microsoft Visual Basic, Enterprise Edition, version 4.0 or later.<br><br></li>
<li>
If you plan to create components with Microsoft Visual C++, use version 4.1 or later with the ActiveX Template Libraries (ATL), version 1.1 or later. If you use Visual C++ version 4.1, you must have the Win32 Software Development Kit (SDK).<br><br></li>
<li>
If you plan to create and run Java components with Microsoft Transaction Server, use Microsoft Visual J++ 1.0 or later and the Java Virtual Machine installed with Microsoft Internet Explorer 3.0a or later. You can download Internet Explorer from the Microsoft Internet Explorer Web site (<a href="http://www.microsoft.com/ie/">http://www.microsoft.com/ie/</a>).<br><br></li>
<li>
If you plan to create Internet applications, use Microsoft Internet Information Server 3.0 or later and Microsoft Internet Explorer 3.0 or later.<br><br></li>
<li>
If you want to use Microsoft Windows 95 clients with Microsoft Transaction Server, install DCOM for Windows 95. For the latest information on DCOM support for Windows 95, see the Microsoft OLE Development Web site (<a href="http://www.microsoft.com/oledev/">http://www.microsoft.com/oledev/</a>).<p class=tl>
To set up from disc:</P><ul type=disc>
<li>
Insert the disc in the CD-ROM drive.<br><br></li>
<li>
Run <b>setup.exe</b>, which is available in the root directory on the compact disc.<br><br></li>
<li>
Follow the Setup instructions on the screen.</li>
</ul>
<p class=atl>
<B><b>Important&nbsp;&nbsp;&nbsp;</b></B>To install the sample applications that you will use for validating your Microsoft Transaction Server installation, you must choose to install the files for Microsoft Transaction Server Development during setup.</p><p class=tl>
When you run the Setup program, it creates a folder for Transaction Server, \MTx.</P></li>
</ul>
<h3>Sample Bank Application</h3>
<p>
MTS includes a sample bank application that demonstrates many of the product features, including:
<ul type=disc>
<li>
Easy installation of an application.<br><br></li>
<li>
Packages.<br><br></li>
<li>
Deployment flexibility.<br><br></li>
<li>
Automatic transactions.<br><br></li>
<li>
Easy configuration and administration.</li>
</ul>
<p>
Sample Bank is a three-tiered application, where a form built with Visual Basic invokes middle-tier components that perform bank credits and debits against a SQL Server database. The middle-tier components are run in MTS. MTS manages the server plumbing, including threads, object instances, transactions, and database connections. Sample Bank has a very simple design, and installs in minutes, but displays many features normally associated with high-end business applications.</p>
<p>
<img src="mtsrevgd01.gif" border=0></p>
<p class=label>
<b>Figure 1. Bank</b></p>
<h4>Installing Sample Bank</h4>
<p>
The reviewer can use the following steps to install and operate the sample bank:
<ol>
<li>
Install Microsoft Transaction Server.<br><br></li>
<li>
Install the Sample Bank package.<br><br></li>
<li>
Set up the Transaction Server Explorer to monitor the Sample Bank package.<br><br></li>
<li>
Configure an ODBC data source.<br><br></li>
<li>
Run the Bank Client.</li>
</ol>
<p>
To install the Sample Bank package:
<ol>
<li>
On the <b>Start</b> menu, point to <b>Programs</b>, point to <b>Microsoft Transaction Server</b>, and then click <b>Transaction Server Explorer</b>.<br><br></li>
<li>
In the right pane, double-click the <b>My Computer</b> icon.<br><br></li>
<li>
In the right pane, double-click the <b>Packages Installed</b> folder.<br><br></li>
<li>
On the <b>File</b> menu, click <b>New</b>.<br><br></li>
<li>
Click the <b>Install prebuilt packages</b> button, and click Add.<br><br></li>
<li>
Select <b>Sample Bank.pkg</b> in the \Samples\Packages folder of your Microsoft Transaction Server installation, click <b>Open</b>, and then click <b>Next</b>.<br><br></li>
<li>
In the <b>Set Package Identity</b> dialog box, select <b>Interactive user</b>.<br><br></li>
<li>
In the <b>Installation Options</b> dialog box, specify the installation directory, for example, c:\Mtx\Packages, and then click <b>Finish</b>.</li>
</ol>
<p>
This Sample Bank package includes several components.</p>
<p>
To monitor the Sample Bank package components and transactions:
<ol>
<li>
Double-click the <b>Sample Bank</b> package icon in the right pane of the Transaction Server Explorer.<br><br></li>
<li>
Double-click the <b>Components</b> folder.<br><br></li>
<li>
On the <b>View</b> menu, click <b>Status</b> to display usage information for the various components in the package.<br><br></li>
<li>
On the <b>View</b> menu, click <b>New Window.</b><br><br></li>
<li>
Rearrange the new window so it does not overlap.<br><br></li>
<li>
Click <b>Transaction Statistics</b> in the left pane of the new window.<br><br></li>
<li>
On the <b>View</b> menu, click <b>Hierarchy</b> to hide the left pane. Now transaction statistics are displayed when transactional components are used.</li>
</ol>
<p>
To configure the ODBC data source:
<ol>
<li>
Use the ODBC applet in the <b>Control Panel</b> to set up your data source. In the <b>Data Sources</b> dialog box, click <b>Add</b>, select <b>SQL Server</b>, and specify the data source name as <b>MTxSamples</b> and the<b> Server</b> as <b>(local)</b>. Click <b>Options</b> and enter the default database to use for the Account table ('pubs' for example).<br><br></li>
<li>
Make sure that Microsoft SQL Server is running. Open the Microsoft SQL Server SQL Enterprise Manager, and on the <b>Server</b> menu, point to <b>SQL Server</b>, and click <b>Start.</b> If the traffic light is green, then SQL Server is running.</li>
</ol>
<h4>Running Sample Bank</h4>
<ol>
<li>
Make sure that Microsoft Distributed Transaction Coordinator (MS DTC) is running. Select <b>My Computer</b> in the left pane of the Transaction Server Explorer, and on the <b>Tools</b> menu, select <b>MS DTC</b>. If <b>Start</b> is enabled, click it.<br><br></li>
<li>
On the <b>Start</b> menu, select <b>Programs</b>, then <b>Microsoft Transaction Server</b>, then <b>Samples</b>, then click <b>Bank Client.</b> Arrange the Bank Client window so it does not overlap the Transaction Server Explorer windows.<br><br></li>
<li>
The form will default to credit $1 to account number 1. Click <b>Submit.</b> You should see a response with the new balance.<br><br></li>
<li>
Observe the Transaction Server Explorer windows. You will also notice that the component usage and transaction statistics windows have been updated.<br><br></li>
<li>
Experiment with the bank client and observe the statistics using different transaction types, servers, and iterations. You might notice that the first transaction takes longer than the others do. This is due to the fact that the first transaction creates the sample bank database tables and inserts temporary records into them.</li>
</ol>
<h4>Bank Architecture</h4>
<p>
The Bank application consists of four components:
<ul type=disc>
<li>
<b>MoveMoney.</b> Performs debit, credit, and transfer operations against different bank databases.<br><br></li>
<li>
<b>Account.</b> Uses ODBC calls to modify an account record in a single database.<br><br></li>
<li>
<b>Receipt. </b>Generates a unique ID number for each bank transaction.<br><br></li>
<li>
<b>UpdateReceipt.</b> Allocates ranges of unique ID numbers for receipts.</li>
</ul>
<p>
<img src="mtsrevgd02.gif" border=0></p>
<p class=label>
<b>Figure 2. Bank Architecture</b></p>
<p>
The client initiates a bank transaction by invoking MoveMoney. MoveMoney invokes an Account component for each database that it needs to modify. MoveMoney also invokes the Receipt component for each bank transaction. MTS makes sure that the work of all these components executes as a single unit (or transaction), even though these are different components that could be written in different languages. Each one of these components is built as a simple, single-user ActiveX component yet executes as "multiuser" through MTS thread and process management services. Finally, the Account Components are accessing the SQL Server database via MTS ODBC resource dispensers, a mechanism for high-performance database access.</p>
<p>
This is an example of a simple application getting all of the benefits of a sophisticated, high-end server infrastructure—including transactions, location transparency, thread and process management, and database connection pooling—through integration with MTS.</p>
<h3>Sample Hockey Application</h3>
<p>
Hockey is a distributed, multiuser game that uses MTS features without requiring transactions. The application includes a component that uses MTS for thread management and to manage a shared game state across multiple users.</p>
<p>
<img src="mtsrevgd03.gif" border=0></p>
<p class=label>
<b>Figure 3. Hockey</b></p>
<h4>Installing Hockey</h4>
<p>
Steps for installing hockey include:
<ol>
<li>
Install the Microsoft Transaction Server.<br><br></li>
<li>
Create a package.<br><br></li>
<li>
Import the Hockey server component.<br><br></li>
<li>
Run the Hockey client, and play against the computer.</li>
</ol>
<p>
To create the package:
<ol>
<li>
On the <b>Start</b> menu, select <b>Programs</b>, point to <b>Microsoft Transaction Server</b>, and then click <b>Transaction Server Explorer</b>.<br><br></li>
<li>
In the right pane, double-click the <b>My Computer</b> icon.<br><br></li>
<li>
In the right pane, double-click the <b>Packages Installed</b> folder.<br><br></li>
<li>
On the <b>File</b> menu, click <b>New</b>.<br><br></li>
<li>
Click <b>Create an empty package</b>.<br><br></li>
<li>
Type a package name, in this case, <b>Hockey</b>, and then click <b>Next</b>.<br><br></li>
<li>
In the <b>Set Package Identity</b> dialog box, accept the default setting, which is <b>Interactive user</b>, and then click <b>Finish</b>.</li>
</ol>
<p>
To import the Hockey server component:
<ol>
<li>
In the Transaction Server Explorer, double-click the <b>Hockey package</b> icon you just created.<br><br></li>
<li>
Double-click the <b>Components</b> folder.<br><br></li>
<li>
On the <b>File</b> menu, click <b>New.</b><br><br></li>
<li>
Select <b>Import component(s) that are already registered.</b><br><br></li>
<li>
Select the component <b>HOCKSVR.HocksvrObject.1</b>, and click <b>Finish.</b><br><br></li>
<li>
The component will now be displayed in the <b>Components</b> folder.</li>
</ol>
<h4>Playing Hockey</h4>
<ol>
<li>
On the Start menu, select <b>Programs,</b> then <b>Microsoft Transaction Server,</b> then <b>Samples,</b> and then click <b>Hockey.</b><br><br></li>
<li>
Type your name in the <b>Name</b> dialog box, and click <b>Continue.</b><br><br></li>
<li>
Type <b>Game1</b> (or whatever you want to use as the name of the game) in the Game dialog box, and click <b>New.</b><br><br></li>
<li>
For Red 1, select <b>Computer</b>, and for Blue 1, select your name.</li>
</ol>
<p>
After you start playing the game, go back to the Transaction Server Explorer. Notice that the Hockey server component icon is now "spinning" indicating that it is activated and that your Microsoft Transaction Server installation is correct. If you stop the game, the icon stops spinning because the Hockey client is no longer using the Hockey server component.</p>
<p>
If you click the <b>Status</b> command on the <b>View</b> menu, you can see usage information about the Hockey component.</p>
<p>
<img src="mtsrevgd04.gif" border=0></p>
<p class=label>
<b>Figure 4. Viewing Hockey Component in Explorer</b></p>
<h4>Hockey Architecture</h4>
<p>
Hockey is a simple application consisting of three components:
<ul type=disc>
<li>
A client application that manages the User Interface. There is one client component running for each player.<br><br></li>
<li>
A Hockey Server game component that runs inside of MTS. These are "single-user" components, and MTS creates one instance of this component for each player.<br><br></li>
<li>
The MTS Shared Property Manager is used by the Hockey Server to maintain shared state of games, such as current puck position, the game score, and positions of all of the players.</li>
</ul>
<p>
<img src="mtsrevgd05.gif" border=0></p>
<p class=label>
<b>Figure 5. Hockey Architecture</b></p>
<p>
Each player invokes a HockeyServer component. Each HockeyServer component stores game state, including puck and player location, in the Shared Property Manager.</p>
<p>
There can be up to four players playing together in a single game, and there is no limit on the number of games being played on MTS.</p>
<p>
This is a simple example of a server application relying upon MTS to manage low-level system resources across multiple users. It demonstrates the location transparency of MTS, thread and process management, high performance across a network, and the Explorer administration tool.</p>
<h2><a name="mtsrevgd_easy"></a>Easier Application-Server Development</h2>
<h3>The Transition to Solutions on the Server</h3>
<p>
Two transitions are taking place that will drive demand for server-solution technology:
<ul type=disc>
<li>
The transition from desktop solutions to distributed solutions.<br><br></li>
<li>
The transition from publishing information on the Internet/intranets to running online applications on the Internet/intranets.</li>
</ul>
<p class=label>
<b>Table 2. Examples of Internet Publishing Applications Migrating to Online Applications</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=46%><b>Internet Publishing Application</b></td>
<td class=label width=54%><b>Online Application</b></td>
</tr>
<tr valign=top>
<td width=46%>Human Resources Handbook</td>
<td width=54%>Human Resources Benefits Management</td>
</tr>
<tr valign=top>
<td width=46%>Real Estate advertising</td>
<td width=54%>Appointment scheduling</td>
</tr>
<tr valign=top>
<td width=46%>Events calendar</td>
<td width=54%>Online ticketing</td>
</tr>
<tr valign=top>
<td width=46%>Hard Goods catalog</td>
<td width=54%>Order capture and fulfillment</td>
</tr>
<tr valign=top>
<td width=46%>Advertising-sponsored content</td>
<td width=54%>Fee-based content (micropayments)</td>
</tr>
<tr valign=top>
<td width=46%>Flight schedules</td>
<td width=54%>Reservations and ticketing</td>
</tr>
<tr valign=top>
<td width=46%>Mutual Fund advertising, Prospectus</td>
<td width=54%>Portfolio management</td>
</tr>
</table><br>
<p>
Businesses that want to transition their use of the Web from publishing information to running online applications encounter barriers that make it difficult to do so on a wide-scale basis. These barriers include:
<ul type=disc>
<li>
Finding employees with the skills required to integrate Web content with business applications.<br><br></li>
<li>
Reducing the costs of operating an ongoing application that may require constant modification and change in the demand-driven Web environment.<br><br></li>
<li>
Integration with existing systems, so you do not have to abandon past investments, especially in UNIX servers and mainframe environments.<br><br></li>
<li>
Investment protection, so that systems deployed within the next year are not made obsolete by sudden changes in technology.<br><br></li>
<li>
Mission-critical integrity, so that business systems are never corrupted, resulting in unsatisfied customers or lost business information.</li>
</ul>
<h4>Active Server</h4>
<p>
Active Server describes Microsoft's broad strategy to enable businesses to easily develop and deploy server solutions for the Internet and intranets. Just as the combination of Windows, Microsoft Office, and OLE development tools reduced the skill set and cost requirements for deploying solutions on the desktop, Active Server will lower the skill set and cost requirements for solutions in the distributed world of Internet and intranet servers.</p>
<p>
Microsoft Transaction Server is a key Active Server technology, lowering the cost and complexity for deploying component solutions on the server. Throughout the Reviewer's Guide, we will illustrate how MTS addresses the barriers that prevent the wide-scale deployment of solutions on the server.</p>
<h4>Server Programming Issues</h4>
<p>
To better evaluate the plumbing services provided by MTS, it is helpful to first understand the anatomy of a server application. The diagram below shows the basic components of a server application:</p>
<p>
<img src="mtsrevgd06.gif" border=0></p>
<p class=label>
<b>Figure 6. Anatomy of a generic server solution</b></p>
<p>
A server application must include:
<ul type=disc>
<li>
Client logic, including forms and the user interface.<br><br></li>
<li>
A network protocol to link the client with the server.<br><br></li>
<li>
A network receiver to listen to the network, accept incoming calls from clients, and manage congestion.<br><br></li>
<li>
A connection manager that tracks work and system resources on behalf of each client.<br><br></li>
<li>
A queue manager, in case client calls start to back up.<br><br></li>
<li>
A thread pool, to avoid having to dedicate a thread for each user.<br><br></li>
<li>
A context manager, to keep track of each user's concurrent identity and state.<br><br></li>
<li>
A configuration manager to manage thread and server resources.<br><br></li>
<li>
A security manager, to prevent unauthorized access to the application or data.<br><br></li>
<li>
The actual service logic, the business function that the application performs.<br><br></li>
<li>
A database connection manager to allocate database connections for multiple users.<br><br></li>
<li>
The database design.</li>
</ul>
<h4>Microsoft Transaction Server Mission</h4>
<p>
The mission of Microsoft Transaction Server is to provide solution developers with all of the following application infrastructure services: receiver, queue, connections, context, security, thread pool, synchronization, management, and configuration, so that developers only have to concentrate on client logic, server logic, and setting up the database. This significantly lowers the cost and complexity of deploying server applications.</p>
<h3>Accessible Three-Tiered Application Model</h3>
<p>
Businesses and software companies are turning to a three-tiered application model for distributed solutions. In a three-tiered application, business-process logic is separated from presentation services and data services.</p>
<p>
The appeal behind three-tiered solutions lies in the belief that businesses can achieve faster development, lower deployment costs, and increased flexibility when applications are neatly partitioned, as opposed to monolithic and client/server designs, where presentation, logic, and data services are tightly dependent on each other.</p>
<p>
<img src="mtsrevgd07.gif" border=0></p>
<p class=label>
<b>Figure 7. Evolution of distributed application models from monolithic to three-tiered</b></p>
<p>
To date, three-tiered applications have been the domain of high-end tools and deployment environments. These products are expensive and have failed to achieve mass-market support.</p>
<p>
The Microsoft Transaction Server provides an accessible, built-in architecture for three-tiered applications on Windows&nbsp;NT Server. MTS is a middle-tier platform for running multiuser business logic.</p>
<p>
<img src="mtsrevgd08.gif" border=0></p>
<p class=label>
<b>Figure 8. MTS architecture</b></p>
<h4>Microsoft Transaction Server Architecture</h4>
<p>
As a middle-tier platform, MTS provides an architecture for solutions on the server that connect users to databases. The basic architecture of MTS consists of:
<ul type=disc>
<li>
<b>Base processes.</b> A desktop or a browser that requests work from the server solution.<br><br></li>
<li>
<b>Application components.</b> The business logic written as software components and deployed in the MTS run-time environment.<br><br></li>
<li>
<b>Transaction Server Executive.</b> Provides the plumbing services to the application components.<br><br></li>
<li>
<b>Resource Dispensers.</b> A mechanism to manage the shared state—including database connections—in a process.<br><br></li>
<li>
<b>Resource managers.</b> System services that manage durable data. Microsoft SQL Server, durable message queues, and transactional file systems are all examples of resource managers.</li>
</ul>
<p>
MTS provides the plumbing, while developers build the business logic. This is the first step in making application server development easier.</p>
<h3>ActiveX Support</h3>
<p>
Microsoft Transaction Server application components—the business logic that runs on the server—can be written with any language that produces ActiveX DLLs. Developers and businesses that use these languages for desktop solutions can now use them for server solutions.</p>
<p>
<img src="mtsrevgd09.gif" border=0></p>
<p class=label>
<b>Figure. 9 Products for ActiveX support</b></p>
<p>
Developers can use Microsoft Visual Basic, Microsoft Visual C++, and Microsoft Visual J++.</p>
<p>
Since ActiveX is a language-neutral technology supported by most major development tool vendors, developers can use popular third-party products to build MTS applications. Major tools vendors planning support for Microsoft Transaction Server in 1997 include:
<ul type=disc>
<li>
PowerSoft PowerBuilder and Optima++<br><br></li>
<li>
Borland Delphi<br><br></li>
<li>
MicroFocus COBOL</li>
</ul>
<p>
Microsoft Transaction Server support for Java is of particular interest to Internet programmers because all of the MTS middle-tier services are provided to ActiveX components written in Java. This contrasts with other middleware approaches, where Java is used as a simple front end to back-end ORBs and TP monitor applications. All<b> </b>MTS plumbing features are available for developers building in Java. In a sense, MTS is the industry's first transaction processing monitor for Java.</p>
<p>
ActiveX on the desktop today represents the software industry's best example of component reuse and rapid development through standards. There is a $240 million market for prebuilt ActiveX software components that developers use in their solutions. MTS's support for ActiveX will extend this type of developer leverage onto the server.</p>
<h3>Simple APIs</h3>
<p>
Most existing application server products and development environments require mastery of a complicated set of programming interfaces. This represents both a significant up-front training investment and a significant ramp-up time before developers become productive. Programming complexity is one of the reasons that ORBs and TP monitors have been slow to achieve mass-market acceptance.</p>
<p>
Microsoft Transaction Server leverages existing ActiveX programming interfaces, familiar to desktop developers, in order to lower training costs and shorten ramp-up time.
<ul type=disc>
<li>
Visual Basic programmers invoke MTS applications with <b>Create Object.</b><br><br></li>
<li>
Visual C++ programmers call MTS applications with <b>CoCreateInstance.</b></li>
</ul>
<p>
MTS has only two new APIs, <b>GetObjectContext</b> and <b>SafeRef</b>. Most MTS applications can be built using just one new API and one new interface.</p>
<p>
Reviewers can refer to the <i>Microsoft Transaction Server Programmers Guide</i> for more information in this area.</p>
<h3>Automatic Thread and Process Management</h3>
<p>
Solutions running on servers require a sophisticated application infrastructure to support increasing numbers of concurrent clients. An example of this mechanism is <i>threading,</i> a low-level Windows&nbsp;NT service that enables multiple concurrent users to share a single operating system process.</p>
<p>
To date, developers have had to hand-code the creation and termination of threads into their application in order to enable a large number of concurrent users to share a server application. Allocating a system thread per user can result in poor performance in a multiuser environment. Building a thread pool that shares system threads across users is a complex problem requiring sophisticated programming to address issues like deadlocks, starvation, and race conditions. These low-level, complex problems need to be addressed regardless of the developer's programming language, even if the developer is using Java.</p>
<p>
This is a good example of the "server plumbing" that can consume 30 to 40 percent of a development project. It diverts development resources from building additional functionality into a solution and it increases the support complexity of the solution after it has been deployed.</p>
<p>
Microsoft Transaction Server provides an automatic thread pool to components. Developers do not have to program thread management—the creation, allocation, and termination of system threads—into their solution. This enables easier scalability in a multiuser environment, while lowering the skill set required to build server solutions.</p>
<h3>Object Instance Management</h3>
<p>
ActiveX uses an object-oriented infrastructure called COM. Applications consist of components that invoke services from other components.</p>
<p>
With basic COM objects, clients have control over object lifetimes—client references are bound to the same object instance for as long as the reference is held. MTS extends the COM model with just-in-time activation, which gives component developers additional control over object lifetimes and allows server resources to be used more efficiently.</p>
<p>
During method execution, an MTS object can use either the <b>SetComplete</b> or <b>SetAbort</b> methods to indicate that the object does not need to maintain state after returning from the call. As a result, the MTS Executive can deactivate the object after the method call returns. The object remains deactivated until the client makes another call to it. As long as the object is deactivated, only limited server resources need be allocated to it, namely those required to maintain the object context and its association with the client references. Other server resources, such as memory for the object's private data and database connections, do not need to remain allocated to the object and can be used for other purposes. Only when the object is subsequently called is it reactivated, at which time it can reacquire any resources that it needs to service the call.</p>
<p>
This ability for an object to be deactivated and reactivated while clients hold references to it is referred to as<i> just-in-time activation.</i> From the client's perspective, only a single instance of the object exists from the time the client creates it to the time it is finally released. In actuality, the object may be deactivated and reactivated many times.</p>
<p>
Object instance management and just-in-time activation enables MTS applications to scale better than most component applications built with traditional object-oriented infrastructure approaches, including ORBs.</p>
<h3>Component Packaging</h3>
<p>
Assembling different software components into a single solution can present configuration and deployment problems, including:
<ul type=disc>
<li>
How can components be configured and deployed as a unit?<br><br></li>
<li>
Does the developer have to handcraft security for each component?</li>
</ul>
<p>
Microsoft Transaction Server introduces the concept of <i>component packages</i> to enable the easy integration of different software components into a single application. Components in a package:
<ul type=disc>
<li>
Execute in the same process space together.<br><br></li>
<li>
Share common security.<br><br></li>
<li>
Can be deployed as a single unit.</li>
</ul>
<p>
<img src="mtsrevgd10.gif" border=0></p>
<p class=label>
<b>Figure 10. Packages enable components to be grouped and distributed as a single unit.</b></p>
<p>
Packages increase application flexibility. An entire application can be deployed in a single package, and then partitioned into multiple packages in order to achieve a higher degree of:
<ul type=disc>
<li>
Performance.<br><br></li>
<li>
Load balancing.<br><br></li>
<li>
Fault isolation.</li>
</ul>
<h3>Database Connection Pool</h3>
<p>
Integrating a relational database with a multiuser application presents development challenges:
<ul type=disc>
<li>
The application overhead involved in establishing a client's connection to a database can far exceed the application overhead for the work the client wants to perform on the database.<br><br></li>
<li>
Maintaining a separate database connection for each client is costly and does not scale well.<br><br></li>
<li>
The process of establishing, managing, and closing multiple database connections requires complex programming, including sophisticated algorithms for deadlock detection and concurrency.</li>
</ul>
<p>
As mentioned earlier, MTS includes resource dispensers, which make it easier for a developer to share system resources across multiple, concurrent application components.</p>
<p>
<img src="mtsrevgd11.gif" border=0></p>
<p class=label>
<b>Figure 11. Resource dispensers provide a pool of database connections for high performance and easier programming.</b></p>
<p>
Microsoft Transaction Server includes a resource dispenser that provides a reusable pool of ODBC database connections. Application components make standard ODBC database calls. The ODBC resource dispenser transparently provides fast allocation of new connections from a shared pool, providing a significant performance improvement in a multiuser environment. The ODBC resource dispenser also simplifies the development of robust server applications by automatically including the work of components in transactions.</p>
<h3>Shared Property Manager</h3>
<p>
Many multiuser applications require common access to shared information stored in main memory. Scenarios for this type of function can include:
<ul type=disc>
<li>
Global variables in Visual Basic.<br><br></li>
<li>
Highly volatile data, including stock market information that you may not want to write to disk.</li>
</ul>
<p>
Programming applications that share information in memory across multiple concurrent users can create difficulties, including:
<ul type=disc>
<li>
Locking.<br><br></li>
<li>
Resource management.<br><br></li>
<li>
Name collisions.</li>
</ul>
<p>
Microsoft Transaction Server includes a prebuilt resource dispenser called the Shared Property Manager. The Shared Property Manager enables multiple users to easily access shared global data without complex programming.</p>
<h3>Sample Applications as Learning Tools</h3>
<p>
In order for developers to quickly learn how to build server solutions, Microsoft Transaction Server includes two sample applications: Bank and Hockey.</p>
<h4>Bank</h4>
<p>
Sample Bank is a simple transactional database application that demonstrates how to use Microsoft Transaction Server APIs.</p>
<p>
<img src="mtsrevgd01.gif" border=0></p>
<p class=label>
<b>Figure 12. Bank</b></p>
<h4>Hockey</h4>
<p>
Hockey is a simple multiuser game that shows nontransactional components managing a shared state.</p>
<p>
<img src="mtsrevgd03.gif" border=0></p>
<p class=label>
<b>Figure 13. Hockey</b></p>
<h2><a name="mtsrevgd_main"></a>Mainframe-Class Reliability</h2>
<h3>Traditional Client/Server Development</h3>
<p>
Over the last ten years, businesses have grown accustomed to application development backlogs that can range from a 12 to 18 months to deploy mission-critical client/server applications.</p>
<p>
The typical project begins with an end-user department in an organization needing a new solution. For example, a sales department needs a new order entry system.</p>
<p>
Unless the department has the funding or wherewithal to deploy the application themselves, they rely upon the central Information Technology (IT) organization to build/buy and deliver the solution. The IT department, which is responsible for information as a corporate asset, needs to deploy the solution carefully so that it meets user requirements and protects the integrity of business processes. Lengthy deployment cycles can be costly, but recovering from system failures can be even more costly. This takes time. The end-user department—the Information Technology department's customer—is a "captive" audience, patiently waiting for the new solution.</p>
<h4>Impact of the Internet</h4>
<p>
The growth of the Internet will change this cycle. Most businesses that operate an Internet or intranet site today use it for information publishing. They have learned that deploying a Web site requires more than a one-time cost. The constant pull for new material on the Internet forces businesses to update the information content of their Web sites on a weekly, daily, or even hourly basis. The need to frequently update Web systems will remain constant, even as businesses migrate their use of the Web from publishing information to running online solutions. As online systems migrate to the Web, IT customers will begin to transition beyond internal audiences—end-user departments—to a broader set of external customers. These external customers will not be captive in the same manner as internal audiences. There will be many alternative solutions on the Web. IT competition is literally a mouse-click away, as different companies compete for customers in a given market by using online business applications projected onto the Internet. This will force IT to change the way it builds online solutions.</p>
<h4>Online Applications will require RAD and RAS</h4>
<p>
Online applications will require a combination of Rapid Application Development (RAD) and Reliability, Availability, and Serviceability (RAS). To date, IT managers had only two choices:
<ul type=disc>
<li>
Build solutions quickly,<p class=tl>
—or—</P></li>
<li>
Build slowly, but operate reliably.</li>
</ul>
<p>
Microsoft Transaction Server is the first technology to integrate RAD with mission critical integrity.
<ul type=disc>
<li>
All solutions are built from ActiveX components using RAD tools.<br><br></li>
<li>
All solutions execute under transaction protection, with full rollback and recovery.<br><br></li>
<li>
Transaction support is transparent to the developer.</li>
</ul>
<h3>Automatic Transactions through MS DTC</h3>
<p>
Microsoft Transaction Server is integrated with the MS DTC, a general purpose distributed transaction manager. MS DTC was first released as part of Microsoft SQL Server 6.5 and is included with Microsoft Transaction Server.</p>
<p>
Most high-end mainframe systems use transactions as the basis for their application processing. Transactions provide a way to bundle a set of operations or events into a single unit of execution. A transaction is a collection of events with the following properties:
<ul type=disc>
<li>
<b>Atomicity.</b> This ensures that all of the updates completed under a specific transaction are committed (and made durable) or that they get aborted and rolled back to their previous state.<br><br></li>
<li>
<b>Consistency.</b> This guarantees that a transaction is a correct transformation of the system state. For example, a transaction that debits a checking account always does so by the correct amount.<br><br></li>
<li>
<b>Isolation.</b> This protects concurrent transactions from seeing each other's partial and uncommitted results, which might create inconsistencies in the application state. Resource managers use transaction-based synchronization protocols to isolate the uncommitted work of active transactions.<br><br></li>
<li>
<b>Durability.</b> This means that committed updates to managed resources (such as a database record) survive failures, including communication failures, process failures, and server system failures. Transactional logging even allows you to recover the durable state after disk-media failures.</li>
</ul>
<p>
These properties are sometimes known by their acronym, ACID.</p>
<p>
To users, a transaction is a single event that either happens or doesn't happen. To developers, a transaction allows them to write components that can participate in distributed environments.</p>
<h4>Transactions and Distributed Components</h4>
<p>
Transactions are an essential tool for building online server applications from component software.</p>
<p>
Building solutions from components—a requirement for rapid development and lower development costs—presents challenges in enforcing reliability and solution integrity.</p>
<p>
To date, most business solutions are developed as a monolithic application by a team. The team members all work in the same department or for the same ISV. It is relatively easy for them to integrate the ACID properties into an application because they have a common design and can test through all of the different failure scenarios together.</p>
<p>
But as companies turn to component development, it will become increasingly costly to test and link various failure scenarios together. Solutions will be assembled from prebuilt components developed by different companies.</p>
<p>
<img src="mtsrevgd12.gif" border=0></p>
<p class=label>
<b>Figure 14. Example of an error in a component application</b></p>
<p>
For example, consider a simple bank-funds transfer application assembled from three components—Transfer, Credit, and Debit—that are each built by a different developer:
<ul type=disc>
<li>
<b>Credit</b> knows how to do one thing—add an amount to a banking database.<br><br></li>
<li>
<b>Debit</b> knows how to do one thing—subtract an amount from a banking database.<br><br></li>
<li>
<b>Transfer</b> knows how to do one thing—start credit and start debit.</li>
</ul>
<p>
Transfer begins work. Debit succeeds and subtracts $100 from a database. Credit fails because its computer crashed in the middle of work. Unless the developer of Transfer has programmed what to do if one of the components has failed, the application has just withdrawn $100 from a bank without putting it anyplace. The application is effectively destroying money, which is an example of achieving an incorrect business result!</p>
<p>
Although this scenario may be easy to correct in a three-component application, a more typical online business application involving hundreds of components running across multiple servers will spawn an exponentially increasing number of potential error conditions for the developer to anticipate. A distributed transaction infrastructure is the only way to address these issues in a cost-effective manner.</p>
<p>
<img src="mtsrevgd13.gif" border=0></p>
<p class=label>
<b>Figure 15. Transactions tie the work of distributed components together.</b></p>
<p>
MTS makes transaction management <i>transparent</i> to the component developer. Developers do not have to write <code>begin</code> or <code>end transaction</code> into their application code. They simply declare components to be transactional using the Transaction Server Explorer. A component can participate in the transaction of the component calling it, enabling developers to coordinate the work of many components written in different languages and running on different systems as a single, atomic unit. Since MTS is adding support for industry-standard transaction protocols, components that update databases on UNIX and mainframe systems can also participate in distributed component applications.</p>
<p>
This is a major breakthrough in flexibility and ease of use when compared to previous generations of transaction processing systems.</p>
<h3>Process Isolation</h3>
<p>
Integrating software components purchased from third parties into an existing solution is an important requirement for fast time-to-market, but presents integrity challenges to the server developer.</p>
<p>
Bugs in the new component may corrupt the existing solution. Testing is important, but it cannot always find all problems.</p>
<p>
Microsoft Transaction Server enables multiple components to work together across different packages, with each package operating in its own protected address space in memory.
<ul type=disc>
<li>
Related components can be isolated in their own package, running in its own server process.<br><br></li>
<li>
Data corruption in one component cannot propagate to components in another package.<br><br></li>
<li>
Deploying components into multiple packages is transparent to the original component developer.<br><br></li>
<li>
Transactions can span components running in multiple packages.</li>
</ul>
<p>
This provides developers with a safe mechanism for rapidly integrating new software into existing solutions without compromising mission-critical integrity.</p>
<p>
<img src="mtsrevgd14.gif" border=0></p>
<p class=label>
<b>Figure 16. The same solution, with two deployment options</b></p>
<h3>Automatic Distributed Security Service</h3>
<p>
Microsoft Transaction Server provides a distributed security service for component-based solutions. This security service relies upon Windows&nbsp;NT security to authenticate users, and it maps on top of the Windows&nbsp;NT domain topology.</p>
<p>
MTS provides two complimentary security models—<i>declarative</i> and <i>programmatic</i>.</p>
<p>
Declarative security is automatic and is specified when components are added into a package, without forcing developers to program security code into their applications. Administrators declare which users and groups have access to different parts of a solution by using the Transaction Server Explorer. These users and groups can be mapped to existing Windows&nbsp;NT users and groups without having to code the security into each of the individual components. This enables solution-specific security, even for prebuilt components purchased from third parties.</p>
<p>
For example, a human resources application has two methods:
<ul type=disc>
<li>
<b>view_payroll_table</b><br><br></li>
<li>
<b>change_payroll_table</b></li>
</ul>
<p>
MTS lets you declare that only employees in the human resources department can access <b>view_payroll_table</b>, and only managers can access <b>change_payroll_table.</b></p>
<p>
Programmatic security enables developers to code custom access control directly into their components.</p>
<p>
Microsoft Transaction Server supports predefined security roles, which enables end users to rapidly integrate components from different ISVs into a solution with good security, without forcing programmers to hand-configure the security attributes of each component. Using security roles, ISVs define generic security groups at development time—such as managers and administrators—that restrict access to the appropriate component methods and interfaces. Businesses then rapidly integrate components from different vendors into a solution, mapping predefined security roles to existing Windows&nbsp;NT groups.</p>
<h2><a name="mtsrevgd_more"></a>More Deployment Choices</h2>
<p>
Business managers want to deploy solutions across a wide variety of environments without the cost of maintaining special implementations for each deployment configuration. For example, a business may want to deploy a customer management solution across:
<ul type=disc>
<li>
Mobile computers for sales representatives.<br><br></li>
<li>
A 5-user server in a satellite office.<br><br></li>
<li>
A 200-user server in a department.<br><br></li>
<li>
A 1,400-user server in a division.<br><br></li>
<li>
An Internet implementation accessed directly by customers.</li>
</ul>
<p>
This sort of deployment flexibility has been a problem for server applications because stand-alone and work-group solutions have lacked the server plumbing required to "scale up" to support enterprise workloads, and enterprise-class solutions—usually based on TP monitors—have lacked the small footprint required to "scale down" to support work-group and stand-alone configurations.</p>
<p>
Microsoft Transaction Server enables flexible deployment of solutions across different types of business environments and different system configurations from a common code base.</p>
<h3>Integration with DCOM</h3>
<p>
Microsoft Transaction Server is integrated with DCOM for component-to-component communications across a network.</p>
<p>
DCOM is simply "COM with a longer wire," an evolution of the Component Object Model used in Windows operating systems today. COM is the core object technology for ActiveX. DCOM is:
<ul type=disc>
<li>
Language neutral, enabling components written in COBOL to work with components written in Java.<br><br></li>
<li>
Cross-platform, running on Windows 95, Windows&nbsp;NT, and Solaris today.<br><br></li>
<li>
Open technology, with Microsoft submitting DCOM for licensing on other platforms through the Open Group.</li>
</ul>
<p>
In addition to the Open Group initiative, both Software AG and Digital Equipment Corporation are in the process of licensing DCOM to non-Microsoft platforms, including most major implementations of UNIX. UNIX systems supporting DCOM can be clients to Microsoft Transaction Server applications.</p>
<h3>Integration with Microsoft Internet Information Server</h3>
<p>
Microsoft Transaction Server is tightly integrated with the Microsoft Internet Information Server (IIS), enabling businesses to easily project server solutions over the Internet and intranets.</p>
<p>
IIS is the only Web server that:
<ul type=disc>
<li>
Is integrated with Windows&nbsp;NT Server.<br><br></li>
<li>
Is a comprehensive Web server solution.<br><br></li>
<li>
Makes it easy to develop Web-based applications.</li>
</ul>
<p>
IIS 3.0 introduces Active Server Pages, a technology that makes it easier to integrate server business solutions with HTML Web content. ASP enables Web content creators to:
<ul type=disc>
<li>
Easily make dynamic Web server pages by freely intermixing HTML with in-line script.<br><br></li>
<li>
Separate Web content from business logic.<br><br></li>
<li>
Use any scripting language.<br><br></li>
<li>
Use any HTML authoring tool.<br><br></li>
<li>
Target any browser.<br><br></li>
<li>
Invoke components to run business logic.</li>
</ul>
<p>
<img src="mtsrevgd15.gif" border=0></p>
<p class=label>
<b>Figure 17. IIS and Microsoft Transaction Server integration</b></p>
<p>
HTML content deployed as Active Server Pages can invoke business components running in MTS. This extends MTS scalability and component flexibility to Internet applications, combining RAD and RAS for the Internet.</p>
<h3>Database and Resource Manager Flexibility</h3>
<p>
Microsoft Transaction Server has an open, flexible design that supports multiple types of resource managers for information storage and retrieval, including:
<ul type=disc>
<li>
Relational databases, including Microsoft SQL Server in 1996, and databases from Informix and Sybase in 1997.<br><br></li>
<li>
File systems.<br><br></li>
<li>
Document management systems.</li>
</ul>
<p>
<img src="mtsrevgd16.gif" border=0></p>
<p class=label>
<b>Figure 18. MTS integration with IIS</b></p>
<p>
Any resource manager that supports a DTC transactional protocol will work as a MTS resource manager. MTS currently supports the OLE Transactions protocol. Additional planned support includes:
<ul type=disc>
<li>
XA (Q2 '97).<br><br></li>
<li>
TIP (Transaction Internet Protocol) (Q1 '97).<br><br></li>
<li>
SNA LU 6.2 (Q3 '97).</li>
</ul>
<p>
By providing open interfaces for multiple types of resource managers, MTS provides businesses with deployment flexibility and more options.
<ul type=disc>
<li>
Businesses can continue existing investments in databases while deploying new solutions on MTS.<br><br></li>
<li>
ISVs with custom data stores, including multimedia and image management data stores, can integrate their existing technology with new server solutions.<br><br></li>
<li>
Businesses building new applications running in MTS can enjoy forward compatibility with new types of data stores, including the emerging class of object-relational databases and OLE DB data providers.</li>
</ul>
<h3>Integration with Microsoft SQL Server</h3>
<p>
Although Microsoft Transaction Server supports an open design that can integrate with any type of information store, it works best with Microsoft SQL Server.</p>
<p>
Microsoft SQL Server:
<ul type=disc>
<li>
Is the best database for Windows&nbsp;NT Server, the Internet, and intranets.<br><br></li>
<li>
Reduces the cost and complexity of building, deploying, and managing database applications.</li>
</ul>
<p>
Microsoft SQL Server and Microsoft Transaction Server are integrated through common support for the OLE Transactions protocol, the fast native MTS transaction protocol, and common use of the Microsoft Distributed Transaction Coordinator.</p>
<h3>"Fat" and "Thin" Client Support</h3>
<p>
Microsoft Transaction Server enables businesses to deploy solutions that support both "fat" Win32 clients and "thin" HTML clients at the same time, from the same server solution.</p>
<p>
The "fat" versus "thin" client debate is an example of the type of technology issue that increases deployment risk for IT managers moving to distributed systems. There are strong arguments on both sides of this issue.
<ul type=disc>
<li>
"Fat" clients continue existing investments in desktop resources, applications, and systems, but can represent higher-than-acceptable maintenance and support costs.<br><br></li>
<li>
"Thin" clients—the idea of pulling all application functionality to the server—represent an appealing concept, but are largely unproved in wide-scale product implementations.</li>
</ul>
<p>
Microsoft Transaction Server provides the best server-solution development and deployment environment, working equally well with "fat" and "thin" clients.
<ul type=disc>
<li>
"Fat" clients communicate to MTS solutions through DCOM.<br><br></li>
<li>
"Thin" HTML clients communicate to MTS through HTTP and IIS.</li>
</ul>
<p>
A sample application that Microsoft uses to demonstrate Microsoft Transaction Server, the Adventure Works business solution, shows this capability, with both a Visual Basic client and an HTML client accessing the same functionality on a single server.</p>
<p>
<img src="mtsrevgd17.gif" border=0></p>
<p class=label>
<b>Figure 19. HTML and Win32 clients to the same MTS solution</b></p>
<h3>No Client Footprint</h3>
<p>
Microsoft Transaction Server does not require any special software code running on the client system for either "fat" or "thin" client support.
<ul type=disc>
<li>
Any HTML browser can access MTS applications via HTML, HTTP, and IIS.<br><br></li>
<li>
Any Windows 95 or Windows&nbsp;NT 4.0 Workstation client running DCOM can access MTS applications.</li>
</ul>
<p>
This "footprintless" approach to client integration contrasts sharply with existing middleware products, which require client libraries or client nodes in order to provide integration with the desktop.</p>
<h3>Application Partitioning</h3>
<p>
Microsoft Transaction Server enables businesses to partition solutions across servers, providing enhanced performance and scalability.
<ul type=disc>
<li>
Solutions consist of collections of components.<br><br></li>
<li>
Components are divided into multiple packages.<br><br></li>
<li>
Packages can work with each other across a network through DCOM.<br><br></li>
<li>
This application partitioning is transparent to the component developer.</li>
</ul>
<p>
<img src="mtsrevgd18.gif" border=0></p>
<p class=label>
<b>Figure 20. Solution running on a single server, and partitioned across two servers</b></p>
<p>
For example, a customer management application might consist of components:
<ul type=disc>
<li>
Order management<br><br></li>
<li>
Credit<br><br></li>
<li>
Sales<br><br></li>
<li>
Inventory</li>
</ul>
<p>
These components can be deployed in:
<ul type=disc>
<li>
A single package on a single server.<br><br></li>
<li>
Two packages in a single server.<br><br></li>
<li>
Two packages across two servers.</li>
</ul>
<h2><a name="mtsrevgd_man"></a>Easier Management</h2>
<p>
Businesses have discovered that potential cost savings in building solutions from components are often lost during deployment. MTS is designed to lower the cost and complexity of deploying and managing distributed applications built from components.</p>
<h3>Transaction Server Explorer</h3>
<p>
Microsoft Transaction Server includes the Transaction Server Explorer, a graphical management tool that makes it easier to deploy and manage solutions across a network.</p>
<p>
Transaction Server Explorer provides developers and administrators with a complete view of all the components deployed within a solution.</p>
<p>
<img src="mtsrevgd19.gif" border=0></p>
<p class=label>
<b>Figure 21. Transaction Server Explorer</b></p>
<p>
The Transaction Server Explorer includes point and click wizards for assembling and configuring a solution from prebuilt packages and components.</p>
<h4>Create Packages Easily</h4>
<p>
Microsoft Transaction Server includes a wizard to create packages.</p>
<p>
<img src="mtsrevgd20.gif" border=0></p>
<p class=label>
<b>Figure 22. Microsoft Transaction Server Package Wizard</b></p>
<h4>Add Components Quickly</h4>
<p>
MTS includes a wizard to add components to a package. The wizard either lists all components already registered in the system, or enables the administrator to register new components.</p>
<p>
<img src="mtsrevgd21.gif" border=0></p>
<p class=label>
<b>Figure 23. Component Wizard</b></p>
<h4>Dynamically Add Servers</h4>
<p>
Transaction Server Explorer includes a wizard that enables administrators to export a package to a remote server, dynamically adding servers to a distributed solution.</p>
<h4>Dynamically Add Clients</h4>
<p>
Administrators can remotely add client systems to a distributed solution.</p>
<h4>Configure Transactions</h4>
<p>
Administrators and developers can set the transactional properties of components deployed within a package.</p>
<p>
<img src="mtsrevgd22.gif" border=0></p>
<p class=label>
<b>Figure 24. Transaction dialog box</b></p>
<h4>Configure Security</h4>
<p>
Administrators can configure the security attributes of components and packages.</p>
<h4>Manage Transactions</h4>
<p>
The Transaction Server Explorer includes a GUI utility for monitoring transaction status. Administrators can intervene and resolve transaction outcomes.</p>
<h4>View Transaction Statistics</h4>
<p>
The Transaction Server Explorer includes a GUI utility for tracking transaction performance.</p>
<p>
<img src="mtsrevgd23.gif" border=0></p>
<p class=label>
<b>Figure 25. Transaction Statistics window</b></p>
<h4>View Trace Messages</h4>
<p>
The Transaction Server Explorer includes a GUI utility for viewing trace messages.</p>
<h2><a name="mtsrevgd_prod"></a>Microsoft Transaction Server Product Comparison</h2>
<p>
It is difficult to conduct a comparison of MTS with other server application environments, because no other product combines MTS's integration of component software with transaction processing features.</p>
<p>
Table 3 compares Microsoft Transaction Server with other technologies for deploying server solutions on Internet and Intranets, including Visigenics VisiOrb, Oracle's WebServer middleware product, and BEA System's Tuxedo Transaction Processing Monitor. This comparison is based on information published by the respective vendors on the current implementations of their products. An "X" indicates that the feature is supported by the product.</p>
<p class=label>
<b>Table 3. Product Comparison </b></p>
<table border=1 cellpadding=5 cols=5 frame=below rules=rows>
<tr valign=top>
<td class=label width=37%></td>
<td class=label width=19%><b>Microsoft Transaction Server</b></td>
<td class=label width=16%><b><br>
Visigenics<br>
VisiOrb</b></td>
<td class=label width=14%><b>Oracle<br>
Web<br>
Server</b></td>
<td class=label width=14%><b><br>
BEA Tuxedo</b></td>
</tr>
<tr valign=top>
<td class=label width=37%><b>Easier Application Server Development</b></td>
<td class=label width=19%></td>
<td class=label width=16%></td>
<td class=label width=14%></td>
<td class=label width=14%></td>
</tr>
<tr valign=top>
<td width=37%>Accessible three-tiered application model</td>
<td width=19%>X</td>
<td width=16%>X</td>
<td width=14%>X</td>
<td width=14%>X</td>
</tr>
<tr valign=top>
<td width=37%><b>Support for ActiveX on the server:</b></td>
<td width=19%>X</td>
<td width=16%></td>
<td width=14%></td>
<td width=14%></td>
</tr>
<tr valign=top>
<td width=37%><ul type=disc>
<li>
Visual C++</li>
</ul>
</td>
<td width=19%>X</td>
<td width=16%>X</td>
<td width=14%>X</td>
<td width=14%>X</td>
</tr>
<tr valign=top>
<td width=37%><ul type=disc>
<li>
Visual Basic</li>
</ul>
</td>
<td width=19%>X</td>
<td width=16%></td>
<td width=14%></td>
<td width=14%></td>
</tr>
<tr valign=top>
<td width=37%><ul type=disc>
<li>
Java</li>
</ul>
</td>
<td width=19%>X</td>
<td width=16%>X</td>
<td width=14%>X</td>
<td width=14%>X</td>
</tr>
<tr valign=top>
<td width=37%><ul type=disc>
<li>
COBOL</li>
</ul>
</td>
<td width=19%>X</td>
<td width=16%></td>
<td width=14%></td>
<td width=14%></td>
</tr>
<tr valign=top>
<td width=37%><ul type=disc>
<li>
Borland Delphi</li>
</ul>
</td>
<td width=19%>X</td>
<td width=16%></td>
<td width=14%></td>
<td width=14%></td>
</tr>
<tr valign=top>
<td width=37%><ul type=disc>
<li>
PowerBuilder</li>
</ul>
</td>
<td width=19%>X</td>
<td width=16%></td>
<td width=14%></td>
<td width=14%></td>
</tr>
<tr valign=top>
<td width=37%>Simple programming interfaces with two APIs</td>
<td width=19%>X</td>
<td width=16%></td>
<td width=14%></td>
<td width=14%></td>
</tr>
<tr valign=top>
<td width=37%>Automatic thread and process management</td>
<td width=19%>X</td>
<td width=16%></td>
<td width=14%></td>
<td width=14%></td>
</tr>
<tr valign=top>
<td width=37%>Object instance management</td>
<td width=19%>X</td>
<td width=16%></td>
<td width=14%></td>
<td width=14%></td>
</tr>
<tr valign=top>
<td width=37%>Component packaging</td>
<td width=19%>X</td>
<td width=16%></td>
<td width=14%></td>
<td width=14%></td>
</tr>
<tr valign=top>
<td width=37%>Database connection pool</td>
<td width=19%>X</td>
<td width=16%></td>
<td width=14%>X</td>
<td width=14%>X</td>
</tr>
<tr valign=top>
<td width=37%>Shared Property Manager</td>
<td width=19%>X</td>
<td width=16%>X</td>
<td width=14%></td>
<td width=14%></td>
</tr>
<tr valign=top>
<td width=37%>Sample applications as learning tools</td>
<td width=19%>X</td>
<td width=16%></td>
<td width=14%></td>
<td width=14%></td>
</tr>
<tr valign=top>
<td class=label width=37%><b>Mainframe-Class Reliability</b></td>
<td width=19%></td>
<td width=16%></td>
<td width=14%></td>
<td width=14%></td>
</tr>
<tr valign=top>
<td width=37%>Automatic transactions through DTC</td>
<td width=19%>X</td>
<td width=16%></td>
<td width=14%>program-matic</td>
<td width=14%>program-matic</td>
</tr>
<tr valign=top>
<td width=37%>Process isolation</td>
<td width=19%>X</td>
<td width=16%>X</td>
<td width=14%>X</td>
<td width=14%>X</td>
</tr>
<tr valign=top>
<td width=37%>Distributed security service</td>
<td width=19%>X</td>
<td width=16%></td>
<td width=14%></td>
<td width=14%>X</td>
</tr>
<tr valign=top>
<td class=label width=37%><b>More Deployment Choices</b></td>
<td width=19%></td>
<td width=16%></td>
<td width=14%></td>
<td width=14%></td>
</tr>
<tr valign=top>
<td width=37%>Integration with DCOM</td>
<td width=19%>X</td>
<td width=16%>X</td>
<td width=14%>promised 1997</td>
<td width=14%></td>
</tr>
<tr valign=top>
<td width=37%>Integration with Microsoft Internet Information Server</td>
<td width=19%>X</td>
<td width=16%>X</td>
<td width=14%></td>
<td width=14%></td>
</tr>
<tr valign=top>
<td width=37%>Support for multiple databases and resource managers</td>
<td width=19%>X</td>
<td width=16%></td>
<td width=14%></td>
<td width=14%>X</td>
</tr>
<tr valign=top>
<td width=37%>Integration with Microsoft SQL Server</td>
<td width=19%>X</td>
<td width=16%></td>
<td width=14%></td>
<td width=14%></td>
</tr>
<tr valign=top>
<td width=37%>"Fat" and "thin" client support</td>
<td width=19%>X</td>
<td width=16%>X</td>
<td width=14%>X</td>
<td width=14%>X</td>
</tr>
<tr valign=top>
<td width=37%>No client footprint</td>
<td width=19%>X</td>
<td width=16%></td>
<td width=14%></td>
<td width=14%></td>
</tr>
<tr valign=top>
<td width=37%>Dynamic configuration</td>
<td width=19%>X</td>
<td width=16%>X</td>
<td width=14%></td>
<td width=14%></td>
</tr>
<tr valign=top>
<td class=label width=37%><b>Easier Management</b></td>
<td width=19%></td>
<td width=16%></td>
<td width=14%></td>
<td width=14%></td>
</tr>
<tr valign=top>
<td width=37%><b>Transaction Server Explorer, GUI tool to:</b></td>
<td width=19%>X</td>
<td width=16%></td>
<td width=14%></td>
<td width=14%></td>
</tr>
<tr valign=top>
<td width=37%><ul type=disc>
<li>
Create packages</li>
</ul>
</td>
<td width=19%>X</td>
<td width=16%></td>
<td width=14%></td>
<td width=14%></td>
</tr>
<tr valign=top>
<td width=37%><ul type=disc>
<li>
Install Components</li>
</ul>
</td>
<td width=19%>X</td>
<td width=16%></td>
<td width=14%></td>
<td width=14%></td>
</tr>
<tr valign=top>
<td width=37%><ul type=disc>
<li>
Add Packages</li>
</ul>
</td>
<td width=19%>X</td>
<td width=16%></td>
<td width=14%></td>
<td width=14%></td>
</tr>
<tr valign=top>
<td width=37%><ul type=disc>
<li>
Export Packages across servers</li>
</ul>
</td>
<td width=19%>X</td>
<td width=16%></td>
<td width=14%></td>
<td width=14%></td>
</tr>
<tr valign=top>
<td width=37%><ul type=disc>
<li>
Configure transaction server support</li>
</ul>
</td>
<td width=19%>X</td>
<td width=16%></td>
<td width=14%></td>
<td width=14%></td>
</tr>
<tr valign=top>
<td width=37%><ul type=disc>
<li>
Configure security</li>
</ul>
</td>
<td width=19%>X</td>
<td width=16%></td>
<td width=14%></td>
<td width=14%></td>
</tr>
<tr valign=top>
<td width=37%><ul type=disc>
<li>
Manage transactions</li>
</ul>
</td>
<td width=19%>X</td>
<td width=16%></td>
<td width=14%></td>
<td width=14%>X</td>
</tr>
<tr valign=top>
<td width=37%><ul type=disc>
<li>
Resolve transactions</li>
</ul>
</td>
<td width=19%>X</td>
<td width=16%></td>
<td width=14%></td>
<td width=14%>X</td>
</tr>
<tr valign=top>
<td width=37%><ul type=disc>
<li>
View transaction statistics</li>
</ul>
</td>
<td width=19%>X</td>
<td width=16%></td>
<td width=14%></td>
<td width=14%>X</td>
</tr>
<tr valign=top>
<td width=37%><ul type=disc>
<li>
View trace messages</li>
</ul>
</td>
<td width=19%>X</td>
<td width=16%></td>
<td width=14%></td>
<td width=14%></td>
</tr>
</table><br>
<h2><a name="mtsrevgd_sugg"></a>Suggested Reading</h2>
<p>
In addition to the documentation included with Microsoft Transaction Server, you can also consult the following third-party books for more information about related technologies.</p>
<p>
<i>Transaction Processing: Concepts and Techniques</i><br>
Jim Gray and Andreas Reuter<br>
ISBN 1-55860-190-2</p>
<p>
Morgan Kaufmann Publishers<br>
340 Pine Street, Sixth Floor<br>
San Francisco, CA 94104-3205 USA<br>
(800) 745-7323 or (415) 392-2665<br>
(415) 982-2665 fax</p>
<p>
Shows how large, distributed heterogeneous computer systems can be made to work reliably. It explains how to apply transaction concepts to distributed systems and how to use them to build high-performance, high-availability applications with finite budgets and risk.</p>
<p>
<i>Principles of Transaction Processing for the Systems Professional</i><br>
Philip A. Bernstein and Eric Newcomer<br>
ISBN 1-55860-415-7</p>
<p>
Morgan Kaufmann Publishers<br>
340 Pine Street, Sixth Floor<br>
San Francisco, CA 94104-3205 USA<br>
(800) 745-7323 or (415) 392-2665<br>
(415) 982-2665 fax<br>
E-mail: orders@mkp.com<br>
Web: http://www.mkp.com</p>
<p>
Provides an understanding of the internals of transaction processing systems, how they work, and how best to use them. Includes the architecture of transaction processing monitors, transactional communications paradigms, and mechanisms for recovering from transaction and system failures.</p>
<h3>For More Information</h3>
<p>
For the latest information on Microsoft Transaction Server, check out the Microsoft Transaction Server Web site at <a href="http://www.microsoft.com/transaction/">http://www.microsoft.com/transaction/</a>.</p>
<p>
<i>The information contained in this document represents the current view of Microsoft Corporation on the issues discussed as of the date of publication. Because Microsoft must respond to changing market conditions, it should not be interpreted to be a commitment on the part of Microsoft, and Microsoft cannot guarantee the accuracy of any information presented after the date of publication.</i></p>
<p>
<i>This article is for informational purposes only. MICROSOFT MAKES NO WARRANTIES, EXPRESS OR IMPLIED IN THIS DOCUMENT.</i></p>
</BODY>
</HTML>

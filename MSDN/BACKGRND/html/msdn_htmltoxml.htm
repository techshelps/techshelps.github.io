<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Going from HTML to XML</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_htmltoxml"></a>Going from HTML to XML</h1>
<p>
Charles Heinemann<br>
Microsoft Corporation</p>
<p>
February 12, 1998</p>
<h3>Introduction</h3>
<p>
Extensible Markup Language (XML) is becoming the vehicle for structured data on the Web, fully complementing Hypertext Markup Language (HTML), which is used to present the data. By breaking structured data away from presentation, Web developers can begin to build the next generation of Web applications.</p>
<p>
Currently, Microsoft® Internet Explorer 4.0 supports XML. With Internet Explorer 4.0, Microsoft shipped two XML parsers and an XML Data Source Object (XML DSO) (For more information see the Internet Client SDK documentation in the MSDN™ Library, Platform SDK.), allowing XML data to be presented using the data-binding capability of Dynamic HTML. Internet Explorer 4.0 also supports the XML object model (See the article, <a href="msdn_xmlmodel.htm">"The XML Object Model in Microsoft Internet Explorer 4.0."</a>), which exposes all XML elements as objects, making them programmable through script. The XML object model implemented in Internet Explorer 4.0 tracks the Document Object Model as specified by the World Wide Web Consortium (W3C).</p>
<p>
Learning to author XML and manipulate XML data sources will enable you as an HTML author to supply your Web pages with content that is more intelligent and more dynamic. Marking up data using XML will also enable you to create data sources that can be accessed in a number of different ways for a number of different purposes, making interoperability between applications and your Web site possible.</p>
<h3>Overview of XML</h3>
<p>
Although XML differs from HTML in some fundamental ways, learning to author XML documents does not require a great deal of effort, once you are familiar with HTML. Because HTML and XML both share a common heritage (SGML), their syntax is very similar. As an HTML author, you will already be familiar with many aspects of the XML syntax before you even begin to read any XML code.</p>
<p>
XML, like HTML, is made up of elements. Within HTML, elements are often referred to as "tags." However, a distinction between tags and elements must be made clear, for treating them as one and the same could cause you to run into some problems when creating sound XML documents. A tag is a singular entity that opens or closes an element. For instance, the &lt;P&gt; HTML tag opens a paragraph element. Likewise, the &lt;/P&gt; HTML tag closes a paragraph element. These two tags, plus the content between them, represent the HTML element. A tag is only part of an element, not the element itself.</p>
<p>
Like HTML, XML's purpose is to describe the content of a document. Unlike HTML, XML does not describe how that content should be displayed. Instead, it describes what that content is. Using XML, the Web author can semantically mark up the contents of a document, describing that content in terms of its relevance as data.</p>
<p>
For example, the following HTML element,</p>
<pre><code>&lt;P&gt;The Phantom of the Opera&lt;/P&gt;
</code></pre>
<p>
describes the contents within the tags as a paragraph. This is fine if all we are concerned with is displaying the title <i>The Phantom of the Opera</i> within a Web page. But what if we want to access those words as data? Using XML, we can mark up the title <i>The Phantom of the Opera</i> in a way that better reflects their significance as data:</p>
<pre><code>&lt;film&gt;The Phantom of the Opera&lt;/film&gt;
</code></pre>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>Although XML does not describe a display structure, you can display your XML code using a style sheet language, such as Extensible Stylesheet Language (XSL). For more information concerning XSL, see the Extensible Stylesheet Language page of the Microsoft Site Builder Network Web site (<a href="http://www.microsoft.com/xml/xsl/xslintro.htm">http://www.microsoft.com/xml/xsl/xslintro.htm</a>).</p>
<h3>Authoring XML</h3>
<p>
XML does not limit you to a set library of tags. When marking up documents in XML, you can choose the tag name that best describes the contents of the element. For instance, in the above case, &lt;film&gt; may not be accurate enough. You may need to differentiate between the silent classic, starring Lon Chaney, and the 1989 remake, starring Robert Englund. This can be achieved a number of ways. You could create a more specific name for the element:</p>
<pre><code>&lt;silent-film&gt;The Phantom of the Opera&lt;/silent-film&gt;
</code></pre>
<p>
That would adequately serve your purposes in this particular case. But what if you wanted to access all films, regardless of whether they have sound, and still differentiate between versions of the film? In such a case, referring to the contents as a "silent-film" would not be as useful as referring to it as simply a film. However, if we were to change it back we would be left with the same ambiguities as before.</p>
<p>
One solution is to use an attribute to describe the type. XML allows you to place attributes on elements. The naming of such attributes, just as with tag names, is the domain of the author. Using an attribute, you could describe <i>The Phantom of the Opera</i> as a film and then specify whether that film has sound:</p>
<pre><code>&lt;film sound="no"&gt;The Phantom of the Opera&lt;/film&gt;
</code></pre>
<p>
You are now faced with another dilemma: There is more than one version of the movie with sound. The following element,</p>
<pre><code>&lt;film sound="yes"&gt;The Phantom of the Opera&lt;/film&gt;
</code></pre>
<p>
remains ambiguous. Because XML allows for multiple attributes, however, you can resolve such ambiguities by adding a second attribute:</p>
<pre><code>&lt;film sound="yes" year="1989"&gt;The Phantom of the Opera&lt;/film&gt;
</code></pre>
<p>
The above markup might be a bit more complex than &lt;P&gt;, but we are now able to distinguish when the words "The Phantom of the Opera" refer to one film and when they refer to another. In the future, this could enable the cataloging of such films in a variety of ways.</p>
<h3>Converting HTML to XML</h3>
<p>
Let's now take a look at an HTML document and convert that document into an XML document. The following document describes the contents of a personal video library:</p>
<pre><code>&lt;H1&gt;The Library of Steve Alboucq&lt;/H1&gt;
&lt;TABLE&gt;
  &lt;TBODY&gt;
 &nbsp;&nbsp; &lt;TR&gt;
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;TD&gt;The Phantom of the Opera&lt;/TD&gt;
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;TD&gt;The Phantom of the Opera&lt;/TD&gt;
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;TD&gt;The Phantom of the Opera&lt;/TD&gt;
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;TD&gt;Rope&lt;/TD&gt;
 &nbsp;&nbsp; &lt;/TR&gt;
  &lt;/TBODY&gt;
&lt;/TABLE&gt;
</code></pre>
<p>
This document provides us with information, but that information is not too clear. Does Mr. Alboucq own three copies of the original silent version? Does he own the original version and two remakes? Does he own just the three versions with sound? To answer such questions, let's convert the above HTML document into an XML document:</p>
<pre><code>&lt;library&gt;
  &lt;owner&gt;Steve Alboucq&lt;/owner&gt;
  &lt;films&gt;
 &nbsp;&nbsp; &lt;film sound="no" year="1925"&gt;The Phantom of the Opera&lt;/film&gt;
 &nbsp;&nbsp; &lt;film sound="yes" year="1962"&gt;The Phantom of the Opera&lt;/film&gt;
 &nbsp;&nbsp; &lt;film sound="yes" year="1989"&gt;The Phantom of the Opera&lt;/film&gt;
 &nbsp;&nbsp; &lt;film sound="yes" year="1948"&gt;Rope&lt;/film&gt;
  &lt;/films&gt;
&lt;/library&gt;
</code></pre>
<p>
Looking at the above document, we are now able to tell that Mr. Alboucq owns copies of the original version and two separate remakes.</p>
<h3>The XML Document's Tree Structure</h3>
<p>
Figure 1 represents the structure of the document we just created. An XML document has a single root element, which contains all of the document's other elements:</p>
<p>
<img src="htmltoxml01.gif" border=0></p>
<p class=label>
<b>Figure 1. The structure of an XML document is essentially a tree. The root element is the top-level element (in this case, the &lt;library&gt; element). It's descendants (the other elements) branch out from there. </b></p>
<p>
When authoring XML documents, it is important to remember you are creating a tree structure. XML is not about display; it is about data and its organization.</p>
<h3>Textual Markup</h3>
<p>
In addition to the highly structured data of the &lt;library&gt; example, XML can also be used to mark up text. For instance, the following sentence,</p>
<pre><code>The 1925 version of The Phantom of the Opera, starring Lon Chaney, might have been a bit over the top. However, compared to the 1989 version starring Robert Englund,it's a masterpiece of understatement.
</code></pre>
<p>
could be marked up to make its content more explicit:</p>
<pre><code><span class=cfe><b>&lt;review subject-type="film"&gt;</b></span>The <span class=cfe><b>&lt;year&gt;</b></span>1925<span class=cfe><b>&lt;/year&gt;</b></span> version of <span class=cfe><b>&lt;film sound="no" year="1925&gt;</b></span>The Phantom of the Opera<span class=cfe><b>&lt;/film&gt;</b></span>, starring <span class=cfe><b>&lt;actor&gt;</b></span>Lon Chaney<span class=cfe><b>&lt;/actor&gt;</b></span>, might have been a bit over the top. However, compared to the <span class=cfe><b>&lt;year&gt;</b></span>1989<span class=cfe><b>&lt;/year&gt;</b></span> version starring <span class=cfe><b>&lt;actor&gt;</b></span>Robert Englund<span class=cfe><b>&lt;/actor&gt;</b></span>, it's a masterpiece of understatement.<span class=cfe><b>&lt;/review&gt;</b></span>
</code></pre>
<p>
Marking up text in this fashion could then enable a program to search for documents concerning a specific version of the film, ignoring those concerning other films and other works, such as musicals, which happen to share the same name.</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>Microsoft Internet Explorer 4.0 supports an XML object model (See the article, <a href="msdn_xmlmodel.htm">"The XML Object Model in Microsoft Internet Explorer 4.0."</a>), which allows you to navigate an XML document using script or C++.</p>
<h3>Syntactic Differences with XML</h3>
<ol>
<li>
HTML allows fairly loose structuring in which an end tag, such as &lt;/P&gt;, is optional. XML does not allow such omissions. Remember, an XML document is made up of elements, not tags. Consequently, it requires that all start tags be followed by corresponding end tags.<pre><code>&lt;paragraph&gt;James Stewart is marvelous in the Hitchcock thriller.&lt;/paragraph&gt;
</code></pre>
</li>
<li>
Because all XML elements must be closed, tags without content—and, therefore, without end-tags—must be closed in the following manner:<pre><code>&lt;image url="sample.gif"/&gt;
</code></pre>
<p class=tl>
Along the same lines, empty elements (&lt;film&gt;&lt;/film&gt;) may be marked in the following manner:</P><pre><code>&lt;film/&gt;
</code></pre>
</li>
<li>
You cannot overlap elements. For example, the following code,<pre><code>&lt;actor&gt;Lon &lt;index-name&gt;Chaney&lt;/actor&gt;&lt;/index-name&gt;
</code></pre>
<p class=tl>
is improper XML syntax. The following is correct:</P><pre><code>&lt;actor&gt;Lon &lt;index-name&gt;Chaney&lt;/index-name&gt;&lt;/actor&gt;
</code></pre>
</li>
<li>
All attribute values must be in quotes:<pre><code>&lt;photograph url="summer98.gif" width="300px"/&gt;
</code></pre>
</li>
<li>
Because the content of an XML element is treated as data, white space is not ignored. Therefore,<pre><code>&lt;film&gt;The Phantom of
  the Opera&lt;/film&gt;
</code></pre>
<p class=tl>
is not equivalent to:</P><pre><code>&lt;film&gt;The Phantom of the Opera&lt;/film&gt;
</code></pre>
</li>
<li>
There will be times when you will want certain character data to be treated as such. For instance, if the contents of an XML element consists of some sample XML code, rather than replacing each reserved character with its decimal code equivalent you can simply mark it as character data:<pre><code>&lt;![CDATA[Rope]]&gt;
</code></pre>
<p class=atl>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>It is also good to use CDATA when including script within an XML data source.</p></li>
<li>
XML is case sensitive. The following element,<pre><code>&lt;director&gt;Alfred Hitchcock&lt;/director&gt;
</code></pre>
<p class=tl>
is not equivalent to:</P><pre><code>&lt;DIRECTOR&gt;Alfred Hitchcock&lt;/DIRECTOR&gt;

</code></pre>
</li>
</ol>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Moving from FoxPro 2.x to Visual FoxPro 5.0</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><sup><a name="msdn_movfox"></a></sup>Moving from FoxPro 2.<i>x</i> to Visual FoxPro 5.0</h1>
<p>
Susan Graham<br>
Microsoft Corporation</p>
<p>
January 1997</p>
<h2>Overview</h2>
<p>
Ever since the release of Microsoft® Visual FoxPro™ there has been continuous discussion among Fox developers about the pros and cons of moving FoxPro® 2.x code into the new object-oriented programming (OOP) paradigm. Should one convert the 2.6 code? Should one just throw it all away and rewrite everything? The purpose of this paper is to:
<ul type=disc>
<li>
Give you some issues to think about in your decision-making process.<br><br></li>
<li>
Present several approaches to converting your apps, if that's what you want to do.<br><br></li>
<li>
Provide information about the conversion process. </li>
</ul>
<h2>Convert or Rewrite?</h2>
<h3>If it ain't broke . . . </h3>
<p>
If your FoxPro 2.x application has been running well—it's been through several versions, it's stable, and needs no new functionality—you need to ask yourself if there is really a reason to take the time and effort to migrate that application to Visual FoxPro. However, since the reality of most development projects is that they are never finished, you need to consider the advantages and disadvantages of the conversion process to determine which path is right for your application: convert or rewrite. </p>
<h3>OK, it ain't broke, but . . .</h3>
<p>
You want to move your applications into Visual FoxPro so that you can begin to take advantage of OOP, the new development environment, and the new database features of Visual FoxPro 5.0. </p>
<p>
Most FoxPro version 2.x programs coded in traditional procedural style will run with minor modifications in Visual FoxPro. Conversion is a viable option for some developers. </p>
<p>
Consider making the transition to an OOP programming style if the following conditions are true: 
<ul type=disc>
<li>
Your organization currently participates in a structured, analytical process for new programming projects. <br><br></li>
<li>
You are willing to invest the resources necessary to develop a library of reusable code, without realizing full payback on this investment until after the current project. <br><br></li>
<li>
You want to tap the power of Visual FoxPro event handling, common code syntax, and other benefits associated with OOP. </li>
</ul>
<h2>Issues to Consider</h2>
<p>
Here are some issues to consider before deciding whether to convert: 
<ul type=disc>
<li>
Is your application written in FoxPro (or FoxBase) standard procedural code? <br><br></li>
<li>
Does your application use FLLs? If so, do you have the resources (source code, development language of the FLLs) to recompile them? <br><br></li>
<li>
If you are using third party tools, have they been converted to Visual FoxPro so that you can maintain the same functionality? If not, does Visual FoxPro 5.0 now provide the functionality provided by those tools? <br><br></li>
<li>
Is your application cross platform to MS-DOS®, Unix, or Macintosh? Does it need to continue to be? <br><br></li>
<li>
Will you present this as a 5.0 application (a 2.6 paradigm in a totally new OOP world)? Do you need the Windows® 95 look and feel? <br><br></li>
<li>
Do you and/or your clients have a 32-bit operating system such as Windows 95 or Windows NT? This is a requirement for Visual FoxPro 5.0. <br><br></li>
<li>
Do you need to expand the application? Add new functionality? Do you want to take advantage of the new functionality of Visual FoxPro 5.0 such as ActiveX controls, the event model, data buffering, OLE automation server capability, offline views, outer joins, and so on? </li>
</ul>
<h2>Approaches</h2>
<p>
Once you have decided to migrate your application from FoxPro 2.x to Visual FoxPro, there are three basic approaches you can take: </p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Approach </b></td>
<td class=label width=33%><b>Advantages </b></td>
<td class=label width=34%><b>Disadvantages </b></td>
</tr>
<tr valign=top>
<td width=33%>Minimalist—Compile and run, no conversion </td>
<td width=33%>Least amount of work to get apps running in 5.0<br>
No further development time and effort</td>
<td width=34%>FP 2.6 architecture, not OOP<br>
Old User Interface, not Windows 95 UI<br>
Cost of maintenance/ improvement may be high</td>
</tr>
<tr valign=top>
<td width=33%>Hybrid—Convert and modify </td>
<td width=33%>Old code still usable <br>
Begin to take advantage of new OOP functionality<br>
Take advantage of new VFP 5.0 functionality<br>
UI gets new look and feel (end user sees a difference)</td>
<td width=34%>Mix of 2.6 and 5.0 paradigms<br>
Hard to maintain</td>
</tr>
<tr valign=top>
<td width=33%>Total rewrite</td>
<td width=33%>More powerful design tools<br>
Database features<br>
Tap the power of VFP 5.0, such as event handling, common code syntax, and other benefits associated with OOP<br>
Re-architect your application <br>
Investment of time and money</td>
<td width=34%>OOP learning curve </td>
</tr>
</table><br>
<h3>Approach 1: Minimalist—Compile and Run, No Conversion</h3>
<p>
Your existing FoxPro 2.6 application should compile and run with few problems if you follow these steps: 
<ol>
<li>
Create a new project in Visual FoxPro 5.0. <br><br></li>
<li>
Add your main PRG. (Note: Do not use an SCX as your main program. If you do, Visual FoxPro 5.0 will invoke the Converter.) <br><br></li>
<li>
Build the project. <br><br></li>
<li>
Add files not pulled in by the Project Manager (bitmaps, #includes, etc.). <br><br></li>
<li>
Build your application. </li>
</ol>
<p>
Using this minimal approach allows you to continue running mission critical applications as you take the time to move into the new OOP paradigm. </p>
<h3>Approach 2: Hybrid—Convert and Modify</h3>
<p>
This approach uses the Visual FoxPro Converter to "migrate" your 2.6 screen sets to backward-compatible Visual FoxPro form sets (as opposed to New Event Model form sets). Once screens are converted, continue the conversion so they become "true" Visual FoxPro forms that are able to use the new event model and other features. More on this later. </p>
<h4>Converting FoxPro 2.6 projects</h4>
<p>
Converting from the project level is usually the desirable way to convert an application. Converting a project handles everything at once and really is the only way to change multiple screen sets into a Visual FoxPro form set. The alternative is to convert individual screens, reports, and so on one at a time. This has the advantage of allowing you to move the process along more carefully. It also makes it possible to selectively convert some screens with the Visual conversion, some with the Functional conversion (see below). </p>
<p>
If you have used the Power Tools in FoxPro 2.6, the following FoxPro file types will convert: 
<ul type=disc>
<li>
Labels (.lbx) <br><br></li>
<li>
Queries (.qpx) <br><br></li>
<li>
Menus (.mpx) <br><br></li>
<li>
Reports (.frx) </li>
</ul>
<p>
<b>Reports</b></p>
<p>
DOS reports will only run unconverted, as in FoxPro 2.6 for Windows; you cannot edit DOS reports in Visual FoxPro. </p>
<p>
Genpd.app can be recompiled and run, but Visual FoxPro will not support these printer drivers. The functionality has been replaced in the operating system. </p>
<p>
Take note of the new functionality of the REPORT FORM command. See the Help file for REPORT FORM, ASCII and REPORT FORM, PREVIEW. </p>
<p>
<b>CONVERT.APP</b></p>
<p>
The Convert.app application is installed by default in the Visual FoxPro home directory. Because it would have been impossible to account for all the possible conversion issues, the source code for the compiler is distributed with Visual FoxPro in the \VFP\Tools\Convert directory. You can customize it for your particular needs by setting the system variable _CONVERTER to your version of the Convert.app. </p>
<p>
When you attempt to modify a 2.6 screen or project, Visual FoxPro 5.0 detects the older version and automatically loads Convert.app and displays this screen:</p>
<p>
<img src="movfox_1.gif" border=0></p>
<p>
Even though there is an option to save backup files in a directory named "Old," it is a better idea to work on a copy of your original 2.6 files rather than rely on the \Old directory. The primary reason for this is the path issues that you'll have to deal with when your directory structure is changed to include a top level \Old directory. </p>
<p>
Choosing between Functional or Visual conversions is one of the most important decisions you must make. </p>
<p>
The Functional conversion makes it easier for the developer in the short run, but can require more work to take advantage of the new features of Visual FoxPro 5.0. The Converter makes forms backward compatible, with attributes unique to this type of form (more later). </p>
<p>
The Visual conversion duplicates in Visual FoxPro 5.0 all visual components of a project (forms, buttons, and so on), but none of your existing snippet code (Open, Valid, et cetera.). All the code from the original FoxPro 2.6 snippets is copied to a non-compilable .prg file. You will have to cut and paste your procedural code into the appropriate events and methods of the Visual conversion. But you won't have to modify the converted form to take advantage of the new event model. </p>
<p>
If you choose Functional conversion, the conversion process performs these steps: 
<ol>
<li>
Copies the original project files to a new subdirectory named Oldx in the original .pjx directory and automatically increments x as you convert more projects. <br><br></li>
<li>
Converts the project and all associated screens, reports, and labels to Visual FoxPro format. New forms have the .scx and .sct extensions. Original files are given .s2x and .s2t extensions. <br><br></li>
<li>
Moves code snippets to appropriate event and method code. </li>
</ol>
<p>
The following table summarizes how 2.6 screen events are converted to VFP 5.0. </p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=40%><b>FoxPro 2.6 screen event </b></td>
<td class=label width=60%><b>Converted Visual FoxPro 5.0 event </b></td>
</tr>
<tr valign=top>
<td width=40%>Setup—#Section 1 </td>
<td width=60%>FormSet.Load </td>
</tr>
<tr valign=top>
<td width=40%>Setup—#Section 2 </td>
<td width=60%>Form.Load </td>
</tr>
<tr valign=top>
<td width=40%>Activate </td>
<td width=60%>Form.Activate &amp; FormSet.Activate </td>
</tr>
<tr valign=top>
<td width=40%>Deactivate </td>
<td width=60%>FormSet.Deactivate </td>
</tr>
<tr valign=top>
<td width=40%>Show </td>
<td width=60%>FormSet.ReadShow </td>
</tr>
<tr valign=top>
<td width=40%>When </td>
<td width=60%>FormSet.ReadWhen </td>
</tr>
<tr valign=top>
<td width=40%>Valid </td>
<td width=60%>FormSet.ReadValid </td>
</tr>
<tr valign=top>
<td width=40%>Cleanup </td>
<td width=60%>FormSet.Unload &amp; SPR for procs/functions </td>
</tr>
</table><br>
<p>
The READ keywords CYCLE, LOCK, MOUSE, SAVE, and TIMEOUT are moved to FormSet properties with the names ReadCycle, ReadLock, ReadMouse, ReadSave, and ReadTimeout. </p>
<h4>Form sets and control properties </h4>
<p>
The Converter creates a file with an .spr extension for each converted screen. This file is different from a FoxPro 2.6 .SPR file. In FoxPro 2.x, the .spr file was generated code based on what was found in the .scx. In Visual FoxPro, the .spr file is a "wrapper" file that includes the correct DO FORM command required to run the screen code. Here is an example of the .spr created after converting Laser.scx from the FoxPro 2.6 samples: </p>
<pre><code>*- [CONVERTER] Declare arrays
EXTERNAL ARRAY ltags
EXTERNAL ARRAY rats
EXTERNAL ARRAY studs
EXTERNAL ARRAY titlelist
*- [CONVERTER] Declare variables for record pointers
PUBLIC _iconvLaserGoToPlaceHolder
EXTERNAL PROC laser.scx

<b>DO FORM "laser.scx" NAME _RH21148KX LINKED </b>

*- [CONVERTER] Begin CLEANUP and other procedures from 2.x Form
PROCEDURE setltags
DIMENSION flds(256), ltags(256)
ltags(1) = "Record#"
FOR i = 2 TO 256
 &nbsp;&nbsp; IF LEN(TAG(i-1)) = 0
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i = i - 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DIMENSION ltags(i)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EXIT
 &nbsp;&nbsp; ELSE
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ltags(i) = TAG(i-1)
 &nbsp;&nbsp; ENDIF
ENDFOR
ord = "TITLE"
SET ORDER TO TITLE
SHOW GET ord
*- [CONVERTER] End CLEANUP and other procedures from 2.x Form
</code></pre>
<h4>Using the DO FORM command </h4>
<p>
The DO FORM command has two very useful clauses: NAME and LINKED. The NAME clause specifies a variable or array element with which you can reference the form or form set. However, if you specify a variable that doesn't exist, Visual FoxPro automatically creates it. When you specify an array element, the array must exist before you issue DO FORM. If the variable or array element you specify already exists, its contents are overwritten. </p>
<p>
If you omit the NAME clause, Visual FoxPro creates an object type variable with the same name as the form or form set file. </p>
<p>
Include LINKED to link the form to the variable associated with it so that the form is released when the variable goes out of scope. If you don't include LINKED, a form can still be active, even though there is no object variable associated with the form. </p>
<p>
The Converter places these files in the following locations in the Project Manager:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=46%><b>FoxPro 2.6 files </b></td>
<td class=label width=54%><b>Project Manager tab </b></td>
</tr>
<tr valign=top>
<td width=46%>.prg and .spr files </td>
<td width=54%>Code tab </td>
</tr>
<tr valign=top>
<td width=46%>.scx and .sct files </td>
<td width=54%>Documents tab </td>
</tr>
<tr valign=top>
<td width=46%>.frx and .lbx files </td>
<td width=54%>Documents tab </td>
</tr>
</table><br>
<p>
In the Functional conversion, each converted form is in FoxPro 2.6 READ-compatibility mode. Each form set contains one page frame that contains one page for each read level of the original screen. This format was necessary to account for any and all READ LEVELS your FoxPro 2.6 code might have. </p>
<h4>The WindowType property </h4>
<p>
The FormSet WindowType property identifies the READ compatibility mode of converted forms. If forms are in READ compatibility mode, the WindowType property is either 2 (Read) or 3 (Read Modal), and the form set takes on the READ qualities of a 2.6 screen set. Execution stops when a DO FORM or SHOW command calls the form. </p>
<p>
The WindowType properties that relate to 2.6 screen compatibility are only available with functionally converted 2.6 screens. When screens are converted Visually or are created in Visual FoxPro, this WindowType property only relates to standard Visual FoxPro modeless and modal behavior and cannot be set to 2 and 3. The only time you will see form set WindowType properties with READ capabilities is in a Functionally converted form set. </p>
<h4>Variable scoping in load events </h4>
<p>
In FoxPro 2.6 READ compatibility mode, variables created in the Load event of a form set with WindowType set to 2 or 3 are scoped to the form set and visible to the entire form set, its forms, and its controls. You can control the visibility of variables created in other form set events or methods by using the PRIVATE, PUBLIC, or LOCAL commands. </p>
<p>
Environmental settings are automatically defined in the form set Load event and the current record pointers are saved in public variables during the form set Unload event. The data environment of the form is updated with all appropriate FoxPro 2.6 view environment objects, such as the table aliases, index orders, and relationships. The FoxPro 2.6 generator directives for automatically opening and closing the tables are moved to the AutoOpenTables and AutoCloseTables properties in the DataEnvironment object. </p>
<h4>Mapping</h4>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=49%><b>FoxPro 2.6 screen feature </b></td>
<td class=label width=51%><b>Visual FoxPro feature </b></td>
</tr>
<tr valign=top>
<td width=49%>Screen set </td>
<td width=51%>Form set </td>
</tr>
<tr valign=top>
<td width=49%>Screen </td>
<td width=51%>Form contained in a form set </td>
</tr>
<tr valign=top>
<td width=49%>READ level </td>
<td width=51%>Page contained in a page frame </td>
</tr>
<tr valign=top>
<td width=49%>READ screen mode </td>
<td width=51%>WindowType property = 2 </td>
</tr>
<tr valign=top>
<td width=49%>READ MODAL screen mode </td>
<td width=51%>WindowType property = 3 </td>
</tr>
</table><br>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=45%><b>FoxPro 2.6 screen snippet </b></td>
<td class=label width=55%><b>Visual FoxPro property or event</b></td>
</tr>
<tr valign=top>
<td class=label width=45%><b>Form Level</b></td>
<td width=55%></td>
</tr>
<tr valign=top>
<td width=45%>Open Files </td>
<td width=55%>FormSet.AutoOpenDE </td>
</tr>
<tr valign=top>
<td width=45%>Close Files </td>
<td width=55%>FormSet.AutoCloseDE </td>
</tr>
<tr valign=top>
<td width=45%>Window Name </td>
<td width=55%>FormSet.WinName.Name </td>
</tr>
<tr valign=top>
<td width=45%>Window Title </td>
<td width=55%>FormSet.WinName.Caption </td>
</tr>
<tr valign=top>
<td width=45%>Width </td>
<td width=55%>FormSet.WinName.Width </td>
</tr>
<tr valign=top>
<td width=45%>Height </td>
<td width=55%>FormSet.WinName.Height </td>
</tr>
<tr valign=top>
<td width=45%>Left </td>
<td width=55%>FormSet.WinName.Left </td>
</tr>
<tr valign=top>
<td width=45%>Top </td>
<td width=55%>FormSet.WinName.Top </td>
</tr>
<tr valign=top>
<td width=45%>Center </td>
<td width=55%>FormSet.WinName.AutoCenter </td>
</tr>
<tr valign=top>
<td width=45%>Border </td>
<td width=55%>FormSet.WinName.BorderStyle </td>
</tr>
<tr valign=top>
<td width=45%>Moveable </td>
<td width=55%>FormSet.WinName.Moveable </td>
</tr>
<tr valign=top>
<td width=45%>Close </td>
<td width=55%>FormSet.WinName.Closeable </td>
</tr>
<tr valign=top>
<td width=45%>Icon </td>
<td width=55%>FormSet.WinName.Icon </td>
</tr>
<tr valign=top>
<td width=45%>HalfHeight Title Bar </td>
<td width=55%>FormSet.WinName.HalfHeightCaption </td>
</tr>
<tr valign=top>
<td width=45%>Color </td>
<td width=55%>FormSet.WinName.BackColor </td>
</tr>
<tr valign=top>
<td width=45%>Wallpaper </td>
<td width=55%>FormSet.WinName.Picture </td>
</tr>
<tr valign=top>
<td width=45%>Minimize </td>
<td width=55%>FormSet.WinName.MinButton </td>
</tr>
<tr valign=top>
<td width=45%>Font </td>
<td width=55%>FormSet.WinName.FontName/FontSize,Fontbold </td>
</tr>
<tr valign=top>
<td width=45%>Environment </td>
<td width=55%>FormSet.WinName.DataEnvironment </td>
</tr>
</table><br>
<h4>Modifying 2.6 reports</h4>
<p>
You must convert FoxPro 2.6 reports (.frx files) to Visual FoxPro reports in order to access files in the Report Designer and to add Visual FoxPro functionality. </p>
<p>
To convert a FoxPro 2.6 report, use the MODIFY REPORT command. The conversion process performs these steps: 
<ol>
<li>
Adds a user field to the .frx file. <br><br></li>
<li>
Changes any Memo fields from 10 bytes to 4 bytes. <br><br></li>
<li>
Adds records to support the data environment of the report. FoxPro 4.2.6 environment records convert to data environment records. <br><br></li>
<li>
Sets the AutoOpenTables and AutoCloseTables properties of the Data Environment and the Destroy event of the new report for backward compatibility with the ENVIRONMENT clause of the FoxPro 2.6 REPORT command.</li>
</ol>
<p>
If the FoxPro 2.6 report was created without an ENVIRONMENT clause, the AutoOpenTables and AutoCloseTables properties of the converted report are set to false (F). </p>
<p>
If the FoxPro 2.6 report was created with an ENVIRONMENT clause, the AutoOpenTables and AutoCloseTables properties of the converted report are set to true (T). The Destroy event of the converted report contains the following code: </p>
<pre><code>THIS.OpenTables &amp;&amp; Opens all the tables 
THIS.Init &amp;&amp; Runs the Init code of the converted report's 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; DataEnvironment
</code></pre>
<p>
After converting a report, Visual FoxPro opens the Report Designer so you can add Visual FoxPro functionality to the converted report. </p>
<h4>Gotchas with forms</h4>
<p>
After you convert a FoxPro 2.6 screen (.scx) file, you should check for the following conditions: 
<ul type=disc>
<li>
READ statements with both a MODAL and DEACTIVATE clause. Visual FoxPro processes both these clauses. <br><br></li>
<li>
Conflicting control, object, form, and variable names.<br><br></li>
<li>
Controls under shapes. In FoxPro 2.6, the positions of shapes has no effect on other controls. In converted FoxPro 2.6 screens, shapes are behind all other controls and invisible buttons are always on top of all other controls. <br><br></li>
<li>
UDFs and other code that might be superseded by new Visual FoxPro commands or functions. HOME(&nbsp;) and OLDVAL(&nbsp;) are new Visual FoxPro built-in functions. Check the Help file for further information. <br><br></li>
<li>
Macro substitutions. Replace macro substitutions in the Properties window with variable assignments. For example, a PushButton prompt in FoxPro 2.6 Screen Builder that contains &amp;lcprompt is converted to ="&amp;lcprompt" and must be changed to =lcprompt. <br><br></li>
<li>
In the setup code of a FoxPro 2.6 form you can prevent the creation of the WINDOW by issuing a RETURN. <pre><code>IF somecriteria
RETURN
ENDIF
</code></pre>
</li>
<li>
In Visual FoxPro you must issue a RETURN .F. in order to cancel the instantiation of the form. <pre><code>IF somecriteria&nbsp;&nbsp;&nbsp; 
RETURN .F.
ENDIF
</code></pre>
</li>
<li>
Clauses in snippets to "fool" Genscrn.prg won't convert. This includes code generated by Genscrnx.prg, a freeware code generator for FoxPro 2.6 screens. It is recommended that screens taking advantage of such code be recreated in Visual FoxPro. <br><br></li>
<li>
Generator directives. The code generated by the Converter is included in the new form during the conversion, but the code becomes static, so changes in the #INCLUDE file will not be reflected in the new Visual FoxPro form. In other words, in FoxPro 2.6, when you had a file to #INSERT, any changes you made to that file would be reflected each time you regenerated the .spr. In Visual FoxPro 5.0, the file is converted only once. Subsequent changes to the file won't be reflected in the form. You have to make the changes directly in the load snippet. During the conversion, the #INSERT code is copied into the method for the snippet. The #INCLUDE cannot contain procedural code. It can only contain precompiler directives (#DEFINEs, #Ifs, et cetera). Be sure to copy #DEFINEs into an .H file and use the #INCLUDE directive to specify the .H. file. </li>
</ul>
<h3>Post Conversion—Extending a Functionally Converted Form</h3>
<p>
You can completely change converted FoxPro 2.6 screens to the Visual FoxPro event model: 
<ol>
<li>
Change the WindowType property from 2 (Read) to 0 (Modeless), or from 3 (Read Modal) to 1 (Modal). <p class=atl>
<b><B>Note</B>&nbsp;&nbsp;&nbsp;</b>When you make this change, the READ compatibility properties and events are no longer available and the WindowType setting cannot be changed back.</p></li>
<li>
If you have a single form, move FormSet event code to the matching or appropriate form events and remove the FormSet. <br><br></li>
<li>
Move code from the READ-compatibility events to the form events and methods that are now available, taking event firing sequences into account. <br><br></li>
<li>
Change CLEAR READ to RELEASE THISFORMSET or RELEASE THISFORM. <br><br></li>
<li>
Change SHOW GET to &lt;object&gt;.Refresh. <br><br></li>
<li>
Change SHOW GETS to THISFORM.Refresh or THISFORMSET.Refresh. <br><br></li>
<li>
Change SHOW GET for List and Combo boxes to &lt;object&gt;.Requery. <br><br></li>
<li>
Move READ SHOW and READ WHEN to the form set Load event. <br><br></li>
<li>
Move READ ACTIVATE and READ DEACTIVATE to the form set Activate and Deactivate events. <br><br></li>
<li>
Move READ VALID to the QueryUnload event. <br><br></li>
<li>
Use copy and paste to move all objects from the page to the form itself. <br><br></li>
<li>
Remove extraneous page and page frame controls. <br><br></li>
<li>
Move parameters from the screen Load event to the Init event of the form. <br><br></li>
<li>
Adjust scoping of variables in events or methods, which are private by default, by using the PUBLIC, PRIVATE, or LOCAL commands or by adding properties to the form. <br><br></li>
<li>
Change form-level variables to user-defined form properties. <br><br></li>
<li>
Create form methods for form-specific procedures and functions. <br><br></li>
<li>
Make all data sessions private. </li>
</ol>
<p>
To run the form directly, move code from the generated .spr file to appropriate methods in the form so you can run it with the DO FORM command. </p>
<h4>Moving a Foundation READ into Visual FoxPro</h4>
<p>
In FoxPro 2.6, the foundation READ was used to emulate event-driven programming by providing an event loop and handler. In Visual FoxPro, you can take advantage of the native event loop by converting your foundation READs. </p>
<p>
Replace any foundation READ in the main program with a READ EVENTS command. For example, include a READ EVENTS command in a .prg program that runs your main form or form set. </p>
<p>
Place a CLEAR EVENTS command in the form, menu, or program event that ends the program. For example, assign a CLEAR EVENTS command to the Exit menu item. </p>
<p>
You may have code that closes things such as tables and windows neatly. When you move into the new event model you won't need any of this code, because Visual FoxPro handles it all for you. </p>
<p>
Also, check the settings of the form set WindowType property for your converted screens. In FoxPro 2.6, you coordinated screens through READ and READ MODAL statements. These statements are converted to the WindowType property when you convert your files. For backward compatibility, the property is automatically set to 2 or 3, depending on the READ mode of the original screen. To enable full event model functionality once you've converted foundation READs, change the READ compatibility mode of screens, remove extra pages and page frames, and change form methods. </p>
<h4>Other Gotchas</h4>
<p>
<b>User Interface </b></p>
<p>
In Visual FoxPro, the TAB key navigates between controls. To move through options in a list box, use the arrow keys. </p>
<p>
Some hot keys have changed to conform with the Windows 95 user interface guidelines. </p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>FoxPro 2.6 </b></td>
<td class=label width=25%><b>Visual FoxPro </b></td>
<td class=label width=50%><b>Definition or difference </b></td>
</tr>
<tr valign=top>
<td width=25%>n/a </td>
<td width=25%>CTRL+N </td>
<td width=50%>Create a new file </td>
</tr>
<tr valign=top>
<td width=25%>CTRL+N </td>
<td width=25%>CTRL+O </td>
<td width=50%>Add a record to a Browse window </td>
</tr>
<tr valign=top>
<td width=25%>CTRL+O </td>
<td width=25%>CTRL+E </td>
<td width=50%>DO program from within edit window </td>
</tr>
</table><br>
<p>
<b>Language </b></p>
<p>
FoxPro 2.6 ignores anything longer than 10 characters, but Visual FoxPro supports and recognizes the longer variable names. If you took advantage of this FoxPro 2.6 "feature," you need to modify your code. To see the difference, run this code in FoxPro 2.6 and then in Visual FoxPro: </p>
<pre><code>clear
store "hello" to clcustomer1
?clcustomer1
?clcustomer
store "goodbye" to clcustomer2
?clcustomer2
?clcustomer
</code></pre>
<p>
Visual FoxPro also supports longer file names. In FoxPro 2.6 you could have a table called Mynewtab.dbf and this command would work fine: USE MYNEWTABLE. In Visual FoxPro 5.0, this command used on the same file will generate a "file does not exist" error. </p>
<p>
There are now 32767 work areas! This affects code that loops through work areas (up to 225). Use AUSED(&nbsp;) instead. Note that this affects SELECT(1). See what you get by issuing this command in FoxPro 2.6 and Visual FoxPro 5.0. </p>
<p>
<b>Table and database differences</b></p>
<p>
Visual FoxPro distinguishes between tables and databases. Although FoxPro 2.6 tables are fully functional in Visual FoxPro, if you modify the table structure of FoxPro tables to take advantage of any of the new Visual FoxPro 5.0 table features like acceptance of null values, they are saved as Visual FoxPro tables. Note that if you merely change things like field size, field names, or only add or delete fields the table is maintained as a FoxPro 2.6 file. </p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>FoxPro 2.6 table structure feature or functionality </b></td>
<td class=label width=50%><b>Visual FoxPro structure feature or functionality </b></td>
</tr>
<tr valign=top>
<td width=50%>Character field with NOCPTRANS characteristic </td>
<td width=50%>Character (BINARY) field type </td>
</tr>
<tr valign=top>
<td width=50%>Date fields </td>
<td width=50%>Date data type, DateTime data type </td>
</tr>
<tr valign=top>
<td width=50%>General field size </td>
<td width=50%>Now 4 bytes </td>
</tr>
<tr valign=top>
<td width=50%>Memo field size </td>
<td width=50%>Now 4 bytes </td>
</tr>
<tr valign=top>
<td width=50%>Memo field with NOCPTRANS characteristic </td>
<td width=50%>Memo (BINARY) field type </td>
</tr>
<tr valign=top>
<td width=50%>Numeric fields </td>
<td width=50%>Currency data type, Double field type, Float field type, Integer field type, or Numeric data type </td>
</tr>
<tr valign=top>
<td width=50%>OLE data in a General field </td>
<td width=50%>OLE Bound control </td>
</tr>
</table><br>
<p>
The structure of Visual FoxPro project (.pjx), screen (.scx), report (.frx), and label (.lbx) files differ from the structure of FoxPro 2.6 files. For details on the structure of Visual FoxPro table files created in the Project Manager, Form Designer, Report Designer, and Label Designer, see Table Structures of Table Files. The filespec directory contains reports you can print out that have specific details of the structures of Visual FoxPro, as well as FoxPro 2.x, tables. </p>
<p>
<b>Null values</b></p>
<p>
Visual FoxPro tables can accept null values. To prevent errors generated by attempts to store null values to FoxPro 2.6 variables or to Visual FoxPro controls, initialize variables or arrays. To prevent users from attempting to store null values to tables, you can disable the NULL entry key combination by using the following statement: </p>
<pre><code>ON KEY LABEL CTRL+0 *
</code></pre>
<h4>Views in Visual FoxPro</h4>
<p>
Visual FoxPro allows you to use views as you would tables or queries. If you build a view in Visual FoxPro without qualifying the table name to a database, you'll get an error when you try to modify the view in the View Designer. To ensure that you can use or modify views in all versions of Visual FoxPro, use CREATE SQL VIEW with the FROM clause as in the following example: </p>
<pre><code>FROM testdata!products&nbsp;&nbsp;&nbsp; &amp;&amp; testdata is the database name
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; products is the table name
</code></pre>
<p>
When you specify the source this way, Visual FoxPro searches for the table both in the open database list, including the current and any non-current databases, and in the default search path for the table. </p>
<h4>Converting Tables</h4>
<p>
Visual FoxPro does not change the structure of FoxPro tables unless you add the table to a database or add a new data type or enable acceptance of null values. Once you change the structure of a table by adding a new data type such as DateTime, or by enabling null values in a field, Visual FoxPro modifies the table file structure, making the file unrecognizable to FoxPro 2.6. </p>
<p>
You can create a FoxPro 2.6 table from a Visual FoxPro table by using the COPY TO command with the TYPE clause and the FOX2X keyword, as in the following example: </p>
<pre><code>* A Visual FoxPro table
USE vfptable.dbf
* Creates a FoxPro 2.6 table
COPY TO fp26tabl.dbf TYPE FOX2X
</code></pre>
<p>
To copy a FoxPro 2.6 table structure from a Visual FoxPro table, use COPY TO and the NEXT clause, as in the following example. </p>
<pre><code>* Creates an empty FoxPro 2.6 table
COPY TO fp26tabl.dbf NEXT 0 TYPE FOX2X
</code></pre>
<p>
Visual FoxPro changes all null values in NULL-enabled fields to either 0 or blank, and creates a structure recognized by FoxPro 2.6. Visual FoxPro also converts Integer, Double, and Currency types back to Numeric, and changes DateTime to Date type. </p>
<h3>Approach 3: Total Rewrite</h3>
<p>
Well, not exactly total. You can, of course, keep the data structures and business rules you have already developed. But you will want to take the time to redesign your application to take advantage of OOP structure and functionality. This is the most costly (and time consuming) approach, but it is also the most powerful and flexible. This approach allows you to take advantage of all the new features of Visual FoxPro 5.0. In addition, you will find that you can eliminate hundreds (thousands?) of lines of code because Visual FoxPro 5.0 has built-in functionality that you once had to code yourself. </p>
<p>
Many developers claim unequivocally that a total rewrite is the way to go, especially with applications that are simple. With the new features of Visual FoxPro 5.0 you will find elegant solutions to problems you needed "kludges" for in FoxPro 2.6. You will begin to develop class libraries to use again and again in future application development. </p>
<p>
The best investment of time and resources will be in the design phase of your new application. Learn OOP techniques and learn how they work in Visual FoxPro. </p>
<p>
Take advantage of one of Visual FoxPro 5.0's coolest new features to use information from your 2.6 application: Visual FoxPro 5.0's ability to be a custom OLE Server will enable you to use your 2.6 application to provide information to another application. </p>
<p>
The Laser sample that ships with FoxPro 2.6 is a laser disk library manager program. The main program is Laser.spr. To turn this into an OLE object callable from Visual Basic or Microsoft Excel, create a new project in a new main program: </p>
<pre><code>ox = create("laser")
define class laser as custom olepublic
 &nbsp;&nbsp; proc init
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cd d:\fpw26\sample\laser&nbsp;&nbsp;&nbsp; &amp;&amp; change dir to the right place
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set path to data
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.application.visible = .t.&nbsp;&nbsp; &amp;&amp; make us visible.
 &nbsp;&nbsp; proc doit
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; do laser.spr
enddefine
</code></pre>
<p>
Add the new Laser.spr to the project. You'll need to manually add any supporting files, like .bmp files, to the project. Then, you can try: </p>
<pre><code>OX = Createobject("laser.laser")
</code></pre>
<p>
and then: </p>
<pre><code>OX.Doit.
</code></pre>
<p>
The laser application is now running as an OLE Automation server! If you modify the Laser.spr program so that it doesn't close the LASER table when the READ is finished, then you can query what laser disc title was chosen: </p>
<pre><code>?ox.application.eval("title")
</code></pre>
<h2>Summary</h2>
<p>
If your application is working well in 2.6, you don't need to add features to your application, and your investment in time and cost of upgrading, you might wish to stay with FoxPro 2.6. However, you will want to move your applications into Visual FoxPro so that you can begin to take advantage of all its new features and functionality. In addition to the features that came with Visual FoxPro 3.0 (OOP, database features, and more.). Visual FoxPro 5.0 adds improved performance, the new development environment, and new database features of Visual FoxPro 5.0</p>
</BODY>
</HTML>

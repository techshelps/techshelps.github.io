<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>An Introduction to the Dynamic HTML Object Model</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_ovdynom"></a>An Introduction to the Dynamic HTML Object Model </h1>
<p>
Michael Wallent<br>
Microsoft Corporation</p>
<p>
April 8, 1997<br>
Revised September 30, 1997 (added section "Changing the Text on the Page"</p>
<p>
"Object model." The mere mention of the term is enough to strike fear and loathing into the heart of the staunchest C programmer. An object model? Dynamic HTML? What good is that? Well, if you want to build pages that are more interactive, higher performance, and more fun, then read on. If you are content with Hypertext Markup Language (HTML) the way it is, then please go to the special section "Repairing 8086 Processors: Building a Successful Business with the Technology of Yesterday."</p>
<p>
You may even ask, "Dynamic HTML—hmm&nbsp;.&nbsp;.&nbsp;.&nbsp;is that like the &lt;BLINK&gt; tag?" Well, no. Dynamic HTML, delivered with Internet Explorer 4.0, brings life to previously static pages. (Whereas the &lt;BLINK&gt; tag brought annoyance to previously non-annoying pages.)</p>
<p>
Why is there an object model, and why should you care? Web authors are a creative lot. Using the technology available, they managed to produce some pretty impressive sites. It's a wonder what negative margins and small refreshing frames will do. This creativity was really needed, because the original HTML technology wasn't really designed for dynamic applications (what do physicists from Switzerland know about being dynamic anyway?)</p>
<h3>It's a Control Thing</h3>
<p>
Call us crazy, but we thought that the next big thing in HTML wasn't going to be a new tag. Instead, it would be a new way to control all of the tags that you already have, know, and love. Before we attempt to take credit for the whole idea of HTML pages having an object model, we have a confession: Previous versions of Internet Explorer (and yes, Netscape Navigator) had an object model, too. However, the object model in Internet Explorer 4.0 is a means to an end. That end is Dynamic HTML. </p>
<p>
The Dynamic HTML object model delivers four key innovations that allow Web authors to create truly dynamic pages:
<ul type=disc>
<li>
Access to all page elements<br><br></li>
<li>
Instant page update<br><br></li>
<li>
Full event model<br><br></li>
<li>
Changing the text on the page</li>
</ul>
<p>
Before we dive deeper, it's important to explain a key feature of Dynamic HTML. Changes can be made to the page at any time: before load, during load, and after load; when the user clicks on a button; when the user moves his or her mouse; when it's 12:30 A.M. Whenever.</p>
<p>
Now, let's take a closer look at each one of these innovations.</p>
<h3>Access to All Page Elements</h3>
<p>
Using Internet Explorer 3.<i>x</i> or the Netscape browsers, a select set of page elements can be accessed from script. Anchors, forms, applets, form elements, and images all can be accessed in script. However, if you want to build a dynamic table of contents, and you need to go through all of the headings on the page—well, it can't be done. The headings aren't accessible.</p>
<p>
With the Dynamic HTML object model, this is no longer the case. Every single element on the page is accessible. The document features a collection called the all collection. Guess what this contains? That's right, it's eponymous; it contains all of the elements on the page. This collection is indexed by name and ID. In the following chunk of code, I will get the H1-level heading with ID MyH1.</p>
<pre><code>&lt;H1 id=MyH1 style="font-weight: normal"&gt;Dynamic HTML&lt;/H1&gt;
&lt;script language=JavaScript&gt;
function findMyH1() {
 &nbsp;&nbsp;&nbsp; var e;
 &nbsp;&nbsp;&nbsp; e = document.all("MyH1");
}
&lt;/script&gt;
</code></pre>
<p>
Even though this is relatively easy, there is an even easier way to access elements. Just use their ID or name directly.</p>
<pre><code>&lt;script language=JavaScript&gt;
function findMyH1() {
 &nbsp;&nbsp;&nbsp; var e;
 &nbsp;&nbsp;&nbsp; e = document.all("MyH1");
 &nbsp;&nbsp;&nbsp; if (e == MyH1) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alert("Accessing all elements is easy");
 &nbsp;&nbsp; }
}
&lt;/script&gt;
</code></pre>
<h3>Instant Page Update</h3>
<p>
Now that it's possible to get to all of these page elements, what can we do with them? Elements have attributes and styles, which can be modified at any time. To change the font style of my heading, the code is trivial.</p>
<pre><code>&lt;script language=JavaScript&gt;
function changeMyH1() {
 &nbsp; MyH1.style.fontStyle = "Italic";
}
&lt;/script&gt;
</code></pre>
<p>
When that script executes, the page is updated instantly. It does not have to be reloaded, it just changes automatically. Any attribute or style that you can specify in HTML can be changed dynamically, at any time, with the Dynamic HTML object model.</p>
<h3>Full Event Model</h3>
<p>
Graphical-user-interface (GUI) applications are tied together with their event model. One of the key shortcomings of previous HTML object models was that the event model was incomplete. Only a small set of events was available for a select set of tags. With the Dynamic HTML object model, all elements source a full set of mouse, keyboard, focus, and specialized events.</p>
<p>
To continue with our H1 example, let's extend it so that the heading will italicize when we mouse over it. To do this, I need only to trap the mouseover and mouseout events on my H1 heading.</p>
<pre><code>&lt;H1 id=MyH1 style="font-weight: normal" 
 onmouseover="makeItalic();" 
 onmouseout="makeNormal"&gt;
 Dynamic HTML&lt;/H1&gt;

&lt;script language=JavaScript&gt;
function makeItalic() {
 &nbsp; MyH1.style.fontStyle = "Italic";
}
function makeNormal() {
 &nbsp; MyH1.style.fontStyle = "Normal";
}
&lt;/script&gt;
</code></pre>
<p>
Now, when the mouse moves over the H1 heading, it will italicize; when it moves away, the H1 heading will return to normal. </p>
<h3>Changing the Text on the Page</h3>
<p>
Not only can we change the attributes of elements on the page, we can change the actual HTML on the page, on the fly. There are four interesting properties to enable this:</p>
<p class=indent>
<b>innerHTML<br>
innerText<br>
outerHTML<br>
outerText</b></p>
<p>
The <i>inner</i> properties only apply to container elements—such as DIV, SPAN, and H1—and can be used to replace the actual HTML inside of a container. The <i>outer</i> properties apply to all HTML tags in the body of the document, and can be used to replace an entire element and its contents.</p>
<p>
The <b>innerText</b> and <b>outerText</b> properties return a textual representation of the HTML, without the HTML tag information. The <b>innerHTML</b> and <b>outerHTML</b> properties return the actual HTML string, with all of the embedded HTML information.</p>
<p>
Using the <b>innerHTML</b> or <b>outerHTML</b> properties tells Internet Explorer to treat the new string and HTML, and to parse it accordingly. Using the <b>innerText</b> or <b>outerText</b> methods tells Internet Explorer to insert the supplied string literally into the document, without parsing it.</p>
<p>
These properties give access to the underlying HTML and also the plain text of the elements on the page.</p>
<p>
To extend our H1 example even further, we will use the <b>innerHTML</b> property to dynamically change the contents of the H1 heading.</p>
<pre><code>&lt;H1 id=MyH1 style="font-weight: normal" onclick="changeH1();" &gt;
Dynamic HTML&lt;/H1&gt;

&lt;script language=JavaScript&gt;
function changeH1() {
 &nbsp; // Now, I will replace that text, with some new text
 &nbsp; MyH1.innerText = "New Title";
}
&lt;/script&gt;
</code></pre>
<p>
In the previous case, we simply pasted plain text into the document, so we used the <b>innerText</b> method. However, if we use the <b>innerHTML</b> property, our inserted text can actually be new HTML tags. </p>
<pre><code>&lt;script language=JavaScript&gt;
function changeH1() {
 &nbsp; var r;
 &nbsp; // Now, I will replace that text, with some new text
 &nbsp; MyH1.innerHTML = "&lt;MARQUEE&gt;Dynamic HTML is &lt;I&gt;Cool&lt;/I&gt;&lt;/MARQUEE&gt;";
}
&lt;/script&gt;
</code></pre>
<p>
Try that out for fun.</p>
<p>
With the Dynamic HTML object model, you can turn pages that were as fun as a Swiss watch into pages that are as fun as a good piece of Swiss chocolate.</p>
</BODY>
</HTML>

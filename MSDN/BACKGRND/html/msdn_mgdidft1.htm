<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Microsoft Windows CE Graphics Features</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_mgdidft1"></a>Microsoft Windows CE Graphics Features</h1>
<p>
Jon Christiansen</p>
<h2>Introduction</h2>
<p>
In the Microsoft® Windows® CE operating system, as in the other Microsoft Win32® operating systems, the subsystem that controls the display of text and graphics is called the Graphics Device Interface (GDI). Like its desktop counterparts, the Windows CE GDI draws lines, curves, closed figures, text, and bitmapped images on display devices and printers.</p>
<p>
In version 2.0 of Windows CE, GDI functionality has been expanded to include many of the advanced graphical features available in other Win32 application programming interfaces (APIs). No longer is world-class graphical display limited to desktop computers; GDI allows Windows CE–based devices to create graphics that are both attractive and useful.</p>
<p>
This article discusses each major feature of GDI. Special attention is given to features that have been added or substantially modified since Windows CE version 1.0. The article also discusses how each feature differs, if at all, from the standard Win32 API.</p>
<p>
In this paper, GDI will refer only to the Window CE subsystem, not to the equivalent subsystem of other Windows platforms.</p>
<h2>GDI Features</h2>
<h3>Device Contexts</h3>
<p>
A device context (DC) is a structure that GDI uses to store information about the graphical objects that govern the appearance of text and graphics on a display or printing device. The type of pen, brush, font, colors, and bitmap that will be used to create a display on a particular device are all stored in a device context.</p>
<p>
Windows CE supports the device contexts described in Table 1.</p>
<p class=label>
<b>Table 1. Device Contexts</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=29%><b>Device Context Type</b></td>
<td class=label width=71%><b>Purpose</b></td>
</tr>
<tr valign=top>
<td width=29%>Display</td>
<td width=71%>Supports drawing operations on a video display</td>
</tr>
<tr valign=top>
<td width=29%>Printer</td>
<td width=71%>Supports drawing operations on a printer</td>
</tr>
<tr valign=top>
<td width=29%>Memory</td>
<td width=71%>Supports drawing operations on a device-independent bitmap</td>
</tr>
</table><br>
<p>
An application can never access a device context directly; it operates on the structure indirectly by calling functions that have access to the DC.</p>
<p>
A handle to a device context can be obtained by calling the <b>BeginPaint</b> function. Device contexts can be retrieved by the <b>GetDC</b> function, and created with the <b>CreateDC</b> and <b>CreateCompatibleDC</b> functions.</p>
<h4>Version 2.0 additions</h4>
<p>
Memory device contexts have been improved in version 2.0, so that they are now fully compatible with display DCs. Print DCs are new to version 2.0.</p>
<h4>Differences from other Win32 platforms</h4>
<p>
Windows CE does not support information device contexts.</p>
<h3>Shape Drawing and Filling</h3>
<p>
In addition to simple line drawing, GDI can draw a wide set of shapes using the following functions described in Table 2.</p>
<p class=label>
<b>Table 2. Shape Functions</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Function Name</b></td>
<td class=label width=75%><b>Purpose</b></td>
</tr>
<tr valign=top>
<td width=25%><b>Ellipse</b></td>
<td width=75%>Draws and fills an ellipse.</td>
</tr>
<tr valign=top>
<td width=25%><b>Polygon</b></td>
<td width=75%>Draws and fills a user-defined shape</td>
</tr>
<tr valign=top>
<td width=25%><b>Polyline</b></td>
<td width=75%>Draws a line formed from a series of connected straight-line segments. The resulting polyline can approximate almost any shape</td>
</tr>
<tr valign=top>
<td width=25%><b>Rectangle</b></td>
<td width=75%>Draws and fills a rectangle</td>
</tr>
<tr valign=top>
<td width=25%><b>RoundRect</b></td>
<td width=75%>Draws and fills a rectangle with rounded corners</td>
</tr>
</table><br>
<h4>Version 2.0 additions</h4>
<p>
In Version 2.0, the polygon function has been modified so that it correctly fills concave shapes and self-intersecting polygons. A self-intersecting polygon is a polygon whose exterior lines cross one another when the polygon is drawn.</p>
<h4>Differences from other Win32 platforms</h4>
<p>
GDI does not support the creation of paths or nonrectangular regions, nor does it support the <b>LineTo</b> and <b>MoveTo</b> functions. In addition, GDI does not support the functions necessary to create the following shapes and lines:
<ul type=disc>
<li>
Arcs<br><br></li>
<li>
Bezier curves<br><br></li>
<li>
Chords<br><br></li>
<li>
Pies<br><br></li>
<li>
PolyPolygons<br><br></li>
<li>
PolyPolylines</li>
</ul>
<h3>Pens and Brushes</h3>
<p>
Pens are the graphics objects GDI uses to draw lines; brushes are the graphical objects it uses to fill the interiors of closed shapes.</p>
<h4>Pens</h4>
<p>
The BLACK_PEN and WHITE_PEN each draw a solid, one-pixel-wide line in its respective color. These pens, along with NULL_PEN, which does not draw, are the stock GDI pens. The <b>GetStockObject </b>function can be used to select a stock pen.</p>
<p>
The <b>CreatePen</b> and <b>CreatePenIndirect </b>functions can be used to create pens that have different attributes than the stock pens. These functions allow the user to define a pen's line width, color, and pen style. Possible pen styles include those listed in Table 3.</p>
<p class=label>
<b>Table 3. Pen Styles</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=43%><b>Pen Style</b></td>
<td class=label width=57%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=43%><b>PS_SOLID</b></td>
<td width=57%>Draws a solid line</td>
</tr>
<tr valign=top>
<td width=43%><b>PS_DASH</b></td>
<td width=57%>Draws a dashed line</td>
</tr>
<tr valign=top>
<td width=43%><b>PS_NULL</b></td>
<td width=57%>Does not draw a line</td>
</tr>
</table><br>
<h4>Brushes</h4>
<p>
Stock brushes, like stock pens, can be selected with the <b>SelectObject</b> function. The <b>CreateDIBPatternBrushPt</b> function can be used to create a brush of any size. Pattern brushes can be any color or combination of colors.</p>
<h4>Version 2.0 additions</h4>
<p>
Color pens are new to version 2.0, as are color and multisize pattern brushes.</p>
<h4>Differences from other Win32 platforms</h4>
<ul type=disc>
<li>
GDI supports wide pens and dashed pens, but it does not support wide-dashed pens.<br><br></li>
<li>
Dotted pens and inside frame pens are not supported, nor are any user-specified endcap styles (such as PS_ENDCAP_ROUND).<br><br></li>
<li>
Hatched brushes are not supported in Windows CE. However, the effect of a hatched brush can be achieved by creating a custom brush with the <b>CreateDIBPatternBrushPt</b> function.<br><br></li>
<li>
Windows CE supports multisize pattern brushes, which are also supported by Microsoft Windows NT®. Microsoft Windows® 95 only supports the standard 8-pixel by 8-pixel brushes.</li>
</ul>
<h3>Bit Block Transfer Functions</h3>
<p>
Bit block transfer functions (<b>Blt</b>s) are used to transfer and/or alter bitmaps. There are four kinds of <b>Blt</b> functions, <b>PatBlt</b>, <b>BitBlt</b>, <b>MaskBlt</b>, and <b>StretchBlt,</b> plus a related function called <b>TransparentImage</b>.</p>
<p>
The <b>Blt</b> functions make heavy use of bitwise Boolean pixel operations, more commonly termed raster operation codes (ROPS). The following charts describe the ROP codes and the <b>Blt</b> functions that use them.</p>
<p class=label>
<b>Table 4. ROP Codes</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=21%><b>ROP Type</b></td>
<td class=label width=79%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=21%><b>ROP2</b></td>
<td width=79%>Combines a pen or brush with a destination bitmap in one of 16 possible combinations</td>
</tr>
<tr valign=top>
<td width=21%><b>ROP3</b></td>
<td width=79%>Combines a brush, a source bitmap, and a destination bitmap in one of 256 possible combinations</td>
</tr>
<tr valign=top>
<td width=21%><b>ROP4</b></td>
<td width=79%>Uses a binary "mask" bitmap to combine a foreground ROP3 and a background ROP3. The mask uses zeros and ones to indicate the areas where each ROP3 will be used. </td>
</tr>
</table><br>
<p class=label>
<b>Table 5. Blt Functions</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=28%><b>Blt Function</b></td>
<td class=label width=72%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=28%><b>PatBlt</b></td>
<td width=72%>Paints a selected rectangle using a selected brush and an ROP3 code.</td>
</tr>
<tr valign=top>
<td width=28%><b>BitBlt</b></td>
<td width=72%>Paints a selected rectangle using a selected brush, a source bitmap, and an ROP3 code</td>
</tr>
<tr valign=top>
<td width=28%><b>MaskBlt</b></td>
<td width=72%>Paints a given rectangle using two bitmaps and an ROP4 code</td>
</tr>
<tr valign=top>
<td width=28%><b>StretchBlt</b></td>
<td width=72%>Copies a bitmap from a source rectangle into a destination rectangle, stretching or compressing the bitmap to fit the destination rectangle</td>
</tr>
<tr valign=top>
<td width=28%><b>TransparentImage</b></td>
<td width=72%>Makes a copy of a bitmap, omitting the portions drawn in a transparent color</td>
</tr>
</table><br>
<p>
Taken together, the <b>Blt</b> functions and ROP codes provide the applications programmer with a powerful and extremely useful set of tools for moving, combining, and transforming bitmaps.</p>
<h4>Version 2.0 additions</h4>
<p>
Version 1.0 supported only a handful of ROP codes; version 2.0 supports them all. <b>StretchBlt</b> has been improved so that the stretched images more closely resemble the images on which they are based. Image inversion, which was not possible in version 1.0, is fully supported in version 2.0. <b>TransparentImage</b> is new to version 2.0.</p>
<h3>Colors</h3>
<p>
One of the most exiting developments in version 2.0 of Windows CE is the addition of color. The new Windows CE GDI supports the full range of colors available in other 32-bit Windows platforms.</p>
<p>
The color range available to a display device or operating system is determined primarily by the pixel depth that it supports. The pixel depth is measured in bits per pixel (bpp). Each bit can have a value of zero or one. A display that supports only one bit per pixel allows only two values, black and white. A pixel depth of 2 bpp allows four possible values (all possible combinations of zeros and ones with two bits): black, white, light gray, and dark gray. In general, the number of possible colors is equal to 2 raised to the power of the pixel depth.</p>
<p>
The new Windows CE GDI supports pixel depths of 1, 2, 4, 8, 16, 24, and 32 bpp. The higher-end pixel depths allow full color displays, while the lower-end pixel depths support monochrome display devices and applications.</p>
<p>
The GDI color system is not only powerful; it is extremely versatile. It allows bit block transfer functions between bitmaps with different pixel depths. This is possible because of the GDI use of device-independent bitmaps (DIB). DIBs are bitmaps that are stored internally, independent of any particular display or printing device. DIBS contain their own color tables, and can be displayed and/or printed in a variety of color formats, depending on the capabilities of the display or printing hardware. Virtually all GDI graphics information is stored in DIB format.</p>
<h4>Version 2.0 additions</h4>
<p>
Colors are new to Version 2.0. Version 1.0 only supported pixel depths of 1 and 2 bpp.</p>
<h4>Differences from other Win32 platforms</h4>
<ul type=disc>
<li>
Windows CE supports pixel depths of 2 bpp, which are not supported in other 32-bit Windows platforms.<br><br></li>
<li>
Windows CE does not support dithering.<br><br></li>
<li>
Windows CE does not support compressed bitmap formats, such as run-length encoded bitmaps.</li>
</ul>
<h3>Palettes</h3>
<p>
GDI allows a Windows CE–based application and a display device to jointly determine the optimum strategy for graphical display. Applications should use the <b>GetDeviceCaps </b>function to assess the display characteristics of the display device. The application can then create a device context based on the optimum display strategy for that device.</p>
<p>
GDI supports both palettized and nonpalettized color display devices. Palettized devices contain their own built-in color palette in their display card; GDI reads the value encoded in the device's display card and looks up the corresponding color in the device's color table.</p>
<p>
Nonpalettized devices have the color encoded directly in the frame-buffer pixel. They use the pixels' bit value to directly define the color without the need of a hard-coded palette.</p>
<p>
Once the color capabilities of the device context have been determined, the application can create a palette using the <b>CreatePalette</b> function, and then select it into the current device context with the <b>SelectPalette</b> function. The palette created and selected by these two functions is a logical palette, which exists apart from the system palette used by the display device. The <b>RealizePalette</b> function makes the system palette assume the values in the currently selected logical palette.</p>
<h4>Version 2.0 additions</h4>
<p>
Color palettes, and their related functions, are new to version 2.0.</p>
<h4>Differences from other Win32 platforms</h4>
<p>
From a programmer's perspective, one of the most crucial differences between Windows CE and other Win32 operating systems is that Windows CE does not arbitrate between the palettes of the background and foreground applications. The application running in the foreground has complete control over the system palette. Because of this, it is highly recommended that Windows CE–based applications confine themselves to the first ten and last ten colors included in the stock palette—the so-called "Windows Colors." Applications that use these colors should display properly while in the background; applications that use other colors may not.</p>
<h3>Fonts</h3>
<p>
GDI supports both TrueType and raster fonts, but allows only one to be used on any given platform.</p>
<p>
The outlines of TrueType fonts are defined not by pixel patterns, as are raster fonts, but by an encoded set of lines and curves. TrueType fonts can be readily rescaled and even rotated. GDI supports all standard Windows TrueType font files.</p>
<h4>Version 2.0 additions</h4>
<p>
TrueType fonts are new to version 2.0. Version 1.0 supported raster fonts only.</p>
<h3>Printing</h3>
<p>
GDI supports full graphical printing.</p>
<h4>Version 2.0 additions</h4>
<p>
Printing is new to version 2.0 of Windows CE.</p>
<h4>Differences from other Win32 platforms</h4>
<p>
Windows CE does not have a print manager, nor does it support spooling or allow multiple copies to be printed. Printing is single-threaded in that only one application can print at a time.</p>
<h3>Display Characteristics</h3>
<p>
Windows CE supports clipping regions, which allows applications to restrict their output to a subregion of the client area. Clipping areas must be selected into the device context associated with a given device.</p>
<h4>Differences from other Win32 platforms</h4>
<p>
Multiple mapping modes are not supported in Windows CE. GDI supports only the text mapping mode (called the MM-TEXT mode on desktop Win32 platforms) which maps a bitmap to a display device the same way text is read—from left to right and top to bottom. The viewpoint origin, which is the upper-left hand corner of the display area, can be changed with the <b>SetViewPointOrg </b>function.</p>
<h3>Tips and Tricks</h3>
<ul type=disc>
<li>
Applications that will be primarily run on 2 bpp or 4 bpp display devices should avoid using 8 bpp bitmaps whenever possible, since the color conversions will slow down <b>Blt</b> operations.<br><br></li>
<li>
The <i>iUsage</i> parameter should always be set to DIB_RGB_COLORS in all the functions in which it appears. It can be set to DIB_PAL_COLORS, when an 8-bpp bitmap is being used, however, the values in the bmiColors array member of the BITMAPINFO structure will be ignored.</li>
</ul>
<h2>Summary</h2>
<p>
Windows GDI is a full-fledged graphics system that supports the features listed in Table 6.</p>
<p class=label>
<b>Table 6. GDI Features</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=28%><b>GDI FEATURE</b></td>
<td class=label width=72%><b>Supported Attributes</b></td>
</tr>
<tr valign=top>
<td width=28%><b>Shape Drawing</b></td>
<td width=72%><b>Ellipse</b>, <b>Polygon</b>, <b>Polyline</b>, <b>Rectangle</b>, <b>RoundRect</b></td>
</tr>
<tr valign=top>
<td width=28%><b>Pens &amp; Brushes</b></td>
<td width=72%>Dashed, Dotted, Wide, and Solid Pens; Multisize Brushes</td>
</tr>
<tr valign=top>
<td width=28%><b>Bit Block Transfer Functions</b></td>
<td width=72%><b>PatBlt</b>, <b>BitBlt</b>, <b>MaskBlt</b>, <b>StretchBlt</b>, <b>TransparentImage</b></td>
</tr>
<tr valign=top>
<td width=28%><b>ROP Codes</b></td>
<td width=72%>All ROP2, ROP3, and ROP4 Codes</td>
</tr>
<tr valign=top>
<td width=28%><b>Colors</b></td>
<td width=72%>Pixel depths of 1, 2, 4, 8, 16, 24, and 32 bpp</td>
</tr>
<tr valign=top>
<td width=28%><b>Palettes</b></td>
<td width=72%>Palettized and Nonpalettized device support</td>
</tr>
<tr valign=top>
<td width=28%><b>Fonts</b></td>
<td width=72%>TrueType and raster fonts</td>
</tr>
<tr valign=top>
<td width=28%><b>Printing</b></td>
<td width=72%>Graphical printing</td>
</tr>
</table><br>
<p>
The functionality of Windows CE, including GDI, is not as extensive as its Win32 desktop counterparts—nor is it intended to be. Display and printing functions not needed by Windows CE–type devices have been eliminated from GDI. As a consequence, GDI is a powerful, full-color graphical display system with a relatively small footprint. Its small size and versatility make it capable of displaying text and graphics on a wide spectrum of Windows CE–type devices—some of which have not even been imagined yet.</p>
<h2>For More Information</h2>
<p>
For the Microsoft Windows CE Embedded Toolkit for Visual C++® 5.0, see the Microsoft Windows CE Web site (<a href="http://www.microsoft.com/windowsce/developer/prodinfo/vcceembed.htm">http://www.microsoft.com/windowsce/developer/prodinfo/vcceembed.htm</a>). The toolkit will also be available to Universal Subscribers of the MSDN Library.</p>
<p>
Also, be sure to take a look at the following articles, all available in the MSDN Library:</p>
<p>
<a href="msdn_embeddev.htm">"Embedded Development with Microsoft Windows CE 2.0,"</a> by Franklin Fite Jr. and Randy Kath.</p>
<p>
<a href="msdn_vcceembo.htm">"Introducing the Windows CE Embedded Toolkit for Visual C++ 5.0,"</a> by David Pellerin.</p>
<p>
<a href="msdn_mgdiview.htm">"Microsoft Windows CE Display Drivers and Hardware,"</a> by Jason Black and Jon Christiansen.</p>
<p>
<a href="msdn_memdrft2.htm">"Microsoft Windows CE Memory Use,"</a> by John Murray.</p>
<p>
<a href="msdn_comm_mod.htm">"The Microsoft Windows CE Communications Model,"</a> by Guy Smith.</p>
<p>
<a href="msdn_rtdraft6.htm">"Real-Time Systems with Microsoft Windows CE,"</a> by John Murray.</p>
<p>
<a href="msdn_w32model.htm">"The Win32 Programming Model: A Primer for Embedded Software Developers,"</a> by David Pellerin.</p>
<p>
<i>The information contained in this document represents the current view of Microsoft Corporation on the issues discussed as of the date of publication. Because Microsoft must respond to changing market conditions, it should not be interpreted to be a commitment on the part of Microsoft, and Microsoft cannot guarantee the accuracy of any information presented after the date of publication. This document is for informational purposes only.</i></p>
<p>
<i>This article is for informational purposes only. MICROSOFT MAKES NO WARRANTIES, EXPRESS OR IMPLIED, IN THIS DOCUMENT.</i></p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>What Is Microsoft Repository?</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_reposwp"></a>What Is Microsoft Repository?</h1>
<p>
Microsoft Corporation</p>
<p>
December 1996</p>
<h3>Overview</h3>
<p>
Microsoft® Repository is composed of two major components: a set of ActiveX™ interfaces that a developer can use to define open information models and a repository engine that is the underlying storage mechanism for these information models. The repository engine sits on top of either Microsoft SQL Server or Microsoft JET database systems.</p>
<p>
Microsoft Repository 1.0 ships with the Visual Basic 5.0 Professional and Enterprise Editions. It targets software tool vendors who wish to use open information models to support the development, deployment, and reuse of component software. Corporate customers who will benefit from better facilities for component reuse and tool interoperability will be the primary users of these tools.</p>
<p>
This paper describes the general architecture and uses for Microsoft Repository. It uses a single scenario to illustrate the basic principles of Microsoft Repository. Software vendors that are interested in using Microsoft Repository should consult the Microsoft Repository Web site at <a href="http://www.microsoft.com/repository">http://www.microsoft.com/repository</a> or the repository documentation supplied with the Visual Basic 5.0 Professional and Enterprise Editions.</p>
<h3>Sharing Software Components</h3>
<p>
A tool developer can use Microsoft Repository to share and reuse components. To share components effectively, it is useful to share not only the executable image of a component, but also descriptive information about the component and its configuration. This ensures that the receiving tool and the user of the tool can use the component correctly. Therefore, software component consumers and providers have to agree on:
<ul type=disc>
<li>
A common exchange format for descriptive information<br><br></li>
<li>
A common storage facility for components and descriptions <br><br></li>
<li>
A common application programming interface (API) for accessing components and descriptions</li>
</ul>
<p>
In Figure 1, Tool-A shares a component with Tool-B because it provides descriptive information about the component via a commonly understood information model, and because it stores the component and descriptive information in a commonly available storage facility that is accessible via a common API. Tool-B accesses the component and its description via the same API used by Tool-A. The commonly understood information model enables Tool-B to interpret the descriptive information and use the software component correctly.</p>
<p>
<img src="reposwp_1.gif" border=0></p>
<p class=label>
<b>Figure 1. Interaction between software tools that share components</b></p>
<h3>Objects and Relationships</h3>
<p>
An object becomes a repository object by exposing a set of Microsoft Repository interfaces. A developer uses these object interfaces to store properties and to store relationships to other objects. Repository objects are also ActiveX objects, so they inherit all the benefits of this technology.</p>
<p>
<img src="reposwp_2.gif" border=0></p>
<p class=label>
<b>Figure 2. Information models are populated with objects and relationships</b></p>
<p>
A repository object is defined in terms of the interfaces that it exposes. An interface can have properties, methods, and relationships to other interfaces. The set of interfaces that an object exposes describes the object's state, how the object can be manipulated, and the associations an object can have with other objects.</p>
<p>
For example, the two objects shown in Figure 3 collaborate using the hypothetical <b>ICatalogableItem</b> and <b>ICatalog</b> interfaces. These interfaces might define how a component can be stored in a component catalog. Note that the collaboration does not refer to the class of the component and catalog. By referring only to interfaces, tools are able to manipulate objects of different classes, as long as the objects support the set of interfaces that the tool needs to complete its task. </p>
<p>
<img src="reposwp_3.gif" border=0></p>
<p class=label>
<b>Figure 3. Object collaboration</b></p>
<p>
This paradigm is used by Microsoft Repository to encourage an evolutionary approach to developing complex information models. For example, it allows information models for different application domains, such as component management, data warehousing, or content management, to be developed independently.</p>
<p>
In Figure 4, the models are glued together by way of shared interfaces, which define how the objects of different domains interact. This approach is crucial for modeling complex information structures and for evolving such models in the presence of heterogeneous multivendor tools. </p>
<p>
<img src="reposwp_4.gif" border=0></p>
<p class=label>
<b>Figure 4. Shared Interfaces</b></p>
<h3>Data Storage and Scalability</h3>
<p>
Microsoft Repository uses a SQL Server database to store object and relationship data. The repository engine is scalable from desktop-based to server-based solutions. Tool features, team development capabilities, and tool integration capabilities that were once restricted to high-end and proprietary development environments are now available to a wide range of software tool developers and tool users. This scheme is graphically displayed in Figure 5.</p>
<p>
<img src="reposwp_5.gif" border=0></p>
<p class=label>
<b>Figure 5. The Repository engine stores object-oriented data in relational tables</b></p>
<h3>An Evolutionary Strategy</h3>
<p>
Microsoft Repository 1.0 exposes information models by way of ActiveX objects and uses Microsoft SQL Server as a storage and query provider. It is the first successful step of an evolutionary strategy to make repository technology generally available to the development community.</p>
</BODY>
</HTML>

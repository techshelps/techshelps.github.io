<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Windows Software Publishing Trust Provider</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>
<h1><a name="msdn_winpubsp"></a>Windows Software Publishing Trust Provider</h1>
<p>
Microsoft Corporation</p>
<p>
February 1996</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This document is an early release of the final specification. It is meant to specify and accompany software that is still in development. Some of the information in this documentation may be inaccurate or may not be an accurate representation of the functionality of the final specification or software. Microsoft assumes no responsibility for any damages that might occur either directly or indirectly from these inaccuracies. Microsoft may have trademarks, copyrights, patents or pending patent applications, or other intellectual property rights covering subject matter in this document. The furnishing of this document does not give you a license to these trademarks, copyrights, patents, or other intellectual property rights.</p>
<h2>Overview</h2>
<p>
This document defines the behavior of the Software Publishing trust provider, a module that supports selected actions under the Windows Verify Trust application programming interface (API). It is a companion to the Windows Trust Verification Services specification and should be read after that document. The Software Publishing trust provider allows a calling application to determine whether a software component contains digital signatures that identify it as being authentic software released by a publisher that is trusted on the local user's system.</p>
<h2>Introduction</h2>
<p>
The Software Publishing trust provider is a module for handling specified actions under the WinVerifyTrust() API as discussed in the Windows Trust Verification Services specification. This module supports verification of the trustability of software components, by interpreting local system rules and analyzing cryptographic material associated with those software components, which may be either embedded directly in those modules to be analyzed, or previously installed into a system database for later retrieval.</p>
<p>
The initial implementation of the Software Publishing trust provider, described in the document, provides relatively user-friendly security with weak enforcement. It allows users to install any software desired on their systems, but requires user interaction prior to installation of software not determined to be trustable by the available cryptographic material. Stronger implementations, which support additional actions that can be used to more closely guard the entrance of new software modules into the Trusted Computing Base, may be provided at a future date.</p>
<p>
This trust provider makes use of X.509 version 3 certificates and PKCS #7 digital signature structures, and it is assumed that the reader has a working knowledge of these standards.</p>
<p>
Additionally, the trust provider uses specific X.509 version 3 extensions and particular signed attributes within PKCS #7 structures that have been defined for the purpose of signing and authenticating software.</p>
<h2>Interfaces and Data Structures</h2>
<p>
The Software Publishing trust provider is called by using the Microsoft® Win32® API <b>WinVerifyTrust()</b> function, documented in the Windows Trust Verification Services specification. Recall that this function has the following prototype:</p>
<pre><code>HRESULT
WINAPI
WinVerifyTrust(
 &nbsp; HWND&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hwnd,
 &nbsp; DWORD&nbsp;&nbsp;&nbsp;&nbsp; dwTrustProvider,
 &nbsp; DWORD&nbsp;&nbsp;&nbsp;&nbsp; dwActionID,
 &nbsp; LPVOID&nbsp;&nbsp;&nbsp; ActionData,
 &nbsp; );
</code></pre>
<p>
The Software Publishing trust provider is identified by the WINBASE.H constant:</p>
<pre><code>#define WIN_TRUST_SOFTWARE_PUBLISHER&nbsp;&nbsp;&nbsp; (1L)
</code></pre>
<p>
Calls where this value is passed for the <i>dwTrustProvider</i> parameter are handled by the Software Publishing trust provider. The trust provider supports two actions (passed in the <i>dwActionID</i> parameter) at this time, defined as:</p>
<pre><code>#define WIN_SPUB_ACTION_TRUSTED_PUBLISHER&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (1L)
#define WIN_SPUB_ACTION_PUBLISHED_SOFTWARE&nbsp;&nbsp;&nbsp;&nbsp; (3L)
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;In the alpha development release of ActiveX™ technologies provided at the Microsoft Professional Developers Conference in March 1996, the first action listed above is not supported.</p>
<p>
In the initial implementation, the Software Publishing trust provider is also the system default provider for these actions. Therefore, if the caller specifies in the <i>dwTrustProvider</i> parameter the constant:</p>
<pre><code>#define WIN_TRUST_PROVIDER_UNKNOWN&nbsp;&nbsp;&nbsp; (0L)
</code></pre>
<p>
and the action is either of those defined above, the call will also be handled by this trust provider. This is the calling method that most applications will employ, because it allows later system configuration options, which permit system or network administrators to assign various more-or-less stringent trust providers to handling these actions, without requiring modification to the applications.</p>
<h2>ActionData and Subject Structures</h2>
<p>
For the action WIN_SPUB_ACTION_PUBLISHED_SOFTWARE, the <i>ActionData</i> parameter is expected to be a pointer to a data structure of type WIN_TRUST_ACTDATA_SUBJECT_ONLY.</p>
<pre><code>typedef LPVOID WIN_TRUST_SUBJECT

typedef struct _WIN_TRUST_ACTDATA_SUBJECT_ONLY {

 &nbsp;&nbsp; DWORD&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dwSubjectType;
 &nbsp;&nbsp; WIN_TRUST_SUBJECT Subject;

} WIN_TRUST_ACTDATA_SUBJECT_ONLY , *LPWIN_TRUST_ACTDATA_SUBJECT_ONLY
</code></pre>
<p>
In this structure, <i>dwSubjectType</i> identifies the format of the file or object being verified, and the <b>SUBJECT</b> structure is a pointer to a structure that provides information for reading or manipulating the object. Valid values for the subject type include:</p>
<pre><code>#define WIN_TRUST_SUBJTYPE_RAW_FILE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (0L)
#define WIN_TRUST_SUBJTYPE_PE_IMAGE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (1L)
</code></pre>
<p>
The <b>SUBJECT</b> structure for either of these types is of this form:</p>
<pre><code>typedef struct _WIN_TRUST_SUBJECT_FILE {

 &nbsp;&nbsp; HANDLE&nbsp; hFile;
 &nbsp;&nbsp; LPSTR&nbsp;&nbsp; lpPath;

} WIN_TRUST_SUBJECT_FILE, *LPWIN_TRUST_SUBJECT_FILE;
</code></pre>
<p>
Details on this structure is provided in the Windows Trust Verification Services specification.</p>
<h2>Verification Algorithm</h2>
<p>
When the WIN_SPUB_ACTION_PUBLISHED_SOFTWARE action is invoked, the subject is inspected to see whether it contains a PKCS #7 signed data structure. If it does, the structure is expected to contain a chain of X.509 certificates. In this development release, a root certificate must be present that is a self-signed certificate containing a hard-coded test root public key and is signed by the root private key. Additionally, a certificate must be present that is signed by the root private key and identifies a software publisher's public key. Finally, the PKCS #7 signed data structure must contain an ExternalData signed attribute that contains a digest of the subject being verified.</p>
<p>
In the future, each certificate will also be inspected to ensure that it contains appropriate X509.3 extensions defining key-usage restrictions and other attributes of the certified parties.</p>
<p>
If these conditions are met, the API returns SUCCESS to the calling application.</p>
<p>
Otherwise, if an HWND was provided, a user interface is displayed providing information obtained from any valid certificates present that contains the path of the subject file. If the user confirms acceptance of the file, the API also returns SUCCESS; if the user does not confirm acceptance, the API returns a distinguished error code.</p>
<p>
Full documentation of error conditions and corresponding return codes will be included in a later version of this document.</p>
</BODY>
</HTML>

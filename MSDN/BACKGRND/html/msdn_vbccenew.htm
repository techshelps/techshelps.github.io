<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Features of the Visual Basic Control Creation Edition</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_vbccenew"></a>Features of the Visual Basic Control Creation Edition </h1>
<p>
Microsoft Corporation </p>
<p>
November 1996</p>
<h3>Contents </h3>
<p>
<a href="#vbccenewintro">Introduction</a><br>
<a href="#vbccenewintegratdev">Integrated Development Environment</a><br>
<a href="#vbccenewcontroltools">ActiveX Control Creation Tools</a><br>
<a href="#vbccenewextensib">Extensibility—ActiveX Controls</a><br>
<a href="#vbccenewcustomdev">Customizable Development Environment</a></p>
<h2><a name="vbccenewintro"></a>Introduction</h2>
<p>
Software developers and reviewers need information that answers questions such as "What's new?" or "Why Should I upgrade?". This section is a guide to the new and enhanced programming environment in Microsoft® Visual Basic® version 5.0 Control Creation Edition. </p>
<p>
Microsoft Visual Basic Control Creation Edition is not only the fastest and most efficient way to create ActiveX™ Controls, it shares the most widely used programming environment for Windows. Today, there are over three million developers using Visual Basic. </p>
<p>
Microsoft Visual Basic Control Creation Edition improves on the development foundation first introduced in previous versions in three key areas: 
<ul type=disc>
<li>
<b>Familiar, easy to use control-creation paradigm.</b> The popularity of Visual Basic stems from its ease of use. Interfaces are drawn or painted, and sophisticated applications are assembled from prebuilt, pretested components. Visual Basic Control Creation Edition applies this same assembly metaphor to the construction of ActiveX components. ActiveX controls can be created from scratch or by assembling any of the thousands of commercially available ActiveX controls. If you can create a Visual Basic application, you can create an ActiveX control. <br><br></li>
<li>
<b>Improved programming capability.</b> A new version of Visual Basic for Applications (version 5.0) now in Excel, Word, PowerPoint , Access, and Project can also be found at the heart of the Visual Basic Control Creation Edition. The Integrated Development Environment (IDE) has been fully redesigned and standardized for greater consistency across all host applications. In addition, Microsoft IntelliSense® technology has now been brought to the developer, making writing error-free code in the Visual Basic Control Creation Edition easier and faster than ever. <br><br></li>
<li>
<b>New and improved debugging capability.</b> Visual Basic Control Creation Edition provides many new unique debugging facilities that make the debugging of ActiveX controls as straightforward as debugging applications. With its new multiple project development environment, Visual Basic Control Creation Edition allows both ActiveX controls and their host to be designed, implemented, and debugged, all within a single development session. </li>
</ul>
<h2><a name="vbccenewintegratdev"></a>Integrated Development Environment</h2>
<p>
Visual Basic for Applications is a shared component. Specifically, it is a common development environment consisting of a forms package (which is a host of ActiveX components), a code editor, and a debugger. Visual Basic Control Creation Edition and many other Microsoft products such as Microsoft Excel, Access, Word, PowerPoint, and Project share this common development environment. Collectively, these products represent hundreds of ActiveX components that can be easily tailored to solve specific business problems. </p>
<p>
As a result of the recent Microsoft announcement to license the Visual Basic for Applications environment to third parties, the programmer's reach extends even farther. Programmers can now look forward to being able to program products from Adobe Systems, Inc.; Autodesk, Inc.; Visio Corporation; SAP AG; and many more. </p>
<p>
The Visual Basic for Applications environment includes the Visual Basic for Applications language engine, a powerful editor, an Object Browser, and debugging tools. </p>
<p>
The IDE of Visual Basic for Applications is a substantially improved programming environment. The new IDE provides: 
<ul type=disc>
<li>
New IntelliSense features that provide developers instant syntax reference and object model assistance to reduce programming time and assure error free code.<br><br></li>
<li>
Multi-project support that enables multiple ActiveX controls and their test hosts to be loaded and debugged in a single session. <br><br></li>
<li>
Enhanced editor with syntax checking, color coded syntax, and support for code drag and drop within and across code windows.<br><br></li>
<li>
Enhanced Project window for navigating through the project components and managing the programmers workspace. <br><br></li>
<li>
Enhanced Properties window for setting and viewing object properties. Properties can be viewed by categories or alphabetically. <br><br></li>
<li>
New debugging tools to help track program execution, monitor the status of global and local variables, and eliminate bugs.<br><br></li>
<li>
New Form Layout window for visually setting the startup position of forms as well as previewing form screen locations at varying monitor resolutions. <br><br></li>
<li>
Enhanced Object Browser for browsing and searching for properties and methods across object-model libraries. </li>
</ul>
<p>
<img src="vbccenew_1.gif" border=0></p>
<p class=label>
<b>Figure 1. Visual Basic for Applications 5.0 editor </b></p>
<h3>Code Window</h3>
<p>
Drag and Drop has been implemented throughout the editing environment. </p>
<p>
Developers can drag and drop code and variables: 
<ul type=disc>
<li>
Between code windows. <br><br></li>
<li>
Into and out of the Watch window. <br><br></li>
<li>
Into and out of the Locals window. <br><br></li>
<li>
Across projects. </li>
</ul>
<h3>Project Explorer</h3>
<p>
<img src="vbccenew_2.gif" border=0></p>
<p class=label>
<b>Figure 2. Project Explorer </b></p>
<p>
Visual Basic 5.0 now has the ability to load several projects at once. This is extremely useful for designing and debugging reusable ActiveX controls because both the control project and the host project can be simultaneously loaded. By placing a breakpoint in the source code of the control, the programmer can debug an application line by line, starting in the host application, stepping into the source code of the control, and stepping back out to the host again. </p>
<p>
The Project Explorer displays, in an outline view, project components for all loaded projects (for example, ActiveX controls, forms, classes, modules, and resource files) associated with each currently open project. Each project appears as a new root in the outline control. This enables easy switching between different documents' projects for developers working on multiple projects simultaneously. A project exists for each open document and template. </p>
<p>
For easy managing of a workspace that may have several different projects open, expanding or collapsing a folder shows or hides all open components (forms, code modules, and so forth) within that project. </p>
<p>
You can expect to find the following components listed with a given project: 
<ul type=disc>
<li>
Forms that belong to the project <br><br></li>
<li>
UserControls that belong to a project (Note: a userControl is name of an empty form that the programmer turns into the final ActiveX control.) <br><br></li>
<li>
Code and class modules that belong to the project <br><br></li>
<li>
Resource files that belong to the project </li>
</ul>
<h3>Properties Window</h3>
<p>
<img src="vbccenew_3.gif" border=0></p>
<p class=label>
<b>Figure 3. Properties window </b></p>
<p>
The Visual Basic environment has a Properties window that displays properties of user controls, forms, modules, and classes. </p>
<p>
There are two tabs: <b>Alphabetic</b> and <b>Categorized</b>. The <b>Alphabetic</b> tab view provides an alphabetical list of properties. In the <b>Categorized</b> tab view, properties are grouped by category, for example color, font, and position. These categories can be expanded or collapsed in the Properties window. An ActiveX control created in the Visual Basic Control Creation Edition can specify the desired category for any custom properties it exposes. </p>
<p>
Like most of the operations in the Visual Basic for Applications editor, component type information is used to the programmers advantage extensively. Because ActiveX components are based on the Component Object Model (COM), they all contain type information that describes their interfaces. In other words, any development tool can easily determine all exposed objects, properties, methods, and even version numbers of ActiveX components. Whenever a property is selected in the Property Browser, descriptive functional information is displayed at the bottom of the window.</p>
<h3>Debugging Tools</h3>
<p>
<img src="vbccenew_4.gif" border=0></p>
<p class=label>
<b>Figure 4. Debug menu </b></p>
<p>
VBA includes new and enhanced debugging tools to help the developer identify compile errors, program logic errors and run-time errors. The debugging tools in VBA include the Locals window, the Watch window, and the Immediate window. The Locals window also includes the Call Stack Browser&nbsp; which shows the current variable and enables the developer to jump to procedure definitions and references. </p>
<p>
The Local Variables window automatically displays all of the declared variables in the current procedure and their values. </p>
<p>
The Watch window enables monitoring the value of a particular variable or expression. Code execution may be interrupted when a watch expression's value changes or equals a specified value </p>
<p>
The Immediate window that instantly evaluates any Visual Basic expression or statement, such as call to a <b>Sub</b> or <b>Function</b>. </p>
<p>
The Call Stack Browser&nbsp; displays a list of currently active procedure calls during break mode. </p>
<p>
To speed the debugging process, code can be dragged and dropped from the editor into the Immediate and Locals windows. </p>
<h3>Object Browser</h3>
<p>
<img src="vbccenew_5.gif" border=0></p>
<p class=label>
<b>Figure 5. Object Browser </b></p>
<p>
The VBA environment has an improved ActiveX Object Browser. The browser differentiates between built-in properties, custom properties, methods, event handlers, and user-defined procedures, as well as indicates globally accessible members. The browser also shows function-return types, parameter names and types, and user-defined types and constants. Hyperlink jumps to referenced objects enable easy navigation of the object hierarchy. New to the Object Browser is the ability to search for objects and members across type libraries. </p>
<h3>IntelliSense Features</h3>
<p>
Visual Basic for Applications 5.0 brings Office IntelliSense technology to the developer, providing on-the-fly syntax and programming assistance and reference. The developer can choose to turn these automated features off and access them on demand through the VBA menu or with keystroke combinations. The following features are available in the Code window and the Immediate Window: </p>
<h4>Complete Word</h4>
<p>
Completes the word that is being typing once enough letters are entered to make it distinct. Keystroke equivalent: <small>ctrl+alt+a</small>. For example, in the code window, type msg followed by <small>ctrl+alt+a </small>to complete the word MsgBox. </p>
<h4>Quick Info</h4>
<p>
When a procedure or method name is entered (followed by a space or an opening parenthesis), a tip automatically appears beneath the line of code. The tip gives syntax information about the procedure. Keystroke equivalent: <small>ctrl+i</small>. </p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This tip works for built-in language constructs as well as any user-defined functions. </p>
<p>
<img src="vbccenew_6.gif" border=0></p>
<p class=label>
<b>Figure 6. Quick Info </b></p>
<h4>List Properties/Methods</h4>
<p>
Displays a pop-up menu listing the properties and methods available for the object that precedes the period. Keystroke equivalent: <small>ctrl+j</small>. </p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This works for any built-in, external, or user-created ActiveX component. </p>
<p>
<img src="vbccenew_7.gif" border=0></p>
<p class=label>
<b>Figure 7. List Properties and Methods </b></p>
<h4>List Constants</h4>
<p>
Displays a pop-up menu listing the constants that are valid choices for the property typed and that precede the equals sign (=). Keystroke equivalent: <small>ctrl+shift+j. </small></p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This works for any built-in, external, or user-created ActiveX component. </p>
<p>
<img src="vbccenew_8.gif" border=0></p>
<p class=label>
<b>Figure 8. List Constants </b></p>
<h4>Data tips</h4>
<p>
When VBA is in break mode and the cursor is placed over a variable, the value of the variable is displayed in a tooltip-like window. </p>
<p>
<img src="vbccenew_9.gif" border=0></p>
<p class=label>
<b>Figure 9. Data Tips </b></p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Expressions can be partially selected when in break mode for immediate evaluation by a data tip.</p>
<p>
<img src="vbccenew_10.gif" border=0></p>
<p class=label>
<b>Figure 10. Data tips for partially selected code fragments </b></p>
<h4>Margin indicators </h4>
<p>
Developers can set a breakpoint, set the next statement, or set a bookmark by clicking in the margin of the code editor </p>
<p>
<img src="vbccenew_11.gif" border=0></p>
<p class=label>
<b>Figure 11. Margin Indicators </b></p>
<h4>Block comment and uncomment</h4>
<p>
An <b>Edit</b> toolbar provides quick access to this feature that enables developers to select blocks of code and, with the click of a button, comment out the entire selected block of code. </p>
<h2><a name="vbccenewcontroltools"></a>ActiveX Control Creation Tools</h2>
<h3>Introduction</h3>
<p>
Before the Visual Basic Control Creation Edition, ActiveX components could only be created with the C/C++ language. The Visual Basic Control Creation Edition represents a powerful new approach to creating ActiveX controls. Using the same visual metaphor for building controls as it does for applications, the Visual Basic Control Creation Edition allows controls to be created entirely from scratch by modifying existing controls (subclassing) or by assembling multiple controls. </p>
<p>
The ability to create new controls from existing controls gives Visual Basic programmers an astonishing head start when developing new, specialized components. Rather than starting from scratch, programmers can use Visual Basic Control Creation Edition to customize any of the 2000 or more commercially available ActiveX controls. </p>
<p>
ActiveX controls can be hosted in a wide variety of development tools. In Microsoft Office 97, ActiveX controls can be placed on Microsoft forms or directly on Microsoft Office documents. Using the ActiveX Control Pad, Microsoft Visual InterDev™, or Microsoft ActiveX controls can also be placed on web pages. When ActiveX controls are placed on web pages, they behave like Java applets. Like Java applets, ActiveX controls are automatically downloaded if the user surfing the web page does not already have them on their machine. Likewise, if the user has an outdated control, the newer control will be downloaded automatically. </p>
<h3>ActiveX Control Features</h3>
<p>
When constructing an ActiveX control with the Visual Basic Control Creation Edition there are many new features upon which the developer may draw. These new features are designed for ease of development, high performance, and functionality. </p>
<p>
The following list contains some of the new features that ActiveX control developers may take advantage of: 
<ul type=disc>
<li>
<b>Owner drawn. </b>The control itself handles all drawing operations which allows the developer full freedom with respect to what the control graphically displays.<br><br></li>
<li>
<b>Subclassing (Controls built from existing controls). </b>An ActiveX control can draw on the capabilities of another control and alter those capabilities as required.<br><br></li>
<li>
<b>Composite controls. </b>Composite controls are created by combining existing ActiveX controls with a new control.<br><br></li>
<li>
<b>Data awareness.</b> ActiveX controls can be made <i>data aware</i>, enabling them to link easily to a database.<br><br></li>
<li>
<b>Container controls. </b>Container controls allow developers to create controls that can house other controls. For example, a Tab control is a container control.<br><br></li>
<li>
<b>Events.</b> Events can be added by the controls creator to create custom events for the new control.<br><br></li>
<li>
<b>Container specific controls.</b> Controls can be created that determine what application is hosting them at run-time and that act accordingly.<br><br></li>
<li>
<b>Enumerations.</b> Enumerations provide support for populating the Quick Info feature of Visual Basic.<br><br></li>
<li>
<b>Default properties.</b> Default properties are used when a control is referred to without specifying a particular property.<br><br></li>
<li>
<b>Property pages.</b> Property Pages are useful for design-time configuration of controls.<br><br></li>
<li>
<b>Multiple OCXs per OCX file.</b> OCX files can contain multiple OCX controls.<br><br></li>
<li>
<b>Design-time vs. run-time behavior.</b> This allows control authors to differentiate between design mode and run mode, allowing them to tailor behavior to both design time and run time.<br><br></li>
<li>
<b>Digital signing.</b> Controls can be digitally signed, which helps protect end users from viruses and other malicious mischief.<br><br></li>
<li>
<b>Asynchronous property reading.</b> Controls, especially Internet controls, can download their property settings from a uniform resource locator (URL) (in the background) while the control remains responsive to the end user.<br><br></li>
<li>
<b>Visible/invisible at run-time.</b> Properties allow control authors to decide whether the control will be visible at run time. For example, the Timer control is invisible. <br><br></li>
<li>
<b>Licensing.</b> Licensing provides a mechanism for designating, at design time, who can use controls.<br><br></li>
<li>
<b>Menus.</b> Controls can have standard menus. For example, a user-interface form may be packaged as a control, complete with menus. <br><br></li>
<li>
<b>Object models.</b> Object Models<b> </b>can be used to provide a sophisticated hierarchical object model within a control.<br><br></li>
<li>
<b>Transparent backgrounds.</b> These let the programmer create nonrectangular controls.<br><br></li>
<li>
<b>Builder support.</b> This provides controls the ability to determine when they are in design mode and to walk the developer through the initial setup of the control. For example, an ActiveX control may contain a Wizard that assists the programmer in setting desired properties.</li>
</ul>
<h3>ActiveX Control Wizards</h3>
<p>
Visual Basic Control Creation Edition comes with two invaluable Wizards that greatly assist the programmer with the creation of ActiveX controls. The ActiveX Control Interface Wizard allows the programmer to define the properties, methods, and events easily for a user created ActiveX control. </p>
<p>
<img src="vbccenew_12.gif" border=0></p>
<p class=label>
<b>Figure 12. The ActiveX Control Interface Wizard </b></p>
<p>
<img src="vbccenew_13.gif" border=0></p>
<p class=label>
<b>Figure 13. The ActiveX Control Interface Wizard </b></p>
<p>
The Property Page Wizard automatically creates custom property pages for a user-defined control. By creating custom property pages, the author of an ActiveX control can create custom interfaces for the setting of properties. </p>
<p>
<img src="vbccenew_14.gif" border=0></p>
<p class=label>
<b>Figure 14. The Property Page Wizard </b></p>
<p>
Figure 15 is an example of a custom property page for a Calendar control created with Visual Basic Control Creation Edition. Regardless of the development tool hosting this control (Visual Basic 4.0, Visual Basic 5.0, Visual C++, Office 97, or ActiveX Control Pad), right clicking on the control at design time will always display the custom property page. Custom property pages not only make ActiveX controls easier to reuse across different development tools, they also provide a consistent, intuitive interface for the control. Note that the custom property page can also contain a preview of how the control will look after the changes are applied.</p>
<p>
<img src="vbccenew_15.gif" border=0></p>
<p class=label>
<b>Figure 15. An example of a custom property page </b></p>
<h3>Setup Wizard</h3>
<p>
ActiveX controls, like Java applets, are designed to automatically download themselves to a user’s machine on demand. The process of compressing a control and any other files it may depend on, creating a CAB (cabinet) file, and a working example of an HTML page is entirely handled by the Setup Wizard. </p>
<p>
<img src="vbccenew_16.gif" border=0></p>
<p class=label>
<b>Figure 16. The Setup Wizard </b></p>
<h2><a name="vbccenewextensib"></a>Extensibility—ActiveX Controls</h2>
<p>
Visual Basic 5.0, along with all Microsoft Office 97 applications, support ActiveX controls, formerly called OLE controls or custom controls. ActiveX controls are prebuilt, reusable software components. Any of these controls can be used as is or can be customized using the Visual Basic Control Creation Edition. </p>
<p>
Today, there are over 2000 commercially available ActiveX controls in almost every conceivable category including data access, 3D modeling, multimedia, imaging, manufacturing, real-time data acquisition, charting, reporting, data encryption, data compression, mainframe connectivity, interface design, telephony, fax, voice, and instrumentation. </p>
<h3>Toolbox</h3>
<p>
<img src="vbccenew_17.gif" border=0></p>
<p class=label>
<b>Figure 17. Toolbox </b></p>
<p>
The toolbox displays all ActiveX controls registered for the current development session. By right clicking on the toolbox, developers can fully customize and organize their controls by whatever category they desire, as well as add and remove controls. 
<ul type=disc>
<li>
<b>Adding and Removing Controls.</b> By right clicking on the Toolbox and selecting the <b>Components</b> command, developers can easily add new controls to the Toolbox (Figure 18).<br><br></li>
<li>
<b>Adding and Removing Tabs.</b> Developers can customize and organize their ActiveX controls by adding tabs to the Toolbox. A developer may choose to organize controls by project, functionality, or any other way that makes sense (charting, Internet, and so on). </li>
</ul>
<p>
<img src="vbccenew_18.gif" border=0></p>
<p class=label>
<b>Figure 18. Adding ActiveX controls to the development environment </b></p>
<h2><a name="vbccenewcustomdev"></a>Customizable Development Environment</h2>
<p>
The Visual Basic for Applications environment now includes command bars, a new type of menu/toolbar system. This new system offers dockable and floating toolbars that are fully customizable. Developers can modify any built-in menu bar or toolbar and can create and modify custom toolbars, menu bars, and shortcut menus. Because toolbars and menus are included in command bars, developers use the same kind of controls on each one. For example, the docked toolbar shown in the following illustration contains three buttons. </p>
<p>
<img src="vbccenew_19.gif" border=0></p>
<p>
The menu shown in the following illustration contains the same three commands displayed as menu items. </p>
<p>
<img src="vbccenew_20.gif" border=0></p>
<p>
In Visual Basic for Applications , menu bars and toolbars can contain menus. The floating toolbar shown in the following illustration contains three buttons and a menu that contains the same three buttons displayed as menu items. </p>
<p>
<img src="vbccenew_21.gif" border=0></p>
</BODY>
</HTML>

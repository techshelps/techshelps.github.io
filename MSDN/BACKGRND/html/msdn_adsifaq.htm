<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Active Directory Services Interface (ADSI): Frequently Asked Questions</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_adsifaq"></a>Active Directory Services Interface (ADSI): Frequently Asked Questions</h1>
<p>
Microsoft Corporation</p>
<p>
<b>What is ADSI? </b></p>
<p>
Active Directory Services Interfaces (ADSI) is a set of open interfaces that abstract the capabilities of directory services from different network providers to present a single view for accessing and managing network resources. Administrators and developers can use ADSI services to enumerate and manage resources in a directory service, no matter which network environment contains the resource. This can be an LDAP-based, NDS-based, or NTDS-based directory. It does not matter so long as a service provider is available for that directory service. </p>
<p>
<b>Which service providers will Microsoft deliver? </b></p>
<p>
The ADSI SDK ships with providers for Microsoft® Windows NT®, Novell NDS, Novell 3x bindery and LDAP. </p>
<p>
<b>What problem is the ADSI initiative solving? </b></p>
<p>
ADSI is solving four main problems: 
<ul type=disc>
<li>
Enabling single logon for client desktop to multiple directories. <br><br></li>
<li>
Making it possible to write applications to one API but work with multiple directories.<br><br></li>
<li>
Making it easier for end-users to find information with rich querying of directories. <br><br></li>
<li>
Making it easier to manage multiple directories.</li>
</ul>
<p>
<b>Which LDAP servers does it support? </b></p>
<p>
ADSI will work against any LDAP server that supports, at a minimum, LDAP V2. We have tested the provider against the following LDAP servers: 
<ul type=disc>
<li>
Windows NT 4.0 PDC release (the NT 5 alpha release) <br><br></li>
<li>
Netscape Directory Server 1.0 <br><br></li>
<li>
Exchange 5.0 <br><br></li>
<li>
Microsoft Commercial Internet System (MCIS) Address Book Server <br><br></li>
<li>
University of Michigan SLAPD server <br><br></li>
<li>
Novell’s LDAP-enabled NDS</li>
</ul>
<p>
<b>When will it ship? </b></p>
<p>
It shipped on 2/17/97 and is available as a free download from http://www.microsoft.com/ntserver/info/adsi.htm. It is also available on the MSDN Library (MSDN Library, SDK Documentation, Platform SDK, Active Directory SDK).</p>
<p>
<b>How is ADSI different from OLE-DS? </b></p>
<p>
ADSI is different from OLE-DS in two ways: First, as the API to the Active Directory, it reflects the name change of the NT 5 Directory Service to Active Directory and second, it offers full support for LDAP. </p>
<p>
<b>How does ADSI add value to LDAP? </b></p>
<p>
ADSI adds value to LDAP in two ways: it is a higher level API set than LDAP and it is easier to use than LDAP. The LDAP C APIs are raw APIs which are somewhat difficult to write to. While Active Directory will offer full support for the LDAP C APIs we also felt it was critically important to make it easy to write to the Active Directory, or for that matter any directory service, including LDAP. As such, we offered ADSI to the industry in an open design review in 1995 and have now delivered on that specification. Additionally, ADSI supports multiple high-level languages. High-level languages, such as Visual Basic®, Perl, Rexx, as well as C/C++, can be used to develop directory service applications. This means that administrators and developers can use the tools they already know. Similarly, ADSI offers support for Java—ADSI objects provide easy access to directory services for Java applets and programs through Java COM. </p>
<p>
<b>How much functionality for each of the directories do I get with applications written to ADSI? </b></p>
<p>
ADSI provides the same functionality you would have if you had written an application to the native protocol of a specific DS. So if an application were written to ADSI using all of the service providers delivered in the SDK (Windows NT, NDS, NetWare bindery, LDAP) then the client accessing these DSs via an application written to ADSI would have 100 percent functionality for each of the DSs. </p>
<p>
<b>Are there any performance hits using ADSI as opposed to writing to natively to a specific DS? </b></p>
<p>
No. The ADSI routing layer, which handles the calls from the application to the service providers for each of the DSs, is extremely efficient. There is no noticeable performance degradation between writing to ADSI as opposed to the native API for specific DSs. </p>
<p>
<b>Is Microsoft working with the industry on ADSI? </b></p>
<p>
Yes. Microsoft has had a very open process and solicited feedback the ADSI APIs, beginning with the first open design review in the summer of 1995 through the AdMETAstration Workshop held in February of 1997. 40+ vendors attended this preview, including Active Voice, Cabletron Systems, Inc., CI Partners, Compaq Computer Corporation, Computer Associates, CompuWare, Control Data Systems, Inc., Digital Equipment Corporation, FastLane Technologies, Inc., Installshield, IntraSoft, Linkage, LLC, Mission Critical Software, NetMagic Systems, Inc., NetPro, NetVision, Novell, Octopus Technologies, Inc., OpenVision Technologies, QueriSoft, Siemens-Nixdorf, Symantec Corporation, World Talk, Zoomit International. </p>
<p>
<b>Are there any applications that are being written to ADSI? </b></p>
<p>
Yes. There are currently applications being written to ADSI by several companies, including QueriSoft, NetVision, and NetMagic. There will be more to follow in the coming months. Also, all BackOffice applications will be written to support ADSI so that they can access/leverage the Active Directory. </p>
</BODY>
</HTML>

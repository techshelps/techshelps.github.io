<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Microsoft Visual Basic for Applications, Version 5.0 Solutions Enhancements Guide</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_ofc97enh"></a>Microsoft Visual Basic for Applications, Version 5.0 Solutions Enhancements Guide</h1>
<p>
Microsoft Corporation</p>
<p>
October 1996</p>
<h3>Contents</h3>
<p>
<a href="#ofc97enhintro">Introduction</a> </p>
<p>
<a href="#ofc97enhprog">Improved Programming Capability</a></p>
<p>
<a href="#ofc97enhobjmodel">New and Improved Object Models</a> </p>
<p>
<a href="#ofc97enhapps">Microsoft Office 97 Applications Programmability Enhancements</a></p>
<p class=indent>
<a href="#ofc97enhaccess">Microsoft Access 97 Programmability Enhancements</a></p>
<p class=indent>
<a href="#ofc97enhexcel">Microsoft Excel 97 Programmability Enhancements</a> </p>
<p class=indent>
<a href="#ofc97enhpowerpoint">Microsoft PowerPoint 97 Programmability Enhancements</a> </p>
<p class=indent>
<a href="#ofc97enhoutlook">Microsoft Outlook 97 Programmability Enhancements</a> </p>
<p class=indent>
<a href="#ofc97enhword">Microsoft Word 97 Programmability Enhancements</a> </p>
<h2><a name="ofc97enhintro"></a>Introduction</h2>
<p>
This document is a guide to the new and enhanced programmability features in the Microsoft® Office 97 suite. </p>
<p>
Microsoft Office is not only the best set of productivity applications for all types of users, but it is also a development platform for building custom business solutions. Today, more than one million developers are creating solutions based on Microsoft Office applications. </p>
<p>
Microsoft Office 97 enhances and extends the features that make it possible for developers to build custom solutions with Microsoft Office. Microsoft Office 97 improves on the development foundation strategy first introduced in Office 4.<i>x</i> and continued with Office for Microsoft Windows® 95 in three key areas: 
<ul type=disc>
<li>
<b>Improved programming capability.</b> A new version of the Microsoft Visual Basic® programming system, Applications Edition version 5.0, is now in Microsoft Excel, Microsoft Word, the Microsoft PowerPoint® presentation graphics program, and Microsoft Access. The integrated development environment (IDE) of Visual Basic for Applications has been completely redesigned and standardized for greater consistency across host applications. In addition, IntelliSense™ technology is now available to the developer, making writing code in Office 97 easier than ever. ActiveX™ controls support in Office documents and Microsoft Forms enable developers to add rich interactive capabilities to their solutions easily. <br><br></li>
<li>
<b>New and improved object models.</b> Office 97 provides new applications and functionality that are exposed to the developer in more than 550 objects. Office 97 also introduces new shared components such as OfficeArt, the Office Assistant, command bars, and FindFile, which developers can make optimal use of for their own custom solutions. <br><br></li>
<li>
<b>Tools for building connected solutions.</b> Microsoft Office 97 incorporates and exposes several new technologies to take more effective advantage of the connected environment. Features such as ODBCDirect, Jet 3.5, HTML support, and hyperlinks increase the power and flexibility in accessing corporate data and provide seamless integration to both intranet and Internet environments. </li>
</ul>
<h2><a name="ofc97enhprog"></a>Improved Programming Capability</h2>
<p>
Visual Basic for Applications is a shared development environment that enables developers for Microsoft Office to create custom business solutions. Visual Basic for Applications includes a language engine, a powerful editor, an Object Browser, and debugging tools. Microsoft Office 97 provides developers with more depth and flexibility in building custom solutions with the extension of Visual Basic for Applications and improvements to the development environment. </p>
<p>
Visual Basic for Applications is now included in Microsoft Word and Microsoft PowerPoint. This inclusion makes it much easier for developers to create custom solutions using each Microsoft Office product and to reuse code across the applications. Moreover, with the recent licensing of Visual Basic for Applications to third parties, developers will be able to use standard tools to capture the functionality of Microsoft Office and third-party software products to build vertical business solutions that share a high degree of consistency for users. </p>
<h3>Integrated Development Environment</h3>
<p>
The integrated development environment of Visual Basic for Applications is an entirely new environment for developers for Microsoft Office. The most significant change is that the new Visual Basic Editor exists outside the host application window. This enables developers to write code in Visual Basic for Applications and simultaneously view the results of their programming in the host Office application. Although the IDE exists outside the application window, it runs in the same memory space as its host, thereby benefiting from tight integration for event handling, as well as enhanced performance. The IDE also provides the following: 
<ul type=disc>
<li>
Enhanced editor with syntax checking, color-coded syntax, and support for code drag-and-drop <br><br></li>
<li>
New Project Explorer for navigating the project components <br><br></li>
<li>
Enhanced Properties window for setting and viewing object properties <br><br></li>
<li>
New debugging tools to help track program execution and find bugs <br><br></li>
<li>
Enhanced Object Browser for browsing and searching for properties and methods across object model libraries <br><br></li>
<li>
New IntelliSense features for instant syntax reference and object model assistance to reduce programming time <br><br></li>
<li>
Improved code security with improved password protection and encryption to lock both documents and projects (developers for Microsoft Access can remove source code from their projects for added protection) <br><br></li>
<li>
Conditional compilation for incorporating debugging code that will not run in the final version of the application </li>
</ul>
<p>
<img src="ofc97enh_1.gif" border=0></p>
<p class=label>
<b>Figure 1. Visual Basic Editor </b></p>
<h4>Code window</h4>
<p>
The IDE of Visual Basic for Applications includes a code window for the document, for any document sections that support code behind them (for example, Microsoft Excel sheets), and for each code and class module and form in the project. </p>
<p>
Drag-and-drop functionality has been implemented throughout the editing environment. Developers can drag code and variables between code windows, into the Watches window, into the Locals window, and across projects. </p>
<h4>Project Explorer</h4>
<p>
<img src="ofc97enh_2.gif" border=0></p>
<p class=label>
<b>Figure 2. Project Explorer </b></p>
<p>
The Project Explorer displays the project components (specifically, forms, modules, and references) associated with each open project in an outline view. Each project appears as a new root in the outline control, enabling easy switching among different documents' projects for developers working on multiple projects simultaneously. A project exists for each open document and template. </p>
<p>
The following project components are shown in the tree view: 
<ul type=disc>
<li>
The document that owns the project (Word document, Microsoft Excel workbook, or PowerPoint presentation) <br><br></li>
<li>
Sections internal to the document that can have code behind them (for example, worksheets in Microsoft Excel) <br><br></li>
<li>
Forms that belong to the project <br><br></li>
<li>
Code and class modules that belong to the project <br><br></li>
<li>
References to other Microsoft Office documents (references are permitted to documents within the same application only) </li>
</ul>
<h4>Properties window</h4>
<p>
<img src="ofc97enh_3.gif" border=0></p>
<p class=label>
<b>Figure 3. Properties window </b></p>
<p>
The Visual Basic Editor has a Properties window that displays the properties of Microsoft Office documents, forms, and controls. The Properties window can also be shown in the host application's window. For example, Word uses the Properties window to display properties of ActiveX controls that are embedded in a Word document. </p>
<p>
The Properties window has two tabs: Alphabetic and Categorized. The Alphabetic tab view provides an alphabetical list of properties. The Categorized tab view provides a list of properties grouped by category (for example, all properties related to color, font, or position). These categories can be expanded or collapsed in the Properties window. </p>
<h4>Debugging tools</h4>
<p>
<img src="ofc97enh_4.gif" border=0></p>
<p class=label>
<b>Figure 4. The Debug menu </b></p>
<p>
Visual Basic for Applications includes new and enhanced debugging tools to help the developer identify compile errors, program logic errors, and run-time errors. The debugging tools in Visual Basic for Applications include a Locals window, a Watches window, and an Immediate window. The Locals window also includes a Call Stack Browser that shows the current variable and enables the developer to jump to procedure definitions and references. 
<ul type=disc>
<li>
The Locals variables window automatically displays all the declared variables in the current procedure and their values. <br><br></li>
<li>
The Watches window enables monitoring the value of a particular variable or expression. Code execution may be interrupted when a watch expression's value changes or equals a specified value. <br><br></li>
<li>
The Immediate window instantly evaluates any expression or statement in Visual Basic, such as call to a Sub of Function. <br><br></li>
<li>
Call Stack displays a list of active procedure calls during break mode. <br><br></li>
<li>
To speed the debugging process, code can be dragged from the editor and dropped into the Immediate and Locals windows. </li>
</ul>
<h4>Object Browser</h4>
<p>
<img src="ofc97enh_5.gif" border=0></p>
<p class=label>
<b>Figure 5. The Object Browser </b></p>
<p>
The Visual Basic Editor has an improved Object Browser. The browser differentiates between built-in properties, custom properties, methods, event handlers, and user-defined procedures, as well as indicates globally accessible members. The browser also shows function return types, parameter names and types, and user-defined types and constants. Hyperlink jumps to referenced objects enable easy navigation of the object hierarchy. New to the Object Browser is the ability to search for objects and members across type libraries. </p>
<h4>IntelliSense features</h4>
<p>
Visual Basic for Applications, version 5.0, brings IntelliSense technology to the developer, providing on-the-fly syntax and programming assistance and reference. The developer can choose to turn these automated features off and access them on demand through the Visual Basic for Applications menu or with keystroke combinations. The following features are available while in the code window, as well as from the Immediate window: 
<ul type=disc>
<li>
<b>Complete Word.</b> Completes the word that is being typed, once enough letters are entered to make it distinct. (Keystroke equivalent: CTRL+ALT+A.) <br><br></li>
<li>
<b>Quick Info.</b> When a procedure or method name is entered (followed by a space or an opening parenthesis), a tip automatically appears under the line of code writing. The tip gives syntax information about the procedure. (Keystroke equivalent: CTRL+I.) <p>
<img src="ofc97enh_6.gif" border=0></P><p class=label>
<b>Figure 6. Quick Info </b>
</li>
<li>
<b>List Properties/Methods.</b> Displays a pop-up menu listing the properties and methods available for the object that precedes the period. (Keystroke equivalent: CTRL+J.) <p>
<img src="ofc97enh_7.gif" border=0></P><p class=label>
<b>Figure 7. List Properties/Methods </b>
</li>
<li>
<b>List Constants.</b> Displays a pop-up menu listing the constants that are valid choices for the property typed and that precede the equal sign (=). (Keystroke equivalent: CTRL+SHIFT+J.) <p>
<img src="ofc97enh_8.gif" border=0></P><p class=label>
<b>Figure 8. List Constants </b>
</li>
<li>
<b>DataTips™ pop-up information.</b> When Visual Basic for Applications is in break mode and the cursor is placed over a variable, the value of the variable is displayed in a tooltips-like window. <p>
<img src="ofc97enh_9.gif" border=0></P><p class=label>
<b>Figure 9. DataTips </b>
</li>
<li>
<b>Margin Indicators.</b> Developers can set a breakpoint, set the next statement, or set a bookmark by clicking in the margin of the code editor. <p>
<img src="ofc97enh_10.gif" border=0></P><p class=label>
<b>Figure 10. Margin Indicators </b>
</li>
</ul>
<h4>Block Comment and Uncomment</h4>
<p>
An Edit toolbar provides quick access to the Block Comment and Uncomment feature, which enables developers to select blocks of code and, with the click of a button, comment out the entire selected block of code. </p>
<h4>Project security</h4>
<p>
Developers need the ability to distribute their solutions in a secure and protected form to prevent modification to their code base. Projects associated with a Microsoft Office document can be protected without restricting access to the rest of the document. This protection is achieved by setting a protection property on the document in the property sheet. Developers using Microsoft Access can also remove the source code from databases that they distribute to others, thereby reducing the size of the database and protecting their intellectual property. For more information, see "Remove Source Code" in the Microsoft Access 97 section, later in this document. </p>
<h4>Conditional compilation</h4>
<p>
Developers can set compilation flags within their code to control the resulting behavior of the application. For example, developers may wish to include debugging code or custom messages during the development phase that they would not want end users to see. Conditional compilation enables developers to create multiple compilations of their application easily by setting flags in their code. </p>
<h4>Class modules</h4>
<p>
Visual Basic for Applications now includes support for class modules. A class module can be thought of as a template for a user-defined object. Within a class module, developers can add public procedures that define custom methods and properties for the object. When an instance of the class is created, developers can apply these custom methods and properties as they would for any object. Modules can be shared across projects through drag-and-drop or export and import functionality or from within a Visual Basic–based automation server. </p>
<h4>ActiveX controls</h4>
<p>
<img src="ofc97enh_11.gif" border=0></p>
<p class=label>
<b>Figure 11. ActiveX controls menu </b></p>
<p>
All of the Microsoft Office applications support ActiveX controls, formerly called OLE controls or custom controls. ActiveX controls are prebuilt, reusable software components that enable developers to add rich interactive capabilities easily to their Microsoft Office solutions. In Microsoft Office 97, ActiveX controls can be placed on Microsoft Forms or directly on Microsoft Office documents. More than one thousand ActiveX controls are available today from third-party vendors. </p>
<h4>Microsoft forms</h4>
<p>
<img src="ofc97enh_12.gif" border=0></p>
<p class=label>
<b>Figure 12. Microsoft Forms </b></p>
<p>
Microsoft Excel, Microsoft Word, and Microsoft PowerPoint share a powerful new Forms Designer, Microsoft Forms, which enables the developer to create custom dialog boxes. Because these applications use the same Forms Designer, developers learn how to create custom dialog boxes only one way for all three applications, and custom dialog boxes designed in one application can be shared with another. </p>
<p>
Forms support the architecture for the next generation of ActiveX controls and provide the following benefits: 
<ul type=disc>
<li>
Superior performance (for example, reduced time to save, load, or redraw) when compared to today's windowed controls. <br><br></li>
<li>
Advanced features for forms design, including alignment and layout tools, drag-and-drop of controls, and in-place editing of captions. <br><br></li>
<li>
Ability to place the same controls on Microsoft Office documents. <br><br></li>
<li>
A broad set of controls, including all the standard interface controls and container controls (for example, frame and multipage controls). </li>
</ul>
<h4>Toolbox</h4>
<p>
<img src="ofc97enh_13.gif" border=0></p>
<p class=label>
<b>Figure 13. Toolbox </b></p>
<p>
The toolbox can be customized to display all registered controls in the system. Developers can fully customize the Microsoft Forms toolbox: 
<ul type=disc>
<li>
<b>Adding and removing pages.</b> Developers can customize and organize ActiveX controls by adding pages to the toolbox. <br><br></li>
<li>
<b>Exporting and importing pages.</b> Developers can customize toolbox sharing and distribution of toolboxes and toolbox pages. <br><br></li>
<li>
<b>Control templates.</b> Developers can create control templates by dragging a control (or a number of "grouped" controls) from the form back to the toolbox. This action creates a template of that control, which can then be reused just like any other control. Templates carry the property settings of the parent control. <br><br></li>
<li>
<b>Customizing controls.</b> Developers can customize the icon representing the control or control templates created. The ToolTip presented for the control is also entirely customizable. </li>
</ul>
<p>
A second toolbox is used to place ActiveX controls directly on Microsoft Office documents. Developers can maintain separate toolboxes for managing controls for forms and controls for documents. </p>
<h2><a name="ofc97enhobjmodel"></a>New and Improved Object Models</h2>
<p>
At the center of the Microsoft Office development platform is the functionality of each Microsoft Office product that is available to developers through Automation. Features such as charting in Microsoft Excel or the database features in Microsoft Access are available to developers as building blocks to create custom solutions. Microsoft Office provides developers 100 percent coverage of the feature sets in each application, enabling them to create unique solutions in significantly less time. Also, Microsoft Office 97 provides to the developer more than 550 objects for reuse. </p>
<p>
The developer can reuse the discrete pieces of functionality built into a Microsoft Office application through the application object model. An object model is a conceptual map or representation of an application's functionality depicting the hierarchy of the objects exposed by an application. Microsoft strives to provide developers consistency with object models to simplify the process of accessing components. </p>
<p>
New components, such as the Office Assistant, OfficeArt, and command bars share both code and their overall structure within each application. This consistency enables developers to work easily in different Microsoft Office applications, as well as to share code among the Microsoft Office applications. In Microsoft Office 97, more than 50 percent of the objects are shared, resulting in increased code reusability and improved product performance. </p>
<h3>New Object Models</h3>
<p>
New functionality is introduced in Microsoft Office 97 that benefits end users by providing more features and benefits developers by providing more objects to use to their greatest advantage. For example, the Microsoft Outlook™ desktop information manager provides a new set of full-featured objects that developers can use to provide scheduling and contact-management functionality. The Visual Basic for Applications 5.0 IDE and Microsoft Forms also expose their functionality through object models, enabling customization of the editor and forms environment. New object models are also provided for OfficeArt, The Office Assistant, Office command bars, and FileSearch. </p>
<h4>OfficeArt</h4>
<p>
OfficeArt is the feature name for the new drawing and graphic tools in Word, Microsoft Excel, and PowerPoint. The new tools replace the existing drawing toolbars in each of these applications, and the code base is shared, so the user interface is identical across the three applications. Additionally, Microsoft Graph accesses the OfficeArt fill dialog boxes and can apply OfficeArt fill effects to objects in graphs. </p>
<p>
The new drawing and graphic tools make all the higher-end features of PowerPoint 95, such as gradient fills, available across Office 97. However, Office 97 also features rich new capabilities such as built-in WordArt, 3-D effects, and more than 100 AutoShapes. </p>
<p>
The object model for OfficeArt is fully integrated into Word, Microsoft Excel, and PowerPoint, just as the OfficeArt tools are integrated in the user interface of the applications. Unlike other Microsoft Office components described in this section (such as Office command bars and the Office Assistant), each application contains the OfficeArt object model with its own unique integration features. A core 90 percent of the model is identical across the three applications, and approximately 10 percent of the model is composed of properties, methods, and subobjects that are specific to each application. </p>
<h4>Microsoft Office Assistant</h4>
<p>
Microsoft Office 97 introduces a new type of Help component—the Office Assistant. The Office Assistant, the Assistant's balloon, and all the items inside the balloon are controlled programmatically through the Assistant portion of the Microsoft Office object model. Each of the following items are represented in Visual Basic through the Assistant object. 
<ul type=disc>
<li>
Assistant actions <br><br></li>
<li>
Balloons <br><br></li>
<li>
Balloon headings, text, check boxes, buttons, and labels</li>
</ul>
<p>
The following illustration shows the Office Assistant, the balloon, and all the programmable objects inside the balloon. </p>
<p>
<img src="ofc97enh_14.gif" border=0></p>
<p class=label>
<b>Figure 14. Microsoft Office Assistant </b></p>
<p>
Developers can use the Office Assistant in solutions to get a user's attention, customize the Assistant's balloons to offer help in specific areas, or use the controls on the balloons to run Visual Basic for Applications procedures. </p>
<h4>Microsoft Office Command Bars</h4>
<p>
In Microsoft Office 97, toolbars, menu bars, and shortcut menus are all controlled programmatically through one type of object—command bars. Developers can modify any built-in menu bar or toolbar and create and modify custom toolbars, menu bars, and shortcut menus. Because toolbars and menus are included in command bars, developers use the same kind of controls on each one. For example, the docked toolbar shown in the following illustration contains three buttons. </p>
<p>
<img src="ofc97enh_15.gif" border=0></p>
<p>
The menu shown in the following illustration contains the same three commands displayed as menu items. </p>
<p>
<img src="ofc97enh_16.gif" border=0></p>
<p>
In Microsoft Office 97, menu bars and toolbars can contain menus. The floating toolbar shown in the following illustration contains three buttons and a menu with the same three buttons displayed as menu items. </p>
<p>
<img src="ofc97enh_17.gif" border=0></p>
<p>
In Visual Basic for Applications, buttons and menu items are represented by CommandBarButton objects. The pop-up controls that display menus and submenus are represented by CommandBarPopup objects. In the following illustration, the control named Menu and the control named Submenu both are pop-up controls that display a menu and submenu, respectively. The menu and submenu both are unique command bar objects with their own set of controls. </p>
<p>
<img src="ofc97enh_18.gif" border=0></p>
<p>
In Microsoft Office 97, edit boxes, drop-down list boxes, and combo boxes can be added to any command bar. These three types of controls are all represented by CommandBar ComboBox objects. </p>
<h4>FindFile and FileSearch</h4>
<p>
A new Application FileSearch object has been added to provide access to all the searching power of the File Open and Advanced Find capabilities of Office applications. Like the File Open dialog box, FileSearch uses Find Fast indexes, when available, to make searching much faster. With FileSearch, developers can create customized search forms that take advantage of the powerful indexes and the search engine available in all Microsoft Office applications. </p>
<h4>Tools for building connected solutions</h4>
<p>
At present, custom solutions integrate seamlessly with the messaging application programming interface (MAPI), Open Database Connectivity (ODBC), and local area network–based (LAN-based) technologies to support distribution and access of enterprise data. However, Microsoft Office 97 incorporates and exposes several new technologies that allow developers to take more effective advantage of the connected environment. New features and technologies in Microsoft Office 97 provide seamless integration to intranet and Internet environments and increase power and flexibility in accessing corporate data. </p>
<h3>Microsoft Office Web Solution</h3>
<p>
The new Web features in Microsoft Office 97 (including full hyperlink and searching capabilities) are available through the object model library. Developers can create powerful solutions that incorporate all the benefits of the Internet with the safety of a closed network. For example, with a custom-built intranet solution, an IS manager can define the Web search range on a server and control what files may be retrieved and the users who may retrieve them. </p>
<p>
<img src="ofc97enh_19.gif" border=0></p>
<p class=label>
<b>Figure 15. Office Web </b></p>
<p>
The Web features in Microsoft Office 97 are integrated consistently within all the application object models. Office-based Web documents are ordinary Microsoft Office documents—Word, Microsoft Excel, and PowerPoint—not HTML documents. </p>
<h3>Data Access Objects and Microsoft Jet</h3>
<p>
Data Access Objects (DAO) is the object model through which developers create data access solutions with the Microsoft Jet database engine. In Microsoft Office 97, a new version of DAO supports the following features in the new Jet 3.5 database engine: 
<ul type=disc>
<li>
<b>Improved performance.</b> Rushmore™ query technology improvements and better cache handling means performance improvements for Jet databases. <br><br></li>
<li>
<b>Full and partial replication.</b> Partial replication enables developers to create a replica that contains only a subset of records in the full replica. This dramatically speeds up data exchange because only the necessary data is replicated, rather than the entire database. DAO also supports replication over the Internet and intranets. <br><br></li>
<li>
<b>Multiuser improvements.</b> Jet 3.5 provides improved methods of handling locking to provide optimal performance in multiuser scenarios. <br><br></li>
<li>
<b>Recordset control.</b> Developers now have programmatic control over the number of records returned from a SQL pass-through query. <br><br></li>
<li>
<b>Reduced database growth.</b> Empty space in the database is reclaimed significantly faster in Jet databases, reducing the growth rate of the database during application development. </li>
</ul>
<h3>ODBCDirect</h3>
<p>
DAO 3.5 introduces a new client/server connection mode called ODBCDirect. ODBCDirect establishes a connection directly to an ODBC data source without loading the Microsoft Jet database engine into memory. ODBCDirect is useful in situations that require specific features of ODBC. ODBCDirect provides fast access to remote data (on ODBC-compliant databases) and provides support for the following: 
<ul type=disc>
<li>
Asynchronous processing <br><br></li>
<li>
Parameter passing <br><br></li>
<li>
Limiting number of rows returned <br><br></li>
<li>
Direct access to ODBC <br><br></li>
<li>
Batch updating </li>
</ul>
<h3>Universal Client</h3>
<p>
To help companies take advantage of Microsoft Office as a universal client to enterprise systems, Microsoft Office supports common industry standards, including the following: </p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=30%><b>ODBC</b></td>
<td class=label width=35%><b>ActiveX</b></td>
<td class=label width=35%><b>SGML</b></td>
</tr>
<tr valign=top>
<td width=30%>ODMA</td>
<td width=35%>Notes/FX 1.1</td>
<td width=35%>NotesFlow</td>
</tr>
<tr valign=top>
<td width=30%>MAPI</td>
<td width=35%>VIM</td>
<td width=35%>TAPI</td>
</tr>
<tr valign=top>
<td width=30%> HTML</td>
<td width=35%>SNA</td>
<td width=35%>AS400</td>
</tr>
</table><br>
<h2><a name="ofc97enhapps"></a>Microsoft Office 97 Applications Programmability Enhancements</h2>
<p>
In addition to the major changes listed earlier in this document, numerous other enhancements make developing with Microsoft Office 97 even easier. On the following pages are descriptions of those enhancements, organized by product. </p>
<h3><a name="ofc97enhaccess"></a>Microsoft Access 97 Programmability Enhancements</h3>
<h4>Accessing the Internet or an intranet </h4>
<p>
Microsoft Access 97 includes hyperlinks to help developers easily connect their application to the Internet or an intranet. A hyperlink can define a jump to a location on the Internet or on an intranet, to an object in a database, or to a document on the same computer or on another computer connected by a network. </p>
<p>
Microsoft Access provides a new hyperlink data type that can contain a hyperlink address. Users define a table field with this data type to store hyperlinks as data in a table. </p>
<p>
Hyperlinks can also be stored on a form or report. Three types of controls can contain hyperlinks—the command button, the label control, and the image control. </p>
<h4>Creating custom objects with class modules</h4>
<p>
Microsoft Access 97 includes three types of class modules—basic class modules, form modules, and report modules. A class module can be thought of as a template for a user-defined object. Within a class module, a developer can add public procedures that define custom methods and properties for the object. When an instance of the class is created, these custom methods and properties can be applied as they would be for any object. </p>
<h4>Improved form and report performance</h4>
<p>
One of the most powerful features in Microsoft Access is its ability to store Visual Basic for Applications code directly behind forms or reports. However, in reviewing sample databases and other customer research, Microsoft found that many developers don't always need this power. Many forms and reports are simple data-management forms and have no code behind them. </p>
<p>
Microsoft Access 97 now creates forms and reports that are "lightweight." These lightweight objects do not have a Visual Basic module behind them, nor are they part of the Visual Basic for Applications project. Thus, when opened, the objects load faster than traditional objects containing code. By default, all new Microsoft Access forms and reports are lightweight. The instant that code is added to a form or report, it becomes a traditional form or report object. Further, Microsoft added a new property to forms and reports called HasModule, which toggles between a traditional and lightweight form. </p>
<p>
Databases created using the Database Wizard in Microsoft Access 97 take advantage of this new lightweight form functionality to create databases that perform better. The Database Wizard intelligently opts to create lightweight forms whenever possible. If code is required only for navigation purposes behind a command button, the Database Wizard uses a hyperlink as the means to launch that form rather than instantiating a new code module. </p>
<p>
Expanding the available options for forms and reports in Microsoft Access 97 enables users to build forms and reports, without code, that can perform as much as 50 percent faster. </p>
<h4>Remove source code</h4>
<p>
Make MDE is a new feature in Microsoft Access 97 that allows developers to build and distribute more secure Microsoft Access applications and improve performance. Make MDE strips the Visual Basic for Applications source code from a Microsoft Access application and converts the file to a database with an .MDE extension. The .MDE database can be opened and used in Microsoft Access, but users cannot change the design or create new objects. Make MDE prevents the application from decompiling and helps protect the intellectual property of the developer. </p>
<p>
<img src="ofc97enh_20.gif" border=0></p>
<p class=label>
<b>Figure 16. Developers make .MDE files using the Make MDE File command on the Database Utilities submenu. </b></p>
<p>
If a database contains code written in Visual Basic, saving it as an .MDE file compiles all modules, removes all editable source code, and compacts the destination database. Code written in Visual Basic will continue to run, but it cannot be viewed or edited, and the size of the database will be reduced because the code was removed. </p>
<h4>Partial replication</h4>
<p>
<img src="ofc97enh_21.gif" border=0></p>
<p class=label>
<b>Figure 17. Partial replication </b></p>
<p>
Partial replication enables the developer to create a replica that contains only a subset of records in the full replica. With partial replication, only the necessary data gets replicated, rather than the entire database. </p>
<p>
For example, a business might store its entire sales database at its headquarters and replicate only regional data to its regional offices across the country. A separate replica can be created for each regional office that contains only the data relating to that region. The database at headquarters would be the design master with which each replica is synchronized. </p>
<p>
<b>Advantages of partial replication</b></p>
<p>
Partial replication can help restrict access to data. In the case of a sales database, partial replication can help ensure that people in a regional sales office don't view sales data for other regional offices. Although partial replication can be used to restrict access to records, it isn't a substitute for a security system. </p>
<p>
Partial replication also has benefits for replicating data over LANs and wide are networks (WANs). By restricting which data is replicated, partial replication can reduce the amount of data transferred over a LAN or a long-distance carrier. This can reduce network traffic and lower telecommunications costs. </p>
<h4>Source code control</h4>
<p>
Microsoft Access 97 supports integration with various source code control providers, including the Microsoft Visual SourceSafe™ version control system. Visual SourceSafe is available as an add-in in the Microsoft Office Developers Edition. The add-in is compliant with the standard source code control interface; thus, any source code control provider that supports the interface, including PVCS or Visual SourceSafe, can now integrate with Microsoft Access 97. </p>
<p>
By integrating source code control in Microsoft Access, teams of developers can work collectively on a single Microsoft Access database application and maintain code integrity. With source code controls, developers can do the following: 
<ul type=disc>
<li>
See which objects are checked out <br><br></li>
<li>
Check out an object to control changes to the object <br><br></li>
<li>
Check in an object so that other developers can access their changes <br><br></li>
<li>
View a history of changes for each object <br><br></li>
<li>
Visually compare differences between versions of an object <br><br></li>
<li>
Apply versions to objects and revert to a previous version of an object <br><br></li>
<li>
Merge differences in versions of an object </li>
</ul>
<p>
Source code control allows developers to view differences in their Microsoft Access database objects, such as changes in the switchboard form illustrated in Figure 18. </p>
<p>
<img src="ofc97enh_22.gif" border=0></p>
<p class=label>
<b>Figure 18. Source code control </b></p>
<h3><a name="ofc97enhexcel"></a>Microsoft Excel 97 Programmability Enhancements</h3>
<p>
More than ever before, Microsoft Excel is a powerful platform for building custom solutions to meet specific business needs. Rather than expending resources on writing low-level code, companies are investing in solutions that use the built-in power of Microsoft Excel for data analysis, charting, and presentation. </p>
<p>
More than 500,000 solution developers use Microsoft Excel as the platform for building custom solutions for specific business needs. Microsoft Excel 97 will continue to be the best spreadsheet development platform, with improvements in capacity, end-user programmability, IDE, forms capability, true event-driven programming, support for ActiveX technologies, increased programming control for PivotTable® dynamic views, and taking advantage of the Data Map object model. </p>
<h4>Increased capacity</h4>
<p>
One of the top three requests on the Microsoft product wish line for Microsoft Excel is to increase the capacity of Microsoft Excel worksheets, whether it be the number of characters in a cell or the number of rows on a worksheet. Developers have consistently requested this increase in capacity so they can manage large workbooks—especially in solutions in which Microsoft Excel brings in large amounts of data from an external database. </p>
<p>
In Microsoft Excel 97, the cell capacity, number of rows, and number of points per series in a two-dimensional chart has been increased as shown in the following chart. </p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=49%><b>Microsoft Excel 95</b></td>
<td class=label width=51%><b>Microsoft Excel 97</b></td>
</tr>
<tr valign=top>
<td width=49%>255 characters per cell</td>
<td width=51%>32,767 characters per cell</td>
</tr>
<tr valign=top>
<td width=49%>16,384 rows</td>
<td width=51%>65,535 rows</td>
</tr>
<tr valign=top>
<td width=49%>4,000 points per series (2-D chart)</td>
<td width=51%>32,000 points per series (2-D chart)</td>
</tr>
</table><br>
<h4>Data validation</h4>
<p>
The most common usage of a spreadsheet is for entering and analyzing data. In the past, there was no way to control or validate data entry. Microsoft Excel 97 now offers users a way to define rules in a worksheet without programming. With data validation, those who create templates for data entry (for example, expense reports, invoices, and purchase orders) can set up validation rules for cells and ranges without writing custom code. </p>
<p>
Data validation enables developers to do the following: 
<ul type=disc>
<li>
Set criteria to determine whether the data entered into the worksheet by another person is the "right" kind of data (e.g., text in a data field would be invalid). <br><br></li>
<li>
Set up criteria and descriptive prompts for others who might enter information into their custom worksheet, so those entering data know what type of information should be entered into the cell. <br><br></li>
<li>
Specify error type and message to prompt the user for invalid entries. <br><br></li>
<li>
Check the form by using the auditing toolbar to identify whether any of the entries are invalid. </li>
</ul>
<p>
<img src="ofc97enh_23.gif" border=0></p>
<p>
<img src="ofc97enh_24.gif" border=0></p>
<p class=label>
<b>Figure 19. Data validation </b></p>
<p>
<img src="ofc97enh_25.gif" border=0></p>
<p class=label>
<b>Figure 20. User applies data validation rules . . .</b></p>
<p>
<img src="ofc97enh_26.gif" border=0></p>
<p class=label>
<b>Figure 21. . . . and warns the user that the entered data is invalid </b></p>
<p>
Data validation ensures that the person entering the data will properly complete the worksheet. If the Microsoft Office Assistant is active, the input messages and the error alerts are prompted by the Assistant. Also, reviewing of forms is reduced so that users can focus on the content rather than on data-entry errors. </p>
<h4>Events</h4>
<p>
Visual Basic for Applications in Microsoft Excel 5.0 and Microsoft Excel 95 had event handling—the ability to watch what the user is doing and react appropriately. Microsoft Excel supports 14 "quasi-events" such as OnEntry, OnCalculate, and so forth. Microsoft Excel 97 features much richer event handling in terms of the number of events available as well as the specific objects to which triggering code can be attached. In addition, the interface to interact with these events is consistent with Visual Basic and with Microsoft Forms. As a result, developers for Microsoft Excel have more flexibility and control in responding to user actions. </p>
<h4>Programmatic control over PivotTable</h4>
<p>
PivotTable is a powerful analysis tool that gives users a large amount of flexibility to view their data from different dimensions. While users like this power and flexibility in the user interface, solution developers want programmatic access to automate and control PivotTable dynamic views through code. Microsoft Excel 5.0 and Microsoft Excel 95 provided the ability to control PivotTable functionality via Visual Basic for Applications; Microsoft Excel 97 dramatically extends PivotTable controls by exposing properties and methods in its object model for bulletproofing, memory and cache management, formatting, and external queries. For example, developers now have programmatic access to the PivotTable cache so they can create, delete, and determine cache size. Developers can also turn off PivotTable recalculation. Finally, extensive protection of PivotTable can be implemented for secure access. Now, controlling PivotTable functionality is more flexible than ever. Solution developers can use these new properties and methods to build richer reporting solutions. </p>
<h4>Data Mapping Object Model</h4>
<p>
In Microsoft Excel 95, Data Map exposed only one method, RefreshMap, for the custom solution developer. In Microsoft Excel 97, an object model for Data Map allows custom solution developers to add basic geographic data visualization to their solutions. This object model makes most of the capabilities that are available to end users available to developers as well. </p>
<p>
<img src="ofc97enh_27.gif" border=0></p>
<p class=label>
<b>Figure 22. Data Map </b></p>
<h4>Enhanced functionality for add-ins </h4>
<ul type=disc>
<li>
<b>Easier distribution of Add-Ins.</b> AddinPath registration key allows you to set up the user's machine to find your Add-in without having to put your Add-in in the System directory. <br><br></li>
<li>
<b>Simplified development and debugging of Add-ins. </b>Add-ins are just workbooks with special properties now. You can debug and save your Add-in while the Microsoft Excel application treats it like a full fledged Add-in. <br><br></li>
<li>
<b>Event handlers that fire for all workbooks.</b> These event handlers will typically be stored in Add-ins. <br><br></li>
<li>
<b>"Make AddIn" command and add properties.</b> These properties have been included to enable fine control over what makes an Add-in. </li>
</ul>
<h4>Events for sheets and workbooks</h4>
<p>
Code behind documents allows Microsoft Office documents to use the event-handling model in Visual Basic for programming controls. This event-handling model allows the programmatic control of "events" on the document. Using this event-handling model exposes most document, workbook, and sheet events to the developer. Twenty events are associated with a workbook and seven events are associated with any particular worksheet, giving the developer significant control over user interaction with the application. </p>
<p>
<img src="ofc97enh_28.gif" border=0></p>
<p class=label>
<b>Figure 23. Events on Microsoft Office documents </b></p>
<h4>Events for subobjects</h4>
<p>
Events can have parameters passed by the event caller. These parameters can be used to specify the object within a container that actually fires the event. For instance, the cell range that was clicked can be determined as a parameter of the SelectionChange event on a worksheet. In another instance, the WindowActivate and WindowDeactivate events can be placed on a workbook and pass the window object as a parameter. </p>
<h4>Events on the application</h4>
<p>
The application object has events that fire after any workbook or worksheet event fires. This allows for features that customize Microsoft Excel. For example, a company may want to replace the PivotTable feature with its own multidimensional pivot engine to manage double-click events on special PivotTable dynamic views. Events on the application enable the developer to add an event that would run for any interaction with a worksheet. </p>
<h3><a name="ofc97enhpowerpoint"></a>Microsoft PowerPoint 97 Programmability Enhancements</h3>
<p>
Microsoft PowerPoint 97 is the sixth major release of the world's most popular presentation graphics software program. This release adds Visual Basic for Applications, version 5.0, and improved functionality to PowerPoint. The object model has been enhanced to provide consistency with the other Microsoft Office applications and to ensure full access to all of the new functionality in PowerPoint 97. </p>
<p>
PowerPoint 97 offers the following areas of programmability: 
<ul type=disc>
<li>
Object model and full programmatic access to the features and functionality of PowerPoint 97 <br><br></li>
<li>
Integration with Visual Basic for Applications <br><br></li>
<li>
ActiveX™ controls on Microsoft Forms and PowerPoint presentations <br><br></li>
<li>
Macro recording <br><br></li>
<li>
Support for add-ins </li>
</ul>
<p>
PowerPoint 97 provides a robust application development environment, making it the best presentation package for custom solutions. </p>
<h4>Object model and full programmatic access to features and functionality in PowerPoint 97</h4>
<p>
PowerPoint 97 exposes the vast majority of its feature set and functionality in the object model. Additions to the PowerPoint 97 object model also include Office 97 components and their associated object models, such as command bars, document properties, Office Assistant, and OfficeArt. </p>
<p>
Consistency among the applications in the name and function of key events, methods, and properties makes it easy for users to find the object they need as they scroll through the Visual Basic for Applications Object Browser. A number of additions and changes have been made to the PowerPoint object model so that it is even more consistent with the other Office applications. </p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;OLE Automation of charting. The charting module in PowerPoint 97 supports OLE Automation, allowing for automated solutions that can import and export charts from PowerPoint. The charting module can even push data into or pull data out of the underlying worksheet. This enables powerful custom automation of information such as presentations of sales data and financial results in executive information systems. The data, chart, and formatting elements of the chart are exposed, making it easy for custom solutions to include powerful graphical representation of data in PowerPoint 97 slides. </p>
<h4>Integration with Visual Basic for Applications</h4>
<p>
PowerPoint 97 has a robust Visual Basic for Applications implementation consistent with the other Office 97 applications, including Visual Basic Editor and Microsoft Forms. Developers creating applications in Visual Basic will be able to take full advantage of their knowledge of Visual Basic and apply it to creating custom dialog boxes, features, and add-ins for PowerPoint 97. </p>
<h4>ActiveX controls in a presentation</h4>
<p>
Office 97 will allow a user to place and program ActiveX controls on a presentation. This ability allows users to add powerful and customizable controls to their presentations. PowerPoint 97 provides a user interface to view and change properties of the control. This user interface will support both the control's properties and the container's object properties, such as position and size, in the same Properties window. The Visual Basic Editor exposes the code module that holds the event handlers for the control. </p>
<p>
With Visual Basic for Applications, forms, and ActiveX controls support, PowerPoint 97 enables the following: 
<ul type=disc>
<li>
The use of PowerPoint 97 as a training aid or vehicle to deliver a survey questionnaire, allowing respondents to enter text to an edit control or check the check box control, which the surveyor can later analyze. <br><br></li>
<li>
The ability to add controls to a slide show to make selections or change options. <br><br></li>
<li>
Online data-collection controls to PowerPoint 97 slides on the Web. </li>
</ul>
<h4>Macro recording </h4>
<p>
PowerPoint 97 will be the first version of PowerPoint that provides a macro recorder, an important tool that enables user automation of repetitive tasks and automatically generates Visual Basic for Applications code that can then be modified. Macro recording functionality across the Microsoft Office applications presents a consistent user interface and functionality to users so that they can learn how to do it only once and apply that knowledge across the other applications. </p>
<h4>Support for Add-ins</h4>
<p>
Third parties and developers can take advantage of the added support for add-ins in PowerPoint 97. Customized functionality can now be written and installed, adding custom features to the PowerPoint 97 menu and toolbar structure and thereby greatly extending the range of functionality that users receive from PowerPoint 97. </p>
<h3><a name="ofc97enhoutlook"></a>Microsoft Outlook 97 Programmability Enhancements</h3>
<h4>Building Outlook information-sharing solutions</h4>
<p>
Now, more than ever before, corporate users are faced with an overwhelming volume of information. The arrival of the Internet on the corporate desktop has opened new vistas for users, enabling them to extend their reach beyond traditional corporate boundaries, but it has also brought an increased level of complexity to their everyday business life. Corporate users today don't need more information, they need solutions for managing, sharing, and analyzing information. Now, with Microsoft Outlook 97, users can develop such solutions quickly and easily using the Microsoft Outlook application design environment—so information becomes useful, rather than unwieldy. </p>
<p>
The rapid evolution of Internet technology has also clouded the future of corporate communications. In an uncertain and changing market, corporations can no longer afford to take the risk of committing resources to costly long-term business solutions, only to arrive at a dead-end solution. Plus, as corporations have downsized, IS resources have dwindled, leaving departments and workgroups to fend for themselves in terms of developing business solutions. With Microsoft Outlook 97, designers can build industrial-strength applications in days, instead of months, so corporations can get the solutions they need without spending time and money on expensive programming resources. In addition, the Outlook design environment is integrated with Office 97 and Microsoft Exchange Server, so application designers can build and implement solutions for proven technologies with the confidence that these technologies won't disappear tomorrow. </p>
<p>
Finally, as corporations have decentralized their operations, system administrators are challenged with the task of managing an ever-increasing number of applications developed at the workgroup level. As such, they need a way to provide centralized storage and security for applications and information, as well as an easy way to integrate the applications into the overall business environment. As a workgroup client, Microsoft Outlook 97 runs on the Microsoft Exchange Server, so any applications developed with Microsoft Outlook 97 can take full advantage of the central administration, replication, and security features of the Microsoft Exchange Server. </p>
<p>
The value of using the Outlook application design environment to build information-sharing groupware and mail-enabled solutions can be summarized in five key areas. 
<ul type=disc>
<li>
<b>Instant groupware using shared modules: </b>Outlook ships with built-in Calendar, Task, Journal, and Contacts modules that can be customized easily. When located in a public folder on the Microsoft Exchange Server, these full-featured modules allow workgroups to share calendars, schedules, task lists, or customer contact information across the enterprise, thus creating instant groupware. <br><br></li>
<li>
<b>Fast and easy application development:</b> The Outlook design environment empowers end users because it provides a non-programming environment that enables them to quickly build information-sharing and mail-enabled applications. End users can base their applications on built-in modules, forms, or sample applications in the Outlook box (or supplied separately in the Office Resource Kit or the Microsoft Office Web site). In many cases, designers need only add or remove controls or fields to meet their design needs. Outlook also provides a variety of sample applications, such as Expense Reporting, TimeCard, and HelpDesk that can be implemented as-is or customized to meet the specific needs of a workgroup or organization. <br><br></li>
<li>
<b>Scalable application development: </b>Many groupware applications grow in popularity and require additional functionality as their use becomes more widespread. Outlook provides for this situation by offering a scalable application development environment. End users can design solutions without programming, while programmers and application designers can add advanced functionality to solutions using Visual Basic for Applications (only when using Office 97 Document Forms), ActiveX controls, or Visual Basic Scripting Edition (VBScript). <br><br></li>
<li>
<b>Centralized management and security:</b> As a workgroup client, Outlook runs on the Microsoft Exchange Server, so any applications developed with the Outlook design environment can take full advantage of the central administration, replication, and security features of the Microsoft Exchange Server. For example, a designer can develop an application on his or her computer, and then turn it over to a system administrator who installs it on the Microsoft Exchange Server. Once the application is on the server, the administrator can set access permissions and replication properties for the folder, so the folder is both secure and replicated across the enterprise. <br><br></li>
<li>
<b>Outlook binds the Internet and intranet (extending Outlook applications):</b> All companies have a common need to integrate the Internet with their intranet. Outlook provides the glue that binds the Internet and the intranet because it provides Internet messaging capabilities, so schedules, documents, and forms can be mailed over the Internet. Plus, it offers groupware capabilities, so these same items can be stored, organized, and shared among members of a workgroup. For example, a user could send a Product Feedback form over the Internet to a customer. When the customer returns the form, it can be automatically routed to a folder on the Microsoft Exchange Server where it can be reviewed by all members of the workgroup. </li>
</ul>
<p>
In addition, Outlook offers the ability to link forms to Web pages, so application designers have a great deal of flexibility in creating Internet/intranet applications. For example, a designer can link a "For More Information" form to a corporate Web page. This form can be preaddressed to a Potential Customers public folder so that when a user who is browsing the Web opens and completes the form, the information is automatically routed to the Potential Customers public folder where it can be shared and responded to by members of a workgroup or by the entire organization </p>
<p>
As an application design environment, Outlook offers tight integration with Office 97, the groupware and administration capabilities of the Microsoft Exchange Server, and the messaging capabilities of the Internet. This paper details the features of the Outlook application design environment and shows how it can be used to develop information-sharing and groupware solutions to streamline business processes and enhance communication in an organization. </p>
<h4>Instant groupware using built-in modules</h4>
<p>
As a workgroup client, Outlook provides several personal management tools, such as Calendar, Tasks, and Contacts, that can greatly add to a user's productivity. While these modules provide great benefit for the individual user, their value can be dramatically increased when users share information in these modules through the use of public folders and Internet connectivity. </p>
<p>
Application designers can create a public folder based on a built-in Outlook module. Once located in public folders on the Microsoft Exchange Server, built-in modules become instant groupware because the information in their folders can be shared among the workgroup. Also, custom code and custom forms are not necessary—the instant groupware application can take advantage of the existing forms and behavior of the built-in module. As a result, built-in modules can be used for scheduling group events, managing group tasks, and sharing and maintaining a customer contact list among a workgroup. </p>
<p>
Calendar, Tasks, and Contacts modules can be customized—without programming—to meet the specific needs of a workgroup or organization. For example, an application designer can create a generic Calendar public folder and then add custom views to the Calendar folder so that the module can be used specifically for entering and viewing the schedule of training classes for a workgroup. </p>
<p>
The following sections provide a brief overview of how the built-in modules can be customized and used in an organization to improve workgroup communication. </p>
<p>
<b>Calendar</b></p>
<p>
The Outlook Calendar module combines the functionality of Microsoft Schedule+, plus additional features, with the groupware capabilities of Outlook. When located in the Mailbox or Personal folder, the Calendar module enables users to create personal schedules, create reminders, or set up meetings. When the Calendar module is copied to the Microsoft Exchange Server, however, it can be used for sharing group schedules, posting the significant events in a marketing kickoff campaign, making a class schedule publicly available, or posting company holidays in a public folder. </p>
<p>
<img src="ofc97enh_29.gif" border=0></p>
<p class=label>
<b>Figure 24. The Calendar Module is located in the public folders so that the class schedule can be viewed by all members of the organization. In addition, users can copy specific appointments to their personal Calendar. </b></p>
<p>
<img src="ofc97enh_30.gif" border=0></p>
<p class=label>
<b>Figure 25. The instructor can double-click an item and update class information, while the user can open the item and get more detailed information about a particular class. </b></p>
<p>
<b>Contacts</b></p>
<p>
When a Contacts folder is created in public folders on the Microsoft Exchange Server, workgroup members can add to, update, and share a list of contacts. For example, the sales department can share a list of leads, or the entire company can share a list of vendor contacts. </p>
<p>
In the following example, a custom Marketing Materials Tracking view is created by adding two fields, Not Interested and Materials Sent, to the view. This view lets members of the Marketing department track correspondence with potential customers without ever opening a form. As shown in the figure below, if a prospective customer wants to receive information from the Marketing department, the user can enter the date she sent it in the Material Sent column in the view. If the customer is not interested in the material, the user can click a <b>Not Interested</b> check box directly in the view to notify other users not to contact the customer. </p>
<p>
<img src="ofc97enh_31.gif" border=0></p>
<p class=label>
<b>Figure 26. The Contacts module is transformed into a Marketing Material Contacts application. </b></p>
<p>
<b>Tasks</b></p>
<p>
The Task module lets users keep track of their personal to-do lists and project schedules. When the Task module is created in public folders, a workgroup can share a common task list that shows who's responsible for tasks, as well as the status of tasks. </p>
<p>
Using the task module, a project manager can create a public Task folder. Individual users can then enter the tasks that they are required to complete as their part of the project. When users finish a task or make significant progress on it, they can update the task item in the public folder, thus allowing the product manager to get an overall view of the progress of a particular project. </p>
<h4>Fast and easy application development</h4>
<p>
In the past, when application development was the domain of IS departments, end users often waited forever for a custom solution, only to discover that when it arrived, it wasn't what they asked for and it was next to impossible to change. Now, with the easy-to-use Outlook application design environment, designers can develop their own solutions—without programming. Making changes to views and forms is usually both fast and simple. </p>
<h4>Forms design</h4>
<p>
The Outlook Forms Designer is a 32-bit environment that's built directly into the product, so opening the Forms Designer is as easy as opening a form in Outlook and clicking <b>Design</b> <b>Outlook Form</b> on the <b>Tools</b> menu. In addition, users can easily switch between Design and Run mode while working on a form. Outlook also provides a variety of features that provide a significant improvement over the current Microsoft Exchange Forms Designer environment, including: 
<ul type=disc>
<li>
<b>Outlook forms are fully 32-bit forms:</b> So they're fast and, perhaps equally important, they're small, averaging about 10K. <br><br></li>
<li>
<b>Outlook forms are not compiled:</b> So they're easy for users to keep track of and update. With Outlook forms, users don't need to worry about searching through folders or directories to find uncompiled source files to make changes to a form. In fact, Outlook's simple OFT file format lets users make changes to forms and then publish them to a forms library as easily as they save a document file in Word or Microsoft Excel. <br><br></li>
<li>
<b>Outlook forms provide built-in functionality:</b> When building an application, users always start with either a built-in module, sample application, or one of the standard message, post, or office forms. Because most of the functionality is already supplied for users, they can often build high-quality applications in days, sometimes hours. <br><br></li>
<li>
<b>Outlook forms can be linked from a Web page:</b> Outlook forms are stored in a simple OFT file format and can be linked to from Web pages and other Office documents, so organizations can create repositories of custom groupware forms that can be accessed via an Internet browser. </li>
</ul>
<h4>The Outlook Forms Designer</h4>
<p>
The Outlook Forms Designer provides a wide assortment of layout features to speed application development and give forms a professional appearance. 
<ul type=disc>
<li>
<b>AutoLayout:</b> With the Forms Designer AutoLayout feature, controls are automatically positioned on the form in the best possible location. For example, if a new control is dragged below an existing control, the new control is automatically left-aligned with the existing control. <br><br></li>
<li>
<b>A variety of alignment options:</b> With the Outlook Forms Designer alignment options, controls can be aligned in a number of ways, including Left, Center, Right, Top, Middle, Bottom, or To Grid. <br><br></li>
<li>
<b>Adjustable grid size:</b> The Outlook Forms Designer provides an adjustable grid so that designers can easily and accurately position controls on a form. </li>
</ul>
<p>
<img src="ofc97enh_32.gif" border=0></p>
<p class=label>
<b>Figure 27. With the Outlook Field Chooser, designers can use built-in fields or they can create new user-defined fields. Outlook provides a full-featured toolbox to which the designer can add a full complement of custom or ActiveX controls. </b></p>
<h4>Custom form design based on standard forms</h4>
<p>
When creating applications, designers can base their forms on one of four standard types:
<ul type=disc>
<li>
<b>Mail Message form:</b> Lets users send, receive, and respond to items. Items can be sent to another user, to a distribution list, or to a public folder. <br><br></li>
<li>
<b>Post form:</b> Lets users post, view, and respond to items in a folder. The Post form serves as the foundation for discussion applications with threaded conversation views that enable users to conduct and view online conversations. <br><br></li>
<li>
<b>Office 97 Document form:</b> Combines the power of Microsoft Excel, Word, or PowerPoint with the groupware and mail capabilities of Outlook. With Outlook, a form is essentially wrapped around an Office document so that it can be sent as a mail message or shared in a public folder. <br><br></li>
<li>
<b>Contact, Task, and Calendar forms:</b> These built-in forms can be modified by showing additional pages on the form. Designers can then add controls to the additional pages to suit their particular needs. </li>
</ul>
<p>
<img src="ofc97enh_33.gif" border=0></p>
<p class=label>
<b>Figure 28. The standard appointment form is transformed into a Technician Schedule form for a corporate Help Desk application. </b></p>
<p>
Because the Contacts, Tasks, and Calendar forms were covered earlier in this paper, this section will focus on Message, Post, and Office 97 Document forms. Each of these three forms support all the features of standard Microsoft Exchange forms, so designers can build forms with the certainty that the functionality they need, including digital signature and encryption, will be available. Details of the features of these three types of forms is provided in the following sections. </p>
<h4>Mail message forms automate traditional processes</h4>
<p>
Using the Mail Message form as a base, application designers can build custom forms for structuring information, requesting services, or collecting information from coworkers or from customers. Users can send and receive mail message forms within the enterprise or across the Internet. </p>
<p>
When used with a public folder, the message form provides a powerful tool for collecting customer information. For example, designers can create a Product Feedback form and specify a public folder as the return address. They can then send the form to customers, who can install it in their form library. When customers have product feedback, they can open the form, fill it out, and automatically return it via the Internet to the company's Product Feedback public folder. </p>
<p>
Here are a few other ideas for creating Mail Message forms using the Outlook Forms Designer. 
<ul type=disc>
<li>
<b>Request Forms:</b> Electronic forms provide a great way to automate a request process in an organization. For example, designers can create forms for purchase orders, copier services, business cards, or travel requests. <p class=tl>
In the following example, shown in the Figure 29, the Vacation Request form is filled out by a user and sent to a supervisor. When the supervisor receives and opens the Vacation Request item, he or she can click a button on the Vacation Request form to approve or deny the request and automatically route the response to the sender. Note also that the form takes advantage of several features of the Outlook design environment, including AutoName Check for the To box and automatic calculation of Total Days based on a formula defined with the Access Expression Service. </P><p>
<img src="ofc97enh_34.gif" border=0></P><p class=label>
<b>Figure 29. Vacation Request form is based on the Mail Message form and lets the user mail a request within the company or across the Internet. </b>
</li>
<li>
<b>Feedback or survey forms:</b> Survey or feedback forms can be used to collect feedback from customers or coworkers. For example, you could link an Employee Satisfaction survey form to your company's Web page. Outlook users browsing the company's internal web can click the link to open the form. They can then fill it out and route it to an Employee Satisfaction public folder.<br><br></li>
<li>
<b>Report forms:</b> Report forms can be used to structure and distribute information. For example, remote workers can send weekly status reports back to the main office. Temporary employees can send Weekly Time Sheet forms to their employment agency, or members of the Sales force can submit their Mileage Report to a supervisor for approval. </li>
</ul>
<p>
<img src="ofc97enh_35.gif" border=0></p>
<p class=label>
<b>Figure 30. The Help Ticket form is also based on the Mail Message form but this time the Read Page formatting has been totally customized to create a completely different look from the Help Ticket compose form. </b></p>
<h4>Discussion forms break down communication barriers </h4>
<p>
Discussion forms, also known as Post forms, can be used in conjunction with a public folder to build participatory applications that help break down traditional time and space boundaries between members of an organization. Using the Discussion form as a base, designers can build applications that allow users to conduct online discussions, which can be especially useful for virtual corporations or for flexible workgroups where members work together on a project, but work different hours. </p>
<p>
For example, let's assume three people, all in different cities, are working together on planning a new product. A user in Seattle can submit a product suggestion to a Wish List folder on the Microsoft Exchange Server. A user in Chicago can then use a customized Discussion form to post a response to the suggestion. Meanwhile, another user in Denver can follow the conversation because the items are arranged in the folder by conversation topic. </p>
<p>
Here are a few ideas of the types of discussion forms designers can build. 
<ul type=disc>
<li>
<b>Forms for a technical users group: </b>Users can submit problems and solutions to problems, as well as review and respond to submitted problems. <br><br></li>
<li>
<b>Job candidate forms:</b> A supervisor or human resource administrator can submit a job candidate item to a public folder. After each user interviews the candidate, he or she can submit hiring recommendations to the Job Candidate folder, where the summary of opinions can be reviewed by the supervisor. <br><br></li>
<li>
<b>Product wish list forms: </b>A designer can create one form for submitting items to a folder for suggestions, and another form for responding to suggestions. Product planners can review the folder for new ideas for their product. <p>
<img src="ofc97enh_36.gif" border=0></P><p class=label>
<b>Figure 31. The Post form is modified to conduct conversations about new product ideas. </b>
</li>
</ul>
<h4>Build Office document forms based on existing templates</h4>
<p>
With Office Document forms, you can build forms based on existing templates in your organization. For example, assume you already have Microsoft Word templates in your organization, such as Beta Agreements, Contractor Agreements, or Job Estimates. With the Outlook Forms Design environment, designers can essentially wrap these templates in an Outlook form wrapper, so the template's document properties can be promoted in a public folder. This enables designers to create document library folders for a wide variety of purposes, such as storing contracts, product specifications, job estimates, Microsoft Excel worksheets, or PowerPoint presentations. </p>
<p>
In the following example, the Office form contains a Microsoft Word Beta Agreement template. To send a beta agreement to a customer, a user opens the Beta Agreement form from the Contract Library folder. She can then fill out the appropriate fields in the Word template and send the document form over the Internet to the customer. </p>
<p>
<img src="ofc97enh_37.gif" border=0></p>
<p class=label>
<b>Figure 32. The Beta Test Agreement form is composed of the Outlook form combined with the Microsoft Word Beta Test Agreement template. </b></p>
<p>
When the form is returned, it can be routed to the Contract Library public folder, where its fields can be shown in a public folder. In addition, the fields can be used to organize documents in a custom view. </p>
<p>
<img src="ofc97enh_38.gif" border=0></p>
<p class=label>
<b>Figure 33. Custom Properties in the Beta Agreement template, including Customer, Date, and CoLocation, are used to create column headings in the Beta Test Agreement view. </b></p>
<h4>Folder design</h4>
<p>
The Outlook workgroup client provides a Folder Design environment that improves upon many of the design features offered in the Microsoft Exchange client. With Outlook, designers can do most of the design work for views directly in the folder. For example: 
<ul type=disc>
<li>
<b>Drag-and-drop columns adjustment:</b> With the Outlook client, designers can arrange columns by dragging the column header to the desired position. The designer never needs to open a dialog box. <br><br></li>
<li>
<b>Add columns using the Field Chooser</b>: Using the Field Chooser, designers can automatically add columns to a view by simply dragging fields from the Field Chooser to the folder. <br><br></li>
<li>
<b>Group By box:</b> Designers can dynamically create groups for views by simply dragging the Column Heading into the Group By box. <br><br></li>
<li>
<b>Best Fit feature:</b> With this feature, designers right-click the column, then click Best Fit. Outlook automatically arranges the column size to fit the text in the field. <br><br></li>
<li>
<b>In-cell editing:</b> Oftentimes users want to change values in an item without actually opening the form to display the item. The Outlook client provides this option by enabling the designer to specify In-cell editing for a view. When In-cell editing is selected for a view, users can select check boxes and edit text fields in the folder. </li>
</ul>
<p>
<img src="ofc97enh_39.gif" border=0></p>
<p class=label>
<b>Figure 34. The Views Design environment provides features that allow designers to construct views without opening a dialog box.</b></p>
<h4>Create Outlook folders for better workgroup communication</h4>
<p>
Research studies report that groupware is most commonly used for online discussions, tracking, or document library applications. Therefore, Outlook is strategically focused on these three most frequently used types of applications. Each of these types of applications is discussed in more detail in the following sections. </p>
<h4>Discussion applications</h4>
<p>
Discussion folders are often referred to as "online bulletin boards." These folders serve as a central location for users to submit, share, and respond to ideas and information. One of the most valuable features of a discussion folder is known as <i>conversation threading</i>, and it enables designers to create rich views that show the history of responses to a particular item. The usefulness of conversation threading is demonstrated in the Job Candidate folder, where interviewers' hiring recommendations for a candidate are organized and posted in a public folder, so the person in charge of hiring can get an overall view of the workgroup's impression of the candidate. </p>
<p>
<img src="ofc97enh_40.gif" border=0></p>
<p class=label>
<b>Figure 35. The New Job Candidate item is posted to the Job Candidate folder. After workgroup members interview a candidate, they submit their hiring recommendation by responding to the Candidate item. The responses, as shown in the illustration, create a conversation thread. </b></p>
<p>
Here are a couple of other folder ideas that might help a company improve relations with its customers. 
<ul type=disc>
<li>
<b>Technical users group:</b> Users, either customers or internal users, can submit solutions, ideas, and problems, as well as review and respond to submitted solutions. <br><br></li>
<li>
<b>Customer support bulletin board:</b> This application records customer questions, the preferred response, and how the call was resolved. The information can be organized in a number of ways, such as by product or by customer. </li>
</ul>
<h4>Document library applications</h4>
<p>
Outlook folders are not limited to storing mail messages, so users can store graphic images, OLE objects, URLs, voicemail, and documents in a Reference folder. For example, a development workgroup can create a Specification Library for storing, organizing, and reviewing product specifications. In addition to documents and mail messages, users can store Web-site references in folders, so a list of useful Web sites can be shared and updated by a workgroup. In the following example, the Aero Web folder is used to store Web sites for the aircraft industry. From the Microsoft Internet Explorer, users can save their favorite Web sites as URL files and then drag the files into the Web Reference folder. Other users can then simply click the item in the public folder to go to the Web site. </p>
<p>
<img src="ofc97enh_41.gif" border=0></p>
<p class=label>
<b>Figure 36. Web Reference folder. The user clicks an item in this folder to activate the Internet Explorer and go to the Web URL. </b></p>
<h4>Tracking applications</h4>
<p>
Tracking applications lets the user record and view information that is constantly updated. The following example shows a Customer folder that allows a Help Desk worker to log and track Customer Service Request items. Notice the All By Status view is selected in the view box so that Customer Service Request items are grouped according to whether they're open, on hold, or closed. </p>
<p>
<img src="ofc97enh_42.gif" border=0></p>
<p class=label>
<b>Figure 37. Customer service items are posted in the folder. When the status of a job changes, the user can open the folder, change the status, and then save the item in the folder. </b></p>
<h4>Advanced design features</h4>
<p>
The Outlook Forms Design environment provides powerful tools that enable the designer to add intelligence and automation to forms and views. These tools include: 
<ul type=disc>
<li>
The Access Expression Service, built into the Outlook Forms Design environment, enabling designers to create validated, formula, and combination fields easily. For example, with the Access Expression Service, the designer can create a Formula field for a TimeCard form that automatically calculates the total number of hours worked in a week. <br><br></li>
<li>
Microsoft Visual Basic Scripting Edition (VBScript) is built into the Outlook Forms Designer, offering the designer the full capabilities of VBScript, a subset of Visual Basic Applications Edition. Using the Outlook object model and VBScript, designers can add additional functionality to standard methods such as <b>Open</b> and <b>Close</b>, automatically create items and set properties on them, and add intelligence to forms so that fields are automatically filled in for the user. </li>
</ul>
<p>
Both the Expression Service and VBScript Editor are described in more detail in the following sections. </p>
<h4>Validated, formula, and combination fields</h4>
<p>
Using the Access Expression Service, the designer can add functionality to fields. For example: 
<ul type=disc>
<li>
<b>Field validation </b>can be built into forms to ensure that a specific value or a value range is entered into a field, or to ensure that a field value is not exceeded. For example, for a Purchase Order form, if the value of the Total box exceeds $2000 dollars, the form can open a dialog box that explains to users that they must first submit the purchase order request to their supervisor for approval. To add validation to a field, the designer can use the Access Expression Service provided with the Outlook Forms Designer. <br><br></li>
<li>
<b>Formula fields </b>are great for forms that require total values, such as timesheets, mileage reports, and sales reports. The process of creating formula fields is greatly simplified for the designer through the use of the Access Expressions Service. As shown in Figure 38, the Expression Service is used to create a formula for the TotalDays field that automatically calculates total vacation days based on the dates the user enters in the StartDate and EndDate fields. <p>
<img src="ofc97enh_43.gif" border=0></P><p class=label>
<b>Figure 38. The value in the Total Days field is automatically calculated by a formula. </b>
</li>
<li>
<b>Combination fields</b> can be used to combine string values in controls. For example, in the Microsoft-supplied While You Were Out form, the string value of the Message box is formed by concatenating the string values from several other fields. </li>
</ul>
<h4>Add flexibility to forms with VBScript</h4>
<p>
Using VBScript and the Outlook Forms Designer Script Editor, designers can automate forms to save users time and to make forms easier to use. For example, in the Business Card Request form shown in Figure 39, when the user clicks the Corporate Address check box, the address is automatically added to the lower business card portion of the form. In addition, when users enter their Name and Title in the form, these values are also automatically filled in the business card portion of the form. Figure 40 shows the Visual Basic script, in the Script Editor window, that automatically fills in the fields in the lower portion of the form. </p>
<p>
<img src="ofc97enh_44.gif" border=0></p>
<p class=label>
<b>Figure 39. The Business Card Request form utilizes VBScript to fill in the bottom portion of the form for the user automatically.</b></p>
<p>
<img src="ofc97enh_45.gif" border=0></p>
<p class=label>
<b>Figure 40. Using the Script Editor, VBScript is added to the form to fill in the lower portion of the form for the user automatically. </b></p>
<h4>Scalable application development</h4>
<p>
Often in organizations, applications follow a progressive path. First they're developed at the workgroup level to solve a specific problem. Then the application becomes adopted by other workgroups and requires additional functionality. Finally, the application is implemented enterprisewide and requires even more functionality to meet the broader needs of the organization. Outlook provides for this kind of scenario by offering a flexible approach to application development. With the broad range of tools and capabilities in Outlook, designers of all skill levels can meet their business solution needs. </p>
<p>
The following shows the different levels of Outlook application development, starting with the easiest level and progressing to the most advanced level:
<ul type=disc>
<li>
<b>Create a new instant groupware folder:</b> Designers can create Calendar, Contacts, or Tasks folders in public folders, enabling users to share schedules, contacts, or task lists across the organization. (Non-programming) <br><br></li>
<li>
<b>Add a custom view to a folder:</b> At the simplest level, designers can add fields to a public folder view or they can add new custom views to the folder. Often this is sufficient, especially since in-cell editing enables users to enter information without opening a form. (Non-programming) <br><br></li>
<li>
<b>Modify built-in forms with the Forms Designer:</b> Designers can hide standard pages or show additional pages in Calendar, Contacts, and Task forms to create mission-specific applications. For example, for a Beta Contacts form, a designer may want to add an additional Company Profile page to the form. (Non-programming) <br><br></li>
<li>
<b>Modify Message, Post, or Office forms:</b> Send, Post to Folder, and Office Document forms are fully customizable, so users can add or remove controls from their pages and they can set Action Properties to define how the form handles responses. (Non-programming) <br><br></li>
<li>
<b>Use VBScript to Add Intelligence to Forms:</b> Designers can use the full power of VBScript to add intelligence and a professional quality to their forms. They can hide controls and make them visible, launch applications from a button, perform field validation, set properties on items, automatically update fields, and build logic behind graphic elements and buttons. <br><br></li>
<li>
<b>Add Custom Controls and ActiveX controls to the Form:</b> For forms that require database access or a grid control, designers can use the Outlook Edit, ListBox, or ComboBox ActiveX controls for reading from or writing to an ODBC-compliant database. Designers can also use any third-party ActiveX controls. <br><br></li>
<li>
<b>Use Microsoft Visual Basic for Applications with Office 97 for the ultimate in flexibility:</b> Using Visual Basic for Applications, designers can add macros to documents to automate tasks and make applications easier to use. For example, designers can add macros to an Expense Report template embedded in an Office Document form that automatically write expense report totals to a Microsoft Access database. </li>
</ul>
<h4>Extending Outlook applications</h4>
<p>
Outlook forms can be extended using ActiveX controls or Visual Basic for Applications. </p>
<h4>Using Visual Basic for Applications with Office forms</h4>
<p>
Designers can add Visual Basic for Applications<b> </b>code to Office documents, and then drag the document into an Outlook folder to wrap the document in a form. For example, a designer can create a Mileage Report worksheet in Microsoft Excel that calculates total miles and the reimbursement amount due. In addition, the designer can add Visual Basic for Applications macros to the worksheet that writes the mileage record to a Microsoft Access or other ODBC-compliant database. Next, the designer can drag the worksheet into an Outlook folder to wrap the worksheet in an Outlook form. The designer can then add a Cover page, for user information, and a Status page to the Mileage Report form. </p>
<p>
At run time, users can open the Mileage Report form from the Organization forms library. They can then fill it out and submit it to a supervisor for approval. When the supervisor approves the report, Visual Basic for Applications code can automatically write the mileage report record to a database. </p>
<h4>Using ActiveX controls for database access</h4>
<p>
In many cases, designers will need to create applications that integrate database information into forms. For example, a designer might want to create a Library Materials Order form that enables the user to query the Library Materials database for books or magazines on a particular subject. To accomplish this, the designer can drop an ActiveX control on the form and then set the properties for the control to perform queries on the SQL Library Materials database. </p>
<p>
At run time, when users open the form, they can then use the ActiveX control(s) to query the database. After users have selected the materials they want, they can send the request to the library for processing. </p>
<p>
<img src="ofc97enh_46.gif" border=0></p>
<p class=label>
<b>Figure 41. The selection of the manufacturer and model type in the computer field of the Equipment Request form determines what Web page will be displayed in Internet Explorer 3.0 inside of the Outlook form. </b></p>
<h4>Sample applications</h4>
<p>
In many cases, organizations or workgroups can solve business problems or increase productivity simply by installing one of the sample applications that ships with Outlook. Although these applications are fully customizable, they are designed to be run "out of the box" and can be quickly installed and implemented in an organization. </p>
<p>
The following provides examples of some of the sample applications (subject to change) that will be available with Outlook. </p>
<p>
<b>Message applications</b>
<ul type=disc>
<li>
Vacation Report enables employees to request vacations and mark vacation time on their calendars, supervisors to approve vacations, and employees to confirm the actual amount of vacation and sick time taken upon their return. <br><br></li>
<li>
While You Were Out allows anyone to take a message for another employee using a form modeled on the standard "While You Where Out" form in common usage and then send the message to the employee's inbox. </li>
</ul>
<p>
<b>Discussion applications</b>
<ul type=disc>
<li>
Job Candidate lets managers or human resource personnel post a job candidate item in a public folder. Users who interview the candidate can post their recommendation whether to hire or not hire the candidate in the Job Candidate folder. Custom views in the Job Candidate folder allow the supervisor to view interviewers' recommendations easily. <br><br></li>
<li>
User Group provides a forum for users to conduct online conversations. Users can post, read, and respond to ideas, problems, or solutions in a public folder. Items in the folder are organized by conversation thread, so the history of a conversation can be followed easily. </li>
</ul>
<p>
<b>Tracking applications</b>
<ul type=disc>
<li>
Help Desk submits help and equipment requests, schedules technician appointments, and tracks the status of help requests. <br><br></li>
<li>
Sales Management manages the sales process and features contact management, automatic booking of meetings, and automatic journalizing of all communications with the client. </li>
</ul>
<p>
<b>Office forms</b>
<ul type=disc>
<li>
Expense Report features a public folder for filing and viewing expense reports, and an Expense Report form based on a Microsoft Excel worksheet. Summary properties such as subtotals and expense categories are used to create fields with which to view expense report information in the folder. </li>
</ul>
<h4>Centralized management and security with the Microsoft Exchange Server</h4>
<p>
With the proliferation of application development at the workgroup level, organizations need a standard platform for application development, as well as a way to centrally manage applications. The Microsoft Exchange Server provides this for Outlook applications by offering Internet connectivity, a reliable messaging infrastructure, integrated groupware capabilities, and centralized storage, security, and administrative capabilities. </p>
<p>
<b>Central application management:</b> The Microsoft Exchange Server provides a public folder object store where folders, forms, and items can be centrally stored for enterprisewide access. Application designers can make their applications available throughout the company simply by copying a folder to the public folder area on the Exchange server. </p>
<p>
<b>Microsoft Exchange Server security:</b> Using the Microsoft Exchange Server Administrator Program, administrators can define who has access to organizational forms and public folders. In addition, either the administrator or the application designer can set permissions on a public folder to define what rights an individual user has on that folder. Also, because Microsoft Exchange Server runs on Microsoft Windows NT®, corporations get the authentication capabilities of the NT server, further ensuring that only authorized users have access to a company's sensitive information. </p>
<p>
<b>Forms and folder replication:</b> Exchange administrators can use the Microsoft Exchange Server replication engine to distribute forms and folders (including calendar, task, and contact folders) throughout the enterprise. The server replication engine manages the distribution of the application and ensures that any changes to forms or folders on one server are automatically reflected on the replicated servers. </p>
<p>
<b>Offline use of applications:</b> Users can run Outlook applications offline while working in remote locations. For example, a sales person can use a Contacts folder offline while traveling to view contact information and to enter new information. Remote users can take advantage of the local replication feature of Microsoft Exchange to synchronize their Favorite Folders with the folders on the Microsoft Exchange Server. </p>
<h4>Interoperability and migration</h4>
<p>
Before designing and implementing forms in their environment, application designers should be aware of the following issues. </p>
<p>
For detailed information about interoperability and migration, see the white paper, <i>Microsoft Outlook 97: Interoperability With Microsoft Exchange Client, Microsoft Mail Version 3.x, Microsoft Schedule + 95, and Microsoft Schedule + Version 1.0</i> at <a href="http://www.microsoft.com/OutlookDev/Articles/outinter.htm">http://www.microsoft.com/OutlookDev/Articles/outinter.htm</a>.</p>
<p>
<b>Outlook public folders</b></p>
<p>
Outlook supports all the custom public folder view features of Microsoft Exchange Server. Microsoft Exchange Server does not distinguish between Outlook and the Microsoft Exchange client when users open a public folder, so Outlook and Microsoft Exchange client users can have access to a common set of folders </p>
<p>
Note: MS Mail 3.<i>x</i> users cannot access Outlook public folders. </p>
<p>
<b>Non-table views:</b> Microsoft Exchange client users can display Outlook "table" views (views that consist only of rows and columns) if the <b>Convert To Exchange Views</b> check box is selected in <b>Folder Properties</b> for the Outlook folder. However, Exchange client cannot display Outlook nontable views such as the day, week, and month view in the calendar. Nor can it display the card, icon, or timeline views. When Outlook users and Microsoft Exchange client users access the same set of public folders, Microsoft Exchange client users cannot display any nontable views created by Outlook users. </p>
<p>
<b>Outlook forms</b></p>
<p>
Outlook users can run forms created with the Microsoft Exchange client Forms Designer, but Microsoft Exchange client users cannot run forms created with the Outlook Forms Designer. </p>
<p>
In a mixed client environment (Microsoft Exchange client—16-bit and 32-bit Windows®—and Outlook), designers must carefully consider which clients will be using the forms they create. </p>
<p>
If forms will be run by both Microsoft Exchange client and Outlook users, forms should be developed using the Exchange Forms Designer. </p>
<p>
If forms will be run only by Outlook users, the forms should be developed using the Outlook Forms Designer. </p>
<p>
<b>Advantages of using Outlook forms:</b>
<ul type=disc>
<li>
Forms are fully 32-bit. <br><br></li>
<li>
Forms are small (about 10K). <br><br></li>
<li>
Forms support all features of standard forms, including digital signature and encryption. <br><br></li>
<li>
Built-in modules can be modified and copied to a public folder for shared calendar, tasks, and contacts. <br><br></li>
<li>
Forms can contain Office templates. <br><br></li>
<li>
Forms can be easily embedded in e-mail messages. <br><br></li>
<li>
Forms support formula fields, combination fields, and validated fields. <br><br></li>
<li>
Forms can contain ActiveX controls like Grid and Database Lookup. <br><br></li>
<li>
Forms can contain host Internet controls so that designers can put Web pages right on the form. <br><br></li>
<li>
Forms are programmable using VBScript. <br><br></li>
<li>
Forms are interpreted. No compilation step or Visual Basic run-time files. No EFPs, CFGs, and EXEs. Form source stays with OFT file. <br><br></li>
<li>
It's possible to switch instantly between run and design mode. <br><br></li>
<li>
Enhanced layout tools, including a grid and an AutoLayout feature that automatically positions controls on the form. <br><br></li>
<li>
Forms can be saved as templates and launched from the desktop, a document, or a Web page. </li>
</ul>
<h3><a name="ofc97enhword"></a>Microsoft Word 97 Programmability Enhancements</h3>
<h4>Visual Basic for Applications, version 5.0</h4>
<p>
One of the most significant areas of integration for Microsoft® Word 97 is the inclusion of Visual Basic for Applications, version 5.0. Visual Basic for Applications replaces WordBasic and enables Word to share a common programming language with the rest of the Office applications. A consistent programming model across all the Office applications means developers need to learn only one way of programming. Visual Basic for Applications exposes developers for Word to a greater programmatic interface and makes Word programmable from other applications using automation. </p>
<h4>The Word object model</h4>
<p>
Word 97 has a significantly enhanced object model that describes the functionality of Word. As a result, Word is programmable from other applications using Automation. In addition, the object model provides developers with excellent programmatic access to Word's feature set directly from within Visual Basic for Applications. Features that require programmers to access dialog boxes can now be accessed directly using the comprehensive object model. </p>
<h4>Easy migration from WordBasic to Visual Basic for Applications</h4>
<p>
Word automatically migrates code created in previous versions of Word to code written in Visual Basic for Applications. When opening a template containing WordBasic macros created with previous versions of Word, Word automatically converts all such macros into Visual Basic. Thus, all existing macros will work when templates are loaded into Word 97. </p>
<h4>Support for ActiveX controls</h4>
<p>
Word 97 now hosts ActiveX controls. This enables the creation of powerful documents and forms from within Word. </p>
<h4>ActiveX and forms authoring</h4>
<p>
In addition to providing extensive print and online form-building capabilities, Word 97 enables the creation of active documents, using ActiveX controls. These controls are integrated with the Word forms design interface—they are fully programmable in Visual Basic Editor for customizable, responsive forms. </p>
<h4>Improved encryption algorithm</h4>
<p>
Word 97 supports 40-bit RC4 encryption of password-protected documents, which is the strongest exportable encryption. </p>
<h4>Macros stored in templates or documents</h4>
<p>
In Word 97, macros can be stored within documents, so developers don't have to deliver templates along with documents to give users access to macros. </p>
</BODY>
</HTML>

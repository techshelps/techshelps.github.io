<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>New Visual FoxPro 5.0 Features</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_newfox5"></a>New Visual FoxPro 5.0 Features</h1>
<p>
Microsoft Corporation </p>
<p>
October 1996</p>
<h2>Abstract</h2>
<p>
Microsoft® Visual FoxPro™ version 5.0 brings you expanded capabilities to help you in every area of application and database development. In this version, you have greater control over your projects and databases. You can see improvements in performance, system resource use, and design environment.</p>
<p>
This article covers features new to Visual FoxPro 5.0 in some detail and assumes familiarity with Visual FoxPro version 3.0. If you are new to Visual FoxPro, see the product information for versions 3.0 and 5.0 available at http://www.microsoft.com/VFOXPRO/vfinfo/vfinfo.htm.</p>
<h2>Better Performance</h2>
<p>
Developers using Microsoft ® FoxPro® have come to expect the highest levels of performance. In the previous release, Microsoft Visual FoxPro™ version 3.0, the focus was on a dramatic new object-oriented paradigm for development. In developing Visual FoxPro version 5.0, honing performance under this paradigm was a key goal.</p>
<h3>Data Retrieval Performance</h3>
<p>
Visual FoxPro 5.0 delivers even faster local data retrieval and continues its leadership in retrieving server-based data. Visual FoxPro 5.0 allows you to do the following:</p>
<p>
<b>Use ANSI-compliant joins.</b> In addition to being consistent with Microsoft Access, Microsoft SQL Server, and other American National Standards Institute–compliant (ANSI-compliant) approaches, this method yields faster results than its predecessor. For developers moving from previous versions, queries are automatically converted to the new syntax by the Query Designer. The Query Designer also creates ANSI-style joins by default, so developers can learn the new syntax as they build new queries.</p>
<p>
<b>Include or exclude memo fields in update detection.</b> You can use the CompareMemo property to control when memo fields are used to detect update conflicts. This view and cursor property determines whether memo fields (types M and G) are included in the update WHERE clause.</p>
<p>
<b>Fine-tune record fetching.</b> Use the FetchAsNeeded property to specify whether all rows are fetched progressively or only those within the row set determined by the FetchSize property.</p>
<p>
<b>Speed up requery operations on parameterized views.</b> Using the new Prepared property, you can specify whether the query for the view is prepared before it is executed. If you set this property to true (.T.), Visual FoxPro sends a request to the Open Database Connectivity (ODBC) driver to prepare, or compile, the SQL query that defines the view. If the ODBC driver for your back-end data source supports the use of prepared statements, subsequent requeries on the open view are executed faster.</p>
<p>
<b>Analyze queries for optimization.</b> Use SYS(3054) to improve query performance by determining the extent to which the query is optimized by Microsoft Rushmore™ technology. If SYS(3054,1) indicates that a query could not be optimized or could be optimized only partially, you can modify the query to take advantage of Rushmore optimization.</p>
<h3>Object Performance</h3>
<p>
Visual FoxPro 5.0 enhances the speed with which objects are painted on the screen and the speed with which form controls are bound to the underlying data, while reducing the memory footprint for several commonly used controls. The result is a 40 to 200 percent improvement in form performance, depending on machine configuration. New features include:</p>
<p>
<b>Delay binding.</b> The new delayed binding technology provides faster and smarter object initialization, only binding to the data source when necessary.</p>
<p>
<b>Clear cached resources.</b> When Visual FoxPro displays a bitmap, picture, cursor, icon, or font resource, the resource is cached to optimized performance. If a resource of the same name is used (for example, a different bitmap with the same name as one already cached), Visual FoxPro does not reload the resource. The new Clear Resources command, however, lets you clear the cached memory.</p>
<h2>Enhanced Project Management and Application Creation</h2>
<p>
Multiple developers can simultaneously work on your fast and powerful Visual FoxPro applications.</p>
<p>
<b>Let several people work on database objects.</b> You can now modify tables and view definitions without exclusive access to the database. Use the new <b>Refresh</b> option on the <b>Database</b> menu; this reloads the database object definition to reflect any changes made by other users.</p>
<p>
<b>Use source code control.</b> You can use a source code control program, such as Microsoft Visual SourceSafe™, to coordinate and manage changes to applications you develop in Visual FoxPro. The Project Manager provides access to source code control on the <b>Project</b> menu.</p>
<p>
<b>Compare and merge changes to binary files.</b> The new _SCCTEXT system variable references a Visual FoxPro conversion program (by default, scctext.prg) that handles translating Visual FoxPro binary files into text equivalents and back.</p>
<p>
<b>Create dynamic-link library (.DLL) files.</b> The Project Manager and the BUILD DLL command allow you to create .DLL files.</p>
<p>
<b>Recompile before building.</b> The new RECOMPILE keyword of the BUILD EXE, BUILD APP, and BUILD DLL commands allows you to recompile all application files before building.</p>
<p>
<b>Preserve build settings.</b> When you open your new projects, Visual FoxPro 5.0 restores the last build settings so that you don't have to manually reset them.</p>
<p>
<b>Compile version information in your applications .</b> You can specify information and incremented version numbers to be compiled in your .exe or .dll files (Figure 1).</p>
<p>
<img src="newfox5_1.gif" border=0></p>
<p class=label>
<b>Figure 1. Visual FoxPro allows you to compile version information.</b></p>
<h2>More Robust Database Management</h2>
<p>
Data management is at the heart of most Visual FoxPro applications and Visual FoxPro 5.0 refines the Visual FoxPro database paradigm.</p>
<h3>Table Design and Expanded Data Dictionary</h3>
<p>
The Table Designer has been enhanced for easier use and better integration with the Form Designer to allow you to do the following:</p>
<p>
<b>Manage large databases.</b> The Database Designer helps you manage large databases by allowing you to find components, and arrange and filter the views of the data. Choose <b>Properties</b> from the <b>Database</b> <b>Designer </b>shortcut menu to set filters.</p>
<p>
<b>Add indexes as you design fields.</b> Indexes on fields can be specified at the same time you create the field. More complex indexes can be created in the adjacent tab.</p>
<p>
<b>Set input masks and captions as you design the table.</b> When you drag fields from the Table to the Form Designer, the values you set in the Table Designer are respected.</p>
<p>
<b>Set data validation rules directly and easily.</b> A Table tab gives you direct access to the table-level validation rules, triggers, and statistics.</p>
<h3>Query and View Design</h3>
<p>
You can now create outer joins, specify aliases for columns, or select the top number or percentage of records, right in the Query and View Designers. Also, using the View Designer, you can specify the same extended properties on view fields that you can on table fields. For example, you can specify a default control class, input mask, or format.</p>
<p>
<b>View offline data.</b> You can use the CREATEOFFLINE() and DROPOFFLINE() functions to create offline views. An offline view allows you to edit and append data to a data source even when you aren't connected to the data source. After making changes to the offline view, you can update the data on the server with your changes by opening the offline view with USE and including the ONLINE clause.</p>
<p>
<b>Use an enhanced SELECT command.</b> Table 1 lists the new keywords that have been added to the SELECT - SQL command.</p>
<p class=label>
<b>Table 1. New Keywords in the SELECT - SQL Command</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Keyword</b></td>
<td class=label width=67%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=33%> &nbsp; FORCE</td>
<td width=67%>Specifies that tables are joined in the order in which they appear in the FROM clause. If FORCE is omitted, Visual FoxPro attempts to optimize the query.</td>
</tr>
<tr valign=top>
<td width=33%>FULL [OUTER] JOIN</td>
<td width=67%>Specifies that the query result contains all matching and non-matching rows from both tables. The OUTER keyword is optional; it can be included to emphasize that an outer join is created.</td>
</tr>
<tr valign=top>
<td width=33%>INNER JOIN</td>
<td width=67%>Specifies that the query result contains only rows from a table that match one or more rows in another table.</td>
</tr>
<tr valign=top>
<td width=33%>LEFT [OUTER] JOIN</td>
<td width=67%>Specifies that the query result contains all rows from the table to the left of the JOIN keyword and only matching rows from the table to the right of the JOIN keyword. The OUTER keyword is optional; it can be included to emphasize that an outer join is created.</td>
</tr>
<tr valign=top>
<td width=33%>NOFILTER</td>
<td width=67%>Creates a cursor that can be used in subsequent queries. Including NOFILTER can reduce query performance because a temporary table is created on disk. The temporary table is deleted from disk when the cursor is closed.</td>
</tr>
<tr valign=top>
<td width=33%>RIGHT [OUTER] JOIN</td>
<td width=67%>Specifies that the query result contains all rows from the table to the right of the JOIN keyword and only matching rows from the table to the left of the JOIN keyword. The OUTER keyword is optional; it can be included to emphasize that an outer join is created.</td>
</tr>
<tr valign=top>
<td width=33%>TOP nExpr [PERCENT]</td>
<td width=67%>Specifies that the query result contains a specific number of rows or a percentage of rows in the query result.</td>
</tr>
</table><br>
<h3>Integrating Data into Applications</h3>
<p>
One of the great strengths of Visual FoxPro is the tight integration of data, objects, and applications. Visual FoxPro 5.0 adds to this story.</p>
<p>
<b>Change table values in rules. </b>The engine now supports changes to values that violate rules. You can now include code in your field and record validation rules to update values in the same table.</p>
<p>
<b>Update all rows that don't generate conflicts.</b> The TABLEUPDATE() function gives you three scope options: you can update the current row; update all records up to the first row that generates a data conflict; or now, update all rows that don't generate a data conflict, leaving rows with data conflicts still in the table buffer for you to resolve separately.</p>
<p>
<b>Have greater control over views in the data environment.</b> The OpenViews property of the data environment allows you to specify whether all views, only local views, or only remote views are opened. By changing a single property value, you can have a single form provide access to local or remote data.</p>
<p>
<b>Reference hexadecimal values.</b> Visual FoxPro now supports hexadecimal notation. To indicate that a value is hexadecimal, prefix it with 0x. For example, the following command prints 255 on the active window: </p>
<pre><code>? 0xFF
</code></pre>
<p>
Other database engine enhancements include more efficient pessimistic buffering and the use of NULL as a recognized keyword that can be used in place of ".NULL." In addition to the features already noted, the data manipulation commands and functions in Table 2 have been added or enhanced.</p>
<p class=label>
<b>Table 2. Data Manipulation Commands Added or Enhanced in Visual FoxPro 5.0</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=32%><b>Command</b></td>
<td class=label width=68%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=32%> &nbsp; APPEND FROM and COPY TO</td>
<td width=68%>New DELIMITED WITH CHARACTER clause allows you to provide the character that separates fields.</td>
</tr>
<tr valign=top>
<td width=32%>BINTOC()</td>
<td width=68%>Converts an integer value to a binary character representation. Indexing on BINTOC(&lt;numeric field&gt;) reduces the size of an index.</td>
</tr>
<tr valign=top>
<td width=32%>CTOBIN()</td>
<td width=68%>Use CTOBIN() to convert a binary character representation created with BINTOC() back to its integer value.</td>
</tr>
<tr valign=top>
<td width=32%>DROP TABLE</td>
<td width=68%>Removes a table from the current database and deletes it from the disk.</td>
</tr>
<tr valign=top>
<td width=32%>DROP VIEW</td>
<td width=68%>Deletes an SQL view from the current database.</td>
</tr>
<tr valign=top>
<td width=32%>IMPORT, CREATE FROM, SORT, and TOTAL</td>
<td width=68%>New DATABASE and NAME clauses.</td>
</tr>
<tr valign=top>
<td width=32%>ISFLOCKED()</td>
<td width=68%>Returns the file lock status.</td>
</tr>
<tr valign=top>
<td width=32%>ISRLOCKED()</td>
<td width=68%>Returns the record lock status.</td>
</tr>
</table><br>
<h2>Improved Development and Debugging Tools</h2>
<p>
The Visual FoxPro editing environment is more flexible than ever, with editing features only a right-click away.</p>
<p>
<b>Automatically format your code for easy readability.</b> The <b>Beautify</b> option from the Editing window shortcut menu allows you to capitalize and indent code.</p>
<p>
<b>Mark multiple lines of code as comments.</b> Just select the lines of code you want to comment out and choose <b>Comment</b> from the shortcut menu. To remove the comments, select the lines of code again and choose <b>Uncomment</b> from the shortcut menu.</p>
<p>
<b>Immediately execute selected lines of code.</b> To run a subset of a function for incremental testing, select the code and choose <b>Execute</b> <b>Selection</b> from the shortcut menu. You can take advantage of this feature in the Command window to execute FOR or WHILE loops.</p>
<p>
<b>Color-code language elements.</b> New syntax coloring allows you to display different language elements in colors and fonts of your choice.</p>
<p>
<b>See a list of all procedures in a file.</b> The <b>Procedure/Function</b> option on the shortcut menu displays a dialog box listing all the procedures, functions, and #DEFINE keywords in a program file. Choose a procedure and go there directly in the file.</p>
<p>
<b>Easily insert object references.</b> In a Form or Class Designer editing window, choose <b>Object</b> <b>List</b> from the shortcut menu to open a dialog box with a list of all contained objects. Choose an object to return a fully qualified reference to the object.</p>
<p>
<b>Create expressions easily.</b> The Expression Builder is accessible at all times from the shortcut menu.</p>
<p>
<b>Find text again.</b> The <b>Find</b> dialog box, available from the shortcut menu, saves previous searches in a drop-down combo box so that you can easily rerun them. The <b>Find</b> <b>Again</b> option has been returned to the <b>Edit</b> menu.</p>
<h3>Testing and Debugging Immediately</h3>
<p>
Using the debug environment, you can test and debug your code at the same time you design each component of your application and write the code. Also, the debugging tools work independently from the main application and do not interfere with the interface you are trying to test.</p>
<p>
<b>Test as you design.</b> The enhanced Visual FoxPro development environment gives you more power to test your component design and code. For example, if you are designing a form, you can click the <b>Run</b> button to run the code. If you want to change something, just click the <b>Design</b> button and make your changes.</p>
<p>
<b>Debug with power.</b> You can debug and monitor your application components more easily in this version of Visual FoxPro using the new Debugger window.</p>
<p>
<b>View properties of an object.</b> In the new debugger, you can view the elements within a collection or array using the Watch window to show a hierarchical display of an object's properties.</p>
<p>
<b>Trace the execution process of your code.</b> In the Trace window, you can see each line of code as it executes and check the values of all variables, properties, and environment settings. You can even use the <b>Set</b> <b>Next</b> <b>Statement</b> menu item to skip the execution of lines of code or to go back and re-execute lines of code.</p>
<p>
<b>Control execution with breakpoints.</b> You can control when execution stops by using one of four types of breakpoints. You can stop at a particular line, when a certain value changes, if a condition evaluates to true, or if a condition for a certain line is true.</p>
<p>
<b>Set asserts and display assert messages.</b> You can use the ASSERT command to specify conditions that verify that the code is running properly. When an error occurs, the Debug Output window records the message.</p>
<p>
<b>Check the current value of a variable.</b> To quickly check values, you can place the cursor over a variable in the Trace Window to display a Value Tip.</p>
<p>
<b>Watch and change values.</b> In the Watch window and Locals window, you can change values for properties or variables while you run the code.</p>
<p>
<b>Display output from message requests.</b> In the new Debug Output window, you can conveniently display interactive or coded information requests separate from the active window or screen.</p>
<p>
<b>Use a coverage log file.</b> In the Debugger window, you can use the coverage option to log the execution information about your code, such as how long the line took to execute, the line number, and more. You can create your own program to process this information, set the _COVERAGE system variable to the program, and call the program directly from the <b>Coverage</b> dialog box.</p>
<p>
<b>Open code from the debugger.</b> When you have isolated a problem in the Trace window, you can choose <b>Fix</b> from the <b>Debug</b> menu and go directly to the problem area in the Form Designer, Class Designer, or an editing window.</p>
<p>
<b>Track event firing sequences.</b> You can see the execution order of all or any subset of the Visual FoxPro events in your applications, whether or not you have code written for the event. This allows you to find the most efficient place to add your code.</p>
<p>
<b>Save and restore debugger settings.</b> You can save breakpoints, watches, lists of events to track, and other debugging information in configuration files to be restored whenever you want.</p>
<p>
Table 3 lists the new commands that have been added to give you greater programmatic control of your debugging environment.</p>
<p class=label>
<b>Table 3. New Commands for Programmatic Control of Debugging</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Command</b></td>
<td class=label width=67%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=33%> &nbsp; DEBUG</td>
<td width=67%>Opens the Visual FoxPro debugger.</td>
</tr>
<tr valign=top>
<td width=33%>DEBUGOUT</td>
<td width=67%>Directs the result of an expression to the Debug Output window.</td>
</tr>
<tr valign=top>
<td width=33%>SET ASSERTS</td>
<td width=67%>Specifies if ASSERT commands are evaluated or ignored.</td>
</tr>
<tr valign=top>
<td width=33%>SET COVERAGE</td>
<td width=67%>Turns code coverage on or off or specifies a text file to which code coverage information is directed.</td>
</tr>
<tr valign=top>
<td width=33%>SET DEBUGOUT</td>
<td width=67%>Directs debugging output to a file.</td>
</tr>
<tr valign=top>
<td width=33%>SET EVENTLIST</td>
<td width=67%>Specifies events to track in the Debug Output Window or in a file specified with SET EVENTTRACKING.</td>
</tr>
<tr valign=top>
<td width=33%>SET EVENTTRACKING</td>
<td width=67%>Turns event tracking on or off or specifies a text file to where event tracking information is directed.</td>
</tr>
</table><br>
<h2>Rapid Application Development</h2>
<p>
In addition to a richer development environment, Visual FoxPro 5.0 provides more tools and features to help you quickly create robust database applications.</p>
<h3>More and Better Wizards</h3>
<p>
Wizards automate common tasks so that you can focus on custom application features. Visual FoxPro Wizards help you to do the following:</p>
<p>
<b>Develop instant applications.</b> Using the Application Wizard, you can quickly create an application by using your tables and forms or by using a sample set of application components.</p>
<p>
<b>Create an Internet Web page.</b> You can create a Web page that provides Web surfers with search and retrieve access to your tables.</p>
<p>
<b>Add page frames to forms.</b> If you choose more fields than can fit on the form, you can add a page frame to display the additional fields on additional pages.</p>
<p>
<b>Populate pivot tables through ODBC.</b> The PivotTable Wizard uses the new Visual FoxPro ODBC driver.</p>
<p>
<b>Show nulls in a cross-tab report.</b> The Cross-Tab Wizard now supports displaying null values.</p>
<p>
<b>Move your data to a back-end server.</b> You can move Visual FoxPro databases, tables, and views from your system to a back-end server with the SQL Server Upsizing Wizard or the Oracle Upsizing Wizard.</p>
<p>
Updates to other wizards and samples give you added capabilities, such as accessing index tags for sorting. The Form Wizard allows you to add a page frame to display more fields on additional pages. The PivotTable Wizard can use ODBC to populate a pivot table. The SQL Server Upsizing Wizard supports declarative referential integrity. The Cross-Tab Wizard now supports displaying null values. In addition, a wizard provided as a utility lets you create Web pages for querying and displaying your database records.</p>
<h3>Object-Oriented Programming</h3>
<p>
Visual FoxPro 3.0 provided a rich object and class schema with true inheritance, encapsulation, and all the other features you would expect of a mature object-oriented development environment. Visual FoxPro 5.0 makes object-oriented programming even easier with an improved Class Browser, the introduction of the DODEFAULT() function, and new clauses for the DEFINE CLASS and SET CLASSLIB commands. Visual FoxPro 5.0 also makes it easier to do the following:</p>
<p>
<b>Display TypeLib or ObjectLib information in the Class Browser.</b> The Class Browser now supports .tlb and .olb files. The Class Browser also sports a sleeker interface and is more customizable.</p>
<p>
<b>Add value to inherited classes.</b> You can add code to classes and easily call the parent class code with the DODEFAULT() function. DODEFAULT() is easier to use than the scope resolution operator (::) because you don't have to reference the name of the class and method.</p>
<p>
<b>Hide class members.</b> You can now create members of a class that are only visible within that class by using the HIDDEN clause in the DEFINE CLASS command.</p>
<p>
<b>Create objects based on classes in compiled applications.</b> The new IN clause of the SET CLASSLIB command allows you to access class libraries compiled in .EXE or .APP files.</p>
<h3>Easier to Create Office 95 Compatible Interfaces</h3>
<p>
Visual FoxPro makes it easy for you to create state-of-the-art user interfaces.</p>
<p>
<b>Provide What's This Help.</b> What's This Help allows a user to click a <b>?</b> button (Figure 2) on a form title, and then to click on any control on the form to get context-sensitive help in a Tool-Tip format.</p>
<p>
<img src="newfox5_2.gif" border=0></p>
<p class=label>
<b>Figure 2. The What's This Help button</b></p>
<p>
<b>Display nonjustified tabbed dialog boxes.</b> The new TabStyle property on page frames allows you to create Windows 95–style tabbed dialog boxes (Figure 3).</p>
<p>
<img src="newfox5_3.gif" border=0></p>
<p class=label>
<b>Figure 3. Windows 95 style tabbed dialog box</b></p>
<p>
<b>Create s<i>ingle-document interface </i>(SDI) or <i>multiple-document interface </i>(MDI) forms.</b> The ShowWindow property of a form allows you to specify whether the form is displayed as a child of the main Visual FoxPro window (MDI), as a top-level (SDI) form, or as a child of a top-level form.</p>
<p>
<b>Hide the main Visual FoxPro window on start up.</b> If the initial form of your application is a top-level, or SDI, form, you probably don't want the Visual FoxPro window to be displayed. Include "SCREEN=OFF" in your config.fpw and the Visual FoxPro window won't be displayed. You can make it visible later by issuing, in your application code:</p>
<pre><code>_SCREEN.Visible = .T. 
</code></pre>
<p>
<b>Use windows color settings and 3D color settings.</b> The ColorSource property of a form now allows you to choose Windows Control Panel Color Settings or Windows Control Panel 3D Color Settings.</p>
<p>
<b>Display item tips for list boxes.</b> If the text of a menu item is too long to be displayed in the list, an item tip will display the text when the mouse pointer is over the item. To enable item tips for a list box, set its ItemTips property to true (.T.).</p>
<h3>Shortcut Menus and Menus for Top-Level Forms</h3>
<p>
When you create a new menu, you have the option to add a menu to the menu bar or create a shortcut menu. After you have generated your shortcut menu, you can attach it to any control by running the menu in the control's RightClick event. You can also do the following:</p>
<p>
<b>Adjust shortcut menu display.</b> The #PREPOP generator directive, added to a shortcut menu's Setup code, causes the code in the menu's Cleanup to be generated before the ACTIVATE POPUP command. This order allows you to dynamically display check marks beside items on a shortcut menu or otherwise manipulate the characteristics of the menu before displaying it.</p>
<p>
<b>Display menus in top-level forms.</b> You can create menus to be displayed in top-level forms rather than in the main Visual FoxPro window—just choose <b>Top-Level Form</b> in the Menu Designer's <b>General</b> <b>Options</b> dialog box.</p>
<p>
<b>Easily insert functionality-rich menu items.</b> Visual FoxPro system menu items have always provided build-in functionality: for example, <b>Cut</b>, <b>Copy</b>, and <b>Paste </b>options for your application menus. Now you can insert individual Visual FoxPro system menu items in your application menus and shortcut menus with the click of a button.</p>
<p>
<b>Programmatically call system menu functionality.</b> The new SYS(1500) function allows you to tap into the functionality of system menu items without having to create the menus.</p>
<h3>Increased Form Functionality and Easier Design</h3>
<p>
Along with enhancements to the data dictionary that help with form design, the Form Designer itself is easier to use and offers more functionality.</p>
<p>
<b>Save changes automatically.</b> You can set options so that Visual FoxPro saves your forms automatically when you quit the Form Designer. In the Forms tab of the <b>Options</b> dialog box, you can choose the option <b>Save Changes Before Running Form</b>. If you select this option, you skip the confirmation dialog box and the changes you made to the current form are saved automatically.</p>
<p>
<b>Locate code more easily.</b> Methods and Events with code are listed at the top of the <b>Object</b> menu in the editing windows so that you can find and open them more easily.</p>
<p>
<b>Add multiple new properties or methods.</b> The <b>New</b> <b>Property</b> and <b>New</b> <b>Method</b> dialog boxes allow you to create as many new properties or methods as you want without having to open the dialog box multiple times.</p>
<h4>Properties window</h4>
<p>
The Properties window is more customizable in Visual FoxPro 5.0.</p>
<p>
<b>Change the font in the Properties window.</b> You can choose one of three font settings from the Properties window shortcut menu.</p>
<p>
<b>Change multiple properties.</b> You can select a group of controls and see common properties, or change them, in the Properties window.</p>
<p>
<b>Use the keyboard in the Properties window.</b> The Properties window supports keyboard navigation for scrolling through the hierarchy of objects, controls, and tab orders. Use the CTRL key in conjunction with the page up, page down, home, or end keys to move up and down through the list.</p>
<p>
<b>Edit property settings in a larger area.</b> Choose <b>Zoom</b> from the Properties window shortcut menu to open a larger editing area for property settings.</p>
<h4>Smarter drag and drop</h4>
<p>
Now more than ever, drag and drop in Visual FoxPro speeds development.</p>
<p>
<b>Specify classes for controls created in drag and drop.</b> The Field Mapping tab of the <b>Options</b> dialog box allows you to specify default classes to be created when fields of a particular type are dropped on a form. When you right-click and drag fields or tables to a form, you can choose, right there, a class for the objects to be based on.</p>
<p>
<b>Automatically add labels beside controls.</b> You can specify in the Field Mapping tab of the <b>Options</b> dialog box whether or not to automatically create a label for controls that were created by dragging fields to a form.</p>
<p>
<b>Name controls more easily.</b> When you drag one or more fields to a form, the names of the controls created automatically follow the Visual FoxPro object naming conventions—a prefix that indicates the base class and a meaningful name, for example, <i>txtCompany</i> rather than <i>Text1</i>.</p>
<p>
<b>Create more data-aware controls.</b> When you drop a field on a form, the size and MaxLength of the control is automatically adjusted to reflect the size of the field in the table.</p>
<h3>Enhanced Controls</h3>
<p>
Visual FoxPro controls have always been feature-rich. Visual FoxPro 5.0 extends the capabilities of some of these controls.</p>
<h4>Grid control</h4>
<p>
<b>Allow users to easily add new records.</b> If you set the AllowAddNew property to true (.T.), your users can add a new record to a table in a grid (as long as the grid is read-write) by pressing the down arrow while positioned on the last record in the grid.</p>
<p>
<b>Allow users to adjust grid display.</b> You can control whether users can interactively change header and row height with the AllowHeaderSizing and AllowRowSizing properties.</p>
<p>
<b>Control the grid splitter. </b>The SplitBar property specifies whether the split bar is displayed in a Grid control.</p>
<p>
<b>Add more dynamic display features.</b> The new DynamicAlignment and DynamicInputMask properties give you added control over dynamic data display.</p>
<p>
<b>Control the highlighting of currently selected rows.</b> The HighlightRow property specifies whether the current row and cell in a Grid control is highlighted.</p>
<h4>Text box control</h4>
<p>
<b>Customize date and time display.</b> The new properties in Table 4 have been added to give you greater control over date and time data in text boxes.</p>
<p class=label>
<b>Table 4. Date and Time Display Properties</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Property</b></td>
<td class=label width=67%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=33%>Century</td>
<td width=67%>Specifies whether the century portion of a date is displayed in a text box.</td>
</tr>
<tr valign=top>
<td width=33%>DateFormat</td>
<td width=67%>Specifies the format for Date and DateTime values displayed in a text box.</td>
</tr>
<tr valign=top>
<td width=33%>DateMark</td>
<td width=67%>Specifies the delimiter for Date and DateTime values displayed in a text box.</td>
</tr>
<tr valign=top>
<td width=33%>Hours</td>
<td width=67%>Specifies whether the hours portion of a DateTime value is displayed in 12- or 24-hour time format.</td>
</tr>
<tr valign=top>
<td width=33%>Seconds</td>
<td width=67%>Specifies whether the seconds portion of a DateTime value is displayed in a text box.</td>
</tr>
<tr valign=top>
<td width=33%>StrictDateEntry</td>
<td width=67%>Specifies whether date and DateTime values must be entered in a specific, strict format in a text box.</td>
</tr>
</table><br>
<p>
<b>Distinguish what a user enters in a text box.</b> The new Text property allows you to see what a user entered in a text box, regardless of formatting or data type.</p>
<h4>LIST box and combo box</h4>
<p>
<b>Control item selection in list box and combo box controls.</b> To collect the actual value of the selected item in the control, you can set the BoundTo property to True. To collect the item's list index number, set the BoundTo property to False.</p>
<p>
<b>Select more than 60 items in a list box.</b> You can now select an unlimited number of multiple items in a ListBox control.</p>
<p>
<b>Make sure items aren't partially displayed.</b> When the new IntegralHeight property is set to true (.T.), the height of a list box is automatically adjusted for optimum display of the items.</p>
<p>
<b>Enhance the display of your list box and combo box controls.</b> List boxes and combo boxes now support the BorderStyle, Format, and InputMask properties, which were formerly available only for other controls.</p>
<h4>Other control enhancements</h4>
<p>
<b>Process Microsoft IntelliMouse™ events.</b> Visual FoxPro objects now support MiddleClick and MouseWheel events.</p>
<p>
<b>Predetermine how null values are displayed.</b> The NullDisplay property allows you to choose a user-friendly value to be displayed when a control has a null value.</p>
<p>
<b>Display multiline captions on command buttons.</b> Command buttons now support wrapping, or multiple line, captions.</p>
<p>
<b>Access page frame tabs with the keyboard.</b> Visual FoxPro 5.0 provides better keyboard access with page frames. When a page has the focus, the left and right arrows move between pages.</p>
<h3>Report Enhancements</h3>
<p>
Visual FoxPro 5.0 reports address a few common developer requests.</p>
<p>
<b>Specify a range of pages to print.</b> The RANGE clause of the REPORT command allows you to specify a range of report pages to print.</p>
<p>
<b>Print directly from print preview.</b> A new toolbar button allows you to print a report directly from the Print Preview window.</p>
<p>
<b>Preview reports in windows you design.</b> The WINDOW clause of the REPORT command allows you to preview reports in a user-defined window.</p>
<h3>Practical Samples of Application Components</h3>
<p>
The new Solutions sample provides a collection of application components that show how you can use the features of Visual FoxPro to solve real-world challenges. You can use the sample components and their code directly in your applications. Additional samples illustrate creating OLE Servers for client/server and Internet application.</p>
<h2>New Automation Capabilities</h2>
<p>
With Visual FoxPro, you have the power to fully integrate your application with other applications.</p>
<p>
<b>Optimize Automation requests.</b> With the OLERequestPendingTimeout, OLEServerBusyTimeout, and OLEServerBusyRaiseError properties, you can determine how much time your system allocates for requests and when messages appear for your user. For example, you can control how much time your system spends retrying Automation requests before displaying a "server busy" message. You can also control the number of milliseconds that pass between user input while an Automation request is pending, such as using the mouse or keyboard, and the appearance of a "busy" message.</p>
<p>
<b>Control Visual FoxPro from other applications.</b> Using Visual FoxPro as an Automation server, you can create references to Visual FoxPro objects, execute Visual FoxPro commands, and run Visual FoxPro programs from other applications. The new Application object and its collections, illustrated in Figure 4, provide Automation access for your enterprise solutions.</p>
<p>
<img src="newfox5_4.gif" border=0></p>
<p class=label>
<b>Figure 4. The new Application object and its collections</b></p>
<p class=label>
<b>Table 5. The Properties and Methods Supported by the New Application Object</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Property or Method</b></td>
<td class=label width=67%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=33%>Application Property</td>
<td width=67%>Provides access to the Application object's properties and methods from an object contained by the application.</td>
</tr>
<tr valign=top>
<td width=33%>AutoYield Property</td>
<td width=67%>Window events are placed in a queue when the AutoYield property is set to false (.F.) and program code is executing. DOEVENTS executes all pending Windows events and processes any user code associated with the Windows events.</td>
</tr>
<tr valign=top>
<td width=33%>DataToClip Method</td>
<td width=67%>Copies a set of records as text to the Clipboard.</td>
</tr>
<tr valign=top>
<td width=33%>DefaultFilePath Property</td>
<td width=67%>Specifies the default drive and directory used by an Application object.</td>
</tr>
<tr valign=top>
<td width=33%>DoCmd Method</td>
<td width=67%>Executes a Visual FoxPro command for an instance of the Visual FoxPro application automation server.</td>
</tr>
<tr valign=top>
<td width=33%>Eval Method</td>
<td width=67%>Evaluates an expression and returns the result for an instance of the Visual FoxPro application automation server.</td>
</tr>
<tr valign=top>
<td width=33%>FullName Property</td>
<td width=67%>Specifies the directory from which an instance of Visual FoxPro was started.</td>
</tr>
<tr valign=top>
<td width=33%>Help Method</td>
<td width=67%>Opens the Help window.</td>
</tr>
<tr valign=top>
<td width=33%>Quit Method</td>
<td width=67%>Ends an instance of Visual FoxPro.</td>
</tr>
<tr valign=top>
<td width=33%>RequestData Method</td>
<td width=67%>Creates an array containing data from a table open in an instance of Visual FoxPro.</td>
</tr>
<tr valign=top>
<td width=33%>SetVar Method</td>
<td width=67%>Creates a variable and stores a value to the variable for an instance of the Visual FoxPro application automation server.</td>
</tr>
<tr valign=top>
<td width=33%>StartMode Property</td>
<td width=67%>Contains a numeric value that indicates how the instance of Visual FoxPro was started: a normal interactive session, an out-of-process OLE server, a run-time out-of-process OLE server, or a run-time in-process OLE server.</td>
</tr>
<tr valign=top>
<td width=33%>StatusBar Property</td>
<td width=67%>Specifies the text displayed in the status bar of an instance of Visual FoxPro.</td>
</tr>
<tr valign=top>
<td width=33%>Version Property</td>
<td width=67%>Returns the version number of an instance of Visual FoxPro as a character string.</td>
</tr>
</table><br>
<p>
<b>Create Automation servers.</b> Automation servers (formerly known as OLE Automation servers or OLE servers) are applications that expose functionality that can be used and reused by other applications through Automation. Using Visual FoxPro 5.0 a developer can create an Automation server that displays reusable forms, implements business rules, or packages a complex routine into a simple component that other programmers can use.</p>
<p>
<b>Provide Remote Automation.</b> Remote Automation enables developers to run an Automation server on one machine and the client application on a separate machine on the network. This feature is extremely useful for implementing three-tier client/server applications and asynchronous processing, off-loading work to underused machines, and reducing client maintenance.</p>
<p>
<b>Automate Visual FoxPro from applications that support API calls.</b> FPOLE.DLL allows any application capable of making API calls to run Visual FoxPro commands or evaluate Visual FoxPro expressions. Applications such as Microsoft Word, or even a Help file, can now execute Visual FoxPro commands or evaluate Visual FoxPro expressions.</p>
<h2>Better Support for ActiveX Controls</h2>
<p>
<b>Use Data Binding with ActiveX controls.</b> To bind data to ActiveX™ controls, you can use the ControlSource property (if the control supports it) in the Properties window to specify a field or variable to which the control is bound.</p>
<p>
<b>Send character values to ActiveX controls that require binary.</b> Use CREATEBINARY() to convert character type data created in Visual FoxPro to a binary type character string that you can pass to an ActiveX control or automation object.</p>
<p>
<b>Pass bitmaps as objects to ActiveX controls.</b> The LOADPICTURE() function creates an object reference for a bitmap, icon, or Windows metafile. Many presentation properties of ActiveX controls require an object reference for their settings. For example, the ActiveX Outline control supports the PictureOpen property that requires an object reference for its setting. The SAVEPICTURE() function creates a bitmap file from an object reference.</p>
<p>
<b>Expose in-place activation.</b> The new AutoVerbMenu property specifies whether a shortcut menu containing an OLE object's verbs is displayed when the OLE object is clicked with the right mouse button.</p>
<h2>Other New or Enhanced Commands and Functions</h2>
<p>
Table 6 lists other commands and functions that have been added to or enhanced in Visual FoxPro 5.0:</p>
<p class=label>
<b>Table 6. Additional new or Enhanced Commands and Functions in Visual FoxPro 5.0</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Command or Function</b></td>
<td class=label width=67%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=33%>DIRECTORY()</td>
<td width=67%>Returns true (.T.) if the specified directory is found on disk.</td>
</tr>
<tr valign=top>
<td width=33%>DISKSPACE()</td>
<td width=67%>Now supports an optional volume name.</td>
</tr>
<tr valign=top>
<td width=33%>FOR EACH ... ENDFOR</td>
<td width=67%>Executes a set of commands for each element in a Visual FoxPro array or collection.</td>
</tr>
<tr valign=top>
<td width=33%>GetFileVersion()</td>
<td width=67%>A new function in FOXTOOLS.FLL, GetFileVersion() populates an array with information about an .EXE or .DLL file such as version number, company name, and copyright information.</td>
</tr>
<tr valign=top>
<td width=33%>MCOL() and MROW()</td>
<td width=67%>New scale mode option.</td>
</tr>
<tr valign=top>
<td width=33%>MD | MKDIR</td>
<td width=67%>Can now create an entire path.</td>
</tr>
<tr valign=top>
<td width=33%>SET DATE</td>
<td width=67%>New SHORT, LONG, and TAIWAN clauses.</td>
</tr>
<tr valign=top>
<td width=33%>SET HOURS</td>
<td width=67%>Now scoped to data session.</td>
</tr>
<tr valign=top>
<td width=33%>SET NULLDISPLAY</td>
<td width=67%>Specifies the text displayed for null values. The default text is ".NULL."</td>
</tr>
<tr valign=top>
<td width=33%>SET SECONDS</td>
<td width=67%>Now scoped to data session.</td>
</tr>
<tr valign=top>
<td width=33%>SET SYSFORMATS</td>
<td width=67%>Uses SET DATE SHORT format.</td>
</tr>
<tr valign=top>
<td width=33%>SET("DATE", 1)</td>
<td width=67%>Returns an integer that indicates whether the date format is MDY, DMY, or YMD.</td>
</tr>
<tr valign=top>
<td width=33%>SET("PRINTER", 2)</td>
<td width=67%>Returns the name of the default printer.</td>
</tr>
<tr valign=top>
<td width=33%>SYS(2333)</td>
<td width=67%>Enables or disables ActiveX dual interface (VTABLE binding) support.</td>
</tr>
<tr valign=top>
<td width=33%>TTOC(dDateTime, 2)</td>
<td width=67%>Returns a character string containing only the time portion of a DateTime expression.</td>
</tr>
</table><br>
</BODY>
</HTML>

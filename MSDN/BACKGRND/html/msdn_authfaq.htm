<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Frequently Asked Questions About Authenticode</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_authfaq"></a>Frequently Asked Questions About Authenticode</h1>
<p>
Created: August 9, 1996<br>
Revised: February 17, 1997</p>
<p>
Microsoft Corporation</p>
<h4>Contents</h4>
<p>
<a href="#authfaq_what">What is Authenticode?</a><br>
<a href="#authfaq_asa">As a Microsoft Internet Explorer End User, How Do I Use Authenticode?</a><br>
<a href="#authfaq_asadev">As a Developer, How Do I Sign My Code?</a><br>
<a href="#authfaq_how">How Does Authenticode Work with Other Technologies?</a><br>
<a href="#authfaq_element">What Are the Elements of Microsoft Code Signing?</a><br>
<a href="#authfaq_devwhat">As a Developer, What Are Some Technical Points to Keep in Mind When Signing Code?</a></p>
<h3><a name="authfaq_what"></a>What Is Authenticode?</h3>
<p>
Support for Authenticode™ technology through Microsoft® Internet Explorer 3.0 lets end users identify who published a software component and verify that no one tampered with it before downloading it from the Internet. Authenticode assures end users before they download signed code from the Internet of the identity of the software publisher and that the code has not been altered after the signature was applied—an approach that is more secure than the use of holograms and shrink-wrap used in retail stores today. While physical packaging can be counterfeited or tampered with, Authenticode lets users know when code has been tampered with.</p>
<h4>Is Authenticode technology really secure?</h4>
<p>
While not guaranteeing bug-free code, Authenticode technology is designed to identify the publisher of the code and to assure end users that software has not been tampered with before or during the download process.</p>
<p>
The security methods used to support this proposal rely on tested and proven technology. Authenticode is based upon specifications that have been used successfully in the industry for some time, including PKCS #7 (encrypted key specification), PKCS #10 (certificate request formats), X.509 (certificate specification), and SHA and MD5 hash algorithms.</p>
<h4>Where should I look for information about Microsoft Authenticode technology?</h4>
<p>
The most comprehensive source of information about Authenticode technology can be found on the <i>Microsoft Security Advisor</i> site at <a href="http://www.microsoft.com/security/">http://www.microsoft.com/security/</a>. The Authenticode section of this site outlines the code signing program and code signing procedures for developers. Other sources of information include: 
<ul type=disc>
<li>
Microsoft ActiveX™ Software Development Kit (SDK) documentation (MSDN Library, SDK Documentation)<br><br></li>
<li>
"Using a COM Object from Java" (MSDN Library, SDK Documentation, Microsoft SDK for Java)<br><br></li>
<li>
The VeriSign code signing FAQ http://digitalid.verisign.com/id_faqs.htm</li>
</ul>
<h3><a name="authfaq_asa"></a>As a Microsoft Internet Explorer End User, How Do I Use Authenticode?</h3>
<h4>When I download a piece of software over the Internet, Microsoft Internet Explorer 3.0 shows me a "certificate." What does this certificate mean?</h4>
<p>
Display of this software publisher certificate means that end users can identify who published this piece of software and know that it has not been altered or tampered with since it left the software publisher. Given this information and assurance, end users can decide whether or not they want to download this software from the Internet.</p>
<h4>What options do I have in using Authenticode with Internet Explorer 3.0?</h4>
<p>
Internet Explorer 3.0 allows end users a broad range of options for using Authenticode. End users can decide how Internet Explorer should treat potentially unsafe code—that is, code that doesn't have a valid software publisher's certificate associated with it—by clicking <b>Options</b> from the <b>View</b> menu, clicking the <b>Security</b> tab, and then setting the <b>Active content</b> safety levels.</p>
<p>
The default setting of "high" means that Internet Explorer will not allow end users to download potentially unsafe code, but does give end users the option of downloading software components that have a valid signature. It is highly recommended that users keep their safety settings at "high." However, if expert users feel safe visiting their favorite Web sites or are in a corporate environment that is not connected to the Internet, they might switch this safety level to "medium," so that Internet Explorer will notify them of potentially unsafe code, but let them download it nevertheless. At a safety setting of "none," Internet Explorer will not notify users of potentially unsafe code; this setting is not recommended under any circumstances.</p>
<h4>If Internet Explorer 3.0 tells me that a piece of software has not been signed, should I download it anyway?</h4>
<p>
This is a decision that should be based on the end user's own judgment. For instance, if the end user has downloaded software from a particular site before and believes that this software can be trusted not to have been tampered with or to behave maliciously, then the end user may decide to download code that has not been signed—that is, code that does not have a valid certificate associated with it. On the other hand, if the end user knows nothing about the software or the site from which it originated, the end user may choose not to download this piece of software.</p>
<h4>Should I trust and download a piece of software, just because it's been signed?</h4>
<p>
Again, this decision relies on the end user's own judgment; however, the certificate provides end users with the data they need to make a more informed decision about this piece of software. If the end user has a great deal of trust in a particular software publisher, then the end user may decide to automatically download any software from this publisher through the settings provided in the <b>Authenticode Security Technology</b> dialog box. (On the <b>View</b> menu, click <b>Options</b>, click the <b>Security</b> tab, and then click <b>Publishers . . .</b>)</p>
<h4>Does a personal certificate or site certificate have anything to do with a software publisher certificate?</h4>
<p>
Personal, site, and publisher certificates are all used to prove identity over the Internet; however, these certificates are used within different contexts. Your personal certificate identifies you to Web sites and allows you to access secured content over the Internet. A site certificate assures you of a Web site's identity and is used for secure communications between you and the Web site. A software publisher certificate, as mentioned previously, identifies the publisher of a piece of software and ensures that the software hasn't been tampered with after it has left the software publisher.</p>
<h4>How can I tell the difference between an individual publisher and a commercial publisher when Internet Explorer presents me with a software publisher's certificate?</h4>
<p>
Before downloading a signed piece of software, Microsoft Internet Explorer identifies the issuer of the software publisher certificate as a certificate authority for either individual or commercial publishers. Internet Explorer 3.01 further differentiates individual and commercial software publishers through the graphical presentation of the certificate to the end user in the <b>Authenticode</b> <b>Security</b> <b>Technology</b> dialog box.</p>
<h4>How can Authenticode be used within a corporate scenario?</h4>
<p>
Using the Internet Explorer Administration Kit, an administrator can preconfigure Internet Explorer safety settings, thereby setting the default manner in which Internet Explorer treats potentially unsafe code, e.g. code that does not have a valid software publisher certificate associated with it. In addition, through this Administration Kit, the administrator can control which <b>Options</b> settings the user can change. Hence, the administrator can prevent unsigned software from being downloaded to end users PCs.</p>
<h3><a name="authfaq_asadev"></a>As a Developer, How Do I Sign My Code?</h3>
<h4>How do I get a software publishing certificate for use with Authenticode?</h4>
<p>
These certificates are obtained from one of two sources: a certificate authority (CA) such as VeriSign or GTE can provide certificates, or a privately controlled certificate server can issue certificates as well. </p>
<p>
VeriSign is now providing Digital IDs for use with Authenticode. GTE software publisher certificates will be available soon after the release of Internet Explorer 3.0. Please see "Digital Certificates for Authenticode" at <a href="http://www.microsoft.com/workshop/prog/security/authcode/certs.htm">http://www.microsoft.com/workshop/prog/security/authcode/certs.htm</a> for more information regarding certificate authorities and getting your certificate.</p>
<h4>For what type of Digital ID should I apply?</h4>
<p>
VeriSign currently offers two types of software publisher Digital IDs: individual (Class 2) and commercial (Class 3). Please see the VeriSign FAQ page (http://digitalid.verisign.com/id_faqs.htm) for more information about these certificates. </p>
<h4>I am a developer outside of the United States and Canada. How can I get a software publisher certificate? </h4>
<p>
International commercial software publishers can obtain a Digital ID for Commercial Software Publishers (Class 3) from VeriSign if they have a Dun &amp; Bradstreet number or written proof of company registration. </p>
<p>
Microsoft is working with VeriSign and other CAs to provide software certificate services for individual software publishers outside of the United States and Canada. At this time, these certificate services are not available. However, for the latest international availability of VeriSign Digital IDs for Individual Software Publishers, please see http://digitalid.verisign.com/.</p>
<h4>What are the criteria for obtaining a commercial software publisher certificate?</h4>
<p>
To issue a commercial software publisher certificate, VeriSign must be able to authenticate the identity of the person and organization applying for the certificate. The most convenient method for a software publisher to establish organizational identity is to submit a D-U-N-S number from Dun &amp; Bradstreet during the enrollment process. </p>
<p>
If a software publisher does not have a D-U-N-S number, they can obtain one from a local Dun &amp; Bradstreet service center quickly and at low cost. For more information about Dun &amp; Bradstreet and getting a D-U-N-S number, please see the Dun &amp; Bradstreet Web site at http://www.dnb.com/.</p>
<p>
To ensure the commercial viability of a software publisher, Microsoft has arranged for VeriSign to check a company's D&amp;B Financial Stress Rating as part of its authentication process. If a company's financial stress rating is 1, 2, or 3 (on a 5-point scale with 1 representing the lowest level of risk), the VeriSign Commercial Software Publisher (Class 3) Digital ID will indicate that the company has met Microsoft's criteria for identification as a commercial software publisher. If the company's rating is 4 or 5, VeriSign will undertake additional checking to determine whether the company meets commercial software publisher criteria. If no financial stress rating exists for a company, the Commercial Software Publisher (Class 3) Digital ID will indicate that. </p>
<p>
In the event that a software publisher cannot get a D-U-N-S number, they can submit articles of incorporation to VeriSign (translated into English).</p>
<h4>How long does it take to get a certificate?</h4>
<p>
After software publishers enroll for their certificates, they can expect that their certificates will be issued within three to five business days.</p>
<h4>How much does certification cost?</h4>
<p>
Available through VeriSign, a Digital ID for commercial software publishers (Class 3) is priced at $400 per year. The price of a Digital ID for individual software publishers (Class 2) is $20 per year.</p>
<p>
An individual certificate's cost will depend upon the pricing structure and policy of the issuing authority. If using an internal certificate server, the cost of the certificate will be determined by the company policy for departmental charge backs. If the certificate is obtained by a private party from a certificate authority (CA) (for example, VeriSign), the price will depend upon the type of the certificate and the pricing established by the CA.</p>
<h4>I heard that VeriSign is offering digital certificates for end users. Will people be able to use those to sign code?</h4>
<p>
End users can obtain code-signing certificates, but the same certificates cannot be used for both code signing and secure connections to Web servers. Software publisher certificates require additional criteria, such as a pledge attesting that the applicant will not sign code that is malicious. Initially, software publisher certificates need to be part of a specific certificate trust hierarchy that Windows® recognizes. See the Microsoft Security Advisor page "Proposal for Authenticating Code Via the Internet" (<a href="http://www.microsoft.com/security/tech/authcode/authcode-f.htm">http://www.microsoft.com/security/tech/authcode/authcode-f.htm</a>) for details on the corporate and individual policies.</p>
<h4>Where do I get the tools for signing my code?</h4>
<p>
Tools for signing code are available in the ActiveX SDK (MSDN Library, SDK Documentation). Developers can find these tools in the \bin directory after installing the ActiveX SDK.</p>
<p>
In addition, developers can use Internet Explorer version 3.0 to test Authenticode. All Microsoft development tools will soon support Authenticode. Microsoft is also working with other tools vendors to ensure that they receive all of the specifications and assistance they need to implement code signatures.</p>
<h4>What are public and private keys?</h4>
<p>
Private and public keys are a matched set of keys created by the software publisher and used for encryption and decryption of the digest into the signature block. The software publisher uses the private key to encrypt the digest into the signature block. This key is never exposed to an outside party. The software publisher also creates the public key. It is verified as part of the certification process by the CA and distributed to the public in the signature block.</p>
<h4>How do I get my public and private keys?</h4>
<p>
The keys are generated at the time the certificate is requested from a Certificate Authority. They are generated on your own PC, and your private key is never sent to the Certificate Authority or any other party.</p>
<h4>How long does it take to sign code?</h4>
<p>
Signing code is a very quick process and needs to be done only once, just before distribution. Software publishers can step through the code-signing process easily within a few minutes.</p>
<h4>When can I start testing signed code?</h4>
<p>
Microsoft Internet Explorer 3.0 supports downloading signed code.</p>
<h3><a name="authfaq_how"></a>How Does Authenticode Work with Other Technologies?</h3>
<h4>Is Authenticode a cross-platform solution?</h4>
<p>
Yes. The specifications were designed to be portable to other platforms, and the technology is not specific to Win32® or other Microsoft executables. Microsoft will focus on making this solution available on the Windows 95 and Windows NT® platforms first, and then Windows 3.1. Microsoft is committed to ensuring that this technology is implemented on the UNIX and Macintosh® platforms.</p>
<h4>Is Authenticode an ActiveX-only technology?</h4>
<p>
No. Authenticode technology produces a signature independent of any file format. Internet Explorer 3.0 supports Authenticode signatures for Win32 executables in addition to Java applets in .class file or .cab file format and ActiveX controls. Additional formats such as documents that contain macros and Macintosh operating system executables will be supported in future products.</p>
<h4>Does Authenticode provide copy protection of my software?</h4>
<p>
Authenticode was not designed to provide copy protection for software. Rather, it was designed to ensure the source and integrity of software. Microsoft has not announced any plans to use digital signature technology to provide copy-protection capabilities.</p>
<h4>Does Microsoft support the sandbox model?</h4>
<p>
Microsoft currently has the most secure sandbox available today in Internet Explorer 3.0 and will continue to add rich capabilities to it.</p>
<h4>With Authenticode, is Microsoft competing against the Java sandbox model?</h4>
<p>
Code signing, as implemented through Authenticode, and the Java sandbox approach are complementary rather than competitive because they solve different parts of the security problem.</p>
<p>
Microsoft currently has the most secure sandbox available today in Internet Explorer 3.0 and will continue to add rich capabilities to it. However, as published reports in the last six months have shown, sandboxing by itself is inadequate to offer a satisfactory level of security. Further, it is unlikely that sandboxing will ever be able to offer a rich enough set of capabilities for many applications. For that reason, Microsoft offers Authenticode as an additional level of security. Authenticode provides users with accountability because it positively identifies the publisher of a piece of code.</p>
<p>
These two security methods augment each other. Some code will run fine within our robust sandbox, but signed code can be run with a higher degree of assurance, whether inside the sandbox or out. Users want their browsers to support both capabilities, and that is why Microsoft is shipping both in Internet Explorer.</p>
<p>
Code signing is also an industry-wide initiative. In fact, Netscape and JavaSoft have publicly announced their intention to support it and the World Wide Web Consortium is currently discussing a Microsoft code-signing submission.</p>
<h4>Can I use Authenticode to sign my Web page?</h4>
<p>
We had not considered signing Hypertext Markup Language (HTML) code or a whole page as a feature for the first release. However, software publisher and page authors have told us that this is a very compelling feature. It presents some unique problems, but we are investigating the possibilities and discussing potential solutions with vendors of authoring tools. We haven't made any announcements yet.</p>
<h4>Does Netscape Navigator check for signed code?</h4>
<p>
No. However, both Netscape and JavaSoft have publicly announced their intent to support code signing in future products.</p>
<h3><a name="authfaq_element"></a>What Are the Elements of Microsoft Code Signing?</h3>
<h4>What is a Certification Authority (CA)?</h4>
<p>
A CA is a third party trusted by the industry, akin to a notary who handles electronic IDs. CAs provide the following types of services:
<ul type=disc>
<li>
Providing, managing, and renewing certificates<br><br></li>
<li>
Authenticating identities<br><br></li>
<li>
Checking registrations<br><br></li>
<li>
Handling legal and liability issues for broken security</li>
</ul>
<p>
Anyone can be a CA or a sub-CA, if they are willing to provide these services. An example of a CA and sub-CA relationship is as follows: VeriSign may be a root CA providing full CA services. A university may want to provide certificates for all of the students in its master's program. The university may be in a good position to authenticate the identity of its students and may be willing to collect and track the necessary paperwork, but may not want to handle liability issues. Thus, the university might want to pass on the liability issues to a root CA such as VeriSign or GTE.</p>
<h4>Tell me how code signing works.</h4>
<p>
After developing and testing its code, a software publisher signs its code. For signing, the code is run through a one-way hash function that produces a fixed-length "digest." The digest is then encrypted with the software publisher's private key and combined into a signature block with the name of the hash algorithm and certificate (which holds the name of the publisher, the public key, name of the CA's certificate, and so on). This signature block is then inserted back into the portable-executable (PE) file format under a reserved section, and the code is distributed over the Internet.</p>
<p>
When the user downloads the code, the downloading application calls the <b>WinVerifyTrust</b> API. The system extracts the signature, determines the CA who authenticated the certificate, and obtains the software publisher's public key distributed by that CA. The system then uses the public key to decrypt the digest. It runs the specified hash on the code again, creating a new digest. If the code has not been modified since it was signed, the new digest should match the old one. If the two digests don't match, either the code was modified, or the public and private keys aren't a matched pair. In either case, the code becomes suspect and the user is warned.</p>
<h4>What are the policies regarding commercial and individual software publishers?</h4>
<p>
Microsoft proposes two sets of policies: commercial (corporate) and individual. Details of both policies are provided in "Proposal for Authenticating Code Via the Internet" on the <i>Microsoft Security Advisor</i> site (<a href="http://www.microsoft.com/security/tech/authcode/authcode-f.htm">http://www.microsoft.com/security/tech/authcode/authcode-f.htm</a>). To summarize:
<ul type=disc>
<li>
The commercial policy requires software publishers to provide proof of identity, take a pledge that their intention is not to distribute malicious code, and have a Dun &amp; Bradstreet rating. See the Dun and Bradstreet Web site (http://www.dnb.com/) for more information about getting a Dun &amp; Bradstreet rating online. Using some form of hardware to maintain their private key is highly recommended.<br><br></li>
<li>
The individual policy requires individuals to provide proof of identity (but to a lesser degree than the commercial policy), take the pledge, and promise to take reasonable steps to keep their private key secure (this does not require hardware).</li>
</ul>
<h4>Why do we need two sets of policies?</h4>
<p>
These policies allow differentiation between commercial and individual software publishers, while enabling both types of publishers to sign their code. By knowing that a software publisher is a commercial entity, an end user may decide to trust that publisher's code differently than that of a hobbyist. </p>
<p>
That being said, we consider individual contributions to the Internet very valuable if the Internet is to evolve beyond a platform used only for browsing content. There is nothing that prevents an individual certificate holder from upgrading his or her certificate to a commercial level. There is the hurdle of cost, but these are for services necessary to implement the open standard successfully.</p>
<h4>Why use a Dun &amp; Bradstreet rating rather than other identification, such as a social security number?</h4>
<p>
Dun &amp; Bradstreet ratings are extremely easy to get. If a software publisher has released a financial statement or paid taxes, it probably has a Dun &amp; Bradstreet rating. If the publisher does not have a Dun &amp; Bradstreet rating, it's very easy to request one. Another advantage of Dun &amp; Bradstreet ratings is that they are also used internationally, whereas social security numbers are not.</p>
<h4>What if someone steals my key and starts distributing bad code with it?</h4>
<p>
One of the services that the CA provides is to maintain a list of revoked keys. If someone steals a software publisher's key, the publisher can get its certificate revoked and get a new certificate with a new set of keys immediately by contacting its CA. Users can refresh their list of public keys on a periodic basis. The size of the revoked certificate list should be very small (like a stolen credit card list, but even smaller). When the user tries to download code signed under the software publisher's old certificate, the user is warned that the certificate has been revoked. When the software publisher gets a new certificate and a new set of keys, the publisher will have to refresh the installed base with a new release of software signed with the new certificate. The publisher will then have to refresh its customer base with its newly signed controls. (This is similar to a recall of software, except publishers are spared the expense of cleaning the channel of bad disks.)</p>
<h4>What exactly is my liability when I sign code?</h4>
<p>
The act of signing code does not imply liability—it only provides identification of the software publisher and assurance that the code has not been tampered with since it left the publisher's hands. However, federal law does prohibit the intentional distribution of malicious code.</p>
<h4>What encryption algorithms are you using? What about exporting these?</h4>
<p>
Exporting signed code is not a problem, as software publishers encrypt only a small digest or hash of their code. The export laws treat digital signatures as a special case. There are no export controls on the encryption of message digests, so software publishers can use a strong RSA public key for these digests.</p>
<h4>What happens when my certificate expires?</h4>
<p>
The expiration of certificates provides an added measure of security. (For example, if a university certifies all of its students with digital IDs, it could set each ID to expire when the student leaves the university.) Code that is signed with an expired certificate is invalid. When the certificate expires, the software publisher will need to resign its code and post new versions of this code. In the future, when an Internet time stamp is available, software publishers will be able to sign code with a time stamp to prove that the certificate was valid at the time the code was signed; then the signed code will remain valid even after the certificate expires.</p>
<h3><a name="authfaq_devwhat"></a>As a Developer, What Are Some Technical Points to Keep in Mind When Signing Code?</h3>
<h4>What types of code can I sign?</h4>
<p>
With Authenticode technology, software publishers can currently sign 32-bit .exe files (PE files), .cab files, .ocx files, and .class files. </p>
<h4>Why don't I see my MakeCert-generated test certificate?</h4>
<p>
Test certificates can be generated with the MakeCert utility. For certificates generated by MakeCert to be recognized, it is necessary to run (double-click) the wvtston.reg file. Running wvtstoff.reg can back out registry entries created with wvtston.reg. These .reg files are shipped with the MakeCert tool in the ActiveX SDK.</p>
<h4>Do I have to request, retrieve, and sign my code on the same machine?</h4>
<p>
You must request all types of certificates on the same machine from which you apply for the certificate. However, after you have downloaded the software publisher certificate from the certificate authority, you can transport your certificate between machines. To do so, you must transport the matching private key (.pvk file) and certificate (.spc file) together. </p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Test certificates generated with MakeCert may not be portable if the private key was generated in the registry. The private key is generated in the registry by default unless you specify the <b>-k</b> option to request a private key.</p>
<h4>I generated my private key already. Where is my software publisher certificate?</h4>
<p>
When applying for a software publisher certificate, you are asked to provide a floppy disk on which to store your private key. After the certificate authority (CA) has processed your application, the CA notifies you to pick up your certificate. The private key and certificate are a matched pair and must be used together to sign code.</p>
<h4>Code signing fails with error 80004005 when signing a .cab file. What causes this?</h4>
<p>
The lack of reserved space in the .cab file for the certificate usually causes this error. If you are using a .ddf file to build your .cab, include the line:</p>
<pre><code>.ReservePerCabinetSize=6144.
</code></pre>
<p>
If you are using cabarc, include the -s parameter as follows:</p>
<pre><code>cabarc -s 6144.
</code></pre>
<h4>I signed my code but I still get the message, "This page contains an ActiveX control with data that is not known to be safe," or, "This page contains both scripts and a control that are not known to be safe for scripts to use."</h4>
<p>
If Internet Explorer's safety level setting is "medium" or "high," a <b>Potential Safety Violation</b> message box appears when the page contains active content that is not verifiably safe to display. Internet Explorer either refuses to display the control or provides an option to download and use the control. There are two ways to resolve this issue.</p>
<p>
The first option is for control developers to register their controls as implementing the "safe for scripting" component category. When Internet Explorer encounters an &lt;OBJECT&gt; tag, it uses the Component Categories Manager to determine whether the specified CLASSID is safe for scripting. For one method of marking Microsoft Foundation Class Library (MFC) controls "safe," see "How To Mark MFC Controls Safe for Scripting/Initialization" in the Visual C++ documentation (MSDN Library, Knowledge Base). See "Signing and Marking ActiveX Controls" (MSDN Library, Technical Articles) for more information on marking your control safe for scripting.</p>
<p class=indent>
<B><b>Important Note&nbsp;&nbsp;&nbsp;</b></B>Please do not mark controls "safe" if they are not.</p>
<p>
The second option is for control developers to implement the <b>IObjectSafety</b> interface. More information about the first and second options can be found in "Marking a Control as Safe" in the ActiveX SDK documentation (MSDN Library, SDK Documentation).</p>
</BODY>
</HTML>

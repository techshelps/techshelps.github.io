<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DLLs, Type Libraries, and Microsoft Transaction Server</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_dllmts"></a>DLLs, Type Libraries, and Microsoft Transaction Server</h1>
<p>
Microsoft Corporation</p>
<p>
June 1997</p>
<h2>Abstract</h2>
<p>
A Microsoft® Transaction Server (MTS) component is a type of COM component that executes in the MTS run-time environment. In addition to the COM requirements, MTS requires that the component must be a dynamic-link library (DLL). Components that are implemented as executable files (.exe files) cannot execute in the MTS run-time environment. For example, if you built a Remote Automation server executable file with Visual Basic®, you must rebuild it as a DLL in order to use it in an MTS environment.</p>
<h2>Additional Requirements for Visual C++ Components</h2>
<ul type=disc>
<li>
The component must have a standard class factory.<p class=tl>
The component DLL must implement and export the standard <b>DllGetClassObject</b> function and support the IClassFactory interface. MTS uses this interface to create objects.</P></li>
<li>
The component must only export interfaces that use standard marshaling. See <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="msdn_Parameter">
</object><a href=JavaScript:alink_1.Click()>“Parameter Passing in Microsoft Transaction Server”</a> for more information.<br><br></li>
<li>
All component interfaces and co-classes must be described by a type library. The information in the type library is used by the MTS Explorer to extract information about the installed components.<br><br></li>
<li>
For custom interfaces that cannot be marshaled using standard OLE automation support, you must: build the proxy-stub DLL with MIDL version 3.00.44 or later (provided with the Win32® SDK for Windows NT® version 4.0), use the Oicf compiler switch, and link the DLL with the mtxih.lib library provided by MTS. The mtxih.lib library must be the first file that you link into your proxy-stub DLL. If the component has both a type library and a proxy-stub DLL, MTS will use the proxy-stub DLL.<br><br></li>
<li>
The component must export the <b>DllRegisterServer</b> function and perform self-registration of its CLSID, ProgID, interfaces, and type library in this routine.</li>
</ul>
<p>
Development tools such as Microsoft Visual Basic and the ActiveX™ Template Library, which is available with Microsoft Visual C++®, allow you to generate interfaces that can be marshaled with a type library automatically. These interfaces, known as dual interfaces, are derived from IDispatch and use the built-in automation marshaling support.</p>
<h2>Including Multiple Components in DLLs</h2>
<p>
You can implement multiple components in the same DLL. Note that when using the MTS Explorer to install components, all components in a DLL will be registered with MTS. Importing components that are already registered allows you to choose individual components. MTS 2.0 allows components from the same DLL to be installed in separate packages.</p>
<h2>Including Type Libraries and Proxy-Stub DLLs in Microsoft Transaction Server Components</h2>
<p>
Development tools supporting ActiveX components may merge your type library or proxy-stub DLL with your implementation DLL. If you do not want to distribute your implementation DLL to client computers, keep your type libraries and proxy-stub DLLs separate from your implementation DLLs. The client only needs a type library or custom proxy-stub DLL to use your server application remotely.</p>
</BODY>
</HTML>

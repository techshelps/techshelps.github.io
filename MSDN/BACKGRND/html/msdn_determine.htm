<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Determining Transaction Outcome in Microsoft Transaction Server</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_determine"></a>Determining Transaction Outcome in Microsoft Transaction Server</h1>
<p>
Microsoft Corporation</p>
<p>
June 1997</p>
<h2>Abstract</h2>
<p>
This article discusses how applications determine the outcome of a transaction—that is, whether the transaction will commit or abort.</p>
<h2>Transaction Outcome</h2>
<p>
First, it is important to understand that the Microsoft® Transaction Server (MTS) objects involved in a transaction do not need to know the transaction outcome—all objects involved in a transaction are automatically deactivated. This causes the objects to lose any state that they acquired during the transaction. Consequently, their behavior is not affected by the outcome of the transaction.</p>
<p>
Each object can participate in determining the outcome of a transaction. Objects call <b>SetComplete</b>, <b>SetAbort</b>, <b>EnableCommit</b>, and <b>DisableCommit</b>, based on the desired component behavior. For example, an object would typically call <b>SetAbort</b> after receiving an error from a database operation, on a method call to another object, or due to a violation of a business rule (for example, account overdrawn).</p>
<h2>Transaction Success or Failure</h2>
<p>
The client of the transaction determines its success or failure (commit or abort) based on values returned on the method call that caused the transaction to complete. The client can be either a base client or another MTS object that exists outside the transaction. The client must know which methods cause transactions to complete and how the method output values can be used to determine success (commit) or failure (abort).</p>
<p>
An object method that intends to commit a transaction typically returns an HRESULT value of S_OK after calling <b>SetComplete</b>. On return, MTS automatically completes the transaction. If the transaction commits, the S_OK value is returned to the client. If it aborts, the HRESULT value is changed to CONTEXT_E_ABORTED. The client can use these two values to determine the outcome.</p>
<p>
There are two common approaches that can be used by an object method to notify its client that it has forced the transaction to abort (by calling <b>SetAbort</b>):
<ul type=disc>
<li>
Return S_OK and use an output parameter to indicate the failure.<br><br></li>
<li>
Return an HRESULT error code. Different codes could be used to distinguish different causes, or the generic CONTEXT_E_ABORTED error could be used.</li>
</ul>
<p>
For example, the Sample Bank application uses an output parameter to indicate failure:</p>
<pre><code>Public Function Perform(lngPrimeAccount As Long, _
 &nbsp; lngSecondAccount As Long, lngAmount As Long, _
 &nbsp; strTranType As String, <span class=cfe>ByRef strResult As String</span>) _
 &nbsp; As Long

' get our object context
Dim ctxObject As ObjectContext
Set ctxObject = GetObjectContext()
 

<span class=cfe>On Error GoTo ErrorHandler</span>

 
' check for security
If (lngAmount &gt; 500 Or lngAmount &lt; -500) Then
 &nbsp;&nbsp; If Not ctxObject.IsCallerInRole("Managers") Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Err.Raise Number:=ERROR_NUMBER, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Description:="Need 'Managers' role " + _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "for amounts over $500"
 &nbsp;&nbsp; End If
End If
.
.
.
ctxObject.SetComplete&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' we are finished and happy
Perform = 0
Exit Function

<span class=cfe>ErrorHandler:</span>


<span class=cfe>ctxObject.SetAbort&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' we are unhappy</span>

<span class=cfe>strResult = Err.Description&nbsp; ' return the error message</span>

<span class=cfe>Perform = -1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' indicate that an error occured</span>


End Function
</code></pre>
<p>
It is also important to note that there are failure scenarios where the transaction outcome cannot be determined by the client. This can occur when a call failure occurs due to a transport error (for example, RPC_E_CONNECTION_TERMINATED). An application-defined protocol must be used in such cases to determine the transaction outcome.</p>
<p>
Resource managers are guaranteed to get transaction outcomes as part of the two-phase commit protocol (managed by the Microsoft Distributed Transaction Coordinator). This allows resource managers to manage locks (isolation) and to determine whether state changes should be made permanent or discarded.</p>
</BODY>
</HTML>

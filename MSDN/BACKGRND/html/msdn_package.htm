<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Packaging Microsoft Transaction Server Components</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_package"></a>Packaging Microsoft Transaction Server Components</h1>
<p>
Microsoft Corporation</p>
<p>
June 1997</p>
<h2>Abstract</h2>
<p>
This article describes how you should package your Microsoft® Transaction Server (MTS) components. Consider the following design issues when defining package boundaries:
<ul type=disc>
<li>
Activation<br><br></li>
<li>
Shared resources<br><br></li>
<li>
Fault isolation<br><br></li>
<li>
Security isolation</li>
</ul>
<h2>Activation</h2>
<p>
In Microsoft Transaction Server version 1.1, you should set one of the following activation levels for your component:
<ul type=disc>
<li>
<i>In-process</i> (running within the same process as the client that creates the object)<br><br></li>
<li>
<i>Local</i> (on the same computer but in a different process)</li>
</ul>
<p>
It is recommended that all components within a package run with the same activation level. In MTS 2.0 the activation level is set at the package level; you can no longer use component-level activations.</p>
<h3>Setting Up Remote Components</h3>
<p>
MTS developers should also avoid using the <b>Remote</b> setting, as MTS provides an easier way to set up remote components by using the Remote Computer and Remote Component folders in the MTS Explorer hierarchy. For more information about "pulling" or "pushing" components between computers, refer to the <i>Administrator’s Guide </i>in the Microsoft Transaction Server Help. The Remote activation option could be used to switch quickly between local and remote activation of a single component for test purposes. You should note that if a component is marked for remote activation, this setting only affects local clients. Think of remote activation as a "redirection" that is in effect only for local clients. Note that this redirection can only include one “hop." If component activation is redirected from computer A to computer B, computer B cannot further redirect activation to a third computer. You should also note that the properties that are to be applied to the component at run-time (for example, transaction support) will be picked up from the configuration information on the target computer. For example, if a component is configured on computer A for remote activation on computer B, the properties settings that are stored on computer B will be applied to the component at run-time. The properties set for the component on computer A (other than activation) would be ignored.</p>
<p>
Due to the restrictions noted above you should use the remote activation option sparingly and only for test purposes. Once the final location of a server component is determined, you will find it easier to manage if you install it in a package on that target computer and set it for local activation.</p>
<p>
By default, components run in a server process on the local computer. If you run your components within the MTS server process, you enable resource sharing, security, and easier administration by using the MTS Explorer for your component. Running components in-process provides an immediate performance benefit, because you do not have to <i>marshal</i> parameters cross-process. However, in-process components do not support <i>declarative security</i> and you lose fault isolation.</p>
<h3>In-Process Components and Security</h3>
<p>
Note that in-process components do not support declarative security or offer the benefits of process isolation. In-process components will run in any process that creates the component. <i>Role checking</i> is disabled between components because <b>IsCallerInRole</b> returns True (the direct caller always passes the authorization check).</p>
<p>
Also, try to place your components as close as possible to the data source. If you are building a distributed application with a number of packages running on <i>local</i> and <i>remote</i> servers, group your components according to the location of your data (if possible). For example, in the following figure below, the Accounting server hosts an Accounting package and Accounting database.</p>
<p>
<img src="package1.gif" border=0></p>
<h2>Shared Resources</h2>
<p>
Sharing resources in a multi-user environment results in faster applications that scale more easily. Note that only components marked with the <b>Local</b> activation setting can share resources. You should package your components to take advantage of the resource sharing and <i>pooling</i> that MTS provides for your application.</p>
<p>
Pool your resources by server process (note that MTS runs each hosted package in a separate server process). The fewer pools you have running on your server, the more efficient the pooling of resources. Consider the type of resources that components are sharing in your package, and try to group components that share "expensive" resources, like connections to a specific database. If you reuse the expensive resources within your package, you can greatly improve the performance and scale of your application. For example, if you have a database lookup and a database update component running in a customer maintenance application, you should package those components together so they can share database connections.</p>
<h2>Fault Isolation</h2>
<p>
<i>Fault isolation</i> entails separating components into packages that can operate in their own server process. Components in the same package will share the same server process if all the activation settings are the same. By placing components in separate packages, you can mitigate the impact of a component failure because each package runs in a separate server process.</p>
<p>
Fault isolation can also be used to test new components. Using fault isolation, you can stage updates to MTS applications by introducing new components. Fault isolation for packages greatly reduces the risk of your local server package failing when you introduce a new component to a shared environment.</p>
<h2>Security Isolation</h2>
<p>
MTS <i>security roles</i> represent a logical group of users that are mapped to Microsoft Windows NT® domain users and groups during the deployment of the package. You can use the MTS Explorer to define <i>declarative authorization checking </i>by applying roles to components and component interfaces. Applying a security role to a component defines access privileges for any user assigned as a member of that security role. Users who are not assigned to a role with access privileges to a package will not be able to use the package. Because security authorization occurs between packages rather than between components within a package, you should consider the MTS security model when determining your package boundaries. Note that security isolation only applies to packages with components running under the <b>Local</b> activation setting.</p>
<p>
Security authorization is checked when a method call crosses a package boundary (such as when a client calls into a package or one package calls another). When you package your components, make sure you group components that can safely call each other without requiring security checks within one package.</p>
<p>
All components within a package will run under the identity established for the package. If two components must run under different identities then they should be separated into two different packages.</p>
<p>
You can use declarative security between the client and server, and database security based on package identity between the server and data source. You can restrict access to a data source by assigning an identity to a package and configuring the database to accept updates according to package identity.</p>
<p>
If you use package identity to set up your database security, the database recognizes the package identity as a single user. If database access occurs under an identity set by the package, the database connection set up for the package identity name can be used by all the users mapped to role or roles for that package. This kind of resource sharing improves application performance and scalability.</p>
</BODY>
</HTML>

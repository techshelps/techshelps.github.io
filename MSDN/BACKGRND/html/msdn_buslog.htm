<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Business Logic in Microsoft Transaction Server Components</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_buslog"></a>Business Logic in Microsoft Transaction Server Components</h1>
<p>
Microsoft Corporation</p>
<p>
July 1997</p>
<h2>Abstract</h2>
<p>
This article describes how to enact business logic in Microsoft® Transaction Server (MTS) components.</p>
<h2>Component Granularity</h2>
<p>
<i>The granularity</i> of a component is determined by the number of tasks it performs. The granularity<i> </i>of a component affects performance, debugging, and reusability of your MTS components. </p>
<h3>Fine-Grained Components</h3>
<p>
A <i>fine-grained</i> component performs a single task, such as calculating tax on a sales order. For example, a fine-grained component consumes and releases resources quickly after completing a task. Note that components that enact a single business rule can facilitate testing packages, because isolating individual tasks in components makes testing your applications easier. In addition, fine-grained components are easily reused in other packages. In the Classified Advertisement sample application, the Customers component performs a single task: adding a customer record to the database.</p>
<h4>Example</h4>
<pre><code>Function Update(ByVal strEmail As String, _
ByVal bNewCust As Boolean, ByVal strContact As String,_
ByVal strPhoneNumber As String, _
ByVal strNightPhoneNumber As String)

 &nbsp;&nbsp; Dim ctxObject As ObjectContext
 &nbsp;&nbsp; Set ctxObject = GetObjectContext

 &nbsp;&nbsp; On Error GoTo ErrorHandler

' Code accesses the customer row from the database.
' Customer information is updated with information
' that was passed in.
'
 &nbsp;&nbsp; ctxObject.SetComplete

 &nbsp;&nbsp; Exit Function
</code></pre>
<p>
This simple Customer component is efficient in its use of system resources (by passing parameters by value), easy to debug (single function), and also reusable in any other application in which customer data is maintained.</p>
<h3>Coarse-Grained Components</h3>
<p>
A <i>coarse-grained</i> component is a component that performs multiple tasks. Coarse-grained components are generally harder to debug and reuse in applications. For example, a PlaceOrder component might add a new order, update inventory, and update customer information. PlaceOrder is a more coarsely grained component because it performs more “work” by adding, updating, and deleting customer, inventory, and order information.</p>
<p>
Refer to <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="msdn_state">
</object><a href=JavaScript:alink_1.Click()>“Holding State in Objects”</a> for more information about components' shared resources.</p>
</BODY>
</HTML>

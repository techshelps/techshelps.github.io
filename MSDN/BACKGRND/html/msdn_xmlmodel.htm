<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The XML Object Model in Microsoft Internet Explorer 4.0</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_xmlmodel"></a>The XML Object Model in Microsoft Internet Explorer 4.0</h1>
<p>
Microsoft Corporation</p>
<p>
January 7, 1998</p>
<h4><a name="xmlmodel_contents"></a>Contents</h4>
<p>
<a href="#xmlmodel_intro">Introduction</a><br>
<a href="#xmlmodel_doc">XML Document Properties and Methods</a><br>
<a href="#xmlmodel_elemprop">XML Element Properties and Methods</a><br>
<a href="#xmlmodel_elemcol">Element Collection Properties and Methods</a><br>
<a href="#xmlmodel_samp">Sample JScript Program</a></p>
<h3><a name="xmlmodel_intro"></a>Introduction</h3>
<p>
The XML object model in Microsoft® Internet Explorer version 4.0 provides a means by which you can navigate and manipulate an Extensible Markup Language (XML) document. An XML document is a treelike structure, starting with the top-level element (its root) and branching out to its descendants. Being able to navigate this tree enables you to retrieve important information concerning the source document.</p>
<p>
This document explains how to access the XML object model from script in Internet Explorer 4.0. Information on the C++ interfaces can be found in the "Reference" section under the "XML Object Model" topic of the Internet Client SDK (see the MSDN™ Library, Internet Client SDK). At the end of this document, you'll find an example of a Microsoft JScript™ program (see the section, <a href="#xmlmodel_samp">"Sample JScript Program"</a>) that uses the XML object model to display an XML document in a Web page.</p>
<p>
In accessing the XML object model, three objects are used: the XML Document, the XML Element, and the Element Collection (see the sections, <a href="#xmlmodel_doc">"XML Document Properties and Methods,"</a> <a href="#xmlmodel_elemprop">"XML Element Properties and Methods,"</a> and <a href="#xmlmodel_elemcol">"Element Collection Properties and Methods,"</a> respectively).</p>
<p>
<img src="xmlmodel01.gif" border=0></p>
<p class=label>
<b>Figure 1. The XML Document is an object representing an XML source document. That Document consists of a root element (the top-level element) and its descendants (the other elements). An Element Collection is a group of sibling elements.</b></p>
<p>
You create an XML document object by creating a new ActiveX™ object:</p>
<pre><code>var xml = new ActiveXObject("msxml");
</code></pre>
<p>
This code assigns the XML Document object to the variable <i>xml</i>.</p>
<p>
Once you have created an XML Document object, you can access information concerning the object and manipulate the object by calling the following properties and methods. In the examples, <i>xml</i> is the document created above.</p>
<p>
<a href="#xmlmodel_contents">Return to Contents</a></p>
<h3><a name="xmlmodel_doc"></a>XML Document Properties and Methods</h3>
<h4>URL</h4>
<p class=dt>
<i>Description</i></p>
<p class=indent>
Returns the Uniform Resource Locator (URL) associated with the document.</p>
<p class=dt>
<i>Prototype</i></p>
<p class=indent>
xml.URL</p>
<p>
<i>Example</i></p>
<p class=indent>
<code>xml.URL = "http://Chein/_private/pdcxml.xml";</code></p>
<p class=indent>
</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>You can also use <b>URL</b> to load a new document based on another URL. The current document is destroyed and the new document is loaded in its place:</p>
<p class=indent>
<code>xml.URL = "http://Chein1/_private/newXML.xml";</code></p>
<p class=indent>
</p>
<h4>root</h4>
<p class=dt>
<i>Description</i></p>
<p class=indent>
Returns the root element of the document.</p>
<p class=dt>
<i>Prototype</i></p>
<p class=indent>
xml.root</p>
<p>
<i>Example</i></p>
<p class=indent>
<code>var docroot = xml.root;</code></p>
<p class=indent>
</p>
<h4>charset</h4>
<p class=dt>
<i>Description</i></p>
<p class=indent>
Returns a string that specifies the character set of the input document according to International Standards Organization (ISO) standards.</p>
<p class=dt>
<i>Prototype</i></p>
<p class=indent>
xml.charset</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>You can also assign a character set for the XML document.</p>
<h4>version</h4>
<p class=dt>
<i>Description</i></p>
<p class=indent>
Returns the version of the XML specification being used.</p>
<p class=dt>
<i>Prototype</i></p>
<p class=indent>
xml.version</p>
<h4>doctype</h4>
<p class=dt>
<i>Description</i></p>
<p class=indent>
Returns the content specified in the !DOCTYPE element.</p>
<p class=dt>
<i>Prototype</i></p>
<p class=indent>
xml.doctype</p>
<h4>createElement()</h4>
<p class=dt>
<i>Description</i></p>
<p class=indent>
Creates a new element that can then be added as a child to another element in the tree. The first argument in the following example references the element type (see the section, <a href="#xmlmodel_elemprop">"XML Element Properties and Methods"</a>). A list of types and corresponding number references is provided in the explanation of the <b>type</b> method call.</p>
<p class=dt>
<i>Prototype</i></p>
<p class=indent>
xml.createElement(elementType, newTagName)</p>
<p>
<i>Example</i></p>
<p class=indent>
<code>var newElem = xml.createElement(0, "NEW-DESCRIPTION");</code></p>
<p class=indent>
</p>
<h4>fileSize</h4>
<p class=dt>
<i>Description</i></p>
<p class=indent>
Returns the file size of the XML document.</p>
<p class=dt>
<i>Prototype</i></p>
<p class=indent>
xml.fileSize</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This property is documented in the C++ documentation, but has yet to be implemented.</p>
<h4>fileModifiedDate</h4>
<p class=dt>
<i>Description</i></p>
<p class=indent>
Returns the date when the file was last modified.</p>
<p class=dt>
<i>Prototype</i></p>
<p class=indent>
xml.fileModifiedDate</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>This property is documented in the C++ documentation, but has yet to be implemented.</p>
<h4>fileUpdatedDate</h4>
<p class=dt>
<i>Description</i></p>
<p class=indent>
Returns the date when the file was last updated.</p>
<p class=dt>
<i>Prototype</i></p>
<p class=indent>
xml.fileUpdatedDate</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>This property is documented in the C++ documentation, but has yet to be implemented.</p>
<h4>mimeType</h4>
<p class=dt>
<i>Description</i></p>
<p class=indent>
Returns the Multipurpose Internet Mail Extension (MIME) type. MIME is a set of enhancements to Simple Mail Transfer Protocol (SMTP) allowing an Internet message to include a mixture of audio, image, video, and text components and to accommodate a variety of international character sets. A MIME header at the top level of the SMTP header identifies MIME messages. The MIME mechanisms are specified in the RFC 1341 document.</p>
<p class=dt>
<i>Prototype</i></p>
<p class=indent>
xml.mimeType</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>This property is documented in the C++ documentation, but has yet to be implemented.</p>
<p>
With access to these properties and methods, you can now specify the XML data file to be loaded by the XML Document object:</p>
<pre><code>xml.URL = "http://Chein1/_private/pdcxml.xml";
</code></pre>
<p>
Likewise, using <b>root</b> you can now identify the document root of the XML document pointed to by the URL specified above:</p>
<pre><code>var docRoot = xml.root
</code></pre>
<p>
Having located the document root, it becomes easy to navigate the tree. The following properties and methods allow you access to the document root and all of its children. In the examples, <i>elem</i> represents an XML Element object.</p>
<p>
<a href="#xmlmodel_contents">Return to Contents</a></p>
<h3><a name="xmlmodel_elemprop"></a>XML Element Properties and Methods</h3>
<h4>type</h4>
<p class=dt>
<i>Description</i></p>
<p class=indent>
Returns the element type of the requested element:</p>
<p class=indent>
0 – ELEMENT<br>
1 – TEXT<br>
2 – COMMENT<br>
3 – DOCUMENT<br>
4 – DTD</p>
<p class=indent>
For Internet Explorer 4.0, the interesting element types are ELEMENT, TEXT, and COMMENT. In the JScript program at the end of this document, <i>elem.type</i> is used to differentiate between tag names and text.</p>
<p class=dt>
<i>Prototype</i></p>
<p class=indent>
elem.type</p>
<p>
<i>Example</i></p>
<p class=indent>
<code>if (elem.type == 0)</code></p>
<p class=indent>
<code>&nbsp;&nbsp;return "ELEMENT";</code></p>
<p class=indent>
</p>
<h4>tagName</h4>
<p class=dt>
<i>Description</i></p>
<p class=indent>
Returns the name of the tag as a string. The name is always in uppercase. The name of a comment element is returned as "!". The other META tags have names that correspond to the special character followed by the META tag name. For instance, the name of <code>&lt;?XML...&gt;</code> is "?XML".</p>
<p class=dt>
<i>Prototype</i></p>
<p class=indent>
elem.tagName</p>
<p>
<i>Example</i></p>
<p class=indent>
<code>//If it is a tag, return the tag name as a string.</code></p>
<p class=indent>
<code>if (elem.type == 0)</code></p>
<p class=indent>
<code>&nbsp;&nbsp;return elem.tagName;</code></p>
<p class=indent>
</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>It is also possible to change a tag name by assigning a value to that property:</p>
<p class=indent>
<code>//if a &lt;PAINTING&gt; element, change its tag name to "OIL-PAINTING"</code></p>
<p class=indent>
<code>if (elem.tagName == "PAINTING")</code></p>
<p class=indent>
<code>&nbsp;&nbsp;elem.tagName = "OIL-PAINTING";</code></p>
<p class=indent>
</p>
<h4>text</h4>
<p class=dt>
<i>Description</i></p>
<p class=indent>
Returns the content of text and comment elements. The content of a text element is the text between the tags. All mark-up between the tags is stripped. For instance, the contents of the following element, <code>&lt;TITLE&gt;Review of &lt;MOVIE&gt;Titanic&lt;/MOVIE&gt;&lt;/TITLE&gt;</code>, would be "Review of Titanic". The content of a comment is the comment. For example, the following element, <code>&lt;! This is a comment/&gt;</code>, has the name "!" and the content "This is a comment".</p>
<p class=dt>
<i>Prototype</i></p>
<p class=indent>
elem.text</p>
<p>
<i>Example</i></p>
<p class=indent>
<code>//If the node is a text node</code></p>
<p class=indent>
<code>if (elem.type == 1)</code></p>
<p class=indent>
<code>&nbsp;&nbsp;return elem.text;</code></p>
<p class=indent>
</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>It is also possible to add to or change the text of an element by assigning a value to the text property:</p>
<p class=indent>
<code>//Replaces the text of the element with the string "This is an element"</code></p>
<p class=indent>
<code>if (elem.type == 1)</code></p>
<p class=indent>
<code>&nbsp;&nbsp;elem.text = "This is an element";</code></p>
<p class=indent>
</p>
<h4>addChild()</h4>
<p class=dt>
<i>Description</i></p>
<p class=indent>
Allows for the addition of children elements. The Element object passed to <b>addChild</b> is the element that is to become the new child. The index argument refers to the new element's relative position among its new siblings. "-1" must always be the final argument. All the children and descendants of this new child element remain attached as before. Any element can have only one parent element, so the previous parent will lose this child from its subtree. Note that it is possible to use this method to break off a subtree from one XML document and attach it to another XML document. However, there are some stringent restrictions on when this can be done:
<ul type=disc>
<li>
There can be no outstanding references on collections on the child element or any of its descendants.<br><br></li>
<li>
There can be no reference on any of the descendant elements of the child.</li>
</ul>
<p class=indent>
If these restrictions are not adhered to, an error will be returned. Finally, the implementation of breaking off a node that has many children and attaching it to a tree of another document is somewhat more expensive than breaking off a node and attaching it to another node of the same document.</p>
<p class=dt>
<i>Prototype</i></p>
<p class=indent>
elem.addChild(elementObject, index, -1)</p>
<p>
<i>Example</i></p>
<p class=indent>
<code>//If the element has at least one child, add a descendant as a child.</code></p>
<p class=indent>
<code>if (elem.children.item(0) != null)</code></p>
<p class=indent>
<code>&nbsp;&nbsp;elem.addChild(elem.children.item(0).children.item(0), 0, -1);</code></p>
<p class=indent>
</p>
<h4>removeChild()</h4>
<p class=dt>
<i>Description</i></p>
<p class=indent>
Allows for the removal of children elements. The element remains in memory and can be reattached to a tree by using <b>addChild</b>. All the children and descendants of this child element remain attached as before. It is possible to use this method to break off a subtree from one XML document and attach it to another XML document. However, there are restrictions, as explained in <b>addChild</b>.</p>
<p class=dt>
<i>Prototype</i></p>
<p class=indent>
elem.removeChild(childElement)</p>
<p>
<i>Example</i></p>
<p class=indent>
<code>//If the element has more than one child, remove the second</code></p>
<p class=indent>
<code>//child element.</code></p>
<p class=indent>
<code>if (elem.children.item(0).length 1)</code></p>
<p class=indent>
<code>&nbsp;&nbsp;elem.removeChild(elem.children.item(1));</code></p>
<p class=indent>
</p>
<h4>parent</h4>
<p class=dt>
<i>Description</i></p>
<p class=indent>
Returns the immediate ancestor of the requested element. Every element in the tree, except the document root, has a parent.</p>
<p class=dt>
<i>Prototype:</i></p>
<p class=indent>
elem.parent</p>
<p>
<i>Example:</i></p>
<p class=indent>
<code>//If the element is not the root element</code></p>
<p class=indent>
<code>if (elem != xml.root)</code></p>
<p class=indent>
<code>&nbsp;&nbsp;return elem.parent.tagName;</code></p>
<p class=indent>
</p>
<h4>getAttribute()</h4>
<p class=dt>
<i>Description</i></p>
<p class=indent>
Returns the value of the specified attribute of the requested element. This value will always be returned as a string.</p>
<p class=dt>
<i>Prototype</i></p>
<p class=indent>
elem.getAttribute(attributeName)</p>
<p>
<i>Example</i></p>
<p class=indent>
<code>if (elem.getAttribute("font-style") == "italic")</code></p>
<p class=indent>
<code>&nbsp;&nbsp;return "italic";</code></p>
<p class=indent>
</p>
<h4>setAttribute()</h4>
<p class=dt>
<i>Description</i></p>
<p class=indent>
Allows for the setting of an attribute. The attribute's name and its new value are provided. The previous value of this attribute is lost. A private copy of the input value is made. The attribute value is always stored as a string. Therefore, the new attribute value should be passed as a string.</p>
<p class=dt>
<i>Prototype</i></p>
<p class=indent>
elem.setAttribute(attributeName, attributeValue)</p>
<p>
<i>Example</i></p>
<p class=indent>
<code>if (elem.getAttribute("font-style") == "italic")</code></p>
<p class=indent>
<code>&nbsp;&nbsp;elem.setAttribute("font-style","normal");</code></p>
<p class=indent>
</p>
<h4>removeAttribute()</h4>
<p class=dt>
<i>Description</i></p>
<p class=indent>
Allows for the removal of an attribute.</p>
<p class=dt>
<i>Prototype</i></p>
<p class=indent>
elem.removeAttribute(attributeName)</p>
<p>
<i>Example</i></p>
<p class=indent>
<code>if (elem.getAttribute("font-style") == "italic")</code></p>
<p class=indent>
<code>&nbsp;&nbsp;elem.removeAttribute("font-style");</code></p>
<p class=indent>
</p>
<h4>children</h4>
<p class=dt>
<i>Description</i></p>
<p class=indent>
Returns an enumeration of children elements of the requested element. The collection allows the application to make queries about the size of the collection as well as enumerate through the children or access any of them by index. If no children exist, <i>elem.children</i> returns null.</p>
<p class=dt>
<i>Prototype</i></p>
<p class=indent>
elem.children</p>
<p>
<i>Example</i></p>
<p class=indent>
<code>//If the element has children</code></p>
<p class=indent>
<code>if (elem.children != null)</code></p>
<p class=indent>
<code>&nbsp;&nbsp;return "yes";</code></p>
<p class=indent>
</p>
<p>
The children of an element are manipulated as Element Collection objects. You can access the members of a collection by index and by tag name. If children are accessed by tag name and two or more children share that name, a specialized collection is created. The members of such a specialized collection can be accessed by index, just like the members of a general collection.</p>
<p>
The <b>item()</b> method can be called to access and manipulate members of an Element Collection. The <b>length</b> property can be accessed to retrieve information concerning the length of an Element Collection.</p>
<p>
<a href="#xmlmodel_contents">Return to Contents</a></p>
<h3><a name="xmlmodel_elemcol"></a>Element Collection Properties and Methods</h3>
<h4>item()</h4>
<p class=dt>
<i>Description</i></p>
<p class=indent>
Returns the requested item or items from a collection. This method is fairly involved and can be used in different ways to retrieve members of a collection. If you specify solely an index, such as "0", the item at that index is returned. If you specify solely an element name, such as "TITLE", a collection of all elements with that specific name is returned. Note, if only one element of that name exists, it is returned as an XML element, not as a collection. If both an element name and an index are specified, the index number refers to the collection of elements of the specified name. In such a case, an element is returned.</p>
<p class=dt>
<i>Prototype</i></p>
<p class=indent>
elem.children.item(index)<br>
elem.children.item(elementName)<br>
elem.children.item(elementName, index)</p>
<p>
<i>Example</i></p>
<p class=indent>
<code>//Return the text of the first child element.</code></p>
<p class=indent>
<code>return elem.children.item(0).text;</code></p>
<p class=indent>
<code>//Return a collection of &lt;TITLE&gt; elements.</code></p>
<p class=indent>
<code>return elem.children.item("TITLE")</code></p>
<p class=indent>
<code>//Return the text of the fourth &lt;TITLE&gt; element.</code></p>
<p class=indent>
<code>return elem.children.item("TITLE",3).text</code></p>
<p class=indent>
</p>
<h4>length</h4>
<p class=dt>
<i>Description</i></p>
<p class=indent>
Returns the length of a collection.</p>
<p class=dt>
<i>Prototype</i></p>
<p class=indent>
elem.children.length</p>
<p>
<i>Example</i></p>
<p class=indent>
<code>for (i = 0; i &lt; elem.children.length; i++)</code></p>
<p class=indent>
<code>&nbsp;&nbsp;output_doc(elem.children.item(i),(indents + 1));</code></p>
<p class=indent>
</p>
<p class=dt>
<a href="#xmlmodel_contents">Return to Contents</a></p>
<h3><a name="xmlmodel_samp"></a>Sample JScript Program</h3>
<p>
Let's now take a look at a JScript program that uses the object model to reveal the contents of an XML document.</p>
<p>
The script first creates an ActiveX object representing an XML document and then passes the root of that document to <b>output_doc()</b>. This function then inserts the root element's tag name and contents into the HTML element with an ID value of "results," repeating the process for each element within the source document. The program results in the XML document being displayed in the HTML page.</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>The inability to enumerate attributes precludes the display of any attributes an element in the source document might have.</p>
<pre><code>&lt;SCRIPT LANGUAGE="JScript" FOR=window EVENT=onload&gt;

  var indent_array = new String("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ");
  var str = "";

  var xml = new ActiveXObject("msxml");
  xml.URL = "http://Chein/_private/pdcxml.xml";

  var docroot = xml.root;

  output_doc(docroot,0);

  function output_doc(elem,indents)
  {
 &nbsp;&nbsp; var i;

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (elem.type == 0)&nbsp; // 0 is a tagName
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; document.all("results").insertAdjacentText("BeforeEnd",
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; indent_array.substring(0,(4 * indents)) +
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "&lt;" + elem.tagName + "&gt;" + "\n");

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (elem.children != null)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (i = 0 ; i &lt; elem.children.length ; i++)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; output_doc(elem.children.item(i),(indents + 1));
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; document.all("results").insertAdjacentText("BeforeEnd",
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; indent_array.substring(0,(4 * indents)) +
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "&lt;/" + elem.tagName + "&gt;" + "\n");
 &nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else if (elem.type == 1) // 1 is a text node
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; document.all("results").insertAdjacentText("BeforeEnd",
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; indent_array.substring(0,(4 * indents)) +
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "\"" + elem.text + "\"\n");
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alert("unknown element type: " + elem.type);
  }
&lt;/script&gt;
</code></pre>
<p>
As you can see from the previous script, the XML object model in Internet Explorer 4.0 makes it quite easy to write an application that can traverse an XML document.</p>
<p>
<a href="#xmlmodel_contents">Return to Contents</a></p>
</BODY>
</HTML>

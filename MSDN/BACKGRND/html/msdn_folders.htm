<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Web View: A New Look for Microsoft Internet Explorer 4.0 Folders</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_folders"></a>Web View: A New Look for Microsoft Internet Explorer 4.0 Folders</h1>
<p>
Michael Edwards<br>
Developer Technology Engineer<br>
Microsoft Corporation</p>
<p>
Last updated: September 30, 1997 for Microsoft Internet Explorer version 4.0 final release<br>
(see the <a href="#folders_changes">Changes</a> section below)</p>
<p class=indent>
<b>Editor's note&nbsp;&nbsp;&nbsp;</b>This article references the Internet Client SDK documentation, which can be found in the MSDN™ Library in the SDK Documentation bin.</p>
<h4><a name="folders_contents"></a>Contents</h4>
<p>
<a href="#folders_changes">Changes</a><br>
<a href="#folders_intro">Introduction</a><br>
<a href="#folders_so">So How Does This Stuff Work?</a><br>
<a href="#folders_how">How Can Web View Make Using Computers Easier?</a><br>
<a href="#folders_summ">Summary</a></p>
<h2><a name="folders_changes"></a>Changes for the Microsoft Internet Explorer version 4.0 Final Release</h2>
<ul type=disc>
<li>
Since the Microsoft® Internet Explorer version 4.0 Preview 2 release, the shell team has worked hard to make the Web View feature sufficiently compelling so that users will choose it as their preferred default folder view. The main improvements are big gains in performance and a simpler, more unified user interface. The key user-interface change makes the default Web View available in all folders. In Preview 2, the <b>as Web Page</b> option wasn't added to the Microsoft Windows® Explorer <b>View</b> menu until you selected the <b>Customize This Folder...</b> option (and ran the Web View wizard). In the final release, the <b>as Web Page</b> option is always available in the Explorer's <b>View</b> menu. In other words, the <b>Customize This Folder...</b> option is now <i>really </i>just for customizing the Web View in a given folder. These changes enable a more unified Web View experience across all folders—turning Web View on in one folder maintains that view in every folder.<br><br></li>
<li>
Frontpad is no longer installed as your default HTML editor for the Web View wizard.<br><br></li>
<li>
The <b>Options...</b> selection in the Windows Explorer <b>View</b> menu is now labeled <b>Folder Options...</b>, reflecting customizable Web View settings that are now available in this dialog box.<br><br></li>
<li>
Globally Unique Identifiers (GUIDs) and syntax have changed in the <a href="#folders_fold">folder.htt</a> (which used to be called folder.htm) and <a href="#folders_desktop">desktop.ini</a> files.<br><br></li>
<li>
The Internet Client SDK has added documentation on the Web View feature and now also discusses Web View scripting objects available in the shell.</li>
</ul>
<p>
<a href="#folders_contents">Return to Contents</a></p>
<h2><a name="folders_intro"></a>Introduction</h2>
<p>
Microsoft Internet Explorer version 4.0 introduces a new viewing paradigm for Microsoft Windows folders called <i>Web View</i>. I tried out Web View for the first time by choosing the <b>as Web Page...</b> option in the Windows Explorer <b>View</b> menu. This is what I got:</p>
<p>
<img src="folders01.gif" border=0></p>
<p class=label>
<b>Figure 1. Default Web View for the My Documents folder</b></p>
<p>
At first, I thought it was kind of lame. Then I played around a bit and noticed the thumbnail sketches of files displayed in the left panel. So I started looking at the script that creates the left panel and started thinking about what you might be able to do with a Web View.</p>
<p>
I've come to believe that viewing a folder in a Web page is pretty cool because it offers a slick solution to problems I encounter frequently. For example, how many times have you opened a file just for a quick glance at the first page because you couldn't remember what it contained? Just as the Web has made viewing information easier and more fun, a Web View can shed some light on the darkness of a plain old list of files.</p>
<p>
First, for the gear-heads, I'll talk a little bit about the underlying technology. Then I'll cut to the quick and take a look at a few problems that are "made" for Web View. Feel a strong urge to know how stuff works? Yep, you're a gear-head. It's OK, some of my best friends are, too. Don't have time to care how this stuff works? It's OK, you're probably more productive than the rest of us—just skip the next section and go straight to the examples!</p>
<p>
<a href="#folders_contents">Return to Contents</a></p>
<h2><a name="folders_so"></a>So How Does This Stuff Work?</h2>
<p>
To create the new Web View, the Internet Explorer 4.0 shell team added an extended view to the Windows Explorer's default implementation of the <b>IShellView</b> interface (the shell code responsible for displaying files and folders in the shell's namespace—the Large Icons, Small Icons, List, and Details views that you are already familiar with in Windows 95). To view a folder in the default Web View, all you have to do is select the <b>as Web View</b> option in the <b>View</b> menu. The default Web View for all folders is defined by the HTML in the windows\web\folder.htt template.</p>
<p>
For advanced users (like you) who are not satisfied with boring old defaults, the shell team also added a Web View wizard that is launched by the new <b>Customize This Folder...</b> option in the Windows Explorer <b>View</b> menu. When the user completes the wizard, two new files are created in the target folder: desktop.ini and folder.htt.</p>
<p>
<a name="folders_desktop"></a>The first file, desktop.ini, looks like this:</p>
<pre><code>[ExtShellFolderViews]
Default={5984FFE0-28D4-11CF-AE66-08002B2E1262}
{5984FFE0-28D4-11CF-AE66-08002B2E1262}={5984FFE0-28D4-11CF-AE66-08002B2E1262}
[{5984FFE0-28D4-11CF-AE66-08002B2E1262}]
PersistMoniker=file://folder.htt
</code></pre>
<p>
The shell reads desktop.ini and (to make a long story short) all those GUIDs above tell the shell to host the MSHTML.DLL component of Internet Explorer 4.0. Most applications that need a control to parse and render HTML will find it easier to use the WebBrowser control, because WebBrowser provides additional features (such as navigation and hyperlinking) not supported by MSHTML. (See the Internet Client SDK documentation for more information.)</p>
<p>
<a name="folders_fold"></a>The Web View wizard also automatically creates a second file called folder.htt: This is the same file referenced in the PersistMoniker=file://folder.htt desktop.ini setting above. To create folder.htt the Web View wizard launches your HTML editor with the windows\web\folder.htt template. If you save the default HTML provided by the wizard, you end up with this (ignoring the Dynamic HTML and Microsoft JScript™ for now): </p>
<pre><code>&lt;object id="FileList" border=0 tabindex=1
classid="clsid:1820FED0-473E-11D0-A96C-00C04FD705A2"
style="position: absolute; left: 30%; top: 88px; width: 70%; height: 100%"&gt;
&lt;/object&gt;
</code></pre>
<p>
This &lt;OBJECT&gt; tag references a <i>Shell Object</i> (called the WebViewFolderContents object) that wraps the shell code for displaying files and folders. In fact, Internet Explorer 4.0 introduces several new Shell Objects that can be used from script by Web pages hosted in the Windows shell. You can read more about the properties, methods, and events available on these objects in the Internet Client SDK.</p>
<p>
The main item of interest for Web developers who wish to provide their own customized Web View folders is the PersistMoniker=file://folder.htt line in desktop.ini. This setting specifies the HTML file to be passed to the WebBrowser control for displaying in the target folder. You can edit this desktop.ini setting to reference your own, custom HTML file. You may discover that you can point to a page on your intranet or the Internet (by changing file:// to http://), but this is not a supported feature in the final release of Internet Explorer 4.0. Of course, you pranksters out there are gleefully imagining cheap tricks you can pull on your friends with that little tidbit of information!</p>
<p>
<a href="#folders_contents">Return to Contents</a></p>
<h2><a name="folders_how"></a>How Can Web View Make Using Computers Easier?</h2>
<p>
There are so many things that we accept as broken. We think they will always be broken, and we learn to work around that as best we can. But then somebody comes along with an easy, beautiful solution, and you just want to hug that person. Or kick them for not coming up with it sooner. Or kick yourself for not thinking of it on your own. The people at Microsoft who love to solve user problems with Internet Explorer 4.0 came up with the four examples I've described below. All four illustrate common problems that can go away tomorrow—with a Web View folder and Internet Explorer 4.0.</p>
<h3>Installation Disks and Folders </h3>
<p>
How many times have you plugged in an installation disk for a piece of software (for example, a driver) and stared at a seemingly random list of files, wondering what to do? Hmmm, should you run the setup.exe program? Or maybe you should install one of those <i>random.</i>inf files? How about opening the readme.txt file? And what about those subfolders, should you look in those? No, wait, you'd better open up that <i>IfYouDontReadThisFirstYouWillRegretIt.doc</i>! I can joke about this now, because I just finished reconfiguring my home computer after having it totally munched by a bad installation program a few months ago. Needless to say, I was pretty upset by the experience.</p>
<p>
The <i>autorun</i> feature of CD-ROMs is becoming more common, and has really improved the installation experience for many users. (With autorun, when the user loads a CD into the CD-ROM drive, the system automatically runs a file on the CD, as specified in an autorun.inf file in the CD's root directory.) However, software that is distributed via floppy disk can benefit from a Web View of the root directory. In fact, you may have noticed that vendors have recently begun augmenting their old-fashioned readme.txt files with readme.htm files. This is a big step towards the idea of a Web View folder integrating an HTML view into the default viewing modes in Windows. In fact, if you are one of these vendors, you might be very interested in learning how to enable a Web View of your installation folder.</p>
<p>
Take a look at this example of an installation folder on some poor developer's machine. (Note that in this example we've abandoned the Explorer in favor of a shell window that doesn't have a tree pane—see the section, <a href="#folders_making">"Making Your Web View the default,"</a> for an explanation.)</p>
<p>
<img src="folders02.gif" border=0></p>
<p class=label>
<b>Figure 2. Installation folder in standard view </b></p>
<p>
This folder has it all—multiple readme files, both batch and executable setup images, an installation utility, and loads of .INF and .INI files. What's the poor end-user to do? Groan most likely. Trash their computer, possibly. Now take a look at the same folder with Web View enabled:</p>
<p>
<img src="folders03.gif" border=0></p>
<p class=label>
<b>Figure 3. Installation folder with Web View </b></p>
<p>
Pretty slick, eh? And, the best part about this is that it uses plain old HTML! Oh, you could get fancier if you'd like—throwing in a component or maybe some flashy Dynamic HTML. Yes, your customers will thank you for an option to view the information they need in an HTML file instead of displaying a cryptic list of files and folders.</p>
<p>
You need to provide only two simple files to create a custom Web View for your folder—the rest is built right into Internet Explorer 4.0. One of the two files contains your very own HTML to be displayed when the user navigates to your folder. To create the second file, simply turn on Web View for any random folder on your computer (choose <b>Customize This Folder...</b> from the Windows Explorer <b>View</b> menu). When you do this, the Explorer will create a new file called desktop.ini in that folder. Just copy desktop.ini, along with your custom HTML file, into the folder you want to display in Web View mode by default. (On a floppy disk, these files should be located at the disk's root.) After copying the desktop.ini file, edit it and change the PersistMoniker setting to name your own, custom HTML file:</p>
<pre><code>PersistMoniker=file://A:\foobar.htm
</code></pre>
<h4><a name="folders_making"></a>Making your Web View the default</h4>
<p>
Of course the user can turn Web View on or off manually. However, if you want to make things as painless as possible for your customers, you want Web View to be turned on the first time they view your installation folder. Likewise, if you distribute your program on floppy disk or your stuff is downloaded to a floppy disk (for example, in a Basic Input/Output System (BIOS) update or driver installation), you want your customers to see your Web View the first time they look at the contents of the disk.</p>
<p>
The problem is, like the Large Icons, Small Icons, List, and Details view modes that you are already familiar with in Windows 95, Web View mode is global to a given instance of the Explorer. Thus, if the user has not already done so, they will have to specifically turn on Web View for your folder (by selecting the <b>as Web Page</b> option in the <b>View</b> menu).</p>
<p>
Your best bet (other than telling the user to turn on Web View) is to display your folder using a shell window. The shell window view of a folder is displayed without the Explorer's tree pane and retains its state across sessions. You get this view when you enter a pathname in the <b>Start</b> menu's <b>Run...</b> dialog box, or you open My Computer on the desktop. You also get a shell window when you open folders (or shortcuts to folders) on your desktop, and when you choose <b>Open</b> after right-clicking the <b>Start</b> menu.</p>
<p>
So all you have to do to make Web View the default is to provide the user with a shortcut to your folder that you last closed with Web View turned on. If you are shipping on a floppy, you could put the shortcut on your disk and tell the user to start the setup process by typing "A:\<i>shortcut-name</i>" in the <b>Run...</b> dialog box of the <b>Start</b> menu. If you are downloading to a local folder, you could put a shortcut on the user's desktop, and open it for them the first time. Note that users can still turn off your Web View later, but that is their prerogative.</p>
<h4>Installation from the Web </h4>
<p>
Many different solutions are available for installing code from a Web site, not all of which actually require you to create a new folder on the user's computer. If so, you won't need a Web View because the HTML on your Web site can get the job done. For example, see Nancy Winnick Cluts's article, <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="msdn_actsetup">
</object><a href=JavaScript:alink_1.Click()>"Extending Active Setup,"</a> for a description of a tool that is used to install Internet Explorer 4.0 and the Internet Client SDK.</p>
<p>
While we're on the subject, another avenue for installing code from a Web site is through an Internet Explorer 4.0 Software Distribution Channel. You can read about Software Distribution Channels in the Internet Client SDK.</p>
<h3>Sharing Files and Folders on Your LAN</h3>
<p>
As an example of how Web View can improve usability, check out this share point on a fictional company's local area network (LAN). At first look, it's a seemingly random collection of files and folders:</p>
<p>
<img src="folders04.gif" border=0></p>
<p class=label>
<b>Figure 4. Standard LAN directory listing </b></p>
<p>
With Web View, the listing turns into the Arcadia Bay travel page:</p>
<p>
<img src="folders05.gif" border=0></p>
<p class=label>
<b>Figure 5. LAN directory listing with Web View </b></p>
<p>
This example is a little more complicated than the last one, but it's still nothing a decent HTML coder can't handle. The two main components of interest here are Search functionality and the Files and Folders view. Microsoft Index Server (See the Microsoft Windows NT Server Web site, at http://www.microsoft.com/ntserver/guide/indexserver.asp, for more information about Index Server) can help you add indexing and searching functionality, and Internet Explorer 4.0 includes a new Web View scripting object (named WebViewFolderContents) that you can use to view files and folders in your custom Web View. Remember Figure 1, where I showed you the Explorer's default Web View for the My Documents folder? That functionality doesn't look so lame now, does it? To put the WebViewFolderContents control in your custom Web View, turn on Web View in one of your folders and copy the &lt;OBJECT&gt; tag from the folder.htt file created in that directory:</p>
<pre><code>&lt;object 
classid="clsid:1820FED0-473E-11D0-A96C-00C04FD705A2"&gt;
&lt;/object&gt;
</code></pre>
<p>
If you want to have a little more control over where the files and folders are displayed, you can use the new positioning functionality now available with Cascading Style Sheets (CSS), (part of the HTML 3.2 specification; for more information visit the W3C Web site at <a href="http://www.w3.org/TR/REC-html32.html">http://www.w3.org/TR/REC-html32.html</a>), to position the object exactly where you want it:</p>
<pre><code>&lt;object&gt;
{position:absolute left=100 width=300 top=100 height=600}
classid="clsid:1820FED0-473E-11D0-A96C-00C04FD705A2"&gt;
&lt;/object&gt;
</code></pre>
<p>
If you look at the rest of the HTML in folder.htt, you will notice the JScript that provides information on a selected file or folder. (You'll also notice that the actual code for the &lt;OBJECT&gt; tag includes an ID attribute named <i>FileList</i> that is referenced in the JScript.) This script uses the WebViewFolderContents object to provide the user with file name, type, size, and last-modified-date information. The script is invoked by a selection event when one of the icons is selected. Instead of holding your hand through all that script and Dynamic HTML, I'm going to punt and point you to the Internet Client SDK and let you have at it.</p>
<p>
Did you notice that the default Web View includes a thumbnail sketch of the currently selected file? If you dig further into folder.htt, you will notice that this is done by inserting the thumbnail viewer object (which is built into Internet Explorer 4.0) into the left information panel. You might want to steal that code for your own views that contain files and folders. Or, if you like the default Web View, you might just want to add more things to the left information pane instead of completely replacing folder.htt. The shell team anticipated this by making the code in folder.htt very readable and well commented (including a comment suggesting a good place to stick your own links, objects, or whatever).</p>
<p>
Also, if you used the Web View wizard to choose a background picture in a Web View folder, you might have noticed that this adds only a few lines to desktop.ini referencing the bitmap's local pathname. Yes, you can copy these lines into your own desktop.ini file to automatically create your own background for the Web View scripting objects.</p>
<h3>Sharing Files and Folders on Your LAN (By Hiding Them!)</h3>
<p>
You probably think that Microsoft has this wonderful repository somewhere on its corporate network that lets employees set up any Microsoft product. Well, you're only partly right. There <i>is</i> such a repository, but it is not very wonderful. All Microsoft products are actually located on a server share in individual 8.3, cryptically named, folders. Since the whole idea for Web View is to provide an alternative to navigating lists of files and folders, you might want to think twice before adding files and folders to your custom Web View—with a little creativity, you might come up with a better way. Here is an idea for revamping Microsoft's product server so that the user doesn't see anything even remotely resembling a file or folder: </p>
<p>
<img src="folders06.gif" border=0></p>
<p class=label>
<b>Figure 6. Hiding files and folders with Web View</b></p>
<h3>Web View on the Desktop</h3>
<p>
Your desktop is just another folder in the Windows directory, so why not have a Web View of your desktop? In fact, your desktop is always in Web View by default, and this is the basis of what Microsoft calls the <i>Active Desktop</i>! The article, <a href="msdn_actdeskie4.htm">"The Active Desktop for Internet Explorer 4.0,"</a> by Nancy Winnick Cluts and myself, discusses custom HTML desktops, and gives some reasons why you might want to create one. Now that you are a Web View expert, you know that creating a custom Active Desktop is no more complicated than referencing the desired HTML file in desktop.ini. Don't you just love it when it all makes sense? </p>
<p>
So what other cool things can you do with a Web View of your desktop? Why don't you let the Active Desktop examples at the Microsoft Internet Explorer Web site (<a href="http://www.microsoft.com/ie/ie40/features/?/ie/ie40/features/actdesk.htm">http://www.microsoft.com/ie/ie40/features/?/ie/ie40/features/actdesk.htm</a>) spark your imagination?</p>
<p>
<a href="#folders_contents">Return to Contents</a></p>
<h2><a name="folders_summ"></a>Summary</h2>
<p>
Web View folders are opening up a new realm of opportunities for customizing Windows Explorer folders and making things easier (and more fun) for your users. I have given you some examples of Web View folders put to good use. I hope you can use these in your own work. Perhaps you will even come across other problems awaiting a Web View solution. I look forward to seeing some really useful Web View creations from you, and I hope you'll remember to have fun while you're at it!</p>
<p>
<i>Did you find this article useful? Gripes? Compliments? Suggestions for other articles? Drop me a line at </i><a href="mailto:michaele@microsoft.com">michaele@microsoft.com</a><i> and let me know.</i></p>
<p>
<a href="#folders_contents">Return to Contents</a></p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Active Server Pages with Microsoft Internet Information Server 3.0</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_aspwp"></a>Using Active Server Pages with Microsoft Internet Information Server 3.0</h1>
<p>
Microsoft Corporation</p>
<p>
November 1996</p>
<h3>Contents</h3>
<p>
<a href="#aspwpabstract">Abstract</a><br>
<a href="#aspwpintro">Introduction</a><br>
<a href="#aspwpasp">Active Server Pages</a><br>
<a href="#aspwpscrip">Scripting and Active Server Pages</a><br>
<a href="#aspwpcompon">ActiveX Components</a><br>
<a href="#aspwpapps">Active Server Page Applications</a><br>
<a href="#aspwpsumm">Summary</a></p>
<h2><a name="aspwpabstract"></a>Abstract</h2>
<p>
Microsoft® Internet Information Server (IIS) version 3.0 introduces Active Server Pages, the technology formerly code-named "Denali." Active Server Pages (.asp files) let organizations easily combine ActiveX™ scripts and ActiveX components to create dynamic content and powerful Web-based applications.</p>
<p>
Active Server Pages enable component-based Web application development in any language, including Sun Microsystems Java™. It is easy to learn, it provides an open development environment, and it allows developers to build truly browser-independent Web solutions.</p>
<p>
The combination of .asp files in IIS 3.0 running on Microsoft Windows NT® Server version 4.0 provides the ideal platform for developing personalized content and powerful Web-based business solutions for corporate intranets and the Internet.</p>
<h2><a name="aspwpintro"></a>Introduction</h2>
<p>
Organizations are looking to Internet technology to improve productivity, reduce costs, and provide access to existing information and knowledge in new, dynamic, and interactive ways. Businesses want to run Web-based applications on their servers in order to realize the advantages of providing users access to "information at their fingertips." For example you can:
<ul type=disc>
<li>
Put your employee handbook online, rather than printing copies that are obsolete soon after publication. This also reduces administrative costs by allowing employees to access and update their personal information such as address and health plan benefits.<br><br></li>
<li>
Tie your online store to your existing inventory database and order processing system.<br><br></li>
<li>
Give every visitor to your site a personalized view of only the information they are interested in, and automatically flag what is new since their last visit.</li>
</ul>
<p>
While much of this can be done today through creative programming tricks, the challenge until now has been to find a technology that is easy to use, open, and scaleable and takes advantage of existing skills and investments.</p>
<p>
Microsoft IIS 3.0 was designed to be a powerful, open platform for developing Internet and corporate intranet applications with .asp files. IS professionals and Webmasters can combine ActiveX scripts with ActiveX components running on the server to create a new generation of server-based solutions for the Web. </p>
<p>
This whitepaper is designed to provide a detailed overview of the various building blocks that Active Server Pages make available to Web developers. These include the following:
<ul type=disc>
<li>
.asp files<br><br></li>
<li>
ActiveX Scripting for IIS 3.0<br><br></li>
<li>
ActiveX components</li>
</ul>
<h2><a name="aspwpasp"></a>active Server Pages</h2>
<p>
IIS 3.0 introduces Active Server Pages, which enable Hypertext Markup Language (HTML) authors and Web developers to mix HTML and inline scripting using almost any authoring tool. The scripts can reference components running on the local server—or any other server—to access databases, applications, or process information. When a browser requests an .asp file, it is processed by the server and the page is returned to the client as standard HTML.</p>
<h3>Open</h3>
<p>
When using IIS 3.0, developers are not required to use a proprietary scripting language to create Web applications—Active Server Pages are compatible with any ActiveX Scripting language. Active Server Pages include native support for Microsoft Visual Basic® Scripting Language (VBScript) and Microsoft Jscript™. Third parties will be providing support, through plug-ins, for other languages such as REXX, Perl, and Tcl. Multiple-scripting languages can even be used interchangeably in the same .asp file.</p>
<p>
ActiveX components can be created in virtually any language. This includes Java, Visual Basic, C++, and COBOL.</p>
<h3>Approachable</h3>
<p>
Active Server Pages make it easy for HTML authors to "activate" their Web pages on the server. Customized pages and simple applications can be developed immediately. Instead of writing complicated Common Gateway Interface (CGI) programs in languages such as Perl and C to generate personalized content for each user, a Web developer can use an Active Server Page to do all the work. In the following simple example, VBScript is used to display both the current time and the type of browser the client is using. The following example shows HTML with inline VBScript: </p>
<pre><code>&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Sample Web Page&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;P&gt;
Hello &lt;%= Request.ServerVariables("REMOTE_USER") %&gt;
The time here is &lt;%= now %&gt;
Your browser is &lt;% = Request.ServerVariables("http_user_agent") %&gt;
&lt;/BODY&gt;&lt;/HTML&gt;
</code></pre>
<h3>Separating Content and Logic from Presentation</h3>
<p>
The Web brings together teams from many disciplines—graphic arts, HTML authoring, programming, publishing, and more. The challenge is to enable them to work together efficiently and to make changes without upsetting each others work. Dynamic content today often requires elements of design, logic, and content to live together. This makes Web development difficult as changes require wading through lines of Perl or C code, and an inadvertent change could damage the program or the HTML formatting. </p>
<p>
Through the use of scripting and components, Active Server Pages allow you to separate the programming that accesses data in databases and applications from the design and other content of a Web page. This helps to ensure that developers can be free to focus on writing their business logic in components without worrying about how the output appears. Conversely, it frees HTML designers to use familiar tools to modify the page as they see fit. Scripting is the "glue" that ties them together.</p>
<p>
In the example below, a form is used to pass a ticker symbol request from the Uniform Resource Locator (URL) to the .asp files. The first part of the .asp file calls a component that contacts a stock price server. Properties of this object, such as opening and closing price, can then be easily inserted in the HTML. The programmer can work in any language and only needs to worry about communication with the stock price server. The HTML author only needs to know how to script the component and does not care how the stock price server works. </p>
<p>
First, the user request is received:</p>
<pre><code>&lt;HTML&gt;
&lt;% 
 &nbsp; TSym=Request.QueryString("TickerSymbol")
</code></pre>
<p>
Then, the component is invoked:</p>
<pre><code>&nbsp;&nbsp;&nbsp;Set NObj=Server.CreateObject("NASDAQ.TickerObj") 
 &nbsp; if NObj.GetCompany(TSym)=False then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Server.Redirect("ticker/entryform.htm")
%&gt;
</code></pre>
<p>
And finally, the dynamic content is inserted:</p>
<pre><code>&lt;H1&gt;Today's trade summary for:&lt;%=NObj.CompanyName%&gt; &lt;/H1&gt; 
&lt;TABLE&gt;
&lt;TR&gt;&lt;TD&gt;Open&lt;/TD&gt;&lt;TD&gt;Close&lt;/TD&gt;&lt;TD&gt;Volume&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;&lt;TD&gt;&lt;%=NObj.Open%&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;%=NObj.Close%&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;%=NObj.Volume%&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;/TABLE&gt;
&lt;H2&gt;Time of report: &lt;%=time()%&gt;&lt;%=date()%&gt;&lt;/H2&gt;
&lt;/HTML&gt;
</code></pre>
<h3>No Manual Compiling</h3>
<p>
To prevent the need for manual recompilation whenever a change is made, just-in-time compiling automatically recompiles the .asp files upon the next request and loads them into the server cache. So, when building your site, changes to .asp files can be previewed immediately in your browser by simply saving the file and refreshing the page. </p>
<h3>Browser Independence </h3>
<p>
Active Server Pages provide a browser-neutral approach to application design. Because all of the application logic to generate dynamic content can be executed on the server, developers do not have to worry about what browser is used to view the site. Browsers "see" the results of an .asp file as a normal HTML page.</p>
<h2><a name="aspwpscrip"></a>Scripting and Active Server Pages</h2>
<p>
Active Server Pages provide a server-side scripting environment to create and run dynamic, interactive, and high-performance Web server applications. Server-side scripting enables your Web server to perform the work involved in generating customized HTML pages. For example, you can build different views based upon who the user is, what browser they are using, where they've been on your site, or what they have purchased in the past.</p>
<p>
Scripting languages are an intermediate stage between HTML and programming languages such as C, C++, and Visual Basic. HTML is generally used for formatting and hypertext linking purposes. Programming languages are generally used for giving complex instructions to computers. Scripting languages fall somewhere in between, much like macro languages in many desktop applications.</p>
<p>
Active Server Pages support any ActiveX scripting language through the use of <i>scripting</i> <i>engines</i>. Scripting engines are the Component Object Model (COM) objects that process scripts. IIS 3.0 includes native support for VBScript and JScript, and plug-ins are available for REXX, Perl, Tcl, and other scripting languages. </p>
<p>
Active Server Pages make it possible for the Web developer to use a variety of scripting languages. This is because scripts can be processed on the server side, as opposed to the client side. In fact, several scripting languages can be used within a single .asp file. This can be done by identifying the script language in a simple tag at the beginning of the script sequence.</p>
<p>
For example, the following script example indicates that the upcoming script sequences are to be processed by Active Server Pages as JScript code and VBScript code, respectively:</p>
<pre><code>&lt;HTML&gt;
&lt;SCRIPT LANGUAGE=JScript RUNAT=Server&gt;
&lt;JScript code here&gt;
&lt;SCRIPT LANGUAGE=VBScript RUNAT=Server&gt;
&lt;VBScript code here&gt;
&lt;/HTML&gt;
</code></pre>
<h2><a name="aspwpcompon"></a>ActiveX Components</h2>
<p>
A compelling advantage of IIS 3.0 is that it will enable component-based development of Web solutions with support for ActiveX components. Active Server Pages allow you to run ActiveX components developed in any language, such as C++, Visual Basic, Java, or COBOL. While IIS will continue to support CGI and Internet Server application programming interface (ISAPI) programs for Web-specific applications and filters, ActiveX components offer a powerful, component-based approach for applications development. </p>
<h3>Benefits of ActiveX Components</h3>
<p>
ActiveX components, formerly known as OLE Automation servers, are designed to run on your Web server as part of a Web application. These components allow you to extend the functionality of your script behind the scenes—no interface is involved in running them.</p>
<p>
ActiveX components are built on a popular standard. This ensures that most programmers are already familiar with developing components and that existing development tools can be used to create these components. Moreover, there are large numbers of ActiveX components already available and ready to be used as building blocks for Web-based applications. </p>
<p>
Depending upon how they are written, ActiveX components can also be run on a Web browser and used in other environments outside the Web server, such as traditional client-server applications or application plug-ins.</p>
<h3>Intrinsic Objects</h3>
<p>
Active Server Pages includes a number of built-in server and application building objects. These objects free developers from the grunt work of writing code to access details about incoming requests from clients, managing the application state, handling cookies, and assembling the response. These intrinsic objects include the following:
<ul type=disc>
<li>
<b>Request and response—</b>The<i> request </i>object provides access to any information passed into the script with the HTTP request. This includes information from cookies, forms, URL queries, and HTTP headers. The<i> response </i>object is used to build the response, including setting cookies, page expiration, and full control of the HTTP output stream.<br><br></li>
<li>
<b>Application and session—</b>These objects are designed to make state management easier—managing a state across a number of users and applications has typically been difficult in Web-based solutions. The<i> session </i>object is used to store information needed for a particular user-session. Variables stored in the session object are not discarded when the user jumps between pages in the application; instead, these variables persist across the entire site. The server destroys the session object when the session expires or is abandoned. The<i> application </i>object allows properties to be set that share information among all users of a given application. There are <b>Lock</b> and <b>Unlock</b> methods to ensure that multiple users do not try to alter a property simultaneously. <br><br></li>
<li>
<b>Server—</b>The <i>server</i> object allows scripts to create instances of ActiveX components, and thus extend the Active Server Page environment with new capabilities. The server object provides access to methods and properties on the server. Most of these methods and properties serve as utility functions. Without the server object, it would not be possible to access components from your Web application.</li>
</ul>
<h3>Base Components</h3>
<p>
To help you create Web applications, Internet Information Server 3.0 also provides several base components. </p>
<h4>ActiveX Data Objects component</h4>
<p>
ActiveX Data Objects (ADO) provides high-performance connectivity to any Open Database Connectivity–compliant (ODBC-compliant ) database or Microsoft OLE DB data source. ADO allows Web developers to easily link a database to an active Web page to access and manipulate data. This enables putting a Web "front-end" on a legacy system or developing a new database-driven application for the Web. Unlike the Internet Database Connector (IDC), the ADO component can be "driven" using any ActiveX scripting language from a single .asp file.</p>
<p>
An .asp file using ADO can dynamically request the information from a database. For example, changes in an inventory or pricing database can be immediately reflected for every user—without touching HTML code.</p>
<h4>Content Linking component</h4>
<p>
The Content Linking component manages a list of URLs so that you can treat the pages in your Web site like the pages in a book. You can use the functionality of the Content Linking component to automatically generate and update tables of contents and navigational links to previous and following Web pages. This is ideal for applications such as online newspapers and forum message listings. </p>
<p>
The Content Linking component references a Content Linking list file that contains the list of the linked Web pages. This list is stored on the Web server. A stream of pages can be managed and rearranged dynamically without worrying about broken links. Adding, deleting, or moving pages requires changing the order of the pages in the list file. It is unnecessary to edit the HTML on the individual pages to provide navigation.</p>
<h4>File System component</h4>
<p>
This component provides access to reading in text files stored on the server. By providing file-system access, developers do not need to write their own code to open and close files on the file system, as most scripting languages are not allowed direct file access.</p>
<h4>Browser Capabilities component</h4>
<p>
Using the Browser Capabilities component, .asp files can recognize the capabilities of a requesting browser and dynamically optimize the layout and content. This ensures that the Webmaster does not have to create a series of duplicate pages for each browser. For example, the http://www.microsoft.com/ site has one view for ActiveX enabled browsers, a second for frames-enabled browsers, and a third for browsers that don't support frames. Because .asp files handle the customization, there is only one copy of the content.</p>
<p>
In the following example, the Browser Capabilities component is used to determine how to deliver dynamic advertising. If the client's browser supports ActiveX, a client-side control is sent. Otherwise, the advertising component is run on the server, which sends only a graphic image to the client.</p>
<pre><code>&lt;% 
  Set OBJbrowser = Server.CreateObject("MSWC.BrowserType")
  If OBJbrowser.ActiveXControls = TRUE Then
%&gt;
  &lt;OBJECT
CODEBASE="/AdvWorks/Controls/nboard.cab#version=5,0,0,5"
WIDTH=460
HEIGHT=60
DATA="/AdvWorks/Controls/billboard.ods"
CLASSID="clsid:6059B947-EC52-11CF-B509-00A024488F73"&gt;
  &lt;/OBJECT&gt;
&lt;% 
  Else
 &nbsp;&nbsp; Set Ad = Server.CreateObject("MSWC.Adrotator")
 &nbsp;&nbsp; Response.Write(Ad.GetAdvertisement("/AdvWorks/adrot.txt"))
  End If
%&gt;
</code></pre>
<p>
A Web user is not able to view the actual source code for .asp files. All the browser sees is the HTML output of the .asp file.</p>
<h4>Advertisement Rotator component</h4>
<p>
The Advertisement Rotator component simplifies the process of displaying different advertisements or announcements by managing air-time rotation for the different images. It allows a list of different advertisements to be assigned relative display-priority percentages. Every time the .asp files are requested, the component can be used to display an ad based on the preset criteria.</p>
<h3>Third-Party Opportunities</h3>
<p>
The components outlined above are just the beginning. ActiveX components provide excellent opportunities for third parties as organizations move to deploy Web-based solutions across intranets and the Internet. There is a limitless number of components needing to be created. Many of these will be of interest to all Web developers, while others will be designed to create custom business applications. There are currently more that 30 independent software developers writing new ActiveX components for IIS 3.0, with many more on the way.</p>
<p>
Web developers can also create components themselves using, for example, the new Microsoft Visual Basic Control Creation Edition or Microsoft Visual J++™ development software.</p>
<h2><a name="aspwpapps"></a>Active Server Page Applications</h2>
<p>
IIS 3.0 not only provides a platform to create dynamic, personalized Web sites today, but also provides an infrastructure for powerful Web solutions in the future. This is made possible because IIS 3.0 combines the Microsoft Win32® API, open Internet standards, and the open ActiveX standard. Together they provide the best platform for Web application development.</p>
<h3>Building Web-Based Applications</h3>
<p>
IIS 3.0 brings together the key technologies needed to run business applications on either the Internet or on corporate intranets. For example, while there are many catalogs online, very few support online transactions due to the difficulty of linking to inventory and order processing systems. By allowing organizations to move toward a component-based approach to application development, Active Server Pages help to ensure that powerful solutions can be built both quickly and easily. </p>
<p>
IIS 3.0 truly enables component-based Web development through the support of the ActiveX components described above. IS professionals can purchase components from independent software vendors (ISVs), or reuse existing components to build powerful intranet solutions. Active Server Pages use these components to access information and publish it to the Web through scripting and HTML markup. This approach to application development offers numerous advantages, including:
<ul type=disc>
<li>
<b>Rapid application development.</b> Using a component-based approach to building applications is much faster than building a complex CGI program from the ground up. <br><br></li>
<li>
<b>Browser independence. </b>Applications can easily produce a layout that<b> </b>takes advantage of the browser's capabilities.<br><br></li>
<li>
<b>Reuse.</b> Based on standard interfaces, ActiveX components can be used by any OLE Automation Server. This helps to ensure that these components can be re-used outside of the Web paradigm. For example, an ActiveX component that provides stock-ticker functionality can be used in either Microsoft Internet Information Server or Microsoft Excel.</li>
</ul>
<h3>Flexibility and Security</h3>
<p>
Because Active Server Pages use the same scripting and component model as Microsoft Internet Explorer, developers can choose to run scripts and components on the server and/or the client. This allows for the most efficient use of network bandwidth and server capacity for a given application. For example, a script on the client can check for missing data on a form before passing the form on to the server for processing.</p>
<p>
Running components on the server, also places the business logic closer to the data, which has advantages in terms of efficiency and security. Web browsers make it very easy to take components and view client-side script code. With .asp files, stealing scripts or components is not possible. The source code lives only on the server and is executed to generate basic HTML. </p>
<h3>DCOM</h3>
<p>
The components that make up an ASP-based application are usually run in the same process as IIS 3.0 for the greatest efficiency. They communicate with each other and with the server using the Component Object Model (COM). </p>
<p>
As developers build richer applications, they will want to run components across several servers and on clients. This is enabled by Distributed COM (DCOM). DCOM takes care of all the remote procedure call (RPC) magic to make it work, so developers can use the same code no matter where the object is running. Components can talk to each other in a consistent way, using the same interfaces. </p>
<h3>Microsoft Transaction Server</h3>
<p>
As organizations move toward deploying component-based solutions on the Web, it is critical to provide a path to scale-up these applications easily and cost-effectively with full transaction support. Microsoft will soon release Microsoft Transaction Server, code-named "Viper," a product that integrates component-based applications with transaction support. </p>
<p>
The Transaction Server provides applications with transaction support automatically so that companies can rapidly build and easily modify server applications without sacrificing mission-critical reliability and scalability. Transaction Server is designed to work with Internet and industry standards—including HTTP, DCOM, and databases that support the X/Open XA transactional protocol—so that businesses can preserve investments in existing mainframe and UNIX systems while deploying modern applications using component software.</p>
<p>
Microsoft Transaction Server combines the best features of transaction processing monitors, reliability and scalability, with the best features from object request brokers, distributed services and components. Transaction Server provides the vital application infrastructure that developers need but do not want to develop themselves. ISVs that develop server solutions estimate that building this plumbing into their products consumes 30-40 percent of their development costs. Active Server Page applications will be able to plug into the Transaction Server. Examples of Transaction Server services include:
<ul type=disc>
<li>
Managing low-level operating system processes and thread pools.<br><br></li>
<li>
Building and managing server processes.<br><br></li>
<li>
Registering servers with the directory.<br><br></li>
<li>
Synchronizing access to shared data and resources across multiple client requests.<br><br></li>
<li>
Distributed security.</li>
</ul>
<h3>Management and Configuration</h3>
<p>
As organizations begin to evaluate tools and products that enable component-based Web development, it is important to find a vendor that offers full transaction support. The combination of Internet Information Server 3.0, with Active Server Pages, and the Microsoft Transaction Server is designed to deliver on the need for Web-based solutions that can scale to Enterprise-level applications.</p>
<h2><a name="aspwpsumm"></a>Summary</h2>
<p>
Microsoft Internet Information Server 3.0, with Active Server Pages, provides the ideal platform for creating and managing dynamic server-side applications that can be deployed over the Internet and corporate intranets.</p>
<p>
Internet Information Server 3.0 allows Web site developers to manage content, design, and application logic as separate components so that team members can focus on their specialty. It also allows almost any scripting and programming language to be used and any browser to be supported. It does all of this within a no-compile development environment that frees project teams from the expense and delays of having to recompile every time an element is changed.</p>
<p>
For organizations that are interested in reusing existing investments, purchasing turnkey solutions, or building new applications from the ground up, IIS 3.0 is the ideal environment. It simplifies the development of Web-based solutions, takes advantage of investments in languages, OLE, and existing applications, while providing a robust framework for the future. </p>
<h3>For More Information</h3>
<p>
For the latest information on Windows NT Server, check out the Microsoft BackOffice® Web site (<a href="http://backoffice.microsoft.com/">http://backoffice.microsoft.com/</a>), or the Microsoft Windows NT Server Forum on the Microsoft Network (GO WORD: MSNTS). </p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Migrating Solutions to PowerPoint 97</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_ppt97mig"></a>Migrating Solutions to PowerPoint 97</h1>
<p>
Microsoft Corporation</p>
<p>
December 2, 1996</p>
<h3>Contents</h3>
<p>
<a href="#ppt97migintro">Introduction</a><br>
<a href="#objmodchange">Object Model Changes</a><br>
&nbsp;&nbsp;&nbsp;<a href="#objmodoverview">Overview of Object Model</a><br>
&nbsp;&nbsp;&nbsp;<a href="#slidetext">Text on Slides</a><br>
&nbsp;&nbsp;&nbsp;<a href="#shapeformat">Shape Formatting</a><br>
&nbsp;&nbsp;&nbsp;<a href="#transanim">Transition and Animation</a><br>
&nbsp;&nbsp;&nbsp;<a href="#masterset">Slide Master Setup</a><br>
&nbsp;&nbsp;&nbsp;<a href="#slideshowsx">Slide Shows</a><br>
<a href="#fileconviss">File Conversion Issues</a></p>
<h2><a name="ppt97migintro"></a>Introduction</h2>
<p>
The purpose of this white paper is to identify changes in the Microsoft PowerPoint® 97 object model that may affect custom automation solutions created for use with PowerPoint 95.</p>
<p>
One of the most significant programming changes is that the PowerPoint 97 presentation graphics program now fully supports Microsoft Visual Basic®, Applications Edition (VBA). Development no longer needs to be done from an outside environment such as the Microsoft Visual Basic programming system or Microsoft Excel. PowerPoint's Visual Basic Editor conforms to the Office 97 standards found in all other Office products. Developers can create forms, modules, classes, and command bars to automate presentation construction and slide shows completely.</p>
<p>
Existing automation solutions can be modified to conform to the new object model or migrated into a PowerPoint template or presentation. Migrating applications directly into VBA in PowerPoint has some distinct advantages. Fewer resources are necessary because only one application, PowerPoint, is used to run the application—no additional resources are used by Visual Basic, Microsoft Excel, or another programming environment. Because all transactions are performed within PowerPoint, the application will run significantly faster. The use of custom input forms for slide or presentation data is more straightforward. Forms behave the same as PowerPoint dialog boxes, leading to more consistent user-interface and dialog box behavior.</p>
<p>
The Visual Basic Editor provides clear organization of all project elements: modules, classes, and forms. When migrating existing applications to VBA in PowerPoint, Visual Basic modules and classes can be imported directly into the PowerPoint Visual Basic Editor. Visual Basic version 4.0 forms, however, cannot be imported and must be re-created from within the PowerPoint Visual Basic Editor.</p>
<p>
Of course, you can still create automated solutions using Visual Basic or another programming language just as before. However, when setting the reference to the PowerPoint object library, be aware the name of the object library has changed from Powerpnt.tlb to Msppt8.olb.</p>
<p>
<img src="ppt97mig_1.gif" border=0></p>
<p class=label>
<b>Figure 1. Setting the PowerPoint 97 reference</b></p>
<h2><a name="objmodchange"></a>Object Model Changes</h2>
<p>
Several items within the PowerPoint object model have been changed in order to achieve consistency with other Office applications and new Office 97 common objects, such as the <b>CommandBar</b> object. Other objects have been removed and their functionality encompassed into new object classes. In addition, several components have been exposed to allow for more flexible and robust programming. As a result, solutions created for use with the PowerPoint 95 object model will most likely need to be revised to work with the PowerPoint 97 model.</p>
<h3><a name="objmodoverview"></a>Overview of Object Model</h3>
<p>
The PowerPoint object model still contains top level objects such as <b>Application</b>, <b>Presentation</b>, and <b>Slide</b>, but some of the subobjects have been renamed, removed, or replaced.</p>
<p>
Some individual objects have been replaced by classes of a similar type. For example, the separate views in PowerPoint 95 (<b>MasterView</b>, <b>SlideView</b>, <b>OutlineView</b>, and so on) are contained in a single <b>View</b> object. When a <b>View</b> object is returned from the <b>DocumentWindow</b> object, the <b>ViewType</b> property denotes which view was returned.</p>
<p>
<img src="ppt97mig_2.gif" border=0></p>
<p class=label>
<b>Figure 2. PowerPoint 95 object model hierarchy</b></p>
<p>
<img src="ppt97mig_3.gif" border=0></p>
<p class=label>
<b>Figure 3. PowerPoint 97 object model hierarchy</b></p>
<p>
The following items are a few of the most significant object model changes:
<ul type=disc>
<li>
The <b>SlideObjects</b> collection has been removed and replaced by the <b>Shapes</b> collection. This was done to achieve consistency with other Office 97 applications.<br><br></li>
<li>
The <b>FitText</b> object has been removed and its functionality has been replaced by the <b>TextFrame</b> object.<br><br></li>
<li>
The <b>Selection</b> object now returns a <b>SlideRange</b>, <b>ShapeRange</b>, or <b>TextRange</b> object.<br><br></li>
<li>
The <b>GraphicFormat</b> object has been removed. Its functionality has been incorporated into the <b>Shape</b> object.</li>
</ul>
<h4>Shape objects</h4>
<p>
The <b>Shapes</b> object and collection in PowerPoint 97 takes the place of the <b>SlideObjects</b> object and collection in PowerPoint 95. A <b>Shapes</b> collection can include such diverse objects as pictures, bitmaps, rectangles, lines, text boxes, WordArt, and even controls. With the exception of controls, most shapes are created and manipulated from the end user's point of view by the <b>Drawing</b> toolbar. (Note that each Office application implements specific additions to the basic model for its own purposes).</p>
<h4>TextFrame objects</h4>
<p>
In PowerPoint 95, to add text to a slide, you use the <b>AddTextFrame</b> method, which returns a <b>SlideObject</b>. From the <b>SlideObject</b>, the <b>Text</b> object allows access to properties and methods used to set text formatting. In PowerPoint 97, the <b>TextFrame</b> object represents the text frame within a <b>Shape</b> object. The <b>TextFrame</b> object contains the text in the text frame as well as the properties and methods that control the alignment and anchoring of the text frame.</p>
<h4>Selection objects</h4>
<p>
A selection object can return a <b>SlideRange</b>, <b>ShapeRange</b>, or <b>TextRange</b> object. These objects can either be returned based on user selections or created through code. These objects are useful for manipulating many objects as a group or for iterating through a group of related objects. </p>
<h4>GraphicFormat object</h4>
<p>
Instead of having to access the <b>GraphicFormat</b> object to set physical attributes for objects, these attributes can now be accessed directly from the original object itself. The <b>FillFormat</b>, <b>LineFormat</b>, and the <b>ShadowFormat</b> objects are now returned by the <b>Fill</b>, <b>Line</b>, and <b>Shadow</b> properties of a <b>Shape</b> object. For example, in PowerPoint 95, to set the fill color of a rectangle, you have to return the <b>GraphicFormat</b> object and then return the <b>FillFormat</b> object using the <b>Fill</b> property of the <b>GraphicFormat</b> object, as shown in the following example:</p>
<pre><code>Set objRectangle = ActivePresentation.Slides(1).Objects._
 &nbsp;&nbsp; AddShape(ppShapeRect, 100, 3000, 6000, 1000)
objRectangle.GraphicFormat.Fill.ForeColor.RGB = RGB(255, 0, 0)
</code></pre>
<p>
In PowerPoint 97, the <b>GraphicFormat</b> object is eliminated and the <b>FillFormat</b> object is returned using the <b>Fill</b> property of the <b>Shape</b> object, as shown in the following example:</p>
<pre><code>Set objRectangle = ActivePresentation.Slide(1).Shapes._
 &nbsp;&nbsp; AddShape(msoShapeRectangle, 144, 144, 72, 72)
objRectangle.Fill.ForeColor.RGB = RGB(255, 0, 0)
</code></pre>
<h3><a name="slidetext"></a>Text on Slides</h3>
<p>
In PowerPoint 95, the <b>AddTextFrame</b> method returns a <b>SlideObject</b> and the <b>Text</b> property is used to add the text, as shown in the following example:</p>
<pre><code>Set objText = ActiveWindow.View.Slide.Objects.AddTextFrame(1500, 3250, 5000)
objText.Text = "Sample Text"
</code></pre>
<p>
In PowerPoint 97, all text is accessed and manipulated via the <b>TextFrame</b> object, which is returned from a <b>Shape</b> object, as shown in the following example:</p>
<pre><code>Set objText = ActivePresentation.Selection.SlideRange.Shapes_
 &nbsp;&nbsp; .AddTextbox(msoTextOrientationHorizontal, 100, 100, 200, 50)
objText.TextFrame.TextRange = "Sample Text"
</code></pre>
<p>
From the <b>TextFrame</b> object, the <b>Ruler</b> object and the <b>TextRange</b> objects can be returned to format the text. The <b>Ruler</b> object controls layout options, such as indent levels and tab stops. The <b>TextRange</b> object contains the <b>Font</b> object, which is used to control the physical appearance of the text, including the font type and color, and the <b>ParagraphFormat</b> object, which is used to control alignment, line spacing, and word wrap options.</p>
<p>
One other item of note for conversion purposes: most of the properties that were formally entered as twips (1/1440 inch) are now measured in points (1/72 inch). </p>
<h4>TextFrame object</h4>
<p>
All text is contained within a <b>TextFrame</b> object within a shape. The functionality of the <b>TextFrame</b> object replaces the <b>FitText</b> object in PowerPoint 95. The <b>TextFrame</b> object has properties that allow you to set the layout of text within a shape. One change that has been made in PowerPoint 97 is the way you set the margins for the <b>TextFrame</b>. The <b>FitText</b> object has only two margin properties: <b>MarginWidth</b> and <b>MarginHeight</b>. These properties are measured in twips. The following example shows how to set the text anchors and margins using the <b>FitText</b> object in PowerPoint 95:</p>
<pre><code>'/ Set vertical anchor, and internal margins for the text box.
With ActivePresentation.Slides(1).Objects(1).FitText
 &nbsp;&nbsp; .VerticalAnchor = ppAnchorTop
 &nbsp;&nbsp; .HorizontalAnchor = ppAnchorCenter
 &nbsp;&nbsp; .MarginWidth = 1440 * 0.05&nbsp; '/ Convert to twips
 &nbsp;&nbsp; .MarginHeight = 1440 * 0.05
End With
</code></pre>
<p>
The <b>TextFrame</b> object allows you to set all four margins independently using the <b>MarginTop</b>, <b>MarginBottom</b>, <b>MarginLeft</b>, and <b>MarginRight</b> properties. These properties are set in points rather than in twips. The following example shows how to set margins and text anchor properties using the <b>TextFrame</b> object in PowerPoint 97. Note the difference in the naming of the constants used for the anchor settings. This was done to add to consistency to all Office applications.</p>
<pre><code>'/ Set text anchors, and margins for the selected text box.
With ActiveWindow.Selection.ShapeRange.TextFrame
 &nbsp;&nbsp; .VerticalAnchor = msoAnchorMiddle
 &nbsp;&nbsp; .HorizontalAnchor = msoAnchorCenter
 &nbsp;&nbsp; .MarginTop = 6&nbsp;&nbsp;&nbsp; '/ Margins are measured in points
 &nbsp;&nbsp; .MarginBottom = 6
 &nbsp;&nbsp; .MarginLeft = 6
 &nbsp;&nbsp; .MarginRight = 6
 &nbsp;&nbsp; .WordWrap = msoTrue
End With
</code></pre>
<h4>Ruler object</h4>
<p>
As in PowerPoint 95, the <b>Ruler</b> object contains the <b>RulerLevels</b> collection, which allows you to set the indent margins for each level, and the <b>TabStops</b> collection, which allows you to set tabs on the ruler. Although the methods to set the indent margin properties and the tab properties are the same, the unit of measurement is now points instead of twips. There is still a maximum of five indent levels that can be set. The following example sets the indent margins in PowerPoint 95:</p>
<pre><code>With robjPPTObject.Text.Ruler.
 &nbsp;&nbsp; '/ Margins are measured in Twips which are 1/1440 inch.
 &nbsp;&nbsp; With .Levels(1)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .FirstMargin = 720&nbsp;&nbsp;&nbsp;&nbsp; '/ 0.5"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .LeftMargin = 1080&nbsp;&nbsp;&nbsp;&nbsp; '/ 0.75"
 &nbsp;&nbsp; End With
 &nbsp;&nbsp; 
 &nbsp;&nbsp; With .Levels(2)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .FirstMargin = 2160&nbsp;&nbsp;&nbsp; '/ 1.5"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .LeftMargin = 2520&nbsp;&nbsp;&nbsp;&nbsp; '/ 1.75"
 &nbsp;&nbsp; End With
 &nbsp;&nbsp; 
 &nbsp;&nbsp; With .Levels(3)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .FirstMargin = 3600&nbsp;&nbsp;&nbsp; '/ 2.5"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .LeftMargin = 3960&nbsp;&nbsp;&nbsp;&nbsp; '/ 2.75"
 &nbsp;&nbsp; End With
End With
</code></pre>
<p>
The following example shows how to set the indent level margins in PowerPoint 97:</p>
<pre><code>With ActiveWindow.Selection.ShapeRange.TextFrame.Ruler
 &nbsp;&nbsp; '/ Margins are measured in Points that are 1/72 inch.
 &nbsp;&nbsp; With .Levels(1)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .FirstMargin = 36&nbsp;&nbsp;&nbsp;&nbsp; '/ 0.5"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .LeftMargin = 54&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '/ 0.75"
 &nbsp;&nbsp; End With
 &nbsp;&nbsp; 
 &nbsp;&nbsp; With .Levels(2)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .FirstMargin = 108&nbsp;&nbsp;&nbsp; '/ 1.5"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .LeftMargin = 126&nbsp;&nbsp;&nbsp;&nbsp; '/ 1.75"
 &nbsp;&nbsp; End With
 &nbsp;&nbsp; 
 &nbsp;&nbsp; With .Levels(3)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .FirstMargin = 180&nbsp;&nbsp;&nbsp; '/ 2.5"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .LeftMargin = 198&nbsp;&nbsp;&nbsp;&nbsp; '/ 2.75"
 &nbsp;&nbsp; End With
End With
</code></pre>
<h4>TextRange object</h4>
<p>
In PowerPoint 97, you can return all the text in a text frame or in a selection using the <b>TextRange</b> property of the <b>TextFrame</b> or <b>Selection</b> object. In PowerPoint 95, the <b>TextRange</b> object could only be returned through the use of a method such as <b>Characters</b>, <b>Paragraphs</b> or <b>Words</b>. These methods are still available to manipulate specific <i>pieces</i> of text, but with direct access to the <b>TextRange</b> object, it is now easier to apply formatting to all text contained in a text frame. The <b>TextRange</b> object also includes several new methods such as <b>Find</b>, <b>Replace</b>, <b>InsertBefore</b>, and <b>InsertAfter</b>, which give you even more ways to manipulate text.</p>
<h4>Font object</h4>
<p>
The <b>CharFormat</b> object from PowerPoint 95 has been renamed to <b>Font</b> for Office 97 consistency. The <b>Font</b> property of the <b>CharFormat</b> object has been replaced by the <b>Name</b> property of the <b>Font</b> object. In addition, <b>Size</b> is now entered as points instead of twips. The following example shows how to format text using the <b>CharFormat</b> object in the PowerPoint 95 object model:</p>
<pre><code>'/ Format text
With objPPTObject.Text.Words(1, 2).CharFormat
 &nbsp;&nbsp; .Font = "Arial"
 &nbsp;&nbsp; .Size = 18 * 20&nbsp;&nbsp;&nbsp; '/ Font size is measured in twips (1/20 point)
 &nbsp;&nbsp; .Bold = True
 &nbsp;&nbsp; .Italic = True
 &nbsp;&nbsp; .Underline = True
 &nbsp;&nbsp; .Shadow = False
 &nbsp;&nbsp; .Color.RGB = RGB(255, 0, 0)
End With
</code></pre>
<p>
The following example produces the same results using the <b>Font</b> object in the PowerPoint 97 object model:</p>
<pre><code>'/Use the Font object to format the text
With ActiveWindow.Selection.ShapeRange.TextFrame.TextRange.Font
 &nbsp;&nbsp; .Name = "Arial"
 &nbsp;&nbsp; .Size = 18&nbsp;&nbsp;&nbsp;&nbsp; '/ Font size is measured in points (no conversion)
 &nbsp;&nbsp; .Bold = True
 &nbsp;&nbsp; .Italic = True
 &nbsp;&nbsp; .Underline = True
 &nbsp;&nbsp; .Shadow = False
 &nbsp;&nbsp; .Color.RGB = RGB(255, 0, 0)
End With
</code></pre>
<h4>ParagraphFormat Object</h4>
<p>
The <b>ParaFormat</b> object has been renamed to <b>ParagraphFormat</b> in PowerPoint 97. One significant difference is the removal of the <b>LineSpacingSet</b> and <b>LineSpacingSet</b> objects. The functionality of these objects has been replaced by the <b>SpaceBefore</b>, <b>SpaceAfter</b>, and <b>SpaceWithin</b> properties of the <b>ParagraphFormat</b> object (formally the <b>Before</b>, <b>After</b>, and <b>Within</b> properties of the <b>LineSpacingSet </b>object). The unit of measure for line spacing in PowerPoint can be either lines or points. In PowerPoint 95, you have to include either the <b>Points</b> or <b>Lines</b> property to indicate which measurement to use, as shown in the following example:</p>
<pre><code>Set objPPTParaFormat = objPPTObject.Text.Paragraphs.ParaFormat
With objPPTParaFormat.LineSpacing
 &nbsp;&nbsp; .Before.Points = 6
 &nbsp;&nbsp; .After.Points = 6
 &nbsp;&nbsp; .Within.Lines = 2
End With
</code></pre>
<p>
PowerPoint 97 assumes lines as the default unit of measure. To use points, you must set the appropriate line rule property to <b>False</b>. There are three line rule properties: <b>LineRuleAfter</b>, <b>LineRuleBefore</b>, and <b>LineRuleWithin</b>. The default value for each of these is <b>True</b>, meaning the default unit for spacing is lines. If any are set to <b>False</b>, the corresponding space property is entered as points. </p>
<pre><code>With ActiveWindow.Selection.ShapeRange.TextFrame.TextRange
 &nbsp;&nbsp; With .ParagraphFormat
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .LineRuleAfter = msoFalse&nbsp;&nbsp;&nbsp; '/ Measure in points
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .SpaceAfter = 6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '/ Space after to 6 points
 &nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .LineRuleBefore = msoFalse&nbsp;&nbsp; '/ Measure in points
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .SpaceBefore = 6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '/ Space before to 6 points
 &nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .LineRuleWithin = msoTrue&nbsp;&nbsp;&nbsp; '/ Measure in lines
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .SpaceWithin = 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '/ Space within to 2 lines
 &nbsp;&nbsp; End With
End With
</code></pre>
<h3><a name="shapeformat"></a>Shape Formatting</h3>
<p>
With respect to formatting objects, the most significant difference between PowerPoint 95 and PowerPoint 97 is that the <b>GraphicFormat</b> object has been removed. All formatting objects under the <b>GraphicFormat</b> are now directly accessible from the <b>Shape</b> object.</p>
<h4>FillFormat object</h4>
<p>
The <b>HasPresetTexture</b> property has been removed. The <b>Type</b> property identifies the kind of fill, if any. <b>PresetShade</b> has also been removed. Most of the enumerated constants have been renamed to comply with Office 97 standards.</p>
<p>
Other changes: 
<ul type=disc>
<li>
<b>WithPicture</b> has been renamed to <b>UserPicture</b> for naming consistency.<br><br></li>
<li>
The term "shade" has been replaced by the term "gradient" throughout the object model. For example, <b>ShadeVariant</b> has been renamed to <b>GradientVariant</b>. </li>
</ul>
<p>
The following example shows how to add fill to a shape in PowerPoint 95:</p>
<pre><code>With ActivePresentation.Slides(1).Objects(1).GraphicFormat.Fill
 &nbsp;&nbsp; .PresetShaded ppShadeFromCorner, 1, ppPresetShadeChrome
End With
</code></pre>
<p>
The following example produces the same results in PowerPoint 97:</p>
<pre><code>With ActivePresentation.Slides(1).Shapes(1).Fill
 &nbsp;&nbsp; .PresetGradient msoGradientFromCorner, 1, msoGradientChrome
End With
</code></pre>
<h4>LineFormat object</h4>
<p>
The <b>LineFormat</b> object has acquired several new properties in the PowerPoint 97 object model that allows for even more control over the look of a line. Most of the new properties have to do with the arrowhead style. The PowerPoint 95 <b>LineFormat</b> object has only one property to set the arrowhead style (the <b>ArrowheadStyle</b> property). The PowerPoint 97 <b>LineFormat</b> object has six arrowhead properties that can be set (<b>BeginArrowheadLength</b>, <b>BeginArrowheadStyle</b>, <b>BeginArrowheadWidth</b>, <b>EndArrowheadLength</b>, <b>EndArrowheadStyle</b>, and <b>EndArrowheadWidth</b>). In addition, the <b>Weight</b> property has been added for more direct control over line thickness.</p>
<p>
Another change is in the way the line objects are created. In PowerPoint 95, the syntax to add a line to a slide is as follows:</p>
<pre><code>expression.AddLine(<i>Left</i>,<i> Top</i>,<i> Width</i>,<i> Height</i>)
</code></pre>
<p>
where the<i> Left, Top</i>,<i> Width</i>,<i> and Height</i> values, which are entered in twips, creates a bounding rectangle for the line. The width and height of the line are essentially offsets of the left and top properties.</p>
<p>
The following example adds a line in PowerPoint 95:</p>
<pre><code>Set objLine = ActivePresentation.Slides(1).Objects.AddLine(2000, 6000, 7000, 1)
With objLine.GraphicFormat.Line
 &nbsp;&nbsp; .Type = ppLineSolid
 &nbsp;&nbsp; .Style = ppLineStyleOnePoint
 &nbsp;&nbsp; .DashStyle = ppLineDashNone
 &nbsp;&nbsp; .ArrowheadStyle = ppArrowheadSmallAtStart
 &nbsp;&nbsp; .BackColor.RGB = RGB(255, 0, 255)
 &nbsp;&nbsp; .ForeColor.RGB = RGB(255, 255, 0)
End With
</code></pre>
<p>
In PowerPoint 97, the syntax to add a line is a little more straightforward:</p>
<pre><code>expression.AddLine(<i>BeginX</i>, <i>BeginY</i>, <i>EndX</i>, <i>EndY</i>)
</code></pre>
<p>
The <i>EndX</i> and <i>EndY</i> coordinate is simply the ending point on the slide. Also, the <i>BeginX</i>, <i>BeginY</i>, <i>EndX</i>, and <i>EndY</i> values are entered as points.</p>
<p>
The following example adds a line in PowerPoint 97:</p>
<pre><code>Set objLine = ActivePresentation.Slides(1).Shapes.AddLine(100, 300, 350, 300)
'/ Set Line formats.
With objLine.Line
 &nbsp;&nbsp; .DashStyle = msoLineSolid
 &nbsp;&nbsp; .Style = msoLineSingle
 &nbsp;&nbsp; .Weight = 2
 &nbsp;&nbsp; .BeginArrowheadLength = msoArrowheadLong
 &nbsp;&nbsp; .BeginArrowheadStyle = msoArrowheadOval
 &nbsp;&nbsp; .BeginArrowheadWidth = msoArrowheadWide
 &nbsp;&nbsp; .EndArrowheadLength = msoArrowheadLong
 &nbsp;&nbsp; .EndArrowheadStyle = msoArrowheadTriangle
 &nbsp;&nbsp; .EndArrowheadWidth = msoArrowheadWide
 &nbsp;&nbsp; .ForeColor.RGB = RGB(255, 0, 255)
 &nbsp;&nbsp; .BackColor.RGB = RGB(255, 255, 0)
End With
</code></pre>
<h4>AddPicture method</h4>
<p>
Although the <b>AddPicture</b> method still exists in PowerPoint 97, the syntax is slightly different and it returns a <b>Shape</b> object instead of a <b>SlideObject</b> object. The picture is embedded into and saved with the presentation. In PowerPoint 97, you can specify whether to link or embed a picture in a slide. In other words, you may either add a reference to a picture that is saved in a separate file, or you may insert an independent copy of the picture that is saved with the presentation.</p>
<p>
In PowerPoint 95, the syntax to add a picture to a slide is as follows:</p>
<pre><code>expression.AddPicture(<i>fileName</i>, <i>Left</i>, <i>Top</i>, <i>Width</i>, <i>Height</i>)
</code></pre>
<p>
where <i>fileName</i> is the name of the picture, and <i>Left</i>, <i>Top</i>, <i>Width</i>, and <i>Height</i>, all measured in twips, indicate the position of the picture on the slide. This method creates a copy of the picture, which is saved with the presentation.</p>
<p>
The following example adds a picture to a slide in PowerPoint 95:</p>
<pre><code>Set objSlide = ActivePresentation.Slides(1)
objSlide.Objects.AddPicture "c:\msoffice\clipart\music.bmp",_
  1000, 1000, 700, 700
</code></pre>
<p>
In PowerPoint 97, the syntax to add a picture is as follows:</p>
<pre><code>expression.AddPicture(<i>FileName</i>, LinkToFile, SaveWithDocument, <i>Left</i>, <i>Top</i>, <i>Width</i>, <i>Height</i>)
</code></pre>
<p>
where <b>LinkToFile</b> is a required Boolean parameter which, if set to <b>True</b>, means that a link is created to the picture file. If it is <b>False</b>, an independent copy of the picture is added to the slide. <b>SaveWithDocument</b> is also a required Boolean parameter. If this is set to <b>True</b>, the linked picture is saved with the presentation, otherwise only the link information is saved. If <b>LinkToFile</b> is <b>False</b>, <b>SaveWithDocument</b> must be <b>True</b>. </p>
<p>
The <i>Left</i>, <i>Top</i>, <i>Width</i>, and <i>Height</i> parameters still indicate the position of the picture on the slide, but they are now measured in points instead of twips.</p>
<p>
The following example adds a picture to a slide in PowerPoint 97:</p>
<pre><code>Set objSlide = ActivePresentation.Slides(1)
objSlide.Shapes.AddPicture "c:\msoffice\clipart\music.bmp",_
  True, True, 100, 100, 70, 70
</code></pre>
<h4>PictureFormat object</h4>
<p>
A new <b>PictureFormat</b> object in PowerPoint 97 provides additional options to modify the look of a picture. Properties such as <b>CropTop</b>, <b>CropBottom</b>, <b>CropLeft</b>, and <b>CropRight</b> still exist but they work a bit differently. In PowerPoint 95 these options are accessible directly from the <b>SlideObject</b> object. They are entered as a value between 0 and 1 that represents the fraction of the total dimension (height or width) that is to be cropped (top or bottom, left or right).</p>
<p>
The following example demonstrates how to crop 20 percent off the top of a specific picture in PowerPoint 95:</p>
<pre><code>Set pictObj = ActivePresentation.Slides(1).Objects(1)
pictObj.CropTop = 0.2
</code></pre>
<p>
In PowerPoint 97, cropping properties, in addition to several new properties, are accessed through the <b>PictureFormat</b> object. To access the <b>PictureFormat</b> object, the specified <b>Shape</b> object must be either a picture or an OLE object. To crop a picture you must enter the number of points to be cropped off of the specified side of the picture. (Cropping is calculated relative to the original, unscaled size of the picture.) The following example demonstrates how to crop 20 points off the top of a picture on a slide:</p>
<pre><code>Set pictObj = ActivePresentation.Slides(1).Shapes(1)
pictObj.PictureFormat.CropTop = 20
</code></pre>
<h4>ShadowFormat object</h4>
<p>
There are now more shadow presets to choose from, 20 in all. All of the <b>ShadowType</b> constants have been changed. The <b>Height</b> and <b>Width</b> properties of the <b>ShadowFormat</b> object have been renamed to <b>OffsetY</b> and <b>OffsetX</b>.</p>
<p>
The following example adds a shadow to an object in PowerPoint 95:</p>
<pre><code>With ActivePresentation.Slides(1).Objects(1).GraphicFormat.Shadow
 &nbsp;&nbsp; .Type = ppShadowSolid
 &nbsp;&nbsp; .Height = 180&nbsp;&nbsp;&nbsp; '/ 1/8 inch
 &nbsp;&nbsp; .Width = 180&nbsp;&nbsp;&nbsp;&nbsp; '/ 1/8 inch
 &nbsp;&nbsp; .ForeColor.RGB = RGB(0, 0, 0)
 &nbsp;&nbsp; .Transparency = 0.75
End With
</code></pre>
<p>
The following example produces the same results in PowerPoint 97:</p>
<pre><code>With ActiveWindow.Selection.ShapeRange.Shadow
 &nbsp;&nbsp; .Type = msoShadow8
 &nbsp;&nbsp; .OffsetX = 5
 &nbsp;&nbsp; .OffsetY = -3
 &nbsp;&nbsp; .ForeColor.RGB = RGB(0, 0, 0)
 &nbsp;&nbsp; .Transparency = 0.75
End With
</code></pre>
<h4>ColorFormat object</h4>
<p>
The <b>Color</b> object in PowerPoint 95 has been renamed to the <b>ColorFormat</b> object in order to be consistent with other Office 97 applications. A couple of properties from the <b>Color</b> object have also been modified. The <b>IsRGB</b> property and <b>IsScheme</b> properties have been replaced by the <b>Type</b> property, which returns <b>msoColorTypeMixed</b>, <b>msoColorTypeRGB</b>, or <b>msoColorTypeScheme</b> for a given object.</p>
<h3><a name="transanim"></a>Transition and Animation</h3>
<h4>Shape animation</h4>
<p>
In PowerPoint 97 the <b>BuildEffects</b> object has been renamed to <b>AnimationSettings</b>. Most of the properties found in the <b>BuildEffects</b> object have also been renamed and several new properties have been added. In addition, the <b>AnimationSettings</b> object contains a new <b>PlaySettings</b> object which allows you to play movie files. The following example animates a bullet chart in PowerPoint 95:</p>
<pre><code>With ActivePresentation.Slides(1).Objects(1).BuildEffects
 &nbsp;&nbsp; .Type = ppBuildTypeSecondLevel
 &nbsp;&nbsp; .Effect = ppEffectFlyFromLeft
 &nbsp;&nbsp; .StartAfterPrevious = True
 &nbsp;&nbsp; .AfterEffect = ppAfterEffectDim
 &nbsp;&nbsp; .DimColor.RGB = RGB(100, 120, 100)
 &nbsp;&nbsp; .Reverse = True
End With
</code></pre>
<p>
The following example applies the same options in PowerPoint 97 with the new object and property names:</p>
<pre><code>With ActivePresentation.Slides(1).Shapes(1).AnimationSettings
 &nbsp;&nbsp; .TextLevelEffect = ppAnimateByFirstLevel
 &nbsp;&nbsp; .EntryEffect = ppEffectFlyFromLeft
 &nbsp;&nbsp; .AnimationOrder = 2 
 &nbsp;&nbsp; .AfterEffect = ppAfterEffectDim
 &nbsp;&nbsp; .DimColor.RGB = RGB(100, 120, 100)
 &nbsp;&nbsp; .AnimateTextInReverse = True
End With
</code></pre>
<h4>SlideShowTransition object</h4>
<p>
The <b>SlideShowEffects</b> object in PowerPoint 95 is now called the <b>SlideShowTransition</b> object in PowerPoint 97, and some of the properties have been renamed or replaced by other properties. 
<ul type=disc>
<li>
The <b>AdvanceEvent</b> property has been replaced by the <b>AdvanceOnClick</b> and <b>AdvanceOnTime</b> properties. Now, instead of selecting one or the other, a slide can be programmed to advance either on a mouse click or after the specified amount of time has elapsed. <br><br></li>
<li>
The <b>EntryTime</b> property, which is now referred to as <b>Speed</b>, can be set using a predefined enumeration instead of a float value.</li>
</ul>
<p>
The following example creates a slide transition in PowerPoint 95:</p>
<pre><code>With ActivePresentation.Slides(1).SlideShowEffects
 &nbsp;&nbsp; .Sound.FromFile "c:\sounds\turn.wav"
 &nbsp;&nbsp; .EntryEffect = ppEffectStripsDownLeft
 &nbsp;&nbsp; .EntryTime = 1.5
 &nbsp;&nbsp; .AdvanceEvent = ppAdvanceOnTime
 &nbsp;&nbsp; .AdvanceTime = 5
End With
</code></pre>
<p>
The following example produces the same result in PowerPoint 97:</p>
<pre><code>With ActivePresentation.Slides(1).SlideShowTransition
 &nbsp;&nbsp; .SoundEffect.ImportFromFile "c:\sounds\turn.wav"
 &nbsp;&nbsp; .EntryEffect = ppEffectStripsDownLeft
 &nbsp;&nbsp; .Speed = ppTransitionSpeedFast
 &nbsp;&nbsp; .AdvanceOnTime = True
 &nbsp;&nbsp; .AdvanceOnClick = False
 &nbsp;&nbsp; .AdvanceTime = 5
End With
</code></pre>
<h3><a name="masterset"></a>Slide Master Setup</h3>
<h4>Master object</h4>
<p>
PowerPoint 95 treats master slides as <b>Slide</b> objects. The <b>SlideMaster</b>, <b>NotesMaster</b>, and <b>HandoutMaster</b> properties of the <b>Presentation</b> object each return a <b>Slide</b> object. PowerPoint 97 adds a specific object for master slides. The <b>SlideMaster</b>, <b>NotesMaster</b>, <b>HandoutMaster</b>, and <b>TitleMaster</b> properties now return a <b>Master</b> object, which is also accessible through the <b>Master</b> property of the <b>Slide</b> or <b>SlideRange</b> object. </p>
<p>
The new <b>Master</b> object has the <b>TextStyles</b> property which allows you to specify format options for the <b>TextStyle</b> objects for the specified master. In PowerPoint 95, <b>TextStyles</b> is a property of the <b>Presentation</b> object. In PowerPoint 97, <b>TextStyles</b> is a property of the <b>Master</b> object. This, in effect, lets you have multiple <b>TextStyle</b> objects in a presentation.</p>
<h4>TextStyleLevel object</h4>
<p>
In PowerPoint 97, there are three different types of text styles: Body text, Title text and Default text. (A fourth style found in PowerPoint 95, Notes text, has been removed.) Each of these is represented by an object in the <b>TextStyles</b> collection, which is accessed through the <b>Master</b> object. The <b>TextStyleLevel</b> object contains character and formatting information for outline levels for each <b>TextStyle</b> object. </p>
<p>
The only significant difference between PowerPoint 95 and 97 is the objects that are returned from the <b>TextStyleLevel</b> object. In PowerPoint 95, the <b>CharFormat</b> and <b>ParaFormat</b> objects are returned to set physical appearance and layout for text levels. Because those objects have been renamed in PowerPoint 97, the <b>TextStyleLevel</b> object returns either the <b>Font</b> or <b>ParagraphFormat</b> object. For more information, see the "Font object" and "ParagraphFormat object" sections earlier in this article.</p>
<p>
The following example sets text style levels in PowerPoint 95:</p>
<pre><code>With ActivePresentation.TextStyles(ppBodyStyle)
 &nbsp;&nbsp; With .Levels(1)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .CharFormat.Font = "Arial"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .CharFormat.Points = 36
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; With .ParaFormat.Bullet
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Exists = True
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Font = "Symbol"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Character = 183
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Size = 1.25
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Color.RGB = RGB(255, 255, 0)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End With
 &nbsp;&nbsp; End With
 &nbsp;&nbsp; With .Levels(2)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .CharFormat.Font = "Arial"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .CharFormat.Points = 32
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; With .ParaFormat.Bullet
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Exists = True
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Font = "Symbol"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Character = 184
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Size = 1.25
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Color.RGB = RGB(255, 255, 0)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End With
 &nbsp;&nbsp; End With
End With
</code></pre>
<p>
The following example sets the same options in PowerPoint 97:</p>
<pre><code>With ActivePresentation.SlideMaster.TextStyles(ppBodyStyle)
 &nbsp;&nbsp; With .Levels(1)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; With .Font
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Name = "Arial"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Size = 36
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End With
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; With .ParagraphFormat.Bullet
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Visible = True
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Font.Name = "Symbol"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Character = 183
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .RelativeSize = 1.25
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Font.Color = RGB(255, 0, 255)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End With
 &nbsp;&nbsp; End With
 &nbsp;&nbsp; With .Levels(2)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; With .Font
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Name = "Arial"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Size = 32
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End With
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; With .ParagraphFormat.Bullet
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Visible = True
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Font.Name = "Symbol"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Character = 184
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .RelativeSize = 1.25
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Font.Color = RGB(255, 0, 255)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End With
 &nbsp;&nbsp; End With
End With
</code></pre>
<h3><a name="slideshowsx"></a>Slide Shows</h3>
<h4>SlideShowSettings object</h4>
<p>
The <b>SlideShowSettings</b> object replaces the <b>SlideShow</b> object. The <b>SlideShowSettings</b> object contains several new properties that allow for more flexibility. It also takes advantage of some other new features, such as <b>NamedSlideShow</b> objects. </p>
<p>
Other changes of note: the <b>RunContinuously</b> property has been renamed to <b>LoopUntilStopped</b> and the <b>Run</b> method no longer requires a slide show type parameter. The type of slide show is designated through the <b>ShowType</b> property. In addition, the <b>RangeType</b> property allows you to display only selected slides in the presentation.</p>
<p>
The following example runs a slide show in PowerPoint 95:</p>
<pre><code>With ActivePresentation.SlideShow
 &nbsp;&nbsp; .AdvanceMode = ppSlideShowUseSlideTimings
 &nbsp;&nbsp; .RunContinuously = True
 &nbsp;&nbsp; .Run ppSlideShowFullScreen
End With
</code></pre>
<p>
The following example produces the same results in PowerPoint 97:</p>
<pre><code>With ActivePresentation.SlideShowSettings
 &nbsp;&nbsp; .AdvanceMode = ppSlideShowUseSlideTimings
 &nbsp;&nbsp; .LoopUntilStopped = True
 &nbsp;&nbsp; .RangeType = ppShowAll
 &nbsp;&nbsp; .ShowType = ppShowTypeSpeaker
 &nbsp;&nbsp; .Run
End With
</code></pre>
<h4>SlideShowWindow object</h4>
<p>
There are only a few minor differences with the <b>SlideShowWindow</b> object in PowerPoint 95 and PowerPoint 97. The <b>Next</b> and <b>Prev</b> methods from PowerPoint 95 have been removed and the enumerated constants for <b>IsFullScreen</b> have been changed to conform to Office 97 standards. The <b>Activate</b> method has been added to allow you to display a specific slide show window.</p>
<p>
The following example displays a specific slide show window In PowerPoint 97:</p>
<pre><code>SlideShowWindows(1).Activate
</code></pre>
<h2><a name="fileconviss"></a>File Conversion Issues</h2>
<p>
There are no significant presentation conversion issues. PowerPoint 4.0 and PowerPoint 95 files can be opened in and saved as PowerPoint 97 presentations. All shapes and objects convert completely.</p>
</BODY>
</HTML>

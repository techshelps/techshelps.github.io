<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Microsoft Visual Basic Scripting Edition: Frequently Asked Questions</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_vbsfaq"></a>Microsoft Visual Basic Scripting Edition: Frequently Asked Questions</h1>
<p>
Microsoft Corporation</p>
<p>
September 1996<br>
Last Updated: Fall 1997</p>
<h4>Contents</h4>
<p>
<a href="#vbsfaq_whatis">What is Visual Basic Scripting Edition?</a></p>
<p>
<a href="#vbsfaq_howdo">How do I get Visual Basic Scripting Edition?</a></p>
<p>
<a href="#vbsfaq_wherecan">Where can I find Visual Basic Scripting Edition documentation?</a></p>
<p>
<a href="#vbsfaq_whatsupport">What support is available for Visual Basic Scripting Edition?</a></p>
<p>
<a href="#vbsfaq_howcompare1">How does Visual Basic Scripting Edition compare to Visual Basic and the Visual Basic language in the Microsoft Office applications?</a></p>
<p>
<a href="#vbsfaq_howcompare2">How does Visual Basic Scripting Edition compare to JavaScript and Java?</a></p>
<p>
<a href="#vbsfaq_whatplatforms">What platforms will support Visual Basic Scripting Edition?</a></p>
<p>
<a href="#vbsfaq_myapplication">Can I use Visual Basic Scripting Edition as a scripting language for my own application?</a></p>
<p>
<a href="#vbsfaq_whatobjects">What objects, methods, properties, and events can I use?</a></p>
<p>
<a href="#vbsfaq_writehtmltext">How can I write HTML text to the window?</a></p>
<p>
<a href="#vbsfaq_myscript">Where should my script be within the document?</a></p>
<p>
<a href="#vbsfaq_executeascript">How do I execute a script when the user clicks on text or a picture?</a></p>
<p>
<a href="#vbsfaq_anotherframe1">How can I change the content of another frame?</a></p>
<p>
<a href="#vbsfaq_anotherframe2">How can I get the value of an object or variable in another frame?</a></p>
<p>
<a href="#vbsfaq_anotherframe3">How can I access an object in another frame?</a></p>
<p>
<a href="#vbsfaq_reference">How can I reference objects or variables in a layout control?</a></p>
<p>
<a href="#vbsfaq_radiobuttons">How can I test or set which radio buttons are selected?</a></p>
<p>
<a href="#vbsfaq_viceversa">Why do I get JavaScript errors for my Visual Basic Scripting Edition code or vice versa?</a></p>
<p>
<a href="#vbsfaq_anchor">How can I call a Visual Basic Scripting Edition function from an anchor?</a></p>
<p>
<a href="#vbsfaq_prevent">How can I prevent a form from being submitted if it's invalid?</a></p>
<p>
<a href="#vbsfaq_debug">How can I debug Visual Basic Scripting Edition code?</a></p>
<h4><a name="vbsfaq_whatis"></a>What is Visual Basic Scripting Edition?</h4>
<p>
Microsoft® Visual Basic® Scripting Edition (also known as VBScript) is a subset of the Visual Basic language. It is implemented as a fast, portable, lightweight interpreter for use in World Wide Web browsers and other applications that use ActiveX™ controls, OLE Automation servers, and Java applets.</p>
<h4><a name="vbsfaq_howdo"></a>How do I get Visual Basic Scripting Edition?</h4>
<p>
Visual Basic Scripting Edition is currently only available as part of Microsoft Internet Explorer and Internet Information Server. Both Microsoft Internet Explorer version 4.01 (<a href="http://www.microsoft.com/ie/">http://www.microsoft.com/ie/</a>) and Microsoft Internet Information Server version 4.0 (<a href="http://www.microsoft.com/iis/default.asp">http://www.microsoft.com/iis/default.asp</a>) are available through the Microsoft Web site.</p>
<h4><a name="vbsfaq_wherecan"></a>Where can I find Visual Basic Scripting Edition documentation?</h4>
<p>
Documentation is available on the Visual Basic Scripting Edition Web page (<a href="http://www.microsoft.com/vbscript/">http://www.microsoft.com/vbscript/</a>). This page may be updated frequently, so check back often.</p>
<h4><a name="vbsfaq_whatsupport"></a>What support is available for Visual Basic Scripting Edition?</h4>
<p>
There are a variety of support options (see <a href="http://www.microsoft.com/SUPPORT/">http://www.microsoft.com/SUPPORT/</a>). Be sure to join the mail lists where Visual Basic Scripting Edition and other components of the new Internet technology are discussed.</p>
<h4><a name="vbsfaq_howcompare1"></a>How does the Visual Basic Scripting Edition compare to Visual Basic and the Visual Basic language in the Microsoft Office applications?</h4>
<p>
Visual Basic Scripting Edition is a strict subset of the Visual Basic for Applications language used in Microsoft Excel, Microsoft Project, Microsoft Access, and the Visual Basic 5.0 development system. Visual Basic Scripting Edition is designed to be a small and lightweight interpreted language, so it does not use strict types (only variants). Also, because VBScript is intended to be a safe subset of the language, it does not include file I/O or direct access to the underlying operating system. You can find a complete list of the differences between VBScript and Visual Basic for Applications on the "Visual Basic for Applications Features not in VBScript" Web page (<a href="http://www.microsoft.com/VBSCRIPT/US/VBSLANG/VSGRPNONFEATURES.HTM">http://www.microsoft.com/VBSCRIPT/US/VBSLANG/VSGRPNONFEATURES.HTM</a>).</p>
<h4><a name="vbsfaq_howcompare2"></a>How does Visual Basic Scripting Edition compare to JavaScript and Java?</h4>
<p>
When used in Internet Explorer, Visual Basic Scripting Edition is directly comparable to JavaScript (not Java). Like JavaScript, VBScript is a pure interpreter that processes source code embedded directly in the HTML. Visual Basic Scripting Edition, like JavaScript, does not produce stand-alone applets but is used to add intelligence and interactivity to HTML documents. For the programmers who already know Visual Basic, the Visual Basic Scripting Edition is a valuable alternative to JavaScript in activating Web pages.</p>
<h4><a name="vbsfaq_whatplatforms"></a>What platforms will support the Visual Basic Scripting Edition?</h4>
<p>
The Visual Basic Scripting Edition is available or under development for Microsoft Windows® and Windows NT® (including native versions for Alpha), 16-bit Windows, and Macintosh®. Microsoft is working with third parties to provide UNIX versions for Sun Microsystems, Hewlett-Packard, Digital Equipment Corporation, and IBM platforms.</p>
<h4><a name="vbsfaq_myapplication"></a>Can I use Visual Basic Scripting Edition as a scripting language for my application?</h4>
<p>
Yes. If you write it to support ActiveX scripting, your application can host Visual Basic Scripting Edition and users of your application can use VBScript. Another important bonus is that because ActiveX scripting is an open standard, your application can host any other language that is written to that standard. You must acknowledge the use of Microsoft technology and include the appropriate trademark and copyright information, but you can use and distribute Visual Basic Scripting Edition free of royalties.</p>
<h4><a name="vbsfaq_whatobjects"></a>What objects, methods, properties, and events can I use?</h4>
<p>
There are three separate classes of objects available within Visual Basic Scripting Edition:
<ul type=disc>
<li>
Objects provided by the Visual Basic Scripting Edition engine<br><br></li>
<li>
Objects provided by Internet Explorer<br><br></li>
<li>
Objects provided by the Web page author</li>
</ul>
<p>
The Visual Basic Scripting Edition engine provides the core runtime functionality—a subset of the full Visual Basic language—including a minimal set of basic objects. The vast majority of objects used in scripting is provided by Internet Explorer. In general, anything that is specific to the Internet is provided by Internet Explorer, and anything that is generally useful is provided directly in Visual Basic Scripting Edition. The Web author can insert additional objects through the &lt;OBJECT&gt; HTML tag.</p>
<p>
The most complete documentation of the objects, methods, events, and properties available in Internet Explorer are available in the ActiveX SDK in the Object Model for Scripting section of the SDK Overview. The SDK can be downloaded from <a href="http://www.microsoft.com/intdev/sdk/">http://www.microsoft.com/intdev/sdk/</a>.</p>
<p>
This material can also be found through ActiveX Control Pad, a new authoring tool created by Microsoft. Select the Script Wizard while in the HTML view. The Object/Action view on the right then displays the Window object. Unfold it to reveal the complete object model beneath. Under Tools/Options, you can select code as the default view in the Script Wizard's bottom pane. Control Pad can be downloaded from <a href="http://www.microsoft.com/workshop/author/cpad/">http://www.microsoft.com/workshop/author/cpad/.</a></p>
<h4><a name="vbsfaq_writehtmltext"></a>How can I write HTML text to the window?</h4>
<p>
You can use the <b>Document.write</b> method to write any text, HTML or otherwise, to the window. These commands must be executed before the document has finished loading. The best way is to execute Visual Basic Scripting Edition commands that are inline, not subroutines or functions that are triggered by events.</p>
<p>
Example:</p>
<pre><code>&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Dynamic Greeting Sample&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!-- OPTION EXPLICIT
If Hour(time) &lt; 6 then
document.write "&lt;b&gt;Good grief!&lt;/b&gt;"
Else if Hour(time) &lt; 12 then
document.write "&lt;b&gt;Good morning!&lt;/b&gt;"
Else if Hour(time) &lt; 17 then
document.write "&lt;b&gt;Good afternoon!&lt;/b&gt;"
Else document.write "&lt;b&gt;Good evening!&lt;/b&gt;"
End If
--&gt;
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;&lt;BODY&gt;
&lt;p&gt;This is a sample document&lt;/p&gt;
&lt;/BODY&gt;&lt;/HTML&gt;
</code></pre>
<h4><a name="vbsfaq_myscript"></a>Where should my script be within the document?</h4>
<p>
The very bottom of the HTML document seems to be best in most cases, and keeping it separated from the rest of the HTML makes it clearer. In dynamic HTML scenarios, where the script is creating some of the text displayed on the page, the script must be at the beginning or embedded in the HTML.</p>
<h4><a name="vbsfaq_executeascript"></a>How do I execute a script when the user clicks on text or a picture?</h4>
<p>
Write your anchor as:</p>
<pre><code>&lt;A HREF="" language=VBScript onclick="alert 'got here' "&gt; &lt;IMG SRC=some.gif&gt; &lt;/A&gt; or use VBScript as...
&lt;A HREF="" onclick="DoStart"&gt; Click me!&lt;/A&gt;
&lt;SCRIPT Language = "VBScript"&gt;
&lt;!--
SUB DoStart
alert "got here"
END SUB
--&gt;
&lt;/SCRIPT&gt;
</code></pre>
<h4><a name="vbsfaq_anotherframe1"></a>How can I change the content of another frame?</h4>
<p>
In a simple window, containing one frameset and multiple frames, you can use:</p>
<pre><code>top.framename.location.href="newfile.htm"
</code></pre>
<p>
—or—</p>
<pre><code>top.frames(n).location.href="newfile.htm"
</code></pre>
<p>
where <i>n</i> is an index starting from 0 in the order the frames are defined within the frameset, and framename is the value of the NAME attribute within the &lt;FRAME&gt; tag.</p>
<p>
In a complex page containing frames nested within frames, the frame name is built based on the hierarchy of nested frames within the page. The first portion of the name is the starting point, either top to start from the top level of the window, or parent to start relative to the frame where the script is executed. Multiple parent references can be used to go up through additional levels of framesets if necessary. Then you use the name or indexed reference to the proper frame within each level.</p>
<p>
For example, a window containing a banner frame across the top, a navigation bar under it on the left, and the remainder showing subject contents might be defined as:</p>
<pre><code>&lt;FRAMESET ROWS="80, *"&gt;
&lt;FRAME NAME=banner, SRC="banner.gif"&gt;
&lt;FRAMESET COLS="120, *"&gt;
&lt;FRAME NAME=navbar, SRC="nav1.htm"&gt;
&lt;FRAME NAME=contents, SRC="initial.htm"&gt;
&lt;/FRAMESET&gt;
&lt;/FRAMESET&gt;
</code></pre>
<p>
Scripts in the navigation bar could change the Contents frame with:</p>
<pre><code>parent.frames(1).location.href="newfile.htm"
</code></pre>
<p>
—or—</p>
<pre><code>parent.contents.location.href="newfile.htm"
</code></pre>
<p>
The banner could be changed with:</p>
<pre><code>top.banner.location.href="banner2.gif"
parent.parent.frames(0).location.href="banner2.gif"
</code></pre>
<p>
All floating frames are part of the document object, which is within the appropriate frame if framesets are used. Floating frames can be referenced by name or by index number within the containing document. To change a floating frame within the same regular frame, use:</p>
<pre><code>document.framename.location.href="newfile.htm"
</code></pre>
<p>
To change a floating frame in a different frame, use the above procedure to identify the frame and add the "document" object reference as in:</p>
<pre><code>top.frames(1).contents.document.frames(0).location.href="newfile.htm"
</code></pre>
<h4><a name="vbsfaq_anotherframe2"></a>How can I get the value of an object property or variable in another frame?</h4>
<p>
Use top.framename.varname or parent.framename.varname. To get the value of a control property use top.framename.control.property. See the previous item for a complete description of referencing frames.</p>
<h4><a name="vbsfaq_anotherframe3"></a>How can I access an object in another frame?</h4>
<pre><code>top.framename.objectID (or parent...)
example: parent.controls.Axa1.FireImportedEvent 101
</code></pre>
<h4><a name="vbsfaq_reference"></a>How can I reference objects or variables in a layout control?</h4>
<p>
You can access the objects that are in the layout from the HTML and vice versa, but if you use the Control Pad Script Wizard it won't show you the possibilities. You pretty much have to code this by hand.</p>
<p>
To reference the contents of the ALX file from the HTML file, you use the following notation:</p>
<pre><code>&lt;LayoutControlID&gt;.&lt;ControlID&gt;.&lt;PropertyOrMethod&gt;
&lt;LayoutControlID&gt;.&lt;GlobalProcedureOrVariable&gt;
</code></pre>
<p>
Where &lt;LayoutControlID&gt; is the ID you assigned to the layout control in the HTML file.</p>
<p>
To reference the contents of the HTML file from the ALX file, you use the following notation:</p>
<pre><code>window.&lt;ControlID&gt;.&lt;PropertyOrMethod&gt;
window.&lt;GlobalProcedureOrVariable&gt;
</code></pre>
<p>
The object tag for the ALX that is located in the HTML file has an ID string that will be something like Layout1_ALX. Use this ID tag for connecting between separate .alx layouts. (This ID should not be the same ID that shows in the Property Window for the layout control.) For example:</p>
<pre><code>Layout1_ALX.textbox1.text="Hello World"
</code></pre>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>A script in an HTML file cannot call a VBScript procedure located in an .alx file, but a script in an .alx file can call a procedure in an HTML file.</p>
<p>
Be careful not to repeat control names from one .alx layout to another. If Layout1 has a textbox1, then Layout2 should not. Otherwise, things happen unpredictably.</p>
<h4><a name="vbsfaq_radiobuttons"></a>How can I test or set which radio buttons are selected?</h4>
<p>
Define the buttons like this:</p>
<pre><code>&lt;FORM NAME="InputForm"&gt;
&lt;INPUT TYPE=RADIO NAME="ImageSet"&gt;Image Set 1
&lt;INPUT TYPE=RADIO NAME="ImageSet"&gt;Image Set 2
&lt;INPUT TYPE=RADIO NAME="ImageSet"&gt;Image Set 3
&lt;INPUT TYPE=RADIO NAME="ImageSet"&gt;Image Set 4
&lt;/FORM&gt;
</code></pre>
<p>
Then you can initialize any or all buttons with:</p>
<pre><code>InputForm.ImageSet.Item(n).Checked = TRUE
</code></pre>
<p>
(where <i>n</i> starts from 0)</p>
<p>
And test values with:</p>
<pre><code>If InputForm.ImageSet.Item(0).Checked Then...
</code></pre>
<h4><a name="vbsfaq_viceversa"></a>Why do I get JavaScript errors for my Visual Basic Scripting Edition code or vice versa?</h4>
<p>
Unless told otherwise, Internet Explorer assumes that the code is Micorosoft JavaScript™. You can fix this in several ways:
<ul type=disc>
<li>
Include the LANGUAGE attribute in the input tag:<pre><code>&lt;input type="button" name="Button1" language = "VBScript" onClick="MsgBox x"&gt;
</code></pre>
</li>
<li>
Move the &lt;SCRIPT&gt; block earlier in the html stream—before any of the "scriptlets."<br><br></li>
<li>
Include a &lt;BODY&gt; tag with the following enclosed:<pre><code>Language = "VBScript"
</code></pre>
</li>
<li>
Include a LANGUAGE attribute within all &lt;SCRIPT&gt; tags.<br><br></li>
<li>
Use the objectname_eventname syntax, as in<pre><code>&lt;SCRIPT LANGUAGE = "VBScript"&gt;
Sub BtnHello_OnClick
MsgBox "Hello"
End Sub
Sub BtnOther_OnClick
MsgBox "Other"
End Sub
&lt;/SCRIPT&gt;
</code></pre>
</li>
</ul>
<h4><a name="vbsfaq_anchor"></a>How can I call a Visual Basic Scripting Edition function from an anchor?</h4>
<p>
There are two methods available:
<ul type=disc>
<li>
Use the objectname_eventname syntax, such as:<pre><code>&lt;A NAME=BtnHello&gt;
&lt;SCRIPT LANGUAGE="VBScript"&gt;
Sub BtnHello_OnClick
End Sub
</code></pre>
</li>
<li>
Use JavaScript notation, such as:<pre><code>&lt;A NAME=BtnHello "javascript:My_Func()"&gt;
&lt;SCRIPT LANGUAGE="VBScript:&gt;
Sub MyFunc()
End Sub
</code></pre>
</li>
</ul>
<h4><a name="vbsfaq_prevent"></a>How can I prevent a form from being submitted if it's invalid?</h4>
<p>
The easiest and clearest way is to execute the <b>Submit</b> method only if everything is okay:</p>
<pre><code>&lt;FORM NAME="TestForm"&gt;
Firstname: &lt;INPUT NAME="FirstName" VALUE="" MAXLENGTH="50" SIZE=50&gt;
&lt;INPUT TYPE="BUTTON" VALUE="Run Query" NAME="RQ3"&gt;
&lt;/FORM&gt;

&lt;SCRIPT LANGUAGE="VBScript"&gt;
Sub RQ3_OnClick
Dim MyForm
Set MyForm=Document.TestForm
If RTrim(MyForm.FirstName.Value)="" then
MsgBox "You must enter a Firstname", 64, "Missing information!"
Else
TheForm.Submit
End if
&lt;/SCRIPT&gt;
</code></pre>
<h4><a name="vbsfaq_debug"></a>How can I debug Visual Basic Scripting Edition code?</h4>
<p>
We highly recommend using Visual Basic 5.0 as a test tool for VBScript code. Since Visual Basic Scripting Edition is a subset of Visual Basic, it's really easy to move code back and forth.</p>
<p>
You can use the HTML intrinsic controls as OCXs in Visual Basic 5.0 forms. The reason this works is that this is exactly the way Internet Explorer implemented them. To add these to your tool palette, use "Tools\Custom controls" and then check "Microsoft HTML Intrinsic Controls."</p>
<p>
When you're programming in Visual Basic 5.0, you'll of course have to stick to the Visual Basic Scripting Edition subset in order to allow you to move code to Visual Basic Scripting Edition and have it work. Here are the normal gotcha's:
<ul type=disc>
<li>
VB automatically inserts event handler names as "Private Sub ObjName_EventName". Change these to "Sub Obj_EventName". A quick replace pass substituting "" for "Private " will do the trick.<br><br></li>
<li>
Don't use types. For example, when you would normally type "Dim x as long", type "Dim x". Searching for " as " in your Visual Basic source will let you find these quickly.<br><br></li>
<li>
Initialization. Visual Basic Scripting Edition doesn't support "Initialize" and "Terminate" events. Internet Explorer provides an "onLoad" event on the window. To write code that works in both Visual Basic 5.0 and Visual Basic Scripting Edition, use the following notation:<pre><code>Sub Initialize()
' Write your init code here
End Sub
' This runs only in Internet Explorer.
Sub Window_OnLoad()
Call Initialize
End Sub
' This runs only in Visual Basic 5.0.
Sub Form_Initialize()
Call Page_Initialize
End Sub
</code></pre>
</li>
</ul>
<p>
Using these techniques, you can do most of your code development in Visual Basic, which has great debugging tools. Usually I work out coding problems in Visual Basic and then immediately copy all of the code and paste it into the &lt;SCRIPT&gt;&nbsp;.&nbsp;.&nbsp;.&nbsp;&lt;/SCRIPT&gt; block in my HTML file and hit the refresh button and verify that everything works okay. (And, yes, if I follow the rules above, it nearly always does!) An integrated environment to debug and author VBScript would be great, but this technique works so well that often I don't miss an IDE at all!</p>
<p>
When debugging code that can't use this technique, insert Alert statements throughout the code to keep track of progress and the value of important variables or properties.</p>
</BODY>
</HTML>

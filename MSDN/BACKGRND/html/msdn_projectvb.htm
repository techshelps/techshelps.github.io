<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Migrating to the Microsoft Project 98 VBA Object Model</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_projectvb"></a>Migrating to the Microsoft Project 98 VBA Object Model</h1>
<p>
Microsoft Corporation</p>
<p>
July 1997</p>
<p>
<b>Introduction</b></p>
<p>
Extensive changes have been made to the Microsoft® Project 98 Visual Basic® object model to support new and improved features in the application and to take advantage of the integrated development environment common to all Microsoft Office applications. This paper summarizes these changes to assist in the migration of existing macros from previous versions of Microsoft Project and to aid developers of new macros and custom solutions in identifying changes to Microsoft Visual Basic for Applications (VBA). This paper is not intended to be a comprehensive guide to the new object model. For a complete reference, refer to VBA Help and the VBA Object Browser. </p>
<p>
In particular, developers may find that many objects, properties, and methods have been replaced. To provide backward compatibility, most of the replaced components have been hidden rather than removed. Old code that uses these hidden components still works correctly without modification.</p>
<p>
<b>Migration of Custom Solutions</b></p>
<p>
Users of custom solutions should note that applications written outside of Microsoft Project (for example, those written in Visual Basic or VBA for other Office applications) that use static (early) binding with the Microsoft Project 95 type library must be modified to work with Microsoft Project 98. Specifically, developers have two options: 
<ul type=disc>
<li>
Modify the program to use dynamic (late) binding. This option is recommended for applications that also work with Microsoft Excel 95, which requires the use of the older Microsoft Project 95 type library.<br><br></li>
<li>
Modify the code to reference the new Microsoft Project 98 type library (Msprj8.olb), and then recompile the application. This option is recommended for 16-bit applications running in Windows 95, which do not work with dynamic (late) binding.</li>
</ul>
<p>
<b>Migration of Existing Macros</b></p>
<p>
When run in Microsoft Project 98, macro code created in Microsoft Project 95 or 4.0 may result in errors or other unexpected behavior if not adapted to reflect changes to the Microsoft Project VBA object model. The following sections describe migration issues relating to macros created with earlier versions of Microsoft Project and other behavior that is either unsupported by Microsoft Project 98 or requires some qualification.</p>
<h3>Microsoft Project 4.0 and 95 Macros</h3>
<p>
The following table describes Microsoft Project 4.0 and 95 macros that are either unsupported or the behavior of which is modified by Microsoft Project 98.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=28%><b>Macro, Component, <br>
or Behavior</b></td>
<td width=72%><b><br>
Status or Qualification</b></td>
</tr>
<tr valign=top>
<td width=28%>AcceptAllUpdates</td>
<td width=72%>This macro is not supported in Microsoft Project 98.</td>
</tr>
<tr valign=top>
<td width=28%>CreatePivotTables</td>
<td width=72%>This macro is made obsolete by the new <b>Save to PivotTable</b> feature, available in the <b>Save As</b> dialog box. <p>
Although this macro continues to run against Microsoft Excel 95, it does not run against Microsoft Excel 97. The macro assumes that Microsoft Excel workbooks have a default of at least five worksheets. Excel 95 has 16, but Excel 97 has only three. The macro has also been hard coded to search for the Excel 5/Excel 95 type library, which does not exist if Excel 97 is installed on the machine.</p>
<p>
To fix the macro, add the line "Activeworkbook.Sheets.Add" twice, to ensure that there are 5 worksheets in the workbook, and change the constant value from Excel.Application.5 to Excel.Application.</p>
</td>
</tr>
<tr valign=top>
<td width=28%>AdjustDates</td>
<td width=72%>The Microsoft Project 4.0 and 95 versions of this macro are not supported because in Microsoft Project 98 the methods DateAdd and DateDifference require qualification. Microsoft Project 98 ships with a compatible version of this macro; however, to update the old macro, simply prepend DateAdd and DateDifference with Application.</td>
</tr>
<tr valign=top>
<td width=28%>DateRangeFromToday</td>
<td width=72%>Microsoft Project 98 does not support this macro. This macro employs the unsupported behavior described above with regard to the AdjustDates macro.</td>
</tr>
<tr valign=top>
<td width=28%>EffortDriven</td>
<td width=72%>This macro is made obsolete by the new scheduling engine, which supports Effort Driven tasks.<p>
Microsoft Project 98 does not support this macro. Microsoft Project 98 VBA requires that you specify a property or method for all collection objects (e.g., Windows, Tasks). This is not the case for earlier versions of Microsoft Project VBA. For example, if you write ActiveProject.Tasks in Microsoft Project 95 VBA it returns the count of tasks. The EffortDriven macro employs this unsupported behavior.</p>
<p>
To fix this macro, append .Count to all such statements.</p>
</td>
</tr>
<tr valign=top>
<td width=28%>RollupFormatting</td>
<td width=72%>Microsoft Project 98 does not support this macro. This macro employs the unsupported behavior described above with regard to the EffortDriven macro.</td>
</tr>
<tr valign=top>
<td width=28%>TaskUpdate</td>
<td width=72%>Microsoft Project 98 does not support this macro. This macro employs the unsupported behavior described above with regard to the EffortDriven macro.</td>
</tr>
<tr valign=top>
<td width=28%>Module Editor</td>
<td width=72%>In Microsoft Project 98 VBA, the Module Editor has been replaced with the new Visual Basic Editor, which is common to all Microsoft Office applications. Microsoft Project 98 does not support macro code relating to the Module Editor. The Visual Basic Editor has its own object model and can be used in lieu of ViewApply "Module Editor".</td>
</tr>
</table><br>
<h3>Microsoft Project 3.0 Macros</h3>
<p>
Microsoft Project 98 does not support Microsoft Project 3.0 macros directly. In addition to having 3.0 macros in a Microsoft Project 3.0 project, it is possible that a Microsoft Project 4.0 or 95 project contains a Microsoft Project 3.0 macro stream. These versions of Microsoft Project leave Microsoft Project 3.0 macros intact when reading a 3.0 file. Only after the 3.0 macro is edited in Microsoft Project 4.0 or 95 is it converted to the Microsoft Project 4.0 or 95 VBA format.</p>
<p>
If you open a Microsoft Project 4.0 or 95 file that contains a 3.0 macro stream in Microsoft Project 98, that macro is ignored and therefore is not visible in the Microsoft Project 98 list of available macros. To access this macro in Microsoft Project 98, you must first modify the macro in Microsoft Project 4.0 or 95 and convert it to the Microsoft Project 4.0 or 95 VBA format, which Microsoft Project 98 can read.</p>
<h3>Macros Created with Localized Versions</h3>
<p>
VBA for Microsoft Project 98 is English only. Before you can use macros created with localized versions of VBA for Microsoft Project 4.0 and 95 in Microsoft Project 98, they must be delocalized, or translated into the English-only VBA employed by Microsoft Project 98. If you open a project containing macros created with a foreign language version of Microsoft Project 4.0 or 95 in Microsoft Project 98, the program will attempt to translate localized items to the latest version of VBA.</p>
<p>
The following table lists the files required for translation and the folders where they should reside. If these libraries are located in the correct folders when the Microsoft Project 4.0 or 95 project is opened, Microsoft Project 98 will perform delocalization automatically. When loading a macro written in a localized version of VBA, the error message "Error Loading DLL" typically indicates that one or more of the necessary files was not found.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td width=26%><b><br>
Language of macros</b></td>
<td width=39%><b>System folder (Windows 95) or System32 folder (Windows NT)</b></td>
<td width=35%><b><br>
Folder containing Winproj.exe</b></td>
</tr>
<tr valign=top>
<td width=26%>Danish</td>
<td width=39%>VBADa32.dll, VBAEn32.olb</td>
<td width=35%>Pj4Da32.olb, Pj4En32.olb</td>
</tr>
<tr valign=top>
<td width=26%>French</td>
<td width=39%>VBAFr.32.dll, VBAEn32.olb</td>
<td width=35%>Pj4Fr32.olb, Pj4En32.olb</td>
</tr>
<tr valign=top>
<td width=26%>German</td>
<td width=39%>VBADe32.dll, VBAEn32.olb</td>
<td width=35%>Pj4De32.olb, Pj4En32.olb</td>
</tr>
<tr valign=top>
<td width=26%>Italian</td>
<td width=39%>VBAIt32.dll, VBAEn32.olb</td>
<td width=35%>Pj4It32.olb, Pj4En32.olb</td>
</tr>
<tr valign=top>
<td width=26%>Japanese</td>
<td width=39%>VBAJp32.dll, VBAEnD32.olb</td>
<td width=35%>Pj4Jp32.olb, Pj4End32.olb</td>
</tr>
<tr valign=top>
<td width=26%>Norwegian</td>
<td width=39%>VBANo32.dll, VBAEn32.olb</td>
<td width=35%>Pj4No32.olb, Pj4En32.olb</td>
</tr>
<tr valign=top>
<td width=26%>Spanish</td>
<td width=39%>VBAEs32.dll, VBAEn32.olb</td>
<td width=35%>Pj4Es32.olb, Pj4En32.olb</td>
</tr>
<tr valign=top>
<td width=26%>Swedish</td>
<td width=39%>VBASv32.dll, VBAEn32.olb</td>
<td width=35%>Pj4Sv32.olb, Pj4En32.olb</td>
</tr>
<tr valign=top>
<td width=26%>Traditional Chinese</td>
<td width=39%>VBAChT32.dll, VBAEnD32.olb</td>
<td width=35%>Pj4ChT32.olb, Pj4End32.olb</td>
</tr>
</table><br>
<p>
While every item in the Object Library for Microsoft Project and all VBA language keywords have been delocalized to English, in isolated cases translation may not be 100 percent accurate. In those cases, you will need to modify the object model components of the module manually.</p>
<p>
In addition, Microsoft Project 98 will attempt to delocalize code associated with toolbar buttons; however, in certain cases delocalization will fail, and you will need to modify the command manually (for example, when a single button includes two commands separated by a colon).</p>
<p>
Strings, module names, and macro names have not been delocalized and should work without translation.</p>
<h3>Password-protected Modules</h3>
<p>
Unlike earlier versions, Microsoft Project 98 supports passwords for projects, but not individual modules. When you open older projects containing protected modules, Microsoft Project 98 prompts you for the password for each protected module. If the correct password is entered, the module is unhidden and will be saved when you save the converted project. (You are given as many opportunities as necessary to supply the correct password.) The password is required each time you open the converted project in Microsoft Project 98 until you save it.</p>
<p>
If any modules are skipped, Microsoft Project 98 attempts to save them in a new, protected project with an unspecified password. (The project will be named "FileNameMacros", where FileName is the name of the project originally containing the hidden modules.) Macro code in those modules will still run, provided it is compatible with Microsoft Project 98 VBA, but you cannot view, edit, or record macros in that project. If for any reason Microsoft Project 98 is unable to create the protected project, you are given the opportunity to name and save it manually.</p>
<p>
If hidden modules are saved in the protected "FileNameMacros" project, but the converted project is not saved, the correct password is required for the protected modules contained within it each time the original project is opened in Microsoft Project 98 until it is converted and saved. Since the "FileNameMacros" project already exists, Microsoft Project is not able to save the hidden modules to a project with that name. You will need to overwrite the existing "FileNameMacros" project or give it a new name.</p>
<p>
If you save the protected "FileNameMacros" project, a reference to it is added to the converted project that opens it each time the converted project is opened. This enables you to access and use the protected macros. If you are asked for the name of a project in which to store the hidden macros, but do not enter a project name, and the converted project is saved anyway, a reference is not made. In this case, you must specify a reference to that location manually.</p>
<p>
If other (nonhidden) macros or toolbar buttons contain references to macros in formerly hidden modules, they must be changed manually. The reference should be "FileNameMacros!MacroName", where FileName is the name of the project originally containing the hidden module (or the user-supplied replacement to "FileNameMacros") and MacroName is the name of the macro in the formerly hidden module.</p>
<p>
<b>Changes to Microsoft Project 98 VBA</b></p>
<p>
The following sections and tables describe changes to the Microsoft Project 98 VBA object model.</p>
<h3>New Objects, Properties, and Methods</h3>
<p>
Objects that have been added to Microsoft Project 98 VBA are listed in the following table. Properties and methods that have been added to existing objects, or are associated with objects new to Microsoft Project 98, are listed in the VBA Object Browser or VBA Help.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=47%><b>Object</b></td>
<td width=53%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=47%>CostRateTable, CostRateTables</td>
<td width=53%>New multiple pay rate functionality</td>
</tr>
<tr valign=top>
<td width=47%>PayRate, PayRates</td>
<td width=53%>New resource rate table functionality</td>
</tr>
<tr valign=top>
<td width=47%>SplitPart, SplitParts</td>
<td width=53%>New split task functionality</td>
</tr>
<tr valign=top>
<td width=47%>TimeScaleValue, TimeScaleValues</td>
<td width=53%>New timescale data functionality</td>
</tr>
</table><br>
<h3>Hidden Properties and Methods</h3>
<p>
Many of the properties and methods that have been replaced by new functionality in Microsoft Project 98 have been hidden rather than removed. These properties and methods are supported only for backward compatibility; for new code, you should use the replacement functionality provided in Microsoft Project 98. Hidden properties and methods for visible objects are listed in VBA Help.</p>
<h3>Changed Properties and Methods</h3>
<p>
Properties and methods that have been changed for Microsoft Project 98 are listed in the following table. Also listed are any constants, properties, or methods that have been removed. Any code that uses these items may produce errors and should be modified accordingly.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td width=30%><b>Item</b></td>
<td width=26%><b>Object</b></td>
<td width=44%><b>Change</b></td>
</tr>
<tr valign=top>
<td width=30%>ConsolidateProjects method</td>
<td width=26%>Application</td>
<td width=44%>The meaning of <i>NewWindow</i> has changed and <i>PoolResources</i> is ignored.</td>
</tr>
<tr valign=top>
<td width=30%>CreateMSGraph method</td>
<td width=26%>Application</td>
<td width=44%>Removed.</td>
</tr>
<tr valign=top>
<td width=30%>FilterEdit method</td>
<td width=26%>Application</td>
<td width=44%>Inserted <i>Parenthesis</i> into argument list.</td>
</tr>
<tr valign=top>
<td width=30%>HelpMicrosoftNetwork method</td>
<td width=26%>Application</td>
<td width=44%>Removed.</td>
</tr>
<tr valign=top>
<td width=30%>HelpKeywordHelp method</td>
<td width=26%>Application</td>
<td width=44%>Removed.</td>
</tr>
<tr valign=top>
<td width=30%>OptionsView method</td>
<td width=26%>Application</td>
<td width=44%>The <i>DisplayNotesIndicator</i> argument was removed.</td>
</tr>
<tr valign=top>
<td width=30%>EditCopy method</td>
<td width=26%>Application</td>
<td width=44%>All arguments have been removed.</td>
</tr>
<tr valign=top>
<td width=30%>EditUndo method</td>
<td width=26%>Application</td>
<td width=44%>Removed.</td>
</tr>
<tr valign=top>
<td width=30%>EditCopyPicture method</td>
<td width=26%>Application</td>
<td width=44%>The <i>ForPrinter</i> argument has changed from Boolean to Long.</td>
</tr>
<tr valign=top>
<td width=30%>EnableCancelKey property</td>
<td width=26%>Application</td>
<td width=44%>Changed from Boolean to Long.</td>
</tr>
<tr valign=top>
<td width=30%>FilePageSetupFooter method</td>
<td width=26%>Application</td>
<td width=44%>All arguments have been removed.</td>
</tr>
<tr valign=top>
<td width=30%>FilePageSetupFooterText method</td>
<td width=26%>Application</td>
<td width=44%>Removed.</td>
</tr>
<tr valign=top>
<td width=30%>FilePageSetupHeader method</td>
<td width=26%>Application</td>
<td width=44%>All arguments have been removed.</td>
</tr>
<tr valign=top>
<td width=30%>FilePageSetupHeaderText method</td>
<td width=26%>Application</td>
<td width=44%>Removed.</td>
</tr>
<tr valign=top>
<td width=30%>FilePageSetupLegend method</td>
<td width=26%>Application</td>
<td width=44%>The <i>Left</i>, <i>Center</i>, and <i>Right</i> arguments have been removed.</td>
</tr>
<tr valign=top>
<td width=30%>FilePageSetupLegendText method</td>
<td width=26%>Application</td>
<td width=44%>Removed.</td>
</tr>
<tr valign=top>
<td width=30%>LevelingOptions method</td>
<td width=26%>Application</td>
<td width=44%>The <i>RemoveDelay</i> argument has been removed.</td>
</tr>
<tr valign=top>
<td width=30%>OptionsModuleFormat method</td>
<td width=26%>Application</td>
<td width=44%>Removed.</td>
</tr>
<tr valign=top>
<td width=30%>OptionsModuleGeneral method</td>
<td width=26%>Application</td>
<td width=44%>Removed.</td>
</tr>
<tr valign=top>
<td width=30%>OptionsSchedule method</td>
<td width=26%>Application</td>
<td width=44%>The <i>FixedDuration</i> argument (Boolean) has been replaced with <i>TaskType</i> (Long).</td>
</tr>
<tr valign=top>
<td width=30%>OptionsSpelling method</td>
<td width=26%>Application</td>
<td width=44%>The <i>ProjectComments</i> argument has been replaced with <i>AssignNotes</i>.</td>
</tr>
<tr valign=top>
<td width=30%>pjCustomizeToolbars constant</td>
<td width=26%>PjDialog</td>
<td width=44%>Removed.</td>
</tr>
<tr valign=top>
<td width=30%>pjDB3 constant</td>
<td width=26%>PjFileFormat</td>
<td width=44%>Removed.</td>
</tr>
<tr valign=top>
<td width=30%>pjDB4 constant</td>
<td width=26%>PjFileFormat</td>
<td width=44%>Removed.</td>
</tr>
<tr valign=top>
<td width=30%>pjFOX constant</td>
<td width=26%>PjFileFormat</td>
<td width=44%>Removed.</td>
</tr>
<tr valign=top>
<td width=30%>pjModuleEditor constant</td>
<td width=26%>PjViewScreen</td>
<td width=44%>Removed.</td>
</tr>
<tr valign=top>
<td width=30%>pjMPX1 constant</td>
<td width=26%>PjFileFormat</td>
<td width=44%>Removed.</td>
</tr>
<tr valign=top>
<td width=30%>pjMPX3 constant</td>
<td width=26%>PjFileFormat</td>
<td width=44%>Removed.</td>
</tr>
<tr valign=top>
<td width=30%>pjWK1 constant</td>
<td width=26%>PjFileFormat</td>
<td width=44%>Removed.</td>
</tr>
<tr valign=top>
<td width=30%>pjWK3 constant</td>
<td width=26%>PjFileFormat</td>
<td width=44%>Removed.</td>
</tr>
<tr valign=top>
<td width=30%>pjWKS constant</td>
<td width=26%>PjFileFormat</td>
<td width=44%>Removed.</td>
</tr>
<tr valign=top>
<td width=30%>pjUsageProjectFinish constant</td>
<td width=26%>PjGridline</td>
<td width=44%>Removed.</td>
</tr>
<tr valign=top>
<td width=30%>pjUsageProjectStart constant</td>
<td width=26%>PjGridline</td>
<td width=44%>Removed.</td>
</tr>
<tr valign=top>
<td width=30%>ProjectID property</td>
<td width=26%>Assignment</td>
<td width=44%>Removed.</td>
</tr>
<tr valign=top>
<td width=30%>StartWeekOn property</td>
<td width=26%>Application</td>
<td width=44%>Changed from Boolean to Long.</td>
</tr>
<tr valign=top>
<td width=30%>WindowActivate method</td>
<td width=26%>Application</td>
<td width=44%>No longer activates the Customize Toolbars dialog box.</td>
</tr>
</table><br>
<h3>Miscellaneous Changes</h3>
<p>
Extensive changes have been made to the Microsoft Project 98 VBA object model to support new and improved features in the application. Existing macro code may result in errors or other unexpected behavior if it is not adapted to reflect these changes. </p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=37%><b>Change</b></td>
<td width=63%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=37%>Using Tasks.Index and Tasks.Count in consolidated projects</td>
<td width=63%>Returns only those tasks that appear in the master project. To return every task in every subproject, use a <code>For Each  In  Tasks </code>construct.</td>
</tr>
<tr valign=top>
<td width=37%>Using the Count property with ActiveSelection.Resources and ActiveSelection.Tasks</td>
<td width=63%>Includes blank rows in its result. Referencing one of these blank rows returns a Null task in a task view or a Null resource in a resource view.</td>
</tr>
<tr valign=top>
<td width=37%>OutlineParent property</td>
<td width=63%>When used at the top level of a project, now returns a Task object rather than a Project object. </td>
</tr>
<tr valign=top>
<td width=37%>Qualification</td>
<td width=63%>The Top, Width, and Height properties and the DateAdd and DateDifference methods must now be qualified with <code>Application</code>.</td>
</tr>
</table><br>
<p>
<b>New Features of Microsoft Project 98 VBA</b></p>
<p>
The major feature changes made for VBA in Microsoft Project 98 are listed below and are discussed in detail in the following sections.
<ul type=disc>
<li>
<b>Events</b>Provides event-driven programming support for Microsoft Project, replacing the autorun macros.<br><br></li>
<li>
<b>UserForms and ActiveX® controls</b>Provides a consistent and expandable control and dialog box interface in all Microsoft Office applications.<br><br></li>
<li>
<b>CommandBars</b>Provides a consistent and expandable menu and toolbar interface in all Microsoft Office applications.</li>
</ul>
<h3>Events</h3>
<p>
Microsoft Project 98 VBA incorporates a new event-handling model that is common to all Microsoft Office applications. Similar to the event-handling model used by Visual Basic, this event-handling model enables the programmer to write code that is run when some action takes place. In Microsoft Project 98, event procedures can be initiated at the application or project level. </p>
<h4>Microsoft Project object events</h4>
<p>
Microsoft Project events occur when the project changes in some way. The following table describes event procedures available at the project level:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=22%><b>Event Name</b></td>
<td width=78%><b>Occurs</b></td>
</tr>
<tr valign=top>
<td width=22%>Activate</td>
<td width=78%>when switching to the project from another project</td>
</tr>
<tr valign=top>
<td width=22%>BeforeClose</td>
<td width=78%>before the project closes</td>
</tr>
<tr valign=top>
<td width=22%>BeforePrint</td>
<td width=78%>before the project is printed or previewed</td>
</tr>
<tr valign=top>
<td width=22%>BeforeSave</td>
<td width=78%>before the project is saved</td>
</tr>
<tr valign=top>
<td width=22%>Calculate</td>
<td width=78%>after the project is calculated</td>
</tr>
<tr valign=top>
<td width=22%>Change</td>
<td width=78%>when a change is made to data in the project</td>
</tr>
<tr valign=top>
<td width=22%>Deactivate</td>
<td width=78%>when switching from the project to another project</td>
</tr>
<tr valign=top>
<td width=22%>Open</td>
<td width=78%>when the project opens, but before the Activate event</td>
</tr>
</table><br>
<h4>Application object events</h4>
<p>
Application events occur when a project is created. To write event procedures for the Application object, you must create a new class module and declare the object of type Application with events. New application objects appear in the <b>Object</b> drop-down list box in the class module.</p>
<p>
The NewProject event is a predefined Application object event that occurs when a new project is created and is analogous to the Microsoft Project object Open event described above.</p>
<h3>UserForms</h3>
<p>
The new UserForm object enables you to add custom windows and dialog boxes to an application's user interface. Because UserForm is an Object data type, you can declare variables as type UserForm before setting them to an instance of a type of UserForm declared at design time. Similarly, you can pass an argument to a procedure as type UserForm, and you can create multiple instances of UserForms in code. UserForms can respond to events initiated by a user or triggered by the system. For example, you can write code in a UserForm's Initialize event procedure to initialize module-level variables before the UserForm is displayed. You can also use methods to manipulate UserForms in code.</p>
<h3>ActiveX Controls</h3>
<p>
Support for ActiveX controls in the Microsoft Project 98 VBA expands the number and type of controls available and allows you to use controls common to the other Microsoft Office applications in your Microsoft Project 98 Visual Basic applications. In addition, you can write custom ActiveX controls or incorporate custom controls from third-party vendors. </p>
<h3>CommandBars</h3>
<p>
The Microsoft Project 98 VBA adds programmatic support for Microsoft Office toolbars, menu bars, and shortcut menus as CommandBar objects. You can modify any built-in menu bar or toolbar, and you can create and modify custom toolbars, menu bars, and shortcut menus that are a part of your Visual Basic application. Your application features are presented as individual buttons on toolbars or as groups of command names on menus. Because toolbars and menus are both command bars, they use the same kind of controls.</p>
<p>
The built-in command bar controls in container applications are also represented in Visual Basic by CommandBar objects. You can modify the location and appearance of built-in controls, or you can assign a custom macro to any built-in control to completely replace its built-in behavior.</p>
<p>
<i>The information contained in this document represents the current view of Microsoft Corporation on the issues discussed as of the date of publication. Because Microsoft must respond to changing market conditions, it should not be interpreted to be a commitment on the part of Microsoft, and Microsoft cannot guarantee the accuracy of any information presented after the date of publication.</i></p>
<p>
<i>This document is for informational purposes only. MICROSOFT MAKES NO WARRANTIES, EXPRESS OR IMPLIED, IN THIS DOCUMENT.</i></p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Windows Interface Source Environment (WISE)</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>
<h1>Windows Interface Source Environment (WISE)</h1>
<p>
Ramesh Parameswaran</p>
<p>
January 1995</p>
<p>
<i>For more information on WISE/UNIX, contact Ramesh Parameswaran at (206) 936-2154.<br>
For more information on WISE/Macintosh, contact Bart Wojciehowski at (206) 936-5278.</i></p>
<h2>Overview</h2>
<p>
The Microsoft® Windows® Interface Source Environment, known simply as "WISE," is a licensing program from Microsoft to enable customers to integrate Windows-based solutions with UNIX® and Macintosh® systems. If you are developing applications simultaneously for the Windows operating system family, UNIX, and Macintosh platforms, WISE software development kits (WISE SDKs) will help make your job easier by significantly reducing development and maintenance time. WISE SDKs remove the need for developers to learn multiple application program interfaces (APIs). With WISE SDKs, developers can write for a standard, consistent, and well-documented set of APIs and leverage their solution for the Windows family, UNIX, and Macintosh platforms.</p>
<p>
WISE emulators run existing Windows-based applications unmodified on UNIX and Macintosh systems. WISE emulators make thousands of Windows-based applications available to users on UNIX and Macintosh systems. With WISE emulators, users can purchase inexpensive Windows-based applications off the shelf and use them on UNIX and Macintosh systems.</p>
<p>
WISE SDKs leverage a developer's knowledge of Windows for UNIX and Macintosh platforms. WISE emulators maximize investments in inexpensive, shrink-wrapped Windows-based applications for UNIX and Macintosh systems. WISE helps MIS managers reduce costs for software development, maintenance, and training.</p>
<h2>The WISE Solution: Compatibility with Macintosh and UNIX Systems</h2>
<p>
Users on UNIX systems who need applications such as word processors and spreadsheets either buy expensive UNIX applications or a PC and PC-based applications. Users who buy a UNIX application are restricted to using the application only for that particular UNIX system. Users cannot change over to another UNIX system of their choice and still use the same application they bought earlier.</p>
<p>
Independent software vendors (ISVs) of Windows-based applications do not readily port their applications to Macintosh and UNIX systems because of the huge differences between Windows and the other systems. ISVs selling native UNIX applications have the burden of writing to operating system APIs differing from one UNIX system to another. In addition, the binaries of the applications written for one vendor's UNIX system are not portable to another vendor's UNIX system.</p>
<p>
Corporations typically use a wide variety of platforms and therefore need applications to run on multiple platforms. Corporate developers in such a multiplatform environment either develop applications separately for each platform or develop applications for one platform and manually port the applications to the other platforms. Such developers have to be concerned with the differences between the Windows, Macintosh, and UNIX operating systems as well as the differences between the several UNIX systems themselves. </p>
<h3>Using Windows-Based Applications</h3>
<p>
Previously, developers resorted to the complex task of manually porting applications to enable users to use the same application on different platforms. With an increasing number of users needing access to a wide variety of platforms and applications, there is an increasing demand for a way to run applications on multiple platforms easily and enable users to choose applications independent of platforms. The increasing pressure in corporations to control costs further accelerates the demand for compatible applications. The availability of more than 10,000 high-quality, inexpensive, shrink-wrapped Windows-based applications makes them popular applications among users.</p>
<h3>Writing to Windows APIs</h3>
<p>
The lack of a consistent set of APIs among the different versions of UNIX systems makes it difficult for developers to write to UNIX APIs. The Windows family provides developers with a standard and consistent set of APIs. Developers get access to technologies such as OLE object technology when they use the Windows family of products.</p>
<h2>What Is WISE?</h2>
<p>
The Windows Interface Source Environment (WISE) is a licensing program from Microsoft to enable customers to integrate Windows-based solutions with UNIX and Macintosh systems. Microsoft has licensed the Windows family source code to Mainsoft Corporation, Bristol Technology Inc., Insignia Solutions Inc., and Locus Computing Corporation. Using the products being developed by Mainsoft and Bristol, developers will be able to write to the Win32® API and OLE on different UNIX platforms. Insignia Solutions provides a product that enables shrink-wrapped Windows-based applications to run on Macintosh and non-Intel®-based UNIX systems. Locus provides a product that enables shrink-wrapped Windows-based applications to run on Intel based UNIX systems.</p>
<p>
WISE SDKs enable developers to write to Windows APIs and use the resulting applications on Macintosh and various UNIX systems. To get a Windows-based application running on a Macintosh or UNIX system using a WISE SDK, the application <i>source code</i> must be recompiled on those systems.</p>
<p>
WISE emulators enable users to run inexpensive, shrink-wrapped Windows-based applications unmodified on UNIX and Macintosh systems. WISE emulators make more than 10,000 off-the-shelf, Windows-based applications available to users on UNIX and Macintosh systems and can increase the users' productivity. WISE emulators run <i>binaries</i> of Windows-based applications on Macintosh and UNIX systems and therefore do not require the source code of applications to be recompiled.</p>
<p class=label>
<b>Figure 1. WISE provides open, cross-platform flexibility.</b></p>
<p>
Benefits of WISE:
<ul type=disc>
<li>
Users can buy <i>inexpensive</i> shrink-wrapped software off the shelf and use it on UNIX and Macintosh systems.<br><br></li>
<li>
Users have a wider choice of software on different platforms; developers have a larger market.<br><br></li>
<li>
Developers write to a <i>standard, consistent </i>and<i> well-documented</i> set of APIs and leverage their solution across the Windows family, UNIX, and Macintosh platforms. <br><br></li>
<li>
Developers build and maintain a single code base for all platforms and can use tools provided by WISE SDKs to easily port existing Windows-based applications to UNIX and Macintosh systems.<br><br></li>
<li>
Corporate purchasing can set cross-platform standards based upon Windows-based applications, thereby reducing support headaches while increasing purchasing power.</li>
</ul>
<h3>What's in a WISE SDK?</h3>
<p>
A WISE SDK is an implementation of Windows APIs on Macintosh or UNIX APIs. Developers can write a Windows-based application on a Macintosh or UNIX system and compile and run it using a WISE SDK. WISE SDKs are available on Macintosh or UNIX systems. A WISE SDK consists of tools to port code from a PC and libraries to compile Windows code on the Macintosh or UNIX system.</p>
<h3>What's in a WISE Emulator?</h3>
<p>
WISE emulators enable Windows-based applications to run on Macintosh systems and on a wide variety of UNIX systems such as Solaris, SCO® Open Desktop®, and HP-UX®. If users primarily work on a Macintosh or UNIX system and need other applications such as editors, spreadsheets, personal organizers, and so on, they can buy Windows-based applications off the shelf and use a WISE emulator to run the applications on the Macintosh or UNIX system.</p>
<p>
A WISE emulator uses the Windows-based application when the application is running and translates requests from the application into requests understood by the host Macintosh or UNIX system. If the host system's processor is not an Intel <i>x</i>86 processor, the emulator translates the application's instructions (which are <i>x</i>86 instructions) into the host processor's instructions. Because of the translation of instructions while the application is running, the application will run more slowly than native Macintosh and UNIX applications on the host system.</p>
<h3>Choosing Between WISE SDKs and WISE Emulators</h3>
<p>
WISE emulators should be used when Windows-based commercial off-the-table software (COTS) is needed on UNIX and Macintosh systems. If good performance is required on the UNIX or Macintosh system, WISE SDKs must be used to enable the Windows-based application to run on the UNIX or Macintosh system.</p>
<p>
When WISE emulators are used to run a Windows-based application on UNIX or Macintosh systems, access to the source code of the application is not required. Developers using WISE SDKs require access to the Windows-based application source code and must recompile the code on the Macintosh or UNIX system. An application that is run on a Macintosh or UNIX system using a WISE emulator will run more slowly than when ported over using a WISE SDK.</p>
<h2>How MIS Managers Benefit Using WISE</h2>
<p>
MIS departments in corporations typically use a wide variety of platforms and therefore need applications that run on several platforms. With pressure to cut costs, MIS managers are increasingly faced with the need to provide more functionality to their clients at lower costs. The trend towards downsizing to new client/server systems and the costs associated with that make it difficult for MIS managers to work with the existing resources. Changes in technology are invariably accompanied by increased training costs and questions from end-users. MIS managers can use WISE to ease the transition to open systems and efficiently manage the systems in their organization. WISE provides the following benefits:
<ul type=disc>
<li>
<b>Compatibility.</b> Because emulator products based on WISE technology use Windows source code licensed from Microsoft, they provide maximum compatibility with the many thousands of shrink-wrapped Windows-based applications on the market. WISE emulators create a PC-like environment atop Macintosh and UNIX systems, on a variety of microprocessor architectures. Use of WISE SDKs enables corporate developers to leverage their knowledge of Windows APIs, making it possible to develop a single solution capable of spanning hardware platforms, with minimal incremental effort.<br><br></li>
<li>
<b>Consistency.</b> Corporate standards committees can choose what they consider to be the best, lowest-cost productivity tools from among thousands of options to maximize their employees' productivity. End users who need to use existing Macintosh and UNIX solutions can now concurrently use company-standard, Windows-based applications to simplify their jobs. For example, these users can extract data from a back-end UNIX system accounting package and analyze the data with familiar Windows productivity tools. The resulting data can be transformed into special reports distributed within the company or linked into other specialized, back-end UNIX applications. Because the Windows APIs are universally available and consistent, MIS managers can spend less money on training, development, test, and support of applications.<br><br></li>
<li>
<b>Confidence.</b> Companies can adopt a solution that will evolve along with future versions of the Windows family, taking full advantage of evolving 32-bit technology. Microsoft is committed to providing WISE licensees with future versions of Windows family source code, thereby continuing to maximize application compatibility and performance for today's and tomorrow's applications. Customers can be confident that their investments today will continue to realize benefits well into the future.</li>
</ul>
<h3>WISE Is Open</h3>
<p>
A open system must facilitate <i>compatibility</i> among the products of several vendors. Software systems compatible at the source level permit applications to be recompiled and run natively on a wide variety of platforms. Software systems compatible at a binary level can run out-of-the-box applications on other hardware platforms. WISE SDKs provide compatibility at the source level, and WISE emulators provide compatibility at the binary level.</p>
<h3>Reducing Client/Server Migration Costs</h3>
<p>
While downsizing to a client/server system, MISs will typically migrate mainframe applications to a mix of heterogeneous systems. This requires expertise in all of the targeted platforms and the extra work of porting the same mainframe application to multiple client platforms. With WISE, MIS professionals can migrate mainframe software once to Windows and use WISE to run the migrated software on UNIX and Macintosh systems. In addition, MISs can choose the target platforms for migration independent of the issues involved in software migration. For instance, an MIS team without much UNIX system expertise can choose to downsize to UNIX platforms by downsizing software to Windows and using WISE to run the software on the UNIX platforms.</p>
<h3>Reducing Training Costs</h3>
<p>
Using WISE, MIS can reduce training costs for MIS professionals. MIS professionals need to be trained only in Windows, and they can leverage their Windows training for Macintosh and UNIX systems. Because users need not learn to use different technologies, they will need less help from MISs in day-to-day activities. MIS management can thus reduce the number of help requests from users to the MIS helpdesk.</p>
<h3>Reducing Product Cycle Time and Software Maintenance Costs</h3>
<p>
Using WISE SDKs, MIS departments can easily develop and maintain applications simultaneously for Windows, Macintosh, and UNIX platforms. Developers write only to Windows APIs and use the applications on Windows, Macintosh, and UNIX systems. MIS developers need to maintain only one code base for an application running on Windows, Macintosh, and UNIX platforms. Thus, MIS managers reduce product cycle time and maintenance costs for such multiplatform application development.</p>
<h3>Reducing Software and Hardware Costs</h3>
<p>
The cost of personal productivity applications is kept to a minimum because of the availability of inexpensive Windows-based applications. Several MIS professionals use UNIX systems for running some applications and PCs for personal productivity applications. Such users can use WISE emulators to run the personal productivity applications on their UNIX systems. WISE thus eliminates the need for extra PCs used in this manner.</p>
<h3>Making Communication Easier</h3>
<p>
MIS professionals can use the same applications used by senior management and the sales force, even though MISs may be working on different platforms. This helps in easier communication of information between MISs, senior management, and the sales force. For instance, MISs can download data from a database onto a UNIX workstation, read the data into an application such as Microsoft Excel running on a UNIX system, embed the Microsoft Excel spreadsheet into a Microsoft Word document using OLE, and send the data to the sales force in a presentable form. Because the sales force can use similar applications, they can easily access this information and increase their productivity.</p>
<p>
This integration between MISs and other groups in a company is brought about by the ability to run similar applications on several different platforms.</p>
<h3>Choosing Applications from Several Vendors</h3>
<p>
MIS professionals can choose from more than 10,000 Windows applications offered by a large number of vendors. They can run these easy-to-use applications on Windows, Macintosh, and several UNIX systems and increase their productivity.</p>
<h2>Developing Solutions for UNIX Systems with WISE</h2>
<p>
Programmers developing simultaneously for Windows and UNIX systems can write to the Windows API and use the Windows SDK on the PC and the WISE SDK on the UNIX system. Admittedly, more programming discipline is required for such simultaneous development, but developers get the tremendous benefit of developing and maintaining only one code base. While writing code, it is important not to write code that is specific to a platform or a compiler. Because the underlying architecture of Windows and UNIX systems is different, code that uses features specific to one of the systems will not be adaptable to the other system.</p>
<h3>Platform Differences</h3>
<p>
Source code of existing Windows-based applications is likely to contain platform-specific features that differ from those on UNIX systems, for example:
<ul type=disc>
<li>
Code that uses the segmented memory architecture of Windows 3.1 will not run on UNIX systems because UNIX systems have a flat memory model. <br><br></li>
<li>
Any MS-DOS® or BIOS calls in PC source code will not compile on the UNIX system.<br><br></li>
<li>
Files generated by an application on one system will not be compatible with the other system.<br><br></li>
<li>
Source code that explicitly uses path names or filenames is platform-dependent. A UNIX filename is case-sensitive and can be long, while a Windows filename is not. The filename separator in a path name is "/" on UNIX systems and "\" on Windows-based systems.<br><br></li>
<li>
Structure definitions that are not aligned on the appropriate byte boundary may not work on some systems.<br><br></li>
<li>
Code that uses knowledge of the size of variables will fail because the sizes may be different on the systems. For example, NEAR pointers on Windows 3.1 are 2 bytes long, and these will compile to be 4 bytes on UNIX systems.</li>
</ul>
<p>
Several potential problems can be identified by compiling sources using the compiler's highest warning level and writing prototypes for all functions. By writing safe code, developers can easily adapt the application to UNIX systems.</p>
<h3>Architectural Differences</h3>
<p>
Windows-based applications may need to be <i>re-architected</i> before they can be ported to UNIX systems because of differences in the basic architecture of Windows and the X Window System. For example: 
<ul type=disc>
<li>
UNIX systems provide <i>preemptive multitasking</i> but Windows 3.1 does not. Applications running on Windows 3.1 can safely assume that they have control over the CPU outside of the message loop and can access shared files without locking them. When the same application is ported over to a UNIX system, there may be problems because of the preemptive multitasking of UNIX systems. The application may be time-sliced when it is in the middle of an operation on a shared file, and another application may then access the shared file, which may be in an inconsistent state. <br><br></li>
<li>
The data segment of dynamic-link libraries (DLLs) on UNIX systems is not shared. Windows-based applications that rely on the <i>shared data segment</i> feature of DLLs to share data between different applications using the same DLL must be re-architected when being ported to UNIX systems.<br><br></li>
<li>
The X Window System is distributed and an action that a user performs may result in events being posted to the application later than is the case on Windows. A Windows-based application that assumes instantaneous transmission of actions to the application may fail on an X Window System.</li>
</ul>
<p>
A WISE SDK provides developers with Windows libraries and tools to port Windows-based applications to UNIX systems. A WISE SDK provides the following: source code preprocessor, makefile generator, Windows libraries, resource compiler, MFC for UNIX, and online help.</p>
<h4>Source code preprocessor</h4>
<p>
The source code preprocessor changes PC source code to make it compatible with a UNIX system. Windows uses "\" as a filename separator in a path, while the UNIX operating system uses "/". The source code preprocessor changes separators in a path name from \ to /. Files on Windows have two characters to separate lines (the end-of-line and the control-feed characters), while UNIX files use only the end-of-line character. The preprocessor goes through the PC source code files and removes the extra character from each line to make the file compatible with a UNIX system.</p>
<h4>Makefile generator</h4>
<p>
If a software project has several files and dependencies between files, a makefile will automate the building process. If you modify a file that several other source code files depend on, the make utility will ensure that all the dependent files are recompiled. Typically, a developer would write a makefile manually, but the makefile generator automatically generates a makefile.</p>
<h4>Windows libraries</h4>
<p>
Applications call Windows APIs implemented by the Windows libraries. The WISE SDK implements Windows APIs using X Window System and UNIX system functions. X Window System functions can be either low level window creation and manipulation functions (Xlib functions) or high-level toolkit functions (such as Motif), which provide easy-to-call functions for creating objects such as menus, dialog boxes, pushbuttons, and so on. The Motif functions are built on Xlib functions and provide the Motif interface to a user.</p>
<p>
<img src="wise_1.gif" border=0></p>
<p class=label>
<b>Figure 2. X Window System architecture</b></p>
<p>
WISE SDKs offer developers a choice of enabling the resulting application to have a Windows interface or a Motif interface. If developers choose to have a Motif interface for their application, the libraries they need to use will be those that implement Windows APIs using Motif.</p>
<p>
<img src="wise_2.gif" border=0></p>
<p class=label>
<b>Figure 3. (A) Windows SDK on a PC running Windows. (B) WISE SDK on Xlib: Resulting application has a Windows interface. (C) WISE SDK on Motif: Resulting application has a Motif interface.</b></p>
<h4>Resource compiler</h4>
<p>
Developers can use the resource compiler to compile Windows resources used by their applications. If a Windows-based application uses menus, dialog boxes, icons, cursors, strings or bitmaps, it will have a resource script file that specifies details of these and other associated files that store a graphic description of objects such as cursors, bitmaps, or icons. After you transfer these files to the UNIX system, you can use the resource compiler to compile these and generate the resource file. The final UNIX application will use this resource file.</p>
<h4>Microsoft Foundation Classes (MFC) for UNIX</h4>
<p>
MFC for the Windows platform makes it easier for developers to write event-based code and spend less time on mundane work. WISE SDKs offer MFC on UNIX systems, and developers on UNIX systems can increase their efficiency by using MFC.</p>
<h4>Online help</h4>
<p>
Programmers can port rich text format files and help instructions from a PC and use the WISE SDK help compiler to compile these and generate a help file on a UNIX system. The help engine displays the help file to a user. Applications can use the help engine to display help to users.</p>
<h2>How WISE Benefits Users</h2>
<p>
With the increasingly large number of inexpensive shrink-wrapped applications available for Windows, users of UNIX and Macintosh systems can save money and increase productivity by using these applications. WISE emulators provide users with a way to use these inexpensive applications on UNIX and Macintosh systems. Users can buy applications independent of platforms and can save money by choosing inexpensive applications and standardizing across platforms.</p>
<h3>Information at Your Fingertips</h3>
<p>
Users working on UNIX workstations often need to access data from corporate databases, organize the data, generate reports, and send the data to other people in the organization. In the past, users would first download the data to the UNIX system and either get a printout of it and pass it on to others or copy it over to a PC using some networking software. The user would then read the data into an application such as Microsoft Excel and send the data over to other users. With WISE on the UNIX system, users can download the data, run an application such as Microsoft Excel on the UNIX system itself, and read in the data. Applications like Microsoft Word can embed the Microsoft Excel spreadsheet using OLE and make the data more presentable to others. Users can run a Windows-based mail application on the UNIX system using WISE and send the data over to other users.</p>
<p>
Similarly, clients of an MIS department can now easily communicate data to the MIS department independent of the platforms used by MIS. The key to this easy information exchange is that the applications used by everyone are similarly independent of the platform used to run the applications.</p>
<h2>Current Status</h2>
<h3>WISE SDKs</h3>
<h4>MAINWin</h4>
<p>
MAINWin from Mainsoft implements the Windows APIs on UNIX systems and provides tools for migrating PC source code to the UNIX systems. MAINWin runs on the following platforms:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=47%>Sun® SPARC</td>
<td width=53%>Solaris 2.3 or later X11 R5</td>
</tr>
<tr valign=top>
<td width=47%>Sun SPARC</td>
<td width=53%>SunOS 4.1 or later X11 R5</td>
</tr>
<tr valign=top>
<td width=47%>HP® 700</td>
<td width=53%>HP-UX® 9.0 or later X11 R5</td>
</tr>
<tr valign=top>
<td width=47%>IBM® RISC System/6000</td>
<td width=53%>AIX® 3.25 or later X11 R5</td>
</tr>
<tr valign=top>
<td width=47%>Silicon Graphics®</td>
<td width=53%>IRIX 5.1 or later X11 R5</td>
</tr>
</table><br>
<p>
Customers have the option of running Windows-based applications on the UNIX systems and having either a Windows interface or a Motif interface.</p>
<p>
MAINWin provides an implementation of MFC on the SunOS, Solaris and HP-UX platforms. Customers can transfer Windows resource scripts and resources and use MAINWin's resource compiler. MAINWin provides a help compiler to compile rich text format files and a help engine to display help files. OLE support will be available in future.</p>
<p>
For further information contact Mainsoft Corporation at (800) MAINWIN.</p>
<h4>Wind/U</h4>
<p>
Wind/U from Bristol is a WISE SDK that runs on the following platforms:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=28%>Sun SPARC</td>
<td width=72%>Solaris 1 (SunOS 4.1.3) X11 R5/Motif 1.2</td>
</tr>
<tr valign=top>
<td width=28%>Sun SPARC </td>
<td width=72%>Solaris 2.2 (SunOS 5.2) X11 R5/Motif 1.2</td>
</tr>
<tr valign=top>
<td width=28%>HP 700</td>
<td width=72%>HP-UX 8.0 X11 R4/Motif 1.1</td>
</tr>
<tr valign=top>
<td width=28%>HP 700</td>
<td width=72%>HP-UX 9.0 X11 R5/Motif 1.2</td>
</tr>
<tr valign=top>
<td width=28%>IBM RS 6000</td>
<td width=72%>AIX 3.2 X11/R4/Motif 1.1</td>
</tr>
<tr valign=top>
<td width=28%>Intel x86</td>
<td width=72%>SVR4 X11 R4/Motif 1.1</td>
</tr>
</table><br>
<p>
Unlike MAINWin, Wind/U runs on top of Motif and provides customers with a Motif interface. Wind/U provides a resource compiler, HyperHelp (a help engine that allows users to maintain the same help files for both the Windows and UNIX platforms) and Xprinter (a PostScript® and PCL® printer library with a common graphics programming interface). OLE support will be available in future.</p>
<p>
For further information, contact Bristol Technology Inc. at (203) 438-6969.</p>
<p>
Both Mainsoft and Bristol will provide Win32 API support on UNIX platforms in the future. Microsoft provides the Win32 APIs on the Macintosh through the Visual C++ development system.</p>
<h3>WISE Emulators</h3>
<h4>Softwindows</h4>
<p>
Softwindows from Insignia emulates most Windows-based applications that run on the following platforms:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=42%>Hewlett-Packard® PA RISC </td>
<td width=58%>HP-UX 9.0+</td>
</tr>
<tr valign=top>
<td width=42%>Sun SPARC</td>
<td width=58%>Solaris 2.x+, SunOS 4.1+ or Solaris 1.x </td>
</tr>
<tr valign=top>
<td width=42%>IBM RS/6000</td>
<td width=58%>AIX 3.2.4+ </td>
</tr>
<tr valign=top>
<td width=42%>IBM PowerPC</td>
<td width=58%>AIX 3.2.5+ </td>
</tr>
<tr valign=top>
<td width=42%>DEC® Alpha AXP</td>
<td width=58%>OSF for DEC Alpha AXP </td>
</tr>
<tr valign=top>
<td width=42%>Silicon Graphics</td>
<td width=58%>IRIX 4.0.5 or IRIX 5.1</td>
</tr>
</table><br>
<p>
For more information, contact Insignia Solutions at (508) 682-7600.</p>
<h4>Merge</h4>
<p>
Merge from Locus runs on Intel-based (80386 and above) UNIX systems and emulates Windows applications on the following platforms:</p>
<table border=1 cellpadding=5 cols=1 frame=below rules=rows>
<tr valign=top>
<td width=100%>SCO UNIX </td>
</tr>
<tr valign=top>
<td width=100%>UNIXWare </td>
</tr>
<tr valign=top>
<td width=100%>Solaris </td>
</tr>
<tr valign=top>
<td width=100%>UNIX implementations from Unisys® Esix, Argus, and Dell®</td>
</tr>
</table><br>
<p>
For more information contact Locus Computing Corporation at (310) 670-6500.</p>
<p>
Both Insignia and Locus are working on providing Win32 emulation.</p>
</BODY>
</HTML>

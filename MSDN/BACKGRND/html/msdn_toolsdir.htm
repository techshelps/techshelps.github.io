<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>New Tools in Visual Basic 5.0</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_toolsdir"></a>New Tools in Visual Basic 5.0</h1>
<p>
Chris Dias<br>
Microsoft Corporation</p>
<h2>New and Updated Tools</h2>
<p>
There are many new tools in Microsoft® Visual Basic® version 5.0, as well as many updated tools that were found in Visual Basic 4.0. This paper describes both the tools installed with the core product, as well as the tools found only in the \Tools directory, which are not installed by the Visual Basic Setup program</p>
<p>
The goal here is to provide the audience with an overview of the vast array of tools available to the Visual Basic programmer and to explore some of the less obvious areas of the Visual Basic CD.</p>
<p>
The following list highlights most of the new and/or updated Tools shipping with Visual Basic 5.0.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=46%>Application Performance Explorer</td>
<td width=54%>TSQL Server-Side Setup</td>
</tr>
<tr valign=top>
<td width=46%>RAC Manager</td>
<td width=54%>Help Compiler Workshop</td>
</tr>
<tr valign=top>
<td width=46%>Visual Database Tools</td>
<td width=54%>Sample Code</td>
</tr>
<tr valign=top>
<td width=46%>API Viewer</td>
<td width=54%>Template Manager</td>
</tr>
<tr valign=top>
<td width=46%>Setup Toolkit</td>
<td width=54%>Dialog Objects</td>
</tr>
<tr valign=top>
<td width=46%>Service Packs</td>
<td width=54%>Mastering Series Demo</td>
</tr>
<tr valign=top>
<td width=46%>Documentation</td>
<td width=54%>OleView and SpyXX</td>
</tr>
<tr valign=top>
<td width=46%>Internet Tools</td>
<td width=54%></td>
</tr>
</table><br>
<h2>Enterprise Tools</h2>
<p>
Enterprise Tools are provided only in the Enterprise Edition of Visual Basic 5.0. They are specifically designed to enhance various client/server features. </p>
<h3>Application Performance Explorer</h3>
<p>
The Application Performance Explorer (APE) is a software utility written in Microsoft Visual Basic to aid in the design, deployment planning, and performance-tuning of distributed client/server applications. It allows you to easily run automated "what-if" tests to profile the performance of a multi-tier application in different network topologies, taking into consideration such factors as network bandwidth, request frequency, data transfer requirements, server capacity, and so on. </p>
<p>
In addition, APE is itself an example of a well-designed distributed application. Its Visual Basic source code is well commented and structured to serve as a "template" for component-based client/server applications. This source code can easily be used as the starting point for a custom multi-tier solution.</p>
<p>
APE can be found in the \VB\CliSvr directory and is optionally installed with the other Enterprise features of Visual Basic 5.0. All of the source code for APE can be found in the \VB\Samples\Entrpris\APE directory. Finally, to assist in distributing APE, component setups can be found in the \Tools\APERedis directory. These setups were produced using the Visual Basic 5.0 Setup Wizard. </p>
<h3>Connection Manager</h3>
<p>
The Connection Manager, also known as the Remote Automation Connection Manager (RacMan), has been updated for Visual Basic 5.0 to support Distributed COM (DCOM). RacMan is a tool for controlling the registration of ActiveX™ components. You can toggle between Local and Remote components, and specify whether to use Remote Automation or DCOM.</p>
<p>
RacMan can be found in the \VB\CliSvr directory and is optionally installed with the other Enterprise features. It can be accessed from the <b>Start</b> menu under the Visual Basic program group.</p>
<h3>T-SQL Debugger</h3>
<p>
The Transact SQL Debugger is a new feature in Visual Basic 5.0. This tool provides the means for interactively debugging Stored Procedures on Microsoft SQL Server 6.5. Debugging Stored Procedures has traditionally been a labor-intensive process, requiring the use of traditional debugging techniques due to the lack of interaction available with a Stored Procedure. With the T-SQL Debugger, you can step through your code, set breakpoints, and view the call stack, as well as local and global variables, just as you debug Visual Basic code today!</p>
<p>
As noted above, T-SQL Debugging is only available with Microsoft SQL Server 6.5 <i>with Service Pack 1 or greater.</i> Therefore, Service Pack 2 is provided in the \Tools\TSQL directory. Service Pack 2 is an “all inclusive” service pack, meaning that it includes all of the fixes found in Service Pack 1.</p>
<p>
In addition to the Service Pack, T-SQL Debugging requires additional setup on the server machine in order to facilitate communication between it and the client machine on which you are debugging the stored procedures. (The connection is actually performed through Remote Automation.) Server-side setup for T-SQL Debugging can be found in the \Tools\TSQL directory as well. </p>
<h3>Visual Database Tools </h3>
<p>
Visual Database Tools is a collection of four components that provide the means for graphically interacting with your ODBC data source.</p>
<p>
You can access the Visual Database Tools from within the Visual Basic environment to help create and manage data-driven applications that rely on live connections to databases. The Query Designer enables you to use visual tools to build SQL statements that retrieve data or modify the contents of tables. The Database Designer graphically represents tables and their relationships and enables you to create and modify the database objects that your application relies on. All this can be done while you're connected to the underlying database. Thus, you can design, query, and populate your databases from within the design environment that you use to build your application.</p>
<p>
By default, Visual Basic Enterprise Edition installs Microsoft Query to support graphically designing queries while using the Connection Query Designer. After installing Visual Database Tools, Microsoft Query is automatically replaced by the Query Designer.</p>
<p>
In addition, you can access Visual Database Tools as an add-in. Click <b>Add-Ins</b> from the A<b>dd-In Manager</b> menu and choose <b>Microsoft Data Tools</b>.</p>
<p>
Setup for Microsoft Visual Database Tools can be found in the \Tools\DataTool directory.</p>
<h3>Utilities</h3>
<h4>License Package Authoring Tool (LPK Tool)</h4>
<p>
The LPK tool creates license files for all controls on your Web page that require a design-time license to display properly. The LPK tool creates a .LPK file that resides on the Web server and is referenced through an Object tag in your HTML. The .LPK file is never downloaded; Internet Explorer simply references this file for the proper license keys when instantiating controls on a page.</p>
<p>
When creating an Internet component download using the Setup Wizard, the Wizard creates a sample HTML page that shows you how to reference the control or ActiveX Document. Included within the HTML is a comment that shows how to use the LPK Object tag if required:</p>
<pre><code>&lt;!-If any of the controls on this page require licensing, you must create a license package file. Run LPK_TOOL.EXE t create the required LPK file. LPK_TOOL.EXE can be found on the ActiveX SDK, http://www.microsoft.com/intdev/sdk/sdk.htm. If you have the Visual Basic 5.0 CD, it can also be found in the \Tools\LPK_TOOL directory.
The following is an example of the Object tag:

&lt;OBJECT CLASSID="clsid:5220cb21-c88d-11cf-b347-00aa00a28331"&gt;
   &lt;PARAM NAME="LPKPath" VALUE="LPKfilename.LPK"&gt;
&lt;/OBJECT&gt;
--&gt;
</code></pre>
<p>
For more information on license package files, please refer to the ActiveX Software Development Kit (SDK).</p>
<h4>Image Editor</h4>
<p>
The Image Editor is a useful tool for creating bitmaps, icons, and cursors. Image Editor is actually a Win32® sample application compiled and distributed with Visual Basic (which means the source code is available in such places as the MSDN Library).</p>
<p>
To install the Image Editor, simply copy the contents of the \Tools\ImagEdit directory to your \Windows directory and run ImagEdit.Exe. A complete Help file is included with this utility.</p>
<p class=indent>
<B><b>Tip&nbsp;&nbsp;&nbsp;</b></B>If you create a bitmap in Visual Basic using the <b>SavePicture</b> method and attempt to open it in ImagEdit, you may receive an error “XYZ.Bmp is not a valid 3.0-format bitmap file”. The image is actually the correct format; ImagEdit does not support images greater than 255x255 or greater than 16 colors. The error message is misleading; simply use the standard Windows® Paint program to open such an image.</p>
<h3>Help Compiler Workshop</h3>
<p>
Help Workshop is a program that you use to create Help (.hlp) files, edit project and contents files, and test and report on Help files. Help Workshop takes the information in the project (.hpj) file to combine the topic (.rtf) files, bitmaps, and other sources into one Help file that can be viewed using the Microsoft Windows Help program.</p>
<p>
The Help Workshop has been updated in Visual Basic 5.0 to support Microsoft Word 97 format .RTF files.</p>
<p>
Run Setup.exe from the \Tools\HCW directory and the Help Compiler Workshop will be installed to your computer.</p>
<h3>Registration Utilities</h3>
<p>
The \Tools\RegUtils directory contains three tools for registering in-process ActiveX servers. In-process servers are ActiveX dynamic-link libraries (DLLs) or ActiveX controls.</p>
<h4>REGSVR32.EXE</h4>
<p>
RegServer is a Windows-based program that allows you to register and unregister in-process servers. REGSRVR32.EXE will display dialog boxes indicating whether it was successful unless you use the silent option “/s”. </p>
<p>
To register a server, use the following format: </p>
<pre><code>REGSVR32.EXE MyServer.dll 
</code></pre>
<p>
To unregister a server, use the /u option in the following format: </p>
<pre><code>REGSVR32.EXE /u MyServer.dll
</code></pre>
<h4>REGOCX32.EXE</h4>
<p>
RegOCX is a Windows-based program specifically designed for use by Setup programs when installing OCXs, since REGOCX32.EXE does not display confirmation dialogs. To register an OCX you use the following format: </p>
<p>
<code>REGOCX32.EXE MyCtrl.ocx</code></p>
<h4>REGIT.EXE</h4>
<p>
RegIt is a command-line utility that you can use to register one or more in-process servers. RegIt accepts wildcards. For instance, you can use:</p>
<p>
<code>REGIT.EXE *.OCX </code></p>
<p>
to register all of the .OCX files in a directory. </p>
<p>
To install these utilities, copy the files to a directory on your hard drive. You may want to put these utilities in a directory in your PATH (for example, \Windows\Command) if you use them often enough. You can place a shortcut to these utilities in the \Windows\Send To directory, which lets you right-click on a component and register it automatically. Further, it is also useful to associate the .DLL and .OCX file extensions with REGSVR32.EXE so that you can double-click on DLLs and OCXs to register them.</p>
<h4>Resource Compiler</h4>
<p>
Visual Basic 4.0 brought with it resource files. Resource files are just that, files that contain various resources used by your application, such as strings and images. The Resource Compiler (RC.EXE) can be used to compile your resource scripts into .RES files, which can then be added to your Visual Basic project and accessed through standard Visual Basic methods such as <b>LoadResData</b>, <b>LoadResString</b>, and <b>LoadResPicture</b>. </p>
<p>
The most obvious use of resources is localization. By placing all of your strings into a resource file, you can easily localize your application by translating the strings in your resource script, compiling it, and then recompiling your application. No changes to source code are required!</p>
<p>
The Application Wizard in Visual Basic 5.0 provides the user with the choice of using Resources for strings. If you choose this option, the wizard will write a resource script for you (.rc), compile it using the Resource Compiler, and add it to your project (look under <b>Related Documents</b> in the Project Window).</p>
<p>
A secondary and perhaps more interesting use of resources is to store graphics images. By placing your graphics in a resource file, Visual Basic will load them on demand, improving the performance of your applications. </p>
<p>
Visual Basic installs the resource compiler to the \VB\Wizards directory for the Application Wizard. If you want to install it yourself, copy the files from the \Tools\Resource directory to a directory in your PATH (for example, \Windows\Command) if you use them often.</p>
<p>
For more information on how to use the Resource Compiler, see RESOURCE.TXT and RC.HLP, found in the \Tools\Resource directory.</p>
<h3>Spy Utilities</h3>
<p>
The Visual Basic 5.0 CD contains a number of “Spy” utilities. These applications are useful for debugging applications and for generally gathering information about a process.</p>
<h4>ODBC Spy</h4>
<p>
ODBC Spy is a utility that allows you to log the ODBC API calls produced by your Visual Basic application. It is useful for tracking down problems in Visual Basic applications that use ODBC drivers to access data. The log produced by ODBC Spy is usually<b> </b>easier to read than the log produced by the ODBC Driver Manager. An additional<b> </b>benefit is that ODBC Spy can log to the screen as well as to a file. Additional<b> </b>documentation for ODBC Spy is included in ODBCSPY.HLP.</p>
<p>
<b><i>Windows 95 Installation </i></b></p>
<p>
To install on Windows 95, copy all the files in the ODBCSpy directory on the CD to a directory on your hard drive. Then, copy CTL3D32.DLL from the ODBCSpy\Win95 sub-directory to your \Windows\System directory on your hard drive. </p>
<p>
Execute ODBCSP32.EXE to start ODBC Spy.</p>
<p>
<b><i>Windows NT Installation</i></b></p>
<p>
To install on Windows NT®, copy all the files in the ODBCSpy directory on the CD to a directory on your hard drive. Then, copy CTL3D32.DLL from the ODBCSpy\WinNT sub-directory to your \Windows\System directory on your hard drive. </p>
<p>
Execute ODBCSP32.EXE to start ODBC Spy.</p>
<h4>SpyXX</h4>
<p>
Spy++ (SPYXX.EXE) is a Win32-based utility that gives you a graphical view of the system's processes, threads, windows, and window messages. </p>
<p>
With Spy++, you can: 
<ul type=disc>
<li>
Display a graphical tree of relationships among system objects, including processes, threads, and windows.<br><br></li>
<li>
Search for specified windows, threads, processes, or messages.<br><br></li>
<li>
View the properties of selected windows, threads, processes, or messages.<br><br></li>
<li>
Select a window, thread, process, or message directly from the view.<br><br></li>
<li>
Use the Finder tool to select a window by mouse positioning.<br><br></li>
<li>
Set message options using complex message log selection parameters.</li>
</ul>
<p>
Please refer to spyxx.help for more information.</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>This tool requires Microsoft Foundation Class Library (MFC) version 4.2, which can be found in the \Tools\MFC42 directory. Visual Basic 5.0 does not install MFC 4.2, and if you do not have this version of MFC on your computer, an error message will be displayed when you attempt to run this utility. To install MFC 4.2, simply copy the files from \Tools\MFC42 to your \Windows\System directory (or \System32 directory on NT), and then run the tool of your choice.</p>
<h4>PSpy</h4>
<p>
Pspy is a tool to help you locate where DLLs in memory are loaded from—much like WPS.EXE in Windows 3.1. It will help you identify the versions of all DLLs that your program is using and it will provide information on the working set of a process. PSpy requires that Visual Basic is installed.</p>
<p>
<b><i>Installation for users of Windows NT 3.51/4</i></b></p>
<p>
PSpy will now run from the CD.</p>
<p>
If you want to install PSpy to your machine, copy the following files to your \System32 directory:</p>
<pre><code>PERFINFO.DLL
WORKSET.DLL
</code></pre>
<p>
Copy PSPY.EXE to your hard drive and create a Program Manager icon for it.</p>
<p>
<b><i>Installation for users of Windows 95</i></b></p>
<p>
Copy the following file to your \System directory:</p>
<pre><code>MEMMON.VXD
</code></pre>
<p>
Copy the following file to the \System\VMM32 directory:</p>
<pre><code>VMM.VXD
</code></pre>
<p>
Add the following line to the [386Enh] section of your SYSTEM.INI file:</p>
<pre><code>Device=memmon.vxd
</code></pre>
<p>
Restart Windows 95.</p>
<p>
PSpy will now run from the CD. If you want to install PSpy to your machine, copy the following files to your \System32 directory:</p>
<pre><code>PERFINFO.DLL
WORKSET.DLL
</code></pre>
<p>
Then copy PSPY.EXE to your hard drive and create a Program Manager icon for it.</p>
<h4>PView</h4>
<p>
PView lets you view and terminate processes on your system. PVIEW.EXE runs under Windows NT and PView95 runs under Windows 95. Under Windows NT 4.0, the Task Manager has most of the same capabilities as PVIEW.EXE.</p>
<p>
Copy the appropriate version of PView to your hard drive or run it from the CD.</p>
<h4>WSView</h4>
<p>
The Working Set Viewer lets you view the working wet for a particular process. </p>
<p>
To install the Working Set Viewer under Windows 95, copy MEMMON.VXD and PSAPI.DLL from \Tools\Unsupprt\WSView\Win95\ to your Windows 95 system directory. For example (assuming the Visual Basic CD is in drive D):</p>
<pre><code>&nbsp;cd c:\win95\system
 copy d:\Tools\Unsupprt\WSView\Win95\memmon.vxd
 copy d:\Tools\Unsupprt\WSView\Win95\psapi.dll
</code></pre>
<p>
Copy \Tools\Unsupprt\WSView\Win95\VMM.VXD to the \VMM32 directory under your Windows 95 system directory. For example:</p>
<pre><code>&nbsp;cd c:\win95\system\vmm32
 copy d:\Tools\Unsupprt\WSView\Win95\vmm.vxd
</code></pre>
<p>
Add the following line to your system.ini file in the [386Enh] section:</p>
<pre><code>&nbsp;Device = memmon.vxd
</code></pre>
<p>
Reboot Windows 95 and then run WSVIEW.EXE.</p>
<p>
Under Windows NT, copy \Tools\Unsupprt\WSView\WinNT\PSAPI.DLL to your \System32 directory and then run WSVIEW.EXE</p>
<h3>OLE Tools</h3>
<p>
The \Tools\OLETools directory contains five tools for working with OLE applications. For more information on all these tools consult OLETOOLS.HLP.
<ul type=disc>
<li>
DFVIEW.EXE — The DocFile Viewer is used to display the contents of an OLE DocFile.<br><br></li>
<li>
DOBJVIEW.EXE — The Data Object Viewer is a tool for viewing objects that support the <b>IDataObject</b> interface. This includes objects placed on the Clipboard as well as objects that are transferred via drag-and-drop.<br><br></li>
<li>
IROTVIEW.EXE — The Running Object Table Viewer displays the contents of OLE's running object table.<br><br></li>
<li>
OLE2VW32.EXE — The OLE 2.0 Object Viewer is a tool designed to help implementers of OLE 2.0–enabled applications better understand what is happening in their systems. OLE2VW32.EXE uses DEFO2V32.DLL. <br><br></li>
<li>
OLEVIEW.EXE — This is another OLE 2.0 Object Viewer. OLEVIEW.EXE uses IVIEWERS.DLL and MFC 4.2 (see note below). </li>
</ul>
<p>
<b><i>Installation</i></b></p>
<p>
Copy all the files in the OLETools directory to a directory on your hard drive. </p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>Most of these tools require MFC version 4.2, which can be found in the \Tools\MFC42 directory. Visual Basic 5.0 does not install MFC 4.2, and if you do not have this version of MFC on your computer, an error message will be displayed when you attempt to run one of these utilities. To install MFC 4.2, simply copy the files from \Tools\MFC42 to your \Windows\System directory (or \System32 directory on Windows NT), and then run the tool of your choice.</p>
<h3>GuidGen/UUIDGen</h3>
<p>
Both GUIDGEN and UUIDGEN are tools for generating globally unique identifiers, or GUIDs. GUIDS are commonly used in OLE to identify classes (CLSID) or interfaces (IID.) These utilities are included with Visual Basic for developers who want to generate IDL (Interface Description Language) or ODL (Object Description Language). IDL and ODL are used with the MKTYPLIB.EXE tool (\Tools\Unsupprt\Typlib) to generate type libraries that can be used with Visual Basic. </p>
<h4>GUIDGEN.EXE</h4>
<p>
GUIDGEN is a Windows-based program that generates GUIDs in several different formats. GUIDGEN places GUIDs on the Clipboard so that you can paste them where you need to use them.</p>
<h4>UUIDGEN.EXE</h4>
<p>
UUIDGEN is a command-line utility that also generates GUIDs in different formats. You use UUIDGEN as follows:</p>
<pre><code>UUIDGEN [-isonvh?]
i - Output UUID in an IDL interface template
s - Output UUID as an initialized C struct
o&lt;filename&gt; - redirect output to a file, specified immediately after o
n&lt;number&gt; - Number of UUIDs to generate, specified immediately after n
v - display version information about uuidgen
h,? - Display command option summary
</code></pre>
<h3>Productivity Tools</h3>
<h4>API Viewer</h4>
<p>
The API Viewer application is a tool that provides instant access to thousands of Windows API declares, constants, and structures. For Visual Basic 5.0, the tool has been enhanced to run both as a stand-alone application and as an add-in, integrated into the development environment. Absent from the Visual Basic 5.0 version is the 16-bit API data file, since Visual Basic 5.0 is a 32-bit–only product.</p>
<p>
The API Viewer is most useful when run as an add-in. To start the Viewer, click the <b>Add-In Manager</b> from the <b>Add-Ins</b> menu, and select the <b>Visual Basic API Viewer</b> entry. A new menu item is added to the bottom of the <b>Add-Ins</b> menu that brings up the API Viewer.</p>
<p>
Search and select the declares, constants, and UDTs required for your application, and automatically insert or drag them into the active module of your project. Also new in this version is the ability to view your selections as line items (as in Visual Basic 4.0) or view full-text versions of your selections.</p>
<p>
The API Viewer can be found in the \VB\WinAPI directory and is installed when you choose to install Wizards and Templates during Setup.</p>
<h4>Template Manager</h4>
<p>
The Template Manager is an add-in that adds three new template types to Visual Basic 5.0. With the Template Manager, you can now save and reuse Menu and Code Snippet templates during application development. No longer do you need to recreate the File menu on every form you design in every application you write. Code it once, save it as a Menu template (along with all the supporting code!) and save it as a Template. The next time you begin creating a form that requires a File menu, simply insert it onto the form using the Template Manager.</p>
<p>
The Template Manager is not installed with Visual Basic, nor is it a supported feature. To install the add-in:</p>
<p>
Copy <code>\Tools\Unsupprt\TmplMgr\TempMgr.Dll</code> to your Visual Basic directory and register it using <code>RegSvr32.exe</code> (found in the <code>\Tools\RegUtils</code> directory). Add the following entry to <code>\Windows\VBADDIN.INI</code>:</p>
<pre><code>"TempMgr.Connect=0"
</code></pre>
<p>
Finally, create the new Template directories and populate them with the samples found in \Tools\Unsupprt\TmplMgr\Template:</p>
<pre><code>\VB\Template\Code
\VB\Template\Menus
\VB\Template\Controls
</code></pre>
<p>
You are now ready to run the Template Manager. Start Visual Basic, click <b>Add-In Manager</b> from the <b>Add-Ins</b> menu, and choose <b>Visual Basic Template Manager</b>. Three new menu items will appear under the <b>Tools</b> menu from which you can access your new templates.</p>
<p>
Finally, creating new templates is as easy as creating forms. For example, simply create a form with a File menu and all the associated code, and save it to the \VB\Template\Menus directory as “MyFileMenu.Frm”. Now, when you choose <b>Add Menu</b> from the <b>Tools</b> menu, you will see <b>MyFileMenu</b> as one of the options!</p>
<h3>Tab Order Sample</h3>
<p>
The documentation on the Visual Basic 5.0 Extensibility Model makes use of the TabOrder sample application. This sample is an add-in, running within the IDE, that manages the Tab Order of controls on your form! Not only is the sample a great way to learn about the rich Visual Basic extensibility model, it’s a great tool to add to your toolkit. Simply compile the sample into your \VB directory and use it every day.</p>
<p>
To fully install the TabOrder sample, you must write an entry (a ProgID) to the VBADDIN.INI, the text file the Add-In Manager uses to load and reference add-ins. Visual Basic 5.0 now has the ability to run procedures through the Immediate Window <i>at design time.</i> The sample has a function called AddToINI that you can run after you have built the project.
<ol>
<li>
Load the \Samples\CompTool\AddIns\TabOrder\TabOrder.vbp project.<br><br></li>
<li>
Open the Immediate Window (Ctrl+G) and enter “AddToINI” and click <b>Return</b>.<br><br></li>
<li>
Make the project into TabOrder.DLL and close the project.<br><br></li>
<li>
Choose the <b>Add In Manager</b> from the <b>Add-Ins</b> menu, select <b>Visual Basic TabOrder Window</b> from the list and click <b>OK</b>.</li>
</ol>
<p>
The TabOrder window will appear, listing all controls on your active form. Notice that this window can be docked and linked just like any other Visual Basic window, and it's all written in Visual Basic.</p>
<h3>Setup Toolkit</h3>
<p>
The Setup Wizard and Toolkit have been shipping with Visual Basic since version 3.0. In Visual Basic 5.0, we have updated the kit to include support for Distributed COM (DCOM) setup, Internet component download, and the creation/usage of dependency files that tell the Setup Wizard what files a component needs in order to be properly installed. </p>
<p>
In the \Tools\Cabinets folder on the Visual Basic 5.0 CD you will find run-time and control .cab files used for Internet component download. These .cab files are not digitally signed, so they should be used only for testing Visual Basic 5.0–authored control download. Additionally, these .cab files are not suitable for referencing directly from an HTML page. For example, you cannot point to the Comdlg32.cab supplied on the Visual Basic 5.0 CD directly from an HTML page using the CODEBASE tag.</p>
<p>
The latest digitally signed .cab files that can be directly referenced from a CODEBASE tag are available on the Microsoft Web site. To download these .cab files, go to <a href="http://www.microsoft.com/vbasic/icompdown/">http://www.microsoft.com/vbasic/icompdown/</a>. For more information on the Setup Wizard, digital signing, safety, and licensing, read the file Compdown.doc in the \Tools\Docs directory on the Visual Basic 5.0 CD.</p>
<p>
Finally, we have included all of the localized versions of Setup.Exe, the bootstrap (or pre-install files) for the Setup program created by the Setup Wizard. This allows developers distributing their applications in multiple languages to ship completely localized setups.</p>
<h3>Dialog Objects</h3>
<p>
The Microsoft Dialog Automation Objects server is an Automation server that can be used instead of the common dialog control. This server provides all of the functionality of the control and more, yet does not require a form on which to sit. For example, with the Dialog Objects server, you can display Page Setup dialog boxes.</p>
<p>
To install the Microsoft Dialog Automation Objects:
<ol>
<li>
Copy DLGOBJS.DLL from \Tools\Unsupprt\Dlgobj to your \Windows\System directory (or \System32 directory on Windows NT).<br><br></li>
<li>
Register the design-time license by merging the Registry file DLGOBJS.REG into your registry:<p class=tl>
Under Windows NT 4.0 and Windows 95, right-click on \Tools\Unsupprt\DlgObj\DLGOBJS.REG and choose "Merge".</P><p class=tl>
Under Windows NT 3.51, copy \Tools\Unsupprt\DlgObj\DLGOBJS.REG to your hard drive and merge it into the registry using RegEdt32.Exe.</P></li>
<li>
Register DLGOBJS.DLL by either using RegSvr32.Exe found in \Tools\RegUtils or by pointing to the <b>Project</b> menu in Visual Basic, selecting the <b>References</b> dialog box, browsing for DLGOBJS.DLL, and clicking <b>Open</b>.<br><br></li>
<li>
Once the DLL is registered, point to the <b>Project</b> menu, open the <b>References</b> dialog box, and select <b>Microsoft Dialog Automation Objects.</b></li>
</ol>
<p>
Some Tips and Tricks: The <b>Show</b> method of a particular object returns a Boolean, indicating whether or not the user pressed <b>OK</b> or <b>Cancel</b>. The colon (“:”) delimits filters in the <b>File</b> dialog box.</p>
<h3>Sample Code</h3>
<p>
Most sample code is unsupported by Microsoft Product Support, meaning you can use the code, but you do so at your own risk and you can only rely on the comments provided to determine the logic involved. That said, check them out because they are outstanding and demonstrate how to do some pretty amazing things in Visual Basic.</p>
<h4>Calendar Control</h4>
<p>
The Calendar Control sample is a Visual Basic ActiveX control that shows a month-at-a-time view of a calendar. This control by itself is extremely useful for providing an alternate means for entering dates into your application, providing the end user with a familiar metaphor for selecting dates.</p>
<p>
This control is completely user-drawn, meaning it is not a composite of other controls—everything within the interface is drawn by the control itself. It demonstrates off-screen painting for flicker-free displays, advanced property pages that embed the control within itself to preview property changes. The Calender Control sample also demonstrates raising multiple user-defined events.</p>
<p>
The source code for this project can be found in the \Tools\Unsupprt\Calendar directory.</p>
<h4>SysTray Control sample</h4>
<p>
The Windows 95 interface introduced the system tray, an area of the taskbar that is used to display status information to the user. Typically, one sees the time, the volume control, and perhaps a few other icons, depending upon the software installed.</p>
<p>
The SysTray Control sample is an ActiveX control, written in Visual Basic 5.0, that contributes an icon in the SysTray and <i>responds to mouse events on that icon</i>. You can use this control “as-is” and find 101 uses for it, or you can enhance it to fit your own needs.</p>
<p>
The control demonstrates the use of the new <b>AddressOf</b> function to subclass the Windows procedure for the control, as well as advanced Windows API techniques. The control provides some interesting properties and events:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=18%><b>Property</b></td>
<td class=label width=82%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=18%><b>InTray</b></td>
<td width=82%>Lets you put the control in the SysTray and remove it at run time.</td>
</tr>
<tr valign=top>
<td width=18%><b>TrayIcon</b></td>
<td width=82%>Lets you set and retrieve the icon displayed in the tray.</td>
</tr>
<tr valign=top>
<td width=18%><b>TrayTip</b></td>
<td width=82%>Lets you set the tooltip text displayed as the mouse hovers over the icon within the tray.</td>
</tr>
<tr valign=top>
<td class=label width=18%><b>Events</b></td>
<td class=label width=82%></td>
</tr>
<tr valign=top>
<td width=18%>MouseUp</td>
<td width=82%>Raised when a mouse button is released over the icon in the tray.</td>
</tr>
<tr valign=top>
<td width=18%>MouseDown</td>
<td width=82%>Raised when a mouse button is pressed on the icon in the tray.</td>
</tr>
<tr valign=top>
<td width=18%>MouseMove</td>
<td width=82%>Raised as the mouse is being moved over the icon in the tray.</td>
</tr>
<tr valign=top>
<td width=18%>MouseDblClick</td>
<td width=82%>Raised when the icon is double-clicked in the tray.</td>
</tr>
</table><br>
<p>
The source code along for the SysTray control can be found in the \Tools\Unsupprt\SysTray directory.</p>
<h4>HTTP Explorer</h4>
<p>
The HTTP Explorer sample application gives a Windows Explorer–style view of any Web site, including all of the documents found on a site, the links from those documents, the HTML source code, and the actual page displayed within an instance of the Internet Explorer WebBrowser control.</p>
<p>
This sample application demonstrates how to use the MSInet and the WebBrowser controls. In addition, this is an exciting sample application that quickly provides a map of your Web site.</p>
<p>
You can find the source code for the HTTP Explorer sample application in \Tools\Unsupprt\HTTPExpl.</p>
<h4>Screen Saver</h4>
<p>
The Screen Saver sample application is a Visual Basic–authored screen saver that runs under Windows 95 or Windows NT 4.0. It has a custom properties page where you can set various properties of the display and it shows you how to preview the screen saver from the Control Panel applet.</p>
<p>
Above and beyond the fact that this sample demonstrates advanced graphics routines performed in Visual Basic, it is simply fun to watch. Many members of the Visual Basic team at Microsoft run this utility as their primary Screen Saver. </p>
<p>
The source code for the Screen Saver sample is in \Tools\Unsupprt\Ssaver</p>
<h3>Internet Voice Chat</h3>
<p>
Ever wanted to talk with someone via the Internet? This Visual Basic sample will let you do just that! The Internet Voice Chat application uses streaming through sockets to accomplish this amazing feat. With this sample, you can connect to any computer on your network or on the Internet and carry on a conversation, as long as both computers have a sound card and microphones. </p>
<p>
The Internet Voice Chat application actually consists of two projects, a WaveStream in-process server that handles the streaming of sound through the Windows socket layer, and a graphical front end that lets you dial up a particular computer. In fact, you can talk to multiple people at the same time. </p>
<p>
The source code for the Internet Voice Chat application can be found in the \Tools\Unsupprt\Voice directory. Compile the WaveStrm project into your \Windows\System directory first and then open the VchatApp application.</p>
<h3>Shell Link and Icon Handler</h3>
<p>
The Shell Link and Icon Handler samples (\Tools\Unsupprt\ShellLnk and \Tools\Unsupprt\IHandle) demonstrate advanced COM interface manipulation. </p>
<p>
Both samples demonstrate how to get access to a COM object or interface inside a DLL that does not contain Typelib information. This is done by creating a <b>IUnknown</b> pointer to an object created from a GUID (CLSID) and querying the interface of that COM object.</p>
<p>
The samples include type libraries that describe the base class for various interfaces found in the Windows 95/Windows NT 4.0 shell (shell32.dll). These type libraries can be referenced from a Visual Basic project and the interfaces can subsequently be accessed by your application.</p>
<p>
The Shell Link sample itself demonstrates how to add links to directories, the Desktop, and the Start menu—all with Visual Basic code.</p>
<h3>OLE Messaging</h3>
<p>
The Microsoft OLE Messaging Library exposes messaging objects for use by Visual Basic applications. </p>
<p>
The OLE Messaging Library lets you quickly and easily add to your Visual Basic application the ability to send and receive mail messages and to interact with folders and address books. You can create programmable messaging objects and then use their properties and methods to meet the needs of your application.</p>
<p>
The Microsoft OLE Messaging Library does not represent a new messaging model. It represents an additional interface to the Messaging Application Programming Interface (MAPI) model, designed to handle the most common tasks for client developers using Visual Basic.</p>
<p>
Contained within the \Tools\OleMsg directories are the following components:
<ul type=disc>
<li>
OLEMSG.HLP is a Windows Help file that documents the entire OLE Messaging Library. It includes complete reference information, a programmer's guide, and many brief code examples.<br><br></li>
<li>
OLEMSG.XLS is a Microsoft Excel spreadsheet containing all the sample source code that appears in the OLE Messaging documentation. There are no complete sample programs, but many short routines illustrating how to use various OLE Messaging features.<br><br></li>
<li>
TIMECARD.CLI is a directory containing a complete OLE Messaging sample application, written for Visual Basic. There is a server program that maintains a list of users and summarizes their timecard reports, and also a client program that is used to fill out a timecard. Refer to README.TXT in the TIMECARD.CLI directory for more details.</li>
</ul>
<h3>Repository Sample</h3>
<p>
The Microsoft Repository is installed with Visual Basic, but the add-in to access the Repository is not enabled. If you install a third-party development tool that is an extension of the Visual Basic Integrated Development Environment (VBIDE) and uses Microsoft Repository, the Repository add-in for Visual Basic will be activated when you install the third-party tool. If you are not using such a tool, we don't recommend that you activate the Repository add-in for Visual Basic. Doing so will introduce overhead that provides no benefit to you.</p>
<p>
The \Tools\Repostry directory and its subdirectories contain sample Visual Basic 5.0 applications that demonstrate how to write code that uses the Repository.</p>
<h3>Browser Sample</h3>
<p>
The Browser sample application demonstrates how to use the Repository to display Visual Basic 5.0 project information (MDO objects). </p>
<p>
The browser displays MDO objects, relationships, and properties. The relationships are displayed as folders in the tree view. To see the properties, you must select an object, then click the right mouse button. The property display is generic. This means that if you create a new property type, you will see it in the properties window. However, the relationships are hard-coded. If you wish to display your relationship types in the browser tree view, you must modify the browser code to include your relationship types.</p>
<h3>File System Sample</h3>
<p>
The File System sample application demonstrates how to customize the repository to support objects that you define.</p>
<h3>Controls</h3>
<p>
The \Tools\Controls directory contains all of the ActiveX Controls that shipped with Visual Basic 4.0 Professional and Enterprise Editions, which are no longer shipping with Visual Basic 5.0. These controls have either been replaced by a new control (i.e. MsFlxGrd.Ocx replaces Grid32.OCX), or their functionality has been rolled into the Intrinsic controls:</p>
<p>
AniBtn32.ocx<br>
Gauge32.ocx<br>
Graph32.ocx<br>
Gsw32.EXE<br>
Gswdll32.DLL<br>
Grid32.ocx<br>
KeySta32.ocx<br>
MSOutl32.ocx<br>
Spin32.ocx<br>
Threed32.ocx</p>
<p>
The \Tools\Controls\BiDi directory contains a bi-directional version of Grid32.Ocx.</p>
<p>
If you have Visual Basic 4.0 Professional or Enterprise Editions installed on your machine, you should already have these ActiveX controls available to you in Visual Basic 5.0. </p>
<p>
Graph32.ocx has been updated to work properly in Visual Basic 5.0 and, as before, it requires two additional support files: gsw32.exe and gswdll32.dll. You must place the three files together in the \Windows\System directory or the control will not function properly.</p>
<p>
If you do not have these controls and wish to use these in Visual Basic 5.0, you can install them by following these steps:
<ol>
<li>
Copy all of the files in this directory to your \WINDOWS\SYSTEM directory.<br><br></li>
<li>
Register the controls by either browsing to them in Visual Basic itself, or manually register them using RegSvr32.Exe, which can be found in the \Tools\RegUtils directory. The command line is:<p class=tl>
<b>regsvr32.exe grid32.ocx</b></P></li>
<li>
Register the design-time licenses for the controls. To do this, merge the vbctrls.reg file found in this directory into your registry. You can merge this file into your registry using RegEdit.Exe (Windows 95 or Windows NT 4.0) or RegEd32.Exe (Windows NT 3.51):<p class=tl>
<b>regedit vbctrls.reg</b></P></li>
</ol>
<h3>Service Packs</h3>
<h4>Microsoft Windows NT 3.51 Service Pack 5</h4>
<p>
Visual Basic 5.0 runs on Windows 95, Windows NT 4.0, and Windows NT version 3.51 with Service Pack 5 (SP 5). SP 5 for Windows NT 3.51 can be found in the \Tools\NT351SP5.a directory.</p>
<h4>Microsoft SQL Server 6.5 Service Pack 2</h4>
<p>
To use T-SQL Debugging, you must have Microsoft SQL Server version 6.5 with Service Pack 1 or greater. SP 2 for SQL Server 6.5 can be found in the \TSQL\SQL65.SP2 directory. Service Pack 2 is <i>all-inclusive</i>, which means that it contains fixes found in Service Pack 1 as well.</p>
<h4>Microsoft Windows NT 4.0 Service Pack 2</h4>
<p>
Microsoft highly recommends installing Service Pack 2 (or greater) for Windows NT 4.0 when running Microsoft Visual Basic 5.0 on Windows NT 4.0. In fact, the setup program created by the Setup Wizard checks for Service Pack 2 on Windows NT 4.0 and warns end users that they should have the Service Pack or their application may not run properly. </p>
<h4>Microsoft Distributed COM for Windows 95</h4>
<p>
Finally, Distributed COM (DCOM) is standard with Windows NT 4.0, yet requires an upgrade to Windows 95 in order to communicate via DCOM between the two platforms. The \Tools\Dcom95 directory contains the DCOM upgrade for Windows 95.</p>
<h3>Documentation</h3>
<p>
A common user request has been to include the documentation in electronic format with the product. All of the documentation found in Books Online can be found in the \Tools\Docs directory. In addition, you can find the following information in the Tools directory:</p>
<p>
<b>Internet Component Download (\Tools\Docs\CompDown.Doc) </b></p>
<p>
If you are writing ActiveX controls or documents that will be automatically downloaded via Microsoft Internet Explorer, then this document is a must-read. It gives details about how Internet component download works, how the Setup Wizard generates Cabinet files and HTML, and how to create your own components for download by hand. </p>
<p>
<b>Creating DLLs for Visual Basic (\Tools\Docs\VB5DLL.Doc)</b></p>
<p>
This document discusses writing standard Windows-based DLLs for Visual Basic applications. It goes into great detail on calling conventions, passing parameters, ANSI/UNICODE conversions, and using Type Libraries. Note that this is a document for advanced programmers, yet everyone should read it because it gives great insight into the workings of Visual Basic.</p>
<p>
<b>WebBrowser ActiveX Control Online Help (\Tools\Unsupprt\WebBrwsr\WebBrows.Hlp)</b></p>
<p>
The WebBrowser ActiveX control ships with Microsoft Internet Explorer version 3.0. In fact, the entire viewing area within Internet Explorer is the WebBrowser control. Since it is an ActiveX control, you can add it to your project and place it on a form, just like any other intrinsic or ActiveX control. Imagine creating your own Web browser in Visual Basic!</p>
<p>
Although the Online Help for this control does not ship with Internet Explorer, it can be found here in the \Tools\Unsupprt\WebBrwsr directory.</p>
<p>
<b>MCIWinDx Control Documentation (\Tools\Unsupprt\MCIWnDx)</b></p>
<p>
After installing Books Online with Visual Basic 5.0, you will find the MCIWnDx control in your <b>Components</b> list. MCIWnDx.Ocx is a 32-bit ActiveX control wrapper around the Windows MCIWnd multimedia window class. The purpose of this control is to allow application developers to easily add multimedia functionality to their applications. </p>
<p>
<b>Word Viewer (\Tools\Docs\wd95vw71.exe)</b></p>
<p>
If you don’t have Microsoft Word or a compatible word processor that can open documents formatted in Microsoft Word, the Word Viewer application is included for your use. Simply run wd95vw71.exe and the Word Viewer will be installed.</p>
<h2>Additional Resources</h2>
<p>
For more information, visit these exciting Web sites:
<ul type=disc>
<li>
Visual Basic Web Page<br>
<a href="http://www.microsoft.com/vbasic/">http://www.microsoft.com/vbasic/</a><br><br></li>
<li>
Internet Component Download<br>
<a href="http://www.microsoft.com/vbasic/icompdown/">http://www.microsoft.com/vbasic/icompdown/</a><br><br></li>
<li>
ActiveX Software Development Kit<br>
<a href="http://www.microsoft.com/intdev/sdk/">http://www.microsoft.com/intdev/sdk/</a><br><br></li>
<li>
ActiveX Resource Kit<br>
<a href="http://www.microsoft.com/activeplatform/default.asp">http://www.microsoft.com/activeplatform/default.asp</a><br><br></li>
<li>
Distributed COM for Windows 95<br>
<a href="http://www.microsoft.com/oledev/">http://www.microsoft.com/oledev/</a><br><br></li>
</ul>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Workspaces with Team Development in the Visual Studio Environment</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_worksp"></a>Using Workspaces with Team Development in the Visual Studio Environment</h1>
<p>
Microsoft Corporation</p>
<p>
October 1997</p>
<h2>Introduction</h2>
<p>
There are special challenges to sharing a large, multiproject workspace with a team of developers. This article focuses on those challenges and offers solutions. </p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>Microsoft does not support opening projects and building them across a LAN. The only supported project for opening and building is one that is on the local hard drive. This paper suggests techniques for developing a project with a team, assuming that team members are copying the project to their local computers and updating the files using a source code control system (we used Microsoft Visual SourceSafe™ 5.0).</p>
<h2>Local Files to Keep Out of a Source Code Control System</h2>
<p>
When developing many project files in the same shared workspace, all checked into source code control (with local copies made to each developer's computer), the best strategy is to keep user-specific files local (like the .opt and .clw files). </p>
<p>
Files that are local and should <i>not</i> be checked into source code control: 
<ul type=disc>
<li>
<b>filename.opt</b>&nbsp;&nbsp;This is a binary file that is the workspace options file for the local computer. <br><br></li>
<li>
<b>filename.clw</b>&nbsp;&nbsp;This file is used by ClassWizard to track classes. <br><br></li>
<li>
<b>filename.ncb</b>&nbsp;&nbsp;This file is a binary file used by ClassView and is specific to the local machine. <br><br></li>
<li>
<b>filename.aps</b>&nbsp;&nbsp;This file is a binary file used by the local resource files. <br><br></li>
<li>
<b>filename.mak</b>&nbsp;&nbsp;This is the exported makefile. </li>
</ul>
<p>
The .clw file should be local only. Checking this .clw file in sets the file to read-only and then ClassWizard will not recognize the file. Keep a copy of this file locally and regenerate the file when new source files are added to the overall project. To regenerate a .clw file, delete the old file, then select the option to create a new one when queried. </p>
<h2>Files for Exclusive Checkout</h2>
<p>
Some files that are unique to the project can develop merge conflicts when checked out by more than one person at a time; this becomes a problem if no one is familiar with those merge conflicts, because they can be hard to resolve. The solution is exclusive checkouts of these files (to one person at a time). </p>
<p>
The following files may develop merge conflicts: 
<ul type=disc>
<li>
<b>filename.dsp</b>&nbsp;&nbsp;The .dsp file can have compiler and linker options changed by two or more people at once, creating a complicated merge upon check-in. <br><br></li>
<li>
<b>resource.h</b>&nbsp;&nbsp;There are incremental counts of the resources contained within the file. <br><br></li>
<li>
<b>mydata.rc</b>&nbsp;&nbsp;There are incremental counts of the resources contained within the file. </li>
</ul>
<h2>Setting Include Directories </h2>
<p>
Setting the Include directories through the Tools menu Includes and Directories dialog box (see the <b>Tools</b> menu, click <b>Options</b>, <b>Directories</b>, <b>Includes</b>) sets the path for all workspace files (and this change is only stored on the local computer). This limits the other workspaces. </p>
<p>
An alternative is to list the library pathnames in the Project Setting dialog box, under the tab for the appropriate area. The three possible tabs are Resources, OLE Types, and C/C++ (for C/C++, use the Preprocessor category). Each of these locations has an edit box where you can specify additional include directories. If include file directory paths are not relative to the project's directory path, then environment variables can be set up to handle the differences. The best strategy is to set up all three local paths in these include directories (they can be different). </p>
<p>
Files can use the "Persist As" property (on that file's property page) with environment variables to resolve files on a different drive than the .dsp file. </p>
<h2>Exporting Makefiles </h2>
<p>
Exporting the makefiles may cause consistency problems in the directory trees, especially if using subprojects. The solution is to make the project directory trees on all computers involved identical to the build machine's project directory tree. Expert users can handle differences in the directory trees with environment variables and a common batch file that sets up the environment so all the files can be found. Exported makefiles that contain subprojects may have hard-coded pathnames in them, which makes the identical directory tree a necessity. </p>
<p>
Adding pathnames to library files using the Additional Include Directories causes hard-coded paths (instead of relative pathnames) in the exported makefile. There are several solutions to this: you can set all computers to have the same directory hierarchy, or you can generate a makefile with relative paths (this is slower and less flexible for swapping around .dsp files). To generate an exported makefile with relative paths, you can add the library file's pathname in the Tools Directories dialog box (see the Tools menu, Options, Directories, Includes). This will slow down the generation of the makefile as the build process checks all the directories listed each time. </p>
<h2>Unloading Projects to Speed Up Shared Workspaces</h2>
<p>
Unloading projects in a workspace can speed up the load time of a workspace. For example, consider a workspace containing 20 projects that is shared across the team and a specific developer who only needs five of those projects. To speed up the loading of the workspace, the other 15 projects can be "unloaded" from the workspace. These unloaded projects are saved as a local option on the local computer and do not affect the shared workspace. </p>
<p>
To unload a project from a workspace: 
<ol>
<li>
Load the shared workspace and go to <b>FileView</b>. <br><br></li>
<li>
Select the project to unload and right-click the mouse. <br><br></li>
<li>
Select <b>Unload</b>. <br><br></li>
<li>
Save the workspace. </li>
</ol>
<p>
The next time the project is displayed in <b>FileView</b>, the file icon will appear dimmed. To load the project again, right-click it and select Load. </p>
<p>
However, if an unloaded project is a subproject or contains dependency files, the unloaded project may not declare to its parent project the export library file or other files needed to build. The solution is to specify the unloaded subproject containing the dependencies in the Project Settings dialog box using environment variables if necessary. Use the Object/Library Modules category on the Link tab to do this. If the subproject is copied to your local machine, using this method means that you don't have to load the project containing dependencies to link to the library files. </p>
<p>
Files added to the Project Settings tab pages will not get timestamp updates. The user should add the library files for each configuration (release or debug) to the Project Setting tab pages. Debug library files need to link to debug files in the build listed in the Project Settings Link tab, for instance. </p>
<h2>Setting Environment Variables</h2>
<p>
Environment variables are customized variable names that redirect the Visual Studio environment to the location of the file on your computer. This is especially useful if files or directories on your computer are arranged differently than they are on the computer that issues the build for the shared workspace. Please note that environment variable names need to be all uppercase letters. </p>
<p>
<b>To set environment variables (Windows NT 4.0): </b>
<ol>
<li>
Set the environment variables in the Visual Studio environment. <br><br></li>
<li>
On the Windows NT taskbar, click <b>Start</b> and click <b>Settings</b>. Open the Control Panel and click <b>System</b>. Click the <b>Environment</b> tab. <br><br></li>
<li>
Enter the environment variable name in the <b>User Variables for Username</b> dialog box. Enter the pathname for the local copy of the file in the <b>Value</b> dialog box. <br><br></li>
<li>
Shut down Visual Studio and restart it. </li>
</ol>
<p>
<b>To set environment variables (Windows 95): </b>
<ol>
<li>
Set the environment variables in the Visual Studio environment. <br><br></li>
<li>
Add the following line to the Autoexec.bat file in Windows 95: <pre><code>SET VARIABLENAME=pathname;
</code></pre>
</li>
<li>
For example:<pre><code>&nbsp;SET LIB=C:\Libraries\Lib;
</code></pre>
</li>
<li>
Save the Autoexec.bat file. <br><br></li>
<li>
Reboot the computer for the setting to take effect. <br><br></li>
<li>
To check the settings, type SET at the command prompt. </li>
</ol>
<h2>Glossary of File Name Extensions </h2>
<p>
The following is a partial list of file name extensions related to Visual Studio. </p>
<p class=dt>
<b>projectname.dsw</b></p>
<p>
The project workspace file. </p>
<p class=dt>
<b>projectname.dsp</b></p>
<p>
The project file (used for building a single project or subproject). </p>
<p class=dt>
<b>projectname.opt</b></p>
<p>
The workspace option file. </p>
<p class=dt>
<b>projectname.clw</b></p>
<p>
The ClassWizard "database" file (used for tracking classes). </p>
<p class=dt>
<b>resource.h</b></p>
<p>
The header file generated by the development environment. This file contains symbol definitions. </p>
<p class=dt>
<b>mydata.rc</b></p>
<p>
The resource file script file. </p>
<p class=dt>
<b>projectname.mak</b></p>
<p>
The makefile that contains project build instructions. This file is usually exported from the development environment and uses the NMAKE utility to build. </p>
<p class=dt>
<b>filename.aps</b></p>
<p>
The binary version of the current resource script file; this file is used for quick loading. </p>
<p class=dt>
<b>filename.ncb</b></p>
<p>
This is a binary file used by ClassView. </p>
</BODY>
</HTML>

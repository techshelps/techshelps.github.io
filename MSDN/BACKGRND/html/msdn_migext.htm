<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Migration Extension Interface Reference</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_migext"></a>Migration Extension Interface Reference</h1>
<p>
Joseph Dadzie<br>
Microsoft Corporation</p>
<p>
October 1997</p>
<p>
There are two sets of sample source code that accompany this article. The first, pview, migrates pview.exe from Windows 9<i>x</i> to Windows NT 5.0. The second, scrnsave, migrates the Windows 95 screen savers, such as Flying Windows and Marquee. Both packages include heavily commented source code for the Migration DLLs.</p>
<p>
<OBJECT id=sample1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Backgrounders Samples">
<PARAM name="Item2" value="5167">
</OBJECT><a href="javascript:sample1.Click()">Click to view or copy the PVIEW sample source code that accompanies this article.</a></p>
<p>
<OBJECT id=sample2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Backgrounders Samples">
<PARAM name="Item2" value="5168">
</OBJECT><a href="javascript:sample2.Click()">Click to view or copy the SCRNSAVE sample source code that accompanies this article.</a></p>
<h2>Introduction</h2>
<p>
Many applications work identically under Miclrosoft®Windows® 9<i>x</i> and Windows NT® 5.0. Your application may operate differently under the different versions. If so, if your users decide to move from Windows 9<i>x</i> to Windows NT, they will be unable to use your application. To prevent this, Microsoft provides the Migration Extension Interface.</p>
<p>
If applications do not work properly, users have to reinstall them. Individual reinstallation of applications is an irritation at any level. In corporate environments, where large-scale deployments are automated, reinstalling applications is prohibitive, since it increases deployment costs. For most non-corporate environments, users may not have the original installation media readily available to reinstall their applications.</p>
<p>
The Migration Extension Interface is an extension to the Setup API that enables you to ensure that your application will operate correctly after Windows NT is installed over Windows 9<i>x</i>. To make use of the Migration Extension Interface, you must write a migration DLL (MIGRATE.DLL) that the Setup program can use to make the necessary changes that will enable your application to work correctly under the new operating system.</p>
<p>
This reference is divided into the following major sections:
<ul type=disc>
<li>
<a href="#migext_overview">Overview</a><b> </b><p class=tl>
Provides more details on why you would implement a migration DLL for your application</P></li>
<li>
<a href="#migext_how">How the Migration Process Works</a><br><br></li>
<li>
<a href="#migext_about">About MIGRATE.DLL</a><b> </b><p class=tl>
Describes the overall structure and processing order of the essential DLL functions</P></li>
<li>
<a href="#migext_development">Migration DLL Development Issues</a><b> </b><p class=tl>
Details a number of important issues you must consider when you choose to implement a migration DLL</P></li>
<li>
<a href="#migext_testing">Testing a Migration DLL</a><b> </b><p class=tl>
Outlines the steps you should take to determine if you need a migration DLL</P></li>
<li>
<a href="#migext_reference">Migration DLL Function Reference</a><b> </b><p class=tl>
Details the MIGRATE.DLL functions</P></li>
<li>
<a href="#migext_file">The MIGRATE.INF File</a><b> </b><p class=tl>
Details the information file your DLL will use to pass information to the Windows NT Setup program</P></li>
</ul>
<h2><a name="migext_overview"></a>Overview</h2>
<p>
Most users expect that all their installed applications will function properly after they decide to upgrade from Windows 9<i>x</i> to Windows NT. However, it is almost impossible to guarantee that an existing application will work properly after Windows NT Setup completes installation of the new operating system. While Windows NT Setup attempts to adhere to the ideal behavior, there are certain problems with some applications that it cannot handle. These include problems caused by applications that:
<ul type=disc>
<li>
Write to different registry locations on Windows 9<i>x</i> and Windows NT.<br><br></li>
<li>
Write different registry values to the same registry locations.<br><br></li>
<li>
Install different run-time files (.dll, .exe, and so on) on the two operating systems.<br><br></li>
<li>
Install different versions of files that are common to both Windows 9<i>x</i> and Windows NT.<br><br></li>
<li>
Make operating system–specific calls on Windows 9<i>x</i> that are not available on Windows NT.</li>
</ul>
<p>
As the developer of your application, you are the only one who can resolve these issues. You can use the Migration Extension Interface to interact with the upgrade process and correct inconsistencies like these before they become problems.</p>
<h2><a name="migext_how"></a>How the Migration Process Works</h2>
<p>
The Migration Extension Interface is designed to fit into the upgrade process as follows:
<ol>
<li>
A user installs your application on a Windows 9<i>x</i>–based system. You place your MIGRATE.DLL file (with your company’s digital certificate and other associated files) on your distribution media, on the Web site from which the user installed the application, or on the user’s hard disk. If the files are installed on the hard disk, you must write the following to the Windows 9<i>x</i> registry:<pre><code>HKLM\Software\Microsoft\Windows\CurrentVersion\Setup\Migration DLLs
Value name: &lt;<i>ProductID</i> string &gt;
Value: &lt;path to MIGRATE.DLL&gt;
</code></pre>
</li>
</ol>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>The ProductID must match the string returned by the QueryVersion function described later on in this document.
<ol start=2>
<li>
Sometime later, the user runs the Windows NT 5.0 Setup program, which scans the Windows 9<i>x</i> registry and prompts the user for the location of other migration DLLs.<br><br></li>
<li>
Setup locates and activates your MIGRATE.DLL, passing it its MIGRATE.INF file.<br><br></li>
<li>
Your MIGRATE.DLL modifies the MIGRATE.INF file with the relevant information, and passes it back to Windows NT Setup.<br><br></li>
<li>
Windows NT Setup continues its installation process. When it begins the Windows NT portion of the installation, it again contacts your MIGRATE.DLL and passes it the MIGRATE.INF file.<br><br></li>
<li>
Your MIGRATE.DLL uses the information it wrote into the MIGRATE.INF file and takes the appropriate actions that will enable your application to run under Windows NT.</li>
</ol>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>Support for the digital certificate requirement and specification of the location of MIGRATE.DLL if installed on the user’s hard disk will be fully implemented for Windows NT 5.0 Beta 2. </p>
<h2><a name="migext_about"></a>About MIGRATE.DLL</h2>
<p>
The migration DLL is a standard Win32®-based DLL you create. It is called by Windows NT 5.0 Setup at different times during the upgrade process to perform a custom migration of your otherwise incompatible application. Setup relies on migration DLLs to identify unknown software components and to either migrate their settings to Windows NT, or to remove the components that will never work properly after an upgrade. </p>
<p>
At a minimum, a migration DLL must have the following Setup-defined exported functions.
<ul type=disc>
<li>
<a href="#migext_queryversion">QueryVersion</a><br><br></li>
<li>
<a href="#migext_initialize9x">Initialize9x</a><br><br></li>
<li>
<a href="#migext_migrateuser9x">MigrateUser9x</a><br><br></li>
<li>
<a href="#migext_migratesystem9x">MigrateSystem9x</a><br><br></li>
<li>
<a href="#migext_initializent">InitializeNT</a><br><br></li>
<li>
<a href="#migext_migrateusernt">MigrateUserNT</a><br><br></li>
<li>
<a href="#migext_migratesystemnt">MigrateSystemNT</a></li>
</ul>
<p>
Your migration DLL can contain additional functions, as well. But if any of these seven functions is missing from a migration DLL, Setup will not load and process it, and your application will not migrate.</p>
<h3>How Migration DLLs Are Processed</h3>
<p>
This section describes the order in which the functions in the migration DLL are called and a brief description of each function. Note that if any of the required seven functions is not present, Setup will skip your MIGRATE.DLL, and your application will not be migrated to the new system.</p>
<p>
During the initial portion of Windows NT Setup (that is, while Windows 9<i>x</i> is still running), the following MIGRATE.DLL functions are called in their listed order. </p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=38%><b>Function</b></td>
<td class=label width=18%><b>Caller</b></td>
<td class=label width=44%><b>Reason for Call</b></td>
</tr>
<tr valign=top>
<td width=38%><b>DllMain (DLL_PROCESS_ATTACH)</b></td>
<td width=18%>Windows 9<i>x</i></td>
<td width=44%>Standard call to load the migration DLL from the installation media.</td>
</tr>
<tr valign=top>
<td width=38%><b>QueryVersion</b></td>
<td width=18%>Setup</td>
<td width=44%>Obtain application identification information (such as the product ID and version number) and determine if further processing is necessary. <p>
After successful processing, the relevant files are copied to the user’s hard disk. </p>
</td>
</tr>
<tr valign=top>
<td width=38%><b>DllMain (DLL_PROCESS_DETACH)</b></td>
<td width=18%>Windows 9<i>x</i></td>
<td width=44%>The system unloads the migration DLL.</td>
</tr>
<tr valign=top>
<td width=38%><b>DllMain (DLL_PROCESS_ATTACH)</b></td>
<td width=18%>Windows 9<i>x</i></td>
<td width=44%>The system loads the migration DLL from its new location on the local hard disk.</td>
</tr>
<tr valign=top>
<td width=38%><b>Initialize9x</b></td>
<td width=18%>Setup</td>
<td width=44%>MIGRATE.DLL prepares itself for the migration process. It detects its target application component locations. Then it provides the working and source directories to Windows NT Setup.</td>
</tr>
<tr valign=top>
<td width=38%><b>MigrateUser9x</b></td>
<td width=18%>Setup</td>
<td width=44%>Setup calls the <b>MigrateUser9x</b> function once for each Windows 9<i>x</i> user account on the computer being upgraded as well as for the Windows NT Administrator account (that is, the active user account becomes the NT Administrator account after migration). The migration DLL detects the users that have installed its target application. <p>
Setup also calls <b>MigrateUser9x</b> for the default user account if necessary. </p>
<p>
If the application is installed for the given user name, the DLL gathers user-specific application information to be used during the <b>MigrateUserNT</b> function call.</p>
</td>
</tr>
<tr valign=top>
<td width=38%><b>MigrateSystem9x</b></td>
<td width=18%>Setup</td>
<td width=44%>The DLL gathers system-wide information concerning its target application, and saves private data to be used during the <b>MigrateSystemNT</b> function call.</td>
</tr>
<tr valign=top>
<td width=38%><b>DllMain (DLL_PROCESS_DETACH)</b></td>
<td width=18%>Windows 9<i>x</i></td>
<td width=44%>The system unloads the migration DLL.</td>
</tr>
</table><br>
<p>
During the second portion of Windows NT Setup (that is, when the newly installed Windows NT is running), the following MIGRATE.DLL functions are called in their listed order. </p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=37%><b>Function</b></td>
<td class=label width=19%><b>Caller</b></td>
<td class=label width=44%><b>Reason for Call</b></td>
</tr>
<tr valign=top>
<td width=37%><b>DllMain (DLL_PROCESS_ATTACH)</b></td>
<td width=19%>Windows NT</td>
<td width=44%>The system loads the migration DLL. </td>
</tr>
<tr valign=top>
<td width=37%><b>InitializeNT</b></td>
<td width=19%>Setup</td>
<td width=44%>Windows NT Setup provides the migration DLL with its working directory, specified during the earlier call to <b>Initialize9x</b>.</td>
</tr>
<tr valign=top>
<td width=37%><b>MigrateUserNT</b></td>
<td width=19%>Setup</td>
<td width=44%>Setup calls <b>MigrateUserNT</b> once per user. It enables the migration DLL to make changes to a user’s application settings. <p>
Note that the number of calls may be less than the number made to <b>MigrateUser9x</b>, since some user accounts may not migrate. For example, the default user account may not migrate if that account has never been accessed. As such, a DLL must store its private data on a per-user basis.</p>
</td>
</tr>
<tr valign=top>
<td width=37%><b>MigrateSystemNT</b></td>
<td width=19%>Setup</td>
<td width=44%>The migration DLL makes changes to the system’s application settings based on the information obtained during the call to <b>MigrateSystem9x</b>. </td>
</tr>
<tr valign=top>
<td width=37%><b>DllMain (DLL_PROCESS_DETACH)</b></td>
<td width=19%>Windows NT</td>
<td width=44%>The system unloads the migration DLL.</td>
</tr>
</table><br>
<p>
By the time the system calls the <b>DllMain (DLL_PROCESS_ATTACH)</b> function, Setup has done the following:
<ol>
<li>
Copied all 32-bit executables from <code>%windir%\system</code> to <code>%windir%\system32.</code><br><br></li>
<li>
Adjusted the Windows 9<i>x</i> Registry key values within <code>HKU\User\Software</code> and <code>HKLM\Software</code> that contain full paths to files that exist in a new location on Windows NT. <br><br></li>
<li>
Migrated all system settings, including the registry, program menu items, desktop, recent documents, and other shell settings.<br><br></li>
<li>
Deleted Windows 9<i>x</i>-specific OLE system objects (not application objects).<br><br></li>
<li>
Migrated the user shell folders (such as c:\windows\desktop) to the Windows NT equivalent (i.e., c:\windows\profiles\&lt;user&gt;\desktop).<br><br></li>
<li>
Adjusted the paths in .STF files (part of ACME Setup) if necessary (for Beta 2).<br><br></li>
<li>
Adjusted links and PIFs that point to moved files.</li>
</ol>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>In the Windows NT phase of the upgrade process, each DLL function has 60 seconds to complete its processing. If it takes longer, Setup will terminate it.</p>
<h2><a name="migext_development"></a>Migration DLL Development Issues</h2>
<p>
Since a migration DLL is a standard Win32 DLL, writing one should be fairly straightforward. However, the following sections describe some specific development issues to consider.</p>
<p>
<a href="#migext_where">Where to Place Migration DLLs</a></p>
<p>
<a href="#migext_migration">Migration Function Processing Order</a></p>
<p>
<a href="#migext_run">Run Time DLLs Included with Windows NT 5.0</a></p>
<p>
<a href="#migext_manipulating">Manipulating a User’s Registry Settings</a></p>
<p>
<a href="#migext_check">Check Network Availability</a></p>
<p>
<a href="#migext_avoid">Avoid User Interfaces</a></p>
<p>
<a href="#migext_storing">Storing Private Data</a></p>
<p>
<a href="#migext_handling">Handling Special String Characters</a></p>
<p>
<a href="#migext_using">Using the Setup Answer File</a></p>
<p>
<a href="#migext_deferring">Deferring Application Migration</a></p>
<p>
<a href="#migext_logging">Logging Errors</a></p>
<p>
<a href="#migext_profile">Using the Win32 Profile APIs</a></p>
<p>
<a href="#migext_restarting">Restarting Setup</a></p>
<h3><a name="migext_where"></a>Where to Place Migration DLLs</h3>
<p>
You can place your migration DLL in a network location, on a floppy disc, or on a compact disc. </p>
<h4>Network Location of MIGRATE.DLL</h4>
<p>
A user may place migration DLLs on a network share and specify the location during Setup, or, if Setup is running in unattended mode, specify the location in the Setup answer file. Each migration DLL must be placed in its own subdirectory (along with any other files required for migrating the target application). </p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>If the <code>Win95upg</code> subdirectory exists before Setup runs, Setup will delete it and create a new one into which the specified files will be copied.</p>
<h4>Floppy or Compact Disc-Based MIGRATE.DLL</h4>
<p>
Setup provides users with the option to supply a floppy or compact disc that contains migration DLLs for their target applications. Setup searches the provided media for MIGRATE.DLL files. For each DLL it finds, it copies the directory containing the DLL (as well as all other files and subdirectories in that directory) to a unique subdirectory. </p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>The Windows NT 5.0 compact disc also contains migration DLLs.</p>
<h3><a name="migext_migration"></a>Migration Function Processing Order</h3>
<p>
There is no guaranteed processing order for migration DLLs. Therefore, do not allow one of your migration DLLs to be dependent on the migration DLL for another application.</p>
<h3><a name="migext_run"></a>Run-Time DLLs Included with Windows NT 5.0</h3>
<p>
Before running any migration extensions on the Windows 9<i>x</i> system, Setup will copy the following files from the Windows NT compact disc to the Windows 9<i>x</i> System directory:
<ul type=disc>
<li>
<b>SETUPAPI.DLL</b><p class=tl>
Setup</P></li>
<li>
<b>MSVCRT.DLL</b><p class=tl>
Visual C Run time</P></li>
<li>
<b>MSVCRT40.DLL</b><p class=tl>
Visual C 4.0 Run time</P></li>
<li>
<b>MFC40.DLL</b><p class=tl>
Microsoft Foundation Class Library 4.0</P></li>
<li>
<b>MFC42.DLL </b><p class=tl>
Microsoft Foundation Class Library 4.2</P></li>
</ul>
<p>
For international environments, Setup copies the appropriate localized DLLs. For example, Setup copies MFC40JPN.DLL and MFC42JPN.DLL for a Japanese installation. </p>
<p>
Debug versions of the run-time DLLs are not copied, nor can Setup guarantee that other run-time versions of an application will migrate correctly.</p>
<p>
This list of files is not exhaustive. Setup may also install newer versions if they become available. However, if your migration extension needs a run-time DLL that is not installed by Windows NT, you must ship it with your migration DLL, and use the migration DLLs functionality to ensure the run-time DLL is installed.</p>
<h3><a name="migext_manipulating"></a>Manipulating a User’s Registry Settings</h3>
<p>
Setup runs in a logged-on user context on Windows 9<i>x</i>, but does not run in a logged-on user context under Windows NT. Rather, it runs in the local system account context. As such, your migration DLL should not try to query or modify the HKEY_CURRENT_USER registry key directly. Instead, it should query the <i>UserRegKey</i> handles passed to it through the <b>MigrateUser9x</b> and <b>MigrateUserNT</b> functions. </p>
<h4>Determining application registry differences</h4>
<p>
You can use SYSDIFF.EXE to determine registry entry differences between an application on a newly installed Windows NT 5.0 computer and an upgraded Windows 9<i>x</i> one. SYSDIFF.EXE is available from the <i>Microsoft</i> <i>Windows NT 4.0 Workstation Resource Kit</i>. This utility is useful when you are not familiar with the application registry differences between the two versions of your application. </p>
<p>
To use SYSDIFF.EXE to determine the registry entries made by an application on a Windows NT computer:
<ol>
<li>
Install Windows NT 5.0 on a computer<br><br></li>
<li>
Log into the system under the administrator account<br><br></li>
<li>
Copy SYSDIFF.EXE and SYSDIFF.INF into a temporary directory<br><br></li>
<li>
Modify SYSDIFF.INF as necessary<br><br></li>
<li>
From the Command Prompt, run <pre><code>sysdiff /snap [/log:&lt;<i>logfile1</i>&gt;] &lt;<i>snap_file</i>&gt;
</code></pre>
<p class=tl>
<i>logfile1</i> and <i>snap_file</i> are valid filenames. The /log parameter is optional. SYSDIFF.EXE will create both files.</P></li>
<li>
Install your application<p class=atl>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>SYSDIFF.EXE records all system changes. Install your application only. </p></li>
<li>
From the Command Prompt, run <pre><code>sysdiff /diff [/log:&lt;<i>logfile2</i>&gt;] &lt;<i>snap_file</i>&gt; &lt;<i>diff_file</i>&gt;
</code></pre>
<p class=tl>
<i>logfile2</i> and <i>diff_file</i> are valid filenames. The /log parameter is optional. SYSDIFF.EXE will create both files. <i>snap_file</i> is the filename you specified in the previous call to SYSDIFF.EXE.</P><p class=tl>
From the Command Prompt, run <br>
</P><pre><code>sysdiff /dump &lt;<i>diff_file</i>&gt; &lt;<i>dump_file</i>&gt;
</code></pre>
<p class=tl>
<i>dump_file</i> is a valid filename. SYSDIFF.EXE will create it. <i>diff_file</i> is the filename you specified in the previous call to SYSDIFF.EXE.</P><p class=tl>
When SYSDIFF.EXE completes, <i>dump_file</i> is a plain text file containing a list of file, .INI file and registry changes made to the system by the target application. Now you are ready to get the upgrade registry entries.</P></li>
</ol>
<p>
To determine registry entry differences between an upgraded computer (from Windows 9<i>x</i> to Windows NT 5.0) and a newly installed Windows NT 5.0 computer:
<ol>
<li>
Install Windows 9<i>x</i> on a computer<br><br></li>
<li>
Install your application<br><br></li>
<li>
Upgrade the computer using WINNT32.EXE<br><br></li>
<li>
Log on to the Windows NT 5.0 computer<br><br></li>
<li>
Run REGEDIT32.EXE or REGEDIT.EXE<br><br></li>
<li>
Compare the registry values listed in <i>dump_file</i> obtained during the final call to SYSDIFF.EXE and those listed in the registry. The differences are those you will need to resolve.</li>
</ol>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>This procedure is different because SYSDIFF does not work across platforms.</p>
<h3><a name="migext_check"></a>Check Network Availability</h3>
<p>
The network is not available to Setup during the Windows 9<i>x</i> phase of the upgrade process, but it will not be available during the Windows NT phase. Your migration DLL must not try to access the network during the Windows NT portion of the migration.</p>
<h3><a name="migext_avoid"></a>Avoid User Interfaces</h3>
<p>
Your migration DLL should not have a user interface. A parent window handle is provided only for the extreme case where a user interface is unavoidable. If Setup provides a NULL parent window handle, the DLL must never display any windows, dialogs, popups, or messages boxes. The migration DLL must never display a user interface on the Windows NT side of Setup.</p>
<p>
This is extremely important when Setup is running in unattended mode. You can determine the Setup mode by testing the value of the <i>ParentWnd</i> parameter in either <b>MigrateUser9x</b> or <b>MigrateSystem9x.</b> </p>
<p>
The installation process should be as hassle-free as possible. If the User Interface is required at any point during an attended installation, consider the usability implications when someone must load multiple migration DLLs. </p>
<h3><a name="migext_storing"></a>Storing Private Data</h3>
<p>
Each migration DLL is copied to unique working directory. Your migration DLL may store private Windows 9<i>x</i> configuration information in this directory, as well as other run-time or data files required for the migration. </p>
<p>
This directory is the only location to which your migration DLL should write when it is running on Windows 9<i>x</i>. Setup deletes this working directory after all migration DLLs have completed, and after Windows NT is successfully installed.</p>
<h3><a name="migext_handling"></a>Handling Special String Characters</h3>
<p>
When writing messages, paths, and registry locations to an INF file, your migration DLL may need to pass certain characters that have special meanings to Setup and to the operating system. When writing messages or paths, the string must be enclosed in double-quotes if it contains any of the following:</p>
<p class=indent>
"</p>
<p class=indent>
%</p>
<p class=indent>
,</p>
<p class=indent>
;</p>
<p class=indent>
[</p>
<p class=indent>
]</p>
<p>
In addition, embedded percent and double quote characters must be formatted properly before the string is written to the INF file. For example,</p>
<pre><code>This "example" illustrates how to escape the percent (%) symbol
</code></pre>
<p>
Must appear in an INF file as</p>
<pre><code>"This ""example"" illustrates how to escape the percent (%%) symbol"
</code></pre>
<p>
When writing registry locations to an INF file, you must replace the characters listed below as well as all characters with ASCII values greater than 127 (including double-byte characters) with their hexadecimal values enclosed in tilde (~).</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=30%><b>Character</b></td>
<td class=label width=70%><b>Hex value</b></td>
</tr>
<tr valign=top>
<td width=30%><code>"</code></td>
<td width=70%>0x22</td>
</tr>
<tr valign=top>
<td width=30%><code>%</code></td>
<td width=70%>0x25</td>
</tr>
<tr valign=top>
<td width=30%><code>,</code></td>
<td width=70%>0x2C</td>
</tr>
<tr valign=top>
<td width=30%><code>;</code></td>
<td width=70%>0x3B</td>
</tr>
<tr valign=top>
<td width=30%><code>[</code></td>
<td width=70%>0x5B</td>
</tr>
<tr valign=top>
<td width=30%><code>]</code></td>
<td width=70%>0x5D</td>
</tr>
<tr valign=top>
<td width=30%><code>~</code></td>
<td width=70%>0x7E</td>
</tr>
</table><br>
<p>
For example, replace a semicolon (<code>;</code>) with the string ~3B~ .</p>
<h3><a name="migext_using"></a>Using the Setup Answer File</h3>
<p>
Setup passes the location of its answer file (UNATTEND.TXT) to your migration DLL in the <b>MigrateUser9x</b>, <b>MigrateSystem9x</b>, <b>MigrateUserNT</b>, and <b>MigrateSystemNT</b> functions. </p>
<p>
Your migration DLL can modify this answer file during the Windows 9<i>x</i> portion of the upgrade process by using the Win32 profile APIs (such as <b>WritePrivateProfileString</b>). Your DLL is permitted to change standard answer file settings and create private sections for its own use. Note that it may not modify the following sections of the UNATTEND.TXT file.</p>
<pre><code>[Unattended]]
[MassStorageDrivers]
[DisplayDrivers]
[KeyboardDrivers]
[PointingDeviceDrivers]
[OemBootFiles]
[OEM_Ads]
[GuiUnattended]
[UserData]
[LicenseFilePrintData]
[Display]
[Modem]
</code></pre>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>This list will change before Beta 2. See the win95upg.inf (Answer File Restrictions) on the Windows NT CD.</p>
<p>
For a detailed description of answer file parameters, search the Microsoft Knowledge Base database at http://www.microsoft.com/kb/.<code> </code></p>
<p>
If you require a private section, your DLL should build the section name from the working directory passed to it by the <b>Initialize9x</b> function. The private section name may only contain alphanumeric characters (A-Z and 0-9). Spaces and other characters are not permitted because they prevent Windows NT Setup from starting the text-only portion of the installation.</p>
<p>
During the Windows NT portion of the upgrade, your migration DLL must treat the UNATTEND.TXT file as a read-only file. You must not modify the answer file in any way.</p>
<h4>Windows 9x upgrade answer file parameters</h4>
<p>
To support the Migration Extension Interface, the Windows 9<i>x</i> Upgrade section has been added to the UNATTEND.TXT answer file. (Note that this is subject to change before Beta 2.)</p>
<p>
Attended = [Yes|No]</p>
<p>
Default value is Yes. Attended specifies if the upgrade is running in attended mode or not. When set to No, Setup assumes default values for the rest of the Windows 9<i>x</i> Upgrade section parameters:</p>
<p>
MigrationDllPath = &lt;<i>path</i>&gt;</p>
<p>
Specifies a local or UNC path to migration DLLs. Setup will search this directory and its subdirectories for migration DLLs.</p>
<p>
ReportOnly = [No|Yes]</p>
<p>
Default value is No. This parameter forces Setup to generate a compatibility report and then terminate without upgrading the computer.</p>
<p>
SaveReportTo = &lt;<i>path</i>&gt;</p>
<p>
Default is the local computer system drive (generally C:\). Specifies a local or UNC path (not a file name) to the desired location of Setup’s compatibility report files (HARDWARE.TXT and SOFTWARE.TXT). HARDWARE.TXT contains the hardware compatibility report. SOFTWARE.TXT contains the software compatibility report.</p>
<p>
AppendComputerNameToPaths = [No|Yes]</p>
<p>
Default value is No. This key is used to specify whether the computer name should be appended to the path to which the compatibility reports are to be saved. The directory is created if it does not already exist. For example, if SaveReportTo = C:\reports and the computer name is Testcomp, the reports would be saved to C:\reports\Testcomp. </p>
<h3><a name="migext_deferring"></a>Deferring Application Migration</h3>
<p>
If your application is network-based, it may not be practical for your migration DLL to copy your migration files from a network location to every local computer that has installed the Windows 9<i>x</i> version. </p>
<p>
Instead, your migration DLL can redirect the application’s shell links to a new executable. This way, when a user launches the application, the new executable runs instead. This executable is responsible for completing the migration from the network location to that user's local machine in the user’s logged-on, network-accessible context on Windows NT. If you choose this approach, all your migration DLL needs to do is to copy the new executable to the local hard disk, and redirect all shell links from the original target application to this new executable. (You accomplish this through an entry in the <code>[Moved]</code> section of MIGRATE.INF). </p>
<p>
The new executable must complete the migration when a user runs it on Windows NT. It must restore the original shell links, delete itself, and then run the newly migrated application. For more details on how to replace links, see the Shell Link documentation in the Win32 SDK.</p>
<p>
<i>See Also:</i> <a href="#migext_moved">[Moved] Section</a></p>
<h3><a name="migext_logging"></a>Logging Errors</h3>
<p>
Windows NT Setup automatically logs errors returned by your migration DLL code. To log the errors your migration DLL detects, you must use the new Setup API function <b>SetupLogError</b>: </p>
<pre><code><b>BOOL
</b>SetupLogError (
   IN LPCTSTR <i>MessageString</i>,
   IN LogSeverity <i>ErrorSeverity</i>
   );</code></pre>
<h4>Parameters</h4>
<p>
<i>MessageString</i></p>
<p class=indent>
Error message string to be saved to Windows NT Setup’s action log (saved to <code>%Windir%SETUPACT.LOG</code>).</p>
<p>
<i>ErrorSeverity</i></p>
<p class=indent>
Specifies the severity of the error to be logged. The error can have one of the following values, listed in increasing order of severity. 
<ul type=disc>
<li>
LogSevInformation<br><br></li>
<li>
LogSevWarning<br><br></li>
<li>
LogSevError<br><br></li>
<li>
LogSevFatalError (reserved for use by Windows NT Setup)</li>
</ul>
<h4>Remarks</h4>
<p>
If <i>ErrorSeverity</i> level is any one of LogSevWarning, LogSevError, or LogSevFatalError, a copy of the error message will also be saved to the <code>%Windir%SETUPERR.LOG</code> file.</p>
<p>
Before logging an error, the log file must be opened using <b>SetupOpenLog</b>. <b>SetupCloseLog</b> must be used to close it after the error is written.</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>Opening and closing a log file can be done in the <b>DLLMain</b> function of a migration DLL. See the sample source code for examples. </p>
<h3><a name="migext_profile"></a>Using the Win32 Profile APIs</h3>
<p>
The Win32 Profile APIs (<b>GetPrivateProfileString</b> and <b>WritePrivateProfileString</b>) use a separate cache than the one used by <b>SetupOpenInfFile</b>. Therefore, if you open MIGRATE.INF using <b>SetupOpenInfFile</b> and then (before closing it) modify the file using <b>WritePrivateProfileString</b>, your changes will not appear in <b>SetupOpenInfFile</b>’s cache.</p>
<p>
As such, care must be taken when using both the Win32 Profile APIs and the Setup APIs. Ideally, their use must be separated. </p>
<p>
If you modify MIGRATE.INF using <b>WritePrivateProfileString</b>, you must call <b>WritePrivateProfileString</b> again with all NULL parameters to force the file to be written to disk before you open it again using <b>SetupOpenInfFile</b>. </p>
<p>
If a file has already been opened with <b>SetupOpenInfFile</b> is already open, do not call <b>WritePrivateProfileString</b> to modify the same file<b>.</b></p>
<h3><a name="migext_restarting"></a>Restarting Setup</h3>
<p>
The GUI-mode portion of Windows NT Setup may be restarted in case of a critical interruption (such as a power failure) during the upgrade. Your migration DLL should be prepared to handle this scenario. For example, before moving files, the DLL must check to see if the file has already been moved. Of course, this is standard programming practice, and the extent of your fail-safe functionality is mostly determined by the complexity of your migration process. </p>
<h2><a name="migext_testing"></a>Testing a Migration DLL</h2>
<p>
Applications that do not survive migration from one version of Windows to another will not comply with Windows logo requirements. Your migration DLL can help to preserve your logo compliance. </p>
<p>
The Setup program attempts to detect conflicts that arise from implementing your application under the new operating system. It may or may not succeed in identifying inconsistencies. Because of this, you should test your application extensively under various migration scenarios.</p>
<p>
The migration functionality is provided to enable you to ensure that your customer base can use your application under the new operating system. You should test how your application behaves under different versions of Windows. Ideally, it behaves the same under different versions. </p>
<p>
If conflicts exist, you have two options. You can either correct the intrinsic problem so that no problems occur during migration, or you can create a migration DLL. If you do not take advantage of the Migration Extension Interface, your customers will need to reinstall your application for it to run correctly under the newly installed system.</p>
<p>
Migration DLLs must be thoroughly tested before being distributed to end users by means of the Web or other media. The following procedures outline the minimal process you should undertake during your test. Note that you should repeat the tests for multiple user account scenarios (default, roaming, workgroup, and domain users). The scenarios should also cover combinations of these user accounts.</p>
<p>
<b>To test your migration DLL under an attended upgrade:</b>
<ol>
<li>
Install a version of Windows 9<i>x</i> on a computer.<br><br></li>
<li>
Install the target application on the computer.<br><br></li>
<li>
Start Windows NT Setup and select the Upgrade option on the Welcome page.<br><br></li>
<li>
Insert the media containing the migration DLL when prompted.<br><br></li>
<li>
Complete Windows NT Setup.<br><br></li>
<li>
Launch the migrated application on Windows NT.<br><br></li>
<li>
Run any test suites to determine if application is fully functional.</li>
</ol>
<p>
<b>To test your migration DLL under an unattended upgrade:</b>
<ol>
<li>
Install a version of Windows 9<i>x </i>on a computer.<br><br></li>
<li>
Install the target application on the computer.<br><br></li>
<li>
Place the migration DLL in a subdirectory of <code>%windir%\setup\win95upg</code>.<br><br></li>
<li>
Start Windows NT Setup in unattended mode with the “Win95Upgrade = Yes” key set in the answer file.<br><br></li>
<li>
Complete Windows NT Setup.<br><br></li>
<li>
Launch the migrated application on Windows NT.<br><br></li>
<li>
Run any test suites to determine if the application is fully functional.</li>
</ol>
<h2><a name="migext_reference"></a>Migration DLL Function Reference</h2>
<ul type=disc>
<li>
<a href="#migext_queryversion">QueryVersion</a><br><br></li>
<li>
<a href="#migext_initialize9x">Initialize9x</a><br><br></li>
<li>
<a href="#migext_migrateuser9x">MigrateUser9x</a><br><br></li>
<li>
<a href="#migext_migratesystem9x">MigrateSystem9x</a><br><br></li>
<li>
<a href="#migext_initializent">InitializeNT</a><br><br></li>
<li>
<a href="#migext_migrateusernt">MigrateUserNT</a><br><br></li>
<li>
<a href="#migext_migratesystemnt">MigrateSystemNT</a></li>
</ul>
<h3><a name="migext_queryversion"></a>QueryVersion</h3>
<p>
Setup uses <b>QueryVersion</b> to determine if further processing of the DLL is necessary. </p>
<pre><code><b>LONG
CALLBACK 
QueryVersion</b> (
   <b>OUT LPCSTR</b> *<i>ProductID</i>,
   <b>OUT LPUINT</b> <i>DllVersion<b>,
</b></i><b>   OUT LPINT</b> *<i>CodePageArray<b>,   </b></i>OPTIONAL
   <b>OUT LPCSTR</b> *<i>ExeNamesBuf</i>,   OPTIONAL<b><i>
</i></b>   <b>OUT</b> <b>PVENDORINFO</b> <i>*VendorInfo</i>
   );</code></pre>
<h4><i>Parameters</i></h4>
<p>
<i>*ProductID </i></p>
<p class=indent>
Points to a string that identifies the DLL and its target application. To ensure uniqueness, the string must contain the name of the manufacturer, the product name, and the version number of the application the DLL will migrate. The length of the string must not exceed MAX_PATH bytes (as defined within your migration DLL). Setup ignores excess characters. The <i>ProductID</i> string is also used for error messages generated during DLL processing.</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>Your migration DLL is responsible for allocating and freeing the <i>ProductID</i> string buffer.</p>
<p>
<i>DllVersion </i></p>
<p class=indent>
Points to a non-zero unsigned integer that specifies the version number of your migration DLL. Setup looks for duplications by comparing <i>ProductID</i> strings from other migration DLLs. If two or more DLLs have identical <i>ProductID</i> strings, Setup uses the DLL with the highest <i>DllVersion</i> number and ignores the other duplicates. </p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B><i>DllVersion </i>is not intended to be the DLL’s binary version number.</p>
<p>
<i>CodePageArray </i></p>
<p class=indent>
Points to an array of integers containing all the code pages supported by the migration DLL. The last element of the array must be -1. If your migration DLL does not support the system code page, Setup skips your migration DLL and your application will not migrate to the new operating system. </p>
<p class=indent>
If this pointer is NULL, Setup processes all the required functions in the DLL regardless of the installed Windows 9<i>x</i> code pages. Set this pointer to NULL if the DLL has no language dependencies.</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>Your DLL is responsible for the allocating and freeing memory used by this array.</p>
<p>
<i>ExeNamesBuf </i></p>
<p class=indent>
Points to a multi-sz string buffer containing a list of filenames (not paths), that your migration DLL wants Setup to locate. Setup locates all instances of the listed files and returns the list of full file paths to your migration DLL via the MIGRATE.INF file. Paths to files located on network, substituted, or compressed drives will not be returned to the DLL, because Setup does not search those drives. Other directories on the computer not related to the active Windows 9<i>x</i> installation may also be excluded.</p>
<p class=indent>
Set this parameter to NULL if you do not want Setup to search for any particular files. </p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>Your migration DLL is responsible for allocating and freeing the <i>ExeNamesBuf </i>string buffer.</p>
<p>
<i>VendorInfo </i></p>
<p class=indent>
Points to a data structure that contains your company name, contact information (phone number), web address and instructions you want to provide to the user. Setup will display this information to the user in the migration report and in error cases. The <i>VendorInfo</i> data structure is of the form:</p>
<pre><code>typedef struct {
CHAR    CompanyName[256];
CHAR    SupportNumber[256];
CHAR    SupportUrl[256];
CHAR    InstructionsToUser[1024];
} VENDORINFO, *PVENDORINFO; 
</code></pre>
<p class=indent>
Strings returned to Setup must be localized for the language version of Windows 9x running on the computer.</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>The <i>VendorInfo</i> field will only be enforced for Beta 2 and beyond. A migration DLL written for Beta 2 will still run on Beta 1.</p>
<h4><i>Return Values</i></h4>
<ul type=disc>
<li>
ERROR_SUCCESS if your migration DLL found one or more installed components for its target application. This guarantees that Setup will call your migration DLL for later processing.<br><br></li>
<li>
ERROR_NOT_INSTALLED if your migration DLL initializes properly but did not find any of its components installed on the active Windows 9<i>x</i> installation. Note that Setup will not call your DLL again if it returns ERROR_NOT_INSTALLED.<p class=tl>
Your migration DLL must also return ERROR_SUCCESS if it does not attempt to detect installed components in <b>QueryVersion</b>. </P></li>
</ul>
<p>
All other return values (Win32 error values) are considered initialization errors. Setup will report the error to the user, clean up your migration DLL’s files, and ask the user to continue or cancel the Windows NT installation process.</p>
<p>
An exception generated by a migration DLL causes Setup to report RPC error messages. Setup will provide more information in SETUPERR.LOG.</p>
<h4><i>Remarks</i></h4>
<p>
Setup uses <b>QueryVersion</b> to determine if further processing of the DLL is necessary. During this call, your migration DLL (located on a floppy, compact disc, or network share) must provide Setup with the <i>ProductID</i>, <i>DllVersion</i>, <i>CodePageArray</i> and <i>ExeNamesBuf</i> information. At this point your migration DLL cannot make any changes to the system. </p>
<p>
Your migration DLL should try to determine if the target application is installed on the computer, and then return the appropriate result from <b>QueryVersion</b>. The system unloads the migration DLL after <b>QueryVersion</b> returns. Setup copies it to the local hard disk and calls <b>Initialize9x</b> only if <b>QueryVersion</b> returns ERROR_SUCCESS.</p>
<p>
During the call to <b>QueryVersion</b>, Setup finds all occurrences of files listed in the <i>ExeNamesBuf </i>string (if not NULL) and writes their locations to the <b>[Migration Paths]</b> section of MIGRATE.INF<i>. </i>These paths are then available to the other functions in your migration DLL. </p>
<p>
Setup detects duplicate migration DLLs by comparing the <i>ProductID</i> strings of supplied DLLs. It only processes the DLL with the highest <i>DLLVersion</i> number. The user is not be notified of duplicates found.</p>
<p class=indent>
<B><b>Important:</b></B> <i>DllVersion</i> number zero (0) is reserved for Windows NT Setup–provided migration DLLs. DLLs not supplied by Microsoft Windows NT with the Windows NT 5.0 compact disc must not use this value. </p>
<h3><a name="migext_initialize9x"></a>Initialize9x</h3>
<p>
Setup calls <b>Initialize9x</b> after relocating the migration DLL to the local hard disk. </p>
<pre><code>LONG
CALLBACK 
<b>Initialize9x</b> (
   <b>IN LPCSTR</b> <i>WorkingDirectory</i>,
   <b>IN LPCSTR</b> <i>SourceDirectories</i>,<i>
</i>   <b>LPVOID</b> <i>Reserved</i>
   );</code></pre>
<h4><i>Parameters</i></h4>
<p>
<i>WorkingDirectory </i></p>
<p class=indent>
Points to the path of a Setup-supplied directory your migration DLL can use to store its private temporary data. This directory will contain MIGRATE.DLL and all associated files. Your migration DLL must write to this directory if it needs temporary data storage. Setup provides this directory again during the Windows NT phase of the upgrade process, and automatically deletes it after the upgrade is complete. </p>
<p>
<i>SourceDirectories </i></p>
<p class=indent>
Points to the path of the Windows NT installation files. This path is a multi-sz string to enable you to specify multiple source directories. Normally, this directory is D:\I386 where D:\ is the CD-ROM drive on the computer.</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>Compressed files on the Windows NT installation compact disc can be decompressed by using the Setup API functions <b>SetupGetFileCompressionInfo</b> and <b>SetupDecompressOrCopyFile</b>.</p>
<p>
<i>Reserved </i></p>
<p class=indent>
Reserved for future use.</p>
<h4><i>Return Values</i></h4>
<ul type=disc>
<li>
ERROR_SUCCESS if your migration DLL found one or more installed components for the target application. If your DLL does not attempt to detect installed components in <b>Initialize9x</b>, it must also return ERROR_SUCCESS <br><br></li>
<li>
ERROR_NOT_INSTALLED if the migration DLL initializes properly but does not find any of its components installed on the active Windows 9<i>x</i> installation. Note that Setup will not call your DLL again if it returns ERROR_NOT_INSTALLED.</li>
</ul>
<p>
All other return values (Win32 error values) are considered initialization errors. Setup reports the error to the user, cleans up your migration DLL’s files and asks the user to abort or continue the Windows NT installation process.</p>
<p>
Exceptions generated by your migration DLL cause Setup to report RPC error messages. Setup provides more information in SETUPERR.LOG.</p>
<h4><i>Remarks</i></h4>
<p>
Setup calls <b>Initialize9x</b> after relocating your migration DLL to the local hard disk. During this call, your DLL should try to detect its new installation. It should return ERROR_SUCCESS if it is ready to be called by Setup during the Windows NT portion of the upgrade. If the DLL returns ERROR_NOT_INSTALLED, Setup will stop processing it. </p>
<p>
The current directory is set to the working directory and will not be changed by Setup during the processing of a migration DLL. </p>
<h3><a name="migext_migrateuser9x"></a>MigrateUser9x </h3>
<p>
Gathers information concerning the users, and saves private data to be used during the later call to <b>MigrateUserNT.</b></p>
<pre><code><b>LONG
CALLBACK 
MigrateUser9x (
   IN HWND </b><i>ParentWnd</i><b>, 
   IN LPCSTR </b><i>AnswerFile</i><b>,
   IN HKEY </b><i>UserRegKey</i><b>, 
   IN LPCSTR </b><i>UserName</i><b>, 
   LPVOID </b><i>Reserved</i><b>
   );</b></code></pre>
<h4><i>Parameters</i></h4>
<p>
<i>ParentWnd </i></p>
<p class=indent>
Specifies a handle to the parent window for any dialog boxes or windows that you may want your migration DLL to display. </p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>You should not display a user interface unless absolutely necessary.</p>
<p class=indent>
If this parameter is NULL, Setup is running in an unattended mode and your DLL must not display user interface elements or prompt the user for input.</p>
<p>
<i>AnswerFile </i></p>
<p class=indent>
Points to a copy of the Windows NT Setup answer file (typically UNATTEND.TXT) which is used to automate the installation of Windows NT. You can access this file using the Win32 profile APIs (for example, <b>GetPrivateProfileString</b> and <b>WritePrivateProfileString</b>). Some sections of this answer file cannot be modified by your DLL. For more information, see Using the Setup Answer File.</p>
<p>
<i>UserRegKey </i></p>
<p class=indent>
Provides a registry handle to the user hive of the Windows 9<i>x</i> user specified in the <i>UserName</i> parameter. This user hive is equivalent to the user’s HKEY_CURRENT_USER (HKCU) when that user logs on. This handle is valid only within the scope of <b>MigrateUser9x</b> and is provided for user-specific information gathering purposes. </p>
<p>
<i>UserName </i></p>
<p class=indent>
Provides the user name (e.g. “<i>username</i>”) for the Windows 9<i>x</i> user whose registry information is supplied through the <i>UserRegKey</i> parameter. A value of NULL refers to the default Windows 9<i>x</i> user account (the account used when a user accesses the system by skipping the logon process). <i>UserName</i> may also be “Administrator” even though Windows 9x does not have an administrator account. This allows a migration DLL to collect information for the Windows NT Administrator account to be created later. </p>
<p>
<i>Reserved </i></p>
<p class=indent>
Reserved for future use.</p>
<h4><i>Return Values</i></h4>
<p>
ERROR_SUCCESS if the target application is installed for the specified user. Also return ERROR_SUCCESS if your migration DLL needs further processing during the Windows NT phase.</p>
<p>
ERROR_NOT_INSTALLED if your target application is not installed for the specified user account and that user’s registry does not require any processing. However, Setup will continue to call <b>MigrateUser9x</b> for the rest of the users, and <b>MigrateSystem9x</b> if this function returns ERROR_NOT_INSTALLED.</p>
<p>
ERROR_CANCELLED if the user wants to exit Setup. You should specify this return value only if <i>ParentWnd</i> is not set to NULL. </p>
<p>
All other return values (Win32 error values) are considered initialization errors. Setup reports the error to the user and prompts to abort or continue the upgrade.</p>
<p>
Exceptions generated by your migration DLL cause Setup to report RPC error messages. Setup provides more information in SETUPERR.LOG.</p>
<h4><i>Remarks</i></h4>
<p>
A DLL must always check for the value of <i>ParentWnd</i> in <b>MigrateUser9x</b> before proceeding since its value determines whether UI can be displayed to the user. </p>
<p>
Do not use the <b>MigrateUser9x </b>function for user account modification. Use it only for information gathering about user accounts. To modify user-specific settings, save the data collected to your provided working directory and then use the <b>MigrateUserNT</b> function to perform the modifications.</p>
<p>
Use the DLL working directory provided by the <b>Initialize9x</b> <i>WorkingDirectory</i> parameter to store any user-specific configuration information you may want to keep track of. Remember to use the <i>UserName</i> parameter to differentiate the information about the various users.</p>
<h3><a name="migext_migratesystem9x"></a>MigrateSystem9x</h3>
<p>
Gathers system-wide information concerning the target application, and saves private data to be used during the later call to <b>MigrateSystemNT.</b></p>
<pre><code><b>LONG 
CALLBACK 
MigrateSystem9x (
   IN HWND </b><i>ParentWnd</i><b>, 
   IN LPCSTR </b><i>AnswerFile</i><b>,
   LPVOID </b><i>Reserved</i><b>
   );</b></code></pre>
<h4><i>Parameters</i></h4>
<p>
<i>ParentWnd </i></p>
<p class=indent>
Specifies a handle to the parent window for any dialog boxes or windows that your migration DLL may want to display. </p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>You should not display a user interface unless absolutely necessary.</p>
<p class=indent>
If this parameter value is NULL, Setup is running in an unattended mode and your DLL must not prompt the user for input. Therefore, the <i>ParentWnd</i> value determines whether ERROR_CANCELLED can be returned from this function. </p>
<p>
<i>AnswerFile </i></p>
<p class=indent>
Points to a copy of the Windows NT Setup answer file, UNATTEND.TXT. This file is used to automate the installation of Windows NT and can be accessed using the Win32 profile APIs, such as <b>GetPrivateProfileString</b> and <b>WritePrivateProfileString</b>. For more information, see <a href="#migext_using">Using the Setup Answer File</a>.</p>
<p>
<i>Reserved </i></p>
<p class=indent>
Reserved for future use.</p>
<h4><i>Return Values</i></h4>
<ul type=disc>
<li>
ERROR_SUCCESS if your target application is installed on the system. Also returns ERROR_SUCCESS if system-wide changes need to be made for the target application during the Windows NT phase of the upgrade.<br><br></li>
<li>
ERROR_NOT_INSTALLED if your migration DLL detects no application components common to the entire system or if your DLL requires no further processing. Note that Setup will continue to call <b>MigrateUser9x</b> for the rest of the users, and <b>MigrateSystem9x</b> if this function returns ERROR_NOT_INSTALLED.<br><br></li>
<li>
ERROR_CANCELLED if the user elects to exit the Setup program. Use this return value only if <i>ParentWnd</i> is not NULL. </li>
</ul>
<p>
All other return values (Win32 error values) are considered initialization errors. Setup reports the error to the user and asks to abort or continue the upgrade.</p>
<p>
Exceptions generated by your migration DLL cause Setup to report RPC error messages. Setup provides more information in SETUPERR.LOG.</p>
<h4><i>Remarks</i></h4>
<p>
Your DLL must always check for the value in <i>ParentWnd</i> before proceeding, since its value determines whether user interface elements can be displayed to the user. </p>
<p>
Do not use this function to modify the system. Use it for system-wide information gathering only. To modify system-wide settings, save any private data collected in your migration DLLs working directory (specified in an earlier call to <b>Initialize9x</b>). Use <b>MigrateSystemNT</b> to perform the modifications during the Windows NT portion of the upgrade.</p>
<h3><a name="migext_initializent"></a>InitializeNT</h3>
<p>
This function is called during Windows NT GUI Mode Setup when the Windows NT phase of the upgrade is ready to start. </p>
<pre><code><b>LONG
CALLBACK 
InitializeNT (
   IN LPCWSTR </b><i>WorkingDirectory</i><b>,
   IN LPCWSTR </b><i>SourceDirectories</i><b>,
   LPVOID </b><i>Reserved</i><b>
   );</b></code></pre>
<h4><i>Parameters</i></h4>
<p>
<i>WorkingDirectory </i></p>
<p class=indent>
Points to the path of the Setup-supplied working directory. This value is the value that your migration DLL used for storing its private temporary data and files during the Windows 9<i>x</i> phase of the upgrade. </p>
<p>
<i>SourceDirectories </i></p>
<p class=indent>
Points to the path of the Windows NT installation files. This path is a multi-sz because multiple source directories can be provided. Normally this directory is D:\I386 or C:\$WIN_NT$.~LS\I386 where D:\ is the CD-ROM drive on the computer and C:\$WIN_NT$.~LS\I386 is Setup’s temporary source directory.</p>
<p>
<i>Reserved</i></p>
<p class=indent>
Reserved for future use.</p>
<h4><i>Return Values</i></h4>
<p>
ERROR_SUCCESS if your migration DLL initializes properly within the Windows NT environment. </p>
<p>
All other return values (Win32 error values) are considered critical errors. Setup reports the error to the user and then cancels processing your migration DLL. However, Setup will not continue the upgrade. Any errors or logs generated will include the <i>ProductID</i> string specified in <b>QueryVersion</b> to identify your DLL.</p>
<p>
Exceptions generated by your migration DLL cause Setup to report RPC error messages. Setup provides more information in SETUPERR.LOG.</p>
<h4><i>Remarks</i></h4>
<p>
<b>InitializeNT</b> is called during Windows NT GUI Mode Setup, when the Windows NT phase of application migration is ready to start. When this function is called, the current directory is set to the DLL’s working directory.</p>
<p>
Your migration DLL must not display user messages in its <b>InitializeNT</b> function.</p>
<h3><a name="migext_migrateusernt"></a>MigrateUserNT</h3>
<p>
Migrate the user accounts that port from Windows 9<i>x</i> to Windows NT.</p>
<pre><code><b>LONG
CALLBACK 
MigrateUserNT ( 
   IN HINF </b><i>AnswerFileHandle</i><b>,
   IN HKEY </b><i>UserRegKey</i><b>,
   IN LPCWSTR </b><i>UserName<b>,</b></i><b> 
   LPVOID </b><i>Reserved</i><b>
   );</b></code></pre>
<h4><i>Parameters</i></h4>
<p>
<i>AnswerFileHandle </i></p>
<p class=indent>
INF handle to the answer file being used for the upgrade process. This file contains settings generated by Setup, the attending user, and all migration DLLs. You can access the file referenced by this handle using the Setup functions. Do not close this handle at any time.</p>
<p>
<i>UserRegKey </i></p>
<p class=indent>
A registry handle to the private registry settings of the Windows 9<i>x</i> user specified in <i>UserName</i>. This handle is equivalent to HKEY_CURRENT_USER (HKCU) when that user is logged on. The handle is only valid within the scope of <b>MigrateUserNT</b>. Do not close this handle at any time.</p>
<p>
<i>UserName </i></p>
<p class=indent>
The user name for the user whose registry information is supplied through the <i>UserRegKey</i> parameter. If this value is NULL, Setup is referring to the Windows NT logon account. The Windows NT logon account is used for creating the desktop settings for the Windows NT logon prompt and as a template for creating new Windows NT users. </p>
<p>
<i>Reserved</i></p>
<p class=indent>
Reserved for future use.</p>
<h4><i>Return Value</i></h4>
<ul type=disc>
<li>
ERROR_SUCCESS if the migration of user-specific settings is successful.</li>
</ul>
<p>
Other error codes will terminate the processing of your migration DLL. However, Windows NT Setup will proceed. Ideally, only critical problems (such as a hardware failure) should generate terminating error codes.</p>
<p>
Exceptions generated by your migration DLL cause Setup to report RPC error messages. Setup provides more information in SETUPERR.LOG.</p>
<h4><i>Remarks</i></h4>
<p>
The order in which user names are passed to your migration DLL during the call to <b>MigrateUserNT</b> may be different than the order in which they were passed during the call to <b>MigrateUser9x</b>.</p>
<p>
Setup may disable migration of one or more user accounts if errors occur. For this reason, the number of user names passed to <b>MigrateUserNT</b> may be less than the number passed to <b>MigrateUser9x</b>.</p>
<p>
Your migration DLL is responsible for managing its private data created and stored during <b>MigrateUser9x</b> and processed during <b>MigrateUserNT</b>.</p>
<p>
Your migration DLL must not display user messages within its <b>MigrateUserNT</b> function.</p>
<h3><a name="migext_migratesystemnt"></a>MigrateSystemNT</h3>
<pre><code><b>LONG
CALLBACK 
MigrateSystemNT ( 
   IN HINF </b><i>AnswerFileHandle<b>,
   </b></i><b>LPVOID </b><i>Reserved</i><b>
   );</b></code></pre>
<h4><i>Parameter</i></h4>
<p>
<i>AnswerFileHandle</i></p>
<p class=indent>
INF handle to the answer file being used for the upgrade process. This file contains settings generated by Setup, the attending user, and all migration DLLs. You can access the file referenced by this handle using the Setup functions. Do not close this handle at any time.</p>
<p>
<i>Reserved</i></p>
<p class=indent>
Reserved for future use.</p>
<h4><i>Return Value</i></h4>
<ul type=disc>
<li>
ERROR_SUCCESS if the migration of system-wide settings is successful.</li>
</ul>
<p>
Other error codes will terminate the processing of your migration DLL. However, Windows NT Setup will proceed. Ideally, only critical problems (such as a hardware failure) should generate terminating error codes.</p>
<p>
Exceptions generated by your migration DLL cause Setup to report RPC error messages. Setup provides more information in SETUPERR.LOG.</p>
<h4><i>Remarks</i></h4>
<p>
Your migration DLL is responsible for managing its private data created and stored during <b>MigrateSystem9x</b> and processed during <b>MigrateSystemNT</b>.</p>
<p>
Your migration DLL must not display user messages in its <b>MigrateSystemNT</b> function.</p>
<h2><a name="migext_file"></a>The MIGRATE.INF File</h2>
<p>
During the Windows 9<i>x</i> phase of the upgrade, Windows NT Setup creates and uses MIGRATE.INF files to collect file information from all migration DLLs. During the Windows NT portion of the upgrade, Setup uses this same file to provide that information back to the submitting migration DLL. </p>
<p>
Each working directory passed to a migration DLL has a MIGRATE.INF file in it. The sections are:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=30%><b>Section</b></td>
<td class=label width=70%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=30%><a href="#migext_[version]">[Version]</a></td>
<td width=70%>This is a generic section required for every Windows 9<i>x</i>-style INF. It contains information about the version of Windows NT being used for the upgrade. Setup writes to this section. </td>
</tr>
<tr valign=top>
<td width=30%><a href="#migext_[migpath]">[Migration Paths]</a></td>
<td width=70%>This section contains a list of Win32 paths to files requested by your migration DLL through the <b>QueryVersion</b> function <i>ExeNamesBuf</i> parameter. Each line represents the full path to a file. Setup writes to this section. </td>
</tr>
<tr valign=top>
<td width=30%><a href="#migext_[excluded]">[Excluded Paths]</a></td>
<td width=70%>This section contains a list of paths not part of the active Windows 9<i>x</i> system configuration. Setup does not search through any of these paths or their subdirectories. Excluded paths include directories on the system drive used by other operating systems, network drives, and substituted or compressed drives. Setup writes to this section. </td>
</tr>
<tr valign=top>
<td width=30%><a href="#migext_[handled]">[Handled]</a></td>
<td width=70%>You use this section to inform Windows NT Setup about files, directories and registry entries in the active Windows 9<i>x</i> installation you intend to migrate using your migration DLL. <p>
Setup assumes that files, directories, and registry entries listed here are compatible with Windows NT 5.0. Therefore, users will not be warned about incompatibilities associated with these components. All file names, directories, and registry entries listed in this section must be valid on the active Windows 9<i>x</i> system.</p>
<p>
You can use the <b>WritePrivateProfileString</b> function for adding lines to this section.</p>
</td>
</tr>
<tr valign=top>
<td width=30%><a href="#migext_moved">[Moved]</a></td>
<td width=70%>You use this section to inform Windows NT Setup about files and directories you plan to move, rename, or delete during the migration. This enables Setup to adjust the relevant Windows NT Explorer shell links. <p>
You can use the <b>WritePrivateProfileString</b> function for adding lines to this section.</p>
</td>
</tr>
<tr valign=top>
<td width=30%><a href="#migext_[incompatible]">[Incompatible Messages]</a></td>
<td width=70%>You use this section to present messages to a user through the Setup incompatibility report (displayed during the Windows 9<i>x</i> phase of the upgrade process). The report is presented to the user before any changes are made to the computer, and is useful when you intend to change the behavior of an application, or when you plan to remove application components.</td>
</tr>
<tr valign=top>
<td width=30%><a href="#migext_[message]">[&lt;Message Object Section&gt;]</a></td>
<td width=70%>A message object section provides a mechanism for you to associate one or more message objects (file, directory, and registry location) with a message specified in the <b>[Incompatible Messages]</b> section.</td>
</tr>
<tr valign=top>
<td width=30%><a href="#migext_[space]">[NT Disk Space Requirements]</a></td>
<td width=70%>You use this section to specify the amount of disk space (on a per drive basis) your migration DLL requires during the Windows NT phase of the upgrade. Setup uses this information to calculate the total amount of space required for the upgrade. If sufficient space is unavailable, Setup informs the user accordingly during the Windows 9x phase of the upgrade.</td>
</tr>
</table><br>
<h3><a name="migext_[version]"></a>[Version] Section</h3>
<p>
This is a generic section required for every Windows 9<i>x</i>-style INF. It contains information about the version of Windows NT being used for the upgrade. Your DLL cannot modify it.</p>
<p>
<b>Signature<i> </i></b><i>= &lt;File Signature&gt;</i></p>
<p class=indent>
The signature of the file. For example, $Windows NT$. This is the default. </p>
<p>
<b>SetupOS</b><i> = &lt;OS Identifier&gt;</i></p>
<p class=indent>
<i>OS Identifier </i>specifies the operating system. For the upgrade, this value is <b>Microsoft® Windows NT® Operating System</b>.</p>
<p>
<b>SetupPlatform</b><i> = &lt;Platform Identifier&gt;</i></p>
<p class=indent>
<i>Platform Identifier</i> specifies the object Windows NT platform upgrade. The value can be either <b>Workstation</b> or <b>Server</b>.</p>
<p>
<b>SetupBuild</b><i> = &lt;Build Identifier&gt;</i></p>
<p class=indent>
<i>Build Identifier</i> specifies the object Windows NT build upgrade. This value will be 1382 or higher (depending on the build).</p>
<p>
See the Win32 SDK for details on the non-migration information that may be contained in the <b>[Version] </b>section of Windows 9<i>x</i>-style INFs.</p>
<h3><a name="migext_[migpath]"></a>[Migration Paths] Section</h3>
<p>
This section contains a list of Win32 paths to files requested by your migration DLL through the <b>QueryVersion</b> function <i>ExeNamesBuf</i> parameter. Each line represents the full path to a file. Setup writes to this section. </p>
<p>
Your migration DLL can read the file paths listed here using the Setup API functions <b>SetupGetLineCount</b> and <b>SetupGetLineText</b>.</p>
<p>
If multiple copies of a particular file name are found (such as versions installed by other applications), multiple paths to the file name will be listed in this section. When this happens, it is up to your migration DLL to determine which executables are valid for migrating your application.</p>
<p>
If a file is not found in the active Windows 9<i>x</i> system, it will not be listed. </p>
<h3><a name="migext_[excluded]"></a>[Excluded Paths] Section</h3>
<p>
This section contains a list of paths that are not part of the active Windows 9<i>x</i> system configuration. Setup does not search through any of these paths or their subdirectories. Excluded paths include directories on the system drive used by other operating systems, network drives, and substituted or compressed drives. Setup writes to this section. </p>
<p>
If your application is installed in any one of the paths listed in this section, your DLL must consider the application as not installed and must return ERROR_NOT_INSTALLED when initializing. </p>
<p>
Your migration DLL can read the paths listed in this section using the Setup API <b>SetupGetLineCount</b> and <b>SetupGetLineText</b> functions. You can then use string matching to determine if a path you need is excluded. Your DLL must never make changes to the directories listed in this section.</p>
<h3><a name="migext_[handled]"></a>[Handled] Section</h3>
<p>
You use this section to inform Windows NT Setup about files, directories, and registry entries in the active Windows 9<i>x</i> installation you intend to migrate using your migration DLL. </p>
<p>
Setup assumes that files, directories, and registry entries listed here are compatible with Windows NT 5.0. Therefore, it shall not warn users about incompatibilities associated with these components, nor will any processing be performed. For example, specifying a file path to a file in the system directory will cause it not to be moved to system32. Similarly, "handled" registry entries will not be copied to NT.</p>
<p>
All file names, directories and registry entries listed in this section must be valid on the active Windows 9<i>x</i> system.</p>
<p>
You can use the <b>WritePrivateProfileString</b> function to add lines to this section.</p>
<p>
The syntax for lines in this section is:</p>
<p>
<i>&lt;Identifier Object&gt; = &lt;Identifier Type&gt;</i></p>
<p>
where:</p>
<p>
<i>Identifier Object</i></p>
<p class=indent>
Specifies the name or path to a Windows 9<i>x</i> file, directory or registry location. Files and directories are in long file name format. Registry paths are of the form:</p>
<p class=indent>
&lt;Root&gt;\&lt;SubKey&gt;\&lt;SubKey&gt;\&lt;…&gt; [&lt;Value Name&gt;] </p>
<p class=indent>
where:</p>
<p class=indent>
<i>Root</i> </p>
<p class=indent>
Specifies the registry root. It can be any one of HKEY_LOCAL_MACHINE, HKLM, HKEY_ROOT, or HKR (migration DLLs can only handle a registry key for ALL users, not for individual users).</p>
<p class=indent>
<i>SubKey</i></p>
<p class=indent>
Specifies one or more registry keys separated by back slashes (\).</p>
<p class=indent>
<i>Value Name</i></p>
<p class=indent>
(Optional) Specifies a registry value name enclosed in square brackets. An empty square bracket ([ ]) specifies the default value for the specified key name.</p>
<p class=indent>
Registry keys or value names themselves may contain square brackets ([ ]), tildes (~) or characters with values greater than 127. You must enclose hexadecimal value for these characters in tildes (~) when writing them as registry values to the [Handled] section. For more information, see <a href="#migext_handling">Handling Special String Characters</a>.</p>
<p>
<i>Identifier Type </i></p>
<p class=indent>
Identifies the type of <i>&lt;Identifier Object&gt; </i>to be handled<i>.</i> It must be one of the following three values:</p>
<p class=indent>
<b>File</b></p>
<p class=indent>
The object specified refers to a long file name (including the full path to the file). This must be a full path, without environment variables, and without short versions of long file names.</p>
<p class=indent>
<b>Directory</b></p>
<p class=indent>
The object specified refers to a directory (including the full path to the directory).</p>
<p class=indent>
<b>Registry</b></p>
<p class=indent>
The object specified refers to a registry key (including the full path to that key).</p>
<h3><a name="migext_moved"></a>[Moved] Section</h3>
<p>
Use this section to inform Windows NT Setup about files and directories you plan to move, rename, or delete during the migration. This enables Setup to adjust the relevant Windows NT Explorer shell links. </p>
<p>
You can use the <b>WritePrivateProfileString</b> function for adding lines to this section. Listing a file here will keep it from being processed in any other way, just as it was in the [Handled] section.</p>
<p>
The syntax for this section is:</p>
<p>
<i>&lt;OldPath&gt; = &lt;NewPath&gt;</i></p>
<p>
where: </p>
<p>
<i>OldPath</i></p>
<p class=indent>
Specifies the filename or path of a Windows 9<i>x</i> file or directory to be moved or deleted. Filenames and paths are in long file name format. </p>
<p>
<i>NewPath</i></p>
<p class=indent>
Specifies the new filename or path, again in long file name format. If <i>NewPath</i> is empty or not specified, Setup will delete <i>OldPath</i>. </p>
<h3><a name="migext_[incompatible]"></a>[Incompatible Messages] Section</h3>
<p>
Use this section to present messages to a user through the Setup incompatibility report (displayed during the Windows 9<i>x</i> phase of the upgrade process). The report is presented to the user before any changes are made to the computer, and is useful when you intend to change the behavior of an application, or when you plan to remove application components.</p>
<p>
The syntax for this section is:</p>
<p>
<i>&lt;Message Object Section&gt; = &lt;Message&gt;</i></p>
<p>
where:</p>
<p>
<i>Message Object Section </i></p>
<p class=indent>
Specifies the name of a custom section (defined by your migration DLL) that contains a list of message objects, such as files, directories, and registry entries. The name may be any combination of uppercase and lower case letters, numbers, and spaces. It may not start or end with a space. By listing one or more message objects in a separate section, your DLL can associate several message objects with a single message. The value for <i>Message Object Section</i> is used as the component string in the compatibility report presented to the end user.</p>
<p>
<i>Message</i></p>
<p class=indent>
A string describing the details of the incompatibility or message to be displayed to the user. The user will see the text in a multi-line, scrollable, read-only edit control.</p>
<p class=indent>
For example, this incompatibility section may contain the following line:</p>
<pre><code>MyAppMsg = "The DOS and Real-mode portions of Myapp.exe are not supported on Windows NT"
</code></pre>
<p class=indent>
Where <i>MyAppMsg</i> refers to another section containing the list of files, directories and registry entries associated with the message string.</p>
<h4>Notes</h4>
<p>
When you write an entry to the [Incompatible Messages] section, a <i>Message Object Section</i> must provide one or more objects associated with the message.</p>
<p>
Your migration DLL is responsible for managing the code page and language dependencies of the messages listed in this section. In particular, the text in the [Incompatible Messages] section must be in the same language as the active Windows 9<i>x</i> system. Your DLL must not write messages to this section if it does not support the active operating system language.</p>
<p>
The user has an option to view, print, or save the incompatibility report generated. This report will associate the <i>ProductID</i> with each <i>Message</i>.</p>
<h3><a name="migext_[message]"></a>[&lt;Message Object Section&gt;] Section</h3>
<p>
A message object section provides a mechanism for you to associate one or more message objects (file, directory, and registry location) with a message specified in the [Incompatible Messages] section. The [Handled] section describes how to specify a message object.</p>
<p>
The section name is defined by your migration DLL. Each line has the following syntax:</p>
<p>
<i>&lt;Message Object&gt; = &lt;Identifier Type&gt;</i></p>
<p>
where:</p>
<p>
<i>Message Object</i></p>
<p class=indent>
Specifies a Windows 9x file, path or registry entry. A file or path must be specified in long filename format.</p>
<p>
<i>Identifier Type</i></p>
<p class=indent>
Identifies the type of <i>&lt;Message Object&gt;.</i> It can only have one of the following three values:</p>
<p class=indent>
<b>File</b></p>
<p class=indent>
The object specified refers to a long file name (including the full path to the file).</p>
<p class=indent>
<b>Directory</b></p>
<p class=indent>
The object specified refers to a directory (including the full path to the directory).</p>
<p class=indent>
<b>Registry</b></p>
<p class=indent>
The object specified refers to a registry key (including the full path to that key).</p>
<h4>Notes</h4>
<p>
Setup uses the value for <i>Message Object Section</i> to develop a hierarchy for incompatibility messages. The use of the section name enables your migration DLL to organize multiple incompatibility messages in the same format that Setup uses. Setup processes the section name in one of two ways:
<ol>
<li>
If the name of the section matches <i>ProductID</i>, Setup displays the message at the root level of the incompatibility message tree. The <i>ProductID</i> itself is listed in a tree control, and when the user clicks on the root item, the incompatibility message is shown in an edit control.<br><br></li>
<li>
If the name of the section contains one or more backslashes, Setup separates the string at the backslashes to create the hierarchy. Setup limits the number of levels in the tree to 10. Optimally, you should organize your messages into three levels.<p class=tl>
Using the section name in this way achieves unique children for each migration DLL, organized under a single item at the root. Because ObjectSection is used for display purposes, your DLL must provide localized strings.</P><p class=tl>
Setup treats all objects in a section as a set. If every object in the set is found in any [Handled] section (including ones provided by other vendors), no incompatibility message will be displayed for the particular object, even if the message is listed in [Incompatible Messages]. If only some or none of the objects are handled, the message will be displayed.</P></li>
</ol>
<h3><a name="migext_[space]"></a>[NT Disk Space Requirements] Section</h3>
<p>
You use this section to specify the amount of disk space (on a per-drive basis) your migration DLL requires during the Windows NT phase of the upgrade. Setup uses this information to calculate the total amount of space required for the upgrade. If insufficient space is available, Setup informs the user accordingly during the Windows 9<i>x</i> phase of the upgrade.</p>
<p>
The syntax for this section is:</p>
<p>
<i>&lt;DriveLetter&gt; = &lt;Space Required&gt;</i></p>
<p>
where:</p>
<p>
<i>DriveLetter </i></p>
<p class=indent>
Specifies the drive/partition (single letter without a colon or backslash) in which a migration DLL requires space for its private data. Setup will ignore drives/partitions that are also listed in the <b>[Excluded Paths]</b> section.</p>
<p>
<i>Space Required </i></p>
<p class=indent>
Is an integer that indicates the amount of disk space in (bytes) required by a migration DLL during the Windows NT phase of Setup. When calculating space requirements, the amount of space lost from directory and cluster use must be taken into account. The number does not include the files copied into the working directory during the Windows 9<i>x</i> phase. </p>
<p>
If this section is not present, or if no drives or partitions are specified, Setup assumes that the migration DLL requires no additional hard disk space to migrate the target application. </p>
<p class=indent>
<b>Important:</b> Be sure to specify the correct disk space requirement data. If you cannot calculate disk space requirements accurately, you should provide a liberal estimate of the space required.</p>
<h2><a name="migext_sample"></a>Sample Migrate.inf file</h2>
<pre><code>;
; Sample migrate.inf file
;
[Version]
Signature = $Windows NT$
SetupOS = Microsoft(R) Windows NT(R) Operating System
SetupPlatform = Workstation
SetupBuild = 1610

[Migration Paths]
"c:\windows\foo.exe"
"c:\temp\foo.exe"
"C:\program files\foo\bar.exe"
"C:\foofiles\bar.exe"

[Excluded Paths]
"c:\winnt40"
"f:\"

[Handled]
"C:\windows\foo.exe"=File
"C:\windows\foo.dll"=File
"c:\Program Files\foo"=Path
"HKLM\Software\Foo-Bar, Inc."=Registry

[Moved]
;moved
"c:\dir\boo.exe"="c:\dir\nt\boo.exe"

;moved and replaced 
"c:\Windows\foo.exe"="c:\Windows\foo\foo_nt.exe" 

;deleted 
"c:\Windows\foo\Win9x"="" 

[Incompatible Messages]
;the message must be on one line, but can be long
Foo-Bar ="The application Foo-Bar does not support the DOS component 'boo' on Windows NT."

[Foo-Bar]
"C:\dir\boo.exe"=File
"C:\dir\boo.dll"=File

[NT Disk Space Requirements]
c=104096
d=16384</code></pre>
</BODY>
</HTML>

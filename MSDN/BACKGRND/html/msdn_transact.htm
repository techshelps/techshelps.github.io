<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Transaction Context Objects in Microsoft Transaction Server</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_transact"></a>Transaction Context Objects in Microsoft Transaction Server</h1>
<p>
Microsoft Corporation</p>
<p>
June 1997</p>
<h2>Introduction</h2>
<p>
The transaction context object allows base clients to compose the work of multiple Microsoft® Transaction Server (MTS) objects into a single transaction, without having to develop a new component specifically for that purpose.</p>
<p>
The transaction context object's methods use its context object as follows:
<ul type=disc>
<li>
<b>CreateInstance</b>—Calls <b>CreateInstance</b> and returns a reference to the newly created object.</li>
</ul>
<p>
<img src="transact1.gif" border=0>
<ul type=disc>
<li>
<b>Commit</b>—Calls <b>SetComplete</b> and returns.</li>
</ul>
<p>
<img src="transact2.gif" border=0>
<ul type=disc>
<li>
<b>Abort</b>—Calls <b>SetAbort</b> and returns.</li>
</ul>
<p>
<img src="transact3.gif" border=0></p>
<p>
The transaction context component is defined as <b>Requires a New Transaction</b>. You cannot use the transaction context object to enlist in an existing transaction.</p>
<p>
As an example, suppose you have two components, Walk and ChewGum. Each component is defined as <b>Supports Transactions</b> and calls <b>SetComplete</b> when it is finished with its work. A base client could compose the work done by each component in a single transaction.</p>
<pre><code>Dim objTxCtx As TransactionContext
Dim objWalk As MyApp.Walk
Dim objChewGum As MyApp.ChewGum

' Get TransactionContext
Set objTxCtx = _
 &nbsp;&nbsp; CreateObject("TxCtx.TransactionContext")

' Create instances of Walk and ChewGum
Set objWalk = _
 &nbsp;&nbsp; objTxCtx.CreateInstance("MyApp.Walk")
Set objChewGum = _
 &nbsp;&nbsp; objTxCtx.CreateInstance("MyApp.ChewGum")

' Both components do work
objWalk.Walk
objChewGum.ChewGum

' Commit the transaction
objTxCtx.Commit
</code></pre>
<h2>Transaction Context Object Limitations</h2>
<p>
Note the following limitations when using a transaction context object:
<ul type=disc>
<li>
Transaction composition<br><br></li>
<li>
Location transparency<br><br></li>
<li>
Base client does not have context</li>
</ul>
<h3>Transaction Composition</h3>
<p>
When using a transaction context object, the application logic that composes the work into a single transaction is tied to a specific base client implementation and the advantages of using MTS components are lost. These implementations include:
<ul type=disc>
<li>
Capability to reuse the application logic as part of an even larger transaction<br><br></li>
<li>
Imposing declarative security<br><br></li>
<li>
Flexibility to run the logic remotely from the client</li>
</ul>
<h3>Location Transparency</h3>
<p>
The transaction context object runs in process with the base client, which means that MTS must exist on the base client computer. This may not be a problem, for example, when the transaction context object is used from an Active Server Page (ASP) that is running on the same server as MTS.</p>
<h3>Base Client Does Not Have Context</h3>
<p>
You do not get a context for the base client when you create a transaction context object. Transactional work can only be done indirectly, through MTS objects created by using the transaction context object. In particular, the base client cannot use MTS resource dispensers (such as ODBC) and have the work included in the transaction. For example, developers may be familiar with the following syntax for doing transactional work on relational database systems:</p>
<pre><code>BEGIN TRANSACTION
 &nbsp;&nbsp; DoWork
COMMIT TRANSACTION
</code></pre>
<p>
Using the transaction context object in a similar way does not yield the desired result:</p>
<pre><code>Set objTxCtx = CreateObject("TxCtx.TransactionContext")
 &nbsp;&nbsp; DoWork
 &nbsp;&nbsp; objTxCtx.Commit
Set objTxCtx = Nothing
</code></pre>
<p>
The call to <b>DoWork</b> in this example will not be enlisted in a transaction. You must build an MTS component that calls <b>DoWork</b>, create an object instance of that component using the transaction context object, then call that object from the base client in order for the work to be part of the client-controlled transaction.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Writing Code for International Use</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_intlcode"></a>Writing Code for International Use</h1>
<p>
Microsoft Corporation</p>
<p>
Updated April 7, 1997</p>
<h4>Contents</h4>
<p>
<a href="#intlcodeintroduction">Introduction</a><br>
<a href="#working with local language in your code">Working with Local Language in Your Code</a><br>
<a href="#using string tables">Using String Tables</a><br>
<a href="#using string tables in microsoft excel">Using string tables in Microsoft Excel</a><br>
<a href="#using string tables in microsoft word">Using string tables in Microsoft Word</a><br>
<a href="#using string tables in microsoft access">Using string tables in Microsoft Access</a><br>
<a href="#localizing text at run time">Localizing Text at Run Time</a><br>
<a href="#working with local formatting in your code">Working with Local Formatting in Your Code</a><br>
<a href="#formatting dates">Formatting Dates</a><br>
<a href="#formatting currency">Formatting Currency</a><br>
<a href="#formatting numeric values and separators">Formatting Numeric Values and Separators</a><br>
<a href="#working with character sets">Working with Character Sets</a><br>
<a href="#string manipulation">String Manipulation</a><br>
<a href="#displaying and printing text">Displaying and Printing Text</a></p>
<h2><a name="intlcodeintroduction"></a>Introduction</h2>
<p>
In previous versions of Microsoft® Office, you could use non-English keywords to reference objects if you included the proper object library with your application. In Office 97, object libraries are no longer localized; therefore, you must use English keywords to reference objects.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If a user opens a document in Microsoft Excel 97, Microsoft Access 97, or PowerPoint® 97 that contains localized Visual Basic® for Applications (VBA) code written in a previous version of the application, the keywords in the code are converted into English. However, localized WordBasic code cannot be converted into English VBA code. If your solution uses localized WordBasic code in localized versions of Word 6.0 or Word 96, the code will run in Word 97 if you recompile it using the attached Word typelib.</p>
<p>
In the context of this paper, a <i>locale</i> is the region selected from the <b>Regional Settings</b> tab in the <b>Regional Settings Properties</b> dialog box in Control Panel. An <i>object library</i> is a file with an .olb extension that determines what words and symbols Visual Basic can understand—that is, the names of objects, properties, and methods you can type into a Visual Basic module.</p>
<p>
This article addresses basic issues related to writing international code in an Office 97 Visual Basic programming environment. For a more advanced perspective on localization issues, including API functions, code-page support, and keyboard layouts, refer to <i>Developing International Software for Windows 95 and Windows NT</i> by Nadine Kano (ISBN 1-55615-840-8). This book is published by Microsoft Press and available wherever computer books are sold or from the Microsoft Press Web site (<a href="http://mspress.microsoft.com/">http://mspress.microsoft.com/</a>).</p>
<h2><a name="working with local language in your code"></a>Working with Local Language in Your Code</h2>
<p>
One of the first things you should consider as you develop an international application is the way messages from your application are presented to the user. In localized (translated) versions of Microsoft Excel, Microsoft Word, Microsoft PowerPoint, and Microsoft Access, error messages appear to users in their native language. When you develop an application, you must translate your own messages. </p>
<p>
You can translate messages into your user's native language in a number of ways. One solution is to construct a <i>string table</i> (a table of messages that are each translated into the language of your user) at design time and reference the cells in the table when you want to display a message. String tables are easier to maintain because they are separate from the code, but accessing cells in a table, especially if the table is large, may make your application run slower. Another solution is to assign message text from the appropriate language to variables at run time and reference the variables when you want to display a message. Assigning text at run time is faster but is more difficult to maintain because localized text is combined with programming code.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;String tables cannot be implemented in PowerPoint because only Visual Basic code is stored in the PowerPoint project file (.ppa). </p>
<h3><a name="using string tables"></a>Using String Tables</h3>
<p>
To prevent your user from altering the contents of a string table, the table should be hidden from the user. In Microsoft Excel, you can hide the table from your users by placing the table on a worksheet and simply hiding the worksheet, or you can distribute your solution as a Microsoft Excel add-in. In Word, you can hide the table by placing it in a document and saving the document as a template. Then distribute your application as a global template.</p>
<h4><a name="using string tables in microsoft excel"></a>Using string tables in Microsoft Excel</h4>
<p>
You can take advantage of the way Microsoft Excel references named ranges as you create your string table. For example, the following string table contains messages localized into English, French, and German.</p>
<p>
<img src="intlcode1.gif" border=0></p>
<p class=label>
<b>Figure 1. A string table displaying localized text in a Microsoft Excel application.</b></p>
<p>
To use the string table, define names for cells in the Localized Strings column. Then use the Offset method to retrieve translated text from the appropriate language column. To display a specific message from this table in English, use 1 for the <b>columnOffset</b> argument; for French, use 2; and for German, use 3. You can obtain the column offset value in either of the following ways:
<ul type=disc>
<li>
Display a dialog box asking the user for a language or country name. Then define a public variable, and assign it an offset value according to the user's input.<br><br></li>
<li>
Use the International property of the Application object to determine the language version of Microsoft Excel (<b><i>xlCountryCode</i></b>) or the current country setting of the operating system (<b><i>xlCountrySetting</i></b>). Convert the result to a column offset value, and assign the value to a Public variable.</li>
</ul>
<p>
The following code determines an offset code based on the language version of Microsoft Excel you're using.</p>
<pre><code>Public GlobalOffsetCode

Sub GetGlobalOffsetCode()
 &nbsp;&nbsp; Select Case Application.International(xlCountryCode)
 &nbsp;&nbsp; Case 1:&nbsp;&nbsp;&nbsp;&nbsp; 'US English
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GlobalOffsetCode = 1
 &nbsp;&nbsp; Case 33:&nbsp;&nbsp;&nbsp; 'French
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GlobalOffsetCode = 2
 &nbsp;&nbsp; Case 49:&nbsp;&nbsp;&nbsp; 'German
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GlobalOffsetCode = 3
 &nbsp;&nbsp; Case Else:&nbsp; 'US English as the default language
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GlobalOffsetCode = 1
 &nbsp;&nbsp; End Select
End Sub
</code></pre>
<p>
The following code uses the offset code to display a welcome message in the user's native language.</p>
<pre><code>WelcomeMsg = ThisWorkbook.Worksheets("LocalizationTable").Range _
 &nbsp;&nbsp; ("Welcome").Offset(0, GlobalOffsetCode).Value
MsgBox WelcomeMsg
</code></pre>
<p>
You can use a similar technique to change the text, positions, and sizes of items in dialog boxes, making your code truly transportable.</p>
<h4><a name="using string tables in microsoft word"></a>Using string tables in Microsoft Word</h4>
<p>
You can create a similar string table to display localized text in a Word application. The following string table includes text translated into English, French, and German.</p>
<p>
<img src="intlcode2.gif" border=0></p>
<p class=label>
<b>Figure 2. A string table displaying localized text in a Word application.</b></p>
<p>
Because Word doesn't support named ranges, you should define public constants representing each of the messages you localize and use the constants as row indexes for the table.</p>
<p>
The following constants apply to the string table above.</p>
<pre><code>Public Const iWelcome As Integer =1
Public Const iCustomerName As Integer = 2
Public Const iAcctNumber As Integer = 3
Public Const iNotValidMessage As Integer = 4
</code></pre>
<p>
Then define a column variable and assign it a value in either of the following ways:
<ul type=disc>
<li>
Display a dialog box asking the user for a language or country name. Then&nbsp; set the variable according to the user's input.<br><br></li>
<li>
Use the International property of the Application object to determine the locale version of Word (<i>wdProductLanguageID</i>) or use the <b>Country</b> property of the <b>System</b> object to determine the current country setting of the operating system. Convert the result to a column value, and assign the value to a Public variable.</li>
</ul>
<p>
The following code determines the correct column for the string table based on the language version of Word you're using.</p>
<pre><code>Public iTheLang

Sub GetGlobaltheLang()
 &nbsp;&nbsp; Select Case Application.International(wdProductLanguageID)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case wdEnglishUS
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iTheLang = 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case wdFrench
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iTheLang = 2
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case wdGerman
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iTheLang = 3
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case Else:&nbsp; 'US English as the default language
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iTheLang = 1
 &nbsp;&nbsp; End Select
End Sub
</code></pre>
<p>
The following code uses column and row variables to display a welcome message in the user's native language.</p>
<pre><code>welcomeMsg = Documents("Welcome.doc").Tables(1) _
 &nbsp;&nbsp; .Cell(Row:=iWelcome, Column:=iLangCol)
MsgBox welcomeMsg
</code></pre>
<h4><a name="using string tables in microsoft access"></a>Using string tables in Microsoft Access</h4>
<p>
For information about using string tables with Microsoft Access, see "Detecting Language Version and Internationalizing Text" (<a href="http://www.microsoft.com/AccessDev/Articles/HowToBk.HTM">http://www.microsoft.com/AccessDev/Articles/HowToBk.HTM</a>). You can find this information and more in the book<i>Microsoft Access 95 How-To</i>, by Ken Getz and Paul Litwin (Waite Group Press, ISBN 1-57-169-052-2), available wherever computer books are sold.</p>
<h3><a name="localizing text at run time"></a>Localizing Text at Run Time</h3>
<p>
An alternative to the string table is to localize text at run time. Use a <b>Select Case...End Select</b> structure to assign the appropriate translation to your message text. For example, the following code uses the <b>International</b> property in Word to identify the user's locale and assign the variables accordingly.</p>
<pre><code>Public sWelcome As String
Public sCustName As String

Sub assignText()
Select Case Application.International(wdProductLanguageID)
 &nbsp;&nbsp; Case wdEnglishUS
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sWelcome = "Welcome"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sCustName = "What is your name?"
 &nbsp;&nbsp;&nbsp; Case wdFrench
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sWelcome = "Bienvennue"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sCustName = "Quel est votre nom?"
 &nbsp;&nbsp;&nbsp; Case wdGerman
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sWelcome = "Willkommen"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sCustName = "Wie heißen Sie?"
End Select
End Sub
</code></pre>
<p>
To display the translated text to your user, refer to the appropriate variable name. The following code displays a welcome message in a dialog box in the user's native language.</p>
<pre><code>Msgbox sWelcome
</code></pre>
<h2><a name="working with local formatting in your code"></a>Working with Local Formatting in Your Code</h2>
<p>
It is just as important to display local formatting to your user as it is to display local language. If your application uses numbers, dates, times, or currency, you must format these symbols according to language. Visual Basic helps this process by providing several functions that convert data from one type to another, using locale settings.</p>
<p>
Whenever possible, use locale-aware functions to make your code transportable. This is especially important when you're converting strings to numbers or dates. For example, the Str and Val functions always assume that a period is the decimal separator, but CStr, CDbl, CSng, CInt, and CLng use the current operating system regional settings to determine the decimal separator.</p>
<h3><a name="formatting dates"></a>Formatting Dates</h3>
<p>
Don't type dates as strings in your code, because date formats aren't the same in every country. Even locale-aware conversion functions can process strings in ways you might not expect. For example, the following code behaves differently in different locales.</p>
<pre><code>StartDate = "2/3/97"
NewDate = CDate(StartDate)
Msgbox Format(NewDate, "Long Date")
</code></pre>
<p>
When run in an English/United States locale, the variable <i>NewDate</i> contains a value equivalent to February 3, 1997; in an English/Australian locale, <i>NewDate</i> contains a value equivalent to March 2, 1997. This behavior is a potential source of error when you're programming, but it's very useful for processing user input from a dialog box. CDate converts the user's text into the date that the user intends.</p>
<p>
As the programmer, you should always code dates as literals—such as #2/3/97#—so that Visual Basic recognizes the exact date you intend. For example, in the following code, <i>NewDate</i> contains a value equivalent to either February 3, 1997, or March 2, 1997, depending on the locale of the programmer, but not the locale of the user. The date literal is interpreted in the context of the programmer's locale. The date is the same for all users wherever the code is run.</p>
<pre><code>StartDate = #2/3/97#
NewDate = CDate(StartDate)
</code></pre>
<h3><a name="formatting currency"></a>Formatting Currency</h3>
<p>
Similarly, don't store a currency value as a string that includes a currency symbol, because the currency symbol varies according to locale. For example, the following code generates an error in every locale except locales where the dollar sign ($) is the currency symbol.</p>
<pre><code>Money = "$1.22"
NewMoney = CCur(Money)
</code></pre>
<p>
To prevent this error, store currency values as decimal numbers, as shown in the following example. (This example assumes that the period is the decimal separator in the programmer's locale, but the code runs correctly no matter what the decimal separator is in the user's locale.)</p>
<pre><code>Money = 1.22
NewMoney = CCur(Money)
</code></pre>
<h3><a name="formatting numeric values and separators"></a>Formatting Numeric Values and Separators</h3>
<p>
In the United States, the period (.) is used as the decimal separator. However, in most European countries, the comma (,) is used as the decimal separator. Similarly, in the United States, a comma is used as the thousands separator to isolate groups of three digits to the left of the decimal separator. In several European countries, a period or a space is used for this purpose.</p>
<p>
In Visual Basic, the <b>Str</b> and <b>Val</b> functions always assume a period is the decimal separator. In a majority of locales, this assumption is not valid. Instead, use the <b>CStr</b>, <b>CDbl</b>, <b>CSng</b>, <b>CInt</b>, and <b>CLng</b> functions to provide international conversions from any other data type to the data type you need. These functions use the system locale to determine the decimal separator. For more information about using these functions, refer to Visual Basic Help.</p>
<h2><a name="working with character sets"></a>Working with Character Sets</h2>
<p>
Characters from various languages are encoded in a table of characters, called a code page. A code page allows an operating system to provide support for character sets and keyboard layouts used in different countries. The script for each language is represented by its own code page. Each foreign language edition of Windows uses a different structure to support a particular character set. For example: </p>
<p>
<b>Single-byte</b> <b>(SBCS):</b> Supports 256 characters, each identified by a unique 1-byte character value. This type of code is used for all European editions (Latin and non-Latin languages). A bi-directional (BiDi) character set is a single-byte code page that allows for bi-directional text. This type is used by Arabic and Hebrew editions.</p>
<p>
<b>Double-byte</b> <b>(DBCS):</b> Supports thousands of characters, each identified by a unique 2-byte character value. This type of code page is used by all Far Eastern languages (such as Japanese and Chinese Traditional). 
<ul type=disc>
<li>
In locales where DBCS is used, both single-byte and double-byte characters are included in the character set. The single-byte characters used in these locales conform to the 8-bit national standards for each country and correspond closely to the ASCII character set. However, certain ranges of codes in SBCS are designated as <i>lead bytes</i> for DBCS characters. A consecutive pair made of a lead byte and a trail byte represents one double-byte character. When you develop an application that uses DBCS, you should consider how your application will process text strings in a file, and how it will display and print text.</li>
</ul>
<p>
<b>Unicode:</b> All commonly used text characters are represented in this 2-byte character set. Unicode is a standard of encoding characters independent of the languages that use them, thus simplifying localization.
<ul type=disc>
<li>
Each application in Office 97 supports the Unicode standard of character encoding; therefore, the problem of programming for multiple code pages is eliminated. Unicode makes it easier to store, transmit, or process data in your application, but it doesn't format characters so you must localize text displayed to your users.</li>
</ul>
<p>
Users can exchange U.S. and Far East Office 97 documents if they install the appropriate NLS and font files from the \Valupack\fareast directory on the Office 97 CD. These files display Far East characters, read document properties, and read Office 95 documents. For more information about exchanging U.S. and Far East documents, consult the Value Pack Help file.</p>
<p class=indent>
<b><B>Note</B>&nbsp;&nbsp;&nbsp;</b>DBCS is a different character set from Unicode. Both ANSI characters and DBCS characters are converted to Unicode and Unicode characters are converted to ANSI characters or DBCS characters whenever the conversion is needed.</p>
<h3><a name="string manipulation"></a>String Manipulation</h3>
<p>
In locales where DBCS is used, a file may include both double-byte and single-byte characters. Because a DBCS character is represented by two bytes, your Visual Basic code must avoid splitting the bytes. In the following example, assume TESTFILE is a text file containing DBCS characters.</p>
<pre><code>Open "TESTFILE" For Input As #1 ' Open file for input.

' Read all characters in the file.
Do While Not EOF(1)
MyChar = Input(1, #1) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Read a character.

  ' Perform an operation using Mychar.

Loop
Close #1 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Close file.
</code></pre>
<p>
When you read a fixed length of bytes from a binary file, use a <b>Byte</b> array instead of a <i>String</i> variable to avoid the Unicode/ANSI conversion.</p>
<pre><code>Dim MyByteString(0 to 4) As Byte

Get #1,, MyByteString
</code></pre>
<p>
When you use a <i>String</i> variable with <b>Input</b> or <b>InputB </b>to read bytes from a binary file, Unicode conversion occurs and the result is not correct.</p>
<p>
Names of files and directories may also include DBCS characters.</p>
<h3><a name="displaying and printing text"></a>Displaying and Printing Text</h3>
<p>
&nbsp;&nbsp;A DBCS-enabled application should display DBCS characters on DBCS versions of Windows. When you use a font designed for SBCS characters only, DBCS characters may not display correctly on DBCS versions of Windows. If you do not have any DBCS-enabled fonts or do not know which font is appropriate for the target environment, you can use the System or FixedSys fonts because these fonts reside on every environment. Note that System and FixedSys fonts have few variations of their sizes. Similar considerations exist when printing DBCS characters from your application.</p>
<p>
The information contained in this document represents the current view of Microsoft Corporation on the issues discussed as of the date of publication. Because Microsoft must respond to changing market conditions, it should not be interpreted to be a commitment on the part of Microsoft, and Microsoft cannot guarantee the accuracy of any information presented after the date of publication.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Developing Windows 95 Applications in Visual FoxPro</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_win95app"></a>Developing Windows 95 Applications in Visual FoxPro</h1>
<p>
Randy Brown<br>
Microsoft Corporation</p>
<p>
Updated January 1997</p>
<p>
Because Microsoft® Visual FoxPro™ 5.0 is certified as a Windows® 95-compatible development environment, you can use it to create applications that qualify for the Windows 95 Compatibility Seal, as well as the Office 95 Compatibility Seal. See these sections for details.
<ul type=disc>
<li>
Qualifying for the Windows 95 Logo<br><br></li>
<li>
Specific Techniques for Visual FoxPro Applications<br><br></li>
<li>
Qualifying for the Office 95 Logo</li>
</ul>
<h4>Note for Visual FoxPro 5.0 users:</h4>
<p>
Visual FoxPro 5.0 improves many of the areas mentioned below for obtaining the Windows 95 Compatibility Seal. </p>
<p>
Developers no longer need to have special code to handle issues mentioned in the System Metrics section below. New settings on the ColorSource property of a control automatically handle this for you.</p>
<p>
The Visual FoxPro 5.0 Setup Wizard handles Seal requirements automatically for uninstalls.</p>
<h2>Qualifying for the Windows 95 Logo</h2>
<p>
To make your application qualify as Windows 95 Compatible, it must conform to the following guidelines:
<ul type=disc>
<li>
Created or compiled in 32-bit mode<br><br></li>
<li>
Contains UI/shell support<br><br></li>
<li>
Functions under Windows NT®<br><br></li>
<li>
Uses long file names<br><br></li>
<li>
Accounts for Plug and Play</li>
</ul>
<h3>Created or Compiled in 32-Bit Mode</h3>
<p>
The application must be either a Win32 application programming interface executable, compiled with a 32-bit compiler that generates an executable of the PE (Portable Executable) format, or the application must have been created by an application or tool that satisfies the Windows 95 logo requirements and creates 32-bit Windows-based applications. For example, an application written in the 32-bit version of Visual FoxPro would fall into the latter category, because the resulting applications are not necessarily executables.</p>
<h3>Contains UI/Shell Support</h3>
<p>
The application must have UI/Shell support. To conform to <i>The Windows Interface Guidelines for Software Design</i>, this means:
<ul type=disc>
<li>
It must register 16x16 and 32x32 pixel icons for each file type and the application.<br><br></li>
<li>
It should conform to the Windows 95 look as described in the guidelines. The intent is not for all applications to look the same, but that applications with the Windows 3.1 “look” be updated. It should use system-supplied dialogs and controls, but this is recommended, not required.<br><br></li>
<li>
The application must use system metrics for sizing.<br><br></li>
<li>
The application should use the system colors.<br><br></li>
<li>
The right mouse button should be reserved for calling shortcut menus.<br><br></li>
<li>
The application must follow the Windows 95 application setup guidelines. At a minimum, this means that you use an automated installation process, use the registry to store configuration information instead of modifying the WIN.INI or SYSTEM.INI files, and provide complete uninstall capability with your application.</li>
</ul>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can find <i>The Windows Interface Guidelines for Software Design</i> at <b>http://www.microsoft.com/win32dev/uiguide/</b></p>
<h3>Functions Under Windows NT</h3>
<p>
The application must run under Windows NT 3.51 or Windows NT 4.0 and degrade gracefully with any Windows 95-specific functionality under Windows NT or any Windows NT-specific functionality under Windows 95.</p>
<h3>Uses Long File Names</h3>
<p>
The application must use long file names. This includes:
<ul type=disc>
<li>
Long file name support.<br><br></li>
<li>
Use of long file names to display all document and data file names in the shell, title bars, dialogs and controls, and icons.<br><br></li>
<li>
Hiding the dot three character extension of names in the application itself.</li>
</ul>
<h3>Accounts for Plug and Play</h3>
<p>
Plug and Play awareness is recommended but not required.
<ul type=disc>
<li>
The application must be aware of slow links.<br><br></li>
<li>
The application must be able to react to system changes (insertion and removal of new devices).</li>
</ul>
<p>
The following requirements are also necessary for applications that work with files:
<ul type=disc>
<li>
Must support UNC path names.<br><br></li>
<li>
Must have OLE Container and/or Object support and OLE drag/drop support. It is recommended (not required) that the application have OLE compound file support with document file summary information and OLE automation support.<br><br></li>
<li>
Needs to support simple mail-enabling using Common Messaging Call (CMC) API or MAPI. That is, it must have a Send or Send Mail command in the File menu.</li>
</ul>
<h2>Specific Techniques for Visual FoxPro Applications</h2>
<p>
To create a Windows 95-compatible application in Visual FoxPro, use these techniques and guidelines:
<ul type=disc>
<li>
User Interface Guidelines<br><br></li>
<li>
Registering File Icons<br><br></li>
<li>
Handling Long File Names<br><br></li>
<li>
OLE Support<br><br></li>
<li>
Simple Mail</li>
</ul>
<h3>User Interface Guidelines</h3>
<ul type=disc>
<li>
Use non-bold buttons, dialogs, and windows throughout.<br><br></li>
<li>
Use consistent shortcuts for common operations (for example, CTRL+O to open the main Visual FoxPro window).<br><br></li>
<li>
Avoid using shortcut menus as the sole means of accessing a command.<br><br></li>
<li>
In general, it is better to retain all menu items, disabling inactive commands as necessary.<br><br></li>
<li>
Follow title capitalization rules for menu items.</li>
</ul>
<h3>Registering File Icons</h3>
<p>
The Project Info dialog contains an option to select a particular .ICO file to attach to a project. When a project is compiled and built, the resulting .APP or .EXE file will contain the .ICO file. This file must register both 16x16 and 32x32 pixel icons.</p>
<p>
You can also use the _SCREEN.ICON property to set the icon displayed in the title bar and task bar.</p>
<h3>Handling Long File Names</h3>
<p>
You must ensure that your code supports long file names. Visual FoxPro will not handle this automatically for you. The file name can include the path name which should be in the UNC format:</p>
<pre><code>\\Server\Share\Directory\....\FileName
</code></pre>
<p>
With long file name support in Windows 95 and Windows NT, folks can now include spaces and periods in their files. This can potentially break code which is heavily reliant on the old DOS naming conventions of an eight character or less name followed by a three character extension. </p>
<p>
The Visual FoxPro native file dialogs will handle much of the work for you; there are, however, situations where you can get yourself in trouble. The following example illustrates this point.</p>
<pre><code>SET RESOURCE TO “MY BIG FOXUSER.DBF”
myrezfile = SYS(2005)
SET RESOURCE TO FOXUSER
SET RESOURCE TO &amp;myrezfile&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; fails
</code></pre>
<p>
In order for the example above to work, you need to place quotes around the file name.</p>
<pre><code>myrezfile = “SYS(2005)”
</code></pre>
<p>
If you are using file names with normal Visual FoxPro commands, it is imperative that you always put quotes around the file name. Macintosh developers are already aware of this issue, but many Windows developers never had to deal with file names containing spaces.</p>
<p>
Another point to consider is that a valid file name can have multiple periods inside it, so don’t rely on simply using ATC( ) to search for a period to derive an extension. In addition, file names no longer need to contain an extension, although it is a good idea to retain them for Visual FoxPro.</p>
<pre><code>COPY TO "Fred's . Big . Barn.DBF"
</code></pre>
<p>
The SET VOLUME command is a great command to use to easily maintain long path names of commonly used locations. Macintosh developers have been using this command for quite some time now, and because paths play such a major role today, it is easier to manage them using volume settings. The following example shows how you can set a volume reference to your old FoxPro® for Windows 2.6 directory.</p>
<pre><code>SET VOLUME x TO e:\\fpw26\
MODIFY COMMAND x:genscrn
</code></pre>
<h3>OLE Support</h3>
<p>
Applications must have OLE Container and/or Object support and OLE drag/drop support. The recommendation (not a requirement) is for the application to have OLE compound file support with doc file summary information and OLE automation support.</p>
<p>
If you have no intention of using OLE in your custom applications, this can be an onerous requirement just to get the Windows 95 seal. You can meet this requirement by including an OLE object in your application which supports drag and drop. For example, if your application includes a form with a Microsoft Excel pivot table, your users will be able to drag and drop from that pivot table to Word documents. As ActiveX controls that support drag and drop become available there will be more options for including drag and drop in your applications.</p>
<h3>Simple Mail</h3>
<p>
Visual FoxPro has three options for implementing mail support:
<ul type=disc>
<li>
Use a Send command (as on the File menu)<br><br></li>
<li>
Use MAPI controls<br><br></li>
<li>
Use the updated FOXMAPI.FLL</li>
</ul>
<p>
The following KB articles offer advice on using MAPI with Visual FoxPro.
<ul type=disc>
<li>
Q135755—How to Use the OLE MAPI Control to Send Mail Messages<br><br></li>
<li>
Q136638—How to Send E-mail Programmatically by Using MSMAPI OLE Control<br><br></li>
<li>
Q106033—How to Send a Mail Message in FoxPro for Windows (FOXMAPI.FLL)</li>
</ul>
<p>
The MAPI and SAPI API’s are different on 16-bit operating systems and on 32-bit operating systems. The Send option is available and works on both. The MAPI ActiveX controls (OCXs) only support 32-bit operating systems. There are new FOXMAPI.FLLs available on CompuServe for both platforms.</p>
<p>
Although it is not recommended, many customers are using 16-bit mail applications under Windows 95. Both the Send option and the MAPI ActiveX controls will not work with this configuration.</p>
<p>
Here are some of the more common mail support questions brought up to PSS and documented in KB articles.</p>
<p>
<b>Q135521: Send Does Not Work Under Windows 95 or Windows NT</b></p>
<p>
If 16-bit Microsoft Mail is used on a 32-bit operating system such as Windows 95 or Windows NT, various MAPI errors occur when trying to use the File Send Command in Visual FoxPro. These same errors also occur when using the MAPIsession and MAPImessage ActiveX controls from within a Visual FoxPro Application. MAPI is finding the 32-bit version of MAPI.DLL and trying to load the 32-bit mail client software. When using a MAPI session and message ActiveX controls under Windows 95 or Windows NT, you must use the 32-bit mail client that is supplied with these products.</p>
<p>
<b>Q128816: Cannot Access MAPI Under Win32s</b></p>
<p>
MAPI custom controls do not do anything with Visual FoxPro running under Win32s. In addition, no error messages are displayed when you use the MAPI custom controls. Due to a missing layer between 32-bit applications and the 16-bit MAPI DLLs, FoxPro (a 32-bit application) cannot communicate with the MAPI ActiveX custom controls under Win32s.</p>
<p>
For an example of how to create a simple messaging form that can send Visual FoxPro data to an e-mail address, search for “Send Mail” in Solution.hlp located in the Visual FoxPro SAMPLES\SOLUTION directory.</p>
<h2>Qualifying for the Office 95 Logo</h2>
<p>
The Office 95 logo identifies applications that are easy for Office users to learn, because they have menus and toolbars consistent with the Office 95 applications. In addition to Windows 95 compatibility, which is mandatory, your application must have the following requirements to be compatible with Office 95:
<ul type=disc>
<li>
Standard Toolbar<br><br></li>
<li>
Toolbar Buttons<br><br></li>
<li>
Main Menu<br><br></li>
<li>
File Menu<br><br></li>
<li>
Edit Menu<br><br></li>
<li>
Help Menu</li>
</ul>
<h3>Standard Toolbar</h3>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=43%><b>Feature</b></td>
<td class=label width=57%><b>Requirement</b></td>
</tr>
<tr valign=top>
<td width=43%>Location, Size &amp; Appearance of Bar</td>
<td width=57%>Mandatory</td>
</tr>
<tr valign=top>
<td width=43%>Small-Format Buttons (default)</td>
<td width=57%>Mandatory</td>
</tr>
<tr valign=top>
<td width=43%>Large-Format Buttons</td>
<td width=57%>Mandatory</td>
</tr>
<tr valign=top>
<td width=43%>Color Buttons (default)</td>
<td width=57%>Mandatory</td>
</tr>
<tr valign=top>
<td width=43%>B-&amp;-W Buttons</td>
<td width=57%>Mandatory</td>
</tr>
<tr valign=top>
<td width=43%>ToolTips</td>
<td width=57%>Mandatory</td>
</tr>
<tr valign=top>
<td width=43%>"View-&gt;Toolbar" Dialog Box</td>
<td width=57%>Mandatory</td>
</tr>
</table><br>
<h3>Toolbar Buttons</h3>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=43%><b>Feature</b></td>
<td class=label width=57%><b>Requirement</b></td>
</tr>
<tr valign=top>
<td width=43%>New </td>
<td width=57%>Mandatory</td>
</tr>
<tr valign=top>
<td width=43%>Open</td>
<td width=57%>Mandatory</td>
</tr>
<tr valign=top>
<td width=43%>Save</td>
<td width=57%>Mandatory</td>
</tr>
<tr valign=top>
<td width=43%>Separator Space</td>
<td width=57%>Mandatory</td>
</tr>
<tr valign=top>
<td width=43%>Print</td>
<td width=57%>Mandatory</td>
</tr>
<tr valign=top>
<td width=43%>Print Preview</td>
<td width=57%>If Supported</td>
</tr>
<tr valign=top>
<td width=43%>Spelling Check</td>
<td width=57%>If Supported</td>
</tr>
<tr valign=top>
<td width=43%>Separator Space</td>
<td width=57%>Mandatory</td>
</tr>
<tr valign=top>
<td width=43%>Cut</td>
<td width=57%>Mandatory</td>
</tr>
<tr valign=top>
<td width=43%>Copy</td>
<td width=57%>Mandatory</td>
</tr>
<tr valign=top>
<td width=43%>Paste</td>
<td width=57%>Mandatory</td>
</tr>
<tr valign=top>
<td width=43%>Paint</td>
<td width=57%>If Supported</td>
</tr>
<tr valign=top>
<td width=43%>Separator Space</td>
<td width=57%>Mandatory</td>
</tr>
<tr valign=top>
<td width=43%>Undo</td>
<td width=57%>If Supported</td>
</tr>
<tr valign=top>
<td width=43%>Redo</td>
<td width=57%>If Supported</td>
</tr>
<tr valign=top>
<td width=43%>Separator Space</td>
<td width=57%>If Supported</td>
</tr>
<tr valign=top>
<td width=43%>Application Specific</td>
<td width=57%>If Supported</td>
</tr>
<tr valign=top>
<td width=43%>Separator Space</td>
<td width=57%>If Supported</td>
</tr>
<tr valign=top>
<td width=43%>Zoom Control</td>
<td width=57%>If Supported</td>
</tr>
<tr valign=top>
<td width=43%>Separator Space</td>
<td width=57%>If Supported</td>
</tr>
<tr valign=top>
<td width=43%>Help Button</td>
<td width=57%>Mandatory</td>
</tr>
</table><br>
<h3>Main Menu</h3>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=43%><b>Feature</b></td>
<td class=label width=57%><b>Requirement</b></td>
</tr>
<tr valign=top>
<td width=43%>File</td>
<td width=57%>Mandatory</td>
</tr>
<tr valign=top>
<td width=43%>Edit</td>
<td width=57%>Mandatory</td>
</tr>
<tr valign=top>
<td width=43%>View</td>
<td width=57%>If Supported</td>
</tr>
<tr valign=top>
<td width=43%>Insert</td>
<td width=57%>If Supported</td>
</tr>
<tr valign=top>
<td width=43%>Format</td>
<td width=57%>If Supported</td>
</tr>
<tr valign=top>
<td width=43%>Tools</td>
<td width=57%>If Supported</td>
</tr>
<tr valign=top>
<td width=43%>Application Specific</td>
<td width=57%>If Supported</td>
</tr>
<tr valign=top>
<td width=43%>Window</td>
<td width=57%>If Supported</td>
</tr>
<tr valign=top>
<td width=43%>Help</td>
<td width=57%>Mandatory</td>
</tr>
</table><br>
<h3>File Menu</h3>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=43%><b>Feature</b></td>
<td class=label width=57%><b>Requirement</b></td>
</tr>
<tr valign=top>
<td width=43%>New</td>
<td width=57%>Mandatory</td>
</tr>
<tr valign=top>
<td width=43%>Open</td>
<td width=57%>Mandatory</td>
</tr>
<tr valign=top>
<td width=43%>Close</td>
<td width=57%>Mandatory</td>
</tr>
<tr valign=top>
<td width=43%>Separator Bar</td>
<td width=57%>Mandatory</td>
</tr>
<tr valign=top>
<td width=43%>Save</td>
<td width=57%>Mandatory</td>
</tr>
<tr valign=top>
<td width=43%>Save As</td>
<td width=57%>Mandatory</td>
</tr>
<tr valign=top>
<td width=43%>Separator Bar</td>
<td width=57%>Mandatory</td>
</tr>
<tr valign=top>
<td width=43%>Page Setup</td>
<td width=57%>If Supported</td>
</tr>
<tr valign=top>
<td width=43%>Print Preview</td>
<td width=57%>If Supported</td>
</tr>
<tr valign=top>
<td width=43%>Print</td>
<td width=57%>Mandatory</td>
</tr>
<tr valign=top>
<td width=43%>Separator Bar</td>
<td width=57%>Mandatory</td>
</tr>
<tr valign=top>
<td width=43%>Application Specific (Send Mail, etc.)</td>
<td width=57%>If Supported</td>
</tr>
<tr valign=top>
<td width=43%>Separator</td>
<td width=57%>If Supported</td>
</tr>
<tr valign=top>
<td width=43%>Most Recently Used List</td>
<td width=57%>Mandatory</td>
</tr>
<tr valign=top>
<td width=43%>Separator Bar</td>
<td width=57%>Mandatory</td>
</tr>
<tr valign=top>
<td width=43%>Exit</td>
<td width=57%>Mandatory</td>
</tr>
</table><br>
<h3>Edit Menu</h3>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=43%><b>Feature</b></td>
<td class=label width=57%><b>Requirement</b></td>
</tr>
<tr valign=top>
<td width=43%>Undo</td>
<td width=57%>If Supported</td>
</tr>
<tr valign=top>
<td width=43%>Repeat</td>
<td width=57%>If Supported</td>
</tr>
<tr valign=top>
<td width=43%>Separator Bar</td>
<td width=57%>If Supported</td>
</tr>
<tr valign=top>
<td width=43%>Cut</td>
<td width=57%>Mandatory</td>
</tr>
<tr valign=top>
<td width=43%>Copy</td>
<td width=57%>Mandatory</td>
</tr>
<tr valign=top>
<td width=43%>Paste</td>
<td width=57%>Mandatory</td>
</tr>
<tr valign=top>
<td width=43%>Paste Special</td>
<td width=57%>If Supported</td>
</tr>
<tr valign=top>
<td width=43%>Separator Bar</td>
<td width=57%>Mandatory</td>
</tr>
</table><br>
<h3>Help Menu</h3>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=43%><b>Feature</b></td>
<td class=label width=57%><b>Requirement</b></td>
</tr>
<tr valign=top>
<td width=43%>Contents</td>
<td width=57%>If Supported</td>
</tr>
<tr valign=top>
<td width=43%>Search for Help On</td>
<td width=57%>Mandatory</td>
</tr>
<tr valign=top>
<td width=43%>Index</td>
<td width=57%>If Supported</td>
</tr>
<tr valign=top>
<td width=43%>Separator Bar</td>
<td width=57%>Mandatory</td>
</tr>
<tr valign=top>
<td width=43%>Tutorial Tools</td>
<td width=57%>If Supported</td>
</tr>
<tr valign=top>
<td width=43%>Separator Tools</td>
<td width=57%>If Supported</td>
</tr>
<tr valign=top>
<td width=43%>Technical Support</td>
<td width=57%>Mandatory</td>
</tr>
<tr valign=top>
<td width=43%>Office Compatible</td>
<td width=57%>Mandatory</td>
</tr>
<tr valign=top>
<td width=43%>About</td>
<td width=57%>Mandatory</td>
</tr>
</table><br>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Automating Microsoft Transaction Server Deployment</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_deploy"></a>Automating Microsoft Transaction Server Deployment</h1>
<p>
Microsoft Corporation</p>
<p>
June 1997</p>
<h2>Abstract</h2>
<p>
This document describes how you can use the scriptable administration objects to automate deployment and distribution of your Microsoft® Transaction Server (MTS) packages. </p>
<h2>The Microsoft Transaction Server Explorer</h2>
<p>
The MTS Explorer lets you configure and deploy packages by using a graphical user interface rather than through programming code. However, if you would like to automate steps in the MTS Explorer, you can use the scriptable administrative objects to program configuration and deployment tasks. Note that the scriptable administrative objects support the same collection hierarchy as the MTS Explorer. The following figure shows the MTS Explorer collection hierarchy.</p>
<p>
<img src="deploy1.gif" border=0></p>
<p class=label>
<b>Figure 1. The Microsoft Transaction Server Explorer collection hierarchy.</b></p>
<p>
For more information about MTS Explorer functionality, refer the Microsoft Transaction Server <i>Administrator’s Guide Help.</i></p>
<h2>Using the Scriptable Administration Objects</h2>
<p>
Microsoft Transaction Server scriptable administration objects are OLE automation objects that you can use to program administrative and deployment procedures, including:
<ul type=disc>
<li>
Installing a Pre-Built Package<br><br></li>
<li>
Creating a New Package and Installing Components<br><br></li>
<li>
Enumerating Through Installed Packages to Update Properties<br><br></li>
<li>
Enumerating Through Installed Packages to Delete a Package<br><br></li>
<li>
Enumerating Through Installed Components to Delete a Component<br><br></li>
<li>
Accessing Related Collection Names<br><br></li>
<li>
Accessing Property Information<br><br></li>
<li>
Configuring a Role<br><br></li>
<li>
Exporting a Package<br><br></li>
<li>
Configuring a Client to Use Remote Components</li>
</ul>
<p>
Note that you can use the scriptable administration objects to automate any task in the MTS Explorer.</p>
<p>
The scriptable administration objects are derived from the IDispatch interface, so you can use any Automation language to develop your package, such as Microsoft Visual Basic version 5.0, Microsoft Visual C++ version 5.0, Microsoft Visual Basic Scripting Edition, and Microsoft JScript.</p>
<p>
Each folder in the MTS Explorer hierarchy corresponds to a collection stored in the catalog data store. The following scriptable objects are used for administration:
<ul type=disc>
<li>
Catalog<br><br></li>
<li>
CatalogObject<br><br></li>
<li>
CatalogCollection<br><br></li>
<li>
PackageUtil<br><br></li>
<li>
ComponentUtil<br><br></li>
<li>
RemoteComponentUtil</li>
</ul>
<p>
The Catalog, CatalogObject, and CatalogCollection scriptable objects provide top-level functionality such as creating and modifying objects. The Catalog object enables you to connect to specific servers and access collections. Call the CatalogCollection object to enumerate, create, delete, and modify objects, as well as to access related collections. CatalogObject allows you to retrieve and set properties on an object. The Package, Component, Remote Component, and Role objects enable more specific task automation, such as installing components and exporting packages. This utility layer allows you to program very specific tasks for collection types, such as associating a role with a user or class of users.</p>
<p>
The following diagram illustrates how the MTS SDK scriptable administration objects interact with the MTS Explorer catalog:</p>
<p>
<img src="deploy2.gif" border=0></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=34%><b>Interface</b></td>
<td class=label width=66%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=34%><b>ICatalog</b></td>
<td width=66%>The Catalog object enables you to connect to specific servers and access collections.</td>
</tr>
<tr valign=top>
<td width=34%><b>ICatalogCollection</b></td>
<td width=66%>The CatalogCollection object can be used to enumerate objects, create, delete, and modify objects, and access related collections.</td>
</tr>
<tr valign=top>
<td width=34%><b>ICatalogObject</b></td>
<td width=66%>The CatalogObject object provides methods to get and set properties on an object.</td>
</tr>
<tr valign=top>
<td width=34%><b>IPackageUtil</b></td>
<td width=66%>The IPackageUtil object enables a package to be installed and exported within the Packages collection.</td>
</tr>
<tr valign=top>
<td width=34%><b>IComponentUtil</b></td>
<td width=66%>The IComponentUtil object provides methods to install a component in a specific collection and to import components registered as an in-proc server.</td>
</tr>
<tr valign=top>
<td width=34%><b>IRemoteComponentUtil</b></td>
<td width=66%>You can use the IRemoteComponentUtil object to program your application to pull remote components from a package on a remote server.</td>
</tr>
<tr valign=top>
<td width=34%><b>IRoleAssociationUtil</b></td>
<td width=66%>Call methods on the IRoleAssociationUtil object to associate roles with a component or component interface.</td>
</tr>
</table><br>
<p>
For example, you can automate the steps in the MTS Explorer for creating a new package and installing components into the new package by using the scriptable objects in the utility layer (Package, Component, Remote Component, and Role objects).</p>
<p>
The following Visual Basic sample shows how to use the scriptable administration objects to create a new package named “My Package” and install the components in that package.
<ol>
<li>
Declare the objects that you will be using to create a new package and install components into that package.<pre><code>Dim catalog As Object
Dim packages As Object
Dim newPack As Object
Dim componentsInNewPack As Object
Dim util As Object
</code></pre>
</li>
<li>
Use the On Error statement to handle run-time errors if a method returns a failure HRESULT. You can test and respond to MTS trappable errors using the On Error statement and the Err object.<pre><code>On Error GoTo failed
</code></pre>
</li>
<li>
Call the CreateObject method to instantiate the Catalog object. Retrieve the top level Packages collection from the CatalogCollection object by calling the GetCollection method. Then call the Add method to add a new package.<pre><code>Set catalog = CreateObject("MTSAdmin.Catalog.1")
Set packages = catalog.GetCollection("Packages")
Set newPack = packages.Add
Dim newPackID As String
</code></pre>
</li>
<li>
Set the package name to “My Package” and save changes to the Packages collection.<pre><code>newPackID = newPack.Key
newPack.Value("Name") = "My Package"
packages.savechanges
</code></pre>
</li>
<li>
Call the GetCollection method to access the ComponentsInPackage<b> </b>collection. Then instantiate the ComponentUtil object in order to call the InstallComponent method to populate the new package with components.<pre><code>Set componentsInNewPack = packages.GetCollection("ComponentsInPackage", newPackID)
Set util = componentsInNewPack.GetUtilInterface
util.InstallComponent"d:\dllfilepath", "", ""
Exit Sub
</code></pre>
</li>
<li>
Use the Err object to display an error message if the installation of the package fails.<pre><code>failed:
 &nbsp;&nbsp; MsgBox "Failure code " + Str$(Err.Number)

End Sub
</code></pre>
</li>
</ol>
<p>
For a complete description of how to program these procedures and more sample code, refer to the Scriptable Administration section of the Microsoft Transaction Server documentation.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DirectX Media: Multimedia Services for Microsoft Internet Explorer and Windows</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_dx5media"></a>DirectX Media: Multimedia Services for Microsoft Internet Explorer and Windows</h1>
<p>
Microsoft Corporation</p>
<p>
September 1997</p>
<h2>Abstract</h2>
<p>
The convergence of desktop multimedia and the Internet presents tremendous opportunities for developers to reach broad audiences with compelling, media-rich content and applications. With Microsoft® DirectX® version 5.0 set of application programming interfaces (APIs), Microsoft delivers a significant expansion of its system-level APIs to deliver a unified, comprehensive solution for developers. This article details the application-level services of DirectX media that provide rich support for media interaction and integration.</p>
<h4>Contents</h4>
<p>
<a href="#dx5media_intro">Introduction</a></p>
<p>
<a href="#dx5media_drm">Direct3D Retained Mode</a></p>
<p>
<a href="#dx5media_dp">Direct Play</a></p>
<p>
<a href="#dx5media_da">DirectAnimation</a></p>
<p>
<a href="#dx5media_ds">DirectShow</a></p>
<p>
<a href="#dx5media_conclus">Conclusion</a></p>
<p>
<a href="#dx5media_fmi">For More Information</a></p>
<h2><a name="dx5media_intro"></a>Introduction</h2>
<p>
The Microsoft DirectX set of APIs offers a broad spectrum of services from chip level to cyberspace. In addition to low-level APIs that access hardware acceleration—called DirectX foundation—DirectX now includes DirectX media, a layer of high-level services including streaming, animation, and behaviors.</p>
<p>
DirectX media is a family of application-level APIs and controls for multimedia that provides rich support for interaction and integration of different media types in order to develop online and digital media authoring applications.</p>
<p>
DirectX media currently consists of the five APIs shown in Table 1.</p>
<p class=label>
<b>Table 1. DirectX APIs</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>DirectX Media Service</b></td>
<td class=label width=50%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=50%>Direct3D® Retained Mode</td>
<td width=50%>3-D scene graph</td>
</tr>
<tr valign=top>
<td width=50%>DirectPlay®</td>
<td width=50%>Multiuser player services</td>
</tr>
<tr valign=top>
<td width=50%>DirectShow™ (formerly the ActiveMovie™ Software Development Kit [SDK])</td>
<td width=50%>Media playback, streaming, and capture</td>
</tr>
<tr valign=top>
<td width=50%>DirectAnimation™ (formerly ActiveX™ Animation)</td>
<td width=50%>Rich animation and interaction of diverse media that can integrate with Dynamic Hypertext Markup Language (DHTML)</td>
</tr>
<tr valign=top>
<td width=50%>DirectModel</td>
<td width=50%>Three-dimensional (3-D) model support</td>
</tr>
</table><br>
<h3>DirectX Media Goals</h3>
<p>
DirectX media has been developed to meet a set of related goals:
<ul type=disc>
<li>
<b>Provide application-level media services.</b> DirectX media provides application-level services—device-independent services that take advantage of the system-level DirectX foundation services.<br><br></li>
<li>
<b>Unify media services. </b>With DirectX media, multimedia developers get the benefits of device-independent access to multiple media types without losing the benefits of direct access to the hardware. To accomplish this, DirectX media provides a consistent API interface, device independence through the hardware abstraction layer/hardware emulation layer (HAL/HEL) architecture, and APIs with high-level services based on DirectX foundation.<br><br></li>
<li>
<b>Support multiple digital-media users and environments.</b> Through device and language independent Component Object Model (COM) design and Web integration, DirectX media services can easily be used by many types of multimedia developers, ranging from the casual Web page designer to the professional media developer.</li>
</ul>
<h3>DirectX Media Architecture</h3>
<p>
DirectX media is the result of the conceptual reorganization of DirectX version 5.0 into two levels: a system-layer DirectX foundation and an application-layer DirectX media.</p>
<p>
The big-picture organization of DirectX services is shown in the Figures 1 through 3.</p>
<p>
<img src="dx5media01.gif" border=0></p>
<p class=label>
<b>Figure 1. DirectX architecture</b></p>
<p>
DirectX media services use DirectX foundation. These services include Direct3D Retained Mode, DirectAnimation, DirectPlay and DirectShow. Support for Virtual Reality Markup/Modeling Language (VRML) is also provided in DirectX media.</p>
<p>
<img src="dx5media02.gif" border=0></p>
<p class=label>
<b>Figure 2. DirectX media</b></p>
<p>
DirectX foundation provides the basis for performance media on Microsoft Windows®–based computers through DirectDraw®, DirectInput®, DirectSound®, DirectSound3D, and Direct3D Immediate Mode.</p>
<p>
<img src="dx5media03.gif" border=0></p>
<p class=label>
<b>Figure 3. DirectX foundation</b></p>
<h2><a name="dx5media_drm"></a>Direct3D Retained Mode</h2>
<p>
Direct3D Retained Mode is a high-level 3-D scene graph manager that simplifies the building and animation of 3-D worlds and data.</p>
<p>
New in DirectX version 5.0:
<ul type=disc>
<li>
<b>Animation interpolators</b>. Direct3D Retained Mode now supports interpolators that enable you to blend colors, move objects smoothly between positions, morph meshes, and perform many other transformations.<br><br></li>
<li>
<b>Progressive meshes</b>. Retained Mode also supports progressive meshes that allow you to begin with a coarse mesh and increasingly refine it; this can help you take the level of detail into account and can assist with progressive downloads from remote locations.</li>
</ul>
<p>
All access to Direct3D Retained Mode is through a small set of objects. Table 2 lists these objects with a brief description.</p>
<p class=label>
<b>Table 2. Direct3D Retained Mode Objects</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=34%><b>Object</b></td>
<td class=label width=66%><b>Description </b></td>
</tr>
<tr valign=top>
<td width=34%>Direct3DRMAnimation</td>
<td width=66%>Defines how a transformation will be modified, often in reference to a Direct3DRMFrame or Direct3DRMFrame2 object. You use it to animate position, orientation, and scaling of Direct3DRMVisual, Direct3DRMLight, and Direct3DRMViewport objects.</td>
</tr>
<tr valign=top>
<td width=34%>Direct3DRMAnimationSet</td>
<td width=66%>Allows Direct3DRMAnimation objects to be grouped together</td>
</tr>
<tr valign=top>
<td width=34%>Direct3DRMDevice</td>
<td width=66%>Represents the visual display destination for the renderer</td>
</tr>
<tr valign=top>
<td width=34%>Direct3DRMDevice2</td>
<td width=66%>Performs the same as the Direct3DRMDevice object but with enhanced control of transparency</td>
</tr>
<tr valign=top>
<td width=34%>Direct3DRMFace</td>
<td width=66%>Represents a single polygon in a mesh</td>
</tr>
<tr valign=top>
<td width=34%>Direct3DRMFrame</td>
<td width=66%>Positions objects within a scene and defines the positions and orientations of visual objects</td>
</tr>
<tr valign=top>
<td width=34%>Direct3DRMFrame2</td>
<td width=66%>Extends the Direct3DRMFrame object by enabling access to the frame axes, bounding boxes, and materials. Also supports ray picking</td>
</tr>
<tr valign=top>
<td width=34%>Direct3DRMInterpolator</td>
<td width=66%>Stores actions and applies the actions to objects with automatic calculation of in-between values</td>
</tr>
<tr valign=top>
<td width=34%>Direct3DRMLight</td>
<td width=66%>Defines one of five types of lights that are used to illuminate the visual objects in a scene</td>
</tr>
<tr valign=top>
<td width=34%>Direct3DRMMaterial</td>
<td width=66%>Defines how a surface reflects light</td>
</tr>
<tr valign=top>
<td width=34%>Direct3DRMMesh</td>
<td width=66%>A set of polygonal faces, can be used to manipulate groups of faces and vertices</td>
</tr>
<tr valign=top>
<td width=34%>Direct3DRMMeshBuilder2</td>
<td width=66%>Allows you to work with individual vertices and faces in a mesh</td>
</tr>
<tr valign=top>
<td width=34%>Direct3DRMMeshBuilder</td>
<td width=66%>Allows you to work with individual vertices and faces in a mesh (obsolesced version of Direct3DRMMeshBuilder2)</td>
</tr>
<tr valign=top>
<td width=34%>Direct3DRMObject</td>
<td width=66%>A base class used by all other Direct3D Retained-Mode objects; it has characteristics that are common to all objects</td>
</tr>
<tr valign=top>
<td width=34%>Direct3DRMPickedArray</td>
<td width=66%>Identifies a visual object that corresponds to a given 2-D point</td>
</tr>
<tr valign=top>
<td width=34%>Direct3DRMPicked2Array</td>
<td width=66%>Identifies a visual object corresponding to a given ray intersection</td>
</tr>
<tr valign=top>
<td width=34%>Direct3DRMProgressiveMesh</td>
<td width=66%>A coarse base mesh, together with records describing how to incrementally refine the mesh, allows a generalized level of detail to be set on the mesh as well as progressive download of the mesh from a remote source</td>
</tr>
<tr valign=top>
<td width=34%>Direct3DRMShadow</td>
<td width=66%>Defines a shadow</td>
</tr>
<tr valign=top>
<td width=34%>Direct3DRMTexture</td>
<td width=66%>A rectangular array of colored pixels</td>
</tr>
<tr valign=top>
<td width=34%>Direct3DRMTexture2</td>
<td width=66%>Same as the Direct3DRMTexture object except that resources can be loaded from files other than the currently executing file, textures can be created from images in memory, and MIP maps can be generated</td>
</tr>
<tr valign=top>
<td width=34%>Direct3DRMUserVisual</td>
<td width=66%>Defined by an application to provide functionality not otherwise available in the system</td>
</tr>
<tr valign=top>
<td width=34%>Direct3DRMViewport</td>
<td width=66%>Defines how the 3-D scene is rendered into a 2-D window</td>
</tr>
<tr valign=top>
<td width=34%>Direct3DRMVisual</td>
<td width=66%>Anything that can be rendered in a scene. Visual objects need not be visible; for example, a frame can be added as a visual.</td>
</tr>
<tr valign=top>
<td width=34%>Direct3DRMWrap</td>
<td width=66%>Calculates texture coordinates for a face or mesh</td>
</tr>
</table><br>
<h3>Animation Interpolators</h3>
<p>
An animation in Retained Mode is defined by a set of keys. A key is a time value associated with a scaling operation, an orientation, or a position. A Direct3DRMAnimation object defines how a transformation is modified according to the time value. The animation can be set to operate on a Direct3DRMFrame object, so it could be used to animate the position, orientation, and scaling of Direct3DRMVisual, Direct3DRMLight, and Direct3DRMViewport objects.</p>
<p>
<b>IDirect3DRMAnimation::AddPositionKey</b>, <b>IDirect3DRMAnimation::AddRotateKey</b>, and <b>IDirect3DRMAnimation::AddScaleKey</b> are methods that each specify a time value whose units are arbitrary. If an application adds a position key with a time value of 99, for example, a new position key with a time value of 49 would occur exactly halfway between the (zero-based) beginning of the animation and the first position key.</p>
<p>
Calling the <b>IDirect3DRMAnimation::SetTime</b> method drives the animation. This sets the visual object's transformation to the interpolated position, orientation, and scale of the nearby keys in the animation. As with the methods that add animation keys, the time value for <b>IDirect3DRMAnimation::SetTime</b> is an arbitrary value, based on the positions of keys the application has already added.</p>
<p>
A Direct3DRMAnimationSet object allows Direct3DRMAnimation objects to be grouped together. This allows all the animations in an animation set to share the same time parameter, simplifying the playback of complex articulated animation sequences. An application can add an animation to an animation set by using the <b>IDirect3DRMAnimationSet::AddAnimation</b> method, and it can remove one by using the <b>IDirect3DRMAnimationSet::DeleteAnimation</b> method. Calling the <b>IDirect3DRMAnimationSet::SetTime</b> method drives animation sets.</p>
<h3>Progressive Meshes</h3>
<p>
A mesh is a visual object that is made up of a set of polygonal faces. A mesh defines a set of vertices and a set of faces.</p>
<p>
A progressive mesh is stored as a base mesh (a coarse version) and a set of records that are used to increasingly refine the mesh. This allows you to set the level of detail rendered for a mesh; it also allows progressive download from remote sources.</p>
<p>
Using the methods of the <b>IDirect3DRMProgressiveMesh</b> interface, you can set the number of vertices or faces to render, and thereby control, the render detail. You can also specify a minimum level of detail required for rendering. Normally, a progressive mesh is rendered once the base mesh is available, but with the <b>IDirect3DRMProgressiveMesh::SetMinRenderDetail </b>method you can specify that a greater level of detail is necessary before rendering. You can also build a Direct3DRMMesh object from a particular state of the progressive mesh using the <b>IDirect3DRMProgressiveMesh::CreateMesh </b>method.</p>
<p>
You can load a progressive mesh from a file, resource, memory, or Uniform Resource Locator (URL). Loading can be done synchronously or asynchronously. You can check the status of a download with the <b>IDirect3DRMProgressiveMesh::GetLoadStatus </b>method, and terminate a download with the <b>IDirect3DRMProgressiveMesh::Abort </b>method. If loading is asynchronous, it is up to the application to use events through the <b>IDirect3DRMProgressiveMesh::RegisterEvents </b>and <b>IDirect3DRMProgressiveMesh::GetLoadStatus </b>methods to find out how the load is progressing.</p>
<h2><a name="dx5media_dp"></a>DirectPlay</h2>
<p>
DirectPlay makes it easy to connect to games over the Internet, a modem link, or a network.</p>
<p>
DirectPlay is a software interface that simplifies application access to communication services. DirectPlay has become a technology family that provides a way for applications to communicate with each other independently of the underlying transport, protocol, or online service; it also provides this independence for matchmaking servers, game servers, and billing.</p>
<p>
Applications (especially games) can be more compelling if they can be played against real players, and the personal computer has richer connectivity options than any game platform in history. Instead of forcing the developer to deal with the differences that each connectivity solution represents, DirectPlay provides well-defined, generalized communication capabilities. DirectPlay shields developers from the underlying complexities of diverse connectivity implementations, freeing them to concentrate on producing a great application.</p>
<p>
DirectPlay version 5.0 has a new interface, <b>IDirectPlay3</b>. This interface inherits directly from <b>IDirectPlay2</b> and by default behaves as <b>IDirectPlay2</b>. All new functionality is enabled through new methods or new flags.</p>
<p>
DirectPlay 5.0 includes numerous new features and improvements:
<ul type=disc>
<li>
<b>Connection shortcuts</b><p class=tl>
<b>IDirectPlay3::EnumConnections </b>enumerates the Connection Shortcuts available to the application. This method supersedes <b>DirectPlayEnumerate</b>.</P></li>
<li>
<b>New initialization method</b><p class=tl>
<b>IDirectPlay3::InitializeConnection </b>initializes a DirectPlay connection. This method supersedes <b>DirectPlayCreate</b>. The new <b>IDirectPlayLobby2::CreateCompoundAddress </b>method creates Connection Shortcuts to pass to the <b>InitializeConnection</b> method.</P></li>
<li>
<b>Improved security</b><p class=tl>
<b>IDirectPlay3::SecureOpen </b>creates or joins a session on a machine that uses Microsoft Windows NT® LAN Manager (NTLM) security.</P></li>
<li>
<b>Groups in groups</b><p class=tl>
<b>IDirectPlay3::CreateGroupInGroup</b>, <b>IDirectPlay3::AddGroupToGroup</b>, <b>IDirectPlay3::DeleteGroupFromGroup</b>, and <b>IDirectPlay3::EnumGroupsInGroup </b>add richer group functionality and navigation when connected to a lobby server.</P></li>
<li>
<b>Chat</b><p class=tl>
<b>IDirectPlay3::SendChatMessage </b>enables players to chat with other players connected to a lobby server.</P></li>
<li>
<b>Synchronized application launching</b><p class=tl>
<b>IDirectPlay3::SetGroupConnectionSettings</b>, <b>IDirectPlay3::GetGroupConnectionSettings</b>, and <b>IDirectPlay3::StartSession </b>enable synchronized application launching from a lobby server.</P></li>
<li>
<b>Improved password protection</b><p class=tl>
Password protection of sessions has been greatly improved. The new DPCREDENTIALS structure holds the user name and password to use when connecting to a secure server. The DPSECURITYDESC structure describes the security properties of a DirectPlay session instance.</P></li>
<li>
<b>Multiple DirectPlay objects</b><p class=tl>
An application can create multiple DirectPlay objects.</P></li>
<li>
<b>Guaranteed messaging</b><p class=tl>
Guaranteed messaging is available for all service providers.</P></li>
<li>
<b>Multicast server</b><p class=tl>
A new multicast server improves group messaging.</P></li>
<li>
<b>Scalable client/server architecture applications</b><p class=tl>
Support has been added for highly scalable client/server architecture applications.</P></li>
</ul>
<h3>How DirectPlay Works</h3>
<p>
The DirectPlay API is a network abstraction to which applications can be written. The API defines the functionality of the abstract DirectPlay network, and all the functionality is available to your application regardless of whether the actual underlying network supports it or not. When the underlying network does not support a function, DirectPlay contains all the code necessary to emulate it. Examples include group messaging and guaranteed messaging.</p>
<p>
The DirectPlay service provider architecture insulates the application from the underlying network it is running on. The application can query DirectPlay for specific capabilities of the underlying network, such as latency and bandwidth, and adjust its communications accordingly.</p>
<p>
<img src="dx5media04.gif" border=0></p>
<p class=label>
<b>Figure 4. DirectPlay architecture</b></p>
<h3>Session Management</h3>
<p>
A DirectPlay session is a communications channel between several machines. Before an application can start communicating with other machines it must join a session. An application can do this in one of two ways: It can enumerate all the existing sessions on a network and join one of them, or it can create a new session and wait for other machines to join it. Once the application has joined a session, it can create a player and exchange messages with all the other players in the session.</p>
<p>
Each session has one machine that is designated as the host. The host, the owner of the session, is the only machine that can change the properties of the session.</p>
<p>
Figure 5 illustrates the DirectPlay session model: An application must join a session to communicate with other machines using DirectPlay.</p>
<p>
<img src="dx5media05.gif" border=0></p>
<p class=label>
<b>Figure 5.The DirectPlay session model</b></p>
<h3>Players and Groups</h3>
<p>
The most basic entity within a DirectPlay session is a player. A player represents a logical object within the session that can send and receive messages. DirectPlay does not have any representation of a physical machine in the session. Each player is identified as being either a local player (one that exists on your machine) or a remote player (one that exists on another machine). Each machine must have at least one local player before it can start sending and receiving messages. Individual machines can have more than one local player but, within the context of a DirectPlay session, they are considered to be distinct entities.</p>
<p>
When an application sends a message, it is always directed to another player—not another machine. The player can be another local player (in which case the message will not go out over the network) or a remote player. Similarly, when messages are received by an application they are always addressed to a specific (local) player and marked as coming from some other player (except system messages, which are always marked as coming from DPID_SYSMSG).</p>
<p>
<img src="dx5media06.gif" border=0></p>
<p class=label>
<b>Figure 6. Player and group structure</b></p>
<p>
DirectPlay supports the concepts of groups within a session. A group is a logical collection of players. By creating a group of players, an application can send a single message to the group and all the players in the group will receive a copy of the message. A group is the means by which the multicast capabilities of the network are exposed to the application.</p>
<p>
Groups can also be used as a general means to organize players in a session. A player can belong to more than one group. Functions are provided for administering groups and their membership. Additional functions are also provided to associate names and data with individual groups as a convenience, but they are not necessary to use groups.</p>
<h2><a name="dx5media_da"></a>DirectAnimation</h2>
<p>
The DirectAnimation component of DirectX media provides an integrated, comprehensive API and run time with support for a diverse set of media types and a powerful time/event model for developing rich animation and interaction. And because DirectAnimation is integrated with Dynamic HTML, it is especially suited to adding compact animation effects to Web pages.</p>
<p>
The DirectAnimation run-time library is part of the Microsoft Internet Explorer version 4.0 minimal install. This means that Internet Explorer 4.0 contains all the software necessary to view multimedia created with DirectAnimation.</p>
<p>
The key features of the DirectAnimation API are:
<ul type=disc>
<li>
<b>Multiple media types</b>. Comprehensive support for different media types—2-D vector graphics, images and sprites, 3-D geometry, video, and sound (including MIDI)—is unified in a single animation API.<br><br></li>
<li>
<b>Uniform time and event model</b>. A uniform time and event model simplifies temporal coordination and interaction of the different media types. This model frees users from frame-level details and provides the foundation for supporting inherently time-based media types such as video and audio.<br><br></li>
<li>
<b>Multiple access methods</b>. DirectAnimation scales from the HTML author to the C++ programmer. You can access DirectAnimation from HTML, Microsoft Visual Basic® Scripting Edition (VBScript) , Microsoft Jscript™, Microsoft Visual&nbsp;C++®, and Java. DirectAnimation components include ActiveX controls for HTML environments and a COM-based animation library accessible from any programming or scripting language.</li>
</ul>
<h3>DirectAnimation Architecture</h3>
<p>
Figure 7 shows the DirectAnimation architecture.</p>
<p>
<img src="dx5media07.gif" border=0></p>
<p class=label>
<b>Figure 7. DirectAnimation architecture</b></p>
<p>
The DirectAnimation multimedia controls provide an interface to some of the DirectAnimation library, which is also accessible directly. The DirectAnimation library in turn uses the DirectShow API, the DirectX foundation, and certain operating system services. "SG" stands for Structured Graphics control and "Seq" stands for the Sequencer control.</p>
<h3>How Do You Use DirectAnimation?</h3>
<p>
DirectAnimation is a COM API and an underlying run time, the functionality of which can be accessed in different ways by different user groups.</p>
<p>
You can use DirectAnimation in the following ways:
<ul type=disc>
<li>
As an inline, HTML Web animation through JScript, VBScript, or the DirectAnimation controls.<br><br></li>
<li>
As a Web animation in the form of a Java applet.<br><br></li>
<li>
As a stand-alone application or an ActiveX control implemented through Java, Visual Basic, or C++.<br><br></li>
<li>
To construct animated windowless controls.<br><br></li>
<li>
To animate properties of ActiveX controls.<br><br></li>
<li>
To load animations asynchronously and hide the load time.</li>
</ul>
<p>
Table 3 shows the typical ways different developers would access DirectAnimation.</p>
<p class=label>
<b>Table 3.DirectAnimation Access</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=29%><b>Developers</b></td>
<td class=label width=71%><b>Access DirectAnimation through</b></td>
</tr>
<tr valign=top>
<td width=29%>Creative professionals</td>
<td width=71%>DirectAnimation Client Controls</td>
</tr>
<tr valign=top>
<td width=29%>Web-site builders</td>
<td width=71%>DirectAnimation Client Controls, DirectAnimation scripting</td>
</tr>
<tr valign=top>
<td width=29%>Script writers</td>
<td width=71%>DirectAnimation scripting, DirectAnimation for Java</td>
</tr>
<tr valign=top>
<td width=29%>Application developers</td>
<td width=71%>DirectAnimation for Java, DirectAnimation scripting</td>
</tr>
<tr valign=top>
<td width=29%>Graphics-systems programmers</td>
<td width=71%>DirectAnimation through native COM, DirectX foundation, and DirectShow</td>
</tr>
</table><br>
<p>
You can access DirectAnimation from JScript, VBScript, Visual Basic, and C++ through the scripting (COM) interfaces directly. You can also add DirectAnimation content to your Web pages without programming at all by using the DirectAnimation controls and setting parameters on these controls. Using the DirectAnimation controls directly, or using JScript or VBScript, allows you to describe inline animations with HTML. Such animations can integrate with Dynamic HTML by being windowless on the page (overlaying other elements such as text) or by driving the properties of other entities on the page. It is also possible to import HTML-rendered text and use it as a texture in an animation.</p>
<p>
There is a special Java binding for DirectAnimation provided on top of the COM API that takes advantage of specific Java features. For example, operations are overloaded so that several COM methods that perform similar functions but use different parameter types are given the same name in Java.</p>
<p>
To create presentations with DirectAnimation, you need the following:
<ul type=disc>
<li>
The DirectAnimation run-time library, which is part of the Internet Explorer 4.0 minimal install.<br><br></li>
<li>
The DirectAnimation SDK, which includes samples in JScript, VBScript, Java, and Visual Basic.<br><br></li>
<li>
A Java compiler or Microsoft Visual J++™ development system, or a C/C++ compiler (such as the Visual&nbsp;C++ development system version 5.<i>x</i>), or Microsoft Visual Basic programming system version 5.<i>x</i>. You can also use the DirectAnimation API from VBScript and JScript without compiling.<br><br></li>
<li>
Visual Basic, Java, and C++ users need the Microsoft Visual Basic, Visual J++, or Visual&nbsp;C++ environments or their equivalents. Internet Explorer 4.<i>x</i> is all that JScript and VBScript users need to develop animations.</li>
</ul>
<h3>DirectAnimation Multimedia Controls</h3>
<p>
The DirectAnimation multimedia controls (formerly called Multimedia DHTML controls) supply a scripting interface to some of the DirectAnimation API functions and libraries. These controls allow you to deliver impressive animation, image, sound and vector graphics content over the Web with low code overhead and without incurring long download times.</p>
<p>
The DirectAnimation multimedia controls consist of:
<ul type=disc>
<li>
<b>Path control</b>. Move objects around the page over time in geometric or spline patterns, with control over speed of motion, forward or reverse playback, looping, and bouncing behavior.<br><br></li>
<li>
<b>Sprite control</b>. Add still and animated images on your Web page, with control over playback speed, forward or reverse playback, dynamic seeking to different positions in the sprite playback, and user interactivity on a frame-by-frame basis.<br><br></li>
<li>
<b>Structured-graphics control</b>. Add to your Web page extremely lightweight vector graphics that you can scale or rotate in 3-D and to which you can easily apply solid colors, patterns, gradient fills, or bitmap textures.<br><br></li>
<li>
<b>Sequencer control</b>. Create complex sequences of action involving controls, scripts, or Dynamic HTML elements.</li>
</ul>
<h3>A DirectAnimation Multimedia Control Example</h3>
<p>
In the following example, "btnOval" is a button that says, "This is a moving button." A DirectAnimation path control named "pthOval" targets the button, telling it to move along an oval-shaped path on the page.</p>
<pre><code>&lt;HTML&gt;

&lt;INPUT NAME=btnOval TYPE=BUTTON VALUE="This is a moving button"
 &nbsp;&nbsp; STYLE="position:absolute;LEFT: 20; TOP: 80"&gt;

&lt;OBJECT ID="pthOval"
CLASSID = "CLSID:D7A7D7C3-D47F-11D0-89D3-00A0C90833E6"&gt;
   &lt;PARAM NAME="Target" VALUE="btnOval"&gt;
   &lt;PARAM NAME="Shape" VALUE="Oval(50,50,400,200)"&gt;
   &lt;PARAM NAME="AutoStart" VALUE="-1"&gt;
   &lt;PARAM NAME="Repeat" VALUE="-1"&gt;
   &lt;PARAM NAME="Duration" VALUE="10"&gt;
&lt;/OBJECT&gt;

&lt;/HTML&gt;
</code></pre>
<h2><a name="dx5media_ds"></a>DirectShow</h2>
<p>
DirectShow (formerly the ActiveMovie SDK) is the media streaming architecture of DirectX media for controlling and processing streams of multimedia data.</p>
<p>
DirectShow offers three core features:
<ul type=disc>
<li>
<b>Media-stream playback</b>. From local files or Internet servers, play back multimedia streams of video and audio content compressed in various formats<br><br></li>
<li>
<b>Capture. </b>Capture video and audio for professional and multimedia purposes<br><br></li>
<li>
<b>Multimedia streaming. </b>Load and render or convert multimedia streams from and to multiple media formats</li>
</ul>
<p>
DirectShow provides native support for the following formats:
<ul type=disc>
<li>
MIDI (.mid)<br><br></li>
<li>
MPEG-1 (.mpg, .mpeg, .mpv, .mp2, .mpa, .mpe)<br><br></li>
<li>
Audio-video interleaved (.avi)<br><br></li>
<li>
Nonproprietary Apple® QuickTime® files (.mov, .qt)<br><br></li>
<li>
Wave (.wav)<br><br></li>
<li>
AU (.au, .snd)<br><br></li>
<li>
AIFF (.aif, .aifc, .aiff)</li>
</ul>
<p>
DirectShow uses all DirectDraw and DirectSound hardware capabilities whenever possible. When no special DirectX hardware is available, DirectShow uses a graphics device interface (GDI) to draw video and the <b>waveOut</b> multimedia APIs to play back audio.</p>
<h3>What's New in DirectShow</h3>
<p>
Features added to DirectShow since the ActiveMovie 1.0 SDK include:
<ul type=disc>
<li>
video and audio capture and compression<br><br></li>
<li>
device enumeration<br><br></li>
<li>
digital versatile disc (DVD) support<br><br></li>
<li>
digital video (DV) support<br><br></li>
<li>
device control and timecode support<br><br></li>
<li>
multimedia streaming</li>
</ul>
<h3>DirectShow Filter Architecture</h3>
<p>
At the heart of the DirectShow services is a modular system of pluggable components called "filters," arranged in a configuration called a "filter<b> </b>graph." A component called the "filter<b> </b>graph manager" oversees the connection of these filters and controls the stream's data flow.</p>
<p>
To use the filter graph manager from an application, it is not necessary to know much about the underlying filter graphs. It is useful, however, to understand at least the basic principles of filter graphs if you ever want to configure your own filter graph rather than letting the filter graph manager configure them for you. A filter graph is composed of a collection of filters of different types. Most filters can be categorized into one of the following three types:
<ul type=disc>
<li>
<b>Source filters.</b> Take data from a source, such as a disk file, camcorder, satellite feed, Internet server, or VCR, and introduce it into the filter graph.<br><br></li>
<li>
<b>Transform filters.</b> Process data and pass it along.<br><br></li>
<li>
<b>Rendering filters.</b> Render data to a hardware device or to any location that accepts media input (such as memory or a disk file).</li>
</ul>
<p>
In addition to these three types, there are other kinds of filters. Examples include effect filters, which add effects without changing the data type, and parser filters, which understand the format of the source data and know how to read the correct bytes, create times stamps, and perform seeks.</p>
<p>
For example, a filter graph, the purpose of which is to play back an MPEG-compressed video from a file, would use the following filters:
<ul type=disc>
<li>
A source filter to read the data off the disk<br><br></li>
<li>
An MPEG filter to parse the stream and split the MPEG audio and video data streams<br><br></li>
<li>
A transform filter to decompress the video data<br><br></li>
<li>
A transform filter to decompress the audio data<br><br></li>
<li>
A video renderer filter to display the video data on the screen<br><br></li>
<li>
An audio renderer filter to send the audio to the sound card</li>
</ul>
<p>
Figure 8 shows such a filter graph.</p>
<p>
<img src="dx5media08.gif" border=0></p>
<p class=label>
<b>Figure 8. A filter graph</b></p>
<p>
It is possible for some filters to represent a combination of types. For example, a filter might be an audio renderer that also acts as a transform filter by passing through the video data. But typically, filters fit only one of these three types.</p>
<p>
Filter graphs stream multimedia data through filters. In the media stream, one filter passes the media <i>downstream</i> to the next filter. An <i>upstream filter</i> describes the filter that passes data to the filter; a <i>downstream filter</i> describes the next filter in line for the data. This distinction is important because media flow downstream, but other information can go upstream.</p>
<h3>Using DirectShow</h3>
<p>
There are three ways to use DirectShow:
<ul type=disc>
<li>
<b>Through the ActiveMovie control. </b>The ActiveMovie control is built on DirectShow. The ActiveMovie control represents an easy-to-use interface that lets you manage multimedia using the control's properties, methods, and events. The control handles all video and audio rendering for you, simplifying your programming tasks and making it easy to add support for multimedia to your Web page or other application.<br><br></li>
<li>
<b>With prebuilt filters.</b> DirectShow provides a standard set of prebuilt binary filters as part of the DirectShow SDK.<br><br></li>
<li>
<b>Writing custom filters.</b> The SDK also enables you to create your own filters using the DirectShow class library. The base classes in the C/C++ library implement the required COM interfaces on the filters and provide the basic filter framework. You can write DirectShow filters in any language that can generate objects adhering to the Microsoft COM. The base classes for DirectShow are written in C++.</li>
</ul>
<p>
The amount you must know about an underlying or supported technology depends on your task. For example, you will need to understand COM programming when using C or C++ to control DirectShow playback or create a filter. But you do not need to understand COM programming to use the ActiveMovie control.</p>
<h3>Prebuilt Filters</h3>
<p>
DirectShow provides prebuilt filters as part of the DirectShow SDK. A prebuilt filter, supplied as binary code only, is one of the filters listed in the <b>Filter Graph Editor</b> when you choose <b>Insert Filters</b> from the <b>Graph</b> menu.</p>
<p>
The DirectShow SDK provides the following filters listed in Table 4.</p>
<p class=label>
<b>Table. 4 Prebuilt Filter List</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td width=33%>ACM Wrapper </td>
<td width=33%>Analog Video CrossBar </td>
<td width=34%>Audio Capture </td>
</tr>
<tr valign=top>
<td width=33%>Audio Renderer </td>
<td width=33%>AVI Compressor </td>
<td width=34%>AVI Decompressor </td>
</tr>
<tr valign=top>
<td width=33%>AVI Draw </td>
<td width=33%>AVI MUX </td>
<td width=34%>AVI Splitter </td>
</tr>
<tr valign=top>
<td width=33%>AVI/WAV File Source </td>
<td width=33%>Color Space Transform </td>
<td width=34%>DSound Audio Renderer </td>
</tr>
<tr valign=top>
<td width=33%>DVD Navigator </td>
<td width=33%>DV MUX </td>
<td width=34%>DV Video Splitter </td>
</tr>
<tr valign=top>
<td width=33%>DV Video Decoder </td>
<td width=33%>DV Video Encoder </td>
<td width=34%>File Source (async) </td>
</tr>
<tr valign=top>
<td width=33%>File Source (URL) </td>
<td width=33%>File Stream Renderer </td>
<td width=34%>File Writer </td>
</tr>
<tr valign=top>
<td width=33%>Full Screen Renderer </td>
<td width=33%>Indeo Video R4.1 Compression </td>
<td width=34%>Indeo Video R4.1 Decompression </td>
</tr>
<tr valign=top>
<td width=33%>Indeo 4.2 Video Compression </td>
<td width=33%>Indeo 4.2 Video Decompression </td>
<td width=34%>Indeo 5.0 Audio Decompression </td>
</tr>
<tr valign=top>
<td width=33%>Indeo 5.0 Video Compression </td>
<td width=33%>Indeo 5.0 Video Decompression </td>
<td width=34%>Infinite Pin Tee </td>
</tr>
<tr valign=top>
<td width=33%>Internal Script Command Renderer </td>
<td width=33%>Line 21 Decoder </td>
<td width=34%>Lyric Parser </td>
</tr>
<tr valign=top>
<td width=33%>MIDI Parser </td>
<td width=33%>MIDI Renderer </td>
<td width=34%>MPEG-1 Stream Splitter </td>
</tr>
<tr valign=top>
<td width=33%>MPEG Audio Decoder </td>
<td width=33%>MPEG Video Decoder </td>
<td width=34%>Multi-File Parser </td>
</tr>
<tr valign=top>
<td width=33%>Overlay Mixer </td>
<td width=33%>QuickTime Decompression </td>
<td width=34%>QuickTime Movie Parser </td>
</tr>
<tr valign=top>
<td width=33%>SAMI (CC) Parser</td>
<td width=33%>TrueMotion Decompression </td>
<td width=34%>TV Tuner </td>
</tr>
<tr valign=top>
<td width=33%>VFW Video Capture </td>
<td width=33%>VGA 16 Color Ditherer </td>
<td width=34%>Video Renderer </td>
</tr>
<tr valign=top>
<td width=33%>WAVE Parser </td>
<td width=33%>WDM Video Capture</td>
<td width=34%></td>
</tr>
</table><br>
<h3>Sample Source Filters</h3>
<p>
A sample filter includes source code; you must build and register it before it will appear in the Filter Graph Editor:</p>
<h4>Source filters</h4>
<ul type=disc>
<li>
Asynchronous Reader filter<br><br></li>
<li>
Audio Synthesizer filter<br><br></li>
<li>
Bouncing Ball Source filter<br><br></li>
<li>
Video Capture filter</li>
</ul>
<h4>Transform filters</h4>
<ul type=disc>
<li>
Contrast filter<br><br></li>
<li>
Image Effect filter (EzRGB24)<br><br></li>
<li>
MPEG Framework Audio Codec<br><br></li>
<li>
MPEG Framework Video Codec<br><br></li>
<li>
Null In-place filter<br><br></li>
<li>
NullNull filter<br><br></li>
<li>
Simple Audio Processing filter (Gargle)<br><br></li>
<li>
VCR Device Control filter</li>
</ul>
<h4>Renderer filters</h4>
<ul type=disc>
<li>
File Dump filter<br><br></li>
<li>
Oscilloscope filter<br><br></li>
<li>
Sample Video Renderer filter<br><br></li>
<li>
Text Renderer filter</li>
</ul>
<h4>C/C++–based sample applications</h4>
<ul type=disc>
<li>
C/COM–based media player<br><br></li>
<li>
DirectShow Capture<br><br></li>
<li>
C++/COM–based media player<br><br></li>
<li>
MPEG Property Page display<br><br></li>
<li>
ShowStrm application<br><br></li>
<li>
VidClip Application</li>
</ul>
<h4>Visual Basic–based sample applications</h4>
<ul type=disc>
<li>
Visual Basic–based ActiveX player<br><br></li>
<li>
Visual Basic–based filter graph builder<br><br></li>
<li>
Visual Basic–based filter graph player<br><br></li>
<li>
Visual Basic–based player</li>
</ul>
<h4>Plug-In Distributor Sample</h4>
<ul type=disc>
<li>
Plug-In Distributor Sample</li>
</ul>
<h4>IOStream Helper Library</h4>
<ul type=disc>
<li>
IOStream Helper Library</li>
</ul>
<h3>Multimedia Streaming with DirectShow</h3>
<p>
When developers use multimedia streaming in their applications, it greatly reduces the amount of format-specific programming needed. Typically, an application that must obtain media data from a file or hardware source must know everything about the data format and the hardware device. The application must handle the connection, transfer of data, necessary data conversion, and the actual data rendering or file storage. Because each format and device is slightly different, this process is often complex and cumbersome. Multimedia streaming, on the other hand, automatically negotiates the transfer and conversion of data from the source to the application. The streaming interfaces provide a uniform and predictable method of data access and control, which makes it easy for an application to play back the data, regardless of its original source or format.</p>
<p>
Figure 9 shows the basic object hierarchy used in multimedia streaming.</p>
<p>
<img src="dx5media09.gif" border=0></p>
<p class=label>
<b>Figure 9. Multimedia streaming</b></p>
<p>
The following steps show how to implement streaming from hardware device to rendered playback:
<ol>
<li>
A source of video data, such as DirectShow, exposes the streaming interfaces.<br><br></li>
<li>
The application developer uses the multimedia streaming interfaces to handle data format conversion.<br><br></li>
<li>
The application developer uses the DirectDraw interfaces to render the resulting data.</li>
</ol>
<p>
There are three basic object types defined in the multimedia streaming architecture:
<ul type=disc>
<li>
A multimedia stream, which supports the <b>IMultiMediaStream</b> interface.<br><br></li>
<li>
Media streams support the <b>IMediaStream</b> interface and are data specific. Every multimedia stream contains one or more of these media streams.<br><br></li>
<li>
Stream samples, which support the <b>IStreamSample</b>, are created by a media stream. These objects represent a basic unit of work for the stream.</li>
</ul>
<h2><a name="dx5media_conclus"></a>Conclusion</h2>
<p>
Multimedia by definition requires integration—and multimedia over the Internet requires even more. DirectX provides the first unified solution to take advantage of the cross-platform flexibility of the Internet and the powerful multimedia capabilities of the personal computer. With all DirectX services designed to work together with a single programming model, DirectX makes it easy to develop innovation and ease of use into online and digital media-authoring applications with benefits that go far beyond present-day technologies.</p>
<h2><a name="dx5media_fmi"></a>For More Information</h2>
<p>
For additional information on DirectX technologies, visit the Microsoft DirextX Web site (<a href="http://www.microsoft.com/directx">http://www.microsoft.com/directx</a>).</p>
<p>
<i>The information contained in this document represents the current view of Microsoft Corporation on the issues discussed as of the date of publication. Because Microsoft must respond to changing market conditions, it should not be interpreted to be a commitment on the part of Microsoft, and Microsoft cannot guarantee the accuracy of any information presented after the date of publication.</i></p>
<p>
<i>This document is for informational purposes only. MICROSOFT MAKES NO WARRANTIES, EXPRESS OR IMPLIED, IN THIS DOCUMENT.</i></p>
</BODY>
</HTML>

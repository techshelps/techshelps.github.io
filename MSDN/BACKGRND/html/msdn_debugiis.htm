<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Debugging with Internet Information Server 4.0</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_debugiis"></a>Debugging with Internet Information Server 4.0</h1>
<p>
Philip Carmichael<br>
IIS Program Manager<br>
Microsoft Corporation </p>
<p>
October 10, 1997 </p>
<h2>Introduction</h2>
<p>
Internet Information Server (IIS) 4.0 now enables you to debug the Global.asa file, .asp files, .cdx files, and ActiveX™ components written in Java. With IIS 3.0, debugging usually meant typing in Response.Write statements, which would send the necessary information to the browser to determine scripting errors. Using the new Microsoft Script Debugger, which ships with IIS 4.0 and Internet Explorer 4.0, it is possible to debug client-side <i>and</i> server-side scripts. This article outlines what you need to know to start using the debugger with Active Server Pages (ASP). </p>
<p>
ASP requires an <i>application</i> (a virtual directory marked as an application) to support debugging, which means that you must create an application to enable debugging. Creating an application also has the nice side effect of instructing ASP on where the Global.asa file exists and setting up an entry point for your application. </p>
<p>
To create an application, you need to create a new virtual directory in the IIS Management Console: 
<ul type=disc>
<li>
Open the <b>Properties</b> page by right-clicking the Web site icon in the tree view.<br><br></li>
<li>
Select the <b>Create</b> button to create the application and type in the application's path. </li>
</ul>
<p>
<img src="gdebugiis1.gif" border=0></p>
<p class=label>
<b>Figure 1. Creating a virtual directory in the IIS Management Console </b></p>
<h2>Successfully Enabling Debugging</h2>
<p>
To maximize performance, debugging is not enabled by default for ASP-based applications. Never enable debugging for an application in production, that is, a site being used by others. 
<ul type=disc>
<li>
To enable debugging, click the <b>Configuration</b> button on the application's <b>Properties</b> page. <br><br></li>
<li>
Under the <b>Application Debugging</b> tab, select the <b>Enable ASP server-side script debugging</b> check box. Note that this is the first check box listed. Do not select the second check box; it is reserved for a future feature. <br><br></li>
<li>
Click <b>OK</b> in both dialog boxes to save your application's settings. </li>
</ul>
<p>
Now that you are set up to debug, here are some useful debugging methods: 
<ul type=disc>
<li>
Request any .asp file from your application, using your browser. <br><br></li>
<li>
From the Start menu, choose <b>Microsoft Script Debugger</b>. <br><br></li>
<li>
When the Script Debugger is started, the <b>Running Documents</b> window should display. If it does not, select <b>Running Documents</b> from the <b>View</b> menu. Active Server Pages should appear as one of the entries in the <b>Running Documents</b> window. <br><br></li>
<li>
Expand the tree under the Active Server Pages entry until you find the .asp file that you requested. When you double-click the file, Microsoft Script Debugger will display the source for the .asp file. <br><br></li>
<li>
To set a breakpoint, click on a line in your source file (either HTML or script), and press F9 on your keyboard (the shortcut keystroke for Toggle Breakpoint). The nearest debuggable line in your .asp file should now display a red background. <br><br></li>
<li>
To have your breakpoint hit, request your .asp file using your browser. The Script Debugger should automatically get focus when the line with the breakpoint is reached. Congratulations! You are now debugging. F8 is the keyboard shortcut that I use most for Step Into, which executes the next executable block in your .asp file. </li>
</ul>
<p>
<img src="debugiis2.gif" border=0></p>
<p class=label>
<b>Figure 2. Microsoft Script Debugger </b></p>
<p>
Sometimes when you set a breakpoint in an HTML file, multiple lines are highlighted by the debugger. This is because these lines are sent to the browser as a single block by ASP, which is done to increase performance. To debug an include file you can use Step Into or you can expand an .asp file node that contains an include and set a breakpoint. </p>
<p>
Using Step Into through an .asp file is useful, but you should also know how to display and set values using the <b>Command</b> window. If the <b>Command</b> window is not already displaying in the Script Debugger, select <b>Command</b> window from the <b>View</b> menu. In this window you can do things like display values using script. If your current script language is Visual Basic® Scripting Edition (VBScript), you can type "? variablename", or "? object.propertyname". In JScript™, you need only type the variable name or "object.propertyname" and press ENTER. The value is then displayed. To set a value, use an assignment statement such as x = 1 or y = 2. In VBScript, you can also use: </p>
<pre><code>Set myObj = Server.CreateObject("someobject")
</code></pre>
<p>
In JScript, an object assignment statement is just like any other: </p>
<pre><code>myObj = Server.CreateObject("someobject")
</code></pre>
<h2>Debugging Tips</h2>
<p>
The Global.asa file was difficult to debug before, but now you can debug any of the three events: Application_OnStart, Session_OnStart, and Session_OnEnd. I find it easiest to edit the Global.asa file and type a Stop statement (for VBScript) or debugger statement (for JScript) in either the Application_OnStart or Session_OnStart events. By the time the Global.asa and requested .asp file appear in the <b>Running Documents</b> window, they have already been run once, and it is too late to debug the Application_OnStart event because it has already occurred. Also, the Session_OnStart event has already been run for the user's browser. However, setting breakpoints can be convenient for Session_OnEnd because it doesn't execute until later. </p>
<p>
Debugging an out-of-process application is just like debugging an in-process application. If you have selected the <b>Run in separate memory space</b> (isolated process) check box, your .asp files and the components they call will be run in a process other than the IIS 4.0 process. To find the application in the <b>Running Documents</b> window, you can expand each entry for Active Server Pages. A more technical approach would be to determine the process ID for the application and find the Active Server Pages entry in the <b>Running Documents</b> window that has the corresponding process ID. Expand the entry by adding the process ID in parentheses, as a suffix. </p>
<p>
The Script Debugger is read-only, so you will have to use an editor to make changes to Global.asa, .asp, and .cdx files that you want to modify as a result of debugging. </p>
<p>
Using the new Script Debugger can save you a lot of time. Whether a compiler, run-time, or logic error occurs, the debugger can show you exactly what is occurring. The <b>Command</b> window can assist in determining, for example, just what the value of some variable really is. And, most importantly, once you are finished debugging, always remember to turn this feature off. It limits an application to process requests singly, and the application is no longer concurrent.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Web Pages: A Programmer's Perspective</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_webpage"></a>Web Pages: A Programmer's Perspective</h1>
<p>
Michael McGee</p>
<p>
June 10, 1996</p>
<h3>Contents</h3>
<p>
<a href="#brief">A Brief History of the World Wide Web</a><br>
<a href="#language">HTML: The Language of the Web Page</a><br>
<a href="#theway">The Way to Active Web Pages</a><br>
<a href="#awordabout">A Word About ActiveX Documents (aka Document Objects)</a><br>
<a href="#testingwebpages">Testing Web Pages</a></p>
<h2>Introduction</h2>
<p>
In case you haven't noticed, the frenzy over the World Wide Web is not dying down, but rather it seems to become more intense with each passing day. New technologies and new Web browsers are encouraging the creation of "more active" and "smarter" Web pages. There is a definite move from the "static" type of pages (the ones you're used to seeing) toward ones rich in "active" content. This means lots of opportunities for Web page authors to get involved in creating active Web page content.</p>
<p>
This article focuses on using these "active" technologies to provide Web pages with new and exciting functionality. This article is designed to familiarize you with the issues, challenges, and resources you'll deal with when creating Web pages that include active content.</p>
<p>
First, a very brief introduction to the World Wide Web.</p>
<h2><a name="brief"></a>A Brief History of the World Wide Web</h2>
<p>
The Web was born in early 1989 as a result of efforts by researchers at the European Laboratory for Particle Physics (CERN) in Geneva, Switzerland. Their goal was to create an online system that would allow nontechnical users to share data without the need to use arcane commands and esoteric interfaces. Within two or three years, users outside CERN were putting together pages for the Web while developers were designing and creating powerful browsers. By 1993, the Web and its browsers had become <i>the</i> way to move around the Internet.</p>
<p>
Today an industry group known as The World Wide Web Consortium (W3C) develops common standards for the Web. Take a look at The W3C Web site (http://www.w3.org/pub/WWW/), to get lots of information about the Web, plus a succinct statement of what it is. "It [the Web] has a body of software, and a set of protocols and conventions. W3 uses hypertext and multimedia techniques to make the Web easy for anyone to roam, browse, and contribute to."</p>
<p>
And once you have Internet access the Web is fairly easy to use. Just connect, select your favorite browser, and take a look around various sites of interest. You'll find tons of information on an almost limitless number of topics, all seamlessly connected.</p>
<h2><a name="language"></a>HTML: The Language of the Web Page</h2>
<p>
Before getting into just how programming can be used to radically change the look and functionality of Web pages, let's take a peek at the language of the Web page: HyperText Markup Language (HTML). For the uninitiated, this HTML overview will give some idea of the level of content functionality currently found in most Web pages.</p>
<p>
Because there are several good texts that detail the hows and whys of HTML for Web page authors, there's no attempt here to provide a complete understanding of HTML. You can find lots of information on HTML in <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="msdn_htmlauth">
</object><a href=JavaScript:alink_1.Click()>"HTML Authoring Features for Internet Explorer 3.0"</a> and <i>The Microsoft Internet Explorer 3.0 Author's Guide and HTML Reference</i> at <a href="http://www.microsoft.com/workshop/author/newhtml/">http://www.microsoft.com/workshop/author/newhtml/</a>.</p>
<p>
In addition, you can connect to the <i>HTML DTD Reference</i> at http://www.w3.org/MarkUp/html-spec/L1index.html and <i>A Beginner's Guide to HTML</i> at http://www.ncsa.uiuc.edu/General/Internet/WWW/HTMLPrimer.html for more information, as well as links to other HTML information sources.</p>
<h3>A Piece of a Typical Web Page</h3>
<p>
Probably the best way to understand HTML is to look at part of a typical Web page and the corresponding HTML code. First, Figure 1—the page as a user sees it.</p>
<p>
<img src="webpage_1.gif" border=0></p>
<p class=label>
<b>Figure 1. The page as a user sees it</b></p>
<p>
Here's the HTML code that causes the page to be rendered by the browser:</p>
<pre><code>&lt;!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN"&gt;
&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;Ask Dr. GUI: The GUI-Guy Gets Webbed&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;!--DocHeaderStart--&gt;
&lt;BODY BGCOLOR=#FFFFFF &gt;
&lt;A HREF="/devnews/news.htm"&gt;
&lt;IMG SRC="/DEVONLY/IMAGES/newshead.gif"
WIDTH="130" HEIGHT="28" BORDER="0"&gt;&lt;/A&gt;
&lt;!--DocHeaderEnd--&gt;
&lt;br&gt;&lt;IMG SRC="/DEVONLY/news/gui1658b.gif" WIDTH="266" HEIGHT="66" BORDER="0"&gt;
&lt;P&gt;&lt;hr size=1&gt;
&lt;h1&gt;&lt;b&gt;Dr. GUI Gets Webbed&lt;/b&gt;&lt;/h1&gt;
&lt;P&gt;&lt;!--DATE--&gt;May 3, 1996
&lt;P&gt;&lt;!--/DATE--&gt;
&lt;P&gt;&lt;h2&gt;Yet more ch-ch-ch-ch-chan-ges&lt;/h2&gt;
&lt;P&gt;Relax: Dr. GUI's still a human. It's not Dr. GUI who's changed: It's his environment.&lt;P&gt;
 Dr. GUI has done a bunch of jobs at Microsoft spanning many years, but he's never seen anything like what's happening today. It reminds him of the early days of the PC and Mac, except everything's even more frenzied--especially the venture capital dollars chasing startups.
&lt;P&gt;&lt;h4&gt;Can you keep a secret?&lt;/h4&gt;
&lt;P&gt;Dr. GUI hasn't revealed this before, but he attended not one, but two Internet development conferences in recent months.
&lt;P&gt;You can read Dr. GUI's chronicles of the Microsoft &lt;A HREF="/devnews/pdcnews.htm"&gt;Internet Professional Developers Conference&lt;/A&gt;. If you were at the conference in San Francisco, you may have seen Dr. GUI: He was the kinda weird guy with the stethoscope around his neck. As Oscar Wilde said, &amp;quot;Everyone who disappears is said to be seen at San Francisco.&amp;quot; Clearly, that's not the secret. The secret is--promise not to tell your UNIX friends--that Dr. GUI earlier attended, incognito (i.e., sans stethoscope), the Netscape Internet Developer Conference.
&lt;/BODY&gt;&lt;/HTML&gt;
</code></pre>
<p>
A note about viewing HTML: An extremely handy feature of the browser, under the View menu, is its ability to display the HTML source code for the displayed Web page. If you want to experiment with the HTML, you can save the HTML source code in a separate .htm or .html file, make changes to it, and then open it with your browser to check what are the results of your changes.</p>
<p>
You'll notice right away that the basic HTML page contains both readable <i>text</i> and different types of <i>tags</i> enclosed in angle brackets (&lt; &gt;).</p>
<p>
These HTML tags instruct the browser how to render the page text as well as how to present graphics, sound, and video. The browser's parser reads the page and separates out the tags for processing. Most HTML tags, such as &lt;HTML&gt;, &lt;TITLE&gt;, &lt;HEAD&gt;, and &lt;FONT&gt;, require a corresponding &lt;/&gt; tag, which is needed to "close" the instruction specified by the tag. Others, such as &lt;P&gt; (which specifies a new paragraph) and &lt;BR&gt; (inserts a line break) have no closing tag. Most tags (such as those that point to an image to render or a different page to which to jump) require <i>attributes</i> that specify additional information that's needed. We'll talk more about this in the next section.</p>
<p>
Another special control character is ampersand (&amp;). When the browser comes across an ampersand, it knows to display a special character that may not be part of the ASCII set. For example, if you need to display "á" (as used in French, you'd use "&amp;aacute;" in your text. What if you want to include "&lt;" or "&gt;" in your text? Simple: "&amp;lt;" displays "&lt;" while "&amp;gt;" displays "&gt;".</p>
<h3>A Closer Look at the HTML Page</h3>
<p>
Like a one-pass language, HTML has no loops or jumps. When a browser processes an HTML page, it simply reads the page from top to bottom in a single pass.</p>
<p>
Although the browser reads the HTML page from top to bottom, it doesn't necessarily render the text and objects in exact top-to-bottom order, but in accordance with the data inserted with the tags that correspond to the text or object. In the next few paragraphs, we'll take a brief top-down look at this basic HTML page, examining each of the elements, its purpose, and how it relates to the rendered image displayed in the browser frame.</p>
<p>
Keep in mind that this page is not considered "active," but was chosen to illustrate the basics of HTML. As Microsoft ActiveX™ technologies become available, the typical Web page will become more and more active in its content by including scripts, controls, and documents, as you'll see later in this article.</p>
<p>
The first line in our example is:</p>
<pre><code>&lt;!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN"&gt;
&lt;HTML&gt;
</code></pre>
<p>
The first line is referred to as a "document type prolog" and is included to indicate that the attached HTML document conforms to the HTML standard as defined by the Internet Engineering Task Force (IETF). It also states that the document type definition (DTD) is PUBLIC (that is, not system dependent) and that the tag set used in the page is defined in English (EN). While this line is optional, it's a good idea to include it for those browsers that look for it. The &lt;HTML&gt; tag just says that the remainder of the page uses HTML (until &lt;/HTML&gt;).</p>
<p>
The rest of the second line:</p>
<pre><code>&lt;HEAD&gt;&lt;TITLE&gt;Ask Dr. GUI: The GUI-Guy Gets Webbed&lt;/TITLE&gt;&lt;/HEAD&gt;
</code></pre>
<p>
defines what appears in the browser's title bar when the page is displayed. In this case, it's "Ask Dr. GUI: The GUI-Guy Gets Webbed."</p>
<p>
Next, since each Web page contains a header, let's take a look at header for this page:</p>
<pre><code>&lt;!--DocHeaderStart--&gt;
&lt;BODY BGCOLOR=#FFFFFF &gt;
</code></pre>
<p>
These lines contain an example of&nbsp; a tag with an attribute—the background color of the body is white. They also contain a comment &lt;!--DocHeaderStart--&gt;. This tells you that the header is about to start, but the &lt;!-- --&gt; tag <i>comments out</i> these words so that they are not displayed by the browser. (The rule for HTML is that if a browser sees a tag it doesn't know, it ignores it—but it always displays text unless it's commented out.)</p>
<p>
Next, we have the <i>Developer Network News</i> logo:</p>
<pre><code>&lt;A HREF="/devnews/news.htm"&gt;
&lt;IMG SRC="/DEVONLY/IMAGES/newshead.gif"
WIDTH="130" HEIGHT="28" BORDER="0"&gt;&lt;/A&gt;
</code></pre>
<p>
This piece of HTML causes the browser to render the NEWSHEAD.GIF file shown below.</p>
<p>
<img src="webpage_2.gif" border=0></p>
<p>
The &lt;IMG&gt; tag provides the location of the image and how it is to be displayed.</p>
<p>
The file for this .GIF image contains an anchor tag <code>&lt;A HREF="/devnews/news.htm"&gt;</code>. This tag enables the browser to link to the HTML document named "news.htm" when a user clicks on the image. More on anchor tags later.</p>
<p>
Next, we have the Dr. GUI logo, which, like the header, is a .GIF image. The &lt;P&gt; tag on the next line defines a new paragraph, and the &lt;hr&gt; tag indicates a horizontal rule one pixel in height:</p>
<pre><code>&lt;br&gt;&lt;IMG SRC="/DEVONLY/news/gui1658b.gif" WIDTH="266" HEIGHT="66" BORDER="0"&gt;
&lt;P&gt;&lt;hr size=1&gt;
</code></pre>
<p>
The remainder of the HTML page defines the text to be displayed. If you look closely at the HTML, you'll find another anchor tag (link) buried in there.</p>
<p>
For additional information on HTML, such as rules and specifications, you can go to Microsoft's <i>Site Builder Workshop</i> at <a href="http://www.microsoft.com/workshop/">http://www.microsoft.com/workshop/</a> and the Microsoft Internet Explorer Web site at <a href="http://www.microsoft.com/ie/">http://www.microsoft.com/ie/</a>.You can also get a list of <i>HTML Editors for Windows</i> at http://omni.cc.purdue.edu/~xniu/winsock/htmledit.htm.</p>
<h3>Links to Web Page Content</h3>
<p>
By now, it's clear that a major feature of an HTML Web page is its ability to include active links to other HTML pages either at the same or another Web site. As mentioned earlier, these links, defined with tags referred to as anchors (the &lt;A&gt; and &lt;/A&gt; tags), are embedded into the page and rendered by the browser so that they are easily recognizable as jumps. When a user clicks one of these links, the browser loads, reads, and renders the destination page, which may be a remote Web page, one local to the server, or even content on a different part of displayed page itself. Figure 2 illustrates this concept.</p>
<p>
<img src="webpage_3.gif" border=0></p>
<p class=label>
<b>Figure 2. Links may be to remote Web pages or within the same page</b></p>
<p>
The underlying software uses the information contained in the link to connect to that site, and then retrieve the page for the browser. If it resides elsewhere on the same Web site, a "relative" path allows the browser to fetch and display it. In the example above, the anchor tag linked to an .html file named news.htm. Because this was located on the same server, we only needed to specify a relative path to it:</p>
<pre><code>HREF="/devnews/news.htm"
</code></pre>
<p>
But what about when the link is to a page residing on another server, perhaps a continent away? In this case, we must specify a uniform resource locator (URL) in the anchor tag along with the HyperText Transfer Protocol (HTTP) protocol as in:</p>
<pre><code>&lt;a href="http://www.microsoft.com/msdn/default.htm"&gt;MSDN Online&lt;/a&gt;
</code></pre>
<p>
When this line of code is placed into an HTML page, a user sees the text <i>MSDN Online</i> in the browser window, but not the underlying link information. The link information is in the URL, which is divided into several different parts beginning with the protocol. For HTML pages, the protocol is usually the HTTP. An exception to this is the File protocol, which is valid within the local directory or possibly the local network, but not across the Web.</p>
<p>
The second piece of the URL (in the example, www.microsoft.com) is the name of the domain. This is followed by the path (/msdn) and, finally, by name of the page (/default.htm).</p>
<h3>A Word About Forms</h3>
<p>
In the past, forms have served up most interactive functionality in HTML pages. Forms allow the Web page to solicit input from a user, such as a topic to be searched for, or perhaps the user's name and credit card number in the case of a purchase. Once a user fills out the form, the information is sent back to the server for processing. Using forms is a simple, but often effective, way of passing data between the user and the owner of the Web page. Forms, like links, provide a certain level of page activity, even though the supporting software resides on the server and not on a user's machine.</p>
<h3>HTML Extensions: A Caution</h3>
<p>
It is not uncommon for the developers of a particular browser to define proprietary extensions to HTML as a means of increasing browser capability. Because the tags used for these extensions are proprietary, Web pages that employ such tags may not display properly when displayed by other browsers. This means that users could miss some of the content. For this reason, it's important that Web pages be written so that they conform to the standards issued by the World Wide Web Consortium (<a href="http://www.w3.org/pub/WWW/">http://www.w3.org/pub/WWW/</a>). These ensure that Web pages can be read universally. This also greatly simplifies testing HTML pages, since they contain no extensions unique to a specific browser.</p>
<h2><a name="theway"></a>The Way to Active Web Pages</h2>
<p>
So far, we've discussed a somewhat typical Web page and some of the features available to a user. Authoring these "static" Web pages is fairly easy using the authoring tools available.</p>
<p>
Several new and emerging technologies, however, give you a tremendous opportunity to create active, and therefore interesting, Web pages. These technologies allow the creation and insertion of active content and objects into the Web page. Such content can be used to integrate multimedia (animation, video, sound, and 3-D rendering), dedicated applications, and database tools right into the Web page itself.</p>
<h3>Visual Basic Scripting: An Overview</h3>
<p>
Scripting with Microsoft Visual Basic® is available through, you guessed it, the Microsoft Visual Basic Scripting Edition (VBScript). VBScript is a subset of the Microsoft Visual Basic programming language and is upwardly compatible with Visual Basic. VBScript, which is included with Internet Explorer 3.0, is used to create active online content on a Web page by embedding the script into the HTML page. Similarly, VBScript also allows developers to link and automate a wide variety of objects in Web pages, including ActiveX controls and "applets" (created using the Java™ language from Sun Microsystems, Inc.), which are then loaded and registered in the user's system.</p>
<h3>An Example of VBScript in an HTML Page</h3>
<p>
To get an idea of how VBScript works, take a look at the following example. While this is just about the simplest example possible, a variation of the venerable "Hello World!" application, it serves to illustrate how a piece of VBScript is embedded in the body of an HTML page.</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript" EVENT="OnClick" FOR="Button1"&gt;
&lt;!--
 &nbsp;&nbsp; MsgBox "Hello World from VBScript!"
--&gt;
&lt;/SCRIPT&gt;
&lt;H3&gt;Running a simple VBScript&lt;/H3&gt;&lt;HR&gt;
&lt;FORM&gt;
&lt;INPUT NAME="Button1" TYPE="BUTTON" VALUE="Click Me"&gt;
&lt;/FORM&gt;
</code></pre>
<p>
When Internet Explorer reads this page, it finds the &lt;SCRIPT&gt; tags, recognizes that there is a piece of VBScript code and saves it.</p>
<p>
When you click the button, an <b>OnClick</b> event is generated by <b>Button1</b>, defined with the &lt;INPUT&gt; tag. The browser makes the connection between the <b>Button1</b> event and the script and calls <b>MsgBox</b> (already declared by VBScript), passing in <b>Hello World</b> string.</p>
<p>
Here, because the &lt;SCRIPT&gt; tag specifies the event and the name of the button control, we don't use the <b>Sub</b> and <b>End Sub</b> statements normally found in VBScript code. However, we do use them in the following example script, which accomplishes the same thing. When the button is clicked in this second example, the browser runs the event procedure (named <b>Button1_OnClick</b>) to call <b>MsgBox</b>.</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
Sub Button1_OnClick
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "Hello World from VBScript!"
End Sub
--&gt;
&lt;/SCRIPT&gt;
&lt;H3&gt; Running a simple VBScript&lt;/H3&gt;&lt;HR&gt;
&lt;FORM&gt;
&lt;INPUT NAME="Button1" TYPE="BUTTON" VALUE="Click Here"&gt;
&lt;/FORM&gt;
</code></pre>
<p>
Also, you might notice that the VBScript code is commented by means of the &lt;!-- and the --&gt; tags. This prevents browsers that don't support scripting from displaying the VBScript code. So the comment tags will keep an old browser from displaying the subroutine while allowing the VBScript-aware browser to execute it.</p>
<p>
For additional details on VBScript and how to use it in HTML pages, take a look at Microsoft's VBScript home page at <a href="http://www.microsoft.com/vbscript/">http://www.microsoft.com/vbscript/</a>.</p>
<p>
With VBScript, there are many ways to enhance the HTML page with interesting elements. For example, the HTML page with embedded VBScript can respond to user-initiated events quite easily. Functionality now provided by VBScript was previously possible only with common gateway interface (CGI) applications running on the server. Because VBScript resides in the Web page, doesn't demand server processing time, or require the overhead of a communications link, it executes faster.</p>
<h3>JavaScript</h3>
<p>
JavaScript is another scripting language developed for creating Web page content. JavaScript is similar in structure to VBScript and, like VBScript, is fully contained in the HTML page. It is native to the Netscape Navigator browser and, while not an open standard, also runs in Internet Explorer 3.0. Scripts written in JavaScript can also be embedded into HTML pages and, like VBScript, appear more like an HTML extension than a programming language. The following is the "Hello World!" example in JavaScript and shows its similarity to VBScript:</p>
<pre><code>&lt;SCRIPT LANGUAGE="JavaScript"&gt;
&lt;!--
 &nbsp; function PushButton() {
 &nbsp;&nbsp;&nbsp; alert("Hello World from JavaScript!");
}
//&nbsp; --&gt;
&lt;/SCRIPT&gt;
&lt;H3&gt;Running a simple JavaScript script&lt;/H3&gt;&lt;HR&gt;
&lt;FORM&gt;
&lt;INPUT type="BUTTON" name="Button2" value="Click Me" OnClick="PushButton()"&gt;
&lt;/FORM&gt;
</code></pre>
<p>
Let's take a quick look at what's going on in this piece of JavaScript. As in VBScript, the functions are declared between the &lt;SCRIPT&gt; tags. The function <b>PushButton</b> is loaded and kept in memory. The button is created with the &lt;INPUT&gt; tag. Like the &lt;SCRIPT&gt; tags back in the first VBScript example, the &lt;INPUT&gt; tag allows the function to be called without the need for <b>Sub</b> and <b>End</b> <b>Sub</b> statements. The <b>OnClick</b> event tells the browser to call <b>PushButton</b>() within the &lt;INPUT&gt; tag.</p>
<p>
There's one more little difference in that the closing comment is "//&nbsp; --&gt;" rather than just "--&gt;". The two slashes (<b>//</b>) tell JavaScript that the rest of the line is a comment. So what we've done here is put the HTML close comment sequence (--&gt;) inside a Java comment. If you leave off the slashes, Internet Explorer 3.0 will work fine, but Netscape may give you a JavaScript error when you load the page.</p>
<p>
Click the button and you get the same results as with the VBScript example. The main point here is that you could choose either language, although if you are already familiar with Visual Basic or Visual Basic for Applications (VBA), you may find VBScript easier to use.</p>
<p>
For information on JavaScript, take a look at the Earthweb Gamelan site at http://www.gamelan.com/pages/Gamelan.javascript.html.</p>
<h3>ActiveX Controls</h3>
<p>
ActiveX controls, formerly known as OLE Controls or OCXes, can optionally implement a few extended interfaces. In addition to Web pages, ActiveX controls can also be used in applications written in many languages, including all of the Microsoft programming and database languages. ActiveX controls written in the Java language will also be cross-platform.</p>
<p>
In a Web page, ActiveX controls can accomplish a wide range of tasks, ranging from playing animations to implementing desktop applications. There are literally hundreds of ActiveX controls available today with functionality ranging from a simple timer control (that fires events to its container at specified intervals) to full-featured animation display controls—even entire applications! When a control is used within a control container, such as the Web browser, it can communicate by exposing properties and methods as well as by firing events.</p>
<p>
You can get some idea of ActiveX control capability and usefulness by sampling the controls in the Microsoft ActiveX Component Gallery at <a href="http://www.microsoft.com/activex/gallery/">http://www.microsoft.com/activex/gallery/</a>. Take a few minutes and examine these examples; although they are fairly simple, you can examine their HTML source code to see what's going on.</p>
<p>
The next version of Visual Basic will support writing ActiveX controls. At the moment, however, there are three basic ways to write ActiveX controls. The easiest is to use the OLE Control development facilities built into Visual C++ and the Microsoft Foundation Class (MFC) Library. Next, the ActiveX SDK includes a sample called BaseCtl, which comprises the FrameWrk, ToDoSvr, and WebImage examples. Writing your controls in this way gives you the smallest possible controls; but it also requires intimate knowledge of the OLE Component Object Model (COM) and ActiveX control architecture. Finally, there is the ActiveX Template Library (ATL), which includes the library plus the Beeper and Labrador samples. This is a library of C++ templates that also do some of the OLE work, but they still require a knowledge of COM and ActiveX control architecture. For an overview on writing ActiveX controls see <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="msdn_actxcont">
</object><a href=JavaScript:alink_2.Click()>"ActiveX Controls Overview"</a>.</p>
<p>
Adding an ActiveX control to an HTML page is a simple matter. This is where the &lt;OBJECT&gt; tag comes in. This tag includes a set of parameters that you use to specify which data the control should use and also to determine the appearance and behavior of the control. To get an idea of how you can include an ActiveX control in a Web page, plus provide it with some user interaction, the following HTML code causes the browser to fetch, register (in the user's registry), and run a simple ActiveX control named "iemenu.ocx." For more complex examples, see the Microsoft ActiveX Component Gallery.</p>
<p>
Typing the <b>classid</b> attribute is no fun, but fortunately there's a tool that helps. Check out the ActiveX Control Pad (now incorporated in the Web Design-time Control SDK) at <a href="http://www.microsoft.com/workshop/author/cpad/">http://www.microsoft.com/workshop/author/cpad/</a>, which allows you to drag and drop ActiveX controls into Web pages. (It also has a scripting wizard that makes script writing a snap and support for the new HTML Layout Control.)</p>
<pre><code>&lt;!--HtmlStart--&gt;
&lt;H3&gt;Popup Menu&lt;/H3&gt;&lt;HR&gt;
&lt;OBJECT
   id=HelloWorld
CODEBASE="/workshop/iemenu.ocx#Version=4,70,0,1086"
classid="clsid:7823A620-9DD9-11CF-A662-00AA00C066D2"
&gt;
&lt;param NAME="Menuitem[0]" value="Say 'Hello'"&gt;
&lt;param NAME="Menuitem[1]" value="2nd menu item"&gt;
&lt;/OBJECT&gt;

&lt;CENTER&gt;&lt;FORM&gt;&lt;INPUT TYPE="button" NAME="Button3" VALUE="Click Here" ALIGN=RIGHT&gt;&lt;/FORM&gt;&lt;/CENTER&gt;
&lt;SCRIPT language="VBScript"&gt;
Sub HelloWorld_Click(ByVal x)
 &nbsp;&nbsp; Select Case x
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "Hello World from VBScript!"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case 2
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "2nd menu item"
 &nbsp;&nbsp; End Select
End Sub
Sub Button3_OnClick
 &nbsp;&nbsp; call HelloWorld.PopUp
End Sub
&lt;/SCRIPT&gt;
&lt;!--HtmlEnd--&gt;
</code></pre>
<p>
Here's how &lt;OBJECT&gt; tag and script look for this control:</p>
<pre><code>&lt;H3&gt;Popup Menu&lt;/H3&gt;&lt;HR&gt;
&lt;OBJECT
   id=HelloWorld
CODEBASE="http://www.microsoft.com/workshop/iemenu.ocx#Version=4,70,0,1086"
classid="clsid:7823A620-9DD9-11CF-A662-00AA00C066D2"
&gt;
&lt;param NAME="Menuitem[0]" value="Say 'Hello'"&gt;
&lt;param NAME="Menuitem[1]" value="2nd menu item"&gt;
&lt;/OBJECT&gt;

&lt;CENTER&gt;&lt;FORM&gt;&lt;INPUT TYPE="button" NAME="Button3" VALUE="Click Here" ALIGN=RIGHT&gt;&lt;/FORM&gt;&lt;/CENTER&gt;
&lt;SCRIPT language="VBScript"&gt;
Sub HelloWorld_Click(ByVal x)
 &nbsp;&nbsp; Select Case x
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "Hello World from VBScript!"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case 2
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "2nd menu item"
 &nbsp;&nbsp; End Select
End Sub
Sub Button3_OnClick
 &nbsp;&nbsp; call HelloWorld.PopUp
End Sub
&lt;/SCRIPT&gt;
</code></pre>
<p>
Notice that the &lt;OBJECT&gt; tag includes several key pieces of information regarding the ActiveX control. This includes an assigned ID, the source of the control expressed as a URL, and its class ID (<b>CLSID</b>) for entry into the registry. This information allows the browser to obtain, register, and load the control on a user's system. Also notice that the &lt;OBJECT&gt; tag is inserted in the body of the HTML page, not in the header like VBScript and JavaScript declarations.</p>
<p>
The VBScript that follows the ActiveX control simply calls its <b>PopUp</b> method, which displays the menu. When the menu item of the control is clicked, <b>MsgBox</b> displays the appropriate text string.</p>
<p>
For more information, check out <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="msdn_actxcont">
</object><a href=JavaScript:alink_3.Click()>"Active X Controls Overview"</a>.</p>
<h3>JAVA Applets</h3>
<p>
The Java language allows you to write programs that, like ActiveX Controls, can be included in an HTML Web page to create such things as:
<ul type=disc>
<li>
animations<br><br></li>
<li>
graphical objects (bar charts, graphs, diagrams, etc.)<br><br></li>
<li>
applications made up of collections of controls like edit areas, buttons, and check boxes<br><br></li>
<li>
new controls</li>
</ul>
<p>
Java is an object-oriented programming language derived from C++ and extended by means of a collection of libraries. In addition to creating Java applets that are loaded over the Web with the HTML page, the Java environment also allows you to create standalone applications.</p>
<p>
In keeping with the simple examples provided throughout this article, here's the familiar "Hello World" program written in Java (courtesy of Marshall Brain, Interface Technologies).</p>
<pre><code>//Hello.java
import java.awt.*;
import java.applet.*;
public class Hello extends Applet 
{
 &nbsp; public void paint(Graphics g) 
 &nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; for (int x = 0 ; x &lt; size().height ; x++) 
 &nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawString("Hello World from Java!", 10, x*15);
 &nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp; }
}
</code></pre>
<p>
This is how the "Hello World" Java applet can be inserted in the HTML page.</p>
<pre><code>&lt;TITLE&gt; Running a simple Java Applet&lt;/title&gt;
&lt;hr&gt;
&lt;APPLET code=Hello.class width=300 height=120&gt;
&lt;/APPLET&gt;
</code></pre>
<p>
There's any number of links to Java language information available on the Web; a good place to start is the Microsoft Java resources page at <a href="http://www.microsoft.com/java/">http://www.microsoft.com/java/</a>. Another good resource is Grafman's Production site at http://www.graphcomp.com/info/specs/java.</p>
<p>
Java applets currently have a couple of potential drawbacks: They don't currently communicate with each other and don't communicate well with the frame that is hosting them. (Internet Explorer will change that!) By contrast, ActiveX controls implement the interfaces necessary for such communication. Another issue with Java applets is that you have to write them from scratch using a new language and with a new class library.</p>
<h2><a name="awordabout"></a>A Word About ActiveX Documents (formerly known as Document Objects)</h2>
<p>
So far, we've been discussing the hows of authoring Web pages by the inclusion of "active objects" into the HTML page to bring specialized functionality and features. However, in discussing document objects, we move away from the HTML page to a technology that allows applications to create documents that can be published directly on the Web, in native format, without conversion to HTML. So, if you're involved in applications development and want documents that will double as Web pages and can be displayed directly in both Internet Explorer and the upcoming Internet Explorer 4.0 shell, document objects, now known as ActiveX documents, are definitely worth the implementation effort.</p>
<p>
Document objects provide a standard way for applications to live inside the document object-aware Web browser frame. Web browsers like Internet Explorer and Netscape Navigator can now render any kind of Windows-based document exactly as if running inside the document's native application—as long as that application implements the document object interfaces.</p>
<p>
To accomplish this direct rendering, document objects borrow a page from the container/object architecture of OLE, which allows the embedding of any kind of document into the document of another application, such as a range of spreadsheet cells into a word processor document. With OLE, work is divided between the word processor (the container document) and the spreadsheet cells (the server object) with the container doing the work necessary to contain the object and display its static presentation metafile. The server object (often a document itself) remains passive until a user wants to do something with it, at which time the server application starts up and takes over the user interface and becomes the active application.</p>
<p>
This architecture is quite similar to that needed for unified browsing of documents, except that instead of embedding a foreign document server object as a piece inside some other document, we want to embed it standalone inside the browser frame. That is, the object is contained by the frame without the need for any HTML.</p>
<p>
The document object-aware browser (or "host") implements the normal OLE compound document server interfaces, plus a few others. In OLE and its compound documents, the server object doesn't know, nor does it need to know, about pagination, headers, footers, title pages, views, or other document level behavior because it relies on the container to handle these tasks. However, in a browser frame-embedding scenario, the document object must implement this functionality because the browser frame does not. The browser frame lends itself (caption, menus, toolbar, client area, and so on) for the document object to use however it wants. The Microsoft Office 95 Binder, NSCA Mosaic Web browser, and Microsoft Internet Explorer 3.0 are all examples of such document object hosts. These programs can view any document object.</p>
<p>
Storage is another issue for the document object to handle. Since the document object stands alone outside the context of any containing document, it must provide its own storage.</p>
<p>
For some information on document object implementation strategies, take a look at the ActiveX document specification in the ActiveX SDK and at the latter part of the "Sweeper" article in the Spring 1996 issue of the <i>Microsoft Interactive Developer Magazine</i> at <a href="http://www.microsoft.com/mind/">http://www.microsoft.com/mind/</a>.</p>
<h2><a name="testingwebpages"></a>Testing Web Pages</h2>
<p>
Like any software products, HTML pages must be tested. When testing a Web page, some of the basic things to check for include:
<ul type=disc>
<li>
Page layout and presentation; that is, does the page look like it's supposed to when rendered by the browser?<br><br></li>
<li>
Does the page appear as it's supposed to when rendered by different browsers? If you chose to use nonstandard HTML tags (extensions), you may get some surprises here, especially because different browsers may handle these nonstandard tags differently.<br><br></li>
<li>
Are the page elements (graphics, animations, font sizes, and so on) of an acceptable size when viewed at a 640-by-480 resolution? Many users have this setting on their systems.<br><br></li>
<li>
Does the page load in a reasonable amount of time at 14.4 kilobits per second (Kbps)? Many users have 14.4-Kbps modems and cannot download pages faster than this. If a page is laden with graphics, consider ways to reduce the graphics sizes.<br><br></li>
<li>
Although it may seem obvious, check whether all the functionality programmed into the page operates correctly and smoothly.</li>
</ul>
</BODY>
</HTML>

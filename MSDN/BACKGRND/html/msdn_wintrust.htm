<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Windows Trust Verification Services</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_wintrust"></a>Windows Trust Verification Services</h1>
<p>
Microsoft Corporation</p>
<p>
February 1996</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This document is an early release of the final specification. It is meant to specify and accompany software that is still in development. Some of the information in this documentation may be inaccurate or may not be an accurate representation of the functionality of the final specification or software. Microsoft assumes no responsibility for any damages that might occur either directly or indirectly from these inaccuracies. Microsoft may have trademarks, copyrights, patents or pending patent applications, or other intellectual property rights covering subject matter in this document. The furnishing of this document does not give you a license to these trademarks, copyrights, patents, or other intellectual property rights.</p>
<h2>Contents</h2>
<p>
<a href="#wintrustover">Overview</a><br>
<a href="#wintrustintro">Introduction</a><br>
<a href="#wintrustterminology">Terminology</a><br>
<a href="#wintrusttrust">Trust Model</a><br>
<a href="#wintrustapi">Windows Verify Trust API</a><br>
<a href="#wintruststructures">Windows Trust Common ActionData Structures</a></p>
<h2><a name="wintrustover"></a>Overview</h2>
<p>
This document defines the interface to trust verification services. Trust verification services are general-purpose application programming interfaces (APIs) for determining whether the subject of the request can be trusted, based on policies defined by a trust administrator. Trust providers implement trust verification services for different types of subjects and actions required. Envisioned uses of trust verification services include trusted software publishing, image integrity, and Windows compatibility.</p>
<h2><a name="wintrustintro"></a>Introduction</h2>
<p>
Trust verification services provide a common API for determining whether a specific subject can be trusted.</p>
<p>
Trust verification services answer the question: Is [<b>a component or resource</b>] trusted [<b>for something specific</b>] according to [<b>a specific authority</b>]?</p>
<p>
For example, when downloading software from the Internet, the client application needs to answer the following question: Is [<b>this ActiveX™ control</b>] trusted [<b>to be labeled as provided by a trusted software publisher</b>] according to [<b>the Software Publisher Trust Hierarchy and System Settings</b>]?</p>
<p>
The answer to the question depends on the following:
<ul type=disc>
<li>
The type of information being verified for trust.<br><br></li>
<li>
The Trust Administrator's local system policy regarding who and what to trust.<br><br></li>
<li>
The Trusted Authority who produced the subject or who acts as an agent to certify others to produce subjects according to a specific policy.</li>
</ul>
<p>
Trust verification services are implemented by trust providers. Trust providers define the format of the subject information they support and what trust actions they implement. A trust action identifies the verification to be performed—for example, verifying that the subject image is published by a trusted software publisher.</p>
<p>
It is often convenient to embed trust material used in evaluating trust decisions (such as X.509 certificates or PKCS #7 digital signatures) in subject information being verified, and each different data format may require different mechanisms for performing such embedding and for digesting the data stream. Each trust provider may support many different subject forms. To facilitate this, we define subject forms—for example, portable executable (PE) format executable images and OLE structured storage (<b>IStorage</b>) subjects.</p>
<p>
Trust administrators define the local policy regarding what authorities or subjects are trusted. For example, the trust administrator for software publishers would identify which software publishers are trusted and therefore allow their digitally signed published software to run on the specified system. Administration of trust can be simplified by identifying a group of trusted software publishers based on the organization or agency, that is, the certificate authority (CA), that issued their software publishing certificates.</p>
<p>
Trusted authorities are typically certificate authorities (or agencies of a certificate authority) whose authentication policies are acceptable to the trust administrator. Trusted authorities also refer to individual producers who are trusted. The trust administrator makes a determination of trust based on information on either the policies used by the authority or the reputation of the authority.</p>
<h2><a name="wintrustterminology"></a>Terminology</h2>
<p>
The following terms will be used in this document</p>
<p>
<b>Trusted Authority</b>—An authority or entity that may be, or already is being, trusted for something specific. For example, Microsoft might be trusted to provide virus-free images in our products. In this case, Microsoft would be called a Trusted Authority.</p>
<p>
<b>Trust Administrator</b>—The person or entity that is responsible for deciding whether an authority is to be trusted or not. For example, just because XYZ Corporation provides signatures with all the executable images it ships, that doesn't necessarily mean that I will trust them to vouch for the integrity of images on my system.</p>
<p>
<b>Trust Provider</b>—A software module that implements the algorithm for application-specific policies regarding trust. Trust providers support subject forms that describe where the trust information is located and what trust actions to take regarding the subject.</p>
<h2><a name="wintrusttrust"></a>Trust Model</h2>
<p>
The model that the trust verification services interface describes is an interface allowing any application to use a variety of trust provider services, available to all trust providers on a machine with a consistent interface. Multiple trust providers can be available on the system at the same time. Each trust provider specializes in different actions and may support one or more subject types.</p>
<p>
Each trust provider identifies the actions supported by that provider and the structure of the data provided when evaluating trust for the given action. The data format may include subject information, which is specified uniformly for all trust providers so that they may share common code for interpreting various subject forms.</p>
<p>
The relationship of applications to trust verification services and trust providers is shown in Figure 1.</p>
<p>
<img src="wintrust_1.gif" border=0></p>
<p class=label>
<b>Figure 1. Trust Verification Services</b></p>
<p>
Some trust providers may implement their own administrative database containing a list of trusted authorities or subjects. The list of trusted authorities is called a Trust Authority Database, although the implementation may not depend on a database management system (DBMS). The definition and implementation of the trust authority database is specific to each trust provider and documented in the trust provider specification. Other trust providers may not refer to a configurable trust authority database and may instead follow a closed set of rules for evaluating trust decisions.</p>
<p>
This document defines the interfaces between applications and trust verification services. The interfaces between trust verification services and trust providers will be defined in another document.</p>
<h2><a name="wintrustapi"></a>Windows Verify Trust API</h2>
<h3>WinVerifyTrust</h3>
<p>
The <b>WinVerifyTrust</b> function is used to ascertain the trustworthiness of a subject. The caller specifies the trust provider that evaluates the subject according to the action requested.</p>
<pre><code>HRESULT
WINAPI
WinVerifyTrust(
 &nbsp; HWND&nbsp;&nbsp;&nbsp;&nbsp; hwnd,
 &nbsp; DWORD&nbsp;&nbsp;&nbsp; dwTrustProvider,
 &nbsp; DWORD&nbsp;&nbsp;&nbsp; dwActionID,
 &nbsp; LPVOID&nbsp;&nbsp; ActionData,
 &nbsp; );
</code></pre>
<p>
The parameters are listed in Table 1.</p>
<p class=label>
<b>Table 1. WinVerifyTrust Parameters</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=20%><b>Parameter</b></td>
<td class=label width=80%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=20%><i>hwnd</i></td>
<td width=80%>Normally, every attempt is made to make trust decisions without the aid of an interactive user. However, situations may arise where trust can be more accurately determined with user approval or decision. This parameter is used to indicate whether an interactive user is available to assist in any trust decisions. If this value is passed as INVALID_HANDLE_VALUE, then no user interface (UI) will be presented and some default decision will be made without a user’s assistance. If this value is set to any other value, then it is assumed that there is an interactive user available. If the value is zero (0), then the caller's desktop will be used for any UI. Any other value is assumed to be the HWND of a calling user's window.</td>
</tr>
<tr valign=top>
<td width=20%><i>DwTrustProvider</i></td>
<td width=80%>Specifies which trust provider is to be used to answer the question of trust. This value establishes what the remaining parameter values mean. The initial values currently defined for <i>dwTrustProvider</i> are the following:<p>
<code>#define&nbsp;&nbsp; WIN_TRUST_PROVIDER_UNKNOWN&nbsp;&nbsp;&nbsp;&nbsp; 0x00000000<br>
#define&nbsp;&nbsp; WIN_TRUST_SOFTWARE_PUBLISHER&nbsp;&nbsp; 0x00000001</code></p>
</td>
</tr>
<tr valign=top>
<td width=20%><i>dwActionID</i></td>
<td width=80%>Specifies what the trust provider is being asked to verify. Each trust provider supplies its own set of trust actions. Please see the individual trust provider sections for these values.</td>
</tr>
<tr valign=top>
<td width=20%><i>ActionData</i></td>
<td width=80%>This parameter is used to pass information required by the trust provider, including data about the level of trust required or context for the trust decision, and, where applicable, information about the subject being verified. The meaning and format of the information passed via this parameter is dependent upon the action specified in the <i>dwActionID</i> parameter. Please refer to the individual trust provider sections for the formats supported.</td>
</tr>
</table><br>
<p>
This service dispatches the specified <i>ActionData</i> information to the selected trust provider for trust evaluation. If the trust provider specified is WIN_TRUST_PROVIDER_UNKNOWN, then the system will select an appropriate trust provider for the action specified by the <i>dwActionID</i> parameter, or return the error TRUST_E_PROVIDER_UNKNOWN if no trust provider that supports that action is installed.</p>
<p>
The definition of the <b>ACTIONDATA</b><i> </i>structure may be common among trust providers or a trust provider may define specific <b>ACTIONDATA</b> structures it supports. Common <b>ACTIONDATA</b> structures are defined in this specification. Please see the descriptions of individual trust providers for information on the types of <b>ACTIONDATA</b> structures supported.</p>
<p>
In the future, additional trust verification service APIs will be defined to enumerate available trust providers on a system and determine the actions they support.</p>
<p>
This function returns an HRESULT indicating the results of the trust inquiry. STATUS_SUCCESS (or ERROR_SUCCESS) indicates that the subject information provided in the <i>ActionData</i> parameter is trusted for the specified action. The function may return either one of the standard return values defined below or a trust provider specific value.</p>
<p>
If a value other than STATUS_SUCCESS is returned, then the subject is either not trusted or is trusted with some caveats. These caveats, if any, are specified by trust provider specific return codes and are documented with each trust provider. The standard error return codes are listed in Table 2.</p>
<p class=label>
<b>Table 2. Standard Error Return Codes</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=46%><b>Status Code</b></td>
<td class=label width=54%><b>Meaningb</b></td>
</tr>
<tr valign=top>
<td width=46%>TRUST_E_SUBJECT_NOT_TRUSTED</td>
<td width=54%>The subject is not trusted for the specified action. Most trust providers will return a more detailed error code than this when trust is not provided, but in some cases this undescriptive value may be returned.</td>
</tr>
<tr valign=top>
<td width=46%>TRUST_E_PROVIDER_UNKNOWN</td>
<td width=54%>The specified trust provider is not known on this system.</td>
</tr>
<tr valign=top>
<td width=46%>TRUST_E_ACTION_UNKNOWN</td>
<td width=54%>The trust verification action specified is not supported by the specified trust provider.</td>
</tr>
<tr valign=top>
<td width=46%>TRUST_E_SUBJECT_FORM_UNKNOWN</td>
<td width=54%>The form specified for the subject is not one supported or known by the specified trust provider.</td>
</tr>
</table><br>
<h2><a name="wintruststructures"></a>Windows Trust Common ActionData Structures</h2>
<p>
Some data structures defined in Windows are documented here for convenience and completeness. The definitions shown below are taken from the WINBASE.H header file common to Win32® platforms.</p>
<h4>ActionData Structures</h4>
<p>
Many trust providers will require only minimal context data for trust evaluation. They derive most of the information needed for trust decisions directly from a subject. The subject is a data stream that is to be validated by the <b>WinVerifyTrust()</b> call. Some <b>ACTIONDATA</b> structures are used by several trust providers, and they are described independent of them.</p>
<p>
The following <b>ACTIONDATA</b> data structures are defined:</p>
<pre><code>typedef LPVOID WIN_TRUST_SUBJECT

typedef struct _WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT {
 &nbsp;&nbsp; HANDLE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hClientToken;
 &nbsp;&nbsp; DWORD&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dwSubjectType;
 &nbsp;&nbsp; WIN_TRUST_SUBJECT Subject;
} WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT , *LPWIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT

typedef struct _WIN_TRUST_ACTDATA_SUBJECT_ONLY {
 &nbsp;&nbsp; DWORD&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dwSubjectType;
 &nbsp;&nbsp; WIN_TRUST_SUBJECT Subject;
} WIN_TRUST_ACTDATA_SUBJECT_ONLY , *LPWIN_TRUST_ACTDATA_SUBJECT_ONLY
</code></pre>
<p>
Within these data structures, the format of the subject data is specified by the value of the <b>dwSubjectType</b> field. Some commonly used subject types and subject data structures are defined below. The <i>hClientToken</i> parameter in the <b>WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT</b> structure is used to pass a handle to the security context of the calling application. A trust provider may use the security context when evaluating trust of the subject.</p>
<h4>Subject Types and Data Structures</h4>
<p>
Subject types describe formats of the data stream being validated by a <b>WinVerifyTrust()</b> call. The subject types are specified independent of specific trust providers. Multiple trust providers may share a common implementation to extract trust material from these subject formats and digest the relevant portions of the data stream. This separation allows trust providers to verify the trustworthiness of a data stream of a given format, without building knowledge of subject formats into each trust provider. Instead, trust providers share other common components (that are also trusted software) to interpret the data stream.</p>
<p>
Subject types defined in WINBASE.H, which are valid values for the <b>dwSubjectType</b> field of the <b>ACTIONDATA</b> structures defined above, include the following:</p>
<pre><code>#define WIN_TRUST_SUBJTYPE_RAW_FILE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (0L)
#define WIN_TRUST_SUBJTYPE_PE_IMAGE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (1L)
#define WIN_TRUST_SUBJTYPE_OLE_STORAGE&nbsp;&nbsp;&nbsp; (2L)
</code></pre>
<p>
For all of these subject types, the same data structure is required in the <i>Subject</i> parameter of the <b>ACTIONDATA</b> structures. This structure is as follows:</p>
<pre><code>typedef struct _WIN_TRUST_SUBJECT_FILE {

 &nbsp;&nbsp; HANDLE&nbsp; hFile;
 &nbsp;&nbsp; LPCWSTR lpPath;

} WIN_TRUST_SUBJECT_FILE, *LPWIN_TRUST_SUBJECT_FILE;
</code></pre>
<p>
The <b>hFile</b> element of the structure is optional. If <b>hFile</b> is provided, trust providers are expected to use this file handle to read the subject as a performance optimization. If <b>hFile</b> is set to the value INVALID_HANDLE_VALUE (defined in WINBASE.H), then the trust provider will open the subject using the <b>lpPath</b> field.</p>
<p>
The <b>lpPath </b>element of this structure is mandatory, and it includes the path of the subject being verified. The string may be used for the purpose of opening the file to read it, and optionally for prompting the user for additional information about the file.</p>
<p>
The caller may specify both fields in the structure, but provide a different string for <b>lpPath</b> than was used to obtain the HFILE handle. The <b>lpPath </b>string is not validated to ensure consistency with the open handle or the name that the subject may "expect" to have. This gives the caller the option of storing a subject data stream under a temporary name during the trust verification phase, and presenting the original file path in any user interface dialog.</p>
</BODY>
</HTML>

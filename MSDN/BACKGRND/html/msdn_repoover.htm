<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Microsoft Repository: An Overview</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_repoover"></a>The Microsoft Repository: An Overview</h1>
<p>
Valor Whisler<br>
Senior Engineer, Crescent Division of Progress Software</p>
<p>
March 17, 1997</p>
<p>
<i>Valor Whisler is a senior engineer for Crescent, a leader in the business of developing components and tools for Microsoft Visual Basic. He has a lead role in helping Crescent deliver high quality, innovative, and useful products. He developed the Repository Browser, which ships with Microsoft Visual Basic version 5.0.</i></p>
<p>
<OBJECT id=sample1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Backgrounders Samples">
<PARAM name="Item2" value="5159">
</OBJECT><a href="javascript:sample1.Click()">Click to copy the files for the RepositoryTool sample for this technical article.</a></p>
<h2>Introduction</h2>
<p>
The Microsoft® Repository is a place to store and share objects between software tools, such as Microsoft Visual Basic® Add-Ins and custom reusable components. Microsoft Visual Basic version 5.0 is the first client for this repository—it ships with the repository engine, a tool information model (TIM) that describes a Visual Basic project, an add-in to populate the repository, and a browser to view repository data. Additionally, the Visual Modeler and the Visual Component Manager in the Microsoft Visual Basic, Enterprise Edition use the repository. It is likely that new versions of other Microsoft development tools will provide similar hooks to the repository. The repository was developed in order to deliver improved support in the following strategic areas:
<ul type=disc>
<li>
<b>Reuse</b>—facilities for cataloging and locating relevant designs, code and services <br><br></li>
<li>
<b>Dependency tracking</b>—facilities for establishing and querying relationships between objects<br><br></li>
<li>
<b>Tool interoperability</b>—facilities to publish standardized descriptions of systems which allows independent tools to exchange data<br><br></li>
<li>
<b>Data resource management</b>—global metadata for an enterprise data warehouse, and a resource library of available services and components<br><br></li>
<li>
<b>Team development</b>—facilities to help manage concurrent activity on different versions and configurations of application design and development</li>
</ul>
<p>
At the core of the repository is the <i>engine</i>, a set of Component Object Model (COM) and Automation (formerly OLE Automation) interfaces that provide a way of reading and writing structured data to a relational database—specifically, a Microsoft Access or Microsoft SQL Server™ database. This engine exposes OLE objects with methods that are used to create and manage repositories, system descriptions (tool information models, or TIMs), and instances of system objects. You may have a tendency to think of this engine as the repository, but it may be more useful to think of the repository as a collective toolset: the <i>engine</i>, <i>tool information models</i>, <i>repository tools</i>, and <i>repository data</i>.</p>
<p>
This paper will first discuss why the repository should be used and then delve deeper into conceptual aspects of the repository such as tool information and object models. It then provides some practical examples of using the repository by discussing the Repository Browser and Visual Component Manager. Finally, a fully functional set of code is provided to start programming the repository.</p>
<h2>Why Use the Repository?</h2>
<p>
Although there is much to discuss about the repository, all of the reasons to use the repository can be distilled down to three important points. The repository provides:
<ul type=disc>
<li>
A metaview of the development process—each individual tool can only provide its own tool-centric view of product development. The repository can help visualize and manage a development process across all development tools. For example, the relationships between Microsoft Visual Basic, Microsoft Visual C++®, and Microsoft Word can be understood.<br><br></li>
<li>
Impact analysis—in this increasingly complex world of local and distributed objects the repository, which can capture the relationships between objects, can be used to understand the impact of changes to any object.<br><br></li>
<li>
A common data store for all development tools—in the past each tool has had its own proprietary data format. Exchange of data between such tools was typically performed via import/export functions. The repository provides not only a common place to store data, but also a common way to organize such data. This leads to a greater integration between any user-defined suite of such tools.</li>
</ul>
<p>
The bottom line is this: the repository can enable tools that will provide completely new perspectives of the development process and also provide programmers with new development capabilities. To illustrate one new development perspective, take a look at the Visual Component Manager add-in that is available on the Microsoft Visual Studio™ 97 Web site for registered Microsoft Visual Basic owners (<a href="http://www.microsoft.com/vstudio/owner/default.asp">http://www.microsoft.com/vstudio/owner/default.asp</a>). This product organizes and makes available components, tools, and projects that can be used in a Visual Basic project as well as many other features and functions. All of these components can be located, manipulated, and used from a single, centralized interface. The Visual Component Manager is discussed in more detail later in this document.</p>
<p>
For more detailed information, see <a href="msdn_reposwp.htm">"What Is Microsoft Repository?"</a> and <a href="msdn_reptech.htm">"Repository Technology: A Key Enabler for Business Application Development."</a></p>
<h2>Tool Information Models</h2>
<p>
Tool information models (TIMs) are descriptions of systems, or processes that are published in a repository. A repository can contain any number of TIMs, each describing a different system, or process. Each TIM defines the objects, interfaces, relationships, and properties that make up a system. You may also think of a TIM as a <i>template</i> for a particular type of system. Standardized TIMs allow for independent tools to interact with a common set of repository data. For example, the MdoTypeLib was created to describe Visual Basic projects. The add-in that ships with Microsoft Visual Basic 5.0 uses this model when creating instances of objects that describe actual projects. Likewise, any other toolmaker can use this model in the same way.</p>
<p>
The model of a system can get quite complex and its representation in the browser may seem very different from the physical system it is designed to model. This is due to the fact that the repository requires you to think of objects in the context of how their interfaces relate to other objects, and furthermore that objects exist only in that they support one or more interfaces.This thought process can be difficult to master, but refreshingly useful when considering object interactions. To reduce the complexity of data displayed in the browser, it is possible to filter out the visualization of interfaces (on the <b>View</b> menu, click <b>Filters</b>). Figure 1 shows a typical Visual Basic project in the browser without the interfaces showing. Figure 2 in the next section shows the same project with the interfaces visible.</p>
<p>
“Information Modeling Using Microsoft Repository,” a slide show with more information on TIMs, is available in the Technical Materials section of the Microsoft Repository Web site at <a href="http://www.microsoft.com/Repository/">http://www.microsoft.com/Repository/</a>.</p>
<p>
<img src="repoov01.gif" border=0></p>
<p class=label>
<b>Figure 1. A Visual Basic project in the browser</b></p>
<h2>The Object Model</h2>
<p>
The repository engine is a dynamic-link library (DLL) that provides the following:
<ul type=disc>
<li>
<i>Repository</i> represents the repository database itself.<br><br></li>
<li>
<i>Repository object</i> represents the persistent state of an object in a repository. That state consists of the object's properties and collections, and supports one or more interfaces. There are various types, or <i>classes</i>, of repository objects.<br><br></li>
<li>
<i>Interfaces collection</i> represents a set of interfaces that are present on a repository object.<br><br></li>
<li>
<i>Interface</i> represents a group of related properties, methods and collections. Classes implement interfaces and relationships exist between interfaces, therefore classes relate to each other via their interfaces.<br><br></li>
<li>
<i>Relationship collection</i> represents a set of relationships that are defined on an object.<br><br></li>
<li>
<i>Relationship</i> represents a connection between an interface on one repository object with an interface on another repository object. <br><br></li>
<li>
<i>Properties</i> represents a set of properties that are defined on a specific interface or relationship.</li>
</ul>
<p>
Although these objects are accessible via COM and Automation interfaces, this paper will only be discussing the objects as they appear from within Visual Basic (Automation).</p>
<p>
The numbers in Figure 2 describe the different types of repository objects as follows: (1) the repository has a set of interfaces it supports, such as <b>IAnnotiationalProps</b>; (2) one of its interfaces is <b>IMpoProjectItemContainer</b>, which describes a Visual Basic project and contains a (3) collection of relationships and properties (not visible in the figure); (4) a repository object, in this case a representation of a Visual Basic project, is visible. Notice that it also has interfaces, and so on.</p>
<p>
<img src="repoov02.gif" border=0></p>
<p class=label>
<b>Figure 2. Types of repository objects</b></p>
<p>
When navigating through the objects in the repository, there is a repeating scheme: objects have interfaces, which have collections of relationships, which target other objects, which have interfaces, and so on. You will find this scheme provides a way to traverse the entire contents of a repository starting from the root object, or from any other repository object.</p>
<p>
What is not clear from the browser's perspective is that repository data is not necessarily hierarchical in nature. It is possible for objects to have relationships to any other object. A repository is more of a three-dimensional or a web-data schema and cannot adequately be shown in the two-dimensional browser.</p>
<h2>Using the Repository Browser</h2>
<p>
The repository browser that ships with Microsoft Visual Basic 5.0 provides a way to view the contents of any repository. As mentioned, the repository can contain any number of tool information models. Many tools will only use the TIMs in a particular repository that are related to their particular system, or process. The browser, on the other hand, can be considered a generic TIM and repository browser. That is, it will display information about all of the TIMs within any repository.</p>
<p>
The browser employs a Microsoft Windows® Explorer–style interface with a tree view of data on the left and a detailed list view on the right. A toolbar provides access to browser functions.</p>
<p>
<img src="repoov03.gif" border=0></p>
<p class=label>
<b>Figure 3. The Microsoft Repository Browser</b></p>
<p>
Relationships themselves are not visible in the browser, but are implied by the tree lines connecting the objects. The <b>Relationship</b> dialog box is used to view the relationship between the selected object and the source of its relationship. In addition, relationships can have properties, which can be viewed in the <b>Properties</b> tab of the <b>Relationship</b> dialog box. You can quickly navigate to the source object of a relationship by clicking the icon or text in the <b>Source</b> dialog box on the <b>Relationship</b> dialog box, or by pressing the <b>Up to Relationship Source</b> button on the toolbar.</p>
<p>
<img src="repoov04.gif" border=0></p>
<p class=label>
<b>Figure 4. The Relationship dialog box</b></p>
<p>
The browser provides ways to filter the data visually and by the type of information that is shown. A filter dialog box (on the <b>View</b> menu, click <b>Filters</b>) facilitates the setting of the filters. Try changing the settings to see how the browser display is affected. Figure 5 shows the <b>Type</b> tab, which filters the type of data that is shown.</p>
<h2>Visual Component Manager</h2>
<p>
The Visual Component Manager is an add-in available to registered owners of the Professional or Enterprise versions of Visual Basic and can be downloaded from the Microsoft Visual Studio 97 Web site (<a href="http://www.microsoft.com/vstudio/owner/default.asp">http://www.microsoft.com/vstudio/owner/default.asp</a>). It is a replacement for the Component Manager provided in Microsoft Visual Basicversion 4.0, but is better suited to enterprise-wide application development because it is based on the open and scalable repository. It facilitates code reuse and productivity through categorization, publishing, and retrieval of reusable components.</p>
<p>
<img src="repoov05.gif" border=0></p>
<p class=label>
<b>Figure 5. Visual Component Manager</b></p>
<p>
From within the Visual Component Manager, a programmer can find and insert pieces of code, load a project template, launch a wizard, or add an ActiveX™ control to a project. It can also provide a common and centralized location for documentation such as programming standards, functional specifications, or architectural diagrams.</p>
<h2>Enumerating Repository Objects</h2>
<p>
It is fairly easy to enumerate repository objects using the Automation interfaces. It is possible to find all objects in the repository that have interfaces to the root object by following the repeating pattern: objects have interfaces, which have collections of relationships, which target other objects, which have interfaces, and so on.</p>
<p>
The following code segments add repository objects as nodes to a TreeView control. These code segments are extracted from the RepositoryTools sample that accompanies this article. This code performs basically the same functions as used by the repository browser, although it has been simplified for the sake of size by removing error checking and other code related to interface enhancement. To use it, open the sample Visual Basic 5.0 repository project. You will see in the code that executing this function requires nothing more than calling the <b>EnumRepository</b> function from a form and passing in a TreeView control as the argument.</p>
<pre><code>'&lt;Private&gt;--------------------------------------------
Private BeenHere&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; As Boolean
Private KeyCounter&nbsp;&nbsp;&nbsp;&nbsp; As Integer
Private ThisTree&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; As TreeView
Private WorkingNode&nbsp;&nbsp;&nbsp;&nbsp; As Node
Private RepositoryRoot&nbsp;&nbsp; As RepositoryObject
Private ThisRepository&nbsp;&nbsp; As Repository
'&lt;/Private&gt;-------------------------------------------
'-----------------------------------------------------
'&lt;Purpose&gt; Opens the repository and start its enumeration.
'-----------------------------------------------------
Public Sub EnumRepository(ThisTreeControl As TreeView)
  '---- Cache the tree control.
  Set ThisTree = ThisTreeControl
  
  '------------------------------------------------
  ' Initialize repository object definition variables.
  ' This function can be found in 'RepEng.bas' which
  ' ships with the repository.
  '------------------------------------------------
  Call InitRepository
  
  '------------------------------------------------
  ' Open the repository; when no arguments are included
  ' in the Open method, the default repository is opened.
  '------------------------------------------------
  Set RepositoryRoot = ThisRepository.Open()
  
  '---- Add a node that represents the repository root.
  Set WorkingNode = ThisTree.Nodes.Add(, , "Root", "Repository Root", 2)
  
  '------------------------------------------------
  ' Enumerate the root interfaces. This will start
  ' a chain of enumerations of the entire repository:
  ' Interfaces --&gt; enumerates object members
  ' Members --&gt; enumerates relationships
  ' Relationships --&gt; enumerates interfaces
  '------------------------------------------------
  Call EnumInterfaces(RepositoryRoot, "Root")
  
End Sub
'-----------------------------------------------------------------
'&lt;Purpose&gt; Enumerates all the interfaces to the RepNodes collection.
'-----------------------------------------------------------------
Private Sub EnumInterfaces(ThisObject As RepositoryObject, ParentKey As String)
  Dim ObjectType&nbsp;&nbsp;&nbsp;&nbsp; As ClassDef
  Dim ObjectInterface&nbsp;&nbsp; As Object
  Dim TheseInterfaces&nbsp;&nbsp; As Object
  Dim InstanceInterface&nbsp; As RepositoryObject
  Dim TheseMembers&nbsp;&nbsp;&nbsp; As Object
  Dim NodeKey&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; As String
  
  '---- Get the definitions of the implemented interface.
  Set ObjectType = ThisRepository.object(ThisObject.Type)
  Set TheseInterfaces = ObjectType.Interfaces
  
  For Each InstanceInterface In TheseInterfaces
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp; '---- Create a new key.
 &nbsp;&nbsp; KeyCounter = KeyCounter + 1
 &nbsp;&nbsp; NodeKey = "I" &amp; KeyCounter
 &nbsp;&nbsp; 
 &nbsp;&nbsp; '---- Add the node to the TreeView.
 &nbsp;&nbsp; Set WorkingNode = ThisTree.Nodes.Add(ParentKey, tvwChild, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NodeKey, InstanceInterface.Name, 4)
 &nbsp;&nbsp; 
 &nbsp;&nbsp; '---- This example only loops once.
 &nbsp;&nbsp; If (Not BeenHere) Then
 &nbsp;&nbsp;&nbsp;&nbsp; '---- get the interface object
 &nbsp;&nbsp;&nbsp;&nbsp; Set ObjectInterface = ThisObject(InstanceInterface.Name)
 &nbsp;&nbsp;&nbsp;&nbsp; '---- Enumerate all of the members of the interface.
 &nbsp;&nbsp;&nbsp;&nbsp; Set TheseMembers = InstanceInterface("IInterfaceDef").Members
 &nbsp;&nbsp;&nbsp;&nbsp; Call EnumMembers(TheseMembers, ObjectInterface, NodeKey)
 &nbsp;&nbsp; End If
  Next
  
  BeenHere = True
  
End Sub
Private Sub Class_Initialize()
  Set ThisRepository = New Repository
End Sub
Private Sub Class_Terminate()
  Set ThisRepository = Nothing
End Sub
'--------------------------------------------------------------------
'&lt;Purpose&gt; Enumerates all the members and adds object members to the RepNodes collection.
'&lt;Note&gt; A member is a collection, property, or method on an inteface.
'--------------------------------------------------------------------
Private Sub EnumMembers(TheseMembers As Object, ObjectInterface As Object, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ParentKey As String)
  Dim IsOrigin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; As Boolean
  Dim NodeKey&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; As String
  Dim InstanceMember&nbsp;&nbsp; As RepositoryObject
  Dim TheseRelationships As Object
  
  '---- Enumerate the relationship collections on the interface.
  For Each InstanceMember In TheseMembers
 &nbsp;&nbsp; 
 &nbsp;&nbsp; '---- Check if the ThisMember is a property def or collection def.
 &nbsp;&nbsp; If (Not IsPropertyDef(InstanceMember.Type)) Then
 &nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp; '---- Create a new key.
 &nbsp;&nbsp;&nbsp;&nbsp; KeyCounter = KeyCounter + 1
 &nbsp;&nbsp;&nbsp;&nbsp; NodeKey = "M" &amp; KeyCounter
 &nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp; '---- Add the node to the TreeView.
 &nbsp;&nbsp;&nbsp;&nbsp; Set WorkingNode = ThisTree.Nodes.Add(ParentKey, tvwChild, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NodeKey, InstanceMember.Name, 4)
 &nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp; '---- Test to see if it is an origin.
 &nbsp;&nbsp;&nbsp;&nbsp; IsOrigin = (InstanceMember("ICollectionDef").IsOrigin &lt;&gt; 0)
 &nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp; '---- Don't show relationships back to origin.
 &nbsp;&nbsp;&nbsp;&nbsp; If IsOrigin Then
  '---- Create the relationships collection, and enumerate it.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set TheseRelationships = _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ObjectInterface.Properties(InstanceMember.Name).Value&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Call EnumRelationships(TheseRelationships, NodeKey)
 &nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp; 
 &nbsp;&nbsp; 
 &nbsp;&nbsp; End If
  Next
  
End Sub
'-----------------------------------------------------------------
'&lt;Purpose&gt; Enumerates all the objects attached to the
' relationships into the RepNodes collection.
'-----------------------------------------------------------------
Private Sub EnumRelationships(TheseRelationships As IRelationshipCol, _
ParentKey As String)
  Dim NodeKey&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; As String
  Dim InstanceRelationship&nbsp; As Relationship
  Dim TargetObject&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; As RepositoryObject
  
  '---- Enumerate the relationships in this collection for the object.
  For Each InstanceRelationship In TheseRelationships
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp; '---- cache the target object, this is what will be displayed
 &nbsp;&nbsp; Set TargetObject = InstanceRelationship.Target
 &nbsp;&nbsp; 
 &nbsp;&nbsp; '---- add properties here
 &nbsp;&nbsp; If (Not IsPropertyDef(InstanceRelationship.Type)) Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp; '---- Create a new key.
 &nbsp;&nbsp;&nbsp;&nbsp; KeyCounter = KeyCounter + 1
 &nbsp;&nbsp;&nbsp;&nbsp; NodeKey = "R" &amp; KeyCounter
 &nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp; '---- Add the node to the TreeView.
 &nbsp;&nbsp;&nbsp;&nbsp; Set WorkingNode = ThisTree.Nodes.Add(ParentKey, tvwChild, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NodeKey, TargetObject.Name, 4)
 &nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp; '----------------------------------------------
 &nbsp;&nbsp;&nbsp;&nbsp; ' Now enumerate the interfaces on the target of
 &nbsp;&nbsp;&nbsp;&nbsp; ' this relationship, starting the loop again.
 &nbsp;&nbsp;&nbsp;&nbsp; '----------------------------------------------
 &nbsp;&nbsp;&nbsp;&nbsp; Call EnumInterfaces(TargetObject, NodeKey)
 &nbsp;&nbsp; End If
  Next
  
End Sub
</code></pre>
<p>
Within the various loops, objects are created and a representation of the object is displayed. For any given object there are various methods available that provide functions to delete or create an object, or to get and set property values.</p>
<p>
For further reading and examples, there are additional documentation and code examples installed with the repository.</p>
<h2>Conclusion</h2>
<p>
The Microsoft Repository is in its early stages of development, and thus its full strategic implications are yet to be discovered. It is a fascinating technology that has the potential to enhance the value of many software tools—for example, by solving the problems of dependency tracking and software reuse. Dependency tracking is a problem that will get even more daunting as the use of distributed, component-based computing expands. Regarding reuse, it can provide a central place for components, systems, and processes to exist. This common library may provide the platform to finally realize the reusability potentials that everyone has heard of, but few have been able to offer. Although its full potential is yet to be discovered, the repository, the associated tools such as the Visual Component Manager, and the object modeling tools such as Visual Modeler provide a substantial boost in productivity and manageability today.</p>
</BODY>
</HTML>

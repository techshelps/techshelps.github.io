<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Extending the Visual FoxPro 5.0 Wizards</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_vfp3wiz"></a>Extending the Visual FoxPro 5.0 Wizards</h1>
<p>
Randy Brown<br>
Microsoft Corporation</p>
<p>
September 1996</p>
<h2>Introduction</h2>
<p>
Microsoft® Visual FoxPro™ version 5.0 offers an open architecture for extending wizards and builders beyond their current functionality. This technical article provides details regarding the new open architecture. And while the source code for the wizards remains proprietary, developers can write custom styles to extend the options of several of the wizards. In addition, developers can create their own wizards and builders to add to or replace the existing ones. We will touch on all of these topics in the following pages.</p>
<h2>About the Wizards and Builders</h2>
<p>
Wizards are not new to Visual FoxPro. They made their debut in the FoxPro® version 2.6 product line. As with the FoxPro 2.6 Wizards, the Visual FoxPro Wizards create new application components such as forms, reports, labels, queries, charts, and so on. In addition to offering a number of new wizards, Visual FoxPro now includes an open architecture for several of the more commonly used wizards. As a result, developers can now create custom styles for the Form and Report Wizards.</p>
<p>
To identify the wizards provided with Visual FoxPro, select the Wizards/All menu option from the Tools menu. A dialog box lists all available wizards that ship with Visual FoxPro. You won't find much documentation about using the wizards because wizards by nature are meant to be self-explanatory. They provide assistance with common tasks developers perform when creating database applications.</p>
<p>
Users new to Visual FoxPro often confuse wizards and builders. Probably the easiest way to discern the difference is to try both of them out. With Visual FoxPro 5.0, builders for the most part are confined to interacting with forms and form controls. Builders work directly with the Form Designer while a form is in design mode and can be used to create new controls or adjust the appearance or behavior of existing controls. Wizards, on the other hand, do not work in design mode and cannot be used to modify an existing file. The Visual FoxPro Help file offers these definitions:</p>
<p class=dt>
Wizards</p>
<p class=indent>
Wizards are interactive programs that help you quickly accomplish common tasks, such as creating forms, formatting reports, and setting up queries. By answering questions or choosing options on the series of wizard screens, you are telling the wizard to build a file or perform a task based on your responses.</p>
<p class=dt>
Builders</p>
<p class=indent>
Builders are tabbed dialog boxes that simplify creating and modifying forms and complex controls. Each builder displays a series of tabs so you can set the properties of the selected object. There are builders for some controls, for forms, for formatting controls, and for creating referential integrity between database tables. </p>
<p>
Visual FoxPro leverages a common engine for both the Form Wizard and Form Builder. This means that you can create a single custom style for use with both tools.</p>
<p>
That's about all you need to know to get started. Tables 1 and 2 list the wizards and builders, respectively, that are included with Visual FoxPro 5.0.</p>
<p class=label>
<b>Table 1. Wizards Included with Visual FoxPro 5.0</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=26%><b>Wizard</b></td>
<td class=label width=74%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=26%>Form</td>
<td width=74%>Creates a form based on a single table</td>
</tr>
<tr valign=top>
<td width=26%>One-to-Many Form</td>
<td width=74%>Creates a One-to-Many form with a grid control for child table </td>
</tr>
<tr valign=top>
<td width=26%>Report</td>
<td width=74%>Creates a report based on a single table</td>
</tr>
<tr valign=top>
<td width=26%>Group / Total Report</td>
<td width=74%>Creates a report with groupings and totals</td>
</tr>
<tr valign=top>
<td width=26%>One-to-Many Report</td>
<td width=74%>Creates a One-to-Many report </td>
</tr>
<tr valign=top>
<td width=26%>Label</td>
<td width=74%>Creates a mailing label report based on predefined styles</td>
</tr>
<tr valign=top>
<td width=26%>Import</td>
<td width=74%>Imports a foreign file format to a Visual FoxPro table</td>
</tr>
<tr valign=top>
<td width=26%>Documenting</td>
<td width=74%>Documents and formats Visual FoxPro source files</td>
</tr>
<tr valign=top>
<td width=26%>Table</td>
<td width=74%>Creates a new table</td>
</tr>
<tr valign=top>
<td width=26%>Local View</td>
<td width=74%>Creates a view using local data</td>
</tr>
<tr valign=top>
<td width=26%>Remote View</td>
<td width=74%>Creates a view using remote data</td>
</tr>
<tr valign=top>
<td width=26%>Query</td>
<td width=74%>Creates a standard query</td>
</tr>
<tr valign=top>
<td width=26%>Graph</td>
<td width=74%>Creates a new graph using Microsoft Graph</td>
</tr>
<tr valign=top>
<td width=26%>Cross Tab</td>
<td width=74%>Creates a new cross tab table based on existing data</td>
</tr>
<tr valign=top>
<td width=26%>Pivot Table</td>
<td width=74%>Creates a Microsoft Excel PivotTable based on Visual FoxPro data</td>
</tr>
<tr valign=top>
<td width=26%>Mail Merge</td>
<td width=74%>Creates a Microsoft Word Mail Merge document based on Visual FoxPro data</td>
</tr>
<tr valign=top>
<td width=26%>Upsizing</td>
<td width=74%>Moves Visual FoxPro data files to Microsoft SQL Server/Oracle files</td>
</tr>
<tr valign=top>
<td width=26%>Application</td>
<td width=74%>Creates a predefined application or framework</td>
</tr>
<tr valign=top>
<td width=26%>Setup</td>
<td width=74%>Creates installation program for distribution of custom apps</td>
</tr>
</table><br>
<p class=label>
<b>Table 2. Builders Included with Visual FoxPro 5.0.</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=27%><b>Builder</b></td>
<td class=label width=73%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=27%>AutoFormat</td>
<td width=73%>Formats a group of controls</td>
</tr>
<tr valign=top>
<td width=27%>Combo Box</td>
<td width=73%>Builds a combo box</td>
</tr>
<tr valign=top>
<td width=27%>Command Group</td>
<td width=73%>Builds a command group of buttons</td>
</tr>
<tr valign=top>
<td width=27%>Edit Box</td>
<td width=73%>Builds an edit box</td>
</tr>
<tr valign=top>
<td width=27%>Form</td>
<td width=73%>Builds a form</td>
</tr>
<tr valign=top>
<td width=27%>Grid</td>
<td width=73%>Builds a grid</td>
</tr>
<tr valign=top>
<td width=27%>List Box</td>
<td width=73%>Builds a list box</td>
</tr>
<tr valign=top>
<td width=27%>Option Group</td>
<td width=73%>Builds an option group of buttons</td>
</tr>
<tr valign=top>
<td width=27%>Referential Integrity</td>
<td width=73%>Creates referential integrity between database tables</td>
</tr>
<tr valign=top>
<td width=27%>Text Box</td>
<td width=73%>Builds a text box</td>
</tr>
</table><br>
<p>
The remainder of this document focuses on extending the Visual FoxPro Wizards and Builders. We will discuss how you can create you own wizards and builders and register them in Wizard.dbf or Builder.dbf so that they work seamlessly with Visual FoxPro. You can even override the main wizard or builder engines if you have special needs that cannot be satisfied by the existing engines. And finally, we'll cover specifics in creating custom styles for Form and Report Wizards.</p>
<h2>The Registration Table</h2>
<p>
The wizard registration table (Wizard.dbf) is installed in your Visual FoxPro \Wizards directory. The wizard registration table contains the information needed to run each wizard. If you do not like the way the shipping wizards function, you can change the values in this table to suit your needs. For example, you can substitute your own Report Wizard by overwriting its corresponding Program field entry or you can add a new Wizard record to the table. The registration table structure is as follows:</p>
<p class=label>
<b>Table 3. The Wizard Registration Table Structure</b></p>
<table border=1 cellpadding=5 cols=4 frame=below rules=rows>
<tr valign=top>
<td class=label width=16%><b>Field Name</b></td>
<td class=label width=16%><b>Data Type</b></td>
<td class=label width=12%><b>Width</b></td>
<td class=label width=56%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=16%>Name</td>
<td width=16%>Char</td>
<td width=12%>45</td>
<td width=56%>The name of the wizard as it appears in the Wizard selection dialog box</td>
</tr>
<tr valign=top>
<td width=16%>Descript</td>
<td width=16%>Memo</td>
<td width=12%>4</td>
<td width=56%>The description of the wizard as it appears in the Wizard selection dialog box</td>
</tr>
<tr valign=top>
<td width=16%>Bitmap</td>
<td width=16%>Memo</td>
<td width=12%>4</td>
<td width=56%>The name of the bitmap with qualified path that appears in the Wizard selection dialog box</td>
</tr>
<tr valign=top>
<td width=16%>Type</td>
<td width=16%>Char</td>
<td width=12%>20</td>
<td width=56%>Type of wizard to be called; allows only wizards of specific type to appear in Wizard selection dialog box</td>
</tr>
<tr valign=top>
<td width=16%>Program</td>
<td width=16%>Memo</td>
<td width=12%>4</td>
<td width=56%>The .APP file called to invoke a specific wizard</td>
</tr>
<tr valign=top>
<td width=16%>Classlib</td>
<td width=16%>Memo</td>
<td width=12%>4</td>
<td width=56%>The .VCX file containing the wizard if not an .APP file provided in the Program field</td>
</tr>
<tr valign=top>
<td width=16%>Classname</td>
<td width=16%>Memo</td>
<td width=12%>4</td>
<td width=56%>The class name of the wizard if not an .APP file provided in the Program field</td>
</tr>
<tr valign=top>
<td width=16%>Parms</td>
<td width=16%>Memo</td>
<td width=12%>4</td>
<td width=56%>Parameter(s) passed to the wizard .APP file if needed</td>
</tr>
</table><br>
<p>
The following example shows the registration table contents for the One-to-Many Form Wizard:</p>
<p>
<b>Name:</b> One-to-Many Form Wizard</p>
<p>
<b>Descript:</b> Creates a data entry form for two related tables.</p>
<p>
<b>Bitmap:</b> &lt; empty - optional &gt;</p>
<p>
<b>Type:</b> FORM (Note: both Form and One-to-Many Form Wizards have this type.)</p>
<p>
<b>Program:</b> Wzform.app</p>
<p>
<b>Classlib:</b> &lt; empty - optional &gt;</p>
<p>
<b>Classname:</b> &lt; empty - optional &gt;</p>
<p>
<b>Parms:</b> <i>1MANY </i>(Note: since both Form and One-to-Many Form Wizards use the same Wzform.app file, this parameter is necessary.)</p>
<p>
You should note that the main wizard engine, Wizard.app, contains a base copy of the registration table, so it can be restored if you accidentally delete it. The restored file, however, will not contain any modifications you may have made to your original Wizard.dbf. Therefore, it is a good idea to maintain a backup copy of your registration table if you intend to extend the wizard architecture to include your own wizards.</p>
<h2>Programmatically Calling Wizards</h2>
<h3>_WIZARD (Wizard.app)</h3>
<p>
Visual FoxPro has a new global system variable called _WIZARD. Like other system variables (for example _GENSCRN and _GENMENU), _WIZARD contains a fully qualified path reference to the main wizard program, Wizard.app, by default. This wizard program is responsible for reading the registration table (Wizard.dbf) and calling the selected wizard.</p>
<p>
The Wizard.app file is the main wizard engine director. Some environment saving and restoring is provided, but the core functionality of the application is calling the specified wizard. Visual FoxPro has a number of hooks built into the product (for instance in the New File dialog box) that trigger a call to the program stored in _WIZARD. You probably won't need to write your own Wizard.app to replace the one provided by Microsoft. To provide custom wizard functionality, rewrite specific wizard applications (for example, Wzform.app) and modify the wizard registration table to run them through the Wizard.app file.</p>
<h3>DO Wizard.app</h3>
<p>
Each of the wizards can be called programmatically using the following call:</p>
<pre><code>DO (_WIZARD) [WITH [cParm1] [,cParm2] […,cParm9]]
</code></pre>
<p>
Visual FoxPro internally makes a similar call when it invokes a specific wizard. For example, you can select the New File dialog box, pick the Form option, and click on the Wizard button. Visual FoxPro will internally make the following call:</p>
<pre><code>DO (_WIZARD) WITH 'FORM'
</code></pre>
<p>
Because Wizard.app looks up all wizard types that match the parameter passed, you can easily override the existing Form Wizard and replace it with one of your own. You can see which keywords are used in the Type field of Wizard.dbf and which optional parameters can be passed (Parms field). If you design your own wizards, you can pass a number of additional parameters, such as preferences.</p>
<h4>Parameters passed to _WIZARD by Visual FoxPro:</h4>
<p>
<b>cParm1:</b> Wizard type. This parameter controls which wizards Wizard.app displays in its selection dialog box. For example, if you pass 'FORM', you will see two wizards appearing in the selection dialog box: Form Wizard and One-to-Many Form Wizard.</p>
<p>
<b>cParm2:</b> Wizard name. If you want to call a specific wizard, you can pass its name here. For example, if you pass 'WZIMPORT', the Import Wizard will appear. Wizard.app first checks the Program field in Wizard.dbf for a match of this parameter. If none is found, the Classname field is searched for a possible class instead.</p>
<p>
<b>uParm3 to uParm9: </b>The _WIZARD file accepts additional parameters that simply get passed through to the wizard being called. Parameter3 is special in that it can be used to lookup against the Parms field in Wizard.dbf in case there is a conflict with the same wizard name. For example, some wizard .APP files (for example, Wzform.app) are used by several wizards. This third parameter allows you to specify a particular one. For example:</p>
<pre><code>DO (_WIZARD) WITH "","WZFORM","1MANY"
DO (_WIZARD) WITH "AUTOFORM"
</code></pre>
<p>
The following rules apply for passing parameters to Wizard.app:
<ul type=disc>
<li>
If you pass no parameters, the standard Wizard Selection dialog box (Figure 1) is presented to let the user select a particular wizard. The description appearing at the bottom of this dialog box is obtained from the Descript field of Wizard.dbf.<p>
<img src="vfp3wiz_1.gif" border=0></P><p class=label>
<b>Figure 1. The standard Wizard Selection dialog box</b>
</li>
<li>
You can filter the contents of the Wizard Selection dialog box by passing a particular Wizard Type in the first parameter. The dialog box in Figure 2 appears if you type <pre><code>DO (_WIZARD) WITH 'query'. 
</code></pre>
<p class=tl>
If there is only one record that matches the Wizard Type mask, that wizard is launched without displaying the Wizard Selection dialog box. If no wizard is found matching the filter an alert appears indicating this fact.</P><p>
<img src="vfp3wiz_2.gif" border=0></P><p class=label>
<b>Figure 2. A filtered Wizard Selection dialog box (first parameter)</b>
</li>
<li>
The second parameter provides a way to filter based on the specific wizard application file stored in the Program field in the registration table. If you pass a second parameter, it is important to know that the first parameter is ignored. Once again, if Wizard.dbf contains multiple entries for the file name, the dialog box is presented, otherwise the wizard is launched. The dialog box in Figure 3 is displayed when you issue the following command:<pre><code>DO (_WIZARD) WITH "","wzpivot"
</code></pre>
<p>
<img src="vfp3wiz_3.gif" border=0></P></li>
</ul>
<p class=label>
<b>Figure 3. Another filtered Wizard Selection dialog box (second parameter)</b>
<ul type=disc>
<li>
Because Wizard.app passes nine parameters to a particular wizard, it is important that you design your custom wizards to handle these parameters. Even though you probably won't need all nine parameters, be sure to include placeholders for them in your PARAMETERS statement. This also applies to the Classname and Classlib fields, which offer an alternate way of invoking a wizard. If you choose this method for calling your wizard, make sure to place the nine parameters in the Init event of the class stored in the Classname field.<p class=tl>
<b>Note:</b> You cannot programmatically call a wizard that uses the Classname field (as opposed to the Program field); however, a user can select it through the Wizard Selection dialog box.</P></li>
<li>
The third parameter that is passed to Wizard.app corresponds to the Parms field in the registration table. This parameter is used in conjunction with the second one to further distinguish which wizard within the single .APP file to launch. The dialog box in Figure 3 shows the two wizards stored in Wzpivot.app. If you wanted to launch one of these directly, you could make one of the following calls:<pre><code>DO (_WIZARD) WITH "","wzpivot","pivot"    &amp;&amp; calls Pivot Wizard
DO (_WIZARD) WITH "","wzpivot","xtab"    &amp;&amp; calls Cross Tab Wizard
</code></pre>
</li>
<li>
If you take a look at the Wizard.dbf table, you will see several records that represent unique methods for invoking a wizard. Both the Form and Report Wizards allow you to create a form or a report on the fly without displaying the wizard screens. These two are represented as buttons on the Standard toolbar and they only work if you have a table open.<pre><code>DO (_WIZARD) WITH "AUTOFORM"
DO (_WIZARD) WITH "AUTOREPORT"
</code></pre>
</li>
<li>
The Cross-Tab Wizard makes use of a new and improved _GENXTAB. The old Genxtab.prg program that shipped with FoxPro 2.<i>x</i> has been rewritten to take advantage of the Visual FoxPro object model and is now stored in Vfpxtab.prg. In addition, several new enhancements have been added to allow various types of summary options. Since the Cross Tab Wizard calls _GENXTAB, you can subclass VFPXTAB or provide an alternative if you choose.<br><br></li>
<li>
The Graph Wizard, formally known as Gengraph.app in FoxPro 2.<i>x</i>, has also undergone a major transformation. The contents of the _GENGRAPH global now point to Wzgraph.app. Since the Graph Wizard can be called directly by the Wizard menu or via the Query/View Designer output destination, several methods exist for calling it. Since the user has already selected the table(s) and fields, there is no need to start on the first screen. In addition, it doesn't make sense to create another query from within a query. In essence, you could go into an endless loop. The first two code examples below show how you can invoke the Graph Wizard as if it were being called as a wizard outside of the Query Designer. The final example, which we will touch on later, illustrates how to programmatically use the Graph Wizard to automate the creation of a specific chart with control over certain preferences such as chart type and title.<pre><code>DO (_WIZARD) WITH "","WZGRAPH"
DO (_GENGRAPH) WITH "WIZARD"
DO (_GENGRAPH)
DO (_GENGRAPH) WITH "AUTOGRAPH",p2,p3,p4,p5,p6,p7,p8,p9
</code></pre>
</li>
<li>
As seen above with the Graph Wizard, you can call wizards directly without going through the Wizard.app engine. Unless you have a specific reason to do so (as with the Graph Wizard), you should go through the recommended Wizard.app channel. This is primarily because the Wizard.app knows where to look for particular wizards, even if you decide to move your files (including Vfp.exe) around.</li>
</ul>
<h4>Parameters passed from _WIZARD to the individual wizard programs or classes</h4>
<p>
<b>cParm1:</b> Reference to output file name variable. This is a memory variable that gets passed back to Visual FoxPro when the wizard is finished. It contains the name of the wizard-generated file. Since Visual FoxPro hooks directly into the wizards through the Project Manager, this option allows you to create a new file (for example Form) via the wizard and have it automatically registered in the Project Manager.</p>
<p>
<b>cParm2:</b> The contents of the Parms field in the wizard registration table.</p>
<p>
<b>uParm3 to uParm9:</b> Extra parameters passed to _WIZARD. They are optional parameters that are not used by the standard shipping wizards, but can be used by your custom wizards.</p>
<p>
The following rules apply for passing parameters from Wizard.app:
<ul type=disc>
<li>
If you are writing custom wizards, you must make sure that you provide a PARAMETER statement with nine parameters to handle the call made by Wizard.app.<br><br></li>
<li>
The first parameter is a special hook if you want to have the output from your wizard added directly to the project. This option will only work if the wizard is invoked from the Wizard button on a New Form dialog box (Figure 4). A follow-up action (such as modifying the file) can also be applied from within your custom wizard. The sample code that follows exhibits this.<p>
<img src="vfp3wiz_4.gif" border=0></P><p class=label>
<b>Figure 4. New Form dialog box</b>
<pre><code>* Sample main program for custom wizard showing Project interfacing.
PARAMETER cVarName, p2, p3, p4, p5, p6, p7, p8, p9

** add wizard code here ***

* set the wizard generated file here
cNewWizFile = 'offices.scx'&nbsp;&nbsp; &amp;&amp;example

DO CASE
CASE m.lmodifyform
 &nbsp;&nbsp;&nbsp;&nbsp; * add to project and modify output file
 &nbsp;&nbsp;&nbsp;&nbsp; &amp;cVarName = '2' + m.cNewWizFile 
CASE m.lrunform
 &nbsp;&nbsp;&nbsp;&nbsp; * add to project and run output file
 &nbsp;&nbsp;&nbsp;&nbsp; &amp;cVarName = '3' + m.cNewWizFile&nbsp; 
OTHERWISE
 &nbsp;&nbsp;&nbsp;&nbsp; * add to project
 &nbsp;&nbsp;&nbsp;&nbsp; &amp;cVarName = '1' + m.cNewWizFile 
ENDCASE
* EOF
</code></pre>
</li>
<li>
Because of the open architecture, you can also obtain output information by passing a variable reference to the wizard directly.<pre><code>** Sample code returning Wizard output information ***
cOutPutContents = ''
cParm1= 'cOutPutContents'
DO WIZARDS\WZFORM WITH m.cParm1
? m.cOutPutContents

C:\OFFICES.SCX
</code></pre>
</li>
</ul>
<h2>Extending the Wizards</h2>
<p>
At this point, we'll jump into extending the functionality of some of the wizards. The native Visual FoxPro Wizard architecture is open in the sense that you can add custom styles to both Form and Report Wizards. You can either overwrite or add to the existing visual styles in the Form Wizard (for example, Standard, Chiseled, Shadowed, Boxed, Embossed, and Fancy) and button code styles (for example, Text Buttons, Picture Buttons, and No Buttons). The same holds true with the visual styles associated with the Report Wizard (for example, Presentation, Executive, and Ledger). In the case of Forms, the wizards use and read properties directly from an object instantiated from a style class that is based on a form. With Reports, styles are defined by report templates (.FRX files). The actual wizards, which house the interface templates and process engines, are proprietary and can't be modified.</p>
<h3>Form Wizards</h3>
<p>
The extent to which one can alter the functionality of the Form Wizards through custom styles is indeed quite vast. As mentioned above, the styles can be visual or code-based. Each of the styles is registered in the Form Wizard's style registration table (Frmstyle.dbf). Note that the Form Wizard has an internal version of this table that contains records for the five visual styles and three button styles that ship with Visual FoxPro 5.0. These styles are actually classes stored in the Wizstyle.vcx class library. You can alter any of these styles to your heart's content or add your own.</p>
<p>
The Form Wizard (Wzform.app) attempts to locate Frmstyle.dbf when it is launched, otherwise it uses its own internal styles table. Therefore, it is important that you ensure the Frmstyle.dbf table is accessible in the \Wizards directory or along the SET PATH setting. If you do decide to provide your own Frmstyle.dbf, the shipping styles will not automatically appear on the Wizard style page. In order to do so, you will need to include records for each of them. This allows you to overwrite one of the shipping styles.</p>
<h4>FRMSTYLE.DBF</h4>
<p>
This is the styles registration table that contains a listing of all the styles used by the Form Wizard. The default styles are all contained in Wizstyle.vcx, which is described below, but you can add your own styles and include them in separate visual class files. The fields in Table 4 are expected in Frmstyle.dbf.</p>
<p class=label>
<b>Table 4. Fields Expected in Frmstyle.dbf</b></p>
<table border=1 cellpadding=5 cols=4 frame=below rules=rows>
<tr valign=top>
<td class=label width=18%><b>Field Name</b></td>
<td class=label width=17%><b>Data Type</b></td>
<td class=label width=13%><b>Width</b></td>
<td class=label width=52%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=18%>Stylename</td>
<td width=17%>Character</td>
<td width=13%>20</td>
<td width=52%>Name of style class (must be Form)</td>
</tr>
<tr valign=top>
<td width=18%>Vcxfile</td>
<td width=17%>Memo</td>
<td width=13%></td>
<td width=52%>.VCX file name where style class exists</td>
</tr>
<tr valign=top>
<td width=18%>Styledesc</td>
<td width=17%>Character</td>
<td width=13%>30</td>
<td width=52%>Description for Wizard list box</td>
</tr>
<tr valign=top>
<td width=18%>Styletype</td>
<td width=17%>Character</td>
<td width=13%>1</td>
<td width=52%>Type of style</td>
</tr>
<tr valign=top>
<td width=18%>Wizard</td>
<td width=17%>Logical</td>
<td width=13%></td>
<td width=52%>Used by wizards</td>
</tr>
<tr valign=top>
<td width=18%>OneMany</td>
<td width=17%>Logical</td>
<td width=13%></td>
<td width=52%>Used by One-to-Many Wizard</td>
</tr>
<tr valign=top>
<td width=18%>Builder</td>
<td width=17%>Logical</td>
<td width=13%></td>
<td width=52%>Used by Builders</td>
</tr>
<tr valign=top>
<td width=18%>Bmpfile</td>
<td width=17%>Memo</td>
<td width=13%></td>
<td width=52%>.BMP file name for wizard visual style</td>
</tr>
<tr valign=top>
<td width=18%>Premethod</td>
<td width=17%>Character</td>
<td width=13%>20</td>
<td width=52%>Method to call before style create generation</td>
</tr>
<tr valign=top>
<td width=18%>Postmethod</td>
<td width=17%>Character</td>
<td width=13%>20</td>
<td width=52%>Method to call after style create generation</td>
</tr>
</table><br>
<p>
The following code creates this table and inserts the default Form Wizard records:</p>
<pre><code>CREATE TABLE frmstyle( ;
 &nbsp; Stylename&nbsp;&nbsp; C(20), ;
 &nbsp; Vcxfile&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; M, ;
 &nbsp; Styledesc&nbsp;&nbsp; C(30), ;
 &nbsp; Styletype&nbsp;&nbsp; C(1), ;
 &nbsp; Wizard&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; L, ;
 &nbsp; OneMany&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; L, ;
 &nbsp; Builder&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; L, ;
 &nbsp; Bmpfile&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; M, ;
 &nbsp; Premethod&nbsp;&nbsp; C(20), ;
 &nbsp; Postmethod&nbsp;&nbsp; C(20))
INSERT INTO frmstyle VALUES ;
 &nbsp; ('standardform','wizstyle.vcx','Standard', ;
 &nbsp;&nbsp;&nbsp;&nbsp; 'V',.T.,.T.,.T.,'standard.bmp','','')
INSERT INTO frmstyle VALUES ;
 &nbsp; ('chiselform','wizstyle.vcx','Chiseled', ;
 &nbsp;&nbsp;&nbsp;&nbsp; 'V',.T.,.T.,.T.,'chiseled.bmp','','')
INSERT INTO frmstyle VALUES ;
 &nbsp; ('shadowform','wizstyle.vcx','Shadowed', ;
 &nbsp;&nbsp;&nbsp;&nbsp; 'V',.T.,.T.,.T.,'shadowed.bmp','','')
INSERT INTO frmstyle VALUES ;
 &nbsp; ('boxform','wizstyle.vcx','Boxed', ;
 &nbsp;&nbsp;&nbsp;&nbsp; 'V',.T.,.T.,.T.,'boxed.bmp','','')
INSERT INTO frmstyle VALUES ;
 &nbsp; ('embossedform','wizstyle.vcx','Embossed', ;
 &nbsp;&nbsp;&nbsp;&nbsp; 'V',.T.,.T.,.T.,'embossed.bmp','','')
INSERT INTO frmstyle VALUES ;
 &nbsp; ('fancyform','wizstyle.vcx','Fancy', ;
 &nbsp;&nbsp;&nbsp;&nbsp; 'V',.T.,.T.,.T.,'fancy.bmp','','')
INSERT INTO frmstyle VALUES ;
 &nbsp; ('txtbtns','wizstyle.vcx','\&lt;Text Buttons', ;
 &nbsp;&nbsp;&nbsp;&nbsp; '1',.T.,.T.,.F.,'','','')
INSERT INTO frmstyle VALUES ;
 &nbsp; ('picbtns','wizstyle.vcx','\&lt;Picture Buttons', ;
 &nbsp;&nbsp;&nbsp;&nbsp; '2',.T.,.T.,.F.,'','addbmps','')
INSERT INTO frmstyle VALUES ;
 &nbsp; ('nobtns','wizstyle.vcx','N\&lt;o Buttons','3',.T.,.T.,.F.,'','','')
</code></pre>
<p>
The Styletype field describes the styles used by the Form Wizard. If you look at Step 2 of the Form Wizard, which is the Style page, you can see styles from Frmstyle.dbf in the Style list. The visual styles that appear in the list box all have a Styletype = 'V' for visual. The Form Wizard ships with three preset button styles (Text Buttons, Picture Buttons, and No Buttons). The Styletype value for each of these option buttons is '1', '2', or '3'. You can provide your own button-style references using a Styletype = 'B'. These appear in a drop-down list beside the Custom option button, which is only visible if you have additional button styles. If you look at a button class (for example, Txtbtns in Wizstyle.vcx), you can see that it is a container class of buttons. You may want to follow this approach if you create custom button styles.</p>
<p>
The two Premethod and Postmethod fields allow you to provide a program to be called by the Form Wizard's engine before and/or after creation of the form. You may have special processing needs for your custom style that can be handled by one of these fields. For example, the Picture Buttons style needs to check to see if the button graphic's .BMP files are properly installed; if not, they are copied out of Wzform.app.</p>
<p>
The Form Wizard automatically loads Wizstyle.vcx into the SET CLASSLIB setting. So if you want to add custom styles, you can easily add them to Wizstyle.vcx. However, if you decide to use your own .VCX, you need to specify that in the Vcxfile field. Make sure you include a path here if you are not sure whether the Form Wizard can locate it.</p>
<h4>WIZSTYLE.VCX</h4>
<p>
Wizstyle.vcx is the visual class library containing the various styles used by the Form Wizard. All of the preset visual and button styles are stored in this library. You can edit existing classes or add your own. If you plan to edit existing classes, it would be a good idea to create a backup copy of the library before making your changes. The Form Wizard engine provides extensive style validation; however, there are unlimited things one can do to a style that may cause problems for the Form Wizard. If you stay within the guidelines of style creation as described below and use the shipping styles as references, your custom styles should plug in and work just fine. In fact, you may want to simply subclass an existing style (for example, Embossedform) and work off of it.</p>
<h4>Custom visual styles</h4>
<p>
The Form Wizard's processor relies on custom styles for definition of the form attributes and field layout. To create a form style for wizard-generated forms:
<ol>
<li>
Create the form class by subclassing Baseform in Wizstyle.vcx.<br><br></li>
<li>
Add an object based on LayoutSty to the new class if the form doesn't already contain one.<br><br></li>
<li>
Specify control classes for displaying data in the forms created by the Form Wizard.<br><br></li>
<li>
Register the new style in Frmstyle.dbf.</li>
</ol>
<p>
Registering the new style has been discussed above. The other steps in the process are described in more detail below.</p>
<p>
<b>1. Create the form class</b></p>
<p>
Create your style form by subclassing Baseform or one of the other form styles (for example, Embossedform) in Wizstyle.vcx. You need to use Baseform, or a class derived from the Baseform class because it contains all of the custom properties that allow you to set an assortment of options for your style.</p>
<p>
The Form Wizard creates the form by instantiating the various style objects. Therefore, you need to be aware that any Init, Load, Activate, Deactivate, Destroy (and so on) code you place in one of these classes could potentially break the Form Wizard. Be careful how you handle this.</p>
<p>
Table 5 shows a list of custom properties contained in the Baseform. While these properties, which are not case-sensitive, will allow you to add more power to your style design, they are not guaranteed to ensure good form design. Form design is a subjective thing, so you should explore using these various properties on your styles to achieve the results you desire.</p>
<p class=label>
<b>Table 5. Custom Properties in the Baseform</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=22%><b>Property</b></td>
<td class=label width=78%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=22%>WizBtnLayout</td>
<td width=78%>Button position object (class) used for unique placement of buttons</td>
</tr>
<tr valign=top>
<td width=22%>WizBtnPos</td>
<td width=78%>Button position centering (0-none, 1-hori, 2-vert, 3-both). By default buttons are centered in footer. You can use these settings for better control over how buttons are placed, especially if buttons are laid out vertically</td>
</tr>
<tr valign=top>
<td width=22%>WizBuffering</td>
<td width=78%>Table buffering for opened tables</td>
</tr>
<tr valign=top>
<td width=22%>WizButtons</td>
<td width=78%>Name of button class</td>
</tr>
<tr valign=top>
<td width=22%>WizCaptions</td>
<td width=78%>Whether to use DBC English field captions</td>
</tr>
<tr valign=top>
<td width=22%>WizCboxLbl</td>
<td width=78%>Whether to use the check box as the label</td>
</tr>
<tr valign=top>
<td width=22%>WizCodeStyle</td>
<td width=78%>Whether to use code style or button style</td>
</tr>
<tr valign=top>
<td width=22%>WizField</td>
<td width=78%>Class reference for a field</td>
</tr>
<tr valign=top>
<td width=22%>WizFormStretch</td>
<td width=78%>Whether to shrink/expand form (height only) based on number of fields selected</td>
</tr>
<tr valign=top>
<td width=22%>WizGrid</td>
<td width=78%>Class reference for a grid (One-to-Many)</td>
</tr>
<tr valign=top>
<td width=22%>WizGridForm</td>
<td width=78%>Use a separate form for grid</td>
</tr>
<tr valign=top>
<td width=22%>WizLabel</td>
<td width=78%>Class reference for label object</td>
</tr>
<tr valign=top>
<td width=22%>WizLayout</td>
<td width=78%>Class reference for layout object</td>
</tr>
<tr valign=top>
<td width=22%>WizLblCap</td>
<td width=78%>Label capitalization (proper, upper, or lower)</td>
</tr>
<tr valign=top>
<td width=22%>WizLblDefWid</td>
<td width=78%>Whether to use constant label width for consistent look and alignment of fields on form</td>
</tr>
<tr valign=top>
<td width=22%>WizLblSpace</td>
<td width=78%>Space between label and field</td>
</tr>
<tr valign=top>
<td width=22%>WizLblSuffix</td>
<td width=78%>Suffix that can be added to each field label</td>
</tr>
<tr valign=top>
<td width=22%>WizLogic</td>
<td width=78%>Class reference for a logic field (optional, if not used default to Wizfield)</td>
</tr>
<tr valign=top>
<td width=22%>WizMaxCharFld</td>
<td width=78%>Maximum width of char type field before converting it to memo (edit box) style</td>
</tr>
<tr valign=top>
<td width=22%>WizMemo</td>
<td width=78%>Class reference for a Memo field</td>
</tr>
<tr valign=top>
<td width=22%>WizOLE</td>
<td width=78%>Class reference for a General field</td>
</tr>
<tr valign=top>
<td width=22%>WizPages</td>
<td width=78%>Allows use of pages for overflow of fields (0-none, 1-single column, 2-multicolumn)</td>
</tr>
<tr valign=top>
<td width=22%>WizPageStyle</td>
<td width=78%>Class reference for Pageframe style</td>
</tr>
<tr valign=top>
<td width=22%>WizTitle</td>
<td width=78%>Class reference for title (usually a label)</td>
</tr>
<tr valign=top>
<td width=22%>WizUser</td>
<td width=78%>For use by user</td>
</tr>
<tr valign=top>
<td width=22%>WizVerify</td>
<td width=78%>Whether to verify class objects (use for testing but can improve performance if turned off)</td>
</tr>
</table><br>
<p>
Most of these properties are self explanatory. I'll touch on a few of them below and explain how you can use them to enhance your styles.
<ul type=disc>
<li>
<b>WizVerify:</b> This setting is used for testing your style. It verifies that each class (for example, the one referenced by WizField) exists by instantiating each one. Once you have designed and tested your style so that it works fine, you can set this property to False (.F.).<br><br></li>
<li>
<b>WizFormStretch:</b> There are situations where you may not want your form to stretch vertically to accommodate more fields. This property allows you to turn this feature off. For example, you may have some vertical buttons in the right-hand margin that would require a certain minimum form height in order to display correctly.<br><br></li>
<li>
<b>WizCboxLbl:</b> If you are using the WizLogic class that contains a check box, you can choose to use the check box caption or that of the label object (for example, WizLabel). This property controls which object is used for displaying the field label.<br><br></li>
<li>
<b>WizLblDefWid:</b> This property allows you to control whether each label is sized the same fixed width or whether they are autosized. If you want your labels right-aligned, then set this option to .T. so the fields line up evenly.<br><br></li>
<li>
<b>WizBtnLayout:</b> By default, the Form Wizard attempts to center (both vertically and horizontally) the buttons in the footer. You can choose to have them placed elsewhere by including an object (such as a shape) on the form style and referencing it through this property. When the Form Wizard places the buttons, it will do so at the object position. Use this in conjunction with WizBtnPos.<br><br></li>
<li>
<b>WizButtons:</b> You can override the button style chosen by the user in the wizard by including a reference to a class containing buttons (or anything else). Use this in conjunction with WizBtnPos for positioning.<br><br></li>
<li>
<b>WizTitle:</b> An optional Title object can be added to a form style. The Title object is represented by a label class that is referenced in the WizTitle property. This object's caption will assume the text typed into the Form Wizard's Title text box on the Finish page.</li>
</ul>
<p>
<b>2. Add the Layout object to the form</b></p>
<p>
The second step in creating a custom form style for the Form Wizard is to add the Layout object (LayoutSty) to the form (Figure 6). The Layout object is a container of shapes that controls the horizontal/vertical spacing of objects (such as the fields) as they are laid out on the form. If you subclass one of the existing form styles, you can use and modify the LayoutSty object that has already been added. The WizLayout custom property of Baseform specifies the name of the layout class and is set by default to LayoutSty. Your form must have this property set to a valid layout class.</p>
<p>
<img src="vfpwiz.gif" border=0></p>
<p class=label>
<b>Figure 6. The Layout object</b></p>
<p>
The Layout object provides dimensional information for field layout. There are four shapes and corresponding custom properties in the LayoutSty container class. The properties are used to reference the shapes.</p>
<p class=label>
<b>Table 6. The Four Shapes in the LayoutSty Container Class</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=12%><b>Object</b></td>
<td class=label width=17%><b>Property</b></td>
<td class=label width=71%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=12%>Shape1</td>
<td width=17%>oDimensions</td>
<td width=71%>Represents the physical boundary on which fields can be laid out. Everything above it is considered the header and everything below is the footer. You can think of oDimensions as being similar to the Detail band on a report.</td>
</tr>
<tr valign=top>
<td width=12%>Shape2</td>
<td width=17%>oLabel1</td>
<td width=71%>The Left and Top properties of oLabel1 indicate the starting position for field layout</td>
</tr>
<tr valign=top>
<td width=12%>Shape3</td>
<td width=17%>oLabel2</td>
<td width=71%>The space between oLabel1 and oLabel2 indicates the vertical spacing between fields</td>
</tr>
<tr valign=top>
<td width=12%>Shape4</td>
<td width=17%>oCol2</td>
<td width=71%>The space between (oLabel1.Left + oLabel1.Width) and oCol2.Left indicates the column width if there are multiple columns of fields on the form. The Form Wizard attempts to layout fields vertically if it can fit all of the fields on the form, otherwise, it reverts to laying them out horizontally in columns based on the column width derived from this property.</td>
</tr>
</table><br>
<p>
The Form Wizard will adjust the size of the form up to the size of the Maximum Design area setting in your Options dialog box if the WizFormStretch property on the Baseform is set to True (.T.). Only the portion of the form covered by oDimensions is affected. The header and footer remain fixed in height. The Form Wizard only supports vertical stretching, whereas the Form Builder can stretch horizontally.</p>
<p>
<b>3. Specify control classes</b></p>
<p>
The third step in creating a custom form style for the Form Wizard is to create and register classes for displaying field data on the form (Figure 7). Associated with each form class style is a set of classes used for adding fields based on their data type. For example, a separate class containing an edit box is used for memo fields. Logical fields use check boxes and general fields use OleBoundControls.</p>
<p>
<img src="vfp3wiz_6.gif" border=0></p>
<p class=label>
<b>Figure 7. Creating classes for displaying field data on the form</b></p>
<p>
Once you have created your set of data classes, they need to be registered under the following custom properties on the Baseform-derived style: WizField, WizMemo, WizLogic, WizOLE, and WizLabel. Unlike the Layout object, which needs to be added to the form style, the data classes are only registered with the style.</p>
<p>
<img src="vfp3wiz_7.gif" border=0></p>
<p class=label>
<b>Figure 8. Registering data classes under custom properties</b></p>
<p>
You need to be aware of the following points when you are creating and registering your custom styles for the Form Wizard:
<ul type=disc>
<li>
A defined data type class must contain the proper control type, otherwise the Form Wizard will produce an error. WizField must have a text box. WizMemo must have an edit box. WizOLE must have an OleBoundControl. WizLabel must have a label. WizLogic must have a check box.<br><br></li>
<li>
The WizLogic property is optional. If there is no provided class reference, the Form Wizard defaults to using the WizField class.<br><br></li>
<li>
The data type class can either be a free control class or a composite container class. Free control classes (for example, Standard and Embossed) consist of a single control such as a text box or edit box. These classes can be subclassed without problems. When a field is placed, its field caption is based on the WizLabel class. For example, when the Form Wizard needs to add a memo field to an Embossed style form, it adds both a WizLabel and WizMemo object. The WizLabel class is only used for the free control class type. For examples of these, look at any of the Standard or Embossed classes (for example, StandardField and EmbossedMemo) in the WIZSTYLE class library.<p class=tl>
The other type of field class is the container type, which is used by the Shadow, Chiseled, and Boxed visual styles. These classes are all derived from containers so that you can place a number of other objects inside. Each container must have a label and a data control (for example, a Textbox). Since the label is stored in the container, the WizLabel object is ignored. The primary purpose for using a container class is so that you can add special effects such as drop shadows, boxes, borders, and so on.</P><p class=tl>
<b>Important:</b> You cannot mix the two types of field classes for a visual style. They must either be all free control classes or all container classes. The Form Wizard will generate an error if you try to mix the two.</P></li>
<li>
When data type objects are added to the form, they are sized based on the field width. The label is stretched based on the caption width. Memo fields and General fields are not stretched because their field widths are fixed.<br><br></li>
<li>
The WizShape class, which is stored in Wizstyle.vcx, should be used for adding special effects to a data type container class. This class has a custom property called WizEffect that is used to control how the special-effect object responds to the data-object stretching.</li>
</ul>
<p class=label>
<b>Table 7. WizEffect Values and Descriptions</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=44%><b>Value</b></td>
<td class=label width=56%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=44%>0</td>
<td width=56%>Stretch and move with field</td>
</tr>
<tr valign=top>
<td width=44%>1</td>
<td width=56%>Stretch with label/field</td>
</tr>
<tr valign=top>
<td width=44%>2</td>
<td width=56%>Stretch over all</td>
</tr>
</table><br>
<p class=tl>
The first option is commonly used for adding a special effect to just the data-bound control. The Shadow and Chiseled styles use this effect. The second special effect causes stretching for vertically-oriented objects, such as in the Boxed style. The last option could be used to place a border shape around both label and field.</P><ul type=disc>
<li>
The One-to-Many Form Wizard uses a Grid object for fields in the child table. This class reference is stored in WizGrid.</li>
</ul>
<h4>How the Form Wizard works</h4>
<p>
The Form Wizard engine uses the Visual FoxPro object technology to generate a form based on the visual and button styles selected by the user. The first step for the engine is to read and verify the style information. This means that the Form Wizard must instantiate the various style objects. For example, the LayoutSty object is instantiated to obtain the dimensional information. Once all of the settings and options are read in, a new Form object is created based on the visual form class. Field objects are then positioned onto the form based on the data type styles. Finally, the button class is added. If the user clicks the Preview button, the form is simply displayed. The form is only saved to an .SCX file if the Finish button is pressed. Then a Data Environment object is created with the selected data sources.</p>
<h4>Custom button styles</h4>
<p>
The Form Wizard also allows for the creation of custom button styles. Visual FoxPro ships with two styles, Text Buttons and Picture Buttons. The Text Button style is represented by the Txtbtns class contained in Wizstyle.vcx. Picbtns is simply a subclass of Txtbtns with pictures added.</p>
<p>
<img src="vfp3wiz_8.gif" border=0></p>
<p class=label>
<b>Figure 9. The Text Button custom button style</b></p>
<p>
You are free to overwrite and/or substitute your own button styles if the existing ones don't suit your particular needs. The section earlier in this article on the Frmstyle.dbf registration table gives instructions on how to register your button class properly so that it appears on the style page.</p>
<p>
The Form Wizard has a Preview button on the final page that allows you to preview the form. Because you are actually previewing a live form, all of the controls will function just as if you made a DO FORM call. You can add code to your button class to have the buttons function in a unique way when the Preview button is pressed.</p>
<p>
If you take a look at the Txtbtns class in Wizstyle.vcx, you will see two custom properties: PreviewMode and PreviewInit. The Form Wizard engine checks to see if your button class contains these properties and explicitly sets them to .T. when the Preview button is pressed. The Txtbtns class, for example, will render all edit buttons disabled when in PreviewMode in order to prevent editing of any data. The Txtbtns class also contains a number of additional custom properties that are used internally by that class and don't interface with the wizard.</p>
<h4>Ideas for custom styles</h4>
<p>
As you become more familiar with the custom style technology, you will come up with many cool and creative styles. Here are few ideas you might want to kick around.
<ol>
<li>
The form style in Figure 10 uses vertically laid out buttons and field objects embedded in raised containers. The form itself was subclassed from the Embossedform class style. In order to create the proper layout for this style, you need to leave a wide right margin in the LayoutSty object for the buttons. The vertical button style (VertBtns in Wizstyle.vcx) was actually dropped onto the form style itself. I then set WizCodeStyle = .F. so that the Wizard would not add the button style chosen. I also set WizFormStretch = .F. so that the buttons would not get chopped off. Notice the field captions (WizLblSuffix = "..." and WizLblCap = "lower").<p>
<img src="vfp3wiz_9.gif" border=0></P><p class=label>
<b>Figure 10. An example form with vertical buttons</b>
</li>
<li>
The next style is similar to the one above. Set WizCodeStyle = .F. so that no buttons appear. There is code in the Activate method of the form that triggers a toolbar.<p>
<img src="vfp3wiz_10.gif" border=0></P><p class=label>
<b>Figure 11. An example form with a toolbar</b>
<p class=tl>
<b>Sample code contents of Activate method</b></P><pre><code>IF ATC("XSTYLE",SET("CLASS"))=0
 &nbsp;&nbsp; SET CLASSLIB TO xstyle ADDITIVE
ENDIF
IF WEXIST("Wizard Buttons")
 &nbsp;&nbsp; IF !WVISIBLE("Wizard Buttons")
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SHOW WINDOW "Wizard Buttons"
 &nbsp;&nbsp; ENDIF
ELSE
 &nbsp;&nbsp; PUBLIC mywiztoolbar
 &nbsp;&nbsp; mywiztoolbar = CREATE("xPicBtns")
 &nbsp;&nbsp; mywiztoolbar.caption = "Wizard Buttons"
 &nbsp;&nbsp; mywiztoolbar.show
ENDIF
</code></pre>
</li>
<li>
The last example shows a new set of buttons created to allow the user to view data only in read-only form. The View Buttons class is essentially the same as the Txtbtns class with the edit buttons removed.<p>
<img src="vfp3wiz_11.gif" border=0></P><p class=label>
<b>Figure 12. Selecting button style and type</b>
<p>
<img src="vfp3wiz_12.gif" border=0></P><p class=label>
<b>Figure 13. An example form with View Buttons</b>
</li>
</ol>
<h3>Report Wizards</h3>
<p>
As with the Form Wizard, you can create custom report style templates. Fortunately, customizing styles for the Report Wizard is very simple to do. Unlike the Form Wizard, which utilizes object technology, the Report Wizard still relies on the old .FRX report structure. Custom styles are actually .FRX files with special objects containing layout information.</p>
<p>
Visual FoxPro ships with three Report Wizards: Group/Total, One-to-Many, and simple Report Wizards. If you have run through any of these wizards, you will know that you have the option to place the fields in either a horizontal or vertical orientation. The more common horizontal layout represents a listing of records that can have groupings, subtotaling, and totaling of data. There is a separate report template (.FRX) for both orientations. In addition, there is also a separate template for the One-to-Many Report Wizard. So, a custom style actually consists of three report files.</p>
<p>
The example below shows the custom style used for horizontally listed fields. Because Visual FoxPro reports are not objectified, there are no custom properties that can be used to control various attributes of the styles. Instead these attributes are provided by Style Triggers or Keywords embedded in the various objects on a report.</p>
<h4>Custom visual styles</h4>
<p>
As with the Form Wizard, there are objects used for data types. Specifically, you must include a field, memo, and OLE object. Optional labels for the title, page, and date can also be added. Notice the names (expressions) used for the object in the template in Figure 14. These are important because the Report Wizard relies on the exact wording as representation of a particular style. The Report Wizard automatically picks up the font attributes of layout objects.</p>
<p>
<img src="vfp3wiz_13.gif" border=0></p>
<p class=label>
<b>Figure 14. A custom style template</b></p>
<p>
Table 8 contains the various style triggers used by the Report Wizard to set specific style attributes. Take special note of the location because some of them go in the comment field while others go into the actual field expression or caption. The divider triggers are used by the Ledger style report to separate fields.</p>
<p class=label>
<b>Table 8. Report Wizard Style Triggers</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=24%><b>Property</b></td>
<td class=label width=17%><b>Location</b></td>
<td class=label width=59%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=24%>title</td>
<td width=17%>Caption</td>
<td width=59%>Name of object used for title</td>
</tr>
<tr valign=top>
<td width=24%>wiz_field</td>
<td width=17%>Expr</td>
<td width=59%>Name of object used for fields</td>
</tr>
<tr valign=top>
<td width=24%>label</td>
<td width=17%>Caption</td>
<td width=59%>Name of object used for field labels</td>
</tr>
<tr valign=top>
<td width=24%>wiz_memo</td>
<td width=17%>Expr</td>
<td width=59%>Name of object used for Memo fields</td>
</tr>
<tr valign=top>
<td width=24%>wiz_general</td>
<td width=17%>Expr</td>
<td width=59%>Name of object used for General fields</td>
</tr>
<tr valign=top>
<td width=24%>wiz_hstretch</td>
<td width=17%>Comment</td>
<td width=59%>Tells Report Wizard to stretch object as report stretches horizontally. Use with lines and shapes.</td>
</tr>
<tr valign=top>
<td width=24%>wiz_hdivider</td>
<td width=17%>Comment</td>
<td width=59%>Denotes an object that horizontally separates fields in detail band</td>
</tr>
<tr valign=top>
<td width=24%>wiz_vdivider</td>
<td width=17%>Comment</td>
<td width=59%>Denotes an object that vertically separates fields in detail band</td>
</tr>
<tr valign=top>
<td width=24%>pageno</td>
<td width=17%>Comment</td>
<td width=59%>Denotes a field used as page number place holder</td>
</tr>
<tr valign=top>
<td width=24%>wiz_upper</td>
<td width=17%>Comment</td>
<td width=59%>Tells Report Wizard to force field labels to upper case</td>
</tr>
<tr valign=top>
<td width=24%>wiz_lower</td>
<td width=17%>Comment</td>
<td width=59%>Tells Report Wizard to force field labels to lower case</td>
</tr>
<tr valign=top>
<td width=24%>wiz_proper</td>
<td width=17%>Comment</td>
<td width=59%>Tells Report Wizard to force field labels to proper case</td>
</tr>
</table><br>
<p>
Figure 15 shows a One-to-Many custom style and how the fields are laid out. Note the Wiz_Parent label field. There is a (":")a suffix at the end, which tells the Report Wizard to place a colon after each field caption. You can place a suffix in any label. For example, you can add an ellipsis after the field caption by setting the label object's expression to "Wiz_Label...".</p>
<p>
<img src="vfp3wiz_14.gif" border=0></p>
<p class=label>
<b>Figure 15. A One-to-Many custom style</b></p>
<h4>RPTSTYLE.DBF</h4>
<p>
The Report Wizard also uses a registration table similar to that of the Form Wizard. If this table doesn't exist, then the table built into the Report Wizard is used. Table 9 shows the structure of the table. You should place it in your \Wizards directory so that the Report Wizard can locate it. Remember to use fully qualified paths for the various style .FRX files.</p>
<p class=label>
<b>Table 9. Report Wizard Registration Table</b></p>
<table border=1 cellpadding=5 cols=4 frame=below rules=rows>
<tr valign=top>
<td class=label width=18%><b>Field Name</b></td>
<td class=label width=17%><b>Data Type</b></td>
<td class=label width=13%><b>Width</b></td>
<td class=label width=52%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=18%>Stylename</td>
<td width=17%>Char</td>
<td width=13%>20</td>
<td width=52%>Style description that appears in wizard</td>
</tr>
<tr valign=top>
<td width=18%>Stylehbmp</td>
<td width=17%>Memo</td>
<td width=13%>4</td>
<td width=52%>.BMP for horizontal style</td>
</tr>
<tr valign=top>
<td width=18%>Stylevbmp</td>
<td width=17%>Memo</td>
<td width=13%>4</td>
<td width=52%>.BMP for vertical style</td>
</tr>
<tr valign=top>
<td width=18%>Stylembmp</td>
<td width=17%>Memo</td>
<td width=13%>4</td>
<td width=52%>.BMP for One-to-Many style</td>
</tr>
<tr valign=top>
<td width=18%>Stylehfile</td>
<td width=17%>Memo</td>
<td width=13%>4</td>
<td width=52%>File for horizontal style</td>
</tr>
<tr valign=top>
<td width=18%>Stylevfile</td>
<td width=17%>Memo</td>
<td width=13%>4</td>
<td width=52%>File for vertical style</td>
</tr>
<tr valign=top>
<td width=18%>Stylemfile</td>
<td width=17%>Memo</td>
<td width=13%>4</td>
<td width=52%>File for One-to-Many style</td>
</tr>
</table><br>
<h3>Graph Wizard</h3>
<p>
There is a nice short-cut to the hassle of working with Microsoft Graph directly to create charts. And while I recommend that you spend some time learning OLE Automation in Visual FoxPro, you can use the Graph Wizard (_GENGRAPH) to accomplish many of the same tasks. The Graph Wizard will use the columns of the selected .DBF/Cursor and make intelligent decisions on how the data is input. You can control the ordering and selection of fields by creating a Structured Query Language (SQL) query/view prior to running _GENGRAPH. Use the following syntax:</p>
<p>
<b>Syntax</b></p>
<pre><code>DO (_GENGRAPH) WITH &lt;parm1&gt;[,&lt;parm2&gt;] [,&lt;parm2&gt;]...[,&lt;parm9&gt;]
parm1 - "AUTOGRAPH"      &amp;&amp;required
parm2 - chart type (number)
parm3 - chart subtype (number)
parm4 - title (if not empty)
parm5 - series by row (.T.), by column (.F.)
parm6 - has legend (.T.)
parm7 - use autoformat (.F.)
parm8 - name of output DBF for graph
parm9 - don't show graph with MODIFY GENERAL (.f.)
parm10 - show nulls
</code></pre>
<p>
<b>Example</b></p>
<pre><code>DO (_GENGRAPH) WITH 'AUTOGRAPH',1,1,'OFFICES',.F.,.T.,.F.
</code></pre>
<p>
Here are some recommendations for common charts. When choosing the AutoFormat option, you need to supply both the type and subtype for the chart.</p>
<p class=label>
<b>Table 10. Recommendations for Using Graph Wizard for Common Charts</b></p>
<table border=1 cellpadding=5 cols=4 frame=below rules=rows>
<tr valign=top>
<td class=label width=28%><b>Type</b></td>
<td class=label width=22%><b>Series in</b></td>
<td class=label width=24%><b>Chart Type</b></td>
<td class=label width=26%><b>AutoFormat</b></td>
</tr>
<tr valign=top>
<td width=28%>Area</td>
<td width=22%>Columns</td>
<td width=24%>1</td>
<td width=26%></td>
</tr>
<tr valign=top>
<td width=28%>3D Area</td>
<td width=22%>Columns</td>
<td width=24%>9</td>
<td width=26%></td>
</tr>
<tr valign=top>
<td width=28%>Bar</td>
<td width=22%>Rows</td>
<td width=24%>2</td>
<td width=26%></td>
</tr>
<tr valign=top>
<td width=28%>3D Bar</td>
<td width=22%>Rows</td>
<td width=24%>10</td>
<td width=26%></td>
</tr>
<tr valign=top>
<td width=28%>Column</td>
<td width=22%>Rows</td>
<td width=24%>3</td>
<td width=26%></td>
</tr>
<tr valign=top>
<td width=28%>3D Column</td>
<td width=22%>Rows</td>
<td width=24%>11</td>
<td width=26%></td>
</tr>
<tr valign=top>
<td width=28%>Pie</td>
<td width=22%>Columns</td>
<td width=24%></td>
<td width=26%>5,6</td>
</tr>
<tr valign=top>
<td width=28%>3D Pie</td>
<td width=22%>Columns</td>
<td width=24%></td>
<td width=26%>14,6</td>
</tr>
<tr valign=top>
<td width=28%>Line</td>
<td width=22%>Columns</td>
<td width=24%>4</td>
<td width=26%></td>
</tr>
<tr valign=top>
<td width=28%>3D Line</td>
<td width=22%>Columns</td>
<td width=24%>12</td>
<td width=26%></td>
</tr>
</table><br>
<p>
I should mention a few words about the Apple® Macintosh® product. MacGraph 5.0 does not support OLE Automation in the same fashion as its Microsoft Windows®–based counterpart. The Graph Wizard relies on using OLE Automation for setting chart properties such as type, title, and legend. Because of this lack of OLE Automation support, it is likely that the Graph Wizard will have more limited functionality on the Macintosh product.</p>
<h3>Table Wizard</h3>
<p>
Visual FoxPro 5.0 allows you to extend the Table Wizard. This is new since Visual FoxPro 3.0. The Table Wizard includes a number of predefined tables such as Accounts, Artists, Books, and Customers. Each has common fields typically associated with these tables. In Visual FoxPro 3.0, these table definitions were bound to the Table Wizard itself. For version 5.0, we expose these tables so that users can edit or delete existing definitions or add new ones. The following tables are automatically copied out to the \Wizards directory when the Table Wizard is first run.</p>
<p class=label>
<b>Table 11. Tables Automatically Copied to the \Wizards Directory</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=19%>Tbwztbls.dbf </td>
<td width=81%>Contains all the table descriptions along with a their unique ID. The description is used for display in the wizard itself.</td>
</tr>
<tr valign=top>
<td width=19%>Tbwzflds.dbf: </td>
<td width=81%>Contains a list of all unique fields along with their ID and description.</td>
</tr>
<tr valign=top>
<td width=19%>Tbwzftyp.dbf </td>
<td width=81%>Contains field definition information such as width, decimals, and type.</td>
</tr>
<tr valign=top>
<td width=19%>Tbwztfld.dbf </td>
<td width=81%>Links the table and field information together.</td>
</tr>
</table><br>
<h2>Extending the Builders</h2>
<p>
Currently, the builder technology is limited to Forms and Form Controls because of the "live" state of the Form Designer surface. In addition, there is a Referential Integrity (RI) Builder, but this is a slightly different beast. When the object technology is carried over to the menus, you can expect more builders to follow.</p>
<p>
Visual FoxPro has provided excellent documentation on using the ASELOBJ() function for accessing the Form Designer and creating your own builders. In fact, there are a number of third parties working on extensions to the builders. This small section discusses a few things you can do with the existing builders.</p>
<h3>BUILDER.DBF</h3>
<p>
The builder registration table is the same format as the one used by the wizards. In fact, you can take a look at it in the \Wizards directory. One of the differences that you will notice is that all of the builders are classes and not applications. This is because the builders are self-contained within the Builder.app file. If no particular builder exists for a specific object, then a dialog box will indicate this. Visual FoxPro does not ship a builder for each type of control, so you may want to create some to fill in the gaps. Or you might want to replace or augment existing ones. To do any of these enhancements or modifications, you must record them through the registration table if you intend to use the Builder.app engine.</p>
<h3>Builder Property</h3>
<p>
The builder engine can actually use a specific user-defined builder if the object being modified has a custom property named Builder. This custom property must be set to the name of your replacement builder application. For example, you might create your own subclass of a unique Grid class that you like. By adding a custom property for this class, you can have Builder.app bypass the usual Grid Builder and instead run the one you specified.</p>
<h3>Form Builder</h3>
<p>
The Form Builder uses the same engine used by the Form Wizard. This means that you can create custom builder styles just as you did for wizards. In fact, you can have the same styles used for both. The Form Wizard style registration table has a builder field which can be set to control whether a style is used with the Form Builder. The Form Builder merely lays out the fields. There is no placement of button objects as is done with the Form Wizard. The builder is meant as a replacement for the old Quick Form option in FoxPro 2.<i>x</i>.</p>
</BODY>
</HTML>

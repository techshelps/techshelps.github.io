<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Microsoft-Specific Extensions to Windows Sockets</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_final"></a>Microsoft-Specific Extensions to Windows Sockets</h1>
<p>
Microsoft Corporation</p>
<h2>Introduction</h2>
<p>
Windows Sockets is an application programming interface (API) for sending and receiving data on a network. It was originally designed as the top level interface for TCP/IP network transport stacks. Windows Sockets version 1.1 is formally defined in the Windows Sockets 1.1 specification, available in several locations on the Internet.</p>
<p>
Microsoft is one member of the group that originally defined Windows Sockets. Microsoft is also one of several software vendors that offers an implementation of Windows Sockets. This is exported from the WSOCK32.DLL that is distributed with Microsoft Win32s, Microsoft Windows 95, and Microsoft Windows NT. The Windows Sockets specification clearly states that additional functions can be added to WSOCK32.DLL. Microsoft has added functions to its version of WSOCK32.DLL (Microsoft-specific extensions) in a manner consistent with the specification. These extensions were added to provide protocol independence, better server performance, and other features requested by customers.</p>
<p>
The documentation for the functions in the Microsoft version of WSOCK32.DLL has been distributed in the Microsoft Win32 SDK, along with the rest of the Win32 API, for several years. This is consistent with the philosophy of the SDK, which is to provide software developers with focused, consistent information about numerous Windows-based technologies, including COM, OLE, RPC, OpenGL, MAPI, and TAPI. Although the original documentation did not, the current Win32 API documentation now explicitly lists which functions are part of Windows Sockets and which are specific to the Microsoft implementation.</p>
<p>
An application that is written to use the Microsoft-specific extensions may not run correctly on a machine that has been configured to run a TCP/IP stack from another vendor. This white paper is provided to clarify exactly what the Microsoft-specific extensions are and how an application program can avoid dependency on them. An application that is written to use or depend on only the functions in the Windows Sockets specification will run on the widest possible number of machines.</p>
<h3>Extended Functions</h3>
<p>
The following Microsoft-specific extensions have been added to provide an abstraction for registering services and resolving names on the network (RNR):</p>
<p class=indent>
<b>EnumProtocols<br>
GetAddressByName<br>
GetNameByType<br>
GetService<br>
GetTypeByName<br>
SetService</b></p>
<p>
The following Microsoft-specific extensions have been added to provide improved application performance:&nbsp; </p>
<p class=indent>
<b>AcceptEx<br>
GetAcceptExSockaddrs<br>
TransmitFile<br>
WSARecvEx</b></p>
<p>
In order to work over any implementation of Windows Sockets, an application should not be linked at build-time with any of these functions. At run time, the application should call <b>GetProcAddress</b> (and check the error code) on any function it chooses to use. For more information on these functions, see the Win32 SDK documentation.</p>
<h3>Extended Socket Options</h3>
<p>
The Microsoft version of WSOCK32.DLL allows sockets-based communication over multiple types of networks (protocol independence), while the Windows Sockets specification is written only for IP-based networks. The following socket options are Microsoft-specific extensions designed for non-IP-based networks: </p>
<p class=indent>
SO_CONNDATA<br>
SO_CONNOPT<br>
SO_DISCDATA<br>
SO_DISCOPT<br>
SO_CONNDATALEN<br>
SO_CONNOPTLEN<br>
SO_DISCDATALEN<br>
SO_DISCOPTLEN</p>
<p>
The following socket options are Microsoft-specific extensions for controlling asynchronous reads and writes on socket handles (see Extended File I/O later in this white paper):</p>
<p class=indent>
SO_OPENTYPE<br>
SO_SYNCHRONOUS_ALERT<br>
SO_SYNCHRONOUS_NONALERT</p>
<p>
The following socket options are Microsoft-specific extensions for controlling the size of datagrams:</p>
<p class=indent>
SO_MAXDG<br>
SO_MAXPATHDG</p>
<p>
The following socket options are used with <b>AcceptEx,</b> which is a Microsoft-specific function:</p>
<p class=indent>
SO_UPDATE_ACCEPT_CONTEXT<br>
SO_CONNECT_TIME</p>
<p>
The following socket options are Microsoft-specific extensions for supporting multicast over IP:</p>
<p class=indent>
IPPROTO_IGMP<br>
IP_MULTICAST_IF<br>
IP_MULTICAST_TTL<br>
IP_MULTICAST_LOOP<br>
IP_ADD_MEMBERSHIP<br>
IP_DROP_MEMBERSHIP<br>
IP_TTL<br>
IP_TOS<br>
IP_DONTFRAGMENT<br>
IP_DEFAULT_MULTICAST_TTL<br>
IP_DEFAULT_MULTICAST_LOOP<br>
IP_MAX_MEMBERSHIPS</p>
<p>
The following socket option is a Microsoft-specific extension used to toggle the behavior of out-of-band data between two different standards:</p>
<p class=indent>
TCP_BSDURGENT</p>
<p>
The majority of these socket options were explained in the original Win32 SDK documentation or in the Microsoft Knowledge Base. All are now covered in the Win32 SDK documentation.</p>
<h3>Extended Defines</h3>
<p>
The following address and protocol families are Microsoft-specific extensions for supporting protocol independence:</p>
<p class=indent>
AF_IPX<br>
AF_VOICEVIEW<br>
AF_FIREFOX<br>
AF_UNKNOWN1<br>
AF_BAN<br>
PF_IPX<br>
PF_VOICEVIEW<br>
PF_FIREFOX<br>
PF_UNKNOWN1<br>
PF_BAN</p>
<p>
The following define is a Microsoft-specific extension used in conjunction with WSARecvEx for message-oriented transports:</p>
<p class=indent>
MSG_PARTIAL</p>
<h3>Extended File I/O</h3>
<p>
The Microsoft implementation of Windows Sockets allows socket handles to be treated as file handles. That is, it is possible to use socket handles with <b>ReadFile</b>, <b>WriteFile</b>, <b>ReadFileEx</b>, <b>WriteFileEx</b>, <b>DuplicateHandle</b>, and other Win32 functions. For an application to run over non-Microsoft implementations of Windows Sockets, socket handles should not be used with the Win32 functions that expect file handles, or an alternate code path should be provided.</p>
<h3>Known Application Problems</h3>
<p>
Microsoft PowerPoint for Windows 95, version 7.0 includes a powerful feature that allows one computer to broadcast a PowerPoint presentation to additional computers. It is accessible under the “Tools, Presentation Conference...” menu. The program calls <b>EnumProtocols</b> to determine whether to enable this feature. An implementation of Windows Sockets that does not provide <b>EnumProtocols</b> will cause this feature to fail and, in some cases, cause the application to crash. A fix to this problem is available at ftp://ftp.microsoft.com/softlib/mslfiles/wt1274.exe.</p>
<p>
The WININET.DLL distributed with Microsoft Internet Explorer 3.0 (alpha release for developers), Internet Assistant for Microsoft<font face="Symbol">â</font> Word for Windows 95, version 2.0, and the Microsoft ActiveX™ SDK (alpha release for developers) uses the RNR functions, and will not operate correctly over non-Microsoft implementations of Windows Sockets. An updated WININET.DLL will be made available in subsequent releases.</p>
<h3>Excerpt from Windows Sockets 1.1 Specification</h3>
<h4>Private API Interfaces (Section 3.3.7)</h4>
<p>
The winsock.def file in Appendix B.7 lists the ordinals defined for the Windows Sockets APIs. In addition to the ordinal values listed, all ordinals 999 and below are reserved for future Windows Sockets use. It may be convenient for a Windows Sockets implementation to export additional, private interfaces from the Windows Sockets DLL. This is perfectly acceptable, as long as the ordinals for these exports are above 1000. Note that any application that uses a particular Windows Sockets DLL's private APIs will most likely not work on any other vendor's Windows Sockets implementation. Only the APIs defined in this document are guaranteed to be present in every Windows Sockets implementation.</p>
<p>
If an application uses private interfaces of a particular vendor's Windows Sockets DLL, it is recommended that the DLL not be statically linked with the application but rather dynamically loaded with the Windows routines LoadLibrary() and GetProcAddress(). This allows the application to give an informative error message if it is run on a system with a Windows Sockets DLL that does not support the same set of extended functionality.</p>
<h3>Windows Sockets 2</h3>
<p>
Many of the features in the Microsoft-specific extensions have been incorporated into the Windows Sockets 2 specification. In addition to this increase in functionality, Windows Sockets 2 eliminates many of the problems encountered with Windows Sockets 1.1 by moving to a proper WOSA architecture. The DLL layer in Windows Sockets 2 is not duplicated by every vendor that distributes a network protocol stack. Instead, the DLL layer provides a well-defined service provider interface that any network protocol stack can plug into.</p>
<p>
Windows Sockets 2 is available on Windows NT with the version 4.0 release and will be available for Windows 95.</p>
</BODY>
</HTML>

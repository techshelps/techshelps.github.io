<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Moving from Visual FoxPro 3.0 to Visual FoxPro 5.0</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_fp30to50"></a>Moving from Visual FoxPro 3.0 to Visual FoxPro 5.0</h1>
<p>
Susan Graham<br>
Microsoft Corporation</p>
<p>
May 21, 1997</p>
<h2>Overview</h2>
<p>
Most developers have had no problems moving their code from Visual FoxPro™ 3.0 to Visual FoxPro 5.0. There are, however, a few issues that you should be aware of before using Visual FoxPro 3.0 files in Visual FoxPro 5.0. </p>
<p>
The object code was changed in Visual FoxPro 5.0. Therefore, you must recompile Visual FoxPro 3.0 Program (.PRG), Form (.SCX), Query (.QPR), Menu (.MPR), Report (.FRX), Database (.DBC), and Class Library (.VCX) files to run them in Visual FoxPro 5.0. The recompilation will occur automatically when each of these files is edited, instantiated, or run in Visual FoxPro 5.0.</p>
<p>
Opening a Visual FoxPro 3.0 project in Visual FoxPro 5.0 automatically invokes the Converter (CONVERT.APP, located in the Visual FoxPro directory), which will then convert the project and all its contents. You can also open individual report and label files to start the Visual FoxPro 5.0 Converter. When you issue a command such as MODIFY CLASS or MODIFY FORM, Visual FoxPro 5.0 automatically recompiles and opens the file.</p>
<h2>Issues</h2>
<p>
The following are issues you should be aware of when using Visual FoxPro 5.0 with Visual FoxPro 3.0 files. </p>
<p>
<b>The default settings for FontBold, FontSize, and ColorSource properties of objects are different in Visual FoxPro 5.0.</b></p>
<p>
This change was made in order to conform to the Windows User Interface Guidelines. The converter gives you the option of maintaining the property values as they were in Visual FoxPro 3.0 or changing them so that forms and controls adopt the new Visual FoxPro 5.0 look.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Property</b></td>
<td class=label width=29%><b>3.0 Default Setting</b></td>
<td class=label width=46%><b>5.0 Default Setting</b></td>
</tr>
<tr valign=top>
<td width=25%>FontBold</td>
<td width=29%>True</td>
<td width=46%>False</td>
</tr>
<tr valign=top>
<td width=25%>FontSize</td>
<td width=29%>10 points</td>
<td width=46%>9 points</td>
</tr>
<tr valign=top>
<td width=25%>ColorSource</td>
<td width=29%>0</td>
<td width=46%>4</td>
</tr>
</table><br>
<p>
<b>Label.Refresh(&nbsp;) no longer occurs for Label.PARENT.Refresh(&nbsp;).</b></p>
<p>
In Visual FoxPro 3.0b, you could add a Refresh method to a label and add code in the label's Refresh method to "bind" the label to a "ControlSource." The label would automatically refresh its Caption on THISFORM.Refresh(&nbsp;). The Refresh method no longer occurs in Visual FoxPro 5.0 for controls that don't have a native Refresh method.</p>
<p>
<b>Pages can receive the focus in Visual FoxPro 5.0.</b></p>
<p>
Pages in PageFrames can receive the focus in Visual FoxPro 5.0 (the focus rectangle appears around a tab's caption). In Visual FoxPro 5.0, code that used to execute in the When or GotFocus event of the first control in tab order on a page no longer executes when the page receives the focus. This change was made in response to the numerous requests that pages be able to receive the focus. If your application expects the first object on a page to receive the focus, you can set the focus to the first control by placing the following line of code in the Activate event of the page: </p>
<pre><code>KEYBOARD “{TAB}” PLAIN
</code></pre>
<p>
Alternatively, you can place this code in the Activate snippet of the page:</p>
<pre><code>THIS.Controls(1).SetFocus( )
</code></pre>
<p>
You should use this only if you are sure that the first object on the page has a SetFocus method. If it doesn’t, Visual FoxPro generates a “Property is not found” error.</p>
<p>
<b>A form’s Init event occurs when a control’s Init event returns false (.F.).</b></p>
<p>
In Visual FoxPro 3.0b, when a form's Init event returns False (.F.), the form's Init event never fires and the form isn't instantiated. In Visual FoxPro 5.0, when a control's Init event returns False (.F.), the form's Init event occurs—code you don't expect to execute does in Visual FoxPro 5.0.</p>
<p>
This change is by design. It was determined that there are many more cases where developers prefer to create the form object if one or more Init events for controls on the form return false (.F). If you don’t want the form’s Init event to occur when an object’s Init event returns false (.F.), check for the existence of the control in the form’s Init event and return false (.F.) if the control doesn’t exist on the form.</p>
<pre><code>IF TYPE("THISFORM.Control1")="U"
 * Control1 is the object that must RETURN .F.
 * exist to allow the form to run
ENDIF
</code></pre>
<p>
<b>In Visual FoxPro 3.0, if a base class didn’t have a ProgrammaticChange event and a Value property (there are several such classes), you could add them and they would act like the native ones.</b></p>
<p>
Some developers made use of this unsupported feature to provide "SetAll(&nbsp;)" code execution, like "ExecuteAll(MyMethodName)" where the MyMethodName was a custom ProgrammaticChange event. For example, SetAll("Value", 0, "MyClass") for a Header object in a grid would fire code in all of the Header object's ProgrammaticChange methods. It didn't matter that the Value property was essentially meaningless to the Header object; it provided the ability to execute code that affected each header (and each column) in the grid without having to iterate through the columns.</p>
<p>
In Visual FoxPro 5.0, this unsupported feature is no longer available, except where the ProgrammaticChange event and a Value property are available for a control or object.</p>
<p>
Code that made use of this unsupported feature can be replaced by a FOR.. ENDFOR loop to iterate through the appropriate objects.</p>
<p>
<b>Visual FoxPro 3.0 behaved as if AutoYield were set to true (.T.).</b></p>
<p>
Visual FoxPro 3.0 did not have an AutoYield property. However, it behaved as if AutoYield were set to true (.T.). In Visual FoxPro 5.0 the AutoYield property is set to true (.T.) by default.</p>
<p>
The AutoYield property in Visual FoxPro 5.0 should be set to False (.F.) when a form contains an ActiveX™ control. Setting AutoYield to False (.F.) prevents events for an ActiveX control from executing between lines of user program code. For example, if AutoYield is set to True (.T.), clicking an ActiveX control while user program code is executing may cause an event for the ActiveX control to execute, ignoring the user program code for the event, producing undesirable or unpredictable results</p>
<p>
<b>Visual FoxPro 5.0 changes title bar colors in forms with menus created with DEFINE POPUP.</b></p>
<p>
In Visual FoxPro 5.0, DEFINE POPUP changes the current form's title bar to the inactive title bar color. The title bar color did not change in Visual FoxPro 3.0b. Shortcut menus created in Visual FoxPro with the DEFINE POPUP SHORTCUT option don’t change the title bar color.</p>
<p>
<b>Closing a table with uncommitted changes performs a TABLEREVERT(&nbsp;) in Visual FoxPro 5.0.</b></p>
<p>
In Visual FoxPro 3.0b, if form uses buffering and you close the form while the buffer contains uncommitted changes, the form closes and an error message is generated. You must SELECT the table with the uncommitted changes and issue TABLEREVERT(&nbsp;) before you can exit Visual FoxPro 3.0b.</p>
<p>
In Visual FoxPro 5.0, the same scenario doesn't generate an error message, and an implicit TABLEREVERT(&nbsp;) is executed. Because the error message isn’t generated, you might assume that the changes were committed. However, the changes are discarded. In Visual FoxPro 5.0 you should take care that applications utilizing buffering don’t allow forms to close without first resolving uncommitted changes.</p>
<p>
<b>COMPILE REPORT isn’t available in Visual FoxPro 3.0.</b></p>
<p>
COMPILE REPORT, added to Visual FoxPro 5.0, isn’t supported in Visual FoxPro 3.0. Report and label files containing code compiled in Visual FoxPro 5.0 can be recompiled to Visual FoxPro 3.0 format with the following program. Copy the code below into a program file and run the program in the Command window, passing the name of the report or label file to compile as a parameter. See Usage and Example sections in the program header below for the format of the command you issue in the Command window.</p>
<pre><code>******************************************************
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CONVREPO.PRG
*
* Program to compile Visual FoxPro 5.0 .frx or .lbx
* file to run under Visual FoxPro 3. This is necessary
* only if the report or label contains code in any of
* its DataEnvironment methods.
* 
* Usage: DO CONVREPO WITH &lt;.frx or .lbx file
* including extension&gt;
* 
* Example:&nbsp; DO CONVREPO WITH "myreport.frx"
* 
******************************************************

LPARAMETER lcFrxName
LOCAL lcAlias, lcTmpFile
IF (TYPE('lcFrxName') = "C" AND;
UPPER('frx')$UPPER(lcFrxName)) OR ;
 &nbsp;&nbsp;&nbsp;&nbsp; (TYPE('lcFrxName') = "C" AND;
UPPER('lbx')$UPPER(lcFrxName))

 &nbsp; IF NOT FILE(lcFrxName)
 &nbsp;&nbsp;&nbsp;&nbsp; =MESSAGEBOX('The file '+ UPPER(lcFrxName) + ' ;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; does not ' + 'exist in the default ;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; directory. '+ CHR(13)+ ;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Please pass a valid report '+ ;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'or label filename, including extension, ;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; to this program!' ,48, "Report/Label Code ;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Compiler")
 &nbsp;&nbsp;&nbsp;&nbsp; RETURN
 &nbsp; ENDIF

 &nbsp; USE (lcFrxName)
 &nbsp; lcAlias = ALIAS()
 &nbsp; * Look for any Data Environment object's records
 &nbsp; SCAN FOR NAME='dataenvironment' ;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OR NAME='cursor' ;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OR NAME='relation'
 &nbsp;&nbsp;&nbsp;&nbsp; IF !EMPTY(TAG)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; Is there any code?
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lcTmpFile = SYS(3)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; COPY MEMO TAG TO (lcTmpFile+'.PRG')
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * Copy to temp .prg
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; COMPILE (lcTmpFile)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; Compile it
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; APPEND MEMO tag2 ;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FROM (lcTmpFile+".FXP") OVERWRITE 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * Write it back to .frx/.lbx
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ERASE (lcTmpFile+".PRG") &amp;&amp; Delete temp files
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ERASE (lcTmpFile+".FXP")
 &nbsp;&nbsp;&nbsp;&nbsp; ENDIF
 &nbsp; ENDSCAN
 &nbsp; USE IN (lcAlias)
 &nbsp; SET MESSAGE TO "Recompile completed"
 &nbsp; WAIT "" TIMEOUT 2
 &nbsp; SET MESSAGE TO
ELSE
 &nbsp; =MESSAGEBOX('Please pass a report or label ;
 &nbsp;&nbsp;&nbsp;&nbsp; filename, '+ 'including extension, to this ;
 &nbsp;&nbsp;&nbsp;&nbsp; program!' ,48, "Report/Label Code Compiler")
 &nbsp; RETURN
ENDIF
RETURN
*
* End of CONVREPO.PRG
</code></pre>
<h2>Additional Conversion Considerations</h2>
<p>
Here are some additional things to consider when converting your files:
<ul type=disc>
<li>
BUILDAPP.PRG, a tool included with Visual FoxPro, strips the method and event code of .SCX and .VCX files from .APP and .EXE files for distribution. BUILDAPP.PRG isn't required in Visual FoxPro 5.0. Source code is automatically stripped from .APP and .EXE files if you uncheck the <b>Debug Info</b> checkbox in the <b>Project</b> page of the <b>Project Information</b> dialog box. <br><br></li>
<li>
In Visual FoxPro 5.0, the AFIELDS(&nbsp;) function creates an array with 16 columns, providing more information about the structure of a table. In Visual FoxPro 3.0, AFIELDS(&nbsp;) creates an array with only 11 columns. See the AFIELDS(&nbsp;) topic in the Help file for additional information about the additional columns.<br><br></li>
<li>
Some bitmaps that displayed properly in Visual FoxPro 3.0 might not display properly in Visual FoxPro 5.0. If a bitmap doesn’t display properly in Visual FoxPro 5.0, use ImageEdit to edit the bitmap by changing at least one pixel and then save the bitmap.</li>
</ul>
<h2>Using Visual FoxPro 3.0 and Visual FoxPro 5.0 Simultaneously</h2>
<p>
To use Visual FoxPro 3.0 and 5.0 at the same time, do the following:
<ol>
<li>
Create different projects, one for each version. Note that the files you reference in each project can be the same.<br><br></li>
<li>
Before you modify any files in the project or build an application from the project, rebuild the entire project with the <b>Recompile All Files</b> option checked in the <b>Build Options</b> dialog box.<br><br></li>
<li>
Avoid using Visual FoxPro 5.0–specific features.<br><br></li>
<li>
Be aware of some of the differences between Visual FoxPro 3.0 and Visual FoxPro 5.0 described above. Try to avoid the differences or add DO CASE statements based on the version number with additional code for the respective versions.</li>
</ol>
<p>
A related Knowledge Base article, "HOWTO: Converting VFP Files from Version 3.0 to 5.0 and Back" (Article ID: Q162076), discusses moving between Visual FoxPro 3.0 and 5.0 and can be found on the MSDN Library.</p>
<h2>Summary</h2>
<p>
The move from Visual FoxPro 3.0 to 5.0 should be very smooth and well worth the effort. Visual FoxPro 5.0 adds improved performance, a new debugging environment, and OLE automation, as well as new database features. For additional information about Visual FoxPro 5.0 and moving from Visual FoxPro 3.0 to 5.0, visit the Visual FoxPro Web site at <a href="http://www.microsoft.com/vfoxpro/">http://www.microsoft.com/vfoxpro/</a>.</p>
<h4>Acknowledgments </h4>
<p>
Drew Speedie, Mac Rubel, Lisa Slater Nicholls, Paul Maskens, Mike Feltman, Rainer Becker, Rick Strahl, Ken Levy, Jim Saunders, Calvin Hsia, and Ken Tittle all contributed to this article, pointing out issues, offering code, and suggesting changes.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Bubble Power: Event Handling in Microsoft Internet Explorer 4.0</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_ie4event"></a>Bubble Power: Event Handling in Microsoft Internet Explorer 4.0</h1>
<p>
Michael Wallent</p>
<p>
July 15, 1997<br>
Updated September 30, 1997</p>
<p>
<i>Michael Wallent is Microsoft's lead program manager for Dynamic HTML.</i></p>
<p>
Web authors can create exciting, interactive pages by adding special code to make those pages respond to user-initiated interactions. Clicking a button, moving the mouse over part of the screen, selecting some text—these actions all fire <i>events</i> for which a Web author can write special code that will run in response to the event. This code is generally known as an <i>event handler</i>.</p>
<p>
Event handling is not new with Microsoft® Internet Explorer version 4.0—Microsoft Internet Explorer 3.<i>x</i>, Netscape Navigator, and Communicator all handle events as well. However, in Microsoft Internet Explorer 4.0, the Hypertext Markup Language (HTML) elements on a Web page which are the source of the events, and the types of events that are generated, have been greatly expanded. Previously, only a small set of HTML elements could generate events: anchors, image maps, form elements, applets, and objects. With Microsoft Internet Explorer 4.0, every HTML element on the page can be the source for a full set of mouse and keyboard events.</p>
<p>
Here is a set of common events that every HTML element generates in Microsoft Internet Explorer 4.0:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=22%><b>Mouse event</b></td>
<td class=label width=78%><b>Generated when the user</b></td>
</tr>
<tr valign=top>
<td width=22%>onmouseover</td>
<td width=78%>Moves the mouse pointer over (that is, enters) an element.</td>
</tr>
<tr valign=top>
<td width=22%>onmouseout</td>
<td width=78%>Moves the mouse off an element.</td>
</tr>
<tr valign=top>
<td width=22%>onmousedown</td>
<td width=78%>Presses any of the mouse buttons.</td>
</tr>
<tr valign=top>
<td width=22%>onmouseup</td>
<td width=78%>Releases any of the mouse buttons.</td>
</tr>
<tr valign=top>
<td width=22%>onmousemove</td>
<td width=78%>Moves the mouse pointer over an element.</td>
</tr>
<tr valign=top>
<td width=22%>onclick</td>
<td width=78%>Clicks the left mouse button on an element.</td>
</tr>
<tr valign=top>
<td width=22%>ondblclick</td>
<td width=78%>Double-clicks the left mouse button on an element.</td>
</tr>
<tr valign=top>
<td class=label width=22%><b>Keyboard event</b></td>
<td class=label width=78%><b>Generated when the user</b></td>
</tr>
<tr valign=top>
<td width=22%>onkeypress</td>
<td width=78%>Presses and releases a key (full down-and-up cycle). However, if a key is held down, multiple onkeypress events will be fired.</td>
</tr>
<tr valign=top>
<td width=22%>onkeydown</td>
<td width=78%>Presses a key. Only a single event will be fired, even if the key is held down.</td>
</tr>
<tr valign=top>
<td width=22%>onkeyup</td>
<td width=78%>Releases a key.</td>
</tr>
</table><br>
<p>
To help authors build code that is more compact, simpler, and easier to maintain, Microsoft Internet Explorer 4.0 introduces a new way to handle events—<i>event bubbling.</i> Before we take too much credit for this innovation in HTML, we have a confession: we didn't invent event bubbling; Microsoft Windows®, OS/2, OSF Motif, and almost every other graphic user interface (GUI) platform uses this technique. Event bubbling is, however, new to HTML.</p>
<p>
Previously, if an HTML element generated an event but no event handler was registered for it, the event would just vaporize, never to be seen again. Event bubbling simply passes these unhandled events to the parent element for handling. The event continues up (bubbles up) the element hierarchy until it is handled, or until it reaches the topmost object, the <i>document</i>.</p>
<p>
Event bubbling is useful because:
<ul type=disc>
<li>
It allows multiple common actions to be handled centrally.<br><br></li>
<li>
It reduces the amount of overall code in the Web page.<br><br></li>
<li>
It reduces the number of code changes necessitated by changes in the document.</li>
</ul>
<h2>Simple Example</h2>
<pre><code>&lt;html&gt;
&lt;body&gt;
&lt;div id=OuterDiv style="background-color: red"
onmouseover="alert(window.event.srcElement.id);"&gt;
This is some text
&lt;img id=InnerImg&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>
On this Web page, when the user moves the mouse pointer over the text "This is some text," a dialog box appears with the text "OuterDiv." If the mouse then moves over the image, another dialog box appears with the text "InnerImg."</p>
<p>
The interesting thing here is that the onmouseover event for the image (IMG element) was handled even though it does not have an event handler. Why is this? The onmouseover event from the IMG element bubbles up to its parent element, which is the DIV element. DIV does have an event handler registered for the onmouseover event, so it fires.</p>
<p>
Every time an event is fired, a special property on the window object is created. This special property contains the event object. The event object contains context information about the event that just fired, including mouse location, keyboard status, and (most importantly) the source element of the event.</p>
<p>
The source element is the element that caused the event to fire, and it can be accessed using the <b>srcElement</b> property on the window.event object.</p>
<p>
In the example above, the dialog box displays the <b>id</b> property of the event's <b>srcElement</b>.</p>
<h2>Another Example: Handling Rollover Effects</h2>
<p>
Now that we've seen how easy it is to use event bubbling, let's apply it to create rollover effects. A Web author creates a rollover effect to make part of a page react when the user moves the mouse over it. With Microsoft Internet Explorer 4.0, the process of creating a rollover effect is greatly simplified.</p>
<pre><code>&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
.Item {
 &nbsp; cursor: hand;
 &nbsp; font-family: verdana;
 &nbsp; font-size: 20;
 &nbsp; font-style: normal;
 &nbsp; background-color: blue;
 &nbsp; color: white
 }
.Highlight {
 &nbsp; cursor: hand;
 &nbsp; font-family: verdana;
 &nbsp; font-size: 20;
 &nbsp; font-style: italic;
 &nbsp; background-color: white;
 &nbsp; color: blue
 }
&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;span class=Item&gt;Milk&lt;/span&gt;
&lt;span class=Item&gt;Cookies&lt;/span&gt;
&lt;span class=Item&gt;Eggs&lt;/span&gt;
&lt;span class=Item&gt;Ham&lt;/span&gt;
&lt;span class=Item&gt;Cheese&lt;/span&gt;
&lt;span class=Item&gt;Pasta&lt;/span&gt;
&lt;span class=Item&gt;Chicken&lt;/span&gt;

&lt;script&gt;
function rollon() {
  if (window.event.srcElement.className == "Item") {
 &nbsp;&nbsp;&nbsp; window.event.srcElement.className = "Highlight";
  }
}

document.onmouseover = rollon;

function rolloff() {
  if (window.event.srcElement.className == "Highlight") {
 &nbsp;&nbsp;&nbsp; window.event.srcElement.className = "Item";
  }
}

document.onmouseout = rolloff;
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>
In this example, we have seven SPAN elements, initially set to use the class Item. When the mouse moves over any one of those elements, it will be changed to use the class Highlight.</p>
<p>
Innovations in Microsoft Internet Explorer 4.0 enable the following:
<ul type=disc>
<li>
Events can now be generated from a SPAN element. Previously, an HTML author would have had to wrap each SPAN in an anchor to get the right events.<br><br></li>
<li>
With event bubbling, events can be captured at the document level. You do not need to create separate event handlers for each element that will participate in the effect. For example, should the author add HTML to the page, these additional elements would participate in the event model without changing a single line of script. Note that the document object is the "super parent" for all elements in the document body.</li>
</ul>
<h2>Canceling Events</h2>
<p>
All events bubble to their parent element (and recursively all the way up to the document object) unless the event is canceled. To cancel an event, you must set the <b>window.event.cancelBubble</b> property to <i>true</i> in the event handler.</p>
<p>
Canceling event bubbling should not be confused with canceling the default action for the event. Some events (for example, the onclick event on an anchor) have a default action. When an anchor is clicked, its default action is to navigate the current window to the Uniform Resource Locator (URL) specified in the <b>src</b> property. Returning <i>false</i> from an event handler, or setting <b>window.event.returnValue</b> to <i>false</i>, cancels the default action but does not cancel event bubbling unless <b>window.event.cancelBubble</b> is set, too. Conversely, canceling the bubble of an event doesn't cancel its default action.</p>
<p>
In the last example, we saw how you could use event bubbling to apply a common effect to a set of elements. What if you wanted to exclude an element from that effect?</p>
<p>
Simply change the line:</p>
<pre><code>&lt;span class=Item&gt;Ham&lt;/span&gt;
</code></pre>
<p>
to:</p>
<pre><code>&lt;span class=Item
onmouseover="window.event.cancelBubble = true;" 
onmouseout="window.event.cancelBubble = true;"&gt;
Ham&lt;/span&gt;
</code></pre>
<p>
Now, no matter how many times you move your mouse over "Ham," it will not change style. This is because we cancelled both the onmouseover and onmouseout events; they did not bubble through to the document, so the document was never given the opportunity to handle those events for "Ham."</p>
<h2>Special Considerations</h2>
<p>
At any one time, you can have an onmouseover event only on a single object. This means that in the following case:</p>
<pre><code>&lt;DIV id=MyDiv&gt;
&lt;IMG id=MyImg&gt;
&lt;/DIV&gt;
</code></pre>
<p>
if you were to move your mouse over the IMG element, the order of events would be as follows:</p>
<pre><code>MyDiv:: onmouseover
MyDiv:: onmouseout
MyImg:: onmouseover
</code></pre>
<p>
At times, the author may want to detect when the mouse moves outside a DIV element to perform some special effect. It is not enough to simply trap the onmouseout event. To make this easier, Microsoft Internet Explorer 4.0 indicates the source element (<i>fromElement</i>) and target element (<i>toElement</i>) for the onmouseover and onmouseout events. You can use these properties in combination with the <b>Contains()</b> method to tell when the mouse has moved outside of a region.</p>
<p>
The following example shows the use of these properties and methods.</p>
<pre><code>&lt;html&gt;
&lt;body id=Body&gt;
&lt;div id=OuterDiv style="width: 100px; height: 50px; background: red"
onmouseover="over();" onmouseout="out();"&gt;
&lt;img id=Img1&gt;
&lt;img id=Img2&gt;
&lt;img id=Img3&gt;
&lt;/div&gt;
&lt;script&gt;
function over() {
  var s;
  s = "onmouseover: "+window.event.srcElement.id+" from: "+
window.event.fromElement.id+" to: "+window.event.toElement.id;
  alert(s);
}

function out() {
  var s;
  s = "onmouseout: "+window.event.srcElement.id+" from: "+
window.event.fromElement.id+" to: "+window.event.toElement.id;
  alert(s);

  if (!(OuterDiv.contains(window.event.toElement))) {
 &nbsp;&nbsp;&nbsp; alert("Out Now");
  }
}
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h2>Summary</h2>
<p>
HTML authors can create powerful, easy-to-maintain pages with a very small amount of code by using event bubbling and taking advantage of Microsoft Internet Explorer's ability to generate events on all HTML elements.</p>
<p>
For more information on authoring and developing for Microsoft Internet Explorer 4.0, see the Microsoft Site Builder Network's Internet Explorer 4.0 Technologies pages (<a href="http://www.microsoft.com/workshop/prog/ie4/">http://www.microsoft.com/workshop/prog/ie4/</a>).</p>
</BODY>
</HTML>

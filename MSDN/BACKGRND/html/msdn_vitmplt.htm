<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating Your Own Visual InterDev 1.0 Templates</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_vitmplt"></a>Creating Your Own Visual InterDev 1.0 Templates</h1>
<p>
Delane Hewett<br>
Visual InterDev Program Management, Microsoft Corporation</p>
<p>
March 1997</p>
<h2>Introduction</h2>
<p>
Microsoft® Visual InterDev™ templates give you models for creating various sorts of Web pages. Templates are Hypertext Markup Language (HTML) or Active Server Page (ASP) files constructed so that you can put specific information into a predetermined structure. </p>
<p>
A Visual InterDev template can include HTML layouts, HTML text, and server and/or client side scripting. In addition, you can customize the template by imbedding placeholders (called replaceable parameters or RPs) in it. When you run the Template wizard, these RPs will be replaced with HTML and/or scripting. </p>
<p>
A template can be a single file or a group of up to three associated files. These files can be HTML, an ASP, and/or an ALX (Active Layout). If multiple files are used for a template, they must all have the same name, but will have different file extensions (for example, .htm, .asp, .alx). For example, the following files would belong to a single template named "Home": Home.htm, Home.asp, Home.alx.</p>
<p>
The wizard will display the name only once in the Templates list, but will act on each of the files with the same name. Only one will be opened in the editor at the completion of the wizard, based on the following table.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=56%><b>Combination</b></td>
<td class=label width=44%><b>Open this file</b></td>
</tr>
<tr valign=top>
<td width=56%>ASP, ALX, HTM</td>
<td width=44%>ALX</td>
</tr>
<tr valign=top>
<td width=56%>ASP, HTM</td>
<td width=44%>HTM</td>
</tr>
<tr valign=top>
<td width=56%>HTM, ALX</td>
<td width=44%>ALX</td>
</tr>
<tr valign=top>
<td width=56%>ASP, ALX</td>
<td width=44%>ALX</td>
</tr>
<tr valign=top>
<td width=56%>HTM</td>
<td width=44%>HTM</td>
</tr>
<tr valign=top>
<td width=56%>ASP</td>
<td width=44%>ASP</td>
</tr>
<tr valign=top>
<td width=56%>ALX</td>
<td width=44%>ALX<sup>*</sup></td>
</tr>
</table><br>
<p class=mini>
*A single ALX file may be a template but usually requires an associated HTM file.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The Template Wizard assumes that the HTML or ASP files have the correct object tags in them pointing to the ALX file.</p>
<p>
All will be parsed for replaceable parameters and added to the project.</p>
<h2>Why Use a Multiple-File Template</h2>
<p>
There are two primary scenarios for multiple-file templates. In the first scenario, you combine an HTM file with an Active Layout (ALX) file. In order to use active layout files in web sites, you need an HTM file to store the W3C "Object" tag (pointing to the ALX file) and you need an ALX file to store the ActiveX™ controls and their 2-D placement. Thus, you need two files, HTM and ALX, for your template.</p>
<p>
In the second scenario, you have an HTM file containing an HTML form that you would like processed by an ASP file. Here you would also need two files, this time an HTM and an ASP file.</p>
<h2>Using Replaceable Parameters (RPs) </h2>
<p>
An RP is a placeholder in the template that the Template wizard recognizes as something it needs to replace. As the Template wizard runs, it identifies each RP and, depending on the RP, either prompts the user or takes actions itself. An RP is surrounded by the following delimiters: "<code>&lt;%#</code>" and "<code>#%&gt;</code>". For example, a replaceable parameter might look like this:</p>
<pre><code>&lt;%#This is a Replaceable Parameter#%&gt;</code></pre>
<h3>Which RPs Are Recognized by the Template Wizard?</h3>
<p>
RPs are case insensitive. The following RPs are automatically recognized by the Template wizard.
<ol>
<li>
<code>&lt;%#THEMENAME#%&gt;</code><br><br></li>
<li>
<code>&lt;%#DATACONNECTION#%&gt;</code><br><br></li>
<li>
<code>&lt;%#FILENAMEWITHOUTEXTENSION#%&gt;</code><br><br></li>
<li>
<code>&lt;%#FILENAMEWITHEXTENSION#%&gt;</code></li>
</ol>
<h3>Using RPs for Themes</h3>
<p>
The replaceable parameter <code>&lt;%#THEMENAME#%&gt;</code> can be placed anywhere in an HTM or ASP template file. When the Template wizard encounters this RP, it prompts you to select a theme that will be applied to your template. For more information about themes, see <a href="msdn_vitheme.htm">"Creating Your Own Visual InterDev Themes."</a> The following represents an HTML document fragment before and after processing by the wizard. In this example, the user chose a theme named "swamp."</p>
<p>
Before: <code>&lt;A IMG="./images/&lt;%#THEMENAME#%&gt;/rules/rule1.gif"&gt;&lt;/A&gt;</code></p>
<p>
After: <code>&lt;A IMG="./images/swamp/rules/rule1.gif"&gt;&lt;/A&gt;</code></p>
<p>
No matter how many times the ThemeName replaceable parameter is found within the template, you will be prompted to choose a theme only once.</p>
<h3>Using RPs for Data Connections</h3>
<p>
The replaceable parameter <code>&lt;%#DATACONNECTION#%&gt;</code> can be placed in any ASP file. This RP is used by the wizard to allow selection of an existing project Data Connection. The user is prompted with a list of existing Data Connections to choose from.</p>
<h3>Using RPs for File Names</h3>
<p>
The replaceable parameters <code>&lt;%#FILENAMEWITHEXTENSION#%&gt;</code> and <code>&lt;%#FILENAMEWITHOUTEXTENSION#%&gt;</code> are used to insert the template’s file name into the document created by the template. You can specify the file name with or without the file extension. </p>
<h3>Defining Your Own Replaceable Parameters</h3>
<p>
If an RP is not known to the Template wizard, the wizard assumes that it is a user-defined RP and prompts you for the substitution string. The following example illustrates the use of a user-defined RP intended to collect the user’s e-mail alias:</p>
<pre><code>&lt;H5&gt;Send mail to &lt;A HREF="MAILTO:&lt;%#Enter your Email alias here:#%&gt;"&gt; &lt;%# Enter your Email alias here:#%&gt;&lt;/A&gt;&lt;/H5&gt;
</code></pre>
<p>
If the user types "someone@microsoft.com" in the prompt, the file would contain the following text:</p>
<pre><code>&lt;H5&gt;Send mail to &lt;A HREF="MAILTO:someone@microsoft.com"&gt;someone@microsoft.com&lt;/A&gt;&lt;/H5&gt;
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The maximum text length is 100 characters.</p>
<h2>Template Locations</h2>
<p>
If you chose the Typical Setup option during installation, templates are stored in a directory called "Templates" under the install directory for Visual InterDev. To change the default directory:
<ul type=disc>
<li>
Open the registry to the following node: <p class=tl>
[HKEY_CURRENT_USER\\Software\Microsoft\DevStudio\5.0\Directories]</P></li>
<li>
Change the value of TemplateDir to the new default directory. For example, the following setting indicates a new default directory of \\Server\Share\MyTemplates: <p class=tl>
[HKEY_CURRENT_USER\\Software\Microsoft\DevStudio\5.0\Directories]</P><p class=tl>
"TemplateDir" = "\\Server\Share\MyTemplates" </P></li>
</ul>
<h2>Static Files Referenced in Templates</h2>
<p>
Static files, such as inline images, referenced in a template through relative URLs (for example, /images/arrows/arrow1.gif) will be imported into the project maintaining the path to their relative locations. If the static file is not contained in a directory under the template in the file system, then the file will be copied to the Images directory of the project. The link in the template file will be modified to reference the static file in its new relative position. Static files referenced through absolute URLs (for example, http://myserver/myshare/images/arrow1.gif) are not added to the project.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Visual FoxPro Object Model</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_vfp_objm"></a>The Visual FoxPro Object Model</h1>
<p>
Excerpted from <i>The Visual FoxPro 3 Codebook</i>, by Y. Alan Griver</p>
<p>
July 7, 1995</p>
<h2>Introduction</h2>
<p>
The Microsoft ®Visual FoxPro® object model is based on a strong foundation of object-oriented principles. User-defined classes, protected class members, inheritance—everything you would expect to find in a robust object model. The model includes a set of built-in classes that you use as a basis for creating your own classes. These built-in classes are called <i>base classes</i>.</p>
<p>
Base classes are grouped into controls and containers. The difference between the two is that a container can include other controls or even other containers, while a control cannot. (The "control" control is somewhat of an exception to this rule, since it allows us to refer to multiple controls as if they were one control.) A good example of a container is a form that contains a group of text boxes. The form is referred to as the <i>parent</i>, while the text boxes are referred to as <i>children</i> (or <i>child controls</i>). </p>
<p>
Here is the current list of base classes:</p>
<table border=1 cellpadding=5 cols=4 frame=below rules=rows>
<tr valign=top>
<td class=label width=14%><b>Non-Visual</b></td>
<td class=label width=36%><b><br>
Controls</b></td>
<td class=label width=14%><b>Non-Visual</b></td>
<td class=label width=36%><b><br>
Containers</b></td>
</tr>
<tr valign=top>
<td width=14%></td>
<td width=36%>CheckBox</td>
<td width=14%></td>
<td width=36%>Container</td>
</tr>
<tr valign=top>
<td width=14%></td>
<td width=36%>ComboBox</td>
<td width=14%>X</td>
<td width=36%>FormSet</td>
</tr>
<tr valign=top>
<td width=14%></td>
<td width=36%>CommandButton</td>
<td width=14%></td>
<td width=36%>Form</td>
</tr>
<tr valign=top>
<td width=14%></td>
<td width=36%>Control</td>
<td width=14%></td>
<td width=36%>Grid</td>
</tr>
<tr valign=top>
<td width=14%>X</td>
<td width=36%>Custom</td>
<td width=14%></td>
<td width=36%>Column</td>
</tr>
<tr valign=top>
<td width=14%></td>
<td width=36%>EditBox</td>
<td width=14%>X</td>
<td width=36%>PageFrame</td>
</tr>
<tr valign=top>
<td width=14%></td>
<td width=36%>Header</td>
<td width=14%></td>
<td width=36%>Page</td>
</tr>
<tr valign=top>
<td width=14%></td>
<td width=36%>Image</td>
<td width=14%></td>
<td width=36%>ToolBar</td>
</tr>
<tr valign=top>
<td width=14%></td>
<td width=36%>Label</td>
<td width=14%></td>
<td width=36%>OptionButtonGroup</td>
</tr>
<tr valign=top>
<td width=14%></td>
<td width=36%>Line</td>
<td width=14%></td>
<td width=36%>CommandButtonGroup</td>
</tr>
<tr valign=top>
<td width=14%></td>
<td width=36%>ListBox</td>
<td width=14%></td>
<td width=36%></td>
</tr>
<tr valign=top>
<td width=14%></td>
<td width=36%>Shape</td>
<td width=14%></td>
<td width=36%></td>
</tr>
<tr valign=top>
<td width=14%></td>
<td width=36%>Spinner</td>
<td width=14%></td>
<td width=36%></td>
</tr>
<tr valign=top>
<td width=14%></td>
<td width=36%>TextBox</td>
<td width=14%></td>
<td width=36%></td>
</tr>
<tr valign=top>
<td width=14%>X</td>
<td width=36%>Timer</td>
<td width=14%></td>
<td width=36%></td>
</tr>
</table><br>
<h2>Base Class Properties</h2>
<p>
An object has properties, which are used to describe the object or hold values that represent the object's state. All Visual FoxPro base classes share a common minimum set of properties:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Property</b></td>
<td class=label width=75%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=25%>Class</td>
<td width=75%>The name of the object's class</td>
</tr>
<tr valign=top>
<td width=25%>BaseClass</td>
<td width=75%>The name of the object's base class</td>
</tr>
<tr valign=top>
<td width=25%>ClassLibrary</td>
<td width=75%>The full path of the class library where this class is defined</td>
</tr>
<tr valign=top>
<td width=25%>ParentClass</td>
<td width=75%>The name of the class of the object's parent class</td>
</tr>
</table><br>
<p>
You are free to add custom properties to any new class you create. I'll show you how in just a moment. </p>
<h2>Base Class Events and Event Methods</h2>
<p>
Most objects also exhibit some kind of behavior in the form of methods. In Visual FoxPro, an object can also respond to events that occur in the system. For example, when the user clicks a command button, Visual FoxPro invokes the <b>Click</b> event. You can place code in a command button's <b>Click()</b> event method that will automatically run whenever the button is clicked. </p>
<p>
All Visual FoxPro base classes can respond to a common minimum set of events:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=19%><b>Event</b></td>
<td class=label width=81%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=19%>Init</td>
<td width=81%>Invoked when the object is created</td>
</tr>
<tr valign=top>
<td width=19%>Destroy</td>
<td width=81%>Invoked when the object is released</td>
</tr>
<tr valign=top>
<td width=19%>Error</td>
<td width=81%>Invoked when an error occurs inside one of the object's methods</td>
</tr>
</table><br>
<h2>Class Definition Syntax</h2>
<p>
While it's possible (and probably more desirable) to create all your classes, including non-visual ones with the Class Designer, it's easier and more straightforward in a chapter of this nature to demonstrate the features of the language in code. The code that follows can be typed directly into a PRG. Just be sure to place the <b>CREATEOBJECT() </b>function calls <i>before</i> any class definitions!</p>
<p>
When creating new classes, we use the new <b>DEFINE CLASS</b> command:</p>
<pre><code>DEFINE CLASS MaintenanceForm AS Form
ENDDEFINE

DEFINE CLASS Transaction AS Custom
ENDDEFINE
</code></pre>
<p>
These statements create new classes based on Visual FoxPro's built-in classes. More precisely, we are subclassing a Visual FoxPro base class. Through the power of inheritance, we automatically inherit any properties and methods defined in the class that we are subclassing, and thus can treat them as if they were actual members of our new classes:</p>
<pre><code>*-- Create an instance of the Transaction class and print the
*-- value of the Class property.
oCreditCardTransaction = CREATEOBJECT("Transaction")
? oCreditCardTransaction.Class&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; Prints "Transaction" on screen
</code></pre>
<p>
Let's modify our transaction class definition to show how the <b>Init()</b> and <b>Destroy()</b> event methods work:</p>
<pre><code>DEFINE CLASS Transaction AS Custom
  FUNCTION Init()
 &nbsp;&nbsp; WAIT WINDOW "Creating object"
  ENDFUNC

  FUNCTION Destroy()
 &nbsp;&nbsp; WAIT WINDOW "Destroying object"
  ENDFUNC
ENDDEFINE
</code></pre>
<p>
The <b>Init</b> event is invoked by Visual FoxPro whenever an object is created. The <b>Init</b> event causes code defined in the <b>Init()</b> event method to be executed. The generic object-oriented term for this type of event method is <i>constructor</i>. It is commonly used to initialize properties of the object, or to ensure that the environment is correctly set up before the object is used. </p>
<p>
The <b>Destroy</b> event is invoked by Visual FoxPro whenever an object is destroyed. The <b>Destroy</b> event causes code defined in the <b>Destroy()</b> event method to be executed. The generic object-oriented term for this type of event method is <i>destructor</i>. It is commonly used to clean up the environment when an object is being released.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you looked carefully, you might have noticed the empty parentheses after the method name. This is not an error. In fact, instead of using the PARAMETERS statement (or, more accurately, LPARAMETERS) you can now define parameters within parentheses immediately after the method name. The empty parentheses are a matter of coding style and are strictly optional.</p>
<h2>Creating Instances</h2>
<p>
As you may have already guessed, the syntax for creating an instance of a class is:</p>
<pre><code>oObjectReference = CREATEOBJECT(cClassName)
</code></pre>
<p>
The <b>CREATEOBJECT()</b> function accepts a class name as a parameter and returns a reference to an object. This object reference is really just a memory variable with a data type of "O", which stands for object. Variables that represent objects function are very similar to other types of variables. For example, it is perfectly legal, although not good programming practice, to assign a value of a different data type to a variable that represents an object:</p>
<pre><code>oTransaction = CREATEOBJECT("Transaction")
oTransaction = "A line of text"&nbsp;&nbsp;&nbsp; &amp;&amp; an object is just a variable
</code></pre>
<p>
Note that when passing objects as parameters to a function or method, the object is always passed by reference, never by value. Also, when assigning an object to another memory variable, the new variable is a reference to the same object. </p>
<pre><code>*-- Both oTransaction2 and oTransaction refer to the same
*-- object in memory
oTransaction2 = oTransaction
</code></pre>
<h2>Releasing Instances</h2>
<p>
You can release an object the same way you release a memory variable:</p>
<pre><code>RELEASE oTransaction
</code></pre>
<p>
When you release an object, its <b>Destroy</b> event is fired, and any code defined in the <b>Destroy()</b> event method is executed. It's important to note that the object remains in memory until <i>all</i> references to it have been released.</p>
<h2>Subclassing User-Defined Classes</h2>
<p>
Not only does Visual FoxPro allow you to create new classes based on the built-in base classes, but you can also create new classes based on your own user-defined classes. For example:</p>
<pre><code>DEFINE CLASS BaseForm AS Form
ENDDEFINE

DEFINE CLASS MaintenanceForm AS BaseForm
ENDDEFINE
</code></pre>
<p>
Here we first define a new form class called <i>BaseForm</i>, and then use that form class as the basis for yet another new form class, <i>MaintenanceForm</i>. If we wish, we could create a new class based on the <i>MaintenanceForm</i> class, and then create a new class on that, and so on. I would recommend keeping the class hierarchy depth as "shallow" as possible, without placing a specific number on just how deep to go. Use your best judgment. </p>
<h2>We Pause for a Look at Our Dictionary&nbsp;.&nbsp;.&nbsp;.</h2>
<p>
Before we get too deep into a sea of terminology, let's pause for a moment to examine some terms.</p>
<p>
In past articles, we defined the term "superclass," which refers to any class that is being used as the basis for creating other classes. You may have seen other object-oriented texts refer to a superclass as a "base class." In fact, this is acceptable terminology. However, it is important to understand that Visual FoxPro uses the term "base class" to refer to its own built-in class hierarchy, <i>not</i> to an arbitrary superclass that you create.</p>
<p>
Visual FoxPro uses the term "parent class" to mean exactly the same thing as "superclass." This is unfortunate because it seems that most other object-oriented products and literature have standardized on the term "superclass."&nbsp; Additionally, Visual FoxPro uses the term "parent" to refer to an object that contains other objects. It can get confusing when trying to talk about the class of an object's parent vs. an object's parent class—they are not the same thing. </p>
<p>
I bring up this issue of terminology to help you avoid confusion when discussing object-oriented topics with your associates, or when reading a non–language-specific, object-oriented book or article. Just remember that in generic, object-oriented terms, "base class," "superclass," and "parent class" all mean the same thing. But remember that a "base class" is just a "parent class" that has special meaning in Visual FoxPro, and that "superclass" and "parent class" mean exactly the same thing, but "parent class" is preferred. </p>
<h2>Back to Your Regularly Scheduled Object Model&nbsp;.&nbsp;.&nbsp;.</h2>
<p>
So how do we add custom properties to our classes? Here's the syntax:</p>
<pre><code>DEFINE CLASS Customer AS Custom
  *-- Custom property definitions
  cName = "Ivar Jacobsen"
  nAge = 40
  lHasMethodology = .T.

  *-- Method definitions follow
ENDDEFINE
</code></pre>
<p>
Basically, custom properties are defined before any method code for that class. You could also use this space to initialize built-in properties:</p>
<pre><code>DEFINE CLASS MyForm AS Form
  Caption = "My Form"
  AutoCenter = .T.
  BorderStyle = 2
ENDDEFINE
</code></pre>
<p>
Note that if you need to initialize a property to the result of an expression or UDF, you'll have to do this in the <b>Init()</b> event method for the class:</p>
<pre><code>DEFINE CLASS Table AS Custom
  cFullName = ""

  FUNCTION Init()
 &nbsp;&nbsp; this.cFullName = DBF()
  ENDFUNC
ENDDEFINE
</code></pre>
<h2>What's THIS All About?</h2>
<p>
In the <b>Init()</b> event method of the above example, I used the new <b>this</b> keyword to refer to the property of the class. Visual FoxPro has added this keyword, along with the <b>thisform</b> and <b>thisformset</b> keywords, to provide access to properties or methods that are scoped to the class, form, or formset, respectively. The following table illustrates this concept further:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=19%><b>Keyword</b></td>
<td class=label width=81%><b>Meaning</b></td>
</tr>
<tr valign=top>
<td width=19%>this</td>
<td width=81%>Used in method code to refer to a property or method of the current class. </td>
</tr>
<tr valign=top>
<td width=19%>thisform</td>
<td width=81%>Used in method code in a form to refer to a property or method of the current form. Can be used from anywhere within that form, including methods of controls on that form.</td>
</tr>
<tr valign=top>
<td width=19%>thisformset</td>
<td width=81%>Used in method code in a formset to refer to a property or method of the current formset. Can be used anywhere within that formset, including methods of forms contained within that formset, or controls contained on any form in the formset. </td>
</tr>
</table><br>
<h2>What About Protection?</h2>
<p>
<i>Encapsulation</i> is the ability to bind both data and functions (or procedures) to a class. What if you have a situation where you have defined properties or methods for a class that you do not want to be accessed directly using the <i>object.Property</i> or <i>object.Method()</i> syntax? Like any robust object model, Visual FoxPro allows you to do this through the PROTECTED keyword. </p>
<pre><code>DEFINE CLASS Customer AS Custom
  PROTECTED cName

  PROTECTED FUNCTION ChangeName(tcNewName)
 &nbsp;&nbsp; this.cName = tcNewName
  ENDFUNC
ENDDEFINE
</code></pre>
<p>
If we instantiate an instance of class <i>Customer</i>:</p>
<pre><code>oCustomer = CREATEOBJECT("Customer")
</code></pre>
<p>
and attempt to access either the protected property or method of that class, we will get an error:</p>
<pre><code>oCustomer.cName = "Grady Booc"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; Error!
oCustomer.ChangeName"Grady Booc")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; Error!
</code></pre>
<p>
Why would you want to protect class members? Let's assume that certain properties of a class represented an object's state. If you couldn't prevent those properties from being accessed directly from outside the class, how could you ever guarantee the state of that object? If you protect the property, you could then create a custom method that would be used to assign values to that property. The method could contain validation code to ensure that the value is set properly. Since the property value is assigned in just one place, the code becomes much easier to debug and maintain. </p>
<p>
Another reason for having the ability to protect members of a class is when you have utility methods that serve a particular purpose for a specific class, but are not meant to be called from outside that class. Leaving those methods unprotected could have disastrous results!</p>
<h2>Add Those Objects!</h2>
<p>
A property of a class is not limited to being just a simple variable; it can also be an object of another class. For example, if you want to add a command button to a form in code, you would use the following syntax:</p>
<pre><code>DEFINE CLASS MyForm AS Form
  ADD OBJECT oCommandButton AS CommandButton
ENDDEFINE
</code></pre>
<p>
Once you create an instance of this form, you could then refer to the <i>oCommandButton</i> just as you would refer to a normal property:</p>
<pre><code>oMyForm = CREATEOBJECT("MyForm")
? oMyForm.oCommandButton.Caption&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; Prints the button's caption 
</code></pre>
<p>
The form is now considered the parent of the command button. In fact, the form can be accessed by referencing the command button's <b>Parent</b> property. From the <b>Click()</b> event method of the command button:</p>
<pre><code>WAIT WINDOW this.Parent.Caption&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; Print the form's caption 
</code></pre>
<h2>Conclusion</h2>
<p>
The Visual FoxPro object model is based on a solid foundation of object-oriented concepts that have been in place for years. As a result, developers will be able to create more complex applications that are easier to debug, easier to maintain, and meet user requirements more closely than ever before. </p>
<h2>Acknowledgements</h2>
<p>
This article is excerpted from <i>The Visual FoxPro 3 Codebook</i>, by Y. Alan Griver, ISBN 0-7821-1648-5, 1995 SYBEX Inc., with the permission of SYBEX Inc. All rights reserved. We acknowledge the help of Flash Creative Management, Inc., Hackensack, NJ, in providing this material.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Calling Microsoft Transaction Server Components</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_calling"></a>Calling Microsoft Transaction Server Components</h1>
<p>
Microsoft Corporation</p>
<p>
June 1997</p>
<h2>Abstract</h2>
<p>
This article covers:
<ul type=disc>
<li>
Calling Microsoft® Transaction Server (MTS) components using DCOM<br><br></li>
<li>
Calling MTS components from an Active Server Page<br><br></li>
<li>
Calling MTS components from a Web browser–resident component</li>
</ul>
<h2>Calling Microsoft Transaction Server Components from a Client Application</h2>
<p>
MTS components can be located on a different computer than the client. A client can call a remote MTS component using DCOM, HTTP, or Remote Automation. To run an MTS component on the client computer, the client computer must have MTS installed.</p>
<p>
<img src="calling1.gif" border=0></p>
<h2>Calling Microsoft Transaction Server Components through DCOM</h2>
<p>
DCOM is the standard transport for calling MTS components. To enable DCOM calls to MTS components, you must configure the following:
<ul type=disc>
<li>
<b>Client Registry Settings</b>—The easiest way to configure your client application to call a remote MTS component is to use the Client Install Utility, which automatically configures client registry settings. See <a href="msdn_deploy.htm">'Automating Microsoft Transaction Server Deployment'</a> to learn how to use the MTS Explorer to automatically generate application executables that configure a client to access a remote server application.<br><br></li>
<li>
<b>DCOM Security Settings</b>—You may have to configure the impersonation level and authentication level on both client and server computers. MTS works properly using the default values for these settings: <b>Identify</b> for impersonation level and <b>Connect</b> for authentication level. Changing default settings by using the DCOM configuration utility (dcomcnfg) is not recommended, but rather you should make the necessary changes in the MTS Explorer at the package level.</li>
</ul>
<p>
If you want to use Microsoft Windows® 95-based clients with MTS, install DCOM for Windows 95. For the latest information on DCOM support for Windows 95, see <a href="http://www.microsoft.com/oledev">http://www.microsoft.com/oledev</a>.</p>
<h3>Calling Microsoft Transaction Server Components through Remote Automation</h3>
<p>
Remote Automation was introduced with Visual Basic® version 4.0, before the introduction of DCOM. It is useful for 16-bit clients, because DCOM is 32-bit only. To use Remote Automation with MTS, the Remote Automation Manager (RACMAN) must be running on the server where the MTS components are installed. For more information, see the Visual Basic documentation.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;MTS security is not usable with Remote Automation since all calls are made using the RACMAN identity. Because RACMAN does not impersonate when calling the components on the server, the client identity cannot be determined.</p>
<h3>Calling Microsoft Transaction Server Components through HTTP</h3>
<p>
There are two ways a client can call an MTS component through HTTP:
<ul type=disc>
<li>
Call an Active Server Page (ASP), which in turn calls the MTS component using DCOM.<br><br></li>
<li>
Call the MTS component from a Web browser–resident component. This is done using the Advanced Data Connector (ADC) (see <a href="http://www.microsoft.com/adc">http://www.microsoft.com/adc</a> for more information), which in turn uses HTTP.</li>
</ul>
<h2>Calling Microsoft Transaction Server Components from an Active Server Page</h2>
<p>
You can call MTS components from Active Server Pages (ASPs). You can create an MTS object from an ASP by calling <b>Server.CreateObject</b>. Note that if the MTS component has implemented the <b>OnStartPage</b> and <b>OnEndPage</b> methods, the <b>OnStartPage</b> method is called at this time.</p>
<p>
You can run your MTS components in-process or out-of-process with Internet Information Server (IIS). If you run your MTS components in-process with IIS, however, be aware that, if MTS encounters an unexpected internal error condition or an unhandled application error (a general-protection fault inside a component method call), it immediately results in a failfast, thus terminating the process, including IIS.</p>
<p>
By default, IIS 3.0 disables calling out-of-process components. To enable calling out-of-process components, modify the following registry entry:</p>
<p>
<b>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W3SVC\ASP\Parameters</b></p>
<p>
Set the <b>AllowOutOfProcCmpnts</b> key to 1.</p>
<h2>Calling Microsoft Transaction Server Components from a Web Browser–Resident Component</h2>
<p>
You can call an MTS component from a Web browser–resident component. Use the client install utility to configure that client, and then use the HTML &lt;OBJECT&gt; tag to call that component. You can also use the &lt;OBJECT&gt; tag to create an MTS object in-process with the browser client. Remember that MTS must be installed on the client computer for an MTS component to run in-process.</p>
<p>
The component should be made safe for scripting, either through a component category entry in the registry, or by supporting the <b>IObjectSafety</b> interface. See the ActiveX™ SDK documentation for more details (on the Library at SDK Documentation, COM and ActiveX Object Services).</p>
<p>
Microsoft Advanced Data Connector (ADC) also allows you to create Web browser–resident components using the &lt;OBJECT&gt; tag. ADC supports the following:
<ul type=disc>
<li>
HTTP<br><br></li>
<li>
HTTPS (HTTP over Secure Socket Layer)<br><br></li>
<li>
DCOM<br><br></li>
<li>
In-process server</li>
</ul>
<p>
Except for in-process objects, the <b>CreateObject</b> method of the <b>AdvancedDataSpace</b> object creates a proxy for the MTS object, which is actually running in a local or remote server process.</p>
<p>
You must configure the following registry key to the <b>Prog ID</b> of the object that you want to call:</p>
<p>
<b>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W3SVC\Parameters\ADCLaunch</b></p>
</BODY>
</HTML>

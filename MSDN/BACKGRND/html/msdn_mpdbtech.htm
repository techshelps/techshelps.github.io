<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Road Map of Database Technologies</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_mpdbtech"></a>Road Map of Database Technologies</h1>
<p>
Mark Gendron<br>
Microsoft Developer Network Technology Group</p>
<p>
August 15, 1996</p>
<h2>Abstract</h2>
<p>
Microsoft offers a wide (and often confusing) array of technologies for accessing data sources from your application. This article attempts to put the various technologies in perspective, describing how they fit vis-à-vis one another, and what their capabilities are.</p>
<p>
The technologies covered in this article include the following:
<ul type=disc>
<li>
DBLIB<br><br></li>
<li>
ODBC<br><br></li>
<li>
Microsoft Jet<br><br></li>
<li>
Data Access Objects (DAO)<br><br></li>
<li>
Data Control<br><br></li>
<li>
Remote Data Objects (RDO)<br><br></li>
<li>
RemoteData Control<br><br></li>
<li>
SQL DMO (Data Maintenance Objects)<br><br></li>
<li>
OLE DB</li>
</ul>
<p>
This is a working document and it will be expanded from time to time. New database technologies will be included in this document as more information about them becomes available. </p>
<h2>DBLIB</h2>
<p>
The venerable DBLIB is implemented as an application programming interface (API), and is the "native" protocol for connecting an application to Microsoft® SQL Server. Because callback functions are required to handle messages and errors returned by Microsoft SQL Server, a custom control (VBSQL) is available to implement DBLIB in Visual Basic® applications. Both 16-bit and 32-bit versions of the VBSQL custom control are currently available. </p>
<p>
Use of DBLIB has declined somewhat since the introduction of ODBC and other methods for accessing Microsoft SQL Server. DBLIB may still be the right choice where every last bit of performance must be squeezed from a system. This advantage has become less significant than it once was, as other data access methods (notably ODBC) have become more efficient. </p>
<p>
Because it is implemented as an API, DBLIB is more difficult to develop with than newer data access methods such as Data Access Objects (DAO) or Remote Data Objects (RDO). Because DBLIB is compatible only with Microsoft SQL Server, code written using DBLIB cannot be easily leveraged to work with other database products. </p>
<h2>ODBC</h2>
<p>
Open Database Connectivity (ODBC) is a standard protocol that allows applications to use Structured Query Language (SQL) to communicate with any external data source for which an ODBC driver is available. ODBC is implemented as an API, and experienced DBLIB developers will find many of its functions quite familiar. </p>
<p>
Although applications developers can program directly to the ODBC API, ODBC is also commonly used as a foundation upon which other data access tools are built. For example, both the Remote Data Controls and the Remote Data Objects are built on ODBC. ODBC may be used by Microsoft Jet for accessing external data sources. </p>
<p>
ODBC defines three conformance levels: the Core API, Level 1 API, and Level 2 API. ODBC drivers should support the Core API functions, which do the following: 
<ul type=disc>
<li>
Allocate and free environment, connection, and statement handles.<br><br></li>
<li>
Connect to data sources.<br><br></li>
<li>
Use multiple statements on a connection. <br><br></li>
<li>
Prepare and execute SQL statements.<br><br></li>
<li>
Execute SQL statements immediately. <br><br></li>
<li>
Assign storage for parameters in an SQL statement and result columns. <br><br></li>
<li>
Retrieve data from a result set.<br><br></li>
<li>
Retrieve information about a result set. <br><br></li>
<li>
Commit or roll back transactions. <br><br></li>
<li>
Retrieve error information. </li>
</ul>
<p>
Ideally, an ODBC driver should also support the Level 1 API functions, which will make the driver compatible with most ODBC applications. In addition to the Core API functions listed above, the Level 1 API does the following: 
<ul type=disc>
<li>
Connect to data sources with driver-specific dialog boxes. <br><br></li>
<li>
Set and inquire about values of statement and connection options. <br><br></li>
<li>
Send part or all of a parameter value (useful for long data). <br><br></li>
<li>
Retrieve part or all of a result column value (useful for long data). <br><br></li>
<li>
Retrieve catalog information (columns, special columns, statistics, and tables). <br><br></li>
<li>
Retrieve information about driver and data source capabilities, such as supported data types, scalar functions, and ODBC functions. </li>
</ul>
<p>
The Level 2 API includes advanced features, including arrays of parameters and scrollable cursors. </p>
<h2>Microsoft Jet</h2>
<p>
The Microsoft Jet database engine is the data manager on which Microsoft Access is built. Jet databases may be manipulated via the following technologies: 
<ul type=disc>
<li>
Microsoft Access development environment and run-time modules. <br><br></li>
<li>
The Visual Basic Data Manager add-in. <br><br></li>
<li>
Visual Basic Data Access Objects (DAO) and Data Control. <br><br></li>
<li>
Visual Basic Remote Data Objects and Remote Data Control. </li>
</ul>
<p>
The Jet database engine includes a query processor, which may be circumvented in favor of a query processor built into an ODBC driver or a database management system (DBMS). For example, queries to an .MDB file will use the Jet query processor to parse and execute the query. Queries submitted by the Visual Basic Data Objects may be designated as a "SQL Passthrough" query. This causes the Jet query processor to be bypassed, although the recordset processor is still used to manage any results returned by the query. Note that DAO 3.1 and later versions can submit queries to external databases via ODBC without invoking Jet at all. </p>
<h2>Data Access Objects (DAO)</h2>
<p>
Data Access Objects (DAO) is a set of objects that enable OLE Automation clients to access data in Jet databases or ODBC data sources. Data Access Objects are used by Microsoft Access, Visual Basic, and other Microsoft products. </p>
<p>
Data Access Objects are supported by the Visual Basic standard edition and professional edition. The standard edition supports Data Access Objects via the <b>Data</b> control, while the professional edition also permits instantiation of Data Access Objects using the <b>Dim</b> statement.</p>
<p>
DAO version 2.5 is a 16-bit implementation that is shipped with Visual Basic 4.0. The current 32-bit implementation, DAO 3.0, is also shipped with Visual Basic 4.0. DAO 2.5 does not support all of the features of version 3.0, such as replication support. If you need to recompile an older Visual Basic project for 32-bit, and this project uses DAO, you should specify the DAO 2.5/3.0 compatibility library. </p>
<h2>Data Control</h2>
<p>
The Visual Basic <b>Data</b> control takes advantage of Data Access Objects to provide even simpler data access via bound controls. The <b>DBList</b>, <b>DBGrid</b> and <b>DBCombo</b> controls, when bound to a <b>Data</b> control, can provide nearly all DAO functionality without the need to write code. In the Visual Basic standard edition, DAO objects cannot be instantiated using the <b>Dim</b> statement, so the <b>Data</b> control must be used if your application requires data access. </p>
<h2>Remote Data Objects (RDO)</h2>
<p>
If you need to access a remote database (such as Microsoft SQL Server or Oracle) using ODBC, Remote Data Objects (RDO) are your best choice. RDO is available only in the Visual Basic enterprise edition. </p>
<p>
RDO is a very thin object layer built on top of the ODBC API and Driver Manager; RDO also implements some ODBC features that are not available from DAO. Such features include access to the ODBC connection and environment handles, output parameters, and return codes. RDO also allows you to specify which type of cursor (if any) will be used with your results set. This allows you to specify only as much cursor complexity as you require, which can make your application more efficient. You may use client-side or server-side cursors, depending on what your DBMS and ODBC driver support. </p>
<p>
Although RDO will work with any ODBC data source, it is optimized for use with remote databases. RDO is an appropriate choice when you are working with a remote database, or anytime you need to get closer to the ODBC API. </p>
<h2>RemoteData Control</h2>
<p>
The <b>RemoteData</b> control was introduced in the Visual Basic 4.0 enterprise edition. It is similar to the <b>Data</b> control in that it uses Remote Data Objects to enable data-bound controls. The <b>DBList</b>, <b>DBGrid</b>, and <b>DBCombo</b> controls can be bound to the <b>RemoteData</b> Control as well as the <b>Data</b> control. As with DAO, the data-bound controls will provide nearly all RDO functionality without the need to write code. </p>
<h2>SQL DMO (Data Maintenance Objects)</h2>
<p>
Formerly known as SQL OLE, SQL DMO provides an object layer over the Microsoft SQL Server data manipulation language (DML) functions. SQL DMO provides any OLE automation controller with the ability to manipulate the Microsoft SQL Server database objects, such as tables, stored procedures, triggers, views, database properties, and so on. </p>
<p>
A good overview of SQL DMO, titled <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="msdn_dmoovrvw">
</object><a href=JavaScript:alink_1.Click()>"SQL-DMO: What It Is and How to Use It,"</a> can be found on the MSDN Library. </p>
<h2>OLE DB</h2>
<p>
Microsoft's newest data access technology is OLE DB. OLE DB will complement ODBC by allowing all data sources, not just full-fledged databases, to expose their data through a common set of COM interfaces. Data from e-mail, files, spreadsheets, and documents, as well as databases, will be accessible through OLE DB. </p>
<p>
OLE DB recognizes components as <i>service providers</i> and <i>data providers</i>. A data provider is any component that exposes functionality through an OLE DB interface over a native data format. A service provider is an OLE DB component built to add advanced features (such as query processors or report generators) to data providers. </p>
</BODY>
</HTML>

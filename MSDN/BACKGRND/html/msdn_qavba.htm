<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Microsoft Visual Basic for Applications: Q&amp;A</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_qavba"></a>Microsoft Visual Basic for Applications: Q&amp;A</h1>
<p>
Microsoft Corporation</p>
<p>
October 1996</p>
<h3>Contents </h3>
<p>
<a href="#qavbaintro">Introduction</a></p>
<p>
<a href="#qavbabasic">Basic Topics</a></p>
<p>
<a href="#qavbamacro">Microsoft Visual Basic for Applications and Macro Languages</a></p>
<p>
<a href="#qavbaoffice">Microsoft Visual Basic for Applications and Microsoft Office</a></p>
<p>
<a href="#qavbamsvb">Microsoft Visual Basic for Applications and Microsoft Visual Basic</a></p>
<p>
<a href="#qavbavbscript">Microsoft Visual Basic for Applications and Microsoft Visual Basic Scripting Edition</a></p>
<p>
<a href="#qavbaxplatform">Microsoft Visual Basic for Applications Cross-Platform Support</a></p>
<p>
<a href="#qavbaadvanc">Advanced Topics (Developing with Microsoft Visual Basic for Applications)</a></p>
<h2><a name="qavbaintro"></a>Introduction</h2>
<p>
Microsoft® Visual Basic® for Applications, which provides developers with professional-quality development tools for building custom solutions, is a powerful development environment built into the Microsoft Office family of applications. Microsoft Visual Basic for Applications provides an opportunity to learn a single language and use that knowledge across multiple applications. In addition to being part of Microsoft Office, Microsoft Visual Basic for Applications is also a member of the Visual Basic family of languages, which includes the new Visual Basic Scripting Edition for Internet browsers and the Microsoft Visual Basic programming system products.</p>
<p>
Many developers have questions about Microsoft Visual Basic for Applications, including how it differs from macro languages, which applications support Microsoft Visual Basic for Applications, and the relationship of Microsoft Visual Basic for Applications to Visual Basic Scripting Edition and Visual Basic. This informal question and answer sheet is designed to help you understand Visual Basic for Applications and how it provides developers with a leveraged development tool for building robust custom solutions.</p>
<h2><a name="qavbabasic"></a>Basic Topics</h2>
<h4>What is Microsoft Visual Basic for Applications?</h4>
<p>
Microsoft Visual Basic for Applications is the development environment included in several applications within the Microsoft Office family. It comprises the Microsoft Visual Basic for Applications language engine and an integrated development environment (IDE) with a full-featured editor, debugger, and OLE object browser. Extensive context-sensitive help is available for both Microsoft Visual Basic for Applications language syntax and OLE objects such as Automation objects and OLE Controls (OCXs).</p>
<h4>What language features does Microsoft Visual Basic for Applications provide for developers?</h4>
<p>
Microsoft Visual Basic for Applications has all the procedural language features developers expect in a professional development environment. These features include:
<ul type=disc>
<li>
Support for numerous data types including arrays, Boolean, integer, floating point, strings, and Variants for complex data types.<br><br></li>
<li>
Control flow constructs for conditional and looping operations such as <b>IF...THEN...ELSE</b>, <b>FOR...NEXT</b>, <b>WHILE...WEND</b>, and <b>FOR EACH...NEXT</b>.<br><br></li>
<li>
Built-in error handling support.<br><br></li>
<li>
Support for constants including EMPTY, NULL, and user-defined constants.<br><br></li>
<li>
Extensive arithmetic, comparison, and logical operations.<br><br></li>
<li>
Support for referencing OLE objects and calling DLLs.<br><br></li>
<li>
Support for named arguments.</li>
</ul>
<p>
Microsoft Visual Basic for Applications enables developers to learn a single language syntax and development environment, which can then be used across multiple applications, such as Microsoft Excel and Microsoft Project.</p>
<h4>What IDE features does Microsoft Visual Basic for Applications provide for developers?</h4>
<p>
The IDE in Microsoft Visual Basic for Applications includes an editor with support for color-coded syntax, a line continuation character, and immediate syntax checking. Complete debugging facilities are also built into the IDE, including support for setting breakpoints and watches and a call stack trace for modifying and tracking the execution path of an application. An object browser for viewing the properties and methods of OLE objects is also included.</p>
<h4>What information is available for Microsoft Visual Basic for Applications developers?</h4>
<p>
The popularity of Microsoft Visual Basic for Applications and Microsoft Visual Basic has resulted in the creation of a worldwide development community. In addition to Microsoft documentation and product support, there are worldwide developer events and hundreds of books and magazines available in any bookstore. Some of the many resources available to Microsoft Visual Basic for Applications developers include the following:</p>
<h4>Microsoft Information Resources</h4>
<ul type=disc>
<li>
<i>Microsoft Developer Network</i>, a subscription program that provides the most complete and current information to developers using Microsoft Visual Basic for Applications<br><br></li>
<li>
<i>Mastering Microsoft Visual Basic 4.0</i> and <i>Mastering Microsoft Access Programming</i> computer-based training products from Microsoft<br><br></li>
<li>
<i>Microsoft Solutions Development Kit</i>, a CD filled with technical information for developers using Microsoft Visual Basic for Applications</li>
</ul>
<h4>Magazines/Newsletters</h4>
<ul type=disc>
<li>
<i>Visual Basic Programmer's Journal</i>, a monthly technical journal available from Fawcette Technical Publications<br><br></li>
<li>
<i>Access/Visual Basic Advisor Magazine</i>, a monthly technical magazine available from Advisor Publications<br><br></li>
<li>
<i>Microsoft Access Developer's Journal</i> from The Cobb Group<br><br></li>
<li>
<i>Office Developer</i> from Pinnacle Publishing</li>
</ul>
<h4>Books</h4>
<ul type=disc>
<li>
<i>Microsoft Access/Visual Basic Step by Step</i> from Microsoft Press<br><br></li>
<li>
<i>Microsoft Excel/Visual Basic Programmer's Reference, Second Edition</i> and <i>Microsoft Excel/Visual Basic Programmer's Guide</i> from Microsoft Press<br><br></li>
<li>
<i>Microsoft Excel Developer's Kit, Third Edition</i> from Microsoft Press<br><br></li>
<li>
<i>Microsoft Excel/Visual Basic Step by Step</i> from Microsoft Press<br><br></li>
<li>
<i>Special Edition Using Excel Visual Basic for Applications, Second Edition</i> from QUE Corporation<br><br></li>
<li>
<i>Developing Microsoft Excel 95 Solutions with Visual Basic for Applications</i> from Microsoft Press<br><br></li>
<li>
<i>Using Excel Visual Basic for Applications</i> from QUE Corporation<br><br></li>
<li>
<i>Developing Applications with Microsoft Office for Windows® 95</i> from Microsoft Press<br><br></li>
<li>
<i>Microsoft Office Developer's Guide, Second Edition</i> from Sams Publishing<br><br></li>
<li>
<i>Programming Microsoft Office</i> from Sams Publishing<br><br></li>
<li>
<i>Building OLE Applications with Visual Basic 4</i> from QUE Corporation<br><br></li>
<li>
<i>OLE Developer's Guide with Visual Basic for Applications</i> from Sams Publishing<br><br></li>
<li>
<i>Developing Client/Serve Applications with Visual Basic 4</i> from Sams Publishing</li>
</ul>
<h4>Events</h4>
<ul type=disc>
<li>
Microsoft TechEd Conferences held in Los Angeles, Australia, China, France, India, Japan, Korea, and the Taiwan Region<br><br></li>
<li>
Visual Basic Insider's Technical Summits (VBITS) held in New York, San Francisco, Orlando, London, Munich, and Tokyo<br><br></li>
<li>
Microsoft Access/Visual Basic Advisor Conferences held in Chicago, Orlando, and Phoenix</li>
</ul>
<p>
The most up-to-date source for both Microsoft and third-party information for Microsoft Visual Basic for Applications developers is the <i>Microsoft Developer Network Online</i> Web page at http://www.microsoft.com/msdn/.</p>
<h2><a name="qavbamacro"></a>Microsoft Visual Basic for Applications and Macro Languages</h2>
<h4>What is a macro?</h4>
<p>
A macro is a set of actions recorded or written by a user. For example, a user can create a macro that always prints his or her name in bold on a spreadsheet. The user can name it PrintName and then reuse the PrintName macro in any spreadsheet.</p>
<h4>What is a macro language?</h4>
<p>
Macros are written or recorded using a macro language. A macro language includes built-in commands that mimic the functionality available from menus and dialog boxes within an application. Macro languages were originally included in applications such as Microsoft Excel and Lotus 1-2-3. While these languages were powerful enough for simple automation, they were not designed to support development of large-scale custom solutions.</p>
<h4>Why were macro languages not effective for large-scale custom-solution development?</h4>
<p>
Macro languages did not scale to large development efforts for several reasons, including:
<ul type=disc>
<li>
Macro languages were unique in each different application. For example, the Microsoft Excel Macro Language in Microsoft Excel was very different from the macro language included in Microsoft Word. These differences meant that a user had to learn a different macro language for each application. For example, a macro to sort numbers written in the Microsoft Excel Macro Language had to be rewritten if a user wanted to use that same macro in Microsoft Word.<br><br></li>
<li>
Macro languages could only access the "surface-level" capabilities within an application. One of the reasons macro languages were originally created was to enable automation of menu commands within an application. These languages were designed to provide all the capabilities available in the menus of an application, but didn't provide the ability to reuse all the functionality within an application.<br><br></li>
<li>
Macro languages were not built for developers. Macro languages typically included the capability to record, run, and edit macros, but support for even intermediate development efforts did not exist. These languages lacked support for editing, debugging, and viewing objects across applications when attempting to create robust custom solutions.</li>
</ul>
<h4>Why still use the word "macro" when Microsoft Visual Basic for Applications is used?</h4>
<p>
"Development environment" is much more appropriate and frequently used; however, "macro" has meaning for a wide range of users even though Microsoft Visual Basic for Applications provides many benefits over macro languages. These benefits include an integrated development environment that can be leveraged in multiple applications and is scalable across the Microsoft Visual Basic family of tools.</p>
<h4>Do all users need to convert their macros to Microsoft Visual Basic for Applications?</h4>
<p>
No. Users who have working macros do not need to do any work to convert them to Microsoft Visual Basic for Applications. Depending on the application they are using, their macros will either continue to run (as with Microsoft Excel Macro Language in Microsoft Excel) or will be automatically converted to Microsoft Visual Basic for Applications (as with Microsoft Project). Microsoft Access for Windows® 95 users have the choice of continuing to run their existing macros or converting them to Microsoft Visual Basic for Applications.</p>
<h4>How can macros be migrated to Microsoft Visual Basic for Applications?</h4>
<p>
Microsoft Excel is the only application in which macros may need to be migrated, and it provides several tools to make migration easier. First, Microsoft Excel Macro Language macros can call Microsoft Visual Basic for Applications code and vice versa. Second, the macro recorder in Microsoft Excel version 5.0 and later includes an option to record macros in either the Microsoft Excel Macro Language or Microsoft Visual Basic for Applications. Developers can use the macro recorder to learn how Microsoft Excel Macro Language functionality maps to Microsoft Visual Basic for Applications. Finally, the debugging tools in Microsoft Excel provide support for debugging Microsoft Excel Macro Language macros during the migration process.</p>
<h2><a name="qavbaoffice"></a>Microsoft Visual Basic for Applications and Microsoft Office</h2>
<h4>Which Microsoft Office applications currently include Microsoft Visual Basic for Applications?</h4>
<p>
Microsoft Visual Basic for Applications is currently available in the following Microsoft Office family applications: Microsoft Access for Windows 95, Microsoft Excel version 5.0, Microsoft Excel for Windows 95, Microsoft Project version 4.0, and Microsoft Project for Windows 95.</p>
<h4>When will Microsoft Visual Basic for Applications be in all the applications in Microsoft Office?</h4>
<p>
Microsoft Visual Basic for Applications will be included in the entire Microsoft Office family, including Microsoft PowerPoint® and Microsoft Word, with the next release of Microsoft Office.</p>
<h2><a name="qavbamsvb"></a>Microsoft Visual Basic for Applications and Microsoft Visual Basic</h2>
<h4>What is Microsoft Visual Basic?</h4>
<p>
Microsoft Visual Basic is a development environment that enables developers to create standalone applications (.EXE files) using an extensible and advanced forms development environment.</p>
<h4>How is Microsoft Visual Basic related to Microsoft Visual Basic for Applications?</h4>
<p>
Microsoft Visual Basic includes the entire Microsoft Visual Basic for Applications feature set and extends it further. Both tools share the same language engine, but Microsoft Visual Basic provides a superset of the Microsoft Visual Basic for Applications development environment. Microsoft Visual Basic includes many of the Microsoft Visual Basic for Applications IDE elements, including the debugger and object browser, and can also integrate with additional third-party tools such as version control and test utilities. Developers using Microsoft Visual Basic for Applications can integrate OLE objects into a custom solution. Microsoft Visual Basic developers can integrate, create, and distribute OLE objects in a network environment. Finally, Microsoft Visual Basic for Applications must be included or "hosted" within an application such as Microsoft Excel, while Microsoft Visual Basic is a standalone development tool.</p>
<h2><a name="qavbavbscript"></a>Microsoft Visual Basic for Applications and Microsoft Visual Basic Scripting Edition</h2>
<h4>What is Visual Basic Scripting Edition?</h4>
<p>
Visual Basic Scripting Edition is designed to be "hosted" within an Internet browser such as the Microsoft Internet Explorer or other, third-party, browsers. Visual Basic Scripting Edition is a lightweight and extremely fast language engine designed specifically for environments such as the Internet or World Wide Web. Visual Basic Scripting Edition leverages the strengths of Microsoft Visual Basic for Applications and enables developers to use their Microsoft Visual Basic for Applications development knowledge to quickly create solutions for the Internet or World Wide Web.</p>
<p>
Please refer to the <i>Visual Basic Scripting Edition</i> Web site at http://www.microsoft.com/vbscript/ for detailed information.</p>
<h4>How do Visual Basic Scripting Edition and Microsoft Visual Basic for Applications differ?</h4>
<p>
Visual Basic Scripting Edition supports a subset of the Microsoft Visual Basic for Applications language syntax. Visual Basic Scripting Edition does not include an IDE like that found in Microsoft Visual Basic for Applications because it is designed to be a lightweight language engine. Visual Basic Scripting Edition is designed to be embedded in third-party applications such as web browsers, while Microsoft Visual Basic for Applications is delivered as part of host application such as Microsoft Access or Microsoft Excel.</p>
<h4>Are Visual Basic Scripting Edition and Microsoft Visual Basic for Applications compatible?</h4>
<p>
Developers can write Microsoft Visual Basic for Applications code that is backward compatible if they only use Microsoft Visual Basic for Applications language features that are supported in Visual Basic Scripting Edition. A complete listing of Microsoft Visual Basic for Applications features supported in Visual Basic Scripting Edition is included on the <i>Microsoft Visual Basic Scripting Edition</i> Web page.</p>
<h2><a name="qavbaxplatform"></a>Microsoft Visual Basic for Applications Cross-Platform Support</h2>
<h4>Is Microsoft Visual Basic for Applications available on the Windows NT platform?</h4>
<p>
Yes, Microsoft Access for Windows 95, Microsoft Excel for Windows 95, Microsoft Project for Windows 95, and Microsoft Visual Basic 4.0 all include Microsoft Visual Basic for Applications and run on the Windows NT® version 3.51 or later operating system.</p>
<h4>Is Microsoft Visual Basic for Applications available on the Macintosh platform?</h4>
<p>
Yes, Microsoft Visual Basic for Applications is included in Microsoft Excel 5.0 for the Apple® Macintosh® and Microsoft Project 4.0 for the Macintosh. Future versions of Microsoft Office family applications for the Macintosh will include Microsoft Visual Basic for Applications.</p>
<h2><a name="qavbaadvanc"></a>Advanced Topics (Developing with Microsoft Visual Basic for Applications)</h2>
<h4>Why are application type libraries (.TLB files) important for developers using Microsoft Visual Basic for Applications?</h4>
<p>
A type library defines the set of objects, properties, and methods exposed by an application. For example, Microsoft Excel has a type library describing all of its exposed spreadsheet and chart objects. Microsoft Visual Basic for Applications developers can access these objects in their custom solution, either from within Microsoft Excel or from another application such as Microsoft Access or Microsoft Visual Basic. Type libraries also enable developers to perform <i>early binding</i>, which provides faster, design-time syntax checking of Microsoft Visual Basic for Applications code that refers to these objects.</p>
<h4>Why do developers using Microsoft Visual Basic for Applications get better performance from early binding?</h4>
<p>
Early binding means that checking of references to OLE objects in Microsoft Visual Basic for Applications code is performed once, during design time, rather than during run time (late binding). Early binding is much faster than late binding and is the preferred method. Every Automation application supports late binding, while only some applications support early binding.</p>
<h4>When can developers use early binding?</h4>
<p>
Early binding can be used when the following are true:
<ul type=disc>
<li>
The OLE Automation controller supports early binding. All OLE Automation controllers that use Microsoft Visual Basic for Applications support early binding, including Microsoft Access, Microsoft Excel, Microsoft Project, and Microsoft Visual Basic.<br><br></li>
<li>
The OLE Automation server must have an associated type library. Microsoft Access, Microsoft Excel, Microsoft PowerPoint, Microsoft Office Binder, Microsoft Project, Microsoft SQL Server, Microsoft Word, and the Microsoft Data Access Objects (DAO) interface all have type libraries. The type library must be installed on every desktop that uses that OLE Automation server.<br><br></li>
<li>
The OLE Automation controller has a reference to the type library so it can locate it. Developers can add a reference to a type library using the <b>Reference</b> command on the <b>Tools</b> menu in Microsoft Visual Basic and Microsoft Office family applications.<br><br></li>
<li>
Developers must <i>strongly</i> <i>type</i> all object references in their Microsoft Visual Basic for Applications code. A strongly typed object is one that is created with a specific object type. Developers cannot create objects with object types of Object or Variant when they want to use early binding.</li>
</ul>
<p>
<b>Not strongly typed object examples:</b></p>
<pre><code>Dim MySheet as Object
Dim MyDoc as Variant
</code></pre>
<p>
<b>Strongly typed object examples:</b></p>
<pre><code>Dim MySheet as WorkSheet
Dim MyDoc as WordBasic
</code></pre>
<p>
The last two cases are strongly typed because the object references are created with a specific object type.</p>
<h4>Are there any differences in Microsoft Visual Basic for Applications across Microsoft applications?</h4>
<p>
Microsoft Access for Windows 95, Microsoft Excel for Windows 95, Microsoft Project for Windows 95, and Microsoft Visual Basic 4.0 all use a version of Microsoft Visual Basic for Applications. In order to maintain compatibility with Access Basic and address developer issues in moving to 32 bits, several functions (math, financial, and date), the <b>Byte</b> data type, Windows registry functions, and conditional compilation were added to Visual Basic for Applications in Microsoft Access and Microsoft Visual Basic. This means that there are slight differences between Microsoft Visual Basic for Applications in Microsoft Access and Visual Basic and the version in Microsoft Excel and Microsoft Project. The next version of Microsoft Office will include the same version of Microsoft Visual Basic for Applications across all applications.</p>
<h4>Can Microsoft Visual Basic for Applications code be reused in different applications?</h4>
<p>
Yes. Developers can write code that can be reused across all the applications that include Microsoft Visual Basic for Applications. Developers who want to write portable Microsoft Visual Basic for Applications code must account for the slight differences between Microsoft Visual Basic for Applications implementations discussed previously.</p>
<p>
Developers should also <i>fully declare</i> all object references in their Microsoft Visual Basic for Applications code. Fully declaring an object reference means there is no ambiguity about which object the Microsoft Visual Basic for Applications code refers to. Developers can fully declare an object reference by using both the library (application) name and the object name of the object in the form: &lt;<i>application name</i>&gt;.&lt;<i>object name</i>&gt;.</p>
<p>
<b>Not fully declared object example:</b></p>
<pre><code>Dim MyWorksheet as Worksheet
Dim MyDoc as WordBasic
</code></pre>
<p>
These two examples are not fully declared. Moving either of these lines of code from their original application to another application could produce unexpected results. These problems can be avoided by fully declaring object references as shown below.</p>
<p>
<b>Fully declared object examples:</b></p>
<pre><code>Dim MyWorksheet as Excel.Worksheet
Dim MyDoc as Word.WordBasic
</code></pre>
<p>
In these cases both the library or application name (Microsoft Excel or Word) and the object name (WorkSheet or WordBasic) are used to completely describe the object. There is only one possible object that can be referenced and Microsoft Visual Basic for Applications can immediately locate that object. If the first line of code was moved from Microsoft Excel to Microsoft Project, it would always run correctly since Microsoft Project would know that the reference was to an object within Microsoft Excel.</p>
</BODY>
</HTML>

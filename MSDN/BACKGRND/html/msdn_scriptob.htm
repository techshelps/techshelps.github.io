<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Scriptlets: Reusable Objects for Web Authors</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_scriptob"></a>Scriptlets: Reusable Objects for Web Authors</h1>
<p>
Bob Jervis<br>
Senior program manager, Microsoft Visual Studio group</p>
<p>
September 24, 1994</p>
<p>
With the introduction of scripting languages to the Web, the Internet has been transformed into a dynamic environment supporting sophisticated programming. Particularly with the introduction of Dynamic HTML in Microsoft® Internet Explorer version 4.0, the Web is maturing into the user-interface framework of choice, not only for Web programmers but also for developers of any Microsoft Windows® application.</p>
<p>
Scripting as supported in Netscape Navigator, for example, fails to provide the mechanisms needed to create true components. This omission severely limits the abilities of programmers to share their work, and even costs them in higher numbers of bugs when they try to create large-scale applications employing script.</p>
<p>
Scriptlets, a standard feature of Internet Explorer 4.0, fill the gap and make Internet Explorer 4.0 the target platform of choice for anyone building applications for the Web.</p>
<h2>The Scriptlet Architecture</h2>
<p>
Scriptlets are simply Web pages in which script has been written according to certain conventions. To use them, just insert an &lt;OBJECT&gt; tag into another Web page. The scriptlet is named by any standard Uniform Resource Locator (URL). Internet Explorer 4.0 recognizes a scriptlet by marking the tag as using a MIME type of "text/x-scriptlet". Note that there is no CLSID in the &lt;OBJECT&gt; tag. For example: </p>
<pre><code>&lt;OBJECT width=200 height=123
 &nbsp; TYPE="text/x-scriptlet"&nbsp; DATA="Calendar.htm"&gt;
&lt;/OBJECT&gt;
</code></pre>
<p>
Internet Explorer 4.0 will support this MIME type on all platforms, whether Microsoft Windows-based, Apple® Macintosh® or UNIX. Because of the open nature of the architecture, competing vendors will be able to implement this support as well. There is nothing in the nature of scriptlets that restricts users to Microsoft platforms.</p>
<p>
The functionality of a scriptlet can be written in any scripting language including but not limited to Microsoft JScript™ and Microsoft Visual Basic® Scripting Edition (VBScript).</p>
<p>
While the implementation will have to be modified on other platforms, on the Microsoft Win32® platform, the Scriptlet MIME type exploits new Internet Explorer 4.0 features so that scriptlets use a Component Object Model (COM) object to accomplish their work.</p>
<p>
Because this COM object encapsulates the Hypertext Markup Language (HTML) rendering engine in Internet Explorer 4.0 and hides most of its functionality, it is different from the Web Control object that exposes the rendering engine to its users. Instead, the scriptlet component exposes the interface of the Web page that is loaded.</p>
<p>
This exposure is accomplished by loading the page into the Internet Explorer 4.0 HTML rendering engine and letting it run the page's script normally. Once completely loaded, the scriptlet component is ready to interact with its container. The container in the pure Web case is, of course, Internet Explorer, but any COM container, including a program written in Visual Basic or even Microsoft Word, can insert a scriptlet control just like any other ActiveX™ control.</p>
<p>
The Scriptlet Component bridge layer then acts as a broker, passing requests for properties and methods into the scriptlet and passing events out of it. The bridge also performs certain basic housekeeping functions such as negotiating the size of the scriptlet between the container and the rendering engine.</p>
<h3>Security</h3>
<p>
Scriptlets are as secure as Dynamic HTML and script itself. And a scriptlet recognizes when it is placed in a secure container, such as Internet Explorer, and obeys the security policies of its container.</p>
<p>
In general, to operate correctly, a scriptlet must be loaded from the same Web server as its container page, similar Java applets.</p>
<h2>How to Write a Scriptlet</h2>
<h3>Coding Conventions and Facilities</h3>
<p>
A scriptlet can be either an HTML page or an Active Server Page (ASP). You can use any HTML authoring environment to create a scriptlet, such as Microsoft FrontPage® or Visual InterDev™. Of course, if your environment does not support scripting, you may have to manually insert the scripting code after first composing the HTML display elements within the environment.</p>
<h3>Exposing Simple Properties and Methods</h3>
<p>
A scriptlet exposes only the global variables, procedures and functions that you want. Just use a public_ prefix on any variable or function you want exposed. Any global variable with this prefix becomes a readable and writable property of the scriptlet. Any global function or subroutine with this prefix becomes a public method of the scriptlet. When you refer to the property or method from outside the scriptlet, you do not include the prefix.</p>
<p>
For example, you might declare the following in a scriptlet: </p>
<pre><code>&lt;Script language=jscript&gt;
public_property1 = "Some text";
function public_method1(param1, param2)
{
 &nbsp;&nbsp; ... some code ...
}</code></pre>
<p>
You would then refer to these in your container page script as: </p>
<pre><code>Scriptlet1.property1 = "Some different text";
a = Scriptlet1.method1(2, "Still more text");
</code></pre>
<h4>Events</h4>
<p>
Scriptlets can throw two kinds of events: onscriptletevent events and standard window events. The first can be thrown at any time inside the scriptlet. Standard window events, such as mouse clicks, cannot be initiated arbitrarily by a scriptlet, but can be thrown in certain circumstances described below.</p>
<p>
Scriptlets are considerably more dynamic in nature than traditional programs running on the Microsoft Windows operating system. So the development tools are not prepared to understand event types known only after the scriptlet has been loaded and parsed. For this reason, scriptlets communicate with their containers through a single type of event: onscriptletevent.</p>
<p>
The onscriptletevent event includes two parameters: a string and an arbitrary object. An event handler can select how to respond, based on the string that is passed. The object parameter can then include additional detail about the event itself.</p>
<p>
The standard window events supported in a scriptlet are thrown by propagating an event from an HTML component in the scriptlet. If you write an event handler within a scriptlet that catches, say, the mouse-click event for some part of the page, you may propagate it through to the scriptlet container. It then appears as a mouse-click event from the scriptlet with the same event detail information that the scriptlet received.</p>
<h4>Context menus</h4>
<p>
You can easily create context menus for your scriptlets. These are popup menus that appear over your component whenever a user right-clicks the mouse while the cursor is over the component. You can have one context menu defined for each scriptlet and can replace the menu at any time.</p>
<p>
To create a context menu, first create an array of strings. Assign the strings in pairs to successive elements of the array. The first element of each pair is the label string that will appear in the context menu; the second is the script function to call within the scriptlet when that menu item is selected. When you have initialized the array, call the function <b>window.external.setContextMenu</b> with the array as its only parameter. The next time a user right-clicks over your component, the context menu will appear.</p>
<p>
An example of creating a context menu: </p>
<pre><code>&lt;script language='vbscript&gt;
sub window_onload
 &nbsp; dim a(6)
 &nbsp; a(0) = "Add &amp;Hello"
 &nbsp; a(1) = "Hello"
 &nbsp; a(2) = "Add &amp;Goodbye"
 &nbsp; a(3) = "Goodbye"
 &nbsp; a(4) = "&amp;About"
 &nbsp; a(5) = "About"
 &nbsp; window.external.setContextMenu(a)
end sub
&lt;/script&gt;
</code></pre>
<h4>Advanced features </h4>
<p>
Properties behave in some ways like a memory location, but often this is not enough. If you have a color property on a component, you want the component to change color as soon as you set the property. Most components need to respond immediately to changes in at least some of their properties.</p>
<p>
To support this, component architectures allow you to define functions that masquerade as the property. Scriptlets are no different. If you define a function with either the prefix <b>public_get_</b> or <b>public_put_</b>, the function acts as if it were supporting a property. For example, the following code shows how functions can be used to implement a property: </p>
<pre><code>&lt;script language=jscript&gt;
property1 = "some text";
property1GetCount = 0;
property1PutCount = 0;
function public_get_property1()
{
 &nbsp; // Keeping track of how many times this is called.
 &nbsp; property1GetCount++;
 &nbsp; // This is the real work.
 &nbsp; return property1;
}
function public_put_property1(new_value)
{
 &nbsp; property1PutCount++;
 &nbsp; property1 = new_value;
 &nbsp; refresh();
}
</code></pre>
<p>
In this example, the number of times each function gets called is recorded. After the new value is set in the put function, the component is refreshed in some way. You would still refer to <b>property1</b> in the container like any other property: </p>
<pre><code>Scriptlet1.property1 = "new text";
a = Scriptlet1.property1;
</code></pre>
<p>
In the first line above, the <b>public_put_property1</b> function is called to store the string. In the second line, the <b>public_get_property1</b> function is called to retrieve it.</p>
<p>
If you are writing in JScript, you have a second option to describe your scriptlet interface. If you define an object with the name public_description in your scriptlet, then its members become the set of named properties and methods exposed to the outside world. The public_ prefix is not used; if you have any global variables or functions with the prefix, they are ignored.</p>
<p>
At present, VBScript does not allow you to create objects as JScript does, but this capability will be available in a future release.</p>
<p>
Which mechanism should be used to define a scriptlet interface? It is largely a matter of style. However, using public_description allows you to describe the scriptlet public interface succinctly in one place, rather than scattering it throughout the scriptlet code.</p>
</BODY>
</HTML>

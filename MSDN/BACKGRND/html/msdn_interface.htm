<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Database Access Interfaces with Microsoft Transaction Server</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_interface"></a>Database Access Interfaces with Microsoft Transaction Server</h1>
<p>
Microsoft Corporation</p>
<p>
June 1997</p>
<h2>Abstract</h2>
<p>
This article describes the database-access interface options for Microsoft® Transaction Server (MTS) applications. </p>
<h2>Using Open Database Connectivity</h2>
<p>
You can use the Open Database Connectivity (ODBC) application programming interface (API) to access a resource manager (which is a system service that manages durable data), or a data-access model that functions over the ODBC layer. Because the ODBC version 3.0 Driver Manager is an MTS resource dispenser, data accessed via ODBC is automatically protected by your object's transaction. To handle object transactions, an ODBC-compliant database must support the following requirements:
<ul type=disc>
<li>
The database's ODBC driver must be thread safe and must operate without thread affinity.<br><br></li>
<li>
If ODBC is used from within a transactional component, then the ODBC driver must also support the SQL_ATTR_ENLIST_IN_DTC connection attribute. This is how the ODBC Driver Manager asks the ODBC driver to enlist a connection on a transaction. You can make your component transactional by setting the transaction property for your component in the MTS Explorer. If you are using a database that does not have a resource dispenser that can recognize MTS transactions, contact your database vendor to obtain the required support.</li>
</ul>
<p class=label>
<b>Database Requirements for Full MTS Support</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=30%><b>Requirements</b></td>
<td class=label width=38%><b>Description</b></td>
<td class=label width=32%><b>Resources (if applicable)</b></td>
</tr>
<tr valign=top>
<td width=30%>Support for the OLE transactions specification, or support for XA protocol</td>
<td width=38%>Enables direct database interaction with Distributed Transaction Coordinator (DTC). Use the XA Mapper to interact with DTC.</td>
<td width=32%>MTS Beta SDK</td>
</tr>
<tr valign=top>
<td width=30%>ODBC driver </td>
<td width=38%>Platform requirement for MTS server components</td>
<td width=32%>ODBC version 3.0 SDK</td>
</tr>
<tr valign=top>
<td width=30%>ODBC driver support for the ODBC version 3.0 SetConnectAttr SQL_ATTR_ENLIST_<br>
IN_DTC call.</td>
<td width=38%>MTS uses this call to pass the transaction identifier to the ODBC driver. The ODBC driver then passes the transaction identifier to the database engine.</td>
<td width=32%>ODBC version 3.0 SDK</td>
</tr>
<tr valign=top>
<td width=30%>Fully thread-safe ODBC driver</td>
<td width=38%>ODBC driver must be able to handle concurrent calls from any thread at any time.</td>
<td width=32%>ODBC version 3.0 SDK</td>
</tr>
<tr valign=top>
<td width=30%>ODBC driver must not require thread affinity</td>
<td width=38%>ODBC driver must be able to connect to the driver from one thread, use the connection from another thread, and disconnect from another thread.</td>
<td width=32%>ODBC version 3.0 SDK</td>
</tr>
</table><br>
<p>
If a memory access violation in the mtx.exe process occurs within the driver after 60 seconds of inactivity, you may be using an ODBC driver that is not thread-safe or requires thread affinity. The fault occurs in the driver when the inactive connections are being disconnected. </p>
<h2>Microsoft Transaction Server Distributed Transaction Coordinator</h2>
<p>
MTS uses the services of Microsoft Distributed Transaction Coordinator (MS DTC) for transaction coordination. MS DTC is a system service that coordinates transactions that span multiple resource managers. Work can be committed as a single transaction, even if it spans multiple resource managers, potentially on separate computers. MS DTC was initially released as part of Microsoft SQL Server™ version 6.5, and is included as part of MTS. DTC implements a two-phase commit protocol that ensures that the transaction outcome (either commit or abort) is consistent across all resource managers involved in a transaction. MS DTC supports resource managers that implement OLE Transactions, X/Open XA protocols, and LU 6.2 Sync Level 2.</p>
<h2>Choosing Your Data-Access Model</h2>
<p>
You can use a variety of different data-access models with your MTS application. The following table summarizes commonly used data-access models supported by MTS.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=26%><b>Interface</b></td>
<td class=label width=74%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=26%>Microsoft ActiveX™ Data Objects (ADO), Advanced Data Connector (ADC)</td>
<td width=74%>ADO offers one common yet extensible programming model for accessing data. ADO includes the ability to pass query results (Recordsets) between server and client, and the ability to pass updated Recordsets from client to server (using ADC).</td>
</tr>
<tr valign=top>
<td width=26%>OLE DB</td>
<td width=74%>OLE DB is a low-level interface that provides uniform access to any tabular data source. You cannot call OLE DB interfaces directly from Microsoft Visual Basic® because OLE DB is a pointer-based interface. A Visual Basic client can access an OLE DB data source through ADO.</td>
</tr>
<tr valign=top>
<td width=26%>Open DataBase Connectivity (ODBC)</td>
<td width=74%>ODBC is a recognized standard interface to relational data sources. ODBC is fast and provides a universal interface that is not optimized for any specific data source.</td>
</tr>
<tr valign=top>
<td width=26%>Remote Data Objects (RDO)</td>
<td width=74%>RDO is a thin object layer interface to the ODBC API. It is specifically designed to access remote ODBC relational data sources. </td>
</tr>
</table><br>
<p>
The following diagram illustrates how MTS components interact with the different data-access interfaces:</p>
<p>
<img src="interface1.gif" border=0></p>
<p>
ADO is not specifically designed for relational or ISAM databases, but as an object interface to <i>any</i> data source. ADO can access relational databases, ISAM, text, hierarchical, or any type of data source, as long as a data-access provider exists. ADO is built around a set of "core" functions that all data sources are expected to implement. ADO is implemented to consume native OLE DB data sources, including a specific OLE DB provider that provides access to ODBC drivers. ADO ships with the OLE DB Software Development Kit (SDK).</p>
<p>
RDO 2.0 does have some functionality that is not currently implemented in ADO 1.0, such as the following features:
<ul type=disc>
<li>
Events on the Engine, Connection, Resultset, and Column objects<br><br></li>
<li>
Asynchronous operations<br><br></li>
<li>
Queries as methods<br><br></li>
<li>
Enhanced batch-mode error and contingency handling<br><br></li>
<li>
Tight integration with Visual Basic, as in the Query Connection designer and TSQL debugger.</li>
</ul>
<p>
Future versions of ADO will provide a superset of RDO version 2.0 functionality and provide a far more sophisticated interface, in addition to an easier programming model. Because ADO is an Automation-based component, any application or language capable of working with Automation objects can use it.</p>
</BODY>
</HTML>

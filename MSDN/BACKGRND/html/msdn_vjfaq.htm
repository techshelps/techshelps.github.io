<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Microsoft Visual J++ Frequently Asked Questions</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_vjfaq"></a>Microsoft Visual J++ Frequently Asked Questions</h1>
<p>
Microsoft Corporation</p>
<p>
Last Updated: December 9, 1997</p>
<h4>What is Visual J++?</h4>
<p>
Microsoft® Visual J++™ version 1.1 is a Microsoft visual Java development environment. Using the same innovative user interface found in Microsoft Visual C++®, Visual J++ includes:
<ul type=disc>
<li>
A visual debugger.<br><br></li>
<li>
Wizards to build applets and ActiveX™ controls.<br><br></li>
<li>
A class viewer for easier comprehension of Java objects.<br><br></li>
<li>
An advanced editor with syntax highlighting.<br><br></li>
<li>
A source-code compiler that translates at a rate over 10,000 lines per second.<br><br></li>
<li>
An online tutorial.<br><br></li>
<li>
The Microsoft Press® book, <i>Learn Java Now.</i><br><br></li>
<li>
Microsoft Internet Explorer with Java support and redistribution rights.<br><br></li>
<li>
An advanced Just-In-Time (JIT) compiler for the fastest applet execution.<br><br></li>
<li>
A Java class hierarchy chart.</li>
</ul>
<p>
Visual J++ is certified as Java Compatible and allows users to build cross-platform applications, with specific optimization for the most common environments, such as Microsoft Windows® 95 and Windows NT® 4.0 operating systems, without affecting portability.</p>
<h4>Can you distinguish the terminology and product names in Java?</h4>
<p>
Confused? There are many terms and product names in the Java world: Java, Virtual Machine (VM), JavaScript, JScript™, and Visual J++, just to name a few. Here's a quick rundown of some of the terms and product names commonly heard in "Java-speak."
<ul type=disc>
<li>
<b>Java versus JavaScript</b><br>
Java is a programming language that produces compiled output called applets. JavaScript is a scripting language that is used in a Hypertext Markup Language (HTML) page. If you view the HTML source for a Web page and you see an applet tag, that tag is pointing to a class file which is the compiled result of Java source code. If, on the other hand, you view the HTML source for a page and you see actual Java code, that is JavaScript. The browser reads the code line-by-line and interprets each line.<br><br></li>
<li>
<b>JavaScript versus JScript</b><br>
JScript is Microsoft's implementation of JavaScript (compatible with Netscape Navigator) which can be run on both the server side and within Microsoft Internet Explorer.<br><br></li>
<li>
<b>Microsoft Virtual Machine (VM) for Java</b><br>
Java source code is compiled to an intermediate "bytecode" which is stored in .class files. These .class files are machine independent. This enables the .class files to be loaded by browsers on many computer platforms. However, because the .class file is not aware of the hardware it will eventually be running on, it needs to go through an interpreter before it can be run. This final stage takes place in the Microsoft Virtual Machine for Java. This is where Java programs are executed.<br><br></li>
<li>
<b>Visual J++<br>
</b>Visual J++ is not a language; it is a development environment for writing Java applets and applications. Why is it called "Visual J++?" Just as Visual C++ was a progressive move for the C language, Visual J++ provides a progressive move for the Java language. Visual J++ is one step better than Java. It's Java plus the Component Object Model (COM). The Visual J++ compiler and Type Library Wizard allow Java programs to access language-independent COM libraries and controls.</li>
</ul>
<h4>Does Visual J++ version 1.1 support the Sun JDK version 1.1?</h4>
<p>
Visual J++ version 1.1 does not include the Sun Java Development Kit (JDK) version 1.1, but it does support many of its features. We didn't include the Sun JDK 1.1 because it was still in beta when we released Visual J++ version 1.1. We don't believe in releasing a retail product with beta code in it. We will provide a new JDK 1.1–compatible compiler as soon as it is available. Many of the features of the Sun JDK 1.1 have been in Visual J++ since version 1.0, including the international and Unicode features, the digital signing of applets, the JAR packaging capability (our .cab files), the Java Native Method Interface capabilities, and many of the performance enhancements. In addition, all of the capabilities of JavaBeans are already available through our ActiveX support.</p>
<h4>Does Visual J++ compete with Java?</h4>
<p>
Absolutely not. Applications built with Visual J++ will work with any major browser, including Internet Explorer and Netscape Navigator. Microsoft has fully embraced the Java language and is making it even more powerful by allowing Java to easily integrate with existing applications and databases. Microsoft has a license agreement with Sun to create the reference implementation of Java for Windows, and Microsoft has freely licensed this technology back to Sun so that they can distribute it to other browser and development tool vendors.</p>
<h4>Does Visual J++ create cross-platform code?</h4>
<p>
Absolutely. Visual J++ creates 100 percent Java-compatible code that runs on every platform that supports a Java VM (including Windows 95, Windows NT, Solaris, the Apple® Macintosh®, and others).</p>
<h4>Does Visual J++ have the ability to visually create Java forms?</h4>
<p>
Yes. The resource editor allows you to visually layout your application's interface. The resource editor is the same editor that is used in Microsoft Visual C++, thus making it familiar to a lot of people. In addition, there is another resource editor you can use to convert existing Microsoft Visual Basic® and Visual C++ forms into cross-platform Java code. This helps you create programs faster, and because it's a familiar interface, your customers will appreciate it as well.</p>
<h4>What advantages does Visual J++ offer over other visual Java development environments?</h4>
<p>
Visual J++ is the best Java development environment for many good reasons. Here are just a few:
<ol>
<li>
The best debugger<p class=tl>
To resolve application problems quickly, a graphical debugger is an essential part of a programming language. For a new, object-oriented language such as Java, it is imperative that developers have the best debugger available to resolve problems quickly and overcome the Java learning curve easily. Visual J++ offers the best debugger with such unique capabilities as:</P><ul type=disc>
<li>
Debugging multiple applets running simultaneously within the target browser<br><br></li>
<li>
Bytecode disassembly<br><br></li>
<li>
Bytecode-level stepping and tracing<br><br></li>
<li>
Assigning values to variables<br><br></li>
<li>
DataTips® to allow developers to get the value of a variable or a highlighted expression during testing<br><br></li>
<li>
AutoTab, an expandable tree control to show expressions of interest around a program counter<br><br></li>
<li>
Complex type expansion in a variables window, using an expandable tree control format<br><br></li>
<li>
Highlighting changes made in all appropriate windows<br><br></li>
<li>
Stepping out of nested levels during debugging<br><br></li>
<li>
Debugging code without source-line information<br><br></li>
<li>
Stopping debugging at any time while target process is running<br><br></li>
<li>
Setting breakpoints at any time while target process is running<br><br></li>
<li>
Showing parameters in the call stack<br><br></li>
<li>
Evaluating arbitrary or complex expressions<br><br></li>
<li>
Debugging COM objects written in Java</li>
</ul>
</li>
<li>
The best Java source code compiler<ul type=disc>
<li>
Compiles at a rate of over 10,000 lines per second</li>
</ul>
</li>
<li>
The easiest way to learn Java<p class=tl>
Java is a subset of C++ functions and inherently complex. Visual J++ gets you over the Java learning curve with these unique facilities:</P><ul type=disc>
<li>
Wizards to provide visual instructions for creating applets<br><br></li>
<li>
Interactive help and an online tutorial<br><br></li>
<li>
Complete online documentation<br><br></li>
<li>
An interface similar to other Microsoft development products, such as Visual C++. Because Visual J++ uses the same development environment (Microsoft Developer Studio™), you spend your time learning Java instead of how to use your development tool.<br><br></li>
<li>
A large selection of Java examples<br><br></li>
<li>
Full compliance with all Java standards</li>
</ul>
</li>
<li>
The most comprehensive functionality<p class=tl>
Visual J++ is more than just a Windows-based tool to the character-based Sun JDK. Visual J++ includes everything you need in one Java solution:</P><ul type=disc>
<li>
The Visual J++ ClassView helps you to understand the relationship between Java classes, methods, and properties<br><br></li>
<li>
The ability to paint forms and menus with the resource editor—or import existing forms developed with other Microsoft products, such as Visual C++<br><br></li>
<li>
Integrated database access using Remote Data Objects (RDO) or Data Access Objects (DAO)<br><br></li>
<li>
Freely distributable copies of Microsoft Internet Explorer, with the most efficient JIT applet compiler for the easiest and fastest end-user navigation over the Internet or intranet<br><br></li>
<li>
Support for ActiveX controls to enhance your existing investment in desktop applications and easily add efficient, interactive content</li>
</ul>
</li>
</ol>
<h4>How does the ActiveX support in Visual J++ benefit me?</h4>
<p>
The ActiveX support in Visual J++ benefits you in a couple of ways. First, it allows you to reuse existing code from other languages without having to rewrite code from scratch. For example, you can reuse an ActiveX control or an RDO or DAO database. Visual J++ version 1.1 includes a new database wizard that makes it a breeze to hook up to an RDO or DAO database. You can create high-performance graphics programs using DirectX. Second, it allows you to create code that can be reused not only in a browser, but also in other tools such as Microsoft Visual Basic, Visual C++, Microsoft Excel, and Powerbuilder and Delphi. Now you can bring your Java programming to a much wider audience.</p>
<h4>Isn't ActiveX technology just for Windows? What if I want to create cross-platform applications and applets?</h4>
<p>
ActiveX technology is designed to be cross-platform. Metrowerks has announced that they are including ActiveX capability in the Java VM on the Macintosh. This will be available in Microsoft Internet Explorer 3.0 for the Macintosh.</p>
<h4>What platforms will Visual J++ run on and target?</h4>
<p>
Visual J++ requires Windows 95 or Windows NT for development only. The Java code that it creates, however, runs on any platform that has a Java VM.</p>
<h4>How does Visual J++ help make ActiveX integration easier?</h4>
<p>
Visual J++ has a wizard that reads the type libraries of COM objects (including ActiveX controls) that you choose to import. This is what lets you easily use the methods and properties of COM objects as if they were simply other Java classes.</p>
<h4>How does the Visual J++ compiler compare to other Java compilers?</h4>
<p>
The Visual J++ compiler does everything that the other compilers do, plus it allows for ActiveX integration and has unparalleled compilation speed. The Visual J++ compiler is currently compiling over 10,000 lines of code a second.</p>
<h4>Is the Visual J++ compiler the same as a JIT compiler?</h4>
<p>
No. The Visual J++ compiler is part of the Java development tool. It compiles Java source code into bytecode. The JIT compiler is part of the Java VM. It accelerates the run-time performance of your Java code. Visual J++ includes a JIT compiler that is freely distributable.</p>
<h4>Will Visual J++ let me build both applets and applications in Java?</h4>
<p>
Yes. If you can do it in Java, you can do it with Visual J++!</p>
<h4>What's the difference between a JavaBean and a Java applet?</h4>
<p>
A JavaBean is a reusable software component for the Java development language, conceptually similar to the way ActiveX controls are used in building a Visual Basic application. JavaBeans can be combined to create applets, which are miniature applications that run in a Web browser.</p>
<p>
For development of the JavaBeans themselves, see the JavaBean Development Kit (BDK) at the Java Web site (http://www.javasoft.com).</p>
<h4>If I get the compiler and documentation for Java in the Microsoft Java SDK, why do I need Microsoft VJ++?</h4>
<p>
This question, while logical, is the equivalent to asking "If I have stones in my yard with which to make tools, why do I need to go to the hardware store?"</p>
<p>
While it is certainly possible to do Java development with the components given in the free Java SDK download, developers will find significant time savings and minimized hair loss by using the Microsoft Developer Studio interface, the debugging tools, the color-coded code editor, and the project window that comes in Microsoft Visual J++.</p>
<h4>How does ActiveX relate to Java?</h4>
<p>
ActiveX does not compete with Java. Developers can create ActiveX components using Java and can also use ActiveX components from Java.</p>
<h4>How does the Active Platform relate to Java?</h4>
<p>
The Active Platform includes and interoperates with Java technology. Java is a great language for creating ActiveX components that plug into the Active Desktop or into the Active Server.</p>
<h4>What is the Java AWT?</h4>
<p>
The AWT is Java's Abstract Windows Toolkit, the set of classes by which you can develop code once and instantly port it to many platforms. To utilize the AWT, import it in the beginning of the project using import java.awt.*. This will give you TextComponents, Buttons, Scrollbars, Canvas, CheckBoxes, Lists, and Labels, for instance. Microsoft Visual J++'s recently announced Application Foundation Classes (AFC) work as an extension of the AWT, bringing the Java development environment closer to Microsoft Visual C++ with it's Microsoft Foundation Class (MFC) libraries.</p>
<h4>Does Visual J++ support JDBC?</h4>
<p>
Visual J++ supports JDBC, but does not include any of the drivers or classes for it. As an alternative, Visual J++ includes DAO and RDO for access to client server databases. These database interfaces provide a lot of capabilities that JDBC is lacking, including updating, scrolling, database administration, and nested transactions. We have found that most firms are very reluctant to put their business rules up on the Internet, which JDBC encourages you to do. In an Intranet or a 3-tier Internet scenario there is little reason to restrict yourself to the limited capabilities of JDBC.</p>
<p>
Some third-party tools for off-the-shelf ODBC and JDBC database connectivity for use in conjunction with Visual J++ are available from:</p>
<p class=indent>
JetConnect (http://www.xdb.com)<br>
NetDynamics (http://www.netdynamics.com)<br>
JDesignerPro (http://www.bulletproof.com)</p>
<h4>What's the difference between the Java VM (Virtual Machine) and a JIT (Just-In-Time compiler)?</h4>
<p>
The Java VM is what executes Java programs. The Java VM comes bundled with the more advanced Web browsers, such as Microsoft Internet Explorer, or in the Java SDK. The VM itself is a virtual processor emulated in software. The instructions, called Java bytecodes, for that virtual processor are the same no matter which operating system the VM is running on. The virtual machine reads the bytecode and executes the native instructions appropriate for the local operating system. This is what gives Java its machine-independence.</p>
<p>
JITs are plugged into the Java VM. When the VM executes a method in a class or object, it passes bytecodes to the JIT, which then compiles the bytecodes to native code on the fly. Without a JIT, the Java VM must interpret and execute each bytecode in succession—a much slower process. Consequently, a JIT significantly boosts Java performance.</p>
<h4>Will Microsoft Visual J++ make a stand-alone Java application?</h4>
<p>
Yes. Microsoft Visual J++ 1.0 will make a stand-alone application.</p>
<p>
To create a stand-alone Java application:
<ol>
<li>
From the <b>File</b> menu, choose <b>New</b>.<br><br></li>
<li>
Select <b>Text File</b> and click <b>OK</b>. A blank text window appears<br><br></li>
<li>
Type the following code into the text editor:<pre><code>Class Hello2
{
public static void main (String args[] )
{
System.out.println ("Hello, World!" );
}
}</code></pre>
</li>
<li>
From the <b>File</b> menu, choose <b>Save</b>. The <b>Save</b> dialog box appears.<br><br></li>
<li>
Type "Hello2.java" and click <b>Save</b>.<br><br></li>
<li>
From the <b>Build</b> menu, choose <b>Build Hello2</b>.<br><br></li>
<li>
Click <b>Yes</b>.<br><br></li>
<li>
From the <b>Build</b> menu, choose <b>Execute</b>.<br><br></li>
<li>
Type "Hello2".<br><br></li>
<li>
Select the radio button <b>Stand-alone interpreter</b>.<br><br></li>
<li>
Choose <b>OK</b>. The Java application runs.</li>
</ol>
<h4>What things do I need to build and distribute a stand-alone Java application (as opposed to an applet)?</h4>
<p>
Once you've built your stand-alone Java application, be sure to distribute the correct pieces:
<ul type=disc>
<li>
The Java class file, which itself is platform independent<br><br></li>
<li>
The Java Virtual Machine for that platform</li>
</ul>
<p>
The Java Virtual Machine comes in the form of "jview.exe", a redistributable component available both in the Visual J++ package and in the Microsoft Java SDK. The Java SDK is available for download from the Microsoft Technologies for Java (<a href="http://www.microsoft.com/java/">http://www.microsoft.com/java/</a>). To control and compress the installation bundle, we recommend you use the CAB development kit included with Visual J++.</p>
<h4>Can I utilize Remote Data Objects (RDO) technology in Visual J++?</h4>
<p>
Yes. Using the Connect To Database Wizard bundled in Visual J++ 1.1, select RDO as your method of connecting to your data source. The Wizard will generate code and a "to do" list for you to flush out the details of what you want your application to do. Visual J++ comes bundled with the RDO object libraries (msrdo20.dll) for redistribution with your Java application.</p>
<h4>Can I utilize Data Access Objects (DAO) technology in Visual J++?</h4>
<p>
Yes. Using the Connect To Database Wizard bundled in Visual J++ 1.1, select DAO as your method of connecting to your data source. The Wizard will generate code and a "to do" list for you to flush out the details of what you want your application to do.</p>
<h4>Does the new Microsoft Visual J++ 1.1 include extensions found in Sun Microsystems JDK 1.1?</h4>
<p>
Despite the version number, the new update to Visual J++ 1.1 does not adhere to the new JDK 1.1 specifications. At the time of development of Visual J++ 1.1, the JDK version 1.1 was still in beta and Microsoft felt it would not be prudent to release an update based on beta code. Microsoft is actively pursuing conformance with this specification and will have an update when it is ready.</p>
</BODY>
</HTML>

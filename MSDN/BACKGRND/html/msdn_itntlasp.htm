<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>International Active Server Pages</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_itntlasp"></a>International Active Server Pages</h1>
<p>
Seth Pollack <br>
Lead Program Manager, Internet Information Server<br>
Microsoft Corporation </p>
<p>
April 2, 1997</p>
<p>
<i>Seth Pollack is the lucky guy who got to choose the code name "Denali" for the original Active Server Pages work, as he was planning a climbing trip to Mt. McKinley (a.k.a. Denali) at the time the project started.</i></p>
<p>
For years, software houses have been producing localized releases of their products where user interface elements, documentation, and so forth are translated to various languages in order to reach new markets. Active Server Pages (ASP) is no exception. We feel it's important to reach beyond the English-speaking community, so we are offering versions in French, German, Spanish, Swedish, Dutch, and Japanese. You can download these versions from the Microsoft® Internet Information Server (IIS) Web site at <a href="http://www.microsoft.com/iis/">http://www.microsoft.com/iis/.</a></p>
<p>
However, the Internet brings a whole new set of internationalization challenges. For example, say I put a Web server in the basement of my house in Seattle, plug it into the Internet, and publish a Web site called <i>Slugs of the Northwest</i>. Even though my server sits physically in the United States, runs English language software, and so forth, I'm likely to have slug enthusiasts from around the world hitting my site. How can I cater to these people, who may speak different languages, and run client software localized to those languages? Although the Internet highlights this issue, the same problem strikes in the intranets of multinational organizations. </p>
<p>
Don't hold your breath because there aren't any magic answers. But there are some techniques you can use, including a new feature that wasn't in the original IIS version 3.0. </p>
<p>
The simplest solution to this problem is to provide the site in only one language. But many Web sites want to do better than this by providing versions of their site in several languages. There is certainly a sizable cost in terms of development and maintenance in taking this step, but it allows you to reach many more people. </p>
<p>
In this case, how does a user get funneled to the content in the right language? The simplest way is to provide hypertext, such as <b>click here for English </b>or <b>click here for German</b>, to allow the user to choose the language. The user's selection sends him or her into a different portion of your content tree. Or, you might just have the client choose the language once, during the first time visit to your site, and then persistently associate that information with this user using the Internet Personalization System through ASP. Another approach is to take advantage of the Hypertext Transfer Protocol (HTTP) request header called HTTP_ACCEPT_LANGUAGE. Browsers send this header to the server with every request, specifying which language the user would like to see content returned in (for example, "EN" for English). Under ASP, you can check this header and make a decision programmatically, without bothering the user. </p>
<p>
So this all sounds pretty reasonable. There is a catch, however, in building global sites with ASP, and it has to do with character set conversions. To grasp the issue, we need to take a peek inside ASP for a moment. Internally, ASP and the language engines it calls—such as Microsoft Visual Basic® Scripting Edition, (VBScript), Microsoft JScript™, and so forth—all speak in Unicode strings. However, Web pages currently consist of content that can be in ANSI, DBCS, or other character encoding schemes. Therefore, when form or query string values come in from the browser in an HTTP request, they must be converted into Unicode from the character set used by the browser for processing by ASP script. These conversions map characters from one code page (a set of characters organized in some scheme, for example ANSI) to another. For example, the value that refers to the letter "a" in ANSI will be converted to the different value that refers to that same letter "a" in Unicode. Similarly, when output is sent back to the browser, any strings returned by scripts must be converted from Unicode back to the code page used by the client. </p>
<p>
In the ASP shipped in December 1996, these internal conversions are done using the default code page of the Web server. This works great if the users and the server are all speaking the same language (more precisely, if they use the same code page). However, if you have a Japanese client hitting an English server, the code page translations mentioned above won't work, because ASP will try to treat Japanese characters as English ones. </p>
<p>
The solution—for the ASP double-byte character set (DBCS) release due at the end of March 1997, we've added a way to control the code page that ASP uses to do these inbound and outbound string translations. This can be set in one of two ways. A special flag may be set in the ASP file, using the <b>&lt;% @ %&gt;</b> compiler directive block that can appear at the beginning of any ASP file. (This is used today to control the inline scripting language choice for the page.) The tag is of the form CODEPAGE=nnn. As before, this compiler directive block must appear before any executable script, and can only occur once in an .asp file and its included files. For example, the block to set the code page to 1252 might look like the following:</p>
<pre><code>&lt;% @ LANGUAGE=VBScript CODEPAGE=1252 %&gt;
</code></pre>
<p>
Alternatively, in script code a new <b>Session.CodePage</b> property is available that sets the code page to use for string translations for the current session. Setting this property overrides the value set by the CODEPAGE directive. For example:</p>
<pre><code>Response.Write (Session.CodePage)
Session.CodePage = 1252
</code></pre>
<p>
Either of these values may be set to any code page that is available on the server machine. The default is the system's default ANSI code page (CP_ACP for the Win32 programmers out there). </p>
<p>
How are these code page settings applied? First of all, any static content (HTML) in the .asp file is not affected at all; it is returned exactly as authored. Any static strings in the script code (and in fact the script code itself) will be converted based on the CODEPAGE setting in the .asp file. Think of CODEPAGE as the way an author (or better yet, the authoring tool, which should be able to stick this in the .asp file automatically) tells ASP the code page in which the .asp file was authored. </p>
<p>
Any dynamic content (using <b>Response.Write(<i>x</i>)</b> calls, where the <i>x</i> is a variable) is converted using the value of <b>Session.CodePage</b>, which defaults to the CODEPAGE setting, but can be overridden. Why do we need this override? Because the code page used to author the script may not be the same as the code page you want to use to send its output to a particular client. For example, the author may have written the ASP page in a tool that generates the JIS character set, but the end user's browser may want the UTF-8 character set. With this code-page control feature, ASP now enables correct handling of code page conversion. </p>
<p>
Where do we want to take this moving forward? There are more problems to address. A language specified in the HTTP_ACCEPT_LANGUAGE header, such as Japanese, might map to several code pages (such as JIS, Shift-JIS, or UTF), making it difficult to decide programmatically which code page to use based on that header. Having browsers additionally send in the request of the code page they are using would make this possible. The best solution would be to standardize with Unicode in the browsers so that in the future these code page translations would become unnecessary.</p>
</BODY>
</HTML>

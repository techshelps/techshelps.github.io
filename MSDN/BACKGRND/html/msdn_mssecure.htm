<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Microsoft Product Security</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_mssecure"></a>Microsoft Product Security</h1>
<p>
Steve Sutton, Trusted Systems Services, Inc.</p>
<p>
October 1997</p>
<h2>Introduction</h2>
<p>
This article introduces you to the world of Microsoft® security, with its wealth of enterprise security features centered around the Microsoft Windows&nbsp;NT® operating system. We won't presume to tell you why you need security—if you didn't already know you probably wouldn't be reading this. But it's no secret that few computers work in isolation anymore and the degree to which the world community of electronic systems is increasingly linked is more profound than most of us appreciate. And the targets are more tempting and valuable. To keep your work product and sensitive plans safe and secure you need the best state-of-the-art security available—soundly implemented, conforming to standards, and easily administered. This is precisely the task to which Microsoft has set itself, and this paper is your starting point to understanding the results.</p>
<p>
<img src="mssecure1.gif" border=0></p>
<p>
Our story centers around the Windows&nbsp;NT operating system and its family of enterprise applications, the BackOffice® suite. We'll see how these applications use and rely upon the Windows&nbsp;NT security features while using a consistent framework for extending the security model to provide features unique to their arena. We'll also demonstrate key enabling technologies that make it easy for all applications to take advantage of Microsoft security. While you may never use these technologies directly, they ensure that a broad selection of secure, reliable applications from Microsoft and others will always enrich the Windows&nbsp;NT environment. We also set out the basic security principles upon which all this rests.</p>
<p>
Our vantage is both broad and long-term and we leave many details to other forums. Some features we present are relatively new and a few are not yet delivered. Microsoft security targets established or emerging standards whenever possible (too many to even list in this document), and Microsoft actively contributes to the standards that ensure open security, especially in the Internet community. For more information, you can peruse the Microsoft security Web site at <a href="http://www.microsoft.com/security">http://www.microsoft.com/security</a>. This site has quick links that expand on most of the technology we'll present. </p>
<h2>Security in the Enterprise Environment</h2>
<p>
Although there are a mind-boggling number of detailed security features in today's commercial environment, they all stem from a few basic principles that form the cornerstone of Microsoft's security approach. Authentication identifies the user, and the all-important single-logon automatically promulgates this identity to all local and remote services. Access control restricts access to data based on that identity. Cryptography protects the privacy and integrity of data, especially when in transit across a network, and firewalls restrict traffic between your LAN and an external network like the Internet. System integrity ensures the underlying security software cannot be tampered with and auditing records security events.</p>
<p>
<img src="mssecure2.gif" border=0></p>
<h3>Authentication and Access Control</h3>
<p>
The root of enterprise security is controlling which users can see, modify, and delete which data. It's as simple as that. Data can be as diverse as e-mail, address books, or collaborative documents (like those in Microsoft Exchange); the wealth of heterogeneous data stored in centrally managed relational databases (like Microsoft SQL Server™); your communications with host mainframes (perhaps managed by SNA Server); your Web site, which may contain both internal and public information (Internet Information Server); the "take-home" documents that you use Windows&nbsp;NT Remote Access Service to download from your office; or a simple personnel memo on your desktop PC. While there's no "one-size" security that fits all these cases, the principles are relatively simple and stem from a basic set of threats.</p>
<p>
Security starts with legitimate users: your employees, system administrators, business partners, and customers. You don't trust them all with the same information. We call the process of identifying these users <b>authentication</b>, or in some situations, simply <b>logging on</b>. Like most commercial operating systems, passwords dominate authentication in the Windows&nbsp;NT arena, though "smart card" authentication will soon be available as a common, cost-effective alternative. Although the "public key" certificates we later discuss are often a critical component in network-wide authentication, a password or smart card always unlocks the first door.</p>
<p>
<b>Single-logon</b> is perhaps the most important property of Microsoft authentication. Under single-logon, you first log on to your workstation running Windows&nbsp;NT or Windows® 95. (Note: Windows NT-based networks fully accommodate Windows 95-based clients, even supporting common features like single-logon. However, Windows 95 simply does not have the security strength of Windows NT on the desktop and we largely omit it from our discussion.) For the duration of your logon session, your identity is automatically and securely passed to all the local and network services you request. With single-logon you don't have to remember a plethora of alternative user names or passwords, or enter them in vulnerable interactions that could compromise them. Single-logon also makes it easier to incorporate advanced authentication techniques, like smart cards. While single-logon may sound simple, it requires a great deal of infrastructure and is a key goal of the enabling technologies we discuss later.</p>
<p>
Establishing the user's identity is only half the battle. The other half is attaching information to various data objects denoting who can and cannot access that object and in what manner (read, write, delete, change access control permissions, and so forth). <b>Access Control Lists</b> (<b>ACLs</b>) appear throughout the Windows NT enterprise environment and those on the Windows&nbsp;NT native file system (NTFS) are the very basis of its security. Briefly, an ACL is a list of Windows&nbsp;NT users or user groups with access permissions for each. The permissions are usually targeted to the object the ACL protects. For example, shared printers have "Print" and "Manage" while files and directories have the more familiar "Read" and "Write" permissions. In some cases users who create an object can manage its ACL while in others this is restricted to administrators.</p>
<h3>Cryptography and Firewalls</h3>
<p>
There are unidentified, illegitimate, and usually unseen penetrators who pose two major threats. The first attacks data in transit across a network (or perhaps while stored in intermediary locations, like a mail server)—whether they simply eavesdrop on your data, actively modify it, or attempt to impersonate you on the network. As a sage once noted, there are only three solutions to this threat—cryptography, cryptography, and cryptography—and Microsoft devotes a great deal of its security energies to this technology. There are many public standards driven mainly by the Internet community like the Internet Engineering Task Force (IETF), and Microsoft actively supports these efforts.</p>
<p>
The second threat seeks to introduce malicious programs onto your system: Trojan Horses, viruses, and other assorted vermin. These are particularly virulent in the Internet environment. Microsoft's cryptographic Authenticode™ technology woven into Internet Explorer, and Internet Explorer's new Security Zones that selectively screen certain kinds of downloaded programs and scripts are two examples that counter common networking threats. Windows&nbsp;NT system integrity makes it inherently less prone to viruses than its predecessors.</p>
<h4>Assuring your privacy</h4>
<p>
Although you've probably read many summaries of cryptography, the topic is obligatory in this sort of document. Perhaps our perspective will clarify a few points. Encryption ensures that network elements cannot eavesdrop on your communications by "scrambling" the data. Microsoft currently uses the RC4 algorithm from RSA, Inc. and the U.S. government-standard DES algorithm for most of its encryption, although as we see later, the cryptographic infrastructure is open so that alternative algorithms are easily added. RC4 is a "symmetric" algorithm that requires both sender and receiver to have the same shared secret, or encryption "key." The standard key lengths, which determine the degree of protection, are 40- and 128-bits (the latter is subject to U.S. export control). Although 40-bit keys can be compromised by known, determined attacks, compromising 128-bit keys by means other than flaws in the RC4 algorithm is unthinkable. RC4 and DES are long-standing algorithms and have no publicly known flaws.</p>
<p>
Key management is the process of distributing keys between sender and receiver and there are many common key management protocols. Sometimes both parties already know a secret like a user password, which can be used as the seed for an encryption key. Other protocols use previously established keys to transmit the encryption key. Public key algorithms are particularly well suited for this purpose. Like referees at a sporting event, the best key management is unseen by its users.</p>
<h4>Assuring the integrity of your data</h4>
<p>
Integrity is protection against malicious modification of data. Integrity techniques attach a cryptographic signature to the message that both identifies the sender and ensures that the message has not been modified in transit. Microsoft technology currently uses the RSA public key and MD5 hash algorithms, a technique that dominates the Internet community. In a public key cryptosystem, each user has a matched pair of keys: a private key they keep secret and a public key they publish freely. The public key is presented in a certificate signed by a Certificate Authority (CA) that attests to the key's authenticity. (More below.) The unique property of public key ciphers is deceptively simple: </p>
<p class=indent>
<i>Data encrypted by the private key can only be decrypted by the public key and data encrypted by the public key can only be decrypted by the private key. </i></p>
<p>
(You might want to reread this a few times.) For example, if you encrypt a message for a colleague with his or her public key, only that person could decrypt it. (Most public key ciphers are slow compared to symmetric key ciphers, and they're seldom used for encrypting large amounts of data like this.)</p>
<p>
A hashing algorithm produces a small value (usually 16 bytes) from an arbitrarily long stream of data. We call this value a "hash" or, more formally, a "message digest." Its unique property is that it is computationally infeasible for someone to construct a data stream that reproduces a specific hash value. For example, if you compute a hash from a document you send to a colleague and then transmit the hash value securely, your colleague could determine if the document had been tampered with by recomputing its hash and comparing it with your original. While a nefarious intermediary (traditionally named "Mallet") might modify the document in transit, that intermediary simply cannot produce a fake document that has the same hash value. </p>
<p>
The only question left is how to securely transmit the hash. Easy—encrypt it with your private key and send the result as a signature that accompanies the document. Your colleague uses your public key to decipher the transmitted hash and checks the document as before. Although it may not be obvious, there's no way Mallet can modify the document or its signature that cannot be detected by your colleague's software. </p>
<p>
Microsoft uses this common, basic integrity algorithm in many situations. Perhaps the most visible is the Authenticode technology that ensures that ActiveX™, Java, and other active components downloaded from the Web come from identifiable sources and have not been tampered with. (More later.) Public keys and hash algorithms are also used for symmetric key management and to ensure that a communicant is genuine—not a masquerader. </p>
<p>
SSL is a popular protocol that incorporates both encryption and integrity. While it is predominantly used for Web traffic, Microsoft's cryptographic enabling technologies, S-Channel and SSPI, make it available to all applications. PCT is an improved version of SSL supported by Microsoft and TLS is an upcoming Internet standard that merges SSL and the ideas in PCT. We loosely refer to this collection of protocols as "SSL."</p>
<h4>Certificates</h4>
<p>
The distribution and management of "certificates" are central to the successful deployment of public key technology. In our example, how does your colleague reliably obtain your public key? If you send it unprotected, Mallet can change it in such a way as to completely compromise your communication without you or your colleague ever knowing. A certificate holds your name, your public key, and other information, all of which are signed by a Certificate Authority (CA) using a private key and the integrity algorithm we just described. If your colleague reliably knows the public key of that CA, they can verify that the certificate you send them has not been tampered. For example, most mail systems simply package the sender's certificate with the mail message. The recipient software first verifies the certificate, then uses its public key to check the integrity of the message.</p>
<p>
It may seem that we've only put off the issue: How do you reliably obtain the CA's certificate that holds the public key? Well, you just have to use some previously established, secure communication path. There are many techniques. For example, Microsoft delivers many commercial CA certificates preinstalled in the Internet Explorer. The issue is one of logistics—you only have to obtain a relatively small number of CA certificates. Your software automatically uses these to verify the user certificates signed by those CAs. You can even have CAs that verify and sign other CA's certificates.</p>
<p>
You also need confidence that the CA uses a degree of diligence when signing a user's key. It's poor practice for a CA to sign a certificate with an intentionally supplied false name. However, there are limits to what CAs can ensure, and certificates often contain a value that denotes the degree of diligence. It's also important for the CA to be able to revoke certificates. The usual technique is for the CA to regularly publish Certificate Revocation Lists that are downloaded by various CA validation agents.</p>
<h4>Firewalls</h4>
<p>
You can think of a firewall as a filter that restricts both the direction and kind of requests that can pass between your LAN and an external network like the Internet. The more effective firewalls "proxy" specific services, where a program on the firewall serves as intermediary between the LAN and entities on the external network for a specific service, like Web browsing. Proxy programs understand the details of the communication and can apply sophisticated restrictions on the data. Firewalls can also hide your internal network addresses from the external network and reject packets from specified external network addresses. There's little question that security-minded LANs should use a firewall, and we see more when we describe Microsoft's Proxy Server.</p>
<h4>Cryptography is all in the infrastructure…</h4>
<p>
While we can make these ideas sound simple, it's not easy to seamlessly integrate them into an enterprise environment. The secret is in the pervasive cryptographic support that Microsoft is building into the Windows&nbsp;NT security environment, whether it's the Personal Store that securely groups a user's keys and certificates together for storage, Microsoft's new Certificate Server that lets you issue and manage your company's own certificates, or the latest version of CryptoAPI that fully supports certificate management. Cryptography is all in the infrastructure, and we will see many examples as our story progresses.</p>
<h3>System Integrity and Auditing</h3>
<p>
System integrity ensures that the software and hardware portions of the system that are responsible for enforcing its security cannot themselves be compromised by regular users or their programs. Unlike common desktop operating systems like MS-DOS®, Windows 95, and the Macintosh® OS, Windows&nbsp;NT is built around a security kernel that ultimately protects the system itself. The security kernel also enforces the access controls that protect all sensitive files and data outside the kernel, making the protection complete. System integrity is the bedrock upon which all other security protections rely, and it is a strong argument for deploying Windows&nbsp;NT Workstation on the desktops of sensitive facilities.</p>
<p>
The importance of an audit trail, a tamper-proof record of security-related events, speaks for itself. Windows&nbsp;NT has a rich auditing system, and many applications produce security logs particular to their services.</p>
<h2>The Windows&nbsp;NT Security Environment</h2>
<p>
The basis of Microsoft's security environment lies in Windows&nbsp;NT security features and enabling technologies. BackOffice and other applications take advantage of both. An "enabling technology" is a set of software libraries that encapsulate certain algorithms or procedures that the operating system makes available to other applications and system services. These enabling technologies can be used by other parts of the operating system itself, as well as from applications developed either by Microsoft or independent third-party developers. While enabling technologies don't by themselves make your system more secure, they are key in assuring a strong, consistent, ongoing stream of security applications for the Windows&nbsp;NT environment. The BackOffice applications have diverse heritages and new releases tightly integrate into the Windows&nbsp;NT security environment, replacing older and less consistent security features. Windows&nbsp;NT 5.0 introduces an unprecedented level of security integration.</p>
<p>
<img src="mssecure3.gif" border=0></p>
<h3>Basic Features</h3>
<h4>Domains and accounts</h4>
<p>
The most fundamental security control in a widespread network is which users have access to which computers, whether for local logon (where you're working at a computer) or for remote access to shared network resources. The Windows&nbsp;NT domain structure fundamentally and primarily governs this policy.</p>
<p>
Administrators assign each Windows&nbsp;NT-based computer, whether a server or desktop PC, to a single Windows&nbsp;NT domain. (This is usually permanent, but it can change.) Each domain has a Windows&nbsp;NT Domain Controller that serves as a repository for security information, most notably a set of domain-wide user accounts and group definitions. A user's account holds a logon name, password, capabilities, and other information like the user's real name. Each account in a domain can locally log on to and remotely access each computer in the domain, although there are other controls that can restrict access on an account-by-account basis.</p>
<p>
If their administrators agree, one domain can trust a second domain; if so, accounts from the second domain can access computers in the first, just like the first's own accounts. In setting up the trust, the first administrator is in effect saying, "Your users may access the computers in my domain" (although there are many strong controls on that usage). User names across a multidomain network need only be unique within a domain and are implicitly prefixed by their domain name, like "SALES\JJones," where SALES is the domain and JJones the user. Trust is one-way. In our current example, accounts from the first domain cannot access the second's computers. However, two domains can trust one another. A domain can trust and be trusted by more than one other domain.</p>
<p>
There are many popular practices for structuring domain trust relationships, or "domain models," and some are based on criteria other than security—for example, a network browser groups computers and their shared resources by their domain. However, the fundamental security of domains is both simple and essential: Who can access which computers.</p>
<p>
There are two features that further allow administrators to control who can access which computers. User<b> </b><i>rights</i> are special capabilities that administrators assign to accounts that can use a given computer. Most rights are used internally by Windows&nbsp;NT and its default assignments seldom change. However, two rights are particularly noteworthy: the rights to log on locally and to log on remotely. These allow each computer to tightly limit each kind of logon. Further, each account has an optional list of workstations to which its user can locally log on.</p>
<h4>Remote sessions and single-logon</h4>
<p>
When you locally log on to a Windows&nbsp;NT-based computer, your logon session runs under the name you present along with your password at logon. When you attempt to access a remote computer, for example, connecting to one of its shared directories or printers, or even to perform remote administration, the remote computer transparently authenticates you and establishes a remote session for your activities there. If the domain structure allows, the remote account is the same as your local one. Otherwise, you can sometimes specify a name and password of an account that is allowed on the remote computer. But under no circumstances can you establish a remote session without being authenticated—that is, demonstrating you know the name and password of an account that's allowed on the remote computer. And without a remote session your programs can obtain no significant services.</p>
<p>
Once you've been logged on to the remote computer, remote server applications can assume the identity of your user account through a simple process called "impersonation." When they do so, they are running under your permissions and capabilities, and their actions are appropriately constrained by controls in the remote environment; for example, ACLs on the remote file systems. This is our first and perhaps best example of how the Windows&nbsp;NT environment implements single-logon and propagates it to server applications. A server in this scenario need know nothing about authentication or accounts. It simply impersonates its client user (whose name it may not even choose to discover) and the Windows&nbsp;NT environment restricts the program's actions accordingly. BackOffice and other Microsoft applications universally use this fundamental security model, and Microsoft strongly encourages all BackOffice-compatible applications to do so as well.</p>
<p>
Prior to Windows&nbsp;NT 5.0, a server could not forward your identity and capabilities on to another remote server. Windows&nbsp;NT 5.0 includes an authentication technique called Kerberos that gives servers this ability. Kerberos was developed at MIT and is a respected Internet standard.</p>
<h4>Logon and password management</h4>
<p>
Under single-logon, you log on only once, so that logon should be quite strong. Windows&nbsp;NT uses a technique called the "trusted path," typically found only in highly secure operating systems. The trusted path prevents the common "spoofing" scheme, in which a malicious program already running on a computer presents what appears to be a legitimate logon window in order to capture a user's password. Under the trusted path, users of Windows&nbsp;NT are trained to always call up the logon window by pressing the CTRL, ALT, and DEL keys simultaneously. When they do, Windows&nbsp;NT reliably displays its Security Window into which they can safely enter their password. (You also use the Trusted Path to change your password and log off, which prevents similar spoofs.) Windows&nbsp;NT includes a variety of password controls, including the ability to lock an account when its password appears to be under attack.</p>
<p>
There are two important enabling technologies that can strengthen Windows&nbsp;NT logon and password management: PASSFILT and GINA. PASSFILT lets an administrator install a trusted program that's called every time a user changes a password. The program receives the new password and can ensure that it meets certain strength criteria, like its length or the random nature of its characters. Microsoft includes an optional PASSFILT module in Windows&nbsp;NT that enforces an example password policy. This addresses the time-honored but still troublesome problem of users who choose unsecure passwords. GINA is a replaceable program that is an integral part of Windows&nbsp;NT local logon system. Although not for the novice, vendors can supply alternative GINA modules that strengthen the logon process. The prime example is to support the smart card authentication we discuss later, or biometric authentication devices like fingerprint or retinal scanners.</p>
<h4>ACLs</h4>
<p>
All objects in the Windows&nbsp;NT environment can have an Access Control List (ACL), which lists users or groups and the kind of access each is allowed to the object. The most visible and important ACLs are those that protect all elements in the Windows&nbsp;NT native file system format (NTFS) and the Windows&nbsp;NT Registry. (The Windows NT Registry is an extensively used hierarchical storage for system and application control information.) These house all software that enforces Windows&nbsp;NT security; thus ACLs are key in protecting the system's integrity. (Windows&nbsp;NT sometimes uses encryption for additional protection, for example, of its user accounts and other key security data.)</p>
<p>
Users have full control of ACLs on the files, directories, and other objects they create, and use simple window interfaces to manage them. They can also specify the ACL to be given by default to all newly created objects in the directories they manage.</p>
<p>
ACLs protect other objects, like file shares and printers, and as we see later most BackOffice applications extend the ACL model to data they manage. It's often necessary for an application to have a customized ACL format for objects that it manages. In both cases the purpose and intent is the same.</p>
<h4>Central administration and roles</h4>
<p>
Windows&nbsp;NT uses a simple administrative hierarchy. Full administrators, members of the local Administrators group on each computer, have complete power over that computer. Windows&nbsp;NT Server includes several operator roles, each of limited power—for example, Account Operators that manage user accounts and Server Operators that look after day-to-day server operations. Windows&nbsp;NT administration is based simply upon membership in certain groups so you can flexibly devise network-wide administrative roles. For example, you can include domain administrators from the local domain and even remote domains to the administrators who control your LAN workstations. Or you could create a group for accounts that only administer user workstations but not the more critical network servers.</p>
<h4>Security audit trail</h4>
<p>
Windows&nbsp;NT and its applications can record an extensive set of system events in their security log. Administrators define an audit policy that designates which of a set of six categories the system records (logons and logoffs, user and group management, and so forth). They can also attach auditing information (which looks much like an ACL) to any Windows&nbsp;NT object, typically NTFS files and directories, and registry keys. When the object category is selected, this information determines when the system audits access to the object based on the user or group of the accessor and the success and/or failure of the operation. You can even stipulate that the system shuts down if the audit trail exceeds allowed storage (although this is wisely left as an option).</p>
<p>
As an enabling technology, Microsoft provides extensive software libraries that allow trustable programs to insert their own custom audit records into the audit trail. The libraries also give audit tools easy, high-level access to the security log, and we can look forward to powerful, third-party audit trail analysis tools.</p>
<h4>Remote Access Service (RAS) and Point-to-Point Tunneling Protocol (PPTP)</h4>
<p>
The Remote Access Service (RAS) lets remote users dial into a Windows&nbsp;NT RAS server and use the resources of its network as if directly connected. In its simplest mode, users logging on to Windows&nbsp;NT remotely simply check a small box on their logon window that automatically establishes the RAS connection and authenticates the session. RAS uses the Windows&nbsp;NT standard single-logon technique, and users can log on under their normal office account. Overall, working from the road is identical to working from one's office—and it's secure.</p>
<p>
Administrators designate which accounts can use RAS. They can also set up RAS to automatically "call back" a specific number for each account, which ensures that a user's remote access comes only from a specific phone number. RAS uses the Windows&nbsp;NT standard challenge/response logon, which prevents passwords from passing over the communication link. RAS clients and servers can require that all communication be encrypted, currently by the 40- or 128-bit RC4 cipher. You can also limit remote access to the resources of the RAS server itself (as opposed to its networks).</p>
<p>
Microsoft's Virtual Private Networking technology uses the industry-supported Point-to-Point Tunneling Protocol (PPTP) to extend the use of RAS to the Internet. Instead of dialing directly into the RAS server using a telephone line, the remote RAS client dials a local Internet service provider and establishes an Internet link to their PPTP RAS server. This virtual private network scenario allows a remote user to securely access a central network over the unsecure Internet.</p>
<h4>Basic protocol security</h4>
<p>
Not all networks are prone to attack and Windows&nbsp;NT does not impose performance penalties by applying cryptographic techniques to all network traffic. Instead, its philosophy is to support specific applications that need to cryptographically protect data in transit across a network. However, it does use some common-sense and basic cryptographic techniques in its standard, underlying protocols.</p>
<p>
Local logon requests are encrypted when they pass between the workstation and its domain controller. This helps ensure that passwords are not exposed and that interlopers cannot interfere with the primary authentication process. The remote (or "secondary") authentication we just discussed uses the NTLM challenge/response protocol to ensure that passwords never appear on the network unencrypted.</p>
<p>
Windows&nbsp;NT uses Microsoft's SMB protocol for file and printer sharing and many other remote services. A new version of SMB applies integrity protection to this protocol with an algorithm similar to the one we presented earlier. (Note: This enhanced SMB protocol was introduced in Windows NT 4.0 Service Pack 3. Its author has proposed it as a standard for the Common Internet File System (CIFS) that would allow file sharing across diverse platforms.) While it does not encrypt (hide) one's data, it prevents a broad range of attacks that seek to modify data in transit or impersonate the client's identity. </p>
<h4>C2 and its companions</h4>
<p>
Windows&nbsp;NT 3.51 is one of the few commercial operating systems that has successfully completed the C2 evaluation process by the U.S. government, as well as the FC2/E3 evaluation under its companion European criteria, ITSEC. Why should you care? C2 ensures that the base operating system has certain important security features, but more importantly, it's an <i>opinion</i> from an independent, trained, experienced, unbiased team of government security analysts, a team that has the full cooperation of the Microsoft developers and has access to source code, internal design documents, and the core software architects. The team works through meetings with these designers to gauge Microsoft's expertise, commitment, and thoroughness toward security. This team concentrates on fundamental security architecture guided by the <i>Trusted Computer Systems Evaluation Criteria</i>, the "Orange Book." The team summarizes its study in a Final Evaluation Report, which is as good an illustration of Windows&nbsp;NT security architecture as you'll find. </p>
<p>
C2 evaluation is therefore not a detailed search for security bugs, but rather an opinion that the overall security architecture is sound. One cannot "run the system in C2 mode"—there's no such thing. One could turn off the features that were excluded from the evaluation, but even this misses the point of the evaluation process. C2 is a measure of Microsoft's commitment and support to produce a system whose fundamental architecture is subjected to independent analysis. The resultant C2 and its companion ratings lend an important degree of confidence that this system is properly architected for security. For more information, see <a href="http://www.microsoft.com/ntserver/guide/securitysummary.asp">http://www.microsoft.com/ntserver/guide/securitysummary.asp</a>.</p>
<h4>And the story continues…</h4>
<p>
Upcoming additions to Windows&nbsp;NT, particularly those that will be introduced in Windows&nbsp;NT 5.0, bring many new security features:
<ul type=disc>
<li>
<b>Expanded domain trust relationships:</b> To ease domain administration in larger sites, Windows&nbsp;NT 5.0 allows administrators to group domains so that each domain implicitly trusts every other domain in the group. This means that accounts in a domain can be used in all other domains in the same group. Windows&nbsp;NT 5.0 continues to support simple one-way trust to more finely control trust relationships.<br><br></li>
<li>
<b>Kerberos and public key authentication:</b> Windows&nbsp;NT 5.0 uses the industry-standard Kerberos V5 authentication technology as its default authentication scheme. Invisible to regular users, Kerberos offers a variety of expanded authentication capabilities. For example, it lets servers pass client user identities for use by other servers in a multitier client/server arrangement and it allows for mutual client/server authentication. It also lets users of Windows&nbsp;NT securely access remote, non-Windows&nbsp;NT services that use this popular technology. Windows&nbsp;NT 5.0 can also authenticate users using public keys and certificate technology, including SSL. This facilitates authentication from non-Windows&nbsp;NT sources and eliminates some of the disadvantages of traditional passwords.<br><br></li>
<li>
<b>Active Directories:</b> The Active Directory is logically a single, network-based storage hierarchy based on X.500 standards (and, of course, protected by ACLs, which have some interesting new properties of their own). When upgrading from Windows&nbsp;NT 4.0 to Windows&nbsp;NT 5.0, many security parameters migrate to the Active Directory from their current location in the Windows&nbsp;NT Registry, including all user accounts. This significantly enhances central security administration. Administrators can also delegate detailed operations to lesser administrative users who need to perform specific functions; for example, letting a help desk attendant assign a new password to a user without otherwise changing the user's capabilities. Because these capabilities are based on the ACLs that protect the Active Directory elements, sites can devise custom administrative hierarchies that fit their own particular needs.<br><br></li>
<li>
<b>Encrypted file system:</b> Windows&nbsp;NT 5.0 lets users automatically encrypt information stored in its native NTFS file system format in much the same way that they can automatically compress files today. It has provisions for data recovery that allow trusted administrators to recover data if users forget their own encryption keys or leave the company. This is a welcome and essential feature for people who use laptops or removable hard drives. </li>
</ul>
<p>
We'll also see public key technology and certificate management more tightly bound into Windows&nbsp;NT, wider use of SSL, and some small but nice refinements to its audit log. You can learn more about all these features in <i>Microsoft Windows&nbsp;NT Distributed Security Services: Secure Networking Using Windows&nbsp;NT Server Distributed Services Technology Preview</i> (See the "Distributed Security" section of the PDC 97 Conference Papers in the MSDN&#0153; Library).</p>
<h3>Enabling Technologies</h3>
<p>
In many ways, enabling technologies are the most exciting part of this security story because they portend a rich, ongoing stream of trusted applications that are more economical, more secure, and easier to administrator because they take advantage of the Windows&nbsp;NT common enabling software.</p>
<h4>CryptoAPI and S-Channel</h4>
<p>
Cryptography is the essential component of networking security. Unfortunately, it's a difficult technology to learn and implement. Microsoft created the CryptoAPI to address this problem. The CryptoAPI is a set of software libraries with high-level cryptographic interfaces (APIs) that manage the many details of key management, formatting, and cipher algorithms, presenting applications with a single interface that serves different underlying ciphers. CryptoAPI uses Cryptographic Service Providers (CSP), plug-in cipher modules that cryptographers create and market. In short, CryptoAPI joins application developers, who know little of cryptography but need to use it, with cryptographers who develop the base technology. </p>
<p>
Each CSP implements a specific set of cryptographic algorithms. Microsoft provides a base CSP that includes a full complement of cryptographic ciphers and hash functions licensed from RSA Data Security, Inc. Under CryptoAPI, you can replace one CSP with another of the same type without affecting any of the applications that use that type. For example, Microsoft provides an Enhanced version of the RSA base CSP that supports stronger encryption strength when legal. This also lets you upgrade your security to hardware devices, like smart cards, by simply replacing the CSP.</p>
<p>
A second advantage of the CryptoAPI is that it fully encapsulates the storage and protection of crypto keys and the ciphers themselves. A CSP can implement its schemes either in software or on smart cards. Smart cards present significant security advantages over software because they are not only portable but can better physically protect a user's all-important secret keys.</p>
<p>
Microsoft delivers a basic set of CSPs with Windows&nbsp;NT. (Note that you may need special third-party licenses if you develop and sell products using these algorithms.) All BackOffice applications are moving quickly to fully utilize CryptoAPI. The recently released CryptoAPI 2.0 includes a complete set of certificate management APIs that implement the latest X.509 certificate formats.</p>
<p>
Secure Channel (S-Channel) is a security service provider module that implements the popular public key security protocols between Web clients and servers: SSL, PCT, and the upcoming standard that merges them, TLS. S-Channel is layered on top of CryptoAPI for key and certificate management services. ISVs and developers can use this S-Channel to add these strong cryptographic protocols to any client/server application.</p>
<h4>P-Store, Microsoft Wallet and PFX</h4>
<p>
Traditionally, on a single-logon system like Windows&nbsp;NT, users had only to remember their logon passwords. However, increased security in heterogeneous environments adds a lot more that they have to lug around, including their private keys and certificates, trusted CA certificates, credit card and bank account numbers, other personal identification information (like a driver's license number), and data that helps their applications use this information automatically and transparently. There needs to be a single place to store<i> </i>and<i> protect</i> this information that applications can share. On Windows&nbsp;NT, the Protected Store (P-Store) is the technology that enables all this. </p>
<p>
P-Store is a set of software libraries that allow applications to fetch and retrieve security and other information from a personal storage location, hiding the implementation and details of the storage itself. For example, storage could be the user's Windows&nbsp;NT profile, a preferences file, a diskette, or a smart card. The Microsoft Wallet is a generic name for a window application that serves as the user interface to the P-Store. Microsoft Site Server already uses the Wallet with Microsoft Internet Explorer and Outlook™ Express (Internet Explorer's mail client) to follow soon. The Personal Information Exchange (PFX) protocol securely transfers the contents of a P-Store from one location to another. For example, a user may need to copy it from an office computer to a home computer.</p>
<h4>Smart cards</h4>
<p>
Smart cards are a key component of future public key cryptography in Windows&nbsp;NT 5.0. A smart card is about the size of a credit card and can hold a processor and local memory—a simple computer. It usually plugs into a slot on the computer or its keyboard. Smart cards can be tamper-resistant, with any attempt to dismantle the card erasing its memory. Many companies are developing smart cards for Windows&nbsp;NT, and Microsoft participates in the industry-wide and ISO committees that are standardizing them.</p>
<p>
Microsoft delivers the enabling technology that lets third-party vendors readily adapt their smart cards to Windows&nbsp;NT. Applications write to standard smart card interfaces that hide the details of the individual card so that properly written applications can transparently use a variety of smart cards. CryptoAPI SAPI types that are currently implemented in software can be readily converted to smart cards without changing the applications that build on the CryptoAPI (a good example of why Microsoft created CryptoAPI in the first place!).</p>
<p>
From a security perspective, smart cards can hold a user's private keys, passwords, and other secret information (which is stored <i>only</i> on the smart card), trusted CA certificates, and other useful information, like the addresses of shared certificate stores and Certificate Revocation Lists. Smart cards can perform the ciphers themselves, which means that the highly secret crypto keys never leave the card, even temporarily. They are ideal storage for the Wallet.</p>
<p>
Smart cards can also strengthen user authentication through the GINA interface we mentioned earlier. Smart card logon usually requires that the user insert a card and type a short password, often called a "PIN." Authentication depends upon "something the user holds and something they know." Stealing the card or discovering the PIN alone does not allow a penetrator to log on. </p>
<p>
Removing the smart card from its slot can lock the system just as users of Windows&nbsp;NT can now do from the security window. This means you can easily take your card with you when you leave your desk temporarily, keeping your session protected and undisturbed.</p>
<p>
With prices falling and the full support of the Windows&nbsp;NT infrastructure, smart cards will quickly become a popular and critical security component of Windows&nbsp;NT enterprise networks. (See <a href="http://www.microsoft.com/SmartCard">http://www.microsoft.com/SmartCard</a> for details.)</p>
<h4>SSPI and Secure RPC and DCOM</h4>
<p>
As intranets become more secure, client applications (like Web browsers and e-mail programs) and servers (like Web servers and e-mail hosts) become more complicated because different situations require different types of authentication and cryptography. While an application writer could learn each scheme and code it directly into a program, there's a much better way. Microsoft's Security Support Provider Interface (SSPI) makes common network authentication and cryptographic data protection schemes available to both client/server writers through simplified software libraries. Programs that use SSPI do not need to encode the details of specific authentication or crypto schemes. Instead, the SSPI libraries do all the complicated work.</p>
<p>
A Security Support Provider (SSP) is a library that manages a particular scheme. Applications interact with all SSPs through a common SSP Interface (hence, the overall moniker SSPI), which further hides the details of the specific scheme. SSPs rely heavily on other enabling technologies like CryptoAPI and S-Channel whenever possible. SSPI currently includes four SSPs:
<ul type=disc>
<li>
<b>Kerberos:</b> A cryptographic, industry-standard mutual authentication protocol that we introduced earlier.<br><br></li>
<li>
<b>NTLM:</b> The traditional password-based authentication protocol for Windows-based networks. Although this time-honored standard will continue to be supported, Kerberos will gradually replace its use for newer, Windows&nbsp;NT environments.<br><br></li>
<li>
<b>SSL:</b> (Including PCT and TLS.) A cryptographic protocol for mutual authentication and data protection popular today only in the Web community, but nonetheless a strong, general-purpose security protocol.<br><br></li>
<li>
<b>DPA:</b> A password-based authentication protocol used by many commercial online services such as MSN™. Its advantage is that users can use the same credentials (name and password) to log on to more than one online service.</li>
</ul>
<p>
Distributed and client/server applications use SSPI in several ways, from calling its SSPs directly to selecting security options when using DCOM, RPC, and other popular Internet APIs. DCOM (Distributed COM) and RPC (Remote Procedure Call) are enabling technologies that make it easier for people to create distributed applications—applications with cooperating components that run on different computers, perhaps even different operating systems (like Windows&nbsp;NT, UNIX, or Macintosh). For example, Windows&nbsp;NT remote administration uses RPC extensively. DCOM and RPC manage and hide the nitty-gritty details of how the different parts communicate. Both DCOM and RPC have simple options that automatically use SSPI authentication and message encryption. These options are sometimes called "Secure DCOM" or "Secure RPC." These are among the easiest ways to use SSPI.</p>
<p>
Perhaps a simple example will help. Most authentication protocols begin by exchanging a series of packets between the client and server:
<ol>
<li>
The SSPI client begins by calling a particular SSP requesting an initial client request packet. The SSP formulates the packet and instructs the client to deliver it to the server. The client and server never peek inside these packets—each simply delivers a packet to the other for processing by the other's SSP module. The server sends the packet to its corresponding SSP as an initial client request. <br><br></li>
<li>
The server SSP returns a packet to the server with instructions to send it back to the client SSP, which the server and client promptly do. This packet might, for example, contain the challenge used in a Challenge/Response protocol.<br><br></li>
<li>
Finally, the client SSP formulates the last packet and instructs the client to send this last packet to the server. In our example, this includes the response to the challenge. The server then passes this final packet to its SSP, which then informs the server that the authentication succeeded. (In our example, the client's SSP produced a response to the challenge that only the user's password could produce.)</li>
</ol>
<p>
SSPI also supports server impersonation, so at this point the server might impersonate the client user—that is, begin working under the client user's identity. If client and server are cryptographically protecting their data, each will pass each outgoing packet the SSP for encryption or signing, and each incoming packet for decryption or signature checking. In this case the initial exchange usually negotiates the encryption keys for the session.</p>
<p>
While we've given you a little more technical description than you may have wanted, we'd like to leave you with a feel for the degree to which Microsoft is integrating its enabling security technologies and the importance of providing these services to secure applications.</p>
<h4>Certificate server</h4>
<p>
A key component of certificate management is that a Certification Authority (CA) creates a user's certificate (essentially, signs the user's public key) after verifying that the user has presented a legitimate name, often a full name or e-mail address. While there are several companies that provide this service, large Windows&nbsp;NT-based networks want and need their own certificate authorization services. Enter Microsoft's new Certificate Server.</p>
<p>
You can think of Certificate Server as a tool kit for CAs. It accepts certificate requests from users in a variety of popular, standard formats (like e-mail), subjects the request to any number of "approval modules" that the CA can easily add to the server, then constructs and returns the CA to the user. Each site adds its own approval modules, although other vendors will likely market standard modules. A module might engage in an e-mail dialog with the user's listed e-mail address, or send a request to an assistant who researches the requester (perhaps even visits them in person) and awaits the results. Certificate Server can also manage Certificate Revision Lists. Certificate Server's value is not only the cost savings of creating certificates in-house, but also that it allows you to establish the certification policies important to your organization. You could even use Certificate Server to establish your own public certification service.</p>
<h4>Authenticode and Java security</h4>
<p>
In the early days of the Web, when you clicked on a hyperlink your browser simply printed its contents to your screen. No danger there. But today your browser may invisibly download and locally run a whole bunch of little programs that ostensibly manage the presentation of the page on your screen. These "active" Web page elements, including ActiveX controls, Java applets, and good old-fashioned *.EXE files, pervade the Web and are the wave of the future. Their presence as local programs is automatic and not apparent, which is the way it should be. </p>
<p>
How do you know these active elements don't attempt some skullduggery on your system? They run under your identity with your capabilities and, invisibly, can do everything you can do: delete files, or, perhaps worse, mail them off somewhere. They can even install a permanent, malicious program on your computer, a "virus." You certainly don't indiscriminately download software from unfamiliar bulletin boards and run it. (Well, okay, maybe we do sometimes. But we know better.)</p>
<p>
Microsoft's Authenticode technology uses the simple cryptographic integrity features we presented earlier to help ensure that your browser only accepts active elements you deem "safe." Briefly, reputable software vendors join a software vendor organization and receive a certificate signed by the CA of the organization. People who browse the Web install that CA's certificate on their workstation. (It most likely comes preinstalled in the browser.) Vendors sign their active elements using the integrity algorithm we described earlier. </p>
<p>
Your browser can now determine two important things: that an active element comes from a genuine member of that organization, and that it has not been tampered with from the time the vendor signed it. You can easily instruct your browser to ignore elements that fail these tests, or perhaps to allow only elements from a list of vendors you specify. Microsoft Internet Explorer can check Authenticode on any active element (ActiveX, Java, and so forth).</p>
<p>
Is this sufficient assurance? Consider an analogy. Suppose you visit your favorite software shop and buy a shrink-wrapped package from a software house that produces a wide selection of PC programs. Do you have any reservations about its safety? Probably not, for the simple reason that it's just not likely that the program is actively malicious. No legitimate software house would risk its business by selling what it knows or suspects to be tainted programs. Of course, someone could have tampered with the shrink-wrap and substituted a fake CD-ROM, or maybe the software doesn't really come from the company whose name is on the box. But the answer to these rhetorical questions is, "It's just not likely."</p>
<p>
Authenticode assurance is analogous but even stronger. It's infinitely harder to tamper with cryptographic signatures than shrink-wrap, and the software industry organization attests that this is a genuine software vendor that willingly joined its organization. If shrink-wrap tampering is "not likely," then Authenticode tampering is "highly unlikely." (While initially intended for the Web, someday those shrink-wrapped CD-ROMs you buy from that little shop may also have an Authenticode signature!)</p>
<p>
Java offers some additional security possibilities. Java applets don't necessarily gain full access to your system. Your browser (more properly, the local software that runs the Java applets) can limit these applets, for example, preventing them from writing onto your file systems. The scope of a Java applet is often called its "sandbox." (Perhaps "prison cell" would be a better metaphor.) With the proper Java security model this can be an effective security restraint. However, it inevitably trades off against the capabilities of the applet. For example, when you prevent an applet from writing to your hard drive, you may be removing its ability to give you the services it is designed to provide. Internet Explorer 3.0 fully enforces the standard Java "sandbox," and Microsoft is working with industry groups to make the sandbox walls more flexible.</p>
<p>
There's no question that for some applets, the sandbox is an effective protection. But there's also no question that in general, it's not enough. Authenticode does not have this trade-off and needs not make concessions to usability.</p>
<h3>Applications</h3>
<p>
While enabling technologies bespeak the promise, applications must demonstrate the reality. Many applications in BackOffice came from somewhere else and were initially designed before Windows&nbsp;NT became the enterprise force it is today. Microsoft is making a concerted, company-wide effort to tightly integrate these applications into Windows&nbsp;NT security, and the Windows&nbsp;NT 5.0 time frame will bring these all together nicely. </p>
<p>
<img src="mssecure4.gif" border=0></p>
<p>
We now turn to key examples of how these products leverage the Windows&nbsp;NT infrastructure and its enabling technologies. There are mounds of information about each of these products on the Microsoft Web site, and most have their own security white papers.</p>
<h4>Internet Information Server (IIS)</h4>
<p>
IIS is a classic Web server, but to appreciate its security role we need only look at its full name. It's a network server of information, much like a remote database server. Indeed it's often coupled with a more classic database server like Microsoft's SNA Server that handles the "heavy-duty," back-end work of managing huge amounts of data. As an information server, IIS's security duties fall squarely within our basic principles: identify the user, apply access control, secure the network, and audit the results.</p>
<p>
We start with single-logon authentication. When you use IIS with Microsoft Internet Explorer (or another compatible browser) the server and browser can cooperate to achieve single-logon authentication. All actions IIS performs for the user are done under the user's account, whether reading Web pages, delivering ActiveX elements, or processing forms. When you run IIS on the Windows&nbsp;NT native file system (and you always should), the file system ACLs absolutely constrain what IIS, running as that user, can read and write.</p>
<p>
You can configure IIS to support three kinds of authentication. The first and strongest is the one we've just described, Windows&nbsp;NT Challenge/Response. With compatible browsers, IIS can also support "Basic Authentication" in which the browsing user enters a name and password that IIS validates against its Windows&nbsp;NT accounts and assumes that identity. (Under this scheme, passwords cross the network unencrypted, so it's not very secure.) IIS can also forego authentication and run under a special "anonymous" account. This does not mean that anonymous logons are uncontrolled. Rather, they can only access objects whose ACLs allow access to the anonymous account. You just don't know who the user really is.</p>
<p>
IIS 4.0 can require SSL client authentication, which ultimately results in IIS receiving the user's certificate. As administrator, you can map specific certificates, or certificates whose name has a certain format, into Windows&nbsp;NT accounts. As before, IIS then performs all its services for this user under that account.</p>
<p>
In IIS 4.0, you can assign security controls to any file or directory on the system. But you typically organize your Web site into distinct areas and apply controls to each area as a whole. You can designate the authentication methods for each area. You can also require SSL and limit the network clients that can access the area by network name or address. You can set overall access controls for the area that it protects in addition to the file system ACLs. For example, you can set all information in an area read-only, or specify that the area has no executable scripts. IIS can even log all transactions for a particular area in its own log.</p>
<p>
We mentioned that IIS can use SNA Server as a backend database server. With Kerberos, IIS can pass the single-logon authentication along to SNA, which, as we see below, can also perform its actions under the user's identity, giving strong access control at the database itself.</p>
<h4>Proxy Server</h4>
<p>
Microsoft Proxy Server is a firewall that controls which of your LAN users can access which services on an external intranet like the global Internet. Typically, you install Proxy Server on a Windows&nbsp;NT Server computer on your LAN that has a second network interface to an external TCP/IP-based network—the intranet. You instruct Proxy Server which network addresses are "internal" (your LAN) and by default all the rest are "external." Proxy Server has no effect on communications between communicants within its internal world. Proxy Server closely integrates with IIS.</p>
<p>
Proxy Server 1.0 includes two basic services, the WinSock and Web proxies. WinSock is the most general. WinSock is the Microsoft library that most network client programs use to access TCP/IP intranets. Proxy Server installs a special version of these libraries on the LAN's workstations that directs all external communication to the Proxy Server. WinSock proxy can therefore handle all client programs that use WinSock, which are the great majority of network client programs designed for Windows-based networks. </p>
<p>
The client WinSock libraries and Proxy automatically negotiate the user's identity and thus fully implement single-logon. Proxy then applies access control to these requests based on the user account and the network service—for example, Web, FTP, or Telnet. (The "port" number in the request identifies the service because most network services use a standard port number.) The access control is quite simple. You first define the set of network services that you wish Proxy to allow and assign port information to each. For example, Web servers conventionally use TCP port 80. To grant your LAN users access to Web servers on the external intranet, you define a service named, for example, "HTTP" and assign it TCP port 80. (Fortunately, Proxy comes preconfigured with all the popular Internet services.) You then construct an ACL for each of these services—a list of Windows&nbsp;NT users and groups to which Proxy grants access. You can think of these services as Proxy's "objects"—that to which it applies ACLs. Proxy Server's Web Proxy handles only Web (HTTP) traffic and supports all browsers that use an Internet-standard proxy protocol called the CERN proxy protocol.</p>
<p>
A few general security notes:
<ul type=disc>
<li>
Note that in these scenarios, your LAN computers can only act as clients, and external sources only as servers. This prevents your users from setting up their own intranet servers. Proxy Server 2.0 relaxes this restriction for IIS, allowing LAN computers to act as Web servers to the external clients, but the Proxy-IIS integration tightly controls these scenarios.<br><br></li>
<li>
You can direct Proxy to exclude all communication with certain external network (IP) addresses. <br><br></li>
<li>
Proxy presents its own IP address to external sources. This "hides" the addresses of your LAN computers from the intranet.<br><br></li>
<li>
Proxy maintains a full transaction log and can show you its current proxy connections.</li>
</ul>
<p>
Microsoft Proxy Server 2.0 includes a variety of new security features:
<ul type=disc>
<li>
Supports the SOCKS proxy clients. SOCKS is a popular proxy protocol that many Web browsers support.<br><br></li>
<li>
Notifies administrators by e-mail when events indicate a possible attack on the server.<br><br></li>
<li>
Allows Web servers in the internal LAN to publish to the external intranet through the Proxy Server, and supports other LAN-based services to the intranet.<br><br></li>
<li>
Includes many enhanced administrative features and an expended security log.</li>
</ul>
<h4>Exchange Server</h4>
<p>
Microsoft Exchange Server is a scalable, secure, messaging and groupware server that fully leverages the security infrastructure of Windows&nbsp;NT. Microsoft Exchange Server manages three basic services:
<ul type=disc>
<li>
Electronic mail and group scheduling via personal or server-based mail folders.<br><br></li>
<li>
Hierarchical replicated Public Folders in which users can share messages, electronic forms, documents, programs, schedules, and other groupware information.<br><br></li>
<li>
A Directory that serves as a central repository for information about an organization and its users, including user information, distribution lists, and lists of mailboxes and public folders. A number of client applications peruse the directory summarizing its information, for example, as the company-wide address book. (The Exchange Directory is the predecessor of the Microsoft's new Active Directory.)</li>
</ul>
<p>
A large enterprise organizes itself into Exchange "sites." Exchange Server automatically replicates information throughout a site, backs it up, and applies certain fail-safe protections. It can also replicate information between sites. Exchange Server natively implements Internet-standard messaging protocols like SMTP, POP3, NNTP, and LDAP, and supports a wide variety of off-the-shelf Internet clients as well as Microsoft clients like Microsoft Outlook. Exchange Server also works with Microsoft's Internet Information Server (IIS) to give Web browsers ready access to data stored within Exchange Server.</p>
<p>
Microsoft Exchange Server fully supports Windows&nbsp;NT single-logon and user groups. Clients logging on to Exchange Server use Windows&nbsp;NT's Challenge/Response authentication to validate their user's Windows&nbsp;NT logon identity. Exchange then grants the user access to Exchange resources based on that identity. Exchange enforces access controls on all its objects, including mailboxes, public folders, and directory items. For example, a mailbox has "Users" permissions that allow reading and deleting messages, "Send As" to send mail with the mailbox as the return address, and "Permissions Admin" to manage the ACL on the mailbox. </p>
<p>
Microsoft Exchange Server ensures network privacy for network traffic, whether client-to-server or server-to-server. Exchange Servers use secure RPC to encrypt traffic among themselves and Exchange clients can optionally use secure RPC to encrypt communication to their server. Network encryption is also provided for Internet-standard protocols by layering SSL over protocols such as HTTP, POP3, NNTP, and LDAP.</p>
<p>
Exchange clients (including the Microsoft Outlook desktop information manager) also provide <i>end-to-end</i> security for e-mail. The versions of Microsoft Exchange and Outlook clients included with Exchange Server contain "Advanced Security" software that lets you easily sign and encrypt your e-mail digitally. Digital signing uses the MD5 algorithm and encryption uses either the CAST (40- or 64-bit for North American clients, 40-bit only for international clients) or DES cipher (56-bit, North American only). Signature and key-exchange functions use the RSA public/private key cipher. Because all users' public certificates are published in the Exchange Directory, secure e-mail can easily be sent to others in your organization. Users can also "trade" certificates over the Internet through e-mail. This lets you send secure e-mail over the Internet to users of Exchange or Outlook in other organizations. </p>
<p>
Before clients can sign or encrypt mail, they need to obtain their personal crypto keys and certificates. Microsoft Exchange Server includes a complete Key Management Server (KMS), with two main functions: to serve as a X.509 Certificate Authority for your Exchange organization and to provide secure key recovery<i> </i>for all users' private encryption keys. (This is based on software licensed from Entrust Technologies.) This key recovery function uses two public key sets for each user: one to digitally sign messages they produce, and a second to transmit decryption keys to recipients. The KMS generates the latter key set and archives it in a secure database for future recovery. If a user loses the private key file, forgets the password to the file, or leaves the company, an authorized KMS administrator can recover the user's private keys so that access can again be gained to previously encrypted e-mail. Signing key sets are generated privately by the client and the private signing key is never given to the server. This prevents administrators from being able to forge employees' electronic signatures, while still retaining the ability to recover user encryption keys.</p>
<p>
Future releases of Microsoft Exchange Server and Microsoft Outlook clients will expand on these features, and move them forward to comply with emerging standards. In particular, these features will be expanded to include industry-standard secure e-mail formats (S/MIME), and industry-standard certificate formats (X.509 V3). </p>
<h4>SQL Server</h4>
<p>
Microsoft SQL Server™ 7.0 is a distributed, client/server, relational database server that supports the popular SQL query language. It often serves an enterprise back-end server for a variety of network client applications, like the Web servers. SQL Server is an interesting security story and perhaps best illustrates the convergence of BackOffice products around Windows&nbsp;NT. SQL Server's popularity predates Windows&nbsp;NT, and therefore SQL Server had to implement most of its own security. With the emergence of version 7.0 and Windows&nbsp;NT 5.0, SQL Server is now firmly integrated into the Windows&nbsp;NT security environment.</p>
<p>
SQL Server fully supports Windows&nbsp;NT single-logon and user groups, and will later leverage Kerberos authentication so that front-end servers like IIS can pass on the client user's identity to SQL Server. It also implements its own internal roles, which are similar to Windows&nbsp;NT groups. SQL Server uses these roles largely for internal administration and the advantage is that you don't need to clutter the Windows&nbsp;NT group list with groups largely internal to the server.</p>
<p>
SQL Server applies access control to the database elements it manages (tables, views, stored procedures, as well as column-level permissions). Relational databases have a traditional format they use to present this access control, and therefore the format is different from other Windows&nbsp;NT ACLs, but the intent and degree of control are the same. You can assign a variety of database-specific permissions to Windows&nbsp;NT users, groups, or SQL Server roles. As in the Windows&nbsp;NT file system ACLs, you can also allow a group to control access to database element.</p>
<p>
SQL Server creates a full transaction log, supports a number of internal administrative roles, and includes a number of other database-specific security features. Future plans include using Secure RPC to encrypt network traffic.</p>
<h4>SNA Server</h4>
<p>
SNA Server (SNA is a traditional protocol used to access mainframe computers) lets your regular Windows-based workstations act as terminals into traditional mainframe computers, in which a window on your Windows workstation becomes a terminal connection to a remote mainframe. SNA Server is the connector that manages the traffic between Windows clients on its Windows&nbsp;NT-based network and, through an SNA connection, a group of mainframes.</p>
<p>
SNA Server integrates with Windows&nbsp;NT security to provide single-logon to the mainframes. SNA Server stores the mapping between Windows&nbsp;NT accounts to mainframe user credentials that it uses to log the user on to the mainframes (at least when the mainframe protocols allow). These credentials are always encrypted when on the Windows&nbsp;NT-based network. SNA Server also controls overall access to mainframes based on the Windows&nbsp;NT user identity.</p>
<p>
With the help of a few third-party programs, SNA Server can also synchronize passwords between Windows&nbsp;NT accounts and their corresponding host accounts. When a user changes a password in either location, SNA Server automatically changes it in the other.</p>
<p>
SNA Server leverages Microsoft's Secure RPC protocols and can encrypt all traffic over the Windows&nbsp;NT-based network. This gives rise to an interesting configuration, in which an SNA Server sits next to its mainframes in a locked room but attaches to a wide-area Windows&nbsp;NT network, which could even include remote (RAS) connections. The Windows&nbsp;NT cryptographic and authentication umbrella fully protects the distributed system as a whole. With the Windows&nbsp;NT wealth of cryptographic services, secure sites might prefer this configuration to encrypted SNA networks.</p>
<h4>Microsoft Internet Explorer (IE)</h4>
<p>
Authenticode forms an integral part of Microsoft Internet Explorer security. You can instruct Internet Explorer to check Authenticode on all active elements and whether to give you the option of running the element anyway if the check fails. Internet Explorer also shows the complete certificate including its CA to help make your decision. </p>
<p>
As we mentioned above, Internet Explorer and Microsoft's Web server (IIS) can also work together to fully implement single-logon. The Web server can automatically use the browsing user's Windows&nbsp;NT logon identity for access to all Web pages and services. They use the Microsoft Challenge/Response protocol for authentication so unprotected passwords never pass over the network. They can also require SSL, which adds additional protection for the user's credentials. These features achieve the overall goals of single-logon authentication, access control, and encryption.</p>
<p>
Internet Explorer 4.0 introduced a new feature called zones. There are about one dozen detailed security actions you can direct Internet Explorer to perform on active elements. Each directs Internet Explorer to run or ignore the element, or query the user for the decision. Internet Explorer predefines three typical sets of these parameters, which it names: High (the most restrictive), Medium, and Low (most permissive). Zones let you specify which settings apply to which Web address, but in a structured and easy-to-use manner. You begin by dividing the Web sites you visit into four zones and assign one of the standard sets of parameters to each zone. (You can also build a custom set for a zone, but you seldom need to.) The four standard zones are:
<ul type=disc>
<li>
<b>Trusted</b>: You fill this list of addresses you implicitly "trust." You normally assign this the Low setting (least restrictive).<br><br></li>
<li>
<b>Restricted</b>: A list that you explicitly don't trust, which typically has the High setting (most restrictive).<br><br></li>
<li>
<b>Local Intranet</b>: This is not an explicit list of sites. The purpose of this zone recognizes that most users work on an intranet within their company that has some level of trust, but that users also have access to the external Internet. The Local Intranet zone generally includes sites behind your local proxy server or firewall, such as Microsoft Proxy Server. You typically set this to Medium, although it depends on how secure you deem your own intranet!<br><br></li>
<li>
<b>Internet</b>: A catch-all that implicitly includes all sites not in one of the other zones, typically the "general Internet." The High setting is typical, although you might use Medium.</li>
</ul>
<p>
Internet Explorer fully supports the latest version of SSL and PCT. You can also direct Internet Explorer to use only SSL in certain zones.</p>
<p>
Finally, while these features are powerful, it's hard to assume that day-to-day users can deal with even the simple ones. Must they each judge the degree to which they can trust the sites they visit? Microsoft's Internet Explorer Administration Kit lets site administrators centrally manage the Internet Explorer installations at their site. With this kit, administrators can centrally configure all these security settings and essentially prevent users from changing them. For more information, check out the Microsoft Internet Explorer 4.0 white paper at <a href="http://www.microsoft.com/ie/press/whitepaper/iwhite/white005.htm">http://www.microsoft.com/ie/press/whitepaper/iwhite/white005.htm</a>.</p>
<h4>Outlook (e-mail)</h4>
<p>
Electronic mail is the proverbial example of the need for cryptographic technology. Although there's never been a lack of raw crypto technology, until S/MIME there's never been an industry-wide standard strong enough to infiltrate the amazingly wide world of e-mail clients. S/MIME is a widely supported standard for signing and encrypting e-mail. It provides all the basic cryptographic protections we presented earlier: encrypting (data hiding), integrity, and ensuring the identities of both sender and receiver. S/MIME incorporates standard public and private key ciphers, hash functions, and the certificate technologies. </p>
<p>
At Microsoft we've fully supported the S/MIME effort and have announced S/MIME functionality in Outlook and Outlook Express e-mail clients. While conformance to S/MIME is the goal, the secret to the success of Outlook is its utilization of the entire Microsoft public key and certificate infrastructure. It is perhaps one of the best examples of "putting it all together."</p>
<h4>…and others</h4>
<p>
There are many other success stories. For example, Microsoft's FrontPage® Web authoring product has an extension that lets Web administrators control access to their Web content in simple terms by assigning Windows&nbsp;NT accounts and groups permission to author, browse, and administer the Web content. These are simple features that completely use the IIS single-logon authentication, impersonation, and the Windows&nbsp;NT file system ACLs. The Enterprise Edition of Microsoft Site Server is a comprehensive package that assists businesses in establishing electronic commerce and shopping sites on the Web. Site Server implements virtually no security itself because it completely leverages IIS and Windows&nbsp;NT security, as well as commercial transaction security products like SET for credit card payments. </p>
<h2>Summary</h2>
<p>
We can now put our picture together. We've seen the basic principles upon which Microsoft is building its security architecture. They are basic, time-honored, effective, and state-of-the-art, and target the network environment. The features of the Windows&nbsp;NT operating system are the bedrock of system security, its domain-based security features kept secure by its underlying kernel architecture and pervasive access control lists. Microsoft's enabling technologies bring common but complicated security technology (including those used within Windows&nbsp;NT itself) within easy grasp of application programs. This ensures you an ongoing selection of consistently secure applications. </p>
<p>
<img src="mssecure5.gif" border=0></p>
<p>
Finally, BackOffice and its companions tightly integrate into and leverage the Windows&nbsp;NT security environment and complete our security picture. We hope that by now that you agree that the Microsoft Windows&nbsp;NT security environment is one worthy of protecting your enterprise networking environment. </p>
<p>
Thanks for considering our story.</p>
<p>
This article was written for Microsoft by Steve Sutton, president of <i>Trusted Systems Services</i>, <i>Inc</i>., and author of the popular book <i>Windows&nbsp;NT Security Guide (Addison-Wesley, 1997</i>).</p>
<p>
<i>The information contained in this document represents the current view of Microsoft Corporation on the issue discussed as of the date of publication. Because Microsoft must respond to changing market conditions, it should not be interpreted to be a commitment on the part of Microsoft, and Microsoft cannot guarantee the accuracy of any information presented after the date of publication.</i></p>
<p>
<i>This document is for informational purposes only. MICROSOFT MAKES NO WARRANTIES, EXPRESS OR IMPLIED, IN THIS DOCUMENT.</i></p>
</BODY>
</HTML>

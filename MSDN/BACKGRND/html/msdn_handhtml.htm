<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Handling Events in Dynamic HTML</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_handhtml"></a>Handling Events in Dynamic HTML</h1>
<p>
Nancy Winnick Cluts<br>
Developer Technology Engineer<br>
Microsoft Corporation</p>
<p>
March 9, 1998</p>
<h4>Contents</h4>
<p>
<a href="#handhtml_intro">Introduction</a><br>
<a href="#handhtml_dhtml">DHTML Events</a><br>
<a href="#handhtml_bub">Bubble, Bubble, Toil and Trouble</a><br>
<a href="#handhtml_canc">Canceling the Default Action</a><br>
<a href="#handhtml_summ">Summary</a></p>
<h1><a name="handhtml_intro"></a>Introduction</h1>
<p>
Those of you who are Microsoft® Windows®, OS/2, or UNIX programmers already understand the concept of event handling. Within Windows, it is common practice for a programmer to trap events and call a function in response. For example, when you click a button in a dialog box, the code that is written to handle the dialog box includes code that is called when a button is pressed. The button press is the <i>event</i> and the function that is subsequently called is the <i>action</i>. Events are not new to Internet Explorer 4.0; you were able to trap events on a small subset of HTML elements in Microsoft Internet Explorer 3.<i>x</i> as well as in Netscape Navigator. With Internet Explorer 4.0 and Dynamic HTML (DHTML), all elements are the source of events and properties. Before we go on, let's define some terms in Table 1.</p>
<p class=label>
<b>Table 1. Event Terms and Definitions</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=21%><b>Term</b></td>
<td class=label width=79%><b>Definition</b></td>
</tr>
<tr valign=top>
<td width=21%>Event</td>
<td width=79%>A notification that occurs in response to an action.</td>
</tr>
<tr valign=top>
<td width=21%>Event handler</td>
<td width=79%>A function or routine written in a scripting language that receives control when the event corresponding to the handler occurs.</td>
</tr>
<tr valign=top>
<td width=21%>Event binding</td>
<td width=79%>The association of script with an event (on a document, window, or element).</td>
</tr>
</table><br>
<h3><a name="handhtml_dhtml"></a>DHTML Events</h3>
<p>
Now that you know what an event is, let's take a look at the events that are automatically generated using DHTML. An excellent article about the architecture of events is <a href="msdn_ie4event.htm">"Bubble Power: Event Handling in Microsoft Internet Explorer 4.0,"</a> by Michael Wallent. If you are already proficient with event-based programming, I heartily recommend reading this article. If you are just learning, you will want to save this link for later (but not much later—you'll be an expert in no time). Another great place to find information about event handling in DHTML is the Internet Client SDK (MSDN™ Library, Platform SDK). Drill down in the content list under Dynamic HTML/Document Object Model/Understanding the Event Model for the documentation. Finally, check out the book <i>Inside Dynamic HTML</i>, by Scott Isaacs (See Microsoft Press® for ordering information: <a href="http://mspress.microsoft.com/ORDER/bookpage.asp?title_id=1433">http://mspress.microsoft.com/ORDER/bookpage.asp?title_id=1433</a>). Chapter 3 covers the DHTML event model fully and should fill in any of the remaining blanks you might have. Scott's Web site (http://www.insideDHMTL.com/) contains up-to-date information on DHTML.</p>
<p>
If you aren't going to read the documentation (tsk, tsk, tsk), I'll give you a primer on events in the next section.</p>
<h4>How events work</h4>
<p>
Here's a step-by-step description of the flow of events:
<ol>
<li>
The user does something on his machine, such as press a key or click with the mouse (there are also some nonuser-initiated events, such as the page load, that can be handled).<br><br></li>
<li>
An event is fired. When an event is fired, the element affected by the event gets to handle it first through its event handler.<br><br></li>
<li>
Next, the event will be passed up to successive parent elements until it gets to the document or until one of the event handlers cancels passing the event upward (known as event bubbling).<br><br></li>
<li>
Finally, a default action occurs. The default is independent of event bubbling. You must cancel the default in your script if you want to stop the default action from occurring.</li>
</ol>
<p>
For example, let's say that you have a handler for a mouse click and your code looks something like this:</p>
<pre><code>&lt;HTML&gt;
&lt;HEAD&gt;&lt;SCRIPT LANGUAGE="JavaScript"&gt;
 &nbsp;&nbsp;&nbsp;&nbsp; function wasClicked()
 &nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; window.alert("I was clicked " + window.event.srcElement.tagName);
 &nbsp;&nbsp;&nbsp;&nbsp; }
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;

&lt;BODY onclick="wasClicked()"&gt;
&lt;H1&gt;Welcome!&lt;/H1&gt;
&lt;P&gt;This is a very &lt;B&gt;short&lt;/B&gt; document.
&lt;/BODY&gt;
&lt;/HTML&gt;
</code></pre>
<p>
When the user clicks the mouse, the event is fired. The notification is created and the event handler, <b>wasClicked</b>, is called. Within this function, an <i>alert</i> (a pop-up window) is presented informing you which tag was clicked. The browser's Event object<i> </i>for the page has properties, such as the name of the tag, associated with it. In the code above, the name of the tag is accessed via the event object's <b>window.event.srcElement.tagName</b> property.</p>
<h2>The Event Object</h2>
<p>
The Event object is available while the script that contains the element is running. If you want to get information about what key was pressed or where the mouse is, you need to create an event handler in your script to trap those events and retrieve the information about the element on which the event has occurred (the srcElement). You retrieve the information about an element through the event's properties. All event properties are available to all events; however, not all properties are useful for all events. For example, the <b>altKey</b> property really only makes sense for a key-press event. Or, to put it in more human terms, let's say that you are late for work and you have decided to bend the rules a bit about how fast you should go. Invariably, you are stopped by a police officer. On the speeding ticket, one of the items listed would be how fast you were going. The miles per hour would then be a property of the event (speeding).</p>
<p>
The following table lists the event properties that are supported. Full documentation on the Event object can be found in the Internet Client SDK.</p>
<p class=label>
<b>Table 2. Event Properties</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=19%><b>Property</b></td>
<td class=label width=81%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=19%><b>AltKey</b></td>
<td width=81%>The state of the ALT key: TRUE if down, FALSE otherwise.</td>
</tr>
<tr valign=top>
<td width=19%><b>Button</b></td>
<td width=81%>Which mouse button is pressed.</td>
</tr>
<tr valign=top>
<td width=19%><b>CancelBubble</b></td>
<td width=81%>Stops events from bubbling up the parent hierarchy.</td>
</tr>
<tr valign=top>
<td width=19%><b>ClientX</b></td>
<td width=81%>The X position of the mouse within the client window.</td>
</tr>
<tr valign=top>
<td width=19%><b>ClientY</b></td>
<td width=81%>The Y position of the mouse within the client window.</td>
</tr>
<tr valign=top>
<td width=19%><b>CtrlKey</b></td>
<td width=81%>The state of the CTRL key: TRUE if down, FALSE otherwise.</td>
</tr>
<tr valign=top>
<td width=19%><b>FromElement</b></td>
<td width=81%>Which element the mouse was on during an <b>onmouseover</b> or <b>onmouseout </b>event.</td>
</tr>
<tr valign=top>
<td width=19%><b>KeyCode</b></td>
<td width=81%>Which (Unicode) key was pressed.</td>
</tr>
<tr valign=top>
<td width=19%><b>OffsetX</b></td>
<td width=81%>The X position of the mouse relative to the current container.</td>
</tr>
<tr valign=top>
<td width=19%><b>OffsetY</b></td>
<td width=81%>The Y position of the mouse relative to the current container.</td>
</tr>
<tr valign=top>
<td width=19%><b>Reason</b></td>
<td width=81%>Used on a data source object to give the reason for completion of the data transfer.</td>
</tr>
<tr valign=top>
<td width=19%><b>ReturnValue</b></td>
<td width=81%>The return value from the event.</td>
</tr>
<tr valign=top>
<td width=19%><b>ScreenX</b></td>
<td width=81%>The X position relative to the screen size.</td>
</tr>
<tr valign=top>
<td width=19%><b>ScreenY</b></td>
<td width=81%>The Y position relative to the screen size.</td>
</tr>
<tr valign=top>
<td width=19%><b>ShiftKey</b></td>
<td width=81%>The state of the SHIFT key: TRUE if down, FALSE otherwise.</td>
</tr>
<tr valign=top>
<td width=19%><b>SrcElement</b></td>
<td width=81%>The element that fired the event.</td>
</tr>
<tr valign=top>
<td width=19%><b>SrcFilter</b></td>
<td width=81%>The filter object that caused the <b>onfilterchange</b> event to fire.</td>
</tr>
<tr valign=top>
<td width=19%><b>ToElement</b></td>
<td width=81%>Which element the mouse moved to during an <b>onmouseover</b> or <b>onmouseout </b>event.</td>
</tr>
<tr valign=top>
<td width=19%><b>Type</b></td>
<td width=81%>The event name.</td>
</tr>
<tr valign=top>
<td width=19%><b>X</b></td>
<td width=81%>The X position, relative to the parent hierarchy; positioned using CSS positioning.</td>
</tr>
<tr valign=top>
<td width=19%><b>Y</b></td>
<td width=81%>The Y position, relative to the parent hierarchy; positioned using CSS positioning.</td>
</tr>
</table><br>
<h3><a name="handhtml_bub"></a>Bubble, Bubble, Toil and Trouble</h3>
<p>
As I mentioned earlier, when an event is fired, it is passed up the parent hierarchy until either the event forwarding is cancelled (this is known as canceling the bubble) or until you get to the top of the parent chain (the document). In the code below (shamelessly pilfered from the Internet Client SDK), you see a very simple script that has two handlers for mouse clicks: one is attached to the &lt;BODY&gt; and one to the &lt;P&gt;. Running this code demonstrates the parent/child relationship of document elements. Clicking on the word "very" will produce two pop-up windows: first, "You clicked me P," then&nbsp; "I was clicked P." The handler <b>wasAlsoClicked</b> is called first, then the event goes up the parent chain and the <b>wasClicked</b> handler is called.</p>
<pre><code>&lt;HTML&gt;
&lt;HEAD&gt;&lt;SCRIPT LANGUAGE="JavaScript"&gt;
 &nbsp; function wasClicked() {
 &nbsp;&nbsp; alert("I was clicked " + window.event.srcElement.tagName);
 &nbsp; }
 &nbsp; function wasAlsoClicked() {
 &nbsp;&nbsp; alert("You clicked me " + window.event.srcElement.tagName);
 &nbsp; }
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;

&lt;BODY onclick="wasClicked()"&gt;
&lt;H1&gt;Welcome!&lt;/H1&gt;
&lt;P onclick="wasAlsoClicked()"&gt;This is a very &lt;B&gt;short&lt;/B&gt; document.
&lt;/BODY&gt;
&lt;/HTML&gt;
</code></pre>
<h4>Cancelling the bubble</h4>
<p>
Now that you've seen how events move up the parent chain, how do you stop an event from bubbling up the parent chain? You can do this by setting the <b>cancelBubble </b>property on the event. The example below (also from the Internet Client SDK—do you get the feeling you should download this SDK?) demonstrates what happens when you cancel an event. If you run the example below and click on the &lt;H1&gt; text, "Welcome," the heading will turn green. If you click on the &lt;P&gt; text, "This is a very short document," the text will be underlined. If the bubble was not cancelled, the parent item would also be underlined.</p>
<pre><code>&lt;HTML&gt;
&lt;HEAD&gt;&lt;SCRIPT LANGUAGE="JavaScript"&gt;
 &nbsp;&nbsp;&nbsp;&nbsp; function setBodyStyle()
 &nbsp;&nbsp;&nbsp;&nbsp; { // Set all headings to green.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var coll = document.all.tags("H1");

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (i=0; i&lt;coll.length; i++)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; coll.item(i).style.color = "green";
 &nbsp;&nbsp;&nbsp;&nbsp; }

 &nbsp;&nbsp;&nbsp;&nbsp; function setParaStyle()
 &nbsp;&nbsp;&nbsp;&nbsp; { // Underline the paragraph.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var el = window.event.srcElement;

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while ((el != null) &amp;&amp; (el.tagName != "P"))
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; el = el.parentElement;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (el != null)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; el.style.textDecoration = "underline";
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; window.event.cancelBubble = true;
 &nbsp;&nbsp;&nbsp;&nbsp; }
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;

&lt;BODY onclick="setBodyStyle()"&gt;
 &nbsp; &lt;H1&gt;Welcome!&lt;/H1&gt;
 &nbsp; &lt;P onclick="setParaStyle()"&gt;This is a very &lt;B&gt;short&lt;/B&gt; document.
&lt;/BODY&gt;
&lt;/HTML&gt;
</code></pre>
<h3><a name="handhtml_canc"></a>Canceling the Default Action</h3>
<p>
I've given you an example that demonstrates how you can cancel bubbling. Now let's look at an example that demonstrates how to cancel the default action.</p>
<pre><code>&lt;HTML&gt;
&lt;HEAD&gt;&lt;SCRIPT LANGUAGE="JavaScript"&gt;&lt;!--
  function confirmDefault()
  {
 &nbsp;&nbsp; sMsg = "Do you want to go to " + window.event.srcElement.innerText + "?&nbsp;&nbsp; ";
 &nbsp;&nbsp;&nbsp;&nbsp; if (!window.confirm(sMsg)) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; window.event.returnValue = false;
 &nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp; }
//--&gt;&lt;/SCRIPT&gt;

&lt;TITLE&gt;&lt;/TITLE&gt;
&lt;/HEAD&gt;

&lt;BODY&gt;
&lt;A HREF="http://www.microsoft.com/sitebuilder/" ONCLICK="confirmDefault()"&gt;
&lt;P&gt;SiteBuilder Home Page&lt;/A&gt;&lt;/P&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</code></pre>
<p>
In the script above, you can see that the OnClick handler is created to confirm whether the user will go to the site listed. If the user clicks the Cancel button, the default action (navigating to the link) is cancelled.</p>
<h3><a name="handhtml_summ"></a>Summary</h3>
<p>
You should now have a pretty good idea of event basics with DHTML. For detailed information, refer to the Internet Client SDK under Dynamic HTML. The documentation provides not only information about how to use DHTML, but also interactive samples. Another good source for information is the Microsoft Site Builder Network (SBN) Web site (<a href="http://www.microsoft.com/sitebuilder/">http://www.microsoft.com/sitebuilder/</a>). There is a section devoted to DHTML (<a href="http://www.microsoft.com/sitebuilder/workshop/author/dhtml/">http://www.microsoft.com/sitebuilder/workshop/author/dhtml/</a>) as well as a regular SBN magazine column, "DHTML Dude," by Michael Wallent (<a href="http://www.microsoft.com/sitebuilder/columnists/default.asp">http://www.microsoft.com/sitebuilder/columnists/default.asp</a>).</p>
<p>
<i>Did you find this article useful? Gripes? Compliments? Suggestions for other articles? Drop me a line at </i><a href="mailto:nancycl@microsoft.com">nancycl@microsoft.com</a><i> and let me know.</i></p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Microsoft Index Server Tips and Tricks</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_istips"></a>Microsoft Index Server Tips and Tricks</h1>
<p>
Microsoft Corporation</p>
<p>
August 1997</p>
<h3>Contents</h3>
<p>
<a href="#istips_querying">Querying</a></p>
<p>
<a href="#istips_indexing">Indexing</a></p>
<p>
<a href="#istips_granting">Granting Interactive Logon Privileges</a></p>
<p>
<a href="#istips_indexingsql">Indexing SQL Server</a></p>
<h2>Introduction</h2>
<p>
During the development of Microsoft® Index Server, the team discovered and invented a number of different ways to use the full power of Index Server. Some of these discoveries are based on helpful feedback from beta testers and customers. This article shares these discoveries and inventions with you.</p>
<h2><a name="istips_querying"></a>Querying</h2>
<p>
The tips in this section help you to further refine queries to return exactly what you are searching for.</p>
<h3>Compound Words</h3>
<p>
To find all the compound forms when querying, enter the hyphenated form of the compound. A common example is the word <i>database</i>, which is a compound of <i>data</i> and <i>base</i>. Often, people are inconsistent in how they create the compound, so forms such as <i>data base </i>and <i>data-base </i>will appear in text. If you query for <i>data-base</i>, Index Server will search for and return all instances of <i>data-base</i>, <i>data base</i>, and <i>database</i>.</p>
<h3>Property Queries</h3>
<p>
In the .idq file, if you set the <i>CiForceUseCi</i> variable equal to True, some property queries with regular expressions will behave differently. For example, if the file Ciquery.htm has been indexed, Index Server will return hits for queries such as:</p>
<pre><code>#filename ciquery.htm
#filename *htm
#filename ciquery*
</code></pre>
<p>
For the <b>FileName</b> property, both the file name and reversed file name are stored in the content index. The reversed file name is needed to resolve the query <code>#filename *.htm</code> because the content index can match prefixes, but not suffixes.</p>
<p>
If a file named Test.doc has been indexed, Index Server will return hits for queries such as <code>#doctitle test*</code> and <code>#doctitle test.doc</code>, but not for queries such as <code>#doctitle *.doc</code>. See the <b>DocTitle</b> reference on the "Querying" page of the Microsoft Windows NT® Server 4.0 Web site.</p>
<p>
<b>Vpath</b> (as well as <b>Path</b> and <b>Characterization</b>) are not stored in the content index. Therefore, when <i>CiForceUseCi</i> is set to True, Index Server will not return hits for queries such as the following, even if Test.doc has been indexed:</p>
<pre><code>#vpath /test.doc
#vpath /tes*
</code></pre>
<h2><a name="istips_indexing"></a>Indexing</h2>
<h3>Recently Accessed Pages</h3>
<p>
You may often find yourself trying to find information you recently viewed using your browser. If you find yourself thinking "I remember looking at a page just the other day that&nbsp;.&nbsp;.&nbsp;.&nbsp;," then the following little trick may be useful.</p>
<p>
If you're running Index Server on the same computer you run your browser on (for example, on a Microsoft Windows&nbsp;NT Workstation with Peer Web Services), you can create a virtual directory for your browser's cache folder. If you do this, whenever you access pages on your intranet or on the Internet, Index Server will index the pages for you automatically.</p>
<p>
When you post queries, pages you accessed recently will be returned. The references to the pages won't be to the actual pages on the Web, but rather to the cached pages in your browser cache. This isn't usually a big problem because just getting the page back will often refresh your memory. Also, the cached pages will often contain links to the original site.</p>
<h3>Log Entries</h3>
<p>
If you've ever tried to find something in the Microsoft Internet Information Sever (IIS) logs, the preceding trick should make the task much easier. Just create a virtual directory for the IIS logs directory. Index Server will index the logs by using the text filter. This allows you to post queries for entries in the log and use hit highlighting in Index Server&nbsp;1.1 to find the entries quickly.</p>
<p>
If fact, because Index Server logs all queries, you can actually query for the words and terms other users are querying for!</p>
<h3>Non-Latin Characters</h3>
<p>
To search for non-Latin characters in set of documents, such as Cyrillic characters, the locale setting in the .idq file must be the same as the locale setting for the server. For example, to set <i>CiLocale</i> in your .idq file to Russian, type the RU code. Alternatively, you can set the HTTP_ACCEPT_LANGUAGE tag in your browser to Russian.</p>
<h3>Table of Base Charsets, Display Names, and Aliases</h3>
<p>
To identify the code page of a Hypertext Markup Language (HTML) file, the HTML filter looks for a meta tag that specifies the charset of the page. For example, the following meta tag specifies that the HTML page uses the Windows-1252 code page:</p>
<pre><code>&lt;meta http-equiv="Content-Type" content="text/html; charset= Windows-1252"&gt;
</code></pre>
<p>
If a code page has been specified, the HTML filter uses the code page to the convert the multibyte character encoding of the page to Unicode.</p>
<p>
In Table 1, the Base charset lists the basic translation software built into Microsoft Internet Explorer version&nbsp;3.0 or available as Langpack. The Aliases column lists all other character-set IDs that are recognized and can be represented without translation by using the base charset translation method. This does not in all cases mean that aliases and the base character set represent the same character set, but that the aliases character set can be a subset of the base character set. Base charset is not a recognized name unless repeated in the Aliases column.</p>
<p>
The Display name column represents the name for this character set in the Internet Explorer user interface and should be a localizable resource.</p>
<p class=label>
<b>Table 1. Base charsets</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=31%><b>Base charset</b></td>
<td class=label width=36%><b>Display name</b></td>
<td class=label width=33%><b>Aliases (charset IDs)</b></td>
</tr>
<tr valign=top>
<td width=31%>1252</td>
<td width=36%>Western</td>
<td width=33%>us-ascii, iso8859-1, ascii, iso_8859-1, iso-8859-1, ANSI_X3.4-1968, iso-ir-6, ANSI_X3.4-1986, ISO_646.irv:1991, ISO646-US, us, IBM367, cp367, csASCII, latin1, iso_8859-1:1987, iso-ir-100, ibm819, cp819, Windows-1252</td>
</tr>
<tr valign=top>
<td width=31%>28592</td>
<td width=36%>Central European (ISO)</td>
<td width=33%>iso8859-2, iso-8859-2, iso_8859-2, latin2, iso_8859-2:1987, iso-ir-101, l2, csISOLatin2</td>
</tr>
<tr valign=top>
<td width=31%>1250</td>
<td width=36%>Central European (Windows)</td>
<td width=33%>Windows-1250, x-cp1250</td>
</tr>
<tr valign=top>
<td width=31%>1251</td>
<td width=36%>Cyrillic (Windows)</td>
<td width=33%>Windows-1251, x-cp1251</td>
</tr>
<tr valign=top>
<td width=31%>1253</td>
<td width=36%>Greek (Windows)</td>
<td width=33%>Windows-1253</td>
</tr>
<tr valign=top>
<td width=31%>1254</td>
<td width=36%>Turkish (Windows)</td>
<td width=33%>Windows-1254</td>
</tr>
<tr valign=top>
<td width=31%>932</td>
<td width=36%>Shift-JIS</td>
<td width=33%>shift_jis, x-sjis, ms_Kanji, csShiftJIS</td>
</tr>
<tr valign=top>
<td width=31%>EUC-JP</td>
<td width=36%>EUC</td>
<td width=33%>Extended_UNIX_Code_Packed_Format_for_Japanese, csEUCPkdFmtJapanese, x-euc-jp</td>
</tr>
<tr valign=top>
<td width=31%>JIS</td>
<td width=36%>JIS</td>
<td width=33%>csISO2022JP, iso-2022-jp1257&nbsp;Windows-1257</td>
</tr>
<tr valign=top>
<td width=31%>950</td>
<td width=36%>Traditional Chinese (BIG5)</td>
<td width=33%>big5, csbig5, x-x-big5936Simplified ChineseGB_2312-80, iso-ir-58, chinese, csISO58GB231280, csGB2312, gb2312</td>
</tr>
<tr valign=top>
<td width=31%>20866</td>
<td width=36%>Cyrillic (KOI8-R)</td>
<td width=33%>csKOI8R, koi8-r</td>
</tr>
<tr valign=top>
<td width=31%>949</td>
<td width=36%>Korean</td>
<td width=33%>ks_c_5601, ks_c_5601-1987, korean, csKSC56011987</td>
</tr>
</table><br>
<p class=label>
<b>The following have been added for Internet Explorer version 3.0a: </b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Base charset</b></td>
<td class=label width=33%><b>Display name</b></td>
<td class=label width=34%><b>Aliases (charset IDs)</b></td>
</tr>
<tr valign=top>
<td width=33%>1255</td>
<td width=33%>Hebrew</td>
<td width=34%>ISO_8859-8:1988, iso-ir-138, ISO_8859-8, ISO-8859-8, hebrew, csISOLatinHebrew</td>
</tr>
<tr valign=top>
<td width=33%>1256</td>
<td width=33%>Arabic</td>
<td width=34%>Windows-1256</td>
</tr>
<tr valign=top>
<td width=33%>874</td>
<td width=33%>Thai</td>
<td width=34%>Windows-874</td>
</tr>
<tr valign=top>
<td width=33%>1258</td>
<td width=33%>Vietnamese</td>
<td width=34%>Windows-1258</td>
</tr>
</table><br>
<p class=label>
<b>The following Base charset will be added in a future version of Internet Explorer: </b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Base charset</b></td>
<td class=label width=33%><b>Display name</b></td>
<td class=label width=34%><b>Aliases (charset IDs)</b></td>
</tr>
<tr valign=top>
<td width=33%>UNICODE</td>
<td width=33%>Unicode UTF-8UTF-8, unicode-1-1-utf-8, unicode-2-0-utf-8</td>
<td width=34%></td>
</tr>
</table><br>
<h2><a name="istips_granting"></a>Granting Interactive Logon Privileges</h2>
<p>
In some cases a user may need interactive logon privileges on a computer.</p>
<p>
To grant these privileges:
<ol>
<li>
Open the Windows&nbsp;NT User Manager for Domains on Server&nbsp;A.<br><br></li>
<li>
In the <b>Username</b> list, select the user ID you want to grant logon privileges to.<br><br></li>
<li>
From the <b>Policies</b> menu, select <b>User Rights</b>.<br><br></li>
<li>
In the <b>Right</b> box on the <b>User Rights Policy </b>dialog box, click the arrow and select <b>Log on locally</b>.</li>
</ol>
<p>
A user name may not appear in the <b>Grant To </b>list on the <b>User Rights Policy </b>dialog box.</p>
<p>
To add the user:
<ol>
<li>
Click <b>Add</b>.<br><br></li>
<li>
In the <b>List Names From </b>box, click the arrow and select the domain on which you want to grant interactive logon privileges.<br><br></li>
<li>
Click <b>Show Users</b>.<br><br></li>
<li>
From the <b>Names</b> list, select the user, and click <b>Add</b>.<br><br></li>
<li>
Click <b>OK</b>.<br><br></li>
<li>
Make sure the user appears in the <b>Grant To </b>list in the <b>User Rights Policy </b>dialog box.<br><br></li>
<li>
Click <b>OK</b>.</li>
</ol>
<h2><a name="istips_indexingsql"></a>Indexing SQL Server</h2>
<p>
In addition to searching for text in various formats, Index Server can search for Web-based textual data in tables formatted with Microsoft SQL Server version 6.5 relational database management system. This article gives you two examples:
<ul type=disc>
<li>
<a href="#istips_ex1">Example 1: Stores Table</a><br><br></li>
<li>
<a href="#istips_ex2">Example 2: Pub_Info Table</a></li>
</ul>
<p>
SQL Server contains a stored procedure, <b>sp_makewebtask</b>. This stored procedure exports SQL Server data as Web pages. By combining custom stored procedures and triggers, you can generate a Web page for each record in a SQL Server table and then index the Web pages with Index Server.</p>
<p>
The following procedure outlines how this is done.
<ol>
<li>
Select a directory that Index Server can access.<p class=tl>
This directory will store Web pages generated from the SQL Server table. In <a href="#istips_ex1">Example1: Stores Table</a>, Web pages are generated in the D:\Sql_web\Pubs\Stores directory.</P></li>
<li>
Create a virtual directory corresponding to the directory you selected in Step 1. For both examples, create a virtual directory /pubs and point it to the D:\Sql_web\Pubs directory.<br><br></li>
<li>
Create a stored procedure that will generate one HTML page per record.<p class=tl>
The primary key value of the record will be used in the name of the generated HTML page to guarantee a one-to-one mapping between a record and an HTML page.</P></li>
<li>
Create an .idc file to generate Web pages for all the rows in the table.<p class=tl>
You can run this page once initially, or periodically, to generate Web pages for all the records in the table.</P></li>
</ol>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The code in the examples assumes that the directory path name is fewer than 100 characters. For paths with more than 100 characters, you must increase the parameters in the stored procedures.</p>
<p>
The following steps are optional.
<ol>
<li>
Create an Insert/Update trigger on the table.<p class=tl>
This trigger will invoke the stored procedure you created, with the appropriate parameters. Triggers are necessary only if you want to generate Web pages automatically on updates to the table. If you would rather run a batch command periodically to generate the pages, triggers are not necessary.</P></li>
<li>
Create a Delete trigger on the table.<p class=tl>
This trigger will delete the Web page corresponding to the record that was deleted.</P></li>
<li>
Create a template file to describe the layout of the generated Web pages.<p class=tl>
In the Stores Table Example, the template file is Stores.tpl.</P></li>
</ol>
<h3>Preliminaries</h3>
<p>
To understand the two examples, you need to be familiar with the following:
<ul type=disc>
<li>
The Transact-SQL language.<br><br></li>
<li>
SQL Server operations, tools, stored procedures, and triggers.<br><br></li>
<li>
The syntax and parameter description for the <b>sp_makewebtask</b> stored procedure.<br><br></li>
<li>
.idc script files and .htx files.</li>
</ul>
<p>
You can find information about the first three items in the SQL Server documentation and information about .idc and .htx files in the IIS documentation.</p>
<p>
Once you have familiarized yourself with all the items in this list, you need to do the following:
<ol>
<li>
Set up the Open Database Connectivity (ODBC) entry as described in the IIS database sample pages.<p class=tl>
These examples also use the Web SQL System data source name (DSN). Therefore, make the appropriate changes to the following examples if you have:</P><ul type=disc>
<li>
Changed the account name from the default (sa)<p class=tl>
Or</P></li>
<li>
Assigned a password to the Web SQL System DSN. The default is no password.</li>
</ul>
</li>
<li>
Issue all SQL Server queries through the ISQL/w tool, which comes with SQL Server.</li>
</ol>
<h2><a name="istips_ex1"></a>Example 1: Stores Table</h2>
<p>
The first example uses the stores table in the pubs sample database, which comes with SQL Server. In the stores table, all the columns are smaller than 255 characters. If a text column is likely to have more than 255 characters, then you must use a slightly different technique, which is described in Example 2: Pub_Info Table.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;All the quotation marks in the code samples are single marks (' ').</p>
<h3>Schema for the Stores Table</h3>
<p>
The following table shows the schema of the stores table:</p>
<p class=label>
<b>Table 2. Stores table schema</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=32%><b>Column Name </b></td>
<td class=label width=35%><b>Data Type </b></td>
<td class=label width=33%><b>Key/Index</b></td>
</tr>
<tr valign=top>
<td width=32%><i>store_id</i></td>
<td width=35%>char(4)</td>
<td width=33%>Primary key</td>
</tr>
<tr valign=top>
<td width=32%><i>store_name</i></td>
<td width=35%>varchar(40)&nbsp;</td>
<td width=33%></td>
</tr>
<tr valign=top>
<td width=32%><i>store_address</i></td>
<td width=35%>varchar(40)&nbsp;</td>
<td width=33%></td>
</tr>
<tr valign=top>
<td width=32%><i>city</i></td>
<td width=35%>varchar(20)</td>
<td width=33%>&nbsp;</td>
</tr>
<tr valign=top>
<td width=32%><i>state</i></td>
<td width=35%>char(2)</td>
<td width=33%>&nbsp;</td>
</tr>
<tr valign=top>
<td width=32%><i>zip</i></td>
<td width=35%>char(5)&nbsp;</td>
<td width=33%></td>
</tr>
</table><br>
<p>
Because <i>store_id </i>is the primary key, use the <i>store_id </i>to generate a unique file name for each record in the table. In the stores table example, you will be retrieving only the <i>store_id</i>, <i>store_name</i>, and <i>store_address</i>; also, store_id will be stored as a meta property, and <i>store_name </i>and <i>store_address </i>will be stored as table data.</p>
<h3>Directories and Files</h3>
<p>
To create the necessary directories and directory structure for storing the scripts, templates, and generated pages, run the following commands:</p>
<pre><code>md d:\sql_web
md d:\sql_web\scripts
md d:\sql_web\pubs
md d:\sql_web\pubs\stores
</code></pre>
<h4>Scripts directory</h4>
<p>
Next, create a virtual directory pointing to the D:\Sql_web\Scripts directory. Name this virtual directory /sqlscripts and give it Execute permission only. Copy the following files into the D:\Sql_web\Scripts directory:</p>
<p>
<a href="#istips_genstores.idc">Genstores.idc</a></p>
<p>
A script file to generate Web pages for all the rows in the stores table.</p>
<p>
<a href="#istips_genstores.htx">Genstores.htx</a></p>
<p>
A template file for Genstores.idc.</p>
<p>
<a href="#istips_stores.tpl">Stores.tpl</a></p>
<p>
A template file containing the formatting information of generated pages in the stores table.</p>
<h4>Directory of generated pages</h4>
<p>
The pages that SQL Server automatically generates for the stores table will be put into the D:\Sql_web\Pubs\Stores directory. Create a virtual directory named /pubs and point it to D:\Sql_web\Pubs. Give /pubs Read permission. With this configuration, Index Server can index all pages in D:\Sql_web\Pubs and its subdirectories.</p>
<p>
Each generated page will have the primary key as part of its file name, to guarantee that each file name is unique and associates each record with a Web page. For example, if the <i>store_id</i> is 3456, the generated Web page will have the name D:\Sql_web\Pubs\Stores\3456.htm.</p>
<h3>wp_stores_update Stored Procedure</h3>
<p>
The <b>wp_stores_update</b> stored procedure will generate a Web page for a row in the stores table by using the <b>sp_makewebtask</b> system stored procedure. The <b>wp_stores_update</b> stored procedure will issue a query based on the <i>store_id</i>, which is a primary key in the stores table. Therefore, equality with a specific store identity will generate only one page.</p>
<p>
The following code executes this stored procedure:</p>
<pre><code>USE PUBS
GO
if exists (select * from sysobjects where id = object_id('dbo.wp_stores_update') and sysstat &amp; 0xf = 4)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; drop procedure dbo.wp_stores_update
GO
CREATE PROCEDURE dbo.wp_stores_update 
@store_id char(4),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- Primary Key, id of the store
@filepath varchar(100),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- Directory where to create the Web page
@templatefile varchar(100) = NULL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- Optional template file to use
AS
--
-- This procedure creates a Web page for a row with the specified
--.store_id that is a key in the stores table.
--
-- Forming the strings to give to the "EXEC" command is confusing when
-- we have run time variables in the string. Splitting it up into
-- variables will make it a little more readable.
--
DECLARE @cmd_text1 varchar(255)
DECLARE @cmd_text2 varchar(255)
DECLARE @file_name varchar(255)
--
-- Compose the file name using the primary key "store_id".
-- For example, if the store_id is 3456 and @filepath is d:\sql_web\pubs\stores
-- the generated Web page will be d:\sql_web\pubs\stores\3456.htm
--
SELECT @file_name=@filepath+'\'+@store_id+'.htm'
--
-- Compose the sp_makewebtask command and parameters.
-- Note that store_id is being retrieved twice because we want to
-- Use one instance for a meta tag and another for a table value.
--
SELECT @cmd_text1='sp_makewebtask @outputfile='''+@file_name+''',\
@query=''SELECT store_id, store_id, stor_name,store_address FROM stores \
WHERE stores.store_id='''''+@store_id+''''''+''''
--
-- If a template file is specified, use it
--
IF @templatefile &lt;&gt; NULL
BEGIN
 &nbsp; SELECT @cmd_text2=',@templatefile='''+@templatefile+''''
END
--
-- For debugging purposes
--
--PRINT @file_name
--PRINT @cmd_text1
--PRINT @cmd_text2
EXECUTE( @cmd_text1+@cmd_text2 )
GO
</code></pre>
<h4>web_stores_update_trigger</h4>
<p>
Developing triggers is optional, unless you want Web pages to be generated automatically when the table is modified, in which case triggers are necessary. This trigger uses the <b>wp_stores_update</b> stored procedure to generate a Web page for a row that has been changed.</p>
<p>
The following code executes this trigger:</p>
<pre><code>USE pubs
go
if exists (select * from sysobjects where id = object_id('dbo.web_stores_update_trigger') and sysstat &amp; 0xf = 8)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; drop trigger dbo.web_stores_update_trigger
go
--
-- This trigger will generate a Web page for the records
-- that match the given store_id. Since store_id is a primary
-- key, only one page will be generated.
--
CREATE TRIGGER web_stores_update_trigger ON dbo.stores FOR INSERT,UPDATE AS
DECLARE @newstore_id char(4)
DECLARE @cmd_text&nbsp; varchar(255)
--
-- Get the store_id of the row that just changed into the 
-- @newstore_id variable.
--
SELECT @newstore_id = i.store_id 
FROM inserted i
select @cmd_text='wp_stores_update''' + @newstore_id + ''',\
@filepath=''D:\sql_web\pubs\stores'',@templatefile=''D:\sql_web\scripts\stores.tpl'''
EXEC(@cmd_text)
GO
</code></pre>
<h4>web_stores_delete_trigger</h4>
<p>
The <b>web_stores_delete_trigger</b> deletes a Web page whenever a record is deleted from the stores table.</p>
<p>
The following code executes this:</p>
<pre><code>USE pubs
GO
if exists (select * from sysobjects where id = object_id('dbo.web_stores_delete_trigger') and sysstat &amp; 0xf = 8)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; drop trigger dbo.web_stores_delete_trigger
GO
--
-- This trigger will delete the Web page for the record that
-- got deleted. Since store_id is a primary key and the page
-- was originally generated using the store_id in the file name
-- only one page will get deleted.
--
CREATE TRIGGER web_stores_delete_trigger ON dbo.stores 
FOR DELETE 
AS
DECLARE @cmd_text varchar(255)
DECLARE @deletedstore_id char(4)
--
-- Determine the row that was deleted and store its
-- value in @deletedstore_id.
--
SELECT @deletedstore_id = d.store_id 
FROM deleted d
--
-- Generate the Web page to be deleted using the store_id.
-- For example, if the store_id is 3456 and @filepath is d:\sql_web\pubs\stores
-- the generated Web page will be d:\sql_web\pubs\stores\3456.htm
-- Run an NT command to delete the HTML file corresponding to
-- that record.
--
select @cmd_text='master..xp_cmdshell ''del d:\sql_web\pubs\stores\'
+ @deletedstore_id + '.htm'',no_output'
EXEC(@cmd_text)
GO
</code></pre>
<h3><a name="istips_stores.tpl"></a>Stores.tpl Template File for Generated Pages</h3>
<p>
The Stores.tpl template file formats the generated pages in the stores table. The template follows the syntax described in SQL Server documentation for using the <b>sp_makewebtask</b> system stored procedure.</p>
<p>
Note that the first column, <i>store_id</i>, is stored as a meta tag named <i>store_id</i>. Index Server can search meta tags. The stored procedure <b>sp_makewebtask</b> replaces the <code>&lt;%insert_data_here%&gt;</code> tags with the columns for each row. The order is same as the order specified in the SELECT statement of the <b>wp_stores_update</b> procedure.</p>
<p>
The following HTML code is from the Stores.tpl file.</p>
<pre><code>&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;SQL Server Pubs Database,Stores Table&lt;/TITLE&gt;
&lt;BODY&gt;
&lt;H1&gt;Stores Table Row&lt;/H1&gt;
&lt;HR&gt;
&lt;%begindetail%&gt;
&lt;META NAME="store_id" CONTENT="
&lt;%insert_data_here%&gt;"&gt;
&lt;TABLE&gt;
&lt;TR&gt;&lt;TD&gt;&lt;B&gt;Store Id&lt;/B&gt;&lt;/TD&gt;&lt;TD&gt;
&lt;%insert_data_here%&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;&lt;TD&gt;&lt;B&gt;Store Name&lt;/B&gt;&lt;/TD&gt;&lt;TD&gt;
&lt;%insert_data_here%&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;&lt;TD&gt;&lt;B&gt;Store Address&lt;/B&gt;&lt;/TD&gt;&lt;TD&gt;
&lt;%insert_data_here%&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;/TABLE&gt;
&lt;%enddetail%&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</code></pre>
<h3><a name="istips_genstores.idc"></a>Genstores.idc Script File</h3>
<p>
The Genstores.idc script file runs a SQL command that will generate Web pages for all the records in the stores table. If you have not already set up the database example as described in the IIS documentation, you should set up an ODBC entry as described on the IIS database sample page.</p>
<p>
These samples assume that the Genstores.idc file is in the physical directory D:\Sql_web\Scripts, which has a virtual directory /sqlscripts associated with it. The following code is the Genstores.idc file. If you modified the password for the <i>sa</i> account or want to use a different account, then you must modify the following script appropriately.</p>
<pre><code>Datasource: web sql
Username: sa
Template: genstores.htx
SQLStatement:
+USE pubs
+DECLARE stores_cursor CURSOR
+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FOR
+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SELECT store_id FROM STORES
+OPEN stores_cursor
+DECLARE @store_id char(4)
+FETCH NEXT FROM stores_cursor INTO @store_id
+WHILE (@@fetch_status &lt;&gt; -1)
+BEGIN
+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* 
+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A @@fetch_status of -2 means that the row has been deleted.
+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; No need to test for this as the result of this loop is to
+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; drop all user-defined tables.
+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; */
+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EXEC ('wp_stores_update' + '''' + @store_id + '''' +
+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ',@filepath=''D:\sql_web\pubs\stores'',@templatefile=''D:\sql_web\scripts\stores.tpl''')
+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FETCH NEXT FROM stores_cursor INTO @store_id
+END
+DEALLOCATE stores_cursor
</code></pre>
<h3><a name="istips_genstores.htx"></a>Genstores.htx Template File</h3>
<p>
The Genstores.htx template is associated with the Genstores.idc file. You must put both of these files into the D:\Sql_web\Scripts directory.</p>
<p>
The Genstores.htx code is as follows:</p>
<pre><code>&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;SQL Server Web Page Generation Example&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY BACKGROUND="/samples/images/backgrnd.gif"&gt;
&lt;BODY BGCOLOR="FFFFFF"&gt;
&lt;TABLE&gt;
&lt;tr&gt;
&lt;TD&gt;&lt;/TD&gt;
&lt;TD&gt;
&lt;H2&gt;Success!!&lt;/H2&gt;
&lt;/TD&gt;
&lt;/TR&gt;
&lt;/TABLE&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</code></pre>
<h3>Testing</h3>
<p>
After completing all the steps in the stores example, you can test the stored procedure, templates, and triggers by running the following SQL queries in the ISQL/w tool.</p>
<h4>wp_stores_update</h4>
<p>
Assuming that your physical directory layout is exactly as described in this document, you can see if the <b>wp_stores_update</b> procedure has been correctly created.</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;</b></B>&nbsp;This test assumes that '6380' is a valid <i>store_id</i>. If that is not true, substitute a valid <i>store_id</i> for '6380'.</p>
<p>
Issue the following query:</p>
<pre><code>EXEC ('wp_stores_update @store_id=''6380'',\
@filepath=''D:\Sql_web\pubs\stores'',\
@templatefile=''D:\sql_web\scripts\stores.tpl''')
</code></pre>
<p class=indent>
<B><b>Important&nbsp;&nbsp;</b></B>&nbsp;All the quotation marks in the preceding sample are single quotation marks.</p>
<p>
The HTML page generated by this example is stored in D:\Sql_web\Pubs\Stores\6380.htm, and it looks like:</p>
<pre><code>&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;SQL Server Pubs Database,Stores Table&lt;/TITLE&gt;
&lt;BODY&gt;
&lt;H1&gt;Stores Table Row&lt;/H1&gt;
&lt;HR&gt;
&lt;META NAME="store_id" CONTENT="6380"&gt;
&lt;TABLE&gt;
&lt;TR&gt;&lt;TD&gt;&lt;B&gt;Store Id&lt;/B&gt;&lt;/TD&gt;&lt;TD&gt;6380&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;&lt;TD&gt;&lt;B&gt;Store Name&lt;/B&gt;&lt;/TD&gt;&lt;TD&gt;Eric the Read Books&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;&lt;TD&gt;&lt;B&gt;Store Address&lt;/B&gt;&lt;/TD&gt;&lt;TD&gt;788 Catamaugus Ave.&lt;/TD&gt;&lt;/TR&gt;
&lt;/TABLE&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</code></pre>
<h4>web_stores_update_trigger</h4>
<p>
Assuming that there is no entry with a <i>store_id</i> of '1234', you can test the Insert trigger by issuing the following query:</p>
<pre><code>INSERT INTO Stores
(store_id, store_name, store_address, city, state, zip)
VALUES('1234', 'Discount Book Stores', '1234 First Avenue', 'Seattle', 'WA','98000')
</code></pre>
<h4>web_stores_delete_trigger</h4>
<p>
After inserting the row, you can test the Delete trigger by issuing the following query:</p>
<pre><code>DELETE FROM Stores
Where store_id='1234'
</code></pre>
<h3>Generated Web Pages</h3>
<p>
After successfully completing the previous steps, you can test to see if the pages are being generated correctly or not. From a browser, run the Genstores.idc script:</p>
<pre><code>http://servername/sqlscripts/Genstores.idc?
</code></pre>
<h2><a name="istips_ex2"></a>Example 2: Pub_Info Table</h2>
<p>
In <a href="#istips_ex1">Example 1: Stores Table</a>, all the three retrieved columns (<i>store_id</i>, <i>store_name</i>, <i>store_address</i>) were smaller than 255 characters, and so they could be retrieved inline in the generated Web page. However, if any column is of the SQL TEXT variable type, the <b>sp_makewebtask</b> stored procedure will limit the output to 255 characters. To work around this limitation, use the <i>@blobfmt</i> parameter. For details, see the SQL Server documentation.</p>
<p>
Basically, <i>@blobfmt</i> retrieves columns of TEXT data and puts it into a separate file without limitation. This parameter also creates a link from the main page to the separate file where the data is stored (the subpage). Index Server can then index the main page and subpage separately. There is no easy way of finding out the main page from the subpage. So, when Index Server finds a hit in a subpage, it returns only the subpage, not the main page.</p>
<p>
The next example uses the pub_info table in the pubs sample database. For detailed explanations of the stored procedure, triggers, scripts, and templates, refer to the corresponding sections in Example 1: Stores Table.</p>
<h3>Schema for the Pub_Info and Publishers Tables </h3>
<p>
Table 3 shows the schema of the pub_info table:</p>
<p class=label>
<b>Table 3. Pub_Info schema</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=32%><b>Column Name</b></td>
<td class=label width=34%><b>Data Type </b></td>
<td class=label width=34%><b>Key/Index</b></td>
</tr>
<tr valign=top>
<td width=32%><i>pub_id</i></td>
<td width=34%>char(4)</td>
<td width=34%>Primary key and also a foreign key</td>
</tr>
<tr valign=top>
<td width=32%><i>logo</i></td>
<td width=34%>IMAGE</td>
<td width=34%>&nbsp;</td>
</tr>
<tr valign=top>
<td width=32%><i>pr_info</i></td>
<td width=34%>TEXT</td>
<td width=34%>&nbsp;</td>
</tr>
</table><br>
<p>
Because <i>pub_id</i> is the primary key, use <i>pub_id</i> to generate a unique file name for each record in the table. In this example, you will retrieve the pr_info TEXT data into a separate file and link it from the main page. Also, you will perform a join with the publishers table in the stored procedure to illustrate a slightly different variation.</p>
<p>
Table 4 shows the schema of the publishers table:</p>
<p class=label>
<b>Table 4. Publishers schema</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=32%><b>Column Name</b></td>
<td class=label width=35%><b>Data Type </b></td>
<td class=label width=33%><b>Key/Index</b></td>
</tr>
<tr valign=top>
<td width=32%><i>pub_id</i></td>
<td width=35%>char(4)</td>
<td width=33%>Primary Key</td>
</tr>
<tr valign=top>
<td width=32%><i>pub_name</i></td>
<td width=35%>varchar(40)</td>
<td width=33%>&nbsp;</td>
</tr>
<tr valign=top>
<td width=32%><i>city</i></td>
<td width=35%>varchar(20)</td>
<td width=33%>&nbsp;</td>
</tr>
<tr valign=top>
<td width=32%><i>state</i></td>
<td width=35%>char(2)</td>
<td width=33%>&nbsp;</td>
</tr>
<tr valign=top>
<td width=32%><i>country</i></td>
<td width=35%>varchar(30)</td>
<td width=33%>&nbsp;</td>
</tr>
</table><br>
<p>
The <i>pub_id</i> is the primary key of publishers table. <i>Pub_Info.pub_id</i> is a foreign key linked to <i>Publishers.pub_id</i>.</p>
<h3>Directories and Files</h3>
<p>
To create directories for storing the scripts, templates, and generated pages, run the following commands:</p>
<pre><code>md d:\sql_web
md d:\sql_web\scripts
md d:\sql_web\pubs
md d:\sql_web\pubs\pub_info
</code></pre>
<h4>Scripts directory</h4>
<p>
Next, put the following files in the D:\Sql_web\Scripts directory. In <a href="#istips_ex1">Example 1: Stores Table</a>, you made this directory a virtual directory (/sqlscripts) and gave it Execute permission.
<ul type=disc>
<li>
Genpub_info.idc <br><br></li>
<li>
Genpub_info.htx <br><br></li>
<li>
Pub_info.tpl <br><br></li>
<li>
Pr_info.tpl </li>
</ul>
<h4>Directory of generated pages</h4>
<p>
The Web pages generated for the pubs_info table will be stored in the D:\Sql_web\Pubs\Pub_info directory. The virtual directory /pubs points to D:\Sql_web\Pubs and should have Read permission. With this configuration, Index Server can index the pages, and IIS can display the generated pages or results.</p>
<h3>wp_pub_info_update Stored Procedure</h3>
<p>
Issue the following SQL queries in the ISQL/w tool.</p>
<pre><code>USE pubs
GO
if exists (select * from sysobjects where id = object_id('dbo.wp_pub_info_update') and sysstat &amp; 0xf = 4)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; drop procedure dbo.wp_pub_info_update
GO
CREATE PROCEDURE wp_pub_info_update
@pub_id char(4),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- Publishers id
@filepath varchar(100),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- Directory in which to generate pages
@pr_infotmpl varchar(100),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- Template file for pr_info (text) field
@maintmpl varchar(100) = NULL&nbsp;&nbsp;&nbsp;&nbsp; -- Template file for main page
AS
--
-- The stored procedure illustrates the use of @blobfmt parameter to
-- retrieve TEXT data to a 'sub-file'. For example, if the pub_id is '0736'
-- and @filepath is d:\sql_web\pubs\pub_info, the main page will have
-- the name d:\sql_web\pubs\pub_info\0736.htm and the linked file will have
-- the name d:\sql_web\pubs\pub_info\pr_info07361.htm. The "1" is appended
-- by sp_makewebtask.
--
--
-- It is easier to construct an execution statement using variables.
--
DECLARE @cmd_text1 varchar(255)
DECLARE @cmd_text2 varchar(255)
DECLARE @cmd_text3 varchar(255)
DECLARE @cmd_text4 varchar(255)
DECLARE @cmd_text5 varchar(255)
--
-- mainfile will contain the name of the main file.
--
DECLARE @mainfile&nbsp; varchar(255)
--
-- pr_infofile will contain the name of the file that will have the
-- pr_info text field.
--
DECLARE @pr_infofile varchar(255)
--
-- @filepath and @pr_infotmpl cannot be NULL
--
IF (@filepath = NULL)
BEGIN
 &nbsp;&nbsp; RAISERROR(16853,11,1)
 &nbsp;&nbsp; RETURN (9)
END
IF (@pr_infotmpl = NULL)
BEGIN
 &nbsp;&nbsp; RAISERROR(16853,11,1)
 &nbsp;&nbsp; RETURN (9)
END
--
-- If @filepath is d:\sql_web\pubs\pub_info, the main page will have
-- the name d:\sql_web\pubs\pub_info\0736.htm and the linked file will have
-- the name d:\sql_web\pubs\pub_info\pr_info07361.htm. The "1" is appended
-- by sp_makewebtask.
--
SELECT @mainfile=@filepath+'\'+@pub_id+'.htm'
SELECT @pr_infofile=@filepath+'\pr_info'+@pub_id+'.htm'
--
-- For Debugging purposes
--
--PRINT @pub_id
--PRINT @filepath
--PRINT @maintmpl
--PRINT @pr_infofile
--
-- In this example, we are retrieving pub_id in two columns so we
-- can use the first one for a META property.
--
SELECT @cmd_text1='sp_makewebtask @outputfile='''+@mainfile+''',\
@query=''SELECT _info.pub_id, pub_info.pub_id, pr_info, pub_name,
city, state, country \
FROM pub_info, publishers WHERE pub_info.pub_id='''''
SELECT @cmd_text2=@pub_id+''''' AND pub_info.pub_id=publishers.pub_id'
SELECT @cmd_text3=''',@blobfmt=''%3% FILE='+@pr_infofile
SELECT @cmd_text4=' TPLT='+@pr_infotmpl+''''
IF @maintmpl &lt;&gt; NULL
BEGIN
 &nbsp; SELECT @cmd_text5=',@templatefile='''+@maintmpl+''''
END
--
-- For Debugging purposes
--
--PRINT @mainfile
--PRINT @cmd_text1
--PRINT @cmd_text2
--PRINT @cmd_text3
--PRINT @cmd_text4
--PRINT @cmd_text5
EXECUTE( @cmd_text1+@cmd_text2+@cmd_text3+@cmd_text4+@cmd_text5 )
GO
</code></pre>
<h4>web_pub_info_update_trigger</h4>
<p>
The following code is the Update trigger for pub_info table.</p>
<pre><code>use pubs
if exists (select * from sysobjects where id = object_id('dbo.web_pub_info_update_trigger') and sysstat &amp; 0xf = 8)
 &nbsp;&nbsp; drop trigger dbo.web_pub_info_update_trigger
GO
--
-- This trigger will generate a Web page for the records
-- that match the given pub_id. Since pub_id is a primary
-- key, only one page will be generated.
--
CREATE TRIGGER web_pub_info_update_trigger ON dbo.pub_info
FOR INSERT,UPDATE 
AS
DECLARE @pub_id char(4)
DECLARE @cmd_text1&nbsp; varchar(255)
DECLARE @cmd_text2&nbsp; varchar(255)
DECLARE @cmd_text3&nbsp; varchar(255)
DECLARE @cmd_text4&nbsp; varchar(255)
--
-- Get the store_id of the row that just changed into the
-- @newpub_id variable.
--
SELECT @pub_id = i.pub_id 
FROM inserted i
select @cmd_text1='wp_pub_info_update @pub_id=''' + @pub_id
select @cmd_text2=''',@filepath=''D:\sql_web\pubs\pub_info'','
select @cmd_text3='@pr_infotmpl=''d:\sql_web\scripts\pr_info.tpl'','
select @cmd_text4='@maintmpl=''D:\sql_web\scripts\pub_info.tpl'''
EXEC(@cmd_text1+@cmd_text2+@cmd_text3+@cmd_text4)
GO
</code></pre>
<h4>web_pub_info_delete_trigger</h4>
<p>
The following code is the Delete trigger for the pub_info table.</p>
<pre><code>USE pubs
GO
if exists (select * from sysobjects where id = object_id('dbo.web_pub_info_delete_trigger') and sysstat &amp; 0xf = 
8)
drop trigger dbo.web_pub_info_delete_trigger
GO
--
-- This trigger will delete the Web page for the record that
-- got deleted. Since pub_id is a primary key and the page
-- was originally generated using the page_id in the file name
-- only one page will get deleted.
--
CREATE TRIGGER web_pub_info_delete_trigger ON dbo.pub_info
FOR DELETE 
AS
DECLARE @pub_id char(4)
DECLARE @mainfile varchar(255)
DECLARE @pr_infofile varchar(255)
DECLARE @cmd_text1 varchar(255)
DECLARE @cmd_text2 varchar(255)
--
-- Determine the row that was deleted and store its
-- value in @deletedstore_id.
--
SELECT @pub_id = d.pub_id 
FROM deleted d
--
-- Generate the Web page to be deleted using the pub_id.
--
SELECT @mainfile='d:\sql_web\pubs\pub_info\'+@pub_id+'.htm'
--
-- Note that it is '1.htm' after the @pub_id because that is
-- how SQL Server generates the name of the sublink. For example,
-- if the id is 9912,the name of the file generated is
-- d:\sql_web\pubs\pub_info\pr_info99121.htm
--
SELECT @pr_infofile='d:\sql_web\pubs\pub_info\pr_info'+@pub_id+'1.htm'
SELECT @cmd_text1='master..xp_cmdshell ''del '
SELECT @cmd_text2=''',no_output'
--PRINT @mainfile
--PRINT @pr_infofile
--PRINT @cmd_text1
--PRINT @cmd_text2
EXEC( @cmd_text1+@mainfile+@cmd_text2)
EXEC( @cmd_text1+@pr_infofile+@cmd_text2)
GO
</code></pre>
<h3>Genpub_info.idc Script File</h3>
<p>
The following code for Genpub_info.idc script file generates the Web pages in a batch.</p>
<pre><code>Datasource: web sql
Username: sa
Template: genpub_info.htx
SQLStatement:
+USE pubs
+DECLARE pub_info_cursor CURSOR
+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FOR
+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SELECT pub_id FROM pub_info
+OPEN pub_info_cursor
+DECLARE @pub_id char(4)
+FETCH NEXT FROM pub_info_cursor INTO @pub_id
+WHILE (@@fetch_status &lt;&gt; -1)
+BEGIN
+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* 
+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A @@fetch_status of -2 means that the row has been deleted.
+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; No need to test for this as the result of this loop is to 
+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; drop all user-defined tables.
+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; */
+EXEC ('wp_pub_info_update @pub_id=' + '''' + @pub_id + '''' +
+',@filepath=''D:\sql_web\pubs\pub_info'','+
+'@pr_infotmpl=''d:\sql_web\scripts\pr_info.tpl'','+
+'@maintmpl=''D:\sql_web\scripts\pub_info.tpl''')
+FETCH NEXT FROM pub_info_cursor INTO @pub_id
+END
+DEALLOCATE pub_info_cursor
</code></pre>
<h3>Genpub_info.htx Template File</h3>
<p>
Genpub_info.htx looks exactly like the Genstores.htx file, and contains the following code:</p>
<pre><code>&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;SQL Server Web Page Generation Example&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY BACKGROUND="/samples/images/backgrnd.gif"&gt;
&lt;BODY BGCOLOR="FFFFFF"&gt;
&lt;TABLE&gt;
&lt;tr&gt;
&lt;TD&gt;&lt;/TD&gt;
&lt;TD&gt;
&lt;H2&gt;Success!!&lt;/H2&gt;
&lt;/TD&gt;
&lt;/TR&gt;
&lt;/TABLE&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</code></pre>
<h3>Pr_info.tpl Template File</h3>
<p>
The code for the Pr_info.tpl template file is specified by the <i>@blobfmt</i> parameter and contains formatting information for the <i>pr_info</i> TEXT data collected in a separate file.</p>
<pre><code>&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Pr_Info Table, Pr_Info Text Field&lt;/TITLE&gt;
&lt;BODY&gt;
&lt;H2&gt;Large amount of text from Pr_Info Text Field&lt;/H2&gt;
&lt;HR&gt;
&lt;%insert_data_here%&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</code></pre>
<h3>Pub_info.tpl Template File</h3>
<p>
The following code for the Pub_info.tpl template.</p>
<pre><code>&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Pubs Database, Pub_Info Table&lt;/TITLE&gt;
&lt;BODY&gt;
&lt;%begindetail%&gt;
&lt;META NAME="pub_id"&nbsp; CONTENT="&lt;%insert_data_here%&gt;"&gt;
&lt;H1&gt;Publisher Info For Publisher Id &lt;%insert_data_here%&gt;&lt;/H1&gt;
&lt;HR&gt;
&lt;TABLE&gt;
&lt;TR&gt;&lt;TD&gt;&lt;B&gt;Publisher Name:&lt;/B&gt;&lt;/TD&gt;&lt;TD&gt;&lt;%insert_data_here%&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;&lt;TD&gt;&lt;B&gt;City:&lt;/B&gt;&lt;/TD&gt;&lt;TD&gt;&lt;%insert_data_here%&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;&lt;TD&gt;&lt;B&gt;State:&lt;/B&gt;&lt;/TD&gt;&lt;TD&gt;&lt;%insert_data_here%&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;&lt;TD&gt;&lt;B&gt;Country:&lt;/B&gt;&lt;/TD&gt;&lt;TD&gt;&lt;%insert_data_here%&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;/TABLE&gt;
&lt;%enddetail%&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</code></pre>
<h3>Testing</h3>
<p>
After completing all the steps in the <i>pub_info</i> example, you can test the stored procedure, templates, and triggers by running the following SQL queries in the ISQL/w tool.</p>
<h4>wp_pub_info_update</h4>
<p>
Assuming that '0736' is a valid <i>pub_id</i>, you can test the <b>wp_pub_info_update</b> procedure by issuing the following query.</p>
<pre><code>EXEC('wp_pub_info_update @pub_id=''0736'',\
@filepath=''d:\sql_web\pubs\pub_info'',\
@pr_infotmpl=''d:\sql_web\scripts\pr_info.tpl'',\
@maintmpl=''d:\sql_web\scripts\pub_info.tpl''')
</code></pre>
<p>
The HTML pages (0736.htm and 07361.htm) generated by this example are stored in D:\Sql_web\Pubs\Pub_info and look like:</p>
<pre><code>0736.htm

&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Pubs Database, Pub_Info Table&lt;/TITLE&gt;
&lt;BODY&gt;
&lt;META NAME="pub_id" CONTENT="0736"&gt;
&lt;H1&gt;Publisher Info For Publisher Id 0736&lt;/H1&gt;
&lt;HR&gt;
&lt;TABLE&gt;
&lt;TR&gt;&lt;TD&gt;&lt;B&gt;Publisher Name:&lt;/B&gt;&lt;/TD&gt;&lt;TD&gt;&lt;A HREF = "file:///d:\sql_web\pubs\pub_info\pr_info07361.htm"&gt;New Moon Books&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;&lt;TD&gt;&lt;B&gt;City:&lt;/B&gt;&lt;/TD&gt;&lt;TD&gt;Boston&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;&lt;TD&gt;&lt;B&gt;State:&lt;/B&gt;&lt;/TD&gt;&lt;TD&gt;MA&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;&lt;TD&gt;&lt;B&gt;Country:&lt;/B&gt;&lt;/TD&gt;&lt;TD&gt;USA&lt;/TD&gt;&lt;/TR&gt;
&lt;/TABLE&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;

07361.htm

&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Pr_Info Table, Pr_Info Text Field&lt;/TITLE&gt;
&lt;BODY&gt;
&lt;H2&gt;Large amount of text from Pr_Info Text Field&lt;/H2&gt;
&lt;HR&gt;
This is sample text data for New Moon Books, publisher 0736 in the pubs database. New Moon Books is located in Boston, Massachusetts.
This is sample text data for New Moon Books, publisher 0736 in the pubs database. New Moon Books is located in Boston, Massachusetts.
This is sample text data for New Moon Books, publisher 0736 in the pubs database. New Moon Books is located in Boston, Massachusetts.
This is sample text data for New Moon Books, publisher 0736 in the pubs database. New Moon Books is located in Boston, Massachusetts.
This is sample text data for New Moon Books, publisher 0736 in the pubs database. New Moon Books is located in Boston, Massachusetts.
This is sample text data for New Moon Books, publisher 0736 in the pubs database. New Moon Books is located in Boston, Massachusetts.
This is sample text data for New Moon Books, publisher 0736 in the pubs database. New Moon Books is located in Boston, Massachusetts.
This is sample text data for New Moon Books, publisher 0736 in the pubs database. New Moon Books is located in Boston, Massachusetts.
This is sample text data for New Moon Books, publisher 0736 in the pubs database. New Moon Books is located in Boston, Massachusetts.
This is sample text data for New Moon Books, publisher 0736 in the pubs database. New Moon Books is located in Boston, Massachusetts.
This is sample text data for New Moon Books, publisher 0736 in the pubs database. New Moon Books is located in Boston, Massachusetts.
This is sample text data for New Moon Books, publisher 0736 in the pubs database. New Moon Books is located in Boston, Massachusetts.
This is sample text data for New Moon Books, publisher 0736 in the pubs database. New Moon Books is located in Boston, Massachusetts.
This is sample text data for New Moon Books, publisher 0736 in the pubs database. New Moon Books is located in Boston, Massachusetts.
This is sample text data for New Moon Books, publisher 0736 in the pubs database. New Moon Books is located in Boston, Massachusetts.
This is sample text data for New Moon Books, publisher 0736 in the pubs database. New Moon Books is located in Boston, Massachusetts.
This is sample text data for New Moon Books, publisher 0736 in the pubs database. New Moon Books is located in Boston, Massachusetts.
This is sample text data for New Moon Books, publisher 0736 in the pubs database. New Moon Books is located in Boston, Massachusetts.
This is sample text data for New Moon Books, publisher 0736 in the pubs database. New Moon Books is located in Boston, Massachusetts.
This is sample text data for New Moon Books, publisher 0736 in the pubs database. New Moon Books is located in Boston, Massachusetts.
This is sample text data for New Moon Books, publisher 0736 in the pubs database. New Moon Books is located in Boston, Massachusetts.
This is sample text data for New Moon Books, publisher 0736 in the pubs database. New Moon Books is located in Boston, Massachusetts.
This is sample text data for New Moon Books, publisher 0736 in the pubs database. New Moon Books is located in Boston, Massachusetts.
This is sample text data for New Moon Books, publisher 0736 in the pubs database. New Moon Books is located in Boston, Massachusetts.
This is sample text data for New Moon Books, publisher 0736 in the pubs database. New Moon Books is located in Boston, Massachusetts.
This is sample text data for New Moon Books, publisher 0736 in the pubs database. New Moon Books is located in Boston, Massachusetts.
This is sample text data for New Moon Books, publisher 0736 in the pubs database. New Moon Books is located in Boston, Massachusetts.
This is sample text data for New Moon Books, publisher 0736 in the pubs database. New Moon Books is located in Boston, Massachusetts.
This is sample text data for New Moon Books, publisher 0736 in the pubs database. New Moon Books is located in Boston, Massachusetts.
This is sample text data for New Moon Books, publisher 0736 in the pubs database. New Moon Books is located in Boston, Massachusetts.
&lt;/BODY&gt;
&lt;/HTML&gt;
</code></pre>
<h4>web_pub_info_update_trigger</h4>
<p>
This test checks the Insert trigger. Because <i>pub_info</i>.<i>pub_id</i> is a foreign key in the publishers table, a row must be inserted into the publishers table first.</p>
<pre><code>insert into publishers
(pub_id, pub_name, city, state, country)
values('9914','Discount Publishers', 'Seattle', 'Wa', 'USA')
go
insert into pub_info
(pub_id, pr_info)
values('9914', 'This is the pr_info for Discount Publishers in Seattle, WA, USA')
go
</code></pre>
<h4>web_pub_info_delete_trigger</h4>
<p>
This test checks the Delete trigger.</p>
<pre><code>delete from pub_info
where pub_id='9914'
go

delete from publishers
where pub_id='9914'
go

</code></pre>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>An ASP You Can Grasp: The ABCs of Active Server Pages</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_aspover"></a><sup></sup>An ASP You Can Grasp: The ABCs of Active Server Pages </h1>
<p>
Nancy Winnick Cluts <br>
Developer Technology Engineer<br>
Microsoft Corporation</p>
<p>
<i>Developer-technology writer Nancy Winnick Cluts was born in a trunk in the Princess Theater in Pocatello, Idaho. That dusty old trunk had a C++ programming manual in it. The rest is history. </i></p>
<p>
May 28, 1997 </p>
<p>
<i>Active Server Pages is an open, compile-free application environment in which you can combine HTML, scripts, and reusable ActiveX server components to create dynamic and powerful Web-based business solutions. Active Server Pages enables server-side scripting for IIS with native support for both VBScript and JScript. </i></p>
<p>
—Microsoft Internet Information Server Web site </p>
<p>
That's what they say, at least. When I read that paragraph, I want to know what this means to me as a developer, whether the Active Server Pages (ASP) technology is easy to use, and, most of all, how it works. So, I took a look at the documentation, attended a couple of presentations at Tech·Ed 97, surfed the Internet, and came up with some answers about what Active Server Pages really is, the technology's complexity level, and where you can find more detailed information. (See <a href="#aspoverread">Further Reading</a> at the end of this article.)</p>
<h2>What Is an ASP file?</h2>
<p>
Files created with Active Server Pages have the extension .ASP. This article, for example, was originally published on the Web with an ASP address. With ASP files, you can activate your Web site using any combination of HTML, scripting—such as JavaScript or Microsoft® Visual Basic® Scripting Edition (VBScript)—and <i>components written in any language</i> (there's that darn formula again—see <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="msdn_actplat">
</object><a href=JavaScript:alink_1.Click()>"The Microsoft Active Platform"</a>). This means your ASP file is simply a file that can contain any combination of HTML, scripting, and calls to components. When you make a change on the ASP file on the server, you need only save the changes to the file—the next time the Web page is loaded, the script will automatically be compiled. </p>
<p>
How does this happen? It works because ASP technology is built directly into Microsoft Web servers, and is thus supported on all Microsoft Web servers: Windows NT® Internet Information Server (IIS) 3.0, Windows NT Workstation, and Windows® 95 Personal Web Server. (See <a href="#aspoverapp">Appendix: System Requirements</a>.)</p>
<p>
A few examples of the use of Active Server Pages, as found in the white paper <a href="msdn_aspwp.htm">"Using Active Server Pages with IIS 3.0"</a>:
<ul type=disc>
<li>
Put your employee handbook online, rather than printing copies that are soon obsolete. An added benefit is the reduction of administrative costs when employees can access and update their own records, such as address and health-plan benefits. I know of several administrative assistants who would love this one!<br><br></li>
<li>
Tie your online store to your existing inventory database and order-processing system.<br><br></li>
<li>
Give every visitor to your site a personalized view of just the information he or she seeks, and automatically flag what is new since the last visit. </li>
</ul>
<p>
I know what you're thinking: "So what? I can write CGI scripts right now that will let me update information and have it reloaded next time the page is loaded." That's true, but ASP runs as a service of the Web server and is optimized for multiple threads and multiple users. This means that it's fast, and it's easy to implement. If you use ASP, you can separate the design of your Web page from the nitty-gritty details of programming access to databases and applications. This frees up the programmer to do what she does best—code like crazy—and, conversely, frees the designer to worry about just the design rather than the database.</p>
<p>
It all works together via scripting.</p>
<p>
For example, a form is used to pass a ticker symbol request in the URL to the ASP files. The first part of the ASP file calls a component that talks to a stock-price server. Properties of this object, such as opening and closing price, can then be easily inserted in the HTML. The programmer can work in any language, and need worry only about how to talk to the stock-price server. The HTML author need know only how to script the component, and does not care how the stock-price server works. </p>
<h4>Is it hard to use?</h4>
<p>
I don't know about you, but whenever people start talking about doing things on the server, I start to get nervous. I think a lot about threading issues, synchronization, and generally stuff without a user interface. I assume it's going to be hard to do. Well, using ASP is about as easy as anything I've come across in years. </p>
<p>
If you're an experienced programmer, you don't even have to learn a new language to create ASP files—you can use any language that supports ActiveX™ scripting. If you already develop with Visual Basic, using VBScript is a snap! </p>
<p>
Or, if you know how to author pages in HTML, you're probably ready to advance your skills a notch—and ASP is the perfect reason. Learning VBScript is not hard. Neither is JScript™, Microsoft's implementation of JavaScript. </p>
<p>
You don't even have to write your own controls to start using Active Server Pages. You can use any off-the-shelf-control that can be run on a server and has no user interface. The reason it should not have a user interface becomes obvious when you picture some hapless computer operator sitting in front of the server, dismissing dialog boxes meant for the user's machine. I mean, why should the operator care whether you've logged on successfully? User interfaces are for client applications (applications that the user is running)—not for server-side scripting. </p>
<h4>Aw, mom. Not another object model!</h4>
<p>
I really hate doing this to you, but I'm going to have to use that overused and overcomplex term "object model" again. Here's how it works. When a browser requests an ASP file from your Web server, your Web server calls Active Server Pages to read through the ASP file, executing any of the commands contained within and sending the resulting HTML page to the browser. An ASP file can contain any combination of HTML, script, or commands. The script can assign values to variables, request information from the server, or combine any set of commands into procedures.</p>
<p>
ASP uses the delimiters (better known to you and me as "thing-a-ma-bobs that specify the beginning and end") "&lt;%" and "%&gt;" to enclose script commands. For example, the code below sets the value of the variable "MyFavTVShow" in the user cookie to "I Dream of Jeannie."</p>
<pre><code>&lt;%Response.Cookies("MyFavTVShow")="I Dream of Jeannie"%&gt;
</code></pre>
<p>
The scripting languages supported by ASP in turn support use of the If-Then-Else construct (something that will undoubtedly warm the hearts of all coders out there). Finally, you can embed some real logic into your HTML. For example, the following code from the IIS documentation shows how you can set the greeting shown based upon the time of day. </p>
<pre><code>&lt;FONT COLOR="GREEN"&gt;
&lt;%If Time &gt; = #12:00:00 AM# And Time &lt; #12:00:00 PM# Then%&gt; 
Good Morning!
&lt;%Else%&gt;
Hello!
&lt;%End If%&gt; 
&lt;/FONT&gt;
</code></pre>
<p>
I'm sure that you can think of something more interesting for your Web site—I'd hate to have to come up with all of the clever ideas. </p>
<h4>Built-in objects</h4>
<p>
ASP includes five standard objects for global use:
<ul type=disc>
<li>
<b>Request</b> — to get information from the user<br><br></li>
<li>
<b>Response</b> — to send information to the user<br><br></li>
<li>
<b>Server</b> — to control the Internet Information Server<br><br></li>
<li>
<b>Session</b> — to store information about and change settings for the user's current Web-server session<br><br></li>
<li>
<b>Application</b> — to share application-level information and control settings for the lifetime of the application </li>
</ul>
<p>
The Request and Response objects contain collections (bits of information that are accessed in the same way). Objects use methods to do some type of procedure (if you know any object-oriented programming language, you know already what a method is) and properties to store any of the object's attributes (such as color, font, or size). </p>
<h4>The Request object</h4>
<p>
The Request object is used to get information from the user that is passed along in an HTTP request. As I mentioned earlier, the Request and Response objects support collections:
<ul type=disc>
<li>
<b>ClientCertificate</b> — to get the certification fields from the request issued by the Web browser. The fields that you can request are specified in the X.509 standard.<br><br></li>
<li>
<b>QueryString</b> — to get text such as a name, such as my favorite TV sitcom above.<br><br></li>
<li>
<b>Form</b> — to get data from an HTML form.<br><br></li>
<li>
<b>Cookies</b> — to get the value of an application-defined cookie.<br><br></li>
<li>
<b>ServerVariables</b> — to get HTTP information such as the server name.</li>
</ul>
<h4>The Response object</h4>
<p>
The Response object is used to send information to the user. The Response object supports Cookies only as a <i>collection</i> (to set cookie values). The Response object also supports a number of properties and methods. <i>Properties</i> currently supported are:
<ul type=disc>
<li>
<b>Buffer</b> — set to buffer page output at the server. When this is set to true, the server will not send a response until all of the server scripts on the current page have been processed, or until the Flush or End method has been called.<br><br></li>
<li>
<b>ContentType</b> — sets the type of content (that is, text/HTML, Excel, and so on.)<br><br></li>
<li>
<b>Expires</b> — sets the expiration (when the data in the user's cache for this Web page is considered invalid) based on minutes (i.e.: expires in 10 minutes)<br><br></li>
<li>
<b>ExpiresAbsolute</b> — allows you to set the expiration date to an absolute date and time.<br><br></li>
<li>
<b>Status</b> — returns the status line (defined in the HTTP specification for the server). </li>
</ul>
<p>
The following <i>methods</i> are supported by the Response object:
<ul type=disc>
<li>
<b>AddHeader</b> — adds an HTML header with a specified value.<br><br></li>
<li>
<b>AppendToLog</b> — appends a string to the end of the Web server log file.<br><br></li>
<li>
<b>BinaryWrite</b> — writes binary data (for example, Excel spreadsheet data).<br><br></li>
<li>
<b>Clear</b> — clears any buffered HTML output.<br><br></li>
<li>
<b>End</b> — stops processing of the script.<br><br></li>
<li>
<b>Flush</b> — sends all of the information in the buffer.<br><br></li>
<li>
<b>Redirect</b> — redirects the user to a different URL.<br><br></li>
<li>
<b>Write</b> — writes into the HTML stream. This can be done by using the construct </li>
</ul>
<pre><code>Response.write("hello") 
</code></pre>
<p class=tl>
or the shortcut command </P><pre><code>&lt;%="hello"%&gt;
</code></pre>
<h4>The Server object</h4>
<p>
The Server object supports one property, <b>ScriptTimeout</b>, which allows you to set the value for when the script processing will time out, and the following methods:
<ul type=disc>
<li>
<b>CreateObject</b> — creates an instance of a server component. This component can be any component that you have installed on your server (such as an ActiveX™ component).<br><br></li>
<li>
<b>HTMLEncode</b> — encodes the specified string in HTML.<br><br></li>
<li>
<b>MapPath</b> — maps the current virtual path to a physical directory structure. You can then pass that path to a component that creates the specified directory or file on the server.<br><br></li>
<li>
<b>URLEncode</b> — applies URL encoding to a specified string. </li>
</ul>
<p>
<b>The Session object</b></p>
<p>
The Session object is used to store information about the current user's Web-server session. Variables stored with this object exist as long as the user's session is active, even if more than one application is used. This object supports one method, <b>Abandon</b>, which (believe it or not!) abandons the current Web-server session and destroys any objects. <b>Abandon</b> supports two properties, <b>SessionID</b>, containing the identifier for the current session, and <b>Timeout</b>, specifying a time-out value for the session. One thing to bear in mind about the session identifier: It's not a GUID. It's only good as long as the current Web-server session is running. If you shut down the Web-server service, the identifiers will start all over again. So don't use it to create logon IDs, or you'll have a bunch of duplicates and one heck of a headache. </p>
<h4>The Application object</h4>
<p>
The Application object can store information that persists for the entire lifetime of an application (a group of pages with a common root). Generally, this is the whole time that the IIS server is running. This makes it a great place to store information that has to exist for more than one user (such as a page counter). The downside of this is that since this object isn't created anew for each user, errors that may not show up when the code is called once may show up when it is called 10,000 times in a row. In addition, because the Application object is shared by all the users, threading can be a nightmare to implement. </p>
<h2><a name="aspoverread"></a>Further Reading</h2>
<p>
There's already a lot more information about Active Server Pages technology readily available. The trick, of course, is knowing where to find it and what to look for. </p>
<p>
Take a look at the Internet Information Server Web site at <a href="http://www.microsoft.com/iis/default.asp">http://www.microsoft.com/iis/default.asp</a>. I suggest clicking on the cascading menus on the left-hand pane. Click on <b>Learn About IIS</b> and highlight <b>Active Server Pages</b>. </p>
<p>
If you are a developer, go to <b>Developer Samples</b> at <a href="http://www.microsoft.com/iis/UsingIIS/Developing/Samples/default.htm">http://www.microsoft.com/iis/UsingIIS/Developing/Samples/default.htm</a> to download a host of samples written in different languages. The Developer Samples download shows you how one sample looks when written using Visual Basic 4.0, Visual Basic 5.0, Visual J++™ 1.0, and Visual C++® 4.2 (MFC and ATL 1.1). This is particularly nice if you are trying to learn the different technologies. </p>
<p>
The Microsoft IIS team has created a set of articles that go into detail about the technologies associated with IIS and ASP. You can find these articles in the Server section of the Site Builder Network Workshop Web site (<a href="http://www.microsoft.com/workshop/server/default.asp">http://www.microsoft.com/workshop/server/default.asp</a>) and in the MSDN Library:
<ul type=disc>
<li>
<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="msdn_ascwatl">
</object><a href=JavaScript:alink_2.Click()>"Developing Active Server Components with ATL"</a> by George V. Reilly<br><br></li>
<li>
<object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="msdn_aspmanag">
</object><a href=JavaScript:alink_3.Click()>"ASP and Web Session Management"</a> by Michael P. Levy<br><br></li>
<li>
<object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="msdn_itntlasp">
</object><a href=JavaScript:alink_4.Click()>"International Active Server Pages"</a> by Seth Pollack<br><br></li>
<li>
<object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="msdn_tshoot2">
</object><a href=JavaScript:alink_5.Click()>"ASP Troubleshooting Tips and Techniques"</a> by Mike Hedley</li>
</ul>
<p>
And last, but certainly not least, go to <a href="http://www.microsoft.com/workshop/server/default.asp">http://www.microsoft.com/workshop/server/default.asp</a> and select "bug zapper" from the menu for a list of links to known problems with ASP files.</p>
<p>
The IIS team recommends the first book on ASP and IIS, <i>Working with Active Server Pages</i> (QUE Corporation, US $39.99).</p>
<h2><a name="aspoverapp"></a>Appendix: System Requirements</h2>
<p>
The Active Server Pages feature of Internet Information Server 3.0 requires Windows NT Server 4.0 running IIS 3.0, Windows NT Workstation 4.0 running Peer Web Services, or Windows 95 running Peer Web Services. </p>
<p>
If you want to use Active Server Pages with either Personal Web Server on Windows 95 or Peer Web Services on Windows NT Workstation 4.0, you must install the Active Server Pages components after installing your server software. These components are not distributed with the Setup programs for Personal Web Server or Peer Web Services. To register and download the Setup program for these components, go to the Internet Information Server 3.0 page at <a href="http://www.microsoft.com/iis/default.asp">http://www.microsoft.com/iis/default.asp</a> and click the <b>Download</b> link. </p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Dynamic HTML Object Model</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_dynamom"></a>The Dynamic HTML Object Model</h1>
<p>
Nancy Winnick Cluts<br>
Microsoft Corporation</p>
<p>
April 7, 1997</p>
<h3>Abstract</h3>
<p>
Dynamic HTML is a group of technologies designed to create and display more interactive Web pages. It includes dynamic styles, dynamic content, two-dimensional (2-D) layout, data binding, and multimedia effects. The Dynamic HTML object model makes all of these features programmable. With Dynamic HTML, you can create Web pages that have all the power of a Microsoft® Windows®-based application. </p>
<p>
When you add all of this together, you get better performance for the client and the server, fewer round trips to the server (because attributes for elements can be updated on the fly on the client side), Web pages that are easier to author, and a truly interactive experience for the user. </p>
<p>
This article explains the basics of the Dynamic HTML object model and how it works.</p>
<h3>But <i>Object Model</i> Sounds So Scary!</h3>
<p>
The first time I was asked to write about Dynamic HTML, I was told about "the Internet Explorer 4.0 object model." I had no idea what that meant, but it sure sounded complex and scary to me. So I did what any self-respecting developer/writer would do: I decided that there were other, more pressing things to write about. Unfortunately, my hesitance did not make the whole thing go away. Turns out it wasn’t that difficult at all. Hopefully, I will explain it to you in such a fashion that you won’t feel any pain either.</p>
<p>
In this article, I will tell you about some of the different features that you will be able to use in Internet Explorer 4.0. I also think that it will be cool to show you the code and explain it.</p>
<h3>What is the Dynamic HTML Object Model?</h3>
<p>
The Dynamic HTML object model doesn’t define a whole new set of tags or attributes; it makes the tags, attributes, and CSS attributes that you know and love totally programmable. Existing JavaScript™ object models provide access to a small set of elements on the page. Further, only a small subset of their attributes can be modified, and only a small subset of events can be fired from them. Dynamic HTML provides access to all HTML elements and full access to every attribute. Additionally, the set of events that can be accessed for each object is much more complete than that of JavaScript object models.</p>
<p>
The Dynamic HTML object model makes it easier to write code due to <i>event bubbling</i>. Event bubbling is a process by which objects can either handle events or allow events to “bubble up” to the parent object. This capability enables you to write less code to handle events. You can let the parent object handle generic events so that each object doesn’t have to, or you can provide default actions.</p>
<p>
It is important to note that the Dynamic HTML object model is entirely language- and paradigm-neutral, which means that a Web page can be controlled via scripting, controls, or Java™ applets. The Dynamic HTML object model has been designed so that you can add Dynamic HTML functionality to pages, and they will still display well in older browsers that don't support that functionality. The object model described in this document is currently being proposed to the World Wide Web Consortium (W3C).</p>
<h3>Element Model</h3>
<p>
Dynamic HTML provides what is known as an <i>element model</i>. This means that every element on the page is accessible and all of its properties, methods, and events are exposed. You can handle events, such as button clicks or mouse-overs, for each HTML tag on a page. Once you trap these events, you can provide certain reactions to each event via scripting (Visual Basic® Scripting Edition [VBScript], JavaScript, and so on). For example, you can handle the mouse-over event for a tag by changing its font to a larger font when the user hovers the mouse pointer over the object, and dynamically changing the text of the object when the user clicks it. Using the Dynamic HTML object model, you can do things that you couldn’t easily do before. In the example below, I have created a global style sheet with multiple classes. On a mouse-over event, the class name is changed dynamically.</p>
<pre><code>&lt;STYLE&gt;
 .redText {color:Red}
 .blueText {color:Blue}
&lt;/STYLE&gt;
&lt;H1 onmouseover="this.className='redText'" 
onmouseout="this.className='blueText'"&gt;
Make this text red 
&lt;/H1&gt;
</code></pre>
<p>
The advantage of this approach is twofold: you get simpler coding and you get code reuse. How can anyone argue with that?</p>
<h3>Event Bubbling</h3>
<p>
Currently, you can handle a button-click event using Internet Explorer 3.0, but if you want to define a default behavior based on a button click, you have to copy and paste that code to script each object. Dynamic HTML provides a container hierarchy for its HTML documents. Using Internet Explorer 4.0, you write the code once and direct the parent object, via scripting, to handle the event. This is known as event “bubbling.” In more HTML-like terms, this means that you can have a scenario as follows:
<ul type=disc>
<li>
The user clicks an image.<br><br></li>
<li>
The &lt;IMG&gt; tag receives the event.<br><br></li>
<li>
The &lt;IMG&gt; tag does not want to handle the event.<br><br></li>
<li>
The &lt;IMG&gt; tag is inside the &lt;A&gt; tag, and the &lt;A&gt; tag receives the click event.<br><br></li>
<li>
If you want the &lt;IMG&gt; tag to handle the event, cancel the bubble via this code:<pre><code>window.event.cancelbubble = true.
</code></pre>
</li>
</ul>
<p>
Event bubbling allows you write more compact code (because you are writing the code only once) for common events. For an example of this, check out the code I have included in the following section from Mr. Alien Head.</p>
<h3>2-D Layout</h3>
<p>
Another area of improved functionality is the ability to provide content in two dimensions such that an object can be “on top” of another object. You can also move the object around while the user is viewing the page. This means that you can create a page where one object, such as a jet, can fly past another object—either on top of the object or behind it. One of the samples in the <i>Microsoft Dynamic HTML</i> <i>Gallery</i> at <a href="http://www.microsoft.com/GALLERY/FILES/HTML/">http://www.microsoft.com/GALLERY/FILES/HTML/</a>, Mr. Alien Head, shows just this type of functionality. (To see this functionality in action, you need to be running Internet Explorer 4.0. At the time of this writing (April 1997), Internet Explorer 4.0 was in Platform Preview test release. Please see the Internet Explorer Web site at <a href="http://www.microsoft.com/ie/">http://www.microsoft.com/ie/</a> for more information about the status and availability of Internet Explorer 4.0.) This functionality is actually a superset of Netscape's &lt;LAYER&gt; tag. The following code from Mr. Alien Head demonstrates how to let items move around on a page. </p>
<pre><code>&lt;TITLE&gt;Alien Head&lt;/TITLE&gt;
 &nbsp;&nbsp; &lt;SCRIPT LANGUAGE="JavaScript"&gt;
 &nbsp;&nbsp;&nbsp;&nbsp; var curElement;
 &nbsp;&nbsp;&nbsp;&nbsp; function doMouseMove() {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var newleft=0, newTop = 0
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ((event.button==1) &amp;&amp; (curElement!=null)) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // position alien
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; newleft=event.clientX-document.all.OuterDiv.offsetLeft-(curElement.offsetWidth/2)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (newleft&lt;0) newleft=0
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; curElement.style.pixelLeft= newleft
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; newtop=event.clientY -document.all.OuterDiv.offsetTop-(curElement.offsetHeight/2)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (newtop&lt;0) newtop=0
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; curElement.style.pixelTop= newtop
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; event.returnValue = false
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; event.cancelBubble = true
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp; }

 &nbsp;&nbsp;&nbsp;&nbsp; function doDragStart() {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Don't do default drag operation.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ("IMG"==event.srcElement.tagName)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; event.returnValue=false;
 &nbsp;&nbsp;&nbsp;&nbsp; }

 &nbsp;&nbsp;&nbsp;&nbsp; function doMouseDown() {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ((event.button==1) &amp;&amp; (event.srcElement.tagName=="IMG"))
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; curElement = event.srcElement
 &nbsp;&nbsp;&nbsp;&nbsp; }

 &nbsp;&nbsp;&nbsp;&nbsp; document.ondragstart = doDragStart;
 &nbsp;&nbsp;&nbsp;&nbsp; document.onmousedown = doMouseDown;
 &nbsp;&nbsp;&nbsp;&nbsp; document.onmousemove = doMouseMove;
 &nbsp;&nbsp;&nbsp;&nbsp; document.onmouseup = new Function("curElement=null")
 &nbsp;&nbsp; &lt;/SCRIPT&gt;
 &nbsp;&nbsp; &lt;SCRIPT FOR="alienhead" EVENT="onmousedown" LANGUAGE="JavaScript"&gt;
 &nbsp;&nbsp;&nbsp;&nbsp; // Do not move the alienhead or allow it to be dragged
 &nbsp;&nbsp;&nbsp;&nbsp; event.cancelBubble=true
 &nbsp;&nbsp; &lt;/SCRIPT&gt;
  &lt;/HEAD&gt;
</code></pre>
<h3>Summary</h3>
<p>
I've covered the basics of the Dynamic HTML object model. This article did not go into all of the features of Dynamic HTML—you can get that by reading <a href="msdn_dynhtml.htm">Dynamic HTML: The Next Generation of User Interface Design Using HTML</a>, a white paper that gives you the full scoop on Dynamic HTML and what it means to you as an Internet developer or content provider.</p>
</BODY>
</HTML>

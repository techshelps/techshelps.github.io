<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Accessing the World of Information: Open Database Connectivity (ODBC)</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>
<h1><a name="msdn_odbcbg"></a>Accessing the World of Information: Open Database Connectivity (ODBC)</h1>
<p>
Created:&nbsp; October 1992<br>
Revised:&nbsp; July 1993</p>
<h2>Abstract</h2>
<p>
Open database connectivity (ODBC) is Microsoft's strategic interface for accessing data in a heterogeneous environment of relational and non-relational database management systems. Based on the Call Level Interface specification of the SQL Access Group, ODBC provides an open, vendor-neutral way of accessing data stored in a variety of proprietary personal computer, minicomputer, and mainframe databases. ODBC alleviates the need for independent software vendors and corporate developers to learn multiple application programming interfaces. ODBC now provides a universal data access interface. With ODBC, application developers can allow an application to concurrently access, view, and modify data from multiple, diverse databases. ODBC is a core component of Microsoft® Windows™ Open Services Architecture (WOSA). Apple has endorsed ODBC as a key enabling technology and has announced the ODBC software developer's kit for Macintosh® developers. With growing industry support, ODBC has emerged as the industry standard for data access for both Windows-based and Macintosh-based applications.</p>
<h2>Introduction</h2>
<p>
Providing data access to applications in today's heterogeneous database environment is very complex for software vendors as well as corporate developers. With ODBC, Microsoft has eased the burden of data access by creating a vendor-neutral, open, and powerful means of accessing database management systems (DBMSs).</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;In the context of this paper, DBMS refers to a database product. This may be a relational database, such as Oracle® or DB2®, or a file-based database, such as dBASE®.
<ul type=disc>
<li>
ODBC is <i>vendor neutral</i>, allowing access to DBMSs from multiple vendors.<br><br></li>
<li>
ODBC is <i>open</i>. Working with ANSI standards, the SQL Access Group (SAG), X/Open, and numerous independent software vendors, Microsoft has gained a very broad consensus on ODBC's implementation, and it has become the dominant standard.<br><br></li>
<li>
ODBC is <i>powerful</i>—it offers capabilities critical to client/server on-line transaction processing (OLTP) and decision support systems (DSS) applications, including system table transparency, full transaction support, scrollable cursors, asynchronous calling, array fetch and update, a flexible connection model, and stored procedures for "static" SQL performance.</li>
</ul>
<h3>Benefits</h3>
<p>
ODBC provides many significant benefits to developers, end users, and the industry by providing an open, standard way to access data.
<ul type=disc>
<li>
ODBC allows users to access data in more than one data storage location (for example, more than one server) from within a single application.<br><br></li>
<li>
ODBC allows users to access data in more than one type of DBMS (such as DB2, Oracle, Microsoft® SQL Server, DEC® Rdb, Apple® DAL, and dBASE) from within a single application.<br><br></li>
<li>
ODBC greatly simplifies application development. It is now easier for developers to provide access to data in multiple, concurrent DBMSs.<br><br></li>
<li>
ODBC is a portable application programming interface (API), enabling the same interface and access technology to be a cross-platform tool.<br><br></li>
<li>
ODBC insulates applications from changes to underlying network and DBMS versions. Modifications to networking transports, servers, and DBMSs will not affect current ODBC applications.<br><br></li>
<li>
ODBC promotes the use of SQL—the standard language for DBMSs—as defined in the ANSI 1989 standard. It is an open, vendor-neutral specification based on the SAG Call Level Interface (CLI).<br><br></li>
<li>
ODBC allows corporations to protect their investments in existing DBMSs and protect developers' acquired DBMS skills. ODBC allows corporations to continue to use existing diverse DBMSs, while continuing to "rightsize" applications.</li>
</ul>
<p>
ODBC is the database access component of Windows™ Open Services Architecture (WOSA), Microsoft's strategic architecture for delivering on "Information At Your Fingertips." This paper describes how ODBC fits into the WOSA framework, the challenges facing developers and users in today's complex computing environment, how ODBC meets these challenges, and why ODBC has become the dominant solution for data access.</p>
<h2>The WOSA Solution</h2>
<p>
In the absence of a formal way to connect front-end applications to various back-end services, application developers are forced to incorporate support for vendor-specific APIs in their applications. Supporting additional services requires that application developers either build new applications or modify existing ones to accommodate diverse APIs—this process is both labor-intensive and expensive.</p>
<p>
WOSA provides a single, system-level interface to enterprise computing environments, while hiding the complexities of heterogeneous environments from end users and developers. By taking advantage of the WOSA interface, a Windows-based desktop application does not need to contain special code for any of the types of network in use, the types of computers in the enterprise, or the types of back-end services available in order to gain seamless access to available information. As a result, even if the network, computers, or services should change, the desktop application does not need to be modified. In other words, WOSA enables Windows-based applications to connect to all the services across multiple computing environments.</p>
<p>
The Windows operating system presents end users with a single application interface. Once users learn how to use one application, they can quickly learn others. Similarly, WOSA presents developers of distributed applications with a single interface for communicating with back-end services such as DBMSs and messaging. Instead of having to learn a different API for each implementation of a service, developers building applications with WOSA only need to learn a single API for <i>all</i> implementations of a particular service. Furthermore, when an existing service is modified or replaced, the front-end application is unaffected as long as the new back-end service communicates through the WOSA interface.</p>
<p>
WOSA makes it possible for corporate developers to build stable, long-term enterprise solutions using various combinations of off-the-shelf products and custom packages, while presenting end users with a single, consistent interface. End users are spared having to learn a new application for each new service or each alteration of an existing service. Developers are spared having to constantly modify their applications to communicate with new services. WOSA makes the Windows operating system the single, reliable, strategic platform for end users, application developers, and MIS managers.</p>
<h3>What WOSA Does</h3>
<p>
WOSA provides a single system-level interface for connecting front-end applications with back-end services. Application developers and end users alike do not have to worry about using numerous different services, each with its own protocols and API, because making these connections is the business of the operating system, not of individual applications.</p>
<p>
WOSA provides an extensible framework in which Windows-based applications can seamlessly access information and network resources in a distributed computing environment. WOSA accomplishes this magic by making a set of common APIs available to all applications.</p>
<p>
ODBC and MAPI (Messaging API) are two of the key components of WOSA, along with the Windows Sockets Library, the Licensing API, and Remote Procedure Calls (RPCs). ODBC addresses database connectivity technology, while MAPI addresses electronic mail and workgroup productivity applications. MAPI, ODBC, and the other WOSA components will become part of the standard Windows and Windows NT™ operating systems sometime in the future.</p>
<h2>The Need for Database Connectivity</h2>
<p>
Information has become a key asset to corporate competitiveness. To be competitive in the 1990s, corporations need access to accurate and timely information. Companies are striving to achieve a higher level of accuracy and effectiveness in areas such as pricing, quality control, market analysis, capacity planning, inventory management, customer service, and billing. At the same time, users are demanding better tools for accessing this information. Users demand graphical user interfaces, leading edge analytical tools, easy ways of accessing and viewing information—all without having to know the structure or language of the underlying DBMS or the issues unique to their network.</p>
<p>
To achieve this goal, corporations must provide better tools for end users to access existing information while providing a migration path for the data and the applications as they evolve or are "rightsized" to the optimum platform. This presents a difficult challenge, given the heterogeneous nature of most corporations' current information technology.</p>
<h3>Heterogeneous Database Environments</h3>
<p>
Historically, database applications have been built to access a single source of data. The range of applications varies from mainframe-based, batch-oriented DBMSs, to terminal-based, interactive applications, to personal computer–based, single-user DBMSs, to the more recent client/server DBMSs. Data typically resides in a variety of file formats, such as VSAM and ISAM, as well as in hierarchical and relational DBMSs.</p>
<p>
Corporations typically have applications and data residing on diverse platforms and DBMSs for historical, strategic, and technological reasons. Corporations often have legacy systems that must be maintained because they contain key corporate data. Corporate mergers often bring together diverse information technologies. Systems were often developed using technology that met a specific requirement, such as an engineering application. Departmental users developed their own workgroup and single-user personal computer databases. Over time, data on any of these systems might be summarized for consumption by analysts, copied and distributed geographically, or have many snapshots taken of it.</p>
<p>
There is a strong requirement for a common method of accessing, managing, and analyzing data. The heterogeneous nature of database environments is a problem corporations are faced with today. Many firms have discovered that much of the cost associated with application maintenance is related to data access problems. One of the first steps to meeting the needs of information users is database connectivity.</p>
<h3>Database Connectivity Components</h3>
<p>
Database connectivity allows an application to communicate with one or more DBMSs. Database connectivity is a requirement whether the application uses a file-based (ISAM) approach, a client/server model, or traditional mainframe connectivity. The requirement for database connectivity has been hastened by client/server computing. As users increasingly use graphical, personal computer–based tools to analyze, prepare, and present data, they require greater access to the vast volumes of existing corporate data. In the most general sense, client/server computing means that some portion of the application runs on a personal computer. At the very least, this computer is responsible for screen presentation and gathering user input. The server (or host) is responsible for responding to queries; managing concurrency, security, backup and recovery; transaction processing; and so on. This differs from centralized, host-based applications where the entire application runs on the host platform.</p>
<p>
<img src="odbcbg_1.gif" border=0></p>
<p>
Some of the key components involved with database connectivity are explained below.</p>
<p class=dt>
Application</p>
<p class=indent>
Allows users to perform a set of functions, such as queries, data entry, and report generation. Examples are Microsoft Excel, Microsoft Works, Aldus PageMaker®, and internally developed applications such as an executive information system or a reporting system.</p>
<p class=dt>
Client system</p>
<p class=indent>
The physical system where the client portion of an application runs. In the personal computer world, this may be an IBM® PC or compatible or an Apple Macintosh.</p>
<p class=dt>
Data access software</p>
<p class=indent>
A service layer on client systems that provides a direct interface for applications. This "middleware" or enabling software plays a key role in client/server data access. This layer accepts data retrieval and update requests directly from the application, and transmits them across the network. This "middleware" also is responsible for returning results and error codes back to the application.</p>
<p class=dt>
Data source</p>
<p class=indent>
The data and method of data access. The data may exist in a variety of hierarchical or relational DBMSs, or in a file with a format such as ISAM or VSAM.</p>
<p class=dt>
Network</p>
<p class=indent>
The physical connection of the client to the server system.</p>
<p class=dt>
Network software</p>
<p class=indent>
The software protocols that allow the client to communicate with the server system.</p>
<p class=dt>
Server system</p>
<p class=indent>
The physical system where the DBMS resides (also known as the host system). For example, the server system could be an IBM PC or compatible, a DEC VAX®, or an IBM mainframe.</p>
<h3>The Challenge of Database Connectivity</h3>
<p>
One of the challenges of database connectivity is accessing multiple, heterogeneous data sources from within a single application. A second challenge is flexibility—the application should be able to directly access data from a variety of data sources without modification to the application. For example, an application could access data from dBASE in a stand-alone, small office environment, and from SQL Server or Oracle in a larger, networked environment. Due to these challenges, some Fortune 500 firms have as little as 1 percent of enterprise data in a form that is truly accessible.</p>
<p>
<img src="odbcbg_2.gif" border=0></p>
<p>
These challenges are common to developers of off-the-shelf applications, and to corporate developers attempting to provide solutions to end users or to migrate data to new platforms. These challenges grow exponentially for developers and support staff as the number of data sources grows.</p>
<p>
The problems of database connectivity are apparent in the differences among the programming interfaces, DBMS protocols, DBMS languages, and network protocols of disparate data sources. Even when data sources are restricted to relational DBMSs that use SQL, significant differences in SQL syntax and semantics must be resolved.</p>
<p>
The primary differences in the implementation of each of these components are:
<ul type=disc>
<li>
<b>Programming interface.</b> Each vendor provides his/her own proprietary programming interface. One method of accessing a relational DBMS is through embedded SQL. Another method is through an API.<br><br></li>
<li>
<b>DBMS protocol.</b> Each vendor uses proprietary data formats and methods of communication between the application and the DBMS. For example, there are many different ways to delineate the end of one row of data and beginning of the next.<br><br></li>
<li>
<b>DBMS language.</b> SQL has become the language of choice for relational DBMSs, but many differences still exist among actual SQL implementations.<br><br></li>
<li>
<b>Networking protocols.</b> There are many diverse local area network (LAN) and wide area network (WAN) protocols in networks today. DBMSs and applications must coexist in these diverse environments. For example, SQL Server may use DECnet on a VAX, TCP/IP on UNIX, and Netbeui or SPX/IPX on a PC.</li>
</ul>
<p>
To access various database environments, an application developer would have to learn to use each vendor's programming interface, employ each vendor's SQL, and ensure that the proper programming interface, network, and DBMS software were installed on the client system. This complexity makes broad database connectivity unfeasible for most developers and users today.</p>
<h3>Approaches to Database Connectivity</h3>
<p>
Several vendors have attempted to address the problem of database connectivity in a variety of ways. The primary approaches include using gateways, a common programming interface, and a common protocol.</p>
<h4>Gateways</h4>
<p>
Application developers use one vendor's programming interface, SQL grammar, and DBMS protocol. A gateway causes a target DBMS to appear to the application as a copy of the selected DBMS. The gateway translates and forwards requests to the target DBMS and receives results from it. For example, applications that access SQL Server can also access DB2 data through the Micro Decisionware® DB2 Gateway. This product allows a DB2 DBMS to appear to a Windows-based application as a SQL Server DBMS. Note that an application using this gateway would need a different gateway for each type of DBMS it needs to access, such as DEC Rdb, Informix®, Ingres™, and Oracle.</p>
<p>
The gateway approach is limited by architectural differences among DBMSs, such as differences in catalogs and SQL implementations, and the need for one gateway for each target DBMS. Gateways remain a very valid approach to database connectivity, and are essential in certain environments, but are typically not a broad, long-term solution.</p>
<p>
<img src="odbcbg_3.gif" border=0></p>
<h4>Common interface</h4>
<p>
A single programming interface is provided to the developer. It is possible to provide some standardization in a database application development environment or user interface even when the underlying interfaces are different for each DBMS. This is accomplished by creating a standard API, macro language, or set of user tools for accessing data and translating requests for, and results from, each target DBMS. A common interface is usually implemented by writing a driver for each target DBMS.</p>
<h4>Common protocol</h4>
<p>
The DBMS protocol, SQL grammar, and networking protocols are common to all DBMSs, so the application can use the same protocol and SQL grammar to communicate with all DBMSs. Examples are remote data access (RDA) and distributed relational database architecture (DRDA). RDA is an emerging standard from SAG, but not available today. DRDA is IBM's alternative DBMS protocol. Common protocols can ultimately work very effectively in conjunction with a common interface.</p>
<p>
There are several current vendor-specific approaches that address database connectivity. These current approaches have several limitations. Many companies expend resources solving the same problem. This results in diverse implementations and duplication of effort. The results are inconsistent interfaces for end users and developers, overlap in effort, and a compromise in functionality and connectivity options. Although some current implementations provide viable solutions, none have the critical mass to emerge as a de facto standard.</p>
<p>
Common interfaces, protocols, and gateways may be combined. A common protocol and interface provides a standard API for developers as well as a single protocol for communication with all databases. A common gateway and interface provides a standard API for developers and allows the gateway to provide functionality, such as translation and connectivity to wide area networks, that would otherwise need to be implemented on each client station. Note that a common gateway or protocol still requires a common interface to hide complexities from developers.</p>
<h2>The ODBC Solution</h2>
<p>
ODBC addresses the heterogeneous database connectivity problem using the common interface approach. Application developers use one API to access all data sources. ODBC is based on a CLI specification, which was developed by a consortium of over 40 companies (members of the SQL Access Group and others), and has broad support from application and database vendors. The result is a single API that provides all the functionality that application developers need, and an architecture that database developers require to ensure interoperability. This will result in a rich set of applications that use ODBC, and provide applications with much broader access to data than ever before.</p>
<h3>How ODBC Works</h3>
<p>
ODBC defines an API. Each application uses the same code, as defined by the API specification, to talk to many types of data sources through DBMS-specific drivers. A Driver Manager sits between the applications and the drivers. In Windows, the Driver Manager and the drivers are implemented as dynamic-link libraries (DLLs).</p>
<p>
<img src="odbcbg_4.gif" border=0></p>
<p>
The application calls ODBC functions to connect to a data source, send and receive data, and disconnect.</p>
<p>
The Driver Manager provides information to an application such as a list of available data sources; loads drivers dynamically as they are needed; and provides argument and state transition checking.</p>
<p>
The driver, developed separately from the application, sits between the application and the network. The driver processes ODBC function calls, manages all exchanges between an application and a specific DBMS, and may translate the standard SQL syntax into the native SQL of the target data source. All SQL translations are the responsibility of the driver developer.</p>
<p>
Applications are not limited to communicating through one driver. A single application can make multiple connections, each through a different driver, or multiple connections to similar sources through a single driver.</p>
<p>
To access a new DBMS, a user or an administrator installs a driver for the DBMS. The user does not need a different version of the application to access the new DBMS. This is a tremendous benefit for end users, as well as providing significant savings for IS organizations in support and development costs.</p>
<h3>What ODBC Means to the End User</h3>
<p>
End users do not work directly with the ODBC API, but they benefit in several ways when they use applications written with ODBC. Users may:
<ul type=disc>
<li>
Select a data source from a list of data source names or supply the name of a data source in a consistent way across applications.<br><br></li>
<li>
Submit data access requests in industry-standard SQL grammar regardless of the target DBMS.<br><br></li>
<li>
Access different DBMSs by using familiar desktop applications. When a requirement arises to access data on a new platform, users will have a common level of functional capabilities while accessing the new data with familiar tools.</li>
</ul>
<p>
<img src="odbcbg_5.gif" border=0></p>
<h3>What ODBC Means to Application Developers</h3>
<p>
ODBC was designed to allow application developers to decide between using the least common denominator of functionality across DBMSs or exploiting the individual capabilities of specific DBMSs.</p>
<p>
ODBC defines a standard SQL grammar and set of function calls that are based upon the SAG CLI specification, called the <i>core grammar</i> and <i>core functions</i>, respectively. If an application developer chooses only to use the core functionality, they need not write any additional code to check for specific capabilities of a driver.</p>
<p>
With core functionality, an application can:
<ul type=disc>
<li>
Establish a connection with a data source, execute SQL statements, and retrieve results.<br><br></li>
<li>
Receive standard error messages.<br><br></li>
<li>
Provide a standard logon interface to the end user.<br><br></li>
<li>
Use a standard set of data types defined by ODBC.<br><br></li>
<li>
Use a standard SQL grammar defined by ODBC.</li>
</ul>
<p>
ODBC also defines an extended SQL grammar and set of extended functions to provide application developers with a standard way to exploit advanced capabilities of a DBMS. In addition to the above features, ODBC includes a set of extensions that provide enhanced performance and increased power through<i> </i>the following features:
<ul type=disc>
<li>
Data types such as date, time, timestamp, and binary.<br><br></li>
<li>
Scrollable cursors.<br><br></li>
<li>
A standard SQL grammar for scalar functions, outer joins, and procedures. <br><br></li>
<li>
Asynchronous execution.<br><br></li>
<li>
A standard way for application developers to find out what capabilities a driver and data source provide.</li>
</ul>
<p>
Finally, ODBC supports the use of DBMS-specific SQL grammar, allowing applications to exploit the capabilities of a particular DBMS.</p>
<h3>What ODBC Means to Database Developers</h3>
<p>
One ODBC driver can be developed that provides access to the DBMS. Any ODBC application may then gain access to that DBMS. This provides a wider number and variety of tools that will work with the DBMS, resulting in larger market potential for vendors and a wider variety of tools for corporations to choose from.</p>
<h3>Industry Commitment to ODBC</h3>
<p>
ODBC enjoys a great deal of industry momentum and acceptance as the dominant standard. Database vendors, with the help of third-party developers, have created drivers for their products. Several major application vendors have now shipped products which are ODBC-enabled. ODBC's acceptance to date is due to a variety of reasons:
<ul type=disc>
<li>
It is an implementation of the SAG CLI specification, and is therefore vendor-neutral and open. This open systems approach solves a problem common to everyone in the software industry.<br><br></li>
<li>
As a portable API, it can be a common data access language for both the Windows and Macintosh environments, and possibly other operating systems in the future.<br><br></li>
<li>
By providing different conformance levels, ODBC allows developers to choose between a least common denominator approach (allowing common access to the broadest set of DBMSs), and being able to fully exploit advanced feature sets in the more robust DBMSs.</li>
</ul>
<p>
The following databases will be supported by one or more database drivers by the end of 1993:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td width=33%>ADABAS SQL Server</td>
<td width=33%>IBM DB2/6000</td>
<td width=34%>Quadbase</td>
</tr>
<tr valign=top>
<td width=33%>Btrieve</td>
<td width=33%>IBM SQL/400®</td>
<td width=34%>Raima</td>
</tr>
<tr valign=top>
<td width=33%>CA-IDMS</td>
<td width=33%>IBM SQL/DS™</td>
<td width=34%>R:BASE®</td>
</tr>
<tr valign=top>
<td width=33%>CA-Datacom</td>
<td width=33%>Informix</td>
<td width=34%>Siemens/Nixdorf SESAM </td>
</tr>
<tr valign=top>
<td width=33%>CA-DB</td>
<td width=33%>Ingres</td>
<td width=34%>Siemens/Nixdorf UDSD</td>
</tr>
<tr valign=top>
<td width=33%>DAL</td>
<td width=33%>Integra SQL</td>
<td width=34%>SQL Server</td>
</tr>
<tr valign=top>
<td width=33%>dBASE</td>
<td width=33%>Interbase</td>
<td width=34%>SupraServer</td>
</tr>
<tr valign=top>
<td width=33%>DEC Rdb</td>
<td width=33%>Microsoft Access®</td>
<td width=34%>Systems 2000</td>
</tr>
<tr valign=top>
<td width=33%>DEC RMS</td>
<td width=33%>Microsoft Excel</td>
<td width=34%>Tandem NonStop™ SQL</td>
</tr>
<tr valign=top>
<td width=33%>Focus®</td>
<td width=33%>Microsoft FoxPro</td>
<td width=34%>Teradata®</td>
</tr>
<tr valign=top>
<td width=33%>Formatted Text</td>
<td width=33%>Model 204</td>
<td width=34%>Text files</td>
</tr>
<tr valign=top>
<td width=33%>Gupta SQLBase®</td>
<td width=33%>NetWareSQL</td>
<td width=34%>UNIFY</td>
</tr>
<tr valign=top>
<td width=33%>HP® ALLBASE/SQL</td>
<td width=33%>Nomad Gateway</td>
<td width=34%>WATCOM SQL for Windows</td>
</tr>
<tr valign=top>
<td width=33%>HP Image®/SQL</td>
<td width=33%>Oracle</td>
<td width=34%>White Cross 9000</td>
</tr>
<tr valign=top>
<td width=33%>IBI EDA/SQL™</td>
<td width=33%>Paradox®</td>
<td width=34%>XDB</td>
</tr>
<tr valign=top>
<td width=33%>IBM DB2</td>
<td width=33%>PICK</td>
<td width=34%></td>
</tr>
<tr valign=top>
<td width=33%>IBM DB2/2</td>
<td width=33%>Progress</td>
<td width=34%></td>
</tr>
</table><br>
<p>
The following application vendors have released ODBC-enabled products or have publicly endorsed ODBC technology as of July 1993:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=50%>Andyne</td>
<td width=50%>JYACC</td>
</tr>
<tr valign=top>
<td width=50%>Approach Software</td>
<td width=50%>Knowledgeware</td>
</tr>
<tr valign=top>
<td width=50%>Blue Sky Software</td>
<td width=50%>LABTECH</td>
</tr>
<tr valign=top>
<td width=50%>Blyth </td>
<td width=50%>Lotus Development</td>
</tr>
<tr valign=top>
<td width=50%>Brio </td>
<td width=50%>mdbs</td>
</tr>
<tr valign=top>
<td width=50%>Bull HN</td>
<td width=50%>Micro Design International</td>
</tr>
<tr valign=top>
<td width=50%>Canaan Analytics</td>
<td width=50%>Microsoft Corporation</td>
</tr>
<tr valign=top>
<td width=50%>Cincom Systems, Inc.</td>
<td width=50%>Natural Language</td>
</tr>
<tr valign=top>
<td width=50%>Computer Corporation of America</td>
<td width=50%>Neuron Data</td>
</tr>
<tr valign=top>
<td width=50%>Clear Access</td>
<td width=50%>PageAhead Software Corp.</td>
</tr>
<tr valign=top>
<td width=50%>Cognos</td>
<td width=50%>Parcplace Systems</td>
</tr>
<tr valign=top>
<td width=50%>Computer Associates</td>
<td width=50%>Pilot Technologies</td>
</tr>
<tr valign=top>
<td width=50%>Coromandel</td>
<td width=50%>Pioneer Software Systems Corp.</td>
</tr>
<tr valign=top>
<td width=50%>CSA</td>
<td width=50%>Powersoft</td>
</tr>
<tr valign=top>
<td width=50%>DataEase International</td>
<td width=50%>Progress Software</td>
</tr>
<tr valign=top>
<td width=50%>Dharma Systems</td>
<td width=50%>Revelation </td>
</tr>
<tr valign=top>
<td width=50%>EASEL</td>
<td width=50%>SPC</td>
</tr>
<tr valign=top>
<td width=50%>Fairfield Software</td>
<td width=50%>SPSS</td>
</tr>
<tr valign=top>
<td width=50%>FileNet</td>
<td width=50%>Sterling Software</td>
</tr>
<tr valign=top>
<td width=50%>Genus Software</td>
<td width=50%>SoftwareTechnologies</td>
</tr>
<tr valign=top>
<td width=50%>Great Plains Software</td>
<td width=50%>The Dodge Group</td>
</tr>
<tr valign=top>
<td width=50%>Guild Software</td>
<td width=50%>Trinzic</td>
</tr>
<tr valign=top>
<td width=50%>Gupta Technologies, Inc.</td>
<td width=50%>Visionware</td>
</tr>
<tr valign=top>
<td width=50%>Hewlett-Packard Company</td>
<td width=50%>Winclient</td>
</tr>
<tr valign=top>
<td width=50%>Icons International</td>
<td width=50%>Xdb</td>
</tr>
</table><br>
<h3>Future Plans for ODBC</h3>
<p>
The next release of the ODBC Software Development Kit, version 2.0, will be available in the first quarter of 1994, and will provide considerable enhancements based on input from software vendors and corporate developers. The new version will support the 32-port technology of Windows NT, scrollable cursors independent of driver capability, additional sample applications, and sophisticated debugging tools.</p>
<p>
Apple has endorsed ODBC technology and will continue to enable developers to exploit the power of ODBC. Apple has announced their ODBC Software Developers Kit and will announce additional ODBC-compatible drivers later this year. ODBC is a completely portable API, and may be ported to other major operating system environments in the future. </p>
<h2>The Current Status of ODBC</h2>
<p>
ODBC is available for software vendors and corporate developers. The ODBC SDK includes development tools, documentation, a dBASE test driver for developing and testing ODBC applications, and an application for testing ODBC drivers. ODBC will be included in future versions of the Windows operating system. Microsoft has shipped numerous Windows-based applications with ODBC technology, and these products will continue to provide data connectivity through ODBC in future releases.</p>
<h3>ODBC SDK </h3>
<p>
The Microsoft ODBC SDK contains everything necessary for developing Windows-based ODBC applications and drivers. The ODBC SDK version 1.0 includes the following: 
<ul type=disc>
<li>
ODBC Programmer's Reference<br><br></li>
<li>
ODBC SDK Guide<br><br></li>
<li>
Sample source code<br><br></li>
<li>
Driver Manager DLL<br><br></li>
<li>
ODBC administrator (for configuring data sources)<br><br></li>
<li>
ODBC test program (for testing drivers)<br><br></li>
<li>
Visual Basic® demonstration application<br><br></li>
<li>
dBASE test driver<br><br></li>
<li>
On-line Help</li>
</ul>
<p>
Apple has announced its ODBC Software Developers Kit, which enables Macintosh developers to build applications and drivers using ODBC. The kit consists of an installer disk, ODBC test application, a test DBMS driver, and other components to assist in the development of ODBC-compatible applications for the Macintosh. Please contact Apple for availability and pricing information.</p>
<h3>Driver Catalog </h3>
<p>
The Microsoft <i>ODBC Driver Catalog</i> provides a quick reference for driver availability. This catalog contains key information on vendors that provide ODBC drivers, pricing, availability, and contacts.</p>
<h3>Information Resources for ODBC </h3>
<p>
CompuServe® provides the Windows Extension forum, which has an ODBC section. Please refer to this forum for updates on ODBC's status. The library in this section contains relevant files that may be downloaded. To access the forum from CompuServe, type GO WINEXT, and then select the ODBC section.</p>
<p>
Technet, Microsoft's technical information network, is a community of support professionals, system integrators and solution builders, many of whom have experience implementing ODBC technology.</p>
<p>
The Microsoft Developer Network publishes technical information for all developers who write applications for Microsoft operating systems or who use Microsoft development tools. ODBC-experienced developers contribute information to the network, which helps speed the acceptance and implementation of ODBC technology.</p>
<h2>Summary</h2>
<p>
Providing data access to applications in today's heterogeneous database environment is very complex for software vendors as well as corporate developers. ODBC solves this data access problem for software vendors and corporations by providing a standard, open, and vendor-neutral API. ODBC allows corporations and software vendors to protect their investments in existing DBMSs, and protect developers' acquired DBMS skills. ODBC benefits users as more end-user applications connect to additional data sources, making the vast volumes of corporate data more readily available. ODBC is a portable API, which allows it to be a cross-platform tool. It is based upon the SQL Access Group (SAG) Call Level Interface (CLI) and provides a standard SQL language based upon ANSI standards. With ODBC, Microsoft provides many benefits to developers, end users, and the industry by creating a vendor-neutral, open, and powerful means of accessing data. </p>
</BODY>
</HTML>

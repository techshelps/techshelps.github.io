<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Enlisting Resources in Transactions with Microsoft Transaction Server</title>
                <style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="msdn_enlisting"></a>Enlisting Resources in Transactions with Microsoft Transaction Server</h1>
<p>
Microsoft Corporation</p>
<p>
June 1997</p>
<h2>Introduction</h2>
<p>
Microsoft® Transaction Server (MTS) provides automatic transactions, which means that transaction requirements are declaratively stated as component properties. MTS automatically begins transactions and commits or aborts these transactions on behalf of the component, based on the component's transaction property.</p>
<p>
Automatic transactions work because resource dispensers pass transactions to the resource manager. For example, the ODBC Driver Manager is a resource dispenser for ODBC database connections. When a database connection is requested from a transactional component, the ODBC Driver Manager obtains the transaction from the object's context. The ODBC Driver Manager then associates (enlists) the database connection with the transaction.</p>
<p>
If you do not have a resource dispenser, you can build your own using the Microsoft Transaction Server Beta Software Development Kit (SDK), available at <a href="http://www.microsoft.com/support/transaction/">http://www.microsoft.com/support/transaction/</a>. See the <i>Resource Dispenser Guide</i> and the samples included with the MTS Beta SDK for more information.</p>
<h2>Participating in Microsoft Transaction Server Transactions</h2>
<p>
For a resource manager to be able to participate in an MTS transaction, it must support one of the following protocols:
<ul type=disc>
<li>
OLE Transactions<br><br></li>
<li>
The X/Open DTP XA standard</li>
</ul>
<p>
OLE Transactions, the object-oriented, two-phase commit protocol defined by Microsoft, is the preferred protocol. OLE Transactions is based on the Component Object Model (COM) and is used by resource managers in order to participate in distributed transactions coordinated by Microsoft Distributed Transaction Coordinator (DTC). OLE Transactions is supported by Microsoft SQL Server™ version 6.5. See the <i>Resource Manager Guide</i> and the samples included with the MTS Beta SDK for more information on supporting OLE Transactions.</p>
<p>
XA is the two-phase commit protocol defined by the X/Open DTP group. XA is natively supported by many Unix databases, including Informix, Oracle, and DB2.</p>
<p>
For MTS to work with XA-compliant resource managers, an OLE Transactions-to-XA "mapper," provided by the MTS Beta SDK, makes it relatively straightforward for XA-compliant resource managers to provide resource dispensers that can accept OLE Transactions from MTS and translate to XA. See "Mapping OLE Transactions to the XA Protocol" in the MTS Beta SDK, or contact your resource manager vendor for more information.</p>
</BODY>
</HTML>

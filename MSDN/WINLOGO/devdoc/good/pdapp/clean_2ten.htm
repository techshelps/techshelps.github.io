<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>What is a Clean Application?</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_zaw_what_is_a_clean_application_"></a>What is a Clean Application?</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
A clean application is one that follows the <b><u>Designed for Microsoft</u></b>®<b><u> Windows</u></b>®<a href="logo_5772.htm"> Logo guidelines</a> so as to support the Zero Administration for Windows initiative from Microsoft. A clean application has the following characteristics:
<ul>
<li>
<a href="clean_9y0j.htm"><b>Segmentation</b></a>. A clean application of any size should be partitioned into components, each of which implements a subset of the application's functionality and feature set. This is usually the most difficult change you may have to make, because it affects your entire application architecture. The core program, and possibly several other components, will need to be designed to run independently of the others. <p>
Feature segmentation should be approached with two goals in mind:
<ol>
<li>
<a href="clean_1cj2.htm"><b>Just-in-Time Installation</b></a>. Good segmentation lets you take advantage of the new <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_msi_introduction_to_new_microsoft_installer_technology">
</object><a href=JavaScript:alink_1.Click()>Microsoft installation and component management technology</a> to keep your application's footprint small. Using this technology, you can install components supporting specialized, seldom-used features only when they are actually needed, saving space on most users' hard drives.</li>
<li>
<a href="clean_28by.htm"><b>Feature-Set Configuration</b></a>. Good segmentation also helps your application present itself at different levels of complexity suited to different user audiences, as controlled by registry entries. <p>
For example, a group of advanced features only needed by specialized users might be isolated in a single component and might appear in your application's user interface only if a registry key is set to indicate that it should be exposed.
<p>
Not only can this keep your memory and storage footprint small, it also allows administrators to lock down features of your application that their users may not need in a given enterprise environment. The ability to configure your application can help administrators significantly lower training and support costs in their organizations while increasing productivity .
</li>
</ol>
</li>
<li>
<a href="clean_6jg3.htm"><b>Abstraction of Data Locations</b></a>. Microsoft® Windows NT® 5.0 makes possible a new level of flexibility and mobility on enterprise networks. In particular, it supports:<ul>
<li>
<b>Roaming users</b>. A person should be able to log on to any unused computer in an organization and have the same settings and data available.</li>
<li>
<b>Mobile users</b>. Even when working on your laptop offline, you should have access to the resources you need to do your job.</li>
<li>
<b>Side-by-side computer replacement</b>. When hardware fails, it should no longer be necessary to spend hours reconfiguring a new computer. From now on, you should be able to plug a new computer in and within a few minutes recover the same configuration and data as existed on the computer that failed.</li>
</ul>
<p>
In order to make such flexibility possible, applications must not save settings and data to hard-coded locations on the local hard drive. Instead, they should look up the location of the appropriate paths using a shell function supplied for that purpose (<b>SHGetSpecialFolderLocation</b>). By doing so, they allow administrators to specify where various kinds of data reside, and to relocate data to network servers rather than local computers. A related issue is that applications using the registry must read and write carefully, in a way that will work as well on a busy remote server as on a dedicated local hard drive.
</li>
<li>
<b>Policy Support</b>. The most challenging aspect of policy support is the implementation of private policy options, mentioned above under the subject of segmentation. These are configuration options controlled through the registry that are provided by an application to make itself easier to administer and use in an enterprise environment. In addition to whatever private policy options an application may implement, it should also support the few public policy options published by Microsoft. This last requirement is important, but generally not difficult</li>
<li>
<b>Management Support Tools</b>. Client applications should provide or support any tools needed that administrators will need to manage deployment or use of the application in a large enterprise environment. The new Microsoft Management Console (MMC) provides an easy and consistent way for applications to expose management features.</li>
</ul>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DBGVER.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5445"></a>DBGVER.H</h2>
<pre><code>/*++ <br> <br>Copyright 1992 - 1998 Microsoft Corporation <br> <br>Module Name: <br> <br>    dbgver.h <br> <br>Abstract: <br> <br>Environment: <br> <br>    Win32, User Mode <br> <br>--*/ <br> <br>#if ! defined _DBGVER_ <br>#define _DBGVER_ <br> <br>/* <br>**  DBG_API_VERSION is the major version number used to specify the <br>**      api version of the debugger or debug dll.  For release versions <br>**      dlls will export this and debuggers will check against this <br>**      version to verify that it can use the dll. <br>** <br>**      For beta and debug versions, this number will be used in <br>**      conjunction with minor and revision numbers (probably derived <br>**      from SLM rmm &amp; rup) to verify compatibility. <br>** <br>**      Until the API has stabilized, we will most likely have to <br>**      rev this version number for every major product release. <br>** <br>*/ <br> <br>#include &lt;dbapiver.h&gt; <br> <br>/*  AVS - Api Version Structure: <br>** <br>**      All debug dlls should be prepared to return a pointer to this <br>**      structure conaining its vital statistics.  The debugger should <br>**      check first two characters of the dll's name against rgchType <br>**      and the version numbers as described in the DBG_API_VERSION <br>**      and show the user an error if any of these tests fail. <br>** <br>*/ <br> <br>typedef enum { <br>    rlvtRelease, <br>    rlvtBeta, <br>    rlvtDebug <br>} RLVT;     // ReLease Version Type <br> <br>typedef struct _AVS { <br>    CHAR rgchType [ 2 ];    // Component name (EE,EM,TL,SH,DM) <br>    WORD rlvt;              // ReLease Version Type <br>    BYTE iApiVer;           // DBG_API_VERSION <br>    BYTE iApiSubVer;        // DBG_API_SUBVERSION <br>    WORD iRup;              // Revision number <br>    WORD chBuild;           // Build of revision # (a,b,c,d) <br>    LSZ  lszTitle;          // User readable text describing the DLL <br>    MPT  mpt;               // CPU binary is running on <br>    WORD iRmj;              // Major version number <br>    WORD iRmm;              // Minor version number <br>} AVS;  // Api Version Structure <br>typedef AVS FAR *LPAVS; <br> <br>/*  DBGVersionCheck: <br>** <br>**      All debug dlls should provide this API and support the return <br>**      of a pointer to the structure described above even before <br>**      initialization takes place. <br>*/ <br> <br>#if defined(_M_IX86) <br>#define __dbgver_cpu__ mptix86 <br>#elif defined(_M_MRX000) <br>#define __dbgver_cpu__ mptmips <br>#elif defined(_M_ALPHA) <br>#define __dbgver_cpu__ mptdaxp <br>#elif defined(_M_PPC) <br>#define __dbgver_cpu__ mptmppc <br>#else <br>#error( "unknown target machine" ); <br>#endif <br> <br>#define DEBUG_VERSION(C1,C2,TITLE) \ <br>AVS Avs = {      \ <br>    { C1, C2 },         \ <br>    rlvtDebug,          \ <br>    DBG_API_VERSION,    \ <br>    DBG_API_SUBVERSION, \ <br>    0,                  \ <br>    '\0',               \ <br>    TITLE,              \ <br>    __dbgver_cpu__,     \ <br>    0,                \ <br>    0,                \ <br>    }; <br> <br>#define RELEASE_VERSION(C1,C2,TITLE)    \ <br>AVS Avs = {      \ <br>    { C1, C2 },         \ <br>    rlvtRelease,        \ <br>    DBG_API_VERSION,    \ <br>    DBG_API_SUBVERSION, \ <br>    0,                  \ <br>    '\0',               \ <br>    TITLE,              \ <br>    __dbgver_cpu__,     \ <br>    0,                \ <br>    0,                \ <br>}; <br> <br>#undef MINOR <br>#undef MAJOR <br> <br>typedef LPAVS (LOADDS EXPCALL FAR *DBGVERSIONCHECK)(void); <br> <br>#define DBGVERSIONPROCNAME "DBGVersionCheck" <br> <br>typedef LPAVS (*DBGVERSIONPROC)(void); <br> <br>LPAVS LOADDS EXPCALL FAR DBGVersionCheck( void ); <br> <br>#define DBGVERSIONFUNCTION() \ <br>    LPAVS LOADDS EXPCALL FAR DBGVersionCheck( void ) { return &amp;Avs; } <br> <br>#endif // _DBGVER_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

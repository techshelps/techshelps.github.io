<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TYPES.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5449"></a>TYPES.H</h2>
<pre><code>/** types.h - Generic types <br> * <br> *      This file contains generic types such as USHORT, ushort, <br> *      WORD, etc., which are not directly related to CodeView. <br> *      Every attempt is made to define them in such a way as they <br> *      will not conflict with the standard header files such as <br> *      windows.h and os2.h. <br> */ <br> <br>#ifndef CVINC_TYPES /* whole file */ <br>#define CVINC_TYPES <br> <br>#ifdef HOST32   /* { */ <br> <br>#define _export <br> <br>#ifndef LOADDS <br>#define LOADDS <br>#endif <br> <br>#ifndef PASCAL <br>#define PASCAL __stdcall <br>#endif <br> <br>#ifndef CDECL <br>#define CDECL _cdecl <br>#endif <br> <br>#ifndef FASTCALL <br>#define FASTCALL __fastcall <br>#endif <br> <br>#ifndef far <br>#define far <br>#endif <br> <br>#ifndef FAR <br>#define FAR far <br>#endif <br> <br>#ifndef near <br>#define near <br>#endif <br> <br>#ifndef NEAR <br>#define NEAR near <br>#endif <br> <br>#ifndef _HUGE_ <br>#define _HUGE_ <br>#endif <br> <br>// Use SEGBASED for based on a segment [e.g. SEGBASED(__segname("_CODE"))] <br>#ifndef SEGBASED <br>#define SEGBASED(x) <br>#endif <br> <br>/* <br>**  This set of functions need to be expanded to deal with <br>**  unicode and other problems. <br>*/ <br> <br>// These #defines are taken care of by windowsx.h <br> <br>#ifndef _INC_WINDOWSX <br> <br>#define _ncalloc    calloc <br>#define _nexpand    expand <br>#define _ffree      free <br>#define _fmalloc    malloc <br>#define _fmemccpy   _memccpy <br>#define _fmemchr    memchr <br>#define _fmemcmp    memcmp <br>#define _fmemcpy    memcpy <br>#define _fmemicmp   _memicmp <br>#define _fmemmove   memmove <br>#define _fmemset    memset <br>#define _fmsize     _msize <br>#define _frealloc   realloc <br>#define _fstrcat    strcat <br>#define _fstrchr    strchr <br>#define _fstrcmp    strcmp <br>#define _fstrcpy    strcpy <br>#define _fstrcspn   strcspn <br>#define _fstrdup    _strdup <br>#define _fstricmp   _stricmp <br>#define _fstrlen    strlen <br>#define _fstrlwr    _strlwr <br>#define _fstrncat   strncat <br>#define _fstrncmp   strncmp <br>#define _fstrncpy   strncpy <br>#define _fstrnicmp  _strnicmp <br>#define _fstrnset   _strnset <br>#define _fstrpbrk   strpbrk <br>#define _fstrrchr   strrchr <br>#define _fstrrev    _strrev <br>#define _fstrset    _strset <br>#define _fstrspn    strspn <br>#define _fstrstr    strstr <br>#define _fstrtok    strtok <br>#define _fstrupr    _strupr <br>#define _nfree      free <br>#define _nmalloc    malloc <br>#define _nmsize     msize <br>#define _nrealloc   realloc <br>#define _nstrdup    _strdup <br>#define hmemcpy     memcpy <br> <br>#endif <br> <br>#define FP_OFF(x) x <br> <br>#else   // !HOST32 }{ <br> <br>#ifndef LOADDS <br>#define LOADDS _loadds <br>#endif <br> <br>#ifndef PASCAL <br>#define PASCAL _pascal <br>#endif <br> <br>#ifndef CDECL <br>#define CDECL _cdecl <br>#endif <br> <br>#ifndef FASTCALL <br>#define FASTCALL _fastcall <br>#endif <br> <br>#ifndef FAR <br>#define FAR _far <br>#endif <br> <br>#ifndef NEAR <br>#define NEAR _near <br>#endif <br> <br>#ifndef _HUGE_ <br>#define _HUGE_ _huge <br>#endif <br> <br>// Use SEGBASED for based on a segment [e.g. SEGBASED(__segname("_CODE"))] <br>#ifndef SEGBASED <br>#define SEGBASED(x) _based(x) <br>#endif <br> <br>#endif  // HOST32 } <br> <br>#ifndef INTERRUPT <br>#define INTERRUPT _interrupt <br>#endif <br> <br>#ifndef LOCAL <br>#ifdef DEBUGVER <br>#define LOCAL <br>#else <br>#define LOCAL static <br>#endif <br>#endif <br> <br>#ifndef GLOBAL <br>#define GLOBAL <br>#endif <br> <br>#ifndef INLINE <br>#define INLINE __inline <br>#endif <br> <br>// <br>// Things that come from either windows.h or os2.h <br>// <br> <br>#if !defined(LOWORD) &amp;&amp; !defined(OS2_INCLUDED) <br> <br>    #define VOID            void <br>    typedef unsigned char   BYTE; <br>    typedef int             BOOL; <br>    #define LONG            long <br> <br>#endif <br> <br>// <br>// Things that come from windows.h and cwindows.h <br>// <br> <br>#if !defined(LOWORD) <br> <br>#if defined ( _WIN32 ) || defined ( _M_MPPC ) <br>    typedef void *          HANDLE; <br>#else <br>    typedef unsigned int    HANDLE; <br>#endif <br> <br>    typedef HANDLE          HWND; <br>    typedef char FAR *      LPSTR; <br> <br>    typedef unsigned short  WORD; <br>    typedef unsigned long   DWORD; <br> <br>    #define WNDPROC         FARPROC <br> <br>#endif <br> <br>#if !defined ( WIN32 ) &amp;&amp; !defined ( WIN32S ) &amp;&amp; !defined ( WIN ) <br> <br>    typedef unsigned long       DWORD; <br>    typedef int                 BOOL; <br>    typedef unsigned char       BYTE; <br>    typedef unsigned short      WORD; <br>    typedef float               FLOAT; <br>    typedef FLOAT               *PFLOAT; <br>    typedef BOOL near           *PBOOL; <br>    typedef BOOL far            *LPBOOL; <br>    typedef BYTE near           *PBYTE; <br>    typedef BYTE far            *LPBYTE; <br>    typedef int near            *PINT; <br>    typedef int far             *LPINT; <br>    typedef WORD near           *PWORD; <br>    typedef WORD far            *LPWORD; <br>    typedef long far            *LPLONG; <br>    typedef DWORD near          *PDWORD; <br>    typedef DWORD far           *LPDWORD; <br>    typedef void far            *LPVOID; <br> <br>    typedef int                 INT; <br>    typedef unsigned int        UINT; <br>    typedef unsigned int        *PUINT; <br> <br>    typedef HANDLE FAR          *LPHANDLE; <br> <br>#endif <br> <br> <br>// <br>// Things that come from os2.h <br>// <br> <br>#if !defined(OS2_INCLUDED) <br> <br>    #define CHAR            char <br> <br>    typedef unsigned char   UCHAR; <br>    typedef short           SHORT; <br>    typedef int             INT; <br>    typedef unsigned short  USHORT; <br>    typedef unsigned int    UINT; <br>    typedef unsigned long   ULONG; <br> <br>    typedef char *          PCH; <br> <br>#endif <br> <br>#if !defined(LOWORD) <br>    #define LOWORD(l)       ((WORD)(l)) <br>    #define HIWORD(l)       ((WORD)(((DWORD)(l) &gt;&gt; 16) &amp; 0xFFFF)) <br>#endif <br> <br>#ifndef NULL <br>    #define NULL        ((void *) 0) <br>#endif <br> <br>#if !defined(TRUE) || !defined(FALSE) <br>    #undef TRUE <br>    #undef FALSE <br> <br>    #define FALSE       0 <br>    #define TRUE        1 <br>#endif <br> <br>#if !defined(fTrue) || !defined(fFalse) <br>    #undef fTrue <br>    #undef fFalse <br> <br>    #define fFalse      0 <br>    #define fTrue       1 <br>#endif <br> <br>#ifndef min <br>#define min(a,b)        (((a) &lt; (b)) ? (a) : (b)) <br>#endif <br> <br>#ifndef max <br>#define max(a,b)        (((a) &gt; (b)) ? (a) : (b)) <br>#endif <br> <br>#ifndef Unreferenced <br>#define Unreferenced(a) ((void)a) <br>#endif <br> <br>typedef unsigned short ushort; <br>typedef unsigned char  uchar; <br>typedef unsigned long  ulong; <br>typedef unsigned int   uint; <br> <br>typedef void *      PV; <br>typedef void FAR *  LPV; <br> <br>typedef char *      SZ; <br>typedef char FAR *  LSZ; <br>#ifndef _WINDOWS_ <br>typedef char FAR *  LPCH; <br>#endif <br> <br>typedef BOOL FAR *  LPF; <br>typedef BYTE FAR *  LPB; <br>typedef WORD FAR *  LPW; <br>typedef DWORD FAR * LPDW; <br>typedef LONG FAR *  LPL; <br>typedef ULONG FAR * LPUL; <br>typedef USHORT FAR *LPUS; <br>typedef DWORD FAR * LPDWORD; <br> <br>typedef short       SWORD; <br> <br>typedef UINT        WPARAM; <br>typedef LONG        LPARAM; <br> <br>#ifdef HOST32 <br>typedef ULONG       IWORD; <br>#else <br>typedef USHORT      IWORD; <br>#endif <br> <br>#endif /* CVINC_TYPES */ <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

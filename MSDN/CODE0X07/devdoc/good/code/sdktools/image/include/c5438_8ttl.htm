<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CV.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5439"></a>CV.H</h2>
<pre><code>/*++ <br> <br> <br>Copyright 1996 - 1997 Microsoft Corporation <br> <br>Module Name: <br> <br>    cv.h <br> <br>Abstract: <br> <br>    This file contains all of the type definitions for accessing <br>    CODEVIEW data. <br> <br>Environment: <br> <br>    Win32, User Mode <br> <br>--*/ <br>#include &lt;types.h&gt; <br>#include &lt;cvtypes.h&gt; <br>#include &lt;cvinfo.h&gt; <br>#include &lt;cvexefmt.h&gt; <br> <br>// Global Segment Info table <br>typedef struct _sgf { <br>    unsigned short      fRead   :1; <br>    unsigned short      fWrite  :1; <br>    unsigned short      fExecute:1; <br>    unsigned short      f32Bit  :1; <br>    unsigned short      res1    :4; <br>    unsigned short      fSel    :1; <br>    unsigned short      fAbs    :1; <br>    unsigned short      res2    :2; <br>    unsigned short      fGroup  :1; <br>    unsigned short      res3    :3; <br>} SGF; <br> <br>typedef struct _sgi { <br>    SGF                 sgf;        // Segment flags <br>    unsigned short      iovl;       // Overlay number <br>    unsigned short      igr;        // Group index <br>    unsigned short      isgPhy;     // Physical segment index <br>    unsigned short      isegName;   // Index to segment name <br>    unsigned short      iclassName; // Index to segment class name <br>    unsigned long       doffseg;    // Starting offset inside physical segment <br>    unsigned long       cbSeg;      // Logical segment size <br>} SGI; <br> <br>typedef struct _sgm { <br>    unsigned short      cSeg;       // number of segment descriptors <br>    unsigned short      cSegLog;    // number of logical segment descriptors <br>} SGM; <br> <br>#define FileAlign(x)  ( ((x) + p-&gt;optrs.optHdr-&gt;FileAlignment - 1) &amp;  \ <br>                            ~(p-&gt;optrs.optHdr-&gt;FileAlignment - 1) ) <br>#define SectionAlign(x) (((x) + p-&gt;optrs.optHdr-&gt;SectionAlignment - 1) &amp;  \ <br>                            ~(p-&gt;optrs.optHdr-&gt;SectionAlignment - 1) ) <br> <br>#define NextSym32(m)  ((DATASYM32 *) \ <br>  (((DWORD)(m) + sizeof(DATASYM32) + \ <br>    ((DATASYM32*)(m))-&gt;name[0] + 3) &amp; ~3)) <br> <br>#define NextSym16(m)  ((DATASYM16 *) \ <br>  (((DWORD)(m) + sizeof(DATASYM16) + \ <br>    ((DATASYM16*)(m))-&gt;name[0] + 1) &amp; ~1)) </code></pre>
<p>&nbsp;</p></body>
</HTML>

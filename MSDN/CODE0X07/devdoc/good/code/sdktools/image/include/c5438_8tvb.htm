<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PPCINST.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5447"></a>PPCINST.H</h2>
<pre><code>/*++  <br> <br>Copyright (c) 1993  IBM Corporation <br> <br>Module Name: <br> <br>    ppcinst.h <br> <br>Abstract: <br> <br>    PowerPC instruction and floating constant definitions. <br> <br>Author: <br> <br>    Rick Simpson   30 July 1993 <br> <br>Revision History: <br> <br>--*/ <br> <br>#ifndef _PPCINST_ <br>#define _PPCINST_ <br>  <br>// <br>//     POWERPC INSTRUCTION FORMAT STRUCTURES <br>// <br> <br>typedef union _PPC_INSTRUCTION { <br>    ULONG Long; <br>    UCHAR Byte[4]; <br> <br>    struct { <br>        ULONG bit31   :  1; <br>        ULONG bit30   :  1; <br> LONG bit6_29 : 24; <br>ULONG bit0_5  :  6; <br>    } i_f; <br> <br>#define Primary_Op  i_f.bit0_5 <br> <br>#define Iform_LI  i_f.bit6_29 <br>#define Iform_AA  i_f.bit30 <br>#define Iform_LK  i_f.bit31 <br> <br>    struct { <br>        ULONG bit31    :  1; <br>        ULONG bit30    :  1; <br> LONG bit16_29 : 14; <br>ULONG bit11_15 :  5; <br>ULONG bit6_10  :  5; <br>        ULONG bit0_5   :  6; <br>    } b_f; <br> <br>#define Bform_BO  b_f.bit6_10 <br>#define Bform_BI  b_f.bit11_15 <br>#define Bform_BD  b_f.bit16_29 <br>#define Bform_AA  b_f.bit30 <br>#define Bform_LK  b_f.bit31 <br> <br>    struct { <br>ULONG bit31    :  1; <br>ULONG bit30    :  1; <br>ULONG bit6_29  : 24; <br>ULONG bit0_5   :  6; <br>    } sc_f; <br> <br>#define SCform_XO  sc_f.bit30 <br> <br>    struct { <br> LONG bit16_31 : 16; <br>ULONG bit11_15 :  5; <br>ULONG bit6_10  :  5; <br>ULONG bit0_5   :  6; <br>    } d_f1; <br>    struct { <br>ULONG bit16_31 : 16; <br>ULONG bit11_15 :  5; <br>ULONG bit10    :  1; <br>ULONG bit9     :  1; <br>ULONG bit6_8   :  3; <br>ULONG bit0_5   :  6; <br>    } d_f2; <br> <br>#define Dform_RT   d_f1.bit6_10 <br>#define Dform_RS   d_f1.bit6_10 <br>#define Dform_TO   d_f1.bit6_10 <br>#define Dform_FRT  d_f1.bit6_10 <br>#define Dform_FRS  d_f1.bit6_10 <br>#define Dform_BF   d_f2.bit6_8 <br>#define Dform_L    d_f2.bit10 <br>#define Dform_RA   d_f1.bit11_15 <br>#define Dform_D    d_f1.bit16_31 <br>#define Dform_SI   d_f1.bit16_31 <br>#define Dform_UI   d_f2.bit16_31 <br>     <br>    struct { <br>ULONG bit30_31 :  2; <br> LONG bit16_29 : 14; <br>ULONG bit11_15 :  5; <br>ULONG bit6_10  :  5; <br>ULONG bit0_5   :  6; <br>    } ds_f; <br> <br>#define DSform_RT  ds_f.bit6_10 <br>#define DSform_RS  ds_f.bit6_10 <br>#define DSform_RA  ds_f.bit11_15 <br>#define DSform_DS  ds_f.bit16_29 <br>#define DSform_XO  ds_f.bit30_31 <br> <br>    struct { <br>ULONG bit31    :  1; <br>ULONG bit21_30 : 10; <br>ULONG bit16_20 :  5; <br>ULONG bit11_15 :  5; <br>ULONG bit6_10  :  5; <br>ULONG bit0_5   :  6; <br>    } x_f1; <br>    struct { <br>ULONG bit20_31 : 12; <br>ULONG bit16_19 :  4; <br>ULONG bit14_15 :  2; <br>ULONG bit11_13 :  3; <br>ULONG bit10    :  1; <br>ULONG bit9     :  1; <br>ULONG bit6_8   :  3; <br>ULONG bit0_5   :  6; <br>    } x_f2; <br>    struct { <br>ULONG bit16_31 : 16; <br>ULONG bit12_15 :  4; <br>ULONG bit0_11  : 12; <br>    } x_f3; <br> <br>#define Xform_RT   x_f1.bit6_10 <br>#define Xform_RS   x_f1.bit6_10 <br>#define Xform_TO   x_f1.bit6_10 <br>#define Xform_FRT  x_f1.bit6_10 <br>#define Xform_FRS  x_f1.bit6_10 <br>#define Xform_BT   x_f1.bit6_10 <br>#define Xform_BF   x_f2.bit6_8 <br>#define Xform_L    x_f2.bit10 <br>#define Xform_RA   x_f1.bit11_15 <br>#define Xform_FRA  x_f1.bit11_15 <br>#define Xform_BFA  x_f2.bit11_13 <br>#define Xform_SR   x_f3.bit12_15 <br>#define Xform_RB   x_f1.bit16_20 <br>#define Xform_NB   x_f1.bit16_20 <br>#define Xform_SH   x_f1.bit16_20 <br>#define Xform_FRB  x_f1.bit16_20 <br>#define Xform_U    x_f2.bit16_19 <br>#define Xform_XO   x_f1.bit21_30 <br>#define Xform_RC   x_f1.bit31 <br> <br>    struct { <br>ULONG bit31    :  1; <br>ULONG bit21_30 : 10; <br>ULONG bit16_20 :  5; <br>ULONG bit11_15 :  5; <br>ULONG bit6_10  :  5; <br>ULONG bit0_5   :  6; <br>    } xl_f1; <br>    struct { <br>ULONG bit14_31 : 18; <br>ULONG bit11_13 :  3; <br>ULONG bit9_10  :  2; <br>ULONG bit6_8   :  3; <br>ULONG bit0_5   :  6; <br>    } xl_f2; <br> <br>#define XLform_LK   xl_f1.bit31 <br>#define XLform_XO   xl_f1.bit21_30 <br>#define XLform_BB   xl_f1.bit16_20 <br>#define XLform_BA   xl_f1.bit11_15 <br>#define XLform_BI   xl_f1.bit11_15 <br>#define XLform_BFA  xl_f2.bit11_13 <br>#define XLform_BT   xl_f1.bit6_10 <br>#define XLform_BO   xl_f1.bit6_10 <br>#define XLform_BF   xl_f2.bit6_8 <br> <br>    struct { <br>ULONG bit31    :  1; <br>ULONG bit21_30 : 10; <br>ULONG bit11_20 : 10; <br>ULONG bit6_10  :  5; <br>ULONG bit0_5   :  6; <br>    } xfx_f1; <br>    struct {  <br>ULONG bit20_31 : 12; <br>ULONG bit12_19 :  8; <br>ULONG bit6_11  :  6; <br>ULONG bit0_5   :  6; <br>    } xfx_f2; <br> <br>#define XFXform_RT  xfx_f1.bit6_10 <br>#define XFXform_RS  xfx_f1.bit6_10 <br>#define XFXform_spr xfx_f1.bit11_20 <br>#define XFXform_tbr xfx_f1.bit11_20 <br>#define XFXform_spr xfx_f1.bit11_20 <br>#define XFXform_FXM xfx_f2.bit12_19 <br>#define XFXform_XO  xfx_f1.bit21_30 <br> <br>    struct { <br>ULONG bit31    :  1; <br>ULONG bit21_30 : 10; <br>ULONG bit16_20 :  5; <br>ULONG bit15    :  1; <br>ULONG bit7_14  :  8; <br>ULONG bit6     :  1; <br>ULONG bit0_5   :  6; <br>    } xfl_f; <br> <br>#define XFLform_FLM xfl_f.bit7_14 <br>#define XFLform_FRB xfl_f.bit16_20 <br>#define XFLform_XO  xfl_f.bit21_30 <br>#define XFLform_RC  xfl_f.bit31 <br>     <br>    struct { <br>ULONG bit31    :  1; <br>ULONG bit30    :  1; <br>ULONG bit21_29 :  9; <br>ULONG bit16_20 :  5; <br>ULONG bit10_15 :  5; <br>ULONG bit6_10  :  5; <br>ULONG bit0_5   :  6; <br>    } xs_f; <br> <br>#define XSform_RS  xs_f.bit6_10 <br>#define XSform_RA  xs_f.bit11_15 <br>#define XSform_sh1 xs_f.bit16_20 <br>#define XSform_XO  xs_f.bit21_29 <br>#define XSform_sh2 xs_f.bit30 <br>#define XSform_RC  xs_f.bit31 <br>     <br>    struct { <br>ULONG bit31    :  1; <br>ULONG bit22_30 :  9; <br>ULONG bit21    :  1; <br>ULONG bit16_20 :  5; <br>ULONG bit10_15 :  5; <br>ULONG bit6_10  :  5; <br>ULONG bit0_5   :  6; <br>    } xo_f; <br> <br>#define XOform_RT  xo_f.bit6_10 <br>#define XOform_RA  xo_f.bit11_15 <br>#define XOform_RB  xo_f.bit16_20 <br>#define XOform_OE  xo_f.bit21 <br>#define XOform_XO  xo_f.bit22_30 <br>#define XOform_RC  xo_f.bit31 <br>     <br>    struct { <br>ULONG bit31    :  1; <br>ULONG bit26_30 :  5; <br>ULONG bit21_25 :  5; <br>ULONG bit16_20 :  5; <br>ULONG bit11_15 :  5; <br>ULONG bit6_10  :  5; <br>ULONG bit0_5   :  6; <br>    } a_f; <br> <br>#define Aform_FRT  a_f.bit6_10 <br>#define Aform_FRA  a_f.bit11_15 <br>#define Aform_FRB  a_f.bit16_20 <br>#define Aform_FRC  a_f.bit21_25 <br>#define Aform_XO   a_f.bit26_30 <br>#define Aform_RC   a_f.bit31 <br>     <br>    struct { <br>ULONG bit31    :  1; <br>ULONG bit26_30 :  5; <br>ULONG bit21_25 :  5; <br>ULONG bit16_20 :  5; <br>ULONG bit11_15 :  5; <br>ULONG bit6_10  :  5; <br>ULONG bit0_5   :  6; <br>    } m_f; <br> <br>#define Mform_RS  m_f.bit6_10 <br>#define Mform_RA  m_f.bit11_15 <br>#define Mform_RB  m_f.bit16_20 <br>#define Mform_SH  m_f.bit16_20 <br>#define Mform_MB  m_f.bit21_25 <br>#define Mform_ME  m_f.bit26_30 <br>#define Mform_RC  m_f.bit31 <br>     <br>    struct { <br>ULONG bit31    :  1; <br>ULONG bit30    :  1; <br>ULONG bit27_29 :  3; <br>ULONG bit21_26 :  6; <br>ULONG bit16_20 :  5; <br>ULONG bit11_15 :  5; <br>ULONG bit6_10  :  5; <br>ULONG bit0_5   :  6; <br>    } md_f; <br> <br>#define MDform_RS   md_f.bit6_10 <br>#define MDform_RA   md_f.bit11_15 <br>#define MDform_sh1  md_f.bit16_20 <br>#define MDform_mb   md_f.bit21_26 <br>#define MDform_me   md_f.bit21_26 <br>#define MDform_XO   md_f.bit27_29 <br>#define MDform_sh2  md_f.bit30 <br>#define MDform_RC   md_f.bit31 <br>     <br>    struct { <br>ULONG bit31    :  1; <br>ULONG bit27_30 :  4; <br>ULONG bit21_26 :  6; <br>ULONG bit16_20 :  5; <br>ULONG bit11_15 :  5; <br>ULONG bit6_10  :  5; <br>ULONG bit0_5   :  6; <br>    } mds_f; <br> <br>#define MDSform_RS  mds_f.bit6_10 <br>#define MDSform_RA  mds_f.bit11_15 <br>#define MDSform_RB  mds_f.bit16_20 <br>#define MDSform_mb  mds_f.bit21_26 <br>#define MDSform_me  mds_f.bit21_26 <br>#define MDSform_XO  mds_f.bit27_30 <br>#define MDSform_RC  mds_f.bit31 <br> <br>} PPC_INSTRUCTION, *PPPC_INSTRUCTION; <br>  <br>// <br>//     POWERPC PRIMARY AND SECONDARY (EXTENDED) OPCODES <br>// <br> <br>#define TDI_OP       2 <br>#define TWI_OP       3 <br>#define MULLI_OP     7 <br>#define SUBFIC_OP    8 <br>#define CMPLI_OP    10 <br>#define CMPI_OP     11 <br>#define ADDIC_OP    12 <br>#define ADDIC_RC_OP 13 <br>#define ADDI_OP     14 <br>#define ADDIS_OP    15 <br>#define BC_OP       16 <br>#define SC_OP       17 <br>#define B_OP        18 <br> <br>#define X19_OP      19    // Extended ops for primary code 19: <br>#define   MCRF_OP       0 <br>#define   BCLR_OP      16 <br>#define   CRNOR_OP     33 <br>#define   RFI_OP       50 <br>#define   CRANDC_OP   129 <br>#define   ISYNC_OP    150 <br>#define   CRXOR_OP    193 <br>#define  CRNAND_OP   225 <br>#define  CRAND_OP    257 <br>#define  CREQV_OP    289 <br>#define  CRORC_OP    417 <br>#define  CROR_OP     449 <br>#define  BCCTR_OP    528 <br> <br>#define RLWIMI_OP   20 <br>#define RLWINM_OP   21 <br>#define RLWNM_OP    23 <br>#define ORI_OP      24 <br>#defineORIS_OP    25 <br>#define XORI_OP    26 <br>#defineXORIS_OP    27 <br>#defineANDI_RC_OP  28 <br>#define ANDIS_RC_OP 29 <br> <br>#define X30_OP    30    // Extended ops for primary code 30: <br>#define   RLDICL_OP     0 <br>#define   RLDICR_OP1 <br>#define  RLDIC_OP2 <br>#define  RLDIMI_OP3 <br>#define   RLDCL_OP8 <br>#define   RLDCR_OP9 <br> <br>#define X31_OP      31    // Extended ops for primary code 31: <br>#define   CMP_OP0 <br>#define  TW_OP4 <br>#define  SUBFC_OP8 <br>#define  MULHDU_OP9 <br>#define  ADDC_OP      10 <br>#define  MULHWU_OP    11 <br>#define  MFCR_OP      19 <br>#define  LWARX_OP     20 <br>#define  LDX_OP       21 <br>#define  LWZX_OP      23 <br>#define  SLW_OP       24 <br>#define  CNTLZW_OP    26 <br>#define  SLD_OP       27 <br>#define  AND_OP       28 <br>#define  CMPL_OP      32 <br>#define  SUBF_OP      40 <br>#define  LDUX_OP      53 <br>#define  DCBST_OP     54 <br>#define  LWZUX_OP     55 <br>#define  CNTLZD_OP    58 <br>#define  ANDC_OP      60 <br>#define  TD_OP       68 <br>#define  MULHD_OP     73 <br>#define  MULHW_OP     75 <br>#define  MFMSR_OP     83 <br>#define  LDARX_OP     84 <br>#define  DCBF_OP      86 <br>#define  LBZX_OP      87 <br>#define  NEG_OP      104 <br>#define  LBZUX_OP    119 <br>#define  NOR_OP      124 <br>#define  SUBFE_OP    136 <br>#define  ADDE_OP     138 <br>#define  MTCRF_OP    144 <br>#define  MTMSR_OP    146 <br>#define  STDX_OP     149 <br>#define  STWCX_RC_OP 150  <br>#define  STWX_OP     151 <br>#define  STDUX_OP    181 <br>#define  STWUX_OP    183 <br>#define  SUBFZE_OP   200 <br>#define  ADDZE_OP    202 <br>#define  MTSR_OP     210 <br>#define  STDCX_RC_OP 214 <br>#define  STBX_OP     215 <br>#define  SUBFME_OP   232 <br>#define  MULLD_OP    233 <br>#define  ADDME_OP    234 <br>#define  MULLW_OP    235 <br>#define  MTSRIN_OP   242 <br>#define  DCBTST_OP   246 <br>#define  STBUX_OP    247 <br>#define  ADD_OP      266 <br>#define  DCBT_OP     278 <br>#define  LHZX_OP     279 <br>#define  EQV_OP      284 <br>#define  TLBIE_OP    306 <br>#define  ECIWX_OP    310 <br>#define  LHZUX_OP    311 <br>#define  XOR_OP      316 <br>#define  MFSPR_OP    339 <br>#define  LWAX_OP     341 <br>#define  LHAX_OP     343 <br>#define  TLBIA_OP    370 <br>#define  MFTB_OP     371 <br>#define  LWAUX_OP    373 <br>#define  LHAUX_OP    375 <br>#define  STHX_OP     407 <br>#define  ORC_OP      412 <br>#define  SRADI_OP    413 <br>#define  SLBIE_OP    434 <br>#define  ECOWX_OP    438 <br>#define  STHUX_OP    439 <br>#define  OR_OP      444 <br>#define  DIVDU_OP    457 <br>#define  DIVWU_OP    459 <br>#define  MTSPR_OP    467 <br>#define  DCBI_OP     470 <br>#define  NAND_OP     476 <br>#define  DIVD_OP     489 <br>#define  DIVW_OP     491 <br>#define  SLBIA_OP    498 <br>#define  MCRXR_OP    512 <br>#define  LSWX_OP     533 <br>#define  LWBRX_OP    534 <br>#define  LFSX_OP     535 <br>#define  SRW_OP      536 <br>#define  SRD_OP      539 <br>#define  TLBSYNC_OP  566 <br>#define  LFSUX_OP    567 <br>#define  MFSR_OP     595 <br>#define  LSWI_OP     597 <br>#define  SYNC_OP     598 <br>#define  LFDX_OP     599 <br>#define  LFDUX_OP    631 <br>#define  MFSRIN_OP   659 <br>#define  STSWX_OP    661 <br>#define  STWBRX_OP   662 <br>#define  STFSX_OP    663 <br>#define  STFSUX_OP   695 <br>#define  STSWI_OP    725 <br>#define  STFDX_OP    727 <br>#define  STFDUX_OP   759 <br>#define  LHBRX_OP    790 <br>#define  SRAW_OP     792 <br>#define  SRAD_OP     794 <br>#define  SRAWI_OP    824 <br>#define  EIEIO_OP    854 <br>#define  STHBRX_OP   918 <br>#define  EXTSH_OP    922 <br>#define  EXTSB_OP    954 <br>#define  ICBI_OP     982 <br>#define  STFIWX_OP   983 <br>#define  EXTSW_OP    986 <br>#define  DCBZ_OP    1014 <br> <br>#define LWZ_OP      32 <br>#define LWZU_OP    33 <br>#defineLBZ_OP    34 <br>#defineLBZU_OP    35 <br>#defineSTW_OP    36 <br>#defineSTWU_OP    37 <br>#defineSTB_OP    38 <br>#defineSTBU_OP    39 <br>#defineLHZ_OP    40 <br>#defineLHZU_OP    41 <br>#defineLHA_OP    42 <br>#defineLHAU_OP    43 <br>#defineSTH_OP    44 <br>#defineSTHU_OP    45 <br>#defineLFS_OP    48 <br>#defineLFSU_OP    49 <br>#defineLFD_OP    50 <br>#defineLFDU_OP    51 <br>#define STFS_OP    52 <br>#defineSTFSU_OP    53 <br>#defineSTFD_OP    54 <br>#defineSTFDU_OP    55 <br> <br>#define X58_OP      58    // Extended ops for primary code 58: <br>#define   LD_OP        0 <br>#define  LDU_OP1 <br>#define  LWA_OP2 <br> <br>#define X59_OP      59    // Extended ops for primary code 59: <br>#define  FDIVS_OP     18 <br>#define  FSUBS_OP     20 <br>#define  FADDS_OP     21 <br>#define  FSQRTS_OP    22 <br>#define  FRES_OP      24 <br>#define  FMULS_OP     25 <br>#define  FMSUBS_OP    28 <br>#define   FMADDS_OP    29 <br>#define  FNMSUBS_OP   30 <br>#define  FNMADDS_OP   31 <br> <br>#define X62_OP      62    // Extended ops for primary code 62: <br>#define   STD_OP        0 <br>#define   STDU_OP       1 <br> <br>#define X63_OP    63  // Extended ops for primary code 63: <br>#define   FCMPU_OP      0 <br>#define  FRSP_OP      12 <br>#define  FCTIW_OP     14 <br>#define  FCTIWZ_OP    15 <br>#define  FDIV_OP      18 <br>#define  FSUB_OP      20 <br>#define  FADD_OP      21 <br>#define  FSQRT_OP     22 <br>#define  FSEL_OP      23 <br>#define  FMUL_OP      25 <br>#define  FSQRTE_OP    26 <br>#define  FMSUB_OP     28 <br>#define   FMADD_OP     29 <br>#define  FNMSUB_OP    30 <br>#define  FNMADD_OP    31 <br>#define  FCMPO_OP     32 <br>#define  MTFSB1_OP    38 <br>#define  FNEG_OP      40 <br>#define  MCRFS_OP     64 <br>#define  MTFSB0_OP    70 <br>#define  FMR_OP       72 <br>#define  MTFSFI_OP   134 <br>#define  FNABS_OP    136 <br>#define  FABS_OP     264 <br>#define  MFFS_OP     583 <br>#define  MTFSF_OP    711 <br>#define  FCTID_OP    814 <br>#define  FCTIDZ_OP   815 <br>#define  FCFID_OP    846 <br> <br>// <br>// Define certain specific instructions <br>// <br> <br>#define SYSTEM_CALL_INSTR  0x44000002L  // sc <br>#define RETURN_INSTR       0x4E800020L  // blr <br>#define BREAK_INSTR        0x0FE00000L  // break &lt;number&gt; <br>#define TRAP_INSTR         0x0C000000L  // trap word immediate <br>#define NO_OP_INSTR       0x60000000L  // ori r.0, r.0, 0 <br>#define INVALID_INSTR   0x00000000L  // all 0's =&gt; invalid <br> <br>// <br>// Define specific values for the TO field of the TRAP_INSTR  <br>// <br> <br>#define TO_BREAKPOINT                   0x03E00000L  // Unconditional breakpoint <br>#define TO_DIVIDE_BY_ZERO               0x00C00000L  // Integer divide by zero <br>#define TO_UNCONDITIONAL_DIVIDE_BY_ZERO 0x00E00000L  // Unconditional divide <br>                                                     // by zero <br>  <br>// <br>//     IEEE FLOATING POINT VALUE REPRESENTATION <br>// <br> <br>// <br>// Define maximum and minimum single and double exponent values. <br>// <br> <br>#define DOUBLE_MAXIMUM_EXPONENT  2047 <br>#define DOUBLE_MINIMUM_EXPONENT  0 <br>#define SINGLE_MAXIMUM_EXPONENT  255 <br>#define SINGLE_MINIMUM_EXPONENT  0 <br> <br>// <br>// Define single and double exponent bias values. <br>// <br> <br>#define SINGLE_EXPONENT_BIAS  127 <br>#define DOUBLE_EXPONENT_BIAS  1023 <br> <br>// <br>// Define the largest single and double values; <br>// <br> <br>#define DOUBLE_MAXIMUM_VALUE_LOW   0xffffffff <br>#define DOUBLE_MAXIMUM_VALUE_HIGH  0x7fefffff <br>#define SINGLE_MAXIMUM_VALUE       0x7f7fffff <br> <br>// <br>// Define single and double quite and signaling Nan values. <br>// <br> <br>#define DOUBLE_NAN_LOW     0xffffffff <br>#define DOUBLE_QUIET_NAN   0x7ff7ffff <br>#define DOUBLE_SIGNAL_NAN  0x7fffffff <br>#define SINGLE_QUIET_NAN   0x7fbfffff <br>#define SINGLE_SIGNAL_NAN  0x7fffffff <br> <br>// <br>// Define positive single and double infinity values. <br>// <br> <br>#define DOUBLE_INFINITY_VALUE_LOW   0x0 <br>#define DOUBLE_INFINITY_VALUE_HIGH  0x7ff00000 <br>#define SINGLE_INFINITY_VALUE       0x7f800000 <br> <br>// <br>// Define rounding modes. <br>// <br> <br>#define ROUND_TO_NEAREST         0 <br>#define ROUND_TO_ZERO            1 <br>#define ROUND_TO_PLUS_INFINITY   2 <br>#define ROUND_TO_MINUS_INFINITY  3 <br> <br>#endif // _PPCINST_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PFMONP.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5462"></a>PFMONP.H</h2>
<pre><code>/*++ <br> <br>Copyright 1995 - 1998 Microsoft Corporation <br> <br>Module Name: <br> <br>    instaler.h <br> <br>Abstract: <br> <br>    Main include file for the INSTALER application. <br> <br>Author: <br> <br>    Steve Wood (stevewo) 09-Aug-1994 <br> <br>Revision History: <br> <br>--*/ <br> <br>#ifdef RC_INVOKED <br>#include &lt;windows.h&gt; <br>#else <br> <br>#include &lt;windows.h&gt; <br>#include &lt;imagehlp.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;string.h&gt; <br> <br>#include "errormsg.h" <br> <br> <br>typedef struct _PSAPI_WS_WATCH_INFORMATION { <br>    LPVOID FaultingPc; <br>    LPVOID FaultingVa; <br>} PSAPI_WS_WATCH_INFORMATION, *PPSAPI_WS_WATCH_INFORMATION; <br> <br>BOOL <br>WINAPI <br>GetWsChanges( <br>    HANDLE hProcess, <br>    PPSAPI_WS_WATCH_INFORMATION lpWatchInfo, <br>    DWORD cb <br>    ); <br> <br> <br>BOOL <br>WINAPI <br>InitializeProcessForWsWatch( <br>    HANDLE hProcess <br>    ); <br> <br> <br> <br>//  Doubly-linked list manipulation routines.  Implemented as macros <br>//  but logically these are procedures. <br>// <br> <br>// <br>//  VOID <br>//  InitializeListHead( <br>//      PLIST_ENTRY ListHead <br>//      ); <br>// <br> <br>#define InitializeListHead(ListHead) (\ <br>    (ListHead)-&gt;Flink = (ListHead)-&gt;Blink = (ListHead)) <br> <br>// <br>//  BOOL <br>//  IsListEmpty( <br>//      PLIST_ENTRY ListHead <br>//      ); <br>// <br> <br>#define IsListEmpty(ListHead) \ <br>    ((ListHead)-&gt;Flink == (ListHead)) <br> <br>// <br>//  PLIST_ENTRY <br>//  RemoveHeadList( <br>//      PLIST_ENTRY ListHead <br>//      ); <br>// <br> <br>#define RemoveHeadList(ListHead) \ <br>    (ListHead)-&gt;Flink;\ <br>    {RemoveEntryList((ListHead)-&gt;Flink)} <br> <br>// <br>//  PLIST_ENTRY <br>//  RemoveTailList( <br>//      PLIST_ENTRY ListHead <br>//      ); <br>// <br> <br>#define RemoveTailList(ListHead) \ <br>    (ListHead)-&gt;Blink;\ <br>    {RemoveEntryList((ListHead)-&gt;Blink)} <br> <br>// <br>//  VOID <br>//  RemoveEntryList( <br>//      PLIST_ENTRY Entry <br>//      ); <br>// <br> <br>#define RemoveEntryList(Entry) {\ <br>    PLIST_ENTRY _EX_Blink;\ <br>    PLIST_ENTRY _EX_Flink;\ <br>    _EX_Flink = (Entry)-&gt;Flink;\ <br>    _EX_Blink = (Entry)-&gt;Blink;\ <br>    _EX_Blink-&gt;Flink = _EX_Flink;\ <br>    _EX_Flink-&gt;Blink = _EX_Blink;\ <br>    } <br> <br>// <br>//  VOID <br>//  InsertTailList( <br>//      PLIST_ENTRY ListHead, <br>//      PLIST_ENTRY Entry <br>//      ); <br>// <br> <br>#define InsertTailList(ListHead,Entry) {\ <br>    PLIST_ENTRY _EX_Blink;\ <br>    PLIST_ENTRY _EX_ListHead;\ <br>    _EX_ListHead = (ListHead);\ <br>    _EX_Blink = _EX_ListHead-&gt;Blink;\ <br>    (Entry)-&gt;Flink = _EX_ListHead;\ <br>    (Entry)-&gt;Blink = _EX_Blink;\ <br>    _EX_Blink-&gt;Flink = (Entry);\ <br>    _EX_ListHead-&gt;Blink = (Entry);\ <br>    } <br> <br>// <br>//  VOID <br>//  InsertHeadList( <br>//      PLIST_ENTRY ListHead, <br>//      PLIST_ENTRY Entry <br>//      ); <br>// <br> <br>#define InsertHeadList(ListHead,Entry) {\ <br>    PLIST_ENTRY _EX_Flink;\ <br>    PLIST_ENTRY _EX_ListHead;\ <br>    _EX_ListHead = (ListHead);\ <br>    _EX_Flink = _EX_ListHead-&gt;Flink;\ <br>    (Entry)-&gt;Flink = _EX_Flink;\ <br>    (Entry)-&gt;Blink = _EX_ListHead;\ <br>    _EX_Flink-&gt;Blink = (Entry);\ <br>    _EX_ListHead-&gt;Flink = (Entry);\ <br>    } <br> <br>// <br>// Data structures and entry points in init.c <br>// <br> <br>DWORD TotalSoftFaults; <br>DWORD TotalHardFaults; <br>DWORD TotalCodeFaults; <br>DWORD TotalDataFaults; <br>DWORD TotalKernelFaults; <br>DWORD TotalUserFaults; <br> <br>BOOL fCodeOnly; <br>BOOL fHardOnly; <br> <br>VOID <br>ProcessPfMonData( <br>    VOID <br>    ); <br> <br>// <br>// Data structures and entry points in init.c <br>// <br> <br>BOOL fVerbose; <br>BOOL fLogOnly; <br>BOOL fKernelOnly;                 //flag for displaying kernel pagefaults <br>BOOL fKernel;                     //flag for displaying kernel pagefaults <br>BOOL fDatabase;                   //flag for outputing information in a <br>                                  //tab-delimited database format <br>FILE *LogFile; <br> <br>BOOL <br>InitializePfmon( <br>    VOID <br>    ); <br> <br>BOOL <br>LoadApplicationForDebug( <br>    LPSTR CommandLine <br>    ); <br> <br>BOOL <br>AttachApplicationForDebug( <br>    DWORD Pid <br>    ); <br> <br>HANDLE hProcess; <br> <br>// <br>// Data structures and entry points in error.c <br>// <br> <br>HANDLE PfmonModuleHandle; <br> <br>VOID <br>CDECL <br>DeclareError( <br>    UINT ErrorCode, <br>    UINT SupplementalErrorCode, <br>    ... <br>    ); <br> <br>// <br>// Data structures and entry points in DEBUG.C <br>// <br> <br>VOID <br>DebugEventLoop( VOID ); <br> <br>// <br>// Data structures and entry points in process.c <br>// <br> <br>typedef struct _PROCESS_INFO { <br>    LIST_ENTRY Entry; <br>    LIST_ENTRY ThreadListHead; <br>    DWORD Id; <br>    HANDLE Handle; <br>} PROCESS_INFO, *PPROCESS_INFO; <br> <br>typedef struct _THREAD_INFO { <br>    LIST_ENTRY Entry; <br>    DWORD Id; <br>    HANDLE Handle; <br>    PVOID StartAddress; <br>} THREAD_INFO, *PTHREAD_INFO; <br> <br>LIST_ENTRY ProcessListHead; <br> <br>BOOL <br>AddProcess( <br>    LPDEBUG_EVENT DebugEvent, <br>    PPROCESS_INFO *ReturnedProcess <br>    ); <br> <br>BOOL <br>DeleteProcess( <br>    PPROCESS_INFO Process <br>    ); <br> <br>BOOL <br>AddThread( <br>    LPDEBUG_EVENT DebugEvent, <br>    PPROCESS_INFO Process, <br>    PTHREAD_INFO *ReturnedThread <br>    ); <br> <br>BOOL <br>DeleteThread( <br>    PPROCESS_INFO Process, <br>    PTHREAD_INFO Thread <br>    ); <br> <br>PPROCESS_INFO <br>FindProcessById( <br>    ULONG Id <br>    ); <br> <br>BOOL <br>FindProcessAndThreadForEvent( <br>    LPDEBUG_EVENT DebugEvent, <br>    PPROCESS_INFO *ReturnedProcess, <br>    PTHREAD_INFO *ReturnedThread <br>    ); <br>// <br>// Data structures and entry points in module.c <br>// <br> <br>typedef struct _MODULE_INFO { <br>    LIST_ENTRY Entry; <br>    LPVOID BaseAddress; <br>    DWORD VirtualSize; <br>    DWORD NumberFaultedSoftVas; <br>    DWORD NumberFaultedHardVas; <br>    DWORD NumberCausedFaults; <br>    HANDLE Handle; <br>    PIMAGE_DEBUG_INFORMATION DebugInfo; <br>} MODULE_INFO, *PMODULE_INFO; <br> <br>LPSTR SymbolSearchPath; <br>LIST_ENTRY ModuleListHead; <br> <br>BOOL <br>LazyLoad( <br>    LPVOID Address <br>    ); <br> <br>// hack PRTL_PROCESS_MODULES LazyModuleInformation; <br> <br>BOOL <br>AddModule( <br>    LPDEBUG_EVENT DebugEvent <br>    ); <br> <br>BOOL <br>DeleteModule( <br>    PMODULE_INFO Module <br>    ); <br> <br>PMODULE_INFO <br>FindModuleContainingAddress( <br>    LPVOID Address <br>    ); <br> <br>VOID <br>SetSymbolSearchPath( ); <br> <br>LONG <br>AddKernelDrivers( ); <br> <br> <br>#ifdef _ALPHA_ <br>#define CONTEXT_TO_PROGRAM_COUNTER(Context) ((Context)-&gt;Fir) <br>#define BPSKIP 4 <br>#endif // _ALPHA_ <br> <br>#ifdef _MIPS_ <br>#define CONTEXT_TO_PROGRAM_COUNTER(Context) ((Context)-&gt;Fir) <br>#define BPSKIP 4 <br>#endif // _MIPS_ <br> <br>#ifdef _PPC_ <br>#define CONTEXT_TO_PROGRAM_COUNTER(Context) ((Context)-&gt;Iar) <br>#define BPSKIP 4 <br>#endif // _PPC_ <br> <br>#ifdef _X86_ <br>#define CONTEXT_TO_PROGRAM_COUNTER(Context) ((Context)-&gt;Eip) <br>#define BPSKIP 1 <br>#endif // _X86_ <br> <br> <br>#endif // defined( RC_INVOKED ) </code></pre>
<p>&nbsp;</p></body>
</HTML>

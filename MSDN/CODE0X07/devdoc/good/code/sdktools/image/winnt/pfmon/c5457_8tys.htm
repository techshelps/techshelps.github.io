<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PSAPI.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5464"></a>PSAPI.H</h2>
<pre><code>/*++ BUILD Version: 0001    // Increment this if a change has global effects <br> <br>Copyright (c) 1994-1997  Microsoft Corporation <br> <br>Module Name: <br> <br>    psapi.h <br> <br>Abstract: <br> <br>    Include file for APIs provided by PSAPI.DLL <br> <br>Author: <br> <br>    Richard Shupak   [richards]  06-Jan-1994 <br> <br>Revision History: <br> <br>--*/ <br> <br>#ifndef _PSAPI_H_ <br>#define _PSAPI_H_ <br> <br>#ifdef __cplusplus <br>extern "C" { <br>#endif <br> <br>BOOL <br>WINAPI <br>EnumProcesses( <br>    DWORD * lpidProcess, <br>    DWORD   cb, <br>    DWORD * cbNeeded <br>    ); <br> <br>BOOL <br>WINAPI <br>EnumProcessModules( <br>    HANDLE hProcess, <br>    HMODULE *lphModule, <br>    DWORD cb, <br>    LPDWORD lpcbNeeded <br>    ); <br> <br>DWORD <br>WINAPI <br>GetModuleBaseNameA( <br>    HANDLE hProcess, <br>    HMODULE hModule, <br>    LPSTR lpBaseName, <br>    DWORD nSize <br>    ); <br> <br>DWORD <br>WINAPI <br>GetModuleBaseNameW( <br>    HANDLE hProcess, <br>    HMODULE hModule, <br>    LPWSTR lpBaseName, <br>    DWORD nSize <br>    ); <br> <br>#ifdef UNICODE <br>#define GetModuleBaseName  GetModuleBaseNameW <br>#else <br>#define GetModuleBaseName  GetModuleBaseNameA <br>#endif // !UNICODE <br> <br> <br>DWORD <br>WINAPI <br>GetModuleFileNameExA( <br>    HANDLE hProcess, <br>    HMODULE hModule, <br>    LPSTR lpFilename, <br>    DWORD nSize <br>    ); <br> <br>DWORD <br>WINAPI <br>GetModuleFileNameExW( <br>    HANDLE hProcess, <br>    HMODULE hModule, <br>    LPWSTR lpFilename, <br>    DWORD nSize <br>    ); <br> <br>#ifdef UNICODE <br>#define GetModuleFileNameEx  GetModuleFileNameExW <br>#else <br>#define GetModuleFileNameEx  GetModuleFileNameExA <br>#endif // !UNICODE <br> <br> <br>typedef struct _MODULEINFO { <br>    LPVOID lpBaseOfDll; <br>    DWORD SizeOfImage; <br>    LPVOID EntryPoint; <br>} MODULEINFO, *LPMODULEINFO; <br> <br> <br>BOOL <br>WINAPI <br>GetModuleInformation( <br>    HANDLE hProcess, <br>    HMODULE hModule, <br>    LPMODULEINFO lpmodinfo, <br>    DWORD cb <br>    ); <br> <br> <br>BOOL <br>WINAPI <br>EmptyWorkingSet( <br>    HANDLE hProcess <br>    ); <br> <br> <br>BOOL <br>WINAPI <br>QueryWorkingSet( <br>    HANDLE hProcess, <br>    PVOID pv, <br>    DWORD cb <br>    ); <br> <br>BOOL <br>WINAPI <br>InitializeProcessForWsWatch( <br>    HANDLE hProcess <br>    ); <br> <br> <br>typedef struct _PSAPI_WS_WATCH_INFORMATION { <br>    LPVOID FaultingPc; <br>    LPVOID FaultingVa; <br>} PSAPI_WS_WATCH_INFORMATION, *PPSAPI_WS_WATCH_INFORMATION; <br> <br>BOOL <br>WINAPI <br>GetWsChanges( <br>    HANDLE hProcess, <br>    PPSAPI_WS_WATCH_INFORMATION lpWatchInfo, <br>    DWORD cb <br>    ); <br> <br>DWORD <br>WINAPI <br>GetMappedFileNameW( <br>    HANDLE hProcess, <br>    LPVOID lpv, <br>    LPWSTR lpFilename, <br>    DWORD nSize <br>    ); <br> <br>DWORD <br>WINAPI <br>GetMappedFileNameA( <br>    HANDLE hProcess, <br>    LPVOID lpv, <br>    LPSTR lpFilename, <br>    DWORD nSize <br>    ); <br> <br>#ifdef UNICODE <br>#define GetMappedFilenameEx  GetMappedFilenameExW <br>#else <br>#define GetMappedFilenameEx  GetMappedFilenameExA <br>#endif // !UNICODE <br> <br>BOOL <br>WINAPI <br>EnumDeviceDrivers( <br>    LPVOID *lpImageBase, <br>    DWORD cb, <br>    LPDWORD lpcbNeeded <br>    ); <br> <br> <br>DWORD <br>WINAPI <br>GetDeviceDriverBaseNameA( <br>    LPVOID ImageBase, <br>    LPSTR lpBaseName, <br>    DWORD nSize <br>    ); <br> <br>DWORD <br>WINAPI <br>GetDeviceDriverBaseNameW( <br>    LPVOID ImageBase, <br>    LPWSTR lpBaseName, <br>    DWORD nSize <br>    ); <br> <br>#ifdef UNICODE <br>#define GetDeviceDriverBaseName  GetDeviceDriverBaseNameW <br>#else <br>#define GetDeviceDriverBaseName  GetDeviceDriverBaseNameA <br>#endif // !UNICODE <br> <br> <br>DWORD <br>WINAPI <br>GetDeviceDriverFileNameA( <br>    LPVOID ImageBase, <br>    LPSTR lpFilename, <br>    DWORD nSize <br>    ); <br> <br>DWORD <br>WINAPI <br>GetDeviceDriverFileNameW( <br>    LPVOID ImageBase, <br>    LPWSTR lpFilename, <br>    DWORD nSize <br>    ); <br> <br>#ifdef UNICODE <br>#define GetDeviceDriverFileName  GetDeviceDriverFileNameW <br>#else <br>#define GetDeviceDriverFileName  GetDeviceDriverFileNameA <br>#endif // !UNICODE <br> <br>// Structure for GetProcessMemoryInfo() <br> <br>typedef struct _PROCESS_MEMORY_COUNTERS { <br>    DWORD cb; <br>    DWORD PageFaultCount; <br>    DWORD PeakWorkingSetSize; <br>    DWORD WorkingSetSize; <br>    DWORD QuotaPeakPagedPoolUsage; <br>    DWORD QuotaPagedPoolUsage; <br>    DWORD QuotaPeakNonPagedPoolUsage; <br>    DWORD QuotaNonPagedPoolUsage; <br>    DWORD PagefileUsage; <br>    DWORD PeakPagefileUsage; <br>} PROCESS_MEMORY_COUNTERS; <br>typedef PROCESS_MEMORY_COUNTERS *PPROCESS_MEMORY_COUNTERS; <br> <br>BOOL <br>WINAPI <br>GetProcessMemoryInfo( <br>    HANDLE Process, <br>    PPROCESS_MEMORY_COUNTERS ppsmemCounters, <br>    DWORD cb <br>    ); <br> <br>#ifdef __cplusplus <br>} <br>#endif <br> <br>#endif </code></pre>
<p>&nbsp;</p></body>
</HTML>

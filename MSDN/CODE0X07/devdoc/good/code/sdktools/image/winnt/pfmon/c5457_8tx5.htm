<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INIT.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5459"></a>INIT.C</h2>
<pre><code>/*++ <br> <br>Copyright 1995 - 1998 Microsoft Corporation <br> <br>Module Name: <br> <br>    init.c <br> <br>Abstract: <br> <br>    This is the initialization module for the pfmon program. <br> <br>Author: <br> <br>    Mark Lucovsky (markl) 26-Jan-1995 <br> <br>Revision History: <br> <br>--*/ <br> <br>#include "pfmonp.h" <br> <br>BOOL <br>InitializePfmon( VOID ) <br>{ <br>    LPTSTR CommandLine; <br>    BOOL fShowUsage; <br>    DWORD Pid = 0; <br> <br>    fShowUsage = FALSE; <br>    CommandLine = GetCommandLine(); <br>    while (*CommandLine &gt; ' ') { <br>        CommandLine += 1; <br>    } <br>    while (TRUE) { <br>        while (*CommandLine &lt;= ' ') { <br>            if (*CommandLine == '\0') { <br>                break; <br>            } else { <br>                CommandLine += 1; <br>            } <br>        } <br> <br>        if (!strnicmp( CommandLine, "/v", 2 ) || !strnicmp( CommandLine, "-v", 2 )) { <br>            CommandLine += 2; <br>            fVerbose = TRUE; <br>        } else if (!strnicmp( CommandLine, "/?", 2 ) || !strnicmp( CommandLine, "-?", 2 )) { <br>            CommandLine += 2; <br>            fShowUsage = TRUE; <br>            goto showusage; <br>        } else if (!strnicmp( CommandLine, "/c", 2 ) || !strnicmp( CommandLine, "-c", 2 )) { <br>            CommandLine += 2; <br>            fCodeOnly = TRUE; <br>        } else if (!strnicmp( CommandLine, "/h", 2 ) || !strnicmp( CommandLine, "-h", 2 )) { <br>            CommandLine += 2; <br>            fHardOnly = TRUE; <br>        } else if (!strnicmp( CommandLine, "/n", 2 ) || !strnicmp( CommandLine, "-n", 2 )) { <br>            CommandLine += 2; <br>            LogFile = fopen("pfmon.log","wt"); <br>            fLogOnly = TRUE; <br>        } else if (!strnicmp( CommandLine, "/l", 2 ) || !strnicmp( CommandLine, "-l", 2 )) { <br>            CommandLine += 2; <br>            LogFile = fopen("pfmon.log","wt"); <br>        } else if (!strnicmp( CommandLine, "/p", 2 ) || !strnicmp( CommandLine, "-p", 2 )) { <br>            CommandLine += 2; <br>            while (*CommandLine &lt;= ' ') { <br>                if (*CommandLine == '\0') { <br>                    break; <br>                } else { <br>                    ++CommandLine; <br>                } <br>            } <br>            Pid = atoi(CommandLine); <br>            CommandLine = strchr(CommandLine,' '); <br>            if (CommandLine==NULL) { <br>                break; <br>            } <br>        } else if (!strnicmp( CommandLine, "/d", 2 ) || !strnicmp( CommandLine, "-d", 2 )) { <br>            CommandLine += 2; <br>            fDatabase = TRUE; <br>        } else { <br>            break; <br>        } <br>    } <br>showusage: <br>    if ( fShowUsage ) { <br>        fprintf(stdout,"Usage: PFMON [switches] application-command-line\n"); <br>        fprintf(stdout,"             [-?] display this message\n"); <br>        fprintf(stdout,"             [-n] don't display running faults, just log to pfmon.log\n"); <br>        fprintf(stdout,"             [-l] log faults to pfmon.log\n"); <br>        fprintf(stdout,"             [-c] only show code faults\n"); <br>        fprintf(stdout,"             [-h] only show hard faults\n"); <br>        fprintf(stdout,"             [-p pid] attach to existing process\n"); <br>        fprintf(stdout,"             [-d] Database format (tab delimited)\n"); <br>        fprintf(stdout,"                  format: pagefault number, Page Fault type (Hard or Soft),\n"); <br>        fprintf(stdout,"                  Program Counter's Module, Symbol for PC, Decimal value of PC,\n"); <br>        fprintf(stdout,"                  Decimal value of PC, Module of the virtual address accessed,\n"); <br>        fprintf(stdout,"                  Symbol for VA, value of VA\n"); <br>        return FALSE; <br>        }; <br> <br>    InitializeListHead( &amp;ProcessListHead ); <br>    InitializeListHead( &amp;ModuleListHead ); <br>    SetSymbolSearchPath(); <br> <br>    PfmonModuleHandle = GetModuleHandle( NULL ); <br> <br>    if (Pid != 0) { <br>        return(AttachApplicationForDebug(Pid)); <br>    } else { <br>        return (LoadApplicationForDebug( CommandLine )); <br>    } <br> <br>    return TRUE; <br>} <br> <br>BOOL <br>LoadApplicationForDebug( <br>    LPSTR CommandLine <br>    ) <br>{ <br>    STARTUPINFO StartupInfo; <br>    PROCESS_INFORMATION ProcessInformation; <br> <br>    ZeroMemory( &amp;StartupInfo, sizeof( StartupInfo ) ); <br>    StartupInfo.cb = sizeof(StartupInfo); <br> <br>    if (!CreateProcess( NULL, <br>                        CommandLine, <br>                        NULL, <br>                        NULL, <br>                        FALSE,                          // No handles to inherit <br>                        DEBUG_PROCESS, <br>                        NULL, <br>                        NULL, <br>                        &amp;StartupInfo, <br>                        &amp;ProcessInformation)) { <br>        DeclareError( PFMON_CANT_DEBUG_PROGRAM, <br>                      GetLastError(), <br>                      CommandLine <br>                    ); <br>        return FALSE; <br>    } else { <br>        hProcess = ProcessInformation.hProcess; <br>        SymInitialize(hProcess,NULL,FALSE); <br> <br>        return InitializeProcessForWsWatch(hProcess); <br>    } <br>} <br> <br>BOOL <br>AttachApplicationForDebug( <br>    DWORD Pid <br>    ) <br>{ <br> <br>    if (!DebugActiveProcess(Pid)) { <br>        DeclareError( PFMON_CANT_DEBUG_ACTIVE_PROGRAM, <br>                      GetLastError(), <br>                      Pid ); <br>        return FALSE; <br>    } else { <br>        hProcess = OpenProcess(PROCESS_VM_READ <br>                               | PROCESS_QUERY_INFORMATION <br>                               | PROCESS_SET_INFORMATION, <br>                               FALSE, <br>                               Pid); <br>        SymInitialize(hProcess,NULL,FALSE); <br> <br>        return InitializeProcessForWsWatch(hProcess); <br>    } <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FILE.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5452"></a>FILE.C</h2>
<pre><code>/*++ <br> <br> <br>Copyright 1996 - 1997 Microsoft Corporation <br> <br>Module Name: <br> <br>    file.c <br> <br>Abstract: <br> <br>    This module handles all file i/o for SYMCVT.  This includes the <br>    mapping of all files and establishing all file pointers for the <br>    mapped file(s). <br> <br>Author: <br> <br>    Wesley A. Witt (wesw) 19-April-1993 <br> <br>Environment: <br> <br>    Win32, User Mode <br> <br>--*/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;stdio.h&gt; <br> <br>#define _SYMCVT_SOURCE_ <br>#include "symcvt.h" <br> <br>static BOOL CalculateOutputFilePointers( PIMAGEPOINTERS pi, PIMAGEPOINTERS po ); <br>static BOOL CalculateInputFilePointers( PIMAGEPOINTERS p ); <br> <br> <br>  <br>BOOL <br>MapInputFile ( <br>              PPOINTERS   p, <br>              HANDLE      hFile, <br>              char *      fname <br>              ) <br>/*++ <br> <br>Routine Description: <br> <br>    Maps the input file specified by the fname argument and saves the <br>    file handle &amp; file pointer in the POINTERS structure. <br> <br> <br>Arguments: <br> <br>    p        - Supplies pointer to a POINTERS structure <br>    hFile    - OPTIONAL Supplies handle for file if already open <br>    fname    - Supplies ascii string for the file name <br> <br>Return Value: <br> <br>    TRUE     - file mapped ok <br>    FALSE    - file could not be mapped <br> <br>--*/ <br> <br>{ <br>    BOOL        rVal = TRUE; <br>    DWORD       lwFsize; <br> <br>    memset( p, 0, sizeof(POINTERS) ); <br> <br>    strcpy( p-&gt;iptrs.szName, fname ); <br> <br>    if (hFile != NULL) { <br> <br>        p-&gt;iptrs.hFile = hFile; <br> <br>    } else { <br> <br>        p-&gt;iptrs.hFile = CreateFile( p-&gt;iptrs.szName, <br>                                    GENERIC_READ, <br>                                    FILE_SHARE_READ | FILE_SHARE_WRITE, <br>                                    NULL, <br>                                    OPEN_EXISTING, <br>                                    0, <br>                                    NULL ); <br>    } <br> <br>    if (p-&gt;iptrs.hFile == INVALID_HANDLE_VALUE) { <br> <br>        rVal = FALSE; <br> <br>    } else { <br> <br>        p-&gt;iptrs.fsize = GetFileSize( p-&gt;iptrs.hFile, NULL ); <br>        if (lwFsize == 0xffffffff) { <br>            ; <br>        } <br>        p-&gt;iptrs.hMap = CreateFileMapping( p-&gt;iptrs.hFile, <br>                                           NULL, <br>                                           PAGE_READONLY, <br>                                           0, <br>                                           0, <br>                                           NULL <br>                                         ); <br> <br>        if (p-&gt;iptrs.hMap == INVALID_HANDLE_VALUE) { <br> <br>            p-&gt;iptrs.hMap = NULL; <br>            rVal = FALSE; <br> <br>        } else { <br> <br>            p-&gt;iptrs.fptr = MapViewOfFile( p-&gt;iptrs.hMap, <br>                                           FILE_MAP_READ, <br>                                           0, 0, 0 ); <br>            if (p-&gt;iptrs.fptr == NULL) { <br>                CloseHandle( p-&gt;iptrs.hMap ); <br>                p-&gt;iptrs.hMap = NULL; <br>                rVal = FALSE; <br>            } <br>        } <br>    } <br> <br>    if (!hFile &amp;&amp; p-&gt;iptrs.hFile != INVALID_HANDLE_VALUE) { <br>        CloseHandle(p-&gt;iptrs.hFile); <br>        p-&gt;iptrs.hFile = NULL; <br>    } <br> <br>    return rVal; <br>}                               /* MapInputFile() */ <br> <br> <br>  <br>BOOL <br>UnMapInputFile ( <br>    PPOINTERS p <br>    ) <br>/*++ <br> <br>Routine Description: <br> <br>    Unmaps the input file specified by the fname argument and then <br>    closes the file. <br> <br> <br>Arguments: <br> <br>    p        - pointer to a POINTERS structure <br> <br>Return Value: <br> <br>    TRUE     - file mapped ok <br>    FALSE    - file could not be mapped <br> <br>--*/ <br> <br>{ <br>    if ( p-&gt;iptrs.fptr ) { <br>        UnmapViewOfFile( p-&gt;iptrs.fptr ); <br>        p-&gt;iptrs.fptr = NULL; <br>    } <br>    if ( p-&gt;iptrs.hMap ) { <br>        CloseHandle( p-&gt;iptrs.hMap ); <br>        p-&gt;iptrs.hMap = NULL; <br>    } <br>    if (p-&gt;iptrs.hFile != NULL) { <br>        CloseHandle( p-&gt;iptrs.hFile ); <br>        p-&gt;iptrs.hFile = NULL; <br>    } <br>    return TRUE; <br>}                               /* UnMapInputFile() */ <br> <br>  <br>BOOL <br>FillInSeparateImagePointers( <br>                            PIMAGEPOINTERS      p <br>                            ) <br>/*++ <br> <br>Routine Description: <br> <br>    This routine will go through the exe file and fill in the <br>    pointers needed relative to the separate debug information files <br> <br>Arguments: <br> <br>    p  - Supplies the structure to fill in <br> <br>Return Value: <br> <br>    TRUE if successful and FALSE otherwise. <br> <br>--*/ <br> <br>{ <br>    int                         li; <br>    int                         numDebugDirs; <br>    PIMAGE_DEBUG_DIRECTORY      pDebugDir; <br>    PIMAGE_COFF_SYMBOLS_HEADER  pCoffHdr; <br> <br>    p-&gt;sectionHdrs = (PIMAGE_SECTION_HEADER) <br>      (p-&gt;fptr + sizeof(IMAGE_SEPARATE_DEBUG_HEADER)); <br> <br>    numDebugDirs = p-&gt;sepHdr-&gt;DebugDirectorySize/sizeof(IMAGE_DEBUG_DIRECTORY); <br> <br>    if (numDebugDirs == 0) { <br>        return FALSE; <br>    } <br> <br>    /* <br>     *  For each debug directory, determine the debug directory type <br>     *  and cache any information about them. <br>     */ <br> <br>    pDebugDir = (PIMAGE_DEBUG_DIRECTORY) <br>      (p-&gt;fptr + sizeof(IMAGE_SEPARATE_DEBUG_HEADER) + <br>       p-&gt;sepHdr-&gt;NumberOfSections * sizeof(IMAGE_SECTION_HEADER) + <br>       p-&gt;sepHdr-&gt;ExportedNamesSize); <br> <br>    for (li=0; li&lt;numDebugDirs; li++, pDebugDir++) { <br>        if (((int) pDebugDir-&gt;Type) &gt; p-&gt;cDebugDir) { <br>            p-&gt;cDebugDir += 10; <br>            p-&gt;rgDebugDir = realloc((char *) p-&gt;rgDebugDir, <br>                                    p-&gt;cDebugDir * sizeof(p-&gt;rgDebugDir[0])); <br>            memset(&amp;p-&gt;rgDebugDir[p-&gt;cDebugDir-10], 0, <br>                   10*sizeof(p-&gt;rgDebugDir[0])); <br>        } <br> <br>        p-&gt;rgDebugDir[pDebugDir-&gt;Type] = pDebugDir; <br>    } <br> <br>    if (p-&gt;rgDebugDir[IMAGE_DEBUG_TYPE_COFF] != NULL) { <br>        pCoffHdr = (PIMAGE_COFF_SYMBOLS_HEADER) (p-&gt;fptr + <br>          p-&gt;rgDebugDir[IMAGE_DEBUG_TYPE_COFF]-&gt;PointerToRawData); <br>        p-&gt;AllSymbols = (PIMAGE_SYMBOL) <br>          ((char *) pCoffHdr + pCoffHdr-&gt;LvaToFirstSymbol); <br>        p-&gt;stringTable = pCoffHdr-&gt;NumberOfSymbols * IMAGE_SIZEOF_SYMBOL + <br>          (char *) p-&gt;AllSymbols; <br>        p-&gt;numberOfSymbols = pCoffHdr-&gt;NumberOfSymbols; <br>    } <br>    p-&gt;numberOfSections = p-&gt;sepHdr-&gt;NumberOfSections; <br> <br>    return TRUE; <br>}                               /* FillInSeparateImagePointers() */ <br> <br> <br>  <br>BOOL <br>CalculateNtImagePointers( <br>    PIMAGEPOINTERS p <br>    ) <br>/*++ <br> <br>Routine Description: <br> <br>    This function reads an NT image and its associated COFF headers <br>    and file pointers and build a set of pointers into the mapped image. <br>    The pointers are all relative to the image's mapped file pointer <br>    and allow direct access to the necessary data. <br> <br>Arguments: <br> <br>    p        - pointer to a IMAGEPOINTERS structure <br> <br>Return Value: <br> <br>    TRUE     - pointers were created <br>    FALSE    - pointers could not be created <br> <br>--*/ <br>{ <br>    PIMAGE_DEBUG_DIRECTORY      debugDir; <br>    PIMAGE_SECTION_HEADER       sh; <br>    DWORD                       i, li, rva, numDebugDirs; <br>    PIMAGE_FILE_HEADER          pFileHdr; <br>    PIMAGE_OPTIONAL_HEADER      pOptHdr; <br>    DWORD                       offDebugInfo; <br> <br>    try { <br>        /* <br>         *      Based on wheither or not we find the dos (MZ) header <br>         *      at the beginning of the file, attempt to get a pointer <br>         *      to where the PE header is suppose to be. <br>         */ <br> <br>        p-&gt;dosHdr = (PIMAGE_DOS_HEADER) p-&gt;fptr; <br>        if (p-&gt;dosHdr-&gt;e_magic == IMAGE_DOS_SIGNATURE) { <br>            p-&gt;ntHdr = (PIMAGE_NT_HEADERS) <br>              ((DWORD)p-&gt;dosHdr-&gt;e_lfanew + p-&gt;fptr); <br>            p-&gt;fRomImage = FALSE; <br>        } else if (p-&gt;dosHdr-&gt;e_magic == IMAGE_SEPARATE_DEBUG_SIGNATURE) { <br>            p-&gt;sepHdr = (PIMAGE_SEPARATE_DEBUG_HEADER) p-&gt;fptr; <br>            p-&gt;dosHdr = NULL; <br>            p-&gt;fRomImage = FALSE; <br>            return FillInSeparateImagePointers(p); <br>        } else { <br>            p-&gt;romHdr = (PIMAGE_ROM_HEADERS) p-&gt;fptr; <br>            if (p-&gt;romHdr-&gt;FileHeader.SizeOfOptionalHeader == <br>                                          IMAGE_SIZEOF_ROM_OPTIONAL_HEADER &amp;&amp; <br>                p-&gt;romHdr-&gt;OptionalHeader.Magic == <br>                                          IMAGE_ROM_OPTIONAL_HDR_MAGIC) { <br>                // <br>                // its a rom image <br>                // <br>                p-&gt;fRomImage = TRUE; <br>                p-&gt;ntHdr = NULL; <br>                p-&gt;dosHdr = NULL; <br>            } else { <br>                p-&gt;fRomImage = FALSE; <br>                p-&gt;ntHdr = (PIMAGE_NT_HEADERS) p-&gt;fptr; <br>                p-&gt;dosHdr = NULL; <br>                p-&gt;romHdr = NULL; <br>            } <br>        } <br> <br>        /* <br>         *  What comes next must be a PE header.  If not then pop out <br>         */ <br> <br>        if ( p-&gt;ntHdr ) { <br>            if ( p-&gt;dosHdr &amp;&amp; (DWORD)p-&gt;dosHdr-&gt;e_lfanew &gt; (DWORD)p-&gt;fsize ) { <br>                return FALSE; <br>            } <br> <br>            if ( p-&gt;ntHdr-&gt;Signature != IMAGE_NT_SIGNATURE ) { <br>                return FALSE; <br>            } <br> <br>            /* <br>             *  We did find a PE header so start setting pointers to various <br>             *      structures in the exe file. <br>             */ <br> <br>            pFileHdr = p-&gt;fileHdr = &amp;p-&gt;ntHdr-&gt;FileHeader; <br>            pOptHdr = p-&gt;optHdr = &amp;p-&gt;ntHdr-&gt;OptionalHeader; <br>        } else if (p-&gt;romHdr) { <br>            pFileHdr = p-&gt;fileHdr = &amp;p-&gt;romHdr-&gt;FileHeader; <br>            pOptHdr = (PIMAGE_OPTIONAL_HEADER) &amp;p-&gt;romHdr-&gt;OptionalHeader; <br>            p-&gt;optHdr = (PIMAGE_OPTIONAL_HEADER) &amp;p-&gt;romHdr-&gt;OptionalHeader; <br>        } else { <br>            return FALSE; <br>        } <br> <br>        if (!(pFileHdr-&gt;Characteristics &amp; IMAGE_FILE_EXECUTABLE_IMAGE)) { <br>            return FALSE; <br>        } <br> <br>        if (pFileHdr-&gt;Characteristics &amp; IMAGE_FILE_DEBUG_STRIPPED) { <br>            return(FALSE); <br>        } <br> <br>        /* <br>         *  If they exists then get a pointer to the symbol table and <br>         *      the string table <br>         */ <br> <br>        if (pFileHdr-&gt;PointerToSymbolTable) { <br>            p-&gt;AllSymbols = (PIMAGE_SYMBOL) <br>                              (pFileHdr-&gt;PointerToSymbolTable + p-&gt;fptr); <br>            p-&gt;stringTable = (LPSTR)((ULONG)p-&gt;AllSymbols + <br>                           (IMAGE_SIZEOF_SYMBOL * pFileHdr-&gt;NumberOfSymbols)); <br>            p-&gt;numberOfSymbols = pFileHdr-&gt;NumberOfSymbols; <br>        } <br> <br>        p-&gt;numberOfSections = pFileHdr-&gt;NumberOfSections; <br> <br>        if (p-&gt;romHdr) { <br> <br>            sh = p-&gt;sectionHdrs = (PIMAGE_SECTION_HEADER) (p-&gt;romHdr+1); <br> <br>            p-&gt;cDebugDir = 10; <br>            p-&gt;rgDebugDir = calloc(sizeof(IMAGE_DEBUG_DIRECTORY) * 10, 1); <br> <br>            debugDir = 0; <br> <br>            for (i=0; i&lt;pFileHdr-&gt;NumberOfSections; i++, sh++) { <br>                if (!strcmp(sh-&gt;Name, ".rdata")) { <br>                    debugDir = (PIMAGE_DEBUG_DIRECTORY)(sh-&gt;PointerToRawData + p-&gt;fptr); <br>                } <br> <br>                if (strncmp(sh-&gt;Name,".debug",8)==0) { <br>                    p-&gt;debugSection = sh; <br>                } <br>            } <br> <br>            if (debugDir) { <br>                do { <br>                    if ((int)debugDir-&gt;Type &gt; p-&gt;cDebugDir) { <br>                        p-&gt;cDebugDir += 10; <br>                        p-&gt;rgDebugDir = realloc((char *) p-&gt;rgDebugDir, <br>                                            p-&gt;cDebugDir * sizeof(p-&gt;rgDebugDir[0])); <br>                        memset(&amp;p-&gt;rgDebugDir[p-&gt;cDebugDir-10], <br>                                0, <br>                                10*sizeof(IMAGE_DEBUG_DIRECTORY)); <br>                    } <br>                    p-&gt;rgDebugDir[debugDir-&gt;Type] = debugDir; <br>                    debugDir++; <br>                } while (debugDir-&gt;Type != 0); <br>            } <br>        } else { <br> <br>            /* <br>             *  Locate the debug directory <br>             */ <br> <br>            rva = <br>              pOptHdr-&gt;DataDirectory[IMAGE_DIRECTORY_ENTRY_DEBUG].VirtualAddress; <br> <br>            numDebugDirs = <br>              pOptHdr-&gt;DataDirectory[IMAGE_DIRECTORY_ENTRY_DEBUG].Size / <br>                sizeof(IMAGE_DEBUG_DIRECTORY); <br> <br>            if (numDebugDirs == 0) { <br>                return FALSE; <br>            } <br> <br>            sh = p-&gt;sectionHdrs = IMAGE_FIRST_SECTION( p-&gt;ntHdr ); <br> <br>            /* <br>             * Find the section the debug directory is in. <br>             */ <br> <br>            for (i=0; i&lt;pFileHdr-&gt;NumberOfSections; i++, sh++) { <br>                if (rva &gt;= sh-&gt;VirtualAddress &amp;&amp; <br>                    rva &lt; sh-&gt;VirtualAddress+sh-&gt;SizeOfRawData) { <br>                    break; <br>                } <br>            } <br> <br>            /* <br>             *   For each debug directory, determine the debug directory <br>             *      type and cache any information about them. <br>             */ <br> <br>            debugDir = (PIMAGE_DEBUG_DIRECTORY) ( rva - sh-&gt;VirtualAddress + <br>                                                 sh-&gt;PointerToRawData + <br>                                                 p-&gt;fptr ); <br> <br>            for (li=0; li&lt;numDebugDirs; li++, debugDir++) { <br>                if (((int) debugDir-&gt;Type) &gt; p-&gt;cDebugDir) { <br>                    p-&gt;cDebugDir += 10; <br>                    p-&gt;rgDebugDir = realloc((char *) p-&gt;rgDebugDir, <br>                                            p-&gt;cDebugDir * sizeof(p-&gt;rgDebugDir[0])); <br>                    memset(&amp;p-&gt;rgDebugDir[p-&gt;cDebugDir-10], 0, <br>                           10*sizeof(p-&gt;rgDebugDir[0])); <br>                } <br>                p-&gt;rgDebugDir[debugDir-&gt;Type] = debugDir; <br>                offDebugInfo = debugDir-&gt;AddressOfRawData; <br>            } <br> <br>            /* <br>             *  Check to see if the debug information is mapped and if <br>             *      there is a section called .debug <br>             */ <br> <br>            sh = p-&gt;sectionHdrs = IMAGE_FIRST_SECTION( p-&gt;ntHdr ); <br> <br>            for (i=0; i&lt;pFileHdr-&gt;NumberOfSections; i++, sh++) { <br>                if ((offDebugInfo &gt;= sh-&gt;VirtualAddress) &amp;&amp; <br>                    (offDebugInfo &lt; sh-&gt;VirtualAddress+sh-&gt;SizeOfRawData)) { <br>                    p-&gt;debugSection = sh; <br>                    break; <br>                } <br>            } <br>        } <br> <br>        return TRUE; <br>    } except (EXCEPTION_EXECUTE_HANDLER) { <br>        return FALSE; <br>    } <br>}                               /* CalcuateNtImagePointers() */ </code></pre>
<p>&nbsp;</p></body>
</HTML>

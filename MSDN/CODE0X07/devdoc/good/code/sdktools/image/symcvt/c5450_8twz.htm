<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SYMCVT.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5453"></a>SYMCVT.C</h2>
<pre><code>/*++ <br> <br> <br>Copyright 1996 - 1997 Microsoft Corporation <br> <br>Module Name: <br> <br>    symcvt.c <br> <br>Abstract: <br> <br>    This module is the shell for the SYMCVT DLL.  The DLL's purpose is <br>    to convert the symbols for the specified image.  The resulting <br>    debug data must conform to the CODEVIEW spec. <br> <br>    Currently this DLL converts COFF symbols and C7/C8 MAPTOSYM SYM files. <br> <br>Author: <br> <br>    Wesley A. Witt (wesw) 19-April-1993 <br> <br>Environment: <br> <br>    Win32, User Mode <br> <br>--*/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;string.h&gt; <br>#define _SYMCVT_SOURCE_ <br>#include "symcvt.h" <br> <br>PUCHAR <br>ConvertSymbolsForImage( <br>                       HANDLE      hFile, <br>                       char *      fname <br>    ) <br>/*++ <br> <br>Routine Description: <br> <br>    Calls the appropriate conversion routine based on the file contents. <br> <br> <br>Arguments: <br> <br>    hFile         -  file handle for the image (may be NULL) <br>    fname         -  file name for the image (may not have correct path) <br> <br> <br>Return Value: <br> <br>    NULL             - could not convert the symbols <br>    Valid Pointer    - a pointer to malloc'ed memory that contains the <br>                       CODEVIEW symbols <br> <br>--*/ <br>{ <br>    POINTERS   p; <br>    char       szDrive    [_MAX_DRIVE]; <br>    char       szDir      [_MAX_DIR]; <br>    char       szFname    [_MAX_FNAME]; <br>    char       szExt      [_MAX_EXT]; <br>    char       szSymName  [MAX_PATH]; <br>    PUCHAR     rVal; <br> <br> <br>    if (!MapInputFile( &amp;p, hFile, fname)) { <br> <br>        rVal = NULL; <br> <br>    } else if (CalculateNtImagePointers( &amp;p.iptrs )) { <br> <br>        // <br>        // we were able to compute the nt image pointers so this must be <br>        // a nt PE image.  now we must decide if there are coff symbols <br>        // if there are then we do the cofftocv conversion. <br>        // <br>        // btw, this is where someone would convert some other type of <br>        // symbols that are in a nt PE image. (party on garth..) <br>        // <br> <br>//      if (!COFF_DIR(&amp;p.iptrs)) { <br>        if (!p.iptrs.numberOfSymbols) { <br>            rVal = NULL; <br>        } else { <br>            ConvertCoffToCv( &amp;p ); <br>            rVal = p.pCvStart.ptr; <br>        } <br>        UnMapInputFile( &amp;p ); <br> <br>    } else { <br> <br>        UnMapInputFile ( &amp;p ); <br> <br>        _splitpath( fname, szDrive, szDir, szFname, szExt ); <br>        _makepath( szSymName, szDrive, szDir, szFname, "sym" ); <br> <br>        if (!MapInputFile( &amp;p, NULL, szSymName)) { <br> <br>            rVal = NULL; <br> <br>        } else { <br> <br>            // <br>            // must be a wow/dos app and there is a .sym file so lets to <br>            // the symtocv conversion <br>            // <br> <br>            ConvertSymToCv( &amp;p ); <br>            UnMapInputFile( &amp;p ); <br> <br>            rVal = p.pCvStart.ptr; <br>        } <br> <br>    } <br> <br>    return rVal; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

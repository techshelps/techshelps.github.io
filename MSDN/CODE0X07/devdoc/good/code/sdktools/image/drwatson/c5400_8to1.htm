<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CONTROLS.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5401"></a>CONTROLS.C</h2>
<pre><code>/*++ <br> <br>Copyright (c) 1993  Microsoft Corporation <br> <br>Module Name: <br> <br>    controls.c <br> <br>Abstract: <br>    This file implements the sun-classing and message processing of <br>    the controls on the main ui dialog. <br> <br>Author: <br> <br>    Wesley Witt (wesw) 1-May-1993 <br> <br>Environment: <br> <br>    User Mode <br> <br>--*/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;string.h&gt; <br> <br>#include "drwatson.h" <br>#include "proto.h" <br>#include "resource.h" <br> <br> <br>typedef struct _tagCONTROLINFO { <br>    struct _tagCONTROLINFO   *next; <br>    HWND                     hwnd; <br>    WNDPROC                  wndProc; <br>} CONTROLINFO, *PCONTROLINFO; <br> <br> <br>PCONTROLINFO   ciHead    = NULL; <br>PCONTROLINFO   ciTail    = NULL; <br>PCONTROLINFO   ciFocus   = NULL; <br>PCONTROLINFO   ciDefault = NULL; <br> <br> <br> <br>void <br>SetFocusToCurrentControl( void ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    Sets the focus  to the current control. <br> <br>Arguments: <br> <br>    None. <br> <br>Return Value: <br> <br>    None. <br> <br>--*/ <br> <br>{ <br>    if (ciFocus != NULL) { <br>        SetFocus( ciFocus-&gt;hwnd ); <br>        SendMessage( ciFocus-&gt;hwnd, BM_SETSTATE, 0, 0 ); <br>    } <br>} <br> <br>LRESULT <br>ControlWndProc( HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    Processes focus messages and ensures that when the focus changes <br>    from one button to another that the old button looses the focus <br>    and the "default" state. <br> <br>Arguments: <br> <br>    Standard WNDPROC entry. <br> <br>Return Value: <br> <br>    LRESULT - Depending on input message and processing options. <br> <br>--*/ <br> <br>{ <br>    PCONTROLINFO ci = ciHead; <br> <br>    while (ci-&gt;hwnd != hwnd) { <br>        ci = ci-&gt;next; <br>        if (ci == NULL) { <br>            return FALSE; <br>        } <br>    } <br> <br>    switch(message) { <br>        case WM_SETFOCUS: <br>            ciFocus = ci; <br>            break; <br> <br>        case BM_SETSTYLE: <br>            if (wParam == BS_DEFPUSHBUTTON) { <br>                ciDefault = ci; <br>            } <br>            break; <br> <br>        case BM_SETSTATE: <br>            if ((GetWindowLong( hwnd, GWL_STYLE ) &amp; 0xff) &lt; BS_CHECKBOX) { <br>                // <br>                // change the button that had the focus <br>                // <br>                SendMessage( ciDefault-&gt;hwnd, <br>                             BM_SETSTYLE, <br>                             ( WPARAM ) BS_PUSHBUTTON, <br>                             ( LPARAM ) TRUE <br>                           ); <br>                UpdateWindow( ciDefault-&gt;hwnd ); <br> <br>                // <br>                // change the button that is getting the focus <br>                // <br>                SendMessage( hwnd, <br>                             BM_SETSTYLE, <br>                             ( WPARAM ) BS_DEFPUSHBUTTON, <br>                             ( LPARAM ) TRUE <br>                           ); <br>                SetFocus( hwnd ); <br>                UpdateWindow( hwnd ); <br>            } <br>            break; <br>    } <br> <br>    return CallWindowProc( ci-&gt;wndProc, hwnd, message, wParam, lParam ); <br>} <br> <br> <br>BOOL CALLBACK <br>EnumChildProc( HWND hwnd, LPARAM lParam ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    Subclass a controls in DrWatson's main window. <br> <br>Arguments: <br> <br>    hwnd    - Supplies the window handle for the main window. <br>    lParam  - non used <br> <br>Return Value: <br> <br>    BOOL    - Returns TRUE if each of the buttons in the ButtonHelpTable is <br>              subclassed. <br> <br>--*/ <br> <br>{ <br>    PCONTROLINFO ci; <br> <br>    // <br>    // add the control to the linked list <br>    // <br>    ci = (PCONTROLINFO) malloc( sizeof(CONTROLINFO) ); <br>    if (ci == NULL) { <br>        return FALSE; <br>    } <br>    memset( ci, 0, sizeof(CONTROLINFO) ); <br> <br>    if (ciHead == NULL) { <br>        ciHead = ciTail = ci; <br>    } <br>    else { <br>        ciTail-&gt;next = ci; <br>        ciTail = ci; <br>    } <br> <br>    // <br>    // save the HWND <br>    // <br>    ci-&gt;hwnd = hwnd; <br> <br>    // <br>    // change the WNDPROC and save the address of the old one <br>    // <br>    ci-&gt;wndProc = (WNDPROC) SetWindowLong( hwnd, <br>                                           GWL_WNDPROC, <br>                                           (LONG)ControlWndProc <br>                                         ); <br> <br>    if (GetWindowLong( hwnd, GWL_STYLE ) &amp; BS_DEFPUSHBUTTON) { <br>        ciDefault = ci; <br>    } <br> <br>    return TRUE; <br>} <br> <br>BOOL <br>SubclassControls( HWND hwnd ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    Subclass the controls in DrWatson's main window. <br> <br>Arguments: <br> <br>    hWnd    - Supplies the window handle for the main window. <br> <br>Return Value: <br> <br>    BOOL    - Returns TRUE if each of the buttons in the ButtonHelpTable is <br>              subclassed. <br> <br>--*/ <br> <br>{ <br>    EnumChildWindows( hwnd, EnumChildProc, 0 ); <br> <br>    return TRUE; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>EVENTLOG.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5406"></a>EVENTLOG.C</h2>
<pre><code>/*++ <br> <br>Copyright (c) 1993  Microsoft Corporation <br> <br>Module Name: <br> <br>    ui.c <br> <br>Abstract: <br> <br>    This file contains all functions that access the application event log. <br> <br>Author: <br> <br>    Wesley Witt (wesw) 1-May-1993 <br> <br>Environment: <br> <br>    User Mode <br> <br>--*/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;string.h&gt; <br> <br>#include "drwatson.h" <br>#include "proto.h" <br>#include "messages.h" <br> <br> <br>char * AddString( char *p, char *s ); <br>char * AddNumber( char *p, char *f, DWORD dwNumber ); <br>char * GetDWORD( PDWORD pdwData, char *p ); <br>char * GetWORD( PWORD pwData, char *p ); <br>char * GetString( char *s, char *p, DWORD size ); <br> <br> <br>BOOL <br>ElClearAllEvents( void ) <br>{ <br>    HANDLE           hEventLog; <br>    char             szAppName[MAX_PATH]; <br> <br> <br>    GetAppName( szAppName, sizeof(szAppName) ); <br>    hEventLog = OpenEventLog( NULL, szAppName ); <br>    Assert( hEventLog != NULL ); <br>    ClearEventLog( hEventLog, NULL ); <br>    CloseEventLog( hEventLog ); <br>    RegSetNumCrashes(0); <br> <br>    return TRUE; <br>} <br> <br>BOOL <br>ElEnumCrashes( PCRASHINFO crashInfo, CRASHESENUMPROC lpEnumFunc ) <br>{ <br>    char             *p; <br>    HANDLE           hEventLog; <br>    char             *szEvBuf; <br>    EVENTLOGRECORD   *pevlr; <br>    DWORD            dwRead; <br>    DWORD            dwNeeded; <br>    DWORD            dwBufSize = 4096; <br>    BOOL             rc; <br>    BOOL             ec; <br>    char             szAppName[MAX_PATH]; <br> <br> <br>    GetAppName( szAppName, sizeof(szAppName) ); <br>    hEventLog = OpenEventLog( NULL, szAppName ); <br>    if (hEventLog == NULL) { <br>        return FALSE; <br>    } <br> <br>    szEvBuf = (char *) malloc( dwBufSize ); <br>    if (szEvBuf == NULL) { <br>        return FALSE; <br>    } <br> <br>    while (TRUE) { <br>try_again: <br>        rc = ReadEventLog(hEventLog, <br>                        EVENTLOG_FORWARDS_READ | EVENTLOG_SEQUENTIAL_READ, <br>                        0, <br>                        (EVENTLOGRECORD *) szEvBuf, <br>                        dwBufSize, <br>                        &amp;dwRead, <br>                        &amp;dwNeeded); <br> <br>        if (!rc) { <br>            ec = GetLastError(); <br>            if (ec != ERROR_INSUFFICIENT_BUFFER) { <br>                goto exit; <br>            } <br> <br>            free( szEvBuf ); <br> <br>            dwBufSize = dwNeeded + 1024; <br>            szEvBuf = (char *) malloc( dwBufSize ); <br>            if (szEvBuf == NULL) { <br>                return FALSE; <br>            } <br> <br>            goto try_again; <br>        } <br> <br>        if (dwRead == 0) { <br>            break; <br>        } <br> <br>        GetAppName( szAppName, sizeof(szAppName) ); <br>        p = szEvBuf; <br> <br>        do { <br> <br>            pevlr = (EVENTLOGRECORD *) p; <br> <br>            p += pevlr-&gt;StringOffset; <br> <br>            p = GetString( crashInfo-&gt;crash.szAppName,           p, sizeof(crashInfo-&gt;crash.szAppName) ); <br>            p = GetWORD  ( &amp;crashInfo-&gt;crash.time.wMonth,        p ); <br>            p = GetWORD  ( &amp;crashInfo-&gt;crash.time.wDay,          p ); <br>            p = GetWORD  ( &amp;crashInfo-&gt;crash.time.wYear,         p ); <br>            p = GetWORD  ( &amp;crashInfo-&gt;crash.time.wHour,         p ); <br>            p = GetWORD  ( &amp;crashInfo-&gt;crash.time.wMinute,       p ); <br>            p = GetWORD  ( &amp;crashInfo-&gt;crash.time.wSecond,       p ); <br>            p = GetWORD  ( &amp;crashInfo-&gt;crash.time.wMilliseconds, p ); <br>            p = GetDWORD ( &amp;crashInfo-&gt;crash.dwExceptionCode,    p ); <br>            p = GetDWORD ( &amp;crashInfo-&gt;crash.dwAddress,          p ); <br>            p = GetString( crashInfo-&gt;crash.szFunction,          p, sizeof(crashInfo-&gt;crash.szFunction) ); <br> <br>            p = (char *) ((DWORD)pevlr + sizeof(EVENTLOGRECORD)); <br> <br>            if (strcmp( p, szAppName) == 0) { <br>                crashInfo-&gt;dwCrashDataSize = pevlr-&gt;DataLength; <br>                crashInfo-&gt;pCrashData = (char *) ((DWORD)pevlr + pevlr-&gt;DataOffset); <br> <br>                if (!lpEnumFunc( crashInfo )) { <br>                    goto exit; <br>                } <br>            } <br> <br>            // <br>            // update the pointer &amp; read count <br>            // <br>            dwRead -= pevlr-&gt;Length; <br>            p = (char *) ((DWORD)pevlr + pevlr-&gt;Length); <br> <br>        } while ( dwRead &gt; 0 ); <br>    } <br> <br>exit: <br>    free( szEvBuf ); <br>    CloseEventLog( hEventLog ); <br>    return TRUE; <br>} <br> <br>BOOL <br>ElSaveCrash( PCRASHES crash, DWORD dwMaxCrashes ) <br>{ <br>    char    szStrings[4096]; <br>    LPSTR   p = szStrings; <br>    HANDLE  hEventSrc; <br>    LPSTR   pp[20]; <br>    char    *pLogFileData; <br>    DWORD   dwLogFileDataSize; <br>    char    szAppName[MAX_PATH]; <br> <br> <br>    if (dwMaxCrashes &gt; 0) { <br>        if (RegGetNumCrashes() &gt;= dwMaxCrashes) { <br>            return FALSE; <br>        } <br>    } <br> <br>    RegSetNumCrashes( RegGetNumCrashes()+1 ); <br> <br>    p = AddString( pp[0]  = p,         crash-&gt;szAppName           ); <br>    p = AddNumber( pp[1]  = p, "%2d",  crash-&gt;time.wMonth         ); <br>    p = AddNumber( pp[2]  = p, "%2d",  crash-&gt;time.wDay           ); <br>    p = AddNumber( pp[3]  = p, "%4d",  crash-&gt;time.wYear          ); <br>    p = AddNumber( pp[4]  = p, "%2d",  crash-&gt;time.wHour          ); <br>    p = AddNumber( pp[5]  = p, "%2d",  crash-&gt;time.wMinute        ); <br>    p = AddNumber( pp[6]  = p, "%2d",  crash-&gt;time.wSecond        ); <br>    p = AddNumber( pp[7]  = p, "%3d",  crash-&gt;time.wMilliseconds  ); <br>    p = AddNumber( pp[8]  = p, "%08x", crash-&gt;dwExceptionCode     ); <br>    p = AddNumber( pp[9]  = p, "%08x", crash-&gt;dwAddress           ); <br>    p = AddString( pp[10] = p,         crash-&gt;szFunction          ); <br> <br>    GetAppName( szAppName, sizeof(szAppName) ); <br> <br>    hEventSrc = RegisterEventSource( NULL, szAppName ); <br> <br>    if (hEventSrc == NULL) { <br>        return FALSE; <br>    } <br> <br>    pLogFileData = GetLogFileData( &amp;dwLogFileDataSize ); <br> <br>    ReportEvent( hEventSrc, <br>                 EVENTLOG_INFORMATION_TYPE, <br>                 0, <br>                 MSG_CRASH, <br>                 NULL, <br>                 11, <br>                 dwLogFileDataSize, <br>                 pp, <br>                 pLogFileData <br>               ); <br> <br>    DeregisterEventSource( hEventSrc ); <br> <br>    free( pLogFileData ); <br> <br>    return TRUE; <br>} <br> <br>char * <br>AddString( char *p, char *s ) <br>{ <br>    strcpy( p, s ); <br>    p += (strlen(s) + 1); <br>    return p; <br>} <br> <br>char * <br>AddNumber( char *p, char *f, DWORD dwNumber ) <br>{ <br>    char buf[20]; <br>    wsprintf( buf, f, dwNumber ); <br>    return AddString( p, buf ); <br>} <br> <br>char * <br>GetString( char *s, char *p, DWORD size ) <br>{ <br>    strncpy( s, p, size ); <br>    return p + strlen(p) + 1; <br>} <br> <br>char * <br>GetDWORD( PDWORD pdwData, char *p ) <br>{ <br>    sscanf( p, "%x", pdwData ); <br>    return p + strlen(p) + 1; <br>} <br> <br>char * <br>GetWORD( PWORD pwData, char *p ) <br>{ <br>    *pwData = atoi( p ); <br>    return p + strlen(p) + 1; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

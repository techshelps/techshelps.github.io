<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>LOG.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5408"></a>LOG.C</h2>
<pre><code>/*++ <br> <br>Copyright (c) 1993  Microsoft Corporation <br> <br>Module Name: <br> <br>    log.c <br> <br>Abstract: <br> <br>    This file implements the access to the postmortem log file. <br> <br>Author: <br> <br>    Wesley Witt (wesw) 1-May-1993 <br> <br>Environment: <br> <br>    User Mode <br> <br>--*/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;stdarg.h&gt; <br>#include &lt;commdlg.h&gt; <br>#include &lt;direct.h&gt; <br> <br>#include "drwatson.h" <br>#include "proto.h" <br>#include "messages.h" <br>#include "resource.h" <br> <br>// <br>// global variables for this module <br>// <br>static HANDLE  hFile = NULL; <br>static HANDLE  hLogProtect = NULL; <br>static DWORD   dwStartingPos = 0; <br> <br> <br>void <br>lprintf(DWORD dwFormatId, ...) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    This is function is a printf style function for printing messages <br>    in a message file. <br> <br>Arguments: <br> <br>    dwFormatId    - format id in the message file <br>    ...           - var args <br> <br>Return Value: <br> <br>    None. <br> <br>--*/ <br> <br>{ <br>    char        buf[1024]; <br>    DWORD       dwCount; <br>    va_list     args; <br> <br>    va_start( args, dwFormatId ); <br> <br>    dwCount = FormatMessage( <br>                FORMAT_MESSAGE_FROM_HMODULE, <br>                NULL, <br>                dwFormatId, <br>                0, // GetUserDefaultLangID(), <br>                buf, <br>                sizeof(buf), <br>                &amp;args <br>                ); <br> <br>    Assert( dwCount != 0 ); <br> <br>    WriteFile( hFile, buf, dwCount, &amp;dwCount, NULL ); <br> <br>    return; <br>} <br> <br>void <br>lprintfs(char *format, ...) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    This is function is a printf replacement that writes the output to <br>    the DrWatson log file. <br> <br>Arguments: <br> <br>    format        - print format <br>    ...           - var args <br> <br>Return Value: <br> <br>    None. <br> <br>--*/ <br> <br>{ <br>    char    buf[1024]; <br>    DWORD   cb; <br> <br>    va_list arg_ptr; <br>    va_start(arg_ptr, format); <br>    cb = _vsnprintf(buf, sizeof(buf), format, arg_ptr); <br>    Assert( hFile != NULL ); <br>    WriteFile( hFile, buf, cb, &amp;cb, NULL ); <br>    return; <br>} <br> <br>void <br>OpenLogFile( char *szFileName, BOOL fAppend, BOOL fVisual ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    Opens the DrWatson logfile for reading &amp; writting. <br> <br>Arguments: <br> <br>    szFileName    - logfile name <br>    fAppend       - append the new data to the end of the file or <br>                    create a new file <br>    fVisual       - visual notification <br> <br>Return Value: <br> <br>    None. <br> <br>--*/ <br> <br>{ <br>    char   szName[1024]; <br> <br>    GetAppName( szName, sizeof(szName) ); <br>    strcat( szName, "LogProtect" ); <br> <br>    hLogProtect = OpenSemaphore( SEMAPHORE_MODIFY_STATE | SYNCHRONIZE, FALSE, szName); <br>    if (hLogProtect == NULL) { <br>        hLogProtect = CreateSemaphore( NULL, 0, 1, szName ); <br>        Assert( hLogProtect != NULL ); <br>    } <br>    else { <br>        WaitForSingleObject( hLogProtect, INFINITE ); <br>    } <br> <br>openagain: <br>    hFile = CreateFile( szFileName, <br>                        GENERIC_WRITE | GENERIC_READ, <br>                        FILE_SHARE_READ, <br>                        NULL, <br>                        fAppend ? OPEN_EXISTING : CREATE_ALWAYS, <br>                        FILE_ATTRIBUTE_NORMAL, <br>                        NULL <br>                      ); <br> <br>    if (fAppend) { <br>        if (hFile == INVALID_HANDLE_VALUE) { <br>            // <br>            // file does not exist, so lets create a new file <br>            // <br>            hFile = CreateFile( szFileName, <br>                                GENERIC_WRITE | GENERIC_READ, <br>                                FILE_SHARE_READ, <br>                                NULL, <br>                                CREATE_NEW, <br>                                FILE_ATTRIBUTE_NORMAL, <br>                                NULL <br>                              ); <br>            if (hFile == INVALID_HANDLE_VALUE) { <br>                if (fVisual) { <br>                    NonFatalError( LoadRcString(IDS_INVALID_LOGFILE) ); <br>                    _getcwd( szFileName, MAX_PATH ); <br>                    if (!BrowseForDirectory( szFileName )) { <br>                        FatalError( LoadRcString(IDS_CANT_OPEN_LOGFILE) ); <br>                    } <br>                    MakeLogFileName( szFileName ); <br>                    goto openagain; <br>                } <br>                else { <br>                    ExitProcess( 1 ); <br>                } <br>            } <br> <br>            // <br>            // write the file banner <br>            // <br>            lprintfs( "\r\n" ); <br>            lprintf( MSG_BANNER ); <br>            lprintfs( "\r\n" ); <br>        } <br> <br>        SetFilePointer( hFile, 0, 0, FILE_END ); <br>    } <br>    else { <br>        // <br>        // write the file banner <br>        // <br>        lprintfs( "\r\n" ); <br>        lprintf( MSG_BANNER ); <br>        lprintfs( "\r\n" ); <br>    } <br> <br>    Assert( hFile != INVALID_HANDLE_VALUE ); <br> <br>    dwStartingPos = SetFilePointer( hFile, 0, NULL, FILE_CURRENT ); <br> <br>    return; <br>} <br> <br>void <br>CloseLogFile( void ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    Closes the DrWatson logfile &amp; releases the semaphore that <br>    protects it. <br> <br>Arguments: <br> <br>    None. <br> <br>Return Value: <br> <br>    None. <br> <br>--*/ <br> <br>{ <br>    CloseHandle( hFile ); <br>    ReleaseSemaphore( hLogProtect, 1, NULL ); <br>    CloseHandle( hLogProtect ); <br>} <br> <br>char * <br>GetLogFileData( PDWORD pdwLogFileDataSize ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    Reads in all of the logfile data that has been written since it was <br>    opened.  The data is placed into a buffer allocated by this function. <br>    The caller is responsible for freeing the memory. <br> <br>Arguments: <br> <br>    pdwLogFileDataSize     -  pointer to a dword that contains the size <br>                              in bytes of the data that is read. <br> <br>Return Value: <br> <br>    Valid character pointer to the logfile data <br> <br>    NULL - could not read the data. <br> <br>--*/ <br> <br>{ <br>    DWORD   dwCurrPos; <br>    char    *p; <br>    DWORD   size; <br> <br> <br>    dwCurrPos = SetFilePointer( hFile, 0, NULL, FILE_CURRENT ); <br> <br>    *pdwLogFileDataSize = 0; <br>    size = dwCurrPos - dwStartingPos; <br> <br>    p = (char *) malloc( size ); <br>    if (p == NULL) { <br>        return NULL; <br>    } <br> <br>    SetFilePointer( hFile, dwStartingPos, NULL, FILE_BEGIN ); <br> <br>    if (!ReadFile( hFile, p, size, &amp;size, NULL )) { <br>        free( p ); <br>        p = NULL; <br>        size = 0; <br>    } <br> <br>    SetFilePointer( hFile, dwCurrPos, NULL, FILE_BEGIN ); <br> <br>    *pdwLogFileDataSize = size; <br> <br>    return p; <br>} <br> <br>void <br>MakeLogFileName( char *szName ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    Concatinates the base logfile name on to the string passed in. <br> <br>Arguments: <br> <br>    szName                 -  buffer for the logfile name. <br> <br>Return Value: <br> <br>    None. <br> <br>--*/ <br> <br>{ <br>    strcat( szName, "\\drwtsn32.log" ); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

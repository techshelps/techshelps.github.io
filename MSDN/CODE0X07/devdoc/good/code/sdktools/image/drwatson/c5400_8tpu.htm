<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BROWSE.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5412"></a>BROWSE.C</h2>
<pre><code>/*++ <br> <br>Copyright (c) 1993  Microsoft Corporation <br> <br>Module Name: <br> <br>    browse.c <br> <br>Abstract: <br>    This file implements the functions that make use of the common <br>    file open dialogs for browsing for files/directories. <br> <br>Author: <br> <br>    Wesley Witt (wesw) 1-May-1993 <br> <br>Environment: <br> <br>    User Mode <br> <br>--*/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;commdlg.h&gt; <br>#include &lt;mmsystem.h&gt; <br>#include &lt;direct.h&gt; <br> <br>#include "drwatson.h" <br>#include "proto.h" <br>#include "resource.h" <br> <br> <br>static char   szHelpFileName[MAX_PATH]; <br>static char   szLastWaveFile[MAX_PATH]; <br>static char   szLastDumpFile[MAX_PATH]; <br> <br> <br> <br>LRESULT PASCAL <br>BrowseHookProc( HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    Hook procedure for directory browse common file dialog.  This hook <br>    procedure is required to provide help, put the window in the <br>    foreground, and set the edit so that the common file dialog dll <br>    thinks the user entered a value. <br> <br>Arguments: <br> <br>    hwnd       - window handle to the dialog box <br>    message    - message number <br>    wParam     - first message parameter <br>    lParam     - second message parameter <br> <br>Return Value: <br> <br>    TRUE       - did not process the message <br>    FALSE      - did process the message <br> <br>--*/ <br> <br>{ <br>    if (message==WM_INITDIALOG) { <br>        SetForegroundWindow( hwnd ); <br>    } <br>    else <br>    if (message==WM_PAINT) { <br>        SetDlgItemText( hwnd, edt1, "drwatson.log" ); <br>    } <br>    else <br>    if (message==WM_COMMAND &amp;&amp; wParam==psh15) { <br>        // <br>        // get the help file name <br>        // <br>        GetHelpFileName( szHelpFileName, sizeof( szHelpFileName ) ); <br> <br>        // <br>        // call winhelp <br>        // <br>        WinHelp( hwnd, szHelpFileName, HELP_FINDER, IDH_LOGFILELOCATION ); <br>    } <br>    return FALSE; <br>} <br> <br>BOOL <br>BrowseForDirectory( char *szCurrDir ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    Presents a common file open dialog that contains only the directory <br>    tree.  The use can select a directory for use as a storage location <br>    for the DRWTSN32 log file. <br> <br>Arguments: <br> <br>    szCurrDir  - current directory <br> <br>Return Value: <br> <br>    TRUE       - got a good directory (user pressed the OK button) <br>    FALSE      - got nothing (user pressed the CANCEL button) <br> <br>    the szCurrDir is also changed to have the selected directory. <br> <br>--*/ <br> <br>{ <br>    OPENFILENAME   of; <br>    char           ftitle     [MAX_PATH]; <br>    char           title      [MAX_PATH]; <br>    char           fname      [MAX_PATH]; <br>    char           szDrive    [_MAX_DRIVE]; <br>    char           szDir      [_MAX_DIR]; <br> <br>    ftitle[0] = 0; <br>    strcpy( fname, "*.*" ); <br>    of.lStructSize = sizeof( OPENFILENAME ); <br>    of.hwndOwner = NULL; <br>    of.hInstance = GetModuleHandle( NULL ); <br>    of.lpstrFilter = NULL; <br>    of.lpstrCustomFilter = NULL; <br>    of.nMaxCustFilter = 0; <br>    of.nFilterIndex = 0; <br>    of.lpstrFile = fname; <br>    of.nMaxFile = MAX_PATH; <br>    of.lpstrFileTitle = ftitle; <br>    of.nMaxFileTitle = MAX_PATH; <br>    of.lpstrInitialDir = szCurrDir; <br>    strcpy( title, LoadRcString( IDS_LOGBROWSE_TITLE ) ); <br>    of.lpstrTitle = title; <br>    of.Flags = OFN_NONETWORKBUTTON | <br>               OFN_ENABLEHOOK      | <br>               OFN_NOCHANGEDIR     | <br>               OFN_SHOWHELP        | <br>               OFN_ENABLETEMPLATE; <br>    of.nFileOffset = 0; <br>    of.nFileExtension = 0; <br>    of.lpstrDefExt = NULL; <br>    of.lCustData = 0; <br>    of.lpfnHook = BrowseHookProc; <br>    of.lpTemplateName = MAKEINTRESOURCE(DIRBROWSEDIALOG); <br>    if (GetSaveFileName( &amp;of )) { <br>        _splitpath( fname, szDrive, szDir, NULL, NULL ); <br>        strcpy( szCurrDir, szDrive ); <br>        strcat( szCurrDir, szDir ); <br>        szCurrDir[strlen(szCurrDir)-1] = '\0'; <br>        return TRUE; <br>    } <br>    return FALSE; <br>} <br> <br>LRESULT PASCAL <br>WaveHookProc( HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    Hook procedure for wave file selection common file dialog.  This hook <br>    procedure is required to provide help, put the window in the <br>    foreground, and provide a test button for listening to a wave file. <br> <br>Arguments: <br> <br>    hwnd       - window handle to the dialog box <br>    message    - message number <br>    wParam     - first message parameter <br>    lParam     - second message parameter <br> <br>Return Value: <br> <br>    TRUE       - did not process the message <br>    FALSE      - did process the message <br> <br>--*/ <br> <br>{ <br>    char szWave[MAX_PATH]; <br> <br>    if (message==WM_INITDIALOG) { <br>        SetForegroundWindow( hwnd ); <br>    } <br>    else <br>    if (message == WM_COMMAND) { <br>        switch (wParam) { <br>            case ID_TEST_WAVE: <br>                GetDlgItemText( hwnd, edt1, szWave, sizeof(szWave) ); <br>                PlaySound( szWave, NULL, SND_FILENAME ); <br>                break; <br> <br>            case psh15: <br>                // <br>                // get the help file name <br>                // <br>                GetHelpFileName( szHelpFileName, sizeof( szHelpFileName ) ); <br> <br>                // <br>                // call winhelp <br>                // <br>                WinHelp( hwnd, szHelpFileName, HELP_FINDER, IDH_WAVEFILE ); <br>                break; <br>        } <br>    } <br> <br>    return FALSE; <br>} <br> <br>BOOL <br>GetWaveFileName( char *szWaveName ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    Presents a common file open dialog for the purpose of selecting a <br>    wave file to be played when an application error occurs. <br> <br>Arguments: <br> <br>    szWaveName - name of the selected wave file <br> <br>Return Value: <br> <br>    TRUE       - got a good wave file name (user pressed the OK button) <br>    FALSE      - got nothing (user pressed the CANCEL button) <br> <br>    the szWaveName is changed to have the selected wave file name. <br> <br>--*/ <br> <br>{ <br>    OPENFILENAME   of; <br>    char           ftitle[MAX_PATH]; <br>    char           title[MAX_PATH]; <br>    char           fname[MAX_PATH]; <br>    char           filter[1024]; <br>    char           szDrive    [_MAX_DRIVE]; <br>    char           szDir      [_MAX_DIR]; <br> <br>    ftitle[0] = 0; <br>    strcpy( fname, "*.wav" ); <br>    of.lStructSize = sizeof( OPENFILENAME ); <br>    of.hwndOwner = NULL; <br>    of.hInstance = GetModuleHandle( NULL ); <br>    strcpy( filter, LoadRcString( IDS_WAVE_FILTER ) ); <br>    strcpy( &amp;filter[strlen(filter)+1], "*.wav" ); <br>    filter[strlen(filter)+1] = '\0'; <br>    of.lpstrFilter = filter; <br>    of.lpstrCustomFilter = NULL; <br>    of.nMaxCustFilter = 0; <br>    of.nFilterIndex = 0; <br>    of.lpstrFile = fname; <br>    of.nMaxFile = MAX_PATH; <br>    of.lpstrFileTitle = ftitle; <br>    of.nMaxFileTitle = MAX_PATH; <br>    of.lpstrInitialDir = szLastWaveFile; <br>    strcpy( title, LoadRcString( IDS_WAVEBROWSE_TITLE ) ); <br>    of.lpstrTitle = title; <br>    of.Flags = OFN_NONETWORKBUTTON | <br>               OFN_ENABLEHOOK      | <br>               OFN_ENABLETEMPLATE  | <br>               OFN_SHOWHELP        | <br>               OFN_NOCHANGEDIR; <br>    of.nFileOffset = 0; <br>    of.nFileExtension = 0; <br>    of.lpstrDefExt = "wav"; <br>    of.lCustData = 0; <br>    of.lpfnHook = WaveHookProc; <br>    of.lpTemplateName = MAKEINTRESOURCE(WAVEFILEOPENDIALOG); <br>    if (GetOpenFileName( &amp;of )) { <br>        strcpy( szWaveName, fname ); <br>        _splitpath( fname, szDrive, szDir, NULL, NULL ); <br>        strcpy( szLastWaveFile, szDrive ); <br>        strcat( szLastWaveFile, szDir ); <br>        return TRUE; <br>    } <br>    return FALSE; <br>} <br> <br>LRESULT PASCAL <br>DumpHookProc( HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    Hook procedure for wave file selection common file dialog.  This hook <br>    procedure is required to provide help, put the window in the <br>    foreground, and provide a test button for listening to a wave file. <br> <br>Arguments: <br> <br>    hwnd       - window handle to the dialog box <br>    message    - message number <br>    wParam     - first message parameter <br>    lParam     - second message parameter <br> <br>Return Value: <br> <br>    TRUE       - did not process the message <br>    FALSE      - did process the message <br> <br>--*/ <br> <br>{ <br>    if (message == WM_INITDIALOG) { <br>        SetForegroundWindow( hwnd ); <br>    } <br>    else <br>    if (message == WM_COMMAND) { <br>        switch (wParam) { <br>            case psh15: <br>                // <br>                // get the help file name <br>                // <br>                GetHelpFileName( szHelpFileName, sizeof( szHelpFileName ) ); <br> <br>                // <br>                // call winhelp <br>                // <br>                WinHelp( hwnd, szHelpFileName, HELP_FINDER, IDH_CRASH_DUMP ); <br>                break; <br>        } <br>    } <br> <br>    return FALSE; <br>} <br> <br>BOOL <br>GetDumpFileName( char *szDumpName ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    Presents a common file open dialog for the purpose of selecting a <br>    wave file to be played when an application error occurs. <br> <br>Arguments: <br> <br>    szWaveName - name of the selected wave file <br> <br>Return Value: <br> <br>    TRUE       - got a good wave file name (user pressed the OK button) <br>    FALSE      - got nothing (user pressed the CANCEL button) <br> <br>    the szWaveName is changed to have the selected wave file name. <br> <br>--*/ <br> <br>{ <br>    OPENFILENAME   of; <br>    char           ftitle[MAX_PATH]; <br>    char           title[MAX_PATH]; <br>    char           fname[MAX_PATH]; <br>    char           filter[1024]; <br>    char           szDrive    [_MAX_DRIVE]; <br>    char           szDir      [_MAX_DIR]; <br> <br>    ftitle[0] = 0; <br>    strcpy( fname, "*.dmp" ); <br>    of.lStructSize = sizeof( OPENFILENAME ); <br>    of.hwndOwner = NULL; <br>    of.hInstance = GetModuleHandle( NULL ); <br>    strcpy( filter, LoadRcString( IDS_DUMP_FILTER ) ); <br>    strcpy( &amp;filter[strlen(filter)+1], "*.dmp" ); <br>    filter[strlen(filter)+1] = '\0'; <br>    of.lpstrFilter = filter; <br>    of.lpstrCustomFilter = NULL; <br>    of.nMaxCustFilter = 0; <br>    of.nFilterIndex = 0; <br>    of.lpstrFile = fname; <br>    of.nMaxFile = MAX_PATH; <br>    of.lpstrFileTitle = ftitle; <br>    of.nMaxFileTitle = MAX_PATH; <br>    of.lpstrInitialDir = szLastDumpFile; <br>    strcpy( title, LoadRcString( IDS_DUMPBROWSE_TITLE ) ); <br>    of.lpstrTitle = title; <br>    of.Flags = OFN_NONETWORKBUTTON | <br>               OFN_ENABLEHOOK      | <br>               OFN_ENABLETEMPLATE  | <br>               OFN_SHOWHELP        | <br>               OFN_NOCHANGEDIR; <br>    of.nFileOffset = 0; <br>    of.nFileExtension = 0; <br>    of.lpstrDefExt = "dmp"; <br>    of.lCustData = 0; <br>    of.lpfnHook = DumpHookProc; <br>    of.lpTemplateName = MAKEINTRESOURCE(DUMPFILEOPENDIALOG); <br>    if (GetOpenFileName( &amp;of )) { <br>        strcpy( szDumpName, fname ); <br>        _splitpath( fname, szDrive, szDir, NULL, NULL ); <br>        strcpy( szLastDumpFile, szDrive ); <br>        strcat( szLastDumpFile, szDir ); <br>        return TRUE; <br>    } <br>    return FALSE; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

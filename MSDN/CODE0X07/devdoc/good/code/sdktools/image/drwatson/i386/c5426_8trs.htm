<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DISASM.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5428"></a>DISASM.H</h2>
<pre><code>/********************************** module *********************************/ <br>/*                                                                         */ <br>/*                                 disasmtb                                */ <br>/*                           disassembler for CodeView                     */ <br>/*                                                                         */ <br>/***************************************************************************/ <br>/*                                                                         */ <br>/*    @ Purpose:                                                           */ <br>/*                                                                         */ <br>/*    @ Functions included:                                                */ <br>/*                                                                         */ <br>/*                                                                         */ <br>/*    @ Author: Gerd Immeyer              @ Version:                       */ <br>/*                                                                         */ <br>/*    @ Creation Date: 10.19.89           @ Modification Date:             */ <br>/*                                                                         */ <br>/***************************************************************************/ <br> <br> <br> <br>/* Strings: Operand mnemonics, Segment overrides, etc. for disasm          */ <br> <br>char dszAAA[]       = "aaa"; <br>char dszAAD[]       = "aad"; <br>char dszAAM[]       = "aam"; <br>char dszAAS[]       = "aas"; <br>char dszADC[]       = "adc"; <br>char dszADD[]       = "add"; <br>char dszADDRPRFX[]  = ""; <br>char dszAND[]       = "and"; <br>char dszARPL[]      = "arpl"; <br>char dszBOUND[]     = "bound"; <br>char dszBSF[]       = "bsf"; <br>char dszBSR[]       = "bsr"; <br>char dszBST[]       = "bst"; <br>char dszBSWAP[]     = "bswap"; <br>char dszBT[]        = "bt"; <br>char dszBTC[]       = "btc"; <br>char dszBTR[]       = "btr"; <br>char dszBTS[]       = "bts"; <br>char dszCALL[]      = "call"; <br>char dszCBW[]       = "cbw"; <br>char dszCDQ[]       = "cdq"; <br>char dszCLC[]       = "clc"; <br>char dszCLD[]       = "cld"; <br>char dszCLI[]       = "cli"; <br>char dszCLTS[]      = "clts"; <br>char dszCMC[]       = "cmc"; <br>char dszCMP[]       = "cmp"; <br>char dszCMPS[]      = "cmps"; <br>char dszCMPSB[]     = "cmpsb"; <br>char dszCMPSD[]     = "cmpsd"; <br>char dszCMPSW[]     = "cmpsw"; <br>char dszCMPXCHG[]   = "cmpxchg"; <br>char dszCMPXCHG8B[] = "cmpxchg8b"; <br>char dszCPUID[]     = "cpuid"; <br>char dszCS_[]       = "cs:"; <br>char dszCWD[]       = "cwd"; <br>char dszCWDE[]      = "cwde"; <br>char dszDAA[]       = "daa"; <br>char dszDAS[]       = "das"; <br>char dszDEC[]       = "dec"; <br>char dszDIV[]       = "div"; <br>char dszDS_[]       = "ds:"; <br>char dszENTER[]     = "enter"; <br>char dszES_[]       = "es:"; <br>char dszF2XM1[]     = "f2xm1"; <br>char dszFABS[]      = "fabs"; <br>char dszFADD[]      = "fadd"; <br>char dszFADDP[]     = "faddp"; <br>char dszFBLD[]      = "fbld"; <br>char dszFBSTP[]     = "fbstp"; <br>char dszFCHS[]      = "fchs"; <br>char dszFCLEX[]     = "fclex"; <br>char dszFCOM[]      = "fcom"; <br>char dszFCOMP[]     = "fcomp"; <br>char dszFCOMPP[]    = "fcompp"; <br>char dszFCOS[]      = "fcos"; <br>char dszFDECSTP[]   = "fdecstp"; <br>char dszFDISI[]     = "fdisi"; <br>char dszFDIV[]      = "fdiv"; <br>char dszFDIVP[]     = "fdivp"; <br>char dszFDIVR[]     = "fdivr"; <br>char dszFDIVRP[]    = "fdivrp"; <br>char dszFENI[]      = "feni"; <br>char dszFFREE[]     = "ffree"; <br>char dszFIADD[]     = "fiadd"; <br>char dszFICOM[]     = "ficom"; <br>char dszFICOMP[]    = "ficomp"; <br>char dszFIDIV[]     = "fidiv"; <br>char dszFIDIVR[]    = "fidivr"; <br>char dszFILD[]      = "fild"; <br>char dszFIMUL[]     = "fimul"; <br>char dszFINCSTP[]   = "fincstp"; <br>char dszFINIT[]     = "finit"; <br>char dszFIST[]      = "fist"; <br>char dszFISTP[]     = "fistp"; <br>char dszFISUB[]     = "fisub"; <br>char dszFISUBR[]    = "fisubr"; <br>char dszFLD[]       = "fld"; <br>char dszFLD1[]      = "fld1"; <br>char dszFLDCW[]     = "fldcw"; <br>char dszFLDENV[]    = "fldenv"; <br>char dszFLDL2E[]    = "fldl2e"; <br>char dszFLDL2T[]    = "fldl2t"; <br>char dszFLDLG2[]    = "fldlg2"; <br>char dszFLDLN2[]    = "fldln2"; <br>char dszFLDPI[]     = "fldpi"; <br>char dszFLDZ[]      = "fldz"; <br>char dszFMUL[]      = "fmul"; <br>char dszFMULP[]     = "fmulp"; <br>char dszFNCLEX[]    = "fnclex"; <br>char dszFNDISI[]    = "fndisi"; <br>char dszFNENI[]     = "fneni"; <br>char dszFNINIT[]    = "fninit"; <br>char dszFNOP[]      = "fnop"; <br>char dszFNSAVE[]    = "fnsave"; <br>char dszFNSTCW[]    = "fnstcw"; <br>char dszFNSTENV[]   = "fnstenv"; <br>char dszFNSTSW[]    = "fnstsw"; <br>char dszFNSTSWAX[]  = "fnstswax"; <br>char dszFPATAN[]    = "fpatan"; <br>char dszFPREM[]     = "fprem"; <br>char dszFPREM1[]    = "fprem1"; <br>char dszFPTAN[]     = "fptan"; <br>char dszFRNDINT[]   = "frndint"; <br>char dszFRSTOR[]    = "frstor"; <br>char dszFSAVE[]     = "fsave"; <br>char dszFSCALE[]    = "fscale"; <br>char dszFSETPM[]    = "fsetpm"; <br>char dszFSIN[]      = "fsin"; <br>char dszFSINCOS[]   = "fsincos"; <br>char dszFSQRT[]     = "fsqrt"; <br>char dszFST[]       = "fst"; <br>char dszFSTCW[]     = "fstcw"; <br>char dszFSTENV[]    = "fstenv"; <br>char dszFSTP[]      = "fstp"; <br>char dszFSTSW[]     = "fstsw"; <br>char dszFSTSWAX[]   = "fstswax"; <br>char dszFSUB[]      = "fsub"; <br>char dszFSUBP[]     = "fsubp"; <br>char dszFSUBR[]     = "fsubr"; <br>char dszFSUBRP[]    = "fsubrp"; <br>char dszFS_[]       = "fs:"; <br>char dszFTST[]      = "ftst"; <br>char dszFUCOM[]     = "fucom"; <br>char dszFUCOMP[]    = "fucomp"; <br>char dszFUCOMPP[]   = "fucompp"; <br>char dszFWAIT[]     = "fwait"; <br>char dszFXAM[]      = "fxam"; <br>char dszFXCH[]      = "fxch"; <br>char dszFXTRACT[]   = "fxtract"; <br>char dszFYL2X[]     = "fyl2x"; <br>char dszFYL2XP1[]   = "fyl2xp1"; <br>char dszGS_[]       = "gs:"; <br>char dszHLT[]       = "hlt"; <br>char dszIBTS[]      = "ibts"; <br>char dszIDIV[]      = "idiv"; <br>char dszIMUL[]      = "imul"; <br>char dszIN[]        = "in"; <br>char dszINC[]       = "inc"; <br>char dszINS[]       = "ins"; <br>char dszINSB[]      = "insb"; <br>char dszINSD[]      = "insd"; <br>char dszINSW[]      = "insw"; <br>char dszINT[]       = "int"; <br>char dszINTO[]      = "into"; <br>char dszIRET[]      = "iret"; <br>char dszIRETD[]     = "iretd"; <br>char dszJA[]        = "ja"; <br>char dszJAE[]       = "jae"; <br>char dszJB[]        = "jb"; <br>char dszJBE[]       = "jbe"; <br>char dszJC[]        = "jc"; <br>char dszJCXZ[]      = "jcxz"; <br>char dszJE[]        = "je"; <br>char dszJECXZ[]     = "jecxz"; <br>char dszJG[]        = "jg"; <br>char dszJGE[]       = "jge"; <br>char dszJL[]        = "jl"; <br>char dszJLE[]       = "jle"; <br>char dszJMP[]       = "jmp"; <br>char dszJNA[]       = "jna"; <br>char dszJNAE[]      = "jnae"; <br>char dszJNB[]       = "jnb"; <br>char dszJNBE[]      = "jnbe"; <br>char dszJNC[]       = "jnc"; <br>char dszJNE[]       = "jne"; <br>char dszJNG[]       = "jng"; <br>char dszJNGE[]      = "jnge"; <br>char dszJNL[]       = "jnl"; <br>char dszJNLE[]      = "jnle"; <br>char dszJNO[]       = "jno"; <br>char dszJNP[]       = "jnp"; <br>char dszJNS[]       = "jns"; <br>char dszJNZ[]       = "jnz"; <br>char dszJO[]        = "jo"; <br>char dszJP[]        = "jp"; <br>char dszJPE[]       = "jpe"; <br>char dszJPO[]       = "jpo"; <br>char dszJS[]        = "js"; <br>char dszJZ[]        = "jz"; <br>char dszLAHF[]      = "lahf"; <br>char dszLAR[]       = "lar"; <br>char dszLDS[]       = "lds"; <br>char dszLEA[]       = "lea"; <br>char dszLEAVE[]     = "leave"; <br>char dszLES[]       = "les"; <br>char dszLFS[]       = "lfs"; <br>char dszLGDT[]      = "lgdt"; <br>char dszLGS[]       = "lgs"; <br>char dszLIDT[]      = "lidt"; <br>char dszLLDT[]      = "lldt"; <br>char dszLMSW[]      = "lmsw"; <br>char dszLOADALL[]   = "loadall"; <br>char dszLOCK[]      = "lock"; <br>char dszLODS[]      = "lods"; <br>char dszLODSB[]     = "lodsb"; <br>char dszLODSD[]     = "lodsd"; <br>char dszLODSW[]     = "lodsw"; <br>char dszLOOP[]      = "loop"; <br>char dszLOOPE[]     = "loope"; <br>char dszLOOPNE[]    = "loopne"; <br>char dszLOOPNZ[]    = "loopnz"; <br>char dszLOOPZ[]     = "loopz"; <br>char dszLSL[]       = "lsl"; <br>char dszLSS[]       = "lss"; <br>char dszLTR[]       = "ltr"; <br>char dszMOV[]       = "mov"; <br>char dszMOVS[]      = "movs"; <br>char dszMOVSB[]     = "movsb"; <br>char dszMOVSD[]     = "movsd"; <br>char dszMOVSW[]     = "movsw"; <br>char dszMOVSX[]     = "movsx"; <br>char dszMOVZX[]     = "movzx"; <br>char dszMUL[]       = "mul"; <br>char dszNEG[]       = "neg"; <br>char dszNOP[]       = "nop"; <br>char dszNOT[]       = "not"; <br>char dszOPPRFX[]    = ""; <br>char dszOR[]        = "or"; <br>char dszOUT[]       = "out"; <br>char dszOUTS[]      = "outs"; <br>char dszOUTSB[]     = "outsb"; <br>char dszOUTSD[]     = "outsd"; <br>char dszOUTSW[]     = "outsw"; <br>char dszPOP[]       = "pop"; <br>char dszPOPA[]      = "popa"; <br>char dszPOPAD[]     = "popad"; <br>char dszPOPF[]      = "popf"; <br>char dszPOPFD[]     = "popfd"; <br>char dszPUSH[]      = "push"; <br>char dszPUSHA[]     = "pusha"; <br>char dszPUSHAD[]    = "pushad"; <br>char dszPUSHF[]     = "pushf"; <br>char dszPUSHFD[]    = "pushfd"; <br>char dszRCL[]       = "rcl"; <br>char dszRCR[]       = "rcr"; <br>char dszRDTSC[]     = "rdtsc"; <br>char dszRDMSR[]     = "rdmsr"; <br>char dszREP[]       = "rep "; <br>char dszREPE[]      = "repe"; <br>char dszREPNE[]     = "repne "; <br>char dszREPNZ[]     = "repnz"; <br>char dszREPZ[]      = "repz"; <br>char dszRET[]       = "ret"; <br>char dszRETF[]      = "retf"; <br>char dszRETN[]      = "retn"; <br>char dszROL[]       = "rol"; <br>char dszROR[]       = "ror"; <br>char dszRSM[]       = "rsm"; <br>char dszSAHF[]      = "sahf"; <br>char dszSAL[]       = "sal"; <br>char dszSAR[]       = "sar"; <br>char dszSBB[]       = "sbb"; <br>char dszSCAS[]      = "scas"; <br>char dszSCASB[]     = "scasb"; <br>char dszSCASD[]     = "scasd"; <br>char dszSCASW[]     = "scasw"; <br>char dszSETA[]      = "seta"; <br>char dszSETAE[]     = "setae"; <br>char dszSETB[]      = "setb"; <br>char dszSETBE[]     = "setbe"; <br>char dszSETC[]      = "setc"; <br>char dszSETE[]      = "sete"; <br>char dszSETG[]      = "setg"; <br>char dszSETGE[]     = "setge"; <br>char dszSETL[]      = "setl"; <br>char dszSETLE[]     = "setle"; <br>char dszSETNA[]     = "setna"; <br>char dszSETNAE[]    = "setnae"; <br>char dszSETNB[]     = "setnb"; <br>char dszSETNBE[]    = "setnbe"; <br>char dszSETNC[]     = "setnc"; <br>char dszSETNE[]     = "setne"; <br>char dszSETNG[]     = "setng"; <br>char dszSETNGE[]    = "setnge"; <br>char dszSETNL[]     = "setnl"; <br>char dszSETNLE[]    = "setnle"; <br>char dszSETNO[]     = "setno"; <br>char dszSETNP[]     = "setnp"; <br>char dszSETNS[]     = "setns"; <br>char dszSETNZ[]     = "setnz"; <br>char dszSETO[]      = "seto"; <br>char dszSETP[]      = "setp"; <br>char dszSETPE[]     = "setpe"; <br>char dszSETPO[]     = "setpo"; <br>char dszSETS[]      = "sets"; <br>char dszSETZ[]      = "setz"; <br>char dszSGDT[]      = "sgdt"; <br>char dszSHL[]       = "shl"; <br>char dszSHLD[]      = "shld"; <br>char dszSHR[]       = "shr"; <br>char dszSHRD[]      = "shrd"; <br>char dszSIDT[]      = "sidt"; <br>char dszSLDT[]      = "sldt"; <br>char dszSMSW[]      = "smsw"; <br>char dszSS_[]       = "ss:"; <br>char dszSTC[]       = "stc"; <br>char dszSTD[]       = "std"; <br>char dszSTI[]       = "sti"; <br>char dszSTOS[]      = "stos"; <br>char dszSTOSB[]     = "stosb"; <br>char dszSTOSD[]     = "stosd"; <br>char dszSTOSW[]     = "stosw"; <br>char dszSTR[]       = "str"; <br>char dszSUB[]       = "sub"; <br>char dszTEST[]      = "test"; <br>char dszVERR[]      = "verr"; <br>char dszVERW[]      = "verw"; <br>char dszWAIT[]      = "wait"; <br>char dszWRMSR[]     = "wrmsr"; <br>char dszXADD[]      = "xadd"; <br>char dszXBTS[]      = "xbts"; <br>char dszXCHG[]      = "xchg"; <br>char dszXLAT[]      = "xlat"; <br>char dszXOR[]       = "xor"; <br>char dszRESERVED[]  = "???"; <br>char dszMULTI[]     = ""; <br>char dszDB[]        = "db"; <br>  <br>#define MRM        0x40 <br>#define COM        0x80 <br>#define END        0xc0 <br> <br>/* Enumeration of valid actions that can be included in the action table */ <br> <br>enum oprtyp { ADDRP,  ADR_OVR, ALSTR,   ALT,     AXSTR,  BOREG, <br>              BREG,   BRSTR,   xBYTE,   CHR,     CREG,   xDWORD, <br>              EDWORD, EGROUPT, FARPTR,  GROUPP,  GROUPT, IB, <br>              IST,    IST_ST,  IV,      IW,      LMODRM, MODRM, <br>              NOP,    OFFS,    OPC0F,   OPR_OVR, QWORD,  REL16, <br>              REL8,   REP,     SEG_OVR, SREG2,   SREG3,  ST_IST, <br>              STROP,  TTBYTE,   UBYTE,   VAR,     VOREG,  VREG, <br>              xWORD,  WREG,    WRSTR <br>            }; <br> <br>/* Enumeration of indices into the action table for instruction classes */ <br> <br>#define O_DoDB          0 <br>#define O_NoOperands    0 <br>#define O_NoOpAlt5      O_NoOperands+1 <br>#define O_NoOpAlt4      O_NoOpAlt5+2 <br>#define O_NoOpAlt3      O_NoOpAlt4+2 <br>#define O_NoOpAlt1      O_NoOpAlt3+2 <br>#define O_NoOpAlt0      O_NoOpAlt1+2 <br>#define O_NoOpStrSI     O_NoOpAlt0+2 <br>#define O_NoOpStrDI     O_NoOpStrSI+2 <br>#define O_NoOpStrSIDI   O_NoOpStrDI+2 <br>#define O_bModrm_Reg    O_NoOpStrSIDI+2 <br>#define O_vModrm_Reg    O_bModrm_Reg+3 <br>#define O_Modrm_Reg     O_vModrm_Reg+3 <br>#define O_bReg_Modrm    O_Modrm_Reg+3 <br>#define O_fReg_Modrm    O_bReg_Modrm+3 <br>#define O_Reg_Modrm     O_fReg_Modrm+3 <br>#define O_AL_Ib         O_Reg_Modrm+3 <br>#define O_AX_Iv         O_AL_Ib+2 <br>#define O_sReg2         O_AX_Iv+2 <br>#define O_oReg          O_sReg2+1 <br>#define O_DoBound       O_oReg+1 <br>#define O_Iv            O_DoBound+3 <br>#define O_wModrm_Reg    O_Iv+1 <br>#define O_Ib            O_wModrm_Reg+3 <br>#define O_Imulb         O_Ib+1 <br>#define O_Imul          O_Imulb+4 <br>#define O_Rel8          O_Imul+4 <br>#define O_bModrm_Ib     O_Rel8+1 <br>#define O_Modrm_Ib      O_bModrm_Ib+3 <br>#define O_Modrm_Iv      O_Modrm_Ib+3 <br>#define O_Modrm_sReg3   O_Modrm_Iv+3 <br>#define O_sReg3_Modrm   O_Modrm_sReg3+3 <br>#define O_Modrm         O_sReg3_Modrm+3 <br>#define O_FarPtr        O_Modrm+2 <br>#define O_AL_Offs       O_FarPtr+1 <br>#define O_Offs_AL       O_AL_Offs+2 <br>#define O_AX_Offs       O_Offs_AL+2 <br>#define O_Offs_AX       O_AX_Offs+2 <br>#define O_oReg_Ib       O_Offs_AX+2 <br>#define O_oReg_Iv       O_oReg_Ib+2 <br>#define O_Iw            O_oReg_Iv+2 <br>#define O_Enter         O_Iw+1 <br>#define O_Ubyte_AL      O_Enter+2 <br>#define O_Ubyte_AX      O_Ubyte_AL+2 <br>#define O_AL_Ubyte      O_Ubyte_AX+2 <br>#define O_AX_Ubyte      O_AL_Ubyte+2 <br>#define O_DoInAL        O_AX_Ubyte+2 <br>#define O_DoInAX        O_DoInAL+3 <br>#define O_DoOutAL       O_DoInAX+3 <br>#define O_DoOutAX       O_DoOutAL+3 <br>#define O_Rel16         O_DoOutAX+3 <br>#define O_ADR_OVERRIDE  O_Rel16+1 <br>#define O_OPR_OVERRIDE  O_ADR_OVERRIDE+1 <br>#define O_SEG_OVERRIDE  O_OPR_OVERRIDE+1 <br>#define O_DoInt3        O_SEG_OVERRIDE+1 <br> <br>#if (O_DoInt3 != 115) <br>#error "operand table has been modified!" <br>#endif <br>/* #define O_DoInt      O_DoInt3+2 */ <br> <br>#define O_DoInt         117 <br>#define O_OPC0F         O_DoInt+1 <br>#define O_GROUP11       O_OPC0F+1 <br>#define O_GROUP13       O_GROUP11+5 <br>#define O_GROUP12       O_GROUP13+5 <br>#define O_GROUP21       O_GROUP12+5 <br>#define O_GROUP22       O_GROUP21+5 <br>#define O_GROUP23       O_GROUP22+5 <br>#define O_GROUP24       O_GROUP23+6 <br>#define O_GROUP25       O_GROUP24+6 <br>#define O_GROUP26       O_GROUP25+6 <br>#define O_GROUP4        O_GROUP26+6 <br>#define O_GROUP6        O_GROUP4+4 <br>#define O_GROUP8        O_GROUP6+4 <br>#define O_GROUP31       O_GROUP8+5 <br>#define O_GROUP32       O_GROUP31+3 <br>#define O_GROUP5        O_GROUP32+3 <br>#define O_GROUP7        O_GROUP5+3 <br>#define O_x87_ESC       O_GROUP7+3 <br>#define O_bModrm        O_x87_ESC+2 <br>#define O_wModrm        O_bModrm+2 <br>#define O_dModrm        O_wModrm+2 <br>#define O_fModrm        O_dModrm+2 <br>#define O_vModrm        O_fModrm+2 <br>#define O_vModrm_Iv     O_vModrm+2 <br>#define O_Reg_bModrm    O_vModrm_Iv+3 <br>#define O_Reg_wModrm    O_Reg_bModrm+3 <br>#define O_Modrm_Reg_Ib  O_Reg_wModrm+3 <br>#define O_Modrm_Reg_CL  O_Modrm_Reg_Ib+4 <br>#define O_ST_iST        O_Modrm_Reg_CL+5 <br>#define O_iST           O_ST_iST+2 <br>#define O_iST_ST        O_iST+2 <br>#define O_qModrm        O_iST_ST+2 <br>#define O_tModrm        O_qModrm+2 <br>#define O_DoRep         O_tModrm+2 <br>#define O_Modrm_CReg    O_DoRep+1 <br>#define O_CReg_Modrm    O_Modrm_CReg+3 <br>#define O_AX_oReg       O_CReg_Modrm+3 <br>#define O_length        O_AX_oReg+3 <br> <br>#if( O_length &gt; 255 ) <br>#error "operand table too large!" <br>#endif <br> <br>  <br>/* The action table: range of lists of actions to be taken for each possible */ <br>/*   instruction class.                                                      */ <br> <br>static unsigned char actiontbl[] = { <br>/* NoOperands  */ NOP+END, <br>/* NoOpAlt5    */ ALT+END,   5, <br>/* NoOpAlt4    */ ALT+END,   4, <br>/* NoOpAlt3    */ ALT+END,   3, <br>/* NoOpAlt1    */ ALT+END,   1, <br>/* NoOpAlt0    */ ALT+END,   0, <br>/* NoOpStrSI   */ STROP+END, 1, <br>/* NoOpStrDI   */ STROP+END, 2, <br>/* NoOpStrSIDI */ STROP+END, 3, <br>/* bModrm_Reg  */ xBYTE+MRM, MODRM+COM,  BREG+END, <br>/* vModrm_Reg  */ VAR+MRM,   LMODRM+COM, BREG+END, <br>/* Modrm_Reg   */ VAR+MRM,   MODRM+COM,  VREG+END, <br>/* bReg_Modrm  */ xBYTE+MRM, BREG+COM,   MODRM+END, <br>/* fReg_Modrm  */ FARPTR+MRM,VREG+COM,   MODRM+END, <br>/* Reg_Modrm   */ VAR+MRM,   VREG+COM,   MODRM+END, <br>/* AL_Ib       */ ALSTR+COM, IB+END, <br>/* AX_Iv       */ AXSTR+COM, IV+END, <br>/* sReg2       */ SREG2+END, <br>/* oReg        */ VOREG+END, <br>/* DoBound     */ VAR+MRM,   VREG+COM,   MODRM+END, <br>/* Iv          */ IV+END, <br>/* wModrm_Reg  */ xWORD+MRM, LMODRM+COM, WREG+END, <br>/* Ib          */ IB+END, <br>/* Imulb       */ VAR+MRM,   VREG+COM,   MODRM+COM, IB+END, <br>/* Imul        */ VAR+MRM,   VREG+COM,   MODRM+COM, IV+END, <br>/* REL8        */ REL8+END, <br>/* bModrm_Ib   */ xBYTE+MRM, LMODRM+COM, IB+END, <br>/* Modrm_Ib    */ VAR+MRM,   LMODRM+COM, IB+END, <br>/* Modrm_Iv    */ VAR+MRM,   LMODRM+COM, IV+END, <br>/* Modrm_sReg3 */ xWORD+MRM, MODRM+COM,  SREG3+END, <br>/* sReg3_Modrm */ xWORD+MRM, SREG3+COM,  MODRM+END, <br>/* Modrm       */ VAR+MRM,   MODRM+END, <br>/* FarPtr      */ ADDRP+END, <br>/* AL_Offs     */ ALSTR+COM, OFFS+END, <br>/* Offs_AL     */ OFFS+COM,  ALSTR+END, <br>/* AX_Offs     */ AXSTR+COM, OFFS+END, <br>/* Offs_AX     */ OFFS+COM,  AXSTR+END, <br>/* oReg_Ib     */ BOREG+COM, IB+END, <br>/* oReg_Iv     */ VOREG+COM, IV+END, <br>/* Iw          */ IW+END, <br>/* enter       */ IW+COM,    IB+END, <br>/* Ubyte_AL    */ UBYTE+COM, ALSTR+END, <br>/* Ubyte_AX    */ UBYTE+COM, AXSTR+END, <br>/* AL_Ubyte    */ ALSTR+COM, UBYTE+END, <br>/* AX_Ubyte    */ AXSTR+COM, UBYTE+END, <br>/* DoInAL      */ ALSTR+COM, WRSTR+END,  2, <br>/* DoInAX      */ AXSTR+COM, WRSTR+END,  2, <br>/* DoOutAL     */ WRSTR+COM, 2,          ALSTR+END, <br>/* DoOutAX     */ WRSTR+COM, 2,          AXSTR+END, <br>/* REL16       */ REL16+END, <br>/* ADR_OVERRIDE*/ ADR_OVR, <br>/* OPR_OVERRIDE*/ OPR_OVR, <br>/* SEG_OVERRIDE*/ SEG_OVR, <br>/* DoInt3      */ CHR+END,   '3', <br>/* DoInt       */ UBYTE+END, <br>/* Opcode0F    */ OPC0F, <br>/* group1_1    */ xBYTE+MRM, GROUPP,      0,         LMODRM+COM, IB+END, <br>/* group1_3    */ VAR+MRM,   GROUPP,      0,         LMODRM+COM, IB+END, <br>/* group1_2    */ VAR+MRM,   GROUPP,      0,         LMODRM+COM, IV+END, <br>/* group2_1    */ xBYTE+MRM, GROUPP,      1,         LMODRM+COM, IB+END, <br>/* group2_2    */ VAR+MRM,   GROUPP,      1,         LMODRM+COM, IB+END, <br>/* group2_3    */ xBYTE+MRM, GROUPP,      1,         LMODRM+COM, CHR+END, '1', <br>/* group2_4    */ VAR+MRM,   GROUPP,      1,         LMODRM+COM, CHR+END, '1', <br>/* group2_5    */ xBYTE+MRM, GROUPP,      1,         LMODRM+COM, BRSTR+END, 1, <br>/* group2_6    */ VAR+MRM,   GROUPP,      1,         LMODRM+COM, BRSTR+END, 1, <br>/* group4      */ xBYTE+MRM, GROUPP,      2,         LMODRM+END, <br>/* group6      */ xWORD+MRM, GROUPP,      3,         LMODRM+END, <br>/* group8      */ xWORD+MRM, GROUPP,      4,         LMODRM+COM, IB+END, <br>/* group3_1    */ xBYTE+MRM, GROUPT,     20, <br>/* group3_2    */ VAR+MRM,   GROUPT,     21, <br>/* group5      */ VAR+MRM,   GROUPT,     22, <br>/* group7      */ NOP+MRM,   GROUPT,     23, <br>/* x87_ESC     */ NOP+MRM,   EGROUPT, <br>/* bModrm      */ xBYTE+MRM, LMODRM+END, <br>/* wModrm      */ xWORD+MRM, LMODRM+END, <br>/* dModrm      */ xDWORD+MRM,LMODRM+END, <br>/* fModrm      */ FARPTR+MRM,LMODRM+END, <br>/* vModrm      */ VAR+MRM,   LMODRM+END, <br>/* vModrm_Iv   */ VAR+MRM,   LMODRM+COM, IV+END, <br>/* reg_bModrm  */ xBYTE+MRM, VREG+COM,   LMODRM+END, <br>/* reg_wModrm  */ xWORD+MRM, VREG+COM,   LMODRM+END, <br>/* Modrm_Reg_Ib*/ VAR+MRM,   MODRM+COM,  VREG+COM,   IB+END, <br>/* Modrm_Reg_CL*/ VAR+MRM,   MODRM+COM,  VREG+COM,   BRSTR+END, 1, <br>/* ST_iST      */ NOP+MRM,   ST_IST+END, <br>/* iST         */ NOP+MRM,   IST+END, <br>/* iST_ST      */ NOP+MRM,   IST_ST+END, <br>/* qModrm      */ QWORD+MRM, LMODRM+END, <br>/* tModrm      */ TTBYTE+MRM, LMODRM+END, <br>/* REP         */ REP, <br>/* Modrm_CReg  */ EDWORD+MRM,MODRM+COM,  CREG+END, <br>/* CReg_Modrm  */ EDWORD+MRM,CREG+COM,   MODRM+END, <br>/* AX_oReg     */ AXSTR+COM, VOREG+END <br>                  }; <br> <br>#if defined(_M_IX86) <br>#define BUILDING_ON_X86 1 <br>#else <br>#define BUILDING_ON_X86 0 <br>#endif <br> <br>#if BUILDING_ON_X86 == 1 <br>#pragma pack(1) <br>#endif <br> <br>typedef struct Tdistbl{ <br>    char *instruct; <br>    unsigned char opr; <br>    } Tdistbl; <br> <br>#if BUILDING_ON_X86 == 1 <br>#pragma pack() <br>#endif <br>  <br>/* List of ordered pairs for each instruction:                           */ <br>/*    (pointer to string literal mnemonic,                               */ <br>/*     instruction class index for action table)                         */ <br> <br>static Tdistbl distbl[] = { <br>    dszADD,   O_bModrm_Reg,             /* 00 ADD mem/reg, reg (byte)    */ <br>    dszADD,   O_Modrm_Reg,              /* 01 ADD mem/reg, reg (word)    */ <br>    dszADD,   O_bReg_Modrm,             /* 02 ADD reg, mem/reg (byte)    */ <br>    dszADD,   O_Reg_Modrm,              /* 03 ADD reg, mem/reg (word)    */ <br>    dszADD,   O_AL_Ib,                  /* 04 ADD AL, I                  */ <br>    dszADD,   O_AX_Iv,                  /* 05 ADD AX, I                  */ <br>    dszPUSH,  O_sReg2,                  /* 06 PUSH ES                    */ <br>    dszPOP,   O_sReg2,                  /* 07 POP ES                     */ <br>    dszOR,    O_bModrm_Reg,             /* 08 OR mem/reg, reg (byte)     */ <br>    dszOR,    O_Modrm_Reg,              /* 09 OR mem/reg, reg (word)     */ <br>    dszOR,    O_bReg_Modrm,             /* 0A OR reg, mem/reg (byte)     */ <br>    dszOR,    O_Reg_Modrm,              /* 0B OR reg, mem/reg (word)     */ <br>    dszOR,    O_AL_Ib,                  /* 0C OR AL, I                   */ <br>    dszOR,    O_AX_Iv,                  /* 0D OR AX, I                   */ <br>    dszPUSH,  O_sReg2,                  /* 0E PUSH CS                    */ <br>    dszMULTI, O_OPC0F,                  /* 0F CLTS &amp; protection ctl(286) */ <br>    dszADC,   O_bModrm_Reg,             /* 10 ADC mem/reg, reg (byte)    */ <br>    dszADC,   O_Modrm_Reg,              /* 11 ADC mem/reg, reg (word)    */ <br>    dszADC,   O_bReg_Modrm,             /* 12 ADC reg, mem/reg (byte)    */ <br>    dszADC,   O_Reg_Modrm,              /* 13 ADC reg, mem/reg (word)    */ <br>    dszADC,   O_AL_Ib,                  /* 14 ADC AL, I                  */ <br>    dszADC,   O_AX_Iv,                  /* 15 ADC AX, I                  */ <br>    dszPUSH,  O_sReg2,                  /* 16 PUSH SS                    */ <br>    dszPOP,   O_sReg2,                  /* 17 POP SS                     */ <br>    dszSBB,   O_bModrm_Reg,             /* 18 SBB mem/reg, reg (byte)    */ <br>    dszSBB,   O_Modrm_Reg,              /* 19 SBB mem/reg, reg (word)    */ <br>    dszSBB,   O_bReg_Modrm,             /* 1A SBB reg, mem/reg (byte)    */ <br>    dszSBB,   O_Reg_Modrm,              /* 1B SBB reg, mem/reg (word)    */ <br>    dszSBB,   O_AL_Ib,                  /* 1C SBB AL, I                  */ <br>    dszSBB,   O_AX_Iv,                  /* 1D SBB AX, I                  */ <br>    dszPUSH,  O_sReg2,                  /* 1E PUSH DS                    */ <br>    dszPOP,   O_sReg2,                  /* 1F POP DS                     */ <br>    dszAND,   O_bModrm_Reg,             /* 20 AND mem/reg, reg (byte)    */ <br>    dszAND,   O_Modrm_Reg,              /* 21 AND mem/reg, reg (word)    */ <br>    dszAND,   O_bReg_Modrm,             /* 22 AND reg, mem/reg (byte)    */ <br>    dszAND,   O_Reg_Modrm,              /* 23 AND reg, mem/reg (word)    */ <br>    dszAND,   O_AL_Ib,                  /* 24 AND AL, I                  */ <br>    dszAND,   O_AX_Iv,                  /* 25 AND AX, I                  */ <br>    dszES_,   O_SEG_OVERRIDE,           /* 26 SEG ES:                    */ <br>    dszDAA,   O_NoOperands,             /* 27 DAA                        */ <br>    dszSUB,   O_bModrm_Reg,             /* 28 SUB mem/reg, reg (byte)    */ <br>    dszSUB,   O_Modrm_Reg,              /* 29 SUB mem/reg, reg (word)    */ <br>    dszSUB,   O_bReg_Modrm,             /* 2A SUB reg, mem/reg (byte)    */ <br>    dszSUB,   O_Reg_Modrm,              /* 2B SUB reg, mem/reg (word)    */ <br>    dszSUB,   O_AL_Ib,                  /* 2C SUB AL, I                  */ <br>    dszSUB,   O_AX_Iv,                  /* 2D SUB AX, I                  */ <br>    dszCS_,   O_SEG_OVERRIDE,           /* 2E SEG CS:                    */ <br>    dszDAS,   O_NoOperands,             /* 2F DAS                        */ <br>    dszXOR,   O_bModrm_Reg,             /* 30 XOR mem/reg, reg (byte)    */ <br>    dszXOR,   O_Modrm_Reg,              /* 31 XOR mem/reg, reg (word)    */ <br>    dszXOR,   O_bReg_Modrm,             /* 32 XOR reg, mem/reg (byte)    */ <br>    dszXOR,   O_Reg_Modrm,              /* 33 XOR reg, mem/reg (word)    */ <br>    dszXOR,   O_AL_Ib,                  /* 34 XOR AL, I                  */ <br>    dszXOR,   O_AX_Iv,                  /* 35 XOR AX, I                  */ <br>    dszSS_,   O_SEG_OVERRIDE,           /* 36 SEG SS:                    */ <br>    dszAAA,   O_NoOperands,             /* 37 AAA                        */ <br>    dszCMP,   O_bModrm_Reg,             /* 38 CMP mem/reg, reg (byte)    */ <br>    dszCMP,   O_Modrm_Reg,              /* 39 CMP mem/reg, reg (word)    */ <br>    dszCMP,   O_bReg_Modrm,             /* 3A CMP reg, mem/reg (byte)    */ <br>    dszCMP,   O_Reg_Modrm,              /* 3B CMP reg, mem/reg (word)    */ <br>    dszCMP,   O_AL_Ib,                  /* 3C CMP AL, I                  */ <br>    dszCMP,   O_AX_Iv,                  /* 3D CMP AX, I                  */ <br>    dszDS_,   O_SEG_OVERRIDE,           /* 3E SEG DS:                    */ <br>    dszAAS,   O_NoOperands,             /* 3F AAS                        */ <br>    dszINC,   O_oReg,                   /* 40 INC AX                     */ <br>    dszINC,   O_oReg,                   /* 41 INC CX                     */ <br>    dszINC,   O_oReg,                   /* 42 INC DX                     */ <br>    dszINC,   O_oReg,                   /* 43 INC BX                     */ <br>    dszINC,   O_oReg,                   /* 44 INC SP                     */ <br>    dszINC,   O_oReg,                   /* 45 INC BP                     */ <br>    dszINC,   O_oReg,                   /* 46 INC SI                     */ <br>    dszINC,   O_oReg,                   /* 47 INC DI                     */ <br>    dszDEC,   O_oReg,                   /* 48 DEC AX                     */ <br>    dszDEC,   O_oReg,                   /* 49 DEC CX                     */ <br>    dszDEC,   O_oReg,                   /* 4A DEC DX                     */ <br>    dszDEC,   O_oReg,                   /* 4B DEC BX                     */ <br>    dszDEC,   O_oReg,                   /* 4C DEC SP                     */ <br>    dszDEC,   O_oReg,                   /* 4D DEC BP                     */ <br>    dszDEC,   O_oReg,                   /* 4E DEC SI                     */ <br>    dszDEC,   O_oReg,                   /* 4F DEC DI                     */ <br>    dszPUSH,  O_oReg,                   /* 50 PUSH AX                    */ <br>    dszPUSH,  O_oReg,                   /* 51 PUSH CX                    */ <br>    dszPUSH,  O_oReg,                   /* 52 PUSH DX                    */ <br>    dszPUSH,  O_oReg,                   /* 53 PUSH BX                    */ <br>    dszPUSH,  O_oReg,                   /* 54 PUSH SP                    */ <br>    dszPUSH,  O_oReg,                   /* 55 PUSH BP                    */ <br>    dszPUSH,  O_oReg,                   /* 56 PUSH SI                    */ <br>    dszPUSH,  O_oReg,                   /* 57 PUSH DI                    */ <br>    dszPOP,   O_oReg,                   /* 58 POP AX                     */ <br>    dszPOP,   O_oReg,                   /* 59 POP CX                     */ <br>    dszPOP,   O_oReg,                   /* 5A POP DX                     */ <br>    dszPOP,   O_oReg,                   /* 5B POP BX                     */ <br>    dszPOP,   O_oReg,                   /* 5C POP SP                     */ <br>    dszPOP,   O_oReg,                   /* 5D POP BP                     */ <br>    dszPOP,   O_oReg,                   /* 5E POP SI                     */ <br>    dszPOP,   O_oReg,                   /* 5F POP DI                     */ <br>    dszPUSHA, O_NoOpAlt5,               /* 60 PUSHA (286) / PUSHAD (386) */ <br>    dszPOPA,  O_NoOpAlt4,               /* 61 POPA (286) / POPAD (286)   */ <br>    dszBOUND, O_DoBound,                /* 62 BOUND reg, Modrm (286)     */ <br>    dszARPL,  O_Modrm_Reg,              /* 63 ARPL Modrm, reg (286)      */ <br>    dszFS_,   O_SEG_OVERRIDE,           /* 64                            */ <br>    dszGS_,   O_SEG_OVERRIDE,           /* 65                            */ <br>    dszOPPRFX,O_OPR_OVERRIDE,           /* 66                            */ <br>    dszADDRPRFX,O_ADR_OVERRIDE,         /* 67                            */ <br>    dszPUSH,  O_Iv,                     /* 68 PUSH word (286)            */ <br>    dszIMUL,  O_Imul,                   /* 69 IMUL (286)                 */ <br>    dszPUSH,  O_Ib,                     /* 6A PUSH byte (286)            */ <br>    dszIMUL,  O_Imulb,                  /* 6B IMUL (286)                 */ <br>    dszINSB,  O_NoOperands,             /* 6C INSB (286)                 */ <br>    dszINSW,  O_NoOpAlt3,               /* 6D INSW (286) / INSD (386)    */ <br>    dszOUTSB, O_NoOperands,             /* 6E OUTSB (286)                */ <br>    dszOUTSW, O_NoOpAlt4,               /* 6F OUTSW (286) / OUTSD (386)  */ <br>    dszJO,    O_Rel8,                   /* 70 JO                         */ <br>    dszJNO,   O_Rel8,                   /* 71 JNO                        */ <br>    dszJB,    O_Rel8,                   /* 72 JB or JNAE or JC           */ <br>    dszJNB,   O_Rel8,                   /* 73 JNB or JAE or JNC          */ <br>    dszJZ,    O_Rel8,                   /* 74 JE or JZ                   */ <br>    dszJNZ,   O_Rel8,                   /* 75 JNE or JNZ                 */ <br>    dszJBE,   O_Rel8,                   /* 76 JBE or JNA                 */ </code></pre>
<p>
</p>
<pre><code>dszJA,    O_Rel8,                   /* 77 JNBE or JA                 */ <br>    dszJS,    O_Rel8,                   /* 78 JS                         */ <br>    dszJNS,   O_Rel8,                   /* 79 JNS                        */ <br>    dszJPE,   O_Rel8,                   /* 7A JP or JPE                  */ <br>    dszJPO,   O_Rel8,                   /* 7B JNP or JPO                 */ <br>    dszJL,    O_Rel8,                   /* 7C JL or JNGE                 */ <br>    dszJGE,   O_Rel8,                   /* 7D JNL or JGE                 */ <br>    dszJLE,   O_Rel8,                   /* 7E JLE or JNG                 */ <br>    dszJG,    O_Rel8,                   /* 7F JNLE or JG                 */ <br>    dszMULTI, O_GROUP11,                /* 80                            */ <br>    dszMULTI, O_GROUP12,                /* 81                            */ <br>    dszRESERVED, O_DoDB,                /* 82                            */ <br>    dszMULTI, O_GROUP13,                /* 83                            */ <br>    dszTEST,  O_bModrm_Reg,             /* 84 TEST reg, mem/reg (byte)   */ <br>    dszTEST,  O_Modrm_Reg,              /* 85 TEST reg, mem/reg (word)   */ <br>    dszXCHG,  O_bModrm_Reg,             /* 86 XCHG reg, mem/reg (byte)   */ <br>    dszXCHG,  O_Modrm_Reg,              /* 87 XCHG reg, mem/reg (word)   */ <br>    dszMOV,   O_bModrm_Reg,             /* 88 MOV mem/reg, reg (byte)    */ <br>    dszMOV,   O_Modrm_Reg,              /* 89 MOV mem/reg, reg (word)    */ <br>    dszMOV,   O_bReg_Modrm,             /* 8A MOV reg, mem/reg (byte)    */ <br>    dszMOV,   O_Reg_Modrm,              /* 8B MOV reg, mem/reg (word)    */ <br>    dszMOV,   O_Modrm_sReg3,            /* 8C MOV mem/reg, segreg        */ <br>    dszLEA,   O_Reg_Modrm,              /* 8D LEA reg, mem               */ <br>    dszMOV,   O_sReg3_Modrm,            /* 8E MOV segreg, mem/reg        */ <br>    dszPOP,   O_Modrm,                  /* 8F POP mem/reg                */ <br>    dszNOP,   O_NoOperands,             /* 90 NOP                        */ <br>    dszXCHG,  O_AX_oReg,                /* 91 XCHG AX,CX                 */ <br>    dszXCHG,  O_AX_oReg,                /* 92 XCHG AX,DX                 */ <br>    dszXCHG,  O_AX_oReg,                /* 93 XCHG AX,BX                 */ <br>    dszXCHG,  O_AX_oReg,                /* 94 XCHG AX,SP                 */ <br>    dszXCHG,  O_AX_oReg,                /* 95 XCHG AX,BP                 */ <br>    dszXCHG,  O_AX_oReg,                /* 96 XCHG AX,SI                 */ <br>    dszXCHG,  O_AX_oReg,                /* 97 XCHG AX,DI                 */ <br>    dszCBW,   O_NoOpAlt0,               /* 98 CBW / CWDE (386)           */ <br>    dszCWD,   O_NoOpAlt1,               /* 99 CWD / CDQ (386)            */ <br>    dszCALL,  O_FarPtr,                 /* 9A CALL seg:off               */ <br>    dszWAIT,  O_NoOperands,             /* 9B WAIT                       */ <br>    dszPUSHF, O_NoOpAlt5,               /* 9C PUSHF / PUSHFD (386)       */ <br>    dszPOPF,  O_NoOpAlt4,               /* 9D POPF / POPFD (386)         */ <br>    dszSAHF,  O_NoOperands,             /* 9E SAHF                       */ <br>    dszLAHF,  O_NoOperands,             /* 9F LAHF                       */ <br>    dszMOV,   O_AL_Offs,                /* A0 MOV AL, mem                */ <br>    dszMOV,   O_AX_Offs,                /* A1 MOV AX, mem                */ <br>    dszMOV,   O_Offs_AL,                /* A2 MOV mem, AL                */ <br>    dszMOV,   O_Offs_AX,                /* A3 MOV mem, AX                */ <br>    dszMOVSB, O_NoOpStrSIDI,            /* A4 MOVSB                      */ <br>    dszMOVSW, O_NoOpStrSIDI,            /* A5 MOVSW / MOVSD (386)        */ <br>    dszCMPSB, O_NoOpStrSIDI,            /* A6 CMPSB                      */ <br>    dszCMPSW, O_NoOpStrSIDI,            /* A7 CMPSW / CMPSD (386)        */ <br>    dszTEST,  O_AL_Ib,                  /* A8 TEST AL, I                 */ <br>    dszTEST,  O_AX_Iv,                  /* A9 TEST AX, I                 */ <br>    dszSTOSB, O_NoOpStrDI,              /* AA STOSB                      */ <br>    dszSTOSW, O_NoOpStrDI,              /* AB STOSW / STOSD (386)        */ <br>    dszLODSB, O_NoOpStrSI,              /* AC LODSB                      */ <br>    dszLODSW, O_NoOpStrSI,              /* AD LODSW / LODSD (386)        */ <br>    dszSCASB, O_NoOpStrDI,              /* AE SCASB                      */ <br>    dszSCASW, O_NoOpStrDI,              /* AF SCASW / SCASD (386)        */ <br>    dszMOV,   O_oReg_Ib,                /* B0 MOV AL, I                  */ <br>    dszMOV,   O_oReg_Ib,                /* B1 MOV CL, I                  */ <br>    dszMOV,   O_oReg_Ib,                /* B2 MOV DL, I                  */ <br>    dszMOV,   O_oReg_Ib,                /* B3 MOV BL, I                  */ <br>    dszMOV,   O_oReg_Ib,                /* B4 MOV AH, I                  */ <br>    dszMOV,   O_oReg_Ib,                /* B5 MOV CH, I                  */ <br>    dszMOV,   O_oReg_Ib,                /* B6 MOV DH, I                  */ <br>    dszMOV,   O_oReg_Ib,                /* B7 MOV BH, I                  */ <br>    dszMOV,   O_oReg_Iv,                /* B8 MOV AX, I                  */ <br>    dszMOV,   O_oReg_Iv,                /* B9 MOV CX, I                  */ <br>    dszMOV,   O_oReg_Iv,                /* BA MOV DX, I                  */ <br>    dszMOV,   O_oReg_Iv,                /* BB MOV BX, I                  */ <br>    dszMOV,   O_oReg_Iv,                /* BC MOV SP, I                  */ <br>    dszMOV,   O_oReg_Iv,                /* BD MOV BP, I                  */ <br>    dszMOV,   O_oReg_Iv,                /* BE MOV SI, I                  */ <br>    dszMOV,   O_oReg_Iv,                /* BF MOV DI, I                  */ <br>    dszMULTI, O_GROUP21,                /* C0 shifts &amp; rotates (286)     */ <br>    dszMULTI, O_GROUP22,                /* C1 shifts &amp; rotates (286)     */ <br>    dszRET,   O_Iw,                     /* C2 RET Rel16                  */ <br>    dszRET,   O_NoOperands,             /* C3 RET                        */ <br>    dszLES,   O_fReg_Modrm,             /* C4 LES reg, mem               */ <br>    dszLDS,   O_fReg_Modrm,             /* C5 LDS reg, mem               */ <br>    dszMOV,   O_bModrm_Ib,              /* C6 MOV mem/reg, I(byte)       */ <br>    dszMOV,   O_Modrm_Iv,               /* C7 MOV mem/reg, I(word)       */ <br>    dszENTER, O_Enter,                  /* C8 ENTER (286)                */ <br>    dszLEAVE, O_NoOperands,             /* C9 LEAVE (286)                */ <br>    dszRETF,  O_Iw,                     /* CA RETF I(word)               */ <br>    dszRETF,  O_NoOperands,             /* CB RETF                       */ <br>    dszINT,   O_DoInt3,                 /* CC INT 3                      */ <br>    dszINT,   O_DoInt,                  /* CD INT                        */ <br>    dszINTO,  O_NoOperands,             /* CE INTO                       */ <br>    dszIRET,  O_NoOpAlt4,               /* CF IRET / IRETD (386)         */ <br>    dszMULTI, O_GROUP23,                /* D0 shifts &amp; rotates,1 (byte)  */ <br>    dszMULTI, O_GROUP24,                /* D1 shifts &amp; rotates,1 (word)  */ <br>    dszMULTI, O_GROUP25,                /* D2 shifts &amp; rotates,CL (byte) */ <br>    dszMULTI, O_GROUP26,                /* D3 shifts &amp; rotates,CL (word) */ <br>    dszAAM,   O_Ib,                     /* D4 AAM                        */ <br>    dszAAD,   O_Ib,                     /* D5 AAD                        */ <br>    dszRESERVED, O_DoDB,                /* D6                            */ <br>    dszXLAT,  O_NoOperands,             /* D7 XLAT                       */ <br>    dszMULTI, O_x87_ESC,                /* D8 ESC                        */ <br>    dszMULTI, O_x87_ESC,                /* D9 ESC                        */ <br>    dszMULTI, O_x87_ESC,                /* DA ESC                        */ <br>    dszMULTI, O_x87_ESC,                /* DB ESC                        */ <br>    dszMULTI, O_x87_ESC,                /* DC ESC                        */ <br>    dszMULTI, O_x87_ESC,                /* DD ESC                        */ <br>    dszMULTI, O_x87_ESC,                /* DE ESC                        */ <br>    dszMULTI, O_x87_ESC,                /* DF ESC                        */ <br>    dszLOOPNE,O_Rel8,                   /* E0 LOOPNE or LOOPNZ           */ <br>    dszLOOPE, O_Rel8,                   /* E1 LOOPE or LOOPZ             */ <br>    dszLOOP,  O_Rel8,                   /* E2 LOOP                       */ <br>    dszJCXZ,  O_Rel8,                   /* E3 JCXZ / JECXZ (386)         */ <br>    dszIN,    O_AL_Ubyte,               /* E4 IN AL, I                   */ <br>    dszIN,    O_AX_Ubyte,               /* E5 IN AX, I                   */ <br>    dszOUT,   O_Ubyte_AL,               /* E6 OUT I, AL                  */ <br>    dszOUT,   O_Ubyte_AX,               /* E7 OUT I, AX                  */ <br>    dszCALL,  O_Rel16,                  /* E8 CALL Rel16                 */ <br>    dszJMP,   O_Rel16,                  /* E9 JMP Rel16                  */ <br>    dszJMP,   O_FarPtr,                 /* EA JMP seg:off                */ <br>    dszJMP,   O_Rel8,                   /* EB JMP Rel8                   */ <br>    dszIN,    O_DoInAL,                 /* EC IN AL, DX                  */ <br>    dszIN,    O_DoInAX,                 /* ED IN AX, DX                  */ <br>    dszOUT,   O_DoOutAL,                /* EE OUT DX, AL                 */ <br>    dszOUT,   O_DoOutAX,                /* EF OUT DX, AX                 */ <br>    dszLOCK,  O_DoRep,                  /* F0 LOCK                       */ <br>    dszRESERVED, O_DoDB,                /* F1                            */ <br>    dszREPNE, O_DoRep,                  /* F2 REPNE or REPNZ             */ <br>    dszREP,   O_DoRep,                  /* F3 REP or REPE or REPZ        */ <br>    dszHLT,   O_NoOperands,             /* F4 HLT                        */ <br>    dszCMC,   O_NoOperands,             /* F5 CMC                        */ <br>    dszMULTI, O_GROUP31,                /* F6 TEST, NOT, NEG, MUL, IMUL, */ <br>    dszMULTI, O_GROUP32,                /* F7 DIv, IDIv F6=Byte F7=Word  */ <br>    dszCLC,   O_NoOperands,             /* F8 CLC                        */ <br>    dszSTC,   O_NoOperands,             /* F9 STC                        */ <br>    dszCLI,   O_NoOperands,             /* FA CLI                        */ <br>    dszSTI,   O_NoOperands,             /* FB STI                        */ <br>    dszCLD,   O_NoOperands,             /* FC CLD                        */ <br>    dszSTD,   O_NoOperands,             /* FD STD                        */ <br>    dszMULTI, O_GROUP4,                 /* FE INC, DEC mem/reg (byte)    */ <br>    dszMULTI, O_GROUP5,                 /* FF INC, DEC, CALL, JMP, PUSH  */ <br> <br>    dszMULTI, O_GROUP6,                 /* 0 MULTI                       */ <br>    dszMULTI, O_GROUP7,                 /* 1 MULTI                       */ <br>    dszLAR,   O_Reg_Modrm,              /* 2 LAR                         */ <br>    dszLSL,   O_Reg_Modrm,              /* 3 LSL                         */ <br>    dszRESERVED, O_DoDB,                /* 4                             */ <br>    dszLOADALL, O_NoOperands,           /* 5 LOADALL                     */ <br>    dszCLTS,  O_NoOperands,             /* 6 CLTS                        */ <br>    dszMOV,   O_Modrm_CReg,             /* 20 MOV Rd,Cd                  */ <br>    dszMOV,   O_Modrm_CReg,             /* 21 MOV Rd,Dd                  */ <br>    dszMOV,   O_CReg_Modrm,             /* 22 MOV Cd,Rd                  */ <br>    dszMOV,   O_CReg_Modrm,             /* 23 MOV Dd,Rd                  */ <br>    dszMOV,   O_Modrm_CReg,             /* 24 MOV Rd,Td                  */ <br>    dszRESERVED, O_DoDB,                /* 25                            */ <br>    dszMOV,   O_CReg_Modrm,             /* 26 MOV Td,Rd                  */ <br> <br>    dszWRMSR, O_NoOperands,             /* 30 WRMSR                      */ <br>    dszRDTSC, O_NoOperands,             /* 31 RDTSC                      */ <br>    dszRDMSR, O_NoOperands,             /* 32 RDMSR                      */ <br> <br>    dszSETNL, O_bModrm,                 /* 7D SETNL                      */ <br>    dszRESERVED, O_DoDB,                /* 7E                            */ <br>    dszRESERVED, O_DoDB,                /* 7F                            */ <br>    dszJO,    O_Rel16,                  /* 80 JO                         */ <br>    dszJNO,   O_Rel16,                  /* 81 JNO                        */ <br>    dszJB,    O_Rel16,                  /* 82 JB                         */ <br>    dszJNB,   O_Rel16,                  /* 83 JNB                        */ <br>    dszJE,    O_Rel16,                  /* 84 JE                         */ <br>    dszJNE,   O_Rel16,                  /* 85 JNE                        */ <br>    dszJBE,   O_Rel16,                  /* 86 JBE                        */ <br>    dszJNBE,  O_Rel16,                  /* 87 JNBE                       */ <br>    dszJS,    O_Rel16,                  /* 88 JS                         */ <br>    dszJNS,   O_Rel16,                  /* 89 JNS                        */ <br>    dszJP,    O_Rel16,                  /* 8A JP                         */ <br>    dszJNP,   O_Rel16,                  /* 8B JNP                        */ <br>    dszJL,    O_Rel16,                  /* 8C JL                         */ <br>    dszJNL,   O_Rel16,                  /* 8D JNL                        */ <br>    dszJLE,   O_Rel16,                  /* 8E JLE                        */ <br>    dszJNLE,  O_Rel16,                  /* 8F JNLE                       */ <br>    dszSETO,  O_bModrm,                 /* 90 SETO                       */ <br>    dszSETNO, O_bModrm,                 /* 91 SETNO                      */ <br>    dszSETB,  O_bModrm,                 /* 92 SETB                       */ <br>    dszSETNB, O_bModrm,                 /* 93 SETNB                      */ <br>    dszSETE,  O_bModrm,                 /* 94 SETE                       */ <br>    dszSETNE, O_bModrm,                 /* 95 SETNE                      */ <br>    dszSETBE, O_bModrm,                 /* 96 SETBE                      */ <br>    dszSETA,  O_bModrm,                 /* 97 SETNBE                     */ <br>    dszSETS,  O_bModrm,                 /* 98 SETS                       */ <br>    dszSETNS, O_bModrm,                 /* 99 SETNS                      */ <br>    dszSETP,  O_bModrm,                 /* 9A SETP                       */ <br>    dszSETNP, O_bModrm,                 /* 9B SETNP                      */ <br>    dszSETL,  O_bModrm,                 /* 9C SETL                       */ <br>    dszSETGE, O_bModrm,                 /* 9D SETGE                      */ <br>    dszSETLE, O_bModrm,                 /* 9E SETLE                      */ <br>    dszSETNLE,O_bModrm,                 /* 9F SETNLE                     */ <br>    dszPUSH,  O_sReg2,                  /* A0 PUSH FS                    */ <br>    dszPOP,   O_sReg2,                  /* A1 POP FS                     */ <br>    dszCPUID, O_NoOperands,             /* A2 CPUID                      */ <br>    dszBT,    O_Modrm_Reg,              /* A3 BT                         */ <br>    dszSHLD,  O_Modrm_Reg_Ib,           /* A4 SHLD                       */ <br>    dszSHLD,  O_Modrm_Reg_CL,           /* A5 SHLD                       */ <br>    dszCMPXCHG,O_bModrm_Reg,            /* A6 XBTS                       */ <br>    dszCMPXCHG,O_Modrm_Reg,             /* A7 IBTS                       */ <br>    dszPUSH,  O_sReg2,                  /* A8 PUSH GS                    */ <br>    dszPOP,   O_sReg2,                  /* A9 POP GS                     */ <br>    dszRSM,   O_NoOperands,             /* AA RSM                        */ <br>    dszBTS,   O_vModrm_Reg,             /* AB BTS                        */ <br>    dszSHRD,  O_Modrm_Reg_Ib,           /* AC SHRD                       */ <br>    dszSHRD,  O_Modrm_Reg_CL,           /* AD SHRD                       */ <br>    dszRESERVED, O_DoDB,                /* AE                            */ <br>    dszIMUL,  O_Reg_Modrm,              /* AF IMUL                       */ <br>    dszRESERVED, O_DoDB,                /* B0                            */ <br>    dszRESERVED, O_DoDB,                /* B1                            */ <br>    dszLSS,   O_fReg_Modrm,             /* B2 LSS                        */ <br>    dszBTR,   O_Modrm_Reg,              /* B3 BTR                        */ <br>    dszLFS,   O_fReg_Modrm,             /* B4 LFS                        */ <br>    dszLGS,   O_fReg_Modrm,             /* B5 LGS                        */ <br>    dszMOVZX, O_Reg_bModrm,             /* B6 MOVZX                      */ <br>    dszMOVZX, O_Reg_wModrm,             /* B7 MOVZX                      */ <br>    dszRESERVED, O_DoDB,                /* B8                            */ <br>    dszRESERVED, O_DoDB,                /* B9                            */ <br>    dszMULTI, O_GROUP8,                 /* BA MULTI                      */ <br>    dszBTC,   O_Modrm_Reg,              /* BB BTC                        */ <br>    dszBSF,   O_Reg_Modrm,              /* BC BSF                        */ <br>    dszBSR,   O_Reg_Modrm,              /* BD BSR                        */ <br>    dszMOVSX, O_Reg_bModrm,             /* BE MOVSX                      */ <br>    dszMOVSX, O_Reg_wModrm,             /* BF MOVSX                      */ <br>    dszXADD,  O_bModrm_Reg,             /* C0 XADD                       */ <br>    dszXADD,  O_Modrm_Reg,              /* C1 XADD                       */ <br>    dszRESERVED, O_DoDB,                /* C2                            */ <br>    dszRESERVED, O_DoDB,                /* C3                            */ <br>    dszRESERVED, O_DoDB,                /* C4                            */ <br>    dszRESERVED, O_DoDB,                /* C5                            */ <br>    dszRESERVED, O_DoDB,                /* C6                            */ <br>    dszCMPXCHG8B, O_qModrm,             /* C7 CMPXCHG8B                  */ <br>    dszBSWAP, O_oReg,                   /* C8 BSWAP                      */ <br>    dszBSWAP, O_oReg,                   /* C9 BSWAP                      */ <br>    dszBSWAP, O_oReg,                   /* CA BSWAP                      */ <br>    dszBSWAP, O_oReg,                   /* CB BSWAP                      */ <br>    dszBSWAP, O_oReg,                   /* CC BSWAP                      */ <br>    dszBSWAP, O_oReg,                   /* CD BSWAP                      */ <br>    dszBSWAP, O_oReg,                   /* CE BSWAP                      */ <br>    dszBSWAP, O_oReg                    /* CF BSWAP                      */ <br>}; <br> <br>/* Auxilary lists of mnemonics for groups of two byte instructions:      */ <br>/*   All of the instructions within each of these groups are of the same */ <br>/*   class, so only the mnemonic string is needed, the index into the    */ <br>/*   action table is implicit.                                           */ <br> <br>static char *group[][8] = { <br> <br>/* 00 */    {dszADD,  dszOR,    dszADC,  dszSBB,    /* group 1 */ <br>             dszAND,  dszSUB,   dszXOR,  dszCMP}, <br> <br>/* 01 */    {dszROL,  dszROR,   dszRCL,      dszRCR,    /* group 2 */ <br>             dszSHL,  dszSHR,   dszRESERVED, dszSAR}, <br> <br>/* 02 */    {dszINC,      dszDEC,      dszRESERVED, dszRESERVED, /* group 4 */ <br>             dszRESERVED, dszRESERVED, dszRESERVED, dszRESERVED}, <br> <br>/* 03 */    {dszSLDT, dszSTR,   dszLLDT,     dszLTR,    /* group 6 */ <br>             dszVERR, dszVERW,  dszRESERVED, dszRESERVED}, <br> <br>/* 04 */    {dszRESERVED, dszRESERVED, dszRESERVED, dszRESERVED, /* group 8 */ <br>             dszBT,       dszBTS,      dszBTR,      dszBTC} <br> <br>            }; <br> <br>/* Auxilary orderd pairs for groups of two byte instructions structured  */ <br>/*   the same was as distbl above.                                       */ <br> <br>static Tdistbl groupt[][8] = { <br> <br>/* 00  00                     x87-D8-1                   */ <br>            { dszFADD,     O_dModrm,     /* D8-0 FADD    */ <br>              dszFMUL,     O_dModrm,     /* D8-1 FMUL    */ <br>              dszFCOM,     O_dModrm,     /* D8-2 FCOM    */ <br>              dszFCOMP,    O_dModrm,     /* D8-3 FCOMP   */ <br>              dszFSUB,     O_dModrm,     /* D8-4 FSUB    */ <br>              dszFSUBR,    O_dModrm,     /* D8-5 FSUBR   */ <br>              dszFDIV,     O_dModrm,     /* D8-6 FDIV    */ <br>              dszFDIVR,    O_dModrm },   /* D8-7 FDIVR   */ <br> <br>/* 01                         x87-D8-2                   */ <br>            { dszFADD,     O_ST_iST,     /* D8-0 FADD    */ <br>              dszFMUL,     O_ST_iST,     /* D8-1 FMUL    */ <br>              dszFCOM,     O_iST,        /* D8-2 FCOM    */ <br>              dszFCOMP,    O_iST,        /* D8-3 FCOMP   */ <br>              dszFSUB,     O_ST_iST,     /* D8-4 FSUB    */ <br>              dszFSUBR,    O_ST_iST,     /* D8-5 FSUBR   */ <br>              dszFDIV,     O_ST_iST,     /* D8-6 FDIV    */ <br>              dszFDIVR,    O_ST_iST },   /* D8-7 FDIVR   */ <br> <br>/* 02   01                    x87-D9-1                   */ <br>            { dszFLD,      O_dModrm,     /* D9-0 FLD     */ <br>              dszRESERVED, O_DoDB,       /* D9-1         */ <br>              dszFST,      O_dModrm,     /* D9-2 FST     */ <br>              dszFSTP,     O_dModrm,     /* D9-3 FSTP    */ <br>              dszFLDENV,   O_Modrm,      /* D9-4 FLDENV  */ <br>              dszFLDCW,    O_Modrm,      /* D9-5 FLDCW   */ <br>              dszFSTENV,   O_Modrm,      /* D9-6 FSTENV  */ <br>              dszFSTCW,    O_Modrm },    /* D9-7 FSTCW   */ <br> <br>/* 03   01                    x87-D9-2 TTT=0,1,2,3       */ <br>            { dszFLD,      O_iST,        /* D9-0 FLD     */ <br>              dszFXCH,     O_iST,        /* D9-1 FXCH    */ <br>              dszFNOP,     O_NoOperands, /* D9-2 FNOP    */ <br>              dszFSTP,     O_iST,        /* D9-3 FSTP    */ <br>              dszRESERVED, O_DoDB,       /* D9-4         */ <br>              dszRESERVED, O_DoDB,       /* D9-5         */ <br>              dszRESERVED, O_DoDB,       /* D9-6         */ <br>              dszRESERVED, O_DoDB   },   /* D9-7         */ <br> <br>/* 04  02                     x89-DA-1                   */ <br>            { dszFIADD,    O_dModrm,     /* DA-0 FIADD   */ <br>              dszFIMUL,    O_dModrm,     /* DA-1 FIMUL   */ <br>              dszFICOM,    O_dModrm,     /* DA-2 FICOM   */ <br>              dszFICOMP,   O_dModrm,     /* DA-3 FICOMP  */ <br>              dszFISUB,    O_dModrm,     /* DA-4 FISUB   */ <br>              dszFISUBR,   O_dModrm,     /* DA-5 FISUBR  */ <br>              dszFIDIV,    O_dModrm,     /* DA-6 FIDIV   */ <br>              dszFIDIVR,   O_dModrm },   /* DA-7 FIDIVR  */ <br> <br>/* 05                         x87-DA-2                   */ <br>            { dszRESERVED, O_DoDB,       /* DA-0         */ <br>              dszRESERVED, O_DoDB,       /* DA-1         */ <br>              dszRESERVED, O_DoDB,       /* DA-2         */ <br>              dszRESERVED, O_DoDB,       /* DA-3         */ <br>              dszRESERVED, O_DoDB,       /* DA-4         */ <br>              dszFUCOMPP,  O_NoOperands, /* DA-5         */ <br>              dszRESERVED, O_DoDB,       /* DA-6         */ <br>              dszRESERVED, O_DoDB },     /* DA-7         */ <br> <br>/* 06  03                     x87-DB-1                   */ <br>            { dszFILD,     O_dModrm,     /* DB-0 FILD    */ <br>              dszRESERVED, O_DoDB,       /* DB-1         */ <br>              dszFIST,     O_dModrm,     /* DB-2 FIST    */ <br>              dszFISTP,    O_dModrm,     /* DB-3 FISTP   */ <br>              dszRESERVED, O_DoDB,       /* DB-4         */ <br>              dszFLD,      O_tModrm,     /* DB-5 FLD     */ <br>              dszRESERVED, O_DoDB,       /* DB-6         */ <br>              dszFSTP,     O_tModrm },   /* DB-7 FSTP    */ <br> <br>/* 07                      x87-DB-2 ttt=4        */ <br>            { dszFENI,     O_NoOperands, /* DB-0 FENI    */ <br>              dszFDISI,    O_NoOperands, /* DB-1 FDISI   */ <br>              dszFCLEX,    O_NoOperands, /* DB-2 FCLEX   */ <br>              dszFINIT,    O_NoOperands, /* DB-3 FINIT   */ <br>              dszFSETPM,   O_DoDB,       /* DB-4 FSETPM  */ <br>              dszRESERVED, O_DoDB,       /* DB-5         */ <br>              dszRESERVED, O_DoDB,       /* DB-6         */ <br>              dszRESERVED, O_DoDB },     /* DB-7         */ <br> <br>/* 08 04                      x87-DC-1                   */ <br>            { dszFADD,     O_qModrm,     /* DC-0 FADD    */ <br>              dszFMUL,     O_qModrm,     /* DC-1 FMUL    */ <br>              dszFCOM,     O_qModrm,     /* DC-2 FCOM    */ <br>              dszFCOMP,    O_qModrm,     /* DC-3 FCOMP   */ <br>              dszFSUB,     O_qModrm,     /* DC-4 FSUB    */ <br>              dszFSUBR,    O_qModrm,     /* DC-5 FSUBR   */ <br>              dszFDIV,     O_qModrm,     /* DC-6 FDIV    */ <br>              dszFDIVR,    O_qModrm },   /* DC-7 FDIVR   */ <br> <br>/* 09                         x87-DC-2                   */ <br>            { dszFADD,     O_iST_ST,     /* DC-0 FADD    */ <br>              dszFMUL,     O_iST_ST,     /* DC-1 FMUL    */ <br>              dszFCOM,     O_iST,        /* DC-2 FCOM    */ <br>              dszFCOMP,    O_iST,        /* DC-3 FCOMP   */ <br>              dszFSUB,     O_iST_ST,     /* DC-4 FSUB    */ <br>              dszFSUBR,    O_iST_ST,     /* DC-5 FSUBR   */ <br>              dszFDIV,     O_iST_ST,     /* DC-6 FDIVR   */ <br>              dszFDIVR,    O_iST_ST },   /* DC-7 FDIV    */ <br> <br>/* 10  05                     x87-DD-1                   */ <br>            { dszFLD,      O_qModrm,     /* DD-0 FLD     */ <br>              dszRESERVED, O_DoDB,       /* DD-1         */ <br>              dszFST,      O_qModrm,     /* DD-2 FST     */ <br>              dszFSTP,     O_qModrm,     /* DD-3 FSTP    */ <br>              dszFRSTOR,   O_Modrm,      /* DD-4 FRSTOR  */ <br>              dszRESERVED, O_DoDB,       /* DD-5         */ <br>              dszFSAVE,    O_Modrm,      /* DD-6 FSAVE   */ <br>              dszFSTSW,    O_Modrm },    /* DD-7 FSTSW   */ <br> <br>/* 11                         x87-DD-2                   */ <br>            { dszFFREE,    O_iST,        /* DD-0 FFREE   */ <br>              dszFXCH,     O_iST,        /* DD-1 FXCH    */ <br>              dszFST,      O_iST,        /* DD-2 FST     */ <br>              dszFSTP,     O_iST,        /* DD-3 FSTP    */ <br>              dszFUCOM,    O_iST,        /* DD-4 FUCOM   */ <br>              dszFUCOMP,   O_iST,        /* DD-5 FUCOMP  */ <br>              dszRESERVED, O_DoDB,       /* DD-6         */ <br>              dszRESERVED, O_DoDB },     /* DD-7         */ <br> <br>/* 12  06                     x87-DE-1                   */ <br>            { dszFIADD,    O_wModrm,     /* DE-0 FIADD   */ <br>              dszFIMUL,    O_wModrm,     /* DE-1 FIMUL   */ <br>              dszFICOM,    O_wModrm,     /* DE-2 FICOM   */ <br>              dszFICOMP,   O_wModrm,     /* DE-3 FICOMP  */ <br>              dszFISUB,    O_wModrm,     /* DE-4 FISUB   */ <br>              dszFISUBR,   O_wModrm,     /* DE-5 FISUBR  */ <br>              dszFIDIV,    O_wModrm,     /* DE-6 FIDIV   */ <br>              dszFIDIVR,   O_wModrm },   /* DE-7 FIDIVR  */ <br> <br>/* 13                         x87-DE-2                   */ <br>            { dszFADDP,    O_iST_ST,     /* DE-0 FADDP   */ <br>              dszFMULP,    O_iST_ST,     /* DE-1 FMULP   */ <br>              dszFCOMP,    O_iST,        /* DE-2 FCOMP   */ <br>              dszFCOMPP,   O_NoOperands, /* DE-3 FCOMPP  */ <br>              dszFSUBP,    O_iST_ST,     /* DE-4 FSUBP   */ <br>              dszFSUBRP,   O_iST_ST,     /* DE-5 FSUBRP  */ <br>              dszFDIVP,    O_iST_ST,     /* DE-6 FDIVP   */ <br>              dszFDIVRP,   O_iST_ST },   /* DE-7 FDIVRP  */ <br> <br>/* 14  07                     x87-DF-1                   */ <br>            { dszFILD,     O_wModrm,     /* DF-0 FILD    */ <br>              dszRESERVED, O_DoDB,       /* DF-1         */ <br>              dszFIST,     O_wModrm,     /* DF-2 FIST    */ <br>              dszFISTP,    O_wModrm,     /* DF-3 FISTP   */ <br>              dszFBLD,     O_tModrm,     /* DF-4 FBLD    */ <br>              dszFILD,     O_qModrm,     /* DF-5 FILD    */ <br>              dszFBSTP,    O_tModrm,     /* DF-6 FBSTP   */ <br>              dszFISTP,    O_qModrm },   /* DF-7 FISTP   */ <br> <br>/* 15                         x87-DF-2                   */ <br>            { dszFFREE,    O_iST,        /* DF-0 FFREE   */ <br>              dszFXCH,     O_iST,        /* DF-1 FXCH    */ <br>              dszFST,      O_iST,        /* DF-2 FST     */ <br>              dszFSTP,     O_iST,        /* DF-3 FSTP    */ <br>              dszFSTSW,    O_NoOperands, /* DF-4 FSTSW   */ <br>              dszRESERVED, O_DoDB,       /* DF-5         */ <br>              dszRESERVED, O_DoDB,       /* DF-6         */ <br>              dszRESERVED, O_DoDB },     /* DF-7         */ <br> <br>/* 16   01            x87-D9 Mod=3 TTT=4                 */ <br>            { dszFCHS,     O_NoOperands, /* D9-0 FCHS    */ <br>              dszFABS,     O_NoOperands,  /* D9-1 FABS   */ <br>              dszRESERVED, O_DoDB,       /* D9-2         */ <br>              dszRESERVED, O_DoDB,       /* D9-3         */ <br>              dszFTST,     O_NoOperands, /* D9-4 FTST    */ <br>              dszFXAM,     O_NoOperands, /* D9-5 FXAM    */ <br>              dszRESERVED, O_DoDB,       /* D9-6         */ <br>              dszRESERVED, O_DoDB },     /* D9-7         */ <br> <br>/* 17   01            x87-D9 Mod=3 TTT=5                 */ <br>            { dszFLD1,     O_NoOperands, /* D9-0 FLD1    */ <br>              dszFLDL2T,   O_NoOperands, /* D9-1 FLDL2T  */ <br>              dszFLDL2E,   O_NoOperands, /* D9-2 FLDL2E  */ <br>              dszFLDPI,    O_NoOperands, /* D9-3 FLDPI   */ <br>              dszFLDLG2,   O_NoOperands, /* D9-4 FLDLG2  */ <br>              dszFLDLN2,   O_NoOperands, /* D9-5 FLDLN2  */ <br>              dszFLDZ,     O_NoOperands, /* D9-6 FLDZ    */ <br>              dszRESERVED, O_DoDB },     /* D9-7         */ <br> <br>/* 18   01            x87-D9 Mod=3 TTT=6                   */ <br>            { dszF2XM1,    O_NoOperands,   /* D9-0 F2XM1   */ <br>              dszFYL2X,    O_NoOperands,   /* D9-1 FYL2X   */ <br>              dszFPTAN,    O_NoOperands,   /* D9-2 FPTAN   */ <br>              dszFPATAN,   O_NoOperands,   /* D9-3 FPATAN  */ <br>              dszFXTRACT,  O_NoOperands,   /* D9-4 FXTRACT */ <br>              dszFPREM1,   O_NoOperands,   /* D9-5 FPREM1  */ <br>              dszFDECSTP,  O_NoOperands,   /* D9-6 FDECSTP */ <br>              dszFINCSTP,  O_NoOperands }, /* D9-7 FINCSTP */ <br> <br>/* 19   01            x87-D9 Mod=3 TTT=7                   */ <br>            { dszFPREM,    O_NoOperands,   /* D9-0 FPREM   */ <br>              dszFYL2XP1,  O_NoOperands,   /* D9-1 FYL2XP1 */ <br>              dszFSQRT,    O_NoOperands,   /* D9-2 FSQRT   */ <br>              dszFSINCOS,  O_NoOperands,   /* D9-3 FSINCOS */ <br>              dszFRNDINT,  O_NoOperands,   /* D9-4 FRNDINT */ <br>              dszFSCALE,   O_NoOperands,   /* D9-5 FSCALE  */ <br>              dszFSIN,     O_NoOperands,   /* D9-6 FSIN    */ <br>              dszFCOS,     O_NoOperands }, /* D9-7 FCOS    */ <br> <br>/* 20                  group 3                             */ </code></pre>
<p>
</p>
<pre><code>{ dszTEST,     O_bModrm_Ib,    /* F6-0 TEST    */ <br>              dszRESERVED, O_DoDB,         /* F6-1         */ <br>              dszNOT,      O_bModrm,       /* F6-2 NOT     */ <br>              dszNEG,      O_bModrm,       /* F6-3 NEG     */ <br>              dszMUL,      O_bModrm,       /* F6-4 MUL     */ <br>              dszIMUL,     O_bModrm,       /* F6-5 IMUL    */ <br>              dszDIV,      O_bModrm,       /* F6-6 DIV     */ <br>              dszIDIV,     O_bModrm },     /* F6-7 IDIV    */ <br> <br>/* 21                  group 3                             */ <br>            { dszTEST,     O_vModrm_Iv,    /* F7-0 TEST    */ <br>              dszRESERVED, O_DoDB,         /* F7-1         */ <br>              dszNOT,      O_vModrm,       /* F7-2 NOT     */ <br>              dszNEG,      O_vModrm,       /* F7-3 NEG     */ <br>              dszMUL,      O_vModrm,       /* F7-4 MUL     */ <br>              dszIMUL,     O_vModrm,       /* F7-5 IMUL    */ <br>              dszDIV,      O_vModrm,       /* F7-6 DIV     */ <br>              dszIDIV,     O_vModrm },     /* F7-7 IDIV    */ <br> <br>/* 22                  group 5                             */ <br>            { dszINC,      O_vModrm,     /* FF-0 INC       */ <br>              dszDEC,      O_vModrm,     /* FF-1 DEC       */ <br>              dszCALL,     O_vModrm,     /* FF-2 CALL      */ <br>              dszCALL,     O_fModrm,     /* FF-3 CALL      */ <br>              dszJMP,      O_vModrm,     /* FF-4 JMP       */ <br>              dszJMP,      O_fModrm,     /* FF-5 JMP       */ <br>              dszPUSH,     O_vModrm,     /* FF-6 PUSH      */ <br>              dszRESERVED, O_DoDB },     /* FF-7           */ <br> <br>/* 23                  group 7                             */ <br>            { dszSGDT,     O_Modrm,      /* 0F-0 SGDT      */ <br>              dszSIDT,     O_Modrm,      /* 0F-1 SIDT      */ <br>              dszLGDT,     O_Modrm,      /* 0F-2 LGDT      */ <br>              dszLIDT,     O_Modrm,      /* 0F-3 LIDT      */ <br>              dszSMSW,     O_wModrm,     /* 0F-4 MSW       */ <br>              dszRESERVED, O_DoDB,       /* 0F-5           */ <br>              dszLMSW,     O_wModrm,     /* 0F-6 LMSW      */ <br>              dszRESERVED, O_DoDB }      /* 0F-7           */ <br> <br>            }; </code></pre>
<p>&nbsp;</p></body>
</HTML>

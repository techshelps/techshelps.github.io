<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MODULE.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5409"></a>MODULE.C</h2>
<pre><code>/*++ <br> <br>Copyright (c) 1993  Microsoft Corporation <br> <br>Module Name: <br> <br>    module.c <br> <br>Abstract: <br> <br>    This file implements the module load debug events. <br> <br>Author: <br> <br>    Wesley Witt (wesw) 1-May-1993 <br> <br>Environment: <br> <br>    User Mode <br> <br>--*/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;string.h&gt; <br> <br>#include "drwatson.h" <br>#include "proto.h" <br>#include "messages.h" <br> <br>// <br>// defines for symbol (.dbg) file searching <br>// <br>#define SYMBOL_PATH             "_NT_SYMBOL_PATH" <br>#define ALTERNATE_SYMBOL_PATH   "_NT_ALT_SYMBOL_PATH" <br>char szApp[MAX_PATH]; <br> <br>// <br>// local prototypes <br>// <br>LPSTR GetSymbolSearchPath( void ); <br> <br> <br> <br>BOOL <br>ProcessModuleLoad ( PDEBUGPACKET dp, LPDEBUG_EVENT de ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    Process all module load debug events, create process &amp; dll load. <br>    The purpose is to allocate a MODULEINFO structure, fill in the <br>    necessary values, and load the symbol table. <br> <br>Arguments: <br> <br>    dp      - pointer to a debug packet <br>    de      - pointer to a debug event structure <br> <br>Return Value: <br> <br>    TRUE    - everything worked <br>    FALSE   - we're hosed <br> <br>--*/ <br> <br>{ <br>    HANDLE      hFile; <br>    DWORD       dwBaseOfImage; <br>    LPSTR       SymbolPath; <br> <br>    if (de-&gt;dwDebugEventCode == CREATE_PROCESS_DEBUG_EVENT) { <br>        hFile = de-&gt;u.CreateProcessInfo.hFile; <br>        dwBaseOfImage = (DWORD)de-&gt;u.CreateProcessInfo.lpBaseOfImage; <br>        dp-&gt;hProcess = de-&gt;u.CreateProcessInfo.hProcess; <br>        dp-&gt;dwProcessId = de-&gt;dwProcessId; <br>        SymInitialize( dp-&gt;hProcess, NULL, FALSE ); <br>        SymbolPath = GetSymbolSearchPath(); <br>        SymSetSearchPath( dp-&gt;hProcess, SymbolPath ); <br>        free( SymbolPath ); <br>    } else if (de-&gt;dwDebugEventCode == LOAD_DLL_DEBUG_EVENT) { <br>        hFile = de-&gt;u.LoadDll.hFile; <br>        dwBaseOfImage = (DWORD)de-&gt;u.LoadDll.lpBaseOfDll; <br>    } <br> <br>    if ((hFile == NULL) || (hFile == INVALID_HANDLE_VALUE)) { <br>        return FALSE; <br>    } <br> <br>    if (!SymLoadModule( dp-&gt;hProcess, hFile, NULL, NULL, dwBaseOfImage, 0 )) { <br>        return FALSE; <br>    } else { <br>        if (de-&gt;dwDebugEventCode == CREATE_PROCESS_DEBUG_EVENT) { <br>            IMAGEHLP_MODULE   mi; <br>            if (SymGetModuleInfo( dp-&gt;hProcess, dwBaseOfImage, &amp;mi )) { <br>                strcpy( szApp, mi.ImageName ); <br>            } <br>        } <br>    } <br> <br>    return TRUE; <br>} <br> <br> <br>LPSTR <br>GetSymbolSearchPath( void ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    Gets the search path to be used for locating a .DBG file. <br> <br>Arguments: <br> <br>    None. <br> <br>Return Value: <br> <br>    pointer to the path string <br> <br>--*/ <br> <br>{ <br>    LPSTR   lpSymPathEnv      = NULL; <br>    LPSTR   lpAltSymPathEnv   = NULL; <br>    LPSTR   lpSystemRootEnv   = NULL; <br>    LPSTR   SymbolSearchPath  = NULL; <br>    DWORD   cbSymPath         = 0; <br> <br>    cbSymPath = 16; <br>    if (lpSymPathEnv = getenv(SYMBOL_PATH)) { <br>        cbSymPath += strlen(lpSymPathEnv) + 1; <br>    } <br>    if (lpAltSymPathEnv = getenv(ALTERNATE_SYMBOL_PATH)) { <br>        cbSymPath += strlen(lpAltSymPathEnv) + 1; <br>    } <br>    if (lpSystemRootEnv = getenv("SystemRoot")) { <br>        cbSymPath += strlen(lpSystemRootEnv) + 1; <br>    } <br> <br>    SymbolSearchPath = calloc(cbSymPath,1); <br> <br>    if (lpAltSymPathEnv) { <br>        strcat(SymbolSearchPath,lpAltSymPathEnv); <br>        strcat(SymbolSearchPath,";"); <br>    } <br>    if (lpSymPathEnv) { <br>        strcat(SymbolSearchPath,lpSymPathEnv); <br>        strcat(SymbolSearchPath,";"); <br>    } <br>    if (lpSystemRootEnv) { <br>        strcat(SymbolSearchPath,lpSystemRootEnv); <br>        strcat(SymbolSearchPath,";"); <br>    } <br>    return SymbolSearchPath; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

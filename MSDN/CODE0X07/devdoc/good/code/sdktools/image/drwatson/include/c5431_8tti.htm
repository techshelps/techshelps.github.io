<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PROTO.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5436"></a>PROTO.H</h2>
<pre><code>/*++ <br> <br>Copyright (c) 1993  Microsoft Corporation <br> <br>Module Name: <br> <br>    proto.h <br> <br>Abstract: <br> <br>    Prototypes for drwatson. <br> <br>Author: <br> <br>    Wesley Witt (wesw) 1-May-1993 <br> <br>Environment: <br> <br>    User Mode <br> <br>--*/ <br> <br>#include &lt;imagehlp.h&gt; <br> <br>// error.c <br>void NonFatalError(char *format, ...); <br>void FatalError(char *format, ...); <br>void AssertError( char *exp, char * file, DWORD line ); <br>void dprintf(char *format, ...); <br> <br>//log.c <br>void OpenLogFile( char *szFileName, BOOL fAppend, BOOL fVisual ); <br>void CloseLogFile( void ); <br>void lprintfs(char *format, ...); <br>void lprintf(DWORD dwFormatId, ...); <br>void MakeLogFileName( char *szName ); <br>char * GetLogFileData( LPDWORD dwLogFileDataSize ); <br> <br>// walk.c <br>LPVOID SwFunctionTableAccess( HANDLE  hProcess, DWORD   dwPCAddr ); <br>DWORD  SwGetModuleBase( HANDLE  hProcess, DWORD   ReturnAddress ); <br>BOOL   SwReadProcessMemory( HANDLE  hProcess, LPCVOID lpBaseAddress, LPVOID  lpBuffer, DWORD   nSize, LPDWORD lpNumberOfBytesRead ); <br>DWORD  SwTranslateAddress( HANDLE    hProcess, HANDLE    hThread, LPADDRESS lpaddr ); <br> <br>// regs.c <br>void   OutputAllRegs(PDEBUGPACKET dp, BOOL Show64); <br>DWORDLONG  GetRegValue(PDEBUGPACKET dp, ULONG regnum); <br>DWORDLONG GetRegFlagValue (PDEBUGPACKET dp, ULONG regnum); <br> <br>// disasm.c <br>BOOLEAN disasm( PDEBUGPACKET dp, PULONG pOffset, PUCHAR pchDst, BOOLEAN fEAout ); <br> <br>// symbols.c <br>void DumpSymbols( PDEBUGPACKET dp ); <br> <br>// module.c <br>BOOL ProcessModuleLoad ( PDEBUGPACKET dp, LPDEBUG_EVENT de ); <br> <br>// debug.c <br>DWORD DispatchDebugEventThread( PDEBUGPACKET dp ); <br>DWORD TerminationThread( PDEBUGPACKET dp ); <br>BOOL  DoMemoryRead(PDEBUGPACKET dp, LPCVOID addr, LPVOID buf, DWORD size, LPDWORD lpcb); <br> <br>// registry.c <br>BOOL RegInitialize( POPTIONS o ); <br>BOOL RegSave( POPTIONS o ); <br>DWORD RegGetNumCrashes( void ); <br>void RegSetNumCrashes( DWORD dwNumCrashes ); <br>void RegLogCurrentVersion( void ); <br>BOOLEAN RegInstallDrWatson( BOOL fQuiet ); <br>void RegLogProcessorType( void ); <br> <br>// eventlog.c <br>BOOL ElSaveCrash( PCRASHES crash, DWORD dwNumCrashes ); <br>BOOL ElEnumCrashes( PCRASHINFO crashInfo, CRASHESENUMPROC lpEnumFunc ); <br>BOOL ElClearAllEvents( void ); <br> <br>// process.c <br>void LogTaskList( void ); <br>void LogProcessInformation( HANDLE hProcess ); <br>void GetTaskName( ULONG pid, char *szTaskName, LPDWORD pdwSize ); <br> <br>// context.c <br>void GetContextForThread( PDEBUGPACKET dp ); <br> <br>// browse.c <br>BOOL BrowseForDirectory( char *szCurrDir ); <br>BOOL GetWaveFileName( char *szWaveName ); <br>BOOL GetDumpFileName( char *szDumpName ); <br> <br>// notify.c <br>void NotifyWinMain ( void ); <br>BOOLEAN GetCommandLineArgs( LPDWORD dwPidToDebug, LPHANDLE hEventToSignal ); <br> <br>// ui.c <br>void DrWatsonWinMain ( void ); <br> <br>// util.c <br>void GetAppName( char *pszAppName, DWORD len ); <br>void GetHelpFileName( char *pszHelpFileName, DWORD len ); <br>char * LoadRcString( UINT wId ); <br> <br>// controls.c <br>BOOL SubclassControls( HWND hwnd ); <br>void SetFocusToCurrentControl( void ); <br> <br>// dump.c <br>BOOL CreateDumpFile( PDEBUGPACKET dp, LPEXCEPTION_DEBUG_INFO  ed ); <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>UI.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5415"></a>UI.C</h2>
<pre><code>/*++ <br> <br>Copyright (c) 1993  Microsoft Corporation <br> <br>Module Name: <br> <br>    drwtsnui.c <br> <br>Abstract: <br> <br>    This function implements the ui (dialog) that controls the <br>    options maintenace for drwatson. <br> <br>Author: <br> <br>    Wesley Witt (wesw) 1-May-1993 <br> <br>Environment: <br> <br>    User Mode <br> <br>--*/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;mmsystem.h&gt; <br>#include &lt;direct.h&gt; <br>#include &lt;shellapi.h&gt; <br> <br>#include "drwatson.h" <br>#include "proto.h" <br>#include "resource.h" <br> <br> <br>void InitializeDialog( HWND hwnd ); <br>void InitializeCrashList( HWND hwnd ); <br>BOOL GetDialogValues( HWND hwnd ); <br>BOOL CALLBACK LogFileViewerDialogProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam); <br>LRESULT DrWatsonWndProc (HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam); <br>LPSTR ExpandPath(LPSTR lpPath); <br> <br> <br>void <br>DrWatsonWinMain( void ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    This is the entry point for DRWTSN32 <br> <br>Arguments: <br> <br>    None. <br> <br>Return Value: <br> <br>    None. <br> <br>--*/ <br> <br>{ <br>    HWND           hwnd; <br>    MSG            msg; <br>    WNDCLASS       wndclass; <br>    HINSTANCE      hInst; <br> <br> <br>    hInst                   = GetModuleHandle( NULL ); <br>    wndclass.style          = CS_HREDRAW | CS_VREDRAW; <br>    wndclass.lpfnWndProc    = DrWatsonWndProc; <br>    wndclass.cbClsExtra     = 0; <br>    wndclass.cbWndExtra     = DLGWINDOWEXTRA; <br>    wndclass.hInstance      = hInst; <br>    wndclass.hIcon          = LoadIcon( hInst, MAKEINTRESOURCE(APPICON) ); <br>    wndclass.hCursor        = LoadCursor( NULL, IDC_ARROW ); <br>    wndclass.hbrBackground  = (HBRUSH) (COLOR_3DFACE + 1); <br>    wndclass.lpszMenuName   = NULL; <br>    wndclass.lpszClassName  = "DrWatsonDialog"; <br>    RegisterClass( &amp;wndclass ); <br> <br>    hwnd = CreateDialog( hInst, <br>                         MAKEINTRESOURCE( DRWATSONDIALOG ), <br>                         0, <br>                         DrWatsonWndProc <br>                       ); <br> <br>    ShowWindow( hwnd, SW_SHOWNORMAL ); <br> <br>    while (GetMessage (&amp;msg, NULL, 0, 0)) { <br>        if (!IsDialogMessage( hwnd, &amp;msg )) { <br>            TranslateMessage (&amp;msg) ; <br>            DispatchMessage (&amp;msg) ; <br>        } <br>    } <br> <br>    return; <br>} <br> <br>LRESULT <br>DrWatsonWndProc (HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    Window procedure for the DRWTSN32.EXE main user interface. <br> <br>Arguments: <br> <br>    hwnd       - window handle to the dialog box <br>    message    - message number <br>    wParam     - first message parameter <br>    lParam     - second message parameter <br> <br>Return Value: <br> <br>    TRUE       - did not process the message <br>    FALSE      - did process the message <br> <br>--*/ <br> <br>{ <br>    DWORD    helpId; <br>    UINT     Checked; <br>    char     szCurrDir[MAX_PATH]; <br>    char     szWave[MAX_PATH]; <br>    char     szDump[MAX_PATH]; <br>    char     szHelpFileName[MAX_PATH]; <br>    LPSTR    p; <br> <br> <br>    switch (message) { <br>        case WM_CREATE: <br>            return 0; <br> <br>        case WM_INITDIALOG: <br>            SubclassControls( hwnd ); <br>            InitializeDialog( hwnd ); <br>            SetTimer( hwnd, 1, 50, NULL ); <br>            return 1; <br> <br>        case WM_TIMER: <br>            if (GetKeyState(VK_F1) &amp; 0x8000) { <br>                if ((GetFocus() != hwnd) &amp;&amp; (GetParent(GetFocus()) != hwnd)) { <br>                    return 0; <br>                } <br>                switch (GetDlgCtrlID( GetFocus() )) { <br>                    case ID_LOGPATH: <br>                        helpId = IDH_LOGFILELOCATION; <br>                        break; <br> <br>                    case ID_BROWSE_LOGPATH: <br>                        helpId = IDH_LOGFILELOCATION; <br>                        break; <br> <br>                    case ID_WAVEFILE_TEXT: <br>                        helpId = IDH_WAVEFILE; <br>                        break; <br> <br>                    case ID_WAVE_FILE: <br>                        helpId = IDH_WAVEFILE; <br>                        break; <br> <br>                    case ID_BROWSE_WAVEFILE: <br>                        helpId = IDH_WAVEFILE; <br>                        break; <br> <br>                    case ID_TEST_WAVE: <br>                        helpId = IDH_WAVEFILE; <br>                        break; <br> <br>                    case ID_INSTRUCTIONS: <br>                        helpId = IDH_NUMBEROFINSTR; <br>                        break; <br> <br>                    case ID_NUM_CRASHES: <br>                        helpId = IDH_NUMBEROFCRASHES; <br>                        break; <br> <br>                    case ID_DUMPSYMBOLS: <br>                        helpId = IDH_DUMPSYMBOLS; <br>                        break; <br> <br>                    case ID_DUMPALLTHREADS: <br>                        helpId = IDH_DUMPALLTHREADS; <br>                        break; <br> <br>                    case ID_APPENDTOLOGFILE: <br>                        helpId = IDH_APPENDTOLOGFILE; <br>                        break; <br> <br>                    case ID_VISUAL: <br>                        helpId = IDH_VISUAL; <br>                        break; <br> <br>                    case ID_SOUND: <br>                        helpId = IDH_SOUND; <br>                        break; <br> <br>                    case ID_CRASHES: <br>                        helpId = IDH_APPERRORS; <br>                        break; <br> <br>                    case ID_LOGFILE_VIEW: <br>                        helpId = IDH_VIEW; <br>                        break; <br> <br>                    case ID_CLEAR: <br>                        helpId = IDH_CLEAR; <br>                        break; <br> <br>                    case ID_CRASH: <br>                        helpId = IDH_CRASH; <br>                        break; <br> <br>                    case ID_CRASH_DUMP: <br>                        helpId = IDH_CRASH_DUMP; <br>                        break; <br> <br>                    case IDOK: <br>                        helpId = IDH_INDEX; <br>                        break; <br> <br>                    case IDCANCEL: <br>                        helpId = IDH_INDEX; <br>                        break; <br> <br>                    case ID_HELP: <br>                        helpId = IDH_INDEX; <br>                        break; <br> <br>                    default: <br>                        helpId = IDH_INDEX; <br>                        break; <br>                } <br>                // <br>                // call winhelp <br>                // <br>                GetHelpFileName( szHelpFileName, sizeof(szHelpFileName ) ); <br>                WinHelp( hwnd, szHelpFileName, HELP_FINDER, helpId ); <br>            } <br>            return 1; <br> <br>        case WM_ACTIVATEAPP: <br>        case WM_SETFOCUS: <br>            SetFocusToCurrentControl(); <br>            return 0; <br> <br>        case WM_SYSCOMMAND: <br>            if (wParam == ID_ABOUT) { <br>                char title[256]; <br>                char extra[256]; <br> <br>                strcpy( title, LoadRcString( IDS_ABOUT_TITLE ) ); <br>                strcpy( extra, LoadRcString( IDS_ABOUT_EXTRA ) ); <br> <br>                ShellAbout( hwnd, <br>                            title, <br>                            extra, <br>                            LoadIcon( GetModuleHandle(NULL), <br>                                      MAKEINTRESOURCE(APPICON) <br>                                    ) <br>                          ); <br> <br>                return 0; <br>            } <br>            break; <br> <br>        case WM_COMMAND: <br>            switch (wParam) { <br>                case IDOK: <br>                    if (GetDialogValues( hwnd )) { <br>                        PostQuitMessage( 0 ); <br>                    } <br>                    break; <br> <br>                case IDCANCEL: <br>                    PostQuitMessage( 0 ); <br>                    break; <br> <br>                case ID_BROWSE_LOGPATH: <br>                    GetDlgItemText( hwnd, ID_LOGPATH, szCurrDir, MAX_PATH ); <br>                    p = ExpandPath( szCurrDir ); <br>                    if (p) { <br>                        strcpy( szCurrDir, p ); <br>                        free( p ); <br>                    } <br>                    EnableWindow( GetDlgItem( hwnd, ID_BROWSE_LOGPATH ), FALSE ); <br>                    if (BrowseForDirectory( szCurrDir )) { <br>                        SetDlgItemText( hwnd, ID_LOGPATH, szCurrDir ); <br>                    } <br>                    EnableWindow( GetDlgItem( hwnd, ID_BROWSE_LOGPATH ), TRUE ); <br>                    SetFocus( GetDlgItem(hwnd, ID_BROWSE_LOGPATH) ); <br>                    return FALSE; <br>                    break; <br> <br>                case ID_BROWSE_WAVEFILE: <br>                    szWave[0] = '\0'; <br>                    EnableWindow( GetDlgItem( hwnd, ID_BROWSE_WAVEFILE ), FALSE ); <br>                    if (GetWaveFileName( szWave )) { <br>                        SetDlgItemText( hwnd, ID_WAVE_FILE, szWave ); <br>                    } <br>                    EnableWindow( GetDlgItem( hwnd, ID_BROWSE_WAVEFILE ), TRUE ); <br>                    SetFocus( GetDlgItem(hwnd, ID_BROWSE_WAVEFILE) ); <br>                    return FALSE; <br>                    break; <br> <br>                case ID_BROWSE_CRASH: <br>                    szDump[0] = '\0'; <br>                    EnableWindow( GetDlgItem( hwnd, ID_BROWSE_CRASH ), FALSE ); <br>                    if (GetDumpFileName( szDump )) { <br>                        SetDlgItemText( hwnd, ID_CRASH_DUMP, szDump ); <br>                    } <br>                    EnableWindow( GetDlgItem( hwnd, ID_BROWSE_CRASH ), TRUE ); <br>                    SetFocus( GetDlgItem(hwnd, ID_BROWSE_CRASH) ); <br>                    return FALSE; <br>                    break; <br> <br>                case ID_CLEAR: <br>                    ElClearAllEvents(); <br>                    InitializeCrashList( hwnd ); <br>                    break; <br> <br>                case ID_TEST_WAVE: <br>                    GetDlgItemText( hwnd, ID_WAVE_FILE, szWave, sizeof(szWave) ); <br>                    PlaySound( szWave, NULL, SND_FILENAME ); <br>                    break; <br> <br>                case ID_LOGFILE_VIEW: <br>                    DialogBoxParam( GetModuleHandle( NULL ), <br>                           MAKEINTRESOURCE( LOGFILEVIEWERDIALOG ), <br>                           hwnd, <br>                           LogFileViewerDialogProc, <br>                           SendMessage((HWND)GetDlgItem(hwnd,ID_CRASHES), <br>                                        LB_GETCURSEL,0,0) <br>                         ); <br>                    break; <br> <br>                case ID_HELP: <br>                    // <br>                    // call winhelp <br>                    // <br>                    GetHelpFileName( szHelpFileName, sizeof(szHelpFileName ) ); <br>                    WinHelp( hwnd, szHelpFileName, HELP_FINDER, IDH_INDEX ); <br>                    SetFocus( GetDlgItem(hwnd, ID_HELP) ); <br>                    break; <br> <br>                default: <br>                    if (((HWND)lParam == GetDlgItem( hwnd, ID_CRASHES )) &amp;&amp; <br>                        (HIWORD( wParam ) == LBN_DBLCLK)) { <br>                        DialogBoxParam( GetModuleHandle( NULL ), <br>                               MAKEINTRESOURCE( LOGFILEVIEWERDIALOG ), <br>                               hwnd, <br>                               LogFileViewerDialogProc, <br>                               SendMessage((HWND)lParam,LB_GETCURSEL,0,0) <br>                             ); <br>                    } <br>                    if (((HWND)lParam == GetDlgItem( hwnd, ID_CRASH )) &amp;&amp; <br>                        (HIWORD( wParam ) == BN_CLICKED)) { <br>                        Checked = IsDlgButtonChecked( hwnd, ID_CRASH ); <br>                        EnableWindow( GetDlgItem( hwnd, ID_CRASH_DUMP_TEXT ), Checked == 1 ); <br>                        EnableWindow( GetDlgItem( hwnd, ID_CRASH_DUMP ), Checked == 1 ); <br>                        EnableWindow( GetDlgItem( hwnd, ID_BROWSE_CRASH ), Checked == 1 ); <br>                    } <br>                    break; <br>            } <br>            break; <br> <br>        case WM_DESTROY: <br>            PostQuitMessage( 0 ); <br>            return 0; <br>    } <br> <br>    return DefWindowProc( hwnd, message, wParam, lParam ); <br>} <br> <br>BOOL CALLBACK <br>EnumCrashes( PCRASHINFO crashInfo ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    Enumeration function for crash records.  This function is called <br>    once for each crash record.  This function places the formatted <br>    crash data in a listbox. <br> <br>Arguments: <br> <br>    crashInfo      - pointer to a CRASHINFO structure <br> <br>Return Value: <br> <br>    TRUE           - caller should continue calling the enum procedure <br>    FALSE          - caller should stop calling the enum procedure <br> <br>--*/ <br> <br>{ <br>    SIZE size; <br>    char buf[1024]; <br> <br>    wsprintf( buf, "%s  %08x  %s(%08x)", <br>              crashInfo-&gt;crash.szAppName, <br>              crashInfo-&gt;crash.dwExceptionCode, <br>              crashInfo-&gt;crash.szFunction, <br>              crashInfo-&gt;crash.dwAddress <br>            ); <br>    SendMessage( crashInfo-&gt;hList, LB_ADDSTRING, 0, (LPARAM)buf ); <br> <br> <br>    GetTextExtentPoint( crashInfo-&gt;hdc, buf, strlen(buf), &amp;size ); <br>    if (size.cx &gt; (LONG)crashInfo-&gt;cxExtent) { <br>        crashInfo-&gt;cxExtent = size.cx; <br>    } <br> <br>    return TRUE; <br>} <br> <br> <br>void <br>InitializeCrashList( HWND hwnd ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    Initializes the listbox that contains the crash information. <br> <br>Arguments: <br> <br>    None. <br> <br>Return Value: <br> <br>    None. <br> <br>--*/ <br> <br>{ <br>    CRASHINFO     crashInfo; <br>    TEXTMETRIC    tm; <br>    HFONT         hFont; <br> <br>    crashInfo.hList = GetDlgItem( hwnd, ID_CRASHES ); <br>    SendMessage( crashInfo.hList, LB_RESETCONTENT, FALSE, 0L ); <br>    SendMessage( crashInfo.hList, WM_SETREDRAW, FALSE, 0L ); <br>    crashInfo.hdc = GetDC( crashInfo.hList ); <br>    crashInfo.cxExtent = 0; <br> <br>    ElEnumCrashes( &amp;crashInfo, EnumCrashes ); <br> <br>    hFont = (HFONT)SendMessage( crashInfo.hList, WM_GETFONT, 0, 0L ); <br>    if (hFont != NULL) { <br>        SelectObject( crashInfo.hdc, hFont ); <br>    } <br>    GetTextMetrics( crashInfo.hdc, &amp;tm ); <br>    ReleaseDC( crashInfo.hList, crashInfo.hdc ); <br>    SendMessage( crashInfo.hList, LB_SETHORIZONTALEXTENT, crashInfo.cxExtent, 0L ); <br>    SendMessage( crashInfo.hList, WM_SETREDRAW, TRUE, 0L ); <br> <br>    return; <br>} <br> <br>void <br>InitializeDialog( HWND hwnd ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    Initializes the DRWTSN32 user interface dialog with the values <br>    stored in the registry. <br> <br>Arguments: <br> <br>    hwnd       - window handle to the dialog <br> <br>Return Value: <br> <br>    None. <br> <br>--*/ <br> <br>{ <br>    OPTIONS       o; <br>    char          buf[256]; <br>    HMENU         hMenu; <br> <br> <br>    RegInitialize( &amp;o ); <br>    SetDlgItemText( hwnd, ID_LOGPATH, o.szLogPath ); <br>    SetDlgItemText( hwnd, ID_WAVE_FILE, o.szWaveFile ); <br>    SetDlgItemText( hwnd, ID_CRASH_DUMP, o.szCrashDump ); <br>    wsprintf( buf, "%d", o.dwMaxCrashes ); <br>    SetDlgItemText( hwnd, ID_NUM_CRASHES, buf ); <br>    wsprintf( buf, "%d", o.dwInstructions ); <br>    SetDlgItemText( hwnd, ID_INSTRUCTIONS, buf ); <br>    SendMessage( GetDlgItem( hwnd, ID_DUMPSYMBOLS ), BM_SETCHECK, o.fDumpSymbols, 0 ); <br>    SendMessage( GetDlgItem( hwnd, ID_DUMPALLTHREADS ), BM_SETCHECK, o.fDumpAllThreads, 0 ); <br>    SendMessage( GetDlgItem( hwnd, ID_APPENDTOLOGFILE ), BM_SETCHECK, o.fAppendToLogFile, 0 ); <br>    SendMessage( GetDlgItem( hwnd, ID_VISUAL ), BM_SETCHECK, o.fVisual, 0 ); <br>    SendMessage( GetDlgItem( hwnd, ID_SOUND ), BM_SETCHECK, o.fSound, 0 ); <br>    SendMessage( GetDlgItem( hwnd, ID_CRASH ), BM_SETCHECK, o.fCrash, 0 ); <br> <br>    if (waveOutGetNumDevs() == 0) { <br>        EnableWindow( GetDlgItem( hwnd, ID_WAVEFILE_TEXT ), FALSE ); <br>        EnableWindow( GetDlgItem( hwnd, ID_WAVE_FILE ), FALSE ); <br>        EnableWindow( GetDlgItem( hwnd, ID_BROWSE_WAVEFILE ), FALSE ); <br>    } <br> <br>    EnableWindow( GetDlgItem( hwnd, ID_CRASH_DUMP_TEXT ), o.fCrash ); <br>    EnableWindow( GetDlgItem( hwnd, ID_CRASH_DUMP ), o.fCrash ); <br>    EnableWindow( GetDlgItem( hwnd, ID_BROWSE_CRASH ), o.fCrash ); <br> <br>    InitializeCrashList( hwnd ); <br> <br>    if (SendMessage( GetDlgItem( hwnd, ID_CRASHES ), LB_GETCOUNT, 0 ,0 ) == 0) { <br>        EnableWindow( GetDlgItem( hwnd, ID_CLEAR ), FALSE ); <br>        EnableWindow( GetDlgItem( hwnd, ID_LOGFILE_VIEW ), FALSE ); <br>    } <br> <br>    hMenu = GetSystemMenu( hwnd, FALSE ); <br>    if (hMenu != NULL) { <br>        AppendMenu( hMenu, MF_SEPARATOR, 0, NULL ); <br>        AppendMenu( hMenu, MF_STRING, ID_ABOUT, LoadRcString( IDS_ABOUT ) ); <br>    } <br> <br>    return; <br>} <br> <br>BOOL <br>GetDialogValues( HWND hwnd ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    Retrieves the values in the DRWTSN32 dialog controls and saves <br>    them in the registry. <br> <br>Arguments: <br> <br>    hwnd       - window handle to the dialog <br> <br>Return Value: <br> <br>    TRUE       - all values were retrieved and saved <br>    FALSE      - an error occurred <br> <br>--*/ <br> <br>{ <br>    OPTIONS  o; <br>    char     buf[256]; <br>    DWORD    dwFa; <br>    LPSTR    p,p1; <br>    char     szDrive    [_MAX_DRIVE]; <br>    char     szDir      [_MAX_DIR]; <br>    char     szPath     [MAX_PATH]; <br> <br> <br>    RegInitialize( &amp;o ); <br> <br>    GetDlgItemText( hwnd, ID_LOGPATH, buf, sizeof(buf) ); <br>    p = ExpandPath( buf ); <br>    if (p) { <br>        dwFa = GetFileAttributes( p ); <br>        free( p ); <br>    } else { <br>        dwFa = GetFileAttributes( buf ); <br>    } <br>    if ((dwFa == 0xffffffff) || (!(dwFa&amp;FILE_ATTRIBUTE_DIRECTORY))) { <br>        NonFatalError( LoadRcString(IDS_INVALID_PATH) ); <br>        return FALSE; <br>    } <br>    if (strlen(buf) &gt; 0) { <br>        strcpy( o.szLogPath, buf ); <br>    } <br> <br>    o.fCrash = SendMessage( GetDlgItem( hwnd, ID_CRASH ), BM_GETCHECK, 0, 0 ); <br> <br>    GetDlgItemText( hwnd, ID_CRASH_DUMP, buf, sizeof(buf) ); <br>    if (o.fCrash) { <br>        p = ExpandPath( buf ); <br>        if (p) { <br>            dwFa = GetFileAttributes( p ); <br>            free( p ); <br>        } else { <br>            dwFa = GetFileAttributes( buf ); <br>        } <br>        if (dwFa == 0xffffffff) { <br>            // <br>            // file does not exist, check to see if the dir is ok <br>            // <br>            p = ExpandPath( buf ); <br>            if (p) { <br>                p1 = p; <br>            } else { <br>                p1 = buf; <br>            } <br>            _splitpath( p1, szDrive, szDir, NULL, NULL ); <br>            _makepath( szPath, szDrive, szDir, NULL, NULL ); <br>            if (p) { <br>                free( p ); <br>            } <br>            dwFa = GetFileAttributes( szPath ); <br>            if (dwFa == 0xffffffff) { <br>                NonFatalError( LoadRcString(IDS_INVALID_CRASH_PATH) ); <br>                return FALSE; <br>            } <br>        } else if (dwFa &amp; FILE_ATTRIBUTE_DIRECTORY) { <br>            NonFatalError( LoadRcString(IDS_INVALID_CRASH_PATH) ); <br>            return FALSE; <br>        } <br>        if (strlen(buf) &gt; 0) { <br>            strcpy( o.szCrashDump, buf ); <br>        } <br>    } <br> <br>    GetDlgItemText( hwnd, ID_WAVE_FILE, buf, sizeof(buf) ); <br>    if (strlen(buf) &gt; 0) { <br>        dwFa = GetFileAttributes( buf ); <br>        if ((dwFa == 0xffffffff) || (dwFa&amp;FILE_ATTRIBUTE_DIRECTORY)) { <br>            NonFatalError( LoadRcString(IDS_INVALID_WAVE) ); <br>            return FALSE; <br>        } <br>    } <br> <br>    strcpy( o.szWaveFile, buf ); <br> <br>    GetDlgItemText( hwnd, ID_NUM_CRASHES, buf, sizeof(buf) ); <br>    o.dwMaxCrashes = (DWORD) atol( buf ); <br> <br>    GetDlgItemText( hwnd, ID_INSTRUCTIONS, buf, sizeof(buf) ); <br>    o.dwInstructions = (DWORD) atol( buf ); <br> <br>    o.fDumpSymbols = SendMessage( GetDlgItem( hwnd, ID_DUMPSYMBOLS ), BM_GETCHECK, 0, 0 ); <br>    o.fDumpAllThreads = SendMessage( GetDlgItem( hwnd, ID_DUMPALLTHREADS ), BM_GETCHECK, 0, 0 ); <br>    o.fAppendToLogFile = SendMessage( GetDlgItem( hwnd, ID_APPENDTOLOGFILE ), BM_GETCHECK, 0, 0 ); <br>    o.fVisual = SendMessage( GetDlgItem( hwnd, ID_VISUAL ), BM_GETCHECK, 0, 0 ); <br>    o.fSound = SendMessage( GetDlgItem( hwnd, ID_SOUND ), BM_GETCHECK, 0, 0 ); <br> <br>    RegSave( &amp;o ); <br> <br>    return TRUE; <br>} <br> <br>BOOL CALLBACK <br>EnumCrashesForViewer( PCRASHINFO crashInfo ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    Enumeration function for crash records.  This function is called <br>    once for each crash record.  This function looks for s specific crash <br>    that is identified by the crashIndex. <br> <br>Arguments: <br> <br>    crashInfo      - pointer to a CRASHINFO structure <br> <br>Return Value: <br> <br>    TRUE           - caller should continue calling the enum procedure <br>    FALSE          - caller should stop calling the enum procedure <br> <br>--*/ <br> <br>{ <br>    char *p; <br> <br>    if ((crashInfo-&gt;dwIndex == crashInfo-&gt;dwIndexDesired) &amp;&amp; <br>        (crashInfo-&gt;dwCrashDataSize &gt; 0) ) { <br>        p = crashInfo-&gt;pCrashData; <br>        crashInfo-&gt;pCrashData = malloc( crashInfo-&gt;dwCrashDataSize+10 ); <br>        memcpy( crashInfo-&gt;pCrashData, p, crashInfo-&gt;dwCrashDataSize+10 ); <br>        crashInfo-&gt;pCrashData[crashInfo-&gt;dwCrashDataSize] = 0; <br>        return FALSE; <br>    } <br> <br>    crashInfo-&gt;dwIndex++; <br> <br>    return TRUE; <br>} <br> <br>BOOL CALLBACK <br>LogFileViewerDialogProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    Window procedure for the log file viewer dialog box. <br> <br>Arguments: <br> <br>    hwnd       - window handle to the dialog box <br>    message    - message number <br>    wParam     - first message parameter <br>    lParam     - second message parameter <br> <br>Return Value: <br> <br>    TRUE       - did not process the message <br>    FALSE      - did process the message <br> <br>--*/ <br> <br>{ <br>    static CRASHINFO    crashInfo; <br>    HFONT               hFont; <br> <br>    switch (message) { <br>        case WM_INITDIALOG: <br>            crashInfo.dwIndex = 0; <br>            crashInfo.dwIndexDesired = lParam; <br>            ElEnumCrashes( &amp;crashInfo, EnumCrashesForViewer ); <br>            if (crashInfo.dwIndex != crashInfo.dwIndexDesired) { <br>                MessageBeep( 0 ); <br>                EndDialog( hwnd, 0 ); <br>                return FALSE; <br>            } <br>            SetDlgItemText( hwnd, ID_LOGFILE_VIEW, crashInfo.pCrashData ); <br> <br>            hFont = GetStockObject( SYSTEM_FIXED_FONT ); <br>            Assert( hFont != NULL ); <br> <br>            SendDlgItemMessage( hwnd, <br>                                ID_LOGFILE_VIEW, <br>                                WM_SETFONT, <br>                                (WPARAM) hFont, <br>                                (LPARAM) FALSE <br>                              ); <br>            return TRUE; <br> <br>        case WM_COMMAND: <br>            if (wParam == IDOK) { <br>                free( crashInfo.pCrashData ); <br>                EndDialog( hwnd, 0 ); <br>            } <br>            break; <br>    } <br> <br>    return FALSE; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

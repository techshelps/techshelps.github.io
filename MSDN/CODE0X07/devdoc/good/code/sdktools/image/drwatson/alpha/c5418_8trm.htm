<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OPTABLE.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5422"></a>OPTABLE.H</h2>
<pre><code><br>/*++ <br> <br>Copyright (c) 1993  Digital Equipment Corporation <br> <br>Module Name: <br> <br>    optable.h <br> <br>Abstract: <br> <br>    Definitions for - <br>    Table of operations, their names and charactersitics <br>    Used by ntsd, windbg and acc's dissassembler <br> <br>Author: <br> <br>    Miche Baker-Harvey (mbh) 10-Jan-1993 <br> <br>Revision History: <br> <br>--*/ <br> <br>#ifndef _OPTABLE_ <br>#define _OPTABLE_ <br> <br>// <br>// Each entry in the opTable is either for a <br>// +  function - one option on a particular opcode <br>// +  terminal opcode - an opcode without a function field <br>//      the above two can both appear directly in disassembly <br>// <br>// +  non terminal opcode - an opcode with a function field: <br>//      these entries do not represent values which can be <br>//      executed directly:  they require a function entry. <br>// <br>// + invalid opcode - this is an opcode reserved to digital <br>// <br> <br>typedef enum ENTRY_TYPE { <br> <br>   INVALID_ETYPE, <br>   NON_TERMINAL_ETYPE, <br>   TERMINAL_ETYPE, <br>   FUNCTION_ETYPE, <br>   NOT_AN_ETYPE <br> <br>} ENTRY_TYPE; <br> <br> <br>#define NO_FUNC   (ULONG)-1 <br> <br>typedef ULONG (* PFOPPARSE)(); <br> <br>typedef struct _OPTBLENTRY { <br> <br>    union { <br> <br>        struct { <br> <br>            PUCHAR     _pszName;                // Name of the instruction <br>            PFOPPARSE  _parsFunc;               // Function to parse operands <br> <br>        } s0;                  // functions and terminal opcodes <br> <br>        struct { <br> <br>            struct _OPTBLENTRY * _funcTable;    // Describes funcs for opcode <br>            ULONG            _funcTableSize;    // Number of possible funcs <br> <br>        } s1;                  // non-terminal opcodes <br> <br>    } u; <br> <br>    // <br>    // These fields describe the instruction <br>    // <br> <br>    ULONG opCode;       // Top 6 bits of a 32-bit alpha instr <br>    ULONG funcCode;     // Function; meaning is opcode dependent <br>    ULONG iType;        // type of the instr: branch, fp, mem... <br>                        // values are ALPHA_* in alphaops.h <br> <br>    ENTRY_TYPE eType;   // type of this entry in the opTable <br> <br>} OPTBLENTRY, * POPTBLENTRY; <br> <br>// <br>// MBH - hack workaround: <br>// I tried to do this with nameless functions and structures; <br>// it works just fine on ALPHA, but dies on 386, so use this <br>// ugly hack instead. <br>// The name "pszAlphaName" is used instead of the more obvious <br>// "pszName" because other structures contain pszName. <br>// <br>#define pszAlphaName  u.s0._pszName <br>#define parsFunc      u.s0._parsFunc <br>#define funcTable     u.s1._funcTable <br>#define funcTableSize u.s1._funcTableSize <br> <br>POPTBLENTRY findNonTerminalEntry(ULONG); <br>POPTBLENTRY findStringEntry(PUCHAR); <br>POPTBLENTRY findOpCodeEntry(ULONG); <br>char * findFuncName(POPTBLENTRY, ULONG); <br>char * findFlagName(ULONG, ULONG); <br>void printTable(); <br>void opTableInit(); <br> <br>// <br>// This structure is used for the floating point flag names. <br>// <br> <br>#define FPFLAGS_NOT_AN_ENTRY 0xffffffff <br> <br>typedef struct _FPFLAGS { <br> <br>    ULONG flags;        // the flags on the opcode <br>    PUCHAR flagname;    // the string mnemonic for the flags <br> <br>} FPFLAGS, * PFPFLAGS; <br> <br> <br>#endif   // _OPTABLE_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

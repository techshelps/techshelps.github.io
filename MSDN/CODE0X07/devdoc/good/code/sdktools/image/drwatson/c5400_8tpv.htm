<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>REGISTRY.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5413"></a>REGISTRY.C</h2>
<pre><code>/*++ <br> <br>Copyright (c) 1993  Microsoft Corporation <br> <br>Module Name: <br> <br>    registry.c <br> <br>Abstract: <br> <br>    This file implements the apis for DRWTSN32 to access the registry. <br>    All access to the registry are done in this file.  If additional <br>    registry control is needed then a function should be added in this file <br>    and exposed to the other files in DRWTSN32. <br> <br>Author: <br> <br>    Wesley Witt (wesw) 1-May-1993 <br> <br>Environment: <br> <br>    User Mode <br> <br>--*/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;string.h&gt; <br> <br>#include "drwatson.h" <br>#include "proto.h" <br>#include "messages.h" <br> <br> <br>// <br>// string constants for accessing the registry <br>// there is a string constant here for each key and each value <br>// that is accessed in the registry. <br>// <br>#define DRWATSON_EXE_NAME           "drwtsn32.exe" <br>#define REGKEY_SOFTWARE             "software\\microsoft" <br>#define REGKEY_MESSAGEFILE          "EventMessageFile" <br>#define REGKEY_TYPESSUPP            "TypesSupported" <br>#define REGKEY_SYSTEMROOT           "%SystemRoot%\\System32\\" <br>#define REGKEY_EVENTLOG             "SYSTEM\\CurrentControlSet\\Services\\EventLog\\Application\\" <br>#define REGKEY_APPNAME              "ApplicationName" <br>#define REGKEY_FUNCTION             "FunctionName" <br>#define REGKEY_EXCEPTIONCODE        "ExceptionCode" <br>#define REGKEY_ADDRESS              "Address" <br>#define REGKEY_LOG_PATH             "LogFilePath" <br>#define REGKEY_DUMPSYMBOLS          "DumpSymbols" <br>#define REGKEY_DUMPALLTHREADS       "DumpAllThreads" <br>#define REGKEY_APPENDTOLOGFILE      "AppendToLogFile" <br>#define REGKEY_INSTRUCTIONS         "Instructions" <br>#define REGKEY_VISUAL               "VisualNotification" <br>#define REGKEY_SOUND                "SoundNotification" <br>#define REGKEY_CRASH_DUMP           "CreateCrashDump" <br>#define REGKEY_CRASH_FILE           "CrashDumpFile" <br>#define REGKEY_WAVE_FILE            "WaveFile" <br>#define REGKEY_NUM_CRASHES          "NumberOfCrashes" <br>#define REGKEY_MAX_CRASHES          "MaximumCrashes" <br>#define REGKEY_CURRENTVERSION       "SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion" <br>#define REGKEY_CONTROLWINDOWS       "SYSTEM\\CurrentControlSet\\Control\\Windows" <br>#define REGKEY_CSD_VERSION          "CSDVersion" <br>#define REGKEY_CURRENT_BUILD        "CurrentBuildNumber" <br>#define REGKEY_CURRENT_TYPE         "CurrentType" <br>#define REGKEY_REG_ORGANIZATION     "RegisteredOrganization" <br>#define REGKEY_REG_OWNER            "RegisteredOwner" <br>#define REGKEY_AEDEBUG              "SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AeDebug" <br>#define REGKEY_AUTO                 "Auto" <br>#define REGKEY_DEBUGGER             "Debugger" <br>#define REGKEY_PROCESSOR            "HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\0" <br>#define REGKEY_PROCESSOR_ID         "Identifier" <br> <br> <br>// <br>// local prototypes <br>// <br>void  RegSetDWORD( HKEY hkey, char *szSubKey, DWORD dwValue ); <br>void  RegSetBOOL( HKEY hkey, char *szSubKey, BOOL dwValue ); <br>void  RegSetSZ( HKEY hkey, char *szSubKey, char *szValue ); <br>void  RegSetEXPANDSZ( HKEY hkey, char *szSubKey, char *szValue ); <br>BOOL  RegQueryBOOL( HKEY hkey, char *szSubKey ); <br>DWORD RegQueryDWORD( HKEY hkey, char *szSubKey ); <br>void  RegQuerySZ( HKEY hkey, char *szSubKey, char *szValue ); <br>BOOL  RegSaveAllValues( HKEY hKeyDrWatson, POPTIONS o ); <br>BOOL  RegGetAllValues( POPTIONS o, HKEY hKeyDrWatson ); <br>BOOL  RegInitializeDefaults( HKEY hKeyDrWatson ); <br>HKEY  RegGetAppKey( void ); <br>BOOL  RegCreateEventSource( void ); <br> <br> <br> <br>BOOL <br>RegGetAllValues( POPTIONS o, HKEY hKeyDrWatson ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    This functions retrieves all registry data for DRWTSN32 and puts <br>    the data in the OPTIONS structure passed in. <br> <br>Arguments: <br> <br>    o              - pointer to an OPTIONS structure <br>    hKeyDrWatson   - handle to a registry key for DRWTSN32 registry data <br> <br>Return Value: <br> <br>    TRUE       - retrieved all data without error <br>    FALSE      - errors occurred and did not get all data <br> <br>--*/ <br> <br>{ <br>    RegQuerySZ( hKeyDrWatson, REGKEY_LOG_PATH, o-&gt;szLogPath ); <br>    RegQuerySZ( hKeyDrWatson, REGKEY_WAVE_FILE, o-&gt;szWaveFile ); <br>    RegQuerySZ( hKeyDrWatson, REGKEY_CRASH_FILE, o-&gt;szCrashDump ); <br>    o-&gt;fDumpSymbols = RegQueryBOOL( hKeyDrWatson, REGKEY_DUMPSYMBOLS ); <br>    o-&gt;fDumpAllThreads = RegQueryBOOL( hKeyDrWatson, REGKEY_DUMPALLTHREADS ); <br>    o-&gt;fAppendToLogFile = RegQueryBOOL( hKeyDrWatson, REGKEY_APPENDTOLOGFILE ); <br>    o-&gt;fVisual = RegQueryBOOL( hKeyDrWatson, REGKEY_VISUAL ); <br>    o-&gt;fSound = RegQueryBOOL( hKeyDrWatson, REGKEY_SOUND ); <br>    o-&gt;fCrash = RegQueryBOOL( hKeyDrWatson, REGKEY_CRASH_DUMP ); <br>    o-&gt;dwInstructions = RegQueryDWORD( hKeyDrWatson, REGKEY_INSTRUCTIONS ); <br>    o-&gt;dwMaxCrashes = RegQueryDWORD( hKeyDrWatson, REGKEY_MAX_CRASHES ); <br> <br>    return TRUE; <br>} <br> <br>BOOL <br>RegSaveAllValues( HKEY hKeyDrWatson, POPTIONS o ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    This functions saves all registry data for DRWTSN32 that is passed <br>    in via the OPTIONS structure. <br> <br>Arguments: <br> <br>    hKeyDrWatson   - handle to a registry key for DRWTSN32 registry data <br>    o              - pointer to an OPTIONS structure <br> <br>Return Value: <br> <br>    TRUE       - saved all data without error <br>    FALSE      - errors occurred and did not save all data <br> <br>--*/ <br> <br>{ <br>    RegSetSZ( hKeyDrWatson, REGKEY_LOG_PATH, o-&gt;szLogPath ); <br>    RegSetSZ( hKeyDrWatson, REGKEY_WAVE_FILE, o-&gt;szWaveFile ); <br>    RegSetSZ( hKeyDrWatson, REGKEY_CRASH_FILE, o-&gt;szCrashDump ); <br>    RegSetBOOL( hKeyDrWatson, REGKEY_DUMPSYMBOLS, o-&gt;fDumpSymbols ); <br>    RegSetBOOL( hKeyDrWatson, REGKEY_DUMPALLTHREADS, o-&gt;fDumpAllThreads ); <br>    RegSetBOOL( hKeyDrWatson, REGKEY_APPENDTOLOGFILE, o-&gt;fAppendToLogFile ); <br>    RegSetBOOL( hKeyDrWatson, REGKEY_VISUAL, o-&gt;fVisual ); <br>    RegSetBOOL( hKeyDrWatson, REGKEY_SOUND, o-&gt;fSound ); <br>    RegSetBOOL( hKeyDrWatson, REGKEY_CRASH_DUMP, o-&gt;fCrash ); <br>    RegSetDWORD( hKeyDrWatson, REGKEY_INSTRUCTIONS, o-&gt;dwInstructions ); <br>    RegSetDWORD( hKeyDrWatson, REGKEY_MAX_CRASHES, o-&gt;dwMaxCrashes ); <br> <br>    return TRUE; <br>} <br> <br>BOOL <br>RegInitializeDefaults( HKEY hKeyDrWatson ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    This functions initializes the registry with the default values. <br> <br>Arguments: <br> <br>    hKeyDrWatson   - handle to a registry key for DRWTSN32 registry data <br> <br>Return Value: <br> <br>    TRUE       - saved all data without error <br>    FALSE      - errors occurred and did not save all data <br> <br>--*/ <br> <br>{ <br>    OPTIONS o; <br> <br>    strcpy( o.szLogPath, "%windir%" ); <br>    strcpy( o.szCrashDump, "%windir%\\user.dmp" ); <br>    o.szWaveFile[0] = '\0'; <br>    o.fDumpSymbols = FALSE; <br>    o.fDumpAllThreads = TRUE; <br>    o.fAppendToLogFile = TRUE; <br>    o.fVisual = TRUE; <br>    o.fSound = FALSE; <br>    o.fCrash = TRUE; <br>    o.dwInstructions = 10; <br>    o.dwMaxCrashes = 10; <br> <br>    RegSetNumCrashes( 0 ); <br> <br>    RegSaveAllValues( hKeyDrWatson, &amp;o ); <br> <br>    RegCreateEventSource(); <br> <br>    return TRUE; <br>} <br> <br>BOOL <br>RegCreateEventSource( void ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    This function creates an event source in the registry.  The event <br>    source is used by the event viewer to display the data in a <br>    presentable manner. <br> <br>Arguments: <br> <br>    None. <br> <br>Return Value: <br> <br>    TRUE       - saved all data without error <br>    FALSE      - errors occurred and did not save all data <br> <br>--*/ <br> <br>{ <br>    HKEY   hk; <br>    char   szBuf[1024]; <br>    DWORD  dwDisp; <br>    char   szAppName[MAX_PATH]; <br> <br>    GetAppName( szAppName, sizeof(szAppName) ); <br>    strcpy( szBuf, REGKEY_EVENTLOG ); <br>    strcat( szBuf, szAppName ); <br>    if (RegCreateKeyEx( HKEY_LOCAL_MACHINE, <br>                        szBuf, <br>                        0, <br>                        NULL, <br>                        REG_OPTION_NON_VOLATILE, <br>                        KEY_QUERY_VALUE | KEY_SET_VALUE, <br>                        NULL, <br>                        &amp;hk, <br>                        &amp;dwDisp <br>                      )) { <br>        return FALSE; <br>    } <br> <br>    if (dwDisp == REG_OPENED_EXISTING_KEY) { <br>        RegCloseKey(hk); <br>        return TRUE; <br>    } <br> <br>    strcpy( szBuf, REGKEY_SYSTEMROOT ); <br>    strcat( szBuf, DRWATSON_EXE_NAME ); <br>    RegSetEXPANDSZ( hk, REGKEY_MESSAGEFILE, szBuf ); <br>    RegSetDWORD( hk, REGKEY_TYPESSUPP, EVENTLOG_ERROR_TYPE | EVENTLOG_WARNING_TYPE | EVENTLOG_INFORMATION_TYPE ); <br> <br>    RegCloseKey(hk); <br> <br>    return TRUE; <br>} <br> <br>HKEY <br>RegGetAppKey( void ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    This function gets a handle to the DRWTSN32 registry key. <br> <br>Arguments: <br> <br>    None. <br> <br>Return Value: <br> <br>    Valid handle   - handle opened ok <br>    NULL           - could not open the handle <br> <br>--*/ <br> <br>{ <br>    DWORD   rc; <br>    DWORD   dwDisp; <br>    HKEY    hKeyDrWatson; <br>    HKEY    hKeyMicrosoft; <br>    char    szAppName[MAX_PATH]; <br> <br>    rc = RegOpenKeyEx( HKEY_LOCAL_MACHINE, <br>                       REGKEY_SOFTWARE, <br>                       0, <br>                       KEY_QUERY_VALUE | KEY_SET_VALUE | <br>                       KEY_CREATE_SUB_KEY | KEY_ENUMERATE_SUB_KEYS, <br>                       &amp;hKeyMicrosoft <br>                     ); <br> <br>    if (rc != ERROR_SUCCESS) { <br>        return NULL; <br>    } <br> <br>    GetAppName( szAppName, sizeof(szAppName) ); <br> <br>    rc = RegCreateKeyEx( hKeyMicrosoft, <br>                         szAppName, <br>                         0, <br>                         NULL, <br>                         REG_OPTION_NON_VOLATILE, <br>                         KEY_READ | KEY_WRITE, <br>                         NULL, <br>                         &amp;hKeyDrWatson, <br>                         &amp;dwDisp <br>                       ); <br> <br>    if (rc != ERROR_SUCCESS) { <br>        return NULL; <br>    } <br> <br>    if (dwDisp == REG_CREATED_NEW_KEY) { <br>        RegInitializeDefaults( hKeyDrWatson ); <br>    } <br> <br>    return hKeyDrWatson; <br>} <br> <br>BOOL <br>RegInitialize( POPTIONS o ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    This function is used to initialize the OPTIONS structure passed in <br>    with the current values in the registry.  Note that if the registry <br>    is empty then the defaults are stored in the registry and also <br>    returned in the OPTIONS structure. <br> <br>Arguments: <br> <br>    None. <br> <br>Return Value: <br> <br>    TRUE           - all data was retrieved ok <br>    NULL           - could not get all data <br> <br>--*/ <br> <br>{ <br>    HKEY    hKeyDrWatson; <br> <br>    hKeyDrWatson = RegGetAppKey(); <br>    Assert( hKeyDrWatson != NULL ); <br> <br>    if (!RegGetAllValues( o, hKeyDrWatson )) { <br>        return FALSE; <br>    } <br> <br>    RegCloseKey( hKeyDrWatson ); <br> <br>    return TRUE; <br>} <br> <br>BOOL <br>RegSave( POPTIONS o ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    This function is used to save the data in the OPTIONS structure <br>    to the registry. <br> <br>Arguments: <br> <br>    o              - pointer to an OPTIONS structure <br> <br>Return Value: <br> <br>    TRUE           - all data was saved ok <br>    NULL           - could not save all data <br> <br>--*/ <br> <br>{ <br>    HKEY    hKeyDrWatson; <br> <br>    hKeyDrWatson = RegGetAppKey(); <br>    Assert( hKeyDrWatson != NULL ); <br>    RegSaveAllValues( hKeyDrWatson, o ); <br>    RegCloseKey( hKeyDrWatson ); <br> <br>    return TRUE; <br>} <br> <br>void <br>RegSetNumCrashes( DWORD dwNumCrashes ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    This function changes the value in the registry that contains the <br>    number of crashes that have occurred. <br> <br>Arguments: <br> <br>    dwNumCrashes   - the number of craches to save <br> <br>Return Value: <br> <br>    None. <br> <br>--*/ <br> <br>{ <br>    HKEY    hKeyDrWatson; <br> <br>    hKeyDrWatson = RegGetAppKey(); <br>    Assert( hKeyDrWatson != NULL ); <br>    RegSetDWORD( hKeyDrWatson, REGKEY_NUM_CRASHES, dwNumCrashes ); <br>    RegCloseKey( hKeyDrWatson ); <br> <br>    return; <br>} <br> <br>DWORD <br>RegGetNumCrashes( void ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    This function get the value in the registry that contains the <br>    number of crashes that have occurred. <br> <br>Arguments: <br> <br>    None. <br> <br>Return Value: <br> <br>    the number of craches that have occurred <br> <br>--*/ <br> <br>{ <br>    HKEY    hKeyDrWatson; <br>    DWORD   dwNumCrashes; <br> <br>    hKeyDrWatson = RegGetAppKey(); <br>    Assert( hKeyDrWatson != NULL ); <br>    dwNumCrashes = RegQueryDWORD( hKeyDrWatson, REGKEY_NUM_CRASHES ); <br>    RegCloseKey( hKeyDrWatson ); <br> <br>    return dwNumCrashes; <br>} <br> <br>BOOLEAN <br>RegInstallDrWatson( BOOL fQuiet ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    This function gets a handle to the DRWTSN32 registry key. <br> <br>Arguments: <br> <br>    None. <br> <br>Return Value: <br> <br>    Valid handle   - handle opened ok <br>    NULL           - could not open the handle <br> <br>--*/ <br> <br>{ <br>    DWORD     rc; <br>    HKEY      hKeyMicrosoft; <br>    OPTIONS   o; <br> <br>    rc = RegOpenKeyEx( HKEY_LOCAL_MACHINE, <br>                       REGKEY_AEDEBUG, <br>                       0, <br>                       KEY_QUERY_VALUE | KEY_SET_VALUE, <br>                       &amp;hKeyMicrosoft <br>                     ); <br> <br>    if (rc != ERROR_SUCCESS) { <br>        return FALSE; <br>    } <br> <br>    RegSetSZ( hKeyMicrosoft, REGKEY_AUTO, "1" ); <br>    RegSetSZ( hKeyMicrosoft, REGKEY_DEBUGGER, "drwtsn32 -p %ld -e %ld -g" ); <br> <br>    RegCloseKey( hKeyMicrosoft ); <br> <br>    RegInitialize( &amp;o ); <br>    if (fQuiet) { <br>        o.fVisual = FALSE; <br>        o.fSound = FALSE; <br>        RegSave( &amp;o ); <br>    } <br> <br>    return TRUE; <br>} <br> <br>void <br>RegSetDWORD( HKEY hkey, char *szSubKey, DWORD dwValue ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    This function changes a DWORD value in the registry using the <br>    hkey and szSubKey as the registry key info. <br> <br>Arguments: <br> <br>    hkey          - handle to a registry key <br>    szSubKey      - pointer to a subkey string <br>    dwValue       - new registry value <br> <br>Return Value: <br> <br>    None. <br> <br>--*/ <br> <br>{ <br>    DWORD rc; <br> <br>    rc = RegSetValueEx( hkey, szSubKey, 0, REG_DWORD, (LPBYTE)&amp;dwValue, 4 ); <br>    Assert( rc == ERROR_SUCCESS ); <br>} <br> <br>void <br>RegSetBOOL( HKEY hkey, char *szSubKey, BOOL dwValue ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    This function changes a BOOL value in the registry using the <br>    hkey and szSubKey as the registry key info. <br> <br>Arguments: <br> <br>    hkey          - handle to a registry key <br>    szSubKey      - pointer to a subkey string <br>    dwValue       - new registry value <br> <br>Return Value: <br> <br>    None. <br> <br>--*/ <br> <br>{ <br>    DWORD rc; <br> <br>    rc = RegSetValueEx( hkey, szSubKey, 0, REG_DWORD, (LPBYTE)&amp;dwValue, 4 ); <br>    Assert( rc == ERROR_SUCCESS ); <br>} <br> <br>void <br>RegSetSZ( HKEY hkey, char *szSubKey, char *szValue ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    This function changes a SZ value in the registry using the <br>    hkey and szSubKey as the registry key info. <br> <br>Arguments: <br> <br>    hkey          - handle to a registry key <br>    szSubKey      - pointer to a subkey string <br>    szValue       - new registry value <br> <br>Return Value: <br> <br>    None. <br> <br>--*/ <br> <br>{ <br>    DWORD rc; <br> <br>    rc = RegSetValueEx( hkey, szSubKey, 0, REG_SZ, szValue, strlen(szValue)+1 ); <br>    Assert( rc == ERROR_SUCCESS ); <br>} <br> <br>void <br>RegSetEXPANDSZ( HKEY hkey, char *szSubKey, char *szValue ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    This function changes a SZ value in the registry using the <br>    hkey and szSubKey as the registry key info. <br> <br>Arguments: <br> <br>    hkey          - handle to a registry key <br>    szSubKey      - pointer to a subkey string <br>    szValue       - new registry value <br> <br>Return Value: <br> <br>    None. <br> <br>--*/ <br> <br>{ <br>    DWORD rc; <br> <br>    rc = RegSetValueEx( hkey, szSubKey, 0, REG_EXPAND_SZ, szValue, strlen(szValue)+1 ); <br>    Assert( rc == ERROR_SUCCESS ); <br>} <br> <br>BOOL <br>RegQueryBOOL( HKEY hkey, char *szSubKey ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    This function queries BOOL value in the registry using the <br>    hkey and szSubKey as the registry key info.  If the value is not <br>    found in the registry, it is added with a FALSE value. <br> <br>Arguments: <br> <br>    hkey          - handle to a registry key <br>    szSubKey      - pointer to a subkey string <br> <br>Return Value: <br> <br>    TRUE or FALSE. <br> <br>--*/ <br> <br>{ <br>    DWORD   rc; <br>    DWORD   len; <br>    DWORD   dwType; <br>    BOOL    fValue; <br> <br>    len = 4; <br>    rc = RegQueryValueEx( hkey, szSubKey, 0, &amp;dwType, (LPBYTE)&amp;fValue, &amp;len ); <br>    if (rc != ERROR_SUCCESS) { <br>        if (rc == ERROR_FILE_NOT_FOUND) { <br>            fValue = FALSE; <br>            RegSetBOOL( hkey, szSubKey, fValue ); <br>        } <br>        else { <br>            Assert( rc == ERROR_SUCCESS ); <br>        } <br>    } <br>    else { <br>        Assert( dwType == REG_DWORD ); <br>    } <br> <br>    return fValue; <br>} <br> <br>DWORD <br>RegQueryDWORD( HKEY hkey, char *szSubKey ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    This function queries BOOL value in the registry using the <br>    hkey and szSubKey as the registry key info.  If the value is not <br>    found in the registry, it is added with a zero value. <br> <br>Arguments: <br> <br>    hkey          - handle to a registry key <br>    szSubKey      - pointer to a subkey string <br> <br>Return Value: <br> <br>    registry value <br> <br>--*/ <br> <br>{ <br>    DWORD   rc; <br>    DWORD   len; <br>    DWORD   dwType; <br>    DWORD   fValue; <br> <br>    len = 4; <br>    rc = RegQueryValueEx( hkey, szSubKey, 0, &amp;dwType, (LPBYTE)&amp;fValue, &amp;len ); <br>    if (rc != ERROR_SUCCESS) { <br>        if (rc == ERROR_FILE_NOT_FOUND) { <br>            fValue = 0; <br>            RegSetDWORD( hkey, szSubKey, fValue ); <br>        } <br>        else { <br>            Assert( rc == ERROR_SUCCESS ); <br>        } <br>    } <br>    else { <br>        Assert( dwType == REG_DWORD ); <br>    } <br> <br>    return fValue; <br>} <br> <br>void <br>RegQuerySZ( HKEY hkey, char *szSubKey, char *szValue ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    This function queries BOOL value in the registry using the <br>    hkey and szSubKey as the registry key info.  If the value is not <br>    found in the registry, it is added with a zero value. <br> <br>Arguments: <br> <br>    hkey          - handle to a registry key <br>    szSubKey      - pointer to a subkey string <br> <br>Return Value: <br> <br>    registry value <br> <br>--*/ <br> <br>{ <br>    DWORD   rc; <br>    DWORD   len; <br>    DWORD   dwType; <br>    char    buf[1024]; <br> <br>    len = sizeof(buf); <br>    rc = RegQueryValueEx( hkey, szSubKey, 0, &amp;dwType, (LPBYTE)buf, &amp;len ); <br>    if (rc != ERROR_SUCCESS) { <br>        if (rc == ERROR_FILE_NOT_FOUND) { <br>            buf[0] = 0; <br>            RegSetSZ( hkey, szSubKey, buf ); <br>        } <br>        else { <br>            Assert( rc == ERROR_SUCCESS ); <br>        } <br>    } <br>    else { <br>        Assert( dwType == REG_SZ ); <br>    } <br> <br>    strcpy( szValue, buf ); <br>} <br> <br>/*++ <br> <br>Routine Description: <br> <br>    This function writes system and user info. to the log file <br> <br>Arguments: <br> <br>    None <br> <br>Return Value: <br> <br>    registry value <br> <br>History: <br> <br>    8/21/97 a-paulbr fixed bug 658 <br>--*/ <br> <br>void <br>RegLogCurrentVersion( void ) <br>{ <br>    char    buf[1024]; <br>    DWORD   rc; <br>    HKEY    hKeyCurrentVersion = NULL; <br>    HKEY    hKeyControlWindows = NULL; <br>    DWORD   dwSPNum = 0; <br>    DWORD   dwType = REG_DWORD; <br>    DWORD   dwSize = sizeof(DWORD); <br> <br>    rc = RegOpenKeyEx( HKEY_LOCAL_MACHINE, <br>                       REGKEY_CURRENTVERSION, <br>                       0, <br>                       KEY_QUERY_VALUE, <br>                       &amp;hKeyCurrentVersion <br>                     ); <br> <br>    if (rc != ERROR_SUCCESS) { <br>        return; <br>    } <br>    rc = RegOpenKeyEx( HKEY_LOCAL_MACHINE, <br>                       REGKEY_CONTROLWINDOWS, <br>                       0, <br>                       KEY_QUERY_VALUE, <br>                       &amp;hKeyControlWindows); <br>    if (hKeyControlWindows) { <br>        // <br>        // I'm using RegQueryValueEx() because there is an assertion in <br>        // RegQueryDWORD() if the key does not exist. <br>        // <br>        RegQueryValueEx(hKeyControlWindows, <br>                        REGKEY_CSD_VERSION, <br>                        NULL, <br>                        &amp;dwType, <br>                        (BYTE*)&amp;dwSPNum, <br>                        &amp;dwSize); <br>    } <br> <br>    RegQuerySZ( hKeyCurrentVersion,REGKEY_CURRENT_BUILD,     buf ); <br>    lprintf( MSG_CURRENT_BUILD, buf ); <br> <br>    if ((hKeyControlWindows) &amp;&amp; <br>        (dwType == REG_DWORD) &amp;&amp; <br>        (HIBYTE(LOWORD(dwSPNum)) != 0)) { <br>        sprintf(buf, "%hu", HIBYTE(LOWORD(dwSPNum))); <br>        lprintf( MSG_CSD_VERSION, buf ); <br>    } else { <br>        sprintf(buf, "None"); <br>        lprintf( MSG_CSD_VERSION, buf ); <br>    } <br> <br>    RegQuerySZ( hKeyCurrentVersion,REGKEY_CURRENT_TYPE,      buf ); <br>    lprintf( MSG_CURRENT_TYPE, buf ); <br>    RegQuerySZ( hKeyCurrentVersion,REGKEY_REG_ORGANIZATION,  buf ); <br>    lprintf( MSG_REG_ORGANIZATION, buf ); <br>    RegQuerySZ( hKeyCurrentVersion,REGKEY_REG_OWNER,         buf ); <br>    lprintf( MSG_REG_OWNER, buf ); <br> <br>    // <br>    // Close the keys that we opened <br>    // <br>    RegCloseKey(hKeyCurrentVersion); <br>    RegCloseKey(hKeyControlWindows); <br> <br>    return; <br>} <br> <br>void <br>RegLogProcessorType( void ) <br>{ <br>    char    buf[1024]; <br>    DWORD   rc; <br>    HKEY    hKey; <br> <br>    rc = RegOpenKeyEx( HKEY_LOCAL_MACHINE, <br>                       REGKEY_PROCESSOR, <br>                       0, <br>                       KEY_QUERY_VALUE, <br>                       &amp;hKey <br>                     ); <br> <br>    if (rc != ERROR_SUCCESS) { <br>        return; <br>    } <br> <br>    RegQuerySZ( hKey, REGKEY_PROCESSOR_ID, buf ); <br>    lprintf( MSG_SYSINFO_PROC_TYPE, buf ); <br> <br>    return; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

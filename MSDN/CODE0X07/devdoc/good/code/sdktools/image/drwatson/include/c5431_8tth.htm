<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DRWATSON.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5435"></a>DRWATSON.H</h2>
<pre><code>/*++ <br> <br>Copyright (c) 1993  Microsoft Corporation <br> <br>Module Name: <br> <br>    drwatson.h <br> <br>Abstract: <br> <br>    Common header file for drwatson data structures. <br> <br>Author: <br> <br>    Wesley Witt (wesw) 1-May-1993 <br> <br>Environment: <br> <br>    User Mode <br> <br>--*/ <br> <br>#include &lt;imagehlp.h&gt; <br> <br>typedef struct _tagOPTIONS { <br>    CHAR                        szLogPath[MAX_PATH]; <br>    CHAR                        szWaveFile[MAX_PATH]; <br>    CHAR                        szCrashDump[MAX_PATH]; <br>    BOOL                        fDumpSymbols; <br>    BOOL                        fDumpAllThreads; <br>    BOOL                        fAppendToLogFile; <br>    BOOL                        fVisual; <br>    BOOL                        fSound; <br>    BOOL                        fCrash; <br>    DWORD                       dwInstructions; <br>    DWORD                       dwMaxCrashes; <br>} OPTIONS, *POPTIONS; <br> <br>typedef struct _tagCRASHES { <br>    char                        szAppName[256]; <br>    char                        szFunction[256]; <br>    SYSTEMTIME                  time; <br>    DWORD                       dwExceptionCode; <br>    DWORD                       dwAddress; <br>} CRASHES, *PCRASHES; <br> <br>typedef struct _tagCRASHINFO { <br>    HWND       hList; <br>    CRASHES    crash; <br>    HDC        hdc; <br>    DWORD      cxExtent; <br>    DWORD      dwIndex; <br>    DWORD      dwIndexDesired; <br>    char       *pCrashData; <br>    DWORD      dwCrashDataSize; <br>} CRASHINFO, *PCRASHINFO; <br> <br>typedef struct _tagTHREADCONTEXT { <br>    LIST_ENTRY                   ThreadList; <br>    HANDLE                       hThread; <br>    DWORD                        dwThreadId; <br>    DWORD                        pc; <br>    DWORD                        frame; <br>    DWORD                        stack; <br>    CONTEXT                      context; <br>    DWORD                        stackBase; <br>    DWORD                        stackRA; <br>    BOOL                         fFaultingContext; <br>} THREADCONTEXT, *PTHREADCONTEXT; <br> <br>typedef struct _tagDEBUGPACKET { <br>    HWND                    hwnd; <br>    HANDLE                  hEvent; <br>    OPTIONS                 options; <br>    DWORD                   dwPidToDebug; <br>    HANDLE                  hEventToSignal; <br>    HANDLE                  hProcess; <br>    DWORD                   dwProcessId; <br>    LIST_ENTRY              ThreadList; <br>    PTHREADCONTEXT          tctx; <br>    DWORD                   stackBase; <br>    DWORD                   stackRA; <br>    DEBUG_EVENT             DebugEvent; <br>} DEBUGPACKET, *PDEBUGPACKET; <br> <br>typedef BOOL (CALLBACK* CRASHESENUMPROC)(PCRASHINFO); <br> <br>#if DBG <br>#define Assert(exp)    if(!(exp)) {AssertError(#exp,__FILE__,__LINE__);} <br>#else <br>#define Assert(exp) <br>#endif <br> <br>#define WM_DUMPCOMPLETE       WM_USER+500 <br>#define WM_EXCEPTIONINFO      WM_USER+501 <br>#define WM_ATTACHCOMPLETE     WM_USER+502 <br> <br>extern PIMAGEHLP_SYMBOL sym; <br>extern char szApp[MAX_PATH]; <br> <br> <br> <br>#if defined(i386) <br> <br>#define BP_SIZE 1 <br>#define PC(C) ((C)-&gt;Eip) <br> <br>#elif defined(PPC) <br> <br>#define BP_SIZE 4 <br>#define PC(C) ((C)-&gt;Iar) <br> <br>#elif defined(MIPS) <br> <br>#define BP_SIZE 4 <br>#define PC(C) ((C)-&gt;Fir) <br> <br>#elif defined(ALPHA) <br> <br>#define BP_SIZE 4 <br>#define PC(C) ((C)-&gt;Fir) <br> <br>#else <br> <br>#error "Unknown target CPU" <br> <br>#endif <br> <br> <br>//  **** From ntddk.h <br>// <br>//  Doubly-linked list manipulation routines.  Implemented as macros <br>//  but logically these are procedures. <br>// <br> <br>// <br>//  VOID <br>//  InitializeListHead( <br>//      PLIST_ENTRY ListHead <br>//      ); <br>// <br> <br>#define InitializeListHead(ListHead) (\ <br>    (ListHead)-&gt;Flink = (ListHead)-&gt;Blink = (ListHead)) <br> <br>// <br>//  BOOLEAN <br>//  IsListEmpty( <br>//      PLIST_ENTRY ListHead <br>//      ); <br>// <br> <br>#define IsListEmpty(ListHead) \ <br>    ((ListHead)-&gt;Flink == (ListHead)) <br> <br>// <br>//  PLIST_ENTRY <br>//  RemoveHeadList( <br>//      PLIST_ENTRY ListHead <br>//      ); <br>// <br> <br>#define RemoveHeadList(ListHead) \ <br>    (ListHead)-&gt;Flink;\ <br>    {RemoveEntryList((ListHead)-&gt;Flink)} <br> <br>// <br>//  PLIST_ENTRY <br>//  RemoveTailList( <br>//      PLIST_ENTRY ListHead <br>//      ); <br>// <br> <br>#define RemoveTailList(ListHead) \ <br>    (ListHead)-&gt;Blink;\ <br>    {RemoveEntryList((ListHead)-&gt;Blink)} <br> <br>// <br>//  VOID <br>//  RemoveEntryList( <br>//      PLIST_ENTRY Entry <br>//      ); <br>// <br> <br>#define RemoveEntryList(Entry) {\ <br>    PLIST_ENTRY _EX_Blink;\ <br>    PLIST_ENTRY _EX_Flink;\ <br>    _EX_Flink = (Entry)-&gt;Flink;\ <br>    _EX_Blink = (Entry)-&gt;Blink;\ <br>    _EX_Blink-&gt;Flink = _EX_Flink;\ <br>    _EX_Flink-&gt;Blink = _EX_Blink;\ <br>    } <br> <br>// <br>//  VOID <br>//  InsertTailList( <br>//      PLIST_ENTRY ListHead, <br>//      PLIST_ENTRY Entry <br>//      ); <br>// <br> <br>#define InsertTailList(ListHead,Entry) {\ <br>    PLIST_ENTRY _EX_Blink;\ <br>    PLIST_ENTRY _EX_ListHead;\ <br>    _EX_ListHead = (ListHead);\ <br>    _EX_Blink = _EX_ListHead-&gt;Blink;\ <br>    (Entry)-&gt;Flink = _EX_ListHead;\ <br>    (Entry)-&gt;Blink = _EX_Blink;\ <br>    _EX_Blink-&gt;Flink = (Entry);\ <br>    _EX_ListHead-&gt;Blink = (Entry);\ <br>    } <br> <br>// <br>//  VOID <br>//  InsertHeadList( <br>//      PLIST_ENTRY ListHead, <br>//      PLIST_ENTRY Entry <br>//      ); <br>// <br> <br>#define InsertHeadList(ListHead,Entry) {\ <br>    PLIST_ENTRY _EX_Flink;\ <br>    PLIST_ENTRY _EX_ListHead;\ <br>    _EX_ListHead = (ListHead);\ <br>    _EX_Flink = _EX_ListHead-&gt;Flink;\ <br>    (Entry)-&gt;Flink = _EX_Flink;\ <br>    (Entry)-&gt;Blink = _EX_ListHead;\ <br>    _EX_Flink-&gt;Blink = (Entry);\ <br>    _EX_ListHead-&gt;Flink = (Entry);\ <br>    } <br> <br>// <br>// <br>//  PSINGLE_LIST_ENTRY <br>//  PopEntryList( <br>//      PSINGLE_LIST_ENTRY ListHead <br>//      ); <br>// <br> <br>#define PopEntryList(ListHead) \ <br>    (ListHead)-&gt;Next;\ <br>    {\ <br>        PSINGLE_LIST_ENTRY FirstEntry;\ <br>        FirstEntry = (ListHead)-&gt;Next;\ <br>        if (FirstEntry != NULL) {     \ <br>            (ListHead)-&gt;Next = FirstEntry-&gt;Next;\ <br>        }                             \ <br>    } <br> <br> <br>// <br>//  VOID <br>//  PushEntryList( <br>//      PSINGLE_LIST_ENTRY ListHead, <br>//      PSINGLE_LIST_ENTRY Entry <br>//      ); <br>// <br> <br>#define PushEntryList(ListHead,Entry) \ <br>    (Entry)-&gt;Next = (ListHead)-&gt;Next; \ <br>    (ListHead)-&gt;Next = (Entry) <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

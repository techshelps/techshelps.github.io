<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FONTEDIT.H</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5394"></a>FONTEDIT.H</h2>
<pre><code>#include &lt;stdlib.h&gt; <br> <br>#define   WIDER_LEFT 1 <br>#define   WIDER_RIGHT 2 <br>#define   WIDER_BOTH 3 <br>#define   NARROWER_LEFT 4 <br>#define   NARROWER_RIGHT 5 <br>#define   NARROWER_BOTH 6 <br>#define   WIDTH 7 <br>#define   BOX_WIDTH 8 <br> <br>#define   BOX_REFRESH 10                /* Restore char to original form */ <br>#define   BOX_CLEAR 11 <br>#define   BOX_FILL 12 <br>#define   BOX_INV 13 <br>#define   BOX_HATCH 14 <br>#define   BOX_UNDO 15                   /* Undo last change */ <br>#define   BOX_LEFTRIGHT 16              /* Flip left to right */ <br>#define   BOX_TOPBOTTOM 17              /* Flip top over bottom */ <br>#define   BOX_COPY 18 <br>#define   BOX_PASTE 19 <br> <br>#define   ROW_ADD 21 <br>#define   ROW_DEL 22 <br> <br>#define   COL_ADD 31 <br>#define   COL_DEL 32 <br> <br> <br>#define   ID_EDIT 34 <br>#define   ID_PATH 35 <br>#define   ID_LISTBOX 36 <br>#define   ID_FACE_NAME 37 <br>#define   ID_FONT_NAME 38 <br>#define   ID_COPYRIGHT 39 <br> <br>#define   FONT_START 40                 /* Generated if win fontedit arg. */ <br> <br>#define   FONT_LOAD 41                  /* Codes for Font Window */ <br>#define   FONT_SAVE 42 <br>#define   FONT_HEADER 43 <br>#define   FONT_COPY 44 <br>#define   FONT_PASTE 45                 /* Paste in without rescaling */ <br>#define   FONT_ABOUT 46                 /* Display the about box */ <br>#define   FONT_RESIZE 47                /* Go to Resize Dialog Box */ <br>#define   FONT_NEW 95                   /* Menu id: create new font */ <br> <br> <br>#define   ID_FIRST_CHAR 48              /* First character in the font */ <br>#define   ID_LAST_CHAR 49               /* Last character in the font */ <br> <br>#define   ID_POINTS 50                  /* Nominal Point Size */ <br>#define   ID_VERT_RES 51                /* Nominal Vertical Resolution */ <br>#define   ID_HORIZ_RES 52               /* Nominal Horizontal Resolution */ <br>#define   ID_ASCENT 53                  /* Height of Ascent */ <br>#define   ID_EXT_LEADING 54             /* Height of External Leading */ <br>#define   ID_INT_LEADING 55             /* Height of Internal Leading */ <br> <br>#define   FONT_EXIT 56                  /* exit the font editor */ <br> <br>#define   ID_ITALIC 60                  /* Flag for Italic Fonts */ <br>#define   ID_UNDERLINE 61               /* Flag for Underlined Fonts */ <br>#define   ID_STRIKEOUT 62               /* Flag for Struckout Fonts */ <br>#define   ID_ANSI 63                    /* 0 = ANSI, 255 = other */ <br>#define   ID_OEM 64 <br>#define   ID_CHAR_SET 65 <br>#define   ID_DEFAULT_CHAR 66            /* Default for undefined Chars. */ <br>#define   ID_BREAK_CHAR 67 <br>#define   ID_SYMBOL 68 <br> <br>#define   ID_UNKNOWN 70 <br>#define   ID_ROMAN 71 <br>#define   ID_SWISS 72                   /* Pitch Families */ <br>#define   ID_MODERN 73 <br>#define   ID_SCRIPT 74 <br>#define   ID_DECORATIVE 75 <br> <br>#define   ID_PIX_HEIGHT 80              /* Height of Characters */ <br>#define   ID_WIDTH 81                   /* Fixed or Maximum Width */ <br>#define   ID_WIDTH_TEXT 82              /* Caption for above */ <br>#define   ID_AVERAGE 83                 /* Average Character Width */ <br>#define   ID_FIXED 84                   /* Fixed Width Font */ <br>#define   ID_VARIABLE 85                /* Variable width font */ <br> <br>#define   ID_THIN 86 <br>#define   ID_EXTRALIGHT 87 <br>#define   ID_LIGHT 88 <br>#define   ID_NORMAL 89 <br>#define   ID_MEDIUM 90 <br>#define   ID_SEMIBOLD 91 <br>#define   ID_BOLD 92 <br>#define   ID_EXTRABOLD 93 <br>#define   ID_HEAVY 94 <br>#define   ID_BOXOPEN 96                /* dialog box frame id for File Open */ <br>#define   FONT_SAVEAS 97 <br> <br>#define   ID_FORMAT2 102                /* Windows 2.0 Font Format */ <br>#define   ID_FORMAT3 103                /* Windows 3.0 Font Format */ <br> <br>/* string IDS for strings in resource file - LR */ <br>#define IDS_NOMPTSIZENOTOK          0 <br>#define IDS_NOMVERTRESNOTOK         1 <br>#define IDS_NOMHORRESNOTOK          2 <br>#define IDS_ASCENTTOOBIG            3 <br>#define IDS_ASCENTNOTOK             4 <br>#define IDS_EXTLEADNOTOK            5 <br>#define IDS_INTLEADTOOBIG           6 <br>#define IDS_INTLEADNOTOK            7 <br>#define IDS_CHARSETOUTOFBOUNDS      8 <br>#define IDS_DEFCHAROUTSIDEFONT      9 <br>#define IDS_DEFCHARNOTOK           10 <br>#define IDS_BREAKCHAROUTSIDEFONT   11 <br>#define IDS_BREAKCHARNOTOK         12 <br>#define IDS_UNKNOWNFACE            13 <br>#define IDS_NOVARTOFIXCHANGE       14 <br>#define IDS_TOOBIGFOR20            15 <br>#define IDS_HEIGHTOUTOFBOUNDS      16 <br>#define IDS_WIDTHOUTOFBOUNDS       17 <br>#define IDS_CHAR1MORETHANDCHAR     18 <br>#define IDS_CHAR1NOTOK             19 <br>#define IDS_LASTCHARTOOSMALL       20 <br>#define IDS_LASTCHARNOTOK          21 <br>#define IDS_CANNOTOPENCLIP         22 <br>#define IDS_COPYINGTOCLIP          23 <br>#define IDS_NOTENOUGHMEM           24 <br>#define IDS_ALLOCATINGSPACE        25 <br>#define IDS_FONTEDIT               26 <br>#define IDS_FONTSHOW               27 <br>#define IDS_DOTFNT                 28 <br>#define IDS_BLANKDASHBLANK         29 <br>#define IDS_ERROROPENINGFILE       30 <br>#define IDS_ERRORREADINGHDR        31 <br>#define IDS_UNKNOWNFORMAT          32 <br>#define IDS_ERRORREADINGBODY       33 <br>#define IDS_FILETOOLARGE           34 <br>#define IDS_ERRORWRITINGHDR        35 <br>#define IDS_ERRORWRITINGOFFSETS    36 <br>#define IDS_ERRORWRITINGBODY       37 <br>#define IDS_STARDOTFNT             38 <br>#define IDS_UNKNOWN                39 <br>#define IDS_MAXWIDTH               40 <br>#define IDS_CHARPIXELWIDTH         41 <br>#define IDS_ABOUT                  42 <br>#define IDS_DHEADER                43 <br>#define IDS_DRESIZE                44 <br>#define IDS_DWIDTH                 45 <br>#define IDS_EDLIMITS0TO64          46 <br>#define IDS_MAXWIDTHINCREASE       47 <br>#define IDS_CANNOTCHANGEWIDTH      48 <br>#define IDS_WARNING                49 <br>#define IDS_INCORRECTPIXWIDTH      50 <br>#define IDS_MAXWIDTHOUTOFBOUNDS    51 <br>#define IDS_AVGWIDTHOUTOFBOUNDS    52 <br>#define IDS_WIDTHBYTESNOTOK        53 <br>#define IDS_BITSOFFSETNOTOK        54 <br>#define IDS_TABLEWIDTHSBAD         55 <br>#define IDS_TABLEOFFSETSBAD        56 <br>#define IDS_COLOR                  57 <br>#define IDS_APPWORKSPACE           58 <br>#define IDS_FILEREADONLY           59 <br> <br>#define     IDS_APPNAME            60 <br>#define     IDS_IFN                61 <br>#define     IDS_FNF                62 <br>#define     IDS_REF                63 <br>#define     IDS_SCC                64 <br>#define     IDS_EOF                65 <br>#define     IDS_ECF                66 <br>#define     IDS_FRO                67 <br>#define     IDS_EXT                68 <br>#define     IDS_EXTDESC            69 <br>#define     IDS_NEW_FONT           70 <br>#define     IDS_ERRORCLIP          71 <br>#define     IDS_CHAR72 <br>#define     IDS_WIDTH73 <br>#define     IDS_HEIGHT74 <br> <br> <br>#define CSTRINGS                   75   /* total number of strings in <br>                                           resource file */ <br>#define CCHSTRINGSMAX              4096 /* total length of all strings <br>                                           loaded must be &lt;= this */ <br>#define CCHCOLORSTRING             15   /* size of App Workspace color inf. <br>                                           string loaded from win.ini */ <br>#define ID_SHIFTJIS                76 <br> <br>/*****************************************************************************/ <br>/*              Typedef's etc.                                               */ <br>/*****************************************************************************/ <br> <br>// typedef unsigned char CHAR;  /* ... since we use these to index */ <br> <br>/* font file header (Adaptation Guide section 6.4) */ <br>typedef struct { <br>    WORD        Version;              /* Always 17985 for the Nonce */ <br>    DWORD       Size;                 /* Size of whole file */ <br>    CHAR        Copyright[60]; <br>    WORD        Type;                 /* Raster Font if Type &amp; 1 == 0 */ <br>    WORD        Points;               /* Nominal Point size */ <br>    WORD        VertRes;              /* Nominal Vertical resolution */ <br>    WORD        HorizRes;             /* Nominal Horizontal resolution */ <br>    WORD        Ascent;               /* Height of Ascent */ <br>    WORD        IntLeading;           /* Internal (Microsoft) Leading */ <br>    WORD        ExtLeading;           /* External (Microsoft) Leading */ <br>    BYTE        Italic;               /* Italic font if set */ <br>    BYTE        Underline;            /* Etc. */ <br>    BYTE        StrikeOut;            /* Etc. */ <br>    WORD        Weight;               /* Weight: 200 = regular */ <br>    BYTE        CharSet;              /* ANSI=0. other=255 */ <br>    WORD        PixWidth;             /* Fixed width. 0 ==&gt; Variable */ <br>    WORD        PixHeight;            /* Fixed Height */ <br>    BYTE        Family;               /* Pitch and Family */ <br>    WORD        AvgWidth;             /* Width of character 'X' */ <br>    WORD        MaxWidth;             /* Maximum width */ <br>    BYTE        FirstChar;            /* First character defined in font */ <br>    BYTE        LastChar;             /* Last character defined in font */ <br>    BYTE        DefaultChar;          /* Sub. for out of range chars. */ <br>    BYTE        BreakChar;            /* Word Break Character */ <br>    WORD        WidthBytes;           /* No.Bytes/row of Bitmap */ <br>    DWORD       Device;               /* Pointer to Device Name string */ <br>    DWORD       Face;                   /* Pointer to Face Name String */ <br>    DWORD       BitsPointer;            /* Pointer to Bit Map */ <br>    DWORD       BitsOffset;             /* Offset to Bit Map */ <br>} FontHeaderType;           /* Above pointers all rel. to start of file */ <br> <br> <br>typedef struct { <br>    WORD        fsVersion; <br>    DWORD       fsSize; <br>    CHAR        fsCopyright[60]; <br>    WORD        fsType;               /* Type field for the font              */ <br>    WORD        fsPoints;             /* Point size of font                   */ <br>    WORD        fsVertRes;            /* Vertical digitization                */ <br>    WORD        fsHorizRes;           /* Horizontal digitization              */ <br>    WORD        fsAscent;             /* Baseline offset from char cell top   */ <br>    WORD        fsInternalLeading;    /* Internal leading included in font    */ <br>    WORD        fsExternalLeading;    /* Prefered extra space between lines   */ <br>    BYTE        fsItalic;             /* Flag specifying if italic            */ <br>    BYTE        fsUnderline;          /* Flag specifying if underlined        */ <br>    BYTE        fsStrikeOut;          /* Flag specifying if struck out        */ <br>    WORD        fsWeight;             /* Weight of font                       */ <br>    BYTE        fsCharSet;            /* Character set of font                */ <br>    WORD        fsPixWidth;           /* Width field for the font             */ <br>    WORD        fsPixHeight;          /* Height field for the font            */ <br>    BYTE        fsPitchAndFamily;     /* Flag specifying pitch and family     */ <br>    WORD        fsAvgWidth;           /* Average character width              */ <br>    WORD        fsMaxWidth;           /* Maximum character width              */ <br>    BYTE        fsFirstChar;          /* First character in the font          */ <br>    BYTE        fsLastChar;           /* Last character in the font           */ <br>    BYTE        fsDefaultChar;        /* Default character for out of range   */ <br>    BYTE        fsBreakChar;          /* Character to define wordbreaks       */ <br>    WORD        fsWidthBytes;         /* Number of bytes in each row          */ <br>    DWORD       fsDevice;             /* Offset to device name                */ <br>    DWORD       fsFace;               /* Offset to face name                  */ <br>    DWORD       fsBitsPointer;        /* Bits pointer                         */ <br>    DWORD       fsBitsOffset;         /* Offset to the begining of the bitmap */ <br>BYTEfsDBfiller;  /* Word alignment for the offset table  */ <br> <br>    DWORD       fsFlags;              /* Bit flags                            */ <br>    WORD        fsAspace;             /* Global A space, if any               */ <br>    WORD        fsBspace;             /* Global B space, if any               */ <br>    WORD        fsCspace;             /* Global C space, if any               */ <br>    DWORD       fsColorPointer;       /* offset to color table, if any        */ <br>    DWORD       fsReserved[4];        /*                                      */ <br>    BYTE        fsCharOffset;         /* Area for storing the char. offsets   */ <br> <br>} FontHeader30; <br> <br>#define   CCHEXTRA             31     /* no. of extra bytes in the 3.0 header */ <br> <br>// <br>// These are the old glyph info structures.  Since they are not DWORD aligned <br>// they must be converted to new structure types. <br>// <br> <br>typedef struct{ <br>     SHORT GIwidth; <br>     SHORT GIoffset; <br>} GLYPHINFO_20; <br> <br>typedef struct{ <br>     SHORT GIwidth; <br>     LONG GIoffset; <br>} GLYPHINFO_30; <br> <br>#define ClipBoard TRUE <br> <br>LONG  APIENTRY FontEditWndProc(HWND, WORD, WPARAM, LONG); <br>LONG  APIENTRY FontShowWndProc(HWND, WORD, WPARAM, LONG); <br>BOOL  APIENTRY <br>HeaderProc( <br>HWND   hDial, <br>WORD   message, <br>WPARAM wParam, <br>LPARAM lParam <br>); <br>BOOL APIENTRY <br>ReSizeProc( <br>HWND   hDial, <br>WORD   message, <br>WPARAM wParam, <br>LPARAM lParam <br>); <br>BOOL  APIENTRY <br>WidthProc( <br>HWND   hDial, <br>WORD   message, <br>WPARAM wParam, <br>LPARAM lParam <br>); <br> <br>CHAR * FontLoad(CHAR *, OFSTRUCT *); <br>CHAR * FontSave(CHAR *, OFSTRUCT *); <br>BOOL ResizeBody();              /* Change Height of Font. MAde return type BOOL istead of VOID - LR */ <br>BOOL ResizeWidths();            /* Change Widths (Fixed Width Fonts).MAde return type BOOL istead of VOID - LR  */ <br>BOOL SpreadWidths(DWORD);            /* Change Widths (Var. Width Fonts). MAde return type BOOL istead of VOID - LR  */ <br>VOID DeleteGlobalBitmap(); <br>VOID ScrollFont(); <br>VOID ExciseChars();             /* Delete part of a font */ <br>BOOL <br>CharWidth( <br>    BYTE iChar,                             /* Character to change */ <br>    DWORD wBox                               /* New width */ <br>    ); <br>BOOL NewLastChar(DWORD);             /* MAde return type BOOL istead of VOID - LR */ <br>BOOL NewFirstChar(DWORD);            /* MAde return type BOOL istead of VOID - LR */ <br>#define kBoxLim 65  /* was 49 */ <br> <br>#define wBoxLim 65 <br>#define szNamesMax 32 <br>#define BLACK (LONG)0 <br>#define WHITE (LONG)0x00FFFFFF          /* For SetPixel rgbColor */ <br>#define FILENAMEMAX _MAX_PATH   /* Maximum allowed length of file names */ <br> <br>/********* <br> the following added 11-Sep-1986 to use dlgsave.c and dlgopen.c <br>**********/ <br>#define   IDD_OPEN 1    /* dialog box ids */ <br>#define   IDD_SAVE 2 <br>#define   IDD_FORMAT 3 <br> <br>#define     MAX_STR_LEN     128 <br>#define     MAX_FNAME_LEN   128 <br>#define     CBEXTMAX        6   /* Number of bytes in "\*.ext" */ <br> <br> <br>#define NOSAVE  0   /* return flags for DlgFnSave() */ <br>#define NEWSAVE 1 <br>#define OLDSAVE 2 <br> <br>#define NOOPEN  0   /* return flags for DlgFnOpen() */ <br>#define NEWOPEN 1 <br>#define OLDOPEN 2 <br> <br>#define WORD_LIMIT    65534    /* max. number of bytes that can be read(written) by */ <br>#define SEGMENT_SIZE  65536    /* segment length in bytes */ <br> <br>/* abbreviations for accessing resource strings - LR */ <br> <br>#define vszNomPtSizeNotOk       vrgsz[IDS_NOMPTSIZENOTOK      ] <br>#define vszNomVertResNotOk      vrgsz[IDS_NOMVERTRESNOTOK     ] <br>#define vszNomHorResNotOk       vrgsz[IDS_NOMHORRESNOTOK      ] <br>#define vszAscentTooBig         vrgsz[IDS_ASCENTTOOBIG        ] <br>#define vszAscentNotOk          vrgsz[IDS_ASCENTNOTOK         ] <br>#define vszExtLeadNotOk         vrgsz[IDS_EXTLEADNOTOK        ] <br>#define vszIntLeadTooBig        vrgsz[IDS_INTLEADTOOBIG       ] <br>#define vszIntLeadNotOk         vrgsz[IDS_INTLEADNOTOK        ] <br>#define vszCharSetOutOfBounds   vrgsz[IDS_CHARSETOUTOFBOUNDS  ] <br>#define vszDefCharOutsideFont   vrgsz[IDS_DEFCHAROUTSIDEFONT  ] <br>#define vszDefCharNotOk         vrgsz[IDS_DEFCHARNOTOK        ] <br>#define vszBreakCharOutsideFont vrgsz[IDS_BREAKCHAROUTSIDEFONT] <br>#define vszBreakCharNotOk       vrgsz[IDS_BREAKCHARNOTOK      ] <br>#define vszUnknownFace          vrgsz[IDS_UNKNOWNFACE         ] <br>#define vszNoVarToFixChange     vrgsz[IDS_NOVARTOFIXCHANGE    ] <br>#define vszTooBigFor20          vrgsz[IDS_TOOBIGFOR20         ] <br>#define vszHeightOutOfBounds    vrgsz[IDS_HEIGHTOUTOFBOUNDS   ] <br>#define vszWidthOutOfBounds     vrgsz[IDS_WIDTHOUTOFBOUNDS    ] <br>#define vszChar1MoreThanDChar   vrgsz[IDS_CHAR1MORETHANDCHAR  ] <br>#define vszChar1NotOk           vrgsz[IDS_CHAR1NOTOK          ] <br>#define vszLastCharTooSmall     vrgsz[IDS_LASTCHARTOOSMALL    ] <br>#define vszLastCharNotOk        vrgsz[IDS_LASTCHARNOTOK       ] <br>#define vszCannotOpenClip       vrgsz[IDS_CANNOTOPENCLIP      ] <br>#define vszCopyingToClip        vrgsz[IDS_COPYINGTOCLIP       ] <br>#define vszNotEnoughMem         vrgsz[IDS_NOTENOUGHMEM        ] <br>#define vszAllocatingSpace      vrgsz[IDS_ALLOCATINGSPACE     ] <br>#define vszFontEdit             vrgsz[IDS_FONTEDIT            ] <br>#define vszFontShow             vrgsz[IDS_FONTSHOW            ] <br>#define vszDotFNT               vrgsz[IDS_DOTFNT              ] <br>#define vszBlankDashBlank       vrgsz[IDS_BLANKDASHBLANK      ] <br>#define vszErrorOpeningFile     vrgsz[IDS_ERROROPENINGFILE    ] <br>#define vszErrorReadingHdr      vrgsz[IDS_ERRORREADINGHDR     ] <br>#define vszUnknownFormat        vrgsz[IDS_UNKNOWNFORMAT       ] <br>#define vszErrorReadingBody     vrgsz[IDS_ERRORREADINGBODY    ] <br>#define vszFileTooLarge         vrgsz[IDS_FILETOOLARGE        ] <br>#define vszErrorWritingHdr      vrgsz[IDS_ERRORWRITINGHDR     ] <br>#define vszErrorWritingOffsets  vrgsz[IDS_ERRORWRITINGOFFSETS ] <br>#define vszErrorWritingBody     vrgsz[IDS_ERRORWRITINGBODY    ] <br>#define vszStarDotFNT           vrgsz[IDS_STARDOTFNT          ] <br>#define vszUnknown              vrgsz[IDS_UNKNOWN             ] <br>#define vszMaxWidth             vrgsz[IDS_MAXWIDTH            ] <br>#define vszCharPixelWidth       vrgsz[IDS_CHARPIXELWIDTH      ] <br>#define vszABOUT                vrgsz[IDS_ABOUT               ] <br>#define vszDHeader              vrgsz[IDS_DHEADER             ] <br>#define vszDResize              vrgsz[IDS_DRESIZE             ] <br>#define vszDWidth               vrgsz[IDS_DWIDTH              ] <br>#define vszEdLimits0To64        vrgsz[IDS_EDLIMITS0TO64       ] <br>#define vszMaxWidthIncrease     vrgsz[IDS_MAXWIDTHINCREASE    ] <br>#define vszCannotChangeWidth    vrgsz[IDS_CANNOTCHANGEWIDTH   ] <br>#define vszWarning              vrgsz[IDS_WARNING             ] <br>#define vszIncorrectPixWidth    vrgsz[IDS_INCORRECTPIXWIDTH   ] <br>#define vszMaxWidthOutOfBounds  vrgsz[IDS_MAXWIDTHOUTOFBOUNDS ] <br>#define vszAvgWidthOutOfBounds  vrgsz[IDS_AVGWIDTHOUTOFBOUNDS ] <br>#define vszWidthBytesNotOk      vrgsz[IDS_WIDTHBYTESNOTOK     ] <br>#define vszBitsOffsetNotOk      vrgsz[IDS_BITSOFFSETNOTOK     ] <br>#define vszTableWidthsBad       vrgsz[IDS_TABLEWIDTHSBAD      ] <br>#define vszTableOffsetsBad      vrgsz[IDS_TABLEOFFSETSBAD     ] <br>#define vszcolors               vrgsz[IDS_COLOR               ] <br>#define vszAppWorkspace         vrgsz[IDS_APPWORKSPACE        ] <br>#define vszFileReadOnly         vrgsz[IDS_FILEREADONLY        ] <br>#define vszErrorClip            vrgsz[IDS_ERRORCLIP           ] <br>#define vszCHARvrgsz[IDS_CHAR] <br>#define vszWIDTHvrgsz[IDS_WIDTH] <br>#define vszHEIGHTvrgsz[IDS_HEIGHT] <br> <br> <br> <br>/*------ fontedit.c -------*/ <br>extern VOID ResizeShow(VOID); <br>extern VOID ScrollFont(VOID); <br>extern VOID CharToBox(BYTE); <br>extern VOID FontRename(CHAR *); <br>extern VOID BoxToChar(BYTE); <br>extern DWORD GetkStuff(VOID); <br> <br>/*------ fontload.c -------*/ <br>extern VOID ToClipboard(BYTE, DWORD, DWORD); <br>extern VOID BoxToClipboard(POINT, DWORD, DWORD); <br>extern DWORD ClipboardToBox(POINT, DWORD, DWORD, BOOL); <br> <br>/*------ fontdlg.c -------*/ <br>BOOL <br>CommDlgOpen ( <br>HWND   hWndParent,      /* window handle of parent window */ <br>OFSTRUCT *pOfstrIn,     /* ptr to current file OFSTRUCT (-&gt;cBytes=0 if no <br> * cur. file)*/ <br>CHAR  *pszNewNameIn,    /* ptr to array which will get new file's name */ <br>CHAR  *pszExtIn,        /* ptr to current default extension */ <br>CHAR  *pszAppNameIn,    /* ptr to application name */ <br>BOOL   fOpenType <br>); <br> <br>BOOL <br>CommDlgSaveAs( <br>HANDLE hInstance, <br>HWND   hWndParent,      /* window handle of parent window */ <br>OFSTRUCT *pOfstrIn,     /* ptr to current file OFSTRUCT (-&gt;cBytes=0 if no <br> * cur. file)*/ <br>CHAR  *pszNewNameIn,    /* ptr to array which will get new file's name <br> * (no path) */ <br>CHAR  *pszExtIn,        /* ptr to current default extension */ <br>CHAR  *pszAppNameIn     /* ptr to application name */ <br>); <br> <br>BOOL <br>DlgMergeStrings( <br>CHAR   *szSrc, <br>CHAR   *szMerge, <br>CHAR   *szDst <br>); <br> <br>/*------ fonthead.c -------*/ <br>extern VOID ErrorBox(HWND, CHAR *); <br> <br>/*------ fontchar.c -------*/ <br>extern VOID ClearBox(VOID); <br> <br>/*------ fontcvt.c --------*/ <br> <br>BOOL <br>fConvStructInit (); <br> <br>VOID <br>vFontStructFromBuffer ( <br>             PBYTE           pjSourceBuff, <br>            FontHeaderType  *pfhDestFHStruct <br>        ); <br> <br>VOID <br>vBufferFromFontStruct ( <br>             FontHeaderType  *pfhSourceFHStruct, <br>            PBYTE           pjDestBuff <br>        ); <br> <br>VOID <br>vBufferFromFont30Struct ( <br>             FontHeader30    *pfh3SourceFH3Struct, <br>            PBYTE           pjDestBuff <br>        ); <br> <br>VOID <br>vGlyphInfo20FromBuffer ( <br>             PBYTE           pjSourceBuff, <br>            GLYPHINFO_20   *pgi2DestGI2Struct <br>        ); <br> <br>VOID <br>vGlyphInfo30FromBuffer ( <br>             PBYTE           pjSourceBuff, <br>            GLYPHINFO_30   *pgi3DestGI3Struct <br>        ); <br> <br>VOID <br>vBufferFromGlyphInfo20 ( <br>             GLYPHINFO_20    *pgi2SrcGI2Struct, <br>            PBYTE           pjDestBuff <br>        ); <br> <br>VOID <br>vBufferFromGlyphInfo30 ( <br>             GLYPHINFO_30    *pgi3SrcGI3Struct, <br>            PBYTE           pjDestBuff <br>        ); <br> <br>// dword alligned size of DIB scan in bytes <br>#define CJ_DIB_SCAN(cx)  ((((cx) + 31) &amp; ~31) &gt;&gt; 3) <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FONTCVT.C</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5391"></a>FONTCVT.C</h2>
<pre><code>/*++ <br> <br>Copyright 1993 - 1998 Microsoft Corporation <br> <br>Module Name: <br> <br>    fontcvt.c <br> <br>Abstract: <br> <br>    Font Editor specific routines for interface to the type conversion <br>    functions in Typecvt.c. <br> <br> <br>--*/ <br> <br> <br>#include "windows.h" <br>#include &lt;windowsx.h&gt; <br>#include "typecvt.h" <br>#include "fontedit.h" <br> <br> <br>extern LONG lSizeOfOldFontHeader;       /* Old packed font header size. */ <br>extern LONG lSizeOfOldFontHeader30;     /* Old 3.0 packed font header size. */ <br>extern LONG lSizeOfOldGlyph20;/* Old packed glyph 2.0 structure. */ <br>extern LONG lSizeOfOldGlyph30;/* Old packed glyph 3.0 structure. */ <br> <br>  <br>// <br>// The following is a definition of the current 2.0 font header structure. <br>// This is the same as the old structure except that it will now be stored <br>// DWORD aligned in memory. <br>// <br>// First, we give it the size of the element type (as it was under Win 3.0). <br>// Second, we give it the actual size of the element.  These will only differ <br>//  if the element is some sort of array. <br>// <br>// Note that it is important that this array accurately reflect any changes <br>// in the actual structure.  When CalculateStructOffsets is called it will <br>// return an error if the structure does not match in size, but it cannot <br>// detect swapped element errors. <br>// <br> <br>#define pfh2T   ((FontHeaderType *)NULL) <br> <br>SDI     rgsdiFontHeader [] = <br>{ <br>{ sizeof (WORD),  sizeof (pfh2T-&gt;Version)}, <br>{ sizeof (DWORD), sizeof (pfh2T-&gt;Size)}, <br>{ sizeof (CHAR),  sizeof (pfh2T-&gt;Copyright)}, <br>{ sizeof (WORD),  sizeof (pfh2T-&gt;Type)}, <br>{ sizeof (WORD),  sizeof (pfh2T-&gt;Points)}, <br>{ sizeof (WORD),  sizeof (pfh2T-&gt;VertRes)}, <br>{ sizeof (WORD),  sizeof (pfh2T-&gt;HorizRes)}, <br>{ sizeof (WORD),  sizeof (pfh2T-&gt;Ascent)}, <br>{ sizeof (WORD),  sizeof (pfh2T-&gt;IntLeading)}, <br>{ sizeof (WORD),  sizeof (pfh2T-&gt;ExtLeading)}, <br>{ sizeof (BYTE),  sizeof (pfh2T-&gt;Italic)}, <br>{ sizeof (BYTE),  sizeof (pfh2T-&gt;Underline)}, <br>{ sizeof (BYTE),  sizeof (pfh2T-&gt;StrikeOut)}, <br>{ sizeof (WORD),  sizeof (pfh2T-&gt;Weight)}, <br>{ sizeof (BYTE),  sizeof (pfh2T-&gt;CharSet)}, <br>{ sizeof (WORD),  sizeof (pfh2T-&gt;PixWidth)}, <br>{ sizeof (WORD),  sizeof (pfh2T-&gt;PixHeight)}, <br>{ sizeof (BYTE),  sizeof (pfh2T-&gt;Family)}, <br>{ sizeof (WORD),  sizeof (pfh2T-&gt;AvgWidth)}, <br>{ sizeof (WORD),  sizeof (pfh2T-&gt;MaxWidth)}, <br>{ sizeof (BYTE),  sizeof (pfh2T-&gt;FirstChar)}, <br>{ sizeof (BYTE),  sizeof (pfh2T-&gt;LastChar)}, <br>{ sizeof (BYTE),  sizeof (pfh2T-&gt;DefaultChar)}, <br>{ sizeof (BYTE),  sizeof (pfh2T-&gt;BreakChar)}, <br>{ sizeof (WORD),  sizeof (pfh2T-&gt;WidthBytes)}, <br>{ sizeof (DWORD), sizeof (pfh2T-&gt;Device)}, <br>{ sizeof (DWORD), sizeof (pfh2T-&gt;Face)}, <br>{ sizeof (DWORD), sizeof (pfh2T-&gt;BitsPointer)}, <br>{ sizeof (DWORD), sizeof (pfh2T-&gt;BitsOffset)}, <br>{ 0, 0 } <br>}; <br> <br>// <br>// The following is the current font 3.0 header.  This structure has not <br>// changed at all.  Note that it will contain filler between elements to <br>// maintain DWORD alignment. <br>// <br> <br>#define pfh3T   ((FontHeader30 *)NULL) <br> <br>SDI     rgsdiFontHeader30 [] = <br>{ <br>{ sizeof (WORD), sizeof (pfh3T-&gt;fsVersion)}, <br>{ sizeof (DWORD),  sizeof (pfh3T-&gt;fsSize)}, <br>{ sizeof (CHAR),  sizeof (pfh3T-&gt;fsCopyright)}, <br>{ sizeof (WORD), sizeof (pfh3T-&gt;fsType)}, <br>{ sizeof (WORD), sizeof (pfh3T-&gt;fsPoints)}, <br>{ sizeof (WORD), sizeof (pfh3T-&gt;fsVertRes)}, <br>{ sizeof (WORD), sizeof (pfh3T-&gt;fsHorizRes)}, <br>{ sizeof (WORD), sizeof (pfh3T-&gt;fsAscent)}, <br>{ sizeof (WORD), sizeof (pfh3T-&gt;fsInternalLeading)}, <br>{ sizeof (WORD), sizeof (pfh3T-&gt;fsExternalLeading)}, <br>{ sizeof (BYTE),  sizeof (pfh3T-&gt;fsItalic)}, <br>{ sizeof (BYTE),  sizeof (pfh3T-&gt;fsUnderline)}, <br>{ sizeof (BYTE),  sizeof (pfh3T-&gt;fsStrikeOut)}, <br>{ sizeof (WORD), sizeof (pfh3T-&gt;fsWeight)}, <br>{ sizeof (BYTE),  sizeof (pfh3T-&gt;fsCharSet)}, <br>{ sizeof (WORD), sizeof (pfh3T-&gt;fsPixWidth)}, <br>{ sizeof (WORD), sizeof (pfh3T-&gt;fsPixHeight)}, <br>{ sizeof (BYTE),  sizeof (pfh3T-&gt;fsPitchAndFamily)}, <br>{ sizeof (WORD), sizeof (pfh3T-&gt;fsAvgWidth)}, <br>{ sizeof (WORD), sizeof (pfh3T-&gt;fsMaxWidth)}, <br>{ sizeof (BYTE),  sizeof (pfh3T-&gt;fsFirstChar)}, <br>{ sizeof (BYTE),  sizeof (pfh3T-&gt;fsLastChar)}, <br>{ sizeof (BYTE),  sizeof (pfh3T-&gt;fsDefaultChar)}, <br>{ sizeof (BYTE),  sizeof (pfh3T-&gt;fsBreakChar)}, <br>{ sizeof (WORD), sizeof (pfh3T-&gt;fsWidthBytes)}, <br>{ sizeof (DWORD),  sizeof (pfh3T-&gt;fsDevice)}, <br>{ sizeof (DWORD),  sizeof (pfh3T-&gt;fsFace)}, <br>{ sizeof (DWORD),  sizeof (pfh3T-&gt;fsBitsPointer)}, <br>{ sizeof (DWORD),  sizeof (pfh3T-&gt;fsBitsOffset)}, <br>{ sizeof (CHAR),  sizeof (pfh3T-&gt;fsDBfiller)}, <br>{ sizeof (DWORD),  sizeof (pfh3T-&gt;fsFlags)}, <br>{ sizeof (WORD), sizeof (pfh3T-&gt;fsAspace)}, <br>{ sizeof (WORD), sizeof (pfh3T-&gt;fsBspace)}, <br>{ sizeof (WORD), sizeof (pfh3T-&gt;fsCspace)}, <br>{ sizeof (DWORD),  sizeof (pfh3T-&gt;fsColorPointer)}, <br>{ sizeof (DWORD),  sizeof (pfh3T-&gt;fsReserved)}, <br>{ sizeof (CHAR),  sizeof (pfh3T-&gt;fsCharOffset)}, <br>{ 0, 0 } <br>}; <br> <br>// <br>// The following definition is for the GlyphInfo20 structure.  These <br>// structures are read off of disk and then converted into memory. <br>// <br> <br>#define pgi2T   ((GLYPHINFO_20 *)NULL) <br> <br>SDI     rgsdiGlyph20 [] = <br>{ <br>{ sizeof (SHORT),   sizeof (pgi2T-&gt;GIwidth)}, <br>{ sizeof (SHORT),   sizeof (pgi2T-&gt;GIoffset)}, <br>{ 0, 0 } <br>}; <br> <br>// <br>// The following definition is for the GlyphInfo30 structure.  These <br>// structures are read off of disk and then converted into memory. <br>// <br> <br>#define pgi3T   ((GLYPHINFO_30 *)NULL) <br> <br>SDI     rgsdiGlyph30 [] = <br>{ <br>{ sizeof (SHORT),  sizeof (pgi3T-&gt;GIwidth)}, <br>{ sizeof (LONG), sizeof (pgi3T-&gt;GIoffset)}, <br>{ 0, 0 } <br>}; <br> <br> <br>  <br>BOOL <br>fConvStructInit () <br> <br>/*++ <br> <br>Routine Description: <br> <br>    This function performs all the necessary initialization on the font <br>    editor's structure definition info strucrures (SDI) and type conversion <br>    structures (TCI).  This routine should be called before either <br>    FontStructFromBuffer or BufferFromFontStruct are called. <br>    It is also important that this function be called before the global <br>    variable ulOldFontHeaderSize is accessed. <br> <br>Arguments: <br> <br>    None.  The function accesses the global definition structures and sets <br>    the variable ulOldFontHeaderSize to the size of the packed font header <br>    structure. <br> <br>Return Value: <br> <br>    BOOL - TRUE = the function successfully initialized all internal <br>            strucutres. <br>           FALSE = there was an error in one of the structure definitions. <br>            This is usually caused by element changes which are not reflected <br>            in the structure definition.  The program should perform an <br>            assertion failure if this is the case. <br>    Also, the global variable ulOldFontHeaderSize is set to the size of the <br>        packed font header structure. <br> <br>--*/ <br> <br>{ <br>    // <br>    // Calculate all of the element offsets for the old font header structure. <br>    // The function will return the size of the structure in packed format. <br>    // <br>    lSizeOfOldFontHeader = lCalculateStructOffsets ( <br>             rgsdiFontHeader,           // Give it the struct definition. <br>             CVT_ALIGN_PACKED,          // Alignment type is packed on disk. <br> sizeof (FontHeaderType) <br>            ); <br> <br>    // <br>    // If CalculateStructOffsets returns -1 then there was a problem with <br>    // structure definition.  The only types of error it can find is if the <br>    // structure size it is passed does not match the one it calculates. <br>    // <br>    if (lSizeOfOldFontHeader == -1) { <br>        return (FALSE); <br>    } <br> <br>    // <br>    // Calculate The size of the old font 3.0 structure. <br>    // The function will return the size of the structure in packed format. <br>    // <br> <br>    lSizeOfOldFontHeader30 = lCalculateStructOffsets ( <br>             rgsdiFontHeader30,         // Give it the new font header struct. <br>             CVT_ALIGN_PACKED,          // Alignment type is packed on disk. <br> sizeof (FontHeader30) <br>            ); <br> <br>    // <br>    // Check if the routine detected and error in the structure definition. <br>    // <br>    if (lSizeOfOldFontHeader30 == -1) { <br>        return (FALSE); <br>    } <br> <br>    // <br>    // Now do the same operations on the glyph information structures. <br>    // <br> <br>    lSizeOfOldGlyph20 = lCalculateStructOffsets ( <br>rgsdiGlyph20, <br>CVT_ALIGN_PACKED, <br>sizeof (GLYPHINFO_20) <br>); <br> <br>    if (lSizeOfOldGlyph20 == -1) { <br>        return (FALSE); <br>    } <br> <br>    lSizeOfOldGlyph30 = lCalculateStructOffsets ( <br>rgsdiGlyph30, <br>CVT_ALIGN_PACKED, <br>sizeof (GLYPHINFO_30) <br>); <br> <br>    if (lSizeOfOldGlyph30 == -1) { <br>        return (FALSE); <br>    } <br> <br>    return (TRUE);      // No error found. <br>} <br> <br>  <br>VOID <br>vFontStructFromBuffer ( <br>             PBYTE           pjSourceBuff, <br>             FontHeaderType  *pfhDestFHStruct <br>        ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    This function provides an interface to the font editor for the strutcture <br>    type conversion routines. <br>    It essentially just calls the typecvt routines but hides the details from <br>    the font editor. <br> <br>Arguments: <br> <br>    pjSourceBuff    - This is a pointer to the source buffer with the old <br>                      packed font header information.  This buffer is from a <br>                      memory mapped disk file. <br> <br>    pfhDestFHStruct - This is a pointer to the destination FontHeaderType <br>                      structure.  This structure is of the new DWORD aligned <br>                      type. <br> <br>Return Value: <br> <br>    None. <br> <br>--*/ <br> <br>{ <br>    vPerformConversion ( <br> rgsdiFontHeader,// Give it the structure description. <br>             pjSourceBuff,// Give it our source file buffer. <br> CVT_ALIGN_PACKED,// File is packed alignment. <br> CVT_FILE_ENDIAN_DEFAULT,// Use file endian type (little). <br>             (PBYTE)pfhDestFHStruct,// Give it our destination buffer. <br> CVT_ALIGN_SYSTEM,// Use the current system aligment. <br> CVT_ENDIAN_SYSTEM// Use the current system endian. <br>            ); <br>} <br> <br>  <br>VOID <br>vBufferFromFontStruct ( <br>             FontHeaderType  *pfhSrcFHStruct, <br>             PBYTE           pjDestBuff <br>        ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    This function provides an interface to the font editor for the strutcture <br>    type conversion routines. <br>    It converts a source structure of type FontHeaderType to a destination <br>    buffer which can then be written out to disk. <br>    It essentially just calls the typecvt routines but hides the details from <br>    the font editor. <br> <br>Arguments: <br> <br>    pfhSrcFHStruct  - This is a pointer to the source FontHeaderType structure. <br>                      This structure is of the new DWORD aligned type. <br> <br>    pjDestBuff  -     This is a pointer to the destination buffer which will <br>                      hold the old packed font header structure. <br>                      This buffer is from a memory mapped disk file. <br> <br>Return Value: <br> <br>    None. <br> <br>--*/ <br> <br>{ <br>    vPerformConversion ( <br> rgsdiFontHeader,// Give it the structure description. <br>             (PBYTE)pfhSrcFHStruct,// Give it our destination buffer. <br> CVT_ALIGN_SYSTEM,// Use the current system aligment. <br> CVT_ENDIAN_SYSTEM,// Use the current system endian. <br>             pjDestBuff,// Give it our source file buffer. <br> CVT_ALIGN_PACKED,// File is packed alignment. <br> CVT_FILE_ENDIAN_DEFAULT// Use file endian type (little). <br>            ); <br>} <br> <br>  <br>VOID <br>vBufferFromFont30Struct ( <br>             FontHeader30    *pfh3SrcFH3Struct, <br>             PBYTE           pjDestBuff <br>        ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    This function provides an interface to the font editor for the strutcture <br>    type conversion routines. <br>    It converts a source structure of type FontHeader30 to a destination <br>    buffer which can then be written out to disk. <br>    It essentially just calls the typecvt routines but hides the details from <br>    the font editor. <br> <br>Arguments: <br> <br>    pfh3SrcFH3Struct- This is a pointer to the source FontHeader30 structure. <br>                      This structure is of the new DWORD aligned type. <br> <br>    pjDestBuff  -     This is a pointer to the destination buffer which will <br>                      hold the old packed font header structure. <br>                      This buffer is from a memory mapped disk file. <br> <br>Return Value: <br> <br>    None. <br> <br>--*/ <br> <br>{ <br>    vPerformConversion ( <br> rgsdiFontHeader30,// Give it the structure description. <br>             (PBYTE)pfh3SrcFH3Struct,// Give it our destination buffer. <br> CVT_ALIGN_SYSTEM,// Use the current system aligment. <br> CVT_ENDIAN_SYSTEM,// Use the current system endian. <br>             pjDestBuff,// Give it our source file buffer. <br> CVT_ALIGN_PACKED,// File is packed alignment. <br> CVT_FILE_ENDIAN_DEFAULT// Use file endian type (little). <br>            ); <br>} <br> <br>  <br>VOID <br>vGlyphInfo20FromBuffer ( <br>             PBYTE           pjSourceBuff, <br>             GLYPHINFO_20   *pgi2DestGI2Struct <br>        ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    This function provides an interface to the font editor for the strutcture <br>    type conversion routines. <br>    It essentially just calls the typecvt routines but hides the details from <br>    the font editor. <br> <br>Arguments: <br> <br>    pjSourceBuff    - This is a pointer to the source buffer with the old <br>                      packed font header information.  This buffer is from a <br>                      memory mapped disk file. <br> <br>    pgi2DestGI2Struct - This is a pointer to the destination GLYPHINFO_20 <br>                      structure.  This structure is of the new DWORD aligned <br>                      type. <br> <br>Return Value: <br> <br>    None. <br> <br>--*/ <br> <br>{ <br>    vPerformConversion ( <br> rgsdiGlyph20,// Give it the structure description. <br>             pjSourceBuff,// Give it our source file buffer. <br> CVT_ALIGN_PACKED,// File is packed alignment. <br> CVT_FILE_ENDIAN_DEFAULT,// Use file endian type (little). <br>             (PBYTE)pgi2DestGI2Struct,// Give it our destination buffer. <br> CVT_ALIGN_SYSTEM,// Use the current system aligment. <br> CVT_ENDIAN_SYSTEM// Use the current system endian. <br>            ); <br>} <br> <br>  <br>VOID <br>vGlyphInfo30FromBuffer ( <br>             PBYTE           pjSourceBuff, <br>             GLYPHINFO_30   *pgi3DestGI3Struct <br>        ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    This function provides an interface to the font editor for the strutcture <br>    type conversion routines. <br>    It essentially just calls the typecvt routines but hides the details from <br>    the font editor. <br> <br>Arguments: <br> <br>    pjSourceBuff    - This is a pointer to the source buffer with the old <br>                      packed font header information.  This buffer is from a <br>                      memory mapped disk file. <br> <br>    pgi3DestGI3Struct - This is a pointer to the destination GLYPHINFO_30 <br>                      structure.  This structure is of the new DWORD aligned <br>                      type. <br> <br>Return Value: <br> <br>    None. <br> <br>--*/ <br> <br>{ <br>    vPerformConversion ( <br> rgsdiGlyph30,// Give it the structure description. <br>             pjSourceBuff,// Give it our source file buffer. <br> CVT_ALIGN_PACKED,// File is packed alignment. <br> CVT_FILE_ENDIAN_DEFAULT,// Use file endian type (little). <br>             (PBYTE)pgi3DestGI3Struct,// Give it our destination buffer. <br> CVT_ALIGN_SYSTEM,// Use the current system aligment. <br> CVT_ENDIAN_SYSTEM// Use the current system endian. <br>            ); <br>} <br> <br>  <br>VOID <br>vBufferFromGlyphInfo20 ( <br>             GLYPHINFO_20   *pgi2SrcGI2Struct, <br>             PBYTE           pjDestBuff <br>        ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    This function provides an interface to the font editor for the strutcture <br>    type conversion routines. <br>    It converts a source structure of type GLYPHINFO_20 to a destination <br>    buffer which can then be written out to disk. <br>    It essentially just calls the typecvt routines but hides the details from <br>    the font editor. <br> <br>Arguments: <br> <br>    pgi2SrcGI2Struct- This is a pointer to the source GLYPHINFO_20 structure. <br>                      This structure is of the new DWORD aligned type. <br> <br>    pjDestBuff  -     This is a pointer to the destination buffer which will <br>                      hold the old packed font header structure. <br>                      This buffer is from a memory mapped disk file. <br> <br>Return Value: <br> <br>    None. <br> <br>--*/ <br> <br>{ <br>    vPerformConversion ( <br> rgsdiGlyph20,// Give it the structure description. <br>             (PBYTE)pgi2SrcGI2Struct,// Give it our destination buffer. <br> CVT_ALIGN_SYSTEM,// Use the current system aligment. <br> CVT_ENDIAN_SYSTEM,// Use the current system endian. <br>             pjDestBuff,// Give it our source file buffer. <br> CVT_ALIGN_PACKED,// File is packed alignment. <br> CVT_FILE_ENDIAN_DEFAULT// Use file endian type (little). <br>            ); <br>} <br> <br>  <br>VOID <br>vBufferFromGlyphInfo30 ( <br>             GLYPHINFO_30   *pgi3SrcGI3Struct, <br>             PBYTE           pjDestBuff <br>        ) <br> <br>/*++ <br> <br>Routine Description: <br> <br>    This function provides an interface to the font editor for the strutcture <br>    type conversion routines. <br>    It converts a source structure of type GLYPHINFO_30 to a destination <br>    buffer which can then be written out to disk. <br>    It essentially just calls the typecvt routines but hides the details from <br>    the font editor. <br> <br>Arguments: <br> <br>    pgi3SrcGI3Struct- This is a pointer to the source GLYPHINFO_30 structure. <br>                      This structure is of the new DWORD aligned type. <br> <br>    pjDestBuff  -     This is a pointer to the destination buffer which will <br>                      hold the old packed font header structure. <br>                      This buffer is from a memory mapped disk file. <br> <br>Return Value: <br> <br>    None. <br> <br>--*/ <br> <br>{ <br>    vPerformConversion ( <br> rgsdiGlyph30,// Give it the structure description. <br>             (PBYTE)pgi3SrcGI3Struct,// Give it our destination buffer. <br> CVT_ALIGN_SYSTEM,// Use the current system aligment. <br> CVT_ENDIAN_SYSTEM,// Use the current system endian. <br>             pjDestBuff,// Give it our source file buffer. <br> CVT_ALIGN_PACKED,// File is packed alignment. <br> CVT_FILE_ENDIAN_DEFAULT// Use file endian type (little). <br>            ); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

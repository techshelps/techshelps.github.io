<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IEFUNCS.H</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5474"></a>IEFUNCS.H</h2>
<pre><code>/****************************************************************************/ <br>    /*                                                                          */ <br>    /*                 Copyright (C) 1987-1996 Microsoft Corp.                */ <br>    /*                           All Rights Reserved                            */ <br>    /*                                                                          */ <br>    /****************************************************************************/ <br>    /****************************** Module Header ******************************* <br>    * Module Name: iefuncs.h <br>    * <br>    * Function declarations for the Image Editor. <br>    * <br>    * History: <br>    * <br>    ****************************************************************************/ <br>     <br>     <br>     <br>    /* <br>     * colorwp.c <br>     */ <br>     <br>    VOID ColorShow(BOOL fShow); <br>    DIALOGPROC ColorDlgProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam); <br>    WINDOWPROC ColorBoxWndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam); <br>    WINDOWPROC ColorLRWndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam); <br>    VOID SetScreenColor(DWORD rgb); <br>    VOID SetColorPalette(INT nColors, INT fImageType, BOOL fForce); <br>    VOID RestoreDefaultColors(VOID); <br>     <br>     <br>    /* <br>     * devinfo.c <br>     */ <br>     <br>    VOID InitDeviceList(VOID); <br>    PDEVICE DeviceLinkAlloc(INT iType, PSTR pszName, INT nColors, INT cx, INT cy); <br>    PDEVICE DeviceLinkFind(PDEVICE pDeviceHead, INT nColors, INT cx, INT cy); <br>    BOOL DeviceLinkUsed(PDEVICE pDevice); <br>     <br>     <br>    /* <br>     * file.c <br>     */ <br>     <br>    VOID SetFileName(PSTR pszFullFileName); <br>    PSTR FileInPath(PSTR pstrPath); <br>    VOID ClearResource(VOID); <br>    BOOL OpenDlg(PSTR pszFileName, INT iType); <br>    BOOL SaveAsDlg(PSTR pszFileName, INT iType); <br>    DIALOGPROC GetOpenFileNameHook(HWND hwnd, UINT msg, WPARAM wParam, <br>        LPARAM lParam); <br>    BOOL VerifySaveFile(VOID); <br>    BOOL SaveFile(BOOL fSaveAs); <br>    BOOL OpenAFile(VOID); <br>    VOID OpenCmdLineFile(PSTR pstrFileName); <br>    BOOL MyFileRead(HFILE hf, LPSTR lpBuffer, UINT nBytes, PSTR pszFileName, <br>        INT iType); <br>    BOOL MyFileWrite(HFILE hf, LPSTR lpBuffer, UINT nBytes, PSTR pszFileName); <br>     <br>     <br>    /* <br>     * icclip.c <br>     */ <br>     <br>    BOOL CopyImageClip(VOID); <br>    BOOL PasteImageClip(VOID); <br>    DIALOGPROC PasteOptionsDlgProc(HWND hwnd, UINT msg, WPARAM wParam, <br>        LPARAM lParam); <br>    VOID PickSetRect(INT xLeft, INT yTop, INT xRight, INT yBottom); <br>     <br>     <br>    /* <br>     * image.c <br>     */ <br>     <br>    BOOL ImageNew(PDEVICE pDevice); <br>    BOOL ImageNewBitmap(INT cx, INT cy, INT nColors); <br>    BOOL ImageOpen(PIMAGEINFO pImage); <br>    BOOL ImageOpen2(PIMAGEINFO pImage); <br>    VOID ImageSave(VOID); <br>     <br>     <br>    /* <br>     * imagedc.c <br>     */ <br>     <br>    BOOL ImageDCCreate(INT iType, INT cx, INT cy, INT nColors); <br>    VOID ImageDCDelete(VOID); <br>    VOID ImageDCClear(VOID); <br>    VOID ImageDCSeparate(HDC hdcImage, INT cx, INT cy, HDC hdcANDMask, <br>        DWORD rgbScreen); <br>    VOID ImageDCCombine(HDC hdcImage, INT cx, INT cy, HDC hdcANDMask); <br>    VOID ImageDCMonoBlt(HDC hdcImage, INT cx, INT cy); <br>     <br>     <br>    /* <br>     * imagedit.c <br>     */ <br>     <br>    WINDOWPROC MainWndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam); <br>    BOOL ReadWindowPos(PSTR pstrKeyName, PINT px, PINT py, PINT pcx, PINT pcy, <br>        BOOL *pfMaximized); <br>    VOID WriteWindowPos(PRECT prc, BOOL fMaximized, PSTR pstrKeyName); <br>     <br>     <br>    /* <br>     * imagedlg.c <br>     */ <br>     <br>    INT DlgBox(INT idDlg, WNDPROC lpfnDlg); <br>    VOID EnteringDialog(INT idDlg, PINT pidPrevDlg, BOOL fEntering); <br>    VOID ImageNewDialog(INT iType); <br>    VOID ImageSelectDialog(VOID); <br>    DIALOGPROC ResourceTypeDlgProc(HWND hwnd, UINT msg, WPARAM wParam, <br>        LPARAM lParam); <br>    DIALOGPROC NewCursorImageDlgProc(HWND hwnd, UINT msg, WPARAM wParam, <br>        LPARAM lParam); <br>    DIALOGPROC NewIconImageDlgProc(HWND hwnd, UINT msg, WPARAM wParam, <br>        LPARAM lParam); <br>    DIALOGPROC SelectImageDlgProc(HWND hwnd, UINT msg, WPARAM wParam, <br>        LPARAM lParam); <br>    DIALOGPROC BitmapSizeDlgProc(HWND hwnd, UINT msg, WPARAM wParam, <br>        LPARAM lParam); <br>     <br>     <br>    /* <br>     * imaglink.c <br>     */ <br>     <br>    PIMAGEINFO ImageLinkAlloc(PDEVICE pDevice, INT cx, INT cy, INT xHotSpot, <br>        INT yHotSpot, INT nColors); <br>    VOID ImageLinkFree(PIMAGEINFO pImageFree); <br>    VOID ImageLinkFreeList(VOID); <br>    VOID ImageDelete(VOID); <br>     <br>     <br>    /* <br>     * imagundo.c <br>     */ <br>     <br>    VOID ImageUndo(VOID); <br>    VOID ImageUpdateUndo(VOID); <br>    VOID ImageFreeUndo(VOID); <br>     <br>     <br>    /* <br>     * menucmd.c <br>     */ <br>     <br>    VOID InitMenu(HMENU hMenu); <br>    VOID MenuCmd(INT item); <br>    DWORD  APIENTRY MsgFilterHookFunc(INT nCode, WPARAM wParam, LPMSG lpMsg); <br>    VOID ShowHelp(BOOL fMenuHelp); <br>    DIALOGPROC AboutDlgProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam); <br>     <br>     <br>    /* <br>     * rwbmp.c <br>     */ <br>     <br>    BOOL LoadBitmapFile(PSTR pszFullFileName); <br>    BOOL SaveBitmapFile(PSTR pszFullFileName); <br>     <br>     <br>    /* <br>     * rwicocur.c <br>     */ <br>     <br>    BOOL LoadIconCursorFile(PSTR pszFullFileName, BOOL fIcon); <br>    BOOL IsValidDIB(LPBITMAPINFO pDIB, DWORD cbDIBSize, BOOL fIcoCur); <br>    BOOL SaveIconCursorFile(PSTR pszFullFileName, INT iType); <br>     <br>     <br>    /* <br>     * rwpal.c <br>     */ <br>     <br>    VOID LoadColorFile(VOID); <br>    VOID SaveColorFile(VOID); <br>     <br>     <br>    /* <br>     * propbar.c <br>     */ <br>     <br>    DIALOGPROC PropBarDlgProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam); <br>    VOID PropBarUpdate(VOID); <br>    VOID PropBarSetImage(PIMAGEINFO pImage); <br>    VOID PropBarSetPos(INT x, INT y); <br>    VOID PropBarClearPos(VOID); <br>    VOID PropBarSetSize(POINT pt1, POINT pt2); <br>    VOID PropBarClearSize(VOID); <br>    VOID PropBarSetHotSpot(INT xHotSpot, INT yHotSpot); <br>    VOID PropBarClearHotSpot(VOID); <br>    VOID PropBarShowHotSpot(BOOL fShow); <br>     <br>     <br>    /* <br>     * toolbox.c <br>     */ <br>     <br>    VOID ToolboxCreate(VOID); <br>    VOID ToolboxShow(BOOL fShow); <br>    VOID ToolboxUpdate(VOID); <br>    WINDOWPROC ToolboxWndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam); <br>    WINDOWPROC ToolBtnWndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam); <br>    VOID ToolboxSelectTool(INT tool); <br>     <br>     <br>    /* <br>     * util.c <br>     */ <br>     <br>    VOID *MyAlloc(INT cbAlloc); <br>    VOID *MyRealloc(VOID *npMem, INT cbNewAlloc); <br>    VOID *MyFree(VOID *npMem); <br>    INT Message(UINT idMsg, ...); <br>    VOID CenterWindow(HWND hwnd); <br>    VOID FitRectToScreen(PRECT prc); <br>    PSTR ids(UINT idString); <br>    HBITMAP MyCreateBitmap(HDC hdc, INT cx, INT cy, INT nColors); <br>     <br>    #if defined(DBG) &amp;&amp; defined(WIN16) <br>    VOID DBGStackReport(BOOL fInit); <br>    #else <br>    #define DBGStackReport(fInit) <br>    #endif <br>     <br>    #ifdef DBG <br>    VOID DBGBltImage(HDC hdc); <br>    VOID DBGprintf(PSTR fmt, ...); <br>    #else <br>    #define DBGBltImage(hdc) <br>    #define DBGprintf <br>    #endif <br>     <br>     <br>    /* <br>     * viewwp.c <br>     */ <br>     <br>    VOID ViewCreate(VOID); <br>    VOID ViewShow(BOOL fShow); <br>    VOID ViewUpdate(VOID); <br>    VOID ViewReset(VOID); <br>    WINDOWPROC ViewWndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam); <br>    VOID ViewSetPixel(INT x, INT y, INT nBrushSize); <br>    VOID DrawMarginBorder(HWND hwnd, HDC hdc); <br>    VOID DrawSunkenRect(PRECT prc, HDC hdc); <br>     <br>     <br>    /* <br>     * workwp.c <br>     */ <br>     <br>    WINDOWPROC WorkWndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam); <br>    VOID WorkUpdate(VOID); <br>    VOID WorkReset(VOID); <br>    VOID PencilDP(HWND hwnd, UINT msg, POINT ptNew); <br>    VOID BrushDP(HWND hwnd, UINT msg, POINT ptNew); <br>    VOID PickDP(HWND hwnd, UINT msg, POINT ptNew); <br>    VOID LineDP(HWND hwnd, UINT msg, POINT ptNew); <br>    VOID RectDP(HWND hwnd, UINT msg, POINT ptNew); <br>    VOID CircleDP(HWND hwnd, UINT msg, POINT ptNew); <br>    VOID FloodDP(HWND hwnd, UINT msg, POINT ptNew); <br>    VOID HotSpotDP(HWND hwnd, UINT msg, POINT ptNew); <br>    VOID NormalizePoints(PPOINT pptStart, PPOINT pptEnd); </code></pre>
<p>&nbsp;</p></body>
</HTML>

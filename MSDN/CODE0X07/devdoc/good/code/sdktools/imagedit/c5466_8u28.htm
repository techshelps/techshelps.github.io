<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IMAGEDLG.C</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5480"></a>IMAGEDLG.C</h2>
<pre><code>/*************************************************************************** <br>     *                                                                         * <br>     *  MODULE      : Imagedlg.c                                               * <br>     *                                                                         * <br>     *  PURPOSE     : Dialog functions for ImagEdit's dialogs.                 * <br>     *                                                                         * <br>     *  HISTORY     : 3/03/89 by LR                                            * <br>     *                                                                         * <br>     ***************************************************************************/ <br>     <br>    #include "imagedit.h" <br>    #include "dialogs.h" <br>    #include "iehelp.h" <br> <br> #include &lt;windowsx.h&gt; <br>     <br>    STATICFN BOOL NEAR NewImageOK(HWND hwnd, INT iType); <br>    STATICFN VOID NEAR SelectImageInit(HWND hwnd); <br>    STATICFN BOOL NEAR SelectImageOK(HWND hwnd); <br>     <br>     <br>     <br>    /************************************************************************ <br>    * DlgBox <br>    * <br>    * This function basically does a DialogBox. <br>    * <br>    * Arguments: <br>    *   INT idDlg       = Ordinal name of the dialog. <br>    *   WNDPROC lpfnDlg = Dialog procedure to use (this function will <br>    *                     call Make/FreeProcInstance). <br>    * <br>    * Returns: <br>    *     What DialogBox returned. <br>    * <br>    * History: <br>    * <br>    ************************************************************************/ <br>     <br>    INT DlgBox( <br>        INT idDlg, <br>        WNDPROC lpfnDlg) <br>    { <br>        WNDPROC lpfnDlgInst; <br>        INT nResult; <br>        INT idPrevDlg; <br>     <br>        EnteringDialog(idDlg, &amp;idPrevDlg, TRUE); <br>        lpfnDlgInst = (WNDPROC)MakeProcInstance((FARPROC)lpfnDlg, ghInst); <br>        nResult = DialogBox(ghInst, MAKEINTRESOURCE(idDlg), <br>                ghwndMain, lpfnDlgInst); <br>        FreeProcInstance(lpfnDlgInst); <br>        EnteringDialog(idPrevDlg, NULL, FALSE); <br>     <br>        return nResult; <br>    } <br>     <br>     <br>     <br>    /************************************************************************ <br>    * EnteringDialog <br>    * <br>    * This function enables or disables things based on whether we are <br>    * going to show one of the editor's dialogs.  It must be called <br>    * before and after showing a dialog box. <br>    * <br>    * Arguments: <br>    *   INT idDlg       - Ordinal name of the dialog. <br>    *   PINT pidPrevDlg - Points to where to save the id of the previous <br>    *                     (current) dialog.  If fEntering is FALSE, this <br>    *                     is not used and should be NULL. <br>    *   BOOL fEntering  - TRUE if about ready to show the dialog.  FALSE if <br>    *                     the dialog was just dismissed.  For the FALSE case, <br>    *                     the idDlg should be zero, or the id of the previous <br>    *                     dialog. <br>    * <br>    * History: <br>    * <br>    ************************************************************************/ <br>     <br>    VOID EnteringDialog( <br>        INT idDlg, <br>        PINT pidPrevDlg, <br>        BOOL fEntering) <br>    { <br>        /* <br>         * If we are entering a new dialog, save the previous dialog <br>         * in the place specified. <br>         */ <br>        if (fEntering) <br>            *pidPrevDlg = gidCurrentDlg; <br>     <br>        gidCurrentDlg = idDlg; <br>     <br>        if (ghwndToolbox) <br>            EnableWindow(ghwndToolbox, !fEntering); <br>     <br>        if (ghwndColor) <br>            EnableWindow(ghwndColor, !fEntering); <br>     <br>        if (ghwndView) <br>            EnableWindow(ghwndView, !fEntering); <br>    } <br>     <br>     <br>     <br>    /************************************************************************ <br>    * ImageNewDialog <br>    * <br>    * <br>    * <br>    * History: <br>    * <br>    ************************************************************************/ <br>     <br>    VOID ImageNewDialog( <br>        INT iType) <br>    { <br>        switch (iType) { <br>            case FT_ICON: <br>                DlgBox(DID_NEWICONIMAGE, (WNDPROC)NewIconImageDlgProc); <br>                break; <br>     <br>            case FT_CURSOR: <br>                DlgBox(DID_NEWCURSORIMAGE, (WNDPROC)NewCursorImageDlgProc); <br>                break; <br>        } <br>    } <br>     <br>     <br>     <br>    /************************************************************************ <br>    * ImageSelectDialog <br>    * <br>    * <br>    * <br>    * History: <br>    * <br>    ************************************************************************/ <br>     <br>    VOID ImageSelectDialog(VOID) <br>    { <br>        switch (giType) { <br>            case FT_ICON: <br>                DlgBox(DID_SELECTICONIMAGE, (WNDPROC)SelectImageDlgProc); <br>                break; <br>     <br>            case FT_CURSOR: <br>                DlgBox(DID_SELECTCURSORIMAGE, (WNDPROC)SelectImageDlgProc); <br>                break; <br>        } <br>    } <br>     <br>     <br>     <br>    /************************************************************************ <br>    * ResourceTypeDlgProc <br>    * <br>    * Gets from the user the type of resource image that they want <br>    * to edit (bitmap, icon or cursor). <br>    * <br>    * History: <br>    * <br>    ************************************************************************/ <br>     <br>    DIALOGPROC ResourceTypeDlgProc( <br>        HWND hwnd, <br>        UINT msg, <br>        WPARAM wParam, <br>        LPARAM lParam) <br>    { <br>        INT idChecked; <br>     <br>        switch (msg) { <br>            case WM_INITDIALOG: <br>                switch (giType) { <br>                    case FT_BITMAP: <br>                        idChecked = DID_RESOURCETYPEBITMAP; <br>                        break; <br>     <br>                    case FT_ICON: <br>                        idChecked = DID_RESOURCETYPEICON; <br>                        break; <br>     <br>                    case FT_CURSOR: <br>                        idChecked = DID_RESOURCETYPECURSOR; <br>                        break; <br>                } <br>     <br>                CheckDlgButton(hwnd, idChecked, 1); <br>     <br>                CenterWindow(hwnd); <br>     <br>                break; <br>     <br>            case WM_COMMAND: <br>                switch (GET_WM_COMMAND_ID(wParam, lParam)) { <br>                    case IDOK: <br>                        if (IsDlgButtonChecked(hwnd, DID_RESOURCETYPEBITMAP)) <br>                            iNewFileType = FT_BITMAP; <br>                        else if (IsDlgButtonChecked(hwnd, DID_RESOURCETYPEICON)) <br>                            iNewFileType = FT_ICON; <br>                        else <br>                            iNewFileType = FT_CURSOR; <br>     <br>                        EndDialog(hwnd, IDOK); <br>                        break; <br>     <br>                    case IDCANCEL: <br>                        EndDialog(hwnd, IDCANCEL); <br>                        break; <br>     <br>                    case IDHELP: <br>                        WinHelp(ghwndMain, gszHelpFile, HELP_CONTEXT, <br>                                HELPID_RESOURCETYPE); <br>                        break; <br>                } <br>     <br>                break; <br>     <br>            default: <br>                return FALSE; <br>        } <br>     <br>        return TRUE; <br>    } <br>     <br>     <br>     <br>    /************************************************************************ <br>    * NewIconImageDlgProc <br>    * <br>    * <br>    * <br>    * Arguments: <br>    * <br>    * History: <br>    * <br>    ************************************************************************/ <br>     <br>    DIALOGPROC NewIconImageDlgProc( <br>        HWND hwnd, <br>        UINT msg, <br>        WPARAM wParam, <br>        LPARAM lParam) <br>    { <br>        HWND hwndList; <br>        INT iSel; <br>        PDEVICE pDevice; <br>     <br>        switch (msg) { <br>            case WM_INITDIALOG: <br>                hwndList = GetDlgItem(hwnd, DID_NEWIMAGELIST); <br>                SendMessage(hwndList, LB_RESETCONTENT, 0, 0); <br>     <br>                for (pDevice = gpIconDeviceHead; pDevice; <br>                        pDevice = pDevice-&gt;pDeviceNext) { <br>                    if (!DeviceLinkUsed(pDevice)) { <br>                        iSel = (INT)SendMessage(hwndList, LB_INSERTSTRING, (WPARAM)-1, <br>                                (LONG)(LPSTR)pDevice-&gt;szDesc); <br>                        SendMessage(hwndList, LB_SETITEMDATA, iSel, <br>                                (DWORD)(LPSTR)pDevice); <br>                    } <br>                } <br>     <br>                /* <br>                 * Select the first item. <br>                 */ <br>                SendMessage(hwndList, LB_SETCURSEL, 0, 0L); <br>     <br>                CenterWindow(hwnd); <br>     <br>                break; <br>     <br>            case WM_COMMAND: <br>                switch (GET_WM_COMMAND_ID(wParam, lParam)) { <br>                    case DID_NEWIMAGELIST: <br>                        if (GET_WM_COMMAND_CMD(wParam, lParam) == LBN_DBLCLK) { <br>                            if (NewImageOK(hwnd, FT_ICON)) <br>                                EndDialog(hwnd, IDOK); <br>                        } <br>     <br>                        break; <br>     <br>                    case IDOK: <br>                        if (NewImageOK(hwnd, FT_ICON)) <br>                            EndDialog(hwnd, IDOK); <br>     <br>                        break; <br>     <br>                    case IDCANCEL: <br>                        EndDialog(hwnd, IDCANCEL); <br>                        break; <br>     <br>                    case IDHELP: <br>                        WinHelp(ghwndMain, gszHelpFile, HELP_CONTEXT, <br>                                HELPID_NEWICONIMAGE); <br>                        break; <br>                } <br>     <br>                break; <br>     <br>            default: <br>                return FALSE; <br>        } <br>     <br>        return TRUE; <br>    } <br>     <br>     <br>     <br>    /************************************************************************ <br>    * NewImageOK <br>    * <br>    * Processes the selection of a new image from the New Icon (Cursor) <br>    * Image dialog procedures. <br>    * <br>    * History: <br>    * <br>    ************************************************************************/ <br>     <br>    STATICFN BOOL NEAR NewImageOK( <br>        HWND hwnd, <br>        INT iType) <br>    { <br>        HWND hwndLB; <br>        INT iSelect; <br>        PDEVICE pDevice; <br>     <br>        hwndLB = GetDlgItem(hwnd, DID_NEWIMAGELIST); <br>     <br>        if ((iSelect = (INT)SendMessage(hwndLB, LB_GETCURSEL, 0, 0)) != LB_ERR) { <br>            /* <br>             * Save away the current image. <br>             */ <br>            ImageSave(); <br>     <br>            pDevice = (PDEVICE)SendMessage(hwndLB, LB_GETITEMDATA, iSelect, 0); <br>     <br>            if (ImageNew(pDevice)) <br>                return TRUE; <br>        } <br>     <br>        return FALSE; <br>    } <br>     <br>     <br>     <br>    /************************************************************************ <br>    * NewCursorImageDlgProc <br>    * <br>    * <br>    * <br>    * Arguments: <br>    * <br>    * History: <br>    * <br>    ************************************************************************/ <br>     <br>    DIALOGPROC NewCursorImageDlgProc( <br>        HWND hwnd, <br>        UINT msg, <br>        WPARAM wParam, <br>        LPARAM lParam) <br>    { <br>        HWND hwndList; <br>        INT iSel; <br>        PDEVICE pDevice; <br>     <br>        switch (msg) { <br>            case WM_INITDIALOG: <br>                hwndList = GetDlgItem(hwnd, DID_NEWIMAGELIST); <br>                SendMessage(hwndList, LB_RESETCONTENT, 0, 0); <br>     <br>                for (pDevice = gpCursorDeviceHead; pDevice; <br>                        pDevice = pDevice-&gt;pDeviceNext) { <br>                    if (!DeviceLinkUsed(pDevice)) { <br>                        iSel = (INT)SendMessage(hwndList, LB_INSERTSTRING, (WPARAM)-1, <br>                                (LONG)(LPSTR)pDevice-&gt;szDesc); <br>                        SendMessage(hwndList, LB_SETITEMDATA, iSel, <br>                                (DWORD)(LPSTR)pDevice); <br>                    } <br>                } <br>     <br>                /* <br>                 * Select the first item. <br>                 */ <br>                SendMessage(hwndList, LB_SETCURSEL, 0, 0L); <br>     <br>                CenterWindow(hwnd); <br>     <br>                break; <br>     <br>            case WM_COMMAND: <br>                switch (GET_WM_COMMAND_ID(wParam, lParam)) { <br>                    case DID_NEWIMAGELIST: <br>                        if (GET_WM_COMMAND_CMD(wParam, lParam) == LBN_DBLCLK) { <br>                            if (NewImageOK(hwnd, FT_CURSOR)) <br>                                EndDialog(hwnd, IDOK); <br>                        } <br>     <br>                        break; <br>     <br>                    case IDOK: <br>                        if (NewImageOK(hwnd, FT_CURSOR)) <br>                            EndDialog(hwnd, IDOK); <br>     <br>                        break; <br>     <br>                    case IDCANCEL: <br>                        EndDialog(hwnd, IDCANCEL); <br>                        break; <br>     <br>                    case IDHELP: <br>                        WinHelp(ghwndMain, gszHelpFile, HELP_CONTEXT, <br>                                HELPID_NEWCURSORIMAGE); <br>                        break; <br>                } <br>     <br>                break; <br>     <br>            default: <br>                return FALSE; <br>        } <br>     <br>        return TRUE; <br>    } <br>     <br>     <br>     <br>    /************************************************************************ <br>    * SelectImageDlgProc <br>    * <br>    * This is the Select Image dialog procedure.  This proc is used for both <br>    * icon and cursor images. <br>    * <br>    * History: <br>    * <br>    ************************************************************************/ <br>     <br>    DIALOGPROC SelectImageDlgProc( <br>        HWND hwnd, <br>        UINT msg, <br>        WPARAM wParam, <br>        LPARAM lParam) <br>    { <br>        switch (msg) { <br>            case WM_INITDIALOG: <br>                SelectImageInit(hwnd); <br>                return TRUE; <br>     <br>            case WM_COMMAND: <br>                switch (GET_WM_COMMAND_ID(wParam, lParam)) { <br>                    case DID_SELECTIMAGELIST: <br>                        if (GET_WM_COMMAND_CMD(wParam, lParam) == LBN_DBLCLK) { <br>                            if (SelectImageOK(hwnd)) <br>                                EndDialog(hwnd, IDOK); <br>                        } <br>     <br>                        break; <br>     <br>                    case IDOK: <br>                        if (SelectImageOK(hwnd)) <br>                            EndDialog(hwnd, IDOK); <br>     <br>                        break; <br>     <br>                    case IDCANCEL: <br>                        EndDialog(hwnd, IDCANCEL); <br>                        break; <br>     <br>                    case IDHELP: <br>                        WinHelp(ghwndMain, gszHelpFile, HELP_CONTEXT, <br>                                (giType == FT_ICON) ? <br>                                HELPID_SELECTICONIMAGE : HELPID_SELECTCURSORIMAGE); <br>                        break; <br>                } <br>     <br>                return TRUE; <br>     <br>            default: <br>                return FALSE; <br>        } <br>    } <br>     <br>     <br>     <br>    /************************************************************************ <br>    * SelectImageInit <br>    * <br>    * Processes the WM_INITDIALOG message for the Open Image dialog <br>    * procedure. <br>    * <br>    * This function fills the listbox with the names of all the current <br>    * images for the current icon/cursor file. <br>    * <br>    * History: <br>    * <br>    ************************************************************************/ <br>     <br>    STATICFN VOID NEAR SelectImageInit( <br>        HWND hwnd) <br>    { <br>        HWND hwndLB; <br>        INT i; <br>        PIMAGEINFO pImage; <br>     <br>        hwndLB = GetDlgItem(hwnd, DID_SELECTIMAGELIST); <br>     <br>        for (pImage = gpImageHead; pImage; pImage = pImage-&gt;pImageNext) { <br>            i = (INT)SendMessage(hwndLB, LB_INSERTSTRING, (WPARAM)-1, <br>                    pImage-&gt;pDevice ? <br>                    (DWORD)(LPSTR)pImage-&gt;pDevice-&gt;szDesc : <br>                    (DWORD)(LPSTR)ids(IDS_UNKNOWNIMAGEFORMAT)); <br>     <br>            SendMessage(hwndLB, LB_SETITEMDATA, i, (DWORD)(LPSTR)pImage); <br>        } <br>     <br>        /* <br>         * Select the first item. <br>         */ <br>        SendMessage(hwndLB, LB_SETCURSEL, 0, 0L); <br>     <br>        CenterWindow(hwnd); <br>    } <br>     <br>     <br>     <br>    /************************************************************************ <br>    * SelectImageOK <br>    * <br>    * Processes the selection of a new image from the Open Image <br>    * dialog procedure. <br>    * <br>    * History: <br>    * <br>    ************************************************************************/ <br>     <br>    STATICFN BOOL NEAR SelectImageOK( <br>        HWND hwnd) <br>    { <br>        HWND hwndLB; <br>        INT iSelect; <br>        PIMAGEINFO pImage; <br>     <br>        hwndLB = GetDlgItem(hwnd, DID_SELECTIMAGELIST); <br>     <br>        if ((iSelect = (INT)SendMessage(hwndLB, LB_GETCURSEL, 0, 0)) == LB_ERR) <br>            return FALSE; <br>     <br>        /* <br>         * Get a pointer to the selected image (stored in the listbox <br>         * items data field). <br>         */ <br>        pImage = (PIMAGEINFO)SendMessage(hwndLB, LB_GETITEMDATA, iSelect, 0L); <br>     <br>        return ImageOpen(pImage); <br>    } <br>     <br>     <br>     <br>    /************************************************************************ <br>    * BitmapSizeDlgProc <br>    * <br>    * Dialog that asks for the width, height and number of colors for <br>    * a new bitmap file. <br>    * <br>    * The last values that the user successfully entered are remembered, <br>    * and these values will be the defaults the next time that the <br>    * dialog is invoked. <br>    * <br>    * History: <br>    * <br>    ************************************************************************/ <br>     <br>    DIALOGPROC BitmapSizeDlgProc( <br>        HWND hwnd, <br>        UINT msg, <br>        WPARAM wParam, <br>        LPARAM lParam) <br>    { <br>        static INT cxLast = DEFAULTBITMAPWIDTH; <br>        static INT cyLast = DEFAULTBITMAPHEIGHT; <br>        static INT nColorsLast = DEFAULTBITMAPCOLORS; <br>        INT cx; <br>        INT cy; <br>        BOOL fTranslated; <br>        INT nColors; <br>     <br>        switch (msg) { <br>            case WM_INITDIALOG: <br>                SetDlgItemInt(hwnd, DID_BITMAPSIZEWIDTH, cxLast, TRUE); <br>                SetDlgItemInt(hwnd, DID_BITMAPSIZEHEIGHT, cyLast, TRUE); <br>     <br>                if (nColorsLast == 16) <br>                    CheckRadioButton(hwnd, DID_BITMAPSIZE2, DID_BITMAPSIZE16, <br>                            DID_BITMAPSIZE16); <br>                else <br>                    CheckRadioButton(hwnd, DID_BITMAPSIZE2, DID_BITMAPSIZE16, <br>                            DID_BITMAPSIZE2); <br>     <br>                CenterWindow(hwnd); <br>     <br>                break; <br>     <br>            case WM_COMMAND: <br>                switch (GET_WM_COMMAND_ID(wParam, lParam)) { <br>                    case IDOK: <br>                        cx = GetDlgItemInt(hwnd, DID_BITMAPSIZEWIDTH, &amp;fTranslated, FALSE); <br>                        if (!fTranslated) { <br>                            SetFocus(GetDlgItem(hwnd, DID_BITMAPSIZEWIDTH)); <br>                            Message(MSG_ENTERANUMBER); <br>                            break; <br>                        } <br>     <br>                        cy = GetDlgItemInt(hwnd, DID_BITMAPSIZEHEIGHT, &amp;fTranslated, FALSE); <br>                        if (!fTranslated) { <br>                            SetFocus(GetDlgItem(hwnd, DID_BITMAPSIZEHEIGHT)); <br>                            Message(MSG_ENTERANUMBER); <br>                            break; <br>                        } <br>     <br>                        if (IsDlgButtonChecked(hwnd, DID_BITMAPSIZE2)) <br>                            nColors = 2; <br>                        else <br>                            nColors = 16; <br>     <br>                        if (ImageNewBitmap(cx, cy, nColors)) { <br>                            cxLast = cx; <br>                            cyLast = cy; <br>                            nColorsLast = nColors; <br>     <br>                            EndDialog(hwnd, IDOK); <br>                        } <br>     <br>                        break; <br>     <br>                    case IDCANCEL: <br>                        EndDialog(hwnd, IDCANCEL); <br>                        break; <br>     <br>                    case IDHELP: <br>                        WinHelp(ghwndMain, gszHelpFile, HELP_CONTEXT, <br>                                HELPID_BITMAPSIZE); <br>                        break; <br>                } <br>     <br>                break; <br>     <br>            default: <br>                return FALSE; <br>        } <br>     <br>        return TRUE; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RWPAL.C</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5488"></a>RWPAL.C</h2>
<pre><code>/****************************************************************************/ <br>    /*                                                                          */ <br>    /*                 Copyright (C) 1987-1996 Microsoft Corp.                */ <br>    /*                           All Rights Reserved                            */ <br>    /*                                                                          */ <br>    /****************************************************************************/ <br>    /****************************** Module Header ******************************* <br>    * Module Name: rwpal.c <br>    * <br>    * Routines for reading and writing color palette files. <br>    * <br>    * History: <br>    * <br>    ****************************************************************************/ <br>     <br>    #include "imagedit.h" <br>     <br>    #include &lt;stdio.h&gt; <br>    #include &lt;fcntl.h&gt; <br>    #include &lt;io.h&gt; <br>    #include &lt;sys\types.h&gt;                      // For fstat() types. <br>    #include &lt;sys\stat.h&gt;                       // For fstat() function. <br>     <br>     <br>    /* <br>     * The color palette is saved in a .PAL file.  This file consists <br>     * of a header followed by the colors. <br>     * <br>     * The header has the following format: <br>     * <br>     * struct { <br>     *     CHAR tag;                // Always 'C'. <br>     *     WORD colors;             // Number of colors.  Always COLORSMAX. <br>     *     CHAR reserved[47];       // Reserved bytes. <br>     * } <br>     * <br>     * Immediately following this is RGB quads for each of the colors in <br>     * the palette. <br>     */ <br>     <br>     <br>    /* <br>     * Size in bytes of the header of a color palette file. <br>     */ <br>    #define CBCOLORHDR          (sizeof(CHAR) + sizeof(WORD) + 47) <br>     <br>    /* <br>     * Size in bytes of the color information in the color file. <br>     */ <br>    #define CBCOLORINFO         (sizeof(DWORD) * COLORSMAX) <br>     <br>    /* <br>     * Size in bytes of a color palette file.  This includes the <br>     * size of the header and room for all the colors. <br>     */ <br>    #define CBCOLORFILE         (CBCOLORHDR + CBCOLORINFO) <br>     <br>     <br>     <br>    /************************************************************************ <br>    * LoadColorFile <br>    * <br>    * <br>    * <br>    * Arguments: <br>    * <br>    * History: <br>    * <br>    ************************************************************************/ <br>     <br>    VOID LoadColorFile(VOID) <br>    { <br>        HFILE hf; <br>        OFSTRUCT OfStruct; <br>        struct stat FileStatus; <br>        DWORD argb[COLORSMAX]; <br>        UINT cbRead; <br>        INT i; <br>        CHAR tag; <br>        CHAR szFileName[CCHMAXPATH]; <br>     <br>        *szFileName = '\0'; <br>        if (!OpenDlg(szFileName, FT_PALETTE)) <br>            return; <br>     <br>  if ((hf = (HFILE)OpenFile(szFileName, (LPOFSTRUCT)&amp;OfStruct, OF_READ)) <br>                == (HFILE)-1) { <br>            Message(MSG_CANTOPEN, szFileName); <br>            return; <br>        } <br>     <br>        fstat((INT)_open_osfhandle((long)(hf), (int)(O_RDONLY)), &amp;FileStatus); <br>     <br>        if (FileStatus.st_size != CBCOLORFILE) { <br>            Message(MSG_BADPALFILE, szFileName); <br>            goto Error1; <br>        } <br>     <br>        if ((cbRead = _lread((HFILE)hf, &amp;tag, 1)) == -1 || cbRead != 1) { <br>            Message(MSG_READERROR, szFileName); <br>            goto Error1; <br>        } <br>     <br>        if (tag != 'C') { <br>            Message(MSG_BADPALFILE, szFileName); <br>            goto Error1; <br>        } <br>     <br>        SetFilePointer((HANDLE)hf, CBCOLORHDR, NULL, (DWORD)0); <br>        if ((cbRead = _lread((HFILE)hf, (LPSTR)argb, CBCOLORINFO)) == -1 || <br>                cbRead != CBCOLORINFO) { <br>            Message(MSG_READERROR, szFileName); <br>            goto Error1; <br>        } <br>     <br>        for (i = 0; i &lt; COLORSMAX; i++) <br>            gargbColor[i] = argb[i]; <br>     <br>        SetColorPalette(16, giType, TRUE); <br>     <br>    Error1: <br>        _lclose((HFILE)hf); <br>    } <br>     <br>     <br>     <br>    /************************************************************************ <br>    * SaveColorFile <br>    * <br>    * <br>    * <br>    * Arguments: <br>    * <br>    * History: <br>    * <br>    ************************************************************************/ <br>     <br>    VOID SaveColorFile(VOID) <br>    { <br>        INT i; <br>        HFILE hf; <br>        OFSTRUCT OfStruct; <br>        CHAR reserved[47]; <br>        WORD wColors = COLORSMAX; <br>        CHAR tag = 'C'; <br>        CHAR szFileName[CCHMAXPATH]; <br>     <br>        *szFileName = '\0'; <br>        if (!SaveAsDlg(szFileName, FT_PALETTE)) <br>            return; <br>     <br>        if ((hf = (HFILE)OpenFile(szFileName, &amp;OfStruct, <br>                OF_CREATE | OF_WRITE)) == (HFILE)-1) { <br>            Message(MSG_CANTCREATE, szFileName); <br>            return; <br>        } <br>     <br>        for (i = 0; i &lt; sizeof(reserved); i++) <br>            reserved[i] = 0; <br>     <br>        if (_lwrite((HFILE)hf, (LPSTR)&amp;tag, sizeof(tag)) != sizeof(tag) || <br>                _lwrite((HFILE)hf, (LPSTR)&amp;wColors, sizeof(wColors)) != <br>                sizeof(wColors) || <br>                _lwrite((HFILE)hf, (LPSTR)reserved, sizeof(reserved)) != <br>                sizeof(reserved) || <br>                _lwrite((HFILE)hf, (LPSTR)gargbColor, CBCOLORINFO) != CBCOLORINFO) { <br>            Message(MSG_WRITEERROR, szFileName); <br>        } <br>     <br>        _lclose((HFILE)hf); <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

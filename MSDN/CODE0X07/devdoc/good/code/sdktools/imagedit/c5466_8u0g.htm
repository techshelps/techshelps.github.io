<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GLOBALS.C</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5470"></a>GLOBALS.C</h2>
<pre><code>/****************************************************************************/ <br>/*                                                                          */ <br>/*                 Copyright (C) 1987-1996 Microsoft Corp.                */ <br>/*                           All Rights Reserved                            */ <br>/*                                                                          */ <br>/****************************************************************************/ <br>/****************************** Module Header ******************************* <br>* Module Name: globals.c <br>* <br>* Global data for the image editor. <br>* <br>* History: <br>* <br>****************************************************************************/ <br> <br>#include "imagedit.h" <br>#include "dialogs.h" <br>#include "iehelp.h" <br>#include "ids.h" <br> <br> <br>/* <br> * Initialized data and structures ----------------------------------------- <br> */ <br> <br>/* <br> * Initialization data structure.  This describes each profile entry <br> * that is contained in the initialization file. <br> */ <br>INIENTRY gaie[] = { <br>    { "fGrid",          &amp;gfGrid,            FALSE,              0 }, <br>    { "fShowColor",     &amp;gfShowColor,       TRUE,               0 }, <br>    { "fShowView",      &amp;gfShowView,        TRUE,               0 }, <br>    { "fShowToolbox",   &amp;gfShowToolbox,     TRUE,               0 }, <br>    { "nBrushSize",     &amp;gnBrushSize,       3,                  0 }, <br>    { NULL,             NULL,               0,                  0 } <br>}; <br> <br>BOOL gfGrid;                        // TRUE if the grid is on. <br>BOOL gfShowColor;                   // TRUE if Color palette is to be shown. <br>BOOL gfShowView;                    // TRUE if View window is to be shown. <br>BOOL gfShowToolbox;                 // TRUE if Toolbox is to be shown. <br>INT gnBrushSize;                    // Current brush size. <br> <br>CHAR szAppPos[] = "AppPos";         // App window's position keyname. <br>CHAR szTBPos[] = "TBPos";           // Toolbox window's position keyname. <br>CHAR szViewPos[] = "ViewPos";       // View window's position keyname. <br>CHAR szColorPos[] = "ColorPos";     // Color palette window's position keyname. <br>CHAR szrgbScreen[] = "rgbScreen";   // Screen color keyname. <br> <br> <br>/* <br> * Instance handles, window handles and class strings ---------------------- <br> */ <br> <br>HANDLE ghInst;                      // App instance handle. <br>HANDLE haccelTbl;                   // Accelerator table handle. <br>HCURSOR hcurWait;                   // Standard hourglass cursor. <br> <br>HWND ghwndMain;                     // Main app window handle. <br>HWND ghwndWork;                     // Workspace window handle. <br>HWND ghwndPropBar;                  // Properties Bar window handle. <br>HWND ghwndToolbox;                  // Toolbox window handle. <br>HWND ghwndView;                     // View window handle. <br>HWND ghwndColor;                    // Color palette window handle. <br> <br>CHAR szMainClass[] = "ImagEdit";    // Main window class. <br>CHAR szWorkClass[] = "Work";        // Work window class. <br>CHAR szToolboxClass[] = "Toolbox";  // Toolbox window class. <br>CHAR szToolBtnClass[] = "ToolBtn";  // Toolbox button window class. <br>CHAR szViewClass[] = "View";        // View window class. <br>CHAR szColorBoxClass[] = "ColorBox";// Color box window class. <br>CHAR szColorLRClass[] = "ColorLR";  // Color Left-Right sample class. <br> <br> <br>/* <br> * Device list globals ----------------------------------------------------- <br> */ <br> <br>PDEVICE gpIconDeviceHead = NULL;    // Head of icon device list. <br>INT gnIconDevices = 0;              // Number of icon devices. <br>PDEVICE gpCursorDeviceHead = NULL;  // Head of cursor device list. <br>INT gnCursorDevices = 0;            // Number of cursor devices. <br> <br> <br>/* <br> * Globals that describe the current file and image being edited ----------- <br> */ <br> <br>CHAR gszFullFileName[CCHMAXPATH];   // Full path name of current file. <br>PSTR gpszFileName = NULL;           // Current file name (or NULL). <br>INT giType = FT_BITMAP;             // Type of object being edited currently. <br>PIMAGEINFO gpImageHead = NULL;      // Head of image linked list. <br>INT gnImages = 0;                   // Number of images in the file. <br>BOOL fFileDirty;                    // TRUE if the file is dirty. <br> <br>PIMAGEINFO gpImageCur = NULL;       // Pointer to current image. <br>INT gcxImage;                       // Width of the image. <br>INT gcyImage;                       // Height of the image. <br>INT gnColors = 16;                  // Number of colors of current image. <br>BOOL fImageDirty;                   // TRUE if the image is dirty. <br> <br> <br>/* <br> * Drawing DC's and bitmaps ------------------------------------------------ <br> */ <br> <br>HDC ghdcImage = NULL;               // Image XOR DC. <br>HBITMAP ghbmImage = NULL;           // Image XOR bitmap. <br> <br>HDC ghdcANDMask = NULL;             // Image AND mask DC. <br>HBITMAP ghbmANDMask = NULL;         // Image AND mask bitmap. <br> <br>HBITMAP ghbmUndo = NULL;            // Backup of XOR bitmap for undo. <br>HBITMAP ghbmUndoMask = NULL;        // Backup of AND mask bitmap for undo. <br> <br> <br>/* <br> * Globals for the color palette and drawing ------------------------------- <br> */ <br> <br>INT giColorLeft;                    // Index to the left color in gargbCurrent. <br>INT giColorRight;                   // Index to the right color in gargbCurrent. <br>INT gfModeLeft;                     // Mode of the left color brush. <br>INT gfModeRight;                    // Mode of the right color brush. <br>HBRUSH ghbrLeft = NULL;             // Brush with left mouse button color. <br>HBRUSH ghbrLeftSolid = NULL;        // Brush with solid left button color. <br>HBRUSH ghbrRight = NULL;            // Brush with right mouse button color. <br>HBRUSH ghbrRightSolid = NULL;       // Brush with solid right button color. <br>HBRUSH ghbrScreen = NULL;           // Brush with screen color. <br>HBRUSH ghbrInverse = NULL;          // Brush with inverse screen color. <br>HPEN ghpenLeft = NULL;              // Left color pen. <br>HPEN ghpenRight = NULL;             // Right color pen. <br>DWORD grgbScreenDefault;            // Default screen color. <br>DWORD grgbScreen;                   // RGB of screen color. <br>DWORD grgbInverse;                  // RGB of inverse screen color. <br>DWORD *gargbCurrent;                // Points to the current color table. <br>DWORD gargbColor[COLORSMAX];        // Current color color table. <br>DWORD gargbMono[COLORSMAX];         // Current monochrome color table. <br>HPEN hpenDarkGray = NULL;           // A dark gray pen. <br> <br>DRAWPROC gpfnDrawProc;              // Current drawing functions. <br>INT gCurTool = -1;                  // Current tool (TOOL_* define). <br>HBRUSH ghbrDraw = NULL;             // Current drawing brush. <br>HBRUSH ghbrDrawSolid = NULL;        // Current solid drawing brush. <br>HPEN ghpenDraw = NULL;              // Current drawing pen. <br>INT gfDrawMode;                     // Mode of current drawing brush. <br> <br>/* <br> * The default color palette. <br> */ <br>DWORD gargbDefaultColor[] = { <br>    RGB(255, 255, 255), RGB(0, 0, 0), <br>    RGB(192, 192, 192), RGB(128, 128, 128), <br>    RGB(255, 0, 0),     RGB(128, 0, 0), <br>    RGB(255, 255, 0),   RGB(128, 128, 0), <br>    RGB(0, 255, 0),     RGB(0, 128, 0), <br>    RGB(0, 255, 255),   RGB(0, 128, 128), <br>    RGB(0, 0, 255),     RGB(0, 0, 128), <br>    RGB(255, 0, 255),   RGB(128, 0, 128), <br>    RGB(255, 255, 128), RGB(128, 128, 64), <br>    RGB(0, 255, 128),   RGB(0, 64, 64), <br>    RGB(128, 255, 255), RGB(0, 128, 255), <br>    RGB(128, 128, 255), RGB(0, 64, 128), <br>    RGB(255, 0, 128),   RGB(64, 0, 128), <br>    RGB(255, 128, 64),  RGB(128, 64, 0) <br>}; <br> <br>/* <br> * The default monochrome palette. <br> */ <br>DWORD gargbDefaultMono[] =   { <br>    RGB(255, 255, 255), RGB(0, 0, 0), <br>    RGB(128, 128, 128), RGB(9, 9, 9), <br>    RGB(137, 137, 137), RGB(18, 18, 18), <br>    RGB(146, 146, 146), RGB(27, 27, 27), <br>    RGB(155, 155, 155), RGB(37, 37, 37), <br>    RGB(164, 164, 164), RGB(46, 46, 46), <br>    RGB(173, 173, 173), RGB(55, 55, 55), <br>    RGB(182, 182, 182), RGB(63, 63, 63), <br>    RGB(191, 191, 191), RGB(73, 73, 73), <br>    RGB(201, 201, 201), RGB(82, 82, 82), <br>    RGB(212, 212, 212), RGB(92, 92, 92), <br>    RGB(222, 222, 222), RGB(101, 101, 101), <br>    RGB(231, 231, 231), RGB(110, 110, 110), <br>    RGB(245, 245, 245), RGB(119, 119, 119) <br>}; <br> <br>/* <br> * Color table for monochrome DIB's. <br> */ <br>DWORD gargbColorTable2[] = { <br>    RGB(0, 0, 0), <br>    RGB(255, 255, 255) <br>}; <br> <br>/* <br> * Array that describes each tool used in the editor.  This table <br> * is indexed by the TOOL_* defines. <br> */ <br>TOOLS gaTools[] = { <br>    { PencilDP,     NULL,   IDBM_TUPENCIL,  NULL,   IDBM_TDPENCIL,  NULL, <br>        TRUE, FALSE }, <br>    { BrushDP,      NULL,   IDBM_TUBRUSH,   NULL,   IDBM_TDBRUSH,   NULL, <br>        TRUE, FALSE }, <br>    { PickDP,       NULL,   IDBM_TUSELECT,  NULL,   IDBM_TDSELECT,  NULL, <br>        FALSE, FALSE }, <br>    { LineDP,       NULL,   IDBM_TULINE,    NULL,   IDBM_TDLINE,    NULL, <br>        FALSE, TRUE }, <br>    { RectDP,       NULL,   IDBM_TURECT,    NULL,   IDBM_TDRECT,    NULL, <br>        FALSE, TRUE }, <br>    { RectDP,       NULL,   IDBM_TUSRECT,   NULL,   IDBM_TDSRECT,   NULL, <br>        FALSE, TRUE }, <br>    { CircleDP,     NULL,   IDBM_TUCIRCLE,  NULL,   IDBM_TDCIRCLE,  NULL, <br>        FALSE, TRUE }, <br>    { CircleDP,     NULL,   IDBM_TUSCIRCL,  NULL,   IDBM_TDSCIRCL,  NULL, <br>        FALSE, TRUE }, <br>    { FloodDP,      NULL,   IDBM_TUFLOOD,   NULL,   IDBM_TDFLOOD,   NULL, <br>        TRUE, FALSE }, <br>    { HotSpotDP,    NULL,   IDBM_TUHOTSPT,  NULL,   IDBM_TDHOTSPT,  NULL, <br>        FALSE, FALSE } <br>}; <br> <br> <br>/* <br> * Globals and tables for messages and help -------------------------------- <br> */ <br> <br>/* <br> * Message box messages, for the Message() function. <br> */ <br>MESSAGEDATA gamdMessages[] = { <br>    { IDS_OUTOFMEMORY,          MB_OK | MB_ICONHAND                 }, <br>    { IDS_MEMERROR,             MB_OK | MB_ICONHAND                 }, <br>    { IDS_BADBMPFILE,           MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_BADICOCURFILE,        MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_BADPALFILE,           MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_CANTOPEN,             MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_READERROR,            MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_WRITEERROR,           MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_CANTCREATE,           MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_NOCLIPBOARDFORMAT,    MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_NOCLIPBOARD,          MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_CANTEDITIMAGE,        MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_SAVEFILE,             MB_YESNOCANCEL | MB_ICONEXCLAMATION }, <br>    { IDS_ENTERANUMBER,         MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_BADDEVICESIZE,        MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_BADDEVICECOLORS,      MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_NOTSUPPORT,           MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_NOIMAGES,             MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_BADBMPSIZE,           MB_OK | MB_ICONEXCLAMATION          } <br>}; <br> <br>INT gidCurrentDlg = 0;              // Current dialog id (null if none). <br>INT gMenuSelected = 0;              // Currently selected menu item. <br>CHAR gszHelpFile[CCHMAXPATH];       // Path to the help file. <br>HHOOK ghhkMsgFilter;                // Hook handle for message filter func. <br>FARPROC lpfnMsgFilterHookFunc;      // The message filter proc instance. <br> <br>/* <br> * Table that maps menu items to help context id's for them. <br> */ <br>HELPMAP gahmapMenu[] = { <br>    {MENU_FILE_NEW,             HELPID_FILE_NEW                 }, <br>    {MENU_FILE_OPEN,            HELPID_FILE_OPEN                }, <br>    {MENU_FILE_SAVE,            HELPID_FILE_SAVE                }, <br>    {MENU_FILE_SAVEAS,          HELPID_FILE_SAVEAS              }, <br>    {MENU_FILE_LOADCOLORS,      HELPID_FILE_LOADCOLORS          }, <br>    {MENU_FILE_SAVECOLORS,      HELPID_FILE_SAVECOLORS          }, <br>    {MENU_FILE_DEFAULTCOLORS,   HELPID_FILE_DEFAULTCOLORS       }, <br>    {MENU_FILE_EXIT,            HELPID_FILE_EXIT                }, <br> <br>    {MENU_EDIT_UNDO,            HELPID_EDIT_UNDO                }, <br>    {MENU_EDIT_RESTORE,         HELPID_EDIT_RESTORE             }, <br>    {MENU_EDIT_COPY,            HELPID_EDIT_COPY                }, <br>    {MENU_EDIT_PASTE,           HELPID_EDIT_PASTE               }, <br>    {MENU_EDIT_CLEAR,           HELPID_EDIT_CLEAR               }, <br>    {MENU_EDIT_NEWIMAGE,        HELPID_EDIT_NEWIMAGE            }, <br>    {MENU_EDIT_SELECTIMAGE,     HELPID_EDIT_SELECTIMAGE         }, <br>    {MENU_EDIT_DELETEIMAGE,     HELPID_EDIT_DELETEIMAGE         }, <br> <br>    {MENU_OPTIONS_GRID,         HELPID_OPTIONS_GRID             }, <br>    {MENU_OPTIONS_BRUSH2,       HELPID_OPTIONS_BRUSH2           }, <br>    {MENU_OPTIONS_BRUSH3,       HELPID_OPTIONS_BRUSH3           }, <br>    {MENU_OPTIONS_BRUSH4,       HELPID_OPTIONS_BRUSH4           }, <br>    {MENU_OPTIONS_BRUSH5,       HELPID_OPTIONS_BRUSH5           }, <br>    {MENU_OPTIONS_SHOWCOLOR,    HELPID_OPTIONS_SHOWCOLOR        }, <br>    {MENU_OPTIONS_SHOWVIEW,     HELPID_OPTIONS_SHOWVIEW         }, <br>    {MENU_OPTIONS_SHOWTOOLBOX,  HELPID_OPTIONS_SHOWTOOLBOX      }, <br> <br>    {MENU_HELP_CONTENTS,        HELPID_HELP_CONTENTS            }, <br>    {MENU_HELP_SEARCH,          HELPID_HELP_SEARCH              }, <br>    // No help for the About menu command. <br> <br>    {0,                         0                               } <br>}; <br> <br>/* <br> * Table that maps dialog ids to help context id's for them. <br> */ <br>HELPMAP gahmapDialog[] = { <br>    // No help for the About dialog. <br>    {DID_BITMAPSIZE,            HELPID_BITMAPSIZE               }, <br>    {DID_PASTEOPTIONS,          HELPID_PASTEOPTIONS             }, <br>    {DID_NEWCURSORIMAGE,        HELPID_NEWCURSORIMAGE           }, <br>    {DID_NEWICONIMAGE,          HELPID_NEWICONIMAGE             }, <br>    {DID_SELECTCURSORIMAGE,     HELPID_SELECTCURSORIMAGE        }, <br>    {DID_SELECTICONIMAGE,       HELPID_SELECTICONIMAGE          }, <br>    {DID_RESOURCETYPE,          HELPID_RESOURCETYPE             }, <br> <br>    {DID_COMMONFILEOPEN,        HELPID_COMMONFILEOPEN           }, <br>    {DID_COMMONFILESAVE,        HELPID_COMMONFILESAVE           }, <br>    {DID_COMMONFILEOPENPAL,     HELPID_COMMONFILEOPENPAL        }, <br>    {DID_COMMONFILESAVEPAL,     HELPID_COMMONFILESAVEPAL        }, <br>    {DID_COMMONFILECHOOSECOLOR, HELPID_COMMONFILECHOOSECOLOR    }, <br> <br>    {DID_TOOLBOX,               HELPID_TOOLBOX                  }, <br>    {DID_PROPBAR,               HELPID_PROPERTIESBAR            }, <br>    {DID_COLOR,                 HELPID_COLORPALETTE             }, <br>    {DID_VIEW,                  HELPID_VIEW                     }, <br> <br>    {0,                         0                               } <br>}; <br> <br> <br>/* <br> * Misc. globals ----------------------------------------------------------- <br> */ <br> <br>INT gcxWorkSpace;                   // Width of workspace window. <br>INT gcyWorkSpace;                   // Height of workspace window. <br>INT gZoomFactor;                    // Magnification factor of image. <br> <br>RECT grcPick;                       // The current picking rectangle. <br>INT gcxPick;                        // Width of picking rectangle. <br>INT gcyPick;                        // Height of picking rectangle. <br> <br>UINT ClipboardFormat;               // ID of private clipboard format. <br>BOOL fStretchClipboardData = TRUE;  // TRUE to default to stretch on paste. <br> <br>INT iNewFileType;                   // New file type the user selected. <br> <br>INT gcyBorder;                      // System border height. <br>INT gcyPropBar;                     // Height of PropBar window. <br> <br>WNDPROC lpfnPropBarDlgProc = NULL;  // Proc inst. of PropBar dialog proc. <br>WNDPROC lpfnColorDlgProc = NULL;    // Proc inst. of Color palette dlg proc. </code></pre>
<p>&nbsp;</p></body>
</HTML>

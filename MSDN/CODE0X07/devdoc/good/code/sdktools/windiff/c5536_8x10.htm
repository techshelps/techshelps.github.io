<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GDATE.C</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5544"></a>GDATE.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>/****************************** Module Header ******************************* <br>* Module Name: GDATE.C <br>* <br>* Contains date conversion functions. <br>* <br>* Functions: <br>* <br>* gdi_isleap() <br>* gdate_daytodmy() <br>* gdate_dmytoday() <br>* gdate_monthdays() <br>* gdate_weeklyday() <br>* <br>* Comments: <br>* <br>****************************************************************************/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;string.h&gt; <br> <br>#include "gutils.h" <br> <br> <br>BOOL gdi_isleap(LONG year); <br> <br>/*---static data--------------------------------------------*/ <br> <br>int monthdays[] = { <br>        31, <br>        28, <br>        31, <br>        30, <br>        31, <br>        30, <br>        31, <br>        31, <br>        30, <br>        31, <br>        30, <br>        31 <br>}; <br> <br> <br>/*************************************************************************** <br> * Function: gdate_daytomy <br> * <br> * Purpose: <br> * <br> * converts day to d/m/y <br> */ <br>void APIENTRY <br>gdate_daytodmy(LONG days, int FAR* yrp, int FAR* monthp, int FAR* dayp) <br>{ <br>        int years; <br>        int nleaps; <br>        int month; <br>        int mdays; <br> <br>        /* get number of completed years and calc leap days */ <br>        years = (int) (days / 365); <br>        days = days % 365; <br>        nleaps = (years / 4) - (years / 100) + (years / 400); <br>        while (nleaps &gt; days) { <br>                days += 365; <br>                years--; <br>                nleaps = (years / 4) - (years / 100) + (years / 400); <br>        } <br>        days -= nleaps; <br> <br>        /* add one year for current (non-complete) year */ <br>        years++; <br> <br> <br>        /* current month */ <br>        for (month = 0; month &lt; 12; month++) { <br>                mdays = monthdays[month]; <br>                if (gdi_isleap(years) &amp;&amp; (month == 1)) { <br>                        mdays++; <br>                } <br>                if (days == mdays) { <br>                        days = 0; <br>                        month++; <br>                        break; <br>                } else if (days &lt; mdays) { <br>                        break; <br>                } else { <br>                        days -= mdays; <br>                } <br>        } <br>        /* conv month from 0-11 to 1-12 */ <br>        if (monthp != NULL) { <br>                *monthp = month+1; <br>        } <br>        if (dayp != NULL) { <br>                *dayp = (int) days + 1; <br>        } <br>        if (yrp != NULL) { <br>                *yrp = years; <br>        } <br>} <br> <br> <br>/*************************************************************************** <br> * Function: gdate_dmytoday <br> * <br> * Purpose: <br> * <br> * converts d/m/y to a day <br> */  <br>LONG APIENTRY <br>gdate_dmytoday(int yr, int month, int day) <br>{ <br>        int nleaps; <br>        int i; <br>        long ndays; <br> <br>        /* exclude the current year */ <br>        yr--; <br>        nleaps = (yr / 4) - (yr / 100) + (yr / 400); <br> <br>        /* in any given year, day 0 is jan1 */ <br>        month--; <br>        day--; <br>        ndays = 0; <br>        for (i = 0; i &lt; month ; i++) { <br>                ndays += monthdays[i]; <br>                if (gdi_isleap(yr+1) &amp;&amp; (i == 1)) { <br>                        ndays++; <br>                } <br>        } <br>        ndays = ndays + day + nleaps + (yr * 365L); <br>        return(ndays); <br>} <br> <br>/*************************************************************************** <br> * Function: gdate_monthdays <br> * <br> * Purpose: <br> * <br> * Gets number of days in month <br> */ <br>int APIENTRY <br>gdate_monthdays(int month, int year) <br>{ <br>        int ndays; <br> <br>        ndays = monthdays[month - 1]; <br>        if (gdi_isleap(year) &amp;&amp; (month == 2)) { <br>                ndays++; <br>        } <br>        return(ndays); <br>} <br> <br>/*************************************************************************** <br> * Function: gdate_weekday <br> * <br> * Purpose: <br> *  <br> * Gets the day of the week <br> */ <br>int APIENTRY <br>gdate_weekday(long daynr) <br>{ <br>        return((int) ((daynr + 1) % 7)); <br>} <br> <br> <br>/*************************************************************************** <br> * Function: gdi_isleap <br> * <br> * Purpose: <br> *  <br> * Determines whether the year is a leap year <br> */ <br>BOOL <br>gdi_isleap(LONG year) <br>{ <br>        if ( ((year % 4) == 0) &amp;&amp; <br>                (((year % 100) != 0) || <br>                ((year % 400) == 0))) { <br>                        return TRUE; <br>        } else { <br>                return FALSE; <br>        } <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

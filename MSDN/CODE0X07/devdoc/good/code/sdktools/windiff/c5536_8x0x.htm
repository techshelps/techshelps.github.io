<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FILE.C</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5541"></a>FILE.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>/****************************** Module Header ******************************* <br>* Module Name: FILE.C <br>* <br>* An object representing a file and the lines of text it contains. <br>* <br>* Functions: <br>* <br>* file_new() <br>* file_getdiritem() <br>* file_delete() <br>* file_getlinelist() <br>* file_discardlines() <br>* file_reset() <br>* file_readlines() <br>* <br>* Comments: <br>* <br>* A FILEDATA object is initialised with a DIRITEM handle from which it <br>* can get a filename. It knows how to supply a list of LINE handles for the <br>* lines of text in the file. <br>* <br>* The file is read into memory optionally on creation of the FILEDATA object: <br>* otherwise, at the first call to file_getlinelist. It can be discarded <br>* by calling file_discardlines: in this case, it will be re-read next time <br>* file_getlinelist is called. <br>* <br>* Calling file_reset will cause line_reset to be called for all lines <br>* in the list. This clears any links. <br>* <br>* We allocate all memory from a gmem* heap hHeap, assumed to be declared and <br>* initialised elsewhere. <br>* <br>****************************************************************************/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;string.h&gt; <br> <br>#include "gutils.h" <br>#include "windiff.h" <br>#include "list.h" <br>#include "line.h" <br>#include "scandir.h" <br>#include "file.h" <br> <br>extern HANDLE hHeap; <br> <br>struct filedata { <br> <br>        DIRITEM diritem;        /* handle to file name information */ <br>        LIST lines;             /* NULL if lines not read in */ <br>}; <br> <br> <br>void file_readlines(FILEDATA fd); <br> <br>/**************************************************************************** <br> * Function: file_new <br> * <br> * Purpose: <br> *  <br> * Creates a new FILEDATA, based on a DIRITEM. the filedata will retain <br> * the diritem handle for use in fetching filenames and handles. <br> * <br> * If the bRead is set, the file will be read into memory. If not, this <br> * will be done during the first call to file_getlines. <br> * <br> ***************************************************************************/ <br>FILEDATA <br>file_new(DIRITEM fiName, BOOL bRead) <br>{ <br>        FILEDATA fd; <br> <br>        fd = (FILEDATA) gmem_get(hHeap, sizeof(struct filedata)); <br>        if (fd == NULL) { <br>                return(NULL); <br>        } <br> <br>        fd-&gt;diritem = fiName; <br>        fd-&gt;lines = NULL; <br> <br>        if (bRead) { <br>                file_readlines(fd); <br>        } <br> <br>        return(fd); <br>} <br> <br>/**************************************************************************** <br> * Function: file_getdiritem <br> * <br> * Purpose: <br> *  <br> * Returns a handle to the DIRITEM used to create this FILEDATA <br> * <br> ***************************************************************************/ <br>DIRITEM <br>file_getdiritem(FILEDATA fd) <br>{ <br>        if (fd == NULL) { <br>                return(NULL); <br>        } <br> <br>        return(fd-&gt;diritem); <br>} <br> <br> <br>/**************************************************************************** <br> * Function: file_delete <br> * <br> * Purpose: <br> *  <br> * Deletes a filedata and its associated list of lines. Note that the diritem <br> * is not deleted (this is owned by the DIRLIST, and will be deleted <br> * when the DIRLIST is deleted) <br> * <br> ***************************************************************************/ <br>void <br>file_delete(FILEDATA fd) <br>{ <br>        if (fd == NULL) { <br>                return; <br>        } <br> <br>        /* throw away the line list, if there is one */ <br>        file_discardlines(fd); <br> <br>        gmem_free(hHeap, (LPSTR) fd, sizeof(struct filedata)); <br>} <br> <br>/**************************************************************************** <br> * Function: file_getlinelist <br> * <br> * Purpose: <br> *  <br> * Returns a handle to a list of lines in this file. The items in the <br> * list are LINE handles. <br> * <br> * The first call to this function will cause the file to be read into <br> * memory if bRead was FALSE on the call to file_new, or if file_discardlines <br> * has since been called. <br> * <br> * The list of lines returned should not be deleted except by calls to <br> * file_delete or file_discardlines. <br> * <br> ***************************************************************************/ <br>LIST <br>file_getlinelist(FILEDATA fd) <br>{ <br>        if (fd == NULL) { <br>                return NULL; <br>        } <br> <br>        if (fd-&gt;lines == NULL) { <br>                file_readlines(fd); <br>        } <br>        return(fd-&gt;lines); <br>} <br> <br> <br>/**************************************************************************** <br> * Function: file_discardlines <br> * <br> * Purpose: <br> *  <br> * Discards the list of lines associated with a file. This will cause <br> * the file to be re-read next time file_getlinelist is called. <br> * <br> ***************************************************************************/ <br>void <br>file_discardlines(FILEDATA fd) <br>{ <br>        LINE line; <br> <br>        if (fd == NULL) { <br>                return; <br>        } <br> <br>        if (fd-&gt;lines != NULL) { <br> <br>                /* clear each line to free any memory associated <br>                 * with them, then discard the entire list <br>                 */ <br>                List_TRAVERSE(fd-&gt;lines, line) { <br>                        line_delete(line); <br>                } <br>                List_Destroy(&amp;fd-&gt;lines); <br>        } <br> <br>        /* this is probably done in List_Destroy, but better do it anyway*/ <br>        fd-&gt;lines = NULL; <br>} <br> <br> <br>/**************************************************************************** <br> * Function: file_reset <br> * <br> * Purpose: <br> *  <br> * Forces a reset of each line in the list. The function line_reset discards  <br> * links between lines, and any hashcode information. This would be used if <br> * the compare options or hashcode options have changed. <br> * <br> ***************************************************************************/ <br>void <br>file_reset(FILEDATA fd) <br>{ <br>        LINE line; <br> <br>        if (fd == NULL) { <br>                return; <br>        } <br> <br>        if (fd-&gt;lines != NULL) { <br> <br>                List_TRAVERSE(fd-&gt;lines, line)  { <br>                        line_reset(line); <br>                } <br>        } <br>} <br> <br> <br>/**************************************************************************** <br> * Function: file_readlines <br> * <br> * Purpose: <br> *  <br> * Reads the file into a list of lines. <br> * <br> * Comments: <br> * <br> * We use the buffered read functions to read a block at a time, and <br> * return us a pointer to a line within the block. The line we are <br> * pointed to is not null terminated. from this we do a line_new: this <br> * will make a copy of the text (since we want to re-use the buffer), and <br> * will null-terminate its copy. <br> * <br> * <br> ***************************************************************************/ <br>void <br>file_readlines(FILEDATA fd) <br>{ <br>        LPSTR textp; <br>        int fh; <br>        FILEBUFFER fbuf; <br>        int linelen; <br>        int linenr = 1; <br>        HCURSOR hcurs; <br> <br>        hcurs = SetCursor(LoadCursor(NULL, IDC_WAIT)); <br> <br>        /* open the file */ <br>        fh = dir_openfile(fd-&gt;diritem); <br> <br>        if (fh &lt; 0) { <br>                SetCursor(hcurs); <br>                return; <br>        } <br>        /* initialise the file buffering */ <br>        fbuf = readfile_new(fh); <br> <br> <br>        /* make an empty list for the files */ <br>        fd-&gt;lines = List_Create(); <br> <br>        while ( (textp = readfile_next(fbuf, &amp;linelen)) != NULL) { <br> <br>                line_new(textp, linelen, linenr++, fd-&gt;lines); <br> <br>        } <br> <br>        /* close filehandle and free buffer */ <br>        readfile_delete(fbuf); <br> <br>        dir_closefile(fd-&gt;diritem, fh); <br> <br>        SetCursor(hcurs); <br>} <br> <br> <br> <br> <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

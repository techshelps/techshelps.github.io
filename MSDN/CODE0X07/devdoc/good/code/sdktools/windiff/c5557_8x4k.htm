<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TPRIV.H</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5564"></a>TPRIV.H</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>/* <br> * TPRIV.H <br> * <br> * Data structures used internally by table class. <br> * <br> * Note: include after table.h <br> */ <br> <br> <br>#ifndef abs <br>#define abs(x)  (((x) &gt; 0)? (x) : -(x)) <br>#endif <br> <br>/*  one of these per visible line */ <br>typedef struct { <br>        CellPos linepos;        /* posn and clipping info for line */ <br> <br>        lpCellData pdata;       /* array of CellData structs for all cells */ <br>} LineData, FAR * lpLineData; <br> <br> <br>/* master info struct pointed to by window extra bytes */ <br> <br>typedef struct { <br>        /* table info */ <br>        TableHdr        hdr;            /* main hdr info from owner */ <br>        lpColProps      pcolhdr;        /* ptr to array of phdr-&gt;ncols hdrs */ <br> <br>        /* window info */ <br>        int     avewidth;       /* font ave width - for default cell sizing */ <br>        int     rowheight;      /* height of one row */ <br>        int     rowwidth;       /* total width of one row in pixels */ <br>        int     winwidth;       /* width of window */ <br>        int     nlines;         /* actual lines currently visible */ <br>         <br>        lpCellPos pcellpos;     /* array of cell position structs */ <br> <br>        /* scroll settings */ <br>        long    scrollscale;    /* scaling factor (force 16-bit range) */ <br>        long    toprow;         /* 0-based rownr of top moveable line */ <br>        int     scroll_dx;      /* horz scroll posn in pixels. */ <br> <br>        /* column data */ <br>        lpLineData pdata;       /* ptr to array of nlines of LineData */ <br> <br>        /* selection/dragging */ <br>        UINT    trackmode;      /* current mouse-tracking mode */ <br>        int     tracknr;        /* col or row being resized */ <br>        int     trackline1;     /* currently drawn track lines */ <br>        int     trackline2; <br>        BOOL    selvisible;     /* used during mouse-down: T if sel drawn */ <br>        TableSelection select; <br> <br>} Table, FAR * lpTable; <br> <br>/* trackmode constants */ <br>#define TRACK_NONE              0 <br>#define TRACK_COLUMN            1 <br>#define TRACK_CELL              2 <br> <br>/* private flags in CellData struct */ <br>#define CELL_VALID      1 <br> <br>/* window extra bytes are used to hold the owner, heap and Table structs */ <br>#define WW_OWNER        0                               /* HWND of owner */ <br>#define WW_HEAP         (WW_OWNER + sizeof(HWND))       /* gmem heap */ <br>#define WL_TABLE        (WW_HEAP + sizeof(HANDLE))      /* lpTable */ <br>#define WLTOTAL         (WL_TABLE + sizeof(lpTable))    /* total extra bytes */ <br> <br>/* ---------- global data -------------------*/ <br> <br>extern HPEN hpenDotted;         /* in table.c */ <br>extern HANDLE hVertCurs;        /* in table.c */ <br>extern HANDLE hNormCurs;        /* in table.c */ <br> <br>/*------function prototypes ---------------------------------------*/ <br> <br>/* in table.c */ <br> <br>void gtab_init(void);    /* called from DLL startup function */ <br>long gtab_sendtq(HWND hwnd, UINT cmd, long lParam); <br>void gtab_invallines(HWND hwnd, lpTable ptab, int start, int count); <br>void gtab_setsize(HWND hwnd, lpTable ptab); <br>void gtab_calcwidths(HWND hwnd, lpTable ptab); <br>void gtab_deltable(HWND hwnd, lpTable ptab); <br>BOOL gtab_alloclinedata(HWND hwnd, HANDLE heap, lpTable ptab); <br> <br>/* in tpaint.c */ <br>void gtab_paint(HWND hwnd, HDC hdc, lpTable ptab, int line); <br>void gtab_vsep(HWND hwnd, lpTable ptab, HDC hdc); <br>void gtab_hsep(HWND hwnd, lpTable ptab, HDC hdc); <br>void gtab_invertsel(HWND hwnd, lpTable ptab, HDC hdc_in); <br>void gtab_drawvertline(HWND hwnd, lpTable ptab); <br> <br>/* in tscroll.c */ <br>void gtab_dovscroll(HWND hwnd, lpTable ptab, long change); <br>void gtab_dohscroll(HWND hwnd, lpTable ptab, long change); <br>long gtab_linetorow(HWND hwnd, lpTable ptab, int line); <br>int gtab_rowtoline(HWND hwnd, lpTable ptab, long row); <br>void gtab_msg_vscroll(HWND hwnd, lpTable ptab, int opcode, int pos); <br>void gtab_msg_hscroll(HWND hwnd, lpTable ptab, int opcode, int pos); <br>void gtab_select(HWND hwnd, lpTable ptab, long row, long col, long nrows, <br>        long ncells, BOOL bNotify); <br>void gtab_enter(HWND hwnd, lpTable ptab, long row, long col, long nrows, <br>        long ncells); <br>void gtab_press(HWND hwnd, lpTable ptab, int x, int y); <br>void gtab_release(HWND hwnd, lpTable ptab, int x, int y); <br>void gtab_move(HWND hwnd, lpTable ptab, int x, int y); <br>void gtab_dblclick(HWND hwnd, lpTable ptab, int x, int y); <br>void gtab_showsel(HWND hwnd, lpTable ptab, BOOL bToBottom); <br>void gtab_showsel_middle(HWND hwnd, lpTable ptab); <br>int gtab_key(HWND hwnd, lpTable ptab, int vkey); <br> <br>/* in tprint.c */ <br>void gtab_print(HWND hwnd, lpTable ptab, HANDLE heap, lpPrintContext pcontext); <br>void gtab_boxcell(HWND hwnd, HDC hdc, LPRECT rcp, LPRECT pclip, UINT boxmode); <br> <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SCANDIR.H</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5555"></a>SCANDIR.H</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>/* <br> * SCANDIR.H <br> * <br> */ <br> <br>/* Handle to the list of files scanned */ <br>typedef struct dirlist FAR * DIRLIST; <br> <br>/* Handle to one item within the list of files */ <br>typedef struct diritem FAR * DIRITEM; <br> <br> <br>DIRLIST dir_buildlist(LPSTR pathname, BOOL bOnDemand); <br>void dir_delete(DIRLIST list); <br>BOOL dir_isfile(DIRLIST list); <br>DIRITEM dir_firstitem(DIRLIST list); <br>DIRITEM dir_nextitem(DIRLIST list, DIRITEM previtem, BOOL fDeep); <br> <br>/* Filenames <br> * <br> * From a DIRITEM, you can query either the relative or the full name. <br> * <br> * The relative name does not include the tree root that was originally <br> * passed to dir_buildlist. The full name does include this. Note however <br> * that if you passed a relative name to dir_buildlist, the full <br> * name you get back will not be an *absolute* pathname. <br> * <br> * Thus, if you call dir_buildlist with "c:\", <br> * we will return: <br> *      relative name:  ".\config.sys" <br> *      full name:      "c:\config.sys" <br> * <br> * If you call dir_buildlist with ".\geraintd", <br> * we will return: <br> *      relative name:  ".\source\scandir.h" <br> *      full name:      ".\geraintd\source\scandir.h" <br> * <br> * In both cases, we return a pointer to a filename string: you must <br> * call dir_freefullname or dir_freerelname to free this memory when you <br> * have finished with it. Depending on the implementation, one or other <br> * (or possibly both) of these names will have been built specially <br> * when you called the query function. <br> * <br> * You can also return a pointer to the tree root name. (In the above <br> * examples this would be c:\ and .\geraintd). Depending on the implementation, <br> * this may have been forced to an absolute path. <br> * <br> */ <br> <br>LPSTR dir_getfullname(DIRITEM item); <br>LPSTR dir_getrelname(DIRITEM item); <br>LPSTR dir_getroot_item(DIRITEM item); <br>LPSTR dir_getroot_list(DIRLIST dl); <br>void dir_freefullname(DIRITEM item, LPSTR fullname); <br>void dir_freerelname(DIRITEM item, LPSTR relname); <br>void dir_freeroot_item(DIRITEM item, LPSTR rootname); <br>void dir_freeroot_list(DIRLIST dl, LPSTR rootname); <br>LPSTR dir_getopenname(DIRITEM item); <br>void dir_freeopenname(DIRITEM item, LPSTR openname); <br>int dir_openfile(DIRITEM item); <br>void dir_closefile(DIRITEM item, int fh); <br>long dir_getfilesize(DIRITEM item); <br>BOOL dir_copy(DIRITEM item, LPSTR newroot); <br>BOOL dir_startcopy(DIRLIST dl); <br>int dir_endcopy(DIRLIST dl); </code></pre>
<p>&nbsp;</p></body>
</HTML>

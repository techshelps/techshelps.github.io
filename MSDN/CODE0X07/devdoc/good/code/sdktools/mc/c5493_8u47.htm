<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MCOUT.C</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5497"></a>MCOUT.C</h2>
<pre><code>/*++ <br> <br>Copyright 1991-1998 Microsoft Corporation <br> <br>Module Name: <br> <br>    mcout.c <br> <br>Abstract: <br> <br>    This file contains the output functions of the Win32 Message Compiler (MC) <br> <br>--*/ <br> <br>#include "mc.h" <br> <br>PMESSAGE_BLOCK MessageBlocks = NULL; <br>int NumberOfBlocks = 0; <br> <br>/*++ <br> <br>Routine Description: <br> <br>Arguments: <br> <br> <br>Return Value: <br> <br> <br>--*/ <br> <br> <br>BOOLEAN <br>McBlockMessages( void ) <br>{ <br>    PMESSAGE_BLOCK p, *pp; <br>    PMESSAGE_INFO MessageInfo; <br> <br>    pp = &amp;MessageBlocks; <br>    p = NULL; <br> <br>    MessageInfo = Messages; <br>    while (MessageInfo) { <br>        if (p) { <br>            if (p-&gt;HighId+1 == MessageInfo-&gt;Id) { <br>                p-&gt;HighId += 1; <br>                } <br>            else { <br>                pp = &amp;p-&gt;Next; <br>                } <br>            } <br> <br>        if (!*pp) { <br>            NumberOfBlocks += 1; <br>            p = malloc( sizeof( *p ) ); <br>            p-&gt;Next = NULL; <br>            p-&gt;LowId = MessageInfo-&gt;Id; <br>            p-&gt;HighId = MessageInfo-&gt;Id; <br>            p-&gt;LowInfo = MessageInfo; <br>            *pp = p; <br>            } <br> <br>        MessageInfo = MessageInfo-&gt;Next; <br>        } <br> <br>    return( TRUE ); <br>} <br> <br>/*++ <br> <br>Routine Description: <br> <br>Arguments: <br> <br> <br>Return Value: <br> <br> <br>--*/ <br> <br> <br>BOOLEAN <br>McWriteBinaryFiles( void ) <br>{ <br>    PNAME_INFO LanguageName, *pp; <br>    PLANGUAGE_INFO LanguageInfo; <br>    PMESSAGE_INFO MessageInfo; <br>    PMESSAGE_BLOCK BlockInfo; <br>    char *FileName; <br>    ULONG cb; <br>    ULONG MessageOffset; <br>    MESSAGE_RESOURCE_ENTRY MessageEntry; <br>    MESSAGE_RESOURCE_BLOCK MessageBlock; <br>    MESSAGE_RESOURCE_DATA  MessageData; <br>    ULONG Zeroes = 0; <br>    ULONG NumberOfMessages; <br> <br>    FileName = BinaryMessageFileName; <br>    FileName += strlen( FileName ); <br> <br>    pp = &amp;LanguageNames; <br>    while (LanguageName = *pp) { <br>        pp = &amp;LanguageName-&gt;Next; <br>        if (!LanguageName-&gt;Used) { <br>            continue; <br>            } <br> <br>        strcpy( FileName, LanguageName-&gt;Value ); <br>        strcat( FileName, ".bin" ); <br>        if (!(BinaryMessageFile = fopen( BinaryMessageFileName, "wb" ))) { <br>            McInputError( "unable to open output file - %s", TRUE, BinaryMessageFileName ); <br>            return( FALSE ); <br>            } <br> <br>        if (VerboseOutput) { <br>            fprintf( stderr, "Writing %s\n", BinaryMessageFileName ); <br>            } <br> <br>        fprintf( RcInclFile, "LANGUAGE 0x%x,0x%x\r\n", <br>                             PRIMARYLANGID( LanguageName-&gt;Id ), <br>                             SUBLANGID( LanguageName-&gt;Id ) <br>               ); <br> <br>        fprintf( RcInclFile, "1 11 %s\r\n", FileName ); <br> <br>        NumberOfMessages = 0L; <br> <br>        MessageData.NumberOfBlocks = NumberOfBlocks; <br>        MessageOffset = fwrite( &amp;MessageData, <br>                                1, <br>                                (size_t)FIELD_OFFSET( MESSAGE_RESOURCE_DATA, <br>                                                      Blocks[ 0 ] <br>                                                    ), <br>                                BinaryMessageFile <br>                              ); <br>        MessageOffset += NumberOfBlocks * sizeof( MessageBlock ); <br> <br>        BlockInfo = MessageBlocks; <br>        while (BlockInfo) { <br>            MessageBlock.LowId = BlockInfo-&gt;LowId; <br>            MessageBlock.HighId = BlockInfo-&gt;HighId; <br>            MessageBlock.OffsetToEntries = MessageOffset; <br>            fwrite( &amp;MessageBlock, 1, sizeof( MessageBlock ), BinaryMessageFile ); <br> <br>            BlockInfo-&gt;InfoLength = 0; <br>            MessageInfo = BlockInfo-&gt;LowInfo; <br>            while (MessageInfo != NULL &amp;&amp; MessageInfo-&gt;Id &lt;= BlockInfo-&gt;HighId) { <br>                LanguageInfo = MessageInfo-&gt;MessageText; <br>                while (LanguageInfo) { <br>                    if (LanguageInfo-&gt;Id == LanguageName-&gt;Id) { <br>                        break; <br>                        } <br>                    else { <br>                        LanguageInfo = LanguageInfo-&gt;Next; <br>                        } <br>                    } <br> <br>                if (LanguageInfo != NULL) { <br>                    cb = FIELD_OFFSET( MESSAGE_RESOURCE_ENTRY, Text[ 0 ] ) + <br>                         LanguageInfo-&gt;Length + 1; <br> <br>                    cb = (cb + 3) &amp; ~3; <br>                    BlockInfo-&gt;InfoLength += cb; <br>                    } <br>                else { <br>                    fprintf( stderr, <br>                             "MC: No %s language text for %s\n", <br>                             LanguageName-&gt;Name, <br>                             MessageInfo-&gt;SymbolicName <br>                           ); <br>                    fclose( BinaryMessageFile ); <br>                    return( FALSE ); <br>                    } <br> <br>                MessageInfo = MessageInfo-&gt;Next; <br>                } <br> <br>            if (VerboseOutput) { <br>                fprintf( stderr, "    [%08lx .. %08lx] - %lu bytes\n", <br>                         BlockInfo-&gt;LowId, <br>                         BlockInfo-&gt;HighId, <br>                         BlockInfo-&gt;InfoLength <br>                       ); <br>                } <br> <br>            MessageOffset += BlockInfo-&gt;InfoLength; <br>            BlockInfo = BlockInfo-&gt;Next; <br>            } <br> <br>        BlockInfo = MessageBlocks; <br>        while (BlockInfo) { <br>            MessageInfo = BlockInfo-&gt;LowInfo; <br>            while (MessageInfo != NULL &amp;&amp; MessageInfo-&gt;Id &lt;= BlockInfo-&gt;HighId) { <br>                LanguageInfo = MessageInfo-&gt;MessageText; <br>                while (LanguageInfo) { <br>                    if (LanguageInfo-&gt;Id == LanguageName-&gt;Id) { <br>                        break; <br>                        } <br>                    else { <br>                        LanguageInfo = LanguageInfo-&gt;Next; <br>                        } <br>                    } <br> <br>                if (LanguageInfo != NULL) { <br>                    cb = FIELD_OFFSET( MESSAGE_RESOURCE_ENTRY, Text[ 0 ] ) + <br>                         LanguageInfo-&gt;Length + 1; <br> <br>                    cb = (cb + 3) &amp; ~3; <br> <br>                    MessageEntry.Length = (USHORT)cb; <br>                    MessageEntry.Flags = 0; <br> <br>                    cb = fwrite( &amp;MessageEntry, <br>                                 1, <br>                                 (size_t)FIELD_OFFSET( MESSAGE_RESOURCE_ENTRY, <br>                                                       Text[ 0 ] <br>                                                     ), <br>                                 BinaryMessageFile <br>                               ); <br>                    cb += fwrite( LanguageInfo-&gt;Text, <br>                                  1, <br>                                  (size_t)LanguageInfo-&gt;Length, <br>                                  BinaryMessageFile <br>                                ); <br> <br>                    NumberOfMessages++; <br> <br>                    cb = MessageEntry.Length - cb; <br>                    if (cb) { <br>                        fwrite( &amp;Zeroes, <br>                                1, <br>                                (size_t)cb, <br>                                BinaryMessageFile <br>                              ); <br>                        } <br>                    } <br> <br>                MessageInfo = MessageInfo-&gt;Next; <br>                } <br> <br>            BlockInfo = BlockInfo-&gt;Next; <br>            } <br> <br>        if (VerboseOutput) { <br>            fprintf( stderr, "    Total of %lu messages, %lu bytes\n", <br>                             NumberOfMessages, <br>                             ftell( BinaryMessageFile ) <br>                   ); <br>            } <br> <br>        fclose( BinaryMessageFile ); <br>        } <br> <br>    return( TRUE ); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

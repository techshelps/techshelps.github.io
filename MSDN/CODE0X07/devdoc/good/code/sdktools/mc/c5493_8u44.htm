<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MC.C</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5494"></a>MC.C</h2>
<pre><code>/*++ <br> <br>Copyright 1991-1998 Microsoft Corporation <br> <br>Module Name: <br> <br>    mc.c <br> <br>Abstract: <br> <br>    This is the main source file for the Win32 Message Compiler (MC) <br> <br>--*/ <br> <br>#include "mc.h" <br> <br>#include "windows.h" <br> <br> <br>void <br>ConvertAppToOem( unsigned argc, char* argv[] ) <br>/*++ <br> <br>Routine Description: <br> <br>    Converts the command line from ANSI to OEM, and force the app <br>    to use OEM APIs <br> <br>Arguments: <br> <br>    argc - Standard C argument count. <br> <br>    argv - Standard C argument strings. <br> <br>Return Value: <br> <br>    None. <br> <br>--*/ <br> <br>{ <br>    unsigned i; <br> <br>    for( i=0; i&lt;argc; i++ ) { <br>       CharToOem( argv[i], argv[i] ); <br>    } <br>    SetFileApisToOEM(); <br>} <br> <br> <br> <br> <br>void <br>McPrintUsage( void ) <br>{ <br>    fprintf( stderr, "usage: MC [-?vws] [-h dirspec] [-r dirspec] filename.mc\n" ); <br>    fprintf( stderr, "       -? - displays this message\n" ); <br>    fprintf( stderr, "       -v - gives verbose output.\n" ); <br>    fprintf( stderr, "       -c - sets the Customer bit in all the message Ids.\n" ); <br>    fprintf( stderr, "       -d - numeric values in header file in decimal.\n" ); <br>    fprintf( stderr, "       -w - warns if message text contains non-OS/2 compatible inserts.\n" ); <br>    fprintf( stderr, "       -s - insert symbolic name as first line of each message.\n" ); <br>    fprintf( stderr, "       -h pathspec - gives the path of where to create the C include file\n" ); <br>    fprintf( stderr, "                     Default is .\\\n" ); <br>    fprintf( stderr, "       -r pathspec - gives the path of where to create the RC include file\n" ); <br>    fprintf( stderr, "                     and the binary message resource files it includes.\n" ); <br>    fprintf( stderr, "                     Default is .\\\n" ); <br>    fprintf( stderr, "       filename.mc - gives the names of a message text file\n" ); <br>    fprintf( stderr, "                     to compile.\n" ); <br>} <br> <br> <br>int <br>_CRTAPI1 main( <br>    int argc, <br>    char *argv[] <br>    ) <br>{ <br>    char c, *s, *s1; <br>    int ShowUsage; <br> <br> <br>    ConvertAppToOem( argc, argv ); <br>    FacilityNames = NULL; <br>    SeverityNames = NULL; <br>    LanguageNames = NULL; <br> <br>    MessageIdTypeName = NULL; <br> <br>    CurrentFacilityName = <br>    McAddName( &amp;FacilityNames, "Application",  0x0, NULL ); <br>    CurrentSeverityName = <br>    McAddName( &amp;SeverityNames, "Success",       0x0, NULL ); <br> <br>    McAddName( &amp;SeverityNames, "Informational", 0x1, NULL ); <br>    McAddName( &amp;SeverityNames, "Warning",       0x2, NULL ); <br>    McAddName( &amp;SeverityNames, "Error",         0x3, NULL ); <br> <br>    McAddName( &amp;LanguageNames, <br>               "English", <br>               MAKELANGID(LANG_ENGLISH, SUBLANG_ENGLISH_US), <br>               "MSG00001" <br>             ); <br> <br>    strcpy( HeaderFileName, ".\\" ); <br>    strcpy( RcInclFileName, ".\\" ); <br>    strcpy( BinaryMessageFileName, ".\\" ); <br>    MessageFileName[ 0 ] = '\0'; <br> <br>    McInitLexer(); <br> <br>    VerboseOutput = FALSE; <br>    WarnOs2Compatible = FALSE; <br>    GenerateDecimalValues = FALSE; <br>    ShowUsage = FALSE; <br>    while (--argc) { <br>        s = *++argv; <br>        if (*s == '-' || *s == '/') { <br>            while (c = *++s) { <br>                switch( c ) { <br>                case '?': <br>                    McPrintUsage(); <br>                    exit( 0 ); <br>                    break; <br> <br>                case 'c': <br>                    CustomerMsgIdBit = 0x1 &lt;&lt; 29; <br>                    break; <br> <br>                case 'v': <br>                    VerboseOutput = TRUE; <br>                    break; <br> <br>                case 'd': <br>                    GenerateDecimalValues = TRUE; <br>                    break; <br> <br>                case 'w': <br>                    WarnOs2Compatible = TRUE; <br>                    break; <br> <br>                case 's': <br>                    InsertSymbolicName = TRUE; <br>                    break; <br> <br>                case 'h': <br>                    if (--argc) { <br>                        strcpy( s1 = HeaderFileName, *++argv ); <br>s1 += strlen( s1 ); <br>                        s1 = CharPrev( HeaderFileName, s1 ); <br>                        if (*s1 != '\\' &amp;&amp; *s1 != '/') { <br>                            s1 = CharNext( s1 ); <br>                            *s1 = '\\'; <br>                            *++s1 = '\0'; <br>    } <br>} <br>                    else { <br>                        argc++; <br>                        fprintf( stderr, "MC: missing argument for -%c switch\n", (USHORT)c ); <br>                        ShowUsage = TRUE; <br>                        } <br>                    break; <br> <br>                case 'r': <br>                    if (--argc) { <br>strcpy( s1 = RcInclFileName, *++argv ); <br>                        s1 += strlen( s1 ); <br>                        s1 = CharPrev( HeaderFileName, s1 ); <br>                        if (*s1 != '\\' &amp;&amp; *s1 != '/') { <br>                            s1 = CharNext( s1 ); <br>                            *s1 = '\\'; <br>                            *++s1 = '\0'; <br>                        } <br>strcpy( BinaryMessageFileName, RcInclFileName ); <br>                        } <br>                    else { <br>                        argc++; <br>                        fprintf( stderr, "MC: missing argument for -%c switch\n", (USHORT)c ); <br>                        ShowUsage = TRUE; <br>                        } <br>                    break; <br> <br>                default: <br>                    fprintf( stderr, "MC: Invalid switch: %c\n", (USHORT)c ); <br>                    ShowUsage = TRUE; <br>                    break; <br>                    } <br>                } <br>            } <br>        else <br>        if (strlen( MessageFileName )) { <br>            fprintf( stderr, "MC: may only specify one message file to compile.\n" ); <br>            ShowUsage = TRUE; <br>            } <br>        else { <br>            strcpy( MessageFileName, s ); <br>            } <br>        } <br> <br>    if (ShowUsage) { <br>        McPrintUsage(); <br>        exit( 1 ); <br>        } <br> <br>    ResultCode = 1; <br>    if (McParseFile() &amp;&amp; McBlockMessages() &amp;&amp; McWriteBinaryFiles()) { <br>        ResultCode = 0; <br>        } <br>    else { <br>        McCloseInputFile(); <br>        McCloseOutputFiles(); <br>        } <br> <br>    return( ResultCode ); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

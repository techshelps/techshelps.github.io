<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MCUTIL.C</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5499"></a>MCUTIL.C</h2>
<pre><code>/*++ <br> <br>Copyright 1991-1998 Microsoft Corporation <br> <br>Module Name: <br> <br>    mcutil.c <br> <br>Abstract: <br> <br>    This file contains utility functions for the Win32 Message Compiler (MC) <br> <br>--*/ <br> <br>#include "mc.h" <br> <br> <br>/*++ <br> <br>Routine Description: <br> <br>    This routine simply writes/overwrites Name, ID and Value <br>    to a link list of NAME_INFO structures. <br> <br>Arguments: <br> <br>    PNAME_INFO <br>    Keyword such as "Facility", "Serverity", ... <br>    Lauguage Identifier; a combination of a Primary Language ID, <br>    Sublanguage ID pair such as LANG_NEUTRAL, SUBLANG_NEUTRAL <br>    An option value specfic to the keyword. <br> <br>Return Value: <br> <br>    The list PNAME_INFO <br> <br>--*/ <br> <br>PNAME_INFO <br>McAddName( <br>    PNAME_INFO *NameListHead, <br>    char *Name, <br>    ULONG Id, <br>    PVOID Value <br>    ) <br>{ <br>    PNAME_INFO p; <br>    int n; <br> <br>    while (p = *NameListHead) { <br>        if (!(n = stricmp( p-&gt;Name, Name ))) { <br>            if (p-&gt;Id != Id) { <br>                McInputError( "Redefining value of %s", FALSE, Name ); <br>                } <br> <br>            p-&gt;Id = Id; <br>            p-&gt;Value = Value; <br>            p-&gt;Used = FALSE; <br>            return( p ); <br>            } <br>        else <br>        if (n &lt; 0) { <br>            break; <br>            } <br> <br>        NameListHead = &amp;p-&gt;Next; <br>        } <br> <br>    p = malloc( sizeof( *p ) + strlen( Name ) ); <br>    p-&gt;LastId = 0; <br>    p-&gt;Id = Id; <br>    p-&gt;Value = Value; <br>    p-&gt;Used = FALSE; <br>    strcpy( p-&gt;Name, Name ); <br>    p-&gt;Next = *NameListHead; <br>    *NameListHead = p; <br>    return( p ); <br>} <br> <br> <br> <br>/*++ <br> <br>Routine Description: <br> <br>    This routine returns the NAME_INFO structure cooresponding to the <br>    given Keyword. <br> <br>Arguments: <br> <br>    PNAME_INFO <br>    Keyword such as "Facility", "Serverity", ... <br> <br>Return Value: <br> <br>    Either the NAME_INFO structure cooresponding to the keyname or NULL <br> <br>--*/ <br> <br> <br>PNAME_INFO <br>McFindName( <br>    PNAME_INFO NameListHead, <br>    char *Name <br>    ) <br>{ <br>    PNAME_INFO p; <br> <br>    p = NameListHead; <br>    while (p) { <br>        if (!stricmp( p-&gt;Name, Name )) { <br>            p-&gt;Used = TRUE; <br>            break; <br>            } <br> <br>        p = p-&gt;Next; <br>        } <br> <br>    return( p ); <br>} <br> <br> <br> <br>/*++ <br> <br>Routine Description: <br> <br>    This converts a string value to the corresponding integer value <br>    in the specified base. <br> <br>Arguments: <br> <br>    String image of an integer <br>    Base of resultant integer <br>    Pointer to a unsigned long <br> <br> <br>Return Value: <br> <br>    A unsigned long <br> <br>--*/ <br> <br>BOOLEAN <br>McCharToInteger( <br>    PCHAR String, <br>    int Base, <br>    PULONG Value <br>    ) <br>{ <br>    CHAR c; <br>    ULONG Result, Digit, Shift; <br> <br> <br>    c = *String; <br>    String = CharNext(String); <br>    if (!Base) { <br>        Base = 10; <br>        Shift = 0; <br>        if (c == '0') { <br>            c = *String++; <br>            if (c == 'x') { <br>                Base = 16; <br>                Shift = 4; <br>                } <br>            else <br>            if (c == 'o') { <br>                Base = 8; <br>                Shift = 3; <br>                } <br>            else <br>            if (c == 'b') { <br>                Base = 2; <br>                Shift = 1; <br>                } <br>            else { <br>                String--; <br>                } <br> <br>            c = *String++; <br>            } <br>        } <br>    else { <br>        switch( Base ) { <br>            case 16:    Shift = 4;  break; <br>            case  8:    Shift = 3;  break; <br>            case  2:    Shift = 1;  break; <br>            case 10:    Shift = 0;  break; <br>            default:    return( FALSE ); <br>            } <br>        } <br> <br>    Result = 0; <br>    while (c) { <br>        if (c &gt;= '0' &amp;&amp; c &lt;= '9') { <br>            Digit = c - '0'; <br>            } <br>        else <br>        if (c &gt;= 'A' &amp;&amp; c &lt;= 'F') { <br>            Digit = c - 'A' + 10; <br>            } <br>        else <br>        if (c &gt;= 'a' &amp;&amp; c &lt;= 'f') { <br>            Digit = c - 'a' + 10; <br>            } <br>        else { <br>            break; <br>            } <br> <br>        if ((int)Digit &gt;= Base) { <br>            break; <br>            } <br> <br>        if (Shift == 0) { <br>            Result = (Base * Result) + Digit; <br>            } <br>        else { <br>            Result = (Result &lt;&lt; Shift) | Digit; <br>            } <br> <br> <br>        c = *String; <br>        String = CharNext(String); <br>} <br> <br>    *Value = Result; <br>    return( TRUE ); <br>} <br> <br>/*++ <br> <br>Routine Description: <br> <br>    Duplicates a string <br> <br>Arguments: <br> <br>    A string value <br> <br>Return Value: <br> <br>    The duplicated string value <br> <br>--*/ <br> <br> <br>char * <br>McMakeString( <br>    char *String <br>    ) <br>{ <br>    char *s; <br> <br>    s = malloc( strlen( String ) + 1 ); <br>    strcpy( s, String ); <br>    return( s ); <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

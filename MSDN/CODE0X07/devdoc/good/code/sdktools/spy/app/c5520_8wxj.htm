<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WM.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5527"></a>WM.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>/*****************************************************************************\ <br>* <br>* Module: wm.c <br>* <br>* Contains functions that lookup and format messages received by the <br>* Windows debugging Spy SDK applet. <br>* <br>* Functions: <br>* <br>*    CalculatePrintfTabs() <br>*    PrintMsg() <br>*    DecodeGeneric() <br>*    MsgCmp() <br>*    mprintf() <br>* <br>* Comments: <br>* <br>\*****************************************************************************/ <br> <br>#include "spy.h" <br>#include &lt;stdlib.h&gt; <br>#include &lt;dde.h&gt; <br> <br> <br>PRIVATE CHAR szFormatName[] = "%08X\t%s\t%08X\t%08X\r\n"; <br>PRIVATE CHAR szFormatUSER[] = "%08X\tWM_USER+%d\t%08X\t%08X\r\n"; <br>PRIVATE CHAR szFormatUnknown[] = "%08X\tWM_%04X\t%08X\t%08X\r\n"; <br> <br> <br> <br>VOID DecodeGeneric(HWND hwnd, UINT msg, PSPYMSGDATA psmd) {} <br> <br> <br>// <br>// Message description table.  Describes each message that can be spied on. <br>// This table must be kept in sorted order. <br>// <br>MSGDESC gaMsgs[] = <br>{ <br>    { "WM_NULL", WM_NULL,                                   // 0x0000 <br>        0, DecodeGeneric }, <br>    { "WM_CREATE", WM_CREATE,                               // 0x0001 <br>        0, DecodeGeneric }, <br>    { "WM_DESTROY", WM_DESTROY,                             // 0x0002 <br>        0, DecodeGeneric }, <br>    { "WM_MOVE", WM_MOVE,                                   // 0x0003 <br>        0, DecodeGeneric }, <br>    { "WM_SIZE", WM_SIZE,                                   // 0x0005 <br>        0, DecodeGeneric }, <br>    { "WM_ACTIVATE", WM_ACTIVATE,                           // 0x0006 <br>        0, DecodeGeneric }, <br>    { "WM_SETFOCUS", WM_SETFOCUS,                           // 0x0007 <br>        0, DecodeGeneric }, <br>    { "WM_KILLFOCUS", WM_KILLFOCUS,                         // 0x0008 <br>        0, DecodeGeneric }, <br>    { "WM_ENABLE", WM_ENABLE,                               // 0x000A <br>        0, DecodeGeneric }, <br>    { "WM_SETREDRAW", WM_SETREDRAW,                         // 0x000B <br>        0, DecodeGeneric }, <br>    { "WM_SETTEXT", WM_SETTEXT,                             // 0x000C <br>        0, DecodeGeneric }, <br>    { "WM_GETTEXT", WM_GETTEXT,                             // 0x000D <br>        0, DecodeGeneric }, <br>    { "WM_GETTEXTLENGTH", WM_GETTEXTLENGTH,                 // 0x000E <br>        0, DecodeGeneric }, <br>    { "WM_PAINT", WM_PAINT,                                 // 0x000F <br>        0, DecodeGeneric }, <br>    { "WM_CLOSE", WM_CLOSE,                                 // 0x0010 <br>        0, DecodeGeneric }, <br>    { "WM_QUERYENDSESSION", WM_QUERYENDSESSION,             // 0x0011 <br>        0, DecodeGeneric }, <br>    { "WM_QUIT", WM_QUIT,                                   // 0x0012 <br>        0, DecodeGeneric }, <br>    { "WM_QUERYOPEN", WM_QUERYOPEN,                         // 0x0013 <br>        0, DecodeGeneric }, <br>    { "WM_ERASEBKGND", WM_ERASEBKGND,                       // 0x0014 <br>        0, DecodeGeneric }, <br>    { "WM_SYSCOLORCHANGE", WM_SYSCOLORCHANGE,               // 0x0015 <br>        0, DecodeGeneric }, <br>    { "WM_ENDSESSION", WM_ENDSESSION,                       // 0x0016 <br>        0, DecodeGeneric }, <br>    { "WM_SHOWWINDOW", WM_SHOWWINDOW,                       // 0x0018 <br>        0, DecodeGeneric }, <br>    { "WM_WININICHANGE", WM_WININICHANGE,                   // 0x001A <br>        0, DecodeGeneric }, <br>    { "WM_DEVMODECHANGE", WM_DEVMODECHANGE,                 // 0x001B <br>        0, DecodeGeneric }, <br>    { "WM_ACTIVATEAPP", WM_ACTIVATEAPP,                     // 0x001C <br>        0, DecodeGeneric }, <br>    { "WM_FONTCHANGE", WM_FONTCHANGE,                       // 0x001D <br>        0, DecodeGeneric }, <br>    { "WM_TIMECHANGE", WM_TIMECHANGE,                       // 0x001E <br>        0, DecodeGeneric }, <br>    { "WM_CANCELMODE", WM_CANCELMODE,                       // 0x001F <br>        0, DecodeGeneric }, <br>    { "WM_SETCURSOR", WM_SETCURSOR,                         // 0x0020 <br>        MTF_TYPE_MOUSE, DecodeGeneric }, <br>    { "WM_MOUSEACTIVATE", WM_MOUSEACTIVATE,                 // 0x0021 <br>        MTF_TYPE_MOUSE, DecodeGeneric }, <br>    { "WM_CHILDACTIVATE", WM_CHILDACTIVATE,                 // 0x0022 <br>        0, DecodeGeneric }, <br>    { "WM_QUEUESYNC", WM_QUEUESYNC,                         // 0x0023 <br>        0, DecodeGeneric }, <br>    { "WM_GETMINMAXINFO", WM_GETMINMAXINFO,                 // 0x0024 <br>        0, DecodeGeneric }, <br>    { "WM_PAINTICON", WM_PAINTICON,                         // 0x0026 <br>        0, DecodeGeneric }, <br>    { "WM_ICONERASEBKGND", WM_ICONERASEBKGND,               // 0x0027 <br>        0, DecodeGeneric }, <br>    { "WM_NEXTDLGCTL", WM_NEXTDLGCTL,                       // 0x0028 <br>        0, DecodeGeneric }, <br>    { "WM_SPOOLERSTATUS", WM_SPOOLERSTATUS,                 // 0x002A <br>        0, DecodeGeneric }, <br>    { "WM_DRAWITEM", WM_DRAWITEM,                           // 0x002B <br>        0, DecodeGeneric }, <br>    { "WM_MEASUREITEM", WM_MEASUREITEM,                     // 0x002C <br>        0, DecodeGeneric }, <br>    { "WM_DELETEITEM", WM_DELETEITEM,                       // 0x002D <br>        0, DecodeGeneric }, <br>    { "WM_VKEYTOITEM", WM_VKEYTOITEM,                       // 0x002E <br>        MTF_TYPE_KEYBD, DecodeGeneric }, <br>    { "WM_CHARTOITEM", WM_CHARTOITEM,                       // 0x002F <br>        MTF_TYPE_KEYBD, DecodeGeneric }, <br>    { "WM_SETFONT", WM_SETFONT,                             // 0x0030 <br>        0, DecodeGeneric }, <br>    { "WM_GETFONT", WM_GETFONT,                             // 0x0031 <br>        0, DecodeGeneric }, <br>    { "WM_SETHOTKEY", WM_SETHOTKEY,                         // 0x0032 <br>        MTF_TYPE_KEYBD, DecodeGeneric }, <br>    { "WM_GETHOTKEY", WM_GETHOTKEY,                         // 0x0033 <br>        MTF_TYPE_KEYBD, DecodeGeneric }, <br>    { "WM_QUERYDRAGICON", WM_QUERYDRAGICON,                 // 0x0037 <br>        0, DecodeGeneric }, <br>    { "WM_COMPAREITEM", WM_COMPAREITEM,                     // 0x0039 <br>        0, DecodeGeneric }, <br>    { "WM_COMPACTING", WM_COMPACTING,                       // 0x0041 <br>        0, DecodeGeneric }, <br>    { "WM_WINDOWPOSCHANGING", WM_WINDOWPOSCHANGING,         // 0x0046 <br>        0, DecodeGeneric }, <br>    { "WM_WINDOWPOSCHANGED", WM_WINDOWPOSCHANGED,           // 0x0047 <br>        0, DecodeGeneric }, <br>    { "WM_POWER", WM_POWER,                                 // 0x0048 <br>        0, DecodeGeneric }, <br>    { "WM_COPYDATA", WM_COPYDATA,                           // 0x004A <br>        0, DecodeGeneric }, <br>    { "WM_CANCELJOURNAL", WM_CANCELJOURNAL,                 // 0x004B <br>        0, DecodeGeneric }, <br>    { "WM_NCCREATE", WM_NCCREATE,                           // 0x0081 <br>        MTF_TYPE_NC, DecodeGeneric }, <br>    { "WM_NCDESTROY", WM_NCDESTROY,                         // 0x0082 <br>        MTF_TYPE_NC, DecodeGeneric }, <br>    { "WM_NCCALCSIZE", WM_NCCALCSIZE,                       // 0x0083 <br>        MTF_TYPE_NC, DecodeGeneric }, <br>    { "WM_NCHITTEST", WM_NCHITTEST,                         // 0x0084 <br>        MTF_TYPE_NC | MTF_TYPE_MOUSE, DecodeGeneric }, <br>    { "WM_NCPAINT", WM_NCPAINT,                             // 0x0085 <br>        MTF_TYPE_NC, DecodeGeneric }, <br>    { "WM_NCACTIVATE", WM_NCACTIVATE,                       // 0x0086 <br>        MTF_TYPE_NC, DecodeGeneric }, <br>    { "WM_GETDLGCODE", WM_GETDLGCODE,                       // 0x0087 <br>        0, DecodeGeneric }, <br>    { "WM_NCMOUSEMOVE", WM_NCMOUSEMOVE,                     // 0x00A0 <br>        MTF_TYPE_NC | MTF_TYPE_MOUSE, DecodeGeneric }, <br>    { "WM_NCLBUTTONDOWN", WM_NCLBUTTONDOWN,                 // 0x00A1 <br>        MTF_TYPE_NC | MTF_TYPE_MOUSE, DecodeGeneric }, <br>    { "WM_NCLBUTTONUP", WM_NCLBUTTONUP,                     // 0x00A2 <br>        MTF_TYPE_NC | MTF_TYPE_MOUSE, DecodeGeneric }, <br>    { "WM_NCLBUTTONDBLCLK", WM_NCLBUTTONDBLCLK,             // 0x00A3 <br>        MTF_TYPE_NC | MTF_TYPE_MOUSE, DecodeGeneric }, <br>    { "WM_NCRBUTTONDOWN", WM_NCRBUTTONDOWN,                 // 0x00A4 <br>        MTF_TYPE_NC | MTF_TYPE_MOUSE, DecodeGeneric }, <br>    { "WM_NCRBUTTONUP", WM_NCRBUTTONUP,                     // 0x00A5 <br>        MTF_TYPE_NC | MTF_TYPE_MOUSE, DecodeGeneric }, <br>    { "WM_NCRBUTTONDBLCLK", WM_NCRBUTTONDBLCLK,             // 0x00A6 <br>        MTF_TYPE_NC | MTF_TYPE_MOUSE, DecodeGeneric }, <br>    { "WM_NCMBUTTONDOWN", WM_NCMBUTTONDOWN,                 // 0x00A7 <br>        MTF_TYPE_NC | MTF_TYPE_MOUSE, DecodeGeneric }, <br>    { "WM_NCMBUTTONUP", WM_NCMBUTTONUP,                     // 0x00A8 <br>        MTF_TYPE_NC | MTF_TYPE_MOUSE, DecodeGeneric }, <br>    { "WM_NCMBUTTONDBLCLK", WM_NCMBUTTONDBLCLK,             // 0x00A9 <br>        MTF_TYPE_NC | MTF_TYPE_MOUSE, DecodeGeneric }, <br>    { "EM_GETSEL", EM_GETSEL,                               // 0x00B0 <br>        MTF_TYPE_EM, DecodeGeneric }, <br>    { "EM_SETSEL", EM_SETSEL,                               // 0x00B1 <br>        MTF_TYPE_EM, DecodeGeneric }, <br>    { "EM_GETRECT", EM_GETRECT,                             // 0x00B2 <br>        MTF_TYPE_EM, DecodeGeneric }, <br>    { "EM_SETRECT", EM_SETRECT,                             // 0x00B3 <br>        MTF_TYPE_EM, DecodeGeneric }, <br>    { "EM_SETRECTNP", EM_SETRECTNP,                         // 0x00B4 <br>        MTF_TYPE_EM, DecodeGeneric }, <br>    { "EM_SCROLL", EM_SCROLL,                               // 0x00B5 <br>        MTF_TYPE_EM, DecodeGeneric }, <br>    { "EM_LINESCROLL", EM_LINESCROLL,                       // 0x00B6 <br>        MTF_TYPE_EM, DecodeGeneric }, <br>    { "EM_SCROLLCARET", EM_SCROLLCARET,                     // 0x00B7 <br>        MTF_TYPE_EM, DecodeGeneric }, <br>    { "EM_GETMODIFY", EM_GETMODIFY,                         // 0x00B8 <br>        MTF_TYPE_EM, DecodeGeneric }, <br>    { "EM_SETMODIFY", EM_SETMODIFY,                         // 0x00B9 <br>        MTF_TYPE_EM, DecodeGeneric }, <br>    { "EM_GETLINECOUNT", EM_GETLINECOUNT,                   // 0x00BA <br>        MTF_TYPE_EM, DecodeGeneric }, <br>    { "EM_LINEINDEX", EM_LINEINDEX,                         // 0x00BB <br>        MTF_TYPE_EM, DecodeGeneric }, <br>    { "EM_SETHANDLE", EM_SETHANDLE,                         // 0x00BC <br>        MTF_TYPE_EM, DecodeGeneric }, <br>    { "EM_GETHANDLE", EM_GETHANDLE,                         // 0x00BD <br>        MTF_TYPE_EM, DecodeGeneric }, <br>    { "EM_GETTHUMB", EM_GETTHUMB,                           // 0x00BE <br>        MTF_TYPE_EM, DecodeGeneric }, <br>    { "EM_LINELENGTH", EM_LINELENGTH,                       // 0x00C1 <br>        MTF_TYPE_EM, DecodeGeneric }, <br>    { "EM_REPLACESEL", EM_REPLACESEL,                       // 0x00C2 <br>        MTF_TYPE_EM, DecodeGeneric }, <br>    { "EM_GETLINE", EM_GETLINE,                             // 0x00C4 <br>        MTF_TYPE_EM, DecodeGeneric }, <br>    { "EM_LIMITTEXT", EM_LIMITTEXT,                         // 0x00C5 <br>        MTF_TYPE_EM, DecodeGeneric }, <br>    { "EM_CANUNDO", EM_CANUNDO,                             // 0x00C6 <br>        MTF_TYPE_EM, DecodeGeneric }, <br>    { "EM_UNDO", EM_UNDO,                                   // 0x00C7 <br>        MTF_TYPE_EM, DecodeGeneric }, <br>    { "EM_FMTLINES", EM_FMTLINES,                           // 0x00C8 <br>        MTF_TYPE_EM, DecodeGeneric }, <br>    { "EM_LINEFROMCHAR", EM_LINEFROMCHAR,                   // 0x00C9 <br>        MTF_TYPE_EM, DecodeGeneric }, <br>    { "EM_SETTABSTOPS", EM_SETTABSTOPS,                     // 0x00CB <br>        MTF_TYPE_EM, DecodeGeneric }, <br>    { "EM_SETPASSWORDCHAR", EM_SETPASSWORDCHAR,             // 0x00CC <br>        MTF_TYPE_EM, DecodeGeneric }, <br>    { "EM_EMPTYUNDOBUFFER", EM_EMPTYUNDOBUFFER,             // 0x00CD <br>        MTF_TYPE_EM, DecodeGeneric }, <br>    { "EM_GETFIRSTVISIBLELINE", EM_GETFIRSTVISIBLELINE,     // 0x00CE <br>        MTF_TYPE_EM, DecodeGeneric }, <br>    { "EM_SETREADONLY", EM_SETREADONLY,                     // 0x00CF <br>        MTF_TYPE_EM, DecodeGeneric }, <br>    { "EM_SETWORDBREAKPROC", EM_SETWORDBREAKPROC,           // 0x00D0 <br>        MTF_TYPE_EM, DecodeGeneric }, <br>    { "EM_GETWORDBREAKPROC", EM_GETWORDBREAKPROC,           // 0x00D1 <br>        MTF_TYPE_EM, DecodeGeneric }, <br>    { "EM_GETPASSWORDCHAR", EM_GETPASSWORDCHAR,             // 0x00D2 <br>        MTF_TYPE_EM, DecodeGeneric }, <br>    { "SBM_SETPOS", SBM_SETPOS,                             // 0x00E0 <br>        0, DecodeGeneric }, <br>    { "SBM_GETPOS", SBM_GETPOS,                             // 0x00E1 <br>        0, DecodeGeneric }, <br>    { "SBM_SETRANGE", SBM_SETRANGE,                         // 0x00E2 <br>        0, DecodeGeneric }, <br>    { "SBM_GETRANGE", SBM_GETRANGE,                         // 0x00E3 <br>        0, DecodeGeneric }, <br>    { "SBM_ENABLE_ARROWS", SBM_ENABLE_ARROWS,               // 0x00E4 <br>        0, DecodeGeneric }, <br>    { "SBM_SETRANGEREDRAW", SBM_SETRANGEREDRAW,             // 0x00E6 <br>        0, DecodeGeneric }, <br>    { "BM_GETCHECK", BM_GETCHECK,                           // 0x00F0 <br>        MTF_TYPE_BM, DecodeGeneric }, <br>    { "BM_SETCHECK", BM_SETCHECK,                           // 0x00F1 <br>        MTF_TYPE_BM, DecodeGeneric }, <br>    { "BM_GETSTATE", BM_GETSTATE,                           // 0x00F2 <br>        MTF_TYPE_BM, DecodeGeneric }, <br>    { "BM_SETSTATE", BM_SETSTATE,                           // 0x00F3 <br>        MTF_TYPE_BM, DecodeGeneric }, <br>    { "BM_SETSTYLE", BM_SETSTYLE,                           // 0x00F4 <br>        MTF_TYPE_BM, DecodeGeneric }, <br>    { "WM_KEYDOWN", WM_KEYDOWN,                             // 0x0100 <br>        MTF_TYPE_KEYBD, DecodeGeneric }, <br>    { "WM_KEYUP", WM_KEYUP,                                 // 0x0101 <br>        MTF_TYPE_KEYBD, DecodeGeneric }, <br>    { "WM_CHAR", WM_CHAR,                                   // 0x0102 <br>        MTF_TYPE_KEYBD, DecodeGeneric }, <br>    { "WM_DEADCHAR", WM_DEADCHAR,                           // 0x0103 <br>        MTF_TYPE_KEYBD, DecodeGeneric }, <br>    { "WM_SYSKEYDOWN", WM_SYSKEYDOWN,                       // 0x0104 <br>        MTF_TYPE_KEYBD, DecodeGeneric }, <br>    { "WM_SYSKEYUP", WM_SYSKEYUP,                           // 0x0105 <br>        MTF_TYPE_KEYBD, DecodeGeneric }, <br>    { "WM_SYSCHAR", WM_SYSCHAR,                             // 0x0106 <br>        MTF_TYPE_KEYBD, DecodeGeneric }, <br>    { "WM_SYSDEADCHAR", WM_SYSDEADCHAR,                     // 0x0107 <br>        MTF_TYPE_KEYBD, DecodeGeneric }, <br>#ifdef  FE_IME <br>    { "WM_WNT_CONVERTREQUESTEX", WM_WNT_CONVERTREQUESTEX,   // 0x0109 <br>        MTF_TYPE_IME, DecodeGeneric }, <br>    { "WM_CONVERTREQUEST", WM_CONVERTREQUEST,               // 0x010A <br>        MTF_TYPE_IME, DecodeGeneric }, <br>    { "WM_CONVERTRESULT", WM_CONVERTRESULT,                 // 0x010B <br>        MTF_TYPE_IME, DecodeGeneric }, <br>    { "WM_INTERIM", WM_INTERIM,                             // 0x010C <br>        MTF_TYPE_IME, DecodeGeneric }, <br>#   define TMP_MTF_TYPE_IME     MTF_TYPE_IME <br>#else // not FE_IME <br>#   define TMP_MTF_TYPE_IME     0 <br>#endif <br>    { "WM_IME_STARTCOMPOSITION", WM_IME_STARTCOMPOSITION,   // 0x010D <br>        TMP_MTF_TYPE_IME, DecodeGeneric }, <br>    { "WM_IME_ENDCOMPOSITION",   WM_IME_ENDCOMPOSITION,     // 0x010E <br>        TMP_MTF_TYPE_IME, DecodeGeneric }, <br>    { "WM_IME_COMPOSITION",      WM_IME_COMPOSITION,        // 0x010F <br>        TMP_MTF_TYPE_IME, DecodeGeneric }, <br>    { "WM_INITDIALOG", WM_INITDIALOG,                       // 0x0110 <br>        0, DecodeGeneric }, <br>    { "WM_COMMAND", WM_COMMAND,                             // 0x0111 <br>        0, DecodeGeneric }, <br>    { "WM_SYSCOMMAND", WM_SYSCOMMAND,                       // 0x0112 <br>        0, DecodeGeneric }, <br>    { "WM_TIMER", WM_TIMER,                                 // 0x0113 <br>        0, DecodeGeneric }, <br>    { "WM_HSCROLL", WM_HSCROLL,                             // 0x0114 <br>        0, DecodeGeneric }, <br>    { "WM_VSCROLL", WM_VSCROLL,                             // 0x0115 <br>        0, DecodeGeneric }, <br>    { "WM_INITMENU", WM_INITMENU,                           // 0x0116 <br>        0, DecodeGeneric }, <br>    { "WM_INITMENUPOPUP", WM_INITMENUPOPUP,                 // 0x0117 <br>        0, DecodeGeneric }, <br>    { "WM_MENUSELECT", WM_MENUSELECT,                       // 0x011F <br>        0, DecodeGeneric }, <br>    { "WM_MENUCHAR", WM_MENUCHAR,                           // 0x0120 <br>        0, DecodeGeneric }, <br>    { "WM_ENTERIDLE", WM_ENTERIDLE,                         // 0x0121 <br>        0, DecodeGeneric }, <br>    { "WM_CTLCOLORMSGBOX", WM_CTLCOLORMSGBOX,               // 0x0132 <br>        0, DecodeGeneric }, <br>    { "WM_CTLCOLOREDIT", WM_CTLCOLOREDIT,                   // 0x0133 <br>        0, DecodeGeneric }, <br>    { "WM_CTLCOLORLISTBOX", WM_CTLCOLORLISTBOX,             // 0x0134 <br>        0, DecodeGeneric }, <br>    { "WM_CTLCOLORBTN", WM_CTLCOLORBTN,                     // 0x0135 <br>        0, DecodeGeneric }, <br>    { "WM_CTLCOLORDLG", WM_CTLCOLORDLG,                     // 0x0136 <br>        0, DecodeGeneric }, <br>    { "WM_CTLCOLORSCROLLBAR", WM_CTLCOLORSCROLLBAR,         // 0x0137 <br>        0, DecodeGeneric }, <br>    { "WM_CTLCOLORSTATIC", WM_CTLCOLORSTATIC,               // 0x0138 <br>        0, DecodeGeneric }, <br>    { "CB_GETEDITSEL", CB_GETEDITSEL,                       // 0x0140 <br>        MTF_TYPE_CB, DecodeGeneric }, <br>    { "CB_LIMITTEXT", CB_LIMITTEXT,                         // 0x0141 <br>        MTF_TYPE_CB, DecodeGeneric }, <br>    { "CB_SETEDITSEL", CB_SETEDITSEL,                       // 0x0142 <br>        MTF_TYPE_CB, DecodeGeneric }, <br>    { "CB_ADDSTRING", CB_ADDSTRING,                         // 0x0143 <br>        MTF_TYPE_CB, DecodeGeneric }, <br>    { "CB_DELETESTRING", CB_DELETESTRING,                   // 0x0144 <br>        MTF_TYPE_CB, DecodeGeneric }, <br>    { "CB_DIR", CB_DIR,                                     // 0x0145 <br>        MTF_TYPE_CB, DecodeGeneric }, <br>    { "CB_GETCOUNT", CB_GETCOUNT,                           // 0x0146 <br>        MTF_TYPE_CB, DecodeGeneric }, <br>    { "CB_GETCURSEL", CB_GETCURSEL,                         // 0x0147 <br>        MTF_TYPE_CB, DecodeGeneric }, <br>    { "CB_GETLBTEXT", CB_GETLBTEXT,                         // 0x0148 <br>        MTF_TYPE_CB, DecodeGeneric }, <br>    { "CB_GETLBTEXTLEN", CB_GETLBTEXTLEN,                   // 0x0149 <br>        MTF_TYPE_CB, DecodeGeneric }, <br>    { "CB_INSERTSTRING", CB_INSERTSTRING,                   // 0x014A <br>        MTF_TYPE_CB, DecodeGeneric }, <br>    { "CB_RESETCONTENT", CB_RESETCONTENT,                   // 0x014B <br>        MTF_TYPE_CB, DecodeGeneric }, <br>    { "CB_FINDSTRING", CB_FINDSTRING,                       // 0x014C <br>        MTF_TYPE_CB, DecodeGeneric }, <br>    { "CB_SELECTSTRING", CB_SELECTSTRING,                   // 0x014D <br>        MTF_TYPE_CB, DecodeGeneric }, <br>    { "CB_SETCURSEL", CB_SETCURSEL,                         // 0x014E <br>        MTF_TYPE_CB, DecodeGeneric }, <br>    { "CB_SHOWDROPDOWN", CB_SHOWDROPDOWN,                   // 0x014F <br>        MTF_TYPE_CB, DecodeGeneric }, <br>    { "CB_GETITEMDATA", CB_GETITEMDATA,                     // 0x0150 <br>        MTF_TYPE_CB, DecodeGeneric }, <br>    { "CB_SETITEMDATA", CB_SETITEMDATA,                     // 0x0151 <br>        MTF_TYPE_CB, DecodeGeneric }, <br>    { "CB_GETDROPPEDCONTROLRECT", CB_GETDROPPEDCONTROLRECT, // 0x0152 <br>        MTF_TYPE_CB, DecodeGeneric }, <br>    { "CB_SETITEMHEIGHT", CB_SETITEMHEIGHT,                 // 0x0153 <br>        MTF_TYPE_CB, DecodeGeneric }, <br>    { "CB_GETITEMHEIGHT", CB_GETITEMHEIGHT,                 // 0x0154 <br>        MTF_TYPE_CB, DecodeGeneric }, <br>    { "CB_SETEXTENDEDUI", CB_SETEXTENDEDUI,                 // 0x0155 <br>        MTF_TYPE_CB, DecodeGeneric }, <br>    { "CB_GETEXTENDEDUI", CB_GETEXTENDEDUI,                 // 0x0156 <br>        MTF_TYPE_CB, DecodeGeneric }, <br>    { "CB_GETDROPPEDSTATE", CB_GETDROPPEDSTATE,             // 0x0157 <br>        MTF_TYPE_CB, DecodeGeneric }, <br>    { "CB_FINDSTRINGEXACT", CB_FINDSTRINGEXACT,             // 0x0158 <br>        MTF_TYPE_CB, DecodeGeneric }, <br>    { "CB_SETLOCALE", CB_SETLOCALE,                         // 0x0159 <br>        MTF_TYPE_CB, DecodeGeneric }, <br>    { "CB_GETLOCALE", CB_GETLOCALE,                         // 0x015A <br>        MTF_TYPE_CB, DecodeGeneric }, <br>    { "STM_SETICON", STM_SETICON,                           // 0x0170 <br>        MTF_TYPE_STM, DecodeGeneric }, <br>    { "STM_GETICON", STM_GETICON,                           // 0x0171 <br>        MTF_TYPE_STM, DecodeGeneric }, <br>    { "LB_ADDSTRING", LB_ADDSTRING,                         // 0x0180 <br>        MTF_TYPE_LB, DecodeGeneric }, <br>    { "LB_INSERTSTRING", LB_INSERTSTRING,                   // 0x0181 <br>        MTF_TYPE_LB, DecodeGeneric }, <br>    { "LB_DELETESTRING", LB_DELETESTRING,                   // 0x0182 <br>        MTF_TYPE_LB, DecodeGeneric }, <br>    { "LB_SELITEMRANGEEX", LB_SELITEMRANGEEX,               // 0x0183 <br>        MTF_TYPE_LB, DecodeGeneric }, <br>    { "LB_RESETCONTENT", LB_RESETCONTENT,                   // 0x0184 <br>        MTF_TYPE_LB, DecodeGeneric }, <br>    { "LB_SETSEL", LB_SETSEL,                               // 0x0185 <br>        MTF_TYPE_LB, DecodeGeneric }, <br>    { "LB_SETCURSEL", LB_SETCURSEL,                         // 0x0186 <br>        MTF_TYPE_LB, DecodeGeneric }, <br>    { "LB_GETSEL", LB_GETSEL,                               // 0x0187 <br>        MTF_TYPE_LB, DecodeGeneric }, <br>    { "LB_GETCURSEL", LB_GETCURSEL,                         // 0x0188 <br>        MTF_TYPE_LB, DecodeGeneric }, <br>    { "LB_GETTEXT", LB_GETTEXT,                             // 0x0189 <br>        MTF_TYPE_LB, DecodeGeneric }, <br>    { "LB_GETTEXTLEN", LB_GETTEXTLEN,                       // 0x018A <br>        MTF_TYPE_LB, DecodeGeneric }, <br>    { "LB_GETCOUNT", LB_GETCOUNT,                           // 0x018B <br>        MTF_TYPE_LB, DecodeGeneric }, <br>    { "LB_SELECTSTRING", LB_SELECTSTRING,                   // 0x018C <br>        MTF_TYPE_LB, DecodeGeneric }, <br>    { "LB_DIR", LB_DIR,                                     // 0x018D <br>        MTF_TYPE_LB, DecodeGeneric }, <br>    { "LB_GETTOPINDEX", LB_GETTOPINDEX,                     // 0x018E <br>        MTF_TYPE_LB, DecodeGeneric }, <br>    { "LB_FINDSTRING", LB_FINDSTRING,                       // 0x018F <br>        MTF_TYPE_LB, DecodeGeneric }, <br>    { "LB_GETSELCOUNT", LB_GETSELCOUNT,                     // 0x0190 <br>        MTF_TYPE_LB, DecodeGeneric }, <br>    { "LB_GETSELITEMS", LB_GETSELITEMS,                     // 0x0191 <br>        MTF_TYPE_LB, DecodeGeneric }, <br>    { "LB_SETTABSTOPS", LB_SETTABSTOPS,                     // 0x0192 <br>        MTF_TYPE_LB, DecodeGeneric }, <br>    { "LB_GETHORIZONTALEXTENT", LB_GETHORIZONTALEXTENT,     // 0x0193 <br>        MTF_TYPE_LB, DecodeGeneric }, <br>    { "LB_SETHORIZONTALEXTENT", LB_SETHORIZONTALEXTENT,     // 0x0194 <br>        MTF_TYPE_LB, DecodeGeneric }, <br>    { "LB_SETCOLUMNWIDTH", LB_SETCOLUMNWIDTH,               // 0x0195 <br>        MTF_TYPE_LB, DecodeGeneric }, <br>    { "LB_ADDFILE", LB_ADDFILE,                             // 0x0196 <br>        MTF_TYPE_LB, DecodeGeneric }, <br>    { "LB_SETTOPINDEX", LB_SETTOPINDEX,                     // 0x0197 <br>        MTF_TYPE_LB, DecodeGeneric }, <br>    { "LB_GETITEMRECT", LB_GETITEMRECT,                     // 0x0198 <br>        MTF_TYPE_LB, DecodeGeneric }, <br>    { "LB_GETITEMDATA", LB_GETITEMDATA,                     // 0x0199 <br>        MTF_TYPE_LB, DecodeGeneric }, <br>    { "LB_SETITEMDATA", LB_SETITEMDATA,                     // 0x019A <br>        MTF_TYPE_LB, DecodeGeneric }, <br>    { "LB_SELITEMRANGE", LB_SELITEMRANGE,                   // 0x019B <br>        MTF_TYPE_LB, DecodeGeneric }, <br>    { "LB_SETANCHORINDEX", LB_SETANCHORINDEX,               // 0x019C <br>        MTF_TYPE_LB, DecodeGeneric }, <br>    { "LB_GETANCHORINDEX", LB_GETANCHORINDEX,               // 0x019D <br>        MTF_TYPE_LB, DecodeGeneric }, <br>    { "LB_SETCARETINDEX", LB_SETCARETINDEX,                 // 0x019E <br>        MTF_TYPE_LB, DecodeGeneric }, <br>    { "LB_GETCARETINDEX", LB_GETCARETINDEX,                 // 0x019F <br>        MTF_TYPE_LB, DecodeGeneric }, <br>    { "LB_SETITEMHEIGHT", LB_SETITEMHEIGHT,                 // 0x01A0 <br>        MTF_TYPE_LB, DecodeGeneric }, <br>    { "LB_GETITEMHEIGHT", LB_GETITEMHEIGHT,                 // 0x01A1 <br>        MTF_TYPE_LB, DecodeGeneric }, <br>    { "LB_FINDSTRINGEXACT", LB_FINDSTRINGEXACT,             // 0x01A2 <br>        MTF_TYPE_LB, DecodeGeneric }, <br>    { "LB_SETLOCALE", LB_SETLOCALE,                         // 0x01A5 <br>        MTF_TYPE_LB, DecodeGeneric }, <br>    { "LB_GETLOCALE", LB_GETLOCALE,                         // 0x01A6 <br>        MTF_TYPE_LB, DecodeGeneric }, <br>    { "LB_SETCOUNT", LB_SETCOUNT,                           // 0x01A7 <br>        MTF_TYPE_LB, DecodeGeneric }, <br>    { "WM_MOUSEMOVE", WM_MOUSEMOVE,                         // 0x0200 <br>        MTF_TYPE_MOUSE, DecodeGeneric }, <br>    { "WM_LBUTTONDOWN", WM_LBUTTONDOWN,                     // 0x0201 <br>        MTF_TYPE_MOUSE, DecodeGeneric }, <br>    { "WM_LBUTTONUP", WM_LBUTTONUP,                         // 0x0202 <br>        MTF_TYPE_MOUSE, DecodeGeneric }, <br>    { "WM_LBUTTONDBLCLK", WM_LBUTTONDBLCLK,                 // 0x0203 <br>        MTF_TYPE_MOUSE, DecodeGeneric }, <br>    { "WM_RBUTTONDOWN", WM_RBUTTONDOWN,                     // 0x0204 <br>        MTF_TYPE_MOUSE, DecodeGeneric }, <br>    { "WM_RBUTTONUP", WM_RBUTTONUP,                         // 0x0205 <br>        MTF_TYPE_MOUSE, DecodeGeneric }, <br>    { "WM_RBUTTONDBLCLK", WM_RBUTTONDBLCLK,                 // 0x0206 <br>        MTF_TYPE_MOUSE, DecodeGeneric }, <br>    { "WM_MBUTTONDOWN", WM_MBUTTONDOWN,                     // 0x0207 <br>        MTF_TYPE_MOUSE, DecodeGeneric }, <br>    { "WM_MBUTTONUP", WM_MBUTTONUP,                         // 0x0208 <br>        MTF_TYPE_MOUSE, DecodeGeneric }, <br>    { "WM_MBUTTONDBLCLK", WM_MBUTTONDBLCLK,                 // 0x0209 <br>        MTF_TYPE_MOUSE, DecodeGeneric }, <br>    { "WM_PARENTNOTIFY", WM_PARENTNOTIFY,                   // 0x0210 <br>        MTF_TYPE_MOUSE, DecodeGeneric }, <br>    { "WM_ENTERMENULOOP", WM_ENTERMENULOOP,                 // 0x0211 <br>        0, DecodeGeneric }, <br>    { "WM_EXITMENULOOP", WM_EXITMENULOOP,                   // 0x0212 <br>        0, DecodeGeneric }, <br>    { "WM_MDICREATE", WM_MDICREATE,                         // 0x0220 <br>        0, DecodeGeneric }, <br>    { "WM_MDIDESTROY", WM_MDIDESTROY,                       // 0x0221 <br>        0, DecodeGeneric }, <br>    { "WM_MDIACTIVATE", WM_MDIACTIVATE,                     // 0x0222 <br>        0, DecodeGeneric }, <br>    { "WM_MDIRESTORE", WM_MDIRESTORE,                       // 0x0223 <br>        0, DecodeGeneric }, <br>    { "WM_MDINEXT", WM_MDINEXT,                             // 0x0224 <br>        0, DecodeGeneric }, <br>    { "WM_MDIMAXIMIZE", WM_MDIMAXIMIZE,                     // 0x0225 <br>        0, DecodeGeneric }, <br>    { "WM_MDITILE", WM_MDITILE,                             // 0x0226 <br>        0, DecodeGeneric }, <br>    { "WM_MDICASCADE", WM_MDICASCADE,                       // 0x0227 <br>        0, DecodeGeneric }, <br>    { "WM_MDIICONARRANGE", WM_MDIICONARRANGE,               // 0x0228 <br>        0, DecodeGeneric }, <br>    { "WM_MDIGETACTIVE", WM_MDIGETACTIVE,                   // 0x0229 <br>        0, DecodeGeneric }, <br>    { "WM_MDISETMENU", WM_MDISETMENU,                       // 0x0230 <br>        0, DecodeGeneric }, <br>    { "WM_ENTERSIZEMOVE", WM_ENTERSIZEMOVE,                 // 0x0231 <br>        0, DecodeGeneric }, <br>    { "WM_EXITSIZEMOVE", WM_EXITSIZEMOVE,                   // 0x0232 <br>        0, DecodeGeneric }, <br>    { "WM_DROPFILES", WM_DROPFILES,                         // 0x0233 <br>        0, DecodeGeneric }, <br>    { "WM_MDIREFRESHMENU", WM_MDIREFRESHMENU,               // 0x0234 <br>        0, DecodeGeneric }, <br>#ifdef  FE_IME <br>    { "WM_IME_REPORT", WM_IME_REPORT,                       // 0x0280 <br>        MTF_TYPE_IME, DecodeGeneric }, <br>#endif <br>    { "WM_IME_SETCONTEXT",      WM_IME_SETCONTEXT,          // 0x0281 <br>        TMP_MTF_TYPE_IME, DecodeGeneric }, <br>    { "WM_IME_NOTIFY",          WM_IME_NOTIFY,              // 0x0282 <br>        TMP_MTF_TYPE_IME, DecodeGeneric }, <br>    { "WM_IME_CONTROL",         WM_IME_CONTROL,             // 0x0283 <br>        TMP_MTF_TYPE_IME, DecodeGeneric }, <br>    { "WM_IME_COMPOSITIONFULL", WM_IME_COMPOSITIONFULL,     // 0x0284 <br>        TMP_MTF_TYPE_IME, DecodeGeneric }, <br>    { "WM_IME_SELECT",          WM_IME_SELECT,              // 0x0285 <br>        TMP_MTF_TYPE_IME, DecodeGeneric }, <br>    { "WM_IME_CHAR",            WM_IME_CHAR,                // 0x0286 <br>        TMP_MTF_TYPE_IME, DecodeGeneric }, <br>#ifdef  FE_IME <br>    { "WM_IMEKEYDOWN", WM_IMEKEYDOWN,                       // 0x0290 <br>        MTF_TYPE_IME, DecodeGeneric }, <br>    { "WM_IMEKEYUP", WM_IMEKEYUP,                           // 0x0291 <br>        MTF_TYPE_IME, DecodeGeneric }, <br>#endif <br>    { "WM_CUT", WM_CUT,                                     // 0x0300 <br>        MTF_TYPE_CLIP, DecodeGeneric }, <br>    { "WM_COPY", WM_COPY,                                   // 0x0301 <br>        MTF_TYPE_CLIP, DecodeGeneric }, <br>    { "WM_PASTE", WM_PASTE,                                 // 0x0302 <br>        MTF_TYPE_CLIP, DecodeGeneric }, <br>    { "WM_CLEAR", WM_CLEAR,                                 // 0x0303 <br>        MTF_TYPE_CLIP, DecodeGeneric }, <br>    { "WM_UNDO", WM_UNDO,                                   // 0x0304 <br>        MTF_TYPE_CLIP, DecodeGeneric }, <br>    { "WM_RENDERFORMAT", WM_RENDERFORMAT,                   // 0x0305 <br>        MTF_TYPE_CLIP, DecodeGeneric }, <br>    { "WM_RENDERALLFORMATS", WM_RENDERALLFORMATS,           // 0x0306 <br>        MTF_TYPE_CLIP, DecodeGeneric }, <br>    { "WM_DESTROYCLIPBOARD", WM_DESTROYCLIPBOARD,           // 0x0307 <br>        MTF_TYPE_CLIP, DecodeGeneric }, <br>    { "WM_DRAWCLIPBOARD", WM_DRAWCLIPBOARD,                 // 0x0308 <br>        MTF_TYPE_CLIP, DecodeGeneric }, <br>    { "WM_PAINTCLIPBOARD", WM_PAINTCLIPBOARD,               // 0x0309 <br>        MTF_TYPE_CLIP, DecodeGeneric }, <br>    { "WM_VSCROLLCLIPBOARD", WM_VSCROLLCLIPBOARD,           // 0x030A </code></pre>
<p>
</p>
<pre><code>MTF_TYPE_CLIP, DecodeGeneric }, <br>    { "WM_SIZECLIPBOARD", WM_SIZECLIPBOARD,                 // 0x030B <br>        MTF_TYPE_CLIP, DecodeGeneric }, <br>    { "WM_ASKCBFORMATNAME", WM_ASKCBFORMATNAME,             // 0x030C <br>        MTF_TYPE_CLIP, DecodeGeneric }, <br>    { "WM_CHANGECBCHAIN", WM_CHANGECBCHAIN,                 // 0x030D <br>        MTF_TYPE_CLIP, DecodeGeneric }, <br>    { "WM_HSCROLLCLIPBOARD", WM_HSCROLLCLIPBOARD,           // 0x030E <br>        MTF_TYPE_CLIP, DecodeGeneric }, <br>    { "WM_QUERYNEWPALETTE", WM_QUERYNEWPALETTE,             // 0x030F <br>        0, DecodeGeneric }, <br>    { "WM_PALETTEISCHANGING", WM_PALETTEISCHANGING,         // 0x0310 <br>        0, DecodeGeneric }, <br>    { "WM_PALETTECHANGED", WM_PALETTECHANGED,               // 0x0311 <br>        0, DecodeGeneric }, <br>    { "WM_HOTKEY", WM_HOTKEY,                               // 0x0312 <br>        MTF_TYPE_KEYBD, DecodeGeneric }, <br>    { "WM_DDE_INITIATE", WM_DDE_INITIATE,                   // 0x03E0 <br>        MTF_TYPE_DDE, DecodeGeneric }, <br>    { "WM_DDE_TERMINATE", WM_DDE_TERMINATE,                 // 0x03E1 <br>        MTF_TYPE_DDE, DecodeGeneric }, <br>    { "WM_DDE_ADVISE", WM_DDE_ADVISE,                       // 0x03E2 <br>        MTF_TYPE_DDE, DecodeGeneric }, <br>    { "WM_DDE_UNADVISE", WM_DDE_UNADVISE,                   // 0x03E3 <br>        MTF_TYPE_DDE, DecodeGeneric }, <br>    { "WM_DDE_ACK", WM_DDE_ACK,                             // 0x03E4 <br>        MTF_TYPE_DDE, DecodeGeneric }, <br>    { "WM_DDE_DATA", WM_DDE_DATA,                           // 0x03E5 <br>        MTF_TYPE_DDE, DecodeGeneric }, <br>    { "WM_DDE_REQUEST", WM_DDE_REQUEST,                     // 0x03E6 <br>        MTF_TYPE_DDE, DecodeGeneric }, <br>    { "WM_DDE_POKE", WM_DDE_POKE,                           // 0x03E7 <br>        MTF_TYPE_DDE, DecodeGeneric }, <br>    { "WM_DDE_EXECUTE", WM_DDE_EXECUTE,                     // 0x03E8 <br>        MTF_TYPE_DDE, DecodeGeneric } <br>}; <br> <br>INT gcMessages = sizeof(gaMsgs) / sizeof(MSGDESC); <br> <br>// <br>// Arrays of integers large enough to hold the indexes of all <br>// the messages in the message table.  This is used when <br>// selecting messages with the Messages dialog. <br>// <br>INT gaiSelected[sizeof(gaMsgs) / sizeof(MSGDESC)]; <br>INT gaiSelected2[sizeof(gaMsgs) / sizeof(MSGDESC)]; <br> <br>MSGGROUP gaMsgGroup[] = <br>{ <br>    { DID_MSGSDDE,      MTF_TYPE_DDE,   0,  0 }, <br>    { DID_MSGSCLIP,     MTF_TYPE_CLIP,  0,  0 }, <br>    { DID_MSGSMOUSE,    MTF_TYPE_MOUSE, 0,  0 }, <br>    { DID_MSGSNC,       MTF_TYPE_NC,    0,  0 }, <br>    { DID_MSGSKEYBD,    MTF_TYPE_KEYBD, 0,  0 }, <br>#ifdef FE_IME <br>    { DID_MSGSIME,      MTF_TYPE_IME,   0,  0 }, <br>#endif <br>    { DID_MSGSBM,       MTF_TYPE_BM,    0,  0 }, <br>    { DID_MSGSCB,       MTF_TYPE_CB,    0,  0 }, <br>    { DID_MSGSEM,       MTF_TYPE_EM,    0,  0 }, <br>    { DID_MSGSLB,       MTF_TYPE_LB,    0,  0 }, <br>    { DID_MSGSSTM,      MTF_TYPE_STM,   0,  0 } <br>}; <br> <br>INT gcMsgGroups = sizeof(gaMsgGroup) / sizeof(MSGGROUP); <br> <br> <br>INT __cdecl  MsgCmp(const void *p1, const void *p2); <br>PRIVATE VOID mprintf(LPSTR format, ...); <br> <br> <br> <br>/*****************************************************************************\ <br>* MsgCmp <br>* <br>* Callback function for qsort that sorts messages. <br>* <br>* Arguments: <br>*    void *p1 - pointer to first item <br>*    void *p2 - pointer to second item <br>* <br>* Returns: <br>*    -1 if first input less than second input <br>*    1  if second input is less than first input <br>*    0  if inputs are equal <br>* <br>\*****************************************************************************/ <br> <br>INT __cdecl <br>MsgCmp( <br>    const void *p1, <br>    const void *p2 <br>    ) <br>{ <br>    MSGDESC *pmd1 = (PMSGDESC)p1; <br>    MSGDESC *pmd2 = (PMSGDESC)p2; <br> <br>    return pmd1-&gt;msg &lt; pmd2-&gt;msg ? -1 : (pmd1-&gt;msg &gt; pmd2-&gt;msg ? 1 : 0); <br>} <br> <br> <br> <br>/*****************************************************************************\ <br>* CalculatePrintfTabs <br>* <br>* Calculates the tabs needed for each field in the printf window.  This <br>* is based on the largest string in the message table and the specified <br>* font. <br>* <br>* Arguments: <br>*   HFONT hfont - Font to use in the calculations. <br>* <br>* Returns: <br>*   VOID <br>\*****************************************************************************/ <br> <br>VOID <br>CalculatePrintfTabs( <br>    HFONT hfont <br>    ) <br>{ <br>    MSGDESC *pmd; <br>    HDC hdc; <br>    INT dxMsg; <br>    INT dxSpace; <br>    INT dxHwnd; <br>    INT tabs[3]; <br>    SIZE siz; <br>    HFONT hfontOld; <br>    INT i; <br> <br>    hdc = GetDC(NULL); <br>    hfontOld = SelectObject(hdc, hfont); <br>    dxMsg = 0; <br>    for (pmd = gaMsgs, i = 0; i &lt; gcMessages; pmd++, i++) <br>    { <br>        GetTextExtentPoint(hdc, pmd-&gt;pszMsg, lstrlen(pmd-&gt;pszMsg), &amp;siz); <br>        dxMsg = max(dxMsg, siz.cx); <br>    } <br> <br>    // <br>    // Calculate the widest possible hwnd value.  It is assumed that the <br>    // font will have the same width for all digits (or that '0' would <br>    // be the widest). <br>    // <br>    GetTextExtentPoint(hdc, "00000000", 8, &amp;siz); <br>    dxHwnd = siz.cx; <br>    GetTextExtentPoint(hdc, "AAAAAAAA", 8, &amp;siz); <br>    dxHwnd = max(dxHwnd, siz.cx); <br>    GetTextExtentPoint(hdc, "BBBBBBBB", 8, &amp;siz); <br>    dxHwnd = max(dxHwnd, siz.cx); <br>    GetTextExtentPoint(hdc, "CCCCCCCC", 8, &amp;siz); <br>    dxHwnd = max(dxHwnd, siz.cx); <br>    GetTextExtentPoint(hdc, "DDDDDDDD", 8, &amp;siz); <br>    dxHwnd = max(dxHwnd, siz.cx); <br>    GetTextExtentPoint(hdc, "EEEEEEEE", 8, &amp;siz); <br>    dxHwnd = max(dxHwnd, siz.cx); <br>    GetTextExtentPoint(hdc, "FFFFFFFF", 8, &amp;siz); <br>    dxHwnd = max(dxHwnd, siz.cx); <br> <br>    GetTextExtentPoint(hdc, " ", 1, &amp;siz); <br>    dxSpace = siz.cx; <br> <br>    SelectObject(hdc, hfontOld); <br>    ReleaseDC(NULL, hdc); <br> <br>    tabs[0] = dxHwnd + dxSpace; <br>    tabs[1] = tabs[0] + dxMsg + dxSpace; <br>    tabs[2] = tabs[1] + dxHwnd + dxSpace; <br> <br>    SetPrintfTabs(3, tabs); <br>} <br> <br> <br> <br>/*****************************************************************************\ <br>* PrintMsg <br>* <br>* Writes out a specified message. <br>* <br>* Arguments: <br>*    LPMSG lpMsg - message to print out <br>* <br>* Returns: <br>*    VOID <br>\*****************************************************************************/ <br> <br>VOID <br>PrintMsg( <br>    LPMSG lpMsg <br>    ) <br>{ <br>    static MSGDESC md; <br>    PMSGDESC pmd; <br> <br>    md.msg = lpMsg-&gt;message; <br>    pmd = (PMSGDESC)bsearch(&amp;md, gaMsgs, gcMessages, sizeof(MSGDESC), MsgCmp); <br> <br>    if (pmd) <br>    { <br>        if (pmd-&gt;Flags &amp; MTF_SELECTED) <br>        { <br>            mprintf(szFormatName, lpMsg-&gt;hwnd, pmd-&gt;pszMsg, lpMsg-&gt;wParam, <br>                lpMsg-&gt;lParam); <br>        } <br>    } <br>    else <br>    { <br>        if (lpMsg-&gt;message &gt;= WM_USER) <br>        { <br>            if (gfMsgsUser) <br>            { <br>                mprintf(szFormatUSER, lpMsg-&gt;hwnd, lpMsg-&gt;message - WM_USER, <br>                    lpMsg-&gt;wParam, lpMsg-&gt;lParam); <br>            } <br>        } <br>        else <br>        { <br>            if (gfMsgsUnknown) <br>            { <br>                mprintf(szFormatUnknown, lpMsg-&gt;hwnd, lpMsg-&gt;message, <br>                    lpMsg-&gt;wParam, lpMsg-&gt;lParam); <br>            } <br>        } <br>    } <br>} <br> <br> <br> <br>/*****************************************************************************\ <br>* mprintf <br>* <br>* Writes out a message to the specified device. <br>* <br>* Arguments: <br>*   LPSTR format - Format string. <br>*   ...          - Optional arguments. <br>* <br>* Returns: <br>* <br>* <br>\*****************************************************************************/ <br>PUBLIC INT FAR cdecl <br>ITvwprintf( <br>HWND  hwnd, <br>LPSTR format, <br>va_list marker <br>) <br>{ <br>    LPSTR p; <br>    TCHAR szBuffer[512]; <br>    for( p = format; *p != '\0'; p++ ) { <br>        if (*p == '\r') <br>            *p = ' '; <br>    } <br> <br>    wvsprintf(szBuffer, format, marker ); <br>    return SendMessage( hwnd, WM_VWPRINTF, (WPARAM)szBuffer, (LPARAM)0 ); <br>} <br> <br> <br>PRIVATE VOID <br>mprintf( <br>    LPSTR format, <br>    ... <br>    ) <br>{ <br>    va_list marker; <br>    CHAR szTemp[MAXSTRING]; <br>    INT iLen; <br> <br>    va_start(marker, format); <br> <br>    if (gfOutputWin) <br>    { <br>        ITvwprintf(ghwndPrintf, format, marker); <br>    } <br> <br>#if 0 <br>    if (gfOutputCom1) <br>    { <br>        iLen = wvsprintf(szTemp, format, marker); <br>        M_lwrite(INT2HFILE(FH_COM1), szTemp, iLen); <br>    } <br>#else //BUGBUG this doesn't work under NT.  The com device needs to be explicitly opened. <br>    if (gfOutputCom1 &amp;&amp; gfhCom1 != INVALID_HANDLE_VALUE) <br>    { <br>        DWORD   dwBytesWritten; <br> <br>        iLen = wvsprintf(szTemp, format, marker); <br>        WriteFile(gfhCom1, szTemp, iLen, &amp;dwBytesWritten, NULL); <br>        WriteFile(gfhCom1, "\r\n", 2,    &amp;dwBytesWritten, NULL); <br>    } <br>#endif// fix by Japanese team <br> <br>    if (gfOutputFile &amp;&amp; gfhFile) <br>    { <br>        iLen = wvsprintf(szTemp, format, marker); <br>        _lwrite(gfhFile, szTemp, iLen); <br>//BUGBUG        _lclose(DUPHFILE(gfhFile));    /* flush the file buffer */ <br>    } <br> <br>    va_end(marker); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

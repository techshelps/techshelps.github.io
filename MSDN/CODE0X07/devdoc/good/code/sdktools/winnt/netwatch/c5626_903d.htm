<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NETWATCH.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5629"></a>NETWATCH.H</h2>
<pre><code>/* <br> *  netwatch.h <br> *   <br> *  Purpose: <br> *      main header file <br> *   <br> *  Owner: <br> *      MikeSart <br> */ <br> <br>// max size of strings in STRINGTABLE for LoadString <br>#define cchSzMax64 <br>#define cchTVSzMax512 <br>#define cchMsgMax512 <br>#define cchErrMax1024 <br> <br>#define TIMERID1 <br> <br>#define SCONSTstatic const <br> <br>// Treeview types <br>#define TYPE_ERROR((DWORD)-1) <br>#define TYPE_COMPUTER0x0 <br>#define TYPE_SHARE0x1 <br>#define TYPE_USER0x2 <br>#define TYPE_FILE0x3 <br>#define TYPE_MAX0x4 <br> <br>// Bitmap Indexes <br>#define BMP_SHARE0 <br>#define BMP_COMPUTER1 <br>#define BMP_FILE2 <br>#define BMP_WRITE3 <br>#define BMP_READ4 <br>#define BMP_DENIED5 <br>#define BMP_BOB6 <br>#define BMP_USER7 <br>#define BMP_IPC8 <br>#define BMP_COMPUTERLIMITED9 <br> <br>#define BMWIDTH16 <br>#define BMHEIGHT16 <br>#define RGBREPLACE0x00FF0000 // solid blue <br> <br>#define GlobalFreeNullPtr(_ptr) \ <br>if(_ptr) GlobalFreePtr(_ptr) <br> <br>/* <br> *  globules <br> */ <br>extern HINSTANCEghInst; <br>extern HMENUghMenu; <br>extern TCHARszAppName[]; <br>extern DWORDdwTimerInterval; <br>extern TCHARszNil[]; <br>extern UINTunMenuFlags[]; <br> <br>/* <br> *  function prototypes <br> */ <br> <br>// netwatch.c <br>LRESULT CALLBACKNewTVProc(HWND, UINT, WPARAM, LPARAM); <br>LRESULT CALLBACKWndProc(HWND, UINT, WPARAM, LPARAM); <br>BOOL CALLBACKSelectDlgProc(HWND, UINT, WPARAM, LPARAM); <br>VOID _cdeclPropertyDlg(HWND hwnd, UINT rgIDSStart, DWORD dwrgBmp, ...); <br> <br>// utils.c <br>HWNDInitNetWatchWnd(HWND hwnd); <br>VOIDDeInitNetWatchWnd(VOID); <br>VOIDBlitIcon(HDC hdc, LONG x, LONG y, int nBitmap); <br>HTREEITEMhAddComputer(HWND hwnd, HWND hwndTV, LPTSTR szComputerName, <br>HTREEITEM hItemLocation); <br>BOOLFTreeView_GetString(HWND hwndTV, HTREEITEM hItem, <br>TCHAR *szText, UINT cchTextMax); <br>VOIDShowTitle(HWND hwnd, int nCmdShow); <br>VOIDPunchTimer(HWND hwndMain, BOOL fNewState); <br>VOIDRestoreWindowPosition(HWND hwnd, HWND hwndTV); <br>VOIDSaveWindowPosition(HWND hwnd, HWND hwndTV); <br>TCHAR*szFromIDS1(UINT unID); <br>TCHAR*GetSystemErrMessage(DWORD dwError); <br> <br>// net.c <br>VOIDTreeView_FreeItemData(TV_ITEM *ptvItem); <br>UINTRefreshDisplay(HWND hwnd, HWND hwndTV); <br>BOOLHandleWM_VKEY(HWND hwnd, HWND hwndTV, WORD wAction); <br>VOIDAddErrorStringToTV(HWND hwndTV, HTREEITEM hParent, UINT ids, <br>NET_API_STATUS nas); <br>VOIDHandleMenu(HWND hwnd, HWND hwndTV, HMENU hMenu); <br> <br>/* <br> *DEBUG stuff <br> */ <br> <br>#ifdef DEBUG <br> <br>VOID _cdecl DbgPrint(LPCSTR lpFmt, ...); <br>UINT AssertSzFn(LPSTR szMsg, LPSTR szFile, INT nLine); <br>#define OutputDbgStrDbgPrint <br>#define OutputDbgStrError(_szFunction, _sc) \ <br>if(_sc) \ <br>DbgPrint("%s returns sc=0x%08lx", _szFunction, _sc) <br>#define ASSERTDATAstatic CHAR _szFile[] = __FILE__; <br>#define AssertSz(a,b)((VOID)((a) || (AssertSzFn(b, _szFile, __LINE__)))) <br>#define Assert(a)((VOID)((a) || (AssertSzFn(NULL, _szFile, __LINE__)))) <br>#define SideAssert(a)((VOID)((a) || (AssertSzFn(NULL, _szFile, __LINE__)))) <br> <br>#else <br> <br>VOID _cdecl IDbgPrint(LPCSTR lpFmt, ...); <br>#define OutputDbgStr1 ? (VOID)0 : IDbgPrint <br>#define OutputDbgStrError1 ? (VOID)0 : IDbgPrint <br>#define ASSERTDATA <br>#define AssertSz(a,b) <br>#define Assert(a) <br>#define SideAssert(a)(a) <br> <br>#endif </code></pre>
<p>&nbsp;</p></body>
</HTML>

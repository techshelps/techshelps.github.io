<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DIALOGS.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5751"></a>DIALOGS.C</h2>
<pre><code>/**************************************************************************\ <br>* dialogs.c -- dialog procedure support for uconvert <br>* <br>*         Steve Firebaugh <br>*         Microsoft Developer Support <br>*         Copyright 1992 - 1998 Microsoft Corporation <br>* <br>\**************************************************************************/ <br>#define UNICODE <br> <br> <br>#include &lt;windows.h&gt; <br>#include "uconvert.h" <br>#include "install.h" <br> <br> <br>/* Define affecting the positioning of child windows in dialog. */ <br>#define DLGBORDER    GetSystemMetrics (SM_CXFRAME)*2 <br> <br> <br>/***************************************************************************\ <br>*    FUNCTION: ConversionOptionsProc <br>* <br>* Fill Dlg with state information on WM_INITDIALOG. <br>*  Take it back down and change internal state on WM_COMMAND, IDOK. <br>* <br>* Global variables: <br>*  gMBFlags <br>*  gWCFlags <br>*  glpDefaultChar <br>*  glpUsedDefaultChar <br>* <br>\***************************************************************************/ <br>LRESULT CALLBACK ConversionOptionsProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam) <br>{ <br> <br>  switch (message) { <br> <br>    /******************************************************************\ <br>    *  WM_INITDIALOG <br>    * <br>    * Set radio buttons appropriately. <br>    \******************************************************************/ <br>    case WM_INITDIALOG: <br>      if (gMBFlags &amp; MB_PRECOMPOSED) <br>        SendDlgItemMessage (hwnd, DID_PRECOMPOSED, BM_SETCHECK, 1, 0); <br> <br>      if (gMBFlags &amp; MB_COMPOSITE) <br>        SendDlgItemMessage (hwnd, DID_COMPOSITE, BM_SETCHECK, 1, 0); <br> <br>      if (gMBFlags &amp; MB_USEGLYPHCHARS) <br>        SendDlgItemMessage (hwnd, DID_USEGLYPHCHARS, BM_SETCHECK, 1, 0); <br> <br>      if (gWCFlags &amp; WC_COMPOSITECHECK) <br>        SendDlgItemMessage (hwnd, DID_COMPOSITECHECK, BM_SETCHECK, 1, 0); <br> <br>      if (gWCFlags &amp; WC_DISCARDNS) <br>        SendDlgItemMessage (hwnd, DID_DISCARDNS, BM_SETCHECK, 1, 0); <br> <br>      if (gWCFlags &amp; WC_SEPCHARS) <br>        SendDlgItemMessage (hwnd, DID_SEPCHARS, BM_SETCHECK, 1, 0); <br> <br>      if (gWCFlags &amp; WC_DEFAULTCHAR) <br>        SendDlgItemMessage (hwnd, DID_DEFAULTCHAR, BM_SETCHECK, 1, 0); <br> <br>      SendDlgItemMessage (hwnd, DID_EFDEFAULTCHAR, EM_LIMITTEXT, 1, 0); <br>      SetDlgItemTextA (hwnd, DID_EFDEFAULTCHAR, glpDefaultChar); <br> <br>      if (gUsedDefaultChar) <br>        SendDlgItemMessage (hwnd, DID_USEDDEFAULTCHAR, BM_SETCHECK, 1, 0); <br> <br> <br>      SetFocus (GetDlgItem (hwnd, IDOK)); <br>    return FALSE; <br> <br> <br>    case WM_COMMAND: <br>      switch (LOWORD (wParam)) { <br>        case IDCANCEL: <br>          EndDialog (hwnd, FALSE); <br>        break; <br> <br>        /******************************************************************\ <br>        *  WM_COMMAND, IDOK <br>        * <br>        * Get state from radio buttons and others. <br>        \******************************************************************/ <br>        case IDOK: { <br> <br>          if (SendDlgItemMessage(hwnd, DID_PRECOMPOSED, BM_GETCHECK, 0,0)) <br>            gMBFlags |= MB_PRECOMPOSED; <br>          else <br>            gMBFlags &amp;= ~MB_PRECOMPOSED; <br> <br>          if (SendDlgItemMessage(hwnd, DID_COMPOSITE, BM_GETCHECK, 0,0)) <br>            gMBFlags |= MB_COMPOSITE; <br>          else <br>            gMBFlags &amp;= ~MB_COMPOSITE; <br> <br>          if (SendDlgItemMessage(hwnd, DID_USEGLYPHCHARS, BM_GETCHECK, 0,0)) <br>            gMBFlags |= MB_USEGLYPHCHARS; <br>          else <br>            gMBFlags &amp;= ~MB_USEGLYPHCHARS; <br> <br>          if (SendDlgItemMessage(hwnd, DID_DISCARDNS, BM_GETCHECK, 0,0)) <br>            gWCFlags |= WC_DISCARDNS; <br>          else <br>            gWCFlags &amp;= ~WC_DISCARDNS; <br> <br>          if (SendDlgItemMessage(hwnd, DID_COMPOSITECHECK, BM_GETCHECK, 0,0)) <br>            gWCFlags |= WC_COMPOSITECHECK; <br>          else <br>            gWCFlags &amp;= ~WC_COMPOSITECHECK; <br> <br>          if (SendDlgItemMessage(hwnd, DID_SEPCHARS, BM_GETCHECK, 0,0)) <br>            gWCFlags |= WC_SEPCHARS; <br>          else <br>            gWCFlags &amp;= ~WC_SEPCHARS; <br> <br>          if (SendDlgItemMessage(hwnd, DID_DEFAULTCHAR, BM_GETCHECK, 0,0)) <br>            gWCFlags |= WC_DEFAULTCHAR; <br>          else <br>            gWCFlags &amp;= ~WC_DEFAULTCHAR; <br> <br>          GetDlgItemTextA (hwnd, DID_EFDEFAULTCHAR, glpDefaultChar, 2); // CHAR + NULL <br> <br>          EndDialog (hwnd, TRUE); <br>        } break; <br> <br> <br>        /******************************************************************\ <br>        *  WM_COMMAND, DID_* <br>        * <br>        * Manage radio button pattern. <br>        \******************************************************************/ <br>        case DID_PRECOMPOSED: <br>          SendDlgItemMessage (hwnd, DID_PRECOMPOSED, BM_SETCHECK, TRUE, 0); <br>          SendDlgItemMessage (hwnd, DID_COMPOSITE,   BM_SETCHECK, FALSE, 0); <br>        break; <br> <br>        case DID_COMPOSITE: <br>          SendDlgItemMessage (hwnd, DID_PRECOMPOSED, BM_SETCHECK, FALSE, 0); <br>          SendDlgItemMessage (hwnd, DID_COMPOSITE,   BM_SETCHECK, TRUE, 0); <br>        break; <br> <br>      } <br>    break; /* end WM_COMMAND */ <br> <br> <br> <br>    case WM_SYSCOMMAND: <br>      if (LOWORD (wParam) == SC_CLOSE) <br>          EndDialog (hwnd, FALSE); <br>    break; <br> <br>  } /* end switch */ <br>  return FALSE; <br>} <br> <br> <br> <br>/***************************************************************************\ <br>*    FUNCTION: SourceOptionsProc <br>* <br>* Fill Dlg with state information on WM_INITDIALOG. <br>*  Take it back down and change internal state on WM_COMMAND, IDOK. <br>* <br>* Global variables: <br>*   gTypeSource <br>*   giSourceCodePage <br>*   giDestinationCodePage <br>* <br>\***************************************************************************/ <br>LRESULT CALLBACK SourceOptionsProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam) <br>{ <br>TCHAR buffer[50]; <br> <br>  switch (message) { <br> <br>    /******************************************************************\ <br>    *  WM_INITDIALOG <br>    * <br>    * Set radio buttons appropriately. <br>    \******************************************************************/ <br>    case WM_INITDIALOG: <br>      SetWindowText (hwnd, LoadResourceString(IDS_INTERPRET_SOURCE_AS)); <br>      ListInstalledTables (GetDlgItem (hwnd, DID_CODEPAGELIST),CB_ADDSTRING, TRUE); <br>      if (gTypeSource == TYPEUNICODE) <br>        SendDlgItemMessage (hwnd, DID_RBUNICODE, BM_SETCHECK, 1, 0); <br> <br>      /* <br>       * if gTypeSource == TYPECODEPAGE, then see if it is one of the <br>       *  standard radio buttons.  If so, check the right one. <br>       *  if not, check, "other" and select correct entry in combobox. <br>       */ <br>      else if (gTypeSource == TYPECODEPAGE) { <br>        if (giSourceCodePage == GetACP()) <br>          SendDlgItemMessage (hwnd, DID_RBANSICP, BM_SETCHECK, 1, 0); <br>        else if (giSourceCodePage == GetOEMCP()) <br>          SendDlgItemMessage (hwnd, DID_RBOEMCP, BM_SETCHECK, 1, 0); <br>        else { <br>          SendDlgItemMessage (hwnd, DID_RBOTHERCP, BM_SETCHECK, 1, 0); <br>          wsprintf (buffer, TEXT("%d"), giSourceCodePage); <br>          SendDlgItemMessage (hwnd, DID_CODEPAGELIST, CB_SELECTSTRING, 0, (LPARAM)buffer); <br>        } <br>      } else { <br>        // OK to not be specified here.  Wait for user to make choice. <br>      } <br> <br> <br>      SetFocus (GetDlgItem (hwnd, IDOK)); <br>    return FALSE; <br> <br> <br>    case WM_COMMAND: <br>      switch (LOWORD (wParam)) { <br>        case IDCANCEL: <br>          EndDialog (hwnd, FALSE); <br>        break; <br> <br>        /******************************************************************\ <br>        *  WM_COMMAND, IDOK <br>        * <br>        * Get state from radio buttons and others. <br>        \******************************************************************/ <br>        case IDOK: { <br>          BOOL success; <br> <br>          if (SendDlgItemMessage(hwnd, DID_RBUNICODE, BM_GETCHECK, 0,0)) { <br>            gTypeSource = TYPEUNICODE; <br>          } else if (SendDlgItemMessage(hwnd, DID_RBANSICP, BM_GETCHECK, 0,0)) { <br>            gTypeSource = TYPECODEPAGE; <br>            giSourceCodePage=GetACP(); <br>          } else if (SendDlgItemMessage(hwnd, DID_RBOEMCP, BM_GETCHECK, 0,0)) { <br>            gTypeSource = TYPECODEPAGE; <br>            giSourceCodePage=GetOEMCP(); <br>          } else if (SendDlgItemMessage(hwnd, DID_RBOTHERCP, BM_GETCHECK, 0,0)) { <br>            gTypeSource = TYPECODEPAGE; <br>            giSourceCodePage=GetDlgItemInt (hwnd, DID_CODEPAGELIST, &amp;success, FALSE); <br>          } else <br>            gTypeSource = TYPEUNKNOWN; <br>          EndDialog (hwnd, TRUE); <br>        } break; <br>      } <br>    break; /* end WM_COMMAND */ <br> <br> <br>    case WM_SYSCOMMAND: <br>      if (LOWORD (wParam) == SC_CLOSE) <br>          EndDialog (hwnd, FALSE); <br>    break; <br> <br>  } /* end switch */ <br>  return FALSE; <br>} <br> <br>/***************************************************************************\ <br>*    FUNCTION: DestinationOptionsProc <br>* <br>* Fill Dlg with state information on WM_INITDIALOG. <br>*  Take it back down and change internal state on WM_COMMAND, IDOK. <br>* <br>* <br>* Global variables: <br>*   gTypeSource <br>*   giSourceCodePage <br>*   giDestinationCodePage <br>* <br>\***************************************************************************/ <br>LRESULT CALLBACK DestinationOptionsProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam) <br>{ <br>TCHAR buffer[50]; <br> <br>  switch (message) { <br> <br>    /******************************************************************\ <br>    *  WM_INITDIALOG <br>    * <br>    * Set radio buttons appropriately. <br>    \******************************************************************/ <br>    case WM_INITDIALOG: <br>      SetWindowText (hwnd, LoadResourceString(IDS_CONVERT_DEST_TO)); <br>      ListInstalledTables (GetDlgItem (hwnd, DID_CODEPAGELIST),CB_ADDSTRING, TRUE); <br> <br>      /* if source is unicode, destination will be code page. */ <br>      if (gTypeSource == TYPEUNICODE) { <br>        EnableWindow (GetDlgItem (hwnd, DID_RBUNICODE), FALSE); <br> <br>        if (giDestinationCodePage == GetACP()) <br>          SendDlgItemMessage (hwnd, DID_RBANSICP, BM_SETCHECK, 1, 0); <br>        else if (giDestinationCodePage == GetOEMCP()) <br>          SendDlgItemMessage (hwnd, DID_RBOEMCP, BM_SETCHECK, 1, 0); <br>        else { <br>          SendDlgItemMessage (hwnd, DID_RBOTHERCP, BM_SETCHECK, 1, 0); <br>          wsprintf (buffer, TEXT("%d"), giDestinationCodePage); <br>          SendDlgItemMessage (hwnd, DID_CODEPAGELIST, CB_SELECTSTRING, 0, (LPARAM)buffer); <br>        } <br> <br>      /* otherwise destination is unicode, so disable most of the checkboxes. */ <br>      } else if (gTypeSource == TYPECODEPAGE) { <br>        SendDlgItemMessage (hwnd, DID_RBUNICODE, BM_SETCHECK, 1, 0); <br>        EnableWindow (GetDlgItem (hwnd, DID_RBANSICP), FALSE); <br>        EnableWindow (GetDlgItem (hwnd, DID_RBOEMCP), FALSE); <br>        EnableWindow (GetDlgItem (hwnd, DID_RBOTHERCP), FALSE); <br>        EnableWindow (GetDlgItem (hwnd, DID_CODEPAGELIST), FALSE); <br>      } else { <br>        EndDialog (hwnd, FALSE);  // shouldn't get here. <br>      } <br> <br>      SetFocus (GetDlgItem (hwnd, IDOK)); <br>    return FALSE; <br> <br> <br>    case WM_COMMAND: <br>      switch (LOWORD (wParam)) { <br>        case IDCANCEL: <br>          EndDialog (hwnd, FALSE); <br>        break; <br> <br>        /******************************************************************\ <br>        *  WM_COMMAND, IDOK <br>        * <br>        * Get state from radio buttons and others. <br>        \******************************************************************/ <br>        case IDOK: { <br>          BOOL success; <br>          if (SendDlgItemMessage(hwnd, DID_RBUNICODE, BM_GETCHECK, 0,0)) { <br>            // Do nothing. gTypeSource already implies dest &lt;-&gt; unicode. <br>          } else if (SendDlgItemMessage(hwnd, DID_RBANSICP, BM_GETCHECK, 0,0)) { <br>            giDestinationCodePage=GetACP(); <br>          } else if (SendDlgItemMessage(hwnd, DID_RBOEMCP, BM_GETCHECK, 0,0)) { <br>            giDestinationCodePage=GetOEMCP(); <br>          } else if (SendDlgItemMessage(hwnd, DID_RBOTHERCP, BM_GETCHECK, 0,0)) { <br>            giDestinationCodePage=GetDlgItemInt (hwnd, DID_CODEPAGELIST, &amp;success, FALSE); <br>          } <br> <br>          EndDialog (hwnd, TRUE); <br>        } break; <br>      } <br>    break; /* end WM_COMMAND */ <br> <br>    case WM_SYSCOMMAND: <br>      if (LOWORD (wParam) == SC_CLOSE) <br>          EndDialog (hwnd, FALSE); <br>    break; <br> <br>  } /* end switch */ <br>  return FALSE; <br>} <br> <br> <br>/***************************************************************************\ <br>*    FUNCTION: ViewSourceProc <br>* <br>* Fill Text, Name, and Type information into the dialog. <br>*  Set a proper font to display the text depending on what type it is. <br>* <br>\***************************************************************************/ <br>LRESULT CALLBACK ViewSourceProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam) <br>{ <br>RECT rect; <br> <br>  switch (message) { <br> <br>    /******************************************************************\ <br>    *  WM_INITDIALOG <br>    \******************************************************************/ <br>    case WM_INITDIALOG: <br> <br>      /* Text is unicode... use *W() variants of functions. */ <br>      if (gTypeSource == TYPEUNICODE) { <br>        WCHAR buffer[MAX_PATH]; <br>        LOGFONTW logfont; <br>        HFONT hFont; <br> <br>        SetWindowTextW (GetDlgItem (hwnd, DID_TEXT), (LPCWSTR)pSourceData); <br>        GetWindowTextW (hwndName0, buffer, MAX_PATH); <br>        SetWindowTextW (GetDlgItem (hwnd, DID_NAME), buffer); <br>        GetWindowTextW (hwndCodePage0, buffer, MAX_PATH); <br>        SetWindowTextW (GetDlgItem (hwnd, DID_TYPE), buffer); <br> <br>        GetObjectW (GetStockObject (SYSTEM_FONT), sizeof(LOGFONTW), &amp;logfont); <br>        logfont.lfCharSet = UNICODE_CHARSET; <br>        lstrcpyW (logfont.lfFaceName, L"Lucida Sans Unicode"); <br>        hFont = CreateFontIndirectW (&amp;logfont); <br>        SendMessageW (GetDlgItem (hwnd, DID_TEXT), WM_SETFONT, (WPARAM) hFont, 0); <br> <br> <br>      /* Text is codepage... use *A() variants of functions. */ <br>      } else { <br>        char buffer[MAX_PATH]; <br>        LOGFONTA logfont; <br>        HFONT hFont; <br> <br>        SetWindowTextA (GetDlgItem (hwnd, DID_TEXT), pSourceData); <br>        GetWindowTextA (hwndName0, buffer, MAX_PATH); <br>        SetWindowTextA (GetDlgItem (hwnd, DID_NAME), buffer); <br>        GetWindowTextA (hwndCodePage0, buffer, MAX_PATH); <br>        SetWindowTextA (GetDlgItem (hwnd, DID_TYPE), buffer); <br> <br>        GetObjectA (GetStockObject (SYSTEM_FONT), sizeof(LOGFONTA), &amp;logfont); <br>        logfont.lfCharSet = giSourceCodePage; <br>        lstrcpyA (logfont.lfFaceName, "System"); <br>        hFont = CreateFontIndirectA (&amp;logfont); <br>        SendMessageA (GetDlgItem (hwnd, DID_TEXT), WM_SETFONT, (WPARAM) hFont, 0); <br> <br>      } <br>      SetWindowText (hwnd, LoadResourceString(IDS_VIEW_SOURCE_TITLE)); <br>      GetClientRect (hwnd, &amp;rect); <br>      SendMessage (hwnd, WM_SIZE, 0, <br>                 MAKELPARAM ((rect.right - rect.left), (rect.bottom - rect.top))); <br>      return TRUE; <br>    break; <br> <br>    case WM_SIZE: { <br>      HWND hwndText; <br> <br>      hwndText = GetDlgItem (hwnd, DID_TEXT); <br>      MoveWindow (hwndText, DLGBORDER, 60, (int) LOWORD(lParam) - 2*DLGBORDER, <br>                                (int) HIWORD(lParam) - 60 - DLGBORDER , TRUE); <br>    } <br> <br>    case WM_COMMAND: <br>      switch (LOWORD (wParam)) { <br>        case IDCANCEL: <br>        case IDOK: <br>          EndDialog (hwnd, TRUE); <br>      } <br>    break; /* end WM_COMMAND */ <br> <br>    case WM_SYSCOMMAND: <br>      if (LOWORD (wParam) == SC_CLOSE) <br>          EndDialog (hwnd, FALSE); <br>    break; <br> <br>  } /* end switch */ <br>  return FALSE; <br>} <br> <br> <br> <br>/***************************************************************************\ <br>*    FUNCTION: ViewDestinationProc <br>* <br>* Fill Text, Name, and Type information into the dialog. <br>*  Set a proper font to display the text depending on what type it is. <br>* <br>\***************************************************************************/ <br>LRESULT CALLBACK ViewDestinationProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam) <br>{ <br>RECT rect; <br> <br>  switch (message) { <br> <br>    /******************************************************************\ <br>    *  WM_INITDIALOG <br>    \******************************************************************/ <br>    case WM_INITDIALOG: <br> <br>      /* Destination text is unicode... use *W() variants of functions. */ <br>      if (gTypeSource != TYPEUNICODE) { <br>        WCHAR buffer[MAX_PATH]; <br>        LOGFONTW logfont; <br>        HFONT hFont; <br> <br>        SetWindowTextW (GetDlgItem (hwnd, DID_TEXT), (LPCWSTR)pDestinationData); <br>        GetWindowTextW (hwndName1, buffer, MAX_PATH); <br>        SetWindowTextW (GetDlgItem (hwnd, DID_NAME), buffer); <br>        GetWindowTextW (hwndCodePage1, buffer, MAX_PATH); <br>        SetWindowTextW (GetDlgItem (hwnd, DID_TYPE), buffer); <br> <br>        GetObjectW (GetStockObject (SYSTEM_FONT), sizeof(LOGFONTW), &amp;logfont); <br>        logfont.lfCharSet = UNICODE_CHARSET; <br>        lstrcpyW (logfont.lfFaceName, L"Lucida Sans Unicode"); <br>        hFont = CreateFontIndirectW (&amp;logfont); <br>        SendMessageW (GetDlgItem (hwnd, DID_TEXT), WM_SETFONT, (WPARAM) hFont, 0); <br> <br> <br>      /* Destination text is codepage... use *A() variants of functions. */ <br>      } else { <br>        char buffer[MAX_PATH]; <br>        LOGFONTA logfont; <br>        HFONT hFont; <br> <br>        SetWindowTextA (GetDlgItem (hwnd, DID_TEXT), pDestinationData); <br>        GetWindowTextA (hwndName1, buffer, MAX_PATH); <br>        SetWindowTextA (GetDlgItem (hwnd, DID_NAME), buffer); <br>        GetWindowTextA (hwndCodePage1, buffer, MAX_PATH); <br>        SetWindowTextA (GetDlgItem (hwnd, DID_TYPE), buffer); <br> <br>        GetObjectA (GetStockObject (SYSTEM_FONT), sizeof(LOGFONTA), &amp;logfont); <br>        logfont.lfCharSet = giDestinationCodePage; <br>        lstrcpyA (logfont.lfFaceName, "System"); <br>        hFont = CreateFontIndirectA (&amp;logfont); <br>        SendMessageA (GetDlgItem (hwnd, DID_TEXT), WM_SETFONT, (WPARAM) hFont, 0); <br> <br>      } <br>      SetWindowText (hwnd, LoadResourceString(IDS_VIEW_DEST_TITLE)); <br>      GetClientRect (hwnd, &amp;rect); <br>      SendMessage (hwnd, WM_SIZE, 0, <br>                 MAKELPARAM ((rect.right - rect.left),(rect.bottom - rect.top))); <br> <br>      return TRUE; <br>    break; <br> <br> <br>    case WM_SIZE: { <br>      HWND hwndText; <br> <br>      hwndText = GetDlgItem (hwnd, DID_TEXT); <br>      MoveWindow (hwndText, DLGBORDER, 60, (int) LOWORD(lParam) - 2*DLGBORDER, <br>                                (int) HIWORD(lParam) - 60 - DLGBORDER , TRUE); <br>    } <br> <br>    case WM_COMMAND: <br>      switch (LOWORD (wParam)) { <br>        case IDCANCEL: <br>        case IDOK: <br>          EndDialog (hwnd, TRUE); <br>      } <br>    break; /* end WM_COMMAND */ <br> <br>    case WM_SYSCOMMAND: <br>      if (LOWORD (wParam) == SC_CLOSE) <br>          EndDialog (hwnd, FALSE); <br>    break; <br> <br>  } /* end switch */ <br>  return FALSE; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

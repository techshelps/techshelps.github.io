<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INSTDATA.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5720"></a>INSTDATA.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br> <br>/****************************************************************************** <br> <br>                            I N S T A N C E   D A T A <br> <br>    Name:       instdata.c <br> <br>    Description: <br>        This module contains functions that access instances of an object <br>        type in performance data. <br> <br>    Functions: <br>        FirstInstance <br>        NextInstance <br>        FindInstanceN <br>        FindInstanceParent <br>        InstanceName <br> <br> <br>******************************************************************************/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;winperf.h&gt; <br>#include "perfdata.h" <br> <br> <br> <br> <br>//********************************************************************* <br>// <br>//  FirstInstance <br>// <br>//      Returns pointer to the first instance of pObject type. <br>//      If pObject is NULL then NULL is returned. <br>// <br>PPERF_INSTANCE   FirstInstance (PPERF_OBJECT pObject) <br>{ <br>    if (pObject) <br>        return (PPERF_INSTANCE)((PCHAR) pObject + pObject-&gt;DefinitionLength); <br>    else <br>        return NULL; <br>} <br> <br> <br> <br> <br>//********************************************************************* <br>// <br>//  NextInstance <br>// <br>//      Returns pointer to the next instance following pInst. <br>// <br>//      If pInst is the last instance, bogus data maybe returned. <br>//      The caller should do the checking. <br>// <br>//      If pInst is NULL, then NULL is returned. <br>// <br>PPERF_INSTANCE   NextInstance (PPERF_INSTANCE pInst) <br>{ <br>PERF_COUNTER_BLOCK *pCounterBlock; <br> <br>    if (pInst) <br>        { <br>        pCounterBlock = (PERF_COUNTER_BLOCK *)((PCHAR) pInst + pInst-&gt;ByteLength); <br>        return (PPERF_INSTANCE)((PCHAR) pCounterBlock + pCounterBlock-&gt;ByteLength); <br>        } <br>    else <br>        return NULL; <br>} <br> <br> <br> <br> <br>//********************************************************************* <br>// <br>//  FindInstanceN <br>// <br>//      Returns the Nth instance of pObject type.  If not found, NULL is <br>//      returned.  0 &lt;= N &lt;= NumInstances. <br>// <br> <br>PPERF_INSTANCE FindInstanceN (PPERF_OBJECT pObject, DWORD N) <br>{ <br>PPERF_INSTANCE pInst; <br>DWORD          i = 0; <br> <br>    if (!pObject) <br>        return NULL; <br>    else if (N &gt;= (DWORD)(pObject-&gt;NumInstances)) <br>        return NULL; <br>    else <br>        { <br>        pInst = FirstInstance (pObject); <br> <br>        while (i != N) <br>            { <br>            pInst = NextInstance (pInst); <br>            i++; <br>            } <br> <br>        return pInst; <br>        } <br>} <br> <br> <br> <br> <br>//********************************************************************* <br>// <br>//  FindInstanceParent <br>// <br>//      Returns the pointer to an instance that is the parent of pInst. <br>// <br>//      If pInst is NULL or the parent object is not found then NULL is <br>//      returned. <br>// <br>PPERF_INSTANCE FindInstanceParent (PPERF_INSTANCE pInst, PPERF_DATA pData) <br>{ <br>PPERF_OBJECT    pObject; <br> <br>    if (!pInst) <br>        return NULL; <br>    else if (!(pObject = FindObject (pData, pInst-&gt;ParentObjectTitleIndex))) <br>        return NULL; <br>    else <br>        return FindInstanceN (pObject, pInst-&gt;ParentObjectInstance); <br>} <br> <br> <br> <br> <br>//********************************************************************* <br>// <br>//  InstanceName <br>// <br>//      Returns the name of the pInst. <br>// <br>//      If pInst is NULL then NULL is returned. <br>// <br>LPTSTR  InstanceName (PPERF_INSTANCE pInst) <br>{ <br>    if (pInst) <br>        return (LPTSTR) ((PCHAR) pInst + pInst-&gt;NameOffset); <br>    else <br>        return NULL; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PVIEWDAT.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5725"></a>PVIEWDAT.H</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br> <br>/****************************************************************************** <br> <br>                            P V I E W   D A T A <br> <br>    Name:       pviewdat.h <br> <br>    Description: <br>        Prototypes of functions used in pviewdat.c <br> <br>******************************************************************************/ <br> <br> <br> <br> <br> <br>//****************************************************************************** <br>// <br>//  Titles and indexes. <br>// <br>//  See GetPerfTitleSz() in perfdata.c on how to retrieve these data. <br>// <br>//  This is not complete, for complete listing <br>//  see under hkey_local_system <br>//               \software <br>//                   \microsoft <br>//                       \windows nt <br>//                           \currentversion <br>//                               \perflib <br>//                                   \### <br>// <br> <br>#define PN_PROCESS                          TEXT("Process") <br>#define PN_PROCESS_CPU                      TEXT("% Processor Time") <br>#define PN_PROCESS_PRIV                     TEXT("% Privileged Time") <br>#define PN_PROCESS_USER                     TEXT("% User Time") <br>#define PN_PROCESS_WORKING_SET              TEXT("Working Set") <br>#define PN_PROCESS_PEAK_WS                  TEXT("Working Set Peak") <br>#define PN_PROCESS_PRIO                     TEXT("Priority Base") <br>#define PN_PROCESS_ELAPSE                   TEXT("Elapsed Time") <br>#define PN_PROCESS_ID                       TEXT("ID Process") <br>#define PN_PROCESS_PRIVATE_PAGE             TEXT("Private Bytes") <br>#define PN_PROCESS_VIRTUAL_SIZE             TEXT("Virtual Bytes") <br>#define PN_PROCESS_PEAK_VS                  TEXT("Virtual Bytes Peak") <br>#define PN_PROCESS_FAULT_COUNT              TEXT("Page Faults/sec") <br> <br> <br>#define PN_THREAD                           TEXT("Thread") <br>#define PN_THREAD_CPU                       TEXT("% Processor Time") <br>#define PN_THREAD_PRIV                      TEXT("% Privileged Time") <br>#define PN_THREAD_USER                      TEXT("% User Time") <br>#define PN_THREAD_START                     TEXT("Start Address") <br>#define PN_THREAD_SWITCHES                  TEXT("Context Switches/sec") <br>#define PN_THREAD_PRIO                      TEXT("Priority Current") <br>#define PN_THREAD_BASE_PRIO                 TEXT("Priority Base") <br>#define PN_THREAD_ELAPSE                    TEXT("Elapsed Time") <br> <br>#define PN_THREAD_DETAILS                   TEXT("Thread Details") <br>#define PN_THREAD_PC                        TEXT("User PC") <br> <br>#define PN_IMAGE                            TEXT("Image") <br>#define PN_IMAGE_NOACCESS                   TEXT("No Access") <br>#define PN_IMAGE_READONLY                   TEXT("Read Only") <br>#define PN_IMAGE_READWRITE                  TEXT("Read/Write") <br>#define PN_IMAGE_WRITECOPY                  TEXT("Write Copy") <br>#define PN_IMAGE_EXECUTABLE                 TEXT("Executable") <br>#define PN_IMAGE_EXE_READONLY               TEXT("Exec Read Only") <br>#define PN_IMAGE_EXE_READWRITE              TEXT("Exec Read/Write") <br>#define PN_IMAGE_EXE_WRITECOPY              TEXT("Exec Write Copy") <br> <br> <br>#define PN_PROCESS_ADDRESS_SPACE            TEXT("Process Address Space") <br>#define PN_PROCESS_PRIVATE_NOACCESS         TEXT("Reserved Space No Access") <br>#define PN_PROCESS_PRIVATE_READONLY         TEXT("Reserved Space Read Only") <br>#define PN_PROCESS_PRIVATE_READWRITE        TEXT("Reserved Space Read/Write") <br>#define PN_PROCESS_PRIVATE_WRITECOPY        TEXT("Reserved Space Write Copy") <br>#define PN_PROCESS_PRIVATE_EXECUTABLE       TEXT("Reserved Space Executable") <br>#define PN_PROCESS_PRIVATE_EXE_READONLY     TEXT("Reserved Space Exec Read Only") <br>#define PN_PROCESS_PRIVATE_EXE_READWRITE    TEXT("Reserved Space Exec Read/Write") <br>#define PN_PROCESS_PRIVATE_EXE_WRITECOPY    TEXT("Reserved Space Exec Write Copy") <br> <br> <br>#define PN_PROCESS_MAPPED_NOACCESS          TEXT("Mapped Space No Access") <br>#define PN_PROCESS_MAPPED_READONLY          TEXT("Mapped Space Read Only") <br>#define PN_PROCESS_MAPPED_READWRITE         TEXT("Mapped Space Read/Write") <br>#define PN_PROCESS_MAPPED_WRITECOPY         TEXT("Mapped Space Write Copy") <br>#define PN_PROCESS_MAPPED_EXECUTABLE        TEXT("Mapped Space Executable") <br>#define PN_PROCESS_MAPPED_EXE_READONLY      TEXT("Mapped Space Exec Read Only") <br>#define PN_PROCESS_MAPPED_EXE_READWRITE     TEXT("Mapped Space Exec Read/Write") <br>#define PN_PROCESS_MAPPED_EXE_WRITECOPY     TEXT("Mapped Space Exec Write Copy") <br> <br> <br>#define PN_PROCESS_IMAGE_NOACCESS           TEXT("Image Space No Access") <br>#define PN_PROCESS_IMAGE_READONLY           TEXT("Image Space Read Only") <br>#define PN_PROCESS_IMAGE_READWRITE          TEXT("Image Space Read/Write") <br>#define PN_PROCESS_IMAGE_WRITECOPY          TEXT("Image Space Write Copy") <br>#define PN_PROCESS_IMAGE_EXECUTABLE         TEXT("Image Space Executable") <br>#define PN_PROCESS_IMAGE_EXE_READONLY       TEXT("Image Space Exec Read Only") <br>#define PN_PROCESS_IMAGE_EXE_READWRITE      TEXT("Image Space Exec Read/Write") <br>#define PN_PROCESS_IMAGE_EXE_WRITECOPY      TEXT("Image Space Exec Write Copy") <br> <br> <br> <br> <br> <br> <br> <br>DWORD   PX_PROCESS; <br>DWORD   PX_PROCESS_CPU; <br>DWORD   PX_PROCESS_PRIV; <br>DWORD   PX_PROCESS_USER; <br>DWORD   PX_PROCESS_WORKING_SET; <br>DWORD   PX_PROCESS_PEAK_WS; <br>DWORD   PX_PROCESS_PRIO; <br>DWORD   PX_PROCESS_ELAPSE; <br>DWORD   PX_PROCESS_ID; <br>DWORD   PX_PROCESS_PRIVATE_PAGE; <br>DWORD   PX_PROCESS_VIRTUAL_SIZE; <br>DWORD   PX_PROCESS_PEAK_VS; <br>DWORD   PX_PROCESS_FAULT_COUNT; <br>DWORD   PX_PROCESS_PAGED_POOL_QUOTA; <br>DWORD   PX_PROCESS_PEAK_PAGED_POOL_QUOTA; <br>DWORD   PX_PROCESS_NONPAGED_POOL_QUOTA; <br>DWORD   PX_PROCESS_PEAK_PAGED_POOL; <br>DWORD   PX_PROCESS_PEAK_NONPAGED_POOL; <br>DWORD   PX_PROCESS_CUR_PAGED_POOL; <br>DWORD   PX_PROCESS_CUR_NONPAGED_POOL; <br>DWORD   PX_PROCESS_PAGED_POOL_LIMIT; <br>DWORD   PX_PROCESS_NONPAGED_POOL_LIMIT; <br> <br> <br>DWORD   PX_THREAD; <br>DWORD   PX_THREAD_CPU; <br>DWORD   PX_THREAD_PRIV; <br>DWORD   PX_THREAD_USER; <br>DWORD   PX_THREAD_START; <br>DWORD   PX_THREAD_SWITCHES; <br>DWORD   PX_THREAD_PRIO; <br>DWORD   PX_THREAD_BASE_PRIO; <br>DWORD   PX_THREAD_ELAPSE; <br> <br>DWORD   PX_THREAD_DETAILS; <br>DWORD   PX_THREAD_PC; <br> <br>DWORD   PX_IMAGE; <br>DWORD   PX_IMAGE_NOACCESS; <br>DWORD   PX_IMAGE_READONLY; <br>DWORD   PX_IMAGE_READWRITE; <br>DWORD   PX_IMAGE_WRITECOPY; <br>DWORD   PX_IMAGE_EXECUTABLE; <br>DWORD   PX_IMAGE_EXE_READONLY; <br>DWORD   PX_IMAGE_EXE_READWRITE; <br>DWORD   PX_IMAGE_EXE_WRITECOPY; <br> <br> <br>DWORD   PX_PROCESS_ADDRESS_SPACE; <br>DWORD   PX_PROCESS_PRIVATE_NOACCESS; <br>DWORD   PX_PROCESS_PRIVATE_READONLY; <br>DWORD   PX_PROCESS_PRIVATE_READWRITE; <br>DWORD   PX_PROCESS_PRIVATE_WRITECOPY; <br>DWORD   PX_PROCESS_PRIVATE_EXECUTABLE; <br>DWORD   PX_PROCESS_PRIVATE_EXE_READONLY; <br>DWORD   PX_PROCESS_PRIVATE_EXE_READWRITE; <br>DWORD   PX_PROCESS_PRIVATE_EXE_WRITECOPY; <br> <br> <br>DWORD   PX_PROCESS_MAPPED_NOACCESS; <br>DWORD   PX_PROCESS_MAPPED_READONLY; <br>DWORD   PX_PROCESS_MAPPED_READWRITE; <br>DWORD   PX_PROCESS_MAPPED_WRITECOPY; <br>DWORD   PX_PROCESS_MAPPED_EXECUTABLE; <br>DWORD   PX_PROCESS_MAPPED_EXE_READONLY; <br>DWORD   PX_PROCESS_MAPPED_EXE_READWRITE; <br>DWORD   PX_PROCESS_MAPPED_EXE_WRITECOPY; <br> <br> <br>DWORD   PX_PROCESS_IMAGE_NOACCESS; <br>DWORD   PX_PROCESS_IMAGE_READONLY; <br>DWORD   PX_PROCESS_IMAGE_READWRITE; <br>DWORD   PX_PROCESS_IMAGE_WRITECOPY; <br>DWORD   PX_PROCESS_IMAGE_EXECUTABLE; <br>DWORD   PX_PROCESS_IMAGE_EXE_READONLY; <br>DWORD   PX_PROCESS_IMAGE_EXE_READWRITE; <br>DWORD   PX_PROCESS_IMAGE_EXE_WRITECOPY; <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br>#define Li2Double(x) ((double)((x).HighPart) * 4.294967296E9 + (double)((x).LowPart)) <br> <br> <br> <br> <br> <br> <br> <br>typedef     struct _TIME_FIELD <br>    TIME_FIELD, <br>    *PTIME_FIELD; <br> <br>struct _TIME_FIELD <br>    { <br>    INT     Hours; <br>    INT     Mins; <br>    INT     Secs; <br>    INT     mSecs; <br>    }; <br> <br> <br> <br> <br> <br> <br> <br> <br>void RefreshPviewDlgThreadPC <br>           (HWND            hPviewDlg, <br>            LPTSTR          szProcessName, <br>            LPTSTR          szThreadName, <br>            PPERF_OBJECT    pThreadDetailsObject, <br>            PPERF_DATA      pCostlyData); <br> <br> <br>BOOL RefreshMemoryDlg <br>           (HWND            hMemDlg, <br>            PPERF_INSTANCE  pProcessInstance, <br>            PPERF_OBJECT    pProcessObject, <br>            PPERF_OBJECT    pAddressObject, <br>            PPERF_OBJECT    pImageObject); <br> <br> <br>void RefreshMemoryDlgImage <br>           (HWND           hMemDlg, <br>            DWORD          dwIndex, <br>            PPERF_OBJECT   pImageObject); <br> <br> <br>void RefreshPviewDlgMemoryData <br>           (HWND            hPviewDlg, <br>            PPERF_INSTANCE  pProcessInstance, <br>            PPERF_OBJECT    pProcessObject, <br>            PPERF_OBJECT    pAddressObject); <br> <br> <br>PPERF_DATA RefreshPerfData <br>           (HKEY            hPerfKey, <br>            LPTSTR          szObjectIndex, <br>            PPERF_DATA      pData, <br>            DWORD           *pDataSize); <br> <br> <br>void RefreshProcessList <br>           (HWND            hProcessList, <br>            PPERF_OBJECT    pObject); <br> <br> <br>void RefreshProcessData <br>           (HWND             hWnd, <br>            PPERF_OBJECT     pObject, <br>            DWORD            ProcessIndex); <br> <br> <br>void RefreshThreadList <br>           (HWND             hThreadList, <br>            PPERF_OBJECT     pObject, <br>            DWORD            ParentIndex); <br> <br> <br>void RefreshThreadData <br>           (HWND             hWnd, <br>            PPERF_OBJECT     pThreadObj, <br>            DWORD            ThreadIndex, <br>            PPERF_OBJECT     pProcessObj, <br>            PPERF_INSTANCE   pProcessInst); <br> <br>WORD ProcessPriority <br>           (PPERF_OBJECT    pObject, <br>            PPERF_INSTANCE  pInstance); <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CNTRDATA.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5728"></a>CNTRDATA.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br> <br>/****************************************************************************** <br> <br>                            C O U N T E R   D A T A <br> <br>    Name:       cntrdata.c <br> <br>    Description: <br>        This module contains functions that access counters of an instance <br>        of object in performance data. <br> <br>    Functions: <br>        FirstCounter <br>        NextCounter <br>        FindCounter <br>        CounterData <br> <br>******************************************************************************/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;winperf.h&gt; <br>#include "perfdata.h" <br> <br> <br> <br> <br>//********************************************************************* <br>// <br>//  FirstCounter <br>// <br>//      Find the first counter in pObject. <br>// <br>//      Returns a pointer to the first counter.  If pObject is NULL <br>//      then NULL is returned. <br>// <br>PPERF_COUNTER FirstCounter (PPERF_OBJECT pObject) <br>{ <br>    if (pObject) <br>        return (PPERF_COUNTER)((PCHAR) pObject + pObject-&gt;HeaderLength); <br>    else <br>        return NULL; <br>} <br> <br> <br> <br> <br>//********************************************************************* <br>// <br>//  NextCounter <br>// <br>//      Find the next counter of pCounter. <br>// <br>//      If pCounter is the last counter of an object type, bogus data <br>//      maybe returned.  The caller should do the checking. <br>// <br>//      Returns a pointer to a counter.  If pCounter is NULL then <br>//      NULL is returned. <br>// <br>PPERF_COUNTER NextCounter (PPERF_COUNTER pCounter) <br>{ <br>    if (pCounter) <br>        return (PPERF_COUNTER)((PCHAR) pCounter + pCounter-&gt;ByteLength); <br>    else <br>        return NULL; <br>} <br> <br> <br> <br> <br>//********************************************************************* <br>// <br>//  FindCounter <br>// <br>//      Find a counter specified by TitleIndex. <br>// <br>//      Returns a pointer to the counter.  If counter is not found <br>//      then NULL is returned. <br>// <br>PPERF_COUNTER FindCounter (PPERF_OBJECT pObject, DWORD TitleIndex) <br>{ <br>PPERF_COUNTER pCounter; <br>DWORD         i = 0; <br> <br>    if (pCounter = FirstCounter (pObject)) <br>        while (i &lt; pObject-&gt;NumCounters) <br>            { <br>            if (pCounter-&gt;CounterNameTitleIndex == TitleIndex) <br>                return pCounter; <br> <br>            pCounter = NextCounter (pCounter); <br>            i++; <br>            } <br> <br>    return NULL; <br> <br>} <br> <br> <br> <br> <br>//********************************************************************* <br>// <br>//  CounterData <br>// <br>//      Returns counter data for an object instance.  If pInst or pCount <br>//      is NULL then NULL is returne. <br>// <br>PVOID CounterData (PPERF_INSTANCE pInst, PPERF_COUNTER pCount) <br>{ <br>PPERF_COUNTER_BLOCK pCounterBlock; <br> <br>    if (pCount &amp;&amp; pInst) <br>        { <br>        pCounterBlock = (PPERF_COUNTER_BLOCK)((PCHAR)pInst + pInst-&gt;ByteLength); <br>        return (PVOID)((PCHAR)pCounterBlock + pCount-&gt;CounterOffset); <br>        } <br>    else <br>        return NULL; <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

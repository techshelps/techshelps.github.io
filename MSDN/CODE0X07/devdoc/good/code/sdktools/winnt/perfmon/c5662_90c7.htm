<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MEMORY.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5677"></a>MEMORY.C</h2>
<pre><code><br> <br> <br>#include "perfmon.h"    // included by all perfmon sources <br>#include "pmemory.h"     // external declarations for this file <br> <br> <br>LPMEMORY MemoryAllocate (DWORD dwSize) <br>   {  // MemoryAllocate <br>   HMEMORY        hMemory ; <br>   LPMEMORY       lpMemory ; <br> <br>   hMemory = GlobalAlloc (GHND, dwSize) ; <br>   if (!hMemory) <br>      return (NULL) ; <br>   lpMemory = GlobalLock (hMemory) ; <br>   if (!lpMemory) <br>      GlobalFree (hMemory) ; <br>   return (lpMemory) ; <br>   }  // MemoryAllocate <br> <br> <br>VOID MemoryFree (LPMEMORY lpMemory) <br>   {  // MemoryFree <br>   HMEMORY        hMemory ; <br> <br>   if (!lpMemory) <br>      return ; <br> <br>   hMemory = GlobalHandle (lpMemory) ; <br> <br>   if (hMemory) <br>      {  // if <br>      GlobalUnlock (hMemory) ; <br>      GlobalFree (hMemory) ; <br>      }  // if <br>   }  // MemoryFree <br>    <br> <br>DWORD MemorySize (LPMEMORY lpMemory) <br>   { <br>   HMEMORY        hMemory ; <br> <br>   hMemory = GlobalHandle (lpMemory) ; <br>   if (!hMemory) <br>      return (0L) ; <br> <br>   return (GlobalSize (hMemory)) ; <br>   } <br> <br> <br>LPMEMORY MemoryResize (LPMEMORY lpMemory, <br>                       DWORD dwNewSize) <br>   { <br>   HMEMORY        hMemory ; <br>   LPMEMORY       lpNewMemory ; <br> <br>   hMemory = GlobalHandle (lpMemory) ; <br>   if (!hMemory) <br>      return (NULL) ; <br> <br>   GlobalUnlock (hMemory) ;  <br> <br>   hMemory = GlobalReAlloc (hMemory, dwNewSize, GHND) ; <br> <br>   if (!hMemory) <br>      return (NULL) ; <br> <br> <br>   lpNewMemory = GlobalLock (hMemory) ; <br> <br>   return (lpNewMemory) ; <br>   }  // MemoryResize <br> <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

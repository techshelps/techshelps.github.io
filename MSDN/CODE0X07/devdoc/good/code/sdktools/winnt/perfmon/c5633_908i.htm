<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>EXPORT.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5652"></a>EXPORT.C</h2>
<pre><code>#include "perfmon.h" <br>#include &lt;lmcons.h&gt; <br>#include &lt;lmerr.h&gt; <br>#include &lt;lmapibuf.h&gt; <br>#include &lt;lmwksta.h&gt; <br>// #include &lt;uiexport.h&gt; <br>#include &lt;stdio.h&gt;         // for sprintf <br>#include "utils.h" <br> <br>#include "perfmops.h"      // for SystemTimeDateString <br>#include "fileopen.h"      // for FileGetName <br>#include "fileutil.h"      // for FileRead etc <br>#include "playback.h"      // for PlayingBackLog &amp; LogPositionSystemTime <br>#include "dlgs.h"          // common dialog control IDs <br>#include "pmhelpid.h"      // Help IDs <br> <br> <br>// This routine opens the export file and put in the header info. <br>// It is used by ExportChart, ExportAlert, &amp; ExportReport. <br>INT  ExportFileOpen (HWND hWnd, HANDLE *phFile, int IntervalMSecs, LPTSTR *ppFileName) <br>{ <br>   CHAR           TempBuff [LongTextLen * 2] ; <br> <br>   TCHAR          UnicodeBuff [LongTextLen] ; <br>   TCHAR          UnicodeBuff1 [MiscTextLen] ; <br>   SYSTEMTIME     SystemTime ; <br>   int            StringLen ; <br>   INT            ErrCode = 0 ; <br>   FLOAT          eIntervalSecs ; <br> <br>   // defined and setup in status.c <br>   extern TCHAR   szCurrentActivity [] ; <br>   extern TCHAR   szStatusFormat [] ; <br> <br>   *phFile = 0 ; <br> <br>   if (!FileGetName (hWnd, IDS_EXPORTFILE, UnicodeBuff)) <br>      { <br>      // user cancel  <br>      goto Exit0 ; <br>      } <br> <br>   *ppFileName = StringAllocate (UnicodeBuff) ; <br> <br>   // open the file.. <br>   if (!(*phFile = FileHandleCreate (UnicodeBuff))) <br>      { <br>      // can't open the file <br>      ErrCode = ERR_CANT_OPEN ; <br>      goto Exit0 ; <br>      } <br> <br> <br>   // export header <br>   StringLoad (IDS_REPORT_HEADER, UnicodeBuff) ; <br>   ConvertUnicodeStr (TempBuff, UnicodeBuff) ; <br>   StringLen = strlen (TempBuff) ; <br>   ConvertUnicodeStr (&amp;TempBuff[StringLen], LocalComputerName) ; <br>   strcat (TempBuff, LineEndStr) ; <br> <br>   if (!FileWrite (*phFile, TempBuff, strlen(TempBuff))) <br>      { <br>      ErrCode = ERR_EXPORT_FILE ; <br>      goto Exit0 ; <br>      } <br> <br>   // export today's date time <br>   GetLocalTime (&amp;SystemTime) ; <br> <br>   StringLoad (IDS_EXPORT_DATE, UnicodeBuff) ; <br>   StringLen = lstrlen (UnicodeBuff) ; <br>   UnicodeBuff[StringLen] = TEXT(':') ; <br>   UnicodeBuff[StringLen+1] = TEXT(' ') ; <br>   SystemTimeDateString (&amp;SystemTime, &amp;UnicodeBuff[StringLen+2]) ; <br>   ConvertUnicodeStr (TempBuff, UnicodeBuff) ; <br>   strcat (TempBuff, LineEndStr) ; <br> <br>   if (!FileWrite (*phFile, TempBuff, strlen(TempBuff))) <br>      { <br>      ErrCode = ERR_EXPORT_FILE ; <br>      goto Exit0 ; <br>      } <br> <br>   StringLoad (IDS_EXPORT_TIME, UnicodeBuff) ; <br>   StringLen = lstrlen (UnicodeBuff) ; <br>   UnicodeBuff[StringLen] = TEXT(':') ; <br>   UnicodeBuff[StringLen+1] = TEXT(' ') ; <br>   SystemTimeTimeString (&amp;SystemTime, &amp;UnicodeBuff[StringLen+2], FALSE) ; <br>   ConvertUnicodeStr (TempBuff, UnicodeBuff) ; <br>   strcat (TempBuff, LineEndStr) ; <br> <br>   if (!FileWrite (*phFile, TempBuff, strlen(TempBuff))) <br>      { <br>      ErrCode = ERR_EXPORT_FILE ; <br>      goto Exit0 ; <br>      } <br> <br> <br>   // export data source <br>   TSPRINTF (UnicodeBuff, szStatusFormat, <br>      PlayingBackLog () ? <br>      PlaybackLog.szFileTitle : szCurrentActivity) ; <br>   ConvertUnicodeStr (TempBuff, UnicodeBuff) ; <br>   strcat (TempBuff, LineEndStr) ; <br>    <br>   if (!FileWrite (*phFile, TempBuff, strlen(TempBuff))) <br>      { <br>      ErrCode = ERR_EXPORT_FILE ; <br>      goto Exit0 ; <br>      } <br> <br> <br>   if (!PlayingBackLog()) <br>      { <br>          <br>      eIntervalSecs = (FLOAT)IntervalMSecs / (FLOAT) 1000.0 ; <br>      StringLoad (IDS_CHARTINT_FORMAT, UnicodeBuff1) ; <br>      TSPRINTF (UnicodeBuff, UnicodeBuff1, eIntervalSecs) ; <br>      ConvertDecimalPoint (UnicodeBuff) ; <br>      ConvertUnicodeStr (TempBuff, UnicodeBuff) ; <br>      strcat (TempBuff, LineEndStr) ; <br>    <br>      if (!FileWrite (*phFile, TempBuff, strlen(TempBuff))) <br>         { <br> <br>         ErrCode = ERR_EXPORT_FILE ; <br>         goto Exit0 ; <br>         } <br>      } <br>   else <br>      { <br>      // export the log start and stop date/time <br>      StringLoad (IDS_START_TEXT, UnicodeBuff) ; <br>      StringLen = lstrlen (UnicodeBuff) ; <br>      LogPositionSystemTime (&amp;(PlaybackLog.StartIndexPos), &amp;SystemTime) ; <br>      SystemTimeDateString (&amp;SystemTime, &amp;UnicodeBuff[StringLen]) ; <br>      StringLen = lstrlen (UnicodeBuff) ; <br>      UnicodeBuff[StringLen] = TEXT(' ') ; <br>      StringLen++ ; <br>      SystemTimeTimeString (&amp;SystemTime, &amp;UnicodeBuff[StringLen], FALSE) ; <br>      ConvertUnicodeStr (TempBuff, UnicodeBuff) ; <br>      strcat (TempBuff, LineEndStr) ; <br> <br>      if (!FileWrite (*phFile, TempBuff, strlen(TempBuff))) <br>         { <br> <br>         ErrCode = ERR_EXPORT_FILE ; <br>         goto Exit0 ; <br>         } <br> <br>      StringLoad (IDS_STOP_TEXT, UnicodeBuff) ; <br>      StringLen = lstrlen (UnicodeBuff) ; <br>      LogPositionSystemTime (&amp;(PlaybackLog.StopIndexPos), &amp;SystemTime) ; <br>      SystemTimeDateString (&amp;SystemTime, &amp;UnicodeBuff[StringLen]) ; <br>      StringLen = lstrlen (UnicodeBuff) ; <br>      UnicodeBuff[StringLen] = TEXT(' ') ; <br>      StringLen++ ; <br>      SystemTimeTimeString (&amp;SystemTime, &amp;UnicodeBuff[StringLen], FALSE) ; <br>      ConvertUnicodeStr (TempBuff, UnicodeBuff) ; <br>      strcat (TempBuff, LineEndStr) ; <br> <br>      if (!FileWrite (*phFile, TempBuff, strlen(TempBuff))) <br>         { <br>         ErrCode = ERR_EXPORT_FILE ; <br>         goto Exit0 ; <br>         } <br> <br>      if (hWnd == hWndAlert) <br>         { <br>         eIntervalSecs = (FLOAT)IntervalMSecs / (FLOAT) 1000.0 ; <br>         StringLoad (IDS_CHARTINT_FORMAT, UnicodeBuff1) ; <br>         TSPRINTF (UnicodeBuff, UnicodeBuff1, eIntervalSecs) ; <br>         ConvertDecimalPoint (UnicodeBuff) ; <br>         ConvertUnicodeStr (TempBuff, UnicodeBuff) ; <br>         strcat (TempBuff, LineEndStr) ; <br>       <br>         if (!FileWrite (*phFile, TempBuff, strlen(TempBuff))) <br>            { <br>            ErrCode = ERR_EXPORT_FILE ; <br>            goto Exit0 ; <br>            } <br>         } <br>       <br>      } <br> <br>   return (0) ; <br> <br>Exit0: <br> <br>   return (ErrCode) ; <br> <br>}  // ExportFileOpen <br> <br> <br> <br>BOOL APIENTRY ExportOptionsHookProc (HWND hDlg,  <br>                                     UINT iMessage,  <br>                                     WPARAM wParam,  <br>                                     LPARAM lParam) <br> <br>{ <br>   BOOL           bHandled ; <br> <br>   bHandled = TRUE ; <br>   switch (iMessage) <br>      { <br>      case WM_INITDIALOG: <br>         CheckRadioButton (hDlg, IDD_EXPORTCOMMAS, IDD_EXPORTTAB, <br>            pDelimiter == TabStr ? IDD_EXPORTTAB : IDD_EXPORTCOMMAS ) ; <br> <br>         WindowCenter (hDlg) ; <br>         break ; <br> <br>      case WM_COMMAND: <br>         switch (LOWORD(wParam)) <br>            {  // switch <br>            case IDD_EXPORTCOMMAS: <br>            case IDD_EXPORTTAB: <br>               // toggle between the 2 radio buttons.. <br>               CheckRadioButton (hDlg, IDD_EXPORTCOMMAS, IDD_EXPORTTAB, <br>                   LOWORD(wParam) == IDD_EXPORTTAB ? <br>                     IDD_EXPORTTAB : IDD_EXPORTCOMMAS ) ; <br>               break ; <br> <br>            case IDD_OK: <br>               pDelimiter = IsDlgButtonChecked (hDlg, IDD_EXPORTCOMMAS) ? <br>                  CommasStr : TabStr ; <br>               bHandled = FALSE ; <br> <br>               break ; <br> <br>            case IDD_EXPORTHELP: <br>               CallWinHelp (dwCurrentDlgID) ; <br>               break ; <br> <br>            case cmb1: <br>               if (HIWORD (wParam) == CBN_SELCHANGE) <br>                  { <br>                  int   iFileIndex ; <br>                  HWND  hWndCBox = (HWND) lParam ; <br> <br>                  // a diff. selection from the file type, change <br>                  // the delimiter accordingly. <br>                  iFileIndex = CBSelection (hWndCBox) ; <br>                  CheckRadioButton (hDlg, IDD_EXPORTCOMMAS, IDD_EXPORTTAB, <br>                     iFileIndex == 0 ? <br>                     IDD_EXPORTTAB : IDD_EXPORTCOMMAS ) ; <br> <br>                  } <br>               else <br>                  { <br>                  bHandled = FALSE ; <br>                  } <br>               break ; <br> <br>            default: <br>               bHandled = FALSE ; <br>            }  // switch <br>         break; <br> <br>      default: <br>         bHandled = FALSE ; <br>         break;             <br>      }  // switch <br> <br>   return (bHandled) ; <br> <br>}  // ExportOptionsHookProc <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

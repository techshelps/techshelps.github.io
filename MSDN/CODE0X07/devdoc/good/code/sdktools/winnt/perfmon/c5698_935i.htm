<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TIMEFRM.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5706"></a>TIMEFRM.C</h2>
<pre><code>//==========================================================================// <br>//                                  Includes                                // <br>//==========================================================================// <br> <br>#include &lt;stdio.h&gt; <br> <br>#include "perfmon.h"          // included by all source <br>#include "timefrm.h"          // external declarations for this file <br> <br>#include "alert.h"            // for PlaybackAlert <br>#include "grafdata.h"         // for PlaybackChart <br>#include "perfmops.h"         // for PerfmonViewWindow <br>#include "playback.h"         // for PlaybackIndexN <br>#include "report.h"           // for PlaybackReport <br>#include "timeline.h"         // for TL_INTERVAL <br>#include "utils.h" <br>#include "pmhelpid.h"         // for Help IDs <br> <br>//==========================================================================// <br>//                                Local Data                                // <br>//==========================================================================// <br> <br> <br> <br>static RECT    TFrameRectWindow ; <br> <br>//==========================================================================// <br>//                              Local Functions                             // <br>//==========================================================================// <br> <br> <br>void ClearSystemTime (SYSTEMTIME *pSystemTime) <br>   {  // ClearSystemTime <br>   pSystemTime-&gt;wYear = 0 ; <br>   pSystemTime-&gt;wMonth = 0 ; <br>   pSystemTime-&gt;wDayOfWeek = 0 ; <br>   pSystemTime-&gt;wDay = 0 ; <br>   pSystemTime-&gt;wHour = 0 ; <br>   pSystemTime-&gt;wMinute = 0 ; <br>   pSystemTime-&gt;wSecond = 0 ; <br>   pSystemTime-&gt;wMilliseconds = 0 ; <br>   }  // ClearSystemTime <br> <br> <br>//==========================================================================// <br>//                              Message Handlers                            // <br>//==========================================================================// <br> <br> <br>void static OnInitDialog (HDLG hDlg) <br>   {  // OnInitDialog <br>   PBOOKMARK      pBookmark ; <br>   int            iIndex ; <br>   TCHAR          szText [20+20+BookmarkCommentLen] ; <br>   TCHAR          szDate [20] ; <br>   TCHAR          szTime [20] ; <br>   int            iBookmarksNum ;    <br>   HWND           hWndTLine ; <br>   HWND           hWndBookmarks ; <br>   int            currentTextExtent = 0 ; <br>   int            maxTextExtent = 0 ; <br>   HDC            hDC = 0 ; <br>   HFONT          hFont ; <br> <br>   hWndTLine = DialogControl (hDlg, IDD_TIMEFRAMETIMELINE) ; <br>   hWndBookmarks = DialogControl (hDlg, IDD_TIMEFRAMEBOOKMARKS) ; <br>   SetFont (hWndBookmarks, hFontScales) ; <br>   LBSetHorzExtent (hWndBookmarks, 0) ; <br> <br>   TLineSetRange (hWndTLine, 0, PlaybackLog.iTotalTics - 1) ; <br>   TLineSetStart (hWndTLine, PlaybackLog.StartIndexPos.iPosition) ; <br>   TLineSetStop (hWndTLine, PlaybackLog.StopIndexPos.iPosition) ; <br> <br>   iBookmarksNum = 0 ; <br>   pBookmark = PlaybackLog.pBookmarkFirst ; <br> <br>   if (pBookmark) <br>      { <br>      hDC = GetDC (hWndBookmarks) ; <br>      if (hDC) <br>         { <br>         hFont = (HFONT)SendMessage(hWndBookmarks, WM_GETFONT, 0, 0L); <br>         if (hFont) <br>            SelectObject(hDC, hFont); <br>         } <br> <br>      while (pBookmark) <br>         { <br>         SystemTimeDateString (&amp;(pBookmark-&gt;SystemTime), szDate) ; <br>         SystemTimeTimeString (&amp;(pBookmark-&gt;SystemTime), szTime, TRUE) ; <br>         TSPRINTF (szText, TEXT(" %s  %s  %s"), <br>            szDate, szTime, <br>            pBookmark-&gt;szComment) ; <br>         iIndex = LBAdd (hWndBookmarks, szText) ; <br>         LBSetData (hWndBookmarks, iIndex, pBookmark-&gt;iTic) ; <br> <br>         // get the biggest text width <br>         if (hDC) <br>            { <br>            currentTextExtent = TextWidth (hDC, szText) + xScrollWidth / 2 ; <br>            if (currentTextExtent &gt; maxTextExtent) <br>               { <br>               maxTextExtent = currentTextExtent ; <br>               } <br>            } <br> <br>         pBookmark = pBookmark-&gt;pBookmarkNext ; <br>         } <br> <br>      LBSetSelection (hWndBookmarks, 0) ; <br> <br>      iBookmarksNum = LBNumItems (hWndBookmarks) ; <br>      } <br> <br>   if (iBookmarksNum == 0) <br>      { <br>      DialogEnable (hDlg, IDD_TIMEFRAMEBOOKMARKS, FALSE) ; <br>      DialogEnable (hDlg, IDD_TIMEFRAMEBOOKMARKGRP, FALSE) ; <br>      DialogEnable (hDlg, IDD_TIMEFRAMESETSTART, FALSE) ; <br>      DialogEnable (hDlg, IDD_TIMEFRAMESETSTOP, FALSE) ; <br>      } <br>   else <br>      { <br>      LBSetHorzExtent (hWndBookmarks, maxTextExtent) ; <br>      } <br> <br>   if (hDC) <br>      { <br>      ReleaseDC (hWndBookmarks, hDC) ; <br>      } <br> <br>   if (TFrameRectWindow.right == TFrameRectWindow.left) <br>      { <br>      // we have not initialize this data yet. <br>      // will get init. after the first time frame window invoke <br>      WindowCenter (hDlg) ; <br>      } <br>   else <br>      { <br>      // show it in its previous position <br>      MoveWindow (hDlg, <br>                 TFrameRectWindow.left, <br>                 TFrameRectWindow.top, <br>                 TFrameRectWindow.right - TFrameRectWindow.left, <br>                 TFrameRectWindow.bottom - TFrameRectWindow.top, <br>                 TRUE) ; <br>      } <br> <br>   dwCurrentDlgID = HC_PM_idDlgEditTimeFrame ; <br> <br>   }  // OnInitDialog <br> <br> <br>void static OnTLineInterval (HDLG hDlg,  <br>                             int iInterval,  <br>                             SYSTEMTIME *pSystemTime) <br>   {  // OnTLineInterval <br>   PLOGINDEX      pIndex ; <br> <br> <br>   pIndex = PlaybackIndexN (iInterval) ; <br> <br>   if (pIndex) <br>      *pSystemTime = pIndex-&gt;SystemTime ; <br>   else <br>      ClearSystemTime (pSystemTime) ; <br>   }  // OnTLineInterval <br> <br> <br>void static OnOK (HDLG hDlg) <br>   {  // OnOK <br>   LOGPOSITION    lp ; <br>   int            iIndex ; <br>   HWND           hWndTLine = DialogControl (hDlg, IDD_TIMEFRAMETIMELINE) ; <br> <br>   iIndex = TLineStart (hWndTLine) ; <br>   if (LogPositionN (iIndex, &amp;lp)) ; <br>      PlaybackLog.StartIndexPos = lp ; <br> <br>   iIndex = TLineStop (hWndTLine) ; <br>   if (LogPositionN (iIndex, &amp;lp)) <br>      PlaybackLog.StopIndexPos = lp ; <br> <br>    <br>   PlaybackLog.iSelectedTics =  <br>      PlaybackLog.StopIndexPos.iPosition - <br>      PlaybackLog.StartIndexPos.iPosition + 1 ; <br> <br>   PlaybackChart (hWndGraph) ; <br>   PlaybackAlert (hWndAlert, 0) ; <br>   PlaybackReport (hWndReport) ; <br> <br>   WindowInvalidate (PerfmonViewWindow ()) ; <br> <br>   GetWindowRect (hDlg, &amp;TFrameRectWindow) ; <br> <br>   dwCurrentDlgID = 0 ; <br>   }  // OnOK <br> <br>void static OnCancel (HWND hWnd) <br>   { <br>   HDC            hGraphDC ; <br>   PGRAPHSTRUCT   pGraph ; <br> <br>   pGraph = GraphData (hWndGraph) ; <br>   hGraphDC = GetDC (hWndGraph) ; <br>   if (!hGraphDC || !pGraph) <br>      { <br>      return ; <br>      } <br> <br>   TLineRedraw (hGraphDC, pGraph) ; <br> <br>   GetWindowRect (hWnd, &amp;TFrameRectWindow) ; <br> <br>   dwCurrentDlgID = 0 ; <br>   } <br> <br> <br>void OnSetStartStop (HWND hDlg, BOOL bSetStart) <br>   { <br>   int            iTic ; <br>   int            iStopTic ; <br>   int            iStartTic ; <br>   HWND           hWndTLine = DialogControl (hDlg, IDD_TIMEFRAMETIMELINE) ; <br>   HWND           hWndBookmarks = DialogControl (hDlg, IDD_TIMEFRAMEBOOKMARKS) ; <br> <br>   iStartTic = TLineStart (hWndTLine) ; <br>   iStopTic = TLineStop (hWndTLine) ; <br> <br>   iTic = LBData (hWndBookmarks, LBSelection (hWndBookmarks)) ; <br>   if ((bSetStart &amp;&amp; iStopTic &lt;= iTic) || <br>      (!bSetStart &amp;&amp; iStartTic &gt;= iTic)) <br>      { <br>      DlgErrorBox (hDlg, ERR_STOPBEFORESTART) ; <br>      } <br>   else <br>      { <br>      if (bSetStart) <br>         { <br>         TLineSetStart (hWndTLine, iTic) ; <br>         } <br>      else <br>         { <br>         TLineSetStop (hWndTLine, iTic) ; <br>         } <br>      WindowInvalidate (hWndTLine) ; <br>      } <br>   }  // OnSetStartStop <br> <br> <br>//==========================================================================// <br>//                             Exported Functions                           // <br>//==========================================================================// <br> <br> <br>int FAR WINAPI TimeframeDlgProc (HWND hDlg,  <br>                                 unsigned iMessage,  <br>                                 WPARAM wParam,  <br>                                 LONG lParam) <br>   { <br>   BOOL           bHandled ; <br> <br>   bHandled = TRUE ; <br>   switch (iMessage) <br>      { <br>      case TL_INTERVAL: <br>         OnTLineInterval (hDlg, wParam, (SYSTEMTIME *) lParam) ; <br>         break ; <br> <br>      case WM_INITDIALOG: <br>         OnInitDialog (hDlg) ; <br>         return  (TRUE) ; <br> <br>      case WM_CLOSE: <br>         OnCancel (hDlg) ; <br>         EndDialog (hDlg, 0) ; <br>         break ; <br> <br>      case WM_COMMAND: <br>         switch(wParam) <br>            { <br>            case IDD_OK: <br>               SetHourglassCursor() ; <br>               OnOK (hDlg) ; <br>               SetArrowCursor() ; <br>               EndDialog (hDlg, 1) ; <br>               break ; <br> <br>            case IDD_TIMEFRAMESETSTART: <br>            case IDD_TIMEFRAMESETSTOP: <br>               OnSetStartStop (hDlg, wParam == IDD_TIMEFRAMESETSTART) ; <br>               break ; <br> <br>            case IDD_CANCEL: <br>               OnCancel (hDlg) ; <br>               GetWindowRect (hDlg, &amp;TFrameRectWindow) ; <br>               EndDialog (hDlg, 0) ; <br>               break ; <br> <br>            case IDD_TIMEFRAMEHELP: <br>               CallWinHelp (dwCurrentDlgID) ; <br>               break ; <br> <br>            default: <br>               bHandled = FALSE ; <br>               break; <br>            } <br>         break; <br> <br> <br>      default: <br>            bHandled = FALSE ; <br>         break ;             <br>      }  // switch <br> <br>   return (bHandled) ; <br>   }  // TimeframeDlgProc <br> <br> <br> <br>BOOL SetTimeframe (HWND hWndParent) <br>   {  // SetTimeframe <br>   if (DialogBox (hInstance, idDlgTimeframe, <br>                  hWndParent, (DLGPROC) TimeframeDlgProc)) <br>      { <br>      return (TRUE) ; <br>      } <br>   return (FALSE) ; <br>   } <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

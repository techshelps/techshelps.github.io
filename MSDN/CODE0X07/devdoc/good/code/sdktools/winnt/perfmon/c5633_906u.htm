<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DATASRC.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5646"></a>DATASRC.C</h2>
<pre><code><br>//==========================================================================// <br>//                                  Includes                                // <br>//==========================================================================// <br> <br>#include "perfmon.h" <br>#include "datasrc.h"       // External declarations for this file <br> <br>#include "fileutil.h"      // for FileErrorMessageBox (whatever) <br>#include "grafdata.h"      // for ResetGraph <br>#include "alert.h"         // for ResetAlert <br>#include "log.h"           // for ResetLog <br>#include "report.h"        // for ResetReport <br>#include "playback.h" <br>#include "status.h" <br>#include "utils.h" <br>#include "pmhelpid.h"      // Help IDs <br>#include "fileopen.h"      // FileOpneHookProc <br>#include "pmemory.h"       // for MemoryAllocate &amp; MemoryFree <br>#include "perfmops.h"      // for ShowPerfmonWindowText <br> <br>//==========================================================================// <br>//                                Local Data                                // <br>//==========================================================================// <br> <br> <br>BOOL           bIgnoreFirstChange ; <br>BOOL           bDataSourceNow ; <br>BOOL           bDataSourcePrevious ; <br>BOOL           bLogFileNameChanged ; <br> <br>LPTSTR           pszLogFilePath ; <br>LPTSTR           pszLogFileTitle ; <br>//TCHAR          szLogFilePath [FilePathLen + 1] ; <br>//TCHAR          szLogFileTitle [FilePathLen + 1] ; <br> <br> <br>//==========================================================================// <br>//                              Local Functions                             // <br>//==========================================================================// <br> <br> <br> <br>void static UpdateLogName (HDLG hDlg) <br>   { <br>   DialogSetString (hDlg, IDD_DATASOURCEFILENAME, pszLogFilePath) ; <br>//   DialogSetString (hDlg, IDD_DATASOURCEFILENAME, pszLogFileTitle) ; <br>   } <br> <br> <br> <br>void OnChangeLog (HWND hWndParent) <br>   {  // OnChangeLog <br>   OPENFILENAME   ofn ; <br>   TCHAR          szOpenLog [WindowCaptionLen + 1] ; <br>   TCHAR          aszOpenFilter[LongTextLen] ; <br>   TCHAR          szMyLogFilePath [FilePathLen + 1] ; <br>   int            StringLength ; <br>   DWORD          SaveCurrentDlgID = dwCurrentDlgID ; <br> <br>   //=============================// <br>   // Get Log File                // <br>   //=============================// <br> <br>   StringLoad (IDS_OPENLOG, szOpenLog) ; <br>   StringLoad (IDS_SAVELOGFILEEXT, szMyLogFilePath) ; <br> <br>   // load the log file extension <br>   LoadString (hInstance, IDS_SAVELOGFILE, aszOpenFilter, <br>      sizeof(aszOpenFilter) / sizeof(TCHAR)) ; <br>   StringLength = lstrlen (aszOpenFilter) + 1 ; <br>   LoadString (hInstance, IDS_SAVELOGFILEEXT, <br>      &amp;aszOpenFilter[StringLength], <br>      sizeof(aszOpenFilter) / sizeof(TCHAR) - StringLength) ; <br>   StringLength += lstrlen (&amp;aszOpenFilter[StringLength]) ; <br> <br>   // setup the end strings <br>   aszOpenFilter[StringLength+1] = aszOpenFilter[StringLength+2] = TEXT('\0') ; <br> <br> <br>   ofn.lStructSize = sizeof (OPENFILENAME) ; <br>   ofn.hwndOwner = hWndParent ; <br>   ofn.hInstance = hInstance ; <br>   ofn.lpstrFilter = aszOpenFilter ; <br>   ofn.lpstrCustomFilter = NULL ; <br>   ofn.nMaxCustFilter = 0 ; <br>   ofn.nFilterIndex = 1; <br>   ofn.lpstrFile = szMyLogFilePath ; <br>   ofn.nMaxFile = FilePathLen * sizeof (TCHAR) ;    <br>   ofn.lpstrFileTitle = pszLogFileTitle ; <br>   ofn.nMaxFileTitle = FilePathLen * sizeof (TCHAR) ; <br>   ofn.lpstrInitialDir = NULL ; <br>   ofn.lpstrTitle = szOpenLog ; <br>   ofn.Flags = OFN_FILEMUSTEXIST | OFN_HIDEREADONLY |  <br>               OFN_PATHMUSTEXIST | OFN_SHOWHELP  | OFN_ENABLEHOOK ; <br>   ofn.lCustData = 0L ; <br>   ofn.lpfnHook = (LPOFNHOOKPROC) FileOpenHookProc ; <br>   ofn.lpstrDefExt = (LPTSTR)NULL; <br> <br>   dwCurrentDlgID  = HC_PM_idDlgOptionOpenLogFile ; <br>   if (GetOpenFileName (&amp;ofn)) <br>      { <br>      if (!strsame(pszLogFilePath, szMyLogFilePath)) <br>         { <br>         int    FileNameOffset ; <br>         LPTSTR pFileName ; <br> <br>         bLogFileNameChanged |= TRUE ; <br>         lstrcpy (pszLogFilePath, szMyLogFilePath) ; <br>         lstrcpy (pszLogFileTitle, ofn.lpstrFileTitle) ; <br> <br>         pFileName = ExtractFileName (szMyLogFilePath) ; <br>         if (pFileName != szMyLogFilePath) <br>            { <br>            FileNameOffset = pFileName - szMyLogFilePath ; <br>            szMyLogFilePath[FileNameOffset] = TEXT('\0') ; <br>            SetCurrentDirectory (szMyLogFilePath) ; <br>            } <br>         UpdateLogName (hWndParent) ; <br>         } <br>      } <br> <br>   // restore the global before exit <br>   dwCurrentDlgID  = SaveCurrentDlgID ; <br>   }  // OnChangeLog <br> <br> <br>//==========================================================================// <br>//                              Message Handlers                            // <br>//==========================================================================// <br> <br> <br>void static OnInitDialog (HDLG hDlg) <br>   { <br>   bLogFileNameChanged = FALSE ; <br> <br>   bIgnoreFirstChange = TRUE ; <br> <br>   bDataSourcePrevious = bDataSourceNow = !PlayingBackLog () ; <br> <br>   CheckRadioButton (hDlg, IDD_DATASOURCENOW, IDD_DATASOURCEFILE, <br>                     bDataSourceNow ? IDD_DATASOURCENOW : IDD_DATASOURCEFILE) ; <br>   UpdateLogName (hDlg) ; <br> <br>   EditSetLimit (GetDlgItem(hDlg, IDD_DATASOURCEFILENAME), <br>      FilePathLen - 1) ; <br> <br>   WindowCenter (hDlg) ; <br> <br>   dwCurrentDlgID = HC_PM_idDlgOptionDataFrom ; <br>   } <br> <br> <br>void /*static*/ OnDataSourceOK (HDLG hDlg) <br>   {  // OnOK <br>   BOOL     bHaveResetPerfmon ; <br>   INT      RetCode = 0 ; <br> <br>   bHaveResetPerfmon = FALSE; <br>   if (!BoolEqual (bDataSourceNow, bDataSourcePrevious) || <br>       (bLogFileNameChanged &amp;&amp; !bDataSourceNow) ) <br>      { <br>      if (PlayingBackLog () &amp;&amp; bDataSourceNow | bLogFileNameChanged) <br>         { <br>         CloseInputLog (hWndMain) ; <br>         bHaveResetPerfmon = TRUE ; <br>         } <br> <br>      if (!bDataSourceNow) <br>         { <br>         if (!bHaveResetPerfmon) <br>            { <br>            ResetGraphView (hWndGraph) ; <br>            ResetAlertView (hWndAlert) ; <br>            ResetLogView (hWndLog) ; <br>            ResetReportView (hWndReport) ; <br> <br>            if (pWorkSpaceFullFileName) <br>               { <br>               MemoryFree (pWorkSpaceFullFileName) ; <br>               pWorkSpaceFileName = NULL ; <br>               pWorkSpaceFullFileName = NULL ; <br>               } <br>            ShowPerfmonWindowText () ; <br>            } <br> <br>         GetDlgItemText (hDlg, IDD_DATASOURCEFILENAME, <br>            pszLogFilePath, FilePathLen - 1) ;          <br>         lstrcpy (pszLogFileTitle, pszLogFilePath); <br>    <br>         if (RetCode = OpenPlayback (pszLogFilePath, pszLogFileTitle)) <br>            { <br>            DlgErrorBox (hDlg, RetCode, pszLogFileTitle) ; <br>            } <br>         } <br> <br>      StatusLineReady (hWndStatus) ; <br>      } <br> <br>   if (!BoolEqual (bDataSourceNow, bDataSourcePrevious)) <br>      { <br>      if (bDataSourceNow) <br>         { <br>         // Set Priority high            <br>         SetPriorityClass(GetCurrentProcess(), HIGH_PRIORITY_CLASS) ; <br>         SetThreadPriority(GetCurrentThread(), THREAD_PRIORITY_HIGHEST) ; <br>         } <br>      else <br>         { <br>         // Use a lower priority for Playing back log    <br>         SetPriorityClass(GetCurrentProcess(), NORMAL_PRIORITY_CLASS) ; <br>         SetThreadPriority(GetCurrentThread(), THREAD_PRIORITY_NORMAL) ; <br>         } <br>      } <br> <br>   if (RetCode == 0) <br>      { <br>      EndDialog (hDlg, 1) ; <br>      } <br>   }  // OnOK       <br> <br> <br> <br>//==========================================================================// <br>//                             Exported Functions                           // <br>//==========================================================================// <br> <br> <br>int FAR WINAPI DataSourceDlgProc (HWND hDlg,  <br>                                  unsigned iMessage,  <br>                                  WPARAM wParam,  <br>                                  LPARAM lParam) <br>   { <br>   BOOL           bHandled ; <br> <br>   bHandled = TRUE ; <br>   switch (iMessage) <br>      { <br>      case WM_INITDIALOG: <br>         OnInitDialog (hDlg) ; <br>         return  (TRUE) ; <br> <br>      case WM_CLOSE: <br>         dwCurrentDlgID = 0 ; <br>         EndDialog (hDlg, 0) ; <br>         break ; <br> <br>      case WM_COMMAND: <br>         switch(LOWORD(wParam)) <br>            { <br>            case IDD_DATASOURCEFILENAME: <br>               if (bIgnoreFirstChange) <br>                  { <br>                  bIgnoreFirstChange = FALSE; <br>                  } <br> <br>               else if (HIWORD(wParam) == EN_UPDATE &amp;&amp; !bLogFileNameChanged)  <br>                  { <br>                  bLogFileNameChanged = TRUE; <br>                  CheckRadioButton (hDlg, <br>                                  IDD_DATASOURCENOW, <br>                                  IDD_DATASOURCEFILE, <br>                                  IDD_DATASOURCEFILE) ; <br>                  bDataSourceNow = FALSE ; <br>                  } <br>               break ; <br> <br>            case IDD_DATASOURCECHANGEFILE: <br>               OnChangeLog (hDlg) ; <br>               if (bLogFileNameChanged) <br>                  { <br>                  CheckRadioButton (hDlg, <br>                                    IDD_DATASOURCENOW, <br>                                    IDD_DATASOURCEFILE, <br>                                    IDD_DATASOURCEFILE) ; <br>                  bDataSourceNow = FALSE ; <br>                  } <br>               break ; <br> <br>            case IDD_DATASOURCEFILE: <br>               bDataSourceNow = FALSE ; <br>               break ; <br> <br>            case IDD_DATASOURCENOW: <br>               bDataSourceNow = TRUE ; <br>               break ; <br> <br>            case IDD_OK: <br>               dwCurrentDlgID = 0 ; <br>               OnDataSourceOK (hDlg) ; <br>               break ; <br> <br>            case IDD_CANCEL: <br>               dwCurrentDlgID = 0 ; <br>               EndDialog (hDlg, 0) ; <br>               break ; <br> <br>            case IDD_DATASOURCEHELP: <br>               CallWinHelp (dwCurrentDlgID) ; <br>               break ; <br> <br>            default: <br>               bHandled = FALSE ; <br>               break; <br>            } <br>         break; <br> <br> <br>      default: <br>            bHandled = FALSE ; <br>         break ;             <br>      }  // switch <br> <br>   return (bHandled) ; <br>   }  // DataSourceDlgProc <br> <br> <br> <br>BOOL DisplayDataSourceOptions (HWND hWndParent) <br>/* <br>   Effect:        Put up Perfmon's Data Source Options Display dialog, <br>                  which allows <br>                  the user to select the source of data input: real <br>                  time or log file. <br>*/ <br>   {  // DisplayDisplayOptions <br>   BOOL     retCode ; <br> <br>   pszLogFilePath  = (LPTSTR) MemoryAllocate (FilePathLen * sizeof(TCHAR)) ; <br>   pszLogFileTitle = (LPTSTR) MemoryAllocate (FilePathLen * sizeof(TCHAR)) ; <br>    <br>   lstrcpy (pszLogFilePath, PlaybackLog.szFilePath) ; <br>   lstrcpy (pszLogFileTitle, PlaybackLog.szFileTitle) ; <br> <br>   retCode = DialogBox (hInstance, idDlgDataSource, <br>                      hWndParent, (DLGPROC) DataSourceDlgProc) ; <br> <br>   MemoryFree (pszLogFilePath) ; <br>   MemoryFree (pszLogFileTitle) ; <br> <br>   return (retCode) ; <br> <br>   }  // DisplayDisplayOptions <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

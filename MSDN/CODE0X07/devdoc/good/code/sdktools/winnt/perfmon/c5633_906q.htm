<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>COMMAND.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5642"></a>COMMAND.C</h2>
<pre><code>/* <br>============================================================================== <br> <br>  Application: <br> <br>            Microsoft Windows NT (TM) Performance Monitor <br> <br>  File: <br>            Command.c -- PerfmonCommand routine and helpers. <br> <br>            This file contains the PerfmonCommand routine, which handles <br>            all of the user's menu selections. <br> <br>  Copyright 1992 - 1998 Microsoft Corporation. All Rights Reserved. <br>            Microsoft Confidential. <br>============================================================================== <br>*/ <br> <br> <br>//==========================================================================// <br>//                                  Includes                                // <br>//==========================================================================// <br> <br> <br>#include "stdio.h" <br>#include "perfmon.h" <br>#include "command.h"    // External declarations for this file <br>#include &lt;shellapi.h&gt;   // for ShellAbout <br> <br>#include "addlog.h"     // for AddLog <br>#include "alert.h"      // for CurrentAlertLine <br>#include "bookmark.h"   // for AddBookmark <br>#include "cderr.h" <br>#include "datasrc.h"    // for DisplayDataSourceOptions <br>#include "dialogs.h" <br>#include "dispoptn.h"   // for DisplayDisplayOptions <br>#include "fileopen.h"   // for FileOpen <br>#include "grafdata.h"   // for ChartDeleteLine ClearGraphDisplay <br>#include "grafdisp.h"   // for ToggleGraphRefresh <br>#include "graph.h"      // for SizeGraphComponents <br>#include "init.h"       // for PerfmonClose <br>#include "legend.h" <br>#include "log.h"        // for LogTimer <br>#include "logoptns.h" <br>#include "playback.h" <br>#include "report.h"     // for CurrentReportItem <br>#include "rptoptns.h"   // for DisplayReportOptions <br>#include "status.h"     // for StatusUpdateIcons <br>#include "timefrm.h"    // for SetTimeframe <br>#include "toolbar.h"    // for ToolbarDepressButton <br>#include "utils.h" <br>#include "perfmops.h"   // for SaveWorkspace <br> <br>int static deltax ; <br>int static deltay ; <br> <br>#define ABOUT_TIMER_ID 10 <br> <br>int FAR WINAPI AboutDlgProc (HWND hDlg, <br>                             unsigned iMessage, <br>                             WPARAM wParam, <br>                             LPARAM lParam) <br>   { <br>   BOOL           bHandled ; <br> <br>   bHandled = TRUE ; <br>   switch (iMessage) <br>      { <br>      case WM_INITDIALOG: <br>         deltax = 0 ; <br>         deltay = 0 ; <br>         dwCurrentDlgID = 0 ; <br>         SetTimer(hDlg, ABOUT_TIMER_ID, 1000, NULL) ; <br>         WindowCenter (hDlg) ; <br>         return (TRUE) ; <br> <br>      case WM_TIMER: <br>         deltax += 2 ; <br>         if (deltax &gt; 60) <br>            deltax = 0 ; <br> <br>         deltay += 5 ; <br>         if (deltay &gt; 60) <br>            deltay = 0 ; <br> <br>         WindowInvalidate (DialogControl (hDlg, 524)) ; <br>         break ; <br> <br>      case WM_DRAWITEM: <br>         { <br>         int xPos, yPos ; <br>         LPDRAWITEMSTRUCT lpItem ; <br> <br>         lpItem = (LPDRAWITEMSTRUCT) lParam ; <br>         xPos = lpItem-&gt;rcItem.left + deltax ; <br>         yPos = lpItem-&gt;rcItem.top + deltay ; <br>         DrawIcon (lpItem-&gt;hDC, xPos, yPos, hIcon) ; <br>         } <br>         break ; <br> <br>      case WM_CLOSE: <br>         dwCurrentDlgID = 0 ; <br>         KillTimer (hDlg, ABOUT_TIMER_ID) ; <br>         EndDialog (hDlg, 1) ; <br>         break ; <br> <br>      case WM_COMMAND: <br>         switch(wParam) <br>            { <br>            case IDD_OK: <br>               dwCurrentDlgID = 0 ; <br>               EndDialog (hDlg, 1) ; <br>               break ; <br> <br>            default: <br>               bHandled = FALSE ; <br>               break; <br>            } <br>         break; <br> <br> <br>      default: <br>            bHandled = FALSE ; <br>         break ; <br>      }  // switch <br> <br>   return (bHandled) ; <br>   }  // AboutDlgProc <br> <br> <br>//==========================================================================// <br>//                              Local Functions                             // <br>//==========================================================================// <br> <br> <br>void ChangeView (HWND hWnd, <br>                 int iNewView) <br>   {  // ChangeView <br>   HMENU hMenu = GetMenu (hWnd) ; <br>   BOOL  bViewChart, bViewAlert, bViewLog, bViewReport ; <br> <br>#ifdef ADVANCED_PERFMON <br>   iPerfmonView = iNewView ; <br>   bViewChart = bViewAlert = bViewLog = bViewReport = FALSE; <br> <br>   switch (iNewView) <br>      { <br>      case IDM_VIEWCHART: <br>         bViewChart = TRUE ; <br>         break ; <br> <br>      case IDM_VIEWALERT: <br>         bViewAlert = TRUE ; <br>         break ; <br> <br>      case IDM_VIEWLOG: <br>         bViewLog = TRUE ; <br>         break ; <br> <br>      case IDM_VIEWREPORT: <br>         bViewReport = TRUE ; <br>         break ; <br>      } <br> <br>   WindowShow (hWndGraph, bViewChart) ; <br>   WindowShow (hWndAlert, bViewAlert) ; <br>   WindowShow (hWndLog, bViewLog) ; <br>   WindowShow (hWndReport, bViewReport) ; <br> <br>   // set focus on the Legend window <br>   if (iPerfmonView == IDM_VIEWCHART) <br>      { <br>      SetFocus (hWndGraphLegend) ; <br>      } <br>   else if (iPerfmonView == IDM_VIEWALERT) <br>      { <br>      SetFocus (hWndAlertLegend) ; <br>      } <br>   else if (iPerfmonView == IDM_VIEWLOG) <br>      { <br>      SetFocus (hWndLogEntries) ; <br>      } <br>   else if (iPerfmonView == IDM_VIEWREPORT) <br>      { <br>      SetFocus (hWndReport) ; <br>      } <br> <br> <br>   if (hMenu) <br>      { <br>      MenuCheck (hMenu, IDM_VIEWCHART, bViewChart) ; <br>      MenuCheck (hMenu, IDM_VIEWALERT, bViewAlert) ; <br>      MenuCheck (hMenu, IDM_VIEWLOG, bViewLog) ; <br>      MenuCheck (hMenu, IDM_VIEWREPORT, bViewReport) ; <br> <br>      // show the Title bar <br>      ShowPerfmonWindowText () ; <br>      } <br> <br>   ToolbarDepressButton (hWndToolbar, ChartTool, bViewChart) ; <br>   ToolbarDepressButton (hWndToolbar, AlertTool, bViewAlert) ; <br>   ToolbarDepressButton (hWndToolbar, LogTool, bViewLog) ; <br>   ToolbarDepressButton (hWndToolbar, ReportTool, bViewReport) ; <br>#else <br>   // only Chart view in Perfmon Lite <br>   iPerfmonView = IDM_VIEWCHART ; <br>   WindowShow (hWndGraph, TRUE) ; <br>#endif <br> <br>   DrawMenuBar(hWnd) ; <br>   StatusLineReady (hWndStatus) ; <br>   }  // ChangeView <br> <br> <br>//==========================================================================// <br>//                              Message Handlers                            // <br>//==========================================================================// <br> <br> <br>void ViewChart (HWND hWnd) <br>   { <br>   if (Options.bMenubar) <br>      SetMenu (hWnd, hMenuChart) ; <br>   ChangeView (hWnd, IDM_VIEWCHART) ; <br>   } <br> <br> <br>void ViewAlert (HWND hWnd) <br>   { <br>   iUnviewedAlerts = 0 ; <br>   StatusUpdateIcons (hWndStatus) ; <br>   if (Options.bMenubar) <br>      SetMenu (hWnd, hMenuAlert) ; <br>   ChangeView (hWnd, IDM_VIEWALERT) ; <br>   } <br> <br> <br>void ViewLog (HWND hWnd) <br>   { <br>   if (Options.bMenubar) <br>      SetMenu (hWnd, hMenuLog) ; <br>   ChangeView (hWnd, IDM_VIEWLOG) ; <br>   } <br> <br> <br>void ViewReport (HWND hWnd) <br>   { <br>   if (Options.bMenubar) <br>      SetMenu (hWnd, hMenuReport) ; <br>   ChangeView (hWnd, IDM_VIEWREPORT) ; <br>   } <br> <br> <br>#ifdef KEEP_MANUALREFRESH <br>void ToggleRefresh (HWND hWnd) <br>   { <br>   BOOL           bRefresh ; <br> <br>   switch (iPerfmonView) <br>      { <br>      case IDM_VIEWCHART: <br>         bRefresh = ToggleGraphRefresh (hWndGraph) ; <br>         break ; <br> <br>      case IDM_VIEWALERT: <br>         bRefresh = ToggleAlertRefresh (hWndAlert) ; <br>         break ; <br> <br>      case IDM_VIEWLOG: <br>         bRefresh = ToggleLogRefresh (hWndLog) ; <br>         break ; <br> <br>      case IDM_VIEWREPORT: <br>         bRefresh = ToggleReportRefresh (hWndReport) ; <br>         break ; <br>      }  // switch <br> <br>   MenuCheck (GetMenu (hWnd), IDM_OPTIONSMANUALREFRESH, bRefresh) ; <br>   }  // ToggleRefresh <br>#endif <br> <br> <br>//==========================================================================// <br>//                             Exported Functions                           // <br>//==========================================================================// <br> <br> <br>BOOL PerfmonCommand (HWND hWnd, <br>                     WPARAM wParam, <br>                     LPARAM lParam) <br>/* <br>   Effect:        Respond to the user's menu selection, found in wParam. <br>                  In particular, branch to the appropriate OnXXX function <br>                  to perform the action associated with each command. <br> <br>   Called By:     MainWndProc (perfmon.c), in response to a WM_COMMAND <br>                  message. <br>*/ <br>   {  // PerfmonCommand <br>   PLINESTRUCT    pLine ; <br>   BOOL           bPrepareMenu = TRUE ; <br> <br>   switch (LOWORD (wParam)) <br>      { <br> <br>      //=============================// <br>      // Toolbar Commands            // <br>      //=============================// <br> <br>      case IDM_TOOLBARADD: <br>         bPrepareMenu = FALSE ; <br> <br>         switch (iPerfmonView) <br>            { <br>            case IDM_VIEWCHART: <br>               SendMessage (hWnd, WM_COMMAND, IDM_EDITADDCHART, lParam) ; <br>               break ; <br> <br>            case IDM_VIEWALERT: <br>               SendMessage (hWnd, WM_COMMAND, IDM_EDITADDALERT, lParam) ; <br>               break ; <br> <br>            case IDM_VIEWLOG: <br>               SendMessage (hWnd, WM_COMMAND, IDM_EDITADDLOG, lParam) ; <br>               break ; <br> <br>            case IDM_VIEWREPORT: <br>               SendMessage (hWnd, WM_COMMAND, IDM_EDITADDREPORT, lParam) ; <br>               break ; <br>            }  // switch <br>         break ; <br> <br> <br>      case IDM_TOOLBARMODIFY: <br>         bPrepareMenu = FALSE ; <br> <br>         switch (iPerfmonView) <br>            {  // switch <br>            case IDM_VIEWCHART: <br>               SendMessage (hWnd, WM_COMMAND, IDM_EDITMODIFYCHART, lParam) ; <br>               break ; <br> <br>            case IDM_VIEWALERT: <br>               SendMessage (hWnd, WM_COMMAND, IDM_EDITMODIFYALERT, lParam) ; <br>               break ; <br> <br>            case IDM_VIEWREPORT: <br>               SendMessage (hWnd, WM_COMMAND, IDM_EDITMODIFYREPORT, lParam) ; <br>               break ; <br>            }  // switch <br>         break ; <br> <br> <br>      case IDM_TOOLBARDELETE: <br>         bPrepareMenu = FALSE ; <br> <br>         switch (iPerfmonView) <br>            { <br>            case IDM_VIEWCHART: <br>               SendMessage (hWnd, WM_COMMAND, IDM_EDITDELETECHART, lParam) ; <br>               break ; <br> <br>            case IDM_VIEWALERT: <br>               SendMessage (hWnd, WM_COMMAND, IDM_EDITDELETEALERT, lParam) ; <br>               break ; <br> <br>            case IDM_VIEWLOG: <br>               SendMessage (hWnd, WM_COMMAND, IDM_EDITDELETELOG, lParam) ; <br>               break ; <br> <br>            case IDM_VIEWREPORT: <br>               SendMessage (hWnd, WM_COMMAND, IDM_EDITDELETEREPORT, lParam) ; <br>               break ; <br>            }  // switch <br>         break ; <br> <br> <br>      case IDM_TOOLBARREFRESH: <br>         bPrepareMenu = FALSE ; <br> <br>         switch (iPerfmonView) <br>            { <br>            case IDM_VIEWCHART: <br>               SendMessage (hWnd, WM_COMMAND, IDM_OPTIONSREFRESHNOWCHART, lParam) ; <br>               break ; <br> <br>            case IDM_VIEWALERT: <br>               SendMessage (hWnd, WM_COMMAND, IDM_OPTIONSREFRESHNOWALERT, lParam) ; <br>               break ; <br> <br>            case IDM_VIEWLOG: <br>               SendMessage (hWnd, WM_COMMAND, IDM_OPTIONSREFRESHNOWLOG, lParam) ; <br>               break ; <br> <br>            case IDM_VIEWREPORT: <br>               SendMessage (hWnd, WM_COMMAND, IDM_OPTIONSREFRESHNOWREPORT, lParam) ; <br>               break ; <br>            }  // switch <br>         break ; <br> <br> <br>      case IDM_TOOLBAROPTIONS: <br>         bPrepareMenu = FALSE ; <br> <br>         switch (iPerfmonView) <br>            {  // switch <br>            case IDM_VIEWCHART: <br>               SendMessage (hWnd, WM_COMMAND, IDM_OPTIONSCHART, lParam) ; <br>               break ; <br> <br>            case IDM_VIEWALERT: <br>               SendMessage (hWnd, WM_COMMAND, IDM_OPTIONSALERT, lParam) ; <br>               break ; <br> <br>            case IDM_VIEWLOG: <br>               SendMessage (hWnd, WM_COMMAND, IDM_OPTIONSLOG, lParam) ; <br>               break ; <br> <br>            case IDM_VIEWREPORT: <br>               SendMessage (hWnd, WM_COMMAND, IDM_OPTIONSREPORT, lParam) ; <br>               break ; <br>            }  // switch <br>         break ; <br> <br> <br>      //=============================// <br>      // "File" Commands             // <br>      //=============================// <br> <br> <br>      case IDM_FILENEWCHART: <br>//         if (QuerySaveChart (hWnd, pGraphs)) <br>            ResetGraphView (hWndGraph) ; <br>         break ; <br> <br> <br>      case IDM_FILENEWALERT: <br>//         if (QuerySaveAlert (hWnd, hWndAlert)) <br>            ResetAlertView (hWndAlert) ; <br>         break ; <br> <br>      case IDM_FILENEWLOG: <br>         ResetLogView (hWndLog) ; <br>         break ; <br> <br>      case IDM_FILENEWREPORT: <br>         ResetReportView (hWndReport) ; <br>         break ; <br> <br>      case IDM_FILEOPENCHART: <br>         FileOpen (hWndGraph, IDS_CHARTFILE, NULL) ; <br>         break ; <br> <br>      case IDM_FILEOPENALERT: <br>         FileOpen (hWndAlert, IDS_ALERTFILE, NULL) ; <br>         break ; <br> <br>      case IDM_FILEOPENLOG: <br>         FileOpen (hWndLog, IDS_LOGFILE, NULL) ; <br>         break ; <br> <br>      case IDM_FILEOPENREPORT: <br>         FileOpen (hWndReport, IDS_REPORTFILE, NULL) ; <br>         break ; <br> <br>      case IDM_FILESAVECHART: <br>      case IDM_FILESAVEASCHART: <br>         bPrepareMenu = FALSE ; <br>         SaveChart (hWndGraph, 0, <br>            (LOWORD (wParam) == IDM_FILESAVEASCHART) ? TRUE : FALSE) ; <br>         break; <br> <br>      case IDM_FILESAVEALERT: <br>      case IDM_FILESAVEASALERT: <br>         bPrepareMenu = FALSE ; <br>         SaveAlert (hWndAlert, 0, <br>            (LOWORD (wParam) == IDM_FILESAVEASALERT) ? TRUE : FALSE) ; <br>         break ; <br> <br>      case IDM_FILESAVELOG: <br>      case IDM_FILESAVEASLOG: <br>         bPrepareMenu = FALSE ; <br>         SaveLog (hWndLog, 0, <br>            (LOWORD (wParam) == IDM_FILESAVEASLOG) ? TRUE : FALSE) ; <br>         break ; <br> <br>      case IDM_FILESAVEREPORT: <br>      case IDM_FILESAVEASREPORT: <br>         bPrepareMenu = FALSE ; <br>         SaveReport (hWndReport, 0, <br>            (LOWORD (wParam) == IDM_FILESAVEASREPORT) ? TRUE : FALSE) ; <br>         break ; <br> <br> <br>      case IDM_FILESAVEWORKSPACE: <br>         bPrepareMenu = FALSE ; <br>         SaveWorkspace () ; <br>         break ; <br> <br>      case IDM_FILEEXPORTCHART: <br>         bPrepareMenu = FALSE ; <br>         ExportChart () ; <br>         break ; <br> <br>      case IDM_FILEEXPORTALERT: <br>         bPrepareMenu = FALSE ; <br>         ExportAlert () ; <br>         break ; <br> <br>      case IDM_FILEEXPORTLOG: <br>         bPrepareMenu = FALSE ; <br>         ExportLog () ; <br>         break ; <br> <br>      case IDM_FILEEXPORTREPORT: <br>         bPrepareMenu = FALSE ; <br>         ExportReport () ; <br>         break ; <br> <br> <br>#ifdef KEEP_PRINT <br>      case IDM_FILEPRINTCHART: <br>          PrintChart (hWnd, pGraphs) ; <br>          break ; <br> <br> <br>      case IDM_FILEPRINTREPORT: <br>         PrintReport (hWnd, hWndReport) ; <br>         break ; <br>#endif <br> <br>      case IDM_FILEEXIT: <br>         PerfmonClose (hWnd) ; <br>         bPrepareMenu = FALSE ; <br>         break ; <br> <br> <br>      //=============================// <br>      // "Edit" Commands             // <br>      //=============================// <br> <br> <br>      case IDM_EDITADDCHART: <br>         AddChart (hWnd) ; <br>         break; <br> <br>      case IDM_EDITADDALERT: <br>         AddAlert (hWnd) ; <br>         break; <br> <br>      case IDM_EDITADDLOG: <br>         AddLog (hWnd) ; <br>         break ; <br> <br>      case IDM_EDITADDREPORT: <br>         AddReport (hWnd) ; <br>         break ; <br> <br>      case IDM_EDITCLEARCHART : <br>         ClearGraphDisplay (pGraphs) ; <br>         break ; <br> <br>      case IDM_EDITCLEARALERT: <br>         ClearAlertDisplay (hWndAlert) ; <br>         break ; <br> <br>      case IDM_EDITCLEARREPORT: <br>         ClearReportDisplay (hWndReport) ; <br>         break ; <br> <br>      case IDM_EDITDELETECHART: <br>         pLine = CurrentGraphLine (hWndGraph) ; <br>         if (pLine) <br>            ChartDeleteLine(pGraphs, pLine) ; <br>         break ; <br> <br>      case IDM_EDITDELETEALERT: <br>         pLine = CurrentAlertLine (hWndAlert) ; <br>         if (pLine) <br>            AlertDeleteLine (hWndAlert, pLine) ; <br>         break ; <br> <br>      case IDM_EDITDELETELOG: <br>         LogDeleteEntry (hWndLog) ; <br>         break ; <br> <br>      case IDM_EDITDELETEREPORT: <br>         if (CurrentReportItem (hWndReport)) <br>            ReportDeleteItem (hWndReport) ; <br>         break ; <br> <br>      case IDM_EDITMODIFYCHART: <br>         EditChart (hWnd) ; <br>         break ; <br> <br>      case IDM_EDITMODIFYALERT: <br>         EditAlert (hWnd) ; <br>         break ; <br> <br>      case IDM_EDITTIMEWINDOW: <br>         if (PlayingBackLog()) <br>            { <br>            SetTimeframe (hWnd) ; <br>            } <br>         break ; <br> <br> <br>      //=============================// <br>      // "View" Commands             // <br>      //=============================// <br> <br> <br>      case IDM_VIEWCHART: <br>         if (iPerfmonView != IDM_VIEWCHART) <br>            { <br>            ViewChart (hWnd) ; <br>            } <br>         else <br>            { <br>            bPrepareMenu = FALSE ; <br>            ToolbarDepressButton (hWndToolbar, ChartTool, TRUE) ; <br>            } <br>         break ; <br> <br>      case IDM_VIEWALERT: <br>         if (iPerfmonView != IDM_VIEWALERT) <br>            { <br>            ViewAlert (hWnd) ; <br>            } <br>         else <br>            { <br>            bPrepareMenu = FALSE ; <br>            ToolbarDepressButton (hWndToolbar, AlertTool, TRUE) ; <br>            } <br>         break ; <br> <br>      case IDM_VIEWLOG: <br>         if (iPerfmonView != IDM_VIEWLOG) <br>            { <br>            ViewLog (hWnd) ; <br>            } <br>         else <br>            { <br>            bPrepareMenu = FALSE ; <br>            ToolbarDepressButton (hWndToolbar, LogTool, TRUE) ; <br>            } <br>         break ; <br> <br>      case IDM_VIEWREPORT: <br>         if (iPerfmonView != IDM_VIEWREPORT) <br>            { <br>            ViewReport (hWnd) ; <br>            } <br>         else <br>            { <br>            bPrepareMenu = FALSE ; <br>            ToolbarDepressButton (hWndToolbar, ReportTool, TRUE) ; <br>            } <br>         break ; <br> <br> <br>      //=============================// <br>      // "Options" Commands          // <br>      //=============================// <br> <br> <br>      case IDM_OPTIONSCHART: <br>       DialogBox(hInstance, idDlgChartOptions, hWnd, <br>                (DLGPROC)GraphOptionDlg); <br>       break; <br> <br>      case IDM_OPTIONSALERT: <br>         DisplayAlertOptions (hWnd, hWndAlert) ; <br>      break; <br> <br>      case IDM_OPTIONSLOG: <br>         DisplayLogOptions (hWnd, hWndLog) ; <br>         break ; <br> <br>      case IDM_OPTIONSREPORT: <br>         if (!PlayingBackLog()) <br>             DisplayReportOptions (hWnd, hWndReport) ; <br>         break ; <br> <br>   case IDM_OPTIONSBOOKMARK: <br>         bPrepareMenu = FALSE ; <br>         AddBookmark (hWnd) ; <br>         break; <br> <br>#ifdef KEEP_DISPLAY_OPTION <br>      case IDM_OPTIONSDISPLAY: <br>         DisplayDisplayOptions (hWnd) ; <br>         break ; <br>#endif <br> <br>      case IDM_OPTIONSDISPLAYMENU: <br>         // ShowPerfmonMenu will update Options.bMenubar.. <br>         ShowPerfmonMenu (!Options.bMenubar) ; <br>         break ; <br> <br>      case IDM_OPTIONSDISPLAYTOOL: <br>         Options.bToolbar = !Options.bToolbar ; <br>         SizePerfmonComponents () ; <br>         break ; <br> <br>      case IDM_OPTIONSDISPLAYSTATUS: <br>         Options.bStatusbar = !Options.bStatusbar ; <br>         SizePerfmonComponents () ; <br>         break ; <br> <br>      case IDM_OPTIONSDISPLAYONTOP: <br>         Options.bAlwaysOnTop = !Options.bAlwaysOnTop ; <br>         WindowSetTopmost (hWndMain, Options.bAlwaysOnTop) ; <br>         break ; <br> <br>      case IDM_OPTIONSDATASOURCE: <br>         DisplayDataSourceOptions (hWnd) ; <br>         break ; <br> <br>#ifdef KEEP_MANUALREFRESH <br>      case IDM_OPTIONSMANUALREFRESH: <br>         bPrepareMenu = FALSE ; <br>         if (!PlayingBackLog()) <br>            ToggleRefresh (hWnd) ; <br>         break ; <br>#endif <br> <br>      case IDM_OPTIONSREFRESHNOWCHART: <br>         bPrepareMenu = FALSE ; <br>         if (!PlayingBackLog()) <br>            GraphTimer (hWndGraph, TRUE) ; <br>         break ; <br> <br>      case IDM_OPTIONSREFRESHNOWALERT: <br>         bPrepareMenu = FALSE ; <br>         if (!PlayingBackLog()) <br>            AlertTimer (hWndAlert, TRUE) ; <br>         break ; <br> <br>      case IDM_OPTIONSREFRESHNOWLOG: <br>         bPrepareMenu = FALSE ; <br>         if (!PlayingBackLog()) <br>            LogTimer (hWndLog, TRUE) ; <br>         break ; <br> <br>      case IDM_OPTIONSREFRESHNOWREPORT: <br>         bPrepareMenu = FALSE ; <br>         if (!PlayingBackLog()) <br>            ReportTimer (hWndReport, TRUE) ; <br>         break ; <br> <br>      case IDM_OPTIONSLEGENDONOFF: <br>         bPrepareMenu = FALSE ; <br>         if (iPerfmonView == IDM_VIEWCHART) <br>            { <br>            pGraphs-&gt;gOptions.bLegendChecked = <br>               !pGraphs-&gt;gOptions.bLegendChecked ; <br>            SizeGraphComponents (hWndGraph) ; <br>            WindowInvalidate (hWndGraph) ; <br>            } <br>         else if (iPerfmonView == IDM_VIEWALERT) <br>            { <br>            PALERT pAlert = AlertData (hWnd) ; <br> <br>            pAlert-&gt;bLegendOn = !pAlert-&gt;bLegendOn ; <br> <br>            SizeAlertComponents (hWndAlert) ; <br>            WindowInvalidate (hWndAlert) ; <br>            } <br>         break ; <br> <br>      //=============================// <br>      // "Help" Commands             // <br>      //=============================// <br> <br> <br>      case IDM_HELPABOUT: <br>         { <br>         TCHAR          szApplication [WindowCaptionLen] ; <br> <br>         bPrepareMenu = FALSE ; <br> <br>         if (GetKeyState(VK_SHIFT) &lt; 0 &amp;&amp; GetKeyState(VK_CONTROL) &lt; 0) <br>            { <br>            DialogBox (hInstance, idDlgAbout, hWndMain, AboutDlgProc) ; <br>            } <br>         else <br>            { <br>            StringLoad (IDS_APPNAME, szApplication) ; <br>            ShellAbout (hWnd, szApplication, NULL, hIcon) ; <br>            } <br>         } <br>         break ; <br> <br>      //======================================// <br>      //  Generic messages from ACCELERATORS  // <br>      //======================================// <br>      case IDM_FILEOPENFILE: <br>         bPrepareMenu = FALSE ; <br>         switch (iPerfmonView) <br>            {  // switch <br>            case IDM_VIEWCHART: <br>               SendMessage (hWnd, WM_COMMAND, IDM_FILEOPENCHART, lParam) ; <br>               break ; <br> <br>            case IDM_VIEWALERT: <br>               SendMessage (hWnd, WM_COMMAND, IDM_FILEOPENALERT, lParam) ; <br>               break ; <br> <br>            case IDM_VIEWLOG: <br>               SendMessage (hWnd, WM_COMMAND, IDM_FILEOPENLOG, lParam) ; <br>               break ; <br> <br>            case IDM_VIEWREPORT: <br>               SendMessage (hWnd, WM_COMMAND, IDM_FILEOPENREPORT, lParam) ; <br>               break ; <br>            }  // switch <br>         break ; <br> <br>      case IDM_FILESAVEFILE: <br>         bPrepareMenu = FALSE ; <br>         switch (iPerfmonView) <br>            {  // switch <br>            case IDM_VIEWCHART: <br>               SendMessage (hWnd, WM_COMMAND, IDM_FILESAVECHART, lParam) ; <br>               break ; <br> <br>            case IDM_VIEWALERT: <br>               SendMessage (hWnd, WM_COMMAND, IDM_FILESAVEALERT, lParam) ; <br>               break ; <br> <br>            case IDM_VIEWLOG: <br>               SendMessage (hWnd, WM_COMMAND, IDM_FILESAVELOG, lParam) ; <br>               break ; <br> <br>            case IDM_VIEWREPORT: <br>               SendMessage (hWnd, WM_COMMAND, IDM_FILESAVEREPORT, lParam) ; <br>               break ; <br>            }  // switch <br>         break ; <br> <br>      case IDM_FILESAVEASFILE: <br>         bPrepareMenu = FALSE ; <br>         switch (iPerfmonView) <br>            {  // switch <br>            case IDM_VIEWCHART: <br>               SendMessage (hWnd, WM_COMMAND, IDM_FILESAVEASCHART, lParam) ; <br>               break ; <br> <br>            case IDM_VIEWALERT: <br>               SendMessage (hWnd, WM_COMMAND, IDM_FILESAVEASALERT, lParam) ; <br>               break ; <br> <br>            case IDM_VIEWLOG: <br>               SendMessage (hWnd, WM_COMMAND, IDM_FILESAVEASLOG, lParam) ; <br>               break ; <br> <br>            case IDM_VIEWREPORT: <br>               SendMessage (hWnd, WM_COMMAND, IDM_FILESAVEASREPORT, lParam) ; <br>               break ; <br>            }  // switch <br>         break ; <br> <br>      case IDM_CHARTHIGHLIGHTON: <br>         bPrepareMenu = FALSE ; <br>         if (iPerfmonView == IDM_VIEWCHART) <br>            { <br>            ChartHighlight () ; <br>            } <br>         break ; <br> <br>      case IDM_TOOLBARID: <br>         // msg from the toolbar control <br>         bPrepareMenu = FALSE ; <br>         OnToolbarHit (wParam, lParam) ; <br>         break ; <br> <br>      case IDM_HELPCONTENTS: <br>         { <br>         TCHAR NullStr [2] ; <br> <br>         NullStr[0] = TEXT('\0') ; <br>         bPrepareMenu = FALSE ; <br>         WinHelp (hWndMain, pszHelpFile, HELP_INDEX, (DWORD)(NullStr)) ; <br>         } <br>         break ; <br> <br>      case IDM_HELPSEARCH: <br>         { <br>         TCHAR NullStr [2] ; <br> <br>         NullStr[0] = TEXT('\0') ; <br>         bPrepareMenu = FALSE ; <br>         WinHelp (hWndMain, pszHelpFile, HELP_PARTIALKEY, (DWORD)(NullStr)) ; <br>         } <br>         break ; <br> <br>      case IDM_HELPHELP: <br>         { <br>         TCHAR NullStr [2] ; <br> <br>         NullStr[0] = TEXT('\0') ; <br>         bPrepareMenu = FALSE ; <br>         WinHelp (hWndMain, pszHelpFile, HELP_HELPONHELP, (DWORD)(NullStr)) ; <br>         } <br>         break ; <br> <br>      default: <br>         return (FALSE) ; <br>      }  // switch <br> <br>   if (bPrepareMenu) <br>      { <br>      PrepareMenu (GetMenu (hWnd)) ; <br>      } <br> <br>   return (TRUE) ; <br>   }  // PerfmonCommand <br> <br> <br> <br>void PrepareMenu (HMENU hMenu) <br>   {  // PrepareMenu <br>   BOOL           bPlayingLog ; <br>   BOOL           bCurrentLine ; <br>   BOOL           bManualRefresh ; <br>   BOOL           bLogCollecting ; <br>   BOOL           bRefresh ; <br> <br>   // hMenu is NULL when the menu bar display option is off. <br>   // In that case, we still have to enable/disable all tool buttons <br>   // So, I have commented out the next 2 lines... <br>//   if (!hMenu) <br>//      return ; <br> <br>   bLogCollecting = LogCollecting (hWndLog) ; <br>   bPlayingLog = PlayingBackLog () ; <br> <br>   switch (iPerfmonView) <br>      { <br>      case IDM_VIEWCHART: <br>         bCurrentLine = (CurrentGraphLine (hWndGraph) != NULL) ; <br>         bRefresh = GraphRefresh (hWndGraph) ; <br>         bManualRefresh = !bPlayingLog &amp;&amp; bCurrentLine ; <br>         if (hMenu) <br>            { <br>            MenuCheck (hMenu, IDM_VIEWCHART, TRUE) ; <br>            MenuEnableItem (hMenu, IDM_FILEEXPORTCHART, bCurrentLine) ; <br>            MenuEnableItem (hMenu, IDM_EDITMODIFYCHART, bCurrentLine) ; <br>            MenuEnableItem (hMenu, IDM_EDITDELETECHART, bCurrentLine) ; <br>            MenuEnableItem (hMenu, IDM_OPTIONSREFRESHNOWCHART, bManualRefresh) ; <br>            MenuEnableItem (hMenu, IDM_EDITCLEARCHART, !bPlayingLog &amp;&amp; bCurrentLine) ; <br>            } <br>         break ; <br> <br>      case IDM_VIEWALERT: <br>         bCurrentLine = (CurrentAlertLine (hWndAlert) != NULL) ; <br>         bRefresh = AlertRefresh (hWndAlert) ; <br>         bManualRefresh = !bPlayingLog &amp;&amp; bCurrentLine ; <br>         if (hMenu) <br>            { <br>            MenuCheck (hMenu, IDM_VIEWALERT, TRUE) ; <br>            MenuEnableItem (hMenu, IDM_FILEEXPORTALERT, bCurrentLine) ; <br>            MenuEnableItem (hMenu, IDM_EDITMODIFYALERT, bCurrentLine) ; <br>            MenuEnableItem (hMenu, IDM_EDITDELETEALERT, bCurrentLine) ; <br>            MenuEnableItem (hMenu, IDM_EDITCLEARALERT, !bPlayingLog &amp;&amp; bCurrentLine) ; <br>            MenuEnableItem (hMenu, IDM_OPTIONSREFRESHNOWALERT, bManualRefresh) ; <br>            } <br>         break ; <br> <br>      case IDM_VIEWLOG: <br>         bCurrentLine = AnyLogLine() ; <br>         bRefresh = LogRefresh (hWndLog) ; <br>         bManualRefresh = !bPlayingLog &amp;&amp; bLogCollecting ; <br>         if (hMenu) <br>            { <br>            MenuCheck (hMenu, IDM_VIEWLOG, TRUE) ; <br>            MenuEnableItem (hMenu, IDM_FILEEXPORTLOG, bCurrentLine) ; <br>            MenuEnableItem (hMenu, IDM_EDITDELETELOG, bCurrentLine) ; <br>            MenuEnableItem (hMenu, IDM_OPTIONSREFRESHNOWLOG , bManualRefresh) ; <br>            } <br>         break ; <br> <br>      case IDM_VIEWREPORT: <br>         bCurrentLine = CurrentReportItem (hWndReport) ; <br>         bRefresh = ReportRefresh (hWndReport) ; <br>         bManualRefresh = !bPlayingLog &amp;&amp; bCurrentLine ; <br>         if (hMenu) <br>            { <br>            MenuCheck (hMenu, IDM_VIEWREPORT, TRUE) ; <br>            MenuEnableItem (hMenu, IDM_FILEEXPORTREPORT, bCurrentLine) ; <br>            MenuEnableItem (hMenu, IDM_EDITMODIFYREPORT, FALSE) ; <br>            MenuEnableItem (hMenu, IDM_EDITDELETEREPORT, bCurrentLine) ; <br>            MenuEnableItem (hMenu, IDM_EDITCLEARREPORT, !bPlayingLog &amp;&amp; bCurrentLine) ; <br>            MenuEnableItem (hMenu, IDM_OPTIONSREFRESHNOWREPORT, bManualRefresh) ; <br>            } <br>         break ; <br>      }  // switch <br> <br> <br>   ToolbarEnableButton (hWndToolbar, EditTool, <br>                        bCurrentLine &amp;&amp; <br>                        (iPerfmonView != IDM_VIEWREPORT &amp;&amp; <br>                         iPerfmonView != IDM_VIEWLOG)) ; <br> <br>   ToolbarEnableButton (hWndToolbar, DeleteTool, bCurrentLine) ; <br> <br>   ToolbarEnableButton (hWndToolbar, RefreshTool, bManualRefresh) ; <br> <br>   // None of the alert or report options make sense when playing back a log. <br>#if 0 <br>   ToolbarEnableButton (hWndToolbar, <br>                        OptionsTool, <br>                        !bPlayingLog || <br>                        (iPerfmonView != IDM_VIEWREPORT &amp;&amp; <br>                         iPerfmonView != IDM_VIEWALERT)) ; <br>#endif <br>   ToolbarEnableButton (hWndToolbar, <br>                        OptionsTool, <br>                        !bPlayingLog || </code></pre>
<p>
</p>
<pre><code>iPerfmonView != IDM_VIEWREPORT) ; <br> <br>   ToolbarEnableButton (hWndToolbar, BookmarkTool, bLogCollecting) ; <br> <br> <br>   if (hMenu) <br>      { <br>//      MenuEnableItem (hMenu, IDM_OPTIONSMANUALREFRESH, !bPlayingLog) ; <br>//      MenuCheck (hMenu, IDM_OPTIONSMANUALREFRESH, bRefresh) ; <br>      MenuEnableItem (hMenu, IDM_EDITTIMEWINDOW, bPlayingLog) ; <br>//      MenuEnableItem (hMenu, IDM_OPTIONSALERT, !bPlayingLog) ; <br>      MenuEnableItem (hMenu, IDM_OPTIONSREPORT, !bPlayingLog) ; <br>      MenuEnableItem (hMenu, IDM_OPTIONSBOOKMARK, bLogCollecting) ; <br> <br>      // check/uncheck all the display options <br>      MenuCheck (hMenu, IDM_OPTIONSDISPLAYMENU, Options.bMenubar) ; <br>      MenuCheck (hMenu, IDM_OPTIONSDISPLAYTOOL, Options.bToolbar) ; <br>      MenuCheck (hMenu, IDM_OPTIONSDISPLAYSTATUS, Options.bStatusbar) ; <br>      MenuCheck (hMenu, IDM_OPTIONSDISPLAYONTOP, Options.bAlwaysOnTop) ; <br>      } <br>   }  // PrepareMenu <br> <br> <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

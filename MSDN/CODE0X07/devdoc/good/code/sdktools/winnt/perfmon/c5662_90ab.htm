<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GRAPH.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5663"></a>GRAPH.C</h2>
<pre><code>/***************************************************************************** <br> * <br> *  Graph.c - This module handles the graphing window. <br> * <br> *  Microsoft Confidential <br> *  Copyright 1992 - 1998 Microsoft Corporation <br> * <br> * <br> ****************************************************************************/ <br> <br>/* <br>   File Contents: <br> <br>      This file contains the code for creating and manipulating the graph <br>      window. This window is a child of hWndMain and represents one of the <br>      three "views" of the program. The other views are log and alert. <br> <br>      The graph window is actually just a container window, whose surface <br>      is completely filled by its children: hWndGraphDisplay, , <br>      hWndGraphLegend, and hWndGraphStatus. Therefore much of this file is <br>      merely calls to the appropriate functions for these children. <br> <br>      The graph window is responsible for the graph structure itself,  <br>      however. Conceptually this should be instance data for the graph <br>      window. Right now, however, there is only one window and only one <br>      graph structure. Nevertheless, we go through the GraphData(hWnd) <br>      function to get a pointer to the graph structure for the graph window. <br>       <br>*/ <br> <br> <br>//==========================================================================// <br>//                                  Includes                                // <br>//==========================================================================// <br> <br> <br>#include "perfmon.h" <br>#include "graph.h" <br>#include "grafdisp.h" <br>#include "legend.h" <br>#include "valuebar.h" <br>#include "utils.h"   // for WindowShow <br> <br> <br>//==========================================================================// <br>//                                  Constants                               // <br>//==========================================================================// <br> <br> <br>//=============================// <br>// Graph Class                 // <br>//=============================// <br> <br> <br>TCHAR   szGraphWindowClass[] = TEXT("PerfGraph") ; <br>#define dwGraphClassStyle           (CS_HREDRAW | CS_VREDRAW | CS_DBLCLKS) <br>#define iGraphClassExtra            (0) <br>#define iGraphWindowExtra           (0) <br>#define dwGraphWindowStyle          (WS_CHILD) <br> <br> <br> <br>//==========================================================================// <br>//                              Local Functions                             // <br>//==========================================================================// <br> <br> <br>void static OnCreate (HWND hWnd) <br>   {  // OnCreate <br>   hWndGraphDisplay = CreateGraphDisplayWindow (hWnd) ; <br>   hWndGraphLegend = CreateGraphLegendWindow (hWnd) ; <br>   hWndGraphStatus = CreateGraphStatusWindow (hWnd) ; <br>   }  // OnCreate <br> <br> <br>void static OnPaint (HWND hWnd) <br>   { <br>   HDC            hDC ; <br>   PAINTSTRUCT    ps ; <br> <br>   hDC = BeginPaint (hWnd, &amp;ps) ; <br>   EndPaint (hWnd, &amp;ps) ; <br>   } <br> <br> <br>void static OnSize (HWND hWnd, int xWidth, int yHeight) <br>   {  // OnSize <br>   SizeGraphComponents (hWnd) ; <br>   }  // OnSize <br> <br> <br>//==========================================================================// <br>//                              Message Handlers                            // <br>//==========================================================================// <br> <br> <br> <br>LRESULT APIENTRY GraphWndProc (HWND hWnd, <br>                               WORD wMsg, <br>                               DWORD wParam, <br>                               LONG lParam) <br>   {  // GraphWndProc <br>   BOOL           bCallDefProc ; <br>   LRESULT        lReturnValue ; <br> <br> <br>   bCallDefProc = FALSE ; <br>   lReturnValue = 0L ; <br> <br>   switch (wMsg) <br>      {  // switch <br>      case WM_CREATE: <br>         OnCreate (hWnd) ; <br>         break ; <br> <br>      case WM_LBUTTONDBLCLK: <br>         SendMessage (hWndMain, WM_LBUTTONDBLCLK, wParam, lParam) ; <br>         break ; <br> <br>      case WM_PAINT: <br>         OnPaint (hWnd) ; <br>         break ; <br> <br>      case WM_SIZE: <br>         OnSize (hWnd, LOWORD (lParam), HIWORD (lParam)) ; <br>         break ; <br> <br>      default: <br>         bCallDefProc = TRUE ; <br>      }  // switch <br> <br> <br>   if (bCallDefProc) <br>      lReturnValue = DefWindowProc (hWnd, wMsg, wParam, lParam) ; <br> <br>   return (lReturnValue); <br>   }  // GraphWndProc <br> <br> <br> <br>BOOL GraphInitializeApplication (void) <br>/* <br>   Note:          There is no background brush set for the MainWindow <br>                  class so that the main window is never erased. The <br>                  client area of MainWindow is always covered by one <br>                  of the view windows. If we erase it, it would just <br>                  flicker needlessly. <br>*/       <br>   {  // GraphInitializeApplication <br>   BOOL           bSuccess ; <br>   WNDCLASS       wc ; <br> <br>   //=============================// <br>   // Register GraphWindow class  // <br>   //=============================// <br> <br> <br>   wc.style         = dwGraphClassStyle ; <br>   wc.lpfnWndProc   = (WNDPROC) GraphWndProc ; <br>   wc.hInstance     = hInstance ; <br>   wc.cbClsExtra    = iGraphWindowExtra ; <br>   wc.cbWndExtra    = iGraphClassExtra ; <br>   wc.hIcon         = NULL ; <br>   wc.hCursor       = LoadCursor(NULL, IDC_ARROW) ; <br>   wc.hbrBackground = NULL ;                          // see note above <br>   wc.lpszMenuName  = NULL ; <br>   wc.lpszClassName = szGraphWindowClass ; <br> <br>   bSuccess = RegisterClass (&amp;wc) ; <br> <br> <br>   //=============================// <br>   // Register Child classes      // <br>   //=============================// <br> <br>   if (bSuccess) <br>      bSuccess = GraphDisplayInitializeApplication () ; <br> <br>   if (bSuccess) <br>      bSuccess = GraphLegendInitializeApplication () ; <br>    <br>   if (bSuccess) <br>      bSuccess = GraphStatusInitializeApplication () ; <br> <br>   return (bSuccess) ; <br>   }  // GraphInitializeApplication <br> <br> <br>HWND CreateGraphWindow (HWND hWndParent) <br>/* <br>   Effect:        Create the graph window. This window is a child of  <br>                  hWndMain and is a container for the graph data, <br>                  graph label, graph legend, and graph status windows. <br> <br>   Note:          We dont worry about the size here, as this window <br>                  will be resized whenever the main window is resized. <br> <br>*/ <br>   { <br>   return (CreateWindow (szGraphWindowClass,       // window class <br>                         NULL,                     // caption <br>                         dwGraphWindowStyle,       // style for window <br>                         0, 0,                     // initial position <br>                         0, 0,                     // initial size <br>                         hWndParent,               // parent <br>                         NULL,                     // menu <br>                         hInstance,               // program instance <br>                         NULL)) ;                  // user-supplied data                                               <br>   } <br> <br> <br>void SizeGraphComponents (HWND hWnd) <br>/* <br>   Effect:        Move and show the various components of the graph to <br>                  fill the size (xWidth x yHeight). Take into account <br>                  whether the user wants to show the legend or status <br>                  bars. Also take into account if we have room for these <br>                  items. <br> <br>   Internals:     If the user doesn't want the status or legend windows, <br>                  they aren't shown. Also, if the user wanted the status <br>                  window but not the legend window, the status window is <br>                  not shown. <br> <br>                  We may disregard the user's desire for the legend or <br>                  status bar if there is not room. In particular, a legend <br>                  window has a minimum width (LegendMinWidth ()) and a <br>                  minimum height (LegendMinHeight ()). These values are <br>                  fixed for a given session of perfmon. It also has a  <br>                  preferred height, which takes into consideration the  <br>                  size of the graph window and the number of items in <br>                  the legend. This value is returned by LegendHeight(). <br>       <br>                  We don't show the legend if its minimum height would <br>                  take up more than half the graph height. <br> <br>                  If we feel we don't have room for the legend, we don't <br>                  show the status window either. <br> <br>   See Also:      LegendMinWidth, LegendMinHeight, LegendHeight,  <br>                  ValuebarHeight. <br> <br>   Called By:     OnSize, any other function that may remove or add one <br>                  of the graph components. <br>*/ <br>   {  // SizeGraphComponents <br>   RECT           rectClient ; <br>   BOOL           bShowLegend ; <br>   BOOL           bShowStatus ; <br>   int            yStatusHeight ; <br>   int            yLegendHeight ; <br>   int            xWidth ; <br>   int            yHeight ; <br> <br>   GetClientRect (hWnd, &amp;rectClient) ; <br>   xWidth = rectClient.right - rectClient.left ; <br>   yHeight = rectClient.bottom - rectClient.top ; <br> <br>   // if the graph window has no size, neither will its children. <br>   if (!xWidth || !yHeight) <br>      return ; <br> <br>   //=============================// <br>   // Show the Legend Window?     // <br>   //=============================// <br> <br>   if (!pGraphs-&gt;gOptions.bLegendChecked) <br>      bShowLegend = FALSE ; <br>   else if (xWidth &lt; LegendMinWidth (hWndGraphLegend)) <br>      bShowLegend = FALSE ; <br>   else if (yHeight &lt; 5 * LegendMinHeight (hWndGraphLegend)) <br>      bShowLegend = FALSE ; <br>   else <br>      bShowLegend = TRUE ; <br> <br>   //=============================// <br>   // Show the Status Window?     // <br>   //=============================// <br> <br>   if (!pGraphs-&gt;gOptions.bStatusBarChecked) <br>      bShowStatus = FALSE ; <br>   else if (!bShowLegend) <br>      bShowStatus = FALSE ; <br>   else <br>      bShowStatus = TRUE ; <br> <br> <br>   yStatusHeight = bShowStatus ?  <br>                     ValuebarHeight (hWndGraphStatus) : 0 ; <br>   yLegendHeight = bShowLegend ?  <br>                     LegendHeight (hWndGraphLegend, yHeight) : 0 ; <br> <br> <br>   //=============================// <br>   // Update the status window    // <br>   //=============================// <br> <br>   if (bShowStatus) <br>      MoveWindow (hWndGraphStatus,  <br>                  0, yHeight - yStatusHeight - yLegendHeight, <br>                  xWidth, yStatusHeight, <br>                  TRUE) ; <br>   WindowShow (hWndGraphStatus, bShowStatus) ; <br> <br> <br>   //=============================// <br>   // Update the legend window    // <br>   //=============================// <br> <br>   if (bShowLegend) <br>      MoveWindow (hWndGraphLegend, <br>                  0, yHeight - yLegendHeight, <br>                  xWidth, yLegendHeight, <br>                  TRUE) ; <br>   WindowShow (hWndGraphLegend, bShowLegend) ; <br> <br> <br>   //=============================// <br>   // Update the display window   // <br>   //=============================// <br> <br>   MoveWindow (hWndGraphDisplay, <br>               0, 0, <br>               xWidth, yHeight - yStatusHeight - yLegendHeight, <br>               TRUE) ; <br>   SizeGraphDisplayComponents (hWndGraphDisplay) ; <br>   WindowInvalidate (hWndGraphDisplay) ; <br>   WindowShow (hWndGraphDisplay, TRUE) ; <br>   }  // SizeGraphComponents <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

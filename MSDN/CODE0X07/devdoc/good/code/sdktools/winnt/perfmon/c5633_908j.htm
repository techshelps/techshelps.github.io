<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FILEOPEN.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5653"></a>FILEOPEN.C</h2>
<pre><code>#include "perfmon.h" <br>#include "cderr.h" <br> <br>#include "alert.h"      // for OpenAlert <br>#include "fileutil.h"   // for FileOpen, FileRead <br>#include "grafdata.h"   // for OpenChart <br>#include "log.h"        // for OpenLog <br>#include "report.h"     // for OpenReport <br>#include "utils.h"      // for strempty <br>#include "perfmops.h"   // for OpenWorkspace <br>#include "pmhelpid.h"   // Help IDs <br>#include &lt;dlgs.h&gt;       // for pshHelp <br> <br>#define OptionsOFNStyle \ <br>   (OFN_HIDEREADONLY | OFN_SHOWHELP | OFN_OVERWRITEPROMPT | OFN_ENABLEHOOK) <br> <br>#define ExportOptionsOFNStyle                   \ <br>   (OFN_ENABLETEMPLATE | OFN_HIDEREADONLY |     \ <br>    OFN_SHOWHELP | OFN_ENABLEHOOK | OFN_OVERWRITEPROMPT) <br> <br>extern BOOL APIENTRY ExportOptionsHookProc (HWND hDlg, UINT iMessage,  <br>                                            WPARAM wParam, LPARAM lParam) ; <br> <br>BOOL APIENTRY FileOpenHookProc (HWND hDlg,  <br>                                UINT iMessage,  <br>                                WPARAM wParam,  <br>                                LPARAM lParam) <br>{ <br>   BOOL     bHandled = FALSE ; <br>    <br>   // only intercept the Help button and bring up our WinHelp data <br>   if (iMessage == WM_COMMAND &amp;&amp; wParam == pshHelp) <br>      { <br>      CallWinHelp (dwCurrentDlgID) ; <br>      bHandled = TRUE ; <br>      } <br>   else if (iMessage == WM_INITDIALOG) <br>      { <br>      WindowCenter (hDlg) ; <br>      bHandled = TRUE ; <br>      } <br> <br>   return (bHandled) ; <br>} <br> <br> <br> <br>BOOL FileOpen (HWND hWndParent, int nStringResourceID, LPTSTR lpInputFileName) <br>   { <br>   OPENFILENAME   ofn ; <br>   TCHAR          szFileSpec [FilePathLen] ; <br>   TCHAR          szFileTitle [FilePathLen] ; <br>   TCHAR          szDialogTitle [FilePathLen] ; <br>   HANDLE         hFile ; <br>   PERFFILEHEADER FileHeader ; <br>    <br>   TCHAR          aszOpenFilter[LongTextLen] ; <br>   int            StringLength ; <br>   BOOL           retCode ; <br>   LPTSTR         pFileName = NULL ; <br> <br>   if (strempty(lpInputFileName)) <br>      { <br> <br>      dwCurrentDlgID = HC_PM_idDlgFileOpen ; <br> <br>      // get the file extension strings <br>      LoadString (hInstance, nStringResourceID, aszOpenFilter, <br>         sizeof(aszOpenFilter) / sizeof(TCHAR)) ; <br>      StringLength = lstrlen (aszOpenFilter) + 1 ; <br>      LoadString (hInstance, nStringResourceID+1, <br>         &amp;aszOpenFilter[StringLength], <br>         sizeof(aszOpenFilter) / sizeof(TCHAR) - StringLength) ; <br>      StringLength += lstrlen (&amp;aszOpenFilter[StringLength]) + 1 ; <br> <br>#ifdef ADVANCED_PERFMON <br>      // get workspace file extension strings <br>      LoadString (hInstance, IDS_WORKSPACEFILE,  <br>         &amp;aszOpenFilter[StringLength], <br>         sizeof(aszOpenFilter) / sizeof(TCHAR) - StringLength) ; <br>      StringLength += lstrlen (&amp;aszOpenFilter[StringLength]) + 1 ; <br>      LoadString (hInstance, IDS_WORKSPACEFILEEXT, <br>         &amp;aszOpenFilter[StringLength], <br>         sizeof(aszOpenFilter) / sizeof(TCHAR) - StringLength) ; <br>      StringLength += lstrlen (&amp;aszOpenFilter[StringLength]) + 1; <br>#endif <br> <br>      // get all file extension strings <br>      LoadString (hInstance, IDS_ALLFILES,  <br>         &amp;aszOpenFilter[StringLength], <br>         sizeof(aszOpenFilter) / sizeof(TCHAR) - StringLength) ; <br>      StringLength += lstrlen (&amp;aszOpenFilter[StringLength]) + 1 ; <br>      LoadString (hInstance, IDS_ALLFILESEXT, <br>         &amp;aszOpenFilter[StringLength], <br>         sizeof(aszOpenFilter) / sizeof(TCHAR) - StringLength) ; <br>      StringLength += lstrlen (&amp;aszOpenFilter[StringLength]) ; <br> <br>      // setup the end strings <br>      aszOpenFilter[StringLength+1] = aszOpenFilter[StringLength+2] = TEXT('\0') ; <br> <br>      strclr (szFileSpec) ; <br>      strclr (szFileTitle) ; <br> <br>      StringLoad (IDS_FILEOPEN_TITLE, szDialogTitle) ; <br>      memset (&amp;ofn, 0, sizeof(OPENFILENAME)) ; <br>      ofn.lStructSize = sizeof(OPENFILENAME) ; <br>      ofn.hwndOwner = hWndParent ; <br>      ofn.hInstance = hInstance; <br>      ofn.lpstrTitle = szDialogTitle ; <br>      ofn.lpstrFilter = aszOpenFilter ; <br>      ofn.nFilterIndex = 1L ; <br> <br>      ofn.lpstrFile = szFileSpec; <br>      ofn.nMaxFile = sizeof(szFileSpec); <br>      ofn.lpstrFileTitle = szFileTitle; <br>      ofn.nMaxFileTitle = sizeof(szFileTitle); <br>      ofn.Flags = OFN_HIDEREADONLY | OFN_SHOWHELP | OFN_FILEMUSTEXIST | OFN_ENABLEHOOK ; <br>      ofn.lpfnHook = (LPOFNHOOKPROC) FileOpenHookProc ; <br> <br>      if (!GetOpenFileName(&amp;ofn)) <br>         { <br>         dwCurrentDlgID = 0 ; <br>         return (FALSE) ; <br>         } <br> <br>      dwCurrentDlgID = 0 ; <br> <br>      hFile = FileHandleOpen (szFileSpec) ; <br>      pFileName = szFileSpec ; <br> <br>      }  // NULL lpFileName <br> <br>   else <br>      { <br>      // open the input file <br>      hFile = FileHandleOpen (lpInputFileName) ; <br>      if (hFile &amp;&amp; hFile != INVALID_HANDLE_VALUE &amp;&amp; <br>          SearchPath (NULL, lpInputFileName, NULL, <br>            sizeof(szFileSpec)/sizeof(TCHAR) - 1, <br>            szFileSpec, &amp;pFileName)) <br>         { <br>         pFileName = szFileSpec ; <br>         } <br>      else <br>         { <br>         pFileName = NULL ; <br>         } <br>      } <br> <br>   if (!hFile || hFile == INVALID_HANDLE_VALUE) <br>      { <br>      return (FALSE) ; <br>      } <br> <br>   if (!FileRead (hFile, &amp;FileHeader, sizeof (FileHeader))) <br>      { <br>      CloseHandle (hFile) ; <br>      if (strempty(lpInputFileName)) <br>         { <br>         DlgErrorBox (hWndParent, ERR_BAD_SETTING_FILE, pFileName) ; <br>         } <br>      return (FALSE) ; <br>      } <br> <br> <br>   //=============================// <br>   // Chart File?                 // <br>   //=============================// <br> <br>   if (strsame (FileHeader.szSignature, szPerfChartSignature)) <br>      { <br>      retCode = OpenChart (hWndGraph, <br>                           hFile, <br>                           FileHeader.dwMajorVersion, <br>                           FileHeader.dwMinorVersion, <br>                           TRUE) ; <br>      if (retCode) <br>         { <br>         ChangeSaveFileName (pFileName, IDM_VIEWCHART) ; <br>         } <br>      else <br>         { <br>         goto ErrExit ; <br>         } <br>      return (retCode) ; <br>      } <br> <br>#ifdef ADVANCED_PERFMON <br>   //=============================// <br>   // Alert File?                 // <br>   //=============================// <br> <br>   if (strsame (FileHeader.szSignature, szPerfAlertSignature)) <br>      { <br>      retCode = OpenAlert (hWndAlert, <br>                           hFile, <br>                           FileHeader.dwMajorVersion, <br>                           FileHeader.dwMinorVersion, <br>                           TRUE) ; <br>      if (retCode) <br>         { <br>         ChangeSaveFileName (pFileName, IDM_VIEWALERT) ; <br>         } <br>      else <br>         { <br>         goto ErrExit ; <br>         } <br> <br>      return (retCode) ; <br>      } <br> <br> <br>   //=============================// <br>   // Log File?                   // <br>   //=============================// <br> <br>   if (strsame (FileHeader.szSignature, szPerfLogSignature)) <br>      { <br>      retCode = OpenLog (hWndLog, <br>                         hFile, <br>                         FileHeader.dwMajorVersion, <br>                         FileHeader.dwMinorVersion, <br>                         TRUE) ; <br>      if (retCode) <br>         { <br>         ChangeSaveFileName (pFileName, IDM_VIEWLOG) ; <br>         } <br>      else <br>         { <br>         goto ErrExit ; <br>         } <br> <br>      return (retCode) ; <br>      } <br> <br>   //=============================// <br>   // Report File?                // <br>   //=============================// <br> <br>   if (strsame (FileHeader.szSignature, szPerfReportSignature)) <br>      { <br>      retCode = OpenReport (hWndReport, <br>                            hFile, <br>                            FileHeader.dwMajorVersion, <br>                            FileHeader.dwMinorVersion, <br>                            TRUE) ; <br>      if (retCode) <br>         { <br>         ChangeSaveFileName (pFileName, IDM_VIEWREPORT) ; <br>         } <br>      else <br>         { <br>         goto ErrExit ; <br>         } <br> <br>      return (retCode) ; <br>      } <br> <br>   //=============================// <br>   // Workspace File?             // <br>   //=============================// <br> <br>   if (strsame (FileHeader.szSignature, szPerfWorkspaceSignature)) <br>      { <br>      retCode = OpenWorkspace (hFile, <br>                               FileHeader.dwMajorVersion, <br>                               FileHeader.dwMinorVersion) ; <br>      if (retCode) <br>         { <br>         ChangeSaveFileName (pFileName, IDM_WORKSPACE) ; <br>         return (TRUE) ; <br>         } <br>      else <br>         { <br>         goto ErrExit ; <br>         } <br>      } <br>#endif <br> <br>   //=============================// <br>   // Unknown file type           // <br>   //=============================// <br>   CloseHandle (hFile) ; <br> <br>ErrExit: <br> <br>   DlgErrorBox (hWndParent, ERR_BAD_SETTING_FILE, pFileName) ; <br>   return (FALSE) ; <br>   }  // FileOpen <br> <br> <br>BOOL FileGetName (HWND hWndParent, int nStringResourceID, LPTSTR lpFileName) <br>   { <br>   OPENFILENAME   ofn ; <br>   TCHAR          szFileSpec [FilePathLen] ; <br>   TCHAR          szFileTitle [FilePathLen] ; <br>   TCHAR          szDialogTitle [FilePathLen] ; <br>   TCHAR          aszOpenFilter[LongTextLen] ; <br>   int            StringLength ; <br> <br>   if (lpFileName) <br>      { <br> <br>      if (nStringResourceID != IDS_EXPORTFILE) <br>         { <br>         // get the file extension strings <br>         LoadString (hInstance, nStringResourceID, <br>            aszOpenFilter, <br>            sizeof(aszOpenFilter) / sizeof(TCHAR) ) ; <br>         StringLength = lstrlen (aszOpenFilter) + 1 ; <br>         LoadString (hInstance, nStringResourceID+1, <br>            &amp;aszOpenFilter[StringLength], <br>            sizeof(aszOpenFilter) / sizeof(TCHAR) - StringLength) ; <br> <br>         StringLength += lstrlen (&amp;aszOpenFilter[StringLength]) + 1 ; <br>         // get all file extension strings <br>         LoadString (hInstance, IDS_ALLFILES,  <br>            &amp;aszOpenFilter[StringLength], <br>            sizeof(aszOpenFilter) / sizeof(TCHAR) - StringLength) ; <br>         StringLength += lstrlen (&amp;aszOpenFilter[StringLength]) + 1 ; <br>         LoadString (hInstance, IDS_ALLFILESEXT, <br>            &amp;aszOpenFilter[StringLength], <br>            sizeof(aszOpenFilter) / sizeof(TCHAR) - StringLength) ; <br>         } <br>      else <br>         { <br>         // get the Export file extension based on the current delimiter <br>         int   FirstExtensionID, SecondExtensionID ; <br> <br>         if (pDelimiter == TabStr) <br>            { <br>            FirstExtensionID = IDS_EXPORTFILETSV ; <br>            SecondExtensionID = IDS_EXPORTFILE ; <br>            } <br>         else <br>            { <br>            FirstExtensionID = IDS_EXPORTFILE ; <br>            SecondExtensionID = IDS_EXPORTFILETSV ; <br>            } <br> <br>         LoadString (hInstance, FirstExtensionID, <br>            aszOpenFilter, <br>            sizeof(aszOpenFilter) / sizeof(TCHAR) ) ; <br>         StringLength = lstrlen (aszOpenFilter) + 1 ; <br>         LoadString (hInstance, FirstExtensionID+1, <br>            &amp;aszOpenFilter[StringLength], <br>            sizeof(aszOpenFilter) / sizeof(TCHAR) - StringLength) ; <br> <br>         StringLength += lstrlen (&amp;aszOpenFilter[StringLength]) + 1 ; <br>         // get all file extension strings <br>         LoadString (hInstance, SecondExtensionID,  <br>            &amp;aszOpenFilter[StringLength], <br>            sizeof(aszOpenFilter) / sizeof(TCHAR) - StringLength) ; <br>         StringLength += lstrlen (&amp;aszOpenFilter[StringLength]) + 1 ; <br>         LoadString (hInstance, SecondExtensionID+1, <br>            &amp;aszOpenFilter[StringLength], <br>            sizeof(aszOpenFilter) / sizeof(TCHAR) - StringLength) ; <br> <br>         } <br> <br>      // setup the end strings <br>      StringLength += lstrlen (&amp;aszOpenFilter[StringLength]) ; <br>      aszOpenFilter[StringLength+1] = aszOpenFilter[StringLength+2] = TEXT('\0') ; <br> <br>      strclr (szFileSpec) ; <br>      strclr (szFileTitle) ; <br> <br>      if (nStringResourceID == IDS_EXPORTFILE) <br>         { <br>         dwCurrentDlgID = HC_PM_idDlgFileExport ; <br>         StringLoad (IDS_EXPORTAS_TITLE, szDialogTitle) ; <br>         } <br>      else if (nStringResourceID == IDS_WORKSPACEFILE) <br>         { <br>         dwCurrentDlgID = HC_PM_idDlgFileSaveWorkSpace ; <br>         StringLoad (IDS_SAVEASW_TITLE, szDialogTitle) ; <br>         } <br>      else <br>         { <br>         dwCurrentDlgID = HC_PM_idDlgFileSaveAs ; <br>         StringLoad (IDS_SAVEAS_TITLE, szDialogTitle) ; <br>         } <br> <br>      memset (&amp;ofn, 0, sizeof(OPENFILENAME)) ; <br>      ofn.lStructSize = sizeof(OPENFILENAME) ; <br>      ofn.hwndOwner = hWndParent ; <br>      ofn.hInstance = hInstance; <br>      ofn.lpstrTitle = szDialogTitle ; <br>      ofn.lpstrFilter = aszOpenFilter ; <br>      ofn.nFilterIndex = 1L ; <br> <br>      ofn.lpstrFile = szFileSpec; <br>      ofn.nMaxFile = sizeof(szFileSpec); <br>      ofn.lpstrFileTitle = szFileTitle; <br>      ofn.nMaxFileTitle = sizeof(szFileTitle); <br> <br>      if (nStringResourceID == IDS_EXPORTFILE) <br>         { <br>         ofn.Flags = ExportOptionsOFNStyle ; <br>         ofn.lpfnHook = (LPOFNHOOKPROC) ExportOptionsHookProc ; <br>         ofn.lpTemplateName = idDlgExportOptions ; <br>         } <br>      else <br>         { <br>         ofn.Flags = OptionsOFNStyle ; <br>         ofn.lpfnHook = (LPOFNHOOKPROC) FileOpenHookProc ; <br>         } <br> <br>      if (!GetSaveFileName(&amp;ofn)) <br>         { <br>         dwCurrentDlgID = 0 ; <br>         return (FALSE) ; <br>         } <br>      dwCurrentDlgID = 0 ; <br>      } <br>   else <br>      { <br>      return (FALSE) ; <br>      } <br> <br>   lstrcpy (lpFileName, ofn.lpstrFile) ; <br> <br>   return (TRUE) ; <br>   } // FileGetName <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

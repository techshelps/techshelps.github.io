<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TYPEDEFS.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5712"></a>TYPEDEFS.H</h2>
<pre><code>//======================================// <br>// Options Data Type                    // <br>//======================================// <br> <br> <br>typedef struct OPTIONSSTRUCT <br>   {   <br>   BOOL           bMenubar ; <br>   BOOL           bToolbar ; <br>   BOOL           bStatusbar ; <br>   BOOL           bAlwaysOnTop ; <br>   } OPTIONS ; <br> <br> <br>//======================================// <br>// Basic "Derived" Types                // <br>//======================================// <br> <br> <br>typedef HANDLE HLIBRARY ; <br>typedef HANDLE HMEMORY ; <br>typedef HWND HDLG ; <br>typedef HWND HCONTROL ; <br>typedef VOID *LPMEMORY ; <br> <br> <br>//======================================// <br>// Perfmon-Specific Types               // <br>//======================================// <br> <br> <br>typedef PERF_DATA_BLOCK *PPERFDATA ; <br>typedef PERF_OBJECT_TYPE *PPERFOBJECT ; <br>typedef PERF_COUNTER_DEFINITION *PPERFCOUNTERDEF ; <br>typedef PERF_INSTANCE_DEFINITION *PPERFINSTANCEDEF ; <br> <br> <br> <br> <br> <br>    // This structure links together the Performance data for multiple <br>    // systems, each of which has some counter instance which the user <br>    // is interested in. <br> <br>typedef struct _COUNTERTEXT { <br>    struct  _COUNTERTEXT  *pNextTable; <br>    DWORD   dwLangId; <br>    DWORD   dwLastId; <br>    DWORD   dwCounterSize; <br>    DWORD   dwHelpSize; <br>    LPWSTR  *TextString; <br>    LPWSTR  HelpTextString; <br>} COUNTERTEXT; <br> <br>typedef COUNTERTEXT *PCOUNTERTEXT; <br> <br>// System states used mainly by Alert view to report system up/down <br>#define  SYSTEM_OK               0 <br>#define  SYSTEM_DOWN             1 <br>#define  SYSTEM_DOWN_RPT         2 <br>#define  SYSTEM_RECONNECT        3 <br>#define  SYSTEM_RECONNECT_RPT    4 <br> <br>typedef struct PERFSYSTEMSTRUCT <br>   { <br>   struct  PERFSYSTEMSTRUCT *pSystemNext; <br>   TCHAR   sysName[MAX_SYSTEM_NAME_LENGTH+1]; <br>   HKEY    sysDataKey; <br>   COUNTERTEXT CounterInfo; <br>   DWORD   FailureTime; <br>   LPTSTR  lpszValue; <br>   BOOL    bSystemNoLongerNeeded; <br>   BOOL    bSystemCounterNameSaved; <br> <br>   // the following used by perf data thread <br>   DWORD           dwThreadID ; <br>   HANDLE          hThread ; <br>   DWORD           StateData ; <br>   HANDLE          hStateDataMutex ; <br>   HANDLE          hPerfDataEvent ; <br>   PPERFDATA       pSystemPerfData ; <br> <br>   // mainly used by Alert to report system up/down    <br>   DWORD           dwSystemState ; <br> <br>   // system version <br>   DWORD           SysVersion ; <br> <br>   } PERFSYSTEM, *PPERFSYSTEM, **PPPERFSYSTEM ; <br> <br> <br>typedef struct _graph_options { <br>    BOOL    bLegendChecked ; <br>    BOOL    bMenuChecked ; <br>    BOOL    bLabelsChecked; <br>    BOOL    bVertGridChecked ; <br>    BOOL    bHorzGridChecked ; <br>    BOOL    bStatusBarChecked ; <br>    INT     iVertMax ; <br>    FLOAT   eTimeInterval ; <br>    INT     iGraphOrHistogram ; <br>    INT     GraphVGrid, <br>            GraphHGrid, <br>            HistVGrid, <br>            HistHGrid ; <br> <br>} GRAPH_OPTIONS ; <br> <br> <br> <br>//======================================// <br>// Line Data Type                       // <br>//======================================// <br> <br> <br>#define LineTypeChart            1 <br>#define LineTypeAlert            2 <br>#define LineTypeReport           3 <br> <br> <br> <br>typedef struct LINEVISUALSTRUCT <br>   { <br>   COLORREF       crColor ; <br>   int            iColorIndex ;     <br>    <br>   int            iStyle ; <br>   int            iStyleIndex ; <br> <br>   int            iWidth ; <br>   int            iWidthIndex ; <br>   } LINEVISUAL ; <br> <br>typedef LINEVISUAL *PLINEVISUAL ; <br> <br> <br>typedef struct _LINESTRUCT <br>   { <br>   struct  _LINESTRUCT             *pLineNext; <br>   int                             bFirstTime; <br>   int                             iLineType ; <br>   LPTSTR                          lnSystemName; <br> <br>   struct _PERF_OBJECT_TYPE        lnObject; <br>   LPTSTR                          lnObjectName; <br> <br>   struct _PERF_COUNTER_DEFINITION lnCounterDef; <br>   LPTSTR                          lnCounterName; <br> <br>   struct _PERF_INSTANCE_DEFINITION lnInstanceDef; <br>   LPTSTR                          lnInstanceName; <br> <br>   LPTSTR                          lnPINName; <br>   LPTSTR                          lnParentObjName; <br>   DWORD                           lnUniqueID;     // Of instance, if any <br> <br>   LONGLONG                        lnNewTime; <br>   LONGLONG                        lnOldTime; <br> <br>   LONGLONG                        lnOldTime100Ns ; <br>   LONGLONG                        lnNewTime100Ns ; <br> <br>   LONGLONG                        lnaCounterValue[2]; <br>   LONGLONG                        lnaOldCounterValue[2]; <br> <br>   DWORD                           lnCounterType; <br>   DWORD                           lnCounterLength; <br>   LONGLONG                        lnPerfFreq ; <br> <br>   LINEVISUAL                      Visual ; <br> <br> <br>   //=============================// <br>   // Chart-related fields        // <br>   //=============================// <br> <br>   HPEN                            hPen ; <br>   int                             iScaleIndex ;  <br>   FLOAT                          eScale; <br>   FLOAT                           FAR *lnValues; <br>   int                             *aiLogIndexes ; <br>   FLOAT                           lnMaxValue ; <br>   FLOAT                           lnMinValue ; <br>   FLOAT                           lnAveValue ; <br>   INT                             lnValidValues; <br> <br>   //=============================// <br>   // Alert-related fields        // <br>   //=============================// <br> <br>   HBRUSH                  hBrush ; <br>   BOOL                    bAlertOver ;         // over or under? <br>   FLOAT                   eAlertValue ;        // value to compare <br>   LPTSTR                  lpszAlertProgram ;   // program to run <br>   BOOL                    bEveryTime ;         // run every time or once? <br>   BOOL                    bAlerted ;           // alert happened on line? <br> <br> <br>   //=============================// <br>   // Report-related fields       // <br>   //=============================// <br>   int                     iReportColumn ; <br>   struct  _LINESTRUCT    *pLineCounterNext; <br>   int                     xReportPos ; <br>   int                     yReportPos ; <br>   }LINESTRUCT ; <br> <br> <br>typedef LINESTRUCT *PLINESTRUCT ; <br>typedef PLINESTRUCT PLINE ; <br>typedef PLINE *PPLINE ; <br> <br> <br>//======================================// <br>// DISKLINE data type                   // <br>//======================================// <br> <br>#define dwLineSignature    (MAKELONG ('L', 'i')) <br> <br>typedef struct DISKSTRINGSTRUCT <br>   {   <br>   DWORD          dwLength ; <br>   DWORD          dwOffset ; <br>   } DISKSTRING ; <br>typedef DISKSTRING *PDISKSTRING ; <br> <br> <br>typedef struct DISKLINESTRUCT <br>   { <br>   int            iLineType ; <br>   DISKSTRING     dsSystemName ; <br>   DISKSTRING     dsObjectName ; <br>   DISKSTRING     dsCounterName ; <br>   DISKSTRING     dsInstanceName ; <br>   DISKSTRING     dsPINName ; <br>   DISKSTRING     dsParentObjName ; <br>   DWORD          dwUniqueID ; <br>   LINEVISUAL     Visual ; <br>   int            iScaleIndex ; <br>   FLOAT          eScale ; <br>   BOOL           bAlertOver ; <br>   FLOAT          eAlertValue ; <br>   DISKSTRING     dsAlertProgram ; <br>   BOOL           bEveryTime ; <br>   } DISKLINE ; <br> <br>typedef DISKLINE *PDISKLINE ; <br> <br> <br> <br>typedef FLOAT DFN (PLINESTRUCT); <br>typedef DFN   *PDFN; <br> <br>typedef struct _TIMELINESTRUCT <br>{ <br>    INT ppd ;                           // Pixels Per DataPoint <br>    INT rppd ;                          // Remaining Pixels Per DataPoint <br>    INT xLastTime ;                     // X coordinate of last time line. <br>    INT iValidValues ;                  // High water mark for valid data. <br>}TIMELINESTRUCT; <br> <br> <br> <br> <br>//======================================// <br>// Graph Data Type                      // <br>//======================================// <br> <br> <br>#define iGraphMaxTics   26 <br> <br> <br> <br>// This structure describes the characteristics of one visual <br>// graph. It is linked for the day when multiple graphs are <br>// displayed within one instance of the application. <br> <br>typedef struct _GRAPHSTRUCT <br>   { <br>   BOOL           bManualRefresh ; <br>   HWND           hWnd ; <br>   BOOL           bModified ; <br> <br>   PPERFSYSTEM       pSystemFirst; <br>   PLINESTRUCT    pLineFirst; <br> <br>   int            xNumTics ; <br>   int            yNumTics ; <br>   int            axTics [iGraphMaxTics] ; <br>   int            ayTics [iGraphMaxTics] ; <br> <br>   RECT           rectHorzScale ; <br>   RECT           rectVertScale ; <br>   RECT           rectData ; <br>   HRGN           hGraphRgn ; <br> <br>   INT            gMaxValues; <br>   INT            gKnownValue; <br> <br>   LINEVISUAL     Visual ; <br> <br>   DWORD          gInterval; <br>   GRAPH_OPTIONS  gOptions; <br>   TIMELINESTRUCT gTimeLine; <br> <br>   PPOINT         pptDataPoints ; <br>   SYSTEMTIME     *pDataTime ; <br> <br>   HPEN           hGridPen ; <br>   HANDLE         hbRed ; <br>   BOOL           HighLightOnOff ; <br>   } GRAPHSTRUCT ; <br>typedef GRAPHSTRUCT *PGRAPHSTRUCT; <br>// minor version 3 to support alert, report, log intervals in msec <br>#define ChartMajorVersion    1 <br>#define ChartMinorVersion    3 <br> <br> <br>typedef struct DISKCHARTSTRUCT <br>   { <br>   DWORD          dwNumLines ; <br>   INT            gMaxValues; <br>   LINEVISUAL     Visual ; <br>   GRAPH_OPTIONS  gOptions ; <br>   BOOL           bManualRefresh ; <br>   OPTIONS        perfmonOptions ; <br>   } DISKCHART ; <br> <br> <br>typedef struct _SAVESTRUCT <br>{ <br>    INT version; <br>    INT type; <br>    INT iPerfmonView ; <br>    INT graph_offset; <br>    INT alert_offset; <br>    INT log_offset; <br>}SAVESTRUCT; <br>typedef SAVESTRUCT *PSAVESTRUCT; <br> <br>typedef struct _GRAPH_COUNTERS <br>{ <br>    INT sys_name_len; <br>    INT sys_name_offset; <br>    INT obj_name_len; <br>    INT obj_name_offset; <br>    INT cnt_name_len; <br>    INT cnt_name_offset; <br>    INT inst_name_len; <br>    INT inst_name_offset; <br>    INT PIN_name_len; <br>    INT PIN_name_offset; <br>    INT POB_name_len; <br>    INT POB_name_offset; <br>    DWORD inst_unique_id; <br>    DWORD counter_type; <br>    DWORD counter_length; <br>    int   iScaleIndex ; <br>    FLOAT eScale; <br>    LINEVISUAL    Visual ; <br>    INT updated; <br>}GRAPH_COUNTERS; <br> <br>typedef struct _SAVGRAFSTRUCT <br>{ <br>    INT preference; <br>    INT MaxValues; <br>    RECT GraphArea; <br>    GRAPH_OPTIONS options; <br>    INT num_counters; <br>    GRAPH_COUNTERS counters[1]; <br>}SAVGRAFSTRUCT; <br>typedef SAVGRAFSTRUCT *PSAVGRAFSTRUCT; <br> <br> <br>typedef struct _SAVLOGSTRUCT <br>{ <br>    DWORDlogInterval; <br>    BOOL    logActive; <br>    LPTSTRlogFileName; <br>    DWORDlogFileSize; <br>}SAVLOGSTRUCT; <br>typedef SAVLOGSTRUCT *PSAVLOGSTRUCT; <br> <br> <br>#define DEF_GRAPH_INTERVAL  1000        // milliseconds <br>#define LINE_GRAPH          1 <br>#define BAR_GRAPH           2 <br>#define DEF_GRAPH_VMAX      100 <br>#define SUCCESS             0 <br>#define MIN_TIMER_INTERVAL 50 <br>#define GRAPH_TIMER_ID      1 <br> <br> <br>#define NO_VALUES_YET            -1 <br>        // initial value for index to known and drawn values <br>#define MIN_NMAXVALUES           10 <br>        // minimum number of values that a graph needs to be displayed ( &gt;1 ) <br>#define DX_CALIBRATION_LEFT      1 <br>        // space between calibration value and left window edge <br>#define DX_LEGEND_RIGHT          1 <br>        // space between right window edge and legend <br>#define DY_AXIS_TOP              0 <br>        // space to allow at top of graph <br>#define DY_AXIS_BOTTOM           0 <br>        // space to allow at bottom of graph <br>#define LG_TO_CALIBRATION_RATIO  5 <br>        // width of calibration values * this number can't exceed screen width <br>#define LG_TO_LEGEND_RATIO       2 <br>        // width of legend * this number can't exceed screen width <br> <br> <br>// LINEGRAPH <br>#define DEFAULT_VAL_BOTTOM        0 <br>#define DEFAULT_DVAL_AXISHEIGHT   100 <br>#define DEFAULT_MAX_VALUES        100 <br>#define GRAPH_INWARD_EDGE           5 <br>#define GRAPH_LEFT_PAD              5 <br>#define GRAPH_DOWNWARD_EDGE         5 <br>#define ROOM_FOR_LEGEND            40 <br> <br>// LINEGRAPH DISP <br>#define DEFAULT_F_DISPLAY_LEGEND  TRUE <br>#define DEFAULT_F_DISPLAY_CALIBRATION TRUE <br> <br>#define NONE_LEN            MAX_SYSTEM_NAME_LENGTH + 1 <br> <br> <br> <br>//======================================// <br>// Log/Playback/Alert Status IDs        // <br>//======================================// <br> <br> <br>#define iPMStatusClosed      100 <br>#define iPMStatusPaused      200 <br>#define iPMStatusCollecting  300 <br>#define iPMStatusPlaying     400 <br> <br> <br>//======================================// <br>// Log Data Type                        // <br>//======================================// <br> <br> <br>typedef struct _LOGENTRYSTRUCT <br>   { <br>   DWORD          ObjectTitleIndex ; <br>   TCHAR          szComputer [MAX_SYSTEM_NAME_LENGTH + 1] ; <br>   TCHAR          szObject [PerfObjectLen + 1] ; <br>   BOOL           bSaveCurrentName ; <br>   struct  _LOGENTRYSTRUCT *pNextLogEntry ; <br>   } LOGENTRY ; <br> <br>typedef LOGENTRY *PLOGENTRY ; <br> <br> <br>typedef struct LOGSTRUCT <br>   { <br>   int            iStatus ; <br>   BOOL           bManualRefresh ; <br>   BOOL           bModified ; <br> <br>   PPERFSYSTEM    pSystemFirst; <br>   TCHAR          szFilePath [FilePathLen + 1] ; <br>   HANDLE         hFile ; <br>   long           lIndexBlockOffset ; <br>   int            iIndex ; <br>   PPERFDATA      pLogData ; <br>   DWORD          dwDetailLevel ; <br>   long           lFileSize ; <br>   DWORD          iIntervalMSecs ; <br>   int            xCol1Width ; <br>   PLOGENTRY      pLogEntryFirst ; <br> <br>   // the following is used for saving system counter names into a  <br>   // log file.  They are reset every the user changes log files. <br>   BOOL           bSaveCounterName ; <br>   LPTSTR         pBaseCounterName ; <br>   long           lBaseCounterNameSize ; <br>   long           lBaseCounterNameOffset ; <br> <br>   // this is used for checking system time when re-logging. <br>   // this is to avoid log data not in chronological order. <br>   SYSTEMTIME     LastLogTime ; <br> <br>   // the following is used for wait for data event handles <br>   HANDLE            *lpHandles ; <br>   int               NumberOfHandles ; <br> <br>//==========================================================================// <br>//                                   Macros                                 // <br>//==========================================================================// <br> <br> <br> <br>   } LOG ; <br> <br>typedef LOG *PLOG ; <br> <br> <br>//======================================// <br>// Log File Data Types                  // <br>//======================================// <br> <br> <br>#define LogFileSignatureLen      6 <br>#define LogFileBlockMaxIndexes   100 <br> <br> <br>#define LogFileSignature         TEXT("Loges") <br>#define LogFileVersion           2 <br>#define LogFileRevision          0 <br> <br> <br>#define LogFileIndexData         0x01 <br>#define LogFileIndexBookmark     0x02 <br>#define LogFileIndexNextBlock    0x04 <br>#define LogFileIndexEOF          0x08 <br>#define LogFileIndexCounterName  0x010 <br> <br> <br>typedef struct LOGHEADERSTRUCT <br>   {  // LOGHEADER <br>   TCHAR          szSignature [LogFileSignatureLen] ; <br>   int            iLength ; <br>   WORD           wVersion ; <br>   WORD           wRevision ; <br>   long           lBaseCounterNameOffset ; <br>   }  LOGHEADER ; <br> <br>typedef LOGHEADER *PLOGHEADER ; <br> <br> <br>typedef struct LOGINDEXSTRUCT <br>   {  // LOGINDEX <br>   UINT           uFlags ; <br>   SYSTEMTIME     SystemTime ; <br>   long           lDataOffset ; <br>   int            iSystemsLogged ; <br>   } LOGINDEX ; <br> <br>typedef LOGINDEX *PLOGINDEX ; <br> <br> <br>#define LogIndexSignatureLen  7 <br>#define LogIndexSignature     TEXT("Index ") <br>#define LogIndexSignature1    "Perfmon Index" <br> <br>typedef struct LOGFILEINDEXBLOCKSTRUCT <br>   { <br>   TCHAR          szSignature [LogIndexSignatureLen] ; <br>   int            iNumIndexes ; <br>   LOGINDEX       aIndexes [LogFileBlockMaxIndexes] ; <br>   DWORD          lNextBlockOffset ; <br>   } LOGINDEXBLOCK ; <br> <br>typedef LOGINDEXBLOCK *PLOGINDEXBLOCK ; <br> <br> <br>typedef struct LOGPOSITIONSTRUCT <br>   { <br>   PLOGINDEXBLOCK pIndexBlock ; <br>   int            iIndex ; <br>   int            iPosition ; <br>   } LOGPOSITION ; <br> <br>typedef LOGPOSITION *PLOGPOSITION ; <br> <br> <br>//======================================// <br>// Bookmark Data Type                   // <br>//======================================// <br> <br> <br>#define BookmarkCommentLen    256 <br> <br>typedef struct BOOKMARKSTRUCT <br>   { <br>   struct BOOKMARKSTRUCT *pBookmarkNext; <br>   SYSTEMTIME     SystemTime ; <br>   TCHAR          szComment [BookmarkCommentLen] ; <br>   int            iTic ; <br>   } BOOKMARK, *PBOOKMARK, **PPBOOKMARK ; <br> <br>typedef struct _LOGFILECOUNTERNAME <br>   { <br>   TCHAR          szComputer [MAX_SYSTEM_NAME_LENGTH] ; <br>   DWORD          dwLastCounterId ; <br>   DWORD          dwLangId; <br>   long           lBaseCounterNameOffset ; <br>   long           lCurrentCounterNameOffset ; <br>   long           lMatchLength ; <br>   long           lUnmatchCounterNames ; <br>   } LOGFILECOUNTERNAME, *PLOGFILECOUNTERNAME, **PPLOGFILECOUNTERNAME ; <br> <br>typedef struct COUNTERNAMESTRUCT <br>   { <br>   struct COUNTERNAMESTRUCT *pCounterNameNext ; <br>   LOGFILECOUNTERNAME       CounterName ; <br>   LPTSTR                   pRemainNames ; <br>   } LOGCOUNTERNAME, *PLOGCOUNTERNAME ; <br> <br>typedef struct PLAYBACKLOGSTRUCT <br>   { <br>   LPTSTR         szFilePath ; <br>   LPTSTR         szFileTitle ; <br>//   TCHAR          szFilePath [FilePathLen + 1] ; <br>//   TCHAR          szFileTitle [FilePathLen + 1] ; <br>   int            iStatus ; <br>   HANDLE         hFile ; <br>   PLOGHEADER     pHeader ; <br>   HANDLE         hMapHandle ; <br>   int            iTotalTics ; <br>   int            iSelectedTics ; <br>   LOGPOSITION    BeginIndexPos ; <br>   LOGPOSITION    EndIndexPos ; <br>   LOGPOSITION    StartIndexPos ; <br>   LOGPOSITION    StopIndexPos ; <br>   PBOOKMARK      pBookmarkFirst ; <br>   LPTSTR         pBaseCounterNames ; <br>   long           lBaseCounterNameSize ; <br>   long           lBaseCounterNameOffset ; <br>   PLOGCOUNTERNAME   pLogCounterNameFirst ; <br>   } PLAYBACKLOG ; <br> <br>//=====================================// <br>// Log File Counter Name data type     // <br>//=====================================// <br> <br> <br>// minor version 3 to support alert, report, log intervals in msec <br>// minor version 5 to support storing Log file name in setting <br>//  and start logging after reading the file. <br>#define LogMajorVersion    1 <br>#define LogMinorVersion    5 <br> <br> <br>typedef struct DISKLOGSTRUCT <br>   { <br>   DWORD          dwNumLines ; <br>   DWORD          dwIntervalSecs ; <br>   BOOL           bManualRefresh ; <br>   OPTIONS        perfmonOptions ; <br>   TCHAR          LogFileName[260] ; <br>   } DISKLOG ; <br> <br> <br> <br> <br>//======================================// <br>// Alert Data Type                      // <br>//======================================// <br> <br> <br>typedef struct ALERTSTRUCT <br>   { <br>   HWND           hWnd ; <br>   HWND           hAlertListBox ; <br>   int            iStatus ; <br>   BOOL           bManualRefresh ; <br>   BOOL           bModified ; <br> <br> <br>   PPERFSYSTEM    pSystemFirst ; <br>   PLINESTRUCT    pLineFirst ; <br> <br>   DWORD          iIntervalMSecs ; <br> <br>   LINEVISUAL     Visual ; <br> <br>   HFONT          hFontItems ; <br>   int            yItemHeight ; <br> <br>   int            xColorWidth ; <br>   int            xDateWidth ; <br>   int            xTimeWidth ; <br>   int            xNumberWidth ; <br>   int            xConditionWidth ; <br> <br>   // used in controlling the horz scrollbar <br>   int            xTextExtent ;      <br>    <br>   BOOL           bSwitchToAlert ; <br>   BOOL           bNetworkAlert ; <br>   BOOL           bEventLog ; <br>   TCHAR          MessageName [16] ; <br> <br>   // used for the network alert thread <br>   HANDLE         hNetAlertThread ; <br>   DWORD          dwNetAlertThreadID ; <br> <br>   // option to turn alert legend on/off <br>   BOOL           bLegendOn ; <br>   } ALERT ; <br> <br>typedef ALERT *PALERT ; <br> <br> <br> <br>#define AlertMajorVersion    1 <br> <br>// minor version 2 to support Alert msg name <br>// minor version 3 to support alert, report, log intervals in msec <br>// minor version 4 to support alert event logging <br>// minor version 6 to support alert misc options <br>#define AlertMinorVersion    6 <br> <br> <br>typedef struct DISKALERTSTRUCT <br>   { <br>   LINEVISUAL     Visual ; <br>   DWORD          dwNumLines ; <br>   DWORD          dwIntervalSecs ; <br>   BOOL           bManualRefresh ; <br>   BOOL           bSwitchToAlert ; <br>   BOOL           bNetworkAlert ; <br>   TCHAR          MessageName [16] ; <br>   OPTIONS        perfmonOptions ; <br>   DWORD          MiscOptions ; <br>   } DISKALERT ; <br> <br> <br>//======================================// <br>// Report Data Type                     // <br>//======================================// <br> <br> <br>typedef struct COLUMNGROUPSTRUCT <br>   { <br>   struct COLUMNGROUPSTRUCT  *pColumnGroupNext ; <br>   struct COLUMNGROUPSTRUCT  *pColumnGroupPrevious ; <br>   struct OBJECTGROUPSTRUCT  *pParentObject ; <br>   LPTSTR         lpszParentName ; <br>   LPTSTR         lpszInstanceName ; <br>   int            ParentNameTextWidth ; <br>   int            InstanceNameTextWidth ; <br>   int            xPos ; <br>   int            xWidth ; <br>   int            yFirstLine ; <br>   int            ColumnNumber ;  // start from 0 <br>   } COLUMNGROUP ; <br> <br> <br>typedef COLUMNGROUP *PCOLUMNGROUP ; <br> <br> <br>typedef struct COUNTERGROUPSTRUCT <br>   { <br>   struct COUNTERGROUPSTRUCT *pCounterGroupNext ; <br>   struct COUNTERGROUPSTRUCT *pCounterGroupPrevious ; <br>   struct OBJECTGROUPSTRUCT  *pParentObject ; <br>   DWORD          dwCounterIndex ; <br>   PLINE          pLineFirst ; <br>   int            yLine ; <br>   int            xWidth ; <br>   } COUNTERGROUP ; <br> <br>typedef COUNTERGROUP *PCOUNTERGROUP ; <br> <br> <br>typedef struct OBJECTGROUPSTRUCT <br>   { <br>   struct OBJECTGROUPSTRUCT  *pObjectGroupNext ; <br>   struct OBJECTGROUPSTRUCT  *pObjectGroupPrevious ; <br>   struct SYSTEMGROUPSTRUCT  *pParentSystem ; <br>   LPTSTR         lpszObjectName ; <br>   PCOUNTERGROUP  pCounterGroupFirst ; <br>   PCOLUMNGROUP   pColumnGroupFirst ; <br>   int            yFirstLine ; <br>   int            yLastLine ; <br>   int            xWidth ; <br>   } OBJECTGROUP ; <br> <br>typedef OBJECTGROUP *POBJECTGROUP ; <br> <br> <br>typedef struct SYSTEMGROUPSTRUCT <br>   {  // SystemGroup <br>   struct SYSTEMGROUPSTRUCT *pSystemGroupNext ; <br>   struct SYSTEMGROUPSTRUCT *pSystemGroupPrevious ; <br>   LPTSTR         lpszSystemName ; <br>   POBJECTGROUP   pObjectGroupFirst ; <br>   int            yFirstLine ; <br>   int            yLastLine ; <br>   int            xWidth ; <br>   } SYSTEMGROUP ; <br> <br>typedef  SYSTEMGROUP   *PSYSTEMGROUP ; <br> <br>enum REPORT_ITEM_TYPE <br>   {  <br>   REPORT_TYPE_NOTHING,  <br>   REPORT_TYPE_SYSTEM, <br>   REPORT_TYPE_OBJECT, <br>   REPORT_TYPE_COLUMN, <br>   REPORT_TYPE_COUNTER, <br>   REPORT_TYPE_LINE <br>   } ; <br> <br>typedef union REPORT_ITEM_TAG <br>   { <br>   PSYSTEMGROUP   pSystem ; <br>   POBJECTGROUP   pObject ; <br>   PCOLUMNGROUP   pColumn ; <br>   PCOUNTERGROUP  pCounter ; <br>   PLINE          pLine ; <br>   } REPORT_ITEM ; <br> <br> <br>typedef struct REPORTSTRUCT <br>   {  // REPORT <br>   HWND           hWnd ; <br>   int            iStatus ; <br>   BOOL           bManualRefresh ; <br>   BOOL           bModified ; <br> <br>   TCHAR          szTitle [120] ; <br>   SYSTEMTIME     SystemTime ; <br> <br>   PPERFSYSTEM    pSystemFirst ; <br>   PLINE          pLineFirst ; <br> <br>   PSYSTEMGROUP   pSystemGroupFirst ; <br> <br>   REPORT_ITEM       CurrentItem ; <br>   enum  REPORT_ITEM_TYPE  CurrentItemType ; <br> <br>   LINEVISUAL     Visual ; <br> <br> <br>   DWORD          iIntervalMSecs ; <br>   FLOAT          eTimeInterval ; <br>   HFONT          hFont ; <br>   HFONT          hFontHeaders ; <br>   int            yLineHeight ; <br> <br>   int            xMaxCounterWidth ; <br>   int            xValueWidth ; <br> <br>   int            xWidth ; <br>   int            yHeight ; <br>   } REPORT ; <br> <br>typedef REPORT *PREPORT ;  <br> <br>// minor version 3 to support alert, report, log intervals in msec <br>#define ReportMajorVersion    1 <br>#define ReportMinorVersion    3 <br> <br> <br>typedef struct DISKREPORTSTRUCT <br>   { <br>   LINEVISUAL     Visual ; <br>   DWORD          dwNumLines ; <br>   DWORD          dwIntervalSecs ; <br>   BOOL           bManualRefresh ; <br>   OPTIONS        perfmonOptions ; <br>   } DISKREPORT ; <br> <br> <br>//======================================// <br>// File Header Type                     // <br>//======================================// <br> <br> <br>#define PerfSignatureLen  20 <br> <br>#define szPerfChartSignature     TEXT("PERF CHART") <br>#define szPerfAlertSignature     TEXT("PERF ALERT") <br>#define szPerfLogSignature       TEXT("PERF LOG") <br>#define szPerfReportSignature    TEXT("PERF REPORT") <br>#define szPerfWorkspaceSignature TEXT("PERF WORKSPACE") <br> <br> <br>typedef struct PERFFILEHEADERSTRUCT <br>   {  // PERFFILEHEADER <br>   TCHAR          szSignature [PerfSignatureLen] ; <br>   DWORD          dwMajorVersion ; <br>   DWORD          dwMinorVersion ; <br>   BYTE           abyUnused [100] ; <br>   } PERFFILEHEADER ; <br> <br>#define WorkspaceMajorVersion    1 <br> <br>// minor version 1 to support window placement data <br>// minor version 2 to support alert msg name <br>// minor version 3 to support alert, report, log intervals in msec <br>// minor version 4 to support alert eventlog <br>// minor version 5 to support log file name in log setting <br>// minor version 6 to support alert misc options <br>#define WorkspaceMinorVersion    6 <br> <br>typedef struct DISKWORKSPACESTRUCT <br>   { <br>   INT               iPerfmonView ; <br>   DWORD             ChartOffset ; <br>   DWORD             AlertOffset ; <br>   DWORD             LogOffset ; <br>   DWORD             ReportOffset ; <br>   WINDOWPLACEMENT   WindowPlacement ;    <br>   } DISKWORKSPACE ; <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

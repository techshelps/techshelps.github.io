<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>REGISTRY.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5693"></a>REGISTRY.C</h2>
<pre><code>/***************************************************************************** <br> * <br> *  Registry.c - This module handles requests for registry data, and <br> *               reading/writing of window placement data <br> * <br> *  Microsoft Confidential <br> *  Copyright 1992 - 1998 Microsoft Corporation <br> * <br> * <br> ****************************************************************************/ <br> <br>#include &lt;stdio.h&gt; <br> <br>#include "perfmon.h" <br>#include "registry.h" <br>#include "utils.h"       <br>#include "sizes.h" <br> <br>static TCHAR PerfmonNamesKey[] = TEXT("SOFTWARE\\Microsoft\\PerfMon") ; <br>static TCHAR WindowKeyName[] = TEXT("WindowPos") ; <br>static TCHAR TimeOutKeyName[] = TEXT("DataTimeOut") ; <br> <br>VOID LoadLineGraphSettings(PGRAPHSTRUCT lgraph) <br>{ <br>   lgraph-&gt;gMaxValues = DEFAULT_MAX_VALUES; <br>   lgraph-&gt;gOptions.bLegendChecked = DEFAULT_F_DISPLAY_LEGEND; <br>   lgraph-&gt;gOptions.bLabelsChecked = DEFAULT_F_DISPLAY_CALIBRATION; <br> <br>   return; <br>} <br> <br>VOID LoadRefreshSettings(PGRAPHSTRUCT lgraph) <br>{ <br>   lgraph-&gt;gInterval = DEF_GRAPH_INTERVAL; <br>   lgraph-&gt;gOptions.eTimeInterval = (FLOAT) lgraph-&gt;gInterval / (FLOAT) 1000.0 ; <br>   return; <br>} <br> <br> <br>BOOL LoadMainWindowPlacement (HWND hWnd) <br>   { <br>   WINDOWPLACEMENT   WindowPlacement ;  <br>   TCHAR             szWindowPlacement [TEMP_BUF_LEN] ; <br>   HKEY              hKeyNames ; <br>   DWORD             Size; <br>   DWORD             Type; <br>   DWORD             Status; <br>   DWORD             localDataTimeOut; <br>   STARTUPINFO       StartupInfo ; <br> <br> <br>   GetStartupInfo (&amp;StartupInfo) ; <br> <br>   DataTimeOut = DEFAULT_DATA_TIMEOUT ; <br> <br>   Status = RegOpenKeyEx(HKEY_CURRENT_USER, PerfmonNamesKey, <br>      0L, KEY_READ, &amp;hKeyNames) ; <br> <br>   if (Status == ERROR_SUCCESS) <br>      { <br>      // get the data timeout  value <br>      Size = sizeof(localDataTimeOut) ; <br> <br>      Status = RegQueryValueEx(hKeyNames, TimeOutKeyName, NULL, <br>         &amp;Type, (LPBYTE)&amp;localDataTimeOut, &amp;Size) ; <br>      if (Status == ERROR_SUCCESS &amp;&amp; Type == REG_DWORD) <br>         { <br>         DataTimeOut = localDataTimeOut ; <br>         } <br> <br>      // get the window placement data <br>      Size = sizeof(szWindowPlacement) ; <br> <br>      Status = RegQueryValueEx(hKeyNames, WindowKeyName, NULL, <br>         &amp;Type, (LPBYTE)szWindowPlacement, &amp;Size) ; <br>      RegCloseKey (hKeyNames) ; <br> <br>      if (Status == ERROR_SUCCESS) <br>         { <br> <br>         int            iNumScanned ; <br>    <br>         iNumScanned = swscanf (szWindowPlacement, <br>            TEXT("%d %d %d %d %d %d %d %d %d"), <br>            &amp;WindowPlacement.showCmd, <br>            &amp;WindowPlacement.ptMinPosition.x, <br>            &amp;WindowPlacement.ptMinPosition.y, <br>            &amp;WindowPlacement.ptMaxPosition.x, <br>            &amp;WindowPlacement.ptMaxPosition.y, <br>            &amp;WindowPlacement.rcNormalPosition.left, <br>            &amp;WindowPlacement.rcNormalPosition.top, <br>            &amp;WindowPlacement.rcNormalPosition.right, <br>            &amp;WindowPlacement.rcNormalPosition.bottom) ; <br>          <br>         if (StartupInfo.dwFlags == STARTF_USESHOWWINDOW) <br>            { <br>            WindowPlacement.showCmd = StartupInfo.wShowWindow ; <br>            } <br>         WindowPlacement.length = sizeof(WINDOWPLACEMENT); <br>         WindowPlacement.flags = WPF_SETMINPOSITION; <br>         if (!SetWindowPlacement (hWnd, &amp;WindowPlacement)) { <br>            return (FALSE); <br>         } <br>         bPerfmonIconic = IsIconic(hWnd) ; <br>         return (TRUE) ; <br>         } <br>      } <br> <br>   if (Status != ERROR_SUCCESS) <br>      { <br>      // open registry failed, use input from startup info or Max as default <br> <br>      if (StartupInfo.dwFlags == STARTF_USESHOWWINDOW) <br>         { <br>         ShowWindow (hWnd, StartupInfo.wShowWindow) ; <br>         } <br>      else <br>         { <br>         ShowWindow (hWnd, SW_SHOWMAXIMIZED) ; <br>         } <br>      return (FALSE) ; <br>      } <br>   } <br> <br> <br> <br>BOOL SaveMainWindowPlacement (HWND hWnd) <br>   { <br>   WINDOWPLACEMENT   WindowPlacement ; <br>   TCHAR             ObjectType [2] ; <br>   TCHAR             szWindowPlacement [TEMP_BUF_LEN] ; <br>   HKEY              hKeyNames = 0 ; <br>   DWORD             Size ; <br>   DWORD             Status ; <br>   DWORD             dwDisposition ; <br>  <br>   ObjectType [0] = TEXT(' ') ; <br>   ObjectType [1] = TEXT('\0') ; <br> <br>   WindowPlacement.length = sizeof(WINDOWPLACEMENT); <br>   if (!GetWindowPlacement (hWnd, &amp;WindowPlacement)) { <br>      return FALSE; <br>   } <br>   TSPRINTF (szWindowPlacement, TEXT("%d %d %d %d %d %d %d %d %d"), <br>            WindowPlacement.showCmd,  <br>            WindowPlacement.ptMinPosition.x, <br>            WindowPlacement.ptMinPosition.y, <br>            WindowPlacement.ptMaxPosition.x, <br>            WindowPlacement.ptMaxPosition.y, <br>            WindowPlacement.rcNormalPosition.left, <br>            WindowPlacement.rcNormalPosition.top, <br>            WindowPlacement.rcNormalPosition.right, <br>            WindowPlacement.rcNormalPosition.bottom) ; <br> <br>   // try to create it first <br>   Status = RegCreateKeyEx(HKEY_CURRENT_USER, PerfmonNamesKey, 0L, <br>      ObjectType, REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS | KEY_WRITE, <br>      NULL, &amp;hKeyNames, &amp;dwDisposition) ; <br> <br>   // if it has been created before, then open it <br>   if (dwDisposition == REG_OPENED_EXISTING_KEY) <br>      { <br>      Status = RegOpenKeyEx(HKEY_CURRENT_USER, PerfmonNamesKey, 0L, <br>         KEY_WRITE, &amp;hKeyNames) ; <br>      } <br> <br>   // we got the handle, now store the window placement data <br>   if (Status == ERROR_SUCCESS) <br>      { <br>      Size = (lstrlen (szWindowPlacement) + 1) * sizeof (TCHAR) ; <br> <br>      Status = RegSetValueEx(hKeyNames, WindowKeyName, 0, <br>         REG_SZ, (LPBYTE)szWindowPlacement, Size) ; <br> <br>      if (dwDisposition != REG_OPENED_EXISTING_KEY &amp;&amp; Status == ERROR_SUCCESS) <br>         { <br>         // now add the DataTimeOut key for the first time <br>         Status = RegSetValueEx(hKeyNames, TimeOutKeyName, 0, <br>            REG_DWORD, (LPBYTE)&amp;DataTimeOut, sizeof(DataTimeOut)) ; <br>         } <br> <br>      RegCloseKey (hKeyNames) ; <br> <br>      } <br> <br>   return (Status == ERROR_SUCCESS) ; <br>   } <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

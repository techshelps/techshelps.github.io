<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>UTILS.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5715"></a>UTILS.H</h2>
<pre><code>//==========================================================================// <br>//                                  Constants                               // <br>//==========================================================================// <br> <br> <br>#define ThreeDPad          2 <br>#define NOCHANGE           -1 <br> <br>#define MENUCLOSING        (0xFFFF0000) <br> <br>#define WM_DLGSETFOCUS     (WM_USER + 0x201) <br>#define WM_DLGKILLFOCUS    (WM_USER + 0x202) <br> <br> <br> <br>//==========================================================================// <br>//                                   Macros                                 // <br>//==========================================================================// <br> <br> <br>#define PinInclusive(x, lo, hi)                       \ <br>   (max (lo, min (x, hi))) <br> <br> <br>#define PinExclusive(x, lo, hi)                       \ <br>   (max ((lo) + 1, min (x, (hi) - 1))) <br> <br> <br>#define BoolEqual(a, b)                               \ <br>   ((a == 0) == (b == 0)) <br> <br> <br>//=============================// <br>// Window Instance Accessors   // <br>//=============================// <br> <br>#define WindowParent(hWnd)                            \ <br>   ((HWND) GetWindowLong (hWnd, GWL_HWNDPARENT)) <br> <br>#define WindowID(hWnd)                                \ <br>   GetWindowLong (hWnd, GWL_ID) <br> <br>#define WindowInstance(hWnd)                          \ <br>   GetWindowWord (hWnd, GWW_HINSTANCE) <br> <br>#define WindowStyle(hWnd)                             \ <br>   GetWindowLong (hWnd, GWL_STYLE) <br> <br>#define WindowSetStyle(hWnd, lStyle)                  \ <br>   SetWindowLong (hWnd, GWL_STYLE, lStyle) <br> <br>#define WindowExStyle(hWnd)                           \ <br>   GetWindowLong (hWnd, GWL_EXSTYLE) <br> <br>#define WindowSetID(hWnd, wID)                        \ <br>   SetWindowLong (hWnd, GWL_ID, wID) <br> <br> <br>// All modeless dialogs need to be dispatched separately in the WinMain <br>// message loop, but only if the dialog exists. <br> <br> <br>#define ModelessDispatch(hDlg, lpMsg)                 \ <br>   (hDlg ? IsDialogMessage (hDlg, lpMsg) : FALSE) <br> <br> <br>#define strclr(szString)                              \ <br>   (szString [0] = TEXT('\0')) <br> <br> <br>#define strempty(lpszString)                          \ <br>   (!(lpszString) || !(lpszString[0])) <br> <br>#define pstrsame(lpsz1, lpsz2)                        \ <br>   ((!lpsz1 &amp;&amp; !lpsz2) || (lpsz1 &amp;&amp; lpsz2 &amp;&amp; strsame (lpsz1, lpsz2))) <br> <br>#define pstrsamei(lpsz1, lpsz2)                        \ <br>   ((!lpsz1 &amp;&amp; !lpsz2) || (lpsz1 &amp;&amp; lpsz2 &amp;&amp; strsamei (lpsz1, lpsz2))) <br> <br>#define StringLoad(wID, szText)                       \ <br>   (LoadString (hInstance, wID,                       \ <br>    szText, sizeof (szText) - sizeof(TCHAR))) <br> <br> <br>#define WindowInvalidate(hWnd)                        \ <br>   (InvalidateRect (hWnd, NULL, TRUE)) <br> <br> <br>#define WindowShow(hWnd, bShow)                       \ <br>   (ShowWindow (hWnd, (bShow) ? SW_SHOW : SW_HIDE)) <br> <br> <br>#define MenuCheck(hMenu, wID, bCheck)                 \ <br>   (CheckMenuItem (hMenu, wID, (bCheck) ?             \ <br>     (MF_BYCOMMAND | MF_CHECKED) : (MF_BYCOMMAND | MF_UNCHECKED))) <br> <br>#define DeleteFont(hFont)                             \ <br>   (DeleteObject (hFont)) <br> <br>#define DeleteBitmap(hBitmap)                         \ <br>   (DeleteObject (hBitmap)) <br> <br>#define DialogControl(hDlg, wControlID)               \ <br>   GetDlgItem (hDlg, wControlID) <br> <br> <br>#define DialogSetInt(hDlg, wControlID, iValue)        \ <br>   (SetDlgItemInt (hDlg, wControlID, iValue, TRUE)) <br> <br> <br>#define DialogText(hDlg, wControlID, szText)          \ <br>   (GetDlgItemText (hDlg, wControlID, szText, sizeof (szText) / sizeof(TCHAR) - 1)) <br> <br>#define DialogInt(hDlg, wControlID)                   \ <br>   (GetDlgItemInt (hDlg, wControlID, NULL, TRUE)) <br> <br>#define strsame(szText1, szText2)                     \ <br>   (!lstrcmp (szText1, szText2)) <br> <br>#define strsamei(szText1, szText2)                     \ <br>   (!lstrcmpi (szText1, szText2)) <br> <br>#define strnsame(szText1, szText2, iLen)              \ <br>   (!lstrncmp (szText1, szText2, iLen)) <br> <br> <br>#define CreateScreenDC()                              \ <br>   CreateDC (TEXT("DISPLAY"), NULL, NULL, NULL) <br> <br> <br> <br>#define RectContract(lpRect, xAmt, yAmt)              \ <br>   {                                                  \ <br>   (lpRect)-&gt;left += (xAmt) ;                         \ <br>   (lpRect)-&gt;top += (yAmt) ;                          \ <br>   (lpRect)-&gt;right -= (xAmt) ;                        \ <br>   (lpRect)-&gt;bottom -= (yAmt) ;                       \ <br>   } <br> <br>#define IsBW(hDC)                                     \ <br>   (DeviceNumColors (hDC) &lt;= 2) <br> <br>#ifdef KEEP_PRINT <br>#define IsPrinterDC(hDC)                              \ <br>   (GetDeviceCaps (hDC, TECHNOLOGY) != DT_RASDISPLAY) <br>#else <br>#define IsPrinterDC(hDC)                              \ <br>   (FALSE) <br>#endif <br> <br>#define VertInchPixels(hDC, iNumerator, iDenominator) \ <br>   ((iNumerator * GetDeviceCaps (hDC, LOGPIXELSY)) / iDenominator) <br> <br> <br>#define HorzInchPixels(hDC, iNumerator, iDenominator) \ <br>   ((iNumerator * GetDeviceCaps (hDC, LOGPIXELSX)) / iDenominator) <br> <br> <br>#define VertPointPixels(hDC, iPoints)                 \ <br>   ((iPoints * GetDeviceCaps (hDC, LOGPIXELSY)) / 72) <br> <br> <br> <br>#define SimulateButtonPush(hDlg, wControlID)          \ <br>   (PostMessage (hDlg, WM_COMMAND,                    \ <br>                 (WPARAM) MAKELONG (wControlID, BN_CLICKED),  \ <br>                 (LPARAM) DialogControl (hDlg, wControlID))) <br> <br> <br>// convert an unicode string to OEM string <br>#define ConvertUnicodeStr(pOemStr, pUnicodeStr)   \ <br>   CharToOemBuff(pUnicodeStr, pOemStr, lstrlen(pUnicodeStr) + 1) <br> <br>#define CallWinHelp(ContextID)   \ <br>   WinHelp(hWndMain, pszHelpFile, HELP_CONTEXT, ContextID) ; <br> <br>//==========================================================================// <br>//                             Exported Functions                           // <br>//==========================================================================// <br> <br>void Fill (HDC hDC, <br>           DWORD rgbColor, <br>           LPRECT lpRect) ; <br> <br>void ScreenRectToClient (HWND hWnd, <br>                         LPRECT lpRect) ; <br> <br>int TextWidth (HDC hDC, LPTSTR lpszText) ; <br> <br> <br>void ThreeDConcave (HDC hDC, <br>                    int x1, int y1,  <br>                    int x2, int y2, <br>                    BOOL bFace) ; <br> <br> <br>void ThreeDConvex (HDC hDC, <br>                   int x1, int y1,  <br>                   int x2, int y2) ; <br> <br> <br>void ThreeDConcave1 (HDC hDC, <br>                     int x1, int y1,  <br>                     int x2, int y2) ; <br> <br> <br>void ThreeDConvex1 (HDC hDC, <br>                   int x1, int y1,  <br>                   int x2, int y2) ; <br> <br> <br>int _cdecl mike (TCHAR *szFormat, ...) ; <br> <br>int _cdecl DlgErrorBox (HWND hDlg, UINT id, ...) ; <br> <br>int _cdecl mike1 (TCHAR *szFormat, ...) ; <br>int _cdecl mike2 (TCHAR *szFormat, ...) ; <br> <br>int FontHeight (HDC hDC,  <br>                 BOOL bIncludeLeading) ; <br> <br> <br>int TextAvgWidth (HDC hDC, <br>                  int iNumChars) ; <br> <br> <br> <br>void WindowCenter (HWND hWnd) ; <br> <br> <br> <br>BOOL DialogMove (HDLG hDlg, <br>                 WORD wControlID, <br>                 int xPos,  <br>                 int yPos, <br>                 int xWidth, <br>                 int yHeight) ; <br> <br> <br>int DialogWidth (HDLG hDlg,  <br>                 WORD wControlID) ; <br> <br> <br>int DialogXPos (HDLG hDlg, <br>                WORD wControlID) ; <br> <br>int DialogYPos (HDLG hDlg, <br>                WORD wControlID) ; <br> <br> <br>void DialogShow (HDLG hDlg, <br>                 WORD wID, <br>                 BOOL bShow) ; <br> <br> <br>BOOL _cdecl DialogSetText (HDLG hDlg, <br>                           WORD wControlID, <br>                           WORD wStringID, <br>                           ...) ; <br>#if 0 <br>BOOL _cdecl DialogSetString (HDLG hDlg, <br>                             WORD wControlID, <br>                             LPTSTR lpszFormat, <br>                             ...) ; <br>#endif <br>#define DialogSetString(hDlg, wControlID, lpszFormat)  \ <br>   SetDlgItemText (hDlg, wControlID, lpszFormat) <br> <br>LPTSTR LongToCommaString (LONG lNumber, <br>                         LPTSTR lpszText) ; <br> <br> <br>BOOL MenuSetPopup (HWND hWnd, <br>                   int iPosition, <br>                   WORD  wControlID, <br>                   LPTSTR lpszResourceID) ; <br> <br>void DialogEnable (HDLG hDlg, <br>                   WORD wID, <br>                   BOOL bEnable) ; <br> <br> <br>LPTSTR FileCombine (LPTSTR lpszFileSpec, <br>                   LPTSTR lpszFileDirectory, <br>                   LPTSTR lpszFileName) ; <br> <br>LPTSTR ExtractFileName (LPTSTR pFileSpec) ; <br> <br>int CBAddInt (HWND hWndCB, <br>              int iValue) ; <br> <br>FLOAT DialogFloat (HDLG hDlg,  <br>                   WORD wControlID, <br>                   BOOL *pbOK) ; <br> <br> <br>LPTSTR StringAllocate (LPTSTR lpszText1) ; <br> <br> <br>int DivRound (int iNumerator, int iDenominator) ; <br> <br> <br> <br>BOOL MenuEnableItem (HMENU hMenu, <br>                     WORD wID, <br>                     BOOL bEnable) ; <br> <br> <br> <br>void DrawBitmap (HDC hDC, <br>                 HBITMAP hBitmap, <br>                 int xPos, <br>                 int yPos, <br>                 LONG  lROPCode) ; <br> <br>void BitmapDimemsion (HBITMAP hBitmap, int *pHeight, int *pWidth) ; <br> <br> <br>void WindowResize (HWND hWnd, <br>                   int xWidth, <br>                   int yHeight) ; <br> <br> <br>int WindowHeight (HWND hWnd) ; <br> <br> <br> <br>void WindowSetTopmost (HWND hWnd, BOOL bTopmost) ; <br> <br> <br>void WindowEnableTitle (HWND hWnd, BOOL bTitle) ; <br> <br> <br>void Line (HDC hDC, <br>           HPEN hPen, <br>           int x1, int y1, <br>           int x2, int y2) ; <br> <br> <br> <br>#define HLine(hDC, hPen, x1, x2, y)          \ <br>   Line (hDC, hPen, x1, y, x2, y) ; <br> <br> <br>#define VLine(hDC, hPen, x, y1, y2)          \ <br>   Line (hDC, hPen, x, y1, x, y2) ; <br> <br> <br>int DialogHeight (HDLG hDlg,  <br>                  WORD wControlID) ; <br> <br> <br> <br>void DialogSetFloat (HDLG hDlg, <br>                     WORD wControlID, <br>                     FLOAT eValue) ; <br> <br>void DialogSetInterval (HDLG hDlg, <br>                        WORD wControlID, <br>                        int  IntervalMSec ) ; <br> <br>int MessageBoxResource (HWND hWndParent, <br>                        WORD wTextID, <br>                        WORD wTitleID, <br>                        UINT uiStyle) ; <br> <br>void WindowPlacementToString (PWINDOWPLACEMENT pWP,  <br>                              LPTSTR lpszText) ; <br> <br>void StringToWindowPlacement (LPTSTR lpszText, <br>                              PWINDOWPLACEMENT pWP) ; <br> <br>DWORD MenuIDToHelpID (DWORD MenuID) ; <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ADDLOG.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5635"></a>ADDLOG.C</h2>
<pre><code><br>//==========================================================================// <br>//                                  Includes                                // <br>//==========================================================================// <br> <br>#include "perfmon.h" <br>#include "utils.h" <br>#include "log.h" <br>#include "pmemory.h"    // for MemoryXXX (malloc-like) routines <br>#include "perfdata.h" <br>#include "perfmops.h" <br>#include "system.h"     // for SystemGet <br>#include "playback.h"   // for PlayingBackLog &amp; DataFromIndexPosition <br>#include "pmhelpid.h"   // Help IDs <br> <br>//==========================================================================// <br>//                               External Data                                // <br>//==========================================================================// <br> <br>extern HWND          hWndLogEntries ; <br> <br>BOOL                 ComputerChange ; <br>static   PPERFDATA   pPerfData ; <br> <br> <br>//==========================================================================// <br>//                              Local Functions                             // <br>//==========================================================================// <br> <br> <br>BOOL /* static */ LogComputerChanged (HDLG hDlg) <br>   {  // LogComputerChanged <br>   PLOG           pLog ; <br>   HWND           hWndObjects ; <br>   PPERFSYSTEM    pSysInfo; <br>   DWORD          iObjectType ; <br>   DWORD          iObjectNum ; <br> <br>   pLog = LogData (hDlg) ; <br>   hWndObjects = DialogControl (hDlg, IDD_ADDLOGOBJECT) ; <br> <br>   if (!pPerfData) <br>      { <br>      LBReset (hWndObjects) ; <br>      return FALSE ; <br>      } <br> <br>   SetHourglassCursor() ; <br> <br>   pSysInfo = GetComputer (hDlg, <br>                           IDD_ADDLOGCOMPUTER, <br>                           TRUE, <br>                           &amp;pPerfData, <br>                           &amp;pLog-&gt;pSystemFirst) ; <br> <br>   if (!pPerfData || !pSysInfo) <br>      { <br>      LBReset (hWndObjects) ; <br>      SetArrowCursor() ; <br>      return FALSE ; <br>      } <br>   else <br>      { <br>      LBLoadObjects (hWndObjects, <br>                     pPerfData,  <br>                     pSysInfo,  <br>                     pLog-&gt;dwDetailLevel,  <br>                     NULL, <br>                     FALSE) ; <br> <br>      iObjectNum = (DWORD) LBNumItems (hWndObjects) ; <br>      for (iObjectType = 0 ; <br>           iObjectType &lt; iObjectNum ; <br>           iObjectType++) <br>         {  // for <br>         LBSetSelection (hWndObjects, iObjectType) ; <br>         }  // for <br> <br>      } <br> <br>   ComputerChange = FALSE ; <br>    <br>   SetArrowCursor() ; <br> <br>   return TRUE ; <br>   }  // LogComputerChanged <br> <br> <br>void /*static*/ OnLogDestroy (HDLG hDlg) <br>   {  // OnLogDestroy <br> <br>   dwCurrentDlgID = 0 ; <br> <br>   if (!PlayingBackLog ()) <br>      MemoryFree (pPerfData) ; <br> <br>   bAddLineInProgress = FALSE ; <br>   }  // OnLogDestroy <br>  <br> <br>//==========================================================================// <br>//                              Message Handlers                            // <br>//==========================================================================// <br> <br> <br>void /* static */ OnInitAddLogDialog (HDLG hDlg) <br>   {  // OnInitAddLogDialog <br>   TCHAR          szRemoteComputerName[MAX_COMPUTERNAME_LENGTH + 3] ; <br>   int            iIndex ; <br>   PLOGENTRY      pLogEntry ; <br>   LPTSTR         pComputerName ; <br> <br>   bAddLineInProgress = TRUE ; <br>   if (PlayingBackLog()) <br>      { <br>      pPerfData = DataFromIndexPosition (&amp;(PlaybackLog.StartIndexPos), NULL) ; <br>      GetPerfComputerName(pPerfData, szRemoteComputerName); <br>      DialogSetString (hDlg, IDD_ADDLOGCOMPUTER, szRemoteComputerName); <br>      } <br>   else <br>      { <br>      pPerfData = MemoryAllocate (STARTING_SYSINFO_SIZE) ; <br> <br>//Try to use computer specified on command line (if any), otherwise local computer <br>      pComputerName = CmdLineComputerName[0] ? <br>         CmdLineComputerName : <br>         LocalComputerName ; <br> <br>      iIndex = LBSelection (hWndLogEntries) ; <br>      if (iIndex != LB_ERR) <br>         { <br>         pLogEntry = (PLOGENTRY) LBData(hWndLogEntries, iIndex) ; <br>    <br>         if (pLogEntry &amp;&amp; pLogEntry != (PLOGENTRY)LB_ERR) <br>            { <br>            pComputerName = pLogEntry-&gt;szComputer ; <br>            } <br>         } <br>       <br>      DialogSetString (hDlg, IDD_ADDLOGCOMPUTER, pComputerName) ; <br>      } <br> <br>   LogComputerChanged (hDlg) ; <br> <br>   DialogEnable (hDlg, IDD_ADDLOGOBJECTTEXT, TRUE) ; <br>   DialogEnable (hDlg, IDD_ADDLOGOBJECT, TRUE) ; <br> <br>   WindowCenter (hDlg) ; <br> <br>   dwCurrentDlgID = HC_PM_idDlgEditAddToLog ; <br> <br>   }  // OnInitAddLogDialog <br> <br> <br>void /* static */ OnLogComputer (HDLG hDlg) <br>/* <br>   Effect:        Put up the select Domain/Computer dialog. Allow the user <br>                  to select the computer. Check for user entering a domain <br>                  instead. Place the selected computer in the readonly  <br>                  edit box. <br>*/ <br>   {  // OnLogComputer <br>   TCHAR          szComputer [MAX_SYSTEM_NAME_LENGTH + 1] ; <br> <br>   if (ChooseComputer (hDlg, szComputer)) <br>      { <br>      DialogSetString (hDlg, IDD_ADDLOGCOMPUTER, szComputer) ; <br>      LogComputerChanged (hDlg) ; <br>      }  // if <br>   }  // OnLogComputer <br> <br> <br> <br>void /* static */ OnAddToLog (HDLG hDlg) <br>/* <br>   Effect:        Perform all actions needed when the user clicks on <br>                  the add button. In particular, determine if the required <br>                  fields of the dialog have valid values. If so, go ahead <br>                  and add a LOGENTRY record in the log. If the computer  <br>                  being logged is not already logged, add a LOGSYSTEMENTRY  <br>                  as well. <br> <br>   Assert:        We have valid values for computer and object, since we <br>                  always control these fields. <br>*/ <br>   {  // OnAddToLog <br>   TCHAR          szComputer [MAX_SYSTEM_NAME_LENGTH + 1] ; <br>   TCHAR          szObjectType [PerfObjectLen + 1] ; <br>   DWORD          iObjectType ; <br>   DWORD          iObjectNum ; <br>   HWND           hWndObjectTypes ; <br>   PPERF_OBJECT_TYPE    pObject ; <br>   PLOG           pLog ; <br> <br>   pLog = LogData (hWndLog) ; <br> <br>   DialogText (hDlg, IDD_ADDLOGCOMPUTER, szComputer) ; <br> <br>   hWndObjectTypes = DialogControl(hDlg, IDD_ADDLOGOBJECT) ; <br> <br>   iObjectNum = (DWORD) LBNumItems (hWndObjectTypes) ; <br> <br>   LBSetRedraw (hWndLogEntries, FALSE) ; <br>    <br>   for (iObjectType = 0 ; <br>        iObjectType &lt; iObjectNum ; <br>        iObjectType++) <br>      {  // for <br>      // NOTE: for now, we don't check for duplicate lines <br>      if (LBSelected (hWndObjectTypes, iObjectType)) <br>         {  // if <br>         LBString (hWndObjectTypes, iObjectType, szObjectType) ; <br>         pObject = (PPERF_OBJECT_TYPE) LBData (hWndObjectTypes, iObjectType) ; <br> <br>         // eliminate duplicates here <br>         if (LogFindEntry(szComputer, pObject-&gt;ObjectNameTitleIndex) == <br>             LOG_ENTRY_NOT_FOUND) <br>            { <br>            LogAddEntry (hWndLogEntries, <br>                         szComputer, <br>                         szObjectType, <br>                         pObject-&gt;ObjectNameTitleIndex, <br>                         FALSE) ; <br>            } <br>         }  // if <br>      }  // for <br> <br>   LBSetRedraw (hWndLogEntries, TRUE) ; <br> <br>   DialogSetText (hDlg, IDD_ADDLOGDONE, IDS_DONE) ; <br>    <br>   if (pLog-&gt;iStatus == iPMStatusCollecting) <br>      { <br>      LogWriteSystemCounterNames (hWndLog, pLog) ; <br>      } <br>   }  // OnAddToLog <br> <br> <br> <br>int FAR WINAPI AddLogDlgProc (HWND hDlg, WORD msg,  <br>                              WPARAM wParam, LONG lParam) <br>   {  // AddLogDlg <br>   switch(msg) <br>      { <br>      case WM_INITDIALOG: <br>         OnInitAddLogDialog (hDlg) ; <br>         SetFocus (DialogControl (hDlg, IDD_ADDLOGADD)) ; <br>         return(FALSE); <br> <br>      case WM_COMMAND: <br> <br>         switch(LOWORD(wParam)) <br>            { <br>            case IDD_CANCEL: <br>               EndDialog(hDlg,0); <br>               return(TRUE); <br> <br>            case IDD_OK: <br>            case IDD_ADDLOGADD: <br> <br>               if (ComputerChange) <br>                  { <br>                  TCHAR    szComputer [MAX_SYSTEM_NAME_LENGTH + 3] ; <br> <br>                  DialogText (hDlg, IDD_ADDLOGCOMPUTER, szComputer) ; <br>                  LogComputerChanged (hDlg) ; <br>                  } <br>               else <br>                  { <br>                  SetHourglassCursor() ; <br>                  OnAddToLog (hDlg) ; <br>                  SetArrowCursor() ; <br>                  } <br>               break ; <br> <br>            case IDD_ADDLOGDONE: <br>               EndDialog (hDlg, 0) ; <br>               break ; <br> <br>            case IDD_ADDLOGELLIPSES: <br>               SetHourglassCursor() ; <br>               OnLogComputer (hDlg) ; <br>               SetArrowCursor() ; <br>               break ; <br> <br> <br>            case IDD_ADDLOGCOMPUTER: <br>               if (HIWORD (wParam) == EN_UPDATE) <br>                  { <br>                  ComputerChange = TRUE ; <br>                  } <br>               break ; <br> <br>            case IDD_ADDLOGHELP: <br>               CallWinHelp (dwCurrentDlgID) ; <br>               break ; <br> <br>            case IDD_ADDLOGOBJECT: <br>               if (ComputerChange) <br>                  { <br>                  TCHAR    szComputer [MAX_SYSTEM_NAME_LENGTH + 3] ; <br> <br>                  DialogText (hDlg, IDD_ADDLOGCOMPUTER, szComputer) ; <br>                  LogComputerChanged (hDlg) ; <br>                  } <br>               break ; <br> <br>            default: <br>               break ; <br>            } <br>         break; <br> <br>      case WM_DESTROY: <br>         OnLogDestroy (hDlg) ; <br>         break ; <br> <br>      default: <br>         break; <br>      } <br> <br>   return (FALSE); <br>   }  // AddLogDlgProc <br> <br> <br> <br>BOOL AddLog (HWND hWndParent) <br>   {  // AddLog <br>   if (DialogBox (hInstance, idDlgAddLog,  <br>                  hWndParent, (DLGPROC) AddLogDlgProc)) <br>      {  // if <br>      return (TRUE) ; <br>      }  // if <br>   return (FALSE) ; <br>   }  // AddLog </code></pre>
<p>&nbsp;</p></body>
</HTML>

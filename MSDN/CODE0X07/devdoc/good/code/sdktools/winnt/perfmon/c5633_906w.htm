<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DIALOGS.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5648"></a>DIALOGS.C</h2>
<pre><code>/***************************************************************************** <br> * <br> *  Dialogs.c - This module handles the Menu and Dialog user interactions. <br> * <br> *  Microsoft Confidential <br> *  Copyright 1992 - 1998 Microsoft Corporation <br> * <br> ****************************************************************************/ <br> <br>#include &lt;stdio.h&gt; <br>#include &lt;wchar.h&gt;   // for swscanf <br> <br>#include "perfmon.h" <br>#include "perfmops.h"      // for ConvertDecimalPoint <br> <br>#include "alert.h"     // for SetAlertTimer, AlertData <br>#include "graph.h" <br>#include "cderr.h" <br>#include "utils.h" <br>#include "playback.h"  // for PlayingBackLog <br>#include "grafdisp.h"  // for ToggleGraphRefresh <br>#include "pmhelpid.h"  // Help IDs <br> <br> <br>BOOL          LocalManualRefresh ; <br> <br> <br>/***************************************************************************/ <br>BOOL FAR PASCAL GraphOptionDlg(HWND hDlg, WORD msg, DWORD wParam, LONG lParam) <br>/***************************************************************************/ <br>{ <br>static GRAPH_OPTIONS goLocalCopy ; <br> <br>INT            iTimeMilliseconds ; <br>TCHAR          szBuff[MiscTextLen] ; <br>PGRAPHSTRUCT   lgraph; <br> <br>   lParam ; <br>   lgraph = pGraphs; <br> <br>   switch(msg) <br>      { <br> <br>      case WM_INITDIALOG: <br> <br>         dwCurrentDlgID = HC_PM_idDlgOptionChart ; <br> <br>         // Init the Radio button, Check boxes and text fields. <br> <br>         goLocalCopy.iGraphOrHistogram = <br>            lgraph-&gt;gOptions.iGraphOrHistogram ; <br>         if (lgraph-&gt;gOptions.iGraphOrHistogram == LINE_GRAPH) <br>            CheckRadioButton(hDlg, ID_GRAPH, ID_HISTOGRAM, ID_GRAPH) ; <br>         else <br>            CheckRadioButton(hDlg, ID_GRAPH, ID_HISTOGRAM, ID_HISTOGRAM) ; <br> <br>         CheckDlgButton(hDlg, ID_LEGEND, lgraph-&gt;gOptions.bLegendChecked) ; <br>         if (!(lgraph-&gt;gOptions.bLegendChecked)) <br>            { <br>            // can't display valuebar w/o legend <br>            DialogEnable (hDlg, IDD_CHARTOPTIONSVALUEBAR, FALSE) ; <br>            } <br> <br>         CheckDlgButton(hDlg, ID_LABELS, lgraph-&gt;gOptions.bLabelsChecked) ; <br>         CheckDlgButton(hDlg, ID_VERT_GRID, lgraph-&gt;gOptions.bVertGridChecked) ; <br>         CheckDlgButton(hDlg, ID_HORZ_GRID, lgraph-&gt;gOptions.bHorzGridChecked) ; <br>         CheckDlgButton(hDlg, IDD_CHARTOPTIONSVALUEBAR, <br>            lgraph-&gt;gOptions.bStatusBarChecked) ; <br> <br>         TSPRINTF(szBuff, TEXT("%d"), lgraph-&gt;gOptions.iVertMax) ; <br>         SendDlgItemMessage(hDlg, ID_VERT_MAX, WM_SETTEXT, 0, (LONG) szBuff) ; <br> <br>         TSPRINTF(szBuff, TEXT("%3.3f"), lgraph-&gt;gOptions.eTimeInterval) ; <br>         ConvertDecimalPoint (szBuff) ; <br>         SendDlgItemMessage(hDlg, IDD_CHARTOPTIONSINTERVAL, WM_SETTEXT, 0, (LONG) szBuff) ; <br> <br>         // Pickup a local copy of the Graph Options. <br> <br>         goLocalCopy = lgraph-&gt;gOptions ; <br>         LocalManualRefresh = lgraph-&gt;bManualRefresh ; <br> <br>         if (PlayingBackLog()) <br>            { <br>            DialogEnable (hDlg, IDD_CHARTOPTIONSPERIODIC, FALSE) ; <br>            DialogEnable (hDlg, IDD_CHARTOPTIONSUPDATETEXT, FALSE) ; <br>            DialogEnable (hDlg, IDD_CHARTOPTIONSMANUALREFRESH, FALSE) ; <br>            } <br>         else <br>            { <br>            CheckRadioButton (hDlg, <br>               IDD_CHARTOPTIONSMANUALREFRESH, <br>               IDD_CHARTOPTIONSPERIODIC, <br>               LocalManualRefresh ? IDD_CHARTOPTIONSMANUALREFRESH : <br>               IDD_CHARTOPTIONSPERIODIC) ; <br>            } <br> <br>         if (lgraph-&gt;bManualRefresh || PlayingBackLog()) <br>            { <br>            DialogEnable (hDlg, IDD_CHARTOPTIONSINTERVALTEXT, FALSE) ; <br>            DialogEnable (hDlg, IDD_CHARTOPTIONSINTERVAL, FALSE) ; <br>            } <br>         else <br>            { <br>            DialogEnable (hDlg, IDD_CHARTOPTIONSINTERVALTEXT, TRUE) ; <br>            DialogEnable (hDlg, IDD_CHARTOPTIONSINTERVAL, TRUE) ; <br>            } <br> <br>         EditSetLimit (GetDlgItem(hDlg, ID_VERT_MAX), <br>            sizeof(szBuff) / sizeof(TCHAR) - 1) ; <br> <br>         EditSetLimit (GetDlgItem(hDlg, IDD_CHARTOPTIONSINTERVAL), <br>            ShortTextLen) ; <br> <br>         WindowCenter (hDlg) ; <br>         return(TRUE); <br> <br>      case WM_COMMAND: <br>         switch(LOWORD(wParam)) <br>            { <br>            case ID_VERT_MAX: <br>               if (HIWORD(wParam) == EN_CHANGE) <br>                  { <br>                  DialogText(hDlg, ID_VERT_MAX, szBuff) ; <br>                  swscanf(szBuff, TEXT("%d"), &amp;goLocalCopy.iVertMax) ; <br>                  } <br>               break ; <br> <br> <br>            case IDD_CHARTOPTIONSINTERVAL: <br>               if (HIWORD(wParam) == EN_CHANGE) <br>                  { <br>                  goLocalCopy.eTimeInterval = <br>                     DialogFloat (hDlg, IDD_CHARTOPTIONSINTERVAL, NULL) ; <br>                  } <br>               break ; <br> <br>            case IDD_CHARTOPTIONSPERIODIC: <br>            case IDD_CHARTOPTIONSMANUALREFRESH: <br>               // check if the Manual refresh is currently checked. <br>               // Then toggle the ManualRefresh button <br>               LocalManualRefresh = <br>                  (LOWORD(wParam) == IDD_CHARTOPTIONSMANUALREFRESH) ; <br> <br>               CheckRadioButton (hDlg, <br>                  IDD_CHARTOPTIONSMANUALREFRESH, <br>                  IDD_CHARTOPTIONSPERIODIC, <br>                  LocalManualRefresh ? IDD_CHARTOPTIONSMANUALREFRESH : <br>                  IDD_CHARTOPTIONSPERIODIC) ; <br> <br>               // gray out time interval if necessary... <br>               DialogEnable (hDlg, IDD_CHARTOPTIONSINTERVALTEXT, <br>                  !LocalManualRefresh) ; <br>               DialogEnable (hDlg, IDD_CHARTOPTIONSINTERVAL, <br>                  !LocalManualRefresh) ; <br>               break ; <br> <br>            case IDD_CHARTOPTIONSVALUEBAR: <br>               if (goLocalCopy.bStatusBarChecked == TRUE) <br>                  goLocalCopy.bStatusBarChecked = FALSE ; <br>               else <br>                  goLocalCopy.bStatusBarChecked = TRUE ; <br>               break ; <br> <br> <br>            case ID_LEGEND: <br>               if (goLocalCopy.bLegendChecked == TRUE) <br>                  goLocalCopy.bLegendChecked = FALSE ; <br>               else <br>                  goLocalCopy.bLegendChecked = TRUE ; <br> <br>               DialogEnable (hDlg, IDD_CHARTOPTIONSVALUEBAR, <br>                  goLocalCopy.bLegendChecked) ; <br> <br>               break ; <br> <br> <br>            case ID_LABELS: <br>               if (goLocalCopy.bLabelsChecked == TRUE) <br>                  goLocalCopy.bLabelsChecked = FALSE ; <br>               else <br>                  goLocalCopy.bLabelsChecked = TRUE ; <br>               break ; <br> <br> <br>            case ID_VERT_GRID: <br>               if (goLocalCopy.bVertGridChecked == TRUE) <br>                  goLocalCopy.bVertGridChecked = FALSE ; <br>               else <br>                  goLocalCopy.bVertGridChecked = TRUE ; <br>               break ; <br> <br> <br>            case ID_HORZ_GRID: <br>               if (goLocalCopy.bHorzGridChecked == TRUE) <br>                  goLocalCopy.bHorzGridChecked = FALSE ; <br>               else <br>                  goLocalCopy.bHorzGridChecked = TRUE ; <br>               break ; <br> <br> <br>            case ID_GRAPH: <br>            case ID_HISTOGRAM: <br>               if (LOWORD(wParam) == ID_GRAPH) <br>                  { <br>                  goLocalCopy.iGraphOrHistogram = LINE_GRAPH ; <br>                  } <br>               else <br>                  { <br>                  goLocalCopy.iGraphOrHistogram = BAR_GRAPH ; <br>                  } <br>               CheckRadioButton(hDlg, ID_GRAPH, ID_HISTOGRAM, <br>                  goLocalCopy.iGraphOrHistogram == LINE_GRAPH ? <br>                  ID_GRAPH : ID_HISTOGRAM) ; <br> <br>               break ; <br> <br>            case IDOK: <br>               //  verify some numeric entries first <br>               if (goLocalCopy.iVertMax &gt; MAX_VERTICAL || <br>                   goLocalCopy.iVertMax &lt; MIN_VERTICAL) <br>                  { <br>                  DlgErrorBox (hDlg, ERR_BADVERTMAX) ; <br>                  SetFocus (DialogControl (hDlg, ID_VERT_MAX)) ; <br>                  EditSetTextEndPos (hDlg, ID_VERT_MAX) ; <br>                  return (FALSE) ; <br>                  break ; <br>                  } <br>               if (goLocalCopy.eTimeInterval &gt; MAX_INTERVALSEC || <br>                   goLocalCopy.eTimeInterval &lt; MIN_INTERVALSEC) <br>                  { <br>                  DlgErrorBox (hDlg, ERR_BADTIMEINTERVAL) ; <br>                  SetFocus (DialogControl (hDlg, IDD_CHARTOPTIONSINTERVAL)) ; <br>                  EditSetTextEndPos (hDlg, IDD_CHARTOPTIONSINTERVAL) ; <br>                  return (FALSE) ; <br>                  break ; <br>                  } <br> <br>               // We need to send a size message to the main window <br>               // so it can setup the redraw of the graph and legend. <br> <br>               lgraph-&gt;gOptions.bLegendChecked    = goLocalCopy.bLegendChecked ; <br>               lgraph-&gt;gOptions.bStatusBarChecked = goLocalCopy.bStatusBarChecked ; <br> <br>               if (lgraph-&gt;gOptions.eTimeInterval != goLocalCopy.eTimeInterval <br>                  &amp;&amp; !LocalManualRefresh) <br>                  { <br>                  iTimeMilliseconds = (INT) (goLocalCopy.eTimeInterval * (FLOAT) 1000.0) ; <br>                  pGraphs-&gt;gInterval = iTimeMilliseconds ; <br>                  if (!PlayingBackLog()) <br>                     { <br>                     SetGraphTimer(pGraphs) ; <br>                     } <br>                  lgraph-&gt;bManualRefresh = LocalManualRefresh ; <br> <br>                  } <br>               else if (LocalManualRefresh != lgraph-&gt;bManualRefresh) <br>                  { <br>                  ToggleGraphRefresh (hWndGraph) ; <br>                  } <br>               // Assign the local copy of the graph options to the <br>               // global copy. <br> <br>               lgraph-&gt;gOptions = goLocalCopy ; <br> <br>               SizeGraphComponents (hWndGraph) ; <br>               WindowInvalidate (hWndGraph) ; <br>               dwCurrentDlgID = 0 ; <br>               EndDialog (hDlg, 1) ; <br>               return (TRUE) ; <br>               break ; <br> <br> <br>            case IDCANCEL: <br>               dwCurrentDlgID = 0 ; <br>               EndDialog(hDlg,0); <br>               return(TRUE); <br> <br>            case ID_HELP: <br>               CallWinHelp (dwCurrentDlgID) ; <br>               break ; <br> <br>            default: <br>               break; <br>            } <br>         break; <br> <br>      default: <br>         break; <br> <br>      } <br>   return(FALSE); <br>   } <br> <br> <br> <br> <br>DWORD          iIntervalMSecs ; <br> <br>void static OnAlertOptionDlgInit (HWND hDlg, PALERT pAlert) <br>   { <br>   BOOL           EnableFlag ; <br> <br>   iIntervalMSecs = pAlert-&gt;iIntervalMSecs ; <br>    <br>   LocalManualRefresh = pAlert-&gt;bManualRefresh ; <br>    <br>   if (PlayingBackLog()) <br>      { <br>      // When playingback log, disable all controls except  <br>      // the alert interval <br>      // <br>      EnableFlag = TRUE ; <br>      DialogEnable (hDlg, IDD_ALERTOPTIONSMANUALREFRESH, FALSE) ; <br>      DialogEnable (hDlg, IDD_ALERTOPTIONSPOPUP, FALSE) ; <br>      DialogEnable (hDlg, IDD_ALERTOPTIONSNETWORKALERT, FALSE) ; <br>      DialogEnable (hDlg, IDD_ALERTOPTIONSNETGROUPTEXT, FALSE) ; <br>      DialogEnable (hDlg, IDD_ALERTOPTIONSMSGNAME, FALSE) ; <br>      DialogEnable (hDlg, IDD_ALERTOPTIONSMSGNAMETEXT, FALSE) ; <br>      } <br>   else <br>      { <br>      EnableFlag = !LocalManualRefresh ; <br>      DialogEnable (hDlg, IDD_ALERTOPTIONSMSGNAME, pAlert-&gt;bNetworkAlert) ; <br>      DialogEnable (hDlg, IDD_ALERTOPTIONSMSGNAMETEXT, pAlert-&gt;bNetworkAlert) ; <br>      } <br> <br>   // setup the Update time interval group items <br>   DialogSetInterval (hDlg, IDD_ALERTOPTIONSINTERVAL, iIntervalMSecs) ; <br>   DialogEnable (hDlg, IDD_ALERTOPTIONSINTERVAL, EnableFlag) ; <br>   DialogEnable (hDlg, IDD_ALERTOPTIONSINTERVALTEXT, EnableFlag) ; <br>   CheckRadioButton(hDlg, IDD_ALERTOPTIONSMANUALREFRESH, <br>      IDD_ALERTOPTIONSPERIODIC, <br>      !EnableFlag ? IDD_ALERTOPTIONSMANUALREFRESH : IDD_ALERTOPTIONSPERIODIC) ; <br> <br>   CheckDlgButton (hDlg, IDD_ALERTOPTIONSEVENTLOG, pAlert-&gt;bEventLog) ; <br>   CheckDlgButton (hDlg, IDD_ALERTOPTIONSPOPUP, pAlert-&gt;bSwitchToAlert) ; <br>   CheckDlgButton (hDlg, IDD_ALERTOPTIONSNETWORKALERT, pAlert-&gt;bNetworkAlert) ; <br> <br>   if (pAlert-&gt;MessageName[0]) <br>      { <br>      DialogSetString (hDlg, IDD_ALERTOPTIONSMSGNAME, pAlert-&gt;MessageName) ; <br>      } <br>          <br>   EditSetLimit (GetDlgItem(hDlg, IDD_ALERTOPTIONSMSGNAME), <br>      sizeof(pAlert-&gt;MessageName)/sizeof(TCHAR) - 1) ; <br> <br>   dwCurrentDlgID = HC_PM_idDlgOptionAlert ; <br> <br>   WindowCenter (hDlg) ; <br> <br>   }  // OnAlertOptionDlgInit <br> <br>BOOL FAR PASCAL AlertOptionDlg (HWND hDlg, WORD msg,  <br>                                DWORD wParam, LONG lParam) <br>   { <br> <br>   PALERT         pAlert ; <br> <br>   switch(msg) <br>      { <br> <br>      case WM_INITDIALOG: <br>         pAlert = (PALERT) lParam ; <br>         OnAlertOptionDlgInit (hDlg, pAlert) ; <br>         return(TRUE); <br> <br>   case WM_COMMAND: <br>         switch(LOWORD(wParam)) <br>            { <br>            case IDOK: <br>               { <br>               FLOAT eTimeInterval ; <br> <br>               pAlert = AlertData (hWndAlert) ; <br> <br>               eTimeInterval = DialogFloat (hDlg, IDD_ALERTOPTIONSINTERVAL, NULL) ; <br> <br>               if (eTimeInterval &gt; MAX_INTERVALSEC || <br>                   eTimeInterval &lt; MIN_INTERVALSEC) <br>                  { <br>                  DlgErrorBox (hDlg, ERR_BADTIMEINTERVAL) ; <br>                  SetFocus (DialogControl (hDlg, IDD_ALERTOPTIONSINTERVAL)) ; <br>                  EditSetTextEndPos (hDlg, IDD_ALERTOPTIONSINTERVAL) ; <br>                  return (FALSE) ; <br>                  break ; <br>                  } <br> <br>               eTimeInterval = eTimeInterval * (FLOAT) 1000.0 + <br>                   (FLOAT) 0.5 ; <br> <br>               iIntervalMSecs = (DWORD) eTimeInterval ; <br> <br>               pAlert-&gt;bNetworkAlert = <br>                  IsDlgButtonChecked (hDlg, IDD_ALERTOPTIONSNETWORKALERT) ; <br> <br>               pAlert-&gt;bSwitchToAlert = <br>                  IsDlgButtonChecked (hDlg, IDD_ALERTOPTIONSPOPUP) ; <br> <br>               pAlert-&gt;bEventLog = <br>                  IsDlgButtonChecked (hDlg, IDD_ALERTOPTIONSEVENTLOG) ; <br> <br> <br> <br>               if (!PlayingBackLog()) <br>                  { <br>                  DialogText (hDlg, <br>                     IDD_ALERTOPTIONSMSGNAME, <br>                     pAlert-&gt;MessageName) ; <br>                  } <br> <br>               dwCurrentDlgID = 0 ; <br>               EndDialog (hDlg, 1) ; <br>               } <br>               break ; <br> <br>            case IDCANCEL: <br>               dwCurrentDlgID = 0 ; <br>               EndDialog(hDlg,0); <br>               return(TRUE); <br>             <br>            case IDD_ALERTOPTIONSPERIODIC: <br>            case IDD_ALERTOPTIONSMANUALREFRESH: <br> <br>               if (!PlayingBackLog()) <br>                  { <br>                  // check if the Manual refresh is currently checked. <br>                  // Then toggle the ManualRefresh button <br>                  LocalManualRefresh = <br>                     (LOWORD(wParam) == IDD_ALERTOPTIONSMANUALREFRESH) ; <br> <br>                  CheckRadioButton(hDlg, <br>                     IDD_ALERTOPTIONSMANUALREFRESH, <br>                     IDD_ALERTOPTIONSPERIODIC, <br>                     LocalManualRefresh ? IDD_ALERTOPTIONSMANUALREFRESH : <br>                     IDD_ALERTOPTIONSPERIODIC) ; <br> <br>                     DialogEnable (hDlg, <br>                        IDD_ALERTOPTIONSINTERVAL, <br>                        !LocalManualRefresh) ; <br> <br>                     DialogEnable (hDlg, <br>                        IDD_ALERTOPTIONSINTERVALTEXT, <br>                        !LocalManualRefresh) ; <br>                  } <br> <br>               break ; <br>#if 0 <br>            case IDD_ALERTOPTIONSPOPUP: <br>               bSwitchToAlert = !bSwitchToAlert ; <br>               CheckDlgButton (hDlg, IDD_ALERTOPTIONSPOPUP, bSwitchToAlert) ; <br>               break; <br>#endif <br> <br>            case IDD_ALERTOPTIONSNETWORKALERT: <br>               { <br>               BOOL  bNetworkAlert ; <br> <br>               bNetworkAlert = <br>                  IsDlgButtonChecked (hDlg, IDD_ALERTOPTIONSNETWORKALERT) ; <br> <br>               DialogEnable (hDlg, IDD_ALERTOPTIONSMSGNAME, bNetworkAlert) ; <br>               DialogEnable (hDlg, IDD_ALERTOPTIONSMSGNAMETEXT, bNetworkAlert) ; <br> <br>               if (bNetworkAlert) <br>                  { <br>                  SetFocus (GetDlgItem(hDlg, IDD_ALERTOPTIONSMSGNAME)) ; <br>                  SendDlgItemMessage(hDlg, IDD_ALERTOPTIONSMSGNAME, <br>                     EM_SETSEL, 0, 16) ; <br>                  } <br>               } <br>               break; <br> <br>            case IDD_DISPLAYHELP: <br>               CallWinHelp (dwCurrentDlgID) ; <br>               break ; <br> <br>            default: <br>               break; <br>            } <br>         break; <br> <br> <br>   default: <br>      break; <br> <br>      } <br> <br>   return (FALSE); <br>   }  // AlertOptionDlg <br> <br> <br>BOOL DisplayAlertOptions (HWND hWndParent, <br>                           HWND hWndAlert) <br>   {  // DisplayAlertOptions <br>   PALERT        pAlert ; <br> <br>   pAlert = AlertData (hWndParent) ; <br> <br>   if (DialogBoxParam (hInstance, idDlgAlertOptions,  <br>                       hWndParent, (DLGPROC) AlertOptionDlg,  <br>                       (LPARAM) pAlert)) <br>      {  // if <br>       <br>      if (pAlert-&gt;bNetworkAlert &amp;&amp; pAlert-&gt;hNetAlertThread == 0) <br>         { <br>         AlertCreateThread (pAlert) ; <br>         } <br> <br>      if (PlayingBackLog()) <br>         { <br>         if (pAlert-&gt;iIntervalMSecs != iIntervalMSecs) <br>            { <br>            // a new time interval, re-do the backing back log <br>            // using the new value... <br>            pAlert-&gt;iIntervalMSecs = iIntervalMSecs ; <br>            DialogSetInterval (hWndAlert, IDD_ALERTINTERVAL, iIntervalMSecs) ; <br>            if (pAlert-&gt;pLineFirst) <br>               { <br>               PlaybackAlert (hWndAlert, 0) ; <br>               WindowInvalidate (hWndAlert) ; <br>               } <br>            } <br>         } <br>      else if (LocalManualRefresh != pAlert-&gt;bManualRefresh) <br>         { <br>         if (!LocalManualRefresh) <br>            { <br>            pAlert-&gt;iIntervalMSecs = iIntervalMSecs ; <br>            DialogSetInterval (hWndAlert, IDD_ALERTINTERVAL, iIntervalMSecs) ; <br>            } <br>         ToggleAlertRefresh (hWndAlert) ; <br>         } <br>      else if (!LocalManualRefresh) <br>         { <br>         pAlert-&gt;iIntervalMSecs = iIntervalMSecs ; <br>         SetAlertTimer (pAlert) ; <br>         DialogSetInterval (hWndAlert, IDD_ALERTINTERVAL, iIntervalMSecs) ; <br>         } <br>      }  // if <br> <br>   return (TRUE) ; <br>   }  // DisplayAlertOptions <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

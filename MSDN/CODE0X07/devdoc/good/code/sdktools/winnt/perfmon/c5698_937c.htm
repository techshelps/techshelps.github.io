<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WINHELPR.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5718"></a>WINHELPR.H</h2>
<pre><code>/* <br>============================================================================== <br> <br>  Application: <br> <br>            Microsoft Windows NT (TM) Performance Monitor <br> <br>  File: <br>            wincrack.h - Windows helper macros. <br> <br>            This file contains macros for more easily dealing with windows <br>            messages and objects. Think of it as an extension to windows.h. <br> <br>   Written by: <br> <br>            Mike Moskowitz 8 Apr 92. <br> <br>  Copyright 1992 - 1998 Microsoft Corporation. All Rights Reserved. <br>============================================================================== <br>*/ <br> <br> <br> <br>//==========================================================================// <br>//                                   Macros                                 // <br>//==========================================================================// <br> <br> <br>#define SetFont(hWnd, hFont)                          \ <br>   (SendMessage ((hWnd), WM_SETFONT, (WPARAM) hFont, 0)) <br> <br> <br>//======================================// <br>// Object-differentiation routines      // <br>//======================================// <br> <br> <br>// Windows APIs deal with all GDI objects the same. There's a SelectObject, <br>// no SelectBitmap, SelectFont, etc. We use these instead to make the code <br>// easier to read. Also, you can redefine one of these to check the  <br>// validity of a particular GDI object type. <br> <br> <br>#define SelectBitmap(hDC, hBitmap)                    \ <br>   (SelectObject (hDC, hBitmap)) <br> <br>#define SelectFont(hDC, hFont)                        \ <br>   (SelectObject (hDC, hFont)) <br> <br>#define SelectBrush(hDC, hBrush)                      \ <br>   (SelectObject (hDC, hBrush)) <br> <br>#define DeleteBrush(hBrush)                           \ <br>   (DeleteObject (hBrush)) <br> <br>#define SelectPen(hDC, hPen)                          \ <br>   (SelectObject (hDC, hPen)) <br> <br>#define DeletePen(hPen)                               \ <br>   (DeleteObject (hPen)) <br> <br> <br>//======================================// <br>//                                      // <br>//======================================// <br> <br> <br>#define CBData(hWndCB, iIndex)                        \ <br>   (SendMessage (hWndCB, CB_GETITEMDATA, iIndex, 0L)) <br> <br> <br>#define CBSetData(hWndCB, iIndex, lData)              \ <br>   (SendMessage (hWndCB, CB_SETITEMDATA, iIndex, (LONG) lData)) <br> <br> <br>#define CBAdd(hWndCB, lpszText)                       \ <br>   ((int)(DWORD)SendMessage((hWndCB), CB_ADDSTRING,   \ <br>    0, (LPARAM)(LPCSTR)(lpszText))) <br> <br> <br>#define CBFind(hWndCB, lpszText)                      \ <br>   (SendMessage (hWndCB, CB_FINDSTRING, 0xFFFFFFFF, (LPARAM) lpszText)) <br> <br> <br>#define CBInsert(hWndCB, iIndex, lpszText)            \ <br>   (SendMessage (hWndCB, CB_INSERTSTRING, (WPARAM) iIndex, (LPARAM) lpszText)) <br> <br> <br>#define CBReset(hWndCB)                               \ <br>   ((int)(DWORD)SendMessage((hWndCB), CB_RESETCONTENT,\ <br>    0, (LPARAM)0)) <br> <br> <br>#define CBSelection(hWndCB)                           \ <br>   (SendMessage (hWndCB, CB_GETCURSEL, 0, 0L)) <br> <br> <br>#define CBSetSelection(hWndCB, iIndex)                \ <br>   (SendMessage (hWndCB, CB_SETCURSEL, iIndex, 0L)) <br> <br> <br>#define CBString(hWndCB, iIndex, lpszText)            \ <br>   (SendMessage (hWndCB, CB_GETLBTEXT, iIndex, (LPARAM) lpszText)) <br> <br> <br>#define CBStringLen(hWndCB, iIndex)                   \ <br>   (SendMessage (hWndCB, CB_GETLBTEXTLEN, iIndex, 0L)) <br> <br> <br> <br>//======================================// <br>// Listbox helpers                      // <br>//======================================// <br> <br> <br>#define LBAdd(hWndLB, lpszText)                       \ <br>   (SendMessage (hWndLB, LB_ADDSTRING, 0, (LPARAM) lpszText)) <br> <br> <br>#define LBData(hWndLB, iIndex)                        \ <br>   (SendMessage (hWndLB, LB_GETITEMDATA, iIndex, 0L)) <br> <br> <br>#define LBDelete(hWndLB, iIndex)                      \ <br>   (SendMessage (hWndLB, LB_DELETESTRING, iIndex, 0L)) <br> <br> <br>#define LBFind(hWndLB, lpszText)                      \ <br>   (SendMessage (hWndLB, LB_FINDSTRING, (WPARAM) -1, (LPARAM) lpszText)) <br> <br> <br>#define LBFocus(hWndLB)                               \ <br>   (SendMessage (hWndLB, LB_GETCARETINDEX, 0, 0)) <br> <br> <br>#define LBInsert(hWndLB, iIndex, lpszText)            \ <br>   (SendMessage (hWndLB, LB_INSERTSTRING, (WPARAM) iIndex, (LPARAM) lpszText)) <br> <br> <br>#define LBNumItems(hWndLB)                            \ <br>   ((int) SendMessage (hWndLB, LB_GETCOUNT, 0, 0)) <br> <br> <br>#define LBReset(hWndLB)                               \ <br>   ((int)(DWORD)SendMessage((hWndLB), LB_RESETCONTENT,\ <br>    0, (LPARAM)0)) <br> <br> <br>#define LBSelected(hwndLB, index)                     \ <br>   ((int)(DWORD)SendMessage((hwndLB), LB_GETSEL,      \ <br>    (WPARAM)(int)(index), 0L)) <br> <br> <br>#define LBSelection(hWndLB)                           \ <br>   (SendMessage (hWndLB, LB_GETCURSEL, 0, 0L)) <br> <br> <br>#define LBSetData(hWndLB, iIndex, lData)              \ <br>   (SendMessage (hWndLB, LB_SETITEMDATA, iIndex, (LONG) lData)) <br> <br> <br>#define LBSetSelection(hWndLB, iIndex)                \ <br>   (SendMessage (hWndLB, LB_SETCURSEL, iIndex, 0L)) <br> <br> <br>#define LBString(hwndLB, iIndex, lpszText)            \ <br>   ((int)(DWORD)SendMessage((hwndLB), LB_GETTEXT,     \ <br>    (WPARAM)(int)(iIndex), (LPARAM)(LPCSTR)(lpszText))) <br> <br> <br>#define MLBSetSelection(hWndMLB, iIndex, bSet)        \ <br>   (SendMessage (hWndMLB, LB_SETSEL, (WPARAM) bSet, (LPARAM) iIndex)) <br> <br>#define LBSetVisible(hWndLB, iIndex)                  \ <br>   (SendMessage (hWndLB, LB_SETCARETINDEX, (WPARAM) iIndex, 0L)) <br> <br>  <br>#define LBSetRedraw(hWndLB, bDrawOnOff)               \ <br>   (SendMessage (hWndLB, WM_SETREDRAW, (WPARAM) bDrawOnOff, 0L)) <br> <br> <br>#define LBSetHorzExtent(hWndLB, wExtent)              \ <br>   (SendMessage (hWndLB, LB_SETHORIZONTALEXTENT, (WPARAM)wExtent, 0L)) <br> <br>//======================================// <br>// Edit helpers                         // <br>//======================================// <br> <br> <br>#define EditModified(hWndEdit)                        \ <br>   (SendMessage ((hWndEdit), EM_GETMODIFY, (WPARAM) 0, (LPARAM) 0)) <br> <br> <br>#define EditSetModified(hWndEdit, bModified)                     \ <br>   (SendMessage ((hWndEdit), EM_SETMODIFY, (WPARAM) bModified, 0)) <br> <br> <br>#define EditSetLimit(hWndEdit, iLimit)                \ <br>   (SendMessage ((hWndEdit), EM_LIMITTEXT, (WPARAM) iLimit, 0)) <br>#define EditSetTextPos(hWnd, idControl, iStartPos, iEndPos)    \ <br>   (SendMessage (GetDlgItem(hWnd, idControl), EM_SETSEL, (WPARAM) iStartPos, (LPARAM) iEndPos)) <br> <br>#define EditSetTextEndPos(hWnd, idControl)    \ <br>   EditSetTextPos(hWnd, idControl, 0, 32767) <br> <br>//======================================// <br>// Cursor helpers                       // <br>//======================================// <br> <br>#define SetHourglassCursor() \ <br>    (SetCursor(LoadCursor(NULL, IDC_WAIT))) <br> <br>#define SetArrowCursor() \ <br>    (SetCursor(LoadCursor(NULL, IDC_ARROW))) <br> <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DUMPSEC.CXX</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5577"></a>DUMPSEC.CXX</h2>
<pre><code>//+------------------------------------------------------------------ <br>// <br>// Copyright (C) 1995, Microsoft Corporation. <br>// <br>// File:        DumpSec.cxx <br>// <br>// Contents:    class to dump file security ACL <br>// <br>// Classes:     CDumpSecurity <br>// <br>// History:     Nov-93      DaveMont         Created. <br>// <br>//------------------------------------------------------------------- <br> <br>#include &lt;DumpSec.hxx&gt; <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Member:     CDumpSecurity::CDumpSecurity, public <br>// <br>//  Synopsis:   initialized data members, constructor will not throw <br>// <br>//  Arguments:  IN [pfilename] - name of file to dump security for <br>// <br>//---------------------------------------------------------------------------- <br>CDumpSecurity::CDumpSecurity(WCHAR *pfilename) <br>    : _psd(NULL), <br>      _pwfilename(pfilename), <br>      _pdacl(NULL), <br>      _pah(NULL), <br>      _psid(NULL), <br>      _cacethissid(0) <br>{ <br>} <br>//+--------------------------------------------------------------------------- <br>// <br>//  Member:     CDumpSecurity::Init, public <br>// <br>//  Synopsis:   Init must be called before any other methods - this <br>//              is not enforced.  Init gets the security descriptor and <br>//              ACL for the file <br>// <br>//  Arguments:  none <br>// <br>//---------------------------------------------------------------------------- <br>ULONG CDumpSecurity::Init() <br>{ <br>    ULONG ret; <br>    ULONG cpsd; <br> <br>    // get the size of the security buffer <br> <br>    if (!GetFileSecurity(_pwfilename, <br>                         DACL_SECURITY_INFORMATION | <br>                         GROUP_SECURITY_INFORMATION | <br>                         OWNER_SECURITY_INFORMATION, <br>                         NULL, <br>                         0, <br>                         &amp;cpsd) ) <br>    { <br>        if (ERROR_INSUFFICIENT_BUFFER == (ret = GetLastError())) <br>        { <br>            if ( NULL == ( _psd = (BYTE *)LocalAlloc(LMEM_FIXED, cpsd))) <br>            { <br>                 return(ERROR_NOT_ENOUGH_MEMORY); <br>            } <br> <br>            // actually get the buffer this time <br> <br>            if ( GetFileSecurity(_pwfilename, <br>                                 DACL_SECURITY_INFORMATION | <br>                                 GROUP_SECURITY_INFORMATION | <br>                                 OWNER_SECURITY_INFORMATION, <br>                                 _psd, <br>                                 cpsd, <br>                                 &amp;cpsd) ) <br>            { <br>                BOOL fdaclpresent; <br>                BOOL cod; <br> <br>                // get the ACL <br> <br>                if ( GetSecurityDescriptorDacl(_psd, <br>                                           &amp;fdaclpresent, <br>                                           &amp;_pdacl, <br>                                           &amp;cod) ) <br> <br>                { <br>                    if (!fdaclpresent) <br>                    { <br>                        _pdacl = NULL; <br>                        return(ERROR_NO_SECURITY_ON_OBJECT); <br>                    } <br>                    // save the ACL location <br> <br>                    _pah = (ACE_HEADER *)Add2Ptr(_pdacl, sizeof(ACL)); <br>                    return(ERROR_SUCCESS); <br> <br>                } else <br>                   return(GetLastError()); <br>            } else <br>               return(GetLastError()); <br>        } <br>    } else <br>        return(ERROR_NO_SECURITY_ON_OBJECT); <br> <br>    return(ret); <br>} <br>//+--------------------------------------------------------------------------- <br>// <br>//  Member:     Dtor, public <br>// <br>//  Synopsis:   frees the security descriptor <br>// <br>//  Arguments:  none <br>// <br>//---------------------------------------------------------------------------- <br>CDumpSecurity::~CDumpSecurity() <br>{ <br>    if (_psd) <br>    { <br>        LocalFree(_psd); <br>    } <br>} <br>//+--------------------------------------------------------------------------- <br>// <br>//  Member:     CDumpSecurity::GetSDOwner, public <br>// <br>//  Synopsis:   returns the owner of the file <br>// <br>//  Arguments:  OUT [psid] - address of the returned sid <br>// <br>//---------------------------------------------------------------------------- <br>ULONG CDumpSecurity::GetSDOwner(SID **psid) <br>{ <br>    BOOL cod; <br>    if ( GetSecurityDescriptorOwner(_psd, (void **)psid, &amp;cod) ) <br>        return(0); <br>    else <br>        return(GetLastError()); <br>} <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Member:     CDumpSecurity::GetSDGroup, public <br>// <br>//  Synopsis:   returns the group from the file <br>// <br>//  Arguments:  OUT [pgsid] - address of the returned group sid <br>// <br>//---------------------------------------------------------------------------- <br>ULONG CDumpSecurity::GetSDGroup(SID **pgsid) <br>{ <br>    BOOL cod; <br>    if ( GetSecurityDescriptorGroup(_psd, (void **)pgsid, &amp;cod) ) <br>        return(0); <br>    else <br>        return(GetLastError()); <br>} <br> <br>//+--------------------------------------------------------------------------- <br>// <br>//  Member:     CDumpSecurity::ResetAce, public <br>// <br>//  Synopsis:   sets the 'ace' index to the start of the DACL <br>// <br>//  Arguments:  IN - [psid] - the SID to find aces for <br>// <br>//---------------------------------------------------------------------------- <br>VOID CDumpSecurity::ResetAce(SID *psid) <br>{ <br> <br>    _psid = psid; <br>    _cacethissid = 0; <br>    if (_pdacl) <br>        _pah = (ACE_HEADER *)Add2Ptr(_pdacl, sizeof(ACL)); <br>} <br>//+--------------------------------------------------------------------------- <br>// <br>//  Member:     CDumpSecurity::GetNextAce, public <br>// <br>//  Synopsis:   gets the next ACE from the DACL for the specified SID <br>// <br>//  Arguments:  OUT  [pace] - pointer to the next ace for the SID passed <br>//                            in at the last reset. <br>// <br>//  Returns:    the number of the ACE <br>// <br>//---------------------------------------------------------------------------- <br>LONG CDumpSecurity::GetNextAce(ACE_HEADER **paceh) <br>{ <br>    LONG ret = -1; <br> <br>    if (_pdacl) <br>    { <br>        for (;_cacethissid &lt; _pdacl-&gt;AceCount; <br>            _cacethissid++, _pah = (ACE_HEADER *)Add2Ptr(_pah, _pah-&gt;AceSize)) <br>        { <br>            if (!_psid || EqualSid(_psid,(SID *)&amp;((ACCESS_ALLOWED_ACE *)_pah)-&gt;SidStart) ) <br>            { <br>               *paceh = _pah; <br>                ret = _cacethissid++; <br>                _pah = (ACE_HEADER *)Add2Ptr(_pah, _pah-&gt;AceSize); <br>                break; <br>            } <br>        } <br>    } <br>    return(ret); <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

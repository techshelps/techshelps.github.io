<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACCOUNT.CXX</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5575"></a>ACCOUNT.CXX</h2>
<pre><code>//+------------------------------------------------------------------ <br>// <br>// Copyright (C) 1995, Microsoft Corporation. <br>// <br>// File:        account.cxx <br>// <br>// Contents:    Class wrapping account sid and name <br>// <br>// Classes:     CAccount <br>// <br>// History:     Nov-93      DaveMont         Created. <br>// <br>//------------------------------------------------------------------- <br> <br>#include &lt;account.hxx&gt; <br>//+--------------------------------------------------------------------------- <br>// <br>//  Member:     CAccount::CAccount, public <br>// <br>//  Synopsis:   initializes data members <br>// <br>//  Arguments:  IN [Name]   - principal <br>//              IN [System] - server/domain <br>// <br>//---------------------------------------------------------------------------- <br>CAccount::CAccount(WCHAR *Name, WCHAR *System) <br>    : _name(Name), <br>      _system(System), <br>      _domain(NULL), <br>      _psid(NULL), <br>      _fsid(TRUE) <br>{ <br>} <br>//+--------------------------------------------------------------------------- <br>// <br>//  Member:     CAccount::CAccount, public <br>// <br>//  Synopsis:   Initializes data members <br>// <br>//  Arguments:  IN [pSid]   - SID of principal <br>//              IN [System] - server/domain <br>// <br>//---------------------------------------------------------------------------- <br>CAccount::CAccount(SID *pSid, WCHAR *System) <br>    : _name(NULL), <br>      _system(System), <br>      _domain(NULL), <br>      _psid(pSid), <br>      _fsid(FALSE) <br>{ <br>} <br>//+--------------------------------------------------------------------------- <br>// <br>//  Member:     Dtor, public <br>// <br>//  Synopsis:   frees sid or name and domain <br>// <br>//  Arguments:  none <br>// <br>//---------------------------------------------------------------------------- <br>CAccount::~CAccount() <br>{ <br>    if (_fsid) <br>    { <br>        if (_psid) <br>        { <br>            LocalFree(_psid); <br>        } <br>    } else if (_name) <br>    { <br>        LocalFree(_name); <br>    } <br>    if (_domain) <br>        LocalFree(_domain); <br>} <br>//+--------------------------------------------------------------------------- <br>// <br>//  Member:     CAccount::GetAccountName, public <br>// <br>//  Synopsis:   returns the Name associated with the instance of the class <br>// <br>//  Arguments:  OUT [name] address of the principal name <br>// <br>//---------------------------------------------------------------------------- <br>ULONG CAccount::GetAccountName(WCHAR **name) <br>{ <br> <br>    ULONG ret = ERROR_SUCCESS; <br> <br>    if (_name == NULL) <br>    { <br>        DWORD can = 0, crd = 0; <br>        SID_NAME_USE esnu; <br> <br>        if (!LookupAccountSid( NULL, <br>                               _psid, <br>                               NULL, <br>                               &amp;can, <br>                               NULL, <br>                               &amp;crd, <br>                               &amp;esnu)) <br>        { <br>            if (ERROR_INSUFFICIENT_BUFFER == (ret = GetLastError())) <br>            { <br>                ret = ERROR_SUCCESS; <br>                if (NULL == (_name = (WCHAR *)LocalAlloc(LMEM_FIXED, can * sizeof(WCHAR)))) <br>                { <br>                    return(ERROR_NOT_ENOUGH_MEMORY); <br>                } <br>                if (NULL == (_domain = (WCHAR *)LocalAlloc(LMEM_FIXED, crd * sizeof(WCHAR)))) <br>                { <br>                    return(ERROR_NOT_ENOUGH_MEMORY); <br>                } <br> <br>                if ( !LookupAccountSid( NULL, <br>                                       _psid, <br>                                       _name, <br>                                       &amp;can, <br>                                       _domain, <br>                                       &amp;crd, <br>                                       &amp;esnu) ) <br>                { <br>                   ret = GetLastError(); <br>                } <br>            } <br>        } <br>     } <br>     *name = _name; <br>     return(ret); <br>} <br>//+--------------------------------------------------------------------------- <br>// <br>//  Member:     CAccount::GetAccountSid, public <br>// <br>//  Synopsis:   returns the Sid <br>// <br>//  Arguments:  OUT [psid] - sid associated with instance of the class <br>// <br>//---------------------------------------------------------------------------- <br>ULONG CAccount::GetAccountSid(SID **psid) <br>{ <br> <br>    ULONG ret = ERROR_SUCCESS; <br> <br>    if (_psid == NULL &amp;&amp; _name != NULL) <br>    { <br>        DWORD cusid = 0, crd = 0; <br>        SID_NAME_USE esnu; <br> <br>        if (!LookupAccountName( _system, <br>                                _name, <br>                               NULL, <br>                               &amp;cusid, <br>                               NULL, <br>                               &amp;crd, <br>                               &amp;esnu)) <br>        { <br>            if (ERROR_INSUFFICIENT_BUFFER == (ret = GetLastError())) <br>            { <br> <br>                ret = ERROR_SUCCESS; <br>                if (NULL == (_psid = (SID *)LocalAlloc(LMEM_FIXED, cusid))) <br>                { <br>                    return(ERROR_NOT_ENOUGH_MEMORY); <br>                } <br>                if (NULL == (_domain = (WCHAR *)LocalAlloc(LMEM_FIXED, crd * sizeof(WCHAR)))) <br>                { <br>                    return(ERROR_NOT_ENOUGH_MEMORY); <br>                } <br> <br>                if ( !LookupAccountName( _system, <br>                                         _name, <br>                                         _psid, <br>                                         &amp;cusid, <br>                                         _domain, <br>                                         &amp;crd, <br>                                         &amp;esnu) ) <br> <br>                { <br>                   ret = GetLastError(); <br>                } <br>            } <br>        } <br>     } <br>     *psid = _psid; <br>     return(ret); <br>} <br>//+--------------------------------------------------------------------------- <br>// <br>//  Member:     CAccount::GetAccountDomain, public <br>// <br>//  Synopsis:   returns the domain for the class <br>// <br>//  Arguments:  [domain] - returns the domain associated with the instance of <br>//                         the class <br>// <br>//---------------------------------------------------------------------------- <br>ULONG CAccount::GetAccountDomain(WCHAR **domain) <br>{ <br>    ULONG ret = ERROR_SUCCESS; <br> <br>    if (_domain == NULL) <br>    { <br>        if (_fsid) <br>        { <br>            SID *psid; <br>            ret = GetAccountSid(&amp;psid); <br>        } else <br>        { <br>            WCHAR *name; <br>            ret = GetAccountName(&amp;name); <br>        } <br>    } <br>    *domain = _domain; <br>    return(ret); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

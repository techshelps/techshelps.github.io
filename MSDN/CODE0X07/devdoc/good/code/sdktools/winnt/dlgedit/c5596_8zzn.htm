<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DLGEXTRN.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5603"></a>DLGEXTRN.H</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>/****************************** Module Header ******************************* <br>* Module Name: dlgextrn.h <br>* <br>* External declarations for global variables. <br>* <br>****************************************************************************/ <br> <br>extern HANDLE ghInst;           /* Application instance handle.         */ <br>extern HMENU ghMenuMain;        /* Main menu handle.                    */ <br>extern PRESLINK gprlHead;       /* Head of the linked list of resources.*/ <br>extern CURRENTDLG gcd;          /* Describes the current dialog.        */ <br>extern HPEN hpenDarkGray;       /* A dark gray pen.                     */ <br>extern HANDLE ghAccTable;       /* The accelerator table handle.        */ <br>extern INT gMenuSelected;       /* Currently selected menu item.        */ <br>extern HBITMAP ghbmDragHandle;  /* Handle for the drag handle bitmap.   */ <br>extern HBITMAP ghbmDragHandle2; /* Handle for hollow drag handle bitmap.*/ <br>extern HDC ghDCMem;             /* Memory DC for drawing bitmaps.       */ <br>extern INT gCurTool;            /* Currently selected tool.             */ <br>extern PWINDOWCLASSDESC gpwcdCurTool; /* Describes current tool.        */ <br>extern BOOL gfToolLocked;       /* TRUE if a tool is locked down.       */ <br>extern PCUSTLINK gpclHead;      /* Head of custom control linked list.  */ <br>extern INT gidCurrentDlg;       /* Zero, or res id of DlgEdit dlg shown.*/ <br>extern ORDINAL gordIcon;        /* Ordinal for the editor's W_ICON icon.*/ <br> <br>/* <br> * Bitmap handles for the up and down W_NOTHING (pointer) tool bitmaps. <br> */ <br>extern HBITMAP ghbmPointerToolUp; <br>extern HBITMAP ghbmPointerToolDown; <br> <br>/* <br> * External declarations for the Windows variables that contain <br> * command line information. <br> */ <br>extern INT __argc; <br>extern CHAR **__argv; <br> <br>/*-- Initialized "Preferences" Data ------------------------------------*/ <br>extern INIENTRY gaie[];         /* Initialization data desc. structure. */ <br>extern BOOL gfHexMode;          /* TRUE if in "hex" mode.               */ <br>extern BOOL gfTranslateMode;    /* TRUE if in "translate" mode.         */ <br>extern BOOL gfShowToolbox;      /* TRUE if Toolbox is to be shown.      */ <br>extern BOOL gfUseNewKeywords;   /* FALSE to only use "CONTROL" keyword. */ <br>extern INT gcxGrid;             /* Current X grid.                      */ <br>extern INT gcyGrid;             /* Current Y grid.                      */ <br>extern INT gxMargin;            /* Top/bottom margin.                   */ <br>extern INT gyMargin;            /* Left/right margin.                   */ <br>extern INT gxSpace;             /* Horizontal control spacing.          */ <br>extern INT gySpace;             /* Vertical control spacing.            */ <br>extern INT gxMinPushSpace;      /* Minimum horizontal button spacing.   */ <br>extern INT gxMaxPushSpace;      /* Maximum horizontal button spacing.   */ <br>extern INT gyPushSpace;         /* Vertical button spacing.             */ <br> <br>extern TCHAR szAppPos[];        /* App window's position keyname.       */ <br>extern TCHAR szTBPos[];         /* Toolbox window's position keyname.   */ <br>extern TCHAR szCustomDLL[];     /* Section name for DLL custom cntls.   */ <br> <br>/*-- Sundry Handles.----------------------------------------------------*/ <br>extern HWND hwndStatus;         /* Status ribbon window handle.         */ <br>extern HWND ghwndToolbox;       /* Toolbox window handle.               */ <br>extern HWND ghwndTestDlg;       /* Handle of the Test Mode dialog.      */ <br>extern HWND ghwndMain;          /* Main application window.             */ <br>extern HWND ghwndSubClient;     /* The "fake" client area.              */ <br>extern HWND ghwndTrackOver;     /* Window being tracked over.           */ <br> <br>/*-- Some System constants.---------------------------------------------*/ <br>extern INT gcxSysChar;          /* Pixel width of system font char box. */ <br>extern INT gcySysChar;          /* Pixel height of system font char box.*/ <br>extern INT gcyBorder;           /* System height of a border.           */ <br>extern INT gcxPreDragMax;       /* Max X mouse move during pre-drag.    */ <br>extern INT gcyPreDragMax;       /* Max Y mouse move during pre-drag.    */ <br>extern INT gmsecPreDrag;        /* The milliseconds that pre-drag lasts.*/ <br>extern INT gcyPixelsPerInch;    /* Vertical pixels/inch of system.      */ <br>extern INT gcyStatus;           /* Saves height of the status window.   */ <br> <br>/*-- Some state variables.----------------------------------------------*/ <br>extern INT gState;              /* Has the editor "state" or mode.      */ <br>extern BOOL gfResChged;         /* Tell if RES has changed              */ <br>extern BOOL gfIncChged;         /* Tell if include has changed          */ <br>extern BOOL gfDlgChanged;       /* TRUE if current dialog has changed.  */ <br>extern INT gcSelected;          /* Count of selected windows.           */ <br>extern BOOL gfTestMode;         /* TRUE if in "test" mode.              */ <br>extern BOOL gfDisabled;         /* TRUE if editing is disabled for now. */ <br>extern BOOL gfEditingDlg;       /* TRUE means a dlg is picked to edit.  */ <br>extern BOOL gfDlgSelected;      /* TRUE if the dialog has the selection.*/ <br>extern RECT grcMinDialog;       /* Minimum tracking size of the dialog. */ <br>extern RECT grcDlgClient;       /* Rectangle of the dialogs "client".   */ <br>extern POINT gptCursorOffset;   /* Offset from ctrl origin to pointer.  */ <br>extern RECT grcSelected;        /* Rectangle around selected controls.  */ <br>extern RECT grcCopy;            /* Rect around controls being copied.   */ <br>extern RECT grcTrackDU;         /* Tracking rect when dragging a control*/ <br>extern RECT grcTrackWin;        /* Track rect in window units.          */ <br>extern BOOL gfTrackRectShown;   /* TRUE if track rect is visible.       */ <br>extern HDC ghDCTrack;           /* Clip DC used when tracking.          */ <br>extern INT gHandleHit;          /* Current drag handle being tracked.   */ <br>extern INT gnOverHang;          /* Maximum overhang during the drag.    */ <br>extern PRES gpResCopy;          /* Copy of dialog/controls.             */ <br> <br>/*-- CTYPE linked lists.------------------------------------------------*/ <br>extern NPCTYPE npcHead;         /* Linked List of controls.             */ <br>extern INT cWindows;            /* Number of Controls in pctype list.   */ <br>extern NPCTYPE gnpcSel;         /* The currently selected control.      */ <br> <br>/*-- Cursors used by editor.--------------------------------------------*/ <br>extern HCURSOR hcurArrow;       /* Normal arrow cursor.                 */ <br>extern HCURSOR hcurWait;        /* User Wait cursor, Hourglass.         */ <br>extern HCURSOR hcurOutSel;      /* Outline selection cursor.            */ <br>extern HCURSOR hcurMove;        /* System "Move" cursor.                */ <br>extern HCURSOR hcurInsert;      /* Insert cursor for Order/Group dialog.*/ <br>extern HCURSOR hcurDropTool;    /* Cursor for when dropping new ctrls.  */ <br>extern HCURSOR hcurSizeNESW;    /* System sizing "NESW" cursor.         */ <br>extern HCURSOR hcurSizeNS;      /* System sizing "NS" cursor.           */ <br>extern HCURSOR hcurSizeNWSE;    /* System sizing "NWSE" cursor.         */ <br>extern HCURSOR hcurSizeWE;      /* System sizing "WE" cursor.           */ <br>extern HBITMAP hbmTabStop;      /* Bitmap for showing WS_TABSTOP style. */ <br>extern HBITMAP hbmTabStopSel;   /* Selected version of the above.       */ <br> <br>/*-- Window Class Strings.----------------------------------------------*/ <br>extern TCHAR szMainClass[];     /* Application window class.            */ <br>extern TCHAR szDragClass[];     /* Class for drag handle windows.       */ <br>extern TCHAR szSubClientClass[];/* Short client area window class.      */ <br>extern TCHAR szToolboxClass[];  /* Toolbox window class.                */ <br>extern TCHAR szToolBtnClass[];  /* Toolbox button window class.         */ <br>extern TCHAR szCustomClass[];   /* Our custom emulator class.           */ <br> <br>/*-- Miscellaneous variables.-------------------------------------------*/ <br>extern UINT fmtDlg;             /* The Dialog Clipboard format          */ <br>extern TCHAR szEmpty[];         /* An empty string.                     */ <br>extern HHOOK ghhkMsgFilter;     /* Hook for message filter func.        */ <br> <br>/*-- Buffers.-----------------------------------------------------------*/ <br>extern TCHAR szFullResFile[];   /* Full resource file name              */ <br>extern LPTSTR pszResFile;       /* Points to resource file name         */ <br>extern TCHAR szFullIncludeFile[];/* Full include file name              */ <br>extern LPTSTR pszIncludeFile;   /* Points to include file name          */ <br>extern TCHAR gszHelpFile[];     /* Path to the help file.               */ <br> <br>/* <br> * Write buffer and index into it.  This buffer is used by several <br> * sections to write out the different files.  Note that only one <br> * file can be written out at a time using these globals. <br> */ <br>extern TCHAR gachWriteBuffer[]; /* Buffer for written file data.        */ <br>extern INT cbWritePos;          /* Pointer into gachWriteBuffer.        */ <br> <br>/*-- Include Data.------------------------------------------------------*/ <br>extern NPLABEL plInclude;       /* Pointer to Include data              */ <br>extern NPLABEL plDelInclude;    /* Pointer to deleted includes          */ <br> <br>/* <br> * Describes each window class.  Indexed by the W_ defined constants. <br> */ <br>extern WINDOWCLASSDESC awcd[]; <br> <br>/* Map low word of button control style to button type (W_). */ <br>extern INT rgmpiClsBtnType[]; <br> <br>/* Map low word of Static Control Style to static type. */ <br>extern INT rgmpiClsStcType[]; <br> <br>extern CLASSSTYLEDESC acsd[]; <br> <br>/* <br> * Message box messages, for the Message() function. <br> */ <br>extern MESSAGEDATA gamdMessages[]; <br> <br>extern HELPMAP gahmapMenu[];    /* Maps menu ids to their help context. */ <br>extern HELPMAP gahmapDialog[];  /* Maps dlg ids to their help context.  */ <br> <br>extern LANGTABLE gaLangTable[]; /* Table of languages.                  */ <br>extern INT gcLanguages;         /* Count of languages in the table.     */ <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

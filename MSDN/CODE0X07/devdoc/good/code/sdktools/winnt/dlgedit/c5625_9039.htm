<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VIEWINC.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5625"></a>VIEWINC.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>/****************************** Module Header ******************************* <br>* Module Name: viewinc.c <br>* <br>* Manages the Symbols dialog box (view include file). <br>* <br>* Functions: <br>*   ViewInclude() <br>*   ViewIncludeDlgProc() <br>*   ViewIncInit() <br>*   FillIncludeLB() <br>*   AddItemToIncLB() <br>*   SelectDefItem() <br>*   FillEditsFromLB() <br>*   SetIncButtonEnable() <br>*   ViewIncAdd() <br>*   ViewIncDelete() <br>*   ViewIncChange() <br>*   CopyLabels() <br>*   ViewIncCancel() <br>* <br>* Comments: <br>* <br>****************************************************************************/ <br> <br>#include "dlgedit.h" <br>#include "dlgfuncs.h" <br>#include "dlgextrn.h" <br>#include "dialogs.h" <br>#include "dlghelp.h" <br> <br>#include &lt;string.h&gt; <br> <br> <br>/* <br> * Tabstop in the list box. <br> */ <br>#define DEFSYMBOLTABSTOP    146 <br> <br>static NPLABEL plNewInclude = NULL;     /* Pointer to new include data. */ <br>static NPLABEL plNewDelInclude = NULL;  /* Pointer to new deleted incs. */ <br>static BOOL fNewIncChanged;             /* TRUE if new incs are changed.*/ <br> <br>STATICFN BOOL ViewIncInit(HWND hwnd); <br>STATICFN VOID FillIncludeLB(HWND hwnd, BOOL fUnusedOnly, <br>    BOOL fSelectAnchor); <br>STATICFN INT AddItemToIncLB(NPLABEL npLabel, HWND hwndLB); <br>STATICFN VOID SelectDefItem(HWND hwnd, INT lastItem); <br>STATICFN VOID FillEditsFromLB(HWND hwnd); <br>STATICFN VOID SetIncButtonEnable(HWND hwnd); <br>STATICFN BOOL ViewIncAdd(HWND hwnd); <br>STATICFN BOOL ViewIncDelete(HWND hwnd); <br>STATICFN BOOL ViewIncChange(HWND hwnd); <br>STATICFN BOOL CopyLabels(NPLABEL plSrc, NPLABEL *pplDest); <br>STATICFN VOID ViewIncCancel(HWND hwnd); <br> <br> <br> <br>/************************************************************************ <br>* ViewInclude <br>* <br>* This function sets up for the View include dialog box, and invokes <br>* it. <br>* <br>************************************************************************/ <br> <br>VOID ViewInclude(VOID) <br>{ <br>    if (CopyLabels(plInclude, &amp;plNewInclude) &amp;&amp; <br>            CopyLabels(plDelInclude, &amp;plNewDelInclude)) { <br>        fNewIncChanged = FALSE; <br>        if (DlgBox(DID_SYMBOLS, (WNDPROC)ViewIncludeDlgProc) == IDOK) <br>            /* <br>             * Update the status window in case the currently selected <br>             * controls id was one of the labels changed. <br>             */ <br>            StatusUpdate(); <br>    } <br>} <br> <br> <br> <br>/************************************************************************ <br>* ViewIncludeDlgProc <br>* <br>* This is the View Include dialog procedure. <br>* <br>* Comments: <br>*     May change the list of LABELs in plNewInclude, including their <br>*       strings and including more or less memory. <br>*     May put up a message box. <br>* <br>************************************************************************/ <br> <br>DIALOGPROC ViewIncludeDlgProc( <br>    HWND hwnd, <br>    UINT msg, <br>    WPARAM wParam, <br>    LPARAM lParam) <br>{ <br>    switch (msg) { <br>        case WM_INITDIALOG: <br>            return ViewIncInit(hwnd); <br> <br>        case WM_COMMAND: <br>            switch (LOWORD(wParam)) { <br>                case DID_SYMBOLSADD: <br>                    ViewIncAdd(hwnd); <br>                    break; <br> <br>                case DID_SYMBOLSDELETE: <br>                    ViewIncDelete(hwnd); <br>                    break; <br> <br>                case DID_SYMBOLSCHANGE: <br>                    ViewIncChange(hwnd); <br>                    break; <br> <br>                case DID_SYMBOLSLIST: <br>                    /* <br>                     * Make edit controls reflect the listbox selection. <br>                     */ <br>                    if (HIWORD(wParam) == LBN_SELCHANGE) <br>                        FillEditsFromLB(hwnd); <br> <br>                    break; <br> <br>                case DID_SYMBOLSUNUSED: <br>                    if (HIWORD(wParam) == BN_CLICKED) { <br>                        if (IsDlgButtonChecked(hwnd, DID_SYMBOLSUNUSED)) <br>                            FillIncludeLB(hwnd, TRUE, FALSE); <br>                        else <br>                            FillIncludeLB(hwnd, FALSE, FALSE); <br>                    } <br> <br>                    break; <br> <br>                case IDOK: <br>                    FreeLabels(&amp;plInclude); <br>                    FreeLabels(&amp;plDelInclude); <br>                    plInclude = plNewInclude; <br>                    plDelInclude = plNewDelInclude; <br> <br>                    if (fNewIncChanged) { <br>                        gfIncChged = TRUE; <br>                        ShowFileStatus(FALSE); <br> <br>                        /* <br>                         * Update the status windows symbol and name <br>                         * combo boxes. <br>                         */ <br>                        StatusFillSymbolList(plInclude); <br>                    } <br> <br>                    EndDialog(hwnd, IDOK); <br>                    break; <br> <br>                case IDCANCEL: <br>                    ViewIncCancel(hwnd); <br>                    break; <br> <br>                case IDHELP: <br>                    WinHelp(ghwndMain, gszHelpFile, HELP_CONTEXT, <br>                            HELPID_SYMBOLS); <br>                    break; <br>            } <br> <br>            return TRUE; <br> <br>        default: <br>            return FALSE; <br>    } <br>} <br> <br> <br> <br>/************************************************************************ <br>* ViewIncInit <br>* <br>* Processes the WM_INITDIALOG message for the View Include dialog procedure. <br>* <br>* Argements: <br>*   HWND hwnd - handle to the dialog <br>* <br>* Returns: <br>*   FALSE <br>* <br>************************************************************************/ <br> <br>STATICFN BOOL ViewIncInit( <br>    HWND hwnd) <br>{ <br>    INT nTabStops = DEFSYMBOLTABSTOP; <br> <br>    SendDlgItemMessage(hwnd, DID_SYMBOLSEDITID, EM_LIMITTEXT, CCHIDMAX, 0L); <br> <br>    SendDlgItemMessage(hwnd, DID_SYMBOLSLIST, LB_SETTABSTOPS, 1, <br>            (DWORD)&amp;nTabStops); <br> <br>    FillIncludeLB(hwnd, FALSE, TRUE); <br> <br>    /* <br>     * Disable some controls if Translating. <br>     */ <br>    if (gfTranslateMode) { <br>        EnableWindow(GetDlgItem(hwnd, DID_SYMBOLSEDITSYM), FALSE); <br>        EnableWindow(GetDlgItem(hwnd, DID_SYMBOLSEDITID), FALSE); <br>        EnableWindow(GetDlgItem(hwnd, DID_SYMBOLSADD), FALSE); <br>    } <br> <br>    CenterWindow(hwnd); <br> <br>    /* <br>     * Yes, we changed the focus... <br>     */ <br>    return FALSE; <br>} <br> <br> <br> <br>/************************************************************************ <br>* FillIncludeLB <br>* <br>* Fills the include listbox with the include items. <br>* <br>* Arguments: <br>*   HWND hwnd - handle to the include dialog. <br>*   BOOL fUnusedOnly - unused items? <br>*   BOOL fSelectAnchor - anchor control? <br>* <br>************************************************************************/ <br> <br>STATICFN VOID FillIncludeLB( <br>    HWND hwnd, <br>    BOOL fUnusedOnly, <br>    BOOL fSelectAnchor) <br>{ <br>    NPLABEL npLabel; <br>    HWND hwndLB; <br>    INT iSelect; <br>    INT cIncs = 0; <br> <br>    hwndLB = GetDlgItem(hwnd, DID_SYMBOLSLIST); <br> <br>    SendMessage(hwndLB, WM_SETREDRAW, FALSE, 0L); <br> <br>    /* <br>     * Delete any existing items from the listbox. <br>     */ <br>    SendMessage(hwndLB, LB_RESETCONTENT, 0, 0L); <br> <br>    /* <br>     * Fill the list box with the items. <br>     */ <br>    for (npLabel = plNewInclude; npLabel; npLabel = npLabel-&gt;npNext) { <br>        if (!fUnusedOnly || !FindIDInRes(npLabel-&gt;id)) { <br>            AddItemToIncLB(npLabel, hwndLB); <br>            cIncs++; <br>        } <br>    } <br> <br>    /* <br>     * Are there any items in the listbox? <br>     */ <br>    if (cIncs) { <br>        /* <br>         * If there is a currently selected control, search for the <br>         * symbol that corresponds to it.  This will be the default <br>         * selected control.  If there is not a currently selected <br>         * control, select the first symbol in the listbox. <br>         * <br>         * Only select the anchor control if fSelectAnchor is TRUE, <br>         * however.  Also, if the dialog is selected, it does not <br>         * have an id so we skip this case as well. <br>         */ <br>        iSelect = 0; <br>        if (fSelectAnchor &amp;&amp; gnpcSel &amp;&amp; !gfDlgSelected) { <br>            if (npLabel = FindID(gnpcSel-&gt;id, plNewInclude)) { <br>                /* <br>                 * Search the list box for the symbol. <br>                 */ <br>                iSelect = (INT)SendMessage(hwndLB, LB_FINDSTRING, <br>                        (WPARAM)-1, (DWORD)npLabel-&gt;pszLabel); <br> <br>                if (iSelect == LB_ERR) <br>                    iSelect = 0; <br>            } <br>        } <br> <br>        SendMessage(hwndLB, LB_SETCURSEL, iSelect, 0L); <br> <br>        /* <br>         * Set the focus to the listbox initially (so arrow keys work). <br>         */ <br>        SetFocus(hwndLB); <br>    } <br>    else { <br>        SetFocus(GetDlgItem(hwnd, DID_SYMBOLSEDITSYM)); <br>    } <br> <br>    SendMessage(hwndLB, WM_SETREDRAW, TRUE, 0L); <br>    InvalidateRect(hwndLB, NULL, FALSE); <br> <br>    FillEditsFromLB(hwnd); <br>    SetIncButtonEnable(hwnd); <br>} <br> <br> <br> <br>/**************************************************************************** <br>* AddItemToIncLB <br>* <br>* Adds a symbol and id to the View Include listbox and associates it's <br>* label pointer with the added item. <br>* <br>* Arguments: <br>*   NPLABEL npLabel - list of label pointers. <br>*   HWND hwnd LB - handle to the listbox <br>* <br>* Returns:  <br>* <br>* List box id of the newly added item. <br>* <br>****************************************************************************/ <br> <br>STATICFN INT AddItemToIncLB( <br>    NPLABEL npLabel, <br>    HWND hwndLB) <br>{ <br>    INT idTemp; <br>    TCHAR szBuf[CCHTEXTMAX]; <br>    LPTSTR psz; <br> <br>    /* <br>     * Start building the string to add.  Take the label and tack on <br>     * a tab character. <br>     */ <br>    lstrcpy(szBuf, npLabel-&gt;pszLabel); <br>    psz = szBuf + lstrlen(szBuf); <br>    *psz++ = CHAR_TAB; <br> <br>    /* <br>     * Now add the id to the end, using the current hex mode. <br>     */ <br>    Myitoa(npLabel-&gt;id, psz); <br>    idTemp = (INT)SendMessage(hwndLB, LB_ADDSTRING, 0, (DWORD)szBuf); <br>    SendMessage(hwndLB, LB_SETITEMDATA, idTemp, (DWORD)npLabel); <br> <br>    return idTemp; <br>} <br> <br> <br> <br>/**************************************************************************** <br>* SelectDefItem <br>* <br>* Select an item in the listbox near lastItem. <br>* <br>* Arguments: <br>*   HWND hwnd - handle to the dialog <br>*   INT lastItem - lastitem to select. <br>* <br>****************************************************************************/ <br> <br>STATICFN VOID SelectDefItem( <br>    HWND hwnd, <br>    INT lastItem) <br>{ <br>    INT cItems; <br>    HWND hwndLB; <br> <br>    hwndLB = GetDlgItem(hwnd, DID_SYMBOLSLIST); <br> <br>    if ((cItems = (INT)SendMessage(hwndLB, LB_GETCOUNT, 0, 0L)) <br>            != LB_ERR &amp;&amp; cItems &gt; 0) <br>        SendMessage(hwndLB, LB_SETCURSEL, lastItem &gt;= cItems ? <br>                (cItems - 1) : lastItem, 0L); <br> <br>    FillEditsFromLB(hwnd); <br>} <br> <br> <br> <br>/**************************************************************************** <br>* FillEditsFromLB <br>* <br>* Fill the edit controls from the selected item in the listbox. <br>* <br>* Arguments: <br>*   HWND hwnd - handle to the dialog. <br>* <br>****************************************************************************/ <br> <br>STATICFN VOID FillEditsFromLB( <br>    HWND hwnd) <br>{ <br>    TCHAR szID[CCHIDMAX + 1]; <br>    INT iItem; <br>    NPLABEL npLabel; <br>    HWND hwndLB; <br>    HWND hwndID; <br>    HWND hwndSym; <br> <br>    hwndLB = GetDlgItem(hwnd, DID_SYMBOLSLIST); <br>    hwndSym = GetDlgItem(hwnd, DID_SYMBOLSEDITSYM); <br>    hwndID = GetDlgItem(hwnd, DID_SYMBOLSEDITID); <br> <br>    /* <br>     * Is there a selected item? <br>     */ <br>    if ((iItem = (INT)SendMessage(hwndLB, LB_GETCURSEL, 0, 0L)) <br>            != LB_ERR) { <br>        npLabel = (NPLABEL)SendMessage(hwndLB, LB_GETITEMDATA, <br>                iItem, 0L); <br>        SetWindowText(hwndSym, npLabel-&gt;pszLabel); <br> <br>        Myitoa(npLabel-&gt;id, szID); <br>        SetWindowText(hwndID, szID); <br>    } <br>    else { <br>        /* <br>         * No, clear the fields. <br>         */ <br>        SetWindowText(hwndSym, szEmpty); <br>        SetWindowText(hwndID, szEmpty); <br>    } <br>} <br> <br> <br> <br>/**************************************************************************** <br>* SetIncButtonEnable <br>* <br>* Enable/disable the Symbols change and delete buttons. <br>* <br>* Arguments: <br>*   HWND hwnd - handle to the dialog. <br>* <br>****************************************************************************/ <br> <br>STATICFN VOID SetIncButtonEnable( <br>    HWND hwnd) <br>{ <br>    BOOL fEnable = TRUE; <br> <br>    /* <br>     * If the list box doesn't have items, or we are in translate mode, <br>     * disable the Delete and Change buttons. <br>     */ <br>    if (gfTranslateMode || SendDlgItemMessage(hwnd, DID_SYMBOLSLIST, <br>            LB_GETCOUNT, 0, 0L) == 0) <br>        fEnable = FALSE; <br> <br>    EnableWindow(GetDlgItem(hwnd, DID_SYMBOLSDELETE), fEnable); <br>    EnableWindow(GetDlgItem(hwnd, DID_SYMBOLSCHANGE), fEnable); <br>} <br> <br> <br> <br>/************************************************************************ <br>* ViewIncAdd <br>* <br>* Processes the "Add" command for the View Include dialog procedure. <br>* <br>* Arguments: <br>*   HWND hwnd - handle to the dialog. <br>* <br>************************************************************************/ <br> <br>STATICFN BOOL ViewIncAdd( <br>    HWND hwnd) <br>{ <br>    TCHAR szSym[CCHTEXTMAX]; <br>    TCHAR szID[CCHIDMAX + 1]; <br>    HWND hwndLB; <br>    INT idNew; <br>    NPLABEL npLabel; <br> <br>    /* <br>     * Get current symbol &amp; ID. <br>     */ <br>    GetDlgItemText(hwnd, DID_SYMBOLSEDITID, szID, CCHIDMAX + 1); <br>    GetDlgItemText(hwnd, DID_SYMBOLSEDITSYM, szSym, CCHTEXTMAX); <br> <br>    /* <br>     * If they didn't specify a new id as well as a new symbol, <br>     * pick a default number. <br>     */ <br>    if (*szID == CHAR_NULL) <br>        Myitoa(NextID(NEXTID_LABEL, plNewInclude, 0), szID); <br> <br>    /* <br>     * Validate them. <br>     */ <br>    if (!IsSymbol(szSym) || !IsValue(szID)) { <br>        Message(MSG_BADSYMBOLID); <br>        return FALSE; <br>    } <br> <br>    idNew = valtoi(szID); <br> <br>    if (!(npLabel = AddLabel(szSym, idNew, FPOS_MAX, 0, <br>            &amp;plNewInclude, &amp;plNewDelInclude, NULL, NULL))) <br>        return FALSE; <br> <br>    fNewIncChanged = TRUE; <br> <br>    /* <br>     * Add the new symbol to the listbox, but not if they only want to <br>     * show unused id's and this id is in use. <br>     */ <br>    if (!IsDlgButtonChecked(hwnd, DID_SYMBOLSUNUSED) || <br>            !FindIDInRes(idNew)) { <br>        hwndLB = GetDlgItem(hwnd, DID_SYMBOLSLIST); <br>        SendMessage(hwndLB, LB_SETCURSEL, <br>                AddItemToIncLB(npLabel, hwndLB), 0L); <br>    } <br> <br>    SetIncButtonEnable(hwnd); <br>    FillEditsFromLB(hwnd); <br> <br>    return TRUE; <br>} <br> <br> <br> <br>/************************************************************************ <br>* ViewIncDelete <br>* <br>* Processes the "Delete" command for the View Include dialog procedure. <br>* <br>* Arguments: <br>*   HWND hwnd - handle to the dialog. <br>* <br>************************************************************************/ <br> <br>STATICFN BOOL ViewIncDelete( <br>    HWND hwnd) <br>{ <br>    TCHAR szSym[CCHTEXTMAX]; <br>    HWND hwndLB; <br>    INT iItem; <br> <br>    /* <br>     * Get current symbol and listbox hwnd. <br>     */ <br>    GetDlgItemText(hwnd, DID_SYMBOLSEDITSYM, szSym, CCHTEXTMAX); <br>    hwndLB = GetDlgItem(hwnd, DID_SYMBOLSLIST); <br> <br>    /* <br>     * Search the list box for the symbol.  This will probably be <br>     * the same as the selection, but if they type in a symbol <br>     * then it will not be. <br>     */ <br>    iItem = (INT)SendMessage(hwndLB, LB_FINDSTRING, (WPARAM)-1, (DWORD)szSym); <br> <br>    /* <br>     * Fail if the symbol was not found. <br>     */ <br>    if (iItem == LB_ERR) { <br>        Message(MSG_SYMNOTFOUND); <br>        return FALSE; <br>    } <br> <br>    DeleteLabel(szSym, &amp;plNewInclude, &amp;plNewDelInclude); <br>    fNewIncChanged = TRUE; <br> <br>    SendMessage(hwndLB, LB_DELETESTRING, iItem, 0L); <br>    SelectDefItem(hwnd, iItem); <br>    SetIncButtonEnable(hwnd); <br> <br>    return TRUE; <br>} <br> <br> <br> <br>/************************************************************************ <br>* ViewIncChange <br>* <br>* Processes the "Change" command for the View Include dialog procedure. <br>* <br>* Arguments: <br>*   HWND hwnd - handle to the dialog. <br>* <br>************************************************************************/ <br> <br>STATICFN BOOL ViewIncChange( <br>    HWND hwnd) <br>{ <br>    TCHAR szSym[CCHTEXTMAX]; <br>    TCHAR szID[CCHIDMAX + 1]; <br>    HWND hwndLB; <br>    NPLABEL npLabel; <br>    NPLABEL npLabelNew; <br>    INT idNew; <br>    INT iItem; <br> <br>    /* <br>     * Get current symbol &amp; ID. <br>     */ <br>    GetDlgItemText(hwnd, DID_SYMBOLSEDITID, szID, CCHIDMAX + 1); <br>    GetDlgItemText(hwnd, DID_SYMBOLSEDITSYM, szSym, CCHTEXTMAX); <br> <br>    /* <br>     * Validate them. <br>     */ <br>    if (!IsSymbol(szSym) || !IsValue(szID)) { <br>        Message(MSG_BADSYMBOLID); <br>        return FALSE; <br>    } <br> <br>    hwndLB = GetDlgItem(hwnd, DID_SYMBOLSLIST); <br> <br>    /* <br>     * Make sure a selection is made. <br>     */ <br>    if ((iItem = (INT)SendMessage(hwndLB, LB_GETCURSEL, 0, 0L)) <br>            == LB_ERR) { <br>        Message(MSG_SELECTFIRST); <br>        return FALSE; <br>    } <br> <br>    /* <br>     * Get the item handle. <br>     */ <br>    npLabel = (NPLABEL)SendMessage(hwndLB, LB_GETITEMDATA, iItem, 0L); <br> <br>    /* <br>     * Check if the symbol is changing. <br>     */ <br>    idNew = valtoi(szID); <br>    if (lstrcmp(npLabel-&gt;pszLabel, szSym) != 0) { <br>        if (!(npLabelNew = AddLabel(szSym, idNew, FPOS_MAX, 0, <br>                &amp;plNewInclude, &amp;plNewDelInclude, npLabel, NULL))) <br>            return FALSE; <br> <br>        DeleteLabel(npLabel-&gt;pszLabel, &amp;plNewInclude, &amp;plNewDelInclude); <br>        npLabel = npLabelNew; <br>    } <br>    /* <br>     * The symbol didn't change.  Did the id change? <br>     */ <br>    else if (idNew != npLabel-&gt;id) { <br>        /* <br>         * First check for a duplicate id. <br>         */ <br>        if (FindID(idNew, plNewInclude)) { <br>            Message(MSG_LABELDUPID); <br>            return FALSE; <br>        } <br> <br>        npLabel-&gt;id = idNew; <br>    } <br>    else { <br>        /* <br>         * Nothing changed. <br>         */ <br>        Message(MSG_SYMNOCHANGE); <br>        return FALSE; <br>    } <br> <br>    fNewIncChanged = TRUE; <br>    SendMessage(hwndLB, WM_SETREDRAW, FALSE, 0L); <br>    SendMessage(hwndLB, LB_DELETESTRING, iItem, 0L); <br> <br>    /* <br>     * Add the changed symbol to the listbox, but not if they only want to <br>     * show unused id's and this id is in use. <br>     */ <br>    if (!IsDlgButtonChecked(hwnd, DID_SYMBOLSUNUSED) || !FindIDInRes(idNew)) <br>        SendMessage(hwndLB, LB_SETCURSEL, <br>                AddItemToIncLB(npLabel, hwndLB), 0L); <br> <br>    SendMessage(hwndLB, WM_SETREDRAW, TRUE, 0L); <br>    InvalidateRect(hwndLB, NULL, FALSE); <br>    FillEditsFromLB(hwnd); <br>    SetIncButtonEnable(hwnd); <br> <br>    return TRUE; <br>} <br> <br> <br> <br>/**************************************************************************** <br>* CopyLabels <br>* <br>* This function creates a copy of the LABEL structure list in plSrc, <br>* including copying all strings.  This is put in local memory and <br>* the head pointer is returned in *pplDest. <br>* <br>* Arguments: <br>*   NPLABEL plSrc - label list source. <br>*   NPLABEL pplDest - label list destination. <br>* <br>* Returns: <br>* <br>*  TRUE if all went well, FALSE if there was a problem. <br>* <br>* Comments:  <br>* <br>* Locally allocates a copy of plSrc and its strings. <br>* <br>* Caution: If pplDest points to a valid list it must be freed before <br>*          calling this function. <br>* <br>****************************************************************************/ <br> <br>STATICFN BOOL CopyLabels( <br>    NPLABEL plSrc, <br>    NPLABEL *pplDest) <br>{ <br>    NPLABEL plNew; <br>    NPLABEL plPrev; <br> <br>    plPrev = NULL; <br>    *pplDest = NULL; <br>    while (plSrc) { <br>        if (!(plNew = (NPLABEL)MyAlloc(sizeof(LABEL)))) { <br>            FreeLabels(pplDest); <br>            return FALSE; <br>        } <br> <br>        /* <br>         * Are we on the first one? <br>         */ <br>        if (*pplDest == NULL) <br>            *pplDest = plNew; <br>        else <br>            plPrev-&gt;npNext = plNew; <br> <br>        /* <br>         * Start by copying the whole label structure. <br>         */ <br>        memcpy((PBYTE)plNew, (PBYTE)plSrc, sizeof(LABEL)); <br> <br>        /* <br>         * Make a private copy of the pszLabel string. <br>         */ <br>        if (!(plNew-&gt;pszLabel = <br>                MyAlloc((lstrlen(plSrc-&gt;pszLabel) + 1) * sizeof(TCHAR)))) { <br>            MyFree(plNew); <br>            FreeLabels(pplDest); <br>            return FALSE; <br>        } <br> <br>        lstrcpy(plNew-&gt;pszLabel, plSrc-&gt;pszLabel); <br> <br>        plNew-&gt;npNext = NULL;           /* In case this is the last one.*/ <br>        plPrev = plNew;                 /* Save so we can update npNext.*/ <br>        plSrc = plSrc-&gt;npNext;          /* Get next one to copy.        */ <br>    } <br> <br>    return TRUE; <br>} <br> <br> <br> <br>/************************************************************************ <br>* ViewIncCancel <br>* <br>* Called when cancelling the Symbols dialog box. <br>* <br>* Argements: <br>*    HWND hwnd - handle to the dialog <br>* <br>************************************************************************/ <br> <br>STATICFN VOID ViewIncCancel( <br>    HWND hwnd) <br>{ <br>    /* <br>     * If they changed anything, confirm that they <br>     * want to throw away the changes. <br>     */ <br>    if (fNewIncChanged &amp;&amp; <br>            Message(MSG_CONFIRMDISCARD) != IDYES) <br>        return; <br> <br>    /* <br>     * Free up the temporary label lists and get out. <br>     */ <br>    FreeLabels(&amp;plNewInclude); <br>    FreeLabels(&amp;plNewDelInclude); <br> <br>    /* <br>     * Flag the dialog to be dismissed. <br>     */ <br>    EndDialog(hwnd, IDCANCEL); <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RESLIST.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5614"></a>RESLIST.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>/****************************** Module Header ******************************* <br>* Module Name: reslist.c <br>* <br>* Contains routines to manage the linked list of resources. <br>* <br>* Functions: <br>*   FindDialog() <br>*   AllocResLink() <br>*   RestoreDialog() <br>*   FreeRes() <br>*   FreeResList() <br>*   FreeResLink() <br>*   DeleteDialogResource() <br>* <br>* Comments: <br>* <br>****************************************************************************/ <br> <br>#include "dlgedit.h" <br>#include "dlgfuncs.h" <br>#include "dlgextrn.h" <br> <br>#include &lt;stdlib.h&gt; <br>#include &lt;string.h&gt; <br> <br> <br> <br>/************************************************************************ <br>* FindDialog <br>* <br>* This function steps through the linked list of resources looking <br>* for the dialog resource with the given name.  This name can be either <br>* a string or an ordinal.  Strings are compared without regard to case. <br>* <br>* When looking at the dialog names in the resources, if the dialog <br>* resource is the current one, it will compare the current name for the <br>* dialog instead of the name that is stored in the resource.  This is <br>* because the name in the resource could be out of date with respect <br>* to the current name of the dialog being edited.  This happens when <br>* the user changes the dialog's name, but has not yet done an action <br>* that causes the resource to be synched, such as a File/Save, for <br>* instance. <br>* <br>* Arguments: <br>*   LPTSTR pszDlgName    - Name or ordinal of the dialog to find. <br>* <br>* Returns: <br>*   TRUE if a dialog with that name is found, FALSE if not. <br>* <br>************************************************************************/ <br> <br>BOOL FindDialog( <br>    LPTSTR pszDlgName) <br>{ <br>    PRESLINK prl; <br> <br>    if (gfEditingDlg &amp;&amp; NameOrdCmp(gcd.pszDlgName, pszDlgName) == 0) <br>        return TRUE; <br> <br>    for (prl = gprlHead; prl; prl = prl-&gt;prlNext) { <br>        /* <br>         * Is this a dialog resource and do they compare? <br>         */ <br>        if (prl-&gt;fDlgResource &amp;&amp; prl != gcd.prl &amp;&amp; <br>                NameOrdCmp(prl-&gt;pszName, pszDlgName) == 0) <br>            break; <br>    } <br> <br>    return prl ? TRUE : FALSE; <br>} <br> <br> <br> <br>/************************************************************************ <br>* AllocResLink <br>* <br>* This function allocates a new RESLINK structure for the linked list <br>* of resources.  It allocates local memory for the link, allocates <br>* and fills global memory with the given resource data and initializes <br>* the fields of the structure.  The link is not added to the list, <br>* however. <br>* <br>* Returns: <br>*   A pointer to the newly allocated RESLINK structure, or NULL if <br>*   an error occurs. <br>* <br>************************************************************************/ <br> <br>PRESLINK AllocResLink( <br>    PRES pRes) <br>{ <br>    PRESLINK prl; <br>    PRES pResNew; <br>    PRES2 pRes2; <br>    LPTSTR pszName; <br>    INT cbName; <br>    LPTSTR pszType; <br> <br>    if (!(prl = (PRESLINK)MyAlloc(sizeof(RESLINK)))) <br>        return NULL; <br> <br>    prl-&gt;prlNext = NULL; <br> <br>    prl-&gt;cbRes = ResourceSize(pRes); <br>    if (!(prl-&gt;hRes = GlobalAlloc(GMEM_MOVEABLE, prl-&gt;cbRes))) { <br>        MyFree(prl); <br>        Message(MSG_OUTOFMEMORY); <br>        return NULL; <br>    } <br> <br>    pResNew = (PRES)GlobalLock(prl-&gt;hRes); <br>    memcpy(pResNew, pRes, prl-&gt;cbRes); <br>    GlobalUnlock(prl-&gt;hRes); <br> <br>    pszType = ResourceType(pRes); <br>    if (IsOrd(pszType) &amp;&amp; OrdID(pszType) == ORDID_RT_DIALOG) { <br>        prl-&gt;fDlgResource = TRUE; <br>        pszName = ResourceName(pRes); <br>        cbName = NameOrdLen(pszName); <br> <br>        if (!(prl-&gt;pszName = MyAlloc(cbName))) { <br>            GlobalFree(prl-&gt;hRes); <br>            MyFree(prl); <br>            return NULL; <br>        } <br> <br>        NameOrdCpy(prl-&gt;pszName, pszName); <br> <br>        pRes2 = ResourcePart2(pRes); <br>        prl-&gt;wLanguage = pRes2-&gt;LanguageId; <br>    } <br>    else { <br>        prl-&gt;fDlgResource = FALSE; <br>        prl-&gt;pszName = NULL; <br>        prl-&gt;wLanguage = 0; <br>    } <br> <br>    return prl; <br>} <br> <br> <br> <br>/**************************************************************************** <br>* RestoreDialog <br>* <br>* This function is used to restore the current dialog to the condition <br>* that it was in just before it was last chosen to edit. <br>* <br>****************************************************************************/ <br> <br>VOID RestoreDialog(VOID) <br>{ <br>    PRESLINK prlSave; <br> <br>    if (Message(MSG_RESTOREDIALOG) == IDYES) { <br>        prlSave = gcd.prl; <br>        DeleteDialog(FALSE); <br> <br>        ResLinkToDialog(prlSave); <br>    } <br>} <br> <br> <br> <br>/**************************************************************************** <br>* FreeRes <br>* <br>* This frees the entire list of resources and deletes the dialog box <br>* being edited. <br>* <br>****************************************************************************/ <br> <br>VOID FreeRes(VOID) <br>{ <br>    CancelSelection(TRUE); <br> <br>    if (gfEditingDlg) <br>        DeleteDialog(FALSE); <br> <br>    FreeResList(); <br> <br>    pszResFile = NULL; <br>    gfResChged = FALSE; <br>} <br> <br> <br> <br>/**************************************************************************** <br>* FreeResList <br>* <br>* This function frees the entire resource list. <br>* <br>****************************************************************************/ <br> <br>VOID FreeResList(VOID) <br>{ <br>    PRESLINK prl; <br>    PRESLINK prlNext; <br> <br>    for (prl = gprlHead; prl; prl = prlNext) { <br>        prlNext = prl-&gt;prlNext; <br>        FreeResLink(prl); <br>    } <br> <br>    gprlHead = NULL; <br>} <br> <br> <br> <br>/**************************************************************************** <br>* FreeResLink <br>* <br>* This frees a linked resource structure and everything that it <br>* contains.  It does not close up the linked list, however. <br>* <br>* Arguments: <br>*   PRESLINK prl - Points to the resource link to free. <br>* <br>****************************************************************************/ <br> <br>VOID FreeResLink( <br>    PRESLINK prl) <br>{ <br>    if (prl-&gt;pszName) <br>        MyFree(prl-&gt;pszName); <br> <br>    if (prl-&gt;hRes) <br>        GlobalFree(prl-&gt;hRes); <br> <br>    MyFree(prl); <br>} <br> <br> <br> <br>/************************************************************************ <br>* DeleteDialogResource <br>* <br>* This function deletes the current dialog from the linked list of <br>* resources.  It handles the case where the current dialog is not <br>* yet in the list. <br>* <br>************************************************************************/ <br> <br>VOID DeleteDialogResource(VOID) <br>{ <br>    PRESLINK prl; <br>    PRESLINK prlPrev; <br> <br>    /* <br>     * Does a link for the current dialog exist? <br>     */ <br>    if (gcd.prl) { <br>        /* <br>         * Find the existing link and get it's previous link. <br>         */ <br>        for (prl = gprlHead, prlPrev = NULL; prl &amp;&amp; prl != gcd.prl; <br>                prlPrev = prl, prl = prl-&gt;prlNext) <br>            ; <br> <br>        /* <br>         * Close up the linked list. <br>         */ <br>        if (prlPrev) <br>            prlPrev-&gt;prlNext = gcd.prl-&gt;prlNext; <br>        else <br>            gprlHead = gcd.prl-&gt;prlNext; <br> <br>        /* <br>         * Delete the link. <br>         */ <br>        FreeResLink(gcd.prl); <br>        gcd.prl = NULL; <br>    } <br>} <br> <br> <br> <br>/**************************************************************************** <br>* <br>* Stubs for the C runtime international calls that are not implemented yet. <br>* These should be removed once the C runtime international library <br>* is dropped to NT. <br>* <br>****************************************************************************/ <br> <br>LPWSTR itoaw( <br>    INT value, <br>    LPWSTR string, <br>    INT radix) <br>{ <br>    CHAR szAnsi[17]; <br> <br>    itoa(value, szAnsi, radix); <br> <br>    MultiByteToWideChar(CP_ACP, 0, szAnsi, -1, string, 17); <br> <br>    return string; <br>} <br> <br> <br> <br>INT awtoi( <br>    LPWSTR string) <br>{ <br>    CHAR szAnsi[17]; <br>    BOOL fDefCharUsed; <br> <br>    WideCharToMultiByte(CP_ACP, 0, string, -1, szAnsi, 17, NULL, &amp;fDefCharUsed); <br> <br>    return atoi(szAnsi); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

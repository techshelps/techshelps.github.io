<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DLGEDIT.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5602"></a>DLGEDIT.H</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>/****************************** Module Header ******************************* <br>* Module Name: dlgedit.h <br>* <br>* Main header file for the dialog box editor. <br>* <br>****************************************************************************/ <br> <br>#define NOMINMAX <br>#include &lt;windows.h&gt; <br>#include &lt;custcntl.h&gt; <br>#include &lt;setjmp.h&gt; <br>#include "ids.h" <br> <br> <br>/* <br> * For unicode support. <br> */ <br>LPWSTR itoaw(INT value, LPWSTR string, INT radix); <br>INT awtoi(LPWSTR string); <br> <br>/*  <br> * temporary define <br> */ <br>#define BS_PUSHBOX 0x0AL <br> <br> <br>#define STATICFN        static <br> <br>#define WINDOWPROC      LONG APIENTRY <br>#define DIALOGPROC      BOOL APIENTRY <br> <br>typedef HWND FAR *LPHWND; <br> <br>/* <br> * Used to create a window of "DIALOG" class. <br> */ <br>#define DIALOGCLASS     0x8002 <br> <br>#define ORDID_RT_RESOURCE32     0x00    // Aligned res file dummy resource. <br>#define ORDID_RT_DIALOG         0x05    // Dialog resource type. <br>#define ORDID_RT_DLGINCLUDE     0x11    // Dialog include file resource type. <br> <br> <br>/* <br> * The ordinal for the name of the DLGINCLUDE resource. <br> */ <br>#define ORDID_DLGINCLUDE_NAME   1 <br> <br> <br>/* <br> * Macro to pack a point into a long value. <br> */ <br>#define POINT2LONG(pt, l)   (l = MAKELONG(LOWORD((pt).x), LOWORD((pt).y))) <br> <br> <br>/* <br> * Macros to simplify working with menus. <br> */ <br>#define MyEnableMenuItem(hMenu, wIDEnableItem, fEnable) \ <br>    EnableMenuItem((hMenu),(wIDEnableItem),(fEnable)?MF_ENABLED:MF_GRAYED) <br> <br>#define MyEnableMenuItemByPos(hMenu, wPosEnableItem, fEnable) \ <br>    EnableMenuItem((hMenu),(wPosEnableItem),(fEnable)? \ <br>    MF_ENABLED | MF_BYPOSITION:MF_GRAYED | MF_BYPOSITION) <br> <br>#define MyCheckMenuItem(hMenu, wIDCheckItem, fCheck) \ <br>    CheckMenuItem((hMenu),(wIDCheckItem),(fCheck)?MF_CHECKED:MF_UNCHECKED) <br> <br>/* <br> * This macro returns TRUE if the given string is an ordinal. <br> */ <br>#define IsOrd(psz)      (((PORDINAL)(psz))-&gt;wReserved == \ <br>                        (WORD)0xffff ? TRUE : FALSE) <br> <br>/* <br> * This macro returns the ordinal id in the specified name/ord field. <br> */ <br>#define OrdID(psz)      (((PORDINAL)(psz))-&gt;wOrdID) <br> <br> <br>/* <br> * Integer property values. <br> */ <br>#define PROP_FNCHILD        MAKEINTRESOURCE(0x3345) <br> <br>/* <br> * Macro to set/remove an NPCTYPE pointer into a control or dialog hwnd. <br> */ <br>#define SETPCINTOHWND(hwnd, npc) \ <br>    SetWindowLong((hwnd), GWL_USERDATA, (DWORD)(npc)) <br> <br>#define UNSETPCINTOHWND(hwnd)   (hwnd) <br> <br>/* <br> * Macro to extract an NPCTYPE from a control or dialog hwnd. <br> */ <br>#define PCFROMHWND(hwnd)    ((NPCTYPE)GetWindowLong(hwnd, GWL_USERDATA)) <br> <br>/* <br> * Macros to set and retrieve the original window proc from <br> * a child window that has been subclassed by the editor. <br> */ <br>#define SETCHILDPROC(hwnd, lpfn) SetProp((hwnd), PROP_FNCHILD, (HANDLE)(lpfn)) <br>#define GETCHILDPROC(hwnd)      ((WNDPROC)GetProp((hwnd), PROP_FNCHILD)) <br>#define UNSETCHILDPROC(hwnd)    RemoveProp((hwnd), PROP_FNCHILD) <br> <br> <br>/* <br> * Used to indicate an "impossible" file position (offset). <br> */ <br>#define FPOS_MAX                ((DWORD)(-1L)) <br> <br> <br>/* <br> * Special flag I place in the resource that goes into the clipboard <br> * that means that only the controls in the dialog template in the <br> * clipboard are to be copied, not the entire dialog.  Because this <br> * value is placed into the cx field of the dialog template, it can <br> * only be a WORD in size.  I use 0xffff (-1) because this would be <br> * an impossible value for the width of a dialog. <br> */ <br>#define CONTROLS_ONLY           ((WORD)0xffff) <br> <br> <br>/* <br> * Some colors used in the editor. <br> */ <br>#define LIGHTGRAY               RGB(192, 192, 192) <br>#define DARKGRAY                RGB(128, 128, 128) <br>#define REPLACECOLOR1           RGB(255, 255, 255)      // White <br>#define REPLACECOLOR2           RGB(0, 0, 0)            // Black <br> <br>/* <br> * Maximum size of a file name plus path specification. <br> */ <br>#define CCHMAXPATH              260 <br> <br>/* <br> * Maximum length of a long hex value ("0x" + 8 digits) not counting the null. <br> */ <br>#define CCHHEXLONGMAX           10 <br> <br>/* <br> * Maximum number of characters in an ID not counting the null character. <br> * This allows room for "0xFFFF" or "-32768". <br> */ <br>#define CCHIDMAX                6 <br> <br>/* <br> * Width and height of a handle in pixels. <br> */ <br>#define CHANDLESIZE             6 <br> <br>/* <br> * Height in DU's of the edit field of a combobox. <br> */ <br>#define COMBOEDITHEIGHT         12 <br> <br> <br>/* <br> * Character constants. <br> */ <br>#define CHAR_NULL               L'\0' <br>#define CHAR_TAB                L'\t' <br>#define CHAR_NEWLINE            L'\n' <br>#define CHAR_RETURN             L'\r' <br>#define CHAR_BACKSLASH          L'\\' <br>#define CHAR_COLON              L':' <br>#define CHAR_DOT                L'.' <br>#define CHAR_UNDERLINE          L'_' <br>#define CHAR_ASTERISK           L'*' <br>#define CHAR_SLASH              L'/' <br>#define CHAR_POUND              L'#' <br>#define CHAR_ORSYMBOL           L'|' <br>#define CHAR_COMMA              L',' <br>#define CHAR_SPACE              L' ' <br>#define CHAR_DBLQUOTE           L'"' <br>#define CHAR_MINUS              L'-' <br>#define CHAR_PLUS               L'+' <br>#define CHAR_0                  L'0' <br>#define CHAR_A                  L'a' <br>#define CHAR_CAP_A              L'A' <br>#define CHAR_F                  L'f' <br>#define CHAR_CAP_F              L'F' <br>#define CHAR_X                  L'x' <br>#define CHAR_CAP_X              L'X' <br>#define CHAR_Z                  L'z' <br>#define CHAR_CAP_Z              L'Z' <br>#define CHAR_DOSEOF             L'\x1a' <br> <br> <br>/* <br> * Defines for the different drag handles. <br> */ <br>#define DRAG_CENTER             (-1) <br>#define DRAG_LEFTBOTTOM         0 <br>#define DRAG_BOTTOM             1 <br>#define DRAG_RIGHTBOTTOM        2 <br>#define DRAG_RIGHT              3 <br>#define DRAG_RIGHTTOP           4 <br>#define DRAG_TOP                5 <br>#define DRAG_LEFTTOP            6 <br>#define DRAG_LEFT               7 <br> <br>/* <br> * Count of lines to insert into listbox and combobox controls during <br> * test mode. <br> */ <br>#define CLBTESTLINES            25 <br> <br>#define CCHTEXTMAX              256 <br>#define CCHFILEBUFFER           256 <br> <br>/* <br> * Timer ID for the pre-drag timer. <br> */ <br>#define TID_PREDRAG             5 <br> <br>/* <br> * The id of the "unused" item.  This is the id value for controls <br> * that the user creates where they do not care about the value <br> * of the id because it will not be referenced in their code. <br> */ <br>#define IDUNUSED                (-1) <br> <br>/* <br> * Defines for the NextID() function. <br> */ <br>#define NEXTID_DIALOG           0           /* ID for a new dialog.         */ <br>#define NEXTID_CONTROL          1           /* ID for a new control.        */ <br>#define NEXTID_LABEL            2           /* ID for a new label.          */ <br> <br>/* <br> * Flags for the GridizeRect function.  They specify which points in <br> * the rectangle to apply gridding to. <br> */ <br>#define GRIDIZE_LEFT            0x0001      // Gridize the left edge. <br>#define GRIDIZE_BOTTOM          0x0002      // Gridize the bottom edge. <br>#define GRIDIZE_RIGHT           0x0004      // Gridize the right edge. <br>#define GRIDIZE_TOP             0x0008      // Gridize the top edge. <br>#define GRIDIZE_SAMESIZE        0x0010      // Don't change cx or cy. <br> <br>/* <br> * Default spacing constants. <br> */ <br>#define DEFCXGRID               1           // X grid. <br>#define DEFCYGRID               1           // Y grid. <br>#define DEFXMARGIN              6           // Top/bottom margin. <br>#define DEFYMARGIN              6           // Left/right margin. <br>#define DEFXMINPUSHSPACE        3           // Min. horizontal button spacing. <br>#define DEFXMAXPUSHSPACE        16          // Max. horizontal button spacing. <br>#define DEFYPUSHSPACE           3           // Vertical button spacing. <br>#define DEFXSPACE               6           // Horizontal control spacing. <br>#define DEFYSPACE               0           // Vertical control spacing. <br> <br>#define IC_UNKNOWN              (-1) <br>#define IC_BUTTON               0 <br>#define IC_SCROLLBAR            1 <br>#define IC_EDIT                 2 <br>#define IC_STATIC               3 <br>#define IC_LISTBOX              4 <br>#define IC_COMBOBOX             5 <br>#define IC_CUSTOM               6 <br>#define IC_DIALOG               7 <br>#define IC_WINDOW               8 <br>#define IC_RESFLAGS             9 <br>#define IC_EXSTYLE              10 <br> <br>#define MSG_DELETEDIALOG        0 <br>#define MSG_OUTOFMEMORY         1 <br>#define MSG_CANTCREATE          2 <br>#define MSG_SYMNOCHANGE         3 <br>#define MSG_IDSYMMISMATCH       4 <br>#define MSG_CLOSING             5 <br>#define MSG_BADRESFILE          6 <br>#define MSG_INCLCLOSING         7 <br>#define MSG_SYMEXISTS           8 <br>#define MSG_BADSYMBOLID         9 <br>#define MSG_LABELDUPID          10 <br>#define MSG_SELECTFIRST         11 <br>#define MSG_CTRLDUPID           12 <br>#define MSG_BADCUSTDLL          13 <br>#define MSG_NOCLIP              14 <br>#define MSG_INTERNAL            15 <br>#define MSG_NOMOUSE             16 <br>#define MSG_NOINIT              17 <br>#define MSG_GTZERO              18 <br>#define MSG_ICONNAMEHASBLANKS   19 <br>#define MSG_IDUPIDS             20 <br>#define MSG_CREATECTRLERROR     21 <br>#define MSG_CANTOPENRES         22 <br>#define MSG_CONFIRMDISCARD      23 <br>#define MSG_SYMNOTFOUND         24 <br>#define MSG_NOCLASS             25 <br>#define MSG_POSITIVENUM         26 <br>#define MSG_MEMERROR            27 <br>#define MSG_DLGNAMEHASBLANKS    28 <br>#define MSG_NODLGNAME           29 <br>#define MSG_CANTINITDLL         30 <br>#define MSG_NOICONNAME          31 <br>#define MSG_RESTOREDIALOG       32 <br>#define MSG_ZEROPOINTSIZE       33 <br>#define MSG_MINGTMAXSPACE       34 <br>#define MSG_CUSTCNTLINUSE       35 <br>#define MSG_CUSTALREADYLOADED   36 <br>#define MSG_CANTLOADDLL         37 <br>#define MSG_DLLBADEXPORTS       38 <br>#define MSG_DLLBADCOUNT         39 <br> <br>/* <br> * The following defines are used as masks in the styles arrays. <br> * They each define a set of bits, all of which have to be set <br> * properly for any of the individual styles to be considered <br> * to be a match.  They are used for groups of styles that do <br> * not have a single bit set.  In other words, these styles <br> * depend on having some bits OFF, as well as other bits ON. <br> */ <br>#define BS_ALL          (BS_PUSHBUTTON | BS_DEFPUSHBUTTON | BS_CHECKBOX | \ <br>                        BS_AUTOCHECKBOX | BS_RADIOBUTTON | BS_3STATE | \ <br>                        BS_AUTO3STATE | BS_GROUPBOX | BS_USERBUTTON | \ <br>                        BS_AUTORADIOBUTTON | BS_PUSHBOX | BS_OWNERDRAW) <br>#define SS_ALL          (SS_LEFT | SS_CENTER | SS_RIGHT | SS_ICON | \ <br>                        SS_BLACKRECT | SS_GRAYRECT | SS_WHITERECT | \ <br>                        SS_BLACKFRAME | SS_GRAYFRAME | SS_WHITEFRAME | \ <br>                        SS_USERITEM | SS_SIMPLE | SS_LEFTNOWORDWRAP) <br>#define CBS_ALL         (CBS_SIMPLE | CBS_DROPDOWN | CBS_DROPDOWNLIST) <br>#define SBS_ALL         (SBS_HORZ | SBS_VERT) <br>#define ES_ALIGN        (ES_LEFT | ES_CENTER | ES_RIGHT) <br>#define WS_CAPTIONALL   (WS_CAPTION | WS_BORDER | WS_DLGFRAME) <br> <br>/* <br> * Possible values for gState, which tells us about special modes <br> * (states) the editor is in. <br> */ <br>#define STATE_NORMAL        0   // Normal state. <br>#define STATE_DRAGGINGNEW   1   // Dragging a new control from the toolbox. <br>#define STATE_DRAGGING      2   // Dragging an existing control. <br>#define STATE_SELECTING     3   // Outline selecting is in progress. <br>#define STATE_PREDRAG       4   // During debounce period before dragging. <br> <br>/* <br> * Control type (W_*) constants.  These are used as indexes into the <br> * awcd structure that describes each type of class. <br> */ <br>#define W_NOTHING           (-1) <br> <br>#define W_TEXT              0 <br>#define W_EDIT              1 <br>#define W_GROUPBOX          2 <br>#define W_PUSHBUTTON        3 <br>#define W_CHECKBOX          4 <br>#define W_RADIOBUTTON       5 <br>#define W_COMBOBOX          6 <br>#define W_LISTBOX           7 <br>#define W_HORZSCROLL        8 <br>#define W_VERTSCROLL        9 <br>#define W_FRAME             10 <br>#define W_RECT              11 <br>#define W_ICON              12 <br>#define W_CUSTOM            13 <br> <br>#define W_DIALOG            14 <br> <br>/* <br> * Number of control types.  Note that this does NOT count the <br> * "W_DIALOG" type, only actual controls like "W_CHECKBOX", etc. <br> */ <br>#define CCONTROLS           14 <br> <br>/* <br> * The following defines have the location (by zero based position) <br> * of popup menu items.  If the menu arrangement is changed in the <br> * .RC file, these defines MUST be updated! <br> */ <br>#define MENUPOS_FILE            0 <br>#define MENUPOS_EDIT            1 <br>#define MENUPOS_ARRANGE         2 <br>#define MENUPOS_ARRANGEALIGN        0 <br>#define MENUPOS_ARRANGESPACE        1 <br>#define MENUPOS_ARRANGESIZE         2 <br>#define MENUPOS_ARRANGEPUSH         3 <br> <br> <br>/* <br> * Resource memory management flags. <br> */ <br>#define MMF_MOVEABLE            0x0010 <br>#define MMF_PURE                0x0020 <br>#define MMF_PRELOAD             0x0040 <br>#define MMF_DISCARDABLE         0x1000 <br> <br>#define DEFDLGMEMFLAGS          (MMF_MOVEABLE | MMF_PURE | MMF_DISCARDABLE) <br> <br>/* <br> * Default location of a new dialog. <br> */ <br>#define DEFDIALOGXPOS   6 <br>#define DEFDIALOGYPOS   18 <br> <br>/* <br> * Default point size for a new dialog's font.  The default face name <br> * is in the string IDS_DEFFONTNAME. <br> */ <br>#ifdef JAPAN <br>#define DEFPOINTSIZE    12 <br>#else <br>#define DEFPOINTSIZE    8 <br>#endif <br> <br> <br>#define FILE_NOSHOW             0x0001  /* Save without prompting for name  */ <br>#define FILE_INCLUDE            0x0002  /* Save/load include file           */ <br>#define FILE_RESOURCE           0x0004  /* Save/load resource file          */ <br>#define FILE_SAVEAS             0x0008  /* Save as (prompt for file name).  */ <br>#define FILE_DLL                0x0010  /* A custom control DLL file.       */ <br> <br> <br>/* <br> * Special case ordinal id values for the predefined control classes. <br> */ <br>#define ORDID_BUTTONCLASS           0x80 <br>#define ORDID_EDITCLASS             0x81 <br>#define ORDID_STATICCLASS           0x82 <br>#define ORDID_LISTBOXCLASS          0x83 <br>#define ORDID_SCROLLBARCLASS        0x84 <br>#define ORDID_COMBOBOXCLASS         0x85 <br> <br>/* <br> * This structure is used to link resources. <br> */ <br>typedef struct tagRESLINK { <br>    struct tagRESLINK *prlNext;     /* Next in list.                        */ <br>    BOOL fDlgResource;              /* TRUE if this is a dialog resource.   */ <br>    INT cbRes;                      /* Size of the resource.                */ <br>    HANDLE hRes;                    /* Handle to global memory with the res.*/ <br>    LPTSTR pszName;                 /* Name/ord of the resource (if dialog).*/ <br>    WORD wLanguage;                 /* Language identifier (if dialog).     */ <br>} RESLINK, *PRESLINK; <br> <br>/* <br> * Describes a window class. <br> * <br> * The flStyles field is the default styles that this control type will have <br> * when first created.  The flStylesBad field is the styles that can cause <br> * problems when manipulating the control in work mode, such as *_OWNERDRAW <br> * and so forth.  Controls with this style can be created with the editor <br> * and will be saved as such in the .DLG file, but the actual control created <br> * in work mode will not have any of these styles. <br> */ <br>typedef struct { <br>    INT iType;              /* Control type index, one of the W_ constants. */ <br>    DWORD flStyles;         /* Default control styles for this window class.*/ <br>    DWORD flStylesBad;      /* Styles NOT to use when creating this control.*/ <br>    DWORD flStylesTestBad;  /* Styles NOT to use in Test mode.              */ <br>    DWORD flExtStyle;       /* Default extended styles.                     */ <br>    INT cxDefault;          /* Default x size for this control.             */ <br>    INT cyDefault;          /* Default y size for this control.             */ <br>    INT iClass;             /* Index to the IC_ class for this window class.*/ <br>    LPTSTR pszClass;        /* Class name (for custom controls).            */ <br>    UINT fEmulated:1;       /* TRUE if this is an emulated custom control.  */ <br>    UINT fUnicodeDLL:1;     /* TRUE if the DLL functions are UNICODE.       */ <br>    UINT fHasText:1;        /* TRUE if this control type can have text.     */ <br>    UINT fSizeable:1;       /* TRUE if the control can be sized.            */ <br>    UINT fSizeToText:1;     /* TRUE if the control can be sized to its text.*/ <br>    INT idStylesDialog;     /* Styles dialog id for this window class.      */ <br>    WNDPROC pfnStylesDlgProc; /* Styles dialog procedure.                   */ <br>    INT HelpContext;        /* Help context ID for the styles dialog.       */ <br>    UINT idsTextDefault;    /* String id of default text.                   */ <br>    LPTSTR pszTextDefault;  /* Default text for a new control of this type. */ <br>    WNDPROC pfnOldWndProc;  /* Saves the old window proc when subclassing.  */ <br>    INT idbmCtrlType;       /* ID of the bitmap res. for this control type. */ <br>    HBITMAP hbmCtrlType;    /* Handle of the bitmap for this control type.  */ <br>    HBITMAP hbmCtrlTypeSel; /* The selected version of the above.           */ <br>    INT idbmToolBtnUp;      /* ID of "up" bmp res. for the Toolbox button.  */ <br>    HBITMAP hbmToolBtnUp;   /* hbm of "up" bitmap for the Toolbox button.   */ <br>    INT idbmToolBtnDown;    /* ID of "down" bmp res. for the Toolbox button.*/ <br>    HBITMAP hbmToolBtnDown; /* hbm of "down" bitmap for the Toolbox button. */ <br>    HANDLE hmod;            /* Custom control DLL module handle.            */ <br>    INT cStyleFlags;        /* Count of custom control style flags.         */ <br>    LPCCSTYLEFLAG aStyleFlags; /* Ptr to custom control style flag table.   */ <br>    PROC lpfnStyle;         /* Custom control Style function.               */ <br>    PROC lpfnSizeToText;    /* Custom control SizeToText function.          */ <br>    DWORD flCtrlTypeMask;   /* Mask for custom control type styles.         */ <br>} WINDOWCLASSDESC; <br>typedef WINDOWCLASSDESC *PWINDOWCLASSDESC; <br> <br>typedef struct tagCTYPE { <br>    struct tagCTYPE *npcNext;   /* Next CTYPE in linked list.               */ <br>    PWINDOWCLASSDESC pwcd;      /* Points to the window class desc. struct. */ <br>    HWND hwnd;                  /* Handle of control window.                */ <br>    HWND hwndDrag;              /* Handle of the drag window for this ctrl. */ <br>    DWORD flStyle;              /* Control style.                           */ <br>    DWORD flExtStyle;           /* Control extended style.                  */ <br>    INT id;                     /* Control window id.                       */ <br>    LPTSTR text;                /* Text for control window.                 */ <br>    RECT rc;                    /* Location and size of the control.        */ <br>    UINT fSelected:1;           /* TRUE if the control is selected.         */ <br>    UINT fGroupEnd:1;           /* TRUE if ctrl is the last one in a group. */ <br>} CTYPE; <br>typedef CTYPE *NPCTYPE; <br> <br>typedef struct tagLABEL { <br>    struct tagLABEL *npNext;    /* pointer to next in the list              */ <br>    LPTSTR pszLabel;            /* Name of the symbol                       */ <br>    INT id;                     /* ID value for this label                  */ <br>    INT idOrig;                 /* Original ID value for this label         */ <br>    DWORD fpos;                 /* File pointer to "#define" in include file*/ <br>    INT nValueOffset;           /* Offset to id value start from fpos       */ <br>} LABEL; <br>typedef LABEL *NPLABEL; <br> <br>/* <br> * Structure that is used to link together a list of custom controls. <br> * Each link points to an associated WINDOWCLASSDESC structure that <br> * defines the custom control type in detail. <br> */ <br>typedef struct tagCUSTLINK { <br>    struct tagCUSTLINK *pclNext;/* Next CUSTLINK in linked list.            */ <br>    LPTSTR pszFileName;         /* Full path to DLL file (NULL if emulated).*/ <br>    LPTSTR pszDesc;             /* Short, descriptive text for the control. */ <br>    PWINDOWCLASSDESC pwcd;      /* Points to the window class desc. struct. */ <br>} CUSTLINK, *PCUSTLINK; <br> <br>typedef struct { <br>    UINT ids;                   /* String id for the message text.          */ <br>    UINT fMessageBox;           /* Flags for the MessageBox function.       */ <br>} MESSAGEDATA; <br> <br>/* <br> * Class Style structure.  Specifies the style bits that describe <br> * each style, along with a mask that specifies the bits to compare <br> * when looking for this style.  The mask is necessary when more than <br> * one bit specifies a style.  For example, look at the BS_* styles, <br> * which currently use the low 3 bits of the style flag to specify <br> * eight different styles.  The idControl field is the checkbox or <br> * radio button control id in the styles dialogs that corresponds to <br> * this particular style, or zero if it is not settable by the user. <br> */ <br>typedef struct { <br>    DWORD flStyle;              /* Style bits that identify this style.     */ <br>    DWORD flStyleMask;          /* Mask with the relevant bits.             */ <br>    INT idControl;              /* ID of the control in the styles dlg.     */ <br>} CLASSSTYLE, *PCLASSSTYLE; <br> <br>/* <br> * RC Keyword structure.  This describes a predefined RC keyword, like <br> * "RADIOBUTTON" and "LISTBOX". <br> * <br> * rckwd, prckwd <br> */ <br>typedef struct { <br>    DWORD flStyle;              /* Style that identifies this keyword.      */ <br>    DWORD flStyleMask;          /* Mask with the relevant bits.             */ <br>    DWORD flStyleDefault;       /* Other style bits implicitly defined.     */ <br>    UINT idsKeyword;            /* The RC keyword.                          */ <br>    BOOL fHasText;              /* TRUE if this keywd has a text field.     */ <br>} RCKEYWORD, *PRCKEYWORD; <br> <br>/* <br> * Class style description structure.  These contain information on each <br> * of the IC_* constants. <br> * <br> * csd, pcsd <br> */ <br>typedef struct { <br>    UINT idsClass;              /* Class string for this class.             */ <br>    PCLASSSTYLE pacs;           /* Pointer to class styles array.           */ <br>    INT cClassStyles;           /* Count of class styles.                   */ <br>    UINT idsStylesStart;        /* Starting index to style strings.         */ <br>    PRCKEYWORD parckwd;         /* Pointer to predefined RC keywords.       */ <br>    INT cKeywords;              /* Count of predefined RC keywords.         */ <br>    WORD idOrd;                 /* Predefined ordinal id for this class.    */ <br>} CLASSSTYLEDESC; <br> <br>/* <br> * One single entry for an environment setting saved in the <br> * profile file.  Used by ReadEnv and WriteEnv. <br> */ <br>typedef struct _INIENTRY { <br>    LPTSTR pszKeyName; <br>    PINT pnVar; <br>    INT nDefault; <br>    INT nSave; <br>} INIENTRY; <br> <br>/* <br> * This structure defines additional information on the dialog being <br> * edited that only pertains to dialogs, not controls.  This information <br> * is therefore in a separate structure rather than the CTYPE structure. <br> * Any dialog specific information that can be changed using the Dialog <br> * Styles dialog must be contained in this structure. <br> */ <br>typedef struct { <br>    WORD fResFlags;                 /* Dialog resource memory flags.        */ <br>    WORD wLanguage;                 /* Language identifier for the dialog.  */ <br>    LPTSTR pszClass;                /* The dialog's class (or NULL).        */ <br>    LPTSTR pszMenu;                 /* The dialog's menu (or NULL).         */ <br>    DWORD DataVersion;              /* Data Version data for this dialog.   */ <br>    DWORD Version;                  /* Version data for this dialog.        */ <br>    DWORD Characteristics;          /* Characteristics data for this dialog.*/ <br>    INT nPointSize;                 /* Point size of the dialog's font.     */ <br>    TCHAR szFontName[LF_FACESIZE];  /* Face name of the dialog's font.      */ <br>} DIALOGINFO, *PDIALOGINFO; <br> <br>/* <br> * This structure contains the globals that describe the current <br> * dialog being edited. <br> */ <br>typedef struct { <br>    NPCTYPE npc;                    /* CTYPE structure for the dialog.      */ <br>    LPTSTR pszDlgName;              /* Current dialog's name.               */ <br>    PRESLINK prl;                   /* NULL or the dlg's resource link.     */ <br>    BOOL fFontSpecified;            /* TRUE if a font is set for the dialog.*/ <br>    HFONT hFont;                    /* Font handle of the dialog's font.    */ <br>    INT cxChar;                     /* Pixel width of character box.        */ <br>    INT cyChar;                     /* Pixel height of character box.       */ <br>    DIALOGINFO di;                  /* Additional info for current dialog.  */ <br>} CURRENTDLG; <br> <br>/* <br> * Structure that maps a subject (like a menu id or a dialog id) with <br> * a help context to pass in to WinHelp. <br> */ <br>typedef struct { <br>    INT idSubject;                  /* Subject, usually a menu or dialog id.*/ <br>    INT HelpContext;                /* The matching help context.           */ <br>} HELPMAP; <br>typedef HELPMAP *PHELPMAP; <br> <br> <br>/* <br> * The aligned ordinal structure.  Ordinals start with a word that is <br> * always 0xffff, followed by a word that contains the ordinal id. <br> */ <br>typedef struct { <br>    WORD wReserved; <br>    WORD wOrdID; <br>} ORDINAL, *PORDINAL; <br> <br> <br>typedef struct { <br>    DWORD DataSize;                 // Size of data. <br>    DWORD HeaderSize;               // Size of the resource header. <br>} RES, *PRES; <br> <br>typedef struct { <br>    DWORD DataVersion;              // Predefined resource data version. <br>    WORD MemoryFlags;               // Resource memory flags. <br>    WORD LanguageId;                // UNICODE support for NLS. <br>    DWORD Version;                  // Version of the resource data. <br>    DWORD Characteristics;          // Characteristics of the data. <br>} RES2, *PRES2; <br> <br> <br>typedef struct { <br>    DWORD lStyle;                   // Style for the dialog. <br>    DWORD lExtendedStyle;           // The extended style. <br>    WORD NumberOfItems;             // Number of controls. <br>    WORD x;                         // Starting x location. <br>    WORD y;                         // Starting y location. <br>    WORD cx;                        // Dialog width. <br>    WORD cy;                        // Dialog height. <br>} *PDIALOGBOXHEADER; <br> <br>#define SIZEOF_DIALOGBOXHEADER  (                               \ <br>    sizeof(DWORD) +                 /* lStyle           */      \ <br>    sizeof(DWORD) +                 /* lExtendedStyle   */      \ <br>    sizeof(WORD) +                  /* NumberOfItems    */      \ <br>    sizeof(WORD) +                  /* x                */      \ <br>    sizeof(WORD) +                  /* y                */      \ <br>    sizeof(WORD) +                  /* cx               */      \ <br>    sizeof(WORD)                    /* cy               */      \ <br>    ) <br> <br> <br>typedef struct { <br>    DWORD lStyle;                   // Style for the control. <br>    DWORD lExtendedStyle;           // The extended style. <br>    WORD x;                         // Starting x location. <br>    WORD y;                         // Starting y location. <br>    WORD cx;                        // Control width. <br>    WORD cy;                        // Control height. <br>    WORD wId;                       // Control id. <br>} *PCONTROLDATA; <br> <br>#define SIZEOF_CONTROLDATA  (                                   \ <br>    sizeof(DWORD) +                 /* lStyle           */      \ <br>    sizeof(DWORD) +                 /* lExtendedStyle   */      \ <br>    sizeof(WORD) +                  /* x                */      \ <br>    sizeof(WORD) +                  /* y                */      \ <br>    sizeof(WORD) +                  /* cx               */      \ <br>    sizeof(WORD) +                  /* cy               */      \ <br>    sizeof(WORD))                   /* wId              */ <br> <br> <br>/* <br> * SubLanguage table structure.  This structure describes each entry of a <br> * sub language table.  These tables are pointed to by each entry in <br> * the language table. <br> */ <br>typedef struct { <br>    WORD wSubLang;                  // SubLanguage value. <br>    INT idsSubLang;                 // String id of SUBLANG_* define. <br>    INT idsSubLangDesc;             // String id of sub-lang description. <br>} SUBLANGTABLE, *PSUBLANGTABLE; <br> <br>/* <br> * Language table structure.  This structure describes each entry in the <br> * language table, which describes each unicode language. <br> */ <br>typedef struct { <br>    WORD wPrimary;                  // Language primary value. <br>    INT idsLang;                    // String id of LANG_* define. <br>    INT idsLangDesc;                // String id of language description. <br>    INT cSubLangs;                  // Number of sublanguages for this lang. <br>    PSUBLANGTABLE asl;              // Points to table of sublanguages. <br>} LANGTABLE; <br> <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

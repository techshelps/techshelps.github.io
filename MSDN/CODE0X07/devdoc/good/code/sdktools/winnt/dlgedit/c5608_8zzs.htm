<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GLOBALS.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5608"></a>GLOBALS.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>/****************************** Module Header ******************************* <br>* Module Name: globals.c <br>* <br>* Contains global data for the dialog box editor. <br>* <br>****************************************************************************/ <br> <br>#include "dlgedit.h" <br>#include "dlgextrn.h"           /* Including this verifies they are synched.*/ <br>#include "dlgfuncs.h" <br>#include "dialogs.h" <br>#include "dlghelp.h" <br> <br>HANDLE ghInst;                  /* Application instance handle.         */ <br>HMENU ghMenuMain;               /* Main menu handle.                    */ <br>PRESLINK gprlHead = NULL;       /* Head of the linked list of resources.*/ <br>CURRENTDLG gcd;                 /* Describes the current dialog.        */ <br>HPEN hpenDarkGray;              /* A dark gray pen.                     */ <br>HANDLE ghAccTable;              /* The accelerator table handle.        */ <br>INT gMenuSelected = 0;          /* Currently selected menu item.        */ <br>HBITMAP ghbmDragHandle = NULL;  /* Handle for the drag handle bitmap.   */ <br>HBITMAP ghbmDragHandle2 = NULL; /* Handle for hollow drag handle bitmap.*/ <br>HDC ghDCMem = NULL;             /* Memory DC for drawing bitmaps.       */ <br>INT gCurTool = W_NOTHING;       /* Currently selected tool.             */ <br>PWINDOWCLASSDESC gpwcdCurTool = NULL; /* Describes current tool.        */ <br>BOOL gfToolLocked = FALSE;      /* TRUE if a tool is locked down.       */ <br>PCUSTLINK gpclHead = NULL;      /* Head of custom control linked list.  */ <br> <br>/* <br> * When the dialog editor displays one of its own dialogs, this value <br> * will contain the resource id of it.  It is zero if there is not a <br> * dialog up. <br> */ <br>INT gidCurrentDlg = 0; <br> <br>/* <br> * Ordinal for the icon control to display in the dialog.  It will be <br> * initialized to one of the editor's own icons. <br> */ <br>ORDINAL gordIcon; <br> <br>/* <br> * Bitmap handles for the up and down W_NOTHING (pointer) tool bitmaps. <br> */ <br>HBITMAP ghbmPointerToolUp = NULL; <br>HBITMAP ghbmPointerToolDown = NULL; <br> <br>/*-- Initialized "Preferences" Data ------------------------------------*/ <br> <br>/* <br> * Initialization data structure.  This describes each profile entry <br> * that is contained in the initialization file. <br> */ <br>INIENTRY gaie[] = { <br>    { L"fHexMode",      &amp;gfHexMode,         FALSE,              0 }, <br>    { L"fTranslateMode",&amp;gfTranslateMode,   FALSE,              0 }, <br>    { L"fShowToolbox",  &amp;gfShowToolbox,     TRUE,               0 }, <br>    { L"fUseNewKeywords",&amp;gfUseNewKeywords, TRUE,               0 }, <br>    { L"cxGrid",        &amp;gcxGrid,           DEFCXGRID,          0 }, <br>    { L"cyGrid",        &amp;gcyGrid,           DEFCYGRID,          0 }, <br>    { L"xMargin",       &amp;gxMargin,          DEFXMARGIN,         0 }, <br>    { L"yMargin",       &amp;gyMargin,          DEFYMARGIN,         0 }, <br>    { L"xSpace",        &amp;gxSpace,           DEFXSPACE,          0 }, <br>    { L"ySpace",        &amp;gySpace,           DEFYSPACE,          0 }, <br>    { L"xMinPushSpace", &amp;gxMinPushSpace,    DEFXMINPUSHSPACE,   0 }, <br>    { L"xMaxPushSpace", &amp;gxMaxPushSpace,    DEFXMAXPUSHSPACE,   0 }, <br>    { L"yPushSpace",    &amp;gyPushSpace,       DEFYPUSHSPACE,      0 }, <br>    { NULL,             NULL,               0,                  0 } <br>}; <br> <br>BOOL gfHexMode;                 /* TRUE if in "hex" mode.               */ <br>BOOL gfTranslateMode;           /* TRUE if in "translate" mode.         */ <br>BOOL gfShowToolbox;             /* TRUE if Toolbox is to be shown.      */ <br>BOOL gfUseNewKeywords;          /* FALSE to only use "CONTROL" keyword. */ <br>INT gcxGrid;                    /* Current X grid.                      */ <br>INT gcyGrid;                    /* Current Y grid.                      */ <br>INT gxMargin;                   /* Top/bottom margin.                   */ <br>INT gyMargin;                   /* Left/right margin.                   */ <br>INT gxSpace;                    /* Horizontal control spacing.          */ <br>INT gySpace;                    /* Vertical control spacing.            */ <br>INT gxMinPushSpace;             /* Minimum horizontal button spacing.   */ <br>INT gxMaxPushSpace;             /* Maximum horizontal button spacing.   */ <br>INT gyPushSpace;                /* Vertical button spacing.             */ <br> <br>TCHAR szAppPos[] = L"AppPos";   /* App window's position keyname.       */ <br>TCHAR szTBPos[] = L"TBPos";     /* Toolbox window's position keyname.   */ <br>TCHAR szCustomDLL[] = L"CustomDLL";/* Section name for DLL cust. cntls. */ <br> <br>/*-- Sundry Handles.----------------------------------------------------*/ <br>HWND hwndStatus = NULL;         /* Status ribbon window handle.         */ <br>HWND ghwndToolbox = NULL;       /* Toolbox window handle.               */ <br>HWND ghwndTestDlg = NULL;       /* Handle of the Test Mode dialog.      */ <br>HWND ghwndMain = NULL;          /* Main application window.             */ <br>HWND ghwndSubClient = NULL;     /* The "fake" client area.              */ <br>HWND ghwndTrackOver = NULL;     /* Window being tracked over.           */ <br> <br>/*-- Some System constants.---------------------------------------------*/ <br>INT gcxSysChar;                 /* Pixel width of system font char box. */ <br>INT gcySysChar;                 /* Pixel height of system font char box.*/ <br>INT gcyBorder;                  /* System height of a border.           */ <br>INT gcxPreDragMax;              /* Max X mouse move during pre-drag.    */ <br>INT gcyPreDragMax;              /* Max Y mouse move during pre-drag.    */ <br>INT gmsecPreDrag;               /* The milliseconds that pre-drag lasts.*/ <br>INT gcyPixelsPerInch;           /* Vertical pixels/inch of system.      */ <br>INT gcyStatus;                  /* Saves height of the status window.   */ <br> <br>/*-- Some state variables.----------------------------------------------*/ <br>INT gState = STATE_NORMAL;      /* Has the editor "state" or mode.      */ <br>BOOL gfResChged = FALSE;        /* Tell if RES has changed              */ <br>BOOL gfIncChged = FALSE;        /* Tell if include has changed          */ <br>BOOL gfDlgChanged = FALSE;      /* TRUE if current dialog has changed.  */ <br>INT gcSelected = 0;             /* Count of selected windows.           */ <br>BOOL gfTestMode = FALSE;        /* TRUE if in "test" mode.              */ <br>BOOL gfDisabled = FALSE;        /* TRUE if editing is disabled for now. */ <br>BOOL gfEditingDlg = FALSE;      /* TRUE means a dlg is picked to edit.  */ <br>BOOL gfDlgSelected = FALSE;     /* TRUE if the dialog has the selection.*/ <br> <br>/* <br> * Contains the window rectangle, in window units, for the "client" <br> * area for the currently chosen dialog being edited.  This rectangle <br> * is relative to the dialog box window.  The xLeft and yBottom fields <br> * contain the offset from the window origin of the dialog box to the <br> * origin of the "client" area. <br> */ <br>RECT grcDlgClient; <br> <br>/* <br> * Contains a rectangle that surrounds all the existing controls.  This <br> * is used during tracking of the dialog to limit the minimum size that <br> * the dialog can be sized to. <br> */ <br>RECT grcMinDialog; <br> <br>/* <br> * Contains the offset from the origin of the currently selected <br> * control to the mouse pointer.  This is updated when a control <br> * is clicked on and is used for dragging calculations. <br> */ <br>POINT gptCursorOffset; <br> <br>/* <br> * Contains the rectangle that surrounds the selected control(s).  This <br> * rectangle is only valid if there are selected controls. <br> */ <br>RECT grcSelected; <br> <br>/* <br> * Contains the rectangle that surrounds the control(s) that are being <br> * copied.  This is also used during a clipboard paste operation.  In <br> * that case, it contains the rectangle that surrounds the control(s) <br> * as they are defined in the res image. <br> */ <br>RECT grcCopy; <br> <br>/* <br> * These contain the current location of the tracking rectangle when <br> * dragging a control.  The values for grcTrackDU are in Dialog Units <br> * (DU's) and the values in grcTrackWin are in window units.  The <br> * grcTrackWin values will only be valid if gfTrackRectShown is TRUE; <br> */ <br>RECT grcTrackDU;                /* Track rect in dialog units.          */ <br>RECT grcTrackWin;               /* Track rect in window units.          */ <br>BOOL gfTrackRectShown = FALSE;  /* TRUE if track rect is visible.       */ <br>HDC ghDCTrack;                  /* Clip DC used when tracking.          */ <br> <br>/* <br> * Contains the current drag handle that is being tracked.  This will <br> * be one of the DRAG_* constants. <br> */ <br>INT gHandleHit = DRAG_CENTER; <br> <br>/* <br> * Contains the overhang that is allowed during the current tracking <br> * operation.  This is used by various routines during dragging so <br> * that limiting the tracking to the dialog boundaries works properly. <br> * In actuality, this is only non-zero when a combo box control is <br> * being drapped or dragged.  It will be the height of the listbox <br> * portion of the combo.  This is how combos are allowed to extend <br> * below the bottom of the dialog. <br> */ <br>INT gnOverHang;                 /* Maximum overhang during the drag.    */ <br> <br>/* <br> * This pointer is either NULL, or else it points to a dialog resource. <br> * It is used when copying dialogs/controls, either with the Duplicate <br> * command or pasting from the clipboard. <br> */ <br>PRES gpResCopy;                 /* Copy of dialog/controls.             */ <br> <br>/*-- CTYPE linked lists.------------------------------------------------*/ <br>NPCTYPE npcHead = NULL;         /* Linked List of controls.             */ <br>INT cWindows = 0;               /* Number of Controls in pctype list.   */ <br> <br>/* <br> * Pointer to the CTYPE structure for the currently selected control. <br> * This will be NULL if there is no control selected. <br> */ <br>NPCTYPE gnpcSel = NULL; <br> <br>/*-- Cursors used by editor.--------------------------------------------*/ <br>HCURSOR hcurArrow = NULL;       /* Normal arrow cursor.                 */ <br>HCURSOR hcurWait = NULL;        /* User Wait cursor, Hourglass.         */ <br>HCURSOR hcurOutSel = NULL;      /* Outline selection cursor.            */ <br>HCURSOR hcurMove = NULL;        /* System "Move" cursor.                */ <br>HCURSOR hcurInsert = NULL;      /* Insert cursor for Order/Group dialog.*/ <br>HCURSOR hcurDropTool = NULL;    /* Cursor for when dropping new ctrls.  */ <br>HCURSOR hcurSizeNESW = NULL;    /* System sizing "NESW" cursor.         */ <br>HCURSOR hcurSizeNS = NULL;      /* System sizing "NS" cursor.           */ <br>HCURSOR hcurSizeNWSE = NULL;    /* System sizing "NWSE" cursor.         */ <br>HCURSOR hcurSizeWE = NULL;      /* System sizing "WE" cursor.           */ <br>HBITMAP hbmTabStop = NULL;      /* Bitmap for showing WS_TABSTOP style. */ <br>HBITMAP hbmTabStopSel = NULL;   /* Selected version of the above.       */ <br> <br>/*-- Window Class Strings.----------------------------------------------*/ <br>TCHAR szMainClass[] = L"DlgEdit";/* Application window class.           */ <br>TCHAR szDragClass[] = L"Drag";  /* Class for drag handle windows.       */ <br>TCHAR szSubClientClass[] = <br>    L"SubClient";               /* Short client area window class.      */ <br>TCHAR szToolboxClass[] = <br>    L"Toolbox";                 /* Toolbox window class.                */ <br>TCHAR szToolBtnClass[] = <br>    L"ToolBtn";                 /* Toolbox button window class.         */ <br>TCHAR szCustomClass[] = <br>    L"DlgCustom";               /* Our custom emulator class.           */ <br> <br>/*-- Miscellaneous variables.-------------------------------------------*/ <br>UINT fmtDlg;                    /* The Dialog Clipboard format          */ <br>TCHAR szEmpty[] = L"";          /* An empty string.                     */ <br>HHOOK ghhkMsgFilter;            /* Hook handle for message filter func. */ <br> <br>/*-- Buffers.-----------------------------------------------------------*/ <br>TCHAR szFullResFile[CCHMAXPATH];    /* Full resource file name          */ <br>LPTSTR pszResFile;                  /* Points to resource file name     */ <br>TCHAR szFullIncludeFile[CCHMAXPATH];/* Full include file name           */ <br>LPTSTR pszIncludeFile;              /* Points to include file name      */ <br>TCHAR gszHelpFile[CCHMAXPATH];      /* Path to the help file.           */ <br> <br>/* <br> * Write buffer and index into it.  This buffer is used by several <br> * sections to write out the different files.  Note that only one <br> * file can be written out at a time using these globals. <br> */ <br>TCHAR gachWriteBuffer[CCHFILEBUFFER];/* Buffer for written file data.   */ <br>INT cbWritePos;                     /* Pointer into gachWriteBuffer.    */ <br> <br>/*-- Include Data.------------------------------------------------------*/ <br>NPLABEL plInclude = NULL;       /* Pointer to Include data              */ <br>NPLABEL plDelInclude = NULL;    /* Pointer to deleted includes          */ <br> <br>/* <br> * Describes each window class.  Indexed by the W_ defined constants. <br> * The define CCONTROLS needs to be updated if controls are added or <br> * removed from this array.  Note that CCONTROLS does NOT count the <br> * W_DIALOG type as a control, however. <br> */ <br>WINDOWCLASSDESC awcd[] = { <br>    /* <br>     * W_TEXT <br>     */ <br>    { <br>        W_TEXT, <br>        WS_CHILD | WS_GROUP | WS_VISIBLE | SS_LEFT, <br>        WS_DISABLED, <br>        0, <br>        0, <br>        20, 8, <br>        IC_STATIC, NULL, <br>        FALSE, FALSE, TRUE, TRUE, TRUE, <br>        DID_TEXTSTYLES, (WNDPROC)GenericStylesDlgProc, <br>        HELPID_TEXTSTYLES, IDS_DEFTXTTEXT, NULL, NULL, <br>        IDBM_CTTEXT, NULL, NULL, <br>        IDBM_TUTEXT, NULL, IDBM_TDTEXT, NULL, <br>        NULL, 0, NULL, NULL, NULL, 0 <br>    }, <br>    /* <br>     * W_EDIT <br>     */ <br>    { <br>        W_EDIT, <br>        WS_CHILD | WS_VISIBLE | WS_TABSTOP | WS_BORDER | ES_LEFT | <br>        ES_AUTOHSCROLL, <br>        WS_DISABLED, <br>        0, <br>        0, <br>        32, 12, <br>        IC_EDIT, NULL, <br>        FALSE, FALSE, FALSE, TRUE, FALSE, <br>        DID_EDITSTYLES, (WNDPROC)EditStylesDlgProc, <br>        HELPID_EDITSTYLES, IDS_NULL, NULL, NULL, <br>        IDBM_CTEDIT, NULL, NULL, <br>        IDBM_TUEDIT, NULL, IDBM_TDEDIT, NULL, <br>        NULL, 0, NULL, NULL, NULL, 0 <br>    }, <br>    /* <br>     * W_GROUPBOX <br>     */ <br>    { <br>        W_GROUPBOX, <br>        WS_CHILD | WS_VISIBLE | BS_GROUPBOX, <br>        WS_DISABLED, <br>        0, <br>        0, <br>        48, 40, <br>        IC_BUTTON, NULL, <br>        FALSE, FALSE, TRUE, TRUE, FALSE, <br>        DID_GROUPBOXSTYLES, (WNDPROC)GenericStylesDlgProc, <br>        HELPID_GROUPBOXSTYLES, IDS_DEFTXTGROUP, NULL, NULL, <br>        IDBM_CTGROUP, NULL, NULL, <br>        IDBM_TUGROUP, NULL, IDBM_TDGROUP, NULL, <br>        NULL, 0, NULL, NULL, NULL, 0 <br>    }, <br>    /* <br>     * W_PUSHBUTTON <br>     */ <br>    { <br>        W_PUSHBUTTON, <br>        WS_CHILD | WS_VISIBLE | BS_PUSHBUTTON | WS_TABSTOP, <br>        WS_DISABLED, <br>        0, <br>        0, <br>        40, 14, <br>        IC_BUTTON, NULL, <br>        FALSE, FALSE, TRUE, TRUE, TRUE, <br>        DID_PUSHBUTTONSTYLES, (WNDPROC)PushButtonStylesDlgProc, <br>        HELPID_PUSHBUTTONSTYLES, IDS_DEFTXTPUSHBUTTON, NULL, NULL, <br>        IDBM_CTPUSH, NULL, NULL, <br>        IDBM_TUPUSH, NULL, IDBM_TDPUSH, NULL, <br>        NULL, 0, NULL, NULL, NULL, 0 <br>    }, <br>    /* <br>     * W_CHECKBOX <br>     */ <br>    { <br>        W_CHECKBOX, <br>        WS_CHILD | WS_VISIBLE | BS_AUTOCHECKBOX | WS_TABSTOP, <br>        WS_DISABLED, <br>        0, <br>        0, <br>        40, 10, <br>        IC_BUTTON, NULL, <br>        FALSE, FALSE, TRUE, TRUE, TRUE, <br>        DID_CHECKBOXSTYLES, (WNDPROC)CheckBoxStylesDlgProc, <br>        HELPID_CHECKBOXSTYLES, IDS_DEFTXTCHECKBOX, NULL, NULL, <br>        IDBM_CTCHECK, NULL, NULL, <br>        IDBM_TUCHECK, NULL, IDBM_TDCHECK, NULL, <br>        NULL, 0, NULL, NULL, NULL, 0 <br>    }, <br>    /* <br>     * W_RADIOBUTTON <br>     */ <br>    { <br>        W_RADIOBUTTON, <br>        WS_CHILD | WS_VISIBLE | BS_AUTORADIOBUTTON, <br>        WS_DISABLED, <br>        0, <br>        0, <br>        39, 10, <br>        IC_BUTTON, NULL, <br>        FALSE, FALSE, TRUE, TRUE, TRUE, <br>        DID_RADIOBUTTONSTYLES, (WNDPROC)RadioButtonStylesDlgProc, <br>        HELPID_RADIOBUTTONSTYLES, IDS_DEFTXTRADIOBUTTON, NULL, NULL, <br>        IDBM_CTRADIO, NULL, NULL, <br>        IDBM_TURADIO, NULL, IDBM_TDRADIO, NULL, <br>        NULL, 0, NULL, NULL, NULL, 0 <br>    }, <br>    /* <br>     * W_COMBOBOX <br>     */ <br>    { <br>        W_COMBOBOX, <br>        WS_CHILD | WS_VISIBLE | WS_VSCROLL | WS_TABSTOP | CBS_DROPDOWN | <br>        CBS_SORT, <br>        WS_DISABLED | CBS_OWNERDRAWFIXED | CBS_OWNERDRAWVARIABLE | <br>        CBS_HASSTRINGS, <br>        CBS_OWNERDRAWFIXED | CBS_OWNERDRAWVARIABLE | CBS_HASSTRINGS, <br>        0, <br>        48, 35, <br>        IC_COMBOBOX, NULL, <br>        FALSE, FALSE, FALSE, TRUE, FALSE, <br>        DID_COMBOBOXSTYLES, (WNDPROC)ComboBoxStylesDlgProc, <br>        HELPID_COMBOBOXSTYLES, IDS_NULL, NULL, NULL, <br>        IDBM_CTCOMBO, NULL, NULL, <br>        IDBM_TUCOMBO, NULL, IDBM_TDCOMBO, NULL, <br>        NULL, 0, NULL, NULL, NULL, 0 <br>    }, <br>    /* <br>     * W_LISTBOX <br>     */ <br>    { <br>        W_LISTBOX, <br>        WS_CHILD | WS_VISIBLE | LBS_STANDARD | WS_TABSTOP, <br>        WS_DISABLED | LBS_OWNERDRAWFIXED | LBS_OWNERDRAWVARIABLE | <br>        LBS_HASSTRINGS | LBS_NODATA, <br>        LBS_OWNERDRAWFIXED | LBS_OWNERDRAWVARIABLE | LBS_HASSTRINGS | <br>        LBS_NODATA, <br>        0, <br>        48, 40, <br>        IC_LISTBOX, NULL, <br>        FALSE, FALSE, FALSE, TRUE, FALSE, <br>        DID_LISTBOXSTYLES, (WNDPROC)ListBoxStylesDlgProc, <br>        HELPID_LISTBOXSTYLES, IDS_NULL, NULL, NULL, <br>        IDBM_CTLIST, NULL, NULL, <br>        IDBM_TULIST, NULL, IDBM_TDLIST, NULL, <br>        NULL, 0, NULL, NULL, NULL, 0 <br>    }, <br>    /* <br>     * W_HORZSCROLL <br>     */ <br>    { <br>        W_HORZSCROLL, <br>        WS_CHILD | WS_VISIBLE | SBS_HORZ, <br>        WS_DISABLED, <br>        0, <br>        0, <br>        48, 0, <br>        IC_SCROLLBAR, NULL, <br>        FALSE, FALSE, FALSE, TRUE, FALSE, <br>        DID_HORZSCROLLSTYLES, (WNDPROC)GenericStylesDlgProc, <br>        HELPID_HORZSCROLLSTYLES, IDS_NULL, NULL, NULL, <br>        IDBM_CTHSCROL, NULL, NULL, <br>        IDBM_TUHSCROL, NULL, IDBM_TDHSCROL, NULL, <br>        NULL, 0, NULL, NULL, NULL, 0 <br>    }, <br>    /* <br>     * W_VERTSCROLL <br>     */ <br>    { <br>        W_VERTSCROLL, <br>        WS_CHILD | WS_VISIBLE | SBS_VERT, <br>        WS_DISABLED, <br>        0, <br>        0, <br>        0, 40, <br>        IC_SCROLLBAR, NULL, <br>        FALSE, FALSE, FALSE, TRUE, FALSE, <br>        DID_VERTSCROLLSTYLES, (WNDPROC)GenericStylesDlgProc, <br>        HELPID_VERTSCROLLSTYLES, IDS_NULL, NULL, NULL, <br>        IDBM_CTVSCROL, NULL, NULL, <br>        IDBM_TUVSCROL, NULL, IDBM_TDVSCROL, NULL, <br>        NULL, 0, NULL, NULL, NULL, 0 <br>    }, <br>    /* <br>     * W_FRAME <br>     */ <br>    { <br>        W_FRAME, <br>        WS_CHILD | WS_VISIBLE | SS_BLACKFRAME, <br>        WS_DISABLED, <br>        0, <br>        0, <br>        20, 16, <br>        IC_STATIC, NULL, <br>        FALSE, FALSE, FALSE, TRUE, FALSE, <br>        DID_FRAMESTYLES, (WNDPROC)GenericStylesDlgProc, <br>        HELPID_FRAMESTYLES, IDS_NULL, NULL, NULL, <br>        IDBM_CTFRAME, NULL, NULL, <br>        IDBM_TUFRAME, NULL, IDBM_TDFRAME, NULL, <br>        NULL, 0, NULL, NULL, NULL, 0 <br>    }, <br>    /* <br>     * W_RECT <br>     */ <br>    { <br>        W_RECT, <br>        WS_CHILD | WS_VISIBLE | SS_BLACKRECT, <br>        WS_DISABLED, <br>        0, <br>        0, <br>        20, 16, <br>        IC_STATIC, NULL, <br>        FALSE, FALSE, FALSE, TRUE, FALSE, <br>        DID_RECTSTYLES, (WNDPROC)GenericStylesDlgProc, <br>        HELPID_RECTSTYLES, IDS_NULL, NULL, NULL, <br>        IDBM_CTRECT, NULL, NULL, <br>        IDBM_TURECT, NULL, IDBM_TDRECT, NULL, <br>        NULL, 0, NULL, NULL, NULL, 0 <br>    }, <br>    /* <br>     * W_ICON <br>     */ <br>    { <br>        W_ICON, <br>        WS_CHILD | WS_VISIBLE | SS_ICON, <br>        WS_DISABLED, <br>        0, <br>        0, <br>        0, 0, <br>        IC_STATIC, NULL, <br>        FALSE, FALSE, TRUE, FALSE, FALSE, <br>        DID_ICONSTYLES, (WNDPROC)GenericStylesDlgProc, <br>        HELPID_ICONSTYLES, IDS_NULL, NULL, NULL, <br>        IDBM_CTICON, NULL, NULL, <br>        IDBM_TUICON, NULL, IDBM_TDICON, NULL, <br>        NULL, 0, NULL, NULL, NULL, 0 <br>    }, <br>    /* <br>     * W_CUSTOM <br>     * <br>     * For Custom controls, we do not allow our emulator control <br>     * to be created with any other styles than the default ones <br>     * (WS_CHILD and WS_VISIBLE), but whatever styles the user <br>     * specifies are written out to the .res and .dlg files, <br>     * of course. <br>     */ <br>    { <br>        W_CUSTOM, <br>        WS_CHILD | WS_VISIBLE, <br>        WS_DISABLED, <br>        0, <br>        0, <br>        40, 14, <br>        IC_CUSTOM, NULL, <br>        TRUE, FALSE, TRUE, TRUE, FALSE, <br>        DID_CUSTOMSTYLES, (WNDPROC)CustomStylesDlgProc, <br>        HELPID_CUSTOMSTYLES, IDS_NULL, NULL, NULL, <br>        IDBM_CTCUSTOM, NULL, NULL, <br>        IDBM_TUCUSTOM, NULL, IDBM_TDCUSTOM, NULL, <br>        NULL, 0, NULL, NULL, NULL, 0 <br>    }, <br>    /* <br>     * W_DIALOG <br>     */ <br>    { <br>        W_DIALOG, <br>        WS_VISIBLE | WS_CAPTION | WS_SYSMENU | DS_MODALFRAME | WS_POPUP | <br>        DS_SETFONT, <br>        WS_DISABLED | DS_SYSMODAL | WS_CLIPCHILDREN | WS_CLIPSIBLINGS | <br>        WS_CHILD, <br>        DS_SYSMODAL, <br>        0, <br>        160, 100, <br>        IC_DIALOG, NULL, <br>        FALSE, FALSE, TRUE, TRUE, FALSE, <br>        DID_DIALOGSTYLES, (WNDPROC)DialogStylesDlgProc, <br>        HELPID_DIALOGSTYLES, IDS_DEFTXTDIALOG, NULL, NULL, <br>        0, NULL, NULL, <br>        0, NULL, 0, NULL, <br>        NULL, 0, NULL, NULL, NULL, 0 <br>    } <br>}; <br> <br>/* <br> * This table maps the BS_* style of a button control into its <br> * appropriate W_* type that is used internally by the editor. <br> * This table assumes that any value used to index into it is <br> * masked by BS_ALL. <br> */ <br>INT rgmpiClsBtnType[] = { <br>    W_PUSHBUTTON,               /* BS_PUSHBUTTON                        */ <br>    W_PUSHBUTTON,               /* BS_DEFPUSHBUTTON                     */ <br>    W_CHECKBOX,                 /* BS_CHECKBOX                          */ <br>    W_CHECKBOX,                 /* BS_AUTOCHECKBOX                      */ <br>    W_RADIOBUTTON,              /* BS_RADIOBUTTON                       */ <br>    W_CHECKBOX,                 /* BS_3STATE                            */ <br>    W_CHECKBOX,                 /* BS_AUTO3STATE                        */ <br>    W_GROUPBOX,                 /* BS_GROUPBOX                          */ <br>    W_PUSHBUTTON,               /* BS_USERBUTTON                        */ <br>    W_RADIOBUTTON,              /* BS_AUTORADIOBUTTON                   */ <br>    W_PUSHBUTTON,               /* BS_PUSHBOX                           */ <br>    W_PUSHBUTTON                /* BS_OWNERDRAW                         */ <br>}; <br> <br>/* Map low word of Static Control Style to static type. */ <br>/* <br> * This table maps the SS_* style of a static control into its <br> * appropriate W_* type that is used internally by the editor. <br> * This table assumes that any value used to index into it is <br> * masked by SS_ALL. <br> */ <br>INT rgmpiClsStcType[] = { <br>    W_TEXT,                     /* SS_LEFT                              */ <br>    W_TEXT,                     /* SS_CENTER                            */ <br>    W_TEXT,                     /* SS_RIGHT                             */ <br>    W_ICON,                     /* SS_ICON                              */ <br>    W_RECT,                     /* SS_BLACKRECT                         */ <br>    W_RECT,                     /* SS_GREYRECT                          */ <br>    W_RECT,                     /* SS_WHITERECT                         */ <br>    W_FRAME,                    /* SS_BLACKFRAME                        */ <br>    W_FRAME,                    /* SS_GRAYFRAME                         */ <br>    W_FRAME,                    /* SS_WHITEFRAME                        */ <br>    W_TEXT,                     /* SS_USERITEM                          */ <br>    W_TEXT,                     /* SS_SIMPLE                            */ <br>    W_TEXT                      /* SS_LEFTNOWORDWRAP                    */ <br>}; <br> <br>/* <br> * Following are the tables with the predefined RC keywords for each <br> * class (IC_*).  These tables describe each keyword other than the <br> * generic "CONTROL" keyword that is possible to use within a dialog <br> * template.  The style describes the minimum bits that must be set <br> * to define the keyword.  The mask allows a style to be specified <br> * that must have certain bits OFF for a match to occur.  The default <br> * styles flag specifies style bits that are implicitly turned on <br> * when this keyword is specified in the dialog template in the .DLG <br> * file.  These bits are checked against the style flag of the control <br> * that we are trying to match and if any of these default bits are <br> * NOT set for that control, we need to specify them in the .DLG file <br> * with a "NOT" in front of them to explicitly turn them off. <br> * <br> * The "Has Text" flag is set to FALSE in those cases where the syntax <br> * for the keyword does NOT include a text field, like "ICON" and <br> * "LISTBOX". <br> */ <br> <br>/* <br> * Array of the predefined RC keywords for Button styles. <br> */ <br>static RCKEYWORD arckwdButton[] = { <br>    /* <br>     * RADIOBUTTON <br>     */ <br>    { <br>        BS_RADIOBUTTON, <br>        BS_ALL, <br>        WS_CHILD | WS_VISIBLE, <br>        IDS_KEYRADIOBUTTON, TRUE <br>    }, <br>    /* <br>     * CHECKBOX <br>     */ <br>    { <br>        BS_CHECKBOX, <br>        BS_ALL, <br>        WS_CHILD | WS_VISIBLE | WS_TABSTOP, <br>        IDS_KEYCHECKBOX, TRUE <br>    }, <br>    /* <br>     * DEFPUSHBUTTON <br>     */ <br>    { <br>        BS_DEFPUSHBUTTON, <br>        BS_ALL, <br>        WS_CHILD | WS_VISIBLE | WS_TABSTOP, <br>        IDS_KEYDEFPUSHBUTTON, TRUE <br>    }, <br>    /* <br>     * PUSHBUTTON <br>     */ <br>    { <br>        BS_PUSHBUTTON, <br>        BS_ALL, <br>        WS_CHILD | WS_VISIBLE | WS_TABSTOP, <br>        IDS_KEYPUSHBUTTON, TRUE <br>    }, <br>    /* <br>     * GROUPBOX <br>     */ <br>    { <br>        BS_GROUPBOX, <br>        BS_ALL, <br>        WS_CHILD | WS_VISIBLE, <br>        IDS_KEYGROUPBOX, TRUE <br>    }, <br>    /* <br>     * AUTO3STATE <br>     */ <br>    { <br>        BS_AUTO3STATE, <br>        BS_ALL, <br>        WS_CHILD | WS_VISIBLE | WS_TABSTOP, <br>        IDS_KEYAUTO3STATE, TRUE <br>    }, <br>    /* <br>     * AUTOCHECKBOX <br>     */ <br>    { <br>        BS_AUTOCHECKBOX, <br>        BS_ALL, <br>        WS_CHILD | WS_VISIBLE | WS_TABSTOP, <br>        IDS_KEYAUTOCHECKBOX, TRUE <br>    }, <br>    /* <br>     * AUTORADIOBUTTON <br>     */ <br>    { <br>        BS_AUTORADIOBUTTON, <br>        BS_ALL, <br>        WS_CHILD | WS_VISIBLE, <br>        IDS_KEYAUTORADIOBUTTON, TRUE <br>    }, <br>    /* <br>     * STATE3 <br>     */ <br>    { <br>        BS_3STATE, <br>        BS_ALL, <br>        WS_CHILD | WS_VISIBLE | WS_TABSTOP, <br>        IDS_KEYSTATE3, TRUE <br>    }, <br>    /* <br>     * USERBUTTON <br>     */ <br>    { <br>        BS_USERBUTTON, <br>        BS_ALL, <br>        WS_CHILD | WS_VISIBLE | WS_TABSTOP, <br>        IDS_KEYUSERBUTTON, TRUE <br>    } <br>}; <br> <br>/* <br> * Array of the predefined RC keywords for Edit control styles. <br> */ <br>static RCKEYWORD arckwdEdit[] = { <br>    /* <br>     * EDIT <br>     */ <br>    { <br>        0L, <br>        0L, <br>        WS_CHILD | WS_VISIBLE | ES_LEFT | WS_TABSTOP | WS_BORDER, <br>        IDS_KEYEDITTEXT, FALSE <br>    } <br>}; <br> <br>/* <br> * Array of the predefined RC keywords for Static styles. <br> */ <br>static RCKEYWORD arckwdStatic[] = { <br>    /* <br>     * ICON <br>     */ <br>    { <br>        SS_ICON, <br>        SS_ALL, <br>        WS_CHILD | WS_VISIBLE, <br>        IDS_KEYICON, TRUE <br>    }, <br>    /* <br>     * RTEXT <br>     */ <br>    { <br>        SS_RIGHT, <br>        SS_ALL, <br>        WS_CHILD | WS_GROUP | WS_VISIBLE, <br>        IDS_KEYRTEXT, TRUE <br>    }, <br>    /* <br>     * CTEXT <br>     */ <br>    { <br>        SS_CENTER, <br>        SS_ALL, <br>        WS_CHILD | WS_GROUP | WS_VISIBLE, <br>        IDS_KEYCTEXT, TRUE <br>    }, <br>    /* <br>     * LTEXT <br>     */ <br>    { <br>        SS_LEFT, <br>        SS_ALL, <br>        WS_CHILD | WS_GROUP | WS_VISIBLE, <br>        IDS_KEYLTEXT, TRUE <br>    } <br>}; <br> <br>/* <br> * Array of the predefined RC keywords for ListBox styles. <br> */ <br>static RCKEYWORD arckwdLB[] = { <br>    /* <br>     * LISTBOX <br>     */ <br>    { <br>        0L, <br>        0L, <br>        WS_CHILD | WS_VISIBLE | WS_BORDER | LBS_NOTIFY, <br>        IDS_KEYLISTBOX, FALSE <br>    } <br>}; <br> <br>/* <br> * Array of the predefined RC keywords for ComboBox styles. <br> */ <br>static RCKEYWORD arckwdComboBox[] = { <br>    /* <br>     * COMBOBOX <br>     */ <br>    { <br>        0L, <br>        0L, <br>        WS_CHILD | WS_VISIBLE, <br>        IDS_KEYCOMBOBOX, FALSE <br>    } <br>}; <br> <br>/* <br> * Array of the predefined RC keywords for ScrollBar styles. <br> */ <br>static RCKEYWORD arckwdScrollBar[] = { <br>    /* <br>     * SCROLLBAR <br>     */ <br>    { <br>        0L, <br>        0L, <br>        WS_CHILD | WS_VISIBLE, <br>        IDS_KEYSCROLLBAR, FALSE <br>    } <br>}; <br> <br> <br>/* <br> * Following are the Class Styles structures.  These tables define the <br> * styles for the different window classes (IC_*).  The first element <br> * is the style flag, followed by an optional style mask.  If the style <br> * mask is zero, the style flag becomes the mask also.  This is often good <br> * enough, but there are cases where the style depends on certain bits <br> * being off, as well as certain bits being on, to definitively identify <br> * a certain style.  An extreme example of this is the BS_PUSHBUTTON <br> * style, which is actually zero (no bits are on).  The mask for this <br> * style had to be set to include all four of the lower bits, or all <br> * buttons would be incorrectly figured to have the BS_PUSHBUTTON style. <br> * With the proper mask, only styles that have all four lower bits <br> * OFF will be considered to have the BS_PUSHBUTTON style. <br> */ <br> <br>/* <br> * Button styles. <br> */ <br>static CLASSSTYLE acsButton[] = { </code></pre>
<p>
</p>
<pre><code>{BS_PUSHBUTTON,         BS_ALL,     DID_BS_PUSHBUTTON           }, <br>    {BS_DEFPUSHBUTTON,      BS_ALL,     DID_BS_DEFPUSHBUTTON        }, <br>    {BS_CHECKBOX,           BS_ALL,     0                           }, <br>    {BS_AUTOCHECKBOX,       BS_ALL,     0                           }, <br>    {BS_RADIOBUTTON,        BS_ALL,     0                           }, <br>    {BS_3STATE,             BS_ALL,     0                           }, <br>    {BS_AUTO3STATE,         BS_ALL,     0                           }, <br>    {BS_GROUPBOX,           BS_ALL,     0                           }, <br>    {BS_USERBUTTON,         BS_ALL,     0                           }, <br>    {BS_AUTORADIOBUTTON,    BS_ALL,     0                           }, <br>    {BS_PUSHBOX,            BS_ALL,     0                           }, <br>    {BS_OWNERDRAW,          BS_ALL,     DID_BS_OWNERDRAW            }, <br>    {BS_LEFTTEXT,           0,          DID_BS_LEFTTEXT             } <br>}; <br> <br>/* <br> * Scroll bar styles. <br> */ <br>static CLASSSTYLE acsSB[] = { <br>    {SBS_HORZ,              SBS_ALL,    0                           }, <br>    {SBS_VERT,              SBS_ALL,    0                           }, <br>    {SBS_TOPALIGN,          0,          0                           }, <br>    {SBS_LEFTALIGN,         0,          0                           }, <br>    {SBS_BOTTOMALIGN,       0,          0                           }, <br>    {SBS_RIGHTALIGN,        0,          0                           }, <br>    {SBS_SIZEBOXTOPLEFTALIGN, 0,        0                           }, <br>    {SBS_SIZEBOXBOTTOMRIGHTALIGN, 0,    0                           }, <br>    {SBS_SIZEBOX,           0,          0                           } <br>}; <br> <br>/* <br> * Entry field styles. <br> */ <br>static CLASSSTYLE acsEdit[] = { <br>    {ES_LEFT,               ES_ALIGN,   DID_ES_LEFT                 }, <br>    {ES_CENTER,             ES_ALIGN,   DID_ES_CENTER               }, <br>    {ES_RIGHT,              ES_ALIGN,   DID_ES_RIGHT                }, <br>    {ES_MULTILINE,          0,          DID_ES_MULTILINE            }, <br>    {ES_UPPERCASE,          0,          DID_ES_UPPERCASE            }, <br>    {ES_LOWERCASE,          0,          DID_ES_LOWERCASE            }, <br>    {ES_PASSWORD,           0,          DID_ES_PASSWORD             }, <br>    {ES_AUTOVSCROLL,        0,          DID_ES_AUTOVSCROLL          }, <br>    {ES_AUTOHSCROLL,        0,          DID_ES_AUTOHSCROLL          }, <br>    {ES_NOHIDESEL,          0,          DID_ES_NOHIDESEL            }, <br>    {ES_OEMCONVERT,         0,          DID_ES_OEMCONVERT           }, <br>    {ES_READONLY,           0,          DID_ES_READONLY             } <br>}; <br> <br>/* <br> * Static styles. <br> */ <br>static CLASSSTYLE acsStatic[] = { <br>    {SS_LEFT,               SS_ALL,     DID_SS_LEFT                 }, <br>    {SS_CENTER,             SS_ALL,     DID_SS_CENTER               }, <br>    {SS_RIGHT,              SS_ALL,     DID_SS_RIGHT                }, <br>    {SS_ICON,               SS_ALL,     0                           }, <br>    {SS_BLACKRECT,          SS_ALL,     DID_SS_BLACKRECT            }, <br>    {SS_GRAYRECT,           SS_ALL,     DID_SS_GRAYRECT             }, <br>    {SS_WHITERECT,          SS_ALL,     DID_SS_WHITERECT            }, <br>    {SS_BLACKFRAME,         SS_ALL,     DID_SS_BLACKFRAME           }, <br>    {SS_GRAYFRAME,          SS_ALL,     DID_SS_GRAYFRAME            }, <br>    {SS_WHITEFRAME,         SS_ALL,     DID_SS_WHITEFRAME           }, <br>    {SS_USERITEM,           SS_ALL,     DID_SS_USERITEM             }, <br>    {SS_SIMPLE,             SS_ALL,     DID_SS_SIMPLE               }, <br>    {SS_LEFTNOWORDWRAP,     SS_ALL,     DID_SS_LEFTNOWORDWRAP       }, <br>    {SS_NOPREFIX,           0,          DID_SS_NOPREFIX             } <br>}; <br> <br>/* <br> * List box styles. <br> */ <br>static CLASSSTYLE acsLB[] = { <br>    {LBS_NOTIFY,            0,          DID_LBS_NOTIFY              }, <br>    {LBS_SORT,              0,          DID_LBS_SORT                }, <br>    {LBS_NOREDRAW,          0,          DID_LBS_NOREDRAW            }, <br>    {LBS_MULTIPLESEL,       0,          DID_LBS_MULTIPLESEL         }, <br>    {LBS_OWNERDRAWFIXED,    0,          DID_LBS_OWNERDRAWFIXED      }, <br>    {LBS_OWNERDRAWVARIABLE, 0,          DID_LBS_OWNERDRAWVARIABLE   }, <br>    {LBS_HASSTRINGS,        0,          DID_LBS_HASSTRINGS          }, <br>    {LBS_USETABSTOPS,       0,          DID_LBS_USETABSTOPS         }, <br>    {LBS_NOINTEGRALHEIGHT,  0,          DID_LBS_NOINTEGRALHEIGHT    }, <br>    {LBS_MULTICOLUMN,       0,          DID_LBS_MULTICOLUMN         }, <br>    {LBS_WANTKEYBOARDINPUT, 0,          DID_LBS_WANTKEYBOARDINPUT   }, <br>    {LBS_EXTENDEDSEL,       0,          DID_LBS_EXTENDEDSEL         }, <br>    {LBS_DISABLENOSCROLL,   0,          DID_LBS_DISABLENOSCROLL     }, <br>    {LBS_NODATA,            0,          DID_LBS_NODATA              } <br>}; <br> <br>/* <br> * Combo Box styles. <br> */ <br>static CLASSSTYLE acsComboBox[] = { <br>    {CBS_SIMPLE,            CBS_ALL,    DID_CBS_SIMPLE              }, <br>    {CBS_DROPDOWN,          CBS_ALL,    DID_CBS_DROPDOWN            }, <br>    {CBS_DROPDOWNLIST,      CBS_ALL,    DID_CBS_DROPDOWNLIST        }, <br>    {CBS_OWNERDRAWFIXED,    0,          DID_CBS_OWNERDRAWFIXED      }, <br>    {CBS_OWNERDRAWVARIABLE, 0,          DID_CBS_OWNERDRAWVARIABLE   }, <br>    {CBS_AUTOHSCROLL,       0,          DID_CBS_AUTOHSCROLL         }, <br>    {CBS_OEMCONVERT,        0,          DID_CBS_OEMCONVERT          }, <br>    {CBS_SORT,              0,          DID_CBS_SORT                }, <br>    {CBS_HASSTRINGS,        0,          DID_CBS_HASSTRINGS          }, <br>    {CBS_NOINTEGRALHEIGHT,  0,          DID_CBS_NOINTEGRALHEIGHT    }, <br>    {CBS_DISABLENOSCROLL,   0,          DID_CBS_DISABLENOSCROLL     } <br>}; <br> <br>/* <br> * Dialog styles. <br> */ <br>static CLASSSTYLE acsDialog[] = { <br>    {DS_ABSALIGN,           0,          DID_DS_ABSALIGN             }, <br>    {DS_SYSMODAL,           0,          DID_DS_SYSMODAL             }, <br>    {DS_LOCALEDIT,          0,          DID_DS_LOCALEDIT            }, <br>    {DS_SETFONT,            0,          0                           }, <br>    {DS_MODALFRAME,         0,          DID_DS_MODALFRAME           }, <br>    {DS_NOIDLEMSG,          0,          DID_DS_NOIDLEMSG            }, <br>    /* <br>     * The following two styles are the same bits as WS_GROUP and <br>     * WS_TABSTOP, so they must be in this table and there has <br>     * to be special case code for writing the appropriate string <br>     * out when writing dialog styles. <br>     */ <br>    {WS_MINIMIZEBOX,        0,          DID_WS_MINIMIZEBOX          }, <br>    {WS_MAXIMIZEBOX,        0,          DID_WS_MAXIMIZEBOX          } <br>}; <br> <br>/* <br> * Window styles. <br> */ <br>static CLASSSTYLE acsWindow[] = { <br>    {WS_POPUP,              0,          DID_WS_POPUP                }, <br>    {WS_CHILD,              0,          DID_WS_CHILD                }, <br>    {WS_MINIMIZE,           0,          DID_WS_MINIMIZE             }, <br>    {WS_VISIBLE,            0,          DID_WS_VISIBLE              }, <br>    {WS_DISABLED,           0,          DID_WS_DISABLED             }, <br>    {WS_CLIPSIBLINGS,       0,          DID_WS_CLIPSIBLINGS         }, <br>    {WS_CLIPCHILDREN,       0,          DID_WS_CLIPCHILDREN         }, <br>    {WS_MAXIMIZE,           0,          DID_WS_MAXIMIZE             }, <br>    {WS_CAPTION,            WS_CAPTIONALL, DID_WS_CAPTION           }, <br>    {WS_BORDER,             WS_CAPTIONALL, DID_WS_BORDER            }, <br>    {WS_DLGFRAME,           WS_CAPTIONALL, DID_WS_DLGFRAME          }, <br>    {WS_VSCROLL,            0,          DID_WS_VSCROLL              }, <br>    {WS_HSCROLL,            0,          DID_WS_HSCROLL              }, <br>    {WS_SYSMENU,            0,          DID_WS_SYSMENU              }, <br>    {WS_THICKFRAME,         0,          DID_WS_THICKFRAME           }, <br>    {WS_GROUP,              0,          DID_WS_GROUP                }, <br>    {WS_TABSTOP,            0,          DID_WS_TABSTOP              } <br>}; <br> <br>/* <br> * Resource Flags styles. <br> */ <br>static CLASSSTYLE acsResFlags[] = { <br>    {MMF_MOVEABLE,          0,          DID_MMF_MOVEABLE            }, <br>    {MMF_PURE,              0,          DID_MMF_PURE                }, <br>    {MMF_PRELOAD,           0,          DID_MMF_PRELOAD             }, <br>    {MMF_DISCARDABLE,       0,          DID_MMF_DISCARDABLE         } <br>}; <br> <br>/* <br> * Extended Styles. <br> */ <br>static CLASSSTYLE acsExStyle[] = { <br>    {WS_EX_DLGMODALFRAME,   0,          0                           }, <br>    {0x0002 /*WS_EX_DRAGOBJECT*/, 0,    0                           }, <br>    {WS_EX_NOPARENTNOTIFY,  0,          0                           }, <br>    {WS_EX_TOPMOST,         0,          0                           }, <br>    {WS_EX_ACCEPTFILES,     0,          0                           }, <br>    {WS_EX_TRANSPARENT,     0,          0                           } <br>}; <br> <br> <br>/* <br> * Array of class style description structures.  These are indexed by <br> * the IC_* constants and describe each class.  They contain pointers <br> * to both the class styles array and the predefined keywords array <br> * for each class. <br> * <br> * The last few entries are included in the table for convenience, <br> * and are used to describe things like the various window (WS_*, WS_EX_*) <br> * and resource memory flags (MMF_*) styles, although they don't exactly <br> * map to an IC_* style that a control will have. <br> */ <br>CLASSSTYLEDESC acsd[] = { <br>    /* <br>     * IC_BUTTON <br>     */ <br>    { <br>        IDS_WCBUTTON, <br>        acsButton, sizeof(acsButton) / sizeof(CLASSSTYLE), IDS_IC_BUTTON, <br>        arckwdButton, sizeof(arckwdButton) / sizeof(RCKEYWORD), <br>        ORDID_BUTTONCLASS <br>    }, <br>    /* <br>     * IC_SCROLLBAR <br>     */ <br>    { <br>        IDS_WCSCROLLBAR, <br>        acsSB, sizeof(acsSB) / sizeof(CLASSSTYLE), IDS_IC_SCROLLBAR, <br>        arckwdScrollBar, sizeof(arckwdScrollBar) / sizeof(RCKEYWORD), <br>        ORDID_SCROLLBARCLASS <br>    }, <br>    /* <br>     * IC_EDIT <br>     */ <br>    { <br>        IDS_WCEDIT, <br>        acsEdit, sizeof(acsEdit) / sizeof(CLASSSTYLE), IDS_IC_EDIT, <br>        arckwdEdit, sizeof(arckwdEdit) / sizeof(RCKEYWORD), <br>        ORDID_EDITCLASS <br>    }, <br>    /* <br>     * IC_STATIC <br>     */ <br>    { <br>        IDS_WCSTATIC, <br>        acsStatic, sizeof(acsStatic) / sizeof(CLASSSTYLE), IDS_IC_STATIC, <br>        arckwdStatic, sizeof(arckwdStatic) / sizeof(RCKEYWORD), <br>        ORDID_STATICCLASS <br>    }, <br>    /* <br>     * IC_LISTBOX <br>     */ <br>    { <br>        IDS_WCLISTBOX, <br>        acsLB, sizeof(acsLB) / sizeof(CLASSSTYLE), IDS_IC_LISTBOX, <br>        arckwdLB, sizeof(arckwdLB) / sizeof(RCKEYWORD), <br>        ORDID_LISTBOXCLASS <br>    }, <br>    /* <br>     * IC_COMBOBOX <br>     */ <br>    { <br>        IDS_WCCOMBOBOX, <br>        acsComboBox, sizeof(acsComboBox) / sizeof(CLASSSTYLE), IDS_IC_COMBOBOX, <br>        arckwdComboBox, sizeof(arckwdComboBox) / sizeof(RCKEYWORD), <br>        ORDID_COMBOBOXCLASS <br>    }, <br>    /* <br>     * IC_CUSTOM <br>     */ <br>    { <br>        IDS_WCCUSTOM, <br>        NULL, 0, 0, <br>        NULL, 0, <br>        0 <br>    }, <br>    /* <br>     * IC_DIALOG <br>     */ <br>    { <br>        IDS_WCDIALOG, <br>        acsDialog, sizeof(acsDialog) / sizeof(CLASSSTYLE), IDS_IC_DIALOG, <br>        NULL, 0, <br>        0 <br>    }, <br>    /* <br>     * IC_WINDOW <br>     */ <br>    { <br>        IDS_NULL, <br>        acsWindow, sizeof(acsWindow) / sizeof(CLASSSTYLE), IDS_IC_WINDOW, <br>        NULL, 0, <br>        0 <br>    }, <br>    /* <br>     * IC_RESFLAGS <br>     */ <br>    { <br>        IDS_NULL, <br>        acsResFlags, sizeof(acsResFlags) / sizeof(CLASSSTYLE), 0, <br>        NULL, 0, <br>        0 <br>    }, <br>    /* <br>     * IC_EXSTYLE <br>     */ <br>    { <br>        IDS_NULL, <br>        acsExStyle, sizeof(acsExStyle) / sizeof(CLASSSTYLE), IDS_IC_EXSTYLE, <br>        NULL, 0, <br>        0 <br>    } <br>}; <br> <br>/* <br> * Message box messages, for the Message() function. <br> */ <br>MESSAGEDATA gamdMessages[] = { <br>    { IDS_DELETEDIALOG,     MB_YESNO | MB_ICONEXCLAMATION       }, <br>    { IDS_OUTOFMEMORY,      MB_OK | MB_ICONHAND                 }, <br>    { IDS_CANTCREATE,       MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_SYMNOCHANGE,      MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_IDSYMMISMATCH,    MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_CLOSING,          MB_YESNOCANCEL | MB_ICONEXCLAMATION }, <br>    { IDS_BADRESFILE,       MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_INCLCLOSING,      MB_YESNOCANCEL | MB_ICONEXCLAMATION }, <br>    { IDS_SYMEXISTS,        MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_BADSYMBOLID,      MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_LABELDUPID,       MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_SELECTFIRST,      MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_CTRLDUPID,        MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_BADCUSTDLL,       MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_NOCLIP,           MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_INTERNAL,         MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_NOMOUSE,          MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_NOINIT,           MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_GTZERO,           MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_ICONNAMEHASBLANKS,MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_IDUPIDS,          MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_CREATECTRLERROR,  MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_CANTOPENRES,      MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_CONFIRMDISCARD,   MB_YESNO | MB_ICONEXCLAMATION       }, <br>    { IDS_SYMNOTFOUND,      MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_NOCLASS,          MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_POSITIVENUM,      MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_MEMERROR,         MB_OK | MB_ICONHAND                 }, <br>    { IDS_DLGNAMEHASBLANKS, MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_NODLGNAME,        MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_CANTINITDLL,      MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_NOICONNAME,       MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_RESTOREDIALOG,    MB_YESNO | MB_ICONEXCLAMATION       }, <br>    { IDS_ZEROPOINTSIZE,    MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_MINGTMAXSPACE,    MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_CUSTCNTLINUSE,    MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_CUSTALREADYLOADED,MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_CANTLOADDLL,      MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_DLLBADEXPORTS,    MB_OK | MB_ICONEXCLAMATION          }, <br>    { IDS_DLLBADCOUNT,      MB_OK | MB_ICONEXCLAMATION          } <br>}; <br> <br>/* <br> * Table that maps menu items to help context id's for them. <br> */ <br>HELPMAP gahmapMenu[] = { <br>    {MENU_NEWRES,               HELPID_FILE_NEWRES              }, <br>    {MENU_OPEN,                 HELPID_FILE_OPEN                }, <br>    {MENU_SAVE,                 HELPID_FILE_SAVE                }, <br>    {MENU_SAVEAS,               HELPID_FILE_SAVEAS              }, <br>    {MENU_SETINCLUDE,           HELPID_FILE_SETINCLUDE          }, <br>    {MENU_NEWCUST,              HELPID_FILE_NEWCUST             }, <br>    {MENU_OPENCUST,             HELPID_FILE_OPENCUST            }, <br>    {MENU_REMCUST,              HELPID_FILE_REMCUST             }, <br>    {MENU_EXIT,                 HELPID_FILE_EXIT                }, <br> <br>    {MENU_RESTOREDIALOG,        HELPID_EDIT_RESTOREDIALOG       }, <br>    {MENU_CUT,                  HELPID_EDIT_CUT                 }, <br>    {MENU_COPY,                 HELPID_EDIT_COPY                }, <br>    {MENU_PASTE,                HELPID_EDIT_PASTE               }, <br>    {MENU_DELETE,               HELPID_EDIT_DELETE              }, <br>    {MENU_DUPLICATE,            HELPID_EDIT_DUPLICATE           }, <br>    {MENU_SYMBOLS,              HELPID_EDIT_SYMBOLS             }, <br>    {MENU_STYLES,               HELPID_EDIT_STYLES              }, <br>    {MENU_SIZETOTEXT,           HELPID_EDIT_SIZETOTEXT          }, <br>    {MENU_NEWDIALOG,            HELPID_EDIT_NEWDIALOG           }, <br>    {MENU_SELECTDIALOG,         HELPID_EDIT_SELECTDIALOG        }, <br> <br>    {MENU_ALIGNLEFT,            HELPID_ARRANGE_ALIGNLEFT        }, <br>    {MENU_ALIGNVERT,            HELPID_ARRANGE_ALIGNVERT        }, <br>    {MENU_ALIGNRIGHT,           HELPID_ARRANGE_ALIGNRIGHT       }, <br>    {MENU_ALIGNTOP,             HELPID_ARRANGE_ALIGNTOP         }, <br>    {MENU_ALIGNHORZ,            HELPID_ARRANGE_ALIGNHORZ        }, <br>    {MENU_ALIGNBOTTOM,          HELPID_ARRANGE_ALIGNBOTTOM      }, <br>    {MENU_SPACEHORZ,            HELPID_ARRANGE_SPACEHORZ        }, <br>    {MENU_SPACEVERT,            HELPID_ARRANGE_SPACEVERT        }, <br>    {MENU_ARRSIZEWIDTH,         HELPID_ARRANGE_ARRSIZEWIDTH     }, <br>    {MENU_ARRSIZEHEIGHT,        HELPID_ARRANGE_ARRSIZEHEIGHT    }, <br>    {MENU_ARRPUSHBOTTOM,        HELPID_ARRANGE_ARRPUSHBOTTOM    }, <br>    {MENU_ARRPUSHRIGHT,         HELPID_ARRANGE_ARRPUSHRIGHT     }, <br>    {MENU_ORDERGROUP,           HELPID_ARRANGE_ORDERGROUP       }, <br>    {MENU_ARRSETTINGS,          HELPID_ARRANGE_ARRSETTINGS      }, <br> <br>    {MENU_TESTMODE,             HELPID_OPTIONS_TESTMODE         }, <br>    {MENU_HEXMODE,              HELPID_OPTIONS_HEXMODE          }, <br>    {MENU_TRANSLATE,            HELPID_OPTIONS_TRANSLATE        }, <br>    {MENU_USENEWKEYWORDS,       HELPID_OPTIONS_USENEWKEYWORDS   }, <br>    {MENU_SHOWTOOLBOX,          HELPID_OPTIONS_SHOWTOOLBOX      }, <br> <br>    {MENU_CONTENTS,             HELPID_HELP_CONTENTS            }, <br>    {MENU_SEARCH,               HELPID_HELP_SEARCH              }, <br>    // No help for the About menu command. <br> <br>    {0,                         0                               } <br>}; <br> <br>/* <br> * Table that maps dialog ids to help context id's for them. <br> */ <br>HELPMAP gahmapDialog[] = { <br>    // No help for the About dialog. <br>    {DID_ARRSETTINGS,           HELPID_ARRSETTINGS              }, <br>    {DID_CHECKBOXSTYLES,        HELPID_CHECKBOXSTYLES           }, <br>    {DID_COMBOBOXSTYLES,        HELPID_COMBOBOXSTYLES           }, <br>    {DID_CUSTOMSTYLES,          HELPID_CUSTOMSTYLES             }, <br>    {DID_DIALOGSTYLES,          HELPID_DIALOGSTYLES             }, <br>    {DID_EDITSTYLES,            HELPID_EDITSTYLES               }, <br>    {DID_FRAMESTYLES,           HELPID_FRAMESTYLES              }, <br>    {DID_GROUPBOXSTYLES,        HELPID_GROUPBOXSTYLES           }, <br>    {DID_ORDERGROUP,            HELPID_ORDERGROUP               }, <br>    {DID_HORZSCROLLSTYLES,      HELPID_HORZSCROLLSTYLES         }, <br>    {DID_ICONSTYLES,            HELPID_ICONSTYLES               }, <br>    {DID_LISTBOXSTYLES,         HELPID_LISTBOXSTYLES            }, <br>    {DID_NEWCUST,               HELPID_NEWCUST                  }, <br>    {DID_PUSHBUTTONSTYLES,      HELPID_PUSHBUTTONSTYLES         }, <br>    {DID_RADIOBUTTONSTYLES,     HELPID_RADIOBUTTONSTYLES        }, <br>    {DID_RECTSTYLES,            HELPID_RECTSTYLES               }, <br>    {DID_REMCUST,               HELPID_REMCUST                  }, <br>    {DID_SELECTDIALOG,          HELPID_SELECTDIALOG             }, <br>    {DID_SYMBOLS,               HELPID_SYMBOLS                  }, <br>    {DID_TEXTSTYLES,            HELPID_TEXTSTYLES               }, <br>    {DID_VERTSCROLLSTYLES,      HELPID_VERTSCROLLSTYLES         }, <br> <br>    {DID_COMMONFILEOPENINCLUDE, HELPID_COMMONFILEOPENINCLUDE    }, <br>    {DID_COMMONFILEOPENRES,     HELPID_COMMONFILEOPENRES        }, <br>    {DID_COMMONFILESAVEINCLUDE, HELPID_COMMONFILESAVEINCLUDE    }, <br>    {DID_COMMONFILESAVERES,     HELPID_COMMONFILESAVERES        }, <br>    {DID_COMMONFILEOPENDLL,     HELPID_COMMONFILEOPENDLL        }, <br> <br>    {DID_TOOLBOX,               HELPID_TOOLBOX                  }, <br>    {DID_STATUS,                HELPID_PROPERTIESBAR            }, <br> <br>    {0,                         0                               } <br>}; <br> <br> <br>/* <br> * Language and Sub Language tables. <br> */ <br> <br>static SUBLANGTABLE aslNeutral[] = { <br>    { SUBLANG_NEUTRAL,      IDS_SUBLANG_NEUTRAL,        IDS_SL_NEUTRAL      }, <br>    { SUBLANG_DEFAULT,      IDS_SUBLANG_DEFAULT,        IDS_SL_DEFAULT      } <br>}; <br> <br>static SUBLANGTABLE aslChinese[] = { <br>    { SUBLANG_NEUTRAL,      IDS_SUBLANG_NEUTRAL,        IDS_SL_NEUTRAL      }, <br>    { SUBLANG_CHINESE_SIMPLIFIED, IDS_SUBLANG_CHINESE_SIMPLIFIED, IDS_SL_CHINESE_SIMPLIFIED   }, <br>    { SUBLANG_CHINESE_TRADITIONAL, IDS_SUBLANG_CHINESE_TRADITIONAL, IDS_SL_CHINESE_TRADITIONAL  } <br>}; <br> <br>static SUBLANGTABLE aslDutch[] = { <br>    { SUBLANG_NEUTRAL,      IDS_SUBLANG_NEUTRAL,        IDS_SL_NEUTRAL      }, <br>    { SUBLANG_DUTCH,        IDS_SUBLANG_DUTCH,          IDS_SL_DUTCH        }, <br>    { SUBLANG_DUTCH_BELGIAN,IDS_SUBLANG_DUTCH_BELGIAN,  IDS_SL_DUTCH_BELGIAN} <br>}; <br> <br>static SUBLANGTABLE aslEnglish[] = { <br>    { SUBLANG_NEUTRAL,      IDS_SUBLANG_NEUTRAL,        IDS_SL_NEUTRAL      }, <br>    { SUBLANG_ENGLISH_US,   IDS_SUBLANG_ENGLISH_US,     IDS_SL_ENGLISH_US   }, <br>    { SUBLANG_ENGLISH_UK,   IDS_SUBLANG_ENGLISH_UK,     IDS_SL_ENGLISH_UK   }, <br>    { SUBLANG_ENGLISH_AUS,  IDS_SUBLANG_ENGLISH_AUS,    IDS_SL_ENGLISH_AUS  }, <br>    { SUBLANG_ENGLISH_CAN,  IDS_SUBLANG_ENGLISH_CAN,    IDS_SL_ENGLISH_CAN  } <br>}; <br> <br>static SUBLANGTABLE aslFrench[] = { <br>    { SUBLANG_NEUTRAL,      IDS_SUBLANG_NEUTRAL,        IDS_SL_NEUTRAL      }, <br>    { SUBLANG_FRENCH,       IDS_SUBLANG_FRENCH,         IDS_SL_FRENCH       }, <br>    { SUBLANG_FRENCH_BELGIAN, IDS_SUBLANG_FRENCH_BELGIAN, IDS_SL_FRENCH_BELGIAN  }, <br>    { SUBLANG_FRENCH_CANADIAN, IDS_SUBLANG_FRENCH_CANADIAN, IDS_SL_FRENCH_CANADIAN }, <br>    { SUBLANG_FRENCH_SWISS, IDS_SUBLANG_FRENCH_SWISS,   IDS_SL_FRENCH_SWISS } <br>}; <br> <br>static SUBLANGTABLE aslGerman[] = { <br>    { SUBLANG_NEUTRAL,      IDS_SUBLANG_NEUTRAL,        IDS_SL_NEUTRAL      }, <br>    { SUBLANG_GERMAN,       IDS_SUBLANG_GERMAN,         IDS_SL_GERMAN       }, <br>    { SUBLANG_GERMAN_SWISS, IDS_SUBLANG_GERMAN_SWISS,   IDS_SL_GERMAN_SWISS } <br>}; <br> <br>static SUBLANGTABLE aslItalian[] = { <br>    { SUBLANG_NEUTRAL,      IDS_SUBLANG_NEUTRAL,        IDS_SL_NEUTRAL      }, <br>    { SUBLANG_ITALIAN,      IDS_SUBLANG_ITALIAN,        IDS_SL_ITALIAN      }, <br>    { SUBLANG_ITALIAN_SWISS, IDS_SUBLANG_ITALIAN_SWISS, IDS_SL_ITALIAN_SWISS } <br>}; <br> <br>static SUBLANGTABLE aslNorwegian[] = { <br>    { SUBLANG_NEUTRAL,      IDS_SUBLANG_NEUTRAL,        IDS_SL_NEUTRAL      }, <br>    { SUBLANG_NORWEGIAN_BOKMAL, IDS_SUBLANG_NORWEGIAN_BOKMAL, IDS_SL_NORWEGIAN_BOKMAL }, <br>    { SUBLANG_NORWEGIAN_NYNORSK, IDS_SUBLANG_NORWEGIAN_NYNORSK, IDS_SL_NORWEGIAN_NYNORSK } <br>}; <br> <br>static SUBLANGTABLE aslPortuguese[] = { <br>    { SUBLANG_NEUTRAL,      IDS_SUBLANG_NEUTRAL,        IDS_SL_NEUTRAL      }, <br>    { SUBLANG_PORTUGUESE,   IDS_SUBLANG_PORTUGUESE,     IDS_SL_PORTUGUESE   }, <br>    { SUBLANG_PORTUGUESE_BRAZILIAN, IDS_SUBLANG_PORTUGUESE_BRAZILIAN, IDS_SL_PORTUGUESE_BRAZILIAN } <br>}; <br> <br> <br>static SUBLANGTABLE aslSpanish[] = { <br>    { SUBLANG_NEUTRAL,      IDS_SUBLANG_NEUTRAL,        IDS_SL_NEUTRAL      }, <br>    { SUBLANG_SPANISH,      IDS_SUBLANG_SPANISH,        IDS_SL_SPANISH      }, <br>    { SUBLANG_SPANISH_MEXICAN, IDS_SUBLANG_SPANISH_MEXICAN, IDS_SL_SPANISH_MEXICAN }, <br>    { SUBLANG_SPANISH_MODERN, IDS_SUBLANG_SPANISH_MODERN, IDS_SL_SPANISH_MODERN } <br>}; <br> <br> <br>LANGTABLE gaLangTable[] = { <br>    { LANG_NEUTRAL,         IDS_LANG_NEUTRAL,           IDS_L_NEUTRAL, <br>  sizeof(aslNeutral) / sizeof(SUBLANGTABLE), aslNeutral }, <br>    { LANG_CHINESE,         IDS_LANG_CHINESE,           IDS_L_CHINESE, <br>        sizeof(aslChinese) / sizeof(SUBLANGTABLE), aslChinese }, <br>    { LANG_CZECH,           IDS_LANG_CZECH,             IDS_L_CZECH, <br>        sizeof(aslNeutral) / sizeof(SUBLANGTABLE), aslNeutral }, <br>    { LANG_DANISH,          IDS_LANG_DANISH,            IDS_L_DANISH, <br>        sizeof(aslNeutral) / sizeof(SUBLANGTABLE), aslNeutral }, <br>    { LANG_DUTCH,           IDS_LANG_DUTCH,             IDS_L_DUTCH, <br>        sizeof(aslDutch) / sizeof(SUBLANGTABLE), aslDutch }, <br>    { LANG_ENGLISH,         IDS_LANG_ENGLISH,           IDS_L_ENGLISH, <br>        sizeof(aslEnglish) / sizeof(SUBLANGTABLE), aslEnglish }, <br>    { LANG_FINNISH,         IDS_LANG_FINNISH,           IDS_L_FINNISH, <br>        sizeof(aslNeutral) / sizeof(SUBLANGTABLE), aslNeutral }, <br>    { LANG_FRENCH,          IDS_LANG_FRENCH,            IDS_L_FRENCH, <br>        sizeof(aslFrench) / sizeof(SUBLANGTABLE), aslFrench }, <br>    { LANG_GERMAN,          IDS_LANG_GERMAN,            IDS_L_GERMAN, <br>        sizeof(aslGerman) / sizeof(SUBLANGTABLE), aslGerman }, <br>    { LANG_GREEK,           IDS_LANG_GREEK,             IDS_L_GREEK, <br>  sizeof(aslNeutral) / sizeof(SUBLANGTABLE), aslNeutral }, <br>    { LANG_HUNGARIAN,       IDS_LANG_HUNGARIAN,         IDS_L_HUNGARIAN, <br>        sizeof(aslNeutral) / sizeof(SUBLANGTABLE), aslNeutral }, <br>    { LANG_ICELANDIC,       IDS_LANG_ICELANDIC,         IDS_L_ICELANDIC, <br>        sizeof(aslNeutral) / sizeof(SUBLANGTABLE), aslNeutral }, <br>    { LANG_ITALIAN,         IDS_LANG_ITALIAN,           IDS_L_ITALIAN, <br>        sizeof(aslItalian) / sizeof(SUBLANGTABLE), aslItalian }, <br>    { LANG_JAPANESE,        IDS_LANG_JAPANESE,          IDS_L_JAPANESE, <br>        sizeof(aslNeutral) / sizeof(SUBLANGTABLE), aslNeutral }, <br>    { LANG_KOREAN,          IDS_LANG_KOREAN,            IDS_L_KOREAN, <br>        sizeof(aslNeutral) / sizeof(SUBLANGTABLE), aslNeutral }, <br>    { LANG_NORWEGIAN,       IDS_LANG_NORWEGIAN,         IDS_L_NORWEGIAN, <br>        sizeof(aslNorwegian) / sizeof(SUBLANGTABLE), aslNorwegian }, <br>    { LANG_POLISH,          IDS_LANG_POLISH,            IDS_L_POLISH, <br>        sizeof(aslNeutral) / sizeof(SUBLANGTABLE), aslNeutral }, <br>    { LANG_PORTUGUESE,      IDS_LANG_PORTUGUESE,        IDS_L_PORTUGUESE, <br>  sizeof(aslPortuguese) / sizeof(SUBLANGTABLE), aslPortuguese }, <br>    { LANG_RUSSIAN,         IDS_LANG_RUSSIAN,           IDS_L_RUSSIAN, <br>  sizeof(aslNeutral) / sizeof(SUBLANGTABLE), aslNeutral }, <br>    { LANG_SLOVAK,          IDS_LANG_SLOVAK,            IDS_L_SLOVAK, <br>        sizeof(aslNeutral) / sizeof(SUBLANGTABLE), aslNeutral }, <br>    { LANG_SPANISH,         IDS_LANG_SPANISH,           IDS_L_SPANISH, <br>        sizeof(aslSpanish) / sizeof(SUBLANGTABLE), aslSpanish }, <br>    { LANG_SWEDISH,         IDS_LANG_SWEDISH,           IDS_L_SWEDISH, <br>  sizeof(aslNeutral) / sizeof(SUBLANGTABLE), aslNeutral }, <br>    { LANG_TURKISH,         IDS_LANG_TURKISH,           IDS_L_TURKISH, <br>  sizeof(aslNeutral) / sizeof(SUBLANGTABLE), aslNeutral }, <br>}; <br> <br>INT gcLanguages = sizeof(gaLangTable) / sizeof(LANGTABLE); </code></pre>
<p>&nbsp;</p></body>
</HTML>

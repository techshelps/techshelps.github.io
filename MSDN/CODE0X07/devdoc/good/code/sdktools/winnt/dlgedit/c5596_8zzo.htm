<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DLGFUNCS.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5604"></a>DLGFUNCS.H</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>/****************************** Module Header ******************************* <br>* Module Name: dlgfuncs.h <br>* <br>* Contains prototypes for the functions used in the dialog box editor. <br>* <br>****************************************************************************/ <br> <br>/* <br> * addctrl.c <br> */ <br> <br>VOID AddNewDialog(VOID); <br>VOID DropControl(PWINDOWCLASSDESC pwcd, PRECT prc); <br>NPCTYPE AddControl(PWINDOWCLASSDESC pwcd, LPTSTR pszText, DWORD style, <br>    DWORD flExtStyle, INT id, INT x, INT y, INT cx, INT cy, LPTSTR pszDlgName, <br>    PDIALOGINFO pdi); <br>HWND CreateControl(NPCTYPE npc, LPTSTR pszText, DWORD flStyle, DWORD flExtStyle, <br>    INT id, PRECT prc, HWND hwndBehind, PDIALOGINFO pdi); <br>VOID DeleteControl(VOID); <br>VOID DeleteDialog(BOOL fResAlso); <br>#ifdef JAPAN <br>VOID KDExpandCopy(LPTSTR, LPTSTR, WORD); <br>#endif <br> <br>/* <br> * ctrlproc.c <br> */ <br> <br>WINDOWPROC DialogCtrlWndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam); <br>WINDOWPROC CtrlWndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam); <br>WINDOWPROC ChildWndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam); <br>BOOL DrawOwnerDrawButton(LPDRAWITEMSTRUCT lpdis); <br> <br> <br>/* <br> * custcntl.c <br> */ <br> <br>DIALOGPROC NewCustDlgProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam); <br>VOID OpenCustomDialog(VOID); <br>PWINDOWCLASSDESC SelCustDialog(VOID); <br>DIALOGPROC SelCustDlgProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam); <br>DIALOGPROC RemCustDlgProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam); <br>WINDOWPROC CustomWndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam); <br>PCUSTLINK AddCustomLink(LPCCINFO pcci, BOOL fEmulated, BOOL fUnicodeDLL, <br>    LPTSTR pszFileName, HANDLE hmod); <br>VOID RemoveCustomLink(PCUSTLINK pcl); <br>BOOL CallCustomStyle(NPCTYPE npc, PDWORD pflStyleNew, PDWORD pflExtStyleNew, <br>    LPTSTR pszTextNew); <br>INT CallCustomSizeToText(NPCTYPE npc); <br>VOID ReadCustomProfile(VOID); <br>VOID WriteCustomProfile(VOID); <br> <br> <br>/* <br> * dialogs.c <br> */ <br> <br>INT DlgBox(INT idDlg, WNDPROC lpfnDlg); <br>VOID EnteringDialog(INT idDlg, PINT pidPrevDlg, BOOL fEntering); <br>VOID CreateTestDialog(VOID); <br>VOID DestroyTestDialog(VOID); <br>VOID SelectDialogDialog(VOID); <br>VOID ArrangeSettingsDialog(VOID); <br>DIALOGPROC AboutDlgProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam); <br> <br> <br>/* <br> * dlgedit.c <br> */ <br> <br>WINDOWPROC MainWndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam); <br>BOOL ReadWindowPos(LPTSTR pszKeyName, PINT px, PINT py, PINT pcx, PINT pcy, <br>    BOOL *pfMaximized); <br>VOID WriteWindowPos(PRECT prc, BOOL fMaximized, LPTSTR pszKeyName); <br> <br> <br>/* <br> * drag.c <br> */ <br> <br>VOID ShowTrackRect(VOID); <br>VOID HideTrackRect(VOID); <br>VOID FitRectToBounds(PRECT prc, INT nOverHang, INT HandleHit, BOOL fDialog); <br>INT GetOverHang(INT iType, INT cy); <br>VOID GridizeRect(PRECT prc, INT fGridFlags); <br>VOID SizeDragToControl(NPCTYPE npc); <br>WINDOWPROC DragWndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam); <br>VOID DrawHandles(HWND hwnd, HDC hDC, BOOL fCurrentSelection); <br>INT HandleHitTest(HWND hwnd, INT x, INT y); <br>VOID CtrlButtonDown(HWND hwnd, INT x, INT y, BOOL fHandleWindow); <br>VOID DragNewBegin(INT cx, INT cy, INT nOverHang); <br>VOID CtrlMouseMove(HWND hwnd, BOOL fDragWindow, INT x, INT y); <br>VOID PreDragTimeout(HWND hwnd, BOOL fTimedOut); <br>VOID DragCancel(VOID); <br>VOID CtrlButtonUp(INT x, INT y); <br>VOID DragEnd(INT x, INT y); <br> <br> <br>/* <br> * file.c <br> */ <br> <br>BOOL Open(INT FileType); <br>VOID BuildFilterString(INT FileType, LPTSTR pszFilter); <br>INT DoWeSave(INT rgbFlags); <br>BOOL Save(INT rgbFlags); <br>VOID OpenCmdLineFile(LPTSTR pszFileName); <br>LPTSTR FileInPath(LPTSTR pszPath); <br>VOID ShowFileStatus(BOOL fForce); <br>BOOL DifferentDirs(LPTSTR pszPath1, LPTSTR pszPath2); <br>BOOL HasPath(LPTSTR pszFileSpec); <br>BOOL WriteDWordPad(HANDLE hf, DWORD cbFile); <br> <br> <br>/* <br> * groupdlg.c <br> */ <br> <br>VOID OrderGroupDialog(VOID); <br>DIALOGPROC OrderDlgProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam); <br> <br>/* <br> * include.c <br> */ <br> <br>NPLABEL AddLabel(LPTSTR pszLabel, INT id, DWORD fpos, <br>    INT nValueOffset, NPLABEL *pplHead, NPLABEL *pplDelHead, <br>    NPLABEL npLabelSkip, BOOL *pfDups); <br>NPLABEL FindLabel(LPTSTR pszLabel, NPLABEL plHead); <br>NPLABEL FindID(INT id,  NPLABEL plHead); <br>BOOL FindIDInRes(INT id); <br>VOID DeleteLabel(LPTSTR pszLabel, NPLABEL *pplHead, NPLABEL *pplDelHead); <br>BOOL IsSymbol(LPTSTR pszSym); <br>VOID IDToLabel(LPTSTR pchLabel, INT id, BOOL fHexOK); <br>BOOL LabelToID(LPTSTR pszLabel, PINT pID); <br>VOID FreeLabels(NPLABEL *nppLabels); <br> <br> <br>/* <br> * menu.c <br> */ <br> <br>VOID DialogMenu(INT cmd); <br>VOID LoadMenuBitmaps(HMENU hMenu); <br>VOID FreeMenuBitmaps(VOID); <br>VOID InitMenu(HMENU hMenu); <br>BOOL APIENTRY MsgFilterHookFunc(INT nCode, WPARAM wParam, LPMSG lpMsg); <br>VOID ShowHelp(BOOL fMenuHelp); <br> <br> <br>/* <br> * reslist.c <br> */ <br> <br>BOOL FindDialog(LPTSTR pszDlgName); <br>PRESLINK AllocResLink(PRES pRes); <br>VOID RestoreDialog(VOID); <br>VOID FreeRes(VOID); <br>VOID FreeResList(VOID); <br>VOID FreeResLink(PRESLINK prl); <br>VOID DeleteDialogResource(VOID); <br> <br> <br>/* <br> * restodlg.c <br> */ <br> <br>BOOL SynchDialogResource(VOID); <br>PRES AllocDialogResource(BOOL fTestMode, BOOL fClipboard); <br>VOID ResLinkToDialog(PRESLINK prl); <br>BOOL ResToDialog(PRES pRes, BOOL fDoDialog); <br>INT GetiClass(LPTSTR pszClass); <br>VOID Duplicate(VOID); <br>VOID MakeCopyFromRes(PRES pRes); <br> <br> <br>/* <br> * resutil.c <br> */ <br> <br>PCONTROLDATA ParseDialogBoxHeader(PDIALOGBOXHEADER pdbh, PDWORD pflStyle, <br>    PDWORD pflExtStyle, PINT pcdit, PINT px, PINT py, PINT pcx, PINT pcy, <br>    LPTSTR *ppszMenuName, LPTSTR *ppszClass, LPTSTR *ppszCaption, <br>    PINT pPointSize, LPTSTR *ppszFontName); <br>PCONTROLDATA ParseControlData(PCONTROLDATA pcd, PDWORD pflStyle, <br>    PDWORD pflExtStyle, PINT px, PINT py, PINT pcx, PINT pcy, PINT pid, <br>    LPTSTR *ppszClass, LPTSTR *ppszText); <br>VOID DWordAlign(PBYTE *ppb); <br>VOID DWordPad(PBYTE *ppb); <br>LPTSTR ResourceType(PRES pRes); <br>LPTSTR ResourceName(PRES pRes); <br>PRES2 ResourcePart2(PRES pRes); <br>DWORD ResourceSize(PRES pRes); <br>PBYTE SkipResHeader(PRES pRes); <br>PBYTE SkipSz(LPTSTR pNameOrd); <br>PCONTROLDATA SkipDialogBoxHeader(PDIALOGBOXHEADER pdbh); <br>PCONTROLDATA SkipControlData(PCONTROLDATA pcd); <br>PBYTE NameOrdCpy(LPTSTR pNameOrdDest, LPTSTR pNameOrdSrc); <br>INT NameOrdCmp(LPTSTR pNameOrd1, LPTSTR pNameOrd2); <br>INT NameOrdLen(LPTSTR pNameOrd); <br>LPTSTR NameOrdDup(LPTSTR pNameOrd); <br>VOID StrToNameOrd(LPTSTR pszNameOrd, BOOL fDecOnly); <br>PBYTE WriteOrd(PORDINAL pOrd, INT nOrdinalID); <br>PBYTE WriteResHeader(PRES pRes, DWORD DataSize, INT iResType, LPTSTR pszResName, <br>    WORD fResFlags, WORD LanguageId, DWORD DataVersion, DWORD Version, <br>    DWORD Characteristics); <br>PBYTE WriteSz(LPTSTR pszDest, LPTSTR pszSrc); <br> <br> <br>/* <br> * rwdlg.c <br> */ <br> <br>BOOL WriteDlg(HANDLE hfWrite, LPTSTR pszFullDlgFile); <br> <br> <br>/* <br> * rwinc.c <br> */ <br> <br>BOOL OpenIncludeFile(LPTSTR pszOpenInclude); <br>VOID FreeInclude(VOID); <br>BOOL WriteInc(HANDLE hfWrite); <br> <br> <br>/* <br> * rwres.c <br> */ <br> <br>BOOL OpenResFile(LPTSTR pszFullPath); <br>BOOL WriteRes(HANDLE hfWrite, LPTSTR pszFullResFile); <br> <br> <br>/* <br> * select.c <br> */ <br> <br>BOOL SelectControl(NPCTYPE npc, BOOL fCheckShift); <br>VOID SelectControl2(NPCTYPE npc, BOOL fDontUpdate); <br>VOID RedrawSelection(VOID); <br>VOID SetAnchorToFirstSel(BOOL fDontUpdate); <br>VOID SelectNext(VOID); <br>VOID SelectPrevious(VOID); <br>VOID UnSelectControl(NPCTYPE npc); <br>VOID CalcSelectedRect(VOID); <br>VOID CancelSelection(BOOL fUpdate); <br>VOID OutlineSelectBegin(INT x, INT y); <br>VOID OutlineSelectDraw(INT x, INT y); <br>VOID OutlineSelectCancel(VOID); <br>VOID OutlineSelectEnd(INT x, INT y); <br>VOID MyFrameRect(HDC hDC, PRECT prc, DWORD dwRop); <br>VOID MoveControl(WPARAM vKey); <br>VOID PositionControl(PRECT prc); <br>VOID RepositionDialog(VOID); <br>VOID SaveDlgClientRect(HWND hwndDlg); <br>VOID SizeToText(VOID); <br>VOID AlignControls(INT cmd); <br>VOID ArrangeSpacing(INT cmd); <br>VOID ArrangeSize(INT cmd); <br>VOID ArrangePushButtons(INT cmd); <br> <br> <br>/* <br> * status.c <br> */ <br> <br>DIALOGPROC StatusDlgProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam); <br>BOOL StatusApplyChanges(VOID); <br>VOID StatusFillSymbolList(NPLABEL plHead); <br>VOID StatusSetCoords(PRECT prc); <br>VOID StatusUpdate(VOID); <br>VOID StatusSetEnable(VOID); <br>#ifdef JAPAN <br>VOID KKExpandCopy(LPTSTR, LPTSTR, WORD); <br>#endif <br> <br>/* <br> * styles.c <br> */ <br> <br>VOID StylesDialog(VOID); <br>DIALOGPROC GenericStylesDlgProc(HWND hwnd, UINT msg, WPARAM wParam, <br>    LPARAM lParam); <br>DIALOGPROC CheckBoxStylesDlgProc(HWND hwnd, UINT msg, WPARAM wParam, <br>    LPARAM lParam); <br>DIALOGPROC RadioButtonStylesDlgProc(HWND hwnd, UINT msg, WPARAM wParam, <br>    LPARAM lParam); <br>DIALOGPROC PushButtonStylesDlgProc(HWND hwnd, UINT msg, WPARAM wParam, <br>    LPARAM lParam); <br>DIALOGPROC ComboBoxStylesDlgProc(HWND hwnd, UINT msg, WPARAM wParam, <br>    LPARAM lParam); <br>DIALOGPROC EditStylesDlgProc(HWND hwnd, UINT msg, WPARAM wParam, <br>    LPARAM lParam); <br>DIALOGPROC ListBoxStylesDlgProc(HWND hwnd, UINT msg, WPARAM wParam, <br>    LPARAM lParam); <br>DIALOGPROC CustomStylesDlgProc(HWND hwnd, UINT msg, WPARAM wParam, <br>    LPARAM lParam); <br>DIALOGPROC DialogStylesDlgProc(HWND hwnd, UINT msg, WPARAM wParam, <br>    LPARAM lParam); <br>BOOL APIENTRY FontNameEnumFunc(LPLOGFONT lpLogFont, <br>    LPTEXTMETRIC lpTextMetric, INT nFontType, LPVOID lpData); <br>BOOL APIENTRY PointSizeEnumFunc(LPLOGFONT lpLogFont, <br>    LPTEXTMETRIC lpTextMetric, INT nFontType, LPVOID lpData); <br> <br> <br>/* <br> * toolbox.c <br> */ <br> <br>VOID ToolboxShow(BOOL fShow); <br>VOID ToolboxOnTop(VOID); <br>WINDOWPROC ToolboxWndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam); <br>WINDOWPROC ToolBtnWndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam); <br>VOID ToolboxSelectTool(INT type, BOOL fLock); <br> <br> <br>/* <br> * util.c <br> */ <br> <br>VOID *MyAlloc(INT cbAlloc); <br>VOID *MyRealloc(VOID *npMem, INT cbNewAlloc); <br>VOID *MyFree(VOID *npMem); <br>BOOL IsValue(LPTSTR pszValue); <br>BOOL HasBlanks(LPTSTR psz); <br>INT valtoi(LPTSTR pszValue); <br>INT axtoi(LPTSTR pch); <br>VOID Myitoa(INT n, LPTSTR psz); <br>VOID itoax(INT n, LPTSTR pszBuff); <br>BOOL IsUniqueID(INT id); <br>INT NextID(INT idType, NPLABEL plHead, INT idExclude); <br>INT Message(INT idMsg, ...); <br>VOID ClientToScreenRect(HWND hwnd, PRECT prc); <br>VOID ScreenToClientRect(HWND hwnd, PRECT prc); <br>VOID DUToWinPoint(PPOINT ppt); <br>VOID WinToDUPoint(PPOINT ppt); <br>VOID DUToWinRect(PRECT prc); <br>VOID WinToDURect(PRECT prc); <br>VOID MapDlgClientPoint(PPOINT ppt, BOOL fFromClient); <br>VOID MapWindowPoint(HWND hwndFrom, HWND hwndTo, PPOINT ppt); <br>VOID MyMapWindowRect(HWND hwndFrom, HWND hwndTo, PRECT prc); <br>VOID GetChildRect(HWND hwndChild, PRECT prc); <br>VOID CenterWindow(HWND hwnd); <br>VOID FitRectToScreen(PRECT prc); <br>LPTSTR ids(UINT idString); <br>INT PixelsToPointSize(INT nPixels); <br>INT PointSizeToPixels(INT nPointSize); <br> <br> <br> <br>/* <br> * viewinc.c <br> */ <br> <br>VOID ViewInclude(VOID); <br>DIALOGPROC ViewIncludeDlgProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam); </code></pre>
<p>&nbsp;</p></body>
</HTML>

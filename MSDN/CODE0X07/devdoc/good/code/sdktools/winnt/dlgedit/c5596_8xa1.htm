<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DIALOGS.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5599"></a>DIALOGS.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>/****************************** Module Header ******************************* <br>* Module Name: dialogs.c <br>* <br>* Contains many of the dialogs and supporting routines used by the <br>* dialog box editor. <br>* <br>* Functions: <br>* <br>*    DlgBox() <br>*    EnteringDialog() <br>*    CreateTestDialog() <br>*    DestroyTestDialog() <br>*    SelectDialogDialog() <br>*    ArrangeSettingsDialog() <br>*    AboutDlgProc() <br>*    SelectDialogDlgProc() <br>*    SelectDialogInit() <br>*    SelectDialogFillLangList() <br>*    SelectDialogOK() <br>*    TestDlgProc() <br>*    TestInitDlg() <br>*    ArrangeSettingsDlgProc() <br>* <br>* Comments: <br>*  <br>****************************************************************************/ <br> <br>#include "dlgedit.h" <br>#include "dlgfuncs.h" <br>#include "dlgextrn.h" <br>#include "dialogs.h" <br>#include "dlghelp.h" <br> <br> <br>/* <br> * Maximum number of characters in the Arrange Settings fields. <br> */ <br>#define CCHARRSETMAX    2 <br> <br>DIALOGPROC SelectDialogDlgProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam); <br>STATICFN VOID SelectDialogInit(HWND hwnd); <br>STATICFN VOID SelectDialogFillLangList(HWND hwnd); <br>STATICFN BOOL SelectDialogOK(HWND hwnd); <br>DIALOGPROC TestDlgProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam); <br>STATICFN VOID TestInitDlg(HWND hwnd); <br>DIALOGPROC ArrangeSettingsDlgProc(HWND hwnd, UINT msg, WPARAM wParam, <br>    LPARAM lParam); <br> <br> <br> <br>/************************************************************************ <br>* DlgBox <br>* <br>* This function basically does a DialogBox, but it does it safely <br>* for the dialog editor, saving some states. <br>* <br>* Arguments: <br>*     INT idDlg       = Ordinal name of the dialog. <br>*     WNDPROC lpfnDlg = Dialog procedure to use (this function will <br>*                       call Make/FreeProcInstance). <br>* <br>* Returns: <br>*     What DialogBox returned. <br>* <br>************************************************************************/ <br> <br>INT DlgBox( <br>    INT idDlg, <br>    WNDPROC lpfnDlg) <br>{ <br>    INT nResult; <br>    INT idPrevDlg; <br> <br>    EnteringDialog(idDlg, &amp;idPrevDlg, TRUE); <br>    nResult = DialogBox(ghInst, MAKEINTRESOURCE(idDlg), ghwndMain, (DLGPROC)lpfnDlg); <br>    EnteringDialog(idPrevDlg, NULL, FALSE); <br> <br>    return nResult; <br>} <br> <br> <br> <br>/************************************************************************ <br>* EnteringDialog <br>* <br>* This function enables or disables things based on whether we are <br>* going to show one of the editor's dialogs.  It must be called <br>* before and after showing a dialog box. <br>* <br>* Arguments: <br>*   INT idDlg       - Ordinal name of the dialog. <br>*   PINT pidPrevDlg - Points to where to save the id of the previous <br>*                     (current) dialog.  If fEntering is FALSE, this <br>*                     is not used and should be NULL. <br>*   BOOL fEntering  - TRUE if about ready to show the dialog.  FALSE if <br>*                     the dialog was just dismissed.  For the FALSE case, <br>*                     the idDlg should be zero, or the id of the previous <br>*                     dialog. <br>* <br>************************************************************************/ <br> <br>VOID EnteringDialog( <br>    INT idDlg, <br>    PINT pidPrevDlg, <br>    BOOL fEntering) <br>{ <br>    /* <br>     * If we are entering a new dialog, save the previous dialog <br>     * in the place specified. <br>     */ <br>    if (fEntering) <br>        *pidPrevDlg = gidCurrentDlg; <br> <br>    gfDisabled = fEntering; <br>    gidCurrentDlg = idDlg; <br>    StatusSetEnable(); <br> <br>    if (ghwndToolbox) <br>        EnableWindow(ghwndToolbox, !fEntering); <br>} <br> <br> <br> <br>/************************************************************************ <br>* SelectDialogDialog <br>* <br>* This function saves the current dialog box in the resource in <br>* memory, then it puts up a dialog box with a list of dialog <br>* boxes in the resource.  Finally it puts up the selected dialog. <br>* <br>************************************************************************/ <br> <br>VOID SelectDialogDialog(VOID) <br>{ <br>    if (!SynchDialogResource()) <br>        return; <br> <br>    DlgBox(DID_SELECTDIALOG, (WNDPROC)SelectDialogDlgProc); <br>} <br> <br> <br> <br>/************************************************************************ <br>* SelectDialogDlgProc <br>* <br>* This is the View Dialog dialog procedure. <br>* <br>* Arguments: <br>*    HWND - handle to the dialog <br>*    UINT - window message <br>*    WPARAM - message parameter  <br>*    LPARAM - message parameter <br>* <br>* Returns: <br>*    Default dialog return. <br>* <br>************************************************************************/ <br> <br>DIALOGPROC SelectDialogDlgProc( <br>    HWND hwnd, <br>    UINT msg, <br>    WPARAM wParam, <br>    LPARAM lParam) <br>{ <br>    switch (msg) { <br>        case WM_INITDIALOG: <br>            SelectDialogInit(hwnd); <br>            return TRUE; <br> <br>        case WM_COMMAND: <br>            switch (LOWORD(wParam)) { <br>                case DID_SELECTDIALOGNAMELIST: <br>                    switch (HIWORD(wParam)) { <br>                        case LBN_SELCHANGE: <br>                            SelectDialogFillLangList(hwnd); <br>                            break; <br> <br>                        case LBN_DBLCLK: <br>                            if (SelectDialogOK(hwnd)) <br>                                EndDialog(hwnd, IDOK); <br> <br>                            break; <br>                    } <br> <br>                    break; <br> <br>                case DID_SELECTDIALOGLANGLIST: <br>                    switch (HIWORD(wParam)) { <br>                        case LBN_DBLCLK: <br>                            if (SelectDialogOK(hwnd)) <br>                                EndDialog(hwnd, IDOK); <br> <br>                            break; <br>                    } <br> <br>                    break; <br> <br>                case IDOK: <br>                    if (SelectDialogOK(hwnd)) <br>                        EndDialog(hwnd, IDOK); <br> <br>                    break; <br> <br>                case IDCANCEL: <br>                    EndDialog(hwnd, IDCANCEL); <br>                    break; <br> <br>                case IDHELPDLG: <br>                    WinHelp(ghwndMain, gszHelpFile, HELP_CONTEXT, <br>                            HELPID_SELECTDIALOG); <br>                    break; <br>            } <br> <br>            return TRUE; <br> <br>        default: <br>            return FALSE; <br>    } <br>} <br> <br> <br> <br>/************************************************************************ <br>* SelectDialogInit <br>* <br>* Processes the WM_INITDIALOG message for the Select Dialog dialog <br>* procedure. <br>* <br>* This function fills the select dialog listbox with the names or <br>* numbers of all the dialogs in the resource list.  If the dialog has <br>* a name, that is used.  If it just has an ordinal, then the decimal <br>* ascii string for the ordinal number is used. <br>* <br>* Arguments: <br>*    HWND - handle to the dialog <br>* <br>************************************************************************/ <br> <br>STATICFN VOID SelectDialogInit( <br>    HWND hwnd) <br>{ <br>    HWND hwndNameLB; <br>    TCHAR szName[CCHTEXTMAX]; <br>    INT i; <br>    INT cDlgsAdded; <br>    INT iSelect; <br>    PRESLINK prl; <br>    PRESLINK prl2; <br>    LPTSTR pszName; <br>    NPLABEL npLabel; <br> <br>    hwndNameLB = GetDlgItem(hwnd, DID_SELECTDIALOGNAMELIST); <br>    cDlgsAdded = 0; <br> <br>    /* <br>     * Insert each dialog found in the resource. <br>     */ <br>    for (prl = gprlHead; prl; prl = prl-&gt;prlNext) { <br>        if (prl-&gt;fDlgResource) { <br>            /* <br>             * Check to be sure we have not added a dialog with this <br>             * name already (but perhaps a different language). <br>             */ <br>            for (prl2 = gprlHead; prl2 != prl; prl2 = prl2-&gt;prlNext) { <br>                if (prl2-&gt;fDlgResource) { <br>                    if (NameOrdCmp(prl2-&gt;pszName, prl-&gt;pszName) == 0) <br>                        break; <br>                } <br>            } <br> <br>            if (prl2 == prl) { <br>                /* <br>                 * If the name is an ordinal, display a number.  If there <br>                 * happens to be a define for this number, display that <br>                 * instead, however. <br>                 * <br>                 * Note that we do not ever show it in hex, because <br>                 * rc.exe does not parse hex ordinals for dialogs, so <br>                 * we never show it in that format. <br>                 */ <br>                if (IsOrd(prl-&gt;pszName)) { <br>                    if (npLabel = FindID(OrdID(prl-&gt;pszName), plInclude)) <br>                        pszName = npLabel-&gt;pszLabel; <br>                    else <br>                        pszName = itoaw(OrdID(prl-&gt;pszName), szName, 10); <br>                } <br>                else { <br>                    pszName = prl-&gt;pszName; <br>                } <br> <br>                i = (INT)SendMessage(hwndNameLB, LB_ADDSTRING, 0, (DWORD)pszName); <br>                SendMessage(hwndNameLB, LB_SETITEMDATA, i, (DWORD)prl); <br>                cDlgsAdded++; <br>            } <br>        } <br>    } <br> <br>    /* <br>     * If there is a current dialog, search for it and <br>     * make it the default selected item. <br>     */ <br>    iSelect = 0; <br>    if (gcd.prl) { <br>        for (i = 0; i &lt; cDlgsAdded; i++) { <br>            prl = (PRESLINK)SendMessage(hwndNameLB, LB_GETITEMDATA, i, 0L); <br>            if (NameOrdCmp(prl-&gt;pszName, gcd.prl-&gt;pszName) == 0) { <br>                iSelect = i; <br>                break; <br>            } <br>        } <br>    } <br> <br>    SendMessage(hwndNameLB, LB_SETCURSEL, iSelect, 0L); <br> <br>    SelectDialogFillLangList(hwnd); <br> <br>    CenterWindow(hwnd); <br>} <br> <br> <br> <br>/************************************************************************ <br>* SelectDialogFillLangList <br>* <br>* Fills the listbox with the list of dialogs matching the specified name <br>* <br>* Arguments: <br>*    HWND - handle to the dialog editor window <br>* <br>************************************************************************/ <br> <br>STATICFN VOID SelectDialogFillLangList( <br>    HWND hwnd) <br>{ <br>    TCHAR szLang[CCHTEXTMAX]; <br>    HWND hwndNameLB; <br>    HWND hwndLangLB; <br>    PRESLINK prl; <br>    INT i; <br>    INT iSelect; <br>    WORD wPrimary; <br>    WORD wSubLang; <br>    INT iLang; <br>    INT iSubLang; <br>    LPTSTR pszName; <br>    INT cItems; <br> <br>    hwndNameLB = GetDlgItem(hwnd, DID_SELECTDIALOGNAMELIST); <br>    hwndLangLB = GetDlgItem(hwnd, DID_SELECTDIALOGLANGLIST); <br> <br>    SendMessage(hwndLangLB, LB_RESETCONTENT, 0, 0); <br> <br>    if ((iSelect = (INT)SendMessage(hwndNameLB, LB_GETCURSEL, 0, 0)) == LB_ERR) <br>        return; <br> <br>    /* <br>     * Get the name of the dialog selected in the Name listbox <br>     * (the reslink pointer is stored in the listbox items data field). <br>     */ <br>    prl = (PRESLINK)SendMessage(hwndNameLB, LB_GETITEMDATA, iSelect, 0L); <br>    pszName = prl-&gt;pszName; <br> <br>    /* <br>     * Insert each dialog found in the resource that matches that name. <br>     */ <br>    for (prl = gprlHead; prl; prl = prl-&gt;prlNext) { <br>        if (prl-&gt;fDlgResource &amp;&amp; NameOrdCmp(prl-&gt;pszName, pszName) == 0) { <br>            wPrimary = (WORD)PRIMARYLANGID(prl-&gt;wLanguage); <br>            for (iLang = 0; iLang &lt; gcLanguages; iLang++) { <br>                if (gaLangTable[iLang].wPrimary == wPrimary) { <br>                    break; <br>                } <br>            } <br> <br>            wSubLang = SUBLANGID(prl-&gt;wLanguage); <br>            for (iSubLang = 0; <br>                    iSubLang &lt; gaLangTable[iLang].cSubLangs; <br>                    iSubLang++) { <br>                if (wSubLang == gaLangTable[iLang].asl[iSubLang].wSubLang) { <br>                    break; <br>                } <br>            } <br> <br>            wsprintf(szLang, L"%s, %s", <br>                    ids(gaLangTable[iLang].idsLangDesc), <br>                    ids(gaLangTable[iLang].asl[iSubLang].idsSubLangDesc)); <br> <br>            i = (INT)SendMessage(hwndLangLB, LB_ADDSTRING, 0, (DWORD)szLang); <br>            SendMessage(hwndLangLB, LB_SETITEMDATA, i, (DWORD)prl); <br>        } <br>    } <br> <br>    iSelect = 0; <br>    cItems = (INT)SendMessage(hwndLangLB, LB_GETCOUNT, 0, 0); <br>    if (gcd.prl &amp;&amp; NameOrdCmp(gcd.prl-&gt;pszName, pszName) == 0) { <br>        for (i = 0; i &lt; cItems; i++) { <br>            prl = (PRESLINK)SendMessage(hwndLangLB, LB_GETITEMDATA, i, 0); <br>            if (gcd.prl == prl) { <br>                iSelect = i; <br>                break; <br>            } <br>        } <br>    } <br> <br>    SendMessage(hwndLangLB, LB_SETCURSEL, iSelect, 0L); <br>} <br> <br> <br> <br>/************************************************************************ <br>* SelectDialogOK <br>* <br>* Processes the selection of a new dialog from the Select Dialog <br>* dialog procedure. <br>* <br>* Arguments: <br>*    HWND - handle to the select dialog box <br>* <br>* Returns: <br>*    TRUE  <br>* <br>************************************************************************/ <br> <br>STATICFN BOOL SelectDialogOK( <br>    HWND hwnd) <br>{ <br>    HWND hwndLangLB; <br>    INT iSelect; <br>    PRESLINK prl; <br> <br>    hwndLangLB = GetDlgItem(hwnd, DID_SELECTDIALOGLANGLIST); <br> <br>    if ((iSelect = (INT)SendMessage(hwndLangLB, LB_GETCURSEL, 0, 0)) != <br>            LB_ERR) { <br>        /* <br>         * Get a pointer to the selected dialog (stored in the listbox <br>         * items data field). <br>         */ <br>        prl = (PRESLINK)SendMessage(hwndLangLB, LB_GETITEMDATA, iSelect, 0L); <br> <br>        /* <br>         * Is there a dialog currently being edited? <br>         */ <br>        if (gfEditingDlg) { <br>            /* <br>             * If they chose the same dialog as what they are currently <br>             * editing, just get out without doing anything more. <br>             * Otherwise, delete the current dialog because we are <br>             * now committed to loading a new one. <br>             */ <br>            if (prl == gcd.prl) <br>                return TRUE; <br>            else <br>                DeleteDialog(FALSE); <br>        } <br> <br>        /* <br>         * Finally, load the new dialog (make it current). <br>         */ <br>        ResLinkToDialog(prl); <br> <br>        /* <br>         * Select the new dialog, if it was successfully created. <br>         */ <br>        if (gfEditingDlg) <br>            SelectControl(gcd.npc, FALSE); <br>    } <br> <br>    return TRUE; <br>} <br> <br> <br> <br>/************************************************************************ <br>* CreateTestDialog <br>* <br>* Creates a dialog for the test mode of the dialog editor <br>* <br>************************************************************************/ <br> <br>VOID CreateTestDialog(VOID) <br>{ <br>    PRES pRes; <br>    PDIALOGBOXHEADER pdbh; <br> <br>    if (!gfEditingDlg) <br>        return; <br> <br>    CancelSelection(TRUE); <br> <br>    /* <br>     * Save the current dialog in the resource buffer. <br>     */ <br>    if (!SynchDialogResource()) <br>        return; <br> <br>    /* <br>     * Make a memory copy of the current dialog resource for test mode. <br>     */ <br>    if (!(pRes = AllocDialogResource(TRUE, FALSE))) <br>        return; <br> <br>    pdbh = (PDIALOGBOXHEADER)SkipResHeader(pRes); <br> <br>    /* <br>     * Create the test dialog in a modeless loop using the test dialog proc. <br>     */ <br>    ghwndTestDlg = CreateDialogIndirect(ghInst, (LPDLGTEMPLATE)pdbh, <br>            ghwndSubClient, TestDlgProc); <br> <br>    if (ghwndTestDlg) { <br>        gfTestMode = TRUE; <br> <br>        /* <br>         * Disable various top level menus. <br>         */ <br>        MyEnableMenuItemByPos(ghMenuMain, MENUPOS_FILE, FALSE); <br>        MyEnableMenuItemByPos(ghMenuMain, MENUPOS_EDIT, FALSE); <br>        MyEnableMenuItemByPos(ghMenuMain, MENUPOS_ARRANGE, FALSE); <br>        DrawMenuBar(ghwndMain); <br> <br>        ToolboxSelectTool(W_NOTHING, FALSE); <br>        if (gfShowToolbox) <br>            ToolboxShow(FALSE); <br> <br>        StatusSetEnable(); <br> <br>        /* <br>         * Remove the work mode dialog from view (actually, it is now <br>         * hidden behind the test dialog, but we hide it in case the <br>         * user moves the test dialog. <br>         */ <br>        ShowWindow(gcd.npc-&gt;hwnd, SW_HIDE); <br>    } <br>} <br> <br> <br> <br>/************************************************************************ <br>* TestDlgProc <br>* <br>* This is the dialog procedure for the dialog in Test mode. <br>* <br>************************************************************************/ <br> <br>DIALOGPROC TestDlgProc( <br>    HWND hwnd, <br>    UINT msg, <br>    WPARAM wParam, <br>    LPARAM lParam) <br>{ <br>    switch (msg) { <br>        case WM_INITDIALOG: <br>            TestInitDlg(hwnd); <br>            return TRUE; <br> <br>        case WM_SYSCOMMAND: <br>            if (wParam == SC_CLOSE) { <br>                DestroyTestDialog(); <br>                return TRUE; <br>            } <br> <br>            return FALSE; <br> <br>        case WM_DRAWITEM: <br>            return DrawOwnerDrawButton((LPDRAWITEMSTRUCT)lParam); <br> <br>        case WM_DESTROY: <br>            gfTestMode = FALSE; <br> <br>            ShowWindow(gcd.npc-&gt;hwnd, SW_SHOWNA); <br> <br>            /* <br>             * Enable various top level menus. <br>             */ <br>            MyEnableMenuItemByPos(ghMenuMain, MENUPOS_FILE, TRUE); <br>            MyEnableMenuItemByPos(ghMenuMain, MENUPOS_EDIT, TRUE); <br>            MyEnableMenuItemByPos(ghMenuMain, MENUPOS_ARRANGE, TRUE); <br>            DrawMenuBar(ghwndMain); <br> <br>            if (gfShowToolbox) <br>                ToolboxShow(TRUE); <br> <br>            StatusSetEnable(); <br> <br>            return TRUE; <br> <br>        default: <br>            return FALSE; <br>    } <br>} <br> <br> <br> <br>/************************************************************************ <br>* TestInitDlg <br>* <br>* This function handles the initialization of the test dialog. <br>* <br>* Arguments: <br>*     HWND hwnd = The test dialog window handle. <br>* <br>************************************************************************/ <br> <br>STATICFN VOID TestInitDlg( <br>    HWND hwnd) <br>{ <br>    register INT i; <br>    TCHAR szBuf[CCHTEXTMAX]; <br>    HWND hwndCtrl; <br>    LPTSTR pszTextEnd; <br>    TCHAR szClass[32]; <br>    INT iClass; <br> <br>    /* <br>     * The following will fill some controls with sample text lines. <br>     */ <br>    lstrcpy(szBuf, ids(IDS_DEFLBTEXT)); <br>    pszTextEnd = szBuf + lstrlen(szBuf); <br>    hwndCtrl = GetWindow(hwnd, GW_CHILD); <br>    while (hwndCtrl) { <br>        GetClassName(hwndCtrl, szClass, sizeof(szClass)); <br> <br>        switch (iClass = GetiClass(szClass)) { <br>            case IC_LISTBOX: <br>            case IC_COMBOBOX: <br>                /* <br>                 * Fill listboxes and comboboxes with some sample lines. <br>                 */ <br>                for (i = 1; i &lt;= CLBTESTLINES; i++) { <br>                    itoaw(i, pszTextEnd, 10); <br>                    SendMessage(hwndCtrl, <br>                            (WORD)((iClass == IC_LISTBOX) ? <br>                            LB_INSERTSTRING : CB_INSERTSTRING), <br>                            (WPARAM)-1, (DWORD)szBuf); <br>                } <br> <br>                break; <br>        } <br> <br>        hwndCtrl = GetWindow(hwndCtrl, GW_HWNDNEXT); <br>    } <br>} <br> <br> <br> <br>/************************************************************************ <br>* DestroyTestDialog <br>* <br>* Destroys the test dialog window. <br>************************************************************************/ <br> <br>VOID DestroyTestDialog(VOID) <br>{ <br>    DestroyWindow(ghwndTestDlg); <br>    ghwndTestDlg = NULL; <br>} <br> <br> <br> <br>/************************************************************************ <br>* ArrangeSettingsDialog <br>* <br>* This function displays the Arrange Settings dialog box. <br>* <br>************************************************************************/ <br> <br>VOID ArrangeSettingsDialog(VOID) <br>{ <br>    DlgBox(DID_ARRSETTINGS, (WNDPROC)ArrangeSettingsDlgProc); <br>} <br> <br> <br> <br>/************************************************************************ <br>* ArrangeSettingsDlgProc <br>* <br>* This is the Arrange Settings dialog procedure. <br>* <br>************************************************************************/ <br> <br>DIALOGPROC ArrangeSettingsDlgProc( <br>    HWND hwnd, <br>    UINT msg, <br>    WPARAM wParam, <br>    LPARAM lParam) <br>{ <br>    switch (msg) { <br>        case WM_INITDIALOG: <br>            SendDlgItemMessage(hwnd, DID_ARRSETCXGRID, EM_LIMITTEXT, <br>                    CCHARRSETMAX, 0L); <br>            SendDlgItemMessage(hwnd, DID_ARRSETCYGRID, EM_LIMITTEXT, <br>                    CCHARRSETMAX, 0L); <br>            SetDlgItemInt(hwnd, DID_ARRSETCXGRID, gcxGrid, TRUE); <br>            SetDlgItemInt(hwnd, DID_ARRSETCYGRID, gcyGrid, TRUE); <br> <br>            SendDlgItemMessage(hwnd, DID_ARRSETXMARGIN, EM_LIMITTEXT, <br>                    CCHARRSETMAX, 0L); <br>            SendDlgItemMessage(hwnd, DID_ARRSETYMARGIN, EM_LIMITTEXT, <br>                    CCHARRSETMAX, 0L); <br>            SetDlgItemInt(hwnd, DID_ARRSETXMARGIN, gxMargin, TRUE); <br>            SetDlgItemInt(hwnd, DID_ARRSETYMARGIN, gyMargin, TRUE); <br> <br>            SendDlgItemMessage(hwnd, DID_ARRSETXSPACE, EM_LIMITTEXT, <br>                    CCHARRSETMAX, 0L); <br>            SendDlgItemMessage(hwnd, DID_ARRSETYSPACE, EM_LIMITTEXT, <br>                    CCHARRSETMAX, 0L); <br>            SetDlgItemInt(hwnd, DID_ARRSETXSPACE, gxSpace, TRUE); <br>            SetDlgItemInt(hwnd, DID_ARRSETYSPACE, gySpace, TRUE); <br> <br>            SendDlgItemMessage(hwnd, DID_ARRSETXMINPUSHSPACE, EM_LIMITTEXT, <br>                    CCHARRSETMAX, 0L); <br>            SendDlgItemMessage(hwnd, DID_ARRSETXMAXPUSHSPACE, EM_LIMITTEXT, <br>                    CCHARRSETMAX, 0L); <br>            SendDlgItemMessage(hwnd, DID_ARRSETYPUSHSPACE, EM_LIMITTEXT, <br>                    CCHARRSETMAX, 0L); <br>            SetDlgItemInt(hwnd, DID_ARRSETXMINPUSHSPACE, gxMinPushSpace, TRUE); <br>            SetDlgItemInt(hwnd, DID_ARRSETXMAXPUSHSPACE, gxMaxPushSpace, TRUE); <br>            SetDlgItemInt(hwnd, DID_ARRSETYPUSHSPACE, gyPushSpace, TRUE); <br> <br>            CenterWindow(hwnd); <br> <br>            return TRUE; <br> <br>        case WM_COMMAND: <br>            switch (LOWORD(wParam)) { <br>                INT cxGridNew; <br>                INT cyGridNew; <br>                INT xMarginNew; <br>                INT yMarginNew; <br>                INT xSpaceNew; <br>                INT ySpaceNew; <br>                INT xMinPushSpaceNew; <br>                INT xMaxPushSpaceNew; <br>                INT yPushSpaceNew; <br>                BOOL fTranslated1; <br>                BOOL fTranslated2; <br>                BOOL fTranslated3; <br> <br>                case IDOK: <br>                    cxGridNew = GetDlgItemInt(hwnd, DID_ARRSETCXGRID, <br>                            &amp;fTranslated1, TRUE); <br>                    cyGridNew = GetDlgItemInt(hwnd, DID_ARRSETCYGRID, <br>                            &amp;fTranslated2, TRUE); <br> <br>                    if (!fTranslated1 || !fTranslated2 || <br>                            cxGridNew &lt;= 0 || cyGridNew &lt;= 0) { <br>                        Message(MSG_GTZERO, ids(IDS_GRID)); <br>                        SetFocus(GetDlgItem(hwnd, DID_ARRSETCXGRID)); <br>                        break; <br>                    } <br> <br>                    xMarginNew = GetDlgItemInt(hwnd, DID_ARRSETXMARGIN, <br>                            &amp;fTranslated1, TRUE); <br>                    yMarginNew = GetDlgItemInt(hwnd, DID_ARRSETYMARGIN, <br>                            &amp;fTranslated2, TRUE); <br> <br>                    if (!fTranslated1 || !fTranslated2 || <br>                            xMarginNew &lt; 0 || yMarginNew &lt; 0) { <br>                        Message(MSG_POSITIVENUM, ids(IDS_MARGIN)); <br>                        SetFocus(GetDlgItem(hwnd, DID_ARRSETXMARGIN)); <br>                        break; <br>                    } <br> <br>                    xSpaceNew = GetDlgItemInt(hwnd, DID_ARRSETXSPACE, <br>                            &amp;fTranslated1, TRUE); <br>                    ySpaceNew = GetDlgItemInt(hwnd, DID_ARRSETYSPACE, <br>                            &amp;fTranslated2, TRUE); <br> <br>                    if (!fTranslated1 || !fTranslated2 || <br>                            xSpaceNew &lt; 0 || ySpaceNew &lt; 0) { <br>                        Message(MSG_POSITIVENUM, ids(IDS_CTRLSPACING)); <br>                        SetFocus(GetDlgItem(hwnd, DID_ARRSETXSPACE)); <br>                        break; <br>                    } <br> <br>                    xMinPushSpaceNew = GetDlgItemInt(hwnd, <br>                            DID_ARRSETXMINPUSHSPACE, &amp;fTranslated1, TRUE); <br>                    xMaxPushSpaceNew = GetDlgItemInt(hwnd, <br>                            DID_ARRSETXMAXPUSHSPACE, &amp;fTranslated2, TRUE); <br>                    yPushSpaceNew = GetDlgItemInt(hwnd, DID_ARRSETYPUSHSPACE, <br>                            &amp;fTranslated3, TRUE); <br> <br>                    if (!fTranslated1 || !fTranslated2 || !fTranslated3 || <br>                            xMinPushSpaceNew &lt; 0 || xMaxPushSpaceNew &lt; 0 || <br>                            yPushSpaceNew &lt; 0) { <br>                        Message(MSG_POSITIVENUM, ids(IDS_PUSHSPACING)); <br>                        SetFocus(GetDlgItem(hwnd, DID_ARRSETXMINPUSHSPACE)); <br>                        break; <br>                    } <br> <br>                    if (xMinPushSpaceNew &gt; xMaxPushSpaceNew) { <br>                        Message(MSG_MINGTMAXSPACE); <br>                        SetFocus(GetDlgItem(hwnd, DID_ARRSETXMINPUSHSPACE)); <br>                        break; <br>                    } <br> <br>                    gcxGrid = cxGridNew; <br>                    gcyGrid = cyGridNew; <br>                    gxMargin = xMarginNew; <br>                    gyMargin = yMarginNew; <br>                    gxSpace = xSpaceNew; <br>                    gySpace = ySpaceNew; <br>                    gxMinPushSpace = xMinPushSpaceNew; <br>                    gxMaxPushSpace = xMaxPushSpaceNew; <br>                    gyPushSpace = yPushSpaceNew; <br> <br>                    EndDialog(hwnd, LOWORD(wParam)); <br>                    break; <br> <br>                case DID_ARRSETDEFAULTS: <br>                    SetDlgItemInt(hwnd, DID_ARRSETCXGRID, <br>                            DEFCXGRID, TRUE); <br>                    SetDlgItemInt(hwnd, DID_ARRSETCYGRID, <br>                            DEFCYGRID, TRUE); <br> <br>                    SetDlgItemInt(hwnd, DID_ARRSETXMARGIN, <br>                            DEFXMARGIN, TRUE); <br>                    SetDlgItemInt(hwnd, DID_ARRSETYMARGIN, <br>                            DEFYMARGIN, TRUE); <br> <br>                    SetDlgItemInt(hwnd, DID_ARRSETXSPACE, <br>                            DEFXSPACE, TRUE); <br>                    SetDlgItemInt(hwnd, DID_ARRSETYSPACE, <br>                            DEFYSPACE, TRUE); <br> <br>                    SetDlgItemInt(hwnd, DID_ARRSETXMINPUSHSPACE, <br>                            DEFXMINPUSHSPACE, TRUE); <br>                    SetDlgItemInt(hwnd, DID_ARRSETXMAXPUSHSPACE, <br>                            DEFXMAXPUSHSPACE, TRUE); <br>                    SetDlgItemInt(hwnd, DID_ARRSETYPUSHSPACE, <br>                            DEFYPUSHSPACE, TRUE); <br> <br>                    break; <br> <br>                case IDCANCEL: <br>                    EndDialog(hwnd, IDCANCEL); <br>                    break; <br> <br>                case IDHELPDLG: <br>                    WinHelp(ghwndMain, gszHelpFile, HELP_CONTEXT, <br>                            HELPID_ARRSETTINGS); <br>                    break; <br>            } <br> <br>            return TRUE; <br> <br>        default: <br>            return FALSE; <br>    } <br>} <br> <br> <br> <br>/************************************************************************ <br>* AboutDlgProc <br>* <br>* This is the About Box dialog procedure. <br>* <br>************************************************************************/ <br> <br>DIALOGPROC AboutDlgProc( <br>    HWND hwnd, <br>    UINT msg, <br>    WPARAM wParam, <br>    LPARAM lParam) <br>{ <br>    switch (msg) { <br>        case WM_INITDIALOG: <br>            { <br>                TCHAR szVersion[CCHTEXTMAX]; <br> <br>                lstrcpy(szVersion, ids(IDS_APPVERSION)); <br>                lstrcat(szVersion, ids(IDS_APPVERSIONMINOR)); <br> <br>                SetDlgItemText(hwnd, DID_ABOUTVERSION, szVersion); <br>                CenterWindow(hwnd); <br>            } <br> <br>            return TRUE; <br> <br>        case WM_COMMAND: <br>            EndDialog(hwnd, IDOK); <br>            return TRUE; <br> <br>        default: <br>            return FALSE; <br>    } <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

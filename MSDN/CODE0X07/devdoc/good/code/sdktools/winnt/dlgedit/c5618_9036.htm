<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STYLES.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5622"></a>STYLES.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>/****************************** Module Header ******************************* <br>* Module Name: styles.c <br>* <br>* Handles the control styles selection, including the styles dialogs. <br>* <br>* Functions: <br>* <br>*    StylesDialog() <br>*    GenericStylesDlgProc() <br>*    CheckBoxStylesDlgProc() <br>*    RadioButtonStylesDlgProc() <br>*    PushButtonStylesDlgProc() <br>*    ComboBoxStylesDlgProc() <br>*    EditStylesDlgProc() <br>*    ListBoxStylesDlgProc() <br>*    CustomStylesDlgProc() <br>*    DialogStylesDlgProc() <br>*    FontNameEnumFunc() <br>*    PointSizeEnumFunc() <br>*    EnableComboBoxStyles() <br>*    EnableEditStyles() <br>*    EnableListBoxStyles() <br>*    SetCustomStylesField() <br>*    GetCustomStylesField() <br>*    EnableDialogStyles() <br>*    FillFontNameCombo() <br>*    FillPointSizeCombo() <br>*    AddToPointSizeCombo() <br>*    FillLanguageCombo() <br>*    FillSubLanguageCombo() <br>*    CheckStyleBoxes() <br>*    QueryCheckedStyles() <br>*    StylesHelp() <br>* <br>* Comments: <br>* <br>****************************************************************************/ <br> <br>#include "dlgedit.h" <br>#include "dlgfuncs.h" <br>#include "dlgextrn.h" <br>#include "dialogs.h" <br> <br> <br>STATICFN VOID EnableComboBoxStyles(HWND hwnd, INT idCtrl); <br>STATICFN VOID EnableEditStyles(HWND hwnd, INT idCtrl); <br>STATICFN VOID EnableListBoxStyles(HWND hwnd, INT idCtrl); <br>STATICFN VOID SetCustomStylesField(HWND hwnd, DWORD flStyle); <br>STATICFN DWORD GetCustomStylesField(HWND hwnd); <br>STATICFN VOID EnableDialogStyles(HWND hwnd, INT idCtrl); <br>STATICFN VOID FillFontNameCombo(HWND hwndDlg); <br>STATICFN VOID FillPointSizeCombo(HWND hwndDlg, LPTSTR pszFaceName); <br>STATICFN VOID AddToPointSizeCombo(HWND hwndCombo, INT nPointSize); <br>STATICFN VOID FillLanguageCombo(HWND hwndDlg); <br>STATICFN VOID FillSubLanguageCombo(HWND hwndDlg, INT iLang); <br>STATICFN VOID CheckStyleBoxes(HWND hwnd, INT iClass, DWORD flStyle); <br>STATICFN VOID QueryCheckedStyles(HWND hwnd, INT iClass, DWORD *pflStyle); <br>STATICFN VOID StylesHelp(VOID); <br> <br>/* <br> * Global pointer to the CTYPE for the control or dialog whose styles <br> * are being worked on.  All the styles dialog procs and workers use <br> * this pointer. <br> */ <br>static NPCTYPE npcStyles; <br> <br>/* <br> * Globals that receive the new styles the user selected. <br> */ <br>static DWORD flStyleNew; <br>static DWORD flExtStyleNew; <br>static LPTSTR pszTextNew; <br>static DIALOGINFO diNew; <br> <br> <br> <br>/************************************************************************ <br>* StylesDialog <br>* <br>* Displays the appropriate styles dialog for the currently selected <br>* control.  If the user OK's the changes, this function sets the <br>* style of the control. <br>* <br>************************************************************************/ <br> <br>VOID StylesDialog(VOID) <br>{ <br>    NPCTYPE npc; <br>    HWND hwndOld; <br>    INT fDlgResult; <br>    BOOL fChanged = FALSE; <br>    BOOL fFontChanged = FALSE; <br>    TCHAR szClassNew[CCHTEXTMAX]; <br>    TCHAR szMenuNew[CCHTEXTMAX]; <br>    TCHAR szTextNew[CCHTEXTMAX]; <br> <br>    /* <br>     * Quit if nothing was selected, or if we are in translate mode. <br>     */ <br>    if (!gnpcSel || gfTranslateMode) <br>        return; <br> <br>    /* <br>     * Set globals that the styles dialogs and worker routines will use. <br>     */ <br>    npcStyles = gnpcSel; <br>    flStyleNew = npcStyles-&gt;flStyle; <br>    flExtStyleNew = npcStyles-&gt;flExtStyle; <br> <br>    if (npcStyles-&gt;text) <br>        NameOrdCpy(szTextNew, npcStyles-&gt;text); <br>    else <br>        *szTextNew = CHAR_NULL; <br> <br>    pszTextNew = szTextNew; <br> <br>    /* <br>     * Set some other globals if this is the dialog instead of a control. <br>     */ <br>    if (gfDlgSelected) { <br>        diNew.fResFlags = gcd.di.fResFlags; <br>        diNew.wLanguage = gcd.di.wLanguage; <br>        diNew.DataVersion = gcd.di.DataVersion; <br>        diNew.Version = gcd.di.Version; <br>        diNew.Characteristics = gcd.di.Characteristics; <br> <br>        lstrcpy(diNew.szFontName, gcd.di.szFontName); <br>        diNew.nPointSize = gcd.di.nPointSize; <br> <br>        diNew.pszClass = szClassNew; <br>        if (gcd.di.pszClass) <br>            NameOrdCpy(szClassNew, gcd.di.pszClass); <br>        else <br>            *szClassNew = CHAR_NULL; <br> <br>        diNew.pszMenu = szMenuNew; <br>        if (gcd.di.pszMenu) <br>            NameOrdCpy(szMenuNew, gcd.di.pszMenu); <br>        else <br>            *szMenuNew = CHAR_NULL; <br>    } <br> <br>    /* <br>     * Is this a custom control that has a styles proc to use? <br>     */ <br>    if (npcStyles-&gt;pwcd-&gt;iType == W_CUSTOM &amp;&amp; npcStyles-&gt;pwcd-&gt;lpfnStyle) { <br>        fDlgResult = CallCustomStyle(npcStyles, &amp;flStyleNew, &amp;flExtStyleNew, <br>            szTextNew); <br>    } <br>    else { <br>        /* <br>         * Show the appropriate styles dialog. <br>         */ <br>        fDlgResult = DlgBox(npcStyles-&gt;pwcd-&gt;idStylesDialog, <br>                (WNDPROC)npcStyles-&gt;pwcd-&gt;pfnStylesDlgProc); <br>    } <br> <br>    if (fDlgResult == IDOK) { <br>        /* <br>         * Now go through and determine if anything was really changed. <br>         */ <br>        if (npcStyles-&gt;flStyle != flStyleNew || <br>                npcStyles-&gt;flExtStyle != flExtStyleNew || <br>                NameOrdCmp(npcStyles-&gt;text ? <br>                npcStyles-&gt;text : szEmpty, szTextNew) != 0) <br>            fChanged = TRUE; <br> <br>        /* <br>         * If this is the dialog, check if some other things were changed. <br>         */ <br>        if (gfDlgSelected) { <br>            if (gcd.di.fResFlags != diNew.fResFlags || <br>                    gcd.di.wLanguage != diNew.wLanguage || <br>                    NameOrdCmp(gcd.di.pszClass ? <br>                    gcd.di.pszClass : szEmpty, diNew.pszClass) != 0 || <br>                    NameOrdCmp(gcd.di.pszMenu ? <br>                    gcd.di.pszMenu : szEmpty, diNew.pszMenu) != 0) <br>                fChanged = TRUE; <br> <br>            if (lstrcmp(gcd.di.szFontName, diNew.szFontName) != 0 || <br>                    (*diNew.szFontName &amp;&amp; <br>                    gcd.di.nPointSize != diNew.nPointSize)) <br>                fChanged = fFontChanged = TRUE; <br>        } <br>    } <br> <br>    /* <br>     * Did something change? <br>     */ <br>    if (fChanged) { <br>        if (gfDlgSelected) { <br>            hwndOld = npcStyles-&gt;hwnd; <br>            CreateControl(npcStyles, pszTextNew, flStyleNew, flExtStyleNew, <br>                    npcStyles-&gt;id, &amp;npcStyles-&gt;rc, (HWND)NULL, &amp;diNew); <br> <br>            /* <br>             * Create all the control windows in the new dialog. <br>             * They must be created (not just moved over by changing <br>             * the parent and owner) because some controls have <br>             * allocated memory on the old dialogs heap, and this <br>             * heap will become invalid after the old dialog <br>             * is destroyed below.  <br>             */ <br>            for (npc = npcHead; npc; npc = npc-&gt;npcNext) { <br>                /* <br>                 * If this is an icon control and the dialog font <br>                 * was just changed, we need to resize the control <br>                 * based on the new default icon size. <br>                 */ <br>                if (npc-&gt;pwcd-&gt;iType == W_ICON &amp;&amp; fFontChanged) { <br>                    npc-&gt;rc.right = npc-&gt;rc.left + awcd[W_ICON].cxDefault; <br>                    npc-&gt;rc.bottom = npc-&gt;rc.top + awcd[W_ICON].cyDefault; <br>                } <br> <br>                CreateControl(npc, npc-&gt;text, npc-&gt;flStyle, npc-&gt;flExtStyle, <br>                        npc-&gt;id, &amp;npc-&gt;rc, (HWND)NULL, NULL); <br>            } <br> <br>            /* <br>             * Now move all the drag windows over to the new dialog. <br>             * This must be done after creating all the controls <br>             * because of the touchy Z-order that the drag windows <br>             * and the controls must have for painting and selection <br>             * of the drag windows to work properly.  Note that we <br>             * rely on SetParent to add the window at <br>             * the TOP in Z-order. <br>             */ <br>            for (npc = npcHead; npc; npc = npc-&gt;npcNext) { <br>                SetParent(npc-&gt;hwndDrag, npcStyles-&gt;hwnd); <br> <br>                /* <br>                 * Adjust the position of the drag window. <br>                 */ <br>                SizeDragToControl(npc); <br>            } <br> <br>            ShowWindow(npcStyles-&gt;hwnd, SW_SHOWNA); <br>            ToolboxOnTop(); <br>            DestroyWindow(hwndOld); <br>        } <br>        else { <br>            hwndOld = npcStyles-&gt;hwnd; <br> <br>            if (CreateControl(npcStyles, pszTextNew, flStyleNew, flExtStyleNew, <br>                    npcStyles-&gt;id, &amp;npcStyles-&gt;rc, hwndOld, NULL)) { <br>                /* <br>                 * Get rid of the old control window. <br>                 */ <br>                DestroyWindow(hwndOld); <br> <br>                /* <br>                 * Adjust the size and position of its drag window. <br>                 */ <br>                SizeDragToControl(npcStyles); <br>            } <br>        } <br> <br>        gfResChged = gfDlgChanged = TRUE; <br>        ShowFileStatus(FALSE); <br>        StatusUpdate(); <br>        StatusSetEnable(); <br>    } <br>} <br> <br> <br> <br>/************************************************************************ <br>* GenericStylesDlgProc <br>* <br>* Dialog procedure for styles. <br>* <br>************************************************************************/ <br> <br>DIALOGPROC GenericStylesDlgProc( <br>    HWND hwnd, <br>    UINT msg, <br>    WPARAM wParam, <br>    LPARAM lParam) <br>{ <br>    switch (msg) { <br>        case WM_INITDIALOG: <br>            CheckStyleBoxes(hwnd, npcStyles-&gt;pwcd-&gt;iClass, <br>                    npcStyles-&gt;flStyle); <br>            CheckStyleBoxes(hwnd, IC_WINDOW, npcStyles-&gt;flStyle); <br> <br>            CenterWindow(hwnd); <br> <br>            return TRUE; <br> <br>        case WM_COMMAND: <br>            switch (LOWORD(wParam)) { <br>                case IDOK: <br>                    QueryCheckedStyles(hwnd, npcStyles-&gt;pwcd-&gt;iClass, <br>                            &amp;flStyleNew); <br>                    QueryCheckedStyles(hwnd, IC_WINDOW, &amp;flStyleNew); <br>                    EndDialog(hwnd, IDOK); <br>                    return TRUE; <br> <br>                case IDCANCEL: <br>                    EndDialog(hwnd, IDCANCEL); <br>                    return TRUE; <br> <br>                case IDHELP: <br>                    StylesHelp(); <br>                    break; <br>            } <br> <br>            return FALSE; <br> <br>        default: <br>            return FALSE; <br>    } <br>} <br> <br> <br> <br>/************************************************************************ <br>* CheckBoxStylesDlgProc <br>* <br>* Dialog procedure for checkboxes. <br>* <br>************************************************************************/ <br> <br>DIALOGPROC CheckBoxStylesDlgProc( <br>    HWND hwnd, <br>    UINT msg, <br>    WPARAM wParam, <br>    LPARAM lParam) <br>{ <br>    DWORD dwType; <br>    BOOL f3State; <br>    BOOL fAuto; <br> <br>    switch (msg) { <br>        case WM_INITDIALOG: <br>            CheckStyleBoxes(hwnd, npcStyles-&gt;pwcd-&gt;iClass, <br>                    npcStyles-&gt;flStyle); <br>            CheckStyleBoxes(hwnd, IC_WINDOW, npcStyles-&gt;flStyle); <br> <br>            dwType = npcStyles-&gt;flStyle &amp; BS_ALL; <br>            if (dwType == BS_AUTOCHECKBOX || dwType == BS_AUTO3STATE) <br>                CheckDlgButton(hwnd, DID_BS_AUTOXXX, 1); <br> <br>            if (dwType == BS_3STATE || dwType == BS_AUTO3STATE) <br>                CheckDlgButton(hwnd, DID_BS_3STATE, 1); <br> <br>            CenterWindow(hwnd); <br> <br>            return TRUE; <br> <br>        case WM_COMMAND: <br>            switch (LOWORD(wParam)) { <br>                case IDOK: <br>                    QueryCheckedStyles(hwnd, npcStyles-&gt;pwcd-&gt;iClass, <br>                            &amp;flStyleNew); <br>                    QueryCheckedStyles(hwnd, IC_WINDOW, &amp;flStyleNew); <br> <br>                    fAuto = IsDlgButtonChecked(hwnd, DID_BS_AUTOXXX); <br>                    f3State = IsDlgButtonChecked(hwnd, DID_BS_3STATE); <br>                    flStyleNew &amp;= ~BS_ALL; <br>                    if (fAuto) { <br>                        if (f3State) <br>                            flStyleNew |= BS_AUTO3STATE; <br>                        else <br>                            flStyleNew |= BS_AUTOCHECKBOX; <br>                    } <br>                    else { <br>                        if (f3State) <br>                            flStyleNew |= BS_3STATE; <br>                        else <br>                            flStyleNew |= BS_CHECKBOX; <br>                    } <br> <br>                    EndDialog(hwnd, IDOK); <br>                    return TRUE; <br> <br>                case IDCANCEL: <br>                    EndDialog(hwnd, IDCANCEL); <br>                    return TRUE; <br> <br>                case IDHELP: <br>                    StylesHelp(); <br>                    break; <br>            } <br> <br>            return FALSE; <br> <br>        default: <br>            return FALSE; <br>    } <br>} <br> <br> <br> <br>/************************************************************************ <br>* RadioButtonStylesDlgProc <br>* <br>* Dialog box procedure for radio buttons. <br>* <br>************************************************************************/ <br> <br>DIALOGPROC RadioButtonStylesDlgProc( <br>    HWND hwnd, <br>    UINT msg, <br>    WPARAM wParam, <br>    LPARAM lParam) <br>{ <br>    switch (msg) { <br>        case WM_INITDIALOG: <br>            CheckStyleBoxes(hwnd, npcStyles-&gt;pwcd-&gt;iClass, <br>                    npcStyles-&gt;flStyle); <br>            CheckStyleBoxes(hwnd, IC_WINDOW, npcStyles-&gt;flStyle); <br> <br>            if ((npcStyles-&gt;flStyle &amp; BS_ALL) == BS_AUTORADIOBUTTON) <br>                CheckDlgButton(hwnd, DID_BS_AUTOXXX, 1); <br> <br>            CenterWindow(hwnd); <br> <br>            return TRUE; <br> <br>        case WM_COMMAND: <br>            switch (LOWORD(wParam)) { <br>                case IDOK: <br>                    QueryCheckedStyles(hwnd, npcStyles-&gt;pwcd-&gt;iClass, <br>                            &amp;flStyleNew); <br>                    QueryCheckedStyles(hwnd, IC_WINDOW, &amp;flStyleNew); <br> <br>                    flStyleNew &amp;= ~BS_ALL; <br>                    if (IsDlgButtonChecked(hwnd, DID_BS_AUTOXXX)) <br>                        flStyleNew |= BS_AUTORADIOBUTTON; <br>                    else <br>                        flStyleNew |= BS_RADIOBUTTON; <br> <br>                    EndDialog(hwnd, IDOK); <br>                    return TRUE; <br> <br>                case IDCANCEL: <br>                    EndDialog(hwnd, IDCANCEL); <br>                    return TRUE; <br> <br>                case IDHELP: <br>                    StylesHelp(); <br>                    break; <br>            } <br> <br>            return FALSE; <br> <br>        default: <br>            return FALSE; <br>    } <br>} <br> <br> <br> <br>/************************************************************************ <br>* PushButtonStylesDlgProc <br>* <br>* We do not normally allow more than one default push button in a <br>* dialog. but if this button is already a default button, we must <br>* allow them to change it to a normal one, even if there is already <br>* another default button in the dialog.  Note that this condition <br>* would normally never happen, unless they read in a res file with <br>* this condition already. <br>* <br>************************************************************************/ <br> <br>DIALOGPROC PushButtonStylesDlgProc( <br>    HWND hwnd, <br>    UINT msg, <br>    WPARAM wParam, <br>    LPARAM lParam) <br>{ <br>    NPCTYPE npc; <br> <br>    switch (msg) { <br>        case WM_INITDIALOG: <br>            CheckStyleBoxes(hwnd, npcStyles-&gt;pwcd-&gt;iClass, <br>                    npcStyles-&gt;flStyle); <br>            CheckStyleBoxes(hwnd, IC_WINDOW, npcStyles-&gt;flStyle); <br> <br>            /* <br>             * Only test for possibly disabling the "default" <br>             * checkbox if the current control does not have the <br>             * "default" style.  If it does, we must always allow <br>             * them to turn it off. <br>             */ <br>            if ((npcStyles-&gt;flStyle &amp; BS_ALL) != BS_DEFPUSHBUTTON) { <br>                /* <br>                 * Loop through all the controls.  If any pushbutton <br>                 * is found with the "default" style, we disable the <br>                 * "Default" checkbox in the styles dialog. <br>                 */ <br>                for (npc = npcHead; npc; npc = npc-&gt;npcNext) <br>                    if ((npc-&gt;pwcd-&gt;iType == W_PUSHBUTTON) &amp;&amp; <br>                            (npc-&gt;flStyle &amp; BS_ALL) == BS_DEFPUSHBUTTON) { <br>                        EnableWindow(GetDlgItem(hwnd, DID_BS_DEFPUSHBUTTON), <br>                                FALSE); <br>                        break; <br>                    } <br>            } <br> <br>            CenterWindow(hwnd); <br> <br>            return TRUE; <br> <br>        case WM_COMMAND: <br>            switch (LOWORD(wParam)) { <br>                case IDOK: <br>                    QueryCheckedStyles(hwnd, npcStyles-&gt;pwcd-&gt;iClass, <br>                            &amp;flStyleNew); <br>                    QueryCheckedStyles(hwnd, IC_WINDOW, &amp;flStyleNew); <br> <br>                    EndDialog(hwnd, IDOK); <br>                    return TRUE; <br> <br>                case IDCANCEL: <br>                    EndDialog(hwnd, IDCANCEL); <br>                    return TRUE; <br> <br>                case IDHELP: <br>                    StylesHelp(); <br>                    break; <br>            } <br> <br>            return FALSE; <br> <br>        default: <br>            return FALSE; <br>    } <br>} <br> <br> <br> <br>/************************************************************************ <br>* ComboBoxStylesDlgProc <br>* <br>* Dialog procedure for combo boxes. <br>* <br>************************************************************************/ <br> <br>DIALOGPROC ComboBoxStylesDlgProc( <br>    HWND hwnd, <br>    UINT msg, <br>    WPARAM wParam, <br>    LPARAM lParam) <br>{ <br>    switch (msg) { <br>        case WM_INITDIALOG: <br>            CheckStyleBoxes(hwnd, npcStyles-&gt;pwcd-&gt;iClass, <br>                    npcStyles-&gt;flStyle); <br>            CheckStyleBoxes(hwnd, IC_WINDOW, npcStyles-&gt;flStyle); <br> <br>            EnableComboBoxStyles(hwnd, 0); <br> <br>            CenterWindow(hwnd); <br> <br>            return TRUE; <br> <br>        case WM_COMMAND: <br>            switch (LOWORD(wParam)) { <br>                case DID_CBS_OWNERDRAWFIXED: <br>                case DID_CBS_OWNERDRAWVARIABLE: <br>                    if (HIWORD(wParam) == BN_CLICKED) <br>                        EnableComboBoxStyles(hwnd, <br>                                LOWORD(wParam)); <br> <br>                    return TRUE; <br> <br>                case IDOK: <br>                    QueryCheckedStyles(hwnd, npcStyles-&gt;pwcd-&gt;iClass, <br>                            &amp;flStyleNew); <br>                    QueryCheckedStyles(hwnd, IC_WINDOW, &amp;flStyleNew); <br>                    EndDialog(hwnd, IDOK); <br>                    return TRUE; <br> <br>                case IDCANCEL: <br>                    EndDialog(hwnd, IDCANCEL); <br>                    return TRUE; <br> <br>                case IDHELP: <br>                    StylesHelp(); <br>                    break; <br>            } <br> <br>            return FALSE; <br> <br>        default: <br>            return FALSE; <br>    } <br>} <br> <br> <br> <br>/************************************************************************ <br>* EnableComboBoxStyles <br>* <br>* Checks/unchecks, disables/enables various checkboxes that are <br>* mutually exclusive and/or dependant for the Combo Box Styles dialog. <br>* <br>* Arguments: <br>*   HWND hwnd   - Dialog window handle. <br>*   INT idCtrl  - ID of the control that was clicked on. <br>* <br>************************************************************************/ <br> <br>STATICFN VOID EnableComboBoxStyles( <br>    HWND hwnd, <br>    INT idCtrl) <br>{ <br>    BOOL fFixedChecked; <br>    BOOL fVariableChecked; <br> <br>    fFixedChecked = IsDlgButtonChecked(hwnd, DID_CBS_OWNERDRAWFIXED); <br>    fVariableChecked = IsDlgButtonChecked(hwnd, DID_CBS_OWNERDRAWVARIABLE); <br> <br>    if (fFixedChecked || fVariableChecked) { <br>        EnableWindow(GetDlgItem(hwnd, DID_CBS_HASSTRINGS), TRUE); <br>    } <br>    else { <br>        EnableWindow(GetDlgItem(hwnd, DID_CBS_HASSTRINGS), FALSE); <br>        CheckDlgButton(hwnd, DID_CBS_HASSTRINGS, 0); <br>    } <br> <br>    switch (idCtrl) { <br>        case DID_CBS_OWNERDRAWFIXED: <br>            if (fFixedChecked) <br>                CheckDlgButton(hwnd, DID_CBS_OWNERDRAWVARIABLE, 0); <br> <br>            break; <br> <br>        case DID_CBS_OWNERDRAWVARIABLE: <br>            if (fVariableChecked) <br>                CheckDlgButton(hwnd, DID_CBS_OWNERDRAWFIXED, 0); <br> <br>            break; <br>    } <br>} <br> <br> <br> <br>/************************************************************************ <br>* EditStylesDlgProc <br>* <br>* Dialog procedure for edit boxes. <br>* <br>************************************************************************/ <br> <br>DIALOGPROC EditStylesDlgProc( <br>    HWND hwnd, <br>    UINT msg, <br>    WPARAM wParam, <br>    LPARAM lParam) <br>{ <br>    switch (msg) { <br>        case WM_INITDIALOG: <br>            CheckStyleBoxes(hwnd, npcStyles-&gt;pwcd-&gt;iClass, <br>                    npcStyles-&gt;flStyle); <br>            CheckStyleBoxes(hwnd, IC_WINDOW, npcStyles-&gt;flStyle); <br> <br>            EnableEditStyles(hwnd, 0); <br> <br>            CenterWindow(hwnd); <br> <br>            return TRUE; <br> <br>        case WM_COMMAND: <br>            switch (LOWORD(wParam)) { <br>                case DID_ES_UPPERCASE: <br>                case DID_ES_LOWERCASE: <br>                case DID_ES_MULTILINE: <br>                    if (HIWORD(wParam) == BN_CLICKED) <br>                        EnableEditStyles(hwnd, <br>                                LOWORD(wParam)); <br> <br>                    return TRUE; <br> <br>                case IDOK: <br>                    QueryCheckedStyles(hwnd, npcStyles-&gt;pwcd-&gt;iClass, <br>                            &amp;flStyleNew); <br>                    QueryCheckedStyles(hwnd, IC_WINDOW, &amp;flStyleNew); <br>                    EndDialog(hwnd, IDOK); <br>                    return TRUE; <br> <br>                case IDCANCEL: <br>                    EndDialog(hwnd, IDCANCEL); <br>                    return TRUE; <br> <br>                case IDHELP: <br>                    StylesHelp(); <br>                    break; <br>            } <br> <br>            return FALSE; <br> <br>        default: <br>            return FALSE; <br>    } <br>} <br> <br> <br> <br>/************************************************************************ <br>* EnableEditStyles <br>* <br>* Checks/unchecks, disables/enables various checkboxes that are <br>* mutually exclusive and/or dependant for the Edit Field Styles dialog. <br>* <br>* Arguments: <br>*   HWND hwnd  - Dialog window handle. <br>*   INT idCtrl - ID of the control that was clicked on. <br>* <br>************************************************************************/ <br> <br>STATICFN VOID EnableEditStyles( <br>    HWND hwnd, <br>    INT idCtrl) <br>{ <br>    if (IsDlgButtonChecked(hwnd, DID_ES_MULTILINE)) { <br>        EnableWindow(GetDlgItem(hwnd, DID_ES_CENTER), TRUE); <br>        EnableWindow(GetDlgItem(hwnd, DID_ES_RIGHT), TRUE); <br>        EnableWindow(GetDlgItem(hwnd, DID_WS_VSCROLL), TRUE); <br>        EnableWindow(GetDlgItem(hwnd, DID_ES_AUTOVSCROLL), TRUE); <br>        EnableWindow(GetDlgItem(hwnd, DID_WS_HSCROLL), TRUE); <br>    } <br>    else { <br>        EnableWindow(GetDlgItem(hwnd, DID_ES_CENTER), FALSE); <br>        EnableWindow(GetDlgItem(hwnd, DID_ES_RIGHT), FALSE); <br>        EnableWindow(GetDlgItem(hwnd, DID_WS_VSCROLL), FALSE); <br>        EnableWindow(GetDlgItem(hwnd, DID_ES_AUTOVSCROLL), FALSE); <br>        EnableWindow(GetDlgItem(hwnd, DID_WS_HSCROLL), FALSE); <br> <br>        CheckDlgButton(hwnd, DID_ES_LEFT, 1); <br>        CheckDlgButton(hwnd, DID_ES_CENTER, 0); <br>        CheckDlgButton(hwnd, DID_ES_RIGHT, 0); <br>        CheckDlgButton(hwnd, DID_WS_VSCROLL, 0); <br>        CheckDlgButton(hwnd, DID_ES_AUTOVSCROLL, 0); <br>        CheckDlgButton(hwnd, DID_WS_HSCROLL, 0); <br>    } <br> <br>    if (idCtrl == DID_ES_UPPERCASE) { <br>        if (IsDlgButtonChecked(hwnd, DID_ES_UPPERCASE)) <br>            CheckDlgButton(hwnd, DID_ES_LOWERCASE, 0); <br>    } <br>    else if (idCtrl == DID_ES_LOWERCASE) { <br>        if (IsDlgButtonChecked(hwnd, DID_ES_LOWERCASE)) <br>            CheckDlgButton(hwnd, DID_ES_UPPERCASE, 0); <br>    } <br>} <br> <br> <br> <br>/************************************************************************ <br>* ListBoxStylesDlgProc <br>* <br>* Dialog procedure for list boxes. <br>* <br>************************************************************************/ <br> <br>DIALOGPROC ListBoxStylesDlgProc( <br>    HWND hwnd, <br>    UINT msg, <br>    WPARAM wParam, <br>    LPARAM lParam) <br>{ <br>    switch (msg) { <br>        case WM_INITDIALOG: <br>            CheckStyleBoxes(hwnd, npcStyles-&gt;pwcd-&gt;iClass, <br>                    npcStyles-&gt;flStyle); <br>            CheckStyleBoxes(hwnd, IC_WINDOW, npcStyles-&gt;flStyle); <br> <br>            EnableListBoxStyles(hwnd, 0); <br> <br>            CenterWindow(hwnd); <br> <br>            return TRUE; <br> <br>        case WM_COMMAND: <br>            switch (LOWORD(wParam)) { <br>                case DID_LBS_STANDARD: <br>                case DID_LBS_NOTIFY: <br>                case DID_LBS_SORT: <br>                case DID_WS_VSCROLL: <br>                case DID_WS_BORDER: <br>                case DID_LBS_MULTIPLESEL: <br>                case DID_LBS_EXTENDEDSEL: <br>                case DID_LBS_OWNERDRAWFIXED: <br>                case DID_LBS_OWNERDRAWVARIABLE: <br>                case DID_LBS_NODATA: <br>                case DID_LBS_HASSTRINGS: <br>                    if (HIWORD(wParam) == BN_CLICKED) <br>                        EnableListBoxStyles(hwnd, <br>                                LOWORD(wParam)); <br> <br>                    return TRUE; <br> <br>                case IDOK: <br>                    QueryCheckedStyles(hwnd, npcStyles-&gt;pwcd-&gt;iClass, <br>                            &amp;flStyleNew); <br>                    QueryCheckedStyles(hwnd, IC_WINDOW, &amp;flStyleNew); <br>                    EndDialog(hwnd, IDOK); <br>                    return TRUE; <br> <br>                case IDCANCEL: <br>                    EndDialog(hwnd, IDCANCEL); <br>                    return TRUE; <br> <br>                case IDHELP: <br>                    StylesHelp(); <br>                    break; <br>            } <br> <br>            return FALSE; <br> <br>        default: <br>            return FALSE; <br>    } <br>} <br> <br> <br> <br>/************************************************************************ <br>* EnableListBoxStyles <br>* <br>* Checks/unchecks, disables/enables various checkboxes that are <br>* mutually exclusive and/or dependant for the List Box Styles dialog. <br>* <br>* Arguments: <br>*   HWND hwnd  - Dialog window handle. <br>*   INT idCtrl - ID of the control that was clicked on. <br>* <br>************************************************************************/ <br> <br>STATICFN VOID EnableListBoxStyles( <br>    HWND hwnd, <br>    INT idCtrl) <br>{ <br>    WORD fCheckState; <br>    BOOL fFixedChecked; <br>    BOOL fVariableChecked; <br> <br>    fFixedChecked = IsDlgButtonChecked(hwnd, DID_LBS_OWNERDRAWFIXED); <br>    fVariableChecked = IsDlgButtonChecked(hwnd, DID_LBS_OWNERDRAWVARIABLE); <br> <br>    if (fFixedChecked || fVariableChecked) { <br>        EnableWindow(GetDlgItem(hwnd, DID_LBS_HASSTRINGS), TRUE); <br>    } <br>    else { <br>        EnableWindow(GetDlgItem(hwnd, DID_LBS_HASSTRINGS), FALSE); <br>        CheckDlgButton(hwnd, DID_LBS_HASSTRINGS, 0); <br>    } <br> <br>    EnableWindow(GetDlgItem(hwnd, DID_LBS_NODATA), fFixedChecked); <br> <br>    switch (idCtrl) { <br>        case DID_LBS_STANDARD: <br>            fCheckState = (WORD)(IsDlgButtonChecked(hwnd, DID_LBS_STANDARD) <br>                    ? 1 : 0); <br>            CheckDlgButton(hwnd, DID_LBS_NOTIFY, fCheckState); <br>            CheckDlgButton(hwnd, DID_LBS_SORT, fCheckState); <br>            CheckDlgButton(hwnd, DID_WS_VSCROLL, fCheckState); <br>            CheckDlgButton(hwnd, DID_WS_BORDER, fCheckState); <br> <br>            if (fCheckState) <br>                CheckDlgButton(hwnd, DID_LBS_NODATA, 0); <br> <br>            break; <br> <br>        case DID_LBS_OWNERDRAWFIXED: <br>            if (fFixedChecked) <br>                CheckDlgButton(hwnd, DID_LBS_OWNERDRAWVARIABLE, 0); <br>            else <br>                CheckDlgButton(hwnd, DID_LBS_NODATA, 0); <br> <br>            break; <br> <br>        case DID_LBS_OWNERDRAWVARIABLE: <br>            if (fVariableChecked) { <br>                CheckDlgButton(hwnd, DID_LBS_OWNERDRAWFIXED, 0); <br>                CheckDlgButton(hwnd, DID_LBS_NODATA, 0); <br>                EnableWindow(GetDlgItem(hwnd, DID_LBS_NODATA), FALSE); <br>            } <br> <br>            break; <br> <br>        case DID_LBS_MULTIPLESEL: <br>            if (IsDlgButtonChecked(hwnd, DID_LBS_MULTIPLESEL)) <br>                CheckDlgButton(hwnd, DID_LBS_EXTENDEDSEL, 0); <br> <br>            break; <br> <br>        case DID_LBS_EXTENDEDSEL: <br>            if (IsDlgButtonChecked(hwnd, DID_LBS_EXTENDEDSEL)) <br>                CheckDlgButton(hwnd, DID_LBS_MULTIPLESEL, 0); <br> <br>            break; <br> <br>        case DID_LBS_NODATA: <br>            if (IsDlgButtonChecked(hwnd, DID_LBS_NODATA)) { <br>                CheckDlgButton(hwnd, DID_LBS_SORT, 0); <br>                CheckDlgButton(hwnd, DID_LBS_HASSTRINGS, 0); <br>                CheckDlgButton(hwnd, DID_LBS_STANDARD, 0); <br>            } <br> <br>            break; <br> <br>        case DID_LBS_HASSTRINGS: <br>            if (IsDlgButtonChecked(hwnd, DID_LBS_HASSTRINGS)) <br>                CheckDlgButton(hwnd, DID_LBS_NODATA, 0); <br> <br>            break; <br> <br>        default: <br>            if (!IsDlgButtonChecked(hwnd, DID_LBS_NOTIFY) || <br>                    !IsDlgButtonChecked(hwnd, DID_LBS_SORT) || <br>                    !IsDlgButtonChecked(hwnd, DID_WS_VSCROLL) || <br>                    !IsDlgButtonChecked(hwnd, DID_WS_BORDER)) <br>                fCheckState = 0; <br>            else <br>                fCheckState = 1; <br> <br>            CheckDlgButton(hwnd, DID_LBS_STANDARD, fCheckState); <br> <br>            if (IsDlgButtonChecked(hwnd, DID_LBS_SORT) || </code></pre>
<p>
</p>
<pre><code>IsDlgButtonChecked(hwnd, DID_LBS_HASSTRINGS)) <br>                CheckDlgButton(hwnd, DID_LBS_NODATA, 0); <br> <br>            break; <br>    } <br>} <br> <br> <br> <br>/************************************************************************ <br>* CustomStylesDlgProc <br>* <br>* Dialog procedure for custom controls. <br>* <br>************************************************************************/ <br> <br>DIALOGPROC CustomStylesDlgProc( <br>    HWND hwnd, <br>    UINT msg, <br>    WPARAM wParam, <br>    LPARAM lParam) <br>{ <br>    switch (msg) { <br>        case WM_INITDIALOG: <br>            SetDlgItemText(hwnd, DID_CUSTOMSTYLESCLASS, <br>                    npcStyles-&gt;pwcd-&gt;pszClass); <br>            SendDlgItemMessage(hwnd, DID_CUSTOMSTYLESSTYLES, EM_LIMITTEXT, <br>                    CCHHEXLONGMAX, 0L); <br>            SetCustomStylesField(hwnd, npcStyles-&gt;flStyle); <br>            CheckStyleBoxes(hwnd, IC_WINDOW, npcStyles-&gt;flStyle); <br> <br>            CenterWindow(hwnd); <br> <br>            return TRUE; <br> <br>        case WM_COMMAND: <br>            switch (LOWORD(wParam)) { <br>                case DID_CUSTOMSTYLESSTYLES: <br>                    if (HIWORD(wParam) == EN_CHANGE) { <br>                        flStyleNew = GetCustomStylesField(hwnd); <br>                        CheckStyleBoxes(hwnd, IC_WINDOW, flStyleNew); <br>                    } <br> <br>                    break; <br> <br>                case DID_WS_VISIBLE: <br>                case DID_WS_DISABLED: <br>                case DID_WS_GROUP: <br>                case DID_WS_TABSTOP: <br>                    if (HIWORD(wParam) == BN_CLICKED) { <br>                        flStyleNew = GetCustomStylesField(hwnd); <br>                        QueryCheckedStyles(hwnd, IC_WINDOW, &amp;flStyleNew); <br>                        SetCustomStylesField(hwnd, flStyleNew); <br>                    } <br> <br>                    break; <br> <br>                case IDOK: <br>                    flStyleNew = GetCustomStylesField(hwnd); <br> <br>                    EndDialog(hwnd, IDOK); <br> <br>                    return TRUE; <br> <br>                case IDCANCEL: <br>                    EndDialog(hwnd, IDCANCEL); <br>                    return TRUE; <br> <br>                case IDHELP: <br>                    StylesHelp(); <br>                    break; <br>            } <br> <br>            return FALSE; <br> <br>        default: <br>            return FALSE; <br>    } <br>} <br> <br> <br> <br>/************************************************************************ <br>* SetCustomStylesField <br>* <br>* Sets the style bits in a custom control. <br>* <br>* Arguments: <br>*   HWND hwnd - handle to the custom control <br>*   DWORD flStyle - style of the custom control <br>* <br>************************************************************************/ <br> <br>STATICFN VOID SetCustomStylesField( <br>    HWND hwnd, <br>    DWORD flStyle) <br>{ <br>    TCHAR szBuf[32]; <br> <br>    wsprintf(szBuf, L"%#.8lx", flStyle); <br>    SetDlgItemText(hwnd, DID_CUSTOMSTYLESSTYLES, szBuf); <br>} <br> <br> <br> <br>/************************************************************************ <br>* GetCustomStylesField <br>* <br>* Gets the style bits of a custom control. <br>*  <br>* Arguments: <br>*   HWND hwnd - handle to the custom control. <br>* <br>* Returns: <br>*  <br>* The style bits specified for the custom control. <br>* <br>************************************************************************/ <br> <br>STATICFN DWORD GetCustomStylesField( <br>    HWND hwnd) <br>{ <br>    TCHAR szBuf[CCHTEXTMAX]; <br> <br>    GetDlgItemText(hwnd, DID_CUSTOMSTYLESSTYLES, szBuf, CCHTEXTMAX); <br> <br>    return valtoi(szBuf); <br>} <br> <br> <br> <br>/************************************************************************ <br>* DialogStylesDlgProc <br>* <br>* Dialog procedure for a dialog box. <br>* <br>************************************************************************/ <br> <br>DIALOGPROC DialogStylesDlgProc( <br>    HWND hwnd, <br>    UINT msg, <br>    WPARAM wParam, <br>    LPARAM lParam) <br>{ <br>    DWORD flResFlagsNew; <br>    INT nPointSize; <br>    INT iLang; <br>    INT iSubLang; <br>    TCHAR szFontName[LF_FACESIZE]; <br>    INT nIndex; <br> <br>    switch (msg) { <br>        case WM_INITDIALOG: <br>            CheckStyleBoxes(hwnd, IC_RESFLAGS, (DWORD)diNew.fResFlags); <br>            CheckStyleBoxes(hwnd, IC_DIALOG, npcStyles-&gt;flStyle); <br>            CheckStyleBoxes(hwnd, IC_WINDOW, npcStyles-&gt;flStyle); <br> <br>            if (IsDlgButtonChecked(hwnd, DID_WS_CAPTION)) { <br>                CheckDlgButton(hwnd, DID_WS_BORDER, 1); <br>                CheckDlgButton(hwnd, DID_WS_DLGFRAME, 1); <br>            } <br> <br>            FillFontNameCombo(hwnd); <br>            FillLanguageCombo(hwnd); <br> <br>            if (IsOrd(diNew.pszClass)) <br>                SetDlgItemInt(hwnd, DID_DLGSTYLECLASS, <br>                        OrdID(diNew.pszClass), FALSE); <br>            else <br>                SetDlgItemText(hwnd, DID_DLGSTYLECLASS, diNew.pszClass); <br> <br>            if (IsOrd(diNew.pszMenu)) <br>                SetDlgItemInt(hwnd, DID_DLGSTYLEMENU, <br>                        OrdID(diNew.pszMenu), FALSE); <br>            else <br>                SetDlgItemText(hwnd, DID_DLGSTYLEMENU, diNew.pszMenu); <br> <br>            EnableDialogStyles(hwnd, 0); <br> <br>            CenterWindow(hwnd); <br> <br>            return TRUE; <br> <br>        case WM_COMMAND: <br>            switch (LOWORD(wParam)) { <br>                case DID_WS_BORDER: <br>                case DID_WS_DLGFRAME: <br>                case DID_WS_CAPTION: <br>                case DID_WS_POPUP: <br>                case DID_WS_CHILD: <br>                    if (HIWORD(wParam) == BN_CLICKED) <br>                        EnableDialogStyles(hwnd, <br>                                LOWORD(wParam)); <br> <br>                    return TRUE; <br> <br>                case DID_DLGSTYLEFONTNAME: <br>                    /* <br>                     * Did the font name combo change? <br>                     */ <br>                    if (HIWORD(wParam) == CBN_EDITCHANGE || <br>                            HIWORD(wParam) == CBN_SELCHANGE) { <br>                        /* <br>                         * Get the font name and begin looking for it. <br>                         */ <br>                        if (HIWORD(wParam) == CBN_EDITCHANGE) { <br>                            /* <br>                             * The edit field was typed into.  Get the <br>                             * new text from there. <br>                             */ <br>                            GetDlgItemText(hwnd, DID_DLGSTYLEFONTNAME, <br>                                    szFontName, LF_FACESIZE); <br>                        } <br>                        else { <br>                            /* <br>                             * A new string was selected from the list <br>                             * box.  Get it from the list box, because <br>                             * at this point the new text is not yet set <br>                             * into the edit control! <br>                             */ <br>                            nIndex = (INT)SendDlgItemMessage(hwnd, <br>                                    DID_DLGSTYLEFONTNAME, CB_GETCURSEL, 0, 0L); <br> <br>                            if (nIndex != CB_ERR) <br>                                SendDlgItemMessage(hwnd, <br>                                        DID_DLGSTYLEFONTNAME, CB_GETLBTEXT, <br>                                        nIndex, (DWORD)szFontName); <br>                            else <br>                                *szFontName = CHAR_NULL; <br>                        } <br> <br>                        FillPointSizeCombo(hwnd, szFontName); <br>                    } <br> <br>                    return TRUE; <br> <br>                case DID_DLGSTYLELANG: <br>                    /* <br>                     * Did the language combo change? <br>                     */ <br>                    if (HIWORD(wParam) == CBN_SELCHANGE) { <br>                        nIndex = (INT)SendDlgItemMessage(hwnd, <br>                                DID_DLGSTYLELANG, CB_GETCURSEL, 0, 0L); <br>                        iLang = (INT)SendDlgItemMessage(hwnd, <br>                                DID_DLGSTYLELANG, CB_GETITEMDATA, nIndex, 0); <br>                        FillSubLanguageCombo(hwnd, iLang); <br>                    } <br> <br>                    return TRUE; <br> <br>                case IDOK: <br>                    /* <br>                     * If they have entered a font name and an empty <br>                     * or zero point size, display an error. <br>                     */ <br>                    nPointSize = GetDlgItemInt( <br>                            hwnd, DID_DLGSTYLEPOINTSIZE, NULL, FALSE); <br>                    if (!nPointSize &amp;&amp; <br>                            SendDlgItemMessage(hwnd, <br>                            DID_DLGSTYLEFONTNAME, WM_GETTEXTLENGTH, 0, 0L)) { <br>                        Message(MSG_ZEROPOINTSIZE); <br>                        SetFocus(GetDlgItem(hwnd, DID_DLGSTYLEPOINTSIZE)); <br>                        return TRUE; <br>                    } <br> <br>                    GetDlgItemText(hwnd, DID_DLGSTYLEFONTNAME, <br>                            diNew.szFontName, LF_FACESIZE); <br>                    diNew.nPointSize = nPointSize; <br> <br>                    /* <br>                     * Get the Language. <br>                     */ <br>                    nIndex = (INT)SendDlgItemMessage(hwnd, <br>                            DID_DLGSTYLELANG, CB_GETCURSEL, 0, 0L); <br>                    iLang = (INT)SendDlgItemMessage(hwnd, <br>                            DID_DLGSTYLELANG, CB_GETITEMDATA, <br>                            nIndex, 0); <br>                    nIndex = (INT)SendDlgItemMessage(hwnd, <br>                            DID_DLGSTYLESUBLANG, CB_GETCURSEL, 0, 0L); <br>                    iSubLang = (INT)SendDlgItemMessage(hwnd, <br>                            DID_DLGSTYLESUBLANG, CB_GETITEMDATA, <br>                            nIndex, 0); <br>                    diNew.wLanguage = MAKELANGID(gaLangTable[iLang].wPrimary, <br>                            gaLangTable[iLang].asl[iSubLang].wSubLang); <br> <br>                    /* <br>                     * Get the resource flags.  We need to use a temporary <br>                     * long variable because QueryCheckedStyles requires <br>                     * a long. <br>                     */ <br>                    flResFlagsNew = diNew.fResFlags; <br>                    QueryCheckedStyles(hwnd, IC_RESFLAGS, &amp;flResFlagsNew); <br>                    diNew.fResFlags = (WORD)flResFlagsNew; <br> <br>                    QueryCheckedStyles(hwnd, IC_DIALOG, &amp;flStyleNew); <br>                    QueryCheckedStyles(hwnd, IC_WINDOW, &amp;flStyleNew); <br> <br>                    /* <br>                     * Set the DS_SETFONT style, if they specified <br>                     * a font. <br>                     */ <br>                    if (*diNew.szFontName) <br>                        flStyleNew |= DS_SETFONT; <br>                    else <br>                        flStyleNew &amp;= ~DS_SETFONT; <br> <br>                    GetDlgItemText(hwnd, DID_DLGSTYLECLASS, <br>                            diNew.pszClass, CCHTEXTMAX); <br> <br>                    /* <br>                     * Convert the class to an ordinal, if necessary. <br>                     */ <br>                    StrToNameOrd(diNew.pszClass, FALSE); <br> <br>                    GetDlgItemText(hwnd, DID_DLGSTYLEMENU, <br>                            diNew.pszMenu, CCHTEXTMAX); <br> <br>                    /* <br>                     * Convert the menu name to an ordinal, if necessary. <br>                     */ <br>                    StrToNameOrd(diNew.pszMenu, FALSE); <br> <br>                    /* <br>                     * If they just removed the caption style, <br>                     * clear the dialog's caption text at the <br>                     * same time. <br>                     */ <br>                    if ((npcStyles-&gt;flStyle &amp; WS_CAPTION) == WS_CAPTION &amp;&amp; <br>                            (flStyleNew &amp; WS_CAPTION) != WS_CAPTION) <br>                        *pszTextNew = CHAR_NULL; <br> <br>                    EndDialog(hwnd, IDOK); <br>                    return TRUE; <br> <br>                case IDCANCEL: <br>                    EndDialog(hwnd, IDCANCEL); <br>                    return TRUE; <br> <br>                case IDHELP: <br>                    StylesHelp(); <br>                    break; <br>            } <br> <br>            return FALSE; <br> <br>        default: <br>            return FALSE; <br>    } <br>} <br> <br> <br> <br>/************************************************************************ <br>* EnableDialogStyles <br>* <br>* Checks and unchecks various checkboxes that are mutually exclusive <br>* for the Dialog Styles dialog. <br>* <br>* Arguments: <br>*   HWND hwnd  - Dialog window handle. <br>*   INT idCtrl - ID of the control that was clicked on. <br>* <br>************************************************************************/ <br> <br>STATICFN VOID EnableDialogStyles( <br>    HWND hwnd, <br>    INT idCtrl) <br>{ <br>    switch (idCtrl) { <br>        case DID_WS_CAPTION: <br>            if (IsDlgButtonChecked(hwnd, DID_WS_CAPTION)) { <br>                CheckDlgButton(hwnd, DID_WS_BORDER, 1); <br>                CheckDlgButton(hwnd, DID_WS_DLGFRAME, 1); <br>            } <br>            else { <br>                CheckDlgButton(hwnd, DID_WS_BORDER, 0); <br>                CheckDlgButton(hwnd, DID_WS_DLGFRAME, 0); <br>            } <br> <br>            break; <br> <br>        case DID_WS_BORDER: <br>        case DID_WS_DLGFRAME: <br>            if (IsDlgButtonChecked(hwnd, DID_WS_BORDER) &amp;&amp; <br>                    IsDlgButtonChecked(hwnd, DID_WS_DLGFRAME)) <br>                CheckDlgButton(hwnd, DID_WS_CAPTION, 1); <br>            else <br>                CheckDlgButton(hwnd, DID_WS_CAPTION, 0); <br> <br>            break; <br> <br>        case DID_WS_CHILD: <br>            if (IsDlgButtonChecked(hwnd, DID_WS_CHILD)) <br>                CheckDlgButton(hwnd, DID_WS_POPUP, 0); <br> <br>            break; <br> <br>        case DID_WS_POPUP: <br>            if (IsDlgButtonChecked(hwnd, DID_WS_POPUP)) <br>                CheckDlgButton(hwnd, DID_WS_CHILD, 0); <br> <br>            break; <br>    } <br>} <br> <br> <br> <br>/************************************************************************ <br>* FillFontNameCombo <br>* <br>* Fills combo box with available fonts for dialog. <br>* <br>* Arguments: <br>*   HWND hwndDlg - Dialog window handle. <br>* <br>************************************************************************/ <br> <br>STATICFN VOID FillFontNameCombo( <br>    HWND hwndDlg) <br>{ <br>    HDC hDC; <br>    HWND hwndCombo; <br>    TCHAR szName1[LF_FACESIZE]; <br>    TCHAR szName2[LF_FACESIZE]; <br>    LPTSTR pszName; <br>    LPTSTR pszNameLast; <br>    LPTSTR pszNameTemp; <br>    INT iIndex; <br>    INT iItems; <br> <br>    hwndCombo = GetDlgItem(hwndDlg, DID_DLGSTYLEFONTNAME); <br> <br>    if (hDC = GetDC(ghwndMain)) { <br>        EnumFonts(hDC, NULL, (FONTENUMPROC) FontNameEnumFunc, (LPARAM)&amp;hwndCombo); <br>        ReleaseDC(ghwndMain, hDC); <br>    } <br> <br>    /* <br>     * Strip out any duplicate names in the combobox.  This routine <br>     * relies on the items being sorted first. <br>     */ <br>    iItems = (INT)SendMessage(hwndCombo, CB_GETCOUNT, 0, 0); <br>    *szName1 = CHAR_NULL; <br>    *szName2 = CHAR_NULL; <br>    pszName = szName1; <br>    pszNameLast = szName2; <br>    for (iIndex = 0; iIndex &lt; iItems;) { <br>        /* <br>         * Get the text of the next item. <br>         */ <br>        SendMessage(hwndCombo, CB_GETLBTEXT, iIndex, (DWORD)pszName); <br> <br>        /* <br>         * If it matches the previous item, delete it.  Otherwise, <br>         * flip the buffers to save the current items text and <br>         * go on to the next item. <br>         */ <br>        if (lstrcmp(pszName, pszNameLast) == 0) { <br>            SendMessage(hwndCombo, CB_DELETESTRING, iIndex, 0); <br>            iItems--; <br>        } <br>        else { <br>            pszNameTemp = pszNameLast; <br>            pszNameLast = pszName; <br>            pszName = pszNameTemp; <br>            iIndex++; <br>        } <br>    } <br> <br>    /* <br>     * Initialize the font fields.  The order the fields are set <br>     * is important, because setting the face name clears out the <br>     * point size combo. <br>     */ <br>    SetDlgItemText(hwndDlg, DID_DLGSTYLEFONTNAME, diNew.szFontName); <br>    FillPointSizeCombo(hwndDlg, diNew.szFontName); <br>} <br> <br> <br> <br>/************************************************************************ <br>* FontNameEnumFunc <br>* <br>* Enumeration function that adds all the font face names to the <br>* Font Face Name combo box in the Dialog Styles dialog. <br>* <br>* Arguments: <br>*   LPLOGFONT lpLogFont - pointer to font structure <br>*   LPTEXTMETRIC lpTextMetric - pointer to textmetric struct for font <br>*   INT nFontType - type of font <br>*   LPVOID lpData - font data <br>* <br>************************************************************************/ <br> <br>BOOL APIENTRY FontNameEnumFunc( <br>    LPLOGFONT lpLogFont, <br>    LPTEXTMETRIC lpTextMetric, <br>    INT nFontType, <br>    LPVOID lpData) <br>{ <br>    /* <br>     * Add this name to the combo box. <br>     */ <br>    SendMessage(*((LPHWND)lpData), CB_ADDSTRING, 0, <br>            (DWORD)lpLogFont-&gt;lfFaceName); <br> <br>    /* <br>     * Keep on going... <br>     */ <br>    return TRUE; <br>} <br> <br> <br> <br>/************************************************************************ <br>* FillPointSizeCombo <br>* <br>* This function fills the Point Size combobox with the point sizes <br>* that are available for the given face name.  It should be called <br>* whenever the Font Name combobox is changed to keep them in sync. <br>* <br>* Arguments: <br>*   HWND hwndDlg        - Dialog window handle. <br>*   LPTSTR pszFaceName  - Face name for the selected font. <br>* <br>************************************************************************/ <br> <br>STATICFN VOID FillPointSizeCombo( <br>    HWND hwndDlg, <br>    LPTSTR pszFaceName) <br>{ <br>    HDC hDC; <br>    HWND hwndCombo; <br> <br>    hwndCombo = GetDlgItem(hwndDlg, DID_DLGSTYLEPOINTSIZE); <br>    SendMessage(hwndCombo, CB_RESETCONTENT, 0, 0L); <br> <br>    if (*pszFaceName &amp;&amp; (hDC = GetDC(ghwndMain))) { <br>        EnumFonts(hDC, pszFaceName, (FONTENUMPROC) PointSizeEnumFunc, (LPARAM)&amp;hwndCombo); <br>        ReleaseDC(ghwndMain, hDC); <br>    } <br> <br>    /* <br>     * Select a default one.  This is the point size that is currently <br>     * selected if the face name is the current one, or else it is the <br>     * first point size in the list. <br>     */ <br>    if (gcd.fFontSpecified &amp;&amp; lstrcmp(pszFaceName, gcd.di.szFontName) == 0) <br>        SetDlgItemInt(hwndDlg, DID_DLGSTYLEPOINTSIZE, gcd.di.nPointSize, FALSE); <br>    else <br>        SendDlgItemMessage(hwndDlg, DID_DLGSTYLEPOINTSIZE, <br>                CB_SETCURSEL, 0, 0L); <br>} <br> <br> <br> <br>/************************************************************************ <br>* PointSizeEnumFunc <br>* <br>* Enumeration function that adds all the point sizes to the <br>* Pt. Size combo box in the Dialog Styles dialog. <br>* <br>* Arguments: <br>*   LPLOGFONT lpLogFont - pointer to font structure <br>*   LPTEXTMETRIC lpTextMetric - pointer to textmetric struct for font <br>*   INT nFontType - type of font <br>*   LPVOID lpData - font data <br>* <br>************************************************************************/ <br> <br>BOOL APIENTRY PointSizeEnumFunc( <br>    LPLOGFONT lpLogFont, <br>    LPTEXTMETRIC lpTextMetric, <br>    INT nFontType, <br>    LPVOID lpData) <br>{ <br>    HWND hwndCombo; <br>    INT nPointSize; <br> <br>    hwndCombo = *((LPHWND)lpData); <br> <br>    if (nFontType == RASTER_FONTTYPE) { <br>        /* <br>         * Convert the pixels to point size.  Note that because of the <br>         * definition of the tmHeight field, the tmInternalLeading has <br>         * to be subtracted from it before converting to get the proper <br>         * font point size.  This is done automatically by the Windows <br>         * CreateFont call if you pass in a nHeight parameter that is <br>         * negative, so be aware of this when doing the reverse calculation <br>         * to create a font of the proper height! <br>         */ <br>        nPointSize = PixelsToPointSize( <br>                lpTextMetric-&gt;tmHeight - lpTextMetric-&gt;tmInternalLeading); <br> <br>        AddToPointSizeCombo(hwndCombo, nPointSize); <br>    } <br>    else { <br>        /* <br>         * For scalable (TrueType, ATM or vector) fonts, add the <br>         * common point sizes.  This list was pulled out of the <br>         ( commdlg.dll Font dialog. <br>         */ <br>        AddToPointSizeCombo(hwndCombo, 8); <br>        AddToPointSizeCombo(hwndCombo, 9); <br>        AddToPointSizeCombo(hwndCombo, 10); <br>        AddToPointSizeCombo(hwndCombo, 11); <br>        AddToPointSizeCombo(hwndCombo, 12); <br>        AddToPointSizeCombo(hwndCombo, 14); <br>        AddToPointSizeCombo(hwndCombo, 16); <br>        AddToPointSizeCombo(hwndCombo, 18); <br>        AddToPointSizeCombo(hwndCombo, 20); <br>        AddToPointSizeCombo(hwndCombo, 22); <br>        AddToPointSizeCombo(hwndCombo, 24); <br>        AddToPointSizeCombo(hwndCombo, 26); <br>        AddToPointSizeCombo(hwndCombo, 28); <br>        AddToPointSizeCombo(hwndCombo, 36); <br>        AddToPointSizeCombo(hwndCombo, 48); <br>        AddToPointSizeCombo(hwndCombo, 72); <br>    } <br> <br>    /* <br>     * Keep on going... <br>     */ <br>    return TRUE; <br>} <br> <br> <br> <br>/************************************************************************ <br>* AddToPointSizeCombo <br>* <br>* This function adds a point size to the point size combobox. <br>* It does not allow duplicate point sizes, and the sizes will <br>* be inserted in order. <br>* <br>* Arguments: <br>*   HWND hwndCombo - The combobox window handle. <br>*   INT nPointSize - The point size to add. <br>* <br>************************************************************************/ <br> <br>STATICFN VOID AddToPointSizeCombo( <br>    HWND hwndCombo, <br>    INT nPointSize) <br>{ <br>    TCHAR szPointSize[31]; <br>    INT nPoints2; <br>    INT iIndex; <br>    INT iIndexAdd; <br>    INT iItems; <br> <br>    iItems = (INT)SendMessage(hwndCombo, CB_GETCOUNT, 0, 0); <br>    for (iIndex = 0, iIndexAdd = -1; iIndex &lt; iItems; iIndex++) { <br>        nPoints2 = (INT)SendMessage(hwndCombo, CB_GETITEMDATA, iIndex, 0); <br> <br>        if (nPoints2 == nPointSize) { <br>            /* <br>             * A duplicate was found.  Skip this one. <br>             */ <br>            return; <br>        } <br>        else if (nPoints2 &gt; nPointSize) { <br>            iIndexAdd = iIndex; <br>            break; <br>        } <br>    } <br> <br>    /* <br>     * Add this point size to the combo box. <br>     */ <br>    itoaw(nPointSize, szPointSize, 10); <br>    iIndex = (INT)SendMessage(hwndCombo, CB_INSERTSTRING, <br>            iIndexAdd, (DWORD)szPointSize); <br>    SendMessage(hwndCombo, CB_SETITEMDATA, iIndex, (DWORD)nPointSize); <br>} <br> <br> <br> <br>/************************************************************************ <br>* FillLanguageCombo <br>* <br>* This function fills the Language combobox with the known languages. <br>* <br>* Arguments: <br>*   HWND hwndDlg - Dialog window handle. <br>* <br>************************************************************************/ <br> <br>STATICFN VOID FillLanguageCombo( <br>    HWND hwndDlg) <br>{ <br>    HWND hwndCombo; <br>    INT i; <br>    INT iIndex; <br>    INT iSel; <br>    INT iLang; <br>    WORD wPrimary; <br> <br>    hwndCombo = GetDlgItem(hwndDlg, DID_DLGSTYLELANG); <br>    SendMessage(hwndCombo, CB_RESETCONTENT, 0, 0L); <br> <br>    for (i = 0; i &lt; gcLanguages; i++) { <br>        iIndex = (INT)SendMessage(hwndCombo, CB_ADDSTRING, <br>                0, (DWORD)ids(gaLangTable[i].idsLangDesc)); <br>        SendMessage(hwndCombo, CB_SETITEMDATA, iIndex, (DWORD)i); <br>    } <br> <br>    wPrimary = (WORD)PRIMARYLANGID(diNew.wLanguage); <br>    for (i = 0, iSel = 0; i &lt; gcLanguages; i++) { <br>        iLang = (INT)SendMessage(hwndCombo, CB_GETITEMDATA, i, 0); <br> <br>        if (gaLangTable[iLang].wPrimary == wPrimary) { <br>            iSel = i; <br>            break; <br>        } <br>    } <br> <br>    SendMessage(hwndCombo, CB_SETCURSEL, iSel, 0L); <br> <br>    FillSubLanguageCombo(hwndDlg, <br>            (INT)SendMessage(hwndCombo, CB_GETITEMDATA, iSel, 0)); <br>} <br> <br> <br> <br>/************************************************************************ <br>* FillSubLanguageCombo <br>* <br>* This function fills the Sub-Language combobox with the sub-languages <br>* for the specified language. <br>* <br>* Arguments: <br>*   HWND hwndDlg - Dialog window handle. <br>*   INT iLang    - Index to the language in the language table. <br>* <br>************************************************************************/ <br> <br>STATICFN VOID FillSubLanguageCombo( <br>    HWND hwndDlg, <br>    INT iLang) <br>{ <br>    HWND hwndCombo; <br>    INT i; <br>    INT iIndex; <br>    INT iSel = 0; <br>    WORD wSubLang; <br> <br>    hwndCombo = GetDlgItem(hwndDlg, DID_DLGSTYLESUBLANG); <br>    SendMessage(hwndCombo, CB_RESETCONTENT, 0, 0L); <br> <br>    for (i = 0; i &lt; gaLangTable[iLang].cSubLangs; i++) { <br>        iIndex = (INT)SendMessage(hwndCombo, CB_ADDSTRING, 0, <br>                (DWORD)ids(gaLangTable[iLang].asl[i].idsSubLangDesc)); <br>        SendMessage(hwndCombo, CB_SETITEMDATA, iIndex, (DWORD)i); <br>    } <br> <br>    /* <br>     * Is this the language set for the dialog?  If so, find the <br>     * sublanguage and make that the default. <br>     */ <br>    if (gaLangTable[iLang].wPrimary == (WORD)PRIMARYLANGID(diNew.wLanguage)) { <br>        wSubLang = SUBLANGID(diNew.wLanguage); <br>        for (i = 0; i &lt; gaLangTable[iLang].cSubLangs; i++) { <br>            iIndex = (INT)SendMessage(hwndCombo, CB_GETITEMDATA, i, 0); <br>            if (wSubLang == gaLangTable[iLang].asl[iIndex].wSubLang) { <br>                iSel = i; <br>                break; <br>            } <br>        } <br>    } <br> <br>    SendMessage(hwndCombo, CB_SETCURSEL, iSel, 0L); <br>} <br> <br> <br> <br>/************************************************************************ <br>* CheckStyleBoxes <br>* <br>* This function takes the given style and checks the appropriate <br>* check boxes and radio buttons in the styles dialog.  The iClass <br>* determines the lookup table to use. <br>* <br>* Arguments: <br>*   HWND hwnd     - Dialog window handle. <br>*   INT iClass    - Control class (determines the style lookup table). <br>*   DWORD flStyle - Style of the control. <br>* <br>************************************************************************/ <br> <br>STATICFN VOID CheckStyleBoxes( <br>    HWND hwnd, <br>    INT iClass, <br>    DWORD flStyle) <br>{ <br>    register INT i; <br>    PCLASSSTYLE pcs; <br>    HWND hwndControl; <br>    DWORD flStyleMask; <br> <br>    i = acsd[iClass].cClassStyles; <br>    pcs = acsd[iClass].pacs; <br> <br>    while (i--) { <br>        /* <br>         * Is there a DID_* defined for this style? <br>         */ <br>        if (pcs-&gt;idControl) { <br>            /* <br>             * Does the dialog have a control with this id? <br>             */ <br>            if (hwndControl = GetDlgItem(hwnd, pcs-&gt;idControl)) { <br>                flStyleMask = <br>                        pcs-&gt;flStyleMask ? pcs-&gt;flStyleMask : pcs-&gt;flStyle; <br> <br>                /* <br>                 * If there is a match, check the box.  Otherwise, <br>                 * uncheck it. <br>                 */ <br>                SendMessage(hwndControl, BM_SETCHECK, <br>                        ((flStyle &amp; flStyleMask) == pcs-&gt;flStyle) ? 1 : 0, <br>                        0L); <br>            } <br>        } <br> <br>        pcs++; <br>    } <br>} <br> <br> <br> <br>/************************************************************************ <br>* QueryCheckedStyles <br>* <br>* This function returns the new style that the user has selected from <br>* dialog.  It reads all the checkboxes and builds up the style. <br>* Upon entry, the DWORD that is at pflStyle should be set to the <br>* original style for the control.  Chosen bits will be masked off <br>* and set as appropriate.  This allows bits that are not settable <br>* from within this styles dialog to be left untouched. <br>* <br>* Arguments: <br>*   HWND hwnd       - Dialog window handle. <br>*   INT iClass      - Control class (determines the style lookup table). <br>*   DWORD *pflStyle - Where to return the style of the control.  What <br>*                     this points to should initially have the original <br>*                     styles of the control. <br>* <br>************************************************************************/ <br> <br>STATICFN VOID QueryCheckedStyles( <br>    HWND hwnd, <br>    INT iClass, <br>    DWORD *pflStyle) <br>{ <br>    register INT i; <br>    PCLASSSTYLE pcs; <br>    HWND hwndControl; <br>    DWORD flStyleMask; <br>    DWORD flStyle; <br> <br>    /* <br>     * The first step is to strip off all bits that may be changed by <br>     * the current dialog. <br>     */ <br>    flStyle = *pflStyle; <br>    i = acsd[iClass].cClassStyles; <br>    pcs = acsd[iClass].pacs; <br>    while (i--) { <br>        /* <br>         * Is this a style that is settable by a dialog, and does the <br>         * current dialog have this style control? <br>         */ <br>        if (pcs-&gt;idControl &amp;&amp; GetDlgItem(hwnd, pcs-&gt;idControl)) { <br>            flStyleMask = <br>                    pcs-&gt;flStyleMask ? pcs-&gt;flStyleMask : pcs-&gt;flStyle; <br> <br>            /* <br>             * Strip off all bits in the mask for this style. <br>             */ <br>            flStyle &amp;= ~flStyleMask; <br>        } <br> <br>        pcs++; <br>    } <br> <br>    /* <br>     * Now we go through all bits that may be set and set any that the <br>     * user has selected. <br>     */ <br>    i = acsd[iClass].cClassStyles; <br>    pcs = acsd[iClass].pacs; <br>    while (i--) { <br>        if (pcs-&gt;idControl &amp;&amp; <br>                (hwndControl = GetDlgItem(hwnd, pcs-&gt;idControl))) { <br>            if (SendMessage(hwndControl, BM_GETCHECK, 0, 0L)) <br>                flStyle |= pcs-&gt;flStyle; <br>        } <br> <br>        pcs++; <br>    } <br> <br>    *pflStyle = flStyle; <br>} <br> <br> <br> <br>/************************************************************************ <br>* StylesHelp <br>* <br>* This function shows the appropriate help context from any of the <br>* styles dialogs.  It uses the type of control in npcStyles to <br>* determine what help to show. <br>* <br>************************************************************************/ <br> <br>STATICFN VOID StylesHelp(VOID) <br>{ <br>    WinHelp(ghwndMain, gszHelpFile, HELP_CONTEXT, <br>            npcStyles-&gt;pwcd-&gt;HelpContext); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

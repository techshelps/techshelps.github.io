<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>REMOTE.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5732"></a>REMOTE.H</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1993 - 1997 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>/*++ <br> <br>Copyright 1993 - 1997 Microsoft Corporation <br> <br>Module Name: <br> <br>    Remote.h <br> <br>Abstract: <br> <br>    This module contains the main() entry point for Remote. <br>    Calls the Server or the Client depending on the first parameter. <br> <br> <br>Author: <br> <br>    Rajivendra Nath  2-Jan-1993 <br> <br>Environment: <br> <br>    Console App. User mode. <br> <br>Revision History: <br> <br>--*/ <br> <br>#if !defined(FASTCALL) <br>#if defined(_M_IX86) <br>#define FASTCALL _fastcall <br>#else <br>#define FASTCALL <br>#endif <br>#endif <br> <br>#define VERSION         4 <br>#define REMOTE_SERVER       1 <br>#define RUNTYPE_CLIENT      2 <br> <br>#define SERVER_READ_PIPE    "\\\\%s\\PIPE\\%sIN"   //Client Writes and Server Reads <br>#define SERVER_WRITE_PIPE   "\\\\%s\\PIPE\\%sOUT"  //Server Writes and Client Reads <br> <br>#define QUERY_DEBUGGERS_PIPE "\\\\%s\\PIPE\\QueryDebuggerPipe" <br> <br>// PRIVACY_DEFAULT:     this session will be listed only if it looks like a debugging one <br>// PRIVACY_NON_VISIBLE: whatever the name of command, it will not show up with remote /q <br>// PRIVACY_VISIBLE:     this session will be visible for querying <br> <br>#define PRIVACY_DEFAULT       1 <br>#define PRIVACY_VISIBLE       2 <br>#define PRIVACY_NOT_VISIBLE   3 <br> <br> <br>#define COMMANDCHAR         '@' //Commands intended for remote begins with this <br>#define CTRLC               3 <br> <br>#define CLIENT_ATTR         FOREGROUND_INTENSITY|FOREGROUND_GREEN|FOREGROUND_RED|BACKGROUND_BLUE <br>#define SERVER_ATTR         FOREGROUND_INTENSITY|FOREGROUND_GREEN|FOREGROUND_BLUE|BACKGROUND_RED <br> <br>// <br>//Some General purpose Macros <br>// <br>#define MINIMUM(x,y)          ((x)&gt;(y)?(y):(x)) <br>#define MAXIMUM(x,y)          ((x)&gt;(y)?(x):(y)) <br> <br>#define HOSTNAMELEN         MAX_COMPUTERNAME_LENGTH+1 <br> <br>#define CHARS_PER_LINE      45 <br> <br>#define MAGICNUMBER     0x31109000 <br>#define BEGINMARK       '\xfe' <br>#define ENDMARK         '\xff' <br>#define LINESTOSEND     200 <br> <br>#define MAX_DACL_NAMES  64 <br> <br>typedef struct <br>{ <br>    DWORD    Size; <br>    DWORD    Version; <br>    char     ClientName[HOSTNAMELEN]; <br>    DWORD    LinesToSend; <br>    DWORD    Flag; <br>}   SESSION_STARTUPINFO; <br> <br>typedef struct <br>{ <br>    DWORD MagicNumber;      //New Remote <br>    DWORD Size;             //Size of structure <br>    DWORD FileSize;         //Num bytes sent <br>}   SESSION_STARTREPLY; <br> <br> <br> <br>typedef struct <br>{ <br>    char* out;              // message <br>    int  size;              // message length <br>    int  allocated;         // length of allocated memory <br>} QUERY_MESSAGE; <br> <br>VOID <br>QueryRemotePipes( <br>    char* serverName <br>    ); <br> <br>int <br>OverlappedServer( <br>    char* ChildCmd, <br>    char* PipeName <br>    ); <br> <br> <br>VOID <br>Client( <br>    char* ServerName, <br>    char* PipeName <br>    ); <br> <br>VOID <br>ErrorExit( <br>    char* str <br>    ); <br> <br>VOID <br>DisplayClientHlp( <br>    ); <br> <br>VOID <br>DisplayServerHlp( <br>    ); <br> <br>VOID <br>Errormsg( <br>    char* str <br>    ); <br> <br>BOOL <br>IsKdString( <br>    char* string <br>    ); <br> <br>BOOL <br>FASTCALL <br>WriteFileSynch( <br>    HANDLE  hFile, <br>    LPVOID  lpBuffer, <br>    DWORD   cbWrite, <br>    LPDWORD lpNumberOfBytesWritten, <br>    DWORD   dwFileOffset, <br>    LPOVERLAPPED lpO <br>    ); <br> <br>BOOL <br>FASTCALL <br>ReadFileSynch( <br>    HANDLE  hFile, <br>    LPVOID  lpBuffer, <br>    DWORD   cbRead, <br>    LPDWORD lpNumberOfBytesRead, <br>    DWORD   dwFileOffset, <br>    LPOVERLAPPED lpO <br>    ); <br> <br>VOID <br>CloseClientPipes( <br>    VOID <br>    ); <br> <br>extern char   HostName[HOSTNAMELEN]; <br>extern char*  ChildCmd; <br>extern char*  PipeName; <br>extern char*  ServerName; <br>extern HANDLE MyOutHandle; <br>extern DWORD  LinesToSend; <br>extern BOOL   IsAdvertise; <br>extern DWORD  ClientToServerFlag; <br>extern char * DaclNames[]; <br>extern DWORD  DaclNameCount; <br>extern char * DaclDenyNames[]; <br>extern DWORD  DaclDenyNameCount; <br>extern BOOL   fAsyncPipe; <br>extern HANDLE hAttachedProcess; <br>extern HANDLE hAttachedWriteChildStdIn; <br>extern HANDLE hAttachedReadChildStdOut; </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SRVLIST.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5739"></a>SRVLIST.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1995 - 1997 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>/*++ <br> <br>Copyright (c) 1997  Microsoft Corporation <br> <br>Module Name: <br> <br>    SrvList.c <br> <br>Abstract: <br> <br>    The server component of Remote.  This module <br>    implements three lists of REMOTE_CLIENT structures, <br>    for handshaking, connected, and closing clients. <br>    To simplify the interface items always progress <br>    through the three lists in order, with list node <br>    memory being freed as it is removed from the <br>    closing list. <br> <br> <br>Author: <br> <br>    Dave Hart  30 May 1997 <br> <br>Environment: <br> <br>    Console App. User mode. <br> <br>Revision History: <br> <br>--*/ <br> <br>#include &lt;windows.h&gt; <br>#include "Remote.h" <br>#include "Server.h" <br>#include "SrvList.h" <br> <br> <br>VOID <br>FASTCALL <br>InitializeClientLists( <br>    VOID <br>    ) <br>{ <br>    InitializeCriticalSection( &amp;csHandshakingList ); <br>    InitializeCriticalSection( &amp;csClientList ); <br>    InitializeCriticalSection( &amp;csClosingClientList ); <br> <br>    InitializeListHead( &amp;HandshakingListHead ); <br>    InitializeListHead( &amp;ClientListHead ); <br>    InitializeListHead( &amp;ClosingClientListHead ); <br>} <br> <br> <br>VOID <br>FASTCALL <br>AddClientToHandshakingList( <br>    PREMOTE_CLIENT pClient <br>    ) <br>{ <br>    EnterCriticalSection( &amp;csHandshakingList ); <br> <br>    InsertTailList( &amp;HandshakingListHead, &amp;pClient-&gt;Links ); <br> <br>    LeaveCriticalSection( &amp;csHandshakingList ); <br>} <br> <br> <br>VOID <br>FASTCALL <br>MoveClientToNormalList( <br>    PREMOTE_CLIENT pClient <br>    ) <br>{ <br>    EnterCriticalSection( &amp;csHandshakingList ); <br> <br>    RemoveEntryList( &amp;pClient-&gt;Links ); <br> <br>    LeaveCriticalSection( &amp;csHandshakingList ); <br> <br> <br>    EnterCriticalSection( &amp;csClientList ); <br> <br>    InsertTailList( &amp;ClientListHead, &amp;pClient-&gt;Links ); <br> <br>    LeaveCriticalSection( &amp;csClientList ); <br>} <br> <br> <br>VOID <br>FASTCALL <br>MoveClientToClosingList( <br>    PREMOTE_CLIENT pClient <br>    ) <br>{ <br>    EnterCriticalSection( &amp;csClientList ); <br> <br>    RemoveEntryList( &amp;pClient-&gt;Links ); <br> <br>    LeaveCriticalSection( &amp;csClientList ); <br> <br> <br>    EnterCriticalSection( &amp;csClosingClientList ); <br> <br>    InsertTailList( &amp;ClosingClientListHead, &amp;pClient-&gt;Links ); <br> <br>    LeaveCriticalSection( &amp;csClosingClientList ); <br>} <br> <br> <br>PREMOTE_CLIENT <br>FASTCALL <br>RemoveFirstClientFromClosingList( <br>    VOID <br>    ) <br>{ <br>    PREMOTE_CLIENT pClient; <br> <br>    EnterCriticalSection( &amp;csClosingClientList ); <br> <br>    if (IsListEmpty(&amp;ClosingClientListHead)) { <br> <br>        pClient = NULL; <br> <br>    } else { <br> <br>        pClient = (PREMOTE_CLIENT) RemoveHeadList( &amp;ClosingClientListHead ); <br> <br>        ZeroMemory( &amp;pClient-&gt;Links, sizeof(&amp;pClient-&gt;Links) ); <br> <br>    } <br> <br>    LeaveCriticalSection( &amp;csClosingClientList ); <br> <br>    return pClient; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

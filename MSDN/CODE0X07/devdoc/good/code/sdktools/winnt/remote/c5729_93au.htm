<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SRVCHILD.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5736"></a>SRVCHILD.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1992 - 1997 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>/*++ <br> <br>Copyright 1992 - 1997 Microsoft Corporation <br> <br>Module Name: <br> <br>    SrvChild.c <br> <br>Abstract: <br> <br>    The server component of Remote. It spawns a child process <br>    and redirects the stdin/stdout/stderr of child to itself. <br>    Waits for connections from clients - passing the <br>    output of child process to client and the input from clients <br>    to child process. <br> <br>Author: <br> <br>    Rajivendra Nath  2-Jan-1992 <br>    Dave Hart        30 May 1997 split from Server.c <br> <br>Environment: <br> <br>    Console App. User mode. <br> <br>Revision History: <br> <br>--*/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;process.h&gt; <br>#include &lt;io.h&gt; <br>#include &lt;string.h&gt; <br>#include "Remote.h" <br>#include "Server.h" <br> <br> <br>VOID <br>FASTCALL <br>StartChildOutPipeRead( <br>    VOID <br>    ) <br>{ <br>    ReadChildOverlapped.OffsetHigh = <br>        ReadChildOverlapped.Offset = 0; <br> <br>    if ( ! ReadFileEx( <br>               hReadChildOutput, <br>               ReadChildBuffer, <br>               sizeof(ReadChildBuffer) - 1,                  // allow for null term <br>               &amp;ReadChildOverlapped, <br>               ReadChildOutputCompleted <br>               )) { <br> <br>        if (INVALID_HANDLE_VALUE != hWriteChildStdIn) { <br> <br>            CANCELIO( hWriteChildStdIn ); <br>            CloseHandle( hWriteChildStdIn ); <br>            hWriteChildStdIn = INVALID_HANDLE_VALUE; <br>        } <br>    } <br>} <br> <br> <br>VOID <br>WINAPI <br>ReadChildOutputCompleted( <br>    DWORD dwError, <br>    DWORD cbRead, <br>    LPOVERLAPPED lpO <br>    ) <br>{ <br>    UNREFERENCED_PARAMETER(lpO); <br> <br>    // <br>    // We can get called after hWriteTempFile <br>    // is closed after the child has exited. <br>    // <br> <br>    if (! dwError &amp;&amp; <br>        INVALID_HANDLE_VALUE != hWriteTempFile) { <br> <br>        // <br>        // Start a write to the temp file. <br>        // <br> <br>        ReadChildOverlapped.OffsetHigh = 0; <br>        ReadChildOverlapped.Offset = dwWriteFilePointer; <br> <br>        if ( ! WriteFileEx( <br>                   hWriteTempFile, <br>                   ReadChildBuffer, <br>                   cbRead, <br>                   &amp;ReadChildOverlapped, <br>                   WriteTempFileCompleted <br>                   )) { <br> <br>            dwError = GetLastError(); <br> <br>            if (ERROR_DISK_FULL == dwError) { <br> <br>                printf("Remote: disk full writing temp file %s, exiting\n", SaveFileName); <br> <br>                if (INVALID_HANDLE_VALUE != hWriteChildStdIn) { <br> <br>                    CANCELIO( hWriteChildStdIn ); <br>                    CloseHandle( hWriteChildStdIn ); <br>                    hWriteChildStdIn = INVALID_HANDLE_VALUE; <br>                } <br> <br>            } else { <br> <br>                ErrorExit("WriteFileEx for temp file failed."); <br>            } <br>        } <br>    } <br>} <br> <br> <br>VOID <br>WINAPI <br>WriteTempFileCompleted( <br>    DWORD dwError, <br>    DWORD cbWritten, <br>    LPOVERLAPPED lpO <br>    ) <br>{ <br>    UNREFERENCED_PARAMETER(lpO); <br> <br>    if (dwError) { <br> <br>        if (ERROR_DISK_FULL == dwError) { <br> <br>            printf("Remote: disk full writing temp file %s, exiting\n", SaveFileName); <br> <br>            if (INVALID_HANDLE_VALUE != hWriteChildStdIn) { <br> <br>                CANCELIO( hWriteChildStdIn ); <br>                CloseHandle( hWriteChildStdIn ); <br>                hWriteChildStdIn = INVALID_HANDLE_VALUE; <br>            } <br> <br>            return; <br> <br>        } else { <br> <br>            SetLastError(dwError); <br>            ErrorExit("WriteTempFileCompleted may need work"); <br>        } <br>    } <br> <br>    dwWriteFilePointer += cbWritten; <br> <br>    TRACE(CHILD, ("Wrote %d bytes to temp file\n", cbWritten)); <br> <br>    StartServerToClientFlow(); <br> <br>    // <br>    // Start another read against the child input. <br>    // <br> <br>    StartChildOutPipeRead(); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

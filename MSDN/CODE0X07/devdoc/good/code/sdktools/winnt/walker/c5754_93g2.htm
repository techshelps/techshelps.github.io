<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PWALK.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5762"></a>PWALK.H</h2>
<pre><code>#include &lt;windows.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;stdio.h&gt; <br>#include "pefile.h" <br> <br> <br>#define IDR_MAINICON     20 <br>#define IDR_SYSSTATICON      21 <br>#define IDR_PROSTATICON      22 <br>#define IDR_WALKERMENU     30 <br> <br>#define IDS_WALKERCLASS      11000 <br>#define IDS_SYSSTATCLASS     11001 <br>#define IDS_PROSTATCLASS     11002 <br>#define IDS_STATUSCLASS      11004 <br>#define IDS_MEMVIEWCLASS     11005 <br>#define IDS_SYSSTATTITLE     11010 <br>#define IDS_PROSTATTITLE     11011 <br>#define IDS_MEMVIEWTITLE     11013 <br>#define IDS_CAPTION     11020 <br>#define IDS_UNAVAILABLE      11021 <br>#define IDS_LISTBOX     11022 <br>#define IDS_EXEFILEEXT     11023 <br>#define IDS_FILEOPENTITLE     11024 <br>#define IDS_SELF     11025 <br>#define IDS_ERROR     11030 <br>#define IDS_NOTENOUGHMEM     11031 <br>#define IDS_HEAPCREATEFAILED     11032 <br>#define IDS_DBGEVNTACTIVE     11042 <br>#define IDS_DBGEVNTCLOSE     11043 <br>#define IDS_DBGEVNTSTOP      11044 <br>#define IDS_DBGEVNTSTART     11045 <br>#define IDS_DBGEVNTREAD      11046 <br>#define IDS_DBGEVNTWRITE     11047 <br>#define IDS_DBGEVNTACK     11048 <br>#define IDS_EXCEPTION     11050 <br>#define IDS_APPEXCEPTION     11051 <br>#define IDS_CHILDAPPEXCEPTION     11052 <br>#define IDS_ERRDUPLICATEHANDLE     11060 <br>#define IDS_ERRGETTHREADCONTEXT      11061 <br>#define IDS_ERRCREATEPROCESS     11062 <br>#define IDS_ERROPENPROCESS     11063 <br>#define IDS_ERRCREATEFILEMAPPING     11064 <br>#define IDS_ERRHEAPALLOC     11065 <br>#define IDS_ERRREADPROCESSMEMORY     11066 <br>#define IDS_ERRCREATEWINDOW     11067 <br>#define IDS_ERRVIRTUALFREE     11068 <br>#define IDS_ERRVIRTUALALLOC     11069 <br>#define IDS_STATUSREADY      11070 <br>#define IDS_NOTCOMMITTEDMEMORY     11071 <br>#define IDS_ERRWRITEPROCESSMEMORY    11072 <br>#define IDS_COULDNOTREADPROCESS      11073 <br>#define IDS_ERRSETTHREADCONTEXT      11074 <br>#define IDS_EXITPROCESS      12000 <br>#define IDS_EXITTHREAD     12001 <br>#define IDS_CREATEPROCESS     12002 <br>#define IDS_CREATETHREAD     12003 <br>#define IDS_LOADDLL     12004 <br>#define IDS_UNLOADDLL     12005 <br>#define IDS_OUTPUTDEBUGSTRING     12006 <br>#define IDS_RIPEVENT     12007 <br>#define IDS_BREAKPOINTEXCEPTION      12008 <br>#define IDS_ACCESSVIOLATIONEXCEPTION 12009 <br>#define IDS_UNHANDLEDEXCEPTION     12010 <br>#define IDS_PROCESSSUSPENDED     12011 <br>#define IDS_PROCESSRESUMED     12012 <br>#define IDS_PROCESSINIT      12013 <br>#define IDS_MAPFILENAME      12014 <br>#define IDS_INITPROCESSFAILURE     12015 <br>#define IDS_INITPROBE     12016 <br>#define IDS_HOOKPROCESS      12017 <br> <br>#define IDC_LISTBOX     100 <br>#define IDC_STATUSWND     101 <br>#define IDC_REFRESH     200 <br>#define IDC_CANCEL     201 <br>#define IDC_REWALK     202 <br> <br>#define IDM_POPUPMENUS     1000 <br>#define IDM_POPUPPROCESS     1000 <br>#define IDM_POPUPSORT     1001 <br>#define IDM_POPUPVIEW     1002 <br>#define IDM_POPUPOPTIONS     1003 <br>#define MENUPOPUPS     4 <br> <br>#define IDM_PROCESSREWALK     2000 <br>#define IDM_PROCESSLOAD      2001 <br>#define IDM_PROCESSUNLOAD     2002 <br>#define IDM_PROCESSSUSPEND     2003 <br>#define IDM_PROCESSRESUME     2004 <br>#define IDM_EXIT     2010 <br>#define IDM_SORTADDRESS      2020 <br>#define IDM_SORTSTATE     2021 <br>#define IDM_SORTPROTECTION     2022 <br>#define IDM_SORTSIZE     2023 <br>#define IDM_SORTBASEADDRESS     2024 <br>#define IDM_VIEWSYSSTAT      2030 <br>#define IDM_VIEWPROSTAT      2031 <br>#define IDM_VIEWMEMORY     2033 <br>#define IDM_VIEWADDRESS      2034 <br>#define IDM_OPTBYTES                 2040 <br>#define IDM_OPTPAGES                 2041 <br> <br>#define IDD_ADDR     3000 <br>#define IDC_ADDR     3001 <br>#define IDC_HEX      3002 <br> <br>#define IDD_INITIALIZING     4000 <br>#define UM_ENDDIALOG     WM_USER+2 <br> <br>#define TOTALVMRESERVE     0x00100000 <br>#define PAGESIZE     0x1000 <br>#define IDM_REMOVEVIEWWND     WM_USER+0 <br> <br>#define IDT_STATUS     3000 <br>#define UM_UPDATE     WM_USER+1 <br>#define UM_STARTINITDIALOG     WM_USER+3 <br> <br>#define STATUSWXB     12 <br>#define WXB_HPENHILITE     0 <br>#define WXB_HPENSHADOW     4 <br>#define WXB_LPWINDOWTEXT     8 <br> <br>#define VIEWWXB      8 <br>#define WXB_LPMEMVIEW     0 <br>#define WXB_LPOLDMEMVIEW     4 <br> <br>/* define event handle array indeces */ <br>#define CLOSEDEBUGGER     0 <br>#define SUSPENDDEBUGGER      1 <br>#define RESUMEDEBUGGER     2 <br>#define READMEMORY     3 <br>#define WRITEMEMORY     4 <br>#define DEBUGACTIVE     5 <br>#define ACKNOWLEDGE     6 <br>#define nDEBUGEVENTS     7 <br> <br> <br>typedef struct DBGTHREAD    *LPDBGTHREAD; <br>typedef struct tagDbgThread <br>    { <br>    HANDLE      hThread; <br>    DWORD      dwThreadID; <br>    LPTHREAD_START_ROUTINE    lpStartAddress; <br>    int       nPriority; <br>    LPDBGTHREAD       Next; <br>    }DBGTHREAD; <br> <br>typedef struct DBGDLL *LPDBGDLL; <br>typedef struct tagDbgDll <br>    { <br>    HANDLE  hFile; <br>    LPVOID  lpBaseOfDll; <br>    DWORD  dwDebugInfoFileOffset; <br>    DWORD  nDebugInfoSize; <br>    char  szImageName[MAX_PATH]; <br>    WORD  fUnicode; <br>    LPDBGDLL  Next; <br>    SECTIONINFO   *lpSection;  /* from PEFILE.H */ <br>    }DBGDLL; <br> <br>typedef struct DBGEXCEPTREC    *LPDBGEXCEPTREC; <br>typedef struct tagDbgExcept <br>    { <br>    EXCEPTION_RECORDExceptRecord; <br>    CONTEXTContext; <br>    DWORDdwThreadId; <br>    DWORDdwFirstChance; <br>    LPDBGEXCEPTRECNext; <br>    }DBGEXCEPTREC; <br> <br>typedef struct tagDbgProcess <br>    { <br>    HANDLE hDbgHeap; <br>    DWORD dwProcessID; <br>    HANDLE hProcess; <br>    HANDLE hFile; <br>    LPVOID lpImage; <br>    DWORD dwDbgInfoOffset; <br>    DWORD nDbgInfoSize; <br>    DBGTHREAD *lpThreads; <br>    DBGDLL *lpDlls; <br>    SECTIONINFO  *lpSection; <br>    HWND hWnd; <br>    DWORD dwPriority; <br>    BOOL bActive; <br>    char szModule[MAX_PATH]; <br>    DBGEXCEPTREC *lpERs; <br>    }DBGPROCESS; <br> <br>typedef struct tagVMObject <br>    { <br>    MEMORY_BASIC_INFORMATIONmbi; <br>    charszObjType[12]; <br>    charszModule[MAX_PATH]; <br>    charszSection[IMAGE_SIZEOF_SHORT_NAME]; <br>    BOOLbNew; <br>    }VMOBJECT, * LPVMOBJECT; <br> <br> <br>/* struct for memory view window */ <br>typedef struct tagMemView <br>    { <br>    LPVOID    lpMem; <br>    int       nBase; <br>    int       nSize; <br>    int       xWin, yWin; <br>    int       PosV, RangeV; <br>    long      nLines; <br>    int       nExtraBytes; <br>} MEMVIEW, * LPMEMVIEW; <br> <br> <br>/* struct for process probe dll */ <br>typedef struct tagProbe <br>    { <br>    HANDLE hProcess; <br>    HANDLE hDefHeap; <br>    }PROBE, * LPPROBE; <br> <br> <br>/* struct representing process state */ <br>typedef struct tagProcessState <br>    { <br>    CONTEXT    Context; <br>    LPVOID     Esp; <br>    LPVOID     pStackPage; <br>    BYTE       Stack[PAGESIZE]; <br>    LPVOID     Eip; <br>    LPVOID     pCodePage; <br>    BYTE       Code[PAGESIZE]; <br>    }PROCESS_STATE, * LPPROCESS_STATE; <br> <br> <br>/* prototypes for functions in pwalk.c */ <br>LONG   WINAPI WalkerWndProc (HWND, UINT, WPARAM, LPARAM); <br>int    WINAPI NotifyUser (HWND, int, int, char *, UINT); <br>void   WINAPI ReportError (int); <br>BOOL   WINAPI GetFreeDiskSpace (LPDWORD, LPDWORD); <br>BOOL   WINAPI InitDlgProc (HWND, UINT, WPARAM, LPARAM); <br> <br>/* prototypes for functions in pwalkio.c */ <br>BOOL   WINAPI GetFileName (HWND, char *, char *); <br>void   WINAPI GetFileFromPath (char *, char *); <br>BOOL   WINAPI GetCmdLine (char *, char *, BOOL *); <br>BOOL   WINAPI IsValidFile (char *); <br> <br>/* prototypes for functions in pstat.c */ <br>LONG   WINAPI SysStatWndProc (HWND, UINT, WPARAM, LPARAM); <br>LONG   WINAPI ProStatWndProc (HWND, UINT, WPARAM, LPARAM); <br>LONG   WINAPI StatusWndProc (HWND, UINT, WPARAM, LPARAM); <br>void   WINAPI SetStatusText (HWND, int, COLORREF); <br> <br>/* prototypes for functions in pview.c */ <br>HWND   WINAPI ViewMemory (HWND, char *, LPVOID, int, int); <br>LONG   WINAPI MemWndProc (HWND, UINT, WPARAM, LPARAM); <br>void   WINAPI ActivateViewWindow (ATOM); <br>HWND   WINAPI EnumViewWindows (HWND, HWND); <br>BOOL   WINAPI AddrDlgProc (HWND, UINT, WPARAM, LPARAM); <br> <br>/* prototypes for functions in pdebug.c */ <br>DBGPROCESS* WINAPI StartChildProcess (HWND, char *, LPHANDLE); <br>void   WINAPI CloseChildProcess (DBGPROCESS *, LPHANDLE); <br>int    WINAPI WhereIsStack (HANDLE); <br>int    WINAPI WalkProcess (HANDLE, LPVOID *, LPINT *); <br>void   WINAPI AnalyzeProcess (DBGPROCESS *, LPVMOBJECT, int); <br>void   WINAPI IdentifyNewObjects (LPVMOBJECT, int, LPVMOBJECT, int); <br>BOOL   WINAPI CommittedMemoryRange (int, int, LPVMOBJECT, int *); <br>BOOL   WINAPI AccessProcessMemory (HANDLE, HANDLE, LPVOID, LPVOID, DWORD *); <br> <br>/* prototypes for functions in probe.c, a DLL */ <br>voidWINAPI ResetProbe (); <br>LPPROBE WINAPI RetrieveProbeData (); </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PWALKIO.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5763"></a>PWALKIO.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>#include "pwalk.h" <br>#include &lt;commdlg.h&gt; <br> <br> <br>/* global file name variables */ <br>charszExeFilterSpec[128] = "Executable Files (*.EXE)\0*.EXE\0"; <br> <br> <br>/* call the OpenFile common dialog to get a filename */ <br>BOOL WINAPI GetFileName ( <br>    HWND    hWnd, <br>    char    *lpszFilePath, <br>    char    *lpszExt) <br>{ <br>    OPENFILENAME    ofn; <br>    char    szFileOpen[25]; <br>    char    szExt[10]; <br>    char    szTitle[MAX_PATH]; <br> <br>    *szTitle = 0; <br> <br>    if (lpszExt &amp;&amp; *lpszExt) <br>strcpy (szExt, lpszExt); <br>    else <br>LoadString ((HANDLE)GetModuleHandle (NULL), <br>    IDS_EXEFILEEXT, <br>    szExt, <br>    sizeof (szExt)); <br> <br>    LoadString ((HANDLE)GetModuleHandle (NULL), <br>        IDS_FILEOPENTITLE, <br>szFileOpen, <br>sizeof (szFileOpen)); <br> <br>    ofn.lStructSize  = sizeof (OPENFILENAME); <br>    ofn.hwndOwner  = NULL; <br>    ofn.lpstrFilter  = szExeFilterSpec; <br>    ofn.lpstrCustomFilter = NULL; <br>    ofn.nMaxCustFilter    = 0; <br>    ofn.nFilterIndex      = 0; <br>    ofn.lpstrFile  = lpszFilePath; <br>    ofn.nMaxFile  = MAX_PATH; <br>    ofn.lpstrInitialDir   = NULL; <br>    ofn.lpstrFileTitle  = szTitle; <br>    ofn.nMaxFileTitle     = MAX_PATH; <br>    ofn.lpstrTitle  = szFileOpen; <br>    ofn.lpstrDefExt  = szExt; <br>    ofn.Flags  = OFN_FILEMUSTEXIST; <br> <br>    /* call common open dialog and return result */ <br>    return (GetOpenFileName ((LPOPENFILENAME)&amp;ofn)); <br>} <br> <br> <br> <br>/* invokes the saveas common dialog to retrieve a file name */ <br>/* function retrieves the filename from the path */ <br>void WINAPI GetFileFromPath ( <br>    char    *lpszFullPath, <br>    char    *lpszFile) <br>{ <br>    char    *lpPtr = lpszFullPath + strlen (lpszFullPath); <br> <br>    /* file is at end of path, so search backwards to first \ or : char */ <br>    while (lpPtr &gt; lpszFullPath) <br>    { <br>    if (*lpPtr == '\\' || <br>        *lpPtr == ':') <br>        { <br>        lpPtr++; <br>        break; <br>        } <br>    lpPtr = CharPrev(lpszFullPath, lpPtr); <br>    } <br> <br>    /* return filename if found, or full path passed in */ <br>    strcpy (lpszFile, lpPtr); <br>} <br> <br> <br> <br> <br>/* validate filename as executable image  */ <br>BOOL WINAPI IsValidFile ( <br>    char    *lpszFilename) <br>{ <br>    OFSTRUCTof; <br>    int nLen; <br>    char*pStr; <br> <br>    /* validate filename pointer */ <br>    if (lpszFilename == NULL || <br>!*lpszFilename) <br>return FALSE; <br> <br>    /* open the file for existance */ <br>    if (OpenFile (lpszFilename, &amp;of, OF_EXIST) == -1) <br>/* fail validation */ <br>return FALSE; <br> <br>    /* test the extension is .EXE */ <br>    nLen = strlen (lpszFilename); <br>    pStr = lpszFilename + nLen - 4; <br>    if (!stricmp (pStr, ".EXE")) <br>/* pass validation */ <br>return TRUE; <br> <br>    /* fail validation */ <br>    return FALSE; <br>} <br> <br> <br> <br> <br>/* get win32 command line parameters */ <br>BOOL WINAPI GetCmdLine( <br>    char    *lpStr, <br>    char    *lpszCmdLine, <br>    BOOL    *bBkgnd) <br>{ <br>    if (*lpStr) <br>{ <br>/* skip application name which precedes parameters */ <br>while (*lpStr != ' ' &amp;&amp; *lpStr != 0) <br>lpStr = CharNext(lpStr); <br> <br>/* skip spaces */ <br>while (*lpStr == ' ' &amp;&amp; *lpStr != 0) <br>lpStr = CharNext(lpStr); <br> <br>/* indeed command line parameter(s) present */ <br>if (*lpStr != 0) <br>    { <br>    /* if background switch, set flag and remove switch from command line */ <br>    if ((*lpStr == '/' || *lpStr == '-') &amp;&amp; <br>(*(lpStr+1) == 'b' || *(lpStr+1) == 'B')) <br>{ <br>*bBkgnd = TRUE; <br>lpStr += 2; <br> <br>if (*lpStr == 0) <br>    *lpszCmdLine = 0; <br>else <br>    strcpy (lpszCmdLine, lpStr); <br>} <br>    /* maybe switch is embedded in parameter(s) somewhere */ <br>    else <br>{ <br>char*pStr = lpStr; <br>char*pCmdLine = lpszCmdLine; <br>inti, nCnt; <br> <br>while (*pStr != 0) <br>    { <br>    /* background switch is set, so prepare parameters and set flag */ <br>    if ((*pStr == '/' || *pStr == '-') &amp;&amp; <br>(*(pStr+1) == 'b' || *(pStr+1) == 'B')) <br>{ <br>*bBkgnd = TRUE; <br> <br>/* copy from beg. of lpStr to *pStr to lpszCmdLine */ <br>nCnt = pStr - lpStr; <br>for (i=0; i&lt;nCnt; i++) <br>    lpszCmdLine[i] = lpStr[i]; <br>lpszCmdLine[i] = 0; <br>strcat (lpszCmdLine, (pStr+2)); <br> <br>/* break from loop */ <br>break; <br>} <br> <br>    pStr = CharNext(pStr); <br>    } <br> <br>/* no switch found, can only edit one file, remove extra parameters */ <br>if (*pStr == 0) <br>    { <br>    pStr = lpStr; <br> <br>    while (*pStr != ' ' &amp;&amp; *pStr != 0) <br>pStr = CharNext(pStr); <br> <br>    if (*pStr == ' ') <br>*pStr = 0; <br> <br>    strcpy (lpszCmdLine, lpStr); <br>    } <br>} <br>    } <br>else <br>    return FALSE; <br>} <br>    else <br>return FALSE; <br> <br>    return TRUE; <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

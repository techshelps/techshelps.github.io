<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DBMON.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5587"></a>DBMON.C</h2>
<pre><code>/*++ <br> <br>Copyright (c) 1990  Microsoft Corporation <br> <br>Module Name: <br> <br>    dbmon.c <br> <br>Abstract: <br> <br>    A simple program to print strings passed to OutputDebugString when <br>    the app printing the strings is not being debugged. <br> <br>Author: <br> <br>    Kent Forschmiedt (kentf) 30-Sep-1994 <br> <br>Revision History: <br> <br>--*/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br> <br>int _cdecl <br>main( <br>    int argc, <br>    char ** argv <br>    ) <br>/*++ <br> <br>Routine Description: <br> <br> <br>Arguments: <br> <br> <br>Return Value: <br> <br> <br>--*/ <br>{ <br>    HANDLE AckEvent; <br>    HANDLE ReadyEvent; <br>    HANDLE SharedFile; <br>    LPVOID SharedMem; <br>    LPSTR  String; <br>    DWORD  ret; <br>    DWORD  LastPid; <br>    LPDWORD pThisPid; <br>    BOOL    DidCR; <br> <br>    SECURITY_ATTRIBUTES sa; <br>    SECURITY_DESCRIPTOR sd; <br> <br>    sa.nLength = sizeof(SECURITY_ATTRIBUTES); <br>    sa.bInheritHandle = TRUE; <br>    sa.lpSecurityDescriptor = &amp;sd; <br> <br>    if(!InitializeSecurityDescriptor(&amp;sd, SECURITY_DESCRIPTOR_REVISION)) { <br>        fprintf(stderr,"unable to InitializeSecurityDescriptor, err == %d\n", <br>            GetLastError()); <br>        exit(1); <br>    } <br> <br>    if(!SetSecurityDescriptorDacl(&amp;sd, TRUE, (PACL)NULL, FALSE)) { <br>        fprintf(stderr,"unable to SetSecurityDescriptorDacl, err == %d\n", <br>            GetLastError()); <br>        exit(1); <br>    } <br> <br>    AckEvent = CreateEvent(&amp;sa, FALSE, FALSE, "DBWIN_BUFFER_READY"); <br> <br>    if (!AckEvent) { <br>        fprintf(stderr, <br>                "dbmon: Unable to create synchronization object, err == %d\n", <br>                GetLastError()); <br>        exit(1); <br>    } <br> <br>    if (GetLastError() == ERROR_ALREADY_EXISTS) { <br>        fprintf(stderr, "dbmon: already running\n"); <br>        exit(1); <br>    } <br> <br>    ReadyEvent = CreateEvent(&amp;sa, FALSE, FALSE, "DBWIN_DATA_READY"); <br> <br>    if (!ReadyEvent) { <br>        fprintf(stderr, <br>                "dbmon: Unable to create synchronization object, err == %d\n", <br>                GetLastError()); <br>        exit(1); <br>    } <br> <br>    SharedFile = CreateFileMapping( <br>                        (HANDLE)-1, <br>                        &amp;sa, <br>                        PAGE_READWRITE, <br>                        0, <br>                        4096, <br>                        "DBWIN_BUFFER"); <br> <br>    if (!SharedFile) { <br>        fprintf(stderr, <br>                "dbmon: Unable to create file mapping object, err == %d\n", <br>                GetLastError()); <br>        exit(1); <br>    } <br> <br>    SharedMem = MapViewOfFile( <br>                        SharedFile, <br>                        FILE_MAP_READ, <br>                        0, <br>                        0, <br>                        512); <br> <br>    if (!SharedMem) { <br>        fprintf(stderr, <br>                "dbmon: Unable to map shared memory, err == %d\n", <br>                GetLastError()); <br>        exit(1); <br>    } <br> <br>    String = (LPSTR)SharedMem + sizeof(DWORD); <br>    pThisPid = SharedMem; <br> <br>    LastPid = 0xffffffff; <br>    DidCR = TRUE; <br> <br>    SetEvent(AckEvent); <br> <br>    for (;;) { <br> <br>        ret = WaitForSingleObject(ReadyEvent, INFINITE); <br> <br>        if (ret != WAIT_OBJECT_0) { <br> <br>            fprintf(stderr, "dbmon: wait failed; err == %d\n", GetLastError()); <br>            exit(1); <br> <br>        } else { <br> <br>            if (LastPid != *pThisPid) { <br>                LastPid = *pThisPid; <br>                if (!DidCR) { <br>                    putchar('\n'); <br>                    DidCR = TRUE; <br>                } <br>            } <br> <br>            if (DidCR) { <br>                printf("%3u: ", LastPid); <br>            } <br> <br>            printf("%s", String); <br>            DidCR = (*String &amp;&amp; (String[strlen(String) - 1] == '\n')); <br>            SetEvent(AckEvent); <br> <br>        } <br> <br>    } <br> <br>    return 0; <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ANIDEFS.H</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context5384"></a>ANIDEFS.H</h2>
<pre><code>/* <br> * Common includes <br> * <br> */ <br>#include "anicur.h" <br>#include "anidlgs.h" <br>#include "animsg.h" <br> <br>/* <br> * Constants <br> * <br> */ <br>#define CMS_WAIT_FOR_PROCESS    (60 * 1000) // one minute <br> <br>#define AIM_PROCESSTERM         (WM_USER + 0x0FFF) <br>#define AIM_SETCHILDAPP         (AIM_PROCESSTERM + 1) <br> <br>#define CCH_TITLE    80 <br>#define CCH_CREATOR  80 <br>#define CCH_JIF      10         /* Numbers are small even in German! */ <br> <br>#define CTRL_C  (TEXT(('C' - 'A') + 1)) <br>#define CTRL_V  (TEXT(('V' - 'A') + 1)) <br>#define CTRL_X  (TEXT(('X' - 'A') + 1)) <br> <br>#define TITL_ERROR  (DWORD)(-1) <br>#define szPREVIEW   TEXT("AniEditPreviewClass") <br>#define szBNTBAR    TEXT("AniEditBtnBarClass") <br> <br> <br>#define PM_NEWCURSOR            (WM_USER + 0x4a50) <br>#define PM_PAUSEANIMATION       (PM_NEWCURSOR + 1) <br>#define PM_UNPAUSEANIMATION     (PM_NEWCURSOR + 2) <br>#define PM_SETSTEP              (PM_NEWCURSOR + 3) <br> <br>#define ID_PREVIEWTIMER         (0x0050) <br> <br>#define MULTISEL        1       /* listbox is mutliple selction */ <br> <br>/* <br> * Structure defintions <br> * <br> */ <br>typedef struct _FRAME *PFRAME; <br> <br>typedef struct _FRAME { <br>    int         cRef;           /* refrence count */ <br>    int         iFrame; <br>    PFRAME      pfrmNext; <br>    DWORD       dwCheckSum;     /* checksum of the icon data.  Used to <br>                                 * compare new imported icons against existing <br>                                 * ones to see if we can sequence them. <br>                                 */ <br>    HICON       hcur;           /* icon representation of raw data below */ <br>    WORD        xHotSpot; <br>    WORD        yHotSpot; <br>    RTAG        rtag;           /* icon chunk as it appears in file */ <br>    BYTE        abIcon[1]; <br>} FRAME; <br> <br> <br>typedef struct _STEP *PSTEP; <br> <br>typedef struct _STEP { <br>    JIF     jif; <br>    PFRAME  pfrmFrame; <br>} STEP; <br> <br>typedef struct _THDDATA { <br>    HWND    hwndCaller; <br>    HWND    hwndMonitor; <br>    HANDLE  hprocMonitor; <br>} THDDATA, *PTHDDATA; <br> <br>typedef struct _ANICUR { <br>    ANIHEADER anih; <br>    BOOL      fDirty; <br>    CHAR      azTitle[CCH_TITLE]; <br>    CHAR      azCreator[CCH_CREATOR]; <br>    TCHAR     szFile[MAX_PATH]; <br>} ANICUR; <br> <br> <br>typedef struct _CLPBRDDAT *PCLPBRDDAT; <br> <br>typedef struct _CLPBRDDAT { <br>    PCLPBRDDAT pcbdNext; <br>    STEP    stp; <br>} CLPBRDDAT; <br> <br>// <br>// Structure that contains data used within a preview window.  This <br>// data is unique for each preview window, and is used to optimize <br>// the painting. <br>// <br>typedef struct <br>{ <br>    HDC hdcMem; <br>    HBITMAP hbmMem; <br>    HBITMAP hbmOld; <br>    HICON   hcur; <br>    DWORD   iFrame; <br>    WORD    xHot; <br>    WORD    yHot; <br>} PREVIEWDATA, *PPREVIEWDATA; <br> <br>typedef struct { <br>    int id; <br>    int idSys; <br>} RADIOCOLOR; <br> <br>/* <br> * Header of the resource file in the new format <br> */ <br>#pragma pack(2) <br>typedef struct tagNEWHEADER { <br>    WORD reserved; <br>    WORD rt; <br>    WORD cResources; <br>} NEWHEADER, *LPNEWHEADER; <br> <br>typedef struct tagICONDIR { <br>    BYTE Width;            /* 16, 32, 64 */ <br>    BYTE Height;           /* 16, 32, 64 */ <br>    BYTE ColorCount;       /* 2, 8, 16 */ <br>    BYTE reserved; <br>} ICONDIR; <br> <br>typedef struct tagCURSORDIR { <br>    WORD Width; <br>    WORD Height; <br>} CURSORDIR; <br> <br>typedef struct tagRESDIR { <br>    union { <br>        ICONDIR Icon; <br>        CURSORDIR Cursor; <br>    } ResInfo; <br> <br>    WORD Planes; <br>    WORD BitCount; <br>    DWORD BytesInRes; <br>    WORD idIcon; <br>} RESDIR; <br>typedef RESDIR *LPRESDIR; <br> <br>typedef struct _ICONFILERESDIR {    // ird <br>    BYTE bWidth; <br>    BYTE bHeight; <br>    BYTE bColorCount; <br>    BYTE bReserved; <br>    WORD xHotspot; <br>    WORD yHotspot; <br>    DWORD dwDIBSize; <br>    DWORD dwDIBOffset; <br>} ICONFILERESDIR; <br> <br>typedef struct tagCURSORRESOURCE { <br>    WORD xHotspot; <br>    WORD yHotspot; <br>    BITMAPINFOHEADER bih; <br>} CURSORRESOURCE, *PCURSORRESOURCE; <br>#pragma pack() <br> <br> <br>/* <br> * Globals <br> * <br> */ <br>extern HANDLE hInst; <br>extern HWND ghwndMain; <br>extern HWND ghwndLB; <br>extern int gcyCursor, gcxCursor; <br>extern HBRUSH ghbrHighlight, ghbrWindow, ghbrPrevBackgnd; <br>extern COLORREF gcrHighlightText; <br>extern ANICUR ganiAcon; <br>extern TCHAR gszTempFile[]; <br>extern BOOL gfEditFrame; <br>extern TCHAR gszWindowTitle[]; <br>extern TCHAR gszDots[]; <br>extern PFRAME   gpfrmFrames; <br>extern PCLPBRDDAT gpbdClipBoard; <br>extern TCHAR gszCursorEditor[MAX_PATH]; <br>extern int giradColor; <br>RADIOCOLOR garadColor[]; <br> <br>/* <br> * String table pointers <br> */ <br>extern LPTSTR gpszAniFilter; <br>extern LPTSTR gpszImagEdit; <br>extern LPTSTR gpszCUR; <br>extern LPTSTR gpszANI; <br>extern LPTSTR gpszUnknownError; <br>extern LPTSTR gpszCurFilter; <br>extern LPTSTR gpszUntitled; <br>extern LPTSTR gpszImport; <br> <br>/* <br> * Macros <br> * <br> */ <br>#if 0 <br>#   include &lt;stdio.h&gt; <br>#   define DPRINT(p)   if(1){ printf p; fflush(stdout); } else <br>#else <br>#   define DPRINT(p) <br>#endif <br> <br> <br>#define WRITEME(hwnd)       \ <br>            MessageBox(hwnd, "This function is not yet implemented",    \ <br>            NULL, MB_OK | MB_ICONSTOP) <br> <br>#define FALLTHRU(label) <br> <br>#define COUNTOF(sz)     (sizeof(sz) / sizeof((sz)[0])) <br> <br>#define FreeMem(pv)     LocalFree((HLOCAL)pv) <br> <br>#define IsValidPS(ps)   (((ps) != (PSTEP)LB_ERR) &amp;&amp; ((ps) != NULL)) <br> <br> <br>#define PADUP(cb)       (((cb) + 1) &amp; ~1) <br>#define RET_CLOSE_IF_ERR( func, hf )  \ <br>        if( !func ) {CloseHandle(hf); return FALSE;} else <br> <br>#define GetStep(hwnd, iSel) (PSTEP)SendDlgItemMessage(hwnd, \ <br>        DLG_MAIN_FRAMELIST, LB_GETITEMDATA, iSel, 0) <br> <br>#define GetStepCount(hwnd) SendDlgItemMessage(hwnd, \ <br>        DLG_MAIN_FRAMELIST, LB_GETCOUNT, 0, 0) <br> <br>#define GetSelStepCount(hwnd) SendDlgItemMessage(hwnd, \ <br>        DLG_MAIN_FRAMELIST, LB_GETSELCOUNT, 0, 0) <br> <br>#define ResumePreview(hwnd, id) \ <br>    SendDlgItemMessage(hwnd, id, PM_UNPAUSEANIMATION, 0, 0) <br> <br>#define PausePreview(hwnd, id) \ <br>    SendDlgItemMessage(hwnd, id, PM_PAUSEANIMATION, 0, 0) <br> <br>#define SetPreviewStep(hwnd, id, iStep) \ <br>    SendDlgItemMessage(hwnd, id, PM_SETSTEP, iStep, 0) <br> <br>#define PreviewCursor(hwnd, id) \ <br>    SendDlgItemMessage(hwnd, id, PM_NEWCURSOR, 0, 0) <br> <br>#define FmtFree( psz ) if((psz) != gszDots) LocalFree(psz); else <br> <br>#define UpdateStepSel( hWnd )                                    \ <br>    SendMessage(hWnd, WM_COMMAND, MAKEWPARAM( DLG_MAIN_FRAMELIST, \ <br>            LBN_SELCHANGE), (LPARAM)(GetDlgItem(hWnd,             \ <br>            DLG_MAIN_FRAMELIST))) <br> <br>#define SetStepSel(hWnd, iMin, iMax)    (               \ <br>    SendDlgItemMessage(hWnd, DLG_MAIN_FRAMELIST,        \ <br>            LB_SELITEMRANGE, TRUE, MAKELPARAM((iMin), (iMax))), \ <br>    UpdateStepSel(hWnd)                                 \ <br>) <br> <br> <br>/* <br> * Function Prototypes <br> * <br> */ <br> <br>/* <br> * In aniedit.c <br> */ <br>BOOL InitApplication(HANDLE); <br>BOOL InitInstance(HANDLE, int); <br>INT  APIENTRY GetHeightFromPoints( int pts); <br>BOOL APIENTRY MainWndProc(HWND hWnd, UINT message, UINT wParam, LONG lParam); <br>void DrawCursorListItem( DRAWITEMSTRUCT *pdis ); <br>int FmtMessageBox( HWND hwnd, DWORD dwTitleID, LPTSTR pszTitleStr, <br>    UINT fuStyle, BOOL fSound, DWORD dwTextID, ... ); <br>LPTSTR FmtSprintf( DWORD id, ... ); <br>PVOID AllocMem( DWORD cb ); <br>LRESULT CALLBACK PreviewWndProc( HWND hwnd, UINT msg, WPARAM wParam, <br>        LPARAM lParam ); <br>VOID NextFrame( HWND hwnd, BOOL fRun ); <br>VOID SetWindowFileTitle(HWND hWnd, LPTSTR szFileTitle); <br>void AniAddFontModule(HINSTANCE hInst); <br>VOID ReadRegistry( VOID ); <br>VOID WriteRegistry( VOID ); <br>LRESULT CALLBACK BtnBarWndProc( HWND hwnd, UINT msg, WPARAM wParam, <br>        LPARAM lParam); <br>#ifdef DBCS <br>BOOL LoadResourceStr( VOID ); <br>#endif <br> <br> <br>/* <br> * In anicmd.c <br> */ <br>void LoadAniFile(HWND hWnd, HANDLE hfCursor, LPTSTR szFileTitle, LPTSTR szFile); <br>BOOL DoCommand( HWND hWnd, UINT wParam, LONG lParam ); <br>VOID ExitCommand(HWND hWnd); <br>BOOL CheckDirty(HWND hWnd); <br>void NewAniCursor( HWND hwnd ); <br>BOOL ExecProgram( HWND hwndCaller, LPTSTR pszCmdLine ); <br>BOOL GetCurrentSel( HWND hwnd, int id, int *paiSel, int ciSel, int *pcSel ); <br>VOID SetCurrentSel( HWND hwnd, int id, BOOL fExtend, int iSel); <br>VOID EditFrame(HWND hWnd, BOOL fEditFrame); <br>PSTEP NewStep( void ); <br>VOID DestroyStep( PSTEP ps ); <br>VOID CopyStep( PSTEP psDst, PSTEP psSrc ); <br>VOID LinkStepFrame(PSTEP ps, PFRAME pf ); <br>VOID DestroyFrame( PFRAME pf ); <br>PCLPBRDDAT NewClpBrdDat( void ); <br>VOID DestroyClpBrdDat(PCLPBRDDAT pcbd); <br>int __cdecl RevCompInts(const void *elm1, const void *elm2); <br>BOOL APIENTRY About(HWND, UINT, UINT, LONG); <br>BOOL APIENTRY OptionsProc( HWND hDlg, UINT message, UINT wParam, LONG lParam); <br>void ClearStepSel( HWND hWnd ); <br> <br> <br> <br>/* <br> * In anifile.c <br> */ <br>BOOL CreateFrameFromCursorFile(HWND hwnd,  LPTSTR pszFile, BOOL fEdit); <br>HANDLE PromptAndOpenFile( HWND hwnd, DWORD  cchFileTitle, LPTSTR pszFileTitle, <br>    DWORD cchFileName, LPTSTR pszFileName, LPTSTR pszFilter); <br>BOOL PromptForFile( HWND hwnd, DWORD  cchFileTitle, LPTSTR pszFileTitle, <br>    DWORD  cchFileName, LPTSTR pszFile, LPTSTR pszFilter, LPTSTR pszDlgTitle, <br>    BOOL fSave ); <br>BOOL ReadAniFile( HWND hwnd, HANDLE hf ); <br>PFRAME ReadIconFromFile(HWND hwnd, HANDLE hf, DWORD ckSize); <br>BOOL ReadTag( HANDLE hf, PRTAG ptag); <br>BOOL ReadChunk( HANDLE hf, PRTAG ptag, PVOID pv); <br>BOOL ReadChunkN( HANDLE hf, PRTAG ptag, PVOID pv, DWORD cbMax); <br>BOOL SkipChunk( HANDLE hf, PRTAG ptag); <br>DWORD CalcCheckSum( PBYTE pb, DWORD cb ); <br>HICON ConvertDataToIcon( PFRAME pf, WORD *pxHotSave, WORD *pyHotSave ); <br>BOOL GetTempCursorFileName( LPTSTR pszName ); <br>BOOL SaveAniFile( HWND hwnd, HANDLE hf ); <br>BOOL WriteTag(HANDLE hf, PRTAG prtag); <br>BOOL WriteType(HANDLE hf, FOURCC ckID ); <br>BOOL WriteTagData(HANDLE hf, PRTAG prtag, VOID *pvData ); <br>VOID SaveFile(HWND hwnd, BOOL fPrompt); </code></pre>
<p>&nbsp;</p></body>
</HTML>

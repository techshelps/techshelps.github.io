<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IExchExtCallback::GetVersion</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_iexchextcallback_getversion"></a>IExchExtCallback::GetVersion</h2>
<p>
Returns the version number of the Microsoft Exchange client. </p>
<h4>Quick Info</h4>
<p>
See <a href="ref-c01k_62lq.htm"><b>IExchExtCallback : IUnknown</b></a>.</p>
<pre><code><b>HRESULT GetVersion(
  ULONG FAR *</b><i> lpulVersion</i><b>,</b>   
<b>  ULONG</b><i> ulFlags              </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>lpulVersion</i></dt>
<dd>
[out] Pointer to the location where the version of Microsoft Exchange is returned. The format of the returned version is determined by the value of the <i>ulFlags </i>parameter. </dd>
<dt>
<i>ulFlags</i></dt>
<dd>
[in] Bitmask of flags used to specify the type and format of the version information that is returned. These flags can have the following values:
<dl>
<dt>
EECBGV_GETBUILDVERSION </dt>
<dd>
Requests that the major version is returned in the HIWORD and the minor version in the LOWORD. Extension objects should verify that the major version matches the EECBGV_BUILDVERSION_MAJOR with which they were compiled, and that the minor version is at least the minor version with which the extension object was tested.</dd>
<dt>
EECBGV_GETACTUALVERSION </dt>
<dd>
Requests that the version returned corresponds to the actual version of the calling client.</dd>
<dt>
EECBGV_GETVIRTUALVERSION</dt>
<dd>
Requests that the version returned is the version which the client wants the extension to base its decisions on. For example, if an application named Zippypost 5.0 implements Microsoft Exchange extensibility to exactly match that implemented in Microsoft Exchange, the actual version would be Zippypost 5.0 but the virtual version would be Microsoft Exchange.
</dd>
</dl>
</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
S_OK</dt>
<dd>
No error occurred.
</dd>
</dl>
<h4>Remarks</h4>
<p>
Extension objects should test against the virtual version and should reserve actual version checking for determination of additional features specific to a particular kind of client or version.</p>
<p>
The actual and virtual versions are made up of four bytes, which represent in order from most significant to least the product, the platform, the major version, and the minor version. For example, Microsoft Exchange 4.0 for Microsoft® Windows NT® operating system is 0x01030400. Microsoft Exchange for the Macintosh would be 0x0104052A. Zippypost 3.2 for Microsoft® Windows® operating system (version 3.1) might be 0x13010320.</p>
<h4>See Also</h4>
<p>
<a href="ref-c01k_5qss.htm"><b>IExchExt::Install</b></a></p>
<p>&nbsp;</p></body>
</HTML>

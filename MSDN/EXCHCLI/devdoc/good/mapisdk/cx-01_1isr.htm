<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How Extensions Work</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_mapi1book_how_extensions_work"></a>How Extensions Work</h1>
<p>
When Microsoft Exchange is started on 16-bit versions of Windows, it reads a list of extensions from the .INI file. On 32-bit Windows NT or Windows 95, each extension registers a DLL name, an ordinal, and a map indicating in which contexts it wants to be called in the registry database. Next, it activates all the extensions that are registered to participate within the EECONTEXT_TASK context. Later, extensions that participate in other contexts are activated as needed when those contexts become current. </p>
<p>
After Microsoft Exchange and its initial extensions have been loaded into memory, the interaction between Microsoft Exchange and its extensions is determined mostly by the user's interaction with Microsoft Exchange, but it can also be determined by events such as the arrival of a new message. </p>
<p>
The following steps give an overview of how Microsoft Exchange interacts with its extensions:
<ol>
<li>
A context activation occurs.</li>
<li>
In the order in which they are listed in the .INI file or registry, Microsoft Exchange invokes the <a href="ref-c01k_5qss.htm"><b>IExchExt::Install</b></a> method on each extension object that has registered to participate in the new context. One of the parameters passed to each extension through <b>Install</b> is a pointer to a callback object that supports the <a href="ref-c01k_62lq.htm"><b>IExchExtCallback : IUnknown</b></a> interface.</li>
<li>
Each extension that was called in step 2 uses <b>IExchExtCallback</b> to retrieve information about the environment, including the active menu, the active toolbar, the number of objects selected in the current window, and the entry identifier of the selected item. Extensions can also use MAPI and Windows API functions to retrieve information. Extensions use this information to determine if they will participate in the new context.</li>
<li>
If an extension determines that it will participate in the context, it will return S_OK from <b>IExchExt::Install</b>. For example, an extension might need to participate in a context only if a certain folder is open. Otherwise, it returns S_FALSE.</li>
<li>
In the order in which they are listed in the .INI file or registry, Microsoft Exchange invokes appropriate methods on all extensions that returned S_OK. The methods that are invoked depend on the context. For example, if the context is EECONTEXT_SENDNOTEMESSAGE, Microsoft Exchange first invokes the <a href="ref-c01k_5uur.htm"><b>IExchExtCommands::InstallCommands</b></a> method on all extensions that are registered to participate in this context and which implement the <b>IExchExtCommands : IUnknown</b> interface. Extensions can then add menu items to an existing menu and enable or disable them using Windows API calls.</li>
</ol>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Implementing Property Sheet Extensions</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_implementing_property_sheet_extensions"></a>Implementing Property Sheet Extensions</h2>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To implement a property sheet extension </h5>
<ol>
<li>
Create a single DLL that contains one or more extension objects.</li>
<li>
Implement the following interfaces:  <ul>
<li>
<a href="ref-c01k_2p4e.htm"><b>IExchExt</b></a><b> </b></li>
<li>
<a href="ref-c01k_37la.htm"><b>IExchExtPropertySheets</b></a></li>
</ul>
</li>
<li>
Register for the appropriate context by placing an entry in the EXCHNG.INI file on 16-bit versions of Microsoft Windows or in the registry on Windows NT or Windows 95.</li>
</ol>
<p>
Property sheet extensions enable you to add custom property sheet pages for information stores, folders, and messages. These pages can be added to property sheets that are displayed in a variety of contexts. For example, you can add a page to the folder property sheet that is displayed when a user chooses the <b>Properties</b> command from the <b>File</b> menu in the main Viewer window when a folder is selected.</p>
<p>
Property sheet extensions are useful for displaying custom properties for messages of a particular message class or for adding your own Microsoft Exchange options. For example, if you wrote an application that created and managed a specific public folder, you could add a property sheet page that would enable users to set various application-specific properties for the folder.</p>
<p>
The sequence of events that should occur when Microsoft Exchange interacts with your extension object to install and use custom property sheet pages is as follows:
<ol>
<li>
When the user chooses <b>Properties</b> from the <b>File</b> menu to view the property sheet, Microsoft Exchange sequentially calls the <a href="ref-c01k_5qss.htm"><b>IExchExt::Install</b></a> method on all extensions registered to participate in the EECONTEXT_PROPERTYSHEETS context and passes each extension a pointer to an <a href="ref-c01k_62lq.htm"><b>IExchExtCallback</b></a> interface. These extensions, along with extensions that have registered for the context in which the property sheet is displayed, will be called to add property sheet pages. For example, if a property sheet is displayed in the Viewer window, extensions registered for the EECONTEXT_PROPERTYSHEETS or EECONTEXT_VIEWER context will be called.</li>
<li>
Microsoft Exchange calls the <a href="ref-c01k_4qk4.htm"><b>IExchExtPropertySheets::GetMaxPageCount</b></a> method on each extension that returned S_OK from <b>Install</b>. This enables Microsoft Exchange to allocate sufficient memory for the property sheet page array.</li>
<li>
When Microsoft Exchange is ready to build the property sheet, it calls the <a href="ref-c01k_12nn.htm"><b>IExchExtPropertySheets::GetPages</b></a> method so that the extension can specify a pointer to the pages it will append. <b>GetPages</b> is called immediately before the property sheet is displayed and enables the extension to fill in the pages it wants appended to the Microsoft Exchange <b>Properties</b> dialog box. The standard Microsoft Exchange pages are added first, followed by pages from each extension in the order the extensions are installed. <b>GetPages</b> uses the <a href="ref-c01k_49tg.htm"><b>IExchExtCallback::GetObject</b></a> method to retrieve the object for which the information should be displayed and the store which contains that object. The extension must use the standard property sheet structures specified by the Windows API. One of the parameters passed to the extension in <b>GetPages</b> is the type of property sheet being displayed — for example, message, folder, or store property sheet.</li>
<li>
When the user closes the property sheet, Microsoft Exchange calls the <a href="ref-c01k_28tv.htm"><b>IExchExtPropertySheets::FreePages</b></a> method which instructs the extension to free any resources associated with the property sheet pages that were specified in <b>GetPages</b>.</li>
</ol>
<p>
The following table summarizes the interaction between a user, Microsoft Exchange and an extension object when a custom property sheet is being added to the Microsoft Exchange client. It also shows which component — the Microsoft Exchange client or the extension — performs the step and in the case of the extension, what method is invoked. To simplify this table, the installation of command extensions is not included. Command extensions are called in the context of a user choosing the <b>Properties</b> command from the <b>File</b> menu.</p>
<p>
<img src="images/cx02f04.gif" border=0></p>
<p>&nbsp;</p></body>
</HTML>

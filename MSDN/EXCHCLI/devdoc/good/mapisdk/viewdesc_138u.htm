<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Reading a View's Row Restriction</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mapi1book_reading_a_views_row_restriction"></a>Reading a View's Row Restriction</h2>
<p>
The following steps are necessary to read in the view's row restriction. The restriction's data in the two streams comes immediately after the <a href="viewdesc_09wk.htm"><b>VCD</b></a> structures. Therefore, the <b>VCD</b> structures must be read before the restriction.
<ol>
<li>
Declare a pointer to an <b>SRestriction</b> (<i>presRoot</i>) to retain the root level of the restriction. Set the pointer to NULL.</li>
<li>
Read the restriction's main data structure into a temporary <b>SRestriction</b> (<i>resT</i>) by reading <b>sizeof</b> (<b>SRestriction</b>) bytes into this structure from the binary stream.</li>
<li>
Allocate <b>sizeof</b> (<b>SRestriction</b>) bytes for another <b>SRestriction</b> (<i>pres</i>) by either calling the MAPI function <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_mapi1book_mapiallocatebuffer">
</object><a href=JavaScript:alink_1.Click()><b>MAPIAllocateBuffer</b></a> or <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_mapi1book_mapiallocatemore">
</object><a href=JavaScript:alink_2.Click()><b>MAPIAllocateMore</b></a>, depending on whether <i>presRoot</i> has previously been allocated.</li>
<li>
Set a variable (<i>ppres</i>) to point to this block of memory.</li>
<li>
Set <i>pres</i>-&gt;<i>rt</i> to resT-&gt;<i>rt</i> and then do the following:</li>
<li>
Allocate a property value pointer: LPSPropValue * <i>ppval.</i></li>
</ol>
<p>
Depending on the value for the restriction type (<i>rt</i>), process as follows:</p>
<pre><code>switch (<i>pres</i>-&gt;<i>rt</i>)  

case <b>RES_CONTENT</b>:
<i>ppval</i> = &amp;<i>pres</i>-&gt;res.resContent.lpProp 
//Read the property values from the streams.//
break;

case <b>RES_PROPERTY</b>:
<i>ppval</i> = &amp;<i>pres</i>-&gt;res.resProperty.lpProp
//Read the property values from the streams.//
break;

case <b>RES_SUBRESTRICTION</b>:
<i>ppres</i> = <i>&amp;pres</i>-&gt;res.resSub.lpRes;
*<i>ppres</i> = NULL;   
//Forces the following recursive call to allocate memory for <i>ppres</i>.//
//Call to step 2 to read the subrestriction.//
//Then, <i>ppres</i> should be passed in to point to the next restriction in the stream.// 
break;

case <b>RES_NOT</b>:
<i>ppres</i> = &amp;<i>pres</i>-&gt;res.resNot.lpRes;
*<i>ppres</i> = NULL;
//Recursively call to step 2 to read the negated sub-restriction. //

case <b>RES_AND</b>:
  case <b>RES_OR</b>:
<i>ppres</i> = &amp;<i>pres</i>-&gt;res.resAnd.lpRes
//Declare an unsigned long variable: <b>ULONG</b> <i>cres//</i>
<i>cres</i> = <i>pres</i>-&gt;res.resAnd.cRes  

// Remember the number of restrictions being AND'd or OR'd. Append <i>ppres</i> onto the end of <i>presRoot</i> by calling <b>MAPIAllocateMore.</b>//

<i>presNext</i> (LPSRestriction * <i>presNext)</i>
//Point to the next restriction.//

(<i>pres</i>-&gt;res.resAnd.lpRes)

<i>presLast</i> (LPSRestriction * <i>presLast</i>) 
//Point to the last restriction. //

(<i>pres</i>-&gt;res.resAnd.lpRes)

//For each AND or OR'd restriction, recursively call to step 2 to read the AND/OR clauses. //
//Then, <i>ppresNext</i> should be passed in to point to the next restriction in the stream.//

case <b>RES_COMMENT</b>:
//Read the property values from the stream into <i>pres</i>.//
<i>pres</i>-&gt;res.resComment.lpRes = NULL
//To force the recursive call below to allocate memory for <i>pres</i>. This pointer was saved but is no longer valid.//

<i>pres</i>-&gt;res.resComment.cValues = resT -&gt;res.resComment.cValues
<i>pres</i>-&gt;res.resComment.lpRes = resT -&gt;res.resComment.lpRes
<i>pres</i>-&gt;res.resComment.lpProp = resT-&gt;res.resComment.lpProp

//Recursively call to step 2 to read the sub-restriction. //

<i>pres</i>-&gt;res.resComment.lpRes 

//Then, <i>ppresNext</i> should be passed in to point to the next restriction in the stream.//</code></pre>
<p>
At the end of this algorithm, the restriction has been read completely.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Extension Interfaces</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_extension_interfaces"></a>Extension Interfaces</h2>
<p>
To implement any of the extension types supported by Microsoft Exchange, you create a single dynamic link library (DLL) that contains one or more extension object. An extension object complies with the Microsoft Windows Component Object Model and implements a set of Microsoft Exchange extensibility interfaces. Each extension type has more than one interface associated with it, but some of these interfaces are optional.</p>
<p>
If you implement an interface, you must implement all of its methods, even if your extension does not use them. For those methods that your extension doesn't use, a default response can usually be implemented with little effort. All extension objects must implement the <a href="ref-c01k_2p4e.htm"><b>IExchExt : IUnknown</b></a> interface.</p>
<p>
The interaction between Microsoft Exchange and an extension object is bidirectional and involves more than simply calling an extension object's methods. To operate correctly, extension objects must gather information about the version of Microsoft Exchange, the MAPI session, and menu, toolbar and window handles. In most cases, they must also retrieve information from Microsoft Exchange about which objects, such as messages and folders, are currently selected within Microsoft Exchange windows. Retrieving this information is achieved with the <a href="ref-c01k_62lq.htm"><b>IExchExtCallback : IUnknown</b></a> interface, which is passed to many extension object methods.</p>
<p>
The following are the four types of extensions and the corresponding interfaces:</p>
<table cellspacing=4 cols=4 width=478>
<tr valign=top>
<th align=left width=26%>Extension type</th>
<th align=left colspan=2 width=71%>Interfaces to implement</th>
</tr>
<tr valign=top>
<td width=26%>Command extensions</td>
<td colspan=2 width=71%><b>IExchExt</b> (required).<p>
<b>IExchExtCommands </b>(required).</p>
<p>
<b>IExchExtUserEvents</b> (optional). Implement if you want to handle changes to the currently-selected list box item, text, or object.</p>
</td>
</tr>
<tr valign=top>
<td colspan=2 width=53%></td>
<td colspan=2 width=47%></td>
</tr>
<tr valign=top>
<td width=26%>Event extensions</td>
<td colspan=2 width=71%><b>IExchExt </b>(required).<p>
<b>IExchExtSessionEvents</b> (optional). Implement if you want to customize the behavior when new messages are delivered.</p>
<p>
<b>IExchExtUserEvents </b>(optional). Implement if you want to handle changes to the currently-selected list box item, text, or object.</p>
<p>
<b>IExchExtMessageEvents </b>(optional). Implement if you want to customize the way Microsoft Exchange manipulates messages.</p>
<p>
<b>IExchExtAttachedFileEvents</b> (optional). Implement if you want to customize the handling of message file attachments.</p>
</td>
</tr>
<tr valign=top>
<td colspan=2 width=53%></td>
<td colspan=2 width=47%></td>
</tr>
<tr valign=top>
<td width=26%>Property sheet extensions</td>
<td colspan=2 width=71%><b>IExchExt </b>(required).<p>
<b>IExchExtPropertySheets</b> (required).</p>
</td>
</tr>
<tr valign=top>
<td colspan=2 width=53%></td>
<td colspan=2 width=47%></td>
</tr>
<tr valign=top>
<td width=26%>Advanced criteria extensions</td>
<td colspan=2 width=71%><b>IExchExt </b>(required).<p>
<b>IExchExtAdvancedCriteria</b> (required).</p>
</td>
</tr>
</table><br>
<p>&nbsp;</p></body>
</HTML>

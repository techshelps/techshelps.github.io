<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Implementing Command Extensions</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_implementing_command_extensions"></a>Implementing Command Extensions</h2>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To implement a command extension</h5>
<ol>
<li>
Create a DLL that contains one or more extension objects.</li>
<li>
Implement the following interfaces as noted:<ul>
<li>
<a href="ref-c01k_2p4e.htm"><b>IExchExt</b></a> is required.</li>
<li>
<a href="ref-c01k_15bi.htm"><b>IExchExtCommands</b></a> is required.</li>
<li>
<a href="ref-c01k_8ka6.htm"><b>IExchExtUserEvents</b></a> if you want to handle changes to the currently-selected list box item, text, or object. </li>
</ul>
</li>
<li>
Register for the EECONTEXT_SENDNOTEMESSAGE context by placing an entry in the EXCHNG.INI file on 16-bit versions of Microsoft Windows or in the registry on Windows NT or Windows 95.</li>
</ol>
<p>
The sequence of events that should occur when Microsoft Exchange interacts with your extension object, to add new commands to the menu bar or new toolbar buttons in the EECONTEXT_SENDNOTEMESSAGE context, is as follows:
<ol>
<li>
When the standard send form is activated, but not yet displayed, the Microsoft Exchange client calls the <a href="ref-c01k_5qss.htm"><b>IExchExt::Install</b></a> method on all extensions registered to participate in that context and passes each extension a pointer to an <a href="ref-c01k_62lq.htm"><b>IExchExtCallback</b></a> interface along with the active context, which in this case is EECONTEXT_SENDNOTEMESSAGE.</li>
<li>
All extensions that are registered to participate in the EECONTEXT_SENDNOTEMESSAGE context and have determined they will participate return S_OK to Microsoft Exchange.</li>
<li>
After the New Message window is created, Microsoft Exchange invokes the <a href="ref-c01k_5uur.htm"><b>IExchExtCommands::InstallCommands</b></a> method on all extension objects that returned S_OK to <a href="ref-c01k_5qss.htm"><b>IExchExt::Install</b></a>. These extension objects then add their menu commands or toolbar buttons to the New Message window using Windows API calls for adding menu commands and toolbar buttons. After the commands and buttons are added, Microsoft Exchange displays the New Message window, and the new commands are available to the user.</li>
<li>
As the user interacts with the New Message window, Microsoft Exchange will frequently receive WM_INITMENU messages. Each time this happens, Microsoft Exchange calls the <a href="ref-c01k_2rqt.htm"><b>IExchExtCommands::InitMenu</b></a> method for each extension to give that extension an opportunity to enable, disable, or update its menu items before they are seen by the user. Microsoft Exchange then calls the <a href="ref-c01k_7ffz.htm"><b>IExchExtCommands::QueryButtonInfo</b></a> method for both standard Microsoft Exchange toolbar buttons and any buttons installed by extensions.</li>
<li>
When the user chooses a menu command or a toolbar button, the window receives a WM_COMMAND message with the command identifier of the menu item or toolbar button that was selected. Microsoft Exchange sequentially calls the <a href="ref-c01k_09yc.htm"><b>IExchExtCommands::DoCommand</b></a> method on all extensions that have registered for that context and have implemented the <a href="ref-c01k_15bi.htm"><b>IExchExtCommands : IUnknown</b></a><b> </b>interface, passing the command identifier as an argument. Even native Microsoft Exchange commands are passed to the extensions, enabling them to replace or enhance these native commands. When an extension is called, it examines the command identifier and determines if it should handle that command. If an extension isn't programmed to handle the command identifier, it should return S_FALSE, and Microsoft Exchange will pass the command identifier to the next extension. If an extension is programmed to handle the command, it should return S_OK. In most cases, extensions will only handle commands that they added to the menu or toolbar with the <a href="ref-c01k_5uur.htm"><b>IExchExtCommands::InstallCommands</b></a> method. If no extension handles the command, Microsoft Exchange will handle the command if it recognizes it. If Microsoft Exchange does not recognize a command, it is ignored.</li>
</ol>
<p>
The following table provides a summary of the interaction between a user, Microsoft Exchange and an extension object following a series of user actions performed by a user with a custom command. It also shows which component — Microsoft Exchange or the client extension — performs the step and in the case of the client extension, what method is invoked. </p>
<p>
<img src="images/cx02f01.gif" border=0></p>
<p>
You can install commands on the Microsoft Exchange system menu using the same general process as described in the section "Command Extensions," but instead of using the Windows <b>GetMenu</b> function, you'll use <b>GetSystemMenu</b>. Once a custom command is installed, Microsoft Exchange passes the command identifier of the system menu command to the extension when the user chooses that command. Handling system commands enables an extension to override default Microsoft Exchange behavior. For example, you might want your extension to override the system menu's <b>Close</b> command and perform a few cleanup operations before terminating the application.</p>
<p>
It is also possible to specify menu accelerators — by placing an ampersand in the command string — that can be used with menu items. These menu accelerators can be invoked by users in the usual way by pressing Alt plus the access key of the menu or command.</p>
<p>
<b>Note</b>  In accordance with standard user interface conventions, the <b>Services</b> and <b>Options</b> commands on the Microsoft Exchange <b>Tools</b> menu should remain at the bottom of the menu. If your extension adds commands to the <b>Tools</b> menu, it should add them above the Microsoft Exchange <b>Services</b> and <b>Options</b> commands.</p>
<p>&nbsp;</p></body>
</HTML>

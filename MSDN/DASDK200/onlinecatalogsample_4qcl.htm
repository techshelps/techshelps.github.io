<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>getAddress.asp Module Code</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3><a name="dasdk_onlinecatalogsample_getaddress_module"></a>getAddress.asp Module Code</h3>
<p>
The getAddress.asp module gets the customer's profile, then places output from one row of a resultset into session variables. The main steps are:
<ul type=disc>
<li>
<b>The Connection Object: Making and opening a connection</b><br><br></li>
<li>
<b>The Command Object: Specifying a query that is a stored procedure</b><br><br></li>
<li>
<b>The Parameter Object: Specifying the input parameter of a command</b><br><br></li>
<li>
<b>The Parameter Object: Assigning a value to the input parameter of a command</b><br><br></li>
<li>
<b>The Recordset Object: Creating an active connection and executing a command that returns a Recordset</b><br><br></li>
<li>
<b>The Field Object: Extracting data from a Recordset and assigning the data to session variables</b></li>
</ul>
<ol>
<li>
<b>The Connection Object: Making and opening a connection</b><p class=tl>
This application first uses the following steps to define a connection to a database by setting up a <b>Connection</b> object to reference the data source:</P><ol>
<li>
Set up the <b>Connection</b> object.<br><br></li>
<li>
Return the number of seconds to wait when creating a connection before stopping the attempt and returning an error specified in the global.asa module.<br><br></li>
<li>
Return the number of seconds to wait when executing a command before stopping the attempt and returning an error specified in the global.asa module.<br><br></li>
<li>
Specify the data source and user name to apply when opening the connection.<br><br></li>
<li>
Open the connection:</li>
</ol>
<p class=tl>
The corresponding code follows:</P><pre><code>Set connPubs = Server.CreateObject("ADODB.Connection")
connPubs.ConnectionTimeout = Session("accts_ConnectionTimeout")
connPubs.CommandTimeout = Session("accts_CommandTimeout")
connPubs.ConnectionString = "DSN=Sample;UID=sa;"
connPubs.open
</code></pre>
</li>
<li>
<b>The Command Object: Specifying a query that is a stored procedure</b><p class=tl>
After creating and opening a connection, the application sets up a <b>Command</b> by object using the following steps:</P><ol>
<li>
Set up the <b>Command</b> object.<br><br></li>
<li>
Specify the text of the command to execute.<br><br></li>
<li>
Specify that the command text is a stored procedure. </li>
</ol>
<p class=tl>
The corresponding code follows:</P><pre><code>Set cmdPubs = Server.CreateObject("ADODB.Command")cmdPubs.CommandText = "sp_get_customer_profile"
cmdPubs.CommandType = adCmdStoredProc
</code></pre>
</li>
<li>
<b>The Parameter Object: Specifying the input parameter of a command</b><p class=tl>
After creating a <b>Command </b>object, the application sets up a <b>Parameter</b> object by using the following steps:</P><ol>
<li>
Set up the <b>Parameter</b> object collection.<br><br></li>
<li>
Add the following input parameter to the collection:<p class=tl>
@ pivcEmailAddress of type Character with a size of 64</P></li>
</ol>
<p class=tl>
The corresponding code follows:</P><pre><code>set p = cmdPubs.Parameters
p.Append cmdPubs.CreateParameter("@pivcEmailAddress", adVarChar,     adParamInput, 64)
</code></pre>
</li>
<li>
<b>The Parameter Object: Assigning a value to the input parameter of a command</b><p class=tl>
The following code specifies the value to assign to the input parameter:</P><pre><code>cmdPubs("@pivcEmailAddress") = Session("cEmailAddress")
</code></pre>
</li>
<li>
<b>The Recordset Object: Creating an active connection and executing a command that returns a Recordset</b><p class=tl>
The following code specifies the connection to use and then executes the query that returns the <b>Recordset</b> object:</P><pre><code>Set cmdPubs.ActiveConnection = connPubs
set rsPubs = cmdPubs.Execute
</code></pre>
</li>
<li>
<b>The Field Object: Extracting data from a Recordset and assigning the data to session variables</b><p class=tl>
The following code extracts the values of the <b>Field </b>objects of a <b>Recordset</b>, and then stores the values in the session variables:</P><pre><code>if not rsPubs.EOF then    Session("CreditCardTypeID")        = rsPubs("CreditCardTypeID")    Session("CustomerStatus")         = rsPubs("CustomerStatus")    Session("CustomerID")             = rsPubs("CustomerID")
Session("CustomerFirstName")    = rsPubs("CustomerFirstName")
Session("CustomerLastName")        = rsPubs("CustomerLastName")
Session("eMailAddress")            = rsPubs("eMailAddress")
Session("Password")                = rsPubs("Password")
Session("CustomerAddress1")        = rsPubs("CustomerAddress1")
Session("CustomerAddress2")        = rsPubs("CustomerAddress2")
Session("CustomerCity")         = rsPubs("CustomerCity")
Session("CustomerState")         = rsPubs("CustomerState")
Session("CustomerZip")             = rsPubs("CustomerZip")
Session("CustomerPhone")         = rsPubs("CustomerPhone")
Session("CustomerFax")            = rsPubs("CustomerFax")
Session("CreditCardBankName")    = rsPubs("CreditCardBankName")
Session("CreditCardNumber")        = rsPubs("CreditCardNumber")
Session("CreditCardName")        = rsPubs("CreditCardName")
Session("CreditCardExpirationMonth")    = 
rsPubs("CreditCardExpirationMonth")    Session("CreditCardExpirationYear")    = 
rsPubs("CreditCardExpirationYear")end if</code></pre>
</li>
</ol>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Catalog.asp Module Code</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3><a name="dasdk_onlinecatalogsample_catalog_module"></a>Catalog.asp Module Code</h3>
<p>
The Catalog.asp module retrieves the list of products by using a <b>Command</b> object with a stored procedure and displays the list. The main steps are:
<ul type=disc>
<li>
<b>The Connection Object: Making and opening a connection</b><br><br></li>
<li>
<b>The Command Object: Specifying a query that is a stored procedure</b><br><br></li>
<li>
<b>The Parameter Object: Specifying the input parameters of a command</b><br><br></li>
<li>
<b>The Parameter Object: Assigning a Value to the input parameter of a command</b><br><br></li>
<li>
<b>The Recordset Object: Creating an active connection and executing a command that returns a Recordset</b><br><br></li>
<li>
<b>The Field Object: Extracting data from a Recordset, assigning the data to variables, and displaying the data </b></li>
</ul>
<ol>
<li>
<b>The Connection Object: Making and opening a connection</b><p class=tl>
This application first uses the following steps to define a connection to a database by setting up a <b>Connection</b> object to reference the data source:</P><ol>
<li>
Set up the <b>Connection</b> object.<br><br></li>
<li>
Return the number of seconds to wait when creating a connection before stopping the attempt and returning an error specified in the global.asa module.<br><br></li>
<li>
Return the number of seconds to wait when executing a command before stopping the attempt and returning an error specified in the global.asa module.<br><br></li>
<li>
Specify the data source and user name to apply when opening the connection.<br><br></li>
<li>
Open the connection. </li>
</ol>
<p class=tl>
The corresponding code follows:</P><pre><code>Set connPubs = Server.CreateObject("ADODB.Connection")
connPubs.ConnectionTimeout = Session("accts_ConnectionTimeout")
connPubs.CommandTimeout = Session("accts_CommandTimeout")
connPubs.ConnectionString = "DSN=Sample;UID=sa;"
connPubs.open
</code></pre>
</li>
<li>
<b>The Command Object: Specifying a query that is a stored procedure</b><p class=tl>
After creating and opening a connection, the application sets up a <b>Command </b>object by using the following steps:</P><ol>
<li>
Set up the <b>Command</b> object.<br><br></li>
<li>
Specify the text of the command to execute.<br><br></li>
<li>
Specify that the command text is a stored procedure. </li>
</ol>
<p class=tl>
The corresponding code follows:</P><pre><code>Set cmdPubs = Server.CreateObject("ADODB.Command")cmdPubs.CommandText = "sp_get_products_by_category"
cmdPubs.CommandType = adCmdStoredProc
</code></pre>
</li>
<li>
<b>The Parameter Object: Specifying the input parameters of a command</b><p class=tl>
After creating a <b>Command </b>object, the application sets up an input<b> Parameter</b> object using the following steps:</P><ol>
<li>
Set up the <b>Parameter</b> object collection.<br><br></li>
<li>
Adds the following input parameters to the collection:<p class=tl>
@piCategoryID of type Integer with a size of 4 </P></li>
</ol>
<p class=tl>
The corresponding code follows:</P><pre><code>set p = cmdPubs.Parameters</code></pre>
<p class=tl>
<code>p.Append cmdPubs.CreateParameter("@piCategoryID", adInteger, adParamInput, 4)</code></P></li>
<li>
<b>The Parameter Object: Assigning a value to the input parameter of a command </b><p class=tl>
The following code requests and assigns a value to the input parameter:</P><pre><code>cmdPubs("@piCategoryID") = Request("cCategoryID")
</code></pre>
</li>
<li>
<b>The Recordset Object: Creating an active connection and executing a command that returns a Recordset</b><p class=tl>
The following code specifies the connection to use and then executes the query that returns the <b>Recordset</b> object:</P><pre><code>Set cmdPubs.ActiveConnection = connPubs
set rsPubs = cmdPubs.Execute
</code></pre>
</li>
<li>
<b>The Field Object: Extracting data from a Recordset, assigning the data to variables, and displaying the data </b><p class=tl>
The following code loops through the <b>Recordset</b>, extracts the values of the <b>Field </b>objects, and displays them. The application closes the connection when it reaches the end of the <b>Recordset</b>.</P><pre><code>if rsPubs.EOF then
 &nbsp;     %&gt;
&lt;TR&gt;
&lt;TD&gt;
No items found
&lt;TD&gt;
&lt;%
else
do until rsPubs.EOF    
htmlProductID = rsPubs("ProductID")
htmlCategoryID = rsPubs("CategoryID")
htmlProductPrice = rsPubs("ProductPrice")
htmlProductName = rsPubs("ProductName")
htmlProductDescription = rsPubs("ProductDescription")
%&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A HREF="Product.asp?iProductID=&lt;% = htmlProductID %&gt;"&gt;
&lt;% = htmlProductName %&gt;&lt;/A&gt;
&lt;TD&gt;&lt;% = htmlProductPrice %&gt;
&lt;%
rsPubs.MoveNext
Loop
rsPubs.close</code></pre>
</li>
</ol>
<p>
<code>end if</code> </p>
</font></BODY>
</HTML>

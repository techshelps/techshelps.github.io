<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>setOrders.asp Module Code</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3><a name="dasdk_onlinecatalogsample_setorders_module"></a>setOrders.asp Module Code</h3>
<p>
The setOrders.asp module adds shopping cart contents to an order table by executing several commands in stored procedures over one connection that uses input and output parameters. The main steps are:
<ul type=disc>
<li>
<b>The Connection Object: Making and opening a connection</b><br><br></li>
<li>
<b>The Command Object: Specifying a query that is a stored procedure</b><br><br></li>
<li>
<b>The Parameter Object: Specifying the input and output parameters of a command</b><br><br></li>
<li>
<b>The Parameter Object: Assigning values to the input parameters of a command</b><br><br></li>
<li>
<b>The Command Object: Creating an active connection and executing a command</b><br><br></li>
<li>
<b>The Parameter Object: Assigning a value from the output parameter of a command to a session variable</b><br><br></li>
<li>
<b>Clearing the Command Object</b><br><br></li>
<li>
<b>Clearing the Parameter Object</b><br><br></li>
<li>
<b>The Command Object: Specifying a new query that is a stored procedure</b><br><br></li>
<li>
<b>The Parameter Object: Specifying the input parameters of a command</b><br><br></li>
<li>
<b>Assigning the Values of Session Variables to Temporary Variables </b><br><br></li>
<li>
<b>The Parameter Object: Assigning values to the input parameters of a command</b><br><br></li>
<li>
<b>Constructing an SQL Query from Session Variables</b><br><br></li>
<li>
<b>Executing a Command with the Connection Object</b><br><br></li>
<li>
<b>The Command Object: Creating an active connection and executing a command</b><br><br></li>
</ul>
<ol>
<li>
<b>The Connection Object: Making and opening a connection </b><p class=tl>
This application first uses the following steps to define a connection to a database by setting up a <b>Connection</b> object to reference the data source:</P><ol>
<li>
Set up the <b>Connection</b> object.<br><br></li>
<li>
Return the number of seconds to wait when creating a connection before stopping the attempt and returning an error specified in the global.asa module.<br><br></li>
<li>
Return the number of seconds to wait when executing a command before stopping the attempt and returning an error specified in the global.asa module.<br><br></li>
<li>
Specify the data source and user name to apply when opening the connection.<br><br></li>
<li>
Open the connection.</li>
</ol>
<p class=tl>
The corresponding code follows:</P><pre><code>Set connPubs = Server.CreateObject("ADODB.Connection")
connPubs.ConnectionTimeout = Session("accts_ConnectionTimeout")
connPubs.CommandTimeout = Session("accts_CommandTimeout")
connPubs.ConnectionString = "DSN=Sample;UID=sa;"
connPubs.open
</code></pre>
</li>
<li>
<b>The Command Object: Specifying a query that is a stored procedure </b><p class=tl>
After creating and opening a connection, the application sets up a <b>Command </b>object by using the following steps:</P><ol>
<li>
Set up the <b>Command</b> object.<br><br></li>
<li>
Specify the text of the command to execute.<br><br></li>
<li>
Specify that the command text is a stored procedure. </li>
</ol>
<p class=tl>
The corresponding code follows:</P><pre><code>Set cmdPubs = Server.CreateObject("ADODB.Command")cmdPubs.CommandText = " sp_add_orders_header"
cmdPubs.CommandType = adCmdStoredProc
</code></pre>
</li>
<li>
<b>The Parameter Object: Specifying the input and output parameters of a command</b><p class=tl>
After creating a <b>Command</b> object, the application sets up a <b>Parameter</b> object by using the following steps:</P><ol>
<li>
Set up the <b>Parameter</b> object collection.<br><br></li>
<li>
Add the following input parameters to the collection:<p class=tl>
@piiCustomerID of type Integer with a size of 4</P><p class=tl>
@picTotalOrderPrice of type Currency with a size of 8</P><p class=tl>
@picShippingCharges of type Currency with a size of 8</P><p class=tl>
@picSalesTax of type Currency with a size of 8</P></li>
<li>
Add the following output parameter to the collection:<p class=tl>
@poiNextOrderID of type Integer with a size of 4</P></li>
</ol>
<p class=tl>
The corresponding code follows:</P><pre><code>set p = cmdPubs.Parameters

p.Append cmdPubs.CreateParameter("@piiCustomerID",        adInteger, 
adParamInput, 4)p.Append cmdPubs.CreateParameter("@picTotalOrderPrice", adCurrency, 
adParamInput, 8)
p.Append cmdPubs.CreateParameter("@picShippingCharges", adCurrency, 
adParamInput, 8)p.Append cmdPubs.CreateParameter("@picSalesTax",        adCurrency, 
adParamInput, 8)
p.Append cmdPubs.CreateParameter("@poiNextOrderID",    adInteger, 
adParamOutput, 4)
</code></pre>
</li>
<li>
<b>The Parameter Object: Assigning values to the input parameters of a command</b><p class=tl>
The following code specifies the values to assign to the input parameters:</P><pre><code>cmdPubs("@piiCustomerID")        = Session("CustomerID")cmdPubs("@picTotalOrderPrice")    = Session("TotalOrderPrice")
cmdPubs("@picShippingCharges")    = Session("ShippingCharges")
cmdPubs("@picSalesTax")            = Session("SalesTax")
</code></pre>
</li>
<li>
<b>The Command Object: Creating an active connection and executing a command</b><p class=tl>
The following code specifies the connection to use and then executes a command:</P><pre><code>Set cmdPubs.ActiveConnection = connPubs
cmdPubs.Execute
</code></pre>
</li>
<li>
<b>The Parameter Object: Assigning a value from the output parameter of a command to a session variable</b><p class=tl>
The following code assigns the values of the output parameters to session variables:</P><pre><code>Session("OrderID") = cmdPubs("@poiNextOrderID")
</code></pre>
</li>
<li>
<b>Clearing the Command Object </b><p class=tl>
The following code clears the contents of the <b>Command </b>object:</P><pre><code>Set cmdPubs = Nothing
</code></pre>
</li>
<li>
<b>Clearing the Parameter Object </b><p class=tl>
The following code clears the contents of the <b>Parameter </b>object:</P><pre><code>Set p = Nothing
</code></pre>
</li>
<li>
<b>The Command Object: Specifying a new query that is a stored procedure </b><p class=tl>
Resets the <b>Command </b>object by using the following steps:</P><ol>
<li>
Specify the text of the command to execute.<br><br></li>
<li>
Specify that the command text is a stored procedure. </li>
</ol>
<p class=tl>
The corresponding code follows:</P><pre><code>cmdPubs.CommandText = "sp_add_order_line_item"cmdPubs.CommandType = adCmdStoredProc
</code></pre>
</li>
<li>
<b>The Parameter Object: Specifying the input parameters of a command </b><p class=tl>
After creating a <b>Command </b>object, the application sets up a <b>Parameter</b> object by using the following steps:</P><ol>
<li>
Set up the <b>Parameter</b> object collection.<br><br></li>
<li>
Add the following input parameters to the collection:<p class=tl>
@piiOrderNumber of type Integer with a size of 4</P><p class=tl>
@piiLineNumber of type Integer with a size of 4</P><p class=tl>
@piiProductID of type Integer with a size of 4</P><p class=tl>
@piiQuantity of type Integer with a size of 4</P><p class=tl>
@picPrice of type Currency with a size of 4</P></li>
</ol>
<p class=tl>
The corresponding code follows:</P><pre><code>set pp = cmdPubs.Parameterspp.Append cmdPubs.CreateParameter("@piiOrderNumber", adInteger, 
adParamInput, 4)pp.Append cmdPubs.CreateParameter("@piiLineNumber", adInteger, 
adParamInput, 4)pp.Append cmdPubs.CreateParameter("@piiProductID", adInteger, 
adParamInput, 4)pp.Append cmdPubs.CreateParameter("@piiQuantity", adInteger, 
adParamInput, 4)pp.Append cmdPubs.CreateParameter("@picPrice", adCurrency, 
adParamInput, 8)</code></pre>
</li>
<li>
<b>Assigning the Values of Session Variables to Temporary Variables</b><p class=tl>
The following code assigns the values of session variables to temporary variables:</P><pre><code>aiSKProductIDs = session("aiSKProductIDs")aiSKCategoryIDs = session("aiSKCategoryIDs")
aiSKProductQuantitys = session("aiSKProductQuantitys")
aiSKProductPrices = session("aiSKProductPrices")
acSKProductNames = session("acSKProductNames")
acSKProductDescriptions = session("acSKProductDescriptions")
</code></pre>
</li>
<li>
<b>The Parameter Object: Assigning values to the input parameters of a command </b><p class=tl>
The following code specifies the values to assign to the input parameters:</P><pre><code>cmdPubs("@piiOrderNumber") = Session("OrderID")cmdPubs("@piiLineNumber") = icmdPubs("@piiProductID") = aiSKProductIDs(i)
cmdPubs("@piiQuantity") = 1
cmdPubs("@picPrice") = aiSKProductPrices(i)
</code></pre>
</li>
<li>
<b>Constructing an SQL Query from Session Variables</b><p class=tl>
The following code constructs an SQL query:</P><pre><code>SQL = "insert OrderLineItem "SQL = SQL &amp; "values (" SQL = SQL &amp; Session("OrderID") &amp; ", " 
SQL = SQL &amp; i &amp; ", " 
SQL = SQL &amp; aiSKProductIDs(i) &amp; ", 0, " 
SQL = SQL &amp; aiSKProductQuantitys(i) &amp; ", 0, "
SQL = SQL &amp; "null, "
SQL = SQL &amp; "null, "
SQL = SQL &amp; aiSKProductPrices(i)
SQL = SQL &amp; ")"
</code></pre>
</li>
<li>
<b>Executing a Command with the Connection Object</b><p class=tl>
The following code executes a command directly through the <b>Connection </b>object:</P><pre><code>connPubs.Execute(SQL)
</code></pre>
</li>
<li>
<b>The Command Object: Creating an active connection and executing a command</b><p class=tl>
The following code specifies the connection to use and then executes a command:</P><pre><code>Set cmdPubs.ActiveConnection = connPubs
cmdPubs.Execute</code></pre>
</li>
</ol>
</font></BODY>
</HTML>

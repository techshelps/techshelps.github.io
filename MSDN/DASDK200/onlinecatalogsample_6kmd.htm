<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Status.asp Module Code</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3><a name="dasdk_onlinecatalogsample_status_module"></a>Status.asp Module Code</h3>
<p>
The Status.asp module displays the status of a customer's order by using two connections simultaneously. The main steps are:
<ul type=disc>
<li>
<b>The Connection Object: Making and opening the first connection </b><br><br></li>
<li>
<b>The Command Object: Specifying a query for the first connection</b><br><br></li>
<li>
<b>The Parameter Object: Specifying and assigning a value to the input parameter of the first command</b><br><br></li>
<li>
<b>The Command Object: Creating an active connection for the first connection</b><br><br></li>
<li>
<b>The Connection Object: Making and opening the second connection </b><br><br></li>
<li>
<b>The Command Object: Specifying a query that is a stored procedure for the second connection</b><br><br></li>
<li>
<b>The Parameter Object: Specifying the input parameter of the second command</b><br><br></li>
<li>
<b>The Recordset Object: Executing the first command that returns a Recordset</b><br><br></li>
<li>
<b>The Field Object: Extracting data from a Recordset and assigning the data to variables</b><br><br></li>
<li>
<b>The Parameter Object: Assigning a value to the input parameter of the second command</b><br><br></li>
<li>
<b>The Recordset Object: Executing the second command that returns a Recordset</b><br><br></li>
<li>
<b>The Field Object: Extracting data from a Recordset, assigning the data to variables, and displaying the data</b><br><br></li>
</ul>
<ol>
<li>
<b>The Connection Object: Making and opening the first connection </b><p class=tl>
This application uses the following steps to define the first connection to a database by setting up a <b>Connection</b> object to reference the data source:</P><ol>
<li>
Set up the <b>Connection</b> object.<br><br></li>
<li>
Return the number of seconds to wait when creating a connection before stopping the attempt and returning an error specified in the global.asa module.<br><br></li>
<li>
Return the number of seconds to wait when executing a command before stopping the attempt and returning an error specified in the global.asa module.<br><br></li>
<li>
Specify the data source and user name to apply when opening the connection.<br><br></li>
<li>
Open the connection.</li>
</ol>
<p class=tl>
The corresponding code follows:</P><pre><code>Set connOrder = Server.CreateObject("ADODB.Connection")connOrder.ConnectionTimeout = Session("accts_ConnectionTimeout")connOrder.CommandTimeout = Session("accts_CommandTimeout")
connOrder.ConnectionString = "DSN=Sample;UID=sa;"
connOrder.open</code></pre>
<p class=tl>
</P></li>
<li>
<b>The Command Object: Specifying a query for the first connection </b><p class=tl>
After creating and opening a connection, the application sets up a <b>Command </b>object by using the following steps:</P><ol>
<li>
Set up the <b>Command</b> object.<br><br></li>
<li>
Specify the text of the command to execute.<br><br></li>
<li>
Specify that the command text is text. </li>
</ol>
<p class=tl>
The corresponding code follows:</P><pre><code>Set cmdOrder = Server.CreateObject("ADODB.Command")cmdOrder.CommandText = sqlTextcmdOrder.CommandType = adCmdText
</code></pre>
</li>
<li>
<b>The Parameter Object: Specifying and assigning a value to the input parameter of the first command </b><p class=tl>
After creating a <b>Command </b>object, the application sets up a <b>Parameter</b> object using the following steps:</P><ol>
<li>
Set up the <b>Parameter</b> object collection.<br><br></li>
<li>
Add the following input parameters to the collection:<p class=tl>
@piiCustomerID of type Integer with a size of 4</P></li>
<li>
Specify the value to assign to the input parameter.</li>
</ol>
<p class=tl>
The corresponding code follows:</P><pre><code>set p = cmdOrder.Parametersp.Append cmdOrder.CreateParameter("@piiCustomerID", adInteger, 
adParamInput, 4)cmdOrder("@piiCustomerID") = Session("CustomerID")</code></pre>
</li>
<li>
<b>The Command Object: Creating an active connection for the first connection </b><p class=tl>
The following code specifies the connection to use:</P><pre><code>Set cmdOrder.ActiveConnection = connOrder
</code></pre>
</li>
<li>
<b>The Connection Object: Making and opening the second connection</b><p class=tl>
This application then uses the following steps to define the second connection to the database by setting up a <b>Connection</b> object to reference the data source:</P><ol>
<li>
Set up the <b>Connection</b> object.<br><br></li>
<li>
Return the number of seconds to wait when creating a connection before stopping the attempt and returning an error specified in the global.asa module.<br><br></li>
<li>
Return the number of seconds to wait when executing a command before stopping the attempt and returning an error specified in the global.asa module.<br><br></li>
<li>
Specify the data source and user name to apply when opening the connection.<br><br></li>
<li>
Open the connection.</li>
</ol>
<p class=tl>
The corresponding code follows:</P><pre><code>Set connLineItems = Server.CreateObject("ADODB.Connection")connLineItems.ConnectionTimeout = Session("accts_ConnectionTimeout")
connLineItems.CommandTimeout = Session("accts_CommandTimeout")
connLineItems.ConnectionString = "DSN=Sample;UID=sa;"
connLineItems.open
</code></pre>
</li>
<li>
<b>The Command Object: Specifying a query that is a stored procedure for the second connection </b><p class=tl>
After creating and opening the second connection, the application sets up a second <b>Command </b>object by using the following steps:</P><ol>
<li>
Set up the <b>Command</b> object.<br><br></li>
<li>
Specify the text of the command to execute.<br><br></li>
<li>
Specify that the command text is a stored procedure. </li>
</ol>
<p class=tl>
The corresponding code follows:</P><pre><code>set cmdLineItems = Server.CreateObject("ADODB.Command")cmdLineItems.CommandText = "sp_get_line_item_info"cmdLineItems.CommandType = adCmdStoredProc
</code></pre>
</li>
<li>
<b>The Parameter Object: Specifying the input parameter of the second command </b><p class=tl>
After creating the second <b>Command </b>object, the application sets up a <b>Parameter</b> object by using the following steps:</P><ol>
<li>
Set up the <b>Parameter</b> object collection.<br><br></li>
<li>
Add the following input parameters to the collection:<p class=tl>
@piiOrderNumber of type Integer with a size of 4</P></li>
</ol>
<p class=tl>
The corresponding code follows:</P><pre><code>set pp = cmdLineItems.Parameterspp.Append cmdLineItems.CreateParameter("@piiOrderNumber", adInteger,
 adParamInput, 4)
</code></pre>
</li>
<li>
<b>The Recordset Object: Executing the first command that returns a Recordset </b><p class=tl>
The following code executes the first query which returns the first <b>Recordset</b> object:</P><pre><code>set rsOrder = cmdOrder.Execute</code></pre>
</li>
<li>
<b>The Field Object: Extracting data from a Recordset and assigning the data to variables </b><p class=tl>
The following code extracts the values of the <b>Field </b>objects of the first <b>Recordset</b>, and then stores the values in variables:</P><pre><code>Do until rsOrder.EOF    htmlOrderNumber                = rsOrder("OrderNumber")    htmlShippingHandlingCharges = rsOrder("ShippingHandlingCharges")    htmlTotalOrderPrice            = rsOrder("TotalOrderPrice")
htmlSalesTax                = rsOrder("SalesTax")
rsOrder.MoveNext
%&gt;
</code></pre>
</li>
<li>
<b>The Parameter Object: Assigning a value to the input parameter of the second command </b><p class=tl>
The following code specifies the value to assign to the input parameters of the second command:</P><pre><code>cmdLineItems("@piiOrderNumber")    = htmlOrderNumber</code></pre>
</li>
<li>
<b>The Recordset Object: Executing the second command that returns a Recordset </b><p class=tl>
The following code executes the second query and returns the second <b>Recordset</b> object:</P><pre><code>set rs = cmdLineItems.Execute
</code></pre>
</li>
<li>
<b>The Field Object: Extracting data from a Recordset, assigning the data to variables, and displaying the data </b><p class=tl>
The following code extracts the values of the <b>Field </b>objects of the second <b>Recordset</b>, stores the values in variables, and then displays them:</P></li>
</ol>
<ul type=disc>
<li>
<pre><code>Do until rs.EOF    htmlLineNumber            = rs("LineNumber")    htmlProductName            = rs("ProductName")    htmlItemStatusDescription = rs("ItemStatusDescription")    htmlQuantity            = rs("Quantity")    htmlLineItemPrice        = rs("LineItemPrice")    rs.MoveNext    %&gt;    &lt;TR&gt;
&lt;TD WIDTH=50&gt;
&lt;TD WIDTH=75 ALIGN="right"&gt;&lt;% = htmlLineNumber %&gt;
&lt;TD WIDTH=240&gt;&lt;% = htmlProductName %&gt;
&lt;TD WIDTH=100&gt;&lt;% = htmlItemStatusDescription %&gt;
&lt;TD WIDTH=80 ALIGN="right"&gt;&lt;% = htmlQuantity %&gt;
&lt;TD WIDTH=80 ALIGN="right"&gt;&lt;% = htmlLineItemPrice %&gt;
</code></pre>
</li>
</ul>
<h3><a name="dasdk_onlinecatalogsample_customize_module"></a>Customize.asp Module Code</h3>
<p>
Sets customizable properties in the Parent Categories Stack. Uses the SHAPE Provider to get a hierarchical recordset.
<ul type=disc>
<li>
<b>The Connection Object: Making and opening the first connection that specifies the OLE DB Provider for ODBC as the data source provider</b><br><br></li>
<li>
<b>The Command Object: Specifying a query that is a stored procedure for the first connection</b><br><br></li>
<li>
<b>The Parameter Object: Specifying the input parameters of a command for the first connection</b><br><br></li>
<li>
<b>The Parameter Object: Assigning a Value to the input parameter of a command for the first connection</b><br><br></li>
<li>
<b>The Recordset Object: Creating an active connection and executing a command that returns a Recordset for the first connection</b><br><br></li>
<li>
<b>The Field Object: Extracting data from a Recordset and assigning the data to a variable</b><br><br></li>
<li>
<b>The Connection Object: Making and opening the second connection that specifies the OLE DB Provider for ODBC as the data source provider and uses a Data Shaping Provider</b><br><br></li>
<li>
<b>The Recordset Object: Create a Recordset object</b><br><br></li>
<li>
<b>Construct an SQL Query to retrieve a hierarchical recordset using the Shape Provider</b><br><br></li>
<li>
<b>The Recordset Object: Open the Connection Object and specify a query that does Data Shaping and returns a Recordset for the second connection</b><br><br></li>
<li>
<b>The Field Object: Navigate through the child Recordset, extract data from its' Fields and display it</b><br><br></li>
</ul>
<ol>
<li>
<b>The Connection Object: Making and opening a connection that specifies the OLE DB Provider for ODBC as the data source provider</b><p class=tl>
This application first defines a connection to a database by setting up a <b>Connection</b> object to reference the data source. The steps taken are:</P><ol>
<li>
Set up the <b>Connection</b> object.<br><br></li>
<li>
Return the number of seconds to wait when creating a connection before stopping the attempt and returning an error specified in the global.asa module.<br><br></li>
<li>
Return the number of seconds to wait when executing a command before stopping the attempt and returning an error specified in the global.asa module.<br><br></li>
<li>
Specify the data source provider to use, the data source, and user name to apply when opening the connection.<br><br></li>
<li>
Open the connection </li>
</ol>
<p class=tl>
The corresponding code follows:</P><pre><code>Set connCategories = Server.CreateObject("ADODB.Connection")
connCategories.ConnectionTimeout=Session("accts_ConnectionTimeout")
connCategories.CommandTimeout = Session("accts_CommandTimeout")
connCategories.ConnectionString="Data Provider=MSDASQL;DSN=Sample;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UID=sa; pwd=;"
connCategories.open 
</code></pre>
</li>
<li>
<b>The Command Object: Specifying a query that is a stored procedure for the first connection</b><p class=tl>
After creating and opening a connection, the application sets up a <b>Command </b>object by using the following steps:</P><ol>
<li>
Set up the <b>Command</b> object.<br><br></li>
<li>
Specify the text of the command to execute.<br><br></li>
<li>
Specify that the command text is a stored procedure. </li>
</ol>
<p class=tl>
The corresponding code follows:</P><pre><code>Set cmdCategories = Server.CreateObject("ADODB.Command")
cmdCategories.CommandText = "sp_get_category_stack"
cmdCategories.CommandType = adCmdStoredProc
</code></pre>
</li>
<li>
<b>The Parameter Object: Specifying the input parameters of a command for the first connection</b><p class=tl>
After creating a <b>Command </b>object, the application sets up an input<b> Parameter</b> object using the following steps:</P><ol>
<li>
Set up the <b>Parameter</b> object collection.<br><br></li>
<li>
Add the following input parameter to the collection:<p class=tl>
@<code>pi_ProductID</code> of type Integer with a size of 4 </P></li>
</ol>
<p class=tl>
The corresponding code follows:</P><pre><code>set p = cmdCategories.Parameters
p.Append cmdCategories.CreateParameter("@pii_ProductID", adInteger,
 &nbsp;&nbsp;&nbsp;&nbsp; adParamInput, 4)
</code></pre>
</li>
<li>
<b>The Parameter Object: Assigning a value to the input parameter of a command for the first connection </b><p class=tl>
The following code assigns a value to the input parameter from a session variable:</P><pre><code>cmdCategories("@pii_ProductID") = session("ProductID")
</code></pre>
</li>
<li>
<b>The Recordset Object: Creating an active connection and executing a command that returns a Recordset for the first connection</b><p class=tl>
The following code specifies the connection to use and then executes the query that returns the <b>Recordset</b> object:</P><pre><code>Set cmdCategories.ActiveConnection = connCategories
set rsCategories = cmdCategories.Execute
</code></pre>
</li>
<li>
<b>The Field Object: Extracting data from a Recordset and assigning the data to a variable </b><p class=tl>
The following code extracts the value of the <b>Field </b>object from the <b>Recordset</b>, and stores the value in a variable.</P><pre><code>iCategoryID = rsCategories("wk_category")
</code></pre>
</li>
<li>
<b>The Connection Object: Making and opening a second connection that specifies the OLE DB Provider for ODBC as the data source provider and also uses a Data Shaping provider </b><p class=tl>
This application now defines a second connection to a database by setting up a <b>Connection</b> object to reference the data source. The steps taken are:</P><ol>
<li>
Set up the <b>Connection</b> object.<br><br></li>
<li>
Return the number of seconds to wait when creating a connection before stopping the attempt and returning an error specified in the global.asa module.<br><br></li>
<li>
Return the number of seconds to wait when executing a command before stopping the attempt and returning an error specified in the global.asa module.<br><br></li>
<li>
Specify the data source provider to use, the data source, and user name to apply when opening the connection.<br><br></li>
<li>
Specify the provider supplying data shaping support to use.<br><br></li>
<li>
Open the connection </li>
</ol>
<p class=tl>
The corresponding code follows:</P><pre><code>Set connProperties = Server.CreateObject("ADODB.Connection")
connProperties.ConnectionTimeout=Session("accts_ConnectionTimeout")
connProperties.CommandTimeout = Session("accts_CommandTimeout")
connProperties.ConnectionString="Data Provider=MSDASQL; DSN=Sample; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UID=sa;pwd=;"
connProperties.Provider = "MSDataShape"
connProperties.open
</code></pre>
</li>
<li>
<b>The Recordset Object: Create a Recordset Object</b><p class=tl>
The following code creates a <b>Recordset</b> object:</P><pre><code>Set rsProperties = Server.CreateObject("ADODB.Recordset")
</code></pre>
</li>
<li>
<b>Construct an SQL Query to retrieve a hierarchical recordset using the Shape provider</b><p class=tl>
The following code uses the Shape provider to define a child <b>Recordset</b> object as the as the value of a <b>Field</b> object in a parent <b>Recordset</b>. It relates the <b>Recordset</b> objects from CategoryProperty and PropertyValue by PropertyID. It creates and appends a new column (chValues) to CategoryProperty. The steps taken are:</P><ol>
<li>
Use the Shape command with a query to return the parent <b>Recordset</b>.<br><br></li>
<li>
Use the Shape Append command with a query to return the child <b>Recordset</b>.<br><br></li>
<li>
Specify the name of the new <b>Recordset</b> and use the Shape Relate clause to specify the common field in the parent and child <b>Recordset</b>.</li>
</ol>
<p class=tl>
The corresponding code follows:</P><pre><code>strSQL =    "SHAPE {select * from CategoryProperty where CategoryID =" 
strSQL = strSQL &amp;    iCategoryID
strSQL = strSQL &amp;    " }"

strSQL = strSQL &amp;    " APPEND ({select * from PropertyValue}"

strSQL = strSQL &amp;    " AS chValues RELATE PropertyID to PropertyID)"
</code></pre>
</li>
<li>
<b>The Recordset Object: Open the Connection Object and specify a query that returns a Recordset for the second connection</b><p class=tl>
The following code specifies the connection to open, query string to use, and assigns the retrieved data to the <b>Recordset</b> object,rsProperties:</P><pre><code>rsProperties.Open strSQL, connProperties
</code></pre>
</li>
<li>
<b>The Field Object: Navigate through the child Recordset, extract data from its' Fields and display it </b><p class=tl>
The following code first loops through the Parent Recordset, retrieves the appended Recordset and assigns it to rsValues, then displays three fields (PropertyID, PropertyValue, and PropertyDescription) from each row in the appended recordset.</P><p class=tl>
The corresponding code follows:</P><pre><code>do until rsProperties.EOF
iPropertyCount = iPropertyCount + 1
htmlPropertyName = rsProperties("PropertyName")
%&gt;
&lt;TD&gt;&lt;PRE&gt;  &lt;/PRE&gt;
&lt;TD&gt;&lt;H5&gt;&lt;% = htmlPropertyName %&gt;&lt;/H5&gt;
&lt;TD VALIGN="top"&gt;
&lt;%    
%&gt;
&lt;SELECT NAME="cboPropertyString&lt;% = iPropertyCount %&gt;"&gt;
&lt;%
rsValues = rsProperties("chValues")

while not rsValues.EOF
%&gt;
&lt;OPTION VALUE="&lt;%=(rsValues("PropertyID") &amp; "&amp;#9;" &amp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; htmlPropertyName &amp; "&amp;#9;" &amp; rsValues("PropertyValue")) %&gt;"&gt;
&lt;% = rsValues("PropertyDescription") %&gt;
&lt;BR&gt;
&lt;%
rsValues.MoveNext
wend
%&gt;
&lt;/SELECT&gt;
&lt;INPUT TYPE="hidden" NAME=iPropertyID&lt;% = iPropertyCount %&gt;     VALUE=""&gt;
&lt;INPUT TYPE="hidden" NAME=iPropertyName&lt;% = iPropertyCount %&gt;     VALUE=""&gt;
&lt;INPUT TYPE="hidden" NAME=iPropertyValue&lt;% = iPropertyCount %&gt;     VALUE=""&gt;
&lt;%
rsProperties.MoveNext
Loop
rsProperties.close
rsCategories.MoveNext
Loop
rsCategories.close

</code></pre>
</li>
</ol>
</font></BODY>
</HTML>

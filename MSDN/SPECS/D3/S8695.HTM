<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Messages</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
</OBJECT></FORM>
<H2>Messages</H2><P>This chapter contains a list of the messages in the Telephony API. Messages are used to notify the application of the occurrence of asynchronous events. They come in two flavors: messages sent to the callback in interrupt context or in application thread context. When an application uses <B>lineInitialize </B>or<B> phoneInitialize</B>, it specifies a callback function and whether it wants the callback to occur in interrupt context or in the application context.</P>
<P>The callback message always contains a handle to the relevant object (phone, line or call). The parameter profile for callbacks contains a handle parameter. A handle to the relevant object (phone, line or call) is passed using this multi-purpose handle parameter. The callback function can determine the type of the handle from the message that was passed to the callback. </P>
<P>For each message, this chapter lists the following items:</P>
<P>The purpose of the message</P>
<P>A description of the message parameters</P>
<P>Optional comments about using the message</P>
<P>Optional references to other functions, messages, and data structures</P>
<P>Certain messages are used to notify the application about a change in an object's status. These messages provide the object handle and an indication of which status item has changed. The application can call the "get status" function of the object to obtain the object's full status.</P>
<P>When an event occurs, messages or callbacks may be sent to zero, one or more applications. The target applications for a message are determined by a number of different factors. Factors are: the meaning of the message, the application's privilege to the object, whether or not the app initiated the request for which the message is a direct result, and message masking set by the application.</P>
<P>Asynchronous reply messages are only sent to the application that originated the request and cannot be masked.</P>
<P>Messages that signal the completion of digit or tone generation, or the gathering of digits are only sent to the application that requested the digit or tone generation.</P>
<P>Messages that indicate line or address state changes are sent to all apps that have opened the line.</P>
<P>Messages that indicate call state and call information changes are always sent to all applications that are owners for the call, and to monitoring apps that have not masked these messages.</P>
<P>Messages that signal a digit detection, tone detection or media mode detection are sent to all apps (owners or monitors) that have not masked the event.</P>
<P>The callback procedure profile for both the line and phone abstractions is as follows:</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="74pt" VALIGN="TOP"><COL WIDTH="352pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">VOID FAR PASCAL<B> CallbackFunc</B><I>(hDevice, dwMsg, dwCallbackInstance, dwParam1, dwParam2, dwParam3)<BR></I><B>CallbackFunc</B> is a placeholder for the application-supplied function name.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">DWORD    <I>dwDevice<BR></I>Specified a handle to either a line device, phone device, or a call associated with the callback. The nature of this handle (line handle, phone handle, or call handle) can be determined by the context provided by <I>wMsg</I>.<BR>DWORD    <I>dwMsg<BR></I>Specifies a line, call, or phone device message.<BR>DWORD    <I>dwCallbackInstance<BR></I>Specifies the user instance data specified at API initialization time.<BR>DWORD    <I>dwParam1<BR></I>Specifies a parameter for the message.<BR>DWORD    <I>dwParam2<BR></I>Specifies a parameter for the message.<BR>DWORD    <I>dwParam3<BR></I>Specifies a parameter for the message.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">The actual parameters passed to the application's callback function are described as the messages in this chapter.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">All callbacks occur in the application's context. The callback function must reside in a dynamic link library (DLL) or application module and be exported in the module definition file. You must use <B>MakeProcInstance</B> to get a procedure-instance address for the callback function.</P></TD></TR></TBODY></TABLE>
<BR></P><P>LINE_ADDRESSSTATE</P>
<P>This message is sent to an application's callback when the status of an address changes on a line that is currently open by the application. The application can invoke <B>lineGetAddressStatus</B> to determine the current status of the address.</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="74pt" VALIGN="TOP"><COL WIDTH="348pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">DWORD    <I>dwDevice<BR></I>Specifies a handle to the line device.<BR>DWORD    <I>dwCallbackInstance<BR></I>Specifies the callback instance supplied when opening the line.<BR>DWORD    <I>dwParam1<BR></I>Specifies the address ID of the address that changed status.<BR>DWORD    <I>dwParam2<BR></I>Specifies the address state that changed, of type <B>LINEADDRESSSTATE</B>. Values are:<BR>LINEADDRESSSTATE_OTHER<BR>An status item or multiple items in the address' status not listed below have changed. The app should check the current address status to determine which items have changed.<BR>LINEADDRESSSTATE_DEVSPECIFIC<BR>The device specific item of the address status has changed.<BR>LINEADDRESSSTATE_INUSEZERO<BR>The address has changed to idle; i.e., it is now in use by zero stations.<BR>LINEADDRESSSTATE_INUSEONE<BR>The address has changed from being idle or from being in use by many bridged stations to being in use by just one station.<BR>LINEADDRESSSTATE_INUSEMANY<BR>The monitored or bridged address has changed to being in use by one station to being used by more than one station.<BR>LINEADDRESSSTATE_NUMCALLS<BR>The number of calls on the address has changed. This is the result of either a new inbound call, or an outbound call on the address, a call changing its hold status, etc.<BR>LINEADDRESSSTATE_FORWARD<BR>The forwarding status of the address has changed including the number of rings for determining a no answer condition. The app should check the address status to determine details about the address' current forwarding status.<BR>LINEADDRESSSTATE_TERMINALS<BR>The terminal settings for the address have changed.<BR>DWORD    <I>dwParam3<BR></I>Unused.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">This message is sent to any application that has opened the line device and that has enabled this message. The sending of this message for the various status items can be controlled and queried using <B>lineGetStatusMessages</B> and <B>lineGetStatusMessages</B>. By default, address status reporting is disabled.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineGetAddressStatus, lineGetStatusMessages, lineSetStatusMessages</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Data Types:  <B>LINEADDRESSSTATUS</B></P></TD></TR></TBODY></TABLE>
<BR></P><P>LINE_CALLINFO</P>
<P>This message is sent to an application's callback when the call information about the specified call has changed. The application can invoke <B>lineGetCallInfo</B> to determine the current call information.</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="74pt" VALIGN="TOP"><COL WIDTH="357pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">DWORD    <I>dwDevice<BR></I>Specifies a handle to the call.<BR>DWORD    <I>dwCallbackInstance<BR></I>Specifies the callback instance supplied when opening the call's line.<BR>DWORD    <I>dwParam1<BR></I>Specifies the call information item that has changed, of type <B>LINECALLINFOSTATE</B>. Values are:<BR>LINECALLINFOSTATE_OTHER<BR>An other information item in the call information not listed below has changed.<BR>LINECALLINFOSTATE_DEVSPECIFIC<BR>The device specific field of the call information record.<BR>LINECALLINFOSTATE_BEARERMODE<BR>The bearer mode field of the call information record.<BR>LINECALLINFOSTATE_RATE<BR>The rate field of the call information record.<BR>LINECALLINFOSTATE_MEDIAMODE<BR>The media mode field of the call information record.<BR>LINECALLINFOSTATE_APPSPECIFIC<BR>The app specific field of the call information record.<BR>LINECALLINFOSTATE_CALLID<BR>The call ID field of the call information record.<BR>LINECALLINFOSTATE_RELATEDCALLID<BR>The related call ID field of the call information record.<BR>LINECALLINFOSTATE_ORIGIN<BR>The origin field of the call information record.<BR>LINECALLINFOSTATE_REASON<BR>The reason field of the call information record.<BR>LINECALLINFOSTATE_COMPLETIONID<BR>The completion ID field of the call information record.<BR>LINECALLINFOSTATE_NUMOWNERINCR<BR>The number of owner field in the call information record was increased.<BR>LINECALLINFOSTATE_NUMOWNERDECR<BR>The number of owner field in the call information record was decreased.<BR>LINECALLINFOSTATE_NUMMONITORS<BR>The number of monitors field in the call information record has changed.<BR>LINECALLINFOSTATE_TRUNK<BR>The trunk field of the call information record.<BR>LINECALLINFOSTATE_CALLERID<BR>One of the callerID-related fields of the call information record.<BR>LINECALLINFOSTATE_CALLEDID<BR>One of the calledID-related fields of the call information record.<BR>LINECALLINFOSTATE_CONNECTEDID<BR>One of the cconnectedID-related fields of the call information record.<BR>LINECALLINFOSTATE_REDIRECTIONID<BR>One of the redirectionID-related fields of the call information record.<BR>LINECALLINFOSTATE_REDIRECTINGID<BR>One of the redirectingID-related fields of the call information record.<BR>LINECALLINFOSTATE_DISPLAY<BR>The display field of the call information record.<BR>LINECALLINFOSTATE_USERUSERINFO<BR>The user-to-user information of the call information record.<BR>LINECALLINFOSTATE_HIGHLEVELCOMP<BR>The high level compatibility field of the call information record.<BR>LINECALLINFOSTATE_LOWLEVELCOMP<BR>The low level compatibility field of the call information record.<BR>LINECALLINFOSTATE_CHARGINGINFO<BR>The charging information of the call information record.<BR>LINECALLINFOSTATE_TERMINAL<BR>The terminal mode information of the call information record.<BR>LINECALLINFOSTATE_DIALPARAMS<BR>The dial parameters of the call information record.<BR>LINECALLINFOSTATE_MONITORMODES<BR>One or more of the digit, tone, or media monitoring fields in the call information record.<BR>DWORD    <I>dwParam2<BR></I>Unused.<BR>DWORD    <I>dwParam3<BR></I>Unused.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">This message is sent to any application that has a valid handle for the call.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineGetCallInfo</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Data Types:  <B>LINECALLINFOSTATE</B></P></TD></TR></TBODY></TABLE>
<BR></P><P>LINE_CALLSTATE</P>
<P>This message is sent to an application's callback whenever the status of the specified call has changed. Several such messages will typically be received during the lifetime of a call. Applications are notified of new incoming calls via this message; the new call will be in the <I>offering</I> state. The app can use <B>lineGetCallStatus</B> to find out more detailed information about the current status of the call.</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="74pt" VALIGN="TOP"><COL WIDTH="357pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">DWORD    <I>dwDevice<BR></I>Specifies a handle to the call.<BR>DWORD    <I>dwCallbackInstance<BR></I>Specifies the callback instance supplied when opening the call's line.<BR>DWORD    <I>dwParam1<BR></I>Specifies the new call state, of type <B>LINECALLSTATE</B>. Values are:<BR>LINECALLSTATE_IDLE<BR>The call is idle - no call actually exists.<BR>LINECALLSTATE_OFFERING<BR>The call is being offered to the station, signaling the arrival of a  new call. In some environments, a call in the offering state does not automatically alert the user; alerting is done by the switch instructing the line to ring, it does not affect any call states.<BR>LINECALLSTATE_ACCEPTED<BR>The call was offering and has been accepted. This indicates to other (monitoring) applications that the current owner application has claimed responsibility for answering the call. In ISDN, this also indicates that alerting to both parties has started.<BR>LINECALLSTATE_DIALTONE<BR>The call is receiving a dial tone from the switch, which means that the switch is ready to receive a dialed number.<BR>LINECALLSTATE_DIALING<BR>Destination address information (a phone number) is being sent to the switch via the call.  Note that the operation <B>lineGenerateDigits</B> does not place the line into the <I>dialing</I> state.<BR>LINECALLSTATE_RINGBACK<BR>The call is receiving ringback from the called address. Ringback indicates that the other station has been reached and is being alerted.<BR>LINECALLSTATE_BUSY<BR>The call is receiving a busy tone. Busy tone indicates that the call cannot be completed - either a circuit (trunk) or the remote party's station are in use.<BR>LINECALLSTATE_SPECIALINFO<BR>Special information is sent by the network. Special information is typically sent when the destination cannot be reached. <BR>LINECALLSTATE_CONNECTED<BR>The call has been established, the connection is made. Information is able to flow over the call between the originating address and the destination address.<BR>LINECALLSTATE_PROCEEDING<BR>Dialing has completed and the call is proceeding through the switch or telephone network.<BR>LINECALLSTATE_ONHOLD<BR>The call is on hold by the switch.<BR>LINECALLSTATE_CONFERENCED<BR>The call is currently a member of a multi-party conference call.<BR>LINECALLSTATE_ONHOLDPENDCONF<BR>The call is currently on hold while it is being added to a conference.<BR>LINECALLSTATE_ONHOLDPENDTRANSF<BR>The call is currently on hold awaiting transfer to another number.<BR>LINECALLSTATE_DISCONNECTED<BR>The remote party has disconnected from the call.<BR>LINECALLSTATE_UNKNOWN<BR>The state of the call is not known. This may be due to limitations of the call progress detection implementation.<BR>DWORD    <I>dwParam2<BR></I>Specifies call state dependent information. <BR>If <I>dwParam1</I> is LINECALLSTATE_BUSY, the <I>dwParam2</I> contains the details about the busy mode, of type <B>LINEBUSYMODE</B>. Values are:<BR>LINEBUSYMODE_STATION<BR>The busy signal indicates that the called party's station is busy. This is usually signaled via a "normal" busy tone.<BR>LINEBUSYMODE_TRUNK<BR>The busy signal indicates that a trunk or circuit is busy. This is usually signaled via a "long" busy tone.<BR>LINEBUSYMODE_UNAVAIL<BR>The busy signal's specific mode is unavailable and will not become known.<BR>If <I>dwParam1</I> is LINECALLSTATE_DIALTONE, the <I>dwParam2</I> contains the details about the dialtone mode, of type <B>LINEDIALTONEMODE</B>. Values are:<BR>LINEDIALTONEMODE_NORMAL<BR>This is a "normal" dialtone which typically is a continuous tone.<BR>LINEDIALTONEMODE_SPECIAL<BR>This is a special dialtone indicating a certain condition is currently in effect.<BR>LINEDIALTONEMODE_INTERNAL<BR>This an internal (e.g., PBX) dialtone.<BR>LINEDIALTONEMODE_EXTERNAL<BR>This is an external (e.g., public network) dialtone.<BR>LINEDIALTONEMODE_UNKNOWN<BR>The dialtone mode is currently known, but may become known later.<BR>LINEDIALTONEMODE_UNAVAIL<BR>The dialtone mode is unavailable and will not become known.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">If <I>dwParam1</I> is LINECALLSTATE_SPECIALINFO, the <I>dwParam2</I> contains the details about the special info mode, of type <B>LINESPECIALINFO</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINESPECIALINFO_NOCIRCUIT<BR>This special information tone preceeds a no circuit or emergency announcement (trunk blockage category).<BR>LINESPECIALINFO_CUSTIRREG<BR>This special information tone preceeds a vacant number, AIS, Centrex number change and non-working station, access code not dialed or dialed in error, manual intercept operator message (customer irregularity category).<BR>LINESPECIALINFO_REORDER<BR>This special information tone preceeds a reorder announcement (equipment irregularity category).<BR>LINESPECIALINFO_UNKNOWN<BR>Specific about the special information tone are currently unknown but may become known later.<BR>LINESPECIALINFO_UNAVAIL<BR>Specifics about the special information tone are unavailable, and will not become known.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">If <I>dwParam1</I> is LINECALLSTATE_DISCONNECTED, the <I>dwParam2</I> contains the details about the disconnect mode, of type <B>LINEDISCONNECTMODE</B>. Values are:<BR>LINEDISCONNECTMODE_NORMAL<BR>This is a "normal" disconnect request by the remote party, the call was terminated normally.<BR>LINEDISCONNECTMODE_UNKNOWN<BR>The reason for the disconnect request is unknown.<BR>LINEDISCONNECTMODE_REJECT<BR>The remote user has rejected the call.<BR>LINEDISCONNECTMODE_PICKUP<BR>The call was picked up from elsewhere.<BR>LINEDISCONNECTMODE_FORWARDED<BR>The call was forwarded by the switch.<BR>LINEDISCONNECTMODE_BUSY<BR>The remote user's station is busy.<BR>LINEDISCONNECTMODE_NOANSWER<BR>The remote user's station does not answer.<BR>LINEDISCONNECTMODE_BADADDRESS<BR>The destination address in invalid.<BR>LINEDISCONNECTMODE_UNREACHABLE<BR>The remote user could not be reached.<BR>LINEDISCONNECTMODE_CONGESTION<BR>The network is congested.<BR>LINEDISCONNECTMODE_IMCOMPATIBLE<BR>The remote user's station equipment is incompatible for the type of call requested.<BR>LINEDISCONNECTMODE_UNAVAIL<BR>The remote user's station equipment is incompatible for the type of call requested.<BR>DWORD    <I>dwParam3<BR></I>This parameter is non-zero and specifies the privilege the application has over the call in the following situations. (1) This is the first time that the app is given a handle to this call; (2) the app is the target of a call handoff (even if the app already was an owner of the call). In all other cases <I>dwParam3</I> is specified as zero. <BR>If non-zero, this parameter is of type <B>LINECALLPRIVILEGE</B>. Values are:<BR>LINECALLPRIVILEGE_NONE     The app has no privileges for the call. Its handle is void. <BR>LINECALLPRIVILEGE_MONITOR     The app has monitor privileges. <BR>LINECALLPRIVILEGE_OWNER     The app has owner privileges.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">This message is sent to any application that has a handle for the call. This message cannot be disabled.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineGetCallStatus</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Data Types:  <B>LINECALLSTATE, LINECALLSTATUS</B></P></TD></TR></TBODY></TABLE>
<BR></P><P>LINE_CLOSE</P>
<P>This message is sent to an application's callback when the specified line device has forcibly closed. The line device handle or any call handles for calls on the line are no longer valid once this message has been sent.</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="74pt" VALIGN="TOP"><COL WIDTH="357pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">DWORD    <I>dwDevice<BR></I>Specifies a handle to the line device that was closed. This handle is no longer valid.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwCallbackInstance<BR></I>Specifies the callback instance supplied when opening the line.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwParam1     </I>Unused.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwParam2     </I>Unused.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwParam3     </I>Unused.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">This message is only sent to any application after a open line has been forcibly closed. This may be done to prevent a single application from monopolizing a line device for too long. Whether or not the line can be reopened immediately after a forced close is device specific.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">None.</P></TD></TR></TBODY></TABLE>
<BR></P><P>LINE_DEVSPECIFIC</P>
<P>This message is sent to an application's callback to notify the application about device specific events occurring a line, address or call. The meaning of the message and the interpretation of the parameters is device specific.</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="74pt" VALIGN="TOP"><COL WIDTH="348pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">DWORD    <I>dwDevice     </I>Specifies a handle to either a line device or call. This is device specific.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwCallbackInstance     </I>Specifies the callback instance supplied when opening the line.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwParam1     </I>Device specific.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwParam2     </I>Device specific.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwParam3     </I>Device specific.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">This message is used by a service provider in conjunction with the <B>lineDevSpecific</B> function. Its meaning is device specific</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineDevSpecific</B></P></TD></TR></TBODY></TABLE>
<BR></P><P>LINE_DEVSPECIFICFEATURE</P>
<P>This message is sent to an application's callback to notify the application about device specific events occurring a line, address or call. The meaning of the message and the interpretation of the parameters is device specific.</P>
<P></P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="92pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">DWORD    <I>dwDevice<BR></I>Specifies a handle to either a line device or call. This is device specific.</P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwCallbackInstance<BR></I>Specifies the callback instance supplied when opening the line.</P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwParam1</I>     Device specific.</P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwParam2</I>     Device specific.</P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwParam3</I>     Device specific.</P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">This message is used by a service provider in conjunction with the <B>lineDevSpecificFeature</B> function. Its meaning is device specific</P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B>Functions:  <B> </B></P></TD><TD VALIGN="TOP"><B>lineDevSpecificFeature</B></P></TD><TD VALIGN="TOP"></P></TD></TR></TBODY></TABLE>
<BR></P><P>LINE_GATHERDIGITS</P>
<P>This message is sent to an application's window when the current buffered digit gathering request has terminated or is canceled. The digit buffer may be examined after this message has been received by the application.</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="69pt" VALIGN="TOP"><COL WIDTH="361pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">DWORD    <I>dwDevice<BR></I>Specifies a handle to the call.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwCallbackInstance<BR></I>Specifies the callback instance supplied when opening the line.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwParam1<BR></I>Specifies the reason why digit gathering was terminated, of type <B>LINEGATHERTERM</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEGATHERTERM_BUFFERFULL<BR>The requested number of digits has been gathered. The buffer is full.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEGATHERTERM_TERMDIGIT<BR>One of the termination digits matched a received digit. The matched termination digit is the last digit in the buffer.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEGATHERTERM_FIRSTTIMEOUT<BR>The first digit timeout expired. The buffer contains no digits.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEGATHERTERM_INTERTIMEOUT<BR>The inter digit timeout expired. The buffer contains at least one digit.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEGATHERTERM_CANCEL<BR>The request was canceled by this application, by another application, or because the call terminated.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwParam2     </I>Unused.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwParam3     </I>Unused.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">This message is only sent to the application that initiated the digit gathering on the call using <B>lineGatherDigits</B>.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineGatherDigits</B></P></TD></TR></TBODY></TABLE>
<BR></P><P>LINE_GENERATE</P>
<P>This message is sent to an application's callback to notify the application that the current digit or tone generation has terminated. Note that only one such generation request can be in progress an a given call at any time. This message is also sent when digit or tone generation is canceled. </P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="69pt" VALIGN="TOP"><COL WIDTH="361pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">DWORD    <I>dwDevice     </I>Specifies a handle to the call.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwCallbackInstance     </I>Specifies the callback instance supplied when opening the line.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwParam1     </I>Specifies the reason why digit or tone generation was terminated, of type <B>LINEGENERATETERM</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEGENERATETERM_DONE     The requested number of digits have been generated, or the requested tones have been generated for the requested duration.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEGENERATETERM_CANCEL     The digit or tone generation request was canceled by this application, by another application, or because the call terminated.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwParam2     </I>Unused.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwParam3     </I>Unused.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">This message is only sent to the application that requested the digit or tone generation.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineGenerateDigits, lineGenerateTone</B></P></TD></TR></TBODY></TABLE>
<BR></P><P>LINE_LINEDEVSTATE</P>
<P>This message is sent to an application's window when the state of a line device has changed. The application can invoke <B>lineGetLineDevStatus</B> to determine the new status of the line.</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="74pt" VALIGN="TOP"><COL WIDTH="352pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">DWORD    <I>dwDevice<BR></I>Specifies a handle to the line device. This parameter is NULL when <I>dwParam1</I> is LINEDEVSTATE_REINIT.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwCallbackInstance<BR></I>Specifies the callback instance supplied when opening the line.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwParam1<BR></I>Specifies the line device status item that has changed, of type <B>LINEDEVSTATE</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEDEVSTATE_OTHER<BR>An other status item than those listed below has changed.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEDEVSTATE_RINGING<BR>The switch tells the line to alert the user.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEDEVSTATE_CONNECTED<BR>The line was previously disconnected and is now connected to the API.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEDEVSTATE_DISCONNECTED<BR>This line was previously connected and is now disconnected from the API.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEDEVSTATE_MSGWAITON<BR>The message waiting indicator is turned on.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEDEVSTATE_MSGWAITOFF<BR>The message waiting indicator is turned off.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEDEVSTATE_INSERVICE<BR>The line is connected to the API. This happens when the API is first activated, or when the line wire is physically plugged in and in service at the switch while the API is active.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEDEVSTATE_OUTOFSERVICE<BR>The line is out of service at the switch or physically disconnected. The API cannot be used to operate on the line device.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEDEVSTATE_MAINTENANCE<BR>Mainatenance is being performed on the line at the switch. The API cannot be used to operate on the line device.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEDEVSTATE_OPEN<BR>The line has been opened.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEDEVSTATE_CLOSE<BR>The line has been closed.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEDEVSTATE_NUMCALLS<BR>The number of calls on the line device has changed.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEDEVSTATE_TERMINALS<BR>The terminal settings have changed.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEDEVSTATE_ROAMING<BR>The roaming state of the line device has changed.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEDEVSTATE_BATTERY<BR>The battery level has changed significantly (cellular).</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEDEVSTATE_SIGNAL<BR>The signal level has changed significantly (cellular).</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEDEVSTATE_DEVSPECIFIC<BR>The line's device specific information has changed.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEDEVSTATE_REINIT<BR>Items have changed in the configuration of line devices. To become aware of these changes (e.g., new line devices) the app should reinitialize its use of the API. The <I>hDevice</I> parameter is left NULL for this state change as it applies to any of the lines in the system.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEDEVSTATE_LOCK<I>     </I>The locked status of the line device has changed.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwParam2<BR></I>The interpretation of this parameter depends on the value of <I>dwParam1</I>. If <I>dwParam1</I> is LINEDEVSTATE_RINGING then <I>dwParam2</I> contains the ring mode with which the switch instructs the line to ring. Valid ring modes are numbers in the range one to <B>dwNumRingModes</B>, where <B>dwNumRingModes</B> is a line device capability.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    dwParam3<BR>The interpretation of this parameter depends on the value of <I>dwParam1</I>. If <I>dwParam1</I> is LINEDEVSTATE_RINGING then <I>dwParam3</I> contains the ring count for this ring event. Ring count starts at zero. </P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">The sending of this message can be controlled via <B>lineSetStatusMessages</B>. An application can indicate which status item changes it wants to be notified about. By default all status reporting will be disabled.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineGetLineDevStatus, lineSetStatusMessages, lineGetStatusMessages</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Data Types:  <B>LINEDEVSTATUS</B></P></TD></TR></TBODY></TABLE>
<BR></P><P>LINE_MONITORDIGITS</P>
<P>This message is sent to an application's callback whenever a digit is detected. The sending of this message is controlled via the <B>lineMonitorDigits</B> function.</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="78pt" VALIGN="TOP"><COL WIDTH="348pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">DWORD    <I>dwDevice<BR></I>Specifies a handle to the call.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwCallbackInstance<BR></I>Specifies the callback instance supplied when opening the call's line.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwParam1<BR></I>The low order byte contains the last digit received in ASCII.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwParam2<BR></I>Specifies the digit mode that was detected, of type <B>LINEDIGITMODE</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEDIGITMODE_PULSE<BR>Detect digits as audible clicks that are the result of rotary pulse sequences. Valid digits for pulse are '0' through '9'.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEDIGITMODE_DTMF<BR>Detect digits as DTMF tones. Valid digits for DTMF are '0' through '9', 'A', 'B', 'C', 'D', '*', and '#'. </P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEDIGITMODE_DTMFEND<BR>Detect and provide application notification of DTMF down edges. Valid digits for DTMF are '0' through '9', 'A', 'B', 'C', 'D', '*', and '#'.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwParam3<BR></I>Unused.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">This message is sent to the application that has enabled digit monitoring. </P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineMonitorDigits</B></P></TD></TR></TBODY></TABLE>
<BR></P><P>LINE_MONITORMEDIA</P>
<P>This message is sent to an application's callback whenever a change in the call's media mode is detected. The sending of this message is controlled via the <B>lineMonitorMedia</B> function.</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="69pt" VALIGN="TOP"><COL WIDTH="357pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">DWORD    <I>dwDevice<BR></I>Specifies a handle to the call.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwCallbackInstance<BR></I>Specifies the callback instance supplied when opening the line.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwParam1<BR></I>Specifies the new media mode, of type <B>LINEMEDIAMODE</B>. Values are:  </P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEMEDIAMODE_NONE<BR>No media stream. This value is mainly used as a NULL value.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEMEDIAMODE_UNKNOWN<BR>A media stream exists but its mode is not known. This would correspond to a call with an unclassified media type. In typical analog telephony environments, an inbound call's media mode may be unknown until after the call has been answered and the media stream filtered to make a determination.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEMEDIAMODE_INTERACTIVEVOICE<BR>The presence of voice energy on the call and the call is treated as an interactive call with humans on both ends.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEMEDIAMODE_DIGITALDATA<BR>Digital data being sent or received over the call.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEMEDIAMODE_G3FAX<BR>A group 3 fax is being sent or received over the call.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEMEDIAMODE_G4FAX<BR>A group 4 fax is being sent or received over the call.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEMEDIAMODE_DATAMODEM<BR>A data modem session on the call.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEMEDIAMODE_TELETEX<BR>A teletex session on the call. Teletex is one of the telematic services.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEMEDIAMODE_VIDEOTEX<BR>A videotex session on the call. Videotex is one the telematic services.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEMEDIAMODE_TELEX<BR>A telex session on the call. Telex is one the telematic services.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEMEDIAMODE_MIXED<BR>A mixed session on the call. Mixed is one the telematic services.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEMEDIAMODE_TDD<BR>A TDD session on the call. TDD stands for Telephony Devices for the Deaf.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEMEDIAMODE_ADSI<BR>An ADSI session on the call. ADSI stands for Analog Display Services Interface.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEMEDIAMODE_UNAVAIL<BR>The media mode of the call is unavailable and will not be known..</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwParam2     Unused</I></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwParam3     </I>Unused.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">This message is sent to the application that has enabled media monitoring for the media mode detected. </P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineMonitorMedia</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Data Types:  <B>LINEMEDIAMODE</B></P></TD></TR></TBODY></TABLE>
<BR></P><P>LINE_MONITORTONE</P>
<P>This message is sent to an application's callback whenever a tone is detected. The sending of this message is controlled via the <B>lineMonitorTone</B> function.</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="74pt" VALIGN="TOP"><COL WIDTH="348pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">DWORD    <I>dwDevice<BR></I>Specifies a handle to the call.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwCallbackInstance<BR></I>Specifies the callback instance supplied when opening the call's line.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwParam1<BR></I>Specifies the app specific field <B>dwAppSpecific</B> of the <B>LINEMONITORTONE</B> structure for the tone that was detected.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwParam2<BR></I>Unused.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwParam3<BR></I>Unused.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">This message is only sent to the application that has requested the tone be monitored.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineMonitorTones</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Data Types:  <B>LINEMONITORTONE</B></P></TD></TR></TBODY></TABLE>
<BR></P><P>LINE_REPLY</P>
<P>This message is sent to an application's callback to report the results of function call that completed asynchronously.</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="78pt" VALIGN="TOP"><COL WIDTH="343pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">DWORD    <I>dwDevice<BR></I>Not used.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwCallbackInstance<BR></I>Not used.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwParam1<BR></I>Specifies the request ID for which this is the reply.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwParam2<BR></I>Specifies the success or error indication. The application should cast this parameter into a LONG. Zero indicates success, a negative number indicates an error.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwParam3<BR></I>Unused.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">Functions that operate asynchronously return a positive request ID value to the application. This request ID is returned with the reply message to identify the request that was completed. The other parameter for this message carries the success of failure indication. Possible errors are the same as those defined by the corresponding function. This message cannot be disabled.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Data Types:  <B>LINEERR</B></P></TD></TR></TBODY></TABLE>
<BR></P><P>LINE_REQUEST</P>
<P>This message is sent to an application's callback to report the arrival of a new request from another application.</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="74pt" VALIGN="TOP"><COL WIDTH="352pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">DWORD    <I>dwDevice<BR></I>Not used.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwCallbackInstance<BR></I>Specifies the registration instance of the application specified on <B>lineRegisterRequestRecipient</B>.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwParam1<BR></I>Specifies the request mode of the newly pending request, of type <B>LINEREQUESTMODE</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEREQUESTMODE_MAKECALL<BR>A <B>tapiRequestMakeCall</B> request.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEREQUESTMODE_MEDIACALL<BR>A <B>tapiRequestMediaCall</B> request.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEREQUESTMODE_DROP<BR>A <B>tapiRequestDrop</B> request.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEREQUESTMODE_LOGENTRY<BR>A <B>lineRequestLogEntry</B> request.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwParam2<BR></I>Unused.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwParam3<BR></I>Unused.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">This message is sent to the highest priority application that has registered for the corresponding request mode. This callback message indicates the arrival of a message of the specified request mode. The application can invoke <B>lineGetRequest</B> using the corresponding request mode to receive the request.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineRegisterRequestRecipient, lineGetRequest, </B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><B>tapiRequestMakeCall, tapiRequestMediaCall, tapiRequestDrop, </B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><B>tapiRequestLogEntry</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Data Types:  <B>LINEREQUESTMODE</B></P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P></P>
 </P>
<P><A NAME="PT2"></A>PHONE_BUTTON</P>
  </P>
<P>The implementation sends this message to an application's callback to notify the application that it has detected a button press on the local phone, provided button press monitoring is enabled.</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="334pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HPHONE   <I>hPhone<BR></I>Specifies a handle to the phone device.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwCallbackInstance<BR></I>Specifies the application's callback instance provided when opening the phone device.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwParam1<BR></I>Specifies the button/lamp ID of the button that was pressed. Note that button IDs 0 through 11 are always the KEYPAD buttons. '0' being button ID 0, '1' being button ID 1, etc., through button ID 9. '*' being button ID 10, and '#' being button ID 11. Additional information about a button ID is available via <B>phoneGetDevCaps</B>, and <B>phoneGetButtonInfo</B>.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwParam2<BR></I>Specifies the button mode of the button, of type <B>PHONEBUTTONMODE</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">PHONEBUTTONMODE_CALL<BR>The button is assigned to a call appearance.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">PHONEBUTTONMODE_FEATURE<BR>The button is assigned to requesting features from the switch, such as hold, conference, transfer, etc.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">PHONEBUTTONMODE_KEYPAD<BR>The button is one of the twelve keypad buttons, '0' through '9', '*', and '#'.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">PHONEBUTTONMODE_LOCAL<BR>The button is a local function button, such as mute or volume control.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">PHONEBUTTONMODE_DISPLAY<BR>The button is a "soft" button associated with the phone's display. A phone set can have zero or more display buttons. </P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwParam3<BR></I>Specifies whether this is a button down event or a button up event, of type <B>PHONEBUTTONSTATE</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">PHONEBUTTONSTATE_UP<BR>The button is in the "up" state.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">PHONEBUTTONSTATE_DOWN<BR>The button is in the "down" state (i.e., pressed down).</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">None.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Data Types:  <B>PHONESTATUS, PHONEBUTTONMODE, PHONEBUTTONSTATE, PHONEBUTTONFUNCTION</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT3"></A>PHONE_CLOSE</P>
<P>The implementation sends this message to an application's callback when an open phone device has been forcibly closed as part of resource reclamation. The device handle is no longer valid once this message has been sent.</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="330pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HPHONE   <I>hPhone<BR></I>Specifies a handle to the open phone device that was closed. The handle is no longer valid after this message has been sent</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwCallbackInstance<BR></I>Specifies the application's callback instance provided when opening the phone device.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwParam1<BR></I>Unused.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwParam2<BR></I>Unused.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwParam3<BR></I>Unused.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">This message is only sent to any application after a open phone has been forcibly closed. This may be done to prevent a single application from monopolizing a phone device for too long. Whether or not the phone can be reopened immediately after a forced close is device specific.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>phoneClose</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT4"></A>PHONE_DEVSPECIFIC</P>
<P>The implementation sends this message to an application's callback to notify the application about device specific events occurring at the phone. The meaning of the message and the interpretation of the parameters is implementation-defined.</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="334pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HPHONE   <I>hPhone<BR></I>Specifies a handle to the phone device.</P></TD></TR><TR><TD VALIGN="TOP"><B>   </B></P></TD><TD VALIGN="TOP">DWORD    <I>dwCallbackInstance<BR></I>Specifies the application's callback instance provided when opening the phone device.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwParam1<BR></I>Device specific.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwParam2<BR></I>Device specific.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwParam3<BR></I>Device specific.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">None.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions: <B>phoneDevSpecific</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT5"></A>PHONE_REPLY</P>
<P>This message is sent to an application's callback to report the results of function call that completed asynchronously.</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="334pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HANDLE   <I>hDevice<BR></I>Unused.<BR>DWORD    <I>dwCallbackInstance<BR></I>Unused.<BR>DWORD    <I>dwParam1<BR></I>Specifies the request ID for which this is the reply.<BR>DWORD    <I>dwParam2<BR></I>Specifies the success or error indication. The application should cast this parameter into a LONG. Zero indicates success, a negative number indicates an error.<BR>DWORD    <I>dwParam3<BR></I>Unused.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">Functions that operate asynchronously return a positive request ID value to the application. This request ID is returned with the reply message to identify the request that was completed. The other parameter for this message carries the success of failure indication. Possible errors are the same as those defined by the corresponding function. This message cannot be disabled.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Data Types:  <B>PHONEERR</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT6"></A>PHONE_STATE</P>
<P>The implementation sends this message to an application's callback whenever a phone device's status changes.</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="334pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HPHONE   <I>hPhone<BR></I>Specifies a handle to the phone device.</P></TD></TR><TR><TD VALIGN="TOP"><B>  </B></P></TD><TD VALIGN="TOP">DWORD    <I>dwCallbackInstance<BR></I>Specifies the application's callback instance provided when opening the phone device.</P></TD></TR><TR><TD VALIGN="TOP"><B> </B></P></TD><TD VALIGN="TOP">DWORD    <I>dwParam1<BR></I>Specifies the phone state that has changed, of type <B>PHONESTATE</B>. Values are:<BR>PHONESTATE_OTHER<BR>An other phone status information item not listed below has changed.<BR>PHONESTATE_CONNECTED<BR>The connection between the phone device and the API was just made. This happens when the API is first invoked, or when the wire connection the phone to the PC is plugged in with the API active.<BR>PHONESTATE_DISCONNECTED<BR>The connection between the phone device and the API was just broken. This happens when the wire connecting the phone set to the PC is unplugged while the API is active.<BR>PHONESTATE_OWNER<BR>The number of owners for the phone device has changed.<BR>PHONESTATE_MONITORS<BR>The number of monitors for the phone device has changed.<BR>PHONESTATE_DISPLAY<BR>The display of the phone has changed.<BR>PHONESTATE_LAMP<BR>A lamp of the phone has changed.<BR>PHONESTATE_RINGMODE<BR>The ring mode of the phone has changed.<BR>PHONESTATE_RINGVOLUME<BR>The ring volume of the phone has changed.<BR>PHONESTATE_HANDSETHOOKSWITCH<BR>The handset hookswitch state has changed.<BR>PHONESTATE_HANDSETVOLUME<BR>The handset's speaker volume setting has changed.<BR>PHONESTATE_HANDSETGAIN<BR>The handset's mic gain setting has changed.<BR>PHONESTATE_SPEAKERHOOKSWITCH<BR>The speakerphone's hookswitch state has changed.<BR>PHONESTATE_SPEAKERVOLUME<BR>The speakerphone's speaker volume setting has changed.<BR>PHONESTATE_SPEAKERGAIN<BR>The speakerphone's mic gain setting state has changed.<BR>PHONESTATE_HEADSETHOOKSWITCH<BR>The headset's hookswitch state has changed.<BR>PHONESTATE_HEADSETVOLUME<BR>The headset's speaker volume setting has changed.<BR>PHONESTATE_HEADSETGAIN<BR>The headset's mic gain setting has changed.<BR>PHONESTATE_SUSPEND<BR>The app's use of the phone is temporarily suspended.<BR>PHONESTATE_RESUME<BR>The app's use of the phone device is resumed after having been suspended for some time.<BR>PHONESTATE_DEVSPECIFIC<BR>The phone's device specific information has changed.<BR>DWORD    <I>dwParam2<BR></I>Specifies phone state dependent information detailing the status change. This field is not used if multiple flags are set in <I>dwParam1</I>, since multiple status items have changed. The app should invoke <B>phoneGetStatus</B> to obtain complete set of information.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">If <I>dwParam1</I> is PHONESTATE_OWNER, then <I>dwParam2</I> contains the new number of owners.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">If <I>dwParam1</I> is PHONESTATE_MONITORS, then <I>dwParam2</I> contains the new number of monitors.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">If <I>dwParam1</I> is PHONESTATE_LAMP, then <I>dwParam2</I> contains the button/lamp ID of the lamp that has changed. </P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">If <I>dwParam1</I> is PHONESTATE_RING, then <I>dwParam2</I> contains the new ring mode. </P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">If <I>dwParam1</I> is PHONESTATE_HANDSET, SPEAKER or HEADSET, then <I>dwParam2</I> contains the new hookswitch mode of that hookswitch device, of type <B>PHONEHOOKSWITCHMODE</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">PHONEHOOKSWITCHMODE_ONHOOK<BR>The device's mic and speaker are both onhook.<BR>PHONEHOOKSWITCHMODE_MIC<BR>The devicer's mic is active, the speaker is mute.<BR>PHONEHOOKSWITCHMODE_SPEAKER<BR>The device's speaker is active, the mic is mute.<BR>PHONEHOOKSWITCHMODE_MICSPEAKER<BR>The device's mic and speaker are both active.<BR>DWORD    <I>dwParam3<BR></I>Unused.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">The sending of this message to one's callback can be controlled and queried using <B>phoneSetStatusMessages</B> and <B>phoneGetStatusMessages</B>. By default, this message is disabled for all state changes.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>phoneGetStatus, phoneGetStatusMessages, </B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><B>phoneSetStatusMessages</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Data Types: <B>PHONESTATE</B></P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P></P>
 </P>
</P></BODY></HTML>

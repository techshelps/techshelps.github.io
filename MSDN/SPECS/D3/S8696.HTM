<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Extensibility</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
</OBJECT></FORM>
<H3>Extensibility</H3><P>Provisions are made for extending data types and structures both in a device independent way and in a device specific (i.e., vendor specific) way. </P>
<P>In data types that are scalar enumerations, a range of values is reserved for future common extensions. The remainder of values is identified as device specific. A vendor can define meanings for these values in any way desired. The interpretation of these values is keyed to the <I>Extension ID</I> provided via the <B>LINEDEVCAPS</B> data structure. For data types that are defined as bit flags, a range of low order bits are reserved, where the high order bits can be Extension specific. It is recommended that Extended values and bit arrays use bits from the highest value or high order bit down. This leaves the option to move the border between the common portion and Extension portion if there is need to do so in the future. Extensions to data structures are assigned a variable sized field with size/offset being part of the fixed part. The API describes for each data structures what device specific extensions are allowed.</P>
<P>In addition to recognizing a specific Extension ID, the application must negotiate the extension version number that the app and the service provider will operate under. This is done in the second version negotiation phase of the <B>lineGetDevCaps</B> function. </P>
<P>An Extension ID is a globally unique identifier. There is no central registry for Extension IDs. Instead, they are generated locally by the manufacturer by a utility that is available with the toolkit. The number is made up parts such as a (unique) LAN address, time of day, random number, to guarantee global uniqueness. Globally Unique Identifiers are are designed to be distinguishable from HP/DEC universally unique identifiers and are thus fully compatible with them.  </P>
<P><A NAME="PT2"></A>LINEADDRCAPFLAGS</P>
<P>The <B>LINEADDRESSCAPFLAGS</B> bit flag constants describe various BOOLEAN address capabilities provided as part of the <B>LINEADDRESSCAPS</B> data structure.</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="196pt" VALIGN="TOP"><COL WIDTH="75pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">LINEADDRCAPFLAGS_FWDNUMRINGS</P></TD><TD VALIGN="TOP">0x00000001</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRCAPFLAGS_PICKUPGROUPID </P></TD><TD VALIGN="TOP">0x00000002</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRCAPFLAGS_SECURE </P></TD><TD VALIGN="TOP">0x00000004</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRCAPFLAGS_BLOCKIDDEFAULT </P></TD><TD VALIGN="TOP">0x00000008</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRCAPFLAGS_BLOCKIDOVERRIDE</P></TD><TD VALIGN="TOP">0x00000010</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRCAPFLAGS_DIALED </P></TD><TD VALIGN="TOP">0x00000020</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRCAPFLAGS_ORIGOFFHOOK </P></TD><TD VALIGN="TOP">0x00000040</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRCAPFLAGS_DESTOFFHOOK </P></TD><TD VALIGN="TOP">0x00000080</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRCAPFLAGS_FWDCONSULT</P></TD><TD VALIGN="TOP">0x00000100</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRCAPFLAGS_SETUPCONFNULL</P></TD><TD VALIGN="TOP">0x00000200</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRCAPFLAGS_AUTORECONNECT</P></TD><TD VALIGN="TOP">0x00000400</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRCAPFLAGS_COMPLETIONID</P></TD><TD VALIGN="TOP">0x00000800</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRCAPFLAGS_TRANSFERHELD</P></TD><TD VALIGN="TOP">0x00001000</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRCAPFLAGS_TRANSFERMAKE</P></TD><TD VALIGN="TOP">0x00002000</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRCAPFLAGS_CONFERENCEHELD</P></TD><TD VALIGN="TOP">0x00004000</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRCAPFLAGS_CONFERENCEMAKE</P></TD><TD VALIGN="TOP">0x00008000</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRCAPFLAGS_PARTIALDIAL</P></TD><TD VALIGN="TOP">0x00010000</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRCAPFLAGS_FWDSTATUSVALID</P></TD><TD VALIGN="TOP">0x00020000</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRCAPFLAGS_FWDINTEXTADDR</P></TD><TD VALIGN="TOP">0x00040000</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRCAPFLAGS_FWDBUSYNAADDR</P></TD><TD VALIGN="TOP">0x00080000</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="177pt" VALIGN="TOP"><COL WIDTH="233pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Values</B></P></TD><TD VALIGN="TOP">The <B>LINEADDRCAPFLAGS</B> constants have the following values.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineAddrCapFlags_fwdNumRings</B></P></TD><TD VALIGN="TOP">Specifies whether or not the number of rings for a no answer can be specified when forwarding calls on no answer. If TRUE, then the valid range is provided in <B>LINEADDRESSCAPS</B>.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineAddrCapFlags_pickupGroupID</B></P></TD><TD VALIGN="TOP">Specifies whether or not a group ID is required for call pickup.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineAddrCapFlags_secure</B></P></TD><TD VALIGN="TOP">Specifies whether or not calls on this address can be made secure at call setup time.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineAddrCapFlags_blockIDDefault</B></P></TD><TD VALIGN="TOP">Specifies whether the network by default sends or blocks caller ID information when making a call on this address. If TRUE, then ID information is blocked by default; if FALSE, then ID information is transmitted by default.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineAddrCapFlags_blockIDOverride</B></P></TD><TD VALIGN="TOP">Specifies whether or not the default setting for sending or blocking of caller ID information can be overridden per call. If TRUE, override is possible; if FALSE, override is not possible.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineAddrCapFlags_dialed</B></P></TD><TD VALIGN="TOP">Specifies whether or not a destination address can be dialed on this address for making a call. TRUE if a destination address must be dialed; FALSE if the destination address is fixed (e.g., a "hot phone").</P></TD></TR><TR><TD VALIGN="TOP"><B>LineAddrCapFlags_origOffHook</B></P></TD><TD VALIGN="TOP">Specifies whether or not the originating party's phone can automatically be taken offhook when making calls.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineAddrCapFlags_destOffHook</B></P></TD><TD VALIGN="TOP">Specifies whether or not the called party's phone can automatically be forced offhook when making calls.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineAddrCapFlags_fwdConsult</B></P></TD><TD VALIGN="TOP">Specifies whether or not call forwarding involves the establishment of a consultation call.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineAddrCapFlags_setupConfNull</B></P></TD><TD VALIGN="TOP">Specifies whether or not setting up a conference call starts out with an initial call (FALSE) or with no initial call (TRUE).</P></TD></TR><TR><TD VALIGN="TOP"><B>LineAddrCapFlags_autoReconnect</B></P></TD><TD VALIGN="TOP">Specifies whether or not dropping a consultation call automatically reconnects to the call on consultation hold. TRUE if reconnect happens automatically, FALSE otherwise.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineAddrCapFlags_completionID</B></P></TD><TD VALIGN="TOP">Specifies whether or not the completion IDs returned by <B>lineCompleteCall</B> are useful and unique. TRUE is useful; FALSE otherwise.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineAddrCapFlags_transferHeld</B></P></TD><TD VALIGN="TOP">Specifies whether or not a (hard) held call can be transferred. Often, only calls on consultation hold may be able to be transferred.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineAddrCapFlags_transferMake</B></P></TD><TD VALIGN="TOP">Specifies whether or not an entirely new call can be established for use as a consultation call on transfer. </P></TD></TR><TR><TD VALIGN="TOP"><B>LineAddrCapFlags_conferenceHeld</B></P></TD><TD VALIGN="TOP">Specifies whether or not a (hard) held call can be conferenced to. Often, only calls on consultation hold may be able to be added to as a conference call.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineAddrCapFlags_conferenceMake</B></P></TD><TD VALIGN="TOP">Specifies whether or not an entirely new call can be established for use as a consultation call (to add) on conference. </P></TD></TR><TR><TD VALIGN="TOP"><B>LineAddrCapFlags_partialDial</B></P></TD><TD VALIGN="TOP">Specifies whether or not partial dialing is available.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineAddrCapFlags_fwdStatusValid</B></P></TD><TD VALIGN="TOP">Specifies whether or not the forwarding status in the <B>LINEADDRESSSTATUS</B> structure for this address is valid or is at most a "best estimate" given absence of accurate confirmation by the switch or network.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineAddrCapFlags_fwdIntExtAddr</B></P></TD><TD VALIGN="TOP">Specifies whether or not internal and externals calls can be forwarded to different forwarding addresses. This flags is only meaningful if forwarding of internal and external calls can be controlled separately. This flag is TRUE if internal and external calls can be forwarded to different destination addresses; FALSE otherwise.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineAddrCapFlags_fwdBusyNAAddr</B></P></TD><TD VALIGN="TOP">Specifies whether or not call forwarding for busy and no answer can use different forwarding addresses. This flags is only meaningful if forwarding for busy and no answer can be controlled separately. This flag is TRUE if forwarding for busy and no answer can use different destination addresses; FALSE otherwise.</P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP">None. All 32 bits are reserved.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">None.</P></TD></TR><TR><TD VALIGN="TOP"><B>See</B> <B>Also</B></P></TD><TD VALIGN="TOP">Data Types:  <B>LINEADDRESSCAPS</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT3"></A>LINEADDRESSCAPS</P>
<P>The <B>LINEADDRESSCAPS</B> structure describes the capabilities of a specified address.</P>
<P></P>

<TABLE COLS="1" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="205pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Typedef struct lineaddresscaps_tag {</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="61pt" VALIGN="TOP"><COL WIDTH="154pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">DWORD</P></TD><TD VALIGN="TOP">dwTotalSize;</P></TD></TR><TR><TD VALIGN="TOP">DWORD</P></TD><TD VALIGN="TOP">dwNeededSize;</P></TD></TR><TR><TD VALIGN="TOP">DWORD</P></TD><TD VALIGN="TOP">dwUsedSize;</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP">DWORD</P></TD><TD VALIGN="TOP">dwLineDeviceID;</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP">DWORD</P></TD><TD VALIGN="TOP">dwAddressSize;</P></TD></TR><TR><TD VALIGN="TOP">DWORD</P></TD><TD VALIGN="TOP">dwAddressOffset;</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP">DWORD</P></TD><TD VALIGN="TOP">dwDevSpecificSize;</P></TD></TR><TR><TD VALIGN="TOP">DWORD</P></TD><TD VALIGN="TOP">dwDevSpecificOffset;</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP">DWORD</P></TD><TD VALIGN="TOP">dwAddressSharing;</P></TD></TR><TR><TD VALIGN="TOP">DWORD</P></TD><TD VALIGN="TOP">dwAddressStates;</P></TD></TR><TR><TD VALIGN="TOP">DWORD</P></TD><TD VALIGN="TOP">dwCallInfoStates;</P></TD></TR><TR><TD VALIGN="TOP">DWORD</P></TD><TD VALIGN="TOP">dwCallerIDFlags;</P></TD></TR><TR><TD VALIGN="TOP">DWORD</P></TD><TD VALIGN="TOP">dwCalledIDFlags;</P></TD></TR><TR><TD VALIGN="TOP">DWORD</P></TD><TD VALIGN="TOP">dwConnectedIDFlags;</P></TD></TR><TR><TD VALIGN="TOP">DWORD</P></TD><TD VALIGN="TOP">dwRedirectionIDFlags;</P></TD></TR><TR><TD VALIGN="TOP">DWORD</P></TD><TD VALIGN="TOP">dwRedirectingIDFlags;</P></TD></TR><TR><TD VALIGN="TOP">DWORD</P></TD><TD VALIGN="TOP">dwCallStates;</P></TD></TR><TR><TD VALIGN="TOP">DWORD</P></TD><TD VALIGN="TOP">dwDialToneModes;</P></TD></TR><TR><TD VALIGN="TOP">DWORD</P></TD><TD VALIGN="TOP">dwBusyModes;</P></TD></TR><TR><TD VALIGN="TOP">DWORD</P></TD><TD VALIGN="TOP">dwSpecialInfo;</P></TD></TR><TR><TD VALIGN="TOP">DWORD</P></TD><TD VALIGN="TOP">dwDisconnectModes;</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP">DWORD</P></TD><TD VALIGN="TOP">dwMaxNumActiveCalls;</P></TD></TR><TR><TD VALIGN="TOP">DWORD</P></TD><TD VALIGN="TOP">dwMaxNumOnHoldCalls;</P></TD></TR><TR><TD VALIGN="TOP">DWORD</P></TD><TD VALIGN="TOP">dwMaxNumOnHoldPendingCalls;</P></TD></TR><TR><TD VALIGN="TOP">DWORD</P></TD><TD VALIGN="TOP">dwMaxNumConference;</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP">DWORD</P></TD><TD VALIGN="TOP">dwAddrCapFlags;</P></TD></TR><TR><TD VALIGN="TOP">DWORD</P></TD><TD VALIGN="TOP">dwCallFeatures;</P></TD></TR><TR><TD VALIGN="TOP">DWORD</P></TD><TD VALIGN="TOP">dwRemoveFromConfCaps;</P></TD></TR><TR><TD VALIGN="TOP">DWORD</P></TD><TD VALIGN="TOP">dwTransferModes;</P></TD></TR><TR><TD VALIGN="TOP">DWORD</P></TD><TD VALIGN="TOP">dwParkModes;</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP">DWORD</P></TD><TD VALIGN="TOP">dwForwardModes;</P></TD></TR><TR><TD VALIGN="TOP">DWORD</P></TD><TD VALIGN="TOP">dwMaxForwardEntries;</P></TD></TR><TR><TD VALIGN="TOP">DWORD</P></TD><TD VALIGN="TOP">dwMaxSpecificEntries;</P></TD></TR><TR><TD VALIGN="TOP">DWORD</P></TD><TD VALIGN="TOP">dwMinFwdNumRings;</P></TD></TR><TR><TD VALIGN="TOP">DWORD</P></TD><TD VALIGN="TOP">dwMaxFwdNumRings;</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP">DWORD</P></TD><TD VALIGN="TOP">dwMaxCallCompletions;</P></TD></TR><TR><TD VALIGN="TOP">DWORD</P></TD><TD VALIGN="TOP">dwCallCompletionConds;</P></TD></TR><TR><TD VALIGN="TOP">DWORD</P></TD><TD VALIGN="TOP">dwCallCompletionModes;</P></TD></TR><TR><TD VALIGN="TOP">DWORD</P></TD><TD VALIGN="TOP">dwNumCompletionMessages;</P></TD></TR><TR><TD VALIGN="TOP">DWORD</P></TD><TD VALIGN="TOP">dwCompletionMsgTextEntrySize;</P></TD></TR><TR><TD VALIGN="TOP">DWORD</P></TD><TD VALIGN="TOP">dwCompletionMsgTextSize;</P></TD></TR><TR><TD VALIGN="TOP">DWORD</P></TD><TD VALIGN="TOP">dwCompletionMsgTextOffset;</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P></P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="122pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"><COL WIDTH="10pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Fields</B></P></TD><TD VALIGN="TOP">The <B>LINEADDRESSCAPS</B> structure contains the following fields:</P></TD><TD VALIGN="TOP"></P></TD></TR></TBODY></TABLE>
<BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="122pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>dwTotalSize</B></P></TD><TD VALIGN="TOP">The total size in bytes allocated to this data structure.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwNeededSize</B></P></TD><TD VALIGN="TOP">The size in bytes for this data structure that is needed to hold all the returned information.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwUsedSize</B></P></TD><TD VALIGN="TOP">The size in bytes of this data structure that contains useful information.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwLineDeviceID</B></P></TD><TD VALIGN="TOP">Specifies the device ID of the line device with which this address is associated.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwAddressSize</B></P>
<B>dwAddressOffset</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset from the beginning of this data structure in bytes of the variable sized address field. </P></TD></TR><TR><TD VALIGN="TOP"><B>DwDevSpecificSize</B></P>
<B>dwDevSpecificOffset</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset in bytes from the beginning of this data structure of the variable sized device specific field. </P></TD></TR><TR><TD VALIGN="TOP"><B>DwAddressSharing</B></P></TD><TD VALIGN="TOP">Specifies the sharing mode of the address. Values are:</P></TD></TR><TR><TD VALIGN="TOP"><B>LINEADDRESSSHARING_ PRIVATE</B></P></TD><TD VALIGN="TOP">An address with <I>private</I> sharing mode is only assigned to a single line or station.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINEADDRESSSHARING_ BRIDGEDEXCL</B></P></TD><TD VALIGN="TOP">An address with a <I>bridged-exclusive</I> sharing mode is assigned to one or more other lines or stations. The <I>exclusive</I> portion refers to the fact that only one of the bridged parties can be connected with a remote party at any given time.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINEADDRESSSHARING_ BRIDGEDNEW</B></P></TD><TD VALIGN="TOP">An address with a <I>bridged-new</I> sharing mode is assigned to one or more other lines or stations. The <I>new</I> portion refers to the fact that activities by the different bridged parties result in the creation of new calls on the address.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINEADDRESSSHARING_ BRIDGEDSHARED</B></P></TD><TD VALIGN="TOP">An address with a <I>bridged-shared</I> sharing mode is also assigned to one or more other lines or stations. The <I>shared</I> portion refers to the fact that if one of the bridged parties is connected with a remote party, the remaining bridged parties can share in the conversation (as in a conference) by activating that call appearance.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINEADDRESSSHARING_ MONITORED</B></P></TD><TD VALIGN="TOP">An address with a <I>monitored</I> address mode simply monitors the status of that address. The status is either idle or in use. The message <B>LINE_ADDRESSSTATE</B> notifies the application about these changes.<B>LINEADDRESSSTATE</B>. Values are:</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="122pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>LINEADDRESSSTATE_ OTHER</B></P></TD><TD VALIGN="TOP">A status item or multiple items in the address' status not listed below have changed. The app should check the current address status to determine which items have changed.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINEADDRESSSTATE_ DEVSPECIFIC</B></P></TD><TD VALIGN="TOP">The device specific item of the address status has changed.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINEADDRESSSTATE_ INUSEZERO</B></P></TD><TD VALIGN="TOP">The address has changed to idle; i.e., it is now in use by zero stations.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINEADDRESSSTATE_ INUSEONE</B></P></TD><TD VALIGN="TOP">The address has changed from being idle or from being in use by many bridged stations to being in use by just one station.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINEADDRESSSTATE_ INUSEMANY</B></P></TD><TD VALIGN="TOP">The monitored or bridged address has changed to being in use by one station to being used by more than one station.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINEADDRESSSTATE_ NUMCALLS</B></P></TD><TD VALIGN="TOP">The number of calls on the address has changed. This is the result of either a new inbound call, or an outbound call on the address, a call changing its hold status, etc.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINEADDRESSSTATE_ FORWARD</B></P></TD><TD VALIGN="TOP">The forwarding status of the address has changed including the number of rings for determining a no answer condition. The app should check the address status to determine details about the address' current forwarding status.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINEADDRESSSTATE_ TERMINALS</B></P></TD><TD VALIGN="TOP">The terminal settings for the address have changed</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="122pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">dwAddressStates</P></TD><TD VALIGN="TOP">This field contains the address states changes for which the application may get notified via the <B>LINE_ADDRESSSTATE</B> callback message, of type .</P></TD></TR><TR><TD VALIGN="TOP">dwCallInfoStates</P></TD><TD VALIGN="TOP">This field describes the call info elements that are meaningful for all calls on this address, of type <B>LINECALLINFOSTATE</B>. An app may get notified about changes in some of these states via <B>LINE_CALLINFO</B> messages. Values are:</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="122pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>LINECALLINFOSTATE_ OTHER</B></P></TD><TD VALIGN="TOP">An other information item in the call information not listed below has changed.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLINFOSTATE_ DEVSPECIFIC</B></P></TD><TD VALIGN="TOP">The device specific field of the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLINFOSTATE_ BEARERMODE</B></P></TD><TD VALIGN="TOP">The bearer mode field of the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLINFOSTATE_ RATE</B></P></TD><TD VALIGN="TOP">The rate field of the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLINFOSTATE_ MEDIAMODE</B></P></TD><TD VALIGN="TOP">The media mode field of the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLINFOSTATE_ APPSPECIFIC</B></P></TD><TD VALIGN="TOP">The app specific field of the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLINFOSTATE_ CALLID</B></P></TD><TD VALIGN="TOP">The call ID field of the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLINFOSTATE_ RELATEDCALLID</B></P></TD><TD VALIGN="TOP">The related call ID field of the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLINFOSTATE_ ORIGIN</B></P></TD><TD VALIGN="TOP">The origin field of the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLINFOSTATE_ REASON</B></P></TD><TD VALIGN="TOP">The reason field of the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLINFOSTATE_ COMPLETIONID</B></P></TD><TD VALIGN="TOP">The completion ID field of the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLINFOSTATE_ NUMOWNERINCR</B></P></TD><TD VALIGN="TOP">The number of owner field in the call information record was increased.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLINFOSTATE_ NUMOWNERDECR</B></P></TD><TD VALIGN="TOP">The number of owner field in the call information record was decreased.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLINFOSTATE_ NUMMONITORS</B></P></TD><TD VALIGN="TOP">The number of monitors field in the call information record has changed.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLINFOSTATE_ TRUNK</B></P></TD><TD VALIGN="TOP">The trunk field of the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLINFOSTATE_ CALLERID</B></P></TD><TD VALIGN="TOP">One of the callerID-related fields of the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLINFOSTATE_ CALLEDID</B></P></TD><TD VALIGN="TOP">One of the calledID-related fields of the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLINFOSTATE_ CONNECTEDID</B></P></TD><TD VALIGN="TOP">One of the connectedID-related fields of the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLINFOSTATE_ REDIRECTIONID</B></P></TD><TD VALIGN="TOP">One of the redirectionID-related fields of the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLINFOSTATE_ REDIRECTINGID</B></P></TD><TD VALIGN="TOP">One of the redirectingID-related fields of the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLINFOSTATE_ DISPLAY</B></P></TD><TD VALIGN="TOP">The display field of the call information record.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLINFOSTATE_ USERUSERINFO</P></TD><TD VALIGN="TOP">The user-to-user information of the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLINFOSTATE_ HIGHLEVELCOMP</B></P></TD><TD VALIGN="TOP">The high level compatibility field of the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLINFOSTATE_ LOWLEVELCOMP</B></P></TD><TD VALIGN="TOP">The low level compatibility field of the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLINFOSTATE_ CHARGINGINFO</B></P></TD><TD VALIGN="TOP">The charging information of the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLINFOSTATE_ TERMINAL</B></P></TD><TD VALIGN="TOP">The terminal mode information of the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLINFOSTATE_ DIALPARAMS</B></P></TD><TD VALIGN="TOP">The dial parameters of the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLINFOSTATE_ MONITORMODES</B></P></TD><TD VALIGN="TOP">One or more of the digit, tone, or media monitoring fields in the call information record.</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="122pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">DwCallerIDFlags<BR>dwCalledIDFlags<BR>dwConnectedIDFlags<BR>dwRedirectionIDFlags<BR>dwRedirectingIDFlags</P></TD><TD VALIGN="TOP">These fields describe the various party ID information flavors that may be provided for calls on this address, of type <B>LINECALLPARTYID</B>. Values are:</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="122pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>LINECALLPARTYID_ BLOCKED</B></P></TD><TD VALIGN="TOP">Caller ID information for the call has been blocked by the caller, but would otherwise have been available.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLPARTYID_ OUTOFAREA</B></P></TD><TD VALIGN="TOP">Caller ID information for the call is not available as it is not propagated all the way by the network.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLPARTYID_ NAME</B></P></TD><TD VALIGN="TOP">The caller ID information for the call is the caller's name (from a table maintained inside the switch). It is provided in the caller ID name variable size field.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLPARTYID_ ADDRESS</B></P></TD><TD VALIGN="TOP">The caller ID information for the call is the caller's number, and is provided via the caller ID variable size field.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLPARTYID_ PARTIAL</B></P></TD><TD VALIGN="TOP">Caller ID information for the call is valid, but is limited to partial number information.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLPARTYID_ UNKNOWN</B></P></TD><TD VALIGN="TOP">Caller ID information is currently unknown, it may become known later.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLPARTYID_ UNAVAIL</B></P></TD><TD VALIGN="TOP">Caller ID information is unavailable and will not become known later.</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="122pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>DwCallStates</B></P></TD><TD VALIGN="TOP">This field describes the various call states that can possibly be reported for calls on this address, of type <B>LINECALLSTATE</B>. Values are:</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="122pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>LINECALLSTATE_ IDLE</B></P></TD><TD VALIGN="TOP">The call is idle - no call actually exists.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLSTATE_ OFFERING</B></P></TD><TD VALIGN="TOP">The call is being offered to the station, signaling the arrival of a  new call. In some environments, a call in the offering state does not automatically alert the user; alerting is done by the switch instructing the line to ring, it does not affect any call states.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLSTATE_ ACCEPTED</B></P></TD><TD VALIGN="TOP">The call was offering and has been accepted. This indicates to other (monitoring) applications that the current owner application has claimed responsibility for answering the call. In ISDN, this also initiates alerting to both parties.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLSTATE_ DIALTONE</B></P></TD><TD VALIGN="TOP">The call is receiving a dial tone from the switch, which means that the switch is ready to receive a dialed number.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLSTATE_ DIALING</B></P></TD><TD VALIGN="TOP">Destination address information (a phone number) is being sent to the switch via the call.  Note that the operation <B>lineGenerateDigits</B> does not place the line into the <I>dialing</I> state.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLSTATE_ RINGBACK</B></P></TD><TD VALIGN="TOP">The call is receiving ringback from the called address. Ringback indicates that the other station has been reached and is being alerted.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLSTATE_ BUSY</B></P></TD><TD VALIGN="TOP">The call is receiving a busy tone. Busy tone indicates that the call cannot be completed - either a circuit (trunk) or the remote party's station are in use.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLSTATE_ SPECIALINFO</B></P></TD><TD VALIGN="TOP">Special information is sent by the network. Special information is typically sent when the destination cannot be reached. </P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLSTATE_ CONNECTED</B></P></TD><TD VALIGN="TOP">The call has been established, the connection is made. Information is able to flow over the call between the originating address and the destination address.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLSTATE_ PROCEEDING</B></P></TD><TD VALIGN="TOP">Dialing has completed and the call is proceeding through the switch or telephone network.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLSTATE_ ONHOLD</B></P></TD><TD VALIGN="TOP">The call is on hold by the switch.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLSTATE_ CONFERENCED</B></P></TD><TD VALIGN="TOP">The call is currently a member of a multi-party conference call.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLSTATE_ ONHOLDPENDCONF</B></P></TD><TD VALIGN="TOP">The call is currently on hold while it is being added to a conference.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLSTATE_ ONHOLDPENDTRANSF</B></P></TD><TD VALIGN="TOP">The call is currently on hold awaiting transfer to another number.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLSTATE_ DISCONNECTED</B></P></TD><TD VALIGN="TOP">The remote party has disconnected from the call.</P></TD></TR><TR><TD VALIGN="TOP"><B>LINECALLSTATE_ UNKNOWN</B></P></TD><TD VALIGN="TOP">The state of the call is not known. This may be due to limitations of the call progress detection implementation.</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="122pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>DwDialToneModes</B></P></TD><TD VALIGN="TOP">This field describes the various dialtone modes that can possibly be reported for calls made on this address, of type <B>LINEDIALTONEMODE</B>. This field is only meaningful if the <I>dialtone</I> call state can be reported. Values are:</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="122pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">LINEDIALTONEMODE_ NORMAL</P></TD><TD VALIGN="TOP">This is a "normal" dialtone which typically is a continuous tone.</P></TD></TR><TR><TD VALIGN="TOP">LINEDIALTONEMODE_ SPECIAL</P></TD><TD VALIGN="TOP">This is a special dialtone indicating a certain condition is currently in effect.</P></TD></TR><TR><TD VALIGN="TOP">LINEDIALTONEMODE_ INTERNAL</P></TD><TD VALIGN="TOP">This an internal (e.g., PBX) dialtone.</P></TD></TR><TR><TD VALIGN="TOP">LINEDIALTONEMODE_ EXTERNAL</P></TD><TD VALIGN="TOP">This is an external (e.g., public network) dialtone.</P></TD></TR><TR><TD VALIGN="TOP">LINEDIALTONEMODE_ UNKNOWN</P></TD><TD VALIGN="TOP">The dialtone mode is currently known, but may become known later.</P></TD></TR><TR><TD VALIGN="TOP">LINEDIALTONEMODE_ UNAVAIL</P></TD><TD VALIGN="TOP">TwBusyModes</P></TD></TR></TBODY></TABLE>
<BR></P><P>This field describes the various busy modes that can possibly be reported for calls made on this address, of type <B>LINEBUSYMODE</B>. This field is only meaningful of the <I>busy</I> call state can be reported. Values are:</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="154pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">LINEBUSYMODE_ STATION</P></TD><TD VALIGN="TOP">The busy signal indicates that the called party's station is busy. This is usually signaled via a "normal" busy tone.</P></TD></TR><TR><TD VALIGN="TOP">LINEBUSYMODE_ TRUNK</P></TD><TD VALIGN="TOP">The busy signal indicates that a trunk or circuit is busy. This is usually signaled via a "long" busy tone.</P></TD></TR><TR><TD VALIGN="TOP">LINEBUSYMODE_ UNKNOWN</P></TD><TD VALIGN="TOP">The busy signal's specific mode is currently unkown, but may become known later.</P></TD></TR><TR><TD VALIGN="TOP">LINEBUSYMODE_ UNAVAIL</P></TD><TD VALIGN="TOP">The busy signal's specific mode is unavailable and will not become known.</P></TD></TR><TR><TD VALIGN="TOP">DwSpecialInfo</P></TD><TD VALIGN="TOP">This field describes the various special information flavors that can possibly be reported for calls made on this address, of type <B>LINESPECIALINFO</B>. This field is only meaningful of the <I>specialInfo</I> call state can be reported. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINESPECIALINFO_ NOCIRCUIT</P></TD><TD VALIGN="TOP">This special information tone preceeds a no circuit or emergency announcement (trunk blockage category).</P></TD></TR><TR><TD VALIGN="TOP">LINESPECIALINFO_ CUSTIRREG</P></TD><TD VALIGN="TOP">This special information tone preceeds a vacant number, AIS, Centrex number change and non-working station, access code not dialed or dialed in error, manual intercept operator message (customer irregularity category).</P></TD></TR><TR><TD VALIGN="TOP">LINESPECIALINFO_ REORDER</P></TD><TD VALIGN="TOP">This special information tone preceeds a reorder announcement (equipment irregularity category).</P></TD></TR><TR><TD VALIGN="TOP">LINESPECIALINFO_ UNKNOWN</P></TD><TD VALIGN="TOP">Specific about the special information tone are currently unknown but may become known later.</P></TD></TR><TR><TD VALIGN="TOP">LINESPECIALINFO_ UNAVAIL</P></TD><TD VALIGN="TOP">Specifics about the special information tone are unavailable, and will not become known.</P></TD></TR><TR><TD VALIGN="TOP">DwDisconnectModes</P></TD><TD VALIGN="TOP">This field describes the various disconnect modes that can possibly be reported for calls made on this address, of type <B>LINEDISCONNECTMODE</B>. This field is only meaningful of the <I>disconnected</I> call state can be reported. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINEDISCONNECTMODE_ NORMAL</P></TD><TD VALIGN="TOP">This is a "normal" disconnect request by the remote party, the call was terminated normally.</P></TD></TR><TR><TD VALIGN="TOP">LINEDISCONNECTMODE_ UNKNOWN</P></TD><TD VALIGN="TOP">The reason for the disconnect request is unknown.</P></TD></TR><TR><TD VALIGN="TOP">LINEDISCONNECTMODE_ REJECT </P></TD><TD VALIGN="TOP">The remote user has rejected the call.</P></TD></TR><TR><TD VALIGN="TOP">LINEDISCONNECTMODE_ PICKUP </P></TD><TD VALIGN="TOP">The call was picked up from elsewhere.</P></TD></TR><TR><TD VALIGN="TOP">LINEDISCONNECTMODE_ FORWARDED</P></TD><TD VALIGN="TOP">The call was forwarded by the switch.</P></TD></TR><TR><TD VALIGN="TOP">LINEDISCONNECTMODE_ BUSY</P></TD><TD VALIGN="TOP">The remote user's station is busy.</P></TD></TR><TR><TD VALIGN="TOP">LINEDISCONNECTMODE_ NOANSWER</P></TD><TD VALIGN="TOP">The remote user's station does not answer.</P></TD></TR><TR><TD VALIGN="TOP">LINEDISCONNECTMODE_ BADADDRESS</P></TD><TD VALIGN="TOP">The destination address in invalid.</P></TD></TR><TR><TD VALIGN="TOP">LINEDISCONNECTMODE_ UNREACHABLE</P></TD><TD VALIGN="TOP">The remote user could not be reached.</P></TD></TR><TR><TD VALIGN="TOP">LINEDISCONNECTMODE_ CONGESTION</P></TD><TD VALIGN="TOP">The network is congested.</P></TD></TR><TR><TD VALIGN="TOP">LINEDISCONNECTMODE_ INCOMPATIBLE</P></TD><TD VALIGN="TOP">The remote user's station equipment is incompatible for the type of call requested.</P></TD></TR><TR><TD VALIGN="TOP">LINEDISCONNECTMODE_ UNAVAIL</P></TD><TD VALIGN="TOP">The remote user's station equipment is incompatible for the type of call requested.</P></TD></TR><TR><TD VALIGN="TOP">DwMaxNumActiveCalls</P></TD><TD VALIGN="TOP">This field contains the maximum number of active call appearances that the address can handle. This number does not include calls on hold or on hold pending transfer or conference.</P></TD></TR><TR><TD VALIGN="TOP">DwMaxNumOnHoldCalls</P></TD><TD VALIGN="TOP">This field contains the maximum number of call appearances at the address that can be on hold.</P></TD></TR><TR><TD VALIGN="TOP">DwMaxNumOnHoldPendingCalls</P></TD><TD VALIGN="TOP">This field contains the maximum number of call appearances at the address that can be on hold pending transfer or conference.</P></TD></TR><TR><TD VALIGN="TOP">DwMaxNumConference</P></TD><TD VALIGN="TOP">This field contains the maximum number of parties that can be conferenced in a single conference call on this address.</P></TD></TR><TR><TD VALIGN="TOP">DwAddrCapFlags</P></TD><TD VALIGN="TOP">This field contains a series of packed bit flags that describe a variety of address capabilities, of type <B>LINEADDRCAPFLAGS</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRCAPFLAGS_ FWDNUMRINGS</P></TD><TD VALIGN="TOP">Specifies whether or not the number of rings for a no answer can be specified when forwarding calls on no answer.</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRCAPFLAGS_ PICKUPGROUPID</P></TD><TD VALIGN="TOP">Specifies whether or not a group ID is required for call pickup.</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRCAPFLAGS_ SECURE</P></TD><TD VALIGN="TOP">Specifies whether or not calls on this address can be made secure at call setup time.</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRCAPFLAGS_ BLOCKIDDEFAULT</P></TD><TD VALIGN="TOP">Specifies whether the network by default sends or blocks caller ID information when making a call on this address. If TRUE, then ID information is blocked by default; if FALSE, then ID information is transmitted by default.</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRCAPFLAGS_ BLOCKIDOVERRIDE</P></TD><TD VALIGN="TOP">Specifies whether or not the default setting for sending or blocking of caller ID information can be overridden per call. If TRUE, override is possible; if FALSE, override is not possible.</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRCAPFLAGS_ DIALED</P></TD><TD VALIGN="TOP">Specifies whether or not an destination address can be dialed on this address for making a call. TRUE if a destination address must be dialed; FALSE if the destination address is fixed (e.g., a "hot phone").</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRCAPFLAGS_ ORIGOFFHOOK</P></TD><TD VALIGN="TOP">Specifies whether or not the originating party's phone can automatically be taken offhook when making calls.</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRCAPFLAGS_ DESTOFFHOOK</P></TD><TD VALIGN="TOP">Specifies whether or not the called party's phone can automatically be forced offhook when making calls.</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRCAPFLAGS_ FWDCONSULT</P></TD><TD VALIGN="TOP">Specifies whether or not call forwarding involves the establishment of a consultation call.</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRCAPFLAGS_ SETUPCONFNULL</P></TD><TD VALIGN="TOP">Specifies whether or not setting up a conference call starts out with an initial call (FALSE) or with no initial call (TRUE).</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRCAPFLAGS_ AUTORECONNECT</P></TD><TD VALIGN="TOP">Specifies whether or not dropping a consultation call automatically reconnects to the call on consultation hold. TRUE if reconnect happens automatically, FALSE otherwise.</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRCAPFLAGS_ COMPLETIONID</P></TD><TD VALIGN="TOP">Specifies whether or not the completion IDs returned by <B>lineCompleteCall</B> are useful and unique. TRUE is useful; FALSE otherwise.</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRCAPFLAGS_ TRANSFERHELD</P></TD><TD VALIGN="TOP">Specifies whether or not a (hard) held call can be transferred. Often, only calls on consultation hold may be able to be transferred.</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRCAPFLAGS_ CONFERENCEHELD</P></TD><TD VALIGN="TOP">Specifies whether or not a (hard) held call can be conferenced to. Often, only calls on consultation hold may be able to be added to as a conference call.</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRCAPFLAGS_  PARTIALDIAL</P></TD><TD VALIGN="TOP">Specifies whether or not partial dialing is available.</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRCAPFLAGS_ FWDSTATUSVALID </P></TD><TD VALIGN="TOP">Specifies whether or not the forwarding status in the <B>LINEADDRESSSTATUS</B> structure for this address is valid.</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRCAPFLAGS_  FWDINTEXTADDR</P></TD><TD VALIGN="TOP">Specifies whether or not internal and externals calls can be forwarded to different forwarding addresses. This flags is only meaningful if forwarding of internal and external calls can be controlled separately. This flag is TRUE if internal and external calls can be forwarded to different destination addresses; FALSE otherwise.</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRCAPFLAGS_  FWDBUSYNAADDR</P></TD><TD VALIGN="TOP">Specifies whether or not call forwarding for busy and no answer can use different forwarding addresses. This flags is only meaningful if forwarding for busy and no answer can be controlled separately. This flag is TRUE if forwarding for busy and no answer can be use different destination addresses; FALSE otherwise.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwCallFeatures</B></P></TD><TD VALIGN="TOP">This field specifies the switching capabilities or features available for all calls on this address, of type <B>LINECALLFEATURE</B>. Invoking a supported feature requires the call to be in the proper state and the underlying line device to be opened in a compatible mode. A zero in a bit position indicates that the corresponding feature is never available; a one indicates that the corresponding feature may be available if the app has the right privileges to the call, and the call is in the appropriate state for the operation to be meaningful. This field allow an aplication to discover early on which call features can be and which can never be supported by the address.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwRemoveFromConfCaps</B></P></TD><TD VALIGN="TOP">This field specifies the address' capabilities for removing calls from a conference call, of type <B>LINEREMOVEFROMCONF</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINEREMOVEFROMCONF_ NONE</P></TD><TD VALIGN="TOP">Parties cannot be removed from the conference call.</P></TD></TR><TR><TD VALIGN="TOP">LINEREMOVEFROMCONF_ LAST</P></TD><TD VALIGN="TOP">Only the most recently added party can be removed from the conference call.</P></TD></TR><TR><TD VALIGN="TOP">LINEREMOVEFROMCONF_ ANY</P></TD><TD VALIGN="TOP">Any participating party can be removed from the conference call.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwTransferModes</B></P></TD><TD VALIGN="TOP">This field specifies the address' capabilities for resolving transfer requests, of type <B>LINETRANSFERMODE</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINETRANSFERMODE_ TRANSFER</P></TD><TD VALIGN="TOP">Resolve the initiated transfer by transferring the initial call to the consultation call.</P></TD></TR><TR><TD VALIGN="TOP">LINETRANSFERMODE_ CONFERENCE</P></TD><TD VALIGN="TOP">Resolve the initiated transfer by conferencing all three parties into a three-way conference call. A conference call is created and returned to the application.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwParkModes</B></P></TD><TD VALIGN="TOP">Specifies the different call park modes available at this address, of type <B>LINEPARKMODE</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINEPARKMODE_ DIRECTED</P></TD><TD VALIGN="TOP">Specifies directed call park. The address where the call is to be parked must be supplied to the switch.</P></TD></TR><TR><TD VALIGN="TOP">LINEPARKMODE_ NONDIRECTED</P></TD><TD VALIGN="TOP">Specifies non directed call park. The address where the call is parked is selected by the switch and provided by the switch to the application.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwForwardModes</B></P></TD><TD VALIGN="TOP">Specifies the different modes of forwarding available for this address, of type <B>LINEFORWARDMODE</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINEFORWARDMODE_ UNCOND</P></TD><TD VALIGN="TOP">Forward all calls unconditionally irrespective of their origin. Use this value when unconditional forwarding for internal and external calls cannot be controlled separately. Unconditional forwarding overrides forwarding on busy and/or no answer conditions.  </P></TD></TR><TR><TD VALIGN="TOP">LINEFORWARDMODE_ UNCONDINTERNAL</P></TD><TD VALIGN="TOP">Forward all internal calls unconditionally. Use this value when unconditional forwarding for internal and external calls can be controlled separately.</P></TD></TR><TR><TD VALIGN="TOP">LINEFORWARDMODE_ UNCONDEXTERNAL</P></TD><TD VALIGN="TOP">Forward all external calls unconditionally. Use this value when unconditional forwarding for internal and external calls can be controlled separately.</P></TD></TR><TR><TD VALIGN="TOP">LINEFORWARDMODE_ UNCONDSPECIFIC</P></TD><TD VALIGN="TOP">Forward all calls that originated at a specified address unconditionally (selective call forwarding).</P></TD></TR><TR><TD VALIGN="TOP">LINEFORWARDMODE_ BUSY</P></TD><TD VALIGN="TOP">Forward all calls on busy irrespective of their origin. Use this value when forwarding for internal and external calls on busy and no answer cannot be controlled separately.</P></TD></TR><TR><TD VALIGN="TOP">LINEFORWARDMODE_ BUSYINTERNAL</P></TD><TD VALIGN="TOP">Forward all internal calls on busy. Use this value when forwarding for internal and external calls on busy and no answer can be controlled separately.</P></TD></TR><TR><TD VALIGN="TOP">LINEFORWARDMODE_ BUSYEXTERNAL</P></TD><TD VALIGN="TOP">Forward all external calls on busy. Use this value when forwarding for internal and external calls on busy and no answer can be controlled separately.</P></TD></TR><TR><TD VALIGN="TOP">LINEFORWARDMODE_ BUSYSPECIFIC</P></TD><TD VALIGN="TOP">Forward all calls that originated at a specified address on busy (selective call forwarding).</P></TD></TR><TR><TD VALIGN="TOP">LINEFORWARDMODE_ NOANSW</P></TD><TD VALIGN="TOP">Forward all calls on no answer irrespective of their origin. Use this value when call forwarding for internal and external calls on no answer cannot be controlled separately.</P></TD></TR><TR><TD VALIGN="TOP">LINEFORWARDMODE_ NOANSWINTERNAL</P></TD><TD VALIGN="TOP">Forward all internal calls on no answer. Use this value when forwarding for internal and external calls on no answer can be controlled separately.</P></TD></TR><TR><TD VALIGN="TOP">LINEFORWARDMODE_ NOANSWEXTERNAL</P></TD><TD VALIGN="TOP">Forward all external calls on no answer. Use this value when forwarding for internal and external calls on no answer can be controlled separately.</P></TD></TR><TR><TD VALIGN="TOP">LINEFORWARDMODE_ NOANSWSPECIFIC</P></TD><TD VALIGN="TOP">Forward all calls that originated at a specified address on no answer (selective call forwarding).</P></TD></TR><TR><TD VALIGN="TOP">LINEFORWARDMODE_ BUSYNA</P></TD><TD VALIGN="TOP">Forward all calls on busy/no answer irrespective of their origin. Use this value when forwarding for internal and external calls on busy and no answer cannot be controlled separately.</P></TD></TR><TR><TD VALIGN="TOP">LINEFORWARDMODE_ BUSYNAINTERNAL</P></TD><TD VALIGN="TOP">Forward all internal calls on busy/no answer. Use this value when call forwarding on busy and no answer cannot be controlled separately for internal calls.</P></TD></TR><TR><TD VALIGN="TOP">LINEFORWARDMODE_ BUSYNAEXTERNAL</P></TD><TD VALIGN="TOP">Forward all external calls on busy/no answer. Use this value when call forwarding on busy and no answer cannot be controlled separately for internal calls.</P></TD></TR><TR><TD VALIGN="TOP">LINEFORWARDMODE_ BUSYNASPECIFIC</P></TD><TD VALIGN="TOP">Forward all calls that originated at a specified address on busy/no answer (selective call forwarding).</P></TD></TR><TR><TD VALIGN="TOP"><B>DwMaxCallCompletions</B></P></TD><TD VALIGN="TOP">Specifies the maximum number of concurrent call completion requests can be outstanding on this line device. Zero implies that call completion is not available.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwCallCompletionCond</B></P></TD><TD VALIGN="TOP">Specifies the different call conditions under which call completion can be requested, of type <B>LINECALLCOMPLCOND</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINECALLCOMPLCOND_ BUSY</P></TD><TD VALIGN="TOP">Complete the call under the busy condition.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLCOMPLCOND_ NOANSWER</P></TD><TD VALIGN="TOP">Complete the call under the ringback no answer condition.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwCallCompletionModes</B></P></TD><TD VALIGN="TOP">Specifies the way in which the call can be completed, of type <B>LINECALLCOMPLMODE</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINECALLCOMPLMODE_ CAMPON</P></TD><TD VALIGN="TOP">Queues the call until the call can be completed.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLCOMPLMODE_ CALLBACK</P></TD><TD VALIGN="TOP">Requests the called station to return the call when it returns to idle.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLCOMPLMODE_ INTRUDE</P></TD><TD VALIGN="TOP">Adds the app to the existing call at the called station if busy (barge in).</P></TD></TR><TR><TD VALIGN="TOP">LINECALLCOMPLMODE_ MESSAGE</P></TD><TD VALIGN="TOP">Leave a short predefined message for the called station (Leave Word Calling). A specific message can be identified<I>. </I></P></TD></TR><TR><TD VALIGN="TOP"><B>DwNumCompletionMessages</B></P></TD><TD VALIGN="TOP">Specifies the number of call completion messages that can be selected from when using the LINECALLCOMPLMODE_MESSAGE option. Individual messages are identified by values in the range 0 through <B>dwNumCompletionMessages</B> - 1.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwCompletionMsgTextEntrySize</B></P></TD><TD VALIGN="TOP">Specifies the size in bytes of each of the call completion text descriptions pointed at by <B>dwCompletionMsgTextSize/Offset</B>.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwCompletionMsgTextSize</B></P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>dwCompletionMsgTextOffset</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset from the beginning of this data structure in bytes of the variable sized field containing descriptive text about each of the call completion messages. Each message is <B>dwCompletionMsgTextEntrySize</B> bytes long. The string format of these textual descriptions is indicated by <B>dwStringFormat</B> in the line's device capabilities.</P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B>.</P></TD><TD VALIGN="TOP">Device specific extensions should use the DevSpecific (<B>dwDevSpecificSize</B> and <B>dwDevSpecificOffset</B>) variable sized area of this data structure</P></TD></TR><TR><TD VALIGN="TOP">Comments.</P></TD><TD VALIGN="TOP">None</P></TD></TR><TR><TD VALIGN="TOP">See Also Functions:  </P></TD><TD VALIGN="TOP">lineGetAddressCaps</P></TD></TR><TR><TD VALIGN="TOP">Data Types: </P></TD><TD VALIGN="TOP">LINEADDRESSMODE, LINEBEARERMODE, LINEMEDIAMODE, LINECALLFEATURE, LINEFORWARDMODE, LINECALLORIGIN, LINEPARKMODE, LINECALLCOMPLCOND, LINECALLCOMPLMODE</P></TD></TR></TBODY></TABLE>
<BR></P><B>LINEADDRESSMODE</B></P>
<P>The LINEADDRESSMODE bit flag constants describe various ways of identifying an address on a line device.</P>
<P>LINEADDRESSMODE_ADDRESSID0x00000001<BR>LINEADDRESSMODE_DIALABLEADDR 0x00000002</P>
<P><B>Values    </B>The <B>LINEADDRESSMODE</B> constants have the following values.</P>
<P><B>LineAddressMode_addressID</B>    The address is specified via a small integer in the range 0 to <I>dwNumAddresses </I>- 1, where <I>dwNumAddresses</I> is the value in the line's device capabilities.</P>
<P><B>LineAddressMode_dialableAddr</B>    The address is specified via its phone number.</P>
<P><B>Extensibility    </B>The high order 16 bits can be assigned for device specific extensions. The low order 16 bits are reserved.</P>
<P><B>Comments    </B>This data type is used to select an address on a line on which to originate a call. The usual model would select the address by means of its address ID. Address IDs are the mechanism used to identify addresses throughout the API. However, in some environments when making a call it is often more practical to identify a call's originating address by phone number rather than by address ID. One example is in the possible modeling of large numbers of stations (third party) on the switch by means of one line device with lots of addresses. The line represents the set of all stations, and each station is mapped to an address with its own primary phone number and address ID. </P>
<P>See AlsoFunctions:      lineMakeCall, lineGetAddressCaps</P>
<P>Data Types:      LINEADDRESSCAPS</P>
<P>LINEADDRESSSHARING</P>
<P>The <B>LINEADDRESSSHARING</B> bit flag constants describe various ways an address can be shared between lines.</P>
<P>LINEADDRESSSHARING_PRIVATE0x00000001<BR>LINEADDRESSSHARING_BRIDGEDEXCL0x00000002<BR>LINEADDRESSSHARING_BRIDGEDNEW0x00000004<BR>LINEADDRESSSHARING_BRIDGEDSHARED0x00000008<BR>LINEADDRESSSHARING_MONITORED0x00000010</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="154pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Values</B></P></TD><TD VALIGN="TOP">The <B>LINEADDRESSSHARING</B> constants have the following values.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineAddressSharing_private</B></P></TD><TD VALIGN="TOP">The address is private to the user's line, it is not assigned to any other station.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineAddressSharing_bridgedExcl</B></P></TD><TD VALIGN="TOP">The address is bridged to one or more other stations. The first line to activate a call on the line will have exclusive access to the address and calls that may exist on it, other lines will no be able to use the bridged address while in use.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineAddressSharing_bridgedNew</B></P></TD><TD VALIGN="TOP">The address is bridged with one or more other stations. The first line to activate a call on the line will have exclusive access to only the corresponding call. Other apps that use the address will result in new and separate call appearances.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineAddressSharing_bridgedShared</B></P></TD><TD VALIGN="TOP">The address is bridged with one or more other lines. All bridged parties can share in calls on the address which then functions as a conference.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineAddressSharing_monitored</B></P></TD><TD VALIGN="TOP">This is an address whose idle/busy status is made available to this line.</P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP">The high order 16 bits can be assigned for device specific extensions. The low order 16 bits are reserved.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">The way in which an address is shared across lines affects to some extent the behavior of that address. <B>LINE_CALLSTATE</B> and <B>LINE_ADDRESSSTATE</B> messages are sent to the application also in response to activities by the bridging stations. It is via these messages that an application can track the status of the address.</P></TD></TR><TR><TD VALIGN="TOP">See AlsoData Types:</P></TD><TD VALIGN="TOP">  LINEADDRESSCAPS</P></TD></TR></TBODY></TABLE>
<BR></P><P>LINEADDRESSSTATE</P>
<P>The <B>LINEADDRESSSTATE</B> bit flag constants describe various address status items.</P>
<P>LINEADDRESSSTATE_OTHER0x00000001<BR>LINEADDRESSSTATE_DEVSPECIFIC0x00000002<BR>LINEADDRESSSTATE_INUSEZERO0x00000004<BR>LINEADDRESSSTATE_INUSEONE0x00000008<BR>LINEADDRESSSTATE_INUSEMANY0x00000010<BR>LINEADDRESSSTATE_NUMCALLS0x00000020<BR>LINEADDRESSSTATE_FORWARD0x00000040<BR>LINEADDRESSSTATE_TERMINALS0x00000080</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="154pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Values</B></P></TD><TD VALIGN="TOP">The <B>LINEADDRESSSTATE</B> constants have the following values.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineAddressState_other</B></P></TD><TD VALIGN="TOP">An status item or multiple items in the address' status not listed below have changed. The app should check the current address status to determine which items have changed.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineAddressState_devSpecific</B></P></TD><TD VALIGN="TOP">The device specific item of the address status has changed.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineAddressState_inUseZero</B></P></TD><TD VALIGN="TOP">The address has changed to idle; i.e., it is now in use by zero stations.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineAddressState_inUseOne</B></P></TD><TD VALIGN="TOP">The address has changed from being idle or from being in use by many bridged stations to being in use by just one station.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineAddressState_inUseMany</B></P></TD><TD VALIGN="TOP">The monitored or bridged address has changed to being in use by one station to being used by more than one station.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineAddressState_numCalls</B></P></TD><TD VALIGN="TOP">The number of calls on the address has changed. This is the result of either a new inbound call, or an outbound call on the address, a call changing its hold status, etc.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineAddressState_forward</B></P></TD><TD VALIGN="TOP">The forwarding status of the address has changed, including possibly the number of rings for determining a no answer condition. The app should check the address status to determine details about the address' current forwarding status.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineAddressState_terminals</B></P></TD><TD VALIGN="TOP">The terminal settings for the address have changed.</P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP">None. All 32 bits are reserved.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">An application is notified about changes to these status items via the <B>LINE_ADDRESSSTATUS</B> message. The address' device capabilities indicate which address state changes can possibly be reported for this address.</P></TD></TR><TR><TD VALIGN="TOP">See AlsoMessages:  </P></TD><TD VALIGN="TOP">LINE_ADDRESSSTATUS</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="154pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Data Types:</P></TD><TD VALIGN="TOP">LINEADDRESSCAPS</P></TD><TD VALIGN="TOP"></P></TD></TR></TBODY></TABLE>
<BR></P><P>LINEADDRESSSTATUS</P>
<P>The <B>LINEADDRESSSTATUS</B> structure describes the current status of an address.</P>
<P>typedef struct lineaddressstatus_tag {<BR>DWORDdwTotalSize;<BR>DWORDdwNeededSize;<BR>DWORDdwUsedSize;<BR><BR>DWORDdwNumInUse;<BR>DWORDdwNumActiveCalls;<BR>DWORDdwNumOnHoldCalls;<BR>DWORDdwNumOnHoldPendCalls;<BR>DWORDdwAddressFeatures;<BR><BR>DWORDdwNumRingsNoAnswer;<BR>DWORDdwForwardNumEntries;<BR>DWORDdwForwardSize;<BR>DWORDdwForwardOffset;<BR><BR>DWORDdwTerminalModesSize;<BR>DWORDdwTerminalModesOffset;<BR><BR>DWORDdwDevSpecificSize;<BR>DWORDdwDevSpecificOffset;<BR>} LINEADDRESSSTATUS, FAR *LPLINEADDRESSSTATUS;</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="154pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Fields</B>:</P></TD><TD VALIGN="TOP">The <B>LINEADDRESSSTATUS</B> structure contains the following fields</P></TD></TR><TR><TD VALIGN="TOP"><B>dwTotalSize</B></P></TD><TD VALIGN="TOP">The total size in bytes allocated to this data structure.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwNeededSize</B></P></TD><TD VALIGN="TOP">The size in bytes for this data structure that is needed to hold all the returned information.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwUsedSize</B></P></TD><TD VALIGN="TOP">The size in bytes of this data structure that contains useful information.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwNumInUse</B></P></TD><TD VALIGN="TOP">Specifies the number stations that are currently using the address. </P></TD></TR><TR><TD VALIGN="TOP"><B>DwNumCalls</B></P></TD><TD VALIGN="TOP">Specifies the number of calls that currently exist on the address. If zero, then no calls exist, and the address is idle.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwAddressFeatures</B></P></TD><TD VALIGN="TOP">This field specifies the address-related API functions that can be invoked on the address in its current state, of type <B>LINEADDRFEATURE</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRFEATURE_FORWARD</P></TD><TD VALIGN="TOP">The address can be forwarded.</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRFEATURE_MAKECALL</P></TD><TD VALIGN="TOP">An outbound call can placed on the address.</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRFEATURE_PICKUP</P></TD><TD VALIGN="TOP">A call can be picked up at the address.</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRFEATURE_SETMEDIACONTROL</P></TD><TD VALIGN="TOP">Media control can be set on this address.</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRFEATURE_SETTERMINAL</P></TD><TD VALIGN="TOP">The terminal modes for this address can be set.</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRFEATURE_SETUPCONF</P></TD><TD VALIGN="TOP">A conference call with a NULL initial call can be set up at this address.</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRFEATURE_UNCOMPLETECALL</P></TD><TD VALIGN="TOP">Call completion requests can be canceled at his address.</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRFEATURE_UNPARK</P></TD><TD VALIGN="TOP">Calls can be unparked using this address.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwNumRingsNoAnswer</B></P></TD><TD VALIGN="TOP">Specifies the number of rings set for this address before an unanswered call is considered as no answer.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwForwardNumEntries</B></P></TD><TD VALIGN="TOP">Specifies the number of entries in the array referred to by <B>dwForwardSize</B> and <B>dwForwardOffset</B>.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwForwardOffset<BR>dwForwardSize</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset in bytes from the beginning of this data structure of the variable sized field that describes the address's forwarding information. This information is an array of <B>dwForwardNumEntries</B> elements, of type <B>LINEFORWARD</B>. The offsets of the addresses in these entries are relative to the beginning of the array.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwTerminalModesSize<BR>dwTerminalModesOffset</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset in bytes from the beginning of this data structure of the variable sized device field containing an array with DWORD-sized entries, of type <B>LINETERMMODE</B>. This array is indexed by terminal IDs, in the range from zero to <B>dwNumTerminals</B> -1.  Each entry in the array specifies the current terminal modes for the corresponding terminal set via the <B>lineSetTerminal</B> operation for this address. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINETERMMODE_LAMPS</P></TD><TD VALIGN="TOP">This are lamp events sent from the line to the terminal.</P></TD></TR><TR><TD VALIGN="TOP">LINETERMMODE_BUTTONS</P></TD><TD VALIGN="TOP">These are button press events sent from the terminal to the line.</P></TD></TR><TR><TD VALIGN="TOP">LINETERMMODE_DISPLAY</P></TD><TD VALIGN="TOP">This is display information sent from the line to the terminal.</P></TD></TR><TR><TD VALIGN="TOP">LINETERMMODE_RINGER</P></TD><TD VALIGN="TOP">This is ringer control information sent from the switch to the terminal.</P></TD></TR><TR><TD VALIGN="TOP">LINETERMMODE_HOOKSWITCH</P></TD><TD VALIGN="TOP">These are hookswitch event sent between the terminal and the line.</P></TD></TR><TR><TD VALIGN="TOP">LINETERMMODE_MEDIAFROMTERM</P></TD><TD VALIGN="TOP">This is the unidirectional media stream from the terminal to the line associated with a call on the line. Use this value when routing of both unidirectional channels of a call's media stream can be controlled independently.</P></TD></TR><TR><TD VALIGN="TOP">LINETERMMODE_MEDIATOTERM</P></TD><TD VALIGN="TOP">This is the unidirectional media stream from the line to the terminal associated with a call on the line. Use this value when routing of both unidirectional channels of a call's media stream can be controlled independently.</P></TD></TR><TR><TD VALIGN="TOP">LINETERMMODE_MEDIABIDIR</P></TD><TD VALIGN="TOP">This is the bidirectional media stream associated with a call on the line and the terminal. Use this value when routing of both unidirectional channels of a call's media stream cannot be controlled independently.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwDevSpecificSize<BR>dwDevSpecificOffset</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset in bytes from the beginning of this data structure of the variable sized device specific field. </P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP">Device specific extensions should use the DevSpecific (<B>dwDevSpecificSize</B> and <B>dwDevSpecificOffset</B>) variable sized area of this data structure.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">This data structure is returned by <B>lineGetAddressStatus</B>. When items in this data structure change as a consequence of activities on the address, then a <B>LINE_ADDRESSSTATE</B> message is sent to the application. A parameter to this message is the address state, of type <B>LINEADDRESSSTATE</B>, which is an an indication of the status item in this record that changed.</P></TD></TR><TR><TD VALIGN="TOP">See AlsoFunctions:</P></TD><TD VALIGN="TOP">  lineGetAddressStatus</P></TD></TR><TR><TD VALIGN="TOP">Data Types:</P></TD><TD VALIGN="TOP">  LINETERMMODE, LINEADDRFEATURE</P></TD></TR></TBODY></TABLE>
<BR></P><P>LINEADDRFEATURE</P>
<P>The <B>LINEADDRFEATURE</B> constants list the operations that can be invoked on an address using this API.</P>
<P>LINEADDRFEATURE_FORWARD0x00000001<BR>LINEADDRFEATURE_MAKECALL0x00000002<BR>LINEADDRFEATURE_PICKUP0x00000004<BR>LINEADDRFEATURE_SETMEDIACONTROL0x00000008<BR>LINEADDRFEATURE_SETTERMINAL0x00000010<BR>LINEADDRFEATURE_SETUPCONF0x00000020<BR>LINEADDRFEATURE_UNCOMPLETECALL0x00000040<BR>LINEADDRFEATURE_UNPARK0x00000080</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="154pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Values</B></P></TD><TD VALIGN="TOP">Each of the <B>LINEADDRFEATURE</B> values correspond to the API operation with the same name. Values are:</P></TD></TR><TR><TD VALIGN="TOP"><B>LineAddrFeature_forward</B></P></TD><TD VALIGN="TOP">The address can be forwarded.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineAddrFeature_makeCall</B></P></TD><TD VALIGN="TOP">An outbound call can placed on the address.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineAddrFeature_pickup</B></P></TD><TD VALIGN="TOP">A call can be picked up at the address.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineAddrFeature_setMediaControl</B></P></TD><TD VALIGN="TOP">Media control can be set on this address.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineAddrFeature_setTerminal</B></P></TD><TD VALIGN="TOP">The terminal modes for this address can be set.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineAddrFeature_setupConf</B></P></TD><TD VALIGN="TOP">A conference call with a NULL initial call can be set up at this address.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineAddrFeature_uncompleteCall</B></P></TD><TD VALIGN="TOP">Call completion requests can be canceled at his address.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineAddrFeature_unpark</B></P></TD><TD VALIGN="TOP">Calls can be unparked using this address.</P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP">None. All 32 bits are reserved.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">This data type is used both in <B>LINEADDRESSCAPS</B> (returned by <B>lineGetAddressCaps</B>) and in <B>LINEADDRESSSTATUS</B> (returned by <B>lineGetAddressStatus</B>). <B>LINEADDRESSCAPS</B> reports the availability of the address features by the service provider (mainly the switch) for a given address. An application would make this determination when it initializes. <B>LINEADDRESSSTATUS</B> reports for a given address which address features can actually be invoked while the address is in the current state. An application would make this determination dynamically, after address state changes, typically caused by call-related activities on the address.</P></TD></TR><TR><TD VALIGN="TOP">See AlsoFunctions:</P></TD><TD VALIGN="TOP">  lineGetAddressStatus, lineGetAddressCaps</P></TD></TR><TR><TD VALIGN="TOP">Data Types:</P></TD><TD VALIGN="TOP">  LINEADDRESSSTATUS, LINEADDRESSCAPS</P></TD></TR></TBODY></TABLE>
<BR></P><P>LINEANSWERMODE</P>
<P>The <B>LINEANSWERMODE</B> bit flag constants describe how an existing active call on a line device is affected by answering another <I>offering</I> call on the same line. </P>
<P>LINEANSWERMODE_NONE0x00000001<BR>LINEANSWERMODE_DROP0x00000002<BR>LINEANSWERMODE_HOLD0x00000004    <B>Values</B>The <B>LINEANSWERMODE</B> constants have the following values.</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="130pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>LineAnswerMode_none</B></P></TD><TD VALIGN="TOP">Answering another call on the same line has no effect on the existing active call(s) on the line.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineAnswerMode_drop</B></P></TD><TD VALIGN="TOP">The currently active call will automatically be dropped.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineAnswerMode_hold</B></P></TD><TD VALIGN="TOP">The currently active call will automatically be placed on hold.</P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP">The high order 16 bits can be assigned for device specific extensions. The low order 16 bits are reserved.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">If a call comes in (is offered) at the time another call is already active, then the new call is connected to by invoking <B>lineAnswer</B>. The effect this has on the existing active call depends on the line's device capabilities. The first call may be unaffected, it may automatically be dropped, or it may automatically be placed on hold.</P></TD></TR><TR><TD VALIGN="TOP">See AlsoData Types:</P></TD><TD VALIGN="TOP">  LINEDEVCAPS</P></TD></TR></TBODY></TABLE>
<BR></P><P>LINEBEARERMODE</P>
<P>The <B>LINEBEARERMODE</B> bit flag constants describe different bearer modes of a call. When an application makes a call, it can request a specific bearer mode. These modes are used to select a certain quality of service for the requested connection from the underlying telephone network. Bearer modes available on a given line are a device capability of the line. </P>
<P>LINEBEARERMODE_VOICE0x00000001<BR>LINEBEARERMODE_SPEECH0x00000002<BR>LINEBEARERMODE_MULTIUSE0x00000004<BR>LINEBEARERMODE_DATA0x00000008<BR>LINEBEARERMODE_ALTSPEECHDATA0x00000010<BR>LINEBEARERMODE_NONCALLSIGNALING0x00000020</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="154pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Values</B></P></TD><TD VALIGN="TOP">The <B>LINEBEARERMODE</B> constants have the following values.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineBearerMode_voice</B></P></TD><TD VALIGN="TOP">This is a regular 3.1kHz analog voice grade bearer service. Bit integrity is not assured. Voice can support fax and modem media modes.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineBearerMode_speech</B></P></TD><TD VALIGN="TOP">This corresponds to G.711 speech transmission on the call. The network may use processing techniques such as analog transmission, echo cancellation and compression/decompression. Bit integrity is not assured. Speech is not intended to support fax and modem media modes.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineBearerMode_multiUse</B></P></TD><TD VALIGN="TOP">The multi-use mode defined by ISDN.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineBearerMode_data</B></P></TD><TD VALIGN="TOP">The unrestricted data transfer on the call. The data rate is specified separately. </P></TD></TR><TR><TD VALIGN="TOP"><B>LineBearerMode_altSpeechData</B></P></TD><TD VALIGN="TOP">The alternate transfer of speech or unrestricted data on the same call (ISDN).</P></TD></TR><TR><TD VALIGN="TOP"><B>LineBearerMode_nonCallSignaling</B></P></TD><TD VALIGN="TOP">This corresponds to a non call-associated signaling connection from the app to the service provider or switch (treated as a "media stream" by the Telephony API).  </P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP">The high order 16 bits can be assigned for device specific extensions. The low order 16 bits are reserved.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">Note that bearer mode and media mode are different notions. The bearer mode of a call is an indication of the quality of the telephone connection as provided primarily by the network. The media mode of a call is an indication of the type of information stream that is exchanged over that call. Group 3 fax or data modem are media modes that use a call with a 3.1kHz voice bearer mode. </P></TD></TR><TR><TD VALIGN="TOP">See AlsoData Types:</P></TD><TD VALIGN="TOP">  LINECALLPARAMS, LINECALLINFO</P></TD></TR></TBODY></TABLE>
<BR></P><P>LINEBUSYMODE</P>
<P>The <B>LINEBUSYMODE</B> bit flag constants describe different busies that the switch or network may generate. The different busy signals typically indicate that a different resource required to make a call is currently in use.</P>
<P>LINEBUSYMODE_STATION0x00000001<BR>LINEBUSYMODE_TRUNK0x00000002<BR>LINEBUSYMODE_UNKNOWN0x00000004<BR>LINEBUSYMODE_UNAVAIL0x00000008</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="126pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Values</P></TD><TD VALIGN="TOP">The <B>LINEBUSYMODE</B> constants have the following values.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineBusyMode_station</B></P></TD><TD VALIGN="TOP">The busy signal indicates that the called party's station is busy. This is usually signaled via a "normal" busy tone.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineBusyMode_trunk</B></P></TD><TD VALIGN="TOP">The busy signal indicates that a trunk or circuit is busy. This is usually signaled via a "fast" busy tone.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineBusyMode_unkown</B></P></TD><TD VALIGN="TOP">The busy signal's specific mode is currently unkown, but may become known later.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineBusyMode_unavail</B></P></TD><TD VALIGN="TOP">The busy signal's specific mode is unavailable and will not become known.</P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP">The high order 16 bits can be assigned for device specific extensions. The low order 16 bits are reserved.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">Note that busy signals may be sent as inband tones or out of band messages. The API makes no assumption about the specific signaling mechanism.</P></TD></TR><TR><TD VALIGN="TOP">See AlsoData Types:</P></TD><TD VALIGN="TOP">  LINECALLSTATUS</P></TD></TR></TBODY></TABLE>
<BR></P><P>LINECALLCOMPLCOND</P>
<P>The <B>LINECALLCOMPLCOND</B> bit flag constants describe different ways in which a call can be completed.</P>
<P>LINECALLCOMPLCOND_BUSY0x00000001<BR>LINECALLCOMPLCOND_NOANSWER0x00000002</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="145pt" VALIGN="TOP"><COL WIDTH="262pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Values</P></TD><TD VALIGN="TOP">The <B>LINECALLCOMPLCOND</B> constants have the following values.</P></TD></TR><TR><TD VALIGN="TOP">  <B>LineCallComplCond_busy</B></P></TD><TD VALIGN="TOP">Completion of the call under busy conditions.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallComplCond_noAnswer</B></P></TD><TD VALIGN="TOP">Completion of the call under ringback no answer conditions.</P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP">The high order 16 bits can be assigned for device specific extensions. The low order 16 bits are reserved.</P></TD></TR><TR><TD VALIGN="TOP">Comments</P></TD><TD VALIGN="TOP">None.</P></TD></TR><TR><TD VALIGN="TOP">See AlsoFunctions:</P></TD><TD VALIGN="TOP">  lineCompleteCall</P></TD></TR><TR><TD VALIGN="TOP">Data Types:</P></TD><TD VALIGN="TOP">  LINEADDRESSCAPS</P></TD></TR></TBODY></TABLE>
<BR></P><P>LINECALLCOMPLMODE</P>
<P>The <B>LINECALLCOMPLMODE</B> bit flag constants describe different ways in which a call can be completed.</P>
<P>LINECALLCOMPLMODE_CAMPON0x00000001<BR>LINECALLCOMPLMODE_CALLBACK0x00000002<BR>LINECALLCOMPLMODE_INTRUDE0x00000004<BR>LINECALLCOMPLMODE_MESSAGE0x00000008</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="159pt" VALIGN="TOP"><COL WIDTH="276pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Values</P></TD><TD VALIGN="TOP">The <B>LINECALLCOMPLMODE</B> constants have the following values.</P></TD></TR><TR><TD VALIGN="TOP">  <B>LineCallComplMode_campOn</B></P></TD><TD VALIGN="TOP">Queues the call until the call can be completed.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallComplMode_callBack</B></P></TD><TD VALIGN="TOP">Requests the called station to return the call when it returns to idle.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallComplMode_intrude</B></P></TD><TD VALIGN="TOP">Adds the app to the existing call at the called station (barge in).</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallComplMode_message</B></P></TD><TD VALIGN="TOP">Leave a short predefined message for the called station (Leave Word Calling). The message to be sent is specified separately<I>. </I></P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP">The high order 16 bits can be assigned for device specific extensions. The low order 16 bits are reserved.</P></TD></TR><TR><TD VALIGN="TOP">Comments</P></TD><TD VALIGN="TOP">None.</P></TD></TR><TR><TD VALIGN="TOP">See AlsoFunctions:</P></TD><TD VALIGN="TOP">  lineCompleteCall</P></TD></TR><TR><TD VALIGN="TOP">Data Types:</P></TD><TD VALIGN="TOP">  LINEADDRESSCAPS</P></TD></TR></TBODY></TABLE>
<BR></P><P>LINECALLFEATURE</P>
<P>The <B>LINECALLFEATURE</B> constants list the operations that can be invoked on a call using this API.</P>
<P>LINECALLFEATURE_ACCEPT0x00000001<BR>LINECALLFEATURE_ADDTOCONF 0x00000002<BR>LINECALLFEATURE_ANSWER0x00000004<BR>LINECALLFEATURE_BLINDTRANSFER0x00000008<BR>LINECALLFEATURE_COMPLETECALL0x00000010<BR>LINECALLFEATURE_COMPLETETRANSF0x00000020<BR>LINECALLFEATURE_DIAL0x00000040<BR>LINECALLFEATURE_DROP0x00000080<BR>LINECALLFEATURE_GATHERDIGITS0x00000100<BR>LINECALLFEATURE_GENERATEDIGITS0x00000200<BR>LINECALLFEATURE_GENERATETONE0x00000400<BR>LINECALLFEATURE_HOLD0x00000800<BR>LINECALLFEATURE_MONITORDIGITS0x00001000<BR>LINECALLFEATURE_MONITORMEDIA0x00002000<BR>LINECALLFEATURE_MONITORTONES0x00004000<BR>LINECALLFEATURE_PARK0x00008000<BR>LINECALLFEATURE_PREPAREADDCONF0x00010000<BR>LINECALLFEATURE_REDIRECT0x00020000<BR>LINECALLFEATURE_REMOVEFROMCONF0x00040000<BR>LINECALLFEATURE_SECURECALL0x00080000<BR>LINECALLFEATURE_SENDUSERUSER0x00100000<BR>LINECALLFEATURE_SETCALLPARAMS0x00200000<BR>LINECALLFEATURE_SETMEDIACONTROL0x00400000<BR>LINECALLFEATURE_SETTERMINAL0x00800000<BR>LINECALLFEATURE_SETUPCONF0x01000000<BR>LINECALLFEATURE_SETUPTRANSFER0x02000000<BR>LINECALLFEATURE_SWAPHOLD0x04000000<BR>LINECALLFEATURE_UNHOLD0x08000000</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="159pt" VALIGN="TOP"><COL WIDTH="253pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Values</P></TD><TD VALIGN="TOP">Each of the <B>LINECALLFEATURE</B> values correspond to the API operation with the same name. The list is not repeated here.</P></TD></TR><TR><TD VALIGN="TOP">Extensibility</P></TD><TD VALIGN="TOP">None.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">This data type is used both in <B>LINEADDRESSCAPS</B> (returned by <B>lineGetAddressCaps</B>) and in <B>LINECALLSTATUS</B> (returned by <B>lineGetCallStatus</B>). <B>LINEADDRESSCAPS</B> reports the general availability of the call features by the API implementation (mainly the switch) on the specified address. An application would use this information when it initializes in order to determine what it may be able to do later when calls actuall do exist. <B>LINECALLSTATUS</B> reports for the specified call which call features can actually be invoked while the call is in the current call state. The latter takes call privileges into account. An application would make this determination dynamically, after call state changes.</P></TD></TR><TR><TD VALIGN="TOP">See AlsoFunctions:</P></TD><TD VALIGN="TOP">  lineGetCallStatus, lineGetAddressCaps</P></TD></TR><TR><TD VALIGN="TOP">Messages: </P></TD><TD VALIGN="TOP"> LINE_CALLSTATE</P></TD></TR><TR><TD VALIGN="TOP">Data Types:</P></TD><TD VALIGN="TOP">  LINECALLSTATUS, LINEADDRESSCAPS</P></TD></TR></TBODY></TABLE>
<BR></P><P>LINECALLINFO</P>
<P>The <B>LINECALLINFO</B> structure contains information about a call. This information remains relatively fixed for the duration of the call and is obtained via <B>lineGetCallInfo</B>. If a part of the structure does change, then a <B>LINE_CALLINFO</B> message is sent to the application indicating which information item has changed. Dynamically changing information about a call, such as call progress status, is available via the <B>LINECALLSTATUS </B>structure, returned via the function <B>lineGetCallStatus</B>.</P>
<P>typedef struct linecallinfo_tag {<BR>DWORDdwTotalSize;<BR>DWORDdwNeededSize;<BR>DWORDdwUsedSize;<BR><BR>HLINEhLine;<BR>DWORDdwLineDeviceID;<BR>DWORDdwAddressID;<BR><BR>DWORDdwBearerMode;<BR>DWORDdwRate;<BR>DWORDdwMediaMode;<BR>DWORDdwDestAddressSize;<BR>DWORDdwDestAddressOffset;<BR><BR>DWORDdwAppSpecific;<BR>DWORDdwCallID;<BR>DWORDdwRelatedCallID;<BR>DWORDdwCallParamFlags;<BR>DWORDdwCallStates;<BR><BR>DWORDdwMonitorDigitModes;<BR>DWORDdwNumMonitorTone;<BR>DWORDdwMonitorMediaModes;<BR>LINEDIALPARAMSDialParams;<BR><BR>DWORDdwOrigin;<BR>DWORDdwReason;<BR>DWORDdwCompletionID;<BR>DWORDdwNumOwners;<BR>DWORDdwNumMonitors;<BR><BR>DWORDdwCountryCode;<BR>DWORDdwTrunk;<BR><BR>DWORDdwCallerIDFlags;<BR>DWORDdwCallerIDSize;<BR>DWORDdwCallerIDOffset;<BR>DWORDdwCallerIDNameSize;<BR>DWORDdwCallerIDNameOffset;<BR><BR>DWORDdwCalledIDFlags;<BR>DWORDdwCalledIDSize;<BR>DWORDdwCalledIDOffset;<BR>DWORDdwCalledIDNameSize;<BR>DWORDdwCalledIDNameOffset;<BR><BR>DWORDdwConnectedIDFlags;<BR>DWORDdwConnectedIDSize;<BR>DWORDdwConnectedIDOffset;<BR>DWORDdwConnectedIDNameSize;<BR>DWORDdwConnectedIDNameOffset;<BR><BR>DWORDdwRedirectionIDFlags;<BR>DWORDdwRedirectionIDSize;<BR>DWORDdwRedirectionIDOffset;<BR>DWORDdwRedirectionIDNameSize;<BR>DWORDdwRedirectionIDNameOffset;<BR><BR>DWORDdwRedirectingIDFlags;<BR>DWORDdwRedirectingIDSize;<BR>DWORDdwRedirectingIDOffset;<BR>DWORDdwRedirectingIDNameSize;<BR>DWORDdwRedirectingIDnameOffset;<BR><BR>DWORDdwAppNameSize;<BR>DWORDdwAppNameOffset;<BR><BR>DWORDdwCalledPartySize;<BR>DWORDdwCalledPartyOffset;<BR><BR>DWORDdwCommentSize;<BR>DWORDdwCommentOffset;<BR><BR>DWORDdwDisplaySize;<BR>DWORDdwDisplayOffset;<BR><BR>DWORDdwUserUserInfoSize;<BR>DWORDdwUserUserInfoOffset;<BR><BR>DWORDdwHighLevelCompSize;<BR>DWORDdwHighLevelCompOffset;<BR><BR>DWORDdwLowLevelCompSize;<BR>DWORDdwLowLevelCompOffset;<BR><BR>DWORDdwChargingInfoSize;<BR>DWORDdwChargingInfoOffset;<BR><BR>DWORDdwTerminalModesSize;<BR>DWORDdwTerminalModesOffset;<BR><BR>DWORDdwDevSpecificSize;<BR>DWORDdwDevSpecificOffset;<BR>} LINECALLINFO, FAR *LPLINECALLINFO;</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="154pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Fields:</P></TD><TD VALIGN="TOP">The <B>LINECALLINFO</B> structure contains the following fields:</P></TD></TR><TR><TD VALIGN="TOP">  dwTotalSize</P></TD><TD VALIGN="TOP">The total size in bytes allocated to this data structure.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwNeededSize</B></P></TD><TD VALIGN="TOP">The size in bytes for this data structure that is needed to hold all the returned information.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwUsedSize</B></P></TD><TD VALIGN="TOP">The size in bytes of this data structure that contains useful information.</P></TD></TR><TR><TD VALIGN="TOP"><B>HLine</B></P></TD><TD VALIGN="TOP">Specifies the handle for the line device with which this call is associated.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwLineDeviceID</B></P></TD><TD VALIGN="TOP">Specifies the device ID of the line device with which this call is associated.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwAddressID</B></P></TD><TD VALIGN="TOP">Specifies the address ID of the address on the line on which this call exists.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwBearerMode</B></P></TD><TD VALIGN="TOP">Specifies the current bearer mode of the call, of type <B>LINEBEARERMODE</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINEBEARERMODE_VOICE</P></TD><TD VALIGN="TOP">This is a regular 3.1kHz analog voice grade bearer service. Bit integrity is not assured. Voice can support fax and modem media modes.</P></TD></TR><TR><TD VALIGN="TOP">LINEBEARERMODE_SPEECH</P></TD><TD VALIGN="TOP">This corresponds to G.711 speech transmission on the call. The network may use processing techniques such as analog transmission, echo cancellation and compression/decompression. Bit integrity is not assured. Speech is not intended to support fax and modem media modes.</P></TD></TR><TR><TD VALIGN="TOP">LINEBEARERMODE_MULTIUSE</P></TD><TD VALIGN="TOP">The multi-use mode defined by ISDN.</P></TD></TR><TR><TD VALIGN="TOP">LINEBEARERMODE_DATA</P></TD><TD VALIGN="TOP">The unrestricted data transfer on the call. The data rate is specified separately. </P></TD></TR><TR><TD VALIGN="TOP">LINEBEARERMODE_ALTSPEECHDATA</P></TD><TD VALIGN="TOP">The alternate transfer of speech or unrestricted data on the same call (ISDN).</P></TD></TR><TR><TD VALIGN="TOP">LINEBEARERMODE_NONCALLSIGNALING</P></TD><TD VALIGN="TOP">This corresponds to a non call-associated signaling connection from the app to the service provider or switch (treated as a "media stream" by the Telephony API).  </P></TD></TR><TR><TD VALIGN="TOP"><B>DwRate</B></P></TD><TD VALIGN="TOP">Specifies the rate of the call's data stream in bps (bits per second).</P></TD></TR><TR><TD VALIGN="TOP"><B>DwMediaMode</B></P></TD><TD VALIGN="TOP">Specifies the media mode of the information stream currently on the call, of type <B>LINEMEDIAMODE</B>. This is the media mode as determined by the owner of the call, which is not necessarily the same as that of the last <B>LINE_MEDIAMODE</B> message. This field is not directly affected by the <B>LINE_MEDIAMODE</B> mesages. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_NONE</P></TD><TD VALIGN="TOP">No media stream. This value is mainly used as a NULL value.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_UNKNOWN</P></TD><TD VALIGN="TOP">A media stream exists but its mode is not known. This would correspond to a call with an unclassified media type. In typical analog telephony environments, an inbound call's media mode may be unknown until after the call has been answered and the media stream filtered to make a determination.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_INTERACTIVEVOICE</P></TD><TD VALIGN="TOP">The presence of voice energy on the call and the call is treated as an interactive call with humans on both ends.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_AUTOMATEDVOICE</P></TD><TD VALIGN="TOP">The presence of voice energy on the call and the voice is locally handled by an automated application.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_DIGITALDATA</P></TD><TD VALIGN="TOP">Digital data being sent or received over the call.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_G3FAX</P></TD><TD VALIGN="TOP">A group 3 fax is being sent or received over the call.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_G4FAX</P></TD><TD VALIGN="TOP">A group 4 fax is being sent or received over the call.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_DATAMODEM</P></TD><TD VALIGN="TOP">A data modem session on the call.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_TELETEX</P></TD><TD VALIGN="TOP">A teletex session on the call. Teletex is one of the telematic services.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_VIDEOTEX</P></TD><TD VALIGN="TOP">A videotex session on the call. Videotex is one the telematic services.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_TELEX</P></TD><TD VALIGN="TOP">A telex session on the call. Telex is one the telematic services.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_MIXED</P></TD><TD VALIGN="TOP">A mixed session on the call. Mixed is one the ISDN telematic services.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_TDD</P></TD><TD VALIGN="TOP">A TDD session on the call. TDD stands for Telephony Devices for the Deaf.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_ADSI</P></TD><TD VALIGN="TOP">An ADSI session on the call. ADSI stands for Analog Display Services Interface.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_UNAVAIL</P></TD><TD VALIGN="TOP">The media mode of the call is unavailable and will not be known..</P></TD></TR><TR><TD VALIGN="TOP"><B>dwDestAddressSize</B></P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>dwDestAddressOffset</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset in bytes from the beginning of this data structure of the variable sized field containing the destination address provided to <B>lineMakeCall</B>/<B>lineDial</B> for outbound calls. <B>dwDestAddressSize</B> is zero for inbound calls.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwAppSpecific</B></P></TD><TD VALIGN="TOP">This field is uninterpreted by the API implementation and service provider. It can be set by any <I>owner</I> application of this call via the operation <B>lineSetAppSpecific</B>.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwCallID</B></P></TD><TD VALIGN="TOP">In some telephony environments, the switch or service provider may assign a unique identifier to each call. This allows the call to tracked across transfers, forwards, etc. The domain of these call IDs and their scope is service provider defined. The <B>dwCallID</B> field makes this unique identifier available to the applications.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwRelatedCallID</B></P></TD><TD VALIGN="TOP">Telephony environments that use the call ID often may find it necessary to relate one call to another. The <B>dwRelatedCallID</B> field may be used by the service provider for this purpose.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwCallParamFlags</B></P></TD><TD VALIGN="TOP">Specifies a collection of call related parameters when the call is outbound. These are same call parameters specified via <B>lineMakeCall</B>, of type <B>LINECALLPARAMFLAGS</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPARAMFLAGS_SECURE</P></TD><TD VALIGN="TOP">The call is currently secure. This flag is also updated if the call is later secured via <B>lineSecureCall</B>.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPARAMFLAGS_IDLE</P></TD><TD VALIGN="TOP">The call started out using an idle call.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPARAMFLAGS_BLOCKID</P></TD><TD VALIGN="TOP">The originator identity was concealed (block caller ID presentation to the remote party).</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPARAMFLAGS_ORIGOFFHOOK</P></TD><TD VALIGN="TOP">The originator's phone was automatically taken off hook.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPARAMFLAGS_DESTOFFHOOK</P></TD><TD VALIGN="TOP">The called party's phone was automatically taken off hook.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwCallStates</B></P></TD><TD VALIGN="TOP">Specifies the call states for which the application may be notified on this call, of type <B>LINECALLSTATE</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_IDLE</P></TD><TD VALIGN="TOP">The call is idle - no call actually exists.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_OFFERING</P></TD><TD VALIGN="TOP">The call is being offered to the station, signaling the arrival of a  new call. In some environments, a call in the offering state does not automatically alert the user; alerting is done by the switch instructing the line to ring, it does not affect any call states.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_ACCEPTED</P></TD><TD VALIGN="TOP">The call was offering and has been accepted. This indicates to other (monitoring) applications that the current owner application has claimed responsibility for answering the call. In ISDN, this also initiates alerting to both parties.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_DIALTONE</P></TD><TD VALIGN="TOP">The call is receiving a dial tone from the switch, which means that the switch is ready to receive a dialed number.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_DIALING</P></TD><TD VALIGN="TOP">Destination address information (a phone number) is being sent to the switch via the call.  Note that the operation <B>lineGenerateDigits</B> does not place the line into the <I>dialing</I> state.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_RINGBACK</P></TD><TD VALIGN="TOP">The call is receiving ringback from the called address. Ringback indicates that the other station has been reached and is being alerted.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_BUSY</P></TD><TD VALIGN="TOP">The call is receiving a busy tone. Busy tone indicates that the call cannot be completed - either a circuit (trunk) or the remote party's station are in use.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_SPECIALINFO</P></TD><TD VALIGN="TOP">Special information is sent by the network. Special information is typically sent when the destination cannot be reached. </P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_CONNECTED</P></TD><TD VALIGN="TOP">The call has been established, the connection is made. Information is able to flow over the call between the originating address and the destination address.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_PROCEEDING</P></TD><TD VALIGN="TOP">Dialing has completed and the call is proceeding through the switch or telephone network.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_ONHOLD</P></TD><TD VALIGN="TOP">The call is on hold by the switch.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_CONFERENCED</P></TD><TD VALIGN="TOP">The call is currently a member of a multi-party conference call.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_ONHOLDPENDCONF</P></TD><TD VALIGN="TOP">The call is currently on hold while it is being added to a conference.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_ONHOLDPENDTRANSF</P></TD><TD VALIGN="TOP">The call is currently on hold awaiting transfer to another number.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_DISCONNECTED</P></TD><TD VALIGN="TOP">The remote party has disconnected from the call.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_UNKNOWN</P></TD><TD VALIGN="TOP">The state of the call is not known. This may be due to limitations of the call progress detection implementation.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwMonitorDigitsModes</B></P></TD><TD VALIGN="TOP">Specifies the various digit modes for which monitoring is currently enabled, of type <B>LINEDIGITMODE</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINEDIGITMODE_PULSE</P></TD><TD VALIGN="TOP">Uses pulse/rotary for digit signaling.</P></TD></TR><TR><TD VALIGN="TOP">LINEDIGITMODE_DTMF</P></TD><TD VALIGN="TOP">Uses DTMF tones for digit signaling.</P></TD></TR><TR><TD VALIGN="TOP">LINEDIGITMODE_DTMFEND</P></TD><TD VALIGN="TOP">Uses DTMF tones for digit detection, and also detects the down edges.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwNumMonitorTone</B></P></TD><TD VALIGN="TOP">Specifies the number of simultaneous tone detections currently enabled on the call.  </P></TD></TR><TR><TD VALIGN="TOP"><B>DwMonitorMediaModes</B></P></TD><TD VALIGN="TOP">Specifies the various media modes for which monitoring is currently enabled, of type <B>LINEMEDIAMODE</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_INTERACTIVEVOICE</P></TD><TD VALIGN="TOP">The presence of voice energy on the call and the call is treated as an interactive call with humans on both ends.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_AUTOMATEDVOICE</P></TD><TD VALIGN="TOP">The presence of voice energy on the call and the voice is locally handled by an automated application.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_DIGITALDATA</P></TD><TD VALIGN="TOP">Digital data is being sent or received over the call.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_G3FAX</P></TD><TD VALIGN="TOP">A group 3 fax is being sent or received over the call.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_G4FAX</P></TD><TD VALIGN="TOP">A group 4 fax is being sent or received over the call.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_DATAMODEM</P></TD><TD VALIGN="TOP">A data modem session on the call.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_TELETEX</P></TD><TD VALIGN="TOP">A teletex session on the call. Teletex is one of the telematic services.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_VIDEOTEX</P></TD><TD VALIGN="TOP">A videotex session on the call. Videotex is one the telematic services.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_TELEX</P></TD><TD VALIGN="TOP">A telex session on the call. Telex is one the telematic services.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_MIXED</P></TD><TD VALIGN="TOP">A mixed session on the call. Mixed is one the ISDN telematic services.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_TDD</P></TD><TD VALIGN="TOP">A TDD session on the call. TDD stands for Telephony Devices for the Deaf.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_ADSI</P></TD><TD VALIGN="TOP">An ADSI session on the call. ADSI stands for Analog Display Services Interface.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_UNAVAIL</P></TD><TD VALIGN="TOP">The media mode of the call is unavailable and will not be known..</P></TD></TR><TR><TD VALIGN="TOP"><B>DialParams</B></P></TD><TD VALIGN="TOP">Specifies the dialing parameters currently in effect on the call, of type <B>LINEDIALPARAMS</B>. Unless these parameters are set by either <B>lineMakeCall</B> or <B>lineSetCallParams</B>, their values will be the same as the defaults used in the <B>LINEDEVCAPS</B>.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwOrigin</B></P></TD><TD VALIGN="TOP">Identifies where the call originated from, of type <B>LINECALLORIGIN</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINECALLORIGIN_OUTBOUND</P></TD><TD VALIGN="TOP">The call is an outbound call.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLORIGIN_INTERNAL</P></TD><TD VALIGN="TOP">The call is inbound and originated internally (e.g., on the same PBX).</P></TD></TR><TR><TD VALIGN="TOP">LINECALLORIGIN_EXTERNAL</P></TD><TD VALIGN="TOP">The call is inbound and originated externally.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLORIGIN_UNKNOWN</P></TD><TD VALIGN="TOP">The call is an inbound call, but its origin is currently unknown but may become known later.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLORIGIN_UNAVAIL</P></TD><TD VALIGN="TOP">The call is an inbound call, and its origin is not available and will never become known for this call.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwReason</B></P></TD><TD VALIGN="TOP">Specifies the reason why the call occurred, of type <B>LINECALLREASON</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINECALLREASON_DIRECT</P></TD><TD VALIGN="TOP">This is a direct call.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLREASON_FWDBUSY</P></TD><TD VALIGN="TOP">This call was forwarded from another extension that was busy at the time of the call.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLREASON_FWDNOANSWER</P></TD><TD VALIGN="TOP">The call was forwarded from another extension that didn't answer the call after some number of rings.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLREASON_FWDUNCOND</P></TD><TD VALIGN="TOP">The call was forwarded unconditionally from another number.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLREASON_PICKUP</P></TD><TD VALIGN="TOP">The call was picked up from another extension.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLREASON_UNPARK</P></TD><TD VALIGN="TOP">The call was retrieved as a parked call.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLREASON_REDIRECT</P></TD><TD VALIGN="TOP">The call was redirected to this station.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLREASON_CALLCOMPLETION</P></TD><TD VALIGN="TOP">The call was the result of a call completion request.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLREASON_TRANSFER</P></TD><TD VALIGN="TOP">The call has been transferred from another number. Party ID information may indicate who the caller is and where the call was transferred from.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLREASON_REMINDER</P></TD><TD VALIGN="TOP">The call is a reminder (or "recall") that the user has a call parked or on hold for potentially a long time.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLREASON_UNKNOWN</P></TD><TD VALIGN="TOP">The reason for the call is currently unknown but may become known later.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLREASON_UNAVAIL</P></TD><TD VALIGN="TOP">The reason for the call is unavailable and will not become known later.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwCompletionID</B></P></TD><TD VALIGN="TOP">The completion ID for the incoming call if it is the result of a completion request that terminates. This ID is only meaningful if <B>dwReason</B> is LINECALLREASON_CALLCOMPLETION.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwNumOwners</B>.</P></TD><TD VALIGN="TOP">The number of application modules with different call handles with owner privileges for the call</P></TD></TR><TR><TD VALIGN="TOP"><B>dwNumMonitors</B></P></TD><TD VALIGN="TOP">The number of application modules with different call handles with monitor privileges for the call.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwCountryCode</B></P></TD><TD VALIGN="TOP">The country code of the destination party. Zero if unknown.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwTrunk</B></P></TD><TD VALIGN="TOP">The number of the trunk over which the call is routed. This field is used for both inbound and outgoing calls.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwCallerIDFlags</B></P></TD><TD VALIGN="TOP">Determines the validity and content of the caller party ID information, of type <B>LINECALLPARTYID</B>. The caller is the originator of the call. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPARTYID_BLOCKED</P></TD><TD VALIGN="TOP">Caller ID information for the call has been blocked by the caller, but would otherwise have been available.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPARTYID_OUTOFAREA</P></TD><TD VALIGN="TOP">Caller ID information for the call is not available as it is not propagated all the way by the network.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPARTYID_NAME</P></TD><TD VALIGN="TOP">The caller ID information for the call is the caller's name (from a table maintained inside the switch). It is provided in the caller ID name variable size field.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPARTYID_ADDRESS</P></TD><TD VALIGN="TOP">The caller ID information for the call is the caller's number, and is provided via the caller ID variable size field.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPARTYID_PARTIAL</P></TD><TD VALIGN="TOP">Caller ID information for the call is valid, but is limited to partial number information.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPARTYID_UNKNOWN</P></TD><TD VALIGN="TOP">Caller ID information is currently unknown, it may become known later.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPARTYID_UNAVAIL</P></TD><TD VALIGN="TOP">Caller ID information is unavailable and will not become known later.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwCallerIDSize</B></P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>dwCallerIDOffset</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset in bytes from the beginning of this data structure of the variable sized field containing the caller party ID number information.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwCallerIDNameSize</B></P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>dwCallerIDNameOffset</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset in bytes from the beginning of this data structure of the variable sized field containing the caller party ID name information.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwCalledIDFlags</B></P></TD><TD VALIGN="TOP">Determines the validity and content of the called party ID information, of type <B>LINECALLPARTYID</B>. The called party corresponds to the orignally addressed party. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPARTYID_BLOCKED</P></TD><TD VALIGN="TOP">Called ID information for the call has been blocked by the caller, but would otherwise have been available.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPARTYID_OUTOFAREA</P></TD><TD VALIGN="TOP">Caller ID information for the call is not available as it is not propagated all the way by the network.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPARTYID_NAME</P></TD><TD VALIGN="TOP">The called ID information for the call is the caller's name (from a table maintained inside the switch). It is provided via the called ID name variable size field.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPARTYID_ADDRESS</P></TD><TD VALIGN="TOP">The called ID information for the call is the caller's number, and is provided via the called ID variable size field.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPARTYID_PARTIAL</P></TD><TD VALIGN="TOP">Called ID information for the call is valid, but is limited to partial number information.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPARTYID_UNKNOWN</P></TD><TD VALIGN="TOP">Called ID information is currently unknown, it may become known later.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPARTYID_UNAVAIL</P></TD><TD VALIGN="TOP">Called ID information is unavailable and will not become known later.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwCalledIDSize</B></P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>dwCalledIDOffset</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset in bytes from the beginning of this data structure of the variable sized field containing the called party ID number information.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwCalledIDNameSize</B></P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>dwCalledIDNameOffset</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset in bytes from the beginning of this data structure of the variable sized field containing the called party ID name information.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwConnectedFlags</B></P></TD><TD VALIGN="TOP">Determines the validity and content of the connected party ID information, of type <B>LINECALLPARTYID</B>. The connected party is the party that was actually connected to. This may be different from the called party ID if the call was diverted. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPARTYID_BLOCKED</P></TD><TD VALIGN="TOP">Connected party ID information for the call has been blocked by the caller, but would otherwise have been available.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPARTYID_OUTOFAREA</P></TD><TD VALIGN="TOP">Connected ID information for the call is not available as it is not propagated all the way by the network.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPARTYID_NAME</P></TD><TD VALIGN="TOP">The connected party ID information for the call is the caller's name (from a table maintained inside the switch). It is provided via the connected ID name variable size field.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPARTYID_ADDRESS</P></TD><TD VALIGN="TOP">The connected party ID information for the call is the caller's number, and is provided via the connected ID variable size field.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPARTYID_PARTIAL</P></TD><TD VALIGN="TOP">Connected party ID information for the call is valid, but is limited to partial number information.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPARTYID_UNKNOWN</P></TD><TD VALIGN="TOP">Connected party ID information is currently unknown, it may become known later.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPARTYID_UNAVAIL</P></TD><TD VALIGN="TOP">Connected party ID information is unavailable and will not become known later.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwConnectedIDSize</B></P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>dwConnectedIDOffset</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset in bytes from the beginning of this data structure of the variable sized field containing the connected party ID number information.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwConnectedIDNameSize</B></P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>dwConnectedIDNameOffset</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset in bytes from the beginning of this data structure of the variable sized field containing the connected party ID name information.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwRedirectionIDFlags</B></P></TD><TD VALIGN="TOP">Determines the validity and content of the redirection party ID information, of type <B>LINECALLPARTYID</B>. The redirection party identifies to the calling user the number towards which diversion was invoked. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPARTYID_BLOCKED</P></TD><TD VALIGN="TOP">Redirection party ID information for the call has been blocked by the caller, but would otherwise have been available.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPARTYID_OUTOFAREA</P></TD><TD VALIGN="TOP">Redirection ID information for the call is not available as it is not propagated all the way by the network.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPARTYID_NAME</P></TD><TD VALIGN="TOP">The redirection party ID information for the call is the caller's name (from a table maintained inside the switch). It is provided via the redirection ID name variable size field.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPARTYID_ADDRESS</P></TD><TD VALIGN="TOP">The redirection party ID information for the call is the caller's number, and is provided via the redirection ID variable size field.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPARTYID_PARTIAL</P></TD><TD VALIGN="TOP">Redirection party ID information for the call is valid, but is limited to partial number information.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPARTYID_UNKNOWN</P></TD><TD VALIGN="TOP">Redirection ID information is currently unknown, it may become known later.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPARTYID_UNAVAIL</P></TD><TD VALIGN="TOP">Redirection ID information is unavailable and will not become known later.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwRedirectionIDSize</B></P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>dwRedirectionIDOffset</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset in bytes from the beginning of this data structure of the variable sized field containing the redirection party ID number information.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwRedirectionIDNameSize</B></P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>dwRedirectionIDNameOffset</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset in bytes from the beginning of this data structure of the variable sized field containing the redirection party ID name information.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwRedirectingIDFlags</B></P></TD><TD VALIGN="TOP">Determines the validity and content of the redirecting party ID information, of type <B>LINECALLPARTYID</B>. The redirecting party identifies to the diverted-to user the party from which diversion was invoked. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPARTYID_BLOCKED</P></TD><TD VALIGN="TOP">Redirecting party ID information for the call has been blocked by the caller, but would otherwise have been available.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPARTYID_OUTOFAREA</P></TD><TD VALIGN="TOP">Redirecting ID information for the call is not available as it is not propagated all the way by the network.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPARTYID_NAME</P></TD><TD VALIGN="TOP">The redirecting party ID information for the call is the caller's name (from a table maintained inside the switch). It is provided via the redirecting ID name variable size field.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPARTYID_ADDRESS</P></TD><TD VALIGN="TOP">The redirecting party ID information for the call is the caller's number, and is provided via the redirecting ID variable size field.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPARTYID_PARTIAL</P></TD><TD VALIGN="TOP">Redirecting party ID information for the call is valid, but is limited to partial number information.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPARTYID_UNKNOWN</P></TD><TD VALIGN="TOP">Redirecting ID information is currently unknown, it may become known later.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPARTYID_UNAVAIL</P></TD><TD VALIGN="TOP">Redirecting ID information is unavailable and will not become known later.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwRedirectingIDSize</B></P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>dwRedirectingIDOffset</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset in bytes from the beginning of this data structure of the variable sized field containing the redirecting party ID number information.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwRedirectingIDNameSize</B></P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>dwRedirectingIDNameOffset</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset in bytes from the beginning of this data structure of the variable sized field containing the redirecting party ID name information.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwAppNameSize</B></P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>dwAppNameOffset</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset from the beginning of this data structure in bytes of the variable sized field holding the user-friendly application name of the application that first originated, accepted, or answered the call. This is the name that an application can specify on <B>lineInitialize</B>. If the application specifies no such name, then the application's module name is used instead.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwCalledPartySize</B></P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>dwCalledPartyOffset</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset from the beginning of this data structure in bytes of the variable sized field holding a user-friendly description of the called party. This information can be specified on <B>lineMakeCall</B>. It is useful for call logging purposes.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwCommentSize</B></P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>dwCommentOffset</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset from the beginning of this data structure in bytes of the variable sized field holding a comment about the call provided by the application that originated the call using lineMakeCall.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwDisplaySize</B></P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>dwDisplayOffset</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset from the beginning of this data structure in bytes of the variable sized field holding raw display information. Depending on the telephony environment, a service provider may extract functional information from this for presentation into a more functional way.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwUserUserInfoSize</B></P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>dwUserUserInfoOffset</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset from the beginning of this data structure in bytes of the variable sized field holding user-to-user information.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwHighLevelCompSize</B></P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>dwHighLevelCompOffset</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset from the beginning of this data structure in bytes of the variable sized field holding high level compatibility information. The format of this information is specified by other standards (ISDN Q.931).</P></TD></TR><TR><TD VALIGN="TOP"><B>dwLowLevelCompSize</B></P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>dwLowLevelCompOffset</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset from the beginning of this data structure in bytes of the variable sized field holding low level compatibility information. The format of this information is specified by other standards (ISDN Q.931).</P></TD></TR><TR><TD VALIGN="TOP"><B>dwChargingInfoSize</B></P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>dwChargingInfoOffset</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset from the beginning of this data structure in bytes of the variable sized field holding charging information. The format of this information is specified by other standards (ISDN Q.931).</P></TD></TR><TR><TD VALIGN="TOP"><B>dwTerminalModesSize</B></P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>dwTerminalModesOffset</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset in bytes from the beginning of this data structure of the variable sized device field containing an array with DWORD-sized entries, of type <B>LINETERMMODE</B>. This array is indexed by terminal IDs, in the range from zero to <B>dwNumTerminals</B> -1.  Each entry in the array specifies the current terminal modes for the corresponding terminal set via the <B>lineSetTerminal</B> operation for this call's media stream. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINETERMMODE_LAMPS</P></TD><TD VALIGN="TOP">This are lamp events sent from the line to the terminal.</P></TD></TR><TR><TD VALIGN="TOP">LINETERMMODE_BUTTONS</P></TD><TD VALIGN="TOP">These are button press events sent from the terminal to the line.</P></TD></TR><TR><TD VALIGN="TOP">LINETERMMODE_DISPLAY</P></TD><TD VALIGN="TOP">This is display information sent from the line to the terminal.</P></TD></TR><TR><TD VALIGN="TOP">LINETERMMODE_RINGER</P></TD><TD VALIGN="TOP">This is ringer control information sent from the switch to the terminal.</P></TD></TR><TR><TD VALIGN="TOP">LINETERMMODE_HOOKSWITCH</P></TD><TD VALIGN="TOP">These are hookswitch event sent between the terminal and the line.</P></TD></TR><TR><TD VALIGN="TOP">LINETERMMODE_MEDIAFROMTERM</P></TD><TD VALIGN="TOP">This is the unidirectional media stream from the terminal to the line associated with a call on the line. Use this value when routing of both unidirectional channels of a call's media stream can be controlled independently.</P></TD></TR><TR><TD VALIGN="TOP">LINETERMMODE_MEDIATOTERM</P></TD><TD VALIGN="TOP">This is the unidirectional media stream from the line to the terminal associated with a call on the line. Use this value when routing of both unidirectional channels of a call's media stream can be controlled independently.</P></TD></TR><TR><TD VALIGN="TOP">LINETERMMODE_MEDIABIDIR</P></TD><TD VALIGN="TOP">This is the bidirectional media stream associated with a call on the line and the terminal. Use this value when routing of both unidirectional channels of a call's media stream cannot be controlled independently.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwDevSpecificSize</B></P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>dwDevSpecificOffset</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset from the beginning of this data structure in bytes of the variable sized field holding device specific information.</P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP">Device specific extensions should use the DevSpecific (<B>dwDevSpecificSize</B> and <B>dwDevSpecificOffset</B>) variable sized area of this data structure.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">The <B>LINECALLINFO</B> data structure contains relatively fixed information about a call. This structure is returned via <B>lineGetCallInfo</B>. When information items in this data structure have changed, a <B>LINE_CALLINFO</B> message is sent to the application. A parameter to this message is the information item or field that changed.</P></TD></TR><TR><TD VALIGN="TOP">The <B>dwAppSpecific</B> field can be used by applications to tag calls by using <B>lineSetAppSpecific</B>. This field is uninterpreted by the API or service providers. It is initially set to zero.</P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP">See AlsoFunctions:</P></TD><TD VALIGN="TOP">  lineGetCallInfo, lineSetAppSpecific</P></TD></TR><TR><TD VALIGN="TOP">Messages:  LINE_CALLINFO</P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP">Data Types:</P></TD><TD VALIGN="TOP">  LINEBEARERMODE, LINECALLORIGIN, LINECALLREASON, LINECALLPARTYID, LINEMEDIAMODE, LINEDIGITMODE, LINETERMMODE, LINECALLSTATE, LINECALLPARAMFLAGS</P></TD></TR></TBODY></TABLE>
<BR></P><P>LINECALLINFOSTATE</P>
<P>The <B>LINECALLINFOSTATE</B> bit flag constants describe various call information items about which an application may be notified via the <B>LINE_CALLINFO</B> message.</P>
<P>LINECALLINFOSTATE_OTHER0x00000001<BR>LINECALLINFOSTATE_DEVSPECIFIC0x00000002<BR>LINECALLINFOSTATE_BEARERMODE 0x00000004<BR>LINECALLINFOSTATE_RATE 0x00000008<BR>LINECALLINFOSTATE_MEDIAMODE 0x00000010<BR>LINECALLINFOSTATE_APPSPECIFIC0x00000020<BR>LINECALLINFOSTATE_CALLID0x00000040<BR>LINECALLINFOSTATE_RELATEDCALLID0x00000080<BR>LINECALLINFOSTATE_ORIGIN0x00000100<BR>LINECALLINFOSTATE_REASON0x00000200<BR>LINECALLINFOSTATE_COMPLETIONID0x00000400<BR>LINECALLINFOSTATE_NUMOWNERINCR0x00000800<BR>LINECALLINFOSTATE_NUMOWNERDECR0x00001000<BR>LINECALLINFOSTATE_NUMMONITORS0x00002000<BR>LINECALLINFOSTATE_TRUNK0x00004000<BR>LINECALLINFOSTATE_CALLERID0x00008000<BR>LINECALLINFOSTATE_CALLEDID0x00010000<BR>LINECALLINFOSTATE_CONNECTEDID0x00020000<BR>LINECALLINFOSTATE_REDIRECTIONID0x00040000<BR>LINECALLINFOSTATE_REDIRECTINGID0x00080000<BR>LINECALLINFOSTATE_DISPLAY0x00100000<BR>LINECALLINFOSTATE_USERUSERINFO0x00200000<BR>LINECALLINFOSTATE_HIGHLEVELCOMP0x00400000<BR>LINECALLINFOSTATE_LOWLEVELCOMP0x00800000<BR>LINECALLINFOSTATE_CHARGINGINFO0x01000000<BR>LINECALLINFOSTATE_TERMINAL0x02000000<BR>LINECALLINFOSTATE_DIALPARAMS0x04000000<BR>LINECALLINFOSTATE_MONITORMODES0x08000000</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="154pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Values</P></TD><TD VALIGN="TOP">The <B>LINECALLINFOSTATE</B> constants have the following values.</P></TD></TR><TR><TD VALIGN="TOP"> <B>LineCallInfoState_other</B></P></TD><TD VALIGN="TOP">An other information item in the call information not listed below has changed.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallInfoState_devSpecific</B></P></TD><TD VALIGN="TOP">The device specific field of the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallInfoState_bearerMode</B></P></TD><TD VALIGN="TOP">The bearer mode field of the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallInfoState_rate</B></P></TD><TD VALIGN="TOP">The rate field of the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallInfoState_mediaMode</B></P></TD><TD VALIGN="TOP">The media mode field of the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallInfoState_ appSpecific</B></P></TD><TD VALIGN="TOP">The app specific field of the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallInfoState_callID</B></P></TD><TD VALIGN="TOP">The call ID field of the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallInfoState_relatedCallID</B></P></TD><TD VALIGN="TOP">The related call ID field of the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallInfoState_origin</B></P></TD><TD VALIGN="TOP">The origin field of the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallInfoState_reason</B></P></TD><TD VALIGN="TOP">The reason field of the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallInfoState_completionID</B></P></TD><TD VALIGN="TOP">The completion ID field of the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallInfoState_numOwnerIncr</B></P></TD><TD VALIGN="TOP">The number of owner field in the call information record was increased.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallInfoState_numOwnerDecr</B></P></TD><TD VALIGN="TOP">The number of owner field in the call information record was decreased.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallInfoState_numMonitors</B></P></TD><TD VALIGN="TOP">The number of monitors field in the call information record has changed.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallInfoState_trunk</B></P></TD><TD VALIGN="TOP">The trunk field of the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallInfoState_callerID</B></P></TD><TD VALIGN="TOP">One of the callerID-related fields of the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallInfoState_calledID</B></P></TD><TD VALIGN="TOP">One of the calledID-related fields of the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallInfoState_connectedID</B></P></TD><TD VALIGN="TOP">One of the cconnectedID-related fields of the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallInfoState_redirectionID</B></P></TD><TD VALIGN="TOP">One of the redirectionID-related fields of the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallInfoState_redirectingID</B></P></TD><TD VALIGN="TOP">One of the redirectingID-related fields of the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallInfoState_display</B></P></TD><TD VALIGN="TOP">The display field of the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallInfoState_userUserInfo</B></P></TD><TD VALIGN="TOP">The user-to-user information of the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallInfoState_ highLevelComp</B></P></TD><TD VALIGN="TOP">The high level compatibility field of the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallInfoState_ lowLevelComp</B></P></TD><TD VALIGN="TOP">The low level compatibility field of the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallInfoState_chargingInfo</B></P></TD><TD VALIGN="TOP">The charging information of the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallInfoState_terminal</B></P></TD><TD VALIGN="TOP">The terminal mode information of the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallInfoState_dialParams</B></P></TD><TD VALIGN="TOP">The dial parameters of the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallInfoState_monitorModes</B></P></TD><TD VALIGN="TOP">One or more of the digit, tone, or media monitoring fields in the call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP">None. All 32 bits are reserved.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">These constants describe portions of the <B>LINECALLINFO</B> data structure. When changes occur in this data structure, a <B>LINE_CALLINFO</B> message is sent to the application. The parameters to this message are a handle to the call and an indication of the information item that has changed. </P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">The <B>LINEADDRESSCAPS</B> data structure also indicates which of these call information elements are every valid for calls on the address.</P></TD></TR><TR><TD VALIGN="TOP">See AlsoMessages:  </P></TD><TD VALIGN="TOP">LINE_CALLINFO</P></TD></TR><TR><TD VALIGN="TOP">Data Types:</P></TD><TD VALIGN="TOP">LINECALLINFO, LINEADDRESSCAPS</P></TD></TR></TBODY></TABLE>
<BR></P><P>LINECALLLIST</P>
<P>The <B>LINECALLLIST</B> structure describes a list of call handles. A structure of this type is returned by <B>lineGetCalls</B>.</P>
<P>typedef struct linecalllist_tag {<BR>DWORDdwTotalSize;<BR>DWORDdwNeededSize;<BR>DWORDdwUsedSize;<BR><BR>DWORDdwCallsNumEntries;<BR>DWORDdwCallsSize;<BR>DWORDdwCallsOffset;<BR>} LINECALLLIST, FAR *LPLINECALLLIST;</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="123pt" VALIGN="TOP"><COL WIDTH="285pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Fields:</P></TD><TD VALIGN="TOP">The <B>LINEDEVSTATUS</B> structure contains the following fields:</P></TD></TR><TR><TD VALIGN="TOP"><B>dwTotalSize</B></P></TD><TD VALIGN="TOP">The total size in bytes allocated to this data structure.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwNeededSize</B></P></TD><TD VALIGN="TOP">The size in bytes for this data structure that is needed to hold all the returned information.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwUsedSize</B></P></TD><TD VALIGN="TOP">The size in bytes of this data structure that contains useful information.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwNumEntries</B></P></TD><TD VALIGN="TOP">Specifies the number of handles in the <I>hCalls</I> array.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwCallsSize<BR>dwCallsOffset</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset from the beginning of this data structure in bytes of the variable sized field holding the call handles.</P></TD></TR><TR><TD VALIGN="TOP">Extensibility</P></TD><TD VALIGN="TOP">None.</P></TD></TR><TR><TD VALIGN="TOP">Comments</P></TD><TD VALIGN="TOP">None.</P></TD></TR><TR><TD VALIGN="TOP">See AlsoFunctions:</P></TD><TD VALIGN="TOP">:  lineGetCalls</P></TD></TR></TBODY></TABLE>
<BR></P><P>LINECALLORIGIN</P>
<P>The LINECALLORIGIN constants describe the origin of a call.</P>
<P>LINECALLORIGIN_OUTBOUND0x00000001<BR>LINECALLORIGIN_INTERNAL0x00000002<BR>LINECALLORIGIN_EXTERNAL0x00000004<BR>LINECALLORIGIN_UNKNOWN 0x00000010<BR>LINECALLORIGIN_UNAVAIL 0x00000020</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="131pt" VALIGN="TOP"><COL WIDTH="277pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Values</P></TD><TD VALIGN="TOP">The <B>LINECALLORIGIN</B> constants have the following values.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallOrigin_outbound</B></P></TD><TD VALIGN="TOP">The call originated from this station as an outbound call.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallOrigin_internal</B></P></TD><TD VALIGN="TOP">The call originated as an inbound call at a station internal to the same switching environment.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallOrigin_external</B></P></TD><TD VALIGN="TOP">The call originated as an inbound call on an external line.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallOrigin_unknown</B></P></TD><TD VALIGN="TOP">The call is an inbound call, but its origin is currently unknown but may become known later.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallOrigin_unavail</B></P></TD><TD VALIGN="TOP">The call is an inbound call, and its origin is not available and will never become known for this call.</P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP">The high order 16 bits can be assigned for device specific extensions. The low order 16 bits are reserved.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">The origin of a call is stored in the call's <B>LINECALLINFO</B> structure.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B>Data Types:</P></TD><TD VALIGN="TOP">  <B>LINECALLINFO, LINEADDRESSCAPS</B></P></TD></TR></TBODY></TABLE>
<BR></P><P>LINECALLPARAMFLAGS</P>
<P>The <B>LINECALLPARAMFLAGS</B> constants describe various status flags about a call.</P>
<P>LINECALLPARAMFLAGS_SECURE0x00000001<BR>LINECALLPARAMFLAGS_IDLE0x00000002<BR>LINECALLPARAMFLAGS_BLOCKID0x00000004<BR>LINECALLPARAMFLAGS_ORIGOFFHOOK 0x00000008<BR>LINECALLPARAMFLAGS_DESTOFFHOOK 0x00000010</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="159pt" VALIGN="TOP"><COL WIDTH="303pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Values</P></TD><TD VALIGN="TOP">The <B>LINECALLPARAMFLAGS</B> constants have the following values.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallParamFlags_secure</B></P></TD><TD VALIGN="TOP">The call should be set up as secure.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallParamFlags_idle</B></P></TD><TD VALIGN="TOP">The call should be originated on an idle call appearance, and not join a call in progress.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallParamFlags_blockID</B></P></TD><TD VALIGN="TOP">The originator identity should be concealed (block caller ID).</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallParamFlags_origOffhook</B></P></TD><TD VALIGN="TOP">The originator's phone should be automatically taken off hook.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallParamFlags_destOffhook</B></P></TD><TD VALIGN="TOP">The called party's phone should be automatically be taken off hook.</P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP">The high order 16 bits can be assigned for device specific extensions. The low order 16 bits are reserved.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">None.</P></TD></TR><TR><TD VALIGN="TOP"><B>See AlsoFunctions:</B></P></TD><TD VALIGN="TOP"><B>lineMakeCall, lineGetCallInfo</B></P></TD></TR><TR><TD VALIGN="TOP">Data Types:</P></TD><TD VALIGN="TOP"><B>LINECALLPARAMS</B>, <B>LINECALLINFO</B></P></TD></TR></TBODY></TABLE>
<BR></P><P>LINECALLPARAMS</P>
<P>The <B>LINECALLPARAMS</B> structure describes parameters supplied when making calls via <B>lineMakeCall</B>. The comments on the right indicate the default values used when this structure is not provided to <B>lineMakeCall</B>.</P>
<P>typedef struct linecallparams_tag {// Defaults:<BR>DWORDdwTotalSize;// ---------<BR><BR>DWORDdwBearerMode;// voice<BR>DWORDdwMinRate;// (3.1kHz)<BR>DWORDdwMaxRate;// (3.1kHz)<BR>DWORDdwMediaMode;// interactiveVoice<BR><BR>DWORDdwCallParamFlags;// 0<BR>DWORDdwAddressMode;// addressID<BR>DWORDdwAddressID// (any available)<BR><BR>LINEDIALPARAMS  DialParams;// (0, 0, 0, 0)<BR><BR>DWORDdwOrigAddressSize;// 0<BR>DWORDdwOrigAddressOffset;<BR><BR>DWORDdwCalledPartySize;// 0<BR>DWORDdwCalledPartyOffset;<BR><BR>DWORDdwCommentSize;// 0<BR>DWORDdwCommentOffset;<BR><BR>DWORDdwUserUserInfoSize;// 0<BR>DWORDdwUserUserInfoOffset;<BR><BR>DWORDdwHighLevelCompSize;// 0<BR>DWORDdwHighLevelCompOffset;<BR><BR>DWORDdwLowLevelCompSize;// 0<BR>DWORDdwLowLevelCompOffset;<BR><BR>DWORDdwDevSpecificSize;// 0<BR>DWORDdwDevSpecificOffset;<BR>} LINECALLPARAMS, FAR *LPLINECALLPARAMS;</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="178pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Fields:</P></TD><TD VALIGN="TOP">The <B>LINECALLPARAMS</B> structure contains the following fields:</P></TD></TR><TR><TD VALIGN="TOP"><B>dwTotalSize</B></P></TD><TD VALIGN="TOP">The total size in bytes allocated to this data structure. This size should be big enough to hold all the fixed and variable sized portions of this data structure.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwBearerMode</B></P></TD><TD VALIGN="TOP">Specifies the bearer mode for the call, of type <B>LINEBEARERMODE</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINEBEARERMODE_VOICE</P></TD><TD VALIGN="TOP">This is a regular 3.1kHz analog voice grade bearer service. Bit integrity is not assured. Voice can support fax and modem media modes.</P></TD></TR><TR><TD VALIGN="TOP">LINEBEARERMODE_SPEECH</P></TD><TD VALIGN="TOP">This corresponds to G.711 speech transmission on the call. The network may use processing techniques such as analog transmission, echo cancellation and compression/decompression. Bit integrity is not assured. Speech is not intended to support fax and modem media modes.</P></TD></TR><TR><TD VALIGN="TOP">LINEBEARERMODE_MULTIUSE</P></TD><TD VALIGN="TOP">The multi-use mode defined by ISDN.</P></TD></TR><TR><TD VALIGN="TOP">LINEBEARERMODE_DATA</P></TD><TD VALIGN="TOP">The unrestricted data transfer on the call. The data rate is specified separately. </P></TD></TR><TR><TD VALIGN="TOP">LINEBEARERMODE_ALTSPEECHDATA</P></TD><TD VALIGN="TOP">The alternate transfer of speech or unrestricted data on the same call (ISDN).</P></TD></TR><TR><TD VALIGN="TOP">LINEBEARERMODE_NONCALLSIGNALING</P></TD><TD VALIGN="TOP">This corresponds to a non call-associated signaling connection from the app to the service provider or switch (treated as a "media stream" by the Telephony API).  </P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>DwMinRate<BR>dwMaxRate</B></P></TD><TD VALIGN="TOP">Specifies the data rate range requested for the call's data stream in bps (bits per second). When making a call, the service provider will attempt to provide the highest available rate in the requested range. If a specific data rate is required, then both min and max should be set to the same value. If an application works optimally with one rate, but is able the degrade to lower rates, then the app should specify these as the max and min rates respectively.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwMediaMode</B></P></TD><TD VALIGN="TOP">Specifies the expected media mode of the call; of type <B>LINEMEDIAMODE</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_NONE</P></TD><TD VALIGN="TOP">No media stream. This value is mainly used as a NULL value.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_UNKNOWN</P></TD><TD VALIGN="TOP">A media stream exists but its mode is not known. This would correspond to a call with an unclassified media type. In typical analog telephony environments, an inbound call's media mode may be unknown until after the call has been answered and the media stream filtered to make a determination.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_INTERACTIVEVOICE</P></TD><TD VALIGN="TOP">The presence of voice energy on the call and the call is treated as an interactive call with humans on both ends.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_AUTOMATEDVOICE</P></TD><TD VALIGN="TOP">The presence of voice energy on the call and the voice is locally handled by an automated application.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_G3FAX</P></TD><TD VALIGN="TOP">A group 3 fax is being sent or received over the call.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_G4FAX</P></TD><TD VALIGN="TOP">A group 4 fax is being sent or received over the call.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_DATAMODEM</P></TD><TD VALIGN="TOP">A data modem session on the call.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_TELETEX</P></TD><TD VALIGN="TOP">A teletex session on the call. Teletex is one of the telematic services.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_VIDEOTEX</P></TD><TD VALIGN="TOP">A videotex session on the call. Videotex is one the telematic services.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_TELEX</P></TD><TD VALIGN="TOP">A telex session on the call. Telex is one the telematic services.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_MIXED</P></TD><TD VALIGN="TOP">A mixed session on the call. Mixed is one the ISDN telematic services.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_TDD</P></TD><TD VALIGN="TOP">A TDD session on the call. TDD stands for Telephony Devices for the Deaf.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_ADSI</P></TD><TD VALIGN="TOP">An ADSI session on the call. ADSI stands for Analog Display Services Interface.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_UNAVAIL</P></TD><TD VALIGN="TOP">The media mode of the call is unavailable and will not be known..</P></TD></TR><TR><TD VALIGN="TOP"><B>dwCallParamFlags</B></P></TD><TD VALIGN="TOP">These flags specify a collection of boolean call setup parameters, of type <B>LINECALLPARAMFLAGS</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPARAMFLAGS_SECURE</P></TD><TD VALIGN="TOP">The call should be set up as secure.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPARAMFLAGS_IDLE</P></TD><TD VALIGN="TOP">The call should get an idle call appearance.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPARAMFLAGS_BLOCKID</P></TD><TD VALIGN="TOP">The originator identity should be concealed (block caller ID).</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPARAMFLAGS_ORIGOFFHOOK</P></TD><TD VALIGN="TOP">The originator's phone should be automatically taken off hook.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPARAMFLAGS_DESTOFFHOOK</P></TD><TD VALIGN="TOP">The called party's phone should be automatically be taken offhook.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwAddressMode</B></P></TD><TD VALIGN="TOP">Specifies the mode by which the originating address is specified, of type <B>LINEADDRESSMODE</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRESSMODE_ADDRESSID</P></TD><TD VALIGN="TOP">The address is specified via a small integer in the range 0 to <I>dwNumAddresses </I>- 1, where <I>dwNumAddresses</I> is the value in the line's device capabilities. The selected address is specified in the <B>uAddressID</B> field.</P></TD></TR><TR><TD VALIGN="TOP">LINEADDRESSMODE_DIALABLEADDR</P></TD><TD VALIGN="TOP">The address is specified via its dialable address. The address is contained in the <B>dwOrigAddressSize</B>, <B>dwOrigAddressOffset</B> variable sized field.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwAddressID</B></P></TD><TD VALIGN="TOP">Specifies the address ID of the originating address if <B>dwAddressID</B> set to LINEADDRESSMODE_ADDRESSID.</P></TD></TR><TR><TD VALIGN="TOP"><B>DialParams</B></P></TD><TD VALIGN="TOP">Specifies dial parameters to be used on this call, of type <B>LINEDIALPARAMS</B>. When a value of zero is specified for a field, then the default value for that field is used. </P></TD></TR><TR><TD VALIGN="TOP"><B>DwOrigAddressSize<BR>dwOrigAddressOffset</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset from the beginning of this data structure in bytes of the variable sized field holding the originating address. The format of this address is dependent of the <B>dwAddressMode</B> field.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwCalledPartySize<BR>dwCalledPartyOffset</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset from the beginning of this data structure in bytes of the variable sized field holding called party information. This information can be specified by the application that makes the call and is made available in the call's information structure for logging purposes. The format of this address is dependent of the <B>dwAddressMode</B> field.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwCommentSize<BR>dwCommentOffset</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset from the beginning of this data structure in bytes of the variable sized field holding comments about the call. This information can be specified by the application the makes the call and is made available in the call's information structure for logging purposes. The format of this address is dependent of the <B>dwAddressMode</B> field.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwUserUserInfoSize<BR>dwUserUserInfoOffset</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset from the beginning of this data structure in bytes of the variable sized field holding user-to-user information.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwHighLevelCompSize<BR>dwHighLevelCompOffset</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset from the beginning of this data structure in bytes of the variable sized field holding high level compatibility information.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwLowLevelCompSize</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset from the beginning of this data structure in bytes of the variable sized field holding low level compatibility information.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwDevSpecificSize<BR>dwDevSpecificOffset</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset from the beginning of this data structure in bytes of the variable sized field holding device specific information.</P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP">The high order 16 bits can be assigned for device specific extensions. The low order 16 bits are reserved.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">This structure is used as a parameter to <B>lineMakeCall</B> when setting up a call. Its parameters allow the application to specify the quality of service requested from the network as well as a variety of ISDN call setup parameters. If no <B>LINECALLPARAMS</B> structure is supplied to <B>lineMakeCall</B>, then a default POTS voice grade call is requested with the default Values  listed above.</P></TD></TR><TR><TD VALIGN="TOP">See AlsoFunctions:</P></TD><TD VALIGN="TOP">:  lineMakeCall</P></TD></TR><TR><TD VALIGN="TOP">Data Types:</P></TD><TD VALIGN="TOP">:  LINEBEARERMODE, LINEMEDIAMODE, LINECALLPARAMFLAGS</P></TD></TR></TBODY></TABLE>
<BR></P><P>LINECALLPARTYID</P>
<P>The <B>LINECALLPARTYID</B> bit flag constants describe the nature of the information available about the parties involved in a call.</P>
<P>LINECALLPARTYID_BLOCKED0x00000001<BR>LINECALLPARTYID_OUTOFAREA0x00000002<BR>LINECALLPARTYID_NAME0x00000004<BR>LINECALLPARTYID_ADDRESS 0x00000008<BR>LINECALLPARTYID_PARTIAL0x00000010<BR>LINECALLPARTYID_UNKNOWN 0x00000020<BR>LINECALLPARTYID_UNAVAIL 0x00000040</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="152pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Values</P></TD><TD VALIGN="TOP">The <B>LINECALLPARTYID</B> constants have the following values.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallPartyID_blocked</B></P></TD><TD VALIGN="TOP">Party ID information is not available because it has been blocked by the remote party.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallPartyID_outOfArea</B></P></TD><TD VALIGN="TOP">Caller ID information for the call is not available as it is not propagated all the way by the network.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallPartyID_name</B></P></TD><TD VALIGN="TOP">Party ID information consists of the party's name (e.g., from a directory kept inside the switch).</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallPartyID_address</B></P></TD><TD VALIGN="TOP">Party ID information consists of the party's address in either canonical address format or dialable address format.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallPartyID_partial</B></P></TD><TD VALIGN="TOP">Party ID information is valid, but is limited to partial information only.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallPartyID_unknown</B></P></TD><TD VALIGN="TOP">Party ID information is currently unknown but may become known later. </P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallPartyID_unavail</B></P></TD><TD VALIGN="TOP">Party ID information is not available and will not become later. Information may be unavailable for unspecified reasons, e.g., the information was not delivered by the network, ignored by the service provider, etc.</P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP">The high order 16 bits can be assigned for device specific extensions. The low order 16 bits are reserved.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP"><B>LINECALLPARTYID</B> describes for each of the possible parties involved in a call how the party ID information is formatted. This information is supplied in the <B>LINECALLINFO</B> data structure.</P></TD></TR><TR><TD VALIGN="TOP">See AlsoData Types:</P></TD><TD VALIGN="TOP">LINECALLINFO </P></TD></TR><TR><TD VALIGN="TOP">LINECALLPRIVILEGE</P></TD><TD VALIGN="TOP">The <B>LINECALLPRIVILEGE</B> bit flag constants describe the kinds of access rights or privileges an app with a call handle may have to the corresponding call.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPRIVILEGE_NONE</P></TD><TD VALIGN="TOP">0x00000001</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPRIVILEGE_MONITOR</P></TD><TD VALIGN="TOP">0x00000002</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPRIVILEGE_OWNER </P></TD><TD VALIGN="TOP">0x00000004</P></TD></TR><TR><TD VALIGN="TOP">Values</P></TD><TD VALIGN="TOP">The <B>LINECALLPRIVILEGE</B> constants have the following values.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallPrivilege_none</B></P></TD><TD VALIGN="TOP">The app has no privileges to the call. The app's handle is void and should not  be used. </P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallPrivilege_monitor</B></P></TD><TD VALIGN="TOP">The app has monitor privileges to the call. These privileges allow the app to monitor state changes and query information and status about the call.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallPrivilege_owner</B></P></TD><TD VALIGN="TOP">The app has owner privileges to the call. These privileges allow the app to manupulate the call in ways that affect the state of the call.</P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP">The high order 16 bits can be assigned for device specific extensions. The low order 16 bits are reserved.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">When a call handle is first provided to an app or whenever call privileges of that app are modified, the <B>LINE_CALLSTATE </B>message is sent to the application. When an application hands off a call, and if the receiving application does not already have a handle with <I>owner </I>privileges, then this message informs the application about its new privileges to the call.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">The <B>LINECALLPRIVILEGE</B> data type is also used as a parameter to the <B>lineHandoff</B> function. The application that hands off a call can specify the privilege it wants to be left with after the handoff succeeds.</P></TD></TR><TR><TD VALIGN="TOP"><B>See AlsoFunctions:</B></P></TD><TD VALIGN="TOP"><B>LineHandoff, lineGetCalls</B></P></TD></TR><TR><TD VALIGN="TOP">Messages: </P></TD><TD VALIGN="TOP"><B>LINE_CALLSTATE</B></P></TD></TR></TBODY></TABLE>
<BR></P><P>LINECALLREASON</P>
<P>The LINECALLREASON bit flag constants describe the reason for a call.</P>
<P>LINECALLREASON_DIRECT0x00000001<BR>LINECALLREASON_FWDBUSY0x00000002<BR>LINECALLREASON_FWDNOANSWER 0x00000004<BR>LINECALLREASON_FWDUNCOND0x00000008<BR>LINECALLREASON_PICKUP0x00000010<BR>LINECALLREASON_UNPARK0x00000020<BR>LINECALLREASON_REDIRECT 0x00000040<BR>LINECALLREASON_CALLCOMPLETION0x00000080<BR>LINECALLREASON_TRANSFER0x00000100<BR>LINECALLREASON_REMINDER0x00000200<BR>LINECALLREASON_UNKNOWN 0x00000400<BR>LINECALLREASON_UNAVAIL 0x00000800</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="169pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Values</P></TD><TD VALIGN="TOP">The <B>LINECALLREASON</B> constants have the following values.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallReason_direct</B></P></TD><TD VALIGN="TOP">This is a direct inbound or outbound call.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallReason_fwdBusy</B></P></TD><TD VALIGN="TOP">This call was forwarded from another extension that was busy at the time of the call.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallReason_fwdNoAnswer</B></P></TD><TD VALIGN="TOP">The call was forwarded from another extension that didn't answer the call after some number of rings.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallReason_fwdUncond</B></P></TD><TD VALIGN="TOP">The call was forwarded unconditionally from another number.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallReason_pickup</B></P></TD><TD VALIGN="TOP">The call was picked up from another extension.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallReason_unpark</B></P></TD><TD VALIGN="TOP">The call was retrieved as a parked call.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallReason_redirect</B></P></TD><TD VALIGN="TOP">The call was redirected to this station.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallReason_callCompletion</B></P></TD><TD VALIGN="TOP">The call was the result of a call completion request.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallReason_transfer</B></P></TD><TD VALIGN="TOP">The call has been transferred from another number.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallReason_reminder</B></P></TD><TD VALIGN="TOP">The call is a reminder (or "recall") that the user has a call parked or on hold for potentially a long time.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallReason_unknown</B></P></TD><TD VALIGN="TOP">The reason for the call is currently unknown but may become known later.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallReason_unavail</B></P></TD><TD VALIGN="TOP">The reason for the call is unavailable and will not become known later.</P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP">The high order 16 bits can be assigned for device specific extensions. The low order 16 bits are reserved.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP"><B>LINECALLREASON</B> is provided as part of the <B>LINECALLINFO</B> data structure. </P></TD></TR><TR><TD VALIGN="TOP">See AlsoFunctions:</P></TD><TD VALIGN="TOP">  lineGetCallInfo</P></TD></TR><TR><TD VALIGN="TOP">Data Types:</P></TD><TD VALIGN="TOP">  LINECALLINFO</P></TD></TR></TBODY></TABLE>
<BR></P><P>LINECALLSELECT</P>
<P>The <B>LINECALLSELECT</B> bit flag constants describe which calls are to be selected.</P>
<P>LINECALLSELECT_LINE0x00000001<BR>LINECALLSELECT_ADDRESS0x00000002<BR>LINECALLSELECT_CALL 0x00000004</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="125pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Values</P></TD><TD VALIGN="TOP">The <B>LINECALLSELECT</B> constants have the following values.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallSelect_line</B></P></TD><TD VALIGN="TOP">Selects calls on this specified line device.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallSelect_address</B></P></TD><TD VALIGN="TOP">Selects call on the specified address.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallSelect_call</B></P></TD><TD VALIGN="TOP">Selects related calls to the specified call. Examples are the parties in a conference call.</P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP">The high order 16 bits can be assigned for device specific extensions. The low order 16 bits are reserved.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">This data type is used in <B>lineGetCalls</B> to specify a selection (scope) of the calls that are requested.</P></TD></TR><TR><TD VALIGN="TOP"><B>See AlsoFunctions:</B></P></TD><TD VALIGN="TOP"><B>lineGetCalls</B></P></TD></TR></TBODY></TABLE>
<BR></P><P>LINECALLSTATE</P>
<P>The <B>LINECALLSTATE</B> bit flag constants describe the call states a call can be in.</P>
<P>LINECALLSTATE_IDLE0x00000001<BR>LINECALLSTATE_OFFERING0x00000002<BR>LINECALLSTATE_ACCEPTED0x00000004<BR>LINECALLSTATE_DIALTONE0x00000008<BR>LINECALLSTATE_DIALING0x00000010<BR>LINECALLSTATE_RINGBACK0x00000020<BR>LINECALLSTATE_BUSY0x00000040<BR>LINECALLSTATE_SPECIALINFO0x00000080<BR>LINECALLSTATE_CONNECTED0x00000100<BR>LINECALLSTATE_PROCEEDING0x00000200<BR>LINECALLSTATE_ONHOLD0x00000400<BR>LINECALLSTATE_CONFERENCED0x00000800<BR>LINECALLSTATE_ONHOLDPENDCONF0x00001000<BR>LINECALLSTATE_ONHOLDPENDTRANSFER0x00002000<BR>LINECALLSTATE_DISCONNECTED0x00004000<BR>LINECALLSTATE_UNKNOWN0x00008000</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="139pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Values</P></TD><TD VALIGN="TOP">The <B>LINECALLSTATE</B> constants have the following values.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallState_idle</B></P></TD><TD VALIGN="TOP">The call is idle - no call actually exists.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallState_offering</B></P></TD><TD VALIGN="TOP">The call is being offered to the station, signaling the arrival of a  new call. In some environments, a call in the offering state does not automatically alert the user; alerting is done by the switch instructing the line to ring, it does not affect any call states.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallState_accepted</B></P></TD><TD VALIGN="TOP">The call was offering and has been accepted. This indicates to other (monitoring) applications that the current owner application has claimed responsibility for answering the call. In ISDN, this also initiates alerting to both parties.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallState_dialtone</B></P></TD><TD VALIGN="TOP">The call is receiving a dial tone from the switch, which means that the switch is ready to receive a dialed number.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallState_dialing</B></P></TD><TD VALIGN="TOP">Destination address information (a phone number) is being sent to the switch via the call.  Note that the operation <B>lineGenerateDigits</B> does not place the line into the <I>dialing</I> state.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallState_ringback</B></P></TD><TD VALIGN="TOP">The call is receiving ringback from the called address. Ringback indicates that the other station has been reached and is being alerted.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallState_busy</B></P></TD><TD VALIGN="TOP">The call is receiving a busy tone. Busy tone indicates that the call cannot be completed - either a circuit (trunk) or the remote party's station are in use.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallState_special </B></P></TD><TD VALIGN="TOP">InfoSpecial information is sent by the network. Special information is typically sent when the destination cannot be reached.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallState_connected</B></P></TD><TD VALIGN="TOP">The call has been established, the connection is made. Information is able to flow over the call between the originating address and the destination address.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallState_proceeding</B></P></TD><TD VALIGN="TOP">Dialing has completed and the call is proceeding through the switch or telephone network.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallState_onHold</B></P></TD><TD VALIGN="TOP">The call is on hold by the switch.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallState_conferenced</B></P></TD><TD VALIGN="TOP">The call is currently a member of a multi-party conference call.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallState_onholdPendConf</B></P></TD><TD VALIGN="TOP">The call is currently on hold while it is being added to a conference.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallState_onholdPendTransfer</B></P></TD><TD VALIGN="TOP">The call is currently on hold awaiting transfer to another number.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallState_disconnected</B></P></TD><TD VALIGN="TOP">The remote party has disconnected from the call.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineCallState_unknown</B></P></TD><TD VALIGN="TOP">The state of the call is not known. This may be due to limitations of the call progress detection implementation.</P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP">The high order 8 bits can be assigned for device specific extensions. The low order 24 bits are reserved.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">The <B>LINECALLSTATE</B> constants are used as parameters by the <B>LINE_CALLSTATE</B> message sent to the application, the message carries the new call state that the call transitioned to. This data type is also used as a field in the <B>LINECALLSTATUS</B> structure, returned by the <B>lineGetCallStatus</B> function.</P></TD></TR><TR><TD VALIGN="TOP">See AlsoFunctions:</P></TD><TD VALIGN="TOP">:  lineGetCallStatus</P></TD></TR><TR><TD VALIGN="TOP">Messages:  LINE_CALLSTATE</P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP">Data Types:</P></TD><TD VALIGN="TOP">:  LINECALLSTATUS </P></TD></TR></TBODY></TABLE>
<BR></P><P>LINECALLSTATUS</P>
<P>The <B>LINECALLSTATUS</B> structure describes the current status of a call. The information in this structure, as returned via <B>lineGetCallStatus</B>, depends on the device capabilities of the address, the ownership of the call by the invoking application, and the current state of the call being queried.</P>
<P>typedef struct linecallstatus_tag {<BR>DWORDdwTotalSize;<BR>DWORDdwNeededSize;<BR>DWORDdwUsedSize;<BR><BR>DWORDdwCallState;<BR>DWORDdwCallStateMode;<BR>DWORDdwCallPrivilege;<BR>DWORDdwCallFeatures;<BR><BR>DWORDdwDevSpecificSize;<BR>DWORDdwDevSpecificOffset;<BR>} LINECALLSTATUS, FAR *LPLINECALLSTATUS;</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="155pt" VALIGN="TOP"><COL WIDTH="291pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Fields:</P></TD><TD VALIGN="TOP">The <B>LINECALLSTATUS</B> structure contains the following fields:</P></TD></TR><TR><TD VALIGN="TOP"><B>dwTotalSize</B></P></TD><TD VALIGN="TOP">The total size in bytes allocated to this data structure.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwNeededSize</B></P></TD><TD VALIGN="TOP">The size in bytes for this data structure that is needed to hold all the returned information.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwUsedSize</B></P></TD><TD VALIGN="TOP">The size in bytes of this data structure that contains useful information.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwCallState</B></P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>dwCallStateMode</B></P></TD><TD VALIGN="TOP">The dwCallState field specifies the current call state of the call, of type <B>LINECALLSTATE</B>. The interpretation of the <B>dwCallStateMode</B> field is call state dependent. It specifies the current mode of the call while in its current state (if that state defines a mode).</P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_IDLE</P></TD><TD VALIGN="TOP">Call state mode is unused.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_OFFERING</P></TD><TD VALIGN="TOP">Call state mode is unused.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_ACCEPTED</P></TD><TD VALIGN="TOP">Call state mode is unused.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_DIALTONE</P></TD><TD VALIGN="TOP">The call state mode is of type <B>LINEDIALTONEMODE</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINEDIALTONEMODE_NORMAL</P></TD><TD VALIGN="TOP">This is a "normal" dialtone which typically is a continuous tone.</P></TD></TR><TR><TD VALIGN="TOP">LINEDIALTONEMODE_SPECIAL</P></TD><TD VALIGN="TOP">This is a special dialtone indicating a certain condition is currently in effect.</P></TD></TR><TR><TD VALIGN="TOP">LINEDIALTONEMODE_INTERNAL</P></TD><TD VALIGN="TOP">This an internal (e.g., PBX) dialtone.</P></TD></TR><TR><TD VALIGN="TOP">LINEDIALTONEMODE_EXTERNAL</P></TD><TD VALIGN="TOP">This is an external (e.g., public network) dialtone.</P></TD></TR><TR><TD VALIGN="TOP">LINEDIALTONEMODE_UNKNOWN</P></TD><TD VALIGN="TOP">The dialtone mode is currently known, but may become known later.</P></TD></TR><TR><TD VALIGN="TOP">LINEDIALTONEMODE_UNAVAIL</P></TD><TD VALIGN="TOP">The dialtone mode is unavailable and will not become known.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_DIALING</P></TD><TD VALIGN="TOP">The call state mode is of type <B>LINEDIALINGMODE</B>. Values are:</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="155pt" VALIGN="TOP"><COL WIDTH="291pt" VALIGN="TOP"><COL WIDTH="291pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">LINEDIALINGMODE_ADDRESS</P></TD><TD VALIGN="TOP">Specifies that an address is being dialed.</P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP">LINEDIALINGMODE_BILLING</P></TD><TD VALIGN="TOP">Specifies that billing information such as a credit card number is being dialed.</P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_RINGBACK</P></TD><TD VALIGN="TOP">Call state mode is unused.</P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_BUSY</P></TD><TD VALIGN="TOP">The call state mode is of type <B>LINEBUSYMODE</B>. Values are:</P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP">LINEBUSYMODE_STATION</P></TD><TD VALIGN="TOP">The busy signal indicates that the called party's station is busy. This is usually signaled via a "normal" busy tone.</P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP">LINEBUSYMODE_TRUNK</P></TD><TD VALIGN="TOP">The busy signal indicates that a trunk or circuit is busy. This is usually signaled via a "long" busy tone.</P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP">LINEBUSYMODE_UNKNOWN</P></TD><TD VALIGN="TOP">The busy signal's specific mode is currently unkown, but may become known later.</P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP">LINEBUSYMODE_UNAVAIL</P></TD><TD VALIGN="TOP">The busy signal's specific mode is unavailable and will not become known.</P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_SPECIALINFO</P></TD><TD VALIGN="TOP">The call state mode is of type <B>LINESPECIALINFO</B>. Values are: </P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP">LINESPECIALINFO_NOCIRCUIT</P></TD><TD VALIGN="TOP">This special information tone preceeds a no circuit or emergency announcement (trunk blockage category).</P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP">LINESPECIALINFO_CUSTIRREG</P></TD><TD VALIGN="TOP">This special information tone preceeds a vacant number, AIS, Centrex number change and non-working station, access code not dialed or dialed in error, manual intercept operator message (customer irregularity category).</P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP">LINESPECIALINFO_REORDER</P></TD><TD VALIGN="TOP">This special information tone preceeds a reorder announcement (equipment irregularity category).</P></TD><TD VALIGN="TOP"></P></TD></TR></TBODY></TABLE>
<BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="155pt" VALIGN="TOP"><COL WIDTH="291pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">LINESPECIALINFO_UNKNOWN</P></TD><TD VALIGN="TOP">Specific about the special information tone are currently unknown but may become known later.</P></TD></TR><TR><TD VALIGN="TOP">LINESPECIALINFO_UNAVAIL</P></TD><TD VALIGN="TOP">Specifics about the special information tone are unavailable, and will not become known.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_CONNECTED</P></TD><TD VALIGN="TOP">Call state mode is unused.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_PROCEEDING</P></TD><TD VALIGN="TOP">Call state mode is unused.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_ONHOLD</P></TD><TD VALIGN="TOP">Call state mode is unused.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_CONFERENCED</P></TD><TD VALIGN="TOP">Call state mode is unused.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_ONHOLDPENDCONF</P></TD><TD VALIGN="TOP">Call state mode is unused.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_ONHOLDPENDTRANSF</P></TD><TD VALIGN="TOP">Call state mode is unused.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_DISCONNECTED</P></TD><TD VALIGN="TOP">Call state mode is of type <B>LINEDISCONNECTMODE</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINEDISCONNECTMODE_NORMAL</P></TD><TD VALIGN="TOP">This is a "normal" disconnect request by the remote party, the call was terminated normally.</P></TD></TR><TR><TD VALIGN="TOP">LINEDISCONNECTMODE_UNKNOWN</P></TD><TD VALIGN="TOP">The reason for the disconnect request is unknown.</P></TD></TR><TR><TD VALIGN="TOP">LINEDISCONNECTMODE_REJECT </P></TD><TD VALIGN="TOP">The remote user has rejected the call.</P></TD></TR><TR><TD VALIGN="TOP">LINEDISCONNECTMODE_PICKUP </P></TD><TD VALIGN="TOP">The call was picked up from elsewhere.</P></TD></TR><TR><TD VALIGN="TOP">LINEDISCONNECTMODE_FORWARDED</P></TD><TD VALIGN="TOP">The call was forwarded by the switch.</P></TD></TR><TR><TD VALIGN="TOP">LINEDISCONNECTMODE_BUSY</P></TD><TD VALIGN="TOP">The remote user's station is busy.</P></TD></TR><TR><TD VALIGN="TOP">LINEDISCONNECTMODE_NOANSWER</P></TD><TD VALIGN="TOP">The remote user's station does not answer.</P></TD></TR><TR><TD VALIGN="TOP">LINEDISCONNECTMODE_BADADDRESS</P></TD><TD VALIGN="TOP">The destination address in invalid.</P></TD></TR><TR><TD VALIGN="TOP">LINEDISCONNECTMODE_UNREACHABLE</P></TD><TD VALIGN="TOP">The remote user could not be reached.</P></TD></TR><TR><TD VALIGN="TOP">LINEDISCONNECTMODE_CONGESTION</P></TD><TD VALIGN="TOP">The network is congested.</P></TD></TR><TR><TD VALIGN="TOP">LINEDISCONNECTMODE_INCOMPATIBLE</P></TD><TD VALIGN="TOP">The remote user's station equipment is incompatible for the type of call requested.</P></TD></TR><TR><TD VALIGN="TOP">LINEDISCONNECTMODE_UNAVAIL</P></TD><TD VALIGN="TOP">The remote user's station equipment is incompatible for the type of call requested.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_UNKNOWN</P></TD><TD VALIGN="TOP">Call state mode is unused.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwCallPrivilege</B></P></TD><TD VALIGN="TOP">Specifies the application's privilege for this call, of type <B>LINECALLPRIVILEGE</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINECALLPRIVILEGE_MONITOR</P></TD><TD VALIGN="TOP">The app has monitor privileges. </P></TD></TR><TR><TD VALIGN="TOP">LINECALLPRIVILEGE_OWNER</P></TD><TD VALIGN="TOP">The app has owner privileges.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwCallFeatures</B></P></TD><TD VALIGN="TOP">These flags indicate which Telephony API functions can be invoked on the call given the availability of the feature in the device capabilities, the current call state, and call ownership of the invoking application. This field is of type <B>LINECALLFEATURE</B>. A zero indicates the corresponding feature cannot be invoked by the application on the call in its current state; a one indicates the feature can be invoked.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwDevSpecificSize</B></P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>dwDevSpecificOffset</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset in bytes from the beginning of this data structure of the variable sized device specific field. </P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP">Device specific extensions should use the DevSpecific (<B>dwDevSpecificSize</B> and <B>dwDevSpecificOffset</B>) variable sized area of this data structure.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">The application is sent a <B>LINE_CALLSTATE</B> message whenever the call state of a call changes. This message only provides the new call state of the call. Additional status about a call is available via <B>lineGetCallStatus</B>.</P></TD></TR><TR><TD VALIGN="TOP">See AlsoFunctions:</P></TD><TD VALIGN="TOP">:  lineGetCallStatus</P></TD></TR><TR><TD VALIGN="TOP">Messages:</P></TD><TD VALIGN="TOP">LINE_CALLSTATE</P></TD></TR><TR><TD VALIGN="TOP">Data Types:</P></TD><TD VALIGN="TOP">:  LINECALLSTATE, LINECALLFEATURE, LINEBUSYMODE, LINEDIALINGMODE, LINEDIALTONEMODE,  LINESPECIALINFO, LINEDISCONNECTMODE</P></TD></TR></TBODY></TABLE>
<BR></P><P>LINEDEVCAPFLAGS</P>
<P>The <B>LINEDEVCAPFLAGS</B> bit flag constants are a collection of BOOLEANs describing various line device capabilities.</P>
<P>LINEDEVCAPFLAGS_CROSSADDRCONF0x00000001<BR>LINEDEVCAPFLAGS_HIGHLEVCOMP0x00000002<BR>LINEDEVCAPFLAGS_LOWLEVCOMP0x00000004<BR>LINEDEVCAPFLAGS_MEDIACONTROL0x00000008<BR>LINEDEVCAPFLAGS_MULTIPLEADDR0x00000010</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="177pt" VALIGN="TOP"><COL WIDTH="163pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Values</P></TD><TD VALIGN="TOP">The <B>LINEDEVCAPFLAGS</B> constants have the following values.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDevCapFlags_crossAddrConf</B></P></TD><TD VALIGN="TOP">Specifies whether or not calls on different addresses on this line can be conferenced.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDevCapFlags_highLevComp</B></P></TD><TD VALIGN="TOP">Specifies whether or not high level compatibility information elements are supported on this line.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDevCapFlags_lowLevComp</B></P></TD><TD VALIGN="TOP">Specifies whether or not low level compatibility information elements are supported on this line.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDevCapFlags_mediaControl</B></P></TD><TD VALIGN="TOP">Specifies whether or not media control operations are available for calls at this line.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDevCapFlags_multipleAddr</B></P></TD><TD VALIGN="TOP">Specifies whether or not <B>lineMakeCall</B> or <B>lineDial</B> are able to deal with multiple addresses at once (e.g., for inverse multiplexing).</P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP">None. All 32 bits are reserved.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">None.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B>Data Types:</P></TD><TD VALIGN="TOP">:  <B>LINEDEVCAPS</B></P></TD></TR></TBODY></TABLE>
<BR></P><P>LINEDEVCAPS</P>
<P>The <B>LINEDEVCAPS</B> structure describes the capabilities of a line device.</P>
<P>typedef struct linedevcaps_tag {<BR>DWORDdwTotalSize;<BR>DWORDdwNeededSize;<BR>DWORDdwUsedSize;<BR><BR>DWORDdwAPIVersion;<BR>DWORDdwExtVersion;<BR><BR>DWORDdwExtensionID0;<BR>DWORDdwExtensionID1;<BR>DWORDdwExtensionID2;<BR>DWORDdwExtensionID3;<BR><BR>DWORDdwProviderInfoSize;<BR>DWORDdwProviderInfoOffset;<BR><BR>DWORDdwSwitchInfoSize;<BR>DWORDdwSwitchInfoOffset;<BR><BR>DWORDdwPermanentLineID;<BR>DWORDdwLineNameSize;<BR>DWORDdwLineNameOffset;<BR>DWORDdwStringFormat;<BR><BR>DWORDdwNumAddresses;<BR>DWORDdwBearerModes;<BR>DWORDdwMaxRate;<BR>DWORDdwMediaModes;<BR><BR>DWORDdwGenerateToneModes;<BR>DWORDdwGenerateToneMaxNumFreq;<BR>DWORDdwGenerateDigitModes;<BR>DWORDdwMonitorToneMaxNumFreq;<BR>DWORDdwMonitorToneMaxNumEntries;<BR>DWORDdwMonitorDigitModes;<BR>DWORDdwGatherDigitsMinTimeout;<BR>DWORDdwGatherDigitsMaxTimeout;<BR><BR>DWORDdwMedCtlDigitMaxListSize;<BR>DWORDdwMedCtlMediaMaxListSize;<BR>DWORDdwMedCtlToneMaxListSize;<BR>DWORDdwMedCtlCallStateMaxListSize;<BR><BR>DWORDdwDevCapFlags;<BR>DWORDdwMaxNumActiveCalls;<BR>DWORDdwAnswerMode;<BR>DWORDdwRingModes;<BR>DWORDdwLineStates;<BR><BR>DWORDdwUUIAcceptSize;<BR>DWORDdwUUIAnswerSize;<BR>DWORDdwUUIMakeCallSize;<BR>DWORDdwUUIDropSize;<BR>DWORDdwUUISendUserUserInfoSize;<BR>DWORDdwUUICallInfoSize;<BR><BR>LINEDIALPARAMSMinDialParams;<BR>LINEDIALPARAMSMaxDialParams;<BR>LINEDIALPARAMSDefaultDialParams;<BR><BR>DWORDdwNumTerminals;<BR>DWORDdwTerminalCapsSize;<BR>DWORDdwTerminalCapsOffset;<BR>DWORDdwTerminalTextEntrySize;<BR>DWORDdwTerminalTextSize;<BR>DWORDdwTerminalTextOffset;<BR><BR>DWORDdwDevSpecificSize;<BR>DWORDdwDevSpecificOffset;<BR>} LINEDEVCAPS, FAR *LPLINEDEVCAPS;</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="158pt" VALIGN="TOP"><COL WIDTH="289pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Fields:</P></TD><TD VALIGN="TOP">The <B>LINEDEVCAPS</B> structure contains the following fields:</P></TD></TR><TR><TD VALIGN="TOP"><B>dwTotalSize</B></P></TD><TD VALIGN="TOP">The total size in bytes allocated to this data structure.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwNeededSize</B></P></TD><TD VALIGN="TOP">The size in bytes for this data structure that is needed to hold all the returned information.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwUsedSize</B></P></TD><TD VALIGN="TOP">The size in bytes of this data structure that contains useful information.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwAPIVersion</B></P></TD><TD VALIGN="TOP">Specifies the API version number under which the Telephony API and the service provider for the line device will be operating. The high-order word is the major version number and the low-order word is the minor version number.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwExtVersion</B></P></TD><TD VALIGN="TOP">Specifies the extension version number under which the service provider for the line device will be operating. This version number is keyed to the specified Extension ID. The high-order word is the major version number and the low-order word is the minor version number.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwExtensionID0<BR>dwExtensionID1<BR>dwExtensionID2<BR>dwExtensionID3</B></P></TD><TD VALIGN="TOP">These four DWORDs specify the globally unique Extension ID for the service provider for the line device.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwProviderInfoSize<BR>dwProviderInfoOffset</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset in bytes from the beginning of this data structure of the variable sized field containing service provider information.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwSwitchInfoSize<BR>dwSwitchInfoOffset</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset in bytes from the beginning of this data structure of the variable sized device field containing switch information.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwPermanentLineID</B></P></TD><TD VALIGN="TOP">Specifies the permanent DWORD identifier by which the line device is known in the system's configuration.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwLineNameSize<BR>dwLineNameOffset</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset in bytes from the beginning of this data structure of the variable sized device field containing user configurable name for this line device. This name can be configured by the user when configuring the line device's service provider and is provided for the user's convenience.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwStringFormat</B></P></TD><TD VALIGN="TOP">Specifies the string format used with this line device, of type <B>STRINGFORMAT</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP">STRINGFORMAT_ASCII</P></TD><TD VALIGN="TOP">This is ASCII string format using one byte per character.</P></TD></TR><TR><TD VALIGN="TOP">STRINGFORMAT_DBCS</P></TD><TD VALIGN="TOP">This is DBCS string format using two bytes per character.</P></TD></TR><TR><TD VALIGN="TOP">STRINGFORMAT_UNICODE</P></TD><TD VALIGN="TOP">This is unicode string format using two bytes per character.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwNumAddresses</B></P></TD><TD VALIGN="TOP">Specifies the number of addresses associated with this line device. Individual addresses are referred to by address IDs. Address IDs range from zero to one less than the value indicated by <B>dwNumAddresses</B>.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwBearerModes</B></P></TD><TD VALIGN="TOP">This flag array indicates the different bearer modes, of type <B>LINEBEARERMODE</B> the address is able to support. </P></TD></TR><TR><TD VALIGN="TOP"><B>LINEBEARERMODE</B>. </P></TD><TD VALIGN="TOP">Specifies the current bearer mode of the call, of type Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINEBEARERMODE_VOICE</P></TD><TD VALIGN="TOP">This is a regular 3.1kHz analog voice grade bearer service. Bit integrity is not assured. Voice can support fax and modem media modes.</P></TD></TR><TR><TD VALIGN="TOP">LINEBEARERMODE_SPEECH</P></TD><TD VALIGN="TOP">This corresponds to G.711 speech transmission on the call. The network may use processing techniques such as analog transmission, echo cancellation and compression/decompression. Bit integrity is not assured. Speech is not intended to support fax and modem media modes.</P></TD></TR><TR><TD VALIGN="TOP">LINEBEARERMODE_MULTIUSE</P></TD><TD VALIGN="TOP">The multi-use mode defined by ISDN.</P></TD></TR><TR><TD VALIGN="TOP">LINEBEARERMODE_DATA</P></TD><TD VALIGN="TOP">The unrestricted data transfer on the call. The data rate is specified separately. </P></TD></TR><TR><TD VALIGN="TOP">LINEBEARERMODE_ALTSPEECHDATA</P></TD><TD VALIGN="TOP">The alternate transfer of speech or unrestricted data on the same call (ISDN).</P></TD></TR><TR><TD VALIGN="TOP">LINEBEARERMODE_NONCALLSIGNALING</P></TD><TD VALIGN="TOP">This corresponds to a non call-associated signaling connection from the app to the service provider or switch (treated as a "media stream" by the Telephony API).  </P></TD></TR><TR><TD VALIGN="TOP"><B>DwMaxRate</B></P></TD><TD VALIGN="TOP">This field contains the maximum data rate in bits per second for information exchange over the call.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwMediaModes</B></P></TD><TD VALIGN="TOP">This flag array indicates the different media modes the address is able to support, of type <B>LINEMEDIAMODE</B>. </P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_NONE</P></TD><TD VALIGN="TOP">No media stream. This value is mainly used as a NULL value.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_UNKNOWN</P></TD><TD VALIGN="TOP">A media stream exists but its mode is not known. This would correspond to a call with an unclassified media type. In typical analog telephony environments, an inbound call's media mode may be unknown until after the call has been answered and the media stream filtered to make a determination.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_INTERACTIVEVOICE</P></TD><TD VALIGN="TOP">The presence of voice energy on the call and the call is treated as an interactive call with humans on both ends.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_AUTOMATEDVOICE</P></TD><TD VALIGN="TOP">The presence of voice energy on the call and the voice is locally handled by an automated application.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_DIGITALDATA</P></TD><TD VALIGN="TOP">Digital data being transmitted over the call.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_G3FAX</P></TD><TD VALIGN="TOP">A group 3 fax is being sent or received over the call.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_G4FAX</P></TD><TD VALIGN="TOP">A group 4 fax is being sent or received over the call.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_DATAMODEM</P></TD><TD VALIGN="TOP">A data modem session on the call.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_TELETEX</P></TD><TD VALIGN="TOP">A teletex session on the call. Teletex is one of the telematic services.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_VIDEOTEX</P></TD><TD VALIGN="TOP">A videotex session on the call. Videotex is one the telematic services.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_TELEX</P></TD><TD VALIGN="TOP">A telex session on the call. Telex is one the telematic services.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_MIXED</P></TD><TD VALIGN="TOP">A mixed session on the call. Mixed is one the ISDN telematic services.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_TDD</P></TD><TD VALIGN="TOP">A TDD session on the call. TDD stands for Telephony Devices for the Deaf.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_ADSI</P></TD><TD VALIGN="TOP">An ADSI session on the call. ADSI stands for Analog Display Services Interface.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_UNAVAIL</P></TD><TD VALIGN="TOP">The media mode of the call is unavailable and will not be known. </P></TD></TR><TR><TD VALIGN="TOP"><B>DwGenerateToneModes</B></P></TD><TD VALIGN="TOP">Specifies the different kinds of tones that can be generated on this line, of type <B>LINETONEMODE</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINETONEMODE_CUSTOM</P></TD><TD VALIGN="TOP">The tone is a custom tone, defined by the specified frequencies.</P></TD></TR><TR><TD VALIGN="TOP">LINETONEMODE_RINGBACK</P></TD><TD VALIGN="TOP">The tone to be generated is ringback tone.</P></TD></TR><TR><TD VALIGN="TOP">LINETONEMODE_BUSY</P></TD><TD VALIGN="TOP">The tone is a standard (station) busy tone.</P></TD></TR><TR><TD VALIGN="TOP">LINETONEMODE_BEEP</P></TD><TD VALIGN="TOP">The tone is a beep, as used to announce the beginning of a recording.</P></TD></TR><TR><TD VALIGN="TOP">LINETONEMODE_BILLING</P></TD><TD VALIGN="TOP">The tone is billing information tone such as a credit card prompt tone.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwGenerateToneMaxNumFreq</B></P></TD><TD VALIGN="TOP">This field contains the maximum number of frequencies that can be specified in describing a general tone using the <B>LINEGENERATETONE</B> data structure when generating a tone using <B>lineGenerateTone</B>. A value of zero indicates that tone generation is not available.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwGenerateDigitModes</B></P></TD><TD VALIGN="TOP">This field specifies the digit modes than can be generated on this line, of type <B>LINEDIGITMODE</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINEDIGITMODE_PULSE</P></TD><TD VALIGN="TOP">Generate digits as pulse/rotary pulse sequences.</P></TD></TR><TR><TD VALIGN="TOP">LINEDIGITMODE_DTMF</P></TD><TD VALIGN="TOP">Generate digits as DTMF tones.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwMonitorToneMaxNumFreq</B></P></TD><TD VALIGN="TOP">This field contains the maximum number of frequencies that can be specified in describing a general tone using the <B>LINEMONITORTONE</B> data structure when monitoring a general tone using <B>lineMonitorTones</B>. A value of zero indicates that tone monitor is not available.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwMonitorToneMaxNumEntries</B></P></TD><TD VALIGN="TOP">This field contains the maximum number of entries that can be specified in a tone list to <B>lineMonitorTones</B>.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwMonitorDigitModes</B></P></TD><TD VALIGN="TOP">This field specifies the digit modes than can be detected on this line, of type <B>LINEDIGITMODE</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINEDIGITMODE_PULSE</P></TD><TD VALIGN="TOP">Detect digits as audible clicks that are the result of rotary pulse sequences.</P></TD></TR><TR><TD VALIGN="TOP">LINEDIGITMODE_DTMF</P></TD><TD VALIGN="TOP">Detect digits as DTMF tones.</P></TD></TR><TR><TD VALIGN="TOP">LINEDIGITMODE_DTMFEND</P></TD><TD VALIGN="TOP">Detect down edges of digits detected as DTMF tones.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwGatherDigitsMinTimeout</B></P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>dwGatherDigitsMaxTimeout</B></P></TD><TD VALIGN="TOP">These fields contain the minimum and maximum values in milliseconds that can be specified for both the first digit and inter digit timeout values used by <B>lineGatherDigits</B>. If both these field are zero, then timeouts are not supported.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwMedCtlDigitMaxListSize<BR>dwMedCtlMediaMaxListSize<BR>dwMedCtlToneMaxListSize<BR>dwMedCtlCallStateMaxListSize</B></P></TD><TD VALIGN="TOP">These fields contain the maximum number of entries that can be specified in the digit list, the media list, the tone list, and the call state list parameters of <B>lineSetMediaControl</B> respectively.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwDevCapFlags</B></P></TD><TD VALIGN="TOP">This field specifies various boolean device capabilities, of type <B>LINEDEVCAPFLAGS</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINEDEVCAPFLAGS_CROSSADDRCONF</P></TD><TD VALIGN="TOP">Specifies whether or not calls on different addresses on this line can be conferenced.</P></TD></TR><TR><TD VALIGN="TOP">LINEDEVCAPFLAGS_HIGHLEVCOMP</P></TD><TD VALIGN="TOP">Specifies whether or not high level compatibility information elements are supported on this line.</P></TD></TR><TR><TD VALIGN="TOP">LINEDEVCAPFLAGS_LOWLEVCOMP</P></TD><TD VALIGN="TOP">Specifies whether or not low level compatibility information elements are supported on this line.</P></TD></TR><TR><TD VALIGN="TOP">LINEDEVCAPFLAGS_MEDIACONTROL</P></TD><TD VALIGN="TOP">Specifies whether or not media control operations are available for calls at this line.</P></TD></TR><TR><TD VALIGN="TOP">LINEDEVCAPFLAGS_MULTIPLEADDR</P></TD><TD VALIGN="TOP">Specifies whether or not <B>lineMakeCall</B> or <B>lineDial</B> are able to deal with multiple addresses at once (e.g., for inverse multiplexing).</P></TD></TR><TR><TD VALIGN="TOP"><B>DwMaxNumActiveCalls</B></P></TD><TD VALIGN="TOP">This field provides the maximum number of (minimum bandwidth) calls that can be active (i.e., connected) on the line at any one time. The actual number of active calls may be lower if higher bandwidth calls have been established on the line.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwAnswerMode</B></P></TD><TD VALIGN="TOP">This field specifies the effect on the active call when answering another offering call on a line device, of type <B>LINEANSWERMODE</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINEANSWERMODE_NONE</P></TD><TD VALIGN="TOP">Answering another call on the same has no effect on the existing active call(s) on the line.</P></TD></TR><TR><TD VALIGN="TOP">LINEANSWERMODE_DROP</P></TD><TD VALIGN="TOP">The currently active call will be automatically dropped.</P></TD></TR><TR><TD VALIGN="TOP">LINEANSWERMODE_HOLD</P></TD><TD VALIGN="TOP">The currently active call will automatically be placed on hold.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwRingModes</B></P></TD><TD VALIGN="TOP">This field contains the number of different ring modes that can be reported via the <B>LINE_LINEDEVSTATE</B> message with the <I>ringing</I> indication. Different ring modes range from one to <B>dwRingModes</B>. Zero indicates no ring.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwLineStates</B></P></TD><TD VALIGN="TOP">This field specified the different line status components for which the application may be notified via a <B>LINE_LINEDEVSTATE</B> message on this line, of type <B>LINEDEVSTATE</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINEDEVSTATE_OTHER</P></TD><TD VALIGN="TOP">An other status item than those listed below has changed.</P></TD></TR><TR><TD VALIGN="TOP">LINEDEVSTATE_RINGING</P></TD><TD VALIGN="TOP">The switch tells the line to alert the user.</P></TD></TR><TR><TD VALIGN="TOP">LINEDEVSTATE_CONNECTED</P></TD><TD VALIGN="TOP">The line was previously disconnected and is now connected to the API.</P></TD></TR><TR><TD VALIGN="TOP">LINEDEVSTATE_DISCONNECTED</P></TD><TD VALIGN="TOP">This line was previously connected and is now disconnected from the API.</P></TD></TR><TR><TD VALIGN="TOP">LINEDEVSTATE_MSGWAITON</P></TD><TD VALIGN="TOP">The message waiting indicator is turned on.</P></TD></TR><TR><TD VALIGN="TOP">LINEDEVSTATE_MSGWAITOFF</P></TD><TD VALIGN="TOP">The message waiting indicator is turned off.</P></TD></TR><TR><TD VALIGN="TOP">LINEDEVSTATE_INSERVICE</P></TD><TD VALIGN="TOP">The line is connected to the API. This happens when the API is first activated, or when the line wire is physically plugged in and in service at the switch while the API is active.</P></TD></TR><TR><TD VALIGN="TOP">LINEDEVSTATE_OUTOFSERVICE</P></TD><TD VALIGN="TOP">The line is out of service at the switch or physically disconnected. The API cannot be used to operate on the line device.</P></TD></TR><TR><TD VALIGN="TOP">LINEDEVSTATE_MAINTENANCE</P></TD><TD VALIGN="TOP">Mainatenance is being performed on the line at the switch. The API cannot be used to operate on the line device.</P></TD></TR><TR><TD VALIGN="TOP">LINEDEVSTATE_OPEN</P></TD><TD VALIGN="TOP">The line has been opened.</P></TD></TR><TR><TD VALIGN="TOP">LINEDEVSTATE_CLOSE</P></TD><TD VALIGN="TOP">The line has been closed.</P></TD></TR><TR><TD VALIGN="TOP">LINEDEVSTATE_NUMCALLS</P></TD><TD VALIGN="TOP">The number of calls on the line device has changed.</P></TD></TR><TR><TD VALIGN="TOP">LINEDEVSTATE_TERMINALS</P></TD><TD VALIGN="TOP">The terminal settings have changed.</P></TD></TR><TR><TD VALIGN="TOP">LINEDEVSTATE_ROAMMODE</P></TD><TD VALIGN="TOP">The roam mode of the line device has changed.</P></TD></TR><TR><TD VALIGN="TOP">LINEDEVSTATE_BATTERY</P></TD><TD VALIGN="TOP">The battery level has changed significantly (cellular).</P></TD></TR><TR><TD VALIGN="TOP">LINEDEVSTATE_SIGNAL</P></TD><TD VALIGN="TOP">The signal level has changed significantly (cellular).</P></TD></TR><TR><TD VALIGN="TOP">LINEDEVSTATE_DEVSPECIFIC</P></TD><TD VALIGN="TOP">The line's device specific information has changed.</P></TD></TR><TR><TD VALIGN="TOP">LINEDEVSTATE_REINIT</P></TD><TD VALIGN="TOP">Items have changed in the configuration of line devices. To become aware of these changes (e.g., new line devices) the app should reinitialize its use of the API. The hDevice parameter is left NULL for this state change as it applies to any of the lines in the system.</P></TD></TR><TR><TD VALIGN="TOP">LINEDEVSTATE_LOCK</P></TD><TD VALIGN="TOP">The locked status of the line device has changed.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwUUIAcceptSize</B></P></TD><TD VALIGN="TOP">This field specifies the maximum size of user-to-user information that can be sent during a call accept.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwUUIAnswerSize</B></P></TD><TD VALIGN="TOP">This field specifies the maximum size of user-to-user information that can be sent during a call answer.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwUUIMakeCallSize</B></P></TD><TD VALIGN="TOP">This field specifies the maximum size of user-to-user information that can be sent during a make call.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwUUIDropSize</B></P></TD><TD VALIGN="TOP">This field specifies the maximum size of user-to-user information that can be sent during a call drop.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwUUISendUserUserInfoSize</B></P></TD><TD VALIGN="TOP">This field specifies the maximum size of user-to-user information that can be sent separately any time during a call via <B>lineSendUserUserInfo</B>.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwUUICallInfoSize</B></P></TD><TD VALIGN="TOP">This field specifies the maximum size of user-to-user information that can be received via the <B>LINECALLINFO</B> structure.</P></TD></TR><TR><TD VALIGN="TOP"><B>MinDialParams<BR>MaxDialParams</B></P></TD><TD VALIGN="TOP">These fields contain the minimum and maximum values for the dial parameters in milliseconds that can be set for calls on this line. Dialing parameters can be set to values in this range. The granularity of the actual settings are service provider-specific.</P></TD></TR><TR><TD VALIGN="TOP"><B>DefaultDialParams</B></P></TD><TD VALIGN="TOP">This field contains the default dial params used for calls on this line. These parameter values can be overridden on a per-call basis.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwNumTerminals</B></P></TD><TD VALIGN="TOP">Specifies the number of terminals that can be set for this line device, its addresses, or its calls. Individual terminals are referred to by terminal IDs, and range from zero to one less than the value indicated by <B>dwNumTerminals</B>. </P></TD></TR><TR><TD VALIGN="TOP"><B>DwTerminalCapsSize<BR>dwTerminalCapsOffset</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset in bytes from the beginning of this data structure of the variable sized device field containing an array with entries of type <B>LINETERMCAPS</B>. This array is indexed by terminal IDs, in the range from zero to <B>dwNumTerminals</B> -1. Each entry in the array specifies the terminal device capabilities of the corresponding terminal.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwTerminalTextEntrySize</B></P></TD><TD VALIGN="TOP">Specifies the size in bytes of each of the terminal text descriptions pointed at by <B>dwTerminalTextSize/Offset</B>.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwTerminalTextSize<BR>dwTerminalTextOffset</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset from the beginning of this data structure in bytes of the variable sized field containing descriptive text about each of the line's available terminals. Each message is <B>dwTerminalTextEntrySize</B> bytes long. The string format of these textual descriptions is indicated by <B>dwStringFormat</B> in the line's device capabilities.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwDevSpecificSize<BR>dwDevSpecificOffset</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset in bytes from the beginning of this data structure of the variable sized device specific field. </P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP">Device specific extensions should use the DevSpecific (<B>dwDevSpecificSize</B> and <B>dwDevSpecificOffset</B>) variable sized area of this data structure.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">None.</P></TD></TR><TR><TD VALIGN="TOP"><B>See AlsoFunctions:</B></P></TD><TD VALIGN="TOP"><B>:</B>  <B>lineGetDevCaps</B></P></TD></TR><TR><TD VALIGN="TOP">Data Types:</P></TD><TD VALIGN="TOP">: <B>LINEADDRESSSHARING, LINETERMMODE, LINEBEARERMODE, LINEGENERATETONE, LINEDIGITMODE</B></P></TD></TR></TBODY></TABLE>
<BR></P><P>LINEDEVSTATE</P>
<P>The <B>LINEDEVSTATE</B> bit flag constants describe various line status events.</P>
<P>LINEDEVSTATE_OTHER0x00000001<BR>LINEDEVSTATE_RINGING0x00000002<BR>LINEDEVSTATE_CONNECTED0x00000004<BR>LINEDEVSTATE_DISCONNECTED0x00000008<BR>LINEDEVSTATE_MSGWAITON0x00000010<BR>LINEDEVSTATE_MSGWAITOFF0x00000020<BR>LINEDEVSTATE_INSERVICE0x00000040<BR>LINEDEVSTATE_OUTOFSERVICE0x00000080<BR>LINEDEVSTATE_MAINTENANCE0x00000100<BR>LINEDEVSTATE_OPEN0x00000200<BR>LINEDEVSTATE_CLOSE0x00000400<BR>LINEDEVSTATE_NUMCALLS0x00000800<BR>LINEDEVSTATE_NUMCOMPLETIONS0x00001000<BR>LINEDEVSTATE_TERMINALS0x00002000<BR>LINEDEVSTATE_ROAMMODE0x00004000<BR>LINEDEVSTATE_HOME0x00008000<BR>LINEDEVSTATE_BATTERY0x00010000<BR>LINEDEVSTATE_SIGNAL0x00020000<BR>LINEDEVSTATE_DEVSPECIFIC0x00040000<BR>LINEDEVSTATE_REINIT0x00080000<BR>LINEDEVSTATE_LOCK0x00100000</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="179pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Values</P></TD><TD VALIGN="TOP">The <B>LINEDEVSTATE</B> constants have the following values.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDevState_other</B></P></TD><TD VALIGN="TOP">An other device status item has changed.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDevState_ringing</B></P></TD><TD VALIGN="TOP">The switch tells the line to alert the user.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDevState_connected</B></P></TD><TD VALIGN="TOP">The line was previously disconnected and is now connected to the API.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDevState_disconnected</B></P></TD><TD VALIGN="TOP">This line was previously connected and is now disconnected from the API.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDevState_msgWaitOn</B></P></TD><TD VALIGN="TOP">The message waiting indicator is turned on.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDevState_msgWaitOff</B></P></TD><TD VALIGN="TOP">The message waiting indicator is turned off.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDevState_inService</B></P></TD><TD VALIGN="TOP">The line is connected to the API. This happens when the API is first activated, or when the line wire is physically plugged in and in service at the switch while the API is active.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDevState_outOfService</B></P></TD><TD VALIGN="TOP">The line is out of service at the switch or physically disconnected. The API cannot be used to operate on the line device.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDevState_maintenance</B></P></TD><TD VALIGN="TOP">Mainatenance is being performed on the line at the switch. The API cannot be used to operate on the line device.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDevState_open</B></P></TD><TD VALIGN="TOP">The line has been opened by another application.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDevState_close</B></P></TD><TD VALIGN="TOP">The line has been closed by another application.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDevState_numCalls</B></P></TD><TD VALIGN="TOP">The number of calls on the line device has changed.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDevState_numCompletions</B></P></TD><TD VALIGN="TOP">The number of outstanding call completions on the line device has changed.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDevState_terminals</B></P></TD><TD VALIGN="TOP">The terminal settings have changed. This may happen, for example, if multiple line devices share terminals among them (e.g., two lines sharing a phone terminal).</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDevState_roammode</B></P></TD><TD VALIGN="TOP">The roam mode of the line device has changed.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDevState_battery</B></P></TD><TD VALIGN="TOP">The battery level has changed significantly (cellular).</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDevState_signal</B></P></TD><TD VALIGN="TOP">The signal level has changed significantly (cellular).</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDevState_devSpecific</B></P></TD><TD VALIGN="TOP">The line's device specific information has changed.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDevState_reinit</B></P></TD><TD VALIGN="TOP">Items have changed in the configuration of line devices. To become aware of these changes (e.g., new line devices) the app should reinitialize its use of the API.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDevState_lock</B></P></TD><TD VALIGN="TOP">The locked status of the line device has changed.</P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP">The high order 8 bits can be assigned for device specific extensions. The low order 24 bits are reserved.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">None.</P></TD></TR><TR><TD VALIGN="TOP"><B>See AlsoFunctions:</B></P></TD><TD VALIGN="TOP"><B>lineForward, lineGetLineDevStatus</B></P></TD></TR><TR><TD VALIGN="TOP">Messages:  <B>LINE_ADDRESSSTATE</B></P></TD><TD VALIGN="TOP"></P></TD></TR></TBODY></TABLE>
<BR></P><P>LINEDEVSTATUS</P>
<P>The <B>LINEDEVSTATUS</B> structure describes the current status of a line device.</P>
<P>typedef struct linedevstatus_tag {<BR>DWORDdwTotalSize;<BR>DWORDdwNeededSize;<BR>DWORDdwUsedSize;<BR><BR>DWORDdwNumOpens;<BR>DWORDdwOpenMediaModes;<BR>DWORDdwNumActiveCalls;<BR>DWORDdwNumOnHoldCalls;<BR>DWORDdwNumOnHoldPendCalls;<BR>DWORDdwLineFeatures;<BR>DWORDdwNumCallCompletions;<BR>DWORDdwRingMode;<BR>DWORDdwSignalLevel;<BR>DWORDdwBatteryLevel;<BR>DWORDdwRoamMode;<BR><BR>DWORDdwDevStatusFlags;<BR><BR>DWORDdwTerminalModesSize;<BR>DWORDdwTerminalModesOffset;<BR><BR>DWORDdwDevSpecificSize;<BR>DWORDdwDevSpecificOffset;<BR>} LINEDEVSTATUS, FAR *LPLINEDEVSTATUS;</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="163pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Fields:</P></TD><TD VALIGN="TOP">The <B>LINEDEVSTATUS</B> structure contains the following fields:</P></TD></TR><TR><TD VALIGN="TOP"><B>dwTotalSize</B></P></TD><TD VALIGN="TOP">The total size in bytes allocated to this data structure.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwNeededSize</B></P></TD><TD VALIGN="TOP">The size in bytes for this data structure that is needed to hold all the returned information.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwUsedSize</B></P></TD><TD VALIGN="TOP">The size in bytes of this data structure that contains useful information.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwNumOpens</B></P></TD><TD VALIGN="TOP">Specifies the number of active opens on the line device.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwOpenMediaModes</B></P></TD><TD VALIGN="TOP">This bit array indicates for which media modes the line device is currently open.  </P></TD></TR><TR><TD VALIGN="TOP"><B>DwNumActiveCalls</B></P></TD><TD VALIGN="TOP">Specifies the number of calls currently active. This number excludes all calls on hold or on hold pending transfer or conference.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwNumOnHoldCalls</B></P></TD><TD VALIGN="TOP">Specifies the number of calls currently on hold.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwNumOnHoldPendingCalls</B></P></TD><TD VALIGN="TOP">Specifies the number of calls currently on hold pending either transfer to conference (or drop).</P></TD></TR><TR><TD VALIGN="TOP"><B>DwLineFeatures</B></P></TD><TD VALIGN="TOP">This field specifies the line-related API functions that are currently available on this line, of type <B>LINEFEATURE</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINEFEATURE_DEVSPECIFIC</P></TD><TD VALIGN="TOP">Device specific operations can be used on the line.</P></TD></TR><TR><TD VALIGN="TOP">LINEFEATURE_DEVSPECIFICFEAT</P></TD><TD VALIGN="TOP">Device specific features can be used on the line.</P></TD></TR><TR><TD VALIGN="TOP">LINEFEATURE_FORWARD</P></TD><TD VALIGN="TOP">Forwarding of all addresses can be used on the line.</P></TD></TR><TR><TD VALIGN="TOP">LINEFEATURE_MAKECALL</P></TD><TD VALIGN="TOP">An outbound call can be placed on this line using an unspecified address.</P></TD></TR><TR><TD VALIGN="TOP">LINEFEATURE_SETMEDIACONTROL</P></TD><TD VALIGN="TOP">Media control can be set on this line.</P></TD></TR><TR><TD VALIGN="TOP">LINEFEATURE_SETERMINAL</P></TD><TD VALIGN="TOP">Terminal modes for this line can be set.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwNumCallCompletions</B></P></TD><TD VALIGN="TOP">Specifies the number of outstanding call completion requests on the line.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwRingMode</B></P></TD><TD VALIGN="TOP">Specifies the current ring mode on the line device.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwBatteryLevel</B></P></TD><TD VALIGN="TOP">Specifies the current battery level of the line device hardware. This is value in the range 0x00000000 (battery empty) to 0x0000FFFF (battery full).</P></TD></TR><TR><TD VALIGN="TOP"><B>DwSignalLevel</B></P></TD><TD VALIGN="TOP">Specifies the current signal level of the connection on the line. This is value in the range 0x00000000 (weakest signal) to 0x0000FFFF (strongest signal).</P></TD></TR><TR><TD VALIGN="TOP"><B>DwRoamMode</B></P></TD><TD VALIGN="TOP">Specifies the current roam mode of the line device, of type <B>LINEROAMMODE</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINEROAMMODE_UNKNOWN</P></TD><TD VALIGN="TOP">The roam mode is currently unknown, but may become known later.</P></TD></TR><TR><TD VALIGN="TOP">LINEROAMMODE_UNAVAIL</P></TD><TD VALIGN="TOP">The roam mode is unavailable and will not be known.</P></TD></TR><TR><TD VALIGN="TOP">LINEROAMMODE_HOME</P></TD><TD VALIGN="TOP">The line is connected to the home network node.</P></TD></TR><TR><TD VALIGN="TOP">LINEROAMMODE_ROAMA</P></TD><TD VALIGN="TOP">The line is connected to the Roam-A carrier and calls are charged accordingly.</P></TD></TR><TR><TD VALIGN="TOP">LINEROAMMODE_ROAMB</P></TD><TD VALIGN="TOP">The line is connected to the Roam-B carrier and calls are charged accordingly.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwDevStatusFlags</B></P></TD><TD VALIGN="TOP">The size in bytes of this data structure that contains useful information, of type <B>LINEDEVSTATUSFLAGS</B>.</P></TD></TR><TR><TD VALIGN="TOP">LINEDEVSTATUSFLAGS_CONNECTED</P></TD><TD VALIGN="TOP">Specifies whether the line is connected to the API. If TRUE, the line is connected, and API is able to operate on the line device. If FALSE, the line is disconnected, and the application is unable to control the line device via the API.</P></TD></TR><TR><TD VALIGN="TOP">LINEDEVSTATUSFLAGS_MSGWAIT</P></TD><TD VALIGN="TOP">This field indicates whether or not the line has a message waiting.  If TRUE, a message is waiting; if FALSE, no message is waiting.</P></TD></TR><TR><TD VALIGN="TOP">LINEDEVSTATUSFLAGS_INSERVICE</P></TD><TD VALIGN="TOP">This field indicates whether or not the line is in service. If TRUE, th elin eis in service; if FALSE, the line is out of service.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwTerminalModesSize</B></P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>dwTerminalModesOffset</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset in bytes from the beginning of this data structure of the variable sized device field containing an array with DWORD-sized entries, of type <B>LINETERMMODE</B>. This array is indexed by terminal IDs, in the range from zero to <B>dwNumTerminals</B> -1.  Each entry in the array specifies the current terminal modes for the corresponding terminal set via the <B>lineSetTerminal</B> operation for this line. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINETERMMODE_LAMPS</P></TD><TD VALIGN="TOP">This are lamp events sent from the line to the terminal.</P></TD></TR><TR><TD VALIGN="TOP">LINETERMMODE_BUTTONS</P></TD><TD VALIGN="TOP">These are button press events sent from the terminal to the line.</P></TD></TR><TR><TD VALIGN="TOP">LINETERMMODE_DISPLAY</P></TD><TD VALIGN="TOP">This is display information sent from the line to the terminal.</P></TD></TR><TR><TD VALIGN="TOP">LINETERMMODE_RINGER</P></TD><TD VALIGN="TOP">This is ringer control information sent from the switch to the terminal.</P></TD></TR><TR><TD VALIGN="TOP">LINETERMMODE_HOOKSWITCH</P></TD><TD VALIGN="TOP">These are hookswitch event sent between the terminal and the line.</P></TD></TR><TR><TD VALIGN="TOP">LINETERMMODE_MEDIAFROMTERM</P></TD><TD VALIGN="TOP">This is the unidirectional media stream from the terminal to the line associated with a call on the line. Use this value when routing of both unidirectional channels of a call's media stream can be controlled independently.</P></TD></TR><TR><TD VALIGN="TOP">LINETERMMODE_MEDIATOTERM</P></TD><TD VALIGN="TOP">This is the unidirectional media stream from the line to the terminal associated with a call on the line. Use this value when routing of both unidirectional channels of a call's media stream can be controlled independently.</P></TD></TR><TR><TD VALIGN="TOP">LINETERMMODE_MEDIABIDIR</P></TD><TD VALIGN="TOP">This is the bidirectional media stream associated with a call on the line and the terminal. Use this value when routing of both unidirectional channels of a call's media stream cannot be controlled independently.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwDevSpecificSize</B></P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>dwDevSpecificOffset</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset in bytes from the beginning of this data structure of the variable sized device specific field. </P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP">Device specific extensions should use the DevSpecific (<B>dwDevSpecificSize</B> and <B>dwDevSpecificOffset</B>) variable sized area of this data structure.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">None.</P></TD></TR><TR><TD VALIGN="TOP"><B>See AlsoFunctions:</B></P></TD><TD VALIGN="TOP"><B>lineGetLineDevStatus</B></P></TD></TR><TR><TD VALIGN="TOP">Data Types:</P></TD><TD VALIGN="TOP"><B>LINEOPENMODE, LINEMEDIAMODE</B></P></TD></TR></TBODY></TABLE>
<BR></P><P>LINEDEVSTATUSFLAGS</P>
<P>The <B>LINEDEVSTATUSFLAGS</B> bit flag constants describe a collection of BOOLEAN line device status items. </P>
<P>LINEDEVSTATUSFLAGS_CONNECTED0x00000001<BR>LINEDEVSTATUSFLAGS_MSGWAIT0x00000002<BR>LINEDEVSTATUSFLAGS_INSERVICE0x00000004<BR>LINEDEVSTATUSFLAGS_LOCKED0x00000008</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="157pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Values</P></TD><TD VALIGN="TOP">The <B>LINEDEVSTATUSFLAGS</B> constants have the following values.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDevStatusFlags_connected</B></P></TD><TD VALIGN="TOP">Specifies whether the line is connected to the API. If TRUE, the line is connected, and API is able to operate on the line device. If FALSE, the line is disconnected, and the application is unable to control the line device via the API.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDevStatusFlags_msgWait</B></P></TD><TD VALIGN="TOP">This field indicates whether or not the line has a message waiting. If TRUE, a message is waiting; if FALSE, no message is waiting.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDevStatusFlags_inService</B></P></TD><TD VALIGN="TOP">This field indicates whether or not the line is in service. If TRUE, the line is in service; if FALSE, the line is out of service.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDevStatusFlags_locked</B></P></TD><TD VALIGN="TOP">This field indicates whether or not the line is locked or unlocked. The locked state is useful with cellular telephones.</P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP">The high order 16 bits can be assigned for device specific extensions. The low order 16 bits are reserved.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP"><B>LINEDEVSTATUSFLAGS</B> is provided as a field of the <B>LINECALLSTATUS </B>data structure.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B>Data Types:</P></TD><TD VALIGN="TOP"><B>LINECALLSTATUS</B></P></TD></TR></TBODY></TABLE>
<BR></P><P>LINEDIALPARAMS</P>
<P>The <B>LINEDIALPARAMS</B> structure describes a collection of dialing-related parameters. </P>
<P>typedef struct linedialparams_tag {<BR>DWORDdwDialPause;<BR>DWORDdwDialSpeed;<BR>DWORDdwDigitDuration;<BR>DWORDdwWaitForDialtone;<BR>} LINEDIALPARAMS, FAR *LPLINEDIALPARAMS;</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="108pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Values</P></TD><TD VALIGN="TOP">The <B>LINEDIALPARAMS </B>structure contains the following fields:</P></TD></TR><TR><TD VALIGN="TOP"><B>dwDialPause</B></P></TD><TD VALIGN="TOP">Specifies the duration in milliseconds of a comma in the dialable address.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwDialSpeed</B></P></TD><TD VALIGN="TOP">Specifies the inter-digit time period in milliseconds between successive digits.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwDigitDuration</B></P></TD><TD VALIGN="TOP">Specifies the duration in milliseconds of a digit.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwWaitForDialtone</B></P></TD><TD VALIGN="TOP">Specifies the maximum amount of time that should be waited for dialtone when a 'W' is used in the dialable address.</P></TD></TR><TR><TD VALIGN="TOP">Extensibility</P></TD><TD VALIGN="TOP">None.</P></TD></TR><TR><TD VALIGN="TOP">Comments</P></TD><TD VALIGN="TOP">The LINEDIALPARAMS structure is used to set dialing related parameters on calls. lineMakeCall allows an application to adjust the dialing parameters to be used for the call. lineSetCallParams can be used to adjust the dialing parameters of an existing call. The LINECALLINFO structure lists the call's current dialing parameters. </P></TD></TR><TR><TD VALIGN="TOP">See AlsoFunctions:</P></TD><TD VALIGN="TOP">lineMakeCall, lineSetCallParams, lineGetCallInfo</P></TD></TR><TR><TD VALIGN="TOP">Data Types:</P></TD><TD VALIGN="TOP">LINECALLPARAMS, LINECALLINFO</P></TD></TR></TBODY></TABLE>
<BR></P><P>LINEDIALTONEMODE</P>
<P>The <B>LINEDIALTONEMODE</B> bit flag constants describe different types of dialtones. A special dialtone typically carries a special meaning (e.g., message waiting). </P>
<P>LINEDIALTONEMODE_NORMAL0x00000001<BR>LINEDIALTONEMODE_SPECIAL0x00000002<BR>LINEDIALTONEMODE_INTERNAL0x00000004<BR>LINEDIALTONEMODE_EXTERNAL0x00000008<BR>LINEDIALTONEMODE_UNKNOWN0x00000010<BR>LINEDIALTONEMODE_UNAVAIL0x00000020</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="145pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Values</P></TD><TD VALIGN="TOP">The <B>LINEDIALTONEMODE</B> constants have the following values.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDialtoneMode_normal</B></P></TD><TD VALIGN="TOP">This is a "normal" dialtone which typically is a continuous tone.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDialtoneMode_special</B></P></TD><TD VALIGN="TOP">This is a special dialtone indicating a certain condition (known by the switch or network) is currently in effect. Special dialtones typically use an interrupted tone. As with a normal dial tone, this indicates that the switch is ready to receive the number to be dialed.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDialtoneMode_internal</B></P></TD><TD VALIGN="TOP">This an internal (e.g., PBX) dialtone.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDialtoneMode_external</B></P></TD><TD VALIGN="TOP">This is an external (e.g., public network) dialtone.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDialtoneMode_unknown</B></P></TD><TD VALIGN="TOP">The dialtone mode is currently known, but may become known later.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDialtoneMode_unavail</B></P></TD><TD VALIGN="TOP">The dialtone mode is unavailable and will not become known.</P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP">The high order 16 bits can be assigned for device specific extensions. The low order 16 bits are reserved.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP"><B>LINEDIALTONEMODE</B> is provided as part of the <B>LINECALLSTATUS </B>for a call in the <I>dialtone</I> state.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B>Data Types:</P></TD><TD VALIGN="TOP">  <B>LINECALLSTATUS</B></P></TD></TR></TBODY></TABLE>
<BR></P><P>LINEDIGITMODE</P>
<P>The <B>LINEDIGITMODE</B> constants describe different types of inband digit generation.</P>
<P>LINEDIGITMODE_PULSE0x00000001<BR>LINEDIGITMODE_DTMF0x00000002<BR>LINEDIGITMODE_DTMFEND0x00000004</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="134pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Values</P></TD><TD VALIGN="TOP">The <B>LINEDIGITMODE</B> constants have the following values.</P></TD></TR><TR><TD VALIGN="TOP">LineDigitMode_pulse</P></TD><TD VALIGN="TOP">Uses rotary pulse sequences to signal digits. Valid digits are '0' through '9'.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDigitMode_DTMF</B></P></TD><TD VALIGN="TOP">Uses DTMF tones to signal digits. Valid digits are '0' through '9', '*', '#', 'A', 'B', 'C', and 'D'.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDigitMode_DTMFEND</B></P></TD><TD VALIGN="TOP">Uses DTMF tones to signal digits, and detect the down edges. Valid digits are '0' through '9', '*', '#', 'A', 'B', 'C', and 'D'.</P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP">The high order 16 bits can be assigned for device specific extensions. The low order 16 bits are reserved.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">A digit mode can be specified when generating or detecting digits. Note that pulse digits are generated by making and breaking the local loop circuit. These pulses are absorbed by the switch. The remote end merely observes this as a series of inband audio clicks. Detecting digits sent as pulses must therefore be able to detect these sequences of 1 to 10 audible clicks.</P></TD></TR><TR><TD VALIGN="TOP"><B>See AlsoFunctions:</B></P></TD><TD VALIGN="TOP"> <B>lineGenerateDigits, lineMonitorDigits, lineGatherDigits, lineSetMediaControl</B></P></TD></TR><TR><TD VALIGN="TOP">Data Types:</P></TD><TD VALIGN="TOP"> <B>LINEMEDIACONTROLDIGITS</B></P></TD></TR></TBODY></TABLE>
<BR></P><P>LINEDISCONNECTMODE</P>
<P>The <B>LINEDISCONNECTMODE</B> bit flag constants describe different reasons for a remote disconnect request. A disconnect mode is available as call status to the application after the call state transitions to <I>disconnected</I>.</P>
<P>LINEDISCONNECTMODE_NORMAL0x00000001<BR>LINEDISCONNECTMODE_UNKNOWN0x00000002<BR>LINEDISCONNECTMODE_REJECT 0x00000004<BR>LINEDISCONNECTMODE_PICKUP0x00000008<BR>LINEDISCONNECTMODE_FORWARDED0x00000010<BR>LINEDISCONNECTMODE_BUSY0x00000020<BR>LINEDISCONNECTMODE_NOANSWER0x00000040<BR>LINEDISCONNECTMODE_BADADDRESS0x00000080<BR>LINEDISCONNECTMODE_UNREACHEABLE0x00000100<BR>LINEDISCONNECTMODE_CONGESTION0x00000200<BR>LINEDISCONNECTMODE_INCOMPATIBLE0x00000400<BR>LINEDISCONNECTMODE_UNAVAIL0x00000800</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="182pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Values</P></TD><TD VALIGN="TOP">The <B>LINEDISCONNECTMODE</B> constants have the following values.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDisconnectMode_normal</B></P></TD><TD VALIGN="TOP">This is a "normal" disconnect request by the remote party, the call was terminated normally.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDisconnectMode_unknown</B></P></TD><TD VALIGN="TOP">The reason for the disconnect request is unknown, but may become known later.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDisconnectMode_reject </B></P></TD><TD VALIGN="TOP">The remote user has rejected the call.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDisconnectMode_pickup </B></P></TD><TD VALIGN="TOP">The call was picked up from elsewhere.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDisconnectMode_forwarded</B></P></TD><TD VALIGN="TOP">The call was forwarded by the switch.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDisconnectMode_busy</B></P></TD><TD VALIGN="TOP">The remote user's station is busy.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDisconnectMode_noAnswer</B></P></TD><TD VALIGN="TOP">The remote user's station does not answer.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDisconnectMode_badAddress</B></P></TD><TD VALIGN="TOP">The destination address in invalid.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDisconnectMode_unreacheable</B></P></TD><TD VALIGN="TOP">The remote user could not be reached.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDisconnectMode_congestion</B></P></TD><TD VALIGN="TOP">The network is congested.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDisconnectMode_incompatible</B></P></TD><TD VALIGN="TOP">The remote user's station equipment is incompatible for the type of call requested.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineDisconnectMode_unavail</B></P></TD><TD VALIGN="TOP">The reason for the disconnect is unavailable and will not become known later.</P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP">The high order 8 bits can be assigned for device specific extensions. The low order 24 bits are reserved.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">A remote disconnect request for a given call results in the call state transitioning to the <I>disconnected</I> state and a <B>LINE_CALLSTATE</B> messages is sent to the application. The <B>LINEDISCONNECTMODE</B> information provides details about the remote disconnect request. It is available in the call's <B>LINECALLSTATUS</B> structure when the call is in the <I>disconnected</I> state. While a call is in this state, the application is still allowed to query the calls information and status. For example, user-to-user information received as part of the remote disconnect is available then. The app can clear a <I>disconnected</I> call by dropping the call.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B>Data Types:</P></TD><TD VALIGN="TOP"><B>LINECALLSTATUS</B></P></TD></TR></TBODY></TABLE>
<BR></P><P>LINEERR</P>
<P>This is the list of error codes that the implementation may return when invoking operations on lines, addresses, or calls. Consult the individual function descriptions to determine which of these error codes each function may return.</P>
<P>LINEERR_ALLOCATED0x80000001<BR>LINEERR_ADDRESSBLOCKED0x80000002<BR>LINEERR_BADDEVICEID0x80000003<BR>LINEERR_BEARERMODEUNAVAIL 0x80000004<BR>LINEERR_BILLINGREJECTED0x80000005<BR>LINEERR_CALLUNAVAIL0x80000006<BR>LINEERR_COMLETIONOVERRUN 0x80000007<BR>LINEERR_CONFERENCEFULL0x80000008<BR>LINEERR_INCOMPATIBLEVERSION0x80000009<BR>LINEERR_INUSE0x8000000A<BR>LINEERR_INVALADDRESS0x8000000B<BR>LINEERR_INVALADDRESSID0x8000000C<BR>LINEERR_INVALADDRESSMODE0x8000000D<BR>LINEERR_INVALAPPHANDLE0x8000000E<BR>LINEERR_INVALBEARERMODE 0x8000000F<BR>LINEERR_INVALCALLCOMPLMODE0x80000010<BR>LINEERR_INVALCALLHANDLE0x80000011<BR>LINEERR_INVALCALLPARAMS0x80000012<BR>LINEERR_INVALCALLPRIVILEGE0x80000013<BR>LINEERR_INVALCALLSELECT0x80000014<BR>LINEERR_INVALCALLSTATE0x80000015<BR>LINEERR_INVALCALLSTATELIST0x80000016<BR>LINEERR_INVALCOMPLETIONID0x80000017<BR>LINEERR_INVALCONFCALLHANDLE0x80000018<BR>LINEERR_INVALCONSULTCALLHANDLE0x80000019<BR>LINEERR_INVALDEVICEHANDLE0x8000001A<BR>LINEERR_INVALDIGITLIST0x8000001B<BR>LINEERR_INVALDIGITMODE0x8000001C<BR>LINEERR_INVALDIGITS0x8000001D<BR>LINEERR_INVALEXTVERSION 0x8000001E<BR>LINEERR_INVALGROUPID0x8000001F<BR>LINEERR_INVALMEDIALIST0x80000020<BR>LINEERR_INVALMEDIAMODE0x80000021<BR>LINEERR_INVALMODULENAME 0x80000022<BR>LINEERR_INVALPARAM0x80000023<BR>LINEERR_INVALPARKID0x80000024<BR>LINEERR_INVALPARKMODE0x80000025<BR>LINEERR_INVALPOINTER0x80000026<BR>LINEERR_INVALPRIVSELECT0x80000027<BR>LINEERR_INVALRATE 0x80000028<BR>LINEERR_INVALREQUESTMODE0x80000029<BR>LINEERR_INVALLINEHANDLE0x8000002A<BR>LINEERR_INVALLINESTATE0x8000002B<BR>LINEERR_INVALTERMINALID0x8000002C<BR>LINEERR_INVALTERMINALMODE0x8000002D<BR>LINEERR_INVALTONE0x8000002E<BR>LINEERR_INVALTONELIST0x8000002F<BR>LINEERR_INVALTONEMODE0x80000030<BR>LINEERR_INVALTRANSFERMODE0x80000031<BR>LINEERR_NODEVICE0x80000032<BR>LINEERR_NODRIVER0x80000033<BR>LINEERR_NOMEM0x80000034<BR>LINEERR_NOREQUEST0x80000035<BR>LINEERR_NOTREGISTERED0x80000036<BR>LINEERR_OPERATIONFAILED0x80000037<BR>LINEERR_OPERATIONUNAVAIL0x80000038<BR>LINEERR_RATEUNAVAIL 0x80000039<BR>LINEERR_RESOURCEUNAVAIL0x8000003A<BR>LINEERR_REQUESTOVERRUN0x8000003B<BR>LINEERR_TARGETNOTFOUND0x8000003C</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="85pt" VALIGN="TOP"><COL WIDTH="321pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP">Values 0xC0000000 through 0xFFFFFFFF are available for device specific extensions. Values 0x80000000 through 0xBFFFFFFF are reserved, while values 0x00000000 through 0x7FFFFFFF are used as Request IDs.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">If an application gets an error return that it does not specifically handle (e.g., and error defined by a device specific extension), then it should treat the error as a LINEERR_OPERATIONFAILED (for unspecified reason).</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Messages:  <B>LINE_REPLY</B></P></TD></TR></TBODY></TABLE>
<BR></P><P>LINEFEATURE</P>
<P>The <B>LINEFEATURE</B> constants list the operations that can be invoked on a line using this API.</P>
<P>LINEFEATURE_DEVSPECIFIC0x00000001<BR>LINEFEATURE_DEVSPECIFICFEAT0x00000002<BR>LINEFEATURE_FORWARD0x00000004<BR>LINEFEATURE_MAKECALL0x00000008<BR>LINEFEATURE_SETMEDIACONTROL0x00000010<BR>LINEFEATURE_SETTERMINAL0x00000020</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="157pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Values</P></TD><TD VALIGN="TOP">Each of the <B>LINEFEATURE</B> values correspond to the API operation with the same name. Values are:</P></TD></TR><TR><TD VALIGN="TOP"><B>LineFeature_devSpecific</B></P></TD><TD VALIGN="TOP">Device specific operations can be used on the line.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineFeature_devSpecificFeat</B></P></TD><TD VALIGN="TOP">Device specific features can be used on the line.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineFeature_forward</B></P></TD><TD VALIGN="TOP">Forwarding of all addresses can be used on the line.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineFeature_makeCall</B></P></TD><TD VALIGN="TOP">An outbound call can be placed on this line using an unspecified address.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineFeature_setMediaControl</B></P></TD><TD VALIGN="TOP">Media control can be set on this line.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineFeature_setTerminal</B></P></TD><TD VALIGN="TOP">Terminal modes for this line can be set.</P></TD></TR><TR><TD VALIGN="TOP">Extensibility</P></TD><TD VALIGN="TOP">None.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">This data type is used both in <B>LINEDEVCAPS</B> (returned by <B>lineGetDevCaps</B>) and in <B>LINEDEVSTATUS</B> (returned by <B>lineGetLineDevStatus</B>). <B>LINEDEVCAPS</B> reports the availability of the line features by the service provider (mainly the switch) for a given line. An application would make this determination when it initializes. <B>LINEDEVSTATUS</B> reports for a given line which line features can actually be invoked while the line is in the current state. An application would make this determination dynamically, after line state changes, typically caused by address or call-related activities on the line.</P></TD></TR><TR><TD VALIGN="TOP">See AlsoFunctions:</P></TD><TD VALIGN="TOP">  lineGetLineDevStatus, lineGetDevCaps</P></TD></TR><TR><TD VALIGN="TOP">Data Types:</P></TD><TD VALIGN="TOP">  LINEDEVSTATUS, LINEDEVCAPS</P></TD></TR></TBODY></TABLE>
<BR></P><P>LINEFORWARD</P>
<P>The <B>LINEFORWARD</B> structure describes an entry of the forwarding instructions.</P>
<P>typedef struct lineforward_tag {<BR>DWORDdwForwardMode;<BR><BR>DWORDdwCallerAddressSize;<BR>DWORDdwCallerAddressOffset;<BR><BR>DWORDdwDestCountryCode;<BR>DWORDdwDestAddressSize;<BR>DWORDdwDestAddressOffset;<BR>} LINEFORWARD, FAR *LPLINEFORWARD;</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="193pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Values</P></TD><TD VALIGN="TOP">The <B>LINEFORWARD</B> structure contains the following fields:</P></TD></TR><TR><TD VALIGN="TOP"><B>dwForwardMode</B></P></TD><TD VALIGN="TOP">Specifies the types of forwarding, of type <B>LINEFORWARDMODE</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINEFORWARDMODE_UNCOND</P></TD><TD VALIGN="TOP">Forward all calls unconditionally irrespective of their origin. Use this value when unconditional forwarding for internal and external calls cannot be controlled separately. Unconditional forwarding overrides forwarding on busy and/or no answer conditions.  </P></TD></TR><TR><TD VALIGN="TOP">LINEFORWARDMODE_UNCONDINTERNAL</P></TD><TD VALIGN="TOP">Forward all internal calls unconditionally. Use this value when unconditional forwarding for internal and external calls can be controlled separately.</P></TD></TR><TR><TD VALIGN="TOP">LINEFORWARDMODE_UNCONDEXTERNAL</P></TD><TD VALIGN="TOP">Forward all external calls unconditionally. Use this value when unconditional forwarding for internal and external calls can be controlled separately.</P></TD></TR><TR><TD VALIGN="TOP">LINEFORWARDMODE_UNCONDSPECIFIC</P></TD><TD VALIGN="TOP">Forward all calls that originated at a specified address unconditionally (selective call forwarding).</P></TD></TR><TR><TD VALIGN="TOP">LINEFORWARDMODE_BUSY</P></TD><TD VALIGN="TOP">Forward all calls on busy irrespective of their origin. Use this value when forwarding for internal and external calls on busy and no answer cannot be controlled separately.</P></TD></TR><TR><TD VALIGN="TOP">LINEFORWARDMODE_BUSYINTERNAL</P></TD><TD VALIGN="TOP">Forward all internal calls on busy. Use this value when forwarding for internal and external calls on busy and no answer can be controlled separately.</P></TD></TR><TR><TD VALIGN="TOP">LINEFORWARDMODE_BUSYEXTERNAL</P></TD><TD VALIGN="TOP">Forward all external calls on busy. Use this value when forwarding for internal and external calls on busy and no answer can be controlled separately.</P></TD></TR><TR><TD VALIGN="TOP">LINEFORWARDMODE_BUSYSPECIFIC</P></TD><TD VALIGN="TOP">Forward all calls that originated at a specified address on busy (selective call forwarding).</P></TD></TR><TR><TD VALIGN="TOP">LINEFORWARDMODE_NOASNW</P></TD><TD VALIGN="TOP">Forward all calls on no answer irrespective of their origin. Use this value when call forwarding for internal and external calls on no answer cannot be controlled separately.</P></TD></TR><TR><TD VALIGN="TOP">LINEFORWARDMODE_NOANSWINTERNAL</P></TD><TD VALIGN="TOP">Forward all internal calls on no answer. Use this value when forwarding for internal and external calls on no answer can be controlled separately.</P></TD></TR><TR><TD VALIGN="TOP">LINEFORWARDMODE_NOANSWEXTERNAL</P></TD><TD VALIGN="TOP">Forward all external calls on no answer. Use this value when forwarding for internal and external calls on no answer can be controlled separately.</P></TD></TR><TR><TD VALIGN="TOP">LINEFORWARDMODE_NOANSWSPECIFIC</P></TD><TD VALIGN="TOP">Forward all calls that originated at a specified address on no answer (selective call forwarding).</P></TD></TR><TR><TD VALIGN="TOP">LINEFORWARDMODE_BUSYNA</P></TD><TD VALIGN="TOP">Forward all calls on busy/no answer irrespective of their origin. Use this value when forwarding for internal and external calls on busy and no answer cannot be controlled separately.</P></TD></TR><TR><TD VALIGN="TOP">LINEFORWARDMODE_BUSYNAINTERNAL</P></TD><TD VALIGN="TOP">Forward all internal calls on busy/no answer. Use this value when call forwarding on busy and no answer cannot be controlled separately for internal calls.</P></TD></TR><TR><TD VALIGN="TOP">LINEFORWARDMODE_BUSYNAEXTERNAL</P></TD><TD VALIGN="TOP">Forward all external calls on busy/no answer. Use this value when call forwarding on busy and no answer cannot be controlled separately for internal calls.</P></TD></TR><TR><TD VALIGN="TOP">LINEFORWARDMODE_BUSYNASPECIFIC</P></TD><TD VALIGN="TOP">Forward all calls that originated at a specified address on busy/no answer (selective call forwarding).</P></TD></TR><TR><TD VALIGN="TOP"><B>DwCallerAddressSize<BR>dwCallerAddressOffset</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset from the beginning of the containing data structure in bytes of the variable sized address field containing the address of a caller to be forwarded. </P></TD></TR><TR><TD VALIGN="TOP"><B>DwDestCountryCode</B></P></TD><TD VALIGN="TOP">Specifies the country code of the destination address where the call is to be forwarded to.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwDestAddressSize<BR>dwDestAddressOffset</B></P></TD><TD VALIGN="TOP">The size in bytes and the offset from the beginning of the containing data structure in bytes of the variable sized address field containing the address of the address where calls are to be forwarded to. </P></TD></TR><TR><TD VALIGN="TOP">Extensibility</P></TD><TD VALIGN="TOP">None.</P></TD></TR><TR><TD VALIGN="TOP">Comments</P></TD><TD VALIGN="TOP">Each entry in the LINEFORWARD structure specifies a forwarding request.</P></TD></TR><TR><TD VALIGN="TOP">See AlsoFunctions:</P></TD><TD VALIGN="TOP">lineForward, lineGetAddressState</P></TD></TR><TR><TD VALIGN="TOP">Messages: </P></TD><TD VALIGN="TOP"> LINE_ADDRESSSTATE</P></TD></TR><TR><TD VALIGN="TOP">Data Types:</P></TD><TD VALIGN="TOP">LINEFORWARDMODE, LINECALLORIGIN, LINEFORWARDLIST</P></TD></TR></TBODY></TABLE>
<BR></P><P>LINEFORWARDLIST</P>
<P>The <B>LINEFORWARDLIST</B> structure describes a list of forwarding instructions. </P>
<P>typedef struct lineforwardlist_tag {<BR>DWORDdwTotalSize;<BR><BR>DWORDdwNumEntries;<BR>LINEFORWARDLineForward[1];<BR>} LINEFORWARDLIST, FAR *LPLINEFORWARDLIST;</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="101pt" VALIGN="TOP"><COL WIDTH="316pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Values</P></TD><TD VALIGN="TOP">The <B>LINEFORWARDLIST </B>structure contains the following fields:</P></TD></TR><TR><TD VALIGN="TOP"><B>dwTotalSize</B></P></TD><TD VALIGN="TOP">Specifies the total size in bytes of the data structure.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwNumEntries</B></P></TD><TD VALIGN="TOP">Specifies number of entries in the array specified as <B>ForwardList</B>[].</P></TD></TR><TR><TD VALIGN="TOP"><B>ForwardList[]</B></P></TD><TD VALIGN="TOP">Specifies an array of forwarding instruction. The array's entries are of type <B>LINEFORWARD</B>.</P></TD></TR><TR><TD VALIGN="TOP">Extensibility</P></TD><TD VALIGN="TOP">None.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">The <B>LINEFORWARDLIST</B> structure defines the forwarding parameters requested for forwarding calls on an address or all addresses on a line.</P></TD></TR><TR><TD VALIGN="TOP">See AlsoFunctions:</P></TD><TD VALIGN="TOP">lineForward, lineGetAddressStatus</P></TD></TR><TR><TD VALIGN="TOP">Messages:  </P></TD><TD VALIGN="TOP">LINE_ADDRESSSTATE</P></TD></TR><TR><TD VALIGN="TOP">Data Types:</P></TD><TD VALIGN="TOP"> <B>LINEFORWARD</B></P></TD></TR></TBODY></TABLE>
<BR></P><P>LINEFORWARDMODE</P>
<P>The <B>LINEFORWARDMODE</B> bit flag constants describe the conditions under which calls to an address can be forwarded.</P>
<P>LINEFORWARDMODE_UNCOND0x00000001<BR>LINEFORWARDMODE_UNCONDINTERNAL0x00000002<BR>LINEFORWARDMODE_UNCONDEXTERNAL0x00000004<BR>LINEFORWARDMODE_UNCONDSPECIFIC0x00000008<BR>LINEFORWARDMODE_BUSY0x00000010<BR>LINEFORWARDMODE_BUSYINTERNAL0x00000020<BR>LINEFORWARDMODE_BUSYEXTERNAL0x00000040<BR>LINEFORWARDMODE_BUSYSPECIFIC0x00000080<BR>LINEFORWARDMODE_NOANSW0x00000100<BR>LINEFORWARDMODE_NOANSWINTERNAL0x00000200<BR>LINEFORWARDMODE_NOANSWEXTERNAL0x00000400<BR>LINEFORWARDMODE_NOANSWSPECIFIC0x00000800<BR>LINEFORWARDMODE_BUSYNA0x00001000<BR>LINEFORWARDMODE_BUSYNAINTERNAL0x00002000<BR>LINEFORWARDMODE_BUSYNAEXTERNAL0x00004000<BR>LINEFORWARDMODE_BUSYNASPECIFIC0x00008000</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="171pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Values</P></TD><TD VALIGN="TOP">The <B>LINEFORWARDMODE</B> constants have the following values.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineForwardMode_uncond</B></P></TD><TD VALIGN="TOP">Forward all calls unconditionally irrespective of their origin. Use this value when unconditional forwarding for internal and external calls cannot be controlled separately. Unconditional forwarding overrides forwarding on busy and/or no answer conditions.  </P></TD></TR><TR><TD VALIGN="TOP"><B>LineForwardMode_uncondInternal</B></P></TD><TD VALIGN="TOP">Forward all internal calls unconditionally. Use this value when unconditional forwarding for internal and external calls can be controlled separately.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineForwardMode_uncondExternal</B></P></TD><TD VALIGN="TOP">Forward all external calls unconditionally. Use this value when unconditional forwarding for internal and external calls can be controlled separately.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineForwardMode_uncondSpecific</B></P></TD><TD VALIGN="TOP">Forward all calls that originated at a specified address unconditionally (selective call forwarding).</P></TD></TR><TR><TD VALIGN="TOP"><B>LineForwardMode_busy</B></P></TD><TD VALIGN="TOP">Forward all calls on busy irrespective of their origin. Use this value when forwarding for internal and external calls on busy and no answer cannot be controlled separately.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineForwardMode_busyInternal</B></P></TD><TD VALIGN="TOP">Forward all internal calls on busy. Use this value when forwarding for internal and external calls on busy and no answer can be controlled separately.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineForwardMode_busyExternal</B></P></TD><TD VALIGN="TOP">Forward all external calls on busy. Use this value when forwarding for internal and external calls on busy and no answer can be controlled separately.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineForwardMode_busySpecific</B></P></TD><TD VALIGN="TOP">Forward all calls that originated at a specified address on busy (selective call forwarding).</P></TD></TR><TR><TD VALIGN="TOP"><B>LineForwardMode_noAnsw</B></P></TD><TD VALIGN="TOP">Forward all calls on no answer irrespective of their origin. Use this value when call forwarding for internal and external calls on no answer cannot be controlled separately.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineForwardMode_noAnswInternal</B></P></TD><TD VALIGN="TOP">Forward all internal calls on no answer. Use this value when forwarding for internal and external calls on no answer can be controlled separately.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineForwardMode_noAnswExternal</B></P></TD><TD VALIGN="TOP">Forward all external calls on no answer. Use this value when forwarding for internal and external calls on no answer can be controlled separately.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineForwardMode_noAnswSpecific</B></P></TD><TD VALIGN="TOP">Forward all calls that originated at a specified address on no answer (selective call forwarding).</P></TD></TR><TR><TD VALIGN="TOP"><B>LineForwardMode_busyNA</B></P></TD><TD VALIGN="TOP">Forward all calls on busy/no answer irrespective of their origin. Use this value when forwarding for internal and external calls on busy and no answer cannot be controlled separately.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineForwardMode_busyNAInternal</B></P></TD><TD VALIGN="TOP">Forward all internal calls on busy/no answer. Use this value when call forwarding on busy and no answer cannot be controlled separately for internal calls.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineForwardMode_busyNAExternal</B></P></TD><TD VALIGN="TOP">Forward all external calls on busy/no answer. Use this value when call forwarding on busy and no answer cannot be controlled separately for internal calls.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineForwardMode_busyNASpecific</B></P></TD><TD VALIGN="TOP">Forward all calls that originated at a specified address on busy/no answer (selective call forwarding).</P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP">The high order 8 bits can be assigned for device specific extensions. The low order 24 bits are reserved.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">The bit flags defined by <B>LINEFORWARDMODE</B> are not orthogonal. Unconditional forwarding ignores any specific condition such as busy or no answer. If unconditional forwarding is not in effect, then forwarding on busy and no answer can either be controlled separately or not. If controlled separately, then the BUSY and NOANSW flags can be used separately. If not controlled separately, then the flag BUSYNA must be used. Similarly, if forwarding of internal and external calls can be controlled separately, then INTERNAL and EXTERNAL flags can be used separately, otherwise the combination is used.</P></TD></TR><TR><TD VALIGN="TOP">Address capabilities indicate for each address assigned to a line which forwarding mode(s) are available. An application can use <B>lineForward</B> to set forwarding conditions at the switch.</P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>See AlsoFunctions:</B></P></TD><TD VALIGN="TOP"><B>lineForward, lineGetAddressCaps</B></P></TD></TR><TR><TD VALIGN="TOP">Messages:  <B>LINE_ADDRESSSTATE</B></P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP">Data Types:</P></TD><TD VALIGN="TOP"><B>LINEADDRESSCAPS, LINEADDRESSSTATUS, </B></P></TD></TR><TR><TD VALIGN="TOP"><B>LINEFORWARD</B></P></TD><TD VALIGN="TOP"></P></TD></TR></TBODY></TABLE>
<BR></P><P>LINEGATHERTERM</P>
<P>The <B>LINEGATHERTERM</B> bit flag constants describe the conditions under which buffered digit gathering is terminated.</P>
<P>LINEGATHERTERM_BUFFERFULL0x00000001<BR>LINEGATHERTERM_TERMDIGIT0x00000002<BR>LINEGATHERTERM_FIRSTTIMEOUT0x00000004<BR>LINEGATHERTERM_INTERTIMEOUT0x00000008<BR>LINEGATHERTERM_CANCEL0x00000010</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="152pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Values</P></TD><TD VALIGN="TOP">The <B>LINEGATHERTERM</B> constants have the following values.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineGatherTerm_bufferFull</B></P></TD><TD VALIGN="TOP">The requested number of digits has been gathered. The buffer is full.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineGatherTerm_termDigit</B></P></TD><TD VALIGN="TOP">One of the termination digits matched a received digit. The matched termination digit is the last digit in the buffer.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineGatherTerm_firstTimeout</B></P></TD><TD VALIGN="TOP">The first digit timeout expired. The buffer contains no digits.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineGatherTerm_interTimeout</B></P></TD><TD VALIGN="TOP">The inter digit timeout expired. The buffer contains at least one digit.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineGatherTerm_cancel</B></P></TD><TD VALIGN="TOP">The request was canceled by this application, by another application, or because the call terminated.</P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP">The high order 16 bits can be assigned for device specific extensions. The low order 16 bits are reserved.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">None.</P></TD></TR><TR><TD VALIGN="TOP"><B>See AlsoFunctions:</B></P></TD><TD VALIGN="TOP">  <B>lineGatherDigits</B></P></TD></TR><TR><TD VALIGN="TOP">Messages:</P></TD><TD VALIGN="TOP"><B>LINE_GATHERDIGITS</B></P></TD></TR></TBODY></TABLE>
<BR></P><P>LINEGENERATETERM</P>
<P>The <B>LINEGENERATETERM</B> bit flag constants describe the conditions under which digit or tone generation is terminated.</P>
<P>LINEGENERATETERM_DONE0x00000001<BR>LINEGENERATETERM_CANCEL0x00000002</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="136pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Values</P></TD><TD VALIGN="TOP">The <B>LINEGENERATETERM</B> constants have the following values.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineGenerateTerm_done</B></P></TD><TD VALIGN="TOP">The requested number of digits have been generated, or requested tones have been generated for the requested duration.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineGenerateTerm_cancel</B></P></TD><TD VALIGN="TOP">The digit or tone generation request was canceled by this application, by another application, or because the call terminated.</P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP">The high order 16 bits can be assigned for device specific extensions. The low order 16 bits are reserved.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">None.</P></TD></TR><TR><TD VALIGN="TOP"><B>See AlsoFunctions:</B></P></TD><TD VALIGN="TOP">  <B>lineGenerateDigits, lineGenerateTone</B></P></TD></TR><TR><TD VALIGN="TOP">Messages:</P></TD><TD VALIGN="TOP"><B>LINE_GENERATE</B></P></TD></TR></TBODY></TABLE>
<BR></P><P>LINEGENERATETONE</P>
<P>The <B>LINEGENERATETONE</B> structure contains information about a tone to be generated.</P>
<P>typedef struct linegeneratetone_tag {<BR>DWORDdwFrequency;<BR>DWORDdwCadenceOn;<BR>DWORDdwCadenceOff;<BR>DWORDdwVolume;<BR>} LINEGENERATETONE, FAR *LPLINEGENERATETONE;</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="108pt" VALIGN="TOP"><COL WIDTH="307pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Fields:</P></TD><TD VALIGN="TOP">The <B>LINEGENERATETONE</B> structure contains the following fields:</P></TD></TR><TR><TD VALIGN="TOP"><B>dwFrequency</B></P></TD><TD VALIGN="TOP">Specifies the frequency in Hertz of this tone component. A service provider may adjust (round up or down) the frequency specified by the application to fit its resolution.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwCadenceOn</B></P></TD><TD VALIGN="TOP">Determines the "on" duration in milliseconds of the cadence of the custom tone to be generated. Zero means no tone is generated.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwCadenceOff</B></P></TD><TD VALIGN="TOP">Determines the "off" duration in milliseconds of the cadence of the custom tone to be generated. Zero means no off time - a constant tone.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwVolume</B></P></TD><TD VALIGN="TOP">Determines the volume level at which the tone is to be generated. A value of 0x0000FFFF represents full volume, and a value of 0x00000000 is silence.</P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP">None.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">This structure is only used for the generation of tones, it is not used for tone monitoring.</P></TD></TR><TR><TD VALIGN="TOP"><B>See AlsoFunctions:</B></P></TD><TD VALIGN="TOP">  <B>lineGenerateTones</B></P></TD></TR></TBODY></TABLE>
<BR></P><P>LINEMEDIACONTROLCALLSTATE</P>
<P>The <B>LINEMEDIACONTROLCALLSTATE</B> structure describes a media action to be executed when detecting transitions into one or more call states.  </P>
<P>typedef struct linemediacontrolcallstate_tag {<BR>DWORDdwCallStates;<BR>DWORDdwMediaControl;<BR>} LINEMEDIACONTROLCALLSTATE, <BR>FAR *LPLINEMEDIACONTROLCALLSTATE;</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="174pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Values</P></TD><TD VALIGN="TOP">The <B>LINEMEDIACONTROLCALLSTATE</B> structure contains the following fields:</P></TD></TR><TR><TD VALIGN="TOP"><B>dwCallStates</B></P></TD><TD VALIGN="TOP">Specifies one or more call states, of type <B>LINECALLSTATE</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_IDLE</P></TD><TD VALIGN="TOP">The call is idle - no call actually exists.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_OFFERING</P></TD><TD VALIGN="TOP">The call is being offered to the station, signaling the arrival of a  new call. In some environments, a call in the offering state does not automatically alert the user; alerting is done by the switch instructing the line to ring, it does not affect any call states.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_ACCEPTED</P></TD><TD VALIGN="TOP">The call was offering and has been accepted. This indicates to other (monitoring) applications that the current owner application has claimed responsibility for answering the call. In ISDN, this also initiates alerting to both parties.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_DIALTONE</P></TD><TD VALIGN="TOP">The call is receiving a dial tone from the switch, which means that the switch is ready to receive a dialed number.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_DIALING</P></TD><TD VALIGN="TOP">Destination address information (a phone number) is being sent to the switch via the call.  Note that the operation <B>lineGenerateDigits</B> does not place the line into the <I>dialing</I> state.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_RINGBACK</P></TD><TD VALIGN="TOP">The call is receiving ringback from the called address. Ringback indicates that the other station has been reached and is being alerted.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_BUSY</P></TD><TD VALIGN="TOP">The call is receiving a busy tone. Busy tone indicates that the call cannot be completed - either a circuit (trunk) or the remote party's station are in use.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_SPECIALINFO</P></TD><TD VALIGN="TOP">Special information is sent by the network. Special information is typically sent when the destination cannot be reached. </P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_CONNECTED</P></TD><TD VALIGN="TOP">The call has been established, the connection is made. Information is able to flow over the call between the originating address and the destination address.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_PROCEEDING</P></TD><TD VALIGN="TOP">Dialing has completed and the call is proceeding through the switch or telephone network.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_ONHOLD</P></TD><TD VALIGN="TOP">The call is on hold by the switch.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_CONFERENCED</P></TD><TD VALIGN="TOP">The call is currently a member of a multi-party conference call.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_ONHOLDPENDCONF</P></TD><TD VALIGN="TOP">The call is currently on hold while it is being added to a conference.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_ONHOLDPENDTRANSF</P></TD><TD VALIGN="TOP">The call is currently on hold awaiting transfer to another number.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_DISCONNECTED</P></TD><TD VALIGN="TOP">The remote party has disconnected from the call.</P></TD></TR><TR><TD VALIGN="TOP">LINECALLSTATE_UNKNOWN</P></TD><TD VALIGN="TOP">The state of the call is not known. This may be due to limitations of the call progress detection implementation.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwMediaControl</B></P></TD><TD VALIGN="TOP">Specifies the media control action, of type <B>LINEMEDIACONTROL</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIACONTROL_NONE</P></TD><TD VALIGN="TOP">Noop. No change is to be made to the media stream.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIACONTROL_RESET</P></TD><TD VALIGN="TOP">Reset the media stream. Provide the effect of an end-of-input. All buffers are released.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIACONTROL_PAUSE</P></TD><TD VALIGN="TOP">Temporarily pause the media stream.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIACONTROL_RESUME</P></TD><TD VALIGN="TOP">Start or resume a paused media stream.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIACONTROL_RATEUP</P></TD><TD VALIGN="TOP">The speed of the media stream is increased by some stream-defined quantity.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIACONTROL_RATEDOWN</P></TD><TD VALIGN="TOP">The speed of the media stream is decreased by some stream-defined quantity.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIACONTROL_RATENORMAL</P></TD><TD VALIGN="TOP">The speed of the media stream is returned to normal.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIACONTROL_VOLUMEUP</P></TD><TD VALIGN="TOP">The amplitude of the media stream is increased by some stream-defined quantity.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIACONTROL_VOLUMEDOWN</P></TD><TD VALIGN="TOP">The amplitude of the media stream is decreased by some stream-defined quantity.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIACONTROL_VOLUMENORMAL</P></TD><TD VALIGN="TOP">The amplitude of the media stream is returned to normal.</P></TD></TR><TR><TD VALIGN="TOP">ExtensibilityNone.</P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP">Comments</P></TD><TD VALIGN="TOP">The LINEMEDIACONTROLCALLSTATE structure defines a triple &lt;call state(s), media control action&gt;. An array of these triples is passed to the lineSetMediaControl function to set media control actions triggered by the transition to the call state of the given call. When a transition to a listed call state is detected, then the corresponding action on the media stream is invoked. </P></TD></TR><TR><TD VALIGN="TOP">See AlsoFunctions:</P></TD><TD VALIGN="TOP">lineSetStateMediaControl</P></TD></TR><TR><TD VALIGN="TOP">Messages:  </P></TD><TD VALIGN="TOP">LINE_CALLSTATE</P></TD></TR><TR><TD VALIGN="TOP">Data Types</P></TD><TD VALIGN="TOP">LINECALLSTATE, LINEMEDIACONTROL</P></TD></TR></TBODY></TABLE>
<BR></P><P>LINEMEDIACONTROLDIGIT</P>
<P>The <B>LINEMEDIACONTROLDIGIT</B> structure describes a media action to be executed when detecting a digit. It is used as as entry in an array.</P>
<P>    typedef struct linemediacontroldigit_tag {<BR>    DWORD    dwDigit;<BR>    DWORD    dwDigitModes;<BR>    DWORD    dwMediaControl;<BR>} LINEMEDIACONTROLDIGIT, FAR *LPLINEMEDIACONTROLDIGIT;</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="164pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Values</P></TD><TD VALIGN="TOP">The <B>LINEMEDIACONTROLDIGIT</B> structure contains the following fields:</P></TD></TR><TR><TD VALIGN="TOP"><B>dwDigit</B></P></TD><TD VALIGN="TOP">The low order byte of this DWORD specifies the digit in ASCII whose detection is to trigger a media action. Valid digits depend on the media mode.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwDigitModes</B></P></TD><TD VALIGN="TOP">Specifies the digit mode(s) that are to be monitored, of type <B>LINEDIGITMODE</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINEDIGITMODE_PULSE</P></TD><TD VALIGN="TOP">Detect digits as audible clicks that are the result of rotary pulse sequences. Valid digits for pulse are '0' through '9'.</P></TD></TR><TR><TD VALIGN="TOP">LINEDIGITMODE_DTMF</P></TD><TD VALIGN="TOP">Detect digits as DTMF tones. Valid digits for DTMF are '0' through '9', 'A', 'B', 'C', 'D', '*', and '#'. </P></TD></TR><TR><TD VALIGN="TOP">LINEDIGITMODE_DTMFEND</P></TD><TD VALIGN="TOP">Detect and provide application notification of DTMF down edges. Valid digits for DTMF are '0' through '9', 'A', 'B', 'C', 'D', '*', and '#'.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwMediaControl</B></P></TD><TD VALIGN="TOP">Specifies the media control action, of type <B>LINEMEDIACONTROL</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIACONTROL_NONE</P></TD><TD VALIGN="TOP">Noop. No change is to be made to the media stream.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIACONTROL_RESET</P></TD><TD VALIGN="TOP">Reset the media stream. Provide the effect of an end-of-input. All buffers are released.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIACONTROL_PAUSE</P></TD><TD VALIGN="TOP">Temporarily pause the media stream.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIACONTROL_RESUME</P></TD><TD VALIGN="TOP">Start or resume a paused media stream.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIACONTROL_RATEUP</P></TD><TD VALIGN="TOP">The speed of the media stream is increased by some stream-defined quantity.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIACONTROL_RATEDOWN</P></TD><TD VALIGN="TOP">The speed of the media stream is decreased by some stream-defined quantity.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIACONTROL_RATENORMAL</P></TD><TD VALIGN="TOP">The speed of the media stream is returned to normal.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIACONTROL_VOLUMEUP</P></TD><TD VALIGN="TOP">The amplitude of the media stream is increased by some stream-defined quantity.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIACONTROL_VOLUMEDOWN</P></TD><TD VALIGN="TOP">The amplitude of the media stream is decreased by some stream-defined quantity.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIACONTROL_VOLUMENORMAL</P></TD><TD VALIGN="TOP">The amplitude of the media stream is returned to normal.</P></TD></TR><TR><TD VALIGN="TOP">Extensibility.</P></TD><TD VALIGN="TOP">None</P></TD></TR><TR><TD VALIGN="TOP">Comments</P></TD><TD VALIGN="TOP">The LINEMEDIACONTROLMEDIA structure defines a triple &lt;digit, digit mode(s), media control action&gt;. An array of these triples is passed to the lineSetMediaControl function to set media control actions triggered by digits detected on a given call. When a listed digit is detected, then the corresponding action on the media stream is invoked. </P></TD></TR><TR><TD VALIGN="TOP">See AlsoFunctions:</P></TD><TD VALIGN="TOP">:  lineSetMediaControl</P></TD></TR><TR><TD VALIGN="TOP">Data Types</P></TD><TD VALIGN="TOP">LINEDIGITMODE, LINEMEDIACONTROL</P></TD></TR></TBODY></TABLE>
<BR></P><P>LINEMEDIACONTROLMEDIA</P>
<P>The <B>LINEMEDIACONTROLDIGIT</B> structure describes a media action to be executed when detecting a media mode change. It is used as as entry in an array.</P>
<P>    typedef struct linemediacontrolmedia_tag {<BR>    DWORD    dwMediaModes;<BR>    DWORD    dwDuration;<BR>    DWORD    dwMediaControl;<BR>} LINEMEDIACONTROLMEDIA, FAR *LPLINEMEDIACONTROLMEDIA;</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="166pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Values</P></TD><TD VALIGN="TOP">The <B>LINEMEDIACONTROLMEDIA</B> structure contains the following fields:</P></TD></TR><TR><TD VALIGN="TOP"><B>dwMediaModes</B></P></TD><TD VALIGN="TOP">Specifies one or more media modes, of type <B>LINEMEDIAMODE</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_UNKNOWN</P></TD><TD VALIGN="TOP">A media stream exists but its mode is not known. This would correspond to a call with an unclassified media type. In typical analog telephony environments, an inbound call's media mode may be unknown until after the call has been answered and the media stream filtered to make a determination.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_INTERACTIVEVOICE</P></TD><TD VALIGN="TOP">The presence of voice energy on the call and the call is treated as an interactive call with humans on both ends.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_AUTOMATEDVOICE</P></TD><TD VALIGN="TOP">The presence of voice energy on the call and the voice is locally handled by an automated application.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_G3FAX</P></TD><TD VALIGN="TOP">A group 3 fax is being sent or received over the call.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_G4FAX</P></TD><TD VALIGN="TOP">A group 4 fax is being sent or received over the call.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_DATAMODEM</P></TD><TD VALIGN="TOP">A data modem session on the call.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_TELETEX</P></TD><TD VALIGN="TOP">A teletex session on the call. Teletex is one of the telematic services.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_VIDEOTEX</P></TD><TD VALIGN="TOP">A videotex session on the call. Videotex is one the telematic services.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_TELEX</P></TD><TD VALIGN="TOP">A telex session on the call. Telex is one the telematic services.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_MIXED</P></TD><TD VALIGN="TOP">A mixed session on the call. Mixed is one the ISDN telematic services.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_TDD</P></TD><TD VALIGN="TOP">A TDD session on the call. TDD stands for Telephony Devices for the Deaf.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_ADSI</P></TD><TD VALIGN="TOP">An ADSI session on the call. ADSI stands for Analog Display Services Interface.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIAMODE_UNAVAIL</P></TD><TD VALIGN="TOP">The media mode of the call is unavailable and will not be known..</P></TD></TR><TR><TD VALIGN="TOP"><B>dwDuration</B></P></TD><TD VALIGN="TOP">Specifies the duration in milliseconds during which the media mode should be present before the application should be notified or media control action should be taken.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwMediaControl</B></P></TD><TD VALIGN="TOP">Specifies the media control action, of type <B>LINEMEDIACONTROL</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIACONTROL_NONE</P></TD><TD VALIGN="TOP">Noop. No change is to be made to the media stream.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIACONTROL_RESET</P></TD><TD VALIGN="TOP">Reset the media stream. Provide the effect of an end-of-input. All buffers are released.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIACONTROL_PAUSE</P></TD><TD VALIGN="TOP">Temporarily pause the media stream.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIACONTROL_RESUME</P></TD><TD VALIGN="TOP">Start or resume a paused media stream.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIACONTROL_RATEUP</P></TD><TD VALIGN="TOP">The speed of the media stream is increased by some stream-defined quantity.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIACONTROL_RATEDOWN</P></TD><TD VALIGN="TOP">The speed of the media stream is decreased by some stream-defined quantity.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIACONTROL_RATENORMAL</P></TD><TD VALIGN="TOP">The speed of the media stream is returned to normal.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIACONTROL_VOLUMEUP</P></TD><TD VALIGN="TOP">The amplitude of the media stream is increased by some stream-defined quantity.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIACONTROL_VOLUMEDOWN</P></TD><TD VALIGN="TOP">The amplitude of the media stream is decreased by some stream-defined quantity.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIACONTROL_VOLUMENORMAL</P></TD><TD VALIGN="TOP">The amplitude of the media stream is returned to normal.</P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B>None.</P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">The <B>LINEMEDIACONTROLMEDIA</B> structure defines a triple &lt;media mode(s), duration, media control action&gt;. An array of these triples is passed to the <B>lineSetMediaControl</B> function to set media control actions triggered by media mode changes for a given call. When a change to a listed media mode is detected, then the corresponding action on the media stream is invoked. </P></TD></TR><TR><TD VALIGN="TOP">See AlsoFunctions:</P></TD><TD VALIGN="TOP">  lineSetMediaControl</P></TD></TR><TR><TD VALIGN="TOP">Data Types:</P></TD><TD VALIGN="TOP"> LINEMEDIAMODE, LINEMEDIACONTROL</P></TD></TR></TBODY></TABLE>
<BR></P><P>LINEMEDIACONTROLTONE</P>
<P>The <B>LINEMEDIACONTROLTONE</B> structure describes a media action to be executed when detecting a tone has been detected. It is used as as entry in an array.</P>
<P>typedef struct linemediacontroltone_tag {<BR>DWORDdwAppSpecific;<BR>DWORDdwDuration;<BR>DWORDdwFrequency1;<BR>DWORDdwFrequency2;<BR>DWORDdwFrequency3;<BR>DWORDdwMediaControl;<BR>} LINEMEDIACONTROLTONE, FAR *LPLINEMEDIACONTROLTONE;</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="154pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Values</P></TD><TD VALIGN="TOP">The <B>LINEMEDIACONTROLTONE</B> structure contains the following fields:</P></TD></TR><TR><TD VALIGN="TOP"><B>dwAppSpecific</B></P></TD><TD VALIGN="TOP">This field is used  by the application for tagging the tone. When this tone is detected, the value of the <B>dwAppSpecific</B> field is passed back to the application.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwDuration</B></P></TD><TD VALIGN="TOP">Specifies the duration in milliseconds during which the tone should be present before a detection is made.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwFrequency1<BR>dwFrequency2<BR>dwFrequency3</B></P></TD><TD VALIGN="TOP">Specifies the frequency in Hertz of a component of the tone. If fewer than three frequencies are needed in the tone, then a value of zero should be used for the unused frequencies. A tone with all three frequencies set to zero is interpreted as silence, and can be use for silence detection.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwMediaControl</B></P></TD><TD VALIGN="TOP">Specifies the media control action, of type <B>LINEMEDIACONTROL</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIACONTROL_NONE</P></TD><TD VALIGN="TOP">Noop. No change is to be made to the media stream.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIACONTROL_RESET</P></TD><TD VALIGN="TOP">Reset the media stream. Provide the effect of an end-of-input. All buffers are released.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIACONTROL_PAUSE</P></TD><TD VALIGN="TOP">Temporarily pause the media stream.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIACONTROL_RESUME</P></TD><TD VALIGN="TOP">Start or resume a paused media stream.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIACONTROL_RATEUP</P></TD><TD VALIGN="TOP">The speed of the media stream is increased by some stream-defined quantity.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIACONTROL_RATEDOWN</P></TD><TD VALIGN="TOP">The speed of the media stream is decreased by some stream-defined quantity.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIACONTROL_RATENORMAL</P></TD><TD VALIGN="TOP">The speed of the media stream is returned to normal.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIACONTROL_VOLUMEUP</P></TD><TD VALIGN="TOP">The amplitude of the media stream is increased by some stream-defined quantity.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIACONTROL_VOLUMEDOWN</P></TD><TD VALIGN="TOP">The amplitude of the media stream is decreased by some stream-defined quantity.</P></TD></TR><TR><TD VALIGN="TOP">LINEMEDIACONTROL_VOLUMENORMAL</P></TD><TD VALIGN="TOP">The amplitude of the media stream is returned to normal.</P></TD></TR><TR><TD VALIGN="TOP">Extensibility</P></TD><TD VALIGN="TOP">None.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">The <B>LINEMEDIACONTROLTONE</B> structure defines a tuple &lt;tone, media control action&gt;. An array of these tuples is passed to the <B>lineSetMediaControl</B> function to set media control actions triggered by media mode changes for a given call. When a change to a listed media mode is detected, then the corresponding action on the media stream is invoked. </P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">A tone with all frequencies set to zero corresponds to silence. An application can thus monitor the call's information stream for silence. </P></TD></TR><TR><TD VALIGN="TOP">See AlsoFunctions:</P></TD><TD VALIGN="TOP">  lineSetMediaControl</P></TD></TR><TR><TD VALIGN="TOP">Data Types:</P></TD><TD VALIGN="TOP"> LINEMEDIACONTROL</P></TD></TR></TBODY></TABLE>
<BR></P><P>LINEMEDIACONTROL</P>
<P>The <B>LINEMEDIACONTROL</B> bit flag constants describe a set of generic operations on media streams. The interpretations are determined by the media stream. The line device must have the media control capability in order for any media control operations to be effective.</P>
<P>LINEMEDIACONTROL_NONE  0x00000001<BR>LINEMEDIACONTROL_START0x00000002<BR>LINEMEDIACONTROL_RESET0x00000004<BR>LINEMEDIACONTROL_PAUSE 0x00000008<BR>LINEMEDIACONTROL_RESUME0x00000010<BR>LINEMEDIACONTROL_RATEUP0x00000020<BR>LINEMEDIACONTROL_RATEDOWN0x00000040<BR>LINEMEDIACONTROL_RATENORMAL0x00000080<BR>LINEMEDIACONTROL_VOLUMEUP0x00000100<BR>LINEMEDIACONTROL_VOLUMEDOWN 0x00000200<BR>LINEMEDIACONTROL_VOLUMENORMAL0x00000400</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="154pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Values</P></TD><TD VALIGN="TOP">The <B>LINEMEDIACONTROL</B> constants have the following values.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineMediaControl_none</B></P></TD><TD VALIGN="TOP">Noop. No change is to be made to the media stream.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineMediaControl_start</B></P></TD><TD VALIGN="TOP">Start the media stream. </P></TD></TR><TR><TD VALIGN="TOP"><B>LineMediaControl_reset</B></P></TD><TD VALIGN="TOP">Reset the media stream. Provide the effect of an end-of-input. All buffers are released.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineMediaControl_pause</B></P></TD><TD VALIGN="TOP">Temporarily pause the media stream.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineMediaControl_resume</B></P></TD><TD VALIGN="TOP">Resume a paused media stream.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineMediaControl_rateUp</B></P></TD><TD VALIGN="TOP">The speed of the media stream is increased by some stream-defined quantity.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineMediaControl_rateDown</B></P></TD><TD VALIGN="TOP">The speed of the media stream is decreased by some stream-defined quantity.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineMediaControl_rateNormal</B></P></TD><TD VALIGN="TOP">The speed of the media stream is returned to normal.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineMediaControl_volumeUp</B></P></TD><TD VALIGN="TOP">The amplitude of the media stream is increased by some stream-defined quantity.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineMediaControl_volumeDown</B></P></TD><TD VALIGN="TOP">The amplitude of the media stream is decreased by some stream-defined quantity.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineMediaControl_volumeNormal</B></P></TD><TD VALIGN="TOP">The amplitude of the media stream is returned to normal.</P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP">The high order 16 bits can be assigned for device specific extensions. The low order 16 bits are reserved.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">Media control is provided as a way of providing improved performance of actions on media streams on calls in response to telephony related events. The application should normally manage a media stream through the media specific API, the media control functionality provided here is not intended as a replacement of the native media APIs.<BR>Media control actions can be associated with the detection of digits, the detection of tones, the transition into a call state and the detection of a media mode. Consult a line's device capabilities to determine whether media control is available on a line. </P></TD></TR><TR><TD VALIGN="TOP">See AlsoFunctions:</P></TD><TD VALIGN="TOP">  lineSetMediaControl</P></TD></TR><TR><TD VALIGN="TOP">Data Types:</P></TD><TD VALIGN="TOP">  LINEMEDIACONTROLMEDIA, LINEMEDIACONTROLDIGITS, LINEMEDIACONTROLTONES, LINEMEDIACONTROLCALLSTATES</P></TD></TR></TBODY></TABLE>
<BR></P><P>LINEMEDIAMODE</P>
<P>The <B>LINEMEDIAMODE</B> constants describe media modes (the data type of a media stream) on calls. </P>
<P>LINEMEDIAMODE_NONE0x00000001<BR>LINEMEDIAMODE_UNKNOWN0x00000002<BR>LINEMEDIAMODE_INTERACTIVEVOICE0x00000004<BR>LINEMEDIAMODE_AUTOMATEDVOICE0x00000008<BR>LINEMEDIAMODE_DIGITALDATA0x00000010<BR>LINEMEDIAMODE_G3FAX 0x00000020<BR>LINEMEDIAMODE_G4FAX0x00000040<BR>LINEMEDIAMODE_DATAMODEM0x00000080<BR>LINEMEDIAMODE_TELETEX0x00000100<BR>LINEMEDIAMODE_VIDEOTEX0x00000200<BR>LINEMEDIAMODE_TELEX0x00000400<BR>LINEMEDIAMODE_MIXED0x00000800<BR>LINEMEDIAMODE_TDD0x00001000<BR>LINEMEDIAMODE_ADSI0x00002000<BR>LINEMEDIAMODE_UNAVAIL0x00004000</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="295pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Values</P></TD><TD VALIGN="TOP">The <B>LINEMEDIAMODE</B> constants have the following values.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineMediaMode_none</B></P></TD><TD VALIGN="TOP">No media stream. This value is mainly used as a NULL value.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineMediaMode_unknown</B></P></TD><TD VALIGN="TOP">A media stream exists but its mode is not currently known and may become known later. This would correspond to a call with an unclassified media type. In typical analog telephony environments, an inbound call's media mode may be unknown until after the call has been answered and the media stream filtered to make a determination.<BR>If the unknown media mode flag is set, other media flags may also be set. This is used to signify that the media is unknown but that it is likely to be one of the other selected media modes.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineMediaMode_interactiveVoice</B></P></TD><TD VALIGN="TOP">The presence of voice energy on the call and the call is treated as an interactive call with humans on both ends.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineMediaMode_automatedVoice</B></P></TD><TD VALIGN="TOP">The presence of voice energy on the call and the voice is locally handled by an automated application.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineMediaMode_digitalData</B></P></TD><TD VALIGN="TOP">Digital data is being sent or received over the call.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineMediaMode_G3Fax</B></P></TD><TD VALIGN="TOP">A group 3 fax is being sent or received over the call.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineMediaMode_G4Fax</B></P></TD><TD VALIGN="TOP">A group 4 fax is being sent or received over the call.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineMediaMode_dataModem</B></P></TD><TD VALIGN="TOP">A data modem session on the call.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineMediaMode_teletex</B></P></TD><TD VALIGN="TOP">A teletex session on the call. Teletex is one of the telematic services.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineMediaMode_videotex</B></P></TD><TD VALIGN="TOP">A videotex session on the call. Videotex is one the telematic services.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineMediaMode_telex</B></P></TD><TD VALIGN="TOP">A telex session on the call. Telex is one the telematic services.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineMediaMode_mixed</B></P></TD><TD VALIGN="TOP">A mixed session on the call. Mixed is one the ISDN telematic services.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineMediaMode_TDD</B></P></TD><TD VALIGN="TOP">A TDD session on the call. TDD stands for Telephony Devices for the Deaf.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineMediaMode_ADSI</B></P></TD><TD VALIGN="TOP">An ADSI session on the call. ADSI stands for Analog Display Services Interface.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineMediaMode_unavail</B></P></TD><TD VALIGN="TOP">The media mode of the call is unavailable and will not be known..</P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP">The high order 8 bits can be assigned for device specific extensions. The low order 24 bits are reserved.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">Note that bearer mode and media mode are different notions. The bearer mode of a call is an indication of the quality of the telephone connection as provided primarily by the network. The media mode of a call is an indication of the type of information stream that is exchanged over that call. Group 3 fax or data modem are media modes that use a call with a 3.1kHz voice bearer mode. </P></TD></TR><TR><TD VALIGN="TOP"><B>See AlsoFunctions:</B></P></TD><TD VALIGN="TOP"><B>lineMonitorMedia</B></P></TD></TR><TR><TD VALIGN="TOP">Messages: </P></TD><TD VALIGN="TOP"><B>LINE_MONITORMEDIA</B></P></TD></TR><TR><TD VALIGN="TOP">Data Types:</P></TD><TD VALIGN="TOP"><B>LINEMEDIACONTROLMEDIA</B></P></TD></TR></TBODY></TABLE>
<BR></P><P>LINEMONITORTONE</P>
<P>The <B>LINEMONITORTONE</B> structure describes a tone to be monitored. This is used as an entry in an array.</P>
<P>typedef struct linemonitortone_tag {<BR>DWORDdwAppSpecific;<BR>DWORDdwDuration;<BR>DWORDdwFrequency1;<BR>DWORDdwFrequency2;<BR>DWORDdwFrequency3;<BR>} LINEMONITORTONE, FAR *LPLINEMONITORTONE;</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="97pt" VALIGN="TOP"><COL WIDTH="335pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Values</P></TD><TD VALIGN="TOP">The <B>LINEMONITORTONE</B> structure contains the following fields:</P></TD></TR><TR><TD VALIGN="TOP"><B>dwAppSpecific</B></P></TD><TD VALIGN="TOP">This field is used  by the application for tagging the tone. When this tone is detected, the value of the <B>dwAppSpecific</B> field is passed back to the application.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwDuration</B></P></TD><TD VALIGN="TOP">Specifies the duration in milliseconds during which the tone should be present before a detection is made.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwFrequency1<BR>dwFrequency2<BR>dwFrequency3</B></P></TD><TD VALIGN="TOP">Specifies the frequency in Hertz of a component of the tone. If fewer than three frequencies are needed in the tone, then a value of zero should be used for the unused frequencies. A tone with all three frequencies set to zero is interpreted as silence, and can be use for silence detection.</P></TD></TR><TR><TD VALIGN="TOP">Extensibility</P></TD><TD VALIGN="TOP">None.</P></TD></TR><TR><TD VALIGN="TOP">Comments</P></TD><TD VALIGN="TOP">The LINEMONITORTONE structure defines a tone for the purpose of detection. An array of tones is passed to the lineMonitorTones function which monitors these tones and send a LINE_MONITORTONE message to the application when a detection is made. </P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">A tone with all frequencies set to zero corresponds to silence. An application can thus monitor the call's information stream for silence. </P></TD></TR><TR><TD VALIGN="TOP">See AlsoFunctions:</P></TD><TD VALIGN="TOP">lineMonitorTones</P></TD></TR></TBODY></TABLE>
<BR></P><P>LINEPARKMODE</P>
<P>The <B>LINEPARKMODE</B> bit flag constants describe different ways of parking calls.</P>
<P>LINEPARKMODE_DIRECTED0x00000001<BR>LINEPARKMODE_NONDIRECTED0x00000002</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="154pt" VALIGN="TOP"><COL WIDTH="271pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Values</P></TD><TD VALIGN="TOP">The <B>LINEPARKMODE</B> constants have the following values.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineParkMode_directed</B></P></TD><TD VALIGN="TOP">Specifies directed call park. The address where the call is to be parked must be supplied to the switch.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineParkMode_nondirected</B></P></TD><TD VALIGN="TOP">Specifies non directed call park. The address where the call is parked is selected by the switch and provided by the switch to the application.</P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP">The high order 16 bits can be assigned for device specific extensions. The low order 16 bits are reserved.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">The <B>LINEPARKMODE</B> is used when parking a call. Consult a line's address device capabilities to find out which park mode is available.</P></TD></TR><TR><TD VALIGN="TOP"><B>See AlsoFunctions:</B></P></TD><TD VALIGN="TOP"><B>linePark</B></P></TD></TR></TBODY></TABLE>
<BR></P><P>LINEREMOVEFROMCONF</P>
<P>The <B>LINEREMOVEFROMCONF</B> scalar constants describe how parties participating in a conference call can be removed from a conference call.</P>
<P>LINEREMOVEFROMCONF_NONE0x00000001<BR>LINEREMOVEFROMCONF_LAST0x00000002<BR>LINEREMOVEFROMCONF_ANY 0x00000003</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="154pt" VALIGN="TOP"><COL WIDTH="263pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Values</P></TD><TD VALIGN="TOP">The <B>LINEREMOVEFROMCONF</B> constants have the following values.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineRemoveFromConf_none</B></P></TD><TD VALIGN="TOP">Parties cannot be removed from the conference call.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineRemoveFromConf_last</B></P></TD><TD VALIGN="TOP">Only the most recently added party can be removed from the conference call</P></TD></TR><TR><TD VALIGN="TOP"><B>LineRemoveFromConf_any</B></P></TD><TD VALIGN="TOP">Any participating party can be removed from the conference call.</P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP">Values</P></TD><TD VALIGN="TOP"> in the range 0x80000000 to 0xFFFFFFFF can be assigned for device specific extensions; values in the range 0x00000000 to 0x7FFFFFFF are reserved.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">None.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B>Data Types:</P></TD><TD VALIGN="TOP">  <B>LINEDEVCAPS</B></P></TD></TR></TBODY></TABLE>
<BR></P><P>LINEREQDROP</P>
<P>The <B>LINEREQDROP</B> structure describes a <B>tapiRequestDrop</B> request.</P>
<P>typedef struct linereqdrop_tag {<BR>HWNDhWnd;<BR>WORDwRequestID;<BR>} LINEREQDROP, FAR *LPLINEREQDROP;</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="112pt" VALIGN="TOP"><COL WIDTH="306pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Values</P></TD><TD VALIGN="TOP">The <B>LINEREQDROP</B> structure contains the following fields:</P></TD></TR><TR><TD VALIGN="TOP"><B>hWnd</B></P></TD><TD VALIGN="TOP">Specifies the requesting application's window handle. <B>hWnd</B>, together with <B>wRequestID</B> identify the media call that is to be dropped.</P></TD></TR><TR><TD VALIGN="TOP"><B> WRequestID</B></P></TD><TD VALIGN="TOP">Specifies an application-selected ID that identifies the call to be dropped. This request ID is also passed in the <I>wParam</I> field of the <B>TAPI_REPLY</B> message to identify the call to which the message applies.</P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP">None.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">An app must use this structure to interpret the request buffer it received from <B>lineGetRequest</B> with the <I>dropCall</I> request mode.</P></TD></TR><TR><TD VALIGN="TOP"><B>See AlsoFunctions:</B></P></TD><TD VALIGN="TOP">  <B>lineGetRequest</B></P></TD></TR></TBODY></TABLE>
<BR></P><P>LINEREQLOGENTRY</P>
<P>The <B>LINEREQLOGENTRY</B> structure describes a <B>lineRequestLogEntry</B> request.</P>
<P>typedef struct linereqlogentry_tag {<BR>HCALLhCall;<BR>BYTEbyComment[LINEMAXCOMMENTSIZE];<BR>DWORDdwSize;<BR>} LINEREQLOGENTRY, FAR *LPLINEREQLOGENTRY;</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="183pt" VALIGN="TOP"><COL WIDTH="247pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Values</P></TD><TD VALIGN="TOP">The <B>LINEREQLOGENTRY</B> structure contains the following fields:</P></TD></TR><TR><TD VALIGN="TOP"><B>hCall</B></P></TD><TD VALIGN="TOP">Specifies a handle to the call with which this log entry is to be associated.</P></TD></TR><TR><TD VALIGN="TOP"><B>ByComment[LINEMAXCOMMENTSIZE]</B></P></TD><TD VALIGN="TOP">Specifies the comment about the call request. The maximum length of the comment string is LINEMAXCOMMENTSIZE characters, which includes the NULL terminator. The format of this string is as specified in the <B>dwStringFormat</B> field of the call's line device capabilities.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwSize</B></P></TD><TD VALIGN="TOP">Specifies the size in bytes of <B>byComment</B>.</P></TD></TR><TR><TD VALIGN="TOP">Extensibility</P></TD><TD VALIGN="TOP">None.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">An app must use this structure to interpret the request buffer it received from <B>lineGetRequest</B> with the LINEREQUESTMODE_LOGENTRY request mode.</P></TD></TR><TR><TD VALIGN="TOP">See AlsoFunctions:</P></TD><TD VALIGN="TOP">  lineGetRequest</P></TD></TR></TBODY></TABLE>
<BR></P><P>LINEREQMAKECALL</P>
<P>The LINEREQMAKECALL structure describes a tapiRequestMakeCall request.</P>
<P>typedef struct linereqmakecall_tag {<BR>charszDestAddress[TAPIMAXDESTADDRESSSIZE];<BR>charszAppName[TAPIMAXAPPNAMESIZE];<BR>charszCalledParty[TAPIMAXCALLEDPARTYSIZE];<BR>charszComment[TAPIMAXCOMMENTSIZE];<BR>} LINEREQMAKECALL, FAR *LPLINEREQMAKECALL;</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="223pt" VALIGN="TOP"><COL WIDTH="223pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Values</P></TD><TD VALIGN="TOP">The <B>LINEREQMAKECALL</B> structure contains the following fields:</P></TD></TR><TR><TD VALIGN="TOP"><B>szDestAddress[TAPIMAXADDRESSSIZE]</B></P></TD><TD VALIGN="TOP">Specifies the NULL-terminated destination address of the make call request. The address can use the canonical address format or the dialable address format. The maximum length of the address is TAPIMAXDESTADDRESSSIZE characters, which includes the NULL terminator. Longer strings are truncated.</P></TD></TR><TR><TD VALIGN="TOP"><B>SzAppName[TAPIMAXAPPNAMESIZE]</B></P></TD><TD VALIGN="TOP">Specifies the ASCII NULL-terminated user-friendly application name or module name of the application that originated the request. The maximum length of the address is TAPIMAXAPPNAMESIZE characters, which includes the NULL terminator.</P></TD></TR><TR><TD VALIGN="TOP"><B>SzCalledParty[TAPIMAXCALLEDPARTYSIZE]</B></P></TD><TD VALIGN="TOP">Specifies the ASCII NULL-terminated user-friendly called party name. The maximum length of the called party information is TAPIMAXCALLEDPARTYSIZE characters, which includes the NULL terminator.</P></TD></TR><TR><TD VALIGN="TOP"><B>SzComment[TAPIMAXCOMMENTSIZE]</B></P></TD><TD VALIGN="TOP">Specifies the ASCII NULL-terminated comment about the call request. The maximum length of the comment string is TAPIMAXCOMMENTSIZE characters, which includes the NULL terminator.</P></TD></TR><TR><TD VALIGN="TOP">Extensibility</P></TD><TD VALIGN="TOP">None.</P></TD></TR><TR><TD VALIGN="TOP">Comments</P></TD><TD VALIGN="TOP">The szDestAddress field contains the address of the remote party; the other fields are useful for logging purposes. An app must use this structure to interpret the request buffer it received from lineGetRequest with the LINEREQUESTMODE_MAKECALL request mode.</P></TD></TR><TR><TD VALIGN="TOP">See AlsoFunctions</P></TD><TD VALIGN="TOP">  lineGetRequest</P></TD></TR></TBODY></TABLE>
<BR></P><P>LINEREQMEDIACALL</P>
<P>The <B>LINEREQMEDIACALL</B> structure describes a <B>tapiRequestMediaCall</B> request.</P>
  </P>
<P>    typedef struct linereqmediacall_tag {</P>
<P>    HWND    hWnd;</P>
<P>    WORD    wRequestID;</P>
<P>    char    szDeviceClass[TAPIMAXDEVICECLASSSIZE];</P>
<P>    unsigned_char    ucDeviceID[TAPIMAXDEVICEIDSIZE];</P>
<P>    DWORD    dwSize;</P>
<P>    DWORD    dwSecure;</P>
<P>    char    szDestAddress[TAPIMAXDESTADDRESSSIZE];</P>
<P>    char    szAppName[TAPIMAXAPPNAMESIZE];</P>
<P>    char    szCalledParty[TAPIMAXCALLEDPARTYSIZE];</P>
<P>    char    szComment[TAPIMAXCOMMENTSIZE];</P>
<P>} LINEREQMEDIACALL, FAR *LPLINEREQMEDIACALL;</P>
  </P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="194pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Values</B></P></TD><TD VALIGN="TOP">The <B>LINEREQMEDIACALL</B> structure contains the following fields:</P></TD></TR><TR><TD VALIGN="TOP"><B>hWnd</B></P></TD><TD VALIGN="TOP">Specifies the requesting application's window handle. This is the window to which <B>TAPI_REPLY</B> messages are sent. <B>hWnd</B>, together with <B>wRequestID</B> identify the media call to the application.</P></TD></TR><TR><TD VALIGN="TOP"><B>WRequestID</B></P></TD><TD VALIGN="TOP">Specifies an application-selected ID that identifies this make call request to the application. This request ID is passed in the <I>wParam</I> field of the <B>TAPI_REPLY</B> message to identify the call to which the message applies. The app will use this request ID when requesting that the call be dropped.</P></TD></TR><TR><TD VALIGN="TOP"><B>SzDeviceClass[TAPIMAXDEVICECLASSSIZE]</B></P></TD><TD VALIGN="TOP">Specifies an ASCII NULL-terminated string containing the name of the device class that identifies the media type for the requested call. The maximum length is TAPIMAXDEVICECLASSSIZE bytes, which includes the NULL terminator.</P></TD></TR><TR><TD VALIGN="TOP"><B>UcDeviceID[TAPIMAXDEVICEIDSIZE]</B></P></TD><TD VALIGN="TOP">Specifies the name of the ID for the media device that corresponds to the media stream of the requested call. This device is of the device class specified in <B>szDeviceClass</B>. The actual length of the device ID string is <B>dwSize</B> bytes. The maximum length is TAPIMAXDEVICEIDSIZE bytes. The format of this string is device class dependent.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwSize</B></P></TD><TD VALIGN="TOP">Specifies the size in bytes of the device ID string contained in <B>uDeviceID</B>. <B>dwSize</B> will not exceed TAPIMAXDEVICEIDSIZE.</P></TD></TR><TR><TD VALIGN="TOP">DwSecure</P></TD><TD VALIGN="TOP">Specifies whether or not the requested call is to be established as secure. If zero, the call is not required to be secure and features such as call waiting are not disabled and allowed to interfere with the media stream on the call. If one, the call is required to be secure, if possible.</P></TD></TR><TR><TD VALIGN="TOP"><B>SzDestAddress[TAPIMAXADDRESSSIZE]</B></P></TD><TD VALIGN="TOP">Specifies the NULL-terminated destination address of the make call request. The address can use the canonical address format or the dialable address format. The maximum length of the address is TAPIMAXDESTADDRESSSIZE characters, which includes the NULL terminator. Longer strings are truncated.</P></TD></TR><TR><TD VALIGN="TOP"><B>SzAppName[TAPIMAXAPPNAMESIZE]</B></P></TD><TD VALIGN="TOP">Specifies the ASCII NULL-terminated user-friendly application name or module name of the application that originated the request. The maximum length of the address is TAPIMAXAPPNAMESIZE characters, which includes the NULL terminator.</P></TD></TR><TR><TD VALIGN="TOP"><B>SzCalledParty[TAPIMAXCALLEDPARTYSIZE]</B></P></TD><TD VALIGN="TOP">Specifies the ASCII NULL-terminated user-friendly called party name. . The maximum length of the called party information is TAPIMAXCALLEDPARTYSIZE characters, which includes the NULL terminator.</P></TD></TR><TR><TD VALIGN="TOP"><B>SzComment[TAPIMAXCOMMENTSIZE]</B></P></TD><TD VALIGN="TOP">Specifies the ASCII NULL-terminated comment about the call request. The maximum length of the comment string is TAPIMAXCOMMENTSIZE characters, which includes the NULL terminator.</P></TD></TR><TR><TD VALIGN="TOP">Extensibility.</P></TD><TD VALIGN="TOP">None</P></TD></TR><TR><TD VALIGN="TOP">Comments</P></TD><TD VALIGN="TOP">An app must use this structure to interpret the request buffer it received from lineGetRequest with the LINEREQUESTMODE_MEDIACALL request mode.</P></TD></TR><TR><TD VALIGN="TOP">See AlsoFunctions:</P></TD><TD VALIGN="TOP">lineGetRequest</P></TD></TR></TBODY></TABLE>
<BR></P><P>LINEREQUESTMODE</P>
<P>The <B>LINEREQUESTMODE</B> bit flag constants describe different types of telephony requests that can be made from one app to another.</P>
<P>LINEREQUESTMODE_MAKECALL0x00000001<BR>LINEREQUESTMODE_MEDIACALL0x00000002<BR>LINEREQUESTMODE_DROP 0x00000004<BR>LINEREQUESTMODE_LOGENTRY 0x00000008</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="295pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Values</P></TD><TD VALIGN="TOP">The <B>LINEREQUESTMODE</B> constants have the following values.</P></TD></TR><TR><TD VALIGN="TOP">  <B>LineRequestMode_makeCall</B></P></TD><TD VALIGN="TOP">A <B>tapiRequestMakeCall</B> request.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineRequestMode_mediaCall</B>.</P></TD><TD VALIGN="TOP">A <B>tapiRequestMediaCall</B> request</P></TD></TR><TR><TD VALIGN="TOP"><B>LineRequestMode_drop</B></P></TD><TD VALIGN="TOP">A <B>tapiRequestDrop</B> request.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineRequestMode_logEntry</B></P></TD><TD VALIGN="TOP">A <B>lineRequestLogEntry</B> request.</P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B>.</P></TD><TD VALIGN="TOP">None. All 32 bits are reserved</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B>.</P></TD><TD VALIGN="TOP">None</P></TD></TR><TR><TD VALIGN="TOP"><B>See AlsoFunctions:</B></P></TD><TD VALIGN="TOP">:  <B>lineRegisterRequestRecipient, lineGetRequest</B></P></TD></TR><TR><TD VALIGN="TOP">Messages:<B> </B></P></TD><TD VALIGN="TOP"><B> LINE_REQUEST</B></P></TD></TR></TBODY></TABLE>
<BR></P><P>LINEROAMMODE </P>
<P>The <B>LINEROAMMODE</B> bit flag constants describe the roaming status of a line device.</P>
<P>LINEROAMMODE_UNKNOWN0x00000001<BR>LINEROAMMODE_UNAVAIL0x00000002<BR>LINEROAMMODE_HOME0x00000004<BR>LINEROAMMODE_ROAMA0x00000008<BR>LINEROAMMODE_ROAMB 0x00000010</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="138pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Values</B></P></TD><TD VALIGN="TOP">The <B>LINEROAMMODE</B> constants have the following values.</P></TD></TR><TR><TD VALIGN="TOP">  <B>LineRoamMode_unknown</B></P></TD><TD VALIGN="TOP">The roam mode is currently unknown, but may become known later.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineRoamMode_unavail</B></P></TD><TD VALIGN="TOP">The roam mode is unavailable and will not be known.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineRoamMode_home</B></P></TD><TD VALIGN="TOP">The line is connected to the home network node.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineRoamMode_roamA</B></P></TD><TD VALIGN="TOP">The line is connected to the Roam-A carrier and calls are charged accordingly.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineRoamMode_roamB</B></P></TD><TD VALIGN="TOP">The line is connected to the Roam-B carrier and calls are charged accordingly.</P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP">The high order 16 bits can be assigned for device specific extensions. The low order 16 bits are reserved.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">None.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B>Data Types:</P></TD><TD VALIGN="TOP"><B>LINEDEVCAPS</B></P></TD></TR></TBODY></TABLE>
<BR></P><P>LINESPECIALINFO</P>
<P>The <B>LINESPECIALINFO</B> bit flag constants describes special information signals that the network may use to report various reporting and network observation operations. They are special coded tone sequences transmitted at the beginning of network advisory recorded announcements.</P>
<P>LINESPECIALINFO_NOCIRCUIT0x00000001<BR>LINESPECIALINFO_CUSTIRREG0x00000002<BR>LINESPECIALINFO_REORDER 0x00000004<BR>LINESPECIALINFO_UNKNOWN0x00000008<BR>LINESPECIALINFO_UNAVAIL0x00000010</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="127pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Values</P></TD><TD VALIGN="TOP">The LINESPECIALINFO constants have the following values.</P></TD></TR><TR><TD VALIGN="TOP">LineSpecialInfo_noCircuit.</P></TD><TD VALIGN="TOP">This special information tone preceeds a no circuit or emergency announcement (trunk blockage category)</P></TD></TR><TR><TD VALIGN="TOP">LineSpecialInfo_custIrreg</P></TD><TD VALIGN="TOP">This special information tone preceeds a vacant number, AIS, Centrex number change and non-working station, access code not dialed or dialed in error, manual intercept operator message (customer irregularity category).</P></TD></TR><TR><TD VALIGN="TOP">LineSpecialInfo_reorder</P></TD><TD VALIGN="TOP">This special information tone preceeds a reorder announcement (equipment irregularity category).</P></TD></TR><TR><TD VALIGN="TOP">LineSpecialInfo_unknown</P></TD><TD VALIGN="TOP">Specific about the special information tone are currently unknown but may become known later.</P></TD></TR><TR><TD VALIGN="TOP">LineSpecialInfo_unavail</P></TD><TD VALIGN="TOP">Specifics about the special information tone are unavailable, and will not become known.</P></TD></TR><TR><TD VALIGN="TOP">Extensibility</P></TD><TD VALIGN="TOP">The high order 16 bits can be assigned for device specific extensions. The low order 16 bits are reserved.</P></TD></TR><TR><TD VALIGN="TOP">Comments</P></TD><TD VALIGN="TOP">Special information tones are defined for advisory messages and not usually used for billing or supervisory purpose.</P></TD></TR><TR><TD VALIGN="TOP">See AlsoMessages:</P></TD><TD VALIGN="TOP">LINECALLSTATUS</P></TD></TR></TBODY></TABLE>
<BR></P><P>LINETERMCAPS</P>
<P>The <B>LINETERMCAPS</B> structure describes the capabilities of a line's terminal device.</P>
<P>typedef struct linetermcaps_tag {<BR>DWORDdwTermDev;<BR>DWORDdwTermModes;<BR>DWORDdwTermSharing;<BR>} LINETERMCAPS, FAR *LPLINETERMCAPS;</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="166pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Values</B></P></TD><TD VALIGN="TOP">The <B>LINETERMCAPS</B> structure contains the following fields:</P></TD></TR><TR><TD VALIGN="TOP"><B>dwTermDev</B></P></TD><TD VALIGN="TOP">Specifies the device type of the terminal, of type <B>LINETERMDEV</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINETERMDEV_PHONE</P></TD><TD VALIGN="TOP">The terminal is a phone set.</P></TD></TR><TR><TD VALIGN="TOP">LINETERMDEV_HEADSET</P></TD><TD VALIGN="TOP">The terminal is a headset</P></TD></TR><TR><TD VALIGN="TOP">LINETERMDEV_SPEAKER</P></TD><TD VALIGN="TOP">The terminal is an external speaker and microphone.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwTermModes</B></P></TD><TD VALIGN="TOP">Specifies the terminal mode(s) the terminal device is able to deal with, of type <B>LINETERMMODE</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINETERMMODE_BUTTONS</P></TD><TD VALIGN="TOP">These are button press events sent from the terminal to the line.</P></TD></TR><TR><TD VALIGN="TOP">LINETERMMODE_LAMPS</P></TD><TD VALIGN="TOP">This are lamp events sent from the line to the terminal.</P></TD></TR><TR><TD VALIGN="TOP">LINETERMMODE_DISPLAY</P></TD><TD VALIGN="TOP">This is display information sent from the line to the terminal.</P></TD></TR><TR><TD VALIGN="TOP">LINETERMMODE_RINGER</P></TD><TD VALIGN="TOP">This is ringer control information sent from the switch to the terminal.</P></TD></TR><TR><TD VALIGN="TOP">LINETERMMODE_HOOKSWITCH</P></TD><TD VALIGN="TOP">These are hookswitch event sent from the terminal to the line.</P></TD></TR><TR><TD VALIGN="TOP">LINETERMMODE_MEDIAFROMTERM</P></TD><TD VALIGN="TOP">This is the unidirectional media stream from the terminal to the line associated with a call on the line. Use this value when routing of both unidirectional channels of a call's media stream can be controlled independently.</P></TD></TR><TR><TD VALIGN="TOP">LINETERMMODE_MEDIATOTERM</P></TD><TD VALIGN="TOP">This is the unidirectional media stream from the line to the terminal associated with a call on the line. Use this value when routing of both unidirectional channels of a call's media stream can be controlled independently.</P></TD></TR><TR><TD VALIGN="TOP">LINETERMMODE_MEDIABIDIR</P></TD><TD VALIGN="TOP">This is the bidirectional media stream associated with a call on the line and the terminal. Use this value when routing of both unidirectional channels of a call's media stream cannot be controlled independently.</P></TD></TR><TR><TD VALIGN="TOP"><B>DwTermSharing</B></P></TD><TD VALIGN="TOP">Specifies how the terminal device is shared between line devices, of type <B>LINETERMSHARING</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP">LINETERMSHARING_PRIVATE</P></TD><TD VALIGN="TOP">The terminal device is private to a single line device.</P></TD></TR><TR><TD VALIGN="TOP">LINETERMSHARING_SHAREDEXCL</P></TD><TD VALIGN="TOP">The terminal device can be used by multiple lines. The last line device to do a <B>lineSetTerminal</B> to the terminal for a given terminal mode will have exclusive connection to the terminal for that mode.</P></TD></TR><TR><TD VALIGN="TOP">LINETERMSHARING_SHAREDCONF</P></TD><TD VALIGN="TOP">The terminal device can be used by multiple lines. The <B>lineSetTerminal</B> requests of the various terminals end up being "merged" at the terminal.</P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP">None.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">The <B>LINEMONITORTONE</B> structure defines a tone for the purpose of detection. An array of tones is passed to the <B>lineMonitorTones</B> function which monitors these tones and send a <B>LINE_MONITORTONE</B> message to the application when a detection is made. <BR>A tone with all frequencies set to zero corresponds to silence. An application can thus monitor the call's information stream for silence. </P></TD></TR><TR><TD VALIGN="TOP"><B>See AlsoFunctions:</B></P></TD><TD VALIGN="TOP"><B>lineMonitorTones</B></P></TD></TR><TR><TD VALIGN="TOP">Data Types:</P></TD><TD VALIGN="TOP"><B>LINETERMDEV, LINETERMMODE, LINETERMSHARING</B></P></TD></TR></TBODY></TABLE>
<BR></P><P>LINETERMDEV</P>
<P>The <B>LINETERMDEV</B> bit flag constants describe different types of terminal devices.</P>
<P>LINETERMDEV_PHONE0x00000001<BR>LINETERMDEV_HEADSET0x00000002<BR>LINETERMDEV_SPEAKER0x00000004</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="121pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Values</B></P></TD><TD VALIGN="TOP">The <B>LINETERMDEV</B> constants have the following values.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineTermDev_phone</B></P></TD><TD VALIGN="TOP">The terminal is a phone set.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineTermDev_headset</B></P></TD><TD VALIGN="TOP">The terminal is a headset.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineTermDev_speaker</B></P></TD><TD VALIGN="TOP">The terminal is an external speaker and microphone.</P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP">The high order 16 bits can be assigned for device specific extensions. The low order 16 bits are reserved.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">These constants are used to characterize a line's terminal device. This allows an application to determine the nature of a terminal device.</P></TD></TR><TR><TD VALIGN="TOP"><B>See AlsoFunctions:</B></P></TD><TD VALIGN="TOP"><B>lineSetTerminal</B></P></TD></TR><TR><TD VALIGN="TOP">Data Types:</P></TD><TD VALIGN="TOP"><B>LINEDEVCAPS</B></P></TD></TR></TBODY></TABLE>
<BR></P><P>LINETERMMODE</P>
<P>The <B>LINETERMMODE</B> bit flag constants describe different types of events on a phone line that can be routed to a terminal device.</P>
<P>LINETERMMODE_BUTTONS0x00000001<BR>LINETERMMODE_LAMPS0x00000002<BR>LINETERMMODE_DISPLAY0x00000004<BR>LINETERMMODE_RINGER0x00000008<BR>LINETERMMODE_HOOKSWITCH0x00000010<BR>LINETERMMODE_MEDIATOLINE0x00000020<BR>LINETERMMODE_MEDIAFROMLINE0x00000040<BR>LINETERMMODE_MEDIABIDIRECT0x00000080</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="177pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Values</B></P></TD><TD VALIGN="TOP">The <B>LINETERMMODE</B> constants have the following values.</P></TD></TR><TR><TD VALIGN="TOP"> <B>LineTermMode_buttons</B></P></TD><TD VALIGN="TOP">These are button press events sent from the terminal to the line.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineTermMode_lamps</B></P></TD><TD VALIGN="TOP">These are lamp events sent from the line to the terminal.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineTermMode_display</B></P></TD><TD VALIGN="TOP">This is display information sent from the line to the terminal.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineTermMode_ringer</B></P></TD><TD VALIGN="TOP">This is ringer control information sent from the switch to the terminal.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineTermMode_hookswitch</B></P></TD><TD VALIGN="TOP">These are hookswitch events sent from the terminal to the line.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineTermMode_mediaFromTerm</B></P></TD><TD VALIGN="TOP">This is the unidirectional media stream from the terminal to the line associated with a call on the line. Use this value when routing of both unidirectional channels of a call's media stream can be controlled independently.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineTermMode_mediaToTerm</B></P></TD><TD VALIGN="TOP">This is the unidirectional media stream from the line to the terminal associated with a call on the line. Use this value when routing of both unidirectional channels of a call's media stream can be controlled independently.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineTermMode_mediaBiDirect</B></P></TD><TD VALIGN="TOP">This is the bidirectional media stream associated with a call on the line and the terminal. Use this value when routing of both unidirectional channels of a call's media stream cannot be controlled independently.</P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP">The high order 16 bits can be assigned for device specific extensions. The low order 16 bits are reserved.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">These constants describe the classes of control and information streams that can be routed directly between a line device and a terminal device (such as a phone set).</P></TD></TR><TR><TD VALIGN="TOP"><B>See AlsoFunctions:</B></P></TD><TD VALIGN="TOP"><B>lineSetTerminal</B></P></TD></TR><TR><TD VALIGN="TOP">Data Types:</P></TD><TD VALIGN="TOP"><B>LINEDEVCAPS</B></P></TD></TR></TBODY></TABLE>
<BR></P><P>LINETERMSHARING</P>
<P>The <B>LINETERMSHARING</B> bit flag constants describe different ways in which a terminal can be shared between line devices, addresses, or calls.</P>
<P>LINETERMSHARING_PRIVATE0x00000001<BR>LINETERMSHARING_SHAREDEXCL0x00000002<BR>LINETERMSHARING_SHAREDCONF0x00000004</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="149pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Values</B></P></TD><TD VALIGN="TOP">The <B>LINETERMSHARING</B> constants have the following values.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineTermSharing_private</B></P></TD><TD VALIGN="TOP">The terminal device is private to a single line device.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineTermSharing_sharedExcl</B></P></TD><TD VALIGN="TOP">The terminal device can be used by multiple lines. The last line device to do a <B>lineSetTerminal</B> to the terminal for a given terminal mode will have exclusive connection to the terminal for that mode.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineTermSharing_sharedConf</B></P></TD><TD VALIGN="TOP">The terminal device can be used by multiple lines. The <B>lineSetTerminal</B> requests of the various terminals end up being "merged" or conferenced at the terminal.</P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP">The high order 16 bits can be assigned for device specific extensions. The low order 16 bits are reserved.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">These constants describe the classes of control and information streams that can be routed directly between a line device and a terminal device (such as a phone set).</P></TD></TR><TR><TD VALIGN="TOP"><B>See AlsoFunctions:</B></P></TD><TD VALIGN="TOP"><B>lineSetTerminal</B></P></TD></TR><TR><TD VALIGN="TOP">Data Types:</P></TD><TD VALIGN="TOP"><B>LINEDEVCAPS</B></P></TD></TR></TBODY></TABLE>
<BR></P><P>LINETONEMODE</P>
<P>The <B>LINETONEMODE</B> constants describe different selections used when generating line tones.</P>
<P>LINETONEMODE_CUSTOM0x00000001<BR>LINETONEMODE_RINGBACK0x00000002<BR>LINETONEMODE_BUSY0x00000004<BR>LINETONEMODE_BEEP0x00000008<BR>LINETONEMODE_BILLING0x00000010</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="127pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Values</B>.</P></TD><TD VALIGN="TOP">The <B>LINETONEMODE</B> constants have the following values</P></TD></TR><TR><TD VALIGN="TOP">  <B>LineToneMode_custom</B></P></TD><TD VALIGN="TOP">The tone is a custom tone, defined by its component frequencies, of type <B>LINEGENERATETONE</B>.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineToneMode_ringback</B></P></TD><TD VALIGN="TOP">The tone is ringback tone. Exact definition is service provider defined.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineToneMode_busy</B></P></TD><TD VALIGN="TOP">The tone is a busy tone. Exact definition is service provider defined.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineToneMode_beep</B></P></TD><TD VALIGN="TOP">The tone is a beep, as used to announce the beginning of a recording. Exact definition is service provider defined.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineToneMode_billing</B></P></TD><TD VALIGN="TOP">The tone is billing information tone such as a credit card prompt tone. Exact definition is service provider defined.</P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP">The high order 16 bits can be assigned for device specific extensions. The low order 16 bits are reserved.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">These constants are used to define tones to be generated inband over a call to the remote party. Note that tone detection of non custom tones does not use these constants.</P></TD></TR><TR><TD VALIGN="TOP"><B>See AlsoFunctions:</B></P></TD><TD VALIGN="TOP"><B>lineGenerateTones</B></P></TD></TR><TR><TD VALIGN="TOP">Messages:</P></TD><TD VALIGN="TOP"><B>LINE_GENERATE</B></P></TD></TR><TR><TD VALIGN="TOP">Data Types:</P></TD><TD VALIGN="TOP"><B>LINEGENERATETONE</B></P></TD></TR></TBODY></TABLE>
<BR></P><P>LINETRANSFERMODE</P>
<P>The <B>LINETRANSFERMODE</B> bit flag constants describe different ways of resolving call transfer requests.</P>
<P>LINETRANSFERMODE_TRANSFER0x00000001<BR>LINETRANSFERMODE_CONFERENCE0x00000002</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="151pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Values</B></P></TD><TD VALIGN="TOP">The <B>LINETRANSFERMODE</B> constants have the following values.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineTransferMode_transfer</B></P></TD><TD VALIGN="TOP">The transfer is resolved by transferring the initial call to the consultation call. Both calls will become <I>idle</I> to the application.</P></TD></TR><TR><TD VALIGN="TOP"><B>LineTransferMode_conference</B></P></TD><TD VALIGN="TOP">The transfer is resolved by establishing a three-way conference between the application, the party connected to the initial call and the party connected to the consultation call. A conference call is created when this option is selected.</P></TD></TR><TR><TD VALIGN="TOP"><B>Extensibility</B></P></TD><TD VALIGN="TOP">The high order 16 bits can be assigned for device specific extensions. The low order 16 bits are reserved.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">None.</P></TD></TR><TR><TD VALIGN="TOP"><B>See AlsoFunctions:</B></P></TD><TD VALIGN="TOP"><B>lineCompleteTransfer</B></P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P></P>
 </P>
<P><A NAME="PT4"></A>PHONEBUTTONFUNCTION</P>
  </P>
<P>The <B>PHONEBUTTONFUNCTION</B> scalar constants describe the functions commonly assigned to buttons on telephone sets.</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="200pt" VALIGN="TOP"><COL WIDTH="96pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_UNKNOWN</P></TD><TD VALIGN="TOP">0x00000000</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_CONFERENCE</P></TD><TD VALIGN="TOP">0x00000001</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_TRANSFER</P></TD><TD VALIGN="TOP">0x00000002</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_DROP</P></TD><TD VALIGN="TOP">0x00000003</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_HOLD</P></TD><TD VALIGN="TOP">0x00000004</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_RECALL</P></TD><TD VALIGN="TOP">0x00000005</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_DISCONNECT</P></TD><TD VALIGN="TOP">0x00000006</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_CONNECT</P></TD><TD VALIGN="TOP">0x00000007</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_MSGWAITON</P></TD><TD VALIGN="TOP">0x00000008</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_MSGWAITOFF</P></TD><TD VALIGN="TOP">0x00000009</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_SELECTRING</P></TD><TD VALIGN="TOP">0x0000000A</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_ABBREVDIAL</P></TD><TD VALIGN="TOP">0x0000000B</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_FORWARD</P></TD><TD VALIGN="TOP">0x0000000C</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_PICKUP</P></TD><TD VALIGN="TOP">0x0000000D</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_RINGAGAIN</P></TD><TD VALIGN="TOP">0x0000000E</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_PARK</P></TD><TD VALIGN="TOP">0x0000000F</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_REJECT</P></TD><TD VALIGN="TOP">0x00000010</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_REDIRECT</P></TD><TD VALIGN="TOP">0x00000011</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_MUTE</P></TD><TD VALIGN="TOP">0x00000012</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_VOLUMEUP</P></TD><TD VALIGN="TOP">0x00000013</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_VOLUMEDOWN</P></TD><TD VALIGN="TOP">0x00000014</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_SPEAKERON</P></TD><TD VALIGN="TOP">0x00000015</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_SPEAKEROFF</P></TD><TD VALIGN="TOP">0x00000016</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_FLASH</P></TD><TD VALIGN="TOP">0x00000017</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_DATAON</P></TD><TD VALIGN="TOP">0x00000018</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_DATAOFF</P></TD><TD VALIGN="TOP">0x00000019</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_DONOTDISTURB</P></TD><TD VALIGN="TOP">0x0000001A</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_INTERCOM</P></TD><TD VALIGN="TOP">0x0000001B</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_BRIDGEDAPP</P></TD><TD VALIGN="TOP">0x0000001C</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_BUSY</P></TD><TD VALIGN="TOP">0x0000001D</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_CALLAPP</P></TD><TD VALIGN="TOP">0x0000001E</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_DATETIME</P></TD><TD VALIGN="TOP">0x0000001F</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_DIRECTORY</P></TD><TD VALIGN="TOP">0x00000020</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_COVER</P></TD><TD VALIGN="TOP">0x00000021</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_CALLID</P></TD><TD VALIGN="TOP">0x00000022</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_LASTNUM</P></TD><TD VALIGN="TOP">0x00000023</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_NIGHTSRV</P></TD><TD VALIGN="TOP">0x00000024</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_SENDCALLS</P></TD><TD VALIGN="TOP">0x00000025</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_MSGINDICATOR</P></TD><TD VALIGN="TOP">0x00000026</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_REPDIAL</P></TD><TD VALIGN="TOP">0x00000027</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_SETREPDIAL</P></TD><TD VALIGN="TOP">0x00000028</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_SYSTEMSPEED</P></TD><TD VALIGN="TOP">0x00000029</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_STATIONSPEED</P></TD><TD VALIGN="TOP">0x0000002A</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_CAMPON</P></TD><TD VALIGN="TOP">0x0000002B</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_SAVEREPEAT</P></TD><TD VALIGN="TOP">0x0000002C</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_QUEUECALL</P></TD><TD VALIGN="TOP">0x0000002D</P></TD></TR><TR><TD VALIGN="TOP">PHONEBUTTONFUNCTION_NONE</P></TD><TD VALIGN="TOP">0x0000002E</P></TD></TR></TBODY></TABLE>
<BR></P><P><B>Extensibility    </B>Values in the range 0x80000000 to 0xFFFFFFFF can be assigned for device specific extensions; values in the range 0x00000000 to 0x7FFFFFFF are reserved.</P>
<P><B>Comments    </B>The <B>PHONEBUTTONFUNCTION</B> constants have values commonly found on current telephone sets. These button functions can be used to invoke the corresponding function from the switch using <B>lineDevSpecificFeature</B>. Note that the API does not define the semantics of the button functions, it only provides access to the corresponding function.</P>
<P><B>See Also    </B>Functions:  <B>phoneGetButtonInfo, phoneSetButtonInfo, lineDevSpecificFeature</B></P>
<P><B>    </B>Messages:  <B>PHONE_BUTTON</B></P>
<P>PHONEBUTTONINFO</P>
<P>The <B>PHONEBUTTONINFO</B> structure contains information about a button on a phone device.</P>
<P>    typedef struct phonebuttoninfo_tag {<BR>    DWORD    dwTotalSize;<BR>    DWORD    dwNeededSize;<BR>    DWORD    dwUsedSize;<BR><BR>    DWORD    dwButtonMode;<BR>    DWORD    dwButtonFunction;<BR><BR>    DWORD    dwButtonTextSize;<BR>    DWORD    dwButtonTextOffset;<BR><BR>    DWORD    dwDevSpecificSize;<BR>    DWORD    dwDevSpecificOffset;<BR>} PHONEBUTTONINFO, FAR *LPPHONEBUTTONINFO;</P>
<P><B>Fields    </B>The <B>PHONEBUTTONINFO</B> structure contains the following fields:</P>
<P><B>    dwTotalSize</B></P>
<P>The total size in bytes allocated to this data structure.</P>
<P><B>    dwNeededSize</B></P>
<P>The size in bytes for this data structure that is needed to hold all the returned information.</P>
<P><B>    dwUsedSize</B></P>
<P>The size in bytes of this data structure that contains useful information.</P>
<P><B>    dwButtonMode</B></P>
<P>Defines the mode or general usage class of the button, of type <B>PHONEBUTTONMODE</B>. Values are:</P>
<P>PHONEBUTTONMODE_DUMMY</P>
<P>This value is used to describe a button/lamp position that has no corresponding button, but has only a lamp.</P>
<P>PHONEBUTTONMODE_CALL</P>
<P>The button is assigned to a call appearance.</P>
<P>PHONEBUTTONMODE_FEATURE</P>
<P>The button is assigned to requesting features from the switch, such as hold, conference, transfer, etc.</P>
<P>PHONEBUTTONMODE_KEYPAD</P>
<P>The button is one of the twelve keypad buttons, '0' through '9', '*', and '#'.</P>
<P>PHONEBUTTONMODE_LOCAL</P>
<P>The button is a local function button, such as mute or volume control.</P>
<P>PHONEBUTTONMODE_DISPLAY</P>
<P>The button is a "soft" button associated with the phone's display.  A phone set can have zero or more display buttons. </P>
<P><B>    dwButtonFunction</B></P>
<P>Specifies the function assigned to the button, of type <B>PHONEBUTTONFUNCTION</B> (not listed here).</P>
<P>    <B>dwButtonTextSize<BR>dwButtonTextOffset</B></P>
<P>The size in bytes and the offset in bytes from the beginning of this data structure of the variable sized field containing descriptive text for this button. The format of this information is as specified in the <B>dwStringFormat</B> field of the phone's device capabilities.</P>
<P>    <B>dwDevSpecificSize<BR>dwDevSpecificOffset</B></P>
<P>The size in bytes and the offset in bytes from the beginning of this data structure of the variable sized device specific field. </P>
<P><B>Extensibility    </B>Device specific extensions should use the DevSpecific (<B>dwDevSpecificSize</B> and <B>dwDevSpecificOffset</B>) variable sized area of this data structure.</P>
<P><B>Comments    </B>None.</P>
<P><B>See Also    </B>Functions:  <B>phoneGetButtonInfo, phoneSetButtonInfo</B></P>
<P><B>    </B>Data Types:  <B>PHONEBUTTONMODE, PHONEBUTTONFUNCTION</B></P>
<P>PHONEBUTTONMODE</P>
<P>The <B>PHONEBUTTONMODE</B> bit flag constants describe the button classes.</P>
<P>    PHONEBUTTONMODE_DUMMY    0x00000001<BR>PHONEBUTTONMODE_CALL    0x00000002<BR>PHONEBUTTONMODE_FEATURE    0x00000004<BR>PHONEBUTTONMODE_KEYPAD    0x00000008<BR>PHONEBUTTONMODE_LOCAL    0x00000010<BR>PHONEBUTTONMODE_DISPLAY    0x00000020</P>
<P><B>Values    </B>The <B>PHONEBUTTONMODE</B> constants have the following values:</P>
<P><B>    PhoneButtonMode_dummy</B></P>
<P>This value is used to describe a button/lamp position that has no corresponding button, but has only a lamp.</P>
<P><B>    PhoneButtonMode_call</B></P>
<P>The button is assigned to a call appearance.</P>
<P><B>    PhoneButtonMode_feature</B></P>
<P>The button is assigned to requesting features from the switch, such as hold, conference, transfer, etc.</P>
<P><B>    PhoneButtonMode_keypad</B></P>
<P>The button is one of the twelve keypad buttons, '0' through '9', '*', and '#'.</P>
<P><B>    PhoneButtonMode_local</B></P>
<P>The button is a local function button, such as mute or volume control.</P>
<P><B>    PhoneButtonMode_display</B></P>
<P>The button is a "soft" button associated with the phone's display. A phone set can have zero or more display buttons. </P>
<P><B>Extensibility    </B>The high order 16 bits can be assigned for device specific extensions. The low order 16 bits are reserved.</P>
<P><B>Comments    </B>This enumeration type is used in the <B>PHONECAPS</B> data structure to describe the meaning associated with the phone's buttons.</P>
<P><B>See Also    </B>Functions:  <B>phoneGetDevCaps, phoneGetButtonInfo, phoneSetButtonInfo</B></P>
<P><B>     </B>Messages:  <B>PHONE_BUTTON</B></P>
<P>    Data Types:  <B>PHONECAPS, PHONEBUTTONINFO</B></P>
<P>PHONEBUTTONSTATE</P>
<P>The <B>PHONEBUTTONSTATE</B> bit flag constants describe various button positions.</P>
<P>    PHONEBUTTONSTATE_UP    0x00000001<BR>PHONEBUTTONSTATE_DOWN    0x00000002</P>
<P><B>Values    </B>The <B>PHONEBUTTONSTATE</B> constants have the following values:</P>
<P><B>    PhoneButtonState_up</B></P>
<P>The button is in the "up" state.</P>
<P><B>    PhoneButtonState_down</B></P>
<P>The button is in the "down" state (i.e., pressed down).</P>
<P><B>Extensibility    </B>The high order 16 bits can be assigned for device specific extensions. The low order 16 bits are reserved.</P>
<P><B>Comments    </B>None.</P>
<P><B>See Also    </B>Functions:  <B>phoneGetDevCaps, phoneSetStatusMessages, <BR>    phoneGetStatusMessages</B></P>
<P><B>    </B>Messages:  <B>PHONE_BUTTON</B></P>
<P>    Data Types:  <B>PHONECAPS</B></P>
<P>PHONECAPS</P>
<P>The <B>PHONECAPS</B> structure describes the capabilities of a phone device.</P>
<P>    typedef struct phonecaps_tag {<BR>    DWORD    dwTotalSize;<BR>    DWORD    dwNeededSize;<BR>    DWORD    dwUsedSize;<BR><BR>    DWORD    dwAPIVersion;<BR>    DWORD    dwExtVersion;<BR><BR>    DWORD    dwExtensionID0;<BR>    DWORD    dwExtensionID1;<BR>    DWORD    dwExtensionID2;<BR>    DWORD    dwExtensionID3;<BR><BR>    DWORD    dwProviderInfoSize;<BR>    DWORD    dwProviderInfoOffset;<BR><BR>    DWORD    dwPhoneInfoSize;<BR>    DWORD    dwPhoneInfoOffset;<BR><BR>    DWORD    dwPermanentPhoneID;<BR>    DWORD    dwPhoneNameSize;<BR>    DWORD    dwPhoneNameOffset;<BR>    DWORD    dwStringFormat;    <BR><BR>    DWORD    dwPhoneStates;<BR>    DWORD    dwHookSwitchDevs;<BR>    DWORD    dwHandsetHookSwitchModes;<BR>    DWORD    dwSpeakerHookSwitchModes;<BR>    DWORD    dwHeadsetHookSwitchModes;<BR><BR>    DWORD    dwVolumeFlags;<BR>    DWORD    dwGainFlags;<BR>    DWORD    dwDisplayNumRows;<BR>    DWORD    dwDisplayNumColumns;<BR>    DWORD    dwNumRingModes;<BR>    DWORD    dwNumButtonLamps;<BR><BR>    DWORD    dwButtonModesSize;<BR>    DWORD    dwButtonModesOffset;<BR><BR>    DWORD    dwButtonFunctionsSize;<BR>    DWORD    dwButtonFunctionsOffset;<BR><BR>    DWORD    dwLampModesSize;<BR>    DWORD    dwLampModesOffset;<BR><BR>    DWORD    dwNumSetData;<BR>    DWORD    dwSetDataSize;<BR>    DWORD    dwSetDataOffset;<BR><BR>    DWORD    dwNumGetData<BR>    DWORD    dwGetDataSize;<BR>    DWORD    dwGetDataOffset;<BR>} PHONECAPS, FAR *LPPHONECAPS;</P>
<P><B>Fields    </B>The <B>PHONECAPS</B> structure contains the following fields:</P>
<P><B>    dwTotalSize</B></P>
<P>The total size in bytes allocated to this data structure.</P>
<P><B>    dwNeededSize</B></P>
<P>The size in bytes for this data structure that is needed to hold all the returned information.</P>
<P><B>    dwUsedSize</B></P>
<P>The size in bytes of this data structure that contains useful information.</P>
<P><B>    dwAPIVersion</B></P>
<P>Specifies the API version number under which the Telephony API and the service provider for the line device will be operating. The high-order word is the major version number and the low-order word is the minor version number.</P>
<P><B>    dwExtVersion</B></P>
<P>Specifies the extension version number under which the service provider for the line device will be operating. This version number is keyed to the specified Extension ID. The high-order word is the major version number and the low-order word is the minor version number.</P>
<P><B>    dwExtensionID0<BR>dwExtensionID1<BR>dwExtensionID2<BR>dwExtensionID3</B></P>
<P>These four DWORDs specify the globally unique Extension ID for the service provider for the phone device.</P>
<P><B>    dwProviderInfoSize<BR>dwProviderInfoOffset</B></P>
<P>The size in bytes and the offset in bytes from the beginning of this data structure of the variable sized field containing service provider-specific information.</P>
<P><B>    dwPhoneInfoSize<BR>dwPhoneInfoOffset</B></P>
<P>The size in bytes and the offset in bytes from the beginning of this data structure of the variable sized device field containing phone-specific information.</P>
<P><B>    dwPermanentPhoneID</B></P>
<P>Specifies the permanent DWORD identifier by which the phone device is known in the system's configuration.</P>
<P><B>    dwPhoneNameSize<BR>dwPhoneNameOffset</B></P>
<P>The size in bytes and the offset in bytes from the beginning of this data structure of the variable sized device field containing user configurable name for this phone device. This name can be configured by the user when configuring the phone device's service provider and is provided for the user's convenience.</P>
<P><B>    dwPhoneStates</B></P>
<P>Specifies the state changes for this phone device for which the app can be notified via a <B>PHONE_STATE</B> callback message, of type <B>PHONESTATE</B>. Values are:</P>
<P>PHONESTATE_OTHER</P>
<P>An other phone status information item not listed below has changed.</P>
<P>PHONESTATE_CONNECTED</P>
<P>The connection between the phone device and the API was just made. This happens when the API is first invoked, or when the wire connection the phone to the PC is plugged in with the API active.</P>
<P>PHONESTATE_DISCONNECTED</P>
<P>The connection between the phone device and the API was just broken. This happens when the wire connecting the phone set to the PC is unplugged while the API is active.</P>
<P>PHONESTATE_OWNER</P>
<P>The number of owners for the phone device has changed.</P>
<P>PHONESTATE_MONITORS</P>
<P>The number of monitors for the phone device has changed.</P>
<P>PHONESTATE_DISPLAY</P>
<P>The display of the phone has changed.</P>
<P>PHONESTATE_LAMP</P>
<P>A lamp of the phone has changed.</P>
<P>PHONESTATE_RINGMODE</P>
<P>The ring mode of the phone has changed.</P>
<P>PHONESTATE_RINGVOLUME</P>
<P>The ring volume of the phone has changed.</P>
<P>PHONESTATE_HANDSETHOOKSWITCH</P>
<P>The handset hookswitch state has changed.</P>
<P>PHONESTATE_HANDSETVOLUME</P>
<P>The handset's speaker volume setting has changed.</P>
<P>PHONESTATE_HANDSETGAIN</P>
<P>The handset's mic gain setting has changed.</P>
<P>PHONESTATE_SPEAKERHOOKSWITCH</P>
<P>The speakerphone's hookswitch state has changed.</P>
<P>PHONESTATE_SPEAKERVOLUME</P>
<P>The speakerphone's speaker volume setting has changed.</P>
<P>PHONESTATE_SPEAKERGAIN</P>
<P>The speakerphone's mic gain setting state has changed.</P>
<P>PHONESTATE_HEADSETHOOKSWITCH</P>
<P>The headset's hookswitch state has changed.</P>
<P>PHONESTATE_HEADSETVOLUME</P>
<P>The headset's speaker volume setting has changed.</P>
<P>PHONESTATE_HEADSETGAIN</P>
<P>The headset's mic gain setting has changed.</P>
<P>PHONESTATE_SUSPEND</P>
<P>The app's use of the phone is temporarily suspended.</P>
<P>PHONESTATE_RESUME</P>
<P>The app's use of the phone device is resumed after having been suspended for some time.</P>
<P>PHONESTATE_DEVSPECIFIC</P>
<P>The phone's device specific information has changed.</P>
<P><B>    dwStringFormat</B></P>
<P>Specifies the string format to be used with this phone device, of type <B>STRINGFORMAT</B>. Values are:</P>
<P>        STRINGFORMAT_ASCII</P>
<P>This is ASCII string format using one byte per character.</P>
<P>        STRINGFORMAT_DBCS</P>
<P>This is DBCS string format using two bytes per character.</P>
<P>        STRINGFORMAT_UNICODE</P>
<P>This is unicode string format using two bytes per character.</P>
<P><B>    dwHookSwitchDevs</B></P>
<P>This field specifies the phone's hookswitch devices, of type <B>PHONEHOOKSWITCHDEV</B>. Values are:</P>
<P>PHONEHOOKSWITCHDEV_HANDSET</P>
<P>This is the ubiquitous, hand held ear and mouth piece.</P>
<P>PHONEHOOKSWITCHDEV_SPEAKER</P>
<P>A built-in loudspeaker and microphone. This could also be an externally connected adjunct to the telephone set.</P>
<P>PHONEHOOKSWITCHDEV_HEADSET</P>
<P>This is a headset connected to the phone set.</P>
<P><B>    dwHandsetHookSwitchModes<BR>dwSpeakerHookSwitchModes<BR>dwHeadsetHookSwitchModes</B></P>
<P>This field specifies the phone's hookswitch mode capabilities of the handset, speaker, or headset respectively, of type <B>PHONEHOOKSWITCHMODE</B>. The field is only meaningful if the hookswitch device is listed in <B>dwHookSwitchDevs</B>. Values are:</P>
<P>PHONEHOOKSWITCHMODE_ONHOOK</P>
<P>The device's mic and speaker are both onhook.</P>
<P>PHONEHOOKSWITCHMODE_MIC</P>
<P>The devicer's mic is active, the speaker is mute.</P>
<P>PHONEHOOKSWITCHMODE_SPEAKER</P>
<P>The device's speaker is active, the mic is mute.</P>
<P>PHONEHOOKSWITCHMODE_MICSPEAKER</P>
<P>The device's mic and speaker are both active.</P>
<P><B>    dwVolumeFlags</B></P>
<P>This field specifies the volume setting capabilities of the phone device's speaker components. If the bit in position <B>PHONEHOOKSWITCHDEV</B> is TRUE then the volume of the corresponding hookswitch device's speaker component can be adjusted via <B>phoneSetVolume</B>; otherwise FALSE. </P>
<P><B>    dwGainFlags</B></P>
<P>This field specifies the gain setting capabilities of the phone device's mic components. Of the bit position <B>PHONEHOOKSWITCHDEV</B> is TRUE then the volume of the corresponding hookswitch device's mic component can be adjusted via the <B>phoneSetGain</B>; otherwise FALSE. </P>
<P><B>    dwDisplayNumRows</B></P>
<P>This field specifies the display capabilities of the phone device by describing the number of rows in the phone display. <B>dwDisplayNumRows </B>and<B> dwDisplayNumColumns </B>are both zero for a phone device without a display.</P>
<P><B>    dwDisplayNumColumns</B></P>
<P>This field specifies the display capabilities of the phone device by describing the number of columns in the phone display. <B>dwDisplayNumRows </B>and<B> dwDisplayNumColumns</B> are both zero for a phone device without a display.</P>
<P><B>    dwNumRingModes </B></P>
<P>This field specifies the ring capabilities of the phone device. The phone is able to ring with <B>dwNumRingModes</B> different ring patterns, identified as 1, 2, ... <B>dwNumRingModes</B> - 1. A ring patterns of zero is meant to use silence.</P>
<P><B>    dwNumButtonLamps</B></P>
<P>This field specifies the number of button/lamps on the phone device that are detectable in the API. Button/lamps are identified by their ID. Valid button/lamp IDs range from zero to <B>dwNumButtonLamps</B> - 1. The keypad buttons '0', through '9', '*', and '#' are assigned the IDs 0 through 12.</P>
<P>    <B>dwButtonModesSize<BR>dwButtonModesOffset</B></P>
<P>The size in bytes and the offset from the beginning of this data structure in bytes of the variable sized field containing the button modes of the phone's buttons, of type <B>PHONEBUTTONMODE</B>. The array is indexed by button/lamp ID. Values are:</P>
<P>PHONEBUTTONMODE_DUMMY</P>
<P>This value is used to describe a button/lamp position that has no corresponding button, but has only a lamp. If the phone provides any non-DUMMY buttons, then the <B>PHONE_BUTTON</B> message will be sent to the application if a button is pressed at the phone device. </P>
<P>PHONEBUTTONMODE_CALL</P>
<P>The button is assigned to a call appearance.</P>
<P>PHONEBUTTONMODE_FEATURE</P>
<P>The button is assigned to requesting features from the switch, such as hold, conference, transfer, etc.</P>
<P>PHONEBUTTONMODE_KEYPAD</P>
<P>The button is one of the twelve keypad buttons, '0' through '9', '*', and '#'.</P>
<P>PHONEBUTTONMODE_LOCAL</P>
<P>The button is a local function button, such as mute or volume control.</P>
<P>PHONEBUTTONMODE_DISPLAY</P>
<P>The button is a "soft" button associated with the phone's display.  A phone set can have zero or more display buttons. </P>
<P>    <B>dwButtonFunctionsSize<BR>dwButtonFunctionsOffset</B></P>
<P>The size in bytes and the offset from the beginning of this data structure in bytes of the variable sized field containing the button modes of the phone's buttons, of type <B>PHONEBUTTONFUNCTION</B>. The array is indexed by button/lamp ID.</P>
<P>    <B>dwLampModesSize<BR>dwLampModesOffset</B></P>
<P>The size in bytes and the offset from the beginning of this data structure in bytes of the variable sized field containing the lamp modes of the phone's lamps, of type <B>PHONELAMPMODE</B>. The array is indexed by button/lamp ID. Values are:</P>
<P>PHONELAMPMODE_BROKENFLUTTER</P>
<P>Broken flutter is the superposition of flash and flutter.</P>
<P>PHONELAMPMODE_FLASH</P>
<P>Flash means slow on and off.</P>
<P>PHONELAMPMODE_FLUTTER</P>
<P>Flutter means fast on and off.</P>
<P>PHONELAMPMODE_OFF</P>
<P>The lamp is off.</P>
<P>PHONELAMPMODE_STEADY</P>
<P>The lamp is continuously lit.</P>
<P>PHONELAMPMODE_WINK</P>
<P>The lamp is winking.</P>
<P><B>     dwNumSetData</B></P>
<P>The number of different download areas in the phone device. The different areas are referred to using the data IDs 0, 1, ..., <B>dwNumSetData</B> - 1. If this field is zero, then the phone does not support the download capability.</P>
<P>    <B>dwSetDataSizesSize<BR>dwSetDataSizesOffset</B></P>
<P>The size in bytes and the offset from the beginning of this data structure in bytes of the variable sized field containing the sizes (in bytes) of the phone's download data areas. This is an array with DWORD-sized elements, indexed by data ID.</P>
<P><B>     dwNumGetData</B></P>
<P>The number of different upload areas in the phone device. The different areas are referred to using the data IDs 0, 1, ..., <B>dwNumGetData</B> - 1. If this field is zero, then the phone does not support the upload capability.</P>
<P>    <B>dwGetDataSizesSize<BR>dwGetDataSizesOffset</B></P>
<P>The size in bytes and the offset from the beginning of this data structure in bytes of the variable sized field containing the sizes (in bytes) of the phone's upload data areas. This is an array with DWORD-sized elements, indexed by data ID.</P>
<P><B>Extensibility    </B>Device specific extensions should use the DevSpecific (<B>dwDevSpecificSize</B> and <B>dwDevSpecificOffset</B>) variable sized area of this data structure.</P>
<P><B>Comments    </B>None.</P>
<P><B>See Also    </B>Functions:  <B>phoneGetDevCaps</B></P>
<P><B>    </B>Data types:  <B>PHONEBUTTONMODE, PHONELAMPMODE, <BR>    PHONEHOOKSWITCHDEV</B></P>
<P>PHONEERR</P>
<P>This is the list of error codes that the implementation may return when invoking operations on phone devices.  Consult the individual function descriptions to determine which of these error codes each function may return.</P>
<P>    PHONEERR_ALLOCATED    0x80000001<BR>PHONEERR_BADDEVICEID    0x80000002<BR>PHONEERR_INCOMPATIBLEVERSION    0x80000003<BR>PHONEERR_INUSE    0x80000004<BR>PHONEERR_INVALAPPHANDLE    0x80000005<BR>PHONEERR_INVALBUTTONLAMPID    0x80000006<BR>PHONEERR_INVALBUTTONMODE    0x80000007<BR>PHONEERR_INVALBUTTONSTATE    0x80000008<BR>PHONEERR_INVALDATAID    0x80000009<BR>PHONEERR_INVALEXTVERSION    0x8000000A<BR>PHONEERR_INVALHOOKSWITCHDEV    0x8000000B<BR>PHONEERR_INVALHOOKSWITCHMODE    0x8000000C<BR>PHONEERR_INVALLAMPMODE    0x8000000D<BR>PHONEERR_INVALPARAM    0x8000000E<BR>PHONEERR_INVALPHONEHANDLE    0x8000000F<BR>PHONEERR_INVALPHONESTATE    0x80000010<BR>PHONEERR_INVALPOINTER    0x80000011<BR>PHONEERR_INVALRINGMODE    0x80000012<BR>PHONEERR_NODEVICE    0x80000013<BR>PHONEERR_NODRIVER    0x80000014<BR>PHONEERR_NOMEM    0x80000015<BR>PHONEERR_NOTOWNER    0x80000016<BR>PHONEERR_OPERATIONFAILED    0x80000017<BR>PHONEERR_OPERATIONUNAVAIL    0x80000018<BR>PHONEERR_RESOURCEUNAVAIL    0x80000019<BR>PHONEERR_REQUESTOVERRUN    0x8000001A</P>
<P><B>Extensibility    </B>Values 0x90000000 through 0xFFFFFFFF are available for device specific extensions. Values 0x80000000 through 0x8FFFFFFF are reserved, while values 0x0000 through 0x7FFFFFFF are used as request IDs.</P>
<P><B>Comments    </B>If an application gets an error return that it does not specifically handle (e.g., and error defined by a device specific extension), then it should treat the error as a PHONEERR_OPERATIONFAILED (for unspecified reason).</P>
<P><B>See Also    </B>Messages:  <B>PHONE_REPLY</B></P>
<P>PHONEHOOKSWITCHDEV</P>
<P>The <B>PHONEHOOKSWITCHDEV</B> bit flag constants describe various audio I/O devices each with its own hookswitch controllable from the PC.</P>
<P>    PHONEHOOKSWITCHDEV_HANDSET    0x00000001<BR>PHONEHOOKSWITCHDEV_SPEAKER    0x00000002<BR>PHONEHOOKSWITCHDEV_HEADSET    0x00000004</P>
<P><B>Values    </B>The <B>PHONEHOOKSWITCHDEV</B> constants have the following values:</P>
<P><B>    PhoneHookSwitchDev_handset</B></P>
<P>This is the ubiquitous, hand held ear and mouth piece.</P>
<P><B>    PhoneHookSwitchDev_speaker</B></P>
<P>This is a built-in loudspeaker and microphone. This could also be an externally connected adjunct speaker to the telephone set.</P>
<P><B>    PhoneHookSwitchDev_headset</B></P>
<P>This is a headset connected to the phone set.</P>
<P><B>Extensibility    </B>The high order 16 bits can be assigned for device specific extensions. The low order 16 bits are reserved.</P>
<P><B>Comments    </B>These constants are used in the <B>PHONECAPS</B> data structure to indicate the hookswitch device capabilities of a phone device. The <B>PHONESTATUS</B> structure reports the state of the phone's hookswitch devices. The function <B>phoneSetHookSwitch</B> and <B>phoneGetHookSwitch</B> use it as a parameter to select the phone's I/O device.</P>
<P><B>See Also    </B>Functions:  <B>phoneSetHookSwitch, phoneGetHookSwitch, phoneGetDevCaps, <BR>    phoneGetStatus</B></P>
<P><B>    </B>Data Types:  <B>PHONECAPS, PHONESTATUS</B></P>
<P>PHONEHOOKSWITCHMODE</P>
<P>The <B>PHONEHOOKSWITCHMODE</B> bit flag constants describe the mic and speaker components of a hookswitch device.</P>
<P>    PHONEHOOKSWITCHMODE_ONHOOK    0x00000001<BR>PHONEHOOKSWITCHMODE_MIC    0x00000002<BR>PHONEHOOKSWITCHMODE_SPEAKER    0x00000004<BR>PHONEHOOKSWITCHMODE_MICSPEAKER    0x00000008<BR>PHONEHOOKSWITCHMODE_UNKNOWN    0x00000010</P>
<P><B>Values    </B>The <B>PHONEHOOKSWITCHMODE</B> constants have the following values:</P>
<P><B>    PhoneHookSwitchMode_onHook</B></P>
<P>The device's mic and speaker are both onhook.</P>
<P><B>    PhoneHookSwitchMode_mic</B></P>
<P>The devicer's mic is active, the speaker is mute.</P>
<P><B>    PhoneHookSwitchMode_speaker</B></P>
<P>The device's speaker is active, the mic is mute.</P>
<P><B>    PhoneHookSwitchMode_micSpeaker</B></P>
<P>The device's mic and speaker are both active.</P>
<P><B>    PhoneHookSwitchMode_unknown</B></P>
<P>The device's hookswitch mode is currenly unknown.</P>
<P><B>Extensibility    </B>The high order 16 bits can be assigned for device specific extensions. The low order 16 bits are reserved.</P>
<P><B>Comments    </B>These constants are used to provide individual level of control over the mic and speaker components of a phone device. </P>
<P><B>See Also    </B>Functions:  <B>phoneSetHookSwitch, phoneGetHookSwitch, phoneGetDevCaps, <BR>    phoneGetStatus</B></P>
<P><B>    </B>Data structures:  <B>PHONECAPS, PHONESTATUS</B></P>
<P>PHONELAMPMODE</P>
<P>The <B>PHONELAMPMODE</B> bit flag constants describe various ways in which a phone's lamp can be lit.</P>
<P>    PHONELAMPMODE_DUMMY    0x00000001<BR>PHONELAMPMODE_OFF    0x00000002<BR>PHONELAMPMODE_STEADY    0x00000004<BR>PHONELAMPMODE_WINK    0x00000008<BR>PHONELAMPMODE_FLASH    0x00000010<BR>PHONELAMPMODE_FLUTTER    0x00000020<BR>PHONELAMPMODE_BROKENFLUTTER    0x00000040<BR>PHONELAMPMODE_UNKNOWN    0x00000080</P>
<P><B>Values    </B>The <B>PHONELAMPMODE</B> constants have the following values:</P>
<P><B>    PhoneLampMode_dummy</B></P>
<P>This value is used to describe a button/lamp position that has no corresponding lamp.</P>
<P><B>    PhoneLampMode_off</B></P>
<P>The lamp is off.</P>
<P><B>    PhoneLampMode_steady</B></P>
<P>Steady means the lamp is continuously lit.</P>
<P><B>    PhoneLampMode_wink</B></P>
<P>Wink means normal rate on and off.</P>
<P><B>    PhoneLampMode_flash</B></P>
<P>Flash means slow on and off.</P>
<P><B>    PhoneLampMode_flutter</B></P>
<P>Flutter means fast on and off.</P>
<P><B>    PhoneLampMode_brokenflutter</B></P>
<P>Broken flutter is the superposition of flash and flutter.</P>
<P><B>    PhoneLampMode_unknown</B></P>
<P>The lamp mode is currently unknown.</P>
<P><B>Extensibility    </B>The high order 16 bits can be assigned for device specific extensions. The low order 16 bits are reserved.</P>
<P><B>Comments    </B>Where the exact on and off cadences may differ across phone sets from different vendors, mapping of actual lamp lighting patterns for most phones onto the values listed above should be straightforward.</P>
<P><B>See Also    </B>Functions:  <B>phoneSetLamp, phoneGetLamp, phoneGetDevCaps, <BR>    phoneGetStatus</B></P>
<P><B>    </B>Data Types:  <B>PHONECAPS, PHONESTATUS</B></P>
<P>PHONEPRIVILEGE</P>
<P>The <B>PHONEPRIVILEGE</B> bit flag constants describe the various ways in which a phone device can be opened.</P>
<P>    PHONEPRIVILEGE_MONITOR    0x00000001<BR>PHONEPRIVILEGE_OWNER    0x00000002</P>
<P><B>Values    </B>The <B>PHONEPRIVILEGE</B> constants have the following values.</P>
<P><B>    PhonePrivilege_monitor</B></P>
<P>An application that opens a phone device with the <I>monitor</I> privilege is informed about events and state changes occurring on the phone. The application cannot invoke any operations on the phone device that would change its state; so only status operations can be invoked. Multiple applications can monitor a phone device at any given time.</P>
<P><B>    PhonePrivilege_owner</B></P>
<P>An application that opens a phone device with the <I>owner</I> privilege is allowed to change the state of the lamps, ringer, display, hook switch, and data blocks of the phone. Opening a phone device in <I>owner</I> mode also provides monitoring of the phone device. One one application is allowed to be the owner of a phone device at any given time. </P>
<P><B>Extensibility    </B>The high order 16 bits can be assigned for device specific extensions. The low order 16 bits are reserved.</P>
<P><B>Comments    </B>None.</P>
<P><B>See Also    </B>Functions:  <B>phoneOpen, phoneGetDevCaps, phoneGetStatus</B></P>
<P><B>    </B>Data Types:  <B>PHONECAPS, PHONESTATUS</B></P>
<P>PHONESTATE</P>
<P>The <B>PHONESTATE</B> bit flag constants describe various status items for a phone device.</P>
<P>    PHONESTATE_OTHER    0x00000001<BR>PHONESTATE_CONNECTED    0x00000002<BR>PHONESTATE_DISCONNECTED    0x00000004<BR>PHONESTATE_OWNER    0x00000008<BR>PHONESTATE_MONITORS    0x00000010<BR>PHONESTATE_DISPLAY    0x00000020<BR>PHONESTATE_LAMP    0x00000040<BR>PHONESTATE_RINGMODE    0x00000080<BR>PHONESTATE_RINGVOLUME    0x00000100<BR>PHONESTATE_HANDSETHOOKSWITCH    0x00000200<BR>PHONESTATE_HANDSETVOLUME    0x00000400<BR>PHONESTATE_HANDSETGAIN    0x00000800<BR>PHONESTATE_SPEAKERHOOKSWITCH    0x00001000<BR>PHONESTATE_SPEAKERVOLUME    0x00002000<BR>PHONESTATE_SPEAKERGAIN    0x00004000<BR>PHONESTATE_HEADSETHOOKSWITCH    0x00008000<BR>PHONESTATE_HEADSETVOLUME    0x00010000<BR>PHONESTATE_HEADSETGAIN    0x00020000<BR>PHONESTATE_SUSPEND    0x00040000<BR>PHONESTATE_RESUME    0x00080000<BR>PHONESTATE_DEVSPECIFIC    0x00100000</P>
<P><B>Values    </B>The <B>PHONESTATE</B> constants have the following values: </P>
<P><B>    PhoneState_other</B></P>
<P>A non-specified phone status information item has changed.</P>
<P><B>    PhoneState_connected</B></P>
<P>The connection between the phone device and the API was just made. This happens when the API is first invoked, or when the wire connection the phone to the PC is plugged in with the API active.</P>
<P><B>    PhoneState_disconnected</B></P>
<P>The connection between the phone device and the API was just broken. This happens when the wire connecting the phone set to the PC is unplugged while the API is active.</P>
<P><B>    PhoneState_owner</B></P>
<P>The number of owners for the phone device.</P>
<P><B>    PhoneState_monitors</B></P>
<P>The number of monitors for the phone device.</P>
<P><B>    PhoneState_display</B></P>
<P>The display of the phone has changed.</P>
<P><B>    PhoneState_lamp</B></P>
<P>A lamp of the phone has changed.</P>
<P><B>    PhoneState_ringmode</B></P>
<P>The ring mode of the phone has changed.</P>
<P><B>    PhoneState_ringvolume</B></P>
<P>The ring volume of the phone has changed.</P>
<P><B>    PhoneState_handsetHookSwitch</B></P>
<P>The handset hookswitch state has changed.</P>
<P><B>    PhoneState_handsetVolume</B></P>
<P>The handset's speaker volume setting has changed.</P>
<P><B>    PhoneState_handsetGain</B></P>
<P>The handset's mic gain setting has changed.</P>
<P><B>    PhoneState_speakerHookSwitch</B></P>
<P>The speakerphone's hookswitch state has changed.</P>
<P><B>    PhoneState_speakerVolume</B></P>
<P>The speakerphone's speaker volume setting has changed.</P>
<P><B>    PhoneState_speakerGain</B></P>
<P>The speakerphone's mic gain setting state has changed.</P>
<P><B>    PhoneState_headsetHookSwitch</B></P>
<P>The headset's hookswitch state has changed.</P>
<P><B>    PhoneState_headsetVolume</B></P>
<P>The headset's speaker volume setting has changed.</P>
<P><B>    PhoneState_headsetGain</B></P>
<P>The headset's mic gain setting has changed.</P>
<P><B>    PhoneState_suspend</B></P>
<P>The app's use of the phone is temporarily suspended.</P>
<P><B>    PhoneState_resume</B></P>
<P>The app's use of the phone device is resumed after having been suspended for some time.</P>
<P><B>    PhoneState_devspecific</B></P>
<P>The phone's device specific information has changed.</P>
<P><B>Extensibility    </B>The high order 16 bits can be assigned for device specific extensions. The low order 16 bits are reserved.</P>
<P><B>Comments    </B>None.</P>
<P><B>See Also    </B>Functions:  <B>phoneSetStatusMessages, phoneGetStatusMessages</B></P>
<P><B>    </B>Messages:  <B>PHONE_STATE</B></P>
<P>    Data Types:  <B>PHONESTATUS</B></P>
<P>PHONESTATUS</P>
<P>The <B>PHONESTATUS</B> structure describes the current status of a phone device.</P>
<P>    typedef struct phonestatus_tag {<BR>    DWORD    dwTotalSize;<BR>    DWORD    dwNeededSize;<BR>    DWORD    dwUsedSize;<BR><BR>    DWORD    dwStatusFlags; <BR>    DWORD    dwNumOwners;<BR>    DWORD    dwNumMonitors;<BR>    DWORD    dwRingMode;<BR>    DWORD    dwRingVolume;<BR><BR>    DWORD    dwHandsetHookSwitchMode;<BR>    DWORD    dwHandsetVolume;<BR>    DWORD    dwHandsetGain;<BR><BR>    DWORD    dwSpeakerHookSwitchMode;<BR>    DWORD    dwSpeakerVolume;<BR>    DWORD    dwSpeakerGain;<BR><BR>    DWORD    dwHeadsetHookSwitchMode;<BR>    DWORD    dwHeadsetVolume;<BR>    DWORD    dwHeadsetGain;<BR><BR>    DWORD    dwDisplaySize;<BR>    DWORD    dwDisplayOffset;<BR><BR>    DWORD    dwLampModesSize;<BR>    DWORD    dwLampModesOffset;<BR><BR>    DWORD    dwOwnerNameSize;<BR>    DWORD    dwOwnerNameOffset;<BR><BR>    DWORD    dwDevSpecificSize;<BR>    DWORD    dwDevSpecificOffset;<BR>} PHONESTATUS, FAR *LPPHONESTATUS;</P>
<P><B>Fields    </B>The <B>PHONESTATUS</B> structure has the following fields:</P>
<P><B>    dwTotalSize</B></P>
<P>The total size in bytes allocated to this data structure.</P>
<P><B>    dwNeededSize</B></P>
<P>The size in bytes for this data structure that is needed to hold all the returned information.</P>
<P><B>    dwUsedSize</B></P>
<P>The size in bytes of this data structure that contains useful information.</P>
<P><B>    dwStatusFlags</B></P>
<P>This field provides a collection of status flags for this phone device, of type <B>PHONESTATUSFLAGS</B>. Values are:</P>
<P>PHONESTATUSFLAGS_CONNECTED</P>
<P>Specifies whether the phone is currently connected to the API. TRUE if connected, FALSE otherwise.</P>
<P>PHONESTATUSFLAGS_SUSPENDED</P>
<P>Specifies whether the API's manipulation of the phone device is suspended or not. TRUE is suspended, FALSE otherwise. An app's use of a phone device may be temporarily suspended when the switch wants to manipulate the phone in a way that cannot tolerate interference from the application. </P>
<P><B>    dwRingMode</B></P>
<P>Specifies the current ring mode of a phone device.</P>
<P><B>    dwRingVolume</B></P>
<P>Specifies the current ring volume of a phone device. This is a value between 0x00000000 which is silence and 0x0000FFFF which is maximum volume.</P>
<P>    <B>dwHandsetHookSwitchMode</B></P>
<P>Specifies the current hook switch mode of the phone's handset, of type <B>PHONEHOOKSWITCHMODE</B>. Values are:</P>
<P>PHONEHOOKSWITCHMODE_ONHOOK</P>
<P>The device's mic and speaker are both onhook.</P>
<P>PHONEHOOKSWITCHMODE_MIC</P>
<P>The devicer's mic is active, the speaker is mute.</P>
<P>PHONEHOOKSWITCHMODE_SPEAKER</P>
<P>The device's speaker is active, the mic is mute.</P>
<P>PHONEHOOKSWITCHMODE_MICSPEAKER</P>
<P>The device's mic and speaker are both active.</P>
<P>    <B>dwHandsetVolume</B></P>
<P>Specifies the current speaker volume of the phone's handset device. This is a value between 0x00000000 which is silence and 0x0000FFFF which is maximum volume.</P>
<P><B>    dwHandsetGain</B></P>
<P>Specifies the current mic gain of the phone's handset device. This is a value between 0x00000000 which is silence and 0x0000FFFF which is maximum gain.</P>
<P>    <B>dwSpeakerHookSwitchMode</B></P>
<P>Specifies the current hook switch mode of the phone's speakerphone, of type <B>PHONEHOOKSWITCHMODE</B>. Values are:</P>
<P>PHONEHOOKSWITCHMODE_ONHOOK</P>
<P>The device's mic and speaker are both onhook.</P>
<P>PHONEHOOKSWITCHMODE_MIC</P>
<P>The devicer's mic is active, the speaker is mute.</P>
<P>PHONEHOOKSWITCHMODE_SPEAKER</P>
<P>The device's speaker is active, the mic is mute.</P>
<P>PHONEHOOKSWITCHMODE_MICSPEAKER</P>
<P>The device's mic and speaker are both active.</P>
<P>    <B>dwSpeakerVolume</B></P>
<P>Specifies the current speaker volume of the phone's speaker device. This is a value between 0x00000000 which is silence and 0x0000FFFF which is maximum volume.</P>
<P><B>    dwSpeakerGain</B></P>
<P>Specifies the current mic gain of the phone's speaker device. This is a value between 0x00000000 which is silence and 0x0000FFFF which is maximum gain.</P>
<P>    <B>dwHeadsetHookSwitchMode</B></P>
<P>Specifies the current hook switch mode of the phone's headset, of type <B>PHONEHOOKSWITCHMODE</B>. Values are:</P>
<P>PHONEHOOKSWITCHMODE_ONHOOK</P>
<P>The device's mic and speaker are both onhook.</P>
<P>PHONEHOOKSWITCHMODE_MIC</P>
<P>The devicer's mic is active, the speaker is mute.</P>
<P>PHONEHOOKSWITCHMODE_SPEAKER</P>
<P>The device's speaker is active, the mic is mute.</P>
<P>PHONEHOOKSWITCHMODE_MICSPEAKER</P>
<P>The device's mic and speaker are both active.</P>
<P>    <B>dwHeadsetVolume</B></P>
<P>Specifies the current speaker volume of the phone's headset device. This is a value between 0x00000000 which is silence and 0x0000FFFF which is maximum volume.</P>
<P><B>    dwHeadsetGain</B></P>
<P>Specifies the current mic gain of the phone's headset device. This is a value between 0x00000000 which is silence and 0x0000FFFF which is maximum gain.</P>
<P>    <B>dwDisplaySize<BR>dwDisplayOffset</B></P>
<P>The size in bytes and the offset in bytes from the beginning of this data structure of the variable sized field containing the phone's current display information.</P>
<P>    <B>dwLampModesSize<BR>dwLampModesOffset</B></P>
<P>The size in bytes and the offset in bytes from the beginning of this data structure of the variable sized field containing the phone's current lamp modes.</P>
<P>    <B>dwOwnerNameSize<BR>dwOwnerNameOffset</B></P>
<P>The size in bytes and the offset in bytes from the beginning of this data structure of the variable sized field containing the name of the application that is the the current owner of the phone device. The name is the application name provided by the application when it invoked <B>phoneInitialize</B>. If no application name was supplied, then the application's module name is used instead.  If the phone currently has no owner, then <B>dwOwnerNameSize</B> is zero.</P>
<P>    <B>dwDevSpecificSize<BR>dwDevSpecificOffset</B></P>
<P>The size in bytes and the offset in bytes from the beginning of this data structure of the variable sized device specific field. </P>
<P><B>Extensibility    </B>Device specific extensions should use the DevSpecific (<B>dwDevSpecificSize</B> and <B>dwDevSpecificOffset</B>) variable sized area of this data structure.</P>
<P><B>Comments    </B>None.</P>
<P><B>See Also    </B>Functions:  <B>phoneGetStatus</B>    </P>
<P>    Data types:  <B>PHONELAMPMODE,</B> <B>PHONEHOOKSWITCHDEV, <BR>    PHONEHOOKSWICTHMODE, PHONESTATUSFLAGS, <BR>    PHONESTATE</B></P>
<P>PHONESTATUSFLAGS</P>
<P>The <B>PHONESTATUSFLAGS</B> bit flag constants describe a variety of phone device status information.</P>
<P>    PHONESTATUSFLAGS_CONNECTED    0x00000001<BR>PHONESTATUSFLAGS_SUSPENDED    0x00000002</P>
<P><B>Values    </B>The <B>PHONESTATUSFLAGS</B> constants have the following values.</P>
<P><B>    PhoneStatusFlags_connected</B></P>
<P>Specifies whether the phone is currently connected to the API. TRUE if connected, FALSE otherwise.</P>
<P><B>    PhoneStatusFlags_suspended</B></P>
<P>Specifies whether the API's manipulation of the phone device is suspended or not. TRUE is suspended, FALSE otherwise. An app's use of a phone device may be temporarily suspended when the switch wants to manipulate the phone in a way that cannot tolerate interference from the application. </P>
<P><B>Extensibility    </B>The high order 16 bits can be assigned for device specific extensions. The low order 16 bits are reserved.</P>
<P><B>Comments    </B>None.</P>
<P><B>See Also    </B>Data Types:  <B>PHONESTATUS</B></P>
<P>STRINGFORMAT</P>
<P>The <B>STRINGFORMAT</B> enumeration constants describe different string formats.</P>
<P>    STRINGFORMAT_ASCII    0x00000001<BR>STRINGFORMAT_DBCS    0x00000002<BR>STRINGFORMAT_UNICODE    0x00000003<BR>STRINGFORMAT_BINARY    0x00000004</P>
<P><B>Values    </B>The <B>STRINGFORMAT</B> constants have the following values.</P>
<P><B>    StringFormat_ASCII</B></P>
<P>Specifies standard ASCII character format using one byte per character.</P>
<P><B>    StringFormat_DBCS</B></P>
<P>Specifies standard DBCS character format using two bytes per character.</P>
<P><B>    StringFormat_unicode</B></P>
<P>Specifies standard Unicode character format using two bytes per character.</P>
<P><B>    StringFormat_binary</B></P>
<P>This is an array of unsigned characters; could be used for numeric values.</P>
<P><B>Extensibility    </B>Values in the range 0x80000000 to 0xFFFFFFFF can be assigned for device specific extensions; values in the range 0x00000000 to 0x7FFFFFFF are reserved.</P>
<P><B>Comments    </B>None.</P>
<P><B>See Also    </B>Data Types:  <B>VARSTRING</B></P>
<P>VARSTRING</P>
<P>The <B>VARSTRING</B> structure is used for returning variable sized strings. It is used both by the line device class and the phone device class.</P>
<P>    typedef struct varstring_tag {<BR>    DWORD    dwTotalSize;<BR>    DWORD    dwNeededSize;<BR>    DWORD    dwUsedSize;<BR><BR>    DWORD    dwStringFormat;<BR>    DWORD    dwStringSize;<BR>    DWORD    dwStringOffset;<BR>} VARSTRING, FAR *LPVARSTRING;</P>
<P><B>Fields    </B>The <B>VARSTRING</B> structure contains the following fields:</P>
<P><B>    dwTotalSize</B></P>
<P>The total size in bytes allocated to this data structure.</P>
<P><B>    dwNeededSize</B></P>
<P>The size in bytes for this data structure that is needed to hold all the returned information.</P>
<P><B>    dwUsedSize</B></P>
<P>The size in bytes of this data structure that contains useful information.</P>
<P>The size in bytes and the offset in bytes from the beginning of the containing data structure of a variable sized field. </P>
<P><B>    dwStringFormat</B></P>
<P>Specifies the format of the string, of type <B>STRINGFORMAT</B>. Values are:</P>
<P>        STRINGFORMAT_ASCII</P>
<P>This is ASCII string format using one byte per character.</P>
<P>        STRINGFORMAT_DBCS</P>
<P>This is DBCS string format using two bytes per character.</P>
<P>        STRINGFORMAT_UNICODE</P>
<P>This is unicode string format using two bytes per character.</P>
<P>        STRINGFORMAT_BINARY</P>
<P>This is an array of unsigned characters; could be used for numeric values.</P>
<P><B>    dwStringSize</B><BR><B>dwStringOffset</B></P>
<P>The size in bytes and the offset in bytes from the beginning of this data structure of the variable sized device field containing the string information.</P>
<P><B>Extensibility    </B>None.</P>
<P><B>Comments    </B>None.</P>
<P><B>See Also    </B>Data Types:  <B>STRINGFORMAT</B></P>
<P></P>
<P><B>This page is intentionally left blank.</B></P>
<P></P>
<P></P>
 </P>
</P></BODY></HTML>

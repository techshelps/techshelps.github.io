<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>tapiRequestMediaCall</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
</OBJECT></FORM>
<H3>tapiRequestMediaCall</H3><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="334pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> tapiRequestMediaCall</B>(hWnd, wRequestID, lpszDeviceClass, lpDeviceID, dwSize, dwSecure, lpszDestAddress, lpszAppName, lpszCalledParty, lpszComment)<BR>This function allows an application to establish a call that is to carry a media stream that corresponds to the specified device ID of the specified device class. An application would call this operation if it wants a call manager application to establish the call on its behalf. The application is informed about the status of the call via the <B>TAPI_REPLY </B>Windows message.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HWND    <I>hWnd<BR></I>Specifies the application's window handle. This is the window to which <B>TAPI_REPLY</B> messages are sent. <I>hWnd</I>, together with <I>wRequestID</I> also identify the application's    call.<BR><BR>WORD    wRequestID<BR>Specifies an application-selected ID that identifies this make call request to the application. This request ID is passed in the <I>wParam</I> field of the <B>TAPI_REPLY</B> message to identify the call to which the message applies. The app must use this request ID when requesting that the call be dropped via <B>tapiRequestDrop</B>.<BR><BR>LPCSTR    <B>const</B> <I>lpszDeviceClass<BR></I>Specifies a far pointer to a memory location to an ASCII NULL-terminated string where the name of the device class is stored that identifies the media type for the requested call. The device class is really an API identifier (such as "wave" for the the multi-media wave API). The complete list of device classes is to be defined. The maximum length is TAPIMAXDEVICECLASSSIZE bytes, which includes the NULL terminator. Longer strings are truncated.<BR><BR>LPCSTR    <B>const</B> <I>lpDeviceID<BR></I>Specifies a far pointer to a memory location where the name of the ID for the media device is stored that corresponds to the media stream of the requested call. This device is of the device class specified as <I>lpszDeviceClass</I>. The actual length of the device ID string is <I>dwSize</I> bytes. The maximum length is TAPIMAXDEVICEIDSIZE bytes. Longer strings are truncated.<BR><BR>DWORD    <I>dwSize<BR></I>Specifies the size in bytes of the device ID string pointed to by <I>lpDeviceID</I>. <I>dwSize</I> must not exceed TAPIMAXDEVICEIDSIZE.<BR><BR>DWORD    <I>dwSecure<BR></I>Specifies whether or not the requested call is to be established as secure. If zero, the call is not required to be secure and features such as call waiting are not disabled and allowed to interfere with the media stream on the call. If one, the call is required to be secure, if possible.<BR><BR>LPCSTR    <B>const</B> <I>lpszDestAddress<BR></I>Specifies a far pointer to a memory location where the NULL-terminated destination address of the call request is located. The address can simply be a phone number. It can also use the canonical address format or the dialable address format defined in the Overview chapter. Validity of the specified address is not checked by this operation. The maximum length of the address is TAPIMAXDESTADDRESSSIZE characters, which includes the NULL terminator. Longer strings are truncated.<BR><BR>LPCSTR    <B>const</B> <I>lpszAppName<BR></I>Specifies a far pointer to a memory location where the ASCII NULL-terminated user-friendly application name of the call request is located. This pointer may be left NULL if the application does not wish to supply an application name. The maximum length of the address is TAPIMAXAPPNAMESIZE characters, which includes the NULL terminator. Longer strings are truncated.<BR><BR>LPCSTR    <B>const</B> <I>lpszCalledParty<BR></I>Specifies a far pointer to a memory location where the ASCII NULL-terminated user-friendly name for the called party of the call request is located. This pointer may be left NULL if the application does not wish to supply an application name. In that case, the application's module name is used instead. The maximum length of the address is TAPIMAXCALLEDPARTYSIZE characters, which includes the NULL terminator. Longer strings are truncated.<BR><BR>LPCSTR    <B>const</B> <I>lpszComment<BR></I>Specifies a far pointer to a memory location where the ASCII NULL-terminated comment about the call is located. This pointer may be left NULL if the application does not which to supply a comment.  The maximum length of the address is TAPIMAXCOMMENTSIZE characters, which includes the NULL terminator. Longer strings are truncated.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the request was accepted or a negative error number if an error has occurred. Possible error returns are:<BR>TAPIERR_INVALWINDOWHANDLE<BR>The specified window handle is invalid.<BR><BR>TAPIERR_NOREQUESTRECIPIENT<BR>No recipient application is available to handle the request. The user should start the application and try again.<BR><BR>TAPIERR_REQUESTQUEUEFULL<BR>A recipient application is active, but the request queue is full. The app can try again  later.<BR><BR>TAPIERR_INVALDESTADDRESS<BR>The far pointer to the destination address is NULL.<BR><BR>TAPIERR_INVALDEVICECLASS<BR>The far pointer to the device class is NULL.<BR><BR>TAPIERR_INVALDEVICEID<BR>The far pointer to the device ID is NULL.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">An telephony-enabled application can request that a media call be placed on its behalf by invoking <B>tapiRequestMediaCall</B>. This request is forwarded to the user's media call control application which establishes the call on behalf of the original application so the media stream identified by the application will become active. A default call control application is provided as part of Windows Telephony. The user can replace this with a call control application of his choice. <BR>The media device that the app will use to access the media is identified by its device ID and its corresponding device class. For example, for an audio wave device this may be a small integer device ID and the "wave" device class indication. The format of a device ID is device class dependent. The call manager will attempt to establish a call to carry the media stream that corresponds with the specified media device (if it exists).<BR>Note that, depending on the specific media device, it may be necessary for the application to preconfigure the device prior to requesting the establishment of the media call. This will normally require opening the device through the media stream API prior to issuance of the <B>tapiRequestMakeCall</B>.<BR>Invoking <B>tapiRequestMakeCall</B> when no call control app is running will return the TAPIERR_REQUESTDENIED error indication. String parameters whose length exceeds the allowed maximum are automatically truncated.</P></TD></TR><TR><TD VALIGN="TOP">See Also</P></TD><TD VALIGN="TOP">Functions: tapiRequestDrop<BR>Messages: TAPI_REQUEST</P></TD></TR></TBODY></TABLE>
<BR></P> </P></BODY></HTML>

<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Call States</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
</OBJECT></FORM>
<H3>Call States</H3>  </P>
<P>Most functions on calls only make sense while the call is in one of certain call states. This call state is checked, and the function returns an error if the call is not in one these states. The effect of the successful execution of a request may be some typical call state transitions. Applications are notified about call state changes via call state messages. These messages report to the application what call state the application has just entered. Since unsolicited events may occur to calls (e.g., the other party disconnects), the application should let itself be driven by these call state messages rather than to assume the requests will always result in certain fixed call state transitions. This model also provides maximum flexibility across different telephony environments, and therefore maximum portability. If a request results in a error, there is no call state change as a result of the error.</P>
<P><A NAME="PT2"></A>lineAccept</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="334pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG <B>lineAccept</B>(hCall, lpsUserUserInfo, dwSize)<BR>This function accepts the specified offered call. It may optionally send the specified user-to-user information to the calling party.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HCALL    hCall    Specifies a handle to the call to be accepted. The app must be an owner of the call.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LPCSTR    <B>const </B>lpsUserUserInfo<BR>Specifies a far pointer to a string containing user-to-user information to be sent to the remote party as part of the call accept. This pointer can be left NULL if no user-to-user information is to be sent. User-to-user information is only sent if supported by the underlying network (see <B>LINEDEVCAPS</B>).</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    dwSize<BR>Specifies the size in bytes of the user-to-user information in lpsUserUserInfo. If lpsUserUserInfo is NULL, no user-to-user information is sent to the calling party and dwSize is ignored.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><B>LINEERR_INVALCALLHANDLE<BR></B>The specified call handle is invalid.<BR><B>LINEERR_INVALCALLSTATE<BR></B>The specified call is not in a valid state for the requested operation.<BR><B>LINEERR_NOTOWNER<BR></B>The app does not have owner privileges to the specified call.<BR><B>LINEERR_INVALPOINTER<BR></B>The specified pointer parameter is invalid.<BR><B>LINEERR_RESOURCEUNAVAIL<BR></B>The specified operation cannot be completed because of resource overcommitment.<BR><B>LINEERR_OPERATIONUNAVAIL<BR></B>The specified operation is not available.<BR><B>LINEERR_OPERATIONFAILED<BR></B>The specified operation failed for unspecified reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP">hCall    offering</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP"><B>lineAccept</B> is used in telephony environments (like ISDN) that allow alerting associated with incoming calls to be separate from the initial offering of the call. When a call comes in, the call is first offered. For some small time duration, the application may have the option to reject the call using <B>lineDrop</B>, redirect the call to another station using <B>lineRedirect</B>, answer the call using <B>lineAnswer</B>, or accept the call using <B>lineAccept</B>. After a call has been successfully accepted, alerting at both the called and calling device will begin. After a call has been accepted by an application, the call state will typically transition to the accepted state.<BR><BR>To the application, alerting is reported via the <B>LINE_LINEDEVSTATE</B> message with the ringing indication.<BR><BR><B>lineAccept</B> may also be supported by non-ISDN service providers. The call state transition to the accepted state can be used by other applications as an indication that another application has claimed responsibility for the call and has presented the call to the user. <BR><BR>The app has the option to send user-to-user information at the time of the accept. Even if user-to-user information can be sent, often no guarantees are made that the network will deliver this information to the calling party. An app should consult a line's device capabilities to determine whether or not call accept is available.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineDrop, lineRedirect, lineAnswer<BR></B>Messages:  <B>LINE_CALLSTATE</B>,<B> LINE_LINEDEVSTATE</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT3"></A>lineAddToConference</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="78pt" VALIGN="TOP"><COL WIDTH="343pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineAddToConference</B>(<I>hConfCall, hAddCall</I>)<BR>This function adds the call specified by <I>hAddCall</I>, to the conference call specified by <I>hConfCall</I>.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HCALL    <I>hConfCall<BR></I>Specifies a handle to the conference call. The app must be an owner of this call.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">HCALL    <I>hAddCall<BR></I>Specifies a handle to the call to be added to the conference call. The app must be an owner of this call.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><B>LINEERR_INVALCONFCALLHANDLE<BR></B>The specified call handle for the conference call is invalid or is not a handle for a conference call.<BR><B>LINEERR_INVALCALLHANDLE<BR></B>The specified call handle for the added call is invalid.<BR><B>LINEERR_NOTOWNER<BR></B>The app does not have owner privileges to the specified call(s).<BR><B>LINEERR_INVALCALLSTATE<BR></B>One or both of the specified calls are not in a valid state for the requested operation.<BR><B>LINEERR_CONFERENCEFULL<BR></B>The maximum number of parties for a conference has been reached.<BR><B>LINEERR_OPERATIONUNAVAIL<BR></B>The specified operation is not available.<BR><B>LINEERR_OPERATIONFAILED<BR></B>The specified operation failed for unspecified reason.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP"><I>hConfCall    </I>onHoldPendingConference, onHold<BR><I>hAddCall    </I>connected, onHold</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">Note that the call handle of the added party remains valid after adding the call to a conference; its state will typically change to <I>conferenced </I>while the state of the conference call will typically become <I>connected. </I>Using <B>lineGetCalls</B>, it is possible to obtain a handle for a conference call by providing the handle to any participating call, or to obtain handles to the participating calls given the conference call handle. The handle to an individual participating call can be used later to remove that party from the conference call using <B>lineRemoveFromConference</B>. <BR><BR>The call states of the calls participating in a conference are not independent. For example, when dropping a conference call, all participating calls may automatically become <I>idle</I>. An application should consult the line's device capabilities to determine what form of conference removal is available. The app should track the <B>LINE_CALLSTATE</B> messages to determine what really happened to the calls involved.<BR><BR>The conference call is established either via <B>lineSetupConference</B> or <B>lineCompleteTransfer</B>. The call added to a conference will typically be established using <B>lineSetupConference</B> or<B> linePrepareAddToConference</B>. Some switches may allow adding of an arbitrary calls to conference, and such a call may have been set up using <B>lineMakeCall</B> and be on (hard) hold.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineSetupConference, linePrepareAddToConference, lineRemoveFromConference, lineCompleteTransfer<BR><BR></B>Messages:  <B>LINE_CALLSTATE</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT4"></A>lineAnswer</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="78pt" VALIGN="TOP"><COL WIDTH="343pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG <B>lineAnswer</B>(<I>hCall, lpsUserUserInfo, dwSize</I>)<BR>This function answers the specified offering call.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HCALL    <I>hCall<BR></I>Specifies a handle to the call to be answered. The app must be an owner of this call.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LPCSTR   <B>const </B><I>lpsUserUserInfo</I><BR>Specifies a far pointer to a string containing user-to-user information to be sent to the remote party at the time of answering the call. This pointer can be left NULL if no user-to-user information is to be sent. User-to-user information is only sent if supported by the underlying network (see <B>LINEDEVCAPS</B>).<BR><BR>DWORD   <I>dwSize<BR></I>Specifies the size in bytes of the user-to-user information in <I>lpsUserUserInfo</I>. If <I>lpsUserUserInfo</I> is NULL, no user-to-user information is sent to the calling party and <I>dwSize</I> is ignored.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><B>LINEERR_INVALCALLHANDLE<BR></B>The specified call handle is invalid.<BR><B>LINEERR_INVALCALLSTATE<BR></B>The call is not in a valid state for the requested operation.<BR><B>LINEERR_INUSE<BR></B>The line is in use in a way that does not allow this call to be answered.<BR><B>LINEERR_NOTOWNER<BR></B>The app does not have owner privileges to the specified call.<BR><B>LINEERR_INVALPOINTER<BR></B>The specified pointer parameter is invalid.<BR><B>LINEERR_OPERATIONUNAVAIL<BR></B>The specified operation is not available.<BR><B>LINEERR_OPERATIONFAILED<BR></B>The specified operation failed for unspecified reason.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP"><I>hCall<BR></I>offering, accepted</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">When a new call arrives, apps with an interest in the call are sent a <B>LINE_CALLSTATE</B> message to provide the new call handle and to inform the app about the call's state and privileges to the new call (e.g., <I>monitor</I>, <I>owner</I>). The app with <I>owner</I> privileges for the call can answer this call using <B>lineAnswer</B>. After the call has been successfully answered, the call will typically transition to the <I>connected</I> state. Initially, only one application will be the given owner privileges to the inbound call.<BR><BR>In some telephony environments (like ISDN) where user alerting is separate from call offering, the app may have the option to first accept a call prior to answering, or instead to reject or redirect the <I>offering</I> call.<BR><BR>If a call comes in (is offered) at the time another call is already active, then the new call is connected to by invoking <B>lineAnswer</B>. The effect this has on the existing active call depends on the line's device capabilities. The first call may be unaffected, it may automatically be dropped, or it may automatically be placed on hold. The appropriate <B>LINE_CALLSTATE</B> messages will report state transitions to the application about both calls.<BR><BR>The app has the option to send user-to-user information at the time of the answer. Even if user-to-user information can be sent, often no guarantees are made that the network will deliver this information to the calling party. An app should consult a line's device capabilities to determine whether or not sending user-to-user information on answer is available.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Messages:  <B>LINE_CALLSTATE</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT5"></A>lineBlindTransfer</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="78pt" VALIGN="TOP"><COL WIDTH="343pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineBlindTransfer</B>(<I>hCall, lpszDestAddress, dwCountryCode</I>)<BR>This function performs a blind or single-step transfer of the specified call to the specified destination address.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HCALL    <I>hCall<BR></I>Specifies a handle to the call to be transferred. The app must be an owner of this call.<BR><BR>LPCSTR    <B>const</B> <I>lpszDestAddress<BR></I>Specifies a far pointer to a NULL-terminated string identifying where the call is to be transferred to. The destination address uses the standard dialable number format.<BR><BR>DWORD    <I>dwCountryCode<BR></I>Specifies the country code of the destination. This is used by the implementation to select the call progress protocols for the destination address. If a value of zero is specified, then a service provider defined default call progress protocol is used. </P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><B>LINEERR_INVALCALLHANDLE<BR></B>The specified call handle is invalid.<BR><B>LINEERR_INVALCALLSTATE<BR></B>The specified call is not in a valid state for the requested operation.<BR><B>LINEERR_NOTOWNER<BR></B>The app does not have owner privileges to the specified call.<BR><B>LINEERR_INVALPOINTER<BR></B>The specified pointer parameter is invalid.<BR><B>LINEERR_OPERATIONUNAVAIL<BR></B>The specified operation is not available.<BR><B>LINEERR_OPERATIONFAILED<BR></B>The specified operation failed for unspecified reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP"><I>hCall    </I>connected</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">Blind transfer differs from a consultation transfer in that no consultation call is made visible to the app. After the blind transfer successfully completes the specified call will typically be cleared from the application's line and transition to the <I>idle</I> state. Note that the app's call handle will remain valid after the transfer has completed. The app must deallocate its handle when it is no longer interested in the transferred call using <B>lineHandoff</B>.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineHandoff<BR></B>Messages:  <B>LINE_CALLSTATE</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT6"></A>lineClose</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="78pt" VALIGN="TOP"><COL WIDTH="343pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineClose</B>(<I>hLine</I>)<BR>This function closes the specified open line device.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HLINE    <I>hLine<BR></I>Specifies a handle to the open line device to be closed. After the line has been successfully closed, this handle is no longer valid.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><B>LINEERR_INVALLINEHANDLE<BR></B>The specified line handle is invalid.<BR><B>LINEERR_OPERATIONFAILED<BR></B>The specified operation failed for unspecified reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP">Not applicable</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">If an application calls <B>lineClose</B> while it still has active calls on the opened line, then the app's ownership of these calls is revoked. If the app was the sole owner of these calls, then the calls are dropped as well. It is good programming practice for an application to dispose of the calls it owns on an opened line by explicity relinquishing ownership and/or by dropping these calls prior to closing the line. <BR><BR>If the close was successful, a <B>LINE_LINEDEVSTATE </B>message is sent all applications that are monitoring the line status of open/close changes. <BR><BR>Certain environments may find it useful or necessary to forcibly reclaim line devices from an application that has the line open. This may be useful to prevent a misbehaved application form monopolizing the line device for too long. If this happens, a <B>LINE_CLOSE</B> message is sent to the application, specifying the line handle of the line device that was closed.<BR><BR><B>lineOpen</B> allocates resources to the invoking application, and applications may be prevented from opening a line if resources are unavailable. Therefore, an application that only occasionally uses a line device (e.g., for outbound calls) should close the line to free resources and allow other applications to open the line.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Messages:  <B>LINE_CLOSE, LINE_LINEDEVSTATE</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT7"></A>lineCompleteCall</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="78pt" VALIGN="TOP"><COL WIDTH="343pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineCompleteCall</B>(<I>hCall, lpdwCompletionID, dwCompletionMode,    dwMessageID</I>)<BR>This function is used to specify how a call that could not be connected normally should be completed instead. The network or switch may not be able to complete a call because network resources are busy or the remote station is busy or doesn't answer. The application can request that the call be completed in one of a number of ways. </P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HCALL    <I>hCall<BR></I>Specifies a handle to the call whose completion is requested. The app must be an owner of the call.<BR><BR>LPDWORD    <I>lpdwCompletionID<BR></I>Specifies a far pointer to a DWORD-sized memory location. The completion ID is used to identify individual completion requests in progress. A completion ID becomes invalid and may be reused after the request completes or after an outstanding request is canceled.<BR><BR>DWORD    <I>dwCompletionMode<BR></I>Specifies the way in which the call is to be completed, of type <B>LINECALLCOMPLMODE</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><B>    LINECALLCOMPLMODE_CALLBACK<BR></B>Requests the called station to return the call when it returns to idle.<BR><B>    LINECALLCOMPLMODE_INTRUDE<BR></B>Adds the app to the existing physical call at the called station (barge in).<BR><B>    LINECALLCOMPLMODE_MESSAGE<BR></B>Leave a short predefined message for the called station (Leave Word Calling). The message to be sent is specified via <I>dwMessageID</I>.<I> </I></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwMessageID<BR></I>Specifies the message that is to be sent when completing the call using LINECALLCOMPLMODE_MESSAGE. This ID selects the message from a small number of predefined messages. </P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><B>LINEERR_INVALCALLHANDLE<BR></B>The specified call handle is invalid.<BR><B>LINEERR_NOTOWNER<BR></B>The app does not have owner privileges to the specified call.<BR><B>LINEERR_INVALCALLSTATE<BR></B>The call is not in a valid state for the requested operation.<BR><B>LINEERR_INVALCALLCOMPLMODE<BR></B>The specified completion is invalid.<BR><B>LINEERR_INVALPOINTER<BR></B>The specified pointer parameter is invalid.<BR><B>LINEERR_COMPLETIONOVERRUN<BR></B>The maximum number of outstanding call completions has been exceeded.<BR><B>LINEERR_OPERATIONUNAVAIL<BR></B>The specified operation is not available.<BR><B>LINEERR_OPERATIONFAILED<BR></B>The specified operation failed for unspecified reason.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP"><I>hCall   </I>busy, noAnswer</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">This function is considered complete when the request has been accepted by the network or switch; not when the request is fully completed in the way specified. After this function completes, the call will typically transition to <I>idle</I>. When the called station or network enters a state where the call can be completed as requested, the application will be notified via a <B>LINE_CALLSTATE</B> message with the call state equal to <I>offering</I>. The call's <B>LINECALLINFO</B> record will list the reason for the call as CALLCOMPLETION and provide the completion ID as well. It is possible to have multiple call completion requests outstanding at any given time; the maximum number is device dependent. The completion ID is also used to refer to each individual request so requests can be canceled by calling <B>lineUncompleteCall</B>.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineGetCallInfo, lineUncompleteCall<BR></B>Messages:  <B>LINE_CALLSTATE<BR></B>Data Types:  <B>LINECALLSTATUS, LINECALLINFO, LINECALLCOMPLMODE</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT8"></A>lineCompleteTransfer</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="78pt" VALIGN="TOP"><COL WIDTH="343pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineCompleteTransfer</B>(<I>hCall, hConsultCall, lphConfCall,    dwTransferMode</I>)<BR>This function completes the transfer of the specified call to the party connected in the consultation call.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HCALL    <I>hCall<BR></I>Specifies a handle to the call to be transferred. The app must be an owner of this call.<BR><BR>HCALL    <I>hConsultCall<BR></I>Specifies a handle to the call that represents a connection with the destination of the transfer. The app must be an owner of this call.<BR><BR>LPHCALL    <I>lphConfCall<BR></I>Specifies a far pointer to a memory location where a <B>HCALL</B> handle can be returned.  If <I>dwTransferMode</I> is specified as LINETRANSFERMODE_CONFERENCE then the newly created conference call is returned in <I>lphConfCall</I> and the app will be the initial sole owner of the conference call. Otherwise, this parameter may be left NULL. <BR><BR>DWORD    <I>dwTransferMode<BR></I>Specifies how the initiated transfer request is to be resolved, of type <B>LINETRANSFERMODE</B>. Values are:<BR><BR>LINETRANSFERMODE_TRANSFER<BR>Resolve the initiated transfer by transferring the initial call to the consultation call.<BR><BR>LINETRANSFERMODE_CONFERENCE<BR>Resolve the initiated transfer by conferencing all three parties into a three-way conference call. A conference call is created and returned to the application.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><B>LINEERR_INVALCALLHANDLE<BR></B>The specified call handle is invalid.<BR><B>LINEERR_INVALCONSULTCALLHANDLE<BR></B>The specified consultation call handle is invalid.<BR><B>LINEERR_NOTOWNER<BR></B>The app does not have owner privileges to the specified call(s).<BR><B>LINEERR_INVALCALLSTATE<BR></B>One or both calls are not in a valid state for the requested operation.<BR><B>LINEERR_INVALTRANSFERMODE<BR></B>The specified transfer mode parameter is invalid.<BR><B>LINEERR_INVALPOINTER<BR></B>The specified pointer parameter is invalid.<BR><B>LINEERR_OPERATIONUNAVAIL<BR></B>The specified operation is not available.<BR><B>LINEERR_OPERATIONFAILED<BR></B>The specified operation failed for unspecified reason.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP"><I>hCall   </I>onHoldPendingTransfer<BR><I>hConsultCall    </I>connected, ringback, busy</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">This operation completes the transfer of the original call, <I>hCall</I>, to the party currently connected via <I>hConsultCall</I>. The consultation call will typically have been dialed on the consultation call allocated as part of <B>lineSetupTransfer</B>, but it may be any call to which the switch is capable of transferring <I>hCall</I>.<BR><BR>The transfer request can be resolved either as a transfer or as a three-way conference call. When resolved as a transfer, the parties connected via <I>hCall</I> and <I>hConsultCall</I> will be connected to each other, and both <I>hCall</I> and <I>hConsultCall</I> will typically be cleared from the application's line and both will transition to the <I>idle</I> state. Note that the app's call handle will remain valid after the transfer has completed. The app must deallocate its handle when it is no longer interested in the transferred call using <B>lineHandoff</B>. <BR><BR>When resolved as a conference, all three parties will enter in a conference call. Both existing call handles remain valid, but will transition to the conferenced state. A conference call handle will created and returned, and it will transition to the <I>connected</I> state.<BR><BR>It may also be possible to perform a blind transfer of a call using <B>lineBlindTransfer</B>.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineSetupTransfer, lineBlindTransfer<BR></B>Messages:  <B>LINE_CALLSTATE</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT9"></A>lineDevSpecific</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="78pt" VALIGN="TOP"><COL WIDTH="343pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">UINT<B> lineDevSpecific</B>(<I>hLine, dwAddressID, hCall, lpParams, dwSize</I>)<BR>This function is used as a general extension mechanism to enable service providers to provide access to features not described in other operations. The meaning of the extensions are device-specific, and taking advantage of these extensions requires the application to be fully aware of them.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HLINE    <I>hLine<BR></I>Specifies a handle to a line device.<BR>DWORD    <I>dwAddressID<BR></I>Specifies an address ID on the given line device.<BR>HCALL    <I>hCall<BR></I>Specifies a handle to a call.<BR>LPVOID    <I>lpParams<BR></I>Specifies a far pointer to a memory area used to hold a parameter block. The format of this parameter block is device specific and its contents is passed through by the Telephony DLL to or from the service provider.<BR>DWORD    <I>dwSize<BR></I>The size in bytes of the parameter block area.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. </P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><B>LINEERR_INVALLINEHANDLE<BR></B>The specified line handle is invalid.<BR><B>LINEERR_INVALADDRESSID<BR></B>The specified address ID is invalid.<BR><B>LINEERR_INVALCALLHANDLE<BR></B>The specified call handle is invalid.<BR><B>LINEERR_INVALPOINTER<BR></B>The specified pointer parameter is invalid.<BR><B>LINEERR_OPERATIONUNAVAIL<BR></B>The specified operation is not available.<BR><B>LINEERR_OPERATIONFAILED<BR></B>The specified operation failed for unspecified reason.<BR>Additional error returns are device specific.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP"><I>hCall<BR></I>Device specific</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">This operation provides a generic parameter profile. The interpretation of the parameter structure is device specific. Whether <I>hLine</I>, <I>dwAddressID</I> or <I>hCall</I> are expected to be valid is device-specific. Indications and replies sent back the application that are device specific should use the <B>LINE_DEVSPECIFIC</B> message.<BR><BR>A service provider can provide access to device specific functions by defining parameters for use with this operation. Applications that want to make use of these device specific extensions should consult the device specific (i.e., vendor specific) documentation that describes what extensions are defined. Note that an app that relies on these device specific extensions will typically not be portable to work with other service provider environments. <BR><BR>This operation is part of the extended telephony services. It only provides access to a device-specific feature without defining its meaning. This operation is only available if the application has successfully negotiated a device-specific extension version.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Messages:  <B>LINE_DEVSPECIFIC</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT10"></A>lineDevSpecificFeature</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="78pt" VALIGN="TOP"><COL WIDTH="343pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG <B>lineDevSpecificFeature</B>(<I>hLine, dwFeature, lpParams, dwSize</I>)<BR>This function is used as an extension mechanism to enable service providers to provide access to features not described in other operations. The meaning of these extensions are device-specific, and taking advantage of these extensions requires the application to be fully aware of them.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HLINE    <I>hLine<BR></I>Specifies a handle to the line device.<BR>DWORD    <I>dwFeature<BR></I>Specifies the feature to invoke on the line device, of type <B>PHONEBUTTONFUNCTION</B>. <BR>LPVOID    <I>lpParams<BR></I>Specifies a far pointer to a memory area used to hold a feature-dependent parameter block. The format of this parameter block is device specific and its contents is passed through by the Telephony DLL to or from the service provider.<BR>DWORD    <I>dwSize<BR></I>Specifies the size of the buffer in bytes.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><B>LINEERR_INVALLINEHANDLE<BR></B>The specified line handle is invalid.<BR><B>LINEERR_INVALPOINTER<BR></B>The specified pointer parameter is invalid.<BR><B>LINEERR_OPERATIONUNAVAIL<BR></B>The specified operation is not available.<BR><B>LINEERR_OPERATIONFAILED<BR></B>The specified operation failed for unspecified reason.<BR>Additional error returns are device specific.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP"><I>hCall  </I>Device specific</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">This function provides the application with phone feature button emulation capabilities. When an application invokes this operation, it specifies the equivalent of a button press event. This method of invoking features is highly device dependent, as the API does not define the their meaning. Note that an app that relies on these device specific extensions will typically not be portable to work with other service provider environments. <BR><BR>Note also that the lpParams data structure should not contain any pointers since they would not be properly translated (thunked) when running a 16 bit application in a 32 bit version of the Telephony DLL and vice versa.<BR><BR>This operation is part of the extended telephony services. It only provides access to a device-specific feature without defining its meaning. This operation is only available if the application has successfully negotiated a device-specific extension version.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Messages:  <B>LINE_DEVSPECIFICFEATURE</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Data Types:  <B>PHONEBUTTONFUNCTION</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT11"></A>lineDial</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="78pt" VALIGN="TOP"><COL WIDTH="343pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineDial</B>(<I>hCall, lpszDestAddress, dwCountryCode</I>)<BR>This function dials the specified dialable number on the specified call. </P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HCALL    <I>hCal<BR></I>Specifies a handle to the call on which a number is to be dialed. The app must be an owner of the call.<BR><BR>LPCSTR    <B>const </B><I>lpszDestAddress<BR></I>Specifies the destination to be dialed using the standard dialable number format.  <BR><BR>DWORD    <I>dwCountryCode<BR></I>Specifies the country code of the destination. This is used by the implementation to select the call progress protocols for the destination address. If a value of zero is specified, then a service provider defined default call progress protocol is used. </P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><B>LINEERR_INVALCALLHANDLE<BR></B>The specified call handle is invalid.<BR><B>LINEERR_NOTOWNER<BR></B>The app does not have owner privileges to the specified call.<BR><B>LINEERR_INVALPOINTER<BR></B>The specified pointer parameter is invalid.<BR><B>LINEERR_INVALADDRESS<BR></B>The specified character buffer for the destination address to be dialed contains invalid characters or digits (i.e., syntax error); no dialing has been done.<BR><B>LINEERR_INVALPARAM<BR></B>The specified country code is invalid.<BR><B>LINEERR_INVALCALLSTATE<BR></B>The current state of the call does not allow dialing.<BR><B>LINEERR_ADDRESSBLOCKED<BR></B>The specified address is blocked from being dialed on the specified call.<BR><B>LINEERR_BILLINGREJECTED<BR></B>The billing information specified as part of the destination address has been rejected.<BR><B>LINEERR_OPERATIONUNAVAIL<BR></B>The specified operation is not available.<BR><B>LINEERR_OPERATIONFAILED<BR></B>The specified operation failed for unspecified reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP"><I>hCall    </I>Any state except idle and disconnected</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP"><B>lineDial</B> is used for dialing on an existing call appearance. For example, after a call has been set up for transfer or conference, a consultation call is automatically allocated. <B>lineDial</B> would be used to perform the dialing of this consultation call. Note that <B>lineDial</B> may be invoked multiple times in the course of dialing in the case of multi-stage dialing, if the line's device capabilities allows it. Also, multiple addresses may be provided in a single dial string separated by CRLF. Service providers that provide inverse multiplexing can establish individual physical calls with each of the addresses, and return a single call handle to the aggregate of all calls to the application. All addresses would use the same country code. <BR><BR>Dialing is considered completed after the address has been passed on to the service provider; not after the call is finally connected. Service providers that provide inverse multiplexing may allow require multiple addresses to be provided at onece. The service provider sends <B>LINE_CALLSTATE</B> messages to the application to inform it about the progress of the call. To abort a call attempt while a call is being established, the invoking application should use <B>lineDrop</B>.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Messages:  <B>LINE_CALLSTATE</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT12"></A>lineDrop</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="78pt" VALIGN="TOP"><COL WIDTH="343pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineDrop</B>(<I>hCall, lpsUserUserInfo, dwSize</I>)<BR>This functions drops or disconnects the specified call. The application has the option to specify user-to-user information to be transmitted as part of the call disconnect.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HCALL    <I>hCall<BR></I>Specifies a handle to the call to be dropped. The app must be an owner of the call.<BR><BR>LPCSTR    <B>const </B><I>lpsUserUserInfo<BR></I>Specifies a far pointer to a string containing user-to-user information to be sent to the remote party as part of the call disconnect. This pointer can be left NULL if <I>dwUserUserInfoSize</I> is zero and no user-to-user information is to be sent. User-to-user information is only sent if supported by the underlying network (see <B>LINEDEVCAPS</B>).<BR><BR>DWORD   <I>dwSize<BR></I>Specifies the size in bytes of the user-to-user information in <I>lpsUserUserInfo</I>. If zero, then <I>lpsUserUserInfo</I> can be left NULL, and no user-to-user information will be sent to the remote party.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><B>LINEERR_INVALCALLHANDLE<BR></B>The specified call handle is invalid.<BR><B>LINEERR_NOTOWNER<BR></B>The app does not have owner privileges to the specified call.<BR><B>LINEERR_INVALPOINTER<BR></B>The specified pointer parameter is invalid.<BR><B>LINEERR_INVALCALLSTATE<BR></B>The current state of the call does not allow the call to be dropped.<BR><B>LINEERR_OPERATIONUNAVAIL<BR></B>The specified operation is not available.<BR><B>LINEERR_OPERATIONFAILED<BR></B>The specified operation failed for unspecified reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP"><I>hCall<BR></I>The specified operation failed for unspecified reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">When invoking <B>lineDrop</B> related calls may sometimes be affected as well. For example, dropping a conference call may drop all individual participating calls. <B>LINE_CALLSTATE</B> messages are sent to the application for all calls whose call state is affected. A dropped call will typically transition to the <I>idle</I> state.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Invoking <B>lineDrop</B> on a call in the <I>offering</I> state rejects the call. Not all telephone networks provide this capability.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Invoking <B>lineDrop</B> on a consultation call that was set up using either <B>lineSetupTransfer</B> or <B>lineSetupConference</B>, will cancel the consultation call. Some switches automatically unhold the other call. </P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">The app has the option to send user-to-user information at the time of the drop. Even if user-to-user information can be sent, often no guarantees are made that the network will deliver this information to the remote party.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Note that in various bridged or party line configurations when multiple parties are on the call, <B>lineDrop</B> by the application may not actually clear the call.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineGetDevCaps</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT13"></A>lineForward</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="334pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineForward</B>(<I>hLine, bAllAddresses, dwAddressID, lpForwardList,    dwNumRingsNoAnswer, lphConsultCall</I>)<BR>This function forwards calls destined for the specified address on the specified line, according to the specified forwarding instructions. When an originating address (<I>dwAddressID</I>) is forwarded, the specified incoming calls for that address are deflected to the other number by the switch. This function provides a combination of forward and do-not-disturb features. This function can also cancel specific forwarding currently in effect.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HLINE    <I>hLine<BR></I>Specifies a handle to the line device.<BR>BOOL    <I>bAllAddresses<BR></I>Specifies whether all originating addresses on the line or just the one specified is to be forwarded. If TRUE, all addresses on the line are forwarded and <I>dwAddressID</I> is ignored; if FALSE, only the address specified as <I>dwAddressID</I> is forwarded.<BR>DWORD    <I>dwAddressID<BR></I>Specifies the address on the specified line whose incoming calls are to be forwarded. This parameter is ignored if <I>bAllAddresses</I> is TRUE.<BR>LPLINEFORWARDLIST    <B>const</B><I> lpForwardList<BR></I>Specifies a far pointer to a variable size data structure that describes the specific forwarding instructions, of type <B>LINEFORWARDLIST</B>.<BR>DWORD    <I>dwNumRingsNoAnswer<BR></I>Specifies the number of rings before a call is considered a "no answer".<BR>LPHCALL    <I>lphConsultCall<BR></I>Specifies a far pointer to a <B>HCALL</B> location. In some telephony environments, this location is loaded with a handle to a consultation call used to consult the party that is being forwarded to, and the app will be the initial sole owner of this call. This pointer must be valid even in environments where call forwarding does not require a consultation call.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><B>LINEERR_INVALLINEHANDLE<BR></B>The specified line device handle is invalid.<BR><B>LINEERR_INVALADDRESSID<BR></B>The specified address ID is invalid.<BR><B>LINEERR_INVALPOINTER<BR></B>One or more of the specified pointer parameters are invalid.<BR><B>LINEERR_INVALPARAM<BR></B>The specified forward list parameter contains invalid information.<BR><B>LINEERR_OPERATIONUNAVAIL<BR></B>The specified operation is not available.<BR><B>LINEERR_OPERATIONFAILED<BR></B>The specified operation failed for unspecified reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP">Not applicable.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">Forwarding of the address(es) remains in effect until this function is called again. The most recent forwarding list replaces the old one. Forwarding can be canceled by specifying a NULL pointer as <I>lpForwardList</I>. If a NULL destination address is specified for an entry in the forwarding list, then the operation acts as a do not disturb.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Be aware that forwarding status of an address may also be affected externally. For example via administrative actions at the switch, or by a user from another station. It may not be possible for the service provider to be aware of this state change, and may not be able to keep in sync with the forwarding state known to the switch.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineGetAddressStatus</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Messages:  <B>LINE_ADDRESSSTATUS</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Data Types:  <B>LINEFORWARDLIST</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT14"></A>lineGatherDigits</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="334pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG <B>lineGatherDigits</B>(<I>hCall, dwDigitModes, lpsDigits, dwNumDigits,   lpszTerminationDigits, dwFirstDigitTimeout, dwInterDigitTimeout</I>)<BR>This function initiates the buffered gathering of digits on the specified call. The app specifies a buffer in which to place the digits and the maximum number of digits to be collected.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Digit collection is terminated in a variety of ways. Firstly, the requested number of digits has been collected. Secondly, one of the digits detected matches a digit in <I>szTerminationDigits </I>before the specified number of digits has been collected. The detected termination digit is also placed in the buffer and the partial buffer is returned. Thirdly, one of the timeouts expires. The <I>dwFirstDigitTimeout</I> expires if the first digit is not received in this time period. The <I>dwInterDigitTimout</I> expires if the second, third, etc. digit is not received within that time amount from the previously detected digit, and a partial buffer is returned. A fourth method for terminating (i.e., canceling) digit detection is by calling this operation again while collection is in progress. The old collection session is terminated and the content of the old buffer is undefined. The mechanism for canceling digit gathering without initiating another is by invoking this operation with <I>lpsDigits</I> equal to NULL.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HCALL    <I>hCall<BR></I>Specifies a handle to the call on which digits are to be gathered. The app must be an owner of the call.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwDigitModes<BR></I>Specifies the digit mode(s) that are to be monitored, of type <B>LINEDIGITMODE</B>.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><B>LINEDIGITMODE_PULSE<BR></B>Detect digits as audible click that are the result of the use of rotary pulse sequences. Valid digits for pulse mode are '0' through '9'.<BR><B>LINEDIGITMODE_DTMF<BR></B>Detect digits as DTMF tones. Valid digits for DTMF mode are '0' through '9', 'A', 'B', 'C', 'D', '*', '#'.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LPSTR    <I>lpsDigits<BR></I>Specifies a far pointer to the buffer where detected digits are to be stored as ASCII characters. Note that digits may not show up in the buffer one at a time as they are collected. Only after a <B>LINE_GATHERDIGITS</B> message is received should the content of the buffer be assumed to be valid. If <I>lpsDigits</I> is specified as NULL the digit gathering currently in progress on the call is canceled and the <I>dwNumDigits</I> parameter is ignored. Otherwise, <I>lpsDigits</I> is assumed to have room for <I>dwNumDigits</I> digits.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwNumDigits<BR></I>Specifies the number of digits to be collected before a <B>LINE_GATHERDIGITS</B> message is sent to the application. <I>dwNumDigits</I> is ignored when <I>lpsDigits</I> is NULL. This function will fail if <I>dwNumDigits</I> is  zero.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LPCSTR    <B>const</B> <I>lpszTerminationDigits<BR></I>Specifies a NULL-terminated string of termination digits as ASCII characters. If one of the digits in the string is detected, then that termination digit is appended to the buffer, digit collection is terminated and the <B>LINE_GATHERDIGITS</B> message is sent to the application.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Valid characters for pulse mode are '0' through '9'. Valid characters for DTMF mode are '0' through '9', 'A', 'B', 'C', 'D', '*', '#'.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwFirstDigitTimeout   </I>Specifies the time duration in milliseconds in which the first digit is expected. If the first digit is not received in this timeframe, then digit collection is aborted and a <B>LINE_GATHERDIGITS</B> message is sent to the application. The buffer only contains the NULL character, indicating no digits were received and the first digit timeout terminated digit gathering. The call's line device capabilities specifies the valid range for this parameter or indicates that timeouts are not supported.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwInterDigitTimeout<BR></I>Specifies the maximum time duration in milliseconds between consecutive digits. If no digit is received in this timeframe, then digit collection is aborted and a <B>LINE_GATHERDIGITS</B> message is sent to the application. The buffer only contains the digits collected up to this point followed by a NULL character, indicating that an interdigit timeout terminated digit gathering. The call's line device capabilities specifies the valid range for this parameter or indicates that timeouts are not supported.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><B>LINEERR_INVALCALLHANDLE<BR></B>The specified call handle is invalid.<BR><B>LINEERR_NOTOWNER<BR></B>The app does not have owner privileges to the specified call.<BR><B>LINEERR_INVALDIGITMODE<BR></B>The specified digit mode is not available.<BR><B>LINEERR_INVALPOINTER<BR></B>One or more of the specified pointer parameters are invalid.<BR><B>LINEERR_INVALDIGITS<BR></B>The specified termination digits are not valid.<BR><B>LINEERR_INVALPARAM<BR></B>The <I>dwNumDigits</I> parameter is invalid.<BR><B>LINEERR_RESOURCEUNAVAIL<BR></B>The specified operation cannot be completed because of resource overcommitment.<BR><B>LINEERR_OPERATIONUNAVAIL<BR></B>The specified operation is not available.<BR><B>LINEERR_OPERATIONFAILED<BR></B>The specified operation failed for unspecified reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP"><I>hCall<BR></I>Any state</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">This function is considered successful if digit collection has been correctly initiated; not when digit collection has terminated. In all cases where a partial buffer is returned, valid digits (if any) are followed by an ASCII NULL character.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Although this function can be invoked in any call state, digits can typically only be gathered while the call is in the <I>connected</I> state.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">The message <B>LINE_GATHERDIGITS</B> is sent only to the application that initiated the request. It is also sent when partial buffers are returned because of timeouts or matching termination digits, or when the request is canceled via another <B>lineGatherDigits</B> request on the call. Only one gather digits request can be active on call at any given time across all apps that are owners for the call. Given the asynchronous behavior of the operation, an app that issues multiple <B>lineGatherDigits</B> in quick succession may be able to do so and receive several <B>LINE_GATHERDIGITS</B> messages only later. While this would be unusual application behavior, the app will be able to count the number of these messages to allow cancel messages to be matched up with the earlier requests. In any case, at most the most recent request should be assumed to be valid.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">An application can use <B>lineMonitorDigits</B> to enable or disable unbuffered digit detection. Each time a digit is detected in this fashion, a <B>LINE_MONITORDIGITS</B> message is sent to the application. Both buffered and unbuffered digit detection can be enabled for the same call simultaneously.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineGetDevCaps, lineMonitorDigits</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Messages:  <B>LINE_GATHERDIGITS</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Data Types:  <B>LINEDEVCAPS, LINEDIGITMODE</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT15"></A>lineGenerateDigits</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="334pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineGenerateDigits</B>(<I>hCall, dwDigitMode, lpszDigits, dwDuration</I>)<BR>This function initiates the generation of the specified digits on the specified call as in band tones using the specified signaling mode. Invoking this function with a NULL value for <I>lpszDigits</I> aborts any digit generation currently in progress. Invoking <B>lineGenerateDigits</B> or <B>lineGenerateTone</B> while digit generation is in progress aborts the current digit generation or tone generation in progress and initiates the generation of the most recently specified digits or tone. </P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HCALL    <I>hCall<BR></I>Specifies a handle to the call. The app must be an owner of the call.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwDigitMode<BR></I>Indicates the format to be used for signaling these digits, of type <B>LINEDIGITMODE</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><B>LINEDIGITMODE_PULSE<BR></B>Uses pulse/rotary for digit signaling. Valid digits for pulse mode are '0' through '9'.<BR><B>LINEDIGITMODE_DTMF<BR></B>Uses DTMF tones for digit signaling. Valid digits for DTMF mode are '0' through '9', 'A', 'B', 'C', 'D', '*', '#'.<BR><B>LPCSTR    const</B><B><I> lpszDigits<BR></I></B>Specifies a far pointer to a NULL terminated character buffer that contains the digits to be generated. </P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Valid characters for pulse mode are '0' through '9' and ',' (comma). Valid characters for DTMF mode are '0' through '9', 'A', 'B', 'C', 'D', '*', '#', and ',' (comma). A comma injects an extra delay between the signaling of the previous and next digits it separates. The duration of this pause is configuration defined. The line's device capabilities indicates what this duration is. Multiple commas may be used to inject longer pauses. Invalid digits are ignored during the generation.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwDuration<BR></I>Specifies both the duration in milliseconds of DTMF digits and pulse and DTMF inter-digit spacing. A value of zero will use a default value.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><B>LINEERR_INVALCALLHANDLE<BR></B>The specified call handle is invalid.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP"><B>LINEERR_NOTOWNER</B><BR>The app does not have owner privileges to the specified call.<BR><B>LINEERR_INVALDIGITMODE<BR></B>The specified digit mode is invalid.<BR><B>LINEERR_INVALPOINTER<BR></B>The specified pointer parameter is invalid.<BR><B>LINEERR_RESOURCEUNAVAIL<BR></B>The specified operation cannot be completed because of resource overcommitment.<BR><B>LINEERR_OPERATIONUNAVAIL<BR></B>The specified operation is not available.<BR><B>LINEERR_OPERATIONFAILED<BR></B>The specified operation failed for unspecified reasons.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><I>hCall    </I>Any state</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">The<B> lineGenerateDigits</B> function is considered to have completed successfully when the digit generation has been successfully initiated; not when all digits have been generated. Contrary to <B>lineDial</B>, which dials digits in a network dependent fashion, <B>lineGenerateDigits</B> guarantees to produce the digits as inband tones over the voice channel using DTMF or hookswitch dial pulses when using pulse. <B>lineGenerateDigits</B> is generally not suitable for making calls or dialing, it is intendent for end-to-end signaling over an established call. </P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP">After all digits in <I>lpszDigits</I> have been generated, or after digit generation has been aborted or canceled, a <B>LINE_GENERATE</B> message is sent to the application. </P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">Note that only one inband generation request (tone generation or digit generation) is allowed to be in progress per call across all apps that are owners of the call.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Be aware that, depending on the service provider and hardware, the app may monitor the digits it generates itself. If that is not desired, then the app can disable digit monitoring while generating digits.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Functions:  <B>lineGenerateTone</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Messages:  <B>LINE_GENERATE</B></P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Data Types:  <B>LINEDIGITMODE</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT16"></A>lineGenerateTone</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="334pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineGenerateTone</B>(<I>hCall, dwToneMode, dwDuration, dwNumTones,    lpTones</I>)<BR>This function generates the specified tone inband over the specified call. Invoking this function with a zero for <I>dwToneMode</I> aborts the tone generation generation currently in progress on the specified call. Invoking <B>lineGenerateTone</B> or <B>lineGenerateDigits</B> while tone generation is in progress aborts the current tone generation or digit generation in progress and initiates the generation of the newly specified tone or digits.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HCALL    <I>hCall<BR></I>Specifies a handle to the call on which a tone is to be generated. The app must be an owner of the call.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD   <I>dwToneMode<BR></I>Defines the tone to be generated, of type <B>LINETONEMODE</B>. Tones can be either standard or custom. A custom tone is composed of set of arbitrary frequencies. A small number of standard tones are predefined. The duration of the tone is specified via <B>dwDuration</B> for both standard and custom tones. Values are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><B>LINETONEMODE_CUSTOM<BR></B>The tone is a custom tone, defined by the specified frequencies.<BR><B>LINETONEMODE_RINGBACK<BR></B>The tone to be generated is ring tone. The exact ringback tone is service provider defined.<BR><B>LINETONEMODE_BUSY<BR></B>The tone is a standard (station) busy tone. The exact busy tone is service provider defined.<BR><B>LINETONEMODE_BEEP<BR></B>The tone is a beep, as used to announce the beginning of a recording. The exact beep tone is service provider defined.<BR><B>LINETONEMODE_BILLING<BR></B>The tone is billing information tone such as a credit card prompt tone. The exact billing tone is service provider defined.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">A value of zero for <I>dwToneMode</I> cancels tone generation.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwDuration<BR></I>Specifies duration in milliseconds during which the tone should be sustained. </P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwNumTones<BR></I>Specifies the number of entries in the <I>lpTones</I> array. This field is ignored if <I>dwToneMode</I> is not equal to CUSTOM.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LPLINEGENERATETONE    <B>const</B> <I>lpTones<BR></I>Specifies a far pointer to a <B>LINEGENERATETONE</B> array that specifies the tone's components. This parameter may be left NULL for non custom tones.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><B>LINEERR_INVALCALLHANDLE<BR></B>The specified call handle is invalid.<BR><B>LINEERR_NOTOWNER<BR></B>The app does not have owner privileges to the specified call.<BR><B>LINEERR_INVALPOINTER<BR></B>The specified pointer parameter is invalid.<BR><B>LINEERR_INVALTONEMODE<BR></B>The specified tone mode parameter is invalid.<BR><B>LINEERR_INVALTONE<BR></B>The specified custom tone does not represent a valid tone, or is made up of too many frequencies.<BR><B>LINEERR_RESOURCEUNAVAIL<BR></B>The specified operation cannot be completed because of resource overcommitment.<BR><B>LINEERR_OPERATIONUNAVAIL<BR></B>The specified operation is not available.<BR><B>LINEERR_OPERATIONFAILED<BR></B>The specified operation failed for unknown reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP"><I>hCall    </I>Any state</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP"><B>lineGenerateTone</B> is considered to have completed successfully when the tone generation has been successfully initiated; not when the generation of the tone is done. The function allows the inband generation of several predefined tones, such as ring back, busy tones, and beep. It also allows for the fabrication of custom tones by specifying their component frequencies, cadence and volume. Since these tones are generated as inband tones, the call would typically have to be in the <I>connected</I> state for tone generation to be effective. When the generation of the tone is complete, or when tone generation is canceled, a <B>LINE_GENERATE</B> message is sent to the application. </P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Note that only one inband generation request (tone generation or digit generation) is allowed to be in progress per call across all apps that are owners of the call. This implies that if tone generation is currently in progress on a call, invoking <B>lineGenerateDigits</B> will cancel the tone generation. </P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineGenerateDigits<BR></B>Messages:  <B>LINE_GENERATE<BR></B>Data Types:  <B>LINEGENERATETONE</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT17"></A>lineGetAddressCaps</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="334pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineGetAddressCaps</B>(hApp, dwDeviceID, dwAddressID, dwAPIVersion, dwExtVersion, lpAddressCaps)</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">This function queries the specified address on the specified line device to determine its telephony capabilities.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HLINEAPP    hApp<BR>Specifies the handle to the app's registration with the API.<BR>DWORD    dwDeviceID<BR>Specifies the line device containing the address to be queried.<BR>DWORD    dwAddressID<BR>Specifies the address on the given line device whose capabilities are to be queried.<BR>DWORD    dwAPIVersion<BR>Specifies the version number of the Telephony API to be used. The high order word contains the major version number; the low order word contain the minor version number.<BR>DWORD    dwExtVersion<BR>Specifies the version number of the service provider-specific extensions to be used. This number can be left zero if no device specific extensions are to be used. Otherwise, the high order word contains the major version number; the low order word contain the minor version number.<BR><B>LPLINEADDRESSCAPS    lpAddressCaps<BR></B>Specifies a far pointer to a variable sized structure of type <B>LINEADDRESSCAPS</B>. Upon successful completion of the request, this structure is filled with address capabilities information.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><B>LINEERR_INVALAPPHANDLE<BR></B>The specified app registration handle is invalid.<BR><B>LINEERR_BADDEVICEID<BR></B>The specified line device ID is out of range.<BR><B>LINEERR_INVALADDRESSID<BR></B>The specified address ID is out of range.<BR><B>LINEERR_INCOMPATIBLEVERSION<BR></B>The app requested an incompatible API version number.<BR><B>LINEERR_INVALEXTVERSION<BR></B>The app requested an invalid extension version number.<BR><B>LINEERR_NODRIVER<BR></B>The driver was not installed.<BR><B>LINEERR_INVALPOINTER<BR></B>The specified pointer parameter is invalid.<BR><B>LINEERR_OPERATIONFAILED<BR></B>The specified operation failed for unknown reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP">Not applicable</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">Valid address IDs range from zero to one less than the number of addresses returned by <B>lineGetDevCaps</B>. <BR>The version number to be supplied is the version number that was returned as part of the line's device capabilities via <B>lineGetDevCaps</B>. </P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Data Types:  <B>LINEADDRESSCAPS</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT18"></A>lineGetAddressID</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="316pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineGetAddressID</B>(<I>hLine, lpdwAddressID, dwAddressMode,    lpsAddress, dwSize</I>)<BR>This operation returns the address ID associated with address in a different format on the specified line.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HLINE    <I>hLine<BR></I>Specifies a handle to the open line device.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LPDWORD    <I>lpdwAddressID<BR></I>Specifies a far pointer to a DWORD-sized memory location where the address ID is returned.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwAddressMode<BR></I>Specifies the address mode of the address contained in <I>lpAddress</I>, of type <B>LINEADDRESSMODE</B>. Values are:<BR><B>LINEADDRESSMODE_ADDRESSID<BR></B>The address is specified via a small integer in the range 0 to <I>dwNumAddresses </I>- 1, where <I>dwNumAddresses</I> is the value in the line's device capabilities.  <BR><B>LINEADDRESSMODE_DIALABLEADDR<BR></B>The address is specified via its dialable address. <I>lpAddress</I> is the dialable address or canonical address format. <BR><B>LPCSTR    const </B><B><I>lpsAddress<BR></I></B>Specifies a far pointer to a data structure holding the address assigned to the specified line device. The format of the address is determined by <I>dwAddressMode</I> parameter. If a DIALABLEADDR, the <I>lpsAddress</I> uses the common dialable number format and is NULL-terminated.<BR>DWORD    <I>dwSize<BR></I>Specifies the size of the address contained in <I>lpAddress</I>.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><B>LINEERR_INVALLINEHANDLE<BR></B>The specified device handle is invalid.<BR><B>LINEERR_INVALADDRESSMODE<BR></B>The specified address mode is invalid.<BR><B>LINEERR_INVALPOINTER<BR></B>One or more of the specified pointer parameters are invalid.<BR><B>LINEERR_INVALADDRESS<BR></B>The specified address is not assigned to the specified line or is invalid.<BR><B>LINEERR_OPERATIONUNAVAIL<BR></B>The specified operation is not available.<BR><B>LINEERR_OPERATIONFAILED<BR></B>The specified operation failed for unknown reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP">Not applicable.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">This function is used to map a phone number (address) assigned to a line device back to its <I>dwAddressID</I> in the range 0 to the number of addresses - 1 returned in the line's device capabilities. <B>lineMakeCall</B> allows the app to make a call by specifying a line handle and an address on the line. The address can be specified either as a <I>dwAddressID</I>, as a phone number, or as a device specific name or identifier. Using a phone number may be practical in environments where a single line is assigned lots of addresses.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineMakeCall</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Data Types:  <B>LINEADDRESSMODE</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT19"></A>lineGetAddressStatus</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="83pt" VALIGN="TOP"><COL WIDTH="339pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineGetAddressStatus</B>(<I>hLine, dwAddressID, lpAddressStatus</I>)<BR>This operation allows an application to query the specified address for its current status.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HLINE    <I>hLine<BR></I>Specifies a handle to the open line device.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwAddressID<BR></I>Specifies an address on the given open line device. This is the address to be queried.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LPLINEADDRESSSTATUS    <I>lpAddressStatus<BR></I>Specifies a far pointer to a variable sized data structure of type <B>LINEADDRESSSTATUS</B>.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:<BR><B>LINEERR_INVALLINEHANDLE<BR></B>The specified device handle is invalid.<BR><B>LINEERR_INVALADDRESSID<BR></B>The specified address ID is out of range.<BR><B>LINEERR_INVALPOINTER<BR></B>The specified pointer parameter is invalid.<BR><B>LINEERR_OPERATIONFAILED<BR></B>The specified operation failed for unknown reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP">Not applicable.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">None.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Data Types:  <B>LINEADDRESSSTATUS</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT20"></A>lineGetCallInfo</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="92pt" VALIGN="TOP"><COL WIDTH="330pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineGetCallInfo</B>(<I>hCall, lpCallInfo</I>)<BR>This operation enables an application to obtain fixed information about the specified call.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HCALL    <I>hCall<BR></I>Specifies a handle to the call to be queried.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LPLINECALLINFO    <I>lpCallInfo<BR></I>Specifies a far pointer to a variable sized data structure of type <B>LINECALLINFO</B>. Upon successful completion of the request, this structure is filled with call related information.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:<BR><B>LINEERR_INVALCALLHANDLE<BR></B>The specified call handle is invalid.<BR><B>LINEERR_INVALPOINTER<BR></B>The specified pointer parameter is invalid.<BR><B>LINEERR_OPERATIONFAILED<BR></B>The specified operation failed for unknown reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP"><I>hCall   </I>any state</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">A separate <B>LINECALLINFO</B> structure exists for every (inbound or outbound) call. The structure contains primarily fixed information about the call. An application would typically be interested in checking this information when it receives its handle for a call via the <B>LINE_CALLSTATE</B> message, or each time it receives notification via a <B>LINE_CALLINFO</B> message that parts of the call information structure have changed. These messages supply the handle for the call as a parameter.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Messages:  <B>LINE_CALLINFO</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Data Types:  <B>LINECALLINFO</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT21"></A>lineGetCalls</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="96pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineGetCalls</B>(<I>hLine, dwAddressID, hCall, dwCallSelect,    dwPrivilegeSelect, dwCallPrivilege, lpCallList</I>)<BR>This operation returns call handles selected by the specified set of parameters. The app can specify the privileges it wants to these calls. </P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HLINE    <I>hLine<BR></I>Specifies a handle to an open line device.<BR>DWORD    <I>dwAddressID<BR></I>Specifies an address on the given open line device.<BR>HCALL    <I>hCall<BR></I>Specifies a handle to a call.<BR>DWORD    <I>dwCallSelect<BR></I>Specifies the selection of calls that are requested, of type <B>LINECALLSELECT</B>. Values are:<BR>LINECALLSELECT_LINE<BR>Selects calls on this specified line device. The <I>hLine</I> parameter must be a valid line handle; <I>hCall</I> and <I>dwAddressID</I> are ignored.<BR>LINECALLSELECT_ADDRESS<BR>Selects call on the specified address. Both <I>hLine</I> and <I>dwAddressID</I> must be valid; <I>hCall</I> is ignored.<BR>LINECALLSELECT_CALL<BR>Selects calls related to the specified call. <I>hCall</I> must be valid; <I>hLine</I> and <I>dwAddressID</I> are both ignored. If <I>hCall</I> is a participating call in a conference call, then the conference call handle is returned; if <I>hCall</I> is a conference call, then handles for all participating calls are returned. <BR>DWORD    <I>dwPrivilegeSelect<BR></I>Specifies the privilege(s) the application must currently have to the calls to be selected, of type <B>LINECALLPRIVILEGE</B>. Multiple flags can be combined. Values are:<BR>LINECALLPRIVILEGE_NONE<BR>Included in the selection are calls for which the app does not have any access privileges, i.e., calls for which the app currently has no handle.<BR>LINECALLPRIVILEGE_MONITOR<BR>Included in the selection are calls for which the app has monitor privileges. <BR>LINECALLPRIVILEGE_OWNER<BR>Included in its selection are calls for which the app currently has owner privileges.<BR>DWORD    <I>dwCallPrivilege<BR></I>Specifies the privilege the application wants to have for the returned calls, of type <B>LINECALLPRIVILEGE</B>. If multiple values are specified, then the highest privilege will be assigned. Values are:<BR>LINECALLPRIVILEGE_NONE<BR>The app requests no privileges to the call, i.e., it wants to get rid of its current handles for the calls.<BR>LINECALLPRIVILEGE_MONITOR<BR>The app requests monitor privileges to the call. These privileges allow the app to monitor state changes and query information and status about the call.<BR>LINECALLPRIVILEGE_OWNER<BR>The app requests owner privileges to the call. These privileges allow the app to manipulate the call in ways that affect the state of the call.<BR>LPLINECALLLIST    <I>lpCallList<BR></I>Specifies a far pointer to a variable sized data structure of type <B>LINECALLLIST</B>. Upon successful completion of the request, call handles to all selected calls are returned in this structure. Only calls whose handles are returned in this list are affected. </P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALLINEHANDLE<BR>The specified line device handle is invalid and is expected to be valid.<BR>LINEERR_INVALADDRESSID<BR>The specified address ID is invalid and is expected to be valid.<BR>LINEERR_INVALCALLHANDLE<BR>The specified call handle is invalid and is expected to be valid.<BR>LINEERR_INVALCALLSELECT<BR>The specified call select parameter is invalid.<BR>LINEERR_INVALPRIVSELECT<BR>The specified call privilege selection parameter is invalid.<BR>LINEERR_INVALCALLPRIVILEGE<BR>The specified call privilege parameter is invalid.<BR>LINEERR_INVALPOINTER<BR>The specified pointer parameter is invalid.<BR>LINEERR_OPERATIONFAILED<BR>The specified operation failed for unknown reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP"><I>hCall    </I>Any state</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">An application can use <B>lineGetCalls</B> to get handles to calls, to change its privileges to calls, or to get rid of handles it currently has to calls. The app can select for which calls handles are to be returned and what privilege it wants to these calls. The selection is based on scope (call on a line, calls on an address, calls related to another call) and the privilege the app currently has to the calls. For example, an app can request call handles with owner privileges to all calls on a given address for which it currently has either no handle or only monitoring privileges. The app can, for example, also use this operation to get rid of all its call handles for all calls on the opened line device. Note that, as with <B>lineHandoff</B>, the handle will not be deallocated if the app is the sole owner of a non <I>idle</I> call. The app must first either explicitly drop the call or successfully hand off ownership to another app before it can do so.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">The app can invoke <B>lineGetCallInfo</B> and/or <B>lineGetCallStatus</B> for each call in the list to determine the call's information or status. </P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineHandoff</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Data Types:  <B>LINECALLSELECT</B>, <B>LINECALLPRIVILEGE</B>, <B>LINECALLLIST</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT22"></A>lineGetCallStatus</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="78pt" VALIGN="TOP"><COL WIDTH="343pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineGetCallStatus</B>(<I>hCall, lpCallStatus</I>)<BR>This operation returns the current status of the specified call.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HCALL    <I>hCall<BR></I>Specifies a handle to the call to be queried.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LPLINECALLSTATUS    <I>lpCallStatus<BR></I>Specifies a far pointer to a variable sized data structure of type <B>LINECALLSTATUS</B>. Upon successful completion of the request, this structure is filled with call status information.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><B>LINEERR_INVALCALLHANDLE<BR></B>The specified call handle is invalid.<BR><B>LINEERR_INVALPOINTER<BR></B>The specified pointer parameter is invalid.<BR><B>LINEERR_OPERATIONFAILED<BR></B>The specified operation failed for unknown reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP"><I>hCall<BR></I>Any state</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP"><B>lineCallStatus</B> returns the dynamic status of a call, whereas <B>lineGetCallInfo</B> returns primarily static information about a call. Call status information includes the current call state, detailed mode information related to the call while in this state (if any), as well as a list of the available API functions the application can invoke on the call while the call is in this state. An application would typically be interested in requesting this information when it receives notification about a call state change via the <B>LINE_CALLSTATE</B> message.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Data Types:  <B>LINECALLSTATUS</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT23"></A>lineGetDevCaps</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="83pt" VALIGN="TOP"><COL WIDTH="325pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineGetDevCaps</B>(<I>hApp</I>, <I>dwDeviceID, dwAPIVersion, dwLowVersion,   dwHighVersion, lpLineDevCaps</I>)<BR>This function queries a specified line device to determine its telephony capabilities. The returned information is valid for all addresses on the line device.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HLINEAPP    <I>hApp<BR></I>Specifies the handle to the app's registration with the API.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwDeviceID<BR></I>Specifies the line device to be queried.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwAPIVersion<BR></I>This number is zero if the API version number is to be negotiated, and <I>dwLowVersion</I> and <I>dwHighVersion</I> specify the API version range the application can operate with. <I>lpLineDevCaps</I> will contain the selected API version number and the Extension ID that defines any available device specific extensions.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><I>dwAPIVersion</I> is non-zero if the API version number has been previously negotiated, and <I>dwLowVersion</I> and <I>dwHighVersion</I> specify the Extension version range of the device specific extensions (specific to the Extension ID) the app can operate with. <I>lpLineDevCaps</I> will contain the selected Extension version number.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwLowVersion<BR></I>If <I>dwAPIVersion</I> is zero, this field specifies the earliest API version the app is compliant with. The high order word is the major version number, the low order word is the minor version number.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">If <I>dwAPIVersion</I> is non zero, this field specifies the earliest Extension version the app is compliant with (specific to the Extension ID returned in <I>lpLineDevCaps</I>). The high order word is the major version number, the low order word is the minor version number.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwHighVersion<BR></I>If <I>dwAPIVersion</I> is zero, this field specifies the latest API version the app is compliant with. The high order word is the major version number, the low order word is the minor version number.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">If <I>dwAPIVersion</I> is non zero, this field specifies the latest Extension version the app is compliant with (specific to the Extension ID returned in <I>lpLineDevCaps</I>). The high order word is the major version number, the low order word is the minor version number.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LPLINEDEVCAPS    <I>lpLineDevCaps<BR></I>Specifies a far pointer to a variable sized structure of type <B>LINEDEVCAPS</B>. Upon successful completion of the request, this structure is filled with line device capabilities information.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><B>LINEERR_INVALAPPHANDLE<BR></B>The specified app registration handle is invalid.<BR><B>LINEERR_BADDEVICEID<BR></B>The specified line device ID is out of range.<BR><B>LINEERR_NODRIVER<BR></B>The driver was not installed.<BR><B>LINEERR_INCOMPATIBLEVERSION<BR></B>The app requested a version range that cannot supported by the Telephony API implementation and/or corresponding service provider version.<BR><B>LINEERR_INVALPOINTER<BR></B>The specified pointer parameter is invalid.<BR><B>LINEERR_OPERATIONFAILED<BR></B>The specified operation failed for unknown reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP">Not applicable.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">Use <B>lineInitialize</B> to determine the number of line devices present in the system. The device ID specified by <I>dwDeviceID</I> varies from zero to one less than the number of line devices present.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><B>LineGetDevCaps</B> is invoked either once or twice, depending on whether or not the application wants to use device specific extensions. </P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">When called for the first time, the app must negotiate the API version number to use. It does by specifying <I>dwAPIVersion</I> as zero and providing the API version range in <I>dwLowVersion</I> and <I>dwHighVersion</I>. <I>lpLineDevCaps</I> returns the selected API version number, and Extension ID, and the line's device capabilities for the selected API version.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">If the app wants to enable the extensions defined by the Extension ID, it call <B>lineGetDevCaps</B> a second time. The app specifies the previously negotiated API version as <I>dwAPIVersion</I>, and provides the Extension ID-compatible version range in <I>dwLowVersion</I> and <I>dwHighVersion</I>. In addition to the information returned previously, <I>lpLineDevCaps</I> also returns the selected Extension version number and any device specific device capabilities for this extension.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">The API and Extension version numbers are those under which the API, Telephony DLL and service provider must operate. If version ranges do not overlap, then the app and API or service provider versions are incompatible and an error is returned.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">One of the fields in the <B>LINEDEVCAPS</B> structure returned by this function contains the number of addresses assigned to the specified line device. The actual address IDs used to reference individual addresses vary from zero to one less than the returned number. The capabilities of each address may be different. Use <B>lineGetAddressCaps</B> for each available &lt;<I>dwDeviceID, dwAddressID</I>&gt; combination to determine the exact capabilities of each address.</P></TD></TR><TR><TD VALIGN="TOP"> <B>See Also</B></P></TD><TD VALIGN="TOP">Data Types:  <B>LINEDEVCAPS</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT24"></A>lineGetID</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="330pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineGetID</B>(<I>hLine, dwAddressID, hCall, dwSelect, lpDeviceID,    lpszDeviceClass</I>)<BR>This function returns a device ID for the specified device class associated with the selected line, address or call.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HLINE    <I>hLine<BR></I>Specifies a handle to an open line device.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwAddressID<BR></I>Specifies an address on the given open line device.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">HCALL    <I>hCall<BR></I>Specifies a handle to a call.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwSelect<BR></I>Specifies the whether the device ID requested is associated with the line, address or a single call, of type <B>LINECALLSELECT</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><B>LINECALLSELECT_LINE<BR></B>Selects the specified line device. The <I>hLine</I> parameter must be a valid line handle; <I>hCall</I> and <I>dwAddressID</I> are ignored.<BR><B>LINECALLSELECT_ADDRESS<BR></B>Selects the specified address on the line. Both <I>hLine</I> and <I>dwAddressID</I> must be valid; <I>hCall</I> is ignored.<BR><B>LINECALLSELECT_CALL<BR></B>Selects the specified call. <I>hCall</I> must be valid; <I>hLine</I> and <I>dwAddressID</I> are both ignored. <BR><B>LPVARSTRING    </B><B><I>lpDeviceID<BR></I></B>Specifies a far pointer to the memory location of type <B>VARSTRING</B> where the device ID is returned. Upon successful completion of the request, this location is filled with the device ID. The format of the returned information depends on the method used by the device class (API) for naming devices. <BR><B>LPCSTR    const </B><B><I>lpszDeviceClass<BR></I></B>Specifies a far pointer to a NULL-terminated ASCII string that specifies the device class of the device whose ID is requested. Valid device class strings are those used in the SYSTEM.INI section to identify device classes.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><B>LINEERR_INVALLINEHANDLE<BR></B>The <I>hLine</I> parameter is an invalid handle.<BR><B>LINEERR_INVALADDRESSID<BR></B>The specified <I>dwAddressID</I> parameter is invalid.<BR><B>LINEERR_INVALCALLHANDLE<BR></B>The <I>hCall</I> parameter is an invalid handle.<BR><B>LINEERR_INVALCALLSELECT<BR></B>The specified <I>dwCallSelect</I> parameter is invalid.<BR><B>LINEERR_NODEVICE<BR></B>The line device has no associated device for the given device class.<BR><B>LINEERR_INVALPOINTER<BR></B>One or more of the specified pointer parameters are invalid.<BR><B>LINEERR_OPERATIONFAILED<BR></B>The specified operation failed for unknown reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP">Not applicable.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">This function can be used to retrieve a line device ID given a line handle. This is useful after a line device has been opened using <B>LINE_MAPPER</B> as a device ID in order to determine the real line device ID of the opened line. This function can also be used to obtain the device ID of a phone device or media device (e.g., mci waveform, mci midi, wave, fax, etc.) associated with a call, address or line. This ID can then be used with the appropriate API (e.g., phone, mci, midi, wave, etc.) to select the corresponding media device associated with the specified call.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Note that the notion of Windows device class is different from that of media mode. For example, the interactive voice or stored voice media modes may be accessed using either the mci waveaudio or the low level wave device classes. A media modes describes a format of information on a call, a device class defines a Windows API used to manage that stream. Often, a single media stream may be accessed using multiple device classes, or a single device class (e.g., the Windows COMM API) may provide access to multiple media modes. </P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">None.</P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT25"></A>lineGetLineDevStatus</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="321pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineGetLineDevStatus</B>(<I>hLine, lpLineDevStatus</I>)<BR>This operation enables an application to query the specified open line device for its current status.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HLINE    <I>hLine<BR></I>Specifies a handle to the open line device to be queried.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LPLINEDEVSTATUS    <I>lpLineDevStatus<BR></I>Specifies a far pointer to a variable sized data structure of type <B>LINEDEVSTATUS</B>. Upon successful completion of the request, this structure is filled with the line's device status.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><B>LINEERR_INVALLINEHANDLE<BR></B>The specified line device handle is invalid.<BR><B>LINEERR_INVALPOINTER<BR></B>The specified pointer parameter is invalid.<BR><B>LINEERR_OPERATIONFAILED<BR></B>The specified operation failed for unknown reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP">Not applicable.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">An application uses <B>lineGetLineDevStatus</B> to query the line device for its current line status. This status information applies globally to all addresses on the line device. Use <B>lineGetAddressStatus</B> to determine status information about a specific address on a line.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Messages:  <B>LINE_LINEDEVSTATE</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Data Types:  <B>LINEDEVSTATUS</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT26"></A>lineGetNumRings</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="92pt" VALIGN="TOP"><COL WIDTH="325pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineGetNumRings</B>(<I>hLine, dwAddressID, lpdwNumRings</I>)<BR>This function can be used by any application to determine the number of rings an inbound call on the given address should ring prior to answering the call.   </P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HLINE    <I>hLine<BR></I>Specifies a handle to the open line device.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwAddressID<BR></I>Specifies an address on the line device. </P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LPDWORD    <I>lpdwNumRings<BR></I>Specifies the number of rings that is the minimum of all current <B>lineSetNumRings</B> requests.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><B>LINEERR_INVALLINEHANDLE<BR></B>The specified device handle is invalid.<BR><B>LINEERR_INVALADDRESSID<BR></B>The specified address ID is out of range.<BR><B>LINEERR_INVALPOINTER<BR></B>The specified pointer parameter is invalid.<BR><B>LINEERR_OPERATIONFAILED<BR></B>The specified operation failed for unknown reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP">Not applicable.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP"><B>lineGetNumRings</B> and <B>lineSetNumRings</B> when used in combination provide a mechanism to support the implementation of toll saver features across multiple independent applications.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">An application that receives a handle for a call in the <I>offering</I> state and a <B>LINE_LINEDEVSTATE</B> <I>ringing</I> message should wait a number of rings equal to the number returned by <B>lineGetNumRings</B> before answering the call in order to honor the toll saver settings across all applications. <B>lineGetNumRings</B> returns the minimum of all application's number of rings specified via <B>lineSetNumRings</B>. Since this number may vary dynamically, an application should invoke <B>lineGetNumRings</B> each time it has the option to answer a call. If no application has called <B>lineSetNumRings</B>, then the number or rings returned is 0xFFFFFFFF. A separate <B>LINE_LINEDEVSTATE </B><I>ringing</I> message is sent to the application for each ring cycle.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">If call classification is performed by the API implementation by means of answering all calls of unknown media mode and filtering the media stream, then the API implementation will honor this number as well. </P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Note that this operation is purely informational and does not in itself affect the state of any calls on the line device. </P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions: <B>lineSetNumRings</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Messages: <B>LINE_LINEDEVSTATE</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT27"></A>lineGetRequest</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="74pt" VALIGN="TOP"><COL WIDTH="339pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineGetRequest</B>(<I>hApp, dwRequestMode, lpRequestBuffer</I>)<BR>This function retrieves the next by-proxy request for the specified request mode.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HLINEAPP   <I>hApp<BR></I>Specifies the application's usage handle for the line portion of the API.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwRequestMode<BR></I>Specifies the type of request that is to be obtained, of type <B>LINEREQUESTMODE</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><B>LINEREQUESTMODE_MAKECALL<BR></B>A <B>tapiRequestMakeCall</B> request.<BR><B>LINEREQUESTMODE_MEDIACALL<BR></B>A <B>tapiRequestMediaCall</B> request.<BR><B>LINEREQUESTMODE_DROP<BR></B>A <B>tapiRequestDrop</B> request.<BR><B>LINEREQUESTMODE_LOGENTRY<BR></B>A <B>lineRequestLogEntry</B> request.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LPVOID    <I>lpRequestBuffer<BR></I>Specifies a far pointer to a memory buffer where the parameters of the request are to be placed. The size of the buffer and the interpretation of the information placed in the buffer depends on the request mode. The application-allocated buffer is assumed to be of sufficient size to hold the request. <BR>If <I>dwRequestMode</I> is LINEREQUEST_MAKECALL, then interpret the content of the request buffer using the <B>LINEREQMAKECALL</B> structure.<BR>If <I>dwRequestMode</I> is LINEREQUEST_MEDIACALL, then interpret the content of the request buffer using the <B>LINEREQMEDIACALL</B> structure.<BR>If <I>dwRequestMode</I> is LINEREQUEST_DROP, then interpret the content of the request buffer using the <B>LINEREQDROP</B> structure.<BR>If <I>dwRequestMode</I> is LINEREQUEST_LOGENTRY, then interpret the content of the request buffer using the <B>LINEREQLOGENTRY</B> structure.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><B>LINEERR_INVALAPPHANDLE<BR></B>The specified application handle is invalid.<BR><B>LINEERR_INVALREQUESTMODE<BR></B>The specified request mode is invalid.<BR><B>LINEERR_NOTREGISTERED<BR></B>The specified request mode is invalid.<BR><B>LINEERR_NOREQUEST<BR></B>There currently is no request pending of the indicated mode.<BR><B>LINEERR_INVALPOINTER<BR></B>The specified request buffer pointer parameter is invalid.<BR><B>LINEERR_OPERATIONFAILED<BR></B>The specified operation failed for unknown reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP">Not applicable.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">An telephony-enabled application can request that a call be placed on its behalf by invoking <B>tapiRequestMakeCall</B> or <B>tapiRequestMediaCall</B>, and drop a media call via <B>tapiRequestDrop</B>. Additionally, other applications can request information be logged with a given call using <B>lineRequestLogEntry</B>. These requests are queued by the Telephony DLL and the (highest priority) application that has registered to handle the request is sent a <B>LINE_REQUEST</B> message with indication of the mode of the request that is pending. This application will typically be the user's call control application. Next, the call control application that receives this message invokes <B>lineGetRequest</B> specifying the request mode and a buffer that is large enough to hold the request. The call control application then interprets and executes the request. For media mode handling, the serving application may need to send Windows messages back to the original application that made the request. The <B>TAPI_REPLY</B> message is used for this purpose. </P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">After execution of <B>lineGetRequest</B>, the Telephony DLL purges the request from its internal queue, making available room for a subsequent request. It is possible, therefore, for a new <B>LINE_REQUEST</B> message to be received immediately upon execution of <B>lineGetRequest</B>, should the same or another application issue another request. It is the responsibility of the request recipient application to handle this eventuality by some mechanism (e.g., making note of the additional <B>LINE_REQUEST</B> and deferring a subsequent <B>lineGetRequest</B> until processing of the preceeding request completes, get the subsequent request and buffer as necessary, or other appropriate handling). Note that the subsequent <B>LINE_REQUEST</B> should not be ignored because it will not be repeated by the Telephony DLL.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions: <B>tapiRequestMakeCall, tapiRequestMediaCall, tapiRequestDrop, tapiRequestLogEntry, lineRegisterRequestRecipient</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Messages: <B>TAPI_REPLY, LINE_REQUEST</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Data Types: <B>LINEREQUESTMODE, LINEREQMAKECALL, LINEREQMEDIACALL, LINEREQDROP, LINEREQLOGENTRY</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT28"></A>lineGetStatusMessages</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="78pt" VALIGN="TOP"><COL WIDTH="343pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineGetStatusMessages</B>(<I>hLine, lpdwLineStates, lpdwAddressStates</I>)<BR>This operation enables an application to query for which notification messages the app is set up to receive for events related to status changes for the specified line or any of its addresses</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HLINE    <I>hLine<BR></I>Specifies a handle to the line device.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LPDWORD    <I>lpdwLineStates<BR></I>Specifies a bit array that identifies for which line device status changes a message is to be sent to the application, of type <B>LINEDEVSTATE</B>. If a flag is TRUE, then that message is enabled; FALSE if disabled. Values are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><B>LINEDEVSTATE_OTHER<BR></B>An other device status item has changed.<BR><B>LINEDEVSTATE_RINGING<BR></B>The switch tells the line to alert the user.<BR><B>LINEDEVSTATE_CONNECTED<BR></B>The line was previously disconnected and is now connected to the API.<BR><B>LINEDEVSTATE_DISCONNECTED<BR></B>This line was previously connected and is now disconnected from the API.<BR><B>LINEDEVSTATE_MSGWAITON<BR></B>The message waiting indicator is turned on.<BR><B>LINEDEVSTATE_MSGWAITOFF<BR></B>The message waiting indicator is turned off.<BR><B>LINEDEVSTATE_INSERVICE<BR></B>The line is connected to the API. This happens when the API is first activated, or when the line wire is physically plugged in and in service at the switch while the API is active.<BR><B>LINEDEVSTATE_OUTOFSERVICE<BR></B>The line is out of service at the switch or physically disconnected. The API cannot be used to operate on the line device.<BR><B>LINEDEVSTATE_MAINTENANCE<BR></B>Maintenance is being performed on the line at the switch. The API cannot be used to operate on the line device.<BR><B>LINEDEVSTATE_OPEN<BR></B>The line has been opened by some application.<BR><B>LINEDEVSTATE_CLOSE<BR></B>The line has been closed by some application.<BR><B>LINEDEVSTATE_NUMCALLS<BR></B>The number of calls on the line device has changed.<BR><B>LINEDEVSTATE_TERMINALS<BR></B>The terminal settings have changed.<BR><B>LINEDEVSTATE_ROAMMODE<BR></B>The roam mode of the line device has changed.<BR><B>LINEDEVSTATE_BATTERY<BR></B>The battery level has changed significantly (cellular).<BR><B>LINEDEVSTATE_SIGNAL<BR></B>The signal level has changed significantly (cellular).<BR><B>LINEDEVSTATE_DEVSPECIFIC<BR></B>The line's device specific information has changed.<BR><B>LINEDEVSTATE_REINIT<BR></B>Items have changed in the configuration of line devices. To become aware of these changes (e.g., new line devices) the app should reinitialize its use of the API. The <I>hDevice</I> parameter is left NULL for this state change as it applies to any of the lines in the system.<BR><B>LINEDEVSTATE_LOCK<BR></B>The locked status of the line device has changed.<BR><B>LPDWORD    </B><B><I>lpdwAddressStates<BR></I></B>Specifies a bit array that identifies for which address status changes a message is to be sent to the application, of type <B>LINEADDRESSSTATE</B>. If a flag is TRUE, then that message is enabled; FALSE if disabled. Values are:<BR><B>LINEADDRESSSTATE_OTHER<BR></B>An status item or multiple items in the address' status not listed below have changed. The app should check the current address status to determine which items have changed.<BR><B>LINEADDRESSSTATE_DEVSPECIFIC<BR></B>The device specific item of the address status has changed.<BR><B>LINEADDRESSSTATE_INUSEZERO<BR></B>The address has changed to idle; i.e., it is now in use by zero stations.<BR><B>LINEADDRESSSTATE_INUSEONE<BR></B>The address has changed from being idle or from being in use by many bridged stations to being in use by just one station.<BR><B>LINEADDRESSSTATE_INUSEMANY<BR></B>The monitored or bridged address has changed to being in use by one station to being used by more than one station.<BR><B>LINEADDRESSSTATE_NUMCALLS<BR></B>The number of calls on the address has changed. This is the result of either a new inbound call, or an outbound call on the address, a call changing its hold status, etc.<BR><B>LINEADDRESSSTATE_FORWARD<BR></B>The forwarding status of the address has changed including the number of rings for determining a no answer condition. The app should check the address status to determine details about the address' current forwarding status.<BR><B>LINEADDRESSSTATE_TERMINALS<BR></B>The terminal settings for the address have changed.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><B>LINEERR_INVALLINEHANDLE<BR></B>The specified line handle is invalid.<BR><B>LINEERR_INVALPOINTER<BR></B>One or more of the specified pointer parameters are invalid.<BR><B>LINEERR_OPERATIONFAILED<BR></B>The specified operation failed for unspecified reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP">Not applicable.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">The API defines a number of messages that notify applications about events occurring on lines and addresses. An app may not be interested in receiving all address and line status change messages. <B>lineSetStatusMessages</B> can be used to select which messages the app wants to receive. By default, address status and line status reporting is disabled.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineSetStatusMessages</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Messages:  <B>LINE_LINEDEVSTATE</B>,<B> LINE_ADDRESSSTATE</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Data Types:  <B>LINEDEVSTATE, LINEADDRESSSTATE</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT29"></A>lineHandoff</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="69pt" VALIGN="TOP"><COL WIDTH="339pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineHandoff</B>(<I>hCall, lpsModuleName, dwSize, dwMediaMode,     dwCallPrivilege</I>)<BR>This function is used to pass ownership of the specified call to another application. The application can be either specified directly via its module name, or indirectly as the highest priority application that handles call of the specified media mode. Handing off of calls can also be used to alter one's privilege to a specified call, including deallocating one's call handle.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HCALL    <I>hCall<BR></I>Specifies a handle to the call to be handed off.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LPCSTR    <B>const</B> <I>lpsModuleName<BR></I>Specifies a far pointer to a string of the format specified in the <B>dwStringFormat</B> field of the line device capabilities. If this parameter is non-NULL, then it contains the module name of the application that is the target of the handoff. If NULL, then the handoff target is the highest priority application that has opened the line for owner privileges for the specified media mode.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwSize<BR></I>Specifies the size in bytes of the string pointed at by the <I>lpsModuleName</I> parameter. This parameter is ignored in <I>lpsModuleName</I> is NULL.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwMediaMode<BR></I>Specifies the media mode used to identify the target for the handoff, of type <B>LINEMEDIAMODE</B>. The <I>dwMediaMode</I> parameter indirectly identifies the target application that is to receive ownership of the call. The highest priority application that has opened the line device for the specified media mode will be the application that receives the call. Values are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEMEDIAMODE_NONE<BR>This is used as a NULL value for the data type. If specified, handoff target it none, i.e., the app just wants to alter its privilege to a call. This is used if an app wants to deallocate its call handle.<BR>LINEMEDIAMODE_UNKNOWN<BR>The target app is the one that handles calls of unknown media mode; i.e., unclassified calls.<BR>LINEMEDIAMODE_INTERACTIVEVOICE<BR>The target app is the one that handles calls with the interactive voice media mode; i.e., live conversations.<BR>LINEMEDIAMODE_AUTOMATEDVOICE<BR>The presence of voice energy on the call and the voice is locally handled by an automated application.<BR>LINEMEDIAMODE_DIGITALDATA<BR>The target app is the one that handles calls that are digital data calls.<BR>LINEMEDIAMODE_G3FAX<BR>The target app is the one that handles calls with the group 3 fax media mode.<BR>LINEMEDIAMODE_G4FAX<BR>The target app is the one that handles calls with the group 4 fax media mode.<BR>LINEMEDIAMODE_DATAMODEM<BR>The target app is the one that handles calls with the data modem media mode.<BR>LINEMEDIAMODE_TELETEX<BR>The target app is the one that handles calls with the teletex media mode.<BR>LINEMEDIAMODE_VIDEOTEX<BR>The target app is the one that handles calls with the videotex media mode.<BR>LINEMEDIAMODE_TELEX<BR>The target app is the one that handles calls with the telex media mode.<BR>LINEMEDIAMODE_MIXED<BR>The target app is the one that handles calls with the ISDN mixed media mode.<BR>LINEMEDIAMODE_TDD<BR>The target app is the one that handles calls with the TDD (Telephony Devices for the Deaf) media mode.<BR>LINEMEDIAMODE_ADSI<BR>The target app is the one that handles calls with the ADSI (Analog Display Services Interface) media mode.<BR>DWORD    <I>dwCallPrivilege<BR></I>Specifies the call privileges the invoking app wants to remain with for the specified call, of type <B>LINECALLPRIVILEGE</B>. Values are:<BR>LINECALLPRIVILEGE_NONE <BR>The application wants to get rid of its call handle. This corresponds to a request to deallocate the app's call handle.<BR>LINECALLPRIVILEGE_MONITOR<BR>The application only wants to monitor the specified call.<BR>LINECALLPRIVILEGE_OWNER<BR>The application wants to remain co-owner of the call.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALCALLHANDLE<BR>The specified call handle is invalid.<BR>LINEERR_INVALMEDIAMODE<BR>The specified media mode parameter is invalid.<BR>LINEERR_INVALMODULENAME<BR>The specified module name parameter is invalid.<BR>LINEERR_INVALCALLPRIVILEGE<BR>The specified call privilege parameter is invalid.<BR>LINEERR_TARGETNOTFOUND<BR>A target for the call handoff was not found.<BR>LINEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP"><I>hCall    </I>Any state</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">Call handoff allows ownership of a call to be passed among applications. There are two flavors of handoff. If the application knows the module name of the target application, then it can specify the module name of the application. If an instance of the target application has opened the line device, then ownership of the call will be passed to the other app; otherwise, the handoff will fail and an error is returned. </P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">The second type of handoff is based on media mode. Here, the application indirectly specifies the target application by means of a media mode. The highest priority app that has currently opened the line device for that media mode is the target for the handoff. If there is no such application, then the handoff fails and an error is returned.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><B>lineHandoff</B> does not change the media mode of a call. To change the media mode of a call the app should use <B>lineSetMediaMode</B> on the call specifying the new media mode. This changes the call's media as stored in the call's <B>LINECALLINFO</B> structure. </P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">If handoff is successful, then the receiving application will receive a <B>LINE_CALLSTATE</B> message for the call. This message indicates that the receiving application has <I>owner</I> privileges to the call. Additionally, the change in the number of owners and/or monitors for the call may have changed which is reported via the <B>LINE_CALLINFO</B> message. The receiving app can then invoke <B>lineGetCallStatus</B> and <B>lineGetCallInfo</B> to find out more information about the received call.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">If the operation fails, then the privileges of the invoking application to the call are unchanged. Instead of being given handles to existing calls, any application that has opened a line device can also ask for handles to calls on the line device by invoking <B>lineGetCalls</B>.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">An app that has obtained a call handle for a call must deallocate the call handle when it is finished using the call handle. To deallocate a call handle, an app must invoke <B>lineHandoff</B> providing the call handle to be deallocated, with <I>dwMediaMode</I> equal to LINEMEDIAMODE_NONE and <I>dwCallPrivilege</I> equal to LINECALLPRIVILEGE_NONE. The app's call handle is void as soon as the function returns successful. Multiple call handles can also be deallocated at once via <B>lineGetCalls</B>. A call handle cannot be deallocated if the app is the sole owner of the call and the call is not <I>idle</I>.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineGetCalls</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Messages:  <B>LINE_CALLSTATE</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Data Types:  <B>LINEMEDIAMODE, LINECALLPRIVILEGE</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT30"></A>lineHold</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="334pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineHold</B>(<I>hCall</I>)<BR>This function places the specified call on hold.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HCALL    <I>hCall<BR></I>Specifies a handle to the call to be placed on hold. The app must be an owner of the call.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALCALLHANDLE<BR>The specified call handle is invalid.<BR>LINEERR_NOTOWNER<BR>The app does not have owner privileges to the specified call.<BR>LINEERR_INVALCALLSTATE<BR>The specified call is not in a valid state for the requested operation.<BR>LINEERR_OPERATIONUNAVAIL<BR>The specified operation is not available.<BR>LINEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reason.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP"><I>hCall    </I>connected</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">The call on hold is temporarily disconnected allowing the application to use the line device for making or answering other calls. <B>lineHold</B> performs a so-called "hard hold" of the specified call, as opposed to a "consultation call". A call on hard hold typically cannot be transferred or included in a conference call, whereas a consultation call can. Consultation calls are initiated using <B>lineSetupTransfer</B>, <B>lineSetupConference</B>, or<B> linePrepareAddToConference</B>.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">After a call has been successfully placed on hold, the call state will typically transition to <I>onHold</I>. A held call is retrieved via <B>lineUnhold</B>. While a call is on hold, the app may receive <B>LINE_CALLSTATE</B> messages about state changes of the held call. For example, if held party hangs up, the call state may transition to <I>disconnected</I>.  </P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineUnhold</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Messages:  <B>LINE_CALLSTATE</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT31"></A>lineInitialize</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="78pt" VALIGN="TOP"><COL WIDTH="339pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineInitialize</B>(<I>lphApp, hInstance, lpfnCallback, lpsAppName, dwSize,     lpdwNumDevs</I>)<BR>This function initializes the application's use of the Telephony API DLL for subsequent use of the line abstraction. It registers the application's specified notification mechanism and returns the number of line devices available to the application. A line device is any device that provides an implementation for the line-prefixed functions in the Telephony API.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">LPHLINEAPP    <I>lphApp<BR></I>Specifies a far pointer to a location that is filled with the app's usage handle for the API.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">HINSTANCE   <I> hInstance<BR></I>Specifies the instance handle of the client application or DLL.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINECALLBACK    <I>lpfnCallback<BR></I>Specifies the address of a callback function to be invoked related to status and events on the line device, addresses, or calls.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LPCSTR    <B>const</B><I> lpsAppName<BR></I>Specifies a far pointer to a string of the format specified in the <B>dwStringFormat</B> field of the line device capabilities. If this parameter is non-NULL, then it contains an application-supplied name of the app. This name is provided in the <B>LINECALLINFO</B> structure to indicate in a user-friendly way, which application originated, or orignally accepted or answered the call. This information can be useful for call logging purposes. If <I>lpsAppName</I> is NULL, then the application's module name will used instead.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwSize<BR></I>Specifies the size in bytes of the string pointed at by the <I>lpsAppName</I> parameter. This parameter is ignored in <I>lpsAppName</I> is NULL.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LPDWORD    <I>lpdwNumDevs<BR></I>Specifies a far pointer to a DWORD sized location. Upon successful completion of this request, this location is filled with the number of line devices available to the application.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALAPPNAME<BR>The specified app name is invalid.<BR>LINEERR_INVALPOINTER<BR>One or more of the specified pointer parameters are invalid.<BR>LINEERR_RESOURCEUNAVAIL<BR>The specified operation cannot be completed because of resource overcommitment.<BR>LINEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reason.</P></TD></TR><TR><TD VALIGN="TOP"><B>Callback</B></P></TD><TD VALIGN="TOP">VOID FAR PASCAL<B> lineCallbackFunc</B>(<I>hDevice, dwMsg, dwCallbackInstance, dwParam1, dwParam2, dwParam3</I>) <BR><B>lineCallbackFunc</B> is a placeholder for the application-supplied function name.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HANDLE    <I>hDevice<BR></I>Specified a handle to either a line device or a call associated with the callback. The nature of this handle (line handle or call handle) can be determined by the context provided by <I>dwMsg</I>.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwMsg<BR></I>Specifies a line or call device message.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwCallbackInstance<BR></I>Specifies callback instance data passed back to the application in the callback. This DWORD is not interpreted by the API.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwParam1<BR></I>Specifies a parameter for the message.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwParam2<BR></I>Specifies a parameter for the message.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwParam3<BR></I>Specifies a parameter for the message.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">The actual parameters passed to the application's callback function are described in the Messages Chapter of this document.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">All callbacks occur in the application's context. The callback function must reside in a dynamic link library (DLL) or application module and be exported in the module definition file. You must use <B>MakeProcInstance</B> to get a procedure-instance address for the callback function.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">The app can refer to individual line devices by using line device IDs that range from zero to <I>dwNumDevs</I> - 1. An application should not assume that these line devices are capable of anything beyond what is specified by the simple telephony subset without first querying their device capabilities via <B>lineGetDevCaps</B> and <B>lineGetAddressCaps</B>.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:<B>  lineShutdown</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT32"></A>lineMakeCall</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="69pt" VALIGN="TOP"><COL WIDTH="334pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineMakeCall</B>(<I>hLine, lphCall, lpszDestAddress, dwCountryCode,    lpCallParams</I>)<BR>This function places a call on the specified line to the specified destination address. Optionally, call parameters can be specified if anything but default call setup parameters are requested.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HLINE    <I>hLine<BR></I>Specifies a handle to the open line device on which a call is to be originated.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LPHCALL    <I>lphCall<BR></I>Specifies a far pointer to a <B>HCALL</B> handle. This location is filled with a handle identifying the new call as soon as this function call returns. Use this handle to identify the call when invoking other telephony operations on the call. The app will initially be the sole owner of this call. This handle is void if the function returns an error (synchronously or asynchronously via the reply message).</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LPCSTR   <B>const</B> <I>lpszDestAddress<BR></I>Specifies a far pointer to the destination address. This follows the standard dialable number format. This pointer may be specified as NULL for non-dialed addresses (i.e., a hot phone) or when all dialing will be performed using <B>lineDial</B>. In the latter case, <B>lineMakeCall</B> will allocate an available call appearance which would typically remain in the <I>dialtone</I> state until dialing begins. Service providers that have inverse multiplexing capabilities may allow an application to specify multiple addresses at once.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwCountryCode<BR></I>Specifies the country code of the called party. If a value of zero is specified, then a default will be used by the implementation.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LPLINECALLPARAMS    <B>const</B> <I>lpCallParams<BR></I>Specifies a far pointer to a <B>LINECALLPARAMS</B> structure. This structure allows the application to specify how it wants the call to be set up. If NULL is specified, then a default 3.1kHz voice call is established, and an arbitrary origination address on the line is selected.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">This structure allows the application to select such elements as the call's bearer mode, data rate, expected media mode, origination address, blocking of caller ID information, dialing parameters, etc.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALLINEHANDLE<BR>The specified line device handle is invalid.<BR>LINEERR_INVALADDRESS<BR>The specified address is invalid.<BR>LINEERR_INVALPOINTER<BR>One or more of the specified pointer parameters are invalid.<BR>LINEERR_CALLUNAVAIL<BR>All call appearances on the specified address are currently in use.<BR>LINEERR_INVALPARAM<BR>The specified country code is invalid.<BR>LINEERR_INVALCALLPARAMS<BR>The specified call parameter structure is invalid.<BR>LINEERR_ADDRESSBLOCKED<BR>The specified address is blocked from being dialed on the specified call.<BR>LINEERR_BILLINGREJECTED<BR>The billing information specified as part of the destination address has been rejected.<BR>LINEERR_RESOURCEUNAVAIL<BR>The specified operation cannot be completed because of resource overcommitment.<BR>LINEERR_OPERATIONUNAVAIL<BR>The specified operation is not available.<BR>LINEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reason.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP">Not applicable</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">After dialing has completed, several <B>LINE_CALLSTATE</B> messages will typically be sent to the application to notify it about the progress of the call. No generally valid sequence of call state transitions is specified as no single fixed sequence of transitions can be guaranteed in practice. A typical sequence may cause a call to transition from <I>dialtone</I>, <I>dialing</I>, <I>proceeding</I>, <I>ringback</I>, to <I>connected</I>. With non-dialed lines, the call may typically transition directly to <I>connected</I> state.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">An application has the option to specify an originating address on the specified line device. A service provider that models all stations on a switch as addresses on a single line device allows the application to originate calls from any of these stations using <B>lineMakeCall</B>.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">The call parameters allow the application to make non voice calls or request special call setup options that are not available by default.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">An application can partially dial using <B>lineMakeCall</B> and continue dialing using <B>lineDial</B>. To abandon a call attempt, use <B>lineDrop</B>.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineDial</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Messages:  <B>LINE_CALLSTATE</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Data types:  <B>LINECALLPARAMS</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT33"></A>lineMonitorDigits</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="78pt" VALIGN="TOP"><COL WIDTH="343pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG <B>lineMonitorDigits</B>(<I>hCall, dwDigitModes</I>)<BR>This function enables and disables the unbuffered detection of digits received on the call. Each time a digit of the specified digit mode(s) is detected a message is sent to the application indicating which digit has been detected.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HCALL    <I>hCall<BR></I>Specifies a handle to the call on which digits are to be detected.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwDigitModes<BR></I>Specifies the digit mode(s) that are to be monitored, of type <B>LINEDIGITMODE</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEDIGITMODE_PULSE<BR>Detect digits as audible clicks that are the result of rotary pulse sequences. Valid digits for pulse are '0' through '9'.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEDIGITMODE_DTMF<BR>Detect digits as DTMF tones. Valid digits for DTMF are '0' through '9', 'A', 'B', 'C', 'D', '*', and '#'. </P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEDIGITMODE_DTMFEND<BR>Detect and provide application notification of DTMF down edges. Valid digits for DTMF are '0' through '9', 'A', 'B', 'C', 'D', '*', and '#'.<BR>A <I>dwDigitModes</I> with a value of zero cancels digit monitoring.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALCALLHANDLE<BR>The specified call handle is invalid.<BR>LINEERR_INVALDIGITS<BR>The specified digits are not valid.<BR>LINEERR_INVALDIGITMODE<BR>The specified digit mode is invalid.<BR>LINEERR_RESOURCEUNAVAIL<BR>The specified operation cannot be completed because of resource overcommitment.<BR>LINEERR_OPERATIONUNAVAIL<BR>The operation is not available.<BR>LINEERR_OPERATIONFAILED<BR>The operation failed for unspecified reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP"><I>hCall    </I>Any state</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">This function is considered successful if digit monitoring has been correctly initiated; not when digit monitoring has terminated. Digit monitoring will remain in effect until it is explicitly disabled by calling <B>lineMonitorDigits</B> with <I>dwDigitModes</I> set to zero, or until the call transitions to <I>idle</I>.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Although this function can be invoked in any call state, digits will typically only be detected while the call is in the <I>connected</I> state.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Each time a digit is detected, a <B>LINE_MONITORDIGITS</B> message is sent to the application passing the detected digit as a parameter.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">An application can use <B>lineMonitorDigits</B> to enable or disable unbuffered digit detection. It can use <B>lineGatherDigits</B> for buffered digit detection. After buffered digit gathering is complete, a <B>LINE_GATHERDIGITS </B>message is sent to the application. Both buffered and unbuffered digit detection can be enabled on the same call simultaneously.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineGetDevCaps, lineGatherDigits, lineSetMediaControl</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Messages: <B>LINE_MONITORDIGITS</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Data Types:  <B>LINEDEVCAPS, LINEDIGITMODE</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT34"></A>lineMonitorMedia</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="69pt" VALIGN="TOP"><COL WIDTH="343pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG <B>lineMonitorMedia</B>(<I>hCall, dwMediaModes</I>)<BR>This function enables and disables the detection of media modes on the specified call. When a media mode is detected, a message is sent to the application.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HCALL    <I>hCall<BR></I>Specifies a handle to the call.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwMediaModes<BR></I>Specifies the media modes to be monitored, of type <B>LINEMEDIAMODE</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEMEDIAMODE_NONE<BR>This is used as a NULL value for the data type.<BR>LINEMEDIAMODE_INTERACTIVEVOICE<BR>The app wants to handle calls of the interactive voice media type; i.e., it manages live voice calls.<BR>LINEMEDIAMODE_AUTOMATEDVOICE<BR>The presence of voice energy on the call and the voice is locally handled by an automated application.<BR>LINEMEDIAMODE_DIGITALDATA<BR>The app wants to handle calls of the digital data media type<BR>LINEMEDIAMODE_G3FAX<BR>The app wants to handle calls of the group 3 fax media type.<BR>LINEMEDIAMODE_G4FAX<BR>The app wants to handle calls of the group 4 fax media type.<BR>LINEMEDIAMODE_DATAMODEM<BR>The app wants to handle calls with the data modem media mode.<BR>LINEMEDIAMODE_TELETEX<BR>The app wants to handle calls with the teletex media mode.<BR>LINEMEDIAMODE_VIDEOTEX<BR>The app wants to handle calls with the videotex media mode.<BR>LINEMEDIAMODE_TELEX<BR>The app wants to handle calls with the telex media mode.<BR>LINEMEDIAMODE_MIXED<BR>The app wants to handle calls with the telex media mode.<BR>LINEMEDIAMODE_TDD<BR>The app wants to handle calls with the TDD (Telephony Devices for the Deaf) media mode.<BR>LINEMEDIAMODE_ADSI<BR>The app wants to handle calls with the ADSI (Analog Display Services Interface) media mode.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">A value of zero for the <I>dwMediaModes</I> parameter cancels all media mode detection.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALCALLHANDLE<BR>The specified call handle is invalid.<BR>LINEERR_INVALMEDIAMODE<BR>The list of media types to be monitored contains invalid information.<BR>LINEERR_RESOURCEUNAVAIL<BR>The specified operation cannot be completed because of resource overcommitment.<BR>LINEERR_OPERATIONUNAVAIL<BR>The specified operation is not available.<BR>LINEERR_OPERATIONFAILED<BR>The specified operation is failed for unspecified reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP"><I>hCall    </I>Any state</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">This function is considered successful if media mode monitoring has been correctly initiated; not when media mode monitoring has terminated. Media monitoring for a given media mode will remain in effect until it is explicitly disabled by calling <B>lineMonitorMedia</B> with a <I>dwMediaModes</I> parameter with the media mode set to zero, or until the call transitions to <I>idle</I>. <B>lineMonitorMedia</B> is primarily an event reporting mechanism. the media mode of call, as indicated in <B>LINECALLINFO</B>, is not affected by the service provider's detection of the media mode. Only the controlling application can change a call's media mode.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Default media monitoring performed by the service provider corresponds to the union of all media modes specified on <B>lineOpen</B>. </P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Although this function can be invoked in any call state, a call's media mode can typically only be detected while the call is certain call states. These states may be device specific. For example, in ISDN a message may indicate the media mode of the media stream before the media stream exists. Similarly, distinctive ringing or the called ID information about the call can be used to identify the media mode of a call. Otherwise, the call may have to be answered (call in the <I>connected</I> state) to allow a service provider to determine the call's media mode by filtering of the media stream. Since filtering of a call's media stream implies a computational overhead, apps should disable media monitoring when not required. By default, media monitoring will be enabled for newly inbound calls since a call's media mode selects the app that should handle the call.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">An outbound application that deals with voice media modes may want to monitor the call for silence (a tone) in order to distinguish who or what is at the called end of a call. For example, a person at home may answer calls with just a short "hello". A person in the office may provide a longer greeting, indicating name and company name. An answering machine may typically have an even longer greeting.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineGetDevCaps, lineSetMediaControl</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Messages:  <B>LINE_MONITORMEDIA</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Data Types:  <B>LINEDEVCAPS, LINEMEDIAMODE</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT35"></A>lineMonitorTones</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="78pt" VALIGN="TOP"><COL WIDTH="348pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG <B>lineMonitorTones</B>(<I>hCall, lpToneList, dwNumEntries</I>)<BR>This function enables and disables the detection of inband tones on the call. When a specified tone is detected, a message is sent to the application.   </P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HCALL    <I>hCall<BR></I>Specifies a handle to the call on whose voice channel tones are to be monitored. </P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LPLINEMONITORTONE    <B>const</B> <I>lpToneList<BR></I>Specifies a list of tones to be monitored, of type <B>LINEMONITORTONE</B>. Each tone in this list has an app defined tag field that is used to identify individual tones in the list for the purpose of reporting a tone detection. Tone monitoring in progress is canceled or changed by calling this operation with either NULL for <I>lpToneList</I> or with another tone list.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwNumEntries<BR></I>Specifies the number of entries in <I>lpToneList</I>.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALCALLHANDLE<BR>The specified call handle is invalid.<BR>LINEERR_INVALTONE<BR>The specified tone structure does not describe a valid tone.<BR>LINEERR_RESOURCEUNAVAIL<BR>The specified operation cannot be completed because of resource overcommitment.<BR>LINEERR_OPERATIONUNAVAIL<BR>The specified operation is not available.<BR>LINEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP"><I>hCall    </I>Any state</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">This function is considered successful if tone monitoring has been correctly initiated; not when tone monitoring has terminated. Tone monitoring will remain in effect until it is explicitly disabled by calling <B>lineMonitorTones</B> with another tone list (or NULL), or until the call transitions to <I>idle</I>.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Although this function can be invoked in any call state, tones can typically only be detected while the call is in the <I>connected</I> state. Tone detection typically requires computational resources. Depending on the service provider and other activities that compete for such resources, the number of tones that can be detected may vary over time. Also, an equivalent amount of resources may be consumed for monitoring a single triple frequency tone versus three single frequency tones. If resources are overcommitted, the LINEERR_RESOURCEUNAVAIL error is returned.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Note that <B>lineMonitorTones</B> is also used to detect silence. Silence is specified as a tone with all zero frequencies.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineGetDevCaps, lineSetMediaControl</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Messages: <B>LINE_MONITORTONE</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Data Types:  <B>LINEDEVCAPS, LINEMONITORTONE</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT36"></A>lineOpen</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="78pt" VALIGN="TOP"><COL WIDTH="348pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineOpen</B>(<I>hApp, dwDeviceID, lphLine, dwAPIVersion, dwExtVersion, dwCallbackInstance, dwPrivilege, dwMediaModes, lpCallParams</I>)<BR>This functions opens the line device specified by its device ID and returns a line handle for the corresponding opened line device. This line handle is used in subsequent operations on the line device.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HLINEAPP    <I>hApp<BR></I>Specifies a handle to the app's registration with the API.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwDeviceID<BR></I>Identifies the line device to be opened. It can either be a valid device ID or the value:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINE_MAPPER<BR>This value is used to open a line device in the system that supports the properties specified in <I>lpCallParams</I>. The application can use <B>lineGetID</B> to determine the ID of the line device that was opened.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LPHLINE    <I>lphLine<BR></I>Specifies a far pointer to an <B>HLINE</B> handle, which is then loaded with the handle representing the opened line device. Use this handle to identify the device when invoking other functions on the open line device.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD   <I> dwAPIVersion<BR></I>Specifies the API version number under which the app and Telephony API have agreed to operate. This number is obtained from <B>lineGetDevCaps</B>.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD   <I> dwExtVersion<BR></I>Specifies the Extension version number under which the app and the service provider agree to operate. This number is zero if the application does not use any extensions. This number is obtained from <B>lineGetDevCaps</B>.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD   <I> dwCallbackInstance<BR></I>Specifies user instance data passed back to the application's callback. This parameter is not interpreted by the Telephony API.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD   <I> dwPrivileges<BR></I>Specifies the privilege the app wants for the calls it is notified for, of type <B>LINECALLPRIVILEGE</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINECALLPRIVILEGE_NONE<BR>The app does not want to get handles to calls other than those it initiates itself.<BR>LINECALLPRIVILEGE_MONITOR<BR>The app wants to monitor other inbound and outbound calls on the line device.<BR>LINECALLPRIVILEGE_OWNER<BR>The app wants to own calls of the specified media mode(s).</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD   <I> dwMediaModes<BR></I>Specifies the media mode(s) of interest to the app, of type <B>LINEMEDIAMODE</B>. The <I>dwMediaModes</I> parameter is used to register the app as a potential target for inbound call and call hand off for the specified media mode. This parameter is ignored if the OWNER flag is not set in <I>dwPrivileges</I>. Values are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEMEDIAMODE_NONE<BR>This is used as a NULL value for the data type. The app is not interested to be the target of any handoff or inbound calls.<BR>LINEMEDIAMODE_UNKNOWN<BR>The app wants to handle calls of unknown media type; i.e., unclassified calls.<BR>LINEMEDIAMODE_INTERACTIVEVOICE<BR>The app wants to handle calls of the interactive voice media type; i.e., it manages voice calls with the human user on this end of the call.<BR>LINEMEDIAMODE_AUTOMATEDVOICE<BR>The presence of voice energy on the call and the voice is locally handled by an automated application.<BR>LINEMEDIAMODE_DIGITALDATA<BR>The app wants to handle calls of the digital data media type.<BR>LINEMEDIAMODE_G3FAX<BR>The app wants to handle calls of the group 3 fax media type.<BR>LINEMEDIAMODE_G4FAX<BR>The app wants to handle calls of the group 4 fax media type.<BR>LINEMEDIAMODE_DATAMODEM<BR>The app wants to handle calls with the data modem media mode.<BR>LINEMEDIAMODE_TELETEX<BR>The app wants to handle calls with the teletex media mode.<BR>LINEMEDIAMODE_VIDEOTEX<BR>The app wants to handle calls with the videotex media mode.<BR>LINEMEDIAMODE_TELEX<BR>The app wants to handle calls with the telex media mode.<BR>LINEMEDIAMODE_MIXED<BR>The app wants to handle calls with the ISDN mixed media mode.<BR>LINEMEDIAMODE_TDD<BR>The app wants to handle calls with the TDD (Telephony Devices for the Deaf) media mode.<BR>LINEMEDIAMODE_ADSI<BR>The app wants to handle calls with the ADSI (Analog Display Services Interface) media mode.<BR>LPLINECALLPARAMS    <B>const</B> <I>lpCallParams<BR></I>Specifies a far pointer to a structure of type <B>LINECALLPARAMS</B>. This pointer is only used if LINE_MAPPER is used; otherwise <I>lpCallParams</I> is ignored.  It describes the call parameter that the line device should be able to provide.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALAPPHANDLE<BR>The specified app registration handle is invalid.<BR>LINEERR_BADDEVICEID<BR>The specified line device ID is out of range.<BR>LINEERR_INCOMPATIBLEVERSION<BR>The app requested an incompatible API version number.<BR>LINEERR_INVALEXTVERSION<BR>The app requested an invalid extension version number.<BR>LINEERR_ALLOCATED<BR>The specified line device has no resources available for another open request.<BR>LINEERR_NOMEM<BR>Unable to allocate or lock memory.<BR>LINEERR_RESOURCEUNAVAIL<BR>The specified operation cannot be completed because of resource overcommitment.<BR>LINEERR_NODRIVER<BR>The driver was not installed.<BR>LINEERR_INVALPOINTER<BR>One or more of the specified pointer parameters are invalid.<BR>LINEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP">Not applicable.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">Opening a line always entitles the application to make calls on any address available on the line. The ability of the app to deal with inbound calls or to be the target of call handoffs on the line is determined by the <I>dwMediaModes</I> parameter. The <B>lineOpen</B> function registers the app as having an interest in monitoring calls or receiving ownership of calls that are of the specified media modes. If the app just wants monitor calls then it can specify LINECALLPRIVILEGES_MONITOR. If the app just wants to make outbound calls then it can specify LINECALLPRIVILEGES_NONE. If the app is willing to control unclassified calls, i.e., calls of unknown media mode, then it can specify LINECALLPRIVILEGES_OWNER and LINEMEDIAMODE_UNKNOWN. Otherwise, the app should specify the media mode it is interested in handling. </P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Note that a single app may specify multiple flags simultaneously if it wants to handle multiple media modes. Conflicts may arise if multiple apps open the same line device for the same media mode. These conflicts are resolved via a priority scheme where the user assigns relative priorities to the apps. Only the highest priority app for a given media mode will ever receive ownership (unsolicited) of a call of that media mode. Ownership can be received when an inbound call first arrives or when a call is handed off. Note that any app (including any lower priority app) can always acquire ownership via <B>lineGetCalls</B>.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">An application that handles automated voice should also select the interactive voice open mode and be assigned the lowest priority for interactive voice. The reason for this is that service providers will report all voice media modes as interactive voice. If media mode determination is not performed by the application for the UNKNOWN media type, and no interactive voice app has opened the line device, then voice calls would be unable to reach the automated voice app, but be dropped instead.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">The same application or different instantiations of the same application may open the same line multiple times, possibly with the same or different parameters.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">When an app opens a line device it must specify the negotiated API version and, if it wants to use the line's extensions, the line's device specific Extension version. This version numbers should have been obtained via <B>lineGetDevCaps</B>. Version numbering allows the mix and match of different app versions with different API versions and service provider versions.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">The notion of LINE_MAPPER allows an app to select a line indirectly; i.e., by means of the services it wants from it.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineClose</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Data Types:  <B>LINEMEDIAMODE, LINECALLPARAMS</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT37"></A>linePark</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="74pt" VALIGN="TOP"><COL WIDTH="334pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> linePark</B>(<I>hCall, dwParkMode, lpszDirAddress, lpNonDirAddress</I>)<BR>This function parks the specified call according to the specified park mode.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HCALL    <I>hCall<BR></I>Specifies a handle to the call to be parked. The app must be an owner of the call.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwParkMode<BR></I>Specifies the park mode with which the call is to be parked, of type <B>LINEPARKMODE</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEPARKMODE_DIRECTED<BR>The app specifies the address at which address the call is to be parked in <I>lpszDirAddress</I>.<BR>LINEPARKMODE_NONDIRECTED<BR>This operation reports to the app where the call has been parked in <I>lpNonDirAddress</I>.<BR>LPCSTR   <B>const</B><I> lpszDirAddress<BR></I>Specifies a far pointer to NULL-terminated string that indicates the address where the call is to be parked when using directed park. The address in dialable number format. This parameter is ignored for non directed park.<BR>LPVARSTRING   <I>lpNonDirAddress<BR></I>Specifies a far pointer to structure of type <B>VARSTRING</B>. For non directed park, the address where the call is parked is returned in this structure. This parameter is ignored for directed park.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALCALLHANDLE<BR>The specified device handle is invalid.<BR>LINEERR_NOTOWNER<BR>The app does not have owner privileges to the specified call.<BR>LINEERR_INVALPARKMODE<BR>The specified park mode is invalid.<BR>LINEERR_INVALPOINTER<BR>One or more of the specified pointer parameters are invalid.<BR>LINEERR_INVALCALLSTATE<BR>The call is not in a valid state for the requested operation.<BR>LINEERR_INVALADDRESS<BR>The specified address is invalid.<BR>LINEERR_OPERATIONUNAVAIL<BR>The specified operation is not available.<BR>LINEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP"><I>hCall    </I>connected</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">Under directed park, the application determines the address at which it wants to park the call. Under non directed park, the switch determines the address and provides this to the application. In either case, a parked call can be unparked by specifying this address.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">The parked call typically enters the <I>idle</I> call state after it has been successfully parked.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Some switches may remind the user after a call has been parked for some long amount of time. The application will see an <I>offering</I> call with a call reason set to <I>reminder</I>.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineUnpark</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Data Structures:  <B>LINEPARKMODE</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT38"></A>linePickup</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="83pt" VALIGN="TOP"><COL WIDTH="343pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> linePickup</B>(<I>hLine, dwAddressID, lphCall, lpszDestAddress,    lpszGroupID</I>)<BR>This function picks up a call alerting at the specified destination address and returns a call handle for the picked up call. If invoked with NULL for the <I>lpszDestAddress</I> parameter, then a group pickup is performed. If required by the device capabilities, <I>lpszGroupID</I> specifies the group ID to which the alerting station belongs.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HLINE    <I>hLine<BR></I>Specifies a handle to the open line device on which a call is to be picked up.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwAddressID<BR></I>Specifies the address on <I>hLine</I> at which the pickup is to be originated.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LPHCALL    <I>lphCall<BR></I>Specifies a far pointer to a memory location where the handle to picked up call will be returned. The app will be initial sole owner of the call.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LPCSTR    <B>const</B> <I>lpszDestAddress<BR></I>Specifies a far pointer to a NULL terminated character buffer that contains the address whose call is to be picked up. The address is standard dialable address format.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LPCSTR    <B>const</B> <I>lpszGroupID<BR></I>Specifies a far pointer to a NULL terminated character buffer containing the group ID to which the alerting station belongs. This parameter is required on some switches to pick up calls outside of the current pickup group.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALLINEHANDLE<BR>The specified line handle is invalid.<BR>LINEERR_INVALADDRESSID<BR>The specified address ID is invalid.<BR>LINEERR_INVALPOINTER<BR>One or more of the specified pointer parameters are invalid.<BR>LINEERR_INVALADDRESS<BR>The specified address is not a valid number.<BR>LINEERR_INVALGROUPID<BR>The specified group ID is invalid.<BR>LINEERR_NOMEM<BR>Unable to allocate or lock memory.<BR>LINEERR_OPERATIONUNAVAIL<BR>The specified operation is not available.<BR>LINEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP">Not applicable.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">When a call has been picked up successfully the app is notified via the <B>LINE_CALLSTATE</B> message about call state changes. The <B>LINECALLINFO</B> structure supplies information about the call that was picked up. It will list the reason for the call as <I>pickup</I>. This structure is available via <B>lineGetCallInfo</B>.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineGetCallInfo, lineGetCallStatus</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Messages:  <B>LINE_CALLSTATE</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Structures:  <B>LINECALLINFO, LINECALLSTATUS</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT39"></A>linePrepareAddToConference</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="78pt" VALIGN="TOP"><COL WIDTH="348pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> linePrepareAddToConference</B>(<I>hConfCall, lphAddCall, lpCallParams</I>)<BR>This function prepares an existing conference call for the addition of another party.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HCALL    <I>hConfCall<BR></I>Specifies a handle to a conference call. The app must be an owner of this call.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LPHCALL    <I>lphAddCall<BR></I>Specifies a far pointer to an <B>HCALL</B> handle. This location is then loaded with a handle identifying the consultation call to be added. Initially, the app will be the sole owner for this call.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LPLINECALLPARAMS    <B>const</B> <I>lpCallParams<BR></I>Specifies a far pointer to call parameters to be used when establishing the consultation call. This parameter may be set to NULL if no special call setup parameters are desired.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALCONFCALLHANDLE<BR>The specified call handle for the conference call is invalid.<BR>LINEERR_NOTOWNER<BR>The app does not have owner privileges to the specified conference call.<BR>LINEERR_INVALPOINTER<BR>One or more of the specified pointer parameters are invalid.<BR>LINEERR_INVALCALLSTATE<BR>The conference call is not in a valid state for the requested operation.<BR>LINEERR_CALLUNAVAIL<BR>All call appearances on the specified address are currently allocated.<BR>LINEERR_CONFERENCEFULL<BR>The maximum number of parties for a conference has been reached.<BR>LINEERR_INVALCALLPARAMS<BR>The specified call parameters are invalid.<BR>LINEERR_OPERATIONUNAVAIL<BR>The specified operation is not available.<BR>LINEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reason.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP"><I>hConfCall    </I>connected     <I>hAddCall    </I>Not applicable</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">A conference call handle can be obtained via <B>lineSetupConference</B> or via <B>lineCompleteTransfer</B> that is resolved as a three-way conference call. The function <B>linePrepareAddToConference</B> typically places the existing conference call in the <I>onHoldPendingConference</I> state and creates a consultation call that can be added later to the existing conference call via <B>lineAddToConference</B>. </P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">The consultation call can be canceled using <B>lineDrop</B>. It may also be possible for an application to swap between the consultation call and the held conference call via <B>lineSwapHold</B>.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineDial, lineSwapHold, lineSetupConference, </B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><B>lineAddToConference, lineRemoveFromConference</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Messages:  <B>LINE_CALLSTATE</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT40"></A>lineRedirect</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="83pt" VALIGN="TOP"><COL WIDTH="339pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineRedirect</B>(<I>hCall,  lpszDestAddress, dwCountryCode</I>)<BR>This function redirects the specified offering call to the specified destination address.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HCALL    <I>hCall<BR></I>Specifies a handle to the call to be redirected. The app must be an owner of the call.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LPCSTR   <B>const</B> <I>lpszDestAddress<BR></I>Specifies a far pointer to the destination address. This follows the standard dialable number format.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwCountryCode<BR></I>Specifies the country code of the party the call is redirected to. If a value of zero is specified, then a default will be used by the implementation. </P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALCALLHANDLE<BR>The specified call handle is invalid.<BR>LINEERR_NOTOWNER<BR>The app does not have owner privileges to the specified call.<BR>LINEERR_INVALCALLSTATE<BR>The call is not in a valid state for the requested operation.<BR>LINEERR_INVALPOINTER<BR>The specified pointer parameter is invalid.<BR>LINEERR_INVALADDRESS<BR>The specified character buffer for the destination address contains invalid characters or digits (i.e., syntax error); the call has not been redirected.<BR>LINEERR_OPERATIONUNAVAIL<BR>The specified operation is not available.<BR>LINEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP"><I>hCall    </I>offering</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">Call redirection allows an application to deflect an offering call to another address without first answering the call. Call redirect differs from call forwarding in that call forwarding is performed by the switch without the involvement of the application; redirection can be done on a call by call basis by the application, for example driven by caller ID information. It differs from call transfer in that transferring a call requires the call first be answered. </P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">After a call has been successfully redirected, the call will typically transition to <I>idle</I>.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Besides redirecting an incoming call, an application may have the option to accept the call using <B>lineAccept</B>, reject the call via <B>lineDrop</B>, or answer the call using <B>lineAnswer</B>. The availability of these operations is dependent on device capabilities. </P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions: <B>lineAccept</B>, <B>lineDrop, lineGetDevCaps</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Messages: <B>LINE_CALLSTATE</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT41"></A>lineRegisterRequestRecipient</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="74pt" VALIGN="TOP"><COL WIDTH="361pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineRegisterRequestRecipient</B>(<I>hApp, dwRegistrationInstance,     dwRequestMode, bEnable</I>)<BR>This function registers the invoking application as a recipient of requests for the specified request mode.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HLINEAPP   <I>hApp<BR></I>Specifies the application's usage handle for the line portion of the API.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwRegistrationInstance<BR></I>Specifies an app-specific DWORD that is passed back as a parameter of the LINE_REQUEST message. This message notifies the application that a request is pending. </P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwRequestMode<BR></I>Specifies the type(s) of request for which the application registers, of type <B>LINEREQUESTMODE</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEREQUESTMODE_MAKECALL<BR>A <B>tapiRequestMakeCall</B> request.<BR>LINEREQUESTMODE_MEDIACALL<BR>A <B>tapiRequestMediaCall/tapiRequestDrop</B> request.<BR>LINEREQUESTMODE_LOGENTRY<BR>A <B>lineRequestLogEntry</B> request.<BR>BOOL    <I>bEnable<BR></I>If TRUE, the application registers; if FALSE, the app deregisters for the specified request modes.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALAPPHANDLE<BR>The specified application handle is invalid.<BR>LINEERR_INVALREQUESTMODE<BR>The specified request mode is invalid.<BR>LINEERR_OPERATIONFAILED<BR>The specified operation failed for unknown reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP">Not applicable.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">An telephony-enabled application can request that a call be placed on its behalf by invoking <B>tapiRequestMakeCall</B>, <B>tapiRequestMediaCall</B>, and drop a media call via <B>tapiRequestDrop</B>. Additionally, other applications can request information be logged with a given call. These requests are queued by the Telephony DLL and the (highest priority) application that has registered to handle the request is sent a <B>LINE_REQUEST</B> message with indication of the mode of the request that is pending. This application will typically be the user's call control application. Next, the call control application that receives this message invokes <B>lineGetRequest</B> specifying the request mode and a buffer that is large enough to hold the request. The call control application then interprets and executes the request. For media mode handling, the serving application may need to send Windows messages back to the original application that made the request. The <B>TAPI_REPLY</B> message is used for this purpose. </P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">The recipient app is also automatically deregistered for all requests when it does a <B>lineShutdown</B>.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions: <B>lineGetRequest</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Messages: <B>LINE_REQUEST</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT42"></A>lineRemoveFromConference</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="334pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineRemoveFromConference</B>(<I>hCall</I>)<BR>This function removes the specified call from the conference call to which it currently belongs. The remaining calls in the conference call are unaffected.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HCALL    <I>hCall<BR></I>Specifies a handle to the call to be removed from the conference. The app must be an owner of this call.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALCALLHANDLE<BR>The specified call handle is invalid.<BR>LINEERR_NOTOWNER<BR>The app does not have owner privileges to the specified call.<BR>LINEERR_INVALCALLSTATE<BR>The call is not in a valid state for the requested operation.<BR>LINEERR_OPERATIONUNAVAIL<BR>The specified operation is not available.<BR>LINEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP"><I>hCall    </I>conferenced</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">This operation removes a party that currently belongs to a conference call. After the call has been successfully removed, it may be possible to further manipulate it using its handle. The availability of this operation and its result are likely to be limited in many implementations. For example, in many implementations, only the most recently added party may be removed from a conference, and the removed call may be automatically dropped (becomes <I>idle</I>). Consult the line's device capabilities to determine the available effects of removing a call from a conference.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineSetupConference, lineAddToConference, lineGetDevCaps</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Messages:  <B>LINE_CALLSTATE</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Data Types:  <B>LINEDEVCAPS </B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT43"></A>lineRequestLogEntry</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="69pt" VALIGN="TOP"><COL WIDTH="357pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineRequestLogEntry</B>(<I>hCall,  lpsComment, dwSize</I>)<BR>This function requests that a comment be added to the call log for the given call.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HCALL    <I>hCall<BR></I>Specifies a handle to the call for which information logging is requested.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LPCSTR   <B>const</B> <I>lpsComment<BR></I>Specifies a far pointer to a comment string. The string uses the format specified as the <B>dwStringFormat</B> field in the call's line device capabilities. If the string is longer than LINEMAXCOMMENTSIZE, then the given string is truncated.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwSize<BR></I>Specifies the size of the comment string in bytes. </P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALCALLHANDLE<BR>The specified call handle is invalid.<BR>LINEERR_INVALPOINTER<BR>The specified pointer parameter is invalid.<BR>LINEERR_OPERATIONUNAVAIL<BR>The specified operation is not available.<BR>LINEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP"><I>hCall<BR></I>Any state</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">None. </P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions: <B>lineGetRequest</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Messages: <B>LINE_REQUEST</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT44"></A>lineSecureCall</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="78pt" VALIGN="TOP"><COL WIDTH="343pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineSecureCall</B>(<I>hCall</I>)<BR>This function secures the call from any interruptions or interference that may affect the call's media stream.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HCALL    <I>hCall<BR></I>Specifies a handle to the call to be secured. The app must be an owner of the call.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALCALLHANDLE<BR>The specified call handle is invalid.<BR>LINEERR_NOTOWNER<BR>The app does not have owner privileges to the specified call.<BR>LINEERR_OPERATIONUNAVAIL<BR>The specified operation is not available.<BR>LINEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP"><I>hCall   </I>Any state</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">A call can be secured to avoid interference. For example, in an analog environment, call waiting tones may destroy a fax or modem session on the original call. <B>LineSecureCall</B> allows an existing call to be secured, <B>lineMakeCall</B> provides the option to secure the call from the time of call setup. The securing of a call remains in effect for the duration of the call. </P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineMakeCall</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT45"></A>lineSendUserUserInfo</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="78pt" VALIGN="TOP"><COL WIDTH="343pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineSendUserUserInfo</B>(<I>hCall, lpsUserUserInfo, dwSize</I>)<BR>This function send user-to-user information to the remote party on the specified call.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HCALL    <I>hCall<BR></I>Specifies a handle to the call on which to send user-to-user information. The app must be an owner of the call.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LPCSTR    <B>const </B><I>lpsUserUserInfo<BR></I>Specifies a far pointer to a string containing user-to-user information to be sent to the remote party. User-to-user information is only sent if supported by the underlying network (see <B>LINEDEVCAPS</B>).</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwSize<BR></I>Specifies the size in bytes of the user-to-user information in <I>lpsUserUserInfo</I>.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALCALLHANDLE<BR>The specified call handle is invalid.<BR>LINEERR_NOTOWNER<BR>The app does not have owner privileges to the specified call.<BR>LINEERR_INVALCALLSTATE<BR>The call is not in a valid state for the requested operation.<BR>LINEERR_INVALPOINTER<BR>The specified pointer parameter is invalid.<BR>LINEERR_OPERATIONUNAVAIL<BR>The specified operation is not available.<BR>LINEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP"><I>hCall    </I>connected</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">This function can be used to send user-to-user information at any time during a connected call. If the size of the specified information to be sent is larger than what may fit into a single network message (e.g., ISDN), then the service provider is responsible for breaking the information up into a sequence of chained network messages (using "more data").</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">User-to-user information can also be sent as part of call accept, call reject, call redirect, and when making calls. User-to-user information can also be received. The received information is available via the call's call information record. Whenever user-to-user information arrives after call offering or prior to call disconnect, a <B>LINE_CALLINFO</B> message with a <I>UserUserInfo</I> parameter will notify the app that user-to-user information in the call information record has changed. If multiple network messages are chained, then the information is assembled by the service provider and a single message is sent to the app.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions: <B>lineMakeCall, lineAccept, lineRedirect, lineDrop, lineGetCallInfo</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Messages: <B>LINE_CALLINFO</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Data Types: <B>LINECALLINFO</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT46"></A>lineSetAppSpecific</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="74pt" VALIGN="TOP"><COL WIDTH="352pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineSetAppSpecific</B>(<I>hCall, dwAppSpecific</I>)<BR>This operation enables an application to set the application specific field of the specified call's call information record.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HCALL    <I>hCall<BR></I>Specifies a handle to the call whose application specific field needs to be set. The app must be an owner of the call.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwAppSpecific<BR></I>Specifies the new content of the <B>dwAppSpecific</B> field for the call's <B>LINECALLINFO</B> structure. This value is uninterpreted by the Telephony API.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALCALLHANDLE<BR>The specified call handle is invalid.<BR>LINEERR_NOTOWNER<BR>The app does not have owner privileges to the specified call.<BR>LINEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP"><I>hCall    </I>Any state</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">The app specific field in the <B>LINECALLINFO</B> data structure that exists for each call is uninterpreted by the Telephony API or any of its service providers. Its usage is entirely defined by the applications. The field can be read from the <B>LINECALLINFO</B> record returned by <B>lineGetCallInfo</B>. However, <B>lineSetAppSpecific</B> must be used to set the field so that changes become visible to other apps. When this field is changed, all other apps with call handles are sent a <B>LINE_CALLINFO</B> message with an indication that the <I>AppSpecific</I> field has changed.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineGetCallInfo</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Messages:  <B>LINE_CALLINFO</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Data Types:  <B>LINECALLINFO</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT47"></A>lineSetCallParams</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="74pt" VALIGN="TOP"><COL WIDTH="352pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineSetCallParams</B>(<I>hCall, dwBearerMode, dwMinRate, dwMaxRate,     lpDialParams</I>)<BR>This function allows an application to change bearer mode and/or the rate parameters of an existing call.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HCALL    <I>hCall<BR></I>Specifies a handle to the call whose parameters are to be changed. The app must be an owner of the call.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwBearerMode<BR></I>Specifies the new bearer mode for the call, of type <B>LINEBEARERMODE</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEBEARERMODE_VOICE<BR>This is a regular 3.1kHz analog voice grade bearer service. Bit integrity is not assured. Voice can support fax and modem media modes.<BR>LINEBEARERMODE_SPEECH<BR>This corresponds to G.711 speech transmission on the call. The network may use processing techniques such as analog transmission, echo cancellation and compression/decompression. Bit integrity is not assured. Speech is not intended to support fax and modem media modes.<BR>LINEBEARERMODE_MULTIUSE<BR>The multi-use mode defined by ISDN.<BR>LINEBEARERMODE_DATA<BR>The unrestricted data transfer on the call. The data rate is specified separately. <BR>LINEBEARERMODE_ALTSPEECHDATA<BR>The alternate transfer of speech or unrestricted data on the same call (ISDN).<BR>LINEBEARERMODE_NONCALLSIGNALING<BR>This corresponds to a non call-associated signaling connection from the app to the service provider or switch (treated as a "media stream" by the Telephony API).  <BR>DWORD    <I>dwMinRate<BR></I>Specifies a lower bound for the call's new data rate. The app is willing to accept a new rate as low as this one.<BR>DWORD    <I>dwMaxRate<BR></I>Specifies an upper bound for the call's new data rate. This is the maximum data rate the application would like. If an exact data rate is required, then <I>dwMinRate</I> and <I>dwMaxRate</I> should be specified as equal.  <BR>LPLINEDIALPARAMS    <I>lpDialParams<BR></I>Specifies a far pointer to the new dial parameters for the call, of type <B>LINEDIALPARAMS</B>. This parameter can be left NULL if the call's current dialing parameters are to be used. </P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALCALLHANDLE<BR>he specified call handle is invalid.<BR>LINEERR_NOTOWNER<BR>The app does not have owner privileges to the specified call.<BR>LINEERR_INVALBEARERMODE<BR>The specified bearer mode is invalid.<BR>LINEERR_INVALRATE<BR>The specified bearer mode is invalid.<BR>LINEERR_BEARERMODEUNAVAIL<BR>The call's bearer mode cannot be changed to the specified bearer mode. <BR>LINEERR_RATEUNAVAIL<BR>he service provider does currently not have enough bandwidth available for the specified rate. <BR>LINEERR_RESOURCEUNAVAIL<BR>The service provider does not have enough resources available to complete the request. <BR>LINEERR_OPERATIONUNAVAIL<BR>The specified operation is not available.<BR>LINEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reason.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP">Any state</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">This operation is used to change the parameters of an existing call. Examples of its usage include changing the bearer mode and/or the data rate of an existing call. </P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineMakeCall</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Messages:  <B>LINECALLPARAMS</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT48"></A>lineSetMediaControl</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="78pt" VALIGN="TOP"><COL WIDTH="343pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG <B>lineSetMediaControl</B>(hLine, dwAddressID, hCall, dwSelect, lpDigitList, dwDigitNumEntries, lpMediaList, dwMediaNumEntries, lpToneList, dwToneNumEntries, lpCallStateList, dwCallStateNumEntries)<BR>This function enables and disables control actions on the media stream associated with the specified line, address, or call. Media control actions can be triggered by the detection of specified digits, media modes, custom tones, and call states.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HLINE    hLine<BR>Specifies a handle to an open line device.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    dwAddressID<BR>Specifies an address on the given open line device.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">HCALL    hCall<BR>Specifies a handle to a call. The application must be an owner of the call.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    dwSelect<BR>Specifies the whether media control is requested is associated with a single call, is the default for all calls on an address, or is the default for all calls on a line. This field is of type <B>LINECALLSELECT</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINECALLSELECT_LINE<BR>Selects the specified line device. The hLine parameter must be a valid line handle; hCall and dwAddressID are ignored.<BR>LINECALLSELECT_ADDRESS<BR>Selects the specified address on the line. Both hLine and dwAddressID must be valid; hCall is ignored.<BR>LINECALLSELECT_CALL<BR>Selects the specified call. hCall must be valid; hLine and dwAddressID are both ignored. <BR>LPLINEMEDIACONTROLDIGIT    <B>const</B> lpDigitList<BR>Specifies a far pointer to the array that contains the digits that are to trigger media control actions, of type <B>LINEMEDIACONTROLDIGIT</B>. Each time a digit listed in the digit list is detected, the specified media control action is carried out on the call's media stream.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Valid digits for pulse mode are '0' through '9'. Valid digits for DTMF mode are '0' through '9', 'A', 'B', 'C', 'D', '*', '#'.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    dwDigitNumEntries<BR>Specifies the number of entries in the lpDigitList.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LPLINEMEDIACONTROLMEDIA     <B>const</B> lpMediaList<BR>Specifies a far pointer to an array with entries of type <B>LINEMEDIACONTROLMEDIA</B>. The array has dwMediaNumEntries entries. Each entry contains a media mode to be monitored, media type specific information (e.g., duration), and a media control field. If a media mode in the list is detected, then the corresponding media control action is performed on the call's media stream.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    dwMediaNumEntries<BR>Specifies the number of entries in lpMediaList.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LPLINEMEDIACONTROLTONE     <B>const</B> lpToneList<BR>Specifies a far pointer to an array with entries of type <B>LINEMEDIACONTROLTONE</B>. The array has dwToneNumEntries entries. Each entry contains a description of a tone to be monitored, duration of the tone, and a media control field. If a tone in the list is detected, then the corresponding media control action is performed on the call's media stream.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    dwToneNumEntries<BR>Specifies the number of entries in lpToneList.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LPLINEMEDIACONTROLCALLSTATE     <B>const</B> lpCallStateList<BR>Specifies a far pointer to an array with entries are of type <B>LINEMEDIACONTROLSTATE</B>. The array has dwCallStateNumEntries entries. Each entry contains a call state and a media control action. Whenever the given call transitions into one of the call states in the list, the corresponding media control action is invoked. A media control value of LINEMEDIACONTROL_NONE should be specified to cancel the media control of a call state.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    dwCallStateNumEntries<BR>Specifies the number of entries in lpCallStateList.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALLINEHANDLE<BR>The specified line handle is invalid.<BR>LINEERR_INVALADDRESSID<BR>The specified address ID is invalid.<BR>LINEERR_INVALCALLHANDLE<BR>The specified call handle is invalid.<BR>LINEERR_NOTOWNER<BR>The app does not have owner privileges to the specified call.<BR>LINEERR_INVALCALLSELECT<BR>The specified select parameter is invalid.<BR>LINEERR_INVALDIGITLIST<BR>The specified digit list is invalid.<BR>LINEERR_INVALMEDIALIST<BR>The specified media list is invalid.<BR>LINEERR_INVALTONELIST<BR>The specified tone list is invalid.<BR>LINEERR_INVALCALLSTATELIST<BR>The specified call state list is invalid.<BR>LINEERR_RESOURCEUNAVAIL<BR>The service provider does not have enough resources available to complete the request.<BR>LINEERR_OPERATIONUNAVAIL<BR>The operation is not available.<BR>LINEERR_OPERATIONFAILED<BR>The operation failed for unspecified reasons.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">hCall   Any state</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">This function is considered successful if media control has been correctly initiated; not when any media control has taken effect. Media control in progress is changed or is canceled by calling this function again with either different parameters or NULLs.<BR>All apps that are owners of the call are in principle allowed to make media control requests on the call. Only a single media control request can be outstanding on a call across all applications that own the call. So the last application to make its request wins.<BR>Depending on the service provider and other activities that compete for such resources, the amount of simultaneous detections that can be made may vary over time. If service provider resources are overcommitted, the LINEERR_RESOURCEUNAVAIL error is returned.<BR>Whether or not media control is supported by the service provider is a device capability.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Functions:  <B>lineGetDevCaps</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Data Types:  <B>LINECAPS, LINEDIGITMODE, LINEMEDIAMODE, LINEMEDIACONTROLMODE, LINEMEDIACONTROLCALLSTATE, LINEMEDIACONTROLDIGIT, LINEMEDIACONTROLMEDIA, LINEMEDIACONTROLTONE</B></P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP"></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT49"></A>lineSetMediaMode</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="74pt" VALIGN="TOP"><COL WIDTH="352pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineSetMediaMode</B>(<I>hCall, dwMediaModes</I>)<BR>This function is sets the media mode(s) of the specified call in its <B>LINECALLINFO</B> structure. </P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HCALL    <I>hCall<BR></I>Specifies a handle to the call whose media mode is to be changed. The app must be an owner of the call.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwMediaModes<BR></I>Specifies the new media mode(s) for the call, of type <B>LINEMEDIAMODE</B>. As long as the UNKNOWN media mode flag is set, multiple other media mode flags may be set as well. This is used to indentify a call's media mode as not fully determined, but narrowed down to one of just a small set of specified media modes. If the UNKNOWN flag is not set, then only a single media mode can be specified. Values are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEMEDIAMODE_NONE<BR>This is used as a NULL value for the data type. This value may be used when the media stream of the call is not accessible by the application.<BR>LINEMEDIAMODE_UNKNOWN<BR>The target app is the one that handles calls of unknown media mode; i.e., unclassified calls.<BR>LINEMEDIAMODE_INTERACTIVEVOICE<BR>The target app is the one that handles calls with the interactive voice media mode; i.e., live conversations.<BR>LINEMEDIAMODE_AUTOMATEDVOICE<BR>The presence of voice energy on the call and the voice is locally handled by an automated application.<BR>LINEMEDIAMODE_DIGITALDATA<BR>The target app is the one that handles calls that are digital data calls.<BR>LINEMEDIAMODE_G3FAX<BR>The target app is the one that handles calls with the group 3 fax media mode.<BR>LINEMEDIAMODE_G4FAX<BR>The target app is the one that handles calls with the group 4 fax media mode.<BR>LINEMEDIAMODE_DATAMODEM<BR>The target app is the one that handles calls with the data modem media mode.<BR>LINEMEDIAMODE_TELETEX<BR>The target app is the one that handles calls with the teletex media mode.<BR>LINEMEDIAMODE_VIDEOTEX<BR>The target app is the one that handles calls with the videotex media mode.<BR>LINEMEDIAMODE_TELEX<BR>The target app is the one that handles calls with the telex media mode.<BR>LINEMEDIAMODE_MIXED<BR>The target app is the one that handles calls with the ISDN mixed media mode.<BR>LINEMEDIAMODE_TDD<BR>The target app is the one that handles calls with the TDD (Telephony Devices for the Deaf) media mode.<BR>LINEMEDIAMODE_ADSI<BR>The target app is the one that handles calls with the ADSI (Analog Display Services Interface) media mode.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALCALLHANDLE<BR>The specified call handle is invalid.<BR>LINEERR_INVALMEDIAMODE<BR>The specified media mode parameter is invalid.<BR>LINEERR_OPERATIONUNAVAIL<BR>The specified operation is not available.<BR>LINEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP"><I>hCall    </I>Any state</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">This function changes the call's media mode in its <B>LINECALLINFO</B> structure. Typical usage of this operation is to either set a call's media mode to a specific known media mode, or to exclude possible media modes as long as the call's media mode is officially unknown; i.e., the UNKNOWN media mode flag is set.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions: <B>lineGetCallInfo</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT50"></A>lineSetNumRings</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="78pt" VALIGN="TOP"><COL WIDTH="352pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineSetNumRings</B>(<I>hLine, dwAddressID, dwNumRings</I>)<BR>This function is used by an app to set the number of rings it wants an incoming call to ring prior to answering the call. This function can be used to implement a toll saver-style function. It allows multiple independent apps to each register the number of rings. The function <B>lineGetNumRings</B> returns the minimum number of all number of rings requested. It can be used by the app that answers inbound calls to determine the number of rings it should wait before answering the call.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HLINE    <I>hLine<BR></I>Specifies a handle to the open line device.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwAddressID<BR></I>Specifies an address on the line device. </P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwNumRings<BR></I>Specifies the number of rings before a call should be answered in order to honor the toll saver requests from all apps.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALLINEHANDLE<BR>The specified device handle is invalid.<BR>LINEERR_INVALADDRESSID<BR>The specified address ID is out of range.<BR>LINEERR_OPERATIONUNAVAIL<BR>The specified operation is not available.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP">Not applicable.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP"><B>lineGetNumRings</B> and <B>lineSetNumRings</B> when used in combination provide a mechanism to support the implementation of toll saver features across multiple independent applications. If no application ever calls <B>lineSetNumRings</B>, then <B>lineGetNumRings</B> will return 0xFFFFFFFF.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">An application that is the owner for a call in the <I>offering</I> state and that received a <B>LINE_LINEDEVSTATE</B> <I>ringing</I> message should wait a number of rings equal to the number returned by <B>lineGetNumRings</B> before answering the call in order to honor the toll saver settings across all applications. A separate <B>LINE_LINEDEVSTATE</B> <I>ringing</I> message is sent to the application for each ring cycle, so the app should count these messages. If this call disconnects before being answered, and another call comes in shortly thereafter, then the <B>LINE_CALLSTATE</B> message should allow the app to determine that ringing is related to the second call.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">If call classification is performed by the API implementation by means of answering inbound calls of unknown media mode and filtering the media stream, then the API implementation will honor this number as well. </P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Note that this operation is purely informational and does not in itself affect the state of any calls on the line device. </P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions: <B>lineGetNumRings</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT51"></A>lineSetStatusMessages</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="78pt" VALIGN="TOP"><COL WIDTH="343pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineSetStatusMessages</B>(<I>hLine, dwLineStates, dwAddressStates</I>)<BR>This operation enables an application to specify which notification messages the app wants to receive for events related to status changes for the specified line or any of its addresses.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HLINE    <I>hLine<BR></I>Specifies a handle to the line device.</P></TD></TR><TR><TD VALIGN="TOP"> </P></TD><TD VALIGN="TOP">DWORD    <I>dwLineStates<BR></I>Specifies a bit array that identifies for which line device status changes a message is to be sent to the application, of type <B>LINEDEVSTATE</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEDEVSTATE_OTHER<BR>An other device status item has changed.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEDEVSTATE_RINGING<BR>The switch tells the line to alert the user.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEDEVSTATE_CONNECTED<BR>The line was previously disconnected and is now connected to the API.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEDEVSTATE_DISCONNECTED<BR>This line was previously connected and is now disconnected from the API.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEDEVSTATE_MSGWAITON<BR>The message waiting indicator is turned on.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEDEVSTATE_MSGWAITOFF<BR>The message waiting indicator is turned off.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEDEVSTATE_INSERVICE<BR>The line is connected to the API. This happens when the API is first activated, or when the line wire is physically plugged in and in service at the switch while the API is active.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEDEVSTATE_OUTOFSERVICE<BR>The line is out of service at the switch or physically disconnected. The API cannot be used to operate on the line device.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEDEVSTATE_MAINTENANCE<BR>Maintenance is being performed on the line at the switch. The API cannot be used to operate on the line device.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEDEVSTATE_OPEN<BR>The line has been opened by some application.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEDEVSTATE_CLOSE<BR>The line has been closed by some application.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEDEVSTATE_NUMCALLS<BR>The number of calls on the line device has changed.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEDEVSTATE_TERMINALS<BR>The terminal settings have changed.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEDEVSTATE_ROAMMODE<BR>The roam mode of the line device has changed.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEDEVSTATE_BATTERY<BR>The battery level has changed significantly (cellular).</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEDEVSTATE_SIGNAL<BR>The signal level has changed significantly (cellular).</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEDEVSTATE_DEVSPECIFIC<BR>The line's device specific information has changed.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEDEVSTATE_REINIT<BR>Items have changed in the configuration of line devices. To become aware of these changes (e.g., new line devices) the app should reinitialize its use of the API. New <B>lineInitialize</B> and <B>lineOpen</B> requests will be denied until apps have shut down their usage of the API. The <I>hDevice</I> parameter is left NULL for this state change as it applies to any of the lines in the system.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEDEVSTATE_LOCK<BR>The locked status of the line device has changed.</P></TD></TR><TR><TD VALIGN="TOP"> </P></TD><TD VALIGN="TOP">DWORD    <I>dwAddressStates<BR></I>Specifies a bit array that identifies for which address status changes a message is to be sent to the application, of type <B>LINEADDRESSSTATE</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEADDRESSSTATE_OTHER<BR>An other address status item than those listed below has changed.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEADDRESSSTATE_DEVSPECIFIC<BR>The device specific item of the address status has changed.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEADDRESSSTATE_INUSEZERO<BR>The address has changed to idle; i.e., it is now in use by zero stations.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEADDRESSSTATE_INUSEONE<BR>The address has changed from being idle or from being in use by many bridged stations to being in use by just one station.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEADDRESSSTATE_INUSEMANY<BR>The monitored or bridged address has changed to being in use by one station to being used by more than one station.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEADDRESSSTATE_NUMCALLS<BR>The number of calls on the address has changed. This is the result of either a new inbound call, or an outbound call on the address, a call changing its hold status, etc.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEADDRESSSTATE_FORWARD<BR>The forwarding status of the address has changed including the number of rings for determining a no answer condition. The app should check the address status to determine details about the address' current forwarding status.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEADDRESSSTATE_TERMINALS<BR>The terminal settings for the address have changed.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALLINEHANDLE<BR>The specified line handle is invalid.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALPARAM<BR>One or both of the states parameters is invalid.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reason.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP">Not applicable.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">The API defines a number of messages that notify applications about events occurring on lines and addresses. An app may not be interested in receiving all address and line status change messages. <B>lineSetStatusMessages</B> can be used to select which messages the app wants to receive. By default, address and line status reporting is disabled.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineGetStatusMessages</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Messages:  <B>LINE_LINEDEVSTATE</B>,<B> LINE_ADDRESSSTATE</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Data Types:  <B>LINEDEVSTATE, LINEADDRESSSTATE</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT52"></A>lineSetTerminal</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="78pt" VALIGN="TOP"><COL WIDTH="343pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineSetTerminal</B>(<I>hLine, dwAddressID, hCall, dwSelect,     dwTerminalModes, dwTerminalID, bEnable</I>)<BR>This operation enables an application to specify to which terminal information related the specified line, address or call is to be routed. This operation can be used while calls are in progress on the line, to allow an application to route these events to different devices as required.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HLINE    <I>hLine<BR></I>Specifies a handle to an open line device. </P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwAddressID<BR></I>Specifies an address on the given open line device.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">HCALL    <I>hCall<BR></I>Specifies a handle to a call.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwSelect<BR></I>Specifies whether the terminal setting is requested for the line, the address or just the specified call. If line or address is specified, then events either apply to the line or address itself or serves as a default initial setting for all new calls on the line or address. This parameter is of type <B>LINECALLSELECT</B>. Values are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINECALLSELECT_LINE<BR>Selects the specified line device. The <I>hLine</I> parameter must be a valid line handle; <I>hCall</I> and <I>dwAddressID</I> are ignored. </P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINECALLSELECT_ADDRESS<BR>Selects the specified address on the line. Both <I>hLine</I> and <I>dwAddressID</I> must be valid; <I>hCall</I> is ignored.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINECALLSELECT_CALL<BR>Selects the specified call. <I>hCall</I> must be valid; <I>hLine</I> and <I>dwAddressID</I> are both ignored. </P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwTerminalModes<BR></I>Specifies the class(es) of low level events to be routed to the given terminal.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINETERMMODE_BUTTONS<BR>The button presses from the terminal to the line.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINETERMMODE_DISPLAY<BR>The display events from the line to the terminal.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINETERMMODE_LAMPS<BR>The lamp lighting events from the line to the terminal.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINETERMMODE_RINGER<BR>The ring requests from the line to the terminal.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINETERMMODE_HOOKSWITCH<BR>The hookswitch events between the terminal and the line.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINETERMMODE_MEDIAFROMTERM<BR>This is the unidirectional media stream from the terminal to the line associated with a call on the line. Use this value when routing of both unidirectional channels of a call's media stream can be controlled independently.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINETERMMODE_MEDIATOTERM<BR>This is the unidirectional media stream from the line to the terminal associated with a call on the line. Use this value when routing of both unidirectional channels of a call's media stream can be controlled independently.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINETERMMODE_MEDIABIDIR<BR>This is the bidirectional media stream associated with a call on the line and the terminal. Use this value when routing of both unidirectional channels of a call's media stream cannot be controlled independently.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwTerminalID<BR></I>Specifies the device ID of the terminal device where the given events are to be routed. Terminal IDs are small integers in the range of 0 to <B>dwNumTerminals</B> -1, where <B>dwNumTerminals, </B>and the terminal modes each terminal is capable of handling, are returned by <B>lineGetDevCaps</B>. Note that these terminal IDs have no relation to other device IDs and are defined by the service provider via device capabilities.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">BOOL    <I>bEnable<BR></I>If TRUE, <I>dwTerminalID</I> is valid and the specified event classes are routed to or from that terminal. If FALSE, these events are not routed to or from the <I>dwTerminalID</I>.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALLINEHANDLE<BR>The specified line handle is invalid.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALADDRESSID<BR>The specified address ID is invalid.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALCALLHANDLE<BR>The specified call handle is invalid.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALCALLSELECT<BR>The specified select parameter is invalid.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALTERMINALMODE<BR>The specified terminal modes parameter is invalid.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALTERMINALID<BR>The specified terminal mode parameter is invalid.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_RESOURCEUNAVAIL<BR>The specified operation cannot be completed because of resource overcommitment.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_OPERATIONUNAVAIL<BR>The specified operation is not available for the given device.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reason.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP"><I>hCall    </I>Any state</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">An application can use this operation to route certain classes of low level line events to the specified terminal device, or to suppress the routing of these events altogether. For example, voice may be routed to a separate audio I/O device (headset), lamps and display events may be routed to the local phone device, and button events and ringer events may be suppressed altogether.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">This operation can be called any time, even when a call is active on the given line device. This, for example, allows a user to switch from using the local phone set to another audio I/O device.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">This function may be called multiple times to possibly route the same events to multiple terminals simultaneously. To reroute event to a different terminal, it is recommended that the app first disable routing to the existing terminal and next route the events to the new terminal.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Terminal ID assignments are made by the line's service provider. Device capabilities only indicate which terminal IDs the service provider has available. Service providers that don't support this type of event routing would indicate that they have no terminal devices (<B>dwNumTerminals</B> in <B>LINEDEVCAPS</B> is zero).</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Data Types:  <B>LINETERMMODE, LINECALLSELECT</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT53"></A>lineSetupConference</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="74pt" VALIGN="TOP"><COL WIDTH="352pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineSetupConference</B>(<I>hCall</I>, <I>hLine</I>, <I>lphConfCall, lphAddCall,     dwNumParties, lpCallParams</I>)<BR>This function sets up a conference call for the addition of the third party. </P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HCALL    <I>hCall<BR></I>Specifies the initial call that identifies the first party of a conference call. In some environments (as described in device capabilities), a call must exist in order to start a conference call, and the app must be an owner of this call. In other telephony environments, no call initially exists, <I>hCall</I> must be left NULL and <I>hLine</I> must be specified to identify the line on which the conference call is to be initiated.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">HLINE    <I>hLine<BR></I>Specifies a handle to the line. This handle is used to identify the line device on which to originate the conference call if <I>hCall</I> is NULL. The <I>hLine</I> parameter is ignored if <I>hCall</I> is non-NULL. </P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LPHCALL    <I>lphConfCall<BR></I>Specifies a far pointer to an <B>HCALL</B> handle. This location is then loaded with a handle identifying the newly created conference call. The app will be the initial sole owner of this call.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LPHCALL    <I>lphAddCall<BR></I>Specifies a far pointer to an <B>HCALL</B> handle. When setting up a call for the addition of a new party, a new temporary call (consultation call) is automatically allocated. Initially, the app will be the sole owner for this call. </P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwNumParties<BR></I>Specifies the expected number of parties in the conference call. This number is passed on to the service provider. The service provider is free to do with this number as it pleases; ignore it, use it a hint to allocate the right size conference bridge inside the switch, etc.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LPLINECALLPARAMS    <B>const</B> <I>lpCallParams<BR></I>Specifies a far pointer to call parameters to be used when establishing the consultation call. This parameter may be set to NULL if no special call setup parameters are desired.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALCALLHANDLE<BR>The specified call handle for the conference call is invalid.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_NOTOWNER<BR>The app does not have owner privileges to the specified call.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALLINEHANDLE<BR>The specified line handle is invalid.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALCALLSTATE<BR>The call is not in a valid state for the requested operation.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_CALLUNAVAIL<BR>All call appearances on the specified address are currently allocated.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_CONFERENCEFULL<BR>The requested number of parties cannot be satisfied.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALPOINTER<BR>One or more of the specified pointer parameters are invalid.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALCALLPARAMS<BR>The specified call parameters are invalid.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_OPERATIONUNAVAIL<BR>The specified operation is not available.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reason.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP"><I>hCall    </I>connected<BR><I>hConfCall    </I>Not applicable<BR><I>hAddCall    </I>Not applicable</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP"><B>LineSetupConference</B> provides two ways for establishing a new conference call, depending on whether a normal two-party call is required to pre-exist or not. When setting up a conference call from an existing two-party call, the <I>hCall</I> parameter is a valid call handle that is initially added to the conference call by the <B>lineSetupConference</B> request; <I>hLine</I> is ignored. On switches where conference call setup does not start with an existing call, <I>hCall</I> must be NULL and <I>hLine</I> must be specified to identify the line device on which to initiate the conference call. In either case, a consultation call is allocated for connecting to the party that is to be added to the call. The app can then use <B>lineDial</B> to dial the address of the other party.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">The conference call will typically transition into the <I>onHoldPendingConference</I> state, the consultation call <I>dialtone</I> state and the initial call (if one) into the <I>conferenced</I> state.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">A conference call can also be set up via a <B>lineCompleteTransfer</B> that is resolved into a three-way conference.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">The app may be able to toggle between the consultation call and the conference call by using <B>lineSwapHold</B>.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineDial, lineSwapHold, linePrepareAddToConference, lineAddToConference, lineRemoveFromConference</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Messages:  <B>LINE_CALLSTATE</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT54"></A>lineSetupTransfer</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="74pt" VALIGN="TOP"><COL WIDTH="352pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineSetupTransfer</B>(<I>hCall, lphConsultCall, lpCallParams</I>)<BR>This function initiates a transfer of the call specified by <I>hCall</I>.<I> </I>It establishes a consultation call, <I>lphConsultCall</I>, on which the party can be dialed that can become the destination of the transfer.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HCALL    <I>hCall<BR></I>Specifies the handle of the call to be transferred. The app must be an owner of the call.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LPHCALL    <I>lphConsultCall<BR></I>Specifies a far pointer to an <B>HCALL</B> handle. This location is then loaded with a handle identifying the temporary consultation call. When setting a call up for transfer, another call (a consultation call) is automatically allocated to enable the application to dial the address (using <B>lineDial</B>) of the party to where the call is to be transferred. The originating party can carry on a conversation over this consultation call prior to completing the transfer.<BR>This transfer procedure may not be valid for some line devices. The application may need to ignore the new consultation call and unhold an existing held call (using <B>lineUnhold</B>) to identify the destination of the transfer. On switches that support cross-address call transfer, the consultation call may exist on a different address than the call to be transferred. It may also be necessary that the consultation call be set up as an entirely new call, via <B>lineMakeCall</B>, to the destination of the transfer. Which forms of transfer as available are specified in the call's address capabilities.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LPLINECALLPARAMS    <B>const</B> <I>lpCallParams<BR></I>Specifies a far pointer to call parameters to be used when establishing the consultation call. This parameter may be set to NULL if no special call setup parameters are desired.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALCALLHANDLE<BR>The specified call handle is invalid.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_NOTOWNER<BR>The app does not have owner privileges to the specified call.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALCALLSTATE<BR>The call to be transferred is not in a valid state.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_CALLUNAVAIL<BR>All call appearances on the specified address are currently allocated.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALPOINTER<BR>One or more of the specified pointer parameters are invalid.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALCALLPARAMS<BR>The specified call parameters are invalid.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_OPERATIONUNAVAIL<BR>The specified operation is not available.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reason.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP"><I>hCall   </I>connected, onHoldPendingTransfer, onHold</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><I>hConsultCall   </I>Not applicable</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">This operation sets up the transfer of the call specified by <I>hCall</I>. The setup phase of a transfer establishes a consultation call that enables the application to send the address of the destination (the party to be transferred to) to the switch, while the call to be transferred is kept on hold.  This new call is referred to as a consultation call (<I>hConsultCall</I>) and can be manipulated independently of the original call (e.g., dropped, etc.).</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">When the consultation call has reached the <I>dialtone</I> call state, the application may proceed transferring the call either by dialing the destination address and tracking its progress, or by unholding an existing call.  The transfer of the original call to the selected destination is completed using <B>lineCompleteTransfer</B>.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">While the consultation call exists, the original call will typically transition to the <I>onholdPendingTransfer</I> state. The app may be able to toggle between the consultation call and the original call by using <B>lineSwapHold</B>.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">The app may also transfer calls in a single step, without having to deal with the intervening consultation call by using <B>lineBlindTransfer</B>.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineDial, lineCompleteTransfer, lineBlindTransfer, lineSwapHold</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Messages:  <B>LINE_CALLSTATE</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT55"></A>lineShutdown</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="78pt" VALIGN="TOP"><COL WIDTH="348pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineShutdown</B>(<I>hApp</I>)<BR>This function shuts down the application's usage of the line abstraction of API.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HLINEAPP    <I>hApp<BR></I>Specifies the app's usage handle for the line API.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALAPPHANDLE<BR>The app's specified usage handle is invalid.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">If this function is called when the application has lines open or calls active, then the call handles will be deleted and open lines closed. </P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineInitialize</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT56"></A>lineSwapHold</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="74pt" VALIGN="TOP"><COL WIDTH="352pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineSwapHold</B>(<I>hActiveCall, hConsultCall</I>)<BR>This function swaps the specified active call with the specified call on consultation hold.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HCALL    <I>hActiveCall<BR></I>Specifies the handle to the active call. The app must be an owner of the call.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">HCALL    <I>hConsultCall<BR></I>Specifies the handle to the consultation call. The app must be an owner of the call.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALCALLHANDLE<BR>One or both of the specified call handles are invalid.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_NOTOWNER<BR>The app does not have owner privileges to the specified calls.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALCALLSTATE<BR>The call states of the calls are invalid.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_OPERATIONUNAVAIL<BR>The specified operation is not available.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reason.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP"><I>hConsultCall   </I>onHoldPendingTransfer, onHoldPendingConference, onHold</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><I>hActiveCall   </I>connected</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">Swapping the active call with the call on consultation hold allows the application to alternate or toggle between these two calls. One example where this is typical behavior is in call waiting.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineSetupTransfer</B>, <B>lineSetupConference</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT57"></A>lineTranslateAddress</P>
<P>This function is being expanded to accommodate alternative call methods.</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="74pt" VALIGN="TOP"><COL WIDTH="352pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineTranslateAddress</B>(<I>hLine, lpszAddressIn, lpAddressOut,     lpdwCountryCode</I>)<BR>This function is used to translate between an address in canonical format and its dialable address and country code equivalent. </P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HLINE    <I>hLine<BR></I>Specifies a handle to the line device to which the translation is to apply.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LPCSTR    <B>const</B> <I>lpszAddressIn<BR></I>Specifies a far pointer to a NULL terminated string containing the address that is to be translated.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LPVARSTRING    <I>lpAddressOut<BR></I>Specifies a far pointer to a structure of type <B>VARSTRING</B>. This structure is used to return the address that is the result of the translation.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LPDWORD    <I>lpdwCountryCode<BR></I>Specifies a far pointer to a DWORD-sized location. This location is loaded with the country code of the translated address.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALLINEHANDLE<BR>The handle for the specified line device is invalid.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALPOINTER<BR>One or more of the specified pointer parameters are invalid.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALADDRESS<BR>The specified address is invalid.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_OPERATIONUNAVAIL<BR>The specified operation is not available.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reason.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP">Not applicable.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">None.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineMakeCall, lineDial, lineRedirect</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT58"></A>lineUncompleteCall</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="83pt" VALIGN="TOP"><COL WIDTH="339pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineUncompleteCall</B>(<I>hline, dwCompletionID</I>)<BR>This function is used to cancel the specified call competion request on the specified line. </P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HLINE    <I>hLine<BR></I>Specifies a handle to the line device on which a call completion is to be canceled.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwCompletionID<BR></I>Specifies the completion ID for the request that is to be canceled.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALLINEHANDLE<BR>The specified line handle is invalid.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALCOMPLETIONID<BR>The completion ID is invalid.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_OPERATIONUNAVAIL<BR>The specified operation is not available.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reason.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP">Not applicable.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">None.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineCompleteCall</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT59"></A>lineUnhold</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="78pt" VALIGN="TOP"><COL WIDTH="348pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineUnhold</B>(<I>hCall</I>)<BR>This function retrieves the specified held call.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HCALL    <I>hCall<BR></I>Specifies the handle to the call to be retrieved.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALCALLHANDLE<BR>The specified call handle is invalid.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_NOTOWNER<BR>The app does not have owner privileges to the specified call.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALCALLSTATE<BR>The call is not currently on hold.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_OPERATIONUNAVAIL<BR>The specified operation is not available.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reason.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP"><I>hCall   </I>onHold</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">This operation works only for calls on hard hold, i.e., call placed on hold using <B>lineHold</B>.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineHold</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT60"></A>lineUnpark</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="78pt" VALIGN="TOP"><COL WIDTH="343pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> lineUnpark</B>(<I>hLine</I>, <I>dwAddressID</I>, <I>lphCall, lpszDestAddress</I>)<BR>This function retrieves the call parked at the specified address and returns a call handle for it.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HLINE    <I>hLine<BR></I>Specifies a handle to the open line device on which a call is to unparked.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    <I>dwAddressID<BR></I>Specifies the address on <I>hLine</I> at which the unpark is to be originated.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LPHCALL    <I>lphCall<BR></I>Specifies a far pointer to the location of type HCALL where the handle to the unparked call is returned. The app will be the initial sole owner of this call.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LPCSTR    <B>const</B> <I>lpszDestAddress<BR></I>Specifies a far pointer to a NULL terminated character buffer that contains the address where the call is parked. The address is in standard dialable address format.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALLINEHANDLE<BR>The specified call handle is invalid.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALPOINTER<BR>One or more of the specified pointer parameters are invalid.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALADDRESSID<BR>The specified address ID is invalid.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_INVALADDRESS<BR>The specified address is invalid.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_NOMEM<BR>Unable to allocate or lock memory.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_OPERATIONUNAVAIL<BR>The specified operation is not available.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LINEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reason.</P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP">Not applicable.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">None.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>lineHold</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT61"></A>phoneClose</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="334pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Syntax</P></TD><TD VALIGN="TOP">LONG phoneClose(<I>hPhone</I>)<BR>This function closes the specified open phone device.</P></TD></TR><TR><TD VALIGN="TOP">Parameters</P></TD><TD VALIGN="TOP">HPHONE    <I>hPhone<BR></I>Specifies a handle to the open phone device to be closed. If the function is successful, then the handle is no longer valid.</P></TD></TR><TR><TD VALIGN="TOP">Return Value</P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">PHONEERR_INVALPHONEHANDLE<BR>The specified device handle is invalid.</P></TD></TR><TR><TD VALIGN="TOP">Comments</P></TD><TD VALIGN="TOP">After the open phone device has been successfully closed, the implementation sends a PHONE_CLOSE message to the application. Note that these messages can also be sent unsolicited as a result the phone device being reclaimed somehow. An application should therefore be prepared to handle these unsolicited close messages.</P></TD></TR><TR><TD VALIGN="TOP">See Also</P></TD><TD VALIGN="TOP">Messages:  PHONE_CLOSE</P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT62"></A>phoneDevSpecific</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="334pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> phoneDevSpecific</B>(<I>hPhone, lpParams, dwSize</I>)<BR>This function is used as a general extension mechanism to enable a Telephony API implementation to provide features not described in the other operations. The meanings of these extensions are device specific.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HPHONE    <I>hPhone<BR></I>Specifies a handle to a phone device.<BR>LPVOID    <I>lpParams<BR></I>Specifies a far pointer to a memory area used to hold a parameter block. Its interpretation is device specific. The contents of the parameter block is passed unchanged to or from the service provider by the Telephony DLL. <BR>DWORD    <I>dwSize<BR></I>The size in bytes of the parameter block area.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns include:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">PHONEERR_INVALPHONEHANDLE<BR>The specified phone handle is invalid.<BR>PHONEERR_INVALPOINTER<BR>The specified pointer parameter is invalid.<BR>PHONEERR_OPERATIONUNAVAIL<BR>The specified operation is not available.<BR>PHONEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reasons.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Additional error returns are device specific.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">This operation provides a generic parameter profile. The interpretation of the parameter block is device specific. Indications and replies that are device specific should use the <B>PHONE_DEVSPECIFIC</B> message.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">A service provider can provide access to device specific functions by defining parameters for use with this operation. Applications that want to make use of these device specific extensions should consult the device specific (i.e., vendor specific) documentation that describes what extentions are defined. Note that an app that relies on these device specific extensions will typically not be portable to work with other service provider environments. </P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Messages: <B>PHONE_DEVSPECIFIC</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT63"></A>phoneGetButtonInfo</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="334pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> phoneGetButtonInfo</B>(hPhone, dwButtonLampID, lpButtonInfo)<BR>This function returns information about the specified button.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HPHONE    hPhone<BR>Specifies a handle to the open phone device.<BR>DWORD    dwButtonLampID<BR>Specifies a button on the phone device.<BR>LPPHONEBUTTONINFO    lpButtonInfo<BR>Specifies a far pointer to a variable sized structure of type <B>PHONEBUTTONINFO</B>. This data structure describes the mode, the function, and provides additional descriptive text corresponding to the button.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">PHONEERR_INVALPHONEHANDLE<BR>The specified device handle is invalid.<BR>PHONEERR_INVALBUTTOMLAMPID<BR>The specified button/lamp ID is invalid.<BR>PHONEERR_INVALPOINTER<BR>The specified pointer parameter is invalid.<BR>PHONEERR_OPERATIONUNAVAIL<BR>The specified operation is not available.<BR>PHONEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">None.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>phoneSetButtonInfo<BR></B>Data Types:  <B>PHONEBUTTONINFO</B>, <B>PHONECAPS</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT64"></A>phoneGetData</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="334pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> phoneGetData</B>(hPhone, dwDataID, lpData, dwSize)<BR>This function uploads the information from the specified location in the open phone device to the specified buffer.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HPHONE    hPhone<BR>Specifies a handle to the open phone device. The app must be the owner of the phone.<BR>DWORD    dwDataID<BR>Specifies where in the phone device the buffer is to be uploaded from. <BR>LPVOID    lpData<BR>Specifies a far pointer to the memory buffer where the data is to be uploaded to.<BR>DWORD    dwSize<BR>Specifies the size of the data buffer in bytes.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">PHONEERR_INVALPHONEHANDLE<BR>The specified device handle is invalid.<BR>PHONEERR_INVALPOINTER<BR>The specified pointer parameter is invalid.<BR>PHONEERR_INVALPHONESTATE<BR>The phone device is not in a valid state for the requested operation.<BR>PHONEERR_INVALDATAID<BR>The specified data ID is invalid.<BR>PHONEERR_NOTOWNER<BR>The app does not have owner privileges to the specified phone device.<BR>PHONEERR_OPERATIONUNAVAIL<BR>The specified operation is not available.<BR>PHONEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">The function uploads a maximum of dwSize bytes from the phone device into lpData. If dwSize is zero, nothing is copied. The size of each data area is listed in the phone's device capabilities.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>phoneGetDevCaps, phoneSetData</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Data Types:  <B>PHONECAPS</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT65"></A>phoneGetDevCaps</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="334pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> phoneGetDevCaps</B>(hApp, dwDeviceID, dwAPIVersion, dwLowVersion, </P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">dwHighVersion, lpPhoneCaps)<BR>This function queries the specified phone device to determine its telephony capabilities.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HPHONEAPP    hApp<BR>Identifies a handle to the app's registration with the API.<BR>DWORD    dwDeviceID<BR>Identifies the phone device to be queried.<BR>DWORD    dwAPIVersion<BR>Specifies the negotiated API version number. This number is zero if the API version number has not yet been defined, and dwLowVersion and dwHighVersion specify the API version range the application can operate with. lpPhoneCaps will contain the selected API version number and the Extension ID that defines any available device specific extensions.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">dwAPIVersion is non-zero if the API version number is known, and dwLowVersion and dwHighVersion specify the Extension version range of the device specific extensions (specific to the Extension ID) the app can operate with. lpPhoneCaps will contain the selected Extension version number.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    dwLowVersion<BR>If dwAPIVersion is zero, this field specifies the earliest Telephony API version the app is compliant with. The high order word is the major version number, the low order word is the minor version number.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">If dwAPIVersion is non zero, this field specifies the earliest Extension version the app is compliant with (specific to the Extension ID returned in lpPhoneCaps). The high order word is the major version number, the low order word is the minor version number.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    dwHighVersion<BR>If dwAPIVersion is zero, this field specifies the latest Telephony API version the app is compliant with. The high order word is the major version number, the low order word is the minor version number.<BR>If dwAPIVersion is non zero, this field specifies the latest Extension version the app is compliant with (specific to the Extension ID returned in lpPhoneCaps). The high order word is the major version number, the low order word is the minor version number.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LPPHONECAPS    lpPhoneCaps<BR>Specifies a far pointer to a variable sized <B>PHONECAPS</B> structure, which is then loaded with the returned information about the capabilities of the device.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">PHONEERR_INVALAPPHANDLE<BR>The specified app registration handle is invalid.<BR>PHONEERR_INVALPOINTER<BR>The specified pointer parameter is invalid.<BR>PHONEERR_BADDEVICEID<BR>The specified device ID is out of range.<BR>PHONEERR_NODRIVER<BR>The driver was not installed.<BR>PHONEERR_INCOMPATIBLEVERSIONS<BR>The app requested a version range that cannot supported by the Telephony API implementation and corresponding service provider version.<BR>PHONEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">Use <B>phoneInitialize</B> to determine the number of phone devices present in the system. The device ID specified by dwDeviceID varies from zero to one less than the number of phone devices present.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><B>PhoneGetDevCaps</B> is invoked either once or twice, depending on whether or not the application wants to use device specific extensions. </P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">When called for the first time, the app specifies dwAPIVersion to zero and provides the API version range in dwLowVersion and dwHighVersion. lpPhoneCaps returns the selected API version number, and Extension ID, and the phone's device capabilities for the selected API version.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">If the app wants to enable the extensions defined by the Extension ID, it call <B>lineGetDevCaps</B> again. The app specifies the selected API version as dwAPIVersion, and provides the Extension ID-compatible version range in dwLowVersion and dwHighVersion. In addition to the information returned previously, lpPhoneCaps also returns the selected Extension version number and any device specific device capabilities for this extension.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">The API and Extension version numbers are those under which the API, Telephony DLL and service provider must operate. If version ranges do not overlap, then the app and API or service provider versions are incompatible and an error is returned.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Structure:  <B>PHONECAPS</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT66"></A>phoneGetDisplay</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="334pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> phoneGetDisplay</B>(<I>hPhone, lpDisplay</I>)<BR>This function returns the current contents of the specified phone display.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HPHONE    <I>hPhone<BR></I>Specifies a handle to the open phone device.<BR>LPVARSTRING    <I>lpDisplay<BR></I>Specifies a far pointer to the memory location where the display content is to be stored, of type <B>VARSTRING</B>. </P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">PHONEERR_INVALPHONEHANDLE<BR>The specified device handle is invalid.<BR>PHONEERR_INVALPOINTER<BR>The specified pointer parameter is invalid.<BR>PHONEERR_INVALPHONESTATE<BR>The phone device is not in a valid state for the requested operation.<BR>PHONEERR_OPERATIONUNAVAIL<BR>The specified operation is not available.<BR>PHONEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">The <I>lpDisplay</I> memory area should be at least (<B>dwNumRows</B> * <B>dwNumColumns</B>) elements in size to receive all of the display information. <B>dwNumRows</B> and <B>dwNumColumns</B> are available in the <B>PHONECAPS</B> structure returned by <B>phoneGetDevCaps</B>.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>phoneGetDevCaps, phoneSetDisplay</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Data Types:  <B>PHONECAPS</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT67"></A>phoneGetGain</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="334pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> phoneGetGain</B>(hPhone, dwHookSwitchDev, lpdwGain)<BR>This function returns the gain setting of the mic of specified phone's hookswitch device.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HPHONE    hPhone<BR>Specifies a handle to the open phone device.<BR>DWORD    dwHookSwitchDev<BR>Identifies the hookswitch device whose gain level is queried, of type <B>PHONEHOOKSWITCHDEV</B>.<BR>PHONEHOOKSWITCHDEV_HANDSET<BR>This is the phone's handset.<BR>PHONEHOOKSWITCHDEV_SPEAKER<BR>This is the phone's speakerphone or adjunct.<BR>PHONEHOOKSWITCHDEV_HEADSET<BR>This is the phone's headset.<BR>LPDWORD    lpdwGain<BR>Specifies a far pointer to a DWORD sized location containing the current gain setting of the hookswitch mic component. dwGain specifies the volume level of the hookswitch device. This is a number in the range 0x00000000, which is silence to 0x0000FFFF which is maximum volume. The actual granularity and quantization of gain settings in this range are service provider specific.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">PHONEERR_INVALPHONEHANDLE<BR>The specified device handle is invalid.<BR>PHONEERR_INVALPOINTER<BR>The specified pointer parameter is invalid.<BR>PHONEERR_INVALPHONESTATE<BR>The phone device is not in a valid state for the requested operation.<BR>PHONEERR_INVALHOOKSWITCHDEV<BR>The hookswitch device parameter is invalid.<BR>PHONEERR_OPERATIONUNAVAIL<BR>The specified operation is not available.<BR>PHONEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">None.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>phoneGetDevCaps, phoneSetGain</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Data Types:  <B>PHONECAPS</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT68"></A>phoneGetHookSwitch</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="334pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> phoneGetHookSwitch</B>(<I>hPhone, lpdwHookSwitchDevs</I>)<BR>This function returns the current hook switch mode of the specified open phone device.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HPHONE    <I>hPhone<BR></I>Specifies a handle to the open phone device.<BR>LPDWORD    <I>lpdwHookSwitchDevs<BR></I>Specifies a far pointer to a DWORD-sized location to be filled with the mode of the phone's hookswitch devices, of type <B>PHONEHOOKSWITCHDEV</B>. If a bit position is FALSE, then the corresponding hookswitch device is on hook; if TRUE, then the mic and/or speaker part of the corresponding hookswitch device is offhook. To find out whether mic and/or speaker are enabled, the app can use <B>phoneGetStatus</B>. Values are:<BR>PHONEHOOKSWITCHDEV_HANDSET<BR>This is the phone's handset.<BR>PHONEHOOKSWITCHDEV_SPEAKER<BR>This is the phone's speakerphone or adjunct.<BR>PHONEHOOKSWITCHDEV_HEADSET<BR>This is the phone's headset.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">PHONEERR_INVALPHONEHANDLE<BR>The specified device handle is invalid.<BR>PHONEERR_INVALPOINTER<BR>The specified pointer parameter is invalid.<BR>PHONEERR_INVALPHONESTATE<BR>The phone device is not in a valid state for the requested operation.<BR>PHONEERR_OPERATIONUNAVAIL<BR>The specified operation is not available.<BR>PHONEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">After the hookswitch state of a device changes, and if hookswitch monitoring is enabled, the application is sent a <B>PHONE_STATE</B> message.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:<B>  phoneSetHookSwitch</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Messages:<B>  PHONE_STATE</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Data types:  <B>PHONESTATUS, PHONEHOOKSWITCHDEV</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT69"></A>phoneGetID</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="334pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> phoneGetID</B>(hPhone, lpDeviceID, lpszDeviceClass)<BR>This function returns a device ID for the given device class associated with the specified phone device.  </P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HPHONE    hPhone<BR>Specifies a handle to an open phone device.<BR>LPVARSTRING    lpDeviceID<BR>Specifies a far pointer to a data structure of type <B>VARSTRING</B> where the device ID is returned. Upon successful completion of the request, this location is filled with the device ID. The format of the returned information depends on the method used by the device class (API) for naming devices. <BR>LPCSTR    <B>const</B> lpszDeviceClass<BR>Specifies a far pointer to a NULL-terminated string that specifies the device class of the device whose ID is requested. Valid device class strings are those used in the SYSTEM.INI section to identify device classes.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">PHONEERR_INVALPHONEHANDLE<BR>The hPhone parameter is an invalid handle.<BR>PHONEERR_INVALPOINTER<BR>One of the specified pointer parameters are invalid.<BR>PHONEERR_NODEVICE<BR>The phone device has no associated device for the given device class.<BR>PHONEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">This operation can be used to retrieve a phone device ID given a phone handle. It can also be used to obtain the device ID of the media device (e.g., mci waveform, mci midi, waveform, etc.) associated with the opened phone device. This ID can then be used with the appropriate media API (e.g., mci, midi, wav, etc.) to select the corresponding device.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">None.</P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT70"></A>phoneGetLamp</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="334pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> phoneGetLamp</B>(hPhone, dwButtonLampID, lpdwLampMode)<BR>This function returns the current lamp mode of the specified lamp.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HPHONE    hPhone<BR>Specifies a handle to the open phone device.<BR>DWORD    dwButtonLampID<BR>Specifies the ID of the lamp to be queried.<BR>LPDWORD    lpdwLampMode<BR>Specifies a far pointer to a memory location that will hold the lamp mode status of the given lamp, of type <B>PHONELAMPMODE</B>. Values are:<BR>PHONELAMPMODE_BROKENFLUTTER<BR>Broken flutter is the superposition of flash and flutter.<BR>PHONELAMPMODE_FLASH<BR>Flash means slow on and off.<BR>PHONELAMPMODE_FLUTTER<BR>Flutter means fast on and off.<BR>PHONELAMPMODE_OFF<BR>The lamp is off.<BR>PHONELAMPMODE_STEADY<BR>The lamp is continuously lit.<BR>PHONELAMPMODE_WINK<BR>The lamp is winking.<BR>PHONELAMPMODE_UNKNOWN<BR>The lamp mode is currently unknown.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">PHONEERR_INVALPHONEHANDLE<BR>The specified device handle is invalid.<BR>PHONEERR_INVALBUTTONLAMPID<BR>The specified Button ID is out of range.<BR>PHONEERR_INVALPOINTER<BR>The specified pointer parameter is invalid.<BR>PHONEERR_INVALPHONESTATE<BR>The phone device is not in a valid state for the requested operation.<BR>PHONEERR_OPERATIONUNAVAIL<BR>The specified operation is not available.<BR>PHONEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">Phone sets that have multiple lamps per button, should be modeled using multiple button/lamps pairs. Each extra button/lamp pair should use a DUMMY button.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>phoneGetDevCaps, phoneSetLamp</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Data Types:  <B>PHONECAPS, PHONELAMPMODE</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT71"></A>phoneGetRing</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="334pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> phoneGetRing</B>(hPhone, lpdwRingMode, lpdwVolume)<BR>This function enables an application to query the specified open phone device as to its current ring mode.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HPHONE    hPhone<BR>Specifies a handle to the open phone device.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">LPDWORD    lpdwRingMode<BR>Specifies the ringing pattern with which the phone is ringing. Zero indicates that the phone is not ringing.<BR>LPDWORD    lpdwVolume<BR>Specifies the volume level with which the phone is ringing. This is a number in the range 0x00000000, which is silence to 0x0000FFFF which is maximum volume. The actual granularity and quantization of volume settings in this range are service provider specific.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">PHONEERR_INVALPHONEHANDLE<BR>The specified device handle is invalid.<BR>PHONEERR_INVALPHONESTATE<BR>The phone device is not in a valid state for the requested operation.<BR>PHONEERR_INVALPOINTER<BR>One or more of the specified pointer parameters are invalid.<BR>PHONEERR_OPERATIONUNAVAIL<BR>The specified operation is not available.<BR>PHONEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">The service provider defines the actual audible ringing patterns corresponding to each of phone's ring modes.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>phoneGetDevCaps, phoneSetRing</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Data Types:  <B>PHONECAPS</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT72"></A>phoneGetStatus</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="334pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> phoneGetStatus</B>(<I>hPhone, lpPhoneStatus</I>)<BR>This operation enables an application to query the specified open phone device for its overall status.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HPHONE    <I>hPhone<BR></I>Specifies a handle to the open phone device to be queried.<BR>LPPHONESTATUS    <I>lpPhoneStatus<BR></I>Specifies a far pointer to a variable sized data structure of type <B>PHONESTATUS</B>, which is loaded with the returned information about the phone's status.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">PHONEERR_INVALPHONEHANDLE<BR>The specified device handle is invalid.<BR>PHONEERR_INVALPOINTER<BR>The specified pointer parameter is invalid.<BR>PHONEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">An application can use this function to determine the current state of an open phone device. The status information describes information about the phone device's hook switch devices, ringer, volume, display, and lamps of the open phone.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Messages:  <B>PHONE_STATE</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Data Types:  <B>PHONESTATUS</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT73"></A>phoneGetStatusMessages</P>
<P></P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="334pt" VALIGN="TOP"><COL WIDTH="46pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> phoneGetStatusMessages</B>(hPhone, lpdwPhoneStates, lpdwButtonModes,</P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">lpdwButtonStates)<BR>This operation returns which phone state changes on the specified phone device will generate a callback to the application.</P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HLINE    hPhone<BR>Specifies a handle to the open line device to be monitored.<BR>LPDWORD    lpdwPhoneStates<BR>Specifies a far pointer to a variable of type <B>PHONESTATE</B>.<B> </B>These flags specify the set of phone status changes and events for which the application wishes to receive notification messages. Monitoring can be individually enabled and disabled for:<BR>PHONESTATE_OTHER<BR>An other phone status information item not listed below has changed.<BR>PHONESTATE_CONNECTED<BR>The connection between the phone device and the API was just made. This happens when the API is first invoked, or when the wire connection the phone to the PC is plugged in with the API active.<BR>PHONESTATE_DISCONNECTED<BR>The connection between the phone device and the API was just broken. This happens when the wire connecting the phone set to the PC is unplugged while the API is active.<BR>PHONESTATE_OWNER<BR>The number of owners for the phone device has changed.<BR>PHONESTATE_MONITORS<BR>The number of monitors for the phone device has changed.<BR>PHONESTATE_DISPLAY<BR>The display of the phone has changed.<BR>PHONESTATE_LAMP<BR>A lamp of the phone has changed.<BR>PHONESTATE_RINGMODE<BR>The ring mode of the phone has changed.<BR>PHONESTATE_RINGVOLUME<BR>The ring volume of the phone has changed.<BR>PHONESTATE_HANDSETHOOKSWITCH<BR>The handset hookswitch state has changed.<BR>PHONESTATE_HANDSETVOLUME<BR>The handset's speaker volume setting has changed.<BR>PHONESTATE_HANDSETGAIN<BR>The handset's mic gain setting has changed.<BR>PHONESTATE_SPEAKERHOOKSWITCH<BR>The speakerphone's hookswitch state has changed.<BR>PHONESTATE_SPEAKERVOLUME<BR>The speakerphone's speaker volume setting has changed.<BR>PHONESTATE_SPEAKERGAIN<BR>The speakerphone's mic gain setting state has changed.<BR>PHONESTATE_HEADSETHOOKSWITCH<BR>The headset's hookswitch state has changed.<BR>PHONESTATE_HEADSETVOLUME<BR>The headset's speaker volume setting has changed.<BR>PHONESTATE_HEADSETGAIN<BR>The headset's mic gain setting has changed.<BR>PHONESTATE_SUSPEND<BR>The app's use of the phone is temporarily suspended.<BR>PHONESTATE_RESUME<BR>The app's use of the phone device is resumed after having been suspended for some time.<BR>PHONESTATE_DEVSPECIFIC<BR>The phone's device specific information has changed.<BR>LPDWORD    lpdwButtonModes<BR>Specifies a far pointer to a <B>PHONEBUTTONMODE</B>. These flags specify the set of phone button modes for which the application wishes to receive notification messages. Values are:<BR>PHONEBUTTONMODE_CALL<BR>The button is assigned to a call appearance.<BR>PHONEBUTTONMODE_FEATURE<BR>The button is assigned to requesting features from the switch, such as hold, conference, transfer, etc.<BR>PHONEBUTTONMODE_KEYPAD<BR>The button is one of the twelve keypad buttons, '0' through '9', '*', and '#'.<BR>PHONEBUTTONMODE_LOCAL<BR>The button is a local function button, such as mute or volume control.<BR>PHONEBUTTONMODE_DISPLAY<BR>The button is a "soft" button associated with the phone's display. A phone set can have zero or more display buttons. <BR>LPDWORD    lpdwButtonStates<BR>Specifies a far pinter to a <B>PHONEBUTTONSTATE</B>. These flags specify the set of phone button state changes for which the application wishes to receive notification messages. Values are:<BR>PHONEBUTTONSTATE_UP<BR>The button is in the "up" state.<BR>PHONEBUTTONSTATE_DOWN<BR>The button is in the "down" state (i.e., pressed down).</P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">PHONEERR_INVALPHONEHANDLE<BR>The specified phone device handle is invalid.<BR>PHONEERR_INVALPOINTER<BR>One or more of the specified pointer parameters are invalid.<BR>PHONEERR_OPERATIONUNAVAIL<BR>The specified operation is not available.<BR>PHONEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reasons.</P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP">Not applicable.</P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">An application can use this function to query the generation of the corresponding messages. Message generation can be controlled by <B>phoneSetStatusMessages</B>. All phone status messages are disabled by default.</P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>phoneSetStatusMessages</B></P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Messages:  <B>PHONE_STATE, PHONE_BUTTON</B></P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Data Types: <B>PHONESTATE</B></P></TD><TD VALIGN="TOP"></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT74"></A>phoneGetVolume</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="334pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> phoneGetVolume</B>(hPhone, dwHookSwitchDev, lpdwVolume)<BR>This function returns the volume setting of the specified phone's hookswitch device.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HPHONE    hPhone<BR>Specifies a handle to the open phone device.<BR>DWORD    dwHookSwitchDev<BR>Identifies a single hook switch device whose volume level is queried, of type <B>PHONEHOOKSWITCHDEV</B>. Values are:<BR>PHONEHOOKSWITCHDEV_HANDSET<BR>This is the phone's handset.<BR>PHONEHOOKSWITCHDEV_SPEAKER<BR>This is the phone's speakerphone or adjunct.<BR>PHONEHOOKSWITCHDEV_HEADSET<BR>This is the phone's headset.<BR>LPDWORD    lpdwVolume<BR>Specifies a far pointer to a DWORD sized location containing the current volume setting of the hookswitch device. dwVolume specifies the volume level of the hookswitch device. This is a number in the range 0x00000000, which is silence to 0x0000FFFF which is maximum volume. The actual granularity and quantization of volume settings in this range are service provider specific.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">PHONEERR_INVALPHONEHANDLE<BR>The specified device handle is invalid.<BR>PHONEERR_INVALPHONESTATE<BR>The phone device is not in a valid state for the requested operation.<BR>PHONEERR_INVALPOINTER<BR>The specified pointer parameter is invalid.<BR>PHONEERR_INVALHOOKSWITCHDEV<BR>The hookswitch device parameter is invalid.<BR>PHONEERR_OPERATIONUNAVAIL<BR>The specified operation is not available.<BR>PHONEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">None.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>phoneGetDevCaps, phoneSetVolume</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Data Types:  <B>PHONECAPS</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT75"></A>phoneInitialize</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="334pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> phoneInitialize</B>(lphApp, hInstance, lpfnCallback, lpsAppName, dwSize, </P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">lpdwNumDevs)<BR>This function initializes the application's use of the Telephony API DLL for subsequent use of the phone abstraction. It registers the application's specified notification mechanism and returns the number of phone devices that are available to the application.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">LPHPHONEAPP    lphApp<BR>Specifies a far pointer to a location that is filled with the app's usage handle for the API.<BR>HINSTANCE    hInstance<BR>Specifies the instance handle of the client application or DLL.<BR>PHONECALLBACK    lpfnCallback<BR>Specifies the address of a callback function to be invoked related to status and events on the phone device.<BR>LPCSTR    <B>const</B> lpsAppName<BR>Specifies a far pointer to a string of the format specified in the <B>dwStringFormat</B> field of the phone device capabilities. If this parameter is non-NULL, then it contains an application-supplied name of the app. This name is provided in the <B>PHONESTATUS</B> structure to indicate in a user-friendly way, which application is the current owner of the phone device. This information can be useful for call logging purposes. If lpsAppName is NULL, then the application's module name will used instead.<BR>DWORD<BR>dwSize<BR>Specifies the size in bytes of the string pointed at by the lpsAppName parameter. This parameter is ignored in lpsAppName is NULL.<BR>LPDWORD    lpdwNumDevs<BR>Specifies a far pointer to DWORD-sized memory location. This location is loaded with the number of phone devices available to the application.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">PHONEERR_INVALAPPNAME<BR>The specified app name is invalid.<BR>PHONEERR_INVALPOINTER<BR>One or more of the specified pointer parameters are invalid.<BR>PHONEERR_RESOURCEUNAVAIL<BR>The specified operation cannot be completed because of resource overcommitment.<BR>PHONEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reason.</P></TD></TR><TR><TD VALIGN="TOP"><B>Callback</B></P></TD><TD VALIGN="TOP">VOID FAR PASCAL<B> phoneCallbackFunc</B>(hDevice, dwMsg, dwCallbackInstance, </P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">dwParam1, dwParam2, dwParam3)</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><B>phoneCallbackFunc</B> is a placeholder for the application-supplied function name. </P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><B>Parameters</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">HANDLE    hDevice<BR>Specified a handle to a phone device associated with the callback.<BR>DWORD   dwMsg<BR>Specifies a line or call device message.<BR>DWORD   dwCallbackInstance<BR>Specifies callback instance data passed back to the application in the callback. This DWORD is not interpreted by the API.<BR>DWORD   dwParam1<BR>Specifies a parameter for the message.<BR>DWORD   dwParam2<BR>Specifies a parameter for the message.<BR>DWORD   dwParam3<BR>Specifies a parameter for the message.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">The actual parameters passed to the application's callback function are described in the Messages Chapter of this document.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">All callbacks occur in the application's context. The callback function must reside in a dynamic link library (DLL) or application module and be exported in the module definition file. You must use <B>MakeProcInstance</B> to get a procedure-instance address for the callback function.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">The app can refer to individual line devices by using line device IDs that range from zero to dwNumDevs - 1. An application should not assume that these line devices are capable of anything beyond what is specified by the simple telephony subset without first querying their device capabilities via <B>lineGetDevCaps</B> and <B>lineGetAddressCaps</B>.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:<B>  phoneShutdown</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT76"></A>phoneOpen</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="334pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> phoneOpen</B>(hApp, dwDeviceID, lphPhone, dwAPIVersion, dwExtVersion, dwCallbackInstance, dwPrivilege)<BR>This function opens the specified phone device. A phone device can be opened using either owner privileges or monitor privileges. An application that opens the phone with owner privileges can control the phone's lamps, display, ringer, and hook switch(es). An application that opens the phone device with monitor privileges is only notified about events occurring at the phone; i.e., hookswitch changes, button presses via messages sent to its window or callback. Ownership of a phone device is exclusive; i.e., at most one application can have a phone device opened with owner privileges at once. It can, however, be opened multiple times with monitor privileges.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HPHONEAPP    hApp<BR>Specifies a handle to the app's registration with the API.<BR>DWORD    dwDeviceID<BR>Identifies the phone device be opened.<BR>LPHPHONE    lphPhone<BR>Specifies a far pointer to a <B>HPHONE</B> handle. This location is then loaded with a handle that identifies the open phone device. Use this handle to identify the device when invoking other phone control functions.<BR>DWORD    dwAPIVersion<BR>Specifies the API version number under which the app and Telephony API have agreed to operate. This number is obtained from <B>phoneGetDevCaps</B>.<BR>DWORD    dwExtVersion<BR>Specifies the Extension version number under which the app and the service provider agree to operate. This number is zero if the application does not use any extensions. This number is obtained from <B>phoneGetDevCaps</B>.<BR>DWORD    dwCallbackInstance<BR>Specifies user instance data passed back to the application's callback. This parameter is not interpreted by the Telephony API.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    dwPrivilege<BR>Specifies the privilege requested, of type <B>PHONEPRIVILEGE</B>. Values are:<BR>PHONEPRIVILEGE_MONITOR<BR>An application that opens a phone device with this privilege is informed about events and state changes occurring on the phone. The application cannot invoke any operations on the phone device that would change its state.<BR>PHONEPRIVILEGE_OWNER<BR>An application that opens a phone device in this mode is allowed to change the state of the lamps, ringer, display, and hook switch devices of the phone. Having owner privileges to a phone device automatically includes monitor privileges as well.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">PHONEERR_INVALAPPHANDLE<BR>The specified resource is already allocated.<BR>PHONEERR_BADDEVICEID<BR>The specified device ID is out of range.<BR>PHONEERR_INCOMPATIBLEVERSION<BR>The app requested an incompatible API version number.<BR>PHONEERR_INVALEXTVERSION<BR>The app requested an invalid extension version number.<BR>PHONEERR_ALLOCATED<BR>The specified resource is already allocated.<BR>PHONEERR_NOMEM<BR>Unable to allocate or lock memory.<BR>PHONEERR_NODRIVER<BR>The driver was not installed.<BR>PHONEERR_INVALPOINTER<BR>One or more of the specified pointer parameters are invalid.<BR>PHONEERR_RESOURCEUNAVAIL<BR>The specified operation cannot be completed because of resource overcommitment.<BR>PHONEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">When opening a phone device with monitor privileges, the application is sent messages when events occur that change the status of the phone. Message sent to the application include <B>PHONE_BUTTON</B> and <B>PHONE_STATE</B>. The latter provides an indication of the phone's status item that has changed.<BR>When opening a phone with owner privileges, the phone device can be manipulated in ways that affect the state of the phone device. An application should only open a phone using owner privileges is to actively wants to manipulate the phone device, and close the phone device when done to allow other applications to control the phone.<BR>When an app opens a phone device it must specify the negotiated API version and, if it wants to use the phone's extensions, the phone's device specific Extension version. This version numbers should have been obtained via <B>phoneGetDevCaps</B>. Version numbering allows the mix and match of different app versions with different API versions and service provider versions.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>phoneClose</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Data Types:  <B>PHONEPRIVILEGE</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT77"></A>phoneSetButtonInfo</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="334pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> phoneSetButtonInfo</B>(hPhone, dwButtonLampID, lpButtonInfo)<BR>This function sets information about the specified button on the specified phone.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HPHONE    hPhone<BR>Specifies a handle to the open phone device. The app must be the owner of the phone device.<BR>DWORD    dwButtonLampID<BR>Specifies a button on the phone device.<BR>LPPHONEBUTTONINFO    <B>const</B> lpButtonInfo<BR>Specifies a far pointer to a variable sized structure of type <B>PHONEBUTTONINFO</B>. This data structure describes the mode, the function, and provides additional descriptive text corresponding to the button.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">PHONEERR_INVALPHONEHANDLE<BR>The specified device handle is invalid.<BR>PHONEERR_NOTOWNER<BR>The app does not have owner privileges to the specified phone device.<BR>PHONEERR_INVALBUTTONLAMPID<BR>The specified button/lamp ID is invalid.<BR>PHONEERR_INVALPOINTER<BR>The specified pointer parameter is invalid.<BR>PHONEERR_OPERATIONUNAVAIL<BR>The specified operation is not available.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">This function sets the meaning and associated descriptive text of a phone's buttons.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>phoneGetButtonInfo<BR></B>Data Types:  <B>PHONEBUTTONINFO</B>, <B>PHONECAPS</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT78"></A>phoneSetData</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="334pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> phoneSetData</B>(hPhone, dwDataID, lpData, dwSize)<BR>This function downloads the information in the specified buffer to the opened phone device at the selected data ID.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HPHONE    hPhone<BR>Specifies a handle to the open phone device. The app must be the owner of the phone.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    dwDataID<BR>Specifies where in the phone device the buffer is to be downloaded. <BR>LPVOID    <B>const</B> lpData<BR>Specifies a far pointer to the memory location where the data is to be downloaded from. </P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    dwSize<BR>Specifies the size of the buffer in bytes.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">PHONEERR_INVALPHONEHANDLE<BR>The specified device handle is invalid.<BR>PHONEERR_NOTOWNER<BR>The app does not have owner privileges to the specified phone device.<BR>PHONEERR_INVALDATAID<BR>The specified data ID is invalid.<BR>PHONEERR_INVALPHONESTATE<BR>The phone device is not in a valid state for the requested operation.<BR>PHONEERR_INVALPOINTER<BR>The specified pointer parameter is invalid.<BR>PHONEERR_OPERATIONUNAVAIL<BR>The specified operation is not available.<BR>PHONEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reasons.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">The function downloads a maximum of dwSize bytes from lpData to the phone device. The format of the data, its meaning to the phone device, the meaning of the data ID are service provider specific. The data in the buffer or the selection of a data ID may act as commands to the phone device.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>phoneGetDevCaps, phoneGetData<BR></B>Data Types:  <B>PHONECAPS</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT79"></A>phoneSetDisplay</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="334pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> phoneSetDisplay</B>(hPhone, dwRow, dwColumn, lpsDisplay, dwSize)<BR>This function causes the specified string to be displayed on the specified open phone device.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HPHONE    hPhone<BR>Specifies a handle to the open phone device. The app must be the owner of the phone.<BR>DWORD    dwRow<BR>Specifies the row on the display where the new text is to be displayed.<BR>DWORD    dwColumn<BR>Specifies the column position on the display where the new text is to be displayed.<BR>LPCSTR    <B>const</B> lpsDisplay<BR>Specifies a far pointer to the memory location where the display content is stored. The display information must have the format specified as <B>dwStringFormat</B> in the phone's device capabilities. <BR>DWORD    dwSize<BR>Specifies the size in bytes of the information pointed to by lpDisplay.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">PHONEERR_INVALPHONEHANDLE<BR>The specified device handle is invalid.<BR>PHONEERR_NOTOWNER<BR>The app does not have owner privileges to the specified phone device.<BR>PHONEERR_INVALPHONESTATE<BR>The phone device is not in a valid state for the requested operation.<BR>PHONEERR_INVALPOINTER<BR>The specified pointer parameter is invalid.<BR>PHONEERR_INVALPARAM<BR>The row or column parameters are invalid or out of range.<BR>PHONEERR_OPERATIONUNAVAIL<BR>The specified operation is not available.<BR>PHONEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reasons</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">The specified display information is written to the phone's display, starting at the specified positions. This operation overwrites previously displayed information. If the amount of information exceeds the size of the display, then the information will be truncated. The amount of information that can be displayed is at most (<B>dwNumRows</B> * <B>dwNumColumns</B>) elements in size. <B>dwNumRows</B> and <B>dwNumColumns</B> are available in the <B>PHONECAPS</B> structure returned by <B>phoneGetDevCaps</B>; they are zero-based.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>phoneGetDevCaps, phoneGetDisplay<BR></B>Data Types:  <B>PHONECAPS</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT80"></A>phoneSetGain</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="334pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> phoneSetGain</B>(hPhone, dwHookSwitchDev, dwGain)<BR>This function sets the gain of the mic of the specified hook switch device to the specified gain level.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HPHONE    hPhone<BR>Specifies a handle to the open phone device. The app must be the owner of the phone.<BR>DWORD    dwHookSwitchDev<BR>Identifies the hook switch device whose mic's gain is to be set, of type <B>PHONEHOOKSWITCHDEV</B>. Values are:<BR>PHONEHOOKSWITCHDEV_HANDSET<BR>This is the phone's handset.<BR>PHONEHOOKSWITCHDEV_SPEAKER<BR>This is the phone's speakerphone or adjunct.<BR>PHONEHOOKSWITCH_HEADSET<BR>This is the phone's headset.<BR>DWORD    dwGain<BR>Specifies a far pointer to a DWORD sized location containing the current gain setting of the device. dwGain specifies the gain level of the hookswitch device. This is a number in the range 0x00000000, which is silence to 0x0000FFFF which is maximum volume. The actual granularity and quantization of gain settings in this range are service provider specific.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">PHONEERR_INVALPHONEHANDLE<BR>The specified device handle is invalid.<BR>PHONEERR_NOTOWNER<BR>The app does not have owner privileges to the specified phone device.<BR>PHONEERR_INVALPHONESTATE<BR>The phone device is not in a valid state for the requested operation.<BR>PHONEERR_INVALHOOKSWITCHDEV<BR>The hookswitch device parameter is invalid.<BR>PHONEERR_OPERATIONUNAVAIL<BR>The specified operation is not available.<BR>PHONEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reason.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">None.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>phoneGetDevCaps, phoneSetGain</B></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Data Types:  <B>PHONECAPS</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT81"></A>phoneSetHookSwitch</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="334pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> phoneSetHookSwitch</B>(hPhone, dwHookSwitchDevs, </P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">dwHookSwitchMode)<BR>This function sets the hook state of the specified open phone's hookswitch devices to the specified mode. Only the hookswitch state of the hookswitch devices listed is affected.<BR></P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HPHONE    hPhone<BR>Specifies a handle to the open phone device. The app must be the owner of the phone.<BR><BR>DWORD    dwHookSwitchDevs<BR>Specifies the device(s) whose hookswitch mode is to be set, of type <B>PHONEHOOKSWITCHDEV</B>. Values are:<BR>PHONEHOOKSWITCHDEV_HANDSET<BR>This is the phone's handset.<BR>PHONEHOOKSWITCHDEV_SPEAKER<BR>This is the phone's speakerphone or adjunct.<BR>PHONEHOOKSWITCHDEV_HEADSET<BR>This is the phone's headset.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">DWORD    dwHookSwitchMode<BR>Specifies the hookswitch mode to set, of type <B>PHONEHOOKSWITCHMODE</B>. Values are:<BR>PHONEHOOKSWITCHMODE_ONHOOK<BR>The device's mic and speaker are both onhook.<BR>PHONEHOOKSWITCHMODE_MIC<BR>The devicer's mic is active, the speaker is mute.<BR>PHONEHOOKSWITCHMODE_SPEAKER<BR>The device's speaker is active, the mic is mute.<BR>PHONEHOOKSWITCHMODE_MICSPEAKER<BR>The device's mic and speaker are both active.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">PHONEERR_INVALPHONEHANDLE<BR>The specified phone device handle is invalid.<BR>PHONEERR_NOTOWNER<BR>The app does not have owner privileges to the specified phone device.<BR>PHONEERR_INVALHOOKSWITCHDEV<BR>The hookswitch device parameter is invalid.<BR>PHONEERR_INVALHOOKSWITCHMODE<BR>The hookswitch mode parameter is invalid.<BR>PHONEERR_INVALPHONESTATE<BR>The phone device is not in a valid state for the requested operation.<BR>PHONEERR_OPERATIONUNAVAIL<BR>The specified operation is not available.<BR>PHONEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reason.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">The hookswitch mode is the same for all devices specified. If different settings are desired, then this function can be invoked multiple times with a different set of parameters. A <B>PHONE_STATE</B> message is sent to the application after the hookswitch state has changed.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>phoneGetHookSwitch<BR></B>Messages:<B>  PHONE_STATE<BR></B>Data types:  <B>PHONESTATUS, PHONEHOOKSWITCHDEV, <BR>PHONEHOOKSWITCHMODE</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT82"></A>phoneSetLamp</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="334pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> phoneSetLamp</B>(hPhone, dwButtonLampID, dwLampMode)<BR>This function causes the specified lamp to be lit on the specified open phone device in the specified lamp mode.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HPHONE    hPhone<BR>Specifies a handle to the open phone device. The app must be the owner of the phone.<BR>DWORD    dwButtonLampID<BR>Identifies the button whose lamp is to be lit.<BR><BR>DWORD    dwLampMode<BR>Specifies how the lamp is to be lit, of type <B>PHONELAMPMODE</B>. Values are:<BR>PHONELAMPMODE_BROKENFLUTTER<BR>Broken flutter is the superposition of flash and flutter.<BR>PHONELAMPMODE_FLASH<BR>Flash means slow on and off.<BR>PHONELAMPMODE_FLUTTER<BR>Flutter means fast on and off.<BR>PHONELAMPMODE_OFF<BR>The lamp is off.<BR>PHONELAMPMODE_STEADY<BR>The lamp is continuously lit.<BR>PHONELAMPMODE_WINK<BR>The lamp is winking.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">PHONEERR_INVALPHONEHANDLE<BR>The specified device handle is invalid.<BR>PHONEERR_NOTOWNER<BR>The app does not have owner privileges to the specified phone device.<BR>PHONEERR_INVALBUTTONLAMPID<BR>The specified button/lampID is out of range.<BR>PHONEERR_INVALPHONESTATE<BR>The phone device is not in a valid state for the requested operation.<BR>PHONEERR_INVALLAMPMODE<BR>The specified lamp mode parameter is invalid.<BR>PHONEERR_OPERATIONUNAVAIL<BR>The specified operation is not available.<BR>PHONEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reason.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">None.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>phoneGetDevCaps, phoneGetLamp<BR></B>Data Types:  <B>PHONELAMPMODE</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT83"></A>phoneSetRing</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="334pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> phoneSetRing</B>(hPhone, dwRingMode, dwVolume)<BR>This function rings the specified open phone device using the specified ring mode and volume.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HPHONE    hPhone<BR>Specifies a handle to the open phone device. The app must be the owner of the phone device.<BR>DWORD    dwRingMode<BR>Specifies the ringing pattern with which to ring the phone.<BR>DWORD    dwVolume<BR>Specifies the volume level with which the phone is ringing. This is a number in the range 0x00000000, which is silence to 0x0000FFFF which is maximum volume. The actual granularity and quantization of volume settings in this range are service provider specific.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">PHONEERR_INVALPHONEHANDLE<BR>The specified device handle is invalid.<BR>PHONEERR_NOTOWNER<BR>The app does not have owner privileges to the specified phone device.<BR>The phone device is not in a valid state for the requested operation.<BR>PHONEERR_INVALRINGMODE<BR>The ring mode parameter is invalid.<BR>PHONEERR_OPERATIONUNAVAIL<BR>The specified operation is not available.<BR>PHONEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reason.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">The service provider defines the actual audible ringing patterns corresponding to each of the phone's ring modes.</P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>phoneGetDevCaps, phoneGetRing<BR></B>Data Types:  <B>PHONECAPS</B></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT84"></A>phoneSetStatusMessages</P>
<P></P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="334pt" VALIGN="TOP"><COL WIDTH="46pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> phoneSetStatusMessages</B>(hPhone, dwPhoneStates, dwButtonModes, </P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">dwButtonStates)<BR>This operation enables an application to monitor the specified phone device for selected status events.</P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HLINE    hPhone<BR>Specifies a handle to the open line device to be monitored.<BR><BR>DWORD    dwPhoneStates<BR>These flags specify the set of phone status changes and events for which the application wishes to receive notification messages, of type <B>PHONESTATE</B>. Values are:<BR>PHONESTATE_OTHER<BR>An other phone status information item not listed below has changed.<BR>PHONESTATE_CONNECTED<BR>The connection between the phone device and the API was just made. This happens when the API is first invoked, or when the wire connection the phone to the PC is plugged in with the API active.<BR>PHONESTATE_DISCONNECTED<BR>The connection between the phone device and the API was just broken. This happens when the wire connecting the phone set to the PC is unplugged while the API is active.<BR>PHONESTATE_OWNER<BR>The number of owners for the phone device has changed.<BR>PHONESTATE_MONITORS<BR>The number of monitors for the phone device has changed.<BR>PHONESTATE_DISPLAY<BR>The display of the phone has changed.<BR>PHONESTATE_LAMP<BR>A lamp of the phone has changed.<BR>PHONESTATE_RINGMODE<BR>The ring mode of the phone has changed.<BR>PHONESTATE_RINGVOLUME<BR>The ring volume of the phone has changed.<BR>PHONESTATE_HANDSETHOOKSWITCH<BR>The handset hookswitch state has changed.<BR>PHONESTATE_HANDSETVOLUME<BR>The handset's speaker volume setting has changed.<BR>PHONESTATE_HANDSETGAIN<BR>The handset's mic gain setting has changed.<BR>PHONESTATE_SPEAKERHOOKSWITCH<BR>The speakerphone's hookswitch state has changed.<BR>PHONESTATE_SPEAKERVOLUME<BR>The speakerphone's speaker volume setting has changed.<BR>PHONESTATE_SPEAKERGAIN<BR>The speakerphone's mic gain setting state has changed.<BR>PHONESTATE_HEADSETHOOKSWITCH<BR>The headset's hookswitch state has changed.<BR>PHONESTATE_HEADSETVOLUME<BR>The headset's speaker volume setting has changed.<BR>PHONESTATE_HEADSETGAIN<BR>The headset's mic gain setting has changed.<BR>PHONESTATE_SUSPEND<BR>The app's use of the phone is temporarily suspended.<BR>PHONESTATE_RESUME<BR>The app's use of the phone device is resumed after having been suspended for some time.<BR>PHONESTATE_DEVSPECIFIC<BR>The phone's device specific information has changed.<BR><BR>DWORD    dwButtonModes<BR>These flags specify the set of phone button modes for which the application wishes to receive notification messages, of type <B>PHONEBUTTONMODE</B>. Values are:<BR>PHONEBUTTONMODE_CALL<BR>The button is assigned to a call appearance.<BR>PHONEBUTTONMODE_FEATURE<BR>The button is assigned to requesting features from the switch, such as hold, conference, transfer, etc.<BR>PHONEBUTTONMODE_KEYPAD<BR>The button is one of the twelve keypad buttons, '0' through '9', '*', and '#'.<BR>PHONEBUTTONMODE_LOCAL<BR>The button is a local function button, such as mute or volume control.<BR>PHONEBUTTONMODE_DISPLAY<BR>The button is a "soft" button associated with the phone's display. A phone set can have zero or more display buttons. <BR><BR>DWORD    dwButtonStates<BR>These flags specify the set of phone button state changes for which the application wishes to receive notification messages, of type <B>PHONEBUTTONSTATE</B>. Values are:<BR>PHONEBUTTONSTATE_UP<BR>The button is in the "up" state.<BR>PHONEBUTTONSTATE_DOWN<BR>The button is in the "down" state (i.e., pressed down).</P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">PHONEERR_INVALPHONEHANDLE<BR>The specified line device handle is invalid.<BR>PHONEERR_INVALPHONESTATE<BR>The specified phone states parameter is invalid.<BR>PHONEERR_INVALBUTTONMODE<BR>The button mode parameter is invalid.<BR>PHONEERR_INVALBUTTONSTATE<BR>The button states parameter is invalid.<BR>PHONEERR_OPERATIONUNAVAIL<BR>The specified operation is not available.<BR>PHONEERR_OPERATIONFAILED<BR>The specified operation failed for unspecified reasons.</P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>Call States</B></P></TD><TD VALIGN="TOP">Not applicable</P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">An application can use this function to enable or disable the generation of the corresponding messages. All phone status messages are disabled by default.</P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>phoneGetStatusMessages<BR></B>Messages:  <B>PHONE_STATE, PHONE_BUTTON<BR></B>Data Types: <B>PHONESTATE</B></P></TD><TD VALIGN="TOP"></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT85"></A>phoneSetVolume</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="334pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> phoneSetVolume</B>(hPhone, dwHookSwitchDev, dwVolume)<BR>This function either sets the volume of the speaker component of the specified hookswitch device to the specified level.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HPHONE    hPhone<BR>Specifies a handle to the open phone device. The app must be the owner of the phone.<BR>DWORD    dwHookSwitchDev<BR>Identifies the hook switch device whose speaker's volume is to be set.<BR>PHONEHOOKSWITCH_HANDSET<BR>This is the phone's handset.<BR>PHONEHOOKSWITCH_SPEAKER<BR>This is the phone's speakerphone or adjunct.<BR>PHONEHOOKSWITCH_HEADSET<BR>This is the phone's headset.<BR>DWORD    dwVolume<BR>Specifies the current volume setting of the device. dwVolume specifies the volume level of the hookswitch device. This is a number in the range 0x00000000, which is silence to 0x0000FFFF which is maximum volume. The actual granularity and quantization of volume settings in this range are service provider specific.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful, a positive request ID if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">PHONEERR_INVALPHONEHANDLE<BR>The specified device handle is invalid.<BR>PHONEERR_NOTOWNER<BR>The app does not have owner privileges to the specified phone device.<BR>PHONEERR_INVALPHONESTATE<BR>The phone device is not in a valid state for the requested operation.<BR>PHONEERR_INVALHOOKSWITCHDEV<BR>The hookswitch dev parameter is invalid.<BR>PHONEERR_OPERATIONUNAVAIL<BR>PHONEERR_OPERATIONFAILED</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">None.</P></TD></TR><TR><TD VALIGN="TOP">Functions:</P></TD><TD VALIGN="TOP"><B>phoneGetDevCaps, phoneSetVolume<BR></B>Data Types:  <B>PHONECAPS<BR></B>The specified operation is not available.<BR>The specified operation failed for unspecified reason.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP"></P></TD></TR></TBODY></TABLE>
<BR></P><P><A NAME="PT86"></A>phoneShutdown</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="334pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG phoneShutdown(<I>hApp</I>)<BR>This function shuts down the application's usage of the API's phone abstraction.</P></TD></TR><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">HPHONEAPP    <I>hApp<BR></I>Specifies the app's usage handle for the API.</P></TD></TR><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP">Returns zero if the function is successful or a negative error number if an error has occurred. Possible error returns are:</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">PHONEERR_INVALAPPHANDLE<BR>The app's specified usage handle is invalid.</P></TD></TR><TR><TD VALIGN="TOP"><B>Comments</B></P></TD><TD VALIGN="TOP">If this function is called when the application has open phone device, then these devices will be closed. </P></TD></TR><TR><TD VALIGN="TOP"><B>See Also</B></P></TD><TD VALIGN="TOP">Functions:  <B>phoneInitialize</B></P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P></P>
 </P></BODY></HTML>

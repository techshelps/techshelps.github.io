<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>F.3. Sample Implementations</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
</OBJECT></FORM>
<H3>F.3. Sample Implementations</H3>Below are sample implementations of the C standard wctomb() and mbtowc() functions that demonstrate the algorithms for converting from Unicode to the transformation format and converting from the transformation format to Unicode. The sample implementations include error checks, some of which may not be necessary for conformance:</P>
  </P>
<P>typedef struct {                                        </P>
<P>     int     cmask;                              </P>
<P>     int     cval;                              </P>
<P>     int     shift;                              </P>
<P>     long     lmask;                              </P>
<P>     long     lval;                              </P>
<P>}    Tab;                                   </P>
<P></P>
<P>static Tab tab[] = {</P>
<P>    0x80,    0x00,    0*6,    0x7F,         0,            /* 1 byte sequence */</P>
<P>    0xE0,    0xC0,    1*6,    0x7FF,        0x80,          /* 2 byte sequence */</P>
<P>    0xF0,    0xE0,    2*6,    0xFFFF,       0x800,         /* 3 byte sequence */</P>
<P>    0xF8,    0xF0,    3*6,    0x1FFFFF,     0x10000,       /* 4 byte sequence */</P>
<P>    0xFC,    0xF8,    4*6,    0x3FFFFFF,    0x200000,      /* 5 byte sequence */</P>
<P>    0xFE,    0xFC,    5*6,    0x7FFFFFFF,   0x4000000,     /* 6 byte sequence */</P>
<P>    0,                                                     /* end of table */</P>
<P>};                                                        </P>
<P></P>
<P>int mbtowc ( wchar_t *p, char *s, size_t n ) {                                                        </P>
<P>       long l;                                                 </P>
<P>       int c0, c, nc;                                                 </P>
<P>       Tab *t;                                                 </P>
<P></P>
<P>       if ( s == 0 ) return 0;                                 </P>
<P>       nc = 0;                                                 </P>
<P>       if ( n &lt;= nc ) return -1;                               </P>
<P>       c0 = *s &amp; 0xff;                                         </P>
<P>       l = c0;                                                 </P>
<P>       for ( t = tab; t-&gt;cmask; t++) {                         </P>
<P>              nc++;                                            </P>
<P>              if ( ( c0 &amp; t-&gt;cmask ) == t-&gt;cval ) {            </P>
<P>                     l &amp;= t-&gt;lmask;                            </P>
<P>                     if ( l &lt; t-&gt;lval ) return -1;             </P>
<P>                     *p = l;                                   </P>
<P>                     return nc;                                </P>
<P>              }                                          </P>
<P>              if ( n &lt;= nc )                                   </P>
<P>              return -1;                                       </P>
<P>              s++;                                          </P>
<P>              c = ( *s ^ 0x80 ) &amp; 0xFF;                        </P>
<P>              if ( c &amp; 0xC0 ) return -1;                       </P>
<P>              l = ( l &lt;&lt; 6 ) | c;                              </P>
<P>       }                                                 </P>
<P>       return -1;                                                 </P>
<P>}                                                        </P>
<P>                                                        </P>
<P>int wctomb ( char *s, wchar_t wc ) {                           </P>
<P>       long l;                                                 </P>
<P>       int c, nc;                                                 </P>
<P>       Tab *t;                                                 </P>
<P></P>
<P>       if (s == 0 ) return 0;                                  </P>
<P>       l = wc;                                                 </P>
<P>       nc = 0;                                                 </P>
<P>       for ( t=tab; t-&gt;cmask; t++ ) {                          </P>
<P>              nc++;                                          </P>
<P>              if ( l &lt;= t-&gt;lmask ) {                           </P>
<P>                     c = t-&gt;shift;                             </P>
<P>                     *s = t-&gt;cval | ( l &gt;&gt; c );                </P>
<P>                     while ( c &gt; 0 ) {                         </P>
<P>                            c -= 6;                            </P>
<P>                            s++;                            </P>
<P>                            *s = 0x80 | ( ( l &gt;&gt; c ) &amp; 0x3F ); </P>
<P>                     }                                   </P>
<P>                     return nc;                                   </P>
<P>              }                                          </P>
<P>       }                                                 </P>
<P>       return -1;                                                 </P>
<P>}</P>
  </P></BODY></HTML>

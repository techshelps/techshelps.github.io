<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>2.5.1    File Info Fields</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

</OBJECT></FORM>
<H3>2.5.1    File Info Fields</H3><B>Status</B><BR>Contains information specifying the type of structure this is.  It also contains the status of the pointers in the structure and the status of the attributes, time, date, and name.</P>

<TABLE COLS="2" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="69pt" VALIGN="TOP"><COL WIDTH="361pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Bit</P></TD><TD VALIGN="TOP"><P>Definition</P></TD></TR><TR><TD VALIGN="TOP"><P>0</P></TD><TD VALIGN="TOP"><P>Exists<BR>1    Exists<BR>0    Deleted</P></TD></TR><TR><TD VALIGN="TOP"><P>1</P></TD><TD VALIGN="TOP"><P>ATDFields<BR>1    ATD fields are most recent<BR>0    ATD fields are superseded</P></TD></TR><TR><TD VALIGN="TOP"><P>3-2</P></TD><TD VALIGN="TOP"><P>StructType<BR>10    FileInfo structure</P></TD></TR><TR><TD VALIGN="TOP"><P>4</P></TD><TD VALIGN="TOP"><P>FNULLBits<BR>0    PrimaryPtr valid<BR>1    PrimaryPtr is FNULL</P></TD></TR><TR><TD VALIGN="TOP"><P>5</P></TD><TD VALIGN="TOP"><P>    0    SecondaryPtr valid<BR>1    SecondaryPtr is FNULL</P></TD></TR><TR><TD VALIGN="TOP"><P>6</P></TD><TD VALIGN="TOP"><P>    0    ExtentPtr valid<BR>1    ExtentPtr is FNULL</P></TD></TR><TR><TD VALIGN="TOP"><P>7</P></TD><TD VALIGN="TOP"><P>Reserved<BR>Must be 1</P></TD></TR><TR><TD VALIGN="TOP"><P>8</P></TD><TD VALIGN="TOP"><P>CompressedBlockStart</P>
<P>This field is only meaningful if a file is compressed, otherwise it is ignored.</P>
<P>0    Indicates that this FileInfo points to a file extent that contains the first segment of a compressed block.  The first segment of the compressed block is pointed to by the ExtentPtr.</P>
<P>1    Indicates that this block does not contain the first segment of a compressed block.</P></TD></TR><TR><TD VALIGN="TOP"><P>9</P></TD><TD VALIGN="TOP"><P>CompressedBlockEnd<BR>This field is only meaningful if a file is compressed, otherwise it is ignored.</P>
<P>0    Indicates that this FileInfo points to a file extent that contains the last segment of a compressed block.</P>
<P>1    Indicates that this block does not contain the last segment of a compressed block.</P></TD></TR><TR><TD VALIGN="TOP"><P>15-10</P></TD><TD VALIGN="TOP"><P>Reserved<BR>Must be 1s.</P></TD></TR></TBODY></TABLE>
<BR></P><B>Exists</B><BR>Indicates whether or not the entry under consideration is a valid member of the file information list.  The bit is cleared when a file has been deleted.  Deleted entry information should be ignored.</P>
<B>ATDFields</B><BR>Indicates whether or not the Attributes/Time/Date fields in this structure are the most current for this file.  The first valid structure in the FileInfo linked list to have this bit set has valid information, all others should be ignored.  This bit only affects the validity of these fields.</P>
<B>StructType</B><BR>Indicates that this structure is a file info.</P>
<B>FNULL bits</B><BR>Indicate whether the corresponding pointer is to be considered to have a value of FNULL, regardless of the actual value of the pointer.  The FNULL bits are cleared only after their respective pointers are assigned values by the file system. Therefore, the FNULL bits are the first check for validity of these pointers. These bits provide yet another fail-safe measure to guarantee file system integrity in the event of a system crash while updating these pointers.</P>
<B>CompressedBlockStart<BR></B>This field is only meaningful if a file is compressed, otherwise it is ignored.  Indicates that this FileInfo points to a file extent that contains the first segment of a compressed block.  A compressed block can, in general, be split across erase blocks.  The first segment of a compressed block is marked so that the beginning of a compression boundary can be identified.  Also note that the UncompressedExtentLen field is valid only on the first FileInfo structure for the compressed block (i.e. the FileInfo that has this bit set).</P>
<B>CompressedBlockEnd<BR></B>This field is only meaningful if a file is compressed, otherwise it is ignored.  Indicates that this FileInfo points to a file extent that contains the last segment of a compressed block.  Since a compressed block cannot be guaranteed to fit entirely within an erase block, it must be capable of being split across blocks.  The last segment of a compressed block is marked so that end of a compression boundary can be identified.</P>
<B>ExtentPtr</B><BR>A pointer to the location in the partition of this extent of the file.  A file's content data is the in-order concatenation of the extents pointed to by each valid FileInfo structure in the list.  An extent is considered to be valid only if the status indicates the entry exits, and SecondaryPtr is FNULL (or considered to have a value of FNULL as indicated by the FNULL bits).</P>
<B>PrimaryPtr</B><BR>A pointer to the present files next FileInfo structure.  The PrimaryPtr is used to locate the next entry in the FileInfo chain only if PrimaryPtr is not FNULL (and not considered to have a value of FNULL as indicated by the FNULL bits) and SecondaryPtr is FNULL (or considered to have a value of FNULL as indicated by the FNULL bits).  If both PrimaryPtr and SecondaryPtr are FNULL (or considered to have values of FNULL as indicated by the FNULL bits), then the end of the chain has been reached.</P>
<B>SecondaryPtr</B><BR>A pointer to a FileInfo structure that supersedes the current FileInfo structure.  The SecondaryPtr is used to indicate that a FileInfo structure has been completely superseded.  In this case SecondaryPtr is the only pointer field in the FileInfo structure that is valid.</P>
<B>Attrib/Time/Date</B><BR>File modification attributes, time, and date in MS-DOS format.  See previous bit field definitions.</P>
<B>VarStuctLen<BR></B>The sum total length, in bytes, of <B>all</B> the variable length structures appended <B>after</B> the end of the members of the FileInfo structure. This field must be zero, indicating that none of these structures is present.</P>
<B>UncompressedExtentLen</B><BR>The original length, in bytes, of this extent of the file.  If this extent within the file IS NOT compressed, then this is the length in bytes that this extent of the file occupies on the media.  This field is always used during seek operations on a file.</P>
<B>CompressedExtentLen</B><BR>The actual physical length, in bytes, that this extent of the file occupies on the media.</P>
Note that if an extent within a file IS NOT compressed, then the <B>UncompressedExtentLen </B>and<B> CompressedExtentLen </B>fields are equal.  If an extent within a file IS compressed, then the <B>CompressedExtentLen</B> field represents the length that the compressed data occupies on the media.  In the latter case, the compression ratio is <B>(UncompressedExtentLen / CompressedExtentLen) </B>and must be greater than one.</P>
<P><img src="4910.gif"></P>
<P>Figure 5</P>
Figure 5 depicts how each pointer type within a FileInfo is related to all valid subsequent structures.</P></BODY></HTML>

<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Frame Buffer</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
</OBJECT></FORM>
<H2>The Frame Buffer</H2>  </P>
Some digital-video devices support video-digitizer hardware. The <B>digitalvideo</B> device class creates an abstract model of this hardware as a "frame buffer" and a "lock mask." The frame buffer is a region of device memory that can hold a single full-screen image. You can determine the size of the frame buffer with the <B>where frame max </B>command. </P>
The lock mask is an array with one bit for each pixel of the frame buffer. You can modify the lock mask with the <B>freeze</B> and <B>unfreeze</B> commands. These commands let you specify rectangular regions where the lock mask bits should be turned on or off. A sequence of such commands can yield arbitrarily complex patterns of locked bits. Devices that do not have hardware support for a lock mask should reject commands that specify a rectangle on a <B>freeze</B> or <B>unfreeze</B> command. (You can use <B>capability</B> <B>can</B> <B>lock </B>to determine if a device supports a lock mask.)</P>
The following illustration shows the model used for digital-video devices:</P>
<img src="JD1H.gif"></P>
</P>
In the digital-video model, the frame buffer is off screen. You specify what is displayed with the <B>put</B> <B>source</B> and <B>put</B> <B>destination</B> commands. The <B>put source</B> command specifies a source rectangle in the frame buffer. The <B>put destination</B> command specifies a destination rectangle relative to the client window. For display, the device scales the visual content of the source rectangle to fit the destination rectangle. By default, the source rectangle is the entire image in the frame buffer, and the destination rectangle is the entire client area of the current window. That is, if you have never used a <B>put</B> command, the device scales the entire image to fit in the current window.</P>
The <B>put</B> command also lets you control how the device places the digitized information into the frame buffer. The <B>put video</B> rectangle specifies the region of the external input's active scan area used when the device digitizes the image. The video rectangle defaults to the entire external input (that is, full screen). The <B>put</B> <B>frame</B> rectangle specifies the region within the frame buffer where the device places the digitized image. This rectangle defaults to the full size of the frame buffer. If you use the default regions for both the video and frame rectangles, the digitizer stores the full-screen video in the full-screen frame buffer. Full-size video and frame rectangles are commonly used when the hardware can resize images while copying from the frame buffer to the destination rectangle. (Devices that can resize images return <B>true</B> to the <B>capability can stretch</B> command.)</P>
The hardware might also support stretching while digitizing. (These devices return true for the <B>capability</B> <B>can</B> <B>stretch</B> <B>input</B> command.) When using such hardware, an application might use the <B>put</B> <B>frame</B> rectangle to have the hardware scale the image to the right size as it places the image in the frame buffer. </P>
Some devices might be incapable of supporting an abstract frame buffer for each device-driver instance. These devices should treat the digitizer hardware as a resource that is typically only accessed by a single device-driver instance. Multiple instances can access a common frame buffer, but only by specifying the <B>shareable</B> flag with the <B>open </B>command.</P>
The frame buffer concept originated in support of the <B>overlay</B> device class. Hence, its description uses the assumption that pixels stored in the frame buffer come from the external input. However, the concept of a frame buffer and a lock mask is also useful during playback of motion video and images. Therefore, video playback supports commands such as <B>put</B>, <B>freeze</B>, and <B>unfreeze</B>. </P>
 </P></BODY></HTML>

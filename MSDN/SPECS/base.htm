<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Baseline Table</TITLE>

<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">




<H2>BASE - Baseline Table</H2>

<P>The Baseline table (BASE) provides information used to align glyphs of different scripts and sizes in a line of text, whether the glyphs are in the same font or in different fonts. To improve text layout, the Baseline table also provides minimum (min) and maximum (max) glyph extent values for each script, language system, or feature in a font.

<H3>Overview</H3>

<P>Lines of text composed with glyphs of different scripts and point sizes need adjustment to correct interline spacing and alignment. For example, glyphs designed to be the same point size often differ in height and depth from one font to another (see figure 5a). This variation can produce interline spacing that looks too large or too small, and diacritical marks, math symbols, subscripts, and superscripts may be clipped.

<BR>&nbsp;<BR>
<CENTER>
<TABLE CELLPADDING=10 BGCOLOR=#F0F0F0><TR><TD><IMG  WIDTH=187 HEIGHT=51 ALT="DIAGRAM" SRC="fig5a.gif"><BR>
</TABLE>
</CENTER>
<BR>
 
<STRONG>figure 5a. Incorrect alignment of glyphs from Latin and Kanji (Latin dominant)</STRONG>

<P>In addition, different baselines can cause text lines to waver visually as glyphs from different scripts are placed next to one another. For example, ideographic scripts position all glyphs on a low baseline. With Latin scripts, however, the baseline is higher, and some glyphs descend below it. Finally, several Indic scripts use a high &quot;hanging baseline&quot; to align the tops of the glyphs. 

<P>To solve these composition problems, the BASE table recommends baseline positions and min/max extents for each script (see figure 5b). Script min/max extents can be modified for particular language systems or features.<BR>

<BR>&nbsp;<BR>
<CENTER>
<TABLE CELLPADDING=10 BGCOLOR=#F0F0F0><TR><TD>
<IMG  WIDTH=187 HEIGHT=48 ALT="DIAGRAM" SRC="fig5b.gif"><BR>
</TABLE>
</CENTER>
<BR>

<STRONG>figure 5b. Proper alignment of glyphs from Latin and Kanji (Latin dominant)</STRONG>

<H3>Baseline Values</H3>

<P>The BASE table uses a model that assumes one script at one size is the &quot;dominant run&quot; during text processing-that is, all other baselines are defined in relation to this the dominant run.

<P>For example, Latin glyphs and the ideographic Kanji glyphs have different baselines. If a Latin script of a particular size is specified as the dominant run, then all Latin glyphs of all sizes will be aligned on the roman baseline, and all Kanji glyphs will be aligned on the lower ideographic baseline defined for use with Latin text. As a result, all glyphs will look aligned within each line of text.

<P>The BASE table supplies recommended baseline positions; a client can specify others. For instance, the client may want to assign baseline positions different from those in the font.

<BR>&nbsp;<BR>
<CENTER>
<TABLE CELLPADDING=10 BGCOLOR=#F0F0F0><TR><TD>
<IMG WIDTH=431 HEIGHT=181 ALT="DIAGRAM" SRC="fig5c.gif"><BR>
</TABLE>
</CENTER>
<BR>

<STRONG>figure 5c. Comparing Latin and Kanji baselines, with characters aligned according to the dominant run</STRONG>

<H3>Min/Max Extent Values</H3>

<P>The BASE table gives clients the option of using script, language system, or feature-specific extent values to improve composition (see figure 5c). For example, suppose a font contains glyphs in Latin and Arabic scripts, and the min/max extents defined for the Arabic script are larger than the Latin extents. The font also supports Urdu, a language system that includes specific variants of the Arabic glyphs, and some Urdu variants require larger min/max extents than the default Arabic extents. To accommodate the Urdu glyphs, the BASE table can define language-specific min/max extent values that will override the default Arabic extents-but only when rendering Urdu glyphs.

<P>The BASE table also can define feature-specific min/max values that apply only when a particular feature is enabled. Suppose that the font described earlier also supports the Farsi language system, which has one feature that requires a minor alteration of the Arabic script extents to display properly. The BASE table can specify these extent values and apply them only when that feature is enabled in the Farsi language. 

<H3>Table Organization</H3>

<P>The BASE table begins with offsets to Axis tables that describe layout data for the horizontal and vertical layout directions of text. A font can provide layout data for both text directions or for only one text direction:

<UL>
<LI>The Horizontal Axis table (HorizAxis) defines information used to lay out text horizontally. All baseline and min/max values refer to the Y direction.
<LI>The Vertical Axis table (VertAxis) defines information used to lay out text vertically. All baseline and min/max values refer to the X direction. 
</UL>

<P>figure 5d shows how the BASE table is organized.

<BR>&nbsp;<BR>
<CENTER>
<TABLE CELLPADDING=10 BGCOLOR=#F0F0F0><TR><TD>
<IMG  WIDTH=440 HEIGHT=290 ALT="DIAGRAM" SRC="fig5d.gif"><BR>
</TABLE>
</CENTER>
<BR>

<STRONG>figure 5d. High-level organization of BASE table</STRONG>

<H3>Text Direction</H3>

<P>The HorizAxis and VertAxis tables organize layout information by script in BaseScriptList tables. A BaseScriptList enumerates all scripts in the font that are written in a particular direction (horizontal or vertical). 

<P>For example, consider a Japanese font that contains Kanji, Kana, and Latin scripts. Because all three scripts are rendered horizontally, all three are defined in the BaseScriptList of the HorizAxis table. Kanji and Kana also are rendered vertically, so those two scripts are defined in the BaseScriptList of the VertAxis table, too.

<H3>Baseline Data</H3>

<P>Each Axis table also references a BaseTagList, which identifies all the baselines for all scripts written in the same direction (horizontal or vertical). The BaseTagList may also include baseline tags for scripts supported in other fonts.

<P>Each script in a BaseScriptList is represented by a BaseScriptRecord. This record references a BaseScript table, which contains layout data for the script. In turn, the BaseScript table references a BaseValues table, which contains baseline information and several MinMax tables that define min/max extent values.

<P>The BaseValues table specifies the coordinate values for all baselines in the BaseTagList. In addition, it identifies one of these baselines as the default baseline for the script. As glyphs in a script are scaled, they grow or shrink from the script's default baseline position. Each baseline can have unique coordinates. This contrasts with TrueType 1.0, which implies a single, fixed baseline for all scripts in a font. With the OpenType Layout tables, each script can be aligned independently, although more than one script may use the same baseline values.

<P>Baseline coordinates for scripts in the same font must be specified in relation to each other for correct alignment of the glyphs. Consider the font, discussed earlier, containing both Latin and Kanji glyphs. If the BaseTagList of the HorizAxis table specifies two baselines, the roman and the ideographic, then the layout data for both the Latin and Kanji scripts will specify coordinate positions for both baselines:

<UL>
<LI>The BaseValues table for the Latin script will give coordinates for both baselines and specify the roman baseline as the default. 
<LI>The BaseValues table for the Kanji script will give coordinates for both baselines and specify the ideographic baseline as the default.
</UL>

<H3>Min/Max Extents</H3>

<P>The BaseScript table can define minimum and maximum extent values for each script, language system, or feature. (These values are distinct from the min/max extent values recorded for the font as a whole in the head, hhea, vhea, and OS/2 tables.) These extent values appear in three tables:

<UL>
<LI>The DefaultMinMax table defines the default min/max extents for the script.
<LI>A MinMax table, referenced through a BaseLangSysRecord, specifies min/max extents to accommodate the glyphs in a specific language system.
<LI>A FeatMinMaxRecord, referenced from the MinMax table, provides min/max extent values to support feature-specific glyph actions. 
</UL>

<BLOCKQUOTE>
<STRONG>Note:</STRONG> Language-system or feature-specific extent values may be essential to define some fonts. However, the default min/max extent values specified for each script should usually be enough to support high-quality text layout.
</BLOCKQUOTE>

<P>The actual baseline and min/max extent values used by the BASE table reside in BaseCoord tables. Three formats are defined for BaseCoord table data. All formats define single X or Y coordinate values in design units, but two formats support fine adjustments to these values based on a contour point or a Device table.

<P>The rest of this chapter describes all the tables defined within the BASE table. Sample tables and lists that illustrate typical data for a font are supplied at the end of the chapter.

<H3>BASE Header</H3>

<P>The BASE table begins with a header that consists of a version number for the table (Version), initially set to 1.0 (0x00010000), and offsets to horizontal and vertical Axis tables (HorizAxis and VertAxis).

<P>Each Axis table stores all baseline information and min/max extents for one layout direction. The HorizAxis table contains Y values for horizontal text layout; the VertAxis table contains X values for vertical text layout.

<P>A font may supply information for both layout directions. If a font has values for only one text direction, the Axis table offset value for the other direction will be set to NULL.

<P>Example 1 at the end of this chapter shows a sample BASE Header.

<BR>&nbsp;<BR><FONT SIZE=5>BASE Header</FONT>
<TABLE BGCOLOR="#F0F0F0" WIDTH=455 BORDER=0 CELLPADDING=3>
<THEAD>
<TR>
<TH BGCOLOR="#C0C0C0">Type</TH><TH BGCOLOR="#C0C0C0">Name</TH><TH BGCOLOR="#C0C0C0">Description</TH></TR>
</THEAD><TBODY>	
<TR>
<TD VALIGN=TOP>fixed32</TD><TD VALIGN=TOP>Version</TD><TD>Version of the BASE table-initially 0x00010000</TD></TR>
<TR>	
<TD VALIGN=TOP>Offset</TD><TD VALIGN=TOP>HorizAxis</TD><TD>Offset to horizontal Axis table-from beginning of BASE table-may be NULL</TD></TR>
<TR>	
<TD VALIGN=TOP>Offset</TD><TD VALIGN=TOP>VertAxis</TD><TD>Offset to vertical Axis table-from beginning of BASE table-may be NULL</TD></TR>
</TABLE>
&nbsp;&nbsp;

	
<H3>Axis Tables: HorizAxis and VertAxis</H3>

<P>An Axis table is used to render scripts either horizontally or vertically. It consists of offsets, measured from the beginning of the Axis table, to a BaseTagList and a BaseScriptList:

<UL>
<LI>The BaseScriptList enumerates all scripts rendered in the text layout direction.
<LI>The BaseTagList enumerates all baselines used to render the scripts in the text layout direction. If no baseline data is available for a text direction, the offset to the corresponding BaseTagList may be set to NULL.
</UL>

<P>Example 1 at the end of this chapter shows an example of an Axis table.

<BR>&nbsp;<BR><FONT SIZE=5>Axis Table</FONT>
<TABLE BGCOLOR="#F0F0F0" WIDTH=455 BORDER=0 CELLPADDING=3>
<THEAD>
<TR>
<TH BGCOLOR="#C0C0C0">Type</TH><TH BGCOLOR="#C0C0C0">Name</TH><TH BGCOLOR="#C0C0C0">Description</TH></TR>
</THEAD><TBODY>
<TR>
<TD VALIGN=TOP>Offset</TD><TD VALIGN=TOP>BaseTagList</TD><TD>Offset to BaseTagList table-from beginning of Axis table-may be NULL</TD></TR>
<TR>	
<TD VALIGN=TOP>Offset</TD><TD VALIGN=TOP>BaseScriptList</TD><TD>Offset to BaseScriptList table-from beginning of Axis table</TD></TR>
</TABLE>
&nbsp;&nbsp;

	
<H3>BaseTagList Table</H3>
<P>The BaseTagList table identifies the baselines for all scripts in the font that are rendered in the same text direction. Each baseline is identified with a 4-byte baseline tag. The BaseTagList can define any number of baselines, and it may include baseline tags for scripts supported in other fonts.

<P>Each script in the BaseScriptList table must designate one of these BaseTagList baselines as its default, which the OpenType Layout Services use to align all glyphs in the script. Even though the BaseScriptList and the BaseTagList are defined independently of one another, the BaseTagList typically includes a tag for each different default baseline needed to render the scripts in the layout direction. If some scripts use the same default baseline, the BaseTagList needs to list the common baseline tag only once.

<P>The BaseTagList table consists of an array of baseline identification tags (BaselineTag), listed alphabetically, and a count of the total number of baseline Tags in the array (BaseTagCount).

<P>Example 1 at the end of this chapter shows a sample BaseTagList table.

<BR>&nbsp;<BR><FONT SIZE=5>BaseTagList table</font>
<TABLE BGCOLOR="#F0F0F0" WIDTH=455 BORDER=0 CELLPADDING=3>
<THEAD>
<TR>
<TH BGCOLOR="#C0C0C0">Type</TH><TH BGCOLOR="#C0C0C0">Name</TH><TH BGCOLOR="#C0C0C0">Description</TH></TR>
</THEAD><TBODY>	
<TR>
<TD VALIGN=TOP>uint16</TD><TD VALIGN=TOP>BaseTagCount</TD><TD>Number of baseline identification tags in this text direction-may be zero (0)</TD></TR>
<TR>
<TD VALIGN=TOP>Tag</TD><TD VALIGN=TOP>BaselineTag[BaseTagCount]</TD><TD>Array of 4-byte baseline identification tags-must be in alphabetical order</TD></TR>
</TABLE>
&nbsp;&nbsp;

	
<H3>BaseScriptList Table</H3>

<P>The BaseScriptList table identifies all scripts in the font that are rendered in the same layout direction. If a script is not listed here, then the text-processing client will render the script using the layout information specified for the entire font. 

<P>For each script listed in the BaseScriptList table, a BaseScriptRecord must be defined that identifies the script and references its layout data. BaseScriptRecords are stored in the BaseScriptRecord array, ordered alphabetically by the BaseScriptTag in each record. The BaseScriptCount specifies the total number of BaseScriptRecords in the array.

<P>Example 1 at the end of this chapter shows a sample BaseScriptList table.


<BR>&nbsp;<BR><FONT SIZE=5>BaseScriptList table</font>
<TABLE BGCOLOR="#F0F0F0" WIDTH=455 BORDER=0 CELLPADDING=3>
<THEAD>
<TR>
<TH BGCOLOR="#C0C0C0">Type</TH><TH BGCOLOR="#C0C0C0">Name</TH><TH BGCOLOR="#C0C0C0">Description</TH></TR>
</THEAD><TBODY>	
<TR>
<TD VALIGN=TOP>uint16</TD><TD VALIGN=TOP>BaseScriptCount</TD><TD>Number of BaseScriptRecords defined</TD></TR>
<TR>	
<TD VALIGN=TOP>struct</TD><TD VALIGN=TOP>BaseScriptRecord[BaseScriptCount]</TD><TD>Array of BaseScriptRecords-in alphabetical order by BaseScriptTag</TD></TR>
</TABLE>
&nbsp;&nbsp;

	
<H3>BaseScriptRecord</H3>

<P>A BaseScriptRecord contains a script identification tag (BaseScriptTag), which must be identical to the ScriptTag used to define the script in the ScriptList of a GSUB or GPOS table. Each record also must include an offset to a BaseScript table that defines the baseline and min/max extent data for the script. 

<P>Example 1 at the end of this chapter shows a sample BaseScriptRecord.

<BR>&nbsp;<BR><FONT SIZE=5>BaseScriptRecord</font>
<TABLE BGCOLOR="#F0F0F0" WIDTH=455 BORDER=0 CELLPADDING=3>
<THEAD>
<TR>
<TH BGCOLOR="#C0C0C0">Type</TH><TH BGCOLOR="#C0C0C0">Name</TH><TH BGCOLOR="#C0C0C0">Description</TH></TR>
</THEAD><TBODY>
<TR>	
<TD VALIGN=TOP>Tag</TD><TD VALIGN=TOP>BaseScriptTag</TD><TD>4-byte script identification tag</TD></TR>
<TR>
<TD VALIGN=TOP>Offset</TD><TD VALIGN=TOP>BaseScript</TD><TD>Offset to BaseScript table-from beginning of BaseScriptList</TD></TR>
</TABLE>
&nbsp;&nbsp;

	
<H3>BaseScript Table</H3>

<P>A BaseScript table organizes and specifies the baseline data and min/max extent data for one script. Within a BaseScript table, the BaseValues table contains baseline information, and one or more MinMax tables contain min/max extent data. 

<P>The BaseValues table identifies the default baseline for the script and lists coordinate positions for each baseline named in the corresponding BaseTagList. Each script can assign a different position to each baseline, so each script can be aligned independently in relation to any other script. (For more details, see the BaseValues table description later in this chapter.)

<P>The DefaultMinMax table defines the default min/max extent values for the script. (For details, see the MinMax table description below.) If a language system or feature defined in the font has no effect on the script's default min/max extents, the OpenType Layout Services will use the default script values.

<P>Sometimes language-specific overrides for min/max extents are needed to properly render the glyphs in a specific language system. For example, a glyph substitution required in a language system may result in a glyph whose extents exceed the script's default min/max extents. Each language system that specifies min/max extent values must define a BaseLangSysRecord. The record should identify the language system (BaseLangSysTag) and contain an offset to a MinMax table of language-specific extent coordinates.

<P>Feature-specific overrides for min/max extents also may be needed to accommodate the effects of glyph actions used to implement a specific feature. For example, superscript or subscript features may require changes to the default script or language system extents. Feature-specific extent values not limited to a specific language system may be specified in the DefaultMinMax table. However, extent values used for a specific language system require a BaseLangSysRecord and a MinMax table. In addition to specifying coordinate data, the MinMax table must contain offsets to FeatMinMaxRecords that define the feature-specific min/max data.

<P>A BaseScript table has four components:

<UL> 
<LI>An offset to a BaseValues table (BaseValues). If no baseline data is defined for the script or the corresponding BaseTagList is set to NULL, the offset to the BaseValues table may be set to NULL.
<LI>An offset to the DefaultMinMax table. If no default min/max extent data is defined for the script, this offset may be set to NULL.
<LI>An array of BaseLangSysRecords (BaseLangSysRecord). The individual records stored in the BaseLangSysRecord array are listed alphabetically by BaseLangSysTag. 
<LI>A count of the BaseLangSysRecords included (BaseLangSysCount). If no language system or language-specific feature min/max values are defined, the BaseLangSysCount may be set to zero (0).
</UL>

<P>Example 2 at the end of this chapter shows a sample BaseScript table.

<BR>&nbsp;<BR><FONT SIZE=5>BaseScript Table</font>
<TABLE BGCOLOR="#F0F0F0" WIDTH=455 BORDER=0 CELLPADDING=3>
<THEAD>
<TR>
<TH BGCOLOR="#C0C0C0">Type</TH><TH BGCOLOR="#C0C0C0">Name</TH><TH BGCOLOR="#C0C0C0">Description</TH></TR>
</THEAD><TBODY>
<TR>	
<TD VALIGN=TOP>Offset</TD><TD VALIGN=TOP>BaseValues</TD><TD>Offset to BaseValues table-from beginning of BaseScript table-may be NULL</TD></TR>
<TR>
<TD VALIGN=TOP>Offset</TD><TD VALIGN=TOP>DefaultMinMax</TD><TD>Offset to MinMax table- from beginning of BaseScript table-may be NULL</TD></TR>
<TR>	
<TD VALIGN=TOP>uint16</TD><TD VALIGN=TOP>BaseLangSysCount</TD><TD>Number of BaseLangSysRecords defined-may be zero (0)</TD></TR>
<TR>	
<TD VALIGN=TOP>struct</TD><TD VALIGN=TOP>BaseLangSysRecord<BR>[BaseLangSysCount]</TD><TD>Array of BaseLangSysRecords-in alphabetical order by BaseLangSysTag</TD></TR>
</TABLE>
&nbsp;&nbsp;
	
<H3>BaseLangSysRecord</H3>

<P>A BaseLangSysRecord defines min/max extents for a language system or a language-specific feature. Each record contains an identification tag for the language system (BaseLangSysTag) and an offset to a MinMax table (MinMax) that defines extent coordinate values for the language system and references feature-specific extent data.

<P>Example 2 at the end of this chapter shows a BaseLangSysRecord.

<BR>&nbsp;<BR><FONT SIZE=5>BaseLangSysRecord</font>
<TABLE BGCOLOR="#F0F0F0" WIDTH=455 BORDER=0 CELLPADDING=3>
<THEAD>
<TR>
<TH BGCOLOR="#C0C0C0">Type</TH><TH BGCOLOR="#C0C0C0">Name</TH><TH BGCOLOR="#C0C0C0">Description</TH></TR>
</THEAD><TBODY>	
<TR>
<TD VALIGN=TOP>Tag</TD><TD VALIGN=TOP>BaseLangSysTag</TD><TD>4-byte language system identification tag</TD></TR>
<TR>	
<TD VALIGN=TOP>Offset</TD><TD VALIGN=TOP>MinMax</TD><TD>Offset to MinMax table-from beginning of BaseScript table</TD></TR>
</TABLE>
&nbsp;&nbsp;
	
<H3>BaseValues Table</H3>

<P>A BaseValues table lists the coordinate positions of all baselines named in the BaselineTag array of the corresponding BaseTagList and identifies a default baseline for a script.

<BLOCKQUOTE>
<STRONG>Note:</STRONG> When the offset to the corresponding BaseTagList is NULL, a BaseValues table is not needed. However, if the offset is not NULL, then each script must specify coordinate positions for all baselines named in the BaseTagList.
</BLOCKQUOTE>

<P>The default baseline, one per script, is the baseline used to lay out and align the glyphs in the script. The DefaultIndex in the BaseValues table identifies the default baseline with a value that equals the array index position of the corresponding tag in the BaselineTag array. 

<P>For example, the Han and Latin scripts use different baselines to align text. If a font supports both of these scripts, the BaselineTag array in the BaseTagList of the HorizAxis table will contain two tags, listed alphabetically: "ideo" in BaselineTag[0] for the Han ideographic baseline, and &quot;romn&quot; in BaselineTag[1] for the Latin baseline. The BaseValues table for the Latin script will specify the roman baseline as the default, so the DefaultIndex in the BaseValues table for Latin will be &quot;1&quot; to indicate the roman baseline tag. In the BaseValues table for the Han script, the DefaultIndex will be &quot;0&quot; to indicate the ideographic baseline tag.

<P>Two or more scripts may share a default baseline. For instance, if the font described above also supports the Cyrillic script, the BaselineTag array does not need a baseline tag for Cyrillic because Cyrillic and Latin share the same baseline. The DefaultIndex defined in the BaseValues table for the Cyrillic script will specify &quot;1&quot; to indicate the roman baseline tag, listed in the second position in the BaselineTag array.

<P>In addition to identifying the DefaultIndex, the BaseValues table contains an offset to an array of BaseCoord tables (BaseCoord) that list the coordinate positions for all baselines, including the default baseline, named in the associated BaselineTag array. One BaseCoord table is defined for each baseline. The BaseCoordCount defines the total number of BaseCoord tables, which must equal the number of baseline tags listed in BaseTagCount in the BaseTagList.

<P>Each baseline coordinate is defined as a single X or Y value in design units measured from the zero position on the relevant X or Y axis. For example, a BaseCoord table defined in the HorizAxis table will contain a Y value because horizontal baselines are positioned vertically. BaseCoord values may be negative. Each script may assign a different coordinate to each baseline.

<P>Offsets to each BaseCoord table are stored in a BaseCoord array within the BaseValues table. The order of the stored offsets corresponds to the order of the tags listed in the BaselineTag array of the BaseTagList. In other words, the first position in the BaseCoord array will define the offset to the BaseCoord table for the first baseline named in the BaselineTag array, the second position will define the offset to the BaseCoord table for the second baseline named in the BaselineTag array, and so on.

<P>Example 3 at the end of the chapter has two parts, one that shows a BaseValues table and one that shows a chart with different baseline positions defined for several scripts. 

<BR>&nbsp;<BR><FONT SIZE=5>BaseValues table</font>
<TABLE BGCOLOR="#F0F0F0" WIDTH=455 BORDER=0 CELLPADDING=3>
<THEAD>
<TR>
<TH BGCOLOR="#C0C0C0">Type</TH><TH BGCOLOR="#C0C0C0">Name</TH><TH BGCOLOR="#C0C0C0">Description</TH></TR>
</THEAD><TBODY>	
<TR>
<TD VALIGN=TOP>uint16</TD><TD VALIGN=TOP>DefaultIndex</TD><TD>Index number of default baseline for this script-equals index position of baseline tag in BaselineArray of the BaseTagList</TD></TR>
<TR>	
<TD VALIGN=TOP>uint16</TD><TD VALIGN=TOP>BaseCoordCount</TD><TD>Number of BaseCoord tables defined-should equal BaseTagCount in the BaseTagList</TD></TR>
<TR>	
<TD VALIGN=TOP>Offset</TD><TD VALIGN=TOP>BaseCoord[BaseCoordCount]</TD><TD>Array of offsets to BaseCoord-from beginning of BaseValues table-order matches BaselineTag array in the BaseTagList</TD></TR>
</TABLE>
&nbsp;&nbsp;

	
<H3>The MinMax Table and FeatMinMaxRecord</H3>

<P>The MinMax table specifies extents for scripts and language systems. It also contains an array of FeatMinMaxRecords used to define feature-specific extents.

<P>Both the MinMax table and the FeatMinMaxRecord define offsets to two BaseCoord tables: one that defines the mimimum extent value (MinCoord), and one that defines the maximum extent value (MaxCoord). Each extent value is a single X or Y value, depending upon the text direction, and is specified in design units. Coordinate values may be negative.

<P>Different tables define the min/max extent values for scripts, language systems, and features: 

<UL>
<LI>Min/max extent values for a script are defined in the DefaultMinMax table, referenced in a BaseScript table.
<LI>Within the DefaultMinMax table, FeatMinMaxRecords can specify extent values for features that apply to the entire script.
<LI>Min/max extent values for a language system are defined in the MinMax table, referenced in a BaseLangSysRecord.
<LI>FeatMinMaxRecords can be defined within the MinMax table to specify extent values for features applied within a language system.
</UL>

<P>In a FeatMinMaxRecord, the MinCoord and MaxCoord tables specify the minimum and maximum coordinate values for the feature, and a FeatureTableTag defines a 4-byte feature identification tag. The FeatureTableTag must match the tag used to identify the feature in the FeatureList of the GSUB or GPOS table. 

<P>Each feature that exceeds the default min/max values requires a FeatMinMaxRecord. All FeatMinMaxRecords are listed alphabetically by FeatureTableTag in an array (FeatMinMaxRecord) within the MinMax table. FeatMinMaxCount defines the total number of FeatMinMaxRecords. 

<P>Text-processing clients should use the following procedure to access the script, language system, and feature-specific extent data:

<OL>
<LI>Determine script extents in relation to the text content.
<LI>Select language-specific extent values with respect to the language system in use.
<LI>Have the application or user choose feature-specific extent values. 
<LI>If no extent values are defined for a language system or for language-specific features, use the default min/max extent values for the script.
</OL>

<P>Example 4 at the end of this chapter has two parts. One shows MinMax tables and a FeatMinMaxRecord for different script, language system, and feature extents. The second part shows how to define these tables when a language system needs feature-specific extent values for an obscure feature, but otherwise the language system and script extent values match.

<BR>&nbsp;<BR><FONT SIZE=5>MinMax table</font>
<TABLE BGCOLOR="#F0F0F0" WIDTH=455 BORDER=0 CELLPADDING=3>
<THEAD>
<TR>
<TH BGCOLOR="#C0C0C0">Type</TH><TH BGCOLOR="#C0C0C0">Name</TH><TH BGCOLOR="#C0C0C0">Description</TH></TR>
</THEAD><TBODY>
<TR>	
<TD VALIGN=TOP>Offset</TD><TD VALIGN=TOP>MinCoord</TD><TD>Offset to BaseCoord table-defines minimum extent value-from the beginning of MinMax table-may be NULL</TD></TR>
<TR>	
<TD VALIGN=TOP>Offset</TD><TD VALIGN=TOP>MaxCoord</TD><TD>Offset to BaseCoord table-defines maximum extent value-from the beginning of MinMax table-may be NULL</TD></TR>
<TR>	
<TD VALIGN=TOP>uint16</TD><TD VALIGN=TOP>FeatMinMaxCount</TD><TD>Number of FeatMinMaxRecords-may be zero (0)</TD></TR>
<TR>	
<TD VALIGN=TOP>struct</TD><TD VALIGN=TOP>FeatMinMaxRecord<BR>[FeatMinMaxCount]</TD><TD>Array of FeatMinMaxRecords-in alphabetical order, by FeatureTableTag</TD></TR>
</TABLE>
&nbsp;&nbsp;
	

<BR>&nbsp;<BR><FONT SIZE=5>FeatMinMaxRecord</font>
<TABLE BGCOLOR="#F0F0F0" WIDTH=455 BORDER=0 CELLPADDING=3>
<THEAD>
<TR>
<TH BGCOLOR="#C0C0C0">Type</TH><TH BGCOLOR="#C0C0C0">Name</TH><TH BGCOLOR="#C0C0C0">Description</TH></TR>
</THEAD><TBODY>	
<TR>
<TD VALIGN=TOP>Tag</TD><TD VALIGN=TOP>FeatureTableTag</TD><TD>4-byte feature identification tag-must match FeatureTag in FeatureList</TD></TR>
<TR>	
<TD VALIGN=TOP>Offset</TD><TD VALIGN=TOP>MinCoord</TD><TD>Offset to BaseCoord table-defines minimum extent value-from beginning of MinMax table-may be NULL</TD></TR>
<TR>	
<TD VALIGN=TOP>Offset</TD><TD VALIGN=TOP>MaxCoord</TD><TD>Offset to BaseCoord table-defines maximum extent value-from beginning of MinMax table-may be NULL</TD></TR>
</TABLE>
&nbsp;&nbsp;

	
<H3>BaseCoord Tables</H3>

<P>Within the BASE table, a BaseCoord table defines baseline and min/max extent values. Each BaseCoord table defines one X or Y value:

<UL>
<LI>If defined within the HorizAxis table, then the BaseCoord table contains a Y value. 
<LI>If defined within the VertAxis table, then the BaseCoord table contains an X value. 
</UL>

<P>All values are defined in design units, which typically are scaled and rounded to the nearest integer when scaling the glyphs. Values may be negative.
<P>Three formats available for BaseCoord table data define single X or Y coordinate values in design units. Two of the formats also support fine adjustments to the X or Y values based on a contour point or a Device table. 

<H4>BaseCoord Format 1</H4>

<P>The first BaseCoord format (BaseCoordFormat1) consists of a format identifier, followed by a single design unit coordinate that specifies the BaseCoord value. This format has the benefits of small size and simplicity, but the BaseCoord value cannot be hinted for fine adjustments at different sizes or device resolutions.

<P>Example 5 at the end of the chapter shows a sample of a BaseCoordFormat1 table.

<BR>&nbsp;<BR><FONT SIZE=5>BaseCoordFormat1 table: Design units only</font>
<TABLE BGCOLOR="#F0F0F0" WIDTH=455 BORDER=0 CELLPADDING=3>
<THEAD>
<TR>
<TH BGCOLOR="#C0C0C0">Type</TH><TH BGCOLOR="#C0C0C0">Name</TH><TH BGCOLOR="#C0C0C0">Description</TH></TR>
</THEAD><TBODY>
<TR>	
<TD VALIGN=TOP>uint16</TD><TD VALIGN=TOP>BaseCoordFormat</TD><TD>Format identifier-format = 1</TD></TR>
<TR>	
<TD VALIGN=TOP>int16</TD><TD VALIGN=TOP>Coordinate</TD><TD>X or Y value, in design units</TD></TR>
</TABLE>
&nbsp;&nbsp;
	

<H4>BaseCoord Format 2</H4>

<P>The second BaseCoord format (BaseCoordFormat2) specifies the BaseCoord value in design units, but also supplies a glyph index and a contour point for reference. During font hinting, the contour point on the glyph outline may move. The point's final position after hinting provides the final value for rendering a given font size. 

<BLOCKQUOTE>
<STRONG>Note:</STRONG> Glyph positioning operations defined in the GPOS table do not affect the point's final position.
</BLOCKQUOTE>

<P>Example 6 shows a sample of a BaseCoordFormat2 table.

<BR>&nbsp;<BR><FONT SIZE=5>BaseCoordFormat2 table: Design units plus contour point</font>
<TABLE BGCOLOR="#F0F0F0" WIDTH=455 BORDER=0 CELLPADDING=3>
<THEAD>
<TR>
<TH BGCOLOR="#C0C0C0">Type</TH><TH BGCOLOR="#C0C0C0">Name</TH><TH BGCOLOR="#C0C0C0">Description</TH></TR>
</THEAD><TBODY>	
<TR>
<TD VALIGN=TOP>uint16</TD><TD VALIGN=TOP>BaseCoordFormat</TD><TD>Format identifier-format = 2</TD></TR>
<TR>	
<TD VALIGN=TOP>int16</TD><TD VALIGN=TOP>Coordinate</TD><TD>X or Y value, in design units</TD></TR>
<TR>	
<TD VALIGN=TOP>GlyphID</TD><TD VALIGN=TOP>ReferenceGlyph</TD><TD>GlyphID of control glyph</TD></TR>
<TR>	
<TD VALIGN=TOP>uint16</TD><TD VALIGN=TOP>BaseCoordPoint</TD><TD>Index of contour point on the ReferenceGlyph</TD></TR>
</TABLE>
&nbsp;&nbsp;
	

<H4>BaseCoord Format 3</H4>

<P>The third BaseCoord format (BaseCoordFormat3) also specifies the BaseCoord value in design units, but it uses a Device table rather than a contour point to adjust the value. This format offers the advantage of fine-tuning the BaseCoord value for any font size and device resolution. (For more information about Device tables, see the chapter, Common Table Formats.)

<P>Example 7 at the end of this chapter shows a sample of a BaseCoordFormat3 table.

<BR>&nbsp;<BR><FONT SIZE=5>BaseCoordFormat3 table: Design units plus Device table</font>
<TABLE BGCOLOR="#F0F0F0" WIDTH=455 BORDER=0 CELLPADDING=3>
<THEAD>
<TR>
<TH BGCOLOR="#C0C0C0">Type</TH><TH BGCOLOR="#C0C0C0">Name</TH><TH BGCOLOR="#C0C0C0">Description</TH></TR>
</THEAD><TBODY>	
<TR>
<TD VALIGN=TOP>uint16</TD><TD VALIGN=TOP>BaseCoordFormat</TD><TD>Format identifier-format = 3</TD></TR>
<TR>	
<TD VALIGN=TOP>int16</TD><TD VALIGN=TOP>Coordinate</TD><TD>X or Y value, in design units</TD></TR>
<TR>
<TD VALIGN=TOP>Offset</TD><TD VALIGN=TOP>DeviceTable</TD><TD>Offset to Device table for X or Y value</TD></TR>
</TABLE>
&nbsp;&nbsp;

	
<H3>BASE Table Examples</H3>
<P>The rest of this chapter describes and illustrates examples of all the BASE tables. All the examples reflect unique parameters described below, but the samples provide a useful reference for building tables specific to other situations.

<P>Most of the examples have three columns showing hex data, source, and comments.

<H4>Example 1: BASE Header Table, Axis Table, BaseTagList Table,    BaseScriptList Table, and BaseScriptRecord</H4>
<P>Example 1 describes a sample font that contains four scripts: Cyrillic, Devanagari, Han, and Latin. All four scripts are rendered horizontally; only one script, Han, is rendered vertically. As a result, the BASE header gives offsets to two Axis tables: HorizAxis and VertAxis. Example 1 only shows data defined in the HorizAxis table.

<P>In the HorizAxis table, the BaseScriptList enumerates all four scripts. The BaseTagList table names three horizontal baselines for rendering these scripts: hanging, ideographic, and roman. The hanging baseline is the default for Devanagari, the ideographic baseline is the default for Han, and the roman baseline is the default for both Latin and Cyrillic.

<P>The VertAxis table (not shown) would be defined similarly: its BaseScriptList would enumerate one script, Han, and its BaseTagList would specify the vertically centered baseline for rendering the Han script. 

<BR>&nbsp;<BR><FONT SIZE=5>Example 1</font>
<TABLE BGCOLOR="#F0F0F0" WIDTH=455 BORDER=0 CELLPADDING=3>
<THEAD>
<TR>
<TH BGCOLOR="#C0C0C0">Hex Data</TH><TH BGCOLOR="#C0C0C0">Source</TH><TH BGCOLOR="#C0C0C0">Comments</TH></TR>
</THEAD><TBODY>
<TR>
<TD VALIGN=TOP>&nbsp;</TD><TD VALIGN=TOP><STRONG>BASEHeader</STRONG><BR>TheBASEHeader</TD><TD VALIGN=BOTTOM>BASE table header definition</TD></TR>
<TR>
<TD VALIGN=TOP>00010000</TD><TD VALIGN=TOP>0x00010000</TD><TD>Version</TD></TR>
<TR>
<TD VALIGN=TOP>0008</TD><TD VALIGN=TOP>HorizontalAxisTable</TD><TD>Offset to HorizAxis table</TD></TR>
<TR>
<TD VALIGN=TOP>010C</TD><TD VALIGN=TOP>VerticalAxisTable</TD><TD>Offset to VertAxis table<HR></TD></TR>
<TR>
<TD VALIGN=TOP>&nbsp;</TD><TD VALIGN=TOP><STRONG>Axis</STRONG><BR>HorizontalAxisTable</TD><TD VALIGN=BOTTOM>Axis table definition</TD></TR>
<TR>
<TD VALIGN=TOP>0004</TD><TD VALIGN=TOP>HorizBaseTagList</TD><TD>Offset to BaseTagList table</TD></TR>
<TR>
<TD VALIGN=TOP>0012</TD><TD VALIGN=TOP>HorizBaseScriptList</TD><TD>Offset to BaseScriptList table<HR></TD></TR>
<TR>
<TD VALIGN=TOP>&nbsp;</TD><TD VALIGN=TOP><STRONG>BaseTagList</STRONG><BR>HorizBaseTagList</TD><TD VALIGN=BOTTOM>BaseTagList table definition</TD></TR>
<TR>
<TD VALIGN=TOP>0003</TD><TD VALIGN=TOP>3</TD><TD>BaseTagCount</TD></TR>
<TR>
<TD VALIGN=TOP>68616E67</TD><TD VALIGN=TOP>&quot;hang&quot;</TD><TD>BaselineTag[0], in alphabetical order</TD></TR>
<TR>
<TD VALIGN=TOP>6964656F</TD><TD VALIGN=TOP>&quot;ideo&quot;</TD><TD>BaselineTag[1]</TD></TR>
<TR>
<TD VALIGN=TOP>726F6D6E</TD><TD VALIGN=TOP>&quot;romn&quot;</TD><TD>BaselineTag[2]</TD></TR>
<TR>
<TD VALIGN=TOP>&nbsp;</TD><TD VALIGN=TOP><STRONG>BaseScriptList</STRONG><BR>HorizBaseScriptList</TD><TD VALIGN=BOTTOM>BaseScriptList table definition</TD></TR>
<TR>
<TD VALIGN=TOP>0004</TD><TD VALIGN=TOP>4</TD><TD>BaseScriptCount<BR>BaseScriptRecord[0], in alphabetical order</TD></TR>
<TR>
<TD VALIGN=TOP>6379726C</TD><TD VALIGN=TOP>&quot;cyrl&quot;</TD><TD>BaseScriptTag for Cyrillic script</TD></TR>
<TR>
<TD VALIGN=TOP>001A</TD><TD VALIGN=TOP>HorizCyrillicBaseScriptTable</TD><TD>Offset to BaseScript table for Cyrillic script BaseScriptRecord[1]</TD></TR>
<TR>
<TD VALIGN=TOP>6465766E</TD><TD VALIGN=TOP>&quot;devn&quot;</TD><TD>BaseScriptTag for Devanagari script</TD></TR>
<TR>
<TD VALIGN=TOP>0060</TD><TD VALIGN=TOP>HorizDevanagariBaseScriptTable</TD><TD>Offset to BaseScript table for Devanagari script BaseScriptRecord[2]</TD></TR>
<TR>
<TD VALIGN=TOP>68616E69</TD><TD VALIGN=TOP>&quot;hani&quot;</TD><TD>BaseScriptTag for Han script</TD></TR>
<TR>
<TD VALIGN=TOP>008A</TD><TD VALIGN=TOP>HorizHanBaseScriptTable</TD><TD>Offset to BaseScript table for Han script BaseScriptRecord[3]</TD></TR>
<TR>
<TD VALIGN=TOP>6C61746E</TD><TD VALIGN=TOP>&quot;latn&quot;</TD><TD>BaseScriptTag for Latin script</TD></TR>
<TR>
<TD VALIGN=TOP>00B4</TD><TD VALIGN=TOP>HorizLatinBaseScriptTable</TD><TD>Offset to BaseScript table for Latin script</TD></TR>
</TABLE>
&nbsp;&nbsp;


<H4>Example 2: BaseScript Table and BaseLangSysRecord</H4>
<P>Example 2 shows the BaseScript table and BaseLangSysRecord for the Cyrillic script, one of the four scripts included in the sample font described in Example 1. The BaseScript table specifies offsets to tables that contain the baseline and min/max extent data for Cyrillic. (The BaseScript tables for the other three scripts in the font would be defined similarly.) Again, the table specifies only the horizontal text-layout information.

<P>The HorizCyrillicBaseValues table contains the baseline information for the script, and the HorizCyrillicDefaultMinMax table contains the default script extents. In addition, a BaseLangSysRecord defines min/max extent data for the Russian language system.

<BR>&nbsp;<BR><FONT SIZE=5>Example 2</font>
<TABLE BGCOLOR="#F0F0F0" WIDTH=455 BORDER=0 CELLPADDING=3>
<THEAD>
<TR>
<TH BGCOLOR="#C0C0C0">Hex Data</TH><TH BGCOLOR="#C0C0C0">Source</TH><TH BGCOLOR="#C0C0C0">Comments</TH></TR>
</THEAD><TBODY>
<TR>
<TD VALIGN=TOP>&nbsp;</TD><TD VALIGN=TOP><STRONG>BaseScript</STRONG><BR>HorizCyrillicBaseScriptTable</TD><TD VALIGN=BOTTOM>BaseScript table definition for Cyrillic script</TD></TR>
<TR>
<TD VALIGN=TOP>000C</TD><TD VALIGN=TOP>HorizCyrillicBaseValuesTable</TD><TD>Offset to BaseValues table</TD></TR>
<TR>
<TD VALIGN=TOP>0022</TD><TD VALIGN=TOP>HorizCyrillicDefault<BR>MinMaxTable</TD><TD>Offset to DefaultMinMax table default script extents</TD></TR>
<TR>
<TD VALIGN=TOP>0001</TD><TD VALIGN=TOP>1</TD><TD>BaseLangSysCount, feature-specific extents BaseLangSysRecord[0] in alphabetical order</TD></TR>
<TR>
<TD VALIGN=TOP>52555320</TD><TD VALIGN=TOP>&quot;RUS &quot;</TD><TD>BaseLangSysTag, Russian language system</TD></TR>
<TR>
<TD VALIGN=TOP>0030</TD><TD VALIGN=TOP>HorizRussianMinMaxTable</TD><TD>Offset to MinMax table feature-specific extents</TD></TR>
</TABLE>
&nbsp;&nbsp;


<H4>Example 3: BaseValues Table</H4>
<P>Example 3 extends the BASE table definition for the Cyrillic script described in Examples 1 and 2. It contains two parts:

<UL>
<LI>Example 3A illustrates a fully defined BaseValues table for Cyrillic. The table includes the corresponding BaseCoord table definitions. 
<LI>Example 3B shows two different sets of baseline values that can be defined for each of the four scripts in the sample font.
</UL>

<P>The examples show only horizontal text-layout data, and the font uses 2,048 design units/em.

<H4>Example 3A: BaseValues Table for Cyrillic</H4>
<P>The BaseValues table of Example 3A identifies the default baseline for Cyrillic and specifies coordinate positions for each baseline listed in the BaseTagList shown in Example 1:

<UL>
<LI>The hanging baseline is the default for the Devanagari script, and it has the highest baseline position.
<LI>The ideographic baseline is the default for the Han script, and it has the lowest baseline position.
<LI>The roman baseline is the default for both the Latin and Cyrillic scripts, and its position lies between the hanging and ideographic baselines.
</UL>

<BR>&nbsp;<BR><FONT SIZE=5>Example 3A</font>
<TABLE BGCOLOR="#F0F0F0" WIDTH=455 BORDER=0 CELLPADDING=3>
<THEAD>
<TR>
<TH BGCOLOR="#C0C0C0">Hex Data</TH><TH BGCOLOR="#C0C0C0">Source</TH><TH BGCOLOR="#C0C0C0">Comments</TH></TR>
</THEAD><TBODY>
<TR>
<TD VALIGN=TOP>&nbsp;</TD><TD VALIGN=TOP><STRONG>BaseValues</STRONG><BR>HorizCyrillicBaseValuesTable</TD><TD VALIGN=BOTTOM>BaseValues table definition for Cyrillic script</TD></TR>
<TR>
<TD VALIGN=TOP>0002</TD><TD VALIGN=TOP>2</TD><TD>DefaultIndex, roman baseline BaselineTag index</TD></TR>
<TR>
<TD VALIGN=TOP>0003</TD><TD VALIGN=TOP>3</TD><TD>BaseCoordCount, equals BaseTagCount</TD></TR>
<TR>
<TD VALIGN=TOP>000A</TD><TD VALIGN=TOP>HorizHangingBaseCoordForCyrl</TD><TD>Offset to BaseCoord[0] table hanging baseline coordinate, order matches order of     BaselineTag array in BaseTagList</TD></TR>
<TR>
<TD VALIGN=TOP>000E</TD><TD VALIGN=TOP>HorizideographicBaseCoordForCyrl</TD><TD>Offset to BaseCoord[1] table ideographic baseline coordinate</TD></TR>
<TR>
<TD VALIGN=TOP>0012</TD><TD VALIGN=TOP>HorizromanBaseCoordForCyrl</TD><TD>Offset to BaseCoord[2] table roman baseline coordinate<HR></TD></TR>
<TR>
<TD VALIGN=TOP>&nbsp;</TD><TD VALIGN=TOP><STRONG>BaseCoordFormat1</STRONG><BR>HorizHangingBaseCoordForCyrl</TD><TD VALIGN=BOTTOM>BaseCoord table definition</TD></TR>
<TR>
<TD VALIGN=TOP>0001</TD><TD VALIGN=TOP>1</TD><TD>BaseCoordFormat design units only</TD></TR>
<TR>
<TD VALIGN=TOP>05DC</TD><TD VALIGN=TOP>1500</TD><TD>Coordinate Y value, in design units<HR></TD></TR>
<TR>
<TD VALIGN=TOP>&nbsp;</TD><TD VALIGN=TOP><STRONG>BaseCoordFormat1</STRONG><BR>HorizideographicBaseCoordForCyrl</TD><TD VALIGN=BOTTOM>BaseCoord table definition</TD></TR>
<TR>
<TD VALIGN=TOP>0001</TD><TD VALIGN=TOP>1</TD><TD>BaseCoordFormat design units only</TD></TR>
<TR>
<TD VALIGN=TOP>FEE0</TD><TD VALIGN=TOP>-288</TD><TD>Coordinate Y value, in design units<HR></TD></TR>
<TR>
<TD VALIGN=TOP>&nbsp;</TD><TD VALIGN=TOP><STRONG>BaseCoordFormat1</STRONG><BR>HorizromanBaseCoordinateForCyrl</TD><TD VALIGN=BOTTOM>BaseCoord table definition</TD></TR>
<TR>
<TD VALIGN=TOP>0001</TD><TD VALIGN=TOP>1</TD><TD>BaseCoordFormat, design units only</TD></TR>
<TR>
<TD VALIGN=TOP>0000</TD><TD VALIGN=TOP>0</TD><TD>Coordinate, Y value, in design units</TD></TR>
</TABLE>
&nbsp;&nbsp;


<H4>Example 3B: Baseline Values for Four Scripts</H4>
<P>Example 3B shows two tables that contain baseline values for each of the four scripts in the sample font described in Example 1:

<UL>
<LI>The first table shows what might happen if the baseline values in all four scripts are designed consistently. Their respective BaseValues tables list identical baseline values with the roman baseline positioned at a Y value of zero (0), the ideographic baseline at 1500, and the hanging baseline at -288.
<LI>The second table shows what might happen if the baseline values in the scripts are designed differently with the default baseline for each script at the zero (0) coordinate.
</UL>

<P>Either method of assigning baseline values can be used in the BASE table.

<BR>&nbsp;<BR><FONT SIZE=5>Example 3B: Identical baseline values</font>
<TABLE BGCOLOR="#F0F0F0" WIDTH=455 BORDER=0 CELLPADDING=3>
<THEAD>
<TR>
<TH BGCOLOR="#C0C0C0">Baseline type</TH><TH BGCOLOR="#C0C0C0">Han</TH><TH BGCOLOR="#C0C0C0">Latin</TH><TH BGCOLOR="#C0C0C0">Cyrillic</TH><TH BGCOLOR="#C0C0C0">Devanagari</TH></TR>
</THEAD><TBODY>	
<TR>
<TD VALIGN=TOP>hanging</TD><TD VALIGN=TOP>1500</TD><TD VALIGN=TOP>1500</TD><TD VALIGN=TOP>1500</TD><TD VALIGN=TOP>1500</TD></TR>
<TR>	
<TD VALIGN=TOP>roman</TD><TD VALIGN=TOP>0</TD><TD VALIGN=TOP>0</TD><TD VALIGN=TOP>0</TD><TD VALIGN=TOP>0</TD></TR>
<TR>	
<TD VALIGN=TOP>ideographic</TD><TD VALIGN=TOP>-288</TD><TD VALIGN=TOP>-288</TD><TD VALIGN=TOP>-288</TD><TD VALIGN=TOP>-288</TD></TR>
</TABLE>
&nbsp;&nbsp;


<BR>&nbsp;<BR><FONT SIZE=5>Example 3B: Assigned baseline values with default baselines at 0</font>	
<TABLE BGCOLOR="#F0F0F0" WIDTH=455 BORDER=0 CELLPADDING=3>
<THEAD>
<TR>
<TH BGCOLOR="#C0C0C0">Baseline type</TH><TH BGCOLOR="#C0C0C0">Han</TH><TH BGCOLOR="#C0C0C0">Latin</TH><TH BGCOLOR="#C0C0C0">Cyrillic</TH><TH BGCOLOR="#C0C0C0">Devanagari</TH></TR>
</THEAD><TBODY>	
<TR>
<TD VALIGN=TOP>hanging</TD><TD VALIGN=TOP>1788</TD><TD VALIGN=TOP>1500</TD><TD VALIGN=TOP>1500</TD><TD VALIGN=TOP>0</TD></TR>
<TR>	
<TD VALIGN=TOP>roman</TD><TD VALIGN=TOP>288</TD><TD VALIGN=TOP>0</TD><TD VALIGN=TOP>0</TD><TD VALIGN=TOP>-1500</TD></TR>
<TR>	
<TD VALIGN=TOP>ideographic</TD><TD VALIGN=TOP>0</TD><TD VALIGN=TOP>-288</TD><TD VALIGN=TOP>-288</TD><TD VALIGN=TOP>-1788</TD></TR>
</TABLE>
&nbsp;&nbsp;

	
<H4>Example 4: MinMax Table and FeatMinMaxRecord</H4>
<P>Example 4 shows MinMax table and FeatMinMaxRecord definitions for the same Cyrillic script described in the previous example. It contains two parts:

<UL>
<LI>Example 4A defines tables with different script, language system, and feature extents.
<LI>Example 4B shows these same table definitions written when the language system extents match the script extents, but an obscure feature of the language system requires feature-specific extents if that feature is implemented.
</UL>

<P>The examples show only horizontal text-layout data, and the font uses 2,048 design units/em.

<H4>Example 4A: Min/Max Extents For Cyrillic Script, Russian Language, and Russian Feature</H4>
<P>Example 4A shows two MinMax tables and a FeatMinMaxRecord for the Cyrillic script, along with sample BaseCoord tables. Only the MinCoord extent data is included.

<P>The DefaultMinMax table defines the default minimum and maximum extents for the Cyrillic script. Another MinMax table defines language-specific min/max extents for the Russian language system to accommodate the height and width of certain glyphs used in Russian. Also, a FeatMinMaxRecord defines min/max extents for a single feature in the Russian language system that substitutes a tall integral math symbol when required. 

<BR>&nbsp;<BR><FONT SIZE=5>Example 4A</font>
<TABLE BGCOLOR="#F0F0F0" WIDTH=455 BORDER=0 CELLPADDING=3>
<THEAD>
<TR>
<TH BGCOLOR="#C0C0C0">Hex Data</TH><TH BGCOLOR="#C0C0C0">Source</TH><TH BGCOLOR="#C0C0C0">Comments</TH></TR>
</THEAD><TBODY>
<TR>
<TD VALIGN=TOP>&nbsp;</TD><TD VALIGN=TOP><STRONG>MinMax</STRONG><BR>HorizCyrillicDefault<BR>MinMaxTable</TD><TD VALIGN=BOTTOM>DefaultMinMax table definition, Cyrillic script</TD></TR>
<TR>
<TD VALIGN=TOP>0006</TD><TD VALIGN=TOP>HorizCyrillic<BR>MinCoordTable</TD><TD>MinCoord offset to BaseCoord table</TD></TR>
<TR>
<TD VALIGN=TOP>000A</TD><TD VALIGN=TOP>HorizCyrillic<BR>MaxCoordTable</TD><TD>MaxCoord offset to BaseCoord table</TD></TR>
<TR>
<TD VALIGN=TOP>0000</TD><TD VALIGN=TOP>0</TD><TD>FeatMinMaxCount no default feature extents<BR>FeatMinMaxRecord[], no FeatMinMaxRecords<HR></TD></TR>
<TR>
<TD VALIGN=TOP>&nbsp;</TD><TD VALIGN=TOP><STRONG>BaseCoordFormat1</STRONG><BR>HorizCyrillic<BR>MinCoordTable</TD><TD VALIGN=BOTTOM>BaseCoord table definition, default Cyrillic Min 
extent coordinate</TD></TR>
<TR>
<TD VALIGN=TOP>0001</TD><TD VALIGN=TOP>1</TD><TD>BaseCoordFormat, design units only</TD></TR>
<TR>
<TD VALIGN=TOP>FF38</TD><TD VALIGN=TOP>-200</TD><TD>Coordinate Y value, in design units<HR></TD></TR>
<TR>
<TD VALIGN=TOP>&nbsp;</TD><TD VALIGN=TOP><STRONG>BaseCoordFormat1</STRONG><BR>HorizCyrillic<BR>MaxCoordTable</TD><TD VALIGN=BOTTOM>BaseCoord table definition default Cyrillic Max 
extent coordinate</TD></TR>
<TR>
<TD VALIGN=TOP>0001</TD><TD VALIGN=TOP>1</TD><TD>BaseCoordFormat, design units only</TD></TR>
<TR>
<TD VALIGN=TOP>0674</TD><TD VALIGN=TOP>1652</TD><TD>Coordinate Y value, in design units<HR></TD></TR>
<TR>
<TD VALIGN=TOP>&nbsp;</TD><TD VALIGN=TOP><STRONG>MinMax</STRONG><BR>HorizRussianMinMaxTable</TD><TD VALIGN=BOTTOM>MinMax table definition Russian language extents</TD></TR>
<TR>
<TD VALIGN=TOP>000E</TD><TD VALIGN=TOP>HorizRussianLangSys<BR>MinCoordTable</TD><TD>MinCoord Offset to BaseCoord table</TD></TR>
<TR>
<TD VALIGN=TOP>0012</TD><TD VALIGN=TOP>HorizRussianLangSys<BR>MaxCoordTable</TD><TD>MaxCoord Offset to BaseCoord table</TD></TR>
<TR>
<TD VALIGN=TOP>0001</TD><TD VALIGN=TOP>1</TD><TD>FeatMinMaxCount<BR>FeatMinMaxRecord[0] in alphabetical order</TD></TR>
<TR> 
<TD VALIGN=TOP>696E7467</TD><TD VALIGN=TOP>&quot;intg&quot;</TD><TD>FeatureTableTag integral math symbol Feature must be same as Tag in FeatureList</TD></TR>
<TR>
<TD VALIGN=TOP>0016</TD><TD VALIGN=TOP>HorizRussianFeature<BR>MinCoordTable</TD><TD>MinCoord Offset to BaseCoord table</TD></TR>
<TR>
<TD VALIGN=TOP>001A</TD><TD VALIGN=TOP>HorizRussianFeature<BR>MaxCoordTable</TD><TD>MaxCoord Offset to BaseCoord table<HR></TD></TR>
<TR>
<TD VALIGN=TOP>&nbsp;</TD><TD VALIGN=TOP><STRONG>BaseCoordFormat1</STRONG><BR>HorizRussianLangSys<BR>MinCoordTable</TD><TD VALIGN=BOTTOM>BaseCoord table definition Russian language min extent coordinate</TD></TR>
<TR>
<TD VALIGN=TOP>0001</TD><TD VALIGN=TOP>1</TD><TD>BaseCoordFormat design units only</TD></TR>
<TR>
<TD VALIGN=TOP>FF08</TD><TD VALIGN=TOP>-248</TD><TD>Coordinate Y value, in design units, increased Min extent beyond default Cyrillic min extent<HR></TD></TR>
<TR>
<TD VALIGN=TOP>&nbsp;</TD><TD VALIGN=TOP><STRONG>BaseCoordFormat1</STRONG><BR>HorizRussianLangSys<BR>MaxCoordTable</TD><TD VALIGN=BOTTOM>BaseCoord table definition Russian language feature Max extent coordinate</TD></TR>
<TR>
<TD VALIGN=TOP>0001</TD><TD VALIGN=TOP>1</TD><TD>BaseCoordFormat design units only</TD></TR>
<TR>
<TD VALIGN=TOP>06A4</TD><TD VALIGN=TOP>1700</TD><TD>Coordinate Y value, in design units increased max extent beyond default Cyrillic max extent<HR></TD></TR>
<TR>
<TD VALIGN=TOP>&nbsp;</TD><TD VALIGN=TOP><STRONG>BaseCoordFormat1</STRONG><BR>HorizRussianFeature<BR>MinCoordTable</TD><TD VALIGN=BOTTOM>BaseCoord table definition Russian language Min 
extent coordinate</TD></TR>
<TR>
<TD VALIGN=TOP>0001</TD><TD VALIGN=TOP>1</TD><TD>BaseCoordFormat Design Units Only</TD></TR>
<TR>
<TD VALIGN=TOP>FED8</TD><TD VALIGN=TOP>-296</TD><TD>Coordinate Y value, in design units, increased Min extent beyond default Cyrillic script and Russian language min extents<HR></TD></TR>
<TR>
<TD VALIGN=TOP>&nbsp;</TD><TD VALIGN=TOP><STRONG>BaseCoordFormat1</STRONG><BR>HorizRussianFeature<BR>MaxCoordTable</TD><TD VALIGN=BOTTOM>BaseCoord table definition Russian language feature Max extent coordinate</TD></TR>
<TR>
<TD VALIGN=TOP>0001</TD><TD VALIGN=TOP>1</TD><TD>BaseCoordFormat design units only</TD></TR>
<TR>
<TD VALIGN=TOP>06D8</TD><TD VALIGN=TOP>1752</TD><TD>Coordinate Y value, in design units increased Max extent beyond default Cyrillic script and Russian language max extents</TD></TR>
</TABLE>
&nbsp;&nbsp;


<H4>Example 4B: Min/Max Extents For Cyrillic Script and Russian Feature</H4>
<P>A particular language system does not need to define min/max extent coordinates if its extents match the default extents defined for the script. However, an obscure or infrequently used feature within the language system may require feature-specific extent values for proper rendering. 

<P>Example 4B shows the MinMax and FeatMinMaxRecord table definitions for this situation. The example also includes a BaseScript table, but not a BaseValues tables since it is not relevant in this example. The example shows horizontal text layout extents for the Cyrillic script and feature-specific extents for one feature in the Russian language system. Much of the data is repeated from Example 4A and modified here for comparison. 

<P>The BaseScript table includes a DefaultMinMax table for the Cyrillic script and a BaseLangSysRecord that defines a BaseLangSysTag and an offset to a MinMax table for the Russian language. The MinMax table includes a FeatMinMaxRecord and specifies a FeatMinMaxCount, but both the MinCoord and MaxCoord offsets in the MinMax table are set to NULL since no language-specific extent values are defined for Russian. The FeatMinMaxRecord defines the min/max coordinates for the Russian feature and specifies the correct FeatureTableTag.

<BR>&nbsp;<BR><FONT SIZE=5>Example 4B</font>
<TABLE BGCOLOR="#F0F0F0" WIDTH=455 BORDER=0 CELLPADDING=3>
<THEAD>
<TR>
<TH BGCOLOR="#C0C0C0">Hex Data</TH><TH BGCOLOR="#C0C0C0">Source</TH><TH BGCOLOR="#C0C0C0">Comments</TH></TR>
</THEAD><TBODY>
<TR>
<TD VALIGN=TOP>&nbsp;</TD><TD VALIGN=TOP><STRONG>BaseScript</STRONG><BR>HorizCyrillicBaseScriptTable</TD><TD VALIGN=BOTTOM>BaseScript table definition Cyrillic script</TD></TR>
<TR>
<TD VALIGN=TOP>0000</TD><TD VALIGN=TOP>NULL</TD><TD>offset to BaseValues table</TD></TR>
<TR>
<TD VALIGN=TOP>000C</TD><TD VALIGN=TOP>HorizCyrillicDefault<BR>MinMaxTable</TD><TD>offset to DefaultMinMax table for default script extents</TD></TR>
<TR>
<TD VALIGN=TOP>0001</TD><TD VALIGN=TOP>1</TD><TD>BaseLangSysCount<BR>BaseLangSysRecord[0] for Russian feature-specific-extents</TD></TR>
<TR>
<TD VALIGN=TOP>52555320</TD><TD VALIGN=TOP>&quot;RUS &quot;</TD><TD>BaseLangSysTag = Russian</TD></TR>
<TR>
<TD VALIGN=TOP>001A</TD><TD VALIGN=TOP>HorizRussian<BR>MinMaxTable</TD><TD>offset to MinMax table for feature-specific extents<HR></TD></TR>
<TR>
<TD VALIGN=TOP>&nbsp;</TD><TD VALIGN=TOP><STRONG>MinMax</STRONG><BR>HorizCyrillicDefault<BR>MinMaxTable</TD><TD VALIGN=BOTTOM>DefaultMinMax table definition Cyrillic script</TD></TR>
<TR>
<TD VALIGN=TOP>0006</TD><TD VALIGN=TOP>HorizCyrillic<BR>MinCoordTable</TD><TD>MinCoord offset to BaseCoord table</TD></TR>
<TR>
<TD VALIGN=TOP>000A</TD><TD VALIGN=TOP>HorizCyrillic<BR>MaxCoordTable</TD><TD>MaxCoord offset to BaseCoord table</TD></TR>
<TR>
<TD VALIGN=TOP>0000</TD><TD VALIGN=TOP>0</TD><TD>FeatMinMaxCount, no default feature extents<BR>FeatMinMaxRecord[], no FeatMinMaxRecords</TD></TR>
<TR>
<TD VALIGN=TOP>&nbsp;</TD><TD VALIGN=TOP><STRONG>BaseCoordFormat1</STRONG><BR>HorizCyrillic<BR>MinCoordTable</TD><TD>BaseCoord table definition default Cyrillic Min     extent coordinate</TD></TR>
<TR>
<TD VALIGN=TOP>0001</TD><TD VALIGN=TOP>1</TD><TD>BaseCoordFormat design units only</TD></TR>
<TR>
<TD VALIGN=TOP>FF38</TD><TD VALIGN=TOP>-200</TD><TD>Coordinate Y value, in design units<HR></TD></TR>
<TR>
<TD VALIGN=TOP>&nbsp;</TD><TD VALIGN=TOP><STRONG>BaseCoordFormat1</STRONG><BR>HorizCyrillic<BR>MaxCoordTable</TD><TD VALIGN=BOTTOM>BaseCoord table definition default Cyrillic Min 	    extent coordinate</TD></TR>
<TR>
<TD VALIGN=TOP>0001</TD><TD VALIGN=TOP>1</TD><TD>BaseCoordFormat design units only</TD></TR>
<TR>
<TD VALIGN=TOP>0674</TD><TD VALIGN=TOP>1652</TD><TD>Coordinate Y value, in design units<HR></TD></TR>
<TR>
<TD VALIGN=TOP>&nbsp;</TD><TD VALIGN=TOP><STRONG>MinMax</STRONG><BR>HorizRussian<BR>MinMaxTable</TD><TD VALIGN=BOTTOM>MinMax table definition for Russian feature no extent differences for 
Russian language itself</TD></TR>
<TR>
<TD VALIGN=TOP>0000</TD><TD VALIGN=TOP>NULL</TD><TD>offset to Min BaseCoord table not defined, matches default</TD></TR>
<TR>
<TD VALIGN=TOP>0000</TD><TD VALIGN=TOP>NULL</TD><TD>offset to Max BaseCoord table not defined, matches default</TD></TR>
<TR>
<TD VALIGN=TOP>0001</TD><TD VALIGN=TOP>1</TD><TD>FeatMinMaxCount, FeatMinMaxRecord[0] in alphabetical order</TD></TR>
<TR>
<TD VALIGN=TOP>696E7467</TD><TD VALIGN=TOP>&quot;intg&quot;</TD><TD>FeatureTableTag integral math sign Feature must be same as Tag in FeatureList</TD></TR>
<TR>
<TD VALIGN=TOP>000E</TD><TD VALIGN=TOP>HorizRussianFeature<BR>MinCoordTable</TD><TD>MinCoord offset to BaseCoord table</TD></TR>
<TR>
<TD VALIGN=TOP>0012</TD><TD VALIGN=TOP>HorizRussianFeature<BR>MaxCoordTable</TD><TD>MaxCoord offset to BaseCoord table<HR></TD></TR>
<TR>
<TD VALIGN=TOP>&nbsp;</TD><TD VALIGN=TOP><STRONG>BaseCoordFormat1</STRONG><BR>HorizRussianFeature<BR>MinCoordTable</TD><TD VALIGN=BOTTOM>BaseCoord table definition Russian Feature Min extent coordinate</TD></TR>
<TR>
<TD VALIGN=TOP>0001</TD><TD VALIGN=TOP>1</TD><TD>BaseCoordFormat, design units only</TD></TR>
<TR>
<TD VALIGN=TOP>FED8</TD><TD VALIGN=TOP>-296</TD><TD>Coordinate Y value, in design units increased Min extent beyond default Cyrillic Min extent</TD></TR>
<TR>
<TD VALIGN=TOP>&nbsp;</TD><TD VALIGN=TOP><STRONG>BaseCoordFormat1</STRONG><BR>HorizRussianFeature<BR>MaxCoordTable</TD><TD VALIGN=BOTTOM>BaseCoord table definition, Russian feature Max extent 
coordinate</TD></TR>
<TR>
<TD VALIGN=TOP>0001</TD><TD VALIGN=TOP>1</TD><TD>BaseCoordFormat design units only</TD></TR>
<TR>
<TD VALIGN=TOP>06D8</TD><TD VALIGN=TOP>1752</TD><TD>Coordinate Y value, in design units, increased Max extent beyond default Cyrillic Max extent</TD></TR>
</TABLE>
&nbsp;&nbsp;


<H4>Example 5: BaseCoordFormat1 Table</H4>
<P>Example 5 illustrates BaseCoordFormat1, which specifies single coordinate values in design units only. The font uses 2,048 design units/em. The example defines the default minimum extent coordinate for a math script.

<BR>&nbsp;<BR><FONT SIZE=5>Example 5</font>
<TABLE BGCOLOR="#F0F0F0" WIDTH=455 BORDER=0 CELLPADDING=3>
<THEAD>
<TR>
<TH BGCOLOR="#C0C0C0">Hex Data</TH><TH BGCOLOR="#C0C0C0">Source</TH><TH BGCOLOR="#C0C0C0">Comments</TH></TR>
</THEAD><TBODY>
<TR>
<TD VALIGN=TOP>&nbsp;</TD><TD VALIGN=TOP><STRONG>BaseCoordFormat1</STRONG><BR>HorizMathMinCoordTable</TD><TD VALIGN=BOTTOM>Definition of BaseCoord table for Math Min coordinate</TD></TR>
<TR>
<TD VALIGN=TOP>0001</TD><TD VALIGN=TOP>1</TD><TD>BaseCoordFormat, design units only</TD></TR>
<TR>
<TD VALIGN=TOP>FEE8</TD><TD VALIGN=TOP>-280</TD><TD>Coordinate Y value, in design units</TD></TR>
</TABLE>
&nbsp;&nbsp;


<H4>Example 6: BaseCoordFormat2 Table</H4>
<P>Example 6 illustrates the BaseCoord Format 2. Like Example 5, it specifies the minimum extent coordinate for a math script. With this format, the coordinate value depends on the final position of a specific contour point on one glyph, the integral math symbol, after hinting. Again, the value is in design units (2,048 units/em).

<BR>&nbsp;<BR><FONT SIZE=5>Example 6</font>
<TABLE BGCOLOR="#F0F0F0" WIDTH=455 BORDER=0 CELLPADDING=3>
<THEAD>
<TR>
<TH BGCOLOR="#C0C0C0">Hex Data</TH><TH BGCOLOR="#C0C0C0">Source</TH><TH BGCOLOR="#C0C0C0">Comments</TH></TR>
</THEAD><TBODY>
<TR>
<TD VALIGN=TOP>&nbsp;</TD><TD VALIGN=TOP><STRONG>BaseCoordFormat2</STRONG><BR>HorizMathMinCoordTable</TD><TD VALIGN=BOTTOM>BaseCoord table definition for Math Min coordinate</TD></TR>
<TR>
<TD VALIGN=TOP>0002</TD><TD VALIGN=TOP>2</TD><TD>BaseCoordFormat design units plus contour point</TD></TR>
<TR>
<TD VALIGN=TOP>FEE8</TD><TD VALIGN=TOP>-280</TD><TD>Coordinate Y value, in design units</TD></TR>
<TR>
<TD VALIGN=TOP>0128</TD><TD VALIGN=TOP>IntegralSignGlyphID</TD><TD>ReferenceGlyph math integral sign</TD></TR>
<TR>
<TD VALIGN=TOP>0043</TD><TD VALIGN=TOP>67</TD><TD>BaseCoordPoint glyph contour point index</TD></TR>
</TABLE>
&nbsp;&nbsp;


<H4>Example 7: BaseCoordFormat3 Table</H4>
<P>Example 7 illustrates the BaseCoord Format 3. Like Examples 5 and 6, it specifies the minimum extent coordinate for a math script in design units (2,048 units/em). This format, however, uses a Device table to modify the coordinate value for the point size and resolution of the output font. Here, the Device table defines pixel adjustments for font sizes from 11 ppem to 15 ppem. The adjustments add one pixel at each size.

<BR>&nbsp;<BR><FONT SIZE=5>Example 7</font>
<TABLE BGCOLOR="#F0F0F0" WIDTH=460 BORDER=0 CELLPADDING=3>
<THEAD>
<TR>
<TH BGCOLOR="#C0C0C0">Hex Data</TH><TH BGCOLOR="#C0C0C0">Source</TH><TH BGCOLOR="#C0C0C0">Comments</TH></TR>
</THEAD><TBODY>
<TR>
<TD VALIGN=TOP>&nbsp;</TD><TD VALIGN=TOP><STRONG>BaseCoordFormat3</STRONG><BR>HorizMathMinCoordTable</TD><TD VALIGN=BOTTOM>BaseCoord table definition for Math Min coordinate</TD></TR>
<TR>
<TD VALIGN=TOP>0003</TD><TD VALIGN=TOP>3</TD><TD>BaseCoordFormat design units plus device table</TD></TR>
<TR>
<TD VALIGN=TOP>&nbsp;</TD><TD VALIGN=TOP>-280</TD><TD>Coordinate Y value, in design units</TD></TR>
<TR>
<TD VALIGN=TOP>000C</TD><TD VALIGN=TOP>HorizMathMin<BR>CoordDeviceTable</TD><TD>Offset to Device table<HR></TD></TR>
<TR>
<TD VALIGN=TOP>&nbsp;</TD><TD VALIGN=TOP><STRONG>DeviceTableFormat1</STRONG><BR>HorizMathMin<BR>CoordDeviceTable</TD><TD VALIGN=BOTTOM>Device table definition for MinCoord</TD></TR>
<TR>
<TD VALIGN=TOP>000B</TD><TD VALIGN=TOP>11</TD><TD>StartSize -11 ppem</TD></TR>
<TR>
<TD VALIGN=TOP>000F</TD><TD VALIGN=TOP>15</TD><TD>EndSize -15 ppem</TD></TR>
<TR>
<TD VALIGN=TOP>0001</TD><TD VALIGN=TOP>1</TD><TD>DeltaFormat signed 2 bit value, 8 values per uint16</TD></TR>
<TR>
<TD VALIGN=TOP>&nbsp;</TD><TD VALIGN=TOP>1</TD><TD>Increase 11ppem by 1 pixel</TD></TR>
<TR>
<TD VALIGN=TOP>&nbsp;</TD><TD VALIGN=TOP>1</TD><TD>Increase 12ppem by 1 pixel</TD></TR>
<TR>
<TD VALIGN=TOP>&nbsp;</TD><TD VALIGN=TOP>1</TD><TD>Increase 13ppem by 1 pixel</TD></TR>
<TR>
<TD VALIGN=TOP>&nbsp;</TD><TD VALIGN=TOP>1</TD><TD>Increase 14ppem by 1 pixel</TD></TR>
<TR>
<TD VALIGN=TOP>5540</TD><TD VALIGN=TOP>1</TD><TD>Increase 15ppem by 1 pixel</TD></TR>
</TABLE>

</BODY></HTML>

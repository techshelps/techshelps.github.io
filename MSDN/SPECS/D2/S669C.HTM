<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Type Records Referenced from Type Records</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
</OBJECT></FORM>
<H2>Type Records Referenced from Type Records</H2><H3><A NAME="sec0"></A>(0x1200) Skip </H3>This is used by incremental compilers to reserve space for future indexes.</P>

<TABLE COLS="3" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="77pt" VALIGN="TOP"><COL WIDTH="54pt" VALIGN="TOP"><COL WIDTH="58pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>4</P></TD><TD VALIGN="TOP"><P>*</P></TD></TR><TR><TD VALIGN="TOP"><P>LF_SKIP</P></TD><TD VALIGN="TOP"><P>index</P></TD><TD VALIGN="TOP"><P>pad</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P><I>index</I>     In processing $$TYPES, the index counter is advanced to index count, skipping all intermediate indices. This is the next valid index.</P>
<P><I>pad</I>     Space reserved for incremental compilations.  Note that this record is removed by the link/pack utility so there is no requirement for maintaining natural alignment for this record.</P>
<H3><A NAME="sec1"></A>(0x1201) Argument List </H3></P>

<TABLE COLS="3" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="77pt" VALIGN="TOP"><COL WIDTH="112pt" VALIGN="TOP"><COL WIDTH="112pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>4</P></TD><TD VALIGN="TOP"><P>4*argcount</P></TD></TR><TR><TD VALIGN="TOP"><P>LF_ARGLIST</P></TD><TD VALIGN="TOP"><P>argcount</P></TD><TD VALIGN="TOP"><P>indices</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P><I>argcount</I>    Count of number of indices in list</P>
<P><I>indices</I>     List of type indices for describing the formal parameters to a function or method.</P>
<H3><A NAME="sec2"></A>(0x1202) Default Argument </H3></P>

<TABLE COLS="3" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="86pt" VALIGN="TOP"><COL WIDTH="58pt" VALIGN="TOP"><COL WIDTH="58pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>4</P></TD><TD VALIGN="TOP"><P>*</P></TD></TR><TR><TD VALIGN="TOP"><P>LF_DEFARG</P></TD><TD VALIGN="TOP"><P>@index</P></TD><TD VALIGN="TOP"><P>expression</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P><I>index</I>    Type index of resulting expression</P>
<P><I>expression </I>    Length-prefixed string of supplied default</P>
<P></P>
<H3><A NAME="sec3"></A>(0x1203) Field List </H3>A field list contains the descriptors of the fields of a structure, class, union, or enumeration.  The field list is composed of zero or more subfields.  Because of the requirement for natural alignment, there may be padding between elements of the field list.  As a program walks down the field list, the address of the next subfield is calculated by adding the length of the previous field to the address of the previous field.  The byte at the new address is examined and if it is greater than 0xf0, the low four bits are extracted and added to the address to find the address of the next subfield.  These padding fields are not included in the count field of the class, structure, union, or enumeration type records.  If the field list  is broken into two or more pieces by the compiler, then the last field of each piece is a LF_INDEX with the type being the index of the continuation record.  The LF_INDEX and LF_PADx fields of the field list are not included in field list count specified in the class, structure, union, or enumeration record.   See Section 3.5 for field list elements</P>
</P>

<TABLE COLS="7" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="45pt" VALIGN="TOP"><COL WIDTH="54pt" VALIGN="TOP"><COL WIDTH="31pt" VALIGN="TOP"><COL WIDTH="31pt" VALIGN="TOP"><COL WIDTH="45pt" VALIGN="TOP"><COL WIDTH="36pt" VALIGN="TOP"><COL WIDTH="40pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>*</P></TD><TD VALIGN="TOP"><P>*</P></TD><TD VALIGN="TOP"><P>...</P></TD><TD VALIGN="TOP"><P>*</P></TD><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>*</P></TD></TR><TR><TD VALIGN="TOP"><P>leaf</P></TD><TD VALIGN="TOP"><P>data</P></TD><TD VALIGN="TOP"><P>pad</P></TD><TD VALIGN="TOP"><P>...</P></TD><TD VALIGN="TOP"><P>pad</P></TD><TD VALIGN="TOP"><P>leaf</P></TD><TD VALIGN="TOP"><P>data</P></TD></TR></TBODY></TABLE>
<BR></P><H3><A NAME="sec4"></A>(0x1204) Derived Classes </H3>This type record specifies all of the classes that are directly derived from the class that references this type record. </P>
</P>

<TABLE COLS="3" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="122pt" VALIGN="TOP"><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="72pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>4</P></TD><TD VALIGN="TOP"><P>4*count</P></TD></TR><TR><TD VALIGN="TOP"><P>LF_DERIVED</P></TD><TD VALIGN="TOP"><P>count</P></TD><TD VALIGN="TOP"><P>@type</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P><I>count</I>    Number of types in the list</P>
<P><I>@type</I>    Type indices of the classes that directly inherit from the class that references this type record</P>
<H3><A NAME="sec5"></A>(0x1205) Bit Fields </H3>Bit fields are represented by an entry in the field list that indexes a bit field type definition.</P>
</P>

<TABLE COLS="4" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="77pt" VALIGN="TOP"><COL WIDTH="40pt" VALIGN="TOP"><COL WIDTH="40pt" VALIGN="TOP"><COL WIDTH="49pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>42</P></TD><TD VALIGN="TOP"><P>1</P></TD><TD VALIGN="TOP"><P>1</P></TD></TR><TR><TD VALIGN="TOP"><P>LF_BITFIELD</P></TD><TD VALIGN="TOP"><P>@type</P></TD><TD VALIGN="TOP"><P>length</P></TD><TD VALIGN="TOP"><P>position</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P><I>@type</I>    Type index of the field</P>
<P><I>length</I>     The length in bits of the object</P>
<P><I>position</I>    Starting position (from bit 0) of the object in the word.</P>
<H3><A NAME="sec6"></A><I> </I>(0x1206) Method List </H3>
<TABLE COLS="5" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="108pt" VALIGN="TOP"><COL WIDTH="58pt" VALIGN="TOP"><COL WIDTH="36pt" VALIGN="TOP"><COL WIDTH="67pt" VALIGN="TOP"><COL WIDTH="94pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>4</P></TD><TD VALIGN="TOP"><P>4</P></TD></TR><TR><TD VALIGN="TOP"><P>LF_MLIST</P></TD><TD VALIGN="TOP"><P>attribute</P></TD><TD VALIGN="TOP"><P>pad0</P></TD><TD VALIGN="TOP"><P>@type</P></TD><TD VALIGN="TOP"><P>vtab offset</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P>
<P>optional</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P>
<P>repeated</P></TD><TD VALIGN="TOP"><P></P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P><I>attribute</I>    Attribute of the member function</P>
<P><I>pad0</I>    Two bytes of padding for native alignment on type index to follow, must be 0.<I>@type</I>    Type index of the procedure record for this occurrence of the function.</P>
<P><I>vtab offset</I>    Present only when property attribute is introducing virtual (optional).  Offset in vtable of the class which contains the pointer to the function.</P>
<P></P>
Once a method has been found in this list, its symbol is found by qualifying the method name with its class (T::name) and then searching the symbol table for a symbol by that name with the correct type index.  Note that the number of repeats is determined by the subleaf of the field list that references this LF_MLIST record.</P>
<H3><A NAME="sec7"></A>(0x1207) Dimensioned Array with Constant Upper Bound </H3>This record is used to describe a dimensioned array with default lower bound and constant upper bound.  The default lower bound is language specific.</P>
<P></P>

<TABLE COLS="4" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="77pt" VALIGN="TOP"><COL WIDTH="63pt" VALIGN="TOP"><COL WIDTH="63pt" VALIGN="TOP"><COL WIDTH="58pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>42</P></TD><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P><B>s</B>*rank</P></TD></TR><TR><TD VALIGN="TOP"><P>LF_DIMCONU</P></TD><TD VALIGN="TOP"><P>@index</P></TD><TD VALIGN="TOP"><P>rank</P></TD><TD VALIGN="TOP"><P>bound</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P><I>@index</I>    Type of the index</P>
<P><I>rank</I>    Number of dimensions</P>
<P><I>bound</I>    Constants for the upper bound of each dimension of the array.  Each constant is of the size  <B>s</B> specified by @index.</P>
<H3><A NAME="sec8"></A>(0x0209) Dimensioned Array with Constant Lower and Upper Bounds </H3>This record is used to describe a dimensioned array with constant  lower and upper bound.  </P>
<P></P>

<TABLE COLS="4" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="86pt" VALIGN="TOP"><COL WIDTH="63pt" VALIGN="TOP"><COL WIDTH="63pt" VALIGN="TOP"><COL WIDTH="58pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>42</P></TD><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>2*<B>s</B>*rank</P></TD></TR><TR><TD VALIGN="TOP"><P>LF_DIMCONLU</P></TD><TD VALIGN="TOP"><P>@index</P></TD><TD VALIGN="TOP"><P>rank</P></TD><TD VALIGN="TOP"><P>bound</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P><I>@index</I>    Type of the index</P>
<P><I>rank</I>    Number of dimensions</P>
<P><I>bound</I>    Pairs of constants for the lower and upper bound of each dimension of the array.  Each constant is of the size <B>s</B> specified by @index.  The ordering is lower bound followed by upper bound for each dimension.</P>
<H3><A NAME="sec9"></A>(0x020a) Dimensioned Array with Variable Upper Bound </H3>This record is used to describe a dimensioned array with default lower bound and variable upper bound.  The default lower bound is language specific.</P>
<P></P>

<TABLE COLS="4" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="77pt" VALIGN="TOP"><COL WIDTH="63pt" VALIGN="TOP"><COL WIDTH="63pt" VALIGN="TOP"><COL WIDTH="58pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>4</P></TD><TD VALIGN="TOP"><P>4</P></TD><TD VALIGN="TOP"><P>rank</P></TD></TR><TR><TD VALIGN="TOP"><P>LF_DIMVARU</P></TD><TD VALIGN="TOP"><P>rank</P></TD><TD VALIGN="TOP"><P>@index</P></TD><TD VALIGN="TOP"><P>@var</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P><I>rank</I>    Number of dimensions</P>
<P><I>@index</I>    Type of the index</P>
<P><I>@var</I>    Array of type index of LF_REFSYM record describing the variable upper bound.  If one dimension of the array is variable, then all dimensions must be described using LF_REFSYM records.</P>
<H3><A NAME="sec10"></A>(0x020b) Dimensioned Array with Variable Lower and Upper Bounds </H3>This record is used to describe a dimensioned array with variable  lower and upper bound.  </P>
<P></P>

<TABLE COLS="4" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="86pt" VALIGN="TOP"><COL WIDTH="63pt" VALIGN="TOP"><COL WIDTH="63pt" VALIGN="TOP"><COL WIDTH="58pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>4</P></TD><TD VALIGN="TOP"><P>4</P></TD><TD VALIGN="TOP"><P>2*rank</P></TD></TR><TR><TD VALIGN="TOP"><P>LF_DIMVARLU</P></TD><TD VALIGN="TOP"><P>rank</P></TD><TD VALIGN="TOP"><P>@index</P></TD><TD VALIGN="TOP"><P>var</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P><I>rank</I>    Number of dimensions</P>
<P><I>@index</I>    Type of the index</P>
<P><I>@var</I>    Array of type indices of LF_REFSYM records describing the variable lower and upper bounds.  If one dimension of the array is variable, then all dimensions must be described using  LF_REFSYM records.  The order is lower bound followed by upper bound for each dimension.</P>
<H3><A NAME="sec11"></A>(0x020c) Referenced Symbol </H3>This record is used to describe a symbol that is referenced by a type record.  The record is defined because type records cannot reference symbols or locations in the $$SYMBOLS table because global symbol compaction will move symbols.</P>
<P></P>

<TABLE COLS="2" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="117pt" VALIGN="TOP"><COL WIDTH="90pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>*</P></TD></TR><TR><TD VALIGN="TOP"><P>LF_REFSYM</P></TD><TD VALIGN="TOP"><P>sym</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P><I>sym</I>    Copy of the referenced symbol including the length field</P></BODY></HTML>

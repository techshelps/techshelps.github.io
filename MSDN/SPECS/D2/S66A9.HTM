<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Subfields of complex lists</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
</OBJECT></FORM>
<H2>Subfields of complex lists</H2>Currently, the only complex list that uses the following leaf indices is the field list of a structure, class, union, or enumeration.</P>
<H3><A NAME="sec0"></A>(0x1400) Real Base Class </H3>This leaf specifies an real base class.  If a class inherits real base classes, the corresponding REAL Base Class records will precede all other member records in the field list of that class.  Base class records are emitted in left to right declaration order for real bases.</P>

<TABLE COLS="4" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="68pt" VALIGN="TOP"><COL WIDTH="58pt" VALIGN="TOP"><COL WIDTH="58pt" VALIGN="TOP"><COL WIDTH="58pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>42</P></TD><TD VALIGN="TOP"><P>*</P></TD></TR><TR><TD VALIGN="TOP"><P>LF_BCLASS</P></TD><TD VALIGN="TOP"><P>attribute</P></TD><TD VALIGN="TOP"><P>@type</P></TD><TD VALIGN="TOP"><P>offset</P></TD></TR></TBODY></TABLE>
<BR></P><P><I></I></P>
<P>attribute    Member attribute bit field </P>
<P><I>@type</I>    Index to type record of the class.  The class name can be obtained from this record.</P>
<P><I>offset</I>    Offset of subobject that represents the base class within the structure.</P>
<H3><A NAME="sec1"></A>(0x1401) Direct Virtual Base Class </H3>This leaf specifies directly inherited virtual base class.  If a class directly inherits virtual base classes, the corresponding Direct Virtual BaseClass records will follow all Real Base Class member records and precede all other member records in the field list of that class.  Direct Virtual Base class records are emitted in bottommost left-to-right inheritance order for directly inherited virtual bases.</P>

<TABLE COLS="6" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="77pt" VALIGN="TOP"><COL WIDTH="54pt" VALIGN="TOP"><COL WIDTH="54pt" VALIGN="TOP"><COL WIDTH="54pt" VALIGN="TOP"><COL WIDTH="49pt" VALIGN="TOP"><COL WIDTH="54pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>4</P></TD><TD VALIGN="TOP"><P>4</P></TD><TD VALIGN="TOP"><P>*</P></TD><TD VALIGN="TOP"><P>*</P></TD></TR><TR><TD VALIGN="TOP"><P>LF_VBCLASS </P></TD><TD VALIGN="TOP"><P>attribute</P></TD><TD VALIGN="TOP"><P>@btype</P></TD><TD VALIGN="TOP"><P>@vbtype</P></TD><TD VALIGN="TOP"><P>vbpoff</P></TD><TD VALIGN="TOP"><P>vboff</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P><I>attribute</I>    Member attribute bit field</P>
<P><I>@btype</I>    Index to type record of the direct or indirect virtual base class.  The class name can be obtained from this record.</P>
<P><I>@vbptype</I>    Type index of the virtual base pointer for this base</P>
<P><I>vbpoff</I>     Numeric leaf specifying the offset of the virtual base pointer from the address point of the class for this virtual base</P>
<P><I>vboff</I>    Numeric leaf specifying the index into the virtual base displacement  table of the entry that contains the displacement of the virtual base.  The displacement is relative to the address point of the class plus <I>vbpoff</I>.</P>
<H3><A NAME="sec2"></A>(0x1402) Indirect Virtual Base Class </H3>This leaf specifies indirectly inherited virtual base class.  If a class indirectly inherits virtual base classes, the corresponding Indirect Virtual Base Class records will follow all Real Base Class and Direct Virtual Base Class member records and precede all other member records in the field list of that class.  Direct Virtual Base class records are emitted in bottommost left-to-right inheritance order for virtual bases.</P>

<TABLE COLS="6" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="77pt" VALIGN="TOP"><COL WIDTH="54pt" VALIGN="TOP"><COL WIDTH="54pt" VALIGN="TOP"><COL WIDTH="54pt" VALIGN="TOP"><COL WIDTH="49pt" VALIGN="TOP"><COL WIDTH="54pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>4</P></TD><TD VALIGN="TOP"><P>4</P></TD><TD VALIGN="TOP"><P>*</P></TD><TD VALIGN="TOP"><P>*</P></TD></TR><TR><TD VALIGN="TOP"><P>LF_IVBCLASS</P></TD><TD VALIGN="TOP"><P>attribute</P></TD><TD VALIGN="TOP"><P>@btype</P></TD><TD VALIGN="TOP"><P>@vbtype</P></TD><TD VALIGN="TOP"><P>vbpoff</P></TD><TD VALIGN="TOP"><P>vboff</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P><I>attribute</I>    Member attribute bit field</P>
<P><I>@btype</I>    Index to type record of the direct or indirect virtual base class.  The class name can be obtained from this record.</P>
<P><I>@vbptype</I>    Type index of the virtual base pointer for this base</P>
<P><I>vbpoff</I>     Numeric leaf specifying the offset of the virtual base pointer from the address point of the class for this virtual base</P>
<P><I>vboff</I>    Numeric leaf specifying the index into the virtual base displacement  table of the entry that contains the displacement of the virtual base.  The displacement is relative to the address point of the class plus <I>vbpoff</I>.</P>
<H3><A NAME="sec3"></A>(0x0403) Enumeration  Name and Value </H3>This leaf specifies the name and value of an enumerate within an enumeration.</P>
</P>

<TABLE COLS="4" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="95pt" VALIGN="TOP"><COL WIDTH="63pt" VALIGN="TOP"><COL WIDTH="54pt" VALIGN="TOP"><COL WIDTH="54pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>*</P></TD><TD VALIGN="TOP"><P>*</P></TD></TR><TR><TD VALIGN="TOP"><P>LF_ENUMERATE</P></TD><TD VALIGN="TOP"><P>attribute</P></TD><TD VALIGN="TOP"><P>value</P></TD><TD VALIGN="TOP"><P>name</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P><I>attribute</I>    Member attribute bit field </P>
<P><I>value</I>    Numeric leaf specifying the value of enumerate</P>
<P><I>name</I>    Length-prefixed name of the member field.</P>
<H3><A NAME="sec4"></A>(0x1403) Friend Function </H3>This leaf specifies a friend function</P>

<TABLE COLS="4" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="89pt" VALIGN="TOP"><COL WIDTH="45pt" VALIGN="TOP"><COL WIDTH="45pt" VALIGN="TOP"><COL WIDTH="45pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>4</P></TD><TD VALIGN="TOP"><P>*</P></TD></TR><TR><TD VALIGN="TOP"><P>LF_FRIENDFCN</P></TD><TD VALIGN="TOP"><P>pad0</P></TD><TD VALIGN="TOP"><P>@type</P></TD><TD VALIGN="TOP"><P>name</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P><I>pad0</I>    Two bytes of padding for native alignment on type index to follow, must be 0.</P>
<P><I>@type</I>    Index to type record of the friend  function. </P>
<P><I>name</I>    Length prefixed name of friend function</P>
<P><I></I></P>
<H3><A NAME="sec5"></A>(0x1404) Index To Another Type Record </H3>
<TABLE COLS="3" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="77pt" VALIGN="TOP"><COL WIDTH="58pt" VALIGN="TOP"><COL WIDTH="58pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>4</P></TD></TR><TR><TD VALIGN="TOP"><P>LF_INDEX</P></TD><TD VALIGN="TOP"><P>pad0</P></TD><TD VALIGN="TOP"><P>@index</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P><I>pad0</I>    Two bytes of padding for native alignment on type index to follow, must be 0.</P>
<P><I>index</I>    Type index. This field is emitted by the compiler when a complex list needs to be split during writing.  </P>
<H3><A NAME="sec6"></A>(0x1405) Data Member </H3>This leaf specifies nonstatic data members of a class.</P>
</P>

<TABLE COLS="5" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="86pt" VALIGN="TOP"><COL WIDTH="54pt" VALIGN="TOP"><COL WIDTH="54pt" VALIGN="TOP"><COL WIDTH="45pt" VALIGN="TOP"><COL WIDTH="54pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>4</P></TD><TD VALIGN="TOP"><P>*</P></TD><TD VALIGN="TOP"><P>*</P></TD></TR><TR><TD VALIGN="TOP"><P>LF_MEMBER</P></TD><TD VALIGN="TOP"><P>attribute</P></TD><TD VALIGN="TOP"><P>@type</P></TD><TD VALIGN="TOP"><P>offset</P></TD><TD VALIGN="TOP"><P>name</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P><I>attribute</I>    Member attribute bit field</P>
<P><I>@type</I>    Index to type record for field</P>
<P><I>offset</I>     Numeric leaf specifying the offset of field in the structure</P>
<P><I>name</I>    Length-prefixed name of the member field</P>
<H3><A NAME="sec7"></A>(0x1406) Static Data Member </H3>This leaf specifies static data member of a class.  Once a static data member has been found in this list, its symbol is found by qualifying the name with its class (T::name) and then searching the symbol table for a symbol by that name with the correct type index.</P>
</P>
</P>

<TABLE COLS="4" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="86pt" VALIGN="TOP"><COL WIDTH="54pt" VALIGN="TOP"><COL WIDTH="54pt" VALIGN="TOP"><COL WIDTH="67pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>4</P></TD><TD VALIGN="TOP"><P>*</P></TD></TR><TR><TD VALIGN="TOP"><P>LF_STMEMBER</P></TD><TD VALIGN="TOP"><P>attribute</P></TD><TD VALIGN="TOP"><P>@type</P></TD><TD VALIGN="TOP"><P>name</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P><I>@type</I>    Index to type record for field</P>
<P><I>attribute</I>    Member attribute bit field</P>
<P><I>name</I>    Length-prefixed name of the member field.</P>
<H3><A NAME="sec8"></A>(0x1407) Method </H3>This leaf specifies the  overloaded member functions of a class.  This type record can also be used to specify a non-overloaded method but is inefficient.  The LF_ONEMETHOD record should be used for non-overloaded methods.</P>
</P>

<TABLE COLS="4" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="58pt" VALIGN="TOP"><COL WIDTH="49pt" VALIGN="TOP"><COL WIDTH="49pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>4</P></TD><TD VALIGN="TOP"><P>*</P></TD></TR><TR><TD VALIGN="TOP"><P>LF_METHOD</P></TD><TD VALIGN="TOP"><P>count</P></TD><TD VALIGN="TOP"><P>@mList</P></TD><TD VALIGN="TOP"><P>name</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P><I>count </I>    Number of occurrences of function within the class.  If the function is overloaded then there will be multiple entries in the method list.</P>
<P><I>@mList</I>    Type index of method list</P>
<P><I>name</I>    Length-prefixed name of method</P>
<H3><A NAME="sec9"></A>(0x1408) Nested Type Definition </H3>This leaf specifies nested type definition with classes, structures, unions, or enums.</P>
</P>

<TABLE COLS="4" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="95pt" VALIGN="TOP"><COL WIDTH="58pt" VALIGN="TOP"><COL WIDTH="58pt" VALIGN="TOP"><COL WIDTH="49pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>4</P></TD><TD VALIGN="TOP"><P>*</P></TD></TR><TR><TD VALIGN="TOP"><P>LF_NESTEDTYPE</P></TD><TD VALIGN="TOP"><P>pad0</P></TD><TD VALIGN="TOP"><P>@index</P></TD><TD VALIGN="TOP"><P>name</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P><I>pad0</I>    Two bytes of padding for native alignment on type index to follow, must be 0.</P>
<P><I>@index</I>    Type index of nested type</P>
<P><I>name</I>    Length-prefixed name of type</P>
<H3><A NAME="sec10"></A>(0x1409) Virtual Function Table Pointer </H3>This leaf specifies virtual table pointers within the class.  It is a requirement that this record be emitted in the field list before any virtual functions are emitted to the field list.</P>

<TABLE COLS="3" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="86pt" VALIGN="TOP"><COL WIDTH="58pt" VALIGN="TOP"><COL WIDTH="58pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>4</P></TD></TR><TR><TD VALIGN="TOP"><P>LF_VFUNCTAB</P></TD><TD VALIGN="TOP"><P>pad0</P></TD><TD VALIGN="TOP"><P>@type</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P><I>pad0</I>    Two bytes of padding for native alignment on type index to follow, must be 0.</P>
<P><I>@type</I>    Index to the pointer  record describing the pointer.  The pointer  will in turn have a LF_VTSHAPE type record as the underlying type.  Note that the offset of the virtual function table pointer from the address point of the class is always zero.</P>
<H3><A NAME="sec11"></A>(0x040b) Friend Class </H3>This leaf specifies a friend class.</P>

<TABLE COLS="3" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="89pt" VALIGN="TOP"><COL WIDTH="45pt" VALIGN="TOP"><COL WIDTH="45pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>4</P></TD></TR><TR><TD VALIGN="TOP"><P>LF_FRIENDCLS</P></TD><TD VALIGN="TOP"><P>pad0</P></TD><TD VALIGN="TOP"><P>@type</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P><I>pad0</I>    Two bytes of padding for native alignment on type index to follow, must be 0.</P>
<P><I>@type</I>    Index to type record of the friend class.  The name of the class can be obtained from the referenced record.</P>
<H3><A NAME="sec12"></A>(0x140b) One Method </H3>This record is used to specify a method of a class that is not overloaded.</P>
</P>

<TABLE COLS="5" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="93pt" VALIGN="TOP"><COL WIDTH="67pt" VALIGN="TOP"><COL WIDTH="53pt" VALIGN="TOP"><COL WIDTH="45pt" VALIGN="TOP"><COL WIDTH="45pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>4</P></TD><TD VALIGN="TOP"><P>4</P></TD><TD VALIGN="TOP"><P>*</P></TD></TR><TR><TD VALIGN="TOP"><P>LF_ONEMETHOD</P></TD><TD VALIGN="TOP"><P>attribute</P></TD><TD VALIGN="TOP"><P>@type</P></TD><TD VALIGN="TOP"><P>vbaseoff</P></TD><TD VALIGN="TOP"><P>name</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P><I>attribute</I>    Method attribute</P>
<P><I>@type</I>    Type index of method</P>
<P><I>vbaseoff</I>    Offset in virtual function table if introducing virtual method.  If the method is not an introducing virtual, then this field is not present.</P>
<P><I>name</I>    Length prefixed name of method</P>
</P>
<H3><A NAME="sec13"></A>(0x140c) Virtual Function Offset </H3>This record is used to specify a virtual function table pointer at a non-zero offset relative to the address point of a class.</P>
</P>

<TABLE COLS="4" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="93pt" VALIGN="TOP"><COL WIDTH="56pt" VALIGN="TOP"><COL WIDTH="56pt" VALIGN="TOP"><COL WIDTH="59pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>4</P></TD><TD VALIGN="TOP"><P>4</P></TD></TR><TR><TD VALIGN="TOP"><P>LF_VFUNCOFF</P></TD><TD VALIGN="TOP"><P>pad0</P></TD><TD VALIGN="TOP"><P>@type</P></TD><TD VALIGN="TOP"><P>offset</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P><I>pad0</I>    Two bytes of padding for native alignment on type index to follow, must be 0.</P>
<P><I>@type</I>    Type index of virtual function table pointer</P>
<P><I>offset</I>    Offset of virtual function table pointer relative to address point of class.</P>
<H3><A NAME="sec14"></A>(0x140d) Nested Type Extended Definition </H3>This leaf specifies nested type definition with classes, structures, unions, or enums and includes the protection attributes that are missing in LF_NESTEDTYPE.</P>
</P>

<TABLE COLS="4" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="104pt" VALIGN="TOP"><COL WIDTH="48pt" VALIGN="TOP"><COL WIDTH="48pt" VALIGN="TOP"><COL WIDTH="60pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>4</P></TD><TD VALIGN="TOP"><P>*</P></TD></TR><TR><TD VALIGN="TOP"><P>LF_NESTEDTYPEEX</P></TD><TD VALIGN="TOP"><P>attribute</P></TD><TD VALIGN="TOP"><P>@type</P></TD><TD VALIGN="TOP"><P>name</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P><I>attribute    </I>Nested type attribute (protection fields are valid)</P>
<P><I>@type</I>    Type index of nested type</P>
<P><I>name</I>    Length-prefixed name of type</P>
<H3><A NAME="sec15"></A>(0x040f) Member Modification </H3>This leaf specifies the modification of the protection of a member or method in a sub class.</P>
</P>

<TABLE COLS="4" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="113pt" VALIGN="TOP"><COL WIDTH="46pt" VALIGN="TOP"><COL WIDTH="46pt" VALIGN="TOP"><COL WIDTH="57pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>4</P></TD><TD VALIGN="TOP"><P>*</P></TD></TR><TR><TD VALIGN="TOP"><P>LF_MEMBERMODIFY</P></TD><TD VALIGN="TOP"><P>attribute</P></TD><TD VALIGN="TOP"><P>@type</P></TD><TD VALIGN="TOP"><P>name</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P><I>attribute    </I>New protection attributes</P>
<P><I>@type</I>    Type index of base class that introduced the member</P>
<P><I>name</I>    Length-prefixed name of member</P>
</P></BODY></HTML>

<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Type String</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
</OBJECT></FORM>
<H2>Type String</H2>A type string is a series of consecutive leaf structures:</P>
</P>

<TABLE COLS="7" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="54pt" VALIGN="TOP"><COL WIDTH="40pt" VALIGN="TOP"><COL WIDTH="54pt" VALIGN="TOP"><COL WIDTH="40pt" VALIGN="TOP"><COL WIDTH="31pt" VALIGN="TOP"><COL WIDTH="45pt" VALIGN="TOP"><COL WIDTH="49pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>*</P></TD><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>*</P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>*</P></TD></TR><TR><TD VALIGN="TOP"><P>leaf</P></TD><TD VALIGN="TOP"><P>data</P></TD><TD VALIGN="TOP"><P>leaf</P></TD><TD VALIGN="TOP"><P>data</P></TD><TD VALIGN="TOP"><P>...</P></TD><TD VALIGN="TOP"><P>leaf</P></TD><TD VALIGN="TOP"><P>data</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P><I>leaf    </I>LF_... index, as described below</P>
<P><I>data    </I>Data specified to each leaf type</P>
<P></P>
No LF_... index can have a value of 0x0000.  The leaf indices are separated into four ranges according to the use of the type record.    The first range is for the type records that are directly referenced in symbols.  The second range is for type records that are not referenced by symbols but instead are referenced by other type records.  All type records must have a starting leaf index in these first two ranges.</P>
The third range of leaf indices is used to build up complex lists such as the field list of a class type record.  No type record can begin with one of the leaf indices in this range.</P>
The fourth ranges of type indices are used to represent numeric data in a symbol or type records.   These leaf indices are greater than 0x8000.  At the point that the type or symbol processor is expecting a numeric field, the next two bytes in the type record are examined.  If the value is less than 0x8000, then the two bytes contain the numeric value.  If the value is greater than 0x8000, then the data follows the leaf index in a format specified by the leaf index.  See the Section 4 for a detailed description of the numeric leaf indices.</P>
Because of the method used to maintain natural alignment in complex lists, no leaf index can have a value greater than or equal to 0xf000.  Also, no leaf index can have a value such that the least significant 8 bits of the value is greater than or equal to 0xf0.</P>
<I>*[Note: All type records that included one or more CV_typ_t fields have been renamed by having "_16t" appended to their original names.  For instance, the symbol record for LF_MODIFIER that included a 16-bit CV_typ_t (now known as CV_typ16_t) is now LF_MODIFIER_16t.  The records that were so changed all have indices (record type fields) with the 0x1000 bit set. Records that did not contain CV_typ_t fields were left unchanged.]</I></P>
Leaf indices for type records that can be referenced from symbols:</P>
<P>0x1001    LF_MODIFIER</P>
<P>0x1002    LF_POINTER</P>
<P>0x1003    LF_ARRAY</P>
<P>0x1004    LF_CLASS</P>
<P>0x1005    LF_STRUCTURE</P>
<P>0x1006    LF_UNION</P>
<P>0x1007    LF_ENUM</P>
<P>0x1008    LF_PROCEDURE</P>
<P>0x1009    LF_MFUNCTION</P>
<P>0x000a    LF_VTSHAPE</P>
<P>0x100a    LF_COBOL0</P>
<P>0x000c    LF_COBOL1</P>
<P>0x100b    LF_BARRAY</P>
<P>0x000e    LF_LABEL</P>
<P>0x000f    LF_NULL</P>
<P>0x0010    LF_NOTTRAN</P>
<P>0x100c    LF_DIMARRAY</P>
<P>0x100d    LF_VFTPATH</P>
<P>0x100e    LF_PRECOMP</P>
<P>0x0014    LF_ENDPRECOMP</P>
<P>0x100f    LF_OEM</P>
<P>0x0016    LF_TYPESERVER</P>
<P></P>
Leaf indices for type records that can be referenced from other type records:</P>
<P>0x1200    LF_SKIP</P>
<P>0x1201    LF_ARGLIST</P>
<P>0x1202    LF_DEFARG</P>
<P>0x1203    LF_FIELDLIST</P>
<P>0x1204    LF_DERIVED</P>
<P>0x1205    LF_BITFIELD</P>
<P>0x1206    LF_METHODLIST</P>
<P>0x1207    LF_DIMCONU</P>
<P>0x1208    LF_DIMCONLU</P>
<P>0x1209    LF_DIMVARU</P>
<P>0x120a    LF_DIMVARLU</P>
<P>0x020c    LF_REFSYM</P>
<P></P>
Leaf indices for fields of complex lists:</P>
<P>0x1400    LF_BCLASS</P>
<P>0x1401    LF_VBCLASS</P>
<P>0x1402    LF_IVBCLASS</P>
<P>0x0403    LF_ENUMERATE</P>
<P>0x1403    LF_FRIENDFCN</P>
<P>0x1404    LF_INDEX</P>
<P>0x1405    LF_MEMBER</P>
<P>0x1406    LF_STMEMBER</P>
<P>0x1407    LF_METHOD</P>
<P>0x1408    LF_NESTTYPE</P>
<P>0x1409    LF_VFUNCTAB</P>
<P>0x140a    LF_FRIENDCLS</P>
<P>0x140b    LF_ONEMETHOD</P>
<P>0x140c    LF_VFUNCOFF</P>
<P>0x140d    LF_NESTTYPEEX</P>
<P>0x140e    LF_MEMBERMODIFY</P>
<P></P>
Leaf indices for numeric fields of symbols and type records:</P>
<P>0x8000    LF_NUMERIC</P>
<P>0x8000    LF_CHAR</P>
<P>0x8001    LF_SHORT</P>
<P>0x8002    LF_USHORT</P>
<P>0x8003    LF_LONG</P>
<P>0x8004    LF_ULONG</P>
<P>0x8005    LF_REAL32</P>
<P>0x8006    LF_REAL64</P>
<P>0x8007    LF_REAL80</P>
<P>0x8008    LF_REAL128</P>
<P>0x8009    LF_QUADWORD</P>
<P>0x800a    LF_UQUADWORD</P>
<P>0x800b    LF_REAL48</P>
<P>0x800c    LF_COMPLEX32</P>
<P>0x800d    LF_COMPLEX64</P>
<P>0x800e    LF_COMPLEX80</P>
<P>0x800f    LF_COMPLEX128</P>
<P>0x8010    LF_VARSTRING</P>
<P></P>
<P>0xf0       LF_PAD0</P>
<P>0xf1      LF_PAD1</P>
<P>0xf2      LF_PAD2</P>
<P>0xf3      LF_PAD3</P>
<P>0xf4    LF_PAD4</P>
<P>0xf5    LF_PAD5</P>
<P>0xf6    LF_PAD6</P>
<P>0xf7    LF_PAD7</P>
<P>0xf8    LF_PAD8</P>
<P>0xf9    LF_PAD9</P>
<P>0xfa    LF_PAD10</P>
<P>0xfb    LF_PAD11</P>
<P>0xfc    LF_PAD12</P>
<P>0xfc    LF_PAD13</P>
<P>0xfe    LF_PAD14</P>
<P>0xff    LF_PAD15</P>
<H3><A NAME="sec0"></A>Member attribute field</H3>Several of the type records below reference a field attribute bit field.  This bit field has the following format:</P>
<P></P>
<P><I>access</I>    :2    Specifies the access protection of the item</P>
<P>    0    No access protection</P>
<P>    1    Private</P>
<P>    2    Protected</P>
<P>    3    Public</P>
<P></P>
<P><I>mprop</I>    :3    Specifies the properties for methods</P>
<P>    0    Vanilla method</P>
<P>    1    Virtual method</P>
<P>    2    Static method</P>
<P>    3    Friend method</P>
<P>    4    Introducing virtual method</P>
<P>    5    Pure virtual method</P>
<P>    6    Pure introducing virtual method</P>
<P>    7    Reserved</P>
<P></P>
<P><I>pseudo</I>    :1    True if the method is never instantiated by the compiler</P>
<P><I>noinherit</I>    :1    True if the class cannot be inherited</P>
<P><I>noconstruct</I>    :1    True if the class cannot be constructed</P>
<P><I>compgenx    </I>:1  True if the method is instantiated by the compiler</P>
<P><I>reserved</I>    :7</P>
</P></BODY></HTML>

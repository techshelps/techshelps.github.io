<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Debug Information Format</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
</OBJECT></FORM>
<H2>Debug Information Format</H2>The debug information format encompasses a block of data which goes into the .exe file at a location dependent upon the executable file format.  The version of the debug information is specified by a signature that is contained within the debug information.  The signature has the format  <B>NBxx</B>, where xx is the version number and have the following meanings.</P>
<P>NB00     Not supported</P>
<P>NB01    Not supported</P>
<P>NB02    Linked by a Microsoft LINK, version 5.10, or equivalent OEM linker</P>
<P>NB03    Not supported</P>
<P>NB04    Not supported</P>
<P>NB05    The signature emitted by LINK 5.20 and later linkers for a file before it has been packed.</P>
<P>NB06    Not supported.  </P>
<P>NB07     This signature is used for Quick C for Windows 1.0 only.</P>
<P>NB08    The signature CodeView 4.00 through CodeView 4.05 uses for a file after it has been packed.  CodeView 4.00 - 4.05 will not process a file that does not have this signature.</P>
<P>NB09    The signature for CodeView 4.10 for a file after it has been packed.  CodeView 4.10 will not process a file that does not have this signature.</P>
<P>NB10    The signature for an executable with the debug information stored in a separate PDB file. Corresponds with the formats set forth in NB09 or NB11.</P>
<P>NB11    The signature for Visual C++ 5.0 debug information that has been packed and bonded to the executable.  This includes all 32-bit type indices.</P>
</P>
The method for finding the debug information depends upon the executable format.  </P>
PE Format:</P>
For PE format executables, the base address <B>lfaBase</B> is found by examining the executable header.</P>
</P>

<TABLE COLS="2" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="126pt" VALIGN="TOP"><COL WIDTH="216pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>executable header</P></TD><TD VALIGN="TOP"><P>Contains pointer to debug information</P></TD></TR><TR><TD VALIGN="TOP"><P>executable code + ...</P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P><B>NBxx</B></P></TD><TD VALIGN="TOP"><P>Signature at <B>lfaBase</B></P></TD></TR><TR><TD VALIGN="TOP"><P>lfoDirectory</P></TD><TD VALIGN="TOP"><P>Offset of directory from base address (<B>lfoDir</B>) </P></TD></TR><TR><TD VALIGN="TOP"><P>Subsection tables</P></TD><TD VALIGN="TOP"><P>sstModule, sstType, sstLibraries, ...</P></TD></TR><TR><TD VALIGN="TOP"><P>.</P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>.</P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>.</P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>Subsection Directory</P></TD><TD VALIGN="TOP"><P>At file offset <B>lfaBase + lfoDir</B></P></TD></TR><TR><TD VALIGN="TOP"><P>other information</P></TD><TD VALIGN="TOP"><P><B></B></P></TD></TR></TBODY></TABLE>
<BR></P></P>
All other file offsets in the Symbol and Type OMF are relative to <B>lfaBase</B>.  At the base address the signature is repeated, followed by the long displacement to the subsection directory (<B>lfoDir</B>).  All subsections start on a long word boundary and are designed to maintain natural alignment internally in each subsection and within the subsection directory.</P></BODY></HTML>

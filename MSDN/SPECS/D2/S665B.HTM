<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Non-modal Symbols</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
</OBJECT></FORM>
<H2>Non-modal Symbols</H2></P>
<H3><A NAME="sec0"></A>(0x0001) Compile Flag </H3>This symbol communicates to CodeView compile time information on a per module basis, such as the language and version number of the language processor , the ambient model for code and data, and the target processor.  </P>
</P>

<TABLE COLS="5" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="54pt" VALIGN="TOP"><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="67pt" VALIGN="TOP"><COL WIDTH="67pt" VALIGN="TOP"><COL WIDTH="67pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>1</P></TD><TD VALIGN="TOP"><P>3</P></TD><TD VALIGN="TOP"><P>*</P></TD></TR><TR><TD VALIGN="TOP"><P>length</P></TD><TD VALIGN="TOP"><P>S_COMPILE</P></TD><TD VALIGN="TOP"><P>machine</P></TD><TD VALIGN="TOP"><P>flags</P></TD><TD VALIGN="TOP"><P>version</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P><I>machine</I>    enumeration specifying target processor.  Values not specified below are reserved.</P>
<P>    0x00    Intel 8080</P>
<P>    0x01    Intel 8086</P>
<P>    0x02    Intel 80286</P>
<P>    0x03    Intel 80386</P>
<P>    0x04    Intel 80486</P>
<P>    0x05    Intel Pentium<BR>0x06    Intel Pentium Pro</P>
<P>    0x10    MIPS R4000</P>
<P>    0x11    Reserved for future MIPS processor</P>
<P>    0x12    Reserved for future MIPS processor</P>
<P>    0x20    MC68000</P>
<P>    0x21    MC68010</P>
<P>    0x22    MC68020</P>
<P>    0x23    MC68030</P>
<P>    0x24    MC68040</P>
<P>    0x30    DEC Alpha<BR>0x40    PPC601<BR>0x41    PPC603<BR>0x42    PPC604<BR>0x43    PPC620</P>
<P></P>
<P></P>
<P><I>flags</I>     flags showing compile time options</P>
<P>    Language            :8<BR>PCodePresent        :1</P>
<P>    FloatPrecision        :2<BR>FloatPackage        :2<BR>AmbientData        :3<BR>AmbientCode        :3</P>
<P>    Mode32            :1    Compiled for 32 bit addresses<BR>Reserved            :4<BR></P>
<P>    Language enumeration</P>
<P>    0        C<BR>1        C++<BR>2        Fortran<BR>3        Masm<BR>4        Pascal<BR>5        Basic<BR>6        Cobol<BR>7 - 255    Reserved</P>
<P></P>
<P>    Ambient code and data memory model enumeration</P>
<P>    0        Near</P>
<P>    1        Far<BR>2        Huge</P>
<P>    3 - 7    Reserved</P>
<P></P>
<P>    Floating package enumeration</P>
<P>    0        Hardware processor (80x87 for Intel 80x86 processors)<BR>1        Emulator<BR>2        Altmath</P>
<P>    3        Reserved</P>
<P></P>
<P>    The FloatPrecision flag is set  to 1 if the compiler follows the ANSI C floating point precision rules.  This is specified to Microsoft C compilers by setting the -Op option.</P>
<P></P>
<P><I>version</I>    Length-prefixed string specifying language processor  version.  Language processors  can place additional data in version string if desired.</P>
<H3><A NAME="sec1"></A>(0x1001) Register </H3>This symbol record describes a symbol that has been enregistered.  Provisions for enabling future implementation tracking of a symbol into and out of registers is  provided in this symbol.  When the symbol processor is examining a register symbol, the length field of the symbol is compared with the offset of the byte following the symbol name field.  If these are the same, there is no register tracking information.  If the length and offset are different, the byte following the end of the symbol name is examined.  If the byte is zero, there is no register tracking information following the symbol.  If the byte is not zero, then the byte indexes into the list of stack machine implementations and styles of register tracking. Microsoft does not currently emit or process register tracking information. </P>

<TABLE COLS="6" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="59pt" VALIGN="TOP"><COL WIDTH="85pt" VALIGN="TOP"><COL WIDTH="47pt" VALIGN="TOP"><COL WIDTH="51pt" VALIGN="TOP"><COL WIDTH="50pt" VALIGN="TOP"><COL WIDTH="67pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>4</P></TD><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>*</P></TD><TD VALIGN="TOP"><P>*</P></TD></TR><TR><TD VALIGN="TOP"><P>length</P></TD><TD VALIGN="TOP"><P>S_REGISTER</P></TD><TD VALIGN="TOP"><P>@type </P></TD><TD VALIGN="TOP"><P>register </P></TD><TD VALIGN="TOP"><P>name</P></TD><TD VALIGN="TOP"><P>tracking</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P><I>@type</I>    The type of the symbol</P>
<P><I>register</I>    Enumerate  of the registers in which the symbol value is stored.  This field is treated as two bytes.  The high order byte specifies the register in which the high order  part of the value is stored.  The low byte specifies the register for the low order part of the value.  If the value is not stored in two registers then high order regisr field contains the enumerate value for no register.   For register enumeration values, see Section 6.  The register index enumeration is specific to the processor model for the module.</P>
<P><I>name</I>    Length-prefixed name of the symbol stored in the register</P>
<P><I>tracking</I>    Register tracking information.  Format unspecified.</P>
<H3><A NAME="sec2"></A>(0x1002) Constant </H3>This record is used to output constants and C enumerations.  If used to output an enumeration, then the type index refers to the containing enum.</P>
</P>

<TABLE COLS="5" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="45pt" VALIGN="TOP"><COL WIDTH="81pt" VALIGN="TOP"><COL WIDTH="58pt" VALIGN="TOP"><COL WIDTH="54pt" VALIGN="TOP"><COL WIDTH="49pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>4</P></TD><TD VALIGN="TOP"><P>*</P></TD><TD VALIGN="TOP"><P>*</P></TD></TR><TR><TD VALIGN="TOP"><P>length</P></TD><TD VALIGN="TOP"><P>S_CONSTANT</P></TD><TD VALIGN="TOP"><P>@type</P></TD><TD VALIGN="TOP"><P>value</P></TD><TD VALIGN="TOP"><P>name</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P><I>@type    </I>Type of symbol or containing enum</P>
<P><I>value    </I>Numeric leaf containing the value of symbol </P>
<P><I>name    </I>Length-prefixed name of symbol</P>
<H3><A NAME="sec3"></A>(0x1003) User-defined type </H3>This specifies a C typedef or user-defined type, such as classes, structures, unions, or enums.  </P>

<TABLE COLS="4" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="59pt" VALIGN="TOP"><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="76pt" VALIGN="TOP"><COL WIDTH="58pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>4</P></TD><TD VALIGN="TOP"><P>*</P></TD></TR><TR><TD VALIGN="TOP"><P>length</P></TD><TD VALIGN="TOP"><P>S_UDT</P></TD><TD VALIGN="TOP"><P>@type </P></TD><TD VALIGN="TOP"><P>name</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P><I>@type     </I>Type of symbol</P>
<P><I>name    </I>Length-prefixed name of the user defined type</P>
<H3><A NAME="sec4"></A>(0x0005) Start Search </H3>These records are always the first symbol records in a module's $$SYMBOL section.  There is one Start Search symbol for each segment (PE section) to which the module contributes code. Each Start Search symbol contains the segment (PE section) number and $$SYMBOL offset of the record of the outermost lexical scope in this module that physically appears first in the specified segment of the load image.  This referenced symbol is the symbol used to initiate context searches within this module.  The Start Search symbols are inserted into the $$SYMBOLS table by CVPACK and must not be emitted by the language processor.</P>
<B>/* M00 REVIEW - Davidgra: are scopes sorted into offset order */</B></P>
</P>

<TABLE COLS="4" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="41pt" VALIGN="TOP"><COL WIDTH="76pt" VALIGN="TOP"><COL WIDTH="63pt" VALIGN="TOP"><COL WIDTH="58pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>4</P></TD><TD VALIGN="TOP"><P>2</P></TD></TR><TR><TD VALIGN="TOP"><P>length</P></TD><TD VALIGN="TOP"><P>S_SSEARCH</P></TD><TD VALIGN="TOP"><P>sym off</P></TD><TD VALIGN="TOP"><P>segment</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P><I>sym off</I>    $$SYMBOL offset of the procedure or thunk record for this module that has the lowest offset for the specified segment.  See Section 1.2 on lexical scope linking.</P>
<P><I>segment</I>     Segment (PE section) that this Start Search refers to</P>
<H3><A NAME="sec5"></A>(0x0006) End of Block </H3>Closes the scope of the nearest preceding Block Start, Global Procedure Start, Local Procedure Start, With Start, or Thunk Start definition.</P>
</P>

<TABLE COLS="2" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="63pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>2</P></TD></TR><TR><TD VALIGN="TOP"><P>length</P></TD><TD VALIGN="TOP"><P>S_END</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<H3><A NAME="sec6"></A>(0x0007) Skip Record </H3>This record reserves symbol space for incremental compilers. The compiler can reserve a dead space in the OMF for future expansions due to an incremental build.  This symbol and the associated reserved space is removed by the CVPACK utility.</P>
</P>

<TABLE COLS="3" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="59pt" VALIGN="TOP"><COL WIDTH="76pt" VALIGN="TOP"><COL WIDTH="81pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>*</P></TD></TR><TR><TD VALIGN="TOP"><P>length</P></TD><TD VALIGN="TOP"><P>S_SKIP</P></TD><TD VALIGN="TOP"><P>skip data</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P><I>skip data</I>    Unused data. Use the length field that precedes every symbol record to skip this record.</P>
<H3><A NAME="sec7"></A>(0x0008) CodeView Internal </H3>The symbol is internally used by CodeView and never appears in the executable.  Its format is unspecified.</P>
<H3><A NAME="sec8"></A>(0x0009) Object File Name </H3>This symbol specifies the name of the object file for this module.</P>

<TABLE COLS="4" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="59pt" VALIGN="TOP"><COL WIDTH="76pt" VALIGN="TOP"><COL WIDTH="81pt" VALIGN="TOP"><COL WIDTH="81pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>4</P></TD><TD VALIGN="TOP"><P>*</P></TD></TR><TR><TD VALIGN="TOP"><P>length</P></TD><TD VALIGN="TOP"><P>S_OBJNAME</P></TD><TD VALIGN="TOP"><P>signature</P></TD><TD VALIGN="TOP"><P>name</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P><I>signature</I>    Signature for the CodeView information contained in this module.  If the object file contains precompiled types, then the signature will be checked against the signature in the LF_PRECOMP type record contained in the $$TYPES table for the user of the precompiled types.  The signature check is used to detect recompilation of the supplier of the precompiled types without recompilation of all of the users of the precompiled types.  The method for computing the signature is unspecified.  It should be sufficiently robust to detect failures to recompile.</P>
<P><I>name</I>    Length prefixed name of the object file without any path information prepended to the name.</P>
<H3><A NAME="sec9"></A>(0x000a) End of Arguments </H3>This symbol specifies the end of symbol records for the formal arguments for a function.  Use of this symbol is optional for OMF and is required for MIPS compiled code.  In OMF format, the end of arguments can also be deduced from the fact that arguments for a function have positive offset from the frame pointer.</P>

<TABLE COLS="2" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="77pt" VALIGN="TOP"><COL WIDTH="74pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>2</P></TD></TR><TR><TD VALIGN="TOP"><P>length</P></TD><TD VALIGN="TOP"><P>S_ENDARG</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<H3><A NAME="sec10"></A>(0x1004) COBOL User-defined Type </H3>This record is used to define a user-defined type for the Microfocus Cobol compiler.  This record cannot be moved into the global symbol table by CVPACK.</P>
</P>

<TABLE COLS="4" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="77pt" VALIGN="TOP"><COL WIDTH="77pt" VALIGN="TOP"><COL WIDTH="77pt" VALIGN="TOP"><COL WIDTH="77pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>4</P></TD><TD VALIGN="TOP"><P>*</P></TD></TR><TR><TD VALIGN="TOP"><P>length</P></TD><TD VALIGN="TOP"><P>S_COBOLUDT</P></TD><TD VALIGN="TOP"><P>@type</P></TD><TD VALIGN="TOP"><P>name</P></TD></TR></TBODY></TABLE>
<BR></P><P><I></I></P>
<P>@type     Type of symbol</P>
<P><I>name    </I>Length-prefixed name of the user defined type</P>
<H3><A NAME="sec11"></A>(0x1005) Many Registers </H3>This record is used to specify that a symbol is stored in a set of registers.  </P>
</P>

<TABLE COLS="6" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="77pt" VALIGN="TOP"><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="56pt" VALIGN="TOP"><COL WIDTH="47pt" VALIGN="TOP"><COL WIDTH="53pt" VALIGN="TOP"><COL WIDTH="54pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>4</P></TD><TD VALIGN="TOP"><P>1</P></TD><TD VALIGN="TOP"><P>1 * count</P></TD><TD VALIGN="TOP"><P>*</P></TD></TR><TR><TD VALIGN="TOP"><P>length</P></TD><TD VALIGN="TOP"><P>S_MANYREG</P></TD><TD VALIGN="TOP"><P>@type</P></TD><TD VALIGN="TOP"><P>count</P></TD><TD VALIGN="TOP"><P>reglist</P></TD><TD VALIGN="TOP"><P>name</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P><I>@type</I>    Type index of the symbol</P>
<P><I>count</I>    Count of the register enumerates that follow</P>
<P><I>reglist</I>    List of registers in which the symbol is stored.  The registers are listed high order register first.</P>
<P><I>name</I>    Name of the symbol</P>
</P>
<H3><A NAME="sec12"></A>(0x000d) Function Return </H3>This symbol us used to describe how a function is called, the return value if any is returned and how the stack is cleaned up.</P>
</P>

<TABLE COLS="5" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="77pt" VALIGN="TOP"><COL WIDTH="74pt" VALIGN="TOP"><COL WIDTH="63pt" VALIGN="TOP"><COL WIDTH="58pt" VALIGN="TOP"><COL WIDTH="74pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>1</P></TD><TD VALIGN="TOP"><P>*</P></TD></TR><TR><TD VALIGN="TOP"><P>length</P></TD><TD VALIGN="TOP"><P>S_RETURN</P></TD><TD VALIGN="TOP"><P>flags</P></TD><TD VALIGN="TOP"><P>style</P></TD><TD VALIGN="TOP"><P>data</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P><I>flags</I>    Flags for function call</P>
<P>        cstyle    :1    push varargs right to left if true</P>
<P>        rsclean    :1    returnee stack cleanup if true</P>
<P>        unused    :14</P>
<P><I>style</I>    Function return style</P>
<P>        0x00        void return</P>
<P>        0x01     return value is in registers specified in <I>data</I></P>
<P>        0x02        indirect caller allocated near</P>
<P>        0x03        indirect caller allocated far</P>
<P>        0x04        indirect returnee allocated near</P>
<P>        0x05        indirect returnee allocated far</P>
<P><I>data</I>    Data required by function return style.</P>
<P>    If <I>style</I> is 0x01, then data is the format  </P>
<P></P>

<TABLE COLS="2" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="53pt" VALIGN="TOP"><COL WIDTH="54pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>1</P></TD><TD VALIGN="TOP"><P>1 * count</P></TD></TR><TR><TD VALIGN="TOP"><P>count</P></TD><TD VALIGN="TOP"><P>reglist</P></TD></TR></TBODY></TABLE>
<BR></P><P>            </P>
<P>            <I>count</I>    Count of the number of registers</P>
<P>            <I>reglist</I>    Registers (high order first) containing the value</P>
<H3><A NAME="sec13"></A>(0x000e) this at Method Entry </H3>This record is used to describe the <B>this</B> pointer at entry to a method.  It is really a wrapper for another symbol that describes the <B>this</B> pointer.</P>
</P>

<TABLE COLS="3" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="77pt" VALIGN="TOP"><COL WIDTH="77pt" VALIGN="TOP"><COL WIDTH="77pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>*</P></TD></TR><TR><TD VALIGN="TOP"><P>length</P></TD><TD VALIGN="TOP"><P>S_ENTRYTHIS</P></TD><TD VALIGN="TOP"><P>symbol</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>
<P><I>symbol</I>    Full symbol including length and symbol type fields that describes the <B>this</B> pointer.</P></BODY></HTML>

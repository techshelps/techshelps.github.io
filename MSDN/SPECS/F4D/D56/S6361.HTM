<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>4.5  Patch table</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
</OBJECT></FORM>
<H3>4.5  Patch table</H3>Patching a bitmap data means to set patch information into a patch table against a virtual bitmap index table.</P>
<H4><A NAME="sec0"></A>4.5.1  Virtual bitmap index table</H4>A virtual bitmap index table consists of the following three tables.  <B><I>No RASTEL font file contain the virtual bitmap index table but the program that accesses the font file will build it on memory</I></B>.</P>
<P>1.    SBCS character index</P>
It stores the character bitmap index of SBCS character codes from 0 to 255.  The definition is as follows:</P>
<SPAN CLASS="list"><UL><LI>  </LI><LI>typedef struct {</LI><LI>      USHORT SegmentNumber;</LI><LI>// Set the segment number including the character bitmap.</LI><LI> </LI><LI>      USHORT OffsetInSegment;</LI><LI>    // This member is the offset value in the character bitmap segment.  </LI><LI></LI><LI>} BITMAP_INDEX;</LI><LI>    </LI><LI>BITMAP_INDEX SBCS_INDEX[256];</LI></UL></SPAN><P>2.    First DBCS character width table</P>
This is a character table for 7936 characters with lead bytes of 0x81 through 0x9F in Shift JIS code.  The index definition of the array is given below.</P>
The first subscript is the value "lead byte - 0x81".  The second subscript is the value "trailer byte - 0x40".</P>
<SPAN CLASS="list"><UL><LI>  </LI><LI>    BITMAP_INDEX DBCS_1st_Index[0x9f-0x81+1][0xfc-0x40+1];</LI></UL></SPAN><P>3.    Second DBCS character width table</P>
This is a character table for 7424 characters with lead bytes of 0xE0 through 0xFC in Shift JIS code.  The index definition of the array is given below.</P>
The first subscript is the value "lead byte - 0xe0".  The second subscript is the value "trailer byte - 0x40".</P>
<SPAN CLASS="list"><UL><LI> </LI><LI>     BITMAP_INDEX DBCS_2st_Index[0xfc-0xe0+1][0xfc+0x40+1];</LI><LI>In short, the virtual bitmap index table is defined as the following format:</P></LI><LI> typedef struct {</LI><LI>      BITMAP_INDEX SBCS_Index[256];</LI><LI>      BITMAP_INDEX DBCS_1st-Index[0x9f-0x81+1][0xfc-0x40+1];</LI><LI>      BITMAP_INDEX DBCS_2nd_Index[0xfc-0xe0+1][0xfc-0x40+1];</LI><LI></LI><LI>} BITMAP_INDEX_SEGMENT;</LI><LI></LI></UL></SPAN><H4><A NAME="sec1"></A>4.5.2  Patch table structure (Necessary)</H4>The definition of a patch table is given below.</P>
Information for one character is as follows:</P>
<BR></P>
<pre><code> typedef struct {
      USHORT OffsetInSegment;

The offset position in the virtual bitmap index table.
      
      BITMAP_INDEX TheIndex;

The content to substitute.

} ONE_PATCH;

typedef struct {
     USHORT NumberOfPatchs;
</code></pre>
Number of patches (0 if there is no character to patch)</P>
<BR></P>
<pre><code>      ONE_PATCH patchs[];    /* Repeated as many times as the number of patches */

Content of patch

} PATCH_TABLE;</code></pre></BODY></HTML>

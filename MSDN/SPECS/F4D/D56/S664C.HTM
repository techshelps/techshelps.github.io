<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>5.  Example of RASTEL font file (Standard Format)</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
</OBJECT></FORM>
<H2>5.  Example of RASTEL font file (Standard Format)</H2>The following describes an example of RASTEL font file that uses Standard Format. (See Fig. 5)</P>
There is no need to patch a virtual bitmap index table in case of a horizontal-writing character.  Therefore, the number of patches (NumberOfPatchs) in the patch table structure, as indicated at segment 0, is 0.  The size at segment 0 corresponds to the size of NumberOfPatchs, which is 2 bytes.  (See "Patch table structure" at Segment0 in Fig. 5.)</P>
For a vertical-writing character, bitmap data is usually generated by rotating the bitmap data of a horizontal-writing character by 90 degrees.  However, character that cannot be created from a horizontal-writing character needs to have separate bitmap data.  In this case, the patch table structure must be used for patching the virtual bitmap index table (this virtual bitmap index table is the same as the one for the virtual horizontal-writing character).  Patching the bitmap index table means the changing of the bitmap index of a character using patch information.  Different bitmap data can be assigned to the character by this change.  Bitmap data for a horizontal-writing character is stored sequentially starting from segment 3; therefore, bitmap data necessary for a vertical-writing character is added after the bitmap data for the horizontal-writing character. (See "Vertical-writing character patch bitmap data" in Figure 5.)</P>
The number of patches defined in the patch table structure is the number of characters to patch, i.e., the number of vertical-writing characters having bitmap data that differs from the horizontal-writing characters.  The patch table structure contains as many patch structures (ONE_PATCH structures) as the number of patches.  In each patch structure, OffsetInSegment specifies the offset position in the bitmap index table.  (See "Patch table structure" at Segment1 in Figure 5.)</P>
The program that accesses the font file will work so that the offset position is applied with the patch of the virtual bitmap index indicated by TheIndex.</P>
<P><img src="13082.gif">    </P>
<P>Figure 5  Example of RASTEL font file that uses Standard Format</P></BODY></HTML>

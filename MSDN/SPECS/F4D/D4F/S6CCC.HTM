<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Data Structures</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
</OBJECT></FORM>
<H2>Data Structures</H2>Since the LSAPI standard provides for multiple challenge/response protocols, it is necessary to have a basic data structure format along with a tag field which identifies the protocol being used. The Basic Challenge mechanism is tagged as LS_BASIC_PROTOCOL.</P>
<H3><A NAME="sec0"></A>LS_CHALLENGE</H3>The LS_CHALLENGE data structure is supported by all protocols. This structure is used for both the challenge and challenge response of LSRequest(), and LSUpdate().</P>
typedef struct {                       </P>
    LS_ULONG    Protocol;    // Specifies the protocol</P>
    LS_ULONG    Size;    // size of ChallengeData structure</P>
    LS_CHALLDATA    ChallengeData;    // challenge &amp; response</P>
} LS_CHALLENGE;</P>
</P>
<H3><A NAME="sec1"></A>LS_CHALLDATA</H3>This data structure is passed in the LS_CHALLENGE structure from the application to the license system.</P>
struct {        // Challenge for LS_BASIC_PROTOCOL is</P>
    LS_ULONG      SecretIndex;    // index of secret, X, </P>
    LS_ULONG      Random;    // a random 32-bit value, R</P>
    LS_MSG_DIGEST MsgDigest;    // the message digest h(in,R,S,Sx).</P>
} LS_CHALLDATA;</P>
</P>
</P>
<H3><A NAME="sec2"></A>LS_MSG_DIGEST</H3>The message digest structure is:</P>
typedef struct {</P>
    LS_UCHAR   MessageDigest[16];    // a 128-bit message digest</P>
} LS_MSG_DIGEST;</P>
</P>
</P></BODY></HTML>

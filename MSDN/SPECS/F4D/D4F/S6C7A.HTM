<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Licensing Function Calls</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
</OBJECT></FORM>
<H2>Licensing Function Calls</H2>The following calls support the primary functions of the licensing system.  They include the ability to request the licensing system to grant the application software rights to run, release those rights when they are no longer needed, and to update the state of the licensing resources granted to the software product.</P>
<H3><A NAME="sec0"></A>LSRequest()</H3>Request licensing resources needed to allow software to be used.</P>
<H4><A NAME="sec1"></A>Format</H4>Status =<I> </I><I>LSRequest</I><I>( [in] </I>LicenseSystem, <I>[in] </I>PublisherName, <I>[in] </I>ProductName,<I><BR>[in] </I>Version,<I> [in] </I>TotUnitsReserved, <I>[in] </I>LogComment,<BR><I>[in/out]</I> Challenge,<I> </I> <I>[out] </I>TotUnitsGranted,<I> [out] </I>hLicenseHandle <I>);</I></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="99pt" VALIGN="TOP"><COL WIDTH="86pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>LS_STR *</P></TD><TD VALIGN="TOP"><P><I>LicenseSystem;</I></P></TD></TR><TR><TD VALIGN="TOP"><P>LS_STR *</P></TD><TD VALIGN="TOP"><P><I>PublisherName;</I></P></TD></TR><TR><TD VALIGN="TOP"><P>LS_STR *</P></TD><TD VALIGN="TOP"><P><I>ProductName;</I></P></TD></TR><TR><TD VALIGN="TOP"><P>LS_STR *</P></TD><TD VALIGN="TOP"><P><I>Version;</I></P></TD></TR><TR><TD VALIGN="TOP"><P>LS_ULONG</P></TD><TD VALIGN="TOP"><P><I>TotUnitsReserved;</I></P></TD></TR><TR><TD VALIGN="TOP"><P>LS_STR *</P></TD><TD VALIGN="TOP"><P><I>LogComment;</I></P></TD></TR><TR><TD VALIGN="TOP"><P>LS_CHALLENGE *</P></TD><TD VALIGN="TOP"><P><I>Challenge;</I></P></TD></TR><TR><TD VALIGN="TOP"><P>LS_ULONG *</P></TD><TD VALIGN="TOP"><P><I>TotUnitsGranted;</I></P></TD></TR><TR><TD VALIGN="TOP"><P>LS_HANDLE *</P></TD><TD VALIGN="TOP"><P><I>hLicenseHandle;</I></P></TD></TR><TR><TD VALIGN="TOP"><P>LS_STATUS_CODE</P></TD><TD VALIGN="TOP"><P><I>Status;</I></P></TD></TR></TBODY></TABLE>
<BR></P><H4><A NAME="sec2"></A>Arguments</H4>
<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="288pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><I>LicenseSystem</I></P></TD><TD VALIGN="TOP"><P>Pointer to a string which uniquely identifies the particular license system. This may be obtained through the LSEnumProviders() API.  Normally, the constant LS_ANY is specified to indicate a match against all installed license systems (indicates that all license providers should be searched for a license match).</P></TD></TR><TR><TD VALIGN="TOP"><P><I>PublisherName</I></P></TD><TD VALIGN="TOP"><P>The name of the publisher (manufacturer) of this product.  This string may not be null and must be unique in the first 32 characters. It is recommended that a company name and trademark be used. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>ProductName</I></P></TD><TD VALIGN="TOP"><P>The name of the product requesting licensing resources.  This string may not be null and must be unique (in the first 32 characters) within the <I>PublisherName</I> domain. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>Version</I></P></TD><TD VALIGN="TOP"><P>The version number of this product. This string must be unique (in the first 12 characters) within the <I>ProductName</I> domain, and cannot be NULL</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>NOTE:    The arguments PublisherName, ProductName, and Version may not be NULL, or may not be LS_ANY. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>TotUn</I><I>itsReserved</I></P></TD><TD VALIGN="TOP"><P>Specifies the number of units required to run the application.  The software publisher may choose to specify this policy attribute within the application. The recommended value of LS_DEFAULT_UNITS allows the licensing system to determine the proper value using information provided by the license system or license itself. The license system verifies that the requested number of units exist and may reserve those units, but no units are actually consumed at this time. The number of units available is returned in <I>TotUnitsGranted</I>.</P></TD></TR><TR><TD VALIGN="TOP"><P><I>LogComment</I></P></TD><TD VALIGN="TOP"><P>An optional string indicating a comment to be associated with the request and logged (if logging is enabled and supported) by the underlying licensing system. The underlying license system may choose to log the comment even if an error is returned (i.e., logged with the error), but this is not guaranteed.  If a string is not specified, the value must be LS_NULL.</P></TD></TR><TR><TD VALIGN="TOP"><P><I>Challenge</I></P></TD><TD VALIGN="TOP"><P>Pointer to a challenge structure. The challenge response will also be returned in this structure. Refer to <I>Challenge Mechanism</I> on page 24 for more information.</P></TD></TR><TR><TD VALIGN="TOP"><P><I>TotUnitsGranted</I></P></TD><TD VALIGN="TOP"><P>A pointer to an LS_ULONG in which the total number of units granted is returned. The following table describes the <I>TotUnitsGranted</I> return value, given the <I>TotUnitsReserved</I> input value, and the <I>Status</I> returned:</P></TD></TR></TBODY></TABLE>
<BR></P></P>

<TABLE COLS="4" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="113pt" VALIGN="TOP"><COL WIDTH="81pt" VALIGN="TOP"><COL WIDTH="135pt" VALIGN="TOP"><COL WIDTH="72pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>TotUnitsReserved</P></TD><TD VALIGN="TOP"><P>LS_SUCCESS</P></TD><TD VALIGN="TOP"><P>LS_INSUFFICIENT_UNITS</P></TD><TD VALIGN="TOP"><P>Other errors</P></TD></TR><TR><TD VALIGN="TOP"><P>LS_DEFAULT_UNITS</P></TD><TD VALIGN="TOP"><P>(A)</P></TD><TD VALIGN="TOP"><P>(B)</P></TD><TD VALIGN="TOP"><P>(E)</P></TD></TR><TR><TD VALIGN="TOP"><P>Other (specific count)</P></TD><TD VALIGN="TOP"><P>(C)</P></TD><TD VALIGN="TOP"><P>(D)</P></TD><TD VALIGN="TOP"><P>(E)</P></TD></TR></TBODY></TABLE>
<BR></P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="288pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><I></I></P></TD><TD VALIGN="TOP"><P>(A)    The default umber of units commensurate with the license granted.</P>
<P>(B)    The maximum number of units available to the requesting software. This may be less than the normal default.</P>
<P>(C)    The number of units used to grant the request. Note that this value may be greater than or equal to  the actual units requested (i.e., the policy may allow only in increments of 5 units, thus a request of 7 units would result in 10 units being granted).</P>
<P>(D)    The maximum number of units available to the requesting software. This may be more or less than the units requested.</P>
<P>(E)    Zero is returned.</P></TD></TR><TR><TD VALIGN="TOP"><P><I>LicenseHandle</I></P></TD><TD VALIGN="TOP"><P>Pointer to a LS_HANDLE in which a handle to the license context is to be returned.</P></TD></TR><TR><TD VALIGN="TOP"><P><I>Status</I></P></TD><TD VALIGN="TOP"><P>Detailed error code that can be directly processed by the caller, or that can be converted into a localized message string by the LSGetMessage() function.</P></TD></TR></TBODY></TABLE>
<BR></P><H4><A NAME="sec3"></A>Description</H4>This function is used by the application to request licensing resources to allow the identified product to execute. If a valid license is found, the challenge response is computed and LS_SUCCESS is returned. At minimum, the <I>PublisherName</I>, <I>ProductName</I>, and <I>Version</I> strings are used to identify matching license(s). Note that an underlying license system service provider may ascertain additional information for the license request (e.g., the current username, machine name, etc.).</P>
A valid license handle is always returned by this function whether valid license resources are granted or not.  This handle must always be released with LSFreeHandle() when the application has completed execution.</P>
If license resources were granted, it must call LSRelease() to free the license resource, prior to calling LSFreeHandle().  </P>
A challenge response is NOT returned unless the license request completed successfully (i.e., a status code of LS_SUCCESS is returned).</P>
If the number of units requested is greater than the number of units available, then the license request is not granted. Upon successful completion, the value returned in <I>TotUnitsReserved</I> indicates the number of units granted. This is greater than or equal to the number of units requested unless LS_DEFAULT_UNITS was specified. In the case of failure, the value returned in <I>TotUnitsGranted </I>is zero.</P>
<H3><A NAME="sec4"></A>LSRelease()</H3>Release licensing resources associated with the specified context.</P>
<H4><A NAME="sec5"></A>Format</H4>Status = <I>LSRelease( </I><I>[in]</I> LicenseHandle<I>, [in] </I>TotUnitsConsumed,<I> [in] </I>LogComment <I>);</I></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="102pt" VALIGN="TOP"><COL WIDTH="108pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>LS_HANDLE</P></TD><TD VALIGN="TOP"><P>LicenseHandle;</P></TD></TR><TR><TD VALIGN="TOP"><P>LS_ULONG</P></TD><TD VALIGN="TOP"><P>TotUnitsConsumed;</P></TD></TR><TR><TD VALIGN="TOP"><P>LS_STR *</P></TD><TD VALIGN="TOP"><P>LogComment;</P></TD></TR><TR><TD VALIGN="TOP"><P>LS_STATUS_CODE</P></TD><TD VALIGN="TOP"><P>Status;</P></TD></TR></TBODY></TABLE>
<BR></P><H4><A NAME="sec6"></A>Arguments</H4>
<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="113pt" VALIGN="TOP"><COL WIDTH="288pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><I>LicenseHandle</I></P></TD><TD VALIGN="TOP"><P>Handle identifying the license context. This argument must be a handle that was created with LSRequest().</P></TD></TR><TR><TD VALIGN="TOP"><P><I>TotUnitsConsumed</I></P></TD><TD VALIGN="TOP"><P>The TOTAL number of units consumed in this handle context since the initial LSRequest() call.  The software publisher may choose to specify this policy attribute within the application.  A value of LS_DEFAULT_UNITS indicates that the licensing system should determine the appropriate value using its own licensing policy mechanisms.</P></TD></TR><TR><TD VALIGN="TOP"><P><I>LogComment</I></P></TD><TD VALIGN="TOP"><P>An optional string indicating a comment to be associated with the request and logged (if logging is enabled and supported) by the underlying licensing system. The underlying license system may choose to log the comment even if an error is returned (i.e., logged with the error), but this is not guaranteed.  If a string is not specified, the value must be LS_NULL.</P></TD></TR><TR><TD VALIGN="TOP"><P><I>Status</I></P></TD><TD VALIGN="TOP"><P>Detailed error code that can be directly processed by the caller, or that can be converted into a localized message string by the LSGetMessage() function.</P></TD></TR></TBODY></TABLE>
<BR></P><H4><A NAME="sec7"></A>Description</H4>This function is used to release licensing resources associated with the license context identified by <I>LicenseHandle</I>.  If a consumptive style licensing policy is in effect, and if the software publisher chooses to implement such license policy in the application, then the license units to be consumed may be passed as part of this call.</P>
<B>NOTE</B>  The license handle context is NOT freed. See LSFreeHandle().</P>
<B>LSFreeHandle ( )</B></P>
Frees all licensing handle context.  </P>
<H4><A NAME="sec8"></A>Format</H4>void  LSFreeHandle ( [in] LicenseHandle);</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="144pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>LS_HANDLE</P></TD><TD VALIGN="TOP"><P>LicenseHandle;</P></TD></TR></TBODY></TABLE>
<BR></P><H4><A NAME="sec9"></A>Arguments</H4>
<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="126pt" VALIGN="TOP"><COL WIDTH="265pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><I>LicenseHandle</I></P></TD><TD VALIGN="TOP"><P>Handle identifying the license context. This argument must be a handle that was created with LSRequest().</P></TD></TR></TBODY></TABLE>
<BR></P><H4><A NAME="sec10"></A>Description</H4>(NOTE:  The handle is no longer valid.)</P>
This should be called after LSRelease(), or after an LSRequest() error is returned.</P>
<H3><A NAME="sec11"></A>LSUpdate()</H3>Update the synchronization between licensed software and the licensing system.</P>
<H4><A NAME="sec12"></A>Format</H4>Status = <I>LSUpdate</I><I>( [in] </I>LicenseHandle, <I>[in] </I>TotUnitsConsumed, <I>[in] </I>TotUnitsReserved<I>,<BR>[in] </I>LogComment, <I>[in/out] </I>Challenge, <I>[out] </I>TotUnitsGranted <I>);</I></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="114pt" VALIGN="TOP"><COL WIDTH="129pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>LS_HANDLE</P></TD><TD VALIGN="TOP"><P>LicenseHandle;</P></TD></TR><TR><TD VALIGN="TOP"><P>LS_ULONG</P></TD><TD VALIGN="TOP"><P>TotUnitsConsumed;</P></TD></TR><TR><TD VALIGN="TOP"><P>LS_ULONG</P></TD><TD VALIGN="TOP"><P>TotUnitsReserved;</P></TD></TR><TR><TD VALIGN="TOP"><P>LS_STR *</P></TD><TD VALIGN="TOP"><P>LogComment;</P></TD></TR><TR><TD VALIGN="TOP"><P>LS_CHALLENGE *</P></TD><TD VALIGN="TOP"><P>Challenge;</P></TD></TR><TR><TD VALIGN="TOP"><P>LS_ULONG *</P></TD><TD VALIGN="TOP"><P>TotUnitsGranted;</P></TD></TR><TR><TD VALIGN="TOP"><P>LS_STATUS_CODE</P></TD><TD VALIGN="TOP"><P>Status;</P></TD></TR></TBODY></TABLE>
<BR></P><H4><A NAME="sec13"></A>Arguments</H4>
<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="504pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><I>LicenseHandle</I></P></TD><TD VALIGN="TOP"><P>Handle identifying the license context. This argument must be a handle that was created with LSRequest().</P></TD></TR><TR><TD VALIGN="TOP"><P><I>TotUnitsConsumed</I></P></TD><TD VALIGN="TOP"><P>The TOTAL number of units consumed so far in this handle context.  The software publisher may choose to specify this policy attribute within the application.  A value of LS_DEFAULT_UNITS indicates that the licensing system should determine the appropriate value using its own licensing policy mechanisms. If an error is returned, then no units are consumed.</P></TD></TR><TR><TD VALIGN="TOP"><P><I>TotUnitsReserved</I></P></TD><TD VALIGN="TOP"><P>Specifies the total number of units to be reserved. If no additional units are required since the initial LSRequest() or last LSUpdate(), then this parameter should be the current total (as returned in <I>TotUnitsGranted</I>). The total reserved is inclusive of units consumed. That is, if an application requests 100 units be reserved, then consumes 20 units, there are still 100 units reserved (but only 80 available for consumption).<BR><BR>If additional units are required, the application must calculate a new total for <I>TotUnitsReserved</I>. LS_DEFAULT_UNITS may be specified, but this will not allocate any additional units.<BR><BR>The license system verifies that the requested number of units exist and may reserve those units, but these units are not consumed at this time. This value may be smaller than the original request to indicate that fewer units are needed than originally anticipated.</P></TD></TR><TR><TD VALIGN="TOP"><P><I>LogComment</I></P></TD><TD VALIGN="TOP"><P>An optional string indicating a comment to be associated with the request and logged (if logging is enabled and supported) by the underlying licensing system. The underlying license system may choose to log the comment even if an error is returned (i.e., logged with the error), but this is not guaranteed.  If a string is not specified, the value must be LS_NULL.</P></TD></TR><TR><TD VALIGN="TOP"><P><I>Challenge</I></P></TD><TD VALIGN="TOP"><P>Pointer to a challenge structure. The challenge response will also be returned in this structure. Refer to <I>Challenge Mechanism</I> on page 24 for more information.</P></TD></TR><TR><TD VALIGN="TOP"><P><I>TotUnitsGranted</I></P></TD><TD VALIGN="TOP"><P>A pointer to an LS_ULONG in which the total number of units granted since the initial license request is returned. The following table describes the <I>TotUnitsGranted</I> return value, given the <I>TotUnitsReserved</I> input value, and the <I>Status</I> returned:</P></TD></TR></TBODY></TABLE>
<BR></P></P>

<TABLE COLS="4" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="113pt" VALIGN="TOP"><COL WIDTH="81pt" VALIGN="TOP"><COL WIDTH="135pt" VALIGN="TOP"><COL WIDTH="63pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>TotUnitsReserved</P></TD><TD VALIGN="TOP"><P>LS_SUCCESS</P></TD><TD VALIGN="TOP"><P>LS_INSUFFICIENT_UNITS</P></TD><TD VALIGN="TOP"><P>Other errors</P></TD></TR><TR><TD VALIGN="TOP"><P>LS_DEFAULT_UNITS</P></TD><TD VALIGN="TOP"><P>(A)</P></TD><TD VALIGN="TOP"><P>(B)</P></TD><TD VALIGN="TOP"><P>(E)</P></TD></TR><TR><TD VALIGN="TOP"><P>Other (specific count)</P></TD><TD VALIGN="TOP"><P>(C)</P></TD><TD VALIGN="TOP"><P>(D)</P></TD><TD VALIGN="TOP"><P>(E)</P></TD></TR></TBODY></TABLE>
<BR></P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="504pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><I></I></P></TD><TD VALIGN="TOP"><P>(A)    The default umber of units commensurate with the license granted. </P>
<P>(B)    The maximum number of units available to the requesting software. This may be less than the normal default.</P>
<P>(C)    The number of units used to grant the request. Note that this value may differ from the actual units requested (i.e., the policy may allow only in increments of 5 units, thus a request of 7 units would result in 10 units being granted).</P>
<P>(D)    The maximum number of units available to the requesting software. This may be more or less than the units requested.</P>
<P>(E)    Zero is returned.</P></TD></TR><TR><TD VALIGN="TOP"><P><I>Status</I></P></TD><TD VALIGN="TOP"><P>Detailed error code that can be directly processed by the caller, or that can be converted into a localized message string by the LSGetMessage() function.</P></TD></TR></TBODY></TABLE>
<BR></P><H4><A NAME="sec14"></A>Description</H4>The client application periodically issues this call to re-verify that the current license is still valid. The LSQuery() API may be used to determine the proper interval for the current licensing context. A guideline  of once an hour may be appropriate, with a minimum interval of 15 minutes. Consult your licensing system vendor for more information.</P>
If the number of new units requested (in <I>TotUnitsReserved</I>) is greater than the number available, then the update request fails with an LS_INSUFFICIENT_UNITS error. Upon successful completion, the value returned in <I>TotUnitsGranted</I> indicates the current total of units granted.</P>
If the <I>TotUnitsConsumed</I> exceeds the number of units reserved, then the error LS_INSUFFICIENT_UNITS is returned. The remaining units are consumed.</P>
A challenge response is NOT returned if an error is returned.</P>
The LSUpdate() call verifies that the licensing system context has not changed from that expected by the licensed software.  In this way the LSUpdate() call can:</P>
1.    Determine if the licensing system can verify that the licensing resources granted to the specified handle are still reserved for this application by the licensing system.  Note that in distributed license system, an error here might indicate a temporary network interruption, among other things. </P>
2.    Determine when the licensing system has released the licensing resources that had been granted to the specified handle, indicating the software requiring that grant no longer has authorization to execute normally. </P>
Application Software should be prepared to handle vendor specific error conditions, should they arise. However, a best effort will be used by license systems to map error conditions to the common error set.</P>
The LSUpdate() call may indicate if that the current licensing context has expired (for example, in the case of a time-restricted license policy). In such a case, the warning status LS_LICENSE_EXPIRED is returned.  If any error is returned, a call to LSRelease() is still required.</P>
<H3><A NAME="sec15"></A>LSGetMessage()</H3>Return the message associated with a License Service API status code.</P>
<H4><A NAME="sec16"></A>Format</H4>Status = <I>LSGetMessage(</I><I> [in] </I>LicenseHandle,<I> [in]</I> Value, <I>[out] </I>Buffer, <I>[in]</I> BufferSize <I>);</I></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="114pt" VALIGN="TOP"><COL WIDTH="216pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>LS_HANDLE</P></TD><TD VALIGN="TOP"><P>LicenseHandle;</P></TD></TR><TR><TD VALIGN="TOP"><P>LS_STATUS_CODE</P></TD><TD VALIGN="TOP"><P>Value;</P></TD></TR><TR><TD VALIGN="TOP"><P>LS_STR *</P></TD><TD VALIGN="TOP"><P>Buffer;</P></TD></TR><TR><TD VALIGN="TOP"><P>LS_ULONG</P></TD><TD VALIGN="TOP"><P>BufferSize;</P></TD></TR><TR><TD VALIGN="TOP"><P>LS_STATUS_CODE</P></TD><TD VALIGN="TOP"><P>Status;</P></TD></TR></TBODY></TABLE>
<BR></P><H4><A NAME="sec17"></A>Arguments</H4>
<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="80pt" VALIGN="TOP"><COL WIDTH="339pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><I>LicenseHandle</I></P></TD><TD VALIGN="TOP"><P>Handle identifying the license context. This argument must be a handle that was created with LSRequest().</P></TD></TR><TR><TD VALIGN="TOP"><P><I>Value</I></P></TD><TD VALIGN="TOP"><P>Any status code returned by a License Service API function.</P></TD></TR><TR><TD VALIGN="TOP"><P><I>Buffer</I></P></TD><TD VALIGN="TOP"><P>Pointer to a buffer in which a localized error message string is to be placed.</P></TD></TR><TR><TD VALIGN="TOP"><P><I>BufferSize</I></P></TD><TD VALIGN="TOP"><P>Maximum size of the string that may be returned in <I>Buffer</I>.</P></TD></TR><TR><TD VALIGN="TOP"><P><I>Status</I></P></TD><TD VALIGN="TOP"><P>Resulting status of LSGetMessage() call.</P></TD></TR></TBODY></TABLE>
<BR></P><H4><A NAME="sec18"></A>Description</H4>For a given error, this function returns an error code and a string describing the error, and a suggested action to be taken in response to the specific error.  If the value of <I>Value </I>is <B>LS_USE_LAST</B>, then the last error associated with the supplied licensing handle, and its associated data, is returned.  Otherwise, the supplied error code is used.</P>
Possible status codes returned by LSGetMessage() include: LS_SUCCESS, LS_NO_MSG_TEXT, LS_UNKNOWN_STATUS, and LS_BUFFER_TOO_SMALL.</P>
<H3><A NAME="sec19"></A>LSQuery()</H3>Return information about the license system context associated with the specified handle.</P>
<H4><A NAME="sec20"></A>Format</H4>Status = <I>LSQuery( [in] </I>LicenseHandle,<I> [in] </I>Information, <I>[out]</I> InfoBuffer, <I>[in] </I>BufferSize,<BR><I>[out] </I>ActualBufferSize<I>);</I></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="98pt" VALIGN="TOP"><COL WIDTH="216pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>LS_HANDLE</P></TD><TD VALIGN="TOP"><P>LicenseHandle;</P></TD></TR><TR><TD VALIGN="TOP"><P>LS_ULONG</P></TD><TD VALIGN="TOP"><P>Information;</P></TD></TR><TR><TD VALIGN="TOP"><P>LS_VOID *</P></TD><TD VALIGN="TOP"><P>InfoBuffer;</P></TD></TR><TR><TD VALIGN="TOP"><P>LS_ULONG</P></TD><TD VALIGN="TOP"><P>BufferSize;</P></TD></TR><TR><TD VALIGN="TOP"><P>LS_ULONG *</P></TD><TD VALIGN="TOP"><P>ActualBufferSize;</P></TD></TR><TR><TD VALIGN="TOP"><P>LS_STATUS_CODE</P></TD><TD VALIGN="TOP"><P>Status;</P></TD></TR></TBODY></TABLE>
<BR></P><H4><A NAME="sec21"></A>Arguments</H4>
<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="317pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><I>LicenseHandle</I></P></TD><TD VALIGN="TOP"><P>Handle identifying the license context. This argument must be a handle that was created with LSRequest().</P></TD></TR><TR><TD VALIGN="TOP"><P><I>Information</I></P></TD><TD VALIGN="TOP"><P>Index which identifies the information to be returned.</P></TD></TR><TR><TD VALIGN="TOP"><P><I>InfoBuffer</I></P></TD><TD VALIGN="TOP"><P>Points to a buffer in which the resulting information is to be placed.</P></TD></TR><TR><TD VALIGN="TOP"><P><I>BufferSize</I></P></TD><TD VALIGN="TOP"><P>Maximum size of the buffer pointed to by <I>InfoBuffer</I>.</P></TD></TR><TR><TD VALIGN="TOP"><P><I>ActualBufferSize</I></P></TD><TD VALIGN="TOP"><P>On entry, points to a LS_ULONG whose value on exit indicates the actual count of characters returned in the buffer (not including the trailing NULL byte).</P></TD></TR><TR><TD VALIGN="TOP"><P><I>Status</I></P></TD><TD VALIGN="TOP"><P>Detailed error code that can be directly processed by the caller, or which can be converted into a localized message string by the LSGetMessage function.</P></TD></TR></TBODY></TABLE>
<BR></P><H4><A NAME="sec22"></A>Description</H4>This function is used to obtain information about the license obtained from the LSRequest() call. For example, an application may determine the license type (demo, concurrent, personal, etc.); time restrictions; etc.</P>
The buffer should be large enough to accommodate the expected data. If the buffer is too small, then the status code LS_BUFFER_TOO_SMALL is returned and only <I>BufferSize</I> bytes of data are returned.</P>
The following <I>Information</I> constants are defined:</P>

<TABLE COLS="3" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="122pt" VALIGN="TOP"><COL WIDTH="45pt" VALIGN="TOP"><COL WIDTH="243pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Information Constant</P></TD><TD VALIGN="TOP"><P>Value</P></TD><TD VALIGN="TOP"><P>Meaning</P></TD></TR><TR><TD VALIGN="TOP"><P>LS_INFO_NONE</P></TD><TD VALIGN="TOP"><P>0</P></TD><TD VALIGN="TOP"><P>Reserved. </P></TD></TR><TR><TD VALIGN="TOP"><P>LS_INFO_SYSTEM</P></TD><TD VALIGN="TOP"><P>1</P></TD><TD VALIGN="TOP"><P>Return the unique identification of the license system supplying the current license context. This is returned as a null-terminated string.</P>
<P></P>
<P>This value is the same as an appropriate call to LSEnumProviders() provides.</P>
<P></P></TD></TR><TR><TD VALIGN="TOP"><P>LS_INFO_DATA</P></TD><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P>Return the block of miscellaneous application data contained on the license. This data is completely vendor-defined. The amount of space allocated for such data will vary from license system to license system, or may not be available at all.</P>
<P></P>
<P>The first ULONG in the data buffer indicates the size (in bytes) of the actual data which follows:</P>
<P></P>
<P>+--------------------------------+</P>
<P>|             ULONG              |</P>
<P>|  (count of bytes that follow)  |</P>
<P>+--------------------------------+</P>
<P>| Vendor data bytes from license |</P>
<P>|                                |</P>
<P>+--------------------------------+</P>
<P></P></TD></TR><TR><TD VALIGN="TOP"><P>LS_UPDATE_PERIOD</P></TD><TD VALIGN="TOP"><P>3</P></TD><TD VALIGN="TOP"><P>Return the recommended interval (in minutes) at which LSUpdate() should be called.</P>
<P></P>
<P>+--------------------------------+</P>
<P>|             ULONG              |</P>
<P>|       Recommended Interval     |</P>
<P>|          (in minutes)          |</P>
<P>+--------------------------------+</P>
<P></P>
<P></P>
<P></P>
<P></P>
<P></P>
<P>If a value of 0xFFFFFFFF is returned for the recommended interval, then no recommendation is being made. </P>
<P></P></TD></TR><TR><TD VALIGN="TOP"><P>LS_LICENSE_CONTEXT</P></TD><TD VALIGN="TOP"><P>4</P></TD><TD VALIGN="TOP"><P>Return a value which uniquely identifies the licensing context within the specific license service provider identified by the LicenseHandle.</P>
<P></P>
<P>+--------------------------------+</P>
<P>|             ULONG              |</P>
<P>|   Count of Bytes that follow   |</P>
<P>+--------------------------------+</P>
<P>|             BYTES              |</P>
<P>               ...               </P>
<P>|                                |</P>
<P>+--------------------------------+</P>
<P></P>
<P>The contents of the bytes returned is license system specific. In circumstances where license system specific functionality is being used, this sequence of bytes may be used to identify the current license context.</P>
<P></P></TD></TR></TBODY></TABLE>
<BR></P><H3><A NAME="sec23"></A>LSEnumProviders()</H3>This call is used to enumerate the installed license system service providers.</P>
<H4><A NAME="sec24"></A>Format</H4>Status = <I>LSEnumProviders</I><I>( [in] </I>Index,<I> [out]</I> Buffer<I>);</I></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="144pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>LS_ULONG</P></TD><TD VALIGN="TOP"><P><I>Index</I></P></TD></TR><TR><TD VALIGN="TOP"><P>LS_STR *</P></TD><TD VALIGN="TOP"><P><I>Buffer</I></P></TD></TR><TR><TD VALIGN="TOP"><P>LS_STATUS_CODE</P></TD><TD VALIGN="TOP"><P><I>Status</I>;</P></TD></TR></TBODY></TABLE>
<BR></P><H4><A NAME="sec25"></A>Arguments</H4>
<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="54pt" VALIGN="TOP"><COL WIDTH="346pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><I>Index</I></P></TD><TD VALIGN="TOP"><P>Index of the service provider. The first provider has an index of zero, the second has an index of one, etc. This index should be incremented by the caller for each successive call to LSEnumProviders() until the status LS_BAD_INDEX is returned.</P></TD></TR><TR><TD VALIGN="TOP"><P><I>Buffer</I></P></TD><TD VALIGN="TOP"><P>Points to a buffer in which the unique null-terminated string identifying the license system service provider is to be placed. The buffer pointed to by <I>Buffer</I> must be at least 255 bytes long.  The value of LS_ANY indicates that the current index is not in use, but is not the last index to obtain.</P></TD></TR><TR><TD VALIGN="TOP"><P><I>Status</I></P></TD><TD VALIGN="TOP"><P>Detailed error code that can be directly processed by the caller, or which can be converted into a localized message string by the LSGetMessage() function.</P></TD></TR></TBODY></TABLE>
<BR></P><H4><A NAME="sec26"></A>Description</H4>For each installed provider, a unique string is returned. The unique null-terminated string typically identifies the vendor, product, and version of the license system. This value is the same as an appropriate call to LSQuery().  An Error of LS_BAD_INDEX is returned when the value of <I>Index</I> is higher than the number of providers currently installed.  In a networked environment, the version returned is that of the client, not the server.</P>
An application may enumerate the installed license system service providers by calling LSEnumProviders() successively. The <I>Index</I> is passed in and should be incremented by the caller for each call until the status LS_BAD_INDEX is returned.</P></BODY></HTML>

<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Verifying the License</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
</OBJECT></FORM>
<H2>Verifying the License</H2>The purpose of the challenge is to verify that there is a valid license present. Even a tampered server cannot respond correctly to the challenge if it does not have knowledge of the secrets contained on a particular license (i.e., there still has to be a license or the individual application secrets have to be discovered).</P>
In verifying challenge responses, the software publisher might precompute table containing a number of random challenges along with the expected responses. Or, the developer may elect to incorporate the algorithms into the code (see Anti-Tampering Guidelines on page 25). These are just a few of the possibilities. License system vendors may be able to provide additional scenarios.</P>
<H3><A NAME="sec0"></A>Algorithmic Method</H3>Using this approach, the publisher simply incorporates the challenge algorithm and the actual secrets into the program code. The process is very straight forward, but the publisher must take steps to ensure that the secrets themselves are not readily detectable within the code by someone using a debugger. The tradeoffs include:</P>
    The algorithm code must be included into the application, thereby consuming code space (but the code may be placed into an overlay which is called up only as needed). Embedding the algorithm in the code does not compromise the security offered. It is the secrets themselves which must be protected.</P>
    The secrets themselves must be included into the application code. Great steps must be taken to obscure those secrets (encrypting them, scattering them about the code, etc.).</P>
Remember, no matter what steps are taken to secure an application, the most persistent intruder will always find a way, given enough time, to compromise any system. Even hardware dongle devices are compromised -- either the hardware itself or (most likely) the code which accesses the device.</P>
<H3><A NAME="sec1"></A>Table Lookup Method</H3>The table lookup method can be used as an alternative to incorporating the challenge algorithms into the application. The tradeoffs include:</P>
    In addition to choosing the secrets, the set of challenge values must be chosen when the application is coded.</P>
    Many challenge values must be chosen to ensure a confident level of "randomness".</P>
    Given the set of possible challenge values, a table must be precomputed which contains the possible results for each [challenge, secret] pair.</P>
Instead of including the challenge algorithms and secrets into the application code, a table of valid responses is incorporated. The table contains a row for each possible challenge and a column for each unique secret. Then, a particular challenge is verified by examining the intersection in the table.</P>
A sample table is shown below:</P>

<TABLE COLS="5" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="70pt" VALIGN="TOP"><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="72pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Challenge</P></TD><TD VALIGN="TOP"><P><I>Secret1</I> Response</P></TD><TD VALIGN="TOP"><P><I>Secret2</I> Response</P></TD><TD VALIGN="TOP"><P><I>Secret3</I> Response</P></TD><TD VALIGN="TOP"><P><I>Secret4</I> Response</P></TD></TR><TR><TD VALIGN="TOP"><P>8675309</P></TD><TD VALIGN="TOP"><P>783ndmw732</P></TD><TD VALIGN="TOP"><P>3487dn262</P></TD><TD VALIGN="TOP"><P>367dkb37</P></TD><TD VALIGN="TOP"><P>476dndk263</P></TD></TR><TR><TD VALIGN="TOP"><P>63JSk23</P></TD><TD VALIGN="TOP"><P>63387d6b36</P></TD><TD VALIGN="TOP"><P>7b6b5u8b7</P></TD><TD VALIGN="TOP"><P>8hn65bv4g7</P></TD><TD VALIGN="TOP"><P>076bb856v6</P></TD></TR><TR><TD VALIGN="TOP"><P>833jh26</P></TD><TD VALIGN="TOP"><P>73d83m29s</P></TD><TD VALIGN="TOP"><P>8N7GJ829n8</P></TD><TD VALIGN="TOP"><P>89bn73nBH</P></TD><TD VALIGN="TOP"><P>89348nUU7</P></TD></TR><TR><TD VALIGN="TOP"><P>8LES654</P></TD><TD VALIGN="TOP"><P>733nbV8</P></TD><TD VALIGN="TOP"><P>8H8hu8</P></TD><TD VALIGN="TOP"><P>B73h0dn39</P></TD><TD VALIGN="TOP"><P>7590nd73n</P></TD></TR><TR><TD VALIGN="TOP"><P>28gHjB4</P></TD><TD VALIGN="TOP"><P>39834nd83</P></TD><TD VALIGN="TOP"><P>93n3d93n38</P></TD><TD VALIGN="TOP"><P>393n3ed83n</P></TD><TD VALIGN="TOP"><P>983n38db38</P></TD></TR></TBODY></TABLE>
<BR></P>*The format and size of the values shown above are for example purposes only. </P>
At the beginning of each run time, the application randomly chooses one of the challenge values. The chosen challenge value is then passed into the LSRequest() call. When the call returns, the application compares the actual result with the set of expected results for that challenge value.</P>
For example (using the sample table above), the application randomly chooses the 2nd challenge (and which secret to challenge): <I>63JSk23</I>. This value is passed in as the challenge in the LSRequest() call. The license system responds with a status of success and a challenge response of <I>8hn65bv4g7</I>. The application examines the row of possible responses (highlighted below), comparing each entry against <I>8hn65bv4g7</I>. A match is found in the 3rd column. Thus, the challenge has passed.</P>

<TABLE COLS="5" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="70pt" VALIGN="TOP"><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="72pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Challenge</P></TD><TD VALIGN="TOP"><P><I>Secret1</I> Response</P></TD><TD VALIGN="TOP"><P><I>Secret2</I> Response</P></TD><TD VALIGN="TOP"><P><I>Secret3</I> Response</P></TD><TD VALIGN="TOP"><P><I>Secret4</I> Response</P></TD></TR><TR><TD VALIGN="TOP"><P>8675309</P></TD><TD VALIGN="TOP"><P>783ndmw732</P></TD><TD VALIGN="TOP"><P>3487dn262</P></TD><TD VALIGN="TOP"><P>367dkb37</P></TD><TD VALIGN="TOP"><P>476dndk263</P></TD></TR><TR><TD VALIGN="TOP"><P>63JSk23</P></TD><TD VALIGN="TOP"><P>63387d6b36</P></TD><TD VALIGN="TOP"><P>7b6b5u8b7</P></TD><TD VALIGN="TOP"><P><I>8hn65bv4g7</I></P></TD><TD VALIGN="TOP"><P>076bb856v6</P></TD></TR><TR><TD VALIGN="TOP"><P>833jh26</P></TD><TD VALIGN="TOP"><P>73d83m29s</P></TD><TD VALIGN="TOP"><P>8N7GJ829n8</P></TD><TD VALIGN="TOP"><P>89bn73nBH</P></TD><TD VALIGN="TOP"><P>89348nUU7</P></TD></TR><TR><TD VALIGN="TOP"><P>8LES654</P></TD><TD VALIGN="TOP"><P>733nbV8</P></TD><TD VALIGN="TOP"><P>8H8hu8</P></TD><TD VALIGN="TOP"><P>B73h0dn39</P></TD><TD VALIGN="TOP"><P>7590nd73n</P></TD></TR><TR><TD VALIGN="TOP"><P>28gHjB4</P></TD><TD VALIGN="TOP"><P>39834nd83</P></TD><TD VALIGN="TOP"><P>93n3d93n38</P></TD><TD VALIGN="TOP"><P>393n3ed83n</P></TD><TD VALIGN="TOP"><P>983n38db38</P></TD></TR></TBODY></TABLE>
<BR></P></BODY></HTML>

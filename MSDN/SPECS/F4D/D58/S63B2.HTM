<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>LookupType 5:  Contextual Substitution Subtable</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
</OBJECT></FORM>
<H2>LookupType 5:  Contextual Substitution Subtable</H2>A Contextual Substitution (ContextSubst) subtable defines the most powerful type of glyph substitution lookup: it describes glyph substitutions in context that replace one or more glyphs within a certain pattern of glyphs.</P>
ContextSubst subtables can be any of three formats that define a context in terms of a specific sequence of glyphs, glyph classes, or glyph sets. Each format can describe one or more input glyph sequences and one or more substitutions for each sequence.</P>
All ContextSubst subtables specify the substitution data in a SubstLookupRecord. A description of that record follows the descriptions of the three formats available for ContextSubst subtables.</P>
<H3><A NAME="sec0"></A>Context Substitution Format 1</H3>Format 1 defines the context for a glyph substitution as a particular sequence of glyphs. For example, a context could be &lt;xyz&gt;, &lt;holiday&gt;, &lt;!?*#@&gt;, or any other glyph sequence. </P>
Within a context sequence, Format 1 identifies particular glyph positions (not glyph indices) as the targets for specific substitutions. When a text-processing client locates a context in a string of text, it finds the lookup data for a targeted position and makes a substitution by applying the lookup data at that location.</P>
For example, to replace the glyph string &lt;abc&gt; with its reverse glyph string &lt;cba&gt;, the input context is defined as the glyph sequence, &lt;abc&gt;. On locating "abc" in the text, the client searches the ContextSubstFormat1 subtable for lookup data that applies to the first glyph in the sequence. When it finds the lookup data, the client applies the lookup and replaces the glyph in the first position (in this case, the "a") with a "c," producing the output glyph string &lt;cac&gt;.</P>
After completing the lookup for the first glyph position, the client searches the subtable for data applicable to the second glyph in the context sequence. Because the "b" does not need to be replaced, no data exists for this position. </P>
Finally, the client searches the subtable for data to apply to the third glyph in the sequence. The subtable specifies a substitution, so the client applies the lookup and replaces the "c" glyph with an "a." The contextual substitution ends, and the final output is the glyph string &lt;cba&gt;.</P>
To specify a context, a Coverage table lists the first glyph in the sequence, and a SubRule table identifies the remaining glyphs. To describe the &lt;abc&gt; context used in the previous example, the Coverage table lists the glyph index of the first component of the sequence—the "a" glyph. A SubRule table defines indices for the "b" and "c" glyphs. </P>
A single ContextSubstFormat1 subtable may define more than one context glyph sequence. If different context sequences begin with the same glyph, then the Coverage table should list the glyph only once because all glyphs in the table must be unique. For example, if three contexts each start with an "s" and two start with a "t," then the Coverage table will list one "s" and one "t." </P>
For each context, a SubRule table lists all the glyphs that follow the first glyph. The table also contains an array of SubstLookupRecords that specify the substitution lookup data for each glyph position (including the first glyph position) in the context.</P>
All of the SubRule tables defining contexts that begin with the same first glyph are grouped together and defined in a SubRuleSet table. For example, the SubRule tables that define the three contexts that begin with an "s" are grouped in one SubRuleSet table, and the SubRule tables that define the two contexts that begin with a "t" are grouped in a second SubRuleSet table. Each glyph listed in the Coverage table must have a SubRuleSet table defining all the SubRule tables that apply to a covered glyph.</P>
To locate a context glyph sequence, the text-processing client searches the Coverage table each time it encounters a new text glyph. If the glyph is covered, the client reads the corresponding SubRuleSet table and examines each SubRule table in the set to determine whether the rest of the context matches the subsequent glyphs in the text. If the context and text string match, the client finds the target glyph positions, applies the lookups for those positions, and completes the substitutions. </P>
A ContextSubstFormat1 subtable contains a format identifier (SubstFormat), an offset to a Coverage table (Coverage), a count of defined SubRuleSets (SubRuleSetCount), and an array of offsets to the SubRuleSet tables (SubRuleSet). As mentioned, one SubRuleSet table must be defined for each glyph listed in the Coverage table. </P>
In the SubRuleSet array, the SubRuleSet table offsets are ordered in the Coverage Index order. The first SubRuleSet in the array applies to the first GlyphID listed in the Coverage table, the second SubRuleSet in the array applies to the second GlyphID listed in the Coverage table, and so on.</P>
ContextSubstFormat1 subtable: Simple context glyph substitution</P>

<TABLE COLS="3" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="69pt" VALIGN="TOP"><COL WIDTH="121pt" VALIGN="TOP"><COL WIDTH="245pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Type</P></TD><TD VALIGN="TOP"><P>Name</P></TD><TD VALIGN="TOP"><P>Description</P></TD></TR><TR><TD VALIGN="TOP"><P>uint16</P></TD><TD VALIGN="TOP"><P>SubstFormat</P></TD><TD VALIGN="TOP"><P>Format identifier </P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>—format = 1</P></TD></TR><TR><TD VALIGN="TOP"><P>Offset</P></TD><TD VALIGN="TOP"><P>ð Coverage</P></TD><TD VALIGN="TOP"><P>Offset to Coverage table </P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>—from beginning of Substitution table</P></TD></TR><TR><TD VALIGN="TOP"><P>uint16</P></TD><TD VALIGN="TOP"><P>SubRuleSetCount</P></TD><TD VALIGN="TOP"><P>Number of SubRuleSet tables</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>—must equal GlyphCount in Coverage table</P></TD></TR><TR><TD VALIGN="TOP"><P>Offset</P></TD><TD VALIGN="TOP"><P>ð SubRuleSet</P></TD><TD VALIGN="TOP"><P>Array of offsets to SubRuleSet tables </P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>[SubRuleSetCount]</P></TD><TD VALIGN="TOP"><P>—from beginning of Substitution table</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>—ordered by Coverage Index</P></TD></TR></TBODY></TABLE>
<BR></P>A SubRuleSet table consists of an array of offsets to SubRule tables (SubRule), ordered by preference, and a count of the SubRule tables defined in the set (SubRuleCount). </P>
The order in the SubRule array can be critical. Consider two contexts, &lt;abc&gt; and &lt;abcd&gt;. If &lt;abc&gt; is first in the SubRule array, all instances of &lt;abc&gt; in the text—including all instances of &lt;abcd&gt;—will be changed. If &lt;abcd&gt; comes first in the array, however, only &lt;abcd&gt; sequences will be changed, without affecting any instances of &lt;abc&gt;.</P>
SubRuleSet table: All contexts beginning with the same glyph</P>

<TABLE COLS="3" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="69pt" VALIGN="TOP"><COL WIDTH="121pt" VALIGN="TOP"><COL WIDTH="245pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Type</P></TD><TD VALIGN="TOP"><P>Name</P></TD><TD VALIGN="TOP"><P>Description</P></TD></TR><TR><TD VALIGN="TOP"><P>uint16</P></TD><TD VALIGN="TOP"><P>SubRuleCount</P></TD><TD VALIGN="TOP"><P>Number of SubRule tables</P></TD></TR><TR><TD VALIGN="TOP"><P>Offset</P></TD><TD VALIGN="TOP"><P>ð SubRule[SubRuleCount]</P></TD><TD VALIGN="TOP"><P>Array of offsets to SubRule tables </P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>—from beginning of SubRuleSet table</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>—ordered by preference</P></TD></TR></TBODY></TABLE>
<BR></P>A SubRule table consists of a count of the glyphs to be matched in the input context sequence (GlyphCount), including the first glyph in the sequence, and an array of glyph indices that describe the context (Input). The Coverage table specifies the index of the first glyph in the context, and the Input array begins with the second glyph (array index = 1) in the context sequence. </P>
<B>Note:</B> The Input array lists the indices in the order the corresponding glyphs appear in the text. For text written from right to left, the right-most glyph will be first; conversely, for text written from left to right, the left-most glyph will be first.</P>
A SubRule table also contains a count of the substitutions to be performed on the input glyph sequence (SubstCount) and an array of SubstitutionLookupRecords (SubstLookupRecord). Each record specifies a position in the input glyph sequence and a LookupListIndex to the substitution lookup that is applied at that position. The array should list records in design order, or the order the lookups should be applied to the entire glyph sequence.</P>
SubRule table: One simple context definition</P>

<TABLE COLS="3" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="69pt" VALIGN="TOP"><COL WIDTH="121pt" VALIGN="TOP"><COL WIDTH="249pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Type</P></TD><TD VALIGN="TOP"><P>Name</P></TD><TD VALIGN="TOP"><P>Description</P></TD></TR><TR><TD VALIGN="TOP"><P>uint16</P></TD><TD VALIGN="TOP"><P>GlyphCount</P></TD><TD VALIGN="TOP"><P>Total number of glyphs in input glyph sequence</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>—includes the first glyph</P></TD></TR><TR><TD VALIGN="TOP"><P>uint16</P></TD><TD VALIGN="TOP"><P>SubstCount</P></TD><TD VALIGN="TOP"><P>Number of SubstLookupRecords</P></TD></TR><TR><TD VALIGN="TOP"><P>GlyphID</P></TD><TD VALIGN="TOP"><P>Input[GlyphCount - 1]</P></TD><TD VALIGN="TOP"><P>Array of input GlyphIDs</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>—start with second glyph</P></TD></TR><TR><TD VALIGN="TOP"><P>struct</P></TD><TD VALIGN="TOP"><P>SubstLookupRecord</P></TD><TD VALIGN="TOP"><P>Array of SubstLookupRecords</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>[SubstCount]</P></TD><TD VALIGN="TOP"><P>—in design order</P></TD></TR></TBODY></TABLE>
<BR></P>Example 7 at the end of the chapter shows how to use the ContextSubstFormat1 subtable to replace three dashes with a sequence preferred for the French language system.</P>
<H3><A NAME="sec1"></A>Context Substitution Format 2</H3>Format 2, a more flexible format than Format 1, describes class-based context substitution. For this format, a specific integer, called a class value, must be assigned to each glyph component in all context glyph sequences. Contexts are then defined as sequences of glyph class values. More than one context may be defined at a time.</P>
For example, suppose that a swash capital glyph should replace each uppercase letter glyph that is preceded by a space glyph and followed by a lowercase letter glyph (a glyph sequence of space - uppercase - lowercase). The set of uppercase glyphs would constitute one glyph class (Class 1), the set of lowercase glyphs would constitute a second class (Class 2), and the space glyph would constitute a third class (Class 3). The input context might be specified with a context rule (called a SubClassRule) that describes "the set of glyph strings that form a sequence of three glyph classes, one glyph from Class 3, followed by one glyph from Class 1, followed by one glyph from Class 2."</P>
Each ContextSubstFormat2 subtable contains an offset to a class definition table (ClassDef), which defines the glyph class values of all input contexts. Generally, a unique ClassDef table will be declared in each instance of the ContextSubstFormat2 table that is included in a font, even though several Format 2 tables could share ClassDef tables. Class assignments are fixed (the same for each position in the context), and classes are exclusive (a glyph cannot be in more than one class at a time). The output glyphs that replace the glyphs in the context sequences do not need class values because they are specified elsewhere by GlyphID.</P>
The ContextSubstFormat2 subtable also contains a format identifier (SubstFormat) and defines an offset to a Coverage table (Coverage). For this format, the Coverage table lists indices for the complete set of unique glyphs (not glyph classes) that may appear as the first glyph of any class-based context. In other words, the Coverage table contains the list of glyph indices for all the glyphs in all classes that may be first in any of the context class sequences. For example, if the contexts begin with a Class 1 or Class 2 glyph, then the Coverage table will list the indices of all Class 1 and Class 2 glyphs. This Coverage listing is redundant because the ClassDef table also identifies input glyphs, but it accelerates the lookup process. </P>
A ContextSubstFormat2 subtable also defines an array of offsets to the SubClassSet tables (SubClassSet) and a count of the SubClassSet tables (SubClassSetCnt). The array contains one offset for each class (including Class 0) in the ClassDef table. In the array, the class value defines an offset's index position, and the SubClassSet offsets are ordered by ascending class value (from 0 to SubClassSetCnt - 1). </P>
For example, the first SubClassSet listed in the array contains all contexts beginning with Class 0 glyphs, the second SubClassSet contains all contexts beginning with Class 1 glyphs, and so on. If no contexts begin with a particular class (that is, if a SubClassSet contains no SubClassRule tables), then the offset to that particular SubClassSet in the SubClassSet array will be set to NULL.</P>
ContextSubstFormat2 subtable: Class-based context glyph substitution</P>

<TABLE COLS="3" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="69pt" VALIGN="TOP"><COL WIDTH="121pt" VALIGN="TOP"><COL WIDTH="245pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Type</P></TD><TD VALIGN="TOP"><P>Name</P></TD><TD VALIGN="TOP"><P>Description</P></TD></TR><TR><TD VALIGN="TOP"><P>uint16</P></TD><TD VALIGN="TOP"><P>SubstFormat</P></TD><TD VALIGN="TOP"><P>Format identifier </P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>—format = 2</P></TD></TR><TR><TD VALIGN="TOP"><P>Offset</P></TD><TD VALIGN="TOP"><P>ð Coverage</P></TD><TD VALIGN="TOP"><P>Offset to Coverage table </P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>—from beginning of Substitution table</P></TD></TR><TR><TD VALIGN="TOP"><P>Offset</P></TD><TD VALIGN="TOP"><P>ð ClassDef</P></TD><TD VALIGN="TOP"><P>Offset to glyph ClassDef table </P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>—from beginning of Substitution table</P></TD></TR><TR><TD VALIGN="TOP"><P>uint16</P></TD><TD VALIGN="TOP"><P>SubClassSetCnt</P></TD><TD VALIGN="TOP"><P>Number of SubClassSet tables</P></TD></TR><TR><TD VALIGN="TOP"><P>Offset</P></TD><TD VALIGN="TOP"><P>SubClassSet</P></TD><TD VALIGN="TOP"><P>Array of offsets to SubClassSet tables </P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>[SubClassSetCnt]</P></TD><TD VALIGN="TOP"><P>—from beginning of Substitution table</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>—ordered by class</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>—may be NULL</P></TD></TR></TBODY></TABLE>
<BR></P>Each context is defined in a SubClassRule table, and all SubClassRules that specify contexts beginning with the same class value are grouped in a SubClassSet table. Consequently, the SubClassSet containing a context identifies a context's first class component.</P>
Each SubClassSet table consists of a count of the SubClassRule tables defined in the SubClassSet (SubClassRuleCnt) and an array of offsets to SubClassRule tables (SubClassRule). The SubClassRule tables are ordered by preference in the SubClassRule array of the SubClassSet.</P>
SubClassSet table: All contexts beginning with the same class</P>

<TABLE COLS="3" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="69pt" VALIGN="TOP"><COL WIDTH="121pt" VALIGN="TOP"><COL WIDTH="245pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Type</P></TD><TD VALIGN="TOP"><P>Name</P></TD><TD VALIGN="TOP"><P>Description</P></TD></TR><TR><TD VALIGN="TOP"><P>uint16</P></TD><TD VALIGN="TOP"><P>SubClassRuleCnt</P></TD><TD VALIGN="TOP"><P>Number of SubClassRule tables</P></TD></TR><TR><TD VALIGN="TOP"><P>Offset</P></TD><TD VALIGN="TOP"><P>ð SubClassRule</P></TD><TD VALIGN="TOP"><P>Array of offsets to SubClassRule tables</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>[SubClassRuleCnt]</P></TD><TD VALIGN="TOP"><P>—from beginning of SubClassSet</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>—ordered by preference</P></TD></TR></TBODY></TABLE>
<BR></P>For each context, a SubClassRule table contains a count of the glyph classes in the context sequence (GlyphCount), including the first class. A Class array lists the classes, beginning with the second class (array index = 1), that follow the first class in the context.</P>
<B>Note:</B> Text order depends on the writing direction of the text. For text written from right to left, the right-most class will be first. Conversely, for text written from left to right, the left-most class will be first.</P>
The values specified in the Class array are the values defined in the ClassDef table. For example, a context consisting of the sequence "Class 2, Class 7, Class 5, Class 0" will produce a Class array of 7,5,0. The first class in the sequence, Class 2, is identified in the ContextSubstFormat2 table by the SubClassSet array index of the corresponding SubClassSet.</P>
A SubClassRule also contains a count of the substitutions to be performed on the context (SubstCount) and an array of SubstLookupRecords (SubstLookupRecord) that supply the substitution data. For each position in the context that requires a substitution, a SubstLookupRecord specifies a LookupList index and a position in the input glyph sequence where the lookup is applied. The SubstLookupRecord array lists SubstLookupRecords in design order—that is, the order in which lookups should be applied to the entire glyph sequence. </P>
SubClassRule table: Context definition for one class</P>

<TABLE COLS="3" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="69pt" VALIGN="TOP"><COL WIDTH="121pt" VALIGN="TOP"><COL WIDTH="250pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Type</P></TD><TD VALIGN="TOP"><P>Name</P></TD><TD VALIGN="TOP"><P>Description</P></TD></TR><TR><TD VALIGN="TOP"><P>uint16</P></TD><TD VALIGN="TOP"><P>GlyphCount</P></TD><TD VALIGN="TOP"><P>Total number of classes specified for the context in the rule</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>—includes the first class</P></TD></TR><TR><TD VALIGN="TOP"><P>uint16</P></TD><TD VALIGN="TOP"><P>SubstCount</P></TD><TD VALIGN="TOP"><P>Number of SubstLookupRecords</P></TD></TR><TR><TD VALIGN="TOP"><P>uint16</P></TD><TD VALIGN="TOP"><P>Class[GlyphCount - 1]</P></TD><TD VALIGN="TOP"><P>Array of classes </P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>—beginning with the second class </P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>—to be matched to the input glyph class sequence</P></TD></TR><TR><TD VALIGN="TOP"><P>struct</P></TD><TD VALIGN="TOP"><P>SubstLookupRecord</P></TD><TD VALIGN="TOP"><P>Array of Substitution lookups</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>[SubstCount]</P></TD><TD VALIGN="TOP"><P>—in design order</P></TD></TR></TBODY></TABLE>
<BR></P>Example 8 at the end of this chapter uses Format 2 to substitute Arabic mark glyphs for base glyphs of different heights.</P>
<H3><A NAME="sec2"></A>Context Substitution Format 3</H3>Format 3, coverage-based context substitution, defines a context rule as a sequence of coverage tables. Each position in the sequence may define a different Coverage table for the set of glyphs that matches the context pattern. With Format 3, the glyph sets defined in the different Coverage tables may intersect, unlike Format 2 which specifies fixed class assignments (identical for each position in the context sequence) and exclusive classes (a glyph cannot be in more than one class at a time).</P>
For example, consider an input context that contains a lowercase glyph (position 0), followed by an uppercase glyph (position 1), either a lowercase or numeral glyph (position 2), and then either a lowercase or uppercase vowel (position 3). This context requires four Coverage tables, one for each position:</P>
In position 0, the Coverage table lists the set of lowercase glyphs. </P>
In position 1, the Coverage table lists the set of uppercase glyphs. </P>
In position 2, the Coverage table lists the set of lowercase and numeral glyphs, a superset of the glyphs defined in the Coverage table for position 0. </P>
In position 3, the Coverage table lists the set of lowercase and uppercase vowels, a subset of the glyphs defined in the Coverage tables for both positions 0 and 1. </P>
Unlike Formats 1 and 2, this format defines only one context rule at a time. It consists of a format identifier (SubstFormat), a count of the glyphs in the sequence to be matched (GlyphCount), and an array of Coverage offsets that describe the input context sequence (Coverage). </P>
<B>Note:</B> The order of the Coverage tables listed in the Coverage array must follow the writing direction. For text written from right to left, then the right-most glyph will be first. Conversely, for text written from left to right, the left-most glyph will be first. </P>
The subtable also contains a count of the substitutions to be performed on the input Coverage sequence (SubstCount) and an array of SubstLookupRecords (SubstLookupRecord) in design order—that is, the order in which lookups should be applied to the entire glyph sequence. (SubstLookupRecords are described next.)</P>
Example 9 at the end of this chapter substitutes swash glyphs for two out of three glyphs in a sequence. </P>
ContextSubstFormat3 subtable: Coverage-based context glyph substitution</P>

<TABLE COLS="3" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="69pt" VALIGN="TOP"><COL WIDTH="121pt" VALIGN="TOP"><COL WIDTH="245pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Type</P></TD><TD VALIGN="TOP"><P>Name</P></TD><TD VALIGN="TOP"><P>Description</P></TD></TR><TR><TD VALIGN="TOP"><P>uint16</P></TD><TD VALIGN="TOP"><P>SubstFormat</P></TD><TD VALIGN="TOP"><P>Format identifier </P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>—format = 3</P></TD></TR><TR><TD VALIGN="TOP"><P>uint16</P></TD><TD VALIGN="TOP"><P>GlyphCount</P></TD><TD VALIGN="TOP"><P>Number of glyphs in the input glyph sequence</P></TD></TR><TR><TD VALIGN="TOP"><P>uint16</P></TD><TD VALIGN="TOP"><P>SubstCount</P></TD><TD VALIGN="TOP"><P>Number of SubstLookupRecords</P></TD></TR><TR><TD VALIGN="TOP"><P>Offset</P></TD><TD VALIGN="TOP"><P>ð Coverage[GlyphCount]</P></TD><TD VALIGN="TOP"><P>Array of offsets to Coverage table </P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>—from beginning of Substitution table</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>—in glyph sequence order</P></TD></TR><TR><TD VALIGN="TOP"><P>struct</P></TD><TD VALIGN="TOP"><P>SubstLookupRecord</P></TD><TD VALIGN="TOP"><P>Array of SubstLookupRecords</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>[SubstCount]</P></TD><TD VALIGN="TOP"><P>—in design order</P></TD></TR></TBODY></TABLE>
<BR></P><H3><A NAME="sec3"></A>Substitution Lookup Record</H3>All contextual substitution subtables specify the substitution data in a Substitution Lookup Record (SubstLookupRecord). Each record contains a SequenceIndex, which indicates the position where the substitution will occur in the glyph sequence. In addition, a LookupListIndex identifies the lookup to be applied at the glyph position specified by the SequenceIndex.</P>
The contextual substitution subtables defined in Examples 7, 8, and 9 at the end of this chapter show SubstLookupRecords.</P>
SubstLookupRecord</P>

<TABLE COLS="3" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="69pt" VALIGN="TOP"><COL WIDTH="121pt" VALIGN="TOP"><COL WIDTH="249pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Type</P></TD><TD VALIGN="TOP"><P>Name</P></TD><TD VALIGN="TOP"><P>Description</P></TD></TR><TR><TD VALIGN="TOP"><P>uint16</P></TD><TD VALIGN="TOP"><P>SequenceIndex</P></TD><TD VALIGN="TOP"><P>Index into current glyph sequence</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>—first glyph = 0</P></TD></TR><TR><TD VALIGN="TOP"><P>uint16</P></TD><TD VALIGN="TOP"><P>LookupListIndex</P></TD><TD VALIGN="TOP"><P>Lookup to apply to that position</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>—zero-based</P></TD></TR></TBODY></TABLE>
<BR></P>The SequenceIndex in a SubstLookupRecord must take into consideration the order in which lookups are applied to the entire glyph sequence. Because multiple substitutions may occur per context, the SequenceIndex and LookupListIndex refer to the glyph sequence <I>after</I> the text-processing client has applied any previous lookups. In other words, the SequenceIndex identifies the location for the substitution at the time that the lookup is to be applied. </P>
For example, consider an input glyph sequence of four glyphs. The first glyph does not have a substitute, but the middle two glyphs will be replaced with a ligature, and a single glyph will replace the fourth glyph:</P>
The first glyph is in position 0. No lookups will be applied at position 0, so no SubstLookupRecord is defined. </P>
The SubstLookupRecord defined for the ligature substitution specifies the SequenceIndex as position 1, which is the position of the first-glyph component in the ligature string. After the ligature replaces the glyphs in positions 1 and 2, however, the input glyph sequence consists of only three glyphs, not the original four. </P>
To replace the last glyph in the sequence, the SubstLookupRecord defines the SequenceIndex as position 2 instead of position 3. This position reflects the effect of the ligature substitution applied before this single substitution. </P>
<B>Note:</B> This example assumes that the LookupList specifies the ligature substitution lookup <I>before</I> the single substitution lookup.</P></BODY></HTML>

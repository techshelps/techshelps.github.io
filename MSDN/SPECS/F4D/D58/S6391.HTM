<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Features and Lookups</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
</OBJECT></FORM>
<H3>Features and Lookups</H3>Features define the functionality of a TrueType Open font and they are named to convey meaning to the text-processing client. Consider a feature named "liga" to create ligatures. Because of its name, the client knows what the feature does and can decide whether to apply it. A current list of TrueType Open registered features and their are listed in the TrueType Open Registry chapter at the end of this document. Font developers can use these features, as well as create their own.</P>
After choosing which features to use, the client assembles all lookups from the selected features. Multiple lookups may be needed to define the data required for different substitution and positioning actions, as well as to control the sequencing and effects of those actions. </P>
To implement features, a client applies the lookups in the order the lookup definitions occur in the LookupList. As a result, within the GSUB or GPOS table, lookups from several different features may be interleaved during text processing. A lookup is completed when the client locates a target glyph or glyph context and substitutes or positions a glyph. </P>
<B>Note:</B> The substitution (GSUB) lookups always occur before the positioning (GPOS) lookups. The lookup sequencing mechanism in TrueType relies on the font to determine the proper order of text-processing operations.</P>
Lookup data is defined in one or more subtables that contain information about specific glyphs and the operations to be performed on them. Each type of lookup has one or more corresponding subtable definitions. The choice of a subtable format depends upon two factors: the precise content of the information being applied to an operation, and the required storage efficiency. (For complete definitions of all lookup types and subtables, see the the GSUB and GPOS chapters of this document.)</P>
TrueType Open features define information that is specific to the layout of the glyphs in a font. They do not encode information that is constant within the conventions of a particular language or the typography of a particular script. Information that would be replicated across all fonts in a given language belongs in the text-processing application for that language, not in the fonts.</P>
<H4><A NAME="sec0"></A>Feature List Table</H4>The headers of the GSUB and GPOS tables contain offsets to Feature List tables (FeatureList) that enumerate all the features in a font. Features in a particular FeatureList are not limited to any single script. A FeatureList contains the entire list of either the GSUB or GPOS features that are used to render the glyphs in all the scripts in the font.</P>
The FeatureList table enumerates features in an array of records (FeatureRecord) and specifies the total number of features (FeatureCount). Every feature must have a FeatureRecord, which consists of a FeatureTag that identifies the feature and an offset to a Feature table (described next). The FeatureRecord array is arranged alphabetically by FeatureTag names. </P>
<B>Note:</B> The values stored in the FeatureIndex array of a LangSys table are used to locate records in the FeatureRecord array of a FeatureList table.</P>
FeatureList table</P>

<TABLE COLS="3" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="69pt" VALIGN="TOP"><COL WIDTH="121pt" VALIGN="TOP"><COL WIDTH="245pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Type</P></TD><TD VALIGN="TOP"><P>Name</P></TD><TD VALIGN="TOP"><P>Description</P></TD></TR><TR><TD VALIGN="TOP"><P>uint16</P></TD><TD VALIGN="TOP"><P>FeatureCount</P></TD><TD VALIGN="TOP"><P>Number of FeatureRecords in this table</P></TD></TR><TR><TD VALIGN="TOP"><P>struct</P></TD><TD VALIGN="TOP"><P>FeatureRecord</P></TD><TD VALIGN="TOP"><P>Array of FeatureRecords</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>[FeatureCount]</P></TD><TD VALIGN="TOP"><P>—zero-based (first feature has FeatureIndex = 0)</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>—listed alphabetically by FeatureTag</P></TD></TR></TBODY></TABLE>
<BR></P>FeatureRecord</P>

<TABLE COLS="3" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="69pt" VALIGN="TOP"><COL WIDTH="121pt" VALIGN="TOP"><COL WIDTH="245pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Type</P></TD><TD VALIGN="TOP"><P>Name</P></TD><TD VALIGN="TOP"><P>Description</P></TD></TR><TR><TD VALIGN="TOP"><P>Tag</P></TD><TD VALIGN="TOP"><P>FeatureTag</P></TD><TD VALIGN="TOP"><P>4-byte feature identification tag</P></TD></TR><TR><TD VALIGN="TOP"><P>Offset</P></TD><TD VALIGN="TOP"><P>ð Feature</P></TD><TD VALIGN="TOP"><P>Offset to Feature table </P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>—from beginning of FeatureList</P></TD></TR></TBODY></TABLE>
<BR></P><H4><A NAME="sec1"></A>Feature Table</H4>A Feature table defines a feature with one or more lookups. The client uses the lookups to substitute or position glyphs. </P>
Feature tables defined within the GSUB table contain references to glyph substitution lookups, and feature tables defined within the GPOS table contain references to glyph positioning lookups. If a text-processing operation requires both glyph substitution and positioning, then both the GSUB and GPOS tables must each define a Feature table, and the tables must use the same FeatureTags. </P>
A Feature table consists of an offset to a Feature Parameters (FeatureParams) table (currently reserved for future use and set to NULL), a count of the lookups listed for the feature (LookupCount), and an arbitrarily ordered array of indices into a LookupList (LookupListIndex). The LookupList indices are references into an array of offsets to Lookup tables.</P>
To identify the features in a GSUB or GPOS table, a text-processing client reads the FeatureTag of each FeatureRecord referenced in a given LangSys table. Then the client selects the features it wants to implement and uses the LookupList to retrieve the Lookup indices of the chosen features. Next, the client arranges the indices in the LookupList order. Finally, the client applies the lookup data to substitute or position glyphs.</P>
Example 3 at the end of this chapter shows the FeatureList and Feature tables used to substitute ligatures in two languages.</P>
Feature table</P>

<TABLE COLS="3" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="69pt" VALIGN="TOP"><COL WIDTH="121pt" VALIGN="TOP"><COL WIDTH="249pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Type</P></TD><TD VALIGN="TOP"><P>Name</P></TD><TD VALIGN="TOP"><P>Description</P></TD></TR><TR><TD VALIGN="TOP"><P>Offset</P></TD><TD VALIGN="TOP"><P>ð FeatureParams</P></TD><TD VALIGN="TOP"><P>= NULL (reserved for offset to FeatureParams)</P></TD></TR><TR><TD VALIGN="TOP"><P>uint16</P></TD><TD VALIGN="TOP"><P>LookupCount</P></TD><TD VALIGN="TOP"><P>Number of LookupList indices for this feature</P></TD></TR><TR><TD VALIGN="TOP"><P>uint16</P></TD><TD VALIGN="TOP"><P>LookupListIndex</P></TD><TD VALIGN="TOP"><P>Array of LookupList indices for this feature </P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>[LookupCount]</P></TD><TD VALIGN="TOP"><P>—zero-based (first lookup is LookupListIndex = 0)</P></TD></TR></TBODY></TABLE>
<BR></P><H4><A NAME="sec2"></A>Lookup List Table</H4>The headers of the GSUB and GPOS tables contain offsets to Lookup List tables (LookupList) for glyph substitution (GSUB table) and glyph positioning (GPOS table). The LookupList table contains an array of offsets to Lookup tables (Lookup). The font developer defines the Lookup sequence in the Lookup array to control the order in which a text-processing client applies lookup data to glyph substitution and positioning operations. LookupCount specifies the total number of Lookup table offsets in the array.</P>
Example 4 at the end of this chapter shows three ligature lookups in the LookupList table.</P>
LookupList table</P>

<TABLE COLS="3" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="69pt" VALIGN="TOP"><COL WIDTH="121pt" VALIGN="TOP"><COL WIDTH="249pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Type</P></TD><TD VALIGN="TOP"><P>Name</P></TD><TD VALIGN="TOP"><P>Description</P></TD></TR><TR><TD VALIGN="TOP"><P>uint16</P></TD><TD VALIGN="TOP"><P>LookupCount</P></TD><TD VALIGN="TOP"><P>Number of lookups in this table</P></TD></TR><TR><TD VALIGN="TOP"><P>Offset</P></TD><TD VALIGN="TOP"><P>ð Lookup[LookupCount]</P></TD><TD VALIGN="TOP"><P>Array of offsets to Lookup tables </P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>—from beginning of LookupList</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>—zero based (first lookup is Lookup index = 0)</P></TD></TR></TBODY></TABLE>
<BR></P><H4><A NAME="sec3"></A>Lookup Table</H4>A Lookup table (Lookup) defines the specific conditions, type, and results of a substitution or positioning action that is used to implement a feature. For example, a substitution operation requires a list of target glyph indices to be replaced, a list of replacement glyph indices, and a description of the type of substitution action.</P>
Each Lookup table may contain only one type of information (LookupType), determined by whether the lookup is part of a GSUB or GPOS table. GSUB supports five LookupTypes, and GPOS supports seven LookupTypes (for details about LookupTypes, see the GSUB and GPOS chapters of the document).</P>
Each LookupType is defined with one or more subtables, and each subtable definition provides a different representation format. The format is determined by the content of the information required for an operation and by required storage efficiency. When glyph information is best presented in more than one format, a single lookup may contain more than one subtable, as long as all the subtables are the same LookupType. For example, within a given lookup, a glyph index array format may best represent one set of target glyphs, whereas a glyph index range format may be better for another set of target glyphs.</P>
During text processing, a client applies a lookup to each glyph in the string before moving to the next lookup. Once the client finds a target glyph index or context in a subtable and substitutes or positions the glyph, the lookup is completed for that glyph.</P>
A Lookup table contains a LookupType, specified as an integer, that defines the type of information stored in the lookup. The LookupFlag specifies lookup qualifiers that assist a text-processing client in substituting or positioning glyphs. The SubTableCount specifies the total number of SubTables. The SubTable array specifies offsets, measured from the beginning of the Lookup table, to each SubTable enumerated in the SubTable array.</P>
Lookup table</P>

<TABLE COLS="3" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="69pt" VALIGN="TOP"><COL WIDTH="121pt" VALIGN="TOP"><COL WIDTH="245pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Type</P></TD><TD VALIGN="TOP"><P>Name</P></TD><TD VALIGN="TOP"><P>Description</P></TD></TR><TR><TD VALIGN="TOP"><P>uint16</P></TD><TD VALIGN="TOP"><P>LookupType</P></TD><TD VALIGN="TOP"><P>Different enumerations for GSUB and GPOS</P></TD></TR><TR><TD VALIGN="TOP"><P>uint16</P></TD><TD VALIGN="TOP"><P>LookupFlag</P></TD><TD VALIGN="TOP"><P>Lookup qualifiers</P></TD></TR><TR><TD VALIGN="TOP"><P>uint16</P></TD><TD VALIGN="TOP"><P>SubTableCount</P></TD><TD VALIGN="TOP"><P>Number of SubTables for this lookup</P></TD></TR><TR><TD VALIGN="TOP"><P>Offset</P></TD><TD VALIGN="TOP"><P>ð SubTable</P></TD><TD VALIGN="TOP"><P>Array of offsets to SubTables</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>[SubTableCount]</P></TD><TD VALIGN="TOP"><P>—from beginning of Lookup table</P></TD></TR></TBODY></TABLE>
<BR></P>The LookupFlag uses four bits: </P>
The first bit, RightToLeft, is set when the text is written from right to left. This bit defines the order in which lookups specify glyph sequences.</P>
The next three bits—IgnoreBaseGlyphs, IgnoreLigatures, and IgnoreMarks—are set to specify additional instructions for applying a lookup to a glyph string. </P>
LookupFlag bit enumeration</P>

<TABLE COLS="3" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="69pt" VALIGN="TOP"><COL WIDTH="121pt" VALIGN="TOP"><COL WIDTH="245pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Mask</P></TD><TD VALIGN="TOP"><P>Name</P></TD><TD VALIGN="TOP"><P>Description</P></TD></TR><TR><TD VALIGN="TOP"><P>0x0001</P></TD><TD VALIGN="TOP"><P>RightToLeft</P></TD><TD VALIGN="TOP"><P>If set, implied glyph order is right to left</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>—otherwise, glyph order is left to right</P></TD></TR><TR><TD VALIGN="TOP"><P>0x0002</P></TD><TD VALIGN="TOP"><P>IgnoreBaseGlyphs</P></TD><TD VALIGN="TOP"><P>If set, skips over base glyphs</P></TD></TR><TR><TD VALIGN="TOP"><P>0x0004</P></TD><TD VALIGN="TOP"><P>IgnoreLigatures</P></TD><TD VALIGN="TOP"><P>If set, skips over ligatures</P></TD></TR><TR><TD VALIGN="TOP"><P>0x0008</P></TD><TD VALIGN="TOP"><P>IgnoreMarks</P></TD><TD VALIGN="TOP"><P>If set, skips over combining marks</P></TD></TR><TR><TD VALIGN="TOP"><P>0xFFF0</P></TD><TD VALIGN="TOP"><P>Reserved</P></TD><TD VALIGN="TOP"><P>For future use</P></TD></TR></TBODY></TABLE>
<BR></P>For example, in Arabic text, a character string might have the pattern &lt;base character - mark character - base character&gt;. That string could be converted into a ligature composed of two components, one for each base character, with the combining mark glyph over the first component. To produce this ligature, the font developer would set the IgnoreMarks bit to tell the client to ignore the mark, substitute the ligature glyph first, and then position the mark glyph over the ligature. Alternatively, a lookup which did not set the IgnoreMarks bit could be used to describe a three-component ligature glyph, composed of the first base glyph, the mark glyph, and the second base glyph.</P></BODY></HTML>

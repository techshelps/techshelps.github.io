<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Managing exceptions</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
</OBJECT></FORM>
<H2>Managing exceptions</H2>DELTA instructions can be used to alter the outline of a glyph at a particular size. They are generally used to turn on or off specific pixels. Delta instructions work by moving points (DELTAP's) or by changing a value in the Control Value Table (DELTAC's). </P>
More formally, the DELTA instructions take a variable number of arguments from the stack and allow the use of an exception of the form: at size <I>x</I> apply the movement d to point p (or at size <I>x</I> add or subtract an amount less than or equal to the Control Value Table entry c). DELTAs take a list of exceptions of the form: relative ppem value, the magnitude of the exception and the point number to which the exception is to be applied.</P>
Each DELTA instruction works on a range of sizes as specified below. As a result, sizes are specified in relative pixels per em (ppem), that is relative to the delta_base. The default value for delta_base is 9 ppem.  To set delta_base to another value, use the SDB  instruction.</P>
The DELTAP1 and DELTAC1 instructions allow values to be changed for glyphs at 9 through 24 ppem, assuming the default value for delta_base. Lowering the value for delta_base allows you to invoke exceptions at a smaller number of ppem.</P>
DELTAP2 and DELTAC2 are triggered at 16 ppem higher than the value set for DELTAP1 and DELTAC1, and consequently the formula for the relative ppem is</P>
ppem - 16 - delta_base. </P>
DELTAP3 and DELTAC3 are triggered at 16 ppem higher than the value set for DELTAP2 and DELTAC2, or 32 ppem higher than the value set for DELTAP1 and DELTAC1, and consequently the formula for the relative ppem is: </P>
ppem - 32 - delta_base.  </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="369pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>DELTA*1</P></TD><TD VALIGN="TOP"><P>delta_base through delta_base + 15 ppem</P></TD></TR><TR><TD VALIGN="TOP"><P>DELTA*2</P></TD><TD VALIGN="TOP"><P>delta_base + 16 ppem through delta_base + 31 ppem</P></TD></TR><TR><TD VALIGN="TOP"><P>DELTA*3</P></TD><TD VALIGN="TOP"><P>delta_base + 32 ppem through delta_base + 47 ppem</P></TD></TR></TBODY></TABLE>
<BR></P>In specifying a DELTA instruction, the high 4 bits of arg1 describe the relative ppem value that will activate the exception. </P>
The low 4 bits of arg1 describe the magnitude of the exception. The amount the point moves is a function of the exception stated and the Graphics State variable delta_shift.  To set delta_shift, use the SDS instruction. </P>
<P><img src="13892.gif"></P>
<P>Note: </P>
<P> Always observe that DELTA instructions expect the argument list to be sorted according to ppem. The lowest ppem should be deepest on the stack, and the highest ppem should be topmost on the stack. </P>
In the descriptions of the instructions that follow, pi is a point number, ci is a Control Value Table entry number and argi is a byte composed of two parts: the relative ppem (ppem – delta_base) and the magnitude of the exception.</P>
Increasing the delta_shift will allow for more fine control over pixel movement at the sacrifice of total range of movement. A step is the minimal amount that a delta instruction can move a point. Points can be moved in integral multiples of steps. </P>
The size of a step is 1 divided by 2 to the power delta_shift. The range of movement produced by a given delta_shift can be calculated by taking the number of steps allowed (16) and dividing it by 2 to the power delta_shift. For example, a delta_shift equal to 2 allows the smallest movement to be ± 1/4 pixel (because 22 equals 4) and the largest movement to be ± 2 pixels (16/4 = 4 pixels of movement). A delta_shift of 5 allows the smallest movement to be ± 1/32 pixel (because 25 equals 32), but the largest movement is limited to ± 1/4 pixel. (16/32  = 1/2 a pixel of movement).</P>
Internally, the value obtained for the exception is stored as a 4 bit binary number. As a result, the desired output range must be converted to a number between 0 and 15 before being converted to binary. Here is the internal remapping table for the DELTA instructions. </P>
<P>Note:</P>
<P>that zero is lacking in the output range.   </P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="104pt" VALIGN="TOP"><COL WIDTH="35pt" VALIGN="TOP"><COL WIDTH="135pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Number of Steps</P></TD><TD VALIGN="TOP"><P><SPAN CLASS="Symbol">Ú</SPAN></P></TD><TD VALIGN="TOP"><P>Exception</P></TD></TR><TR><TD VALIGN="TOP"><P>-8</P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>0</P></TD></TR><TR><TD VALIGN="TOP"><P>-7</P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>1</P></TD></TR><TR><TD VALIGN="TOP"><P>-6</P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>2</P></TD></TR><TR><TD VALIGN="TOP"><P>-5</P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>3</P></TD></TR><TR><TD VALIGN="TOP"><P>-4</P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>4</P></TD></TR><TR><TD VALIGN="TOP"><P>-3</P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>5</P></TD></TR><TR><TD VALIGN="TOP"><P>-2</P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>6</P></TD></TR><TR><TD VALIGN="TOP"><P>-1</P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>7</P></TD></TR><TR><TD VALIGN="TOP"><P>1</P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>8</P></TD></TR><TR><TD VALIGN="TOP"><P>2</P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>9</P></TD></TR><TR><TD VALIGN="TOP"><P>3</P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>10</P></TD></TR><TR><TD VALIGN="TOP"><P>4</P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>11</P></TD></TR><TR><TD VALIGN="TOP"><P>5</P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>12</P></TD></TR><TR><TD VALIGN="TOP"><P>6</P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>13</P></TD></TR><TR><TD VALIGN="TOP"><P>7</P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>14</P></TD></TR><TR><TD VALIGN="TOP"><P>8</P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>15</P></TD></TR></TBODY></TABLE>
<BR></P><H3><A NAME="sec0"></A>DELTA exception P1</H3>DELTAP1[ ]</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="370pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Code Range</P></TD><TD VALIGN="TOP"><P>0x5D</P></TD></TR><TR><TD VALIGN="TOP"><P>Pops</P></TD><TD VALIGN="TOP"><P>n: number of pairs of exception specifications and points (ULONG)</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>p1, arg1, p2, arg2, ..., pn, argn:  n pairs of exception specifications and points (pairs of ULONGs)</P></TD></TR><TR><TD VALIGN="TOP"><P>Pushes</P></TD><TD VALIGN="TOP"><P>–</P></TD></TR><TR><TD VALIGN="TOP"><P>Uses </P></TD><TD VALIGN="TOP"><P>zp0, delta_base, delta_shift</P></TD></TR></TBODY></TABLE>
<BR></P>DELTAP1 moves the specified points at the size and by the amount specified in the paired argument. An arbitrary number of points and arguments can be specified.</P>
The grouping [p<SUB>i</SUB>, arg<SUB>i</SUB>] can be executed n times. The value of arg<SUB>i</SUB> may vary between iterations. </P>
<H3><A NAME="sec1"></A>DELTA exception P2</H3>DELTAP2[ ]</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="370pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Code Range</P></TD><TD VALIGN="TOP"><P>0x71</P></TD></TR><TR><TD VALIGN="TOP"><P>Pops</P></TD><TD VALIGN="TOP"><P>n: number of pairs of exception specifications and points (ULONG)</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>p1, arg1, p2, arg2,  ..., pn, argn:  n pairs of exception specifications and points (pairs of ULONGs)</P></TD></TR><TR><TD VALIGN="TOP"><P>Pushes</P></TD><TD VALIGN="TOP"><P>–</P></TD></TR><TR><TD VALIGN="TOP"><P>Uses </P></TD><TD VALIGN="TOP"><P>zp0, delta_shift, delta_base</P></TD></TR></TBODY></TABLE>
<BR></P>DELTAP2 moves the specified points at the size and by the amount specified in the paired argument. An arbitrary number of points and arguments can be specified.</P>
The grouping [p<SUB>i</SUB>, arg<SUB>i</SUB>] can be executed n times. The value of arg<SUB>i</SUB> may vary between iterations. </P>
<H3><A NAME="sec2"></A>DELTA exception P3</H3>DELTAP3[ ] </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="370pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Code Range</P></TD><TD VALIGN="TOP"><P>0x72</P></TD></TR><TR><TD VALIGN="TOP"><P>Pops</P></TD><TD VALIGN="TOP"><P>n: number of pairs of exception specifications and points (ULONG)</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>p1, arg1, p2, arg2, ..., p<SUB>n</SUB>, arg<SUB>n</SUB>:  n pairs of exception specifications and points (pairs of ULONGs)</P></TD></TR><TR><TD VALIGN="TOP"><P>Pushes</P></TD><TD VALIGN="TOP"><P>–</P></TD></TR><TR><TD VALIGN="TOP"><P>Uses </P></TD><TD VALIGN="TOP"><P>zp0, delta_base, delta_shift</P></TD></TR></TBODY></TABLE>
<BR></P>DELTAP3 moves the specified points at the size and by the amount specified in the paired argument. An arbitrary number of point and arguments can be specified.</P>
The grouping [p<SUB>i</SUB>, arg<SUB>i</SUB>] can be executed n times. The value of arg<SUB>i</SUB>  may vary between iterations. </P>
<H3><A NAME="sec3"></A>DELTA exception C1 </H3>DELTAC1[ ]</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="370pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Code Range</P></TD><TD VALIGN="TOP"><P>0x73</P></TD></TR><TR><TD VALIGN="TOP"><P>Pops</P></TD><TD VALIGN="TOP"><P>n:  number of pairs of exception specifications and CVT entry numbers (ULONG)</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>c1, arg1, c2, arg2,..., c<SUB>n</SUB>, arg<SUB>n</SUB>: (pairs of ULONGs)</P></TD></TR><TR><TD VALIGN="TOP"><P>Pushes</P></TD><TD VALIGN="TOP"><P>–</P></TD></TR></TBODY></TABLE>
<BR></P>DELTAC1 changes the value in each CVT entry specified at the size and by the amount specified in its paired argument.</P>
The grouping [c<SUB>i</SUB>, arg<SUB>i</SUB>] can be executed n times. The value of arg<SUB>i</SUB> may vary between iterations. </P>
<H3><A NAME="sec4"></A>DELTA exception C2</H3>DELTAC2[ ]</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="370pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Code Range</P></TD><TD VALIGN="TOP"><P>0x74</P></TD></TR><TR><TD VALIGN="TOP"><P>Pops</P></TD><TD VALIGN="TOP"><P>n:  number of pairs of exception specifications and CVT entry numbers </P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>(ULONG)</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>c1, arg1, c2, arg2,..., c<SUB>n</SUB>, arg<SUB>n</SUB>: (pairs of ULONGs)</P></TD></TR><TR><TD VALIGN="TOP"><P>Pushes </P></TD><TD VALIGN="TOP"><P>–</P></TD></TR></TBODY></TABLE>
<BR></P>DELTAC2 changes the value in each CVT entry specified at the size and by the amount specified in its paired argument.</P>
The grouping [c<SUB>i</SUB>, arg<SUB>i</SUB>] can be executed n times. The value of arg<SUB>i</SUB> may vary between iterations.</P>
<H3><A NAME="sec5"></A>DELTA exception C3</H3>DELTAC3[ ]</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="370pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Code Range</P></TD><TD VALIGN="TOP"><P>0x75</P></TD></TR><TR><TD VALIGN="TOP"><P>Pops</P></TD><TD VALIGN="TOP"><P>n:  number of pairs of  CVT entry numbers and exception </P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>specifications (ULONG)</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>c1, arg1, c2 arg2,..., c<SUB>n</SUB>, arg<SUB>n</SUB>:  pairs of CVT entry number and exception</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>specifications (pairs of ULONGs)</P></TD></TR><TR><TD VALIGN="TOP"><P>Pushes</P></TD><TD VALIGN="TOP"><P>–</P></TD></TR></TBODY></TABLE>
<BR></P>DELTAC3 changes the value in each CVT entry specified at the size and by the amount specified in its paired argument.</P>
The grouping [c<SUB>i</SUB>, arg<SUB>i</SUB>] can be executed n times. The value of arg<SUB>i</SUB> may vary between iterations. </P>
<H3><A NAME="sec6"></A>Example of DELTA exceptions</H3>Assume that you want to move point 15 of your glyph 1/8 of a pixel along the freedom_vector at 12 pixels per em. Assume that delta_base has the default value 9 and delta_shift the default value 3.</P>
To specify that the exception should be made at 12 ppem, you subtract the delta_base, which is 9, from 12 and store the result, which is 3, in the high nibble of argi. </P>
To specify that the point is to be moved 1/8 of a pixel, multiply 1/8 by 2 raised to the power delta_shift. In other words, you multiply 1/8 by 2 raised to the third power (or 8)yielding 1. This value must be mapped to an internal value which using the table shown is 8. </P>
Putting these two results together yields a 3 in the high nibble and an 8 in the low nibble or 56 (00111000, in binary).</P>
To obtain this single exception, the top of the stack is: 56, 15, 1.</P>
    (iteration)</P>
    (point number)</P>
    (arg1: ppem and magnitude)</P>
Now if the interpreter executes</P>
DELTAP1[ ]</P>
then this instruction will move point 15 of the glyph (at 12 ppem) 1/8 of a pixel along the freedom_vector. </P></BODY></HTML>

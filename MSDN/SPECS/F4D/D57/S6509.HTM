<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Managing the Storage Area</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
</OBJECT></FORM>
<H3>Managing the Storage Area</H3>The interpreter Storage Area is a block of memory that can be used to store and later access 32 bit values. Instructions exist for writing values to the Storage Area and retrieving values from the Storage Area. Attempting to read a value from a storage location that has not previously had a value written to it will yield unpredictable results.</P>
<H4><A NAME="sec0"></A>Read Store</H4>RS[ ]</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="68pt" VALIGN="TOP"><COL WIDTH="368pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Code Range</P></TD><TD VALIGN="TOP"><P>0x43</P></TD></TR><TR><TD VALIGN="TOP"><P>Pops</P></TD><TD VALIGN="TOP"><P>location: Storage Area location (ULONG)</P></TD></TR><TR><TD VALIGN="TOP"><P>Pushes</P></TD><TD VALIGN="TOP"><P>value: Storage Area value (ULONG)</P></TD></TR><TR><TD VALIGN="TOP"><P>Gets</P></TD><TD VALIGN="TOP"><P>Storage Area value</P></TD></TR></TBODY></TABLE>
<BR></P>This instruction reads a 32 bit value from the Storage Area location popped from the stack and pushes the value read onto the stack. It pops an address from the stack and pushes the value found in that Storage Area location to the top of the stack. The number of available storage locations is specified in the maxProfile table in the font file.</P>
<P><img src="13741.gif"></P>
<I>Example:</I></P>
<P><img src="13742.gif"></P>
The effect of the RS instruction is to push the value 0x1B of the Storage Area onto the Stack.</P>
</P>
<H4><A NAME="sec1"></A>Write Store</H4>WS[ ]</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="68pt" VALIGN="TOP"><COL WIDTH="368pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Code Range</P></TD><TD VALIGN="TOP"><P>0x42</P></TD></TR><TR><TD VALIGN="TOP"><P>Pops</P></TD><TD VALIGN="TOP"><P>value: Storage Area value (ULONG)</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>location: Storage Area location (ULONG)</P></TD></TR><TR><TD VALIGN="TOP"><P>Pushes</P></TD><TD VALIGN="TOP"><P>–    -</P></TD></TR><TR><TD VALIGN="TOP"><P>Sets</P></TD><TD VALIGN="TOP"><P>Storage Area value</P></TD></TR></TBODY></TABLE>
<BR></P>This instruction writes a 32 bit value into the storage location indexed by <I>locations</I>. It works by popping a value and then a location from the stack. The value is placed in the Storage Area location specified by that address. The number of storage locations is specified in the maxProfile table in the font file.</P>
<P><img src="13743.gif"></P>
<I>Example:</I></P>
Write the value 0x0000 0118 to location 3A in the Storage Area.</P>
<P><img src="13744.gif"></P></BODY></HTML>

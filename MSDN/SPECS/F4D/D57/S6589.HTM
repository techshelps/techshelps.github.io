<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Defining and using functions and instructions</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
</OBJECT></FORM>
<H2>Defining and using functions and instructions</H2>The following instructions make it possible to define and use both functions and new instructions.</P>
 In addition to a simple call function, there is a loop and call function. </P>
An IDEF or instruction definition call makes it possible to patch old scalers in order to add newly defined instructions.</P>
<H3><A NAME="sec0"></A>Function DEFinition </H3>FDEF[ ] </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="370pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Code Range</P></TD><TD VALIGN="TOP"><P>0x2C</P></TD></TR><TR><TD VALIGN="TOP"><P>Pops</P></TD><TD VALIGN="TOP"><P>f:  function identifier number (integer in the range 0 to n-1 where n is specified in the 'maxp' table )</P></TD></TR><TR><TD VALIGN="TOP"><P>Pushes</P></TD><TD VALIGN="TOP"><P>–</P></TD></TR></TBODY></TABLE>
<BR></P>Marks the start of a function definition.  The argument f is a number that uniquely identifies this function. A function definition can appear only in the Font Program or the CVT program. Functions may not exceed 64K in size.</P>
<P><img src="13959.gif"></P>
<H3><A NAME="sec1"></A>END Function definition</H3>ENDF[ ]</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="370pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Code Range</P></TD><TD VALIGN="TOP"><P>0x2D</P></TD></TR><TR><TD VALIGN="TOP"><P>Pops</P></TD><TD VALIGN="TOP"><P>–</P></TD></TR><TR><TD VALIGN="TOP"><P>Pushes</P></TD><TD VALIGN="TOP"><P>–</P></TD></TR></TBODY></TABLE>
<BR></P>Marks the end of a function definition or an instruction definition.</P>
<H3><A NAME="sec2"></A>CALL function</H3>CALL[ ] </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="370pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Code Range</P></TD><TD VALIGN="TOP"><P>0x2B</P></TD></TR><TR><TD VALIGN="TOP"><P>Pops</P></TD><TD VALIGN="TOP"><P>f:  function identifier number (integer in the range 0 to n-1 where n is specified in the 'maxp' table )</P></TD></TR><TR><TD VALIGN="TOP"><P>Pushes</P></TD><TD VALIGN="TOP"><P>–</P></TD></TR></TBODY></TABLE>
<BR></P>Calls the function identified by the number f.</P>
<P><img src="13960.gif"></P>
<H3><A NAME="sec3"></A>LOOP and CALL function</H3>LOOPCALL[ ] </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="370pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Code Range</P></TD><TD VALIGN="TOP"><P>0x2A</P></TD></TR><TR><TD VALIGN="TOP"><P>Pops</P></TD><TD VALIGN="TOP"><P>f:  function number integer in the range 0 to n-1 where n is specified in the 'maxp' table</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>count:  number of times to call the function (signed word) </P></TD></TR><TR><TD VALIGN="TOP"><P>Pushes</P></TD><TD VALIGN="TOP"><P>–</P></TD></TR></TBODY></TABLE>
<BR></P>Calls the function f, count number of times.</P>
<P><img src="13961.gif"></P>
<I>Example:</I></P>
Assume the Font Program contains this:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="99pt" VALIGN="TOP"><COL WIDTH="266pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>PUSHB(000), 17 </P></TD><TD VALIGN="TOP"><P>push 17 onto the stack </P></TD></TR><TR><TD VALIGN="TOP"><P>FDEF[ ]</P></TD><TD VALIGN="TOP"><P>start defining function 17</P></TD></TR><TR><TD VALIGN="TOP"><P>  ...</P></TD><TD VALIGN="TOP"><P>contents of function</P></TD></TR><TR><TD VALIGN="TOP"><P>  ...</P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>ENDF[ ]</P></TD><TD VALIGN="TOP"><P>end the definition</P></TD></TR><TR><TD VALIGN="TOP"><P>PUSHB(000),17</P></TD><TD VALIGN="TOP"><P>push function number</P></TD></TR><TR><TD VALIGN="TOP"><P>PUSHB(000),5</P></TD><TD VALIGN="TOP"><P>push count</P></TD></TR><TR><TD VALIGN="TOP"><P>LOOPCALL[ ]</P></TD><TD VALIGN="TOP"><P>call function17, 5 times</P></TD></TR></TBODY></TABLE>
<BR></P><H3><A NAME="sec4"></A>Instruction DEFinition</H3>IDEF[ ]</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="370pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Code Range</P></TD><TD VALIGN="TOP"><P>0x89</P></TD></TR><TR><TD VALIGN="TOP"><P>Pops</P></TD><TD VALIGN="TOP"><P>opcode (8 bit code padded with zeroes to ULONG)</P></TD></TR><TR><TD VALIGN="TOP"><P>Pushes</P></TD><TD VALIGN="TOP"><P>–</P></TD></TR></TBODY></TABLE>
<BR></P>Begins the definition of an instruction. The instruction definition terminates when at ENDF, which is encountered in the instruction stream. Subsequent executions of the opcode popped will be directed to the contents of this instruction definition (IDEF). IDEFs should be defined in the Font Program or the CVT Program. An IDEF affects only undefined opcodes. If the opcode in question is already defined, the interpreter will ignore the IDEF. This is to be used as a patching mechanism for future instructions. Instructions may not exceed 64K in size.</P></BODY></HTML>

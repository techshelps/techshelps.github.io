<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Controlling regularization using the cut_in</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
</OBJECT></FORM>
<H2>Controlling regularization using the cut_in</H2>The TrueType language offers several means of coordinating values for glyph features across a font. Such coordination results in a uniformity of appearance known as regularization. Regularization is useful when the number of pixels available for a feature or glyph are few in number. It prevents small differences in the size of features from becoming vastly exaggerated by the change in the placement of pixel centers within a glyph outline. Regularization becomes a liability when small differences in the size or placement of features can be effectively represented by the number of available pixels. </P>
TrueType allows you the best of two worlds in making it possible to regularize features at small numbers of pixels per em while allowing the outline to revert to the original design once a sufficient number of pixels is available. There are two different ways to accomplish this goal. Each one uses a cut_in value. The first method uses the Control Value Table and the control_value_cut_in and allows you to coordinate values using entries in the CVT. This method allows for a variety of values to be coordinated. The second method takes regularization a step further and forces all values to revert to a single value. It relies on the single_width_cut_in and the single_width_value.</P>
<H3><A NAME="sec0"></A>Control_value_cut_in</H3>The control_value_cut_in makes it possible to limit the regularizing effects of the CVT to cases where the difference between the table value and the measurement taken from the original outline is sufficiently small. It allows the interpreter to choose, at some sizes, to use the CVT value while, at other sizes, to revert to the original outline. When the absolute difference between the value in the table and the measurement directly from the outline is greater than the cut_in value, the outline measurement is used. </P>
The effect of the control_value_cut_in is to allow regularization below a certain cut off point while allowing the subtlety of the design to take over at larger sizes.</P>
The cut_in value affects only instructions that refer to values in the CVT, the so called indirect instructions, MIRP and MIAP, and only if the third Boolean is set to TRUE. </P>

<TABLE COLS="6" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="70pt" VALIGN="TOP"><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="50pt" VALIGN="TOP"><COL WIDTH="50pt" VALIGN="TOP"><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="72pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><BR>CVT Value</P></TD><TD VALIGN="TOP"><P>Original Outline Value</P></TD><TD VALIGN="TOP"><P><BR>|Diff|</P></TD><TD VALIGN="TOP"><P><BR>cut_in</P></TD><TD VALIGN="TOP"><P>|Diff| &gt; cut_in<BR>use outline</P></TD><TD VALIGN="TOP"><P>|Diff| _ cut_in<BR>use CVT</P></TD></TR><TR><TD VALIGN="TOP"><P>93</P></TD><TD VALIGN="TOP"><P>80</P></TD><TD VALIGN="TOP"><P>13</P></TD><TD VALIGN="TOP"><P>17/16</P></TD><TD VALIGN="TOP"><P>80</P></TD><TD VALIGN="TOP"><P>–</P></TD></TR><TR><TD VALIGN="TOP"><P>100</P></TD><TD VALIGN="TOP"><P>99 5/16</P></TD><TD VALIGN="TOP"><P>11/16</P></TD><TD VALIGN="TOP"><P>17/16</P></TD><TD VALIGN="TOP"><P>–</P></TD><TD VALIGN="TOP"><P>100</P></TD></TR><TR><TD VALIGN="TOP"><P>97</P></TD><TD VALIGN="TOP"><P>95 15/16</P></TD><TD VALIGN="TOP"><P>17/16</P></TD><TD VALIGN="TOP"><P>17/16</P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>97</P></TD></TR></TBODY></TABLE>
<BR></P>In the example shown, the capital J dips below the base line in the original design. When the character is grid-fitted, however, the curve is held to the baseline by an indirect instruction. That instruction references the CVT, subject to the default cut_in value of 17/16. At this value the curve is held to the base line through 81 pixels per em but reverts to its original design at 82 pixels per em as shown.</P>
<P>Figure 2–8   81 pixels per em (left) and 82 pixels per em (right)</P>
<P><img src="13697.gif"><img src="13698.gif"></P>
The effect of the cut_in varies with its value. Decreasing the value of the cut_in will have the effect of causing the outline to revert to the original design at a smaller ppem value. Increasing the value of the cut_in will cause the outline to revert to the original design at a higher ppem value. </P>
<H3><A NAME="sec1"></A>The single_width_cut_in</H3>The single_width_cut_in is the distance difference at which the interpreter will ignore the values in the Control Value Table and in the outline in favor of a single-width value. It allows features to revert to a single predetermined size for small numbers of pixels per em.</P>
Having all controlled glyph features assume the same dimensions might be an advantage for certain fonts at very small grid sizes. The single_width_value is used when the absolute difference between the single_width_value and the original value is smaller than this single_width_cut_in.</P>
The default value for the single_width_cut_in is zero. In effect, this means that the default is ignore this cut_in value. Like the control_value_cut_in, the single_width_cut_in only applies to the indirect instructions.</P>
<H3><A NAME="sec2"></A>The single_width_value</H3>The single_width_value is used when  the difference between the Control Value Table and the single_width_value is less than the single_width_cut_in. For example, if the single_width_value were set to 2 pixels, features meeting the single_width_cut_in test would be regularized to be 2 pixels wide.</P></BODY></HTML>

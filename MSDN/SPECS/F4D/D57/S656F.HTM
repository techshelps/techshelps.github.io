<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Logical functions</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
</OBJECT></FORM>
<H2>Logical functions</H2>The TrueType instruction set includes a set of logical functions that can be used to test the value of a stack element or to compare the values of two stack elements. The logical functions compare 32 bit values (ULONG) and return a Boolean value to the top of the stack.</P>
To easily remember the order in which stack values are handled during logical operations, imagine writing the stack values from left to right, starting with the bottom value. Then insert the operator between the two furthest right elements. For example:</P>
<P><img src="13914.gif"></P>
GT a,b would be interpreted as (b&gt;a):</P>
c b &gt; a</P>
<H3><A NAME="sec0"></A>Less Than</H3>LT[ ]</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="370pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Code Range</P></TD><TD VALIGN="TOP"><P>0x50</P></TD></TR><TR><TD VALIGN="TOP"><P>Pops</P></TD><TD VALIGN="TOP"><P>e2: stack element (ULONG)</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>e1: stack element (ULONG)</P></TD></TR><TR><TD VALIGN="TOP"><P>Pushes</P></TD><TD VALIGN="TOP"><P>Boolean value (ULONG in the range [0,1])</P></TD></TR></TBODY></TABLE>
<BR></P>Pops e2 and e1 off the stack and compares them: if e1 is less than e2, 1, signifying TRUE, is pushed onto the stack. If e1 is not less than e2, 0, signifying FALSE, is placed onto the stack. </P>
<P><img src="13915.gif"></P>
<I>Example:</I></P>
LT[ ]</P>
<P><img src="13916.gif"></P>
<H3><A NAME="sec1"></A>Less Than or Equal</H3>LTEQ[ ]</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="370pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Code Range</P></TD><TD VALIGN="TOP"><P>0x51</P></TD></TR><TR><TD VALIGN="TOP"><P>Pops</P></TD><TD VALIGN="TOP"><P>e2: stack element (ULONG)</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>e1: stack element (ULONG)</P></TD></TR><TR><TD VALIGN="TOP"><P>Pushes</P></TD><TD VALIGN="TOP"><P>Boolean value (ULONG in the range [0,1])</P></TD></TR></TBODY></TABLE>
<BR></P>Pops e2 and e1 off the stack and compares them. If e1 is less than or equal to e2, 1, signifying TRUE, is pushed onto the stack. If e1 is not less than or equal to e2, 0, signifying FALSE, is placed onto the stack.</P>
<P><img src="13917.gif"></P>
<I>Example:</I></P>
LTEQ[ ] </P>
<P><img src="13918.gif"></P>
<H3><A NAME="sec2"></A>Greater Than</H3>GT[ ]</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="370pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Code Range</P></TD><TD VALIGN="TOP"><P>0x52</P></TD></TR><TR><TD VALIGN="TOP"><P>Pops</P></TD><TD VALIGN="TOP"><P>e2: stack element (ULONG)</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>e1: stack element (ULONG)</P></TD></TR><TR><TD VALIGN="TOP"><P>Pushes</P></TD><TD VALIGN="TOP"><P>Boolean value (ULONG in the range [0,1])</P></TD></TR></TBODY></TABLE>
<BR></P>Pops e1 and e2 off the stack and compares them. If e1 is greater than e2, 1, signifying TRUE, is pushed onto the stack. If e1 is not greater than e2, 0, signifying FALSE, is placed onto the stack.</P>
<P><img src="13919.gif"></P>
<I>Example:</I></P>
GT[ ]</P>
<P><img src="13920.gif"></P>
<H3><A NAME="sec3"></A>Greater Than or Equal</H3>GTEQ[ ] </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="370pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Code Range</P></TD><TD VALIGN="TOP"><P>0x53</P></TD></TR><TR><TD VALIGN="TOP"><P>Pops</P></TD><TD VALIGN="TOP"><P>e2: stack element (ULONG)</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>e1: stack element (ULONG)</P></TD></TR><TR><TD VALIGN="TOP"><P>Pushes</P></TD><TD VALIGN="TOP"><P>Boolean value (ULONG in the range [0,1])</P></TD></TR></TBODY></TABLE>
<BR></P>Pops e1 and e2 off the stack and compares them. If e1 is greater than or equal to e2, 1, signifying TRUE, is pushed onto the stack. If e1 is not greater than or equal to e2, 0, signifying FALSE, is placed onto the stack.</P>
<P><img src="13921.gif"></P>
<I>Example:</I></P>
GTEQ[ ]</P>
<P><img src="13922.gif"></P>
<H3><A NAME="sec4"></A>EQual</H3>EQ[ ] </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="370pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Code Range</P></TD><TD VALIGN="TOP"><P>0x54</P></TD></TR><TR><TD VALIGN="TOP"><P>Pops</P></TD><TD VALIGN="TOP"><P>e1: stack element (ULONG)</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>e2: stack element (ULONG)</P></TD></TR><TR><TD VALIGN="TOP"><P>Pushes</P></TD><TD VALIGN="TOP"><P>Boolean value (ULONG in the range [0,1])</P></TD></TR></TBODY></TABLE>
<BR></P>Pops e1 and e2 off the stack and compares them. If they are equal, 1, signifying TRUE is pushed onto the stack. If they are not equal, 0, signifying FALSE is placed onto the stack.</P>
<P><img src="13923.gif"></P>
<I>Example:</I></P>
EQ[ ]</P>
<P><img src="13924.gif"></P>
<H3><A NAME="sec5"></A>Not EQual</H3>NEQ[ ]</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="370pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Code Range</P></TD><TD VALIGN="TOP"><P>0x55</P></TD></TR><TR><TD VALIGN="TOP"><P>Pops</P></TD><TD VALIGN="TOP"><P>e1:stack element (ULONG)</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>e2: stack element (ULONG)</P></TD></TR><TR><TD VALIGN="TOP"><P>Pushes</P></TD><TD VALIGN="TOP"><P>Boolean value (ULONG in the range [0,1])</P></TD></TR></TBODY></TABLE>
<BR></P>Pops e1 and e2 from the stack and compares them. If they are not equal, 1, signifying TRUE, is pushed onto the stack. If they are equal, 0, signifying FALSE, is placed on the stack.</P>
<P><img src="13925.gif"></P>
<I>Example:</I></P>
<P><img src="13926.gif"></P>
<H3><A NAME="sec6"></A>ODD</H3>ODD[ ] </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="370pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Code Range</P></TD><TD VALIGN="TOP"><P>0x56</P></TD></TR><TR><TD VALIGN="TOP"><P>Pops</P></TD><TD VALIGN="TOP"><P>e1: stack element (F26Dot6)</P></TD></TR><TR><TD VALIGN="TOP"><P>Pushes</P></TD><TD VALIGN="TOP"><P>Boolean value</P></TD></TR><TR><TD VALIGN="TOP"><P>Uses</P></TD><TD VALIGN="TOP"><P>round_state</P></TD></TR></TBODY></TABLE>
<BR></P>Tests whether the number at the top of the stack is odd. Pops e1 from the stack and rounds it as specified by the round_state before testing it. After the value is rounded, it is shifted from a fixed point value to an integer value (any fractional values are ignored). If the integer value is odd, one, signifying TRUE, is pushed onto the stack. If it is even, zero, signifying FALSE is placed onto the stack. </P>
<P><img src="13927.gif"></P>
<I>Example:</I></P>
ODD[ ]</P>
This example assumes that round_state is RTG.</P>
<P><img src="13928.gif"></P>
<H3><A NAME="sec7"></A>EVEN</H3>EVEN[ ] </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="370pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Code Range</P></TD><TD VALIGN="TOP"><P>0x57</P></TD></TR><TR><TD VALIGN="TOP"><P>Pops</P></TD><TD VALIGN="TOP"><P>e1: stack element (F26Dot6)</P></TD></TR><TR><TD VALIGN="TOP"><P>Pushes</P></TD><TD VALIGN="TOP"><P>Boolean value (ULONG in the range [0,1])</P></TD></TR><TR><TD VALIGN="TOP"><P>Uses</P></TD><TD VALIGN="TOP"><P>round_state</P></TD></TR></TBODY></TABLE>
<BR></P>Tests whether the number at the top of the stack is even. Pops e1 off the stack and rounds it as specified by the round_state before testing it.  If the rounded number is even, one, signifying TRUE, is pushed onto the stack if it is odd, zero, signifying FALSE, is placed onto the stack. </P>
<P><img src="13929.gif"></P>
<I>Example:</I></P>
EVEN[ ]</P>
This example assumes that round_state is RTG.</P>
<P><img src="13930.gif"></P>
<H3><A NAME="sec8"></A>logical AND</H3>AND[ ]</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="370pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Code Range</P></TD><TD VALIGN="TOP"><P>0x5A</P></TD></TR><TR><TD VALIGN="TOP"><P>Pops</P></TD><TD VALIGN="TOP"><P>e1: stack element (ULONG)</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>e2: stack element (ULONG)</P></TD></TR><TR><TD VALIGN="TOP"><P>Pushes</P></TD><TD VALIGN="TOP"><P>( e1 and e2 ): logical and of e1 and e2 (ULONG)</P></TD></TR></TBODY></TABLE>
<BR></P>Pops e1 and e2 off the stack and pushes onto the stack the result of a logical and of the two elements. Zero is returned if either or both of the elements are FALSE (have the value zero). One is returned if both elements are TRUE (have a non zero value).</P>
<P><img src="13931.gif"></P>
<I>case 1:</I></P>
AND[ ]</P>
<P><img src="13932.gif"></P>
<I>case 2:</I></P>
AND[ ]</P>
<P><img src="13933.gif"></P>
<H3><A NAME="sec9"></A>logical OR</H3>OR[ ]</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="370pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Code Range</P></TD><TD VALIGN="TOP"><P>0x5B</P></TD></TR><TR><TD VALIGN="TOP"><P>Pops</P></TD><TD VALIGN="TOP"><P>e1: stack element (ULONG)</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>e2: stack element (ULONG)</P></TD></TR><TR><TD VALIGN="TOP"><P>Pushes</P></TD><TD VALIGN="TOP"><P>(e1 or e2): logical or of e1 and e2 (ULONG)</P></TD></TR></TBODY></TABLE>
<BR></P>Pops e1 and e2 off the stack and pushes onto the stack the result of a logical or operation between the two elements. Zero is returned if both of the elements are FALSE. One is returned if either both of the elements are TRUE.</P>
<P><img src="13934.gif"></P>
<I>Example:</I></P>
<I>case 1:</I></P>
OR[ ]</P>
<P><img src="13935.gif"></P>
<I>case 2:</I></P>
OR[ ]</P>
<P><img src="13936.gif"></P>
<H3><A NAME="sec10"></A>logical NOT</H3>NOT[ ] </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="370pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Code Range</P></TD><TD VALIGN="TOP"><P>0x5C</P></TD></TR><TR><TD VALIGN="TOP"><P>Pops</P></TD><TD VALIGN="TOP"><P>e: stack element (ULONG)</P></TD></TR><TR><TD VALIGN="TOP"><P>Pushes</P></TD><TD VALIGN="TOP"><P>(not e): logical negation of e (ULONG)</P></TD></TR></TBODY></TABLE>
<BR></P>Pops e off the stack and returns the result of a logical NOT operation performed on e. If originally zero, one is pushed onto the stack if originally nonzero, zero is pushed onto the stack.</P>
<P><img src="13937.gif"></P>
<I>Example:</I></P>
<I>case 1:</I></P>
<P><img src="13938.gif"></P>
<I>case 2:</I></P>
<P><img src="13939.gif"></P></BODY></HTML>

<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Data types</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
</OBJECT></FORM>
<H3>Data types</H3><H4><A NAME="sec0"></A>The instruction stream</H4>Instruction opcodes are always bytes. Values in the instruction stream are bytes. </P>
<H4><A NAME="sec1"></A>The stack</H4>Values pushed onto the stack or popped from the stack are always 32 bit quantities (LONG or ULONG). When values that are less than 32 bits are pushed onto the stack, bytes are expanded to 32 bit quantities by padding the upper bits with zeroes and words are sign extended to 32 bits. In cases where two instruction stream bytes are combined to form a word, the high order bits appear first in the instruction stream.</P>
<P>Note:</P>
<P>On a 16-bit system, such as Windows, all stack operations are on 16-bit values (SHORT or USHORT). Care must be taken to avoid overflow. It is also important to note that F26dot6 values (used for internal scalar math) are represented instead as 10 dot 6 values (i.e. the upper 16 bits are not supported).</P>
<P>Figure 3–2    A byte padded to a 32 bit long word (ULONG)</P>
<P><img src="13730.gif"></P>
<P>Figure 3–3    A word sign extended to a 32 bit long word (ULONG)</P>
<P><img src="13731.gif"></P>
All values on the stack are signed. Instructions, however, interpret these 32-bit quantities in a variety of ways. The interpreter variously understands quantities as integers and as fixed point numbers.  </P>
Values such as pixel coordinates are represented as 32-bit quantities consisting of 26 bits of whole number and 6 bits of fraction. These are fixed point numbers with the data type name F26Dot6. </P>
The setting of the freedom_vector and projection_vector are represented as 2.14 fixed point numbers. The upper 16 bits of the 32 bit quantity are ignored. </P>
A given set of 32 bits will have a different value depending upon how it is interpreted. The following  32 bit value interpreted as an integer has the value 264.</P>
<P><img src="13732.gif"></P>
The same 32 bit quantity interpreted as a F26Dot6 fixed point number has the value 4.125.</P>
<P><img src="13733.gif"></P>
The figure below gives several examples of expressing pixel values as 26.6 words.</P>
<P><img src="13734.gif"></P></BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<META HTTP-EQUIV="Content-Type" Content="text-html; Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Support for OLE/COM</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>



<h4>Support for OLE/COM</h4>
<p>
<b>Required:<BR></b>The application must be an OLE container or object server. Note that although an application can be both a server and a container, it does not have to be.</p>
<p>
<b>Tip: </b> If you want to host Java™ or ActiveX controls in your application, you should choose to be an OLE container.</p>
<p>
<b>Recommended:<BR></b>It is recommended that developers read the book &quot;Inside COM&quot; published by Microsoft Press.<b>  </b>In addition to the above requirements, the following behaviors are recommended for application utilizing OLE/COM:
<ul>
<li>
It is strongly recommended that the system provided property set implementation be used to read and write all property sets supported by an application.<br><br></li>
<li>
Applications should expose all functionality through Automation &amp; should use a dual interface to do so.  A dual interface combines an IDispatch interface with a VTBL interface.  For more information refer to the Automation Programmer's reference, Exposing ActiveX objects, in the Platform SDK.  This facilitates scripting your application from scripting languages.<br><br></li>
<li>
Applications that expose a public Automation interface should provide a type library.<br><br></li>
<li>
Applications should use component categories. (In particular, containers should indicate which standard component categories they support. Also, component categories should be used in preference to adding a key such as &quot;Control&quot; under a component's CLSID registry key.)  This recommendation allows an object to publish its capabilities to other objects.  For more information refer to the Platforms SDK, Control &amp; Container guidelines.<br><br></li>
<li>
Applications should support Active Accessibility.  For more information refer to information for application developers on <a href="http://microsoft.com/enable/">http://microsoft.com/enable/</a>.</li>
</ul>
<p>
<b>Exemption:<BR></b>If the product falls into one of the following categories it may be exempt from OLE support:  (Be sure to review section 7 of this Handbook for a complete description of this exemption.)
<ul>
<li>
Non-file based applications<br><br></li>
<li>
Java Applications<br><br></li>
<li>
Multimedia Applications such as a game or reference title<br><br></li>
<li>
Utilities</li>
</ul>
<dl>
<dt>
<b>Object Server Requirements:</b></dt>
<dd>
<b>Required:<BR></b>The user must be able to drag the object to any container, including other internal documents, the desktop, or documents in another OLE-supporting application.<p>
<b>Required:<BR></b>Object servers must pass basic OLE server functionality testing. You can test this by dragging an object created by your product into an application such as Microsoft Word.</p>
<p>
<b>Recommended:<BR></b>In addition to the above requirements, the following behaviors are recommended for Object servers:
<ul>
<li>
All object servers should be ActiveX Document servers.<br><br></li>
<li>
Object servers should close automatically after delivering their object.</li>
</ul>
<br>
</dd>
<dt>
<b>Container Requirements</b></dt>
<dd>
<b>Required:<BR></b>Your product must pass basic OLE container functionality testing. You can test this by creating an object in any standard OLE server, such as Microsoft Word, and dragging it into your product.<p>
<b>Required:<BR></b>Containers must provide an Object command on the Insert menu.</p>
<p>
<b>Required:<BR></b>Containers must implement the IDropTarget and/or IDropSource interfaces for drag-and-drop functionality.  This means that the application can accept drops from any IDropSource() or can drag into any IDropTarget(), or both.</p>
</dd>
</dl>
<p>
<b>Tip: </b>If you use the Windows 95 and Windows NT common controls, or the RichEdit control for your edit controls, your application already has support for Drag and Drop.</p>
<p>
<b>Recommended:<BR></b>In addition to the above requirements, the following behaviors are recommended for containers:
<ul>
<li>
All containers should be ActiveX Document containers.<br><br></li>
<li>
Containers should support ActiveX Accessibility.<br><br></li>
<li>
Containers should provide support for modifier keys.<br><br></li>
<li>
Containers should providing linking and in-place activation.<br><br></li>
<li>
Containers should support the structured storage compound file format. Summary information should be usable and complete as presented by the 32-bit Microsoft Windows operating system shell.</li>
</ul>
</FONT></BODY>
</HTML>

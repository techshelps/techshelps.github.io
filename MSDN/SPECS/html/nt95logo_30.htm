<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<META HTTP-EQUIV="Content-Type" Content="text-html; Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACPI/OnNow</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>



<h4>ACPI/OnNow</h4>
<p>
<b>Productivity applications can verify compliance with ACPI/OnNow <i>recommendations</i> with the following tests:</b>
<ol>
<li>
Open a file on a local hard drive, edit it (don't save), put the machine to sleep, wake the machine, and verify that the application continues to run, the file can be saved, etc.<br><br></li>
<li>
Open a file on a hard drive in a docking station, edit it (don't save), put the machine to sleep, undock the machine, wake the machine, and verify that the application correctly informs the user of the problem and leads them through steps to correct the problem.<br><br></li>
<li>
Open a file on the network, edit it (don't save), put the machine to sleep, wait a few minutes for the network connection to time out, wake the machine, and verify that the application continues to run, the file can be saved, etc.</li>
</ol>
<p>
<b>Games can verify these recommendations with the following tests:</b>
<ol>
<li>
While in game play, put the computer to sleep via the Sleep button or Start Menu.<br><br></li>
<li>
Verify the computer goes to sleep and sound stops playing.  <br><br></li>
<li>
Wake the computer.<br><br></li>
<li>
Verify the game play remains paused.  After resuming game play, the game continues to function normally (graphics, sound, and input devices continue to function as before).</li>
</ol>
<p>
<b>Event handling applications can verify these recommendations with the following tests:</b>
<ol>
<li>
In the Power control panel, set the system idle time as low as possible.<br><br></li>
<li>
Start the application and its event handling feature.<br><br></li>
<li>
Put the computer to sleep using the computer’s Sleep button or using the Start Menu.<br><br></li>
<li>
Start an event that will take longer to process than the system idle time.<br><br></li>
<li>
Verify that the computer does not go to sleep while the event is being processed, and after the event has been processed, the computer goes to sleep immediately.</li>
</ol>
<p>
<b>Tip:</b>  Applications that need the computer to wake up quickly to respond to an event can RequestWakeupLatency to tell the OS to configure the computer to wake as quickly as the computer allows.</p>
<p>
<b>Tip:</b>  Applications that need to wake the computer at a certain time can do so using the CreateWaitableTimer and associated APIs.</p>
<p>
<b>Tip:</b>  Messaging applications can display the number of new messages on the computer’s message waiting indicator panel by calling the SetMessageWaitingIndicator API.</p>
<p>
<b>Presentation applications can verify these recommendations with the following tests:</b>
<ol>
<li>
In the Power control panel, set the system idle time as low as possible.<br><br></li>
<li>
Start the application and play a presentation.<br><br></li>
<li>
Wait for a time longer than the system idle time and verify that the computer does not go to sleep and that the display does not blank during that time.</li>
</ol>
</FONT></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Conventions of an RTF Reader</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<form name="x"><object classid="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" name="iv" width=0 height=0></object></form>
<h1><a name="conventionsofrtfreader"></a>Conventions of an RTF Reader</h1>
<p>
The reader of an RTF stream is concerned with the following:
<ul type=disc>
<li>
Separating control information from plain text.<br><br></li>
<li>
Acting on control information.<br><br></li>
<li>
Collecting and properly inserting text into the document, as directed by the current group state.</li>
</ul>
<p>
Acting on control information is designed to be a relatively simple process. Some control information simply contributes special characters to the plain text stream. Other information serves to change the <i>program state</i>, which includes properties of the document as a whole, or to change any of a collection of <i>group states</i>, which apply to parts of the document.</p>
<p>
As previously mentioned, a group state can specify the following:
<ul type=disc>
<li>
The <i>destination</i>, or part of the document that the plain text is constructing.<br><br></li>
<li>
Character-formatting properties, such as bold or italic.<br><br></li>
<li>
Paragraph-formatting properties, such as justified or centered.<br><br></li>
<li>
Section-formatting properties, such as the number of columns.<br><br></li>
<li>
Table-formatting properties, which define the number of cells and dimensions of a table row.</li>
</ul>
<p>
In practice, an RTF reader will evaluate each character it reads in sequence as follows:
<ul type=disc>
<li>
If the character is an opening brace ({), the reader stores its current state on the stack. If the character is a closing brace (}), the reader retrieves the current state from the stack.<br><br></li>
<li>
If the character is a backslash (\), the reader collects the control word or control symbol and its parameter, if any, and looks up the control word or control symbol in a table that maps control words to actions. It then carries out the action prescribed in the table. (The possible actions are discussed below.) The read pointer is left before or after a control-word delimiter, as appropriate.<br><br></li>
<li>
If the character is anything other than an opening brace ({), closing brace (}), or backslash (\), the reader assumes that the character is plain text and writes the character to the current destination using the current formatting properties.</li>
</ul>
<p>
If the RTF reader cannot find a particular control word or control symbol in the look-up table described above, the control word or control symbol should be ignored. If a control word or control symbol is preceded by an opening brace ({), it is part of a group. The current state should be saved on the stack, but no state change should occur. When a closing brace (}) is encountered, the current state should be retrieved from the stack, thereby resetting the current state. If the \<b>*</b> control symbol precedes a control word, then it defines a destination group and was itself preceded by an opening brace ({). The RTF reader should discard all text up to and including the closing brace (}) that closes this group. All RTF readers must recognize all destinations defined in the March 1987 RTF Specification. The reader may skip past the group, but it is not allowed to simply discard the control word. Destinations defined since March 1987 are marked with the \* control symbol.</p>
<p class=atl>
<b>Note</b> All RTF readers must implement the \* control symbol so that they can read RTF files written by newer RTF writers.</p><p>
For control words or control symbols that the RTF reader can find in the look-up table, the possible actions are as follows.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=29%><b>Action</b></td>
<td width=71%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=29%>Change Destination</td>
<td width=71%>The RTF reader changes the destination to the destination described in the table entry. Destination changes are legal only immediately after an opening brace ({ ). (Other restrictions may also apply; for example, footnotes cannot be nested.) Many destination changes imply that the current property settings will be reset to their default settings. Examples of control words that change destination are <b>\footnote</b>, <b>\header</b>, <b>\footer</b>, <b>\pict</b>, <b>\info</b>, <b>\fonttbl</b>, <b>\stylesheet</b>, and <b>\colortbl</b>. This Application Note identifies all destination control words where they appear in control-word tables.</td>
</tr>
<tr valign=top>
<td width=29%>Change Formatting Property</td>
<td width=71%>The RTF reader changes the property as described in the table entry. The entry will specify whether a parameter is required. The "Appendix C: Index of RTF Control Words" section at the end of this Application Note also specifies which control words require parameters. If a parameter is needed and not specified, then a default value will be used. The default value used depends on the control word. If the control word does not specify a default, then all RTF readers should assume a default of 0.</td>
</tr>
<tr valign=top>
<td width=29%>Insert Special Character</td>
<td width=71%>The reader inserts into the document the character code or codes described in the table entry.</td>
</tr>
<tr valign=top>
<td width=29%>Insert Special Character and Perform Action</td>
<td width=71%>The reader inserts into the document the character code or codes described in the table entry and performs whatever other action the entry specifies. For example, when Microsoft Word interprets <b>\par</b>, a paragraph mark is inserted in the document and special code is run to record the paragraph properties belonging to that paragraph mark.</td>
</tr>
</table>
</BODY>
</HTML>

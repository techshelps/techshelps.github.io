<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Rtfreadr.c</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<form name="x"><object classid="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" name="iv" width=0 height=0></object></form>
<h1><a name="rtfreadrc"></a>Rtfreadr.c</h1>
<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;ctype.h&gt;
#include "rtftype.h"
#include "rtfdecl.h"

int cGroup;
bool fSkipDestIfUnk;
long cbBin;
long lParam;

RDS rds;
RIS ris;

CHP chp;
PAP pap;
SEP sep;
DOP dop;

SAVE *psave;
FILE *fpIn;

//
// %%Function: main
//
// Main loop. Initialize and parse RTF.
//
main(int argc, char *argv[])
{
 &nbsp;&nbsp; FILE *fp;
 &nbsp;&nbsp; int ec;

 &nbsp;&nbsp; fp = fpIn = fopen("test.rtf", "r");
 &nbsp;&nbsp; if (!fp)
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf ("Can't open test file!\n");
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 1;
 &nbsp;&nbsp; }
 &nbsp;&nbsp; if ((ec = ecRtfParse(fp)) != ecOK)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf("error %d parsing rtf\n", ec);
 &nbsp;&nbsp; else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf("Parsed RTF file OK\n");
 &nbsp;&nbsp; fclose(fp);
 &nbsp;&nbsp; return 0;
}

//
// %%Function: ecRtfParse
//
// Step 1:
// Isolate RTF keywords and send them to ecParseRtfKeyword;
// Push and pop state at the start and end of RTF groups;
// Send text to ecParseChar for further processing.
//

int
ecRtfParse(FILE *fp)
{
 &nbsp;&nbsp; int ch;
 &nbsp;&nbsp; int ec;
 &nbsp;&nbsp; int cNibble = 2;
 &nbsp;&nbsp; int b = 0;
 &nbsp;&nbsp; while ((ch = getc(fp)) != EOF)
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (cGroup &lt; 0)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ecStackUnderflow;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (ris == risBin)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // if we're parsing binary data, handle it directly
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ((ec = ecParseChar(ch)) != ecOK)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ec;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; switch (ch)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case '{':
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ((ec = ecPushRtfState()) != ecOK)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ec;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case '}':
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ((ec = ecPopRtfState()) != ecOK)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ec;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case '\\':
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ((ec = ecParseRtfKeyword(fp)) != ecOK)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ec;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case 0x0d:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case 0x0a:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // cr and lf are noise characters...
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; default:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (ris == risNorm)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ((ec = ecParseChar(ch)) != ecOK)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ec;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // parsing hex data
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (ris != risHex)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ecAssertion;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b = b &lt;&lt; 4;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (isdigit(ch))
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b += (char) ch - '0';
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (islower(ch))
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (ch &lt; 'a' || ch &gt; 'f')
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ecInvalidHex;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b += (char) ch - 'a';
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (ch &lt; 'A' || ch &gt; 'F')
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ecInvalidHex;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b += (char) ch - 'A';
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cNibble--;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!cNibble)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ((ec = ecParseChar(b)) != ecOK)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ec;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cNibble = 2;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b = 0;
ris = risNorm;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // end else (ris != risNorm)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // switch
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // else (ris != risBin)
 &nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // while
 &nbsp;&nbsp; if (cGroup &lt; 0)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ecStackUnderflow;
 &nbsp;&nbsp; if (cGroup &gt; 0)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ecUnmatchedBrace;
 &nbsp;&nbsp; return ecOK;
}

//
// %%Function: ecPushRtfState
//
// Save relevant info on a linked list of SAVE structures.
//

int
ecPushRtfState(void)
{
 &nbsp;&nbsp; SAVE *psaveNew = malloc(sizeof(SAVE));
 &nbsp;&nbsp; if (!psaveNew)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ecStackOverflow;

 &nbsp;&nbsp; psaveNew -&gt; pNext = psave;
 &nbsp;&nbsp; psaveNew -&gt; chp = chp;
 &nbsp;&nbsp; psaveNew -&gt; pap = pap;
 &nbsp;&nbsp; psaveNew -&gt; sep = sep;
 &nbsp;&nbsp; psaveNew -&gt; dop = dop;
 &nbsp;&nbsp; psaveNew -&gt; rds = rds;
 &nbsp;&nbsp; psaveNew -&gt; ris = ris;
 &nbsp;&nbsp; ris = risNorm;
 &nbsp;&nbsp; psave = psaveNew;
 &nbsp;&nbsp; cGroup++;
 &nbsp;&nbsp; return ecOK;
}

//
// %%Function: ecPopRtfState
//
// If we're ending a destination (that is, the destination is changing),
// call ecEndGroupAction.
// Always restore relevant info from the top of the SAVE list.
//

int
ecPopRtfState(void)
{
 &nbsp;&nbsp; SAVE *psaveOld;
 &nbsp;&nbsp; int ec;

 &nbsp;&nbsp; if (!psave)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ecStackUnderflow;

 &nbsp;&nbsp; if (rds != psave-&gt;rds)
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ((ec = ecEndGroupAction(rds)) != ecOK)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ec;
 &nbsp;&nbsp; }
 &nbsp;&nbsp; chp = psave-&gt;chp;
 &nbsp;&nbsp; pap = psave-&gt;pap;
 &nbsp;&nbsp; sep = psave-&gt;sep;
 &nbsp;&nbsp; dop = psave-&gt;dop;
 &nbsp;&nbsp; rds = psave-&gt;rds;
 &nbsp;&nbsp; ris = psave-&gt;ris;

 &nbsp;&nbsp; psaveOld = psave;
 &nbsp;&nbsp; psave = psave-&gt;pNext;
 &nbsp;&nbsp; cGroup--;
 &nbsp;&nbsp; free(psaveOld);
 &nbsp;&nbsp; return ecOK;
}

//
// %%Function: ecParseRtfKeyword
//
// Step 2:
// get a control word (and its associated value) and
// call ecTranslateKeyword to dispatch the control.
//

int
ecParseRtfKeyword(FILE *fp)
{
 &nbsp;&nbsp; int ch;
 &nbsp;&nbsp; char fParam = fFalse;
 &nbsp;&nbsp; char fNeg = fFalse;
 &nbsp;&nbsp; int param = 0;
 &nbsp;&nbsp; char *pch;
 &nbsp;&nbsp; char szKeyword[30];
 &nbsp;&nbsp; char szParameter[20];

 &nbsp;&nbsp; szKeyword[0] = '\0';
 &nbsp;&nbsp; szParameter[0] = '\0';
 &nbsp;&nbsp; if ((ch = getc(fp)) == EOF)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ecEndOfFile;
 &nbsp;&nbsp; if (!isalpha(ch))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // a control symbol; no delimiter.
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; szKeyword[0] = (char) ch;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; szKeyword[1] = '\0';
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ecTranslateKeyword(szKeyword, 0, fParam);
 &nbsp;&nbsp; }
 &nbsp;&nbsp; for (pch = szKeyword; isalpha(ch); ch = getc(fp))
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *pch++ = (char) ch;
 &nbsp;&nbsp; *pch = '\0';
 &nbsp;&nbsp; if (ch == '-')
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fNeg&nbsp; = fTrue;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ((ch = getc(fp)) == EOF)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ecEndOfFile;
 &nbsp;&nbsp; }
 &nbsp;&nbsp; if (isdigit(ch))
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fParam = fTrue;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // a digit after the control means we have a parameter
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (pch = szParameter; isdigit(ch); ch = getc(fp))
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *pch++ = (char) ch;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *pch = '\0';
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; param = atoi(szParameter);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (fNeg)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; param = -param;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lParam = atol(szParameter);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (fNeg)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; param = -param;
 &nbsp;&nbsp; }
 &nbsp;&nbsp; if (ch != ' ')
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ungetc(ch, fp);
 &nbsp;&nbsp; return ecTranslateKeyword(szKeyword, param, fParam);
}

//
// %%Function: ecParseChar
//
// Route the character to the appropriate destination stream.
//

int
ecParseChar(int ch)
{
 &nbsp;&nbsp; if (ris == risBin &amp;&amp; --cbBin &lt;= 0)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ris = risNorm;
 &nbsp;&nbsp; switch (rds)
 &nbsp;&nbsp; {
 &nbsp;&nbsp; case rdsSkip:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Toss this character.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ecOK;
 &nbsp;&nbsp; case rdsNorm:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Output a character. Properties are valid at this point.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ecPrintChar(ch);
 &nbsp;&nbsp; default:
 &nbsp;&nbsp; // handle other destinations....
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ecOK;
 &nbsp;&nbsp; }
}
//
// %%Function: ecPrintChar
//
// Send a character to the output file.
//

int
ecPrintChar(int ch)
{
 &nbsp;&nbsp; // unfortunately, we don't do a whole lot here as far as layout goes...
 &nbsp;&nbsp; putchar(ch);
 &nbsp;&nbsp; return ecOK;
}RTFACTN.C
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;stddef.h&gt;
#include &lt;ctype.h&gt;
#include "rtftype.h"
#include "rtfdecl.h"

// RTF parser tables

// Property descriptions
PROP rgprop [ipropMax] = {
 &nbsp;&nbsp; actnByte,&nbsp;&nbsp; propChp,&nbsp;&nbsp;&nbsp; offsetof(CHP, fBold),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // ipropBold
 &nbsp;&nbsp; actnByte,&nbsp;&nbsp; propChp,&nbsp;&nbsp;&nbsp; offsetof(CHP, fItalic),&nbsp;&nbsp;&nbsp;&nbsp; // ipropItalic
 &nbsp;&nbsp; actnByte,&nbsp;&nbsp; propChp,&nbsp;&nbsp;&nbsp; offsetof(CHP, fUnderline),&nbsp; // ipropUnderline
 &nbsp;&nbsp; actnWord,&nbsp;&nbsp; propPap,&nbsp;&nbsp;&nbsp; offsetof(PAP, xaLeft),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // ipropLeftInd
 &nbsp;&nbsp; actnWord,&nbsp;&nbsp; propPap,&nbsp;&nbsp;&nbsp; offsetof(PAP, xaRight),&nbsp;&nbsp;&nbsp;&nbsp; // ipropRightInd
 &nbsp;&nbsp; actnWord,&nbsp;&nbsp; propPap,&nbsp;&nbsp;&nbsp; offsetof(PAP, xaFirst),&nbsp;&nbsp;&nbsp;&nbsp; // ipropFirstInd
 &nbsp;&nbsp; actnWord,&nbsp;&nbsp; propSep,&nbsp;&nbsp;&nbsp; offsetof(SEP, cCols),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // ipropCols
 &nbsp;&nbsp; actnWord,&nbsp;&nbsp; propSep,&nbsp;&nbsp;&nbsp; offsetof(SEP, xaPgn),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // ipropPgnX
 &nbsp;&nbsp; actnWord,&nbsp;&nbsp; propSep,&nbsp;&nbsp;&nbsp; offsetof(SEP, yaPgn),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // ipropPgnY
 &nbsp;&nbsp; actnWord,&nbsp;&nbsp; propDop,&nbsp;&nbsp;&nbsp; offsetof(DOP, xaPage),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // ipropXaPage
 &nbsp;&nbsp; actnWord,&nbsp;&nbsp; propDop,&nbsp;&nbsp;&nbsp; offsetof(DOP, yaPage),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // ipropYaPage
 &nbsp;&nbsp; actnWord,&nbsp;&nbsp; propDop,&nbsp;&nbsp;&nbsp; offsetof(DOP, xaLeft),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // ipropXaLeft
 &nbsp;&nbsp; actnWord,&nbsp;&nbsp; propDop,&nbsp;&nbsp;&nbsp; offsetof(DOP, xaRight),&nbsp;&nbsp;&nbsp;&nbsp; // ipropXaRight
 &nbsp;&nbsp; actnWord,&nbsp;&nbsp; propDop,&nbsp;&nbsp;&nbsp; offsetof(DOP, yaTop),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // ipropYaTop
 &nbsp;&nbsp; actnWord,&nbsp;&nbsp; propDop,&nbsp;&nbsp;&nbsp; offsetof(DOP, yaBottom),&nbsp;&nbsp;&nbsp; // ipropYaBottom
 &nbsp;&nbsp; actnWord,&nbsp;&nbsp; propDop,&nbsp;&nbsp;&nbsp; offsetof(DOP, pgnStart),&nbsp;&nbsp;&nbsp; // ipropPgnStart
 &nbsp;&nbsp; actnByte,&nbsp;&nbsp; propSep,&nbsp;&nbsp;&nbsp; offsetof(SEP, sbk),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // ipropSbk
 &nbsp;&nbsp; actnByte,&nbsp;&nbsp; propSep,&nbsp;&nbsp;&nbsp; offsetof(SEP, pgnFormat),&nbsp;&nbsp; // ipropPgnFormat
 &nbsp;&nbsp; actnByte,&nbsp;&nbsp; propDop,&nbsp;&nbsp;&nbsp; offsetof(DOP, fFacingp),&nbsp;&nbsp;&nbsp; // ipropFacingp
 &nbsp;&nbsp; actnByte,&nbsp;&nbsp; propDop,&nbsp;&nbsp;&nbsp; offsetof(DOP, fLandscape),&nbsp; // ipropLandscape
 &nbsp;&nbsp; actnByte,&nbsp;&nbsp; propPap,&nbsp;&nbsp;&nbsp; offsetof(PAP, just),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // ipropJust
 &nbsp;&nbsp; actnSpec,&nbsp;&nbsp; propPap,&nbsp;&nbsp;&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // ipropPard
 &nbsp;&nbsp; actnSpec,&nbsp;&nbsp; propChp,&nbsp;&nbsp;&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // ipropPlain
 &nbsp;&nbsp; actnSpec,&nbsp;&nbsp; propSep,&nbsp;&nbsp;&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // ipropSectd
};

// Keyword descriptions
SYM rgsymRtf[] = {
//&nbsp; keyword&nbsp;&nbsp;&nbsp;&nbsp; dflt&nbsp;&nbsp;&nbsp; fPassDflt&nbsp;&nbsp; kwd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; idx
 &nbsp;&nbsp; "b",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdProp,&nbsp;&nbsp;&nbsp; ipropBold,
 &nbsp;&nbsp; "u",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdProp,&nbsp;&nbsp;&nbsp; ipropUnderline,
 &nbsp;&nbsp; "i",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdProp,&nbsp;&nbsp;&nbsp; ipropItalic,
 &nbsp;&nbsp; "li",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdProp,&nbsp;&nbsp;&nbsp; ipropLeftInd,
 &nbsp;&nbsp; "ri",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdProp,&nbsp;&nbsp;&nbsp; ipropRightInd,
 &nbsp;&nbsp; "fi",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdProp,&nbsp;&nbsp;&nbsp; ipropFirstInd,
 &nbsp;&nbsp; "cols",&nbsp;&nbsp;&nbsp;&nbsp; 1,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdProp,&nbsp;&nbsp;&nbsp; ipropCols,
 &nbsp;&nbsp; "sbknone",&nbsp; sbkNon, fTrue,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; kwdProp,&nbsp;&nbsp;&nbsp; ipropSbk,
 &nbsp;&nbsp; "sbkcol",&nbsp;&nbsp; sbkCol, fTrue,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; kwdProp,&nbsp;&nbsp;&nbsp; ipropSbk,
 &nbsp;&nbsp; "sbkeven",&nbsp; sbkEvn, fTrue,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; kwdProp,&nbsp;&nbsp;&nbsp; ipropSbk,
 &nbsp;&nbsp; "sbkodd",&nbsp;&nbsp; sbkOdd, fTrue,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; kwdProp,&nbsp;&nbsp;&nbsp; ipropSbk,
 &nbsp;&nbsp; "sbkpage",&nbsp; sbkPg,&nbsp; fTrue,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; kwdProp,&nbsp;&nbsp;&nbsp; ipropSbk,
 &nbsp;&nbsp; "pgnx",&nbsp;&nbsp;&nbsp;&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdProp,&nbsp;&nbsp;&nbsp; ipropPgnX,
 &nbsp;&nbsp; "pgny",&nbsp;&nbsp;&nbsp;&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdProp,&nbsp;&nbsp;&nbsp; ipropPgnY,
 &nbsp;&nbsp; "pgndec",&nbsp;&nbsp; pgDec,&nbsp; fTrue,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; kwdProp,&nbsp;&nbsp;&nbsp; ipropPgnFormat,
 &nbsp;&nbsp; "pgnucrm",&nbsp; pgURom, fTrue,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; kwdProp,&nbsp;&nbsp;&nbsp; ipropPgnFormat,
 &nbsp;&nbsp; "pgnlcrm",&nbsp; pgLRom, fTrue,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; kwdProp,&nbsp;&nbsp;&nbsp; ipropPgnFormat,
 &nbsp;&nbsp; "pgnucltr", pgULtr, fTrue,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; kwdProp,&nbsp;&nbsp;&nbsp; ipropPgnFormat,
 &nbsp;&nbsp; "pgnlcltr", pgLLtr, fTrue,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; kwdProp,&nbsp;&nbsp;&nbsp; ipropPgnFormat,
 &nbsp;&nbsp; "qc",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; justC,&nbsp; fTrue,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; kwdProp,&nbsp;&nbsp;&nbsp; ipropJust,
 &nbsp;&nbsp; "ql",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; justL,&nbsp; fTrue,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; kwdProp,&nbsp;&nbsp;&nbsp; ipropJust,
 &nbsp;&nbsp; "qr",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; justR,&nbsp; fTrue,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; kwdProp,&nbsp;&nbsp;&nbsp; ipropJust,
 &nbsp;&nbsp; "qj",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; justF,&nbsp; fTrue,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; kwdProp,&nbsp;&nbsp;&nbsp; ipropJust,
 &nbsp;&nbsp; "paperw",&nbsp;&nbsp; 12240,&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdProp,&nbsp;&nbsp;&nbsp; ipropXaPage,
 &nbsp;&nbsp; "paperh",&nbsp;&nbsp; 15480,&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdProp,&nbsp;&nbsp;&nbsp; ipropYaPage,
 &nbsp;&nbsp; "margl",&nbsp;&nbsp;&nbsp; 1800,&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdProp,&nbsp;&nbsp;&nbsp; ipropXaLeft,
 &nbsp;&nbsp; "margr",&nbsp;&nbsp;&nbsp; 1800,&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdProp,&nbsp;&nbsp;&nbsp; ipropXaRight,
 &nbsp;&nbsp; "margt",&nbsp;&nbsp;&nbsp; 1440,&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdProp,&nbsp;&nbsp;&nbsp; ipropYaTop,
 &nbsp;&nbsp; "margb",&nbsp;&nbsp;&nbsp; 1440,&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdProp,&nbsp;&nbsp;&nbsp; ipropYaBottom,
 &nbsp;&nbsp; "pgnstart", 1,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fTrue,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; kwdProp,&nbsp;&nbsp;&nbsp; ipropPgnStart,
 &nbsp;&nbsp; "facingp",&nbsp; 1,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fTrue,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; kwdProp,&nbsp;&nbsp;&nbsp; ipropFacingp,
 &nbsp;&nbsp; "landscape",1,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fTrue,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; kwdProp,&nbsp;&nbsp;&nbsp; ipropLandscape,
 &nbsp;&nbsp; "par",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdChar,&nbsp;&nbsp;&nbsp; 0x0a,
 &nbsp;&nbsp; "\0x0a",&nbsp;&nbsp;&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdChar,&nbsp;&nbsp;&nbsp; 0x0a,
 &nbsp;&nbsp; "\0x0d",&nbsp;&nbsp;&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdChar,&nbsp;&nbsp;&nbsp; 0x0a,
 &nbsp;&nbsp; "tab",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdChar,&nbsp;&nbsp;&nbsp; 0x09,
 &nbsp;&nbsp; "ldblquote",0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdChar,&nbsp;&nbsp;&nbsp; '"',
 &nbsp;&nbsp; "rdblquote",0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdChar,&nbsp;&nbsp;&nbsp; '"',
 &nbsp;&nbsp; "bin",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdSpec,&nbsp;&nbsp;&nbsp; ipfnBin,
 &nbsp;&nbsp; "*",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdSpec,&nbsp;&nbsp;&nbsp; ipfnSkipDest,
 &nbsp;&nbsp; "'",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdSpec,&nbsp;&nbsp;&nbsp; ipfnHex,
 &nbsp;&nbsp; "author",&nbsp;&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdDest,&nbsp;&nbsp;&nbsp; idestSkip,
 &nbsp;&nbsp; "buptim",&nbsp;&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdDest,&nbsp;&nbsp;&nbsp; idestSkip,
 &nbsp;&nbsp; "colortbl", 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdDest,&nbsp;&nbsp;&nbsp; idestSkip,
 &nbsp;&nbsp; "comment",&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdDest,&nbsp;&nbsp;&nbsp; idestSkip,
 &nbsp;&nbsp; "creatim",&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdDest,&nbsp;&nbsp;&nbsp; idestSkip,
 &nbsp;&nbsp; "doccomm",&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdDest,&nbsp;&nbsp;&nbsp; idestSkip,
 &nbsp;&nbsp; "fonttbl",&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdDest,&nbsp;&nbsp;&nbsp; idestSkip,
 &nbsp;&nbsp; "footer",&nbsp;&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdDest,&nbsp;&nbsp;&nbsp; idestSkip,
 &nbsp;&nbsp; "footerf",&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdDest,&nbsp;&nbsp;&nbsp; idestSkip,
 &nbsp;&nbsp; "footerl",&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdDest,&nbsp;&nbsp;&nbsp; idestSkip,
 &nbsp;&nbsp; "footerr",&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdDest,&nbsp;&nbsp;&nbsp; idestSkip,
 &nbsp;&nbsp; "footnote", 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdDest,&nbsp;&nbsp;&nbsp; idestSkip,
 &nbsp;&nbsp; "ftncn",&nbsp;&nbsp;&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdDest,&nbsp;&nbsp;&nbsp; idestSkip,
 &nbsp;&nbsp; "ftnsep",&nbsp;&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdDest,&nbsp;&nbsp;&nbsp; idestSkip,
 &nbsp;&nbsp; "ftnsepc",&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdDest,&nbsp;&nbsp;&nbsp; idestSkip,
 &nbsp;&nbsp; "header",&nbsp;&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdDest,&nbsp;&nbsp;&nbsp; idestSkip,
 &nbsp;&nbsp; "headerf",&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdDest,&nbsp;&nbsp;&nbsp; idestSkip,
 &nbsp;&nbsp; "headerl",&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdDest,&nbsp;&nbsp;&nbsp; idestSkip,
 &nbsp;&nbsp; "headerr",&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdDest,&nbsp;&nbsp;&nbsp; idestSkip,
 &nbsp;&nbsp; "info",&nbsp;&nbsp;&nbsp;&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdDest,&nbsp;&nbsp;&nbsp; idestSkip,
 &nbsp;&nbsp; "keywords", 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdDest,&nbsp;&nbsp;&nbsp; idestSkip,
 &nbsp;&nbsp; "operator", 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdDest,&nbsp;&nbsp;&nbsp; idestSkip,
 &nbsp;&nbsp; "pict",&nbsp;&nbsp;&nbsp;&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdDest,&nbsp;&nbsp;&nbsp; idestSkip,
 &nbsp;&nbsp; "printim",&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdDest,&nbsp;&nbsp;&nbsp; idestSkip,
 &nbsp;&nbsp; "private1", 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdDest,&nbsp;&nbsp;&nbsp; idestSkip,
 &nbsp;&nbsp; "revtim",&nbsp;&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdDest,&nbsp;&nbsp;&nbsp; idestSkip,
 &nbsp;&nbsp; "rxe",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdDest,&nbsp;&nbsp;&nbsp; idestSkip,
 &nbsp;&nbsp; "stylesheet",&nbsp;&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdDest,&nbsp;&nbsp;&nbsp; idestSkip,
 &nbsp;&nbsp; "subject",&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdDest,&nbsp;&nbsp;&nbsp; idestSkip,
 &nbsp;&nbsp; "tc",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdDest,&nbsp;&nbsp;&nbsp; idestSkip,
 &nbsp;&nbsp; "title",&nbsp;&nbsp;&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdDest,&nbsp;&nbsp;&nbsp; idestSkip,
 &nbsp;&nbsp; "txe",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdDest,&nbsp;&nbsp;&nbsp; idestSkip,
 &nbsp;&nbsp; "xe",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdDest,&nbsp;&nbsp;&nbsp; idestSkip,
 &nbsp;&nbsp; "{",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdChar,&nbsp;&nbsp;&nbsp; '{',
 &nbsp;&nbsp; "}",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdChar,&nbsp;&nbsp;&nbsp; '}',
 &nbsp;&nbsp; "\\",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse,&nbsp;&nbsp;&nbsp;&nbsp; kwdChar,&nbsp;&nbsp;&nbsp; '\\'
 &nbsp;&nbsp; };
int isymMax = sizeof(rgsymRtf) / sizeof(SYM);

//
// %%Function: ecApplyPropChange
//
// Set the property identified by _iprop_ to the value _val_.
//
//

int
ecApplyPropChange(IPROP iprop, int val)
{
 &nbsp;&nbsp; char *pb;

 &nbsp;&nbsp; if (rds == rdsSkip)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // If we're skipping text,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ecOK;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // don't do anything.

 &nbsp;&nbsp; switch (rgprop[iprop].prop)
 &nbsp;&nbsp; {
 &nbsp;&nbsp; case propDop:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pb = (char *)&amp;dop;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
 &nbsp;&nbsp; case propSep:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pb = (char *)&amp;sep;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
 &nbsp;&nbsp; case propPap:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pb = (char *)&amp;pap;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
 &nbsp;&nbsp; case propChp:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pb = (char *)&amp;chp;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
 &nbsp;&nbsp; default:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (rgprop[iprop].actn != actnSpec)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ecBadTable;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
 &nbsp;&nbsp; }
 &nbsp;&nbsp; switch (rgprop[iprop].actn)
 &nbsp;&nbsp; {
 &nbsp;&nbsp; case actnByte:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pb[rgprop[iprop].offset] = (unsigned char) val;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
 &nbsp;&nbsp; case actnWord:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (*(int *) (pb+rgprop[iprop].offset)) = val;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
 &nbsp;&nbsp; case actnSpec:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ecParseSpecialProperty(iprop, val);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
 &nbsp;&nbsp; default:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ecBadTable;
 &nbsp;&nbsp; }
 &nbsp;&nbsp; return ecOK;
}

//
// %%Function: ecParseSpecialProperty
//
// Set a property that requires code to evaluate.
//

int
ecParseSpecialProperty(IPROP iprop, int val)
{
 &nbsp;&nbsp; switch (iprop)
 &nbsp;&nbsp; {
 &nbsp;&nbsp; case ipropPard:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; memset(&amp;pap, 0, sizeof(pap));
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ecOK;
 &nbsp;&nbsp; case ipropPlain:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; memset(&amp;chp, 0, sizeof(chp));
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ecOK;
 &nbsp;&nbsp; case ipropSectd:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; memset(&amp;sep, 0, sizeof(sep));
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ecOK;
 &nbsp;&nbsp; default:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ecBadTable;
 &nbsp;&nbsp; }
 &nbsp;&nbsp; return ecBadTable;
}

//
// %%Function: ecTranslateKeyword.
//
// Step 3.
// Search rgsymRtf for szKeyword and evaluate it appropriately.
//
// Inputs:
// szKeyword:&nbsp;&nbsp; The RTF control to evaluate.
// param:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The parameter of the RTF control.
// fParam:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fTrue if the control had a parameter; (that is, if param is valid)
//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFalse if it did not.
//

int
ecTranslateKeyword(char *szKeyword, int param, bool fParam)
{
 &nbsp;&nbsp; int isym;

 &nbsp;&nbsp; // search for szKeyword in rgsymRtf

 &nbsp;&nbsp; for (isym = 0; isym &lt; isymMax; isym++)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (strcmp(szKeyword, rgsymRtf[isym].szKeyword) == 0)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
 &nbsp;&nbsp; if (isym == isymMax)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // control word not found
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (fSkipDestIfUnk)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // if this is a new destination
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rds = rdsSkip;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // skip the destination
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // else just discard it
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fSkipDestIfUnk = fFalse;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ecOK;
 &nbsp;&nbsp; }

 &nbsp;&nbsp; // found it!&nbsp; use kwd and idx to determine what to do with it.

 &nbsp;&nbsp; fSkipDestIfUnk = fFalse;
 &nbsp;&nbsp; switch (rgsymRtf[isym].kwd)
 &nbsp;&nbsp; {
 &nbsp;&nbsp; case kwdProp:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (rgsymRtf[isym].fPassDflt || !fParam)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; param = rgsymRtf[isym].dflt;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ecApplyPropChange(rgsymRtf[isym].idx, param);
 &nbsp;&nbsp; case kwdChar:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ecParseChar(rgsymRtf[isym].idx);
 &nbsp;&nbsp; case kwdDest:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ecChangeDest(rgsymRtf[isym].idx);
 &nbsp;&nbsp; case kwdSpec:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ecParseSpecialKeyword(rgsymRtf[isym].idx);
 &nbsp;&nbsp; default:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ecBadTable;
 &nbsp;&nbsp; }
 &nbsp;&nbsp; return ecBadTable;
}

//
// %%Function: ecChangeDest
//
// Change to the destination specified by idest.
// There's usually more to do here than this...
//

int
ecChangeDest(IDEST idest)
{
 &nbsp;&nbsp; if (rds == rdsSkip)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // if we're skipping text,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ecOK;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // don't do anything

 &nbsp;&nbsp; switch (idest)
 &nbsp;&nbsp; {
 &nbsp;&nbsp; default:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rds = rdsSkip;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // when in doubt, skip it...
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
 &nbsp;&nbsp; }
 &nbsp;&nbsp; return ecOK;
}

//
// %%Function: ecEndGroupAction
//
// The destination specified by rds is coming to a close.
// If there's any cleanup that needs to be done, do it now.
//

int
ecEndGroupAction(RDS rds)
{
 &nbsp;&nbsp; return ecOK;
}

//
// %%Function: ecParseSpecialKeyword
//
// Evaluate an RTF control that needs special processing.
//

int
ecParseSpecialKeyword(IPFN ipfn)
{
 &nbsp;&nbsp; if (rds == rdsSkip &amp;&amp; ipfn != ipfnBin)&nbsp; // if we're skipping, and it's not
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ecOK;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // the \bin keyword, ignore it.
 &nbsp;&nbsp; switch (ipfn)
 &nbsp;&nbsp; {
 &nbsp;&nbsp; case ipfnBin:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ris = risBin;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cbBin = lParam;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
 &nbsp;&nbsp; case ipfnSkipDest:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fSkipDestIfUnk = fTrue;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
 &nbsp;&nbsp; case ipfnHex:
 ris = risHex;
 break;
 &nbsp;&nbsp; default:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ecBadTable;
 &nbsp;&nbsp; }
 &nbsp;&nbsp; return ecOK;
}</code></pre>
</BODY>
</HTML>

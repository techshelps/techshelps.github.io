<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Write an RTF Reader</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<form name="x"><object classid="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" name="iv" width=0 height=0></object></form>
<h1><a name="howtowritertfreader"></a>How to Write an RTF Reader</h1>
<p>
There are three basic things that an RTF reader must do:
<ol>
<li>
Separate text from RTF controls.<br><br></li>
<li>
Parse an RTF control.<br><br></li>
<li>
Dispatch an RTF control.</li>
</ol>
<p>
Separating text from RTF controls is relatively simple, because all RTF controls begin with a backslash. Therefore, any incoming character that is not a backslash is text and will be handled as text. (Of course, what one <i>does</i> with that text may be relatively complicated.)</p>
<p>
Parsing an RTF control is also relatively simple. An RTF control is either (a) a sequence of alphabetic characters followed by an optional numeric parameter, or (b) a single non-alphanumeric character.<b> </b></p>
<p>
Dispatching an RTF control, on the other hand, is relatively complicated. A recursive-descent parser tends to be overly strict because RTF is intentionally vague about the order of various properties relative to one another. However, whatever method you use to dispatch an RTF control, your reader should do the following:
<ul type=disc>
<li>
Ignore control words you don’t understand.<p class=tl>
Many readers crash when they come across an unknown RTF control. Because Microsoft is continually adding new RTF controls, this limits an RTF reader to working with the RTF from one particular product (usually some version of Word for Windows).</P></li>
<li>
Always understand \*.<p class=tl>
One of the most important things an RTF reader can do is to understand the \* control. This control introduces a destination that is not part of the document. It tells the RTF reader that if the reader does not understand the next control word, then it should skip the entire enclosing group. If your reader follows this rule and the one above, your reader will be able to cope with any future change to RTF short of a complete rewrite.</P></li>
<li>
Remember that binary data can occur when you’re skipping RTF.<p class=tl>
A simple way to skip a group in RTF is to keep a running count of the opening braces that the reader has encountered in the RTF stream. When the reader sees an opening brace, it increments the count; when the reader sees a closing brace, it decrements the count.<b> </b>When the count becomes negative, the end of the group has been found. Unfortunately, this doesn’t work when the RTF file contains a <b>\bin</b> control; the reader must explicitly check each control word found to see if it’s a <b>\bin</b> control, and, if a <b>\bin</b> control is found, skip that many bytes before resuming its scanning for braces.</P></li>
</ul>
</BODY>
</HTML>

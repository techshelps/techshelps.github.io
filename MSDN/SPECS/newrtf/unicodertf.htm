<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Unicode RTF</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<form name="x"><object classid="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" name="iv" width=0 height=0></object></form>
<h1><a name="unicodertf"></a>Unicode RTF</h1>
<p>
Word 97 is a partially Unicode-enabled application. Text is handled using the 16-bit Unicode character encoding scheme. Expressing this text in RTF requires a new mechanism, because until this release (version 1.5), RTF has only handled 7-bit characters directly and 8-bit characters encoded as hexadecimal. The Unicode mechanism described here can be applied to any RTF destination or body text.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=17%>Control word</td>
<td width=83%>Meaning</td>
</tr>
<tr valign=top>
<td width=17%><b>\ansicpgN</b></td>
<td width=83%>This keyword represents the ANSI code page which is used to perform the Unicode to ANSI conversion when writing RTF text. <b><i>N</i></b> represents the code page in decimal. This is typically set to the default ANSI code page of the run-time environment (for example <b>\ansicpg1252</b> for U.S. Windows). The reader can use the same ANSI code page to convert ANSI text back to Unicode.<p>
This keyword should be emitted in the RTF header section right after the <b>\ansi</b>, <b>\mac</b>, <b>\pc</b> or <b>\pca</b> keyword.</p>
</td>
</tr>
<tr valign=top>
<td width=17%><b>\upr</b></td>
<td width=83%>This keyword represents a destination with two embedded destinations, one represented using Unicode and the other using ANSI. This keyword operates in conjunction with the <b>\ud </b>keyword to provide backward compatibility. The general syntax is as follows:<pre><code>{\upr{keyword ansi_text}{\*\ud{keyword Unicode_text}}}</code></pre>
<p>
Notice that this keyword-destination does not use the <b>\* </b>keyword; this forces the old RTF readers to pick up the ANSI representation and discard the Unicode one.</p>
</td>
</tr>
<tr valign=top>
<td width=17%><b>\ud</b></td>
<td width=83%>This is a destination which is represented in Unicode. The text is represented using a mixture of ANSI translation and use of <b>\u<i>N </i></b>keywords to represent characters which do not have the exact ANSI equivalent.</td>
</tr>
<tr valign=top>
<td width=17%><b>\u<i>N</i> </b></td>
<td width=83%>This keyword represents a single Unicode character which has no equivalent ANSI representation based on the current ANSI code page. <b><i>N</i></b> represents the Unicode character value expressed as a decimal number.<p>
This keyword is followed immediately by equivalent character(s) in ANSI representation. In this way, old readers will ignore the <b>\u<i>N</i></b> keyword and pick up the ANSI representation properly. When this keyword is encountered, the reader should ignore the next <b><i>N</i></b> characters, where <b><i>N</i> </b>corresponds to the last <b>\uc<i>N</i></b> value encountered.</p>
<p>
As with all RTF keywords, a keyword-terminating space may be present (before the ANSI characters) which is not counted in the characters to skip. While this is not likely to occur (or recommended), a <b>\bin</b> keyword, its argument, and the binary data that follows are considered one character for skipping purposes. If an RTF scope delimiter character (that is, an opening or closing brace) is encountered while scanning skippable data, the skippable data is considered to be ended before the delimiter. This makes it possible for a reader to perform some rudimentary error recovery. To include an RTF delimiter in skippable data, it must be represented using the appropriate control symbol (that is, escaped with a backslash,) as in plain text. Any RTF control word or symbol is considered a single character for the purposes of counting skippable characters.</p>
<p>
An RTF writer, when it encounters a Unicode character with no corresponding ANSI character, should output <b>\u<i>N</i></b> followed by the best ANSI representation it can manage. Also, if the Unicode character translates into an ANSI character stream with count of bytes differing from the current Unicode Character Byte Count, it should emit the <b>\uc<i>N</i></b> keyword prior to the <b>\u<i>N</i> </b>keyword<b> </b>to notify the reader of the change.</p>
<p>
RTF control words generally accept signed 16-bit numbers as arguments. For this reason, Unicode values greater than 32767 must be expressed as negative numbers.</p>
</td>
</tr>
<tr valign=top>
<td width=17%><b>\ucN</b></td>
<td width=83%>This keyword represents the number of bytes corresponding to a given <b>\u<i>N </i></b>Unicode character. This keyword may be used at any time, and values are scoped like character properties. That is, a <b>\uc<i>N </i></b>keyword applies only to text following the keyword, and within the same (or deeper) nested braces. On exiting the group, the previous <b>\uc</b> value is restored. The reader must keep a stack of counts seen and use the most recent one to skip the appropriate number of characters when it encounters a <b>\u<i>N </i></b>keyword. When leaving an RTF group which specified a <b>\uc</b> value, the reader must revert to the previous value. A default of 1 should be assumed if no <b>\uc</b> keyword has been seen in the current or outer scopes.<p>
A common practice is to emit no ANSI representation for Unicode characters within a Unicode destination context (that is, inside a <b>\ud</b> destination.). Typically, the destination will contain a <b>\uc0</b> control sequence. There is no need to reset the count on leaving the <b>\ud </b>destination as the scoping rules will ensure the previous value is restored.</p>
</td>
</tr>
</table><br>
<h2>Document Text</h2>
<p>
Document text should be emitted as ANSI characters. If there are Unicode characters that do not have corresponding ANSI characters, they should be output using the <b>\uc<i>N</i></b> and <b>\u<i>N</i></b> keywords.</p>
<p>
For example, the text <b>Lab&Gamma;</b><b>Value</b> (Unicode characters 0x004c, 0x0061, 0x0062, 0x0393, 0x0056, 0x0061, 0x006c, 0x0075, 0x0065) should be represented as follows (assuming a previous \<b>ucl)</b>:</p>
<pre><code>Lab\u915Gvalue</code></pre>
<h2>Destination Text</h2>
<p>
Destination text is defined as any text represented in an RTF destination. A good example is the bookmark name in the <b>\bkmkstart</b> destination.</p>
<p>
Any destination containing Unicode characters should be emitted as two destinations within a <b>\upr</b> destination to ensure that old readers can read it properly and that no Unicode character encoding is lost when read with a new reader.</p>
<p>
For example, a bookmark name <b>Lab&Gamma;</b><b>Value</b> (Unicode characters 0x004c, 0x0061, 0x0062, 0x0393, 0x0056, 0x0061, 0x006c, 0x0075, 0x0065) should be represented as follows:</p>
<pre><code>{\upr{\*\bkmkstart LabGValue}{\*\ud{\*\bkmkstart Lab\u915 Value}}}</code></pre>
<p>
The first sub-destination contains only ANSI characters and is the representation that old readers will see. The second sub-destination is a <b>\*\ud </b>destination which contains a second copy of the <b>\bkmkstart</b> destination. This copy can contain Unicode characters and is the representation that Unicode-aware readers must pay attention to, ignoring the ANSI-only version.</p>
</BODY>
</HTML>

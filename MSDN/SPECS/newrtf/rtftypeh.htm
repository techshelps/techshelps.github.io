<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Rtftype.h</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<form name="x"><object classid="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" name="iv" width=0 height=0></object></form>
<h1><a name="rtftypeh"></a>Rtftype.h</h1>
<p>
Rtftype.h begins by declaring a sample set of character, paragraph, section, and document properties. These structures are present to demonstrate how the dispatch routines can modify any particular property and are not actually used to format text.</p>
<p>
For example, the following enumeration describes which destination text should be routed to:</p>
<pre><code>typedef enum { rdsNorm, rdsSkip } RDS;</code></pre>
<p>
Because this is just a sample RTF reader, there are only two destinations; a more complicated reader would add an entry to this enumeration for each destination supported [for example, headers, footnotes, endnotes, comments (annotations), bookmarks, and pictures].</p>
<p>
The following enumeration describes the internal state of the RTF parser:</p>
<pre><code>typedef enum { risNorm, risBin, risHex } RIS;</code></pre>
<p>
This is entirely separate from the state of the dispatch routines and the destination state; other RTF readers may not necessarily have anything similar to this.</p>
<p>
The following structure encapsulates the state that must be saved at a group start and restored at a group end:</p>
<pre><code>typedef struct save
{
struct save *pNext;
CHP chp;
PAP pap;
SEP sep;
DOP dop;
RDS rds;
RIS ris;
} SAVE;</code></pre>
<p>
The following enumeration describes a set of classes for RTF controls:</p>
<pre><code>typedef enum {kwdChar, kwdDest, kwdProp, kwdSpec} KWD;</code></pre>
<p>
Use <b>kwdChar</b> for controls that represent special characters (such as <b>\-</b>, <b>\{</b>, or <b>\}</b>).</p>
<p>
Use <b>kwdDest</b> for controls that introduce RTF destinations.</p>
<p>
Use <b>kwdProp</b> for controls that modify some sort of property.</p>
<p>
Use <b>kwdSpec</b> for controls that need to run some specialized code.</p>
<p>
The following enumeration defines the number of PROP structures (described below) that will be used. There will typically be an <b>iprop</b> for every field in the character, paragraph, section, and document properties.</p>
<pre><code>typedef enum {ipropBold, ipropItalic, ipropUnderline, ipropLeftInd,
ipropRightInd, ipropFirstInd, ipropCols, ipropPgnX, ipropPgnY,
ipropXaPage, ipropYaPage, ipropXaLeft, ipropXaRight,
ipropYaTop, ipropYaBottom, ipropPgnStart, ipropSbk, 
ipropPgnFormat, ipropFacingp, ipropLandscape, ipropJust,
ipropPard, ipropPlain,
ipropMax} IPROP;</code></pre>
<p>
The following structure is a very compact way to describe how to locate the address of a particular value in one of the property structures:</p>
<pre><code>typedef enum {actnSpec, actnByte, actnWord} ACTN;
typedef enum {propChp, propPap, propSep, propDop} PROPTYPE;

typedef struct propmod
{
ACTN actn;
PROPTYPE prop;
int offset;
} PROP;</code></pre>
<p>
The <b>actn</b> field describes the width of the value being described: if the value is a byte, then <b>actn</b> is <b>actnByte;</b> if the value is a word, then <b>actn</b> is <b>actnWord;</b> if the value is neither a byte nor a word, then you can use <b>actnSpec</b> to indicate that some C code needs to be run to set the value. The <b>prop</b> field indicates which property structure is being described; <b>propChp</b> indicates that the value is located within the CHP structure; <b>propPap</b> indicates that the value is located within the PAP structure, and so on. Finally, the offset field contains the offset of the value from the start of the structure. The <b>offsetof() </b>macro is usually used to initialize this field.</p>
<p>
The following structure describes how to parse a particular RTF control:</p>
<pre><code>typedef enum {ipfnBin, ipfnHex, ipfnSkipDest } IPFN;
typedef enum {idestPict, idestSkip } IDEST;

typedef struct symbol
{
char *szKeyword;
int dflt;
bool fPassDflt;
KWD kwd;
int idx;
} SYM;</code></pre>
<p>
<b>szKeyword</b> points to the RTF control being described; <b>kwd</b><i> </i>describes the class of the particular RTF control (described above); <b>dflt</b> is the default value for this control, and <b>fPassDflt</b> should be nonzero if the value in <b>dflt</b> should be passed to the dispatch routine. (<b>fPassDflt</b> is only nonzero for control words that normally set a particular value.<b> </b>For example, the various section break controls typically have nonzero <b>fPassDflt</b> controls, but controls that take parameters should not.)</p>
<p>
<b>Idx</b> is a generalized index; its use depends on the <b>kwd</b> being used for this control.
<ul type=disc>
<li>
If <b>kwd</b> is <b>kwdChar,</b> then <b>idx</b> is the character that should be output.<br><br></li>
<li>
If <b>kwd</b> is <b>kwdDest,</b> then <b>idx</b> is the <b>idest</b> for the new destination.<br><br></li>
<li>
If <b>kwd</b> is <b>kwdProp,</b> then <b>idx</b> is the <b>iprop</b> for the appropriate property.<br><br></li>
<li>
If <b>kwd</b> is <b>kwdSpec,</b> then <b>idx</b> is an <b>ipfn</b> for the appropriate function.</li>
</ul>
<p>
With this structure, it is very simple to dispatch an RTF control word. Once the reader isolates the RTF control word and its (possibly associated) value, the reader then searches an array of SYM structures to find the RTF control word. If the control word is not found, the reader ignores it, unless the previous control was <b>\*</b>, in which case the reader must scan past an entire group.</p>
<p>
If the control word is found, the reader then uses the <b>kwd</b> value from the SYM structure to determine what to do. This is, in fact, exactly what the function <b>ecTranslateKeyword</b> in the file RTFACTN.C does. </p>
</BODY>
</HTML>

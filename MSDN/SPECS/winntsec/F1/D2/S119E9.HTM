<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GINA DLL Interface API</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

</OBJECT></FORM>
<H3>GINA DLL Interface API</H3>  </P>
This section defines the APIs that a GINA DLL must export. Winlogon calls these APIs.</P>
Each API description includes a section called <I>Workstation State</I> that describes which desktop GINA should have set for its thread when the call is made. This section indicates whether the desktop is locked, preventing the display of another desktop, or unlocked, allowing other desktops to be displayed.</P>
<A NAME="PT2"></A>WlxNegotiate</P>
Winlogon and a GINA DLL can use this function to determine which version of the interface each was written for.</P>
  </P>
<BR></P>
<pre><code>BOOL
WINAPI
WlxNegotiate(
    DWORD        dwWinlogonVersion,
    DWORD        *pdwDllVersion)</code></pre>
  </P>
<B>Parameters</B></P>
<B>dwWinlogonVersion</B></P>
Version supported by Winlogon.</P>
<B>pdwDllVersion</B></P>
Version supported by the GINA DLL. This version must be no greater than the version indicated in <I>dwWinlogonVersion.</I> This return value establishes which dispatch table will be passed to GINA in subsequent <B>WlxInitialize()</B> calls.</P>
<B>Workstation State</B></P>
<B>Thread Desktop:</B></P>
Winlogon Desktop</P>
<B>Workstation:</B></P>
Locked</P>
<B>Return Values</B></P>
<B>TRUE</B></P>
The GINA DLL can operate with this version of Winlogon. Continue initializing Winlogon.</P>
<B>FALSE</B></P>
The GINA DLL can not operate with this version of Winlogon. Winlogon (and the system) will not boot.</P>
<B>Sample</B></P>
  </P>
<BR></P>
<pre><code>WINAPI
WlxNegotiate(
    DWORD        dwWinlogonVersion,
    DWORD        *pdwDllVersion)
{
    if (dwWinlogonVersion &lt; WLX_CURRENT_VERSION)
        // panic: should never happen.
        return(FALSE);

    *pdwDllVersion = WLX_CURRENT_VERSION;
    return(TRUE)
}</code></pre>
  </P>
<A NAME="PT3"></A>WlxInitialize</P>
Winlogon calls this function once for each window station present on the machine. (Note that Windows NT 3.5 supports only one window station. This window station is called "<I>Winsta0</I>". Additional physical window stations may be supported in future releases.) This allows the DLL to initialize itself, including obtaining addresses of Winlogon support functions used by this DLL.</P>
The DLL can return a context pointer that will be passed in all future interactions from Winlogon to GINA. This allows GINA to keep global context associated with this window station.</P>
  </P>
<BR></P>
<pre><code>BOOL
WINAPI
WlxInitialize(
    LPWSTR        lpWinsta,
    HANDLE        hWlx,
    PVOID        pvReserved,
    PVOID        pWinlogonFunctions,
    PVOID        *pWlxContext)</code></pre>
  </P>
<B>Parameters</B></P>
<B>lpWinsta</B></P>
Points to the name of the window station being initialized.</P>
<B>hWlx</B></P>
Handle to Winlogon that must be provided in future calls related to this window station.</P>
<B>pvReserved</B></P>
Reserved.</P>
<B>pWinlogonFunctions</B></P>
Receives a pointer to a Winlogon function dispatch table. The contents of the table is dependent upon the GINA DLL version returned from the <B>WlxNegotiate()</B> call.<I> </I>The table does not change, so the GINA DLL can reference the table rather than copying it.</P>
<B>pWlxContext</B></P>
This is an OUT parameter. It allows GINA to return a 32-bit context value that will be provided in all future calls related to this window station. Generally the value returned will be something like a pointer to a context structure allocated by GINA for this window station.</P>
<B>Workstation State</B></P>
<B>Thread Desktop:</B></P>
Winlogon Desktop</P>
<B>Workstation:</B></P>
Locked</P>
<B>Return Values</B></P>
<B>True</B></P>
Indicates the Gina DLL successfully initialized.</P>
<B>False</B></P>
Indicates the Gina could not successfully initialize. If the DLL could not initialize, then the system will not boot.</P>
<B>Sample</B></P>
  </P>
<BR></P>
<pre><code>static    PWLX_DISPATCH_VERSION_1_0    pWinlogon;
VOID
WlxInitialize(
    LPWSTR        lpWinsta,
    HANDLE        hWlx,
    PVOID        pWinlogonFunctions,
    PVOID        *pContext)
{
    PGINA_CONTEXT pGinaContext;

    // allocate a context block for this window station
    AllocateAndInitGinaContext( &amp;pGinaContext, hWlx );
    (*pContext) = pGinaContext;

    // Save away where the dispatch table is
    pWinlogon = (PWLX_DISPATCH_VERSION_1_0)pWinlogonFunctions;

    // Any other initialization that the DLL needs, e.g. open a card
    // reader device

    // Optionally, at this point, call WlxSASNotify(), or return
}</code></pre>
  </P>
<A NAME="PT4"></A>WlxDisplaySASNotice</P>
Winlogon calls this function when there is no one logged on.</P>
  </P>
<BR></P>
<pre><code>VOID
WINAPI
WlxDisplaySASNotice(
    PVOID            pWlxContext)</code></pre>
  </P>
<B>Parameters</B></P>
<B>pWlxContext</B></P>
(IN parameter) Context value associated with this window station that GINA returned in the WlxInitialize() call.</P>
<B>Workstation State</B></P>
<B>Thread Desktop:</B></P>
Winlogon Desktop</P>
<B>Workstation:</B></P>
Locked</P>
<B>Return Values</B></P>
None</P>
<B>Sample</B></P>
  </P>
<BR></P>
<pre><code>VOID
WINAPI
WlxDisplaySASNotice(
    PVOID    pWlxContext)
{
    PGINA_CONTEXT    pContext;

    pContext = (PGINA_CONTEXT) pWlxContext;
    pContext-&gt;pWlxFuncs-&gt;WlxDialogBox(    pContext-&gt;hWlx,
                        pContext-&gt;hDllInstance,
                        MAKEINTRESOURCE(IDD_WELCOME_DIALOG),
                        NULL,
                        WelcomeDlgProc);
}</code></pre>
  </P>
<A NAME="PT5"></A>WlxLoggedOutSAS</P>
Winlogon calls this function when an SAS event is received and no one is logged on. This indicates that a logon attempt should be made.</P>
  </P>
<BR></P>
<pre><code>BOOL
WINAPI
WlxLoggedOutSas(
    PVOID            pWlxContext,
    DWORD            dwSasType,
    PLUID            pAuthenticationId,
    PSID            pLogonSid,
    PDWORD            pdwOptions,
    PHANDLE            phToken,
    PWLX_MPR_NOTIFY_INFO    pMprNotifyInfo,
    PVOID *            pProfile)</code></pre>
  </P>
<B>Parameters</B></P>
<B>pWlxContext</B></P>
(IN parameter) Context value associated with this window station that GINA returned in the <B>WlxInitialize()</B> call.</P>
<B>dwSasType</B></P>
(IN parameter) A value indicating what type of secure attention sequence was entered. Values below WLX_SAS_TYPE_MAX_MSFT_VALUE are used to define Microsoft standard secure attention sequences. Values above this value are for definition by GINA developers.</P>
<B>pAuthenticationId</B></P>
(IN parameter) The AuthenticationID associated with this logon. The GINA DLL should pass this value as the <I>LogonId</I> parameter to the <B>LsaLogonUser()</B> call. The pointer is good only until this routine returns. To keep the LUID value longer than that, the GINA DLL should copy it before returning.</P>
<B>pLogonSid</B></P>
(IN parameter) This parameter contains a pointer to a SID. This sid is unique to this logon session. Winlogon uses this SID to change the protection on the window station and application desktop so that the newly logged on user can access them. To ensure proper user shell access to these objects, the GINA DLL should include this SID in the <I>LocalGroups</I> parameter passed to <B>LsaLogonUser()</B>. Winlogon frees this SID upon return from this call, so if it is required by GINA after returning, a copy must be made in this routine.</P>
<B>pdwOptions</B></P>
(OUT parameter) Receives a set of logon options. These options are defined by the manifest constants named WLX_LOGON_OPT_xxx.</P>
<B>phToken</B></P>
(OUT parameter) Upon completion of a successful logon, receives a handle that must be filled in upon return if a logon was successfully performed. This handle value is typically received from <B>LsaLogonUser()</B>. Winlogon closes this handle when it is done with it, so if the GINA DLL should be able to access the token, it should make a duplicate of this handle.</P>
<B>pMprNotifyInfo</B></P>
(OUT parameter) This parameter contains a pointer to a structure for returning password information to other network providers. A GINA is not required to return this information. If a GINA returns password information, then it should fill in the pointers in the structure. Any NULL field in the structure will be ignored by Winlogon. The strings should be allocated individually by the GINA, and they will be freed by Winlogon. </P>
<B>pProfile</B></P>
 (OUT parameter) Upon return from a successful authentication, this field must point to one of the WLX_PROFILE_xxx structures. The first DWORD in the profile structure is used to indicate which of the WLX_PROFILE_xxx structures is being returned. The information in this structure is used by Winlogon to load the logged on user's profile. This structure, and any strings or buffers pointed to from withing this structure are freed by Winlogon when no longer needed.</P>
<B>Workstation State</B></P>
<B>Thread Desktop:</B></P>
Winlogon Desktop</P>
<B>Workstation:</B></P>
Locked</P>
<B>Return Values</B></P>
<B>WLX_SAS_ACTION_LOGON</B></P>
A user has logged on.</P>
<B>WLX_SAS_ACTION_NONE</B></P>
A logon attempt was unsuccessful or cancelled.</P>
<B>WLX_SAS_ACTION_SHUTDOWN</B></P>
The user requested the system be shut down.</P>
<B>Sample</B></P>
  </P>
<BR></P>
<pre><code>#define    LOCAL_GROUP_COUNT    (1)
WINAPI
WlxLoggedOutSas(
    PVOID            pWlxContext,
    DWORD            dwSasType,
    PLUID            pAuthenticationId,
    PSID            pLogonSid,
    PDWORD            pdwOptions,
    PHANDLE            phToken,
    PWLX_NPR_NOTIFY_INFO    pNprNotifyInfo,
    PVOID            pProfile)
{
    HANDLE        hToken;
    NTSTATUS    Status;
    INT        LengthLocalGroups;
    PTOKEN_GROUPS    LocalGroups;

    //
    // Gather credentials, e.g. from card reader
    //

    // Log the user on using LSA
    // Be sure to include the LogonSid in the token
    LengthLocalGroups = sizeof( TOKEN_GROUPS + 
                (LOCAL_GROUP_COUNT * sizeof(SID_AND_ATTRIBUTES_ARRAY)) );
    LocalGroups = (PTOKEN_GROUPS)Alloc(LengthLocalGroups);
    if (LocalGroups == NULL) return(FALSE);
    LocalGroups-&gt;GroupCount = LOCAL_GROUP_COUNT;
    LocalGroups-&gt;Groups[0].Sid = LogonSid;
    LocalGroups-&gt;Groups[0].Attributes =   SE_GROUP_ENABLED
                        | SE_GROUP_LOGON_ID
                        | SE_GROUP_MANDATORY
                        | SE_GROUP_ENABLED_BY_DEFAULT
    
    Status = LsaLogonUser(..,LocalGroups.., &amp;hToken,...);
    Free(LocalGroups);
    if (!NT_SUCCESS(Status))
    {
        // Fail the logon.  Note, one could also reprompt, handle expired
        // passwords, etc
        return (FALSE);
    }
    
    *phToken = hToken;
    *ppszPassword = ???;    // If you have a password, return one.
                // Otherwise, return NULL and MPR apps will not get any credentials
    return (TRUE);
}</code></pre>
  </P>
<A NAME="PT6"></A>WlxActivateUserShell</P>
Winlogon calls this function following a successful logon. Its purpose is to request GINA to activate the user shell program(s). Note that the user shell should be activated in this routine rather than in <B>WlxLoggedOffSas()</B> so that Winlogon has a chance to update its state, including setting workstation and desktop protections, before any logged-on user processes are allowed to run.</P>
  </P>
<BR></P>
<pre><code>BOOL
WINAPI
WlxActivateUserShell(
    PVOID            pWlxContext,
    PWSTR            pszDesktopName,
    PWSTR            pszMprLogonScripts,
    PVOID            pEnvironment)</code></pre>
  </P>
<B>Parameters</B></P>
<B>pWlxContext</B></P>
(IN parameter) Context value associated with this window station that GINA returned in the <B>WlxInitialize()</B> call.</P>
<B>pszDesktopName</B></P>
(IN parameter) Name of the desktop on which to start the shell. This should be supplied to <B>CreateProcess()</B> in the lpStartupInfo-&gt;lpDesktop field (q.v).</P>
<B>pszMprLogonScripts</B></P>
(IN parameter) Script names returned from the provider DLLs. Provider DLLs may return scripts to be executed during logon. The GINA may reject these, but Winlogon will provide them if they are there. </P>
<B>pEnvironment</B></P>
(IN parameter) Initial environment for the process. Winlogon creates this environment and hands it off to the GINA. The GINA can modify this environment before using it to initialize the user's shell.</P>
<B>Workstation State</B></P>
<B>Thread Desktop:</B></P>
Application Desktop</P>
<B>Workstation:</B></P>
Not Locked</P>
<B>Return Values</B></P>
<B>TRUE</B></P>
Indicates that the shell processes were started by the GINA DLL.</P>
<B>FALSE</B></P>
Indicates that the GINA could not start the shell, and that the logon session should be terminated by Winlogon.</P>
<B>Sample</B></P>
  </P>
<BR></P>
<pre><code>WINAPI
WlxActivateUserShell(
    PVOID            pWlxContext,
    PWSTR            pszDesktopName,
    PWSTR            pszMprLogonScript,
    PVOID            pEnvironment)
{
    BOOL st;

    st = GinaActivateShellSuspended(pGinaContext, pszDesktopName, pEnvironment);
    if (!st) {
        return (FALSE);    // Could not start shell.  Tell Winlogon to start a logoff
    }
    return(TRUE);
}</code></pre>
  </P>
<B>Notes</B></P>
The <I>pszDesktop</I> parameter should be passed to the <B>CreateProcess</B><I> </I>API through the field <I>lpDesktop</I> in the STARTUPINFO structure. This field is designated "Reserved for future use. Must be NULL." in the Win32 documentation, but pass this parameter in.</P>
<A NAME="PT7"></A>WlxLoggedOnSAS</P>
Winlogon calls this function when an SAS event is received, and there is a user logged on. This indicates that the user needs to talk to the security system. Note, this is distinguished from when the workstation is locked; see below.</P>
  </P>
<BR></P>
<pre><code>int
WINAPI
WlxLoggedOnSAS(
    PVOID            pWlxContext,
    DWORD            dwSasType,
    PVOID            pReserved)</code></pre>
  </P>
<B>Parameters</B></P>
<B>pWlxContext</B></P>
 (IN parameter) Context value associated with this window station that GINA returned in the <B>WlxInitialize()</B> call.</P>
<B>dwSasType</B></P>
 (IN parameter) A value indicating what type of secure attention sequence was entered. Values below WLX_SAS_TYPE_MAX_MSFT_VALUE are used to define Microsoft standard secure attention sequences. Values above this value are for definition by GINA developers.</P>
<B>pReserved</B></P>
(IN parameter) Reserved.</P>
<B>Workstation State</B></P>
<B>Thread Desktop:</B></P>
Winlogon Desktop</P>
<B>Workstation:</B></P>
Locked</P>
<B>Return Values</B></P>
<B>WLX_SAS_ACTION_NONE</B></P>
Return to the default desktop.</P>
<B>WLX_SAS_ACTION_LOCK_WKSTA</B></P>
Lock the workstation, wait for next SAS.</P>
<B>WLX_SAS_ACTION_LOGOFF</B></P>
Log the user off of the workstation.</P>
<B>WLX_SAS_ACTION_SHUTDOWN</B></P>
Log the user off and shutdown the machine.</P>
<B>WLX_SAS_ACTION_SHUTDOWN_REBOOT</B></P>
Shut down and reboot the machine.</P>
<B>WLX_SAS_ACTION_SHUTDOWN_POWER_OFF</B></P>
Shut down and turn off the machine, if hardware allows.</P>
<B>WLX_SAS_ACTION_PWD_CHANGED</B></P>
Indicates that the user changed their password. Notify network providers.</P>
<B>WLX_SAS_ACTION_TASKLIST</B></P>
Invoke the task list.</P>
This function is used generally when the logged-on user wishes to shut down, log out, or lock the workstation. The extension DLL can lock the workstation by returning WLX_LOCK_WKSTA. Winlogon locks the workstation, and calls <B>WlxWkstaLockedSAS </B>the next time an SAS is received. </P>
The extension DLL can use the profile to determine any information needed about the system.</P>
<B>Sample</B></P>
  </P>
<BR></P>
<pre><code>WINAPI
WlxLoggedOnSAS(
    PVOID            pWlxContext,
    DWORD            dwSasType,
    PVOID            pReserved)
{
    int    Ret;
    switch (

    Ret = MyLoggedOnSasDialog( pWlxContext );
    switch (Ret)
    {
        case    IDCANCEL:
            return (WLX_SAS_ACTION_NONE);

        case    MY_ID_LOCKWINSTA:
            return (WLX_SAS_ACTION_LOCK_WKSTA);

        case    MY_ID_CHANGEPWD:
            // run a password change dialog

        case    MY_ID_TASKLIST:
            return(WLX_SAS_ACTION_TASKLIST );

        case    MY_ID_SHUTDOWN:
            return(WLX_SAS_ACTION_SHUTDOWN);

        case    MY_ID_LOGOFF:
            return(WLX_LOGOFF);
    }
}</code></pre>
  </P>
<A NAME="PT8"></A>WlxDisplayLockedNotice</P>
Winlogon calls this function when the workstation is placed in the locked state. This allows the GINA to display information about the lock, such as who locked the workstation and when. The GINA should display a dialog box that will be interrupted by a WLX_WM_SAS message, much like the <B>WlxDisplaySASNotice </B>function.</P>
  </P>
<BR></P>
<pre><code>VOID
WINAPI
WlxDisplayLockedNotice(
    PVOID            pWlxContext)</code></pre>
  </P>
<B>Parameters</B></P>
<B>pWlxContext</B></P>
 (IN parameter) Context value associated with this window station that GINA returned in the <B>WlxInitialize()</B> call.</P>
<B>Return Value</B></P>
None</P>
This function should display a notice that describes the machine as locked.</P>
<A NAME="PT9"></A>WlxIsLockOk</P>
Winlogon calls this function before locking the workstation, if, for example, a screen saver is marked as secure. </P>
  </P>
<BR></P>
<pre><code>BOOL
WINAPI
WlxIsLockOk(
    PVOID            pWlxContext)</code></pre>
  </P>
<B>Parameters</B></P>
<B>pWlxContext</B></P>
 IN parameter) Context value associated with this window station that GINA returned in the <B>WlxInitialize()</B> call.</P>
<B>Return Values</B></P>
<B>True</B></P>
Indicates it is OK to lock the workstation.</P>
<B>False</B></P>
Indicates it is not OK to lock the workstation.</P>
<A NAME="PT10"></A>WlxWkstaLockedSAS</P>
Winlogon calls this function when it receives an SAS and the workstation is locked. GINA may return indicating the workstation is to remain locked, the workstation is to be unlocked, or the logged-on user is being forced to log off (which leaves the workstation locked until the logoff is completed).</P>
  </P>
<BR></P>
<pre><code>int
WINAPI
WlxWkstaLockedSAS(
    PVOID            pWlxContext,
    DWORD            dwSasType)</code></pre>
  </P>
<B>Parameters</B></P>
<B>pWlxContext</B></P>
 (IN parameter) Context value associated with this window station that GINA returned in the WlxInitialize() call.</P>
<B>dwSasType</B></P>
 (IN parameter) A value indicating what type of secure attention sequence was entered. Values below WLX_SAS_TYPE_MAX_MSFT_VALUE are used to define Microsoft standard secure attention sequences. Values above this value are for definition by GINA developers.</P>
<B>Workstation State</B></P>
<B>Thread Desktop:</B></P>
Winlogon Desktop</P>
<B>Workstation:</B></P>
Locked</P>
<B>Return Values</B></P>
<B>WLX_SAS_ACTION_NONE</B></P>
Workstation remains locked.</P>
<B>WLX_SAS_ACTION_UNLOCK_WKSTA</B></P>
Unlock the workstation.</P>
<B>WLX_SAS_ACTION_FORCE_LOGOFF</B></P>
Force the user to log off.</P>
<B>Sample</B></P>
  </P>
<BR></P>
<pre><code>WINAPI
WlxWkstaLockedSAS(
    PVOID            pWlxContext)
{
    //
    //  Validate the users credentials again (e.g. read from smart
    //  card reader)
    //

    if (valid credentials)
    {
        return(WLX_UNLOCK_WKSTA);
    }

    if (administrative override)
    {
        return(WLX_FORCE_LOGOFF);
    }

    return(WLX_NO_ACTION);
}</code></pre>
  </P>
<A NAME="PT11"></A>WlxIsLogoffOk</P>
Winlogon calls this function when the user has initiated a logoff, for eaxmple by calling <B>ExitWindowsEx()</B>. The GINA can determine whether the logoff attempt is to be allowed.</P>
  </P>
<BR></P>
<pre><code>BOOL
WINAPI
WlxIsLockOk(
    PVOID            pWlxContext)</code></pre>
  </P>
<B>Parameters</B></P>
<B>pWlxContext</B></P>
(IN parameter) Context value associated with this window station that GINA returned in the WlxInitialize() call.</P>
<B>Return Values</B></P>
<B>True</B></P>
Indicates that it is OK to lock the workstation.</P>
<B>False</B></P>
Indicates that it is not OK to lock the workstation.</P>
<A NAME="PT12"></A>WlxLogoff</P>
Winlogon calls this function to notify GINA of a logoff on this workstation. No action is necessary.</P>
  </P>
<BR></P>
<pre><code>VOID
WINAPI
WlxLogoff(
    PVOID            pWlxContext)</code></pre>
  </P>
<B>Parameters</B></P>
<B>pWlxContext</B></P>
 (IN parameter) Context value associated with this window station that GINA returned in the WlxInitialize() call.</P>
<B>Workstation State</B></P>
<B>Thread Desktop:</B></P>
Winlogon Desktop</P>
<B>Workstation:</B></P>
Locked</P>
<B>Return Values</B></P>
None.</P>
<B>Sample</B></P>
  </P>
<BR></P>
<pre><code>VOID
WlxLogoff(
    PVOID            pWlxContext)
{
    //
    // Logoff action, if any:
    //
    // e.g. spit out the smart card from the smart card reader...
}</code></pre>
  </P>
<A NAME="PT13"></A>WlxShutdown</P>
Winlogon calls this function right before shutdown so GINA can perform any shutdown tasks, such as ejecting a smart card from a reader. The user has already logged off, and the <B>WlxLogoff </B>function has been called.</P>
  </P>
<BR></P>
<pre><code>VOID
WINAPI
WlxShutdown(
    PVOID            pWlxContext,
    DWORD            ShutdownType)</code></pre>
  </P>
<B>Parameters</B></P>
<B>pWlxContext</B></P>
 (IN parameter) Context value associated with this window station that GINA returned in the WlxInitialize() call.</P>
<B>ShutdownType</B></P>
 (IN parameter) Type of shutdown, one of: WLX_SAS_ACTION_SHUTDOWN, WLX_SAS_ACTION_SHUTDOWN_REBOOT, or WLX_SAS_ACTION_SHUTDOWN_POWER_OFF.</P>
<B>Workstation State</B></P>
<B>Thread Desktop:</B></P>
Application desktop if user logged on and the workstation isn't locked, otherwise Winlogon desktop.</P>
<B>Workstation:</B></P>
Not locked if application desktop, locked if Winlogon desktop.</P>
<B>Return Values</B></P>
None.</P>
<B>Sample</B></P>
  </P>
<BR></P>
<pre><code>VOID
 WlxShutdown(
    PVOID            pWlxContext,
    DWORD            ShutdownType)
{
    PGINA_CONTEXT    pGinaContext = (PGINA_CONTEXT)pWlxContext;
    CloseHandle(GinaContext-&gt;hCardReaderDevice);
    return;
}</code></pre>
  </P>
 </P></BODY></HTML>

<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Winlogon API Available For Use By GINAs</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

</OBJECT></FORM>
<H3>Winlogon API Available For Use By GINAs</H3>  </P>
Winlogon exports the following support fundtion to assist GINA DLLs. GINA DLLs are required to use Wlx dialog functions rather than generic Win32 functions for handling dialog calls to allow Winlogon timeouts to operate correctly. </P>
  </P>
<B>Note</B>   like the rest of the GINA services, these functions are Unicode <B>only</B>.</P>
  </P>
<A NAME="PT2"></A>WlxUseCtrlAltDel</P>
This function allows a GINA to tell Winlogon to use the standard CTRL+ALT+DEL key combination as a secure attention sequence. If a GINA DLL uses this function, it is not required to use <B>WlxSasNotify()</B> below. However, if a GINA has other secure attention sequences in addition to CTRL+ALT+DEL, it must use <B>WlxSasNotify()</B> to deliver those additional secure attention sequences.</P>
  </P>
<BR></P>
<pre><code>void
WINAPI
WlxUseCtrlAltDel(
    HANDLE        hWlx)</code></pre>
  </P>
<B>Parameters</B></P>
<B>hWlx</B></P>
(IN parameter) Winlogon handle provided to GINA in the <B>WlxInitialize()</B> call.</P>
<B>Return Values</B></P>
None</P>
<A NAME="PT3"></A>WlxSetContextPointer</P>
This function allows a GINA DLL to specify the context pointer that Winlogon passes it as the first parameter to all the GINA functions. By using this function, a GINA can specify a new context pointer to update the one returned during <B>WlxInitialize</B>.</P>
If a GINA DLL wishes to call <B>WlxSasNotify</B><I> </I>during the processing of the <B>WlxInitialize</B><I>,</I> this function must be called first, so as to associate any context with the GINA.</P>
  </P>
<BR></P>
<pre><code>VOID
WINAPI
WlxSetContextPointer(
    HANDLE        hWlx,
    PVOID        pWlxContext)</code></pre>
  </P>
<B>Parameters</B></P>
<B>hWlx</B></P>
(IN parameter) Winlogon handle provided to GINA in the <B>WlxInitialize()</B> call.</P>
<B>pWlxContext</B></P>
(IN parameter) Context pointer that the GINA associates with.</P>
<B>Return Values</B></P>
None.</P>
<A NAME="PT4"></A>WlxSasNotify</P>
The GINA DLL calls this function to notify Winlogon of an SAS event. </P>
  </P>
<BR></P>
<pre><code>VOID
WINAPI
WlxSasNotify(
    HANDLE        hWlx,
    DWORD        dwSasType)</code></pre>
  </P>
<B>Parameters</B></P>
<B>hWlx</B></P>
(IN parameter) Winlogon handle provided to GINA in the <B>WlxInitialize()</B> call.</P>
<B>dwSasType</B></P>
(IN parameter) A value indicating what type of secure attention sequence was entered. Values less than WLX_SAS_TYPE_MAX_MSFT_VALUE are used to define Microsoft standard secure attention sequences. Values above this value are for definition by GINA developers. </P>
This value will be delivered to the GINA SAS service routine Winlogon calls (<B>WlxLoggedOutSas(), WlxLoggedOnSas(), </B>or<B> WlxWkstaLockedSas()</B>).</P>
<B>Return Values</B></P>
None.</P>
<A NAME="PT5"></A>WlxSetTimeout</P>
The GINA DLL calls this function to change the timeout associated with a dialog. There is some latitude in assigning timeouts, but the hard upper limit enforced by Winlogon is five minutes.</P>
  </P>
<BR></P>
<pre><code>BOOL
WINAPI
WlxSetTimeout(
    HANDLE        hWlx,
    DWORD        dwTimeout)</code></pre>
  </P>
<B>Parameters</B></P>
<B>hWlx</B></P>
Handle assigned by Winlogon during initialization.</P>
<B>dwTimeout</B></P>
Requested timeout, in seconds.</P>
<B>Return Values</B></P>
<B>TRUE</B></P>
Indicates the new timeout was accepted.</P>
<B>FALSE</B></P>
Indicates the new timeout was not accepted.</P>
<A NAME="PT6"></A>WlxAssignShellProtection</P>
The GINA DLL calls this function to have Winlogon assign protection to a newly logged on user's shell program. The shell process should be created suspended, then this routine should be called to apply the correct protection to the shell process. After Winlogon returns, the caller:</P>
<SPAN CLASS="list"><UL><LI>Makes a Primary Token duplicate of the token,</LI><LI>changes the protection on the token so that the new user may access it,</LI><LI>changes the protection on the new shell process so that the new user may access it, and</LI><LI>assigns the duplicate token as the primary token of the shell process.</LI></UL></SPAN>If there are more than one top-level user shell processes, GINA must make a call for each one. </P>
  </P>
<B>Note</B>   This is an optional call provided for the convenience of GINA developers.</P>
  </P>
  </P>
<BR></P>
<pre><code>int
WINAPI
WlxAssignShellProtection(
    HANDLE        hWlx,
    HANDLE        hToken,
    HANDLE        hProcess,
    HANDLE        hThread)</code></pre>
  </P>
<B>Parameters</B></P>
<B>hWlx</B></P>
 (IN parameter) Winlogon handle provided to GINA in the <B>WlxInitialize()</B> call.</P>
<B>hToken</B></P>
 (IN parameter) Handle to a primary token. This token will be used as the primary token for the process referred below. The token must be open for TOKEN_DUPLICATE access.</P>
<B>hProcess</B></P>
 (IN parameter) Handle to the process to modify. The process must be created in the suspended state, and this should be the handle returned in the PROCESS_INFORMATION structure.</P>
<B>hThread</B></P>
 (IN parameter) Handle to the initial thread of the process.</P>
<B>Return Values</B></P>
Any errors encountered while trying to assign protection will be returned.</P>
<A NAME="PT7"></A>WlxMessageBox</P>
This function duplicates the Win32 <B>MessageBox()</B> API, but allows for a timeout.</P>
  </P>
<BR></P>
<pre><code>int
WlxMessageBox(
    HANDLE        hWlx,
    HWND        hwndOwner,
    LPWSTR        lpszText,
    LPWSTR        lpszTitle,
    UINT        fuStyle)</code></pre>
  </P>
<B>Parameters</B></P>
<I>as with MessageBox()</I></P>
<A NAME="PT8"></A>WlxDialogBox</P>
This function duplicates the Win32 <B>DialogBox() </B>API, but allows for a timeout.</P>
  </P>
<BR></P>
<pre><code>int
WlxDialogBox(
    HANDLE        hWlx,
    HANDLE        hInst,
    LPWSTR        lpszTemplate,
    HWND        hwndOwner,
    DLGPROC        dlgprc)</code></pre>
  </P>
<B>Parameters</B></P>
<I>As with DialogBox()</I></P>
<A NAME="PT9"></A>WlxDialogBoxIndirect</P>
This function duplicates the Win32 <B>DialogBoxIndirect()</B> API, but allows for a timeout.</P>
  </P>
<BR></P>
<pre><code>int
WlxDialogBoxIndirect(
    HANDLE            hWlx,
    HANDLE            hInst,
    LPCDLGTEMPLATE        hDialogTemplate,
    HWND            hwndOwner,
    DLGPROC            dlgprc)</code></pre>
  </P>
<B>Parameters</B></P>
<I>As with DialogBoxIndirect()</I></P>
<A NAME="PT10"></A>WlxDialogBoxParam</P>
This function duplicates the Win32 <B>DialogBoxParam()</B> API, but allows for a timeout.</P>
  </P>
<BR></P>
<pre><code>int
WlxDialogBoxParam(
    HANDLE        hWlx,
    HANDLE        hInst,
    LPWSTR        lpszTemplate,
    HWND        hwndOwner,
    DLGPROC        dlgprc,
    LPARAM        dwInitParam)</code></pre>
  </P>
<B>Parameters</B></P>
<I>As with DialogBoxIndirect()</I></P>
<A NAME="PT11"></A>WlxDialogBoxIndirectParam</P>
This function duplicates the Win32 <B>DialogBoxIndirectParam()</B> API, but allows for a timeout.</P>
  </P>
<BR></P>
<pre><code>int
WlxDialogBoxIndirectParam(
    HANDLE            hWlx,
    HANDLE            hInst,
    LPCDLGTEMPLATE        hDialogTemplate,
    HWND            hwndOwner,
    DLGPROC            dlgprc,
    LPARAM            dwInitParam)</code></pre>
  </P>
<B>Parameters</B></P>
<I>As with DialogBoxIndirectParam()</I></P>
<A NAME="PT12"></A>WlxSwitchDesktopToUser</P>
This function allows the Gina DLL to switch between visual desktops. This function is only valid for the currently operating thread.</P>
  </P>
<BR></P>
<pre><code>int
WINAPI
WlxSwitchDesktopToUser(
    HANDLE            hWlx)</code></pre>
  </P>
<B>Parameters</B></P>
<B>hWlx</B></P>
(IN parameter) Winlogon handle provided to GINA in the <B>WlxInitialize()</B> call.</P>
<A NAME="PT13"></A>WlxSwitchDesktopToWinlogon</P>
This function allows the Gina DLL to switch between visual desktops. This function is only valid for the currently operating thread.</P>
  </P>
<BR></P>
<pre><code>int
WINAPI
WlxSwitchDesktopToWinlogon(
    HANDLE            hWlx)</code></pre>
  </P>
<B>Parameters</B></P>
<B>hWlx</B></P>
(IN parameter) Winlogon handle provided to GINA in the <B>WlxInitialize()</B> call.</P>
<A NAME="PT14"></A>WlxChangePasswordNotify</P>
This function should be called by GINA DLLs that have changed a password. This allows the other network providers on the machine to update their passwords as well.</P>
  </P>
<BR></P>
<pre><code>int
WINAPI
WlxChangePasswordNotify(
    HANDLE            hWlx,
    PWLX_MPR_NOTIFY_INFO    pMprInfo,
    DWORD            dwChangeInfo)</code></pre>
  </P>
<B>Parameters</B></P>
<B>hWlx</B></P>
(IN parameter) Winlogon handle provided to GINA in the <B>WlxInitialize()</B> call.</P>
<B>pMprInfo</B></P>
(IN parameter) Completed MPR information. All pointers to memory in this structure will be freed through <B>LocalFree()</B>. Password pointers will be zeroed, then freed.</P>
<B>dwChangeInfo</B></P>
Change info flags from Network Provider API.</P>
 </P></BODY></HTML>

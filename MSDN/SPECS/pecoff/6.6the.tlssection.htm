<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>6.6 The .tls Section</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<FONT FACE="verdana, Arial, Helvetica" SIZE="2">

<h1><a name="6.6the.tlssection"></a>6.6 The .tls Section</h1>
<p>
The <b>.tls</b> section provides direct PE/COFF support for static Thread Local Storage (TLS). TLS is a special storage class supported by Windows NT, in which a data object is not an automatic (stack) variable, yet it is local to each individual thread that runs the code. Thus, each thread can maintain a different value for a variable declared using TLS.</p>
<p>
Note that any amount of TLS data can be supported by using the API calls <b>TlsAlloc</b>, <b>TlsFree</b>, <b>TlsSetValue</b>, and <b>TlsGetValue</b>. The PE/COFF implementation is an alternative approach to using the API, and it has the advantage of being simpler from the high-level-language programmer&#39;s point of view. This implementation enables TLS data to be defined and initialized in a manner similar to ordinary static variables in a program. For example, in Microsoft Visual C++, a static TLS variable can be defined as follows, without using the Windows API:</p>
<pre><code>__declspec (thread) int tlsFlag = 1;</code></pre>
<p>
To support this programming construct, the PE/COFF <b>.tls</b> section specifies the following information: initialization data, callback routines for per-thread initialization and termination, and the TLS index, explained in the following discussion.</p>
<p>
<b>Note:</b> Statically declared TLS data objects can be used only in statically loaded image files. This fact makes it unreliable to use static TLS data in a DLL unless you know that the DLL, or anything statically linked with it, will never be loaded dynamically with the <b>LoadLibrary</b> API function.</p>
<p>
Executable code accesses a static TLS data object through the following steps:
<ol>
<li>
At link time, the linker sets the Address of Index field of the TLS Directory. This field points to a location where the program will expect to receive the TLS index. <br><br></li>
<li>
The Microsoft run-time library facilitates this process by defining a memory image of the TLS Directory and giving it the special name &quot;__tls_used&quot; (Intel x86 platforms) or &quot;_tls_used&quot; (other platforms). The linker looks for this memory image and uses the data there to create the TLS Directory. Other compilers that support TLS and work with the Microsoft linker must use this same technique.<br><br></li>
<li>
When a thread is created, the loader communicates the address of the thread&#39;s TLS array by placing the address of the Thread Environment Block (TEB) in the FS register. A pointer to the TLS array is at the offset of 0x2C from the beginning of TEB. This behavior is Intel x86 specific.<br><br></li>
<li>
The loader assigns the value of the TLS index to the place indicated by the Address of Index field.<br><br></li>
<li>
The executable code retrieves the TLS index and also the location of the TLS array.<br><br></li>
<li>
The code uses the TLS index and the TLS array location (multiplying the index by four and using it as an offset to the array) to get the address of the TLS data area for the given program and module. Each thread has its own TLS data area, but this is transparent to the program, which doesn&#39;t need to know how data is allocated for individual threads.<br><br></li>
<li>
An individual TLS data object is accessed as some fixed offset into the TLS data area.<p>
The TLS array is an array of addresses that the system maintains for each thread. Each address in this array gives the location of TLS data for a given module (.EXE or DLL) within the program. The TLS index indicates which member of the array to use. (The index is a number, meaningful only to the system, that identifies the module).
</li>
</ol>

</BODY>
</HTML>

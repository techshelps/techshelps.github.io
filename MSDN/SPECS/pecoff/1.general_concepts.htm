<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>1. General Concepts</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>


<FONT FACE="verdana, Arial, Helvetica" SIZE="2">

<h1><a name="1.general concepts"></a>1. General Concepts</h1>
<p>
This document specifies the structure of executable (image) files and object files under Microsoft Windows NT&reg;. These files are referred to as Portable Executable (PE) and Common Object File Format (COFF) files respectively. The name &quot;Portable Executable&quot; refers to the fact that the format is not architecture-specific.</p>
<p>
Certain concepts appear repeatedly throughout the specification and are described in the following table:</p>
<table cols=2>
<tr valign=top>
<TD width=128pt><FONT FACE="verdana, Arial, Helvetica" SIZE="2"><b>Name</b></td>
<TD width=306pt><FONT FACE="verdana, Arial, Helvetica" SIZE="2"><b>Description</b></td>
</tr>
<tr valign=top>
<TD width=128pt><FONT FACE="verdana, Arial, Helvetica" SIZE="2">Image file</td>
<TD width=306pt><FONT FACE="verdana, Arial, Helvetica" SIZE="2">Executable file: either a .EXE file or a DLL. An image file can be thought of as a &quot;memory image.&quot; The term &quot;image file&quot; is usually used instead of &quot;executable file,&quot; because the latter sometimes is taken to mean only a .EXE file. </td>
</tr>
<tr valign=top>
<TD width=128pt><FONT FACE="verdana, Arial, Helvetica" SIZE="2">Object file</td>
<TD width=306pt><FONT FACE="verdana, Arial, Helvetica" SIZE="2">A file given as input to the linker. The linker produces an image file, which in turn is used as input by the loader. The term &quot;object file&quot; does not necessarily imply any connection to object-oriented programming.</td>
</tr>
<tr valign=top>
<TD width=128pt><FONT FACE="verdana, Arial, Helvetica" SIZE="2">RVA</td>
<TD width=306pt><FONT FACE="verdana, Arial, Helvetica" SIZE="2">Relative Virtual Address. In an image file, an RVA is always the address of an item <i>once loaded into memory</i>, with the base address of the image file subtracted from it. The RVA of an item will almost always differ from its position within the file on disk (File Pointer).<p>
In an object file, an RVA is less meaningful because memory locations are not assigned. In this case, an RVA would be an address within a section (see below), to which a relocation is later applied during linking. For simplicity, compilers should just set the first RVA in each section to zero.</p>
</td>
</tr>
<tr valign=top>
<TD width=128pt><FONT FACE="verdana, Arial, Helvetica" SIZE="2">Virtual Address (VA)</td>
<TD width=306pt><FONT FACE="verdana, Arial, Helvetica" SIZE="2">Same as RVA (see above), except that the base address of the image file is not subtracted. The address is called a &quot;Virtual Address&quot; because Windows NT creates a distinct virtual address space for each process, independent of physical memory. For almost all purposes, a virtual address should be considered just an address. A virtual address is not as predictable as an RVA, because the loader might not load the image at its preferred location.</td>
</tr>
<tr valign=top>
<TD width=128pt><FONT FACE="verdana, Arial, Helvetica" SIZE="2">File pointer</td>
<TD width=306pt><FONT FACE="verdana, Arial, Helvetica" SIZE="2">Location of an item within the file itself, before being processed by the linker (in the case of object files) or the loader (in the case of image files). In other words, this is a position within the file as stored on disk.</td>
</tr>
<tr valign=top>
<TD width=128pt><FONT FACE="verdana, Arial, Helvetica" SIZE="2">Date/Time Stamp</td>
<TD width=306pt><FONT FACE="verdana, Arial, Helvetica" SIZE="2">Date/time stamps are used in a number of places in a PE/COFF file, and for different purposes. The format of each such stamp, however, is always the same: that used by the time functions in the C run-time library.</td>
</tr>
<tr valign=top>
<TD width=128pt><FONT FACE="verdana, Arial, Helvetica" SIZE="2">Section</td>
<TD width=306pt><FONT FACE="verdana, Arial, Helvetica" SIZE="2">A section is the basic unit of code or data within a PE/COFF file. In an object file, for example, all code can be combined within a single section, or (depending on compiler behavior) each function can occupy its own section. With more sections, there is more file overhead, but the linker is able to link in code more selectively. A section is vaguely similar to a segment in Intel&reg; 8086 architecture. All the raw data in a section must be loaded contiguously. In addition, an image file can contain a number of sections, such as <b>.tls</b> or <b>.reloc</b>, that have special purposes.</td>
</tr>
<tr valign=top>
<TD width=128pt><FONT FACE="verdana, Arial, Helvetica" SIZE="2">Attribute Certificate</td>
<TD width=306pt><FONT FACE="verdana, Arial, Helvetica" SIZE="2">Attribute certificates are used to associate verifiable statements with an image.  There are a number of different verifiable statements that can be associated with a file, but one of the most useful ones, and one that is easy to describe, is a statement by a software manufacturer indicating what the message digest of the image is expected to be.  A message digest is similar to a checksum except that it is extremely difficult to forge, and, therefore it is very difficult to modify a file in such a way as to have the same message digest as the original file.  The statement may be verified as being made by the manufacturer by use of public/private key cryptography schemes.  This document does not go into details of attribute certificates other than to allow for their insertion into image files.</td>
</tr>
</table><br>

</BODY>
</HTML>

<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Digital Signature Table</TITLE>

<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">


<H2>DSIG - Digital Signature Table</H2>
<P>
The DSIG table contains the digital signature of the OpenType font.
Signature formats are widely documented and rely on a key pair architecture. Software developers, or publishers posting material on the Internet, create signatures using a private key. Operating systems or applications authenticate the signature using a public key.
<P>
The W3C and major software and operating system developers have specified security standards that describe signature formats, specify secure collections of web objects, and recommend authentication architecture.
OpenType fonts with signatures will support these standards.
<P>
OpenType fonts offer many security features:
<UL>
<LI>Operating systems and browsing applications can identify the source and integrity of font files before using them,
<LI>Embedded font files can identify the publisher (the user who posted the font on the internet),
<LI>Font developers can specify embedding restrictions in OpenType fonts, and these restrictions cannot be altered in a font signed by the developer.
</UL>
The enforcement of signatures is an administrative policy, enabled by the operating system. Windows will soon require installed software components, including fonts, to be signed. Internet browsers will also give users and administrators the ability to screen out unsigned objects obtained on-line, including web pages, fonts, graphics, and software components.
<P>
Anyone can obtain identity certificates and encryption keys from a certifying agency, such as Verisign or GTE's Cybertrust, free or at a very low cost.
<P>
The DSIG table is organized as follows. The first portion of the table is the header:
<TABLE WIDTH=460 BGCOLOR="#F0F0F0">
<THEAD>
<TR>
<TH BGCOLOR="#C0C0C0">Type</TH><TH BGCOLOR="#C0C0C0">Name</TH>
<TH BGCOLOR="#C0C0C0">Description</TH></TR>
</THEAD><TBODY>
<TR>
<TD VALIGN=TOP>ULONG</TD><TD VALIGN=TOP>version</TD>
<TD VALIGN=TOP>Version, set to 1</TD></TR>
<TR>
<TD VALIGN=TOP>USHORT</TD><TD VALIGN=TOP>numsigs</TD>
<TD VALIGN=TOP>Number of Signatures</TD></TR>
<TR>
<TD VALIGN=TOP>USHORT</TD><TD VALIGN=TOP>flag</TD>
<TD VALIGN=TOP>Set to 1 to indicate that the existing signature should not be replaced</TD></TR>
</TABLE>
<P>
This header information is followed by entries for each of the signatures in the table specifying format and offset information:
<TABLE WIDTH=460 BGCOLOR="#F0F0F0">
<THEAD>
<TR>
<TH BGCOLOR="#C0C0C0">Type</TH><TH BGCOLOR="#C0C0C0">Name</TH>
<TH BGCOLOR="#C0C0C0">Description</TH></TR>
</THEAD><TBODY>
<TR>
<TD VALIGN=TOP>ULONG</TD><TD VALIGN=TOP>format</TD>
<TD VALIGN=TOP>Signature block format</TD></TR>
<TR>
<TD VALIGN=TOP>ULONG</TD><TD VALIGN=TOP>cbSignature</TD>
<TD VALIGN=TOP>Length of signature block in bytes</TD></TR>
<TR>
<TD VALIGN=TOP>ULONG</TD><TD VALIGN=TOP>offset</TD>
<TD VALIGN=TOP>Offset to the signature block from the beginning of the table.</TD></TR>
</TABLE>
<P>
This information is then followed by one or more signature blocks:
<TABLE WIDTH=460 BGCOLOR="#F0F0F0">
<THEAD>
<TR>
<TH BGCOLOR="#C0C0C0">Type</TH><TH BGCOLOR="#C0C0C0">Name</TH>
<TH BGCOLOR="#C0C0C0">Description</TH></TR>
</THEAD><TBODY>
<TR>
<TD VALIGN=TOP>ULONG</TD><TD VALIGN=TOP>bSignature</TD>
<TD VALIGN=TOP>Signature block in one of the defined formats</TD></TR>
</TABLE>
<P>
The format identifier specifies both the format of the signature object, as well as the hashing algorithm used to create and authenticate the signature. Currently only one format is defined, but at least one other format will soon be defined to handle subsetting scenarios. Format 1 supports PKCS#7 signatures with X.509 certificates and counter-signatures, as these signatures have been standardized for use by the W3C with the participation of numerous software developers.
<P>
For more information about PKCS#7 signatures, see <A HREF="ftp://ftp.rsa.com/pub/pkcs/ascii/pkcs-7.asc">ftp://ftp.rsa.com/pub/pkcs/ascii/pkcs-7.asc</A>
<P>
For more information about counter-signatures, see <A HREF="ftp://ftp.rsa.com/pub/pkcs/ascii/pkcs-9.asc">ftp://ftp.rsa.com/pub/pkcs/ascii/pkcs-9.asc</A>
<P>
<B>Format 1: For whole fonts, with either TrueType outlines and/or CFF data</B><P>
PKCS#7 or PKCS#9. The signed content digest is created as follows:
<OL>
<LI>If there is an existing DSIG table in the font,
<OL><LI>Remove DSIG table from font.
<LI>Remove DSIG table entry from sfnt Table Directory.
<LI>Adjust table offsets as necessary.
<LI>Zero out the file checksum in the HEAD table.</OL>
<LI>Hash the full stream of bytes using a secure one-way hash (such as MD5) to create the content digest.
<LI>Create the PKCS#7 signature block using the content digest.
<LI>Create a new DSIG table containing the signature block.
<LI>Add the DSIG table to the font, adjusting table offsets as necessary.
<LI>Add a DSIG table entry to the sfnt Table Directory.
<LI>Recalculate the checksum in the HEAD table.
</OL>
<P>
&nbsp;&nbsp;<P>
</BODY></HTML>

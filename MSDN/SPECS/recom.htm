<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Recommendations for OpenType Fonts</TITLE>

<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<H2>Recommendations for OpenType Fonts</H2>
<P>
This chapter outlines recommendations for creating OpenType fonts.
<H3>Byte Ordering</H3>
All OpenType fonts use Motorola-style byte ordering (Big Endian).
<H3>'sfnt' Version</H3>
OpenType fonts that contain TrueType outlines should use the value of 1.0 for the sfnt version. OpenType fonts containing CFF data should use the tag 'OTTO' as the sfnt version number.
<H3>Filenames</H3>
OpenType fonts may have the extension .OTF or .TTF, depending on the type of outlines in the font and the creator's desire for downlevel compatibility.
<UL>
<LI>In all cases, fonts with only CFF data (no TrueType outlines) always have an .OTF extension.
<LI>Fonts containing TrueType outlines should use the .TTF extension. This enables the fonts to be used under older versions of Windows in which a CFF rasterizer may not be installed. In such cases, the fonts will be identified in the shell with a TrueType icon.
</UL>
<H3>Table Alignment and Length</H3>
All tables should be aligned to begin at offsets which are multiples of four bytes. While this is not required by the TrueType rasterizer, it does prevent ambiguous checksum calculations and greatly speeds table access on some processors.
<P>
All tables should be recorded in the table directory with their actual length. To ensure that checksums are calculated correctly, it is suggested that tables begin on LONG word boundries, as mentioned in Chapter 2. Any extra space after a table (and before the next LONG word boundry) should be padded with zeros.
<H3>'cmap' Table</H3>
When building a Unicode font for Windows, the platform ID should be 3 and the encoding ID should be 1 (this subtable must use cmap format 4). When building a symbol font for Windows, the platform ID should be 3 and the encoding ID should be 0.
<P>
Remember that, despite references to "first" and "second" subtables, the subtables must be stored in sorted order by platform and encoding ID.
<H4>Macintosh 'cmap' Table</H4>
When building a font containing Roman characters that will be used on the Macintosh, an additional subtable is required, specifying platform ID of 1 and encoding ID of 0 (this subtable may use cmap formats 0, 2, 4, or 6).
<P>
In order for the Macintosh 'cmap' table to be useful, the glyphs required for the Macintosh must have glyph indices less than 256 (since the 'cmap' subtable format 0 uses BYTE indices and therefore cannot index any glyph above 255).
<P>
The Apple 'cmap' subtable should be constructed according to the guidelines in the "Character Sets" chapter. Note that the "apple logo" and "propeller" should be mapped to the nonexistent glyph.
<H3>'cvt' Table</H3>
Should be defined only if required by font instructions.
<H3>'fpgm' Table</H3>
Should be defined only if required by TrueType font instructions.
<H3>'glyf' Table</H3>
The 'glyf' table contains TrueType outline data, and can be optimized by Agfa MicroType Compression. Microsoft recommends that developers perform this optimization, using a tool provided by Microsoft, prior to finalizing and adding a digital signature to the font. This is necessary for the creator's signature to remain valid in embedded OpenType fonts.
<H3>'hdmx' Table</H3>
This table improves the performance of OpenType fonts with TrueType outlines. This table is not necessary at all unless instructions are used to control the "phantom points," and should be omitted if bit 2 of the flags field in the 'head' table is zero. (See the 'head' table documentation in Chapter 2.) Microsoft recommends that this table be included for fonts with one or more non-linearly scaled glyphs (i.e., bit 2 or 4 of the flags field is set).
<P>
Device records should be defined for all sizes from 8 through 14 point, and even point sizes from 16 through 24 point. However, the table requires pixel-per-em sizes, which depend on the horizontal resolution of the output device. The records in 'hdmx' should cover both 96 dpi devices (CGA, EGA, VGA) and 300 dpi devices (laser and ink jet printers).
<P>
Thus, 'hdmx' should contain entries for the following pixel sizes: 11, 12, 13, 15, 16, 17, 19, 21, 24, 27, 29, 32, 33, 37, 42, 46, 50, 54, 58, 67, 75, 83, 92, 100. These values have been rounded to the nearest pixel. For instance, 12 points at 300 dpi would measure 37.5 pixels, but this is rounded down to 37 for this list.
<P>
This will add approximately 9,600 bytes to the font file. However, there will be a significant improvement in speed when a client requests advance widths covered by these device records.
<P>
If the font includes an 'LTSH' table, the hdmx values are not needed above the linearity threshold.
<H3>'head' Table</H3>
All data required. If the font has been compressed with Agfa MicroType Compression, this must be indicated in the flags field of the 'head' table.
<H3>'hhea' Table</H3>
All data required. It is suggested that monospaced fonts set numberLongMetrics to three (see hmtx).
<H3>'hmtx' Table</H3>
All data required. It is suggested that monospaced fonts have three entries in the nMetric field.
<H3>'kern' Table</H3>
Should contain a single kerning pair subtable (format 0). Windows and OS/2 will not support format 2 (two-dimensional array of kern values by class).  Windows and OS/2 will not support multiple tables; only the first format 0 table found will be used. Also, Windows and OS/2 will not support coverage bits 0 through 4 (i.e. assumes horizontal data, kerning values, no cross stream, and override).
<H3>'loca' Table</H3>
All data required for fonts with TrueType outlines. We strongly recommend that local offsets should be long-aligned, i.e., multiples of 4, in both the short and long formats of this table. Offsets which are not long-aligned may seriously degrade performance of some processors, and we are aware of some applications which will not work properly when they encounter these fonts. 
<P>
The actual ordering of the glyphs in the font can be optimized based on expected utilization, with the most frequently used glyphs appearing at the beginning of the font file. Additionally, glyphs that are often used together should be grouped together in the file. The will help to minimize the amount of swapping required when the font is loaded into memory.
<H3>'LTSH' Table</H3>
This table improves the performance of OpenType fonts with TrueType outlines. The table should be used if bit 2 or 4 of flags in 'head' is set.
<H3>'maxp' Table</H3>
All data required for a font with TrueType outlines. Fonts with CFF data must only fill the numGlyphs field.
<H3>'name' Table</H3>
Platform and encoding ID's in the name table should be consistent with those in the cmap table. If they are not, the font will not load in Windows. When building a Unicode font for Windows, the platform ID should be 3 and the encoding ID should be 1. When building a symbol font for Windows, the platform ID should be 3 and the encoding ID should be 0.
<P>
When building a font containing Roman characters that will be used on the Macintosh, an additional name record is required, specifying platform ID of 1 and encoding ID of 0.
<P>
Each set of name records should appear for US English (language ID = 0x0409 for Microsoft records, language ID = 0 for Macintosh records); additional language strings for the Microsoft set of records (platform ID 3) may be added at the discretion of the font vendor.
<P>
Remember that, despite references to "first" and "second," the name record must be stored in sorted order (by platform ID, encoding ID, language ID, name ID). The 'name' table platform/encoding IDs must match the 'cmap' table platform/encoding IDs, which is how Windows knows which name set to use.
<H4>Name strings</H4>
We recommend using name ID's 8-12, to identify manufacturer, designer, description, URL of the vendor, and URL of the designer. URL's must contain the protocol of the site: for example, http:// or mailto: or ftp://. The OpenType font properties extension can enumerate this information to the users.
<P>
The Subfamily string in the 'name' table should be used for variants of weight (ultra light to extra black) and style (oblique/italic or not).  So, for example, the full font name of "Helvetica Narrow Italic" should be defined as Family name "Helvetica Narrow" and Subfamily "Italic." This is so that Windows can group the standard four weights of a font in a reasonable fashion for non-typographically aware applications which only support combinations of "bold" and "italic."
<P>
The Full font name string usually contains a concatenation of strings 1 and 2. However, if the font is 'Regular' as indicated in string 2, then use only the family name contained in string 1. This is the font name that Windows will expose to users
<H3>'OS/2' Table</H3>
All data required. We recommend applying PANOSE values to fonts to improve the user's experience when using the Windows fonts folder or other font management utilities. If the font is a symbol font, the first byte of the PANOSE value must be set to 'decorative.' The PANOSE evaluation document is on-line at www.fonts.com/hp/panose/greybook/frame.htm.
<H3>'post' Table</H3>
All information required, although the VM Usage fields may be set to zero.  OpenType fonts use only format 3.0 of the 'post' table. Glyph names for the PostScript character set must be defined as per the "PostScript Reference Manual" (Adobe Systems Incorporated,  1988); note that names for all glyphs must be supplied as it cannot be assumed that all Microsoft platforms will support the default names supplied on the Macintosh. Names for the Unicode glyphs outside the PostScript set should be assigned a four character hexidecimal string that corresponds to their Unicode index (e.g. '2302' for the small house glyph). 
<H3>'prep' Table</H3>
Should be defined only if required by the TrueType font instructions.
<H3>'VDMX' Table</H3>
This table improves the performance of OpenType fonts with TrueType outlines. It Should be present if hints cause the font to scale non-linearly. If not present, the font is assumed to scale linearly. Clipping may occur if values in this table are absent and font exceeds linear height.
<H2>General Recommendations</H2>
<H3>Optimized Table Ordering</H3>
OpenType fonts with TrueType outlines are more efficient in the Windows operating system when the tables are ordered as follows (from first to last):<P>
head, hhea, maxp, OS/2, hmtx, LTSH, VDMX, hdmx, cmap, fpgm, prep, cvt, loca, 
glyf, kern, name, post, gasp, PCLT, DSIG<P>
The initial loading of an OpenType font containing CFF data will be more efficiently handled if the following sfnt table ordering is used within the body of the sfnt (listed from first to last):<P>
head, hhea, OS/2, name, cmap, post, fvar, MMSD, CFF, (other tables, as convenient)
<H3>Non-Standard (Symbol) Fonts</H3>
Non-standard fonts such as Symbol or Wingdings(tm) have special requirements for Microsoft platforms. These requirements affect the 'cmap,' 'name,' and 'OS/2' tables; the requirements and recommendations for all other tables remain the same.
<P>
For the Macintosh, non-standard fonts can continue to use platform ID 1 (Macintosh) and encoding ID 0 (Roman character set). The 'cmap' subtable should use format 0 and follow the standard PostScript character encodings. 
<P>
For non-standard fonts on Microsoft platforms, however, the 'cmap' and 'name' tables must use platform ID 3 (Microsoft) and encoding ID 0 (Unicode, non-standard character set). Remember that 'name' table encodings should agree with the 'cmap' table. Additionally, the first byte of the PANOSE value in the 'OS/2' table must be set to 'decorative.'
<P>
The Microsoft 'cmap' subtable (platform 3, encoding 0) must use format 4. The character codes should start at 0xF000, which is in the Private Use Area of Unicode. Microsoft suggests deriving the format 4 (Microsoft) encodings by simply adding 0xF000 to the format 0 (Macintosh) encodings.
<P>
Under both OS/2 and Windows, only the first 224 characters of non-standard fonts will be accessible: a space and up to 223 printing characters. It does not matter where in user space these start, but 0xF020 is suggested. The usFirstCharIndex and usLastCharIndex values in the 'OS/2' table would be set based on the actual minimum and maximum character indices used.

<H3>Device Resolutions</H3>
OS/2 and Windows make use of a logical device resolution. The physical resolution of a device is also available, but fonts will be rendered based on the logical resolution.  The table below lists some important logical resolutions in dots per inch (Horizontal x Vertical). The most important ratios (in order) are 1:1, 1.67:1 and 1.33:1.
<P>
<TABLE BGCOLOR="F0F0F0" WIDTH=460>
<THEAD>
<TR>
<TH BGCOLOR="#C0C0C0">Device</TH><TH BGCOLOR="#C0C0C0">Resolution</TH><TH BGCOLOR="#C0C0C0">Aspect Ratio</TH></TR>
</THEAD><TBODY>
<TR>
<TD VALIGN=TOP>CGA</TD><TD VALIGN=TOP>96 x 48</TD><TD VALIGN=TOP>2:1</TD></TR>
<TR>
<TD VALIGN=TOP>EGA</TD><TD VALIGN=TOP>96 x 72</TD><TD VALIGN=TOP>1.33:1</TD></TR>
<TR>
<TD VALIGN=TOP>VGA</TD><TD VALIGN=TOP>96 x 96</TD><TD VALIGN=TOP>1:1</TD></TR>
<TR>
<TD VALIGN=TOP>8514</TD><TD VALIGN=TOP>120 x 120</TD><TD VALIGN=TOP>1:1</TD></TR>
<TR>
<TD VALIGN=TOP>Dot Matrix</TD><TD VALIGN=TOP>120 x 72</TD><TD VALIGN=TOP>1.67:1</TD></TR>
<TR>
<TD VALIGN=TOP>Laser Printer</TD><TD VALIGN=TOP>300 x 300</TD><TD VALIGN=TOP>1:1</TD></TR>
<TR>
<TD VALIGN=TOP>Laser Printer</TD><TD VALIGN=TOP>600 x 600</TD><TD VALIGN=TOP>1:1</TD></TR>
</TABLE>

<H3>Baseline to Baseline Distances</H3>
The suggested Baseline to Baseline Distance (BTBD) is computed differently for Windows and the Macintosh, and it is based on different OpenType metrics. However, if the recommendations below are followed, the BTBD will be the same for both Windows and the Mac.
<P>
<H4>Windows</H4>
The Windows metrics in the table below are returned as part of the logical font data structure by the GDI CreateLogFont( ) API.
<P><TABLE WIDTH=460 BGCOLOR="#F0F0F0" BORDER=0>
<TR><THEAD>
<TH BGCOLOR="#C0C0C0">Windows Metric</th><TH BGCOLOR="#C0C0C0">OpenType Metric</THEAD></TR>
<TBODY>
<TR><TD VALIGN=TOP>ascent</TD><TD VALIGN=TOP>usWinAscent</TD></TR>
<TR><TD VALIGN=TOP>descent</TD><TD VALIGN=TOP>usWinDescent</TD></TR>
<TR><TD VALIGN=TOP>internal leading</TD><TD VALIGN=TOP>usWinAscent + usWinDescent - unitsPerEm</TD></TR>
<TR><TD VALIGN=TOP>external leading</TD><TD VALIGN=TOP>MAX(0, LineGap - ((usWinAscent + usWinDescent) - (Ascender - Descender)))</TD></TR>
</TABLE>
<P>
The suggested BTBD = <I>ascent</I> + <I>descent</I> + <I>external leading</I>
<P>
It should be clear that the "external leading" can never be less than zero. Pixels above the ascent or below the descent will be clipped from the character; this is true for all output devices.
<P>
The usWinAscent and usWinDescent  are values from the 'OS/2' table. The unitsPerEm value is from the 'head' table. The LineGap, Ascender and Descender values are from the 'hhea' table.
<P>
<H4>Macintosh</H4>
Ascender and Descender are metrics defined by Apple and are not to be confused with the Windows ascent or descent, nor should they be confused with the true typographic ascender and descender that are found in AFM files. The Macintosh metrics below are returned by the Mac QuickDraw GetFontInfo( ) API.

<P><TABLE WIDTH=460 BGCOLOR="#F0F0F0" BORDER=0>
<TR><THEAD>
<TH BGCOLOR="#C0C0C0">Macintosh Metric</th><TH BGCOLOR="#C0C0C0">OpenType Metric</THEAD></TR>
<TBODY>
<TR><TD VALIGN=TOP>ascender</TD><TD VALIGN=TOP>Ascender</TD></TR>
<TR><TD VALIGN=TOP>descender</TD><TD VALIGN=TOP>Descender</TD></TR>
<TR><TD VALIGN=TOP>leading</TD><TD VALIGN=TOP>LineGap</TD></TR>
</TABLE>
<P>
The suggested BTBD = <I>ascent</I> + <I>descent</I> + <I>leading</I>
<P>
If pixels extend above the ascent or below the descent, the character will be squashed in the vertical direction so that all pixels fit within these limitations; this is true for screen display only.
<P>
<H4>Making Them Match</H4>
If you perform some simple algebra, you will see that the suggested BTBD across both Macintosh and Windows will be identical if and only if:
<P>
<CODE>LineGap >= (yMax - yMin) - (Ascender - Descender)</CODE>
<H3>Style Bits</H3>
For backwards compatibility with previous versions of Windows, the macStyle bits in the 'head' table will be used to determine whether or not a font is regular, bold or italic (in the absence of an 'OS/2' table). This is completely independent of the usWeightClass and PANOSE information in the 'OS/2' table, the ItalicAngle in the 'post' table, and all other related metrics. If the 'OS/2' table is present, then the fsSelection bits are used to determine this information.
<P>
<H3>Drop-out Control</H3>
Drop-out control is needed if there is a difference in bitmaps with dropout control on and off. Two cases where drop-out control is needed are when the font is rotated or when the size of the font is at or below 8 ppem. Do not use SCANCTRL unless needed. SCANCTRL or the drop-out control rasterizer should be avoided for Roman fonts above 8 points per em (ppem) when the font is not under rotation. SCANCTRL should not be used for "stretched" fonts (e.g. fonts displayed at non-square aspect ratios, like that found on an EGA).

<H3>Embedded Bitmaps</H3>
Three tables are used to embed bitmaps in OpenType fonts. They are the 'EBLC' table for embedded bitmap locators, the 'EBDT' table for embedded bitmap data, and the 'EBSC' table for embedded bitmap scaling information. OpenType embedded bitmaps are also called 'sbits'.
<P>
The behavior of sbits within an OpenType font is essentially transparent to the client. A client need not be aware whether the bitmap returned by the rasterizer comes from an sbit or from a scan-converted outline.
<P>
The metrics in 'sbit' tables overrule the outline metrics at all sizes where sbits are defined. Fonts with 'hdmx' tables should correct those tables with 'sbit' values.
<P>
'Sbit only' fonts, that is fonts with embedded bitmaps but without outline data, are permitted. Care must be taken to ensure that all required OpenType tables except 'glyf' and 'loca' are present in such a font. Obviously, such fonts will only be able to return glyphs and sizes for which sbits are defined.
<OL>
<LI>These metrics are returned as part of the logical font data structure by the GDI CreateLogFont() API.
<LI>These metrics are returned by the Mac QuickDraw GetFontInfo() API.
</OL>


</BODY></HTML>

<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>5.1.1  Extensibility</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

</OBJECT></FORM>
<H2>5.1.1  Extensibility</H2>  </P>
Provisions are made for extending data types and structures both in a device independent way and in a device specific (i.e., vendor specific) way. </P>
In data types that are scalar enumerations, a range of values is reserved for future common extensions. The remainder of values is identified as device specific. A vendor can define meanings for these values in any way desired. The interpretation of these values is keyed to the <I>Extension ID</I> provided via the <B>LINEDEVCAPS</B> data structure. For data types that are defined as bit flags, a range of low order bits are reserved, where the high order bits can be Extension specific. It is recommended that Extended values and bit arrays use bits from the highest value or high order bit down. This leaves the option to move the border between the common portion and Extension portion if there is need to do so in the future. Extensions to data structures are assigned a variable sized field with size/offset being part of the fixed part. The TSPI describes for each data structures what device specific extensions are allowed.</P>
In addition to recognizing a specific Extension ID, the TAPI DLL (operating on behalf of an application) must negotiate the extension version number that the app and the service provider will operate under. This is done using the <B>TSPI_lineNegotiateExtVersion</B> and <B>TSPI_phoneNegotiateExtVersion</B> functions. </P>
An Extension ID is a globally unique identifier. There is no central registry for Extension IDs. Instead, they are generated locally by the manufacturer by a utility that is available with the toolkit. The number is made up parts such as a (unique) LAN address, time of day, random number, to guarantee global uniqueness. Globally Unique Identifiers are designed to be distinguishable from HP/DEC universally unique identifiers and are thus fully compatible with them.</P>
ASYNC_LINE_COMPLETION</P>
The <B>ASYNC_LINE_COMPLETION</B> type represents a callback procedure supplied by the TAPI DLL at the time a Service Provider is initialized.  The Service Provider calls this procedure to report completion of line and call device requests for which it returns an "asynchronous" notification.  The full syntax and semantics of this procedure is described in the "Functions" chapter.</P>
ASYNC_PHONE_COMPLETION</P>
The <B>ASYNC_PHONE_COMPLETION</B> type represents a callback procedure supplied by the TAPI DLL at the time a Service Provider is initialized.  The Service Provider calls this procedure to report completion of phone device requests for which it returns an "asynchronous" notification.  The full syntax and semantics of this procedure is described in the "Functions" chapter.</P>
DRV_REQUESTID</P>
This type is used to supply a unique identifier for a request to the Service Provider.  A value of this type is passed as a parameter to every function that allows for asynchronous operation.  If the operation is asynchronous, the Service Provider returns this value as the return value of the function.  Whenever the Service Provider flags a request as asynchronous in this way, it must eventually report the operation complete by calling either the  <B>ASYNC_LINE_COMPLETION </B> or <B>ASYNC_PHONE_COMPLETION</B> callback.</P>
The TAPI DLL guarantees that <B>DRV_REQUESTID</B> values it supplies are strictly positive, that is, between the values of 0x00000001 and 0x7FFFFFFF, inclusive.  Furthermore, the values are "unique" in the sense that no value returned from a function to flag the request as asynchronous will be re-used before the operation is reported complete.</P>
HDRVCALL</P>
This type represents a Service Provider's opaque handle for a call data structure.  It is the responsibility of the Service Provider to be able to resolve a value of this type into a reference to the appropriate data structure instance.</P>
HDRVLINE</P>
This type represents a Service Provider's opaque handle for a line data structure.  It is the responsibility of the Service Provider to be able to resolve a value of this type into a reference to the appropriate data structure instance.</P>
HDRVPHONE</P>
This type represents a Service Provider's opaque handle for a phone data structure.  It is the responsibility of the Service Provider to be able to resolve a value of this type into a reference to the appropriate data structure instance.</P>
HTAPICALL</P>
This type represents the TAPI DLL's opaque handle for a call data structure.  It is the responsibility of the TAPI DLL to be able to resolve a value of this type into a reference to the appropriate data structure instance.  The Service Provider should not attempt to reference through this as if it were a pointer, make assumptions about its values, or interpret its representation in any way other than passing its value to the TAPI DLL at appropriate times.</P>
HTAPILINE</P>
This type represents the TAPI DLL's opaque handle for a line data structure.  It is the responsibility of the TAPI DLL to be able to resolve a value of this type into a reference to the appropriate data structure instance.  The Service Provider should not attempt to reference through this as if it were a pointer, make assumptions about its values, or interpret its representation in any way other than passing its value to the TAPI DLL at appropriate times.</P>
HTAPIPHONE</P>
This type represents the TAPI DLL's opaque handle for a phone data structure.  It is the responsibility of the TAPI DLL to be able to resolve a value of this type into a reference to the appropriate data structure instance.  The Service Provider should not attempt to reference through this as if it were a pointer, make assumptions about its values, or interpret its representation in any way other than passing its value to the TAPI DLL at appropriate times.</P>
INITIALIZE_NEGOTIATION</P>
This is a special value of type <B>DWORD</B>.  It may be passed as the <I>dwDeviceID</I> in the <B>TSPI_lineNegotiateTSPIVersion</B> and <B>TSPI_phoneNegotiateTSPIVersion</B> functions.  Doing so indicates that the TAPI DLL wishes to negotiate a TSPI interface version number independent of any specific devices.  This version number may be used as the interface version number for calling device-independent initialization functions such as <B>TSPI_lineSetDeviceIDBase</B> and <B>TSPI_phoneSetDeviceIDBase</B>.</P>
LINEEVENT</P>
The <B>LINEEVENT</B> type represents a callback procedure supplied by the TAPI DLL at the time a line is opened.  The Service Provider calls this procedure to report spontaneous events that occur on the line or calls on the line.  The full syntax and semantics of this procedure is described in the "Functions" chapter.</P>
PHONEEVENT</P>
The <B>PHONEEVENT</B> type represents a callback procedure supplied by the TAPI DLL at the time a phone is opened.  The Service Provider calls this procedure to report spontaneous events that occur on the phone.  The full syntax and semantics of this procedure is described in the "Functions" chapter.</P>
TSPI_LINE_PROCS</P>
The <B>TSIP_LINE_PROCS</B> type represents a table of procedure entry points for all of the line-related functions defined by the TSPI and implemented by the Service Provider.  The TAPI DLL may retrieve this table using the <B>TSPI_lineGetProcTable</B> procedure.  The full syntax and semantics of each of the procedure entry points included in this data structure is described in the "Functions" chapter.  The fields of this data structure correspond exactly one-to-one with the set of procedures with a "<B>TSPI_line</B>" prefix, so they are not repeated here.  Service Provider developers can refer to the TSPI header file for exact details.</P>
TSPI_PHONE_PROCS</P>
The <B>TSIP_PHONE_PROCS</B> type represents a table of procedure entry points for all of the phone-related functions defined by the TSPI and implemented by the Service Provider.  The TAPI DLL may retrieve this table using the <B>TSPI_phoneGetProcTable</B> procedure.  The full syntax and semantics of each of the procedure entry points included in this data structure is described in the "Functions" chapter.  The fields of this data structure correspond exactly one-to-one with the set of procedures with a "<B>TSPI_phone</B>" prefix, so they are not repeated here.  Service Provider developers can refer to the TSPI header file for exact details.</P>
TSPIMessage</P>
This is an enumeration type that defines the set of additional <B>LINEEVENT</B> and <B>PHONEEVENT</B> messages appearing in the TSPI that do not appear in the TAPI.</P>
</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="123pt" VALIGN="TOP"><COL WIDTH="298pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Values</B></P></TD><TD VALIGN="TOP">The following <B>TSPIMessage</B> values are defined by the TSPI.<BR>Specifies that a new, incoming call has arrived and introduces it to the TAPI DLL.  This must be the first message sent to the TAPI DLL for a new incoming call.  The TAPI DLL returns its opaque identifier for the call as part of its handling of this message.Specifies that a device-specific event has occurred on a call device.Specifies that a device-specific feature event has occurred on a call device.</P></TD></TR></TBODY></TABLE>
<BR></P>Line-related Data Structures</P>
The remaining data structures are identical to those defined at the TAPI level.  The TSPI header file does not define them.  It includes them from the TAPI header file.  The following sections defining the line-related and phone-related data structures are identical to the corresponding descriptions in the TAPI interface.</P>
In the case of most of the larger data structures, the responsibility for filling in fields is divided between the Service Provider and the TAPI DLL.  The Service Provider must preserve the values present in fields "owned" by the TAPI DLL.  The description of which fields must be set by the Service Provider and which fields must be preserved is provided in the "Functions" chapter in the functions that refer to that data structure.</P>
<P></P>
 </P></BODY></HTML>

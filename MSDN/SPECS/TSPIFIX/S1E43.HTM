<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>3.1.7  Overall comparison with TAPI</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

</OBJECT></FORM>
<H2>3.1.7  Overall comparison with TAPI</H2>  </P>
The TSPI specification is very closely related to the TAPI specification.  Most of the functions in one interface have a corresponding function in the other interface.  The usual correspondence is as follows:</P>
<SPAN CLASS="list"><UL><LI>TSPI functions have the same names as TAPI functions except that they are prepended with "<B>TSPI_</B>".  For example, the TAPI function <B>lineAccept</B> corresponds to the TSPI function <B>TSPI_lineAccept</B>.  The only functions that differ from this naming convention are the callback functions.  In the case of callback functions only a procedure-pointer type name is defined, rather than a procedure name.  Actual names of callbacks are "hidden" inside the TAPI DLL.</LI><LI>Procedures that allow asynchronous operation insert a <I>dwRequestID</I> parameter of type <B>DRV_REQUESTID</B> as their first parameter.  This parameter specifies the value to be returned to indicate asynchronous operation and to report asynchronous completion.</LI><LI><I>    hCall</I> parameters of type <B>HCALL</B> are replaced with <I>hdCall</I> parameters of type <B>HDRVCALL</B>, indicating the Service Provider's opaque handle for the call.</LI><LI><I>    hLine</I> parameters of type <B>HLINE</B> are replaced with <I>hdLine</I> parameters of type <B>HDRVLINE</B>, indicating the Service Provider's opaque handle for the line.</LI><LI><I>    hPhone</I> parameters of type <B>HPHONE</B> are replaced with <I>hdPhone</I> parameters of type <B>HDRVPHONE</B>, indicating the Service Provider's opaque handle for the phone.</LI><LI>Procedures that create a new call, such as <B>TSPI_lineMakeCall</B>, replace a single <I>lphCall</I> parameter with two parameters: a <I>htCall</I> of type <B>HTAPICALL</B> that passes in the TAPI DLL's opaque handle for the call, and a <I>lphdCall</I> of type <B>LPHDRVCALL</B> that indicates the location to which the Service Provider must write its new opaque handle for the call.  A similar split of parameters occurs in <B>TSPI_lineOpen</B> and <B>TSPI_phoneOpen</B>.</LI><LI>At the TSPI level, there is no notion of "privilege" associated with device handles.  Furthermore, there is only ever one outstanding handle for a line, phone, or call device at a time.  As a consequence the error codes and status messages relating to privilege and number of clients using a device do not appear at the TSPI level.</LI></UL></SPAN>In the descriptions that follow comparisons that fall under the categories listed above are usually not mentioned explicitly.  In cases where the function differs from the corresonding TAPI function in other ways, there is usually a "comparison" section describing the difference.</P>
<A NAME="PT2"></A>3.1.7.0  ASYNC_LINE_COMPLETION</P>
</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="96pt" VALIGN="TOP"><COL WIDTH="330pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP"><B>ASYNC_LINE_COMPLETION</B>  <I>Line_Completion</I>;void (* <I>Line_Completion</I>) (<I>dwRequestID, lResult</I>)</P>
This type is a placeholder for a callback function implemented by the TAPI DLL and supplied to the Service Provider early in the initialization sequence.  The Service Provider calls this function to report the completion of a line-oriented request that it executes asynchronously.</P></TD></TR></TBODY></TABLE>
<BR></P><A NAME="PT3"></A>3.1.7.0  ASYNC_PHONE_COMPLETION</P>
</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="96pt" VALIGN="TOP"><COL WIDTH="325pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP"><B>ASYNC_PHONE_COMPLETION</B>  <I>Phone_Completion</I>;void (* <I>Phone_Completion</I>) (<I>dwRequestID, lResult</I>)</P>
This type is a placeholder for a callback function implemented by the TAPI DLL and supplied to the Service Provider early in the initialization sequence.  The Service Provider calls this function to report the completion of a phone-oriented request that it executes asynchronously.</P></TD></TR></TBODY></TABLE>
<BR></P><A NAME="PT4"></A>3.1.7.0  LINEEVENT</P>
</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="96pt" VALIGN="TOP"><COL WIDTH="325pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP"><B>LINEEVENT</B>  <I>Line_Event</I>; void (* <I>Line_Event</I>) (<I>htLine, htCall, dwMsg, dwParam1, dwParam2, dwParam3</I>)</P>
This type is a placeholder for a callback function implemented by the TAPI DLL and supplied to the Service Provider at the time a line device is opened.  The Service Provider calls this function to report spontaneously occurring events on the line or on calls on the line.</P></TD></TR></TBODY></TABLE>
<BR></P><A NAME="PT5"></A>3.1.7.0  PHONEEVENT</P>
</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="96pt" VALIGN="TOP"><COL WIDTH="325pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP"><B>PHONEEVENT</B>  <I>Phone_Event</I>;void (* <I>Phone_Event</I>) (<I>htPhone, dwMsg, dwParam1, dwParam2, dwParam3</I>)</P>
This type is a placeholder for a callback function implemented by the TAPI DLL and supplied to the Service Provider at the time a phone device is opened.  The Service Provider calls this function to report spontaneously occurring events on the phone.</P></TD></TR></TBODY></TABLE>
<BR></P><A NAME="PT6"></A>3.1.7.0  TSPI_lineAccept</P>
</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="96pt" VALIGN="TOP"><COL WIDTH="325pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG <B>TSPI_lineAccept</B>(<I>dwRequestID, hdCall, lpsUserUserInfo, dwSize</I>)     This function accepts the specified offered call. It may optionally send the specified user-to-user information to the calling party.<BR>Specifies a far pointer to a string containing user-to-user information to be sent to the remote party as part of the call accept. This pointer is NULL if no user-to-user information is to be sent. User-to-user information is only sent if supported by the underlying network (see ).<BR>Specifies the size in bytes of the user-to-user information in . If  is NULL, no user-to-user information is sent to the calling party and  is ignored.<BR></P></TD></TR></TBODY></TABLE>
<BR></P><A NAME="PT7"></A>3.1.7.0  TSPI_lineAddToConference</P>
</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="96pt" VALIGN="TOP"><COL WIDTH="325pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Parameters</B></P></TD><TD VALIGN="TOP">DRV_REQUESTID    <I>dwRequestID</I></P>
Specifies the identifier of the asynchronous request.  The Service Provider returns this value if the function completes asynchronously.<BR><BR></P></TD></TR></TBODY></TABLE>
<BR></P><A NAME="PT8"></A>3.1.7.0  TSPI_lineAnswer</P>
</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="101pt" VALIGN="TOP"><COL WIDTH="321pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG <B>TSPI_lineAnswer</B>(<I>dwRequestID, hdCall, lpsUserUserInfo, dwSize</I>)</P>
This function answers the specified offering call.<BR>Specifies a far pointer to a string containing user-to-user information to be sent to the remote party at the time of answering the call. If this pointer is NULL, it indicates that no user-to-user information is to be sent. User-to-user information is only sent if supported by the underlying network (see ).<BR>Specifies the size in bytes of the user-to-user information in . If  is NULL, no user-to-user information is sent to the calling party and  is ignored.<BR></P></TD></TR></TBODY></TABLE>
<BR></P><A NAME="PT9"></A>3.1.7.0  TSPI_lineBlindTransfer</P>
</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="96pt" VALIGN="TOP"><COL WIDTH="330pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Syntax</B></P></TD><TD VALIGN="TOP">LONG<B> TSPI_lineBlindTransfer</B>(<I>dwRequestID, hdCall, lpszDestAddress, dwCountryCode</I>)     This function performs a blind or single-step transfer of the specified call to the specified destination address.<BR></P></TD></TR></TBODY></TABLE>
<BR></P><A NAME="PT10"></A>3.1.7.0  TSPI_lineClose</P>
<B>Syntax</B>    void<B> TSPI_lineClose</B>(<I>hdLine</I>)</P>
This function closes the specified open line device after completing or aborting all outstanding calls and asynchronous operations on the device.</P>
<B>Parameters    </B>HDRVLINE    <I>hdLine</I></P>
Specifies the Service Provider's opaque handle to the line to be closed.  After the line has been successfully closed, this handle is no longer valid.</P>
<B>Return Value    </B>None.  This function is presumed to complete successfully and synchronously.</P>
</P>
<B>Call States</B>    Not applicable</P>
</P>
<B>Comments    </B>The Service Provider has the responsibility to (eventually) report completion for every operation it decides to execute asynchronously.  If this procedure is called for a line on which there are outstanding asynchronous operations, the operations should be reported complete with an appropriate result or error code before this procedure returns.  Generally the TAPI DLL would wait for these to complete in an orderly fashion.  However, the Service Provider should be prepared to handle an early call to <B>TSPI_lineClose</B> in "abort" or "emergency shutdown" situtations.</P>
    A similar requirement exists for active calls on the line.  Such calls must be dropped, with outstanding operations reported complete with appropriate result or error codes.</P>
    After this procedure returns the Service Provider must report no further events on the line or calls that were on the line.  The Service Provider's opaque handles for the line and calls on the line become "invalid".</P>
    The Service Provider must relinquish non-sharable resources it reserves while the line is open.  For example, closing a line accessed through a comm port and modem should result in closing the comm port, making it once available for use by other applications.</P>
<B>Comparison    </B>This operation is strictly synchronous with presumed success in contrast to the <B>lineClose</B> function defined at the TAPI level which allows for failure and asynchronous operation.</P>
    The Service Provider does not issue the <B>LINE_LINEDEVSTATE</B> message in response to this function invocation, since the line becomes closed and there is no longer any interest in its state changes.</P>
<B>See Also    </B>Messages:  <B>LINE_CLOSE, LINE_LINEDEVSTATE</B></P>
<A NAME="PT11"></A>3.1.7.0  TSPI_lineCloseCall</P>
<B>Syntax</B>    void<B> TSPI_lineCloseCall</B>(<I>hdCall</I>)</P>
This function deletes the call after completing or aborting all outstanding asynchronous operations on the call.</P>
  <B>Parameters    </B>HDRVCALL    <I>hdCall</I></P>
Specifies the Service Provider's opaque handle to the call to be deleted.  After the call has been successfully deleted, this handle is no longer valid.</P>
<B>Return Value    </B>None.  This function is presumed to complete successfully and synchronously.</P>
</P>
<B>Call States</B>    Any</P>
</P>
<B>Comments    </B>The Service Provider has the responsibility to (eventually) report completion for every operation it decides to execute asynchronously.  If this procedure is called for a call on which there are outstanding asynchronous operations, the operations should be reported complete with an appropriate result or error code before this procedure returns.  If there is an active call on the line at the time of <B>TSPI_lineCloseCall</B>, the call must bedropped.  Generally the TAPI DLL would wait for calls to be finished and asynchronous operations to complete in an orderly fashion.  However, the Service Provider should be prepared to handle an early call to <B>TSPI_lineCloseCall</B> in "abort" or "emergency shutdown" situtations.</P>
    After this procedure returns the Service Provider must report no further events on the call.  The Service Provider's opaque handle for the call becomes "invalid".</P>
<B>Comparison    </B>There is no function that directly corresonds to this operation at the TAPI level.  The nearest thing is <B>lineHandoff</B> when invoked with parameters requesting that a call handle be invalidated.  The TAPI DLL generally calls <B>TSPI_lineCloseCall</B> when the the call has been dropped using <B>TSPI_lineDrop</B> (completed successfully) and the last application interested in the call invalidates its handle.</P>
<B>See Also    </B>Functions:  <B>TSPI_lineDrop</B></P>
<A NAME="PT12"></A>3.1.7.0  TSPI_lineCompleteCall</P>
<B>Syntax    </B>LONG<B> TSPI_lineCompleteCall</B>(<I>dwRequestID, hdCall, lpdwCompletionID, dwCompletionMode, dwMessageID</I>)</P>
This function is used to specify how a call that could not be connected normally should be completed instead. The network or switch may not be able to complete a call because network resources are busy or the remote station is busy or doesn't answer. The application can request that the call be completed in one of a number of ways. </P>
<B>Parameters    </B>DRV_REQUESTID    <I>dwRequestID</I></P>
Specifies the identifier of the asynchronous request.  The Service Provider returns this value if the function completes asynchronously.</P>
    HDRVCALL    <I>hdCall</I></P>
Specifies the Service Provider's opaque handle to the call whose completion is requested.</P>
<B>    </B>LPDWORD    <I>lpdwCompletionID</I></P>
Specifies a far pointer to a DWORD-sized memory location where the Service Provider writes a completion ID.  This uniquely identifies a completion request in progress on the line that contains the <I>hdCall</I>.  Otherwise the TAPI DLL can make no assumptions about its value.  In particular, a completion ID becomes invalid after the request completes or is cancelled using the function <B>TSPI_lineUncompleteCall</B>.  The Service Provider is free to reuse the completion ID as soon as it becomes invalid.</P>
 <B>    </B>DWORD    <I>dwCompletionMode</I></P>
Specifies the way in which the call is to be completed, of type <B>LINECALLCOMPLMODE</B>. Values are:</P>
LINECALLCOMPLMODE_CAMPON</P>
Queues the call until the call can be completed. The call remains in a non <I>idle</I> state while queued.</P>
LINECALLCOMPLMODE_CALLBACK</P>
Requests the called station to return the call when it returns to idle.</P>
LINECALLCOMPLMODE_INTRUDE</P>
Requests that the call be added to an existing physical call at the called station (barge in).</P>
LINECALLCOMPLMODE_MESSAGE</P>
Leave a short predefined message for the called station (Leave Word Calling). The message to be sent is specified via <I>dwMessageID</I>.<I> </I></P>
<B>    </B>DWORD    <I>dwMessageID</I></P>
Specifies the message that is to be sent when completing the call using LINECALLCOMPLMODE_MESSAGE. This ID selects the message from a small number of predefined messages. </P>
<B>Return Value    </B>Returns zero if the function is successful, the (positive) <I>dwRequestID</I> value if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P>
    LINEERR_INVALCALLHANDLE</P>
The specified call handle is invalid.</P>
    LINEERR_INVALCALLSTATE</P>
The call is not in a valid state for the requested operation.</P>
    LINEERR_INVALCALLCOMPLMODE</P>
The specified completion is invalid.</P>
    LINEERR_INVALPOINTER</P>
The specified pointer parameter is invalid.</P>
    LINEERR_COMPLETIONOVERRUN</P>
The maximum number of outstanding call completions has been exceeded.</P>
    LINEERR_OPERATIONUNAVAIL</P>
The specified operation is not available.</P>
    LINEERR_OPERATIONFAILED</P>
The specified operation failed for unspecified reason.</P>
<B>Call States</B>    <I>hdCall    </I>busy, noAnswer</P>
</P>
<B>Comments    </B>This function is considered complete when the request has been accepted by the network or switch; not when the request is fully completed in the way specified. After this function completes, the call will typically transition to <I>idle</I>. When the called station or network enters a state where the call can be completed as requested, the TAPI DLL will be notified via a <B>LINE_CALLSTATE</B> message with the call state equal to <I>offering</I>. The call's <B>LINECALLINFO</B> record will list the reason for the call as CALLCOMPLETION and provide the completion ID as well. It is possible to have multiple call completion requests outstanding at any given time; the maximum number is device dependent. The completion ID is also used to refer to each individual request so requests can be canceled by calling <B>TSPI_lineUncompleteCall</B>.</P>
<B>See Also    </B>Functions:  <B>TSPI_lineGetCallInfo, TSPI_lineUncompleteCall</B></P>
<B>    </B>Messages:  <B>LINE_CALLSTATE</B></P>
    Data Types:  <B>LINECALLSTATUS, LINECALLINFO, LINECALLCOMPLMODE</B></P>
<A NAME="PT13"></A>3.1.7.0  TSPI_lineCompleteTransfer</P>
<B>Syntax    </B>LONG<B> TSPI_lineCompleteTransfer</B>(<I>dwRequestID, hdCall, hdConsultCall, htConfCall, lphdConfCall, dwTransferMode</I>)</P>
This function completes the transfer of the specified call to the party connected in the consultation call.</P>
<B>Parameters    </B>DRV_REQUESTID    <I>dwRequestID</I></P>
Specifies the identifier of the asynchronous request.  The Service Provider returns this value if the function completes asynchronously.</P>
    HDRVCALL    <I>hdCall</I></P>
Specifies the Service Provider's opaque handle to the call to be transferred.</P>
<B>    </B>HDRVCALL    <I>hdConsultCall</I></P>
Specifies a handle to the call that represents a connection with the destination of the transfer.</P>
    HTAPICALL    <I>htConfCall</I></P>
Specifies the TAPI DLL's opaque handle to the new call.  If <I>dwTransferMode</I> is specified as LINETRANSFERMODE_CONFERENCE then the Service Provider must save this and use it in all subsequent calls to the <B>LINEEVENT</B> procedure reporting events on the call.  Otherwise this parameter is ignored.</P>
<B>    </B>LPHDRVCALL    <I>lphdConfCall</I></P>
Specifies a far pointer to an opaque <B>HDRVCALL</B> representing the Service Provider's identifier for the call.   If <I>dwTransferMode</I> is specified as LINETRANSFERMODE_CONFERENCE then the Service Provider must fill this location with its opaque handle for the new  conference call before this procedure returns, whether it decides to execute the request sychronously or asynchronously.  This handle is invalid if the function results in an error (either synchronously or asynchronously).  If <I>dwTransferMode</I> is some other value this parameter is ignored.</P>
<B>    </B>DWORD    <I>dwTransferMode</I></P>
Specifies how the initiated transfer request is to be resolved, of type <B>LINETRANSFERMODE</B>. Values are:</P>
LINETRANSFERMODE_TRANSFER</P>
Resolve the initiated transfer by transferring the initial call to the consultation call.</P>
LINETRANSFERMODE_CONFERENCE</P>
Resolve the initiated transfer by conferencing all three parties into a three-way conference call. A conference call is created and returned to the TAPI DLL.</P>
<B>Return Value    </B>Returns zero if the function is successful, the (positive) <I>dwRequestID</I> value if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P>
    LINEERR_INVALCALLHANDLE</P>
        The specified call handle is invalid.</P>
    LINEERR_INVALCONSULTCALLHANDLE</P>
        The specified consultation call handle is invalid.</P>
    LINEERR_INVALCALLSTATE</P>
        One or both calls are not in a valid state for the requested operation.</P>
    LINEERR_INVALTRANSFERMODE</P>
        The specified transfer mode parameter is invalid.</P>
    LINEERR_INVALPOINTER</P>
The specified pointer parameter is invalid.</P>
    LINEERR_OPERATIONUNAVAIL</P>
The specified operation is not available.</P>
    LINEERR_OPERATIONFAILED</P>
The specified operation failed for unspecified reason.</P>
<B>Call States</B>    <I>hdCall</I>    onHoldPendingTransfer</P>
    <I>hdConsultCall</I>    connected, ringback, busy</P>
</P>
<B>Comments    </B>This operation completes the transfer of the original call, <I>hdCall</I>, to the party currently connected via <I>hdConsultCall</I>. The consultation call will typically have been dialed on the consultation call allocated as part of <B>TSPI_lineSetupTransfer</B>, but it may be any call to which the switch is capable of transferring <I>hdCall</I>.</P>
    The transfer request can be resolved either as a transfer or as a three-way conference call. When resolved as a transfer, the parties connected via <I>hdCall</I> and <I>hdConsultCall</I> will be connected to each other, and both <I>hdCall</I> and <I>hdConsultCall</I> will typically be removed from the line they were on and both will transition to the <I>idle</I> state. Note that the Service Provider's opaque handles for these calls must remain valid after the transfer has completed.  The TAPI DLL causes these handles to be invalidated when it is no longer interested in them using <B>TSPI_lineCloseCall</B>.</P>
    When resolved as a conference, all three parties will enter in a conference call. Both existing call handles remain valid, but will transition to the conferenced state. A conference call handle will created and returned, and it will transition to the <I>connected</I> state.</P>
    It may also be possible to perform a blind transfer of a call using <B>TSPI_lineBlindTransfer</B>.</P>
<B>See Also    </B>Functions: <B>TSPI_lineSetupTransfer, TSPI_lineCloseCall, TSPI_lineBlindTransfer</B></P>
    Messages:  <B>LINE_CALLSTATE</B></P>
<A NAME="PT14"></A>3.1.7.0  TSPI_lineConditionalMediaDetection</P>
<B>Syntax</B>    LONG<B> TSPI_lineConditionalMediaDetection</B>(<I>hdLine, dwMediaModes, lpCallParams</I>)</P>
If the Service Provider can monitor for the indicated set of media modes AND support the capabilities indicated in <I>lpCallParams</I>, then it sets the indicated media moditoring modes for the line and replies with a "success" indication.  Otherwise, it leaves the media monitoring modes for the line unchanged and replies with a "failure" indication.  The function operates strictly synchronously.</P>
<B>Parameters    </B>HDRVLINE    <I>hdLine</I></P>
Specifies the Service Provider's opaque handle to the line to have media monitoring and parameter capabilities tested and set.</P>
    DWORD   <I> dwMediaModes</I></P>
Specifies the media mode(s) of interest to the app, of type <B>LINEMEDIAMODE</B>. The <I>dwMediaModes</I> parameter is used to register the app as a potential target for inbound call and call hand off for the specified media mode. This parameter is ignored if the OWNER flag is not set in <I>dwPrivileges</I>. Values are:</P>
LINEMEDIAMODE_NONE</P>
This is used as a NULL value for the data type. The app is not interested to be the target of any handoff or inbound calls.</P>
LINEMEDIAMODE_UNKNOWN</P>
The app wants to handle calls of unknown media type; i.e., unclassified calls.</P>
        LINEMEDIAMODE_INTERACTIVEVOICE</P>
The app wants to handle calls of the interactive voice media type; i.e., it manages live voice calls.</P>
        LINEMEDIAMODE_AUTOMATEDVOICE</P>
The app wants to handle calls in which there is voice data managed by an automated application.  In cases where the Service Provider does not distinguish between automated or interactive voice, this should be treated the same as interactive voice.</P>
        LINEMEDIAMODE_DIGITALDATA</P>
The app wants to handle calls of the digital data media type.</P>
        LINEMEDIAMODE_G3FAX</P>
The app wants to handle calls of the group 3 fax media type.</P>
        LINEMEDIAMODE_G4FAX</P>
The app wants to handle calls of the group 4 fax media type.</P>
        LINEMEDIAMODE_DATAMODEM</P>
The app wants to handle calls with the data modem media mode.</P>
        LINEMEDIAMODE_TELETEX</P>
The app wants to handle calls with the teletex media mode.</P>
        LINEMEDIAMODE_VIDEOTEX</P>
The app wants to handle calls with the videotex media mode.</P>
        LINEMEDIAMODE_TELEX</P>
The app wants to handle calls with the telex media mode.</P>
        LINEMEDIAMODE_MIXED</P>
The app wants to handle calls with the ISDN mixed media mode.</P>
        LINEMEDIAMODE_TDD</P>
The app wants to handle calls with the TDD (Telephony Devices for the Deaf) media mode.</P>
        LINEMEDIAMODE_ADSI</P>
The app wants to handle calls with the ADSI (Analog Display Services Interface) media mode.</P>
    LPLINECALLPARAMS    <B>const</B> <I>lpCallParams</I></P>
Specifies a far pointer to a structure of type <B>LINECALLPARAMS</B>.  It describes the call parameters that the line device should be able to provide.  The only relevant fields of <I>lpCallParams</I> for the purposes of this test are the following:</P>
DWORD    dwBearerMode;        dwMinRate;        dwMaxRate;        dwMediaMode;        dwCallParamFlags;<BR></P>
<B>Return Value    </B>Returns zero if the function is successful, or a negative error number if an error has occurred. Possible error returns are:</P>
    LINEERR_INVALLINEHANDLE</P>
The specified line handle is invalid.</P>
    LINEERR_NOMEM</P>
Unable to allocate or lock memory.</P>
    LINEERR_RESOURCEUNAVAIL</P>
The specified operation cannot be completed because of resource overcommitment.</P>
    LINEERR_NODRIVER</P>
The driver was not properly installed.</P>
    LINEERR_OPERATIONFAILED</P>
The specified operation failed for unspecified reasons.</P>
<B>Call States</B>    Not applicable.</P>
<B>Comments</B>    A  TAPI  lineOpen  that  specifies  the  device ID LINE_MAPPER typically results  in  calling  this  procedure  for multiple line devices to hunt for a suitable line, possibly also opening as-yet unopened lines.  A "success" result indicates that the line is suitable for the calling application's requirements.  Note that the media monitoring modes demanded at the TSPI level are the union of monitoring modes demanded by multiple applications at the TAPI level.  As a consequence of this, it is most common for multiple media mode flags to be set simultaneously at this level.  The Service Provider test to determine if it can support at least the specified set regardless of what modes are currently in effect.</P>
    The Device ID LINE_MAPPER is never used at the TSPI level.</P>
<B>Comparison</B>    There is no directly corresponding function at the TAPI level.  This procedure corresponds to the "test" implied for each individual line by the <B>lineOpen</B> procedure when it is called with the device ID LINE_MAPPER.</P>
<B>See Also</B>    Functions:  <B>lineClose</B></P>
<B>    </B>Data Types:  <B>LINEMEDIAMODE, LINECALLPARAMS</B></P>
<A NAME="PT15"></A>3.1.7.0  TSPI_lineDevSpecific</P>
<B>Syntax    </B>LONG<B> TSPI_lineDevSpecific</B>(<I>dwRequestID, hdLine, dwAddressID, hdCall, lpParams, dwSize</I>)</P>
This function is used as a general extension mechanism to enable service providers to provide access to features not described in other operations. The meaning of the extensions are device-specific, and taking advantage of these extensions requires the application to be fully aware of them.</P>
<B>Parameters    </B>DRV_REQUESTID    <I>dwRequestID</I></P>
Specifies the identifier of the asynchronous request.  The Service Provider returns this value if the function completes asynchronously.</P>
    HDRVLINE    <I>hdLine</I></P>
Specifies the Service Provider's opaque handle to the line to be operated on.</P>
<B>    </B>DWORD    <I>dwAddressID</I></P>
Specifies the address on the specified line to be operated on.</P>
    HDRVCALL    <I>hdCall</I></P>
Specifies the Service Provider's opaque handle to the call to be operated on.</P>
<B>    </B>LPVOID    <I>lpParams</I></P>
Specifies a far pointer to a memory area used to hold a parameter block. The format of this parameter block is device specific.</P>
<B>    </B>DWORD    <I>dwSize</I></P>
The size in bytes of the parameter block area.</P>
<B>Return Value    </B>Returns zero if the function is successful, the (positive) <I>dwRequestID</I> value if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P>
    LINEERR_INVALLINEHANDLE</P>
The specified line handle is invalid.</P>
    LINEERR_INVALADDRESSID</P>
The specified address ID is invalid.</P>
    LINEERR_INVALCALLHANDLE</P>
The specified call handle is invalid.</P>
    LINEERR_INVALPOINTER</P>
The specified pointer parameter is invalid.</P>
    LINEERR_OPERATIONUNAVAIL</P>
The specified operation is not available.</P>
    LINEERR_OPERATIONFAILED</P>
The specified operation failed for unspecified reason.</P>
    Additional error returns are device specific.</P>
<B>Call States</B>    <I>hdCall</I>    Device specific</P>
<B>Comments    </B>This operation provides a generic parameter profile. The interpretation of the parameter structure is device specific.  In particular, any of the <I>hdLine</I>, <I>dwAddressID</I>, and <I>hdCall</I> parameters may be unused.  Indications and replies sent back to the application that are device specific should use the <B>LINE_DEVSPECIFIC</B> message.</P>
    This function is called in direct response to an application calling the TAPI function <B>lineDevSpecific</B>.  The TAPI DLL translates the <I>hLine</I> and <I>hCall</I> parameters used at the TAPI level to the corresponding <I>hdLine</I> and <I>hdCall</I> parameters used at the TSPI level.  The <I>lpParams</I> buffer is passed through unmodified.</P>
    Note also that the <I>lpParams</I> data structure should not contain any pointers since they would not be properly translated (thunked) when running a 16 bit application in a 32 bit version of the Telephony DLL and vice versa.</P>
    A service provider can provide access to device specific functions by defining parameters for use with this operation. Applications that want to make use of these device specific extensions should consult the device specific (i.e., vendor specific) documentation that describes what extensions are defined. Note that an app that relies on these device specific extensions will typically not be portable to work with other service provider environments. </P>
    This operation is part of the extended telephony services. It only provides access to a device-specific feature without defining its meaning. This operation is only available if the TAPI DLL has successfully negotiated and selected a device-specific extension version.</P>
<B>See Also</B>    Messages:  <B>LINE_DEVSPECIFIC</B></P>
<A NAME="PT16"></A>3.1.7.0  TSPI_lineDevSpecificFeature</P>
<B>Syntax    </B>LONG <B>TSPI_lineDevSpecificFeature</B>(<I>dwRequestID, hdLine, dwFeature, lpParams, dwSize</I>)</P>
This function is used as an extension mechanism to enable service providers to provide access to features not described in other operations. The meaning of these extensions are device-specific, and taking advantage of these extensions requires the TAPI DLL or its client application to be fully aware of them.</P>
<B>Parameters    </B>DRV_REQUESTID    <I>dwRequestID</I></P>
Specifies the identifier of the asynchronous request.  The Service Provider returns this value if the function completes asynchronously.</P>
    HDRVLINE    <I>hdLine</I></P>
Specifies the Service Provider's opaque handle to the line device.</P>
<B>    </B>DWORD    <I>dwFeature</I></P>
Specifies the feature to invoke on the line device, of type <B>PHONEBUTTONFUNCTION</B>. </P>
<B>    </B>LPVOID    <I>lpParams</I></P>
Specifies a far pointer to a memory area used to hold a feature-dependent parameter block. The format of this parameter block is device specific.</P>
    DWORD    <I>dwSize</I></P>
Specifies the size of the buffer in bytes.</P>
<B>Return Value    </B>Returns zero if the function is successful, the (positive) <I>dwRequestID</I> value if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P>
    LINEERR_INVALLINEHANDLE</P>
The specified line handle is invalid.</P>
    LINEERR_INVALPOINTER</P>
The specified pointer parameter is invalid.</P>
    LINEERR_OPERATIONUNAVAIL</P>
The specified operation is not available.</P>
    LINEERR_OPERATIONFAILED</P>
The specified operation failed for unspecified reason.</P>
    Additional error returns are device specific.</P>
<B>Call States</B>    <I>hdCall</I>    Device specific.</P>
<B>Comments    </B>This function provides the TAPI DLL and its client applications with phone feature button emulation capabilities. When the TAPI DLL invokes this operation on behalf of a client application, it specifies the equivalent of a button press event. This method of invoking features is highly device dependent, as the API does not define the their meaning. Note that an app that relies on these device specific extensions will typically not be portable to work with other service provider environments. </P>
    This function is called in direct response to an application calling the TAPI function <B>lineDevSpecificFeature</B>.  The TAPI DLL translates the <I>hLine</I> parameter used at the TAPI level to the corresponding <I>hdLine</I> parameter used at the TSPI level.  The <I>lpParams</I> buffer is passed through unmodified.</P>
    Note also that the <I>lpParams</I> data structure should not contain any pointers since they would not be properly translated (thunked) when running a 16 bit application in a 32 bit version of the Telephony DLL and vice versa.</P>
    This operation is part of the extended telephony services. It only provides access to a device-specific feature without defining its meaning. This operation is only available if the TAPI DLL has successfully negotiated and selected a device-specific extension version.</P>
<B>See Also    </B>Messages:  <B>LINE_DEVSPECIFICFEATURE</B></P>
    Data Types:  <B>PHONEBUTTONFUNCTION</B></P>
<A NAME="PT17"></A>3.1.7.0  TSPI_lineDial</P>
<B>Syntax    </B>LONG<B> TSPI_lineDial</B>(<I>dwRequestID, hdCall, lpszDestAddress, dwCountryCode</I>)</P>
This function dials the specified dialable number on the specified call. </P>
<B>Parameters    </B>DRV_REQUESTID    <I>dwRequestID</I></P>
Specifies the identifier of the asynchronous request.  The Service Provider returns this value if the function completes asynchronously.</P>
    HDRVCALL    <I>hdCall</I></P>
Specifies the Service Provider's opaque handle to the call to be dialed.</P>
    LPCSTR    <B>const </B><I>lpszDestAddress</I></P>
Specifies the destination to be dialed using the standard dialable number format.  </P>
<B>    </B>DWORD    <I>dwCountryCode</I></P>
Specifies the country code of the destination. This is used by the implementation to select the call progress protocols for the destination address. If a value of zero is specified, then a service provider defined default call progress protocol is used. </P>
<B>Return Value    </B>Returns zero if the function is successful, the (positive) <I>dwRequestID</I> value if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P>
    LINEERR_INVALCALLHANDLE</P>
The specified call handle is invalid.</P>
    LINEERR_INVALPOINTER</P>
The specified pointer parameter is invalid.</P>
    LINEERR_INVALADDRESS</P>
The specified character buffer for the destination address to be dialed contains invalid characters or digits (i.e., syntax error); no dialing has been done.</P>
    LINEERR_INVALPARAM</P>
The specified country code is invalid.</P>
    LINEERR_INVALCALLSTATE</P>
The current state of the call does not allow dialing.</P>
    LINEERR_ADDRESSBLOCKED</P>
The specified address is blocked from being dialed on the specified call.</P>
    LINEERR_BILLINGREJECTED</P>
The billing information specified as part of the destination address has been rejected.</P>
    LINEERR_OPERATIONUNAVAIL</P>
The specified operation is not available.</P>
    LINEERR_OPERATIONFAILED</P>
The specified operation failed for unspecified reasons.</P>
<B>Call States</B>    <I>hdCall    </I>Any state except idle and disconnected</P>
<B>Comments    TSPI_lineDial</B> is used for dialing on an existing call appearance. For example, after a call has been set up for transfer or conference, a consultation call is automatically allocated. <B>TSPI_lineDial</B> would be used to perform the dialing of this consultation call. Note that <B>TSPI_lineDial</B> may be invoked multiple times in the course of dialing in the case of multi-stage dialing, if the line's device capabilities allows it. Also, multiple addresses may be provided in a single dial string separated by CRLF. Service providers that provide inverse multiplexing can establish individual physical calls with each of the addresses, and return a single call handle to the aggregate of all calls to the application. All addresses would use the same country code. </P>
<B>    </B>Dialing is considered completed after the address has been accepted by the service provider; not after the call is finally connected. Service providers that provide inverse multiplexing may allow require multiple addresses to be provided at onece. The service provider sends <B>LINE_CALLSTATE</B> messages to the TAPI DLL to inform it about the progress of the call. To abort a call attempt while a call is being established, the TAPI DLL may invoke <B>TSPI_lineDrop</B>.</P>
<B>See Also    </B>Messages:  <B>LINE_CALLSTATE</B></P>
<A NAME="PT18"></A>3.1.7.0  TSPI_lineDrop</P>
<B>Syntax    </B>LONG<B> TSPI_lineDrop</B>(<I>dwRequestID, hdCall, lpsUserUserInfo, dwSize</I>)</P>
This functions drops or disconnects the specified call. The TAPI DLL has the option to specify user-to-user information to be transmitted as part of the call disconnect.</P>
<B>Parameters    </B>DRV_REQUESTID    <I>dwRequestID</I></P>
Specifies the identifier of the asynchronous request.  The Service Provider returns this value if the function completes asynchronously.</P>
    HDRVCALL    <I>hdCall</I></P>
Specifies the Service Provider's opaque handle to the call to be dropped.</P>
    LPCSTR    <B>const </B><I>lpsUserUserInfo</I></P>
Specifies a far pointer to a string containing user-to-user information to be sent to the remote party as part of the call disconnect.  This pointer is unused if <I>dwUserUserInfoSize</I> is zero and no user-to-user information is to be sent. User-to-user information is only sent if supported by the underlying network (see <B>LINEDEVCAPS</B>).</P>
    DWORD   <I>dwSize</I></P>
Specifies the size in bytes of the user-to-user information in <I>lpsUserUserInfo</I>. If zero, then <I>lpsUserUserInfo</I> can be left NULL, and no user-to-user information will be sent to the remote party.</P>
<B>Return Value    </B>Returns zero if the function is successful, the (positive) <I>dwRequestID</I> value if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P>
    LINEERR_INVALCALLHANDLE</P>
The specified call handle is invalid.</P>
    LINEERR_INVALPOINTER</P>
The specified pointer parameter is invalid.</P>
    LINEERR_INVALCALLSTATE</P>
The current state of the call does not allow the call to be dropped.</P>
    LINEERR_OPERATIONUNAVAIL</P>
The specified operation is not available.</P>
    LINEERR_OPERATIONFAILED</P>
The specified operation failed for unspecified reasons.</P>
<B>Call States</B>    <I>hdCall    </I>any state</P>
</P>
<B>Comments    </B>When invoking <B>TSPI_lineDrop</B> related calls may sometimes be affected as well. For example, dropping a conference call may drop all individual participating calls. <B>LINE_CALLSTATE</B> messages are sent to the TAPI DLL for all calls whose call state is affected. A dropped call will typically transition to the <I>idle</I> state.</P>
    Invoking <B>TSPI_lineDrop</B> on a call in the <I>offering</I> state rejects the call. Not all telephone networks provide this capability.</P>
    Invoking <B>TSPI_lineDrop</B> on a consultation call that was set up using either <B>TSPI_lineSetupTransfer</B> or <B>TSPI_lineSetupConference</B>, will cancel the consultation call. Some switches automatically unhold the other call. </P>
    The TAPI DLL has the option to send user-to-user information at the time of the drop. Even if user-to-user information can be sent, often no guarantees are made that the network will deliver this information to the remote party.</P>
    Note that in various bridged or party line configurations when multiple parties are on the call, <B>TSPI_lineDrop</B> by the application may not actually clear the call.</P>
<B>See Also    </B>Functions:  <B>TSPI_lineGetDevCaps</B></P>
<A NAME="PT19"></A>3.1.7.0  TSPI_lineForward</P>
<B>Syntax    </B>LONG<B> TSPI_lineForward</B>(<I>dwRequestID, hdLine, bAllAddresses, dwAddressID, lpForwardList, dwNumRingsNoAnswer, htConsultCall, lphdConsultCall</I>)</P>
This function forwards calls destined for the specified address on the specified line, according to the specified forwarding instructions. When an originating address (<I>dwAddressID</I>) is forwarded, the specified incoming calls for that address are deflected to the other number by the switch. This function provides a combination of forward and do-not-disturb features. This function can also cancel specific forwarding currently in effect.</P>
<B>Parameters    </B>DRV_REQUESTID    <I>dwRequestID</I></P>
Specifies the identifier of the asynchronous request.  The Service Provider returns this value if the function completes asynchronously.</P>
    HDRVLINE    <I>hdLine</I></P>
Specifies the Service Provider's opaque handle to the line to be forwarded.</P>
<B>    </B>BOOL    <I>bAllAddresses</I></P>
Specifies whether all originating addresses on the line or just the one specified is to be forwarded. If TRUE, all addresses on the line are forwarded and <I>dwAddressID</I> is ignored; if FALSE, only the address specified as <I>dwAddressID</I> is forwarded.</P>
<B>    </B>DWORD    <I>dwAddressID</I></P>
Specifies the address on the specified line whose incoming calls are to be forwarded. This parameter is ignored if <I>bAllAddresses</I> is TRUE.</P>
<B>    </B>LPLINEFORWARDLIST    <B>const</B><I> lpForwardList</I></P>
Specifies a far pointer to a variable size data structure that describes the specific forwarding instructions, of type <B>LINEFORWARDLIST</B>.</P>
<B>    </B>DWORD    <I>dwNumRingsNoAnswer</I></P>
Specifies the number of rings before a call is considered a "no answer".</P>
    HTAPICALL    <I>htConsultCall</I></P>
Specifies the TAPI DLL's opaque handle to the new call.  In some telephony environments, forwarding a call has the side effect of creating a consultation call used to consult the party that is being forwarded to. In such an environment, the Service Provider creates the new consutation call and  must save this value and use it in all subsequent calls to the <B>LINEEVENT</B> procedure reporting events on the call. If no consultation call is created, this value is ignored.</P>
<B>    </B>LPHDRVCALL    <I>lphdConsultCall</I></P>
Specifies a far pointer to an opaque <B>HDRVCALL</B> representing the Service Provider's identifier for the call.  In telephony environments where forwarding a call has the side effect of creating a consultation call used to consult the party that is being forwarded to, the Service Provider must fill this location with its opaque handle for the call before this procedure returns, whether it decides to execute the request sychronously or asynchronously. The Service Provider is permitted to do callbacks regarding the new call before it returns from this procedure If no consultation call is created, the <B>HDRVCALL</B> must be left NULL.</P>
<B>Return Value    </B>Returns zero if the function is successful, the (positive) <I>dwRequestID</I> value if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P>
    LINEERR_INVALLINEHANDLE</P>
The specified line device handle is invalid.</P>
    LINEERR_INVALADDRESSID</P>
The specified address ID is invalid.</P>
    LINEERR_INVALPOINTER</P>
One or more of the specified pointer parameters are invalid.</P>
    LINEERR_INVALPARAM</P>
The specified forward list parameter contains invalid information.</P>
    LINEERR_OPERATIONUNAVAIL</P>
The specified operation is not available.</P>
    LINEERR_OPERATIONFAILED</P>
The specified operation failed for unspecified reasons.</P>
<B>Call States</B>    Not applicable.</P>
<B>Comments</B>    Forwarding of the address(es) remains in effect until this function is called again. The most recent forwarding list replaces the old one. Forwarding can be canceled by specifying a NULL pointer as <I>lpForwardList</I>. If a NULL destination address is specified for an entry in the forwarding list, then the operation acts as a do not disturb.</P>
    Be aware that forwarding status of an address may also be affected externally. For example via administrative actions at the switch, or by a user from another station. It may not be possible for the service provider to be aware of this state change, and may not be able to keep in sync with the forwarding state known to the switch.</P>
    Since the NULL value returned into <I>lphdConsultCall</I> is the only way for the TAPI DLL to determine whether or not the Service Provider created a consultation call, the Service Provider can not use NULL as a valid opaque call handle.</P>
<B>Comparison    </B>This function differs from the TAPI in that it follows the TSPI model for beginning the lifetime of a call; the TAPI DLL and Service Provider exchange opaque handles representing the call with one another.  In addition, the Service  Provider is permitted to do callbacks regarding the new call before it returns from this procedure.</P>
<B>See Also</B>    Functions:  <B>lineGetAddressStatus</B></P>
    Messages:  <B>LINE_ADDRESSSTATUS</B></P>
<B>    </B>Data Types:  <B>LINEFORWARDLIST</B></P>
<A NAME="PT20"></A>3.1.7.0  TSPI_lineGatherDigits</P>
<B>Syntax    </B>LONG <B>TSPI_lineGatherDigits</B>(<I>dwRequestID, hdCall, dwEndToEndID, dwDigitModes, lpsDigits, dwNumDigits, lpszTerminationDigits, dwFirstDigitTimeout, dwInterDigitTimeout</I>)</P>
This function initiates the buffered gathering of digits on the specified call. The TAPI DLL specifies a buffer in which to place the digits and the maximum number of digits to be collected.</P>
Digit collection is terminated in a variety of ways. Firstly, the requested number of digits has been collected. Secondly, one of the digits detected matches a digit in <I>szTerminationDigits </I>before the specified number of digits has been collected. The detected termination digit is also placed in the buffer and the partial buffer is returned. Thirdly, one of the timeouts expires. The <I>dwFirstDigitTimeout</I> expires if the first digit is not received in this time period. The <I>dwInterDigitTimout</I> expires if the second, third, etc. digit is not received within that time amount from the previously detected digit, and a partial buffer is returned. A fourth method for terminating (i.e., canceling) digit detection is by calling this operation again while collection is in progress. The old collection session is terminated and the content of the old buffer is undefined. The mechanism for canceling digit gathering without initiating another is by invoking this operation with <I>lpsDigits</I> equal to NULL.</P>
<B>Parameters    </B>DRV_REQUESTID    <I>dwRequestID</I></P>
Specifies the identifier of the asynchronous request.  The Service Provider returns this value if the function completes asynchronously.</P>
    HDRVCALL    <I>hdCall</I></P>
Specifies the Service Provider's opaque handle to the call on which digit gathering is to be performed.</P>
    DWORD    <I>dwEndToEndID</I></P>
Specifies a unique, uninterpreted identifier of the request for its entire lifetime, that is, until the matching <B>LINE_GATHERDIGITS</B> message is sent.  The Service Provider includes this identifier as one of the parameters in the message.</P>
    DWORD     <I>dwDigitModes</I></P>
Specifies the digit mode(s) that are to be monitored, of type <B>LINEDIGITMODE</B>.</P>
LINEDIGITMODE_PULSE</P>
Detect digits as audible click that are the result of the use of rotary pulse sequences. Valid digits for pulse mode are '0' through '9'.</P>
LINEDIGITMODE_DTMF</P>
Detect digits as DTMF tones. Valid digits for DTMF mode are '0' through '9', 'A', 'B', 'C', 'D', '*', '#'.</P>
<B>    </B>LPSTR    <I>lpsDigits</I></P>
Specifies a far pointer to the buffer where detected digits are to be stored as ASCII characters. Note that digits may not show up in the buffer one at a time as they are collected. Only after a <B>LINE_GATHERDIGITS</B> message is received should the content of the buffer be assumed to be valid. If <I>lpsDigits</I> is specified as NULL the digit gathering currently in progress on the call is canceled and the <I>dwNumDigits</I> parameter is ignored. Otherwise, <I>lpsDigits</I> is assumed to have room for <I>dwNumDigits</I> digits.</P>
    DWORD    <I>dwNumDigits</I></P>
Specifies the number of digits to be collected before a <B>LINE_GATHERDIGITS</B> message is sent to the TAPI DLL. <I>dwNumDigits</I> is ignored when <I>lpsDigits</I> is NULL. This function will fail if <I>dwNumDigits</I> is  zero.</P>
<B>    </B>LPCSTR    <B>const</B> <I>lpszTerminationDigits</I></P>
Specifies a NULL-terminated string of termination digits as ASCII characters. If one of the digits in the string is detected, then that termination digit is appended to the buffer, digit collection is terminated and the <B>LINE_GATHERDIGITS</B> message is sent to the TAPI DLL.</P>
Valid characters for pulse mode are '0' through '9'. Valid characters for DTMF mode are '0' through '9', 'A', 'B', 'C', 'D', '*', '#'.</P>
    DWORD    <I>dwFirstDigitTimeout</I></P>
Specifies the time duration in milliseconds in which the first digit is expected. If the first digit is not received in this timeframe, then digit collection is aborted and a <B>LINE_GATHERDIGITS</B> message is sent to the TAPI DLL. The buffer only contains the NULL character, indicating no digits were received and the first digit timeout terminated digit gathering. The call's line device capabilities specifies the valid range for this parameter or indicates that timeouts are not supported.</P>
    DWORD    <I>dwInterDigitTimeout</I></P>
Specifies the maximum time duration in milliseconds between consecutive digits. If no digit is received in this timeframe, then digit collection is aborted and a <B>LINE_GATHERDIGITS</B> message is sent to the TAPI DLL. The buffer only contains the digits collected up to this point followed by a NULL character, indicating that an interdigit timeout terminated digit gathering. The call's line device capabilities specifies the valid range for this parameter or indicates that timeouts are not supported.</P>
<B>Return Value    </B>Returns zero if the function is successful, the (positive) <I>dwRequestID</I> value if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P>
    LINEERR_INVALCALLHANDLE</P>
The specified call handle is invalid.</P>
    LINEERR_INVALDIGITMODE</P>
The specified digit mode is not available.</P>
    LINEERR_INVALPOINTER</P>
One or more of the specified pointer parameters are invalid.</P>
    LINEERR_INVALDIGITS</P>
The specified termination digits are not valid.</P>
    LINEERR_INVALPARAM</P>
The <I>dwNumDigits</I> parameter is invalid.</P>
    LINEERR_RESOURCEUNAVAIL</P>
The specified operation cannot be completed because of resource overcommitment.</P>
    LINEERR_OPERATIONUNAVAIL</P>
The specified operation is not available.</P>
    LINEERR_OPERATIONFAILED</P>
The specified operation failed for unspecified reasons.</P>
<B>Call States</B>    <I>hdCall    </I>any state</P>
<B>Comments    </B>This function is considered successful if digit collection has been correctly initiated; not when digit collection has terminated. In all cases where a partial buffer is returned, valid digits (if any) are followed by an ASCII NULL character.</P>
    Although this function can be invoked in any call state, digits can typically only be gathered while the call is in the <I>connected</I> state.</P>
    The message <B>LINE_GATHERDIGITS</B> is ordinarily sent when the digit buffer becomes filled.  It is also sent when partial buffers are returned because of timeouts or matching termination digits, or when the request is canceled via another <B>TSPI_lineGatherDigits</B> request on the call. Only one gather digits request can be active at a time.</P>
    The TAPI DLL can use <B>TSPI_lineMonitorDigits</B> to enable or disable unbuffered digit detection. Each time a digit is detected in this fashion, a <B>LINE_MONITORDIGITS</B> message is sent to the TAPI DLL. Both buffered and unbuffered digit detection can be enabled for the same call simultaneously.</P>
    The Service Provider is allowed some variation in the quality of timing it uses for this function, including not doing timings at all.  The quality of timing is reported in <B>LINEDEVCAPS</B>, in the fields <B>dwGatherDigitsMinTimeout</B> and <B>dwGatherDigitsMaxTimeout</B>.</P>
<B>See Also    </B>Functions:  <B>TSPI_lineGetDevCaps, TSPI_lineMonitorDigits</B></P>
<B>    </B>Messages:  <B>LINE_GATHERDIGITS</B></P>
<B>    </B>Data Types:  <B>LINEDEVCAPS, LINEDIGITMODE</B></P>
<A NAME="PT21"></A>3.1.7.0  TSPI_lineGenerateDigits</P>
<B>Syntax    </B>LONG<B> TSPI_lineGenerateDigits</B>(<I>dwRequestID, hdCall, dwEndToEndID, dwDigitMode, lpszDigits, dwDuration</I>)</P>
This function initiates the generation of the specified digits on the specified call as in-band tones using the specified signaling mode. Invoking this function with a NULL value for <I>lpszDigits</I> aborts any digit generation currently in progress. Invoking <B>TSPI_lineGenerateDigits</B> or <B>TSPI_lineGenerateTone</B> while digit generation is in progress aborts the current digit generation or tone generation in progress and initiates the generation of the most recently specified digits or tone. </P>
<B>Parameters    </B>DRV_REQUESTID    <I>dwRequestID</I></P>
Specifies the identifier of the asynchronous request.  The Service Provider returns this value if the function completes asynchronously.</P>
    HDRVCALL    <I>hdCall</I></P>
Specifies the Service Provider's opaque handle to the call on which digit generation is to be done.</P>
    DWORD    <I>dwEndToEndID</I></P>
Specifies a unique, uninterpreted identifier of the request for its entire lifetime, that is, until the matching <B>LINE_GENERATE</B> message is sent.  The Service Provider includes this identifier as one of the parameters in the message.</P>
<I>    </I>DWORD    <I>dwDigitMode</I></P>
Indicates the format to be used for signaling these digits, of type <B>LINEDIGITMODE</B>. Values are:</P>
LINEDIGITMODE_PULSE</P>
Uses pulse/rotary for digit signaling. Valid digits for pulse mode are '0' through '9'.</P>
LINEDIGITMODE_DTMF</P>
Uses DTMF tones for digit signaling. Valid digits for DTMF mode are '0' through '9', 'A', 'B', 'C', 'D', '*', '#'.</P>
<B>    </B>LPCSTR    <B>const</B><I> lpszDigits</I></P>
Specifies a far pointer to a NULL terminated character buffer that contains the digits to be generated. </P>
Valid characters for pulse mode are '0' through '9' and ',' (comma). Valid characters for DTMF mode are '0' through '9', 'A', 'B', 'C', 'D', '*', '#', and ',' (comma). A comma injects an extra delay between the signaling of the previous and next digits it separates. The duration of this pause is configuration defined. The line's device capabilities indicates what this duration is. Multiple commas may be used to inject longer pauses. Invalid digits are ignored during the generation.</P>
<I>    </I>DWORD    <I>dwDuration</I></P>
Specifies both the duration in milliseconds of DTMF digits and pulse and DTMF inter-digit spacing. A value of zero will use a default value.</P>
<B>Return Value    </B>Returns zero if the function is successful, the (positive) <I>dwRequestID</I> value if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P>
    LINEERR_INVALCALLHANDLE</P>
The specified call handle is invalid.</P>
    LINEERR_INVALDIGITMODE</P>
The specified digit mode is invalid.</P>
    LINEERR_INVALPOINTER</P>
The specified pointer parameter is invalid.</P>
    LINEERR_RESOURCEUNAVAIL</P>
The specified operation cannot be completed because of resource overcommitment.</P>
    LINEERR_OPERATIONUNAVAIL</P>
The specified operation is not available.</P>
    LINEERR_OPERATIONFAILED</P>
The specified operation failed for unspecified reasons.</P>
<B>Call States</B>    <I>hdCall    </I>Any state</P>
</P>
<B>Comments    </B>The<B> TSPI_lineGenerateDigits</B> function is considered to have completed successfully when the digit generation has been successfully initiated; not when all digits have been generated. Contrary to <B>TSPI_lineDial</B>, which dials digits in a network dependent fashion, <B>TSPI_lineGenerateDigits</B> guarantees to produce the digits as inband tones over the voice channel using DTMF or hookswitch dial pulses when using pulse. <B>TSPI_lineGenerateDigits</B> is generally not suitable for making calls or dialing, it is intendent for end-to-end signaling over an established call. </P>
    After all digits in <I>lpszDigits</I> have been generated, or after digit generation has been aborted or canceled, a <B>LINE_GENERATE</B> message is sent to the TAPI DLL. </P>
    Note that only one inband generation request at a time (tone generation or digit generation) is allowed to be in progress per call.</P>
    Be aware that, depending on the service provider and hardware, the TAPI DLL may monitor the digits it generates itself.  It is the reponsibility of the TAPI DLL or its clients to filter digit monitoring appropriately while generating digits.</P>
<B>See Also    </B>Functions:  <B>TSPI_lineGenerateTone, TSPI_lineDial</B></P>
<B>    </B>Messages:  <B>LINE_GENERATE</B></P>
    Data Types:  <B>LINEDIGITMODE</B></P>
<A NAME="PT22"></A>3.1.7.0  TSPI_lineGenerateTone</P>
<B>Syntax    </B>LONG<B> TSPI_lineGenerateTone</B>(<I>dwRequestID, hdCall, dwEndToEndID, dwToneMode, dwDuration, dwNumTones, lpTones</I>)</P>
This function generates the specified tone inband over the specified call. Invoking this function with a zero for <I>dwToneMode</I> aborts the tone generation generation currently in progress on the specified call. Invoking <B>TSPI_lineGenerateTone</B> or <B>TSPI_lineGenerateDigits</B> while tone generation is in progress aborts the current tone generation or digit generation in progress and initiates the generation of the newly specified tone or digits.</P>
<B>Parameters    </B>DRV_REQUESTID    <I>dwRequestID</I></P>
Specifies the identifier of the asynchronous request.  The Service Provider returns this value if the function completes asynchronously.</P>
    HDRVCALL    <I>hdCall</I></P>
Specifies the Service Provider's opaque handle to the call on which tone generation is to be performed.</P>
    DWORD    <I>dwEndToEndID</I></P>
Specifies a unique, uninterpreted identifier of the request for its entire lifetime, that is, until the matching <B>LINE_GENERATE</B> message is sent.  The Service Provider includes this identifier as one of the parameters in the message.</P>
    DWORD   <I>dwToneMode</I></P>
Defines the tone to be generated, of type <B>LINETONEMODE</B>. Tones can be either standard or custom. A custom tone is composed of set of arbitrary frequencies. A small number of standard tones are predefined. The duration of the tone is specified via <B>dwDuration</B> for both standard and custom tones. Values are:</P>
LINETONEMODE_CUSTOM</P>
The tone is a custom tone, defined by the specified frequencies.</P>
LINETONEMODE_RINGBACK</P>
The tone to be generated is ring tone. The exact ringback tone is service provider defined.</P>
LINETONEMODE_BUSY</P>
The tone is a standard (station) busy tone. The exact busy tone is service provider defined.</P>
LINETONEMODE_BEEP</P>
The tone is a beep, as used to announce the beginning of a recording. The exact beep tone is service provider defined.</P>
LINETONEMODE_BILLING</P>
The tone is billing information tone such as a credit card prompt tone. The exact billing tone is service provider defined.</P>
A value of zero for <I>dwToneMode</I> cancels tone generation.</P>
<I>    </I>DWORD    <I>dwDuration</I></P>
Specifies duration in milliseconds during which the tone should be sustained.</P>
<I>    </I>DWORD    <I>dwNumTones</I></P>
Specifies the number of entries in the <I>lpTones</I> array. This field is ignored if <I>dwToneMode</I> is not equal to LINETONEMODE_CUSTOM.</P>
<B>    </B>LPLINEGENERATETONE    <B>const</B> <I>lpTones</I></P>
Specifies a far pointer to a <B>LINEGENERATETONE</B> array that specifies the tone's components. This parameter may be left NULL for non custom tones.</P>
<B>Return Value    </B>Returns zero if the function is successful, the (positive) <I>dwRequestID</I> value if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P>
    LINEERR_INVALCALLHANDLE</P>
The specified call handle is invalid.</P>
    LINEERR_INVALPOINTER</P>
The specified pointer parameter is invalid.</P>
    LINEERR_INVALTONEMODE</P>
The specified tone mode parameter is invalid.</P>
    LINEERR_INVALTONE</P>
The specified custom tone does not represent a valid tone, or is made up of too many frequencies.</P>
    LINEERR_RESOURCEUNAVAIL</P>
The specified operation cannot be completed because of resource overcommitment.</P>
    LINEERR_OPERATIONUNAVAIL</P>
The specified operation is not available.</P>
    LINEERR_OPERATIONFAILED</P>
The specified operation failed for unknown reasons.</P>
<B>Call States</B>    <I>hdCall    </I>Any state</P>
</P>
<B>Comments    TSPI_lineGenerateTone</B> is considered to have completed successfully when the tone generation has been successfully initiated; not when the generation of the tone is done. The function allows the inband generation of several predefined tones, such as ring back, busy tones, and beep. It also allows for the fabrication of custom tones by specifying their component frequencies, cadence and volume. Since these tones are generated as inband tones, the call would typically have to be in the <I>connected</I> state for tone generation to be effective. When the generation of the tone is complete, or when tone generation is canceled, a <B>LINE_GENERATE</B> message is sent to the TAPI DLL. </P>
    Note that only one inband generation request (tone generation or digit generation) is allowed to be in progress per call. This implies that if tone generation is currently in progress on a call, invoking either <B>TSPI_lineGenerateDigits</B> or <B>TSPI_lineGenerateTone</B> will cancel the tone generation. </P>
<B>See Also    </B>Functions:  <B>TSPI_lineGenerateDigits</B></P>
<B>    </B>Messages:  <B>LINE_GENERATE</B></P>
    Data Types:  <B>LINEGENERATETONE</B></P>
<A NAME="PT23"></A>3.1.7.0  TSPI_lineGetAddressCaps</P>
<B>Syntax</B>    LONG<B> TSPI_lineGetAddressCaps</B>(<I>dwRequestID, dwDeviceID, dwAddressID, dwTSPIVersion, dwExtVersion, lpAddressCaps</I>)</P>
This function queries the specified address on the specified line device to determine its telephony capabilities.</P>
<B>Parameters    </B>DRV_REQUESTID    <I>dwRequestID</I></P>
Specifies the identifier of the asynchronous request.  The Service Provider returns this value if the function completes asynchronously.</P>
    DWORD    <I>dwDeviceID</I></P>
Specifies the line device containing the address to be queried.</P>
    DWORD    <I>dwAddressID</I></P>
Specifies the address on the given line device whose capabilities are to be queried.</P>
    DWORD    <I>dwTSPIVersion</I></P>
Specifies the version number of the Telephony SPI to be used. The high order word contains the major version number; the low order word contains the minor version number.</P>
    DWORD    <I>dwExtVersion</I></P>
Specifies the version number of the service provider-specific extensions to be used. This number can be left zero if no device specific extensions are to be used. Otherwise, the high order word contains the major version number; the low order word contain the minor version number.</P>
    LPLINEADDRESSCAPS    <I>lpAddressCaps</I></P>
Specifies a far pointer to a variable sized structure of type <B>LINEADDRESSCAPS</B>. Upon successful completion of the request, this structure is filled with address capabilities information.</P>
<B>Return Value    </B>Returns zero if the function is successful, the (positive) <I>dwRequestID</I> value if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P>
    LINEERR_BADDEVICEID</P>
The specified line device ID is out of the range of line devices IDs supported by this driver.</P>
    LINEERR_INVALADDRESSID</P>
The specified address ID is out of range.</P>
    LINEERR_INCOMPATIBLEVERSION</P>
The specified TSPI and/or extension version number is not supported by the Service Provider for the specified line device.</P>
    LINEERR_INVALEXTVERSION</P>
The app requested an invalid extension version number.</P>
    LINEERR_NODRIVER</P>
The driver was not properly installed.</P>
    LINEERR_INVALPOINTER</P>
The specified pointer parameter is invalid.</P>
    LINEERR_OPERATIONFAILED</P>
The specified operation failed for unknown reasons.</P>
<B>Call States</B>    Not applicable</P>
<B>Comments</B>    The line device IDs supported by a particular driver are numbered sequentially starting at a value set by the TAPI DLL using the <B>TSPI_lineSetDeviceIDBase</B> function.</P>
    The version number supplied has been negotiated by the TAPI DLL using <B>TSPI_lineNegotiateTSPIVersion</B>.</P>
<B>Comparison</B>    This function differs from the <B>lineGetAddressCaps</B> function at the TAPI DLL in that no Application handle is passed.  Furthermore, the interface version number is for the TSPI rather than TAPI.</P>
<B>See Also</B>    Data Types:  <B>LINEADDRESSCAPS</B></P>
<B>    </B>Functions:  <B>TSPI_lineSetDeviceIDBase, TSPI_lineNegotiateTSPIVersion</B></P>
<B>Fields:    </B>The following table indicates which fields of the <B>LINEADDRESSCAPS</B> data structure are filled in by the Service Provider and which fields are filled in by the TAPI DLL.  The Service Provider must preserve (i.e., must not overwrite) the values filled in by the TAPI DLL.</P>
</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="168pt" VALIGN="TOP"><COL WIDTH="79pt" VALIGN="TOP"><COL WIDTH="105pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Field Name</B></P></TD><TD VALIGN="TOP"><B>TAPI DLL</B></P></TD><TD VALIGN="TOP"><B>Service Provider</B></P></TD></TR></TBODY></TABLE>
<BR></P><A NAME="PT24"></A>3.1.7.0  TSPI_lineGetAddressID</P>
<B>Syntax    </B>LONG<B> TSPI_lineGetAddressID</B>(<I>dwRequestID, hdLine, lpdwAddressID, dwAddressMode, lpsAddress, dwSize</I>)</P>
This operation returns the address ID associated with address in a different format on the specified line.</P>
<B>Parameters    </B>DRV_REQUESTID    <I>dwRequestID</I></P>
Specifies the identifier of the asynchronous request.  The Service Provider returns this value if the function completes asynchronously.</P>
    HDRVLINE    <I>hdLine</I></P>
Specifies the Service Provider's opaque handle to the line whose address is to be retrieved.</P>
<B>    </B>LPDWORD    <I>lpdwAddressID</I></P>
Specifies a far pointer to a DWORD-sized memory location where the address ID is returned.</P>
    DWORD    <I>dwAddressMode</I></P>
Specifies the address mode of the address contained in <I>lpAddress</I>, of type <B>LINEADDRESSMODE</B>. Values are:</P>
        LINEADDRESSMODE_ADDRESSID</P>
The address is specified via a small integer in the range 0 to <I>dwNumAddresses </I>- 1, where <I>dwNumAddresses</I> is the value in the line's device capabilities.  </P>
        LINEADDRESSMODE_DIALABLEADDR</P>
The address is specified via its dialable address. <I>lpAddress</I> is the dialable address or canonical address format. </P>
    LPCSTR    <B>const</B> <I>lpsAddress</I></P>
Specifies a far pointer to a data structure holding the address assigned to the specified line device. The format of the address is determined by <I>dwAddressMode</I> parameter. If a DIALABLEADDR, the <I>lpsAddress</I> uses the common dialable number format and is NULL-terminated.</P>
    DWORD    <I>dwSize</I></P>
Specifies the size of the address contained in <I>lpAddress</I>.</P>
<B>Return Value    </B>Returns zero if the function is successful, the (positive) <I>dwRequestID</I> value if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P>
    LINEERR_INVALLINEHANDLE</P>
The specified device handle is invalid.</P>
    LINEERR_INVALADDRESSMODE</P>
The specified address mode is invalid.</P>
    LINEERR_INVALPOINTER</P>
One or more of the specified pointer parameters are invalid.</P>
    LINEERR_INVALADDRESS</P>
The specified address is not assigned to the specified line or is invalid.</P>
    LINEERR_OPERATIONUNAVAIL</P>
The specified operation is not available.</P>
    LINEERR_OPERATIONFAILED</P>
The specified operation failed for unknown reasons.</P>
<B>Call States</B>    Not applicable</P>
<B>Comments</B>    This function is used to map a phone number (address) assigned to a line device back to its <I>dwAddressID</I> in the range 0 to the number of addresses - 1 returned in the line's device capabilities. <B>TSPI_lineMakeCall</B> allows the TAPI DLL to make a call by specifying a line handle and an address on the line. The address can be specified either as a <I>dwAddressID</I>, as a phone number, or as a device specific name or identifier. Using a phone number may be practical in environments where a single line is assigned lots of addresses.</P>
<B>See Also    </B>Functions:  <B>TSPI_lineMakeCall</B></P>
<B>    </B>Data Types:  <B>LINEADDRESSMODE</B></P>
<A NAME="PT25"></A>3.1.7.0  TSPI_lineGetAddressStatus</P>
<B>Syntax    </B>LONG<B> TSPI_lineGetAddressStatus</B>(<I>dwRequestID, hdLine, dwAddressID, lpAddressStatus</I>)</P>
This operation allows the TAPI DLL to query the specified address for its current status.</P>
<B>Parameters    </B>DRV_REQUESTID    <I>dwRequestID</I></P>
Specifies the identifier of the asynchronous request.  The Service Provider returns this value if the function completes asynchronously.</P>
    HDRVLINE    <I>hdLine</I></P>
Specifies the Service Provider's opaque handle to the line containing the address to be queried.</P>
<B>    </B>DWORD    <I>dwAddressID</I></P>
Specifies an address on the given open line device. This is the address to be queried.</P>
    LPLINEADDRESSSTATUS    <I>lpAddressStatus</I></P>
Specifies a far pointer to a variable sized data structure of type <B>LINEADDRESSSTATUS</B>.</P>
<B>Return Value    </B>Returns zero if the function is successful, the (positive) <I>dwRequestID</I> value if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P>
    LINEERR_INVALLINEHANDLE</P>
The specified device handle is invalid.</P>
    LINEERR_INVALADDRESSID</P>
The specified address ID is out of range.</P>
    LINEERR_INVALPOINTER</P>
The specified pointer parameter is invalid.</P>
    LINEERR_OPERATIONFAILED</P>
The specified operation failed for unknown reasons.</P>
<B>Call States</B>    Not applicable.</P>
<B>Comments    </B>None.</P>
<B>See Also    </B>Data Types:  <B>LINEADDRESSSTATUS</B></P>
<B>Fields:    </B>The following table indicates which fields of the <B>LINEADDRESSSTATUS</B> data structure are filled in by the Service Provider and which fields are filled in by the TAPI DLL.  The Service Provider must preserve (i.e., must not overwrite) the values filled in by the TAPI DLL.</P>
</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="170pt" VALIGN="TOP"><COL WIDTH="80pt" VALIGN="TOP"><COL WIDTH="110pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Field Name</B></P></TD><TD VALIGN="TOP"><B>TAPI DLL</B></P></TD><TD VALIGN="TOP"><B>Service Provider</B></P></TD></TR></TBODY></TABLE>
<BR></P><A NAME="PT26"></A>3.1.7.0  TSPI_lineGetCallAddressID</P>
<B>Syntax    </B>void<B> TSPI_lineGetCallAddressID</B>(<I>hdCall, lpdwAddressID</I>)</P>
This operation allows the TAPI DLL to retrieve the address ID for the indicated call.</P>
<B>Parameters    </B>HDRVCALL    <I>hdCall</I></P>
Specifies the Service Provider's opaque handle to the call whose address ID is to be retrieved.</P>
    LPDWORD    <I>lpdwAddressID</I></P>
Specifies a far pointer to a DWORD into which the Service Provider writes the call's address ID.</P>
<B>Return Value    </B>none</P>
<B>Call States</B>    Any</P>
<B>Comments    </B>This operation must be executed synchronously by the Service Provider, with presumed success.  This operation may be called from within the context of the <B>ASYNC_LINE_COMPLETION</B> or <B>LINEEVENT</B> callbacks (i.e., from within an interrupt context).  This function would typically be called at the start of the call life cycle.</P>
    If the Service Provider models lines as "pools" of channel resources and does "inverse multiplexing" of a call over several address IDs it should consistently choose one of these address IDs as the primary identifier reported by this function and in the <B>LINE_CALLINFO</B> data structure.</P>
<B>Comparison    </B>This function has no direct correspondence at the TAPI level.  It gives the TAPI DLL sufficient information to implement the <B>lineGetCalls</B> function invoked with the <B>LINECALLSELECT_ADDRESS</B> option.</P>
<B>See Also    </B>Functions:  <B>ASYNC_LINE_COMPLETION</B>, <B>LINEEVENT, TSPI_lineGetCallInfo</B></P>
<B>    </B>Data Structures:  <B>LINE_CALLINFO</B></P>
<A NAME="PT27"></A>3.1.7.0  TSPI_lineGetCallInfo</P>
<B>Syntax    </B>LONG<B> TSPI_lineGetCallInfo</B>(<I>dwRequestID, hdCall, lpCallInfo</I>)</P>
This operation enables the TAPI DLL to obtain fixed information about the specified call.</P>
  <B>Parameters    </B>DRV_REQUESTID    <I>dwRequestID</I></P>
Specifies the identifier of the asynchronous request.  The Service Provider returns this value if the function completes asynchronously.</P>
    HDRVCALL    <I>hdCall</I></P>
Specifies the Service Provider's opaque handle to the call whose call information is to be retrieved.</P>
    LPLINECALLINFO    <I>lpCallInfo</I></P>
Specifies a far pointer to a variable sized data structure of type <B>LINECALLINFO</B>. Upon successful completion of the request, this structure is filled with call related information.</P>
<B>Return Value    </B>Returns zero if the function is successful, the (positive) <I>dwRequestID</I> value if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P>
    LINEERR_INVALCALLHANDLE</P>
The specified call handle is invalid.</P>
    LINEERR_INVALPOINTER</P>
The specified pointer parameter is invalid.</P>
    LINEERR_OPERATIONFAILED</P>
The specified operation failed for unknown reasons.</P>
<B>Call States</B>    <I>hdCall    </I>any state</P>
<B>Comments    </B>A separate <B>LINECALLINFO</B> structure exists for every (inbound or outbound) call. The structure contains primarily fixed information about the call. An application would typically be interested in checking this information when it receives its handle for a call via the <B>LINE_CALLSTATE</B> message, or each time it receives notification via a <B>LINE_CALLINFO</B> message that parts of the call information structure have changed. These messages supply the handle for the call as a parameter.</P>
    If the Service Provider models lines as "pools" of channel resources and does "inverse multiplexing" of a call over several address IDs it should consistently choose one of these address IDs as the primary identifier reported by this function in the <B>LINE_CALLINFO</B> data structure.</P>
<B>See Also    </B>Messages:  <B>LINE_CALLINFO</B></P>
<B>    </B>Data Types:  <B>LINECALLINFO</B></P>
<B>Fields:    </B>The following table indicates which fields of the <B>LINECALLINFO</B> data structure are filled in by the Service Provider and which fields are filled in by the TAPI DLL.  The Service Provider must preserve (i.e., must not overwrite) the values filled in by the TAPI DLL.</P>
</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="151pt" VALIGN="TOP"><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="112pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Field Name</B></P></TD><TD VALIGN="TOP"><B>TAPI DLL</B></P></TD><TD VALIGN="TOP"><B>Service Provider</B></P></TD></TR></TBODY></TABLE>
<BR></P><A NAME="PT28"></A>3.1.7.0  TSPI_lineGetCallStatus</P>
<B>Syntax    </B>LONG<B> TSPI_lineGetCallStatus</B>(<I>dwRequestID, hdCall, lpCallStatus</I>)</P>
This operation returns the current status of the specified call.</P>
<B>Parameters    </B>DRV_REQUESTID    <I>dwRequestID</I></P>
Specifies the identifier of the asynchronous request.  The Service Provider returns this value if the function completes asynchronously.</P>
    HDRVCALL    <I>hdCall</I></P>
Specifies the Service Provider's opaque handle to the call to be queried for its status.</P>
    LPLINECALLSTATUS    <I>lpCallStatus</I></P>
Specifies a far pointer to a variable sized data structure of type <B>LINECALLSTATUS</B>. Upon successful completion of the request, this structure is filled with call status information.</P>
<B>Return Value    </B>Returns zero if the function is successful, the (positive) <I>dwRequestID</I> value if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P>
    LINEERR_INVALCALLHANDLE</P>
The specified call handle is invalid.</P>
    LINEERR_INVALPOINTER</P>
The specified pointer parameter is invalid.</P>
    LINEERR_OPERATIONFAILED</P>
The specified operation failed for unknown reasons.</P>
<B>Call States</B>    <I>hdCall    </I>any state</P>
<B>Comments    TSPI_lineCallStatus</B> returns the dynamic status of a call, whereas <B>TSPI_lineGetCallInfo</B> returns primarily static information about a call. Call status information includes the current call state, detailed mode information related to the call while in this state (if any), as well as a list of the available TSPI functions the TAPI DLL can invoke on the call while the call is in this state.  An application would typically be interested in requesting this information when it receives notification about a call state change via the <B>LINE_CALLSTATE</B> message.</P>
<B>See Also    </B>Data Types:  <B>LINECALLSTATUS</B></P>
<B>    </B>Functions:  <B>TSPI_lineGetCallInfo</B></P>
<B>Fields:    </B>The following table indicates which fields of the <B>LINECALLSTATUS</B> data structure are filled in by the Service Provider and which fields are filled in by the TAPI DLL.  The Service Provider must preserve (i.e., must not overwrite) the values filled in by the TAPI DLL.</P>
</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="115pt" VALIGN="TOP"><COL WIDTH="79pt" VALIGN="TOP"><COL WIDTH="110pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Field Name</B></P></TD><TD VALIGN="TOP"><B>TAPI DLL</B></P></TD><TD VALIGN="TOP"><B>Service Provider</B></P></TD></TR></TBODY></TABLE>
<BR></P><A NAME="PT29"></A>3.1.7.0  TSPI_lineGetDevCaps</P>
<B>Syntax</B>    LONG<B> TSPI_lineGetDevCaps</B>(<I>dwRequestID, dwDeviceID, dwTSPIVersion, lpLineDevCaps</I>)</P>
This function queries a specified line device to determine its telephony capabilities. The returned information is valid for all addresses on the line device.</P>
<B>Parameters    </B>DRV_REQUESTID    <I>dwRequestID</I></P>
Specifies the identifier of the asynchronous request.  The Service Provider returns this value if the function completes asynchronously.</P>
    DWORD    <I>dwDeviceID</I></P>
Specifies the line device to be queried.</P>
    DWORD    <I>dwTSPIVersion</I></P>
Specifies the negotiated TSPI version number.  This value has already been negotiated for this device through the <B>TSPI_lineNegotiateTSPIVersion</B> function.</P>
    LPLINEDEVCAPS    <I>lpLineDevCaps</I></P>
Specifies a far pointer to a variable sized structure of type <B>LINEDEVCAPS</B>. Upon successful completion of the request, this structure is filled with line device capabilities information.</P>
<B>Return Value    </B>Returns zero if the function is successful, the (positive) <I>dwRequestID</I> value if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P>
    LINEERR_BADDEVICEID</P>
The specified line device ID is out of range.</P>
    LINEERR_NODRIVER</P>
The driver was not successfully installed.</P>
    LINEERR_INCOMPATIBLEVERSIONS</P>
A TSPI or Extension version number was requested that was outside the range of supported versions for this device.</P>
    LINEERR_INVALPOINTER</P>
The specified pointer parameter is invalid.</P>
    LINEERR_OPERATIONFAILED</P>
The specified operation failed for unknown reasons.</P>
<B>Call States</B>    Not applicable.</P>
<B>Comments</B>    Line device ID numbering for a Service Provider is sequential from the value set by the function <B>TSPI_lineSetDeviceIDBase</B>.</P>
    The <I>dwExtVersion</I> field of <I>lpLineDevCaps</I> has already been filled in to indicate the version number of the Extension information requested.  If it is zero, no Extension information is requested.  If it is non-zero it holds a value that has already been negotiated for this device with the function <B>TSPI_lineNegotiateExtVersion</B>.  The Service Provider should fill in Extension information according to the Extension version specified.</P>
    One of the fields in the <B>LINEDEVCAPS</B> structure returned by this function contains the number of addresses assigned to the specified line device. The actual address IDs used to reference individual addresses vary from zero to one less than the returned number. The capabilities of each address may be different. Use <B>TSPI_lineGetAddressCaps</B> for each available &lt;<I>dwDeviceID, dwAddressID</I>&gt; combination to determine the exact capabilities of each address.</P>
<B>Comparison</B>    This function differs from the corresponding TAPI function in the following ways: </P>
    No application identifier is passed to the Service Provider</P>
    The SPI version has already been negotiated between the TAPI DLL and the Service Provider.  The final result of the negotiation is passed as a parameter to this function. The Service Provider must preserve the value that is present in the <I>dwTAPIVersion</I> field of the LINEDEVCAPS structure.</P>
    The Extension version number has already been negotiated, with the <I>dwExtVersion</I>  field containing the negotiated value.  The Service Provider must preserve the value in this field and fill in the <I>DevSpecific</I> portion of the data structure according to that Extension version requested (regardless of any currently selected Extension version).  The special version number 0 indicates that no <I>DevSpecific</I> data is requested and the Service Provider may avoid filling it in.</P>
<B>See Also</B>    Data Types:  <B>LINEDEVCAPS</B></P>
<B>    </B>Functions:  <B>TSPI_lineSetDeviceIDBase, TSPI_lineNegotiateExtVersion, TSPI_lineGetAddressCaps</B></P>
<B>Fields:    </B>The following table indicates which fields of the <B>LINEDEVCAPS</B> data structure are filled in by the Service Provider and which fields are filled in by the TAPI DLL.  The Service Provider must preserve (i.e., must not overwrite) the values filled in by the TAPI DLL.</P>
</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="179pt" VALIGN="TOP"><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="106pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Field Name</B></P></TD><TD VALIGN="TOP"><B>TAPI DLL</B></P></TD><TD VALIGN="TOP"><B>Service Provider</B></P></TD></TR></TBODY></TABLE>
<BR></P><B>    </B>The following table indicates which fields of the <B>LINETERMCAPS</B> data structure(s) embedded in the varying part of the <B>LINEDEVCAPS</B> data structure are filled in by the Service Provider and which fields are filled in by the TAPI DLL.  The Service Provider must preserve (i.e., must not overwrite) the values filled in by the TAPI DLL.</P>
</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="95pt" VALIGN="TOP"><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="105pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Field Name</B></P></TD><TD VALIGN="TOP"><B>TAPI DLL</B></P></TD><TD VALIGN="TOP"><B>Service Provider</B></P></TD></TR></TBODY></TABLE>
<BR></P><A NAME="PT30"></A>3.1.7.0  TSPI_lineGetID</P>
<B>Syntax</B>    LONG<B> TSPI_lineGetID</B>(<I>dwRequestID, hdLine, dwAddressID, hdCall, dwSelect, lpDeviceID, lpszDeviceClass</I>)</P>
This function returns a device ID for the specified device class associated with the selected line, address or call.</P>
<B>Parameters    </B>DRV_REQUESTID    <I>dwRequestID</I></P>
Specifies the identifier of the asynchronous request.  The Service Provider returns this value if the function completes asynchronously.</P>
    HDRVLINE    <I>hdLine</I></P>
Specifies the Service Provider's opaque handle to the line to be queried.</P>
<B>    </B>DWORD    <I>dwAddressID</I></P>
Specifies an address on the given open line device.</P>
    HDRVCALL    <I>hdCall</I></P>
Specifies the Service Provider's opaque handle to the call to be queried.</P>
<B>    </B>DWORD    <I>dwSelect</I></P>
Specifies the whether the device ID requested is associated with the line, address or a single call, of type <B>LINECALLSELECT</B>. Values are:</P>
LINECALLSELECT_LINE</P>
Selects the specified line device. The <I>hdLine</I> parameter must be a valid line handle; <I>hdCall</I> and <I>dwAddressID</I> are unused.</P>
LINECALLSELECT_ADDRESS</P>
Selects the specified address on the line. Both <I>hdLine</I> and <I>dwAddressID</I> must be valid; <I>hdCall</I> is unused.</P>
LINECALLSELECT_CALL</P>
Selects the specified call. <I>hdCall</I> must be valid; <I>hdLine</I> and <I>dwAddressID</I> are both unused. </P>
    LPVARSTRING    <I>lpDeviceID</I></P>
Specifies a far pointer to the memory location of type <B>VARSTRING</B> where the device ID is returned. Upon successful completion of the request, this location is filled with the device ID. The format of the returned information depends on the method used by the device class (API) for naming devices. </P>
    LPCSTR    <B>const</B> <I>lpszDeviceClass</I></P>
Specifies a far pointer to a NULL-terminated ASCII string that specifies the device class of the device whose ID is requested. Valid device class strings are those used in the SYSTEM.INI section to identify device classes.</P>
<B>Return Value    </B>Returns zero if the function is successful, the (positive) <I>dwRequestID</I> value if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P>
    LINEERR_INVALLINEHANDLE</P>
The <I>hdLine</I> parameter is an invalid handle.</P>
    LINEERR_INVALADDRESSID</P>
The specified <I>dwAddressID</I> parameter is invalid.</P>
    LINEERR_INVALCALLHANDLE</P>
The <I>hdCall</I> parameter is an invalid handle.</P>
    LINEERR_INVALCALLSELECT</P>
The specified <I>dwCallSelect</I> parameter is invalid.</P>
    LINEERR_NODEVICE</P>
The line device has no associated device for the given device class.</P>
    LINEERR_INVALPOINTER</P>
One or more of the specified pointer parameters are invalid.</P>
    LINEERR_OPERATIONFAILED</P>
The specified operation failed for unknown reasons.</P>
<B>Call States</B>    Not applicable.</P>
<B>Comments</B>    This function can be used to retrieve a line device ID given a line handle. Although the TAPI DLL has sufficient information to determine the line device ID from a line handle, it may still call this operation in such a fashion on behalf of an application that has opened a line device using <B>LINE_MAPPER</B>.  The Service Provider should support the "line" device class to allow applications to determin the real line device ID of an opened line.</P>
    This function can also be used to obtain the device ID of a phone device or media device (e.g., mci waveform, mci midi, wave, fax, etc.) associated with a call, address or line. This ID can then be used with the appropriate API (e.g., phone, mci, midi, wave, etc.) to select the corresponding media device associated with the specified call.</P>
    Note that the notion of Windows device class is different from that of media mode. For example, the interactive voice or stored voice media modes may be accessed using either the mci waveaudio or the low level wave device classes. A media modes describes a format of information on a call, a device class defines a Windows API used to manage that stream. Often, a single media stream may be accessed using multiple device classes, or a single device class (e.g., the Windows COMM API) may provide access to multiple media modes. </P>
<B>See Also</B>    Data Types:  <B>VARSTRING</B></P>
<B>Fields:    </B>The following table indicates which fields of the <B>VARSTRING</B> data structure are filled in by the Service Provider and which fields are filled in by the TAPI DLL.  The Service Provider must preserve (i.e., must not overwrite) the values filled in by the TAPI DLL.</P>
</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="95pt" VALIGN="TOP"><COL WIDTH="77pt" VALIGN="TOP"><COL WIDTH="98pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Field Name</B></P></TD><TD VALIGN="TOP"><B>TAPI DLL</B></P></TD><TD VALIGN="TOP"><B>Service Provider</B></P></TD></TR></TBODY></TABLE>
<BR></P><A NAME="PT31"></A>3.1.7.0  TSPI_lineGetLineDevStatus</P>
<B>Syntax    </B>LONG<B> TSPI_lineGetLineDevStatus</B>(<I>dwRequestID, hdLine, lpLineDevStatus</I>)</P>
This operation enables the TAPI DLL to query the specified open line device for its current status.</P>
<B>Parameters    </B>DRV_REQUESTID    <I>dwRequestID</I></P>
Specifies the identifier of the asynchronous request.  The Service Provider returns this value if the function completes asynchronously.</P>
    HDRVLINE    <I>hdLine</I></P>
Specifies the Service Provider's opaque handle to the line to be queried.</P>
    LPLINEDEVSTATUS    <I>lpLineDevStatus</I></P>
Specifies a far pointer to a variable sized data structure of type <B>LINEDEVSTATUS</B>. Upon successful completion of the request, this structure is filled with the line's device status.</P>
<B>Return Value    </B>Returns zero if the function is successful, the (positive) <I>dwRequestID</I> value if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P>
    LINEERR_INVALLINEHANDLE</P>
The specified line device handle is invalid.</P>
    LINEERR_INVALPOINTER</P>
The specified pointer parameter is invalid.</P>
    LINEERR_OPERATIONFAILED</P>
The specified operation failed for unknown reasons.</P>
<B>Call States</B>    Not applicable.</P>
<B>Comments    </B>The TAPI DLL uses <B>TSPI_lineGetLineDevStatus</B> to query the line device for its current line status. This status information applies globally to all addresses on the line device. Use <B>TSPI_lineGetAddressStatus</B> to determine status information about a specific address on a line.</P>
<B>See Also    </B>Messages:  <B>LINE_LINEDEVSTATE</B></P>
<B>    </B>Data Types:  <B>LINEDEVSTATUS</B></P>
    Functions:  <B>TSPI_lineGetAddressStatus</B></P>
<B>Fields:    </B>The following table indicates which fields of the <B>LINEDEVSTATUS</B> data structure are filled in by the Service Provider and which fields are filled in by the TAPI DLL.  The Service Provider must preserve (i.e., must not overwrite) the values filled in by the TAPI DLL.</P>
</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="137pt" VALIGN="TOP"><COL WIDTH="79pt" VALIGN="TOP"><COL WIDTH="101pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Field Name</B></P></TD><TD VALIGN="TOP"><B>TAPI DLL</B></P></TD><TD VALIGN="TOP"><B>Service Provider</B></P></TD></TR></TBODY></TABLE>
<BR></P><A NAME="PT32"></A>3.1.7.0  TSPI_lineGetProcTable</P>
<B>Syntax    </B>BOOL<B> TSPI_lineGetProcTable</B>(<I>dwTSPIVersion, lpLineProcTable</I>)</P>
This function allows the TAPI DLL to retrieve a procedure table of pointers to all the line-related functions in the TSPI.</P>
<B>Parameters    </B>DWORD    <I>dwTSPIVersion</I></P>
Specifies the TSPI version that defines the list of entry points, parameter profiles, and syntax of functions in the procedure table.</P>
<B>    </B>LPTSPI_LINE_PROCS    <I>lpLineProcTable</I></P>
Specifies a far pointer to the procedure table that is to be filled in by the Service Provider with pointers to all the line-related functions.</P>
<B>Return Value    </B>Returns <B>TRUE</B> if successful, otherwise <B>FALSE</B></P>
<B>Call States    </B>Not applicable.</P>
<B>Comments    </B>This function is typically invoked early in the initialization sequence to retrieve the line-related entry points through which the Service Provider is accessed.  Entry points may be retrieved in this way for performance reasons; in some system environments this is much quicker than loading entry points by name.  The Service Provider must still export all of its entry points by name to support the early functions (such at <B>TSPI_lineGetProcTable</B> itself) that must be invoked before the procedure table has been retrieved and the system environments in which entry points are always loaded by name.</P>
    A Service Provider is allowed to limit its support to a subset of the functions defined in the TSPI specification.  However, it must fill in a valid procedure pointer for each of the functions in the procedure table.  This can be the address of a "stub" function that simply returns a "not supported" result code for unsupported functions.</P>
    The TAPI DLL negotiates a TSPI version using <B>TSPI_lineNegotiateTSPIVersion</B> before calling this function.  Since the device ID base has not been set this early in initialization, no device can be specified for the negotiation.  The TAPI DLL uses the special <I>dwDeviceID</I> value <B>INITIALIZE_NEGOTIATION</B> to signify that it is negotiating an "overall" interface version for the purpose of calling functions such as <B>TSPI_lineGetProcTable</B>.</P>
<B>Comparison    </B>There is no corresponding function at the TAPI level.  All entry points at the TAPI level are strictly accessed through standard library entry point export and linkage mechanisms.</P>
<B>See Also    </B>Functions:  <B>TSPI_lineNegotiateTSPIVersion</B></P>
<B>    </B>Constants:  <B>INITIALIZE_NEGOTIATION</B></P>
<A NAME="PT33"></A>3.1.7.0  TSPI_lineHold</P>
<B>Syntax    </B>LONG<B> TSPI_lineHold</B>(<I>dwRequestID, hdCall</I>)</P>
This function places the specified call on hold.</P>
<B>Parameters    </B>DRV_REQUESTID    <I>dwRequestID</I></P>
Specifies the identifier of the asynchronous request.  The Service Provider returns this value if the function completes asynchronously.</P>
    HDRVCALL    <I>hdCall</I></P>
Specifies the Service Provider's opaque handle to the call to be placed on hold.</P>
<B>Return Value    </B>Returns zero if the function is successful, the (positive) <I>dwRequestID</I> value if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P>
    LINEERR_INVALCALLHANDLE</P>
The specified call handle is invalid.</P>
    LINEERR_INVALCALLSTATE</P>
The specified call is not in a valid state for the requested operation.</P>
    LINEERR_OPERATIONUNAVAIL</P>
The specified operation is not available.</P>
    LINEERR_OPERATIONFAILED</P>
The specified operation failed for unspecified reason.</P>
<B>Call States</B>    <I>hdCall    </I>connected</P>
</P>
<B>Comments    </B>The call on hold is temporarily disconnected allowing the TAPI DLL to use the line device for making or answering other calls. <B>TSPI_lineHold</B> performs a so-called "hard hold" of the specified call, as opposed to a "consultation call". A call on hard hold typically cannot be transferred or included in a conference call, whereas a consultation call can. Consultation calls are initiated using <B>TSPI_lineSetupTransfer</B>, <B>TSPI_lineSetupConference</B>, or<B> TSPI_linePrepareAddToConference</B>.</P>
    After a call has been successfully placed on hold, the call state will typically transition to <I>onHold</I>. A held call is retrieved via <B>TSPI_lineUnhold</B>. While a call is on hold, the TAPI DLL may receive <B>LINE_CALLSTATE</B> messages about state changes of the held call. For example, if held party hangs up, the call state may transition to <I>disconnected</I>.  </P>
<B>See Also</B>    Functions:  <B>TSPI_lineUnhold</B></P>
<B>    </B>Messages:  <B>LINE_CALLSTATE</B></P>
<A NAME="PT34"></A>3.1.7.0  TSPI_lineMakeCall</P>
<B>Syntax    </B>LONG<B> TSPI_lineMakeCall</B>(<I>dwRequestID, hdLine, htCall, lphdCall, lpszDestAddress, dwCountryCode, lpCallParams</I>)</P>
This function places a call on the specified line to the specified destination address, exchanging opaque handles for the new call between the TAPI DLL and Service Provider. Optionally, call parameters can be specified if anything but default call setup parameters are requested.</P>
<B>Parameters    </B>DRV_REQUESTID    <I>dwRequestID</I></P>
Specifies the identifier of the asynchronous request.  The Service Provider returns this value if the function completes asynchronously.</P>
      HDRVLINE    <I>hdLine</I></P>
Specifies the Service Provider's opaque handle to the line on which the new call is to be originated.</P>
    HTAPICALL    <I>htCall</I></P>
Specifies the TAPI DLL's opaque handle to the new call.  The Service Provider must save this and use it in all subsequent calls to the <B>LINEEVENT</B> procedure reporting events on the call.</P>
<B>    </B>LPHDRVCALL    <I>lphdCall</I></P>
Specifies a far pointer to an opaque <B>HDRVCALL</B> representing the Service Provider's identifier for the call.  The Service Provider must fill this location with its opaque handle for the call before this procedure returns, whether it decides to execute the request sychronously or asynchronously.  This handle is invalid if the function results in an error (either synchronously or asynchronously).</P>
    LPCSTR   <B>const</B> <I>lpszDestAddress</I></P>
Specifies a far pointer to the destination address. This follows the standard dialable number format. This pointer may be specified as NULL for non-dialed addresses (i.e., a hot phone) or when all dialing will be performed using <B>TSPI_lineDial</B>. In the latter case, <B>TSPI_lineMakeCall</B> will allocate an available call appearance which would typically remain in the <I>dialtone</I> state until dialing begins. Service providers that have inverse multiplexing capabilities may allow an application to specify multiple addresses at once.</P>
<B>    </B>DWORD    <I>dwCountryCode</I></P>
Specifies the country code of the called party. If a value of zero is specified, then a default will be used by the implementation.</P>
<B>    </B>LPLINECALLPARAMS    <B>const</B> <I>lpCallParams</I></P>
Specifies a far pointer to a <B>LINECALLPARAMS</B> structure. This structure allows the TAPI DLL to specify how it wants the call to be set up. If NULL is specified, then a default 3.1kHz voice call is established, and an arbitrary origination address on the line is selected.</P>
This structure allows the TAPI DLL to select such elements as the call's bearer mode, data rate, expected media mode, origination address, blocking of caller ID information, dialing parameters, etc.</P>
<B>Return Value    </B>Returns zero if the function is successful, the (positive) <I>dwRequestID</I> value if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P>
    LINEERR_INVALLINEHANDLE</P>
The specified line device handle is invalid.</P>
    LINEERR_INVALADDRESSID</P>
The specified address ID is out of range.</P>
    LINEERR_INVALPOINTER</P>
One or more of the specified pointer parameters are invalid.</P>
    LINEERR_CALLUNAVAIL</P>
All call appearances on the specified address are currently in use.</P>
    LINEERR_INVALCALLPARAMS</P>
The specified call parameter structure is invalid.</P>
    LINEERR_ADDRESSBLOCKED</P>
The specified address is blocked from being dialed on the specified call.</P>
    LINEERR_BILLINGREJECTED</P>
The billing information specified as part of the destination address has been rejected.</P>
    LINEERR_RESOURCEUNAVAIL</P>
The specified operation cannot be completed because of resource overcommitment.</P>
    LINEERR_OPERATIONUNAVAIL</P>
The specified operation is not available.</P>
    LINEERR_OPERATIONFAILED</P>
The specified operation failed for unspecified reason.</P>
<B>Call States</B>    Not applicable</P>
<B>Comments    </B>After dialing has completed, several <B>LINE_CALLSTATE</B> messages will typically be sent to the TAPI DLL to notify it about the progress of the call. No generally valid sequence of call state transitions is specified as no single fixed sequence of transitions can be guaranteed in practice. A typical sequence may cause a call to transition from <I>dialtone</I>, <I>dialing</I>, <I>proceeding</I>, <I>ringback</I>, to <I>connected</I>. With non-dialed lines, the call may typically transition directly to <I>connected</I> state.</P>
    The TAPI DLL has the option to specify an originating address on the specified line device. A service provider that models all stations on a switch as addresses on a single line device allows the TAPI DLL to originate calls from any of these stations using <B>TSPI_lineMakeCall</B>.</P>
    The call parameters allow the TAPI DLL to make non voice calls or request special call setup options that are not available by default.</P>
<B>    </B>The TAPI DLL can partially dial using <B>TSPI_lineMakeCall</B> and continue dialing using <B>TSPI_lineDial</B>. To abandon a call attempt, use <B>TSPI_lineDrop</B>.</P>
    The  Service Provider initially does media monitoring on the new call for at least the set of media modes that were monitored for on the line.</P>
<B>Comparison    </B>This function differs from the TAPI in that it follows the TSPI model for beginning the lifetime of a call; the TAPI DLL and Service Provider exchange opaque handles representing the call with one another.  In addition, the Service  Provider is permitted to do callbacks regarding the new call before it returns from this procedure.</P>
<B>See Also    </B>Functions:  <B>TSPI_lineDial, TSPI_lineDrop</B></P>
<B>    </B>Messages:  <B>LINE_CALLSTATE</B></P>
    Data types:  <B>LINECALLPARAMS</B></P>
<A NAME="PT35"></A>3.1.7.0  TSPI_lineMonitorDigits</P>
<B>Syntax    </B>LONG <B>TSPI_lineMonitorDigits</B>(<I>dwRequestID, hdCall, dwDigitModes</I>)</P>
This function enables and disables the unbuffered detection of digits received on the call. Each time a digit of the specified digit mode(s) is detected a message is sent to the application indicating which digit has been detected.</P>
<B>Parameters    </B>DRV_REQUESTID    <I>dwRequestID</I></P>
Specifies the identifier of the asynchronous request.  The Service Provider returns this value if the function completes asynchronously.</P>
    HDRVCALL    <I>hdCall</I></P>
Specifies the Service Provider's opaque handle to the call on which digits are to be detected.</P>
    DWORD     <I>dwDigitModes</I></P>
Specifies the digit mode(s) that are to be monitored, of type <B>LINEDIGITMODE</B>. Values are:</P>
LINEDIGITMODE_PULSE</P>
Detect digits as audible clicks that are the result of rotary pulse sequences. Valid digits for pulse are '0' through '9'.</P>
LINEDIGITMODE_DTMF</P>
Detect digits as DTMF tones. Valid digits for DTMF are '0' through '9', 'A', 'B', 'C', 'D', '*', and '#'. </P>
LINEDIGITMODE_DTMFEND</P>
Detect and provide application notification of DTMF down edges. Valid digits for DTMF are '0' through '9', 'A', 'B', 'C', 'D', '*', and '#'.</P>
A <I>dwDigitModes</I> with a value of zero cancels digit monitoring.</P>
<B>Return Value    </B>Returns zero if the function is successful, the (positive) <I>dwRequestID</I> value if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P>
    LINEERR_INVALCALLHANDLE</P>
The specified call handle is invalid.</P>
    LINEERR_INVALDIGITS</P>
The specified digits are not valid.</P>
    LINEERR_INVALDIGITMODE</P>
The specified digit mode is invalid.</P>
    LINEERR_RESOURCEUNAVAIL</P>
The specified operation cannot be completed because of resource overcommitment.</P>
    LINEERR_OPERATIONUNAVAIL</P>
The operation is not available.</P>
    LINEERR_OPERATIONFAILED</P>
The operation failed for unspecified reasons.</P>
<B>Call States</B>    <I>hdCall    </I>Any state</P>
<B>Comments    </B>This function is considered successful if digit monitoring has been correctly initiated; not when digit monitoring has terminated. Digit monitoring will remain in effect until it is explicitly disabled by calling <B>TSPI_lineMonitorDigits</B> with <I>dwDigitModes</I> set to zero, or until the call transitions to <I>idle</I>.</P>
    Although this function can be invoked in any call state, digits will typically only be detected while the call is in the <I>connected</I> state.</P>
    Each time a digit is detected, a <B>LINE_MONITORDIGITS</B> message is sent to the TAPI DLL passing the detected digit as a parameter.</P>
    The TAPI DLL can use <B>TSPI_lineMonitorDigits</B> to enable or disable unbuffered digit detection. It can use <B>TSPI_lineGatherDigits</B> for buffered digit detection. After buffered digit gathering is complete, a <B>LINE_GATHERDIGITS </B>message is sent to the application. Both buffered and unbuffered digit detection can be enabled on the same call simultaneously.</P>
<B>See Also    </B>Functions:  <B>TSPI_lineGetDevCaps, TSPI_lineGatherDigits, TSPI_lineSetMediaControl</B></P>
<B>    </B>Messages: <B>LINE_MONITORDIGITS</B></P>
<B>    </B>Data Types:  <B>LINEDEVCAPS, LINEDIGITMODE</B></P>
<A NAME="PT36"></A>3.1.7.0  TSPI_lineMonitorMedia</P>
<B>Syntax    </B>LONG <B>TSPI_lineMonitorMedia</B>(<I>dwRequestID, hdCall, dwMediaModes</I>)</P>
This function enables and disables the detection of media modes on the specified call. When a media mode is detected, a message is sent to the TAPI DLL.</P>
<B>Parameters    </B>DRV_REQUESTID    <I>dwRequestID</I></P>
Specifies the identifier of the asynchronous request.  The Service Provider returns this value if the function completes asynchronously.</P>
    HDRVCALL    <I>hdCall</I></P>
Specifies the Service Provider's opaque handle to the call for which media monitoring is to be set.</P>
    DWORD    <I>dwMediaModes</I></P>
Specifies the media modes to be monitored, of type <B>LINEMEDIAMODE</B>. Values are:</P>
LINEMEDIAMODE_NONE</P>
This is used as a NULL value for the data type.</P>
        LINEMEDIAMODE_INTERACTIVEVOICE</P>
The TAPI DLL wants to handle calls of the interactive voice media type; i.e., it manages live voice calls.</P>
        LINEMEDIAMODE_AUTOMATEDVOICE</P>
The TAPI DLL wants to handle calls in which there is voice data, but the voice is handled by an automated application.  Most Service Providers will not be able to distinguish between automated and interactive voice.  In such a case any request for voice or detection of voice should be treated as interactive voice.</P>
        LINEMEDIAMODE_DIGITALDATA</P>
The TAPI DLL wants to handle calls of the digital data media type</P>
        LINEMEDIAMODE_G3FAX</P>
The TAPI DLL wants to handle calls of the group 3 fax media type.</P>
        LINEMEDIAMODE_G4FAX</P>
The TAPI DLL wants to handle calls of the group 4 fax media type.</P>
        LINEMEDIAMODE_DATAMODEM</P>
The TAPI DLL wants to handle calls with the data modem media mode.</P>
        LINEMEDIAMODE_TELETEX</P>
The TAPI DLL wants to handle calls with the teletex media mode.</P>
        LINEMEDIAMODE_VIDEOTEX</P>
The TAPI DLL wants to handle calls with the videotex media mode.</P>
        LINEMEDIAMODE_TELEX</P>
The TAPI DLL wants to handle calls with the telex media mode.</P>
        LINEMEDIAMODE_MIXED</P>
The TAPI DLL wants to handle calls with the ISDN mixed media mode.</P>
        LINEMEDIAMODE_TDD</P>
The TAPI DLL wants to handle calls with the TDD (Telephony Devices for the Deaf) media mode.</P>
        LINEMEDIAMODE_ADSI</P>
The TAPI DLL wants to handle calls with the ADSI (Analog Display Services Interface) media mode.</P>
A value of zero for the <I>dwMediaModes</I> parameter cancels all media mode detection.</P>
<B>Return Value    </B>Returns zero if the function is successful, the (positive) <I>dwRequestID</I> value if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P>
    LINEERR_INVALCALLHANDLE</P>
The specified call handle is invalid.</P>
    LINEERR_INVALMEDIAMODE</P>
The list of media types to be monitored contains invalid information.</P>
    LINEERR_RESOURCEUNAVAIL</P>
The specified operation cannot be completed because of resource overcommitment.</P>
    LINEERR_OPERATIONUNAVAIL</P>
The specified operation is not available.</P>
    LINEERR_OPERATIONFAILED</P>
The specified operation is failed for unspecified reasons.</P>
<B>Call States</B>    <I>hdCall    </I>any state</P>
<B>Comments    </B>This function is considered successful if media mode monitoring has been correctly initiated; not when media mode monitoring has terminated. Media monitoring for a given media mode will remain in effect until it is explicitly disabled by calling <B>TSPI_lineMonitorMedia</B> with a <I>dwMediaModes</I> parameter with the media mode set to zero, or until the call transitions to <I>idle</I>. <B>TSPI_lineMonitorMedia</B> is primarily an event reporting mechanism.  The media mode of a call, as indicated in <B>LINECALLINFO</B>, is not affected by the service provider's detection of the media mode. Only the TAPI DLL or a client application can change a call's media mode.</P>
    Default media monitoring performed by the service provider for a new call appearance corresponds to the union of all media modes specified by <B>TSPI_lineSetDefaultMediaDetection</B> or <B>TSPI_lineConditionalMediaDetection</B> for the line.  Shortly after a new call is established, the TAPI DLL typically calls this function to reduce the set of media modes detected and reported for this call to the union of all media modes desired by the call's client applications.</P>
    Although this function can be invoked in any call state, a call's media mode can typically only be detected while the call is certain call states. These states may be device specific. For example, in ISDN a message may indicate the media mode of the media stream before the media stream exists. Similarly, distinctive ringing or the called ID information about the call can be used to identify the media mode of a call. Otherwise, the call may have to be answered (call in the <I>connected</I> state) to allow a service provider to determine the call's media mode by filtering of the media stream. Since filtering of a call's media stream implies a computational overhead, the TAPI DLL typically uses this procedure to disable media monitoring when not required.</P>
<B>See Also    </B>Functions:  <B>TSPI_lineGetDevCaps, TSPI_lineSetMediaControl, TSPI_lineSetDefaultMediaDetection, TSPI_lineConditionalMediaDetection</B></P>
<B>    </B>Messages:  <B>LINE_MONITORMEDIA</B></P>
<B>    </B>Data Types:  <B>LINEDEVCAPS, LINEMEDIAMODE</B></P>
<A NAME="PT37"></A>3.1.7.0  TSPI_lineMonitorTones</P>
<B>Syntax    </B>LONG <B>TSPI_lineMonitorTones</B>(<I>dwRequestID, hdCall, dwToneListID, lpToneList, dwNumEntries</I>)</P>
This function enables and disables the detection of inband tones on the call. When a specified tone is detected, a message is sent to the TAPI DLL.   </P>
<B>Parameters    </B>DRV_REQUESTID    <I>dwRequestID</I></P>
Specifies the identifier of the asynchronous request.  The Service Provider returns this value if the function completes asynchronously.</P>
    HDRVCALL    <I>hdCall</I></P>
Specifies the Service Provider's opaque handle to the call for which tone detection is to be done.</P>
<B>    </B>DWORD    <I>dwToneListID</I></P>
Specifies the unique ID for this tone list.  Several tone lists can be outstanding at once.  The Service Provider replaces any old list having the same <I>dwToneListID</I> with the new tone list.  If <I>lpToneList</I> is NULL, the tone list with <I>dwToneListID</I> is simply dropped.  In any case, other tone lists with different <I>dwToneListID</I>s are kept unchanged.</P>
    LPLINEMONITORTONE     <B>const</B> <I>lpToneList</I></P>
Specifies a list of tones to be monitored, of type <B>LINEMONITORTONE</B>. Each tone in this list has an app defined tag field that is used to identify individual tones in the list for the purpose of reporting a tone detection.</P>
    DWORD    <I>dwNumEntries</I></P>
Specifies the number of entries in <I>lpToneList</I>.</P>
<B>Return Value    </B>Returns zero if the function is successful, the (positive) <I>dwRequestID</I> value if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P>
    LINEERR_INVALCALLHANDLE</P>
The specified call handle is invalid.</P>
    LINEERR_INVALTONE</P>
The specified tone structure does not describe a valid tone.</P>
    LINEERR_RESOURCEUNAVAIL</P>
The specified operation cannot be completed because of resource overcommitment.</P>
    LINEERR_OPERATIONUNAVAIL</P>
The specified operation is not available.</P>
    LINEERR_OPERATIONFAILED</P>
The specified operation failed for unspecified reasons.</P>
<B>Call States</B>    <I>hdCall    </I>any state</P>
<B>Comments    </B>This function is considered successful if tone monitoring has been correctly initiated; not when tone monitoring has terminated. Tone monitoring will remain in effect for a given tone list until that tone list is explicitly disabled by calling <B>TSPI_lineMonitorTones</B> with the same <I>dwToneListID</I> and another tone list (or  a NULL tone list), or until the call transitions to <I>idle</I>.</P>
    Although this function can be invoked in any call state, tones can typically only be detected while the call is in the <I>connected</I> state. Tone detection typically requires computational resources. Depending on the service provider and other activities that compete for such resources, the number of tones that can be detected may vary over time. Also, an equivalent amount of resources may be consumed for monitoring a single triple frequency tone versus three single frequency tones. If resources are overcommitted, the LINEERR_RESOURCEUNAVAIL error is returned.</P>
    The Service provider monitors for all tones in all tone lists concurrently.  When a tone is detected, each matching tone from each tone list is reported separately.  Each tone report includes both the tone list ID and the app-specific tag.  Depending on the Service Provider, it may not be possible to discriminate very close tones, so that multiple matches may be reported even for tones whose descriptions are not strictly identical.</P>
<B> </B>    Note that <B>TSPI_lineMonitorTones</B> is also used to detect silence. Silence is specified as a tone with all zero frequencies.</P>
<B>Comparison    </B>The corresponding function at the TAPI interface does not include a <I>dwToneListID</I> parameter.  The inclusion of this parameter at the TSPI interface allows the TAPI DLL to forward the union of all tone monitoring lists from all applications to the Service Provider, while still retaining the ability to filter and forward the tone detection events according to application.  This gives Service Provider designers the maximum flexibility to determine the degree to which they can discriminate very close tones, since the TAPI DLL makes no assumptions about what tone descriptions are considered identical.</P>
<B>See Also    </B>Functions:  <B>TSPI_lineGetDevCaps, TSPI_lineSetMediaControl</B></P>
<B>    </B>Messages: <B>LINE_MONITORTONE</B></P>
<B>    </B>Data Types:  <B>LINEDEVCAPS, LINEMONITORTONE</B></P>
<A NAME="PT38"></A>3.1.7.0  TSPI_lineNegotiateExtVersion</P>
<B>Syntax</B>    LONG<B> TSPI_lineNegotiateTSPIVersion</B>(<I>dwDeviceID, dwTSPIVersion, dwLowVersion, dwHighVersion</I>)</P>
This function returns the highest Extension version number the Service Provider is willing to operate under for this device given the range of possible Extension versions.</P>
<B>Parameters</B>    DWORD    <I>dwDeviceID</I></P>
Identifies the line device for which interface version negotiation is to be performed.  The value INITIALIZE_NEGOTIATION may not be used for this function.</P>
    DWORD    <I>dwTSPIVersion</I></P>
Specifies an interface version number that has already been negotiated for this device using <B>TSPI_lineNegotiateTSPIVersion</B>.  This function operates according to the interface specification at this version level.</P>
    DWORD    <I>dwLowVersion</I></P>
Specifies the lowest Extension version number under which the TAPI DLL or its client application is willing to operate.  The most-significant WORD is the major version number and the least-significant WORD is the minor version number.</P>
    DWORD    <I>dwHighVersion</I></P>
Specifies the highest Extension version number under which the TAPI DLL or its client application is willing to operate.  The most-significant WORD is the major version number and the least-significant WORD is the minor version number.</P>
<B>Return Value    </B>The Service Provider returns the highest Extension version number, within the range requested by the caller, under which the Service Provider is willing to operate.  If the requested range does not overlap the range supported by the Service Provider, the function returns zero.</P>
<B>Call States</B>    Not applicable.</P>
<B>Comments</B>    This function may be called before or after the device has been opened by the TAPI DLL.  If the device is currently open and has an Extension version selected, the function should return that version number if it is within the requested range.  If the selected version number is outside the requested range, the function returns 0.</P>
<B>Comparison</B>    There is no directly corresponding function at the TAPI level, at which both interface version negotiation and Extension version negotiation are done as overloaded uses of <B>lineGetDevCaps</B>.</P>
<B>See Also</B>    Functions:  <B>TSPI_lineGetProcTable, TSPI_lineNegotiateExtVersion</B></P>
<B>    </B>Constants:  <B>INITIALIZE_NEGOTIATION</B></P>
<A NAME="PT39"></A>3.1.7.0  TSPI_lineNegotiateTSPIVersion</P>
<B>Syntax</B>    LONG<B> TSPI_lineNegotiateTSPIVersion</B>(<I>dwDeviceID, dwLowVersion, dwHighVersion</I>)</P>
This function returns the highest SPI version the Service Provider is willing to operate under for this device given the range of possible SPI versions.</P>
<B>Parameters</B>    DWORD    <I>dwDeviceID</I></P>
Identifies the line device for which interface version negotiation is to be performed.  In addition to device IDs within the range the Service Provider supports, this may be the value:</P>
INITIALIZE_NEGOTIATION</P>
This value is used to signify that an overall interface version is to be negotiated.  Such an interface version is required for functions that can be called early in the initialization sequence, i.e., before the device ID range has been set.</P>
    DWORD    <I>dwLowVersion</I></P>
Specifies the lowest TSPI version number under which the TAPI DLL is willing to operate.  The most-significant WORD is the major version number and the least-significant WORD is the minor version number.</P>
    DWORD    <I>dwHighVersion</I></P>
Specifies the highest TSPI version number under which the TAPI DLL is willing to operate.  The most-significant WORD is the major version number and the least-significant WORD is the minor version number.</P>
<B>Return Value    </B>The Service Provider returns the highest interface version number, within the range requested by the caller, under which the Service Provider is willing to operate.  If the requested range does not overlap the range supported by the Service Provider, it returns zero.</P>
<B>Call States</B>    Not applicable.</P>
<B>Comments</B>    The TAPI DLL typically calls this function early in the initialization sequence for each line device.  In addition, it calls this with the value <B>INITIALIZE_NEGOTIATION</B> for <I>dwDeviceID</I> to negotiate an interface version for calling early initialization functions such as <B>TSPI_lineGetProcTable</B>.</P>
    Negotiation of an Extension version is done through the separate procedure <B>TSPI_lineNegotiateExtVersion</B>.</P>
<B>Comparison</B>    There is no directly corresponding function at the TAPI level, at which both interface version negotiation and Extension version negotiation are done as overloaded uses of <B>lineGetDevCaps</B>.</P>
<B>See Also</B>    Functions:  <B>TSPI_lineGetProcTable, TSPI_lineNegotiateExtVersion</B></P>
<B>    </B>Constants:  <B>INITIALIZE_NEGOTIATION</B></P>
<A NAME="PT40"></A>3.1.7.0  TSPI_lineOpen</P>
<B>Syntax</B>    BOOL<B> TSPI_lineOpen</B>(<I>dwDeviceID, htLine, lphdLine, dwTSPIVersion, lineEventProc</I>)</P>
This function opens the line device whose device ID is given, returning the Service Provider's opaque handle for the device and retaining the TAPI DLL's opaque handle for the device for use in subsequent calls to the <B>LINEEVENT</B> procedure.</P>
<B>Parameters</B>    DWORD    <I>dwDeviceID</I></P>
Identifies the line device to be opened.  The value <B>LINE_MAPPER</B> for a  device ID is not permitted.</P>
    HTAPILINE    <I>htLine</I></P>
Specifies the TAPI DLL's opaque handle for the line device to be used in subsequent calls to the <B>LINEEVENT</B> callback procedure to identify the device.</P>
    LPHDRVLINE    <I>lphdLine</I></P>
A far pointer to a <B>HDRVLINE</B> where the Service Provider fills in its opaque handle for the line device to be used by the TAPI DLL in subsequent calls to identify the device.</P>
    DWORD    <I>dwTSPIVersion</I></P>
The TSPI version negotiated through <B>TSPI_lineNegotiateTSPIVersion</B> under which the Service Provider is willing to operate.</P>
    LINEEVENT    <I>lineEventProc</I></P>
A far pointer to the <B>LINEEVENT</B> callback procedure supplied by the TAPI DLL that the Service Provider will call to report subsequent events on the line.</P>
<B>Return Value    </B>Returns <B>TRUE</B> if the procedure is successful, otherwise <B>FALSE</B></P>
<B>Call States</B>    Not applicable.</P>
<B>Comments</B>    Opening a line entitles the TAPI DLL to make further requests on the line.  The line becomes "active" in the sense that the TAPI DLL can initiate outbound calls and the Service Provider can report inbound calls.  The Service Provider reserves whatever non-sharable resources are required to manage the line.  For example, opening a line accessed through a comm port and modem should result in opening the comm port, making it no longer available for use by other applications.</P>
    If the function is successful, both the TAPI DLL and the Service Provider become committed to operating under the specified interface version number for this open device.  Subsquent operations and events identified using the exchanged opaque line handles conform to that interface version.  This commitment and the validity of the handles remain in effect until the TAPI DLL closes the line using the <B>TSPI_lineClose</B> operation or the Service Provider reports the <B>LINE_CLOSE</B> event.  If the function is not successful, no such commitment is made and the handles are not valid.</P>
<B>Comparison</B>    This procedure does not correspond directly to any procedure at the TAPI level, at which the functions of enabling device-specific extensions, selecting line characteristics, and setting media mode detection are included in the functionality defined by <B>lineOpen</B>.  At the TSPI level, these additional capabilities are separated out into <B>TSPI_lineNegotiateExtVersion, TSPI_lineSetDefaultMediaDetection</B> and <B>TSPI_lineConditionalMediaDetection</B>.  This procedure simply starts the "life cycle" of subsequent operations.</P>
    In addition, the TAPI procedure allows for asynchronous execution while this one does not.</P>
<B>See Also</B>    Functions:  <B>TSPI_lineClose, TSPI_lineNegotiateTSPIVersion, LINEEVENT</B></P>
<B>    </B>Messages:  <B>LINE_CLOSE</B></P>
<A NAME="PT41"></A>3.1.7.0  TSPI_linePark</P>
<B>Syntax    </B>LONG<B> TSPI_linePark</B>(<I>dwRequestID, hdCall, dwParkMode, lpszDirAddress, lpNonDirAddress</I>)</P>
This function parks the specified call according to the specified park mode.</P>
<B>Parameters    </B>DRV_REQUESTID    <I>dwRequestID</I></P>
Specifies the identifier of the asynchronous request.  The Service Provider returns this value if the function completes asynchronously.</P>
    HDRVCALL    <I>hdCall</I></P>
Specifies the Service Provider's opaque handle to the call to be parked.</P>
<B>    </B>DWORD    <I>dwParkMode</I></P>
Specifies the park mode with which the call is to be parked, of type <B>LINEPARKMODE</B>. Values are:</P>
LINEPARKMODE_DIRECTED</P>
The TAPI DLL specifies the address at which address the call is to be parked in <I>lpszDirAddress</I>.</P>
LINEPARKMODE_NONDIRECTED</P>
This operation reports to the TAPI DLL where the call has been parked in <I>lpNonDirAddress</I>.</P>
<B>    </B>LPCSTR   <B>const</B><I> lpszDirAddress</I></P>
Specifies a far pointer to NULL-terminated string that indicates the address where the call is to be parked when using directed park. The address in dialable number format. This parameter is ignored for non directed park.</P>
<B>    </B>LPVARSTRING   <I>lpNonDirAddress</I></P>
Specifies a far pointer to structure of type <B>VARSTRING</B>. For non directed park, the address where the call is parked is returned in this structure. This parameter is ignored for directed park.</P>
<B>Return Value    </B>Returns zero if the function is successful, the (positive) <I>dwRequestID</I> value if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P>
    LINEERR_INVALCALLHANDLE</P>
The specified device handle is invalid.</P>
    LINEERR_INVALPARKMODE</P>
The specified park mode is invalid.</P>
    LINEERR_INVALPOINTER</P>
One or more of the specified pointer parameters are invalid.</P>
    LINEERR_INVALCALLSTATE</P>
The call is not in a valid state for the requested operation.</P>
    LINEERR_INVALADDRESS</P>
The specified address is invalid.</P>
    LINEERR_OPERATIONUNAVAIL</P>
The specified operation is not available.</P>
    LINEERR_OPERATIONFAILED</P>
The specified operation failed for unspecified reasons.</P>
<B>Call States</B>    <I>hdCall    </I>connected</P>
</P>
<B>Comments    </B>Under directed park, the TAPI DLL determines the address at which it wants to park the call. Under non directed park, the switch determines the address and provides this to the TAPI DLL. In either case, a parked call can be unparked by specifying this address.</P>
<B>    </B>The parked call typically enters the <I>idle</I> call state after it has been successfully parked.</P>
    Some switches may remind the user after a call has been parked for some long amount of time. The TAPI DLL will see an <I>offering</I> call with a call reason set to <I>reminder</I>.</P>
<B>See Also</B>    Functions:  <B>TSPI_lineUnpark</B></P>
<B>    </B>Data Types:  <B>LINEPARKMODE, VARSTRING</B></P>
<B>Fields:    </B>The following table indicates which fields of the <B>VARSTRING</B> data structure are filled in by the Service Provider and which fields are filled in by the TAPI DLL.  The Service Provider must preserve (i.e., must not overwrite) the values filled in by the TAPI DLL.</P>
</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="95pt" VALIGN="TOP"><COL WIDTH="77pt" VALIGN="TOP"><COL WIDTH="98pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Field Name</B></P></TD><TD VALIGN="TOP"><B>TAPI DLL</B></P></TD><TD VALIGN="TOP"><B>Service Provider</B></P></TD></TR></TBODY></TABLE>
<BR></P><A NAME="PT42"></A>3.1.7.0  TSPI_linePickup</P>
<B>Syntax    </B>LONG<B> TSPI_linePickup</B>(<I>dwRequestID, hdLine, dwAddressID, htCall, lphdCall, lpszDestAddress, lpszGroupID</I>)</P>
This function picks up a call alerting at the specified destination address and returns a call handle for the picked up call. If invoked with NULL for the <I>lpszDestAddress</I> parameter, then a group pickup is performed. If required by the device capabilities, <I>lpszGroupID</I> specifies the group ID to which the alerting station belongs.</P>
<B>Parameters    </B>DRV_REQUESTID    <I>dwRequestID</I></P>
Specifies the identifier of the asynchronous request.  The Service Provider returns this value if the function completes asynchronously.</P>
    HDRVLINE    <I>hdLine</I></P>
Specifies the Service Provider's opaque handle to the line on which a call is to be picked up.</P>
<B>    </B>DWORD    <I>dwAddressID</I></P>
Specifies the address on <I>hdLine</I> at which the pickup is to be originated.</P>
    HTAPICALL    <I>htCall</I></P>
Specifies the TAPI DLL's opaque handle to the new call.  The Service Provider must save this and use it in all subsequent calls to the <B>LINEEVENT</B> procedure reporting events on the call.</P>
<B>    </B>LPHDRVCALL    <I>lphdCall</I></P>
Specifies a far pointer to an opaque <B>HDRVCALL</B> representing the Service Provider's identifier for the call.  The Service Provider must fill this location with its opaque handle for the call before this procedure returns, whether it decides to execute the request sychronously or asynchronously.  This handle is invalid if the function results in an error (either synchronously or asynchronously).</P>
<B>    </B>LPCSTR    <B>const</B> <I>lpszDestAddress</I></P>
Specifies a far pointer to a NULL terminated character buffer that contains the address whose call is to be picked up. The address is standard dialable address format.</P>
<B>    </B>LPCSTR    <B>const</B> <I>lpszGroupID</I></P>
Specifies a far pointer to a NULL terminated character buffer containing the group ID to which the alerting station belongs. This parameter is required on some switches to pick up calls outside of the current pickup group.</P>
<B>Return Value    </B>Returns zero if the function is successful, the (positive) <I>dwRequestID</I> value if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P>
    LINEERR_INVALLINEHANDLE</P>
The specified line handle is invalid.</P>
    LINEERR_INVALADDRESSID</P>
The specified address ID is invalid.</P>
    LINEERR_INVALPOINTER</P>
One or more of the specified pointer parameters are invalid.</P>
    LINEERR_INVALADDRESS</P>
The specified address is not a valid number.</P>
    LINEERR_INVALGROUPID</P>
        The specified group ID is invalid.</P>
    LINEERR_OPERATIONUNAVAIL</P>
The specified operation is not available.</P>
    LINEERR_OPERATIONFAILED</P>
The specified operation failed for unspecified reasons.</P>
<B>Call States</B>    not applicable</P>
<B>Comments    </B>When a call has been picked up successfully the TAPI DLL is notified via the <B>LINE_CALLSTATE</B> message about call state changes. The <B>LINECALLINFO</B> structure supplies information about the call that was picked up. It will list the reason for the call as <I>pickup</I>. This structure is available via <B>TSPI_lineGetCallInfo</B>.</P>
<B>Comparison    </B>This function differs from the TAPI in that it follows the TSPI model for beginning the lifetime of a call; the TAPI DLL and Service Provider exchange opaque handles representing the call with one another.  In addition, the Service  Provider is permitted to do callbacks regarding the new call before it returns from this procedure.</P>
<B>See Also    </B>Functions:  <B>TSPI_lineGetCallInfo, TSPI_lineGetCallStatus</B></P>
<B>    </B>Messages:  <B>LINE_CALLSTATE</B></P>
    Structures:  <B>LINECALLINFO, LINECALLSTATUS</B></P>
<A NAME="PT43"></A>3.1.7.0  TSPI_linePrepareAddToConference</P>
<B>Syntax    </B>LONG<B> TSPI_linePrepareAddToConference</B>(<I>dwRequestID, hConfCall, htAddCall, lphdAddCall, lpCallParams</I>)</P>
This function prepares an existing conference call for the addition of another party.  It creates a new, temporary consultation call.  The new consulatation call can be subsequently added to the conference call.</P>
<B>Parameters    </B>DRV_REQUESTID    <I>dwRequestID</I></P>
Specifies the identifier of the asynchronous request.  The Service Provider returns this value if the function completes asynchronously.</P>
    HDRVCALL    <I>hdConfCall</I></P>
Specifies the Service Provider's opaque handle to a conference call.</P>
    HTAPICALL    <I>htAddCall</I></P>
Specifies the TAPI DLL's opaque handle to the new, temporary consultation call.  The Service Provider must save this and use it in all subsequent calls to the <B>LINEEVENT</B> procedure reporting events on the new call.</P>
<B>    </B>LPHDRVCALL    <I>lphdAddCall</I></P>
Specifies a far pointer to an opaque <B>HDRVCALL</B> representing the Service Provider's identifier for the new, temporary consultation call.  The Service Provider must fill this location with its opaque handle for the new call before this procedure returns, whether it decides to execute the request sychronously or asynchronously.  This handle is invalid if the function results in an error (either synchronously or asynchronously).</P>
<B>    </B>LPLINECALLPARAMS    <B>const</B> <I>lpCallParams</I></P>
Specifies a far pointer to call parameters to be used when establishing the consultation call. This parameter may be set to NULL if no special call setup parameters are desired.</P>
<B>Return Value    </B>Returns zero if the function is successful, the (positive) <I>dwRequestID</I> value if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P>
    LINEERR_INVALCONFCALLHANDLE</P>
The specified call handle for the conference call is invalid.</P>
    LINEERR_INVALPOINTER</P>
One or more of the specified pointer parameters are invalid.</P>
    LINEERR_INVALCALLSTATE</P>
The conference call is not in a valid state for the requested operation.</P>
    LINEERR_CALLUNAVAIL</P>
All call appearances on the specified address are currently allocated.</P>
    LINEERR_CONFERENCEFULL</P>
The maximum number of parties for a conference has been reached.</P>
    LINEERR_INVALCALLPARAMS</P>
The specified call parameters are invalid.</P>
    LINEERR_OPERATIONUNAVAIL</P>
The specified operation is not available.</P>
    LINEERR_OPERATIONFAILED</P>
The specified operation failed for unspecified reason.</P>
<B>Call States</B>    <I>hdConfCall</I>    connected</P>
    <I>hdAddCall</I>    Not applicable</P>
<B>Comments    </B>A conference call handle can be obtained via <B>TSPI_lineSetupConference</B> or via <B>TSPI_lineCompleteTransfer</B> that is resolved as a three-way conference call. The function <B>TSPI_linePrepareAddToConference</B> typically places the existing conference call in the <I>onHoldPendingConference</I> state and creates a consultation call that can be added later to the existing conference call via <B>TSPI_lineAddToConference</B>. </P>
    The consultation call can be canceled using <B>TSPI_lineDrop</B>. It may also be possible for the TAPI DLL to swap between the consultation call and the held conference call via <B>TSPI_lineSwapHold</B>.</P>
    The  Service  Provider  initially  does  media  monitoring  on  the  new  call  for  at  least  the  set  of  media  modes  that  were  monitored  for  on  the  line.</P>
<B>Comparison    </B>This function differs from the TAPI in that it follows the TSPI model for beginning the lifetime of a call; the TAPI DLL and Service Provider exchange opaque handles representing the call with one another.  In addition, the Service  Provider is permitted to do callbacks regarding the new call before it returns from this procedure.</P>
<B>See Also    </B>Functions:  <B>TSPI_lineDial, TSPI_lineSwapHold, TSPI_lineSetupConference, TSPI_lineAddToConference, TSPI_lineRemoveFromConference</B></P>
    Messages:  <B>LINE_CALLSTATE</B></P>
<A NAME="PT44"></A>3.1.7.0  TSPI_lineRedirect</P>
<B>Syntax    </B>LONG<B> TSPI_lineRedirect</B>(<I>dwRequestID, hdCall,  lpszDestAddress, dwCountryCode</I>)</P>
This function redirects the specified offering call to the specified destination address.</P>
<B>Parameters    </B>DRV_REQUESTID    <I>dwRequestID</I></P>
Specifies the identifier of the asynchronous request.  The Service Provider returns this value if the function completes asynchronously.</P>
    HDRVCALL    <I>hdCall</I></P>
Specifies the Service Provider's opaque handle to the call to be redirected.</P>
<B>    </B>LPCSTR   <B>const</B> <I>lpszDestAddress</I></P>
Specifies a far pointer to the destination address. This follows the standard dialable number format.</P>
<B>    </B>DWORD    <I>dwCountryCode</I></P>
Specifies the country code of the party the call is redirected to. If a value of zero is specified, then a default will be used by the implementation. </P>
<B>Return Value    </B>Returns zero if the function is successful, the (positive) <I>dwRequestID</I> value if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P>
    LINEERR_INVALCALLHANDLE</P>
The specified call handle is invalid.</P>
    LINEERR_INVALCALLSTATE</P>
The call is not in a valid state for the requested operation.</P>
    LINEERR_INVALPOINTER</P>
The specified pointer parameter is invalid.</P>
    LINEERR_INVALADDRESS</P>
The specified character buffer for the destination address contains invalid characters or digits (i.e., syntax error); the call has not been redirected.</P>
    LINEERR_OPERATIONUNAVAIL</P>
The specified operation is not available.</P>
    LINEERR_OPERATIONFAILED</P>
The specified operation failed for unspecified reasons.</P>
<B>Call States</B>    <I>hdCall    </I>offering</P>
<B>Comments    </B>Call redirection allows the TAPI DLL to deflect an offering call to another address without first answering the call. Call redirect differs from call forwarding in that call forwarding is performed by the switch without the involvement of the TAPI DLL; redirection can be done on a call by call basis by the TAPI DLL, for example driven by caller ID information. It differs from call transfer in that transferring a call requires the call first be answered. </P>
    After a call has been successfully redirected, the call will typically transition to <I>idle</I>.</P>
    Besides redirecting an incoming call, the TAPI DLL may have the option to accept the call using <B>TSPI_lineAccept</B>, reject the call via <B>TSPI_lineDrop</B>, or answer the call using <B>TSPI_lineAnswer</B>. The availability of these operations is dependent on device capabilities. </P>
<B>See Also</B>    Functions: <B>TSPI_lineAccept</B>, <B>TSPI_lineDrop, TSPI_lineGetDevCaps</B></P>
<B>    </B>Messages: <B>LINE_CALLSTATE</B></P>
<A NAME="PT45"></A>3.1.7.0  TSPI_lineRemoveFromConference</P>
<B>Syntax    </B>LONG<B> TSPI_lineRemoveFromConference</B>(<I>dwRequestID, hdCall</I>)</P>
This function removes the specified call from the conference call to which it currently belongs. The remaining calls in the conference call are unaffected.</P>
<B>Parameters    </B>DRV_REQUESTID    <I>dwRequestID</I></P>
Specifies the identifier of the asynchronous request.  The Service Provider returns this value if the function completes asynchronously.</P>
    HDRVCALL    <I>hdCall</I></P>
Specifies the Service Provider's opaque handle to the call to be removed from the conference.</P>
<B>Return Value    </B>Returns zero if the function is successful, the (positive) <I>dwRequestID</I> value if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P>
    LINEERR_INVALCALLHANDLE</P>
The specified call handle is invalid.</P>
    LINEERR_INVALCALLSTATE</P>
The call is not in a valid state for the requested operation.</P>
    LINEERR_OPERATIONUNAVAIL</P>
The specified operation is not available.</P>
    LINEERR_OPERATIONFAILED</P>
The specified operation failed for unspecified reasons.</P>
<B>Call States</B>    <I>hdCall    </I>conferenced</P>
<B>Comments    </B>This operation removes a party that currently belongs to a conference call. After the call has been successfully removed, it may be possible to further manipulate it using its handle. The availability of this operation and its result are likely to be limited in many implementations. For example, in many implementations, only the most recently added party may be removed from a conference, and the removed call may be automatically dropped (becomes <I>idle</I>). Consult the line's device capabilities to determine the available effects of removing a call from a conference.</P>
<B>See Also    </B>Functions:  <B>TSPI_lineSetupConference, TSPI_lineAddToConference, TSPI_lineGetDevCaps</B></P>
    Messages:  <B>LINE_CALLSTATE</B></P>
    Data Types:  <B>LINEDEVCAPS </B></P>
<A NAME="PT46"></A>3.1.7.0  TSPI_lineSecureCall</P>
<B>Syntax    </B>LONG<B> TSPI_lineSecureCall</B>(<I>dwRequestID, hdCall</I>)</P>
This function secures the call from any interruptions or interference that may affect the call's media stream.</P>
<B>Parameters    </B>DRV_REQUESTID    <I>dwRequestID</I></P>
Specifies the identifier of the asynchronous request.  The Service Provider returns this value if the function completes asynchronously.</P>
    HDRVCALL    <I>hdCall</I></P>
Specifies the Service Provider's opaque handle to the call to be secured.</P>
<B>Return Value    </B>Returns zero if the function is successful, the (positive) <I>dwRequestID</I> value if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P>
    LINEERR_INVALCALLHANDLE</P>
The specified call handle is invalid.</P>
    LINEERR_OPERATIONUNAVAIL</P>
The specified operation is not available.</P>
    LINEERR_OPERATIONFAILED</P>
The specified operation failed for unspecified reasons.</P>
<B>Call States</B>    <I>hdCall    </I>any state</P>
</P>
<B>Comments    </B>A call can be secured to avoid interference. For example, in an analog environment, call waiting tones may destroy a fax or modem session on the original call. <B>TSPI_lineSecureCall</B> allows an existing call to be secured, <B>TSPI_lineMakeCall</B> provides the option to secure the call from the time of call setup. The securing of a call remains in effect for the duration of the call. </P>
<B>See Also    </B>Functions:  <B>TSPI_lineMakeCall</B></P>
<A NAME="PT47"></A>3.1.7.0  TSPI_lineSelectExtVersion</P>
<B>Syntax    </B>BOOL<B> TSPI_lineSelectExtVersion</B>(<I>hdLine, dwExtVersion</I>)</P>
This function selects the indicated Extension version for the indicated line device.  Subsequent requests operate according to that Extension version.</P>
<B>Parameters    </B>HDRVLINE    <I>hdLine</I></P>
Specifies the Service Provider's opaque handle to the line for which an Extension version is to be selected.</P>
    DWORD    <I>dwExtVersion</I></P>
Specifies the Extension version to be selected.  This version number has been negotiated using <B>TSPI_lineNegotiateExtVersion</B>.  The most-significant WORD is the major version number and the least-significant WORD is the minor version number.  Calling this function with a <I>dwExtVersion</I> of zero cancels the current selection.</P>
<B>Return Value    </B>If the function is successful, it returns <B>TRUE</B>, otherwise it returns <B>FALSE</B>.</P>
<B>Call States</B>    not applicable</P>
<B>Comments    </B>The Service selects the indicated Extension version.  Although the indicated version number may have been successfully negotiated, a different Extension version may have been selected in the interim, in which case this function fails (returning <B>FALSE</B>).</P>
    Subsequent operations on the line after an Extension version has been selected behave according to that Extension version. Subsequent attempts to negotiate the Extension version report strictly the selected version or 0 (if the requested range does not include the selected version). Calling this procedure with the special Extension version 0 cancels the current selection. The device becomes once again capable of supporting its full range of Extension version numbers.</P>
<B>Comparison</B>    This function has no direct correspondence at the TAPI level, where selecting an Extension version is bundled with the other functions of <B>lineOpen</B>. <B>TSPI_lineSelectExtVersion</B> is typically called in two situations: (1) An application requested to open a line, the resulting change of Media  Mode monitoring was successful, the application requested that a  particular Extension version be used, and no Extension version was currently selected. (2) The last application using a particular Extension version closed the line, and the Extension version selection can be cancelled. </P>
<B>See Also</B>    Functions: <B>TSPI_lineNegotiateExtVersion</B></P>
<A NAME="PT48"></A>3.1.7.0  TSPI_lineSendUserUserInfo</P>
<B>Syntax    </B>LONG<B> TSPI_lineSendUserUserInfo</B>(<I>dwRequestID, hdCall, lpsUserUserInfo, dwSize</I>)</P>
This function send user-to-user information to the remote party on the specified call.</P>
<B>Parameters    </B>DRV_REQUESTID    <I>dwRequestID</I></P>
Specifies the identifier of the asynchronous request.  The Service Provider returns this value if the function completes asynchronously.</P>
    HDRVCALL    <I>hdCall</I></P>
Specifies the Service Provider's opaque handle to the call on which to send user-to-user information.</P>
    LPCSTR    <B>const </B><I>lpsUserUserInfo</I></P>
Specifies a far pointer to a string containing user-to-user information to be sent to the remote party. User-to-user information is only sent if supported by the underlying network (see <B>LINEDEVCAPS</B>).</P>
    DWORD    <I>dwSize</I></P>
Specifies the size in bytes of the user-to-user information in <I>lpsUserUserInfo</I>.</P>
<B>Return Value    </B>Returns zero if the function is successful, the (positive) <I>dwRequestID</I> value if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P>
    LINEERR_INVALCALLHANDLE</P>
The specified call handle is invalid.</P>
    LINEERR_INVALCALLSTATE</P>
The call is not in a valid state for the requested operation.</P>
    LINEERR_INVALPOINTER</P>
The specified pointer parameter is invalid.</P>
    LINEERR_OPERATIONUNAVAIL</P>
The specified operation is not available.</P>
    LINEERR_OPERATIONFAILED</P>
The specified operation failed for unspecified reasons.</P>
<B>Call States</B>    <I>hdCall    </I>connected</P>
</P>
<B>Comments    </B>This function can be used to send user-to-user information at any time during a connected call. If the size of the specified information to be sent is larger than what may fit into a single network message (e.g., ISDN), then the service provider is responsible for breaking the information up into a sequence of chained network messages (using "more data").</P>
    User-to-user information can also be sent as part of call accept, call reject, call redirect, and when making calls. User-to-user information can also be received. The received information is available via the call's call information record. Whenever user-to-user information arrives after call offering or prior to call disconnect, a <B>LINE_CALLINFO</B> message with a <I>UserUserInfo</I> parameter will notify the TAPI DLL that user-to-user information in the call information record has changed. If multiple network messages are chained, then the information is assembled by the service provider and a single message is sent to the TAPI DLL.</P>
<B>See Also</B>    Functions: <B>TSPI_lineMakeCall, TSPI_lineAccept, TSPI_lineRedirect, TSPI_lineDrop, TSPI_lineGetCallInfo</B></P>
    Messages: <B>LINE_CALLINFO</B></P>
    Data Types: <B>LINECALLINFO</B></P>
<A NAME="PT49"></A>3.1.7.0  TSPI_lineSetAppSpecific</P>
<B>Syntax</B>    LONG<B> TSPI_lineSetAppSpecific</B>(<I>dwRequestID, hdCall, dwAppSpecific</I>)</P>
This operation enables the TAPI DLL to set the application specific field of the specified call's call information record.</P>
<B>Parameters    </B>DRV_REQUESTID    <I>dwRequestID</I></P>
Specifies the identifier of the asynchronous request.  The Service Provider returns this value if the function completes asynchronously.</P>
    HDRVCALL    <I>hdCall</I></P>
Specifies the Service Provider's opaque handle to the call whose application specific field is to be set.</P>
    DWORD    <I>dwAppSpecific</I></P>
Specifies the new content of the <B>dwAppSpecific</B> field for the call's <B>LINECALLINFO</B> structure. This value is uninterpreted by the Service Provider.</P>
<B>Return Value    </B>Returns zero if the function is successful, the (positive) <I>dwRequestID</I> value if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P>
    LINEERR_INVALCALLHANDLE</P>
The specified call handle is invalid.</P>
    LINEERR_OPERATIONFAILED</P>
The specified operation failed for unspecified reasons.</P>
<B>Call States</B>    <I>hdCall    </I>any state</P>
<B>Comments</B>    The app specific field in the <B>LINECALLINFO</B> data structure that exists for each call is uninterpreted by the Telephony API or any of its service providers. Its usage is entirely defined by the applications. The field can be read from the <B>LINECALLINFO</B> record returned by <B>TSPI_lineGetCallInfo</B>. However, <B>TSPI_lineSetAppSpecific</B> must be used to set the field so that changes become visible to other apps. When this field is changed, the Service Provider sends a <B>LINE_CALLINFO</B> message with an indication that the <I>AppSpecific</I> field has changed.</P>
<B>See Also</B>    Functions:  <B>TSPI_lineGetCallInfo</B></P>
<B>    </B>Messages:  <B>LINE_CALLINFO</B></P>
    Data Types:  <B>LINECALLINFO</B></P>
<A NAME="PT50"></A>3.1.7.0  TSPI_lineSetCallParams</P>
<B>Syntax    </B>LONG<B> TSPI_lineSetCallParams</B>(<I>dwRequestID, hdCall,  dwBearerMode, dwMinRate, dwMaxRate, lpDialParams</I>)</P>
This function allows the TAPI DLL to change certain parameters for an existing call.</P>
<B>Parameters    </B>DRV_REQUESTID    <I>dwRequestID</I></P>
Specifies the identifier of the asynchronous request.  The Service Provider returns this value if the function completes asynchronously.</P>
    HDRVCALL    <I>hdCall</I></P>
Specifies the Service Provider's opaque handle to the call whose parameters are to be changed.</P>
<B>    </B>DWORD    <I>dwBearerMode</I></P>
Specifies the new bearer mode for the call, of type <B>LINEBEARERMODE</B>. Values are:</P>
        LINEBEARERMODE_VOICE</P>
This is a regular 3.1kHz analog voice grade bearer service. Bit integrity is not assured. Voice can support fax and modem media modes.</P>
<B>        </B>LINEBEARERMODE_SPEECH</P>
This corresponds to G.711 speech transmission on the call. The network may use processing techniques such as analog transmission, echo cancellation and compression/decompression. Bit integrity is not assured. Speech is not intended to support fax and modem media modes.</P>
<B>        </B>LINEBEARERMODE_MULTIUSE</P>
The multi-use mode defined by ISDN.</P>
        LINEBEARERMODE_DATA</P>
The unrestricted data transfer on the call. The data rate is specified separately. </P>
        LINEBEARERMODE_ALTSPEECHDATA</P>
The alternate transfer of speech or unrestricted data on the same call (ISDN).</P>
        LINEBEARERMODE_NONCALLSIGNALING</P>
This corresponds to a non call-associated signaling connection from the app to the service provider or switch (treated as a "media stream" by the TAPI DLL).  </P>
<B>    </B>DWORD    <I>dwMinRate</I></P>
Specifies a lower bound for the call's new data rate. The TAPI DLL is willing to accept a new rate as low as this one.</P>
<B>    </B>DWORD    <I>dwMaxRate</I></P>
Specifies an upper bound for the call's new data rate. This is the maximum data rate the TAPI DLL would like. Equal values for <I>dwMinRate</I> and <I>dwMaxRate</I> indicate that an exact data rate is required.</P>
<B>    </B>LPLINEDIALPARAMS    <I>lpDialParams</I></P>
Specifies a far pointer to the new dial parameters for the call, of type <B>LINEDIALPARAMS</B>. If this parameter is NULL, it indicates that the call's current dialing parameters are to be used.</P>
<B>Return Value    </B>Returns zero if the function is successful, the (positive) <I>dwRequestID</I> value if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P>
    LINEERR_INVALCALLHANDLE</P>
The specified call handle is invalid.</P>
    LINEERR_INVALCALLPARAMS</P>
The specified call parameter structure is invalid.</P>
    LINEERR_INVALBEARERMODE</P>
The specified bearer mode is invalid.</P>
    LINEERR_INVALRATE</P>
The specified bearer mode is invalid.</P>
    LINEERR_BEARERMODEUNAVAIL</P>
The call's bearer mode cannot be changed to the specified bearer mode. </P>
    LINEERR_RATEUNAVAIL</P>
The service provider does currently not have enough bandwidth available for the specified rate. </P>
    LINEERR_RESOURCEUNAVAIL</P>
The service provider does not have enough resources available to complete the request. </P>
    LINEERR_OPERATIONUNAVAIL</P>
The specified operation is not available.</P>
    LINEERR_OPERATIONFAILED</P>
The specified operation failed for unspecified reason.</P>
<B>Call States</B>    Any state</P>
<B>Comments    </B>This operation is used to change the parameters of an existing call. Examples of its usage include changing the bearer mode and/or the data rate of an existing call. </P>
<B>See Also    </B>Functions:  <B>TSPI_lineMakeCall</B></P>
<B>    </B>Messages:  <B>LINECALLPARAMS</B></P>
<A NAME="PT51"></A>3.1.7.0  TSPI_lineSetCompletionCallback</P>
<B>Syntax    </B>void<B> TSPI_lineSetCompletionCallback</B>(<I>dwTSPIVersion, cbCompletion</I>)</P>
This procedure sets the procedure pointer to be used for all asynchronous request completion callbacks for "line" requests to the service provider.</P>
<B>Parameters    </B>DWORD    <I>dwTSPIVersion</I></P>
Specifies the overall interface version that has been negotiated using <B>TSPI_lineNegotiateTSPIVersion</B>.</P>
<B>    </B>ASYNC_LINE_COMPLETION    <I>cbCompletion</I></P>
Specifies the far pointer to the procedure to be called to report completion of all line-related functions for all line devices supported by the Service Provider.</P>
<B>Return Value    </B>none</P>
<B>Call States</B>    Not applicable</P>
<B>Comments    </B>Since this procedure is called without an active   device   to   identify   the  interface  version,  it  includes  an already-negotiated  TSPI  version  number  defining the interface version at which the Service Provider is expected to operate for this function.  An "early" version negotiation such as this uses the <I>dwDeviceID</I> value <B>INITIALIZE_NEGOTIATE</B> to signify that an overall interface version number is being negotiated.</P>
    The operation is always synchronous, with presumed success.</P>
<B>Comparison</B>    This procedure has no direct corresondence at the TAPI level, where completion of asynchronous operations is reported by sending a message to a central callback function where all other messgas are reported.</P>
<B>See Also</B>    Functions:  <B>TSPI_lineNegotiateTSPIVersion</B></P>
<B>    </B>Constants:  <B>INITIALIZE_NEGOTIATE</B></P>
<A NAME="PT52"></A>3.1.7.0  TSPI_lineSetDefaultMediaDetection</P>
<B>Syntax</B>    LONG<B> TSPI_lineSetDefaultMediaDetection</B>(<I>dwRequestID, hdLine, dwMediaModes</I>)</P>
This procedure tells the Service Provider the new set of Media Modes to detect for the indicated line (replacing any previous set). It also sets the initial set of Media Modes that should be monitored for on subsequent calls (inbound or outbound) on this line. </P>
<B>Parameters    </B>DRV_REQUESTID    <I>dwRequestID</I></P>
Specifies the identifier of the asynchronous request.  The Service Provider returns this value if the function completes asynchronously.</P>
    HDRVLINE    <I>hdLine</I></P>
Specifies the Service Provider's opaque handle to the line to have media monitoring set.</P>
    DWORD   <I> dwMediaModes</I></P>
Specifies the media mode(s) of interest to the TAPI DLL, of type <B>LINEMEDIAMODE</B>. Values are:</P>
LINEMEDIAMODE_NONE</P>
This is used as a NULL value for the data type. The TAPI DLL is not interested to be the target of any handoff or inbound calls.</P>
LINEMEDIAMODE_UNKNOWN</P>
The TAPI DLL wants to handle calls of unknown media type; i.e., unclassified calls.</P>
        LINEMEDIAMODE_INTERACTIVEVOICE</P>
The TAPI DLL wants to handle calls of the interactive voice media type; i.e., it manages live voice calls.</P>
        LINEMEDIAMODE_AUTOMATEDVOICE</P>
The TAPI DLL wants to handle calls in which there is voice data managed by an automated application.  In cases where the Service Provider does not distinguish between automated or interactive voice, this should be treated the same as interactive voice.</P>
        LINEMEDIAMODE_DIGITALDATA</P>
The TAPI DLL wants to handle calls of the digital data media type.</P>
        LINEMEDIAMODE_G3FAX</P>
The TAPI DLL wants to handle calls of the group 3 fax media type.</P>
        LINEMEDIAMODE_G4FAX</P>
The TAPI DLL wants to handle calls of the group 4 fax media type.</P>
        LINEMEDIAMODE_DATAMODEM</P>
The TAPI DLL wants to handle calls with the data modem media mode.</P>
        LINEMEDIAMODE_TELETEX</P>
The TAPI DLL wants to handle calls with the teletex media mode.</P>
        LINEMEDIAMODE_VIDEOTEX</P>
The TAPI DLL wants to handle calls with the videotex media mode.</P>
        LINEMEDIAMODE_TELEX</P>
The TAPI DLL wants to handle calls with the telex media mode.</P>
        LINEMEDIAMODE_MIXED</P>
The TAPI DLL wants to handle calls with the ISDN mixed media mode.</P>
        LINEMEDIAMODE_TDD</P>
The TAPI DLL wants to handle calls with the TDD (Telephony Devices for the Deaf) media mode.</P>
        LINEMEDIAMODE_ADSI</P>
The TAPI DLL wants to handle calls with the ADSI (Analog Display Services Interface) media mode.</P>
<B>Return Value    </B>Returns zero if the function is successful, the (positive) <I>dwRequestID</I> value if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P>
    LINEERR_INVALLINEHANDLE</P>
The specified line handle is invalid.</P>
    LINEERR_NOMEM</P>
Unable to allocate or lock memory.</P>
    LINEERR_RESOURCEUNAVAIL</P>
The specified operation cannot be completed because of resource overcommitment.</P>
    LINEERR_NODRIVER</P>
The driver was not properly installed.</P>
    LINEERR_OPERATIONFAILED</P>
The specified operation failed for unspecified reasons.</P>
<B>Call States</B>    Not applicable.</P>
<B>Comments</B>    The TAPI DLL typically calls this function to update the set of detected media modes for the line to the union of all modes selected by all outstanding lineOpens whenever a line is Opened or Closed at the TAPI level. A lineOpen attempt is rejected if media detection is rejected. A single call to this procedure is typically the result of a lineOpen that does not specify the device ID LINE_MAPPER. The Device ID LINE_MAPPER is never used at the TSPI level.</P>
<B>Comparison</B>    There is no directly corresponding function at the TAPI level.  This procedure corresponds to the "request media modes" implied for the specific line by the <B>lineOpen</B> procedure when it is called with the a specific device ID (i.e., other than LINE_MAPPER).</P>
<B>See Also</B>    Functions:  <B>lineClose</B></P>
<B>    </B>Data Types:  <B>LINEMEDIAMODE, LINECALLPARAMS</B></P>
<A NAME="PT53"></A>3.1.7.0  TSPI_lineSetDeviceIDBase</P>
<B>Syntax    </B>void<B> TSPI_lineSetDeviceIDBase</B>(<I>dwTSPIVersion, dwDeviceID</I>)</P>
This function tells the Service Provider what its lowest numbered line device ID should be.</P>
<B>Parameters    </B>DWORD    <I>dwTSPIVersion</I></P>
Specifies the interface version under which the Service Provider and TAPI DLL operation for this function.  This version number has already been negotiated using <B>TSPI_lineNegotiateTSPIVersion</B>.</P>
<B>    </B>DWORD    <I>dwDeviceID</I></P>
Specifies the new base line device ID from which the Service Provider should number its line devices.</P>
<B>Return Value    </B>none</P>
<B>Call States</B>    Not applicable</P>
</P>
<B>Comments    </B>Under directed park, the application determines the address at which it wants to park the call. Under non directed park, the switch determines the address and provides this to the application. In either case, a parked call can be unparked by specifying this address.</P>
    The Service Provider numbers its available line devices contiguously starting at the  number set by this function.  For example, if the Service Provider supports 4 lines and this procedure is called with a base dwDeviceID of 5, the lines have device IDs 5 through  8  both  when  device  IDs  are  used  as "input" parameters (as in <B>TSPI_lineGetDevCaps</B>) and when device IDs are used as "output" parameters (as in a returned  <B>LINEADDRESSCAPS</B>  data  structure).   This  procedure may be called again, in which case device ID numbering changes for all subsequent requests.   The operation returns synchronously.  The device IDs before this procedure  is  called start at 0.  Since this procedure is called without an active   device   to   identify   the  interface  version,  it  includes  an already-negotiated  TSPI  version  number  defining the interface version at which the Service Provider is expected to operate for this function. </P>
<B>Comparison</B>    This function has no correspondence at the TAPI level, where device IDs are a zero-based range spanning all Service Providers.  This function is used to "divide up" the range of device IDs between different Service Providers.</P>
    The responsibility for "offsetting" device IDs resides with the Service Providers rather than with the TAPI DLL to allow Service Provider designers maximum flexibility in defining extensions.  Since the Service Provider uses the same device IDs as the application level, device-specific extensions can pass device IDs back and forth to applications using consistent device ID numbering.</P>
<B>See Also</B>    none</P>
<A NAME="PT54"></A>3.1.7.0  TSPI_lineSetMediaControl</P>
<B>Syntax    </B>LONG <B>TSPI_lineSetMediaControl</B>(<I>dwRequestID, hdLine, dwAddressID, hdCall, dwSelect, lpDigitList, dwDigitNumEntries, lpMediaList, dwMediaNumEntries, lpToneList, dwToneNumEntries, lpCallStateList, dwCallStateNumEntries</I>)</P>
This function enables and disables control actions on the media stream associated with the specified line, address, or call. Media control actions can be triggered by the detection of specified digits, media modes, custom tones, and call states.  The new specified media controls replace all the ones that were in effect for this line, address, or call prior to this request.</P>
<B>Parameters    </B>DRV_REQUESTID    <I>dwRequestID</I></P>
Specifies the identifier of the asynchronous request.  The Service Provider returns this value if the function completes asynchronously.</P>
    HDRVLINE    <I>hdLine</I></P>
Specifies the Service Provider's opaque handle to a line.</P>
<B>    </B>DWORD    <I>dwAddressID</I></P>
Specifies an address on the given open line device.</P>
    HDRVCALL    <I>hdCall</I></P>
Specifies the Service Provider's opaque handle to a call.</P>
<B>    </B>DWORD    <I>dwSelect</I></P>
Specifies the whether media control is requested is associated with a single call, is the default for all calls on an address, or is the default for all calls on a line. This field is of type <B>LINECALLSELECT</B>. Values are:</P>
LINECALLSELECT_LINE</P>
Selects the specified line device. The <I>hdLine</I> parameter must be a valid line handle; <I>hdCall</I> and <I>dwAddressID</I> are ignored.</P>
LINECALLSELECT_ADDRESS</P>
Selects the specified address on the line. Both <I>hdLine</I> and <I>dwAddressID</I> must be valid; <I>hdCall</I> is ignored.</P>
LINECALLSELECT_CALL</P>
Selects the specified call. <I>hdCall</I> must be valid; <I>hdLine</I> and <I>dwAddressID</I> are both ignored. </P>
<B>    </B>LPLINEMEDIACONTROLDIGIT    <B>const</B> <I>lpDigitList</I></P>
Specifies a far pointer to the array that contains the digits that are to trigger media control actions, of type <B>LINEMEDIACONTROLDIGIT</B>. Each time a digit listed in the digit list is detected, the specified media control action is carried out on the call's media stream.</P>
Valid digits for pulse mode are '0' through '9'. Valid digits for DTMF mode are '0' through '9', 'A', 'B', 'C', 'D', '*', '#'.</P>
    DWORD    <I>dwDigitNumEntries</I></P>
Specifies the number of entries in the <I>lpDigitList</I>.</P>
    LPLINEMEDIACONTROLMEDIA     <B>const</B> <I>lpMediaList</I></P>
Specifies a far pointer to an array with entries of type <B>LINEMEDIACONTROLMEDIA</B>. The array has <I>dwMediaNumEntries</I> entries. Each entry contains a media mode to be monitored, media type specific information (e.g., duration), and a media control field. If a media mode in the list is detected, then the corresponding media control action is performed on the call's media stream.</P>
    DWORD    <I>dwMediaNumEntries</I></P>
Specifies the number of entries in <I>lpMediaList</I>.</P>
    LPLINEMEDIACONTROLTONE     <B>const</B> <I>lpToneList</I></P>
Specifies a far pointer to an array with entries of type <B>LINEMEDIACONTROLTONE</B>. The array has <I>dwToneNumEntries</I> entries. Each entry contains a description of a tone to be monitored, duration of the tone, and a media control field. If a tone in the list is detected, then the corresponding media control action is performed on the call's media stream.</P>
    DWORD    <I>dwToneNumEntries</I></P>
Specifies the number of entries in <I>lpToneList</I>.</P>
    LPLINEMEDIACONTROLCALLSTATE     <B>const</B> <I>lpCallStateList</I></P>
Specifies a far pointer to an array with entries are of type <B>LINEMEDIACONTROLSTATE</B>. The array has <I>dwCallStateNumEntries</I> entries. Each entry contains a call state and a media control action. Whenever the given call transitions into one of the call states in the list, the corresponding media control action is invoked. A media control value of LINEMEDIACONTROL_NONE should be specified to cancel the media control of a call state.</P>
    DWORD    <I>dwCallStateNumEntries</I></P>
Specifies the number of entries in <I>lpCallStateList</I>.</P>
<B>Return Value    </B>Returns zero if the function is successful, the (positive) <I>dwRequestID</I> value if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P>
    LINEERR_INVALLINEHANDLE</P>
The specified line handle is invalid.</P>
    LINEERR_INVALADDRESSID</P>
The specified address ID is invalid.</P>
    LINEERR_INVALCALLHANDLE</P>
The specified call handle is invalid.</P>
    LINEERR_INVALCALLSELECT</P>
The specified select parameter is invalid.</P>
    LINEERR_INVALDIGITLIST</P>
The specified digit list is invalid.</P>
    LINEERR_INVALMEDIALIST</P>
The specified media list is invalid.</P>
    LINEERR_INVALTONELIST</P>
The specified tone list is invalid.</P>
    LINEERR_INVALCALLSTATELIST</P>
The specified call state list is invalid.</P>
    LINEERR_RESOURCEUNAVAIL</P>
The service provider does not have enough resources available to complete the request.</P>
    LINEERR_OPERATIONUNAVAIL</P>
The operation is not available.</P>
    LINEERR_OPERATIONFAILED</P>
The operation failed for unspecified reasons.</P>
<B>Call States</B>    <I>hdCall    </I>any state</P>
<B>Comments    </B>This function is considered successful if media control has been correctly initiated; not when any media control has taken effect. Media control in progress is changed or is canceled by calling this function again with either different parameters or NULLs.</P>
    Only a single media control request can be outstanding on a call across all applications that own the call. A request replaces any that may be outstanding.</P>
    Depending on the service provider and other activities that compete for such resources, the amount of simultaneous detections that can be made may vary over time. If service provider resources are overcommitted, the LINEERR_RESOURCEUNAVAIL error is returned.</P>
<B> </B>    Whether or not media control is supported by the service provider is a device capability.</P>
<B>See Also    </B>Functions:  <B>TSPI_lineGetDevCaps</B></P>
<B>    </B>Data Types:  <B>LINECAPS, LINEDIGITMODE, LINEMEDIAMODE,<BR>    LINEMEDIACONTROLMODE, LINEMEDIACONTROLCALLSTATE, <BR>    LINEMEDIACONTROLDIGIT, LINEMEDIACONTROLMEDIA, <BR>    LINEMEDIACONTROLTONE</B></P>
<A NAME="PT55"></A>3.1.7.0  TSPI_lineSetMediaMode</P>
<B>Syntax    </B>LONG<B> TSPI_lineSetMediaMode</B>(<I>dwRequestID, hdCall, dwMediaMode</I>)</P>
This function changes the call's media as stored in the call's <B>LINECALLINFO</B> structure.</P>
<B>Parameters    </B>DRV_REQUESTID    <I>dwRequestID</I></P>
Specifies the identifier of the asynchronous request.  The Service Provider returns this value if the function completes asynchronously.</P>
    HDRVCALL    <I>hdCall</I></P>
Specifies the Service Provider's opaque handle to the call undergoing a change in media mode.</P>
    DWORD    <I>dwMediaMode</I></P>
Specifies the new media mode(s) for the call, of type <B>LINEMEDIAMODE</B>. As long as the UNKNOWN media mode flag is set, multiple other media mode flags may be set as well. This is used to indentify a call's media mode as not fully determined, but narrowed down to one of just a small set of specified media modes. If the UNKNOWN flag is not set, then only a single media mode can be specified. Values are:</P>
LINEMEDIAMODE_NONE</P>
This is used as a NULL value for the data type.  This value is used when the media stream is inaccessible but call control features are being used.</P>
LINEMEDIAMODE_UNKNOWN</P>
The anticipated media type is not fully classified.</P>
leftoff</P>
        LINEMEDIAMODE_INTERACTIVEVOICE</P>
The anticipated media type is interactive voice media mode; i.e., live conversations.</P>
        LINEMEDIAMODE_AUTOMATEDVOICE</P>
The TAPI DLL wants to handle calls in which there is voice data, but the voice is handled by an automated application.  Most Service Providers will not be able to distinguish between automated and interactive voice.  In such a case any request for voice or detection of voice should be treated as interactive voice.</P>
        LINEMEDIAMODE_DIGITALDATA</P>
The anticipated media type is digital data calls.</P>
        LINEMEDIAMODE_G3FAX</P>
The anticipated media type is group 3 fax media mode.</P>
        LINEMEDIAMODE_G4FAX</P>
The anticipated media type is group 4 fax media mode.</P>
        LINEMEDIAMODE_DATAMODEM</P>
The anticipated media type is data modem media mode.</P>
        LINEMEDIAMODE_TELETEX</P>
The anticipated media type is teletex media mode.</P>
        LINEMEDIAMODE_VIDEOTEX</P>
The anticipated media type is videotex media mode.</P>
        LINEMEDIAMODE_TELEX</P>
The anticipated media type is telex media mode.</P>
        LINEMEDIAMODE_MIXED</P>
The anticipated media type is ISDN mixed media mode.</P>
        LINEMEDIAMODE_TDD</P>
The anticipated media type is TDD (Telephony Devices for the Deaf) media mode.</P>
        LINEMEDIAMODE_ADSI</P>
The anticipated media type is ADSI (Analog Display Services Interface) media mode.</P>
<B>Return Value    </B>Returns zero if the function is successful, the (positive) <I>dwRequestID</I> value if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P>
    LINEERR_INVALCALLHANDLE</P>
The specified call handle is invalid.</P>
    LINEERR_INVALMEDIAMODE</P>
The specified media mode parameter is invalid.</P>
    LINEERR_OPERATIONUNAVAIL</P>
The specified operation is not available.</P>
    LINEERR_OPERATIONFAILED</P>
The specified operation failed for unspecified reasons.</P>
<B>Call States</B>    <I>hdCall    </I>Any state</P>
<B>Comments    </B>Other than changing the call's media as stored in the call's <B>LINECALLINFO</B> structure, this procedure is simply "advisory" in the sense that it indicates an expected media change that is about to occur, rather than forcing a specific change to the call.  Typical usage is to set a calls media mode to a specific known media mode, or to exclude possible media modes as long as the call's media mode is not fully known; i.e., the UNKNOWN media mode flag is set.</P>
<B>See Also    </B>Data Types:  <B>LINECALLINFO</B></P>
<B>    </B>Functions:  <B>TSPI_lineGetCallInfo</B></P>
<A NAME="PT56"></A>3.1.7.0  TSPI_lineSetStatusMessages</P>
<B>Syntax</B>    LONG<B> TSPI_lineSetStatusMessages</B>(<I>dwRequestID, hdLine, dwLineStates, dwAddressStates</I>)</P>
This operation enables the TAPI DLL to specify which notification messages the Service Provider should generate for events related to status changes for the specified line or any of its addresses.</P>
<B>Parameters    </B>DRV_REQUESTID    <I>dwRequestID</I></P>
Specifies the identifier of the asynchronous request.  The Service Provider returns this value if the function completes asynchronously.</P>
    HDRVLINE    <I>hdLine</I></P>
Specifies the Service Provider's opaque handle to the line device for which the new filter is to be set.</P>
     DWORD    <I>dwLineStates</I></P>
Specifies a bit array that identifies for which line device status changes a message is to be sent to the TAPI DLL, of type <B>LINEDEVSTATE</B>. Values are:</P>
        LINEDEVSTATE_OTHER</P>
An other device status item has changed.</P>
        LINEDEVSTATE_RINGING</P>
The switch tells the line to alert the user.</P>
        LINEDEVSTATE_CONNECTED</P>
The line was previously disconnected and is now connected to the Service Provider.</P>
        LINEDEVSTATE_DISCONNECTED</P>
This line was previously connected and is now disconnected from the Service Provider.</P>
        LINEDEVSTATE_MSGWAITON</P>
The message waiting indicator is turned on.</P>
        LINEDEVSTATE_MSGWAITOFF</P>
The message waiting indicator is turned off.</P>
        LINEDEVSTATE_INSERVICE</P>
The line is connected to the Service Provider. This happens when the Service Provider is first activated, or when the line wire is physically plugged in and in service at the switch while the Service Provider is active.</P>
        LINEDEVSTATE_OUTOFSERVICE</P>
The line is out of service at the switch or physically disconnected. The API cannot be used to operate on the line device.</P>
        LINEDEVSTATE_MAINTENANCE</P>
Maintenance is being performed on the line at the switch. The Service Provider cannot be used to operate on the line device.</P>
        LINEDEVSTATE_NUMCALLS</P>
The number of calls on the line device has changed.</P>
        LINEDEVSTATE_TERMINALS</P>
The terminal settings have changed.</P>
        LINEDEVSTATE_ROAMMODE</P>
The roaming mode of the line device has changed.</P>
        LINEDEVSTATE_BATTERY</P>
The battery level has changed significantly (cellular).</P>
        LINEDEVSTATE_SIGNAL</P>
The signal level has changed significantly (cellular).</P>
        LINEDEVSTATE_DEVSPECIFIC</P>
The line's device specific information has changed.</P>
        LINEDEVSTATE_REINIT</P>
Items have changed in the configuration of line devices. To become aware of these changes (e.g., new line devices) the TAPI DLL should notify all its client applications to reinitialize their use of the API.  A Service Provider should initiate such a sequence only in extreme cases that cannot be handled through the normal configuration-change notification mechanism described in the "Overview" chapter.</P>
        LINEDEVSTATE_LOCK</P>
The locked status of the line device has changed.</P>
     DWORD    <I>dwAddressStates</I></P>
Specifies a bit array that identifies for which address status changes a message is to be sent to the TAPI DLL, of type <B>LINEADDRESSSTATE</B>. Values are:</P>
LINEADDRESSSTATE_OTHER</P>
An other address status item than those listed below has changed.</P>
LINEADDRESSSTATE_DEVSPECIFIC</P>
The device specific item of the address status has changed.</P>
LINEADDRESSSTATE_INUSEZERO</P>
The address has changed to idle; i.e., it is now in use by zero stations.</P>
LINEADDRESSSTATE_INUSEONE</P>
The address has changed from being idle or from being in use by many bridged stations to being in use by just one station.</P>
LINEADDRESSSTATE_INUSEMANY</P>
The monitored or bridged address has changed to being in use by one station to being used by more than one station.</P>
LINEADDRESSSTATE_NUMCALLS</P>
The number of calls on the address has changed. This is the result of either a new inbound call, or an outbound call on the address, a call changing its hold status, etc.</P>
LINEADDRESSSTATE_FORWARD</P>
The forwarding status of the address has changed including the number of rings for determining a no answer condition. The TAPI DLL should check the address status to determine details about the address' current forwarding status.</P>
LINEADDRESSSTATE_TERMINALS</P>
The terminal settings for the address have changed.</P>
<B>Return Value    </B>Returns zero if the function is successful, the (positive) <I>dwRequestID</I> value if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P>
    LINEERR_INVALLINEHANDLE</P>
The specified line handle is invalid.</P>
    LINEERR_INVALPARAM</P>
One or both of the states parameters is invalid.</P>
    LINEERR_OPERATIONFAILED</P>
The specified operation failed for unspecified reason.</P>
<B>Call States</B>    Not applicable.</P>
<B>Comments</B>    The TAPI defines a number of messages that notify applications about events occurring on lines and addresses.  The sets of all change messages that all applications are interested may be much smaller than the set of possible messages.  This procedure allows the TAPI DLL to tell the Service Provider the reduced set of messages that should be delivered.  The Service Provider must deliver at least this set.  It is permitted to deliver more, but it is discouraged from doing so for performance reasons.  By default, address and line status reporting is initially disabled for a line.</P>
<B>Comparison</B>    This function differs from the corresponding TAPI function as follows: (1) The set of messages requested is the union of all sets requested by applications at the TAPI level. (2) The message set is neither reduced nor augmented by ownership (since there is no concept of ownership at the TSPI level) (3) The set is "advisory" in the sense that the Service Provider is required to forward at least the indicated set of messages but is permitted to forward a larger set.</P>
    Device state changes regarding Open and Close are not reported, since at the TSPI level there is only one outstanding Open at a time.</P>
<B>See Also</B>    Messages:  <B>LINE_LINEDEVSTATE</B>,<B> LINE_ADDRESSSTATE</B></P>
<B>    </B>Data Types:  <B>LINEDEVSTATE, LINEADDRESSSTATE</B></P>
<A NAME="PT57"></A>3.1.7.0  TSPI_lineSetTerminal</P>
<B>Syntax</B>    LONG<B> TSPI_lineSetTerminal</B>(<I>dwRequestID, hdLine, dwAddressID, hdCall, dwSelect, dwTerminalModes, dwTerminalID, bEnable</I>)</P>
This operation enables the TAPI DLL to specify to which terminal information related to the specified line, address or call is to be routed. This operation can be used while calls are in progress on the line, to allow an application to route these events to different devices as required.</P>
<B>Parameters    </B>DRV_REQUESTID    <I>dwRequestID</I></P>
Specifies the identifier of the asynchronous request.  The Service Provider returns this value if the function completes asynchronously.</P>
    HDRVLINE    <I>hdLine</I></P>
Specifies the Service Provider's opaque handle to a line.</P>
<B>    </B>DWORD    <I>dwAddressID</I></P>
Specifies an address on the given open line device.</P>
    HDRVCALL    <I>hdCall</I></P>
Specifies the Service Provider's opaque handle to a call.</P>
<B>    </B>DWORD    <I>dwSelect</I></P>
Specifies whether the terminal setting is requested for the line, the address or just the specified call. If line or address is specified, then events either apply to the line or address itself or serves as a default initial setting for all new calls on the line or address. This parameter is of type <B>LINECALLSELECT</B>. Values are:</P>
LINECALLSELECT_LINE</P>
Selects the specified line device. The <I>hdLine</I> parameter must be a valid line handle; <I>hdCall</I> and <I>dwAddressID</I> are ignored. </P>
LINECALLSELECT_ADDRESS</P>
Selects the specified address on the line. Both <I>hdLine</I> and <I>dwAddressID</I> must be valid; <I>hdCall</I> is ignored.</P>
LINECALLSELECT_CALL</P>
Selects the specified call. <I>hdCall</I> must be valid; <I>hdLine</I> and <I>dwAddressID</I> are both ignored. </P>
    DWORD    <I>dwTerminalModes</I></P>
Specifies the class(es) of low level events to be routed to the given terminal.</P>
LINETERMMODE_BUTTONS</P>
The button presses from the terminal to the line.</P>
LINETERMMODE_DISPLAY</P>
The display events from the line to the terminal.</P>
LINETERMMODE_LAMPS</P>
The lamp lighting events from the line to the terminal.</P>
LINETERMMODE_RINGER</P>
The ring requests from the line to the terminal.</P>
LINETERMMODE_HOOKSWITCH</P>
The hookswitch events between the terminal and the line.</P>
LINETERMMODE_MEDIAFROMTERM</P>
This is the unidirectional media stream from the terminal to the line associated with a call on the line. This value is only allowed when routing of both unidirectional channels of a call's media stream can be controlled independently.</P>
LINETERMMODE_MEDIATOTERM</P>
This is the unidirectional media stream from the line to the terminal associated with a call on the line. This value is only allowed when routing of both unidirectional channels of a call's media stream can be controlled independently.</P>
LINETERMMODE_MEDIABIDIR</P>
This is the bidirectional media stream associated with a call on the line and the terminal. This is the only value allowed when routing of both unidirectional channels of a call's media stream cannot be controlled independently.</P>
    DWORD    <I>dwTerminalID</I></P>
Specifies the device ID of the terminal device where the given events are to be routed. Terminal IDs are small integers in the range of 0 to <B>dwNumTerminals</B> -1, where <B>dwNumTerminals, </B>and the terminal modes each terminal is capable of handling, are returned by <B>lineGetDevCaps</B>. Note that these terminal IDs have no relation to other device IDs and are defined by the service provider via device capabilities.</P>
    BOOL    <I>bEnable</I></P>
If TRUE, <I>dwTerminalID</I> is valid and the specified event classes are routed to or from that terminal. If FALSE, these events are not routed to or from the <I>dwTerminalID</I>.</P>
<B>Return Value    </B>Returns zero if the function is successful, the (positive) <I>dwRequestID</I> value if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P>
    LINEERR_INVALLINEHANDLE</P>
The specified line handle is invalid.</P>
    LINEERR_INVALADDRESSID</P>
The specified address ID is invalid.</P>
    LINEERR_INVALCALLHANDLE</P>
The specified call handle is invalid.</P>
    LINEERR_INVALCALLSELECT</P>
The specified select parameter is invalid.</P>
    LINEERR_INVALTERMINALMODE</P>
The specified terminal modes parameter is invalid.</P>
    LINEERR_INVALTERMINALID</P>
The specified terminal mode parameter is invalid.</P>
    LINEERR_RESOURCEUNAVAIL</P>
The specified operation cannot be completed because of resource overcommitment.</P>
    LINEERR_OPERATIONUNAVAIL</P>
The specified operation is not available for the given device.</P>
    LINEERR_OPERATIONFAILED</P>
The specified operation failed for unspecified reason.</P>
<B>Call States</B>    Not applicable.</P>
<B>Comments</B>    The TAPI DLL can use this operation to route certain classes of low level line events to the specified terminal device, or to suppress the routing of these events altogether. For example, voice may be routed to a separate audio I/O device (headset), lamps and display events may be routed to the local phone device, and button events and ringer events may be suppressed altogether.</P>
    This operation can be called any time, even when a call is active on the given line device. This, for example, allows a user to switch from using the local phone set to another audio I/O device.</P>
    This function may be called multiple times to possibly route the same events to multiple terminals simultaneously. To reroute event to a different terminal, it is recommended that the app first disable routing to the existing terminal and next route the events to the new terminal.</P>
    Terminal ID assignments are made by the line's service provider. Device capabilities only indicate which terminal IDs the service provider has available. Service providers that don't support this type of event routing would indicate that they have no terminal devices (<B>dwNumTerminals</B> in <B>LINEDEVCAPS</B> is zero).</P>
<B>See Also</B>    Data Types:  <B>LINETERMMODE, LINECALLSELECT</B></P>
<A NAME="PT58"></A>3.1.7.0  TSPI_lineSetupConference</P>
<B>Syntax    </B>LONG<B> TSPI_lineSetupConference</B>(<I>dwRequestID, hdCall, hdLine, htConfCall, lphdConfCall, htAddCall, lphdAddCall, dwNumParties, lpCallParams</I>)</P>
This function sets up a conference call for the addition of the third party. </P>
<B>Parameters    </B>DRV_REQUESTID    <I>dwRequestID</I></P>
Specifies the identifier of the asynchronous request.  The Service Provider returns this value if the function completes asynchronously.</P>
    HDRVCALL    <I>hdCall</I></P>
Specifies the Service Provider's opaque handle to the initial call that identifies the first party of a conference call. In some environments, a call must exist in order to start a conference call. In other telephony environments, no call initially exists and <I>hdCall</I> is left NULL.</P>
    HDRVLINE    <I>hdLine</I></P>
Specifies the Service Provider's opaque handle to the line device on which to originate the conference call if <I>hdCall</I> is NULL.  The <I>hdLine</I> parameter is ignored if <I>hdCall</I> is non-NULL.  The Service Provider reports which model it supports through the <B>setupConfNull</B> flag of the <B>LINEADDRESSCAPS</B> data structure.</P>
    HTAPICALL    <I>htConfCall</I></P>
Specifies the TAPI DLL's opaque handle to the new conference call.  The Service Provider must save this and use it in all subsequent calls to the <B>LINEEVENT</B> procedure reporting events on the new call.</P>
<B>    </B>LPHDRVCALL    <I>lphdConfCall</I></P>
Specifies a far pointer to an opaque <B>HDRVCALL</B> representing the Service Provider's identifier for the newly created conference call.  The Service Provider must fill this location with its opaque handle for the new call before this procedure returns, whether it decides to execute the request sychronously or asynchronously.  This handle is invalid if the function results in an error (either synchronously or asynchronously).</P>
    HTAPICALL    <I>htAddCall</I></P>
Specifies the TAPI DLL's opaque handle to a new call.  When setting up a call for the addition of a new party, a new temporary call (consultation call) is automatically allocated.  The Service Provider must save the <I>htAddCall</I> and use it in all subsequent calls to the <B>LINEEVENT</B> procedure reporting events on the new consultation call.</P>
<B>    </B>LPHDRVCALL    <I>lphdAddCall</I></P>
Specifies a far pointer to an opaque <B>HDRVCALL</B> representing the Service Provider's identifier for a call.  When setting up a call for the addition of a new party, a new temporary call (consultation call) is automatically allocated. The Service Provider must fill this location with its opaque handle for the new consultation call before this procedure returns, whether it decides to execute the request sychronously or asynchronously.  This handle is invalid if the function results in an error (either synchronously or asynchronously).</P>
<B>    </B>DWORD    <I>dwNumParties</I></P>
Specifies the expected number of parties in the conference call.  The service provider is free to do with this number as it pleases; ignore it, use it a hint to allocate the right size conference bridge inside the switch, etc.</P>
<B>    </B>LPLINECALLPARAMS    <B>const</B> <I>lpCallParams</I></P>
Specifies a far pointer to call parameters to be used when establishing the consultation call. This parameter may be set to NULL if no special call setup parameters are desired.</P>
<B>Return Value    </B>Returns zero if the function is successful, the (positive) <I>dwRequestID</I> value if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P>
    LINEERR_INVALCALLHANDLE</P>
The specified call handle for the conference call is invalid.  This error may also indicate that the telephony environment requires an initial call to set up a conference but a NULL call handle was supplied.</P>
    LINEERR_INVALLINEHANDLE</P>
The specified line handle for the line containing the conference call is invalid.  This error may also indicate that the telephony environment requires an initial line to set up a conference but a non-NULL call handle was supplied instead.</P>
    LINEERR_INVALCALLSTATE</P>
The call is not in a valid state for the requested operation.</P>
    LINEERR_CALLUNAVAIL</P>
All call appearances on the specified address are currently allocated.</P>
    LINEERR_CONFERENCEFULL</P>
The requested number of parties cannot be satisfied.</P>
    LINEERR_INVALPOINTER</P>
One or more of the specified pointer parameters are invalid.</P>
    LINEERR_INVALCALLPARAMS</P>
The specified call parameters are invalid.</P>
    LINEERR_OPERATIONUNAVAIL</P>
The specified operation is not available.</P>
    LINEERR_OPERATIONFAILED</P>
The specified operation failed for unspecified reason.</P>
<B>Call States</B>    <I>hdCall</I>    connected</P>
    <I>hdConfCall</I>    Not applicable</P>
    <I>hdAddCall</I>    Not applicable</P>
<B>Comments    TSPI_lineSetupConference</B> provides two ways for establishing a new conference call, depending on whether a normal two-party call is required to pre-exist or not. When setting up a conference call from an existing two-party call, the <I>hdCall</I> parameter is a valid call handle that is initially added to the conference call by the <B>TSPI_lineSetupConference</B> request and <I>hdLine</I> is ignored. On switches where conference call setup does not start with an existing call, <I>hdCall</I> must be NULL and <I>hdLine</I> must be specified to identify the line device on which to initiate the conference call.  In either case, a consultation call is allocated for connecting to the party that is to be added to the call. The TAPI DLL can use <B>TSPI_lineDial</B> to dial the address of the other party.</P>
    The conference call will typically transition into the <I>onHoldPendingConference</I> state, the consultation call <I>dialtone</I> state and the initial call (if one) into the <I>conferenced</I> state.</P>
    A conference call can also be set up via a <B>TSPI_lineCompleteTransfer</B> that is resolved into a three-way conference.</P>
    The TAPI DLL may be able to toggle between the consultation call and the conference call by using <B>TSPI_lineSwapHold</B>.</P>
<B>Comparison    </B>This function differs from the TAPI in that it follows the TSPI model for beginning the lifetime of a call; the TAPI DLL and Service Provider exchange opaque handles representing the call with one another.  In addition, the Service  Provider is permitted to do callbacks regarding the new call before it returns from this procedure.</P>
<B>See Also    </B>Functions:  <B>TSPI_lineDial, TSPI_lineSwapHold, TSPI_linePrepareAddToConference, TSPI_lineAddToConference, TSPI_lineRemoveFromConference</B></P>
    Messages:  <B>LINE_CALLSTATE</B></P>
<B>    </B>Data Structures:  <B>LINEADDRESSCAPS, LINEADDRESSCAPFLAGS</B></P>
<A NAME="PT59"></A>3.1.7.0  TSPI_lineSetupTransfer</P>
<B>Syntax    </B>LONG<B> TSPI_lineSetupTransfer</B>(<I>dwRequestID, hdCall, htConsultCall, lphdConsultCall, lpCallParams</I>)</P>
This function initiates a transfer of the call specified by <I>hdCall</I>.<I> </I>It establishes a consultation call, <I>lphdConsultCall</I>, on which the party can be dialed that can become the destination of the transfer.</P>
<B>Parameters    </B>DRV_REQUESTID    <I>dwRequestID</I></P>
Specifies the identifier of the asynchronous request.  The Service Provider returns this value if the function completes asynchronously.</P>
    HDRVCALL    <I>hdCall</I></P>
Specifies the Service Provider's opaque handle to the call to be transferred.</P>
    HTAPICALL    <I>htConsultCall</I></P>
Specifies the TAPI DLL's opaque handle to the new, temporary consultation call.  The Service Provider must save this and use it in all subsequent calls to the <B>LINEEVENT</B> procedure reporting events on the new consultation call.</P>
<B>    </B>LPHDRVCALL    <I>lphdConsultCall</I></P>
Specifies a far pointer to an opaque <B>HDRVCALL</B> representing the Service Provider's identifier for the new consultation call.  The Service Provider must fill this location with its opaque handle for the new consultation call before this procedure returns, whether it decides to execute the request sychronously or asynchronously.  This handle is invalid if the function results in an error (either synchronously or asynchronously).</P>
 When setting a call up for transfer, another call (a consultation call) is automatically allocated to enable the TAPI DLL to dial the address (using <B>TSPI_lineDial</B>) of the party to where the call is to be transferred. The originating party can carry on a conversation over this consultation call prior to completing the transfer.</P>
This transfer procedure may not be valid for some line devices. Instead of calling this procedure, the TAPI DLL may need to unhold an existing held call (using <B>TSPI_lineUnhold</B>) to identify the destination of the transfer. On switches that support cross-address call transfer, the consultation call may exist on a different address than the call to be transferred. It may also be necessary that the consultation call be set up as an entirely new call, via <B>TSPI_lineMakeCall</B>, to the destination of the transfer.</P>
The <B>transferHeld</B> and <B>transferMake</B> flags in the <B>LINEADDRESSCAPS</B> data structure report what model the Service Provider uses.</P>
<B>    </B>LPLINECALLPARAMS    <B>const</B> <I>lpCallParams</I></P>
Specifies a far pointer to call parameters to be used when establishing the consultation call. This parameter may be set to NULL if no special call setup parameters are desired.</P>
<B>Return Value    </B>Returns zero if the function is successful, the (positive) <I>dwRequestID</I> value if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P>
    LINEERR_INVALCALLHANDLE</P>
The specified call handle is invalid.</P>
    LINEERR_INVALCALLSTATE</P>
The call to be transferred is not in a valid state.</P>
    LINEERR_CALLUNAVAIL</P>
All call appearances on the specified address are currently allocated.</P>
    LINEERR_INVALPOINTER</P>
One or more of the specified pointer parameters are invalid.</P>
    LINEERR_INVALCALLPARAMS</P>
The specified call parameters are invalid.</P>
    LINEERR_OPERATIONUNAVAIL</P>
The specified operation is not available.</P>
    LINEERR_OPERATIONFAILED</P>
The specified operation failed for unspecified reason.</P>
<B>Call States</B>    <I>hdCall</I>    connected, onHoldPendingTransfer, onHold</P>
    <I>hdConsultCall</I>    Not applicable</P>
</P>
<B>Comments    </B>This operation sets up the transfer of the call specified by <I>hdCall</I>. The setup phase of a transfer establishes a consultation call that enables the application to send the address of the destination (the party to be transferred to) to the switch, while the call to be transferred is kept on hold.  This new call is referred to as a consultation call (<I>hdConsultCall</I>) and can be manipulated independently of the original call (e.g., dropped, etc.).</P>
    When the consultation call has reached the <I>dialtone</I> call state, the application may proceed transferring the call either by dialing the destination address and tracking its progress, or by unholding an existing call.  The transfer of the original call to the selected destination is completed using <B>TSPI_lineCompleteTransfer</B>.</P>
    While the consultation call exists, the original call will typically transition to the <I>onholdPendingTransfer</I> state. The app may be able to toggle between the consultation call and the original call by using <B>TSPI_lineSwapHold</B>.</P>
    The app may also transfer calls in a single step, without having to deal with the intervening consultation call by using <B>TSPI_lineBlindTransfer</B>.</P>
    In telephony environments that follow the <B>transferHeld</B> or <B>transferMake</B> transfer models, this procedure returns LINEERR_OPERATIONUNAVAIL and does not allocate a consultation call handle.</P>
<B>See Also    </B>Functions:  <B>TSPI_lineDial, TSPI_lineCompleteTransfer, TSPI_lineBlindTransfer, TSPI_lineSwapHold</B></P>
<B>    </B>Messages:  <B>LINE_CALLSTATE</B></P>
<B>    </B>Data Structures:  <B>LINEADDRESSCAPS</B></P>
<A NAME="PT60"></A>3.1.7.0  TSPI_lineSwapHold</P>
<B>Syntax    </B>LONG<B> TSPI_lineSwapHold</B>(<I>dwRequestID, hdActiveCall, hdConsultCall</I>)</P>
This function swaps the specified active call with the specified call on consultation hold.</P>
<B>Parameters    </B>DRV_REQUESTID    <I>dwRequestID</I></P>
Specifies the identifier of the asynchronous request.  The Service Provider returns this value if the function completes asynchronously.</P>
    HDRVCALL    <I>hdActiveCall</I></P>
Specifies the Service Provider's opaque handle to the call to be swapped with the call on consultation hold.</P>
<B>     </B>HDRVCALL    <I>hdConsultCall</I></P>
Specifies the handle to the consultation call.</P>
<B>Return Value    </B>Returns zero if the function is successful, the (positive) <I>dwRequestID</I> value if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P>
    LINEERR_INVALCALLHANDLE</P>
One or both of the specified call handles are invalid.</P>
    LINEERR_INVALCALLSTATE</P>
The call states of the calls are invalid.</P>
    LINEERR_OPERATIONUNAVAIL</P>
The specified operation is not available.</P>
    LINEERR_OPERATIONFAILED</P>
The specified operation failed for unspecified reason.</P>
<B>Call States</B>    <I>hdConsultCall</I>    onHoldPendingTransfer, onHoldPendingConference, onHold<BR><I>hdActiveCall</I>        connected</P>
</P>
<B>Comments    </B>Swapping the active call with the call on consultation hold allows the TAPI DLL to alternate or toggle between these two calls. One example where this is typical behavior is in call waiting.</P>
<B>See Also</B>    Functions:  <B>TSPI_lineSetupTransfer</B>, <B>TSPI_lineSetupConference</B></P>
<A NAME="PT61"></A>3.1.7.0  TSPI_lineUncompleteCall</P>
<B>Syntax    </B>LONG<B> TSPI_lineUncompleteCall</B>(<I>dwRequestID, hdline, dwCompletionID</I>)</P>
This function is used to cancel the specified call competion request on the specified line. </P>
<B>Parameters    </B>DRV_REQUESTID    <I>dwRequestID</I></P>
Specifies the identifier of the asynchronous request.  The Service Provider returns this value if the function completes asynchronously.</P>
    HDRVLINE    <I>hdLine</I></P>
Specifies the Service Provider's opaque handle to the line on which a call completion is to be cancelled.</P>
<B>    </B>DWORD    <I>dwCompletionID</I></P>
Specifies the completion ID for the request that is to be canceled.</P>
<B>Return Value    </B>Returns zero if the function is successful, the (positive) <I>dwRequestID</I> value if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P>
    LINEERR_INVALLINEHANDLE</P>
The specified line handle is invalid.</P>
    LINEERR_INVALCOMPLETIONID</P>
        The completion ID is invalid.</P>
    LINEERR_OPERATIONUNAVAIL</P>
The specified operation is not available.</P>
    LINEERR_OPERATIONFAILED</P>
The specified operation failed for unspecified reason.</P>
<B>Call States</B>    Not applicable.</P>
<B>Comments    </B>None.</P>
<B>See Also    </B>Functions:  <B>TSPI_lineCompleteCall</B></P>
<A NAME="PT62"></A>3.1.7.0  TSPI_lineUnhold</P>
<B>Syntax    </B>LONG<B> TSPI_lineUnhold</B>(<I>dwRequestID, hdCall</I>)</P>
This function retrieves the specified held call.</P>
<B>Parameters    </B>DRV_REQUESTID    <I>dwRequestID</I></P>
Specifies the identifier of the asynchronous request.  The Service Provider returns this value if the function completes asynchronously.</P>
    HDRVCALL    <I>hdCall</I></P>
Specifies the Service Provider's opaque handle to the call to be retrieved.</P>
<B>Return Value    </B>Returns zero if the function is successful, the (positive) <I>dwRequestID</I> value if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P>
    LINEERR_INVALCALLHANDLE</P>
The specified call handle is invalid.</P>
    LINEERR_INVALCALLSTATE</P>
The call is not currently on hold.</P>
    LINEERR_OPERATIONUNAVAIL</P>
The specified operation is not available.</P>
    LINEERR_OPERATIONFAILED</P>
The specified operation failed for unspecified reason.</P>
<B>Call States</B>    <I>hdCall</I>    onHold</P>
</P>
<B>Comments    </B>This operation works only for calls on hard hold, i.e., call placed on hold using <B>TSPI_lineHold</B>.</P>
<B>See Also</B>    Functions:  <B>TSPI_lineHold</B></P>
<A NAME="PT63"></A>3.1.7.0  TSPI_lineUnpark</P>
<B>Syntax    </B>LONG<B> TSPI_lineUnpark</B>(<I>dwRequestID, hdLine</I>, <I>dwAddressID, htCall, lphdCall, lpszDestAddress</I>)</P>
This function retrieves the call parked at the specified address and returns a call handle for it.</P>
<B>Parameters    </B>DRV_REQUESTID    <I>dwRequestID</I></P>
Specifies the identifier of the asynchronous request.  The Service Provider returns this value if the function completes asynchronously.</P>
    HDRVLINE    <I>hdLine</I></P>
Specifies the Service Provider's opaque handle to the line on which a call is to be unparked.</P>
<B>    </B>DWORD    <I>dwAddressID</I></P>
Specifies the address on <I>hdLine</I> at which the unpark is to be originated.</P>
<B> </B>    HTAPICALL    <I>htCall</I></P>
Specifies the TAPI DLL's opaque handle to the new unparked call.  The Service Provider must save this and use it in all subsequent calls to the <B>LINEEVENT</B> procedure reporting events on the call.</P>
<B>    </B>LPHDRVCALL    <I>lphdCall</I></P>
Specifies a far pointer to an opaque <B>HDRVCALL</B> representing the Service Provider's identifier for the new unparked call.  The Service Provider must fill this location with its opaque handle for the call before this procedure returns, whether it decides to execute the request sychronously or asynchronously.  This handle is invalid if the function results in an error (either synchronously or asynchronously).</P>
<B>    </B>LPCSTR    <B>const</B> <I>lpszDestAddress</I></P>
Specifies a far pointer to a NULL terminated character buffer that contains the address where the call is parked. The address is in standard dialable address format.</P>
<B>Return Value    </B>Returns zero if the function is successful, the (positive) <I>dwRequestID</I> value if the function will be completed asynchronously, or a negative error number if an error has occurred. Possible error returns are:</P>
    LINEERR_INVALLINEHANDLE</P>
The specified call handle is invalid.</P>
    LINEERR_INVALPOINTER</P>
One or more of the specified pointer parameters are invalid.</P>
    LINEERR_INVALADDRESSID</P>
The specified address ID is invalid.</P>
    LINEERR_INVALADDRESS</P>
The specified address is invalid.</P>
    LINEERR_OPERATIONUNAVAIL</P>
The specified operation is not available.</P>
    LINEERR_OPERATIONFAILED</P>
The specified operation failed for unspecified reason.</P>
<B>Call States</B>    Not applicable</P>
</P>
<B>Comments    </B>None.</P>
<B>Comparison    </B>This function differs from the TAPI in that it follows the TSPI model for beginning the lifetime of a call; the TAPI DLL and Service Provider exchange opaque handles representing the call with one another.  In addition, the Service  Provider is permitted to do callbacks regarding the new call before it returns from this procedure.</P>
<B>See Also</B>    Functions:  <B>TSPI_lineHold</B></P>
</BODY></HTML>

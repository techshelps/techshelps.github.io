<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>2.4.1.3  Addresses</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

</OBJECT></FORM>
<H3>2.4.1.3  Addresses</H3>Each line device is assigned one or more <I>addresses</I>. Think of an address as corresponding to a telephone directory number assigned to the line device. The SPI presents a model where address assignments to line devices are static and will not change until reconfigured at the switch or network. <B>TSPI_lineGetDevCaps</B> for a line device returns the number of addresses assigned to the line. Individual addresses are assigned <I>Address ID</I>s, which are numbers in the range zero to the number of addresses on the line minus one. An address ID is only meaningful in the context of a given line device, so an address is named as the tuple consisting of line and address ID. As described later, a line can be named by its device ID or handle. </P>
The network or switch can configure address-to-line assignments in several ways. Usually, one of the addresses assigned to a line will be that line's primary address. A line's primary address is able to uniquely identify the line device, although the address may also be assigned to other lines as a non-primary address. Address configurations recognized by the Telephony SPI include:</P>
<SPAN CLASS="list"><UL><LI>Private. The address is assigned to one line device only. An inbound call for this address is only offered at one line device.  
In contrast, a bridged address is assigned to more than one line device. Depending on the switch vendor different terminology may be used such as: multiple appearance directory number (MADN), bridged appearance, shared appearance. An incoming call on a bridged address will be offered on all lines associated with the address. Different variations arise from the associated behavior when using such a bridged address.  </P></LI><LI>Bridged-Exclusive. Connecting one of the bridged lines to a remote party will cause the address to appear "in use" to all other parties that are part of the bridge. </LI><LI>Bridged-New. Connecting one of the bridged lines to a remote party still allows the other lines to use the address. However, a new call appearance is allocated to the second line.</LI><LI>Bridged-Shared. If one line is connected to a remote party, other bridged lines that use the address will enter into a multi-party conference call on the existing call. </LI><LI>Monitored. The line provides an indication of the busy or idle status of the address, but the line cannot use the address for answering or making calls.
As is the case with line devices, the addresses assigned to a line device may have different capabilities. Switching features and authorization may be different for different addresses. An app must call <B>TSPI_lineGetAddressCaps</B> to determine the exact capabilities of each address.</P></LI></UL></SPAN>TSPI_lineGetAddressCaps</P>
Returns the telephony capabilities of an address as a data structure of type <B>LINEADDRESSCAPS</B>.</P>
The SPI's device query capability, status and event reporting mechanisms provide the TAPI DLL with the necessary information required to manage the different bridged address arrangements. For example, the TAPI DLL will be able to determine if a call has been answered by a bridged station by tracking the status changes and call state event changes on the address (see further). </P>
The TAPI DLL is notified about changes in the status of an address via the LINE_ADDRESSSTATE callback message. The TAPI DLL can control the address status items for which it wants to be notified via the function TSPI_lineSetStatusMessages. It can determine the complete status of an address device by calling TSPI_lineGetAddressStatus.</P>
TSPI_lineGetAddressStatus</P>
Returns current status of a specified address via a structure of type <B>LINEADDRESSSTATUS</B>.</P>
LINE_ADDRESSSTATE</P>
Message sent to the application to notify it about changes in the address status.</P>
Addresses on a line device are normally identified via their address ID. When making calls, the SPI allows alternate address selections for the originating address, such as its address in dialable format or even service provider-specific naming mechanisms (for example by using SPI extensions based on switch-assigned station IDs). The function TSPI_lineGetAddressID provides for the mapping of the alternate address format back to the address ID used by other operations in the API. </P>
TSPI_lineGetAddressID</P>
Retrieves the address ID of an address specified using an alternate format.</P></BODY></HTML>

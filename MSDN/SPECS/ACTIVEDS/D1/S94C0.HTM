<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>9.3.1    Behavior of Alias Objects</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
</OBJECT></FORM>
<H3>9.3.1    Behavior of Alias Objects</H3><H4><A NAME="sec0"></A>9.3.1.1    Binding to an Alias Object</H4>Alias objects are typically used to leave a "placeholder" in the namespace when an object has been moved.  The desired default behavior for an alias is to return the object it (the alias) points to when referenced.  Active Directory Alias objects support this usage in their binding behavior.  When an alias object is bound via GetObject or ADsGetObject,  the <I>aliased </I>object is returned unless the alias object is explicitly requested.  </P>
For example, given an alias object "MyAlias" that points to a print queue object "MyPrintQ":</P>
<P></P>
<P><pre><code>Dim ReturnedObject as IADs</P>
<P>set ReturnedOBject = GetObject("@NS!Container\MyAlias")</P>
<P></P></code></pre>
will return "MyPrintQ", and</P>
<P></P>
<P><pre><code>Dim ReturnedObject as IADs</P>
<P>set ReturnedOBject = GetObject("@NS!Container\MyAlias","alias")</P>
<P></code></pre></P>
will return the alias object "MyAlias". </P>
</P>
<H4><A NAME="sec1"></A>9.3.1.2    Deleting an Alias Object</H4>Deleting an Alias object deletes the Alias,  not the object it points to.</P>
<H4><A NAME="sec2"></A>9.3.1.3    Creating an Alias Object</H4>Creation of an alias in a container is no different than creating any other object.  The target of the alias is set by setting the AliasedObject property in the alias to the ADsPath of the target.</P>
<H4><A NAME="sec3"></A>9.3.1.4    Enumeration Behavior of Alias Objects</H4>Alias objects are <B>not</B> automatically dereferenced during enumeration.  An application can request Alias objects during enumeration by</P>
<P><UL><LI>enumerating all objects regardless of type</LI></UL></P>
<P><UL><LI>setting a filter that explicitly includes Alias  objects</LI></UL></P>
For example,  an application that wants to list all User objects in a container,  including aliases to user objects,  can set a filter value of "user" and "alias" and discard aliases that do not point to users during the enumeration.</P></BODY></HTML>

<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>2.4.1    Provider Implementation Issues</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
</OBJECT></FORM>
<H3>2.4.1    Provider Implementation Issues</H3><H4><A NAME="sec0"></A>2.4.1.1    Thread Safety</H4>Windows NT and Windows 95 support multiple threads of execution in a single process.  Active Directory providers may therefore be used in multi-threaded applications and must allow for this.</P>
The Component Object Model describes three different threading models.  COM programs indicate which model is in use when initializing COM via the CoInitialize(…) and CoInitializeEx(…) functions:</P>
<P>Single threading: the single-threaded model assumes a single thread of execution in a process,  further assuming that COM data structures in a process need no access serialization.</P>
<P>Apartment threading : a COM object is associated with a the thread that created it.  Calls to an object on another thread must be executed by the thread that created that object.  To accomplish this,  the source thread invokes a client proxy  which marshals the method call and delivers it to a server stub function in the destination thread via the Win32 message queue associated with the destination thread.</P>
<P>Free threading:   COM objects are assumed to be thread-safe,  Multiple threads are allowed access to any object in the process with no serialization imposed.</P>
Active Directory does not assume any particular threading model.  Provider writers should assume the Free threading model and manage access to their internal data structures accordingly.  Provider writers must guarantee the consistency of their internal data structures by protecting them from thread-unsafe (e.g. uncoordinated) update through the use of synchronization objects such as Critical Sections, semaphores, etc.</P>
Active Directory clients that use multi-threading must assume that two threads may access the same Active Directory object.  These applications should initialize COM for free threading (COINIT_MULTITHREADED) and provide their own access serialization for Active Directory objects that they instantiate using synchronization objects.</P>
<H4><A NAME="sec1"></A>2.4.1.2    Object Locking</H4>Active Directory does not impose or define an object locking scheme.  Providers for namespaces that support access serialization via locking can expose the underlying locking scheme via provider-specific extensions to Active Directory.</P></BODY></HTML>

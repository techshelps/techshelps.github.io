<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>8.6.1    IADsDomain</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
</OBJECT></FORM>
<H3>8.6.1    IADsDomain</H3><P>The IADsDomain interface is used to get and set the properties of a Domain object.  The interface definition is as follows:</P>
<P></P>
<P><pre><code>[ object, uuid(IID_IADsDomain), oleautomation, dual ]</P>
<P>interface IADsDomain: IADs</P>
<P>{</P>
<P>// Read-only porperties</P>
<P>[propget]</P>
<P>HRESULT IsWorkgroup( VARIANT_BOOL *retval)</P>
<P>// Read/write properties.</P>
<P>[propget]</P>
<P>HRESULT MinPasswordLength ([out, retval]long *plMinPasswordLength);</P>
<P>[propput]</P>
<P>HRESULT MinPasswordLength ([in]long lMinPasswordLength);</P>
<P>[propget]</P>
<P>HRESULT MinPasswordAge ([out, retval]long *plMinPasswordAge);</P>
<P>[propput]</P>
<P>HRESULT MinPasswordAge ([in]long lMinPasswordAge);</P>
<P>[propget]</P>
<P>HRESULT MaxPasswordAge ([out, retval]long *plMaxPasswordAge);</P>
<P>[propput]</P>
<P>HRESULT MaxPasswordAge ([in]long lMaxPasswordAge);</P>
<P>[propget]</P>
<P>HRESULT MaxBadPasswordsAllowed ([out, retval]long *plMaxBadPasswordsAllowed);</P>
<P>[propput]</P>
<P>HRESULT MaxBadPasswordsAllowed ([in]long lMaxBadPasswordsAllowed);</P>
<P>[propget]</P>
<P>HRESULT PasswordHistoryLength ([out, retval]long *plPasswordHistoryLength);</P>
<P>[propput]</P>
<P>HRESULT PasswordHistoryLength ([in]long lPasswordHistoryLength);</P>
<P>[propget]</P>
<P>HRESULT PasswordAttributes ([out, retval]long *plPasswordAttributes);</P>
<P>[propput]</P>
<P>HRESULT PasswordAttributes ([in]long lPasswordAttributes);</P>
<P>[propget]</P>
<P>HRESULT AutoUnlockInterval ([out, retval]long *plAutoUnlockInterval);</P>
<P>[propput]</P>
<P>HRESULT AutoUnlockInterval ([in]long lAutoUnlockInterval);</P>
<P>[propget]</P>
<P>HRESULT LockoutObservationInterval ([out, retval]long</P>
<P>*plLockoutObservationInterval);</P>
<P>[propput]</P>
<P>HRESULT LockoutObservationInterval ([in]long</P>
<P>lLockoutObservationInterval);</P>
<P></P>
<P></P>
<P>};</code></pre></P>
<P></P>

<TABLE COLS="3" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="149pt" VALIGN="TOP"><COL WIDTH="54pt" VALIGN="TOP"><COL WIDTH="234pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Property</B></P></TD><TD VALIGN="TOP"><P><B>Syntax</B></P></TD><TD VALIGN="TOP"><P><B>Description</B></P></TD></TR><TR><TD VALIGN="TOP"><P>IsWorkgroup</P></TD><TD VALIGN="TOP"><P>Boolean</P></TD><TD VALIGN="TOP"><P>TRUE if the "domain" is actually a workstation that is a member of a workgroup</P></TD></TR><TR><TD VALIGN="TOP"><P>MinPasswordLength</P></TD><TD VALIGN="TOP"><P>Integer</P></TD><TD VALIGN="TOP"><P>Gets and sets the minimum number of characters that must be typed in for a password. </P></TD></TR><TR><TD VALIGN="TOP"><P>MinPasswordAge</P></TD><TD VALIGN="TOP"><P>Interval</P></TD><TD VALIGN="TOP"><P>Gets and sets the minimum password age before allowing the password to be changed .</P></TD></TR><TR><TD VALIGN="TOP"><P>MaxPasswordAge</P></TD><TD VALIGN="TOP"><P>Interval</P></TD><TD VALIGN="TOP"><P>Gets and sets the age at which the password must be changed by the owner.</P></TD></TR><TR><TD VALIGN="TOP"><P>MaxBadPasswordsAllowed</P></TD><TD VALIGN="TOP"><P>Integer</P></TD><TD VALIGN="TOP"><P>Gets and sets the maximum number of bad password logins until the account becomes locked out.</P></TD></TR><TR><TD VALIGN="TOP"><P>PasswordHistoryLength</P></TD><TD VALIGN="TOP"><P>Integer</P></TD><TD VALIGN="TOP"><P>The number of previous passwords saved in the history list. The user cannot reuse a password that is in the history list.</P></TD></TR><TR><TD VALIGN="TOP"><P>PasswordAttributes</P></TD><TD VALIGN="TOP"><P>Integer</P></TD><TD VALIGN="TOP"><P>Gets and sets other restrictions on passwords. The following restrictions are currently defined:</P>
<P>#define    PASSWORD_ATTR_NONE        0x0000000<B>0</B></P>
<P>#define    PASSWORD_ATTR_MIXED_CASE    0x0000000<B>1</B></P>
<P>#define    PASSWORD_ATTR_COMPLEX    0x0000000<B>2</B></P>
<P>The last restriction requires that the password must include at least one punctuation mark or a non-printable character.</P></TD></TR><TR><TD VALIGN="TOP"><P>AutoUnlockInterval</P></TD><TD VALIGN="TOP"><P>Interval</P></TD><TD VALIGN="TOP"><P>Gets and sets the minimum time elapsed before account is automatically re-enabled.</P></TD></TR><TR><TD VALIGN="TOP"><P>LockoutObservationInterval</P></TD><TD VALIGN="TOP"><P>Interval</P></TD><TD VALIGN="TOP"><P>Gets and sets the time window during which the bad password count is monitored and accumulated to decide if the account needs to be locked out. For example, if the number of bad password attempts on an account exceed the threshold (Maximum Bad Passwords Allowed) during the specified time period (Lockout Observation Interval) the account will be locked out by setting the appropriate property in the Login Parameter property set.</P></TD></TR></TBODY></TABLE>
<BR></P></BODY></HTML>

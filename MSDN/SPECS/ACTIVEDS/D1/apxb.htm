<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>B. C/C++ Helper Functions</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">



<p>&nbsp;</p>

<H1>B. C/C++ Helper Functions</h1>

<p>The helper functions wrap code required to do common
operations. The helper functions will be included within the
ActiveDs.DLL that ship with the Active Directory Software
Developer Kit. The source code for the helper functions will not
be shipped. Documentation on how to call them will be included.</p>

<H2>B.1 ADsGetObject</h2>

<p>The ADsGetObject helper function is called by the C/C++ client
to bind to an Active Directory object. Just like Visual Basic's
internal GetObject() function, ADsGetObject takes as input a
display name. The display name is discussed within the overview
under object binding. A pointer to the requested interface is
returned. ADsGetObject calls MkParseDisplayName and then calls
the BindToObject method.</p>

<p>HRESULT</p>

<p>ADsGetObject(</p>

<p>LPWSTR *lpObjectPath</p>

<p>REFIID riid,</p>

<p>void ** ppObject</p>

<p>)</p>

<H2>B.2 ADsBuildEnumerator</h2>

<p>The ADsBuildEnumerator helper function encapsulates the code
required to create an enumerator object. It calls the _NewEnum
method in the IADsContainer interface to create an enumerator and
then calls the Query Interface method of IUnknown to get a
pointer to the IEnumVARIANT interface for that enumerator. The
enumeration object is the Automation mechanism to enumerate over
containers.</p>

<p>HRESULT</p>

<p>ADsBuildEnumerator(</p>

<p>IADsContainer *pADsContainer,</p>

<p>IEnumVARIANT * * ppEnumVariant</p>

<p>)</p>

<H2>B.3 ADsFreeEnumerator</h2>

<p>The ADsFreeEnumerator function frees an enumerator returned by
ADsBuildEnumerator.</p>

<p>HRESULT</p>

<p>ADsFreeEnumerator(</p>

<p>IEnumVARIANT *pEnumVariant</p>

<p>);</p>

<H2>B.4 ADsEnumerateNext</h2>

<p>The ADsEnumerateNext helper function returns populates a
VARIANT array with elements fetched from the provider enumerator.
cElements contains the count of elements requested;
pcElementsReturned receives the count of elements actually
returned, which can be smaller than the nunmber requested. </p>

<p>HRESULT</p>

<p>ADsEnumerateNext(</p>

<p>IEnumVARIANT *pEnumVariant,</p>

<p>ULONG cElements,</p>

<p>VARIANT FAR *pvar,</p>

<p>ULONG FAR *pcElementsFetched</p>

<p>);</p>

<H2>B.4 ADsBuildVarArrayStr</h2>

<p>The ADsBuildVarArrayStr function builds a VARIANT array from
an array of UNICODE strings. </p>

<p>HRESULT</p>

<p>ADsBuildVarArrayStr(</p>

<p>LPWSTR *lppPathNames,</p>

<p>DWORD dwPathNames,</p>

<p>VARIANT ** ppVar</p>

<p>);</p>

<H2>B.5 ADsBuildVarArrayInt</h2>

<p>The ADsBuildVarArrayInt function builds a VARIANT array from
an array of DWORDS.</p>

<p>ADsBuildVarArrayInt(</p>

<p>LPDWORD lpdwObjectTypes,</p>

<p>DWORD dwObjectTypes,</p>

<p>VARIANT** ppVar</p>

<p>); </p>
</body>
</html>

<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>5.3.1    Enumeration Behavior</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
</OBJECT></FORM>
<H3>5.3.1    Enumeration Behavior</H3>Active Directory providers can follow one of three models for caching collections during enumeration.  The caching model affects the behavior of Active Directory when an object in a collection is deleted from the underlying namespace "outside" of  Active Directory.</P>
<P><UL>1.  Collections are cached in advance. The collection of object instances is retrieved from the underlying namespace in its entirety when _NewEnum is called to create a new enumerator object.  If the source object for an Active Directory object instance in the retrieved collection is deleted from the underlying namespace the client does not become aware of the deletion until a GetInfo or SetInfo attempts to access the source instance.</UL></P>
<P><UL>2.  Collections are incrementally cached.  The collection is retrieved from the underlying namespace one object at a time when IEnumVARIANT::Next is called.  ::Reset will return to the beginning of the collection <I>in the cache </I>and ::Next will return cached objects until the end of the cache is reached, at which point new objects will be added from the underlying store. Once an Active Directory object instance is in the cache the client will not become aware of its deletion from the underlying namespace until a GetInfo or SetInfo attempts to access the source instance.</UL></P>
<P><UL>3.  Collections are not cached.  The collection is retrieved from the underlying namespace one object at a time when IEnumVARIANT::Next is called.  ::Reset will return to the beginning of the collection in the underlying store.  ::Next and ::Reset operations cannot retrieve deleted objects, since the objects are fetched on demand from the underlying namespace.  Only the "current" object is cached;  if the current object is deleted,  the client will not become aware of its deletion from the underlying namespace until a GetInfo or SetInfo attempts to access the source instance.   </UL></P>
Regardless of the caching model implemented by a given provider,  it is important to note that Active Directory enumeration returns Active Directory interfaces to the caller.  Active Directory applications should cache the returned interface pointers for any object(s) they intend to manipulate,  to avoid the overhead of obtaining a new interface pointer.  For example,  a Visual Basic program that enumerates a container and populates a listbox with names can cache the interface pointers associated with the names for later use.  This approach will provide greater performance than populating the listbox during enumeration and obtaining a new interface pointer when the user makes a selection.</P></BODY></HTML>

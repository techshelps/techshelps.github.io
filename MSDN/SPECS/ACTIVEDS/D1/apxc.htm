<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>C.1 The Binding Sequence</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">



<H1>C.1 The Binding Sequence</h1>

<p>When a client calls the Visual Basic function GetObject() or
the Active Directory helper function ADsGetObject(), the actual
binding process is as follows:</p>

<p>IBindCtx *pbc;</p>

<p>IMoniker *pmk;</p>

<p>ULONG chEaten;</p>

<p>IUnknown *punk;</p>

<p>IADs *pMyObject;</p>

<p>//</p>

<p>// Create a bind context.</p>

<p>//</p>

<p>CreateBindCtx(0, // reserved</p>

<p>&amp;pbc); // the bind context</p>

<p>//</p>

<p>// Call MkParseDisplayName.</p>

<p>//</p>

<p>MkParseDisplayName(pbc, // the bind context</p>

<p>szPath, // ADsPath, equivalent to a moniker Display Name</p>

<p>&amp;chEaten, // returns number of chars successfully parsed</p>

<p>&amp;pmk); // returns a pointer to a moniker</p>

<p>//</p>

<p>// The moniker returned by MkParseDisplayName points</p>

<p>// to a component object that corresponds to the </p>

<p>// directory service object named by the ADsPath.</p>

<p>//</p>

<p>pmk-&gt;BindToObject(pbc, // the moniker</p>

<p>NULL, // the moniker to the left, NULL</p>

<p>IID_IUnknown, // an interface on the object</p>

<p>(void**)&amp;punk); // returns a pointer to the object</p>

<p>//</p>

<p>// QueryInterface for the desired interface. For this</p>

<p>// example, it is IADs.</p>

<p>//</p>

<p>// Note: This step is not necessary if the desired</p>

<p>// interface is requested in the ::BindToObject call.</p>

<p>// However, it is shown here to demonstrate how Visual</p>

<p>// Basic separates the GetObject() call from the Set </p>

<p>// operator. In Visual Basic, the Set operator performs</p>

<p>// a QueryInterface.</p>

<p>//</p>

<p>punk-&gt;QueryInterface(IID_IADs, &amp;pMyObject);</p>

<p>//</p>

<p>// Release the bind context and the moniker.</p>

<p>//</p>

<p>pbc-&gt;Release();</p>

<p>pmk-&gt;Release();</p>

<p>//</p>

<p>// Return the pMyObject interface pointer to the client.</p>

<p>//</p>

<p>Details of CreateBindCtx(), MkParseDisplayName(), and the
IMoniker interface can be found in the Win32 SDK. Most of the
work happens in the MkParseDisplayName function. Briefly:</p>

<blockquote>
    <p>1. The MkParseDisplayName parses &lt;NamespacePROGID&gt;
    from the ADsPath string. Using the PROGID, it creates an
    instance of the Provider object named Namespace. The Provider
    object implements IParseDisplayName and is used only for
    binding Active Directory objects; user programs never
    explicitly instantiate the Provider object.</p>
</blockquote>

<blockquote>
    <p>2. MkParseDisplayName queries for and obtains an
    IParseDisplayName interface on the Provider object. It then
    calls ParseDisplayName(), passing the ADsPath string. The
    Namespace object is then responsible for resolving the path,
    creating the correct Active Directory object, wrapping it in
    a moniker, and returning the moniker to MkParseDisplayName.</p>
</blockquote>
</body>
</html>

<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>6.1.3    Schema Class Object</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
</OBJECT></FORM>
<H3>6.1.3    Schema Class Object</H3><P>The Schema Class object is used to define a class of objects that can be created in the namespace.  This object supports the mandatory interface IADs, as well as one COM interface, IADsClass.  A given Schema Class object contains lists of the property names it <I>must contain</I> in the MandatoryProperties list.  Optional poperties that the class <I>may </I>contain appear in the OptionalProperties list  Properties used to name this object appear in the NamingProperties list.  The IADs.Name property for a Schema Class object must be valid for use in filter and create operations in the containers that appear in the IADsClass.Containment array, if supported (see below).</P>
<P>Figure 5 illustrates how a Class object relates to other Class objects and Property objects, to create a definition of a class.  </P>
<P><img src="17218.gif"></P>
<P>Figure 7 - Definition of a Class</P>
<P>Schema Classes are identified in the schema by name. The CLSID property indicates which COM object implements the class.</P>
<H4><A NAME="sec0"></A>6.1.3.1    IADsClass</H4><P>The IADsClass interface is used to get and set the properties on a class object. The interface definition is as follows</P>
<P><pre><code>[ object, uuid(IID_IADsClass), oleautomation, dual ]</P>
<P>interface IADsClass: IADs</P>
<P>{</P>
<P>// Read-only Properties</P>
<P>[propget]</P>
<P>HRESULT PrimaryInterface ([out, retval]BSTR *pbstrGUID);</P>
<P></P>
<P>// Read/write properties.</P>
<P>[propget]</P>
<P>HRESULT CLSID ([out, retval]BSTR *pbstrCLSID);</P>
<P>[propput]</P>
<P>HRESULT CLSID ([in]BSTR bstrCLSID);</P>
<P>[propget]</P>
<P>HRESULT OID     ([out, retval]BSTR *pbstrOID);</P>
<P>[propput]</P>
<P>HRESULT OID     ([in]BSTR bstrOID);</P>
<P>[propget]</P>
<P>HRESULT Abstract([out, retval]boolean *pbAbstract);</P>
<P>[propput]</P>
<P>HRESULT Abstract([in]boolean bAbstract);</P>
<P>[propget]</P>
<P>HRESULT Auxiliary([out, retval]boolean *pbAuxilary);</P>
<P>[propput]</P>
<P>HRESULT Auxiliary([in]boolean bAuxiliary);</P>
<P>[propget]</P>
<P>HRESULT MandatoryProperties ([out, retval]VARIANT *pvarMandatory);</P>
<P>[propput]</P>
<P>HRESULT MandatoryProperties ([in]VARIANT varMandatory);</P>
<P>[propget]</P>
<P>HRESULT OptionalProperties ([out, retval]VARIANT *pvarOptionak);</P>
<P>[propput]</P>
<P>HRESULT OptionalProperties ([in]VARIANT varOptional);</P>
<P>[propget]</P>
<P>HRESULT NamingProperties ([out, retval]VARIANT *pvarNaming);</P>
<P>[propput]</P>
<P>HRESULT NamingProperties ([in]VARIANT varNaming);</P>
<P>[propget]</P>
<P>HRESULT DerivedFrom ([out, retval]VARIANT *pvDerivedFrom);</P>
<P>[propput]</P>
<P>HRESULT DerivedFrom ([in]VARIANT vDerivedFrom);</P>
<P>[propget]</P>
<P>HRESULT AuxDerivedFrom ([out, retval]VARIANT *pvAuxDerivedFrom);</P>
<P>[propput]</P>
<P>HRESULT AuxDerivedFrom ([in]VARIANT vAuxDerivedFrom);</P>
<P>[propget]</P>
<P>HRESULT PossibleSuperiors ([out, retval]VARIANT *pvSuperiors);</P>
<P>[propput]</P>
<P>HRESULT POssibleSuperiors ([in]VARIANT vSuperiors);</P>
<P>[propget]</P>
<P>HRESULT Containment ([out, retval]VARIANT *pvContainment);</P>
<P>[propput]</P>
<P>HRESULT Containment ([in]VARIANT vContainment);</P>
<P>[propget]</P>
<P>HRESULT Container ([out, retval]boolean *pbContainer);</P>
<P>[propput]</P>
<P>HRESULT Container ([in]boolean bContainer);</P>
<P>[propget]</P>
<P>HRESULT HelpFileName ([out, retval]BSTR *pbstrHelpFile);</P>
<P>[propput]</P>
<P>HRESULT HelpFileName ([in]BSTR bstrHelpFile);</P>
<P>[propget]</P>
<P>HRESULT HelpFileContext ([out, retval]long *plHelpContext);</P>
<P>[propput]</P>
<P>HRESULT HelpFileContext ([in]long lHelpContext);</P>
<P>// Methods</P>
<P>HRESULT Qualifiers([out, retval]IADsCollection **ppQualifiers)</P>
<P>};</code></pre></P>
<P></P>

<TABLE COLS="3" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="158pt" VALIGN="TOP"><COL WIDTH="283pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Method</B></P></TD><TD COLSPAN="2" VALIGN="TOP"><P>Description</P></TD></TR><TR><TD VALIGN="TOP"><P>CLSID</P></TD><TD COLSPAN="2" VALIGN="TOP"><P>Gets and sets the CLSID of the code implementing the Active Directory object for this class.</P></TD></TR><TR><TD VALIGN="TOP"><P>OID</P></TD><TD COLSPAN="2" VALIGN="TOP"><P>Gets and sets the namespace-specific Object Identifier defining this class.  This is provided to allow schema extension via Active Directory in namespaces that require namespace-specific OIDs for classes.</P></TD></TR><TR><TD VALIGN="TOP"><P>Abstract</P></TD><TD COLSPAN="2" VALIGN="TOP"><P>Gets and sets a Boolean value indicating whether this class is Abstract or non-abstract.  When TRUE this class is an Abstract class and cannot be directly instantiated in the DS.  Abstract classes can only be used as superclasses.</P></TD></TR><TR><TD VALIGN="TOP"><P>Auxiliary</P></TD><TD COLSPAN="2" VALIGN="TOP"><P>Gets and sets a Boolean value indicating whether this class is Auxiliary.  When TRUE this class is an Auxiliary class and cannot be directly instantiated in the DS.  Auxiliary classes can only be used as superclasses of other Auxiliary classes or as a source of additional properties on structural classes..</P></TD></TR><TR><TD VALIGN="TOP"><P>MandatoryProperties</P></TD><TD COLSPAN="2" VALIGN="TOP"><P>Gets and sets an array of BSTRs listing the properties that must be set for this class to be written to storage</P></TD></TR><TR><TD VALIGN="TOP"><P>OptionalProperties</P></TD><TD COLSPAN="2" VALIGN="TOP"><P>Gets and sets an array of BSTRs listing the additional properties that may be set for this class.</P></TD></TR><TR><TD VALIGN="TOP"><P>NamingProperties</P></TD><TD COLSPAN="2" VALIGN="TOP"><P>Gets and sets and array of BSTRs listing the properties that provide the Relative Distinguished Name (RDN) for this property.</P></TD></TR><TR><TD VALIGN="TOP"><P>PrimaryInterface</P></TD><TD COLSPAN="2" VALIGN="TOP"><P>Gets and sets the primary interface identifier for objects of this class.  This is the IID for the interface defining the class,  for example the "user" class is defined by supporting IADsUser;  the Primary interface is identified by the GUID represented by IID_IADsUser.</P>
<P>Must be in the standard string format of a GUID as defined by COM.  This GUID is the value that will appear in the IADs.GUID property in instances of this class. </P>
<P>Identifying a schema class by IID of the class code's primary interface enables the use of QueryInterface at run time to determine whether an object is of the desired class.  </P>
<P>For objects that directly support properties this interface must be the interface that supports the property get/put VTABLE,  if one is provided.  Objects that do not support a specific dual interface for property get and put must return IID_IADs in this property.</P>
<P>See below.</P></TD></TR><TR><TD VALIGN="TOP"><P>DerivedFrom</P></TD><TD COLSPAN="2" VALIGN="TOP"><P>Gets an array of ADsPath strings that indicate the immediate superclasses from which this class was derived.</P></TD></TR><TR><TD VALIGN="TOP"><P>AuxDerivedFrom</P></TD><TD COLSPAN="2" VALIGN="TOP"><P>Gets an array of ADsPath strings that indicate the Auxiliary classes contributing  to this class.</P></TD></TR><TR><TD VALIGN="TOP"><P>PossibleSuperiors</P></TD><TD COLSPAN="2" VALIGN="TOP"><P>Gets an array of ADsPath strings that indicate classes that can contain instances of this class..</P></TD></TR><TR><TD VALIGN="TOP"><P>Containment</P></TD><TD COLSPAN="2" VALIGN="TOP"><P>Gets and sets the object types that can be contained within this container. </P>
<P>Object creation is done as a container operation e.g. the container decides whether or not an object can be created within it</P>
<P></P></TD></TR><TR><TD VALIGN="TOP"><P>Container</P></TD><TD COLSPAN="2" VALIGN="TOP"><P>Gets and sets the property that determines if this class is a DS container.  </P></TD></TR><TR><TD VALIGN="TOP"><P>HelpFileName</P></TD><TD COLSPAN="2" VALIGN="TOP"><P><B>OPTIONAL. </B>Gets and sets the name of a help file (no path) that contains further information about objects of this class.   Providers that do not implement this property must return E_ADS_PROPERTY_NOT_SUPPORTED when this property is referenced. </P></TD></TR><TR><TD VALIGN="TOP"><P>HelpFileContext</P></TD><TD COLSPAN="2" VALIGN="TOP"><P><B>OPTIONAL.</B> Gets and sets the context ID inside HelpFileName where specific information on this class can be found. .   Providers that do not implement this property must return E_ADS_PROPERTY_NOT_SUPPORTED when this property is referenced.</P></TD></TR><TR><TD VALIGN="TOP"><P>Qualifiers</P></TD><TD VALIGN="TOP"><P><B>OPTIONAL</B> method returning a collection of Active Directory objects describing additional qualifiers of this property.  Qualifier objects are provider specific.</P>
<P>Providers that do not implement the Qualifiers collection must return E_NOTIMPL when the Qualifiers method is called.</P></TD></TR></TBODY></TABLE>
<BR></P><H4><A NAME="sec1"></A>6.1.3.2    Primary Interface</H4>All Active Directory objects are identified by a "Primary Interface".  This is the IID of the object specific interface supported by the object's implementation,  This is the interface that supports the VTABLE methods for getting and setting the property values.   PrimaryInterface also allows a client program to determine at run time whether an interface pointer returned by an Active Directory operation (enumeration for example) is of the desired class by calling QueryInterface.  For example, a client has an interface pointer returned by enumeration.  To determine if the returned interface is that of a user object,  the client QI's for IID_IADsUser.   If the client does not know what interface to query for,  the PrimaryInterface field in the Schema Class for that object can be used.   </P>
When a provider does not know what interface should be returned as the primary interface,  IID_IADs should be returned,  since all the IADs interface provides name-bound access to all properties of an object through IDispatch and through the ::Get and ::Put methods.</P></BODY></HTML>

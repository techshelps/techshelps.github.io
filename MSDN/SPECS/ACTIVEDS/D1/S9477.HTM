<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>4.1.1    ADsPath</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
</OBJECT></FORM>
<H3>4.1.1    ADsPath</H3><P>Active Directory defines a naming convention that can uniquely identify an Active Directory object in a heterogeneous environment.  These names are called ADsPath strings.  ADsPath strings are COM display names.  Two formats are supported:  URL format and COM format.   The preferred format is URL format<B>. Providers must support both formats</B>. </P>
<P>The value of &lt;NamespacesId&gt; corresponds to the PROGID of the namespaces container object.  For Active Directory Version 1.1, the PROGID of the namespaces container is ADS.  Specifying "ADS:" or "@ADS!" identifies the target component as the namespaces container.</P>
<P>Specifying "&lt;NamespaceId&gt;://"  or "@&lt;NamespaceId&gt;!//" identifies the target component as the namespace container object of name &lt;NamespaceId&gt;.  The value of &lt;NamespaceId&gt; corresponds to a PROGID of an installed Active Directory provider.  Available namespace objects can be enumerated from the namespaces container.</P>
<P>Specifying  "&lt;NamespaceId&gt;://&lt;ProviderSpecificPath&gt;" or "@&lt;NamespaceId&gt;!//&lt;ProviderSpecificPath&gt;" identifies the target component as an Active Directory object in the namespace indicated by &lt;NamespaceId&gt;.  The &lt;ProviderSpecificPath&gt; is a string value that must uniquely identify a directory service object in the given namespace.  Each provider is responsible for determining the semantics of this string.  A few example paths are:</P>

<TABLE COLS="2" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="153pt" VALIGN="TOP"><COL WIDTH="288pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Provider Specific Path</B></P></TD><TD VALIGN="TOP"><P>Remarks</P></TD></TR><TR><TD VALIGN="TOP"><P>"MSFT/Users/John"</P></TD><TD VALIGN="TOP"><P>Identifies a user object in a file-system like path MSFT\Users.</P></TD></TR><TR><TD VALIGN="TOP"><P>"CN=John.OU=Users.O=MSFT"</P></TD><TD VALIGN="TOP"><P>Identifies a user object named John in a organizational unit named Users, in an organization named MSFT.</P></TD></TR><TR><TD VALIGN="TOP"><P>"MSFT/Users/John!User"</P></TD><TD VALIGN="TOP"><P>Identifies an object in MSFT\Users.  The !User suffix indicates that the object is of class user.  A class suffix is necessary in namespaces that allow two objects of the same name in one container.</P></TD></TR></TBODY></TABLE>
<BR></P><H4><A NAME="sec0"></A>4.1.1.1    URL Format </H4><P>&lt;ADsPath&gt;::=&lt;NamespacesId&gt;"://"</P>
<P>|&lt;NamespaceId&gt;"://"</P>
<P>    |&lt;NamespaceId&gt;"://"&lt;ProviderSpecificPath&gt;</P>
<P></P>
<P>The recommended format for the &lt;ProviderSpecificPath &gt; is string path elements delimited by forward slash characters ("/"), for example "WinNT://root_domain/machinename/JamesSmith".</P>
<H4><A NAME="sec1"></A>4.1.1.2    COM Format</H4><P>The COM format is supported for compatibility with the original COM format for display names,  in which the leading "@" and trailing "!" delimit the PROGID part of the name.  </P>
<P></P>
<P>&lt;ADsPath&gt;::="@"&lt;NamespacesId&gt;"!//"</P>
<P>|"@"&lt;NamespaceId&gt;"!//"</P>
<P>    |"@"&lt;NamespaceId&gt;"!//"&lt;ProviderSpecificPath&gt;</P>
<P></P>
<H4><A NAME="sec2"></A>4.1.1.3    Format of COM ProgIds</H4><P><B>COM ProgId's</B><B> are CASE SENSITIVE.  "WinNT" is different than "winnt".  When naming the provider in the Active Directory Path,  the case of the provided ProgID must match the value registered in the registry EXACTLY.</B></P>
<P>The format of an ADsPath string is similar to that of an COM moniker display name.  In the same way that binding to an COM moniker returns the interface pointer on an object, binding to an ADsPath string returns an interface pointer on an Active Directory object.</P>
<P>Note that all Active Directory objects have 3 properties relating to their Active Directory path:</P>
<P>Parent - this is the Active Directory Path of the objects <B>parent</B>.   The parent can always be retrieved using this string.</P>
<P>ADsPath - this is the Active Directory Path to <B>this object</B>.  This object can always be retrieved using this path.</P>
<P>Name - this is the <B>leaf name</B> of <B>this object</B>.  This is the name that distinguishes this object from its siblings.</P>
<P>Note that there is <B>no implied ability </B>in Active Directory to form the Active Directory Path of a given object from its Parent and Name properties.  While this operation might work for some Active Directory providers,  this is purely a side effect of a specific implementation and is not guaranteed to work for other implementations.  Users are advised to avoid using Parent and Name to form an Active Directory path.  The ADsPath property of an object is guaranteed to be valid,  and this is what should be used.</P></BODY></HTML>

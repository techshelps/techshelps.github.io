<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>2.3    Active Directory Properties</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
</OBJECT></FORM>
<H2>2.3    Active Directory Properties</H2>Active Directory defines a standard set of objects,  properties and methods that provide a consistent view of common DS properties and operations which is independent of the underlying namespace.  Active Directory exposes these standard properties and methods through standard COM Interfaces. The Active Directory Standard Interfaces provide:</P>
<P><UL><LI>a logical grouping of properties and the methods that act on those properties</LI></UL></P>
<P><UL><LI>a mapping mechanism for exposing disparate namespaces in a consistent way</LI></UL></P>
<P><UL><LI>separation of DS properties and methods that act on those properties (for example setting a password) from methods that act on physical devices (for example pausing a printer).</LI></UL></P>
Providers may expose additional objects and properties not defined by Active Directory.  Properties for these objects can be exposed directly on the objects, or via  additional COM interfaces. </P>
Active Directory provides three means for accessing properties:</P>
<P><UL>1.  Early-bound (VTABLE) access via explicit property get_ and put_ methods;</UL></P>
<P><UL>2.  Late-bound (Dispatch) access via IDispatch</UL></P>
<P><UL>3.  Dynamic name-bound access via IADs::Get() and ::GetEx() and IADs::Put() and ::PutEx() </UL></P>
Approach 2, late-bound access and Approach 3,  Dynamic name-bound access allow the development of completely portable programs.   A client program can browse the schema,  discover a property,  and get or put that property by passing the property name to IDispatch::GetIdsOfNames (for C or C++)  or to IADs::Get or ::Put (from any language).  This will always work because the name returned from the schema is guaranteed to be usable in  a ::Get or ::Put operation (subject to access checking by the underlying namespace). </P>
<P></P>
<P><pre><code>Examples</P>
<P></P>
<P>Example 1:  Retrieve a property directly from an object </P>
<P></P>
<P>Dim MyUser as IADsUser</P>
<P>Dim MyName as String</P>
<P></P>
<P>set MyUser = GetObject("NDS://MyOrg/SomeOU/JamesSmith")</P>
<P>MyName = MyUser.Fullname</P>
<P></P>
<P></P>
<P>Example 2: Retrieve a property by name from an object </P>
<P></P>
<P>Dim MyUser as IADsUser</P>
<P>Dim MyName as String</P>
<P></P>
<P>set MyUser = GetObject("NDS://MyOrg/SomeOU/JamesSmith")</P>
<P>MyName = MyUser.Get("Fullname")</code></pre></P></BODY></HTML>

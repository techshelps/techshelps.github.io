<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>12.    Glossary</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
</OBJECT></FORM>
<H1>12.    Glossary</H1></P>
<P><B>Automation</B></P>
<P>A way to manipulate objects within a scripting environment. Methods within an Automation environment are typically accessed through the IDispatch interface. Newer controllers such as Visual Basic 4.0 do not require IDispatch, but can query for any interface as done with standard COM programs.  </P>
<P><B>Active Directory</B></P>
<P>A set of specifications of COM objects and interfaces. Administrators and ISVs can use the Active Directory objects to perform common administrative operations, such as adding new users or managing a print queue.</P>
<P><B>class</B></P>
<P>A template for properties, as well as code to define behavior. Depending on the context, "class" can take on several meanings:</P>
<P><UL><LI>Schema Class: within directory services, object classes can be viewed as the templates for storing information in the Directory. These templates are stored within a directory's schema. All objects which can be published within a directory service must belong to an object class.</LI></UL></P>
<P><UL><LI>In object-oriented programming, a class is a set of objects whose behavior is defined by the same set of code.  They share the same implementation.</LI></UL></P>
<P><UL><LI>A COM class is not necessarily the same as a class in an object-oriented language. A COM class can be identified by a CLSID, though for most COM operations, it is not necessary to know an object's class.</LI></UL></P>
<P><B>collection</B></P>
<P>A group of objects that can be indexed numerically like an array or by name. Collections are described in terms of Automation. Collections are used mostly to support enumeration through an Active Directory container. The methods that are implemented by Active Directory containers to support collections include  get_Count, get_Item, _NewEnum, get_Filter, and put_Filter. Collections work well with Automation controllers such as Visual Basic which provide special constructs like the For Each…Next construct for collection enumeration. The number of items within a collection can be retrieved by calling the get_Count method. A specific object within a collection can be retrieved by calling the get_Item method. Filtering for specific Active Directory object types can be achieved by setting Filter via the put_Filter method. Enumeration occurs by a controller calling the _NewEnum method. The _NewEnum method creates an enumerator object that supports the IEnumVariant interface. When the enumerator's IEnumVariant::Next method is called the next object in the collection is returned.</P>
<P><B>Component Object Model (COM)</B></P>
<P>The object-oriented programming model that defines how objects interact within a single application or between applications. In COM, clients have access to an object through a pointer to an interface on the object.  See also interface.</P>
<P><B>component</B></P>
<P>An object that conforms to the component object model (COM). Clients deal with a component object only through a pointer to an interface (a related set of functions called methods). With the pointer, clients can call the methods that perform operations or manipulate the data associated with the object. Component objects are instances of an object definition, which specifies an implementation of the interfaces on the object.</P>
<P>In Active Directory, a component is the main object for accessing a set of related COM objects. The components in Active Directory are the top-level objects that can be instantiated and used to access dependent objects.</P>
<P><B>container</B></P>
<P>Any Active Directory object that supports one or more of the methods of the IADsContainer interface.  The IADsContainer interface includes methods that support the following operations:</P>
<P><B><UL><LI>Object life cycle operations. </B>Since container objects contain other directory service objects, container objects support object manipulation methods such as, create, delete, move, and copy.</LI></UL></P>
<P><B><UL><LI>Object enumeration. </B>All container objects can enumerate their subordinates in a manner consistent with the Automation concept of collections. </LI></UL></P>
<P><B>directory service</B></P>
<P>A logical database of information about a set of objects in the real world.</P>
<P><B>DS</B></P>
<P>Directory service.</P>
<P><B>enumerator</B></P>
<P>An object that supports the IEnumVARIANT interface, which provides a Next method to enumerate through a collection.</P>
<P><B>IDL</B></P>
<P>Interface Description Language. An IDL file contains the component definitions in much the same way a directory's schema database contains object class definitions. The IDL file compiles to a type library, which is a collection of definitions for any number of components. The keywords and syntax of the IDL file allow descriptions of interfaces and objects.</P>
<P><B>in-process DLL</B></P>
<P>An object server or application implemented as a DLL that runs in the process space of the application.</P>
<P><B>interface</B></P>
<P>A group of related functions that provide access to COM objects. The set of interfaces define a contract that allow objects to interact according to the Component Object Model (COM). </P>
<P><B>method</B></P>
<P>A function that provides a needed operation for an object. Related methods are organized into interfaces.</P>
<P><B>Namespace</B></P>
<P>A type of directory service.</P>
<P><B>NDS</B></P>
<P>NetWare Directory Services.</P>
<P><B>object</B></P>
<P>An instance of an entity that embodies both specific data and the functions that manipulate it. The only way to access the data is through interfaces. In COM, the operations on the data are methods grouped into an interface.</P>
<P>Specifically, in object-oriented programming, an object is an entity that has state, behavior and identity. An object's state consists of its attributes and the attributes' current values. An object's behavior consists of the operations that can be performed on it and the accompanying state changes. An object's identity is what you use to distinguish it from other objects.</P>
<P>In contrast, COM objects' behavior is defined by the interfaces it supports. A COM object's state is not explicitly specified, but is implied by its interfaces. A COM object's identity is defined by the ability to use <B>IUnknown::QueryInterface</B> to move between interfaces.</P>
<P>A COM object follows a specific model in which clients (those using an object's services) gain access to the object's data only through a pointer to an interface consisting of a set of methods (related functions). The client can then call these methods to perform desired operations. There is no direct access to an object's data.</P>
<P>A COM object differs from a C++ object in that C++ objects are restricted to live within the same application and written in the same language.  COM objects encapsulate object capabilities behind interfaces and provide local/remote transparency for those interfaces.</P>
<P><B>property</B></P>
<P>A value that can be read or written. Properties are associated with an interface on an object. Mapping property reads to get_&lt;<I>property name</I>&gt; and property writes to put_&lt;<I>propertyname</I>&gt; methods within an interface.</P>
<P><B>provider</B></P>
<P>A vendor who supplies an implementation of the Active Directory objects for a particular namespace.</P>
<P><B>sub-object</B></P>
<P>A COM object within an Active Directory component that cannot be instantiated or accessed independently from the component object. Dependent objects are instantiated and accessed through methods in the interface of the component object.</P>
<P><B>trustee</B></P>
<P>A user with access rights to an object.</P></BODY></HTML>

<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Motivation for Architecture</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

</OBJECT></FORM>
<H2>Motivation for Architecture</H2>  </P>
Clearly, multi-processor systems have the potential to be more powerful than single processor systems, and thus to support larger business and technical applications.  They can offer good performance with freedom from bottlenecks, good scalability and expandibility, enhanced availability, and compatibility with existing software.  However, actually realizing these advantages requires a proper implementation.</P>
First, MP machines must be closely coupled to be effective in the current market environment.  Closely coupled machines can employ well understood and efficient solutions to sharing and synchronization problems, need not suffer from long memory access latencies, and are well understood.  Additionally, they support existing uniprocessor software.  In contrast, loosely coupled machines have not yet reached an adequate level of technical maturity, or compatibility, to be commercially practical in the mainstream business market.</P>
Second, practical MP machines must be homogenous and symmetric.  Such machines need have only one copy of any code (including the OS) in memory no matter how many processors are running it, can dispatch any thread to any processor, and evenly distribute work among available resources.  This allows them to effectively apply MP power to the broadest possible range of workloads.  Such machines have fewer unique critical parts, and are therefore more robust (and thus likely to remain useable after failure of a component).</P>
By comparison, heterogeneous or even merely asymmetric machines suffer from bottlenecks, more costly OS code, and vulnerability to failure of a single part.  In summary, homogenous, symmetric, closely coupled, systems offer the best load balancing, scaling, availability, and compatibility, making them most competitive in the market.  Windows NT is targeted toward these machines.</P>
 </P></BODY></HTML>

<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Enhancing support with double buffering</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

</OBJECT></FORM>
<H2>Enhancing support with double buffering</H2>  </P>
Some DCI clients, such as 3-D graphics packages or animation packages, need to build an image as sequence of objects before the final image is displayed.  Classic double buffering is defined by having a system buffer for a graphics application to write data to as needed, usually by placing objects in their proper z-order.  Once the complete image is built, this data can be transferred to the screen as one operation.  This is accomplished with DCI through the use of an offscreen surface.</P>
A DCI client creates a nonvisible offscreen surface.  Graphics objects are then written to this surface as required.  Once all access to the surface is finished, the DCI client calls the <B>Draw</B> callback to have the DCI provider copy this data to the screen.</P>
 </P></BODY></HTML>

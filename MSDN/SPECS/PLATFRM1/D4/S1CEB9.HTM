<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>2.2. Plug and Play Card Configuration Sequence</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

</OBJECT></FORM>
<H3>2.2. Plug and Play Card Configuration Sequence</H3>  </P>
The major steps of the auto-configuration process are as follows:</P>
<SPAN CLASS="list"><UL><LI>Put all Plug and Play ISA cards in configuration mode </LI><LI>Isolate one Plug and Play ISA card at a time </LI><LI>Assign a handle and read the card's resource data structure </LI><LI>After the resource requirements and capabilities are determined for all cards, use the handle to assign conflict free resources to each card </LI><LI>Activate all Plug and Play ISA cards and remove them from configuration mode</LI></UL></SPAN>The Plug and Play software identifies and configures devices using a set of commands defined in this specification.  The commands are executed using three, 8-bit I/O ports.  16-bit accesses (assertion of IOCS16#) to the configuration ports are not supported.  A sequence of data writes to one of the ports is used as the key to enable the Plug and Play logic on all cards in the system.  This sequence, referred to as the initiation key, is described in the next section.  </P>
All Plug and Play cards respond to the same I/O port addresses so the Plug and Play software needs an isolation mechanism to address one particular card at a time.  The isolation protocol uses a unique number on each card to isolate one Plug and Play card at a time.  After isolation, the Plug and Play software assigns each card a handle, which is used to select that unique Plug and Play card.  The use of the handle eliminates the need to use the more elaborate and time consuming isolation protocol to select a unique card.  </P>
Each card supports a readable resource data structure that describes the resources supported and those requested by the functions on that card.  The structure supports the concept of multiple functions per ISA card.  Each function is defined as a logical device.  Plug and Play resource information is provided for each logical device and each logical device is independently configured through the Plug and Play standard registers.</P>
Following isolation, the Plug and Play software reads the resource data structure on each card.  When all resource capabilities and demands are known, a process of resource arbitration is invoked to determine resource allocation to each ISA card.</P>
The configuration of  ISA cards is done using the command registers specified for each resource type.  It should be noted that some ISA functions may not be re-configurable.  In these cases, the resources requested will be equivalent to the resources supported.  However, the resource data structure informs the arbiter that it cannot assign these resources to other Plug and Play cards in the system.</P>
After the assignment of resources, an I/O conflict detection mechanism may be invoked.  This mechanism provides a means to insure that I/O resources assigned are not in conflict with standard ISA cards.  </P>
The command set also supports the ability to activate or deactivate the function(s) on the card.</P>
After configuration is complete, Plug and Play cards are removed from configuration mode.  To re-enable configuration mode, the initiation key needs to be re-issued.  This prevents accidental erasure of the configuration information.</P>
 </P></BODY></HTML>

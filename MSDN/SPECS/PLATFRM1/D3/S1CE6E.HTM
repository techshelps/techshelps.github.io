<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Appendix B: Device Driver Initialization Model</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

</OBJECT></FORM>
<H2>Appendix B: Device Driver Initialization Model</H2>  </P>
<I>Please Note: The Device Driver Initialization Model (DDIM) is provided as an extension of the current option ROM model.  Current bus devices cannot be guaranteed that the systems in which they are installed will support DDIM.  Therefore, current bus device Option ROMs (ISA, EISA, MCA, PCMCIA) must support the standard initialization model, and may optionally support the DDIM.  The Option ROM may determine if it is being initialized using a DDIM by attempting to write to, and read back from his data space.  If the Option ROM can successfully write to its data space, then it should support a DDIM initialization.  Otherwise, it must perform a standard initialization.</I></P>
<I>As of this writing, the PCI architecture is the only architecture wherein Option ROMs are guaranteed support for DDIM.</I></P>
In an effort to reduce the amount of UMB (Upper Memory Block) space consumed by add-in Option ROMs, and to more efficiently use the available UMB space, Plug and Play Option ROMs should support the Device Driver Initialization Model (DDIM).</P>
Under this model, all Option ROMs installed in a Plug and Play system which indicate that they support DDIM will be copied into RAM by the System BIOS.  The System BIOS will then execute a FAR CALL into the device's initialization vector.</P>
Devices which support DDIM may then initialize themselves, update their RAM image with static Data (if necessary), and then discard the initialization code, by updating the length byte at offset 3h and recalculating their checksum.  The System BIOS will then initialize the next DDIM ROM by copying it to RAM on the next 2 KB boundary following the end of the most recently initialized DDIM ROM (or in the next available UMB which is large enough to contain both the Runtime and Initialization code of the DDIM ROM).</P>
Once all DDIM Option ROMs have been initialized, the System BIOS will Write Protect the RAM images and proceed with the boot process.</P>
<B>Flow:</B></P>
System BIOS copies the DDIM Option ROM Copy to RAM</P>
System BIOS executes a FAR CALL to Initialization Vector</P>
Option ROM initializes the device</P>
Option ROM updates any static data structures</P>
Option ROM updates the ROM Length and Check sum </P>
Option ROM returns to the System BIOS with Return Status</P>
System BIOS Write Protects RAM image of ROM.</P>
<B>Advantages:</B></P>
<SPAN CLASS="list"><UL><LI>Provides more efficient use of Upper Memory Blocks.  Initialization code may be discarded.</LI><LI>Provides a seamless mechanism whereby Option ROMs may be copied to RAM</LI><LI>Provides Option ROMs with a means of storing Static Data Structures built at boot time.</LI><LI>Allows board vendors to use lower performance ROM devices (on buses that are guaranteed to support this architecture - PCI).</LI></UL></SPAN> </P></BODY></HTML>

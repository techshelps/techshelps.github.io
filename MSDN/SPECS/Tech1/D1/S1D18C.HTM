<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DllGetClassObject</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

</OBJECT></FORM>
<H3>DllGetClassObject</H3>  </P>
<B>HRESULT DllGetClassObject(clsid, iid, ppv)</B></P>
This is not a function in the COM Library itself; rather, it is a function that is exported from .DLL servers.</P>
In the case that a call to the COM API function CoGetClassObject results in the class object having to be loaded from a .DLL, CoGetClassObject uses the DllGetClassObject that must be exported from the .DLL in order to actually retrieve the class.</P>
  </P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="92pt" VALIGN="TOP"><COL WIDTH="285pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Argument</B></P></TD><TD VALIGN="TOP"><B>Type</B></P></TD><TD VALIGN="TOP"><B>Description</B></P></TD></TR><TR><TD VALIGN="TOP">clsid</P></TD><TD VALIGN="TOP">REFCLSID</P></TD><TD VALIGN="TOP">The class of the class factory being requested.</P></TD></TR><TR><TD VALIGN="TOP">iid</P></TD><TD VALIGN="TOP">REFIID</P></TD><TD VALIGN="TOP">The interface with which the caller wants to talk to the class factory. Most often this is IID_IClassFactory<I> </I>but is not restricted to it.</P></TD></TR><TR><TD VALIGN="TOP">ppv</P></TD><TD VALIGN="TOP">void **</P></TD><TD VALIGN="TOP">The place in which to put the interface pointer.</P></TD></TR></TBODY></TABLE>
<BR></P></P>
  </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="137pt" VALIGN="TOP"><COL WIDTH="204pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP"><B>Meaning</B></P></TD></TR><TR><TD VALIGN="TOP">S_OK</P></TD><TD VALIGN="TOP">Success.</P></TD></TR><TR><TD VALIGN="TOP">E_NOINTERFACE</P></TD><TD VALIGN="TOP">The requested interface was not supported on the class object.</P></TD></TR><TR><TD VALIGN="TOP">E_OUTOFMEMORY</P></TD><TD VALIGN="TOP">Memory could not be allocated to service the request.</P></TD></TR><TR><TD VALIGN="TOP">E_UNEXPECTED</P></TD><TD VALIGN="TOP">An unknown error occurred.</P></TD></TR></TBODY></TABLE>
<BR></P>Note that since DllGetClassObject<I> </I>is passed the CLSID, a single implementation of this function can handle any number of classes. That also means that a single in-process server can implement any number of classes. The implementation of DllGetClassObject only need create the proper class factory for the requested CLSID.</P>
Most implementation of this function for a single class look very much like the implementation of IClassFactory::CreateInstance as illustrated in the code below: </P>
  </P>
<BR></P>
<pre><code>HRESULT DllGetClassObject(REFCLSID clsid, REFIID iid, void **ppv) {
   CTextRenderFactory * pCF;
   HRESULT              hr=E_OUTOFMEMORY;

   if (!CLSID_TextRender!=clsid)
      return E_FAIL;
   pCF=new CTextRenderFactory();
   if (NULL==pCF)
      return E_OUTOFMEMORY;

   //This validates the requested interface and calls AddRef
   hr=pCF-&gt;QueryInterface(iid, ppv);
   if (FAILED(hr))
      delete pCF;
   else
      ppv=pCF;
    return hr;
    }</code></pre>
  </P>
As is conventional with object implementations, including class factories, construction of the object sets the reference count to zero such that the initial QueryInterface creates the first actual reference count. Upon successful return from this function, the class factory will have a reference count of one which must be released by the caller (COM or the client, whoever gets the interface pointer).</P>
The structure of a .DLL server with its object and class factory is illustrated in Figure 6-1 below. This figure also illustrates the sequence of calls and events that happen when the client executes the standard object creation sequence of CoGetClassObject<I> </I>and<I> </I>IClassFactory::CreateInstance.</P>
<img src="ASL0G.gif"></P>
<B>Figure 6-1: Creation sequence of an object from a .DLL server. Function calls not in COM are from the Windows API.</B></P>
 </P></BODY></HTML>

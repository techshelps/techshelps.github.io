<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Chapter 14: Type Libraries</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

</OBJECT></FORM>
<H1>Chapter 14: Type Libraries</H1>  </P>
In addition to implementing dual interfaces, you should create a type library for each set of objects you expose. Because VTBL references are bound at compile time, exposed objects that support VTBL binding must be described in a type library.</P>
Type libraries provide these important benefits:</P>
<SPAN CLASS="list"><UL><LI>Type checking can be performed at compile time, helping developers of OLE Automation controllers to write fast, correct code to access your objects.</LI><LI>You can use the <B>DispInvoke</B> function to implement <B>IDispatch</B> automatically. Using <B>DispInvoke </B>ensures that your implementation will be correct.</LI><LI>Visual Basic applications can create objects with specific interface types, rather than the generic <B>Object</B> type, and take advantage of early binding.</LI><LI>OLE Automation controllers that don't support VTBLs can read and cache DISPIDs at compile time, thereby improving run time performance.</LI><LI>Type browsers can scan the library, allowing others to see the characteristics of your objects.</LI><LI>The <B>RegisterTypeLib</B> function can be used to register your exposed objects.</LI><LI>Local server access is improved, because OLE Automation uses information from the type library to package the parameters passed to an object in another process.</LI></UL></SPAN><P></P>
 </P></BODY></HTML>

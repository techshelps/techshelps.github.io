<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Notification</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

</OBJECT></FORM>
<H2>Notification</H2>  </P>
Consumers of data from an external source might be interested in knowing when data in that source changes. This requires some mechanism through which a data object itself asynchronously notifies a client connected to it of just such an event, at which point a client can remember to ask for an updated copy of the data when it later needs such an update.</P>
COM handles notifications of this kind through an object called an <I>advise sink </I>which implements an interface called <B>IAdviseSink. </B>This <I>sink</I> is a body that absorbs asynchronous notifications from a data source. The advise sink object itself, and the <B>IAdviseSink </B>interface is implemented by the consumer of data which then hands an <B>IAdviseSink </B>pointer to the data object in question. When the data object detects a change, it then calls a function in <B>IAdviseSink </B>to notify the consumer as illustrated in Figure 2-14.</P>
<img src="ASL0M.gif"></P>
<B>Figure 2-14: A consumer of data implements an object with the </B><B><I>IAdviseSink </I></B><B>interface through which data objects notify that consumer of data changes.</B></P>
This is the most frequent situation where a client of one object, in this case the consumer, will itself implement an object to which the data object acts as a client itself. Notice that there are no circular reference counts here: the consumer object and the advise sink have different COM object identities, and thus separate reference counts. When the data object needs to notify the consumer, it simply calls the appropriate member function of <B>IAdviseSink.</B></P>
So <B>IAdviseSink </B>is more of a central collection of notifications of interest to a number of other interfaces and scenarios outside of <B>IDataObject </B>and data exchange. It contains, for example, a function for the event of a <I>view</I> change, that is, when a particular view of data changes without a change in the underlying data. In addition, it contains functions for knowing when an object has saved itself, closed, or been renamed. All of these other notifications are of particular use in compound document scenarios and are used in OLE, but not COM proper. Chapter 10 describes these functions but the mechanisms by which they are called are not part of COM and are not covered in this specification. Interested readers should refer to the OLE 2 Specifications from Microsoft.</P>
Finally, data objects can establish notifications with multiple advise sinks. COM provides some assistance for data objects to manage an arbitrary number of<B> IAdviseSink </B>pointers through which the data object can pass each pointer to COM and then tell COM when to send notifications. COM in turn notifies all the advise sinks it maintains on behalf of the data object.</P>
<P></P>
 </P></BODY></HTML>

<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Emulating Other Servers</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

</OBJECT></FORM>
<H2>Emulating Other Servers</H2>  </P>
The final topic related to COM Servers for this chapter is what is known as <I>emulation</I>: the ability for one server associated with one CLSID to emulate a server of another CLSID. A server that can emulate another is responsible for providing compatible behavior for a different class through a different implementation. This forms the basis for allowing end users the choice in which servers are used for which objects, as long as the behavior is compatible between those servers.</P>
As far as COM is concerned, it only has to provide some way for a server to indicate that it wishes to emulate some CLSID. To that end, the COM Library supplies the function CoTreatAsClass to establish an emulation that remains in effect (persistently) until canceled or changed. In addition it supplies CoGetTreatAsClass to allow a caller to determine if a given CLSID is marked for emulation.</P>
 </P></BODY></HTML>

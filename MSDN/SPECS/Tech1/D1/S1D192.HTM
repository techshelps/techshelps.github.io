<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Unloading .EXE Servers</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

</OBJECT></FORM>
<H3>Unloading .EXE Servers</H3>  </P>
<A NAME="PT2"></A>A server application is responsible for unloading itself, simply by terminating and exiting its main entry function,<font class="MissingLink" meta="aslch06_FNEight">8.</font> when the shutdown conditions are met, including whether or not the user has control. In the ongoing example of this chapter, this would involve detecting the proper shutdown conditions whenever an object is destroyed (in the suggested ObjectDestroyed<I> </I>function) or whenever the last lock is removed (in IClassFactory::LockServer)<I>.</I></P>
  </P>
<BR></P>
<pre><code>//User control flag
BOOL        g_fUser=FALSE;

void ObjectDestroyed(void) {
   g_cObj--;
   if (0L==g_cObj &amp;&amp; 0L==g_cLock &amp;&amp; !g_fUser)
      //Begin shutdown
   return;
   }

HRESULT CTextRenderFactory::LockServer(BOOL fLock) {
   if (fLock)
      g_cLock++;      // for single threaded app only, of course
   else    {
      g_cLock--;
      if (0L==g_cObj &amp;&amp; 0L==g_cLock &amp;&amp; !g_fUser)
         //Begin shutdown
      }
   return NOERROR;
   }</code></pre>
  </P>
If desired, you can of course centralize the shutdown conditions by artificially incrementing the object count in IClassFactory::LockServer and directly calling ObjectDestroyed. That way you do not need redundant code in both functions.</P>
During shutdown, the server is responsible for calling CoRevokeClassObject on all previously registered class factories and for calling CoUninitialize<I> </I>like any COM application.</P>
A server application only needs a "user-control" flag if it becomes visible in some way and also allows the user to perform some action which would necessitate the application stays running regardless of any other conditions. For example, the server might be running to service an object for a client and the user opens another file in that same application. Since the user is the only agent who can close the file, the user control flag is set to TRUE meaning that the user must explicitly close the application: no automatic shutdown is possible.</P>
If a server is visible and under user control, there is the possibility that clients have connections to objects within that server when the user explicitly closes the application. In that situation the server can take one of two actions:</P>
<SPAN CLASS="list"><OL><LI>Simply hide the application and reset the user control flag to FALSE such that the server will automatically shut down when all objects and locks are released.</LI><LI>Terminate the application but call CoDisconnectObject for each object in service to forcibly disconnect all clients.</LI></OL></SPAN>The second option, though more brutal, is necessary in some situations. The CoDisconnectObject function exists to insure that all external reference counts to the server's objects are released such that the server can release its own references and destroy all objects.</P>
 </P></BODY></HTML>

<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>iid_is and use of void*</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

</OBJECT></FORM>
<H3>iid_is and use of void*</H3>  </P>
The use of "void*" pointers are permitted, as long as such pointers are qualified with an "iid_is" pointer attribute. See [CAE RPC], page 253.</P>
  </P>
<BR></P>
<pre><code><A NAME="PT2"></A>&lt;ptr_attr&gt; ::= ref
   | ptr
   | iid_is ( &lt;attr_var_list&gt; )
   | unique<font class="MissingLink" meta="aslch13_FNThree">3.</font></code></pre>
  </P>
The iid_is construct says that the void* parameter is an interface pointer whose type is only known at run time, but whose interface ID is the parameter named in the iid_is attribute. For example:</P>
  </P>
<BR></P>
<pre><code>[object, uuid(b5483f00-4f6c-101b-a1c7-00aa00389acb)]
   interface IBar : IWazoo {
      Bar([in] short i, [in, ref] uuid_t *piid, [out, iid_is(piid)] void ** ppvoid);
      };</code></pre>
  </P>
This can be invoked in C++ as:</P>
  </P>
<BR></P>
<pre><code>IFoo* pIF;
pIB-&gt;Bar(i, &amp;IID_IFoo, (void*)&amp;pIF);</code></pre>
  </P>
where "IID_IFoo" is the name of a constant whose value is the interface ID for IFoo.</P>
 </P></BODY></HTML>

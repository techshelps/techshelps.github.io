<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Chapter 3: Objects and Interfaces</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

</OBJECT></FORM>
<H1>Chapter 3: Objects and Interfaces</H1>  </P>
This chapter describes in detail the heart of COM: the notion of interfaces and their relationships to the objects on which they are implemented. More specifically, this chapter includes </P>
<SPAN CLASS="list"><UL><LI><font class="MissingLink" meta="aslch03_Technically">What an Interface is (Technically)</font> including interface calling conventions, and object and interface identity </LI><LI><font class="MissingLink" meta="aslch03_Unique">Globally Unique Identifiers</font></LI><LI>The Fundamental Interface Called IUnknown</LI><LI><font class="MissingLink" meta="aslch03_Error">COM's Error Reporting Mechanism</font></LI><LI><font class="MissingLink" meta="aslch03_Enumerators">Enumerators and Enumerator Interfaces</font></LI><LI><font class="MissingLink" meta="aslch03_Designing">Designing and Implementing Objects</font></LI></UL></SPAN>In addition, this chapter describes how an object implements one or more interfaces as well as a special type of object called the <I>enumerator</I> which comes up in various contexts in COM.</P>
As described in Chapters 1 and 2, the COM Library provides the fundamental implementation locator services to clients and provides all the necessary glue to help clients communicate transparently with object regardless of where those objects execute: in-process, out-of-process, or on a different computer entirely. All servers expose their object's services through interfaces, and COM provides implementations of the <I>proxy</I> and <I>stub</I> objects that make communication possible between processes and computers where RPC is necessary.</P>
However, as we'll see in this chapter and those that follow, the COM Library also provides fundamental API functions for both clients and servers or, in general, any piece of code that uses COM, application or not. These API functions will be described in the context of where other applications or .DLLs use them. A COM implementor reading this document will find the specifications for each function offset clearly from the rest of the text. These functions are implemented in the COM Library to standardize the parts of this specification that applications should not have to implement nor would want to implement. Through the services of the COM Library, all clients can make use of all objects in all servers, and all servers can expose their objects to all clients. Only by having a standard is this possible, and the COM Library enforces that standard by doing most of the hard work.</P>
Not all the COM Library functions are truly fundamental. Some are just convenient wrappers to common sequences of other calls, sometimes called <I>helper functions.</I> Others exist simply to maintain global lists for the sake of all applications. Others just provide a solid implementation of functions that could be implemented in every application, but would be tedious and wasteful to do so.</P>
</P>
 </P></BODY></HTML>

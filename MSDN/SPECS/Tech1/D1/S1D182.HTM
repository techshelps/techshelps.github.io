<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Remote Objects: AtBits Key</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

</OBJECT></FORM>
<H3>Remote Objects: AtBits Key</H3>  </P>
As described in the last section, a prerequisite to server implementation is generating a <B>CLSID </B>for that server. This <B>CLSID </B>is registered in the system registry and referenced in the server code. The full path name of the server .DLL or .EXE is registered in association with the <B>CLSID. </B></P>
The remote server can actually run either on the computer where the server code is stored or on the same computer as its connected client (assuming the class is registered on the remote computer and there is a compatible binary image available). Servers that use the default security provided with the system must run where its client is running. To indicate the mode of operation, the Microsoft Windows implementation of COM includes the subkey AtBits that is registered along with the server's CLSID. To register a server to run where the persistent state of the object is stored, set AtBits to Y. To register the server to run where the client is running, either set it to <B>N</B> or leave the attribute out altogether. The default is to run the server where the client is running. The registration example below shows how the TextRender object would allow itself to be activated remotely.</P>
  </P>
<BR></P>
<pre><code>CLSID
   {12345678-ABCD-1234-5678-9ABCDEF00000} = TextRender Example
      LocalServer = c:\objects\textrend.exe
      AtBits = Y</code></pre>
  </P>
 </P></BODY></HTML>

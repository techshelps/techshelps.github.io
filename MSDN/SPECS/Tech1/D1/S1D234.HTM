<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IOleItemContainer::GetObject</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

</OBJECT></FORM>
<H3>IOleItemContainer::GetObject</H3>  </P>
<B>HRESULT IOleItemContainer::GetObject(lpszItem, dwSpeedNeeded, pbc, riid, ppvObject)</B></P>
This method returns the object within this container specified by lpszItem.</P>
dwSpeedNeeded is an indication of how willing the caller is to wait to get to the object. This value is set by the implementation of Item Moniker; the value it uses is derived from the dwTickCountDeadline parameter in the Bind Context that it receives. dwSpeedNeeded is one of the following values:</P>
  </P>
<BR></P>
<pre><code>typedef enum tagBINDSPEED {
    BINDSPEED_INDEFINITE    = 1,    // the caller is willing to wait indefinitely 
    BINDSPEED_MODERATE    = 2,    // the caller is willing to wait a moderate amount of time.
    BINDSPEED_IMMEDIATE    = 3,    // the caller is willing to wait only a very short time
    } <B>BINDSPEED</B>;</code></pre>
  </P>
If BINDSPEED_IMMEDIATE is specified, then the object should be returned only if it is already running or if it is a pseudo-object (an object internal to the item container, such as a cell-range in a spreadsheet or a character-range in a word processor); otherwise, MK_E_EXCEEEDEDDEADLINE should be returned. BINDSPEED_MODERATE would include those things indicated by BINDSPEED_IMMEDIATE, plus, perhaps, those objects which are always running when the container is running and has them loaded: in this case, <I>load</I> (not load and run) the designated object, ask if it is running, and return it if so; otherwise, fail with MK_E_EXCEEEDEDDEADLINE as before. BINDSPEED_INDEFINITE indicates that time is of no concern to the caller.</P>
The actual bind context parameter is also here passed in pbc for the use of more sophisticated containers. Less sophisticated containers can simply ignore this and look at dwSpeedNeeded instead. In effect, what the implementation of Item Moniker does is convert the deadline in the bind context into an appropriate dwSpeedNeeded, in the hope that the latter is easier to take a decision on for most containers.</P>
  </P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="106pt" VALIGN="TOP"><COL WIDTH="79pt" VALIGN="TOP"><COL WIDTH="289pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Argument</B></P></TD><TD VALIGN="TOP"><B>Type</B></P></TD><TD VALIGN="TOP"><B>Description</B></P></TD></TR><TR><TD VALIGN="TOP">lpszItem</P></TD><TD VALIGN="TOP">LPSTR</P></TD><TD VALIGN="TOP">The item in this container that should be bound to.</P></TD></TR><TR><TD VALIGN="TOP">dwSpeedNeeded</P></TD><TD VALIGN="TOP">DWORD</P></TD><TD VALIGN="TOP">A value from the enumeration BINDSPEED. See above.</P></TD></TR><TR><TD VALIGN="TOP">pbc</P></TD><TD VALIGN="TOP">IBindCtx*</P></TD><TD VALIGN="TOP">The actual deadline parameter involved in this binding operation. For the use of more sophisticated containers. Most can ignore this, and instead use dwSpeedNeeded.</P></TD></TR><TR><TD VALIGN="TOP">riid</P></TD><TD VALIGN="TOP">REFIID</P></TD><TD VALIGN="TOP">The interface with which a connection to that object should be made.</P></TD></TR><TR><TD VALIGN="TOP">ppvObject</P></TD><TD VALIGN="TOP">void**</P></TD><TD VALIGN="TOP">The bound-to object is returned here.</P></TD></TR><TR><TD VALIGN="TOP">return value</P></TD><TD VALIGN="TOP">HRESULT</P></TD><TD VALIGN="TOP">S_OK, MK_E_EXCEEEDEDDEADLINE, MK_E_NOOBJECT, E_NOINTERFACE, E_OUTOFMEMORY</P></TD></TR></TBODY></TABLE>
<BR></P> </P></BODY></HTML>

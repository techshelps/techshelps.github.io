<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The IEnumConnections Interface</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

</OBJECT></FORM>
<H2>The IEnumConnections Interface</H2>  </P>
Any individual connection point can support enumeration of its known connections through IConnectionPoint::EnumConnections<I>. </I>The enumerator created by this function implements the interface IEnumConnections<I> </I>which deals with the type CONNECTDATA.<I> </I>Each CONNECTDATA<I> </I>structure contains the IUnknown *<I> </I>of a connected sink and the dwCookie<I> </I>that was returned by IConnectionPoint::Advise when that sink was connected.<I> </I>When enumerating connections through IEnumConnections, the enumerator is responsible for calling IUnknown::AddRef<I> </I>through the pointer in each enumerated structure, and the caller is responsible to later call IUnknown::Release<I> </I>when those pointers are no longer needed.</P>
IDL:</P>
  </P>
<BR></P>
<pre><code>[
uuid(B196B287-BAB4-101A-B69C-00AA00341D07)
    , object, pointer_default(unique)
]
interface IEnumConnections : IUnknown
    {
    typedef struct tagCONNECTDATA
        {
        IUnknown   *pUnk;
        DWORD       dwCookie;
        } CONNECTDATA;

    typedef struct tagCONNECTDATA *PCONNECTDATA;
    typedef struct tagCONNECTDATA *LPCONNECTDATA;

    HRESULT Next([in] ULONG cConnections
        , [out, max_is(cConnections)] CONNECTDATA *rgpcd
        , [out] ULONG *pcFetched);

    HRESULT Skip([in] ULONG cConnections);
    HRESULT Reset(void);
    HRESULT Clone([out] IEnumConnections **ppEnum);
    }
</code></pre>
  </P>
 </P></BODY></HTML>

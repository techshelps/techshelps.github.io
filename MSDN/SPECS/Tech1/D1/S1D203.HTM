<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Storage and Stream Objects</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

</OBJECT></FORM>
<H2>Storage and Stream Objects</H2>  </P>
<A NAME="PT3"></A>Within COM's Persistent Storage definition there are two types of storage elements: <I>storage objects </I>and <I>stream objects. </I>These are objects generally implemented by the COM library itself; applications rarely, if ever, need to implement these storage elements themselves.<font class="MissingLink" meta="aslch10_FNOne">1.</font> These objects, like all others in COM, implement interfaces: <B>IStream </B>for stream objects, <B>IStorage </B>for storage objects as detailed in Chapter 8.</P>
A stream object is the conceptual equivalent of a single disk file as we understand disk files today. Streams are the basic file-system component in which data lives, and each stream in itself has access rights and a single seek pointer. Through its <B>IStream</B><B><I> </I></B>interface stream can be told to read, write, seek, and perform a few other operations on its underlying data. Streams are named by using a text string and can contain any internal structure you desire because they are simply a flat stream of bytes. In addition, the functions in the <B>IStream </B>interface map nearly one-to-one with standard file-handle based functions such as those in the ANSI C run-time library.</P>
A storage object is the conceptual equivalent of a directory. Each storage, like a directory, can contain any number of sub-storages (subdirectories) and any number of streams (files). Furthermore, each storage has its own access rights. The <B>IStorage</B><B><I> </I></B>interface describes the capabilities of a storage object such as enumerate elements (dir), move, copy, rename, create, destroy, and so forth. A storage object itself cannot store application-defined data except that it implicitly stores the names of the elements (storages and streams) contained within it.</P>
Storage and stream objects, when implemented by COM as a standard on a system, are sharable between processes. This is a key feature that enables objects running in-process or out-of-process to have equal incremental access to their on-disk storage. Since COM is loaded into each process separately, it must use some operating system supported shared memory mechanisms to communicate between processes about opened elements and their access modes.</P>
</P>
 </P></BODY></HTML>

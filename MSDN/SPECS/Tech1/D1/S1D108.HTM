<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Mapping from ORPC IDL to DCE RPC IDL</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

</OBJECT></FORM>
<H2>Mapping from ORPC IDL to DCE RPC IDL</H2>  </P>
From the above extensions, and the wire representation definitions, one can conclude the following rules for converting ORPC IDL files to DCE IDL files:</P>
<SPAN CLASS="list"><OL><LI> 1.    Remove the [object] attribute from the interface definition.</LI><LI> 2.    Insert "[in] handle_t h" as the first argument of each method, "[in] ORPCTHIS *_orpcthis" as the second, and "[out] ORPCTHAT *_orpcthat" as the third.</LI><LI> 3.    Manually insert declarations for the operations that were inherited, if any. You may want to make the method names unique, unless the EPV invocation style is always going to be used. One way to do this is to prefix each method with the name of the interface. (Note that the IUnknown methods will never be called, as the IRemUnknown interface is used instead.)</LI><LI> 4.    Replace each occurrence of a type name derived from an interface name, or an [iid_is] qualified void* with OBJREF. Remove [iid_is] attributes.</LI></OL></SPAN> </P></BODY></HTML>

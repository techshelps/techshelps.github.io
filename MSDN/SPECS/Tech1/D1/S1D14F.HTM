<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IUnknown::QueryInterface</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

</OBJECT></FORM>
<H3>IUnknown::QueryInterface</H3>  </P>
<B>HRESULT IUnknown::QueryInterface(iid, ppv)</B></P>
Return a pointer within this object instance that implements the indicated interface. Answer NULL if the receiver does not contain an implementation of the interface.</P>
<A NAME="PT2"></A>It is required that any query for the specific interface IUnknown <font class="MissingLink" meta="aslch03_FNSeven">7.</font> always returns the <I>same actual pointer value</I>, no matter through which interface derived from IUnknown it is called. This enables the following identity test algorithm to determine whether two pointers in fact point to the same object: call QueryInterface(IID_IUnknown, ...) on both and compare the results.</P>
In contrast, queries for interfaces <I>other</I> than IUnknown are <I>not</I> required to return the same actual pointer value each time a QueryInterface returning one of them is called. This, among other things, enables sophisticated object implementors to free individual interfaces on their objects when they are not being used, recreating them on demand (reference counting is a per-interface notion, as is explained further below).  This requirement is the basis for what is called <I>COM identity.</I></P>
<A NAME="PT3"></A>It is required that the set of interfaces accessible on an object via QueryInterface be static, not dynamic, in the following precise sense.<font class="MissingLink" meta="aslch03_FNEight">8.</font> Suppose we have a pointer to an interface</P>
  </P>
<BR></P>
<pre><code>   ISomeInterface * psome = (some function returning an ISomeInterface *);</code></pre>
  </P>
where ISomeInterface derives from IUnknown. Suppose further that the following operation is attempted:</P>
  </P>
<BR></P>
<pre><code>IOtherInterface * pother;
HRESULT   hr;
hr=psome-&gt;QueryInterface(IID_IOtherInterface, &amp;pother);      //line 4</code></pre>
  </P>
Then, the following must be true:</P>
<SPAN CLASS="list"><UL><LI>If hr==S_OK, then if the QueryInterface in line 4 is attempted a second time from the same psome pointer, then S_OK must be answered again. This is independent of whether or not pother-&gt;Release was called in the interim. In short, if you can get to a pointer once, you can get to it again.</LI><LI>If hr==E_NOINTERFACE, then if the QueryInterface in line 4 is attempted a second time from the same psome<I> </I>pointer, then E_NOINTERFACE must be answered again. In short, if you didn't get it the first time, then you won't get it later.</LI></UL></SPAN>Furthermore, <I>QueryInterface </I>must be reflexive, symmetric, and transitive with respect to the set of interfaces that are accessible. That is, given the above definitions, then we have the following:</P>
  </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="88pt" VALIGN="TOP"><COL WIDTH="346pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Statement</B></P></TD><TD VALIGN="TOP"><B>Logic</B></P></TD></TR><TR><TD VALIGN="TOP">Symmetric:</P></TD><TD VALIGN="TOP">psome-&gt;QueryInterface(IID_ISomeInterface, ...) must succeed</P></TD></TR><TR><TD VALIGN="TOP">Reflexive:</P></TD><TD VALIGN="TOP">If in line 4, pother was successfully obtained, then pother-&gt;QueryInterface(IID_ISomeInterface, ...) must succeed.</P></TD></TR><TR><TD VALIGN="TOP">Transitive:</P></TD><TD VALIGN="TOP">If in line 4, pother was successfully obtained, and we do IYetAnother * pyet; pother-&gt;QueryInterface(IID_IYetAnother, &amp;pyet);     //Line 7 and pyet<I> </I>is successfully obtained in line 7, then pyet-&gt;QueryInterface(IID_ISomeInterface, ...) must succeed.</P></TD></TR></TBODY></TABLE>
<BR></P>Here, "must succeed" means "must succeed barring catastrophic failures." As was mentioned above, it is specifically <I>not</I> the case that two QueryInterface<I> </I>calls on the same pointer asking for the same interface must succeed and return exactly the same <I>pointer value</I> (except in the IUnknown case as described previously).</P>
  </P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="65pt" VALIGN="TOP"><COL WIDTH="231pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Argument</B></P></TD><TD VALIGN="TOP"><B>Type</B></P></TD><TD VALIGN="TOP"><B>Description</B></P></TD></TR><TR><TD VALIGN="TOP">iid</P></TD><TD VALIGN="TOP">REFIID</P></TD><TD VALIGN="TOP">The interface identifier desired.</P></TD></TR><TR><TD VALIGN="TOP">ppv</P></TD><TD VALIGN="TOP">void**</P></TD><TD VALIGN="TOP">Pointer to the object with the desired interface. In the case that the interface is not supported or another error occurred, *ppv must be set to NULL.</P></TD></TR></TBODY></TABLE>
<BR></P></P>
  </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="137pt" VALIGN="TOP"><COL WIDTH="231pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP"><B>Meaning</B></P></TD></TR><TR><TD VALIGN="TOP">S_OK</P></TD><TD VALIGN="TOP">Success. The interface is supported</P></TD></TR><TR><TD VALIGN="TOP">E_NOINTERFACE</P></TD><TD VALIGN="TOP">The interface is not supported</P></TD></TR><TR><TD VALIGN="TOP">E_UNEXPECTED</P></TD><TD VALIGN="TOP">An unknown error occurred.</P></TD></TR></TBODY></TABLE>
<BR></P> </P></BODY></HTML>

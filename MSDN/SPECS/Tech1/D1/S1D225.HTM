<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IBindCtx::RegisterObjectParam</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

</OBJECT></FORM>
<H3>IBindCtx::RegisterObjectParam</H3>  </P>
<B>HRESULT IBindCtx::RegisterObjectParam(lpszKey, punk)</B></P>
Register the given object pointer under the name lpszKey in the internally-maintained table of object pointers. The intent of this table is that it be used as an extensible means by which contextual information can be passed to the binding process. String keys are compared case-sensitive.</P>
Like IBindCtx::RegisterObjectBound, this function creates an additional reference to the passed-in object using AddRef. The effect of calling this function a second time with the same lpszKey is to replace in the table the object passed-in the first time.</P>
By convention, moniker implementers may freely use object parameters whose names begin with the string representation of the class id of the moniker implementation in question.</P>
This facility is also used as means by which various errors can convey information back to the caller. Associated with certain error values are the following object parameters:</P>
  </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="173pt" VALIGN="TOP"><COL WIDTH="290pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Error</B></P></TD><TD VALIGN="TOP"><B>Parameters</B></P></TD></TR><TR><TD VALIGN="TOP">MK_E_EXCEEDEDDEADLINE</P></TD><TD VALIGN="TOP">Parameters named ExceededDeadline, ExceededDeadline1, ExceededDeadline2, and so forth, if they exist, are monikers who appearance as running would make it reasonable for the caller to attempt the binding operation again.</P></TD></TR><TR><TD VALIGN="TOP">E_CLASSNOTFOUND</P></TD><TD VALIGN="TOP">The parameter named ClassNotFound, if present, is a moniker to the storage of the object whose class was not able to be loaded in the process of a moniker operation.</P></TD></TR></TBODY></TABLE>
<BR></P>New moniker authors can freely use parameter names that begin with the string form of the CLSID of their moniker; see StringFromCLSID<B>().</B></P>
The arguments to this function are as follows:</P>
  </P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="88pt" VALIGN="TOP"><COL WIDTH="304pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Argument</B></P></TD><TD VALIGN="TOP"><B>Type</B></P></TD><TD VALIGN="TOP"><B>Description</B></P></TD></TR><TR><TD VALIGN="TOP">lpszKey</P></TD><TD VALIGN="TOP">LPSTR</P></TD><TD VALIGN="TOP">The name under which the object is being registered.</P></TD></TR><TR><TD VALIGN="TOP">punk</P></TD><TD VALIGN="TOP">IUnknown*</P></TD><TD VALIGN="TOP">The object being registered.</P></TD></TR><TR><TD VALIGN="TOP">return value</P></TD><TD VALIGN="TOP">HRESULT</P></TD><TD VALIGN="TOP">S_OK, E_OUTOFMEMORY</P></TD></TR></TBODY></TABLE>
<BR></P> </P></BODY></HTML>

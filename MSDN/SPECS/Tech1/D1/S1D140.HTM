<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Server Flavors: In-Process and Out-Of-Process</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

</OBJECT></FORM>
<H3>Server Flavors: In-Process and Out-Of-Process</H3>  </P>
As defined in the last section, a server in general is some piece of code that structures some object in such a way that COM implementor locator services can run that code and have it create objects. The section below, The COM Library, expands on the specific responsibilities of COM in this sense.</P>
Any specific server can be implemented in one of a number of flavors depending on the structure of the code module and its relationship to the client process that will be using it. A server is either <I>in-process </I>which means its code executes in the same process space as the client, or <I>out-of-process </I>which means it runs in another process on the same computer or in another process on a remote computer. These three types of servers are called in-process, local, and remote, as defined below:</P>
<SPAN CLASS="list"><UL><LI><B>In-Process Server  </B>A server that can be loaded into the client's process space and serves in-process objects. Under Microsoft&copy; Windows&copy; and Microsoft Windows NT, these are implemented as <I>dynamic link libraries </I>or DLLs. This specification uses .DLL as a generic term to describe any piece of code that can be loaded in this fashion which will, of course, differ between operating systems.</LI><LI><B>Local Server  </B>A server that runs in a separate process on the same computer as the client and serves local objects. This type of server is another complete application of its own thus defining the separate <I>process</I>. This specification uses the terms <I>.EXE </I>or <I>executable module </I>to describe an application that runs in its own process, as opposed to a DLL which must be loaded into an existing process.</LI><LI><B>Remote Server  </B>A server that runs on a separate computer and therefore always runs in another process as well to serve <I>remote</I> objects.<I> </I>Remote servers may be implemented in either .DLLs or .EXEs; if a remote server is implemented in a .DLL, a surrogate process will be created for it on the remote computer.</LI></UL></SPAN>Note that the same words in-process, local, and remote are used in this specification as a qualifier for the word object where emphasis is on the object more than the server.</P>
Object implementors choose the type of server based on the requirements of implementation and deployment. COM is designed to handle all situations from those that require the deployment of many small, lightweight in-process objects (like controls, but conceivably even smaller) up to those that require deployment of a huge central corporate database server. Furthermore, COM does so in a transparent fashion, with what is called <I>location transparency,</I> the topic of the next section.</P>
 </P></BODY></HTML>

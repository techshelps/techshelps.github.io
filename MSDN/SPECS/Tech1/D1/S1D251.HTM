<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>User-supplied routines</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

</OBJECT></FORM>
<H3>User-supplied routines</H3>  </P>
The routines required by user_marshall have the following prototypes. </P>
&lt;type_name&gt; means a user specific type name. This may be non-RPC-able type or even, when used with user_marshal, a type unknown to MIDL at all. The wire type name (the name of transmissible type) is not used here.</P>
  </P>
<BR></P>
<pre><code>unsigned long __RPC_USER  &lt;type_name&gt;_UserSize(
   unsigned long __RPC_FAR *   pFlags,
   unsigned long           StartingSize,
   &lt;type_name&gt;  __RPC_FAR *    pFoo);

unsigned char __RPC_FAR * __RPC_USER  &lt;type_name&gt;_UserMarshal(
   unsigned long    __RPC_FAR *   pFlags,
   unsigned char __RPC_FAR *     Buffer,
   &lt;type_name&gt;  __RPC_FAR *    pFoo);

unsigned char __RPC_FAR * __RPC_USER  &lt;type_name&gt;_UserUnmarshal(
   unsigned long    __RPC_FAR *   pFlags,
   unsigned char __RPC_FAR *       Buffer,
   &lt;type_name&gt;  __RPC_FAR *   pFoo);

void __RPC_USER  &lt;type_name&gt;_UserFree(
   unsigned long    __RPC_FAR *   pFlags,
   &lt;type_name&gt;  __RPC_FAR *   pFoo );
</code></pre>
  </P>
The meaning of the arguments is as follows:</P>
<SPAN CLASS="list"><UL><LI>pFlags用ointer to a flag ulong. Flags: local call flag, data rep flag.</LI><LI>pBuffer葉he current buffer pointer.</LI><LI>pFoo用ointer to a user type object.</LI><LI>StartingSize葉he buffer size (offset) before the object. </LI></UL></SPAN>The return value when sizing, marshaling or unmarshaling is the new offset or buffer position. See the function description below for details.</P>
The flags pointed to by the first argument have the following layout.</P>
<P></P>

<TABLE COLS="8" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="61pt" VALIGN="TOP"><COL WIDTH="61pt" VALIGN="TOP"><COL WIDTH="61pt" VALIGN="TOP"><COL WIDTH="61pt" VALIGN="TOP"><COL WIDTH="61pt" VALIGN="TOP"><COL WIDTH="61pt" VALIGN="TOP"><COL WIDTH="61pt" VALIGN="TOP"><COL WIDTH="61pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">31</P></TD><TD VALIGN="TOP">24</P></TD><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">16</P></TD><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">8</P></TD><TD VALIGN="TOP">4</P></TD><TD VALIGN="TOP">0</P></TD></TR><TR><TD VALIGN="TOP"><B>Floating point</B></P></TD><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><B>Int</B></P></TD><TD VALIGN="TOP"><B>Char</B></P></TD><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"><B>MSHCTX flags</B></P></TD><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"></P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Ndr data representation</P></TD><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">Marshal context flags</P></TD><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP"></P></TD></TR></TBODY></TABLE>
<BR></P><SPAN CLASS="list"><UL><LI>Upper word: NDR representation flags as defined by DCE, such as floating point, endian-ness and character representations.</LI><LI>Lower word: marshaling context flags as defined by the COM channel. The flags are defined in the public wtypes.h file (and in wtypes.idl file). Currently the following flags are defined:</LI></UL></SPAN>  </P>
<BR></P>
<pre><code>typedef 
enum tagMSHCTX
    {   MSHCTX_LOCAL      = 0,
      MSHCTX_NOSHAREDMEM   = 1,
      MSHCTX_DIFFERENTMACHINE = 2,
      MSHCTX_INPROC      = 3
    } MSHCTX;
</code></pre>
  </P>
The flags make it possible to differ the behavior of the routines depending on the context for the RPC call. For example when a handle is remoted in-process it could be sent as a handle (a long), while sending it remotely would mean sending the data related to the handle. </P>
 </P></BODY></HTML>

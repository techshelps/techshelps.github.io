<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DllDebugObjectRPCHook</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

</OBJECT></FORM>
<H3>DllDebugObjectRPCHook</H3>  </P>
<B>BOOL WINAPI DllDebugObjectRPCHook(</B>BOOL <B>fTrace, </B>LPORPC_INIT_ARGS <B>lpOrpcInitArgs)</B></P>
This function is to be exported by name from one or more .DLLs that wish to be informed when, from the user's point of view, debugging is engaged. Debuggers should call this function to inform each of their loaded .DLLs that export this function as to whether they are presently being debugged or not. When the debugger wants to enable debugging, it calls DllDebugObjectRpcHook with fTrace=TRUE and when it wants to disable it, it calls DllDebugObjectRpcHook with fTrace=FALSE. When enabled, debugging support such as the tracing described herein should be enabled.</P>
Certain of the COM Library .DLLs, for example, implement this function. When debugging is enabled, they turn on what is here called <I>COM remote debugging, </I>and which is the focus of this section.</P>
The second argument points to an ORPC_INIT_ARGS structure whose definition is given below. The pvPSN member is used only on the Apple Macintosh platform, where the calling debugger is required in this field to pass the process serial number of the debuggee's process. On other systems pvPSN should be NULL.</P>
The lpIntfOrpcDebug member is a pointer to an interface. This is used by in-process debuggers and is discussed in more detail later. Debuggers that are neither in-process debuggers nor are Macintosh debuggers should pass NULL for lpIntfOrpcDebug.</P>
  </P>
<BR></P>
<pre><code>typedef struct ORPC_INIT_ARGS {
   IOrpcDebugNotify __RPC_FAR *    <B>lpIntfOrpcDebug</B>;
   void *                  <B>pvPSN</B>;         // contains ptr to Process Serial No. for Mac COM debugging.
   DWORD                  <B>dwReserved1</B>;    // For future use, must be 0.
   DWORD                  <B>dwReserved2</B>;    // For future use, must be 0.
   } ORPC_INIT_ARGS;
   
typedef ORPC_INIT_ARGS  __RPC_FAR * LPORPC_INIT_ARGS;

interface <B>IOrpcDebugNotify </B>: IUnknown {
   VOID   <B>ClientGetBufferSize</B>(LPORPC_DBG_ALL);
   VOID   <B>ClientFillBuffer</B>(LPORPC_DBG_ALL);
   VOID   <B>ClientNotify</B>(LPORPC_DBG_ALL);
   VOID    <B>ServerNotify</B>(LPORPC_DBG_ALL);
   VOID   <B>ServerGetBufferSize</B>(LPORPC_DBG_ALL);
   VOID   <B>ServerFillBuffer(</B>LPORPC_DBG_ALL);
   };</code></pre>
  </P>
As one would expect, a debugger calls DllDebugObjectRPCHook within the context (that is, within the process) of the relevant debuggee. Thus, the implementation of this function most often will merely store the arguments in global .DLL-specific state.</P>
Further, as this function is called from the debugger, the function can be called when the .DLL in which it is implemented is in pretty well any state; no synchronization with other internal .DLL state can be relied upon. Thus, it is recommended that the implementation of this function indeed do nothing <I>more</I> than set internal global variables.</P>
  </P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="106pt" VALIGN="TOP"><COL WIDTH="127pt" VALIGN="TOP"><COL WIDTH="267pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Argument</B></P></TD><TD VALIGN="TOP"><B>Type</B></P></TD><TD VALIGN="TOP"><B>Description</B></P></TD></TR><TR><TD VALIGN="TOP">fTrace</P></TD><TD VALIGN="TOP">BOOL</P></TD><TD VALIGN="TOP">TRUE if debugging is enabled, FALSE otherwise.</P></TD></TR><TR><TD VALIGN="TOP">lpOrpcInitArgs</P></TD><TD VALIGN="TOP">LPORPC_INIT_ARGS</P></TD><TD VALIGN="TOP">Typically NULL; see comments above for MAC COM debuggers or in-process debuggers.</P></TD></TR><TR><TD VALIGN="TOP">return value</P></TD><TD VALIGN="TOP">BOOL</P></TD><TD VALIGN="TOP">TRUE if the function was successful (the .DLL understood and executed the request), FALSE otherwise</P></TD></TR></TBODY></TABLE>
<BR></P> </P></BODY></HTML>

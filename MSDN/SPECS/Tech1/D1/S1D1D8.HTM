<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Applying Activation Security</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

</OBJECT></FORM>
<H3>Applying Activation Security</H3>  </P>
The following table outlines how activation security is applied to requests to the <I>Service Control Manager</I>.</P>
  </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="123pt" VALIGN="TOP"><COL WIDTH="361pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Request</B></P></TD><TD VALIGN="TOP"><B>Action</B></P></TD></TR><TR><TD VALIGN="TOP">CoGetClassObject or CoCreateInstance of a non-running class <I>X</I></P></TD><TD VALIGN="TOP">Check HKLM\Software\Network OLE\Enabled. Fail the request if zero.</P>
Check HKCU\Software\Network OLE\Enabled. Fail the request if zero.</P>
If class is registered in HKCR, follow HKCR\CLSID\{ . . . }\FindActivationSecurityAt = { . . . } until an HKCR\CLSID\{ . . . }\ActivationSecurity key is found. If these keys do not exist, use HKCU\Software\Network OLE\Default Activation Security. Check the request against the security on this key.</P>
Otherwise, if class is registered in HKCC, follow HKCC\CLSID\{ . . . }\FindActivationSecurityAt = { . . . } until an HKCC\CLSID\{ . . . }\ActivationSecurity key is found. If these keys do not exist, use HKLM\Software\Network OLE\Default Activation Security. Check the request against the security on this key.</P></TD></TR><TR><TD VALIGN="TOP">CoGetClassObject or CoCreateInstance of a running class <I>Y</I></P></TD><TD VALIGN="TOP">Check HKLM\Software\Network OLE\Enabled. Fail the request if zero.</P>
Check HKCU\Software\Network OLE\Enabled. Fail the request if zero.</P>
Check the request against the SECURITY_DESCRIPTOR available from CoRegisterClassObject(CLSID_Y,  . . . ). This will be either the value returned by the class object's IactivationSecurity::GetSecurityDescriptor at the time of CoRegisterClassObject or will have been taken from HKCU\Software\Network OLE\DefaultActivationSecurity or HKLM\Software\Network OLE\DefaultActivationSecurity at the time of CoRegisterClassObject if the class object did not support IActivationSecurity.</P></TD></TR><TR><TD VALIGN="TOP">Running Object Table</P></TD><TD VALIGN="TOP">Check HKLM\Software\Network OLE\Enabled. Fail the request if zero.</P>
Check HKCU\Software\Network OLE\Enabled. Fail the request if zero.</P>
Before performing any operation against a ROT entry (i.e., IRunningObjectTable::Revoke, IRunningObjectTable::IsRunning, IRunningObjectTable::GetObject, IRunningObjectTable::NoteTimeChange, IRunningObjectTable::GetTimeOfLastChange, or when including an entry in an IEnumMoniker::Next of an IEnumMoniker returned from IRunningObjectTable::EnumRunning), check the call against the SECURITY_DESCRIPTOR available from IrunningObjectTable::Register. This will be either the value returned by the object's IActivationSecurity::GetSecurityDescriptor at the time of IRunningObjectTable::Register or will have been taken from HKCU\Software\Network OLE\DefaultROTSecurity or HKLM\Software\Network OLE\DefaultROTSecurity at the time of IRunningObjectTable::Register if the object did not support IActivationSecurity.</P></TD></TR></TBODY></TABLE>
<BR></P> </P></BODY></HTML>

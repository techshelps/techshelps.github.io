<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Footnotes</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

</OBJECT></FORM>
<H3>Footnotes</H3>  </P>
<A NAME="PT2"></A>1. The "Microsoft Object Mapping" is an open specification describing the detailed layout of C++ objects. It is supported by the MS C/C++ compiler, as well as C++ compilers from other vendors including Borland&trade;, Symantec&trade;, Watcom&trade;, and others. This is also the location of the this pointer as placed by CFront when using the traditional right-to-left __cdecl calling sequence. Thus, we achieve a large degree of interoperability. <font class="MissingLink" meta="aslch03_returnFNOne">[Back]</font></P>
<A NAME="PT3"></A>2. Usually this data <I>follows </I>the pVtbl pointer, but this is not required. It is perfectly legal for object-specific data to precede the <B>vtbl</B> pointer, and this in fact will be common with many C++ compilers. <font class="MissingLink" meta="aslch03_returnFNTwo">[Back]</font></P>
<A NAME="PT4"></A>3. And, indeed, this syntax will at times be somewhat abused.<font class="MissingLink" meta="aslch03_returnFNThree"> [Back]</font></P>
<A NAME="PT5"></A>4. Of course, if a client timed the call it might be able to discern a performance penalty if it had both in-process and out-of-process objects to compare.<font class="MissingLink" meta="aslch03_returnFNFour"> [Back]</font></P>
<A NAME="PT6"></A>5. Though be aware that the use of the term GUID on page 587 is regrettably <I>not</I> the same as its usage in this specification. In this specification, the term GUID is used to refer to all identifiers that are "interoperable" with UUIDs as defined on p586; p587 uses the term to refer to one specific central-authority allocation scheme. Apologies to those who may be confused by this state of affairs. <font class="MissingLink" meta="aslch03_returnFNFive">[Back]</font></P>
<A NAME="PT7"></A>6. Throughout this document IDL notation is used to precisely describe interfaces and other types.  The actual IDL files contain additional IDL specifies  that are used by the IDL compiler to optimize the generation of marshaling code, but have no bearing on the actual interface contract. <font class="MissingLink" meta="aslch03_returnFNSix">[Back]</font></P>
<A NAME="PT8"></A>7. That is, a QueryInterface invocation where iid is 00000000-0000-0000-C000-000000000046. <font class="MissingLink" meta="aslch03_returnFNSeven">[Back]</font></P>
<A NAME="PT9"></A>8. While this set of rules may seem surprising to some, they are needed in order that remote access to interface pointers can be provided with a reasonable degree of efficiency (without this, interface pointers could not be cached on a remote computer). Further, as QueryInterface forms the fundamental architectural basis by which clients reason about the capabilities of an object with which they have come in contact, stability is needed to make any sort of reasonable reasoning and capability discovery possible. <font class="MissingLink" meta="aslch03_returnFNEight">[Back]</font></P>
<A NAME="PT10"></A>9. There are in fact more general cases than illustrated here involving n-way rather than 2-way interactions of matched AddRef / Release pairs, but that will not be elaborated on here. <font class="MissingLink" meta="aslch03_returnFNNine">[Back]</font></P>
<A NAME="PT11"></A>10. The connection point interfaces introduced in the OLE Controls specification are a real world example of this concept. <font class="MissingLink" meta="aslch03_returnFNTen">[Back]</font></P>
<A NAME="PT12"></A>11. "This" is the appropriate thing to AddRef in an object implementation using the approach of multiply inheriting from the suite of interfaces supported by the object; more complex implementation strategies will need to modify this appropriately.<font class="MissingLink" meta="aslch03_returnFNEleven"> [Back]</font></P>
<A NAME="PT13"></A>12. The name "HRESULT" is retained for historical reasons. Readers familiar with programming COM on the Windows platform will note that HRESULT is analogous to SCODE. <font class="MissingLink" meta="aslch03_returnFNTwelve">[Back]</font></P>
<A NAME="PT14"></A>13. As of this writing, said body is Microsoft Corporation. <font class="MissingLink" meta="aslch03_returnFNThirteen">[Back]</font></P>
<A NAME="PT15"></A>14. As of this writing, said body is Microsoft Corporation. <font class="MissingLink" meta="aslch03_returnFNFourteen">[Back]</font></P>
<A NAME="PT16"></A>15. "elt" by itself in the function prototypes is just "element." <font class="MissingLink" meta="aslch03_returnFNFifteen">[Back]</font></P>
<A NAME="PT17"></A>16. Think of "rgelt" as short for "range of elt," signifying an array.<font class="MissingLink" meta="aslch03_returnFNSixteen"> [Back]</font></P>
<A NAME="PT18"></A>17. Do not use this CLSID for your own purposes–it is simply an example. See the section "Identifying and Registering the Object" below. <font class="MissingLink" meta="aslch03_returnFNSeventeen">[Back]</font></P>
<A NAME="PT19"></A>18. In other words, the client may initialize the object by telling it to read text from a file or by handing text to it through IDataObject::SetData. Either way, the object now has some text to render graphically or to save to a file. <font class="MissingLink" meta="aslch03_returnFNEighteen">[Back]</font></P>
<P></P>
 </P></BODY></HTML>

<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IMoniker::GetTimeOfLastChange</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

</OBJECT></FORM>
<H3>IMoniker::GetTimeOfLastChange</H3>  </P>
<B>HRESULT IMoniker::GetTimeOfLastChange(pbc, pmkToLeft, pfiletime)</B></P>
Answer the earliest time after which the object pointed to by this moniker is known not to have changed. </P>
The purpose of this function is to support the ability to determine whether higher-level objects based on monikers are up-to-date or not. An example of higher level objects are the link objects in OLE Compound Documents.</P>
<A NAME="PT2"></A>The returned time of change is reported using a FILETIME. A FILETIME is a 64-bit value indicating a time in units of 100 nanoseconds, with an origin in 1601.<font class="MissingLink" meta="aslch11_FNFive">5.</font> A resolution of 100 nanoseconds allows us to deal with very fast-changing data; allocating this many bits gives us a range of tens of thousands of years. It is not expected that most change times in objects will be actually be internally recorded with this precision and range; they only need be reported with such.</P>
If the time of last change is unavailable, either because the deadline was exceeded or otherwise, then it is recommended that a FILETIME of {dwLowDateTime,dwHighDateTime} = {0xFFFFFFFF,0x<B>7</B>FFFFFFF} (note the 0x7 to avoid accidental unsigned / signed confusions) should be passed back. If the deadline was exceeded, then the status MK_E_EXCEEDEDDEADLINE should be returned. If the time of change is unavailable, and would not be available no matter what deadline were used, then MK_E_UNAVAILABLE should be returned. Otherwise, S_OK should be returned.</P>
If pmkToLeft is NULL, then this function should generally first check for a recorded change-time in the Running Object Table with IRunningObjectTable::GetTimeOfLastChange before proceeding with other strategies. Moniker classes that support wildcards will have to take into consideration exactly what does get put in the Running Object Table and look for the appropriate thing; since Generic Composite Monikers know nothing of wildcards, they may even need to do that in the non-NULL pmkToLeft case. See IMoniker::IsRunning.</P>
  </P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="83pt" VALIGN="TOP"><COL WIDTH="78pt" VALIGN="TOP"><COL WIDTH="313pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Argument</B></P></TD><TD VALIGN="TOP"><B>Type</B></P></TD><TD VALIGN="TOP"><B>Description</B></P></TD></TR><TR><TD VALIGN="TOP"><B>pbc</B></P></TD><TD VALIGN="TOP">IBindCtx*</P></TD><TD VALIGN="TOP">The binding context for this operation.</P></TD></TR><TR><TD VALIGN="TOP"><B>pmkToLeft</B></P></TD><TD VALIGN="TOP">IMoniker*</P></TD><TD VALIGN="TOP">The moniker to the left of this one in the composite in which it is found.</P></TD></TR><TR><TD VALIGN="TOP"><B>pfiletime</B></P></TD><TD VALIGN="TOP">FILETIME*</P></TD><TD VALIGN="TOP">The place in which the time of last change should be reported.</P></TD></TR><TR><TD VALIGN="TOP">return value</P></TD><TD VALIGN="TOP">HRESULT</P></TD><TD VALIGN="TOP">S_OK, MK_E_EXCEEDEDDEADLINE, MK_E_UNAVAILABLE, MK_E_CONNECTMANUALLY</P></TD></TR></TBODY></TABLE>
<BR></P> </P></BODY></HTML>

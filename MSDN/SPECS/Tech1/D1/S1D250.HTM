<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The user_marshal attribute</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

</OBJECT></FORM>
<H3>The user_marshal attribute</H3>  </P>
  </P>
<BR></P>
<pre><code>   typedef  [user_marshal( user_type)]   transmissible_type;
</code></pre>
  </P>
This attribute is a type attribute used in the ACF file and is somewhat similar in syntax and semantic to the represent_as attribute. Each user-specific type has a corresponding transmissible type that defines the wire representation. Similar to represent_as, in the generated files, each usage of the trasmissible_type name is substituted by the user_type name. </P>
The user can define his specific type quite freely, (simple types, pointer types and composite types may be used) although some restrictions apply. The main one is that the type object needs to have well defined (fixed) memory size. If the changeable size needs to be accommodated, the type should have a pointer field as opposed to a conformant array; or it can be a pointer to the interesting type. General restrictions apply as usual. Specific restrictions related to embedding affect the way types can be specified. For more information see the "User type vs. wire type" section.</P>
The [user_marshal] attribute cannot be used with [allocate()] attribute (directly or indirectly) as the engine doesn't control the memory allocation for the type. Also the wire type cannot be an interface pointer (these may be marshaled directly) or a full pointer (we cannot take care of the aliasing).</P>
Additional points regarding user_marshal:</P>
<SPAN CLASS="list"><UL><LI>The wire type cannot be an interface pointer.</LI><LI>The wire type cannot be a full pointer.</LI><LI>The wire type cannot have allocate attribute on it (like [allocate(all_nodes)]).</LI><LI>The wire type has to have a well defined memory size (cannot be a conformant structure for example) as we allocate the top level object for the user as usual.</LI><LI>When the engine delegates responsibility for a user_marshalable type to the user supplied  routines, everything is up to the user including servicing of the possible embedded types that are defined with user_marshal, transmit_as etc.</LI><LI>user_marshal is mutually exclusive with wire_marshal, transmit_as or represent_as when applied to the same type. </LI><LI>Two different wire types cannot resolve to the same user type and vice versa.</LI><LI>The user type may or may not be RPC-able.</LI><LI>The user type may or may not be known to MIDL.</LI></UL></SPAN> </P></BODY></HTML>

<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Naming Elements</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

</OBJECT></FORM>
<H2>Naming Elements</H2>  </P>
Every storage and stream object in a structured file has a specific character name to identify it. These names are used to tell <B>IStorage</B> functions what element in that storage to open, destroy, move, copy, rename, and so forth. Depending on which component, client or object, actually defines and stores these names, different conventions and restrictions apply.</P>
Names of root storage objects are in fact names of files in the underlying file system. Thus, they obey the conventions and restrictions that it imposes. Strings passed to storage-related functions which name files are passed on uninterpreted and unchanged to the file system.</P>
<A NAME="PT3"></A>Names of elements contained within storage objects are managed by the implementation of the particular storage object in question. All implementations of storage objects must at the least support element names that are 32 characters in length; some implementations may if they wish choose to support longer names. Names are stored case-preserving, but are compared case-insensitive.<font class="MissingLink" meta="aslch10_FNFour">4.</font> As a result, applications which define element names must choose names which will work in either situation.</P>
The names of elements inside an storage object must conform to certain conventions:</P>
<SPAN CLASS="list"><OL><LI>    The two specific names "." and ".." are reserved for future use.</LI><LI>    Element names cannot contain any of the four characters "\", "/", ":", or "!".</LI></OL></SPAN>In addition, the name space in a storage element is partitioned in to different areas of ownership. Different pieces of code have the right to create elements in each area of the name space.</P>
<SPAN CLASS="list"><UL><LI>    The set of element names beginning with characters other than '\0x01' through '\0x1F' (that is, decimal 1 through decimal 31) are for use by the object whose data is stored in the <B>IStorage</B>. Conversely, the object must <I>not </I>use element names beginning with these characters.</LI><LI>    Element names beginning with a '\0x01' and '\0x02' are for the exclusive use of COM and other system code built on it such as OLE.</LI><LI>    Element names beginning with a '\0x03' are for the exclusive use of the client which is managing the object. The client can use this space as a place to persistently store any information it wishes to associate with the object along with the rest of the storage for that object.</LI><LI>    Element names beginning with a '\0x04' are for the exclusive use of the COM structured storage implementation itself. They will be useful, for example, should that implementation support other interfaces in addition to <B>IStorage</B>, and these interface need persistent state.</LI><LI>    Element names beginning with '\0x05' and '\0x06' are for the exclusive use of COM and other system code built on it such as OLE.</LI><LI>    All other names beginning with '\0x07' through '\0x1F' are reserved for future definition and use by the system.</LI></UL></SPAN>In general, an element's name is not considered useful to an end user. Therefore, if a client wants to store specific user-readable names of objects, it usually uses some other mechanism. For example, the client may write its own stream under one of its own storage elements that has the names of all the other objects within that same storage element. Another method would be for the client to store a stream named "\0x03Name" in each object's storage that would contain that object's name. Since the stream name itself begins with '\0x03' the client owns that stream even through the objects controls much of the rest of that storage element.</P>
</P>
 </P></BODY></HTML>

<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Running Object Table</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

</OBJECT></FORM>
<H2>Running Object Table</H2>  </P>
In general when binding to an object, we want to open it if it is currently passive, but if not, then we want to connect to the running instance. To take an example from Compound Documents, a link to a Lotus&trade; 1-2-3 for Windows spreadsheet, for example, when first bound to should open the spreadsheet, but a second bind should connect to the already-open copy. The key technical piece that supports this type of functionality is the Running Object Table. </P>
The Running Object Table is a globally accessible table on each workstation. It keeps track of the objects that are currently running on that workstation so that if an attempt is made to bind to one a connection to the currently running instance can be made instead of loading the object a second time. The table conceptually is a series of tuples, each of the form:</P>
(pmkObjectName, pvObject)</P>
The first element is the moniker that if bound should connect to the running object. The second element is the object that is publicized as being available, the object that is running. In the process of binding, monikers being bound with nothing to their left consult the pmkObjectName entries in the Running Object Table to see if the object that they (the moniker being bound) indicate is already running.</P>
Access to the Running Object Table is obtained with the function GetRunningObjectTable. This returns an object with the interface IRunningObjectTable (note as described earlier, however, that moniker implementations should not use this API, but should instead access the Running Object Table from the bind context they are passed).</P>
  </P>
<BR></P>
<pre><code>interface <B>IRunningObjectTable</B> : IUnknown { 
    HRESULT    <B>Register</B>(reserved, pUnkObject, pmkObjectName, pdwRegister);
    HRESULT    <B>Revoke</B>(dwRegister);
    HRESULT    <B>IsRunning</B>(pmkObjectName);
    HRESULT    <B>GetObject</B>(pmkObjectName, ppunkObject);
    HRESULT    <B>NoteChangeTime</B>(dwRegister, pfiletime);
    HRESULT    <B>GetTimeOfLastChange</B>(pmkObjectName, pfiletime);
    HRESULT    <B>EnumRunning</B>(ppenumMoniker);
    };

SCODE    <B>GetRunningObjectTable</B>(reserved, pprot);
</code></pre>
  </P>
 </P></BODY></HTML>

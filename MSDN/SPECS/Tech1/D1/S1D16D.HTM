<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CoGetMalloc</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

</OBJECT></FORM>
<H3>CoGetMalloc</H3><B>HRESULT CoGetMalloc(dwMemContext, ppMalloc)</B></P>
This function retrieves from the COM library either the task memory allocator an optionally-provided shared memory allocator. The particular allocator of interest is indicated by the dwMemContext<I> </I>parameter. Legal values for this parameter are taken from the enumeration MEMCTX:</P>
  </P>
<BR></P>
<pre><code>typedef enum tagMEMCTX {
        MEMCTX_TASK = 1,            // task (private) memory
        MEMCTX_SHARED = 2,          // shared memory (between processes)
        MEMCTX_MACSYSTEM = 3,       // on the mac, the system heap
        // these are mostly for internal use...
        MEMCTX_UNKNOWN = -1,        // unknown context (when asked about it)
        MEMCTX_SAME = -2,           // same context (as some other pointer)
    } MEMCTX;
</code></pre>
  </P>
MEMCTX_TASK returns the task allocator. If CoInitialize has not yet been called, NULL we be stored in ppMalloc and CO_E_NOTINITIALIZED returned from the function.</P>
<A NAME="PT2"></A> MEMCTX_SHARED returns an optionally-provided shared allocator; if the shared allocator is not supported, E_INVALIDARG is returned. When supported, the shared allocator returned by this function is an COM-provided implementation of IMalloc interface, one which allocates memory in such a way that it can be accessed by other process on the current machine simply by conveying the pointer to said applications.<font class="MissingLink" meta="aslch04_FNTwo">2.</font> Further, memory allocated by this shared allocator in one application may be freed by the shared allocator in another. Except when a NULL pointer is passed, the shared memory allocator never answers -1 to IMalloc::DidAlloc; it always indicates that either did or did not allocate the passed pointer.</P>
  </P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="106pt" VALIGN="TOP"><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="271pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Argument</B></P></TD><TD VALIGN="TOP"><B>Type</B></P></TD><TD VALIGN="TOP"><B>Description</B></P></TD></TR><TR><TD VALIGN="TOP">dwMemContext</P></TD><TD VALIGN="TOP">DWORD</P></TD><TD VALIGN="TOP">A value from the enumeration MEMCTX.</P></TD></TR><TR><TD VALIGN="TOP">ppMalloc</P></TD><TD VALIGN="TOP">IMalloc **</P></TD><TD VALIGN="TOP">The place in which the memory allocator should be returned.</P></TD></TR></TBODY></TABLE>
<BR></P></P>
  </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="178pt" VALIGN="TOP"><COL WIDTH="271pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Return Value</B></P></TD><TD VALIGN="TOP"><B>Meaning</B></P></TD></TR><TR><TD VALIGN="TOP">S_OK</P></TD><TD VALIGN="TOP">Success. The requested allocator was returned.</P></TD></TR><TR><TD VALIGN="TOP">CO_E_NOTINITIALIZED</P></TD><TD VALIGN="TOP">The COM library has not been initialized.</P></TD></TR><TR><TD VALIGN="TOP">E_INVALIDARG</P></TD><TD VALIGN="TOP">An invalid argument was passed.</P></TD></TR><TR><TD VALIGN="TOP">E_UNEXPECTED</P></TD><TD VALIGN="TOP">An unknown error occurred.</P></TD></TR></TBODY></TABLE>
<BR></P> </P></BODY></HTML>

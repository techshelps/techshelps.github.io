<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>COM Infrastructure</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

</OBJECT></FORM>
<H3>COM Infrastructure</H3>  </P>
COM provides more than just the fundamental object creation and management facilities: it also builds an infrastructure of three other core operating system components.</P>
<SPAN CLASS="list"><UL><LI><B>Persistent Storage</B>: A set of interfaces and an implementation of those interfaces that create structured storage, otherwise known as a "file system within a file." Information in a file is structured in a hierarchical fashion which enables sharing storage between processes, incremental access to information, transactioning support, and the ability for any code in the system to browse the elements of information in the file. In addition, COM defines standard "persistent storage" interfaces that objects implement to support the ability to save their persistent state to permanent, or persistent, storage devices such that the state of the object can be restored at a later time.</LI><LI><A NAME="PT2"></A><B>Persistent, Intelligent Names (Monikers)</B>: The ability to give a specific <I>instantiation</I> of an object a particular name that would allow a client to reconnect to that <I>exact same object instance with the same state </I>(not just another object of the same class) at a later time. This also includes the ability to assign a name to some sort of <I>operation</I>, such as a query, that could be repeatedly executed using only that name to refer to the operation. This level of indirection allows changes to happen behind the name without requiring any changes to the client that stores that particular name. This technology is centered around a type of object called a <I>moniker </I>and COM defines a set of interfaces that moniker objects implement. COM also defines a standard <I>composite moniker</I> that is used to create complex names that are built of simpler monikers. Monikers also implement one of the persistent storage interfaces meaning that they know how to save their name or other information to somewhere permanent. Monikers are intelligent because they know how to take the name information and somehow relocate the specific object or perform an operation to which that name refers.<font class="MissingLink" meta="aslch01_FNTen">10.</font></LI><LI><B>Uniform Data Transfer</B>: Standard interfaces through which data is exchanged between a client and an object and through which a client can ask an object to send notification (call event functions in the client) in case of a data change. The standards include powerful structures used to describe data formats as well as the storage mediums on which the data is exchanged.</LI></UL></SPAN>The combination of the foundation and the infrastructure COM components reveals a system that describes how to create and communicate with objects, how to store them, how to label to them, and how to exchange data with them. These four aspects of COM form the core of information management. Furthermore, the infrastructure components not only build on the foundation, but monikers and uniform data transfer also build on storage as shown in Figure 1-9. The result is a system that is not only very rich, but also deep, which means that work done in an application to implement lower level features is leveraged to build higher level features.</P>
<img src="ASL8B.gif"></P>
<B>Figure 1-9: COM is built in progressively higher level technologies that depend upon lower level technologies.</B></P>
 </P></BODY></HTML>

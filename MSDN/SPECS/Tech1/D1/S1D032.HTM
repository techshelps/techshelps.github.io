<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Chapter 7: Interface Remoting</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

</OBJECT></FORM>
<H1>Chapter 7: Interface Remoting</H1>  </P>
In COM, clients communicate with objects solely through the use of vtable-based interface instances. The state of the object is manipulated by invoking functions on those interfaces. For each interface method, the object provides an implementation that does the appropriate manipulation of the object internals.</P>
<I>Interface remoting </I>provides the infrastructure and mechanisms to allow a method invocation to return an interface pointer to an object that is in a different process, perhaps even on a different computer. The infrastructure that performs the remoting of interfaces is transparent to both the client and the object server. Neither the client or object server is necessarily aware that the other party is in fact in a different process.</P>
First, this chapter explains <font class="MissingLink" meta="aslch07_Works">how interface remoting works</font> giving mention to the interfaces and COM API functions involved. The specifications for the interfaces and the API functions themselves are given later in this chapter. There is also a brief discussion about concurrency management at the end of the chapter that involves an interface called IMessageFilter.</P>
You can read through this chapter, or choose a topic of interest from this list:</P>
<SPAN CLASS="list"><UL><LI><font class="MissingLink" meta="aslch07_CustomObjectMarshaling">Architecture of Customer Object Marshaling</font></LI><LI><font class="MissingLink" meta="aslch07_StandardInterface">Architecture of Standard Interface / Object Marshaling</font></LI><LI><font class="MissingLink" meta="aslch07_HandlerMarshaling">Architecture of Handler Marshaling</font></LI><LI><font class="MissingLink" meta="aslch07_DataPackets">Standards for Marshaled Data Packets</font></LI><LI><font class="MissingLink" meta="aslch07_BetweenProcesses">Creating an Initial Connection Between Processes</font></LI><LI><font class="MissingLink" meta="aslch07_FunctionDescriptions">Marshaling Interface and Function Descriptions</font></LI><LI><font class="MissingLink" meta="aslch07_APIFunctions">Marshaling-related API Functions</font></LI><LI><font class="MissingLink" meta="aslch07_RemoteDebugging">Support for Remote Debugging</font></LI></UL></SPAN></P>
 </P></BODY></HTML>

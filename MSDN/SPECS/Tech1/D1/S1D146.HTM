<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Connectable Objects and Events</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

</OBJECT></FORM>
<H3>Connectable Objects and Events</H3>  </P>
<A NAME="PT3"></A>In the preceding discussions of interfaces it was implied that, from the object's perspective, the interfaces were <I>incoming</I>. Incoming in the context of a client-object relationship, implies that the object <I>listens</I> to what the client has to say. In other words, incoming interfaces and their member functions receive input from the outside. COM also defines mechanisms where objects can support <I>outgoing</I> interfaces. Outgoing interfaces allow objects to have two-way conversations, so to speak, with clients. When an object supports one or more outgoing interfaces, it is said to be <I>connectable.</I> One of the most obvious uses for outgoing interfaces is for event notification. This section describes Connectable Objects.<font class="MissingLink" meta="FNSeven">7.</font></P>
A connectable object, also called a <I>source,</I> can have as many outgoing interfaces as it likes. Each interface is composed of distinct member functions, with each function representing a single <I>event, notification,</I> or <I>request.</I> Events and notifications are equivalent concepts and interchangeable terms, as they are both used to tell the client that something interesting happened in the object. Events and notifications differ from a request in that the object expects response from the client. A request, on the other hand, is how an object asks the client a question and expects a response.</P>
In all of these cases, there must be some client that listens to what the object has to say and uses that information wisely. It is the client, therefore, that actually implements these interfaces on objects called <I>sinks.</I> From the sink's perspective, the interfaces are incoming, meaning that the sink listens through them. A connectable object plays the role of a client as far as the sink is concerned; thus, the sink is what the object's client uses to listen to that object. </P>
<A NAME="PT4"></A>An object doesn't necessarily have a one-to-one relationship with a sink. In fact, a single instance of an object usually supports any number of connections to sinks in any number of separate clients. This is called <I>multicasting.</I><font class="MissingLink" meta="FNEight">8.</font><I> </I>In addition, any sink can be connected to any number of objects. </P>
Chapter 11 covers the Connectable Object interfaces (IConnectionPoint and IConnectionPointContainer) in complete detail.</P>
</P>
 </P></BODY></HTML>

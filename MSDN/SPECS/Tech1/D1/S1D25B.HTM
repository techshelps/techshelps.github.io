<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Object Calls</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

</OBJECT></FORM>
<H3>Object Calls</H3>  </P>
An actual COM network remote procedure call (hereinafter referred to as "an ORPC") is in fact a true DCE remote procedure call (herein termed "a DCE RPC"), a "Request PDU" conforming to the specification for such calls per [CAE RPC].</P>
<A NAME="PT2"></A>In an ORPC, the object ID field of the invocation header as specified in [CAE RPC] contains an IPID. An IPID is a 128-bit identifier known as an <I>interface pointer identifier</I> which represents a particular interface on a particular object in a particular server. As it is passed in the object ID fields of a DCE RPC, the static type of an IPID is in fact a UUID. However, IPIDs are scoped not globally but rather only relative to the computer on which the server is located (and which thus originally allocated them); IPIDs do not necessarily use the standard UUID allocation algorithm, but rather may use a computer-specific algorithm which can assist with dispatching.<font class="MissingLink" meta="aslch15_FNOne">1.</font></P>
<A NAME="PT3"></A>In an ORPC, the interface ID field of the RPC header specifies the IID, and arguments are found in the body, as usual.<font class="MissingLink" meta="aslch15_FNTwo">2.</font> However, when viewed from the DCE RPC perspective, an additional first argument is always present that is absent in the corresponding COM interface specification. This argument is of type ORPCTHIS, which is described below. It is placed first in the body of the Request PDU, before the actual arguments of the ORPC.</P>
It is specifically legal for an ORPC to attempt a call a method number on a given interface which is beyond the number of methods believed by the server to be in that interface. Such calls should cause a fault.</P>
Similarly, in a reply to an ORPC (a DCE RPC "Response PDU"), when viewed from the DCE RPC perspective, an additional first return value is always present that is absent in the corresponding COM interface specification. This argument is of type ORPCTHAT, which is also described below. It is placed first in the body of the Response PDU, before the actual return values of the ORPC.</P>
<A NAME="PT4"></A>An ORPCTHAT may also be present in a "Fault PDU." In the Connectionless (CL) Fault PDU,<font class="MissingLink" meta="aslch15_FNThree">3.</font> it is placed four bytes after the 32-bit fault code which normally comprises the entire body of the PDU, thus achieving eight byte alignment for the ORPCTHAT; the intervening padding bytes are presently reserved and must be zero. The PDU body length<font class="MissingLink" meta="aslch15_FNFour">4.</font> is of course set to encompass the entire body of the Fault PDU, including the ORPCTHAT. In the Connection-oriented (CO) Fault PDU, the ORPCTHAT is placed in the standard location allocated for the "stub data."<font class="MissingLink" meta="aslch15_FNFive">5.</font> In a Fault PDU of either form that results from an ORPC, if an ORPCTHAT is not present then no other data may be substituted in its here-specified location in the PDU.</P>
 </P></BODY></HTML>

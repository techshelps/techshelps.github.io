<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Footnotes</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

</OBJECT></FORM>
<H3>Footnotes</H3>  </P>
<A NAME="PT2"></A>1.    By definition one cannot, for example, write a source-portable DCE IDL compiler, because the code that calls SendReceive in the proxies is implementation-specific. <font class="MissingLink" meta="aslch13_returnFNOne">[Back]</font></P>
<A NAME="PT3"></A>2.    Microsoft has in its MIDL specification language defined additional extensions to DCE IDL; however, these are orthogonal to the subject of COM interface, and thus are not dealt with here. <font class="MissingLink" meta="aslch13_returnFNTwo">[Back]</font></P>
<A NAME="PT4"></A>3.    This is a non-COM-related Microsoft extension, shown here for completeness. <font class="MissingLink" meta="aslch13_returnFNThree">[Back]</font></P>
<A NAME="PT5"></A>4.    Historically the library statement was supported only in a variant of IDL called ODL that was central to OLE Automation. <font class="MissingLink" meta="aslch13_returnFNFour">[Back]</font></P>
<P></P>
 </P></BODY></HTML>

<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Isolation of Transfer Protocols</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

</OBJECT></FORM>
<H2>Isolation of Transfer Protocols</H2>  </P>
The <I>Uniform</I> in the name of this technology arose from the fact that the <B>IDataObject </B>interface separates all the common exchange operations from what is called a <I>transfer protocol</I>. Existing protocols include facilities such as a "clipboard" or a "drag-and-drop" feature as well as compound documents as implemented in OLE. With Uniform Data Transfer, all protocols are concerned only with exchanging a pointer to an <B>IDataObject </B>interface. The source of the data—the server—need only implement one data object which is usable in any exchange protocol and that's it. The consumer—the client—need only implement one piece of code to request data from a data object once it receives an <B>IDataObject</B> pointer from any protocol. Once the pointer exchange has occurred, both sides deal with data exchange in a uniform fashion, through <B>IDataObject.</B></P>
This uniformity not only reduces the code necessary to source or consume data, but also greatly simplifies the code needed to work with the protocol itself. Before COM was first implemented in OLE 2, each transfer protocol available on Microsoft Windows had its own set of functions that tightly bound the protocol to the act of requesting data. So programmers had to implement specific code to handle each different protocol and exchange procedure. Now that the exchange functionality is separated from the protocol, dealing with each protocol requires only a minimum amount of code which is absolutely necessary for the semantics of that protocol.</P>
While of course extremely useful in the context of OLE 2, Uniform Data Transfer is a generic service with applications far beyond OLE.</P>
</P>
 </P></BODY></HTML>

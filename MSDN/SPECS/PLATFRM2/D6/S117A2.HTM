<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Controls and Menus</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

</OBJECT></FORM>
<H2>Controls and Menus</H2>  </P>
A sighted user can usually identify a control, such as a push button or check box, by its appearance, but a user who is blind has to rely on a screen review utility to describe the object in words. The utility presents the user with the name, type, and state of the control. For example, after the user has tabbed to a check box, the utility might say "Quick Printing check box, checked." Obviously, it can only do this if it can determine all the properties from the application. Voice input utilities and on-screen keyboards have similar requirements; they need to identify and name specific controls and to determine how to manipulate the control in response to the user's commands. In some cases, the use of nonstandard controls can render an application completely unusable for users who rely on accessibility aids.</P>
Controls can be divided into these categories, each of which will be discussed in the following sections:</P>
<SPAN CLASS="list"><UL><LI>Standard Windows controls (including Windows common controls).</LI><LI>Owner-drawn controls, which behave like standard controls, but have a customized appearance.</LI><LI>Superclassed standard controls, which add customized behavior to a standard Windows control.</LI><LI>Custom controls, which are implemented by an application without using the normal Windows mechanisms.</LI><LI>OLE Controls, which are custom controls designed to a standard programming interface.</LI><LI>Owner-drawn menus.</LI></UL></SPAN> </P></BODY></HTML>

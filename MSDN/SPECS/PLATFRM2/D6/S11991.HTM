<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Limitations of Keyboard Access</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

</OBJECT></FORM>
<H3>Limitations of Keyboard Access</H3>  </P>
Usable keyboard access should be provided for all features in an application. However, it may not be feasible sometimes. In some cases, it might be too cumbersome for users to use and too challenging for the application designers to implement, especially if the particular feature being considered will be used only occasionally. There are also rare cases where a dialog box is so complex that unique access keys cannot be assigned. In these cases, common sense should dictate where tradeoffs need to be made.</P>
Users can always fall back on tools that enable them to simulate mouse input using the keyboard or other input mechanism, but these tools should not be considered a substitute for good keyboard interface design. For example, a simple drag and drop operation might require 40 or more keystrokes. Operations using that many keystrokes might make an application accessible, but it would certainly not be considered usable or user-friendly. In any case, a user who is blind might still find it difficult to perform such a visual operation using keystrokes. Application designers can design efficient, comprehensive keyboard interfaces for their applications and should make every effort to do so.</P>
 </P></BODY></HTML>

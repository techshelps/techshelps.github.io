<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>1.5 Revision History</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

</OBJECT></FORM>
<H3>1.5 Revision History</H3>  </P>
</P>
<A NAME="PT2"></A>1.5.1 Windows Sockets Version 1.0</P>
Windows Sockets Version 1.0 represented the results of considerable work within  the vendor and user community as discussed in Appendix C. This version of  the specification was released in order that network software suppliers and  application developers could begin to construct implementations and applications  which conformed to the Windows Sockets standard.</P>
<A NAME="PT3"></A>1.5.2 Windows Sockets Version 1.1</P>
Windows Sockets Version 1.1 follows the guidelines and structure laid out by version 1.0, making changes only where absolutely necessary as indicated by the experiences of a number of companies that created Windows Sockets implementations based on the version 1.0 specification.  Version 1.1 contains several clarifications and minor fixes to version 1.0.  Additionally, the following more significant changes were incorporated into version 1.1:</P>
<SPAN CLASS="list"><UL><LI>Inclusion of the gethostname() routine to simplify retrieval of the host's name and address.</LI><LI>Definition of DLL ordinal values below 1000 as reserved for Windows Sockets and ordinals above 1000 as unrestricted.  This allows Windows Sockets vendors to include private interfaces to their DLLs without risking that the ordinals chosen will conflict with a future version of Windows Sockets.</LI><LI>Addition of a reference count to WSAStartup() and WSACleanup(), requiring correspondences between the calls.  This allows applications and third-party DLLs to make use of a Windows Sockets implementation without being concerned about the calls to these APIs made by the other.</LI><LI>Change of return type of inet_addr() from struct in_addr to unsigned long.  This was required due to different handling of four-byte structure returns between the Microsoft and Borland C compilers.</LI><LI>Change of WSAAsyncSelect() semantics from "edge-triggered" to "level-triggered".  The level-triggered semantics significantly simplify an application's use of this routine.</LI><LI>Change the ioctlsocket() FIONBIO semantics to fail if a WSAAsyncSelect() call is outstanding on the socket.</LI><LI>Addition of the TCP_NODELAY socket option for RFC 1122 conformance.
All changes between the 1.0 and 1.1 specifications are flagged with change bars at the left of the page.</P></LI></UL></SPAN> </P></BODY></HTML>

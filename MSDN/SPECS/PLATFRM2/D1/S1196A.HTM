<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>4.2 Database Routines</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

</OBJECT></FORM>
<H3>4.2 Database Routines</H3>  </P>
<A NAME="PT2"></A>4.2.1 gethostbyaddr()</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="298pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Description</P></TD><TD VALIGN="TOP">Get host information corresponding to an address.</P></TD></TR><TR><TD VALIGN="TOP"> </P></TD><TD VALIGN="TOP">#include &lt;winsock.h&gt;</P></TD></TR><TR><TD VALIGN="TOP"> </P></TD><TD VALIGN="TOP">struct hostent FAR * PASCAL FAR gethostbyaddr ( const char FAR * addr, int len,  int type );</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="226pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">addr</P></TD><TD VALIGN="TOP">A pointer to an address in network byte order.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">len</P></TD><TD VALIGN="TOP">The length of the address, which must be 4 for PF_INET addresses.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">type</P></TD><TD VALIGN="TOP">The type of the address, which must be PF_INET.</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="226pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Remarks</P></TD><TD VALIGN="TOP">gethostbyaddr() returns a pointer to the following structure which contains the name(s) and address which correspond to the given address.  </P></TD></TR></TBODY></TABLE>
<BR></P>  </P>
struct hostent {</P>
    char FAR *    h_name;</P>
    char FAR * FAR *    h_aliases;</P>
    short    h_addrtype;</P>
    short    h_length;</P>
    char FAR * FAR *    h_addr_list;</P>
<P>};        </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="298pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">The members of this structure are:</P>
Element        Usage</P>
h_name        Official name of the host (PC).</P>
h_aliases        A NULL-terminated array of alternate names.</P></TD></TR><TR><TD VALIGN="TOP">h_addrtype</P></TD><TD VALIGN="TOP">The type of address being returned; for Windows Sockets this is always PF_INET.</P></TD></TR><TR><TD VALIGN="TOP">h_length</P></TD><TD VALIGN="TOP">The length, in bytes, of each address; for PF_INET, this is always 4.</P></TD></TR><TR><TD VALIGN="TOP">h_addr_list</P></TD><TD VALIGN="TOP">A NULL-terminated list of addresses for the host.  Addresses are returned in network byte order.</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>

<TABLE COLS="1" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="370pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">The macro h_addr is defined to be h_addr_list[0] for compatibility with older software.</P></TD></TR><TR><TD VALIGN="TOP">  The pointer which is returned points to a structure which is allocated by the Windows Sockets implementation.  The application must never attempt to modify this structure or to free any of its components.  Furthermore, only one copy of this structure is allocated per thread, and so the application should copy any information which it needs before issuing any other Windows Sockets API calls.</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="298pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Return Value</P></TD><TD VALIGN="TOP">If no error occurs, gethostbyaddr() returns a pointer to the hostent structure described above.  Otherwise it returns a NULL pointer and a specific error number may be retrieved by calling WSAGetLastError().</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="154pt" VALIGN="TOP"><COL WIDTH="154pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Error Codes</P></TD><TD VALIGN="TOP">WSANOTINITIALISED<BR><BR>WSAENETDOWN<BR><BR><BR>WSAHOST_NOT_FOUND<BR>WSATRY_AGAIN<BR><BR>WSANO_RECOVERY<BR><BR>WSANO_DATA<BR><BR>WSAEINPROGRESS<BR><BR>WSAEINTR</P></TD><TD VALIGN="TOP">A successful WSAStartup() must occur before using this API.<BR>The Windows Sockets implementation has detected that the network subsystem has failed.<BR>Authoritative Answer Host not found.<BR>Non-Authoritative Host not found, or SERVERFAIL.<BR>Non recoverable errors, FORMERR, REFUSED, NOTIMP.<BR>Valid name, no data record of requested type.<BR>A blocking Windows Sockets operation is in progress.<BR>The (blocking) call was canceled via WSACancelBlockingCall().</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="298pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">See Also</P></TD><TD VALIGN="TOP">WSAAsyncGetHostByAddr(), gethostbyname(),</P></TD></TR></TBODY></TABLE>
<BR></P><A NAME="PT3"></A>4.2.2 gethostbyname()</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="298pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Description</P></TD><TD VALIGN="TOP">Get host information corresponding to a hostname.</P></TD></TR><TR><TD VALIGN="TOP"> </P></TD><TD VALIGN="TOP">#include &lt;winsock.h&gt;</P></TD></TR><TR><TD VALIGN="TOP"> </P></TD><TD VALIGN="TOP">struct hostent FAR * PASCAL FAR gethostbyname ( const char FAR * name );</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="226pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">name</P></TD><TD VALIGN="TOP">A pointer to the name of the host.</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="298pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Remarks</P></TD><TD VALIGN="TOP">gethostbyname() returns a pointer to a hostent structure as described under gethostbyaddr().  The contents of this structure correspond to the hostname name.</P></TD></TR></TBODY></TABLE>
<BR></P>The pointer which is returned points to a structure which is allocated by the Windows Sockets implementation.  The application must never attempt to modify this structure or to free any of its components.  Furthermore, only one copy of this structure is allocated per thread, and so the application should copy any information which it needs before issuing any other Windows Sockets API calls.</P>
A gethostbyname() implementation must not resolve IP address strings passed to it.  Such a request should be treated exactly as if an unknown host name were passed.  An application with an IP address string to resolve should use inet_addr() to convert the string to an IP address, then gethostbyaddr() to obtain the hostent structure.</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="298pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Return Value</P></TD><TD VALIGN="TOP">If no error occurs, gethostbyname() returns a pointer to the hostent structure described above.  Otherwise it returns a NULL pointer and a specific error number may be retrieved by calling WSAGetLastError().</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="118pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Error Codes</P></TD><TD VALIGN="TOP">WSANOTINITIALISED<BR><BR>WSAENETDOWN<BR><BR>WSAHOST_NOT_FOUND<BR>WSATRY_AGAIN<BR><BR>WSANO_RECOVERY<BR><BR>WSANO_DATA<BR>WSAEINPROGRESS<BR><BR>WSAEINTR</P></TD><TD VALIGN="TOP">A successful WSAStartup() must occur before using this API.<BR>The Windows Sockets implementation has detected that the network subsystem has failed.<BR>Authoritative Answer Host not found.<BR>Non-Authoritative Host not found, or SERVERFAIL.<BR>Non recoverable errors, FORMERR, REFUSED, NOTIMP.<BR>Valid name, no data record of requested type.<BR>A blocking Windows Sockets operation is in progress.<BR>The (blocking) call was canceled via WSACancelBlockingCall().</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="298pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">See Also</P></TD><TD VALIGN="TOP">WSAAsyncGetHostByName(), gethostbyaddr()</P></TD></TR></TBODY></TABLE>
<BR></P><A NAME="PT4"></A>4.2.3 gethostname()</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="298pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Description</P></TD><TD VALIGN="TOP">Return the standard host name for the local machine.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">#include &lt;winsock.h&gt;</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">int PASCAL FAR gethostname ( char FAR * name, int namelen );</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="226pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">name</P></TD><TD VALIGN="TOP">A pointer to a buffer that will receive the host name.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">namelen</P></TD><TD VALIGN="TOP">The length of the buffer.</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="298pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Remarks</P></TD><TD VALIGN="TOP">This routine returns the name of the local host into the buffer specified by the name parameter.  The host name is returned as a null-terminated string.  The form of the host name is dependent on the Windows Sockets implementation--it may be a simple host name, or it may be a fully qualified domain name.  However, it is guaranteed that the name returned will be successfully parsed by gethostbyname() and WSAAsyncGetHostByName().</P></TD></TR><TR><TD VALIGN="TOP">Return Value</P></TD><TD VALIGN="TOP">If no error occurs, gethostname() returns 0, otherwise it returns SOCKET_ERROR and a specific error code may be retrieved by calling WSAGetLastError().</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="118pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Error Codes</P></TD><TD VALIGN="TOP">WSAEFAULT<BR>WSANOTINITIALISED<BR><BR>WSAENETDOWN<BR><BR>WSAEINPROGRESS</P></TD><TD VALIGN="TOP">The namelen parameter is too small<BR>A successful WSAStartup() must occur before using this API.<BR>The Windows Sockets implementation has detected that the network subsystem has failed.<BR>A blocking Windows Sockets operation is in progress.</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="298pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">See Also</P></TD><TD VALIGN="TOP">gethostbyname(), WSAAsyncGetHostByName().</P></TD></TR></TBODY></TABLE>
<BR></P><A NAME="PT5"></A>4.2.4 getprotobyname()</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="298pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Description</P></TD><TD VALIGN="TOP">Get protocol information corresponding to a protocol name.</P></TD></TR><TR><TD VALIGN="TOP"> </P></TD><TD VALIGN="TOP">#include &lt;winsock.h&gt;</P></TD></TR><TR><TD VALIGN="TOP"> </P></TD><TD VALIGN="TOP">struct protoent FAR * PASCAL FAR getprotobyname ( const char FAR * name );</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="226pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">name</P></TD><TD VALIGN="TOP">A pointer to a protocol name.</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="226pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Remarks</P></TD><TD VALIGN="TOP">getprotobyname() returns a pointer to the following structure which contains the name(s) and protocol number which correspond to the given protocol name.  </P></TD></TR></TBODY></TABLE>
<BR></P>  </P>
struct protoent {</P>
    char FAR *    p_name;</P>
    char FAR * FAR *    p_aliases;</P>
    short    p_proto;</P>
<P>};</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="298pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">The members of this structure are:</P>
Element    Usage</P>
p_name    Official name of the protocol.</P>
p_aliases    A NULL-terminated array of alternate names.</P>
p_proto    The protocol number, in host byte order.</P>
The pointer which is returned points to a structure which is allocated by the Windows Sockets library.  The application must never attempt to modify this structure or to free any of its components.  Furthermore only one copy of this structure is allocated per thread, and so the application should copy any information which it needs before issuing any other Windows Sockets API calls.</P></TD></TR><TR><TD VALIGN="TOP">Return Value</P></TD><TD VALIGN="TOP">If no error occurs, getprotobyname() returns a pointer to the protoent structure described above.  Otherwise it returns a NULL pointer and a specific error number may be retrieved by calling WSAGetLastError().</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="118pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Error Codes</P></TD><TD VALIGN="TOP">WSANOTINITIALISED<BR><BR>WSAENETDOWN<BR><BR>WSANO_RECOVERY<BR><BR>WSANO_DATA<BR>WSAEINPROGRESS<BR><BR>WSAEINTR</P></TD><TD VALIGN="TOP">A successful WSAStartup() must occur before using this API.<BR>The Windows Sockets implementation has detected that the network subsystem has failed.<BR>Non recoverable errors, FORMERR, REFUSED, NOTIMP.<BR>Valid name, no data record of requested type.<BR>A blocking Windows Sockets operation is in progress.<BR>The (blocking) call was canceled via WSACancelBlockingCall().</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="298pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">See Also</P></TD><TD VALIGN="TOP">WSAAsyncGetProtoByName(), getprotobynumber()</P></TD></TR></TBODY></TABLE>
<BR></P><A NAME="PT6"></A>4.2.5 getprotobynumber()</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="298pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Description</P></TD><TD VALIGN="TOP">Get protocol information corresponding to a protocol number.</P></TD></TR><TR><TD VALIGN="TOP"> </P></TD><TD VALIGN="TOP">#include &lt;winsock.h&gt;</P></TD></TR><TR><TD VALIGN="TOP"> </P></TD><TD VALIGN="TOP">struct protoent FAR * PASCAL FAR getprotobynumber ( int number );</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="226pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">number</P></TD><TD VALIGN="TOP">A protocol number, in host byte order.</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="298pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Remarks</P></TD><TD VALIGN="TOP">This function returns a pointer to a protoent structure as described above in getprotobyname().  The contents of the structure correspond to the given protocol number.<BR>The pointer which is returned points to a structure which is allocated by the Windows Sockets implementation.  The application must never attempt to modify this structure or to free any of its components.  Furthermore, only one copy of this structure is allocated per thread, and so the application should copy any information which it needs before issuing any other Windows Sockets API calls.</P></TD></TR><TR><TD VALIGN="TOP">Return Value</P></TD><TD VALIGN="TOP">If no error occurs, getprotobynumber() returns a pointer to the protoent structure described above.  Otherwise it returns a NULL pointer and a specific error number may be retrieved by calling WSAGetLastError().</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="118pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Error Codes</P></TD><TD VALIGN="TOP">WSANOTINITIALISED<BR><BR>WSAENETDOWN<BR><BR>WSANO_RECOVERY<BR><BR>WSANO_DATA<BR>WSAEINPROGRESS<BR><BR>WSAEINTR</P></TD><TD VALIGN="TOP">A successful WSAStartup() must occur before using this API.<BR>The Windows Sockets implementation has detected that the network subsystem has failed.<BR>Non recoverable errors, FORMERR, REFUSED, NOTIMP.<BR>Valid name, no data record of requested type.<BR>A blocking Windows Sockets operation is in progress.<BR>The (blocking) call was canceled via WSACancelBlockingCall().</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="298pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">See Also</P></TD><TD VALIGN="TOP">WSAAsyncGetProtoByNumber(), getprotobyname()</P></TD></TR></TBODY></TABLE>
<BR></P><A NAME="PT7"></A>4.2.6 getservbyname()</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="298pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Description</P></TD><TD VALIGN="TOP">Get service information corresponding to a service name and protocol.</P></TD></TR><TR><TD VALIGN="TOP"> </P></TD><TD VALIGN="TOP">#include &lt;winsock.h&gt;</P></TD></TR><TR><TD VALIGN="TOP"> </P></TD><TD VALIGN="TOP">struct servent FAR * PASCAL FAR getservbyname ( const char FAR * name, const char FAR * proto );</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="226pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">name</P></TD><TD VALIGN="TOP">A pointer to a service name.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">proto</P></TD><TD VALIGN="TOP">An optional pointer to a protocol name.  If this is NULL, getservbyname() returns the first service entry for which the name matches the s_name or one of the s_aliases.  Otherwise getservbyname() matches both the name and the proto.</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="226pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Remarks</P></TD><TD VALIGN="TOP">getservbyname() returns a pointer to the following structure which contains the name(s) and service number which correspond to the given service name.  </P></TD></TR></TBODY></TABLE>
<BR></P>  </P>
struct servent {</P>
    char FAR *    s_name;</P>
    char FAR * FAR *    s_aliases;</P>
    short    s_port;</P>
    char FAR *    s_proto;</P>
<P>};</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="298pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">The members of this structure are:</P>
Element    Usage</P>
s_name    Official name of the service.</P>
s_aliases    A NULL-terminated array of alternate names.</P>
s_port    The port number at which the service may be contacted.  Port numbers are returned in network byte order.</P>
s_proto    The name of the protocol to use when contacting the service.</P>
The pointer which is returned points to a structure which is allocated by the Windows Sockets library.  The application must never attempt to modify this structure or to free any of its components.  Furthermore only one copy of this structure is allocated per thread, and so the application should copy any information which it needs before issuing any other Windows Sockets API calls.</P></TD></TR><TR><TD VALIGN="TOP">Return Value</P></TD><TD VALIGN="TOP">If no error occurs, getservbyname() returns a pointer to the servent structure described above.  Otherwise it returns a NULL pointer and a specific error number may be retrieved by calling WSAGetLastError().</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="118pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Error Codes</P></TD><TD VALIGN="TOP">WSANOTINITIALISED<BR><BR>WSAENETDOWN<BR><BR>WSANO_RECOVERY<BR><BR>WSANO_DATA<BR>WSAEINPROGRESS<BR><BR>WSAEINTR</P></TD><TD VALIGN="TOP">A successful WSAStartup() must occur before using this API.<BR>The Windows Sockets implementation has detected that the network subsystem has failed.<BR>Non recoverable errors, FORMERR, REFUSED, NOTIMP.<BR>Valid name, no data record of requested type.<BR>A blocking Windows Sockets operation is in progress.<BR>The (blocking) call was canceled via WSACancelBlockingCall().</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="298pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">See Also</P></TD><TD VALIGN="TOP">WSAAsyncGetServByName(), getservbyport()</P></TD></TR></TBODY></TABLE>
<BR></P><A NAME="PT8"></A>4.2.7 getservbyport()</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="298pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Description</P></TD><TD VALIGN="TOP">Get service information corresponding to a port and protocol.</P></TD></TR><TR><TD VALIGN="TOP"> </P></TD><TD VALIGN="TOP">#include &lt;winsock.h&gt;</P></TD></TR><TR><TD VALIGN="TOP"> </P></TD><TD VALIGN="TOP">struct servent FAR * PASCAL FAR getservbyport ( int port, const char FAR * proto );</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="226pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">port</P></TD><TD VALIGN="TOP">The port for a service, in network byte order.</P></TD></TR><TR><TD VALIGN="TOP"></P></TD><TD VALIGN="TOP">proto</P></TD><TD VALIGN="TOP">An optional pointer to a protocol name.  If this is NULL, getservbyport() returns the first service entry for which the port matches the s_port.  Otherwise getservbyport() matches both the port and the proto.</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="298pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Remarks</P></TD><TD VALIGN="TOP">getservbyport() returns a pointer a servent structure as described above for getservbyname().</P></TD></TR></TBODY></TABLE>
<BR></P>The pointer which is returned points to a structure which is allocated by the Windows Sockets implementation.  The application must never attempt to modify this structure or to free any of its components.  Furthermore, only one copy of this structure is allocated per thread, and so the application should copy any information which it needs before issuing any other Windows Sockets API calls.</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="298pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Return Value</P></TD><TD VALIGN="TOP">If no error occurs, getservbyport() returns a pointer to the servent structure described above.  Otherwise it returns a NULL pointer and a specific error number may be retrieved by calling WSAGetLastError().</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="118pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Error Codes</P></TD><TD VALIGN="TOP">WSANOTINITIALISED<BR><BR>WSAENETDOWN<BR><BR>WSANO_RECOVERY<BR><BR>WSANO_DATA<BR>WSAEINPROGRESS<BR><BR>WSAEINTR</P></TD><TD VALIGN="TOP">A successful WSAStartup() must occur before using this API.<BR>The Windows Sockets implementation has detected that the network subsystem has failed.<BR>Non recoverable errors, FORMERR, REFUSED, NOTIMP.<BR>Valid name, no data record of requested type.<BR>A blocking Windows Sockets operation is in progress.<BR>The (blocking) call was canceled via WSACancelBlockingCall().</P></TD></TR></TBODY></TABLE>
<BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="298pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">See Also</P></TD><TD VALIGN="TOP">WSAAsyncGetServByPort(), getservbyname()</P></TD></TR></TBODY></TABLE>
<BR></P> </P></BODY></HTML>

<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>2.2 Sockets</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

</OBJECT></FORM>
<H3>2.2 Sockets</H3>  </P>
The following material is derived from the document "An Advanced 4.3BSD Interprocess Communication Tutorial" by Samuel J. Leffler, Robert S. Fabry, William N. Joy, Phil Lapsley, Steve Miller, and Chris Torek.</P>
<A NAME="PT2"></A>2.2.1 Basic concepts</P>
The basic building block for communication is the socket.  A socket is an endpoint of communication to which a name may be bound.  Each socket in use has a type and an associated process.  Sockets exist within communication domains.  A communication domain is an abstraction introduced to bundle common properties of threads communicating through sockets.  Sockets normally exchange data only with sockets in the same domain (it may be possible to cross domain boundaries, but only if some translation process is performed).  The Windows Sockets facilities support a single communication domain: the Internet domain, which is used by processes which communicate using the Internet Protocol Suite.  (Future versions of this specification may include additional domains.) </P>
Sockets are typed according to the communication properties visible to a user.  Applications are presumed to communicate only between sockets of the same type, although there is nothing that prevents communication between sockets of different types should the underlying communication protocols support this.  </P>
Two types of sockets currently are available to a user.  A stream socket provides for the bi-directional, reliable, sequenced, and unduplicated flow of data without record boundaries.  </P>
A datagram socket supports bi-directional flow of data which is not promised to be sequenced, reliable, or unduplicated.  That is, a process receiving messages on a datagram socket may find messages duplicated, and, possibly, in an order different from the order in which it was sent.  An important characteristic of a datagram socket is that record boundaries in data are preserved.  Datagram sockets closely model the facilities found in many contemporary packet switched networks such as Ethernet.  </P>
<A NAME="PT3"></A>2.2.2 Client-server model</P>
The most commonly used paradigm in constructing distributed applications is the client/server model.  In this scheme client applications request services from a server application.  This implies an asymmetry in establishing communication between the client and server.  </P>
The client and server require a well-known set of conventions before service may be rendered (and accepted).  This set of conventions comprises a protocol which must be implemented at both ends of a connection.  Depending on the situation, the protocol may be symmetric or asymmetric.  In a symmetric protocol, either side may play the master or slave roles.  In an asymmetric protocol, one side is immutably recognized as the master, with the other as the slave.  An example of a symmetric protocol is the TELNET protocol used in the Internet for remote terminal emulation.  An example of an asymmetric protocol is the Internet file transfer protocol, FTP.  No matter whether the specific protocol used in obtaining a service is symmetric or asymmetric, when accessing a service there is a "client process'' and a "server process''.  </P>
A server application normally listens at a well-known address for service requests.  That is, the server process remains dormant until a connection is requested by a client's connection to the server's address.  At such a time the server process "wakes up'' and services the client, performing whatever appropriate actions the client requests of it.  While connection-based services are the norm, some services are based on the use of datagram sockets.  </P>
<A NAME="PT4"></A>2.2.3 Out-of-band data</P>
  </P>
<B>Note</B>   The following discussion of out-of-band data, also referred to as TCP Urgent data,  follows the model used in the Berkeley software distribution.  Users and implementors should be aware of the fact that there are at present two conflicting interpretations of RFC 793 (in which the concept is introduced), and that the implementation of out-of-band data in the Berkeley Software Distribution does not conform to the Host Requirements laid down in RFC 1122.  To minimize interoperability problems, applications writers are advised not to use out-of-band data unless this is required in order to interoperate with an existing service.  Windows Sockets suppliers are urged to document the out-of-band semantics (BSD or RFC 1122) which their product implements.  It is beyond the scope of this specification to mandate a particular set of semantics for out-of-band data handling.</P>
  </P>
The stream socket abstraction includes the notion of "out of band'' data.  Out-of-band data is a logically independent transmission channel associated with each pair of connected stream sockets.  Out-of-band data is delivered to the user independently of normal data.  The abstraction defines that the out-of-band data facilities must support the reliable delivery of at least one out-of-band message at a time.  This message may contain at least one byte of data, and at least one message may be pending delivery to the user at any one time.  For communications protocols which support only in-band signaling (i.e.  the urgent data is delivered in sequence with the normal data), the system normally extracts the data from the normal data stream and stores it separately.  This allows users to choose between receiving the urgent data in order and receiving it out of sequence without having to buffer all the intervening data.  It is possible to "peek'' at out-of-band data.  </P>
An application may prefer to process out-of-band data "in-line", as part of the normal data stream.  This is achieved by setting the socket option SO_OOBINLINE (see section 4.1.21, setsockopt()).  In this case, the application may wish to determine whether any of the unread data is "urgent" (the term usually applied to in-line out-of-band data).  To facilitate this, the Windows Sockets implementation will maintain a logical "mark" in the data stream indicate the point at which the out-of-band data was sent.  An application can use the SIOCATMARK ioctlsocket() command (see section 4.1.12) to determine whether there is any unread data preceding the mark.  For example, it might use this to resynchronize with its peer by ensuring that all data up to the mark in the data stream is discarded when appropriate.</P>
The WSAAsyncSelect() routine is particularly well suited to handling notification of the presence of out-of-band-data.</P>
<A NAME="PT5"></A>2.2.4 Broadcasting</P>
By using a datagram socket, it is possible to send broadcast packets on many networks supported by the system.  The network itself must support broadcast: the system provides no simulation of broadcast in software.  Broadcast messages can place a high load on a network, since they force every host on the network to service them.  Consequently, the ability to send broadcast packets has been limited to sockets which are explicitly marked as allowing broadcasting.  Broadcast is typically used for one of two reasons: it is desired to find a resource on a local network without prior knowledge of its address, or important functions such as routing require that information be sent to all accessible neighbors.</P>
The destination address of the message to be broadcast depends on the network(s) on which the message is to be broadcast.  The Internet domain supports a shorthand notation for broadcast on the local network, the address INADDR_BROADCAST.  Received broadcast messages contain the senders address and port, as datagram sockets must be bound before use.</P>
Some types of network support the notion of different types of broadcast.  For example, the IEEE 802.5 token ring architecture supports the use of link-level broadcast indicators, which control whether broadcasts are forwarded by bridges.  The Windows Sockets specification does not provide any mechanism whereby an application can determine the type of underlying network, nor any way to control the semantics of broadcasting.</P>
 </P></BODY></HTML>

<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>2.3.1 /Fa, /FA, /Fc and /Fl</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
</OBJECT></FORM>
<H4>2.3.1 /Fa, /FA, /Fc and /Fl</H4>Microsoft has extended the C7 /Fa, /Fc, /Fl assembly listing functionality by deprecating /Fc and /Fl, and adding /FA*.  The idea is that /Fa names the assembly listing file, and /FA describes what should be in it in addition to the basic assembly text.</P>
/FA takes a string argument, which may contain the letters 'a', 'c', or 's'.</P>
<SPAN CLASS="list"><UL><LI>    a turns on assembler code representation; it is always implied and is thus a no-op.</LI><LI>    c turns on code-bytes, and causes the default extension to be.  COD instead of .ASM.</LI><LI>    s turns on source code.</LI></UL></SPAN>CLAXP does not produce an assemblable assembly language source file. Only options that create a .COD file are valid. In effect, the default is .COD because that is the only form of listing supported.</P>
While /Fc and /Fl are still silently accepted, they aren't being documented. Comparison of old and new formats:</P>
  </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="69pt" VALIGN="TOP"><COL WIDTH="172pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>old</B></P></TD><TD VALIGN="TOP"><B>new</B></P></TD></TR></TBODY></TABLE>
<BR></P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="69pt" VALIGN="TOP"><COL WIDTH="172pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">/Fa</P></TD><TD VALIGN="TOP">/FA and/or /Fa</P></TD></TR><TR><TD VALIGN="TOP">/Fc</P></TD><TD VALIGN="TOP">/FAcs (with or without /Fa)</P></TD></TR><TR><TD VALIGN="TOP">/Fl</P></TD><TD VALIGN="TOP">/FAc (with or without /Fa)</P></TD></TR><TR><TD VALIGN="TOP">/Fa{file}</P></TD><TD VALIGN="TOP">/Fa{file} (with or without /FA)</P></TD></TR><TR><TD VALIGN="TOP">/Fc{file}</P></TD><TD VALIGN="TOP">/Fa{file} /FAcs</P></TD></TR><TR><TD VALIGN="TOP">/Fl{file}</P></TD><TD VALIGN="TOP">/Fa{file}_/FAs</P></TD></TR></TBODY></TABLE>
<BR></P>The overrides are set up in such a way that /Fc, /Fl and /FA are mutually overriding, as are /Fc /Fl and /Fa, while /Fa and /FA do not override.</P>
An alternative description for CLAXP presents the options in two groups. Group 1 is as follows:</P>
  </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="123pt" VALIGN="TOP"><COL WIDTH="298pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Option</B></P></TD><TD VALIGN="TOP"><B>Interpretation</B></P></TD></TR></TBODY></TABLE>
<BR></P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="123pt" VALIGN="TOP"><COL WIDTH="298pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">/Fa</P></TD><TD VALIGN="TOP">Error, but treated as if /FAc specified</P></TD></TR><TR><TD VALIGN="TOP">/Fa{file}</P></TD><TD VALIGN="TOP">Error, but treated as if /FAc specified</P></TD></TR><TR><TD VALIGN="TOP">/Fc</P></TD><TD VALIGN="TOP">Undocumented, but equivalent to /Fa /FAc</P></TD></TR><TR><TD VALIGN="TOP">/Fc{file}</P></TD><TD VALIGN="TOP">Undocumented, but equivalent to /Fa{file} /FAc</P></TD></TR><TR><TD VALIGN="TOP">/Fl</P></TD><TD VALIGN="TOP">Undocumented, but equivalent to /Fa /FAcs</P></TD></TR><TR><TD VALIGN="TOP">/Fl{file}</P></TD><TD VALIGN="TOP">Undocumented, but equivalent to /Fa{file} /FAcs</P></TD></TR></TBODY></TABLE>
<BR></P>Group 2 is:</P>
  </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="123pt" VALIGN="TOP"><COL WIDTH="298pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><B>Option</B></P></TD><TD VALIGN="TOP"><B>Interpretation</B></P></TD></TR></TBODY></TABLE>
<BR></P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="123pt" VALIGN="TOP"><COL WIDTH="298pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">/FA</P></TD><TD VALIGN="TOP">Error (equivalent to /FAa), but forced to /FAc</P></TD></TR><TR><TD VALIGN="TOP">/FAa</P></TD><TD VALIGN="TOP">Error (.ASM), but forced to /FAc (.COD)</P></TD></TR><TR><TD VALIGN="TOP">/FAc or /FAac</P></TD><TD VALIGN="TOP">Create listing with code bytes (.COD)</P></TD></TR><TR><TD VALIGN="TOP">/FAcs or /FAacs</P></TD><TD VALIGN="TOP">Create listing with code bytes and source (.COD)</P></TD></TR><TR><TD VALIGN="TOP">/FAs or /FAas</P></TD><TD VALIGN="TOP">Error (equivalent to /FAas), but forced to /FAcs</P></TD></TR></TBODY></TABLE>
<BR></P>/Fa or /Fafile can be added in combination with any of the Group 2 options. The effect is only to determine the name of the file created. Whether the requested file can be created or not is  determined solely by the associated /FA form. As noted above, the erroneous forms requesting a .ASM file are forced to request a .COD file with code bytes. So while </P>
    /Fa /FAs<BR>    /Fa{file} /FA</P>
specify .ASM files, they are treated as if they were written</P>
    /Fa /FAcs<BR>    /Fa{file} /FAc</P>
respectively.</P></BODY></HTML>

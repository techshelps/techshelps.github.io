<HTML><HEAD><META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252"><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>2.3.5 /Op and /Op-</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
</OBJECT></FORM>
<H4>2.3.5 /Op and /Op-</H4>The /Op- option indicates that the CLAXP compiler is allowed to use certain optimizations that favor speed at the possible loss of some accuracy. For example, division of a floating- point value by another can be performed using multiplication by the inverse of that value. Similarly, various reorderings and transformations of an expression may be mathematically equivalent and faster, but may lose some accuracy compared to the original formulation.</P>
The default is /Op. That is, modules are considered to be accuracy sensitive, as required by the ANSI C rules, by default.  Note that on x86 platforms, the default of /Op- allows the compiler to use excess precision when evaluating intermediate results, which is allowed by ANSI C rules but can often lead to unexpected final results in numeric applications. So on both platforms /Op means to compute floating point values with maximum fidelity to the way the source code is written, but the default is different since excess precision calculations are allowed by ANSI C while reciprocals and other transformations are not.</P></BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ADO Overview</TITLE>

<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME=MS-HKWD CONTENT="ADO Overview">
<META NAME="Keywords" CONTENT="Active Data Objects, ADO">
<META NAME="Platform" CONTENT="Windows">
<META NAME="ROBOTS" CONTENT="all">

<!--@ SNIFF_START -->
<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../code/ver.js"></SCRIPT>
<!--@ SNIFF_END -->

<SCRIPT DEFER SRC="../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="idx01"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Microsoft ActiveX Data Objects"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../art/headbare.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Microsoft ActiveX Data Objects"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR>
<TR><TD><PRE><IMG SRC="../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="../complib/complib.htm">Topic Contents</A>
</PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1><a name="adidxadooverview"></a>ADO Overview</H1>
<p>ActiveX&#153; Data Objects (ADO) enables you to write an application to access and manipulate data in a database server through an OLE DB provider. ADO’s primary benefits are high speed, ease of use, low memory overhead, and a small disk footprint.
<p><b>ADO Features</b>
<p>ADO supports key features for building client/server and web-based applications, including the following:
<ul>
<li>
Independently-created objects. Unlike Data Access Objects (DAO) or Remote Data Objects (RDO), you no longer have to navigate through a hierarchy to create objects because most ADO objects can be independently created. This allows you to create and track only the objects you need, and also results in fewer ADO objects and thus a smaller working set.<br><br></li>
<li>
Batch updating helps improve performance by locally caching changes to data, then writing them all to the server in a single update.<br><br></li>
<li>
Support for stored procedures with in/out parameters and return values.<br><br></li>
<li>
Different cursor types, including the potential for support of back-end–specific cursors.<br><br></li>
<li>
Support for limits on number of returned rows and other query goals for performance tuning.<br><br></li>
<li>
Support for multiple recordsets returned from stored procedures or batch statements.<br><br></li>
<li>
Free-threaded objects for efficient web server applications.</li>
</ul>
<p><b>Note   </b>While ADO supports these features, the underlying providers and drivers called by ADO may not. Check the topic,
<object id="hhal_3" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Using_OLE_DB_Providers_with_ADO>
</object><a href=JavaScript:hhal_3.Click()>Using OLE DB Providers with ADO</a> as well as the documentation for the underlying providers and drivers to determine what functionality they support. Unless otherwise noted in the language reference topics, all of the ADO 1.5 Objects, Methods, and Properties described in this document are available when used with the Microsoft OLE DB Provider for ODBC and Microsoft SQL Server version 6.5.
<p><b>Remote Data Service</b>
<p>ADO’s Remote Data Service (RDS) allows data remoting, by which you can move data from a server to a client application or Web page, manipulate the data on the client, and return updates to the server in a single round trip. Previously released as Advanced Data Connector 1.0, RDS has been combined with the ADO programming model to simplify client-side data remoting. For more information, see the 
<A HREF="../rds/gs01.htm">Remote Data Service</a> documentation.
<p><b>Installing ADO</b>
<p>As part of the Microsoft Data Access Components, ADO and RDS are automatically installed and registered by a host product, such as Microsoft Internet Information Server. The host product setup program may require that you specifically request the Microsoft Data Access COmponents in order to have ADO and RDS installed.
<p><b>Programming with ADO</b>
<p>ADO is a dual-interface COM type library. The filename is msado15.dll. The program ID (ProgID) is “ADODB.” In 2 and 3 tier database applications, ADO code that is to execute on the client uses the ProgID “ADOR” instead.
<p>To use ADO with Microsoft Visual Basic or Microsoft Office, you also need to establish a reference to the ADO type library. Select References from the Project menu, check the box for “Microsoft ActiveX Data Objects 1.5 Library,” and then click “OK.” ADO objects, methods, and properties will then be accessible through the VBA Object Browser and the IDE Editor.
<p>To use ADO with Microsoft Visual J++, you also need to create a set of class files using the Java Type Library Wizard. Select the Java Type Library Wizard from the Tools menu, check the box for “Microsoft ActiveX Data Objects 1.5 Library,” and then click “OK.” The wizard will then create the necessary Java class files for ADO.
<p>For some programming languages, you also need to reference (using the <code>#include</code> statement) one or more additional files in your source code, as shown in the table below:

<TABLE>
<tr><TD><b>For C++</b></TD><TD><b>For VBScript</b></TD><TD><b>For JScript</b></td></TR>
<TR><TD>adoint.h</TD><TD>adovbs.inc</TD><TD>adojavas.inc</td></TR>
<TR><TD>adoid.h</td></tr>
</table>

<p><b>Threading</b>
<p>The ADO library is free-threaded, but listed in the Windows Registry as apartment model. The thread safety of ADO depends on the underlying provider and data source. For example, the Microsoft OLE DB Provider for ODBC is free-threaded, but not all ODBC drivers are. You should use ADO as apartment model unless you can verify that all of the underlying components can be used free-threaded.
<p><b>ADO Objects</b>
<p>Although ADO objects are creatable outside the scope of a hierarchy, the objects exist within hierarchical relationships, as shown in the
<object id="hhal_4" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_ADO_Object_Model>
</object><a href=JavaScript:hhal_4.Click()>ADO Object Model</a>.
<p>There are 7 objects in the ADO object model:
<p><object id="hhal_5" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Command_Object_ADO_>
</object><a href=JavaScript:hhal_5.Click()><b>Command</b></a> - Maintains information about a command, such as a query string, parameter definitions, etc. You can execute a command string on a <b>Connecton</b> object or a query string as part of opening a <b>Recordset</b> object, without defining a <b>Command</b> object. The <b>Command</b> object is useful where you want to define query parameters, or execute a stored procedure that returns output parameters.
<p><object id="hhal_6" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Connection_Object_ADO_>
</object><a href=JavaScript:hhal_6.Click()><b>Connection</b></a> - Maintains connection information with the data provider.
<p><object id="hhal_7" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Error_Object_ADO_>
</object><a href=JavaScript:hhal_7.Click()><b>Error</b></a> - Contains extended error information about an error condition raised by the provider. Since a single statement can generate two or more errors, the <b>Errors</b> collection can contain more than one <b>Error</b> object at a time, all of which result from the same incident.
<p><object id="hhal_8" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Field_Object_ADO_>
</object><a href=JavaScript:hhal_8.Click()><b>Field</b></a> - Contains information about a single column of data within a <b>Recordset</b>. The <b>Recordset</b> object features a <b>Fields</b> collection to contain all of its <b>Field</b> objects.
<p><object id="hhal_9" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Parameter_Object_ADO_>
</object><a href=JavaScript:hhal_9.Click()><b>Parameter</b></a> - A single parameter for a parameterized <b>Command</b>. The <b>Command</b> object features a <b>Parameters</b> collection to contain all of its <b>Parameter</b> objects.
<p><object id="hhal_10" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Property_Object_ADO_>
</object><a href=JavaScript:hhal_10.Click()><b>Property</b></a> - A provider-defined characteristic of an ADO object.
<p><object id="hhal_11" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Recordset_Object_ADO_>
</object><a href=JavaScript:hhal_11.Click()><b>Recordset</b></a> - A set of records returned from a query, and a cursor into those records. You can open a <b>Recordset</b> (i.e., execute a query) without explicitly opening a <b>Connection</b> object. However, if you do first create a <b>Connection</b> object, you can open multiple <b>Recordset</b> objects on the same connection.
<p>Each of these objects features a set of properties and methods with which you can manipulate the object and its contents.
<p><b>Dynamic Properties Collections</b>
<p>The <b>Connection</b>, <b>Command</b>, and <b>Recordset</b> objects each supports a <b>Properties</b> collection. The properties collection contains any dynamic (or “provider-specific”) properties exposed through ADO by the provider. You use the collection and the Item method to reference the property by it’s name or by it’s ordinal position in the collection, as shown:
<pre>Command.Properties.Item(0)
Command.Properties.Item(“Name”)</PRE>
<p>Since the Item method is a default method on an ADO collection, you can omit it:
<pre>Command.Properties(0)
Command.Properties(“Name”)</PRE>
<p>Further, the Properties collection itself is the default collection for the Connection, Command, andRecordset objects, so you can omit it as well:
<pre>Command(0)
Command(“Name”)</PRE>
<p>All of these syntax forms are identical. Which one you choose depends on your coding style preference.
<p><b>Working with Data</b>
<p>In ADO, the
<object id="hhal_12" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Recordset_Object_ADO_>
</object><a href=JavaScript:hhal_12.Click()><b>Recordset</b></a> object is the main interface to data. While the other objects are useful for managing connections, collecting error information, persisting queries, etc., most of your code’s interaction with ADO will involve one or more <b>Recordset</b> objects.
<p>Here is the minimum code (using Microsoft&reg; Visual Basic&reg; Scripting Edition) needed to generate a <b>Recordset</b> from an ODBC data source:
<pre>set rstMain = CreateObject(&quot;ADODB.Recordset&quot;)<BR>rstMain.Open &quot;SELECT * FROM authors&quot;, _<BR>&#09;&quot;DATABASE=pubs;UID=sa;PWD=;DSN=Publishers&quot;</PRE>
<p>This generates a forward-only, read-only <b>Recordset</b> object. With a few modifications, you can obtain a more functional <b>Recordset</b>:
<pre>set rstMain = CreateObject(&quot;ADODB.Recordset&quot;)<BR>rstMain.Open &quot;SELECT * FROM authors&quot;, _<BR>&#09;&quot;DATABASE=pubs;UID=sa;PWD=;DSN=Publishers&quot;,<BR>&#09;adOpenKeyset, adLockBatchOptimistic</PRE>
<p>This creates a fully scrollable and batch-updatable <b>Recordset</b>.
<p><b>Note</b> In order to reference ADO constants by name (instead of by value) when coding in a scripting language, as shown in these code examples, you must include the appropriate header file. For Microsoft Visual Basic Scripting Edition, include the file adovbs.inc in your code. For Microsoft JScript™, include the file adojavas.inc in your code. You should always refer to constants by name rather than by value since the values may change from one version to the next.
<p>For the latest information on ADO, visit the Microsoft ADO web page. 
<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
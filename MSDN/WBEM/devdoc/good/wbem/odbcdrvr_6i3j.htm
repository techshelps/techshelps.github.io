<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SQLError (Core)</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_hmm_sqlerror_core_"></a>SQLError (Core)</h2>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The adapter provides support for the return of the standard error codes as defined in Appendix A of <i>ODBC 2.0 Programmer's Reference and SDK Guide. </i>These correspond to the SQLSTATE code as defined in the X/Open and SAG SQL CAE Specification (1992).</p>
<p>
When the adapter finds an internal error, such as an invalid handle or memory allocation error, it returns the appropriate SQLSTATE code, which is a text string the component originating the error, and a text description of the error. This is in accordance with the guidelines established in <i>ODBC 2.0 Programmer's Reference and SDK Guide</i>. </p>
<p>
For example, if the adapter fails to allocate memory, it reports the error with the following arguments:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=48%>szSQLState</td>
<td width=52%>"S1001"</td>
</tr>
<tr valign=top>
<td width=48%>pfNativeError</td>
<td width=52%>NULL</td>
</tr>
<tr valign=top>
<td width=48%>szErrorMsg</td>
<td width=52%>"[Microsoft] [WBEM ODBC Adapter] Unable to allocate sufficient memory"</td>
</tr>
<tr valign=top>
<td width=48%>pcberrorMsg</td>
<td width=52%>68</td>
</tr>
</table><br>
<p>
If WBEM returns an error code, the adapter qualifies the error message (szErrorMsg) to indicate that the error message originated in WBEM. For example, if the client attempts to get the columns (properties) of a particular table (class), the adapter invokes the <b>IMOSProvider::GetClass</b> method. If <b>GetClass</b> returns OLEMS_E_INVALID_CLASS, the adapter reports the error with the following arguments:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=48%>szSQLState </td>
<td width=52%>"S0002"</td>
</tr>
<tr valign=top>
<td width=48%>pfNativeError</td>
<td width=52%>NULL</td>
</tr>
<tr valign=top>
<td width=48%>szErrorMsg</td>
<td width=52%>"[Microsoft][WBEM ODBC Adapter][OLE MS] Invalid class name;Class XXXX.YYYY could not be found"</td>
</tr>
<tr valign=top>
<td width=48%>pcberrorMsg</td>
<td width=52%>94</td>
</tr>
</table><br>
<p>
The general method of discovering errors is to invoke <b>SQLError</b> iteratively until it reports no more errors. This is particularly, though not exclusively useful in multitier adapters where a downstream component can report an error, and the upstream component may want to add its own error to this error, identifying itself as the discoverer. In accordance with ODBC guidelines, the upstream component does not alter error messages; rather, it adds its own error message. The adapter has only one outstanding error per statement, connection, or handle.</p>
<h4>See Also</h4>
<p>
<a href="odbcdrvr_9wdv.htm">ODBC Handles</a></p>
<p>&nbsp;</p></body>
</HTML>

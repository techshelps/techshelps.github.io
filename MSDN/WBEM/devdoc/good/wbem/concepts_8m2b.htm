<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Namespaces</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_hmm_namespaces"></a>Namespaces</h2>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
A namespace is a unit for grouping classes and instances and controlling their scope and visibility. Namespaces are not physical locations; they are more like logical databases containing specific classes and instances. Namespaces are represented by the <a href="hmmclass_2eg5.htm"><b>__Namespace</b></a> system class or a class that derives from the <b>__Namespace</b> class. The <b>__Namespace</b> class has a single property: <b>Name</b>. It is the <b>Name</b> property that distinguishes a namespace from all other namespaces.</p>
<p>
Namespaces can be nested within each other to form an arbitrary hierarchy of classes and instances. The nesting model resembles that used for a hierarchical file system, where each namespace needs to have a unique name within the scope of its immediate parent object.</p>
<p>
The namespace hierarchy is represented by individual namespaces delimited by a backward slash:</p>
<pre><code>Namespace1\Namespace2\Namespace3........\LastNamespace
</code></pre>
<p>
Classes are defined for use within one namespace, but associations can span namespaces. An association can contain references to instances in two different namespaces. </p>
<p>
Typically a namespace contains a set of classes and instances that represent managed objects in a particular environment. For example, the classes and instances defined to manage objects in the Microsoft® Win32® environment are created in their own unique namespace. WBEM recommends that a given class name and its associated properties and methods not conflict with a class of the same name in another namespace. </p>
<p>
All WBEM installations have three predefined namespaces:
<ul>
<li>
Root</li>
<li>
Root\Security</li>
<li>
Root\Cimv2</li>
</ul>
<p>
The Root namespace is primarily designed to contain other namespaces. The Security namespace, created under the Root namespace, contains the classes and instances that are used for WBEM's security subsystem.</p>
<p>
Another child namespace, the Cimv2 namespace contains the classes and instances that represent the host machine such as:
<ul>
<li>
LogicalDisk</li>
<li>
Netcard</li>
</ul>
<p>
Most operations occur against the Cimv2 namespace. However, if the WBEM installation is also acting as a proxy for a logical or network device, then the classes and instances associated with the logical or network device need to be located in a different namespace, as shown in the following illustration. Having classes and instances of both the local machine and the network device in a common list is confusing; there is no immediate way to determine which instances belong to the local machine and which are part of the network device. By separating these into separate namespaces, it becomes easier to distinguish between the classes and instances for the local machine and those for the network device.</p>
<p>
<img src="namesp1.gif" border=0> </p>
<p>
</p>
<p>
In the following example, two namespaces are nested beneath the Root namespace: Cimv2 and UnixProxy. The Cimv2 namespace models the local machine, and the UnixProxy namespace holds two other namespaces, UnixA and UnixB. The UnixA and UnixB namespaces each model a complete Unix machine. </p>
<p>
<img src="namesp2.gif" border=0></p>
<p>
Namespaces can be arranged in a hierarchical format, as is shown in the preceeding example, or in a lateral format. Either way, the relationship has nothing to do with inheritance of classes or instances. That is, a child namespace does not automatically receive the classes and instances of its parent namespace.</p>
<p>
Because namespaces are represented as instances of the <b>__Namespace</b> class, creating instances of the class is how new namespaces are created and deleting instances of the class is how namespaces are deleted. When a namespace is deleted, it is only marked for deletion. All clients of that namespace can continue to access it for as long as necessary. Events continue to be delivered. A namespace is not physically removed until there are no longer any users needing to access it.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MOF BNF Syntax</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_hmm_mof_bnf_syntax"></a>MOF BNF Syntax </h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<pre><code>//
// Start symbol.
//
&lt;Parse&gt; ::= &lt;top_level_decl&gt;&lt;Parse&gt;;
&lt;Parse&gt; ::= &lt;qualifier_default&gt;&lt;Parse&gt;;
&lt;Parse&gt; ::= &lt;preprocessor_command&gt;&lt;Parse&gt;;
&lt;Parse&gt; ::= &lt;&gt;;

//
// Preprocessor commands
//
&lt;preprocessor_command&gt; ::= &lt;pound_include&gt;;
&lt;preprocessor_command&gt; ::= &lt;pound_define&gt;;
&lt;preprocessor_command&gt; ::= TOK_PRAGMA &lt;pound_pragma&gt;;

&lt;pound_include&gt; ::= TOK_INCLUDE &lt;const_string&gt;;

&lt;pound_define&gt; ::= TOK_DEFINE TOK_SIMPLE_IDENT &lt;const_value&gt;;

&lt;pound_pragma&gt; ::= TOK_NAMESPACE 
                    TOK_OPEN_PAREN TOK_LPWSTR TOK_CLOSE_PAREN;

&lt;pound_pragma&gt; ::= TOK_CLASSFLAGS 
                    TOK_OPEN_PAREN TOK_LPWSTR TOK_CLOSE_PAREN;

&lt;pound_pragma&gt; ::= TOK_INSTANCEFLAGS 
                    TOK_OPEN_PAREN TOK_LPWSTR TOK_CLOSE_PAREN;



&lt;top_level_decl&gt; ::= &lt;qualifier_decl&gt; &lt;decl_type&gt;;   

&lt;decl_type&gt; ::= &lt;typedef&gt;;
&lt;decl_type&gt; ::= &lt;instance_decl&gt;TOK_SEMI;
&lt;decl_type&gt; ::= &lt;class_decl&gt;;

//
//  Typedef support
//

&lt;typedef&gt; ::= TOK_TYPEDEF &lt;complete_type&gt; 
                TOK_SIMPLE_IDENT &lt;opt_subrange&gt; TOK_SEMI;
&lt;complete_type&gt; ::= &lt;type&gt; &lt;opt_ref&gt;;
&lt;complete_type&gt; ::= &lt;enum&gt;;

&lt;enum&gt; ::= TOK_ENUM TOK_OPEN_BRACE &lt;enum_data&gt; TOK_CLOSE_BRACE;

&lt;enum_data&gt; ::= &lt;opt_name&gt;&lt;enum_data_rest&gt;;

&lt;enum_data_rest&gt; ::= &lt;const_int&gt; &lt;int_enum_data_rest&gt;;
&lt;enum_data_rest&gt; ::= TOK_LPWSTR &lt;string_enum_data_rest&gt;;

&lt;int_enum_data_rest&gt; ::= &lt;&gt;;
&lt;int_enum_data_rest&gt; ::= TOK_COMMA &lt;int_enum_datum&gt; &lt;int_enum_data_rest&gt;;

&lt;int_enum_datum&gt; ::= &lt;opt_name&gt;&lt;const_int&gt;;

&lt;string_enum_data_rest&gt; ::= &lt;&gt;;
&lt;string_enum_data_rest&gt; ::= TOK_COMMA &lt;string_enum_datum&gt; 
                                &lt;string_enum_data_rest&gt;;

&lt;string_enum_datum&gt; ::= &lt;opt_name&gt;TOK_LPWSTR;

&lt;opt_name&gt; ::= &lt;&gt;;
&lt;opt_name&gt; ::= TOK_SIMPLE_IDENT TOK_EQUALS;

&lt;opt_subrange&gt; ::= &lt;&gt;;
&lt;opt_subrange&gt; ::= TOK_SUBRANGE TOK_OPEN_PAREN &lt;const_value&gt; TOK_DOT TOK_DOT 
                        &lt;const_value&gt; TOK_CLOSE_PAREN;

//
//  Class declaration
//
&lt;class_decl&gt; ::= 
    TOK_CLASS
    TOK_SIMPLE_IDENT        // Class name
    &lt;class_def&gt;;
    
&lt;class_def&gt; ::=
    &lt;as_alias&gt;
    &lt;opt_parent_class&gt;
    TOK_OPEN_BRACE
    &lt;property_decl_list&gt;
    TOK_CLOSE_BRACE
    TOK_SEMI;
&lt;class_def&gt; ::= TOK_SEMI;


&lt;property_decl_list&gt; ::= &lt;PropOrMeth_decl&gt; &lt;property_decl_list&gt;;
&lt;property_decl_list&gt; ::= &lt;&gt;;

&lt;opt_parent_class&gt; ::= TOK_COLON TOK_SIMPLE_IDENT;
&lt;opt_parent_class&gt; ::= &lt;&gt;;

//
// Property/Method declarations.
//
&lt;PropOrMeth_decl&gt; ::= &lt;qualifier_decl&gt;&lt;PropOrMeth_decl2&gt;;

&lt;PropOrMeth_decl2&gt; ::= &lt;TypeAndName&gt; &lt;finish_PropOrMeth&gt;;
&lt;PropOrMeth_decl2&gt; ::= TOK_VOID TOK_SIMPLE_IDENT &lt;finish_meth&gt;;
 
&lt;finish_PropOrMeth&gt; ::= &lt;finish_prop&gt;;
&lt;finish_PropOrMeth&gt; ::= &lt;finish_meth&gt;;

&lt;finish_prop&gt; ::=    
    &lt;opt_array&gt; 
    &lt;default_value&gt; 
    TOK_SEMI;

&lt;finish_meth&gt; ::=    
    TOK_OPEN_PAREN 
    &lt;arg_list&gt;
    TOK_CLOSE_PAREN 
    TOK_SEMI;

&lt;TypeAndName&gt; ::= &lt;type&gt; &lt;opt_ref&gt; TOK_SIMPLE_IDENT;

&lt;arg_list&gt; ::= &lt;arg_decl&gt; &lt;rest_of_args&gt;;
&lt;arg_list&gt; ::= &lt;&gt;;

&lt;arg_decl&gt; ::= &lt;qualifier_decl&gt;&lt;TypeAndName&gt;&lt;opt_array&gt;&lt;default_value&gt;;

&lt;rest_of_args&gt; ::= TOK_COMMA &lt;arg_decl&gt; &lt;rest_of_args&gt;;
&lt;rest_of_args&gt; ::= &lt;&gt;;


&lt;opt_ref&gt; ::= TOK_REF;
&lt;opt_ref&gt; ::= &lt;&gt;;

&lt;opt_array&gt; ::= TOK_OPEN_BRACKET &lt;opt_array_detail&gt;;
&lt;opt_array&gt; ::= &lt;&gt;;

&lt;opt_array_detail&gt; ::= TOK_UNSIGNED_NUMERIC_CONST TOK_CLOSE_BRACKET;
&lt;opt_array_detail&gt; ::= TOK_CLOSE_BRACKET;


&lt;default_value&gt; ::= &lt;&gt;;
&lt;default_value&gt; ::= TOK_EQUALS &lt;initializer&gt;;


//
//  Instances.
//

&lt;instance_decl&gt; ::=
    TOK_INSTANCE TOK_OF
    &lt;type&gt;                      
    &lt;as_alias&gt;
    TOK_OPEN_BRACE
    &lt;prop_init_list&gt;
    TOK_CLOSE_BRACE;
    
&lt;prop_init_list&gt; ::= &lt;prop_init&gt;&lt;prop_init_list&gt;;
&lt;prop_init_list&gt; ::= &lt;&gt;;
&lt;prop_init&gt; ::= &lt;qualifier_decl&gt; TOK_SIMPLE_IDENT TOK_EQUALS &lt;initializer&gt; TOK_SEMI;

&lt;as_alias&gt; ::= TOK_AS &lt;alias&gt;;
&lt;as_alias&gt; ::= &lt;&gt;;

//
// Qualifiers
//
// This allows comma delimited identifiers, or identifiers
// in functional notation with a const parm list. 
//

&lt;qualifier_decl&gt;   ::= TOK_OPEN_BRACKET &lt;qualifier_list&gt; TOK_CLOSE_BRACKET;
&lt;qualifier_decl&gt;   ::= &lt;&gt;;

&lt;qualifier_list&gt;   ::= &lt;qualifier&gt;&lt;qualifier_list_rest&gt;;

&lt;qualifier_list_rest&gt; ::= TOK_COMMA &lt;qualifier&gt;&lt;qualifier_list_rest&gt;;
&lt;qualifier_list_rest&gt; ::= &lt;&gt;;

&lt;qualifier&gt;        ::= TOK_SIMPLE_IDENT &lt;qualifier_parm&gt;;
&lt;qualifier&gt;        ::= TOK_EXTERNAL;

&lt;qualifier_parm&gt;  ::= TOK_OPEN_PAREN &lt;initializer_list&gt; TOK_CLOSE_PAREN &lt;flavor_param&gt;;
&lt;qualifier_parm&gt;  ::= &lt;flavor_param&gt;;

&lt;flavor_param&gt;    ::= TOK_COLON  &lt;flavor_list&gt; ;
&lt;flavor_param&gt;    ::= &lt;&gt;;

&lt;flavor_list&gt; ::= &lt;flavor_value&gt; &lt;flavor_list_rest&gt;;

&lt;flavor_list_rest&gt; ::=  &lt;FLAVOR_VALUE&gt; &lt;flavor_list_rest&gt;;
&lt;flavor_list_rest&gt; ::= &lt;&gt;;

&lt;flavor_value&gt; ::= TOK_TOINSTANCE;
&lt;flavor_value&gt; ::= TOK_NOTTOINSTANCE;
&lt;flavor_value&gt; ::= TOK_TOSUBCLASS;
&lt;flavor_value&gt; ::= TOK_NOTTOSUBCLASS;
&lt;flavor_value&gt; ::= TOK_ENABLEOVERRIDE;
&lt;flavor_value&gt; ::= TOK_DISABLEOVERRIDE;
&lt;flavor_value&gt; ::= TOK_RESTRICTED;

/////////////////////////////////////////////////////////////////////////////
//

&lt;type&gt; ::= TOK_SIMPLE_IDENT;

&lt;const_int&gt; ::= TOK_SIGNED_NUMERIC_CONST;
&lt;const_int&gt; ::= TOK_UNSIGNED_NUMERIC_CONST;
&lt;const_int&gt; ::= TOK_SIGNED64_NUMERIC_CONST;
&lt;const_int&gt; ::= TOK_UNSIGNED64_NUMERIC_CONST;

&lt;const_string&gt; ::= TOK_LPSTR;
&lt;const_string&gt; ::= TOK_LPWSTR;

&lt;const_char&gt; ::= TOK_CHAR;
&lt;const_char&gt; ::= TOK_WCHAR;

&lt;const_value&gt; ::= &lt;const_string&gt;;
&lt;const_value&gt; ::= &lt;const_int&gt;;
&lt;const_value&gt; ::= &lt;const_char&gt;;
&lt;const_value&gt; ::= TOK_UUID;
&lt;const_value&gt; ::= TOK_KEYWORD_NULL;
                   
&lt;initializer&gt; ::= &lt;simple_initializer&gt;;
&lt;initializer&gt; ::= TOK_EXTERNAL;
&lt;initializer&gt; ::= TOK_OPEN_BRACE &lt;initializer_list&gt; TOK_CLOSE_BRACE;
&lt;initializer&gt; ::= &lt;class_decl&gt;;

&lt;simple_initializer&gt; ::= &lt;qualifier_decl&gt;&lt;instance_decl&gt;;
&lt;simple_initializer&gt; ::= &lt;const_value&gt;;
&lt;simple_initializer&gt; ::= &lt;alias&gt;;

&lt;initializer_list&gt; ::= &lt;simple_initializer&gt;&lt;initializer_list&gt;;
&lt;initializer_list&gt; ::= TOK_COMMA &lt;simple_initializer&gt;&lt;initializer_list&gt;;
&lt;initializer_list&gt; ::= &lt;&gt;;

&lt;alias&gt; ::= TOK_DOLLAR_SIGN TOK_SIMPLE_IDENT;

/////////////////////////////////////////////////////////////////////////
//
//  Qualifier defaults
//

&lt;qualifier_default&gt; ::= TOK_QUALIFIER TOK_SIMPLE_IDENT &lt;flavor_param&gt;;
</code></pre>
<p>&nbsp;</p></body>
</HTML>

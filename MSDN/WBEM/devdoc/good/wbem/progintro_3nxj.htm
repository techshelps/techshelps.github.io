<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Asynchronous Processing</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_hmm_asynchronous_processing"></a>Asynchronous Processing</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
Asynchronous methods increase the performance of a management application by allowing it to proceed with other tasks while requests are pending, and while results are delivered through another thread. The <b>IWbemServices</b> interface supports both the synchronous and asynchronous versions of several methods. Whereas applications can make calls to either version, providers implement only the asynchronous versions.</p>
<p>
The asynchronous version of a method has the Async suffix attached to its name as is shown in the following table:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>Synchronous method</th>
<th align=left width=52%>Asynchronous method</th>
</tr>
<tr valign=top>
<td width=48%><b>CreateClassEnum </b></td>
<td width=52%><b>CreateClassEnumAsync</b></td>
</tr>
<tr valign=top>
<td width=48%><b>CreateInstanceEnum </b></td>
<td width=52%><b>CreateInstanceEnumAsync</b></td>
</tr>
<tr valign=top>
<td width=48%><b>DeleteClass</b></td>
<td width=52%><b>DeleteClassAsync</b></td>
</tr>
<tr valign=top>
<td width=48%><b>DeleteInstance </b></td>
<td width=52%><b>DeleteInstanceAsync</b></td>
</tr>
<tr valign=top>
<td width=48%><b>ExecMethod </b></td>
<td width=52%><b>ExecMethodAsync</b></td>
</tr>
<tr valign=top>
<td width=48%><b>ExecNotificationQuery </b></td>
<td width=52%><b>ExecNotificationQueryAsync</b></td>
</tr>
<tr valign=top>
<td width=48%><b>ExecQuery </b></td>
<td width=52%><b>ExecQueryAsync</b></td>
</tr>
<tr valign=top>
<td width=48%><b>GetObject </b></td>
<td width=52%><b>GetObjectAsync</b></td>
</tr>
<tr valign=top>
<td width=48%><b>PutClass </b></td>
<td width=52%><b>PutClassAsync</b></td>
</tr>
<tr valign=top>
<td width=48%> <b>PutInstance </b></td>
<td width=52%><b>PutInstanceAsync</b></td>
</tr>
</table><br>
<p>
The asynchronous methods return immediately whether or not they have finished performing the requested operation. The results of an asynchronous call are provided through the <b>IWbemObjectSink</b> interface. Each asynchronous method has as an input parameter a pointer to an <b>IWbemObjectSink</b> implementation. </p>
<p>
If the asynchronous method completes successfully, it:
<ol>
<li>
Increments the reference count for the <b>IWbemObjectSink</b> object by calling its <b>AddRef</b> method.</li>
<li>
Returns WBEM_NO_ERROR.</li>
</ol>
<p>
As the operation is progressing, calls are made to <b>IWbemObjectSink::Indicate</b>. <b>Indicate</b> has two parameters: an array of pointers to objects accessible through the <b>IWbemClassObject</b> interface and a count of the number of pointers in the array. The object pointer array contains data that is relevant to the particular operation. For example, a query operation invoked through the <a href="hmmref_99sz.htm"><b>IWbemServices::ExecQueryAsync</b></a> method returns one or more data objects from the query's result set in the array. </p>
<p>
Status is reported through the <a href="hmmref_7neb.htm"><b>IWbemObjectSink::SetStatus</b></a> method. An asynchronous operation can report an intermediate status, a final status, or an error. After the final status has been reported, a call is made to <a href="hmmref_0u91.htm"><b>IWbemObjectSink::Release</b></a> to release the <b>IWbemObjectSink</b> pointer.</p>
<p>
An application calls <a href="hmmref_2nak.htm"><b>IWbemServices::CancelAsyncCall</b></a> if it wants to shut down before it has received all of the results from its asynchronous call. <b>CancelAsyncCall</b> cancels asynchronous processing by immediately releasing the <b>IWbemObjectSink</b> pointer included in the <i>pSink</i> parameter. Note, however, that timing and the nature of an asynchronous operation can affect whether or not the operation is truly canceled. Only lengthy queries are likely to be successfully canceled before they have completed. Faster operations such as asynchronous deletions or modifications typically complete before a <b>CancelAsyncCall</b> can be made. <b>CancelAsyncCall</b> attempts to cancel the current operation, but sometimes all that can be done is to release the <b>IWbemObjectSink</b> pointer.</p>
<p>
Applications must never delete the object that exposes their <b>IWbemObjectSink</b> implementation without verifying that its reference count has reached zero. Due to the way in which Distributed COM (DCOM) forwards <b>Release</b> calls, there is no guarantee that this object will remain unused. Applications must always obey standard COM rules regarding reference counts.</p>
<p>&nbsp;</p></body>
</HTML>

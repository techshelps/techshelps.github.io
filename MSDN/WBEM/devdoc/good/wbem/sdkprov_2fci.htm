<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PerfMon Provider</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_hmm_perfmon_provider"></a>PerfMon Provider</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The PerfMon Provider returns performance-related information to management applications. Because PerfMon is a Microsoft® Windows NT®. tool, only management applications running on Windows NT platforms can use this provider. </p>
<p>
The PerfMon Provider can be used as an instance provider to supply performance information relating to instances of WBEM classes; it can also function as a property provider to modify the data for a specific instance. </p>
<p>
Because the PerfMon Provider is not automatically registered with CIMOM when WBEM installs, management applications wanting to use it must complete the registration process. To register the PerfMon Provider as either an instance provider or as a property provider, applications create a new MOF file that includes an instance of the <b>__Win32Provider </b>system class as the following code fragment demonstrates:</p>
<pre><code>instance of __Win32Provider as $P
{
    Name    = "PerfProv" ;
    ClsId   = "{f00b4404-f8f1-11ce-a5b6-00aa00680c3f}" ;
};    
</code></pre>
<p>
An instance of a class derived from <b>__ObjectProviderRegistration</b> must also be created. If the PerfMon Provider is being registered as an instance provider, the application must create an <b>__InstanceProviderRegistration </b>instance. If the PerfMon Provider is being registered as a property provider, the application must create a <b>__PropertyProviderRegistration </b>instance. Examples of these two instances follow:</p>
<pre><code>instance of __InstanceProviderRegistration
{
    Provider = $P;
    SupportsPut = FALSE;
    SupportsGet = TRUE;
    SupportsDelete = FALSE;
    SupportsEnumeration = TRUE;
};

instance of __PropertyProviderRegistration
{
    Provider = $P;
    SupportsPut = TRUE;
    SupportsGet = TRUE;
</code></pre>
<p>
The MOF file containing these two instances can either be compiled as a standalone file or included at the top of an application-specific MOF file. The application-specific MOF file typically contains classes and instances that are meant to store the performance data. The following class provides an example. The <b>Provider</b> qualifier specifies the PerfMon Provider as the dynamic provider responsible for managing the data for the class. The <b>ClassContext</b> qualifier specifies information needed by the PerfMon Provider to access the data. The <b>PropertyContext</b> qualifiers identify the PerfMon values to be stored in each property. </p>
<pre><code>[dynamic, provider("PerfProv"), ClassContext("local|Process")]
class NTProcesses
{
    [key]
       String Process;
    [PropertyContext("ID Process")]
         uint32 ID;
    [PropertyContext("Elapsed Time")]
         real32 Time;
    [PropertyContext("Handle Count")]
         uint32 Handles;
    [PropertyContext("Working Set")]
         uint32 WorkingSet;
    [PropertyContext("Working Set Peak")]
         uint32 WorkingSetPeak;
    [PropertyContext("Virtual Bytes")]
         uint32 VirtualBytes;
    [PropertyContext("Virtual Bytes Peak")]
         uint32 VirtualBytesPeak;
    [PropertyContext("Thread Count")]
         uint32 Threads;
    [PropertyContext("Priority Base")]
         uint32 Base;
};
</code></pre>
<p>
Some of the counter types available from the PerfMon Provider cannot be returned as instances. To use these counters in an application, create a singleton class by attaching the Singleton standard qualifier to the class as is shown below. Note the lack of a key property. </p>
<pre><code>[Singleton, Dynamic, Provider("PerfProv"), 
ClassContext("local|Memory")]
class memory
{
    [PropertyContext("Available Bytes")]
         uint32 Avail;
    [PropertyContext("Cache Bytes")]
         uint32 Cache;
};</code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating an Event Filter</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_hmm_creating_an_event_filter"></a>Creating an Event Filter</h2>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
An event filter defines the criteria for receiving an event notification and is an instance of the system class <a href="hmmclass_1fzm.htm"><b>__EventFilter</b></a>. Administrators create event filters to indicate the class of event that they want to receive and the conditions under which they want to receive it. As with events, event filters belong to a namespace. That is, each event filter works only on events that belong to the namespace to which the filter also belongs. </p>
<p>
The <b>__EventFilter</b> system class has three properties: 
<ul>
<li>
<b>Name</b></li>
<li>
<b>Query</b></li>
<li>
<b>QueryLanguage</b></li>
</ul>
<p>
The <b>Name</b> property is a string that uniquely identifies the event filter. Because an event filter is only used internally by CIMOM, WBEM recommends that the <b>Name</b> be set to a GUID converted into a string. However, consumers can use any private scheme for filter naming as long as there is no chance for conflict with other filters. </p>
<p>
The <b>Query</b> property is a string that specifies the event criteria.</p>
<p>
The <b>QueryLanguage</b> property specifies the language used for the query. Because WBEM currently supports only WQL as a query language, <b>Query</b> must be set to a valid WQL statement and <b>QueryLanguage</b> must be set to "WQL.". </p>
<p>
For example, the following event filter requests an instance creation event whenever a new <b>DiskDrive</b> instance is created:</p>
<pre><code>Instance of __EventFilter
{
    Name = "{7ca44681-045f-11d1-ae97-00c04fb68820}";'
].
    Query = 
           "select * from __InstanceCreationEvent "
           "where TargetInstance.__CLASS = \"DiskDrive\"";
    QueryLanguage = "WQL";
}</code></pre>
<p>
Note that the preceding query specifies that only creation events for<i> </i>instances of the <b>DiskDrive</b><i> </i>class are candidates for event notification. This does not include instances of classes derived from the <b>DiskDrive</b> class. If you want to receive events that apply to <i>any</i> instance of <b>DiskDrive</b> class or its derived classes, use the <b>isa</b><i> </i>("is a") operator in the <b>Query</b> property of the event filter as follows:</p>
<pre><code>Instance of __EventFilter
{
    Name = "{7ca44681-045f-11d1-ae97-00c04fb68820}"
    Query = 
           "select * from __InstanceCreationEvent "
           "where TargetInstance isa \"DiskDrive\"";
    QueryLanguage = "WQL";
}
</code></pre>
<p>
Administrators can narrow the scope of their queries if there are properties defined for the target class. For example, if the <b>DiskDrive</b> class includes an <b>ID</b> property, it is possible to request an event notification only when the value of the drive's <b>ID</b> property is within a particular range:</p>
<pre><code>Instance of __EventFilter
{
    Name = "{7ca44681-045f-11d1-ae97-00c04fb68820}"
    Query = 
          "Select * from __InstanceCreationEvent" 
          "where TargetInstance isa \"DiskDrive\"" 
          "and (TargetInstance.ID &lt; 100 or TargetInstance.ID &gt; 500)";
    QueryLanguage = "WQL";
}
</code></pre>
<p>
<b>TargetInstance</b> contains a copy of the object that was created, modified, or deleted. Because <b>TargetInstance</b><i> </i>is weakly typed, it is legal to use property names that occur in the affected object at event time.</p>
<p>
Since the query can take on any legal form within the bounds of WQL, administrators can achieve very precise filtering. For example, placing the <b>NOT</b><i> </i>operator in front of the parenthesized <b>OR</b><i> </i>clause in the previous query example returns the complement result set. Administrators are encouraged to specify the most restrictive query possible to avoid needless interprocess communication and network traffic. It is best to allow CIMOM do as much filtering as possible.</p>
<p>&nbsp;</p></body>
</HTML>

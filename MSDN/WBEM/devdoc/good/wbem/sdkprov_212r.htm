<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Registering for Registry Events</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_hmm_registering_for_registry_events"></a>Registering for Registry Events</h2>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
To receive notifications from the Registry Provider, a management application must:
<ol>
<li>
Register the Registry Provider as an event provider.</li>
<li>
Register as a temporary <a href="event_9xo2.htm">event consumer</a>.</li>
</ol>
<p>
Registering the Registry Provider as an event provider involves compiling the Regevent.mof file that is included with the WBEM SDK. Regevent.mof contains an instance of the <b>__Win32Provider</b> class to identify the Registry Provider by name and CLSID, and an instance of the <b>__EventProviderRegistration</b> class to publish queries that describe the types of event notifications that are supported. Each type of event notification is represented by a different class. The Registry Event Provider supports three classes of events: 
<ul>
<li>
<b>RegistryKeyChangeEvent</b></li>
<li>
<b>RegistryTreeChangeEvent</b></li>
<li>
<b>RegistryValueChangeEvent</b></li>
</ul>
<p>
All three of these classes have a property called <b>Hive</b> that identifies the hierarchy of keys to be monitored for change, such as HKEY_LOCAL_MACHINE, and a path to the key or tree of keys to be monitored. <b>RegistryValueChangeEvent</b> also has a <b>ValueName</b> property to hold the changed key value.</p>
<p>
The Regevent.mof file contains the following instances to register the Registry Provider as an event provider: </p>
<pre><code>instance of __Win32Provider as $P
{
    Name = "RegistryEventProvider";
    Clsid = "{fa77a74e-e109-11d0-ad6e-00c04fd8fdff}";
};

instance of __EventProviderRegistration
{
    Provider = $P;
    EventQueryList = {
            "select * from RegistryKeyChangeEvent",
            "select * from RegistryValueChangeEvent",
            "select * from RegistryTreeChangeEvent"};
};
</code></pre>
<p>
Registering as a temporary event consumer involves:
<ul>
<li>
Implementing the <a href="hmmref_8qnf.htm"><b>IWbemObjectSink</b></a> interface. </li>
<li>
Calling the <b>IWbemServices::ExecNotificationQueryAsync</b> method.</li>
</ul>
<p>
<b>IWbemObjectSink</b> contains two methods: <b>Indicate</b> and <b>SetStatus</b>. <b>Indicate</b> is the method that the Registry Event Provider calls to deliver its notifications. <b>SetStatus</b> is the method that is called to report the completion of a delivery. </p>
<p>
When a consumer is ready to receive registry event notifications, it calls <b>ExecNotificationQueryAsync</b> and passes a pointer to the <b>IWbemObjectSink</b> implementation in the <i>pResponseHandler</i> parameter. The <b>bstrQuery</b> parameter describes which registry events are to be delivered. For each class of event, a WHERE clause needs to be included in the query that names values for each property in the class. For example, the following query registers to receive <b>RegistryTreeChangeEvents</b> for "HKEY_LOCAL_MACHINE\Software":</p>
<pre><code>select * from RegistryTreeChangeEvent 
    where Hive = "HKEY_LOCAL_MACHINE" and Rootpath = "Software";
</code></pre>
<p>
When using the AND and OR operators, make sure that a list of possible values for every event property can be inferred from the query. For example, the following query is valid: </p>
<pre><code>select * from RegistryTreeChangeEvent 
    where (hive = "hkey_local_machine" and rootpath = "software") 
    or    (hive = "hkey_current_user" and rootpath = "console");
</code></pre>
<p>
However, this next query is not valid because there is no way for CIMOM to evaluate the possible values for each of the properties:</p>
<pre><code>select * from RegistryTreeChangeEvent 
    where hive = hkey_local_machine" OR rootpath="software";
</code></pre>
<p>
If the WHERE clause is missing or is too broad to be of use, the Registry Event Provider returns the error WBEM_E_TOO_BROAD. </p>
<p>
<b>Note</b>&nbsp;&nbsp;The WITHIN clause must be included in queries to be used on Windows 95 and Windows 98 platforms. This clause is unnecessary on Windows NT platforms. For information about the WITHIN clause, see <a href="query_4ihx.htm">SELECT Statement WITHIN Clause</a>. </p>
<p>&nbsp;</p></body>
</HTML>

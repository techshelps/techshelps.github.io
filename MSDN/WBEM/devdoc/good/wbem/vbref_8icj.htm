<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DIEnumWbemClassObject.NextAsync</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_hmm_dienumwbemclassobject.nextasync"></a>DIEnumWbemClassObject.NextAsync</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
When you need a controlled asynchronous retrieval of objects to a sink, use the <a href="#_hmm_dienumwbemclassobject.nextasync"><b>DIEnumWbemClassObject.NextAsync</b></a> method. Normal asynchronous retrieval, such as a call to <a href="vbref_43fn.htm"><b>DIWbemServices.ExecQueryAsync</b></a>,<i> </i>causes an uncontrolled delivery of objects to the caller's implementation of <a href="vbref_3817.htm"><b>DIWbemObjectSink</b></a>.<i> </i>This method is helpful in situations where components can only handle a reduced rate of delivery.</p>
<pre><code><b>NextAsync(
  [in] </b><i>uCount </i><b>As Long,</b><i> </i>
<b>  [in] </b><i>pSink </i><b>As Object</b>
<b>) As Long</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>uCount</i></dt>
<dd>
The number of objects requested.</dd>
<dt>
<i>pSink</i></dt>
<dd>
<a href="vbref_6z78.htm"><b>DWbemClassObject</b></a><b> </b>type object<b> </b>The sink to receive the objects. The caller must implement the sink. 
</dd>
</dl>
<h4>Return Values</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=20%>WBEM_NO_ERROR</td>
<td width=80%>The call succeeded. The system begins delivery of objects to the sink.</td>
</tr>
<tr valign=top>
<td width=20%>WBEM_S_FALSE</td>
<td width=80%>The call failed, and no objects will be delivered to the sink.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
This call returns immediately, and delivery to the sink occurs in the background. If a  call to <a href="vbref_90l0.htm"><b>Reset</b></a>. it will not affect the ongoing delivery of objects as a result of previous calls but will cause new calls to start at the beginning of the object sequence.</p>
<p>
Call the <a href="vbref_3lwz.htm"><b>DIWbemobjectSink.SetStatus</b></a> method to indicate the actual result of your request. As the objects become available, you can call <a href="vbref_35yd.htm"><b>DIWbemObjectSink.Indicate</b></a> zero or more times to deliver the objects. After that, if uCount items return, call <b>DIWbemObjectSink.SetStatus</b> with a value of WBEM_NO_ERROR. </p>
<p>
If fewer objects are available than the number requested, call <b>DIWbemObjectSink.Indicate</b> for whatever objects are available. After that, call <b>DIWbemObjectSink.SetStatus</b> with a value of WBEM_S_FALSE or the error code if there is an error. If no objects are available, do not call <b>Indicate</b>.</p>
<h4>Sample Code</h4>
<pre></pre>
<pre><code>Sub ListObjects3(pEnum As DIEnumWbemClassObject , pSink As DIWbemObjectSink) 
    Dim hRes As Long
    Dim bContinue As Boolean

    while (TRUE)
    
        hRes = pEnum.NextAsync(5, pSink)

            ' Wait until sink is ready for more by
            ' some private mechanism. Note that hRes gives
            ' no indication as to whether to continue the
            ' enumeration or not.

            bContinue = WaitUntilMoreObjectsNeeded()

            if  (bContinue &lt;&gt; True) Then
                Exit Sub
            Endif
    Wend
 End Sub</code></pre>
<p>&nbsp;</p></body>
</HTML>

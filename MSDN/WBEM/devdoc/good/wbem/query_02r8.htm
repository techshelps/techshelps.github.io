<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WQL SELECT Statement</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_hmm_wql_select_statement"></a>WQL SELECT Statement</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The WQL SELECT statement is much like the standard SQL statement for retrieving information. Where the SQL SELECT statement is typically used in the database environment to retrieve particular columns from tables, the WQL SELECT statement is used in WBEM to retrieve properties from classes. The supported scope also differs from SQL. While SQL supports queries across multiple tables, WQL supports only single class queries. </p>
<p>
The most basic SELECT statement uses the following syntax:</p>
<pre><code>select * from &lt;ClassName&gt;
</code></pre>
<p>
This statement returns an instance that contains all of the properties for the specified class and its derived classes. To request particular properties, replace the asterisk with a property list delimited by commas:</p>
<pre><code>select &lt;property_1, property_2,   property_N&gt; from &lt;ClassName&gt;
</code></pre>
<p>
Using normal SQL rules, subsets of class instances can be selected by specifying a query constrained by a WHERE clause. The WHERE clause is limited to the following forms:</p>
<pre><code>property operator constant

--or</code>—

<code>constant operator property
</code></pre>
<p>
The constant must be of the correct type for the property and the operator must be one of the following values:
<ul>
<li>
&lt; (less than)</li>
<li>
&gt; (greater than)</li>
<li>
&lt;= (less than or equal to)</li>
<li>
&gt;= (greater than or equal to)</li>
<li>
= (equal to)</li>
<li>
!= or &lt;&gt; (not equal)</li>
</ul>
<p>
String comparisons using <b>=</b> and != are always case-insensitive. </p>
<p>
When the WHERE clause contains more than one property, operator, and constant, each group must be joined with AND, OR, or NOT. </p>
<p>
The following examples show valid SELECT statements. The first example retrieves all of the properties of the <b>Win32_LogicalDisk</b> class belonging to instances that have their <b>Name</b> property set to either "C:" or "D:":</p>
<pre><code>select * from Win32_LogicalDisk 
    where Name = "C:" or Name = "D:"
 </code></pre>
<p>
The second example retrieves disks named "C:" or "D:" only if they have a certain amount of free space remaining and have NTFS file systems:</p>
<pre><code>select * from Win32_LogicalDisk 
    where (Name = "C:" or Name = "D:") 
    and   FreeSpace &gt; 2000000 
    and   FileSystem = "NTFS"
 </code></pre>
<p>
<b>Note</b>&nbsp;&nbsp;In addition to queries involving multiple classes, the following features of the SQL SELECT statement are not supported by WQL:
<ul>
<li>
Arbitrary arithmetic expressions on one side of a relational operator</li>
<li>
Property names on both sides of a relational operator<p>
For example, the following statement is not legal because of the use of property names and arbitrary arithmetic expressions:
<pre><code>select * from PhysicalDisk
    where Partitions &lt; (4 + 7 - 2) 
    or   (Partitions = SectorsPerTrack / 7)</code></pre>
</li>
</ul>
<p>&nbsp;</p></body>
</HTML>

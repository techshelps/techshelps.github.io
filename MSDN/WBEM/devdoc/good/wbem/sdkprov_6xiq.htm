<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Defining Classes for the Registry Provider</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_hmm_defining_classes_for_the_registry_provider"></a>Defining Classes for the Registry Provider</h2>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
Management applications using the Registry Provider define classes with properties that represent registry data for particular keys and store the classes in the CIMOM repository. The classes are defined with several standard qualifiers. The particular qualifiers and their placement depends on whether the Registry Provider is used as an instance provider or a property provider. </p>
<p>
The <b>Dynamic</b> qualifier can be attached to either a class or an instance and marks the class or instance as being managed dynamically by a provider. When <b>Dynamic</b> appears on a class or instance, the <b>Provider</b> qualifier must also appear. The <b>Provider</b> qualifier identifies the particular provider that is responsible for managing the dynamic class or instance. </p>
<p>
The <b>ClassContext</b> qualifier is attached to a class and specifies the path to the registry key that contains the information the class represents. The <b>ClassContext</b> qualifier has the following format:</p>
<pre><code>MACHINE_NAME | Subtree\\KeyPath
</code></pre>
<p>
The value for KeyPath can be long if it includes keys with subkeys. For example, the following <b>ClassContext</b> qualifier contains the path to a particular machine's transport devices:</p>
<pre><code>Machine_Name | HKEY_LOCAL_MACHINE\\SOFTWARE\\MICROSOFT\\WBEM
\\CIMOM\\TRANSPORTS
</code></pre>
<p>
The following template for a class definition illustrates the use of the <b>Dynamic</b>, <b>Provider</b>, and <b>ClassContext</b> qualifiers. The provider named by the <b>Provider</b> qualifier is the instance Registry Provider. Note that registry paths are case insensitive, as are qualifier names. </p>
<pre><code>[dynamic, provider("RegProv"), ClassContext("localhkey_local_machine\\software\\microsoft\\WBEM\\
cimom\\transports")]

class RegistryTransports
{
  //properties of the class
};</code></pre>
<p>
Management applications can use the Registry Provider to retrieve and modify registry data for a particular key. To use the Registry Provider as a property provider, applications define classes that are marked with the <b>DynProps</b>, <b>Provider</b>, and <b>PropertyText</b> standard qualifiers. </p>
<p>
The <b>DynProps</b> qualifier identifies a class as having properties that are maintained by the property provider identified by the <b>Provider</b> qualifier. The <b>PropertyContext</b> qualifier specifies the name of the registry value to be stored by the property. The format of the <b>PropertyContext</b> qualifier is the same as the format of the <b>ClassContext</b> qualifier with additional valuename and expression values:</p>
<pre><code>MACHINE_NAME | Subtree\\KeyPath [|<i>valuename</i> [<i>expression</i>]]
</code></pre>
<p>
Both valuename and expression are optional. The valuename setting is only used if the registry value has a name. Expression is also optional and is used for <a href="progintro_38ip.htm">resource descriptor data</a>.</p>
<p>
The following class uses the Registry Provider as a property provider to maintain its non-key properties:</p>
<pre><code>[DYNPROPS]
class PropReg {

    [read, write, KEY] 
         STRING  MyKey;
    [read, write] 
         STRING Logging;
    [read, write]
         STRING Events;
         uint32 Resource1;
         uint32 Resource2;
};

[DYNPROPS]
instance of PropReg
{
  MyKey = "a";

  [PropertyContext("local|hkey_local_Machine\\software\\microsoft\\
   wbem\\cimom|Logging"), Dynamic, Provider("RegPropProv")]  Logging;

  [PropertyContext("local|hkey_local_Machine\\software\\microsoft\\
   wbem\\cimom|EnableEvents"), Dynamic, Provider("RegPropProv")]
   Events;

  [PropertyContext("local|hkey_local_Machine\\hardware\\
   ResourceMap\\Hardware Abstraction Layer\\PC Compatible Eisa/isa 
   hal|.raw(\"Internal\")(0)(0)(\"interrupt.vector\")"), Dynamic, 
   Provider("RegPropProv")]  Resource1;

  [PropertyContext("local|hkey_local_Machine\\hardware\\
   ResourceMap\\Hardware Abstraction Layer\\PC Compatible Eisa/isa
   hal|.raw(\"Internal\",0,0,\"interrupt.vector\")"), Dynamic, 
   Provider("RegPropProv")]
   Resource2;
};
</code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Two-Column, Two-Table Example</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_hmm_two_column_two_table_example"></a>Two-Column, Two-Table Example</h2>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
Consider the following <b>SELECT</b> statement:</p>
<pre><code>SELECT c1t1, c1t2 FROM t1,t2 
</code></pre>
<p>
The <a href="odbcdrvr_8r3o.htm">SQLPrepare phase</a> for this statement proceeds as before. Here, however, there are two columns, each from a separate table. The <b>SELECT</b> statement is asking for the Cartesian cross product of the columns in the tables. This differs from the <a href="odbcdrvr_9ckl.htm">single-column, single-table example</a> in that, for each value of <b>c1t1</b>, the adapter must iterate over <b>t2</b> (assuming the <b>c1t1</b> spins fastest). Thus, for each <b>c1t1</b>, the adapter must reset the <b>t2</b> enumeration and <b>Next</b> over the enumeration for all elements. </p>
<p>
The behavior of an enumeration in each <b>Next</b> is unknown to the adapter. For example, one provider may get all the information it needs to return all row information when the enumeration is created. Another might only retrieve the information on a just-in-time basis. For example, when <b>Next</b> is invoked it gathers the information necessary to return the corresponding row information. Which strategy is employed is provider-dependent and depends on the static nature of the provided data. If the adapter is a dynamic instance provider, it may choose to get the data on a <b>Next</b>. In this case, if the adapter resets the enumeration and invokes <b>Next</b> again, the provider retrieves the data needed to build the row information to be returned.</p>
<p>
There can be efficiency problems if there are many columns in the select list and many rows or instances per table. Further, during any particular invocation, the adapter expects the contents enumerated to remain the same. That is, the adapter really wants a snapshot of the enumerated instances when the execution is done. The adapter may have to do its own caching of row information as each enumeration is iterated through.</p>
<p>
The next case adds a <a href="odbcdrvr_938u.htm"><b>WHERE</b></a> predicate to the select statement. Here is a straightforward restricted <b>SELECT</b>:</p>
<pre><code>SELECT c1t1, c1t2 FROM t1, t2 WHERE  c2t1 = 10 
</code></pre>
<p>
In this case, <a href="odbcdrvr_8r3o.htm"><b>SQLPrepare</b></a> builds a complete predicate tree that represents the <a href="odbcdrvr_938u.htm"><b>WHERE</b></a> clause. <b>SQLPrepare</b> also checks and annotates the semantics of this parse tree, much the same way that it checks the semantics of the select list. </p>
<p>
<b>SQLFetch</b> accesses the instances of the classes in a rightmost, slowest manner as for the previous case. Here, however, the predicate tree is evaluated with the properties of the current instances to determine if the current combination of instances qualify for the resultant rowset.</p>
<h4>See Also</h4>
<p>
<a href="odbcdrvr_9wdv.htm">ODBC Handles</a></p>
<p>&nbsp;</p></body>
</HTML>

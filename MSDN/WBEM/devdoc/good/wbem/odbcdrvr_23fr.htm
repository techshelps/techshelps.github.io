<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CIM to ODBC Mapping</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_hmm_cim_to_odbc_mapping"></a>CIM to ODBC Mapping</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The Common Information Model (CIM) maps to ODBC as follows:
<dl>
<dt>
CIM namespaces map to ODBC databases.</dt>
<dd>
In CIM, namespaces are instances of the <b>__NameSpace</b> class. Namespaces can contain child namespaces, which can be enumerated like any other instance of a class. </dd>
<dt>
CIM classes map to ODBC tables.</dt>
<dd>
The table qualifier is the fully qualified <b>__NameSpace</b> name. A class is unique. If a class exists in two different namespaces, the adapter maps them as two different tables. </dd>
<dt>
CIM class properties map to table columns as follows:</dt>
<dd>

<ul>
<li>
The property name becomes the column name.</li>
<li>
The property value becomes the column value.</li>
<li>
The property qualifiers become column metadata. </li>
</ul>

<p>
The property qualifiers are exposed to the ODBC clients by using <b>SQLColumns</b>. Some of the metadata is used to determine the standard metadata exposed by <b>SQLColumns</b>. All qualifiers are contained as a SQL_LONGVARCHAR in a thirteenth column added to the resultant rowset. The adapter only exposes qualifiers on a per-class basis, not on a per-class, per-instance basis. Therefore, information in qualifiers that vary over instances is inaccessible. See <a href="odbcdrvr_3z1b.htm">SQLColumns</a> for more information. 
</dd>
<dt>
CIM class qualifiers map to metadata of a table (as exposed through <b>SQLTables</b>).</dt>
<dd>
A sixth column of the rowset has been added to <b>SQLTables</b> to return all class qualifiers as an SQL_LONGVARCHAR. For more information, see <a href="odbcdrvr_0ljz.htm">SQLTables</a>. The adapter exposes qualifiers on a per-class basis only. Therefore, the adapter does not access qualifier information that varies across instances.</dd>
<dt>
CIM data types map to ODBC SQL data types.</dt>
<dd>
CIM uses variants to return property values. The ODBC adapter supports these variant types. The CIMTYPE attribute has more semantics than the variant type. For example, if the variant type is BSTR and the CIMTYPE is IpAddress, the variant BSTR is in fact an IP address. The adapter uses the CIMTYPE attribute sparingly. For more information on data types, see Appendix D of the <i>ODBC 2.0 Programmer's Reference and SDK Guide</i>.
</dd>
</dl>
<p>
The following table shows the mapping of variant types to ODBC types.</p>
<table cellspacing=4 cols=4>
<tr valign=top>
<th align=left width=20%>Variant Type</th>
<th align=left width=24%>Data source-Dependent Name</th>
<th align=left width=28%>CIMTYPE String</th>
<th align=left width=28%>SQL Type</th>
</tr>
<tr valign=top>
<td colspan=4 width=100%></td>
</tr>
<tr valign=top>
<td width=20%>VT_UI1</td>
<td width=24%>UINT8</td>
<td width=28%>UINT8</td>
<td width=28%>SQL_TINYINT</td>
</tr>
<tr valign=top>
<td width=20%>VT_I2</td>
<td width=24%>SINT8</td>
<td width=28%>SINT8</td>
<td width=28%>SQL_TINYINT</td>
</tr>
<tr valign=top>
<td width=20%>VT_I2</td>
<td width=24%>SINT16</td>
<td width=28%>SINT16<p>
Default case if nothing else matches</p>
</td>
<td width=28%>SQL_SMALLINT</td>
</tr>
<tr valign=top>
<td width=20%>VT_I4</td>
<td width=24%>UINT16</td>
<td width=28%>UINT16</td>
<td width=28%>SQL_SMALLINT</td>
</tr>
<tr valign=top>
<td width=20%>VT_I4</td>
<td width=24%>UINT32</td>
<td width=28%>UINT32</td>
<td width=28%>SQL_INTEGER</td>
</tr>
<tr valign=top>
<td width=20%>VT_I4</td>
<td width=24%>SINT32</td>
<td width=28%>SINT32<p>
Default case if nothing else matches</p>
</td>
<td width=28%>SQL_INTEGER</td>
</tr>
<tr valign=top>
<td width=20%>VT_BSTR</td>
<td width=24%>SINT64</td>
<td width=28%>SINT64</td>
<td width=28%>SQL_BIGINT</td>
</tr>
<tr valign=top>
<td width=20%>VT_BSTR</td>
<td width=24%>UINT64</td>
<td width=28%>UINT64</td>
<td width=28%>SQL_BIGINT</td>
</tr>
<tr valign=top>
<td width=20%>VT_BSTR</td>
<td width=24%>INTERVAL</td>
<td width=28%>INTERVAL</td>
<td width=28%>SQL_TIMESTAMP</td>
</tr>
<tr valign=top>
<td width=20%>VT_BSTR</td>
<td width=24%>TIMESTAMP</td>
<td width=28%>DATETIME</td>
<td width=28%>SQL_TIMESTAMP</td>
</tr>
<tr valign=top>
<td width=20%>VT_BSTR</td>
<td width=24%>DATE</td>
<td width=28%>DATE</td>
<td width=28%>SQL_DATE</td>
</tr>
<tr valign=top>
<td width=20%>VT_BSTR</td>
<td width=24%>TIME</td>
<td width=28%>TIME</td>
<td width=28%>SQL_TIME</td>
</tr>
<tr valign=top>
<td width=20%>VT_BSTR</td>
<td width=24%>SMALL_STRING</td>
<td width=28%>STRING<p>
The property must also have a MAX qualifier with a value &lt;= 254.</p>
<p>
Default case if nothing else matches</p>
<p>
If the MAX qualifier value cannot be retrieved, the default value of 254 is used.</p>
</td>
<td width=28%>SQL_VARCHAR</td>
</tr>
<tr valign=top>
<td width=20%>VT_BSTR</td>
<td width=24%>STRING</td>
<td width=28%>STRING<p>
The property must also have a MAX qualifier with value &gt; 254.</p>
<p>
If MAX qualifier value &gt; 16384, it is truncated to 16384.</p>
</td>
<td width=28%>SQL_LONGVARCHAR</td>
</tr>
<tr valign=top>
<td width=20%>VT_R4</td>
<td width=24%>REAL</td>
<td width=28%></td>
<td width=28%>SQL_DOUBLE</td>
</tr>
<tr valign=top>
<td width=20%>VT_R8</td>
<td width=24%>DOUBLE</td>
<td width=28%></td>
<td width=28%>SQL_DOUBLE</td>
</tr>
<tr valign=top>
<td width=20%>VT_BOOL</td>
<td width=24%>BIT</td>
<td width=28%></td>
<td width=28%>SQL_BIT</td>
</tr>
<tr valign=top>
<td width=20%>VT_ARRAY | VT_UI1</td>
<td width=24%>SINT8_ARRAY</td>
<td width=28%>SINT8</td>
<td width=28%>SQL_LONGVARBINARY</td>
</tr>
<tr valign=top>
<td width=20%>VT_ARRAY | VT_I2</td>
<td width=24%>UINT8_ARRAY</td>
<td width=28%>UINT8</td>
<td width=28%>SQL_LONGVARBINARY</td>
</tr>
<tr valign=top>
<td width=20%>VT_ARRAY | VT_I2</td>
<td width=24%>SINT16_ARRAY</td>
<td width=28%>SINT16<p>
Default case if nothing else matches</p>
</td>
<td width=28%>SQL_LONGVARBINARY</td>
</tr>
<tr valign=top>
<td width=20%>VT_ARRAY | VT_I4</td>
<td width=24%>UINT16_ARRAY</td>
<td width=28%>UINT16</td>
<td width=28%>SQL_LONGVARBINARY</td>
</tr>
<tr valign=top>
<td width=20%>VT_ARRAY | VT_I4</td>
<td width=24%>UINT32_ARRAY</td>
<td width=28%>UINT32</td>
<td width=28%>SQL_LONGVARBINARY</td>
</tr>
<tr valign=top>
<td width=20%>VT_ARRAY | VT_I4</td>
<td width=24%>SINT32_ARRAY</td>
<td width=28%>SINT32<p>
Default case if nothing else matches</p>
</td>
<td width=28%>SQL_LONGVARBINARY</td>
</tr>
<tr valign=top>
<td width=20%>VT_ARRAY | VT_BOOL</td>
<td width=24%>BOOL_ARRAY</td>
<td width=28%></td>
<td width=28%>SQL_LONGVARBINARY</td>
</tr>
<tr valign=top>
<td width=20%>VT_ARRAY | VT_R4</td>
<td width=24%>REAL_ARRAY</td>
<td width=28%></td>
<td width=28%>SQL_LONGVARBINARY</td>
</tr>
<tr valign=top>
<td width=20%>VT_ARRAY | VT_R8</td>
<td width=24%>DOUBLE_ARRAY</td>
<td width=28%></td>
<td width=28%>SQL_LONGVARBINARY</td>
</tr>
<tr valign=top>
<td width=20%>VT_ARRAY | VT_BSTR</td>
<td width=24%>SINT64_ARRAY</td>
<td width=28%>SINT64</td>
<td width=28%>SQL_LONGVARBINARY</td>
</tr>
<tr valign=top>
<td width=20%>VT_ARRAY | VT_BSTR</td>
<td width=24%>UINT64_ARRAY</td>
<td width=28%>UINT64</td>
<td width=28%>SQL_LONGVARBINARY</td>
</tr>
<tr valign=top>
<td width=20%>VT_ARRAY | VT_BSTR</td>
<td width=24%>STRING_ARRAY</td>
<td width=28%>STRING<p>
Default case if nothing else matches</p>
</td>
<td width=28%>SQL_LONGVARBINARY</td>
</tr>
<tr valign=top>
<td width=20%>VT_ARRAY | VT_BSTR</td>
<td width=24%>INTERVAL_ARRAY</td>
<td width=28%>INTERVAL</td>
<td width=28%>SQL_LONGVARBINARY</td>
</tr>
<tr valign=top>
<td width=20%>VT_ARRAY | VT_BSTR</td>
<td width=24%>TIMESTAMP_ARRAY</td>
<td width=28%>DATETIME</td>
<td width=28%>SQL_LONGVARBINARY</td>
</tr>
<tr valign=top>
<td width=20%>VT_ARRAY | VT_BSTR</td>
<td width=24%>DATE_ARRAY</td>
<td width=28%>DATE</td>
<td width=28%>SQL_LONGVARBINARY</td>
</tr>
<tr valign=top>
<td width=20%>VT_ARRAY | VT_BSTR</td>
<td width=24%>TIME_ARRAY</td>
<td width=28%>TIME</td>
<td width=28%>SQL_LONGVARBINARY</td>
</tr>
</table><br>
<p>
As the table shows, CIM supports multiple array types. These array types are returned as binary data. However, through ODBC, these array values can also be returned as ASCII strings. For example:
<ul>
<li>
An integer array is [-3] [200] [50] [45].</li>
<li>
A floating point array is [1.234567] [234.567890].</li>
<li>
A string array is [billy] [jack] [freddy].</li>
</ul>
<p>
Use <b>SQLColumns</b> to get the data source-dependent type in order to distinguish between [-3][200][50][45] as an array of integers and an array of strings (which just look like numbers).</p>
<p>
If an array name or value contains a left or right square bracket within itself, the brackets are doubled in the ASCII representation. For example, fr[ed]dy is shown as:</p>
<p>
[fr[[ed]]dy]</p>
<p>
CIM class and property qualifiers that change with the instance of a class are not exposed.</p>
<p>
CIM associations are only exposed insofar as they are represented by classes. Thus, foreign keys are not used in a table to relate the classes of an association.</p>
<p>
An ODBC data source can include several databases. See <a href="odbcdrvr_09ph.htm">Connecting to a Data Source</a> for information on database configuration. </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IWbemClassObject::Put</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_hmm_iwbemclassobject_put"></a>IWbemClassObject::Put</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The <b>IWbemClassObject::Put</b> method sets a named property to a new value. This method always overwrites the current value with the new one.</p>
<pre><code><b>HRESULT IWbemClassObject::Put(
  [in] BSTR</b><i> bstrName</i><b>, </b>
<b>  [in] Long</b><i> lFlags</i><b>,</b>
<b>  [in] VARIANT</b><i> *pVal</i><b>,</b>
<b>  [in] VARTYPE</b><i> vtType </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>bstrName</i></dt>
<dd>
Must point to a valid BSTR containing the property name. The pointer is treated as read-only. This cannot be NULL.</dd>
<dt>
<i>lFlags</i></dt>
<dd>
Reserved. It must be zero.</dd>
<dt>
<i>pVal</i></dt>
<dd>
Must point to a valid <b>VARIANT</b>, which becomes the new property value. If <i>pVal</i> is NULL or points to a <b>VARIANT</b> of type VT_NULL, the property is set to NULL, that is, no value.

<p>
<b>Note</b>&nbsp;&nbsp;The NULL value for a property designated by a <b>VARIANT</b> of type VT_NULL is distinguished from a property of type VT_I4 with a zero <i>value</i>.


<p>
If <i>pVal</i> is NULL or points to a VT_NULL, the type of the property is inferred from the <i>vtType</i> parameter.

<p>
If <i>pVal </i>is to contain an embedded <b>IWbemClassObject</b><i>, </i>the caller must call <a href="hmmref_0rhh.htm"><b>IWbemClassObject::QueryInterface</b></a><i> </i>for <b>IID_IDispatch<i> </i></b>and place the resulting pointer in the <b>VARIANT</b> using a type of VT_DISPATCH. 

<p>
The pointer is treated as read-only. The caller is responsible for invoking <b>VariantClear</b> after this call has completed.
</dd>
<dt>
<i>vtType</i></dt>
<dd>
This parameter is used only when <i>pVal</i> is NULL or points to a <b>VARIANT</b> of type VT_NULL. In such a case, the <i>vtType</i> parameter specifies a COM type of the property. In every other case, <i>vtType</i> must be zero. <i>vtType</i> must also be zero whenever the underlying object is an instance (even if <i>pVal</i> is NULL), since the type of the property is fixed and cannot be changed. In other words, <i>vtType</i> is used if, and only if, <i>pVal</i> is NULL or points to a VT_NULL <b>VARIANT</b>, and the underlying object is a class.</dd>
</dl>
<p>
</p>
<h4>Return Values</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=57%>WBEM_E_FAILED</td>
<td width=43%>General failure.</td>
</tr>
<tr valign=top>
<td width=57%>WBEM_E_INVALID_PARAMETER</td>
<td width=43%>An invalid parameter was specified, or the namespace could not be parsed.</td>
</tr>
<tr valign=top>
<td width=57%>WBEM_E_INVALID_PROPERTY_TYPE</td>
<td width=43%>Property type is not recognized.</td>
</tr>
<tr valign=top>
<td width=57%>WBEM_E_OUT_OF_MEMORY</td>
<td width=43%>There was insufficient memory to complete the operation.</td>
</tr>
<tr valign=top>
<td width=57%>WBEM_E_TYPE_MISMATCH</td>
<td width=43%>For instances, this error code indicates that the <i>pVal</i> parameter points to a <b>VARIANT</b> of an incorrect type for the property. For class definitions, this is returned if the property already exists in the parent class, and the new COM type is different from the old COM type. Such properties are read-only for the derived class.</td>
</tr>
<tr valign=top>
<td width=57%>WBEM_NO_ERROR</td>
<td width=43%>Success.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
If the property exists in the superclass, its default value is changed unless it is a type mismatch. If the property does not exist and it is not a type mismatch, the property is created.</p>
<p>
When executing this method on an instance, an overwrite always occurs. It occurs because the property always exists.</p>
<p>
When you are creating a new class, and  the underlying type of the property is an object reference, a date/time string, or other special type, it might be necessary to modify the CIMTYPE qualifier for the property to indicate the special new class. When modifying properties of an instance, the qualifiers are set to the correct values ahead of time.</p>
<p>
You can only write system properties when you create a new class. In that case, the name of the class you create is designated by writing it to the system property <a href="concepts_9kmr.htm"><b>__CLASS</b></a>.</p>
<h4>See Also</h4>
<p>
<u>System Classes, Properties, and Qualifiers</u>_</p>
<p>&nbsp;</p></body>
</HTML>

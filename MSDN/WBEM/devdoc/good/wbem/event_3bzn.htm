<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Permanent Event Consumers</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_hmm_permanent_event_consumers"></a>Permanent Event Consumers</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
Permanent event consumers receive notifications whether or not they are running. The registration of a permanent consumer is stored persistently until the user explicitly removes it. When an event occurs, CIMOM determines whether or not the permanent consumer is active. If the consumer is inactive, CIMOM uses information stored in the system registry to locate the consumer and then loads it before attempting the notification.</p>
<p>
Permanent consumers are implemented as COM objects. Depending on the platform, a permanent consumer can be implemented as an in-process DLL, local server, or remote server. In-process permanent consumers work on all platforms, have a higher rate of delivery, and a lower system overhead. This is because of the absence of network traffic and interprocess communication. </p>
<p>
Permanent consumers implemented as local and remote servers require Distributed COM (DCOM) running on one of the following platforms:
<ul>
<li>
Microsoft® Windows® 95</li>
<li>
Microsoft® Windows® 98</li>
<li>
Microsoft® Windows NT® 4.0 or later</li>
</ul>
<p>
On Windows NT, DCOM is run automatically. On the Windows 95 and Windows 98 platforms, DCOM must be enabled.</p>
<p>
Permanent consumers can be configured to receive their event notifications either asynchronously or synchronously. With asynchronous event notification, the event provider is not blocked while a notification is delivered. The sending thread is unrelated to the receiving thread. The disadvantage to asynchronous delivery is that a context switch occurs between the time the provider produces the event and the consumer receives it. </p>
<p>
With synchronous notification, the notification is delivered on the same thread that the event provider used to deliver the event to CIMOM. The event provider sends a notification and is blocked until it is delivered. To request synchronous notification, an administrator sets the <b>SynchronousDelivery</b> property in the Binding instance to TRUE. Only consumers that are extremely fast and can process an event in 20 micrseconds or less should consider supporting synchronous notification. </p>
<p>&nbsp;</p></body>
</HTML>

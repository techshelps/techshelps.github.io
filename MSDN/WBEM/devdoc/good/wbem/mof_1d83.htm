<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MOF Arrays</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_hmm_mof_arrays"></a>MOF Arrays </h2>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
MOF supports many different types of arrays, such as arrays of object references and embedded objects in addition to more standard string and numeric arrays. All arrays must be one-dimensional. Array dimensions vary at run time and are implemented internally as SAFEARRAY types. Arrays are initialized by specifying values of the appropriate type in a comma-separated list. </p>
<p>
All elements in an array must be either values of the same type or NULL values. If the elements of an array are of type <b>object</b>, then any object is allowed in the array. If a specific type is declared, then only objects of that class or any of its subclasses are allowed. </p>
<p>
To specify an array in a class declaration, use brackets after the property identifer. </p>
<pre><code>class ArrayDataClass
{
    string strArray1[];
    string strArray2[] = {"hello", "there"};
    sint32 dwArray1[] = {1,2,3};
    EmbedClass objArray[];
};
instance of ArrayDataClass
{
    strArray1 = { "1.2.3.4", "1.2.3.5", "1.2.3.7"};
    strArray2 = {
            "select * from RegistryKeyChangeEvent",
            "select * from RegistryValueChangeEvent",
            "select * from RegistryTreeChangeEvent"};
    dwArray  = { 1, 2, 3, 5, 6 };
    objArray = {instance of EmbedClass{PropOfClass=3}, 
                instance of EmbedClass(PropOfClass=4};};
}
 </code></pre>
<p>
Arrays of references are simply arrays of object path strings:</p>
<pre><code>instance of ClassWithRefArray
{
    refArray = {"Disk.Name=\"C:\"", "Disk.Name=\"E:\"";};
}
</code></pre>
<p>
Arrays can be used with methods in class declarations only as parameters; they are not allowed to function as return values that are not output parameters. Arrays can be unbounded or have an explicit size, as is illustrated below:</p>
<pre><code>Class MyClass
{
    sint32 MyMethod1 ([in] Win32LogicalDisk DiskArray1[]);
    sint32 MyMethod2 ([in] Win32LogicalDisk DiskArray2[32]);
}
</code></pre>
<p>
WBEM implements bounded and unbounded arrays as SAFEARRAYS, expanding an array's size if necessary. When an array is declared with an explicit size, this size is stored as a qualifier and treated as the suggested maximum size. The explicit size has no affect on the actual data. </p>
<p>&nbsp;</p></body>
</HTML>

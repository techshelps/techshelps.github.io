<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Textual Conventions for Type Values</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_hmm_textual_conventions_for_type_values"></a>Textual Conventions for Type Values</h2>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
Each MOF syntax type is assigned a syntactical convention used when specifying values for property assignments. The following table defines the MOF syntax type definition and its syntactical representation in the Lex notational convention:  </p>
<h4>Table 6:  Syntactical Conventions for MOF Syntax Types</h4>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=31%>MOF syntax type</th>
<th align=left width=34%>Can be empty?</th>
<th align=left width=35%>Syntactical representation</th>
</tr>
<tr valign=top>
<td width=31%>INTEGER</td>
<td width=34%>FALSE</td>
<td width=35%>( [1-9] ) ( [0-9] )* | ( [0-7] )+ | ( 0x ( ( [0-9] | [a-f] | [A-F] ) + ) )</td>
</tr>
<tr valign=top>
<td width=31%>OCTETSTRING</td>
<td width=34%>TRUE</td>
<td width=35%>( ( [0-9] | [a-f] | [A-F] ) ( [0-9] | [a-f] | [A-F] ) )*</td>
</tr>
<tr valign=top>
<td width=31%>OBJECTIDENTIFIER</td>
<td width=34%>FALSE</td>
<td width=35%>( [1-9] ) ( [0-9] )* ( . ( [1-9] ) ( [0-9] )* ) *</td>
</tr>
<tr valign=top>
<td width=31%>NULL</td>
<td width=34%>MANDATORY</td>
<td width=35%></td>
</tr>
<tr valign=top>
<td width=31%>IPADDRESS</td>
<td width=34%>FALSE</td>
<td width=35%>( [1-9] ) ( [0-9] )* ( . ( [1-9] ) ( [0-9] )* ) 3</td>
</tr>
<tr valign=top>
<td width=31%>COUNTER</td>
<td width=34%>FALSE</td>
<td width=35%>( [1-9] ) ( [0-9] )* | ( [0-7] )+ | ( 0x ( ( [0-9] | [a-f] | [A-F] ) ) + )</td>
</tr>
<tr valign=top>
<td width=31%>GAUGE</td>
<td width=34%>FALSE</td>
<td width=35%>( [1-9] ) ( [0-9] )* | ( [0-7] )+ | ( 0x ( ( [0-9] | [a-f] | [A-F] ) )+ )</td>
</tr>
<tr valign=top>
<td width=31%>TIMETICKS</td>
<td width=34%>FALSE</td>
<td width=35%>( [1-9] ) ( [0-9] )* | ( [0-7] )+ | ( 0x ( ( [0-9] | [a-f] | [A-F] ) )+ )</td>
</tr>
<tr valign=top>
<td width=31%>OPAQUE</td>
<td width=34%>TRUE</td>
<td width=35%>( ( [0-9] | [a-f] | [A-F] ) ( [0-9] | [a-f] | [A-F] ) )*</td>
</tr>
<tr valign=top>
<td width=31%>NETWORKADDRESS</td>
<td width=34%>FALSE</td>
<td width=35%>( [1-9] ) ( [0-9] )* ( . ( [1-9] ) ( [0-9] )+ ) 3</td>
</tr>
<tr valign=top>
<td width=31%>Displaystring</td>
<td width=34%>TRUE</td>
<td width=35%>.*</td>
</tr>
<tr valign=top>
<td width=31%>MacAddress</td>
<td width=34%>FALSE</td>
<td width=35%>( [0-9] | [a-f] | [A-F] ) ( [0-9] | [a-f] | [A-F] )<b> </b></td>
</tr>
<tr valign=top>
<td width=31%></td>
<td width=34%></td>
<td width=35%>( : ( [0-9] | [a-f] | [A-F] ) ( [0-9] | [a-f] | [A-F] ) ) ) 5</td>
</tr>
<tr valign=top>
<td width=31%>PhysAddress</td>
<td width=34%>TRUE</td>
<td width=35%>( [0-9] | [a-f] | [A-F] ) ( [0-9] | [a-f] | [A-F] )<b> </b></td>
</tr>
<tr valign=top>
<td width=31%></td>
<td width=34%></td>
<td width=35%>( : ( [0-9] | [a-f] | [A-F] ) ( [0-9] | [a-f] | [A-F] ) ) ) *</td>
</tr>
<tr valign=top>
<td width=31%>EnumeratedINTEGER</td>
<td width=34%>FALSE</td>
<td width=35%>One of enumerated values</td>
</tr>
<tr valign=top>
<td width=31%>BITS</td>
<td width=34%>TRUE</td>
<td width=35%>Array of enumerated values</td>
</tr>
<tr valign=top>
<td width=31%>DateTime</td>
<td width=34%>FALSE</td>
<td width=35%>( [1-9] ) ( [0-9] )* '-' ( [1-9] ) ( [0-9] )* '-' ( [1-9] ) ( [0-9] )*<b> </b><p>
'.'<b> </b></p>
<p>
( [1-9] ) ( [0-9] )* ':' ( [1-9] ) ( [0-9] )* ':' ( [1-9] ) ( [0-9] )* '.' ( [1-9] ) ( [0-9] )*<b> </b></p>
<p>
','</p>
<p>
( '+' | '-' ) ( [1-9] ) ( [0-9] )* ':' ( [1-9] ) ( [0-9] )*</p>
</td>
</tr>
<tr valign=top>
<td width=31%>SnmpOSIAddress</td>
<td width=34%>FALSE</td>
<td width=35%>( ( [0-9] | [a-f] | [A-F] )+ '/' ( ( [0-9] | [a-f] | [A-F] )+</td>
</tr>
<tr valign=top>
<td width=31%>SnmpUDPAddress</td>
<td width=34%>FALSE</td>
<td width=35%>( [1-9] ) ( [0-9] )* ( .  ( [1-9] ) ( [0-9] )+ ) 3 '/' ( [1-9] ) ( [0-9] )*</td>
</tr>
<tr valign=top>
<td width=31%>SnmpIPXAddress</td>
<td width=34%>FALSE</td>
<td width=35%>( [0-9] | [a-f] | [A-F] ) 4 '.' ( ( ( [0-9] | [a-f] | [A-F] ) ( [0-9] | [a-f] | [A-F] ) ) (':' ( [0-9] | [a-f] | [A-F] ) ( [0-9] | [a-f] | [A-F] ) ) 5 ) '.' ( [0-9])+</td>
</tr>
</table><br>
<p>
<b>Note</b>&nbsp;&nbsp;The NETWORKADDRESS type currently only supports IpAddress; therefore, the syntactical representation is always assumed to be IpAddress.</p>
<p>&nbsp;</p></body>
</HTML>

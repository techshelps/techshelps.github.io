<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SQL1 BNF Syntax Description</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_hmm_sql1_bnf_syntax_description"></a>SQL1 BNF Syntax Description</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<pre><code>&lt;parse&gt; ::= SELECT &lt;prop_list&gt; FROM &lt;class_name&gt; &lt;opt_where&gt;;
&lt;parse&gt; ::= SELECT &lt;prop_list&gt; FROM &lt;class_name&gt; &lt;tolerance&gt; &lt;opt_where&gt;
                &lt;opt_aggregation&gt;;

&lt;opt_where&gt; ::= WHERE &lt;expr&gt;;
&lt;opt_where&gt; ::= &lt;&gt;;

&lt;prop_list&gt; ::= &lt;property_name&gt; &lt;prop_list_2&gt;;
&lt;prop_list_2&gt; ::= COMMA &lt;prop_list&gt;;
&lt;prop_list_2&gt; ::= &lt;&gt;;

&lt;property_name&gt; ::= ASTERISK;
&lt;property_name&gt; ::= IDENTIFIER &lt;property_name_2&gt;;
&lt;property_name_2&gt; ::= &lt;&gt;;
&lt;property_name_2&gt; ::= DOT IDENTIFIER &lt;property_name_2&gt;;

&lt;class_name&gt; ::= IDENTIFIER;
&lt;tolerance&gt; ::= &lt;&gt;;
&lt;tolerance&gt; ::= WITHIN &lt;duration&gt;;

&lt;duration&gt; ::= DOUBLE;

// Subexpression nesting.  This particular sequence gives
// a series of AND clauses precedence over OR clauses.

&lt;expr&gt; ::= &lt;term&gt; &lt;expr2&gt;;
&lt;expr2&gt; ::= OR &lt;term&gt; &lt;expr2&gt;;
&lt;expr2&gt; ::= &lt;&gt;;

&lt;term&gt; ::= &lt;simple_expr&gt; &lt;term2&gt;;
&lt;term2&gt; ::= AND &lt;simple_expr&gt; &lt;term2&gt;;
&lt;term2&gt; ::= &lt;&gt;;

// Simple expression types.
// ========================

&lt;simple_expr&gt; ::= NOT &lt;expr&gt;;
&lt;simple_expr&gt; ::= OPEN_PAREN &lt;expr&gt; CLOSE_PAREN;
&lt;simple_expr&gt; ::= &lt;property_name&gt; &lt;leading_ident_expr&gt; &lt;finalize&gt;;
&lt;simple_expr&gt; ::= VARIANT &lt;rel_operator&gt; &lt;trailing_prop_expr&gt; &lt;finalize&gt;;

&lt;trailing_prop_expr&gt; ::=  &lt;property_name&gt; &lt;trailing_prop_expr2&gt;;
&lt;trailing_prop_expr2&gt; ::= OPEN_PAREN &lt;property_name&gt; CLOSE_PAREN;
&lt;trailing_prop_expr2&gt; ::= &lt;&gt;;

&lt;leading_ident_expr&gt; ::= OPEN_PAREN &lt;unknown_func_expr&gt;;
&lt;leading_ident_expr&gt; ::= &lt;comp_operator&gt; &lt;trailing_const_expr&gt;;
&lt;leading_ident_expr&gt; ::= &lt;equiv_operator&gt; &lt;trailing_or_null&gt;;
&lt;leading_ident_expr&gt; ::= &lt;is_operator&gt; NULL;

&lt;unknown_func_expr&gt; ::= &lt;property_name&gt; CLOSE_PAREN &lt;rel_operator&gt; &lt;trailing_const_expr&gt;;
&lt;unknown_func_expr&gt; ::= &lt;typed_constant&gt; CLOSE_PAREN &lt;rel_operator&gt; &lt;trailing_prop_expr&gt;;

&lt;trailing_or_null&gt; ::= NULL;
&lt;trailing_or_null&gt; ::= &lt;trailing_const_expr&gt;;

&lt;trailing_const_expr&gt; ::= &lt;typed_constant&gt;;
&lt;trailing_const_expr&gt; ::= &lt;property_name&gt; OPEN_PAREN &lt;typed_constant&gt; CLOSE_PAREN;

&lt;typed_constant&gt; ::= VARIANT; // VT_R8, VT_I4, VT_BSTR
&lt;typed_constant&gt; ::= TRUE; 
&lt;typed_constant&gt; ::= FALSE; 

&lt;finalize&gt; ::= &lt;&gt;; 
    // This is just a semantic production in the parser to allow
    // all the important code to be located in one place.

&lt;rel_operator&gt; ::= &lt;equiv_operator&gt;;
&lt;rel_operator&gt; ::= &lt;comp_operator&gt;;

&lt;equiv_operator&gt; ::= EQUIVALENT_OPERATOR; // =, !=
&lt;comp_operator&gt; ::=  COMPARE_OPERATOR;  // &lt;=, &gt;=, &lt;, &gt;, like
&lt;is_operator&gt; ::=  ISNOT_OPERATOR;  // IS, IS NOT


&lt;opt_aggregation&gt; ::= &lt;&gt;;
&lt;opt_aggregation&gt; ::= GROUP &lt;aggregation_params&gt; &lt;opt_having&gt;;
&lt;aggregation_params&gt; ::= &lt;aggregate_by&gt; &lt;opt_aggregate_within&gt;;
&lt;aggregation_params&gt; ::= &lt;aggregate_within&gt; &lt;opt_aggregate_by&gt;;

&lt;opt_aggregate_by&gt; ::= &lt;&gt;;
&lt;opt_aggregate_by&gt; ::= BY &lt;aggregate_by&gt;;

&lt;opt_aggregate_within&gt; ::= &lt;&gt;;
&lt;opt_aggregate_within&gt; ::= WITHIN &lt;aggregate_within&gt;;

&lt;aggregate_within&gt; ::= &lt;duration&gt;;
&lt;aggregate_by&gt; ::= &lt;aggregate_prop_list&gt;;

&lt;aggregate_prop_list&gt; ::= &lt;prop_list&gt;;

&lt;opt_having&gt; ::= &lt;&gt;;
&lt;opt_having&gt; ::= HAVING &lt;expr&gt;;</code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Mapping Variable-Length Subtype Definitions</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_hmm_mapping_variable_length_subtype_definitions"></a>Mapping Variable-Length Subtype Definitions</h3>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The following mapping applies where the SYNTAX clause of the SNMPv1 and SNMPv2C <b>OBJECT-TYPE</b> macro refers to an SNMP primitive type, named type, or textual convention containing a subtype definition derived from a variable-length OCTET STRING or "Opaque".</p>
<p>
The CIM named qualifier <b>textual_convention</b> defines the textual representation of the SYNTAX clause of the <b>OBJECT-TYPE</b> macro. </p>
<p>
The CIM named qualifier <b>object_syntax</b> defines the named type definition present within the SYNTAX clause of the <b>OBJECT-TYPE</b> macro. The <b>object_syntax</b> is copied from the SYNTAX clause of the <b>OBJECT-TYPE</b> macro up to but not including the size constraints.</p>
<p>
The CIM named qualifier <b>encoding</b> defines the SNMP type used when encoding SNMPv1 and SNMPv2C protocol frames.</p>
<p>
The CIM property qualifier <b>variable_length</b> specifies the minimum, maximum, and fixed-length values associated with the type definition. The <b>variable_length</b> qualifier is implemented as a qualifier string in the following format where the variable-length values are represented as unsigned 32-bit integers:</p>
<pre><code>(((0.9) .. (0.9)) | (0.9))(, (((0.9) .. (0.9)) | (0.9)))*
 </code></pre>
<p>
For example:</p>
<pre><code>MySnmpOSIAddress ::=  TEXTUAL-CONVENTION

    DISPLAY-HINT    "*1x:/1x:"
    STATUS        current
    DESCRIPTION
            "Represents an OSI transport-address:

               octets   contents           encoding
                  1     length of NSAP     'n' as an unsigned-integer
                                              (either 0 or from 3 to 20)
               2..(n+1) NSAP                concrete binary representation
               (n+2)..m TSEL               string of (up to 64) octets
            "
    SYNTAX         OCTET STRING (SIZE (1|4..85))
 </code></pre>
<p>
This example maps to:</p>
<pre><code>display_hint("*1x:/1x:"),
encoding("OCTETSTRING"),
textual_convention("OCTETSTRING"),
variable_length ("1,4..85")
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

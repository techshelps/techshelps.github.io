<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding Instrumentation to the Code</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_hmm_adding_instrumentation_to_the_code"></a>Adding Instrumentation to the Code</h2>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<h5>&nbsp;&nbsp;&nbsp;&nbsp;To add instrumentation to the code</h5>
<p>
There are two ways that a provider can be called: either it is asked to enumerate all instances (which calls <b>AddDynamicInstances,</b> or it can be asked for one specific instance through the <b>GetObject</b> call, which calls <b>RefreshInstance</b>.</p>
<p>
In real code, you could use this fact to implement "expensive" properties. When the enumerate function is called, you could return only the "cheap" values. When the <b>GetObject</b> function is called, you can get all information.</p>
<p>
In the following sample, different values are returned to show that both methods are being called.
<ol>
<li>
Add the following code to <b>CMyClass::AddDynamicInstances</b> just before the <b>return </b>statement:<pre><code>BuildNewInstance();
    MyName = "Fred";
    Age = 15;
    dwInstanceCount++;
    CommitNewInstance();
 
    BuildNewInstance();
    MyName = "Mary";
    Age = 16;
    dwInstanceCount++;
    CommitNewInstance();
 </code></pre>
<p>
This means we will be returning two instances. You can also structure this as:
<pre><code>{
   BuildNewInstance();
   .
   .
   .
   CommitNewInstance();
   dwInstanceCount++;
}
 </code></pre>
</li>
<li>
Add the following code to <b>CMyClass::RefreshInstance</b> just before the <b>return</b> statement:<pre><code>char szTemp[255];
    CHString sTemp;
    sTemp=MyName;

    strcpy(szTemp, sTemp.GetBuffer(255));

    if (stricmp(szTemp, "Fred") == 0) {
        Age = 15;
    } else if (stricmp(szTemp, "Mary") == 0) {
        Age = 16;
    } else {
        return FALSE;
    }
</code></pre>
</li>
<li>
Stop CIMOM.</li>
<li>
Recompile the code.</li>
</ol>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>C++ Code Generator Wizard</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_hmm_c_code_generator_wizard"></a>C++ Code Generator Wizard</h3>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The C++ Code Generator Wizard generates framework provider code for classes defined in the database. Producing this code is an initial step in the process of writing a provider that provides dynamic instances for a particular class of objects.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To run the C++ Code Generator Wizard</h5>
<ol>
<li>
In the Class Explorer, click the check boxes to select the classes for which you want to generate code. </li>
<li>
Double-click the <b>Provider C++ Wizard</b> icon. A welcome screen appears.</li>
<li>
Click <b>Next</b>. The following screen appears:</li>
</ol>
<p>
<img src="codegen1.gif" border=0></p>
<p class=indent1>
This screen shows each class you selected in step 1. For each class, do the following:</p>
<ol type=a>
<li>
Select the class name from the list under <b>Classes to generate code for</b>. </li>
<li>
Enter a <b>Base File Name</b>, <b>C++ Class Name</b>, and <b>Description</b> for the class.</li>
<li>
Select whether you want to override any inherited properties for the class. If you select <b>Override Inherited Properties</b>, a list of properties appears. Click the check boxes to select the properties to override. <p class=indent1>
If you are writing a provider for a class that is derived from an abstract class or if the parent class does not have a provider, you typically need to provide all the class properties. In this case, select <b>Override Inherited Properties</b>, then select all the properties that appear.</p>
<p class=indent1>
If your class is derived from a class that already has a provider, you only need to provide the properties the derived class defines. You do not need to override inherited properties in this case.</p>
</li>
<li>
Click <b>Next</b>. The following screen appears:</li>
</ol>
<p>
<img src="codegen2.gif" border=0></p>
<p class=indent1>
Enter the <b>Provider Name</b>, <b>Provider</b> <b>Description</b>, and the directory where the generated files will reside. You can use the <b>Browse</b> button to select the directory.</p>
<ol start=5>
<li>
Click <b>Finish</b>. A message box appears notifying you that the files have been generated. Click <b>OK</b> to dismiss the message box and close the wizard.</li>
</ol>
<p>
The wizard generates the following files: .CPP and .H files for each class created, .DEF and .ODL files for the provider, and Olesrvr.cpp. For instructions on turning these files into a functioning provider, see <a href="provider_80tr.htm">Creating a Provider with CIM Studio</a>.</p>
<p>&nbsp;</p></body>
</HTML>

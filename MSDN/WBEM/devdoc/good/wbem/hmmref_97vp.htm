<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IWbemServices::OpenNamespace</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_hmm_iwbemservices_opennamespace"></a>IWbemServices::OpenNamespace</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The <b>IWbemServices::OpenNamespace</b> method provides the caller with a new <b>IWbemServices</b> pointer that has the specified child namespace as its operating context. All operations through the new pointer, such as class or instance creation, only affect that namespace. The namespace must be a child namespace of the current object through which this method is called.</p>
<pre><code><b>HRESULT IWbemServices::OpenNamespace(
  [in]  BSTR</b><i> bstrNamespace</i><b>,               </b>
<b>  [in]  LONG</b><i> lFlags</i><b>,                  </b>
<b>  [in] IWbemContext</b><i> *pCtx</i><b>,              </b>
<b>  [out, OPTIONAL] IWbemServices</b><i> **ppWorkingNamespace</i><b>, </b> 
<b>  [out, OPTIONAL] IWbemCallResult</b><i> **ppResult  </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>bstrNamespace</i></dt>
<dd>
The object path to the target namespace. See <a href="concepts_8m2b.htm">Namespaces</a>. This namespace can only be relative to the current namespace associated with the <b>IWbemServices</b> interface pointer. This cannot be an absolute path. This parameter cannot be NULL.</dd>
<dt>
<i>lFlags</i></dt>
<dd>
Reserved. It must be zero.</dd>
<dt>
<i>pCtx</i></dt>
<dd>
Reserved. It must be NULL.</dd>
<dt>
<i>ppWorkingNamespace</i></dt>
<dd>
Receives the object representing the new namespace context. The returned pointer has a positive reference count. The caller must call <b>Release</b> on this pointer when it is no longer needed. This pointer is set to NULL when there are errors. If this parameter is specified, then <i>ppResult</i> must be NULL.</dd>
<dt>
<i>ppResult</i></dt>
<dd>
Typically NULL. If not NULL, then <i>ppWorkingNamespace </i>must be NULL. In this case, the parameter receives a pointer to a new <b>IWbemCallResult</b> object, and the call returns immediately. Then the caller can periodically poll the <a href="hmmref_4e5v.htm"><b>IWbemCallResult::GetResultServices</b></a> method until the pointer for the requested namespace becomes available. This parameter is then set to point to NULL when there is an error, and a new object is not returned.

<p>
<b>IMPORTANT</b>&nbsp;&nbsp;If you use this parameter, then you must set <i>ppResult </i>to point to NULL before calling the method. This is a DCOM rule.

</dd>
</dl>
<h4>Return Values</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=50%>WBEM_E_ACCESS_DENIED</td>
<td width=50%>The user does not have permission to access the requested context.</td>
</tr>
<tr valign=top>
<td width=50%>WBEM_E_FAILED</td>
<td width=50%>Other unspecified errors.</td>
</tr>
<tr valign=top>
<td width=50%>WBEM_E_INVALID_NAMESPACE</td>
<td width=50%>The specified namespace does not exist.</td>
</tr>
<tr valign=top>
<td width=50%>WBEM_E_INVALID_PARAMETER</td>
<td width=50%>An invalid parameter was specified, or the namespace could not be parsed.</td>
</tr>
<tr valign=top>
<td width=50%>WBEM_E_OUT_OF_MEMORY</td>
<td width=50%>There was not enough memory to complete the operation.</td>
</tr>
<tr valign=top>
<td width=50%>WBEM_E_TRANSPORT_FAILURE</td>
<td width=50%>The communications link between the current process and CIMOM has failed.</td>
</tr>
<tr valign=top>
<td width=50%>WBEM_NO_ERROR</td>
<td width=50%>The call succeeded.</td>
</tr>
</table><br>
<p>
On failure, you can obtain any available information from the COM function <b>GetErrorInfo</b>.</p>
<h4>Remarks</h4>
<p>
<a href="hmmref_28qa.htm"><b>IWbemLocator::ConnectServer</b></a> can also be used to open the same namespace. The only difference is that the <b>OpenNamespace</b> method allows you to place relative object paths in the <i>Namespace</i> parameter to open child namespaces recursively. <b>IWbemLocator::ConnectServer</b> requires a full object path. See <a href="concepts_5lyr.htm">Object Paths</a>.</p>
<p>
For example, if the current namespace associated with the <b>IWbemServices</b> interface pointer is Root, then using Default in the <i>Namespace</i> parameter yields a new pointer bound to the \Root\Default namespace.</p>
<p>
The namespace is closed when <b>Release</b> is called and the reference count reaches zero. </p>
<h4>See Also</h4>
<p>
<a href="progintro_19f7.htm">Error Objects</a>, <a href="hmmref_28qa.htm"><b>IWbemLocator::ConnectServer</b></a>, <a href="concepts_8m2b.htm">Namespaces</a></p>
<p>&nbsp;</p></body>
</HTML>

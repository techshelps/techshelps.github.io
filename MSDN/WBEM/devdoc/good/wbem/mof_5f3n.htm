<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MOF Numeric Data Types</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_hmm_mof_numeric_data_types"></a>MOF Numeric Data Types</h2>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
MOF supports the following types of numeric values:</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<td width=20%><b>Data type</b></td>
<td width=27%><b>Automation type</b></td>
<td width=53%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=20%>Sint8</td>
<td width=27%>VT_I2</td>
<td width=53%>Signed 8-bit integer</td>
</tr>
<tr valign=top>
<td width=20%>Sint16</td>
<td width=27%>VT_I2</td>
<td width=53%>Signed 16-bit integer</td>
</tr>
<tr valign=top>
<td width=20%>Sint32</td>
<td width=27%>VT_I4</td>
<td width=53%>Signed 32-bit integer</td>
</tr>
<tr valign=top>
<td width=20%>Sint64</td>
<td width=27%>VT_BSTR</td>
<td width=53%>Signed 64-bit integer in string form. Hexadecimal or decimal format according to ANSI C rules.</td>
</tr>
<tr valign=top>
<td width=20%>Real32</td>
<td width=27%>VT_R4</td>
<td width=53%>IEEE 4-byte floating-point</td>
</tr>
<tr valign=top>
<td width=20%>Real64</td>
<td width=27%>VT_R8</td>
<td width=53%>IEEE 8-byte floating-point</td>
</tr>
<tr valign=top>
<td width=20%>Uint8</td>
<td width=27%>VT_UI1</td>
<td width=53%>Unsigned 8-bit integer</td>
</tr>
<tr valign=top>
<td width=20%>Uint16</td>
<td width=27%>VT_I4</td>
<td width=53%>Unsigned 16-bit integer</td>
</tr>
<tr valign=top>
<td width=20%>Uint32</td>
<td width=27%>VT_I4</td>
<td width=53%>Unsigned 32-bit integer</td>
</tr>
<tr valign=top>
<td width=20%>Uint64</td>
<td width=27%>VT_BSTR</td>
<td width=53%>Unsigned 64-bit integer in string form. Hexadecimal or decimal format according to ANSI C rules.</td>
</tr>
</table><br>
<p>
<b>Note</b>&nbsp;&nbsp;64-bit integers must be encoded as string because Automation does not support a 64-bit integral type. </p>
<p>
Automation types do not always correspond in bit size to MOF data types. For example, VT_I4 is used to return an Uint16 value. This is because of sign extension problems. If VT_I2 was used instead of VT_I4, 65,536 would appear to be the value -1, causing a number of type and range problems. </p>
<p>
Since Automation does support an unsigned 8 bit type, VT_UI1, no change in representation is required. The Uint32 type is represented as VT_I4 because there is no larger integer type to contain it.</p>
<p>
Long constants are integer values that are declared using a simple series of digits with an optional negative sign. The long constant may not exceed the size of the variable that is declared to hold it. Some examples of long constants are 1000 and -12310. </p>
<p>
Hexadecimal, binary, and octal constants are also supported: </p>
<pre><code>val = 65;                        // Decimal
val = 0x41;                    // Hex (0x prefix)
val = 0101;                    // Octal (leading zero)
val = 1000001B;                // Binary (trailing B)
</code></pre>
<p>
Binary constants have a series of 1 and 0 digits, with a "b" or "B" suffix to indicate that the value is binary.</p>
<p>
Floating point constants can be used to represent scientific notation as well as fractions:</p>
<pre><code>3.14
-3.14
-1.2778E+02
</code></pre>
<p>
The following class and instance declarations illustrate how to use each of the numeric data types to set properties:</p>
<pre><code>class NumericDataClass
{
    uint8            Duint8;
    SInt8            Dchar;
    UInt16               Dtword;
    Sint16               Dinst16;
    UInt32               DDword;
    Sint32               Dinst1;
    Sint32               Dinst2;
    Sint32               Dinst3;
    Sint32               Dinst4;
    Sint32               Dinst5;
    Real32           Dfloat;
    Real64               Ddouble1;
    Real64               Ddouble2;
}

instance of NumericDataClass
{
    Duint8   =  122;
    Dchar    = -128;
    Dtword   =  30;
    Dinst16  = -1445;
    Ddword   =  6987777;
    Dinst1   = -455589;
    Dinst2   =  23;
    Dinst3   =  03;                // base 8
    Dinst4   =  0xFe;                // base 16
    Dinst5   =  11b;                // base 2
    Dfloat   =  3.1478;
    Ddouble1 =  99987.3654;
    Ddouble2 =  2.3e-2;
}</code></pre>
<p>&nbsp;</p></body>
</HTML>

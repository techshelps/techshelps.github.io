<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Setting Up the DMI Provider</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_hmm_setting_up_the_dmi_provider"></a>Setting Up the DMI Provider</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To set up the DMI provider </h5>
<ol>
<li>
Create a MOF file.</li>
<li>
Create the \DmiNodes namespace. To create a namespace, create an instance of the <b>__NAMESPACE</b> class. The \DmiNodes namespace must reside in the \Root namespace:<pre><code>#pragma namespace("\\\\.\\root") 
instance of __Namespace 
{
Name = "DmiNodes";
};
</code></pre>
</li>
<li>
Create a namespace for each managed node under DmiNodes. Each namespace representing a DMI node must include a class and an instance that describes the node, as well as instances of the required provider registration class.<pre><code>#pragma namespace("\\\\.\\root\\DmiNodes")
instance of __NameSpace
{
Name = "ManagedNode1";    // Logical name given to a 
// remote node
};
</code></pre>
</li>
<li>
Create the class DmiNode. This class must have the qualifier singleton and the string property called "NetworkAddress":<pre><code>[singleton]
class DmiNode
{
string NetworkAddress;
};
</code></pre>
</li>
<li>
Create an instance of DmiNode. Set the NetworkAddress property to the network name or address of the managed node:<pre><code>instance of DmiNode
{
// Network address for ManagedNode1 or its machine name
NetworkAddress = "206.170.168.35"    
};
</code></pre>
</li>
<li>
Create an instance of <b>__Win32Provider</b> to register the DMI provider to handle class and instance operations for the node created above:<pre><code>#pragma namespace("\\\\.\\root\\DmiNodes\\ManagedNode1")
instance of __Win32Provider As $Provider
{
Name = "WbemDmip" ;    // Provider DLL name
ClsId = "{DE065A70-19B5-11D1-B30C-00609778D668}" ;
};
</code></pre>
</li>
<li>
Create an instance of <b>__InstanceProviderRegistration</b> to tell the Common Information Model Object Manager (CIMOM) that the provider supports instance operations:<pre><code>{
Provider = $Provider;
SupportsGet = TRUE;
SupportsPut = TRUE;
SupportsDelete = TRUE;
SupportsEnumeration = TRUE;
};
</code></pre>
</li>
<li>
Create an instance of __MethodProviderRegistration to tell CIMOM that the provider handles methods:<pre><code>instance of __MethodProviderRegistration
{
    Provider = $Provider;
};
</code></pre>
</li>
<li>
Create an instance of __ClassProviderRegistration to tell CIMOM that the provider supports class operations:<pre><code>instance of __ClassProviderRegistration
{
  Provider = $Provider;
  SupportsGet = TRUE;
  SupportsPut = FALSE;
  SupportsDelete = TRUE;
  SupportsEnumeration = TRUE;
  QuerySupportLevels = NULL ;
ResultSetQueries = { 
"Select * From meta_class Where __this isa \"DmiComponent\"" ,
"Select * From meta_class Where __this isa   \"DmiGroupRoot\"" ,
"Select * From meta_class Where __this isa \"DmiBindingRoot\"" ,
"Select * From meta_class Where __this isa \"DmiNodeData\"" ,
"Select * From meta_class Where __this isa \"DmiLanguage\"" ,
"Select * From meta_class Where __this isa \"DmiEvent\"" ,
"Select * From meta_class Where __this isa \"DmiAddMethodParams\"" ,
"Select * From meta_class Where __this isa \"DmiGetEnumParams\"" ,
"Select * From meta_class Where __this isa \"DmiLanguageMethodsParams\"" 
} ;
} ;
};
</code></pre>
</li>
<li>
Create an instance of __Win32Provider to tell CIMOM that the provider supports events:<pre><code>instance of __Win32Provider as $EventProv
{
    Name = "WbemDmiEventp" ;
    ClsId =  "{B21FBFA0-1B39-11d1-B317-00609778D668}";
};
</code></pre>
</li>
<li>
Create an instance of <b>__EventProviderRegistration</b> to tell CIMOM the types of events that the provider can handle: <pre><code>Instance of __EventProviderRegistration
{
 Provider = "WbemDmiEventp";
 EventQueryList = {
  "select * from DmiEvent",
"select * from __InstanceCreationEvent where TargetInstance is a \"DmiComponent\"",
"select * from __InstanceDeletionEvent where TargetInstance is a \"DmiComponent\"",
"select * from __InstanceCreationEvent where TargetInstance is a \"DmiLanguage\"",
"select * from __InstanceDeletionEvent where TargetInstance is a \"DmiLanguage\""
"select * from __ClassCreationEvent where TargetInstance is a \"DmiGroupRoot\""
"select * from __ClassDeletionEvent where TargetInstance is a \"DmiGroupRoot\""

 };
};
</code></pre>
<p>
Alternately, you can use the WBEM Developer Studio to create namespaces and the required class and instance definitions. For instructions, see the WBEM SDK Applications Guide for instructions. See the sample MOF file WBEMDMIP.MOF included with the WBEM SDK.
</li>
<li>
After you create a MOF for a managed node, you must submit the file to WBEM's MOF compiler.<pre><code>mofcomp  &lt;MOF-file&gt;
</code></pre>
</li>
</ol>
<p>&nbsp;</p></body>
</HTML>

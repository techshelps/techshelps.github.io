<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Working with Output Parameters</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_hmm_working_with_output_parameters"></a>Working with Output Parameters</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
Web-Based Enterprise Management (WBEM) observes the standard Component Object Model (COM) rules for passing input and output parameters. Observing the rules for output parameters is especially important because failing to observe them can result in memory leaks and unpredictable behavior. </p>
<p>
If a method returns an interface pointer to its caller in an output parameter, it is the caller's responsibility to release the pointer when it is no longer needed. This is done by using the pointer to call <b>Release</b>. Because the Release method is part of the <b>IUnknown</b> interface, it is inherited by every WBEM interface. </p>
<p>
For example, if an application calls the <a href="hmmref_08c4.htm"><b>IWbemClassObject::GetPropertyQualifierSet</b></a> method, a pointer to the <b>IWbemQualifierSet</b> interface is passed in the contents of the <i>ppQualSet</i> output parameter. The pointer can be released by calling <b>IWbemQualifierSet::Release</b> as is shown in the following sample:</p>
<pre><code>IWbemQualifierSet* pSet;pObject-&gt;GetPropertyQualifierSet(strPropName, &amp;pSet);if(pSet != NULL){  // call IUnknown::Release  pSet-&gt;Release();  // don't use pSet anymore!}
 </code></pre>
<p>
Because methods that return an interface pointer always set it to NULL whenever an error occurs, a <b>Release</b> call is necessary only if the method has been successful. </p>
<p>
If a method has either a binary string (BSTR) or VARIANT output parameter, the incoming value of the parameter is ignored and overwritten by the method. With string parameters, either a new string is allocated or the contents of the original string is set to NULL. A memory leak results if the parameter has an initial value. It is the caller's responsibility to ensure that the output parameter does not contain data that requires deallocation. One option for string parameters is to always call <b>SysFreeString</b>; <b>SysFreeString</b> can be called regardless of the parameter's contents. </p>
<p>
Always call <b>VariantInit</b> to initialize a VARIANT parameter. When finished using VARIANT data that is returned by a method, call <b>VariantClear</b>.</p>
<p>&nbsp;</p></body>
</HTML>

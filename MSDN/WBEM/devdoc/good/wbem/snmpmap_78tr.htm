<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Mapping the SNMPv1 and SNMPv2C OBJECT-TYPE Macro</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_hmm_mapping_the_snmpv1_and_snmpv2c_object_type_macro"></a>Mapping the SNMPv1 and SNMPv2C OBJECT-TYPE Macro</h2>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The SNMPv1- and SNMPv2C-defined ASN.1 macro <b>OBJECT-TYPE</b> describes the characteristics of a manageable unit of data. A set of <b>OBJECT-TYPE</b> macros can be thought of as a collection of objects that share some relationship. In SNMPv2C, you can formally specify the constituent elements of a group using the <b>OBJECT-GROUP</b> macro; however, there is no formal mechanism to do this in SNMPv1. For the purposes of the SNMP providers, you can invent a collection relationship and fabricate collections. This can be done for both SNMPv1 and SNMPv2C MIB definitions; that is, the SNMPv2C <b>OBJECT-GROUP</b> macro is ignored.</p>
<p>
You can fabricate collections for each SNMPv1 and SNMPv2C information module. The following notation is needed to define precisely how such collections are constructed:
<ul>
<li>
A <i>named node</i> in an SNMP information module is a definition of the form:<pre><code>namedNode OBJECT IDENTIFIER ::= &lt;<i>object identifier value</i>&gt;
 </code></pre>
</li>
<li>
The function <b>objId</b>, applied to a named node, returns the object identifier assigned to that named node.</li>
<li>
The function <b>objId</b>, applied to an instance of the <b>OBJECT-TYPE</b> macro, returns the object identifier value assigned to that instance.</li>
</ul>
<p>
Using the preceding notation, the manner in which fabricated <b>OBJECT-GROUP</b> instances are defined in an SNMPv1 and SNMPv2C information module can be stated as follows:</p>
<p>
Let n be a named node in an SNMP information module M, and CS(M,n) the set of <b>OBJECT-TYPE</b> instances in M defined by:</p>
<pre><code>CS(M,n) = { s | s is a scalar and objId(s) = objId(n).x, for some integer x} 
 </code></pre>
<p>
Then if CS(M,n) is not empty, it defines a scalar collection for the SNMPv1 or SNMPv2C information module M.</p>
<p>
Let n be a named node in an SNMP information module M, and CT(M,n) the set of <b>OBJECT-TYPE</b> instances in M defined by:</p>
<pre><code>CT(M,n) = { c | c is a column of table n and objId(c) = objId(n).x.y, for some integers x, y}
 </code></pre>
<p>
Then if CT(M,n)<sub> </sub>is not empty, it defines a table collection for the SNMPv1 or SNMPv2C information module M.</p>
<p>
This definition provides a basis for the following mapping process:
<ol>
<li>
All objects present within a table collection map to properties of a single CIM class definition. The object descriptor for a table collection is defined as the object descriptor of n for CT(M,n).</li>
<li>
All objects present within a scalar collection map to properties of a single CIM class definition. The object descriptor for a scalar collection is defined as the object descriptor of n for CS(M,n).</li>
</ol>
<p>&nbsp;</p></body>
</HTML>

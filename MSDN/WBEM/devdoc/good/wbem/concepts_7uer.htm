<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Class and Instances</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_hmm_class_and_instances"></a>Class and Instances</h2>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
A Web-Based Enterprise Management (WBEM) class defines a template for describing a type of managed object. An instance of a WBEM class represents a specific managed object of the type described by the class. Where the class generally models the real-world device or component in the general sense, each instance represents a specific occurrence of the device or component. For example, while there might be a general class called <b>FloppyDisk</b>, the instances on a particular host machine might represent drives "A" and "B". </p>
<p>
Some WBEM classes permit the creation of instances; others do not. Abstract base classes are used solely as templates for derived classes. The <a href="hmmclass_02no.htm"><b>__Event</b></a> system class, for example, is an abstract class. Real world events are modelled using classes that are derived from the <b>__Event</b> class. Instances are created from the <b>__Event</b> subclasses. Another type of class supports only a single instance; such classes are known as <a href="concepts_5gvn.htm">singleton classes</a>.</p>
<p>
All instances of a class exist within the namespace to which the class belongs. Within a namespace,instances can be either static or dynamic. Static instances are persistently stored and remain valid until explicitly deleted, even across system reboots. Static instances are manually placed in the CIMOM repository using <a href="hmmref_0sh1.htm"><b>IWbemServices::PutInstance</b></a> or <a href="hmmref_7q03.htm"><b>IWbemServices::PutInstanceAsync</b></a> or through a MOF definition submitted to the MOF compiler.</p>
<p>
Dynamic instances are supplied by a provider when the need arises and are not stored in the CIMOM repository. Requests for dynamic instances are forwarded through CIMOM to the provider for the class. Supporting instances of a class dynamically allows a provider to always supply up-to-the-minute property values. </p>
<p>
Static classes can support either static or dynamic instances. Within a static instance, either static or dynamic properties can exist. A static class that supports only static instances containing static properties is always available through CIMOM. Provider involvement is unnecessary. </p>
<p>
Static classes with dynamic instances store only the class definition in the CIMOM repository. When instances are requested, a provider must retrieve the class definition and build the required instance or set of instances on demand. </p>
<p>
Static classes with static instances containing both static and dynamic properties store placeholders for the dynamic properties in the CIMOM repository. When a request is made for an instance, a provider must be summoned to supply the actual data for each dynamic property. </p>
<p>
Dynamic classes support only dynamic instances. With a dynamic class, neither the class definition nor the instances are stored in the CIMOM repository. The provider responsible for a dynamic class stores information about its location. When an application requests a dynamic class, CIMOM locates the provider and forwards the request.</p>
<p>&nbsp;</p></body>
</HTML>

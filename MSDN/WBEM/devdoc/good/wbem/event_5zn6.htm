<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Implementing an Event Provider</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_hmm_implementing_an_event_provider"></a>Implementing an Event Provider</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
An event provider is implemented as a COM object that exposes a class identifier (CLSID) and supports one required interface: <a href="hmmref_5auq.htm"><b>IWbemEventProvider</b></a>. <b>IWbemEventProvider</b> has one method that it adds to the three <b>IUnknown</b> methods: <b>ProvideForNamespace</b>. </p>
<p>
CIMOM calls an event provider's <b>ProvideForNamespace </b>method soon after it loads the provider. In the call, CIMOM passes a pointer to the sink, the target location for the event. Event providers must increment the reference count on the sink by calling its <b>IWbemObjectSink::AddRef</b> method, the standard COM method for incrementing a reference count. There are no special requirements that CIMOM introduces above and beyond the COM standard. </p>
<p>
CIMOM also supplies an <b>IWbemServices</b> pointer to an event provider in the <b>ProvideForNamespace</b> call. Event providers can use this pointer to request services such as the creation or deletion of instances. Event providers should increment the reference count on the services object using the standard COM technique by calling <b>IWbemServices::AddRef</b> and return immediately. A separate thread must be spawned for sending events. </p>
<p>
To access and load an event provider, CIMOM creates a separate provider object using the COM function <b>CoCreateInstance</b>. This call is made for each namespace that CIMOM requires the event provider to function in. When CIMOM no longer requires the provider, it calls <a href="hmmref_2isl.htm"><b>IWbemEventProvider::Release</b></a>.</p>
<p>
A second interface, <b>IWbemEventProviderQuerySink</b>, can also be implemented by an event provider as an option. <b>IWbemEventProviderQuerySink</b> is most useful for providers that generate multiple types of notifications because it allows them to produce notifications based on specific consumer requests. <b>IWbemEventProviderQuerySink </b>helps to avoid sending useless event notifications. </p>
<p>
<b>IWbemEventProviderQuerySink </b>includes two methods in addition to those inherited from <b>IUnknown</b>: <b>NewQuery</b> and <b>CancelQuery</b>. Whenever CIMOM receives a new or modified query on behalf of a consumer, CIMOM calls the <b>NewQuery</b> method to echo the query to the provider. The provider can examine the query to see what event notifications are actually being requested. For example, a provider supporting ten classes of events does not want to generate notifications for all classes unless absolutely necessary. <b>IWbemEventProviderQuerySink </b>allows a provider to examine incoming queries and generate only notifications that will be delivered to a registered consumer. Whenever a consumer registration is cancelled, CIMOM calls <b>CancelQuery</b> to report the cancellation to the provider. 
<dl>
<dt>
For more information about creating and evaluating queries, see <a href="query_2fmt.htm">WBEM Query Language</a>. </dt>
</dl>
<p>
Whereas <b>IWbemEventProvider</b> is called only once after an event  provider becomes active, <b>IWbemEventProviderQuerySink </b>is called continuously as appropriate. The provider can ignore all calls at its own discretion. This is very important; supporting <b>IWbemEventProviderQuerySink</b> indicates that a provider has agreed to supply at least the events that are requested by the queries. A provider can generate more events than are requested and CIMOM will post-filter the events as appropriate. This gives providers the freedom to implement <b>IWbemEventProviderQuerySink</b> and optimize their processing without a complete understanding of the query language. For instance, if a provider cannot understand a particular query, it can generate all possible events.</p>
<p>
Whereas <b>IWbemEventProvider</b> is called only once after an event provider becomes active, <b>IWbemEventProviderQuerySink </b>is called continuously as appropriate. The provider can ignore all calls at its own discretion. </p>
<p>
Because not all event providers support <b>IWbemEventProviderQuerySink</b>, CIMOM calls a provider's <b>IWbemEventProvider::QueryInterface</b> method at load time to determine if support exists. </p>
<p>
Event providers that want to supply many notifications rapidly for the same class of event should reuse the same event object. CIMOM never holds onto the event object past the completion of the <b>IWbemObjectSink::Indicate </b>call. </p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

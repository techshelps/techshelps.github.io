<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Permanent Consumer Architecture</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_hmm_permanent_consumer_architecture"></a>Permanent Consumer Architecture</h2>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The permanent consumer architecture consists of the following components:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=29%>Component</th>
<th align=left width=71%>Description</th>
</tr>
<tr valign=top>
<td width=29%><a href="event_2kky.htm">Logical consumer</a></td>
<td width=71%>Instance of a class derived from the <a href="hmmclass_3ygi.htm"><b>__EventConsumer</b></a><b> </b>system class. The properties of the class describe the action to be taken upon receipt of a notification.</td>
</tr>
<tr valign=top>
<td width=29%><a href="event_5cmq.htm">Event filter</a></td>
<td width=71%>Instance of the <a href="hmmclass_1fzm.htm"><b>__EventFilter</b></a> system class that describes an event type and the conditions under which a notification is delivered. </td>
</tr>
<tr valign=top>
<td width=29%><a href="event_9vsi.htm">Consumer - filter binding</a></td>
<td width=71%>Instance of the <a href="hmmclass_6msn.htm"><b>__FilterToConsumerBinding</b></a> system class that describes a relationship between a logical consumer and an event filter. </td>
</tr>
<tr valign=top>
<td width=29%><a href="event_8hte.htm">Physical consumer</a> (sink)</td>
<td width=71%>COM object implementing the <b>IWbemUnboundObjectSink</b> interface. Known as the sink, it identifies a physical destination for a particular notification.</td>
</tr>
<tr valign=top>
<td width=29%><a href="event_8hte.htm">Event consumer provider</a></td>
<td width=71%>WBEM provider that implements the <b>IWbemEventConsumerProvider</b> interface and provides access to a sink associated with a logical consumer. </td>
</tr>
</table><br>
<p>
A developer and an administrator typically share the responsibility for creating the logical consumer class and the various instances and for implementing the COM objects. The developer creates the logical consumer class and implements the two COM objects: the event consumer provider and the physical consumer. The administrator creates the logical consumer, event filter, and binding instances.</p>
<p>
The following diagram shows how these components interact with CIMOM and the order in which the interaction occurs. First, CIMOM receives a notification to deliver. CIMOM examines the notification to determine if it matches any of the registered event filters. Next, to notify logical consumers, CIMOM examines the bindings for any of the filters that match.</p>
<p>
For each logical consumer that is bound to a matching filter, CIMOM must then locate a corresponding event consumer provider. The event consumer provider bridges the gap between a logical consumer referenced in a binding and the physical sink that is dedicated to receive the notification. To locate and start the event consumer provider for a particular logical consumer, CIMOM uses the information registered by the provider. Once started, CIMOM calls the event consumer provider's <a href="hmmref_767m.htm"><b>IWbemEventConsumerProvider::FindConsumer</b></a> method. </p>
<p>
<b>FindConsumer</b> creates an instance of the physical consumer, which is also known as the sink. The physical consumer is the other COM object in the permanent consumer architecture. A physical consumer does not expose a CLSID; it implements only the <b>IWbemUnboundObjectSink</b> interface to provide the processing necessary to handle the event. CIMOM calls <a href="hmmref_2caa.htm"><b>IWbemUnboundObjectSink::IndicateToConsumer</b></a>, and includes a pointer to the logical consumer in its parameter list. </p>
<p>
CIMOM releases its pointer to the event consumer provider after a configurable amount of time has passed. To configure this time value:
<ol>
<li>
Locate the singleton instance of the <b>__EventConsumerProviderCacheControl</b> class in the Root namespace.</li>
<li>
Set its single property to a time value that conforms to the DMTF time format. The new time value will take effect immediately.</li>
</ol>
<p>
<img src="event.gif" border=0></p>
<p>&nbsp;</p></body>
</HTML>

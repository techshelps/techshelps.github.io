<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Standard Qualifier Reference</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_hmm_standard_qualifier_reference"></a>Standard Qualifier Reference</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
Qualifiers are used to characterize classes, instances, the properties or methods of classes and instances, and the parameters of methods. Qualifiers are optional and can be defined using the Managed Object Format (MOF) language or the <a href="hmmref_827o.htm"><b>Put</b></a> method of the <a href="hmmref_8qpg.htm"><b>IWbemQualifierSet</b></a> interface. Other methods of <b>IWbemQualifierSet</b> can be used to retrieve or delete existing qualifiers.</p>
<p>
In MOF syntax, qualifiers are placed before the keyword or element that they are describing as is shown in the following class declaration:</p>
<pre><code>[qualifiers...]
class StdDisk
{
  [qualifiers...]  uint32 dwNumCylinders;
  [qualifiers...]  uint32 dwNumHeads;
  [qualifiers...]  sint32 Method1();
  SINT32 Method2([qualifiers...] Parameter1);
};
 </code></pre>
<p>
All qualifier names are case-insensitive. The type of the qualifier is inferred from the declaration syntax. Some qualifiers have values; others do not. Those that do not have the implied value of TRUE. Absence of a qualifier is synonymous to a FALSE value. </p>
<p>
There are standard qualifiers, defined by CIMOM, and user-defined qualifiers. The following list describes each of the standard qualifiers. The name of the qualifier is followed by its data type and an indicator of whether the qualifier can be attached to a class, an instance, a property, or a method.
<dl>
<dt>
<b>Abstract</b> (VT_BOOL, class)</dt>
<dd>
Indicates that the class cannot be instantiated. The absence of this qualifier indicates that the class is not abstract.</dd>
<dt>
<b>Association</b> (VT_BOOL, class)</dt>
<dd>
Indicates that the class is an association class used to describe a relationship between two other classes. The absence of this qualifier indicates that the class is not an association class.</dd>
<dt>
<b>Cimtype</b> (VT_BSTR, property)</dt>
<dd>
Indicates the actual type of a property on a class and is added automatically. Because CIMOM allows more types than can be expressed by standard VT constants, the <b>Cimtype</b> qualifier can help interpret the values. The <b>Cimtype</b> qualifier is added automatically. For more information, see <a href="mof_1u0j.htm">MOF Data Types</a>.</dd>
<dt>
<b>ClassContext</b> (VT_BSTR, class)</dt>
<dd>
Indicates that the class has instances that are associated with additional information dynamically supplied by a provider. </dd>
<dt>
<b>Dynamic</b> (VT_BOOL, class or property)</dt>
<dd>
Indicates that instances of the class are dynamically provided. 
<p>
Must be specified on all classes whose instances are provided dynamically. Only the value TRUE is allowed. When this qualifier is specified on a class declaration, the <b>Provider</b> qualifier must also be specified.

<p>
Must be specified on properties of instances that contain values provided by dynamic property providers. Only the value TRUE is allowed. When this qualifier is specified on a property of an instance, the <b>PropertyContext</b> qualifier must also be specified.
</dd>
<dt>
<b>DynProps</b> (VT_BOOL, instance)</dt>
<dd>
Must be specified on instances that contain values provided by dynamic property providers. Only the value TRUE is allowed.</dd>
<dt>
<b>Implemented</b> (VT_BOOL, method)</dt>
<dd>
Indicates that a method has an implementation supplied by a provider. </dd>
<dt>
<b>In</b> (VT_BOOL, method parameter)</dt>
<dd>
Indicates that a parameter is an input parameter.</dd>
<dt>
<b>In, out</b> (VT_BOOL, method parameter)</dt>
<dd>
Indicates that a parameter is both an input and an output parameter.</dd>
<dt>
<b>Indexed</b> (VT_BOOL, property)</dt>
<dd>
Can be specified on properties of classes to request that those properties be indexed. Only the value TRUE is allowed.</dd>
<dt>
<b>InstanceContext</b> (VT_BSTR, instance)</dt>
<dd>
Can be specified on instances that contain values provided by dynamic property providers. The value is passed to the property provider as an argument to <a href="hmmref_3md5.htm"><b>IWbemPropertyProvider::GetProperty</b></a>.</dd>
<dt>
<b>Key</b> (VT_BOOL, property)</dt>
<dd>
Can be specified on properties of classes to mark those properties as keys. Only the value TRUE is allowed. A number of rules exist that determine which properties may be keys. For more information, see <a href="concepts_9m43.htm">Key Properties</a>. </dd>
<dt>
<b>Lexicon </b>(VT_BSTR, class, instance, or property)</dt>
<dd>
Specifies the globally unique identifier (GUID) of the instance of the <b>__Lexicon</b> system class to be used for localization.</dd>
<dt>
<b>Locale </b>(VT_BSTR, class or instance)</dt>
<dd>
Specifies the language of origin for the class or instance.</dd>
<dt>
<b>Max</b> (VT_I4, property)</dt>
<dd>
<b> Ignored - is used as a hint - people can put more elements in the array than max specifies. </b></dd>
<dt>
<b>Not_Null</b> (VT_BOOL, property)</dt>
<dd>
Can be specified on properties of classes to indicate that those properties cannot take on a value of NULL (VT_NULL). Only the value TRUE is allowed. If specified, CIMOM does not allow creation of instances with the property set to NULL (returning WBEM_E_ILLEGAL_NULL error code). Note that key and indexed qualifiers already imply this behavior.</dd>
<dt>
<b>Out</b> (VT_BOOL, method parameter)</dt>
<dd>
Indicates that a parameter is an output parameter.</dd>
<dt>
<b>Optional</b> (VT_BOOL, method parameter)</dt>
<dd>
Indicates that a parameter is not required and has a well-behaved default value.</dd>
<dt>
<b>PropertyContext</b> (VT_BSTR, property)</dt>
<dd>
Must be specified on properties of instances that contain values provided by dynamic property providers. The value will be passed to the property provider as an argument to <a href="hmmref_3md5.htm"><b>IWbemPropertyProvider::GetProperty</b></a>.</dd>
<dt>
<b>Provider</b> (VT_BSTR, class)</dt>
<dd>
Must be specified on all classes whose instances are provided dynamically. The value of this qualifier is the name of the dynamic provider that provides the instances for this class. This name must be registered with CIMOM by creating an instance of the <a href="hmmclass_3dte.htm"><b>__Win32Provider</b></a> class with the <b>Provider</b> property containing this name. When this qualifier is specified on a class declaration, the Dynamic qualifier must also be specified.</dd>
<dt>
<b>Singleton</b> (VT_BOOL, class)</dt>
<dd>
Designates a class that can only have one instance and does not contain key properties. Only the value TRUE is allowed. </dd>
<dt>
<b>Static</b> (VT_BOOL, class)</dt>
<dd>
Indicates that a method may be invoked against the class definition and is not bound to any instances of the class. 
</dd>
</dl>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

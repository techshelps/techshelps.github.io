<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MOF String Data Types</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_hmm_mof_string_data_types"></a>MOF String Data Types</h2>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The MOF language supports the following string data types:</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=30%>Data type</th>
<th align=left width=28%>Automation type</th>
<th align=left width=42%>Description</th>
</tr>
<tr valign=top>
<td width=30%>Char16</td>
<td width=28%>VT_I2</td>
<td width=42%>Single 16-bit UCS-2 Unicode character</td>
</tr>
<tr valign=top>
<td width=30%>Datetime</td>
<td width=28%>VT_BSTR</td>
<td width=42%>String containing a date and time in DMTF format</td>
</tr>
<tr valign=top>
<td width=30%>String</td>
<td width=28%>VT_BSTR</td>
<td width=42%>Unicode character string</td>
</tr>
</table><br>
<p>
Single character constants are surrounded by single quotes or else the integer representation of the UNICODE character value can be used directly:</p>
<pre><code>char16  TestChar1 = '\x41';
char16  Testchar2 = 'A';
char16  TestChar3 = 65;    
char16  TestChar4 = 0x1000;
</code></pre>
<p>
Note that characters can be specified literally or with the <b>\x</b> escape sequence as in ANSI-C. Since the characters are Unicode, 16-bit values can also be specified.</p>
<p>
Character strings are surrounded by double quotes. Note that ANSI-C single character constants are surrounded by double quotes.</p>
<p>
Successive quoted strings are concatenated with one or more white spaces placed between them as delimiters. The following example illustrates how to represent a long character string using two character strings:</p>
<pre><code>"This" "becomes a long string"
 </code></pre>
<p>
Embedded quotes require the use of an escape sequence beginning with the backslash:</p>
<pre><code>"This is \"embedded quote example\" "
</code></pre>
<p>
Because character and short integer values are identical, character constants can be assigned integer values if the values are within the 16-bit range of an unsigned Unicode character. The following class and instance declarations show how to initialize several string properties and a string parameter. </p>
<pre><code>class  StringDataClass
{
    [KEY]  String    Dstring;
    DateTime         DTime;
    sint16           CharVal1;
    sint16           CharVal2
    sint32 DiskMethod ([in] string Description = "Disk Number 1");
};

instance of StringDataClass
{
    Dstring = "this can go on for " " some time"
       " before we are done";
    DTime    = "19940107140332.000000-300";
    CharVal1 = '\n';
    CharVal2 = '\x32';
};
</code></pre>
<p>&nbsp;</p></body>
</HTML>

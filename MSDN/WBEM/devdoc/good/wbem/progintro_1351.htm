<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the IUnknown Interface</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_hmm_using_the_iunknown_interface"></a>Using the IUnknown Interface</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The <b>IUnknown</b> interface is the base interface for all Component Object Model (COM) interfaces exposed by COM objects. The COM objects implemented by CIMOM, WBEM providers, and event consumers expose one or more interfaces specified in the CIMOM API. For example, WBEM class providers implement a COM object that includes the <b>IWbemProviderInit</b> and <b>IWbemServices</b> interfaces.</p>
<p>
<b>IUnknown</b> manages the lifespan of the COM object and handles client requests for access. To manage the COM object's lifespan, <b>IUnknown</b> maintains what is known as a reference count. The reference count is a tally of the number of active clients of a particular interface. Only when all of the reference counts for all of the interfaces exposed by a COM object reach zero can the object be deleted and its memory safely freed.The methods that support lifespan management are:</p>
<p>
<font face="Symbol">·</font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="hmmref_7412.htm"><b>AddRef</b></a></p>
<p>
<font face="Symbol">·</font>&nbsp;&nbsp;&nbsp;&nbsp;<a href="hmmref_9h9h.htm"><b>Release</b></a></p>
<p>
The third method of <b>IUnknown</b>, <a href="hmmref_259h.htm"><b>QueryInterface</b></a>, is used to handle client access to the COM object. Clients gain access to a COM object by retrieving a pointer to one of the interfaces implemented by the object. To gain access to a particular interface, a client calls <b>QueryInterface</b> and sets the <i>riid</i> parameter to the identifier of the desired interface.</p>
<p>
If this interface is not implemented by the COM object, <b>QueryInterface</b> returns the error value E_NOINTERFACE. If the interface is implemented by the object, <b>QueryInterface</b> calls <b>AddRef</b> to increment the reference count and returns a pointer to the interface in the <i>ppv</i> parameter. </p>
<p>
Whenever a caller receives an interface pointer as an output parameter to a method, the caller must call the interface's <b>AddRef</b> method before calling any of the other methods. Receiving an interface pointer through <b>QueryInterface</b> is an exception to this rule because <b>QueryInterface</b> automatically calls <b>AddRef</b> as part of its implementation. </p>
<p>
Whenever a user of an interface is finished with that interface, it must call <b>Release</b>. </p>
<p>
Because that <b>AddRef</b> and <b>Release</b> are not required to return accurate values, callers of these methods should not use the return values to determine whether or not the COM object is still valid. Due to the concurrent use of objects by multiple threads, the reference count can easily be altered while it is being examined.</p>
<p>&nbsp;</p></body>
</HTML>

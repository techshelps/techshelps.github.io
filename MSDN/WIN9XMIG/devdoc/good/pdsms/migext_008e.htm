<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>QueryVersion</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_zaw_queryversion"></a>QueryVersion</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
Setup uses <b>QueryVersion</b> to determine if further processing of the DLL is necessary. </p>
<pre><code><b>LONG
CALLBACK 
QueryVersion(</b>
    <b>OUT LPCSTR</b> *<i>ProductID</i><b>,</b>
    <b>OUT LPUINT</b> <i>DllVersion<b>,
</b></i><b>    OUT LPINT</b> *<i>CodePageArray<b>,    </b></i>OPTIONAL
    <b>OUT LPCSTR</b> *<i>ExeNamesBuf</i><b>,</b>    OPTIONAL<b><i>
</i></b>    <b>LPVOID</b> <i>Reserved</i>
    <b>)</b>;</code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>*ProductID </i></dt>
<dd>
Points to a string that identifies the DLL and its target application. To ensure uniqueness, the string must contain the name of the manufacturer, the product name, and the version number of the application the DLL will migrate. The length of the string must not exceed MAX_PATH bytes (as defined within your migration DLL). Setup ignores excess characters. The <i>ProductID</i> string is also used for error messages generated during DLL processing.

<p>
<b>Note</b>  Your migration DLL is responsible for allocating and freeing the <i>ProductID</i> string buffer.

</dd>
<dt>
<i>DllVersion </i></dt>
<dd>
Points to a non-zero unsigned integer that specifies the version number of your migration DLL. Setup looks for duplications by comparing <i>ProductID</i> strings from other migration DLLs. If two or more DLLs have identical <i>ProductID</i> strings, Setup uses the DLL with the highest <i>DllVersion</i> number and ignores the other duplicates. 

<p>
<b>Note</b>  <i>DllVersion </i>is not intended to be the DLL binary version number.

</dd>
<dt>
<i>CodePageArray </i></dt>
<dd>
Points to an array of integers containing all the code pages supported by the migration DLL. The last element of the array must be -1. If your migration DLL does not support the system code page, Setup skips your migration DLL and your application will not migrate to the new operating system. 
<p>
If this pointer is NULL, Setup processes all the required functions in the DLL regardless of the installed Windows 95 and Windows 98 code pages. Set this pointer to NULL if the DLL has no language dependencies.


<p>
<b>Note</b>  Your DLL is responsible for the allocating and freeing memory used by this array.
</dd>
<dt>
<i>ExeNamesBuf </i></dt>
<dd>
Points to a multi-sz string buffer containing a list of file names (not paths) that your migration DLL wants Setup to locate. Setup locates all instances of the listed files and returns the list of full file paths to your migration DLL via the MIGRATE.INF file. Paths to files located on network, substituted, or compressed drives will not be returned to the DLL because Setup does not search those drives. Other directories on the computer not related to the active Windows 95 or Windows 98 installation may also be excluded.
<p>
Set this parameter to NULL if you do not want Setup to search for any particular files. 


<p>
<b>Note</b>  Your migration DLL is responsible for allocating and freeing the <i>ExeNamesBuf </i>string buffer.

</dd>
<dt>
<i>Reserved </i></dt>
<dd>
Reserved for future use. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
ERROR_SUCCESS if your migration DLL found one or more installed components for its target application. This guarantees that Setup will call your migration DLL for later processing.</p>
<p>
ERROR_NOT_INSTALLED if your migration DLL initializes properly but did not find any of its components installed on the active Windows 95 or Windows 98 installation. Note that Setup will not call your DLL again if it returns ERROR_NOT_INSTALLED.</p>
<p>
Your migration DLL must also return ERROR_SUCCESS if it does not attempt to detect installed components in <b>QueryVersion</b>. </p>
<p>
All other return values (Win32 error values) are considered initialization errors. Setup will report the error to the user, clean up your migration DLL files, and ask the user to continue or cancel the Windows NT installation process.</p>
<p>
An exception generated by a migration DLL causes Setup to report RPC error messages. Setup will provide more information in SETUPERR.LOG.</p>
<h4>Remarks</h4>
<p>
Setup uses <b>QueryVersion</b> to determine if further processing of the DLL is necessary. During this call, your migration DLL (located on a floppy, compact disc, or network share) must provide Setup with the <i>ProductID</i>, <i>DllVersion</i>, <i>CodePageArray,</i> and <i>ExeNamesBuf</i> information. At this point, your migration DLL cannot make any changes to the system. </p>
<p>
Your migration DLL should try to determine if the target application is installed on the computer, and then return the appropriate result from <b>QueryVersion</b>. The system unloads the migration DLL after <b>QueryVersion</b> returns. Setup copies it to the local hard disk and calls <b>Initialize9x</b> only if <b>QueryVersion</b> returns ERROR_SUCCESS.</p>
<p>
During the call to <b>QueryVersion</b>, Setup finds all occurrences of files listed in the <i>ExeNamesBuf </i>string (if not NULL) and writes their locations to the <b>[Migration Paths]</b> section of MIGRATE.INF<i>. </i>These paths are then available to the other functions in your migration DLL. </p>
<p>
Setup detects duplicate migration DLLs by comparing the <i>ProductID</i> strings of supplied DLLs. It only processes the DLL with the highest <i>DllVersion</i> number. The user is not notified of duplicates found.</p>
<p>
<b>Important</b>  <i>DllVersion</i> number zero (0) is reserved for Windows NT Setup-provided migration DLLs. DLLs not supplied by Microsoft Windows NT with the Windows NT 5.0 compact disc must not use this value. </p>
<p>&nbsp;</p></body>
</HTML>

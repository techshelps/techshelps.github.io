<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>[&lt;Message Object Section&gt;] Section</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_zaw__message_object_section_section"></a>[&lt;Message Object Section&gt;] Section</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
A message object section provides a mechanism for you to associate one or more message objects (such as file, directory, and registry location) with a message specified in the [Incompatible Messages] section. The [Handled] section describes how to specify a message object.</p>
<p>
The section name is defined by your migration DLL. Each line has the following syntax:</p>
<p>
<i>&lt;Message Object&gt; = &lt;Identifier Type&gt;</i>
<dl>
<dt>
<i>Message Object</i></dt>
<dd>
Specifies a Windows 95 or Windows 98 file, path, or registry entry. A file or path must be specified in long file name format.</dd>
<dt>
<i>Identifier Type</i></dt>
<dd>
Identifies the type of <i>&lt;Message Object&gt;.</i> It can only have one of the following three values:
<dl>
<dt>
<b>File</b></dt>
<dd>
The object specified refers to a long file name (including the full path to the file).</dd>
<dt>
<b>Directory</b></dt>
<dd>
The object specified refers to a directory (including the full path to the directory).</dd>
<dt>
<b>Registry</b></dt>
<dd>
The object specified refers to a registry key (including the full path to that key).

</dd>
</dl>
</dd>
</dl>
<ul>
<li>
Setup uses the value for <i>Message Object Section</i> to develop a hierarchy for incompatibility messages. The use of the section name enables your migration DLL to organize multiple incompatibility messages in the same format that Setup uses. Setup processes the section name in one of two ways:<ol>
<li>
If the name of the section matches <i>ProductID</i>, Setup displays the message at the root level of the incompatibility message tree. The <i>ProductID</i> itself is listed in a tree control, and when the user clicks on the root item, the incompatibility message is shown in an edit control.</li>
<li>
If the name of the section contains one or more backslashes, Setup separates the string at the backslashes to create the hierarchy. Setup limits the number levels in the tree to 10. Optimally, you should organize your messages into 3 levels.</li>
</ol>
<p>
Using the section name in this way achieves unique children for each migration DLL, organized under a single item at the root. Because ObjectSection is used for display purposes, your DLL must provide localized strings.
</li>
<li>
Setup treats all objects in a section as a set. If every object in the set is found in any [Handled] section (including ones provided by other vendors), no incompatibility message will be displayed for the particular object, even if the message is listed in [Incompatible Messages]. If only some or none of the objects are handled, the message will be displayed.</li>
</ul>
<p>&nbsp;</p></body>
</HTML>

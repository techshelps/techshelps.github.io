<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>About DDI Redirection</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_msaa_about_ddi_redirection"></a>About DDI Redirection</h3>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
Client applications can set a DDI hook by using the <b>SetDDIHook</b> function. This function accepts parameters that describe the hook class, the location of the hook procedure, and private data that will be sent to the hook procedure when a DDI function call occurs. All of an application's DDI hook procedures must be written in a 16-bit DLL. </p>
<p>
The hook class describes the type of application that owns the DDI hook procedure. Active Accessibility uses this class to determine the order in which it calls the registered hook procedures. Hook classes are defined in winddi.h and are called in the following descending order. This is because each step depends on what the DDI function's screen changes. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=41%>Class </th>
<th align=left width=59%>Description </th>
</tr>
<tr valign=top>
<td width=41%>DDIHOOK_RECORDER </td>
<td width=59%>Screen readers and screen capture utilities. </td>
</tr>
<tr valign=top>
<td width=41%>DDIHOOK_REMOTE </td>
<td width=59%>Remoting utilities. </td>
</tr>
<tr valign=top>
<td width=41%>DDIHOOK_FONTS </td>
<td width=59%>Font enhancers. </td>
</tr>
<tr valign=top>
<td width=41%>DDIHOOK_MAGNIFIER </td>
<td width=59%>Screen magnifiers. </td>
</tr>
</table><br>
<p>
If multiple hooks are registered for a given class, Active Accessibility still uses the preceding order, but sends event notifications within a class to the most recently registered hook procedures first. </p>
<p>
When Active Accessibility calls a DDI hook procedure, it receives parameters describing the DDI hook instance, the type of DDI function being called, and the address of a DDI stack structure. DDI stack structures, defined in winddi.h, are the parameters being passed to the specified DDI function as they exist on the stack. The hook procedure can examine these values, change them if necessary, and pass the event by calling the <b>CallNextDDI</b> function and using that return value as its own return. This function returns control to Active Accessibility, which sends event notifications to other registered hook procedures, finally calling the DDI function when all hook procedures have been notified and have passed the call. If a callback procedure changes a stack value, the new value will be reflected by any subsequent DDI hook procedures. If a hook procedure doesn't call <b>CallNextDDI</b>, the DDI function fails and never reaches the display device. </p>
<p>&nbsp;</p></body>
</HTML>

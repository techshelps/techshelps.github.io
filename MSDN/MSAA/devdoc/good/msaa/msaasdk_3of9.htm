<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IAccessible::accNavigate</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_msaa_iaccessible_accnavigate"></a>IAccessible::accNavigate</h3>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
Retrieves the next or previous sibling or child object in a specified direction. </p>
<pre><code><b>HRESULT accNavigate(
</b>  <b>long</b> <i>navDir</i><b>,</b>
  <b>VARIANT</b> <i>varStartFromChildOrSelf</i><b>,</b>
  <b>VARIANT</b> <i>*pvarEndUpAt</i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>navDir</i> </dt>
<dd>
[in] Value specifying the direction in which to move. This direction can be in spatial order (such as left or right) or navigational order (such as next or previous). This value is one of the <i>Navigation Constants</i>. </dd>
<dt>
<i>varStartFromChildOrSelf</i> </dt>
<dd>
[in] <b>VARIANT</b> structure that specifies the type of navigation desired. If the <b>vt</b> member is VT_EMPTY, the method retrieves a sibling object. If the <b>vt</b> member is VT_I4 and the <b>lVal</b> member is CHILDID_SELF, the method retrieves a child object. </dd>
<dt>
<i>pvarEndUpAt</i> </dt>
<dd>
[out, retval] Address of a <b>VARIANT</b> structure that will contain information about the destination object. If the <b>vt</b> member is VT_DISPATCH, then the <b>pdispVal</b> member is the address of the destination object's <b>IDispatch</b> interface. If the <b>vt</b> member is VT_I4, then the <b>lVal</b> member is the object ID. If <b>vt</b> is VT_EMPTY, then the call failed. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
Returns S_OK if successful or one of the following values or a standard COM error code otherwise. </p>
<table cellspacing=4 cols=1>
<tr valign=top>
<td width=100%><b>DISP_E_MEMBERNOTFOUND</b> </td>
</tr>
<tr valign=top>
<td width=100%><b>E_INVALIDARG</b> </td>
</tr>
<tr valign=top>
<td width=100%><b>S_FALSE</b> </td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
This method retrieves only objects that have a defined screen location. However, the object might be currently clipped or obscured by another object. This method does not change selection or focus. To change focus to or select an object, use the <b>IAccessible::accSelect</b> method. For more information see, <i>Object Navigation</i>. </p>
<p>
The NAVDIR_NEXT and NAVDIR_PREVIOUS values will not cause looping. The method will return S_FALSE, after the last or first object is found. </p>
<p>
<b>Note</b>  Implementers: If the current object does not have any knowledge of peer objects, it should ask its parent object to perform the navigation. If the current object does not have any knowledge of its parent, it should return S_FALSE. Client applications using accNavigate should be aware that the return value they get back may not have been provided by the object itself. For example, if a client asks Object A to navigate to the next object (Object B), Object A may ask its parent to do the navigation. In that case, the client must direct any future queries about Object B (i.e. accLocation) to the parent of Object A (by calling ObjectA.get_accParent) or to Object B itself (by calling ObjectA.get_accParent() and then ParentObject.get_accChild(ChildB). The client will be able to tell that this is necessary if: * The accNavigate call started with the varStart VARIANT set to type = VT_I4 and lVal = CHILDID_SELF (0). * The VARIANT filled in by the accNavigate call (pvarEndUpAt) also has type = VT_I4. </p>
<p>
Active Accessibility does not always support navigation to invisible children. Remember that it is OK for an object to support the <b>IAccessible::accNavigate</b> and <b>IAccessible::get_accChild</b> methods for children that are invisible, but that clients cannot expect this. In the section where the proxies are implemented, that menus, menu items, and menu popups allow navigation to invisible children, but that other objects that Active Accessibility proxies may not. You might not be able to navigate to all of an object's children, if they have the flag STATE_SYSTEM_INVISIBLE. </p>
<h4>See Also</h4>
<p>
VARIANT Structure, IDispatch Interface </p>
<p>&nbsp;</p></body>
</HTML>

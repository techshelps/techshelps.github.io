<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Simulating Input</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_msaa_simulating_input"></a>Simulating Input</h2>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
Applications can use Active Accessibility's <b>SendInput</b> function to simulate an uninterrupted series of user input events. <b>SendInput</b> provides the same functionality as the <b>mouse_event</b>, <b>keyboard_event</b>, and <b>hardware_event</b> Win32 functions. The <b>SendInput</b> function accepts three parameters. The first parameter, <i>cInputs</i>, indicates the number of input events that will be simulated. The second parameter, <i>rgInputs</i>, is the base address of an array of <b>INPUT</b> structures, each describing a type of input event and additional information about that event. The last parameter, <i>cbSize</i>, accepts the size of the <b>INPUT</b> structure, in bytes. </p>
<p>
<b>SendInput</b> works by injecting a series of simulated input events into a device's input stream. The effect is similar to calling the <b>keybd_event</b> or <b>mouse_event</b> Win32 functions repeatedly, except that the application ensures that no other input events intermingle with the simulated events. When the call completes, the return value indicates the number of input events successfully played to the system. If this value is zero, then input was blocked. </p>
<p>
The <b>SendInput</b> function does not reset the keyboard's current state. Therefore, if the user has any keys pressed when you call this function, they might interfere with the events that this function generates. If you are concerned about possible interference, check the keyboard's state with the <b>GetAsyncKeyState</b> Win32 function and correct as necessary. </p>
<p>&nbsp;</p></body>
</HTML>

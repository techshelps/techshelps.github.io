<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>About the WinEventProc Callback Function</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_msaa_about_the_wineventproc_callback_function"></a>About the WinEventProc Callback Function</h3>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The <b>WinEventProc</b> callback function is the starting point for most client activity. Active Accessibility calls this hook procedure in response to specific ranges of events that server applications generate. You specify which events a hook procedure is called for when you register it with the <b>SetWinEventHook</b> function. </p>
<p>
<b>WinEventProc</b> receives seven parameters. The first, <i>hWinEventHook</i>, is an identifier for the hook procedure, and is provided for reference—you won't usually do anything with it. The second parameter, <i>event</i>, is one of the <i>event constants</i> that describes the type of event that occurred. The next three parameters, <i>hwnd</i>, <i>idObject</i>, and <i>idChild</i>, combine to tell you about the window, object, and possible child element that generated the event. The following table provides additional explanation for these three parameters. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=31%>Parameter name </th>
<th align=left width=69%>Description </th>
</tr>
<tr valign=top>
<td width=31%><i>hwnd</i> </td>
<td width=69%>Handle to the window where the event originated. </td>
</tr>
<tr valign=top>
<td width=31%><i>idObject</i> </td>
<td width=69%>Object identifier of the object associated with the event. This is one of the <i>object constants</i>, and is set to <b>OBJID_WINDOW</b> if the window itself generated the event. </td>
</tr>
<tr valign=top>
<td width=31%><i>idChild</i> </td>
<td width=69%>Identifier of the child element that generated the event. This is CHILDID_SELF if no child element generated the event. </td>
</tr>
</table><br>
<p>
Generally, a client does little more with these three parameters than use them in an object retrieval call, such as the <b>AccessibleObjectFromEvent</b> function. For more information about identifiers, see <i>Object and Child Identifiers</i>. </p>
<p>
The remaining two parameters, <i>idEventThread</i> and <i>dwmsEventTime</i>, provide background information about the thread associated with the event and the time the event occurred. </p>
<p>
<b>In-context and Out-of-context Hook Procedures</b></p>
<p>
There are two types of hook procedures, in-context and out-of-context. These terms describe the <b>WinEventProc</b> callback function's memory location relative to the server's address space. An in-context hook procedure is located in a dynamic-link library (DLL) that Active Accessibility maps into the server's address space. Similarly, an out-of-context hook procedure is located in the client's address space, whether it's in the code body or in a DLL. </p>
<p>
In-context callbacks receive event notifications synchronously from the server, while out-of-context callbacks receive asynchronous event notifications. As a result, in-context callbacks tend to be very fast, since processing occurs in the server's address space, requiring no marshaling across process boundaries. NOTE: For greatest performance, use In-Context Event Notification and access object properties within the same address space of the object. When using in-context callbacks, client developers must ensure that the provided function doesn't use a lot of processor time, since the server must wait for the callback to return before it can continue. </p>
<p>
Since out-of-context callbacks aren't mapped into the server's address space, Active Accessibility marshals across process boundaries, making event notifications asynchronous and causing responses noticeably slower than in-context callbacks. Although the event notifications are asynchronous, Active Accessibility assures that the callback function receives all events in the order they were generated. </p>
<p>
<b>Multiple Hook Procedures</b></p>
<p>
You can register multiple hooks to respond to various ranges of events. Therefore, the callback function's label doesn't necessarily need to be "WinEventProc"—it can be anything you want, so long as its argument list and return value are identical to the function declaration for the <b>WinEventProc</b> function. </p>
<p>&nbsp;</p></body>
</HTML>

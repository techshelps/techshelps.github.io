<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Objects, Children, and Simple Elements</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_msaa_objects_children_and_simple_elements"></a>Objects, Children, and Simple Elements</h2>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
Throughout this documentation, you'll see the terms "object," "parent," "container," "child," "simple element," and "element" used to refer to various parts of a user interface (UI). These terms seem fairly generic, and you've probably seen them before, used in a number of different ways. In this document, these terms are used to explain whether part of an application's UI supports Active Accessibility, contains other pieces of the UI, and whether or not these smaller pieces also support Active Accessibility. To simplify, in the context of this document, these terms can be defined as follows: </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td colspan=2 width=100%><b>Object</b> </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>A user interface element that supports Active Accessibility technology. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><b>Parent</b> or <b>Container</b> </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>A user interface element that supports Active Accessibility technology and contains other objects and/or simple elements. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%><b>Simple element</b> or <b>Element</b> </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>A user interface element that does not support Active Accessibility. This might be because the object simply is "ignorant" of the technology, or that the element's parent assumes the responsibility of providing Active Accessibility features on its behalf. </td>
</tr>
</table><br>
<p>
For an example of using these terms, imagine a toolbar control that contains several buttons. The operating system supports toolbar controls and push buttons as accessible objects. In this case, the toolbar control is the parent object, or container, for the push buttons. The push buttons are also objects but have no children. </p>
<p>
In some cases, an object might have children that don't inherently support Active Accessibility—also known as simple elements. To remain "accessible," the parent can create accessible objects with the properties of the child when a client asks for it. This way, the parent saves memory by not keeping extra interfaces around, without sacrificing accessibility. List box items are an example of this. The children (cells) are accessible objects, but the aren't kept around. When the user picks the control, the objects are generated, and then displayed to the user. When the user is done, they are all destroyed. </p>
<p>&nbsp;</p></body>
</HTML>

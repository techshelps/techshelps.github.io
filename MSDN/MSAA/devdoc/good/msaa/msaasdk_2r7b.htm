<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>AccessibleObjectFromWindow</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_msaa_accessibleobjectfromwindow"></a>AccessibleObjectFromWindow</h3>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
Retrieves the address of a specified interface for a given object. </p>
<pre><code><b>STDAPI AccessibleObjectFromWindow(
</b>  <b>HWND</b> <i>hwnd</i><b>,</b>
  <b>DWORD</b> <i>dwId</i><b>,</b>
  <b>REFIID</b> <i>riid</i><b>,</b>
  <b>void</b> <i>**ppvObject</i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hwnd</i> </dt>
<dd>
Handle to the window whose object interface pointer will be retrieved, or NULL to retrieve information about the mouse pointer (cursor). </dd>
<dt>
<i>dwId</i> </dt>
<dd>
Object ID. This value can be one of the standard <i>object identifier constants</i> or a custom object ID. </dd>
<dt>
<i>riid</i> </dt>
<dd>
Reference identifier of the interface being requested. If the requested interface is not supported, the call will fail and the function will return E_NOINTERFACE. </dd>
<dt>
<i>ppvObject</i> </dt>
<dd>
Address of a variable that will contain the address of the specified interface if the call succeeds. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
Returns S_OK if successful or another standard COM error code otherwise. </p>
<h4>Remarks</h4>
<p>
Clients can call this function to retrieve addresses of an object's <b>IAccessible</b>, <b>IDispatch</b>, <b>IEnumVARIANT</b>, <b>IUnknown</b>, or other supported interface. If the requested interface is not supported, the function returns E_NOINTERFACE. </p>
<p>
In some cases, this function might create and return a pseudo-object as a wrapper for windows that do not provide accessible objects themselves. </p>
<p>
This function increases an object's reference count, and must have a corresponding Release. Even though an object has a reference count greater than zero, that object can still be destroyed, and clients are not guaranteed that getting properties from or calling methods on an object will succeed. This is what Word does with its objects when it shuts down: As with a standard OLE Automation object, Word will quit and CoDisconnect the object so that if anyone tries to access it cross-process after the quit, OLE will return an error. A reference count on a OLE Automation object does not affect the reference count of the application. </p>
<h4>See Also</h4>
<p>
<b>AccessibleObjectFromEvent</b>, <b>AccessibleObjectFromPoint</b>, <b>WinEventProc</b>, <i>IDispatch Interface</i> </p>
<p>&nbsp;</p></body>
</HTML>

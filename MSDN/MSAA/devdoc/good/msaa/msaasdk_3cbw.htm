<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Active Accessibility Server Tutorial</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_msaa_active_accessibility_server_tutorial"></a>Active Accessibility Server Tutorial</h2>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The Server sample application (Server.exe) was written purposely to be inaccessible. It does, however, expose the Active Accessibility interface to allow a client to operate it. It takes left mouse clicks to select an object from the dialog box's choices of icons. There are no menu choices. If the #define KEYBOARD_SUPPORT is used, then the left and right arrows are enabled, along with the <small>spacebar</small>. </p>
<p>
Note: A server application developer should have what parent-child reciprocity : While Parent A's child is Child X (obtained by ::accNavigate NAVDIR_FIRSTCHILD or NAVDIR_LASTCHILD, or ::accChild), and while ::accParent on Child X is Parent B, Parent A is expected to equal Parent B. </p>
<p>
Server application developers must remember to eliminate sending redundant messages to client applications, because this is a major performance issue If a control is constantly being updated, a EVENT_OBJECT_VALUECHANGE or EVENT_OBJECT_STATECHANGE should only be sent if the value or state is different that the previous value. For example, if text field repaints every second, the EVENT_OBJECT_VALUECHANGE should only be sent when the actual contents change, not each second. </p>
<p>
In addition to Server's executable file, the SDK includes the sample's source code, header files, and Microsoft® Visual C++® project workspace files. This tutorial sequentially discusses the tasks that Server performs and, in doing so, presents the basic information you need to develop your own Active Accessibility server application. </p>
<p>
The tutorial contains the following steps. 
<ul>
<li>
<i>About the Server Sample Application</i> </li>
<li>
<i>Step 1: Initialize the COM Library</i> </li>
<li>
<i>Step 2: Handle WM_GETOBJECT Messages</i> </li>
<li>
<i>Step 3: Close the COM Library</i> </li>
</ul>
<p>
Additionally, the following topic contains background information. 
<ul>
<li>
<i>Converting Unicode and ANSI Strings</i> </li>
</ul>
<p>&nbsp;</p></body>
</HTML>

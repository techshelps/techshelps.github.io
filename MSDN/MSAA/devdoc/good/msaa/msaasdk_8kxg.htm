<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using AccessibleObjectFromEvent</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_msaa_using_accessibleobjectfromevent"></a>Using AccessibleObjectFromEvent</h3>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
Many client applications need to look up information about specific accessible objects that have generated events. Since the <b>IAccessible</b> interface is the "gateway" to accessible objects, clients must have an easy way to associate WinEvents with the <b>IAccessible</b> interface of the object generating the events. Active Accessibility provides the <b>AccessibleObjectFromEvent</b> function specifically for this purpose. Other times, a client might want to access to an object based on its location, or window handle. Active Accessibility provides the <b>AccessibleObjectFromPoint</b> and <b>AccessibleObjectFromWindow</b> functions. </p>
<p>
<b>AccessibleObjectFromEvent</b> accepts much of the same information that a client application receives with an event notification. In effect, when a client hook procedure receives an event notification, it can "recycle" most of the parameters it receives with the notification to call the <b>AccessibleObjectFromEvent</b> function and retrieve the generating object's <b>IAccessible</b> interface pointer. </p>
<p>
The <b>AccessibleObjectFromEvent</b> function accepts five parameters total. The first three parameters, <i>hwnd</i>, <i>dwId</i>, and <i>dwChildId</i>, receive information taken directly from the <b>WinEventProc</b> callback function. The <i>hwnd</i> parameter receives the callback function's <i>hwnd</i> parameter, the <i>dwId</i> parameter gets the <i>idChild</i> parameter. The remaining two parameters that <b>AccessibleObjectFromEvent</b> accepts will contain the address of an object's <b>IAccessible</b> interface and a status value. The status value, received in the <i>pvarChild</i> parameter, indicates whether the provided interface belongs to the object that generated the event or its parent object. If a parent object is specified, then the server assumes the responsibility of supporting <b>IAccessible</b> for the child object. </p>
<p>
<b>AccessibleObjectFromEvent</b> increases an object's reference count, and must have a corresponding Release to lower the reference count. Even though an object has a reference count greater than zero, that object can still be destroyed, and clients are not guaranteed that getting properties from or calling methods on an object will succeed. This is what Word does with its objects when it quits: As with usual OLE Automation objects, Word will quit and Active Accessibility will CoDisconnect the object so that if anyone tries to access it cross-process after the application quits, OLE will return an error. A reference count on a Active Accessibility object does not reference count the application. </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Setting a WinEvent Hook</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_msaa_setting_a_winevent_hook"></a>Setting a WinEvent Hook</h2>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
To set a WinEvent hook, you must register a hook procedure by calling the <b>SetWinEventHook</b> function. This function accepts seven parameters that describe the events you want notifications for, the location of the event hook procedure, and other environment variables. The first two parameters, <i>eventMin</i> and <i>eventMax</i>, are <i>event constant values</i> that inclusively declare the lower and upper events you want notifications about. The third parameter, <i>hmodWinEventProc</i>, accepts a handle to the module that contains an in-context hook procedure—this parameter is ignored if the WINEVENT_INCONTEXT flag isn't specified. The fourth parameter, <i>lpfnWinEventProc</i>, is the address of the function that Active Accessibility will call when any of the requested events occurs. The fifth and sixth parameters, <i>idProcess</i> and <i>idThread</i>, are used to identify the specific process and thread to be monitored; setting these to zero indicates that you want to monitor all processes and threads. The last parameter, <i>dwflags</i>, is a bit field that you can use to specify receiving parameters. </p>
<p>
The following code fragment, taken from the inspect.cpp file included with this SDK, removes a preexisting event hook or sets a new one. The new hook procedure is called for a specific event (<b>EVENT_OBJECT_FOCUS</b>), is out-of-context, and applies to all threads and processes. </p>
<pre><code>// Set up an event hook.
  hEventHook = SetWinEventHook(EVENT_MIN,         // We want all events
                               EVENT_MAX,
                               GetModuleHandle(NULL),// Use this module
                               WinEventProc,
                               0,        // All processes
                               0,        // All threads
                               WINEVENT_OUTOFCONTEXT);
    // Did we install correctly? 

    if (hEventHook)
        return(TRUE);

    // Did not install properly - fail
    return(FALSE);
 </code></pre>
<p>
For more information, see WinEvents and About the WinEventProc Callback Function. </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using AccessibleObjectFromPoint</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_msaa_using_accessibleobjectfrompoint"></a>Using AccessibleObjectFromPoint</h3>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
Accessibility aids can use the <b>AccessibleObjectFromPoint</b> function to retrieve the address of an object's <b>IAccessible</b> interface. This function accepts three parameters that describe a point on the screen, and two output variables used to state the call's result. The first parameter, <i>ptScreen</i>, is a <b>POINT</b> structure that describes the x- and y-coordinates of the on-screen location to be tested. The second parameter, <i>ppacc</i>, is the address of a variable that will contain an <b>IAccessible</b> interface pointer. The last parameter, <i>pvarChild</i>, is the address of a <b>VARIANT</b> structure that will contain a value that describes the call's result. The <b>vt</b> member is always set to VT_I4, which means that the <b>lVal</b> member contains the value you need. Since it's possible that the item at the point you specified was over a simple element, the value in <b>lVal</b> tells you whether the retrieved interface pointer belongs to an object at the specified point, or to a simple element's parent object. If <b>lVal</b> is nonzero, then the function retrieved an interface pointer to a simple element's parent object; if <b>lVal</b> is zero, then the retrieved interface belongs to the object itself. </p>
<p>
<b>AccessibleObjectFromPoint</b> increases the an object's reference count, and must have a corresponding Release(); . Even though an object's reference count is greater than zero, that object can still be destroyed, and clients are not guaranteed that getting properties from or calling methods on an object will succeed. This is what Word does with its objects when it quits: As with usual OLE Automation objects, Word will quit and Active Accessibility will CoDisconnect the object so that if anyone tries to access it cross-process after the application quits, OLE will return an error. A reference count on a Active Accessibility object does not reference count the application. </p>
<p>
The following code fragment provides an example of how to use the <b>AccessibleObjectFromPoint</b> function. </p>
<pre><code>// For this example, assume that the g_szName variable 
// is defined as a global LPTSTR variable.

// Get the current cursor location.
POINT ptCursor
GetCursorPos(&amp;ptCursor);

// Setup variables for interface pointers and return value.
IUnknown*    punk    = NULL;
IAccessible* pOleAcc = NULL;
HRESULT      hr;
VARIANT      varChild;

// See if there is an accessible object under the cursor.
hr = AccessibleObjectFromPoint(ptCursor, &amp;pOleAcc, &amp;varChild);
if (SUCCEDED(hr)) 
{
    // Query on the object's name.
    BSTR bstrName = NULL;
    hr = pOleAcc-&gt;get_accName(varChild, &amp;bstrName);

    // If a name was returned without error,
    // convert it to an OLE Unicode string.
    if (bstrName &amp;&amp; SUCCEDED(hr)) 
    {
        WideCharToMultiByte(CP_ACP, 0, bstrName,-1, g_szName,
            cchName, NULL, NULL);
        SysFreeString(bstrName);
    }
}
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SetWinEventHook</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_msaa_setwineventhook"></a>SetWinEventHook</h3>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
Sets an event hook for a range of events. </p>
<pre><code><b>HWINEVENTHOOK WINAPI SetWinEventHook(
</b>  <b>UINT</b> <i>eventMin</i><b>,</b>
  <b>UINT</b> <i>eventMax</i><b>,</b>
  <b>HMODULE</b> <i>hmodWinEventProc</i><b>,</b>
  <b>WINEVENTPROC</b> <i>lpfnWinEventProc</i><b>,</b>
  <b>DWORD</b> <i>idProcess</i><b>,</b>
  <b>DWORD</b> <i>idThread</i><b>,</b>
  <b>UINT</b> <i>dwflags</i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>eventMin</i> </dt>
<dd>
<i>Event constant</i> describing the lowest event value in the range. This parameter can be EVENT_MIN to indicate the lowest possible event value. </dd>
<dt>
<i>eventMax</i> </dt>
<dd>
Event constant describing the highest event value in the range. This parameter can be EVENT_MAX to indicate the highest possible event value. </dd>
<dt>
<i>hmodWinEventProc</i> </dt>
<dd>
Handle to the dynamic-link library (DLL) containing the callback function at <i>lpfnWinEventProc</i>, if the WINEVENT_INCONTEXT flag is specified in the <i>dwFlags</i> parameter. If the callback function is not located in a DLL or the WINEVENT_OUTOFCONTEXT flag is specified, this parameter is ignored. </dd>
<dt>
<i>lpfnWinEventProc</i> </dt>
<dd>
Address of a callback function that matches the return value and argument list of the <b>WinEventProc</b> function declaration. The winable.h header file defines the <i>WINEVENTPROC</i> data type for declaring variables that match the <b>WinEventProc</b> declaration. USER calls this function when a server posts an event that falls within the range specified by the <i>eventMin</i> and <i>eventMax</i> parameters. </dd>
<dt>
<i>idProcess</i> </dt>
<dd>
ID of the process to be monitored, or zero for all processes. </dd>
<dt>
<i>idThread</i> </dt>
<dd>
ID of the thread with which the callback function will be associated. If this parameter is zero, the hook procedure is associated with all existing threads. </dd>
<dt>
<i>dwflags</i> </dt>
<dd>
Flag values specifying one or more receiving options. This parameter can contain one or more of the following values. The default value is WINEVENT_OUTOFCONTEXT. 
<table cellspacing=4 cols=2>
<tr valign=top>
<td colspan=2 width=100%>WINEVENT_INCONTEXT </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>USER sends event notifications to the callback function as they occur. In this case, the DLL containing the callback function is mapped into the address space of the process generating the event. The callback function must be in a DLL to use this option. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>WINEVENT_OUTOFCONTEXT </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>USER sends event notifications that are queued before sending them to the callback function. Queuing is required because the callback function is not mapped into the address space of the process generating the event. Although this method is asynchronous, events are guaranteed to be in sequential order. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>WINEVENT_SKIPOWNPROCESS </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Prevents any threads in the caller's process from receiving their own notifications. This flag does not prevent threads from generating events. </td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>WINEVENT_SKIPOWNTHREAD </td>
</tr>
<tr valign=top>
<td width=10%></td>
<td width=90%>Prevents the thread that is processing notifications from receiving any events it might have generated itself. This flag does not prevent the thread from generating events. </td>
</tr>
</table><br>

</dd>
</dl>
<h4>Return Values</h4>
<p>
Returns an <b>HWINEVENTHOOK</b> value that identifies this event hook instance if successful, or zero otherwise. Your application should save this return value to use with the <b>UnhookWinEvent</b> function. </p>
<h4>Remarks</h4>
<p>
This function allows you to specify not only which events you want, but also the process and thread in which you want to look for those events. This is useful when you want to work only with certain applications or just the system. </p>
<p>
If the <i>idProcess</i> parameter is nonzero and <i>idThread</i> is zero, this function will hook all threads in that process. If the <i>idProcess</i> parameter is zero and <i>idThread</i> is nonzero, this function will hook only the thread specified by <i>idThread</i>. If both are zero, the function will hook in all threads and processes. </p>
<p>
To monitor a noncontiguous range of events, call this method twice, specifying the same callback function in the <i>lpfnWinEventProc</i> parameter each time. </p>
<p>
The client thread calling <b>SetWinEventHook</b> must be a thread that has a message loop, sometimes known as a "GUI thread." </p>
<h4>See Also</h4>
<p>
<i>About the WinEventProc Callback Function</i>. </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GetObject Function</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vafctgetobject"></a>GetObject Function</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vafctGetObjectC">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Example">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vafctGetObjectX">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Specifics">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vafctGetObjectS">
</object></p>
<p>
Returns a reference to an object provided by an ActiveX component.</p>
<p class=label>
<b>Syntax</b></p>
<p>
<b>GetObject(</b>[<b><i>pathname</i></b>] [<b>, <i>class</i></b>]<b>)</b></p>
<p>
The <b>GetObject</b> function syntax has these <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="defnamedarguments">
</object><a href=JavaScript:alink_4.Click()>named arguments</a>:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=17%><b>Part</b></td>
<td class=label width=83%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=17%><b><i>pathname</i></b></td>
<td width=83%>Optional; <b>Variant</b> (<b>String</b>). The full path and name of the file containing the object to retrieve. If <b><i>pathname</i></b> is omitted, <b><i>class</i></b> is required.</td>
</tr>
<tr valign=top>
<td width=17%><b><i>class</i></b></td>
<td width=83%>Optional; <b>Variant</b> (<b>String</b>). A string representing the <object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="defclass">
</object><a href=JavaScript:alink_5.Click()>class</a> of the object.</td>
</tr>
</table><br>
<p>
The <b><i>class</i></b> <object id=alink_6 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="defarg">
</object><a href=JavaScript:alink_6.Click()>argument</a> uses the syntax <i>appname</i><b>.</b><i>objecttype</i> and has these parts:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=17%><b>Part</b></td>
<td class=label width=83%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=17%><i>appname</i></td>
<td width=83%>Required; <b>Variant</b> (<b>String</b>). The name of the application providing the object.</td>
</tr>
<tr valign=top>
<td width=17%><i>objecttype</i></td>
<td width=83%>Required; <b>Variant</b> (<b>String</b>). The type or class of object to create.</td>
</tr>
</table><br>
<p class=label>
<b>Remarks</b></p>
<p>
Use the <b>GetObject</b> function to access an ActiveX object from a file and assign the object to an <object id=alink_7 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="defobjectvariable">
</object><a href=JavaScript:alink_7.Click()>object variable</a>. Use the <b>Set</b> statement to assign the object returned by <b>GetObject</b> to the object variable. For example:</p>
<pre><code>Dim CADObject As Object
Set CADObject = GetObject("C:\CAD\SCHEMA.CAD")
</code></pre>
<p>
When this code is executed, the application associated with the specified <b><i>pathname</i></b> is started and the object in the specified file is activated.</p>
<p>
If <b><i>pathname</i></b> is a zero-length string (""), <b>GetObject</b> returns a new object instance of the specified type. If the <b><i>pathname</i></b> argument is omitted, <b>GetObject</b> returns a currently active object of the specified type. If no object of the specified type exists, an error occurs.</p>
<p>
Some applications allow you to activate part of a file. Add an exclamation point (<b>!</b>) to the end of the file name and follow it with a string that identifies the part of the file you want to activate. For information on how to create this string, see the documentation for the application that created the object.</p>
<p>
For example, in a drawing application you might have multiple layers to a drawing stored in a file. You could use the following code to activate a layer within a drawing called <code>SCHEMA.CAD</code>:</p>
<pre><code>Set LayerObject = GetObject("C:\CAD\SCHEMA.CAD!Layer3")
</code></pre>
<p>
If you don't specify the object's <b><i>class</i></b>, Automation determines the application to start and the object to activate, based on the file name you provide. Some files, however, may support more than one class of object. For example, a drawing might support three different types of objects: an <b>Application</b> object, a <b>Drawing</b> object, and a <b>Toolbar</b> object, all of which are part of the same file. To specify which object in a file you want to activate, use the optional <b><i>class</i></b> argument. For example:</p>
<pre><code>Dim MyObject As Object
Set MyObject = GetObject("C:\DRAWINGS\SAMPLE.DRW", "FIGMENT.DRAWING")
</code></pre>
<p>
In the example, <code>FIGMENT</code> is the name of a drawing application and <code>DRAWING</code> is one of the object types it supports.</p>
<p>
Once an object is activated, you reference it in code using the object variable you defined. In the preceding example, you access <object id=alink_8 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="defproperty">
</object><a href=JavaScript:alink_8.Click()>properties</a> and <object id=alink_9 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="defmethod">
</object><a href=JavaScript:alink_9.Click()>methods</a> of the new object using the object variable <code>MyObject</code>. For example:</p>
<pre><code>MyObject.Line 9, 90
MyObject.InsertText 9, 100, "Hello, world."
MyObject.SaveAs "C:\DRAWINGS\SAMPLE.DRW"
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Use the <b>GetObject</b> function when there is a current instance of the object or if you want to create the object with a file already loaded. If there is no current instance, and you don't want the object started with a file loaded, use the <b>CreateObject</b> function.</p>
<p class=indent>
If an object has registered itself as a single-instance object, only one instance of the object is created, no matter how many times <b>CreateObject</b> is executed. With a single-instance object, <b>GetObject</b> always returns the same instance when called with the zero-length string ("") syntax, and it causes an error if the <b><i>pathname</i></b> argument is omitted. You can't use <b>GetObject</b> to obtain a reference to a class created with Visual Basic.</p>
</BODY>
</HTML>

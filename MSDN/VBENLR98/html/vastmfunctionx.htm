<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Function Statement Example</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h2><a name="vastmfunctionx"></a>Function Statement Example</h2>
<p>
This example uses the <b>Function</b> statement to declare the name, arguments, and code that form the body of a <b>Function</b> procedure. The last example uses hard-typed, initialized <b>Optional</b> arguments.</p>
<pre><code>' The following user-defined function returns the square root of the
' argument passed to it.
<span class=cfe><b>Function</b></span> CalculateSquareRoot<span class=cfe><b>(</b></span>NumberArg <span class=cfe><b>As</b></span> Double<span class=cfe><b>)</b></span> <span class=cfe><b>As</b></span> Double
   If NumberArg &lt; 0 Then   ' Evaluate argument.
      <span class=cfe><b>Exit Function</b></span>   ' Exit to calling procedure.
   Else
      CalculateSquareRoot = Sqr(NumberArg)   ' Return square root.
   End If
<span class=cfe><b>End Function</b></span>
</code></pre>
<p>
Using the <b>ParamArray</b> keyword enables a function to accept a variable number of arguments. In the following definition, <code>FirstArg</code> is passed by value.</p>
<pre><code><span class=cfe><b>Function</b></span> CalcSum<span class=cfe><b>(ByVal</b></span> FirstArg <span class=cfe><b>As</b></span> Integer<span class=cfe><b>,</b></span> <span class=cfe><b>ParamArray</b></span> OtherArgs()<span class=cfe><b>)</b></span>
Dim ReturnValue 
' If the function is invoked as follows:
ReturnValue = CalcSum(4, 3 ,2 ,1)
' Local variables are assigned the following values: FirstArg = 4,
' OtherArgs(1) = 3, OtherArgs(2) = 2, and so on, assuming default
' lower bound for arrays = 1.
</code></pre>
<p>
<b>Optional</b> arguments can have default values and types other than <b>Variant</b>. </p>
<pre><code>' If a function's arguments are defined as follows:
<span class=cfe><b>Function</b></span> MyFunc<span class=cfe><b>(</b></span>MyStr <span class=cfe><b>As</b></span> String<span class=cfe><b>,</b></span> <span class=cfe><b>Optional</b></span> MyArg1 <span class=cfe><b>As</b></span> _ <span class=cfe><b>Integer =</b></span> 5<span class=cfe><b>,</b></span> <span class=cfe><b>Optional</b></span> MyArg2 <span class=cfe><b>=</b></span> "Dolly"<span class=cfe><b>)</b></span> 
Dim RetVal
' The function can be invoked as follows:
RetVal = MyFunc("Hello", 2, "World")   ' All 3 arguments supplied.
RetVal = MyFunc("Test", , 5)   ' Second argument omitted.
' Arguments one and three using named-arguments.
RetVal = MyFunc(MyStr:="Hello ", MyArg1:=7)
</code></pre>
</BODY>
</HTML>

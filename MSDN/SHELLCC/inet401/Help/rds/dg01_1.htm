<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>(Untitled)</TITLE>

<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="Keywords" CONTENT="Remote Data Service">
<META NAME="Platform" CONTENT="Windows">
<META NAME="ROBOTS" CONTENT="all">

<!--@ SNIFF_START -->
<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../code/ver.js"></SCRIPT>
<!--@ SNIFF_END -->

<SCRIPT DEFER SRC="../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>

<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Microsoft Remote Data Service"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../art/headbare.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Microsoft Remote Data Service"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR>
<TR><TD><PRE><IMG SRC="../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" ID=TOC HREF="../contents.htm">Contents</A>  <IMG SRC="../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="../index.htm">Index</A>  <IMG SRC="../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="gs01.htm">Topic Contents</A>
</PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1><a name="admscdesigningadcapplications"></a>Understanding Remote Data Service Applications</H1>
<p>This chapter describes the architecture and components of Remote Data Service technology. It shows how the RDS client- and server-side components work together to:
<ul>
<li>
Bring data over the Internet or your intranet to your Web page.<br><br></li>
<li>
Allow updated information to be sent back across the network and merged into your database.</li>
</ul>
<p>This section contains information about:
<ul>
<li>
<a href="#admscthreetieredapps">Three-Tiered Applications</a><br><br></li>
<li>
<a href="#admschowdoesanadcappwork">How a Remote Data Service Application Works</a><br><br></li>
<li>
<a href="#adc_dg_arch_rel_client_components">Client Tier</a><br><br></li>
<li>
<a href="#adc_dg_arch_mt_communications">Middle Tier</a><br><br></li>
<li>
<a href="#admscdatasourcetier">Data Source Tier</a></li>
</ul>

<H2><a name="admscthreetieredapps"></a>Three-Tiered Applications</H2>
<p>The key to using Remote Data Service technology lies in understanding the three-tiered client/server model. This approach separates the various components of a client/server system into three &quot;tiers&quot;:
<ul>
<li>
<b>Client tier</b> — a local computer on which either a Web browser displays a Web page that can display and manipulate data from a remote data source, or (in non-Web-based applications) a stand-alone compiled front-end application.<br><br></li>
<li>
<b>Middle tier</b> — a Microsoft Windows NT&reg; Server computer that hosts components which encapsulate an organization's business rules. Middle-tier components can either be Active Server Page scripts executed on Internet Information Server, or (in non-Web-based applications) compiled executables.<br><br></li>
<li>
<b>Data source tier</b> — a computer hosting a database management system (DBMS), such as a Microsoft SQL Server database. (In a two-tier application, the middle-tier and data source tier are combined.)</li>
</ul>
<p>These tiers don't necessarily correspond to physical locations on the network. For example, all three tiers may exist on only two machines. One machine could be a Windows 95 computer running Internet Explorer 4.0 as its browser. The second machine could be a Windows NT Server computer running both Internet Information Server and Microsoft SQL Server. Designing applications this way gives you greater flexibility when deploying processes and data on the network for maximum performance and ease of maintenance.
<p>The following illustration shows how these tiers make up an RDS application.
<p><img src="art/ad001.gif" border=0>
<H2><a name="admschowdoesanadcappwork"></a>How a Remote Data Service Application Works</H2>
<p>When you create a Remote Data Service application, you can partition your application into two or three logical tiers. The following illustration shows how a Web-based RDS application handles a user request to display information from a database. The client-side components are typically hosted in an Internet Explorer browser, using HTTP to communicate with the server components. Internet Explorer 4.0 already includes the RDS client components, thus simplifying your deployment.
<p><img src="art/ad002.gif" border=0>
<p>Once the user enters a request, the <a href="#adc_dg_arch_rel_client_components">client-side</a> RDS components send the query to the Web server. The <a href="#adc_dg_arch_mt_communications">server-side</a> RDS components process the request and send it to the DBMS. The DBMS responds to the request, sending back the data. The RDS components on the Web server transform that data into an ADO <a href="#adc_dg_arch_ado"><b>Recordset</b></a> object. The data is converted for transport to the client and sent back across the network to the client computer. It may be displayed in a <A HREF="def01_38.htm">data-aware</a> control, such as a text box or grid, that is bound to the data by the <a href="#adc_dg_arch_adc_object"><b>RDS.DataControl</b></a> object. One <b>RDS.DataControl</b> can channel data to many data-aware controls.
<p>The resulting data is cached on the client computer, reducing the number of connections to the Web and making it easier for a user to manipulate the data. The only calls requiring a trip to the server are calls to the business object (such as updates to the data server or requests for new data).
<p>To learn how to implement a simple scenario like this, complete the <A HREF="tut02.htm">Address Book tutorial</a>. You can also consult &quot;<A HREF="dg02.htm">Developing Remote Data Service Applications</a>&quot; for helpful code examples and task-oriented information.
<H2><a name="adc_dg_arch_rel_client_components"></a>Client Tier</H2>
<p>The client tier provides the visual interface for presenting information and gathering data. In a Web-based RDS application, the client tier usually consists of the following components:
<ul>
<li>
A <a href="#adc_dg_arch_web_page">Web page</a> that has an <a href="#adc_dg_arch_adc_object"><b>RDS.DataControl</b> object</a> and one or more data-aware controls.<br><br></li>
<li>
<a href="#adc_dg_arch_bo_proxies">Business object proxies and the <b>RDS.DataSpace</b> object for instantiating middle-tier objects</a>.<br><br></li>
<li>
<a href="#adc_dg_arch_data_cache">A client-side data cache</a>.</li>
</ul>
<p>The following illustration shows how RDS client-side components communicate with each other and the middle tier of a Web-based application.
<p><img src="art/adcdg02.gif" border=0>
<p>Data, in the form of <b>Recordset</b> objects, is made available to Web page <A HREF="def01_38.htm">bound controls</a>, and can be transported via HTTP or <a href="#adc_dg_arch_mt_dcom">DCOM</a> to the <A HREF="def01_6.htm">middle tier</a> as an update, through the OLEDB provider. The <a href="#adc_dg_arch_adc_object"><b>RDS.DataControl</b></a> is designed to consume <b>Recordset</b> objects, navigating to their underlying <A HREF="def01_28.htm">rowset</a>.
<H2><a name="adc_dg_arch_web_page"></a>Remote Data Service Web Pages</H2>
<p>The Web page represents a Remote Data Service application front end. You can bind data-aware controls to data from remote servers, and view, edit, and update data from the Web page. 
<H2><a name="adc_dg_arch_adc_object"></a>RDS.DataControl Object</H2>
<p>The <A HREF="ref01_1.htm"><b>RDS.DataControl</b></a> object is the data-binding mechanism for displaying query results on a Web page in Internet Explorer. Each <b>RDS.DataControl</b> object binds one <b>Recordset</b> object, representing the results of a single query, to one or more visual controls (for example, a text box, combo box, grid control, and so forth). There may be more than one <b>RDS.DataControl</b> object on each page. Each <b>RDS.DataControl</b> object can be connected to a different data source and contain the results of a separate query.
<H2><a name="adc_dg_arch_bo_proxies"></a>Business Object Proxies and the RDS.DataSpace Object</H2>
<p>The Remote Data Service uses business object proxies so that client-side components can communicate with business objects located on the middle tier (IIS Web server). Proxies facilitate the packaging, unpackaging, and transport (marshaling) of the application's data across process or machine boundaries.
<p>If you use the <A HREF="ref01_1.htm"><b>RDS.DataControl</b></a> to obtain a disconnected <b>Recordset</b>, RDS calls the <A HREF="ref01_20.htm"><b>RDSServer.DataFactory</b></a> object; you don't need to explicitly call <b>RDSServer.DataFactory</b> or <A HREF="ref01_24.htm"><b>RDS.DataSpace</b></a>. The business object proxy is dynamically created whenever an instance of its middle-tier business object counterpart is created.
<p><b>See Also</b>   For more information about creating business object proxies to call a custom business object, see &quot;<A HREF="ref01_25.htm">CreateObject Method</a>&quot; and &quot;<A HREF="dg02_1.htm">Getting a Recordset to the Client</a>.&quot;
<H2><a name="admscadfvscustombusinessobject"></a>RDSServer.DataFactory vs. Custom Business Objects</H2>
<p>There are two ways to pass a <b>Recordset</b> object back from your server to the client with the Remote Data Service. You can:
<ul>
<li>
Use the <A HREF="ref01_20.htm"><b>RDSServer.DataFactory</b></a> object.<p>–&nbsp;or&nbsp;–
</li>
<li>
Create a custom business object that exposes data access methods.</li>
</ul>
<p>RDS contains a server-side business object (ActiveX DLL) called <b>RDSServer.DataFactory</b> that sends SQL statements to a DBMS, and passes the results back across the Internet or an intranet. <b>RDSServer.DataFactory</b> is the default ActiveX DLL that you can use to provide live data on your Web page, with little programming.
<p>If you don't want to use the <b>RDSServer.DataFactory</b> object to pass <b>Recordset</b> objects back to the client, you can create your own custom ActiveX DLLs that will run on the server. The custom DLLs could also contain methods that aren't provided by the simple <b>RDSServer.DataFactory</b> ActiveX DLL. These methods don't have to be related to data access — they could just encompass a business rule.
<H2><a name="adc_dg_arch_data_cache"></a>Client-Side Data Cache</H2>
<p>One of the most important features of the Remote Data Service is its in-memory data caching on both the client and middle tiers. The data cache:
<ul>
<li>
Reduces the number of requests for data between the client-side application components and the database server. The performance improvement is especially noticeable for data access across the Internet.<br><br></li>
<li>
Makes data immediately available to the client-side application logic, without the application having to wait for data to travel across the network. </li>
</ul>
<p>Using disconnected <b>Recordset</b> objects eliminates the contention for OLE DB connections that occurs when multiple Internet clients simultaneously access a data source.
<p>The client-side data cache is made up of:
<ul>
<li>
<a href="#adc_dg_arch_ado">ActiveX Data Objects</a><br><br></li>
<li>
<a href="#adc_dg_arch_vtm">Client Cursor Engine</a></li>
</ul>
<H3><a name="adc_dg_arch_ado"></a>ActiveX Data Objects</H3>
<p>You can use ActiveX&#153; Data Objects (ADO) to write a client application that can access and manipulate data in a database server through a provider (database interface). When you use the <A HREF="ref01_1.htm"><b>RDS.DataControl</b></a> object to send a query to a database, the Remote Data Service server-side components return an ADO <b>Recordset</b> object to the client. You don't necessarily have to write any ADO-specific code to make this happen — RDS handles this for you when you use the <b>RDS.DataControl </b>object. RDS uses ADO as a programming interface between the code and the data exposed by the underlying OLE DB provider. Because RDS is already using ADO, extending RDS functionality with ADO is easy.
<p><a name="admscadovsadc"></a><b>ADO vs. Remote Data Service</b>
<p>ActiveX Data Objects (ADO) is a collection of Automation objects that can retrieve, update, and create records in any OLE DB provider, which includes ODBC databases. The Remote Data Service provides client-side caching of <b>Recordset</b> objects that minimizes the amount of network roundtrips, and it also provides a data-binding mechanism to display <b>Recordset</b> objects in data-bound controls on a Web page.
<p>RDS is suitable for applications in which the client needs to browse records or connect to live data. Because the data is cached on the client workstation, a user can quickly scroll through the data. RDS can also spare users from needing details about the data source.
<p>ADO is suitable for applications that need a high degree of database programmability. With ADO, you specify what type of <b>Recordset</b> object to create, which provides more flexibility than using RDS. Also, because ADO can execute on the Web server in an ASP page, it doesn't require any particular set of components on the client in Web-based applications. Further, ADO can maintain database connections, while RDS always works with disconnected data.
<p>When you create an application, decide which technology is most appropriate for you. You can use RDS, ADO, or a combination of both technologies in the same application. For example, your application can combine a custom business object that uses ADO to manage data manipulation with the data source, and RDS to transfer remote data to the middle tier where the user can interact with it.
<p><a name="adc_adodbvsador"></a><b>ADOR vs. ADODB Recordset Objects</b>
<p>ActiveX&#153; Data Objects (ADO) can exist in both the client and <A HREF="def01_6.htm">middle tiers</a>. ADOR and ADODB are &quot;ProgID's&quot; or prefixes that indicate where the <b>Recordset</b> object will exist and be manipulated. If the <b>Recordset</b> exists on the middle tier, use the ADODB ProgID when writing code. If the <b>Recordset</b> exists and is manipulated on the client, use the ADOR ProgID. A <b>Recordset</b> on either tier behaves almost identically. There are slight differences in the availability and behavior of some <b>Recordset</b> methods and properties; these differences are noted in the relevant ADO method and property reference topics.
<H3><a name="adc_dg_arch_oledb"></a>OLE DB</H3>
<p>The Remote Data Service uses an OLE DB interface to communicate with any data source (including relational and nonrelational databases, Microsoft Excel spreadsheets, mail, flat files, and so forth) that can communicate with OLE DB and expose its tabular data through the OLE DB standard. Such data sources are known as <i>providers</i>.
<p>A variety of providers are currently available, including the Microsoft ODBC Provider, which exposes any ODBC database through OLE DB, and the Microsoft Jet Database Engine Provider, which exposes Microsoft Access and other desktop databases through OLEDB.
<p>Usually, you use Microsoft Visual Basic or VBScript to access ADO <b>Recordset</b> objects, so the OLE DB layer will be invisible. ADO and RDS use OLE DB &quot;behind the scenes.&quot; 
<p><b>See Also</b>   For more information about using OLE DB, see the OLE DB Web site (http://www.microsoft.com/oledb/).
<H3><a name="adc_dg_arch_vtm"></a>Client Cursor Engine</H3>
<p>The Client Cursor Engine is a set of data structures that caches, in memory (or temporarily on disk for large sets of data), the set of query results retrieved from a DBMS, as well as client updates to those results. The Client Cursor Engine is an underlying technology that is invisible to you — Remote Data Service calls the Client Cursor Engine to perform various tasks for you automatically.
<p>The Client Cursor Engine contains buffers for meta data such as tables, rows, columns, keys, and timestamps, as well as the actual table data itself. To manage the cache, the Client Cursor Engine can:
<ul>
<li>
Create and delete temporary tables.<br><br></li>
<li>
Populate tables.<br><br></li>
<li>
Manage updates to the data values.<br><br></li>
<li>
Provide schema information (such as base tables, key columns, updatable columns, special columns, and computed columns).<br><br></li>
<li>
Provide the mechanism to send batched updates to the server with minimum network traffic, by sending only the modified records.</li>
</ul>
<H2><a name="adc_dg_arch_mt_communications"></a>Middle Tier</H2>
<p>The middle tier is the &quot;bridge&quot; between client computers and database servers. The components on the middle tier respond to requests from the user (or other business services) in order to execute a business task.
<p>In an RDS application, business objects on the middle tier handle the data request from the client sent through a <A HREF="dg02_1.htm#admsctransportprotocols" >transport protocol</a> such as HTTP. That request is sent to the data source tier through an OLE DB provider to complete the requested transaction(s). The middle tier usually consists of the following components:
<ul>
<li>
<a href="#adc_dg_arch_iis">Internet Information Server and ADISAPI</a><br><br></li>
<li>
<a href="#adc_dg_arch_mt_bo">Business objects</a><br><br></li>
<li>
<a href="#admscserversidedatacache">Server-side data cache</a></li>
</ul>
<p>The following illustration shows the various components on the middle tier.
<p><img src="art/adcdg03.gif" border=0>
<H2><a name="adc_dg_arch_iis"></a>Internet Information Server</H2>
<p>Microsoft&reg; Internet Information Server (IIS) enhances the functionality of Windows NT&reg; Server 4.0. IIS includes a complete set of tools for building server-based Web applications and creating rich and dynamic content. The underlying Remote Data Service code uses one of these tools, the Internet Information Server API (ISAPI), to help create server-side stubs to communicate with client-side business object proxies (through the RDS Advanced Data ISAPI, or ADISAPI).
<p>ADISAPI provides parsing, Automation control, <b>Recordset</b> object marshaling, and tabular data packaging, streaming, and unpackaging. This extension library performs the necessary work to instantiate business objects, invoke their services through Automation interfaces, and process the return parameters for transport back to the calling client through the tabular data streaming protocol.
<p><b>Note</b>   The business object proxy and the ADISAPI components are responsible for marshaling data across the process or machine boundaries. The marshaled data is copied by value, rather than by reference, using a  data format designed to marshal tabular (<A HREF="def01_28.htm">rowset</a>) data, based on the <a href="#adc_dg_arch_oledb">OLE DB</a> standard of exposing the metadata information. The proxy uses this format when marshaling rowsets across process or machine boundaries.
<H2><a name="adc_dg_arch_active_server_pages"></a>Active Server Pages</H2>
<p>Internet Information Server (IIS) contains a feature, called Active Server Pages (ASP), that allows server-side scripting. Whereas VBScript and the ActiveX controls on HTML pages are interpreted and rendered by the client-side browser, Active Server Pages scripting is processed by an engine on the Web server, before the HTML page is sent to the browser.
<p>You can use Active Server Pages to write server pages (.asp files) that can be referred to as URLs from any Internet browser. These pages are composed of text, HTML tags, and script commands. The script commands consist of Visual Basic-like code embedded within the &lt;% and %&gt; tags.
<p>You can use ASP pages as components of a Remote Data Service application, as in the Address Book example in <i>Getting Started</i>. The HTML and VBScript code for that example is written in an .asp file, and Active Server Pages script is used to request the name of a server.
<p><b>See Also</b>   For more information about IIS and ASP, see the IIS Web site, http://www.microsoft.com/iis/, or IIS 4.0 documentation.
<H2><a name="adc_dg_arch_mt_bo"></a>Business Objects</H2>
<p>The main application components on the middle tier are business objects that contain information such as application logic, business rules, and the data access code from underlying databases. The client-side components access these server-side business objects through business object proxies. Business objects can be any generic Automation objects created with Visual Basic&reg;, Visual C++&reg;, etc.
<p>The Remote Data Service supplies a default business object, the <A HREF="ref01_20.htm"><b>RDSServer.DataFactory</b></a> object, that provides read and write access to data sources, but contains no business rules or application logic. You may use the methods of this default object in your own custom business objects that contain other business rules.
<p>The ADISAPI component performs the actual communication with business objects for you, and is responsible for creating instances of objects, invoking methods, and releasing them. Your business objects can use ADO to query and update the underlying databases. In RDS, the lifespan of a business object is as long as the execution of a method call invoked by the client. Instances of the business objects are created with each method call, and no interim state is maintained.
<p><b>See Also</b>   For more information about business objects, see &quot;<A HREF="dg02_1.htm">Getting a Recordset to the Client</a>&quot; and &quot;<a href="#admscadfvscustombusinessobject">RDSServer.DataFactory vs. Custom Business Objects</a>.&quot;
<H2><a name="adc_dg_arch_mt_dcom"></a>DCOM and Microsoft Transaction Server</H2>
<p>You can implement Remote Data Service applications on an intranet without using HTTP. If the client- and middle-tier components are on computers within a LAN (local-area network), you can use DCOM to marshal the interfaces and method arguments across the network.
<p>In an intranet/LAN application using RDS, the business object proxy and the ADISAPI components are replaced, respectively, by COM proxies and stubs. Except for rowsets, the arguments being marshaled don't need to be packaged in multi-part MIME packets. Instead, they are transported in the native DCE/NDR format, implemented by COM marshaling code. 
<p>When business objects on the middle tier are implemented as Microsoft Transaction Server components, they can use Transaction Server context objects to maintain their state across multiple client calls. This scenario is possible with DCOM, which is typically implemented between trusted clients and servers (that is, an intranet).
<p><b>See Also</b>   For more information on using Transaction Server, see &quot;<A HREF="dg02_1.htm#admscusingmtsresdispensers" >MTS Resource Dispensers</a>&quot; and &quot;<A HREF="dg02_1.htm#admscrunningbusobjsinmts" >Running Business Objects in Microsoft Transaction Server</a>.&quot; You can also visit the Transaction Server Web site at http://www.microsoft.com/transaction/, or refer to the Microsoft Transaction Server documentation provided with Microsoft Windows NT 4.0 Option Pack.
<H3><a name="adc_dg_arch_adf"></a>RDSServer.DataFactory Object</H3>
<p>The <A HREF="ref01_20.htm"><b>RDSServer.DataFactory</b></a> object is a SQL query and update control used in coordination with the <A HREF="ref01_1.htm"><b>RDS.DataControl</b></a> object to retrieve and post data to back-end data sources that support OLE DB. When you use some of the <b>RDS.DataControl</b> object's methods and properties, the Remote Data Service is calling <b>RDSServer.DataFactory</b> behind the scenes. You can use it as a utility object, or as a template to create business objects that are compatible with RDS applications.
<p>The <b>RDSServer.DataFactory</b> object resides on a Web server and is instantiated by the ADISAPI component. The <b>RDSServer.DataFactory</b> object provides read/write access to specified data sources, but doesn't contain any validation or business rules logic.
<H2><a name="admscserversidedatacache"></a>Server-Side Data Cache</H2>
<p>The server-side data cache is similar to the data cache on the client tier. For more information on the data caching mechanism, see &quot;<a href="#adc_dg_arch_data_cache">Client-Side Data Cache</a>.&quot;
<H2><a name="admscdatasourcetier"></a>Data Source Tier</H2>
<p>The data source tier defines, maintains, accesses, and updates data, and manages and satisfies middle-tier requests for data. Separating data source services from the other application components allows the data structure and access mechanisms to be maintained, modified, and even re-architected when necessary without affecting application components on the client or middle tier.
<p>The data source services may be physically implemented in a particular database management system (DBMS), or by a heterogeneous collection of databases which may reside on multiple platforms and combinations of servers and mainframe computers. Your DBMS can be a Microsoft SQL Server database, for example, and you can use Microsoft ODBC and OLE DB technology to handle all data similarly on the client side, regardless of its source. This eliminates the need to use targeted client-side drivers for each data source. This also means you can easily modify Remote Data Service applications to suit different network and DBMS configurations.
<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
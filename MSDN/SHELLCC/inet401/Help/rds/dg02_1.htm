<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Getting a Recordset to the Client</TITLE>

<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME=MS-HKWD CONTENT="Getting a Recordset to the Client">
<META NAME="Keywords" CONTENT="Remote Data Service">
<META NAME="Platform" CONTENT="Windows">
<META NAME="ROBOTS" CONTENT="all">

<!--@ SNIFF_START -->
<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../code/ver.js"></SCRIPT>
<!--@ SNIFF_END -->

<SCRIPT DEFER SRC="../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>

<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Microsoft Remote Data Service"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../art/headbare.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Microsoft Remote Data Service"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR>
<TR><TD><PRE><IMG SRC="../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" ID=TOC HREF="../contents.htm">Contents</A>  <IMG SRC="../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="../index.htm">Index</A>  <IMG SRC="../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="gs01.htm">Topic Contents</A>
</PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1><a name="adc_dg_arch_create_boproxy"></a>Getting a Recordset to the Client</H1>
<p>One of the most important features of Remote Data Service is data caching on the client. It reduces the number of requests for data between the client-side application components and the database server, which improves both the actual performance and the user’s perceived performance of the application.
<p>There are three ways to pass a <b>Recordset</b> back from your server to the client with RDS. You can:
<ul>
<li>
<a href="#admscopeningdisconnectedrecordsets">Use the <b>RDS.DataControl</b> methods and properties that automatically call the <b>RDSServer.DataFactory</b> object.</a><br><br></li>
<li>
<a href="#admscusingadftopassrecordsets">Manually call the <b>RDSServer.DataFactory </b>object.</a><br><br></li>
<li>
<a href="#admscusingcustomdlltopassrecordsets">Create a custom ActiveX DLL that performs data access functions.</a></li>
</ul>
<p>This section explains how to pass <b>Recordset</b> objects using any of these methods, and it also contains information on:
<ul>
<li>
<a href="#admsctransportprotocols">Transport protocols</a><br><br></li>
<li>
<a href="#admscconnectionpooling">Connection pooling</a><br><br></li>
<li>
<a href="#admscrunningbusobjsinmts">Running business objects in Microsoft Transaction Server</a></li>
</ul>
<H2><a name="admscopeningdisconnectedrecordsets"></a>Getting a Recordset with the RDS.DataControl Object</H2>
<p>You can open a disconnected <b>Recordset</b> by setting the <A HREF="ref01_1.htm"><b>RDS.DataControl</b></a> object's <A HREF="ref01_2.htm"><b>Connect</b></a>, <A HREF="ref01_9.htm"><b>Server</b></a>, and <A HREF="ref01_12.htm"><b>SQL</b></a> properties.
<p>The following code shows how to set these properties at design time:
<PRE>&lt;OBJECT CLASSID=&quot;clsid:BD96C556-65A3-11D0-983A-00C04FC29E33&quot; ID=&quot;ADC1&quot;&gt;
&#09;&lt;PARAM NAME=&quot;SQL&quot; VALUE=&quot;Select * from Products&quot;&gt;
&#09;&lt;PARAM NAME=&quot;Connect&quot; VALUE=&quot;DSN=AdvWorks;&quot;&gt;
&#09;&lt;PARAM NAME=&quot;Server&quot; VALUE=&quot;http://SalesWeb/&quot;&gt;
&lt;/OBJECT&gt;</pre>
<p>Calling the <b>Refresh</b> method after setting these properties on the <b>RDS.DataControl</b> automatically calls the <A HREF="ref01_20.htm"><b>RDSServer.DataFactory</b></a> object &quot;behind the scenes,&quot; and Remote Data Service returns a <b>Recordset</b> object to the client. You don't have to actually write any code to use the <b>RDSServer.DataFactory</b>, but if you do want to do this, see &quot;<a href="#admscusingadftopassrecordsets">Getting a Recordset with the RDSServer.DataFactory Object</a>.&quot;
<H3><a name="admscasynchronouspopulation"></a>Asynchronous Population</H3>
<p>You can open and populate a disconnected <b>Recordset</b> object asynchronously. This improves performance by leaving the client free to execute other tasks while records are still being returned. Three properties of the <A HREF="ref01_1.htm"><b>RDS.DataControl</b></a> object make this possible:
<ul>
<li>
The <A HREF="ref01_3.htm"><b>ExecuteOptions</b></a> property of the <b>RDS.DataControl</b> object indicates the type of asynchronous execution. This property can be set to <b>adcSyncExecute</b> (the default) which causes data refresh to occur synchronously, or to <b>adcAsyncExecute</b>, which causes asynchronous execution of the next <b>Refresh</b> of the <b>Recordset</b>.<br><br></li>
<li>
The <A HREF="ref01_4.htm"><b>FetchOptions</b></a> property indicates whether the fetching of records into an <b>RDS.DataControl</b> object’s <b>Recordset</b> is to occur asynchronously. Asynchronous fetching is the default setting.<br><br></li>
<li>
The <A HREF="ref01_13.htm"><b>ReadyState</b></a> property returns the state of the <b>RDS.DataControl</b> object's <b>Recordset</b>. Your code can check this property to see whether an asynchronous operation is complete,</li>
</ul>
<p>Here is a VBScript code snippet that shows the use of these properties:
<PRE>ADC1.Connect = &quot;UID=sa;PWD=permission;DSN=Pubs&quot;
ADC1.SQL = &quot;select * from authors A1, authors A2, authors A3&quot;
ADC1.Server = &quot;http://SERVER_NAME&quot;

ADC1.ExecuteOptions = adcExecAsync
ADC1.FetchOptions = adcFetchAsync

ADC1.Refresh

… … …
select case ADC1.ReadyState
&#09;case adcReadyStateLoaded: MsgBox &quot;Executing&quot;
&#09;case adcReadyStateInteractive: MsgBox &quot;Fetching in background&quot;
&#09;case adcReadyStateComplete: MsgBox &quot;All records fetched&quot;
end select
</pre>
<ul>
<li>
The <A HREF="ref01_14.htm"><b>Cancel</b></a> method cancels the currently running asynchronous execution. For example, if it is taking too long to complete, your code can just cancel an asynchronous task,</li>
</ul>
<H2><a name="admscusingadftopassrecordsets"></a>Getting a Recordset with the RDSServer.DataFactory Object</H2>
<p>Remote Data Service contains a server-side business object (ActiveX DLL) called <A HREF="ref01_20.htm"><b>RDSServer.DataFactory</b></a> that sends commands to a data source and passes the results back across the Internet or an intranet for you. <b>RDSServer.DataFactory </b>is the default ActiveX DLL that you can use to provide live data on your Web page with little programming.
<p>The following example shows how to call the <b>RDSServer.DataFactory</b> object from a VBScript Web page. You use the <A HREF="ref01_24.htm"><b>RDS.DataSpace</b></a> object on the client to instantiate the <b>RDSServer.DataFactory</b> object on the server. 
<PRE>&lt;HTML&gt;
&lt;HEAD&gt;&lt;/HEAD&gt;
&lt;BODY&gt;

&lt;!-- RDS.DataControl --&gt;
&lt;OBJECT classid=&quot;clsid:BD96C556-65A3-11D0-983A-00C04FC29E33&quot; ID=ADC1&gt;
&lt;/OBJECT&gt;
&lt;!-- RDS.DataSpace --&gt;
&lt;OBJECT ID=&quot;ADS1&quot; WIDTH=1 HEIGHT=1
  CLASSID=&quot;CLSID:BD96C556-65A3-11D0-983A-00C04FC29E36&quot;&gt;
&lt;/OBJECT&gt;
.
.
.
&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
Option Explicit
Sub Window_OnLoad()
  Dim ADF1, myRS
  Set ADF1 = ADS1.CreateObject(&quot;RDSServer.DataFactory&quot;, _
  &quot;http://&lt;%=Request.ServerVariables(&quot;SERVER_NAME&quot;)%&gt;&quot;)
  Set myRS = _
    ADF1.Query(&quot;DSN=pubs;UID=sa;PWD=permission;&quot;, _
    &quot;Select * From Authors&quot;)
  ' Assign the returned recordset to SourceRecordset.
  ADC1.SourceRecordset = myRS
End Sub
&lt;/SCRIPT&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</pre>
<H3>Security and your Web Server</H3>
<p>If you use the <b>RDSServer.DataFactory</b> object on your Internet Web server, remember that doing so creates a potential security risk. External users who obtain valid data source name (DSN), user ID, and password information could write pages to send any query to that data source. If you want more restricted access to a data source, one option is to unregister and delete the <b>RDSServer.DataFactory</b> object (msadcf.dll), and instead use custom business objects with hard-coded queries. The next section describes how to do this.
<H2><a name="admscusingcustomdlltopassrecordsets"></a>Getting a Recordset with a Custom Business Object</H2>
<p>If you don't want to use the <A HREF="ref01_20.htm"><b>RDSServer.DataFactory</b></a> object to pass <b>Recordset</b> objects back to the client, you can create your own custom business object that will run on the server. The DLL (dynamic-link library) can be any generic Automation object created with Visual Basic&reg;, Visual C++&reg;, and so forth, or a server-side HTML page with <A HREF="dg01_1.htm#adc_dg_arch_active_server_pages">Active Server Pages</a> scripting code. Clients and Web front-end applications call the business objects to perform a particular function, and those <A HREF="def01_6.htm">middle-tier</a> business objects in turn can communicate with back-end databases. 
<p>The custom DLLs could also contain methods that aren't provided by the simple <b>RDSServer.DataFactory</b> ActiveX DLL. These methods don't have to be related to data access — they could just encompass a business rule.
<p>This section contains information on:
<ul>
<li>
<a href="#admscwritingcodepassrecordsetscustomdll">Writing Code to Pass Recordsets with a Custom Business Object</a><br><br></li>
<li>
<a href="#adc_rn_registry">Required Custom Business Object Registry Entry</a><br><br></li>
<li>
<a href="#adc_rn_sfs">Marking Business Objects as &quot;Safe for Scripting&quot;</a><br><br></li>
<li>
<a href="#adc_rn_csregistrydcom">Client-Side Registry Entries for Business Objects with DCOM</a></li>
</ul>
<H3><a name="admscwritingcodepassrecordsetscustomdll"></a>Writing Code to Pass Recordset Objects with a Custom ActiveX DLL</H3>
<p>The following client VBScript code performs the same action as the <a href="#admscusingadftopassrecordsets">previous <b>RDSServer.DataFactory</b> code</a>, except that it uses a custom business object. You still use the <A HREF="ref01_24.htm"><b>RDS.DataSpace</b></a> object on the client to instantiate the business object (in this case, MyCustomBusinessObject) on the server.
<PRE>&lt;HTML&gt;
&lt;HEAD&gt;&lt;/HEAD&gt;
&lt;BODY&gt;

&lt;!-- RDS.DataControl --&gt;
&lt;OBJECT classid=&quot;clsid:BD96C556-65A3-11D0-983A-00C04FC29E33&quot; ID=ADC1&gt;
&lt;/OBJECT&gt;
&lt;!-- RDS.DataSpace --&gt;
&lt;OBJECT ID=&quot;ADS1&quot; WIDTH=1 HEIGHT=1
  CLASSID=&quot;CLSID:BD96C556-65A3-11D0-983A-00C04FC29E36&quot;&gt;
&lt;/OBJECT&gt;
.
.
.
&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
Option Explicit
Sub GetRecords()
  Dim objMyCustomBusinessObject, myRS
  Set objMyCustomBusinessObject = _
    ADS1.CreateObject(&quot;MyCustomBusinessObject&quot;, _
    &quot;http://&lt;%=Request.ServerVariables(&quot;SERVER_NAME&quot;)%&gt;&quot;)
  ' Assume MyCustomBusinessObject has a method called
  ' GetData that takes connection string and SQL 
  ' parameters.
  Set myRS = _
    objCustomBusinessObject.GetData _
    (&quot;DSN=pubs;UID=sa;PWD=permission;&quot;, _
    &quot;Select * From Authors&quot;)
  ' Assign the returned recordset to SourceRecordset.
  ADC1.SourceRecordset = myRS
End Sub
&lt;/SCRIPT&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</pre>
<p>Assuming you use Visual Basic to create the MyCustomBusinessObject ActiveX DLL that is located on the middle tier, the code in the GetData method of the MyCustomBusinessObject class could look something like this. Notice that you can use ActiveX™ Data Objects (ADO) directly.
<PRE>' Returns an ADO resultset.
Public Function GetData(szCnStr As String, szSQL _
  As String) As Object

  Dim cn As New ADODB.Connection
  Dim rs As New ADODB.Recordset

  cn.Open szCnStr
  ' The ADODB.Recordset should generate Recordset 
  ' objects that can be disconnected and later 
  ' reconnected to process batch updates.
  rs.CursorLocation = adUseClientBatch
  ' Using the Unspecified parameters, an ADO/R
  ' recordset is returned.
  rs.Open szSQL, cn, _
    adOpenUnspecified, adLockUnspecified, _
    adCmdUnspecified
  Set GetData = rs
End Function
</pre>
<p><b>Tips</b>   
<p>Always place one simple method in your server component to test for minimum functionality before attempting to pass <b>Recordset</b> objects back.
<p>Build a simple client application to test your server component before deploying and testing it with Internet Explorer. 
<p>It is easier to develop your application on a local test Web server. You will need to copy and register the .dll on the test server after each compile.
<p>The DSN passed to your business object will need to be a System DSN on your server. If it doesn't exist or is set up improperly, your component will fail. It is a good idea to test the DSN on the server with another ODBC application such as MSQuery to make sure the DSN is set up properly.
<p>Method names on custom <A HREF="def01_16.htm">business objects</a> cannot exceed 255 characters. This allows compatibility across all RDS-supported  protocols (HTTP, HTTPS, DCOM, and running in-process).
<p>If you used Visual Basic to create a custom business object that uses early binding with the ADOR 1.0 type library, you should rebuild you custom business object to use the ADOR 1.5 type library.
<H3><a name="adc_rn_registry"></a>Required Custom Business Object Registry Entry</H3>
<p>To successfully launch a custom <A HREF="def01_16.htm">business object</a> (DLL or EXE) through the Web server, the business object's ProgID must be entered into the registry as explained in this procedure. This RDS feature protects the security of your Web server by running only sanctioned executables. The default business object, <A HREF="ref01_20.htm"><b>RDSServer.DataFactory</b></a>, is already fully registered. 
<p><img src="art/prcarrow.gif" border=0><b>&#09;To register a custom business object</b>
<ol>
<li>
From the <b>Start</b> menu, click <b>Run</b>.<br><br></li>
<li>
Type <b>RegEdit</b> and click <b>OK</b>.<br><br></li>
<li>
In the Registry Editor, navigate to the <b>HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\W3SVC\Parameters\ADCLaunch </b>registry key.<br><br></li>
<li>
Select the <b>ADCLaunch</b> key, and then on the <b>Edit </b>menu, point to <b>New</b>, and click <b>Key</b>.<br><br></li>
<li>
Type the ProgID of your custom business object and click <b>Enter</b>. Leave the <b>Value</b> entry blank.</li>
</ol>
<H3><a name="adc_rn_sfs"></a>Marking Business Objects as &quot;Safe for Scripting&quot;</H3>
<p>To help ensure a secure Internet environment, you need to mark any <A HREF="def01_16.htm">business objects</a> instantiated with the <A HREF="ref01_24.htm"><b>RDS.DataSpace</b></a> object's <A HREF="ref01_25.htm"><b>CreateObject</b></a> method as &quot;safe for scripting.&quot; You need to ensure they are marked as such in the License area of the system registry before they can be used in <A HREF="dg01_1.htm#adc_dg_arch_mt_dcom">DCOM</a>.
<p>To manually mark your business object as safe for scripting, create a text file with a .reg extension that contains the following text shown in capitals. The following two numbers enable the safe-for-scripting feature:
<PRE>[HKEY_CLASSES_ROOT\CLSID\&lt;<i>MyActiveXGUID</i>&gt;\Implemented Categories\{7DD95801-9882-11CF-9FA9-00AA006C42C4}]

[HKEY_CLASSES_ROOT\CLSID\&lt;<i>MyActiveXGUID</i>&gt;\Implemented Categories\{7DD95802-9882-11CF-9FA9-00AA006C42C4}]</pre>
<p>where &lt;<i>MyActiveXGUID</i>&gt; is the hexadecimal GUID number of your business object. Save it and merge it into your registry by using the Registry Editor or double-clicking directly the .reg file in the Windows Explorer.
<p>Business objects created in Visual Basic&reg; 5.0 can be automatically marked as &quot;safe for scripting&quot; with the Application Setup Wizard. 
<p><img src="art/prcarrow.gif" border=0><b>&#09;To mark business objects safe for scripting in Visual Basic 5.0:</b>
<ol>
<li>
Start the Visual Basic 5.0 Application Setup Wizard.<br><br></li>
<li>
On step one, choose your project, and then click <b>Create Internet Download Setup</b>.<br><br></li>
<li>
On step four, click <b>Safety</b> and select <b>Safe for initialization </b>and <b>Safe for scripting</b>.<br><br></li>
<li>
On the last step, the Application Setup Wizard creates an .htm and a .cab file. You can then copy these two files to the target computer and double-click the .htm file to load the page and correctly register the server.<br><br></li>
<li>
Because the business object will be installed in the Windows\System32\Occache directory by default, you should move it to the Windows\System32 directory and change <b>HKEY_CLASSES_ROOT\CLSID\</b>&lt;<i>MyActiveXGUID</i>&gt;\<b>InprocServer32 </b>registry key to match the correct path.<br><br></li>
<li>
If you find that your business object isn't working at this point, check the .inf file that is included in the \Support directory under the Application Setup Wizard installation directory. It should contain <code>&quot;RegisterServer=yes&quot;</code> and the <code>[AddSafeToScript]</code> section.</li>
</ol>
<p><b>See Also</b>   The ActiveX SDK Web page at http://www.microsoft.com/intdev/sdk/ contains more information about this standard and how to implement it. The safe-for-scripting information is under the Signing/Marking Controls topic (signmark.htm).
<H3><a name="adc_rn_passingparameters"></a>Passing Parameters to Business Objects</H3>
<p>Remote Data Service 1.5 supports passing of parameters to and from business objects (ActiveX components) by reference. This allows your business object to modify a referenced input parameter and return it as an &quot;out&quot; parameter back to the client code. This parameter can be passed in addition to a return value allowed by a function.
<p>To use this feature, you need to be aware of how the business object accepts arguments so you can optimize the code for functionality and performance. If it is not important to return an extra output argument, you will want to specify that the method is accepting the argument by value. This is especially important in Microsoft Visual Basic because it accepts parameters by reference by default.
<p>The following is a Visual Basic example of how you can accept parameters &quot;by value&quot; and &quot;by reference&quot;:
<PRE>' This function returns one return value to the client.
Function TestByVal(ByVal arg1 As Variant) As Variant
  TestByVal = &quot;A copy of a new return value.&quot;
End Function

' This function returns one return value and 
' one out parameter to the client.
Function TestByRef(ByRef arg1 As Variant) As Variant
  arg1 = &quot;This value will be returned as an output parameter.&quot;
  TestByRef = &quot;A copy of a new return value.&quot;
End Function
</pre>
<p>You also need to pay attention to the data type of the ByRef arguments. For example, VBScript does not let you specify the variable type, so you will always be passing a Variant. When using HTTP, RDS will allow you to pass a Variant to a method that expects a non-Variant if you invoke it with the <b>CreateObject</b> method of the <b>RDS.DataSpace</b> object. When using DCOM or an in-process server, you will need to make sure you match the parameter types to be the same on each side or you will receive a &quot;Type Mismatch&quot; error.
<H3><a name="adc_rn_clientimpersonation"></a>Client Impersonation and Security</H3>
<p>If the Password Authentication property for your IIS Web server is set to Windows NT Challenge/Response, then business objects are invoked under the client's security context. This is a new feature in RDS 1.5 that allows Client Impersonation over HTTP. When working in this mode, the login to the Web server (IIS) is not anonymous but uses the user ID and password the client computer is running under. If the ODBC DSNs are set up to use Trusted Connection, then access to databases like SQL Server also happens under the client's security context. But this only works if the database is on the same computer as the IIS; the client credentials cannot be carried over to yet another computer.
<p>For example, a client, John Doe, with userid=&quot;JohnD&quot; and password=&quot;secret&quot; is logged on a client computer. He runs a browser-based application that needs to access the <b>RDSServer.DataFactory</b> object to create an <b>ADOR.Recordset</b> by executing a SQL Query on the &quot;MyServer&quot; computer running IIS. MyServer is set up to use &quot;Windows NT Challenge/Response&quot; for Password Authentication, its ODBC DSN has &quot;Use Trusted Connection&quot; checked, and the server also contains the SQL Server data source. When a request is received on the Web server, it asks the client for the user ID and password. Thus the request is logged on MyServer as coming from &quot;JohnD&quot;/&quot;Secret&quot; instead of IUSER_MyServer (which is the default when Anonymous Password Authentication is on). Similarly, when logging on to SQL Server, &quot;JohnD&quot;/&quot;Secret&quot; is used.
<p>Consequently, the IIS NT Challenge/Response authentication mode allows HTML pages to be created without the user being explicitly prompted for the user ID and password information needed to log on to the database. If the IIS Basic Authentication was being used, then this would be also be required.
<p><b>Password Authentication</b>
<p>RDS 1.5 can communicate with an IIS Web server running in any one of the three Password Authentication modes: Anonymous, Basic, or NT Challenge/Response. These settings define how a Web server controls access through it, such as requiring that a client computer have explicit access privileges on the NT Web server.
<H3><a name="adc_rn_csregistrydcom"></a>Client-side Registry Entries for Business Objects with DCOM</H3>
<p>Custom <A HREF="def01_16.htm">business objects</a> need to ensure that the client side can map their program name (ProgId) to an identifier (<A HREF="def01_19.htm">CLSID</a>) that can be used over <A HREF="dg01_1.htm#adc_dg_arch_mt_dcom">DCOM</a>. For this reason, the ProgID of the DCOM object must be in the client side registry and map to the class ID of the server-side business object. For the other supported protocols (HTTP, HTTPS, and in-process), this isn't necessary.
<p>For example, if you expose a server-side business object called MyBObj with a specific class ID, for instance, &quot;{00112233-4455-6677-8899-00AABBCCDDEE}&quot;, you should make sure the following entries are added to the client-side registry: 
<PRE>[HKEY_CLASSES_ROOT]<BR>\MyBObj<BR>&#09;\Clsid<BR>&#09;(Default) &quot;{00112233-4455-6677-8899-00AABBCCDDEE}&quot;</pre>
<H2><a name="admsctransportprotocols"></a>Transport Protocols</H2>
<p>When a <A HREF="def01_7.htm">client</a>-side <A HREF="def01_15.htm">component</a> invokes a server-side component, there are a number of ways that you can use to send the request. These include:
<ul>
<li>
<a href="#admschttphttpsprotocols">HTTP and HTTPS</a> protocols<br><br></li>
<li>
<a href="#admscdcomprotocol">DCOM</a> protocol<br><br></li>
<li>
<a href="#admscinprocprotocol">Running In-process</a></li>
</ul>
<p>When the client-side component and the server-side component reside on different computers (that is, you will use the HTTP, HTTPS, or DCOM protocol), a client-side <A HREF="def01_1.htm">proxy</a> must be created for each server-side business object <A HREF="def01_40.htm">stub</a> to ensure proper <A HREF="def01_27.htm">marshaling</a>. How the proxy is created depends on which protocol you are using. 
<H3><a name="admschttphttpsprotocols"></a>HTTP and HTTPS Protocols</H3>
<p>If you use the HTTP or HTTPS protocol, client-side components can't access remote server-side components directly. Therefore, Remote Data Service provides a proxy creation method (<A HREF="ref01_25.htm"><b>CreateObject</b></a>) on the client side. A business object proxy is created for every server-side <A HREF="dg01_1.htm#adc_dg_arch_mt_bo">business object</a> invoked from the client side. This RDS mechanism takes care of packaging and receiving remote application parts. This means that you don't have to write a lot of code to use custom business objects over HTTP or HTTPS. 
<p>Business object proxies are Automation objects and can be called from within Visual Basic&reg; and Visual C++&reg; applications, or any application that enables <A HREF="def01_41.htm">ActiveX™</a> technology. No type checking is done on the client side, instead RDS assumes that each method supports a variable number of variant arguments. An instance of the business object is created on the server-side only when the first method call is made, so no round trip is made just to instantiate the object. 
<p>When you use HTTP, the business object proxy packages and unpackages the parameters it sends and receives in <A HREF="def01_32.htm">MIME</a> format. Each argument is packaged into a separate MIME subpart. The proxy can handle all Automation data types and <b>ADODB.Recordset</b> and <b>ADOR.Recordset</b> objects. The proxy translates the method invocation into HTTP Post format, which it passes to the Advanced Data ISAPI DLL (ADISAPI) on the Web server.
<H3><a name="admscdcomprotocol"></a>DCOM Protocol</H3>
<p>You can also implement Remote Data Service applications on an intranet without using HTTP. If the client-side and server-side components are on different computers, you can use <A HREF="def01_20.htm">DCOM</a> to marshal the interfaces and method arguments across the network. When you do this, the business object proxies and ADISAPI components are replaced, respectively, by <A HREF="def01_34.htm">COM</a> proxies and stubs.
<H3><a name="admscinprocprotocol"></a>Running In-Process</H3>
<p>If your client-side and server-side components reside on the same computer, they can access each other directly. There is no need for a proxy-stub mechanism.
<H2><a name="admscconnectionpooling"></a>Connection Pooling</H2>
<p>To improve the speed with which you open <b>Recordset</b> objects and establish connections, use:
<ul>
<li>
<a href="#adc_rn_sqlconfig">The Connection Pooling options</a><br><br></li>
<li>
<a href="#admscusingmtsresdispensers">Microsoft Transaction Server resource dispensers</a></li>
</ul>
<H3><a name="adc_rn_sqlconfig"></a>The Connection Pooling Options</H3>
<p>If you're using an ODBC data source, you can use the Connection Pooling option in <A HREF="dg01_1.htm#adc_dg_arch_iis">Internet Information Server (IIS)</a> to achieve high performance handling of client load. Connection Pooling is a resource manager for connections, maintaining the open state on frequently used connections.
<p>To enable Connection Pooling, refer to the Internet Information Server documentation.
<p>Please note that enabling Connection Pooling may subject the <A HREF="def01_37.htm">Web server</a> to other restrictions, as noted in the Microsoft Internet Information Server documentation.
<p><a name="adc_rn_sqlstability"></a><b>Microsoft SQL Server — Performance and Stability with Connection Pooling</b>
<p>To ensure connection pooling is stable and provides additional performance gains, you must configure Microsoft SQL Server to use the TCP/IP Socket network library. 
<p>To do this, you need to:
<ul>
<li>
<a href="#admscslqservertcpip">Configure the SQL Server computer to use TCP/IP Sockets.</a><br><br></li>
<li>
<a href="#admscwebservertcpip">Configure the Web server to use TCP/IP Sockets.</a></li>
</ul>
<p><a name="admscslqservertcpip"></a><b>Configuring the SQL Server Computer to Use TCP/IP Sockets</b>
<p>On the SQL Server computer, run the SQL Server Setup program so that interactions with the data source use the TCP/IP Socket network library.
<p><img src="art/prcarrow.gif" border=0><b>&#09;To specify the TCP/IP Socket network library on the SQL Server computer</b>
<ol>
<li>
From the <b>Start</b> menu, point to <b>Programs</b>, point to <b>Microsoft SQL Server 6.5</b>, then click <b>SQL Setup</b>. <br><br></li>
<li>
Click <b>Continue</b> twice. The <b>Microsoft SQL Server 6.5 — Options</b> dialog box appears.<br><br></li>
<li>
Select <b>Change Network Support</b>, and click <b>Continue</b>.<br><br></li>
<li>
Make sure the <b>TCP/IP Sockets</b> check box is selected, and click <b>OK</b>.<br><br></li>
<li>
Click <b>Continue</b> to finish, and exit setup.</li>
</ol>
<p><a name="admscwebservertcpip"></a><b>Configuring the Web Server to Use TCP/IP Sockets</b>
<p>There are two options for configuring the Web server to use TCP/IP Sockets. What you do depends on whether:
<ul>
<li>
<a href="#admscallsqlservers">All SQL Servers are accessed from the Web server</a><p>–&nbsp;or&nbsp;–
</li>
<li>
<a href="#admscspecificsqlserver">Only a specific SQL Server is accessed from the Web server.</a></li>
</ul>
<p><a name="admscspecificsqlserver"></a>If all SQL Servers are accessed from the Web server, you need to run the SQL Server Client Configuration Utility on the Web server computer. The following steps change the default network library for all SQL Server connections made from this IIS Web server to use the TCP/IP Sockets network library.
<p><img src="art/prcarrow.gif" border=0><b>&#09;To configure the Web server (all SQL Servers)</b>
<ol>
<li>
From the <b>Start</b> menu, point to <b>Programs</b>, point to <b>Microsoft SQL Server 6.5</b>, and then click <b>SQL Client Configuration Utility</b>. <br><br></li>
<li>
Select the <b>Net Library </b>tab.<br><br></li>
<li>
In the <b>Default Network</b> box, select <b>TCP/IP Sockets</b>.<br><br></li>
<li>
Click <b>Done</b> to save changes and exit the utility.</li>
</ol>
<p><a name="admscallsqlservers"></a>If a specific SQL Server is accessed from a Web server, you need to run the SQL Server Client Configuration Utility on the Web server computer. To change the network library for a specific SQL Server connection, on the Web server computer, configure the SQL Server Client software as follows.
<p><img src="art/prcarrow.gif" border=0><b>&#09;To configure the Web server (a specific SQL Server)</b>
<ol>
<li>
From the <b>Start</b> menu, point to <b>Programs</b>, <b>Microsoft SQL Server 6.5</b>, and then click <b>SQL Client Configuration Utility</b>. <br><br></li>
<li>
Select the <b>Advanced </b>tab.<br><br></li>
<li>
In the <b>Server </b>box, type the name of the server to connect to using <b>TCP/IP Sockets</b>.<br><br></li>
<li>
In the <b>DLL Name</b> box, select <b>TCP/IP Sockets</b>.<br><br></li>
<li>
Click <b>Add/Modify</b>. All data sources pointing to this server will now use TCP/IP Sockets.<br><br></li>
<li>
Click <b>Done</b>.</li>
</ol>
<H3><a name="admscusingmtsresdispensers"></a>Microsoft Transaction Server Resource Dispensers</H3>
<p>In a three-tiered environment, clients can share database connections if you use Microsoft Transaction Server on the middle tier. You can use the <A HREF="ref01_20.htm"><b>RDSServer.DataFactory</b></a> object or create an ActiveX component DLL that can set up ODBC connections for clients to share; the sharing mechanism comes into play when you run the <b>RDSServer.DataFactory</b> or custom business object in the Transaction Server run-time environment. Instead of using thousands of database connections, you could get away with hundreds, still supporting thousands of clients. This is a feature of the ODBC resource dispenser in Microsoft Transaction Server.
<p><b>See Also</b>   For more information about using Transaction Server, see &quot;<a href="#admscrunningbusobjsinmts">Running Business Objects in Transaction Server</a>&quot; or visit the Transaction Server Web site (http://www.microsoft.com/transaction/).
<H2><a name="admscrunningbusobjsinmts"></a>Running Business Objects in Microsoft Transaction Server</H2>
<p>Business objects can be executable files (.exe) or dynamic-link libraries (.dll). The configuration you use to run the business object depends on whether the object is a .dll or .exe file:
<ul>
<li>
Business objects created as .exe files can be called through <A HREF="dg01_1.htm#adc_dg_arch_mt_dcom">DCOM</a>. If these business objects are used through <A HREF="dg01_1.htm#adc_dg_arch_iis">Internet Information Server (IIS)</a>, they are subject to additional <A HREF="def01_27.htm">marshaling</a> of data, which will slow client performance.<br><br></li>
<li>
Business objects created as .dll files can be used via IIS (and therefore HTTP), and over DCOM only via <A HREF="def01_21.htm">Microsoft&reg; Transaction Server</a>. Business object DLLs will need to be registered on the IIS computer to give you accessibility via IIS. The <A HREF="ref01_20.htm"><b>RDSServer.DataFactory</b></a> object is a DLL that is the default business object provided by Remote Data Service, and it is also subject to the conditions in this section. (For steps on how to configure a DLL to run on DCOM, see the next section, &quot;<a href="#adc_rn_dllmts">Enabling a DLL to Run on DCOM</a>.&quot;)</li>
</ul>
<p>By running the <b>RDSServer.DataFactory</b> object or your custom business object in the MTS run-time environment, you can also boost your performance and scalability by using the MTS resource dispenser. Because these business objects call ADO, which indirectly calls ODBC, you can take advantage of the MTS ODBC resource dispenser. 
<p>Resource dispensers automatically pool and recycle resources. Therefore, when <b>RDSServer.DataFactory</b> or your custom business object releases a database connection, the connection is returned to a pool. When a method is called to create a connection again, it requests the same database connection. Instead of creating a new connection, the ODBC resource dispenser recycles the pooled connection, which saves time and server resources.
<p><b>Note</b>   When business objects on the middle tier are implemented as Microsoft Transaction Server components (using <b>GetObjectContext</b>, <b>SetComplete</b>, and <b>SetAbort</b>), they can use Transaction Server context objects to maintain their state across multiple client calls. This scenario is possible with DCOM, which is typically implemented between trusted clients and servers (an intranet). In this case, the <b>RDS.DataSpace</b> object and <b>CreateObject</b> method on the client side are replaced by the transaction context object and <b>CreateInstance</b> method (provided by the <b>ITransactionContext </b>interface), implemented by Microsoft Transaction Server.
<H3><a name="adc_rn_dllmts"></a>Enabling a DLL to Run on DCOM</H3>
<p>The following steps outline how to enable a <A HREF="def01_16.htm">business object</a> <A HREF="def01_42.htm">DLL</a> to use both <A HREF="dg01_1.htm#adc_dg_arch_mt_dcom">DCOM</a> and <A HREF="dg01_1.htm#adc_dg_arch_iis">Internet Information Server</a> (HTTP) via <A HREF="def01_21.htm">Microsoft Transaction Server</a>. 
<ol>
<li>
Create a new empty package in the Transaction Server Explorer.<p>You will use the Transaction Server Explorer to create a package and add the DLL into this package. This makes the DLL accessible through DCOM, but it removes the accessibility through IIS. (If you check in the registry for the DLL, the <b>Inproc </b>key is now empty; setting the Activation attribute, explained later in this topic, adds a value in the <b>Inproc </b>key.)
</li>
<li>
Install a business object into the package.<p>-or-
<p>Import the <b>RDSServer.DataFactory</b> object into the package.
</li>
<li>
Set the Activation attribute for the component to <b>In the creator's process</b>.<p>To make the DLL accessible through DCOM and IIS on the same computer you must set the component's Activation attribute in the Microsoft Transaction Server Explorer. After you set the attribute to <b>In the creator's process</b>, you will notice that an <b>Inproc </b>server key in the registry has been added that points to a Microsoft Transaction Server surrogate DLL.
</li>
</ol>
<p><b>See Also</b>   For more information about Transaction Server and how to perform these steps, visit the Transaction Server Web site at http://www.microsoft.com/transaction/ or refer to the Microsoft Transaction Server documentation.
<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
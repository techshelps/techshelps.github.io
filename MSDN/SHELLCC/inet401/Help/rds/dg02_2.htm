<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Passing Updated Recordsets to the Middle Tier</TITLE>

<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME=MS-HKWD CONTENT="Passing Updated Recordsets to the Middle Tier">
<META NAME="Keywords" CONTENT="Remote Data Service">
<META NAME="Platform" CONTENT="Windows">
<META NAME="ROBOTS" CONTENT="all">

<!--@ SNIFF_START -->
<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../code/ver.js"></SCRIPT>
<!--@ SNIFF_END -->

<SCRIPT DEFER SRC="../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>

<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Microsoft Remote Data Service"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../art/headbare.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Microsoft Remote Data Service"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR>
<TR><TD><PRE><IMG SRC="../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" ID=TOC HREF="../contents.htm">Contents</A>  <IMG SRC="../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="../index.htm">Index</A>  <IMG SRC="../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="gs01.htm">Topic Contents</A>
</PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1><a name="adc_marshaladorclient_to_mid"></a>Passing Updated Recordset Objects to the Middle Tier</H1>
<p>You can pass updated <b>Recordset</b> objects from client computers to the middle tier and the database server by using:
<ul>
<li>
<a href="#admscusingadctopassrecordsetstomiddletier">The <b>RDS.DataControl</b> object.</a><br><br></li>
<li>
<a href="#admscusingadotopassrecordsetstomiddletier">ADO with a middle-tier custom business object.</a></li>
</ul>
<H2><a name="admscusingadctopassrecordsetstomiddletier"></a>Using RDS.DataControl to Pass Updated Disconnected Recordset Objects Back to the Middle Tier</H2>
<p>Data-bound controls enable the user to visually edit, add, or delete records. All changes by the user are stored locally until the user explicitly submits or cancels the update. 
<p>Typically, you will bind a grid control to an <A HREF="ref01_1.htm"><b>RDS.DataControl</b></a> object, and then add, edit, and delete records in the client-side <b>Recordset</b> via the user interface. After you update the client-side data, you need to save the changed information to the database by using the <A HREF="ref01_19.htm"><b>SubmitChanges</b></a> method with the <b>RDS.DataControl</b> object. The <b>SubmitChanges</b> method submits pending changes of the locally cached updatable <b>Recordset</b> to the OLE DB data source specified in the <b>RDS.DataControl</b> object's <A HREF="ref01_2.htm"><b>Connect</b></a> property.
<p>The following code example shows how to do this:
<PRE>Sub Update_OnClick
&#09;ADC1.SubmitChanges
End Sub
</pre>
<p>Only the changed records are sent for modification, and either all of the changes succeed or all of them fail together. 
<p>You can also include a Cancel button to cancel changes to the <b>Recordset</b>:
<PRE>Sub Cancel_OnClick
&#09;ADC1.CancelUpdate
End Sub
</pre>
<p><b>Notes</b>   
<ul>
<li>
The <b>Connect</b>, <A HREF="ref01_9.htm"><b>Server</b></a>, and <A HREF="ref01_12.htm"><b>SQL</b></a> properties must be set before you can use the <b>SubmitChanges</b> method with the <b>RDS.DataControl</b> object. These properties are used to reconnect to the data source.<br><br></li>
<li>
If you call the <A HREF="ref01_14.htm"><b>CancelUpdate</b></a> method after you have called <b>SubmitChanges</b> for the same <b>Recordset</b> object, the <b>CancelUpdate</b> call fails because the changes have already been committed. </li>
</ul>
<H3><a name="admscmultiuserissues"></a>Multiuser Issues and Record Locking</H3>
<p>Because users are working with disconnected <b>Recordset</b> objects on a client-side cache, there may be multiuser issues. For instance, when two different users try to update the same record, Remote Data Service simply allows the user who updates the record first to &quot;win.&quot; The second user's update request will fail with an error.
<H2><a name="admscusingadotopassrecordsetstomiddletier"></a>Using ADO to Pass Recordset Objects to the Middle Tier</H2>
<p>You can use the <b>ADOR.Recordset</b> object to <A HREF="def01_27.htm">marshal</a> <A HREF="def01_39.htm">recordsets</a> from a client Web page to a <A HREF="def01_6.htm">middle-tier</a> <A HREF="dg01_1.htm#adc_dg_arch_mt_bo">business object</a>. For example, suppose a user connects to a virtual shopping mall and selects a number of items to purchase. The selected items appear in the virtual shopping cart that is implemented with the <A HREF="ref01_1.htm"><b>RDS.DataControl</b></a> object and buffered in a rowset. When the client clicks the purchase button, an <b>ADOR.Recordset</b> object is created and passed to an application server as an input parameter to a business function (<code>ApplyUpdates</code>). This causes the <b>Recordset</b> to be marshaled across to the server. The <code>ApplyUpdates </code>business function then connects to the Sales database and applies the updates.
<PRE>' Code on a client Web page.
Sub PurchaseItem_OnClick
&#09;Set rst = ADC1.Recordset

&#09;' The following option tells the recordset to send 
&#09;' back changed records only when working with
&#09;' updates. 
&#09;' This makes the roundtrips more lightweight. 
&#09;' The value of 1 is the same as setting it to 
&#09;' adMarshalModifiedOnly.
&#09;rst.MarshalOptions = 1

&#09;' Call the ApplyUpdates function on the MyObj
&#09;' business object and pass the ADOR.Recordset
&#09;' object as an input parameter.
&#09;MyObj.ApplyUpdates rst

End Sub


' VB code in the business object.
' ApplyUpdates is a method in a 
' middle-tier business object. 
Sub ApplyUpdates(rst As ADOR.Recordset)

&#09;Dim rs As New ADODB.Recordset

&#09;rs.ActiveConnection =  _
&#09;&#09;&quot;DSN=SalesDB;UID=SMgr;PWD=password

&#09;rs.Open rso

&#09;' Call a method on the ADODB.Recordset to save
&#09;' updates.
&#09;rs.UpdateBatch

End Sub </pre>
<H2><a name="adc_rn_updates"></a>Database Updatability Features</H2>
<p><i>Updatability</i> is defined as being able to insert and delete records, and update the contents of one or more records.
<p>With Remote Data Service 1.5, you can update a number of databases, including Microsoft&reg; SQL Server, Microsoft Access, Oracle, and so forth. This is different from previous versions, which supported updatability only with SQL Server databases.
<p>The table being updated must contain a key or index column to specify record uniqueness.
<p>Updating in multi-table joins are supported in RDS version 1.5. The cursor engine allows arbitrarily complex inserts, updates, or deletes, requiring each base table to have a key field included in the projection to identify the row. It executes an appropriate update statement once for each base table. It has a property that allows you specify a DELETE followed by an INSERT rather than doing an UPDATE for update handling. 
<p>In general, avoid retrieving updatable <b>Recordset</b> objects that can contain duplicate records, because this can lead to data corruption. A status return code of DB_S_ERRORSOCCURED will occur if the WHERE clause identifies duplicate records. If this happens, then more columns should be added to the query so that uniqueness can be achieved. Computed fields, Long Binary fields, and Text fields aren't used in record identification for updating, so at least one column of another type should be included in the query.
<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
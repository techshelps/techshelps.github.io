<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Dynamic HTML</TITLE>

<META NAME=MS-HKWD CONTENT="Dynamic HTML">
<META NAME="Keywords" CONTENT="Dynamic HTML, DHTML, IE4, Internet Explorer 4.0">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT, Mac">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="dhtml_intro"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Dynamic HTML"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../art/headbara.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Dynamic HTML"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR>
<TR><TD><PRE><IMG SRC="../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_3" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Internet_Client_SDK>
</object><A STYLE="color:black" HREF=JavaScript:hhal_3.Click()>Topic Contents</A></PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="styles/styles.htm">Dynamic Styles</A></PRE></TD></TR>
</TABLE>
<!-- NAVLINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>Dynamic HTML</H1>

<P>Dynamic HTML is a set of innovative features in Microsoft&#174; Internet Explorer 4.0. By enabling authors to dynamically change the rendering and content of a document, Dynamic HTML gives authors the ability to create visually outstanding HTML documents that interact with the user without the burden of relying on server-side programs or complicated sets of HTML pages to achieve special effects.

<P>With Dynamic HTML, you can easily add effects to your documents that were previously difficult to achieve. For example, you can:

<UL>
<LI>Hide text and images in your document and keep this content hidden until a given time elapses or the user interacts with the page.
<LI>Animate text and images in your document, independently moving each element from any starting point to any ending point, following a path that you choose or that you let the user choose.
<LI>Create a ticker that automatically refreshes its content with the latest news, stock quotes, or other data.
<LI>Create a form, then instantly read, process, and respond to the data the user enters in the form.
</UL>

<P>Dynamic HTML achieves these effects by modifying the current document and automatically reformatting and redisplaying the document to show changes. It does not need to reload the document or load a new document, or require a distant server to generate new content. Instead, it uses the power of the user's computer to calculate and carry out changes. This means a user does not have to wait for text and data to complete time-consuming round-trips to and from a server before seeing results. Furthermore, Dynamic HTML does not require additional support from applications or embedded controls to carry out changes. Typically, Dynamic HTML documents are self-contained, using styles and a little script to process user input and directly manipulate the HTML tags, attributes, styles, and text in the document. 

<P>The HTML elements, attributes, and styles in Dynamic HTML are based on existing HTML and cascading style sheet (CSS) specifications. Users can view your documents whether they use Internet Explorer version 4.0 or some other browser. Naturally, the dynamic and interactive features that you add to your documents may not be fully functional when viewed with a browser that does not support Dynamic HTML. But Dynamic HTML is designed to "degrade gracefully"&#151;by following some basic guidelines, the content of your document can be viewable in other browsers.

<P>Dynamic HTML works well with applications, ActiveX&#153; Controls, and other embedded objects. You can use existing applications and controls, or you can create new ones that specifically take advantage of the features of Dynamic HTML. Applications and controls work best when you rely on them to do computationally difficult tasks, and use Dynamic HTML to display output and process user input. For example, you can create a document that lets the user query, display, and modify the content of a large, server-based database by combining the <A HREF="content/data_binding.htm#dhtml_databind">data binding</A> features of Dynamic HTML with a <A HREF="content/databind/architecture.htm#ch_databind_dso">data source object</A>. The data source object retrieves and sets data in a database, and Dynamic HTML does the rest: processing user queries, displaying the data, and carrying out the necessary interaction with the object.

<P>In short, Dynamic HTML eliminates the shortcomings of previous browser technologies. Authors can create innovative Web sites, whether on the Internet or an intranet, without having to sacrifice performance for interactivity and special effects. Not only does Dynamic HTML enhance the user's perception of your documents, it also improves server performance by reducing requests to the server and subsequently server load.

<P>The following topics explain Dynamic HTML in more detail and introduce you to the topics in this section that will help you begin using Dynamic HTML.

<UL>
<LI><A HREF="dhtml.htm#sec_styles">Dynamic Styles</A>
<LI><A HREF="dhtml.htm#sec_dcont">Dynamic Content</A>
<LI><A HREF="dhtml.htm#sec_pos">Positioning and Animation</A>
<LI><A HREF="dhtml.htm#sec_mm">Filters and Transitions</A>
<LI><A HREF="dhtml.htm#sec_font">Font Download</A>
<LI><A HREF="dhtml.htm#sec_data">Data Binding</A>
<LI><A HREF="dhtml.htm#sec_objectmodel">Dynamic HTML Object Model</A>
</UL>

<P>Microsoft is working with Internet standards bodies such as the W3C (World Wide Web Consortium) to provide the best standards-based solutions that make the Web a better open environment for building efficient and interactive multimedia content. Dynamic HTML represents the next step in that effort&#151;all the HTML and CSS extensions for Dynamic HTML conform to W3C specifications or have been submitted to the W3C for consideration. Microsoft will enhance future versions of Internet Explorer to conform to future specifications recommended by the W3C. 

<H2><A NAME="sec_styles">Dynamic Styles</A></H2>

<P>Dynamic styles are a key feature of Dynamic HTML. By using styles and style sheets, you can quickly change the appearance and formatting of elements in a document without adding or removing elements. This helps keep your documents small and the scripts that manipulate the document fast. 

<P>The object model gives you programmatic access to styles. This means you can change inline styles on individual elements and change style rules in a document's cascading style sheets (CSS) using simple script-based programming. These scripts can be written in JavaScript, JScript, or VBScript.

<P>Inline styles are CSS style assignments that have been applied to an element using the <A HREF="references/html/STYLE.htm#STYLE">STYLE</A> attribute. You can examine and set these styles by retrieving the <A HREF="references/objects/obj_style.htm#obj_style">style</A> object for an individual element. For example, if you want to highlight the text in a heading when the user moves the mouse over it, you can use the heading's inline style to enlarge the font and change its color, as in the following simple document.

<PRE>&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Dynamic Styles&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE="JScript"&gt;
function doChanges() {
    window.event.srcElement.style.color = "green";
    window.event.srcElement.style.fontSize = "20px";
}
&lt;/SCRIPT&gt;
&lt;BODY&gt;
&lt;H3 ID=heading onmouseover="doChanges()" STYLE="color:black;font-size:18"&gt;Welcome to Dynamic HTML!&lt;/H3&gt;
&lt;P&gt;You can do the most amazing things with the least bit of effort.
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../samples/dhtml/overview/intro_01.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P>In the above example, the process (also known as an <A HREF="doc_object/event_model.htm#dom_event">event handler</A>) that responds when the onscreen cursor moves over an HTML tag that contains a <A HREF="references/events/onmouseover.htm#onmouseover">onmouseover</A> statement receives control when the user first moves the mouse into the heading (known as an event). The handler uses the <A HREF="references/properties/srcElement.htm#srcElement">srcElement</A> property of the <A HREF="references/objects/obj_event.htm#obj_event">event</A> object to determine which element is the source of the event (in this case, the H3 element). It then uses the <A HREF="references/properties/color_0.htm#color_0">color</A> and <A HREF="references/properties/fontSize.htm#fontSize">fontSize</A> properties of the <A HREF="references/objects/obj_style.htm#obj_style">style</A> object for the element to change the color and font size. Setting these properties changes the CSS "color" and "font-size" attributes given in the <A HREF="references/html/STYLE.htm#STYLE">STYLE</A> attribute for the heading, and the browser immediately updates the onscreen text to show these new attribute values.

<P>By using styles, you can create a simple document, such as the following, in which all items in a bullet list are hidden until the user clicks the mouse. 

<PRE>&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Dynamic Styles&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE="JScript"&gt;
function showMe() {
    document.all.MyHeading.style.color = "red";
    document.all.MyList.style.display = "";
}
&lt;/SCRIPT&gt;
&lt;BODY onclick="showMe()"&gt;
&lt;H3 ID=MyHeading&gt;Welcome to Dynamic HTML!&lt;/H3&gt;
&lt;P&gt;You can do the most amazing things with the least bit of effort. Just click and see!
&lt;UL ID=MyList STYLE="display:none"&gt;
&lt;LI&gt;Change the color, size, and typeface of text
&lt;LI&gt;Show and hide text 
&lt;LI&gt;And much, much more
&lt;/UL&gt;
&lt;P&gt;And this is just the beginning!
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../samples/dhtml/overview/intro_02.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P>In the above example, the CSS <A HREF="references/css/display.htm#display">display</A> attribute is set to "none", causing the <A HREF="references/html/UL.htm#UL">UL</A> list to be hidden from view. When the user clicks the document, the event handler clears the value of this attribute, making the browser display the list onscreen. Notice how any content that comes after the list shifts down to accommodate the new text rendering. 

<P>Dynamic styles are based on the <A HREF="http://www.w3.org/pub/WWW/TR/REC-CSS1" TARGET="_top">W3C Recommendation for Cascading Style Sheets (CSS)</A> specification for static style sheets. For a list of topics that describe and explain dynamic styles in full detail, see <A HREF="styles/styles.htm#dhtml_styles">Dynamic Styles</A>.

<H2><A NAME="sec_dcont">Dynamic Content</A></H2>

<P>With Dynamic HTML, you can change the content of a document after it is loaded. Internet Explorer gives you a rich set of properties and methods to dynamically construct and alter documents, from inserting and deleting elements to modifying the text and attributes in individual elements. 

<P>The Dynamic HTML object model gives you access to all elements in the document. Consider the following simple document. You can replace and change elements as well as change colors and text by using a few lines of script. 

<PRE>&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Welcome!&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE="JScript"&gt;
function changeMe() {
    document.all.MyHeading.outerHTML = "&lt;H1 ID=MyHeading&gt;Dynamic HTML!&lt;/H1&gt;";
    document.all.MyHeading.style.color = "green";
    document.all.MyText.innerText = "You can do the most amazing things with the least bit of effort.";
    document.all.MyText.align = "center";
    document.body.insertAdjacentHTML("BeforeEnd", "&lt;P ALIGN=\"center\"&gt;Just give it a try!&lt;/P&gt;");
}
&lt;/SCRIPT&gt;
&lt;BODY onclick="changeMe()"&gt;
&lt;H3 ID=MyHeading&gt;Welcome to Dynamic HTML!&lt;/H3&gt;
&lt;P ID=MyText&gt;Click anywhere on this page.&lt;/P&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../samples/dhtml/overview/intro_03.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P>When the user clicks on the page above, the script replaces the <A HREF="references/objects/H3.htm#H3">H3</A> element with an <A HREF="references/objects/H1.htm#H1">H1</A> element, centers the paragraph, and inserts a new paragraph at the end of the document. Using script in this way, you can add, delete, and replace any elements and text in the document. 

<P>For a list of topics that describe and explain dynamic content in full detail, see <A HREF="content/content.htm#dhtml_content">Dynamic Content</A>.

<H2><A NAME="sec_pos">Positioning and Animation</A></H2>

<P>Positioning is the ability to place an HTML element at a specific point in a document by assigning an x- and y-coordinate and a z-plane to that element. This means you can place elements&#151;images, controls, and text&#151;exactly where you want them and achieve special, overlapping effects by defining in what order elements at the same point should be stacked atop one another. 

<P>Positioning is an extension of cascading style sheets. This means that you set the position of an element by setting the appropriate CSS attributes for that element. The following simple document shows how you can set the absolute position of an image. 

<PRE>&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Positioning&lt;/TITLE&gt;
&lt;BODY&gt;
&lt;H3&gt;Welcome to Dynamic HTML!&lt;/H3&gt;
&lt;P&gt;With positioning, you can place images exactly where you want them, even behind text and other images.
&lt;IMG STYLE="position:absolute;top:0; left:0; z-index:-1" SRC="banner.gif"&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../samples/dhtml/overview/intro_04.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P>In the above example, the image is placed at the top left corner of the document. Setting the <A HREF="references/css/z-index.htm#z_index">z-index</A> attribute to -1 causes the image to be placed behind the text on the page. 

<P>Internet Explorer 4.0 supports positioning and animation of elements even after a document has been loaded. Because the object model gives you access to styles and style sheets, you can set and change the position of an element as simply as you set and change its color. This makes it especially easy to change the position of elements based on how the user is viewing the document, and to even animate the elements. For animation, all you need is to slightly modify the position of an element on some interval. For example, the following document presents an image that glides across the top of the document and comes to rest at the upper-left corner. 

<PRE>&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Dynamic Positioning&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE="JScript"&gt;
var id;
function StartGlide()
{
    document.all.Banner.style.pixelLeft = 
        document.body.offsetWidth;
    document.all.Banner.style.visibility = "visible";
    id = window.setInterval("Glide()",50);
}
function Glide()
{
    document.all.Banner.style.pixelLeft -= 10;
    if (document.all.Banner.style.pixelLeft&lt;=0) {
        document.all.Banner.style.pixelLeft=0;
        window.clearInterval(id);
    }
}
&lt;/SCRIPT&gt;
&lt;BODY onload="StartGlide()"&gt;
&lt;H3&gt;Welcome to Dynamic HTML!&lt;/H3&gt;
&lt;P&gt;With dynamic positioning, you can move images anywhere in the document even while the user views the document.
&lt;IMG ID="Banner" STYLE="visibility:hidden;position:absolute;top:0; left:0; z-index:-1" SRC="banner.gif"&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../samples/dhtml/overview/intro_05.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P>In this example, the "StartGlide" function is called when the document is loaded. The function sets the absolute position of the "Banner" image to the top and far right edge of the document body, shows the image, and starts an interval. The "Glide" function is called repeatedly in 50-millisecond intervals. The function moves the image to the left by 10 pixels, and when the image is finally at the left edge, it cancels the interval. 

<P>Dynamic positioning has many uses in consumer and business applications. By combining dynamic styles, positioning, transparent images, and transparent ActiveX Controls, you can present a rich set of animation effects in your documents. 

<P>Dynamic positioning and animation is based on the <A HREF="http://www.w3.org/TR/WD-positioning-970131.html" TARGET="_top">W3C Working Draft on Positioning HTML with Cascading Style Sheets</A> and will be adapted as needed to conform to the final recommendation. Documents that use positioning will be compatible with browsers that support this standard. 

<P>For a list of topics that describe and explain CSS positioning in full detail, see <A HREF="content/positioning.htm#dhtml_positioning">Positioning</A>.

<H2><A NAME="sec_mm">Filters and Transitions</A></H2>

<P>Internet Explorer 4.0 supports an extensible architecture that enables you to specify filters and transitions using CSS properties. Visual filters can be used to apply visual effects to an element without requiring any scripts. The syntax is: 

<PRE>filter: filter_name( param1, param2, ...)
</PRE>

<P>Transitions are effects that can be applied when changing the display of an element&#151;switching from one image to another, for example. Both interpage transitions and transitions on specific elements within a page are supported. Transitions are most commonly seen in "slide show" presentations. Filters are effects (such as text drop shadows) that can be applied to content on Web pages. In addition to the set of standard filters and transitions included in Internet Explorer 4.0, the standard filters and transitions can be supplemented by additional third-party filters and transitions. For more information on filters, see <A HREF="content/filters.htm#CSS_Filters">Creating Multimedia Effects with Visual Filters and Transitions</A>.

<H2><A NAME="sec_font">Font Download</A></H2>

<P>Internet Explorer 4.0 supports the use of dynamically downloaded fonts. Using the @font-face style attribute, a document can reference a font that is automatically downloaded, used for the page only, and discarded once the page is no longer displayed. The following example shows the use of downloaded fonts. 

<PRE>&lt;HTML&gt;&lt;HEAD&gt;
&lt;STYLE&gt;@font-face {font-family:comic;0 src:url(http://abc.domain.com/fonts/comicbold.eot);}
&lt;/STYLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;p style="font-family:comic;font-size:18pt"&gt;this line uses the @font-face style element to display this text using the Comic Sans MS font in 18-point size and bold.
&lt;p&gt;
&lt;/BODY&gt;&lt;/HTML&gt;
</PRE>

<H2><A NAME="sec_data">Data Binding</A></H2>

<P>Data binding is a great feature of Dynamic HTML that lets you easily bind individual elements in your document to data from another source, such as a database or comma-delimited text file. When the document is loaded, the data is automatically retrieved from the source and formatted and displayed within the element. 

<P>One very practical way to use data binding is to automatically and dynamically generate tables in your document. You can do this by binding a <A HREF="references/html/TABLE.htm#TABLE">TABLE</A> element to a data source. When the document is viewed, a new row is created in the table for each record retrieved from the source, and the cells of each row are filled with text and data from the fields of the record. Because this generation is dynamic, the user can view the document even while new rows in the table are being created. Additionally, once all the table data is present, you can manipulate the data, such as sorting or filtering, without requiring the server to send additional data. The table is simply regenerated, using the previously retrieved data to fill the new rows and cells of the table. 

<P>Another practical use is to bind one or more elements in the document to specific fields of a given record. When the document is viewed, the elements are filled with text and data from the fields in that record, sometimes called the "current" record. A simple example is a form letter in which the name, e-mail address, and other details about an individual are filled from a database. To adapt the letter for a given individual, you simply specify which record should be the current record. No other changes to the letter are needed. 

<P>Yet another practical use is to bind the fields in a form to fields in a record. Not only can the user view the content of the record, but the user can also change that content by changing the settings and values of the form. The user can then submit these changes so that the new data is uploaded to the source&#151;for example, to the HTTP server or database. 

<P>To provide data binding in your documents, you must add a <A HREF="content/databind/architecture.htm#ch_databind_dso">data source object</A> to your document. This invisible object is simply an ActiveX control or Java applet that knows how to communicate with the data source. Microsoft provides two data source objects with Internet Explorer 4.0: one to access comma-delimited data in text files, and another to access SQL data in SQL Server and other ODBC sources. Additional data source objects, such as a JDBC data source, will also be available from Microsoft and third parties. 

<P>The following simple document shows how easy it is to bind to a data source. When viewed, this document displays the first three fields from all the comma-delimited records of the file "sampdata.csv" in a clear, easy-to-read table. 

<PRE>&lt;HTML&gt;
&lt;BODY&gt;
&lt;OBJECT CLASSID="clsid:333C7BC4-460F-11D0-BC04-0080C7055A83" ID=sampdata&gt;
   &lt;PARAM NAME="DataURL" VALUE="sampdata.csv"&gt;
   &lt;PARAM NAME="UseHeader" VALUE="True"&gt;
&lt;/OBJECT&gt;
&lt;TABLE BORDER=1 DATASRC="#sampdata"&gt;
&lt;THEAD&gt;
&lt;TR&gt;&lt;TH&gt;First Field&lt;TH&gt;Second Field&lt;TH&gt;Third Field
&lt;TBODY&gt;
&lt;TR&gt;&lt;TD&gt;&lt;SPAN DATAFLD=A&gt;&lt;/SPAN&gt;&lt;TD&gt;&lt;SPAN DATAFLD=B&gt;&lt;/SPAN&gt;&lt;TD&gt;&lt;SPAN DATAFLD=C&gt;&lt;/SPAN&gt;
&lt;/TABLE&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../samples/dhtml/overview/intro_07.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P>For a list of topics that describe and explain data binding in full detail, see <A HREF="content/data_binding.htm#dhtml_databind">Data Binding</A>.

<H2><A NAME="sec_objectmodel">Dynamic HTML Object Model</A></H2>

<P>The object model is the foundation of Dynamic HTML, providing the interface that allows scripts and components to access Dynamic HTML features. 

<P>Using the object model, you can access and manipulate virtually anything within the document. The HTML elements in the document are available as individual <A HREF="references/objects/objects.htm#om40_objects">objects</A>, meaning you can examine and modify an element and its attributes by reading and setting <A HREF="references/properties/properties.htm#om40_prop">properties</A> and by calling <A HREF="references/objects/objects.htm#om40_objects">methods</A>. The text is available through properties and methods on the elements. 

<P>The object model also makes user actions, such as pressing a key and clicking the mouse, available as events. You can intercept and process these and other events by creating event handler functions and routines. The event handler receives control each time a given event occurs and can carry out any appropriate action, including using the object model to change the document. 

<P>The following simple HTML document shows how you can use the object model to modify a document. This document changes the color of the heading and adds a line of text when the user clicks the mouse in the document. 

<PRE>&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Welcome!&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE="JScript"&gt;
function changeMe() {
    document.all.MyHeading.style.color = "green";
    document.all.MyText.innerText = "You can do the most amazing things with the least bit of effort.";
}
&lt;/SCRIPT&gt;
&lt;BODY onclick="changeMe()"&gt;
&lt;H3 ID=MyHeading&gt;Welcome to Dynamic HTML!&lt;/H3&gt;
&lt;P ID=MyText&gt;Click anywhere in this document.&lt;/P&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../samples/dhtml/overview/intro_08.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P>The example above contains an event handler, named "changeMe", that processes mouse clicks for the document. The handler uses the <A HREF="references/collections/all.htm#all">all</A> collection of the <A HREF="references/objects/obj_document.htm#obj_document">document</A> object to pick out the <A HREF="references/objects/H3.htm#H3">H3</A> and <A HREF="references/html/P.htm#P">P</A> elements using their ID values. It changes the color of the heading by setting the <A HREF="references/properties/color_0.htm#color_0">color</A> property of the <A HREF="references/properties/style_0.htm#style_0">style</A> object for that element. It replaces the text in the paragraph by setting the <A HREF="references/properties/innerText.htm#innerText">innerText</A> property. 

<P>The object model is a superset of the JavaScript object model found in Netscape Navigator. This means that portions of the model are compatible with other browsers, even if they do not support Dynamic HTML. By following basic guidelines, you can write scripts that take full advantage of the object model when run in Internet Explorer and that provide reasonable results when run in browsers that do not support Dynamic HTML.
 
<P>For lists of topics describing important aspects of the object model, see <A HREF="doc_object/windows_frames_dialogs.htm#dhtml_winframediag">Working with Windows, Frames, and Dialogs</A>, <A HREF="doc_object/scripting_elements_collections.htm#dhtml_elements">Scripting with Elements and Collections</A>, and <A HREF="doc_object/event_model.htm#dom_event">Understanding the Event Model</A>. 

<P>For a complete listing of the objects, properties, methods, collections, and methods of the object model, see <A HREF="references/dhtmlrefs.htm#dhtml_ref">DHTML References</A>.

<H2><A NAME="Recommended_Reading">Recommended Reading</A></H2>

<P>Dynamic HTML provides authors with total creative control over all aspects of an HTML document. It extends traditional HTML and cascading style sheets to let you access and manipulate all elements of a document&#151;tags, attributes, styles, images, objects, and text&#151;creating, moving, and modifying these elements when and as needed. 

<P>If you are not familiar with HTML, cascading style sheets, and scripting languages, you should review the following documents before creating your own Dynamic HTML pages.

<UL>
<LI><A HREF="http://www.w3.org/TR/REC-html32" TARGET="_top">HTML 3.2 Reference Specification</A>
<LI><A HREF="http://www.w3.org/pub/WWW/TR/REC-CSS1" TARGET="_top">W3C Recommendation for Cascading Style Sheets (CSS)</A>
<LI><A HREF="http://www.w3.org/TR/WD-positioning-970131.html" TARGET="_top">W3C Working Draft on Positioning HTML with Cascading Style Sheets</A>
<LI><A HREF="http://www.microsoft.com/vbscript/us/vbstutor/vbstutor.htm" TARGET="_top">VBScript Tutorial</A> &amp; <A HREF="http://www.microsoft.com/vbscript/us/vbslang/vbstoc.htm" TARGET="_top">VBScript Language Reference</A>
<LI><A HREF="http://www.microsoft.com/jscript/us/jstutor/jstutor.htm" TARGET="_top">JScript Tutorial</A> &amp; <A HREF="http://www.microsoft.com/jscript/us/jslang/jstoc.htm" TARGET="_top">JScript Language Reference</A>
</UL>
<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DHTML Object Model Support for Data Binding</TITLE>

<META NAME=MS-HKWD CONTENT="DHTML Object Model Support for Data Binding">
<META NAME="Keywords" CONTENT="Dynamic HTML, DHTML, IE4, Internet Explorer 4.0, dynamic content, data binding">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT, Mac">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="sec_dbind_object_model"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="DHTML Object Model Support for Data Binding"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../../art/headbara.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="DHTML Object Model Support for Data Binding"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR>
<TR><TD><PRE><IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="../data_binding.htm#dhtml_databind">Topic Contents</A></PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="dataconsumer.htm">Binding HTML Elements to Data</A>
<IMG SRC="../../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="events.htm">DHTML Event Model Support for Data Binding</A></PRE></TD></TR>
</TABLE>
<!-- NAVLINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>DHTML Object Model Support for Data Binding</H1>
<BR CLEAR=ALL>
<P>In Internet Explorer 4.0, elements are exposed to scripts as objects. The attributes supported by those elements are exposed as properties. Just as a user can perform actions on most elements (clicking a button for example), scripts can call methods of the corresponding object. Scripts can also customize the behavior of elements by handling the events exposed by the corresponding object.

<P>Web authors can achieve dramatic effects on their data bound pages by adding simple scripts that manipulate the properties, methods, and events exposed by the document object model. The document object model supports the following capabilities at run time:

<P><A CLASS=tctop HREF="objmodel.htm#Modifying_the_Bindin"><IMG SRC="../../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">Modifying the Binding of Elements to Data</A><BR>
<P><A CLASS=tctop HREF="objmodel.htm#ch_dbind_tabular_runtime"><IMG SRC="../../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">Binding a Table at Run Time</A><BR>
<P><A CLASS=tctop HREF="objmodel.htm#Dynamically_Adding_B"><IMG SRC="../../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">Dynamically Adding Bound Elements and Data Providers</A><BR>
<P><A CLASS=tctop HREF="objmodel.htm#Dynamically_Changing"><IMG SRC="../../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">Dynamically Changing the Way Elements Render Data</A><BR>
<P><A CLASS=tctop HREF="objmodel.htm#Dynamically_Controll"><IMG SRC="../../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">Dynamically Controlling the Amount of Displayed Data</A><BR>
<P><A CLASS=tctop HREF="objmodel.htm#Manipulating_Data_wi"><IMG SRC="../../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">Manipulating Data with Active Data Objects (ADO)</A><BR>
<P>This section discusses how to use these features. Because the event model exposed by the document object model for data binding is so extensive, it is treated in a separate section <A HREF="events.htm#ch_databind_events">below</A>.

<H2><A NAME="Modifying_the_Bindin">Modifying the Binding of Elements to Data</A></H2>
<P>The DATASRC and DATAFLD attributes, introduced <A HREF="architecture.htm#ch_databind_extensions">above</A>, allow an author to bind an HTML element to data. The document object model exposes these attributes as the properties <A HREF="../../references/properties/dataSrc.htm#dataSrc">dataSrc</A> and <A HREF="../../references/properties/dataFld.htm#dataFld">dataFld</A>, and their values can be modified at any time through scripts.

<P>Web authors may want to perform the following operations on elements that support data binding:

<UL>
<LI><A HREF="objmodel.htm#dynbind_add">Add a binding to an unbound element</A>
<LI><A HREF="objmodel.htm#dynbind_remove">Remove a binding from a currently bound element</A>
<LI><A HREF="objmodel.htm#dynbind_modify">Change the current binding of an element</A>
</UL>

<P>The following sections assume that the element is not serving as a template element in a repeated table scenario. Dynamic tabular binding is discussed <A HREF="objmodel.htm#ch_dbind_tabular_runtime">below</A>.

<H3><A NAME="dynbind_add">Adding a binding to a single-valued element at run time</A></H3>
<P>Given an <A HREF="dataconsumer.htm#chp_databind_supported_elements">element that supports data binding</A>, such as a SPAN or TEXTAREA, adding a binding is as simple as setting the <A HREF="../../references/properties/dataSrc.htm#dataSrc">dataSrc</A> and <A HREF="../../references/properties/dataFld.htm#dataFld">dataFld</A> properties of that element. For example, to bind a span with ID <B>span1</B> to the first name field in a data set provided by a DSO with id <B>dsoComposer</B>, use the following script:

<PRE>span1.dataSrc = "#dsoComposer";
span1.dataFld = "compsr_first";
</PRE>

<P>The same binding can be accomplished at design time using the following HTML code:

<PRE>&lt;SPAN DATASRC="#dsoComposer" DATAFLD="compsr_first"&gt;&lt;/SPAN&gt;
</PRE>

<P>In both cases <B>compsr_first</B> is the name of an actual field in the data set. The binding will not occur until both properties are set, and any prior value stored by the element will be lost. If the value is required at a later time, for example when the binding is removed, the page author must cache the value prior to binding the element.

<P>Click the Show Me button to see an example.


<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../../samples/databind/dbaddsv.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><H3><A NAME="dynbind_remove">Removing the binding from a bound element</A></H3>
<P>To remove the binding from a currently bound element, simply set the <A HREF="../../references/properties/dataSrc.htm#dataSrc">dataSrc</A> and <A HREF="../../references/properties/dataFld.htm#dataFld">dataFld</A> properties to the empty string. For example: 

<PRE>span1.dataSrc = "";
span1.dataFld = "";
</PRE>

<P>The previous Show Me button demonstrates this behavior.

<H3><A NAME="dynbind_modify">Modifying the binding of a single-valued element at run time</A></H3>
<P>Modifying an existing binding is similar to <A HREF="objmodel.htm#dynbind_add">binding an unbound element</A>. Two cases are described: 

<UL>
<LI>Binding an element to another field within the same data set.
<LI>Binding an element to another field in another data set.
</UL>

<P>To bind an element to another field in the same data set, modify the <A HREF="../../references/properties/dataFld.htm#dataFld">dataFld</A> property. For example, given a SPAN with ID <B>span1</B> that is currently bound to a composer's first name, the following code binds the SPAN to the composer's last name.

<PRE>span1.dataFld = "compsr_last";
</PRE>

<P>To bind an element to a field in a different data set: 
<UL>
<LI>Set the value of the <A HREF="../../references/properties/dataSrc.htm#dataSrc">dataSrc</A> property to the DSO that provides the data.
<LI>Set the value of the <A HREF="../../references/properties/dataFld.htm#dataFld">dataFld</A> property for the element if the name of the field in the data set provided by the DSO is different than that of previous the DSO. 
</UL>
<H2><A NAME="ch_dbind_tabular_runtime">Binding a Table at Run Time</A></H2>
<P>The section on <A HREF="dataconsumer.htm#ch_dataconsumer">Binding HTML Elements to Data</A> explained how to <A HREF="dataconsumer.htm#ch_dataconsumer_tablebinding">bind a table to data at design time</A>. Binding a table at run time requires three steps:
<OL><LI>If the table is already bound to a data source, it must be unbound by setting the <A HREF="../../references/properties/dataSrc.htm#dataSrc">dataSrc</A> property of the corresponding table object to the empty string.
<LI>Modify the bindings of the template elements contained by the table by setting the <A HREF="../../references/properties/dataFld.htm#dataFld">dataFld</A> property of the corresponding objects.
<LI>Bind the table to the appropriate data source by setting the <A HREF="../../references/properties/dataSrc.htm#dataSrc">dataSrc</A> property of the corresponding table object. 
</OL>
<P>Note that modifying the bindings of any of the individual elements contained within a table requires that the entire table be unbound and then rebound to the DSO. This is necessary because while the table is bound, changes to elements inside the table are applied to the generated rows. Changes while the table is unbound affect the template.

Click the Show Me button to see an example that modifies the binding at run time.


<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../../samples/databind/dbdyntab.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><PRE>&lt;SCRIPT FOR=cboField EVENT=onchange&gt;
    cDSO = tblComposers.dataSrc; // remember the DSO
    tblComposers.dataSrc = ""; // unbind the table

    // set the binding for the contained element
    spanField.dataFld = this.options(this.selectedIndex).value;

    tblComposers.dataSrc = cDSO; // rebind the table
&lt;/SCRIPT&gt;

&lt;TABLE ID=tblComposers DATASRC=#dsoComposers&gt;
    &lt;THEAD&gt;&lt;TR STYLE="font-weight:bold"&gt;
        &lt;TD&gt;Last Name&lt;/TD&gt;
        &lt;TD&gt;&lt;SELECT ID=cboField&gt;
            &lt;OPTION VALUE=compsr_first SELECTED&gt;First Name&lt;/OPTION&gt;
            &lt;OPTION VALUE=compsr_last&gt;Last Name&lt;/OPTION&gt;
            &lt;OPTION VALUE=compsr_birth&gt;Date of Birth&lt;/OPTION&gt;
            &lt;OPTION VALUE=compsr_death&gt;Date of Death&lt;/OPTION&gt;
            &lt;OPTION VALUE=origin&gt;Origin
           &lt;/SELECT&gt;
         &lt;/TD&gt;
    &lt;/TR&gt;&lt;/THEAD&gt;
    &lt;TR&gt;
        &lt;TD&gt;&lt;SPAN DATAFLD=compsr_Last&gt;&lt;/SPAN&gt;&lt;/TD&gt;
        &lt;TD&gt;&lt;SPAN ID=spanField DATAFLD=compsr_first&gt;&lt;/SPAN&gt;&lt;/TD&gt;
    &lt;/TR&gt;
&lt;/TABLE&gt;
</PRE>

<P>This example uses the drop-down list to dynamically set the binding of the second column of the table. When a value is selected in the drop-down list, the <A HREF="../../references/events/onchange.htm#onchange">onchange</A> event handler stores the table's previous binding in a temporary variable. It then unbinds the table by setting its <A HREF="../../references/properties/dataSrc.htm#dataSrc">dataSrc</A> property to the empty string. Finally, the code rebinds the table to the DSO by setting the <B>dataSrc</B> property to the previous value.


<H2><A NAME="Dynamically_Adding_B">Dynamically Adding Bound Elements and Data Providers</A></H2>
<P>In addition to modifying the bindings of existing elements on the page, the document object model supports the dynamic addition of both data bound elements and data source objects at run time. By adding these elements at run time, Web authors can reduce the initial download time of their content and can use a single page to display various sets of data to the user.

<P>Click the Show Me button to see an example that dynamically adds a data source object and bound elements to the page.


<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../../samples/databind/dbfly.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><H2><A NAME="Dynamically_Changing">Dynamically Changing the Way Elements Render Data</A></H2>
<P>The DATAFORMATAS attribute, introduced <A HREF="architecture.htm#ch_databind_extensions">above</A>, allows an author to change the way an element renders its data. The document object model exposes the <A HREF="../../references/properties/dataFormatAs.htm#dataFormatAs">dataFormatAs</A> property on <A HREF="dataconsumer.htm#chp_databind_supported_elements">elements that support rendering</A> in formats other than text. Click the Show Me button to see how it works.


<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../../samples/databind/dbfmtfly.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><H2><A NAME="Dynamically_Controll">Dynamically Controlling the Amount of Displayed Data</A></H2>
<P>The DATAPAGESIZE attribute introduced <A HREF="architecture.htm#chp_databind_datapagesize">above</A> allows an author to restrict the number of records displayed by a tabular data consumer. The document object model exposes this attribute as the property <A HREF="../../references/properties/dataPageSize.htm#dataPageSize">dataPageSize</A>, and its value can be modified at any time through scripts. In addition, the page author can control the currently viewed page of records displayed by a tabular consumer using the <A HREF="../../references/methods/nextPage.htm#nextPage">nextPage</A> and <A HREF="../../references/methods/previousPage.htm#previousPage">previousPage</A> methods.

<P>Click the Show Me button to see how the <A HREF="../../references/properties/dataPageSize.htm#dataPageSize">dataPageSize</A> property and accompanying methods work on a TABLE, a tabular data consumer.


<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../../samples/databind/dbpage.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><H2><A NAME="Manipulating_Data_wi">Manipulating Data with Active Data Objects (ADO)</A></H2>
<P>Previous sections have shown how to use HTML elements to bind and display the data provided by a DSO. Independent of the user interface, scripts can access and manipulate the data provided by a DSO in a consistent manner using the ADO recordset object. The recordset object is exposed by all data source objects through the extended <A HREF="../../references/properties/recordset.htm#recordset">recordset</A> property.

<P>Scripting the ADO recordset object, Web authors can add rich functionality to their pages, including: 

<UL>
<LI><A HREF="objmodel.htm#ch_databind_navigate">Navigation</A>
<LI><A HREF="objmodel.htm#ch_databind_modify">Insertion, deletion, and update of records</A>
</UL>

<P>For complete information on ADO, see the accompanying
<object id="hhal_3" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_ADO_Overview>
</object><A HREF=JavaScript:hhal_3.Click()>Active Data Objects documentation</A>.

<H3><A NAME="Accessing_the_ADO_re">Accessing the ADO recordset object from script</A></H3>
<P>Given a reference to a data source object, accessing the ADO recordset is easy. The following code sample assumes that <B>dsoComposer</B> is a valid DSO.
 
<PRE>var oRecordSet = dsoComposer.recordset;
</PRE>

<P>When using a case-sensitive scripting language such as JScript, observe that the <A HREF="../../references/properties/recordset.htm#recordset">recordset</A> property is completely lowercase.

<H3><A NAME="ch_databind_navigate">Navigating through a data set</A></H3>
<P>Data binding in Internet Explorer 4.0 uses the notion of a current record to indicate the record in a data set to be displayed by single-valued consumers. When a data set is first loaded, the first record is typically identified as the current record. The current record is affected by any filter or sort order applied to the data. Single-valued consumers always display the current record.

<P>To change the current record and hence the data displayed by single-valued consumers, Web authors can provide users with a set of navigation buttons like the ones shown below.


<P><INPUT ID=cmdNavFirst TYPE=BUTTON VALUE="<<" TITLE="Move to the first record">
<INPUT ID=cmdNavPrev TYPE=BUTTON VALUE=" < " TITLE="Move to the previous record">
<INPUT ID=cmdNavNext TYPE=BUTTON VALUE=" > " TITLE="Move to the next record">
<INPUT ID=cmdNavLast TYPE=BUTTON VALUE=">>" TITLE="Move to the last record">
<BR CLEAR=ALL><P>The code behind these buttons calls the <B>MoveFirst</B>, <B>MovePrevious</B>, <B>MoveNext</B>, and <B>MoveLast</B> methods on the ADO recordset, respectively.

<PRE>&lt;INPUT ID=cmdNavFirst TYPE=BUTTON VALUE="&lt;&lt;" 
    onclick="tdcComposers.recordset.MoveFirst()"&gt;

&lt;INPUT ID=cmdNavPrev TYPE=BUTTON VALUE=" &lt; " 
    onclick="tdcComposers.recordset.MovePrevious();
    if (tdcComposers.recordset.BOF)
        tdcComposers.recordset.MoveFirst();"&gt;

&lt;INPUT ID=cmdNavNext TYPE=BUTTON VALUE=" &gt; " 
    onclick="tdcComposers.recordset.MoveNext();
        if (tdcComposers.recordset.EOF)
            tdcComposers.recordset.MoveLast();"&gt;

&lt;INPUT ID=cmdNavLast TYPE=BUTTON VALUE="&gt;&gt;" 
    onclick="tdcComposers.recordset.MoveLast()"&gt;
</PRE>

<P><B>Using the recordNumber property</B>
<P>If a page displays both single-valued and tabular data consumers on the page, the Web author can add functionality so that when the user clicks a row in the table, the current record and single-valued consumers are set to display the selected row. Likewise, when the user clicks navigation buttons on the page, the table can be synchronized to indicate the currently selected record. Click the Show Me button to see how it works.


<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../../samples/databind/dbrecnum.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P>The script behind the example uses the <A HREF="../../references/properties/recordNumber.htm#recordNumber">recordNumber</A> property available on all repeated elements within a data bound table. This includes both bound and unbound elements. The property returns the number of the record displayed by the table row. In the example, when the user clicks any element within a table row, the click-handling code sets the <B>AbsolutePosition</B> property of the ADO recordset to the value of that element's <B>recordNumber</B> property.

<P>In turn, if the user clicks a navigation button, the appropriate <B>Move</B> method is called on the ADO recordset. Then the highlighted row in the table is updated by searching for the table row with the <A HREF="../../references/properties/recordNumber.htm#recordNumber">recordNumber</A> that corresponds to the value of the <B>AbsolutePosition</B> property on the ADO recordset. Once found, the background color of the table row is set to yellow.

<H3><A NAME="ch_databind_modify">Adding, deleting, and modifying records in a data set</A></H3>
<P>To support the addition and deletion of records from a recordset, the ADO recordset object supports both <B>AddNew</B> and
<object id="hhal_4" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Command_Identifiers>
</object><A HREF=JavaScript:hhal_4.Click()>Delete</A> methods. When <B>AddNew</B> is called from a script, the DSO adds a new record to the locally cached data set. When <B>Delete</B> is called, the current record is removed from the local data cache. 

<P>Bound elements are immediately updated to reflect the addition, removal, and modification of records through scripts. If the current record is removed, single-valued elements are updated to display the next record in the data set. If the last record in the data set is deleted, the previous record is displayed. Tabular data consumers are updated to no longer display the deleted record.

<P>It is important to distinguish between operations that are performed on the local data cache and those that affect the back-end data set. While the TDC, for example, supports the modification of data in the local cache, it does not support committing those changes to the file from which the data was obtained. In contrast, the
<object id="hhal_5" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Microsoft_Remote_Data_Service>
</object><A HREF=JavaScript:hhal_5.Click()>Remote Data Service (RDS)</A> does support this feature.

<P>Click the Show Me button to see an example that exercises the ADO object model to insert, delete, and update records in the local data cache.


<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../../samples/databind/dbupdate.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
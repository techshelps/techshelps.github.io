<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DHTML Event Model Support for Data Binding</TITLE>

<META NAME=MS-HKWD CONTENT="DHTML Event Model Support for Data Binding">
<META NAME="Keywords" CONTENT="Dynamic HTML, DHTML, IE4, Internet Explorer 4.0, dynamic content, data binding">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT, Mac">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="ch_databind_events"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="DHTML Event Model Support for Data Binding"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../../art/headbara.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="DHTML Event Model Support for Data Binding"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR>
<TR><TD><PRE><IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="../data_binding.htm#dhtml_databind">Topic Contents</A></PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="objmodel.htm">DHTML Object Model Support for Data Binding</A>
<IMG SRC="../../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="../../doc_object/doc_object.htm">Document Object Model</A></PRE></TD></TR>
</TABLE>
<!-- NAVLINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>DHTML Event Model Support for Data Binding</H1>
<BR CLEAR=ALL>
<P>The document object model exposes an extensive set of <A HREF="../../doc_object/event_model.htm#dom_event">scriptable events</A> that Web authors can use to customize the behavior of objects on an HTML page. The data binding architecture leverages this model by exposing an additional set of events that are of interest to authors creating data-driven pages. These events fall into three categories:

<UL>
<LI><A HREF="events.htm#ch_dbind_events_dso">Those that apply to the data source object</A>
<LI><A HREF="events.htm#ch_dbind_events_elems">Those that apply to the bound elements</A>
<LI><A HREF="events.htm#ch_dbind_events_page">Those that apply to the page</A>
</UL>

<P>Web authors handle these events to maintain a finer grain of control over the page, especially those that support update. Events occur as the data is loaded and is manipulated by the DSO, as the user interacts with the data, and as the page unloads. The events allow the Web author to monitor changes in the state of the DSO, to perform field and record-level validation, and to execute cleanup processing as the page is unloaded.


<OBJECT id=tdcEvents CLASSID="clsid:333C7BC4-460F-11D0-BC04-0080C7055A83">
	<PARAM NAME="DataURL" VALUE="../../../../samples/databind/dbevents.csv">								  
	<PARAM NAME="UseHeader" VALUE="True">
	<PARAM NAME="TextQualifier" VALUE="'">
</OBJECT>
<BR CLEAR=ALL><P>The following table provides a quick reference on the events that are relevant to data binding; more detailed descriptions follow. For an overview on how to handle events in the document object model, see <A HREF="../../doc_object/event_model.htm#dom_event">Understanding the Event Model</A>.


<SCRIPT FOR=cboFilterEvents EVENT=onchange>
   var oElement = window.event.srcElement;
   var cValue = this.options(this.selectedIndex).value
   if (cValue == "all")
   {
      tdcEvents.object.Filter = "";
   }
   else if (cValue == "dso")
   {
     tdcEvents.object.Filter = 'applies="DSO"';
   }
   else if (cValue == "elements")
   {
     tdcEvents.object.Filter = 'applies="bound elements"';
   }
   else
   {
     tdcEvents.object.Filter = cValue + "=True";
   }
   tdcEvents.Reset();
</SCRIPT>

<P><SELECT ID=cboFilterEvents>
<OPTION VALUE=all SELECTED>All Events Relevant to Databinding
<OPTION VALUE=bubbles>Databinding Events that Bubble
<OPTION VALUE=cancancel>Databinding Events that are Canceleable 
<OPTION VALUE=dso>Databinding Events that Apply to a DSO
<OPTION VALUE=elements>Databinding Events that Apply to Bound Elements
</SELECT>

<TABLE BORDER=1 datasrc=#tdcEvents>
<THEAD><TR STYLE="font-size:12">
   <TH>Event</TH><TH>Bubbles</TH><TH>Canceleable</TH><TH>Applies To</TH>
   </TR></THEAD>
<TBODY>
<TR STYLE="font-size:12">
   <TD onmouseover="this.style.fontStyle='italic'" onmouseout="this.style.fontStyle=''">
      <DIV datafld=event></DIV>
   </TD>
   <TD><DIV datafld=bubbles></DIV></TD>
   <TD><DIV datafld=cancancel></DIV></TD>
   <TD><DIV datafld=applies></DIV></TD></TR>
</TBODY>
</TABLE>
<BR CLEAR=ALL><P>The Bubbles column indicates whether or not the <A HREF="../../doc_object/event_model.htm#dom_event_bubbling">event bubbles</A> up the containment hierarchy. Most data-related events bubble. The <A HREF="../../references/events/onbeforeunload.htm#onbeforeunload">onbeforeunload</A> event does not bubble because it fires on the window object, which is at the top of the containment hierarchy. 

<P>The Canceleable column indicates whether the default action associated with the event can be <A HREF="../../doc_object/event_model.htm#dom_event_canceling">canceled</A>. The <A HREF="../../references/events/onbeforeupdate.htm#onbeforeupdate">onbeforeupdate</A> event, for example, can be canceled to allow the author to prevent the field to which a consumer is bound from being updated. The <A HREF="../../references/events/onafterupdate.htm#onafterupdate">onafterupdate</A> event cannot be canceled because the update has already occurred by the time the event fires. It would not have fired had the author canceled the <B>onbeforeupdate</B> event.

<P>The Applies To column indicates the type of element from which the event originates. Bound elements are elements on the page that consume data from a DSO. DSO is any object or application that conforms to the <A HREF="../../../itt/databind/simpletabulardata.htm#chp_osp">specification for data source objects</A>.

<H2><A NAME="ch_dbind_events_dso">Events That Apply to the DSO</A></H2>
<P>The DSO sends notifications when the data set has changed, as data becomes available, when the data is completely available, and before and after a record supplied by the DSO is committed to the data cache.

<H3><A NAME="ondatasetchanged">ondatasetchanged</A></H3>
<P>The <A HREF="../../references/events/ondatasetchanged.htm#ondatasetchanged">ondatasetchanged</A> event fires under two circumstances:
<UL>
<LI>After a new data set is requested.
<LI>When the current data set has been altered (for example, filtered or sorted).
</UL>

<P>When the event occurs, data may not be available, but the recordset can be used to obtain the metadata for the data set. Metadata includes the list of fields and their types. Web authors can create truly dynamic pages using metadata.

<P>The following example code adds the list of fields provided by a DSO to a drop-down list, cboSort. When the user selects an item in the drop-down list, the data is sorted by the selected field.

<P>This code handles the <B>ondatasetchanged</B> event for the DSO name <B>dsoComposers</B>.

<PRE>&lt;SCRIPT FOR=dsoComposers EVENT=ondatasetchanged&gt;
    FillSortDropDownWithFields(cboSort, this.recordset);
&lt;/SCRIPT&gt;
</PRE>

<P>The following code loops through the collection of fields provided by the ADO recordset and adds each field name to the <A HREF="../../references/collections/options.htm#options">options</A> collection.

<PRE>&lt;SCRIPT&gt;
// Add specified value/text to the dropdown list
function AddItemToDropDown(oDropDown, cValue, cText)
{
    oOption = document.createElement('OPTION');
    oOption.value = cValue;
    oOption.text = cText;&#009;
    oDropDown.add(oOption);
}

// Fill dropdown with field names from the ADO RecordSet
function FillSortDropDownWithFields(oDropDown, oRecordSet)
{
// only fill once or let the caller clear list first
    if (oDropDown.options.length &gt; 0)
        return;

    AddItemToDropDown(oDropDown, "None", "None"); // default
    // add each of the columns in the data set to the drop-down
    for (i = 0; i &lt; oRecordSet.fields.count; i++)
    {
        oField = oRecordSet.fields(i);
        AddItemToDropDown(oDropDown, oField.name, oField.name); 
    }
    cboSort.selectedIndex = 0;
}
&lt;/SCRIPT&gt;
</PRE>

<P>When the user selects an item from the drop-down list, the following code sets the DSO sort property equal to the appropriate filter or to the empty string if "None" was selected. Note that while the previous code samples work with any DSO, the following code is specific to the Tabular Data Control (TDC).

<PRE>&lt;SCRIPT FOR=cboSort EVENT=onchange&gt;
    cValue = this.options[this.selectedIndex].value;
    tdcComposers.object.Sort = (cValue == 'None' ? '' : cValue);
    tdcComposers.Reset();
&lt;/SCRIPT&gt;
</PRE>
<H3><A NAME="ondataavailable">ondataavailable</A></H3>
<P>DSOs typically fire the <A HREF="../../references/events/ondataavailable.htm#ondataavailable">ondataavailable</A> event when they provide their data asynchronously, indicating that additional records are accessible. Web authors should not rely upon this event to fire but might instead use it to indicate progress to the user. The event may fire zero or more times.

<H3><A NAME="ondatasetcomplete">ondatasetcomplete</A></H3>
<P>The <A HREF="../../references/events/ondatasetcomplete.htm#ondatasetcomplete">ondatasetcomplete</A> event fires when a DSO has cached all its data on the client. The <A HREF="../../references/properties/reason.htm#reason">reason</A> property of the <A HREF="../../references/objects/obj_event.htm#obj_event">event</A> object indicates success (0), abort (1), or failure (2) of the download. A failure might result from an error or from an explicit user action, such as clicking the Stop button. If <B>reason</B> indicates success, all the data is programmatically accessible through the
<object id="hhal_3" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_ADO_Overview>
</object><A HREF=JavaScript:hhal_3.Click()>ADO Recordset</A> object.

<H3><A NAME="onreadystatechange">onreadystatechange</A></H3>
<P>While <A HREF="../../references/events/onreadystatechange.htm#onreadystatechange">onreadystatechange</A> is not specific to a DSO, understanding the state of an object can be useful. When this event fires, the event-handling code can retrieve the current value of the <A HREF="../../references/properties/readyState.htm#readyState">readyState</A> property. It is typically safe to access the properties of an object when it reaches a ready state of complete.

<PRE>&lt;SCRIPT FOR=tdcComposer EVENT=onreadystatechange&gt;
if (this.readyState == 'complete')
{
    // perform some action
}
&lt;/SCRIPT&gt;
</PRE>
<H3><A NAME="onrowenter">onrowenter</A></H3>
<P>The <A HREF="../../references/events/onrowenter.htm#onrowenter">onrowenter</A> event fires when the current record pointer has changed, for example, through
<object id="hhal_4" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_ADO_Overview>
</object><A HREF=JavaScript:hhal_4.Click()>ADO Recordset</A> navigation. Web authors can use this event to preprocess the data in the current record.

<H3><A NAME="onrowexit">onrowexit</A></H3>
<P>The <A HREF="../../references/events/onrowexit.htm#onrowexit">onrowexit</A> event fires before the current record pointer changes. This might occur for the following reasons:
<UL>
<LI>Calling a method on the DSO
<LI>Deleting the current record
<LI>Leaving the page
</UL>

<P>The Web author can perform record-level validation prior to moving to the next record. By returning FALSE from this event handler, the Web author can prevent the user from moving to the next record.

<P>The following code performs a simple validation to ensure that the data indicates that the composer's birthday occurred before his death.

<PRE>&lt;SCRIPT FOR=dsoComposers EVENT=onrowexit&gt;
if (txtBorn.value &gt; txtDied.value)
{
    alert("Birth date must be less than or equal to deceased dates");
    return false;
}
&lt;/SCRIPT&gt;
</PRE>
<H2><A NAME="ch_dbind_events_elems">Events that Apply to Data Consumers</A></H2>
<P>Bound elements fire events that allow page authors to perform field-level validation and to handle errors that occur during an update.

<H3><A NAME="onbeforeupdate_and_o">onbeforeupdate and onafterupdate</A></H3>
<P>The <A HREF="../../references/events/onbeforeupdate.htm#onbeforeupdate">onbeforeupdate</A> event fires when the data in an element has been changed and that element is about to lose the focus. An element loses focus when the user tabs to the next or previous field in the tab order, uses the mouse to select a different control, or unloads the page. The events do not fire if the value of a bound control is set programmatically. Should the validation code associated with the event detect invalid data, an author can return FALSE to prevent the user from leaving the field.

<P>The following code performs some basic validation on the value entered into a text box. If the value is nonnumeric or outside a specified range, the user is alerted and prevented from leaving the field.

<PRE>&lt;SCRIPT FOR=txtBorn EVENT=onbeforeupdate&gt;
    dToday = new Date();
    fRet = ValidateDate(parseInt(this.value), 0, dToday.getFullYear());
    event.cancelBubble = true;
    return fRet;
&lt;/SCRIPT&gt;

&lt;SCRIPT&gt;
// perform some basic validation on the date
function ValidateDate(nValue, nMin, nMax)
{
    if (isNaN(nValue))
    {
        alert("Year required");
        return false;
    }

    if (nValue &lt; nMin || nValue &gt; nMax)
    {
        alert("Invalid year");
        return false;
    }
    return true;
}
</PRE>

<P>Both the original and the modified data can be obtained while handling the <A HREF="../../references/events/onbeforeupdate.htm#onbeforeupdate">onbeforeupdate</A> event because, while the control's value has been updated, the data has not been committed to the DSO. Use the ADO recordset supplied by the DSO to get the original value. Use the appropriate control property to obtain the current value as entered by the user. Here's an example that works for any text box.

<PRE>&lt;SCRIPT FOR=txtBorn EVENT=onbeforeupdate&gt;
    curValue = this.value;
    origValue = dsoComposers.recordset.fields(this.dataFld).value;
&lt;/SCRIPT&gt;
</PRE>

<P>If the <A HREF="../../references/events/onbeforeupdate.htm#onbeforeupdate">onbeforeupdate</A> event is not canceled, <A HREF="../../references/events/onafterupdate.htm#onafterupdate">onafterupdate</A> fires after data is transferred from consumer to data provider.

<H3><A NAME="onerrorupdate">onerrorupdate</A></H3>
<P>The <A HREF="../../references/events/onerrorupdate.htm#onerrorupdate">onerrorupdate</A> event fires when an error occurs while transferring data 
from the data consumer to the data source object through some user
interaction. By canceling this event, any system-provided error dialog boxes are suppressed.

<H2><A NAME="ch_dbind_events_page">Events That Apply to the Page</A></H2>
<P>In addition to the events specified above for data bound elements and data source controls, the <A HREF="../../references/events/onbeforeunload.htm#onbeforeunload">onbeforeunload</A> event allows the Web author to save data changed on the page that has not been committed to the location from which the DSO obtains its data. The following user actions are among those that cause <B>onbeforeunload</B> to fire:
<UL>
<LI>Hyperlink navigation 
<LI>Clicking the Forward or Back button 
<LI>Selecting a URL from Favorites
<LI>Clicking a Submit button
<LI>Refreshing the page 
</UL>

<P>In addition to these user actions, a script that causes the page to unload will also trigger this event.

<PRE>window.location.href = "http://www.microsoft.com/ie/ie40";
</PRE>

<P>While the <A HREF="../../references/events/onbeforeunload.htm#onbeforeunload">onbeforeunload</A> event is not cancelable, a script writer can return a string from the event through the <A HREF="../../references/properties/returnValue_0.htm#returnValue_0">returnValue</A> property. The string is displayed along with an informative message giving the user the opportunity to cancel the navigation. For example, to warn the user of potential data loss, handle the event as follows:

<PRE>&lt;SCRIPT FOR=window EVENT=onbeforeunload&gt;
    if (g_fFieldsChanged &gt; 0)
        event.returnValue = "Warning: Modified data has not been saved.";
&lt;/SCRIPT&gt;
</PRE>

<P>The g_fFieldsChanged flag used in the example indicates that the page has changed. Page authors can track changes to fields by handling the <A HREF="../../references/events/onafterupdate.htm#onafterupdate">onafterupdate</A> event:

<PRE>&lt;SCRIPT FOR=document EVENT=onafterupdate&gt;
    g_fFieldsChanged = g_fFieldsChanged + 1
&lt;/SCRIPT&gt;
</PRE>
<H2><A NAME="Putting_It_All_Toget">Putting It All Together with the Data Binding Event Tracker</A></H2>
<P>Click the Show Me button to launch a sample that demonstrates many of the events and concepts discussed in this section.


<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../../samples/databind/dbevts.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P>The sample uses the TDC, so no data will be committed back to the data file. Data can be modified in the local cache, however. By modifying the values within the elements on the page, navigating through the records using the navigation buttons, and changing the filter and sort order through the drop-down lists, the majority of the events will fire. Observe the events and the order in which they occur as they are logged to the TEXTAREA on the right half of the sample page. Clear the event log at any time by clicking the Clear Log button.


<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
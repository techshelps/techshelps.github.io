<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Data Binding Architecture</TITLE>

<META NAME=MS-HKWD CONTENT="Data Binding Architecture">
<META NAME="Keywords" CONTENT="Dynamic HTML, DHTML, IE4, Internet Explorer 4.0, dynamic content, data binding">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT, Mac">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="ch_databind_architecture"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Data Binding Architecture"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../../art/headbara.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Data Binding Architecture"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR>
<TR><TD><PRE><IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="../data_binding.htm#dhtml_databind">Topic Contents</A></PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="../data_binding.htm">Data Binding</A>
<IMG SRC="../../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="datasources.htm">Adding a Data Source Object to a Page</A></PRE></TD></TR>
</TABLE>
<!-- NAVLINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>Data Binding Architecture</H1>
<BR CLEAR=ALL>
<P>Data binding is based on a component architecture consisting of four major pieces&#151;data source objects, data consumers, the binding agent, and the table repetition agent. Data source objects provide the data to a page, data-consuming HTML elements display the data, and the agents ensure that both provider and consumer are synchronized. The following diagram illustrates how the components fit together.

<P><IMG SRC="../../../art/dbarch.gif" WIDTH="628" HEIGHT="328" ALT="" >

<H2><A NAME="ch_databind_dso">Data Source Objects</A></H2>
<P>To bind data to the elements of an HTML page in Internet Explorer 4.0, a data source object (DSO) must be present on that page. DSOs implement an open specification that leaves it to the DSO developer to determine the following:
<UL>
<LI>How the data is transmitted to the page. A DSO can use any transport protocol it chooses. This might be a standard Internet protocol such as HTTP or simple file I/O. A DSO also determines whether the transmission occurs synchronously or asynchronously. Asynchronous transmission is preferred, as it provides the most immediate interactivity to the user.
<LI>How the data set is specified. A DSO might require an ODBC connection string and an SQL statement, or it might accept a simple URL.
<LI>How the data is manipulated through scripts. Since the DSO maintains the data on the client, it also manages how the data is sorted and filtered. 
<LI>Whether updates are allowed.
</UL>

<P>A DSO typically exposes this functionality through an object model accessible to scripts.

<P>The only strict requirement imposed upon a DSO is that it must provide access to its data through the <A HREF="http://www.microsoft.com/data/oledb/" TARGET="_top">OLE DB</A> or <A HREF="../../../itt/databind/simpletabulardata.htm#chp_osp">OLE DB Simple Provider</A> APIs. Because all DSOs provide data access through a standard set of interfaces, MSHTML extends the object model of the DSO with a standard set of properties, methods, and events. It is through this object model that scripts can manipulate the data. 

<P>Specifics on adding a DSO to a page are provided <A HREF="datasources.htm#ch_datasources">below</A>. Information on implementing custom data source objects is available in <A HREF="../../../itt/databind/databind.htm#book_data_bind">IE4/MSHTML Data Binding Interfaces</A>.

<H2><A NAME="ch_databind_consumer">Data Consumers</A></H2>
<P>Data consumers are elements on the HTML page capable of rendering the data supplied by a DSO. Elements include many of those intrinsic to HTML, as well as custom objects implemented as Java applets or ActiveX&#153; Controls. Internet Explorer 4.0 supports <A HREF="architecture.htm#ch_databind_extensions">HTML extensions</A> to allow authors to bind an element to a specific column of data in a data set exposed by a DSO. Applets and ActiveX Controls support additional binding semantics described <A HREF="dataconsumer.htm#object_as_consumer">below</A>.

<P>Elements support the consumption of either single-valued or tabular data. Single-valued consumers such as INPUT elements consume a single value from the current record provided by a data source. Tabular data consumers such as the TABLE element repeat an entire set of records from a data provider. This is called set binding.


<P>The section on <A HREF="architecture.htm#ch_databind_extensions">HTML extensions</A> explains the extended attributes that allow Web authors to bind elements to the data supplied by a DSO. For further information on the individual elements that support data binding, see <A HREF="dataconsumer.htm#ch_dataconsumer">Binding an HTML Element to Data</A>.

<H2><A NAME="ch_databind_agents">Binding Agents</A></H2>
<P>The binding and repetition agents are implemented by Mshtml.dll, the HTML viewer for Internet Explorer 4.0, and they work completely behind the scenes. When a page is first loaded, the binding agent finds the DSOs and the data consumers among those elements on the page. Once the binding agent recognizes all DSOs and data consumers, it maintains the synchronization of the data that flows between them. For example, when the DSO receives more data from its source, the binding agent transmits the new data to the consumers. Conversely, when a user updates a data bound element on the page, the binding agent notifies the DSO. 

<P>To signal the Web author of important changes in the state of the data caused by providers and consumers, the binding agent fires a variety of <A HREF="events.htm#ch_databind_events">scriptable events</A>. 

<H2><A NAME="Table_Repetition_Age">Table Repetition Agent</A></H2>
<P>The repetition agent works with tabular data consumers such as the HTML <A HREF="../../references/html/TABLE.htm#TABLE">TABLE</A> element to repeat the entire data set supplied by a DSO. Note that individual elements in the table are synchronized through interaction with the binding agent.

<H2><A NAME="ch_databind_extensions">HTML Extensions for Data Binding</A></H2>
<P>To enable Web authors to add data binding to their pages, Internet Explorer 4.0 provides support for several new HTML attributes. All data binding-related HTML attributes correspond to a similarly named property in the <A HREF="../../doc_object/doc_object.htm#dom_intro">Document Object Model</A>. The following section introduces these attributes and describes their use.

<P>The key to data binding is connecting a data source object to a data consumer. To achieve a binding between a data source object (DSO) and a data consumer, Internet Explorer 4.0 extends HTML to support the following attributes:

<TABLE>
<TR><TD>DATASRC</TD><TD>Specifies the identification of the DSO to which a consumer is bound.</TD></TR>
<TR><TD>DATAFLD</TD><TD>Identifies the specific column exposed by the DSO to which the element is bound. </TD></TR>
<TR><TD>DATAFORMATAS</TD><TD>Indicates how the data in the specified column should be rendered.</TD></TR>
<TR><TD>DATAPAGESIZE</TD><TD>Indicates how many records are displayed in a table at once.</TD></TR>
</TABLE>
<P>Bound elements fall into two specific categories: 

<UL>
<LI>Single-valued consumers
<LI>Tabular data consumers 
</UL>

<P>The binding agent takes a single value from the current record of a data source and passes it to a single-valued consumer. The repetition agent works with the binding agent to pass the entire set of records to a tabular data consumer. 

<P>By specifying the DATASRC and DATAFLD attributes on a single-valued data consuming element of a Web page, the Web author fully specifies the binding of an element to data. By specifying DATAFORMATAS on a single-valued element, the Web author indicates how the data should be interpreted. DATAPAGESIZE allows the author to restrict the number of records that are displayed by a tabular consumer. All these properties can be set at run time through the document object model.

<P>Here's a sample declaration for a single-valued data consuming element that might appear on an HTML page.

<PRE>&lt;SPAN DATASRC=#dsoComposer DATAFLD=compsr_first&gt;&lt;/SPAN&gt;
</PRE>

<P>The DATASRC attribute in this example is set to the ID (dsoComposer) of a data source object (DSO) embedded on the page. The DATAFLD is set to the name of a column in the data set provided by the DSO. For this binding to succeed, the data set retrieved by the DSO must contain a column named "compsr_first".

<P>Click the Show Me button to see a working example.


<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../../samples/databind/dbsingle.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P>The following example shows how a table, a tabular data consumer, can be bound to a data source object. The repetition agent uses the table row (TR) in the table body as a template. As the DSO identified in this example as "dsoComposer" supplies each record in the data set, the template including the DIV is repeated, until all composers' first names are displayed.

<PRE>&lt;TABLE DATASRC=#dsoComposer&gt;
    &lt;TR&gt;&lt;TD&gt;&lt;DIV DATAFLD=compsr_first&gt;&lt;/DIV&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;/TABLE&gt;
</PRE>

<P>Click the Show Me button to see a working example that uses the TDC to display a table of composers, including their first and last name, date of birth and death, and country of origin.


<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../../samples/databind/dbtable.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><H2><A NAME="ch_databind_dataformatas">Specifying Data Rendering with the DATAFORMATAS Attribute</A></H2>
<P>The data supplied by a DSO can be in a variety of formats, and the page author can use the DATAFORMATAS attribute on single-valued consumer elements that support the attribute to indicate how the data should be rendered. In Internet Explorer 4.0, HTML and TEXT are the valid values for this attribute.

<PRE>&lt;MARQUEE DATASRC=#dsoAdvertisement DATAFLD=banner
    DATAFORMATAS=html&gt;
&lt;/MARQUEE&gt;
</PRE>

<P>The previous example describes a MARQUEE that calls upon a data source object that supplies various banners for display in a page. Click the Show Me button to see how a timer can be used to randomly select and display an advertisement supplied by a data source.


<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../../samples/databind/dbadvert.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><H2><A NAME="chp_databind_datapagesize">Optimizing Table Viewing with the DATAPAGESIZE Attribute</A></H2>
<P>When binding a TABLE to a data source, all the records in the data set will be displayed by default. If the data set is large, the page may grow beyond what is visible to the user. In addition, any content positioned below the table will get pushed off the screen. The DATAPAGESIZE attribute can be applied to a TABLE to specify the maximum number of records that should be displayed at any one time. To enable the user to move to the next and previous page of records viewed in the table, Web authors can use the <A HREF="../../references/methods/nextPage.htm#nextPage">nextPage</A> and <A HREF="../../references/methods/previousPage.htm#previousPage">previousPage</A> methods exposed by the <A HREF="../../references/objects/TABLE.htm#TABLE">TABLE</A> object in the document object model. Authors can also change the page size of the table at run time by setting the <A HREF="../../references/properties/dataPageSize.htm#dataPageSize">dataPageSize</A> property. Click the Show Me button to see how it works.


<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../../samples/databind/dbpage.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P>In addition to limiting table size, Web authors should investigate the specific functionality exposed by the DSO they have chosen for use on their HTML page. Both the
<object id="hhal_3" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Tabular_Data_Control_TDC_>
</object><A HREF=JavaScript:hhal_3.Click()>TDC</A> and
<object id="hhal_4" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Microsoft_Remote_Data_Service>
</object><A HREF=JavaScript:hhal_4.Click()>RDS</A> provide filtering capabilities.

<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Working with Windows, Frames, and Dialogs</TITLE>

<META NAME=MS-HKWD CONTENT="Working with Windows, Frames, and Dialogs">
<META NAME="Keywords" CONTENT="Dynamic HTML, DHTML, IE4, Internet Explorer 4.0">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT, Mac">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="dhtml_winframediag"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Working with Windows, Frames, and Dialogs"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../art/headbara.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Working with Windows, Frames, and Dialogs"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR>
<TR><TD><PRE><IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="doc_object.htm#dom_intro">Topic Contents</A></PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="doc_object.htm">Document Object Model</A>
<IMG SRC="../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="scripting_elements_collections.htm">Scripting with Elements and Collections</A></PRE></TD></TR>
</TABLE>
<!-- NAVLINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>Working with Windows, Frames, and Dialogs</H1>
<BR CLEAR=ALL>
<P>Microsoft&#174; Internet Explorer creates a <A HREF="../references/objects/obj_window.htm#obj_window">window</A> object whenever it opens an HTML document. Because this object is the highest-level object in the object model, you use it to gain access to properties and sub-objects in the object model that you need to dynamically access the document content. The following topics explain how use the window object, create new window objects, and create special types of window objects.

<P>Be sure to review <A HREF="xframe_scripting_security.htm#dom_security">Cross-Frame Scripting and Security</A> for cross-window and frame scripting issues. Security considerations limit the cross-window access from scripts, and reading this section will help you understand what you can and cannot do through scripting. 

<P><A CLASS=tctop HREF="windows_frames_dialogs.htm#Using_the_Window_Obj"><IMG SRC="../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">Using the Window Object</A><BR>
<P><A CLASS=tctop HREF="windows_frames_dialogs.htm#Creating_and_Using_F"><IMG SRC="../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">Creating and Using Frames</A><BR>
<P><A CLASS=tctop HREF="windows_frames_dialogs.htm#sec_dialogs"><IMG SRC="../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">Creating and Using Modal Dialog Boxes</A><BR>
<P><A CLASS=tctop HREF="windows_frames_dialogs.htm#Showing_a_Help_Windo"><IMG SRC="../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">Showing a Help Window</A><BR>
<!-- * * * * * * * * * * * * * * --><H2><A NAME="Using_the_Window_Obj">Using the Window Object</A></H2>
<P>The <A HREF="../references/objects/obj_window.htm#obj_window">window</A> object is the root of the object hierarchy. All properties in the object model are either accessed as properties of the window object or as properties of those properties. For example, you access the document through the <A HREF="../references/objects/obj_document.htm#obj_document">document</A> property of the window object. Properties that have properties are often called objects or sub-objects, so <B>document</B> is referred to as the document object. For a complete list of properties of the window object, see <A HREF="../references/properties/properties.htm#om40_prop">Properties</A>.

<P>Because the current window object is implied, you do not need to prefix the property with the <B>window</B> keyword. However, many people prefer to use the keyword to ensure that their scripts are as clear and readable as possible. For example:

<PRE>status = "hello";
</PRE>

<P>is the same as saying:

<PRE>window.status = "hello";
</PRE>

<P>and both will work when referring to the current window object.

<P>Many of the properties of the window object can be used to carry out simple tasks, such as displaying messages, prompting for input, and loading new documents into the window. For example, you can display a simple modal message box from the current window by using the <A HREF="../references/methods/alert.htm#alert">alert</A> method and change the text in the Internet Explorer status bar by using the <A HREF="../references/properties/status_0.htm#status_0">status</A> property, as in the following example. 

<PRE>&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;A Simple Document&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE="JScript"&gt;
function doAlert() {
    window.status = "Page is loaded!";
    alert("Page is loaded!");
}
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY onload="doAlert()"&gt;
&lt;P&gt;This is a very short document.
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<BUTTON onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/overview/wind_01.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P>You can use the <A HREF="../references/methods/navigate.htm#navigate">navigate</A> method or the <A HREF="../references/objects/obj_location.htm#obj_location">location</A> object to load a new document into a window. The action is similar to the user clicking a link to the new document, but can be carried out from script. The following example uses the <B>navigate</B> method to load the new document named "sample.htm" after a 60-second timer (using the <A HREF="../references/methods/setTimeout.htm#setTimeout">setTimeout</A> method) elapses. 

<PRE>window.setTimeout("window.navigate('sample.htm')", 60000);
</PRE>

<P>You can also use the <A HREF="../references/objects/obj_location.htm#obj_location">location</A> object to navigate within the current document. For example, the following statement jumps to the anchor in the document having the name "sample". 

<PRE>window.location.hash="#sample";
</PRE>

<P>There can be more than one window object at a time. For example, the browser creates one window object for each frame defined within a document. From the scripting perspective, the current window object is always the one that contains the document that contains the script. To access window objects other than the current window object, you precede the property with a window reference. The <B>window.open</B> method returns a reference to this new window that is then used in scripts to access properties and methods of the new window. 

<P>The following document uses the method to open a window and load the document "sample.htm" when the user clicks the button. 

<PRE>&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Creating a Window&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;P&gt;&lt;BUTTON onclick="window.open('sample.htm')"&gt;Open Sample&lt;/BUTTON&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<BUTTON onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/overview/wind_02.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P>The new window is a separate instance of Internet Explorer, and the <A HREF="../references/objects/obj_window.htm#obj_window">window</A> object created for it is different than that of the original window. The new window can be referenced from the current window in script by the name "mysample". The following example creates a new window for the "sample.htm" document, then assigns the title of the new window's document to the status bar of the original window. 

<PRE>var new_window = window.open("sample.htm");
if (new_window != null) 
    window.status = new_window.document.title;
</PRE>

<BUTTON onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/overview/wind_03.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P>Once a window creates another, it can manage that window in a variety of ways, from loading new documents in the window with the <A HREF="../references/methods/navigate.htm#navigate">navigate</A> method or <A HREF="../references/objects/obj_location.htm#obj_location">location</A> object to closing the window with the <A HREF="../references/methods/close_0.htm#close_0">close</A> method. Closing the window unloads the document and closes the separate instance of Internet Explorer. 

<P>Because the user can also close the new window at any time, you should always make sure that the window exists before attempting to access it. You can do this by checking the <A HREF="../references/properties/closed.htm#closed">closed</A> property, which is set to true when the window is closed. 

<P>You can assign a name to a window when you create it by using the optional second parameter of the <A HREF="../references/methods/open_0.htm#open_0">open</A> method. The name is useful to use as the target of a link, causing the document specified by the link to be loaded in the window. The following document creates a window named "Sample". The links later in the document use "Sample" as the target name. 

<PRE>&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Linking to Sample&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY onload="window.open('sample.htm','Sample')"&gt;
&lt;P&gt;Click the following links to view the documents in the Sample window:
&lt;P&gt;&lt;A HREF="abc.htm" TARGET="Sample"&gt;All About Abc&lt;/A&gt;
&lt;P&gt;&lt;A HREF="xyz.htm" TARGET="Sample"&gt;Some Words on Xyz&lt;/A&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<BUTTON onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/overview/wind_04.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P>By default, the <A HREF="../references/methods/open_0.htm#open_0">open</A> method creates a window that has a default width and height and the standard menu, toolbar, and other features of Internet Explorer. You can alter this set of features by using the optional third parameter. This parameter is a string consisting of one or more feature settings, including settings for the position and dimension of the window. For example, the following creates a window that is 200-by-400 pixels, has a status bar, but does not have a toolbar, menu bar, or address field.

<PRE>window.open("sample.htm",null,
    "height=200,width=400,status=yes,toolbar=no,menubar=no,location=no");
</PRE>

<P>For more information about the window features, see <A HREF="../references/methods/open_0.htm#open_0">open</A>.


<!-- * * * * * * * * * * * * * * -->
<H2><A NAME="Creating_and_Using_F">Creating and Using Frames</A></H2>
<P>Frames are a way to organize and structure HTML documents, creating compound views that the user sees within the main window of Internet Explorer. Because each frame is itself a unique window within the main window, you use the <A HREF="../references/objects/obj_window.htm#obj_window">window</A> object to access the frame's content.

<P>You create frames by using the <A HREF="../references/objects/IFRAME.htm#IFRAME">IFRAME</A> element or <A HREF="../references/objects/FRAMESET.htm#FRAMESET">FRAMESET</A> and <A HREF="../references/objects/FRAME.htm#FRAME">FRAME</A> elements. Each element creates a frame and loads a specified document. For example, the following document creates two equally sized rectangular frames that fill the main window.

<PRE>&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Two Equal Frames&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;FRAMESET COLS="50%,*"&gt;
&lt;FRAME SRC=x.htm&gt;
&lt;FRAME SRC=y.htm&gt;
&lt;/FRAMESET&gt;
&lt;/HTML&gt;
</PRE>

<P>In a document within a frame, such as the "x.htm" and "y.htm" documents in the example above, you can use the <A HREF="../references/objects/obj_window.htm#obj_window">window</A> object as you would in a document within the main window. This means you can get access to the <A HREF="../references/objects/obj_document.htm#obj_document">document</A> and <A HREF="../references/objects/obj_event.htm#obj_event">event</A> objects for the frameset document and write script that will run from this frameset document. Note that if you use script, or need to instantiate an OBJECT from this frameset document, you need to define these in the HEAD section. Also note that a BODY element is mutually exclusive from a FRAMESET. Using both in a single document will result in the first one being instantiated and the second one ignored. Many authors try to use a BODY element to set the background color, and then instantiate a FRAMESET. Internet Explorer 4.0 will instantiate the BODY, and ignore the FRAMESET. Move the background color settings to the FRAMESET, and remove the BODY from this document, and the browser will intantiate the FRAMESET as you would expect.

<P>You can also gain access to the window that created the frame (called the parent window) and to the other frames created by the parent by using the <A HREF="../references/properties/parent.htm#parent">parent</A> property and the <A HREF="../references/collections/frames.htm#frames">frames</A> collection. The following JScript example using these to display the URL of the documents in each frame.

<PRE>for (i=0; i&lt;window.parent.frames.length; i++) 
    alert("Frame #" + i + " contains: " + window.parent.frames(i).location);
</PRE>

<P>The <A HREF="../references/collections/frames.htm#frames">frames</A> collection contains <A HREF="../references/objects/obj_window.htm#obj_window">window</A> objects for each frame, so you can use the same properties and methods with these objects as you would within the current window. For example, you can gain access to the complete contents of the document in another frame by using <B>frames</B>, as in the following example, to display the title of each document.

<PRE>for (i=0; i&lt;window.parent.frames.length; i++) 
    alert("The title of frame #" + i + " is: " + window.parent.frames(i).document.title);
</PRE>

<P><B>Note</B>  Cross-frame security limits scripting to documents loaded from the same domain. Use the <A HREF="../references/properties/domain.htm#domain">domain</A> property to determine and/or set the domain of a document. See <A HREF="xframe_scripting_security.htm#dom_security">Cross-Frame Scripting and Security</A> for more information on cross frame security and scripting considerations.
<P>The <A HREF="../references/collections/frames.htm#frames">frames</A> collection also works this way for the <A HREF="../references/objects/obj_document.htm#obj_document">document</A> object. In this case, the frames collection from the document contains <A HREF="../references/objects/obj_window.htm#obj_window">window</A> objects for all frames created by <A HREF="../references/objects/IFRAME.htm#IFRAME">IFRAME</A> elements in a document. Consider the following document.

<PRE>&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Two Floating Frames&lt;/TITLE&gt;
&lt;SCRIPT&gt;
function showFrames() {
    for (i=0; i&lt;window.document.frames.length; i++) 
        alert("The title of frame #" + i + " is: " + 
            window.document.frames(i).document.title);
}
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY onload="showFrames()"&gt;
&lt;IFRAME SRC="x.htm" ALIGN=LEFT&gt;&lt;/IFRAME&gt; Here's some text to the right of a frame.
&lt;BR CLEAR=LEFT&gt;Here's some text beneath the frame.
&lt;BR&gt;
&lt;IFRAME SRC="y.htm" ALIGN=RIGHT&gt;&lt;/IFRAME&gt; Here's some text to the left of a frame.
&lt;BR CLEAR=RIGHT&gt;Here's some text beneath the frame.
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<BUTTON onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/overview/wind_05.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P>The document above contains two floating frames, one aligned to the left and the other to the right. Once the document is loaded, the "showFrames" function uses the <A HREF="../references/collections/frames.htm#frames">frames</A> collection to access each frame and display the title of the corresponding document. 

<P>Unlike windows created using the <A HREF="../references/methods/open_0.htm#open_0">open</A> method, you cannot close the window associated with a frame. The frame is "closed" when the window that created it is unloaded. Also, properties that apply to the main window, such as <A HREF="../references/properties/status_0.htm#status_0">status</A>, have no purpose within a frame. Frames do not have status bars, so attempting to get or set <B>status</B> has no effect for the individual frames, and you should access the parent frameset document to set the status bar. 

<P>Notice that accessing the <A HREF="../references/objects/obj_window.htm#obj_window">window</A> object associated with a frame is not the same as accessing the <A HREF="../references/objects/FRAME.htm#FRAME">FRAME</A> or <A HREF="../references/objects/IFRAME.htm#IFRAME">IFRAME</A> element that created the frame. In particular, you cannot access the attributes of these elements by using the <B>window</B> object. Instead, you must use the object for the element, which you can get from the <A HREF="../references/collections/all.htm#all">all</A> collection for the document that contains the frame element. For example, if you want to remove the scroll bars from a frame, you have to set the <A HREF="../references/properties/scrolling.htm#scrolling">scrolling</A> property of the <B>IFRAME</B> element as follows: 

<PRE>document.all.tags("IFRAME").item(1).scrolling="no";
</PRE>

<P>For more information about element objects and their properties, see <A HREF="scripting_elements_collections.htm#dhtml_elements">Scripting with Elements and Collections</A>.


<!-- * * * * * * * * * * * * * * -->
<H2><A NAME="sec_dialogs">Creating and Using Modal Dialog Boxes</A></H2>
<P>A dialog box is a special window that you create by using the <A HREF="../references/methods/showModalDialog.htm#showModalDialog">showModalDialog</A> method on the <A HREF="../references/objects/obj_window.htm#obj_window">window</A> object. Dialog boxes are useful for soliciting input from the user in a way that does not obscure the information in the current window. They are also useful for displaying important information that the user should act upon or acknowledge before proceeding.

<P>The <A HREF="../references/methods/showModalDialog.htm#showModalDialog">showModalDialog</A> method is similar to the <A HREF="../references/methods/open_0.htm#open_0">open</A> method in that it takes the URL of an HTML document and displays the document in a new window. One of the main differences, however, is that the dialog box is modal, meaning it does not release the input focus until it is closed. This means the user cannot switch back to the window that created the dialog box until she closes the dialog box. However, this does not prevent the user from switching to other windows or applications. 

<P>You typically create dialog boxes in response to user input, such as clicking a button or choosing an item in a menu. The following example calls <A HREF="../references/methods/showModalDialog.htm#showModalDialog">showModalDialog</A> directly from the <A HREF="../references/events/onclick.htm#onclick">onclick</A> attribute of a <A HREF="../references/objects/BUTTON.htm#BUTTON">BUTTON</A> element. 

<PRE>&lt;BUTTON onclick="window.showModalDialog('dialog.htm')"&gt;Search&lt;/BUTTON&gt;
</PRE>

<P>The method in the example above creates a dialog box having the standard dialog box size and features, and loads the document "dialog.htm" into the new window. 

<P>You can load any valid HTML document into a dialog box, but most dialog documents contain one or more controls with which the user supplies input or directs an action. For example, the following document provides a <A HREF="../references/properties/type_7.htm#text">text</A> control for letting the user specify a string to search for and buttons to confirm or cancel the search. Notice that the string is returned to the main window by assigning it to "returnValue".

<PRE>&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Search For&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE="JScript"&gt;
function doOK() {
    window.returnValue = window.document.all.MySearch.value;
    window.close();
}
function doCancel() {
    window.returnValue = "";
    window.close();
}
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;P&gt;&lt;B&gt;Search For:&lt;/B&gt; &lt;INPUT ID=MySearch TYPE=text&gt;
&lt;CENTER&gt;
&lt;BUTTON onclick="doOK()"&gt;OK&lt;/BUTTON&gt;&amp;nbsp;
&lt;BUTTON onclick="doCancel()"&gt;Cancel&lt;/BUTTON&gt;
&lt;/CENTER&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<BUTTON onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/overview/wind_06.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P>When the document above is displayed, the user can type a string into the text control (identified by "MySearch") and click either the OK or Cancel button to carry out an action. Clicking OK calls the "doOK" function, which retrieves the text from the text control and assigns it to the <A HREF="../references/properties/returnValue_0.htm#returnValue_0">returnValue</A> property of the dialog box. Clicking Cancel calls "doCancel", which assigns an empty string to this property. Both functions then call the <A HREF="../references/methods/close_0.htm#close_0">close</A> method to close the dialog box and return the input focus to the original window.

<P>The <A HREF="../references/properties/returnValue_0.htm#returnValue_0">returnValue</A> property on the <A HREF="../references/objects/obj_window.htm#obj_window">window</A> object specifies the value to be returned by the <A HREF="../references/methods/showModalDialog.htm#showModalDialog">showModalDialog</A> method after the dialog box closes. Setting this property is one way a dialog box can return information to the original window. Assuming the document in the previous example is in a file named "search.htm", the following example can use the returned string to carry out a search. 

<PRE>function doSearch() {
    var str = showModalDialog("search.htm");
    if (str == "")
        return;    // user canceled search
    else {
        // search for the string
     }
}
</PRE>

<P>You can pass arguments to a dialog box by using the second parameter of <A HREF="../references/methods/showModalDialog.htm#showModalDialog">showModalDialog</A>. This parameter accepts any valid type, so an array can be passed just as easily as a discrete type.

<PRE>
   var aCafeArgs = new Array("Tall", "Decaf", "Non-fat", "Mocha");
   var cResult = window.showModalDialog("barista.htm", aCafeArgs);
</PRE>

<P>A dialog box can retrieve the arguments through the <A HREF="../references/properties/dialogArguments.htm#dialogArguments">dialogArguments</A> property of the window object. Passing arguments is a useful way for the original window to specify the initial values for the controls in the dialog box. For example, consider the dialog document in the search example. By scripting the <A HREF="../references/events/onload.htm#onload">onload</A> event of the <A HREF="../references/objects/BODY.htm#BODY">BODY</A> element to call the following function, the dialog can set the initial search string to a value supplied by the original window. 

<PRE>function doInit() {
    if (window.dialogArguments != null)
        window.document.all.MySearch.value = window.dialogArguments;
}
   .
   .
   .
&lt;BODY onload="doInit()"&gt;
</PRE>

<P>To set the initial search string to the words "Sample Text", the original window calls <A HREF="../references/methods/showModalDialog.htm#showModalDialog">showModalDialog</A> as in the following example. 

<PRE>var str = showModalDialog("search.htm", "Sample Text");
</PRE>

<P>A better way to make use of the dialog arguments for this document is to store the search string in a variable within the document of the original window, as in the following example.

<PRE>var str = "";
function doSearch() {
    str = showModalDialog("search.htm", str);
    if (str == "")
        return;    // user canceled search
    else {
        // search for the string
    }
}
</PRE>

<P>Storing the returned string in the global variable ensures that the previous search string is available whenever the user requests another search. Remember that stored values are discarded when a document is unloaded, so you cannot store the previous string with the dialog document. This also means that the stored string in the original window is discarded when that document is unloaded.

<P>In addition to setting initial values, you can also set the input focus to a specific control in the dialog box by using the <A HREF="../references/methods/focus.htm#focus">focus</A> method. This ensures that when the dialog document is loaded, the user can begin entering input immediately without first moving the focus to an appropriate control. The input focus is typically set in the same function that sets initial values for the dialog box. To set the focus to the text control in the previous example, use the following:

<PRE>window.document.all.MySearch.focus();
</PRE>

<P>If the original window has more that one value to exchange with the dialog box, it can do this by passing an object to the dialog as an argument. For example, the following dialog document prompts the user with both a "Match Case " check box and a "Search For" string. To receive the user's settings for these, the original window passes an object that the dialog sets when the user presses OK or Cancel.

<PRE>&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Search For&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE="JScript"&gt;
function doInit() {
    if (window.dialogArguments != null) {
        window.document.all.MySearch.value = window.dialogArguments.str;
        window.document.all.MatchCase.checked = window.dialogArguments.caseSensitive;
    }
    window.document.all.MySearch.focus();
    window.returnValue = false;
}
function doOK() {
    window.returnValue = true;
    if (window.dialogArguments != null) {
        window.dialogArguments.str = window.document.all.MySearch.value;
        window.dialogArguments.caseSensitive = 
            window.document.all.MatchCase.checked;
    }
    window.close();
}
function doCancel() {
    window.returnValue = false;
    window.close();
}
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY onload="doInit()"&gt;
&lt;INPUT ID=MatchCase TYPE=checkbox&gt;&amp;nbsp;&lt;B&gt;Match Case&lt;/B&gt; 
&lt;P&gt;&lt;B&gt;Search For:&lt;/B&gt; &lt;INPUT ID=MySearch TYPE=text&gt;
&lt;CENTER&gt;
&lt;BUTTON onclick="doOK()"&gt;OK&lt;/BUTTON&gt;&amp;nbsp;
&lt;BUTTON onclick="doCancel()"&gt;Cancel&lt;/BUTTON&gt;
&lt;/CENTER&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<BUTTON onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/overview/wind_07.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P>Be careful! Any document that uses this dialog document needs to properly declare and initialize the object. The following example declares the "myDialog" object and initializes the object before calling <A HREF="../references/methods/showModalDialog.htm#showModalDialog">showModalDialog</A>.

<PRE>function myDialog() {
    var str;
    var caseSensitive;
}
function doSearch() {
    myDialog.str = "";
    myDialog.caseSensitive = false;
    if (showModalDialog("search.htm", myDialog)==false)
        return;    // user canceled search
    else {
        // search for the string
    }
}
</PRE>

<P>An alternate way to pass multiple values between the original window and the dialog box is to concatenate those values into a single string, and leave it to the documents to parse the string and extract the values. 

<P>The appearance and size of a dialog box can be set from the third parameter of the <A HREF="../references/methods/showModalDialog.htm#showModalDialog">showModalDialog</A> method. The following example creates a dialog box that uses a default font size of 10 pixels and a dialog width and height of 10 ems.

<PRE>window.showModalDialog("dialog.htm",null,
    "font-size:10px;dialogWidth:10em;dialogHeight:10em")
</PRE>

<P>As you can see in the example above, the third parameter takes a string, consisting of one or more settings separated by semicolons (;). Each setting consists of a name and a value separated by a colon (:) or equal sign (=). The value depends on the ornament. If it is a number, it takes a units designator, such as "px" or "em". 

<P>You use the <A HREF="../references/methods/showModalDialog.htm#dialogWidth">dialogWidth</A> and <A HREF="../references/methods/showModalDialog.htm#dialogHeight">dialogHeight</A> names to set the initial width and height of the dialog box. Similarly, you can use <A HREF="../references/methods/showModalDialog.htm#dialogLeft">dialogLeft</A> and <A HREF="../references/methods/showModalDialog.htm#dialogTop">dialogTop</A> to set the initial position of the dialog box relative to the upper-left corner of the desktop (not the parent window). If you don't want to calculate the left and top positions for the dialog box, you can center it in the desktop by using the <A HREF="../references/methods/showModalDialog.htm#center">center</A> keyword.

<P>Although the position, width, and height of a dialog box are typically set by the parent document, you can retrieve and change these settings from within the dialog box itself by using the <A HREF="../references/properties/dialogLeft.htm#dialogLeft">dialogLeft</A>, <A HREF="../references/properties/dialogTop.htm#dialogTop">dialogTop</A>, <A HREF="../references/properties/dialogWidth.htm#dialogWidth">dialogWidth</A>, and <A HREF="../references/properties/dialogHeight.htm#dialogHeight">dialogHeight</A> properties. Changing these settings is important, for example, if you want to expand the content of the dialog box to show additional options that the user can choose from. 

<P>You can set the default typeface, font size, weight, and style for text in the dialog box by using the <B>font</B>, <B>font-size</B>, <B>font-weight</B>, and <B>font-style</B> names. These take the same values as the CSS attributes of the same name. The default settings apply only to text in the dialog box that does not already have explicit font settings. 


<H2><A NAME="Showing_a_Help_Windo">Showing a Help Window</A></H2>
<P>You can show help files in the browser using the <A HREF="../references/methods/showHelp.htm#showHelp">showHelp</A> method on the <A HREF="../references/objects/obj_window.htm#obj_window">window</A> object. The following example creates a help window that would display an HTML help file. For HTMLHelp, there are no modifying parameters, and only defaults will apply to the new window. 

<PRE>&lt;BUTTON onclick="window.showHelp('helpinfo.htm')"&gt;Show Help&lt;/BUTTON&gt;
</PRE>

<P>The <A HREF="../references/methods/showHelp.htm#showHelp">showHelp</A> method can also be used to display WinHelp files. To display WinHelp files, the first parameter of the method specifies an .hlp file, the second parameter specifies a context identifier, and the third (optional) parameter can be used to specify "popup". The default view for help files is to show the help file in the main browser window. If "popup" is specified for WinHelp files, the help file is displayed in a separate window.

<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
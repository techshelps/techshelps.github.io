<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Programming an Active Document Server</TITLE>

<META NAME=MS-HKWD CONTENT="Programming an Active Document Server">
<META NAME="Keywords" CONTENT="Component Development">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="ch_docobj_using_server"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Programming an Active Document Server"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../art/headbarc.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Programming an Active Document Server"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR><TR><TD><PRE><IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="active_docs.htm#book_doc_objects">Topic Contents</A>
</PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="active_docs.htm">Active Documents</A>
<IMG SRC="../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="containers.htm">Programming an Active Document Container</A>
</PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<h1>Programming an Active Document Server</h1>

<P>An Active Document server is an OLE local server, similar to an OLE in-place server, that provides all the functionality of the document application. The document is contained inside an Active Document container, but is allowed to merge its menus with the container's menus and has complete use of the container's view area. The server provides the majority of the user interface, including menus, toolbars, status bars, and scroll bars. This allows the server to be hosted by any number of different Active Document containers while still maintaining a user interface that is familiar to the user.

<P><A CLASS=tctop HREF="servers.htm#DocObj_Using_Server_Basics"><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowg.gif">The Basics</A><BR>

<P><A CLASS=tctop HREF="servers.htm#DocObj_Using_Server_Registering"><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowg.gif">Registering an Active Document Server</A><BR>

<P><A CLASS=tctop HREF="servers.htm#DocObj_Using_Server_IDataObject"><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowg.gif">The IDataObject Interface</A><BR>

<P><A CLASS=tctop HREF="servers.htm#DocObj_Using_Server_IOleDocument"><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowg.gif">The IOleDocument Interface</A><BR>

<P><A CLASS=tctop HREF="servers.htm#DocObj_Server_IOleDocumentView"><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowg.gif">The IOleDocumentView Interface</A><BR>

<P><A CLASS=tctop HREF="servers.htm#DocObj_Server_Palette_Manage"><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowg.gif">Palette Management for Active Document Servers</A><BR>
<h2><A NAME="DocObj_Using_Server_Basics">The Basics</A></h2>

<P>To create an Active Document server, you must create a file-based OLE local server that implements the following interfaces. Some of these interfaces are not required for a minimal implementation of a server. This table specifies which interfaces are required.

<TABLE>
<TR><TD><B>Interface </B></TD><TD><B>Required </B></TD><TD><B>Description</B></TD><TD></TD></TR>
<TR><TD><A HREF="references/IOleDocument.htm#IOleDocument">IOleDocument</A> </TD><TD>Yes </TD><TD>The container uses this interface to cause an Active Document to create views of itself, enumerate the views the object supports, and provide miscellaneous information about the object's capabilities.</TD></TR>
<TR><TD><A HREF="references/IOleDocumentView.htm#IOleDocumentView">IOleDocumentView</A> </TD><TD>Yes </TD><TD>The container uses this interface to activate, deactivate, close, and communicate with a document view object.</TD></TR>
<TR><TD><object id="hhal_3" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_3.Click()>IPersistStorage</A> </TD><TD>Yes </TD><TD>The container uses this interface to initialize the object and put it in the loaded or running state, and to instruct the object to perform various save operations or to release its storage.</TD></TR>
<TR><TD><object id="hhal_4" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_4.Click()>IOleObject</A> </TD><TD>Yes </TD><TD>The container uses this interface to execute verbs, communicate site information, and close the view.</TD></TR>
<TR><TD><object id="hhal_5" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_5.Click()>IDataObject</A> </TD><TD>Yes </TD><TD>The container uses this interface to get and set data in the object.</TD></TR>
<TR><TD><object id="hhal_6" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_6.Click()>IOleInPlaceObject</A> </TD><TD>Yes </TD><TD>The container uses this interface to activate and deactivate the view object.</TD></TR>
<TR><TD><object id="hhal_7" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_7.Click()>IOleInPlaceActiveObject</A> </TD><TD>Yes </TD><TD>The container uses this interface to control the view object while it is active.</TD></TR>
<TR><TD><object id="hhal_8" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_8.Click()>IEnumFORMATETC</A> </TD><TD>No </TD><TD>The container uses this interface to determine what data formats the object supports.</TD></TR>
<TR><TD><A HREF="references/IEnumOleDocumentViews.htm#IEnumOleDocumentViews">IEnumOleDocumentViews</A> </TD><TD>No </TD><TD>The container uses this interface to enumerate the views that an Active Document supports.</TD></TR>
<TR><TD><A HREF="references/IOleCommandTarget.htm#IOleCommandTarget">IOleCommandTarget</A> </TD><TD>No </TD><TD>The container uses this interface to dispatch commands and obtain command status information from the Active Document.</TD></TR>
<TR><TD><A HREF="references/IPrint.htm#IPrint">IPrint</A> </TD><TD>No </TD><TD>The container uses this interface to print an Active Document.
</TD></TR>
</TABLE>
<h2><A NAME="DocObj_Using_Server_Registering">Registering an Active Document Server</A></h2>

<P>The following are the minimum registry entries necessary to register an Active Document server. Any information in "&lt;&gt;" brackets is implementation-specific.

<PRE>HKEY_CLASSES_ROOT\&lt;file extension&gt; = &lt;prog ID&gt;

HKEY_CLASSES_ROOT\&lt;prog ID&gt; = &lt;document name&gt;

HKEY_CLASSES_ROOT\&lt;prog ID&gt;\CLSID = &lt;clsid&gt;

HKEY_CLASSES_ROOT\CLSID\&lt;clsid&gt;\LocalServer32 = &lt;server path and file&gt;

HKEY_CLASSES_ROOT\CLSID\&lt;clsid&gt;\InprocHandler32 = "ole32.dll"

HKEY_CLASSES_ROOT\CLSID\&lt;clsid&gt;\Insertable = ""

HKEY_CLASSES_ROOT\CLSID\&lt;clsid&gt;\DocObject = ""
</PRE>

<P>The Insertable and DocObject registry keys noted in this example are not required if the CATID_Insertable and CATID_DocObject component categories are registered for the server. Registering the component categories causes these keys to be added automatically. For more information, see the
<object id="hhal_9" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_9.Click()>ICatRegister::RegisterClassImplCategories</A> method.

<P>The following registry entry is optional and causes an icon to be displayed for the file in Windows&#174; Explorer.

<PRE>HKEY_CLASSES_ROOT\CLSID\&lt;clsid&gt;\DefaultIcon = &lt;server path and file&gt;,&lt;icon index&gt;
</PRE>
<h2><A NAME="DocObj_Using_Server_IDataObject">The IDataObject Interface</A></h2>

<P>The
<object id="hhal_10" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_10.Click()>IDataObject</A> interface is not specific to Active Documents, but one point must be clarified. Some Active Document containers will store the document's information in a format specific to the container. Therefore, these containers will make a copy of the data before actually activating the document. This is done by requesting the data using the object's
<object id="hhal_11" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_11.Click()>IDataObject::GetDataHere</A> method for the "Embed Source" registered clipboard format, DVASPECT_CONTENT and TYMED_ISTORAGE. In response to this call, your server must store the document's current data in the
<object id="hhal_12" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_12.Click()>IStorage</A> interface provided in the
<object id="hhal_13" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_13.Click()>STGMEDIUM</A> structure. This can easily be accomplished by using the
<object id="hhal_14" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_14.Click()>OleSave</A> API.

 
<h2><A NAME="DocObj_Using_Server_IOleDocument">The IOleDocument Interface</A></h2>

<P>The <A HREF="references/IOleDocument.htm#IOleDocument">IOleDocument</A> interface is the basis for your Active Document server. The container uses this interface to create views, obtain a view enumerator (<A HREF="references/IEnumOleDocumentViews.htm#IEnumOleDocumentViews">IEnumOleDocumentViews</A>), and obtain document status.

 
<h3><A NAME="Creating_Doc_View">Creating the Document View</A></h3>

<P>The container will request that your server create a document view to be displayed. It will do so in the following manner:

<OL>
<LI>The container calls your server's
<object id="hhal_15" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_15.Click()>IOleObject::DoVerb</A> method with the <I>iVerb</I> parameter equal to OLEIVERB_SHOW, OLEIVERB_PRIMARY, or OLEIVERB_UIACTIVATE. 

<LI>Your server obtains the container's <A HREF="references/IOleDocumentSite.htm#IOleDocumentSite">IOleDocumentSite</A> pointer by calling
<object id="hhal_16" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_16.Click()>QueryInterface</A> on the
<object id="hhal_17" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_17.Click()>IOleClientSite</A> pointer that is passed to
<object id="hhal_18" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_18.Click()>IOleObject::DoVerb</A>.

<LI>Your server then calls the container's <A HREF="references/IOleDocumentSite_ActivateMe.htm#IOleDocumentSite__Ac">IOleDocumentSite::ActivateMe</A> method, passing either a valid <A HREF="references/IOleDocumentView.htm#IOleDocumentView">IOleDocumentView</A> pointer or NULL. If you pass a valid pointer, the document view will be activated. If you pass NULL, the container will call your server's <A HREF="references/IOleDocument_CreateView.htm#IOleDocument__Create">IOleDocument::CreateView</A> method to create the view. 
</OL>

<P>The following is a very simple example of an
<object id="hhal_19" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_19.Click()>IOleObject::DoVerb</A> implementation.

<PRE>STDMETHODIMP COleObject::DoVerb( LONG iVerb,
                                 LPMSG lpmsg,
                                 LPOLECLIENTSITE pActiveSite,
                                 LONG lindex,
                                 HWND hwndParent,
                                 LPCRECT lprcPosRect)
{
HRESULT  hr = E_FAIL;

switch (iVerb)
   {
   case OLEIVERB_SHOW:
   case OLEIVERB_PRIMARY:
   case OLEIVERB_UIACTIVATE:
      {
      //try to get the IOleDocumentSite pointer
      LPOLEDOCUMENTSITE pOleDocSite;
      hr = pActiveSite-&gt;QueryInterface(IID_IOleDocumentSite, (LPVOID*)&amp;pOleDocSite);
      if(SUCCEEDED(hr))
         {
         //passing NULL to this will cause the site to call our CreateView method
         hr = pOleDocSite-&gt;ActivateMe(NULL);
         }
      }
      break;

   default:
      break;
   }

return hr;
}</PRE>

<P>The following is a simple example of an <A HREF="references/IOleDocument_CreateView.htm#IOleDocument__Create">IOleDocument::CreateView</A> implementation.

<PRE>STDMETHODIMP COleDocument::CreateView( IOleInPlaceSite *pInPlaceSite, 
                                       IStream *pStream, 
                                       DWORD dwReserved, 
                                       IOleDocumentView **ppOleDocumentView)
{
HRESULT  hr = E_FAIL;

//NULL the view pointer
*ppOleDocumentView = NULL;

//this implementation only supports one view, so fail if the view already exists
if(!m_pOleDocView)
   {
   m_pOleDocView = new COleDocumentView();
   
   if(m_pOleDocView)
      {
      //AddRef since the pointer is being given away
      m_pOleDocView-&gt;AddRef();

      //if a site has been given, set this as the site for the view just created
      if(pInPlaceSite) 
         {
         m_pOleDocView-&gt;SetInPlaceSite(pInPlaceSite);
         }

      //if given a stream to initialize from, initialize the view state
      if(pStream) 
         {
         m_pOleDocView-&gt;ApplyViewState(pStream);
         }

      *ppOleDocumentView = m_pOleDocView;

      hr = S_OK;
      }
   }
   
return hr;
}</PRE>
<h2><A NAME="DocObj_Server_IOleDocumentView">The IOleDocumentView Interface</A></h2>

<P>The <A HREF="references/IOleDocumentView.htm#IOleDocumentView">IOleDocumentView</A> interface is used by the container to manage the display of your Active Document. The container uses this interface to set the view's site and to activate and deactivate the view, among other things.

 
<h3><A NAME="Getting_Doc_View_Site">Getting the Document View's Site</A></h3>

<P>When your server's <A HREF="references/IOleDocumentView_SetInPlaceSite.htm#IOleDocumentView_SetInPlaceSite">IOleDocumentView::SetInPlaceSite</A> method is called, the server should release any saved
<object id="hhal_20" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_20.Click()>IOleInPlaceSite</A> pointer that it is maintaining, and then call <B>AddRef</B> and store the new <B>IOleInPlaceSite</B> pointer. This pointer will be used to inform the site of in-place activation and deactivation and to obtain the handle of the view's parent window. The parent window handle is obtained by calling this interface's
<object id="hhal_21" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_21.Click()>IOleWindow::GetWindow</A>. The following is a simple example of this method's implementation.

<PRE>STDMETHODIMP COleDocumentView::SetInPlaceSite(IOleInPlaceSite *pNewSite)
{
//clean up previous site if it exists
if(m_pInPlaceSite)
   {
   if(m_fUIActive)
      {
      //call the view's private method that handles UI deactivation
      DeactivateUI();
      }

   m_pInPlaceSite-&gt;Release();
   m_pInPlaceSite = NULL;
   }

m_pInPlaceSite = pNewSite;

if(m_pInPlaceSite)
   {
   m_pInPlaceSite-&gt;AddRef();
   }

return S_OK;
}
</PRE>
<h3><A NAME="Activating_Doc_View">Activating the Document View</A></h3>

<P>The document view activation occurs in the following manner:

<OL>
<LI>The server's <A HREF="references/IOleDocumentView_UIActivate.htm#IOleDocumentView_UIActivate">IOleDocumentView::UIActivate</A> method is called with a nonzero <I>fActivate</I> parameter.

<LI>The server ensures that the object is in-place active. The object is made in-place active by calling the site's
<object id="hhal_22" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_22.Click()>IOleInPlaceSite::OnInPlaceActivate</A> method and showing the view window.

<LI>The server performs whatever actions are necessary to become UI-active. This usually involves adding toolbars, merging menu items, and adding any other UI objects. 

<LI>The server notifies the site that the view is getting UI-activated by calling the site's
<object id="hhal_23" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_23.Click()>IOleInPlaceSite::OnUIActivate</A> method. 
</OL>

<P>Some containers can contain more than one Active Document. These containers notify the object that the Active Document window is getting activated by calling the object's
<object id="hhal_24" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_24.Click()>IOleInPlaceActiveObject::OnDocWindowActivate</A> method with a nonzero argument. This does not normally occur until the object has already become UI-active. When this occurs, the object must display its UI objects, such as menus and toolbars. It is not necessary, however, to completely UI-deactivate the object.

 
<h3><A NAME="Deactivating_Doc_View">Deactivating the Document View</A></h3>

<P>The document view deactivation occurs in the following manner:

<OL>
<LI>The server's <A HREF="references/IOleDocumentView_UIActivate.htm#IOleDocumentView_UIActivate">IOleDocumentView::UIActivate</A> method is called with a zero <I>fActivate</I> parameter.

<LI>The server removes any menu items, toolbars, or other UI objects.

<LI>The server notifies the site that the view is getting UI-deactivated by calling the site's
<object id="hhal_25" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_25.Click()>IOleInPlaceSite::OnUIDeactivate</A> method.
</OL>

<P>Some containers can contain more than one Active Document. These containers notify the object that the Active Document window is getting deactivated by calling the object's
<object id="hhal_26" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_26.Click()>IOleInPlaceActiveObject::OnDocWindowActivate</A> method with a zero argument. When this occurs, the object must hide its UI objects, such as toolbars. It is not necessary to remove the object's menus at this point because the container will do this on its own. It is also not necessary to completely UI-deactivate the object.

 
<h2><A NAME="DocObj_Server_Palette_Manage">Palette Management for Active Document Servers</A></h2>

<P>In general, the palette management scheme for Active Documents is the same as the scheme used for ActiveX&#153; Controls, except that Active Documents do not receive ambient properties from their client. The Active Document server has these responsibilities for managing palettes:


<UL>
<LI>The server notifies the container as to which palette the Active Document needs to use by implementing the
<object id="hhal_27" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_27.Click()>IViewObject::GetColorSet</A> method. This is the same method that OLE controls use to manage their palettes.

<LI>The server must realize its palette in the background except when handling the WM_QUERYNEWPALETTE message (forwarded from the container). Again, this is exactly the way OLE controls handle this.
</UL>

<P>The only difference between the responsibilities of Active Documents and OLE controls is that Active Documents do not handle the DISPID_AMBIENT_PALETTE property.

<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Storage of Control Persistent Data</TITLE>

<META NAME=MS-HKWD CONTENT="Storage of Control Persistent Data">
<META NAME="Keywords" CONTENT="Component Development">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="store_persist"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Storage of Control Persistent Data"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../art/headbarc.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Storage of Control Persistent Data"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR><TR><TD><PRE><IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_3" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_COM_Objects_for_the_Internet>
</object><A STYLE="color:black" HREF=JavaScript:hhal_3.Click()>Topic Contents</A>
</PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="control.htm">Control Instantiation</A>
<IMG SRC="../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="prog_retrieval.htm">Data Path Properties</A>
</PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<h1>Storage of Control Persistent Data</h1>

<P><B>Note</B>  This section is primarily background material to set the stage for a later section. Those interested only in the details of writing good Internet-aware controls and containers can skip directly to that section.<P>For the purposes of this discussion, any given control may potentially have the following types of persistent data:

<UL>
<LI><B>CLSID (16 bytes):</B> The CLSID identifies the class code that can read other data that follows.
<LI><B>Properties (usually less than 10K-20K bytes):</B> The control has a set of named values, accessible generally through OLE Automation (that is, vtable interfaces with type information, <A HREF="../idispatchex/references/IDispatch.htm#IDispatch">IDispatch</A>, or dual interfaces). These may be standard or custom properties, of course.
<LI><B>BLOBs (arbitrary sizes):</B> The control has any number of large binary data blocks, each of which exists in any format (standard or custom) and can be arbitrarily large. Bitmaps, videos, sounds, and other sizable data fall into this category where controls are concerned. "Native data," as used to describe the persistent data of a "compound document object" in OLE Documents, is another example.
</UL>

<P><B>Note</B>  The description of these three elements is for conceptual purposes only. These elements do not describe any kind of actual stream, file, or data format.<P>The following illustration shows the CLSID, properties, and BLOBs.

<P>

<P><IMG SRC="../../art/comobj1.gif" WIDTH="253" HEIGHT="73" ALT="Figure 1: Possible elements of a control's persistent data" >

<P>

<P>There may be controls that have no persistent data; none of these elements exist in a document. In that case, the container has the CLSID of the control (directly from the CLSID attribute in HTML or indirectly from CODE) and the control needs no other initialization after creation.

<P>When a control has any persistent data at all, the CLSID element always exists along with one or both of the other two elements. How these elements are stored in relation to the container document involves the concepts of "embedding" and "linking," which originated in OLE Documents (the OLE compound document architecture), described in a following section. Because of certain limitations inherent in the compound document model, that section extends the "embedding" and "linking" concepts as persistence mechanisms only to allow more flexibility in control implementations. Additional sections provide notes regarding the use of
<object id="hhal_4" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_IPersistMoniker>
</object><A HREF=JavaScript:hhal_4.Click()>IPersistMoniker</A>, HTML, and progressive property retrieval.

<P>Many readers will already be asking themselves how a control might be able to split its properties element from its BLOB elements so that the CLSID and properties are stored in one location and the BLOBs in other locations. This topic is described further in a later section. 

<h2><A NAME="A_Review_of_Embeddin">A Review of Embedding and Linking: OLE Documents</A></h2>

<P>"Object Linking and Embedding" as OLE was originally called in its version 1.0 days, introduced the idea of "embedded compound document objects" and "linked compound document objects." These concepts carried forward into OLE 2:

<OL>
<LI><B>Embedding:</B> All of the object's native data (and CLSID) is completely stored in-line&#151;that is, embedded, within the document itself. The container also stores any container-owned information, such as a presentation cache, with the object's native data.
<LI><B>Linking:</B> The container still stores any container-owned information and the presentation cache in the document but the object's native data (and CLSID) is stored in an outside location. The location is named with some moniker which is itself serialized in the document (usually the object's CLSID is cached here as well for various optimization purposes). Linked objects also have the user interface restriction that they cannot be in-place activated.
</OL>

<P>The following illustration illustrates embedding and linking.

<P>

<P><IMG SRC="../../art/comobj2.gif" WIDTH="410" HEIGHT="234" ALT="Figure 2: Embedding and Linking as persistence mechanisms in OLE Documents" >

<P>

<P>Because of the demands of the presentation cache, a container in OLE Documents must always provide an instance of
<object id="hhal_5" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_5.Click()>IStorage</A> to each embedded or linked objects. In the embedding case, the class code for that object must itself implement
<object id="hhal_6" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_6.Click()>IPersistStorage</A>. In the linking case, OLE provides the "default handler" that handles the moniker and the cache in the container document (through <B>IPersistStorage</B>), but the class code itself has to provide whatever interfaces are appropriate for the binding behavior of the moniker. For example, if a File moniker is used, the class code must implement
<object id="hhal_7" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_7.Click()>IPersistFile</A> to learn from the moniker where the native data resides on the file system.

<P>Note also that an embedded (or even linked) object may internally, in its own native data, store references to external data sources, essentially doing a simpler form of "linking" unbeknownst to the container. The system-provided "Package" object is a perfect example of this. A Package can contain an "embedded" file or a "command line" along with an icon and label (which make up its presentation in the document). When a file is embedded in the package, the file image itself makes up the package's "native" data. When the package contains a command line, the command line is embedded along with the icon and label, but the "native" data is ultimately in some other file in the name space as described by the command line. This can be described as a "link" to that other file, although the link is entirely internal to the package object and is entirely hidden from the container.

<P>While this architecture works fine within the confines of a single high-speed file system, where storage space is cheap and network latency and transfer speed are usually not an issue, it does not apply all that well to an environment like the Internet. In particular there are the following problems:

<UL>
<LI>There is almost always some sizable data stored inside the document, usually the presentation cache. Unless the container chooses to eliminate the cache entirely, the document size becomes significant, which is undesirable in a slow-speed network.
<LI>An embedded object can only use
<object id="hhal_8" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_8.Click()>IPersistStorage</A> as a persistence mechanism, which is simply too "heavyweight" for many types of controls that store all their properties in only use a few hundred bytes or less (such as simple labels, buttons, checkboxes, group boxes, scrolling marquees, and so on). This leads to wasted storage space.
<LI>A link source must generally implement
<object id="hhal_9" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_9.Click()>IPersistFile</A> to support moniker binding, which works only in the domain of UNC path names whereas the Internet requires the ability to use URLs.
<LI>Any external references in the object's native data are known only to the object, which precludes any container participation in managing or assigning those locations and in managing the data stored there.
</UL>

<P>OLE Controls as first introduced in 1994 gave controls the ability to implement the
<object id="hhal_10" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_10.Click()>IPersistStreamInit</A> persistence mechanisms for the "embedding" case, eliminating the caching issue in the process and providing a lightweight alternative to
<object id="hhal_11" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_11.Click()>IPersistStorage</A>. However, OLE Controls was not originally concerned with complete flexibility in persistence mechanisms nor alternate forms of "linking" that addressed all of these issues. 


<h2><A NAME="Persistent_Embedding">Persistent Embedding and Linking (IPersist* Interfaces)</A></h2>

<P>This document extends the concepts of embedding and linking to work outside the particulars of OLE Documents (<object id="hhal_12" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_12.Click()>IPersistStorage</A>, <B>caching</B>,
<object id="hhal_13" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_13.Click()>IPersistFile</A>), specifically to work with all available persistence mechanisms as well as with URL monikers and the possibility of asynchronous retrieval of linked data. The concepts of embedding and linking are described as follows:

<OL>
<LI><B>Persistent Embedding:</B> The object's/control's CLSID, properties, and BLOBs are completely stored in-line&#151;that is, embedded, within the document itself.
<LI><B>Persistent Linking:</B> The object's/control's CLSID, properties, and BLOBs are stored in another location identified with some single moniker.
</OL>

<P><B>Note</B>  The "linking" architecture of OLE Documents is itself more than just a persistence mechanism because it also involves various user interface standards, such as the stipulation that a linked object cannot be in-place activated. Any user interface guidelines concerned with OLE Documents are not of interest to what this section calls "Persistent Embedding" and "Persistent Linking" because the mechanisms here are solely concerned with the location of data and have nothing to do with user interface models. A control can, thus, work with persistently linked data while still being in-place activated.

<P>In addition, in OLE documents the idea of "linking" generally means that the source itself (of the linked object) supplies the exact moniker to name the object. In "persistent linking" the container provides the moniker to the object and the object binds that moniker to some piece of storage in which the object reads or writes its data.<P>The following illustration shows persistent embedding and persistent linking.

<P>

<P><IMG SRC="../../art/comobj3.gif" WIDTH="410" HEIGHT="246" ALT="Figure 3: Persistent Embedding and Persistent Linking" >

<P>

<P>Again, a later section covers the case where one or more of the control's properties name other external storage locations so that the BLOBs do not have to be stored with the control's properties in either the embedding or linking case. For the purposes of this discussion, we assume that any in-line BLOBs in the embedding case are still small so that the byte count of the properties and the BLOBs still fall within a reasonable size. One can simply see these small portions of binary data as additional control properties.


<P>The extensions that enable these generic persistent mechanisms are as follows:

<OL>
<LI>A control may use any of
<object id="hhal_14" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_14.Click()>IPersistStreamInit</A>,
<object id="hhal_15" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_15.Click()>IPersistStorage</A>, <A HREF="reference/IPersistMemory.htm#IPersistMemory">IPersistMemory</A>, and <A HREF="reference/IPersistPropertyBag.htm#IPersistPropertyBag">IPersistPropertyBag</A> as a Persistent Embedding mechanism. A control can choose to support as many of these as it wants.
<LI>A container that wants to use Persistent Embedding must be able to provide controls with storage space appropriate for the preferred interfaces on the control:
<object id="hhal_16" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_16.Click()>IStream</A> for
<object id="hhal_17" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_17.Click()>IPersistStreamInit</A>,
<object id="hhal_18" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_18.Click()>IStorage</A> for
<object id="hhal_19" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_19.Click()>IPersistStorage</A>, memory (<B>void *</B>) for <A HREF="reference/IPersistMemory.htm#IPersistMemory">IPersistMemory</A>, <A HREF="reference/IPropertyBag.htm#IPropertyBag">IPropertyBag</A> for <A HREF="reference/IPersistPropertyBag.htm#IPersistPropertyBag">IPersistPropertyBag</A>, and <A HREF="reference/IPropertyBag2.htm#IPropertyBag2">IPropertyBag2</A> for <A HREF="reference/IPersistPropertyBag2.htm#IPersistPropertyBag2">IPersistPropertyBag2</A>. Containers will determine what method is used to save a control initially (according to its own preference for these methods) and expect that the control can be reinitialized through the same means.
<LI>A control may use any of
<object id="hhal_20" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_20.Click()>IPersistStreamInit</A>,
<object id="hhal_21" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_21.Click()>IPersistStorage</A>, <A HREF="reference/IPersistMemory.htm#IPersistMemory">IPersistMemory</A>, and
<object id="hhal_22" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_22.Click()>IPersistFile</A> as a Persistent Linking mechanism, again choosing to support as many interfaces as wanted (<object id="hhal_23" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_IPersistMoniker>
</object><A HREF=JavaScript:hhal_23.Click()>IPersistMoniker</A> is also an option although the feasibility of this interface is questionable at this time). It is strongly recommended that Internet-aware controls implement at least one other interface than <B>IPersistMemory</B> and <B>IPersistFile</B> because both of these require that all the data exists locally, which is unsuitable for use with asynchronous data transfers.
<LI>A container that wants to use Persistent Linking must use a moniker that supports the possible persistence mechanisms that a control might support. In the immediate term, this is limited to the URL moniker.
<LI>A container is allowed to make a copy of a control's persistent data at any time through any
<object id="hhal_24" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_24.Click()>IPersist*::Save</A> member functions regardless of which
<object id="hhal_25" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_25.Click()>IPersist*</A> interface was used to initialize the control. When doing so, the container must not pass TRUE as the <i>fRemember</i> argument of <B>IPersistStorage::Save</B>,
<object id="hhal_26" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_IPersistMoniker_Save>
</object><A HREF=JavaScript:hhal_26.Click()>IPersistMoniker::Save</A>, and
<object id="hhal_27" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_27.Click()>IPersistFile::Save</A> and must pass FALSE as the <i>fClearDirty</i> argument to <B>IPersistStreamInit::Save</B>, <A HREF="reference/IPersistPropertyBag_Save.htm#IPersistPropertyBag::Save">IPersistPropertyBag::Save</A>, and <A HREF="reference/IPersistMemory_Save.htm#IPersistMemory::Save">IPersistMemory::Save</A>. The container must also call the <B>SaveCompleted</B> members of
<object id="hhal_28" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_28.Click()>IPersistStorage</A> and
<object id="hhal_29" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_29.Click()>IPersistFile</A> (and perhaps
<object id="hhal_30" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_IPersistMoniker>
</object><A HREF=JavaScript:hhal_30.Click()>IPersistMoniker</A>) with NULL arguments after calling their <B>Save</B> members.
</OL>

<P>The following table summarizes all these
<object id="hhal_31" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_31.Click()>IPersist*</A> interfaces:

<TABLE>
<TR><TD><B>Storage Location</B></TD><TD><B>Persistence Interface</B></TD><TD><B>Comments
</B></TD></TR>
<TR><TD>Storage Element</TD><TD><object id="hhal_32" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_32.Click()>IPersistStorage</A></TD><TD>Standard in OLE Documents; the container provides an
<object id="hhal_33" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_33.Click()>IStorage</A> pointer to the storage element in which the control can create any structure it wants. This will be potentially common for author-time scenarios, typically rare for publish/run-time scenarios.
</TD></TR>
<TR><TD>Expandable Stream</TD><TD><object id="hhal_34" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_34.Click()>IPersistStreamInit</A>,
<object id="hhal_35" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_35.Click()>IPersistStream</A></TD><TD>Most suitable for small and fully embedded controls; all the data including paths goes into one stream which can be easily placed inline in the document.
<object id="hhal_36" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_36.Click()>IPersistStreamInit</A> is a superset and replacement for
<object id="hhal_37" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_37.Click()>IPersistStream</A>. <B>IPersistStreamInit</B> should be used preferentially.
</TD></TR>
<TR><TD>Fixed-Size Memory Block</TD><TD><A HREF="reference/IPersistMemory.htm#IPersistMemory">IPersistMemory</A></TD><TD>Alternative for
<object id="hhal_38" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_38.Click()>IPersistStreamInit</A>, but allows the container to specify a fixed-size memory allocation as the storage medium with the restriction that the control does not attempt to access data outside that boundary.
</TD></TR>
<TR><TD>"Property Bag" (container-supplied)</TD><TD><A HREF="reference/IPersistPropertyBag.htm#IPersistPropertyBag">IPersistPropertyBag</A></TD><TD>Alternative for
<object id="hhal_39" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_39.Click()>IPersistStreamInit</A> in which the control tells the container to save and load individual properties (described in a
<object id="hhal_40" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_40.Click()>VARIANT</A>) through <A HREF="reference/IPropertyBag.htm#IPropertyBag">IPropertyBag</A>. The implementor of the property bag can deal with each property in any way it wants.</TD></TR>
<TR><TD>"Property Bag 2" (container-supplied)</TD><TD><A HREF="reference/IPersistPropertyBag2.htm#IPersistPropertyBag2">IPersistPropertyBag2</A></TD><TD>Alternative for
<object id="hhal_41" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_41.Click()>IPersistStreamInit</A> in which the control tells the container to save and load individual properties (described in a
<object id="hhal_42" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_42.Click()>VARIANT</A>) through <A HREF="reference/IPropertyBag2.htm#IPropertyBag2">IPropertyBag2</A>. The implementor of the property bag can deal with each property in any way it wants.</TD></TR>
<TR><TD>File</TD><TD><object id="hhal_43" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_43.Click()>IPersistFile</A></TD><TD>The object is given a UNC path name and is told to read or write its data to that file.
</TD></TR>
<TR><TD>External: named with a moniker</TD><TD><object id="hhal_44" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_IPersistMoniker>
</object><A HREF=JavaScript:hhal_44.Click()>IPersistMoniker</A></TD><TD>The object is given a moniker and told to read and write its data to whatever storage mechanism (<object id="hhal_45" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_45.Click()>IStorage</A>,
<object id="hhal_46" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_46.Click()>IStream</A>, <B>ILockBytes</B>, or
<object id="hhal_47" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_47.Click()>IDataObject</A>) it wants when dealing with that external data. The storage mechanism may also be asynchronous; in that case, the
<object id="hhal_48" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_IPersistMoniker>
</object><A HREF=JavaScript:hhal_48.Click()>IPersistMoniker</A> implementation understands the necessary considerations.
</TD></TR>
</TABLE>
<P>Details about <A HREF="reference/IPersistMemory.htm#IPersistMemory">IPersistMemory</A>, <A HREF="reference/IPersistPropertyBag.htm#IPersistPropertyBag">IPersistPropertyBag</A>, and related interfaces are provided in a later section. For information on
<object id="hhal_49" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_IPersistMoniker>
</object><A HREF=JavaScript:hhal_49.Click()>IPersistMoniker</A>, see <B>Asynchronous Monikers</B>.


<P>These extensions are basically concerned with the protocol through which a container communicates persistence intentions (<object id="hhal_50" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_50.Click()>IPersist*::Load</A> and so on) to controls in its document, which also addresses the needs of author, publish, and run-time scenarios. At author time, the designer may want to keep all the data for all controls in-line so there is only one document to manage, or some controls may be told to save and load their data in another site already. At publish time, the author might want to store the bulky portions of data (controls with large BLOBs) in other locations, thus breaking the document up into its final distribution on the Internet. At run time, then, the controls in the document will access their data as instructed to do so by the container.

<P>An Internet-aware object or control is one that understands the options available here and implements support for whatever mechanisms it needs and can support best. Such a control need not support all storage cases and can choose to support only those it sees fit to support or can support reasonably well. At a minimum, controls that have any persistent data should implement at least
<object id="hhal_51" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_51.Click()>IPersistStreamInit</A> or
<object id="hhal_52" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_52.Click()>IPersistStorage</A> (whichever is most suitable), adding other interfaces as features demand them. For example, controls whose persistent data is made up entirely of name/value property pairs will likely implement <A HREF="reference/IPersistPropertyBag.htm#IPersistPropertyBag">IPersistPropertyBag</A> as well). Information about why a control might choose to implement
<object id="hhal_53" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_IPersistMoniker>
</object><A HREF=JavaScript:hhal_53.Click()>IPersistMoniker</A> is provided in a later section.

<P>If a control for some reason only implements one persistence interface out of
<object id="hhal_54" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_54.Click()>IPersistStreamInit</A>,
<object id="hhal_55" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_55.Click()>IPersistStorage</A>, <A HREF="reference/IPersistMemory.htm#IPersistMemory">IPersistMemory</A>, and <A HREF="reference/IPersistPropertyBag.htm#IPersistPropertyBag">IPersistPropertyBag</A>, it must mark itself with the appropriate component category to say that support for that interface in a container is mandatory. These categories are described in a later section. Controls that implement <B>IPersistStorage</B> and can work in down-level containers as simple compound document embeddings can mark themselves with the "Insertable" registry key so that they appear in the Insert Object UI of such containers (a category is not used because down-level containers don't see categories).

<P>Note that it takes less than 200 bytes to persistently save values for all of the standard properties defined for a full-featured OLE Control, such as text, caption, colors, drawing styles, and font; if the control wants to include a small metafile for immediate rendering, adding a few hundred bytes more bytes should not be a big problem.

<P>On the other hand, containers should support&#151;for Persistent Embedding&#151;as many different persistence interfaces as reasonable with
<object id="hhal_56" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_56.Click()>IPersistStreamInit</A> and
<object id="hhal_57" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_57.Click()>IPersistStorage</A> as a baseline, adding support for <A HREF="reference/IPersistMemory.htm#IPersistMemory">IPersistMemory</A> for optimization purposes and <A HREF="reference/IPersistPropertyBag.htm#IPersistPropertyBag">IPersistPropertyBag</A> for Save-As-Text capabilities. Authoring tools and containers must also pay attention to component categories when it does not implement support for any one interface so that it can avoid inserting a control into a document when its persistence needs cannot be met. 

<P>In this Persistent Embedding case as well, the container chooses which interface it will attempt to use first with any given control. Some containers may look for
<object id="hhal_58" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_58.Click()>IPersistStorage</A> before
<object id="hhal_59" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_59.Click()>IPersistStreamInit</A>; others will try <A HREF="reference/IPersistPropertyBag.htm#IPersistPropertyBag">IPersistPropertyBag</A> before all others, or will place <A HREF="reference/IPersistMemory.htm#IPersistMemory">IPersistMemory</A> before <B>IPersistStreamInit</B> as the former might be more efficient for the container. Because the size of embedded data is of high concern for Internet-aware containers, <B>IPersistStreamInit</B> and <B>IPersistMemory</B> should generally be given priority over <B>IPersistStorage</B> and <B>IPersistPropertyBag</B> as they generally produce the smallest amount of data.

<P>Note that it is perfectly reasonable for a container to have a control save its data into any location specified in any of these interfaces after which the container copies the resulting binary data to another location altogether. The container then saves a reference to that other location so that when loading the control, it can recreate the necessary storage structure and hand it back to the control. This option, by the way, has been available in OLE since version 1.0.


<P>For Persistent Linking, containers need not be concerned with the interfaces directly but must understand its own usage and storage of monikers, specifically URL and other asynchronous monikers. Because the monikers themselves internally query for and call the various
<object id="hhal_60" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_60.Click()>IPersist*</A> interfaces, the container does not have to understand those persistence interfaces directly. Such intelligence is encapsulated in the monikers.

<P>In this case, the moniker itself chooses the priority as the container merely needs only to choose how it will save the moniker. As described in <B>Asynchronous Monikers</B>, such monikers will look for interfaces in the order of
<object id="hhal_61" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_IPersistMoniker>
</object><A HREF=JavaScript:hhal_61.Click()>IPersistMoniker</A>,
<object id="hhal_62" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_62.Click()>IPersistStreamInit</A>,
<object id="hhal_63" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_63.Click()>IPersistStorage</A>, <A HREF="reference/IPersistMemory.htm#IPersistMemory">IPersistMemory</A>, and
<object id="hhal_64" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_64.Click()>IPersistFile</A>, the latter two requiring that all the data is available before any members of either interface can be called.

<P>The use of IPersistMoniker is questionable and has limitations. This issue is described in a later section.

<P>In both embedding and linking cases, the container is responsible for handling the details of asynchronous storage as described in "Compound Files on the Internet" and "Asynchronous Monikers Design Specification." In short, all persistence interfaces other than
<object id="hhal_65" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_IPersistMoniker>
</object><A HREF=JavaScript:hhal_65.Click()>IPersistMoniker</A> are considered synchronous in that the control expects all the data to be available when it gets a call to
<object id="hhal_66" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_66.Click()>IPersist*::Load</A>. In the case of
<object id="hhal_67" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_67.Click()>IPersistFile</A> and <A HREF="reference/IPersistMemory.htm#IPersistMemory">IPersistMemory</A>, this is explicit because you can't create the file or the memory block unless you have the data.

<P>In the case of <B>IPersistStream[Init]</B> and
<object id="hhal_68" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_68.Click()>IPersistStorage</A>, a container can pass either a "synchronous" storage object or a "blocking" storage object. In the "synchronous" case, the container will retrieve all the data before calling
<object id="hhal_69" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_69.Click()>IPersist*::Load</A> so nothing has changed from all historical uses of these interfaces. In the "blocking" case, the data might not actually be available, but any call that the control makes to <B>IStorage::OpenStorage</B>, <B>IStorage::OpenStream</B>, or
<object id="hhal_70" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_70.Click()>IStream::Read</A> (and so on) will simply not return until the data is actually available. From the control's point of view, the storage or stream objects are simply slow&#151;the control won't usually care because it just waits for the call to return. But from the container's point of view, simultaneously loading multiple controls using asynchronous "blocking" storage may be a perfect way to manage multiple data transfers.


<h2><A NAME="Use_of_IPersistMonik">Use of IPersistMoniker</A></h2>

<P>As described in a previous section, the
<object id="hhal_71" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_IPersistMoniker>
</object><A HREF=JavaScript:hhal_71.Click()>IPersistMoniker</A> interface is the primary interface through which an asynchronous moniker will attempt to have a control initialize in the Persistent Linking case. In general, <B>IPersistMoniker</B> is the successor of
<object id="hhal_72" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_72.Click()>IPersistFile</A> that allows persistence to and from any abstract location that can be named with a moniker as opposed to only a file name. The interface is defined as follows (see <B>Asynchronous Monikers</B> for complete information):

<PRE>
interface IPersistMoniker : public IPersist
   {
    HRESULT IsDirty(void);
    HRESULT InitNew([in] IMoniker* pmkStore, [in] DWORD grfMode
        ,[in] IBindCtx* pbindctx);
    HRESULT Load([in] IMoniker *pmkStore, [in] DWORD grfMode
        , [in] IBindCtx *pBindCtx);
    HRESULT Save([in] IMoniker *pmkStore, [in] BOOL fRemember
        , [in] IBindCtx *pBindCtx);
    HRESULT SaveCompleted([in] IMoniker *pmkStore);
    HRESULT GetCurMoniker([out] IMoniker **ppmkStore);
    }
</PRE>

<P>In short, this interface is just like
<object id="hhal_73" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_73.Click()>IPersistFile</A> (plus the <B>InitNew</B> member) except that where <B>IPersistFile</B> takes a filename string,
<object id="hhal_74" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_IPersistMoniker>
</object><A HREF=JavaScript:hhal_74.Click()>IPersistMoniker</A> takes a moniker and a bind context. The semantics of the <B>Load</B> and <B>Save</B> members are as follows:
<PRE>
pmkStore-&gt;BindToStorage(pBindCtx, ..., IID_&lt;xxx&gt;, &amp;pInterface);

if (load)
    pInterface-&gt;[Read](...)   //May be asynchronous
else if (save)
    pInterface-&gt;[Write](...)
</PRE>

<P>That is, the control is asked to save or load itself from a moniker using the supplied bind context, and the control is responsible to call
<object id="hhal_75" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_75.Click()>IMoniker::BindToStorage</A> to get the appropriate storage-related interface to which it reads (or writes) its data. This may involve asynchronous considerations as described in the <B>Internet Files</B> and <B>Asynchronous Monikers</B> documents. When the control obtains an asynchronous
<object id="hhal_76" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_76.Click()>IStorage</A> or
<object id="hhal_77" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_77.Click()>IStream</A>, it has to ensure that it can handle
<object id="hhal_78" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_78.Click()>IMoniker::BindToObject</A>, returning a NULL interface pointer that will be passed to
<object id="hhal_79" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_IBindStatusCallback_OnDataAvailable>
</object><A HREF=JavaScript:hhal_79.Click()>IBindStatusCallback::OnDataAvailable</A> when it becomes available;
<object id="hhal_80" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_80.Click()>IStream::Read</A> and other reading calls that might return E_PENDING; and data that becomes available in segments through <B>IBindStatusCallback::OnDataAvailable</B>. The considerations here are the same as for any client of an asynchronous monikers, so again, see <B>Asynchronous Monikers</B> for more information. A later section also discusses this to some extent in terms of a control's use of "data paths."

<P>Thus, implementing
<object id="hhal_81" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_IPersistMoniker>
</object><A HREF=JavaScript:hhal_81.Click()>IPersistMoniker</A> is not a requirement, even for asynchronous transfer of persistently linked data that goes on outside the control before any of its other
<object id="hhal_82" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_82.Click()>IPersist*::Load</A> members are called. This is because asynchronous monikers themselves (that is, the URL moniker presently) will take whatever data it sees at the named location and package that data in some storage object appropriate for other
<object id="hhal_83" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_83.Click()>IPersist*</A> interfaces. That is, if the moniker does not find <B>IPersistMoniker</B> on the object, it will query for
<object id="hhal_84" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_84.Click()>IPersistStreamInit</A>. If that interface exists, the moniker will wrap up the data in an asynchronous-blocking
<object id="hhal_85" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_85.Click()>IStream</A> and pass it to the control. If the interface is not there, the moniker will try other interfaces like
<object id="hhal_86" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_86.Click()>IPersistStorage</A>, <A HREF="reference/IPersistMemory.htm#IPersistMemory">IPersistMemory</A>, and
<object id="hhal_87" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_87.Click()>IPersistFile</A>, in turn, wrapping the data in an asynchronous-blocking
<object id="hhal_88" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_88.Click()>IStorage</A> if needed, or retrieving all the data and placing it in memory or a file before handing it to the control.




<h2><A NAME="Relationship_to_the_">Relationship to the HTML OBJECT Tag</A></h2>

<P>It is useful at this point to describe the relationships between the persistent embedding and persistent linking scenarios described above and the attributes described in <B>HTML Standards</B>, namely the CLASSID, DATA, and PARAM attributes within an OBJECT tag.

<P>In the persistent embedding case, the authoring tool that is writing the HTML document first asks the control to save all of its data through some persistence interface. After the
<object id="hhal_89" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_89.Click()>IPersist*::Save</A> call, the authoring tool has some bucket of control-created bits and the CLSID for the control itself. When writing the HTML OBJECT tag, the authoring tool always writes a CLASSID attribute and then includes a DATA attribute describing the control's data in some way. In all cases, the data must have a CLSID in the first 16 bytes to identify the exact format of the data.

<P>In some cases, the stream data might be too large. In that case, the authoring tool might use <A HREF="reference/IPersistPropertyBag.htm#IPersistPropertyBag">IPersistPropertyBag</A> to be handed each property in turn, which it would then write into the HTML document as individual PARAM attributes. Other PARAM attributes might also be later added manually to this set by someone editing the HTML directly.




<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>

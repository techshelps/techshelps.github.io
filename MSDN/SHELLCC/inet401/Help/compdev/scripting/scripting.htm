<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ActiveX Scripting</TITLE>

<META NAME=MS-HKWD CONTENT="ActiveX Scripting">
<META NAME="Keywords" CONTENT="Component Development">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="bk_activex_scripting_engines"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="ActiveX Scripting"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../art/headbarc.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="ActiveX Scripting"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR><TR><TD><PRE><IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="../compdev.htm#set_components">Topic Contents</A>
</PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="../active_docs/references/PRINTFLAG.htm">PRINTFLAG</A>
<IMG SRC="../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="hosts.htm">ActiveX Scripting Hosts</A>
</PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<h1>ActiveX Scripting</h1>

<P>Microsoft&#174; ActiveX&#153; Scripting introduces a new way for an application to add scripting and OLE Automation capabilities. With the advent of ActiveX Scripting, hosts can call upon disparate scripting engines from multiple sources and vendors to perform scripting between components. The implementation of the script itself&#151;language, syntax, persistent format, execution model, and so on&#151;is left to the script vendor. The designers have taken care to allow hosts that rely on ActiveX Scripting to use arbitrary language back ends.

<P><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" ALT="" ><A CLASS=tctop HREF="hosts.htm#ch_script_host">ActiveX Scripting Hosts</A>

<P><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" ALT="" ><A CLASS=tctop HREF="../engines/engines.htm#ch_script_engine">ActiveX Scripting Engines</A>

<P><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" ALT="" ><A CLASS=tctop HREF="../idispatchex/IDispatchEx.htm#ch_script_idispex">IDispatchEx</A>

<P><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" ALT="" ><A CLASS=tctop HREF="../iprovidemultipleclassinfo/multinfo.htm#ch_multinfo">IProvideMultipleClassInfo</A>

<P><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" ALT="" ><A CLASS=tctop HREF="../../debug/activdbg.htm">Active Script Debugging Interfaces</A>
<!-- *************************************************************** -->

<P><B>ActiveX Scripting Terms</B>

<P>This list contains definitions of the scripting-related terms used in this document.
<TABLE>
<TR><TD><B>Term
 </B></TD><TD><B>Definition
</B></TD></TR><TR><TD>Code object
 </TD><TD>An instance created by the scripting engine that is associated with a named item, such as the module behind a form in Visual Basic&#174;, or a C++ class associated with a named item. Preferably, this is an OLE Component Object Model (COM) object that supports OLE Automation so the host or other nonscript entity can manipulate the code object.
</TD></TR><TR><TD>Named item
 </TD><TD>An OLE COM object (preferably one that supports OLE Automation) that the host deems interesting to the script. Examples include the HTML Page and Browser in a Web browser, and the Document and Dialogs in Microsoft Word.
</TD></TR><TR><TD>Script
 </TD><TD>The data that makes up the program that the scripting engine runs. A script can be any contiguous executable data, including pieces of text, blocks of pcode, or even machine-specific executable byte codes. A host loads a script into the scripting engine through one of the <B>IPersist*</B> interfaces or through the <A HREF="../engines/references/IActiveScriptParse.htm#IActiveScriptParse">IActiveScriptParse</A> interface.
</TD></TR><TR><TD>Scripting engine
 </TD><TD>The OLE object that processes scripts. A scripting engine implements the <A HREF="../engines/references/IActiveScript.htm#IActiveScript">IActiveScript</A> and, optionally, <A HREF="../engines/references/IActiveScriptParse.htm#IActiveScriptParse">IActiveScriptParse</A> interfaces.
</TD></TR><TR><TD>Scripting host
 </TD><TD>The application or program that owns the ActiveX Scripting engine. The host implements the <A HREF="references/IActiveScriptSite.htm#IActiveScriptSite">IActiveScriptSite</A> and, optionally, <A HREF="references/IActiveScriptSiteWindow.htm#IActiveScriptSiteWindow">IActiveScriptSiteWindow</A> interfaces.
</TD></TR><TR><TD>Scriptlet
 </TD><TD>A portion of a script that gets attached to an object through the <A HREF="../engines/references/IActiveScriptParse.htm#IActiveScriptParse">IActiveScriptParse</A> interface. The aggregate collection of scriptlets is the script.
</TD></TR><TR><TD>Script language
 </TD><TD>The language in which a script is written (VBScript, for example) and the semantics of that language.
</TD></TR></TABLE>
<!-- *************************************************************** --><!-- *************************************************************** --><P><B>ActiveX Scripting Background</B>

<P>ActiveX Scripting components fall into two categories: ActiveX Scripting hosts and ActiveX Scripting engines. A host creates a scripting engine and calls on the engine to run the scripts. Examples of ActiveX Scripting hosts include:

<UL>
<LI>Microsoft Internet Explorer
<LI>Internet authoring tools
<LI>Shell
</UL>

<P>ActiveX Scripting engines can be developed for any language or run-time environment, including:

<UL>
<LI>Microsoft Visual Basic for Applications (VBA)
<LI>Microsoft Visual Basic Scripting Edition (VBScript)
<LI>Perl
<LI>Lisp
</UL>

<P>To make implementation of the host as flexible as possible, an OLE Automation wrapper for ActiveX Scripting is provided. However, a host that uses this wrapper object to instantiate the scripting engine does not have the degree of control over the run-time name space, the persistence model, and so on, that it would if it used ActiveX Scripting directly.

<P>The ActiveX Scripting design isolates the interface elements required only in an authoring environment so that nonauthoring hosts (such as browsers and viewers) and script engines (for example, VBScript) can be kept lightweight. 

<!-- *************************************************************** -->
<!-- *************************************************************** -->

<P><B>ActiveX Scripting Basic Architecture</B> 

<P>The following illustration shows the interaction between an ActiveX Scripting host and an ActiveX Scripting engine.

<P>

<P><IMG SRC="../../art/olescr01.gif" WIDTH="497" HEIGHT="302" ALT="" >

<P>

<P>Following is a description of the steps involved in the interaction between the host and engine. The actual nesting of the function calls is omitted for clarity. 

<OL>
<LI><B>Create a Project.</B> The host loads a project or document. (This step is not particular to ActiveX Scripting, but is included here for completeness.)
<LI><B>Create the ActiveX Scripting Engine.</B> The host calls
<object id="hhal_3" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_3.Click()>CoCreateInstance</A> to create a new ActiveX Scripting engine, specifying the class identifier (CLSID) of the specific scripting engine to use. For example, the HTML browsing component of Internet Explorer receives the scripting engine's class identifier through the <B>CLSID=</B> attribute of the HTML &lt;OBJECT&gt; tag.
<LI><B>Load the Script.</B> If the script contents have been persisted, the host calls the script engine's <B>IPersist*::Load</B> method to feed it the script storage, stream, or property bag. Otherwise, the host uses either the <B>IPersist*::InitNew</B> or <A HREF="../engines/references/IActiveScriptParse_InitNew.htm#IActiveScriptParse__">IActiveScriptParse::InitNew</A> method to create a null script. A host that maintains a script as text can use <A HREF="../engines/references/IActiveScriptParse_ParseScriptText.htm#IActiveScriptParse__">IActiveScriptParse::ParseScriptText</A> to feed the scripting engine the text of the script, after calling <B>IActiveScriptParse::InitNew</B>.
<LI><B>Add Named Items.</B> For each top-level named item (such as pages and forms) imported into the scripting engine's name space, the host calls the <A HREF="../engines/references/IActiveScript_AddNamedItem.htm#IActiveScript__AddNa">IActiveScript::AddNamedItem</A> method to create an entry in the engine's name space. This step is not necessary if top-level named items are already part of the persistent state of the script loaded in step 3. A host does not use <B>IActiveScript::AddNamedItem</B> to add sublevel named items (such as controls on an HTML page); rather, the engine indirectly obtains sublevel items from top-level items by using the host's
<object id="hhal_4" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_4.Click()>ITypeInfo</A> and <A HREF="../idispatchex/references/IDispatch.htm#IDispatch">IDispatch</A> interfaces.
<LI><B>Run the Script.</B> The host causes the engine to start running the script by setting the SCRIPTSTATE_CONNECTED flag in the <A HREF="../engines/references/IActiveScript_SetScriptState.htm#IActiveScript__SetSc">IActiveScript::SetScriptState</A> method. This call would likely perform any scripting engine construction work, including static binding, hooking up to events (see below), and executing code, in a way similar to a scripted <B>main()</B> function.
<LI><B>Get Item Information.</B> Each time the script engine needs to associate a symbol with a top-level item, it calls the <A HREF="references/IActiveScriptSite_GetItemInfo.htm#IActiveScriptSite__G">IActiveScriptSite::GetItemInfo</A> method, which returns information about the given item.
<LI><B>Hook Up Event Advise.</B> Before starting the actual script, the scripting engine connects to the events of all the relevant objects through the
<object id="hhal_5" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_5.Click()>IConnectionPoint</A> interface. 
<LI><B>Invoke Properties and Methods.</B> As the script runs, the scripting engine realizes references to methods and properties on named objects through
<object id="hhal_6" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_6.Click()>IDispatch::Invoke</A> or other standard OLE binding mechanisms.
</OL>
<!-- *************************************************************************** --><!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>

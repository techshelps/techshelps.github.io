<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Signing and Checking Code with Authenticode</TITLE>

<META NAME=MS-HKWD CONTENT="Signing and Checking Code with Authenticode">
<META NAME="Keywords" CONTENT="Component Development">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="sec_authenticode_signing"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Signing and Checking Code with Authenticode"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../../art/headbarc.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Signing and Checking Code with Authenticode"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR><TR><TD><PRE><IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="../authenticode.htm#ch_codesign">Topic Contents</A>
</PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="intro.htm">Introduction to Code Signing</A>
<IMG SRC="../../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="glossary.htm">Glossary</A>
</PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<h1>Signing and Checking Code with Authenticode</h1>

<P>This section demonstrates how to sign code by creating digital signatures and associating them with files using Authenticode, which is provided with the Internet Client SDK. Creating a fully verifiable certificate might assume the existence of a complex hierarchy of CAs. A root certificate and a root private key are provided for testing purposes only. Independent software vendors must obtain a certificate from GTE, VeriSign, Inc., or another CA for signing code that will be distributed to the public. 

<P>Authenticode consists of programs to digitally sign files and programs to check that the files were, indeed, successfully signed. The programs are: 
<UL>
<LI>MakeCert, which creates a test X.509 certificate. 
<LI>Cert2SPC, which creates a test SPC. 
<LI>SignCode, which signs a file. 
<LI>ChkTrust, which checks the validity of the file. 
<LI>MakeCTL, which creates a certificate trust list.
<LI>CertMgr, which manages certificates, certificate trust lists, and certificate revocation lists. 
<LI>SetReg, which sets registry keys that control the certificate verification process. 
</UL>

<P>All user input to these programs is now case insensitive. Additionally, separate options now exist for the key-pair name and the private-key file.
<h2><A NAME="MakeCert">MakeCert</A></h2>

<P>Use the MakeCert test program to generate a test X.509 certificate. MakeCert performs the following tasks: 
<OL>
<LI>Creates a public/private key pair for digital signatures and associates it with a name that you choose. 
<LI>Associates the key pair with a publisher's name that you choose. 
<LI>Creates an X.509 certificate, signed by the test root key or one you specify, that binds your name to the public part of the key pair. The certificate is output to a file, a system certificate store, or both. 
</OL>

<P>The syntax for invoking MakeCert is: 

<P><B>MakeCert</B> [<I>basic options </I>| <I>extended options</I>] <I>outputFile</I> 

<P>MakeCert's options consist of <I>basic options</I> and <I>extended options</I>. <I>Basic options</I> are the most commonly used ones to create a certificate. <I>Extended options</I> provide more flexibility. The options for MakeCert are also divided into three functional groups: 
<OL>
<LI>Options applicable to SPC-file, private-key, and certificate store technology. 
<LI>Options specific to SPC-file and private-key technology only. 
<LI>Options specific to certificate store technology only. 
</OL>

<P>Options in Groups 2 and 3 cannot be mixed, with the exception of the <B>&#150;ic</B> option. 
<h3><A NAME="MakeCert_Group_1_Opt">MakeCert Group 1 Options</A></h3>

<P>The following Group 1 options may be applied in all cases. 

<P>  Options are sorted alphabetically in the left (IE 4.0) column, and the corresponding IE 3.02 options are given in the middle column. IE 3.02 options that have no direct IE 4.0 equivalent will say either "<B>N/A</B>" or "(See -<I>option</I>)" in the IE 4.0 column, and are sorted alphabetically into the order of IE 4.0 options. For example, the IE 3.02 <B>-C</B> option follows the IE 4.0 <B>-b</B> option.
<TABLE>
<TR><TD><B>For IE 4.0</B>
</TD><TD><B>For IE 3.02 UPD</B>
</TD><TD><B>Description</B>
</TD></TR>
<TR><TD><B>-a</B> <I>algorithm</I>
</TD><TD><B>-a</B>
</TD><TD>For IE3.02: Indicates the SHA1 hash algorithm should be used. MD5 is the default
For IE4.0: The hash algorithm. Must be set to either <I>SHA1</I> or <I>MD5. </I>The default is <I>MD5</I>.
</TD></TR>
<TR><TD><B>-b</B> <I>dateStart</I>
</TD><TD><B>-B:</B><I>dateStart</I>
</TD><TD>The date the certificate first becomes valid. The default is when the certificate is created. The format of <I>dateStart</I> is mm/dd/yyyy.
</TD></TR>
<TR><TD>(See <B>-$</B>)
</TD><TD><B>-C</B>
</TD><TD>The certificate will be used by commercial software publishers. 
</TD></TR>
<TR><TD>(See <B>-$</B>)
</TD><TD><B>-C:</B><I>f</I>
</TD><TD>The certificate will be used by commercial software publishers who have met the minimum financial criteria.
</TD></TR>
<TR><TD><B>-cy</B> <I>certificateTypes</I>
</TD><TD><B>-t:</B><I>types</I>
</TD><TD>For IE3.02: The certificate type. This parameter can be <I>E</I> for end-entity, <I>C</I> for certificate authority, or both. For IE4.0: The certificate type. Can be <I>end</I>, <I>authority</I>, or <I>both</I>. <I>End</I> stands for end-entity and <I>authority</I> stands for certificate authority.
</TD></TR>
<TR><TD><B>-d</B> <I>displayName</I>
</TD><TD><B>-d:</B><I>displayName</I>
</TD><TD>The display name of the subject.
</TD></TR>
<TR><TD><B>-e</B> <I>dateEnd</I>
</TD><TD><B>-E:</B><I>dateEnd</I>
</TD><TD>The date when the validity period ends. The default is the year 2039.
</TD></TR>
<TR><TD><B>-eku</B> <I>OID1,OID2...</I>
</TD><TD><B>N/A</B>
</TD><TD>Inserts a list of one or more comma-separated enhanced key usage Object Identifiers (OIDs) into the certificate. For example, <I>-eku 1.3.6.1.5.5.7.3.2</I> inserts the client authentication OID. See wincrypt.h in <A HREF="http://premium.microsoft.com/isapi/devonly/prodinfo/msdnprod/msdnlib.idc?theURL=/msdn/library/welcome/dsmsdn/FE6/DEB/S44B8.HTM" TARGET="_top">CryptoAPI 2.0</A> for definitions of allowable OIDs.
</TD></TR>
<TR><TD><B>N/A</B>
</TD><TD><B>-g</B>
</TD><TD>Creates a glue certificate (IE 3.02 only.)
</TD></TR>
<TR><TD><B>-h</B> <I>numChildren</I>
</TD><TD><B>-h:</B><I>numChildren</I>
</TD><TD>The maximum height of the tree below this certificate.
</TD></TR>
<TR><TD>(See <B>-$</B>)
</TD><TD><B>-I</B>
</TD><TD>The certificate will be used by individual software publishers.
</TD></TR>
<TR><TD><B>-l</B> <I>policyLink</I>
</TD><TD><B>-l:</B><I>policyLink</I>
</TD><TD>A link to SPC agency policy information (for example, a URL).
</TD></TR>
<TR><TD><B>-m</B> <I>nMonths</I>
</TD><TD><B>-D:</B><I>nMonths</I>
</TD><TD>The duration of the validity period.
</TD></TR>
<TR><TD>(See <B>-a</B>)
</TD><TD><B>-m</B>
</TD><TD>The MD5 hash algorithm should be used. This is the default.
</TD></TR>
<TR><TD><B>-n</B> <I>name</I>
</TD><TD><B>-n:</B><I>name</I>
</TD><TD>The name for the publisher's certificate. This name must conform to the X.500 standard. The simplest method is to use "CN=<I>MyName</I>" format. For example: <B>-n</B> "CN=Test".
</TD></TR>
<TR><TD><B>-nscp</B>
</TD><TD><B>-N</B>
</TD><TD>The Netscape client authentication extension should be included.
</TD></TR>
<TR><TD>-<B>r</B>
</TD><TD><B>-r</B>
</TD><TD>Creates a self-signed certificate.
</TD></TR>
<TR><TD><B>-sc</B><I>subjectCertFile</I>
<B>-U:</B><I>subjectCertFile</I>
</TD><TD>The certificate file name with the existing subject public key to be used.
</TD></TR>
<TR><TD><B>-sk</B> <I>subjectKey</I>
</TD><TD><B>-u:</B><I>subjectKey</I>
</TD><TD>The location of the subject's key container which holds the private key. If a key container does not exist, one is created. If neither of the <B>-sk</B> or <B>-sv</B> options are used, the JoeSoft key container is created and used by default.
</TD></TR>
<TR><TD><B>-sky</B> <I>subjectKeySpec</I>
</TD><TD><B>N/A</B>
</TD><TD>The subject's key specification, which must be one of three possible values:

<P>1. <I>Signature</I>, which stands for AT_SIGNATURE key specification.

<P>2. <I>Exchange</I>, which stands for AT_KEYEXCHANGE key specification.

<P>3. An integer, such as <I>3</I>.

<P>See notes on key specifications below.
</TD></TR>
<TR><TD><B>-sp</B> <I>subjectProviderName</I>
</TD><TD><B>N/A</B>
</TD><TD>CryptoAPI provider for subject. The default is the user's provider. See the <A HREF="http://premium.microsoft.com/isapi/devonly/prodinfo/msdnprod/msdnlib.idc?theURL=/msdn/library/welcome/dsmsdn/FE6/DEB/S44B8.HTM" TARGET="_top">CryptoAPI 2.0 documentation</A> for details on CryptoAPI providers.
</TD></TR>
<TR><TD><B>-sr</B> <I>subjectCertStoreLocation</I>
</TD><TD><B>N/A</B>
</TD><TD>The registry location of the subject's certificate store. Must be either <I>localMachine</I> or <I>currentUser</I>. <I>currentUser</I> is the default. <I>currentUser</I> means that the certificate store is under the registry key HKEY_CURRENT_USER and <I>localMachine</I> means HKEY_LOCAL_MACHINE.
</TD></TR>
<TR><TD><B>-ss</B> <I>subjectCertStoreName</I>
</TD><TD><B>N/A</B>
</TD><TD>The name of the subject's certificate store where the generated certificate will be stored.
</TD></TR>
<TR><TD><B>-sv</B> <I>subjectKeyFile</I>
</TD><TD><B>-k:</B><I>subjectKeyFile</I>
</TD><TD>The location of the subject's .pvk file. If neither of the <B>-sk</B> or <B>-sv</B> options are used, the JoeSoft key container is created and used by default. 
</TD></TR>
<TR><TD><B>-sy</B> <I>nSubjectProviderType</I>
</TD><TD><B>N/A</B>
</TD><TD>CryptoAPI provider type for subject. The default is PROV_RSA_FULL. See the <A HREF="http://premium.microsoft.com/isapi/devonly/prodinfo/msdnprod/msdnlib.idc?theURL=/msdn/library/welcome/dsmsdn/FE6/DEB/S44B8.HTM" TARGET="_top">CryptoAPI 2.0 documentation</A> for details on CryptoAPI provider types.
</TD></TR>
<TR><TD><B>-#</B> <I>serialNumber</I>
</TD><TD><B>-#:</B><I>serialNumber</I>
</TD><TD>The serial number of the certificate. The maximum value is 2^31. The default is a value generated by the program that is guaranteed to be unique.
</TD></TR>
<TR><TD><B>-$</B> <I>certificateAuthority</I>
</TD><TD>(See <B>-I</B>, -<B>C</B>, -<B>C:f</B>)
</TD><TD>The type of Certificate Authority. Must be set to either <I>commercial</I> or <I>individual</I>. <I>Commercial</I> means the certificate will be used by commercial software publishers. <I>Individual</I> means the certificate will be used by individual software publishers.
</TD></TR>
<TR><TD><B>-?</B>
</TD><TD><B>-?</B>
</TD><TD>Displays the basic options.
</TD></TR>
<TR><TD><B>-!</B>
</TD><TD><B>N/A</B>
</TD><TD>Displays the extended options.
</TD></TR>
</TABLE>

<P>

<P>   If the <B>-sky</B> key specification option is used in IE 4.0, the specification must match the key specification indicated by the private key file or private key container. If the key specification option is not used, then the key specification indicated by the private key file or private key container will be used. If there is more than one key specification in the key container, MakeCert will first attempt to use the AT_SIGNATURE key specification. If that fails, MakeCert will then try to use AT_KEYEXCHANGE. Since most users have either an AT_SIGNATURE key or AT_KEYEXCHANGE key, this option does not need to be used in most cases.
<h3><A NAME="MakeCert_SPC_file_an">MakeCert SPC-file and Private-key Technology Options</A></h3>

<P>The following are Group 2 options for SPC-file and private-key technology only: 
<TABLE>
<TR><TD><B>For IE 4.0</B>
</TD><TD><B>For IE 3.02 UPD</B>
</TD><TD><B>Description</B>
</TD></TR>
<TR><TD><B>-ic</B> <I>issuerCertFile</I>
</TD><TD><B>-i:</B><I>issuerCertFile</I>
</TD><TD>The location of the issuer's certificate.
</TD></TR>
<TR><TD><B>-ik</B> <I>issuerKey</I>
</TD><TD><B>-s </B><I>issuerKeyFile</I>
</TD><TD>The location of the issuer's key container. The default is the test root key.
</TD></TR>
<TR><TD><B>-iky</B> <I>IssuerKeySpec</I>
</TD><TD><B>-K:</B><I>keySpec</I>
</TD><TD>For IE3.02: The issuer's key specification. This parameter can be either <I>S</I> for a signature key (this is the default) or <I>E</I> for a key-exchange key. 

<P>For IE4.0: The issuer's key specification, which must be one of three possible values:

<P>1. <I>Signature</I>, which stands for AT_SIGNATURE key specification.

<P>2. <I>Exchange</I>, which stands for AT_KEYEXCHANGE key specification.

<P>3. An integer, such as <I>3</I>.

<P>See notes on key specifications below.
</TD></TR>
<TR><TD><B>-ip</B> <I>IssuerProviderName</I>
</TD><TD><B>-x:</B><I>providerName</I>
</TD><TD>CryptoAPI provider for issuer. The default is the user's provider. See the <A HREF="http://premium.microsoft.com/isapi/devonly/prodinfo/msdnprod/msdnlib.idc?theURL=/msdn/library/welcome/dsmsdn/FE6/DEB/S44B8.HTM" TARGET="_top">CryptoAPI 2.0 documentation</A> for details on CryptoAPI providers.
</TD></TR>
<TR><TD><B>-iv</B> <I>issuerKeyFile</I>
</TD><TD><B>-s:</B><I>issuerKeyFile</I>
</TD><TD>The issuer's private-key file. The default is the test root.
</TD></TR>
<TR><TD><B>-iy</B> <I>nIssuerProviderType</I>
</TD><TD><B>-y:</B><I>nProviderType</I>
</TD><TD>CryptoAPI provider type for issuer. The default is PROV_RSA_FULL. See the <A HREF="http://premium.microsoft.com/isapi/devonly/prodinfo/msdnprod/msdnlib.idc?theURL=/msdn/library/welcome/dsmsdn/FE6/DEB/S44B8.HTM" TARGET="_top">CryptoAPI 2.0 documentation</A> for details on CryptoAPI provider types.
</TD></TR>
</TABLE>

<P>

<P>  If the <B>-iky</B> key specification option is used in IE 4.0, the specification must match the key specification indicated by the private key file or private key container. If the key specification option is not used, then the key specification indicated by the private key file or private key container will be used. If there is more than one key specification in the key container, MakeCert will first attempt to use the AT_SIGNATURE key specification. If that fails, MakeCert will then try to use AT_KEYEXCHANGE. Since most users have either an AT_SIGNATURE key or AT_KEYEXCHANGE key, this option does not need to be used in most cases.
<h3><A NAME="MakeCert_Certificate">MakeCert Certificate Store Technology Options</A></h3>

<P>The following are Group 3 options for certificate store technology only: 
<TABLE>
<TR><TD><B>For IE 4.0</B>
</TD><TD><B>For IE 3.02 UPD</B>
</TD><TD><B>Description</B>
</TD></TR>
<TR><TD><B>-ic</B> <I>issuerCertFile</I>
</TD><TD><B>NA</B>
</TD><TD>The file containing the issuer's certificate. For IE 4.0 only, MakeCert will search in the certificate store for a certificate with an exact match.
</TD></TR>
<TR><TD><B>-in</B> <I>issuerNameString</I>
</TD><TD><B>N/A</B>
</TD><TD>The common name of the issuer's certificate. MakeCert will search in the certificate store for a certificate whose common name includes <I>issuerNameString</I>.
</TD></TR>
<TR><TD><B>-ir</B> <I>IssuerCertStoreLocation</I>
</TD><TD><B>N/A</B>
</TD><TD>The registry location of the issuer's certificate store. Must be either <I>localMachine</I> or <I>currentUser</I>. <I>currentUser</I> is the default. <I>currentUser</I> means that the certificate store is under the registry key HKEY_CURRENT_USER and <I>localMachine</I> means HKEY_LOCAL_MACHINE.
</TD></TR>
<TR><TD><B>-is</B> <I>issuerCertStoreName</I>
</TD><TD><B>N/A</B>
</TD><TD>The issuer's certificate store that includes the issuer's certificate and its associated private key information. If there is more than one certificate in the store, the user must uniquely identify it with the <B>-ic</B> or <B>-in</B> option. If the certificate in the certificate store is not uniquely identified, MakeCert will fail.
</TD></TR>
</TABLE>
<h3><A NAME="MakeCert_Internet_Ex">MakeCert Internet Explorer 3.02 UPD Example</A></h3>

<P>The following is an example that creates a certificate using the Internet Explorer 3.02 UPD options: 
<PRE>MakeCert -k:c:\KeyStore\MyKey.pvk -n:CN=MySoftwareCompany Cert.cer
</PRE>

<P>In this example, a certificate file called <I>Cert.cer</I> is created. The public part of the key pair called <I>MyKey</I> is bound to the publisher, <I>MySoftwareCompany</I>. 
<h3><A NAME="6_4_MakeCert_Interne">6.4 MakeCert Internet Explorer 4.0 Examples</A></h3>

<P>The following are a series of examples for creating certificates with MakeCert using the Internet Explorer 4.0 options. 

<P>Make a certificate issued by the default test root. Save the certificate to a file. 
<PRE>MakeCert myNew.cer 
</PRE>

<P>Make a certificate issued by the default test root. Save it to a certificate store. 
<PRE>MakeCert -ss myNewStore 
</PRE>

<P>Make a certificate issued by the default test root. Create a .pvk file and output the certificate to both a store and a file. 
<PRE>MakeCert -sv myNew.pvk -ss myNewStore myNew.cer 
</PRE>

<P>Make a certificate issued by the default test root. Create a key container and output the certificate to both a store and a file. 
<PRE>MakeCert -sk myNewKey -ss myNewStore myNew.cer 
</PRE>

<P>Make a certificate using the default test root. Save the certificate to a store. Then make another certificate using the newly created certificate. Save the second certficate to another store. 
<PRE>MakeCert -sk myNewKey -ss myNewStore
MakeCert -is myNewStore -ss anotherStore 
</PRE>

<P>Make a certificate using the default test root. Save the certificate to <I>my</I> store. Then make another certificate using the newly created certificate. Since there is more than one certificate in <I>my</I> store, identify the first certificate using its common name. 
<PRE>MakeCert -sk myNewKey -n "CN=XXZZYY" -ss my
MakeCert -is my -in "XXZZYY" -ss anotherStore 
</PRE>

<P>Make a certificate using the default test root. Save the certificate to <I>my</I> store and to a file. Then make another certificate using the newly created <I>myNew</I> certificate. Since there is more than one certificate in <I>my</I> store, uniquely identify the first certificate using the certificate filename. 
<PRE>MakeCert -sk myNewKey -n "CN=XXZZYY" -ss my myNew.cer
MakeCert -is my -ic myNew.cer -ss anotherStore 
</PRE>

<P>Create a self-signed certificate named <I>myNewRoot</I> using the default test root. Then use SignCode with the certificate to sign a file. 
<PRE>MakeCert -sk myNewRootKey -r -ss myNewRoot
SignCode -s myNewRoot myControl.exe 
</PRE>

<P>Create a self-signed certificate named <I>myNewRoot</I> using the default test root. Save <I>myNewRoot</I> into a system certificate store <I>ca</I> . Then make a certificate from <I>myNewRoot</I> and sign some code with the certificate. 

<P><P>  When SignCode uses a certificate in a store for signing, it will also build a certificate chain from the signing certificate to a root. All of the certificates in the certificate chain must be in any of the <I>my</I>, <I>ca</I>, <I>spc,</I> or <I>root</I> certificate stores. In this case, <I>myNewRoot</I> is in the <I>ca</I> certificate store. 
<PRE>MakeCert -sk myNewRootKey -r -ss ca myNewRoot.cer
MakeCert -is ca -ic myNewRoot.cer -ss myNewSign 
SignCode -s myNewSign myControl.exe
</PRE>
<h2><A NAME="Cert2SPC">Cert2SPC</A></h2>

<P>After you have generated a certificate, you can create an SPC (Software Publisher Certificate) with the Cert2SPC program. This program wraps multiple X.509 certificates into a PKCS #7 signed-data object. Note that this program is for test purposes only. A valid SPC is obtained from a CA. 

<P>The syntax for Cert2SPC is: 

<P><B>Cert2SPC</B> <I>cert1</I><B>.cer</B> <I>cert2</I><B>.cer</B>. . .<I>certN</I><B>.cer</B> <I>output</I><B>.spc</B>

<P>where: 
<UL>
<LI><I>cert1</I>. . .<I>certN</I> are the names of the X.509 certificates to include in the SPC. 
<LI><I>output</I> is the name of the PKCS #7 object containing the X.509 certificates. 
</UL>

<P>Here is an example: 
<PRE>Cert2SPC MyCert.cer MyCert.spc 
</PRE>

<P>This wraps an X.509 certificate, <I>MyCert.cer</I> into a PKCS #7 SPC called <I>MyCert.spc</I>. 
<h2><A NAME="SignCode">SignCode</A></h2>

<P>The final step is to actually sign a file using the SignCode program. This program will: 
<OL>
<LI>Create a cryptographic digest of the file. 
<LI>Sign the digest with your private key. 
<LI>Copy the X.509 certificates from the SPC into a new PKCS #7 signed-data object. The PKCS #7 object contains the serial numbers and issuers of the certificates used to create the signature, the certificates, and the signed digest information. 
<LI>Embed the object into the file. 
<LI>Optionally, it can add a timestamp to the file. A timestamp should always be added when signing a file. However, SignCode also has the ability to add a timestamp to a previously signed file subject to some restrictions (see the examples that follow the options table). 
</OL>

<P>The syntax for signing is: 

<P><B>SignCode </B>[<I>options</I>] [<I>fileName</I>]

<P>where <I>fileName</I> is the name of the output file (Internet Explorer 4.0 only) and <I>options</I> are as described below. 

<P>The <I>options</I> for SignCode are divided into three groups: 
<OL>
<LI>Basic options applicable in all cases 
<LI>Options specific to SPC-file and private-key technology 
<LI>Options specific to certificate store technology 

<P>Options in groups 2 and 3 cannot be mixed in the same operation. 
</OL>
<h3><A NAME="SignCode_Basic_Optio">SignCode Basic Options</A></h3>

<P>The following basic <I>options</I> (Group 1) may be applied in all cases: 

<P>  Options are sorted alphabetically in the left (IE 4.0) column, and the corresponding IE 3.02 options are given in the middle column. IE 3.02 options that have no direct IE 4.0 equivalent will say either "<B>N/A</B>" or "(See -<I>option</I>)" in the IE 4.0 column, and are sorted alphabetically into the order of IE 4.0 options. For example, the IE 3.02 <B>-individual</B> option follows the IE 4.0 <B>-i</B> option.<TABLE>
<TR><TD><B>For IE 4.0</B>
</TD><TD><B>For IE 3.02 UPD</B>
</TD><TD><B>Description</B>
</TD></TR>
<TR><TD><B>-a</B> <I>algorithm</I>
</TD><TD><B>-sha, -md5</B>
</TD><TD>The hashing algorithm to use. Must be set to either <I>SHA1 </I>or <I>MD5. </I>The default is <I>MD5.</I>
</TD></TR>
<TR><TD>(See <B>-$</B>)
<B>-commercial</B>
</TD><TD>The code being signed was created by a commercial software publisher. The action SignCode will take depends upon both this setting and the SPC actually used. See table following these options for possible actions.
</TD></TR>
<TR><TD><B>-i</B> <I>opusInfo</I>
</TD><TD><B>-info </B><I>opusInfo</I>
</TD><TD>A location, such as a URL, for obtaining information about your program. 
</TD></TR>
<TR><TD>(See <B>-$</B>)
</TD><TD><B>-individual</B>
</TD><TD>The code being signed was created by an individual software publisher. The action SignCode will take depends upon both this setting and the SPC actually used. See table following these options for possible actions.
</TD></TR>
<TR><TD><B>-j</B> <I>dllName</I>
</TD><TD><B>N/A</B>
</TD><TD>The name of a DLL that returns an array of authenticated attributes for signing files. The user can specify more than one DLL by repeating the -j option. For example: 
<I>-j dll1 -j dll2 -j dll3</I>
</TD></TR>
<TR><TD><B>-jp</B> <I>dllParam</I>
</TD><TD><B>N/A</B>
</TD><TD>A parameter to be passed for the preceding DLL. For example: <I>-j DLL1 -jp DLL1Param</I>.

<P>Only one parameter is allowed per DLL. For a list of pre-defined DLLs and their parameters, see "-j and -jp SignCode Options".
</TD></TR>
<TR><TD>(See <B>-a</B>)
</TD><TD><B>-md5</B>
</TD><TD>Specifies that the MD5 hashing algorithm should be used. This is the default hashing algorithm. 
</TD></TR>
<TR><TD><B>-n</B> <I>opusName</I>
</TD><TD><B>-name </B><I>opusName</I>
</TD><TD>The friendly name given your program. 
</TD></TR>
<TR><TD><B>N/A</B>
</TD><TD><B>-nocerts</B>
</TD><TD>Specifies that no X.509 certificates should be embedded in the PKCS #7 signed-data object. In this case, the relevant certificates must already be stored on the client computer. In IE 4.0, all certificates will always be included in the message.
</TD></TR>
<TR><TD><B>N/A</B>
</TD><TD><B>-prog</B> <I>filename</I>
</TD><TD>The output file name in IE 3.02 UPD. In IE 4.0 the file name is always placed as the last item on the command line.
</TD></TR>
<TR><TD>(See <B>-a</B>)
</TD><TD><B>-sha</B>
</TD><TD>Specifies that the SHA1 hashing algorithm should be used. 
</TD></TR>
<TR><TD><B>-t</B> <I>httpAddress</I>
</TD><TD><B>timestamper</B>
</TD><TD>Indicates that the file is to be timestamped. A URL specifying an address of a timestamping server must be provided (see -x for timestamping previously signed files).
</TD></TR>
<TR><TD><B>-tr</B> <I>times</I>
</TD><TD><B>N/A</B>
</TD><TD>The maximum number of timestamping trials. The default is 1. SignCode will repeat the timestamping operation until it is successful or the limit on number of trials is reached.
</TD></TR>
<TR><TD><B>-tw</B> <I>seconds</I>
</TD><TD><B>N/A</B>
</TD><TD>The number of seconds between each timestamping trial. The default is 0.
</TD></TR>
<TR><TD><B>-x</B> 
</TD><TD><B>-nosigning</B>
</TD><TD>Used when just timestamping a previously signed file. No signing is performed. Must be used in conjunction with -t.
</TD></TR>
<TR><TD><B>-$</B> <I>signingAuthority</I>
</TD><TD><B>-commercial, -individual</B>
</TD><TD>The type of publisher that created the code being signed. Must be either <I>commercial</I> or <I>individual.</I> The action SignCode will take depends upon both this setting and the signing certificate actually used. See table following these options for possible actions.
</TD></TR>
<TR><TD><B>-?</B>
</TD><TD><B>-?</B>
</TD><TD>Displays all of the options.
</TD></TR>
</TABLE>

<P>The signature type (commercial or individual) used by SignCode depends on the signing option and certificate used. In some cases SignCode will fail the requested operation if there is a conflict. The possible signing actions are as follows: 
<TABLE>
<TR><TD><B>Certificate Type</B>
</TD><TD><B>-$ commercial</B>
</TD><TD><B>-$ individual</B>
</TD><TD><B>no option</B>
</TD></TR>
<TR><TD><B>Commercial Only</B>
</TD><TD>commercial
</TD><TD>fail
</TD><TD>commercial
</TD></TR>
<TR><TD><B>Individual Only</B>
</TD><TD>fail
</TD><TD>individual
</TD><TD>individual
</TD></TR>
<TR><TD><B>Both</B>
</TD><TD>commercial
</TD><TD>individual
</TD><TD>commercial
</TD></TR>
<TR><TD><B>None</B>
</TD><TD>fail
</TD><TD>individual
</TD><TD>individual
</TD></TR>
</TABLE>
<h3><A NAME="SignCode_SPC_file_an">SignCode SPC-file and Private-key Technology Options</A></h3>

<P>The following <I>options</I> are specific to SPC-file and private-key technology (group 2) only: 

<P>  When upgrading from IE3.02 UPD to IE 4.0, the <B>-pvk</B> option should be mapped to either the <B>-k</B> option or to the <B>-v</B> option, depending on the storage location of the private key. If the private key is stored in a key container, use the <B>-k</B> option. If the private key is stored in a private key file, use the <B>-v</B> option.<TABLE>
<TR><TD><B>For IE 4.0</B>
</TD><TD><B>For IE 3.02 UPD</B>
</TD><TD><B>Description</B>
</TD></TR>
<TR><TD><B>-k</B> <I>privateKey</I>
</TD><TD><B>-pvk </B><I>privateKey</I>
</TD><TD>The key container that holds the private key. Cannot be used with <B>-v</B>.
</TD></TR>
<TR><TD><B>-ky</B> <I>keySpec</I>
</TD><TD><B>N/A</B>
</TD><TD>Indicates the key specification, which must be one of three possible values:

<P>1. <I>Signature</I>, which stands for AT_SIGNATURE key specification.

<P>2. <I>Exchange</I>, which stands for AT_KEYEXCHANGE key specification.

<P>3. An integer, such as <I>3</I>.

<P>See notes on key specifications below.
</TD></TR>
<TR><TD><B>-p</B> <I>providerName</I>
</TD><TD><B>-provider </B><I>providerName</I>
</TD><TD>The CryptoAPI provider to use. The default is the user's default provider. (For more details, see the <A HREF="http://premium.microsoft.com/isapi/devonly/prodinfo/msdnprod/msdnlib.idc?theURL=/msdn/library/welcome/dsmsdn/FE6/DEB/S44B8.HTM" TARGET="_top">CryptoAPI 2.0 documentation</A>.) 
</TD></TR>
<TR><TD><B>-spc</B> <I>credentials</I>
</TD><TD><B>-spc </B><I>credentials</I>
</TD><TD>The file that contains the credentials. This is usually an .spc file. 
</TD></TR>
<TR><TD><B>-v</B> <I>privateKeyFile</I>
</TD><TD><B>-pvk </B><I>privateKeyFile</I>
</TD><TD>The file containing the private key of the publisher (subject). This is usually a .pvk file. The <B>-v</B> option for IE 4.0 cannot be used with <B>-k</B>.
</TD></TR>
<TR><TD><B>-y</B> <I>providerType</I>
</TD><TD><B>-providerType </B><I>providerType</I>
</TD><TD>The CryptoAPI provider type to use. The default is PROV_RSA_FULL. (For more details, see the <A HREF="http://premium.microsoft.com/isapi/devonly/prodinfo/msdnprod/msdnlib.idc?theURL=/msdn/library/welcome/dsmsdn/FE6/DEB/S44B8.HTM" TARGET="_top">CryptoAPI 2.0 documentation</A>.) 
</TD></TR>
</TABLE>

<P>  If the <B>-ky</B> key specification option is used in IE 4.0, the specification must match the key specification indicated by the private key file or private key container. If the key specification option is not used, then the key specification indicated by the private key file or private key container will be used. If there is more than one key specification in the key container, SignCode will first attempt to use the AT_SIGNATURE key specification. If that fails, SignCode will then try to use AT_KEYEXCHANGE. Since most users have either an AT_SIGNATURE key or AT_KEYEXCHANGE key, this option does not need to be used in most cases.<h3><A NAME="SignCode_Certificate">SignCode Certificate Technology Options</A></h3>

<P>The following <I>options</I> are specific to certificate technology (group 3) only: 
<TABLE>
<TR><TD><B>For IE 4.0</B>
</TD><TD><B>For IE 3.02 UPD</B>
</TD><TD><B>Description</B>
</TD></TR>
<TR><TD><B>-c</B> <I>certificateFile</I>
</TD><TD><B>N/A</B>
</TD><TD>The file containing the encoded signing certificate. SignCode will search the certificate store for a matching certificate. Either <B>-c</B> or <B>-cn</B> can be used to identify the signing certificate in the certificate store to use.
</TD></TR>
<TR><TD><B>-cn</B> <I>commonNameString</I>
</TD><TD><B>N/A</B>
</TD><TD>The common name of the encoded signing certificate. SignCode will search in the certificate store for a certificate whose common name includes <I>commonNameString</I>. If the common name of more than one certificate in the certificate store includes <I>commonNameString</I>, SignCode will fail and issue an error. 
</TD></TR>
<TR><TD><B>-r</B> <I>storeLocation</I>
</TD><TD><B>N/A</B>
</TD><TD>The registry location of the certificate store. Must be set to either <I>currentUser </I>or <I>localMachine.</I> The default is <I>currentUser</I>. <I>CurrentUser</I> means the certificate store is under the HKEY_CURRENT_USER registry key and <I>localMachine</I> means it is under HKEY_LOCAL_MACHINE.
</TD></TR>
<TR><TD><B>-s</B> <I>storeName</I>
</TD><TD><B>N/A</B>
</TD><TD>The certificate store that includes the signing certificate and associated private key. The default is <I>my</I>. If there is more than one certificate in the store, the desired certificate must be uniquely identified using the <B>-c</B> or <B>-cn</B> options, or SignCode will fail.
</TD></TR>
<TR><TD><B>-sp</B> <I>storePolicy</I>
</TD><TD><B>N/A</B>
</TD><TD>The certificate store policy. Must be set to either <I>chain</I> or <I>spcStore</I>. The default is <I>spcStore</I>. <B>chain</B> means to add to the signature all of the certificates in the chain located in the following certificate stores: <I>spc</I>, <I>my</I>, <I>ca</I>, and <I>root</I>.

<P><I>spcStore </I>means to add to the signature all of the certificates in the chain located in the following certificate stores: <I>spc</I>, <I>my</I>, <I>ca</I>, and <I>root</I>. Stop when the certificate is located in the <I>spc</I> store. This is the default.

<P>The <I>spc</I> store is under the HKEY_LOCAL_MACHINE registry key. The <I>my</I>, <I>ca</I>, and <I>root</I> stores are all under the HKEY_CURRENT_USER registry key.
</TD></TR>
</TABLE>

<P>Once the file has been signed (assuming you have a valid certificate) and timestamped, the file can be distributed to your customers. Note that certificates generated with the test programs MakeCert and Cert2SPC are NOT valid for signing code that will be distributed to the public. Independent software vendors must obtain a certificate from GTE, VeriSign, Inc., or another CA for signing code that will be distributed to the public. 

<h3><A NAME="SignCode_Examples_fo">SignCode Examples for Internet Explorer 3.02 UPD</A></h3>

<P>Here are two examples of how to sign and timestamp a file using the Internet Explorer 3.02 UPD options. The first uses a private-key name <I>MyKey</I> and the second uses a private-key file <I>My.pvk</I>: 
<PRE>SignCode -prog MyControl.exe -spc Cert.spc -pvk MyKey -timeStamper http://timestamp.verisign.com/scripts/timstamp.dll
SignCode -prog MyControl.exe -spc Cert.spc -pvk My.pvk -timeStamper http://timestamp.verisign.com/scripts/timstamp.dll
</PRE>

<P>In both cases a PKCS #7 object, <I>Cert.spc</I>, is embedded into the digest of the file, <I>MyControl.exe</I>. In the first example, the digest is signed with the private key of the <I>MyKey</I> key pair, and a timestamp is added. In the second example, the digest is signed with the private-key file <I>My.pvk</I>, and a timestamp is added.

<h3><A NAME="SignCode_Examples_fo">SignCode Examples for Internet Explorer 4.0</A></h3>

<P>Here are two examples of how to sign and timestamp a file using the Internet Explorer 4.0 options. The first uses the <I>MyKey</I> key container and the second uses a private-key file <I>My.pvk</I>: 
<PRE>SignCode -spc Cert.spc -k MyKey -n "My control" -i http://www.my.com -$ commercial -t http://timestamp.verisign.com/scripts/timstamp.dll MyControl.exe
</PRE>
<PRE>SignCode -spc Cert.spc -v My.pvk -n "My control" -i http://www.my.com -$ commercial -t http://timestamp.verisign.com/scripts/timstamp.dll MyControl.exe
</PRE>

<P>In both cases a PKCS #7 object, <I>Cert.spc</I>, is embedded into the digest of the file, <I>MyControl.exe</I>. In the first example, the digest is signed with the private key of the <I>MyKey</I> key container, and a timestamp is added. In the second example, the digest is signed with the private-key file <I>My.pvk</I>, and a timestamp is added.

<P>The following example shows how to sign and timestamp a file using a certificate in <I>my</I> store (the default certificate store). The certificate's common name is <I>MyCert</I>, and the program being signed has the friendly name <I>My Control</I>.
<PRE>SignCode -cn "myCert" -n "My control" -i http://www.my.com -$ commercial -t http://timestamp.verisign.com/scripts/timstamp.dll MyControl.exe
</PRE>

<P>The following example shows how to sign and timestamp a file using a certificate in <I>theCert</I> store. There is assumed to be only one certificate in the certificate store, so it is not necessary to identify the certificate. The certificate store is at the default registry location, HKEY_CURRENT_USER. <I>My control</I> is the friendly name for the program being signed.
<PRE>SignCode -s "theCert" -n "My control" -i http://www.my.com -$ commercial -t http://timestamp.verisign.com/scripts/timstamp.dll MyControl.exe
</PRE>
<h3><A NAME="Adding_a_Timestamp_t">Adding a Timestamp to a Previously Signed File</A></h3>

<P>A timestamp should always be added when a file is signed. However, if a file was signed without a timestamp, a timestamp can be added to that file. Here is an example of how to add a timestamp to a previously signed file: 

<P>For Internet Explorer 3.02 UPD: 
<PRE>SignCode -prog MyControl.exe -nosigning -timeStamper http://timestamp.verisign.com/scripts/timstamp.dll 
</PRE>

<P>For Internet Explorer 4.0:
<PRE>SignCode -t http://timestamp.verisign.com/scripts/timstamp.dll -x MyControl.exe
</PRE>

<P>Notice the <B>-x</B> option is used in conjunction with the <B>-t</B> option to indicate that the file to be timestamped has already been signed. If you try to timestamp a file previously signed by Internet Explorer 3.0 tools, the timestamp may fail with an error saying you must re-sign. If you timestamp a previously signed file using the SignCode tool for Internet Explorer version 3.02 UPD or 4.0, it should successfully add the timestamp. The signing and timestamping concurrent operation should always work, even if the file was previously signed by Internet Explorer 3.0 tools, because if there is an old signature it is replaced. 

<h3><A NAME="_j_and__jp_SignCode_">-j and -jp SignCode Options</A></h3>

<P>The <B>-j</B> and <B>&#150;jp</B> options are provided for more advanced users of SignCode and Internet Explorer 4.0 only. The user can write a Dynamic Link Library (DLL) with predefined entry points that returns an array of authenticated or unauthenticated attributes for signing files. SignCode will take the following actions using these options: 
<OL>
<LI>Load the DLL specified by the <B>&#150;j</B> option. 
<LI>Pass the parameters specified by <B>&#150;jp</B> option to the DLL. 
<LI>Retrieve an array of authenticated or unauthenticated attributes for signing Java files from the DLL. 
<LI>Add the attributes to the signature. 
</OL>

<P>There are four pre-defined entry points for the DLL: 

<P>HRESULT WINAPI <B>InitAttr</B>( 

<P> LPWSTR pInitString); // IN: the initialization string 

<P>HRESULT WINAPI <B>GetAttr</B>( 

<P> PCRYPT_ATTRIBUTES *ppsAuthenticated, // OUT: Authenticated attributes added to signature 

<P> PCRYPT_ATTRIBUTES *ppsUnauthenticated); // OUT: Unauthenticated attributes added to signature 

<P>HRESULT WINAPI <B>ReleaseAttr</B>( 

<P> PCRYPT_ATTRIBUTES psAuthenticated, // OUT: Authenticated attributes to be released 

<P> PCRYPT_ATTRIBUTES psUnauthenticated); // OUT: Unauthenticated attributes to be released 

<P>HRESULT WINAPI <B>ExitAttr</B>( ); 

<P>SignCode calls these entry points in the following order: 
<OL>
<LI>InitAttr(initString); // (parameter specified by the &#150;jp option) 
<LI>GetAttr(); 
<LI>ExitAttr(); 
<LI>InitAttr(initString); // (parameter specified by the &#150;jp option) 
<LI>ReleaseAttr(); 
<LI>ExitAttr();
</OL>
<h2><A NAME="ChkTrust">ChkTrust</A></h2>

<P>The ChkTrust program checks the validity of a signed file by: 
<OL>
<LI>Extracting the PKCS #7 signed-data object. 
<LI>Extracting the X.509 certificates from the PKCS #7 signed-data object. 
<LI>Computing a new hash of the file and comparing it with the signed hash in the PKCS #7 object. 
</OL>

<P>If the hashes agree, ChkTrust then verifies that the signer's X.509 certificate is traceable back to the root certificate and that the correct root key was used. 

<P>If all these steps are successful, it means that the file has not been tampered with, and that the vendor who signed the file was authenticated by the root authority. 

<P>Here is the syntax: 

<P><B>ChkTrust</B> [<I>options</I>] <I>signedFile</I> 

<P>where the <I>options</I> are: 
<TABLE>
<TR><TD><B>For IE 4.0</B>
</TD><TD><B>For IE 3.02 UPD</B>
</TD><TD><B>Description</B>
</TD></TR>
<TR><TD><B>N/A</B>
</TD><TD><B>-c</B>
</TD><TD>Indicates that the signed file is a cabinet file.
</TD></TR>
<TR><TD><B>N/A</B>
</TD><TD><B>-i</B>
</TD><TD>Indicates that the signed file is a PE image file. Includes .exe, .dll, and .ocx files.
</TD></TR>
<TR><TD><B>-q</B>
</TD><TD><B>-n</B>
</TD><TD>Do not display user interface.
</TD></TR>
<TR><TD><B>-?</B>
</TD><TD><B>N/A</B>
</TD><TD>Displays all of the options.
</TD></TR>
</TABLE>

<P>In the IE 4.0 version, ChkTrust can distinguish file types automatically, so the <B>-c</B> and <B>-i</B> switches used in the IE 3.02 UPD version are obsolete. Here is an example for the IE 3.02 UPD version: 
<PRE>ChkTrust -i MyProgram.exe
</PRE>

<P>A successful response would be: 
<PRE>Result: 0
</PRE>

<P>Here is an example for the IE 4.0 version: 
<PRE>ChkTrust MyProgram.exe 
</PRE>

<P>Note that versions of ChkTrust that are older than the one released with Internet Explorer 3.02 UPD cannot validate files signed with this release of Authenticode. 

<h2><A NAME="MakeCTL">MakeCTL</A></h2>

<P>The MakeCTL utility creates a certificate trust list (CTL) and outputs the encoded CTL to a file. MakeCTL is supported in IE 4.0 only. 

<P>The input to MakeCTL is an array of certificate stores. MakeCTL will build a CTL which includes the SHA1 hash of all of the certificates in the certificate stores. A certificate store can be one of the following: 
<UL>
<LI>A serialized store file 
<LI>A PKCS#7 
<LI>An encoded certificate file 
<LI>A system store 
</UL>

<P>The syntax for invoking MakeCTL is: 

<P><B>MakeCTL</B> [-u <I>subjectUsageID</I>] [-s [-r <I>registryLocation</I>]] <I>store1</I> [-s [-r <I>registryLocation</I>]] <I>store2 </I>... [-s [-r <I>registryLocation</I>]] <I>storeN</I> <I>output.</I>ctl 

<P>where: 
<UL>
<LI><I>store1 store2 </I>... .<I>storeN</I> are the names of the certificate stores to make the certificate trust list for. 
<LI><I>output.</I>ctl is the name of the output file containing the certificate trust list. 
</UL>

<P>The options are as follows: 
<TABLE>
<TR><TD><B>-u</B> <I>subjectUsageID</I>
</TD><TD>The CTL subject usage identifier. The default identifier is szOID_TRUSTED_CODESIGNING_CA_LIST, which specifies that the CTL consists of root CAs for code signing.
</TD></TR>
<TR><TD><B>-s</B> 
</TD><TD>Indicates that the certificate store is a system store.
</TD></TR>
<TR><TD><B>-r</B> <I>registryLocation</I>
</TD><TD>The registry location of the system certificate store. Meaningful only when <B>&#150;s</B> is set. Must be set to either <I>currentUser</I> or <I>localMachine</I>. The default setting is <I>currentUser</I>.

<P><I>currentUser</I> means that the certificate store is under the registry key HKEY_CURRENT_USER. <I>localMachine</I> means that the certificate store is under the registry key HKEY_LOCAL_MACHINE.
</TD></TR>
<TR><TD><B>-?</B>
</TD><TD>Lists command syntax and options.
</TD></TR>
</TABLE>

<P>An encoded CTL file must be signed before using. CTL files can be signed using the SignCode utility. Once the CTL file is signed, it can be moved to the <I>trust</I> system store by CertMgr. CertMgr can also move the CTL's signer certificate to the <I>root</I> store. If the subject usage identifier of the CTL is szOID_TRUSTED_CODESIGNING_CA_LIST (the default), all the files signed by certificates in the CTL will be trusted by ChkTrust and Authenticode. 

<P>The following example generates a CTL that includes all the certificates in a system certificate store named <I>root</I>: 
<PRE>MakeCTL -s root output.ctl 
</PRE>

<P>The following example generates a CTL that includes an array of certificates: 
<PRE>MakeCTL one.cer two.cer three.cer output.ctl 
</PRE>
<h2><A NAME="CertMgr">CertMgr</A></h2>

<P>The CertMgr utility is a replacement for DumpCert and adds many new capabilities. CertMgr can manage certificates, certificate trust lists (CTLs), and certificate revocation lists (CRLs). The functionality of CertMgr has three parts: 
<OL>
<LI>Display certificates, CTLs, and CRLs. 
<LI>Add certificates, CTLs, and CRLs from one certificate store to another. 
<LI>Delete certificates, CTLs, and CRLs from a certificate store. 
</OL>

<P>Each functional part of CertMgr has its own syntax and options group. The syntax and options for different functional parts cannot be mixed. 

<P>CertMgr works with two kinds of certificate stores, StoreFile and system store. A StoreFile can be one of the following kinds of files: 
<UL>
<LI>Encoded CTL/CRL/certificate file (could be base64 encoded) 
<LI>PKCS#7 file 
<LI>Signed document 
<LI>Serialized StoreFile 
</UL>

<P>It is not necessary to specify the type of the StoreFile. CertMgr can determine the StoreFile type and take the appropriate actions. 

<P>A system store is located in the user's registry. The user can refer to a system store by providing just its name. It is not necessary to specify the certificate store provider type. Depending on the type of the StoreFile or system store, CertMgr will choose the corresponding store provider type. 

<h3><A NAME="Displaying_Certifica">Displaying Certificates, CTLs, and CRLs with CertMgr</A></h3>

<P>The syntax for invoking CertMgr to display certificates, CTLs, and CRLs is as follows: 

<P><B>CertMgr </B>[<I>options</I>] [-s [&#150;r <I>registryLocation</I>]] <I>StoreName</I> 

<P><I>StoreName</I> is the name of the certificate store containing the items to display. The store can be a serialized store (StoreFile) or a system store (in the registry). By default, CertMgr will display all the certificates, CTLs, or CRLs in the store, unless otherwise specified in the options. 

<P>The <I>options</I> are: 
<TABLE>
<TR><TD><B>-v</B>
</TD><TD>Verbose mode. Displays detailed information about certificates, CTLs, and CRLs. The default is to display brief information.
</TD></TR>
<TR><TD><B>-c</B>
</TD><TD>Only display certificates.
</TD></TR>
<TR><TD><B>-CTL</B>
</TD><TD>Only display CTLs.
</TD></TR>
<TR><TD><B>-CRL</B>
</TD><TD>Only display CRLs.
</TD></TR>
<TR><TD><B>-e </B><I>encodingType</I>
</TD><TD>Certificate encoding type.
</TD></TR>
<TR><TD><B>-y</B> <I>storeProviderType</I>
</TD><TD>Store provider type.
</TD></TR>
<TR><TD><B>-f</B> <I>dwFlags</I>
</TD><TD>Store open flag. This is the <I>dwFlags</I> parameter passed to <B>CertOpenStore</B>. The default value is CERT_SYSTEM_STORE_CURRENT_USER. Meaningful only if &#150;y is set. For more information see the <A HREF="http://premium.microsoft.com/isapi/devonly/prodinfo/msdnprod/msdnlib.idc?theURL=/msdn/library/welcome/dsmsdn/FE6/DEB/S44B8.HTM" TARGET="_top">CryptoAPI 2.0 documentation</A>.
</TD></TR>
<TR><TD><B>-s</B>
</TD><TD>Indicates the store is a system store. If this option is not set, the store is a StoreFile.
</TD></TR>
<TR><TD><B>-r</B> <I>registryLocation</I>
</TD><TD>Identifies the registry location of the system certificate store. Meaningful only when &#150;s is set. Must be set to either <I>currentUser</I> or <I>localMachine</I>. <I>CurrentUser</I> is the default.
<I>currentUser</I> means that the certificate store is under the registry key HKEY_CURRENT_USER, <I>localMachine</I> means HKEY_LOCAL_MACHINE.
</TD></TR>
<TR><TD><B>-</B><B>?</B>
</TD><TD>Displays all the options.
</TD></TR>
</TABLE>
<h3><A NAME="Adding_Certificates_">Adding Certificates, CTLs, and CRLs with CertMgr</A></h3>

<P>The syntax for invoking CertMgr to add certificates, CTLs, and CRLs is as follows: 

<P><B>CertMgr</B> &#150;add [<I>options</I>] [-s [&#150;r <I>registryLocation</I>]] <I>SourceStore</I> [-s [&#150;r <I>registryLocation</I>]] <I>DestinationStore</I>

<P><I>SourceStore</I> is the source certificate store that contains the existing certificates, CTLs, and CRLs. <I>DestinationStore</I> is the destination certificate store to which the certificates, CTLs, and CRLs will be added to. The destination store will be saved as a serialized store, unless the <B>&#150;7</B> option is used, which saves the store as a PKCS#7. Note that the <B>&#150;7</B> option can not be used when the destination store is a system store.

<P>CertMgr can add either certificates, CTLs, or CRLs. If there is more than one item in one of these categories, the user has three options: 
<OL>
<LI>Use the <B>&#150;all</B> option to add all the items in the category. 
<LI>Use the <B>&#150;n</B> and <B>-sha1</B> options to uniquely identify the item. 
<LI>Do not specify any options, and CertMgr will prompt the user with a list of items to add. The user responds by entering the index of the item to add. 
</OL>

<P>This functionality of CertMgr can be used to copy and move certificates, CTLs, and CRLs. See the examples following the options.

<P>The <I>options</I> are: 
<TABLE>
<TR><TD><B>-c</B>
</TD><TD>Add certificates.
</TD></TR>
<TR><TD><B>-CTL</B>
</TD><TD>Add CTLs.
</TD></TR>
<TR><TD><B>-CRL</B>
</TD><TD>Add CRLs.
</TD></TR>
<TR><TD><B>-all</B>
</TD><TD>Add all entries.
</TD></TR>
<TR><TD><B>-7</B>
</TD><TD>Save the destination store as a PKCS#7.
</TD></TR>
<TR><TD><B>-e </B><I>encodingType</I>
</TD><TD>Certificate encoding type.
</TD></TR>
<TR><TD><B>-y</B> <I>storeProviderType</I>
</TD><TD>Store provider type.
</TD></TR>
<TR><TD><B>-f </B><I>dwFlags</I>
</TD><TD>Store open flag. This is the <I>dwFlags</I> parameter passed to <B>CertOpenStore</B>. The default value is CERT_SYSTEM_STORE_CURRENT_USER. Meaningful only if &#150;y is set. For more information see the <A HREF="http://premium.microsoft.com/isapi/devonly/prodinfo/msdnprod/msdnlib.idc?theURL=/msdn/library/welcome/dsmsdn/FE6/DEB/S44B8.HTM" TARGET="_top">CryptoAPI 2.0 documentation</A>.
</TD></TR>
<TR><TD><B>-n</B> <I>commonNameString</I>
</TD><TD>The common name of the certificate to add. Can be used only with certificates.
</TD></TR>
<TR><TD><B>-s</B>
</TD><TD>Indicates the store is a system store. If this option is not set, the store is a StoreFile.
</TD></TR>
<TR><TD><B>-sha1</B> <I>sha1Hash</I>
</TD><TD>The SHA1 hash of the certificate, CTL, or CRL to add.
</TD></TR>
<TR><TD><B>-r</B> <I>registryLocation</I>
</TD><TD>Identifies the registry location of the system certificate store. Meaningful only when &#150;s is set. Must be set to either <I>currentUser</I> or <I>localMachine</I>. <I>CurrentUser</I> is the default.
<I>currentUser</I> means that the certificate store is under the registry key HKEY_CURRENT_USER, <I>localMachine</I> means HKEY_LOCAL_MACHINE.
</TD></TR>
<TR><TD><B>-</B><B>?</B>
</TD><TD>Displays all the options.
</TD></TR>
</TABLE>
<h3><A NAME="Deleting_Certificate">Deleting Certificates, CTLs, and CRLs with CertMgr</A></h3>

<P>The syntax for invoking CertMgr to delete certificates, CTLs, and CRLs is as follows: 

<P><B>CertMgr </B>&#150;del [<I>options</I>] [-s [&#150;r <I>registryLocation</I>]] <I>SourceStore</I> [-s [&#150;r <I>registryLocation</I>] <I>DestinationStore</I>] 

<P><I>SourceStore</I> is the source certificate store that contains the existing certificates, CTLs, and CRLs. <I>DestinationStore</I> is the destination certificate store which will contain copies of the remaining certificates, CTLs, and CRLs after the specified items have been deleted. If <I>DestinationStore</I> is not specified, <I>SourceStore</I> will also serve as the destination store (it will be modified.) The destination store will be saved as a serialized store, unless <B>&#150;7</B> option is used, which saves the store as a PKCS#7. Note that the <B>&#150;7</B> option cannot be used when the destination store is a system store. 

<P>CertMgr can delete either certificates, CTLs, or CRLs. If there is more than one item in one of these categories, the user has three options: 
<OL>
<LI>Use the <B>&#150;all</B> option to delete all the items in the category. 
<LI>Use the <B>&#150;n</B> and <B>-sha1</B> options to uniquely identify the item. 
<LI>Do not specify any options, and CertMgr will prompt the user with a list of items to delete. The user responds by entering the index of the item to delete. 
</OL>

<P>The <I>options</I> are: 
<TABLE>
<TR><TD><B>-c</B>
</TD><TD>Delete certificates.
</TD></TR>
<TR><TD><B>-CTL</B>
</TD><TD>Delete CTLs.
</TD></TR>
<TR><TD><B>-CRL</B>
</TD><TD>Delete CRLs.
</TD></TR>
<TR><TD><B>-all</B>
</TD><TD>Delete all entries.
</TD></TR>
<TR><TD><B>-7</B>
</TD><TD>Save the destination store as a PKCS#7.
</TD></TR>
<TR><TD><B>-n</B> <I>commonNameString</I>
</TD><TD>The common name of the certificate to delete. Can be used only with certificates.
</TD></TR>
<TR><TD><B>-sha1</B> <I>sha1Hash</I>
</TD><TD>The SHA1 hash of the certificate, CTL, or CRL to delete.
</TD></TR>
<TR><TD><B>-e </B><I>encodingType</I>
</TD><TD>Certificate encoding type.
</TD></TR>
<TR><TD><B>-y</B> <I>storeProviderType</I>
</TD><TD>Store provider type.
</TD></TR>
<TR><TD><B>-f </B><I>dwFlags</I>
</TD><TD>Store open flag. This is the <I>dwFlags</I> parameter passed to <B>CertOpenStore</B>. The default value is CERT_SYSTEM_STORE_CURRENT_USER. Meaningful only if &#150;y is set. For more information see the <A HREF="http://premium.microsoft.com/isapi/devonly/prodinfo/msdnprod/msdnlib.idc?theURL=/msdn/library/welcome/dsmsdn/FE6/DEB/S44B8.HTM" TARGET="_top">CryptoAPI 2.0 documentation</A>.
</TD></TR>
<TR><TD><B>-s</B>
</TD><TD>Indicates the store is a system store. If this option is not set, the store is a StoreFile.
</TD></TR>
<TR><TD><B>-r </B><I>registryLocation</I>
</TD><TD>Identifies the registry location of the system certificate store. Meaningful only when &#150;s is set. Must be set to either <I>currentUser</I> or <I>localMachine</I>. <I>CurrentUser</I> is the default.
<I>currentUser</I> means that the certificate store is under the registry key HKEY_CURRENT_USER, <I>localMachine</I> means HKEY_LOCAL_MACHINE.
</TD></TR>
<TR><TD><B>-</B><B>?</B>
</TD><TD>Displays all the options.
</TD></TR>
</TABLE>
<h3><A NAME="CertMgr_Examples">CertMgr Examples</A></h3>

<P>View certificates, CRLs, and CTLs from a file called <I>myFile.ext</I>. <I>myFile</I> can be one of the following files: an encoded CTL, CRL, or certificate file (could be base64 encoded), a PKCS#7 file, an SPC file, a signed document, or a serialized storeFile. 
<PRE>CertMgr myFile.ext
</PRE>

<P>View a system store called <I>my</I> store: 
<PRE>CertMgr -s my
</PRE>

<P>Add all the certificates in a file called myFile.ext to a new file, called <I>newFile.ext</I>: 
<PRE>CertMgr -add -all -c myFile.ext newFile.ext 
</PRE>

<P>Copy all the certificates in a system store to a file called <I>newMy.ext</I>: 
<PRE>CertMgr -add -all -c -s my newMy.ext 
</PRE>

<P>Move a certificate with common name <I>myCert</I> in <I>my</I> system store to a file called newCert.cer: 
<PRE>CertMgr -add -c -n myCert -s my newCert.cer 
</PRE>

<P>Delete all the certificates in <I>my</I> system store: 
<PRE>CertMgr -del -all -c  -s my 
</PRE>

<P>Delete all the CTLs in <I>my</I> system store and save the resulting store to a file called newStore.str: 
<PRE>CertMgr -del -all -ctl -s my newStore.str 
</PRE>

<P>The following example demonstrates how to build a CTL and move it to the root store:
<PRE>// 1. Make a self-signed certificate called sign.cer. 
MakeCert -sv sign.pvk -r -n "CN=THIS IS A TEST OF MAKECTL" sign.cer 
// Make an SPC file using Cert2SPC. 
Cert2SPC sign.cer sign.spc 

// 2. Make another self-signed certificate called test.cer. 
MakeCert -sv test.pvk -r -n "CN=THIS IS MY TEST CERT" test.cer 
// Make an SPC file using Cert2SPC. 
Cert2SPC test.cer test.spc 

// 3. Make a test.ctl from test.cer. 
MakeCTL test.cer test.ctl 

// 4. Sign test.ctl with the sign.pvk and sign.spc made in step 1. 
SignCode -v sign.pvk -spc sign.spc test.ctl 

// 5. Move test.ctl to the trust system store. 
CertMgr -add -ctl test.ctl -s trust 

// 6. Move sign.cer to the root system store. 
CertMgr -add -c sign.cer -s root 

// 7. Sign something (test.exe) with test.pvk, and test.spc. 
SignCode -v test.pvk -spc test.spc test.exe 

// 8. Since test.cer is in the test.ctl, ChkTrust will succeed. 
ChkTrust test.exe 
</PRE>
<h2><A NAME="SetReg">SetReg</A></h2>

<P>The SetReg utility is used to set the value of the registry keys controlling the behavior of the Authenticode certificate verification process. These keys are called the Software Publishing State Keys. When SetReg has completed the requested action, the current state of the Software Publishing State Keys is displayed. 

<P>The syntax for invoking SetReg is: 

<P><B>SetReg</B> [<I>options</I>] [<I>Choice #</I> &lt;True | False&gt;] 

<P>The <I>options</I> can be one of the following values: 
<TABLE>
<TR><TD><B>For IE 4.0</B>
</TD><TD><B>For IE 3.02 UPD</B>
</TD><TD><B>Description</B>
</TD></TR>
<TR><TD><B>-q</B>
</TD><TD><B>-q</B>
</TD><TD>Suppresses the display of the Software Publishing State Key values after SetReg has completed the requested action. The values are displayed by default. 
</TD></TR>
<TR><TD><B>-?</B>
</TD><TD><B>-h</B>
</TD><TD>Lists command syntax and options. 
</TD></TR>
</TABLE>

<P><I>Choice #</I> must be one of the following values (valid for both IE 3.02 and IE 4.0, except 9 and 10, which are for IE 4.0 only): 
<TABLE>
<TR><TD><B>1</B>
</TD><TD><B>Trust the Test Root.</B> Causes the test root to be a trusted root if set to <B>TRUE</B>. This is equivalent to running "regedit wvtston.reg" in Internet Explorer 3.x. The default is <B>FALSE</B>. Any code signed with a test root will not verify unless this flag is turned <B>TRUE</B>. 
</TD></TR>
<TR><TD><B>2</B>
</TD><TD><B>Use expiration date on certificates.</B> Causes the certificate expiration date to be checked if set to <B>TRUE</B>. To ignore expiration dates, set this flag to <B>FALSE</B>. The default is <B>TRUE</B>. 
</TD></TR>
<TR><TD><B>3</B>
</TD><TD><B>Check the revocation list.</B> Causes the revocation check to be performed if set to <B>TRUE</B>. To bypass revocation check, set this flag to <B>FALSE</B>. The default is <B>FALSE</B> in Internet Explorer 3.x and TRUE in Internet Explorer 4.x. 
</TD></TR>
<TR><TD><B>4</B>
</TD><TD><B>Offline revocation server OK (Individual).</B> Allows off-line approval for individual certificates if set to <B>TRUE</B>. The default is <B>FALSE</B>. 
</TD></TR>
<TR><TD><B>5</B>
</TD><TD><B>Offline revocation server OK (Commercial).</B> Allows off-line approval for commercial certificates if set to <B>TRUE</B>. The default is <B>FALSE</B>. 
</TD></TR>
<TR><TD><B>6</B>
</TD><TD><B>Java offline revocation server OK (Individual).</B> Allows off-line approval for individual certificates and does not display the user interface for bad certificates if set to <B>TRUE</B>. The default is <B>FALSE</B>. 
</TD></TR>
<TR><TD><B>7</B>
</TD><TD><B>Java offline revocation server OK (Commercial).</B> Allows off-line approval for commercial certificates and does not display the user interface for bad certificates if set to <B>TRUE</B>. The default is <B>FALSE</B>. 
</TD></TR>
<TR><TD><B>8</B>
</TD><TD><B>Invalidate version 1 signed objects.</B> Invalidates version 1 signed objects if set to <B>TRUE</B>. The default is <B>FALSE</B>. 
</TD></TR>
<TR><TD><B>9</B>
</TD><TD>Perform the revocation check on the timestamp server's certificate if set to <B>TRUE</B>. The default is <B>FALSE</B>. For IE 4.0 only. 
</TD></TR>
<TR><TD><B>10</B>
</TD><TD>Only allow downloads from publishers that are contained in the Personal Trust Database if set to <B>TRUE</B>. The default is <B>FALSE</B>. For IE 4.0 only. 
</TD></TR>
</TABLE>

<P>Here is an example: 
<PRE>SetReg 1 TRUE
</PRE>

<P>This turns on the capability to trust the test root.

<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Licensing ActiveX Controls</TITLE>

<META NAME=MS-HKWD CONTENT="Licensing ActiveX Controls">
<META NAME="Keywords" CONTENT="Component Development">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="ch_license"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Licensing ActiveX Controls"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../art/headbarc.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Licensing ActiveX Controls"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR><TR><TD><PRE><IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="controls.htm#bk_activex_controls">Topic Contents</A>
</PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="safety/SetInterfaceSafetyOptions.htm">IObjectSafety::SetInterfaceSafetyOptions</A>
<IMG SRC="../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="authenticode.htm">Signing Code with Microsoft Authenticode Technology</A>
</PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<h1>Licensing ActiveX Controls</h1>

<P>This article explains the licensing strategy for Microsoft&#174; ActiveX&#153; Controls. In addition, it describes the functionality that must be implemented on an ActiveX control in order to support this strategy.

<P><A CLASS=tctop HREF="licensing.htm#Introduction"><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowg.gif">Introduction</A><BR>

<P><A CLASS=tctop HREF="licensing.htm#design_lic"><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowg.gif">Design-Time Licensing</A><BR>

<P><A CLASS=tctop HREF="licensing.htm#run_lic"><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowg.gif">Run-Time Licensing</A><BR>

<P><A CLASS=tctop HREF="licensing.htm#LPK_TOOL"><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowg.gif">Appendix A - Generating a License Package with LPK_TOOL</A><BR>

<P><A CLASS=tctop HREF="licensing.htm#Appendix_B___Authori"><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowg.gif">Appendix B - Authoring Tools</A><BR>
<!--************************************************************--><h2><A NAME="Introduction">Introduction</A></h2>

<P>Most Microsoft&#174; ActiveX&#153; Controls should support design-time licensing and run-time licensing. (The exception is the control that is distributed free of charge.) Design-time licensing ensures that a developer is building his or her application or Web page with a legally purchased control; run-time licensing ensures that a user is running an application or displaying a Web page that contains a legally purchased control.

<P>Design-time licensing is verified by control containers such as Microsoft Visual Basic&#174;, Microsoft Access, or Microsoft Visual InterDev. Before these containers allow a developer to place a control on a form or Web page, they first verify that the control is licensed by the developer or content creator. These containers verify that a control is licensed by calling certain functions in the control: If the license is verified, the developer can add it. 

<P>Run-time licensing is also an issue for these containers (which are sometimes bundled as part of the final application); the containers again call functions in the control to validate the license that was embedded at design time.

<P>Microsoft Internet Explorer 4.0 is another type of container. Like the other containers, Internet Explorer 4.0 also calls functions in the control to verify that it is licensed. However, unlike Visual Basic or Microsoft Access, which embed ActiveX Controls within the binary code of their application's executable files, Internet Explorer 4.0 uses a different model. This unique model is a necessary response due to:
<UL>
<LI>The openness of the browser (the ability to view the HTML source file).
<LI>Client/server issues imposed by the Internet (or corporate intranet). 
</UL>

<P>Because any Internet Explorer 4.0 user can view the HTML source code for a given Web page, and because an ActiveX control is copied to a user's computer before it is displayed, a level of indirection is required to "hide" the license for an ActiveX control from the user. This prevents an Internet Explorer 4.0 user from pirating and reusing a control that they have not purchased. Microsoft addresses these run-time licensing issues with a new file called the license package file (or LPK file). This file can be included in any HTML page by using the OBJECT tag. For more information about .lpk files, their use, and their format, refer to <A HREF="licensing.htm#LPKFILES">The License Package File</A>. 

<P>The functions that support design-time and run-time licensing are members of the <B>IClassFactory2</B> interface. Any ActiveX control that supports licensing must support and implement this interface (an extension of the
<object id="hhal_3" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_3.Click()>IClassFactory</A> interface). The <B>IClassFactory</B> interface supports the <B>CreateInstance</B> and <B>LockServer</B> methods. 
(<object id="hhal_4" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_4.Click()>IClassFactory::CreateInstance</A> is called by a container to instantiate a control;
<object id="hhal_5" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_5.Click()>IClassFactory::LockServer</A> is called by a container to lock the control into memory once it is instantiated). The <B>IClassFactory2</B> interface built upon <B>IClassFactory</B> by adding three new methods: <B>GetLicInfo</B>, <B>RequestLicKey</B>, and <B>CreateInstanceLic</B>. <B>IClassFactory2::GetLicInfo</B> retrieves a structure that specifies the licensing capabilities for an ActiveX control. <B>IClassFactory2::RequestLicKey</B> retrieves a license key. <B>IClassFactory2::CreateInstanceLic</B> instantiates the ActiveX control using the license key (which was retrieved by calling <B>IClassFactory2::RequestLicKey</B>).


<P>If you've created your control with the Microsoft Foundation Class Library (MFC), the <B>IClassFactory2</B> interface is wrapped by the <B>COleObjectFactory</B> class. In addition to handling licensing issues, <B>COleObjectFactory</B> handles object registration as well.

<P>This article provides general information about design-time and run-time licensing for ActiveX Controls. In addition, it provides specific details about run-time licensing for Internet Explorer 4.0. The samples in this article are based on a sample MFC control. For more information about non-MFC controls, refer to the OLE documentation that is part of the Microsoft Platform SDK.

<h2><A NAME="design_lic">Design-Time Licensing</A></h2>

<P>Design-time licensing is verified by ActiveX control containers such as Microsoft Visual Basic, Microsoft Access, and Microsoft Visual InterDev. These containers verify that a control is licensed to the developer by calling <B>IClassFactory2::CreateInstanceLic</B> and passing a NULL value for the <I>bstrKey</I> parameter. The corresponding code found in the control's implementation of <B>CreateInstanceLic</B> verifies that the control is licensed. In most cases, this is done by checking for a license (.lic) file and examining the contents of the first line that appears in this file (the contents of this line are sometimes called the license key).

<h3><A NAME="IMPL">Implementing Design-Time Licensing with MFC</A></h3>

<P>In the sample control, which was created with MFC, the <B>IClassFactory2</B> interface's functions are wrapped by the <B>COleObjectFactory</B> class. The implementation of the <B>COleObjectFactory::IClassFactory2</B> interface is found in the MFC Olefact.cpp source file. The following excerpt from this file shows the MFC implementation of the <B>IClassFactory2::CreateInstanceLic</B> method.

<PRE>STDMETHODIMP COleObjectFactory::XClassFactory::CreateInstanceLic(
    LPUNKNOWN pUnkOuter, LPUNKNOWN /* pUnkReserved */, REFIID riid,
    BSTR bstrKey, LPVOID* ppvObject)
{
    METHOD_PROLOGUE_EX(COleObjectFactory, ClassFactory)
    ASSERT_VALID(pThis);

    *ppvObject = NULL;

    if (((bstrKey != NULL) &amp;&amp; !pThis-&gt;VerifyLicenseKey(bstrKey)) ||
        ((bstrKey == NULL) &amp;&amp; !pThis-&gt;IsLicenseValid()))
        return CLASS_E_NOTLICENSED;

    // outer objects must ask for IUnknown only
    ASSERT(pUnkOuter == NULL || riid == IID_IUnknown);

    // attempt to create the object
    CCmdTarget* pTarget = NULL;
    SCODE sc = E_OUTOFMEMORY;
    TRY
    {
        // attempt to create the object
        pTarget = pThis-&gt;OnCreateObject();
        if (pTarget != NULL)
        {
            // check for aggregation on object not supporting it
            sc = CLASS_E_NOAGGREGATION;
            if (pUnkOuter == NULL || pTarget-&gt;m_xInnerUnknown != 0)
            {
                // create aggregates used by the object
                pTarget-&gt;m_pOuterUnknown = pUnkOuter;
                sc = E_OUTOFMEMORY;
                if (pTarget-&gt;OnCreateAggregates())
                    sc = S_OK;
            }
        }
    }
    END_TRY

    // finish creation
    if (sc == S_OK)
    {
        DWORD dwRef = 1;
        if (pUnkOuter != NULL)
        {
            // return inner unknown instead of IUnknown
            *ppvObject = &amp;pTarget-&gt;m_xInnerUnknown;
        }
        else
        {
            // query for requested interface
            sc = pTarget-&gt;InternalQueryInterface(&amp;riid, ppvObject);
            if (sc == S_OK)
            {
                dwRef = pTarget-&gt;InternalRelease();
                ASSERT(dwRef != 0);
            }
        }
        if (dwRef != 1)
            TRACE1("Warning: object created with reference of %ld\n", dwRef);
    }

    // cleanup in case of errors
    if (sc != S_OK)
        delete pTarget;

    return sc;
}
</PRE>

<P>When the license key (<I>bstrKey</I>) is NULL, this function calls the <B>COleObjectFactory::IsLicenseValid</B> member function to determine whether a valid design-time license exists for the control. The implementation of <B>COleObjectFactory::IsLicenseValid</B> is also found in the MFC Olefact.cpp source file. The following excerpt from this file shows the MFC implementation of this function.

<PRE>BOOL COleObjectFactory::IsLicenseValid()
{
    if (!m_bLicenseChecked)
    {
        m_bLicenseValid = (BYTE)VerifyUserLicense();
        m_bLicenseChecked = TRUE;
    }
    return m_bLicenseValid;
}
</PRE>

<P>Initially, the member variable, <I>m_bLicenseChecked</I>, is false. As a result, the <B>COleObjectFactory::VerifyUserLicense</B> member function is called. This function is one of three <B>COleObjectFactory</B> functions that are usually overridden by the ActiveX control developer. In the case of the sample control, this function was overridden and implemented in the Timectrl.cpp module. It was implemented as follows:

<PRE>BOOL CTimeCtrl::CTimeCtrlFactory::VerifyUserLicense()
{
    return AfxVerifyLicFile(AfxGetInstanceHandle(), _szLicFileName,
        _szLicString);
}
</PRE>

<P>The <B>AfxVerifyLicFile</B> function returns a Boolean value if the license file identified by the <I>_szLicFileName</I> parameter exists and if the first line of this file contains the license string (or key) specified by the <I>_szLicString</I> parameter. These parameters are static variables that appear at the beginning of the Timectrl.cpp file.

<PRE>// Licensing strings

static const TCHAR BASED_CODE _szLicFileName[] = _T("time.lic");

static const WCHAR BASED_CODE _szLicString[] =
    L"Copyright (c) 1996 ";
</PRE>

<P>Note that the sample control uses the default implementation of <B>COleObjectFactory::VerifyUserLicense</B>, which was generated by the ControlWizard. It is possible that a control developer may want to implement a more secure licensing scheme. For example, a developer might want to embed the license key at a location other than the first line in the licensing file. In this case, the implementation of <B>VerifyUserLicense</B> would not call <B>AfxVerifyLicFile</B>; instead, it would contain code that parsed the file as required to extract the embedded key.

<h2><A NAME="run_lic">Run-Time Licensing</A></h2>

<P>Run-time licensing is similar for containers such as Microsoft Visual Basic or Microsoft Access; however, as stated in the introduction, run-time licensing is handled differently by Internet Explorer 4.0. This section will first describe run-time licensing for general containers (such as Visual Basic or Microsoft Access) and will conclude with a description of run-time licensing for Internet Explorer 4.0.

<h3><A NAME="General_Run_Time_Lic">General Run-Time Licensing Considerations</A></h3>

<P>There are two points in time when run-time licensing is an issue for a container such as Microsoft Visual Basic: the first is during the creation of the application's executable file; the second is immediately prior to running the application. In both instances, the container calls one or more of the <B>IClassFactory2</B> methods found in the control in order to determine whether a valid license exists.

<h3><A NAME="Embedding_the_Licens">Embedding the License Key</A></h3>

<P>When you build an executable file with Visual Basic for an application that uses ActiveX Controls, Visual Basic attempts to embed copies of each control's license keys within the executable file. The container retrieves a license key by calling the <B>IClassFactory2::GetLicInfo</B> method found in each control. This function returns the address of a structure, <B>LICINFO</B>, whose members specify whether a run-time key is available and whether a full machine license exists.

<PRE>typedef struct tagLICINFO
    {
    ULONG cbLicInfo;
    BOOL  fRuntimeKeyAvail;
    BOOL  fLicVerified;
    } LICINFO;
</PRE>

<P>If Visual Basic determines that the container does support run-time licensing (that is, if the <B>LICINFO.fRuntimeKeyAvail</B> member was set to TRUE), it then calls the <B>IClassFactory2::RequestLicKey</B> method to retrieve a copy of the key, which it then embeds in the executable file. 

<h4><A NAME="Using_the_embedded_k">Using the embedded key</A></h4>

<P>At run time, a container calls <B>IClassFactory2::CreateInstanceLic</B> for each control that is part of the application or Web page that it is displaying. Unlike the earlier call to <B>CreateInstanceLic</B> (at design time, when the container passed a NULL value as the fourth parameter, <I>bstrKey</I>), the container passes a valid string that contains the embedded license key. This allows the control to run on any user's computer (whether or not they are licensed) as long as the embedded key matches the key found in the control.

<h3><A NAME="Embedding_the_Licens">Embedding the License Key with MFC</A></h3>

<P>In the sample ActiveX control, the <B>IClassFactory2</B> interface's functions are wrapped by the <B>COleObjectFactory</B> class. The implementation of the <B>COleObjectFactory::IClassFactory2</B> interface is found in the MFC Olefact.cpp source file. The following excerpt from this file shows the MFC implementation of the <B>IClassFactory2::GetLicInfo</B> method.

<PRE>STDMETHODIMP COleObjectFactory::XClassFactory::GetLicInfo(
    LPLICINFO pLicInfo)
{
    METHOD_PROLOGUE_EX(COleObjectFactory, ClassFactory)
    ASSERT_VALID(pThis);

    BSTR bstr = NULL;
    pLicInfo-&gt;fLicVerified = pThis-&gt;IsLicenseValid();
    pLicInfo-&gt;fRuntimeKeyAvail = pThis-&gt;GetLicenseKey(0, &amp;bstr);
    if (bstr != NULL)
        SysFreeString(bstr);

    return S_OK;
}
</PRE>

<P><B>COleObjectFactory::GetLicInfo</B> calls two other member functions: <B>COleObjectFactory::IsLicenseValid</B> and <B>COleObjectFactory::GetLicenseKey</B>. The first function is part of the class definition found in Olefact.cpp; the second function was overridden by the sample control and appears in the Timectl.cpp file. The code for <B>COleObjectFactory::IsLicenseValid</B> appears as follows:

<PRE>BOOL COleObjectFactory::IsLicenseValid()
{
    if (!m_bLicenseChecked)
    {
        m_bLicenseValid = (BYTE)VerifyUserLicense();
        m_bLicenseChecked = TRUE;
    }
    return m_bLicenseValid;
}
</PRE>

<P>The <B>COleObjectFactory::IsLicenseValid</B> member function, in turn, calls <B>COleObjectFactory::VerifyUserLicense</B>, another function that was overridden by the control. (The <A HREF="licensing.htm#IMPL">Implementing Design-Time Licensing with MFC</A> section contains a listing for <B>VerifyUserLicense</B>.) In the sample control, this function simply checks the first line of the .lic file and verifies that it contains the specified license key.

<P>After the sample control calls <B>COleObjectFactory::VerifyUserLicense</B>, it then calls the <B>COleObjectFactory::GetLicenseKey</B> member function. This function is overridden by the sample control and is found in the Timectl.cpp file. The code for <B>COleObjectFactory::GetLicenseKey</B> 
appears as follows:

<PRE>BOOL CTimeCtrl::CTimeCtrlFactory::GetLicenseKey(DWORD dwReserved,
    BSTR FAR* pbstrKey)
{
    if (pbstrKey == NULL)
        return FALSE;

    *pbstrKey = SysAllocString(_szLicString);
    return (*pbstrKey != NULL);
}
</PRE>

<P>The <B>CTimeCtrl::CTimeCtrlFactory</B> function retrieves a copy of the license key, which the container can store in the appropriate location. (In the case of Visual Basic or Microsoft Access, the key is embedded in the application's executable file.)

<h3><A NAME="runie">Run-Time Licensing for Internet Explorer 4.0</A></h3>

<P>Like the other containers, Internet Explorer 4.0 also calls the <B>IClassFactory2</B> methods to verify that an ActiveX control is licensed. However, unlike Visual Basic or Microsoft Access, which embed ActiveX Controls within the binary code of their application's executable files, Internet Explorer 4.0 uses a different model. This unique model is a necessary response to the following factors:
<UL>
<LI>The openness of the browser (the ability to view the HTML source file).
<LI>Client/server issues imposed by the Internet (or corporate intranet). 
</UL>

<P>Because any Internet Explorer 4.0 user can view the HTML source code for a given Web page, and because an ActiveX control is copied to a user's computer before it is displayed, a level of indirection is required to "hide" the license for an ActiveX control from the user. This prevents an Internet Explorer 4.0 user from pirating and reusing a control that they have not purchased. Microsoft addresses these run-time licensing issues with a new file called the license package file (or LPK file).

<h3><A NAME="LPKFILES">The License Package File</A></h3>

<P>A license package is stored as a license package (.lpk) file. From a very simplistic perspective, this file can be thought of as an array of ActiveX control CLSIDs and license keys. The file has the following format.

<TABLE>
<TR><TD><B>Element
</B></TD><TD><B>Description
</B></TD></TR>
<TR><TD>.lpk header
</TD><TD>This header identifies the file type: "<I>LPK License Package</I>" </TD></TR>
<TR><TD>Copyright text or other legal statement
</TD><TD>"Legalese" to dissuade casual copying of .lpk files </TD></TR>
<TR><TD>LPK version GUID
</TD><TD>In plain-text on a line by itself. This GUID is used to mark the beginning of the real license package data; it is also used to identify the LPK file format version.</TD></TR>
<TR><TD>Uuencoded(Base64) license package
</TD><TD><PRE>struct {
    UUID uuidLPKFile;   // unique per LPK
    DWORD dwLicenses;   // number of licenses in the file
    LICENSEPAIR aLicenses[]; // array of license pairs
} LICENSEPACKAGE;

struct {
    CLSID clsid;        // clsid of object
    DWORD cchLic;       // number of characters in the license
    WCHAR ach[];        // license (saved as UNICODE characters)
} LICENSEPAIR;
</PRE>
</TD></TR>
</TABLE>

<P>The ActiveX License Manager is a component of Internet Explorer 4.0 found in the Licmgr10.dll file. This component parses an .lpk file and extracts the license key for each corresponding CLSID in the file. 

<P>At run time, when Internet Explorer 4.0 is rendering an HTML page that contains ActiveX Controls, the License Manager calls the <B>IClassFactory2::CreateInstanceLic</B> method, passing the license key that it extracted from the .lpk file in order to verify that a control is licensed. If the license key matches the control's license, the control will be rendered on the page.

<h3><A NAME="Embedding_a_License_">Embedding a License Package in an HTML file</A></h3>

<P>An HTML author can embed a license package in any HTML page by using the OBJECT tag, a CLSID that identifies the object as a license package, and a PARAM tag that specifies the relative location of the license package file with respect to the HTML page.

<PRE>&lt;OBJECT CLASSID="clsid:5220CB21-C88D-11cf-B347-00AA00A28331"&gt;
    &lt;PARAM NAME="LPKPath" VALUE="time.lpk"&gt;
&lt;/OBJECT&gt;
</PRE>

<P>The contents of the .lpk file are parsed by the license manager object. Only one .lpk file can be included in a given HTML page. (If more than one .lpk file is included in a page, Internet Explorer 4.0 ignores all but the first.)


<h2><A NAME="LPK_TOOL">Appendix A - Generating a License Package with LPK_TOOL</A></h2>

<P>The Internet Client SDK ships with an executable file named Lpk_Tool.exe that you can use to generate license package files. This file is copied to the \bin subdirectory found in the SDK. 

<P>The application is actually simple to use. When you start the application, it displays a combo box that lists all of the ActiveX Controls currently running on your computer.

<P>

<P><IMG SRC="../../art/lpk1.gif" WIDTH="573" HEIGHT="274" ALT="Combo box showing all ActiveX Controls running on your computer" >

<P>

<P>The next step requires that you choose the controls that you want to display on a given HTML page. You choose a control by highlighting it in the combo box and then clicking the Add button.

<P>

<P><IMG SRC="../../art/lpk2.gif" WIDTH="573" HEIGHT="274" ALT="Combo box with selected control" >

<P>

<P>Once you've selected all the controls that you want to display on a given page, you can create and save the actual .lpk file by clicking the Save &amp; Exit button. (This causes the application to display the File Save dialog box, which allows you to specify the path and file name.)

<h2><A NAME="Appendix_B___Authori">Appendix B - Authoring Tools</A></h2>

<P>HTML authoring tools will make it easy to create HTML pages with embedded ActiveX Controls. Such tools should be responsible for creating the .lpk license package for licensed controls used on a page or on a Web site. Since there may be a one-to-many mapping between LPKs and HTMs, this may be more difficult for page-based authoring tools as opposed to Web-based authoring tools (for example, Microsoft FrontPage&#153;).

<P>Clearly, tool support is necessary for Notepad HTML authors as well. The solution is a simple GUI tool that lists all controls that are installed on a computer with <I>design-time</I> licenses. The tool allows a user to create an .lpk license package by selecting which controls should be included in the package. A second tool could parse HTML pages and create an .lpk file for all the controls that require licensing.
<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>

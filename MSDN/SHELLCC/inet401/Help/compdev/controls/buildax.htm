<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Building ActiveX Controls for Internet Explorer 4.0</TITLE>

<META NAME=MS-HKWD CONTENT="Building ActiveX Controls for Internet Explorer 4.0">
<META NAME="Keywords" CONTENT="Component Development">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="ch_buildax"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Building ActiveX Controls for Internet Explorer 4.0"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../art/headbarc.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Building ActiveX Controls for Internet Explorer 4.0"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR><TR><TD><PRE><IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="controls.htm#bk_activex_controls">Topic Contents</A>
</PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="intro.htm">Introduction to ActiveX Controls</A>
<IMG SRC="../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="tutorial.htm">ActiveX Control Tutorial</A>
</PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<h1>Building ActiveX Controls for Internet Explorer 4.0</h1>

<P>This article covers features of Microsoft&#174; Internet Explorer 4.0 that a developer 
writing ActiveX&#153; Controls should take into account when targeting Internet Explorer 4.0 
as a container. Some of the material in this article discusses existing technologies that 
have increased relevance with Internet Explorer 4.0; other sections discuss new technologies 
and services that are only available to a control in Internet Explorer 4.0. 
For an in-depth description of these technologies and reference documentation, 
the Internet Client SDK is the best source of information. To get the most out of this article the reader should already be familiar ActiveX Controls and associated COM technologies.

<P><A CLASS=tctop HREF="buildax.htm#Justification_for_Ta"><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowg.gif">Justification for Targeting Internet Explorer as an ActiveX Control Container</A><BR>

<P><A CLASS=tctop HREF="buildax.htm#Apartment_Model_Awar"><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowg.gif">Apartment-Model Awareness</A><BR>

<P><A CLASS=tctop HREF="buildax.htm#OC96_and_Windowless_"><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowg.gif">OC96 and Windowless Controls</A><BR>

<P><A CLASS=tctop HREF="buildax.htm#axcontrol_DHTML"><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowg.gif">Accessing Dynamic HTML</A><BR>

<P><A CLASS=tctop HREF="buildax.htm#Multimedia_Services"><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowg.gif">Multimedia Services</A><BR>

<P><A CLASS=tctop HREF="buildax.htm#Security"><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowg.gif">Security</A><BR>

<P><A CLASS=tctop HREF="buildax.htm#axcontrol_DHTML"><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowg.gif">Authoring Controls for the Active Desktop</A><BR>

<P><A CLASS=tctop HREF="buildax.htm#Debugging"><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowg.gif">Debugging</A><BR>

<P><A CLASS=tctop HREF="buildax.htm#Deployment"><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowg.gif">Deployment</A><BR>

<P><A CLASS=tctop HREF="buildax.htm#Appendix__Additional"><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowg.gif">Appendix: Additional Guidelines and Version Differences</A><BR>
<h2><A NAME="Justification_for_Ta">Justification for Targeting Internet Explorer as an ActiveX Control Container</A></h2>

<P>Internet Explorer is built upon a foundation of reusable and extensible components; 
two of the main components&#151;the WebBrowser Control (SHDOCVW) and the HTML parsing and rendering engine 
(MSHTML)&#151;are available for
<object id="hhal_3" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Reusing_the_WebBrowser_and_MSHTML>
</object><A HREF=JavaScript:hhal_3.Click()>reuse</A> as part of other applications. An increasing number of Microsoft and third-party applications will be using the same underlying control container; thus, if a control works well in Internet Explorer 4.0 it will also work well in future applications. Current examples of this component reuse in the Internet Explorer 
suite include the Active Desktop and Outlook Express. Both use the same HTML rendering engine as Internet Explorer.

<h2><A NAME="Apartment_Model_Awar">Apartment-Model Awareness</A></h2>

<P>Apartment-model awareness is not a new issue with Internet Explorer 4.0, but it is an 
important one because of architectural changes in the multithreaded nature of containers such as 
Internet Explorer, the Active Desktop, and Outlook Express. Multiple instances of these containers 
are now quite common, so ActiveX Controls should be developed to conform to apartment-model rules 
to ensure that they behave correctly.

<P>If a control is not apartment-model aware, the control might not function correctly. 
At the very least, it will suffer from degraded performance because calls to the control will 
be marshaled. This is due to the creation of the control being handled differently by the system 
if the control marks itself as being apartment-model-aware. Internet Explorer 4.0 will also reject improper calls across thread boundaries.

<P>There are two relatively simple steps involved in making a control apartment-model-aware: 
<UL>
<LI>Protect global resources. When data that is shared among instances of the control 
is being accessed, it should be protected so that other instances of the control do not attempt 
to access it at the same time. For example: 
<PRE>::EnterCriticalSection(&amp;g_cs);
// Access global data
// .... 
::LeaveCriticalSection( &amp;g_cs );
</PRE>
<LI>Mark the control in the registry as "Apartment". This indicates to the system 
that the control understands and conforms to apartment-model rules and causes COM 
to create the control in its own apartment. 
</UL>

<P>For further details about OLE threading models, see article <A HREF="http://www.microsoft.com/kb/articles/q150/7/77.htm" TARGET="_top">Q150777</A>, 
"Descriptions and Workings of OLE Threading Models," in the Microsoft Knowledge Base.


<h2><A NAME="OC96_and_Windowless_">OC96 and Windowless Controls</A></h2>

<P>While the OC96 (or OLE Controls '96) specification is not new, full support is only now appearing in common containers such as Office 97 and Internet Explorer 4.0; thus, the specification deserves further attention. One of the primary driving forces behind this specification was to improve the performance of controls for use on the Internet. An additional key feature is support for windowless controls. Windowless controls not only provide better performance, but they also can participate in overlapping 2D layout, can maintain a specific z-order, and can exhibit transparency as well as irregular shapes.
<object id="hhal_4" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Filters_and_Transitions>
</object><A HREF=JavaScript:hhal_4.Click()>Visual Filter effects</A> will only function on components that support the windowless control specification since traditional windowed controls don't provide the hooks required for filters to affect painting. All the enhancements are designed to be compatible with existing OLE Controls technology, so a control can leverage these new features while maintaining 
backward-compatibility with down-level containers. 

<P>Key features of OC96 include: 
<DL>
<DT>Delayed activation.
 </DT><DD>Delaying the activation of a control means that a page can instantiate and be ready for 
 interaction with the user faster, particularly if there are multiple controls on the page. 
 A new interface, <B>IPointerInactive</B>, allows a control to remain inactive but still 
 interact minimally with the mouse and drag and drop. Although the control still activates, 
 it does so only as the result of some interaction with the user. 
</DD><DT>Windowless. 
 </DT><DD>By supporting the windowless control specification, a control can make efficient use of 
 its container's window rather than having a window of its own. This results in using fewer 
 system resources and improves performance through faster activation/deactivation. 
 The new interfaces introduced to support windowless controls include 
 <B>IOleInPlaceObjectWindowless</B> and <B>IOleInPlaceSiteWindowless</B>. When drawing itself, 
 a control asks the container-provided <B>IOleInPlaceSiteWindowless</B> interface for a device context 
 and returns the device context to the container after drawing into it. Providing windowless support 
 not only provides transparency for interesting visual effects, 
 but also further improves the performance of the control.
</DD><DT>Hit detection.
 </DT><DD>Hit detection is provided so that a windowless control can have an irregular shape 
 and to complete the visual benefits of transparency. If the container detects that the 
 rectangular extent occupied by a windowless control has been hit, it calls 
 <B>IViewObjectEx::QueryHitPoint</B> (another new interface for windowless controls). 
 The control then determines if it has been hit and returns an indication to the container. 
</DD><DT>Quick activation.
 </DT><DD>A new, optional interface, <B>IQuickActivate</B>, has been introduced to further speed activation 
 of a control. If a container such as Internet Explorer 4.0 determines that this interface is supported 
 by a control it is instantiating, the container calls <B>IQuickActivate</B>, passing 
 two structures, one that the container uses to provide ambient properties and interface pointers to the control 
 and the other for data that the control returns to the container. 
 Replacing multiple calls with a single call increases the efficiency of instantiating a control.
</DD></DL>
<h2><A NAME="axcontrol_DHTML">Accessing Dynamic HTML</A></h2>
<P>Internet Explorer 4.0 allows components to access the Dynamic HTML object model of the document in which the control is hosted. All the capabilities of the object model are available to the control, allowing it to both read and modify the document content. If a control supports either the <A HREF="../comobj/reference/IObjectWithSite.htm#IObjectWithSite">IObjectWithSite</A> or
<object id="hhal_5" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_5.Click()>IOleObject</A> interface, accessing the object model is very simple and consists of the following two steps: 

<OL>
<LI>Call <B>IOleClientSite::GetContainer</B>. This returns the <B>IOleContainer</B> interface 
of the host of the control. 
<LI>Call
<object id="hhal_6" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_6.Click()>QueryInterface</A> on the <B>IOleContainer</B> interface for the
<object id="hhal_7" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_IHTMLDocument2>
</object><A HREF=JavaScript:hhal_7.Click()>IHTMLDocument2</A> interface. 
</OL>

<P>The
<object id="hhal_8" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_IHTMLDocument2>
</object><A HREF=JavaScript:hhal_8.Click()>IHTMLDocument2</A> interface provides access to the document in which the control is hosted. Given this interface, it is possible to traverse the entire HTML object model. The following bit of code, written using Active Template Library (ATL) 2.0 smart pointers, accesses the object model and sets the background color of the document to pink. 
In script this is equivalent to document.bgColor = "pink". 
<PRE>// Get the document
CComPtr&lt;IOleContainer&gt; spContainer; 
m_spClientSite-&gt;GetContainer(&amp;spContainer); 
CComQIPtr&lt;IHTMLDocument2, &amp;IID_IHTMLDocument2&gt; spDoc(spContainer); 
if (spDoc)
    spDoc-&gt;put_bgColor(CComBSTR(_T("pink")));
</PRE>

<P>Controls can perform any of the manipulations available to script in Internet Explorer 4.0. They can also perform functions that aren't possible from script due to security restrictions that do not apply to ActiveX Controls. To aid in the development process, use script to prove a concept; then translate that script to interface-level manipulation.

<P><B>Note</B>  Any of the new interfaces introduced with Internet Explorer 4.0 are subject to change until 
the product is officially released. It is recommended that you maintain a copy of the header files
you used to develop your code. When you upgrade to a later build of Internet Explorer 4.0, upgrade to the 
corresponding build of the Internet Client SDK, and use a file comparison tool such as Windiff
to compare headers. Windiff is a utility that ships with the Microsoft Platform SDK as well as
Microsoft Visual C++&#174;.
<h2><A NAME="Multimedia_Services">Multimedia Services</A></h2>

<P>Internet Explorer 4.0 ships with a number of
<object id="hhal_9" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Multimedia>
</object><A HREF=JavaScript:hhal_9.Click()>multimedia controls</A>; however, the services these controls use are also available to third-party controls. These include pixel-level manipulation, soon-to-be-introduced DirectDraw&#174; support, timer and synchronization 
services, and visual filters and transitions. The full specifications and samples are included 
in the Internet Client SDK.

<h2><A NAME="Security">Security</A></h2>

<P>Any ActiveX control to be deployed and used with Internet Explorer should be conceived 
and designed with object safety in mind from the start. Object safety is a promise 
by the control author about the potential for the control to be used in a manner that might 
compromise security. There are two variations of object safety that usually, but not always, go together: 

<UL>
<LI>Safe for untrusted data asserts that the control is safe for any possible arguments 
(&lt;<object id="hhal_10" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_PARAM>
</object><A HREF=JavaScript:hhal_10.Click()>PARAM</A>&gt; tags of an &lt;<object id="hhal_11" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_OBJECT_4vsd>
</object><A HREF=JavaScript:hhal_11.Click()>OBJECT</A>&gt;). 

<LI>Safe for scripting asserts that the control is safe for any possible use of its properties, methods, and events.
</UL>
<h3><A NAME="ActiveX_Control_Safe">ActiveX Control Safety Checklist</A></h3>

<P>Safety of the control is ultimately a subjective judgment, but as a general rule "safe" 
means that <I>none</I> of the following undesirable effects will result for any conceivable 
use of the control: 

<UL>
<LI>Exposure of private information on the local computer or network
<LI>Modification or destruction of information on the local computer or network
<LI>Faulting of the control and the potential crashing of the browser 
<LI>Consumption of excessive time or resources such as memory
<LI>Execution of potentially damaging system calls, including execution of files
<LI>Use of the control in a deceptive manner and causing unexpected results 
</UL>

<P>To help check these abstract requirements, here are some questions to consider carefully 
before marking a control as safe. The same questions apply to both untrusted data and 
scripting. 

<UL>
<LI>What files can the control potentially access? 
 <UL>
<LI>The ability to create files can be used to put content into the trusted local computer file system, possibly overwriting valuable data. 
 <LI>Any arguments that allow arbitrary file paths to be specified are particularly suspect as potentially allowing access to private information. 
 <LI>Writing excessive amounts of data even to restricted sets of files can use up disk space. 
 </UL>
<LI>Is registry access possible? 
 <UL>
<LI>Access to even limited parts of the registry could reveal information that should be kept private. 
 <LI>Writing large amounts of data to the registry could waste resources or possibly corrupt the system. 
 </UL>
<LI>What system calls can the control be made to do? 
 <UL>
<LI>Executing code or arbitrary shell commands (such as FORMAT) is particularly dangerous. 
 <LI>Think about how any system calls might be used by a malicious page, 
 especially those calls with arguments that can be influenced by an untrusted data 
 (&lt;PARAM&gt;) or script invocation. 
 </UL>
<LI>Other issues: 
 <UL>
<LI>Since any control can be used by any page that happens to know its CLSID, 
 think about how the control might be reused maliciously in a completely unrelated page. 
 Would the user possibly be tricked by seeing the familiar control out of context? 
 <LI>Be sure the control won't loop infinitely or crash when given bad data or arguments. 
 <LI>Can the control be made to call other objects on the page, including Java&#153; applets? 
 The Java virtual machine (VM) called from native code in the control could attribute greater permissions 
 to the control than script on the page has. If the script can manipulate the control to 
 call the Java VM for it, an indirect security attack is possible. 
 <LI>Can the control tunnel out of the frame in which it is hosted and access content in another frame?
 The data accessed could potentially violate the privacy of the user.
 </UL>
</UL>
<h3><A NAME="Using_ActiveX_Contro">Using ActiveX Controls Safely in an Enterprise Intranet Environment</A></h3>

<P>Using Internet Explorer 4.0
<object id="hhal_12" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_URL_Security_Zones_Overview>
</object><A HREF=JavaScript:hhal_12.Click()>Security Zones</A>, it is possible to configure the browser to only download 
or run ActiveX Controls located with the enterprise, a.k.a. the intranet. When a control is 
downloaded and installed on the local system, however, the location of the original download 
is no longer available, and the control is available for use on any page that might reference 
its CLSID. Thus, take heed to the possibility that an Internet page might reference a control 
intended only for the intranet. There are several approaches to handling this issue.

If the ActiveX Controls are safe for untrusted data and for scripting, supporting <B>IObjectSafety</B> 
and requiring only safe controls is the simplest solution. Controls that are truly safe should not be 
usable to break security, even by an untrusted Internet page.

To prevent an ActiveX control from being used on pages other 
than the one on which it is intended, the control can check the context in which it 
is instantiated. That is, a control can get access to the DHTML object model as described previously
to get the URL of the page instantiating it. The location properties of the document object return 
the URL of the page in which the control is embedded. For instance, an ActiveX control could 
be designed to run only in the "http://admin" intranet area. When the URL of the containing document begins 
with a different protocol and host name, it could run with reduced functionality or otherwise completely 
disable itself. 

Be aware that some important controls might be inherently unsafe for scripting. They include 
tools to aid system configuration or installation. To safely use these ActiveX Controls in 
the intranet environment, it is important to guarantee: 

<UL>
<LI>That these controls be used only by intranet pages and cannot be reused by other untrusted
<object id="hhal_13" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_URL_Security_Zones_Overview>
</object><A HREF=JavaScript:hhal_13.Click()>security zones</A>; 
<LI>That any intranet pages that use these controls do so in the intended manner and with appropriate safeguards.
</UL>

<P>The first restriction can be enforced because, by default, ActiveX Controls are not safe for scripting. 
A system administrator can configure a custom security policy to override object safety for a specific intranet zone. 
Controls that are not marked as safe will run only in pages from this zone. 
In fact, it is possible to restrict a control to run only in a designated secure zone by 
explicitly not marking the control as safe. Of course the Internet zone should never be set to 
override object safety. 

<h2><A NAME="axcontrol_DHTML">Authoring Controls for the Active Desktop</A></h2>

<P>Internet Explorer 4.0 introduces several key innovations to the user's browsing experience. Among these are
<object id="hhal_14" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Offline_Browsing>
</object><A HREF=JavaScript:hhal_14.Click()>offline browsing</A> and the
<object id="hhal_15" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Creating_Active_Desktop_Items>
</object><A HREF=JavaScript:hhal_15.Click()>Active Desktop</A>. The former uses a caching mechanism to allow the user to read content from the Web without requiring them to be connected to it. The latter turns the desktop into a Web page by enabling the user to add any content viewable in the browser as an item to the Active Desktop including ActiveX controls. Network-aware components should understand the issues involved in authoring components for the Active Desktop that behave well in the offline state. For more information see the article on
<object id="hhal_16" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Offline_Browsing>
</object><A HREF=JavaScript:hhal_16.Click()>Supporting Offline Browsing in Applications and Components</A>.


<h2><A NAME="Debugging">Debugging</A></h2>

<P>In Internet Explorer 4.0 Integrated Browser Mode, the Windows&#174; shell and the
Web browser run in the same process space. This poses a challenge to
developers who are attempting to debug their controls. Testing controls in Integrated Browser Mode 
is recommended because it helps to reveal apartment-model issues. For specific information on debugging
ActiveX Controls in Internet Explorer 4.0, see <A HREF="http://www.microsoft.com/kb/articles/q167/7/15.htm" TARGET="_top">Q167715</A>, 
"Debugging ActiveX Controls in IE 4.0 Integrated Browser," in the Microsoft Knowledge Base.

<h2><A NAME="Deployment">Deployment</A></h2>

<P>When deploying controls, use cabinet (.cab) files, and sign your controls. 
Issues regarding security have received great attention recently. End users are not advised to download 
executable content unless it is signed. If you do not sign your control, you cannot expect users 
to download your product. Cabinet files also create a better end-user experience because 
only one certificate is presented to the user, and a single, compressed download brings 
multiple files to the client computer. Details of this technology are in the Internet Client SDK. 

<P>Don't assume that non-system DLLs are already installed on a client computer. 
Although some releases of Internet Explorer ship with certain DLLs, such as MFC and Ctl3d32, 
this is not a reasonable assumption for minimal installations as well as future versions of Internet Explorer. 
In circumstances where a control is dependent on such DLLs, the main cabinet file should reference 
additional cabinets that contain the dependencies so they will be downloaded if necessary.

<h2><A NAME="Appendix__Additional">Appendix: Additional Guidelines and Version Differences</A></h2>

<P>This section presents additional guidelines for creating controls as well as known 
differences in Internet Explorer's control hosting behavior between version 3.0 and 4.0. 
Internet Explorer 3.0 hosted controls in a slightly more relaxed fashion than 
Internet Explorer 4.0; Internet Explorer 4.0 follows the control container specification
more stringently. This allows control authors to better anticipate the behavior of 
Internet Explorer 4.0 as a control container; 
however, it also means that controls which made assumptions based on Internet Explorer 3.0 
behavior might no longer function as desired in Internet Explorer 4.0. Here we present 
the caveats we have discovered to control authors.

<UL>
<LI>If a control fires an event from a thread that it creates, rather than from the thread 
in which it was created, the connection point interface through which the event is fired must 
be marshaled to the secondary thread. For more information, see <A HREF="http://www.microsoft.com/kb/articles/q157/4/37.htm" TARGET="_top">Q157437</A>, 
"FIREV.EXE Fires Events from a Second Thread," in the Microsoft Knowledge Base.
<LI>Internet Explorer 4.0 calls <B>FindConnectionPoint</B> on a control to hook up events even 
if the control exposes no events. A control should be written to expect this call. 

<LI>As previously mentioned, controls should be authored to respect apartment-model rules. 

<LI>The VBScript engine no longer passes parameters to controls by value (<B>ByVal</B>); they are now 
passed by reference (<B>ByRef</B>). Controls should check the VARTYPE field of parameters of type VARIANT 
explicitly.



<LI>Internet Explorer 3.0 sent <B>DoVerb</B> with the verbs OLEIVERB_SHOW and OLEIVERB_HIDE 
to controls in addition to the verb OLEIVERB_INPLACEACTIVATE and 
<object id="hhal_17" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_17.Click()>IOleInPlaceObject::InPlaceDeactivate</A>. Internet Explorer 4.0 no longer sends the show and 
hide verbs. A control should rely only on receiving the OLEIVERB_INPLACEACTIVATE verb and the <B>IOleInPlaceObject::InPlaceDeactivate</B> call.

<LI>Internet Explorer 3.0 activated all controls immediately upon initialization of the control. 
Internet Explorer 4.0 does not. Instead it implements an optimization, only activating a control 
when it is visible (OLEMISC_ACTIVATEWHENVISIBLE). If a control needs to process 
window messages at initialization, it should create a hidden window for that purpose. 

<LI>In Internet Explorer 4.0, if a control implements a ReadyState property (DISPID_READYSTATE), events will remain frozen until the control notifies the container that the ready state has changed to READYSTATE_COMPLETE. Internet Explorer expects this notification through its <B>IPropertyNotifySink::OnChanged</B> implementation. 
Internet Explorer 3.0 would unfreeze events even if the control never reached the completed state. 
All controls should implement a ReadyState property to communicate their initialization status to 
scripts. 

<LI>A control should listen to <B>IOleControl::FreezeEvents</B> calls from the container. 
If a control fires an event that is important when events are frozen, the event will not 
be received by scripts. While it is not typically harmful to fire an event when events are 
frozen, if events are critical, the control should maintain a freeze count and implement 
a queuing mechanism, firing those queued events when <B>FreezeEvents</B> is called with 
FALSE and the freeze count reaches 0. 

<LI>In Internet Explorer 3.0, controls were unloaded when the browser was closed. 
Internet Explorer 4.0 relies upon proper COM reference counting. When the last reference to a 
control is released, the control will unload. Likewise, when the last reference to Internet Explorer
is released, the browser will unload. A control should take care when caching interface pointers 
such as those returned by <B>IOleClientSite::GetContainer</B> and 
<B>IOleControlSite::GetExtendedObject</B>. 

<LI>A control should use the WM_CONTEXTMENU message to trigger a context menu and not utilize the WM_RBUTTONUP message. 

<LI>A control should not forcefully UI activate itself, or assume itself to be UI active. 
This is an area in which the page author should be in control, and a control that needs the 
focus should have it set through script. In the case of multiple controls on a page, 
a UI activation battle could cause strange results. Take as another example a control 
at the bottom of a large page that forcefully scrolls into view were it to UI activate itself upon instantiation.

<LI>A control should only bring up modal dialog boxes when requiring immediate 
response to some user interaction. On the contrary, a control asynchronously 
downloading data in the background should not display a modal dialog box if the link fails. 
Instead it should fire an error event that a script could handle in its own fashion. 
Always keep the user in mind, as well as the effect a control's behavior will have upon 
applications hosting your control directly or indirectly through Internet Explorer 4.0 components.

<LI>Controls should take advantage of the Internet Explorer 4.0 implementation of the <A HREF="../comobj/reference/IBindHost.htm#IBindHost">IBindHost</A> 
interface when performing data download. <B>IBindHost</B> can be obtained from Internet Explorer 
through the <A HREF="../comobj/reference/IServiceProvider.htm#IServiceProvider">IServiceProvider</A> interface, which is available by querying the
<object id="hhal_18" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_18.Click()>IOleClientSite</A> interface. For details, see
the ATL 2.0 implementation of
<object id="hhal_19" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_IBindStatusCallback>
</object><A HREF=JavaScript:hhal_19.Click()>IBindStatusCallback</A>, specifically <B>IBindStatusCallbackImpl::StartAsyncDownload</B>.

<LI>Internet Explorer 4.0 eliminates the four-page in-memory cache. In Internet Explorer 3.0, 
controls would remain alive even though the page in which they were embedded was no longer in view. 
Assuming proper reference counting, Internet Explorer 4.0 destroys all controls embedded on 
the page when the user navigates away from the page. To keep a control alive, consider 
implementing a
<object id="hhal_20" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_FRAMESET_8hyl>
</object><A HREF=JavaScript:hhal_20.Click()>FRAMESET</A> and placing the
<object id="hhal_21" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_OBJECT_4vsd>
</object><A HREF=JavaScript:hhal_21.Click()>OBJECT</A> tag in the
<object id="hhal_22" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_HEAD_6mp9>
</object><A HREF=JavaScript:hhal_22.Click()>HEAD</A> element of the page containing the <B>FRAMESET</B>. While this instance of the control is not visible, it could provide global data for use by other objects contained within other frames within the frameset.

<LI>Internet Explorer 4.0 prints documents by instantiating a second
instance of the document on a background thread, by restoring the state of the document, 
and by requesting that the document print itself. To provide proper support for printing 
in Internet Explorer 4.0, controls should support one of the persistence interfaces (IPersist*). 
In addition, controls should make no assumptions about the type of device context (DC) they receive: 
controls should provide device independent rendering support. Finally, since controls are not put into 
the UI Active state when printed in the background, they should not rely 
upon window handles (HWND).


</UL>
<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>

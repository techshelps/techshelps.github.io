<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Packaging ActiveX Controls</TITLE>

<META NAME=MS-HKWD CONTENT="Packaging ActiveX Controls">
<META NAME="Keywords" CONTENT="Component Development">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="ch_packaging"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Packaging ActiveX Controls"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../art/headbarc.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Packaging ActiveX Controls"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR><TR><TD><PRE><IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="controls.htm#bk_activex_controls">Topic Contents</A>
</PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="authenticode/appendixes.htm">Appendix A: Required Files</A>
<IMG SRC="../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="palettes.htm">Palette Management for ActiveX Objects</A>
</PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<h1>Packaging ActiveX Controls</h1>

<P> This article introduces a data-compression technology and associated toolset that you can use to package your Microsoft&#174; ActiveX&#153; control for faster, more efficient downloading over the Internet or an intranet. (This same technology and toolset can be applied to Microsoft Win32&#174; applications, Java&#153; classes, and Java libraries.)

<P><A CLASS=tctop HREF="packaging.htm#Cabinet_Files"><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowg.gif">Cabinet Files</A><BR>

<P><A CLASS=tctop HREF="packaging.htm#EXAMPLE"><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowg.gif">Packaging the Sample ActiveX Control</A><BR>

<P><A CLASS=tctop HREF="packaging.htm#CABARC"><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowg.gif">Cabarc.exe</A><BR>

<P><A CLASS=tctop HREF="packaging.htm#INFREF"><IMG SRC="../../art/arrowg.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowg.gif">.INF Files</A><BR>
<!--************************************************************--><h2><A NAME="Cabinet_Files">Cabinet Files</A></h2>

<P>For a number of years, Microsoft used cabinet (.cab) files to compress software that was distributed on disks. Originally, these files were used to minimize the number of disks shipped with packaged product; today, .cab files are used to reduce the file size and the associated download time for Web content that is found on the Internet or corporate intranet servers. 

<P>The .cab file format is a nonproprietary compression format, also known as MSZIP, that is based on the Lempel-Ziv data-compression algorithm. (At a future date, other compression formats might also be supported.)

<h3><A NAME="access">Accessing Controls Stored in Cabinet Files</A></h3>

<P>An ActiveX control is identified by the
<object id="hhal_3" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_OBJECT_4vsd>
</object><A HREF=JavaScript:hhal_3.Click()>OBJECT</A> tag in an HTML file. If the control has been stored in a .cab file, the <B>OBJECT</B> tag must include a <B>CODEBASE=</B> attribute that specifies the URL for this .cab file. The following excerpt from a sample HTML file demonstrates how the <B>OBJECT</B> tag and <B>CODEBASE=</B> attribute are used.

<PRE>&lt;OBJECT CLASSID="clsid:dcf0768D-ba7a-101a-b57a-0000c0c3ed5f" codebase="http://webserver/time.cab" 
    ALIGN="CENTER" WIDTH=270 HEIGHT=26 ID="T1"&gt;&lt;PARAM NAME="Interval" VALUE=1000&gt;
    &lt;PARAM NAME="Enabled" VALUE=1&gt;&lt;/OBJECT&gt;
</PRE>

<P>Microsoft Internet Explorer version 4.0 handles the
<object id="hhal_4" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_OBJECT_4vsd>
</object><A HREF=JavaScript:hhal_4.Click()>OBJECT</A> tag and the <B>CODEBASE=</B> attribute in the following manner:
<OL>
<LI>Internet Explorer 4.0 parses the
<object id="hhal_5" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_OBJECT_4vsd>
</object><A HREF=JavaScript:hhal_5.Click()>OBJECT</A> tag and searches for the <B>CODEBASE=</B> attribute. If the <B>CODEBASE=</B> attribute is absent or is preceded by a URL-to-object index server in the CodeBaseSearchPath, this index is used to retrieve the file.

<LI>Internet Explorer 4.0 locates the .cab file identified by the <B>CODEBASE=</B> attribute.
<LI>Internet Explorer 4.0 expands the files found in the .cab file.
<LI>Internet Explorer 4.0 copies the expanded files to the user's computer (the default directory is \windows\occache).
<LI>Internet Explorer 4.0 registers the objects and/or files that require registration.
<LI>Internet Explorer 4.0 calls the Component Object Model (COM) function <B>CoCreateInstance</B> to create an instance of the specified object.
</OL>
<h3><A NAME="Signing_Cabinet_File">Signing Cabinet Files</A></h3>

<P>A .cab file can be digitally signed like an ActiveX control. A digital signature provides accountability for software developers: The signature associates a software vendor's name with a given file. 
A signature is applied to a .cab file (or control) using the new Authenticode&#153; technology. 

<P>The .cab toolset assists software developers in applying digital signatures to .cab files by allowing a developer to allocate space in the .cab file for the signature.

<h3><A NAME="CABinet_Resource_Kit">CABinet Resource Kit</A></h3>

<P>Microsoft supplies a CABinet resource kit that contains tools that a developer can use to build .cab files. You access this technology by executing a self-extracting executable, Cab-sdk.exe, that installs from the ..\inetsdk\bin subdirectory.

<P>One of the tools installed by Cab-sdk.exe is Cabarc.exe. This command-line application lets you compress an ActiveX control and store it in a .cab file. In addition to creating .cab files, you can use Cabarc.exe to list the contents of or extract files from an existing .cab file.

<P>For an example that demonstrates how you can use Cabarc.exe to package an ActiveX control, see <A HREF="packaging.htm#EXAMPLE">Packaging the Sample ActiveX Control</A>.

<P>For more information about Cabarc.exe and its options, see <A HREF="packaging.htm#CABARC">Cabarc.exe</A>.

<h3><A NAME="pack_strat">Packaging Strategies for Multiple Platforms</A></h3>

<P>Internet Explorer 4.0 and ActiveX Controls can run on the Apple Macintosh&#174; and on Intel&#174; x86 computers, as well as on any of several RISC machines. As a result, it's important that control developers create, test, and bundle their control's binaries for all platforms. 

<P>This section outlines three packaging strategies for supporting multiple platforms:
<UL>
<LI>Multiple .cab files with the .inf saved in a separate .cab file
<LI>Multiple .cab files with the .inf and x86 binary bundled in a single .cab file
<LI>A single .cab file
</UL>
<h4><A NAME="Multiple__cab_files_">Multiple .cab files with .inf in separate .cab</A></h4>

<P>The first strategy requires that one .cab file contain a Windows&#174; 95 .inf file, the second contain the x86 binary, the third contain the Apple MacIntosh binary, and so on. Using this strategy, the <B>CODEBASE=</B> attribute of the
<object id="hhal_6" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_OBJECT_4vsd>
</object><A HREF=JavaScript:hhal_6.Click()>OBJECT</A> tag specifies the relative path for the .cab file that contains the Windows 95 .inf file.

<P>The primary benefit of this strategy is reduced file size at download time&#151;only the first .cab file containing the .inf file and a second .cab file with the appropriate binary for a given platform are downloaded.

<P>The one drawback of this strategy is that two digital certificates will appear (one certificate per .cab file).

<h4><A NAME="Multiple__cab_files_">Multiple .cab files with .inf and x86 binary bundled in single .cab</A></h4>

<P>The second strategy requires that one .cab file contain both the Windows 95 .inf file and the x86 binary. The remaining .cab files contain the Apple MacIntosh and RISC binaries (one binary per .cab file). Using this strategy, the <B>CODEBASE=</B> attribute of the
<object id="hhal_7" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_OBJECT_4vsd>
</object><A HREF=JavaScript:hhal_7.Click()>OBJECT</A> tag will specify the relative path for the .cab file that contains the Windows 95 .inf file and the x86 binary.

<P>This strategy is most beneficial for controls that are primarily targeted at the x86 platform. Another benefit of this strategy is reduced file size at download time.

<P>The one drawback of this strategy is that Apple MacIntosh or RISC users will have to wait for the x86 binaries to download.

<h4><A NAME="Single__cab_file">Single .cab file</A></h4>

<P>The third strategy requires that a single .cab file contain all binaries.

<P>This strategy is most beneficial for small controls that have no dependent DLLs and that are primarily targeted at an intranet. 

<P>The drawbacks of this solution are that it does not optimize for dependent DLLs that might already be on the user's computer, and this solution might not be acceptable on some intranets.

<h2><A NAME="EXAMPLE">Packaging the Sample ActiveX Control</A></h2>

<P>This section describes how a single .cab file was created for the sample digital clock control. This .cab file contains a Windows 95 .inf file as well as the x86 binary for the control. 

<P>This example is based on the second packaging format described in the previous section of this article. However, the sample package is incomplete: a couple of final steps, which were omitted, require that a separate .cab file be created for the Apple Macintosh binary as well as for each of the supported RISC platforms. In addition to creating the separate .cab files, the .inf file would need to be modified to point to these additional .cab files. These steps were omitted to simplify the example.

<h3><A NAME="Installing_the_CABin">Installing the CABinet Development Kit</A></h3>

<P>To package an ActiveX control, it's necessary to install Cabarc.exe in the ..inetsdk\bin subdirectory. When the kit is installed, you can begin using the tools it contains to build the necessary .cab files for your control.

<h3><A NAME="Creating_the__inf_Fi">Creating the .inf File</A></h3>

<P>As previously stated, the sample .cab file bundles a Windows 95 .inf file with an x86 binary. The bundled .inf file contains information about the control, such as its name, its class identifier (CLSID), the name and location of required DLLs, whether the control requires registration, and so on. This .inf file has the following format:

<PRE> [version]
    signature="$CHICAGO$"
    AdvancedINF=2.0
 [Add.Code]
    time.ocx=time.ocx
    msvcrt.dll=msvcrt.dll
    mfc42.dll=mfc42.dll
    olepro32.dll=olepro32.dll
 [time.ocx]
    file-win32-x86=thiscab
    clsid={DCF0768D-BA7A-101A-B57A-0000C0C3ED5F}
    FileVersion=1,0,0,0
    RegisterServer=yes
 [msvcrt.dll]
    FileVersion=4,20,0,6164
    hook=mfc42installer
 [mfc42.dll]
    FileVersion=4,2,0,6256
    hook=mfc42installer
 [olepro32.dll]
    FileVersion=4,2,0,6068
    hook=mfc42installer
 [mfc42installer]
    file-win32-x86=http://activex.microsoft.com/controls/vc/mfc42.cab
    run=%EXTRACT_DIR%\mfc42.exe
</PRE>

<P>If you're bundling the .inf file and your control's x86 binary in a single .cab file, and if your control was written with Microsoft Foundation Class Library (MFC) 4.2, you can use the previous example after you replace all occurrences of the sample control name (time.ocx) with the name of your control and replace the sample control's CLSID with the CLSID for your control.

<P>If you're organizing your files differently, or if your control requires DLLs other than the Microsoft Visual C++&#174; 4.2 DLLs, you'll need to modify the .inf file to accommodate your unique requirements. Note that if your control requires that a DLL be registered before the control, its corresponding entry in the .inf file must precede the control's entry in the file. Also note that the order of the source files in the command line that is passed to Cabarc.exe must match the order of the file references in the .inf file.

<P>For more information about .inf files and the section tags found within them, see <A HREF="packaging.htm#INFREF">.INF Files</A>.

<h3><A NAME="Building_the__cab_Fi">Building the .cab File</A></h3>

<P>Once you've installed Cabarc.exe and built the .inf file for your package, you can build the .cab file. In the case of the sample .cab file, this entailed running Cabarc.exe with the following arguments:

<PRE>cabarc.exe -s 6144 N time.cab time.ocx time.inf
</PRE>

<P>This command created a .cab file named Time.cab, which contains a compressed x86 binary for the sample control as well as a compressed version of the corresponding .inf file. The <B>-s 6144</B> 
switch specifies that Cabarc.exe should allocate 6144 bytes for a digital certificate. (Code signing with digital certificates is described briefly in the next section).

<P>For more information about Cabarc.exe and its use, see <A HREF="packaging.htm#CABARC">Cabarc.exe</A>.

<h3><A NAME="cert">Signing the .cab File</A></h3>

<P>The default security level for Internet Explorer 4.0 is High. When a user runs at this level, any object identified by the
<object id="hhal_8" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_OBJECT_4vsd>
</object><A HREF=JavaScript:hhal_8.Click()>OBJECT</A> tag on an HTML page must be digitally signed. Digital signatures are created using the Authenticode technology that is included in the Internet Client SDK. A digital signature associates a software vendor's name and a unique public key with a file that contains an ActiveX object (ensuring some sort of accountability on the part of the object's developer).

<P>Before you purchase a certificate for your control's .cab file from a vendor, you can use the test certificate provided by Microsoft for verification purposes. The following steps were required to add the SDK test certificate to the sample control's .cab file:

<OL>
<LI>Use Setreg.exe, which is found in the \inetsdk\bin directory, to validate the test root in the trust hierarchy.
<PRE>setreg 1 true
</PRE>

<P>Setreg.exe replaces the Wvtston.reg and Wvtstoff.reg files that were shipped as part of the ActiveX SDK. Validation of the test root means that Internet Explorer 4.0 will treat a .cab file signed under the test root as though it included credentials. 

<P>
<LI>Use the Makecert.exe utility, which is found in the \inetsdk\bin directory, to create a key pair (the pair consists of a public and a private key).
<PRE>makecert -u:mykey -n:CN=mysoftwarecompany cert.cer
</PRE>

<P>In addition to creating the key pair, Makecert.exe associates the key pair with an X.500 distinguished name and creates an X.509 certificate that is signed by the root key (and that binds your name to the public part of the new key pair).

<P>
<LI>Use the Cert2SPC.exe utility, which is found in the \inetsdk\bin directory, to generate a software publishing certificate (.spc file).
<PRE>cert2spc root.cer cert.cer cert.spc
</PRE>

<P>
<LI>Use the Signcode.exe utility (and accompanying wizard), which is found in the \inetsdk\bin directory, to sign the .cab file.
<PRE>signcode -prog mycab.cab -spc cert.spc -pvk mykey
</PRE>

<P>If Signcode.exe is successful, it will have embedded a PKCS7 certificate in the .cab file.
</OL>

<P>If you package your control in one or more .cab files, each file must be digitally signed. 

<P>For information about X.500 distinguished names, X.509 certificates, software publishing certificates, or PKCS7 certificates, see the article titled <A HREF="authenticode.htm#ch_codesign">Signing Code with Microsoft Authenticode Technology</A>. 


<h2><A NAME="CABARC">Cabarc.exe</A></h2>

<P>Cabarc.exe is a utility that creates, lists, and extracts the contents of cabinet (.cab) files. Cabarc uses a command-line interface similar to that of popular archiving tools. Cabarc supports wildcards and recursive directory searches.

<P> Cabarc is used as follows:
<PRE>cabarc [&lt;options&gt;] &lt;command&gt; [&lt;file list&gt;]
</PRE>

<P>Three commands are currently supported:
<UL>
<LI><B>n</B> (create a new .cab file)
<LI><B>l</B> (list contents of an existing .cab file)
<LI><B>x</B> (extract files from a .cab file)
</UL>
<h3><A NAME="CABCREATE">Creating New .cab Files (n Command)</A></h3>

<P>Cabinets are created by using the <B>n</B> command, followed by the name of the cabinet to create, followed by a file name list, as shown in this example:
<PRE>cabarc n mycab.cab prog.c prog.h prog.exe readme.txt
</PRE>

<P>This command creates the cabinet Mycab.cab, containing the files Prog.c, Prog.h, Prog.exe, and Readme.txt, in a single folder, using the default compression mode, MSZIP.

<P>Cabarc supports wildcards in the file name list, as shown in the following example:
<PRE>cabarc n mycab.cab prog.* readme.txt
</PRE>
<h4><A NAME="Options___p___P___r_">Options (-p, -P, -r, -s, -i, -m, -l, +, @)</A></h4>
<P>Directory names are not preserved in the cabinet (by default); only the file name component is stored. For example, the following command stores Prog.c in the cabinet:

<PRE>cabarc n mycab.cab c:\source\myproj\prog.c
</PRE>

<P><B>Path preservation (-p)</B>

<P>To preserve paths, use the <B>-p</B> option as shown in the following example:
<PRE>cabarc -p n mycab.cab c:\mysource\myproj\prog.c
</PRE>

<P>This command puts mysource\myproj\prog.c in the cabinet. Be aware that the c:\ prefix is still removed from the file name: Cabarc cannot store absolute paths in the cabinet nor extract such absolute paths.



<P><B>Path stripping (-P)</B>

<P>The path stripping option, <B>-P</B>, is used for preserving part (but not all) of a path. The following example shows how this option can archive everything in the c:\mysource\myproj\ directory, but store only the myproj\ component of the path.
<PRE>cabarc -p -P mysource\ n mycab.cab c:\mysource\myproj\prog.c
</PRE>

<P>The <B>-P</B> option strips any strings that begin with the provided string. Wildcards are not supported by the <B>-P</B> option; it is a simple text match. Absolute path prefixes, such as c:\ or \, are stripped before the comparison takes place. Do not include absolute path prefixes when using the <B>-P</B> option.

<P>The <B>-P</B> option can be reused to strip out multiple paths. Cabarc builds a list of all paths to be stripped and applies only the first one that matches. Consider the following example:
<PRE>cabarc -p -P mysrc\ -P yoursrc\ n mycab.cab c:\mysrc\myproj\*.* d:\yoursrc\yourproj\*.c
</PRE>

<P>The trailing slash at the end of the path is important: Entering <B>-P mysrc</B> instead of <B>-P mysrc\</B> adds files as \myproj\<I>file name</I>.



<P><B>Recursive directory search (-r)</B>

<P>Cabarc has an option, <B>-r</B>, for a recursive directory search. Using this option archives files in a directory and all of its subdirectories. For example, the following command example archives all files ending in .h that are in c:\msdev\include\, c:\msdev\include\sys, and c:\msdev\include\gl (assuming these directories exist on your system).
<PRE>cabarc -r -p n mycab.cab c:\msdev\include\*.h
</PRE>

<P>The <B>-p</B> option is used here to preserve the path information when the files are added to the cabinet. Without this option, only the file names would be stored. 



<P><B>Reserving space for digital signatures (-s)</B>

<P>Cabarc can reserve space in the cabinet for a code signature. This is done with the <B>-s</B> option, which reserves a specified amount of empty space in the cabinet. For code signatures, reserve 6144 bytes. Consider the following example for doing so:
<PRE>cabarc -s 6144 n mycab.cab test.exe
</PRE>

<P>The <B>-s</B> option does not actually write the code signature; it reserves space for it in the cabinet. Use the code signature utility to fill out the code signature.




<P><B>Setting the cabinet ID (-i)</B>

<P>Cabinet files have a 16-bit cabinet identification field that is designed for application use. The default value of this field is zero; however, use the <B>-i</B> option of Cabarc to set this field to any 16-bit value, as shown in the following example:
<PRE>cabarc -i 12345 n mycab.cab test.exe
</PRE>
<P><B>Setting the compression type (-m)</B>

<P>Set the compression type with the <B>-m</B> option. The default compression type for a cabinet is MSZIP. Only MSZIP compression (-m MSZIP) and no compression (-m NONE) are supported. The following command stores files in the cabinet without compression.
<PRE>cabarc -m NONE n mycab.c *.*
</PRE>

<P><B>Creating a file list from a file (-l)</B>

<P>Cabarc can create a file list from a file. Cabarc compiles a list of file inputs from a text file (instead of from the command line), using the <B>-l</B> option, followed by the name of the file from which to take the inputs. Consider the following example:
<PRE>cabarc -l filelist.txt n mycab.cab
</PRE>
<P>The <B>-l</B> option can be reused to retrieve file lists from multiple files. Cabarc does not check for duplicate files. If the same physical file appears in multiple file lists, it gets added to the cabinet multiple times.

<P>The <B>-l</B> option can be combined with file names on the command line. The files from the <B>-l</B> option are added first. Consider the following example:
<PRE>cabarc -l filelist1.txt -l filelist2.txt n mycab.cab *.c *.h
</PRE>
<P><B>Beginning new folders (+)</B>

<P>All files are put in one folder in the cabinet (by default). It is possible to instruct Cabarc to begin a new folder by using the plus sign (+) for the file to be added, as shown in the following example:
<PRE>cabarc n mycab.cab test.c main.c + test.exe *.obj
</PRE>

<P>This command creates the cabinet Mycab.cab with one folder containing Test.c and Main.c, and a second folder containing Test.exe and all files matching *.obj.



<P><B>Generating a file listing from an existing file list (@)</B>

<P>Cabarc can input its list of files from a text file, instead of from the command line, by using @files ("at files"). This is done by using the @ symbol to prefix the name of the file that contains the file list. For example:
<PRE>cabarc n mycab.cab @filelist.txt
</PRE>

<P>The text file must list the physical file names of the files to be added, one per line. As is the case when specifying file names on the command line, the plus (+) symbol can be used as a file name to specify the beginning of a new folder. If a file name contains any embedded spaces, it must be enclosed in quotes, as shown here:
<PRE>test.c
myapp.exe
"output file.exe"
</PRE>

<P>The reason for requiring quotes is that each physical file name might be followed on the same line by an optional logical file name, which specifies the name under which the file will be stored in the cabinet.
<PRE>test.c myapp.c
myapp.exe
"output file.exe" foobar.exe
</PRE>

<P>If the logical file name contains spaces, it must also be enclosed in quotes. Note that the logical file name overrides the <B>-p</B> (preserve path names) and <B>-P</B> (strip path name) options&#151;the file will be added to the cabinet exactly as indicated. Wildcards are allowed in the physical file name, but in this situation a logical file name is not allowed.

<P>The @ feature can be used multiple times to retrieve file lists from multiple files. Cabarc does not check for the presence of duplicate files, so if the same physical file appears in multiple file lists, it will be added to the cabinet multiple times. 

<P>The @ feature can be combined with file names on the command line. Files are added in the order in which they are parsed on the command line. For example:
<PRE>cabarc n mycab.cab @filelist1.txt *.c @filelist2.txt *.h
</PRE>

<P>The @ feature is available only when creating cabinets, not when extracting or listing cabinets.



<h3><A NAME="CONTENTS">Listing Contents of Existing Files (l Command)</A></h3>

<P>The list cabinet contents command, <B>l</B>, makes it possible to view the contents of a cabinet. Consider the following example:
<PRE>cabarc l mycab.cab
</PRE>

<P>Cabarc displays the Set ID 

in the cabinet (see the <B>-s</B> option for cabinet creation). Cabarc also displays the following file information: size, date, time, and attributes.

<h3><A NAME="EXTRACT">Extracting Files from Cabinet Files (x Command)</A></h3>

<P>The extracting cabinets command, <B>x</B>, extracts files from a cabinet. The simplest use of the <B>x</B> command is shown in the following example, which extracts all files from the cabinet.
<PRE>cabarc x mycab.cab
</PRE>

<P>Alternatively, it is possible to selectively extract files by providing a list of file names or a list of file names and wildcards. Consider the following example:
<PRE>cabarc x mycab.cab readme.txt *.exe *.c
</PRE>

<P>Full paths (if they are present in the cabinet), by default, are not preserved upon extraction. For example, if mysrc\myproj\test.c is in the cabinet, the command <B>cabarc x mycab.cab</B> causes Test.c to be extracted into the current directory. To preserve file names upon extraction, the <B>-p</B> option must be used. This option causes any required directories to be created, if necessary.

<P>By default, the extracted files are stored in the current directory (and its subdirectories, if <B>-p</B> is used). However, it is possible to specify a destination directory for the extracted files. This is accomplished by appending a directory name to the command line. The directory name must end in a backslash ( \ ). For example:
<PRE>cabarc x mycab.cab c:\somedir\

cabarc x mycab.cab *.exe c:\somedir\
</PRE>

<P>The extracting cabinets option considers only the file name component in the matching process; the path name is ignored. For example, <B>cabarc x mycab.cab test.c</B> causes mysrc\myproj\test.c to be extracted to the current directory as Test.c, as will <B>cabarc x mycab.cab *.c</B> (which also extracts any other files matching *.c).

<h2><A NAME="INFREF">.INF Files</A></h2>

<P>An .inf file contains data that Microsoft Windows NT&#174; and Windows&#174; 95 use to load and register a bundled control (as well as any files required by that control). Each section of the .inf file is described below.
<h3><A NAME="The__version__Sectio">The [version] Section of the .inf File</A></h3>

<P>The first section in the .inf file is the [version] section. In the sample .inf, this section has the following format:
<PRE>[version]
    signature="$CHICAGO$"
    AdvancedINF=2.0
</PRE>

<P>The signature= tag specifies that the .inf version is compatible with both Windows NT and Windows 95.

<P>The AdvancedINF= tag identifies the version of Advpack.dll that Internet Explorer 4.0 must load in order to parse this .inf file. In this case, version 2.0 is required.
<h3><A NAME="The__Add_Code__Secti">The [Add.Code] Section of the .inf File</A></h3>

<P>The second section of the .inf file is the largest section. In addition to the section immediately following the [Add.Code] tag, this section includes the subsections that are identified by the [time.ocx], [msvcrt.dll], [mfc42.dll], and [olepro32.dll] tags. 

<P>The [Add.Code] section maps files required by a given .ocx file to subsections in the .inf file. In the sample .inf file, this section has the following format:
<PRE>[Add.Code]
    time.ocx=time.ocx
    msvcrt.dll=msvcrt.dll
    mfc42.dll=mfc42.dll
    olepro32.dll=olepro32.dll
</PRE>

<P>The first line in this section maps time.ocx (the file that contains the sample control) to a subsection of the same name. The second, third, and fourth lines map DLLs that are required by the control to corresponding subsections in the .inf file. (The names of the .inf subsections are not restricted to the mapped file name; these names were chosen strictly for convenience in the sample.)

<P>Since the sample control was created with MFC 4.2, the three named DLLs are required on a user's computer before the control will successfully run.
<h4><A NAME="The__time_ocx__subse">The [time.ocx] subsection of the [Add.Code] section</A></h4>

<P>The [time.ocx] subsection has the following format:
<PRE>[time.ocx]
    file-win32-x86=thiscab
    clsid={DCF0768D-BA7A-101A-B57A-0000C0C3ED5F}
    FileVersion=1,0,0,0
    RegisterServer=yes
</PRE>
<UL>
<LI>The first line in this subsection specifies that the x86 binary is found in the same .cab file as the .inf file.
<LI>The second line specifies the control's CLSID.
<LI>The third line specifies the control's version.
<LI>The fourth line specifies that Internet Explorer 4.0 should register the control (using the specified CLSID and version number).
</UL>
<h4><A NAME="The__msvcrt_dll__sub">The [msvcrt.dll] subsection of the [Add.Code] section</A></h4>

<P>The [msvcrt.dll] subsection has the following format:
<PRE>[msvcrt.dll]
    FileVersion=4,20,0,6164
    hook=mfc42installer
</PRE>

<P>The first line specifies the file version from the fixedfileinfo section of the DLL's version resource.


<P>Note that Windows 95 Explorer shows only a partial version number in the Properties dialog box. For example, in the case of Msvcrt.dll, the Properties dialog box will return 4.20.6164 as the version number (ignoring the third section [0] in the 4,20,0,6164 series).

<P>The second line in this subsection, hook=mfc42installer, identifies a section in the .inf file that points to a .cab file that contains the required DLL (Msvcrt.dll).

<h4><A NAME="The__mfc42_dll__subs">The [mfc42.dll] subsection of the [Add.Code] section</A></h4>

<P>The [mfc42.dll] subsection has the following format:
<PRE>[mfc42.dll]
    FileVersion=4,2,0,6256
    hook=mfc42installer
</PRE>

<P>For more information about these entries, see the description of the [msvcrt.dll] subsection.

<h4><A NAME="The__olepro32__subse">The [olepro32] subsection of the [Add.Code] section</A></h4>

<P>The [olepro32.dll] subsection has the following format:
<PRE>[olepro32.dll]
    FileVersion=4,2,0,6068
    hook=mfc42installer
</PRE>

<P>For more information about these entries, see the description of the [msvcrt.dll] subsection.

<h3><A NAME="The__mfc42installer_">The [mfc42installer] Section of the .inf File</A></h3>

<P>The final section in the .inf file is the [mfc42installer] section. In the sample .inf file, this section has the following format:
<PRE>[mfc42installer]
    file-win32-x86=http://activex.microsoft.com/controls/vc/mfc42.cab
    run=%EXTRACT_DIR%\mfc42.exe
</PRE>

<P>The file-win32-x86= tag specifies that the .cab file containing the MFC 4.2 DLLs is located at the specified site.

<P>The run= tag specifies that the .cab file contains a self-extracting executable named Mfc42.exe.


<!--************************************************************--><!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>

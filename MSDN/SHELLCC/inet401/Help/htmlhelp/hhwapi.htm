<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HTMLHelp API Reference</TITLE>

<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME=MS-HKWD CONTENT="HTMLHelp API Reference">
<META NAME="Keywords" CONTENT="HTMLHelp API">
<META NAME="Platform" CONTENT="Windows">
<META NAME="ROBOTS" CONTENT="all">

<!--@ SNIFF_START -->
<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../code/ver.js"></SCRIPT>
<!--@ SNIFF_END -->

<SCRIPT DEFER SRC="../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="hhwapi"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="HTMLHelp API Reference"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../art/headbard.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="HTMLHelp API Reference"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR>
<TR><TD><PRE><IMG SRC="../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="../itt/internet.htm">Topic Contents</A></PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H2>HTMLHelp API Reference</H2>

<P>The <B>HtmlHelp</B> API currently resides in the file HTMLHELP.DLL, however this is very likely to be moved to a different DLL before HTML Help ships. If you are not using <B>GetProcAddress</B> to get a pointer to the <B>HtmlHelp</B> function, then you must plan on changing the library you link to.
<P>The functionality provided by the <B>HtmlHelp</B> API resides in the file HHCTRL.OCX. Because this functionality requires loading various other DLLs such as ole32.dll, the API itself resides in a DLL that requires no additional DLLs to be loaded. Only when the API is actually called will ole32 and other DLLs be loaded.
<P>The <B>HtmlHelp</B> API is modeled after the <B>WinHelp</B> API function to make it easy to convert existing programs to use HTML Help instead of WinHelp to display their help. By the time HTML Help ships, there will also be an IHHWindow interface that can be used in place of the <B>HtmlHelp</B> API. This can be used by programs that already load OLE32.DLL or by programs like Visual Basic.
<P>In its simplest form, the <B>HtmlHelp</B> API creates a child window which in turn hosts SHDOCVW and displays the HTML file you specify. The window is a child of whatever parent window you specify, and will automatically stay on top of that parent window, and close when the parent window is closed. You can also take complete control of the window-creation process by defining the window styles, coordinates, caption, and display state. This means you can embed SHDOCVW even in a non-OLE activated program.

<P><B>SYNTAX</B>
<FONT FACE="Courier" SIZE="2">
<P><B>HWND</B> <B>HtmlHelp(HWND </B><I>hwndCaller</I><B>, LPCSTR</B> <I>pszFile</I><B>, UINT</B> <I>uCommand</I><B>,</B> <B>DWORD</B> <I>dwData</I><B>);</B>
</FONT>
<DL>
<DT><I>hwndCaller</I></DT>
 <DD>Specifies the handle of the window calling the <B>HtmlHelp</B> API. If the <B>HtmlHelp</B> API call results in messages being sent from the HTML Help window, they will be sent to this window handle.</DD>
<DT><I>pszFile</I></DT>
<DD>Specifies an HTML file, a URL, a compiled HTML file, or a window definition (preceeded with a ‘&gt;’ character). If the command being used does not require a file or URL, this value may be NULL.</DD>
<DT><I>uCommand</I></DT>
<DD>Specifies the action to perform. See the <B>Comments</B> section for details.</DD>
<DT><I>dwData</I></DT>
<DD>Specifies any data that may be required based on the value of the uCommand parameter.</DD>
</DL>
<P><B>Comments</B>
<P>The uCommand parameter determines what action to take, and what needs to be supplied for the pszFile and dwData parameters. The following table lists the commands, actions, and required parameters:
<BR>
<TABLE>
<TR><TD><B>Command</B></TD>
<TD><B>Description</B></TD>
<TD><B>pszFile</B></TD>
<TD><B>dwData</B></TD></TR>

<TR><TD>HH_DISPLAY_TOPIC</TD>
<TD>Displays an HTML file. If a window type is not specified, a default window type is used. If the window type or default window type is already being displayed, the HTML file will replace what is currently being displayed.</TD>
<TD>File, URL, or compiled HTML file. If the greater then character (<B>&gt;</B>) is used, it must be followed by the name of the window type to display the topic in.</TD>
<TD>May be zero or a pointer to a File, URL, or compiled HTML file. This parameter may be a pointer to a filename within a compiled HTML file if the pszFile parameter points to that compiled HTML file.</TD></TR>

<TR><TD>HH_DISPLAY_TEXT_POPUP</TD>
<TD>Displays text from a string resource, text string, or text file in a popup window.</TD>
<TD>Text filename if text resides in a file. Use NULL if the text is in a string resource id or specified in the HH_POPUP structure.</TD>
<TD>Points to a HH_POPUP structure.</TD>
</TR>

<TR><TD>HH_SET_WIN_TYPE</TD>
<TD>Creates a new window type, or modifies an existing window type.</TD>
<TD>Ignored.</TD>
<TD>Points to a HH_WINTYPE structure.</TD></TR>

<TR><TD>HH_GET_WIN_TYPE</TD>
<TD>Retrieves the HH_WINTYPE structure associated with a window type. If the window type has not been specified, the return value is -1. If the window type has been specified, the return value is the handle of the window (NULL if the window hasn’t been created).</TD>
<TD>Specifies the name of the window. The window name must begin with a ‘&gt;’ character, and may optionally be preceded by the name of the compiled HTML file.</TD>
<TD>Points to the address of a PHH_WINTYPE pointer. Do not modify the structure this pointer points to.</TD></TR>

<TR><TD>HH_GET_WIN_HANDLE</TD>
<TD>Retrieves the handle of the window associated with the specified window type. If the window type has not been created, the return value is NULL.</TD>
<TD>Ignored</TD>
<TD>Pointer to the name of the window type.</TD></TR>

<TR><TD>HH_SET_INFO_TYPES</TD>
<TD>Sets all the information types to be used in a window. In a tri-pane window, this will cause the navigation pane to redraw (if currently displayed) to reflect any changes in the Information Types being used.</TD>
<TD>Ignored.</TD>
<TD>Points to a HH_WINTYPE structure. The cbStruct and ainfoTypes members must be filled in.</TD></TR>

<TR><TD>HH_SET_INFO_TYPES</TD>
<TD>Sets all the hidden information types to be used in a window. This command will not affect any Information Types chosen by the user. In a tri-pane window, this will cause the navigation pane to redraw (if currently displayed) to reflect any changes in the Information Types being used.</TD>
<TD>Ignored.</TD>
<TD>Points to a HH_WINTYPE structure. The cbStruct and ainfoTypes members must be filled in.</TD>
</TR>

<TR><TD>HH_SYNC</TD>
<TD>Synchronizes the Table of Contents of a tri-pane window with the specified URL. This should only be used with windows thatwhich are not auto-syncnchronized.</TD>
<TD>Specifies the name of the window to sychronizesynchronize.</TD>
<TD>Specifies the URL to synchronize with. This URL does not need to be currently displayed...</TD></TR>

<TR><TD>HH_ADD_NAV_UI</TD>
<TD>Adds a navigational window to use in the navigational pane of a tri-pane window.</TD>
<TD>Address of an<B> HhWinCallBack</B> function to support the new UI.</TD>
<TD>Unique numeric value representing the UI. The UI may be switched to by specifying this value in the <B>curNavType</B> member of the <B>HH_WINTYPE</B> structure.</TD></TR>

<TR><TD>HH_ADD_BUTTON</TD>
<TD>Adds a button to the toolbar of a tri-pane window.</TD>
<TD>Address of an <B>HhWinCallBack</B> function to support the button.</TD>
<TD>Unique numeric value representing the button.</TD></TR>

<TR><TD>HH_KEYWORD_LOOKUP</TD>
<TD>Attempts to find the given keyword in a .HHK file. If found, the topic is displayed in the specified (or current, if not specified) window.</TD>
<TD>If NULL, the .HHK file associated with the current window is used. If a string containing a window definition is used, but not a .HHK file, then the .HHK from the specified window is used, and if the topic is found, it will be displayed in that window. If a .HHK file is specified, that file will be used.</TD>
<TD>Points to a string containing one or more keywords,keywords separated by a semi-colon.</TD></TR>
</TABLE>

<P><B>HH_WINTYPE structure</B>
<P>Window types may be defined by an author and stored in a compiled HTML file, or they may be defined by a program by using the <B>HtmlHelp</B> API. Each window type should have a unique name. If a call to the <B>HtmlHelp</B> API is made specifying a window type that does not exist, then a type will be created using the indicated type name, but with default properties. When creating, modifying, or retrieving a window type, the <B>HH_WINTYPE</B> structure is used. The following describes this structure:
<FONT FACE="Courier" SIZE=2>
<P>typedef struct tagHH_WINTYPE {
<P>int cbStruct; // IN: size of this structure including all Information Types
<P>BOOL fUniCodeStrings; // IN/OUT: TRUE if all strings are in UNICODE
<P>LPCTSTR pszType; // IN/OUT: Name of a type of window
<P>DWORD fsValidMembers; // IN: Bit flag of valid members (HHWIN_PARAM_)
<P>DWORD fsWinProperties; // IN/OUT: Properties/attributes of the window (HHWIN_)
<P>&nbsp;
<P>LPCTSTR pszCaption; // IN/OUT: Window title
<P>DWORD dwStyles; // IN/OUT: Window styles
<P>DWORD dwExStyles; // IN/OUT: Extended Window styles
<P>RECT rcWindowPos; // IN: Starting position, OUT: current position
<P>int nShowState; // IN: show state (e.g., SW_SHOW)
<P>&nbsp;
<P>HWND hwndHelp; // OUT: window handle
<P>HWND hwndCaller; // OUT: who called this window
<P>&nbsp;
<P>HH_INFOTYPE* paInfoTypes; // IN: Pointer to an array of Information Types
<P>&nbsp;
<P>// The following members are only valid if HHWIN_PROP_TRI_PANE is set
<P>&nbsp;
<P>HWND hwndToolBar; // OUT: toolbar window in tri-pane window
<P>HWND hwndNavigation; // OUT: navigation window in tri-pane window
<P>HWND hwndHTML; // OUT: window displaying HTML in tri-pane window
<P>int iNavWidth; // IN/OUT: width of navigation window
<P>RECT rcHTML; // OUT: HTML window coordinates
<P>&nbsp;
<P>LPCTSTR pszToc; // IN: Location of the table of contents file
<P>LPCTSTR pszIndex; // IN: Location of the index file
<P>LPCTSTR pszFile; // IN: Location of the html file
<P>LPCTSTR pszHome; // IN/OUT: html file to display when Home button is clicked
<P>DWORD fsToolBarFlags; // IN: flags controlingcontrolling the appearance of the toolbar
<P>BOOL fExpanded; // IN: TRUE/FALSE to expand or contract, OUT: current state
<P>int curNavType; // IN/OUT: UI to display in the navigational pane
<P>int tabpos; // IN/OUT: NAVTAB_TOP, NAVTAB_LEFT, or NAVTAB_BOTTOM
<P>int idNotify; // IN: ID to use for WM_NOTIFY messages
<P>BYTE tabOrder[HH_MAX_TABS + 1]; // IN/OUT: tab order: Contents, Index, Search, History, Favorites, Reserved 1-5, Custom tabs
<P>} HH_WINTYPE;
</FONT>

<TABLE>
<TR><TD><B>Member</B></TD>
<TD><B>Description</B></TD>
</TR>
<TR>
<TD><B>cbStruct</B></TD>
<TD>Specifies the size of the structure. This value must always be filled in before passing the structure to the <B>HtmlHelp</B> API.</TD>
</TR>
<TR>
<TD><B>fUniCodeStrings</B></TD>
<TD>Specifies whether the strings used in this structure are UNICODE or not.</TD>
</TR>
<TR>
<TD><B>pszType</B></TD>
<TD>Specifies a null-terminated string containing the name of the window type.</TD>
</TR>
<TR>
<TD><B>fsValidMembers</B></TD>
<TD>Specifies which members in the structure are valid. See the following Comments section for a description of this member.</TD>
</TR>
<TR>
<TD><B>fsWinProperties</B></TD>
<TD>Specifies the properties of the window. See the following Comments section for a description of this member.</TD>
</TR>
<TR>
<TD><B>pszCaption</B></TD>
<TD>Specifies a null-terminated string contain the caption to display in the title bar of the window.</TD>
</TR>
<TR>
<TD><B>dwStyles</B></TD>
<TD>Specifies the styles used to create the window. These styles may be ignored, combined with default styles, or used exclusively depending on the value of fsValidMembers and fsWinProperties.</TD>
</TR>
<TR>
<TD><B>dwExStyles</B></TD>
<TD>Specifies the extended styles used to create the window. These styles may be ignored, combined with default styles, or used exclusively depending on the value of fsValidMembers and fsWinProperties.</TD>
</TR>
<TR>
<TD><B>rcWindowPos</B></TD>
<TD>Specifies the coordinates of the window. When setting this value, any negative member will be ignored. For example, to change the position, but not the width and height, the left and top positions would be set and the right and bottom RECT members would be set to -1.</TD>
</TR>
<TR>
<TD><B>nShowState</B></TD>
<TD>Specifies the initial display state of the window.</TD>
</TR>
<TR>
<TD><B>hwndHelp</B></TD>
<TD>Specifies the handle of the window if the window has been created.</TD>
</TR>
<TR>
<TD><B>hwndCaller</B></TD>
<TD>Specifies the window to send messages to.</TD>
</TR>
<TR>
<TD><B>paInfoTypes</B></TD>
<TD>This specifies the Information Types to display. Each Information Type is a bit flag, with bit zero indicating whether or not all Information Types should be shown. If bit zero is not set, then all HTML Help commands that use Information Types will this information to determine what navigational UI should be displayed, and where hyperlinks should jump to.</TD>
</TR>
<TR>
<TD><B>hwndToolBar</B></TD>
<TD>Specifies the handle of the window containing the toolbar in a tri-pane window.</TD>
</TR>
<TR>
<TD><B>hwndNavigation</B></TD>
<TD>Specifies the handle of the window containing the current navigation UI in a tri-pane window.</TD>
</TR>
<TR>
<TD><B>hwndHTML</B></TD>
<TD>Specifies the handle of the window that displays HTML files in a tri-pane window. This window is a host for SHDOCVW.</TD>
</TR>
<TR>
<TD><B>iNavWidth</B></TD>
<TD>Specifies the width of the navigation pane in a tri-pane window when the tri-pane window is expanded.</TD>
</TR>
<TR>
<TD><B>rcHTML</B></TD>
<TD>Specifies the coordinates of the HTML pane in a tri-pane window. </TD>
</TR>
<TR>
<TD><B>pszToc</B></TD>
<TD>In a tri-pane window, this specifies the file or URL to use for the Table of Contents.</TD>
</TR>
<TR>
<TD><B>pszIndex</B></TD>
<TD>In a tri-pane window, this specifies the file or URL to use for the Index.</TD>
</TR>
<TR>
<TD><B>pszFile</B></TD>
<TD>In a tri-pane window, this specifies the file or URL to display in the right pane. This file will be displayed if the user clicks the Home button in the toolbar.</TD>
</TR>
<TR>
<TD><B>pszHome</B></TD>
<TD>In a tri-pane window, this specifies the file or URL to display in the right pane when the Home button is clicked.</TD>
</TR>
<TR>
<TD><B>fsToolBarFlags</B></TD>
<TD>In a tri-pane window, this determines which buttons will be displayed in the toolbar pane. See the section below describing HHWIN_BUTTON constants.</TD>
</TR>
<TR>
<TD><B>fExpanded</B></TD>
<TD>In a tri-pane window, this determines whether or not the navigational pane is to be shown.</TD>
</TR>
<TR>
<TD><B>curNavType</B></TD>
<TD>Specifies which navigational UI is displayed in the navigational pane of a tri-pane window.</TD>
</TR>
<TR>
<TD><B>tabpos</B></TD>
<TD>Specifies where the tabs are to be placed in the navigational pane of a tri-pane window. The tabs may be set on the top, left or bottom.</TD>
</TR>
<TR>
<TD><B>idNotify</B></TD>
<TD>Specifies the ID to use as the WPARAM member of WM_NOTIFY messages.</TD>
</TR>
<TR>
<TD><B>tabOrder</B></TD>
<TD>Specifies the order that tabs appear in the navigation pane of a Tri-pane window. Set the HHWIN_PARAM_TABORDER flag if you use this member. The first ten positions are reserved for default HTML Help tabs: Contents, Index, Search, History, Favorites, and Reserved 1-5 (for future expansion). Each byte represents the numeric position, starting with zero. For example, to put the Index tab first and the Contents tab second, you would specify tabOrder[HH_TAB_CONTENTS] = 1, and tabOrder[HH_TAB_INDEX] = 0.</TD>
</TR>
<TR>
<TD><B>cHistory</B></TD>
<TD>Specifies the number of history items to keep. This member is currently ignored, but will be used in the future.</TD>
</TR>
<TR>
<TD><B>pszJump1</B></TD>
<TD>Specifies the URL to jump to when the Jump1 button is clicked.</TD>
</TR>
<TR>
<TD><B>pszJump1</B></TD>
<TD>Specifies the URL to jump to when the Jump2 button is clicked.</TD>
</TR>
</TABLE>

<P>The <B>fsValidMembers</B> member is used when modifying an existing window type, and determines which of the other members should be updated. This parameter may be a combination of one or more of the following values:
<TABLE>
<TR>
<TD>HHWIN_PARAM_PROPERTIES</TD>
<TD>The <B>fsWinProperties</B> member is valid.</TD>
</TR>
<TR>
<TD>HHWIN_PARAM_STYLES</TD>
<TD>The <B>dwStyles</B> member is valid.</TD>
</TR>
<TR>
<TD>HHWIN_PARAM_EXSTYLES</TD>
<TD>The <B>dwExStyles</B> member is valid.</TD>
</TR>
<TR>
<TD>HHWIN_PARAM_RECT</TD>
<TD>The <B>rcWindowPos</B> member is valid.</TD>
</TR>
<TR>
<TD>HHWIN_PARAM_NAV_WIDTH</TD>
<TD>The <B>rcNavigation</B> member is valid.</TD>
</TR>
<TR>
<TD>HHWIN_PARAM_SHOWSTATE</TD>
<TD>The <B>nShowState</B> member is valid.</TD>
</TR>
<TR>
<TD>HHWIN_PARAM_INFOTYPES</TD>
<TD>The <B>ainfoTypes</B> member is valid.</TD>
</TR>
<TR>
<TD>HHWIN_PARAM_TB_FLAGS</TD>
<TD>The <B>fsToolBarFlags</B> member is valid.</TD>
</TR>
<TR>
<TD>HHWIN_PARAM_EXPANSION</TD>
<TD>The <B>fExpanded</B> member is valid.</TD>
</TR>
<TR>
<TD>HHWIN_PARAM_TABPOS</TD>
<TD>The <B>tabpos</B> member is valid</TD>
</TR>
<TR>
<TD>HHWIN_PARAM_TABORDER</TD>
<TD>The <B>tabOrder</B> member is valid.</TD>
</TR>
<TR>
<TD>HHWIN_PARAM_HISTORY_COUNT</TD>
<TD>The <B>cHistory</B> member is valid.</TD>
</TR>
</TABLE>

<P>The <B>fsWinProperties</B> member is used to define various properties for the window, and is also used to control how the window is created. This member may be a combination of one or more of the following values:
<TABLE>
<TR>
<TD>HHWIN_PROP_ONTOP</TD>
<TD>Specifies that the window is to be kept on top of every window on the desktop instead of just being on top of the caller’s window.</TD>
</TR>
<TR>
<TD>HHWIN_PROP_NOTITLEBAR</TD>
<TD>Specifies that the window should not contain a title bar.</TD>
</TR>
<TR>
<TD>HHWIN_PROP_NODEF_STYLES</TD>
<TD>Specifies that no default styles should be used when creating the window. If this flag is not specified, a window will be created with the following default styles:
<P>WS_THICKFRAME | WS_OVERLAPPED | WS_VISIBLE</TD>
</TR>
<TR>
<TD>HHWIN_PROP_NODEF_EXSTYLES</TD>
<TD>Specifies that no default extended styles should be used when creating the window. If this flag is used with the HHWIN_PROP_ONTOP flag, then the HHWIN_PROP_ONTOP flag will be ignored.</TD>
</TR>
<TR>
<TD>HHWIN_PROP_TRI_PANE</TD>
<TD>Specifies that a tri-pane window is to be created. Once a window has already been created, this flag cannot be used to change the existing window.</TD>
</TR>
<TR>
<TD>HHWIN_PROP_NOTB_TEXT</TD>
<TD>Specifies that the toolbar of a tri-pane window should not contain text underneath the buttons.</TD>
</TR>
<TR>
<TD>HHWIN_PROP_POST_QUIT</TD>
<TD>Specifies that when the help window is closed, a WM_QUIT message is posted to the calling programs message queue. This will normally cause the calling program to terminate.</TD>
</TR>
<TR>
<TD>HHWIN_PROP_AUTO_SYNC</TD>
<TD>Specifies that if the Contents or Index navigational pane is currently displayed, then if the user jumps to a different HTML file, the Contents or Index will scroll to the entry or keyword that points to the current URL. If the URL cannot be located in the current navigational pane, no action will be taken. </TD>
</TR>
<TR>
<TD>HHWIN_PROP_TRACKING </TD>
<TD>Specifies that tracking notification messages should be sent to the caller.</TD>
</TR>
<TR>
<TD>HHWIN_PROP_TAB_SEARCH</TD>
<TD>Specifies that a full-text search tab is to be included as one of the navigation panes in a tri-pane window.</TD>
</TR>
<TR>
<TD>HHWIN_PROP_TAB_HISTORY</TD>
<TD>Specified that a history tab is to be included as one of the navigation panes in a tri-pane window. This property is not supported in version 1.</TD>
</TR>
<TR>
<TD>HHWIN_PROP_TAB_FAVORITES</TD>
<TD>Specifies that a favorites tab is to be included as one of the navigation panes in a tri-pane windowsin a tri-pane window. This property is not supported in version 1.</TD>
</TR>
<TR>
<TD>HHWIN_PROP_CHANGE_TITLE</TD>
<TD>Specifies that the title bar of the HTML Help window should reflect the title of any HTML file displayed in the HTML pane.</TD>
</TR>
<TR>
<TD>HHWIN_PROP_TAB_ADVANCED</TD>
<TD>Specifies that an advanced search tab is to be included as one of the navigation panes of a tri-pane window.</TD>
</TR>
</TABLE>

<P>The <B>fsToolBarFlags</B> member is used to specify which buttons to display in the toolbar. This member may be a combination of one or more of the following values:
<TABLE>
<TR>
<TD>HHWIN_BUTTON_EXPAND</TD>
<TD>Expand/contract button (for the navigational pane)</TD>
</TR>
<TR>
<TD>HHWIN_BUTTON_BACK</TD>
<TD>Back button.</TD>
</TR>
<TR>
<TD>HHWIN_BUTTON_FORWARD</TD>
<TD>Forward button.</TD>
</TR>
<TR>
<TD>HHWIN_BUTTON_STOP</TD>
<TD>Stop button.</TD>
</TR>
<TR>
<TD>HHWIN_BUTTON_REFRESH</TD>
<TD>Refresh button.</TD>
</TR>
<TR>
<TD>HHWIN_BUTTON_HOME</TD>
<TD>Home button (to the HTML file defined for the window).</TD>
</TR>
<TR>
<TD>HHWIN_BUTTON_HISTORY</TD>
<TD>History button.</TD>
</TR>
<TR>
<TD>HHWIN_BUTTON_FAVORITES</TD>
<TD>Favorites button.</TD>
</TR>
<TR>
<TD>HHWIN_BUTTON_TOC</TD>
<TD>Table of Contents button.</TD>
</TR>
<TR>
<TD>HHWIN_BUTTON_INDEX</TD>
<TD>Index button.</TD>
</TR>
<TR>
<TD>HHWIN_BUTTON_SEARCH</TD>
<TD>Simple search button.</TD>
</TR>
<TR>
<TD>HHWIN_BUTTON_HISTORY</TD>
<TD>History button.</TD>
</TR>
<TR>
<TD>HHWIN_BUTTON_FAVORITES</TD>
<TD>Favorites button.</TD>
</TR>
<TR>
<TD>HHWIN_BUTTON_JUMP1</TD>
<TD>Jump1 button.</TD>
</TR>
<TR>
<TD>HHWIN_BUTTON_JUMP2</TD>
<TD>Jump2 button</TD>
</TR>
</TABLE>

<P>The <B>curNavType</B> membmermember is used to specify which navigational UI tab should be activated. This member may be one of the following values:
<TABLE>
<TR>
<TD>HHWIN_NAVTYPE_TOC</TD>
<TD>Displays the Contents tab.</TD>
</TR>
<TR>
<TD>HHWIN_NAVTYPE_INDEX</TD>
<TD>Displays the Index tab.</TD>
</TR>
</TABLE>

<P>The <B>tabpos</B> member is used to specify where the tabs are to be placed on the navigational pane of a tri-pane window. This member may be one of the following values:
<TABLE>
<TR>
<TD>HHWIN_NAVTAB_TOP</TD>
<TD>Places the tabs at the top.</TD>
</TR>
<TR>
<TD>HHWIN_NAVTAB_LEFT</TD>
<TD>Places the tabs at the left.</TD>
</TR>
<TR>
<TD>HHWIN_NAVTAB_BOTTOM</TD>
<TD>Places the tabs at the bottom.</TD>
</TR>
</TABLE>

<P><B>HH_POPUP structure</B><P>The HH_POPUP structure is used when displaying a text-only popup. Because of the speed in which they display, text-only popups should be used when no formatting is needed. The text to display may reside in a resource file, in a text string, or in a text file.
<FONT FACE="Courier" SIZE="2">
<P>typedef struct tagHH_POPUP
<P>{
<P>int cbStruct; // sizeof this structure
<P>HINSTANCE hinst; // instance handle for string resource
<P>UINT idString; // string resource id, or text id if pszFile is specified in HtmlHelp call
<P>LPCTSTR pszText; // used if idString is zero
<P>POINT pt; // top center of popup window
<P>COLORREF clrForeground; // use -1 for default
<P>COLORREF clrBackground; // use -1 for default
<P>RECT rcMargins; // amount of space between edges of window and text, -1 for each member to ignore
<P>LPCTSTR pszFont; // facename, point size, char set, BOLD ITALIC UNDERLINE
<P>} HH_POPUP;
</FONT>
<TABLE>
<TR>
<TD><B>Member</B></TD>
<TD><B>Description</B></TD>
</TR>
<TR>
<TD><B><P>cbStruct</B></TD>
<TD>Specifies the size of the structure. This value must always be filled in before passing the structure to the <B>HtmlHelp</B> API.</TD>
</TR>
<TR>
<TD><B><P>hinst</B></TD>
<TD>Instance handle of the program or dll to retrieve the string resource from. Ignored if idString is zero, or a filename was passed to the HtmlHelp API.</TD>
</TR>
<TR>
<TD><B><P>idString</B></TD>
<TD>Specifies either a resource id, or a thethe topic number in a text file.</TD>
</TR>
<TR>
<TD><B><P>pszText</B></TD>
<TD>Specifies the text to display if idString is zero.</TD>
</TR>
<TR>
<TD><B><P>pt</B></TD>
<TD>Specifies where the top center of the popup should be located.</TD>
</TR>
<TR>
<TD><B><P>clrForeground</B></TD>
<TD>Specifies the RGB value to use for the foreground color. If this value is -1, the system color for window text will be used.</TD>
</TR>
<TR>
<TD><B><P>clrBackground</B></TD>
<TD>Specifies the RGB value to use for the background color. If this value is -1, the system color for window background will be used.</TD>
</TR>
<TR>
<TD><B><P>rcMargins</B></TD>
<TD>Specifies the margins to use on the left, top, right, and bottom sides of the popup. A -1 for any of the rectangle members will use the default.</TD>
</TR>
<TR>
<TD><B><P>pszFont</B></TD>
<TD>Specifies an optional text string containing: facename[,point size[,charset[,color[, BOLD ITALIC UNDERLINE]]]]. This string specifies a font, its point size, its character set, its color, and various attributes. Options may be omitted by simply specifying the next comma. For example, to create a bold, 10-pt MS Sans Serif font, the parameter value would be: MS Sans Serif, 10, , , BOLD</TD>
</TR>
</TABLE>

<P><B>TRI-PANE Windows</B>
<P>A tri-pane window consists of three panes (child windows) consisting of a toolbar pane at the top, a navigation pane on the left, and an HTML pane that hosts SHDOCVW on the right. The navigation pane may be expanded or contracted by the user or programmatically. Expansion always enlarges the window by a fixed amount – that amount is 250 pixels by default, but may be set by the author or programmer as part of the window description.
<P>If more then one navigational UI is specified, then a tabbed control will be used to switch between the navigational UI. By default, the tabs for this control will run vertically – but a window may be defined to have the tabs on top or the bottom.
<P>An embedded window can take advantage of the toolbar pane without having a navigational pane by simply not including the Expand button. For example, the Help tab of the Index editor in HTML Help Workshop (displayed when editing a keyword) uses a tri-pane window without the navigation pane.
<B><P>Notification Messages</B><P>If the <B>idNotify</B> member of the HH_WINTYPE structure is non-zero, then WM_NOTIFY messages will be sent to the last caller of the HTML Help window.
<TABLE>
<TR>
<TD><B>Notification</B></TD>
<TD><B>lParam</B></TD>
<TD><B>Description</B></TD>
</TR>
<TR>
<TD>HHN_NAVCOMPLETE</TD>
<TD>HHNNAVCOMPLETE*</TD>
<TD>Sent when the user successfully navigates to a URL.</TD>
</TR>
<TR>
<TD>HHN_TRACK</TD>
<TD>HHNTRACK*</TD>
<TD>Sent if the window has tracking properties and the user uses a toolbar button or switches navigational tabs. The message is sent before the action is taken. If the action changes to a different URL, a HHN_NAVCOMPLETE notification will be sent after this notification.</TD>
</TR>
</TABLE>

<P><B>HHNNAVCOMPLETE structure</B>
<FONT FACE="Courier" SIZE="2">
<P>typedef struct tagHHNNAVCOMPLETE {
<P>NMHDR hdr;
<P>PCSTR pszUrl;
<P>} HHNNAVCOMPLETE;
</FONT>

<TABLE>
<TR>
<TD><B>Member</B></TD>
<TD><B>Description</B></TD>
</TR>
<TR>
<TD><B>hdr</B></TD>
<TD>Standard WM_NOTIFY header</TD>
</TR>
<TR>
<TD><B>pszUrl</B></TD>
<TD>Multi-byte, zero terminated string specifying the URL that has been navigated to.</TD>
</TR>
</TABLE>

<P><B>HHNTRACK structure</B>
<FONT FACE="Courier" SIZE="2">
<P>typedef struct tagHHNTRACK
<P>{
<P>&#9;NMHDR&#9;hdr;
<P>&#9;PCSTR&#9;pszCurUrl;&#9;// Multi-byte, null-terminated string
<P>&#9;int &#9;idAction;&#9;// HHACT_ value
<P>} HHNTRACK;
</FONT>
<P>
<TABLE>
<TR>
<TD><B>Member</B></TD>
<TD><B>Description</B></TD>
</TR>
<TR>
<TD><B>hdr</B></TD>
<TD>Standard WM_NOTIFY header</TD>
</TR>
<TR>
<TD><B>pszCurUrl</B></TD>
<TD>Multi-byte, zero terminated string specifying the current URL before the action is taken.</TD>
</TR>
<TR>
<TD><B>idAction</B></TD>
<TD>Specifies the action the user is about to take. This is one of the HHACT_ constants described below.</TD>
</TR>
</TABLE>

<P>The <B>idAction</B> parameter may be one of the following values:
<TABLE>
<TR>
<TD><B>Value</B></TD>
<TD><B>Description</B></TD>
</TR>
<TR>
<TD>HHACT_EXPAND</TD>
<TD>The user is about to expand the navigation pane.</TD>
</TR>
<TR>
<TD>HHACT_CONTRACT</TD>
<TD>The user is about to contract the navigation pane.</TD>
</TR>
<TR>
<TD>HHACT_BACK</TD>
<TD>The user clicked the Back button.</TD>
</TR>
<TR>
<TD>HHACT_FORWARD</TD>
<TD>The user clicked the Forward button.</TD>
</TR>
<TR>
<TD>HHACT_STOP</TD>
<TD>The user clicked the Stop button.</TD>
</TR>
<TR>
<TD>HHACT_REFRESH</TD>
<TD>The user clicked the Refresh button.</TD>
</TR>
<TR>
<TD>HHACT_HOME</TD>
<TD>The user clicked the Home button.</TD>
</TR>
<TR>
<TD>HHACT_SYNC</TD>
<TD>The user clicked the Sync button.</TD>
</TR>
<TR>
<TD>HHACT_OPTIONS</TD>
<TD>The user clicked the Options button.</TD>
</TR>
<TR>
<TD>HHACT_PRINT</TD>
<TD>The user clicked the Print button.</TD>
</TR>
<TR>
<TD>HHACT_TAB_CONTENTS</TD>
<TD>The user switched to the Contents tab.</TD>
</TR>
<TR>
<TD>HHACT_TAB_INDEX</TD>
<TD>The user switched to the Index tab.</TD>
</TR>
<TR>
<TD>HHACT_TAB_FIND</TD>
<TD>The user switched to the Find tab.</TD>
</TR>
<TR>
<TD>HHACT_TAB_HISTORY</TD>
<TD>The user switched to the History tab.</TD>
</TR>
<TR>
<TD>HHACT_TAB_FAVORITES</TD>
<TD>The user switched to the Favorites tab.</TD>
</TR>
</TABLE>

<P><B>Keyword Lookup</B>
<P>A caller may use the <B>HtmlHelp</B> API to lookup a keyword in a .HHK file, whether or not that file is the current keyword index or not. The .HHK file to be searched can exist on its own, or it can be in a compiled HTML file. The path to the file may be preceded with %SystemRoot% to make the path relative to the Windows directory. If the file is not found, it will be searched for in the following locations (and in the following order):
<UL>
<LI>The registry (<B>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\HTML Help\</B><I>base filename)</I>. The filename without the path is used as the key, and the value contains the path where the file is located. </LI>
<LI>The Windows\help folder. </LI>
<LI>The [FILES] section of HH.INI. The keyword is the filename without the path, and the value is aan optionally quoted path optionally followed by a message to prompt the user if the file still cannot be found. For example: myfile.hhk="d:\myapp" Please insert the MyDisk CD into your CDROM drive.</LI>
</UL>
<P>If the filename portion of the <B>HtmlHelp</B> API call contains both a filename and a window type, then the window type will be used to determine what window to display the result in. This window type will overrrideoverride any window type specified in the .HHK file. 
<P>If the window type is not specified, the current window will be used (if there is one) unless the .HHK file specifies a window type. If no window type is specified either in the filename or the .HHK file, a default window type called "Keyword Lookup" will be created and used.
<P>If the filename portion is not specified, but the window type is (for example, "&gt;MyWindow") then the .HHK file associated with that window type will be searched.
<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Handling Authentication</TITLE>

<META NAME=MS-HKWD CONTENT="Handling Authentication">
<META NAME="Keywords" CONTENT="Internet Tools & Technologies">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT, Mac">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="WinInet_Authentication"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Handling Authentication"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../../art/headbard.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Handling Authentication"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR>
<TR><TD><PRE><IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="introduction.htm#ch_winineto">Topic Contents</A></PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="url_functions.htm">Handling Uniform Resource Locators</A>
<IMG SRC="../../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="ftp.htm">FTP Sessions</A></PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>Handling Authentication</H1>

<P>Some proxies and servers require authentication before allowing access to resources on the Internet. The Win32 Internet functions support server and proxy authentication for HTTP sessions. Authentication of Gopher and FTP servers must be handled by <A HREF="../functions/InternetConnect.htm#InternetConnect">InternetConnect</A>. Currently, there is no support available for FTP gateway authentication.



<H2><A NAME="About_HTTP_Authentic">About HTTP Authentication</A></H2>

<P>If authentication is required, the client program receives a status code of 401 (if the server requires authentication) or 407 (if the proxy requires authentication). Along with the status code, the proxy or server sends one or more authenticate response headers&#151;Proxy-Authenticate (for proxy authentication) or WWW-Authenticate (for server authentication).

<P>Each authenticate response header contains an available authentication scheme and a realm. If multiple authentication schemes are supported, the server returns multiple authenticate response headers. The realm value is case sensitive and defines a protection space on the proxy or server. For example, the header "WWW-Authenticate: Basic Realm="example"" would be an example of a header returned when server authentication is needed.

<P>The client program that sent the request can authenticate itself by including an Authorization header field with the request. The Authorization header would contain the authentication scheme and the appropriate response required by that scheme. For example, the header "Authorization: Basic &lt;username:password&gt;" would be added to the request and resent to the server if the client received the authenticate response header "WWW-Authenticate: Basic Realm="example"".

<P>There are two general kinds of authentication schemes:

<UL>
<LI>Basic authentication scheme, where the user name and password are sent over in cleartext to the server.
<LI>Challenge-response schemes, which allows for a challenge-response format.
</UL>

<P>The Basic authentication scheme is based on the model that a client must authenticate itself with a user name and password for each realm. The server services the request if it is resent with an Authorization header that includes a valid user name and password.

<P>Challenge-response schemes allow for more secure authentication. If a request requires authentication using a challenge-response scheme, the appropriate status code and Authenticate headers are returned to the client. The client then needs to resend the request with a negotiate. The server would return an appropriate status code with a challenge, and the client would then need to resend the request with the proper response to get the requested service.

<P>The following table contains the authentication schemes that are used with the Win32 Internet functions, the authentication type, the DLLs that support them, and a description of the scheme.

<TABLE>
<TR><TD><B>Scheme
</B></TD>
<TD><B>Type
</B></TD>
<TD><B>DLL
</B></TD>
<TD><B>Description
</B></TD>
</TR>
<TR><TD>Basic (cleartext)</TD>
<TD>basic</TD>
<TD>Wininet.dll</TD>
<TD>Uses a base64 encoded string that contains the user name and password.</TD>
</TR>
<TR><TD>NT LAN Manager (NTLM)</TD>
<TD>challenge-response</TD>
<TD>Winsspi.dll</TD>
<TD>A challenge-response scheme that bases the challenge on the user name.</TD>
</TR>
<TR><TD>Microsoft Network (MSN)</TD>
<TD>challenge-response</TD>
<TD>Msnsspc.dll</TD>
<TD>The Microsoft Network's authentication scheme.</TD>
</TR>
<TR><TD>Distributed Password Authentication (DPA)</TD>
<TD>challenge-response</TD>
<TD>Msapsspc.dll</TD>
<TD>Similar to MSN authentication and will also be used by the Microsoft Network.</TD>
</TR>
<TR><TD>Remote Passphrase Authentication (RPA)</TD>
<TD>CompuServe</TD>
<TD>Rpawinet.dll, da.dll</TD>
<TD>CompuServe's authentication scheme. For more information, see http://www.compuserve.com/rpa/rpadoco.htm.
</TD>
</TR>
</TABLE>
<P>For anything other than Basic authentication, the registry keys must be set up in addition to installing the appropriate DLL(s). For more information on setting these registry keys, see <A HREF="authentication.htm#Authentication_Registry">Registering authentication keys</A>.

<P>If authentication is required, the INTERNET_FLAG_KEEP_CONNECTION flag should be used in the call to <A HREF="../functions/HttpOpenRequest.htm#HttpOpenRequest">HttpOpenRequest</A>. The INTERNET_FLAG_KEEP_CONNECTION flag is required for NTLM and other types of authentication in order to maintain the connection while completing the authentication process. If the connection is not maintained, the authentication process must be restarted with the proxy or server.

<P>The Win32 Internet functions <A HREF="../functions/InternetOpenUrl.htm#InternetOpenUrl">InternetOpenUrl</A> and <A HREF="../functions/HttpSendRequest.htm#HttpSendRequest">HttpSendRequest</A> complete successfully even when authentication is required. The difference is, the information returned in the header files and <A HREF="../functions/InternetReadFile.htm#InternetReadFile">InternetReadFile</A> would receive an HTML page informing the user of the status code.

<H3><A NAME="Authentication_Registry">Registering authentication keys</A></H3>
<P>INTERNET_OPEN_TYPE_PRECONFIG looks at the registry values ProxyEnable, ProxyServer, and ProxyOverride. These values are located under HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings.

<P>For authentication schemes other than Basic, a key needs to be added to the registry under HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Internet Explorer\Security. A string value, DLLFile, should contain the name of the DLL that supports the authentication scheme, and a DWORD value, Flags, should be set with the appropriate value. The following list shows the possible values for the Flags value.



<DL>
<DT><B><A NAME="PLUGIN_AUTH_FLAGS_UN">PLUGIN_AUTH_FLAGS_UNIQUE_CONTEXT_PER_TCPIP</A></B> (value=0x01) </DT><DD>Each TCP/IP socket will contain a different context. Otherwise, a new context will be passed for each realm or block URL template.
</DD><DT><B><A NAME="PLUGIN_AUTH_FLAGS_CA">PLUGIN_AUTH_FLAGS_CAN_HANDLE_UI</A></B> (value=0x02) </DT><DD>This DLL can handle its own user input.
</DD><DT><B><A NAME="PLUGIN_AUTH_FLAGS_CA">PLUGIN_AUTH_FLAGS_CAN_HANDLE_NO_PASSWD</A></B> (value=0x04) </DT><DD>This DLL might be capable of doing an authentication without prompting the user for a password. 
</DD><DT><B><A NAME="PLUGIN_AUTH_FLAGS_NO">PLUGIN_AUTH_FLAGS_NO_REALM</A></B> (value=0x08) </DT><DD>This DLL does not use a standard HTTP realm string. Any data that appears to be a realm will be scheme-specific information.
</DD><DT><B><A NAME="PLUGIN_AUTH_FLAGS_KE">PLUGIN_AUTH_FLAGS_KEEP_ALIVE_NOT_REQUIRED</A></B> (value=0x10) </DT><DD>This DLL does not require a persistent connection for its challenge-response sequence.
</DD></DL>
<P>For example, to add NTLM authentication, the key NTLM would need to be added to HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Internet Explorer\Security. Under HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Internet Explorer\Security\NTLM, the string value, DLLFile, and a DWORD value, Flags, would need to be added. DLLFile would need to be set to winsspi.dll, and Flags would need to be set to 0x08.

<H3><A NAME="Server_authenticatio">Server authentication</A></H3>
<P>When a server receives a request that requires authentication, the server returns a 401 status code message. In that message, the server should include one or more WWW-Authenticate response headers. These headers include the authentication methods the server has available. The Win32 Internet functions pick the first method they recognize.

<P>Basic authentication provides weak security unless the channel is first link-encrypted with SSL or PCT. 
<P>The <A HREF="../functions/InternetErrorDlg.htm#InternetErrorDlg">InternetErrorDlg</A> function can be used to obtain the user name and password information from the user, or a customized user interface can be designed to obtain the information. 



<P>A custom interface can use the <A HREF="../functions/InternetSetOption.htm#InternetSetOption">InternetSetOption</A> function to set the INTERNET_OPTION_PASSWORD and INTERNET_OPTION_USERNAME values and then resend the request to the server.

<H3><A NAME="Proxy_authentication">Proxy authentication</A></H3>
<P>When a client attempts to use a proxy that requires authentication, the proxy returns a 407 status code message to the client. In that message, the proxy should include one or more Proxy-Authenticate response headers. These headers include the authentication methods available from the proxy. The Win32 Internet functions pick the first method they recognize.

<P>The <A HREF="../functions/InternetErrorDlg.htm#InternetErrorDlg">InternetErrorDlg</A> function can be used to obtain the user name and password information from the user, or a customized user interface can be designed. 



<P>A custom interface can use the <A HREF="../functions/InternetSetOption.htm#InternetSetOption">InternetSetOption</A> function to set the INTERNET_OPTION_PROXY_PASSWORD and INTERNET_OPTION_PROXY_USERNAME values and then resend the request to the proxy.

<P>If no proxy user name and password are set, the Win32 Internet functions attempt to use the user name and password for the server. This behavior allows clients to implement the same customized user interface that is used to handle server authentication.

<H2><A NAME="Handling_HTTP_Authen">Handling HTTP Authentication</A></H2>
<P>HTTP authentication can be handled with either <A HREF="../functions/InternetErrorDlg.htm#InternetErrorDlg">InternetErrorDlg</A> or a customized function that uses <A HREF="../functions/InternetSetOption.htm#InternetSetOption">InternetSetOption</A> or adds its own authentication headers. <B>InternetErrorDlg</B> can examine the headers associated with an HINTERNET handle to find hidden errors, such as status codes from a proxy or server. <B>InternetSetOption</B> can be used to set the user name and password for the proxy and server. For MSN and DPA authentication, <B>InternetErrorDlg</B> must be used to set the user name and password.

<P>For any customized function that adds its own WWW-Authenticate or Proxy-Authenticate headers, the INTERNET_FLAG_NO_AUTH flag should be set to disable WinInet's authentication. 

<P>The following example shows how <A HREF="../functions/InternetErrorDlg.htm#InternetErrorDlg">InternetErrorDlg</A> can be used to handle HTTP authentication.

<PRE>HINTERNET hOpenHandle,  hConnectHandle, hResourceHandle;
DWORD dwError, dwErrorCode;

hOpenHandle = InternetOpen("Example", INTERNET_OPEN_TYPE_PRECONFIG, 
                           NULL, NULL, 0);

hConnectHandle = InternetConnect(hOpenHandle, "www.server.com", 
                                 INTERNET_INVALID_PORT_NUMBER, NULL,
                                 NULL, INTERNET_SERVICE_HTTP,0,0);

hResourceHandle = HttpOpenRequest(hConnectHandle, "GET", "/premium/default.htm",
                                  NULL, NULL, NULL, 
                                  INTERNET_FLAG_KEEP_CONNECTION, 0);

resend:

HttpSendRequest(hResourceHandle, NULL, 0, NULL, 0);

//  dwErrorCode stores the error code associated with the call to HttpSendRequest.  

dwErrorCode = hResourceHandle ? ERROR_SUCCESS : GetLastError();

dwError = InternetErrorDlg(hwnd, hResourceHandle, dwErrorCode, 
                           FLAGS_ERROR_UI_FILTER_FOR_ERRORS | 
                           FLAGS_ERROR_UI_FLAGS_CHANGE_OPTIONS |
                           FLAGS_ERROR_UI_FLAGS_GENERATE_DATA,
                           NULL);

if (dwError == ERROR_INTERNET_FORCE_RETRY)
    goto resend;

//  Insert code to read the information from the hResourceHandle at this point.
</PRE>
<P>In the example, dwErrorCode is used to store any errors associated with the call to <A HREF="../functions/HttpSendRequest.htm#HttpSendRequest">HttpSendRequest</A>. <B>HttpSendRequest</B> will complete successfully, even if the proxy or server requires authentication. When the FLAGS_ERROR_UI_FILTER_FOR_ERRORS flag is passed to <A HREF="../functions/InternetErrorDlg.htm#InternetErrorDlg">InternetErrorDlg</A>, the function checks the headers for any hidden errors. These hidden errors would include any requests for authentication. <B>InternetErrorDlg</B> displays the appropriate dialog box to prompt the user for the necessary information. The FLAGS_ERROR_UI_FLAGS_GENERATE_DATA and FLAGS_ERROR_UI_FLAGS_CHANGE_OPTIONS flags should also be passed to <B>InternetErrorDlg</B>, so that the function constructs the appropriate data structure for the error and stores the results of the dialog box in the HINTERNET handle.


<P>The following example shows how authentication could be handled using <A HREF="../functions/InternetSetOption.htm#InternetSetOption">InternetSetOption</A>. 

<PRE>HINTERNET hOpenHandle,  hResourceHandle;
DWORD dwError, dwStatus;
DWORD dwStatusSize = sizeof(dwStatus);
char strUsername[64], strPassword[64];

hOpenHandle = InternetOpen("Example", INTERNET_OPEN_TYPE_PRECONFIG, 
                           NULL, NULL, 0);
hConnectHandle = InternetConnect(hOpenHandle, "www.server.com", 
                                 INTERNET_INVALID_PORT_NUMBER, NULL,
                                 NULL, INTERNET_SERVICE_HTTP,0,0);

hResourceHandle = HttpOpenRequest(hConnectHandle, "GET", "/premium/default.htm",
                                  NULL, NULL, NULL, 
                                  INTERNET_FLAG_KEEP_CONNECTION, 0);

resend:

HttpSendRequest(hResourceHandle, NULL, 0, NULL, 0);

HttpQueryInfo(hResourceHandle, HTTP_QUERY_FLAG_NUMBER | 
              HTTP_QUERY_STATUS_CODE, &amp;dwStatus, &amp;dwStatusSize, NULL);

switch (dwStatus)
{
    case HTTP_STATUS_PROXY_AUTH_REQ:    //Proxy Authentication Required
        // Insert code to set strUsername and strPassword
        InternetSetOption(hResourceHandle, INTERNET_OPTION_PROXY_USERNAME, 
                          strUsername, strlen(strUsername)+1);
        InternetSetOption(hResourceHandle, INTERNET_OPTION_PROXY_PASSWORD, 
                          strPassword, strlen(strPassword)+1);
        break;
    case HTTP_STATUS_DENIED:     //Server Authentication Required
        // Insert code to set strUsername and strPassword
        InternetSetOption(hResourceHandle, INTERNET_OPTION_USERNAME, 
                          strUsername, strlen(strUsername)+1);
        InternetSetOption(hResourceHandle, INTERNET_OPTION_PASSWORD, 
                          strPassword, strlen(strPassword)+1);
        break;
}

//  Insert code to read the information from the hResourceHandle at this point.
</PRE>

<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
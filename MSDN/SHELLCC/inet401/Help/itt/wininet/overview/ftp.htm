<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FTP Sessions</TITLE>

<META NAME=MS-HKWD CONTENT="FTP Sessions">
<META NAME="Keywords" CONTENT="Internet Tools & Technologies">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT, Mac">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="FTP_Sessions"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="FTP Sessions"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../../art/headbard.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="FTP Sessions"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR>
<TR><TD><PRE><IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="introduction.htm#ch_winineto">Topic Contents</A></PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="authentication.htm">Handling Authentication</A>
<IMG SRC="../../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="gopher.htm">Gopher Sessions</A></PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>FTP Sessions</H1>

<P>The Win32 Internet functions can be used to provide applications with the ability to navigate and manipulate directories and files on an FTP server. Applications that use a CERN proxy exclusively must use the <A HREF="../functions/InternetOpenUrl.htm#InternetOpenUrl">InternetOpenUrl</A> function because CERN proxies do not support FTP. For more information on how to use <B>InternetOpenUrl</B>, see <A HREF="url_functions.htm#Direct_Access">Accessing URLs directly</A>.

<P>To begin an FTP session, use <A HREF="../functions/InternetConnect.htm#InternetConnect">InternetConnect</A> to create the valid FTP session handle to be used by the FTP functions provided with the Win32 Internet functions.

<P>The Win32 Internet functions provide the capability to navigate between directories; enumerate, create, remove, and rename directories; and rename, upload, download, and delete files on an FTP server. 

<P>Navigation is provided by the <A HREF="../functions/FtpGetCurrentDirectory.htm#FtpGetCurrentDirecto">FtpGetCurrentDirectory</A> and <A HREF="../functions/FtpSetCurrentDirectory.htm#FtpSetCurrentDirecto">FtpSetCurrentDirectory</A> functions. These functions utilize the FTP session handle created by a previous call to <A HREF="../functions/InternetConnect.htm#InternetConnect">InternetConnect</A> to determine which directory the application is currently in or to change to a different subdirectory.

<P>Directory enumeration is performed by using the <A HREF="../functions/FtpFindFirstFile.htm#FtpFindFirstFile">FtpFindFirstFile</A> and <A HREF="../functions/InternetFindNextFile.htm#InternetFindNextFile">InternetFindNextFile</A> functions. <B>FtpFindFirstFile</B> uses the FTP session handle created by <A HREF="../functions/InternetConnect.htm#InternetConnect">InternetConnect</A> to find the first file that matches the given search criteria and returns a handle to continue the directory enumeration. <B>InternetFindNextFile</B> uses the handle returned by <B>FtpFindFirstFile</B> to return the next file that matches the original search criteria. The application should continue to call <B>InternetFindNextFile</B> until there are no more files left in the directory.

<P>New directories are created by using the <A HREF="../functions/FtpCreateDirectory.htm#FtpCreateDirectory">FtpCreateDirectory</A> function. This function uses the FTP session handle created by <A HREF="../functions/InternetConnect.htm#InternetConnect">InternetConnect</A> and creates the directory specified by the string passed to the function. The string can contain a directory name relative to the current directory, or a fully qualified directory path.

<P>To rename either files or directories, the application can call <A HREF="../functions/FtpRenameFile.htm#FtpRenameFile">FtpRenameFile</A>. This function replaces the original name with the new name passed to the function. The name of the file or directory can be relative to the current directory, or a fully qualified name.

<P>To upload or place files on an FTP server, the application can use either <A HREF="../functions/FtpPutFile.htm#FtpPutFile">FtpPutFile</A> or <A HREF="../functions/FtpOpenFile.htm#FtpOpenFile">FtpOpenFile</A> (along with <A HREF="../functions/InternetWriteFile.htm#InternetWriteFile">InternetWriteFile</A>). <B>FtpPutFile</B> can be used if the file already exists locally, while <B>FtpOpenFile</B> and <B>InternetWriteFile</B> can be used if data needs to be written to a file on the FTP server.

<P>To download or get files, the application can use either <A HREF="../functions/FtpGetFile.htm#FtpGetFile">FtpGetFile</A> or <A HREF="../functions/FtpOpenFile.htm#FtpOpenFile">FtpOpenFile</A> (with <A HREF="../functions/InternetReadFile.htm#InternetReadFile">InternetReadFile</A>). <B>FtpGetFile</B> is used to retrieve a file from an FTP server and store it locally, while <B>FtpOpenFile</B> and <B>InternetReadFile</B> can be used to control where the downloaded information is going (for example, it could be used to display the information in an edit box).

<P>Deleting files on an FTP server is done by using the <A HREF="../functions/FtpDeleteFile.htm#FtpDeleteFile">FtpDeleteFile</A> function. This function removes a file name that is either relative to the current directory or a fully qualified file name from the FTP server. <B>FtpDeleteFile</B> requires an FTP session handle returned by <A HREF="../functions/InternetConnect.htm#InternetConnect">InternetConnect</A>.


<H2><A NAME="FTP_Function_Handles">FTP Function Handles</A></H2>
<P>The FTP functions require certain types of HINTERNET handles to work properly. These handles must be created in a set order, starting with the root handle created by <A HREF="../functions/InternetOpen.htm#InternetOpen">InternetOpen</A>. <A HREF="../functions/InternetConnect.htm#InternetConnect">InternetConnect</A> can then create an FTP session handle. 

<P>The following diagram shows the FTP functions that are dependent on the FTP session handle returned by <A HREF="../functions/InternetConnect.htm#InternetConnect">InternetConnect</A>. The shaded boxes represent functions that return HINTERNET handles, while the plain boxes represent functions that use the HINTERNET handle created by the function on which they depend.

<P>
<P><IMG SRC="../../../art/AX_WNT06.gif" WIDTH="174" HEIGHT="281" ALT="FTP functions dependent on FTP session handle returned by InternetConnect" >
<P>

<P>The following diagram shows the two FTP functions that return HINTERNET handles and the functions that are dependent on the HINTERNET handles created by them. The shaded boxes represent functions that return HINTERNET handles, while the plain boxes represent functions that use the HINTERNET handle created by the function on which they depend.

<P>
<P><IMG SRC="../../../art/AX_WNT03.gif" WIDTH="365" HEIGHT="183" ALT="FTP functions that return HINTERNET handles" > 
<P>
<P>For more information about HINTERNET handles and the handle hierarchy, see <A HREF="appendix_a.htm#HINTERNET">Appendix A: HINTERNET Handles</A>.




<H2><A NAME="Using_the_Win32_Inte">Using the Win32 Internet Functions for FTP Sessions</A></H2>
<P>The following Win32 Internet functions are used during FTP sessions. These functions are not recognized by CERN proxies. Applications that must function through CERN proxies should use <A HREF="../functions/InternetOpenUrl.htm#InternetOpenUrl">InternetOpenUrl</A> and access the resources directly. For more information on direct resource access, see <A HREF="url_functions.htm#Direct_Access">Accessing URLs directly</A>.

<TABLE>
<TR><TD><B>Function
 </B></TD><TD><B>Description
</B></TD></TR>
<TR><TD><A HREF="../functions/FtpCreateDirectory.htm#FtpCreateDirectory">FtpCreateDirectory</A> </TD><TD>Creates a new directory on the server. This function requires a handle created by <A HREF="../functions/InternetConnect.htm#InternetConnect">InternetConnect</A>.</TD></TR>
<TR><TD><A HREF="../functions/FtpDeleteFile.htm#FtpDeleteFile">FtpDeleteFile</A> </TD><TD>Deletes a file from the server. This function requires a handle created by <A HREF="../functions/InternetConnect.htm#InternetConnect">InternetConnect</A>.</TD></TR>
<TR><TD><A HREF="../functions/FtpFindFirstFile.htm#FtpFindFirstFile">FtpFindFirstFile</A> </TD><TD>Starts file enumeration or file search in the current directory. This function requires a handle created by <A HREF="../functions/InternetConnect.htm#InternetConnect">InternetConnect</A>.</TD></TR>
<TR><TD><A HREF="../functions/FtpGetCurrentDirectory.htm#FtpGetCurrentDirecto">FtpGetCurrentDirectory</A> </TD><TD>Returns the client's current directory on the server. This function requires a handle created by <A HREF="../functions/InternetConnect.htm#InternetConnect">InternetConnect</A>.</TD></TR>
<TR><TD><A HREF="../functions/FtpGetFile.htm#FtpGetFile">FtpGetFile</A> </TD><TD>Retrieves a file from the server. This function requires a handle created by <A HREF="../functions/InternetConnect.htm#InternetConnect">InternetConnect</A>.
</TD></TR>
<TR><TD><A HREF="../functions/FtpOpenFile.htm#FtpOpenFile">FtpOpenFile</A> </TD><TD>Initiates access to a file on the server for either reading or writing. This function requires a handle created by <A HREF="../functions/InternetConnect.htm#InternetConnect">InternetConnect</A>.</TD></TR>
<TR><TD><A HREF="../functions/FtpPutFile.htm#FtpPutFile">FtpPutFile</A> </TD><TD>Writes a file to the server. This function requires a handle created by <A HREF="../functions/InternetConnect.htm#InternetConnect">InternetConnect</A>.</TD></TR>
<TR><TD><A HREF="../functions/FtpRemoveDirectory.htm#FtpRemoveDirectory">FtpRemoveDirectory</A> </TD><TD>Deletes a directory on the server. This function requires a handle created by <A HREF="../functions/InternetConnect.htm#InternetConnect">InternetConnect</A>.</TD></TR>
<TR><TD><A HREF="../functions/FtpRenameFile.htm#FtpRenameFile">FtpRenameFile</A> </TD><TD>Renames a file on the server. This function requires a handle created by <A HREF="../functions/InternetConnect.htm#InternetConnect">InternetConnect</A>.</TD></TR>
<TR><TD><A HREF="../functions/FtpSetCurrentDirectory.htm#FtpSetCurrentDirecto">FtpSetCurrentDirectory</A> </TD><TD>Changes the client's current directory on the server. This function requires a handle created by <A HREF="../functions/InternetConnect.htm#InternetConnect">InternetConnect</A>.</TD></TR>
<TR><TD><A HREF="../functions/InternetWriteFile.htm#InternetWriteFile">InternetWriteFile</A> </TD><TD>Writes data to an open file on the server. This function requires a handle created by <A HREF="../functions/FtpOpenFile.htm#FtpOpenFile">FtpOpenFile</A>.</TD></TR></TABLE>
<H3><A NAME="Starting_an_FTP_sess">Starting an FTP session</A></H3>
<P>The application establishes an FTP session by calling <A HREF="../functions/InternetConnect.htm#InternetConnect">InternetConnect</A> on a handle created by <A HREF="../functions/InternetOpen.htm#InternetOpen">InternetOpen</A>. <B>InternetConnect</B> needs the server name, FTP port number, user name, password, and service type (which must be set to INTERNET_SERVICE_FTP). For passive FTP semantics, the application must also set the INTERNET_FLAG_PASSIVE flag.

<P>The INTERNET_DEFAULT_FTP_PORT and INTERNET_INVALID_PORT_NUMBER values can be used for the FTP port number. INTERNET_DEFAULT_FTP_PORT uses the default FTP port, but the service type still must be set. INTERNET_INVALID_PORT_NUMBER uses the default value for the indicated service type.

<P>The values for the user name and password can be set to NULL. If both values are set to NULL, <A HREF="../functions/InternetConnect.htm#InternetConnect">InternetConnect</A> uses "anonymous" for the user name, and the user's e-mail address for the password. If only the password is set to NULL, the user name passed to <B>InternetConnect</B> is used for the user name, and an empty string is used for the password. If both values are not NULL, the user name and password given to <B>InternetConnect</B> are used.



<H3><A NAME="Enumerating_director">Enumerating directories</A></H3>
<P>Enumeration of a directory on an FTP server requires the creation of a handle by <A HREF="../functions/FtpFindFirstFile.htm#FtpFindFirstFile">FtpFindFirstFile</A>. This handle is a branch of the FTP session handle created by <A HREF="../functions/InternetConnect.htm#InternetConnect">InternetConnect</A>. <B>FtpFindFirstFile</B> locates the first file or directory on the server and returns it in a
<object id="hhal_3" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_3.Click()>WIN32_FIND_DATA</A> structure. Use <A HREF="../functions/InternetFindNextFile.htm#InternetFindNextFile">InternetFindNextFile</A> until it returns ERROR_NO_MORE_FILES. This method finds all subsequent files and directories on the server. For more information on <B>InternetFindNextFile</B>, see <A HREF="common.htm#Next_File">Finding the next file</A>.

<P>To determine if the file retrieved by <A HREF="../functions/FtpFindFirstFile.htm#FtpFindFirstFile">FtpFindFirstFile</A> or <A HREF="../functions/InternetFindNextFile.htm#InternetFindNextFile">InternetFindNextFile</A> is a directory, check the <B>dwFileAttributes</B> member of the
<object id="hhal_4" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_4.Click()>WIN32_FIND_DATA</A> structure to see if it is equal to FILE_ATTRIBUTE_DIRECTORY.

<P>If the application makes changes on the FTP server or if the FTP server undergoes changes frequently, the INTERNET_FLAG_NO_CACHE_WRITE and INTERNET_FLAG_RELOAD flags should be set in <A HREF="../functions/FtpFindFirstFile.htm#FtpFindFirstFile">FtpFindFirstFile</A>. These flags ensure that the directory information being retrieved from the FTP server is current. 

<P>After the application completes the directory enumeration, a call to <A HREF="../functions/InternetCloseHandle.htm#InternetCloseHandle">InternetCloseHandle</A> must be made on the handle created by <A HREF="../functions/FtpFindFirstFile.htm#FtpFindFirstFile">FtpFindFirstFile</A>. Until that handle is closed, the application cannot call <B>FtpFindFirstFile</B> again on the session handle created by <A HREF="../functions/InternetConnect.htm#InternetConnect">InternetConnect</A>. If a call to <B>FtpFindFirstFile</B> is made on the same session handle before the previous call to the same function is closed, the function fails, returning ERROR_FTP_TRANSFER_IN_PROGRESS.

<P>The following example displays the contents of an FTP directory in the list box, IDC_FTPList. The HINTERNET handle, hSecondary, is a handle returned by the <A HREF="../functions/InternetConnect.htm#InternetConnect">InternetConnect</A> function after it establishes an FTP session.

<PRE>int WINAPI DisplayDir(HWND hX, DWORD dwFlags)
{
    WIN32_FIND_DATA pDirInfo;
    HINTERNET hDir;
    DWORD dError;
    char DirList[MAX_PATH];
    DWORD dwTemp=MAX_PATH;
    LPDWORD temp =&amp;dwTemp;
    LPVOID lpOption;
    DWORD dwSize;
    LPDWORD lpdwSize = &amp;dwSize;

SendDlgItemMessage(hX,IDC_FTPList,LB_RESETCONTENT,0,0);
    if ( !(hDir = FtpFindFirstFile (hSecondary, TEXT ("*.*"), &amp;pDirInfo,
        dwFlags, 0) ))
        if (GetLastError()  == ERROR_NO_MORE_FILES) 
        {
            MessageBox(hX,"There are no files here!!!","Display Dir",MB_OK);
            InternetCloseHandle(hDir);
            return 1;
        }
        else 
        {
            ErrorOut (hX, GetLastError (), "FindFirst error: ");
            InternetCloseHandle(hDir);
            return 0;
        }

        sprintf(DirList, pDirInfo.cFileName);
        if (pDirInfo.dwFileAttributes == FILE_ATTRIBUTE_DIRECTORY)
            strcat(DirList," &lt;DIR&gt; ");
    
        SendDlgItemMessage(hX,IDC_FTPList,LB_ADDSTRING,0,(LPARAM)DirList);

    dError = NO_ERROR;
    do
    {
         if (!InternetFindNextFile (hDir, &amp;pDirInfo))
         {
             dError = GetLastError();
             if ( dError == ERROR_NO_MORE_FILES ) 
             {
                 InternetCloseHandle(hDir);
                 return 1;
             }
             else
             {
                 ErrorOut (hX,GetLastError(), "InternetFindNextFile");
                 InternetCloseHandle(hDir);
                 return 0;
             }
         }
         else
         {
            sprintf(DirList, pDirInfo.cFileName);
            if (pDirInfo.dwFileAttributes == FILE_ATTRIBUTE_DIRECTORY)
                strcat(DirList," &lt;DIR&gt; ");    
            SendDlgItemMessage(hX,IDC_FTPList,LB_ADDSTRING,0,
                (LPARAM)DirList);
         }
    }
    while ( TRUE);

    if (!InternetCloseHandle(hDir) )
    {
        InternetCloseHandle(hDir);
        ErrorOut (hX,GetLastError(), "InternetCloseHandle error");
        return 0;
    }
    else
        return 1;

}
</PRE>
<H3><A NAME="Navigating_directori">Navigating directories</A></H3>
<P>The Win32 Internet functions <A HREF="../functions/FtpGetCurrentDirectory.htm#FtpGetCurrentDirecto">FtpGetCurrentDirectory</A> and <A HREF="../functions/FtpSetCurrentDirectory.htm#FtpSetCurrentDirecto">FtpSetCurrentDirectory</A> handle directory navigation.

<P><A HREF="../functions/FtpGetCurrentDirectory.htm#FtpGetCurrentDirecto">FtpGetCurrentDirectory</A> returns the application's current directory on the FTP server. The directory path from the root directory on the FTP server is included.

<P><A HREF="../functions/FtpSetCurrentDirectory.htm#FtpSetCurrentDirecto">FtpSetCurrentDirectory</A> changes the working directory on the server. The directory information passed to <B>FtpSetCurrentDirectory</B> can be either a partially or fully qualified path name relative to the current directory. For example, if the application is currently in the directory "public/info" and the path is "ftp/example", <B>FtpSetCurrentDirectory</B> changes the current directory to "public/info/ftp/example".

<P>The following example uses an FTP session handle, hSecondary, returned by <A HREF="../functions/InternetConnect.htm#InternetConnect">InternetConnect</A>. The new directory name is stored in the edit box, IDC_FTPEdit2. Before the actual change is made, the function gets the current directory and stores it in the same edit box. DisplayDir is another function that is designed to enumerate the directory.

<PRE>int WINAPI ChangeDir(HWND hX)
{
    DWORD testsz = 320;
    LPSTR lpszUrlBuffer;            // buffer to hold the URL
    LPSTR lpszDirList;

    lpszUrlBuffer = new char[testsz];
    GetDlgItemText(hX,IDC_FTPEdit2,(LPSTR)lpszUrlBuffer,testsz);
    lpszDirList = new char[testsz];
    if (!FtpGetCurrentDirectory(hSecondary,(LPSTR)lpszDirList,&amp;testsz))
    {
        ErrorOut(hX,GetLastError(),"Change Dir");
    }
    else
        SetDlgItemText(hX,IDC_FTPEdit2,(LPSTR)lpszDirList);

    delete(lpszDirList);

    if (!(FtpSetCurrentDirectory(hSecondary,lpszUrlBuffer)))
    {
        ErrorOut(hX,GetLastError(),"InternetConnect");
        delete(lpszUrlBuffer);
        SetDlgItemText(hX,IDC_FTPEdit2,(LPSTR)lpszUrlBuffer);
        DisplayDir(hX,INTERNET_FLAG_RELOAD);
        return 0;
    }
    else
    {
        delete(lpszUrlBuffer);
        return DisplayDir(hX,0);
    }
}
</PRE>
<H3><A NAME="Manipulating_directo">Manipulating directories on an FTP server</A></H3>
<P>The Win32 Internet functions provide the capability to create and remove directories on an FTP server to which the application has the necessary privileges. If the application must log on to a server with a specific user name and password, the values can be used in <A HREF="../functions/InternetConnect.htm#InternetConnect">InternetConnect</A> when creating the FTP session handle. 

<P>The <A HREF="../functions/FtpCreateDirectory.htm#FtpCreateDirectory">FtpCreateDirectory</A> function takes a valid FTP session handle and a NULL-terminated string that contains either a fully qualified path or a name relative to the current directory and creates a directory on the FTP server.

<P>The following example shows two separate calls to <A HREF="../functions/FtpCreateDirectory.htm#FtpCreateDirectory">FtpCreateDirectory</A>. In both examples, hFtpSession is the session handle created by the <A HREF="../functions/InternetConnect.htm#InternetConnect">InternetConnect</A> function, and the root directory is the current directory.

<PRE>FtpCreateDirectory(hFtpSession, "test");
/* this will create the directory "test" in the current directory 
    (which is the root directory) */

FtpCreateDirectory(hFtpSession, "\test\example");
/* this will create the directory "example" in the test directory */
</PRE>
<P>The <A HREF="../functions/FtpRemoveDirectory.htm#FtpRemoveDirectory">FtpRemoveDirectory</A> function takes a valid FTP session handle and a NULL-terminated string that contains either a fully qualified path or a name relative to the current directory and removes that directory from the FTP server.

<P>The following example shows two sample calls to <A HREF="../functions/FtpRemoveDirectory.htm#FtpRemoveDirectory">FtpRemoveDirectory</A>. In both calls, hFtpSession is the session handle created by the <A HREF="../functions/InternetConnect.htm#InternetConnect">InternetConnect</A> function, and the root directory is the current directory. There is a directory called "test" in the root directory and a directory called "example" in the "test" directory.

<PRE>FtpRemoveDirectory(hFtpSession,"\test\example");
/* removes the "example" directory and any files or directories contained in it 
    from the "test" directory */

FtpRemoveDirectory(hFtpSession, "test");
/* removes the "test" directory and any files or directories contained in it 
    from the root directory */
</PRE>
<P>The following example creates the directory indicated by the string stored in the edit box, IDC_FTPEdit2. The HINTERNET handle, hSecondary, was created by <A HREF="../functions/InternetConnect.htm#InternetConnect">InternetConnect</A> after establishing an FTP session. DisplayDir is another function that is designed to enumerate the directory.

<PRE>int WINAPI CreateDir(HWND hX)
{
    char strInFile[80];

    GetDlgItemText(hX,IDC_FTPEdit2,strInFile,80);

    if (strlen(strInFile)==0)
    {
        MessageBox(hX,"Directory Name Must Be Specified","Create Dir",MB_OK);
        return 0;
    }
    else
    {
        if(!FtpCreateDirectory(hSecondary,strInFile))
        {
            ErrorOut(hX,GetLastError(),"Create Dir");
            return 0;
        }
        else
        {
            return DisplayDir(hX,INTERNET_FLAG_RELOAD);
        }
    }
}
</PRE>
<P>The following example deletes the directory indicated by the edit box, IDC_FTPEdit2. The HINTERNET handle, hSecondary, was created by <A HREF="../functions/InternetConnect.htm#InternetConnect">InternetConnect</A> after establishing an FTP session. DisplayDir is another function that is designed to enumerate the directory.

<PRE>int WINAPI RemoveDir(HWND hX)
{
    char strInFile[80];

    GetDlgItemText(hX,IDC_FTPEdit2,strInFile,80);

    if (strlen(strInFile)==0)
    {
        MessageBox(hX,"Directory Name Must Be Specified!","Remove Dir",MB_OK);
        return 0;
    }
    else
    {
        if(!FtpRemoveDirectory(hSecondary,strInFile))
        {
            ErrorOut(hX,GetLastError(),"Remove Dir");
            return 0;
        }
        else
        {
            MessageBox(hX,"Directory Deleted", "Remove Dir", MB_OK);
            return DisplayDir(hX,INTERNET_FLAG_RELOAD);
        }
    }
}
</PRE>
<H3><A NAME="Getting_files_on_an_">Getting files on an FTP server</A></H3>
<P>The Win32 Internet functions offer three methods for retrieving files from an FTP server: 

<UL><LI>Using <A HREF="../functions/InternetOpenUrl.htm#InternetOpenUrl">InternetOpenUrl</A> and <A HREF="../functions/InternetReadFile.htm#InternetReadFile">InternetReadFile</A>.
<LI>Using <A HREF="../functions/FtpOpenFile.htm#FtpOpenFile">FtpOpenFile</A> and <A HREF="../functions/InternetReadFile.htm#InternetReadFile">InternetReadFile</A>.
<LI>Using <A HREF="../functions/FtpGetFile.htm#FtpGetFile">FtpGetFile</A>. 
</UL>
<P>For more information about using the <A HREF="../functions/InternetReadFile.htm#InternetReadFile">InternetReadFile</A> function, see <A HREF="common.htm#Read_File">Reading files</A>.

<P>If the URL of the file is available, the application can call <A HREF="../functions/InternetOpenUrl.htm#InternetOpenUrl">InternetOpenUrl</A> to connect to that URL and then use <A HREF="../functions/InternetReadFile.htm#InternetReadFile">InternetReadFile</A> to control the download of the file. This setup allows the application to control the download more tightly and is ideal for situations where no other operations need to be made on the FTP server. For more information on how to directly access resources, see <A HREF="url_functions.htm#Direct_Access">Accessing URLs directly</A>.

<P>If the application has established an FTP session handle to the server with <A HREF="../functions/InternetConnect.htm#InternetConnect">InternetConnect</A>, the application can call <A HREF="../functions/FtpOpenFile.htm#FtpOpenFile">FtpOpenFile</A> with the existing file name and with a new name for the locally stored file. The application can then use <A HREF="../functions/InternetReadFile.htm#InternetReadFile">InternetReadFile</A> to download the file. This allows the application to control the download more tightly and keep the connection to the FTP server, so more commands can be executed.

<P>If the application does not need to tightly control the download, the application can use <A HREF="../functions/FtpGetFile.htm#FtpGetFile">FtpGetFile</A> with the FTP session handle, remote file name, and local file name to retrieve the file. <B>FtpGetFile</B> performs all the bookkeeping and overhead associated with reading a file from an FTP server and storing it locally.

<P>The following example retrieves the file indicated by the IDC_FTPEdit2 edit box and stores it locally using the file name specified by the IDC_FTPEdit3 edit box. The HINTERNET handle, hSecondary, was created by <A HREF="../functions/InternetConnect.htm#InternetConnect">InternetConnect</A> after establishing an FTP session. DisplayDir is another function that is designed to enumerate the directory.

<PRE>int WINAPI GetFile(HWND hX)
{
    char strInFile[80];
    char strOutFile[80];
    int intTransType;

    GetDlgItemText(hX,IDC_FTPEdit3,strOutFile,80);
    GetDlgItemText(hX,IDC_FTPEdit2,strInFile,80);

    if ((strlen(strOutFile)==0) | (strlen(strInFile)==0))
    {
        MessageBox(hX,"Target File or Destination File Missing","Get File",
            MB_OK);
        return 0;
    }
    else
    {
        intTransType = MessageBox(hX,
            "Do you want to download in ASCII (Default:Binary)?",
            "Get File",MB_YESNO);
        if (intTransType==IDYES)
        {
            if(!FtpGetFile(hSecondary,strInFile,strOutFile,FALSE,
                FILE_ATTRIBUTE_NORMAL,FTP_TRANSFER_TYPE_ASCII | 
                INTERNET_FLAG_NO_CACHE_WRITE,0))
            {
                ErrorOut(hX,GetLastError(),"Get File");
                DisplayDir(hX,INTERNET_FLAG_RELOAD);
                return 0;
            }
            else
            {
                MessageBox(hX,"ASCII Transfer Complete","Get File",MB_OK);
                return 1;
            }
        }
        else
        {
            if(!FtpGetFile(hSecondary,strInFile,strOutFile,FALSE,
                FILE_ATTRIBUTE_NORMAL, FTP_TRANSFER_TYPE_BINARY |
                INTERNET_FLAG_RELOAD,0))
            {
                ErrorOut(hX,GetLastError(),"Get File");
                return 0;
            }
            else
            {
                MessageBox(hX,"Binary Transfer Complete","Get File",MB_OK);
                return 1;
            }
        }
    }
}
</PRE>
<H3><A NAME="Placing_files_on_an_">Placing files on an FTP server</A></H3>
<P>An application can use two methods to place a file on an FTP server using the Win32 Internet functions: 

<UL><LI>Use the <A HREF="../functions/FtpOpenFile.htm#FtpOpenFile">FtpOpenFile</A> function with the <A HREF="../functions/InternetWriteFile.htm#InternetWriteFile">InternetWriteFile</A> function.
<LI>Use <A HREF="../functions/FtpPutFile.htm#FtpPutFile">FtpPutFile</A>.
</UL>
<P>An application that must send data to an FTP server, but does not have a local file containing all the data, should use <A HREF="../functions/FtpOpenFile.htm#FtpOpenFile">FtpOpenFile</A> to create and open a file on the FTP server. The application then can use <A HREF="../functions/InternetWriteFile.htm#InternetWriteFile">InternetWriteFile</A> to upload the information to the file.

<P>If the file already exists locally, the application can use <A HREF="../functions/FtpPutFile.htm#FtpPutFile">FtpPutFile</A> to upload the file to the FTP server. <B>FtpPutFile</B> performs all the overhead that goes with uploading a local file to a remote FTP server.

<P>The following example places the file indicated by the IDC_FTPEdit2 edit box on the FTP server, using the file name specified by the IDC_FTPEdit3 edit box. The HINTERNET handle, hSecondary, was created by <A HREF="../functions/InternetConnect.htm#InternetConnect">InternetConnect</A> after establishing an FTP session.

<PRE>int WINAPI PutFile(HWND hX)
{
    char strInFile[80];
    char strOutFile[80];
    int intTransType;

    GetDlgItemText(hX,IDC_FTPEdit3,strOutFile,80);
    GetDlgItemText(hX,IDC_FTPEdit2,strInFile,80);

    if ((strlen(strOutFile)==0) | (strlen(strInFile)==0))
    {
        MessageBox(hX,"Target File or Destination File Missing","Put File", MB_OK);
        return 0;
    }
    else
    {
        intTransType = MessageBox(hX,
            "Do you want to upload in ASCII (Default:Binary)?",
            "Put File",MB_YESNO);

        if (intTransType==IDYES)
        {
            if(!FtpPutFile(hSecondary,strInFile,strOutFile,
                FTP_TRANSFER_TYPE_ASCII,0))
            {
                ErrorOut(hX,GetLastError(),"Get File");
                return 0;
            }
            else
            {
                MessageBox(hX,"ASCII Transfer Complete","Put File",MB_OK);
                return 1;
            }
        }
        else
        {
            if(!FtpPutFile(hSecondary,strInFile,strOutFile,
                FTP_TRANSFER_TYPE_BINARY,0))
            {
                ErrorOut(hX,GetLastError(),"Get File");
                return 0;
            }
            else
            {
                MessageBox(hX,"Binary Transfer Complete","Get File",MB_OK);
                DisplayDir(hX,INTERNET_FLAG_RELOAD);
                return 1;
            }
        }
    }
}
</PRE>
<H3><A NAME="Deleting_files_from_">Deleting files from an FTP server</A></H3>
<P>To delete a file from an FTP server, an application can use the <A HREF="../functions/FtpDeleteFile.htm#FtpDeleteFile">FtpDeleteFile</A> function. The calling application must have the necessary privileges specified to delete a file from the FTP server when <A HREF="../functions/InternetConnect.htm#InternetConnect">InternetConnect</A> creates the FTP session handle.

<P>The following example deletes the file indicated by the IDC_FTPEdit2 edit box. The HINTERNET handle, hSecondary, was created by <A HREF="../functions/InternetConnect.htm#InternetConnect">InternetConnect</A> after establishing an FTP session. DisplayDir is another function that is designed to enumerate the directory.

<PRE>int WINAPI DeleteFile(HWND hX)
{
    char strInFile[80];

    GetDlgItemText(hX,IDC_FTPEdit2,strInFile,80);

    if (strlen(strInFile)==0)
    {
        MessageBox(hX,"File Name Must Be Specified!","Remove Dir",MB_OK);
        return 0;
    }
    else
    {
        if(!FtpDeleteFile(hSecondary,strInFile))
        {
            ErrorOut(hX,GetLastError(),"Remove Dir");
            return 0;
        }
        else
        {
            MessageBox(hX,"File Deleted", "Remove Dir", MB_OK);
            return DisplayDir(hX,INTERNET_FLAG_RELOAD);
        }
    }
}
</PRE>
<H3><A NAME="Renaming_files_and_d">Renaming files and directories on an FTP server</A></H3>
<P>Renaming files and directories on an FTP server can be performed by using the <A HREF="../functions/FtpRenameFile.htm#FtpRenameFile">FtpRenameFile</A> function. <B>FtpRenameFile</B> accepts two NULL-terminated strings that contain either partially or fully qualified names relative to the current directory and then renames the file designated by the first string to the name in the second string.

<P>The following example renames the file or directory indicated by the IDC_FTPEdit2 edit box. The HINTERNET handle, hSecondary, was created by <A HREF="../functions/InternetConnect.htm#InternetConnect">InternetConnect</A> after establishing an FTP session. DisplayDir is another function that is designed to enumerate the directory.

<PRE>int WINAPI RenameFile(HWND hX)
{
    char strInFile[80];
    char strOutFile[80];

    GetDlgItemText(hX,IDC_FTPEdit3,strOutFile,80);
    GetDlgItemText(hX,IDC_FTPEdit2,strInFile,80);

    if ((strlen(strOutFile)==0) | (strlen(strInFile)==0))
    {
        MessageBox(hX,"Target File or Destination File Missing","Put File",MB_OK);
        return 0;
    }
    else
    {
        if(!FtpRenameFile(hSecondary,strInFile,strOutFile))
        {
            ErrorOut(hX,GetLastError(),"Get File");
            DisplayDir(hX,INTERNET_FLAG_RELOAD);
            return 0;
        }
        else
        {
            return DisplayDir(hX,INTERNET_FLAG_RELOAD);
        }
    }
}
</PRE>
<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
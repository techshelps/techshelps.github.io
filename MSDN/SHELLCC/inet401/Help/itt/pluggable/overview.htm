<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Pluggable Protocols Overview</TITLE>

<META NAME=MS-HKWD CONTENT="Pluggable Protocols Overview">
<META NAME="Keywords" CONTENT="Internet Tools & Technologies">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT, Mac">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="ch_pluggable_ovr"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Pluggable Protocols Overview"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../art/headbard.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Pluggable Protocols Overview"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR>
<TR><TD><PRE><IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="pluggable.htm#book_pluggable">Topic Contents</A></PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="pluggable.htm">Pluggable Protocols</A>
<IMG SRC="../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="appendix_a.htm">Appendix A: Registering an Application to a URL Protocol</A></PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>Pluggable Protocols Overview</H1>

<P>Pluggable protocols provide capability create custom URL protocols. This section covers the pluggable protocol functionality exported by the Urlmon.dll dynamic-link library (DLL).

<P><A CLASS=tctop HREF="overview.htm#Introduction"><IMG SRC="../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Introduction</A><BR>
<P><A CLASS=tctop HREF="overview.htm#About_URLs_and_Name_"><IMG SRC="../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">About URLs and Name Spaces</A><BR>
<P><A CLASS=tctop HREF="overview.htm#About_Pluggable_Prot"><IMG SRC="../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">About Pluggable Protocols</A><BR>
<P><A CLASS=tctop HREF="overview.htm#Creating_an_Asynchro"><IMG SRC="../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Creating an Asynchronous Pluggable Protocol Handler</A><BR>
<P><A CLASS=tctop HREF="appendix_a.htm#Register_Protocol"><IMG SRC="../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Appendix A: Registering an Application to a URL Protocol</A><BR>
<P><A CLASS=tctop HREF="appendix_b.htm#pluggable_b"><IMG SRC="../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Appendix B: Debugging Tips</A><BR>
<H2><A NAME="Introduction">Introduction</A></H2>
<P>If you want to compile programs that use the functionality provided in Urlmon.dll, you must make sure the Urlmon.h header file is in the include directory, and the Urlmon.lib library file is in the library directory, of the C/C++ compiler you use.

<P>This documentation assumes that you have an understanding of Microsoft&#174; Win32&#174; programming. Also, for asynchronous monikers, asynchronous pluggable protocols, and URL monikers you should have an understanding of OLE and COM programming. For the Internet-related interfaces, methods, and functions, an understanding of the format and syntax of URLs is also required. For more information, see RFC 1738, <I>Uniform Resource Locators (URL)</I>. You can find this document at <A HREF="http://ds.internic.net/rfc/rfc1738.txt" TARGET="_top">http://ds.internic.net/rfc/rfc1738.txt</A>.<IMG SRC="../../art/external.gif" WIDTH="19" HEIGHT="8" ALT="External Link" >




<H2><A NAME="About_URLs_and_Name_">About URLs and Name Spaces</A></H2>
<P>A Uniform Resource Locator (URL) follows the syntax described in RFC 1738, which specifies a protocol scheme followed by a scheme-specific portion (&lt;scheme&gt;:&lt;scheme-specific portion&gt;). For example, in the URL http://www.microsoft.com/, "http" is the scheme and "//www.microsoft.com/" is the scheme-specific portion.

<P>The beginning portion of the scheme-specific portion of the URL contains the server name. This portion of the URL is often referred to as the URL name space.




<H2><A NAME="About_Pluggable_Prot">About Pluggable Protocols</A></H2>
<P>Microsoft Internet Explorer uses two mechanisms for registering new URL protocol handlers. The first method is to register a URL protocol and its associated application so that all attempts to navigate to a URL using that protocol launch the application (for example, registering applications to handle mailto: or news: URLs). The second method uses the Asynchronous Pluggable Protocols API, which allows you to define new protocols by mapping the protocol scheme to a class.

<P>For information on how to register an application for a particular URL protocol, see <A HREF="appendix_a.htm#Register_Protocol">Appendix B: Registering an Application to a URL Protocol</A>.

<P>Asynchronous pluggable protocols offer three ways to map a protocol scheme to a class:
<UL><LI>Permanently registering an asynchronous pluggable protocol handler in the registry. The handler is used for any URLs with the specified scheme (such as http, ftp, and so on).
<LI>Permanently or temporarily registering a pluggable name space handler. The handler is used for any URLs with the specified pattern in the scheme-specific portion of the URL for a particular protocol scheme.
<LI>Permanently or temporarily registering a MIME filter. The handler manipulates the data stream it receives and returns a data stream for any resources of the specified MIME type.
</UL>
<P><B>Note</B>  All asynchronous pluggable protocols must support the <A HREF="../monikers/enums/BINDF.htm#BINDF_NO_UI">BINDF_NO_UI</A> and <A HREF="../monikers/enums/BINDF.htm#BINDF_SILENTOPERATIO">BINDF_SILENTOPERATION</A> flags.
<P><B>Interfaces related to asynchronous pluggable protocols</B>
<UL><LI><B>IBindProtocol</B>
<LI><A HREF="ifaces/iinternet/IInternet.htm#IInternet">IInternet</A>
<LI><A HREF="ifaces/iinternetbindinfo/IInternetBindInfo.htm#IInternetBindInfo">IInternetBindInfo</A>



<LI><A HREF="ifaces/iinternetprotocol/IInternetProtocol.htm#IInternetProtocol">IInternetProtocol</A>
<LI><A HREF="ifaces/iinternetprotocolinfo/IInternetProtocolInfo.htm#IInternetProtocolInf">IInternetProtocolInfo</A>
<LI><A HREF="ifaces/iinternetprotocolroot/IInternetProtocolRoot.htm#IInternetProtocolRoo">IInternetProtocolRoot</A>
<LI><A HREF="ifaces/iinternetprotocolsink/IInternetProtocolSink.htm#IInternetProtocolSin">IInternetProtocolSink</A>
<LI><A HREF="ifaces/iinternetsession/IInternetSession.htm#IInternetSession">IInternetSession</A>
</UL>
<P><B>Functions related to asynchronous pluggable protocols</B>
<UL><LI><A HREF="functions/CoInternetGetSession.htm#CoInternetGetSession">CoInternetGetSession</A>
</UL>
<H3><A NAME="About_Asynchronous_P">About Asynchronous Pluggable Protocols</A></H3>
<P>An asynchronous pluggable protocol handler is an apartment-threaded Component Object Model (COM) object that handles any calls made to the protocol scheme that it is registered for. When a client application makes a request, Urlmon looks up the protocol scheme in the registry and creates an instance of the protocol handler registered for that protocol scheme. If the protocol scheme was successfully mapped to the class identifier (CLSID) of a protocol handler,
<object id="hhal_3" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_3.Click()>CoCreateInstance</A> is called with that class asking for an
<object id="hhal_4" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_4.Click()>IClassFactory</A> interface. An instance of the protocol handler is obtained with
<object id="hhal_5" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_5.Click()>IClassFactory::CreateInstance</A>.

<P>To register a custom URL protocol, add a key for the protocol scheme of the custom URL protocol to the registry under HKEY_CLASSES_ROOT\PROTOCOLS\Handler\protocol_scheme. Under that key, the string value, CLSID, must be set to the CLSID of the protocol handler.





<P>To register the custom protocol scheme <B>example</B>, you would have to add a key named <B>example</B> to the registry under HKEY_CLASSES_ROOT\PROTOCOLS\Handler. Under the new key, HKEY_CLASSES_ROOT\PROTOCOLS\Handler\example, the string value, CLSID, must be assigned the CLSID of the protocol handler. Any URLs with the protocol scheme <B>example:</B> would be handled by the protocol handler associated with the CLSID value.

<P>The protocol handler cannot use any Windows&#174; messaging to switch back to the thread it was instantiated on, since the protocol handler must work on non-GUI threads.

<P><B>Note</B>  All asynchronous pluggable protocols must support the <A HREF="../monikers/enums/BINDF.htm#BINDF_NO_UI">BINDF_NO_UI</A> and <A HREF="../monikers/enums/BINDF.htm#BINDF_SILENTOPERATIO">BINDF_SILENTOPERATION</A> flags.
<H3><A NAME="About_Pluggable_Name">About Pluggable Name Space Handlers</A></H3>
<P>A pluggable name space handler is an asynchronous pluggable protocol handler that you can set up to handle various protocol schemes and patterns. If a pluggable name space handler understands a particular URL, the handler will start successfully. Otherwise, the pluggable name space handler indicates that the default protocol handler for that protocol scheme should be used. A pluggable name space handler can be installed permanently or temporarily and can include specific patterns to indicate when it should be used.

<P>Multiple pluggable name space handlers can be registered either temporarily or permanently. Temporarily registered pluggable name space handlers are called first and in the reverse order in which they were registered. This means the temporary pluggable name space handler that was registered last will be called first. Permanent name space handlers are not called in a specific order, so there is no way to ensure which handler will be called first.

<P><B>Note</B>  All asynchronous pluggable name space handlers must support the <A HREF="../monikers/enums/BINDF.htm#BINDF_NO_UI">BINDF_NO_UI</A> and <A HREF="../monikers/enums/BINDF.htm#BINDF_SILENTOPERATIO">BINDF_SILENTOPERATION</A> flags.
<H4><A NAME="Permanent_pluggable_">Permanent pluggable name space handlers</A></H4>
<P>To set up a permanent pluggable name space handler, you must register it in the registry with the key HKEY_CLASSES_ROOT\PROTOCOLS\Name-Space Handler\protocol_scheme\handler_name. Under this key, you must set the values for a CLSID and any pattern string that you include. If no pattern strings are set, the handler is called for all requests for the specified protocol scheme.

<P>If there are multiple permanent pluggable name space handlers registered, the order in which they are called is random, so handlers should specify only name spaces that they have control over to avoid handling name spaces specified by another handler.

<P>In the following example, the pluggable name space handler Ohserv-Handler is to be called for all HTTP requests with the URL http://ohserv/.

<PRE>HKEY_CLASSES_ROOT\PROTOCOLS\Name-Space Handler\http\Ohserv-Handler
    CLSID = {..}
    Pattern1 = "ohserv"
</PRE>
<P>Pattern1 is a pattern string that is used to determine if this handler should be used on a particular URL. If a handler has multiple pattern strings (Pattern1, Pattern2, Pattern3, and so on), the browser checks the pattern strings listed to see if any of them match the URL the browser is trying to access. If there is a match, the handler is used; if there isn't, the handler is not used. 

<P><B>Note</B>  Valid pattern strings cannot have a leading wildcard character, such as *.com, and should handle only a specific group of known name spaces (for example, URLs for your company's Web sites). Pattern strings that could include numerous Web sites might conflict with other name space handlers that are provided for that specific site.
<H4><A NAME="Temporary_pluggable_">Temporary pluggable name space handlers</A></H4>
<P>You can register and unregister a temporary pluggable name space handler by using the <A HREF="ifaces/iinternetsession/IInternetSession.htm#IInternetSession">IInternetSession</A> interface.



<H3><A NAME="About_Pluggable_MIME">About Pluggable MIME Filters</A></H3>
<P>A pluggable MIME filter is an asynchronous pluggable protocol that receives data through a stream, does some operation on the data, and returns a data stream. The output data might be in a different format from the original stream.

<P>Multiple pluggable MIME filters can be registered either temporarily or permanently. Temporarily registered pluggable MIME filters are called first and in the reverse order in which they were registered. That means the pluggable MIME filters registered last will be called first.

<P>For information on how Internet Explorer 4.0 determines MIME types, see <A HREF="../monikers/appendix_a.htm#MIME_DETECT">Appendix A: MIME Type Detection in Internet Explorer 4.0</A>.

<P><B>Note</B>  All asynchronous pluggable MIME filters must support the <A HREF="../monikers/enums/BINDF.htm#BINDF_NO_UI">BINDF_NO_UI</A> and <A HREF="../monikers/enums/BINDF.htm#BINDF_SILENTOPERATIO">BINDF_SILENTOPERATION</A> flags.
<H4><A NAME="Permanent_pluggable_">Permanent pluggable MIME filters</A></H4>
<P>You must register a permanent pluggable MIME filter in the registry with the key HKEY_CLASSES_ROOT\PROTOCOLS\Filter\\&lt;mime_filter&gt; and with a value for a MIME filter. This value must be a CLSID.



<H4><A NAME="Temporary_pluggable_">Temporary pluggable MIME filters</A></H4>
<P>You can register and unregister a temporary pluggable MIME filter by using the <A HREF="ifaces/iinternetsession/IInternetSession.htm#IInternetSession">IInternetSession</A> interface.




<H2><A NAME="Creating_an_Asynchro">Creating an Asynchronous Pluggable Protocol Handler</A></H2>
<P>Use the following steps to create an asynchronous pluggable protocol handler:

<OL><LI>Implement the <A HREF="ifaces/iinternetprotocol/IInternetProtocol.htm#IInternetProtocol">IInternetProtocol</A> interface.
<LI>Implement the <A HREF="ifaces/iinternetprotocolroot/IInternetProtocolRoot.htm#IInternetProtocolRoo">IInternetProtocolRoot</A> interface.
<LI>Implement the
<object id="hhal_6" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_6.Click()>IClassFactory</A> interface.
<LI>Optional. Implement <A HREF="ifaces/iinternetprotocolinfo/IInternetProtocolInfo.htm#IInternetProtocolInf">IInternetProtocolInfo</A>. Support for the HTTP protocol is provided by the transaction handler. 
<LI>If <A HREF="ifaces/iinternetprotocolinfo/IInternetProtocolInfo.htm#IInternetProtocolInf">IInternetProtocolInfo</A> is implemented, provide support for <A HREF="enums/enums.htm#PARSE_SECURITY_URL">PARSE_SECURITY_URL</A> and <A HREF="enums/enums.htm#PARSE_SECURITY_DOMAI">PARSE_SECURITY_DOMAIN</A>, so the URL security zone manager can handle the security properly.
<LI>Write the code for your protocol handler.
<LI>Provide support for <A HREF="../monikers/enums/BINDF.htm#BINDF_NO_UI">BINDF_NO_UI</A> and <A HREF="../monikers/enums/BINDF.htm#BINDF_SILENTOPERATIO">BINDF_SILENTOPERATION</A>.
<LI>Add a subkey for your protocol handler in the registry under HKEY_CLASSES_ROOT\PROTOCOLS\Handler.
<LI>Create a string value, CLSID, under the subkey and set the string to the CLSID of your protocol handler.
</OL>
<P>After the protocol handler is created and added to the registry, it can be used by any application using the functionality provided by Urlmon.dll. The following list contains the general order of the calls made between Urlmon.dll and your protocol handler when a URL with the protocol scheme you registered your handler for is called:

<OL><LI>Urlmon.dll calls
<object id="hhal_7" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_7.Click()>IUnknown::QueryInterface</A> on your protocol handler for the <A HREF="ifaces/iinternetprotocolinfo/IInternetProtocolInfo.htm#IInternetProtocolInf">IInternetProtocolInfo</A> interface.

<P><IMG SRC="../../art/AX_APP01.gif" WIDTH="223" HEIGHT="173" ALT="Calling the asynchronous pluggable protocol" >

<LI>If <A HREF="ifaces/iinternetprotocolinfo/IInternetProtocolInfo.htm#IInternetProtocolInf">IInternetProtocolInfo</A> is implemented, Urlmon.dll calls your pluggable protocol handler's <A HREF="ifaces/iinternetprotocolinfo/ParseUrl.htm#IInternetProtocolInf">IInternetProtocolInfo::ParseUrl</A> interface.

<P><IMG SRC="../../art/AX_APP02.gif" WIDTH="245" HEIGHT="173" ALT="Calling the asynchronous pluggable protocol" >


<P>If the protocol handler is being called for an update of a subscription by Microsoft Internet Explorer 4.0, the pluggable protocol handler's <A HREF="ifaces/iinternetprotocolinfo/QueryInfo.htm#IInternetProtocolInf">IInternetProtocolInfo::QueryInfo</A> method will also be called with the <A HREF="../monikers/enums/QUERYOPTION.htm#QUERYOPTION">QUERYOPTION</A> value set to <A HREF="../monikers/enums/QUERYOPTION.htm#QUERY_USES_CACHE">QUERY_USES_CACHE</A>. Only pluggable protocol handlers that use the Internet cache and return TRUE for the <B>QUERY_USES_CACHE</B> flag will be supported by the Internet Explorer subscription mechanism. 


<LI>Urlmon.dll calls
<object id="hhal_8" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_8.Click()>IUnknown::QueryInterface</A> on your pluggable protocol handler for its <A HREF="ifaces/iinternetprotocol/IInternetProtocol.htm#IInternetProtocol">IInternetProtocol</A> interface.

<P><IMG SRC="../../art/AX_APP01.gif" WIDTH="223" HEIGHT="173" ALT="Calling the asynchronous pluggable protocol" >

<LI>Urlmon.dll calls your pluggable protocol handler's <A HREF="ifaces/iinternetprotocolroot/Start.htm#IInternetProtocolRoo">IInternetProtocolRoot::Start</A> method with the URL and passes the address of the Urlmon.dll's <A HREF="ifaces/iinternetprotocolsink/IInternetProtocolSink.htm#IInternetProtocolSin">IInternetProtocolSink</A> and <A HREF="ifaces/iinternetbindinfo/IInternetBindInfo.htm#IInternetBindInfo">IInternetBindInfo</A> interfaces.

<P><IMG SRC="../../art/AX_APP03.gif" WIDTH="231" HEIGHT="173" ALT="Calling the asynchronous pluggable protocol" >

<LI>Your pluggable protocol handler should access the requested data. First it will request the data from the Internet.

<P><IMG SRC="../../art/AX_APP04.gif" WIDTH="76" HEIGHT="173" ALT="Requesting the data from the Internet" >

<LI>After your pluggable protocol handler begins downloading data, your pluggable protocol handler should call the Urlmon.dll's <A HREF="ifaces/iinternetprotocolsink/ReportData.htm#IInternetProtocolSin">IInternetProtocolSink::ReportData</A> method.

<P><IMG SRC="../../art/AX_APP05.gif" WIDTH="263" HEIGHT="173" ALT="Notifying the transaction handler that data is available" >

<LI>Urlmon.dll calls your protocol handler's <A HREF="ifaces/iinternetprotocol/Read.htm#IInternetProtocol__R">IInternetProtocol::Read</A> method.

<P><IMG SRC="../../art/AX_APP06.gif" WIDTH="206" HEIGHT="173" ALT="Reading the data" >


<LI>Your pluggable protocol handler might call Urlmon.dll's <A HREF="ifaces/iinternetprotocolsink/ReportProgress.htm#IInternetProtocolSin">IInternetProtocolSink::ReportProgress</A> method. The pluggable protocol handler must report the MIME type, using the <A HREF="../monikers/enums/BINDSTATUS.htm#BINDSTATUS_MIMETYPEA">BINDSTATUS_MIMETYPEAVAILABLE</A> status code, to allow a pluggable MIME filter to be called (if there is a MIME filter registered for the MIME type reported).


<P><IMG SRC="../../art/AX_APP07.gif" WIDTH="262" HEIGHT="173" ALT="Reporting progress" >

<LI>Steps 6 through 8 are repeated until your protocol handler is finished downloading the requested data.

<LI>Your pluggable protocol handler must call the Urlmon.dll's <A HREF="ifaces/iinternetprotocolsink/ReportResult.htm#IInternetProtocolSin">IInternetProtocolSink::ReportResult</A> method.

<P><IMG SRC="../../art/AX_APP08.gif" WIDTH="272" HEIGHT="173" ALT="Reporting results" >

<LI>Urlmon.dll calls your pluggable protocol handler's <A HREF="ifaces/iinternetprotocol/LockRequest.htm#IInternetProtocol__L">IInternetProtocol::LockRequest</A> method.

<P><IMG SRC="../../art/AX_APP09.gif" WIDTH="246" HEIGHT="173" ALT="Locking request" >

<LI>Urlmon.dll calls your pluggable protocol handler's <A HREF="ifaces/iinternetprotocolroot/Terminate.htm#IInternetProtocolRoo">IInternetProtocolRoot::Terminate</A> method.

<P><IMG SRC="../../art/AX_APP10.gif" WIDTH="257" HEIGHT="173" ALT="Terminating the pluggable protocol" >

<LI>Urlmon.dll calls your pluggable protocol handler's <A HREF="ifaces/iinternetprotocol/Read.htm#IInternetProtocol__R">IInternetProtocol::Read</A> method until all the data is retrieved.

<P><IMG SRC="../../art/AX_APP11.gif" WIDTH="205" HEIGHT="173" ALT="Reading the remaining data" >

<LI>Urlmon.dll calls your pluggable protocol handler's <A HREF="ifaces/iinternetprotocol/UnlockRequest.htm#IInternetProtocol__U">IInternetProtocol::UnlockRequest</A> method.

<P><IMG SRC="../../art/AX_APP12.gif" WIDTH="258" HEIGHT="173" ALT="Unlocking the request" >
</OL>
<P><B>Note</B>  Your pluggable protocol handler's <A HREF="ifaces/iinternetprotocol/Read.htm#IInternetProtocol__R">IInternetProtocol::Read</A> method might continue to get called even after your <B>IInternetProtocol::Read</B> method has indicated that all the data has been read. All asynchronous pluggable protocol handlers must be prepared for this possibility.
<H3><A NAME="Creating_a_Pluggable">Creating a Pluggable MIME Filter</A></H3>
<P>A pluggable MIME filter is essentially an asynchronous pluggable protocol handler that implements an <A HREF="ifaces/iinternetprotocolsink/IInternetProtocolSink.htm#IInternetProtocolSin">IInternetProtocolSink</A> interface. Urlmon.dll will use the MIME filter's implementation of <B>IInternetProtocolSink</B> to notify the pluggable MIME filter that it has data ready to be filtered.

<P>Also, filters that handle multiple MIME types must register a separate CLSID for each MIME type they handle:

<OL><LI>The transaction handler calls the pluggable MIME filter's <A HREF="ifaces/iinternetprotocolroot/Start.htm#IInternetProtocolRoo">IInternetProtocolRoot::Start</A> method.

<P><IMG SRC="../../art/AX_PMF01.gif" WIDTH="231" HEIGHT="103" ALT="Reading the data" >

<LI>The transaction handler calls the pluggable MIME filter's <A HREF="ifaces/iinternetprotocolsink/ReportProgress.htm#IInternetProtocolSin">IInternetProtocolSink::ReportProgress</A> and <A HREF="ifaces/iinternetprotocolsink/ReportData.htm#IInternetProtocolSin">IInternetProtocolSink::ReportData</A> methods.

<P><IMG SRC="../../art/AX_PMF02.gif" WIDTH="284" HEIGHT="118" ALT="Reading the data" >

<LI>The pluggable MIME filter calls the transaction handler's <A HREF="ifaces/iinternetprotocol/Read.htm#IInternetProtocol__R">IInternetProtocol::Read</A> method.

<P><IMG SRC="../../art/AX_PMF03.gif" WIDTH="205" HEIGHT="103" ALT="Reading the data" >

<LI>The pluggable MIME filter calls the transaction handler's <A HREF="ifaces/iinternetprotocolsink/ReportData.htm#IInternetProtocolSin">IInternetProtocolSink::ReportData</A> method.

<P><IMG SRC="../../art/AX_PMF04.gif" WIDTH="264" HEIGHT="103" ALT="Reading the data" >

<LI>The transaction handler calls the pluggable MIME filter's <A HREF="ifaces/iinternetprotocol/Read.htm#IInternetProtocol__R">IInternetProtocol::Read</A> method.

<P><IMG SRC="../../art/AX_PMF05.gif" WIDTH="205" HEIGHT="103" ALT="Reading the data" >
</OL>
<P>More details will be provided in future versions of this documentation.




<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
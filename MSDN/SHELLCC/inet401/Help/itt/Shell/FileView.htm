<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>File Viewers</TITLE>

<META NAME=MS-HKWD CONTENT="File Viewers">
<META NAME="Keywords" CONTENT="Internet Tools & Technologies, Windows Shell API">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT, Mac">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">

<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="ch_fileview"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="File Viewers"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../art/headbard.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="File Viewers"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR>
<TR><TD><PRE><IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="Shell.htm#book_shell">Topic Contents</A></PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="fileparser/Reference.htm">File Parser Constants</A>
<IMG SRC="../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="AppHelp.htm">Help</A></PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>File Viewers</H1>
<BR CLEAR=ALL>
<P>A <I>file viewer</I> is an OLE COM object implemented inside a 32-bit in-process server dynamic-link library (DLL), which is associated, in turn, with the file viewer's class identifier. A file viewer provides the user interface for viewing a file. Menu items, a toolbar, and a status bar are standard parts of the file viewer interface. A file viewer can optionally add other functionality for further shell integration.
<P><A CLASS=tctop HREF="FileView.htm#About_File_Viewers"><IMG SRC="../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">About File Viewers</A><BR>
<!--*************************************************************--><H2><A NAME="About_File_Viewers">About File Viewers</A></H2>
<P>The shell allows users to browse through the information in the file system and on the network. Using the Quick View feature of the shell, the user can view the contents of a file without running the application that created it; the application doesn't even have to be installed on the user's computer. To view the file contents, the user selects a file and chooses the Quick View command from the context menu of the selection (or from the File menu). The following illustration shows the context menu.

<P>
<P><IMG SRC="../../art/filevw01.gif" WIDTH="272" HEIGHT="321" ALT="The context menu." >
<P>
<P>In response to the user choosing the Quick View command, the shell activates a file-specific viewer for the selected file. The shell uses the extension of the file to determine which viewer to activate. A file viewer associates itself with file classes and file name extensions in the system registry.

<P>A file viewer object, which is separate from the class factory object in the in-process server, uses the standard OLE
<object id="hhal_3" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_3.Click()>IPersistFile</A> interface as well as the <A HREF="ifaces/ifileviewer/IFileViewer.htm#shell_ifileviewer">IFileViewer</A> interface. The shell does not interact directly with file viewer objects. Instead, the shell starts an instance of a small program called Quick View (Quikview.exe) for each file to be viewed. Each instance of Quick View defines a process for a file viewer, giving the viewer its own message queue. Although Quick View is a Microsoft&#174; Windows&#174; executable file, it is not a complete application. It associates a path with a file viewer, creates an instance of the file viewer object, and instructs the file viewer to load and display the file. 

<P>Because a file viewer is an OLE COM object, additional interfaces and functionality can be added in future versions of Windows to support new features. For example, a file viewer can act as an OLE container application and can perform in-place activation of embedded objects inside the file being viewed. A file viewer can let the user make a selection in a document and copy the selection to the clipboard or use the selection in a drag-and-drop operation. However, such functionality is entirely up to the developer of the file viewer. This overview describes the basic functionality that a file viewer must provide and discusses user interface guidelines that all developers of file viewers should follow.

<H3><A NAME="Adding_or_Replacing_">Adding or Replacing File Viewers</A></H3>
<P>The file viewer interfaces allow you to add file viewers to Windows. For example, you may need to add a file viewer that supports a new file format or provides additional functionality. To understand how to add a file viewer to Windows, it is important first to understand how the default file viewers work. 

<P>The shell calls the Quick View program to display a file. Quick View manages the file viewing process and presents error messages for error conditions returned by the display engines&#151;a collection of DLLs that draws the viewer window and displays the file. Windows includes display engines for word processor documents, spreadsheets, databases, vector graphics, and raster graphics. File parser DLLs are associated with a particular display engine and are specific to a type or class of files. For example, spreadsheet and database files are associated with the spreadsheet and database display engines, respectively. These DLLs are typically between 25K and 75K in size and do all the low-level parsing of the files to be viewed.

<P>There are two methods to add file viewing functionality to Windows. First, a particular file parser DLL may be added to the system. The advantage of this method is that file parsers are relatively straightforward to write and debug. The disadvantage is that the limitations built into the default display engines (such as no printing and no cut, copy, or paste operations) remain even when a new file parsing DLL is used. For more information about the interface between file parsers and display engines, see <A HREF="fileparser/FileParser.htm#ch_fileparser">File Parsers</A>. 

<P>The second method of including file viewing functionality in Windows is to add one or more DLLs that work directly with Quick View. An example of one of these file viewing systems for ASCII files is found in the Samples subdirectory of the Microsoft Platform Software Development Kit (SDK). The main advantage of this method is that the code you write can support whatever file viewing functionality you wish to provide. This may be particularly important if your file format does not display well with one of the four default display engines. For example, an accounting package might have this problem because its file format is not recognized by one of the default display engines. The main disadvantage of this method is that writing for the Quick View interface requires additional development and testing effort. 

<P>The file viewing technology used by the Quick View feature was developed jointly by Microsoft Corporation and Systems Compatibility Corporation. 

<H3><A NAME="File_Viewer_Registra">File Viewer Registration</A></H3>
<P>During installation, a file viewer should ensure that entries exist in the registry that accurately associate a file with the class identifier of the file viewer's in-process server DLL. The file viewer's installation program may merge the contents of a registration (.reg) file into the registry. A file viewer can register itself for more than one file type if it can handle multiple file formats. If a file type has more than one registered file viewer, the shell activates the most recently registered viewer for the file type when the user chooses the Quick View command.

<H4><A NAME="Determining_file_typ">Determining file types</A></H4>
<P>The Quick View program attempts a simple association using the file name extension. If there is no file name extension or if there are no file viewers registered for the file name extension, Quick View calls each registered file viewer to see if any of them recognize the file. If more than one file viewer is registered for the same file name extension, Quick View calls each file viewer starting with the last one in the list. If Quick View cannot find a file viewer that can read the file, the Quick View operation fails and Quick View displays the following message: 
<PRE>There are no viewers registered for this type of file. Would you like to try the default viewer? 
 </PRE>
<P>The default viewer displays a hexadecimal dump using the word processing engine.

<H4><A NAME="fileviewers_registry_structure">Structure of registry entries</A></H4>
<P>The following registry structure is required for Quick View to associate a class identifier or file name extension with the class identifier of a file viewer. 
<PRE>HKEY_CLASSES_ROOT 
    \QuickView 
        \&lt;extension&gt; = &lt;human-readable document type&gt; 
            \{&lt;CLSID&gt;} = &lt;human-readable viewer name&gt; 
            \{&lt;CLSID&gt;} = &lt;human-readable viewer name&gt; 
            \{&lt;CLSID&gt;} = &lt;human-readable viewer name&gt; 
 
        ...[More extension entries for additional file types] 
            ... 
 
    \CLSID 
        \{&lt;CLSID&gt;} = &lt;human-readable viewer name&gt; 
            \InprocServer32 = &lt;full path to file viewer DLL&gt; 
                            = ThreadingModel = "Apartment" 
 
        ...[More class IDs for file viewers and other object servers] 
 </PRE>
<P>A description of the registry entries follows.
<TABLE>
<TR><TD><B>Entry
 </B></TD><TD><B>Description
</B></TD></TR>
<TR><TD>HKEY_CLASSES_ROOT </TD><TD>Root of the registry.</TD></TR>
<TR><TD>QuickView </TD><TD>Top-level key under which associations are stored.</TD></TR>
<TR><TD>CLSID </TD><TD>16-byte OLE class identifier spelled out in hexadecimal digits in the form of 12345678-1234-1234-1234-1234567890AB (with the hyphens included). All class identifiers are surrounded by curly braces when stored in the registry.</TD></TR>
<TR><TD>human-readable document type </TD><TD>String describing the file type associated with the class identifier or file name extension that can be displayed to the user. A file viewer can change the type when it is installed so that the name always reflects the preferred viewer. For example, this string might be "Windows Write Document."</TD></TR>
<TR><TD>human-readable viewer name </TD><TD>String that describes the vendor of the file viewer, as it might be displayed in an About box, such as "Company ABC Write Document Viewer."</TD></TR>
<TR><TD>&lt;extension&gt; </TD><TD>Three-character file name extension with the period, as is consistent with the standard 8.3 file name format (for example, .wri). </TD></TR>
</TABLE>
<P>CLSID and InprocServer32 are standard OLE (32-bit) subkey names. The "ThreadingModel = Apartment" entry is required for file viewers. The apartment threading model, which is new for OLE in Microsoft Windows 95 and Microsoft Windows NT&#174; version 3.51, allows the
<object id="hhal_4" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_4.Click()>OleInitialize</A> and
<object id="hhal_5" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_5.Click()>CoInitialize</A> functions to be called from multiple threads.

<P>The QuickView key can have any number of file name extension subkeys, each representing a registered file type. Each file name extension subkey can have one or more class identifier subkeys, each representing a registered file viewer object. The most recently registered file viewer appears first in the list of class identifier subkeys, and it is the first one found when Quick View enumerates the registered file viewers. 
<P><B>Note</B>  The file viewer class identifier should always differ from the file type class identifier because the application that created the file may already be using the file type class identifier to identify the application as a compound document server.
<P>Each class identifier stored under the file name extension subkeys must correspond to an entry of the same class identifier stored under the top-level key called CLSID. This is the standard location for storing information for OLE object servers. For file viewers, there must be an InprocServer32 subkey under the file viewer's class identifier key. The value of the InprocServer32 subkey is the full path to the file viewer DLL. You should store the full path and not depend on the DLL being in the path of the Windows 95 environment. InprocServer32 is a standard OLE subkey where the path to a COM object server is stored. Using this subkey allows the Quick View program to use standard OLE methods to access and create objects from file viewer servers.

<H4><A NAME="Registering_a_file_v">Registering a file viewer</A></H4>
<P>This section shows how to register a hypothetical file viewer for "AcmeWord Document" files with the .awd file name extension. The file viewer is implemented in an in-process server DLL called Acmewrdv.dll. The DLL has this class identifier: 00021116-0000-0000-C000-000000000046. The program that installs the file viewer creates the following registry entries:
<PRE>HKEY_CLASSES_ROOT 
    \QuickView 
        \.AWD = AcmeWord Document 
            \{00021117-0000-0000-C000-000000000046} = AcmeWord Document 
                                                      Viewer 
    \CLSID 
        \{00021117-0000-0000-C000-000000000046} = AcmeWord Document 
                                                  Viewer 
            \InprocServer32 = c:\acmeword\acmewrdv.dll 
                            = ThreadingModel = "Apartment" 
 
</PRE>
<P>The .reg file, which is an ASCII text file, contains these entries. (Note that wrapped lines are indented on the second line.)
<PRE>HKEY_CLASSES_ROOT\QuickView\.AWD = AcmeWord Document 
HKEY_CLASSES_ROOT\QuickView\.AWD \{00021117-0000-0000-C000-
    000000000046} = AcmeWord Document Viewer 
HKEY_CLASSES_ROOT\CLSID\{00021117-0000-0000-C000-000000000046} = 
    AcmeWord Document Viewer 
HKEY_CLASSES_ROOT\CLSID\{00021117-0000-0000-C000-000000000046} 
    \InprocServer32 = c:\acmeword\acmewrdv.dll 
                    = ThreadingModel = "Apartment" 
 
</PRE>
<P>The Quick View program uses these registry entries to associate a path with the class identifier of a file viewer's in-process server DLL.

<H3><A NAME="Quick_View_Program">Quick View Program</A></H3>
<P>The Quick View program (Quikview.exe) acts on behalf of the shell to locate and activate a file viewer for a given path. There is a one-to-one correspondence between each running instance of Quick View and each file being displayed in a file viewer. Each instance of Quick View defines a process for a file viewer, giving the file viewer its own message queue. Quick View turns over execution of the process to the file viewer until the file viewer shuts down.

<H4><A NAME="Quick_view_execution">Quick view execution and error conditions</A></H4>
<P>The lifetime of each instance of the Quick View program consists of the following steps.
<OL><LI>When the user chooses the Quick View or Print command, the shell starts an instance of Quikview.exe for each selected file (by using the Microsoft Win32&#174; <B>CreateProcess</B> or <B>WinExec</B> function). The shell may specify a Show command, and Quick View passes the command to the file viewer. The command-line argument that the shell passes to Quick View has the following options.
<TABLE>
<TR><TD><B>Option
 </B></TD><TD><B>Meaning
</B></TD></TR>
<TR><TD><B>-f</B>:<I>pathname</I> </TD><TD>Path of the file to view or print. Universal Naming Convention (UNC) file names are allowed. If this option is not specified, Quick View terminates without displaying any messages.</TD></TR>
<TR><TD><B>-v</B> </TD><TD>File to be opened for viewing in the file viewer. If this option is specified, Quick View ignores all of the options described below. This is the default option in the absence of both <B>-v</B> and <B>-p</B>. </TD></TR>
<TR><TD><B>-d</B> </TD><TD>Quick View and the file viewer will suppress all user interface elements if <B>-p</B> is also specified. Quick View suppresses any error messages, and the file viewer should not display any dialog boxes for printing. Quick View ignores this option in the absence of <B>-p</B>.</TD></TR>
<TR><TD><B>-p</B> </TD><TD>File to be opened for printing. If <B>-v</B> is also present, Quick View ignores this option. </TD></TR>
<TR><TD><B>-&amp;</B>:<I>pathname</I> </TD><TD>Printer driver to use to print the file. Quick View ignores this option in the absence of <B>-p</B>. If <B>-p</B> is present but <B>-&amp;</B> is not, Quick View instructs the file viewer to use the default printer driver. </TD></TR>
</TABLE>
<LI>Quick View starts and checks for a path on the command line. If there is no path, the user has attempted to start Quick View by itself and the program immediately terminates without displaying any messages.
<LI>Quick View parses the file name extension from the path given in the <B>-f</B> option. If no file name extension is given, Quick View proceeds to stage E1 (error condition 1). Otherwise, Quick View uses the following procedure to find a file viewer class identifier associated with the given file name extension.
<TABLE>
<TR><TD>A. </TD><TD>Quick View attempts to open the HKEY_CLASS_ROOT\QuickView\<I>extension</I> key, where <I>extension</I> is parsed from the path. 
<UL><LI>If the file name extension maps to a type such as HKEY_CLASS_ROOT\<I>extension</I> = <I>typename</I> and there is a registry entry with the form HKEY_CLASS_ROOT\<I>typename</I>\<B>QuickView = *</B>, Quick View looks for file viewer class identifiers under HKEY_CLASS_ROOT\QuickView\*. If a key with the HKEY_CLASS_ROOT\*\<B>QuickView = *</B> form exists, the system attempts to use all the viewers listed under the "*" section. 
<LI>Otherwise, Quick View begins enumerating the file viewer class identifiers under the HKEY_CLASS_ROOT\QuickView\<I>extension</I> key. If the enumeration fails (that is, there is nothing in the registry to enumerate), Quick View closes the key and proceeds to stage E2 (error condition 2). Otherwise, Quick View reads the first file viewer class identifier in the enumeration and proceeds to step 4.
</UL></TD></TR>
<TR><TD>B. </TD><TD>If an error occurs in step 4, the enumeration continues until all file viewer class identifiers have been tried. If no file viewer is activated, Quick View closes the key from A and proceeds to stage E2.</TD></TR>
</TABLE>
<LI>When given a class identifier of a file viewer DLL, Quick View attempts to create an instance of a file viewer object of the given class by using the following procedure:
<TABLE>
<TR><TD>A. </TD><TD>Quick View calls a function to create an instance of a file viewer object, specifying parameters that include the class identifier and the IID_IPersistFile interface identifier. This instructs OLE to load the DLL listed under the class identifier's InprocServer32 subkey, obtain an instance of the object from the DLL, and return an
<object id="hhal_6" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_6.Click()>IPersistFile</A> interface pointer to the object. If the instance cannot be created because of lack of memory, Quick View proceeds to stage E4. If it fails for some other reason, Quick View proceeds to stage E3. (Note that, because DLL objects are involved, any call to <B>QueryInterface</B> will not fail with REGDB_IID_NOTREG, which typically signals a corrupted registry. That error is generated only when LRPC proxies and stubs are involved.)</TD></TR>
<TR><TD>B. </TD><TD>When given the
<object id="hhal_7" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_7.Click()>IPersistFile</A> interface pointer <I>pIPersistFile</I>, Quick View calls the
<object id="hhal_8" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_8.Click()>IPersistFile::Load</A> method, specifying the path of the file and the STGM_READ and STGM_SHARE_DENY_NONE values, which instruct the object to open the file for read access. If <B>Load</B> fails, Quick View calls the <B>Release</B> method of <I>pIPersistFile</I> and proceeds to stage E4 if the error is due to a lack of memory. Otherwise, Quick View proceeds to stage E3.</TD></TR>
<TR><TD>C. </TD><TD>Quick View obtains the file viewer object's <A HREF="ifaces/ifileviewer/IFileViewer.htm#shell_ifileviewer">IFileViewer</A> interface by specifying the IID_IFileViewer interface identifier in a call to the <B>QueryInterface</B> method of <I>pIPersistFile</I>. Quick View calls the <B>Release</B> method of <I>pIPersistFile</I>, regardless of the outcome. If this call fails due to lack of memory, Quick View proceeds to stage E4. Otherwise, Quick View proceeds to stage E3.</TD></TR>
<TR><TD>D. </TD><TD>(1) If the <B>-v</B> option was present or both the <B>-v</B> and <B>-p</B> options were absent, Quick View calls the <B>ShowInitialize</B> method of <I>pIFileViewer</I>, which instructs the file viewer to load the file and perform any initialization prone to failure (including the creation of windows, the loading of resources, and so on). This is the file viewer's one chance to fail. If it fails, Quick View proceeds to stage E4 if the error is due to lack of memory or to stage E3 otherwise. If <B>ShowInitialize</B> succeeds, Quick View calls the <B>Show</B> method of <I>pIFileViewer</I>, specifying the show command that was passed to Quick View's <B>WinMain</B> function. <B>Show</B> does not return until the user closes the file viewer, and it always returns NOERROR in that case. If <B>Show</B> is called before <B>ShowInitialize</B>, it returns E_UNEXPECTED.</TD></TR>
<TR><TD></TD><TD>(2) If the <B>-p</B> option was present (and the <B>-v</B> option was absent), Quick View calls the <B>PrintTo</B> method of <I>pIFileViewer</I> specifying the path of the printer driver provided in the <B>-&amp;</B> option (or NULL if <B>-&amp;</B> was absent) and a value indicating if the <B>-d</B> option was present on the command line (user interface suppression flag). <B>PrintTo</B> does not return until printing is complete or an error occurs. If an error occurs, the file viewer is responsible for notifying the user if the user interface suppression flag is FALSE.</TD></TR>
<TR><TD>E. </TD><TD>When <B>Show</B> or <B>PrintTo</B> returns (whichever was called in steps D1 or D2), Quick View calls the <B>Release</B> method of <I>pIFileViewer</I>, regardless of the return value. If the file viewer successfully executed the <A HREF="ifaces/ifileviewer/ShowInitialize.htm#IFileViewer_ShowInitialize">IFileViewer::ShowInitialize</A> method, the <B>Release</B> method will not fail. <B>Release</B> fails only if it is called before <B>ShowInitialize</B>. If <B>PrintTo</B> fails but the <B>-d</B> option was not specified on the command line, Quick View assumes that the file viewer displayed a message to indicate printing failed, and Quick View fails without displaying a message in that case. In any case, Quick View proceeds to step 5.</TD></TR>
</TABLE>
<LI>Quick View releases any interface pointers it has and calls
<object id="hhal_9" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_9.Click()>OleUninitialize</A>. Quick View then terminates normally.
</OL>
<P>Quick View may encounter these four error conditions (stages E1 through E4) during the lifetime of an instance:
<P>
<TABLE>
<TR><TD><B>E1</B> </TD><TD>If Quick View fails to associate the path with a file viewer class identifier (using a file name extension), it displays this message. 
<PRE>There are no viewers for this type of file. Would you like to try the default viewers? 
</PRE>
<P>If the user clicks No, Quick View terminates. If the user clicks Yes, Quick View displays the Searching dialog box, enumerates all registered file viewers (regardless of file type or file name extension), and attempts to have each one load and display the file. Quick View tries each file viewer of a given class identifier once. If no file viewer successfully displays the file, Quick View removes the Searching dialog box and displays this message.
<PRE>Error opening or reading file. 
</PRE></TD></TR>
<TR><TD></TD><TD>When the user closes the dialog box, Quick View terminates. 
</TD></TR>
<TR><TD><B>E2</B> </TD><TD>If Quick View successfully determines the file type but fails to enumerate any file viewers associated with the file name extension, it displays the Searching dialog box and attempts to have each registered viewer display the file, trying each file viewer class identifier once. If that fails, the Quick View removes the Searching dialog box and displays this message.
<PRE>There are no viewers capable of viewing human-readable document type files. 
</PRE></TD></TR>
<TR><TD></TD><TD>When the user closes the dialog box, Quick View terminates. 
</TD></TR>
<TR><TD><B>E3</B> </TD><TD>If Quick View successfully locates an initial file viewer but fails to view the file for any reason other than an out-of-memory condition, Quick View displays the Searching dialog box and continues enumerating viewers under the class identifier or file name extension key currently in use. If Quick View tries all viewers registered for the type unsuccessfully, processing continues as in stage E2 by trying all registered viewers regardless of registered type.</TD></TR>
<TR><TD><B>E4</B> </TD><TD>If an out-of-memory condition occurs for one file viewer, it is likely that other viewers will not succeed either. In that case, Quick View displays a dialog box (using MB_ICONEXCLAMATION) with this message.
<PRE>There is not enough memory to view or print file name. Quit one or more files or programs, and then try again. 
</PRE></TD></TR>
</TABLE>
<P>A file viewer can return a number of error values to Quick View. When Quick View receives an error value, it displays an error message. Quick View recognizes the following error values:
<TABLE>
<TR><TD>FV_E_BADFILE  </TD><TD>((HRESULT)0x8534E102L)</TD></TR>
<TR><TD>FV_E_EMPTYFILE </TD><TD>((HRESULT)0x8534E108L)</TD></TR>
<TR><TD>FV_E_FILEOPENFAILED </TD><TD>((HRESULT)0x8534E105L)</TD></TR>
<TR><TD>FV_E_INVALIDID </TD><TD>((HRESULT)0x8534E106L)</TD></TR>
<TR><TD>FV_E_MISSINGFILES </TD><TD>((HRESULT)0x8534E104L)</TD></TR>
<TR><TD>FV_E_NOFILTER </TD><TD>((HRESULT)0x8534E100L)</TD></TR>
<TR><TD>FV_E_NONSUPPORTEDTYPE </TD><TD>((HRESULT)0x8534E101L)</TD></TR>
<TR><TD>FV_E_NOVIEWER  </TD><TD>((HRESULT)0x8534E10AL)</TD></TR>
<TR><TD>FV_E_OUTOFMEMORY </TD><TD>((HRESULT)0x8534E107L)</TD></TR>
<TR><TD>FV_E_PROTECTEDFILE </TD><TD>((HRESULT)0x8534E109L)</TD></TR>
<TR><TD>FV_E_UNEXPECTED </TD><TD>((HRESULT)0x8534E103L)</TD></TR>
</TABLE>
<H4><A NAME="Pinned_windows">Pinned windows</A></H4>
<P>The shell can request that Quick View display a new file in the same window used by the previous file viewer; this is called pinning a viewer window. Quick View communicates the shell's request by sending a WM_DROPFILES message to the file viewer. The message contains an internal drop files structure whose members include the path of the new file to be displayed. A file viewer uses the same code to handle both the pinned state and drag-and-drop operations in which the file viewer displays a file the user has dropped on the viewer window. 

<P>Quick View implements the <A HREF="ifaces/ifileviewersite/IFileViewerSite.htm#shell_ifileviewersite">IFileViewerSite</A> interface, which allows a file viewer to retrieve the handle to the current pinned window, if there is one, or set a new pinned window. When Quick View calls a file viewer's <A HREF="ifaces/ifileviewer/ShowInitialize.htm#IFileViewer_ShowInitialize">IFileViewer::ShowInitialize</A> method, the file viewer receives the address of Quick View's <B>IFileViewerSite</B> interface. If the file viewer saves the address of the interface, it should call the <B>AddRef</B> method to increment the reference count. 

<P>Only one pinned window can exist at a time. A file viewer uses the <A HREF="ifaces/ifileviewersite/SetPinnedWindow.htm#IFileViewerSite_SetPinnedWindow">IFileViewerSite::SetPinnedWindow</A> method to set a new pinned window and the <A HREF="ifaces/ifileviewersite/GetPinnedWindow.htm#IFileViewerSite_GetPinnedWindow">IFileViewerSite::GetPinnedWindow</A> method to retrieve the handle to the current pinned window.

<P>When Quick View calls the file viewer's <A HREF="ifaces/ifileviewer/Show.htm#IFileViewer_Show">IFileViewer::Show</A> method, the file viewer receives the address of an <A HREF="structures/FVSHOWINFO.htm#FVSHOWINFO">FVSHOWINFO</A> structure that includes an optional
<object id="hhal_10" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_10.Click()>RECT</A> structure. A valid <B>RECT</B> structure is a hint from the shell that the file viewer window should be pinned; the file viewer should set the size and position of its window based on the information in the structure. 

<P>If the file viewer window receives a WM_DROPFILES message, it should fill in the <B>strNewFile</B> member of the <A HREF="structures/FVSHOWINFO.htm#FVSHOWINFO">FVSHOWINFO</A> structure with the path of the new file to be displayed, fill the <B>rect</B> member with the size and position of the viewer window, and set the appropriate values in the <B>dwFlags</B> member. The file viewer should also fill the <B>punkrel</B> member with the address of an interface that the new file viewer should call to release the previous file viewer. Doing this allows the previous file viewer to perform cleanup operations. The new file viewer may be the same as the current file viewer if the current one supports the new file. If the old file viewer is the same as the new one, the release does not do anything because the reference count is greater than zero. 

<P>If a file viewer returns a file but Quick View cannot find a viewer for the new file, it calls the <A HREF="ifaces/ifileviewer/Show.htm#IFileViewer_Show">IFileViewer::Show</A> method for the old file viewer with the FVSIF_NEWFAILED value. The file viewer can either terminate or continue showing the previous file.

<H4><A NAME="Searching_dialog_box">Searching dialog box</A></H4>
<P>When Quick View must enumerate more than one file viewer from the registry, it displays a dialog box containing a message that reads as follows: 
<PRE>Searching for a viewer to display or print the &lt;human-readable 
document type&gt; in &lt;file name&gt;. Press Cancel to stop the search. 
 </PRE>
<P>If the document type is not known, the following message appears: 

<PRE>Searching for a viewer to display or print &lt;file name&gt;. 
Press Cancel to stop the search. 
 </PRE>
<P>Quick View animates the magnifying glass icon in the dialog box to indicate that Quick View is searching the hard disk. Pressing the Cancel button stops any search in progress and closes Quick View without performing any further actions or providing any user interface.

<H3><A NAME="File_Viewer_Structur">File Viewer Structure and Implementation</A></H3>
<P>A file viewer is an OLE COM object in an in-process server DLL that implements the
<object id="hhal_11" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_11.Click()>IPersistFile</A> and <A HREF="ifaces/ifileviewer/IFileViewer.htm#shell_ifileviewer">IFileViewer</A> interfaces. The in-process server exports the
<object id="hhal_12" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_12.Click()>DllGetClassObject</A> and
<object id="hhal_13" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_13.Click()>DllCanUnloadNow</A> functions, implements a class factory object with the
<object id="hhal_14" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_14.Click()>IClassFactory</A> interface, and implements the file viewer object with the interfaces required. The following illustration shows the structure of a file viewer. 

<P>
<P><IMG SRC="../../art/filevw04.gif" WIDTH="237" HEIGHT="185" ALT="Structure of a file viewer." >
<P>
<P>There are a number of reasons why a file viewer is best implemented in a DLL with the given interfaces. In general, a DLL is faster to load and usually comes in a small package. In the future, these same DLLs will provide other nonuser interface features, such as content indexing, and a COM object DLL will be the fastest and most efficient way to access those features. In some cases, a file viewer object may need to display pop-up windows and process messages through its own message loop as in Windows 95. The DLL structure still allows this when used in conjunction with a stub process like Quick View, which gives the file viewer DLL the right to execute a message loop.

<P>The
<object id="hhal_15" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_15.Click()>IPersistFile</A> interface in the file viewer object is intended to be a general mechanism through which the object is given a path for a file. Once the <B>IPersistFile</B> interface is obtained, the component that loaded the object can ask it to do any number of things with the file. Through Quick View, the Windows 95 shell asks the object to show the file by using the <A HREF="ifaces/ifileviewer/ShowInitialize.htm#IFileViewer_ShowInitialize">IFileViewer::ShowInitialize</A> and <A HREF="ifaces/ifileviewer/Show.htm#IFileViewer_Show">IFileViewer::Show</A> methods or asks the object to print the file to a specific printer by using the <A HREF="ifaces/ifileviewer/PrintTo.htm#IFileViewer_PrintTo">IFileViewer::PrintTo</A> method. In the future, the shell may ask the object to perform content indexing, which would happen through an interface other than <A HREF="ifaces/ifileviewer/IFileViewer.htm#shell_ifileviewer">IFileViewer</A>. For this reason, the file loading methods of <B>IPersistFile</B> are separate from the <B>IFileViewer</B> file methods, which is why <B>IFileViewer</B> was not just extended with its own <B>Load</B> method. Extending <B>IFileViewer</B> would have been more efficient (because it avoids <B>IPersistFile</B> entry point functions that are not implemented), but the current design is easier to extend. 

<H4><A NAME="IFileViewer_interfac">IFileViewer interface</A></H4>
<P>The shell uses the <A HREF="ifaces/ifileviewer/IFileViewer.htm#shell_ifileviewer">IFileViewer</A> interface to print the file or to tell a file viewer object when to show its user interface for the file being viewed. In addition to the usual
<object id="hhal_16" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_16.Click()>IUnknown</A> members, the interface includes the <A HREF="ifaces/ifileviewer/ShowInitialize.htm#IFileViewer_ShowInitialize">IFileViewer::ShowInitialize</A>, <A HREF="ifaces/ifileviewer/Show.htm#IFileViewer_Show">IFileViewer::Show</A>, and <A HREF="ifaces/ifileviewer/PrintTo.htm#IFileViewer_PrintTo">IFileViewer::PrintTo</A> methods. 

<P>Before calling <A HREF="ifaces/ifileviewer/Show.htm#IFileViewer_Show">IFileViewer::Show</A>, the shell calls <A HREF="ifaces/ifileviewer/ShowInitialize.htm#IFileViewer_ShowInitialize">IFileViewer::ShowInitialize</A> to instruct the file viewer to perform any necessary initialization. <B>ShowInitialize</B> can fail, whereas <B>Show</B> cannot because Quick View needs to know, before anything becomes visible and before transferring control to the file viewer, whether the file viewer can show the file. If the file viewer can show the file, Quick View hides its Searching dialog box before the file viewer window appears.

<P>The <B>ShowInitialize</B> method should return the FV_ error codes listed in the <A HREF="FileView.htm#fileviewers_registry_structure">Structure of registry entries</A> section. Although the sample file viewer included in the Microsoft Platform SDK uses a more generic form of error codes, new file viewer DLLs should use the FV_ codes.

<P>The <B>Show</B> method is similar to the Windows <B>ShowWindow</B> function in that it receives a Show command indicating how the file viewer should initially display its window. In general, Quick View passes the Show command from its
<object id="hhal_17" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_17.Click()>WinMain</A> function directly to <A HREF="ifaces/ifileviewer/Show.htm#IFileViewer_Show">IFileViewer::Show</A>, which passes the command to <B>ShowWindow</B>. Since Quick View obtains this parameter from the shell, this design enables the shell to open a file viewer in the minimized, normal, or maximized state and even allows the shell to hide a file viewer (with the SW_HIDE value). There is no extra overhead in providing this flexibility. Note that the Windows 95 shell always starts Quick View with the SW_SHOWNORMAL value.

<P>The only case when <B>Show</B> can fail is if <B>ShowInitialize</B> has not been called. In that case, it returns the E_UNEXPECTED status code. Otherwise, <B>Show</B> must return the NOERROR error code.

<P>The <B>PrintTo</B> method is like <B>Show</B> in that it does not return until it finishes printing or an error occurs. If an error occurs, the file viewer object is responsible for informing the user of the problem. When calling <B>PrintTo</B>, the shell specifies the name of the printer driver that the file viewer should use to print the file. The shell also specifies a flag that indicates whether the file viewer should display any user interface elements, including error messages, during the print operation. If the flag is FALSE, the file viewer may show Print dialog boxes, Printer Setup dialog boxes, error messages, and so on. 

<P>The <A HREF="ifaces/ifileviewer/IFileViewer.htm#shell_ifileviewer">IFileViewer</A> interface identifier is defined in the Windows header files as the IID_IFileViewer. 

<H4><A NAME="File_Viewer_Creation">File viewer creation</A></H4>
<P>You can create a file viewer that interacts appropriately with Quick View by following these steps:
<OL><LI>Define the file viewer object to use the
<object id="hhal_18" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_18.Click()>IPersistFile</A> and <A HREF="ifaces/ifileviewer/IFileViewer.htm#shell_ifileviewer">IFileViewer</A> interfaces. The object must also implement a separate
<object id="hhal_19" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_19.Click()>IUnknown</A> interface that does not delegate calls in aggregation situations. In general, a file viewer object creates or attaches to a window that displays a file's contents.
<LI>Implement the
<object id="hhal_20" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_20.Click()>IPersistFile::Load</A> and
<object id="hhal_21" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_21.Click()>IPersistFile::GetCurFile</A> methods (as well as the
<object id="hhal_22" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_22.Click()>IUnknown</A> methods). The
<object id="hhal_23" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_23.Click()>IPersistFile::IsDirty</A> method can simply return
<object id="hhal_24" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_24.Click()>ResultFromScode</A> (S_FALSE) because a file viewer does not modify the file, and the
<object id="hhal_25" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_25.Click()>IPersistFile::Save</A> and
<object id="hhal_26" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_26.Click()>IPersistFile::SaveCompleted</A> methods should simply return <B>ResultFromScode</B> (E_NOTIMPL). <B>IPersistFile::Load</B> stores the file name but delays opening the file until the later call to the <A HREF="ifaces/ifileviewer/ShowInitialize.htm#IFileViewer_ShowInitialize">IFileViewer::ShowInitialize</A> method. <B>IPersistFile::GetCurFile</B> returns <B>ResultFromScode</B> (E_UNEXPECTED) if
<object id="hhal_27" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_27.Click()>Load</A> has not yet been called. Otherwise, it copies the path and returns the NOERROR error code.
<LI>Implement the <A HREF="ifaces/ifileviewer/ShowInitialize.htm#IFileViewer_ShowInitialize">IFileViewer::ShowInitialize</A> and <A HREF="ifaces/ifileviewer/Show.htm#IFileViewer_Show">IFileViewer::Show</A> methods (as well as the
<object id="hhal_28" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_28.Click()>IUnknown</A> methods). <B>ShowInitialize</B> must perform all operations that are prone to failure. Therefore, if <B>ShowInitialize</B> succeeds, <B>Show</B> will never fail. The implementation of these two member functions is similar to the implementation of an application's
<object id="hhal_29" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_29.Click()>WinMain</A> function. <B>ShowInitialize</B> registers window classes, creates any necessary windows, and loads the file as read-only with the path given in the
<object id="hhal_30" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_30.Click()>IPersistFile::Load</A> method. <B>ShowInitialize</B> uses the instance handle that the DLL receives in its
<object id="hhal_31" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_31.Click()>DllEntryPoint</A> function, not the instance of Quick View, when registering and creating windows. Then <B>Show</B> displays the contents of the file in the viewport window, shows the top-level file viewer window, and enters a message loop. To enhance the appearance of the user interface, the file should be loaded and completely displayed in the viewport window before the windows are made visible.

<P><B>IFileViewer::Show</B> does not return until the user has closed the window; Quick View waits for <B>Show</B> to return before it terminates. Quick View delegates the responsibility of the message loop to the <B>Show</B> method, so <B>ShowInitialize</B> and <B>Show</B> look and behave exactly like a
<object id="hhal_32" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_32.Click()>WinMain</A> function in any application (the code is just stored in a DLL). 
<P>Note that the path in the
<object id="hhal_33" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_33.Click()>IPersistFile::Load</A> method may be a uniform naming convention (UNC) path. Functions such as Win32
<object id="hhal_34" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_34.Click()>OpenFile</A> and OLE
<object id="hhal_35" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_35.Click()>StgOpenStorage</A> automatically handle UNC paths. If you open a file any other way, you must be sure to handle UNC paths properly.
<LI>Define the class factory object with the
<object id="hhal_36" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_36.Click()>IClassFactory</A> interface and implement the interface completely to create a file viewer object. The class factory must support aggregation and server locking, as required by the <B>IClassFactory</B> interface.
<LI>Implement the
<object id="hhal_37" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_37.Click()>DllGetClassObject</A> function to create an instance of the class factory mentioned in step 4, and return a pointer to one of its interfaces, as required for any COM object DLL.
<LI>Implement the
<object id="hhal_38" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_38.Click()>DllCanUnloadNow</A> function to return the appropriate code, depending on the number of file viewer objects in service and the number of lock counts implemented by using the
<object id="hhal_39" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_39.Click()>IClassFactory::LockServer</A> method, as required for any COM object DLL.
<LI>Include the Print To feature by using the <A HREF="ifaces/ifileviewer/PrintTo.htm#IFileViewer_PrintTo">IFileViewer::PrintTo</A> method. This step is optional. If this feature is not implemented, the member function must return
<object id="hhal_40" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_40.Click()>ResultFromScode</A> (E_NOTIMPL).
<LI>Finish the DLL implementation by using the
<object id="hhal_41" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_41.Click()>DllEntryPoint</A> function, as required for any Win32-based DLL.
</OL>
<P>In general, only the implementations of
<object id="hhal_42" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_42.Click()>IPersistFile::Load</A> and the <A HREF="ifaces/ifileviewer/IFileViewer.htm#shell_ifileviewer">IFileViewer</A> methods are specific to a file viewer. The other steps that deal with creating an OLE COM object are standard OLE mechanisms. 

<H3><A NAME="File_Viewer_User_Int">File Viewer User Interface Guidelines</A></H3>
<P>This section describes the minimal user interface recommended for a file viewer. These guidelines are provided to promote a consistent user interface in all file viewers. You should follow these guidelines as closely as possible and include viewer-specific features within the context of these guidelines. 

<H4><A NAME="File_viewer_main_win">File viewer main window</A></H4>
<P>A file viewer's main window should have Minimize, Maximize, and Close buttons and these top-level menu items: File, View, and Help. A file viewer should also include a toolbar and a status window. The appearance and contents of the viewport window, which occupies all space not used by the toolbar and status window, is left to the developer. However, the viewport window typically has proportional scroll bars if the file contents are not entirely visible in the viewport. The initial show state of the window (normal, minimized, or maximized) is given in the <A HREF="ifaces/ifileviewer/Show.htm#IFileViewer_Show">IFileViewer::Show</A> method.

<P>The following illustration shows an example of a file viewer window. 

<P>
<P><IMG SRC="../../art/filevw05.gif" WIDTH="350" HEIGHT="450" ALT="File viewer window in the typical initial state." >
<P>

<P>A file viewer can include other top-level menu items for file-specific features. For example, a file viewer should include an Edit menu with a single Copy command to allow the user to make a selection in the viewport window and copy it to the clipboard. However, such extensions are not part of the basic user interface for a file viewer. 

<P>You should also use the window flags to create a 3-D window appearance and use scroll bars with proportional scroll boxes.

<H4><A NAME="File_Viewer_File_Menu">File viewer File menu items</A></H4>
<P>The standard file viewer File menu has the following four items (as well as separators), two of which are optional. A file viewer can add other items to the menu, but in most cases there is no need for other items. 
<TABLE>
<TR><TD><B>Menu item string
 </B></TD><TD><B>Result of selecting the menu item</B></TD></TR>
<TR><TD>"&amp;Open File for Editing" </TD><TD>Locates and starts the application that can open and edit the file. After successfully starting the application, the file viewer should hide its window immediately, shut down, and return from <A HREF="ifaces/ifileviewer/Show.htm#IFileViewer_Show">IFileViewer::Show</A>, after which the Quick View process terminates. If the file viewer fails to start the application, it should display the following message:
<PRE>There is no application available that can open this file.</PRE></TD></TR>
<TR><TD>Separator </TD><TD>Not applicable.</TD></TR>
<TR><TD>"Page Set&amp;up" (optional) </TD><TD>Activates the standard Page Setup dialog box (or an application-specific dialog box if desired), the results of which affect the display of the file in the viewport window. The effects of the Page Setup command last only for the duration of the file viewer and do not affect the contents of the disk file. This menu item should appear if the file viewer supports printing and only if the Print menu item appears as well.</TD></TR>
<TR><TD>"&amp;Print\tCtrl+P" (optional) </TD><TD>Activates the standard Print/Printer Setup property sheet. Any changes made to the printer setup that would affect the display of the file in the viewport window last only for the duration of the file viewer and do not affect the contents of the disk file. This menu item should appear only if the file viewer supports printing a file without starting the full application.</TD></TR>
<TR><TD>Separator </TD><TD>Not applicable.</TD></TR>
<TR><TD>"E&amp;xit" </TD><TD>Hides the main window, closes the file, destroys all the windows, performs other necessary cleanup, and returns with NOERROR from <A HREF="ifaces/ifileviewer/Show.htm#IFileViewer_Show">IFileViewer::Show</A>. The window should be hidden before cleanup happens to avoid marring its appearance when the system destroys the toolbar and other controls.</TD></TR>
</TABLE>
<H4><A NAME="File_Viewer_View_Menu">File viewer View menu items</A></H4>
<P>The View menu of a standard file viewer has the following items.
<TABLE>
<TR><TD><B>Menu item string
 </B></TD><TD><B>Result of selecting the menu item
</B></TD></TR>
<TR><TD>"&amp;Toolbar" </TD><TD>Used to switch between displaying and hiding the toolbar. This item is checked when the toolbar is visible and unchecked when it is hidden.</TD></TR>
<TR><TD>"&amp;Status Bar" </TD><TD>Used to switch between displaying and hiding the status window. This item is checked when the status bar is visible and unchecked when it is hidden.</TD></TR>
<TR><TD>"&amp;Page View" </TD><TD>Used to switch between a full-sized view and a single-page view and vice versa.</TD></TR>
<TR><TD>"Replace &amp;Window" </TD><TD>Used to switch between reusing the current window to view a file and creating a new window to view a file.</TD></TR>
<TR><TD>Separator </TD><TD>Not applicable.</TD></TR>
<TR><TD>"&amp;Landscape" </TD><TD>Used to switch between landscape and portrait views when in page view.</TD></TR>
<TR><TD>"&amp;Rotate" </TD><TD>Rotates a raster graphic image 90 degrees every time the image is selected.</TD></TR>
<TR><TD>Separator </TD><TD>Not applicable.</TD></TR>
<TR><TD>"&amp;Font" </TD><TD>Displays a dialog box that allows the user to select a font and point size for viewing word processing documents and spreadsheets.</TD></TR>
</TABLE>
<H4><A NAME="File_viewer_Help_men">File viewer Help menu items</A></H4>
<P>The standard file viewer Help menu has the following items.
<TABLE>
<TR><TD><B>Menu item string
 </B></TD><TD><B>Result of selecting the menu item</B></TD></TR>
<TR><TD> </TD><TD></TD></TR>
<TR><TD>"&amp;Help Topics" </TD><TD>Activates Winhelp.exe with the file viewer's Help file.</TD></TR>
<TR><TD>"&amp;About <I>fileviewer name</I>" </TD><TD>Displays an About dialog box for the file viewer. The About dialog box identifies the vendor of the file viewer.</TD></TR>
</TABLE>
<P>A file viewer can also add other Help items and context-sensitive Help.

<H4><A NAME="File_Viewer_Toolbar">File viewer toolbar buttons</A></H4>
<P>A file viewer must include a toolbar with a single button tied to the Open File for Editing menu item on the File menu described previously. The image in this button is a 16-by-15-pixel bitmap derived from the icon of the application that would be started if the user opened the file from the shell (using the shell's association route). The image is obtained by calling the <A HREF="functions/SHGetFileInfo.htm#SHGetFileInfo">SHGetFileInfo</A> function with the path of the file. If this function fails, a file viewer can include a button that contains its own image and attempt to start the parent application, or the file viewer can remove the button and disable the Open File for Editing menu item on the File menu. This single button must be the leftmost item on the toolbar and must be separated from any other buttons that are specific to the file viewer.
<P>The following illustration shows an example of an Open File for Editing button implementation.
<P><IMG SRC="../../art/filevw06.gif" WIDTH="350" HEIGHT="51" ALT="An Open File for Editing button." >
<P>
<P>Other buttons should correspond roughly to the functions present in the file viewer menus. A file viewer that supports a Font menu item should have Increase Font Size and Decrease Font Size buttons. Other file viewer classes may need to include printing and rotation buttons on the toolbar.

<P>A standard toolbar button is the Replace Window button. The default behavior for file viewers is for a new file viewer instance to be created whenever the user chooses the Quick View menu item. When the Replace Window button is switched to the "on" position, however, a new instance is not created; instead, the contents of the relevant file viewer window are replaced by a view of the new file.

<P>All buttons should have a corresponding tooltip control that displays some context information when the mouse cursor is positioned on the button. The standard Windows 95 toolbar control provides built-in support for tooltip controls, so you only have to provide the text string. The following illustration shows a tooltip control for a toolbar button.

<P>
<P><IMG SRC="../../art/filevw07.gif" WIDTH="350" HEIGHT="104" ALT="Tooltip control for a toolbar button." >
<P>
<P>The recommended tooltip strings for various toolbar buttons follow.
<TABLE>
<TR><TD><B>Toolbar Button
 </B></TD><TD><B>Tooltip String
</B></TD></TR>
<TR><TD>Open File for Editing </TD><TD>Open File for Editing</TD></TR>
<TR><TD>Font Increase </TD><TD>Increase Font Size</TD></TR>
<TR><TD>Font Decrease </TD><TD>Decrease Font Size</TD></TR>
<TR><TD>Small View </TD><TD>Toggle view size </TD></TR>
<TR><TD>Landscape </TD><TD>Toggle portrait/landscape</TD></TR>
<TR><TD>Rotate [Again] </TD><TD>Rotate image 90 degrees</TD></TR>
<TR><TD>Replace Window </TD><TD>Replace Window</TD></TR>
</TABLE>
<H4><A NAME="File_viewer_status_w">File viewer status window messages</A></H4>
<P>A file viewer should display status window messages for the system menu and all top-level and pop-up menu items. The messages for the system menu and other menu items used by the default Windows file viewers follow:
<TABLE>
<TR><TD><B>[Menu] Item
 </B></TD><TD><B>Message
</B></TD></TR>
<TR><TD>[System] </TD><TD>Commands for manipulating this and other windows.</TD></TR>
<TR><TD>[System] Restore </TD><TD>Restores this window to normal size/Expands this window to full screen size.</TD></TR>
<TR><TD>[System] Move </TD><TD>Moves this window to another screen location.</TD></TR>
<TR><TD>[System] Size </TD><TD>Resizes this window.</TD></TR>
<TR><TD>[System] Minimize </TD><TD>Collapses this window to an icon.</TD></TR>
<TR><TD>[System] Maximize </TD><TD>Expands this window to full screen size.</TD></TR>
<TR><TD>[System] Close </TD><TD>Closes this window.</TD></TR>
<TR><TD>[System] Switch To... </TD><TD>Switch to another task.</TD></TR>
<TR><TD>[File] </TD><TD>Contains commands for opening the file and quitting Quick View.</TD></TR>
<TR><TD>[File] Open File for Editing </TD><TD>Opens the file for editing.</TD></TR>
<TR><TD>[File] Page Setup </TD><TD>Changes the page setup for printing.</TD></TR>
<TR><TD>[File] Print... </TD><TD>Prints the file contents.</TD></TR>
<TR><TD>[File] Exit </TD><TD>Quits Quick View.</TD></TR>
<TR><TD>[View] </TD><TD>Contains commands for customizing this window.</TD></TR>
<TR><TD>[View] Toolbar </TD><TD>Shows or hides the toolbar.</TD></TR>
<TR><TD>[View] Status Bar </TD><TD>Shows or hides the status bar.</TD></TR>
<TR><TD>[View] Page View </TD><TD>Switches between document and page views.</TD></TR>
<TR><TD>[View] Replace Window </TD><TD>Displays new files in current Quick View window.</TD></TR>
<TR><TD>[View] Landscape </TD><TD>Switches between portrait and landscape.</TD></TR>
<TR><TD>[View] Rotate (Again) </TD><TD>Rotates the image by 90 degrees.</TD></TR>
<TR><TD>[View] Font </TD><TD>Changes the display font.</TD></TR>
<TR><TD>[Help] </TD><TD>Contains commands for displaying Help and information about Quick View.</TD></TR>
<TR><TD>[Help] Help Topics </TD><TD>Displays the Help Contents and Index.</TD></TR>
<TR><TD>[Help] About </TD><TD>Displays program information, version number, and copyright.</TD></TR>
</TABLE>
<P>The following standard messages for other conditions not related to menu items are implemented in the Windows default file viewers.
<UL><LI>In the inactive state, when the user is doing nothing else, the status bar should read as follows: 
<PRE>Display details may be inaccurate.
</PRE>
<P>This line should be the first visible message when the file viewer appears. <LI>When the mouse cursor is positioned over the viewport window, the status window should read as follows:
<PRE>To edit, click Open File for Editing on the File menu. 
</PRE>
<P>The following illustration shows a viewer window displaying this message.
<P><IMG SRC="../../art/filevw08.gif" WIDTH="325" HEIGHT="319" ALT="Example status bar text for a mouse move." > 

<P>Note that the document type is specific for the file viewer in use. 

<P>
<LI>The status window should reflect longer versions of tooltip messages when tooltip controls are displayed. For example, a longer version of the Increase Font Size tooltip is "Increase the font size of the display shown at the same time in the status window." 
</UL>
<H4><A NAME="File_viewer_viewport">File viewer viewport window contents</A></H4>
<P>The viewport window is where you provide most file-specific user interface elements. The viewport occupies all space in the client area of the main window not used for the toolbar and status bar. It displays the file contents in whatever mode is applicable, and it is sensitive to the user-selected printer and page setup, as well as other View menu commands.

<P>If the contents of the file are too large to be completely displayed within the viewport, the file viewer should provide scroll bars (with proportional scroll boxes) to shift the image. If the contents of the file are smaller than the viewport window, no scroll bars should appear. In addition, the file contents should not be initially scaled to fill the viewport window unless the user selects scaling through the View menu commands.

<P>The only other requirement for the viewport window is that it should provide a context menu for the file. The context menu should appear when the user clicks the viewport with the right mouse button. The context menu should include the following items.
<TABLE>
<TR><TD><B>Menu item string
 </B></TD><TD><B>Equivalent found on other menu</B></TD></TR>
<TR><TD> </TD><TD></TD></TR>
<TR><TD>"&amp;Open File for Editing" </TD><TD>Open File for Editing command on the File menu</TD></TR>
<TR><TD>Separator </TD><TD>Not applicable</TD></TR>
<TR><TD>"Page Se&amp;tup" (optional) </TD><TD>Page Setup command on the File menu</TD></TR>
<TR><TD>"&amp;Print" (optional) </TD><TD>Print command on the File menu (note, no accelerator)</TD></TR>
<TR><TD>Separator </TD><TD>Not applicable</TD></TR>
</TABLE>
<P>You can add more menu items as needed. The Toolbar and Status bar menu item commands on the View menu should not appear in the context menu.

<H3><A NAME="Drag_and_Drop_File_Viewers">Drag-and-Drop in File Viewers</A></H3>
<P>The default file viewers in Windows allow the user to drag a file from the desktop or Explorer and drop the file on a file viewer's window. A file viewer should show the small document icon that includes the &#043; sign when the mouse is over the file viewer's window before the drop takes place. The Replace Window command in the View menu controls whether another file viewer window is displayed or the same window is reused.

<H3><A NAME="Sophisticated_File_V">Sophisticated File Viewers</A></H3>
<P>This overview only describes the minimal file viewer user interface. There are, of course, many other possibilities besides just rudimentary printing and viewing capabilities. One useful feature is the ability to copy data from a document either to the clipboard or in a drag-and-drop operation. In such cases, the file viewer needs to provide the ability to select data in the file, a Copy command (on an Edit menu as well as in a context menu), and the ability to pick up the selection and drag it elsewhere. However, the file viewer should not be a drop target and should not support the Cut and Paste commands on the Edit menu (or other variants) because those operations modify the file. 

<P>If the parent application creating the files that are handled in a specific file viewer is an OLE compound document container, the file viewer itself must be sensitive to viewing a compound document. That means that the file viewer itself will support some minimal container features and will, of course, use OLE to load and display compound document objects in the file itself. If the file viewer also supports in-place activation, it can activate inside-out objects in-place to allow the user to select and copy data from embedded objects.


<!--*************************************************************-->
<!--CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
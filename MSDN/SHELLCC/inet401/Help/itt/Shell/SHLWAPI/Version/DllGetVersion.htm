<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DllGetVersion</TITLE>

<META NAME=MS-HKWD CONTENT="DllGetVersion">
<META NAME="Keywords" CONTENT="Internet Tools & Technologies, Windows Shell API">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT, Mac">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">

<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="DllGetVersion"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="DllGetVersion"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../../../art/headbard.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="DllGetVersion"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR>
<TR><TD><PRE><IMG SRC="../../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="../SHLWAPI.htm#ch_shell_LWAPI">Topic Contents</A></PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="Version.htm">DLL Versioning</A>
<IMG SRC="../../../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="DLLGETVERSIONPROC.htm">DLLGETVERSIONPROC</A></PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>DllGetVersion</H1>
<BR CLEAR=ALL>
<PRE>HRESULT CALLBACK DllGetVersion(
    DLLVERSIONINFO *pdvi
);
</PRE>
<P>Implemented by many of the Windows shell DLLs to provide a method for obtaining DLL-specific version information. This function is not an API, but it is exported by name from the DLL. 
<P>To call this function, use the
<object id="hhal_3" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_3.Click()>LoadLibrary</A> and
<object id="hhal_4" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_4.Click()>GetProcAddress</A> functions to obtain the function pointer. The <A HREF="DLLGETVERSIONPROC.htm#DLLGETVERSIONPROC">DLLGETVERSIONPROC</A> type is used as the data type for the function pointer. For more information, see the comments at the end of this reference.
<UL><LI>Returns NOERROR if successful, or an OLE-defined error value otherwise.
</UL>
<DL><DT><I>pdvi</I>
 </DT><DD>Address of a <A HREF="DLLVERSIONINFO.htm#DLLVERSIONINFO">DLLVERSIONINFO</A> structure that receives the version information. The <B>cbSize</B> member must be filled in before calling the function.
</DD></DL>
<P>Because different DLLs implement this function, it is necessary to call
<object id="hhal_5" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_5.Click()>LoadLibrary</A> to obtain the instance handle to the DLL and then call
<object id="hhal_6" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_6.Click()>GetProcAddress</A> to obtain the function pointer. The following example shows a function that will attempt to use <B>DllGetVersion</B> for the supplied DLL and display the version information in a message box: 

<PRE>void GetDllVersion(LPCTSTR lpszDllName)
{
HINSTANCE   hinstDll;
TCHAR       szText[MAX_PATH] = TEXT("Could not load DLL");

//Load the DLL.
hinstDll = LoadLibrary(lpszDllName);

if(hinstDll)
   {
   DLLGETVERSIONPROC pDllGetVersion;
   
   /*
   You must get this function explicitly because the DLL might not implement 
   the function. Depending upon the DLL, the lack of implementation of the 
   function may be a version marker in itself.
   */
   pDllGetVersion = (DLLGETVERSIONPROC)GetProcAddress(   hinstDll, 
                                                         TEXT("DllGetVersion"));
   
   if(pDllGetVersion)
      {
      DLLVERSIONINFO    dvi;
      HRESULT           hr;
      
      ZeroMemory(&amp;dvi, sizeof(dvi));
      dvi.cbSize = sizeof(dvi);
   
      hr = (*pDllGetVersion)(&amp;dvi);
      
      if(SUCCEEDED(hr))
         {
         wsprintf(   szText, 
                     TEXT("DLL Version = %d.%02d\nBuild# = %d\n"), 
                     dvi.dwMajorVersion, 
                     dvi.dwMinorVersion, 
                     dvi.dwBuildNumber);

         switch(dvi.dwPlatformID)
            {
            case DLLVER_PLATFORM_WINDOWS:
               lstrcat(szText, TEXT("Platform is Windows"));
               break;

            case DLLVER_PLATFORM_NT:
               lstrcat(szText, TEXT("Platform is Windows NT"));
               break;
            
            default:
               lstrcat(szText, TEXT("Platform is not defined"));
               break;
            }
         }
      else
         {
         lstrcpy( szText, 
                  TEXT("DllGetVersion Failed - Cannot determine DLL version."));
         }   
      }
   else
      {
      //If GetProcAddress failed, the DLL does not implement DllGetVersion.
      lstrcpy( szText, 
               TEXT("GetProcAddress Failed - The DLL does not implement DllGetVersion."));
      }
   
   FreeLibrary(hinstDll);
   }
else
   {
   lstrcpy(szText, TEXT("Could not load the DLL"));
   }

MessageBox(NULL, szText, lpszDllName, MB_OK | MB_ICONINFORMATION);
}
</PRE>
<P>Currently, most of the Windows shell DLLs implement <B>DllGetVersion</B>. These include, but are not limited to, Shell32.dll, Comctl32.dll, Shdocvw.dll, and Shlwapi.dll. 
<!-- ************************************************** -->
<!--CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Dragging and Dropping</TITLE>

<META NAME=MS-HKWD CONTENT="Dragging and Dropping">
<META NAME="Keywords" CONTENT="Internet Tools & Technologies, Windows Shell API">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT, Mac">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">

<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="ch_dragdrop"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Dragging and Dropping"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../art/headbard.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Dragging and Dropping"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR>
<TR><TD><PRE><IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="Shell.htm#book_shell">Topic Contents</A></PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="Debugging.htm">Debugging With the Shell</A>
<IMG SRC="../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="FileMan.htm">File Manager Extensions</A></PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>Dragging and Dropping</H1>
<BR CLEAR=ALL>
<P>This overview explains the general concepts that you need to know to allow your applications to support drag-and-drop capabilities. It also lists the basic steps for implementing drag-and-drop support. 
<P><A CLASS=tctop HREF="DragDrop.htm#About_Dragging_and_D"><IMG SRC="../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">About Dragging and Dropping</A><BR>
<!--*************************************************************--><H2><A NAME="About_Dragging_and_D">About Dragging and Dropping</A></H2>
<P>A Microsoft&#174; Win32&#174;-based application should fully support the source and target drag-and-drop capabilities provided by OLE. One of the most attractive features of drag-and-drop in OLE is that the code that handles the actual data transfer&#151;your implementation of the
<object id="hhal_3" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_3.Click()>IDataObject</A> interface&#151;is reusable. You will be able to use the same code to implement cut-and-paste operations. OLE separates what the user does to cause the data transfer from how your application actually transfers the data. This allows you to use the same back-end <B>IDataObject</B> interface for the various ways a user can decide to transfer data. 

<H3><A NAME="General_OLE_Concepts">General OLE Concepts</A></H3>
<P>One of the most useful features of OLE is that it is completely modular. It is designed so that each component can exist, for the most part, on its own. For example, you can add drag-and-drop support to your application without adding in-place activation, automation, or compound storage.

<P>Even if your application only uses a small part of OLE, the Component Object Model (COM) enables other applications to know your application's OLE capabilities. COM is the fundamental, underlying model that OLE is based upon; all OLE objects are also COM objects.

<P>COM stipulates that any COM object must control its own life span and be able to tell other objects about its capabilities when queried. To control its life span, a COM object maintains a reference count. Capabilities are grouped into logical sets called interfaces; each interface is a set of member functions necessary to support a certain capability. COM objects must use the
<object id="hhal_4" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_4.Click()>IUnknown</A> interface to respond to queries and maintain a reference count. Because all OLE interfaces are derived from <B>IUnknown</B>, they are COM objects. This interface has three member functions: <B>QueryInterface</B>, <B>AddRef</B>, and <B>Release</B>. 

<P>An object uses <B>QueryInterface</B> to tell other objects about its capabilities. If the object implements the requested interface, it returns a pointer to the interface. If it does not implement it, the object returns the E_NOTIMPL error value stating that the object does not support the requested interface. <B>AddRef</B> and <B>Release</B> are used to control the object's life span. <B>AddRef</B> is called when another object holds a pointer to the object, and <B>Release</B> is called when the pointer is no longer needed. If a call to <B>Release</B> causes the object's reference count to go to zero, the object can safely delete itself. 

<P>COM provides a couple of immediate benefits:
<UL><LI>An object can determine in advance if another object supports a certain feature. If the feature is not supported, the calling object can react accordingly. 
<LI>Objects do not remain in memory for more time (or less time) than necessary, and they do not rely on the user to launch or close them.
</UL>
<H3><A NAME="Drag_and_Drop_in_OLE">Drag-and-Drop in OLE</A></H3>
<P>Every drag-and-drop operation involves two objects: a source and a target. The source object contains the data to be dragged, and the target object accepts the dragged data. 

<P>You can also use OLE drag-and-drop to add drag-and-drop support within your own application. There is nothing to prevent your application from being both a drop source and a drop target or from accepting dropped objects from itself. 

<P>The OLE data transfer mechanism is a crucial element of drag-and-drop support. This mechanism allows objects to be very specific about the data that they transfer. Instead of simply being able to transfer a bitmap, an object can now transfer a bitmap of the object's contents rendered for a printer device and stored in a stream to be released by OLE.
<P>To accomplish this, OLE uses the
<object id="hhal_5" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_5.Click()>IDataObject</A> interface and the
<object id="hhal_6" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_6.Click()>FORMATETC</A> and
<object id="hhal_7" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_7.Click()>STGMEDIUM</A> structures. Applications implement <B>IDataObject</B> to accomplish all data transfers in OLE; it includes member functions that set and retrieve an object's data, enumerate the available data formats, and receive data change notifications. <B>FORMATETC</B> and <B>STGMEDIUM</B> provide details about the data that is being transferred&#151;including the target device, aspect, storage medium, and release method. 

<H4><A NAME="Adding_drop_source_c">Adding drop source capabilities</A></H4>
<P>To enable your application to become the source of a drag-and-drop operation, follow these steps:
<OL><LI>Initialize the OLE libraries. Any application that uses the OLE libraries must check the version of the libraries and call the
<object id="hhal_8" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_8.Click()>OleInitialize</A> function during this process. <B>OleInitialize</B> must be called before you call any other OLE functions. Make sure the system's OLE libraries are at least as recent as the ones for which the application was written. Because each call to <B>OleInitialize</B> must have a matching call to the
<object id="hhal_9" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_9.Click()>OleUninitialize</A> function, you should maintain an <I>fOleInitialized</I> flag so that you will know whether to call <B>OleUninitialize</B> when your application exits.
<P>
<LI>Implement the
<object id="hhal_10" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_10.Click()>IDropSource</A> interface. Not including the member functions that it inherits from
<object id="hhal_11" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_11.Click()>IUnknown</A>, <B>IDropSource</B> has only two member functions:
<object id="hhal_12" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_12.Click()>IDropSource::QueryContinueDrag</A> and
<object id="hhal_13" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_13.Click()>IDropSource::GiveFeedback</A>. OLE calls <B>QueryContinueDrag</B> intermittently during the drag operation. Its parameters include the state of the keyboard, which the drop source uses to control the drag operation. The drop source returns the S_OK value to continue dragging, the DRAGDROP_CANCEL value to cancel dragging, or the DRAGDROP_DROP value to drop the object. OLE calls <B>GiveFeedback</B> to tell the drop source to update the cursor and ask the source window for visual feedback about what would happen if the user dropped at the current point. OLE will update to its default cursors if the DRAGDROP_S_USEDEFAULTCURSORS value is returned. 
<P>
<LI>Implement the
<object id="hhal_14" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_14.Click()>IDataObject</A> interface, which is used by OLE applications to transfer data. In a drag-and-drop operation, the drop source gives OLE a pointer to its <B>IDataObject</B> implementation. OLE saves the pointer and passes it to the drop target when the cursor first enters the target window and when the drop occurs. Fortunately, you only need to implement the following <B>IDataObject</B> member functions for drag-and-drop support:
<object id="hhal_15" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_15.Click()>IDataObject::GetData</A>,
<object id="hhal_16" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_16.Click()>IDataObject::GetDataHere</A>,
<object id="hhal_17" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_17.Click()>IDataObject::QueryGetData</A>, and
<object id="hhal_18" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_18.Click()>IDataObject::EnumFormatEtc</A>. 
<P>
<LI>Call the
<object id="hhal_19" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_19.Click()>DoDragDrop</A> function to begin the drag operation. After you have detected that the user wants to drag something, you should call this function. OLE uses the
<object id="hhal_20" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_20.Click()>IDataObject</A> and
<object id="hhal_21" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_21.Click()>IDropSource</A> pointers that are passed in, along with its list of registered drop targets, to control the drag operation. When the drag operation is complete, <B>DoDragDrop</B> returns either the DRAGDROP_S_DROP or DRAGDROP_S_CANCEL value. In addition, OLE returns a DWORD in the address pointed to by the <I>pdwEffect</I> parameter that tells how the drop should affect the source data&#151;that is, whether the operation was a move, copy, link, or scroll. You should look at the <I>pdwEffect</I> value and modify the source data as necessary.
<P>
<LI>Call
<object id="hhal_22" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_22.Click()>OleUninitialize</A>. Before an OLE application exits, it must call this function to release the OLE libraries. You should check your <I>fOleInitialized</I> flag before calling <B>OleUninitialize</B>. It should only be called if
<object id="hhal_23" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_23.Click()>OleInitialize</A> returned successfully.
</OL>
<H4><A NAME="Adding_drop_target_c">Adding drop target capabilities</A></H4>
<P>To enable your application to become a drop target, follow these steps:
<OL><LI>Initialize the OLE libraries. You should check the build version and call the
<object id="hhal_24" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_24.Click()>OleInitialize</A> function exactly as you would for a drop source.
<P>
<LI>Call the
<object id="hhal_25" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_25.Click()>RegisterDragDrop</A> function. OLE keeps a list of the windows that are drop targets. Every window that accepts dropped objects must register itself and its
<object id="hhal_26" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_26.Click()>IDropTarget</A> interface pointer. Then when the user drags the object over a drop target window, OLE has the <B>IDropTarget</B> pointer handy.
<P>
<LI>Implement the
<object id="hhal_27" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_27.Click()>IDropTarget</A> interface. OLE uses the <B>IDropTarget</B> pointer that you registered with <B>RegisterDragDrop</B> to keep you informed of the state of a drop operation. When the cursor first enters a registered drop target window, OLE calls the
<object id="hhal_28" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_28.Click()>IDropTarget::DragEnter</A> member function. In this member function, you should ensure that your application can create the dragged object if it is dropped. Your application may also display visual feedback showing where the dropped object will appear, if appropriate. 
<P>When the cursor moves around inside a drop target window, OLE calls the
<object id="hhal_29" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_29.Click()>IDropTarget::DragOver</A> member function, just as Microsoft Windows&#174; 95 sends WM_MOUSEMOVE messages. Here you should update any visual feedback that your application displays to reflect the current cursor position. 
<P>When the cursor leaves a drop target window, OLE calls the
<object id="hhal_30" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_30.Click()>IDropTarget::DragLeave</A> member function. In <B>DragLeave</B> you should remove any feedback you displayed during <B>DragOver</B> or <B>DragEnter</B>. OLE calls your
<object id="hhal_31" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_31.Click()>IDropTarget::Drop</A> member function when the user drops the object. To be precise, a drop occurs when the drop source returns the DRAGDROP_DROP value from the
<object id="hhal_32" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_32.Click()>IDropSource::QueryContinueDrag</A> member function. In the <B>Drop</B> member function, you should create an appropriate object from
<object id="hhal_33" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_33.Click()>IDataObject</A> that is passed as a parameter. The following example shows how to implement <B>IDropTarget::Drop</B>.
<PRE>STDMETHODIMP CDropTarget::Drop (LPDATAOBJECT pDataObj, 
    DWORD grfKeyState, POINTL pointl, LPDWORD pdwEffect) 
{ 
    FORMATETC fmtetc; 
    SCODE sc = S_OK; 
 
    UndrawDragFeedback(); // removes any visual feedback 
 
    // QueryDrop returns TRUE if the app. can accept a drop based on 
    // the current key state, requested action, and cursor position. 
    if (pDataObj &amp;&amp; QueryDrop(grfKeyState,pointl,FALSE,pdwEffect)) { 
        m_pDoc-&gt;m_lpSite = CSimpleSite::Create(m_pDoc); 
        m_pDoc-&gt;m_lpSite-&gt;m_dwDrawAspect = DVASPECT_CONTENT; 
 
        // Initialize the FORMATETC structure. 
        fmtetc.cfFormat = NULL; 
        fmtetc.ptd = NULL; 
        fmtetc.lindex = -1; 
        fmtetc.dwAspect = DVASPECT_CONTENT; // draws object's content 
        fmtetc.tymed = TYMED_NULL; 
        HRESULT hrErr = OleCreateFromData 
            (pDataObj,IID_IOleObject,OLERENDER_DRAW, 
            &#009;&amp;fmtetc, &amp;m_pDoc-&gt;m_lpSite-&gt;m_OleClientSite, 
            m_pDoc-&gt;m_lpSite-&gt;m_lpObjStorage, 
            (LPVOID FAR *)&amp;m_pDoc-&gt;m_lpSite-&gt;m_lpOleObject); 
        if (hrErr == NOERROR) 
            // The object was created successfully. 
        else 
            // The object creation failed. 
            sc = GetScode(hrErr); 
    } 
    return ResultFromScode(sc); 
} 
 </PRE>
<P>
<LI>Call the
<object id="hhal_34" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_34.Click()>RevokeDragDrop</A> function. Before a drop target window is destroyed, it must call this function to allow OLE to remove the window from its list of drop targets.
<P>
<LI>Uninitialize the OLE libraries. Like a drop source, your application needs to uninitialize the OLE libraries before terminating.
</OL>
<H3><A NAME="Scrap_Files">Scrap Files</A></H3>
<P>Windows allows the user to transfer objects within a data file to the desktop or a folder. The result of the transfer operation is a file icon called a scrap. An OLE application automatically supports the creation of scrap files if its
<object id="hhal_35" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_35.Click()>IDataObject</A> interface supports enough data formats so that the drop target can create either an embedding or a shortcut object. You do not need to add any other functionality to your application to allow the user to create a scrap file. However, there are three optional features you may wish to add to your application: round-trip support, caching additional data formats in a scrap file, and delay-rendered formats. 

<H4><A NAME="Round_trip_support">Round-trip support</A></H4>
<P>Round-trip support allows an object to be dragged out of a document and into a new container and then dragged from the new container back into the original document. When the user transfers a scrap into your application, it should integrate the scrap as if it were being transferred from its original source. For example, if a selected range of cells from a spreadsheet is transferred to the desktop, the cells become a scrap. If the user transfers the resulting scrap into a word processing document, the cells should be incorporated as if they were transferred directly from the spreadsheet. Similarly, if the user transfers the scrap back into the spreadsheet, the cells should be integrated as if they were originally transferred within that spreadsheet.

<P>Your application must include code that integrates a scrap into a document; otherwise, the embedding object of the scrap is copied into the document rather than the data associated with the scrap. To retrieve the data for the scrap, your application must examine the class identifier (CLSID) of the scrap object by retrieving the CF_OBJECTEDESCRIPTOR file format data. If the application recognizes the CLSID, the application should transfer the native data into the document rather than calling the
<object id="hhal_36" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_36.Click()>OleCreateFromData</A> function. 

<H4><A NAME="Caching_additional_d">Caching additional data formats</A></H4>
<P>When an
<object id="hhal_37" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_37.Click()>IDataObject</A> interface object is dropped onto a file system folder, such as the desktop, the shell receives the CLSID of the object and looks for the list of clipboard formats to be cached in the scrap file. The list is located in the following registry location:

<PRE>HKEY_CLASSES_ROOT\CLSID\{clsid of object}\DataFormats\PriorityCacheFormats  
</PRE>
<P>The clipboard formats should be added to the registry as the names of named values (the value should be empty). The additional formats give the user more choices when copying the scrap file and opening the Paste Special dialog box from another application. You should choose only useful formats to keep the scrap file from becoming too large. For example, MSPaint scrap-caches the CF_BITMAP format and WordPad scrap-caches the RTF format as shown in the examples below. 
<PRE>HKEY_CLASSES_ROOT\CLSID\{D3E34B21-9D75-101A-8C3D-00AA001A1652}\DataFormats\PriorityCacheFormats,"#8",,"" 
 
HKEY_CLASSES_ROOT\CLSID\{73FDDC80-AEA9-101A-98A7-00AA00374959}\DataFormats\PriorityCacheFormats,"Rich Text Format",,"" 
 
</PRE>
<H4><A NAME="Delay_rendered_forma">Delay-rendered formats</A></H4>
<P>Certain data formats can specify that data will be rendered at a time later than when the data transfer normally occurs. These are called delay-rendered formats. The list of clipboard formats to be delay-rendered is specified under the HKEY_CLASSES_ROOT\CLSID\{<I>clsid</I>}\DataFormats\PriorityCacheFormats key. The
<object id="hhal_38" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_38.Click()>IDataObject</A> of a scrap object with this CLSID will offer these formats in addition to the native data and cached data. When the drop target requests one of these formats, the shell runs the application and renders the format from the active object. However, you should avoid using this mechanism because it does not work if the server is not available or if the application is not an OLE application. 

<H3><A NAME="Clipboard_Formats_fo">Clipboard Formats for Shell Data Transfers</A></H3>
<P>Windows allows the user to transfer data objects between applications and the shell. The user can transfer data objects, such as printers, files, shortcuts, and folders, either by dragging and dropping them or by using the Cut, Copy, and Paste menu commands. All transfer methods involve the clipboard.

<P>Windows defines several clipboard formats that you can support to transfer objects between your application and the shell. The Windows header files do not include predefined clipboard format identifiers for these clipboard formats. Instead, they provide a set of clipboard format names and corresponding identifiers. To obtain an identifier for a clipboard format, you simply pass the format's identifier to the
<object id="hhal_39" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_39.Click()>RegisterClipboardFormat</A> function. The following list contains the clipboard format names and their corresponding identifiers.
<TABLE>
<TR><TD><B>Format name
 </B></TD><TD><B>Identifier</B></TD></TR>
<TR><TD>"FileContents" </TD><TD>CFSTR_FILECONTENTS</TD></TR>
<TR><TD>"FileGroupDescriptor" </TD><TD>CFSTR_FILEDESCRIPTOR</TD></TR>
<TR><TD>"FileName" </TD><TD>CFSTR_FILENAME</TD></TR>
<TR><TD>"FileNameMap" </TD><TD>CFSTR_FILENAMEMAP</TD></TR>
<TR><TD>"InShellDragLoop" </TD><TD>CFSTR_INDRAGLOOP</TD></TR>
<TR><TD>"Net Resource" </TD><TD>CFSTR_NETRESOURCES</TD></TR>
<TR><TD>"Paste Succeeded" </TD><TD>CFSTR_PASTESUCCEEDED</TD></TR>
<TR><TD>"Performed DropEffect" </TD><TD>CFSTR_PERFORMEDDROPEFFECT</TD></TR>
<TR><TD>"Preferred DropEffect" </TD><TD>CFSTR_PREFERREDDROPEFFECT</TD></TR>
<TR><TD>"PrinterFriendlyName" </TD><TD>CFSTR_PRINTERGROUP</TD></TR>
<TR><TD>"Shell IDList Array" </TD><TD>CFSTR_SHELLIDLIST</TD></TR>
<TR><TD>"Shell Object Offsets" </TD><TD>CFSTR_SHELLIDLISTOFFSET</TD></TR>
<TR><TD>"UniformResourceLocator" </TD><TD>CFSTR_SHELLURL</TD></TR>
</TABLE>
<P>The following sections describe the clipboard formats used to transfer data between applications and the shell.

<H4><A NAME="CF_HDROP_format">CF_HDROP format</A></H4>
<P>The global memory object contains a <A HREF="structures/DROPFILES.htm#DROPFILES">DROPFILES</A> structure. If the object was copied to the clipboard as part of a drag-and-drop operation, the <B>pt</B> member of <B>DROPFILES</B> includes the coordinates of the point where the drop occurred. The <B>pFiles</B> member is the offset to a double null-terminated list of file names. An application can retrieve information from the data object by passing the object's handle to the <A HREF="functions/DragQueryFile.htm#DragQueryFile">DragQueryFile</A> and <A HREF="functions/DragQueryPoint.htm#DragQueryPoint">DragQueryPoint</A> functions. 

<H4><A NAME="_FileContents__forma">&quot;FileContents&quot; format</A></H4>
<P>The data object contains the contents of one or more files in a format that can be written to a file. When a group of files is being transferred, the target of the drag-and-drop operation can use the <B>lindex</B> member of the
<object id="hhal_40" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_40.Click()>FORMATETC</A> structure to indicate which file to retrieve. The names and attributes of each file are contained in the "FileGroupDescriptor" data.

<H4><A NAME="_FileGroupDescriptor">&quot;FileGroupDescriptor&quot; format</A></H4>
<P>The data object contains the file names and attributes of a group of files being transferred during an OLE style drag-and-drop operation. The data object consists of a <A HREF="structures/FILEGROUPDESCRIPTOR.htm#FILEGROUPDESCRIPTOR">FILEGROUPDESCRIPTOR</A> structure and any number of <A HREF="structures/FILEDESCRIPTOR.htm#FILEDESCRIPTOR">FILEDESCRIPTOR</A> structures (one for each file in the group).

<H4><A NAME="_FileName__format">&quot;FileName&quot; format</A></H4>
<P>The global memory object contains a single null-terminated and fully qualified file name. This format is supported for compatibility with applications written for Windows version 3.1. New applications should support the CF_HDROP clipboard format instead of the "FileName" format. 

<H4><A NAME="_FileNameMap__format">&quot;FileNameMap&quot; format</A></H4>
<P>The "FileNameMap" format is used with the CF_HDROP clipboard format to rename a list of files that are copied to a new location during a copy and paste operation or a drag-and-drop operation. Data in the "FileNameMap" format consist of a double null-terminated list of file names; each corresponds to the file names in the CF_HDROP data. When the files listed in the CF_HDROP data are copied to the new location, the files receive the new names specified in the "FileNameMap" data. For example, if the CF_HDROP data contains two files with the names c:\temp.000 and c:\temp.001, the "FileNameMap" data contains the following list of file names.
<PRE>"new.txt\0another.txt\0\0" 
 
</PRE>
<P>If the files are copied to c:\target, they receive the following names:
<PRE>c:\target\new.txt(was c:\temp.000) 
c:\target\another.txt(was c:\temp.001) 
 
</PRE>
<P>The system stores files in the recycle bin using a coding system for the file names (dcxxxx.ext). When the user drags or copies files from the recycle bin, the system uses the file names specified in the "FileNameMap" format to rename the files.

<H4><A NAME="_InShellDragLoop__fo">&quot;InShellDragLoop&quot; format</A></H4>
<P>The global memory object contains a DWORD value that indicates if the data object is inside of a drag-and-drop loop. If this value is nonzero, the data object is inside of a drag-and-drop loop. If this value is zero, the data object is not inside of a drag-and-drop loop. This allows a data object implementation to avoid performing time-consuming rendering of data while the user is dragging the object. It also allows the data object to know when the object is actually dropped so that the full data can be rendered. 

<H4><A NAME="_Paste_Succeeded__fo">&quot;Paste Succeeded&quot; format</A></H4>
<P>The global memory object contains a DWORD value that indicates that the drop target's delete-on-paste operation succeeded. This allows the drop target to specify the DROPEFFECT_ flag that was actually performed. The drop target calls
<object id="hhal_41" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_41.Click()>IDataObject::SetData</A> to set this value when the operation is complete.

<H4><A NAME="_Performed_DropEffec">&quot;Performed DropEffect&quot; format</A></H4>
<P>The global memory object contains a DWORD value that represents the drop target's performed drop effect. This allows the drop target to specify the DROPEFFECT_ flag that was actually performed. In the case of an optimized move operation, the target can complete the move, including deletion of the source object, and set this clipboard format to DROPEFFECT_MOVE so that the source does not attempt to delete the source object. The drop target calls
<object id="hhal_42" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_42.Click()>IDataObject::SetData</A> to set this value when the operation is complete.

<H4><A NAME="_Preferred_DropEffec">&quot;Preferred DropEffect&quot; format</A></H4>
<P>The global memory object contains a DWORD value that represents the drop source's preferred drop effect. This allows the drop source to specify which of the DROPEFFECT_ flags passed to
<object id="hhal_43" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_43.Click()>DoDragDrop</A> is the default drop action.

<H4><A NAME="_PrinterFriendlyName">&quot;PrinterFriendlyName&quot; format</A></H4>
<P>This format is similar to the CF_HDROP format, except that the <B>pFiles</B> member of the <A HREF="structures/DROPFILES.htm#DROPFILES">DROPFILES</A> structure is the address of a double null-terminated list of printer-friendly names. 

<H4><A NAME="_Shell_IDList_Array_">&quot;Shell IDList Array&quot; format</A></H4>
<P>The global memory object contains an array of item identifier lists. The memory object consists of a <A HREF="structures/CIDA.htm#CIDA">CIDA</A> structure that contains offsets to any number of item identifier lists (<A HREF="structures/ITEMIDLIST.htm#ITEMIDLIST">ITEMIDLIST</A> structures). The first structure in the array corresponds to a folder, and subsequent structures correspond to file objects within the folder. If the <B>ITEMIDLIST</B> for the folder is empty (mkid.cb is 0), the parent folder is the desktop itself. 

<H4><A NAME="_Shell_Object_Offset">&quot;Shell Object Offsets&quot; format</A></H4>
<P>The global memory object contains an array of
<object id="hhal_44" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_44.Click()>POINT</A> structures. The first structure specifies the screen coordinates of a group of shell objects, and the remaining structures specify the relative offsets of each item in the group. All coordinates are in pixels. 

<H4><A NAME="_Net_Resource__forma">&quot;Net Resource&quot; format</A></H4>
<P>The global memory object contains a list of network resources. The memory object consists of an <A HREF="structures/NRESARRAY.htm#NRESARRAY">NRESARRAY</A> structure and any number of
<object id="hhal_45" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_45.Click()>NETRESOURCE</A> structures (one for each network resource in the list). Note that the string parameters (LPSTR types) in the <B>NETRESOURCE</B> structure contain offsets instead of addresses. 

<H4><A NAME="_UniformResourceLoca">&quot;UniformResourceLocator&quot; format</A></H4>
<P>The global memory object contains a single null-terminated string that contains a Uniform Resource Locator (URL) address.



<!--*************************************************************-->
<!--CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
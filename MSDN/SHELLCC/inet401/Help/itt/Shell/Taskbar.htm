<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Taskbar</TITLE>

<META NAME=MS-HKWD CONTENT="Taskbar">
<META NAME="Keywords" CONTENT="Internet Tools & Technologies, Windows Shell API">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT, Mac">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">

<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="ch_tbnotify"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Taskbar"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../art/headbard.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Taskbar"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR>
<TR><TD><PRE><IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="Shell.htm#book_shell">Topic Contents</A></PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="shlwapi/version/DLLVERSIONINFO.htm">DLLVERSIONINFO</A>
<IMG SRC="../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="RefList.htm">Shell Reference</A></PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>Taskbar</H1>
<BR CLEAR=ALL>
<P>The Microsoft&#174; Windows&#174; interface includes a special application desktop toolbar called the <I>taskbar</I>. The taskbar can be used for such tasks as switching between open windows and starting new applications.
<P>The taskbar is also known as an <I>appbar</I>. For more information on appbars, see <A HREF="AppBars.htm#ch_appbar">Application Desktop Toolbars</A>.
<P><A CLASS=tctop HREF="Taskbar.htm#tbnotify_About"><IMG SRC="../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">About the Taskbar</A><BR>
<P><A CLASS=tctop HREF="Taskbar.htm#tbnotify_Using"><IMG SRC="../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Using the Taskbar</A><BR>
<!--*************************************************************--><H2><A NAME="tbnotify_About">About the Taskbar</A></H2>
<P>The taskbar includes the Start menu, taskbar buttons, a shortcut menu, and a status area.

<P>The Start menu contains commands that can be used to access programs, documents, and settings. These commands include Programs, Documents, Settings, Find, Help, Run, and Shut Down.

<P>A button is placed on the taskbar whenever an application creates a window that isn't owned. To switch to a window, the user simply clicks its window button. 

<P>To open the shortcut menu, the user clicks the taskbar with the right mouse button. The shortcut menu includes commands to cascade windows, tile windows, minimize all windows, and set taskbar properties. 

<P>Applications can put icons in the status area to indicate the status of an operation or to notify the user about an event. For example, an application might put a printer icon in the status area to show that a print job is underway. The status area is at the right end of the taskbar (if the taskbar is horizontal) or at the bottom (if the taskbar is vertical). The status area will also contain the current time if the Show Clock check box is selected in the taskbar properties.


<H3><A NAME="tbnotify_Taskbar_Display_Options">Taskbar Display Options</A></H3>
<P>The taskbar supports two display options: Auto Hide and Always on Top. To set these options, open the taskbar shortcut menu, click Properties, and select or clear the Auto Hide check box or the Always on Top check box. To retrieve the state of these display options, use the ABM_GETSTATE message. If you would like to be notified when the state of these display options changes, process the ABN_STATECHANGE notification message in your window procedure.

<P>The work area is the portion of the screen not obscured by the taskbar. To retrieve the size of the work area, call the
<object id="hhal_3" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_3.Click()>SystemParametersInfo</A> function with the SPI_GETWORKAREA value set. To retrieve the rectangle coordinates that describe the location of the taskbar, use the <A HREF="functions/SHAppBarMessage.htm#SHAppBarMessage">ABM_GETTASKBARPOS</A> message.


<H3><A NAME="Adding_Shortcuts_to_">Adding Shortcuts to the Start Menu</A></H3>
<P>Applications can use the shell dynamic data exchange interface to add items to the Programs submenu of the Start menu, just as they would use it to add items to a group in Program Manager in earlier versions of Windows. However, this is not the recommended method to use with the Microsoft&#174; Windows NT&#174; version 4.0 and Windows 95 operating systems.

<P>To add an item to the Programs submenu, follow these steps:

<UL><LI>Create a shell link using the <A HREF="ifaces/ishelllink/IShellLink.htm#shell_ishelllink">IShellLink</A> interface. 
<LI>Obtain the location of the Programs folder using <A HREF="functions/SHGetSpecialFolderLocation.htm#SHGetSpecialFolderLocation">SHGetSpecialFolderLocation</A>, passing CSIDL_PROGRAMS.
<LI>Add the shell link to the Programs folder. You can also create a folder in the Programs folder and add the link to that folder.
</UL>
<H3><A NAME="Visibility_of_Taskba">Visibility of Taskbar Buttons</A></H3>
<P>The shell creates a button on the taskbar whenever an application creates a window that isn't owned. To ensure that the window button is placed on the taskbar, create an unowned window with the WS_EX_APPWINDOW extended style. To prevent the window button from being placed on the taskbar, create the unowned window with the WS_EX_TOOLWINDOW extended style. As an alternative, you can create a hidden window and make this hidden window the owner of your visible window.

<P>The window button typically contains the application icon and title. However, if the application does not contain a system menu, the window button is created without the icon. 

<P>If you want your application to display a message to the user while its window is not active, use the
<object id="hhal_4" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_4.Click()>FlashWindow</A> function to let the user know that a message is waiting. This function flashes the window button. Once the user clicks the window button to activate the window, your application can display the message.


 
<H3><A NAME="tbnotify_taskbarlist">Modifying the Contents of the Taskbar</A></H3>
<P>Microsoft&#174; Internet Explorer 4.0 adds the capability to modify the contents of the taskbar. From an application, you can now add, remove, and activate taskbar items. Activating the item does not activate the window; it simply shows the item as pressed on the taskbar.

<P>The taskbar modification capabilities are implemented in an OLE COM object. This object is created by calling
<object id="hhal_5" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_5.Click()>CoCreateInstance</A> with CLSID_TaskbarList. The interface you request for this object is IID_ITaskbarList. This will create the object and return you an <A HREF="ifaces/itaskbarlist/ITaskbarList.htm#shell_itaskbarlist">ITaskbarList</A> interface pointer. You must then call the object's <A HREF="ifaces/itaskbarlist/HrInit.htm#ITaskbarList__HrInit">ITaskbarList::HrInit</A> method to initialize the object. If <A HREF="ifaces/itaskbarlist/HrInit.htm#ITaskbarList__HrInit">HrInit</A> succeeds, you can use the methods of the <B>ITaskbarList</B> interface to modify the contents of the taskbar.


<H3><A NAME="tbnotify_Working_Status_Area">Working with the Status Area</A></H3>
<P>Applications use the <A HREF="functions/Shell_NotifyIcon.htm#Shell_NotifyIcon">Shell_NotifyIcon</A> function to put icons in the status area of the taskbar to serve as status indicators. You should allow the user to obtain additional information by moving the mouse over the icon, clicking the icon, clicking the icon with the right mouse button, and double-clicking the icon. The system notifies you of this mouse movement. The information the user can receive can be summarized as follows:
<UL><LI>When the user moves the mouse over the icon, the system will display the tooltip that you provided when you added the icon.
<LI>When the user clicks the icon, your application should display a window with additional information.
<LI>When the user clicks the icon with the right mouse button, your application should display the shortcut menu.
<LI>When the user double-clicks the icon, your application should execute the default shortcut menu command.
</UL>
<H4><A NAME="tbnotify_Sending_Taskbar_Messages">Sending taskbar messages</A></H4>
<P>Use the <A HREF="functions/Shell_NotifyIcon.htm#Shell_NotifyIcon">Shell_NotifyIcon</A> function to send messages to add, modify, or delete icons from the status area. The parameters for <B>Shell_NotifyIcon</B> include the identifier of the message to send and the address of a <A HREF="structures/NOTIFYICONDATA.htm#NOTIFYICONDATA">NOTIFYICONDATA</A> structure. Members of this structure contain information that the system needs to process the specified message. 

<P>To add an icon to the taskbar's status area, send the NIM_ADD message. The <A HREF="structures/NOTIFYICONDATA.htm#NOTIFYICONDATA">NOTIFYICONDATA</A> structure that accompanies the message specifies the handle to the icon, the identifier of the icon, and any tooltip text for the icon. If the Show Clock check box (in the taskbar properties) is selected, the system places the icon to the immediate left of the clock. Otherwise, the icon appears on the right side or at the bottom of the taskbar. Any existing icons are shifted to the left to make room for the new icon.

<P>You can delete an icon from the status area by sending the NIM_DELETE message. You can send the NIM_MODIFY message to modify the information that the system maintains for a taskbar icon, including its icon handle, tooltip text, and callback message identifier. 

<H4><A NAME="tbnotify_Receiving_Callback_Messages">Receiving callback messages</A></H4>
<P>Each taskbar icon can have an application-defined callback message associated with it. If an icon has a callback message, the system will send the message to the application whenever a mouse event occurs within the icon. In this way, the system can notify an application whenever the user clicks or double-clicks the icon or moves the mouse cursor into the icon's bounding rectangle. 

<P>An application defines an icon's callback message when it adds the icon to the taskbar. The <B>uCallbackMessage</B> member of the <A HREF="structures/NOTIFYICONDATA.htm#NOTIFYICONDATA">NOTIFYICONDATA</A> structure included with the NIM_ADD message specifies the identifier of the callback message. When a mouse event occurs, the system sends the callback message to the window identified by the <B>hWnd</B> member. The message's <I>lParam</I> parameter is the identifier of the mouse message that the system generated as a result of the mouse event. For example, when the mouse cursor moves into a taskbar icon, the <I>lParam</I> parameter of the resulting callback message contains the WM_MOUSEMOVE identifier. The <I>wParam</I> parameter contains the identifier of the taskbar icon in which the mouse event occurred. 

 
<H3><A NAME="Taskbar_Creation_Not">Taskbar Creation Notification</A></H3>
<P>Microsoft&#174; Internet Explorer 4.0 will notify applications that the taskbar has been created. When the taskbar is created, it will register a message with the "TaskbarCreated" string and then broadcast this message to all top-level windows. When your taskbar application receives this message, it should assume that any taskbar icons it added have been removed and add them again. The following example shows a very simplified method for handling this case.

<PRE>LRESULT CALLBACK WndProc(HWND hWnd, UINT uMessage, WPARAM wParam, LPARAM lParam)
{
static UINT s_uTaskbarRestart;

switch(uMessage)
    {
    case WM_CREATE:
        s_uTaskbarRestart = RegisterWindowMessage(TEXT("TaskbarCreated"));
        break;
        
    default:
        if(uMessage == s_uTaskbarRestart)
            AddTaskbarIcons();
        break;
    }
return DefWindowProc(hWnd, uMessage, wParam, lParam);
}
</PRE>
<H2><A NAME="tbnotify_Using">Using the Taskbar</A></H2>
<P>This section includes examples that demonstrate how to add icons to the taskbar status area and how to process callback messages for taskbar icons.

<H3><A NAME="tbnotify_Adding_Deleting_Icons">Adding and Deleting Taskbar Icons</A></H3>
<P>You add an icon to the taskbar status area by filling in a <A HREF="structures/NOTIFYICONDATA.htm#NOTIFYICONDATA">NOTIFYICONDATA</A> structure and then passing the structure to <A HREF="functions/Shell_NotifyIcon.htm#Shell_NotifyIcon">Shell_NotifyIcon</A> with the NIM_ADD message. The structure members must specify the handle to the window that is adding the icon, as well as the icon identifier and icon handle. You can also specify tooltip text for the icon. If you need to receive mouse messages for the icon, specify the identifier of the callback message that the system should use to send the message to the window procedure. 

<P>The function in the following example demonstrates how to add an icon to the taskbar. 
<PRE>// MyTaskBarAddIcon - adds an icon to the taskbar status area. 
// Returns TRUE if successful, or FALSE otherwise. 
// hwnd - handle to the window to receive callback messages. 
// uID - identifier of the icon. 
// hicon - handle to the icon to add. 
// lpszTip - tooltip text. 
BOOL MyTaskBarAddIcon(HWND hwnd, UINT uID, HICON hicon, LPSTR lpszTip) 
{ 
    BOOL res; 
    NOTIFYICONDATA tnid; 
 
    tnid.cbSize = sizeof(NOTIFYICONDATA); 
    tnid.hWnd = hwnd; 
    tnid.uID = uID; 
    tnid.uFlags = NIF_MESSAGE | NIF_ICON | NIF_TIP; 
    tnid.uCallbackMessage = MYWM_NOTIFYICON; 
    tnid.hIcon = hicon; 
    if (lpszTip) 
        lstrcpyn(tnid.szTip, lpszTip, sizeof(tnid.szTip)); 
    else 
        tnid.szTip[0] = '\0'; 
 
    res = Shell_NotifyIcon(NIM_ADD, &amp;tnid); 
 
    if (hicon) 
        DestroyIcon(hicon); 
 
    return res; 
} 
</PRE>
<P>To delete an icon from the taskbar status area, fill a <A HREF="structures/NOTIFYICONDATA.htm#NOTIFYICONDATA">NOTIFYICONDATA</A> structure and send it to the system when you send an NIM_DELETE message. When deleting a taskbar icon, specify only the <B>cbSize</B>, <B>hWnd</B>, and <B>uID</B> members, as the following example shows.
<PRE>// MyTaskBarDeleteIcon - deletes an icon from the taskbar 
//     status area. 
// Returns TRUE if successful, or FALSE otherwise. 
// hwnd - handle to the window that added the icon. 
// uID - identifier of the icon to delete. 
BOOL MyTaskBarDeleteIcon(HWND hwnd, UINT uID) 
{ 
    BOOL res; 
    NOTIFYICONDATA tnid; 
 
    tnid.cbSize = sizeof(NOTIFYICONDATA); 
    tnid.hWnd = hwnd; 
    tnid.uID = uID; 
         
    res = Shell_NotifyIcon(NIM_DELETE, &amp;tnid); 
    return res; 
} 
</PRE>
<H3><A NAME="tbnotify_Receiving_Mouse_Events">Receiving Mouse Events</A></H3>
<P>If you specify a callback message for a taskbar icon, the system sends the message to your application whenever a mouse event occurs in the icon's bounding rectangle. The <I>wParam</I> parameter specifies the identifier of the taskbar icon, and the <I>lParam</I> parameter specifies the mouse message that the system generated as a result of the mouse event. 

<P>The function in the following example is from an application that adds both battery and printer icons to the taskbar. The application calls the function when it receives a callback message. The function determines whether the user has clicked one of the icons and, if a click has occurred, calls an application-defined function to display status information. 
<PRE>// On_MYWM_NOTIFYICON - processes callback messages for taskbar icons. 
// wParam - first message parameter of the callback message. 
// lParam - second message parameter of the callback message. 
void On_MYWM_NOTIFYICON(WPARAM wParam, LPARAM lParam) 
{ 
    UINT uID; 
    UINT uMouseMsg; 
 
    uID = (UINT) wParam; 
    uMouseMsg = (UINT) lParam; 
 
    if (uMouseMsg == WM_LBUTTONDOWN) { 
        switch (uID) { 
            case IDI_MYBATTERYICON: 
 
                // The user clicked the battery icon. Display the 
                // battery status. 
                ShowBatteryStatus(); 
                break; 
 
            case IDI_MYPRINTERICON: 
 
                // The user clicked the printer icon. Display the 
                // status of the print job. 
                ShowJobStatus(); 
                break; 
 
            default: 
                break; 
        } 
     } 
     return; 
 } 
</PRE>
<!--CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
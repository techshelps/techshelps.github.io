<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Control Panel Applications</TITLE>

<META NAME=MS-HKWD CONTENT="Control Panel Applications">
<META NAME="Keywords" CONTENT="Internet Tools & Technologies, Windows Shell API">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT, Mac">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">

<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="ch_conpanel"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Control Panel Applications"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../art/headbard.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Control Panel Applications"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR>
<TR><TD><PRE><IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="Shell.htm#book_shell">Topic Contents</A></PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="Briefcase.htm">Briefcase Reconcilers</A>
<IMG SRC="../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="Debugging.htm">Debugging With the Shell</A></PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>Control Panel Applications</H1>
<BR CLEAR=ALL>
<P><I>Control Panel</I> applications are special-purpose dynamic-link libraries (DLLs) that let users configure the environment of Microsoft&#174; Windows&#174;. 
<P>This section describes Control Panel applications and explains the functions and messages that these applications use and process to complete their work.

<P><A CLASS=tctop HREF="ConPanel.htm#About_Control_Panel_"><IMG SRC="../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">About Control Panel Applications</A><BR>
<P><A CLASS=tctop HREF="ConPanel.htm#Creating_Control_Pan"><IMG SRC="../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Creating Control Panel Applications</A><BR>
<!--*************************************************************--><H2><A NAME="About_Control_Panel_">About Control Panel Applications</A></H2>
<P>Though Windows provides a number of standard Control Panel applications, you can create additional applications that let users examine and modify the settings and operational modes of specific hardware and software. 

<H3><A NAME="Application_Responsi">Application Responsibilities and Operation</A></H3>
<P>The primary responsibility of any Control Panel application is to display a dialog box and to carry out any tasks specified by the user. Despite this responsibility, Control Panel applications do not provide menus or other direct means for users to access their dialog boxes. Instead, these applications operate under the control of another application and display their dialog boxes only when requested by the controlling application. 

<P>Control Panel applications are usually controlled by a Windows system utility specifically designed to give users access to these applications, such as the mouse Control Panel application. However, any application can load and manage Control Panel applications as long as the controlling application sends messages and processes return values in the way that the Control Panel applications recognize. 

<P>Most Control Panel applications display and manage a single dialog box, giving the user control of the settings and operational modes of a single system component. However, any given Control Panel application can provide any number of dialog boxes to control any number of system components. To distinguish between dialog boxes, a Control Panel application typically supplies the controlling application with a unique icon for each dialog box. The controlling application displays these icons, and the user can choose a dialog box by choosing the corresponding icon. 

<H3><A NAME="Application_Entry_Po">Application Entry-Point Function</A></H3>
<P>Every Control Panel application must export the standard entry-point function, <A HREF="functions/CPlApplet.htm#CPlApplet">CPlApplet</A>. This function receives requests in the form of Control Panel (CPL) messages and then carries out the requested work&#151;initializing the application, displaying and managing the dialog box(es), and closing the application. 

<P>When the controlling application first loads the Control Panel application, it retrieves the address of the <A HREF="functions/CPlApplet.htm#CPlApplet">CPlApplet</A> function and subsequently uses the address to call the function and pass it messages. The controlling application may send the following messages: 

<TABLE>
<TR><TD><B>Message
 </B></TD><TD><B>Description</B></TD></TR>
<TR><TD>CPL_DBLCLK </TD><TD>Sent to notify <A HREF="functions/CPlApplet.htm#CPlApplet">CPlApplet</A> that the user has chosen the icon associated with a given dialog box. <B>CPlApplet</B> should display the corresponding dialog box and carry out any user-specified tasks. </TD></TR>
<TR><TD>CPL_EXIT </TD><TD>Sent after the last CPL_STOP message and immediately before the controlling application uses the
<object id="hhal_3" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_3.Click()>FreeLibrary</A> function to free the DLL containing the Control Panel application. <A HREF="functions/CPlApplet.htm#CPlApplet">CPlApplet</A> should free any remaining memory and prepare to close.</TD></TR>
<TR><TD>CPL_GETCOUNT </TD><TD>Sent after the CPL_INIT message to prompt <A HREF="functions/CPlApplet.htm#CPlApplet">CPlApplet</A> to return a number that indicates how many dialog boxes it supports.</TD></TR>
<TR><TD>CPL_INIT </TD><TD>Sent immediately after the DLL containing the Control Panel application is loaded. The message prompts <A HREF="functions/CPlApplet.htm#CPlApplet">CPlApplet</A> to perform initialization procedures, including memory allocation.</TD></TR>
<TR><TD>CPL_INQUIRE </TD><TD>Sent after the CPL_GETCOUNT message to prompt <A HREF="functions/CPlApplet.htm#CPlApplet">CPlApplet</A> to provide information about a specified dialog box. The <I>lParam2</I> parameter of <B>CPlApplet</B> points to a <A HREF="structures/CPLINFO.htm#CPLINFO">CPLINFO</A> structure.</TD></TR>
<TR><TD>CPL_NEWINQUIRE </TD><TD>Sent after the CPL_GETCOUNT message to prompt <A HREF="functions/CPlApplet.htm#CPlApplet">CPlApplet</A> to provide information about a specified dialog box. The <I>lParam2</I> parameter is a pointer to a <A HREF="structures/NEWCPLINFO.htm#NEWCPLINFO">NEWCPLINFO</A> structure. For better performance on Microsoft&#174; Windows&#174; 95 and Windows NT&#174; version 4.0, your application should process CPL_INQUIRE and not CPL_NEWINQUIRE. </TD></TR>
<TR><TD>CPL_SELECT </TD><TD>This message is obsolete. Current versions of Windows do not send this message.</TD></TR>
<TR><TD>CPL_STOP </TD><TD>Sent once for each dialog box before the controlling application closes. <A HREF="functions/CPlApplet.htm#CPlApplet">CPlApplet</A> should free any memory associated with the given dialog box.</TD></TR>
</TABLE>
<H3><A NAME="Message_Processing">Message Processing</A></H3>
<P>The <A HREF="functions/CPlApplet.htm#CPlApplet">CPlApplet</A> callback function processes all messages sent to a Control Panel application by a controlling application. Messages sent to the function should be in a specific order. By the same token, the application requires the messages to be processed in a specific way. 

<P>First, the <A HREF="functions/CPlApplet.htm#CPlApplet">CPlApplet</A> function receives the CPL_INIT message when the controlling application first loads the Control Panel application. The function should carry out any initialization, such as allocating memory, and return nonzero. If <B>CPlApplet</B> cannot complete the initialization, it must return zero, directing the controlling application to terminate communication and release the DLL. 

<P>Next, if the CPL_INIT message succeeded, the controlling application sends the CPL_GETCOUNT message. The function must then return the number of dialog boxes supported by the Control Panel application. 

<P>The <A HREF="functions/CPlApplet.htm#CPlApplet">CPlApplet</A> function then receives one CPL_INQUIRE message and one CPL_NEWINQUIRE message for each dialog box supported by the Control Panel application. The function fills in a <A HREF="structures/CPLINFO.htm#CPLINFO">CPLINFO</A> or <A HREF="structures/NEWCPLINFO.htm#NEWCPLINFO">NEWCPLINFO</A> structure with information about your application, such as its name, icon, and a descriptive string. Most applications should process the CPL_INQUIRE message and ignore the CPL_NEWINQUIRE message. The CPL_INQUIRE message provides information in a form that the controlling application can cache, resulting in much better performance. The CPL_NEWINQUIRE message is useful only if you need to change your application's icon or display strings based on the state of the computer.

<P>The <A HREF="functions/CPlApplet.htm#CPlApplet">CPlApplet</A> function next receives a CPL_DBLCLK message as a notification that the user has chosen the icon representing the dialog box. The function may receive this message any number of times. The message includes the dialog box identifier and the value contained in the <B>lData</B> parameter. The function should display the corresponding dialog box and process subsequent user input.

<P>Before the controlling application terminates, <A HREF="functions/CPlApplet.htm#CPlApplet">CPlApplet</A> receives the CPL_STOP message once for each dialog box supported by the Control Panel application. The message includes the identifier for the dialog box and the <B>lData</B> value. The function should free any memory that it allocated for the specified dialog box.

<P>After the last CPL_STOP message, <A HREF="functions/CPlApplet.htm#CPlApplet">CPlApplet</A> receives a CPL_EXIT message. The function should free all remaining allocated memory and unregister any private window classes that it may have registered. Immediately after the function returns from this message, the controlling application releases the Control Panel application by calling the
<object id="hhal_4" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_4.Click()>FreeLibrary</A> function.

<H3><A NAME="Application_Setup">Application Setup</A></H3>
<P>Every Control Panel application is a dynamic-link library. To make sure the DLL containing your Control Panel application can be located and automatically loaded by the Windows system utility, the DLL file must have the CPL file name extension and must be set up in one of the following ways: 
<UL><LI>Copied to the directory that contains the Windows system utility. 
<LI>Copied to the Windows SYSTEM directory. 
<LI>Registered under the MMCPL key of the HKEY_CURRENT_USER key in the registry.
</UL>
<P>You should register the DLL in the registry if the DLL exports functions other than <A HREF="functions/CPlApplet.htm#CPlApplet">CPlApplet</A> and provides functionality beyond the scope of a Control Panel application. 

<H2><A NAME="Creating_Control_Pan">Creating Control Panel Applications</A></H2>
<P>Although a Control Panel application may support more than one dialog box, it processes all requests through the single <A HREF="functions/CPlApplet.htm#CPlApplet">CPlApplet</A> function. In the following example, the Control Panel application supports three dialog boxes that let the user set preferences for a component stereo system attached to the computer. The example uses an application-defined StereoApplets array that contains three structures, each corresponding to one of the dialog boxes. Each structure contains all the information required by the CPL_INQUIRE message as well as the dialog box template and dialog box procedure required by the CPL_DBLCLK message. The code demonstrates how to fill the structures in the StereoApplets array. 

<PRE>#define NUM_APPLETS 3 
 
typedef struct tagApplets 
{ 
    int icon;         // icon resource identifier 
    int namestring;   // name-string resource identifier 
    int descstring;   // description-string resource identifier 
    int dlgtemplate;  // dialog box template resource identifier 
    DLGPROC dlgfn;    // dialog box procedure 
} APPLETS; 
 
APPLETS StereoApplets[NUM_APPLETS] = 
{ 
    AMP_ICON, AMP_NAME, AMP_DESC, AMP_DLG, AmpDlgProc, 
    TUNER_ICON, TUNER_NAME, TUNER_DESC, TUNER_DLG, TunerDlgProc, 
    TAPE_ICON, TAPE_NAME, TAPE_DESC, TAPE_DLG, TapeDlgProc, 
}; 

HANDLE  hinst = NULL;

LONG CALLBACK CPlApplet(hwndCPL, uMsg, lParam1, lParam2) 
HWND hwndCPL;      // handle to Control Panel window 
UINT uMsg;         // message 
LPARAM lParam1;    // first message parameter 
LPARAM lParam2;    // second message parameter 
{ 
    int i; 
    LPCPLINFO lpCPlInfo; 
 
    i = (int) lParam1; 
 
    switch (uMsg) { 
        case CPL_INIT:      // first message, sent once 
            hinst = GetModuleHandle("ecp.cpl"); 
            return TRUE; 
 
        case CPL_GETCOUNT:  // second message, sent once 
            return NUM_APPLETS; 
            break; 
 
        case CPL_INQUIRE: // third message, sent once per application 
            lpCPlInfo = (LPCPLINFO) lParam2; 
            lpCPlInfo-&gt;lData = 0; 
            lpCPlInfo-&gt;idIcon = StereoApplets[i].icon;
            lpCPlInfo-&gt;idName = StereoApplets[i].namestring;
            lpCPlInfo-&gt;idInfo = StereoApplets[i].descstring;
            break; 

        case CPL_DBLCLK:    // application icon double-clicked 
            DialogBox(hinst, 
                MAKEINTRESOURCE(StereoApplets[i].dlgtemplate), 
                hwndCPL, StereoApplets[i].dlgfn); 
            break; 
 
        case CPL_STOP:      // sent once per application before CPL_EXIT 
            break; 
 
        case CPL_EXIT:    // sent once before FreeLibrary is called 
            break; 
 
        default: 
            break; 
    } 
    return 0; 
} 
 
</PRE>

<!--CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
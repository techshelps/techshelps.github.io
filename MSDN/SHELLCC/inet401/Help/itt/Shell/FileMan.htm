<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>File Manager Extensions</TITLE>

<META NAME=MS-HKWD CONTENT="File Manager Extensions">
<META NAME="Keywords" CONTENT="Internet Tools & Technologies, Windows Shell API">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT, Mac">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">

<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="ch_filemanext"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="File Manager Extensions"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../art/headbard.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="File Manager Extensions"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR>
<TR><TD><PRE><IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="Shell.htm#book_shell">Topic Contents</A></PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="DragDrop.htm">Dragging and Dropping</A>
<IMG SRC="../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="fileparser/FileParser.htm">File Parsers</A></PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>File Manager Extensions</H1>
<BR CLEAR=ALL>
<P>In Microsoft&#174; Windows&#174;, File Manager extensions are dynamic-link libraries (DLLs) that add menus and buttons to File Manager. File Manager extensions can also display (in the status bar) Help text for the buttons. This document describes how to create and install extensions for File Manager.
<!--*************************************************************--><H2><A NAME="About_File_Manager_E">About File Manager Extensions</A></H2>
<P>File Manager maintains a list of extensions in an initialization file and loads the extensions when starting. An extension DLL contains an entry point that processes menu commands and notification messages sent by File Manager. Up to five extension DLLs can be installed at any one time. 
<H3><A NAME="Creating_a_File_Mana">Creating a File Manager Extension</A></H3>
<P>A File Manager extension must reside in a DLL that includes a standard entry point, the Microsoft&#174; Win32&#174; <A HREF="functions/FMExtensionProc.htm#FMExtensionProc">FMExtensionProc</A> callback function. The extension must include the Wfext.h header file that defines File Manager messages and structures. File Manager communicates with the extension DLL by sending the following messages to the DLL's <B>FMExtensionProc</B> function. 
<TABLE>
<TR><TD><B>Message
 </B></TD><TD><B>Meaning</B></TD></TR>
<TR><TD> </TD><TD></TD></TR>
<TR><TD>1&#150;99 </TD><TD>The user selected an item from the extension-supplied menu. The value is the identifier of the selected menu item.</TD></TR>
<TR><TD>FMEVENT_HELPSTRING </TD><TD>The user selected an extension menu or a toolbar command item. File Manager wants the extension to supply a Help string.</TD></TR>
<TR><TD>FMEVENT_HELPMENUITEM </TD><TD>The user pressed <SMALL>F1</SMALL> while selecting an extension menu or a toolbar command item. File Manager wants the extension to call <B>WinHelp</B> appropriately for the command item.</TD></TR>
<TR><TD>FMEVENT_INITMENU </TD><TD>The user selected the extension's menu. The extension should initialize items in the menu.</TD></TR>
<TR><TD>FMEVENT_LOAD </TD><TD>File Manager is loading the extension DLL and prompts the DLL for information about the menu that the DLL supplies.</TD></TR>
<TR><TD>FMEVENT_SELCHANGE </TD><TD>Selection in the File Manager directory window or Search Results window has changed.</TD></TR>
<TR><TD>FMEVENT_TOOLBARLOAD </TD><TD>File Manager is creating the toolbar and prompts the extension DLL for information about any buttons the DLL adds to the toolbar.</TD></TR>
<TR><TD>FMEVENT_UNLOAD </TD><TD>File Manager is unloading the extension DLL.</TD></TR>
<TR><TD>FMEVENT_USER_REFRESH </TD><TD>The user selected the Refresh command from the Window menu. The extension should update items in the menu, if necessary.</TD></TR>
</TABLE>
<H4><A NAME="Creating_the_entry_p">Creating the entry-point function</A></H4>
<P>File Manager communicates with an extension DLL through the <A HREF="functions/FMExtensionProc.htm#FMExtensionProc">FMExtensionProc</A> callback function. Make sure to export this function by listing it in the EXPORTS statement of your extension's module-definition (.def) file. The <B>FMExtensionProc</B> function handles the messages listed in the preceding section by performing the tasks listed below: 
<TABLE>
<TR><TD><B>Task
 </B></TD><TD><B>Action</B></TD></TR>
<TR><TD>Initializing the extension (FMEVENT_LOAD) </TD><TD>Provides File Manager with the name and handle to the menu and saves the menu-item delta value.</TD></TR>
<TR><TD>Initializing the menu (FMEVENT_INITMENU) </TD><TD>Initializes all top-level menu items and the items in any submenus.</TD></TR>
<TR><TD>Initializing the toolbar (FMEVENT_TOOLBARLOAD) </TD><TD>Provides File Manager with information about the buttons to add to the toolbar, including the command identifier, Help string identifier, styles, and bitmap identifier.</TD></TR>
<TR><TD>Processing menu selections (1&#150;99)  </TD><TD>Carries out commands that the user chooses from the extension's menu.</TD></TR>
<TR><TD>Processing file selections (FMEVENT_SELCHANGE) </TD><TD>Queries File Manager for information about the file that the user has selected from the directory window or Search Results window.</TD></TR>
<TR><TD>Updating items in the menu (FMEVENT_USER_REFRESH) </TD><TD>Modifies the menu as appropriate when the user chooses File Manager's Refresh command from the Window menu.</TD></TR>
<TR><TD>Providing menu item Help strings (FMEVENT_HELPSTRING) </TD><TD>Provides File Manager with a Help string for a specified command in a specified menu. File Manager displays this string in the area at the bottom left of the window.</TD></TR>
<TR><TD>Passing menu item help requests on to <B>WinHelp</B> (FMEVENT_HELPMENUITEM) </TD><TD>Provides <B>WinHelp</B> with the window passed by File Manager and with menu item information.</TD></TR>
<TR><TD>Quitting the extension DLL (FMEVENT_UNLOAD) </TD><TD>Frees any memory allocated and prepares to exit.</TD></TR>
</TABLE>
<P>The <A HREF="functions/FMExtensionProc.htm#FMExtensionProc">FMExtensionProc</A> function is defined as follows:
<PRE>LONG WINAPI FMExtensionProc(hwnd, wMsg, lParam) 
    HWND hwnd; 
    WORD wMsg; 
    LONG lParam; 
 
</PRE>
<P>The <I>hwnd</I> parameter identifies the File Manager window. An extension should use this window handle to specify the parent window for any dialog box or message box it must display. It should also use this handle to send query messages to File Manager. The <I>wMsg</I> parameter contains one of the File Manager messages listed previously. The <I>lParam</I> parameter contains a message-specific value. The return value from the <A HREF="functions/FMExtensionProc.htm#FMExtensionProc">FMExtensionProc</A> function depends on the value of the <I>wMsg</I> parameter. 

<P>The menu added to File Manager may be a hierarchical (cascaded) menu and may contain grayed, disabled, or checked menu items in addition to command items. Menu items should be text only; owner-drawn menus and bitmap menus are not supported. Changing the bitmap for check marks is not supported. 

<P>Whenever File Manager calls the <A HREF="functions/FMExtensionProc.htm#FMExtensionProc">FMExtensionProc</A> function, it waits to refresh its directory windows (for changes in the file system) until after the function returns. This allows the extension to perform large numbers of file operations without excessive repainting on the part of File Manager. It is not necessary for the extension to send the FM_REFRESH_WINDOWS message to notify File Manager to repaint its directory windows. 

<H4><A NAME="Loading_the_extensio">Loading the extension</A></H4>
<P>To begin loading the extension, File Manager first sends the FMEVENT_LOAD message to the <A HREF="functions/FMExtensionProc.htm#FMExtensionProc">FMExtensionProc</A> function. The <I>lParam</I> parameter accompanying the FMEVENT_LOAD message points to an <A HREF="structures/FMS_LOAD.htm#FMS_LOAD">FMS_LOAD</A> structure that File Manager uses to obtain information about the extension-supplied menu, including the menu name and menu handle. 

<P>File Manager also uses the <A HREF="structures/FMS_LOAD.htm#FMS_LOAD">FMS_LOAD</A> structure to pass the menu-item delta value to the extension. To avoid conflicts with its own menu-item identifiers, File Manager renumbers the menu-item identifiers in an extension-supplied menu by adding the delta value to each identifier. An extension DLL that must modify its menu after File Manager has loaded it must use the delta value. For example, to delete a menu item, the extension DLL finds the sum of the delta value and the menu-item identifier and passes the sum as the <I>idItem</I> parameter to the
<object id="hhal_3" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_3.Click()>DeleteMenu</A> function. 

<P>If an extension returns FALSE in response to the FMEVENT_LOAD message, File Manager calls the
<object id="hhal_4" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_4.Click()>FreeLibrary</A> function and ends any communication with the extension DLL. This is the only place where an extension can notify File Manager of initialization problems and thus prevent the extension from being loaded. 
<H4><A NAME="Adding_custom_button">Adding custom buttons</A></H4>
<P>A File Manager extension can add custom buttons to the File Manager toolbar by returning button information in response to the FMEVENT_TOOLBARLOAD message. File Manager sends this message to the <A HREF="functions/FMExtensionProc.htm#FMExtensionProc">FMExtensionProc</A> function of the extension only if the extension successfully installed a custom menu during the processing of the FMEVENT_LOAD message. Use custom buttons as accelerator keys for menu commands specified in the custom menu. 

<P>When <A HREF="functions/FMExtensionProc.htm#FMExtensionProc">FMExtensionProc</A> receives the FMEVENT_TOOLBARLOAD message, the <I>lParam</I> parameter points to an <A HREF="structures/FMS_TOOLBARLOAD.htm#FMS_TOOLBARLOAD">FMS_TOOLBARLOAD</A> structure. The File Manager extension must copy information about the custom buttons to the structure, including the number of buttons and a specifier for the bitmap containing the button images (either the identifier for a bitmap resource or a handle to a memory bitmap). The extension must also include the address of an array of <A HREF="structures/EXT_BUTTON.htm#EXT_BUTTON">EXT_BUTTON</A> structures, each of which must contain a command identifier for the corresponding button. If the button is an accelerator for a menu command, the button identifier and corresponding menu-command identifier must be equal. 

<P>The bitmap containing the button images must be a bitmap resource or a memory bitmap. The extension must copy either the resource identifier or the memory bitmap's handle to the <A HREF="structures/FMS_TOOLBARLOAD.htm#FMS_TOOLBARLOAD">FMS_TOOLBARLOAD</A> structure. In the case of a bitmap resource, the resource must be in the extension's executable file. 

<P>The bitmap must contain one image for each specified button. The bitmap height is always 15 pixels. The width is always a multiple of 16 pixels because each button image must be 16 pixels wide. Button images are concatenated from left to right. For example, the image of the first button specified in the array of <A HREF="structures/EXT_BUTTON.htm#EXT_BUTTON">EXT_BUTTON</A> structures must be the leftmost image in the bitmap. 

<P>An extension can provide a line of Help text for a button by specifying the identifier of a string resource in the <B>idsHelp</B> member of the <A HREF="structures/EXT_BUTTON.htm#EXT_BUTTON">EXT_BUTTON</A> structure. When the user selects the button, File Manager retrieves the string resource and displays it on the toolbar. 
<H4><A NAME="Processing_menu_sele">Processing menu selections</A></H4>
<P>The menu resource that you define for your extension's menu must use menu-item identifiers in the range of 1 through 99. When the user selects an item, the extension receives a command notification that is the identifier of the selected item as defined in the resource definition file (which has the .rc file name extension). The command notification is not the sum of the delta value and the identifier. An extension DLL's <A HREF="functions/FMExtensionProc.htm#FMExtensionProc">FMExtensionProc</A> function carries out commands by processing command notifications. 
<H4><A NAME="Initializing_the_ext">Initializing the extension menu</A></H4>
<P>When the user selects the extension's main menu item from File Manager's menu bar, File Manager sends the FMEVENT_INITMENU message to the extension DLL. An extension can use this message to initialize its menu items. For example, an extension can add check marks, disable items, or gray items during this message. The extension must initialize all menu items, including those in any submenus, because File Manager will not send the FMEVENT_INITMENU message for submenus within the extension's menu.
<H4><A NAME="Updating_the_extensi">Updating the extension menu</A></H4>
<P>When the user chooses the Refresh command from the Window menu, File Manager sends an FMEVENT_USER_REFRESH message to an extension DLL. The extension can use this opportunity to update its menu items. 

<H4><A NAME="Processing_file_sele">Processing file selections</A></H4>
<P>When the user selects a file name in the directory window or in the Search Results window, File Manager sends the FMEVENT_SELCHANGE message to an extension DLL. The extension can use this opportunity to send a query message to File Manager to obtain more information about the user's selection. 

<P>Because the user can change the selection often, the extension should return promptly after processing the FMEVENT_SELCHANGE message to avoid slowing the user's selection process. 
<H4><A NAME="Quitting_the_extensi">Quitting the extension dynamic-link library</A></H4>
<P>When File Manager quits, it sends the FMEVENT_UNLOAD message to each extension DLL and then calls the
<object id="hhal_5" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_5.Click()>FreeLibrary</A> function to free the DLLs. Each DLL should free any memory that it has allocated. 
<H3><A NAME="Installing_Extension">Installing Extensions</A></H3>
<P>File Manager installs extensions that have settings in the [AddOns] section of the Winfile.ini initialization file. Each setting contains an entry and a value. An entry consists of a string that represents the name of an extension. The value assigned to the entry consists of a string that specifies the path to the extension DLL. An application can use the
<object id="hhal_6" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_6.Click()>WritePrivateProfileString</A> function to add a setting to Winfile.ini. The following example shows a setting in Winfile.ini. 
<PRE>[AddOns] 
MyExtension=C:\NT\SYSTEM\MYEXT.DLL 
 
</PRE>
<P>File Manager does not display an error message if it cannot find an extension DLL, so an extension DLL can be deleted in order to uninstall it. Even so, an application that installs an extension DLL should provide an uninstall option to remove the extension's setting from the Winfile.ini file. 
<H3><A NAME="Extension_Messages">Extension Messages</A></H3>
<P>An extension can send the following window messages to retrieve relevant information from File Manager. File Manager is guaranteed to respond correctly only to messages sent from the extension's <A HREF="functions/FMExtensionProc.htm#FMExtensionProc">FMExtensionProc</A> function. 
<TABLE>
<TR><TD><B>Message
 </B></TD><TD><B>Description
</B></TD></TR>
<TR><TD>FM_GETDRIVEINFO </TD><TD>File Manager returns drive information from the active window. An extension provides a pointer to an <A HREF="structures/FMS_GETDRIVEINFO.htm#FMS_GETDRIVEINFO">FMS_GETDRIVEINFO</A> structure; File Manager fills the structure with drive information.</TD></TR>
<TR><TD>FM_GETFILESEL </TD><TD>File Manager returns information about a selected file from the active File Manager window (either the directory window or the Search Results window). An extension provides a pointer to an <A HREF="structures/FMS_GETFILESEL.htm#FMS_GETFILESEL">FMS_GETFILESEL</A> structure; File Manager fills the structure with file information.</TD></TR>
<TR><TD>FM_GETFILESELLFN </TD><TD>Same as the FM_GETFILESEL message except that the selected file may have a long file name.</TD></TR>
<TR><TD>FM_GETFOCUS </TD><TD>File Manager returns a value that identifies the type of window with input focus.</TD></TR>
<TR><TD>FM_GETSELCOUNT </TD><TD>File Manager returns the count of selected files in the directory and Search Results windows.</TD></TR>
<TR><TD>FM_GETSELCOUNTLFN </TD><TD>Same as the FM_GETSELCOUNT message except that the count includes files with long file names.</TD></TR>
<TR><TD>FM_REFRESH_WINDOWS </TD><TD>File Manager repaints either its active window or all of its windows. This message is similar to File Manager's Refresh command on the Window menu.</TD></TR>
<TR><TD>FM_RELOAD_EXTENSIONS </TD><TD>File Manager reloads all extensions. First, File Manager unloads all extensions, sending an FMEVENT_UNLOAD message to each extension. Then it reloads the extensions, sending an FMEVENT_LOAD message to each extension. The FM_RELOAD_EXTENSIONS message allows an extension to uninstall itself by removing its setting from the Winfile.ini file; this action causes File Manager to reload the remaining extensions. Other applications and programs (for example, installation programs) can also post this message by calling the
<object id="hhal_7" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_7.Click()>PostMessage</A> function.</TD></TR>
</TABLE>
<H3><A NAME="Processing_Commands_">Processing Commands and Messages from File Manager</A></H3>
<P>The following code shows the <A HREF="functions/FMExtensionProc.htm#FMExtensionProc">FMExtensionProc</A> function for a sample extension DLL. It demonstrates how an extension processes the menu commands and notification messages sent by File Manager. 
<PRE>HINSTANCE hinst; 
HMENU hmenu; 
WORD wMenuDelta; 
BOOL fMultiple = FALSE; 
BOOL fLFN = FALSE; 
 
LONG WINAPI FMExtensionProc(hwnd, wMsg, lParam) 
HWND hwnd; 
WORD wMsg; 
LONG lParam; 
 
{ 
    CHAR szBuf[200]; 
    INT count; 
 
    switch (wMsg) { 
    case FMEVENT_LOAD: 
 
       #define lpload  ((LPFMS_LOAD) lParam) 
 
       /* Save the menu-item delta value. */ 
 
       wMenuDelta = lpload-&gt;wMenuDelta; 
 
       /* Fill the FMS_LOAD structure. */ 
 
       lpload-&gt;dwSize = sizeof(FMS_LOAD); 
       lstrcpy(lpload-&gt;szMenuName, "&amp;Extension"); 
 
       /* Return the handle to the menu. */ 
 
       hinst = GetModuleHandle("ext.dll"); 
       lpload-&gt;hMenu = GetSubMenu(LoadMenu(hinst, 
       MAKEINTRESOURCE(MYMENU)), 0); 
 
       return (LONG)TRUE; 
 
   case FMEVENT_UNLOAD: 
 
       /* Perform any cleanup procedures here. */ 
 
       break; 
 
   case FMEVENT_INITMENU: 
 
       /* Copy the menu handle. */ 
 
       hmenu = (HMENU) lParam; 
 
       /* 
             * Add check marks to menu items as appropriate. 
             * Add menu-item delta values to menu-item 
             * identifiers to specify the menu items to check. 
        */ 
 
       CheckMenuItem(hmenu, 
               wMenuDelta + IDM_MULTIPLE, 
               fMultiple ? MF_BYCOMMAND | MF_CHECKED : 
                       MF_BYCOMMAND | MF_UNCHECKED); 
       CheckMenuItem(hmenu, 
               wMenuDelta + IDM_LFN, 
               fLFN ? MF_BYCOMMAND | MF_CHECKED : 
                       MF_BYCOMMAND | MF_UNCHECKED); 
       break; 
 
   case FMEVENT_TOOLBARLOAD: 
   { 
       static EXT_BUTTON extbtn[] = { 
          {1, 0, 0}, 
       }; 
 
            /* Fill the FMS_TOOLBARLOAD structure. */ 
 
       #define lptbld ((LPFMS_TOOLBARLOAD) lParam) 
 
       lptbld-&gt;dwSize = sizeof(FMS_TOOLBARLOAD); 
       lptbld-&gt;lpButtons = (LPEXT_BUTTON) &amp;extbtn; 
       lptbld-&gt;cButtons = 1; 
       lptbld-&gt;cBitmaps = 1; 
       lptbld-&gt;idBitmap = ID_BUTTONBITMAP; 
 
       return (LONG)TRUE; 
 
   } 
 
   case FMEVENT_USER_REFRESH: 
            MessageBox(hwnd, "User refresh event", 
                "Hey!", MB_OK); 
       break; 
 
   case FMEVENT_SELCHANGE: 
       break; 
 
        /* 
         * The following messages are generated when the user 
         * chooses items from the extension menu. 
         */ 
 
   case FMEVENT_HELPSTRING: 
 
       #define lphs ((LPFMS_HELPSTRING)lParam) 
 
       if (lphs-&gt;idCommand == -1) 
          lstrcpy(lphs-&gt;szHelp, "Help for extension menu"); 
       else 
          wsprintf(lphs-&gt;szHelp, "Help for item %d", lphs-&gt;idCommand); 
 
       break; 
 
   case FMEVENT_HELPMENUITEM: 
 
       wsprintf(szBuf, "Help for %d", lParam); 
       MessageBox(hwnd, szBuf, "WinHelp call", MB_OK); 
 
       /* 
        * Use: WinHelp(hwnd, "ExtHelp.hlp", HELP_CONTEXT, lParam); 
        */ 
 
       break; 
 
   case IDM_GETFOCUS: 
       wsprintf(szBuf, "Focus %d", 
               (INT) SendMessage(hwnd, FM_GETFOCUS, 0, 0)); 
       MessageBox(hwnd, szBuf, "Focus", MB_OK); 
       break; 
 
   case IDM_GETCOUNT: 
       count = (INT) SendMessage(hwnd, 
                fLFN ? FM_GETSELCOUNTLFN : FM_GETSELCOUNT, 
                0, 0); 
 
       wsprintf(szBuf, "%d files selected", count); 
       MessageBox(hwnd, szBuf, "Selection Count", MB_OK); 
       break; 
 
   case IDM_GETFILE: 
   { 
       FMS_GETFILESEL file; 
 
       count = (INT) SendMessage(hwnd, 
               fLFN ? FM_GETSELCOUNTLFN : FM_GETSELCOUNT, 
               FMFOCUS_DIR, 
               0); 
 
       while (count &gt;= 1) { 
                /* 
                 * Selection indices are zero-based (0 is 
                 * first). 
                 */ 
 
      count--; 
      SendMessage(hwnd, FM_GETFILESEL, count, 
          (LONG) (LPFMS_GETFILESEL) &amp;file); 
      wsprintf(szBuf, "file %s\nSize %ld", 
          (LPSTR) file.szName, file.dwSize); 
                MessageBox(hwnd, szBuf, "File Information", 
                    MB_OK); 
 
      if (!fMultiple) 
         break; 
       } 
       break; 
   } 
 
   case IDM_GETDRIVE: 
   { 
       FMS_GETDRIVEINFO drive; 
 
       SendMessage(hwnd, FM_GETDRIVEINFO, 0, 
       (LONG) (LPFMS_GETDRIVEINFO)&amp;drive); 
       wsprintf(szBuf, 
                "%s\nFree %ld\nTotal %ld\nVolume %s\nShare %s", 
       (LPSTR) drive.szPath, drive.dwFreeSpace, 
       drive.dwTotalSpace, (LPSTR) drive.szVolume, 
       (LPSTR) drive.szShare); 
       MessageBox(hwnd, szBuf, "Drive Info", MB_OK); 
       break; 
   } 
 
   case IDM_LFN: 
       MessageBox(hwnd, "IDM_LFN", "Hi", MB_OK); 
       fLFN = !fLFN; 
       break; 
 
   case IDM_MULTIPLE: 
       MessageBox(hwnd, "IDM_MULTIPLE", "Hi", MB_OK); 
       fMultiple = !fMultiple; 
       break; 
 
   case IDM_REFRESH: 
   case IDM_REFRESHALL: 
       SendMessage(hwnd, FM_REFRESH_WINDOWS, 
       wMsg == IDM_REFRESHALL, 0); 
       break; 
 
   case IDM_RELOAD: 
       PostMessage(hwnd, FM_RELOAD_EXTENSIONS, 0, 0); 
       break; 
    } 
    return 0L; 
} 
 
</PRE>
<H3><A NAME="Adding_the_Undelete_">Adding the Undelete Command</A></H3>
<P>File Manager supports a hook for adding an Undelete command to the File menu. If an undelete dynamic-link library is specified in the Winfile.ini file, File Manager adds the Undelete command to the File menu when starting. When the user chooses the Undelete command, File Manager calls the DLL. 

<P>The [settings] section of the Winfile.ini file should include a reference to the undelete DLL, as follows: 
<PRE>[settings] 
UNDELETE.DLL=C:\MYDIR\OTHER.DLL 
 </PRE>
<P>An undelete DLL must include a standard entry point, the <A HREF="functions/UndeleteFile.htm#UndeleteFile">UndeleteFile</A> function. This function must be exported by specifying the name of the function in the EXPORTS statement of the DLL's module-definition (.def) file. 

<P>The <A HREF="functions/UndeleteFile.htm#UndeleteFile">UndeleteFile</A> function is defined as follows: 
<PRE>DWORD APIENTRY UndeleteFile(hwndParent, lpszDir) 
    HWND hwndParent; 
    LPSTR lpszDir; 
 </PRE>
<P>The <I>hwndParent</I> parameter identifies the parent window for any dialog boxes the DLL creates. The <I>lpszDir</I> parameter specifies the initial directory to be used (for example, C:\TEMP). 

<!--*************************************************************-->
<!--CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
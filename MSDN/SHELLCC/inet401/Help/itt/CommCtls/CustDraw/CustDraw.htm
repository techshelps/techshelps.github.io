<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Custom Draw</TITLE>

<META NAME=MS-HKWD CONTENT="Custom Draw">
<META NAME="Keywords" CONTENT="Internet Tools & Technologies, Common controls">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT, Mac">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="ch_cdr_make"></A>
<!--NAV_LINKS_START-->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Custom Draw"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../../art/headbard.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Custom Draw"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR><TR><TD><PRE><IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="../CommCtls.htm#book_cc">Topic Contents</A></PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="../common/structures/NMTOOLTIPSCREATED.htm">NMTOOLTIPSCREATED</A>
<IMG SRC="../../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="refs.htm">Custom Draw Reference</A></PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>Custom Draw</H1>
<BR CLEAR=ALL>
<P><I>Custom draw</I> is not a common control; it is a service that many common controls provide. Custom draw services allow an application greater flexibility in customizing a control's appearance. Your application can harness custom draw notifications to easily change the font used to display items or manually draw an item without having to do a full-blown owner draw. 
<P><A CLASS=tctop HREF="CustDraw.htm#About_CustomDraw"><IMG SRC="../../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">About Custom Draw</A><BR>
<P><A CLASS=tctop HREF="CustDraw.htm#CustomDraw_ProcessingNM_CUSTOMDRAW"><IMG SRC="../../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Using Custom Draw</A><BR>
<P><A CLASS=tctop HREF="refs.htm#CustDraw_ref"><IMG SRC="../../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Custom Draw Reference</A><BR>
<!--************************************************************--><H2><A NAME="About_CustomDraw">About Custom Draw</A></H2>
<P>This section contains general information about custom draw functionality and provides a conceptual overview of how an application can support custom draw. 

<P>Currently, the following controls support custom draw functionality:
<UL><LI>Header controls
<LI>List view controls
<LI>Rebar controls
<LI>Toolbar controls
<LI>Tooltip controls
<LI>Trackbar controls
<LI>Tree view controls
</UL>
<P><B>Note</B>  Custom draw is implemented in version 4.70 and later of Comctl32.dll.
<H3><A NAME="CustomDraw_Notifications">About Custom Draw Notification Messages</A></H3>
<P>All common controls that support custom draw send <A HREF="messages/NM_CUSTOMDRAW.htm#NM_CUSTOMDRAW">NM_CUSTOMDRAW</A> notification messages at specific points during drawing operations. These notifications describe drawing operations that apply to the entire control as well as drawing operations specific to items within the control. Like many notification messages, <B>NM_CUSTOMDRAW</B> notifications are sent as <A HREF="../common/messages/WM_NOTIFY.htm#WM_NOTIFY">WM_NOTIFY</A> messages.
<P>The <I>lParam</I> parameter of a custom draw notification message will be the address of an <A HREF="structures/NMCUSTOMDRAW.htm#NMCUSTOMDRAW">NMCUSTOMDRAW</A> structure or a control-specific structure that contains an <B>NMCUSTOMDRAW</B> structure as its first member. The following table illustrates the relationship between the controls and the structures they use.
<TABLE>
<TR><TD><B>Structure </B></TD><TD><B>Used by
</B></TD></TR><TR><TD><A HREF="structures/NMCUSTOMDRAW.htm#NMCUSTOMDRAW">NMCUSTOMDRAW</A> </TD><TD>Rebar, trackbar, and header controls</TD></TR><TR><TD><A HREF="../listview/structures/NMLVCUSTOMDRAW.htm#NMLVCUSTOMDRAW">NMLVCUSTOMDRAW</A> </TD><TD>List view controls</TD></TR><TR><TD><A HREF="../toolbar/structures/NMTBCUSTOMDRAW.htm#NMTBCUSTOMDRAW">NMTBCUSTOMDRAW</A> </TD><TD>Toolbar controls</TD></TR><TR><TD><A HREF="../tooltip/structures/NMTTCUSTOMDRAW.htm#NMTTCUSTOMDRAW">NMTTCUSTOMDRAW</A> </TD><TD>Tooltip controls</TD></TR><TR><TD><A HREF="../treeview/structures/NMTVCUSTOMDRAW.htm#NMTVCUSTOMDRAW">NMTVCUSTOMDRAW</A> </TD><TD>Tree view controls</TD></TR></TABLE>
<H3><A NAME="CustomDraw_PaintCyclesEtc">Paint Cycles, Drawing Stages, and Notification Messages</A></H3>
<P>Like all Microsoft&#174; Windows&#174; applications, common controls periodically paint and erase themselves based on messages received from the system or other applications. The process of a control painting or erasing itself is called a <I>paint cycle</I>. Controls that support custom draw send <A HREF="messages/NM_CUSTOMDRAW.htm#NM_CUSTOMDRAW">NM_CUSTOMDRAW</A> notification messages periodically through each paint cycle. This notification message is accompanied by an <A HREF="structures/NMCUSTOMDRAW.htm#NMCUSTOMDRAW">NMCUSTOMDRAW</A> structure or another structure that contains an <B>NMCUSTOMDRAW</B> structure as its first member.
<P>One piece of information that the <A HREF="structures/NMCUSTOMDRAW.htm#NMCUSTOMDRAW">NMCUSTOMDRAW</A> structure contains is the current stage of the paint cycle. This is referred to as the <I>draw stage</I> and is represented by the value in the structure's <B>dwDrawStage</B> member. A control informs its parent about four basic draw stages. These basic, or global, draw stages are represented in the structure by the following flag values (defined in Commctrl.h).
<TABLE>
<TR><TD><B>Global draw stage values</B></TD></TR>
<TR><TD>CDDS_PREPAINT </TD><TD>Before the paint cycle begins.</TD></TR><TR><TD>CDDS_POSTPAINT </TD><TD>After the paint cycle is complete.</TD></TR><TR><TD>CDDS_PREERASE </TD><TD>Before the erase cycle begins.</TD></TR><TR><TD>CDDS_POSTERASE </TD><TD>After the erase cycle is complete.</TD></TR></TABLE>
<P>Each of the preceding values can be combined with the CDDS_ITEM flag to specify draw stages specific to items. For convenience, Commctrl.h contains the following item-specific values.
<TABLE>
<TR><TD><B>Item-specific draw stage values</B></TD></TR>
<TR><TD>CDDS_ITEMPREPAINT </TD><TD>Before an item is drawn.</TD></TR><TR><TD>CDDS_ITEMPOSTPAINT </TD><TD>After an item has been drawn.</TD></TR><TR><TD>CDDS_ITEMPREERASE </TD><TD>Before an item is erased.</TD></TR><TR><TD>CDDS_ITEMPOSTERASE </TD><TD>After an item has been erased.</TD></TR></TABLE>
<P>Your application must process the <A HREF="messages/NM_CUSTOMDRAW.htm#NM_CUSTOMDRAW">NM_CUSTOMDRAW</A> notification message and then return a specific value that informs the control what it must do. See the following sections for more information about these return values.

<H3><A NAME="CustomDraw_CustomDrawServices">Taking Advantage of Custom Draw Services</A></H3>
<P>The key to harnessing custom draw functionality is in responding to the <A HREF="messages/NM_CUSTOMDRAW.htm#NM_CUSTOMDRAW">NM_CUSTOMDRAW</A> notification messages that a control sends. The return values your application sends in response to these notifications determine the control's behavior for that paint cycle. 

<P>This section contains information about how your application can use <A HREF="messages/NM_CUSTOMDRAW.htm#NM_CUSTOMDRAW">NM_CUSTOMDRAW</A> notification return values to determine the control's behavior. Details are broken into the following topics:
<UL><LI><A HREF="CustDraw.htm#CustomDraw_Prepaint">Responding to the prepaint notification</A>
<LI><A HREF="CustDraw.htm#CustomDraw_RequestingItemSpecific">Requesting item-specific notifications</A>
<LI><A HREF="CustDraw.htm#CustomDraw_DrawingItemsYourself">Drawing the item yourself</A>
<LI><A HREF="CustDraw.htm#CustomDraw_ChangingFontsAndColors">Changing fonts and colors</A>
</UL>
<H4><A NAME="CustomDraw_Prepaint">Responding to the prepaint notification</A></H4>
<P>At the beginning of each paint cycle, the control sends the <A HREF="messages/NM_CUSTOMDRAW.htm#NM_CUSTOMDRAW">NM_CUSTOMDRAW</A> notification message, specifying the CDDS_PREPAINT value in the <B>dwDrawStage</B> member of the accompanying <A HREF="structures/NMCUSTOMDRAW.htm#NMCUSTOMDRAW">NMCUSTOMDRAW</A> structure. The value that your application returns to this first notification dictates how and when the control sends subsequent custom draw notifications for the rest of that paint cycle. Your application can return a combination of the following flags in response to the first notification.
<TABLE>
<TR><TD><B>Return value
 </B></TD><TD><B>Effect
</B></TD></TR><TR><TD>CDRF_DODEFAULT
 </TD><TD>The control will draw itself. It will not send additional <A HREF="messages/NM_CUSTOMDRAW.htm#NM_CUSTOMDRAW">NM_CUSTOMDRAW</A> notifications for this paint cycle. This flag cannot be used with any other flag.</TD></TR><TR><TD>CDRF_NOTIFYITEMDRAW
 </TD><TD>The control will notify the parent of any item-specific drawing operations. It will send <A HREF="messages/NM_CUSTOMDRAW.htm#NM_CUSTOMDRAW">NM_CUSTOMDRAW</A> notification messages before and after it draws items.</TD></TR><TR><TD>CDRF_NOTIFYPOSTPAINT
 </TD><TD>The control will send an <A HREF="messages/NM_CUSTOMDRAW.htm#NM_CUSTOMDRAW">NM_CUSTOMDRAW</A> notification when the painting cycle for the entire control is complete.</TD></TR><TR><TD>CDRF_SKIPDEFAULT
 </TD><TD>The control will not perform any painting at all.</TD></TR></TABLE>
<H4><A NAME="CustomDraw_RequestingItemSpecific">Requesting item-specific notifications</A></H4>
<P>If your application returns CDRF_NOTIFYITEMDRAW to the initial prepaint custom draw notification, the control will send notifications for each item it draws during that paint cycle. These item-specific notifications will have the CDDS_ITEMPREPAINT value in the <B>dwDrawStage</B> member of the accompanying <A HREF="structures/NMCUSTOMDRAW.htm#NMCUSTOMDRAW">NMCUSTOMDRAW</A> structure. You can request that the control send another notification when it is finished drawing the item by returning CDRF_NOTIFYPOSTPAINT to these item-specific notifications. Otherwise, return CDRF_DODEFAULT and the control will not notify the parent window until it starts to draw the next item.

<H4><A NAME="CustomDraw_DrawingItemsYourself">Drawing the item yourself</A></H4>
<P>If your application draws the entire item, return CDRF_SKIPDEFAULT. This allows the control to skip items that it does not need to draw, thereby decreasing system overhead. Keep in mind that returning this value means the control will not draw any portion of the item. 

<H4><A NAME="CustomDraw_ChangingFontsAndColors">Changing fonts and colors</A></H4>
<P>Your application can use custom draw to change an item's font. Simply select the HFONT you want into the device context specified by the <B>hdc</B> member of the <A HREF="structures/NMCUSTOMDRAW.htm#NMCUSTOMDRAW">NMCUSTOMDRAW</A> structure associated with the custom draw notification. Since the font you select might have different metrics than the default font, make sure you include the CDRF_NEWFONT bit in the return value for the notification message. For more information on using this functionality, see the sample code in <A HREF="CustDraw.htm#CustomDraw_ProcessingNM_CUSTOMDRAW">Using Custom Draw</A>. The font that your application specifies is used to display that item when it is not selected. Custom draw does not allow you to change the font attributes for selected items. 

<P>To change text colors for all controls that support custom draw except for the list view and tree view, simply set the desired text and background colors in the device context supplied in the custom draw notification structure with the
<object id="hhal_3" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_3.Click()>SetTextColor</A> and
<object id="hhal_4" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_4.Click()>SetBkColor</A> functions. To modify the text colors in the list view or tree view, you need to place the desired color values in the <B>clrText</B> and <B>clrTextBk</B> members of the <A HREF="../listview/structures/NMLVCUSTOMDRAW.htm#NMLVCUSTOMDRAW">NMLVCUSTOMDRAW</A> or <A HREF="../treeview/structures/NMTVCUSTOMDRAW.htm#NMTVCUSTOMDRAW">NMTVCUSTOMDRAW</A> structure.

<H2><A NAME="CustomDraw_ProcessingNM_CUSTOMDRAW">Using Custom Draw</A></H2>
<P>The following application-defined function processes custom draw notification messages sent by a child list view control. Upon receiving the prepaint notification (CDDS_PREPAINT), the function requests item-specific notifications by returning CDRF_NOTIFYITEMDRAW. When it receives the subsequent item-specific notifications, it selects a previously created font into the provided device context and specifies new colors before returning CDRF_NEWFONT.
<PRE>LRESULT DoNotify(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
{
   LPNMLISTVIEW  pnm    = (LPNMLISTVIEW)lParam;

   switch (pnm-&gt;hdr.code){
      case NM_CUSTOMDRAW:{
         LPNMLVCUSTOMDRAW  lplvcd = (LPNMLVCUSTOMDRAW)lParam;

         /*
         CDDS_PREPAINT is at the beginning of the paint cycle. You 
         implement custom draw by returning the proper value. In this 
         case, we're requesting item-specific notifications.
         */
         if(lplvcd-&gt;nmcd.dwDrawStage == CDDS_PREPAINT)
            // Request prepaint notifications for each item.
            return CDRF_NOTIFYITEMDRAW;

         /*
         Because we returned CDRF_NOTIFYITEMDRAW in response to
         CDDS_PREPAINT, CDDS_ITEMPREPAINT is sent when the control is
         about to paint an item.
         */
         if(lplvcd-&gt;nmcd.dwDrawStage == CDDS_ITEMPREPAINT){
            /*
            To change the font, select the desired font into the 
            provided HDC. We're changing the font for every third item
            in the control, starting with item zero.
            */
            if(!(lplvcd-&gt;nmcd.dwItemSpec % 3))
               SelectObject(lplvcd-&gt;nmcd.hdc, g_hNewFont);
            else
               return(CDRF_DODEFAULT);

            /*
            To change the text and background colors in a list view 
            control, set the clrText and clrTextBk members of the 
            NMLVCUSTOMDRAW structure to the desired color.

            This differs from most other controls that support 
            CustomDraw. To change the text and background colors for 
            the others, call SetTextColor and SetBkColor on the provided HDC.
            */
            lplvcd-&gt;clrText = RGB(150, 75, 150);
            lplvcd-&gt;clrTextBk = RGB(255,255,255);

            /*
            We changed the font, so we're returning CDRF_NEWFONT. This
            tells the control to recalculate the extent of the text.
            */
            return CDRF_NEWFONT;
            }
         }
      
      default:
         break;
   }

   return 0;
}
</PRE>

<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Image Lists</TITLE>

<META NAME=MS-HKWD CONTENT="Image Lists">
<META NAME="Keywords" CONTENT="Internet Tools & Technologies, Common controls">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT, Mac">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="ch_il_refs"></A>
<!--NAV_LINKS_START-->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Image Lists"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../../art/headbard.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Image Lists"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR><TR><TD><PRE><IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="../CommCtls.htm#book_cc">Topic Contents</A></PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="../hotkey/messages/HKM_SETRULES.htm">HKM_SETRULES</A>
<IMG SRC="../../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="RefList.htm">Image List Reference</A></PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>Image Lists</H1>
<BR CLEAR=ALL>
<P>An <I>image list</I> is a collection of images of the same size, each of which can be referred to by its index. Image lists are used to efficiently manage large sets of icons or bitmaps. All images in an image list are contained in a single, wide bitmap in screen device format. An image list can also include a monochrome bitmap that contains masks used to draw images transparently (icon style). 


<P><A CLASS=tctop HREF="ImageList.htm#Using_Image_Lists"><IMG SRC="../../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Using Image Lists</A><BR>
<P><A CLASS=tctop HREF="ImageList.htm#Image_List_Updates_i"><IMG SRC="../../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Image List Updates in Internet Explorer</A><BR>
<P><A CLASS=tctop HREF="RefList.htm#imagelist_ImageList"><IMG SRC="../../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Image List Reference</A><BR>
<H2><A NAME="Using_Image_Lists">Using Image Lists</A></H2>
<P>The Microsoft&#174; Win32&#174; application programming interface (API) provides image list functions that enable you to create and destroy image lists, add and remove images, replace and merge images, draw images, and drag images.

<P>To use the image list functions, include the common control header file in your source code files and link with the common control export library. In addition, before calling any image list function, use the <A HREF="../common/functions/InitCommonControls.htm#InitCommonControls">InitCommonControls</A> function to ensure that the common control dynamic-link library (DLL) is loaded. 

<H3><A NAME="Types">Types</A></H3>
<P>There are two types of image lists: nonmasked and masked. A <I>nonmasked image list</I> consists of a color bitmap that contains one or more images. A <I>masked image list</I> consists of two bitmaps of equal size. The first is a color bitmap that contains the images, and the second is a monochrome bitmap that contains a series of masks&#151;one for each image in the first bitmap. 

<P>When a nonmasked image is drawn, it is simply copied into the target device context; that is, it is drawn over the existing background color of the device context. When a masked image is drawn, the bits of the image are combined with the bits of the mask, typically producing transparent areas in the bitmap where the background color of the target device context shows through. There are several drawing styles that you can specify when drawing a masked image. For example, you can specify that the image be dithered to indicate a selected object. 

<H3><A NAME="Creating_and_Destroy">Creating and Destroying Image Lists</A></H3>
<P>You create an image list by calling the <A HREF="functions/ImageList_Create.htm#ImageList_Create">ImageList_Create</A> function. The parameters include the type of image list to create, the dimensions of each image, and the number of images you intend to add to the list. For a nonmasked image list, the function creates a single bitmap large enough to hold the specified number of images of the given dimensions. Then it creates a screen-compatible device context and selects the bitmap into it. For a masked image list, the function creates two bitmaps and two screen-compatible device contexts. It selects the image bitmap into one device context and the mask bitmap into the other. The common control DLL contains the executable code for the image list functions. 

<P>In <A HREF="functions/ImageList_Create.htm#ImageList_Create">ImageList_Create</A>, you specify the initial number of images that will be in an image list as well as the number of images by which the list can grow. So if you attempt to add more images than you initially specified, the image list automatically grows to accommodate the new images. 

<P>If <A HREF="functions/ImageList_Create.htm#ImageList_Create">ImageList_Create</A> succeeds, it returns a handle to the HIMAGELIST type. You use this handle in other image list functions to access the image list and manage the images. You can add and remove images, copy images from one image list to another, and merge images from two different image lists. When you no longer need an image list, you can destroy it by specifying its handle in a call to the <A HREF="functions/ImageList_Destroy.htm#ImageList_Destroy">ImageList_Destroy</A> function.

<P>The following example creates a masked image list and uses the <A HREF="macros/ImageList_AddIcon.htm#ImageList_AddIcon">ImageList_AddIcon</A> function to add two icons to the list.
<PRE>&#009;// AddIconsToImageList - creates a masked image list and adds some 
&#009;//     icons to it. 
&#009;// Returns the handle to the new image list. 
&#009;// hinst - handle to the application instance. 
&#009;// 
&#009;// Global variables and constants 
&#009;//     g_nBird and g_nTree - indexes of the images. 
&#009;//     cx_icon and cy_icon - width and height of the icon. 
&#009;//     num_icons - number of icons to add to the image list. 
&#009;extern int g_nBird, g_nTree; 
&#009; 
&#009;#define CX_ICON  32 
&#009;#define CY_ICON  32 
&#009;#define NUM_ICONS 3 
&#009; 
&#009;HIMAGELIST AddIconsToImageList(HINSTANCE hinst) 
&#009;{ 
&#009;    HIMAGELIST himlIcons;  // handle to new image list 
&#009;    HICON hicon;           // handle to icon 
&#009; 
&#009;    // Ensure that the common control DLL is loaded. 
&#009;    InitCommonControls(); 
 
    // Create a masked image list large enough to hold the icons. 
    himlIcons = ImageList_Create(CX_ICON, CY_ICON, TRUE, NUM_ICONS, 0); 
 
    // Load the icon resources, and add the icons to the image list. 
    hicon = LoadIcon(hinst, MAKEINTRESOURCE(IDI_BIRD)); 
    g_nBird = ImageList_AddIcon(himlIcons, hicon); 
 
    hicon = LoadIcon(hinst, MAKEINTRESOURCE(IDI_TREE)); 
    g_nTree = ImageList_AddIcon(himlIcons, hicon); 
 
&#009;    return himlIcons; 
&#009;} 
 
</PRE>
<H3><A NAME="Adding_and_Removing_">Adding and Removing Images</A></H3>
<P>You can add bitmapped images, icons, or cursors to an image list. You add bitmapped images by specifying the handles to two bitmaps in a call to the <A HREF="functions/ImageList_Add.htm#ImageList_Add">ImageList_Add</A> function. The first bitmap contains one or more images to add to the image bitmap, and the second bitmap contains the masks to add to the mask bitmap. For nonmasked image lists, the second bitmap handle is ignored; it can be set to NULL. 

<P>The <A HREF="functions/ImageList_AddMasked.htm#ImageList_AddMasked">ImageList_AddMasked</A> function also adds bitmapped images to a masked image list. This function is similar to <A HREF="functions/ImageList_Add.htm#ImageList_Add">ImageList_Add</A>, except that you do not specify a mask bitmap. Instead, you specify a color that the system combines with the image bitmap to automatically generate the masks. Each pixel of the specified color in the image bitmap is changed to black, and the corresponding bit in the mask is set to 1. As a result, any pixel in the image that matches the specified color is transparent when the image is drawn. 

<P>The <A HREF="macros/ImageList_AddIcon.htm#ImageList_AddIcon">ImageList_AddIcon</A> function adds an icon or cursor to an image list. If the image list is masked, <B>ImageList_AddIcon</B> adds the mask provided with the icon or cursor to the mask bitmap. If the image list is nonmasked, the mask for the icon or cursor is not used when drawing the image. 

<P>You can create an icon based on an image and mask in an image list by using the <A HREF="functions/ImageList_GetIcon.htm#ImageList_GetIcon">ImageList_GetIcon</A> function. The function returns the handle to the new icon.

<P><A HREF="functions/ImageList_Add.htm#ImageList_Add">ImageList_Add</A>, <A HREF="functions/ImageList_AddMasked.htm#ImageList_AddMasked">ImageList_AddMasked</A>, and <A HREF="macros/ImageList_AddIcon.htm#ImageList_AddIcon">ImageList_AddIcon</A> assign an index to each image as it is added to an image list. The indexes are zero-based; that is, the first image in the list has an index of zero, the next has an index of one, and so on. After adding a single image, the functions return the index of the image. When more than one image is added at a time, the functions return the index of the first image. 

<P>The <A HREF="functions/ImageList_Remove.htm#ImageList_Remove">ImageList_Remove</A> function removes an image from an image list.

<H3><A NAME="Replacing_and_Mergin">Replacing and Merging Images</A></H3>
<P>The <A HREF="functions/ImageList_Replace.htm#ImageList_Replace">ImageList_Replace</A> and <A HREF="functions/ImageList_ReplaceIcon.htm#ImageList_ReplaceIco">ImageList_ReplaceIcon</A> functions replace an image in an image list with a new image. <B>ImageList_Replace</B> replaces an image with a bitmapped image and mask, and <B>ImageList_ReplaceIcon</B> replaces an image with an icon or cursor.

<P>The <A HREF="functions/ImageList_Merge.htm#ImageList_Merge">ImageList_Merge</A> function merges two images, storing the new image in a new image list. The new image is created by drawing the second image transparently over the first. The mask for the new image is the result of performing a logical OR operation on the bits of the masks for the two existing images. 

<H3><A NAME="Drawing_Images">Drawing Images</A></H3>
<P>To draw an image, you use the <A HREF="functions/ImageList_Draw.htm#ImageList_Draw">ImageList_Draw</A> or <A HREF="functions/ImageList_DrawEx.htm#ImageList_DrawEx">ImageList_DrawEx</A> function. You specify the handle to an image list, the index of the image to draw, the handle to the destination device context, a location within the device context, and one or more drawing styles. 

<P>When you specify the ILD_TRANSPARENT style, <A HREF="functions/ImageList_Draw.htm#ImageList_Draw">ImageList_Draw</A> or <A HREF="functions/ImageList_DrawEx.htm#ImageList_DrawEx">ImageList_DrawEx</A> uses a two-step process to draw a masked image. First, it performs a logical AND operation on the bits of the image and the bits of the mask. Then it performs a logical XOR operation on the results of the first operation and the background bits of the destination device context. This process creates transparent areas in the resulting image; that is, each white bit in the mask causes the corresponding bit in the resulting image to be transparent.

<P>Before drawing a masked image on a solid color background, you should use the <A HREF="functions/ImageList_SetBkColor.htm#ImageList_SetBkColor">ImageList_SetBkColor</A> function to set the background color of the image list to the same color as the destination. Setting the color eliminates the need to create transparent areas in the image and enables <A HREF="functions/ImageList_Draw.htm#ImageList_Draw">ImageList_Draw</A> or <A HREF="functions/ImageList_DrawEx.htm#ImageList_DrawEx">ImageList_DrawEx</A> to simply copy the image to the destination device context, resulting in a significant increase in performance. To draw the image, specify the ILD_NORMAL style in a call to <B>ImageList_Draw</B> or <B>ImageList_DrawEx</B>.

<P>You can set the background color for a masked image list at any time so that it draws correctly on any solid background. Setting the background color to CLR_NONE causes images to be drawn transparently by default. To retrieve the background color of an image list, use the <A HREF="functions/ImageList_GetBkColor.htm#ImageList_GetBkColor">ImageList_GetBkColor</A> function. 

<P>The ILD_BLEND25 and ILD_BLEND50 styles dither the image with the system highlight color. These styles are useful if you use a masked image to represent an object that the user can select. For example, you can use the ILD_BLEND50 style to draw the image when the user selects it. 

<P>A nonmasked image is copied to the destination device context using the SRCCOPY raster operation. The colors in the image appear the same regardless of the background color of the device context. The drawing styles specified in <A HREF="functions/ImageList_Draw.htm#ImageList_Draw">ImageList_Draw</A> or <A HREF="functions/ImageList_DrawEx.htm#ImageList_DrawEx">ImageList_DrawEx</A> also have no effect on the appearance of a nonmasked image. 

<H4><A NAME="Drawing_the_image">Drawing the image</A></H4>
<P>The following function draws an image and saves the client coordinates of the image's bounding rectangle. A subsequent function uses the bounding rectangle to determine whether the user has clicked the image. 

<PRE>&#009;// DrawTheImage - draws an image transparently and saves 
&#009;//     the bounding rectangle of the drawn image.
&#009;// Returns TRUE if successful, or FALSE otherwise. 
&#009;// hwnd - handle to the window in which to draw the image. 
&#009;// himl - handle to the image list that contains the image. 
&#009;// cx and cy - client coordinates for the upper-left corner of the image. 
&#009;// 
&#009;// Global variables and constants 
&#009;//     g_nImage - index of the image to draw. 
&#009;//     g_rcImage - bounding rectangle of the image. 
&#009;//     CX_IMAGE and CY_IMAGE - width and height of the image. 
&#009;extern int g_nImage; 
&#009;extern RECT g_rcImage; 
&#009; 
&#009;#define CX_IMAGE 32 
&#009;#define CY_IMAGE 32 
 
&#009;BOOL DrawTheImage(HWND hwnd, HIMAGELIST himl, int cx, int cy) 
&#009;{ 
&#009;    HDC hdc; 
 
&#009;    if ((hdc = GetDC(hwnd)) == NULL) 
&#009;        return FALSE; 
&#009;    if (!ImageList_Draw(himl, g_nImage, hdc, cx, cy, ILD_TRANSPARENT)) 
&#009;        return FALSE; 
&#009;    ReleaseDC(hwnd, hdc); 
 
&#009;    SetRect(&amp;g_rcImage, cx, cy, CX_IMAGE + cx, CY_IMAGE + cy); 
 
&#009;    return TRUE; 
&#009;} 
</PRE>
<H3><A NAME="Dragging_Images">Dragging Images</A></H3>
<P>The Win32 API includes functions for dragging an image on the screen. The dragging functions move an image smoothly, in color, and without any flashing of the cursor. Both masked and unmasked images can be dragged.

<P>The <A HREF="functions/ImageList_BeginDrag.htm#ImageList_BeginDrag">ImageList_BeginDrag</A> function begins a drag operation. The parameters include the handle to the image list, the index of the image to drag, and the location of the hot spot within the image. The hot spot is a single pixel that the dragging functions recognize as the exact screen location of the image. Typically, an application sets the hot spot so that it coincides with the hot spot of the mouse cursor. The <A HREF="functions/ImageList_DragMove.htm#ImageList_DragMove">ImageList_DragMove</A> function moves the image to a new location.

<P>The <A HREF="functions/ImageList_DragEnter.htm#ImageList_DragEnter">ImageList_DragEnter</A> function sets the initial position of the drag image within a window and draws the image at the position. The parameters include the handle to the window in which to draw the image and the coordinates of the initial position within the window. The coordinates are relative to the window's upper-left corner, not the client area. The same is true for all of the image dragging functions that take coordinates as parameters. This means you must compensate for the widths of window elements such as the border, title bar, and menu bar when specifying the coordinates. If you specify a NULL window handle when calling <B>ImageList_DragEnter</B>, the dragging functions draw the image in the device context associated with the desktop window, and the coordinates are relative to the upper-left corner of the screen. 

<P><A HREF="functions/ImageList_DragEnter.htm#ImageList_DragEnter">ImageList_DragEnter</A> locks all other updates to the given window during the drag operation. If you need to do any drawing during a drag operation, such as highlighting the target of the operation, you can temporarily hide the dragged image by using the <A HREF="functions/ImageList_DragLeave.htm#ImageList_DragLeave">ImageList_DragLeave</A> function. Another method is to use the
<object id="hhal_3" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_3.Click()>GetDCEx</A> function with the DCX_LOCKWINDOWUPDATE value to retrieve a device context that allows you to draw. Be careful, however, not to obliterate the dragged image.

<P>The <A HREF="functions/ImageList_SetDragCursorImage.htm#ImageList_SetDragCur">ImageList_SetDragCursorImage</A> function creates a new drag image by combining the given image (typically a mouse cursor image) with the current drag image. Because the dragging functions use the new image during a drag operation, you should use the
<object id="hhal_4" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_4.Click()>ShowCursor</A> function to hide the actual mouse cursor after calling <B>ImageList_SetDragCursorImage</B>. Otherwise, the system may appear to have two mouse cursors for the duration of the drag operation.

<P>When an application calls <A HREF="functions/ImageList_BeginDrag.htm#ImageList_BeginDrag">ImageList_BeginDrag</A>, the system creates a temporary, internal image list and then copies the specified drag image to the internal list. You can retrieve the handle to the temporary drag image list by using the <A HREF="functions/ImageList_GetDragImage.htm#ImageList_GetDragIma">ImageList_GetDragImage</A> function. The function also retrieves the current drag position and the offset of the drag image relative to the drag position. 

<H4><A NAME="Beginning_the_drag_o">Beginning the drag operation</A></H4>
<P>The following function is intended to be called in response to a mouse button-down message, such as WM_LBUTTONDOWN. The function determines whether the user has clicked within the bounding rectangle of the image. If the user has clicked, the function captures the mouse input, erases the image from the client area, and calculates the position for the hot spot within the image. The function sets the hot spot to coincide with the hot spot of the mouse cursor. Then the function begins the drag operation by calling <A HREF="functions/ImageList_BeginDrag.htm#ImageList_BeginDrag">ImageList_BeginDrag</A>. 

<PRE>&#009;// StartDragging - begins dragging a bitmap. 
&#009;// Returns TRUE if successful, or FALSE otherwise. 
&#009;// hwnd - handle to the window in which the bitmap is dragged. 
&#009;// ptCur - coordinates of the cursor. 
&#009;// himl - handle to the image list. 
&#009;// 
&#009;// Global variables 
&#009;//     g_rcImage - bounding rectangle of the image to drag. 
&#009;//     g_nImage - index of the image. 
&#009;//     g_ptHotSpot - location of the image's hot spot. 
&#009;//     g_cxBorder and g_cyBorder - width and height of border. 
&#009;//     g_cyCaption and g_cyMenu - height of title bar and menu bar. 
&#009;extern RECT g_rcImage; 
&#009;extern int g_nImage; 
&#009;extern POINT g_ptHotSpot; 
&#009; 
&#009;BOOL StartDragging(HWND hwnd, POINT ptCur, HIMAGELIST himl) 
&#009;{ 
&#009;    // Return if the cursor is not in the bounding rectangle of 
&#009;    // the image. 
    if (!PtInRect(&amp;g_rcImage, ptCur)) 
        return FALSE; 
 
    // Capture the mouse input. 
    SetCapture(hwnd); 
 
    // Erase the image from the client area. 
    InvalidateRect(hwnd, &amp;g_rcImage, TRUE); 
    UpdateWindow(hwnd); 
 
    // Calculate the location of the hot spot, and save it. 
    g_ptHotSpot.x = ptCur.x - g_rcImage.left; 
    g_ptHotSpot.y = ptCur.y - g_rcImage.top; 
 
    // Begin the drag operation. 
    if (!ImageList_BeginDrag(himl, g_nImage, 
            g_ptHotSpot.x, g_ptHotSpot.y)) 
        return FALSE; 
 
    // Set the initial location of the image, and make it visible. 
    // Because the ImageList_DragEnter function expects coordinates to 
    // be relative to the upper-left corner of the given window, the 
    // width of the border, title bar, and menu bar need to be taken 
    // into account. 
    ImageList_DragEnter(hwnd, ptCur.x + g_cxBorder, 
        ptCur.y + g_cyBorder + g_cyCaption + g_cyMenu); 
 
    g_fDragging = TRUE; 
 
&#009;    return TRUE; 
&#009;} 
</PRE>
<H4><A NAME="Moving_the_image">Moving the image</A></H4>
<P>The following function, which drags the image to a new location, is intended to be called in response to the
<object id="hhal_5" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_5.Click()>WM_MOUSEMOVE</A> message. 

<PRE>&#009;// MoveTheImage - drags an image to the specified coordinates. 
&#009;// Returns TRUE if successful, or FALSE otherwise. 
&#009;// ptCur - new coordinates for the image. 
&#009;BOOL MoveTheImage(POINT ptCur) 
&#009;{ 
&#009;    if (!ImageList_DragMove(ptCur.x, ptCur.y)) 
        return FALSE; 
 
    return TRUE; 
&#009;} 
</PRE>
<H4><A NAME="Ending_the_drag_oper">Ending the drag operation</A></H4>
<P>The following function ends the drag operation and draws the image in its final location. It also releases the mouse capture.

<PRE>&#009;// StopDragging - ends a drag operation and draws the image 
&#009;//     at its final location. 
&#009;// Returns TRUE if successful, or FALSE otherwise. 
&#009;// hwnd - handle to the window in which the bitmap is dragged. 
&#009;// himl - handle to the image list. 
&#009;// ptCur - coordinates of the cursor. 
&#009;// 
&#009;// Global variable 
&#009;//     g_ptHotSpot - location of the image's hot spot. 
 
&#009;extern POINT g_ptHotSpot; 
 
&#009;BOOL StopDragging(HWND hwnd, HIMAGELIST himl, POINT ptCur) 
&#009;{ 
    ImageList_EndDrag(); 
    ImageList_DragLeave(hwnd) 
 
    g_fDragging = FALSE; 
 
    DrawTheImage(hwnd, himl, ptCur.x - g_ptHotSpot.x, 
        ptCur.y - g_ptHotSpot.y); 
 
    ReleaseCapture(); 
&#009;    return TRUE; 
&#009;} 
</PRE>
<H3><A NAME="Image_Information">Image Information</A></H3>
<P>There are a number of functions that retrieve information from an image list. The <A HREF="functions/ImageList_GetImageInfo.htm#ImageList_GetImageIn">ImageList_GetImageInfo</A> function fills an <A HREF="structures/IMAGEINFO.htm#IMAGEINFO">IMAGEINFO</A> structure with information about a single image, including the handles of the image and mask bitmaps, the number of color planes and bits per pixel, and the bounding rectangle of the image within the image bitmap. You can use this information to directly manipulate the bitmaps for the image. The <A HREF="functions/ImageList_GetImageCount.htm#ImageList_GetImageCo">ImageList_GetImageCount</A> function retrieves the number of images in an image list. 

 
<H3><A NAME="Image_Overlays">Image Overlays</A></H3>
<P>Every image list includes a list of indexes to use as overlays. An overlay is an image that is drawn transparently over another image. Any image currently in the image list can be used as an overlay. You can specify up to four overlays per image list. This limit has been expanded to 15 in version 4.71.

<P>You add the index of an image to the list of overlays by using the <A HREF="functions/ImageList_SetOverlayImage.htm#ImageList_SetOverlay">ImageList_SetOverlayImage</A> function, specifying the handle to the image list, the index of the existing image, and the desired overlay index. This, in effect, tells the image list that "the image at index <I>x</I> can be used as an overlay, and I want to refer to the overlay as overlay index <I>y</I>." The overlay indexes are one-based rather than zero-based because an overlay index of zero means that no overlay will be used. 

<P>You specify an overlay when drawing an image with the <A HREF="functions/ImageList_Draw.htm#ImageList_Draw">ImageList_Draw</A> or <A HREF="functions/ImageList_DrawEx.htm#ImageList_DrawEx">ImageList_DrawEx</A> function. The overlay is specified by performing a logical OR operation between the desired drawing flags and the result of the <A HREF="macros/INDEXTOOVERLAYMASK.htm#INDEXTOOVERLAYMASK">INDEXTOOVERLAYMASK</A> macro. The <B>INDEXTOOVERLAYMASK</B> macro takes the overlay index and formats it for inclusion with the flags for these functions. This will draw the image with the specified overlay. The following example demonstrates how an overlay is added and specified when drawing the image.

<PRE>ImageList_SetOverlayImage(himl, 0, 3);
ImageList_Draw(himl, 1, hdc, 0, 0, ILD_MASK | INDEXTOOVERLAYMASK(3));
</PRE>
<P>This will draw image 1 and then overlay that image with image 0. Because 3 is the overlay index that you specified in the <A HREF="functions/ImageList_SetOverlayImage.htm#ImageList_SetOverlay">ImageList_SetOverlayImage</A> call, 3 is placed in the <A HREF="macros/INDEXTOOVERLAYMASK.htm#INDEXTOOVERLAYMASK">INDEXTOOVERLAYMASK</A> macro.


 
<H2><A NAME="Image_List_Updates_i">Image List Updates in Internet Explorer</A></H2>
<P>The following features were added to the image list by Microsoft&#174; Internet Explorer.
<DL>
<DT><B>Copying Images</B>
</DT><DD>Copy or swap images within an image list using the <A HREF="functions/ImageList_Copy.htm#ImageList_Copy">ImageList_Copy</A> function. This function allows you to indicate whether the source image should be copied to the destination index or the source and destination images should be swapped. Currently, this is allowed only within a single image list.
</DD><DT><B>Duplicating Image Lists</B>
</DT><DD>Take an existing image list and duplicate all of its parameters and contents into a new image list using the <A HREF="functions/ImageList_Duplicate.htm#ImageList_Duplicate">ImageList_Duplicate</A> function. The image list returned by this function is an exact duplicate of the original image list and must be destroyed separately. Changes made to one image list do not affect the other.
</DD><DT><B>Dynamic Resizing of Image Lists</B>
</DT><DD>Modify the number of images in an image list on the fly using the <A HREF="functions/ImageList_SetImageCount.htm#ImageList_SetImageCo">ImageList_SetImageCount</A> function. If the number of images is increased, you must use the <A HREF="functions/ImageList_Replace.htm#ImageList_Replace">ImageList_Replace</A> function to place images in the added slots. If the number of images is reduced, the images beyond the new size are freed and are no longer available.
</DD><DT><B>Extended Drawing of Images</B>
</DT><DD>You now have more control over the drawing of images with the <A HREF="functions/ImageList_DrawIndirect.htm#ImageList_DrawIndire">ImageList_DrawIndirect</A> function. This function takes an <A HREF="structures/IMAGELISTDRAWPARAMS.htm#IMAGELISTDRAWPARAMS">IMAGELISTDRAWPARAMS</A> structure that specifies the details that will be used when drawing the image. With this function, you can now specify things like ROP codes when drawing. 
</DD></DL>

<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
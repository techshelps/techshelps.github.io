<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Trackbar Controls</TITLE>

<META NAME=MS-HKWD CONTENT="Trackbar Controls">
<META NAME="Keywords" CONTENT="Internet Tools & Technologies, Common controls">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT, Mac">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="ch_trackbar"></A>
<!--NAV_LINKS_START-->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Trackbar Controls"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../../art/headbard.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Trackbar Controls"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR><TR><TD><PRE><IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="../CommCtls.htm#book_cc">Topic Contents</A></PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="../tooltip/structures/TTHITTESTINFO.htm">TTHITTESTINFO</A>
<IMG SRC="../../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="RefList.htm">Trackbar Control Reference</A></PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>Trackbar Controls</H1>
<BR CLEAR=ALL>
<P>A <I>trackbar</I> is a window that contains a slider and optional tick marks. When the user moves the slider, using either the mouse or the direction keys, the trackbar sends notification messages to indicate the change. 

<P><A CLASS=tctop HREF="TrackBar.htm#About_Trackbar_Contr"><IMG SRC="../../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">About Trackbar Controls</A><BR>
<P><A CLASS=tctop HREF="TrackBar.htm#Using_Trackbar_Contr"><IMG SRC="../../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Using Trackbar Controls</A><BR>
<P><A CLASS=tctop HREF="TrackBar.htm#tkb_updates"><IMG SRC="../../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Trackbar Control Updates in Internet Explorer</A><BR>
<P><A CLASS=tctop HREF="RefList.htm#trackbar_TrackBar"><IMG SRC="../../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Trackbar Control Reference</A><BR>
<!--************************************************************--><H2><A NAME="About_Trackbar_Contr">About Trackbar Controls</A></H2>
<P>Trackbars are useful when you want the user to select a discrete value or a set of consecutive values in a range. For example, you might use a trackbar to allow the user to set the repeat rate of the keyboard by moving the slider to a given tick mark. The following illustration shows a typical trackbar.
<P><IMG SRC="../../../art/trk_scrn.gif" WIDTH="228" HEIGHT="48" ALT="A typical trackbar." >

<P>The slider in a trackbar moves in increments that you specify when you create it. For example, if you specify that the trackbar should have a range from zero to five, the slider can occupy only six positions: a position at the left side of the trackbar and one position for each increment in the range. Typically, each of these positions is identified by a tick mark. 

<P>You create a trackbar by using the
<object id="hhal_3" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_3.Click()>CreateWindowEx</A> function, specifying the TRACKBAR_CLASS window class. After you have created a trackbar, you can use trackbar messages to set and retrieve many of its properties. Changes that you can make include setting the minimum and maximum positions for the slider, drawing tick marks, setting a selection range, and repositioning the slider.

<H3><A NAME="Trackbar_Messages">Trackbar Messages</A></H3>
<P>An application can send messages to the trackbar to retrieve information about the window and to change its characteristics. 

<P>To retrieve the position of the slider (that is, the value the user has chosen), use the <A HREF="messages/TBM_GETPOS.htm#TBM_GETPOS">TBM_GETPOS</A> message. To set the position of the slider, use the <A HREF="messages/TBM_SETPOS.htm#TBM_SETPOS">TBM_SETPOS</A> message.

<P>The range of a trackbar is the set of contiguous values that the trackbar can represent. Most applications use the <A HREF="messages/TBM_SETRANGE.htm#TBM_SETRANGE">TBM_SETRANGE</A> message to set the range of a trackbar when it is first created. Applications can dynamically alter the range by using the <A HREF="messages/TBM_SETRANGEMAX.htm#TBM_SETRANGEMAX">TBM_SETRANGEMAX</A> and <A HREF="messages/TBM_SETRANGEMIN.htm#TBM_SETRANGEMIN">TBM_SETRANGEMIN</A> messages. An application that allows the range to be changed dynamically typically retrieves the final range settings when the user has finished working with the trackbar. To retrieve these settings, use the <A HREF="messages/TBM_GETRANGEMAX.htm#TBM_GETRANGEMAX">TBM_GETRANGEMAX</A> and <A HREF="messages/TBM_GETRANGEMIN.htm#TBM_GETRANGEMIN">TBM_GETRANGEMIN</A> messages.

<P>A trackbar automatically displays tick marks at its beginning and end, unless you specify the <A HREF="Styles.htm#TBS_NOTICKS">TBS_NOTICKS</A> style. You can use the <A HREF="Styles.htm#TBS_AUTOTICKS">TBS_AUTOTICKS</A> style to automatically display additional tick marks at regular intervals along the trackbar. By default, a <B>TBS_AUTOTICKS</B> trackbar displays a tick mark at each increment of the trackbar's range. To specify a different interval for the automatic tick marks, send the <A HREF="messages/TBM_SETTICFREQ.htm#TBM_SETTICFREQ">TBM_SETTICFREQ</A> message to the trackbar. For example, you could use this message to display only 10 tick marks in a range of 1 through 100. 

<P>To set the position of a single tick mark, send the <A HREF="messages/TBM_SETTIC.htm#TBM_SETTIC">TBM_SETTIC</A> message. A trackbar maintains an array of DWORD values that stores the position of each tick mark. The array does not include the first and last tick marks that the trackbar creates automatically. You can specify an index in this array when you send the <A HREF="messages/TBM_GETTIC.htm#TBM_GETTIC">TBM_GETTIC</A> message to get the position of the corresponding tick mark. Alternatively, you can send the <A HREF="messages/TBM_GETPTICS.htm#TBM_GETPTICS">TBM_GETPTICS</A> message to get a pointer to the array. The number of elements in the array is equal to two less than the tick count returned by the <A HREF="messages/TBM_GETNUMTICS.htm#TBM_GETNUMTICS">TBM_GETNUMTICS</A> message. This is because the count returned by <B>TBM_GETNUMTICS</B> includes the first and last tick marks that are not included in the array. To retrieve the physical position of a tick mark, in client coordinates of the trackbar's window, send the <A HREF="messages/TBM_GETTICPOS.htm#TBM_GETTICPOS">TBM_GETTICPOS</A> message. The <A HREF="messages/TBM_CLEARTICS.htm#TBM_CLEARTICS">TBM_CLEARTICS</A> message removes all but the first and last of a trackbar's tick marks.

<P>A trackbar's line size determines how far the slider moves in response to keyboard input from the arrow keys, such as the <SMALL>RIGHT ARROW</SMALL> or <SMALL>DOWN ARROW</SMALL> key. To retrieve or set the line size, send the <A HREF="messages/TBM_GETLINESIZE.htm#TBM_GETLINESIZE">TBM_GETLINESIZE</A> and <A HREF="messages/TBM_SETLINESIZE.htm#TBM_SETLINESIZE">TBM_SETLINESIZE</A> messages. The trackbar also sends the <A HREF="TrackBar.htm#TB_LINEUP">TB_LINEUP</A> and <A HREF="TrackBar.htm#TB_LINEDOWN">TB_LINEDOWN</A> notification messages to its parent window when the user presses the arrow keys.

<P>A trackbar's page size determines how far the slider moves in response to keyboard input, such as the <SMALL>PAGE UP</SMALL> or <SMALL>PAGE DOWN</SMALL> keys, or mouse input, such as clicks in the trackbar channel. To retrieve or set the page size, send the <A HREF="messages/TBM_GETPAGESIZE.htm#TBM_GETPAGESIZE">TBM_GETPAGESIZE</A> and <A HREF="messages/TBM_SETPAGESIZE.htm#TBM_SETPAGESIZE">TBM_SETPAGESIZE</A> messages. The trackbar also sends the <A HREF="TrackBar.htm#TB_PAGEUP">TB_PAGEUP</A> and <A HREF="TrackBar.htm#TB_PAGEDOWN">TB_PAGEDOWN</A> notification messages to its parent window when it receives keyboard or mouse input that scrolls the page. For more information, see <A HREF="TrackBar.htm#tkb_notifications">Trackbar Notification Messages</A>.

<P>An application can send messages to retrieve the dimensions of a trackbar. The <A HREF="messages/TBM_GETTHUMBRECT.htm#TBM_GETTHUMBRECT">TBM_GETTHUMBRECT</A> message retrieves the bounding rectangle for the slider. The <A HREF="messages/TBM_GETTHUMBLENGTH.htm#TBM_GETTHUMBLENGTH">TBM_GETTHUMBLENGTH</A> message retrieves the length of the slider. The <A HREF="messages/TBM_GETCHANNELRECT.htm#TBM_GETCHANNELRECT">TBM_GETCHANNELRECT</A> message retrieves the bounding rectangle for the trackbar's channel, which is the area over which the slider moves. It contains the highlight when a range is selected. If a trackbar has the <A HREF="Styles.htm#TBS_FIXEDLENGTH">TBS_FIXEDLENGTH</A> style, you can send the <A HREF="messages/TBM_SETTHUMBLENGTH.htm#TBM_SETTHUMBLENGTH">TBM_SETTHUMBLENGTH</A> message to change the length of the slider.

<P>A trackbar with the <A HREF="Styles.htm#TBS_ENABLESELRANGE">TBS_ENABLESELRANGE</A> style can indicate a selection range by highlighting a range of the trackbar's channel and displaying triangular tick marks at the start and end of the selection. When a trackbar has this style, you can send messages to set and retrieve the selection range. Typically, an application handles the trackbar notification messages and sets the trackbar's selection range according to the user's input. The <A HREF="messages/TBM_SETSEL.htm#TBM_SETSEL">TBM_SETSEL</A> message sets the starting and ending positions of a selection. To set just the starting position or just the ending position of a selection, use the <A HREF="messages/TBM_SETSELSTART.htm#TBM_SETSELSTART">TBM_SETSELSTART</A> or <A HREF="messages/TBM_SETSELEND.htm#TBM_SETSELEND">TBM_SETSELEND</A> message. To retrieve the starting and ending positions of a selection range, send the <A HREF="messages/TBM_GETSELSTART.htm#TBM_GETSELSTART">TBM_GETSELSTART</A> and <A HREF="messages/TBM_GETSELEND.htm#TBM_GETSELEND">TBM_GETSELEND</A> messages. To clear a selection range, send the <A HREF="messages/TBM_CLEARSEL.htm#TBM_CLEARSEL">TBM_CLEARSEL</A> message.

<H3><A NAME="tkb_notifications">Trackbar Notification Messages</A></H3>
<P>A trackbar notifies its parent window of user actions by sending the parent
<object id="hhal_4" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_4.Click()>WM_HSCROLL</A> or
<object id="hhal_5" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_5.Click()>WM_VSCROLL</A> messages. A trackbar with the <A HREF="Styles.htm#TBS_HORZ">TBS_HORZ</A> style sends <B>WM_HSCROLL</B> messages. A trackbar with the <A HREF="Styles.htm#TBS_VERT">TBS_VERT</A> style sends <B>WM_VSCROLL</B> messages. The low-order word of the <I>wParam</I> parameter of <B>WM_HSCROLL</B> or <B>WM_VSCROLL</B> contains the notification code. For the <A HREF="TrackBar.htm#TB_THUMBPOSITION">TB_THUMBPOSITION</A> and <A HREF="TrackBar.htm#TB_THUMBTRACK">TB_THUMBTRACK</A> notifications, the high-order word of the <I>wParam</I> parameter specifies the position of the slider. For all other notifications, the high-order word is zero; send the <A HREF="messages/TBM_GETPOS.htm#TBM_GETPOS">TBM_GETPOS</A> message to determine the slider position. The <I>lParam</I> parameter is the handle of the trackbar.

<P>The system sends the <A HREF="TrackBar.htm#TB_BOTTOM">TB_BOTTOM</A>, <A HREF="TrackBar.htm#TB_LINEDOWN">TB_LINEDOWN</A>, <A HREF="TrackBar.htm#TB_LINEUP">TB_LINEUP</A>, and <A HREF="TrackBar.htm#TB_TOP">TB_TOP</A> notification messages only when the user interacts with a trackbar by using the keyboard. The <A HREF="TrackBar.htm#TB_THUMBPOSITION">TB_THUMBPOSITION</A> and <A HREF="TrackBar.htm#TB_THUMBTRACK">TB_THUMBTRACK</A> notification messages are only sent when the user is using the mouse. The <A HREF="TrackBar.htm#TB_ENDTRACK">TB_ENDTRACK</A>, <A HREF="TrackBar.htm#TB_PAGEDOWN">TB_PAGEDOWN</A>, and <A HREF="TrackBar.htm#TB_PAGEUP">TB_PAGEUP</A> notification messages are sent in both cases. The following table lists the trackbar notification messages and the events (virtual key codes or mouse events) that cause the notifications to be sent.

<TABLE>
<TR><TD><B>Notification message
 </B></TD><TD><B>Reason sent
</B></TD></TR><TR><TD><B><A NAME="TB_BOTTOM">TB_BOTTOM</A></B>
 </TD><TD>VK_END</TD></TR><TR><TD><B><A NAME="TB_ENDTRACK">TB_ENDTRACK</A></B>
 </TD><TD>WM_KEYUP (the user released a key that sent a relevant virtual key code)</TD></TR><TR><TD><B><A NAME="TB_LINEDOWN">TB_LINEDOWN</A></B>
 </TD><TD>VK_RIGHT or VK_DOWN</TD></TR><TR><TD><B><A NAME="TB_LINEUP">TB_LINEUP</A></B>
 </TD><TD>VK_LEFT or VK_UP</TD></TR><TR><TD><B><A NAME="TB_PAGEDOWN">TB_PAGEDOWN</A></B>
 </TD><TD>VK_NEXT (the user clicked the channel below or to the right of the slider)</TD></TR><TR><TD><B><A NAME="TB_PAGEUP">TB_PAGEUP</A></B>
 </TD><TD>VK_PRIOR (the user clicked the channel above or to the left of the slider)</TD></TR><TR><TD><B><A NAME="TB_THUMBPOSITION">TB_THUMBPOSITION</A></B>
 </TD><TD>WM_LBUTTONUP following a TB_THUMBTRACK notification message</TD></TR><TR><TD><B><A NAME="TB_THUMBTRACK">TB_THUMBTRACK</A></B>
 </TD><TD>Slider movement (the user dragged the slider)</TD></TR><TR><TD><B><A NAME="TB_TOP">TB_TOP</A></B>
 </TD><TD>VK_HOME</TD></TR></TABLE>
<H3><A NAME="Default_Trackbar_Mes">Default Trackbar Message Processing</A></H3>
<P>This section describes the window message processing performed by a trackbar.

<TABLE>
<TR><TD><B>Message
 </B></TD><TD><B>Processing performed
</B></TD></TR><TR><TD>WM_CAPTURECHANGED
 </TD><TD>Kills the timer if one was set during
<object id="hhal_6" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_6.Click()>WM_LBUTTONDOWN</A> processing and sends the <A HREF="TrackBar.htm#TB_THUMBPOSITION">TB_THUMBPOSITION</A> notification message, if necessary. It always sends the <A HREF="TrackBar.htm#TB_ENDTRACK">TB_ENDTRACK</A> notification message.</TD></TR><TR><TD>WM_CREATE
 </TD><TD>Performs additional initialization, such as setting the line size, page size, and tick mark frequency to default values. </TD></TR><TR><TD>WM_DESTROY
 </TD><TD>Frees resources.</TD></TR><TR><TD>WM_ENABLE
 </TD><TD>Repaints the trackbar window.</TD></TR><TR><TD>WM_ERASEBKGND
 </TD><TD>Erases the window background, using the current background color for the trackbar.</TD></TR><TR><TD>WM_GETDLGCODE
 </TD><TD>Returns the DLGC_WANTARROWS value.</TD></TR><TR><TD>WM_KEYDOWN
 </TD><TD>Processes the direction keys and sends the <A HREF="TrackBar.htm#TB_TOP">TB_TOP</A>, <A HREF="TrackBar.htm#TB_BOTTOM">TB_BOTTOM</A>, <A HREF="TrackBar.htm#TB_PAGEUP">TB_PAGEUP</A>, <A HREF="TrackBar.htm#TB_PAGEDOWN">TB_PAGEDOWN</A>, <A HREF="TrackBar.htm#TB_LINEUP">TB_LINEUP</A>, and <A HREF="TrackBar.htm#TB_LINEDOWN">TB_LINEDOWN</A> notification messages, as appropriate.</TD></TR><TR><TD>WM_KEYUP
 </TD><TD>Sends the <A HREF="TrackBar.htm#TB_ENDTRACK">TB_ENDTRACK</A> notification message if the key was one of the direction keys.</TD></TR><TR><TD>WM_KILLFOCUS
 </TD><TD>Repaints the trackbar window.</TD></TR><TR><TD>WM_LBUTTONDOWN
 </TD><TD>Sets the focus and the mouse capture to the trackbar. When necessary, it sets a timer that determines how quickly the slider moves toward the mouse cursor when the user holds down the mouse button in the window.</TD></TR><TR><TD>WM_LBUTTONUP
 </TD><TD>Releases the mouse capture and kills the timer if one was set during
<object id="hhal_7" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_7.Click()>WM_LBUTTONDOWN</A> processing. It sends the <A HREF="TrackBar.htm#TB_THUMBPOSITION">TB_THUMBPOSITION</A> notification message, if necessary. It always sends the <A HREF="TrackBar.htm#TB_ENDTRACK">TB_ENDTRACK</A> notification message.</TD></TR><TR><TD>WM_MOUSEMOVE
 </TD><TD>Moves the slider and sends the <A HREF="TrackBar.htm#TB_THUMBTRACK">TB_THUMBTRACK</A> notification message when tracking the mouse (see WM_TIMER).</TD></TR><TR><TD>WM_PAINT
 </TD><TD>Paints the trackbar. If the <I>wParam</I> parameter is non-NULL, the control assumes that the value is an HDC and paints using that device context.</TD></TR><TR><TD>WM_SETFOCUS
 </TD><TD>Repaints the trackbar window.</TD></TR><TR><TD>WM_SIZE
 </TD><TD>Sets the dimensions of the trackbar, removing the slider if there is not enough room to display it.</TD></TR><TR><TD>WM_TIMER
 </TD><TD>Retrieves the mouse position and updates the position of the slider. (It is received only when the user is dragging the slider.)</TD></TR><TR><TD>WM_WININICHANGE
 </TD><TD>Initializes slider dimensions.</TD></TR></TABLE>
<H2><A NAME="Using_Trackbar_Contr">Using Trackbar Controls</A></H2>
<P>This section provides examples that demonstrate how to create a trackbar and process trackbar notification messages. 

<H3><A NAME="Creating_a_Trackbar">Creating a Trackbar</A></H3>
<P>The following example shows how to create a trackbar with the <A HREF="Styles.htm#TBS_AUTOTICKS">TBS_AUTOTICKS</A> and <A HREF="Styles.htm#TBS_ENABLESELRANGE">TBS_ENABLESELRANGE</A> styles. When the trackbar is created, both its range and its selection range are initialized. The page size is also set at this time. 

<PRE>&#009;// CreateTrackbar - creates and initializes a trackbar. 
&#009;// 
&#009;// Global variable 
&#009;//     g_hinst - instance handle 
&#009;HWND WINAPI CreateTrackbar( 
    HWND hwndDlg,  // handle of dialog box (parent window) 
    UINT iMin,     // minimum value in trackbar range 
    UINT iMax,     // maximum value in trackbar range 
    UINT iSelMin,  // minimum value in trackbar selection 
    UINT iSelMax)  // maximum value in trackbar selection 
&#009;{ 
 
    InitCommonControls(); // loads common control's DLL 
 
    hwndTrack = CreateWindowEx( 
        0,                             // no extended styles 
        TRACKBAR_CLASS,                // class name 
        "Trackbar Control",            // title (caption) 
        WS_CHILD | WS_VISIBLE | 
        TBS_AUTOTICKS | TBS_ENABLESELRANGE,  // style 
        10, 10,                        // position 
        200, 30,                       // size 
        hwndDlg,                       // parent window 
        ID_TRACKBAR,             // control identifier 
        g_hinst,                       // instance 
        NULL                           // no WM_CREATE parameter 
        ); 
 
    SendMessage(hwndTrack, TBM_SETRANGE, 
        (WPARAM) TRUE,                   // redraw flag 
        (LPARAM) MAKELONG(iMin, iMax));  // min. &amp; max. positions 
    SendMessage(hwndTrack, TBM_SETPAGESIZE, 
        0, (LPARAM) 4);                  // new page size 
 
    SendMessage(hwndTrack, TBM_SETSEL, 
        (WPARAM) FALSE,                  // redraw flag 
        (LPARAM) MAKELONG(iSelMin, iSelMax); 
    SendMessage(hwndTrack, TBM_SETPOS, 
        (WPARAM) TRUE,                   // redraw flag 
        (LPARAM) iSelMin); 
 
    SetFocus(hwndTrack); 
 
    return hwndTrack; 
&#009;} 
</PRE>
<H3><A NAME="Processing_Trackbar_">Processing Trackbar Notification Messages</A></H3>
<P>The following example is a function that is called whenever a
<object id="hhal_8" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_8.Click()>WM_HSCROLL</A> message is received by the dialog box containing the trackbar. The trackbar has the <A HREF="Styles.htm#TBS_ENABLESELRANGE">TBS_ENABLESELRANGE</A> style. The position of the slider is compared against the selection range, and the slider is moved to the starting or ending position of the selection range, when necessary.

<P>A dialog containing a trackbar with the <A HREF="Styles.htm#TBS_VERT">TBS_VERT</A> style could use this function when it receives a
<object id="hhal_9" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_9.Click()>WM_VSCROLL</A> message.

<PRE>&#009;// TBNotifications - handles trackbar notifications received 
&#009;//     in the wParam parameter of WM_HSCROLL. This function simply 
&#009;//     ensures that the slider remains within the selection range. 
 
&#009;VOID WINAPI TBNotifications( 
    WPARAM wParam,  // wParam of WM_HSCROLL message 
    HWND hwndTrack, // handle of trackbar window 
    UINT iSelMin,   // minimum value of trackbar selection 
    UINT iSelMax)   // maximum value of trackbar selection 
&#009;{ 
    DWORD dwPos;    // current position of slider 
 
    switch (LOWORD(wParam)) { 
        case TB_ENDTRACK: 
            dwPos = SendMessage(hwndTrack, TBM_GETPOS, 0, 0); 
            if (dwPos &gt; iSelMax) 
                SendMessage(hwndTrack, TBM_SETPOS, 
                    (WPARAM) TRUE,       // redraw flag 
                    (LPARAM) iSelMax); 
            else if (dwPos &lt; iSelMin) 
                SendMessage(hwndTrack, TBM_SETPOS, 
                    (WPARAM) TRUE,       // redraw flag 
                    (LPARAM) iSelMin); 
            break; 
 
        default: 
            break; 
 
        } 
&#009;} 
</PRE>
<H2><A NAME="tkb_updates">Trackbar Control Updates in Internet Explorer</A></H2>
<P>Trackbar controls in Microsoft&#174; Internet Explorer support the following new features. 
<DL>
<DT>Buddy Windows
 </DT><DD>Trackbar controls now provide support for up to two buddy windows. Trackbar buddy windows are automatically positioned by the control to appear centered at the ends of the trackbar control. To assign an existing window to a trackbar, use the <A HREF="messages/TBM_SETBUDDY.htm#TBM_SETBUDDY">TBM_SETBUDDY</A> message. To retrieve the handle to a given buddy window, send the <A HREF="messages/TBM_GETBUDDY.htm#TBM_GETBUDDY">TBM_GETBUDDY</A> message.
</DD><DT>Tooltips
 </DT><DD>Trackbar controls now support tooltips. A trackbar creates a default tooltip control when created with the <A HREF="Styles.htm#TBS_TOOLTIPS">TBS_TOOLTIPS</A> style. However, you can assign a new tooltip control to a trackbar by sending the <A HREF="messages/TBM_SETTOOLTIPS.htm#TBM_SETTOOLTIPS">TBM_SETTOOLTIPS</A> message. To retrieve the handle to an assigned tooltip control, use the <A HREF="messages/TBM_GETTOOLTIPS.htm#TBM_GETTOOLTIPS">TBM_GETTOOLTIPS</A> message.
</DD></DL>

<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
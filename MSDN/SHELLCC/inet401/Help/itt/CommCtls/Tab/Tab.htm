<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tab Controls</TITLE>

<META NAME=MS-HKWD CONTENT="Tab Controls">
<META NAME="Keywords" CONTENT="Internet Tools & Technologies, Common controls">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT, Mac">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="ch_tab"></A>
<!--NAV_LINKS_START-->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Tab Controls"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../../art/headbard.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Tab Controls"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR><TR><TD><PRE><IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="../CommCtls.htm#book_cc">Topic Contents</A></PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="../status/notifications/SBN_SIMPLEMODECHANGE.htm">SBN_SIMPLEMODECHANGE</A>
<IMG SRC="../../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="RefList.htm">Tab Control Reference</A></PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>Tab Controls</H1>
<BR CLEAR=ALL>
<P>A <I>tab control</I> is analogous to the dividers in a notebook or the labels in a file cabinet. By using a tab control, an application can define multiple <I>pages</I> for the same area of a window or dialog box. Each page consists of a certain type of information or a group of controls that the application displays when the user selects the corresponding tab. 
<P><A CLASS=tctop HREF="Tab.htm#About_Tab_Controls"><IMG SRC="../../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">About Tab Controls</A><BR>
<P><A CLASS=tctop HREF="Tab.htm#Using_Tab_Controls"><IMG SRC="../../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Using Tab Controls</A><BR>
<P><A CLASS=tctop HREF="Tab.htm#Tab_Control_Updates_"><IMG SRC="../../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Tab Control Updates in Internet Explorer</A><BR>
<P><A CLASS=tctop HREF="RefList.htm#tab_Tab"><IMG SRC="../../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Tab Control Reference</A><BR>
<!--************************************************************--><H2><A NAME="About_Tab_Controls">About Tab Controls</A></H2>
<P>You can create a tab control by calling the
<object id="hhal_3" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_3.Click()>CreateWindowEx</A> function, specifying the WC_TABCONTROL window class. This window class is registered when the common controls dynamic-link library (DLL) is loaded. To ensure that the DLL is loaded, use the <A HREF="../common/functions/InitCommonControls.htm#InitCommonControls">InitCommonControls</A> function.

<P>You send messages to a tab control to add tabs and otherwise affect the control's appearance and behavior. Each message has a corresponding macro that you can use instead of sending the message explicitly. You cannot disable an individual tab in a tab control. However, you can disable a tab control in a property sheet by disabling the corresponding page.

<H3><A NAME="About_Tab_Control_St">About Tab Control Styles</A></H3>
<P>You can apply certain characteristics to tab controls by specifying tab control styles when the control is created. For example, you can specify the alignment and general appearance of the tabs in a tab control.

<P>You can cause the tabs to look like buttons by specifying the <A HREF="Styles.htm#TCS_BUTTONS">TCS_BUTTONS</A> style. Tabs in this type of tab control should serve the same function as button controls; that is, clicking a tab should carry out a command instead of displaying a page. Because the display area in a button tab control is typically not used, no border is drawn around it.

<P>You can cause a tab to receive the input focus when clicked by specifying the <A HREF="Styles.htm#TCS_FOCUSONBUTTONDOW">TCS_FOCUSONBUTTONDOWN</A> style. This style is typically used only with the <A HREF="Styles.htm#TCS_BUTTONS">TCS_BUTTONS</A> style. You can specify that a tab never receives the input focus by using the <A HREF="Styles.htm#TCS_FOCUSNEVER">TCS_FOCUSNEVER</A> style.

<P>By default, a tab control displays only one row of tabs. If not all tabs can be shown at once, the tab control displays an up-down control so that the user can scroll additional tabs into view. You can cause a tab control to display multiple rows of tabs, if necessary, by specifying the <A HREF="Styles.htm#TCS_MULTILINE">TCS_MULTILINE</A> style. With this style, all tabs can be displayed at once. The tabs are left-aligned within each row unless you specify the <A HREF="Styles.htm#TCS_RIGHTJUSTIFY">TCS_RIGHTJUSTIFY</A> style. In this case, the width of each tab is increased so that each row of tabs fills the entire width of the tab control. 

<P>A tab control automatically sizes each tab to fit its icon, if any, and its label. To give all tabs the same width, you can specify the <A HREF="Styles.htm#TCS_FIXEDWIDTH">TCS_FIXEDWIDTH</A> style. The control sizes all the tabs to fit the widest label, or you can assign a specific width and height by using the <A HREF="messages/TCM_SETITEMSIZE.htm#TCM_SETITEMSIZE">TCM_SETITEMSIZE</A> message. Within each tab, the control centers the icon and label, placing the icon to the left of the label. You can force the icon to the left, leaving the label centered, by specifying the <A HREF="Styles.htm#TCS_FORCEICONLEFT">TCS_FORCEICONLEFT</A> style. You can left-align both the icon and label by using the <A HREF="Styles.htm#TCS_FORCELABELLEFT">TCS_FORCELABELLEFT</A> style. You cannot use the <B>TCS_FIXEDWIDTH</B> style with the <A HREF="Styles.htm#TCS_RIGHTJUSTIFY">TCS_RIGHTJUSTIFY</A> style.

<P>You can specify that the parent window draws the tabs in the control by using the <A HREF="Styles.htm#TCS_OWNERDRAWFIXED">TCS_OWNERDRAWFIXED</A> style. For more information, see <A HREF="Tab.htm#tab_ownerdraw">Owner-Drawn Tabs</A>. 

<P>You can specify that a tab control will create a tooltip control by using the <A HREF="Styles.htm#TCS_TOOLTIPS">TCS_TOOLTIPS</A> style. For more information about this, see <A HREF="Tab.htm#tab_tooltips">Tab Control Tooltips</A>. 

<H3><A NAME="Tabs_and_Tab_Attribu">Tabs and Tab Attributes</A></H3>
<P>Each tab in a tab control consists of an icon, a label, and application-defined data. This information is specified by a <A HREF="structures/TCITEM.htm#TC_ITEM">TCITEM</A> structure. You can add tabs to a tab control, get the number of tabs, retrieve and set the contents of a tab, and delete tabs. Tabs are identified by their zero-based index.

<P>To add tabs to a tab control, use the <A HREF="messages/TCM_INSERTITEM.htm#TCM_INSERTITEM">TCM_INSERTITEM</A> message, specifying the position of the item and the address of a <A HREF="structures/TCITEM.htm#TC_ITEM">TCITEM</A> structure. You can retrieve and set the contents of an existing tab by using the <A HREF="messages/TCM_GETITEM.htm#TCM_GETITEM">TCM_GETITEM</A> and <A HREF="messages/TCM_SETITEM.htm#TCM_SETITEM">TCM_SETITEM</A> messages. For each tab, you can specify an icon, a label, or both. You can also specify application-defined data to associate with the tab.

<P>You can retrieve the current number of tabs by using the <A HREF="messages/TCM_GETITEMCOUNT.htm#TCM_GETITEMCOUNT">TCM_GETITEMCOUNT</A> message, delete a tab by using the <A HREF="messages/TCM_DELETEITEM.htm#TCM_DELETEITEM">TCM_DELETEITEM</A> message, and delete all tabs in a tab control by using the <A HREF="messages/TCM_DELETEALLITEMS.htm#TCM_DELETEALLITEMS">TCM_DELETEALLITEMS</A> message.

<P>You can associate application-defined data with each tab. For example, you might save information about each page with its corresponding tab. By default, a tab control allocates four extra bytes per tab for application-defined data. You can change the number of extra bytes per tab by using the <A HREF="messages/TCM_SETITEMEXTRA.htm#TCM_SETITEMEXTRA">TCM_SETITEMEXTRA</A> message. You can only use this message when the tab control is empty.

<P>The application-defined data is specified by the <B>lParam</B> member of the <A HREF="structures/TCITEM.htm#TC_ITEM">TCITEM</A> structure. If you use more than 4 bytes of application-defined data, you need to define your own structure and use it instead of <B>TCITEM</B>. You can retrieve and set application-defined data the same way you retrieve and set other information about a tab&#151;by using the <A HREF="messages/TCM_GETITEM.htm#TCM_GETITEM">TCM_GETITEM</A> and <A HREF="messages/TCM_SETITEM.htm#TCM_SETITEM">TCM_SETITEM</A> messages.

<P>The first member of your structure must be a <A HREF="structures/TCITEMHEADER.htm#TC_ITEMHEADER">TCITEMHEADER</A> structure, and the remaining members must specify application-defined data. <B>TCITEMHEADER</B> is identical to <A HREF="structures/TCITEM.htm#TC_ITEM">TCITEM</A>, except it does not have the <B>lParam</B> member. The difference between the size of your structure and the size of <B>TCITEMHEADER</B> should equal the number of extra bytes per tab.

<H3><A NAME="Display_Area">Display Area</A></H3>
<P>The <I>display area</I> of a tab control is the area in which an application displays the current page. Typically, an application creates a child window or dialog box, setting the window size and position to fit the display area. Given the window rectangle for a tab control, you can calculate the bounding rectangle of the display area by using the <A HREF="messages/TCM_ADJUSTRECT.htm#TCM_ADJUSTRECT">TCM_ADJUSTRECT</A> message. 

<P>Sometimes the display area must be a particular size&#151;for example, the size of a modeless child dialog box. Given the bounding rectangle for the display area, you can use <A HREF="messages/TCM_ADJUSTRECT.htm#TCM_ADJUSTRECT">TCM_ADJUSTRECT</A> to calculate the corresponding window rectangle for the tab control.

<H3><A NAME="Tab_Selection">Tab Selection</A></H3>
<P>When the user selects a tab, a tab control sends its parent window notification messages in the form of <A HREF="../common/messages/WM_NOTIFY.htm#WM_NOTIFY">WM_NOTIFY</A> messages. The <A HREF="notifications/TCN_SELCHANGING.htm#TCN_SELCHANGING">TCN_SELCHANGING</A> notification message is sent before the selection changes, and the <A HREF="notifications/TCN_SELCHANGE.htm#TCN_SELCHANGE">TCN_SELCHANGE</A> notification message is sent after the selection changes.

<P>You can process <A HREF="notifications/TCN_SELCHANGING.htm#TCN_SELCHANGING">TCN_SELCHANGING</A> to save the state of the outgoing page. You can return TRUE to prevent the selection from changing. For example, you might not want to switch away from a child dialog box in which a control has an invalid setting.

<P>You must process <A HREF="notifications/TCN_SELCHANGE.htm#TCN_SELCHANGE">TCN_SELCHANGE</A> to display the incoming page in the display area. This might simply entail changing the information displayed in a child window. More often, each page consists of a child window or dialog box. In this case, an application might process this notification by destroying or hiding the outgoing child window or dialog box and by creating or showing the incoming child window or dialog box.

<P>You can retrieve and set the current selection by using the <A HREF="messages/TCM_GETCURSEL.htm#TCM_GETCURSEL">TCM_GETCURSEL</A> and <A HREF="messages/TCM_SETCURSEL.htm#TCM_SETCURSEL">TCM_SETCURSEL</A> messages.

<H3><A NAME="Tab_Control_Image_Li">Tab Control Image Lists</A></H3>
<P>Each tab can have an icon associated with it, which is specified by an index in the image list for the tab control. When a tab control is created, it has no image list associated with it. An application can create an image list by using the <A HREF="../imagelist/functions/ImageList_Create.htm#ImageList_Create">ImageList_Create</A> function and then assign it to a tab control by using the <A HREF="messages/TCM_SETIMAGELIST.htm#TCM_SETIMAGELIST">TCM_SETIMAGELIST</A> message.

<P>You can add images to a tab control's image list just as you would to any other image list. However, an application should remove images by using the <A HREF="messages/TCM_REMOVEIMAGE.htm#TCM_REMOVEIMAGE">TCM_REMOVEIMAGE</A> message instead of the <A HREF="../imagelist/functions/ImageList_Remove.htm#ImageList_Remove">ImageList_Remove</A> function. This message ensures that each tab remains associated with the same image as before. 

<P>Destroying a tab control does not destroy an image list that is associated with it. You must destroy the image list separately. This is useful if you want to assign the same image list to multiple tab controls.

<P>To retrieve the handle to the image list currently associated with a tab control, you can use the <A HREF="messages/TCM_GETIMAGELIST.htm#TCM_GETIMAGELIST">TCM_GETIMAGELIST</A> message. 

<H3><A NAME="Tab_Size_and_Positio">Tab Size and Position</A></H3>
<P>Each tab in a tab control has a size and position. You can set the size of tabs, retrieve the bounding rectangle of a tab, or determine which tab is at a specified position.

<P>For fixed-width and owner-drawn tab controls, you can set the exact width and height of tabs by using the <A HREF="messages/TCM_SETITEMSIZE.htm#TCM_SETITEMSIZE">TCM_SETITEMSIZE</A> message. In other tab controls, each tab's size is calculated based on the icon and label for the tab. The tab control includes space for a border and an additional margin. You can set the thickness of the margin by using the <A HREF="messages/TCM_SETPADDING.htm#TCM_SETPADDING">TCM_SETPADDING</A> message.

<P>You can determine the current bounding rectangle for a tab by using the <A HREF="messages/TCM_GETITEMRECT.htm#TCM_GETITEMRECT">TCM_GETITEMRECT</A> message. You can determine which tab, if any, is at a specified location by using the <A HREF="messages/TCM_HITTEST.htm#TCM_HITTEST">TCM_HITTEST</A> message.

<P>In a tab control with the <A HREF="Styles.htm#TCS_MULTILINE">TCS_MULTILINE</A> style, you can determine the current number of rows of tabs by using the <A HREF="messages/TCM_GETROWCOUNT.htm#TCM_GETROWCOUNT">TCM_GETROWCOUNT</A> message.

<H3><A NAME="tab_ownerdraw">Owner-Drawn Tabs</A></H3>
<P>If a tab control has the <A HREF="Styles.htm#TCS_OWNERDRAWFIXED">TCS_OWNERDRAWFIXED</A> style, the parent window must paint tabs by processing the
<object id="hhal_4" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_4.Click()>WM_DRAWITEM</A> message. The tab control sends this message whenever a tab needs to be painted. The <I>lParam</I> parameter specifies the address of a
<object id="hhal_5" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_5.Click()>DRAWITEMSTRUCT</A> structure, which contains the index of the tab, its bounding rectangle, and the device context (DC) in which to draw.

<P>By default, the <B>itemData</B> member of
<object id="hhal_6" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_6.Click()>DRAWITEMSTRUCT</A> contains the value of the <B>lParam</B> member of the <A HREF="structures/TCITEM.htm#TC_ITEM">TCITEM</A> structure. However, if you change the amount of application-defined data per tab, <B>itemData</B> contains the address of the data instead. You can change the amount of application-defined data per tab by using the <A HREF="messages/TCM_SETITEMEXTRA.htm#TCM_SETITEMEXTRA">TCM_SETITEMEXTRA</A> message.

<P>To specify the size of items in a tab control, the parent window must process the
<object id="hhal_7" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_7.Click()>WM_MEASUREITEM</A> message. Because all tabs in an owner-drawn tab control are the same size, this message is sent only once. There is no tab control style for owner-drawn tabs of varying size. You can also set the width and height of tabs by using the <A HREF="messages/TCM_SETITEMSIZE.htm#TCM_SETITEMSIZE">TCM_SETITEMSIZE</A> message.

<H3><A NAME="tab_tooltips">Tab Control Tooltips</A></H3>
<P>You can use a tooltip control to provide a brief description of each tab in a tab control. A tab control that has the <A HREF="Styles.htm#TCS_TOOLTIPS">TCS_TOOLTIPS</A> style creates a tooltip control when it is created and destroys the tooltip control when it is destroyed. You can also create a tooltip control and assign it to a tab control.

<P>If you use a tooltip control with a tab control, the parent window must process the <A HREF="../tooltip/notifications/TTN_NEEDTEXT.htm#TTN_NEEDTEXT">TTN_NEEDTEXT</A> notification message to provide a description of each tab on request.

<P>To use the same tooltip control with more than one tab control, create the tooltip control yourself and assign it to the tab control by using the <A HREF="messages/TCM_SETTOOLTIPS.htm#TCM_SETTOOLTIPS">TCM_SETTOOLTIPS</A> message. You can get the handle to a tab control's current tooltip control by using the <A HREF="messages/TCM_GETTOOLTIPS.htm#TCM_GETTOOLTIPS">TCM_GETTOOLTIPS</A> message. If you create your own tooltip control, you should <I>not</I> use the <A HREF="Styles.htm#TCS_TOOLTIPS">TCS_TOOLTIPS</A> style. For more information about tooltip controls, see <A HREF="../tooltip/ToolTip.htm#ch_tooltips">Tooltip Controls</A>.

<H3><A NAME="Default_Tab_Control_">Default Tab Control Message Processing</A></H3>
<P>This section describes the message processing performed by a tab control. Messages specific to tab controls are discussed in other sections of this documentation.

<TABLE>
<TR><TD><B>Message
 </B></TD><TD><B>Processing performed
</B></TD></TR><TR><TD>WM_CAPTURECHANGED
 </TD><TD>Does nothing if the tab control released the mouse capture itself. If another window captured the mouse and a button is held down, the command releases the button.</TD></TR><TR><TD>WM_CREATE
 </TD><TD>Allocates and initializes an internal data structure. The control creates a tooltip control if the <A HREF="Styles.htm#TCS_TOOLTIPS">TCS_TOOLTIPS</A> style is specified. </TD></TR><TR><TD>WM_DESTROY
 </TD><TD>Frees resources allocated during WM_CREATE processing.</TD></TR><TR><TD>WM_GETDLGCODE
 </TD><TD>Returns a combination of the DLGC_WANTARROWS and DLGC_WANTCHARS values.</TD></TR><TR><TD>WM_GETFONT
 </TD><TD>Returns the handle to the font used for labels.</TD></TR><TR><TD>WM_KEYDOWN
 </TD><TD>Processes direction keys and changes the selection, if appropriate.</TD></TR><TR><TD>WM_KILLFOCUS
 </TD><TD>Invalidates the tab that has the focus so it will be repainted to reflect an unfocused state.</TD></TR><TR><TD>WM_LBUTTONDOWN
 </TD><TD>Forwards the message to the tooltip control, if any, and changes the selection if the user is clicking a tab. If the user is clicking a button, the control redraws the button to give a sunken appearance and captures the mouse.
<P>If the user is clicking either a tab or button and the <A HREF="Styles.htm#TCS_FOCUSONBUTTONDOW">TCS_FOCUSONBUTTONDOWN</A> style is specified, the control sets the focus to itself.</TD></TR><TR><TD>WM_LBUTTONUP
 </TD><TD>Releases the mouse if a button was pressed. If the cursor is over the button and is being held down, the control changes the selection accordingly and redraws the button. </TD></TR><TR><TD>WM_MOUSEMOVE
 </TD><TD>Forwards the message to the tooltip control, if any. If the <A HREF="Styles.htm#TCS_BUTTONS">TCS_BUTTONS</A> style is specified and the mouse button is being held down after clicking, the control may also redraw the affected button to give it a raised or sunken appearance.</TD></TR><TR><TD>WM_NOTIFY
 </TD><TD>Forwards notification messages sent by the tooltip control.</TD></TR><TR><TD>WM_PAINT
 </TD><TD>Draws a border around the display area (unless the <A HREF="Styles.htm#TCS_BUTTONS">TCS_BUTTONS</A> style is specified) and paints any tabs that intersect the invalid rectangle.
<P>For each tab, it draws the body of the tab (or sends a
<object id="hhal_8" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_8.Click()>WM_DRAWITEM</A> message to the parent window) and then draws a border around the tab. If the <I>wParam</I> parameter is non-NULL, the control assumes that the value is an HDC and paints using that device context.</TD></TR><TR><TD>WM_RBUTTONDOWN
 </TD><TD>Sends an <A HREF="../common/notifications/NM_RCLICK.htm#NM_RCLICK">NM_RCLICK</A> notification message to the parent window.</TD></TR><TR><TD>WM_SETFOCUS
 </TD><TD>Invalidates the tab that has the focus so that it will be repainted to reflect a focused state.</TD></TR><TR><TD>WM_SETFONT
 </TD><TD>Sets the font used for labels.</TD></TR><TR><TD>WM_SETREDRAW
 </TD><TD>Sets the state of an internal flag that determines whether the control is repainted when items are inserted and deleted, when the font is changed, and so on.</TD></TR><TR><TD>WM_SIZE
 </TD><TD>Recalculates the positions of tabs and may invalidate part of the tab control to force repainting of some or all tabs.</TD></TR></TABLE>
<H2><A NAME="Using_Tab_Controls">Using Tab Controls</A></H2>
<P>This section provides two examples that use tab controls. The first example demonstrates how to use a tab control to switch between multiple pages of text in an application's main window. The second example demonstrates how to use a tab control to switch between multiple pages of controls in a dialog box.

<H3><A NAME="Creating_a_Tab_Contr">Creating a Tab Control</A></H3>
<P>The example in this section demonstrates how to create a tab control and display it in the client area of the application's main window. The application displays a third window (a static control) in the display area of the tab control. The parent window positions and sizes the tab control and static control when it processes the
<object id="hhal_9" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_9.Click()>WM_SIZE</A> message.

<P>There are seven tabs, one for each day of the week. When the user selects a tab, the application displays the name of the corresponding day in the static control. The following global variables are used in this example.

<PRE>// Global variables 
 
&#009;HINSTANCE g_hinst;    // handle to application instance 
&#009;char g_achTemp[256];  // temporary buffer for strings 
&#009;HWND g_hwndMain;      // main application window 
&#009;HWND g_hwndTab;       // tab control 
&#009;HWND g_hwndDisplay;   // handle to static control in 
                      //   tab control's display area 
 
</PRE>
<P>The following function creates the tab control and adds a tab for each day of the week. The names of the days are defined as string resources, consecutively numbered starting with IDS_FIRSTDAY (defined in the application's header file). Both the parent window and the tab control must have the WS_CLIPSIBLINGS window style. The application's initialization function calls this function after creating the main window.

<PRE>// DoCreateTabControl - creates a tab control, sized to fit the 
&#009;//     specified parent window's client area, and adds some tabs. 
&#009;// Returns the handle to the tab control. 
&#009;// hwndParent - parent window (the application's main window). 
 
&#009;HWND WINAPI DoCreateTabControl(HWND hwndParent) 
&#009;{ 
    RECT rcClient; 
    HWND hwndTab; 
    TCITEM tie; 
    int i; 
 
    // Get the dimensions of the parent window's client area, and 
    // create a tab control child window of that size. 
    GetClientRect(hwndParent, &amp;rcClient); 
    InitCommonControls(); 
    hwndTab = CreateWindow( 
        WC_TABCONTROL, "", 
        WS_CHILD | WS_CLIPSIBLINGS | WS_VISIBLE, 
        0, 0, rcClient.right, rcClient.bottom, 
        hwndParent, NULL, g_hinst, NULL 
        ); 
    if (hwndTab == NULL) 
        return NULL; 
 
    // Add tabs for each day of the week. 
    tie.mask = TCIF_TEXT | TCIF_IMAGE; 
    tie.iImage = -1; 
    tie.pszText = g_achTemp; 
 
    for (i = 0; i &lt; 7; i++) { 
        LoadString(g_hinst, IDS_FIRSTDAY + i, 
                g_achTemp, sizeof(g_achTemp)); 
        if (TabCtrl_InsertItem(hwndTab, i, &amp;tie) == -1) { 
            DestroyWindow(hwndTab); 
            return NULL; 
        } 
    } 
    return hwndTab; 
&#009;} 
 
</PRE>
<P>The following function creates the static control that occupies the tab control's display area. The application's initialization function calls this function after creating the main window and the tab control.

<PRE>&#009;// DoCreateDisplayWindow - creates a child window (a static 
&#009;//     control) to occupy the tab control's display area. 
&#009;// Returns the handle to the static control. 
&#009;// hwndParent - parent window (the application's main window). 
 
&#009;HWND WINAPI DoCreateDisplayWindow(HWND hwndParent) 
&#009;{ 
    HWND hwndStatic = CreateWindow("STATIC", "", 
        WS_CHILD | WS_VISIBLE | WS_BORDER, 
        0, 0, CW_USEDEFAULT, CW_USEDEFAULT, 
        hwndParent, NULL, g_hinst, NULL); 
 
    return hwndStatic; 
&#009;} 
 
</PRE>
<P>Following are the relevant portions of the application's window procedure. The application processes the
<object id="hhal_10" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_10.Click()>WM_SIZE</A> message to position and size the tab control and the static control. To determine the appropriate position and size for the static control, this example sends the tab control a <A HREF="messages/TCM_ADJUSTRECT.htm#TCM_ADJUSTRECT">TCM_ADJUSTRECT</A> message (by using the <A HREF="macros/TabCtrl_AdjustRect.htm#TabCtrl_AdjustRect">TabCtrl_AdjustRect</A> macro).

<P>When a tab is selected, the tab control sends a <A HREF="../common/messages/WM_NOTIFY.htm#WM_NOTIFY">WM_NOTIFY</A> message, specifying the <A HREF="notifications/TCN_SELCHANGE.htm#TCN_SELCHANGE">TCN_SELCHANGE</A> notification message. The application processes this notification message by setting the text of the static control.

<PRE>&#009;// MainWindowProc - processes the message for the main window class. 
&#009;// The return value depends on the message. 
&#009;// hwnd - handle to the window. 
&#009;// uMsg - identifier for the message. 
&#009;// wParam - message-specific parameter. 
&#009;// lParam - message-specific parameter. 
 
&#009;LRESULT CALLBACK MainWindowProc( 
        HWND hwnd, 
        UINT uMsg, 
        WPARAM wParam, 
        LPARAM lParam 
        ) 
&#009;{ 
    switch (uMsg) { 
        case WM_SIZE: { 
                HDWP hdwp; 
                RECT rc; 
 
                // Calculate the display rectangle, assuming the 
                // tab control is the size of the client area. 
                SetRect(&amp;rc, 0, 0, 
                        LOWORD(lParam), HIWORD(lParam)); 
                TabCtrl_AdjustRect(g_hwndTab, FALSE, &amp;rc); 
 
                // Size the tab control to fit the client area. 
                hdwp = BeginDeferWindowPos(2); 
                DeferWindowPos(hdwp, g_hwndTab, NULL, 0, 0, 
                    LOWORD(lParam), HIWORD(lParam), 
                    SWP_NOMOVE | SWP_NOZORDER 
                    ); 
 
                // Position and size the static control to fit the 
                // tab control's display area, and make sure the 
                // static control is in front of the tab control. 
                DeferWindowPos(hdwp, 
                    g_hwndDisplay, HWND_TOP, rc.left, rc.top, 
                    rc.right - rc.left, rc.bottom - rc.top, 0 
                    ); 
                EndDeferWindowPos(hdwp); 
            } 
            break; 
 
        case WM_NOTIFY: 
            switch (HIWORD(wParam)) { 
                case 0: 
                    . 
                    .    // menu command processing 
                    . 
 
                case TCN_SELCHANGE: { 
                        int iPage = TabCtrl_GetCurSel(g_hwndTab); 
                        LoadString(g_hinst, IDS_FIRSTDAY + iPage, 
                            g_achTemp, sizeof(g_achTemp)); 
                        SendMessage(g_hwndDisplay, WM_SETTEXT, 0 
                            (LPARAM) g_achTemp); 
                    } 
                    break; 
            } 
            break; 
 
            . 
            .       // additional message processing 
            . 
 
        default: 
            return DefWindowProc(hwnd, uMsg, wParam, lParam); 
    } 
    return 0; 
&#009;} 
 
</PRE>
<H3><A NAME="Creating_a_Tabbed_Di">Creating a Tabbed Dialog Box</A></H3>
<P>The example in this section demonstrates how to create a dialog box that uses tabs to provide multiple pages of controls. The main dialog box is a modal dialog box. Each page of controls is defined by a dialog box template that has the WS_CHILD style. When a tab is selected, a modeless dialog box is created for the incoming page and the dialog box for the outgoing page is destroyed.

<P><B>Note</B>  In many cases, you can implement multiple-page dialog boxes more easily by using property sheets. For more information about property sheets, see <A HREF="../propsheet/PropSheet.htm#ch_prpsheet">Property Sheets</A> 
<P>The template for the main dialog box simply defines two button controls. When processing the WM_INITDIALOG message, the dialog box procedure creates a tab control and loads the dialog template resources for each of the child dialog boxes.

<P>The information is saved in an application-defined structure called DLGHDR. A pointer to this structure is associated with the dialog box window by using the
<object id="hhal_11" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_11.Click()>SetWindowLong</A> function. The structure is defined in the application's header file, as follows:

<PRE>&#009;#define C_PAGES 3 
 
&#009;typedef struct tag_dlghdr { 
    HWND hwndTab;       // tab control 
    HWND hwndDisplay;   // current child dialog box 
    RECT rcDisplay;     // display rectangle for the tab control 
    DLGTEMPLATE *apRes[C_PAGES]; 
&#009;} DLGHDR; 
 
</PRE>
<P>The following function processes the WM_INITDIALOG message for the main dialog box. The function allocates the DLGHDR structure, loads the dialog template resources for the child dialog boxes, and creates the tab control.

<P>The size of each child dialog box is specified by the
<object id="hhal_12" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_12.Click()>DLGTEMPLATE</A> structure. The function examines the size of each dialog box and uses the macro for the <A HREF="messages/TCM_ADJUSTRECT.htm#TCM_ADJUSTRECT">TCM_ADJUSTRECT</A> message to calculate an appropriate size for the tab control. Then it sizes the dialog box and positions the two buttons accordingly. This example sends <B>TCM_ADJUSTRECT</B> by using the <A HREF="macros/TabCtrl_AdjustRect.htm#TabCtrl_AdjustRect">TabCtrl_AdjustRect</A> macro.

<PRE>&#009;VOID WINAPI OnTabbedDialogInit(HWND hwndDlg) 
&#009;{ 
    DLGHDR *pHdr = (DLGHDR *) LocalAlloc(LPTR, sizeof(DLGHDR)); 
    DWORD dwDlgBase = GetDialogBaseUnits(); 
    int cxMargin = LOWORD(dwDlgBase) / 4; 
    int cyMargin = HIWORD(dwDlgBase) / 8; 
    TCITEM tie; 
    RECT rcTab; 
    HWND hwndButton; 
    RECT rcButton; 
    int i; 
 
    // Save a pointer to the DLGHDR structure. 
    SetWindowLong(hwndDlg, GWL_USERDATA, (LONG) pHdr); 
 
    // Create the tab control. 
    InitCommonControls(); 
    pHdr-&gt;hwndTab = CreateWindow( 
        WC_TABCONTROL, "", 
        WS_CHILD | WS_CLIPSIBLINGS | WS_VISIBLE, 
        0, 0, 100, 100, 
        hwndDlg, NULL, g_hinst, NULL 
        ); 
    if (pHdr-&gt;hwndTab == NULL) {
        // handle error
    }
 
    // Add a tab for each of the three child dialog boxes. 
    tie.mask = TCIF_TEXT | TCIF_IMAGE; 
    tie.iImage = -1; 
    tie.pszText = "First"; 
    TabCtrl_InsertItem(pHdr-&gt;hwndTab, 0, &amp;tie); 
    tie.pszText = "Second"; 
    TabCtrl_InsertItem(pHdr-&gt;hwndTab, 1, &amp;tie); 
    tie.pszText = "Third"; 
    TabCtrl_InsertItem(pHdr-&gt;hwndTab, 2, &amp;tie); 
 
    // Lock the resources for the three child dialog boxes. 
    pHdr-&gt;apRes[0] = DoLockDlgRes(MAKEINTRESOURCE(DLG_FIRST)); 
    pHdr-&gt;apRes[1] = DoLockDlgRes(MAKEINTRESOURCE(DLG_SECOND)); 
    pHdr-&gt;apRes[2] = DoLockDlgRes(MAKEINTRESOURCE(DLG_THIRD)); 
 
    // Determine the bounding rectangle for all child dialog boxes. 
    SetRectEmpty(&amp;rcTab); 
    for (i = 0; i &lt; C_PAGES; i++) { 
        if (pHdr-&gt;apRes[i]-&gt;cx &gt; rcTab.right) 
            rcTab.right = pHdr-&gt;apRes[i]-&gt;cx; 
        if (pHdr-&gt;apRes[i]-&gt;cy &gt; rcTab.bottom) 
            rcTab.bottom = pHdr-&gt;apRes[i]-&gt;cy; 
    } 
    rcTab.right = rcTab.right * LOWORD(dwDlgBase) / 4; 
    rcTab.bottom = rcTab.bottom * HIWORD(dwDlgBase) / 8; 
 
    // Calculate how large to make the tab control, so 
    // the display area can accommodate all the child dialog boxes. 
    TabCtrl_AdjustRect(pHdr-&gt;hwndTab, TRUE, &amp;rcTab); 
    OffsetRect(&amp;rcTab, cxMargin - rcTab.left, 
            cyMargin - rcTab.top); 
 
    // Calculate the display rectangle. 
    CopyRect(&amp;pHdr-&gt;rcDisplay, &amp;rcTab); 
    TabCtrl_AdjustRect(pHdr-&gt;hwndTab, FALSE, &amp;pHdr-&gt;rcDisplay); 
 
    // Set the size and position of the tab control, buttons, 
    // and dialog box. 
    SetWindowPos(pHdr-&gt;hwndTab, NULL, rcTab.left, rcTab.top, 
            rcTab.right - rcTab.left, rcTab.bottom - rcTab.top, 
            SWP_NOZORDER); 
 
    // Move the first button below the tab control. 
    hwndButton = GetDlgItem(hwndDlg, BTN_CLOSE); 
    SetWindowPos(hwndButton, NULL, 
            rcTab.left, rcTab.bottom + cyMargin, 0, 0, 
            SWP_NOSIZE | SWP_NOZORDER); 
 
    // Determine the size of the button. 
    GetWindowRect(hwndButton, &amp;rcButton); 
    rcButton.right -= rcButton.left; 
    rcButton.bottom -= rcButton.top; 
 
    // Move the second button to the right of the first. 
    hwndButton = GetDlgItem(hwndDlg, BTN_TEST); 
    SetWindowPos(hwndButton, NULL, 
        rcTab.left + rcButton.right + cxMargin, 
        rcTab.bottom + cyMargin, 0, 0, 
        SWP_NOSIZE | SWP_NOZORDER); 
 
    // Size the dialog box. 
    SetWindowPos(hwndDlg, NULL, 0, 0, 
        rcTab.right + cyMargin + 
        2 * GetSystemMetrics(SM_CXDLGFRAME), 
        rcTab.bottom + rcButton.bottom + 2 * cyMargin + 
        2 * GetSystemMetrics(SM_CYDLGFRAME) + 
        GetSystemMetrics(SM_CYCAPTION), 
        SWP_NOMOVE | SWP_NOZORDER); 
 
    // Simulate selection of the first item. 
    OnSelChanged(hwndDlg); 
&#009;} 
 
&#009;// DoLockDlgRes - loads and locks a dialog template resource. 
&#009;// Returns the address of the locked resource. 
&#009;// lpszResName - name of the resource 
 
&#009;DLGTEMPLATE * WINAPI DoLockDlgRes(LPCSTR lpszResName) 
&#009;{ 
    HRSRC hrsrc = FindResource(NULL, lpszResName, RT_DIALOG); 
    HGLOBAL hglb = LoadResource(g_hinst, hrsrc); 
    return (DLGTEMPLATE *) LockResource(hglb); 
&#009;} 
 
</PRE>
<P>The following function processes the <A HREF="notifications/TCN_SELCHANGE.htm#TCN_SELCHANGE">TCN_SELCHANGE</A> notification message for the main dialog box. The function destroys the dialog box for the outgoing page, if any. Then it uses the
<object id="hhal_13" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_13.Click()>CreateDialogIndirect</A> function to create a modeless dialog box for the incoming page.

<PRE>&#009;// OnSelChanged - processes the TCN_SELCHANGE notification. 
&#009;// hwndDlg - handle to the parent dialog box. 
 
&#009;VOID WINAPI OnSelChanged(HWND hwndDlg) 
&#009;{ 
&#009;    DLGHDR *pHdr = (DLGHDR *) GetWindowLong( 
        hwndDlg, GWL_USERDATA); 
    int iSel = TabCtrl_GetCurSel(pHdr-&gt;hwndTab); 
 
    // Destroy the current child dialog box, if any. 
    if (pHdr-&gt;hwndDisplay != NULL) 
        DestroyWindow(pHdr-&gt;hwndDisplay); 
 
    // Create the new child dialog box. 
    pHdr-&gt;hwndDisplay = CreateDialogIndirect(g_hinst, 
        pHdr-&gt;apRes[iSel], hwndDlg, ChildDialogProc); 
&#009;} 
&#009; 
</PRE>
<P>The following function processes the WM_INITDIALOG message for each of the child dialog boxes. You cannot specify the position of a dialog box created using the
<object id="hhal_14" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_14.Click()>CreateDialogIndirect</A> function. This function uses the
<object id="hhal_15" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_15.Click()>SetWindowPos</A> function to position the child dialog within the tab control's display area.

<PRE>
&#009;// OnChildDialogInit - Positions the child dialog box to fall 
&#009;//     within the display area of the tab control. 
 
&#009;VOID WINAPI OnChildDialogInit(HWND hwndDlg) 
&#009;{ 
    HWND hwndParent = GetParent(hwndDlg); 
    DLGHDR *pHdr = (DLGHDR *) GetWindowLong( 
        hwndParent, GWL_USERDATA); 
    SetWindowPos(hwndDlg, HWND_TOP, 
        pHdr-&gt;rcDisplay.left, pHdr-&gt;rcDisplay.top, 
        0, 0, SWP_NOSIZE); 
&#009;} 
 
</PRE>
<H2><A NAME="Tab_Control_Updates_">Tab Control Updates in Internet Explorer</A></H2>
<P>Tab controls in Microsoft&#174; Internet Explorer support the following new features. 

<DL>
<DT><B>Item States</B>
 </DT><DD>Tab control items now support an item state to support the <A HREF="messages/TCM_DESELECTALL.htm#TCM_DESELECTALL">TCM_DESELECTALL</A> message. Additionally, the <A HREF="structures/TCITEM.htm#TC_ITEM">TCITEM</A> structure supports item state values. See <A HREF="Item_States.htm#tab_item_states">Tab Control Item States</A> for more information.
</DD><DT><B>Extended Styles</B>
 </DT><DD>Tab controls now support extended styles that allow the controls to have enhanced capabilities. See <A HREF="Ex_Styles.htm#tab_extended_styles">Tab Control Extended Styles</A> for more information.
</DD><DT><B>Structures Renamed</B>
 </DT><DD>All structures used with tab controls have been renamed to conform to current naming conventions, while maintaining backward compatibility. For example, the <A HREF="structures/TCITEM.htm#TC_ITEM">TC_ITEM</A> structure is now named <A HREF="structures/TCITEM.htm#TC_ITEM">TCITEM</A>. 
</DD></DL>

<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Header Controls</TITLE>

<META NAME=MS-HKWD CONTENT="Header Controls">
<META NAME="Keywords" CONTENT="Internet Tools & Technologies, Common controls">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT, Mac">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="ch_header"></A>
<!--NAV_LINKS_START-->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Header Controls"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../../art/headbard.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Header Controls"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR><TR><TD><PRE><IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="../CommCtls.htm#book_cc">Topic Contents</A></PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="../flatsb/functions/UninitializeFlatSB.htm">UninitializeFlatSB</A>
<IMG SRC="../../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="header_Header.htm">Header Control Reference</A></PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>Header Controls</H1>
<BR CLEAR=ALL>
<P>A <I>header control</I> is a window that is usually positioned above columns of text or numbers. It contains a title for each column, and it can be divided into parts. The user can drag the dividers that separate the parts to set the width of each column. The following illustration shows a header control that has labeled columns that give detailed information about files in a directory. 

<P><IMG SRC="../../../art/hdr_scrn.gif" WIDTH="434" HEIGHT="202" ALT="Header control with labeled columns." >
<P><A CLASS=tctop HREF="Header.htm#Using_Header_Control"><IMG SRC="../../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Using Header Controls</A><BR>
<P><A CLASS=tctop HREF="Header.htm#Header_Control_Updat"><IMG SRC="../../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Header Control Updates in Internet Explorer</A><BR>
<P><A CLASS=tctop HREF="header_Header.htm#header_Header"><IMG SRC="../../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Header Control Reference</A><BR>
<H2><A NAME="Using_Header_Control">Using Header Controls</A></H2>
<P>You can create a header control by using the
<object id="hhal_3" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_3.Click()>CreateWindowEx</A> function, specifying the WC_HEADER window class and the appropriate <A HREF="Styles.htm#header_styles">header styles</A>. This window class is registered when the common control dynamic-link library (DLL) is loaded. To ensure that this DLL is loaded, use the <A HREF="../common/functions/InitCommonControls.htm#InitCommonControls">InitCommonControls</A> function. After you create a header control, you can divide it into parts, set the text in each part, and control the appearance of the window by using header window messages.

<H3><A NAME="Header_Control_Size_">Header Control Size and Position</A></H3>
<P>Typically, you must set the size and position of a header control to fit within the boundaries of a particular rectangle, such as the client area of a window. By using the <A HREF="messages/HDM_LAYOUT.htm#HDM_LAYOUT">HDM_LAYOUT</A> message, you can retrieve the appropriate size and position values from the header control. 

<P>When sending <A HREF="messages/HDM_LAYOUT.htm#HDM_LAYOUT">HDM_LAYOUT</A>, you specify the address of an <A HREF="structures/HDLAYOUT.htm#HD_LAYOUT">HDLAYOUT</A> structure that contains the coordinates of the rectangle that the header control is to occupy and provides a pointer to a
<object id="hhal_4" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_4.Click()>WINDOWPOS</A> structure. The control fills the <B>WINDOWPOS</B> structure with size and position values appropriate for positioning the control along the top of the specified rectangle. The height value is the sum of the heights of the control's horizontal borders and the average height of characters in the font currently selected into the control's device context. 

<P>If you want to use <A HREF="messages/HDM_LAYOUT.htm#HDM_LAYOUT">HDM_LAYOUT</A> to set the initial size and position of a header control, set the initial visibility state of the control so that it is hidden. After sending <B>HDM_LAYOUT</B> to retrieve the size and position values, you can use the
<object id="hhal_5" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_5.Click()>SetWindowPos</A> function to set the new size, position, and visibility state. 

<H3><A NAME="Items">Items</A></H3>
<P>A header control typically has several header items that define the columns of the control. You add an item to a header control by sending the <A HREF="messages/HDM_INSERTITEM.htm#HDM_INSERTITEM">HDM_INSERTITEM</A> message to the control. The message includes the address of an <A HREF="structures/HDITEM.htm#HD_ITEM">HDITEM</A> structure. This structure defines the properties of the header item, which can include a string, a bitmapped image, an initial size, and an application-defined 32-bit value. 

<P>The <B>fmt</B> member of an item's <A HREF="structures/HDITEM.htm#HD_ITEM">HDITEM</A> structure can include either the HDF_STRING or HDF_BITMAP flag to indicate whether the control displays the item's string or bitmap. If you want to display both a string and a bitmap, create an owner-drawn item by setting the <B>fmt</B> member to include the HDF_OWNERDRAW flag. The <B>HDITEM</B> structure also specifies formatting flags that tell the control whether to center, left-align, or right-align the string or bitmap in the item's rectangle.

<P><A HREF="messages/HDM_INSERTITEM.htm#HDM_INSERTITEM">HDM_INSERTITEM</A> returns the index of the newly added item. You can use the index in other messages to set properties or retrieve information about the item. You can delete an item by using the <A HREF="messages/HDM_DELETEITEM.htm#HDM_DELETEITEM">HDM_DELETEITEM</A> message, specifying the index of the item to delete.

<P>You can use the <A HREF="messages/HDM_SETITEM.htm#HDM_SETITEM">HDM_SETITEM</A> message to set the properties of an existing header item and the <A HREF="messages/HDM_GETITEM.htm#HDM_GETITEM">HDM_GETITEM</A> message to retrieve the current properties of an item. To retrieve a count of the items in a header control, use the <A HREF="messages/HDM_GETITEMCOUNT.htm#HDM_GETITEMCOUNT">HDM_GETITEMCOUNT</A> message.

<H3><A NAME="_win32_header_owner_draw"></A><A NAME="header_owner_draw">Owner-Drawn Header Controls</A></H3>
<P>You can define individual items of a header control to be owner-drawn items. Using this technique gives you more control than you would otherwise have over the appearance of a header item. 

<P>You can use the <A HREF="messages/HDM_INSERTITEM.htm#HDM_INSERTITEM">HDM_INSERTITEM</A> message to insert a new owner-drawn item into a header control or the <A HREF="messages/HDM_SETITEM.htm#HDM_SETITEM">HDM_SETITEM</A> message to change an existing item to an owner-drawn item. Both messages include the address of an <A HREF="structures/HDITEM.htm#HD_ITEM">HDITEM</A> structure, which should have the <B>fmt</B> member set to the HDF_OWNERDRAW value. 

<P>When a header control must draw an owner-drawn item, it sends the
<object id="hhal_6" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_6.Click()>WM_DRAWITEM</A> message to the parent window. The <I>wParam</I> parameter of the message is the child window identifier of the header control, and the <I>lParam</I> parameter is an address of a
<object id="hhal_7" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_7.Click()>DRAWITEMSTRUCT</A> structure. The parent window uses the information in the structure to draw the item. For an owner-drawn item in a header control, the <B>DRAWITEMSTRUCT</B> structure contains the following information.


<TABLE>
<TR><TD><B>Member
 </B></TD><TD><B>Description
</B></TD></TR><TR><TD><B>CtlType</B>
 </TD><TD>ODT_HEADER owner-drawn control type.</TD></TR><TR><TD><B>CtlID</B>
 </TD><TD>Child-window identifier of the header control.</TD></TR><TR><TD><B>itemID</B>
 </TD><TD>Index of the item to be drawn.</TD></TR><TR><TD><B>itemAction</B>
 </TD><TD>ODA_DRAWENTIRE drawing-action flag.</TD></TR><TR><TD><B>itemState</B>
 </TD><TD>ODS_SELECTED drawing-action flag if the cursor is on the item and the mouse button is down. Otherwise, this member is zero.</TD></TR><TR><TD><B>hwndItem</B>
 </TD><TD>Handle to the header control.</TD></TR><TR><TD><B>hDC</B>
 </TD><TD>Handle to the device context of the header control.</TD></TR><TR><TD><B>rcItem</B>
 </TD><TD>Coordinates of the header item to be drawn. The coordinates are relative to the upper-left corner of the header control.</TD></TR><TR><TD><B>itemData</B>
 </TD><TD>Application-defined 32-bit value associated with the item.</TD></TR></TABLE>
<H3><A NAME="Header_Control_Notif">Header Control Notification Messages</A></H3>
<P>A header control sends notification messages to its parent window when the user clicks or double-clicks an item, when the user drags an item divider, and when the attributes of an item change. The parent window receives the notifications in the form of <A HREF="../common/messages/WM_NOTIFY.htm#WM_NOTIFY">WM_NOTIFY</A> messages. The following notifications are used with header controls.


<TABLE>
<TR><TD><B>Notification
 </B></TD><TD><B>Description
</B></TD></TR><TR><TD><A HREF="notifications/HDN_BEGINTRACK.htm#HDN_BEGINTRACK">HDN_BEGINTRACK</A>
 </TD><TD>Signals the start of divider dragging. </TD></TR><TR><TD><A HREF="notifications/HDN_DIVIDERDBLCLICK.htm#HDN_DIVIDERDBLCLICK">HDN_DIVIDERDBLCLICK</A>
 </TD><TD>Indicates that the user double-clicked a divider.</TD></TR><TR><TD><A HREF="notifications/HDN_ENDTRACK.htm#HDN_ENDTRACK">HDN_ENDTRACK</A>
 </TD><TD>Signals the end of divider dragging. </TD></TR><TR><TD><A HREF="notifications/HDN_ITEMCHANGED.htm#HDN_ITEMCHANGED">HDN_ITEMCHANGED</A>
 </TD><TD>Indicates a change in the attributes of an item.</TD></TR><TR><TD><A HREF="notifications/HDN_ITEMCHANGING.htm#HDN_ITEMCHANGING">HDN_ITEMCHANGING</A>
 </TD><TD>Indicates that the attributes of an item are about to change. </TD></TR><TR><TD><A HREF="notifications/HDN_ITEMCLICK.htm#HDN_ITEMCLICK">HDN_ITEMCLICK</A>
 </TD><TD>Indicates that the user clicked an item. </TD></TR><TR><TD><A HREF="notifications/HDN_ITEMDBLCLICK.htm#HDN_ITEMDBLCLICK">HDN_ITEMDBLCLICK</A>
 </TD><TD>Indicates that the user double-clicked an item.</TD></TR><TR><TD><A HREF="notifications/HDN_TRACK.htm#HDN_TRACK">HDN_TRACK</A>
 </TD><TD>Indicates that the user dragged a divider. </TD></TR></TABLE>
<H3><A NAME="Default_Header_Contr">Default Header Control Message Processing</A></H3>
<P>This section describes the window messages handled by the window procedure for the WC_HEADER window class.


<TABLE>
<TR><TD><B>Message
 </B></TD><TD><B>Processing performed
</B></TD></TR><TR><TD>WM_CREATE
 </TD><TD>Initializes the header control. </TD></TR><TR><TD>WM_DESTROY
 </TD><TD>Uninitializes the header control.</TD></TR><TR><TD>WM_ERASEBKGND
 </TD><TD>Fills the background of the header control using the control's current background color.</TD></TR><TR><TD>WM_GETDLGCODE
 </TD><TD>Returns a combination of the DLGC_WANTTAB and DLGC_WANTARROWS values.</TD></TR><TR><TD>WM_GETFONT
 </TD><TD>Returns the handle to the current font, which is used by the header control to draw its text.</TD></TR><TR><TD>WM_LBUTTONDBLCLK
 </TD><TD>Captures mouse input. If the mouse cursor is on a divider, the control sends the <A HREF="notifications/HDN_BEGINTRACK.htm#HDN_BEGINTRACK">HDN_BEGINTRACK</A> notification message and begins dragging the divider. If the cursor is on an item, the item is displayed in the pressed state. </TD></TR><TR><TD>WM_LBUTTONDOWN
 </TD><TD>Same as the WM_LBUTTONDBLCLK message.</TD></TR><TR><TD>WM_LBUTTONUP
 </TD><TD>Releases the mouse capture. If the control was tracking mouse movement, it sends the <A HREF="notifications/HDN_ENDTRACK.htm#HDN_ENDTRACK">HDN_ENDTRACK</A> notification message and redraws the header control. Otherwise, the control sends the <A HREF="notifications/HDN_ITEMCLICK.htm#HDN_ITEMCLICK">HDN_ITEMCLICK</A> notification message and redraws the header item that was clicked. </TD></TR><TR><TD>WM_MOUSEMOVE
 </TD><TD>If a divider is being dragged, the control sends the <A HREF="notifications/HDN_TRACK.htm#HDN_TRACK">HDN_TRACK</A> notification message and displays the item at the new position. If the left mouse button is down and the cursor is on an item, the item is displayed in the pressed state.</TD></TR><TR><TD>WM_NCCREATE
 </TD><TD>Allocates and initializes an internal data structure. </TD></TR><TR><TD>WM_NCDESTROY
 </TD><TD>Frees the resources allocated by the header control after the header control is uninitialized.</TD></TR><TR><TD>WM_PAINT
 </TD><TD>Paints the invalid region of the header control. If the <I>wParam</I> parameter is non-NULL, the control assumes that the value is an HDC and paints using that device context.</TD></TR><TR><TD>WM_SETCURSOR
 </TD><TD>Sets the cursor shape, depending on whether the cursor is on a divider or in a header item.</TD></TR><TR><TD>WM_SETFONT
 </TD><TD>Selects a new font handle into the device context for the header control.</TD></TR></TABLE>
<H3><A NAME="Creating_a_Header_Co">Creating a Header Control</A></H3>
<P>The following example demonstrates how to create a header control and position it along the top of the parent window's client area. The control is initially hidden. The <A HREF="messages/HDM_LAYOUT.htm#HDM_LAYOUT">HDM_LAYOUT</A> message is used to calculate the size and position of the control within the parent window. The control is then repositioned and made visible.

<PRE>
&#009;// DoCreateHeader - creates a header control that is positioned along 
&#009;//     the top of the parent window's client area. 
&#009;// Returns the handle to the header control. 
&#009;// hwndParent - handle to the parent window. 
&#009;// 
&#009;// Global variable 
&#009;//    g_hinst - handle to the application instance 
&#009;extern HINSTANCE g_hinst; 
 
&#009;HWND DoCreateHeader(HWND hwndParent) 
&#009;{ 
        HWND hwndHeader; 
        RECT rcParent; 
        HDLAYOUT hdl; 
        WINDOWPOS wp; 
 
        // Ensure that the common control DLL is loaded, and then create 
        // the header control. 
        InitCommonControls(); 
 
        if ((hwndHeader = CreateWindowEx(0, WC_HEADER, (LPCTSTR) NULL, 
                WS_CHILD | WS_BORDER | HDS_BUTTONS | HDS_HORZ, 
                0, 0, 0, 0, hwndParent, (HMENU) ID_HEADER, g_hinst, 
                (LPVOID) NULL)) == NULL) 
            return (HWND) NULL; 
 
        // Retrieve the bounding rectangle of the parent window's 
        // client area, and then request size and position values 
        // from the header control. 
        GetClientRect(hwndParent, &amp;rcParent); 
 
        hdl.prc = &amp;rcParent; 
        hdl.pwpos = &amp;wp; 
        if (!SendMessage(hwndHeader, HDM_LAYOUT, 0, (LPARAM) &amp;hdl)) 
            return (HWND) NULL; 
 
        // Set the size, position, and visibility of the header control. 
        SetWindowPos(hwndHeader, wp.hwndInsertAfter, wp.x, wp.y, 
            wp.cx, wp.cy, wp.flags | SWP_SHOWWINDOW); 
 
        return hwndHeader; 
&#009;} 
 
</PRE>
<H3><A NAME="Adding_an_Item_to_a_">Adding an Item to a Header Control</A></H3>
<P>The following example demonstrates how to use the <A HREF="messages/HDM_INSERTITEM.htm#HDM_INSERTITEM">HDM_INSERTITEM</A> message and the <A HREF="structures/HDITEM.htm#HD_ITEM">HDITEM</A> structure to add an item to a header control. The new item consists of a string that is left-justified within the item rectangle.

<PRE>
&#009;// DoInsertItem - inserts an item into a header control. 
&#009;// Returns the index of the new item. 
&#009;// hwndHeader - handle to the header control. 
&#009;// iInsertAfter - index of the previous item. 
&#009;// nWidth - width of the new item. 
&#009;// lpsz - address of the item string. 
&#009;int DoInsertItem(HWND hwndHeader, int iInsertAfter, 
&#009;    int nWidth, LPSTR lpsz) 
&#009;{ 
&#009;    HDITEM hdi; 
&#009;    int index; 
&#009; 
&#009;    hdi.mask = HDI_TEXT | HDI_FORMAT | HDI_WIDTH; 
&#009;    hdi.pszText = lpsz; 
&#009;    hdi.cxy = nWidth; 
&#009;    hdi.cchTextMax = lstrlen(hdi.pszText); 
&#009;    hdi.fmt = HDF_LEFT | HDF_STRING; 
 
    index = SendMessage(hwndHeader, HDM_INSERTITEM, 
        (WPARAM) iInsertAfter, (LPARAM) &amp;hdi); 
 
    return index; 
 
&#009;} 
 
</PRE>
<H2><A NAME="Header_Control_Updat">Header Control Updates in Internet Explorer</A></H2>
<P>Header controls in Microsoft&#174; Internet Explorer support the following new features. 
<DL>
<DT><B>Image Lists</B>
 </DT><DD>New messages for this feature include <A HREF="messages/HDM_GETIMAGELIST.htm#HDM_GETIMAGELIST">HDM_GETIMAGELIST</A> and <A HREF="messages/HDM_SETIMAGELIST.htm#HDM_SETIMAGELIST">HDM_SETIMAGELIST</A>. The header control structure <A HREF="structures/HDITEM.htm#HD_ITEM">HDITEM</A> has been updated to support image lists. Image lists can be used with current bitmap support.
</DD><DT><B>Callback Items</B> 
 </DT><DD>Currently, callback support includes header item text and images. Setting a header item's text to the LPSTR_TEXTCALLBACK value or its image to the I_IMAGECALLBACK value will cause the control to send an <A HREF="notifications/HDN_GETDISPINFO.htm#HDN_GETDISPINFO">HDN_GETDISPINFO</A> message to request callback information as needed. <B>HDN_GETDISPINFO</B> is supported by the new <A HREF="structures/NMHDDISPINFO.htm#NMHDDISPINFO">NMHDDISPINFO</A> structure.
</DD><DT><B>Custom Item Ordering</B>
 </DT><DD>The new messages that support this feature are: <A HREF="messages/HDM_GETORDERARRAY.htm#HDM_GETORDERARRAY">HDM_GETORDERARRAY</A>, <A HREF="messages/HDM_SETORDERARRAY.htm#HDM_SETORDERARRAY">HDM_SETORDERARRAY</A>, and <A HREF="messages/HDM_ORDERTOINDEX.htm#HDM_ORDERTOINDEX">HDM_ORDERTOINDEX</A>. 
</DD><DT><B>Drag-and-Drop Manipulation</B>
 </DT><DD>Drag-and-drop reordering of header items is now available. Implement drag-and-drop support by including the <A HREF="Styles.htm#HDS_DRAGDROP">HDS_DRAGDROP</A> style when creating the control. By default, the header control automatically handles drag-and-drop overhead and graphic effects. However, the owner of the control can manually support drag-and-drop manipulation by handling the <A HREF="notifications/HDN_BEGINDRAG.htm#HDN_BEGINDRAG">HDN_BEGINDRAG</A> and <A HREF="notifications/HDN_ENDDRAG.htm#HDN_ENDDRAG">HDN_ENDDRAG</A> notification messages. While handling these notifications, the owner might need to send <A HREF="messages/HDM_CREATEDRAGIMAGE.htm#HDM_CREATEDRAGIMAGE">HDM_CREATEDRAGIMAGE</A> and <A HREF="messages/HDM_SETHOTDIVIDER.htm#HDM_SETHOTDIVIDER">HDM_SETHOTDIVIDER</A> messages.
</DD><DT><B>Hot Tracking</B>
 </DT><DD>When this feature is enabled, the item that is under the pointer will be highlighted. To enable hot tracking in a header control, create it with the <A HREF="Styles.htm#HDS_HOTTRACK">HDS_HOTTRACK</A> style.
</DD><DT><B>Text, Bitmaps, and Images</B>
 </DT><DD>Items can simultaneously display item text, a bitmap, and an image.
</DD></DL>

<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Progress Bar Control</TITLE>

<META NAME=MS-HKWD CONTENT="Progress Bar Control">
<META NAME="Keywords" CONTENT="Internet Tools & Technologies, Common controls">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT, Mac">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="ch_progbar"></A>
<!--NAV_LINKS_START-->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Progress Bar Control"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../../art/headbard.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Progress Bar Control"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR><TR><TD><PRE><IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="../CommCtls.htm#book_cc">Topic Contents</A></PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="../pager/structures/NMPGSCROLL.htm">NMPGSCROLL</A>
<IMG SRC="../../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="RefList.htm">Progress Bar Control Reference</A></PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>Progress Bar Control</H1>
<BR CLEAR=ALL>
<P>A <I>progress bar</I> is a window that an application can use to indicate the progress of a lengthy operation. It consists of a rectangle that is gradually filled with the system highlight color as an operation progresses. The following illustration shows a progress bar positioned along the bottom of a window. 

<P><IMG SRC="../../../art/pb_scrn.gif" WIDTH="300" HEIGHT="159" ALT="Progress bar positioned along the bottom of a window." >
<P><A CLASS=tctop HREF="ProgBar.htm#Using_Progress_Bars"><IMG SRC="../../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Using Progress Bars</A><BR>
<P><A CLASS=tctop HREF="ProgBar.htm#Progress_Bar_Control"><IMG SRC="../../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Progress Bar Control Updates in Internet Explorer</A><BR>
<P><A CLASS=tctop HREF="RefList.htm#progbar_ProgBar"><IMG SRC="../../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Progress Bar Control Reference</A><BR>
<H2><A NAME="Using_Progress_Bars">Using Progress Bars</A></H2>
<P>You create a progress bar by using the
<object id="hhal_3" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_3.Click()>CreateWindowEx</A> function, specifying the PROGRESS_CLASS window class. This window class is registered when the common control dynamic-link library (DLL) is loaded. To ensure that this DLL is loaded, use the <A HREF="../common/functions/InitCommonControls.htm#InitCommonControls">InitCommonControls</A> function first.

<H3><A NAME="Range_and_Current_Po">Range and Current Position</A></H3>
<P>A progress bar's <I>range</I> represents the entire duration of the operation, and the <I>current position</I> represents the progress that the application has made toward completing the operation. The window procedure uses the range and the current position to determine the percentage of the progress bar to fill with the highlight color as well as to determine the text, if any, to display within the progress bar. Because the range and current position values are expressed as unsigned integers, the highest possible range or current position value is 65,535.

<P>The minimum value in the range can be from 0 to 65,535. Likewise, the maximum value can be from 0 to 65,535. If you do not set the range values, the system sets the minimum value to 0 and the maximum value to 100. You can adjust the range to convenient integers by using the <A HREF="messages/PBM_SETRANGE.htm#PBM_SETRANGE">PBM_SETRANGE</A> message. 

<P>A progress bar provides several messages that you can use to set the current position. The <A HREF="messages/PBM_SETPOS.htm#PBM_SETPOS">PBM_SETPOS</A> message sets the position to a given value. The <A HREF="messages/PBM_DELTAPOS.htm#PBM_DELTAPOS">PBM_DELTAPOS</A> message advances the position by adding a specified value to the current position. 

<P>The <A HREF="messages/PBM_SETSTEP.htm#PBM_SETSTEP">PBM_SETSTEP</A> message allows you to specify a step increment for a progress bar. Subsequently, whenever you send the <A HREF="messages/PBM_STEPIT.htm#PBM_STEPIT">PBM_STEPIT</A> message to the progress bar, the current position advances by the specified increment. By default, the step increment is set to 10.

<H3><A NAME="Default_Progress_Bar">Default Progress Bar Message Processing</A></H3>
<P>This section describes the messages handled by the window procedure for the PROGRESS_CLASS class.

<TABLE>
<TR><TD><B>Message
 </B></TD><TD><B>Processing performed
</B></TD></TR><TR><TD>WM_CREATE
 </TD><TD>Allocates and initializes an initial structure. </TD></TR><TR><TD>WM_DESTROY
 </TD><TD>Frees all resources associated with the progress bar.</TD></TR><TR><TD>WM_ERASEBKGND
 </TD><TD>Draws the background and borders of the progress bar.</TD></TR><TR><TD>WM_GETFONT
 </TD><TD>Returns the handle to the font that the progress bar is currently using to draw text.</TD></TR><TR><TD>WM_PAINT
 </TD><TD>Draws the progress bar. If the <I>wParam</I> parameter is non-NULL, the control assumes that the value is an HDC and paints using that device context.</TD></TR><TR><TD>WM_SETFONT
 </TD><TD>Saves the handle to the new font and returns the handle to the previous font.</TD></TR></TABLE>
<H3><A NAME="Progress_Bar_Example">Progress Bar Example</A></H3>
<P>The following example shows how to use a progress bar to indicate the progress of a lengthy file-parsing operation. The example creates a progress bar and positions it along the bottom of the parent window's client area. The height of the progress bar is based on the height of the arrow bitmap used in a scroll bar. The range is based on the size of the file divided by 2048, which is the size of each "chunk" of data read from the file. The example also sets an increment and advances the current position of the progress bar by the increment after parsing each chunk. 

<PRE>&#009;// ParseALargeFile - parses a large file and uses a progress bar to 
&#009;//   indicate the progress of the parsing operation. 
&#009;// Returns TRUE if successful, or FALSE otherwise. 
&#009;// hwndParent - parent window of the progress bar. 
&#009;// lpszFileName - name of the file to parse. 
&#009;// 
&#009;// Global variable 
&#009;//     g_hinst - instance handle 
&#009;extern HINSTANCE g_hinst; 
 
&#009;BOOL ParseALargeFile(HWND hwndParent, LPSTR lpszFileName) 
&#009;{ 
&#009;    RECT rcClient;  // client area of parent window 
    int cyVScroll;  // height of scroll bar arrow 
    HWND hwndPB;    // handle of progress bar 
    HANDLE hFile;   // handle of file 
    DWORD cb;       // size of file and count of bytes read 
    LPCH pch;       // address of data read from file 
    LPCH pchTmp;    // temporary pointer 
 
    // Ensure that the common control DLL is loaded and create a 
    // progress bar along the bottom of the client area of the 
    // parent window. Base the height of the progress bar on 
    // the height of a scroll bar arrow. 
    InitCommonControls(); 
    GetClientRect(hwndParent, &amp;rcClient); 
    cyVScroll = GetSystemMetrics(SM_CYVSCROLL); 
    hwndPB = CreateWindowEx(0, PROGRESS_CLASS, (LPSTR) NULL, 
        WS_CHILD | WS_VISIBLE, rcClient.left, 
        rcClient.bottom - cyVScroll, 
        rcClient.right, cyVScroll, 
        hwndParent, (HMENU) 0, g_hinst, NULL); 
 
    // Open the file for reading, and retrieve the size of the file. 
    hFile = CreateFile(lpszFileName, GENERIC_READ, FILE_SHARE_READ, 
        (LPSECURITY_ATTRIBUTES) NULL, OPEN_EXISTING, 
        FILE_ATTRIBUTE_NORMAL, (HANDLE) NULL); 
 
    if (hFile == (HANDLE) INVALID_HANDLE_VALUE) 
        return FALSE; 
 
    cb = GetFileSize(hFile, (LPDWORD) NULL); 
 
    // Set the range and increment of the progress bar. 
    SendMessage(hwndPB, PBM_SETRANGE, 0, MAKELPARAM(0, cb / 2048)); 
    SendMessage(hwndPB, PBM_SETSTEP, (WPARAM) 1, 0); 
 
    // Parse the file. 
    pch = (LPCH) LocalAlloc(LPTR, sizeof(char) * 2048); 
    pchTmp = pch; 
    do { 
        ReadFile(hFile, pchTmp, sizeof(char) * 2048, &amp;cb, 
            (LPOVERLAPPED) NULL); 
        . 
        . // Include here any code that parses the file. 
        . 
 
        // Advance the current position of the progress bar 
        // by the increment. 
        SendMessage(hwndPB, PBM_STEPIT, 0, 0); 
    } while (cb); 
    CloseHandle((HANDLE) hFile); 
 
    DestroyWindow(hwndPB); 
    return TRUE; 
&#009;} 
 
</PRE>
<!--************************************************************--><H2><A NAME="Progress_Bar_Control">Progress Bar Control Updates in Internet Explorer</A></H2>
<!-- ************************************************** --><P>Progress bar controls in Microsoft&#174; Internet Explorer support the following new features.
<DL>
<DT><B>New Progress Bar Control Styles</B>
</DT><DD>Progress bar controls can now display progress information vertically, using the <A HREF="Styles.htm#PBS_VERTICAL">PBS_VERTICAL</A> style. Also, a smooth progress mode is supported using the <A HREF="Styles.htm#PBS_SMOOTH">PBS_SMOOTH</A> style. Using the <B>PBS_SMOOTH</B> style causes the control to display a contiguous progress bar instead of a segmented bar.
</DD><DT><B>Extended Range Values</B>
</DT><DD>Progress bar controls now support 32-bit range values. To set range values in excess of 65,535, use the <A HREF="messages/PBM_SETRANGE32.htm#PBM_SETRANGE32">PBM_SETRANGE32</A> message. To retrieve 32-bit range values, use the <A HREF="messages/PBM_GETRANGE.htm#PBM_GETRANGE">PBM_GETRANGE</A> message. The progress bar high limit, low limit, and position parameters are signed integers. To make full use of the 32-bit range, set the range to -0x7FFFFFFF to 0x7FFFFFFF and treat the position as a signed integer.
</DD><DT><B>Programmable Colors</B> 
</DT><DD>An application can now control the colors used in a progress bar control with the <A HREF="messages/PBM_SETBARCOLOR.htm#PBM_SETBARCOLOR">PBM_SETBARCOLOR</A> and <A HREF="messages/PBM_SETBKCOLOR.htm#PBM_SETBKCOLOR">PBM_SETBKCOLOR</A> messages.
</DD></DL>
<!-- ************************************************** -->
<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
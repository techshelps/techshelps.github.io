<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Toolbar Controls</TITLE>

<META NAME=MS-HKWD CONTENT="Toolbar Controls">
<META NAME="Keywords" CONTENT="Internet Tools & Technologies, Common controls">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT, Mac">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="ch_toolbar"></A>
<!--NAV_LINKS_START-->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Toolbar Controls"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../../art/headbard.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Toolbar Controls"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR><TR><TD><PRE><IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="../CommCtls.htm#book_cc">Topic Contents</A></PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="../tab/structures/TCITEMHEADER.htm">TCITEMHEADER</A>
<IMG SRC="../../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="RefList.htm">Toolbar Control Reference</A></PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>Toolbar Controls</H1>
<BR CLEAR=ALL>
<P>A <I>toolbar</I> is a control window that contains one or more buttons. Each button sends a command message to the parent window when the user clicks it. 
<P><A CLASS=tctop HREF="ToolBar.htm#About_Toolbar_Contro"><IMG SRC="../../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">About Toolbar Controls</A><BR>
<P><A CLASS=tctop HREF="ToolBar.htm#Using_Toolbar_Contro"><IMG SRC="../../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Using Toolbar Controls</A><BR>
<P><A CLASS=tctop HREF="ToolBar.htm#tb_updates"><IMG SRC="../../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Toolbar Control Updates in Internet Explorer</A><BR>
<P><A CLASS=tctop HREF="RefList.htm#tb_ref"><IMG SRC="../../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Toolbar Control Reference</A><BR>
<!--************************************************************--><H2><A NAME="About_Toolbar_Contro">About Toolbar Controls</A></H2>
<P>Typically, the buttons in a toolbar correspond to items in the application's menu, providing an additional and more direct way for the user to access an application's commands. The following illustration shows a window that has a toolbar positioned below the menu bar.

<P><IMG SRC="../../../art/tb_scrn1.gif" WIDTH="384" HEIGHT="173" ALT="Window with a toolbar positioned below the menu bar." >

<P>A toolbar has built-in customization features&#151;including a system-defined customization dialog box&#151;that allow the user to insert, delete, or rearrange toolbar buttons. An application determines whether the customization features are available to the user and controls the extent to which the user may customize the toolbar. 

<H3><A NAME="Toolbar_Creation">Toolbar Creation</A></H3>
<P>You can use the <A HREF="functions/CreateToolbarEx.htm#CreateToolbarEx">CreateToolbarEx</A> function to create a toolbar and add an initial set of buttons to it. You can also use the
<object id="hhal_3" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_3.Click()>CreateWindowEx</A> function, specifying the TOOLBARCLASSNAME window class, but this second method creates a toolbar that initially contains no buttons. You add buttons to the toolbar by using the <A HREF="messages/TB_ADDBUTTONS.htm#TB_ADDBUTTONS">TB_ADDBUTTONS</A> or <A HREF="messages/TB_INSERTBUTTON.htm#TB_INSERTBUTTON">TB_INSERTBUTTON</A> message. If you will be retrieving the size of the toolbar, you must send the <A HREF="messages/TB_AUTOSIZE.htm#TB_AUTOSIZE">TB_AUTOSIZE</A> message after all of the items and strings have been inserted into the control to cause the toolbar to recalculate its size based on its content.

<P>The TOOLBARCLASSNAME window class is registered when the common control dynamic-link library (DLL) is loaded. To ensure that this DLL is loaded, use the <A HREF="../common/functions/InitCommonControls.htm#InitCommonControls">InitCommonControls</A> function first. 

<P>A toolbar must be created as a child window with the WS_CHILD style. If you use
<object id="hhal_4" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_4.Click()>CreateWindowEx</A> to create a toolbar, you must specify the WS_CHILD window style. <A HREF="functions/CreateToolbarEx.htm#CreateToolbarEx">CreateToolbarEx</A> includes the WS_CHILD style by default. You must specify the initial parent window when creating the toolbar, but you can change the parent window after creation by using the <A HREF="messages/TB_SETPARENT.htm#TB_SETPARENT">TB_SETPARENT</A> message.

<H3><A NAME="Toolbar_Size_and_Pos">Toolbar Size and Position</A></H3>
<P>The window procedure for a toolbar automatically sets the size and position of the toolbar window. The height is based on the height of the buttons in the toolbar. The width is the same as the width of the parent window's client area. The CCS_TOP and CCS_BOTTOM common control styles determine whether the toolbar is positioned along the top or bottom of the client area. By default, a toolbar has the CCS_TOP style.

<P>The toolbar window procedure automatically adjusts the size of the toolbar whenever it receives a
<object id="hhal_5" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_5.Click()>WM_SIZE</A> or <A HREF="messages/TB_AUTOSIZE.htm#TB_AUTOSIZE">TB_AUTOSIZE</A> message. An application should send either of these messages whenever the size of the parent window changes or after sending a message that requires the size of the toolbar to be adjusted&#151;for example, the <A HREF="messages/TB_SETBUTTONSIZE.htm#TB_SETBUTTONSIZE">TB_SETBUTTONSIZE</A> message.

<H3><A NAME="Tooltip_Style">Tooltip Style</A></H3>
<P>There is only one class-specific style associated with toolbars: <A HREF="Styles.htm#TBSTYLE_TOOLTIPS">TBSTYLE_TOOLTIPS</A>. When you specify this style, the toolbar creates and manages a tooltip control. A tooltip control is a small pop-up window that contains a line of text describing a toolbar button. The tooltip control is hidden and appears only when the user moves the cursor over a toolbar button and leaves it there for approximately one second. The tooltip control is displayed near the cursor.

<P>When the toolbar receives a
<object id="hhal_6" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_6.Click()>WM_MOUSEMOVE</A> message, it sends a notification message to the tooltip control. The tooltip control sets a timer and, after approximately one second, checks to see if the cursor is still at the same location and is on a toolbar button. If it is, the tooltip control sends the <A HREF="../tooltip/notifications/TTN_NEEDTEXT.htm#TTN_NEEDTEXT">TTN_NEEDTEXT</A> notification message to the parent window to retrieve the descriptive text for the button. Then the tooltip control creates a pop-up window and displays the text in the window. The tooltip control destroys the pop-up window when the user clicks a mouse button or moves the cursor out of the toolbar. 

<P>An application that needs to send messages directly to the tooltip control can retrieve the handle to the tooltip by using the <A HREF="messages/TB_GETTOOLTIPS.htm#TB_GETTOOLTIPS">TB_GETTOOLTIPS</A> message. An application can replace the tooltip control of a toolbar with another tooltip control by using the <A HREF="messages/TB_SETTOOLTIPS.htm#TB_SETTOOLTIPS">TB_SETTOOLTIPS</A> message.

<H3><A NAME="Toolbar_Bitmaps">Toolbar Bitmaps</A></H3>
<P>Each button in a toolbar can include a bitmapped image. A toolbar stores the information that it needs to draw the images in an internal list. When you call the <A HREF="functions/CreateToolbarEx.htm#CreateToolbarEx">CreateToolbarEx</A> function, you specify a monochrome or color bitmap that contains the initial images, and the toolbar adds the information to the internal list of images. You can add additional images later by using the <A HREF="messages/TB_ADDBITMAP.htm#TB_ADDBITMAP">TB_ADDBITMAP</A> message. 

<P>Each image has a zero-based index. The first image added to the internal list has an index of zero, the second image has an index of one, and so on. <A HREF="messages/TB_ADDBITMAP.htm#TB_ADDBITMAP">TB_ADDBITMAP</A> adds images to the end of the list and returns the index of the first new image that it added. You use an image's index to associate the image with a button.

<P>Microsoft&#174; Windows assumes that all of a toolbar's bitmapped images are the same size. You specify the size when you create the toolbar by using <A HREF="functions/CreateToolbarEx.htm#CreateToolbarEx">CreateToolbarEx</A>. If you use the
<object id="hhal_7" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_7.Click()>CreateWindowEx</A> function to create a toolbar, the size of the images is set to the default dimensions of 16 by 15 pixels. You can use the <A HREF="messages/TB_SETBITMAPSIZE.htm#TB_SETBITMAPSIZE">TB_SETBITMAPSIZE</A> message to change the dimensions of the bitmapped images, but you must do so before adding any images to the internal list of images.

<H3><A NAME="Toolbar_Strings">Toolbar Strings</A></H3>
<P>Each button can display a string in addition to, or instead of, an image. A toolbar maintains an internal list that contains all of the strings available to toolbar buttons. You add strings to the internal list by using the <A HREF="messages/TB_ADDSTRING.htm#TB_ADDSTRING">TB_ADDSTRING</A> message, specifying the address of the buffer containing the strings to add. Each string must be null-terminated, and the last string must be terminated with two null characters. 

<P>Each string has a zero-based index. The first string added to the internal list of strings has an index of zero, the second string has an index of one, and so on. <A HREF="messages/TB_ADDSTRING.htm#TB_ADDSTRING">TB_ADDSTRING</A> adds strings to the end of the list and returns the index of the first new string. You use a string's index to associate the string with a button.

<H3><A NAME="Toolbar_Buttons">Toolbar Buttons</A></H3>
<P>You add buttons to a toolbar by filling an array of <A HREF="structures/TBBUTTON.htm#TBBUTTON">TBBUTTON</A> structures and specifying the address of the array either in the <A HREF="messages/TB_ADDBUTTONS.htm#TB_ADDBUTTONS">TB_ADDBUTTONS</A> message or in a call to the <A HREF="functions/CreateToolbarEx.htm#CreateToolbarEx">CreateToolbarEx</A> function. You can also use the <A HREF="messages/TB_INSERTBUTTON.htm#TB_INSERTBUTTON">TB_INSERTBUTTON</A> message, which passes the address of a <B>TBBUTTON</B> structure to the toolbar. Each <B>TBBUTTON</B> structure defines the attributes of a button, including the indexes of its string and bitmap as well as its style, state, command identifier, and application-defined 32-bit value. 

<P>If you use the
<object id="hhal_8" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_8.Click()>CreateWindowEx</A> function to create a toolbar, you must send the <A HREF="messages/TB_BUTTONSTRUCTSIZE.htm#TB_BUTTONSTRUCTSIZE">TB_BUTTONSTRUCTSIZE</A> message before adding any buttons. The message passes the size of the <A HREF="structures/TBBUTTON.htm#TBBUTTON">TBBUTTON</A> structure to the toolbar. 

<H4><A NAME="Toolbar_button_style">Toolbar button styles</A></H4>
<P>A button's style determines how the button appears and how it responds to user input. The <A HREF="Styles.htm#TBSTYLE_BUTTON">TBSTYLE_BUTTON</A> style creates a toolbar button that behaves like a standard push button. A button that has the <A HREF="Styles.htm#TBSTYLE_CHECK">TBSTYLE_CHECK</A> style is similar to a standard push button, except it toggles between the pressed and nonpressed states each time the user clicks it. 

<P>You can create groups of toolbar buttons that act like radio buttons by using the <A HREF="Styles.htm#TBSTYLE_GROUP">TBSTYLE_GROUP</A> or <A HREF="Styles.htm#TBSTYLE_CHECKGROUP">TBSTYLE_CHECKGROUP</A> style. This causes a button to stay pressed until the user chooses another button in the group. The <A HREF="Styles.htm#TBSTYLE_SEP">TBSTYLE_SEP</A> style creates a small gap between buttons. A button with this style does not receive user input. 

<H4><A NAME="Toolbar_button_state">Toolbar button states</A></H4>
<P>Each button in a toolbar has a current state. The toolbar updates a button's state to reflect user actions, such as clicking the button. The state indicates whether the button is currently pressed or not pressed, enabled or disabled, hidden or visible, and so on. Although an application sets a button's initial state when adding the button to the toolbar, it can change and retrieve the state by sending messages to the toolbar. For a list of toolbar button states, see <A HREF="States.htm#tb_button_states">Toolbar States</A>.

<P>An application can use the <A HREF="messages/TB_GETSTATE.htm#TB_GETSTATE">TB_GETSTATE</A> and <A HREF="messages/TB_SETSTATE.htm#TB_SETSTATE">TB_SETSTATE</A> messages to retrieve and set the state of a button. In addition, a toolbar includes the following messages that retrieve or set a particular state:

<TABLE>
<TR><TD><A HREF="messages/TB_CHECKBUTTON.htm#TB_CHECKBUTTON">TB_CHECKBUTTON</A>
 </TD><TD><A HREF="messages/TB_ISBUTTONCHECKED.htm#TB_ISBUTTONCHECKED">TB_ISBUTTONCHECKED</A></TD></TR><TR><TD><A HREF="messages/TB_ENABLEBUTTON.htm#TB_ENABLEBUTTON">TB_ENABLEBUTTON</A>
 </TD><TD><A HREF="messages/TB_ISBUTTONENABLED.htm#TB_ISBUTTONENABLED">TB_ISBUTTONENABLED</A></TD></TR><TR><TD><A HREF="messages/TB_HIDEBUTTON.htm#TB_HIDEBUTTON">TB_HIDEBUTTON</A>
 </TD><TD><A HREF="messages/TB_ISBUTTONHIDDEN.htm#TB_ISBUTTONHIDDEN">TB_ISBUTTONHIDDEN</A></TD></TR><TR><TD><A HREF="messages/TB_INDETERMINATE.htm#TB_INDETERMINATE">TB_INDETERMINATE</A>
 </TD><TD><A HREF="messages/TB_ISBUTTONINDETERMINATE.htm#TB_ISBUTTONINDETERMINATE">TB_ISBUTTONINDETERMINATE</A></TD></TR><TR><TD><A HREF="messages/TB_PRESSBUTTON.htm#TB_PRESSBUTTON">TB_PRESSBUTTON</A>
 </TD><TD><A HREF="messages/TB_ISBUTTONPRESSED.htm#TB_ISBUTTONPRESSED">TB_ISBUTTONPRESSED</A></TD></TR></TABLE>
<H4><A NAME="Command_identifier">Command identifier</A></H4>
<P>Each button has a command identifier associated with it. When the user selects a button, the toolbar sends the parent window a
<object id="hhal_9" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_9.Click()>WM_COMMAND</A> message that includes the command identifier of the button. The parent window examines the command identifier and carries out the command associated with the button. 

<H4><A NAME="Button_size_and_posi">Button size and position</A></H4>
<P>A toolbar keeps track of its buttons by assigning each button a position index. The index is zero-based; that is, the leftmost button has an index of zero, the next button to the right has an index of one, and so on. An application must specify the index of a button when sending messages to retrieve information about the button or to set the button's attributes.

<P>A toolbar updates the position indexes as buttons are inserted and removed. An application can retrieve the current position index of a button by using the <A HREF="messages/TB_COMMANDTOINDEX.htm#TB_COMMANDTOINDEX">TB_COMMANDTOINDEX</A> message. The message specifies the command identifier of a button, and the toolbar window uses the identifier to locate the button and return its position index.

<P>All buttons in a toolbar are the same size. The <A HREF="functions/CreateToolbarEx.htm#CreateToolbarEx">CreateToolbarEx</A> function requires you to set the initial size of the buttons when you create the toolbar. When you use the
<object id="hhal_10" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_10.Click()>CreateWindowEx</A> function to create a toolbar, the initial size is set to the default dimensions of 24 by 22 pixels. You can use the <A HREF="messages/TB_SETBUTTONSIZE.htm#TB_SETBUTTONSIZE">TB_SETBUTTONSIZE</A> message to change the button size, but you must do so before adding any buttons to the toolbar. The <A HREF="messages/TB_GETITEMRECT.htm#TB_GETITEMRECT">TB_GETITEMRECT</A> message retrieves the current dimensions of the buttons.

<P>When you add a string that is longer than any string currently in the toolbar, the toolbar automatically resets the width of its buttons. The width is set to accommodate the longest string in the toolbar.

<H3><A NAME="Customization">Customization</A></H3>
<P>A toolbar has built in customization features that you can make available to the user by giving the toolbar the CCS_ADJUSTABLE common control style. The customization features allow the user to drag a button to a new position or to remove a button by dragging it off the toolbar. In addition, the user can double-click the toolbar to display the Customize Toolbar dialog box, which allows the user to add, delete, and rearrange toolbar buttons. An application can display the dialog box by using the <A HREF="messages/TB_CUSTOMIZE.htm#TB_CUSTOMIZE">TB_CUSTOMIZE</A> message.

<P>The toolbar sends notification messages (in the form of <A HREF="../common/messages/WM_NOTIFY.htm#WM_NOTIFY">WM_NOTIFY</A> messages) to the parent window at each step in the customization process. If the user holds the <SMALL>SHIFT</SMALL> key down and begins dragging a button, the toolbar automatically handles the drag operation. The toolbar sends the <A HREF="notifications/TBN_QUERYDELETE.htm#TBN_QUERYDELETE">TBN_QUERYDELETE</A> notification message to the parent window to determine whether the button may be deleted. The drag operation ends if the parent window returns FALSE. Otherwise, the toolbar captures mouse input and waits for the user to release the mouse button. 

<P>When the user releases the mouse button, the toolbar determines the location of the mouse cursor. If the cursor is outside the toolbar, the button is deleted. If the cursor is on another toolbar button, the toolbar sends the <A HREF="notifications/TBN_QUERYINSERT.htm#TBN_QUERYINSERT">TBN_QUERYINSERT</A> notification message to the parent window to determine if a button may be inserted to the left of the given button. The button is inserted if the parent window returns TRUE. The toolbar sends the <A HREF="notifications/TBN_TOOLBARCHANGE.htm#TBN_TOOLBARCHANGE">TBN_TOOLBARCHANGE</A> notification message to signal the end of the drag operation. 

<P>If the user begins a drag operation without holding down the <SMALL>SHIFT</SMALL> key, the toolbar sends the <A HREF="notifications/TBN_BEGINDRAG.htm#TBN_BEGINDRAG">TBN_BEGINDRAG</A> notification message to the parent window. An application that implements its own button-dragging code can use this message as a signal that a drag operation has begun. The toolbar sends the <A HREF="notifications/TBN_ENDDRAG.htm#TBN_ENDDRAG">TBN_ENDDRAG</A> notification message to signal the end of the drag operation. 

<P>A toolbar sends notification messages when the user customizes a toolbar by using the Customize Toolbar dialog box. The toolbar sends the <A HREF="notifications/TBN_BEGINADJUST.htm#TBN_BEGINADJUST">TBN_BEGINADJUST</A> notification message after the user double-clicks the toolbar, but before the dialog box is created. Next, the toolbar begins sending a series of <A HREF="notifications/TBN_QUERYINSERT.htm#TBN_QUERYINSERT">TBN_QUERYINSERT</A> notification messages to determine whether the toolbar allows buttons to be inserted. When the parent window returns TRUE, the toolbar stops sending <B>TBN_QUERYINSERT</B> notifications. If the parent window does not return TRUE for any button, the toolbar destroys the dialog box. 

<P>Next, the toolbar determines if any buttons may be deleted by sending one <A HREF="notifications/TBN_QUERYDELETE.htm#TBN_QUERYDELETE">TBN_QUERYDELETE</A> notification message for each button in the toolbar. The parent window returns TRUE to indicate that a button may be deleted; otherwise, it returns FALSE. The toolbar adds all toolbar buttons to the dialog box, but it grays those that may not be deleted. 

<P>When the toolbar needs information about a button in the Customize Toolbar dialog box, it sends the <A HREF="notifications/TBN_GETBUTTONINFO.htm#TBN_GETBUTTONINFO">TBN_GETBUTTONINFO</A> notification message, specifying the index of the button for which it needs information and the address of an <A HREF="structures/TBNOTIFY.htm#TBNOTIFY">NMTOOLBAR</A> structure. The parent window must fill the structure with the relevant information. 

<P>The Customize Toolbar dialog box includes a Help button and a Reset button. When the user chooses the Help button, the toolbar sends the <A HREF="notifications/TBN_CUSTHELP.htm#TBN_CUSTHELP">TBN_CUSTHELP</A> notification message. The parent window should respond by displaying Help information. The dialog box sends the <A HREF="notifications/TBN_RESET.htm#TBN_RESET">TBN_RESET</A> notification message when the user selects the Reset button. This message signals that the toolbar is about to reinitialize the dialog box. 

<P>An application can use the <A HREF="messages/TB_SAVERESTORE.htm#TB_SAVERESTORE">TB_SAVERESTORE</A> message to save the current state of a toolbar in an initialization file or to restore the state based on information previously stored in an initialization file. The message saves the state information in the specified initialization file or in the Win.ini file if no initialization file is specified. An application typically stores the state before the user begins customizing the toolbar in case the user later wants to restore the toolbar to its original state. 

<H3><A NAME="Default_Message_Hand">Default Message Handling</A></H3>
<P>This section describes the window message processing performed by a toolbar. Messages specific to toolbars are discussed in other sections of this documentation, so they are not included here.

<TABLE>
<TR><TD><B>Message
 </B></TD><TD><B>Default processing
</B></TD></TR><TR><TD><object id="hhal_11" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_11.Click()>WM_CHARTOITEM</A>
 </TD><TD>Forwards this message to the parent window.</TD></TR><TR><TD><object id="hhal_12" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_12.Click()>WM_COMMAND</A>
 </TD><TD>Forwards this message to the parent window.</TD></TR><TR><TD><object id="hhal_13" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_13.Click()>WM_CREATE</A>
 </TD><TD>Allocates internal memory and graphics objects. It also initializes internal variables and data structures. </TD></TR><TR><TD><object id="hhal_14" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_14.Click()>WM_DESTROY</A>
 </TD><TD>Frees all memory and graphics objects previously allocated for the toolbar. </TD></TR><TR><TD><object id="hhal_15" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_15.Click()>WM_DRAWITEM</A>
 </TD><TD>Forwards this message to the parent window.</TD></TR><TR><TD><object id="hhal_16" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_16.Click()>WM_LBUTTONDBLCLK</A>
 </TD><TD>Forwards this message to the
<object id="hhal_17" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_17.Click()>DefWindowProc</A> function and returns the result. </TD></TR><TR><TD><object id="hhal_18" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_18.Click()>WM_LBUTTONDOWN</A>
 </TD><TD>Forwards this message to the tooltip control. If a button was clicked, it sets the state of the button and redraws it. It begins a drag operation if the toolbar has the CCS_ADJUSTABLE style and the <SMALL>SHIFT</SMALL> key is down (or the <SMALL>ALT</SMALL> key, if the toolbar has the TBSTYLE_ALTDRAG style). </TD></TR><TR><TD><object id="hhal_19" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_19.Click()>WM_LBUTTONUP</A>
 </TD><TD>Forwards this message to the tooltip control. If a button was clicked, it sets the state of the button and redraws it. It also ends the drag operation, if one is underway, and redraws the toolbar. </TD></TR><TR><TD><object id="hhal_20" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_20.Click()>WM_MEASUREITEM</A>
 </TD><TD>Forwards this message to the parent window.</TD></TR><TR><TD><object id="hhal_21" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_21.Click()>WM_MOUSEMOVE</A>
 </TD><TD>Forwards this message to the tooltip control. If a button has the mouse capture and the cursor moves out of the button rectangle, it redraws the button. It checks whether the toolbar has lost the mouse capture and, if it has, ends the drag operation.</TD></TR><TR><TD><object id="hhal_22" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_22.Click()>WM_NCACTIVATE</A>,
<object id="hhal_23" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_23.Click()>WM_NCPAINT</A> 
 </TD><TD>Redraws the borders of the toolbar if the toolbar does not have the CCS_NODIVIDER style. Otherwise, it forwards the message to the
<object id="hhal_24" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_24.Click()>DefWindowProc</A> function. </TD></TR><TR><TD><A HREF="../common/messages/WM_NOTIFY.htm#WM_NOTIFY">WM_NOTIFY</A>
 </TD><TD>Forwards the <A HREF="../tooltip/notifications/TTN_NEEDTEXT.htm#TTN_NEEDTEXT">TTN_NEEDTEXT</A> notification message from the tooltip control to the parent of the toolbar. </TD></TR><TR><TD><object id="hhal_25" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_25.Click()>WM_PAINT</A>
 </TD><TD>Draws the toolbar. If the <I>wParam</I> parameter is non-NULL, the control assumes that the value is an HDC and paints using that device context.</TD></TR><TR><TD><object id="hhal_26" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_26.Click()>WM_SIZE</A>
 </TD><TD>Recalculates the size and position of the toolbar and redraws it. </TD></TR><TR><TD><object id="hhal_27" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_27.Click()>WM_SYSCOLORCHANGE</A>
 </TD><TD>Updates the colors of the buttons and toolbar to match the system colors. </TD></TR><TR><TD><object id="hhal_28" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_28.Click()>WM_VKEYTOITEM</A>
 </TD><TD>Forwards this message to the parent window.</TD></TR><TR><TD><object id="hhal_29" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_29.Click()>WM_WININICHANGE</A>
 </TD><TD>Reinitializes internal variables that depend on system metric values.</TD></TR></TABLE>
<H2><A NAME="Using_Toolbar_Contro">Using Toolbar Controls</A></H2>
<P>This section contains examples that demonstrate how to create a toolbar and process tooltip notification messages. 

<H3><A NAME="Creating_a_Toolbar">Creating a Toolbar</A></H3>
<P>The following example shows how to use the
<object id="hhal_30" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_30.Click()>CreateWindowEx</A> function to create a toolbar that the user can customize and that has a tooltip control associated with it. The example uses the <A HREF="messages/TB_ADDBITMAP.htm#TB_ADDBITMAP">TB_ADDBITMAP</A> and <A HREF="messages/TB_ADDSTRING.htm#TB_ADDSTRING">TB_ADDSTRING</A> messages to add button images and buttons strings to the toolbar. The example also adds three buttons by using the <A HREF="messages/TB_ADDBUTTONS.htm#TB_ADDBUTTONS">TB_ADDBUTTONS</A> message. 

<PRE>&#009;// CreateAToolBar - creates a toolbar and adds the initial set of 
&#009;//     buttons to it. 
&#009;// Returns the handle to the toolbar if successful, or NULL otherwise. 
&#009;// hwndParent - handle to the parent window. 
&#009;HWND CreateAToolBar(HWND hwndParent) 
&#009;{ 
&#009;    HWND hwndTB; 
&#009;    TBADDBITMAP tbab; 
    TBBUTTON tbb[3]; 
    char szBuf[16]; 
    int iCut, iCopy, iPaste; 
 
    // Ensure that the common control DLL is loaded. 
    InitCommonControls(); 
 
    // Create a toolbar that the user can customize and that has a 
    // tooltip associated with it. 
    hwndTB = CreateWindowEx(0, TOOLBARCLASSNAME, (LPSTR) NULL, 
        WS_CHILD | TBSTYLE_TOOLTIPS | CCS_ADJUSTABLE, 
        0, 0, 0, 0, hwndParent, (HMENU) ID_TOOLBAR, g_hinst, NULL); 
 
    // Send the TB_BUTTONSTRUCTSIZE message, which is required for 
    // backward compatibility. 
    SendMessage(hwndTB, TB_BUTTONSTRUCTSIZE, 
        (WPARAM) sizeof(TBBUTTON), 0); 
 
    // Add the bitmap containing button images to the toolbar. 
    tbab.hInst = g_hinst; 
    tbab.nID   = IDB_BUTTONS; 
    SendMessage(hwndTB, TB_ADDBITMAP, (WPARAM) NUM_BUTTON_BITMAPS, 
        (WPARAM) &amp;tbab); 
 
    // Add the button strings to the toolbar. 
    LoadString(g_hinst, IDS_CUT, (LPSTR) &amp;szBuf, MAX_LEN); 
    iCut = SendMessage(hwndTB, TB_ADDSTRING, 0, (LPARAM) (LPSTR) szBuf); 
 
    LoadString(g_hinst, IDS_COPY, (LPSTR) &amp;szBuf, MAX_LEN); 
    iCopy = SendMessage(hwndTB, TB_ADDSTRING, (WPARAM) 0, 
        (LPARAM) (LPSTR) szBuf); 
 
    LoadString(g_hinst, IDS_PASTE, (LPSTR) &amp;szBuf, MAX_LEN); 
    iPaste = SendMessage(hwndTB, TB_ADDSTRING, (WPARAM) 0, 
        (LPARAM) (LPSTR) szBuf); 
 
    // Fill the TBBUTTON array with button information, and add the 
    // buttons to the toolbar. 
    tbb[0].iBitmap = BMP_CUT; 
    tbb[0].idCommand = IDM_CUT; 
    tbb[0].fsState = TBSTATE_ENABLED; 
    tbb[0].fsStyle = TBSTYLE_BUTTON; 
    tbb[0].dwData = 0; 
    tbb[0].iString = iCut; 
 
    tbb[1].iBitmap = BMP_COPY; 
    tbb[1].idCommand = IDM_COPY; 
    tbb[1].fsState = TBSTATE_ENABLED; 
    tbb[1].fsStyle = TBSTYLE_BUTTON; 
    tbb[1].dwData = 0; 
    tbb[1].iString = iCopy; 
 
    tbb[2].iBitmap = BMP_PASTE; 
    tbb[2].idCommand = IDM_PASTE; 
    tbb[2].fsState = TBSTATE_ENABLED; 
    tbb[2].fsStyle = TBSTYLE_BUTTON; 
    tbb[2].dwData = 0; 
    tbb[2].iString = iPaste; 
 
    SendMessage(hwndTB, TB_ADDBUTTONS, (WPARAM) NUM_BUTTONS, 
        (LPARAM) (LPTBBUTTON) &amp;tbb); 
 
    SendMessage(hwndTB, TB_AUTOSIZE, 0, 0); 

    ShowWindow(hwndTB, SW_SHOW); 
    return hwndTB; 
&#009;} 
 
</PRE>
<H3><A NAME="Processing_Tooltip_N">Processing Tooltip Notification Messages</A></H3>
<P>A toolbar that has the <A HREF="Styles.htm#TBSTYLE_TOOLTIPS">TBSTYLE_TOOLTIPS</A> style creates a tooltip control, which an application can use to display Help text for toolbar buttons. The parent window receives the <A HREF="../tooltip/notifications/TTN_NEEDTEXT.htm#TTN_NEEDTEXT">TTN_NEEDTEXT</A> notification message when the toolbar needs the Help text for a button. The tooltip sends the notification in the form of a <A HREF="../common/messages/WM_NOTIFY.htm#WM_NOTIFY">WM_NOTIFY</A> message. The <I>lParam</I> parameter includes the address of a <A HREF="../tooltip/structures/TOOLTIPTEXT.htm#TOOLTIPTEXT">TOOLTIPTEXT</A> structure that specifies the command identifier of the button for which Help text is needed. An application can copy the Help text to the structure, specify the address of a string containing the Help text, or specify the instance handle and resource identifier of a string resource. 

<P>The following example demonstrates how to process the <A HREF="../tooltip/notifications/TTN_NEEDTEXT.htm#TTN_NEEDTEXT">TTN_NEEDTEXT</A> notification.

<PRE>&#009;case WM_NOTIFY: 
    switch (((LPNMHDR) lParam)-&gt;code) { 
        case TTN_NEEDTEXT: 
            { 
            LPTOOLTIPTEXT lpttt; 
 
            lpttt = (LPTOOLTIPTEXT) lParam; 
            lpttt-&gt;hinst = g_hinst; 
 
            // Specify the resource identifier of the descriptive 
            // text for the given button. 
            idButton = lpttt-&gt;hdr.idFrom; 
            switch (idButton) { 
                case IDM_CUT: 
                    lpttt-&gt;lpszText = MAKEINTRESOURCE(IDS_TIPS_CUT); 
                    break; 
                case IDM_COPY: 
                    lpttt-&gt;lpszText = MAKEINTRESOURCE(IDS_TIPS_COPY); 
                    break; 
                case IDM_PASTE: 
                    lpttt-&gt;lpszText = MAKEINTRESOURCE(IDS_TIPS_PASTE); 
                    break; 
            } 
            break; 
            } 
        . 
        . // Process other notifications here. 
        . 
        default: 
            break; 
    } 
 
</PRE>
<H2><A NAME="tb_updates">Toolbar Control Updates in Internet Explorer</A></H2>
<P>Toolbar controls in Microsoft&#174; Internet Explorer support the following new features. 

<DL>
<DT><B>Image List Support</B>
 </DT><DD>Toolbar controls can use up to three different image lists to display buttons in various states:
 <TABLE>
<TR><TD><B>Normal</B>
 </TD><TD>Buttons in their default state.
 </TD></TR><TR><TD><B>Hot</B>
 </TD><TD>Buttons that are under the pointer or pressed. Hot items are only supported in toolbar controls that have the <A HREF="Styles.htm#TBSTYLE_FLAT">TBSTYLE_FLAT</A> style. </TD></TR><TR><TD><B>Disabled</B>
 </TD><TD>Buttons that are disabled.
 </TD></TR></TABLE>
<P>Applications can still use bitmaps for toolbar buttons. Image list support is offered to allow the control to have greater flexibility. An application sets and retrieves toolbar image lists for normal buttons with the <A HREF="messages/TB_SETIMAGELIST.htm#TB_SETIMAGELIST">TB_SETIMAGELIST</A> and <A HREF="messages/TB_GETIMAGELIST.htm#TB_GETIMAGELIST">TB_GETIMAGELIST</A> messages, respectively. Similarly, the <A HREF="messages/TB_SETHOTIMAGELIST.htm#TB_SETHOTIMAGELIST">TB_SETHOTIMAGELIST</A>, <A HREF="messages/TB_GETHOTIMAGELIST.htm#TB_GETHOTIMAGELIST">TB_GETHOTIMAGELIST</A>, <A HREF="messages/TB_SETDISABLEDIMAGELIST.htm#TB_SETDISABLEDIMAGEL">TB_SETDISABLEDIMAGELIST</A>, and <A HREF="messages/TB_GETDISABLEDIMAGELIST.htm#TB_GETDISABLEDIMAGEL">TB_GETDISABLEDIMAGELIST</A> messages perform the same actions for hot and disabled button image lists.

</DD><DT><B>Transparent Toolbars</B>
 </DT><DD>Toolbar controls support a new, transparent look. An application can create a transparent toolbar control by including the <A HREF="Styles.htm#TBSTYLE_FLAT">TBSTYLE_FLAT</A> style. With the <B>TBSTYLE_FLAT</B> style in place, the control displays buttons while allowing the client area under the toolbar to show through. 
 <P>Transparent toolbar controls feature hot tracking. That is, when the user moves the pointer over a toolbar button, the button's appearance changes. The control displays a border around the "hot" button and, if a hot image list is set, switches the image under the pointer. 
 <P>The following illustration shows a transparent toolbar control with four buttons.

 <P><IMG SRC="../../../art/TB_SCRN.gif" WIDTH="237" HEIGHT="139" ALT="Transparent toolbar control with four buttons." >

 <P>For more information on transparent toolbars, see <A HREF="ToolBar.htm#tb_create_transparent">Creating a Transparent Toolbar Control</A> later in this section.

</DD><DT><B>Drop-Down Toolbar Buttons</B>
 </DT><DD>Toolbar controls support drop-down style buttons. Drop-down buttons have the <A HREF="Styles.htm#TBSTYLE_DROPDOWN">TBSTYLE_DROPDOWN</A> style. When the user clicks a drop-down button, the toolbar control sends its parent a <A HREF="notifications/TBN_DROPDOWN.htm#TBN_DROPDOWN">TBN_DROPDOWN</A> notification message. If the parent is going to display a drop-down menu, it can display one using the
<object id="hhal_31" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_31.Click()>TrackPopupMenuEx</A> function and return zero to the notification message. For more information, see <A HREF="ToolBar.htm#TBSample_DropDown">Supporting Drop-Down Toolbar Buttons</A> later in this section.

</DD><DT><B>Insertion Marks</B>
 </DT><DD>Toolbar controls now support insertion marks. An insertion mark provides a visual indication where an item will be inserted. This is useful for dragging and dropping items into a toolbar. Insertion marks are implemented using the <A HREF="messages/TB_SETINSERTMARK.htm#TB_SETINSERTMARK">TB_SETINSERTMARK</A>, <A HREF="messages/TB_GETINSERTMARK.htm#TB_GETINSERTMARK">TB_GETINSERTMARK</A>, and <A HREF="messages/TB_INSERTMARKHITTEST.htm#TB_INSERTMARKHITTEST">TB_INSERTMARKHITTEST</A> messages. 
</DD></DL>
<H3><A NAME="tb_create_transparent">Creating a Transparent Toolbar Control</A></H3>
<P>To create a transparent toolbar control, use the
<object id="hhal_32" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_32.Click()>CreateWindowEx</A> function, specifying TOOLBARCLASSNAME as the window class. You must first register the window class by calling the <A HREF="../common/functions/InitCommonControlsEx.htm#InitEx_Function">InitCommonControlsEx</A> function, while specifying the ICC_BAR_CLASSES bit in the accompanying <A HREF="../common/structures/INITCOMMONCONTROLSEX.htm#InitEx_Structure">INITCOMMONCONTROLSEX</A> structure.
<P>An application must prepare a toolbar control by sending messages it uses to manage memory and format its display. The <A HREF="ToolBar.htm#TBSample_CreateTransparentToolbar">CreateTransparentToolbar</A> sample function creates a normal or list style transparent toolbar control. It accepts style bits in the <I>dwStyle</I> parameter that are used to determine which type of toolbar it will create.
<P>To support button text and list style buttons, <A HREF="ToolBar.htm#TBSample_CreateTransparentToolbar">CreateTransparentToolbar</A> calls the following application-defined functions:
<UL><LI><A HREF="ToolBar.htm#TBSample_BuildStrList">BuildStrList</A>
<LI><A HREF="ToolBar.htm#TBSample_WidestBtn">WidestBtn</A>
</UL>
<H4><A NAME="TBSample_CreateTransparentToolbar">The CreateTransparentToolbar Sample Function</A></H4>
<P>The CreateTransparentToolbar application-defined function creates and initializes a transparent toolbar.

<PRE>// CreateTransparentToolbar Function
//     Creates a transparent toolbar control based on the owner's
//     window handle and a supplied set of styles that is assumed
//     to be a combination of TBSTYLE_FLAT and TBSTYLE_LIST flags.
//
// Accepts:
//    HWND: The handle to the parent window.
//    DWORD:  Style values that are included in CreateWindowEx.
//
// Returns:
//    HWND to the newly created toolbar. The owner must resize it.

HWND WINAPI CreateTransparentToolbar(HWND hwndOwner, DWORD dwStyle.)
{
   HWND         hwndTB;
   HIMAGELIST   himl, himlHot;   
   TBBUTTON     tbArray[MAX_BUTTONS];
   int          i, iListSpace;
   INITCOMMONCONTROLSEX icex;

   LPTSTR lpszStrList, 
          pszStrArray[4] = { "Button 1",
                             "Button 2",
                             "Button 3",
                             "Button 4"};

   icex.dwSize = sizeof(INITCOMMONCONTROLSEX);
   icex.dwICC  = ICC_BAR_CLASSES;
   InitCommonControlsEx(&amp;icex);

   // Create the toolbar control.
   hwndTB=CreateWindowEx(WS_EX_TOOLWINDOW,
                         TOOLBARCLASSNAME,
                         NULL,
                         WS_CHILD | WS_VISIBLE | WS_CLIPCHILDREN | 
                         WS_CLIPSIBLINGS | CCS_NODIVIDER
                         |CCS_NOPARENTALIGN | CCS_NORESIZE | dwStyle, 
                         0,0,0,0,  // Make it zero, Let owner resize it.
                         hwndOwner,
                         NULL, g_hinst, NULL); 
   
   // Sets the size of the TBBUTTON structure.
   SendMessage(hwndTB, TB_BUTTONSTRUCTSIZE, sizeof(TBBUTTON), 0);

   // Set the maximum number of text rows and bitmap size.
   SendMessage(hwndTB, TB_SETMAXTEXTROWS, 1, 0L);
   SendMessage(hwndTB, TB_SETBITMAPSIZE,
               0, (LPARAM)MAKELONG(MYICON_CX, MYICON_CY));

   // Create, fill, and assign the image list for default buttons.
   himl = ImageList_Create(MYICON_CX,MYICON_CY,ILC_COLOR8,0,4);
   ImageList_Add(himl,
                 LoadBitmap(g_hinst,MAKEINTRESOURCE(IDB_DEF1)),NULL);
   ImageList_Add(himl,
                 LoadBitmap(g_hinst, MAKEINTRESOURCE(IDB_DEF2)),NULL);
   ImageList_Add(himl,
                 LoadBitmap(g_hinst, MAKEINTRESOURCE(IDB_DEF3)),NULL);
   ImageList_Add(himl,
                 LoadBitmap(g_hinst, MAKEINTRESOURCE(IDB_DEF4)),NULL);

   SendMessage(hwndTB, TB_SETIMAGELIST, 0, (LPARAM)himl);

   // Create, fill, and assign the image list for hot buttons.
   himlHot = ImageList_Create(MYICON_CX,MYICON_CY,ILC_COLOR8,0,4);
   ImageList_Add(himlHot,
                 LoadBitmap(g_hinst, MAKEINTRESOURCE(IDB_HOT1)),NULL);
   ImageList_Add(himlHot,
                 LoadBitmap(g_hinst, MAKEINTRESOURCE(IDB_HOT2)),NULL);
   ImageList_Add(himlHot,
                 LoadBitmap(g_hinst, MAKEINTRESOURCE(IDB_HOT3)),NULL);
   ImageList_Add(himlHot,
                 LoadBitmap(g_hinst, MAKEINTRESOURCE(IDB_HOT4)),NULL);
   
   SendMessage(hwndTB, TB_SETHOTIMAGELIST, 0, (LPARAM)himlHot);
   
   // Loop to fill the array of TBBUTTON structures.
   for(i=0;i&lt;MAX_BUTTONS;i++){
      tbArray[i].iBitmap   = i;
      tbArray[i].idCommand = IDM_BUTTONSTART + i;
      tbArray[i].fsState   = TBSTATE_ENABLED;
      tbArray[i].fsStyle   = TBSTYLE_DROPDOWN;//BUTTON;
      tbArray[i].dwData    = 0;
      tbArray[i].iString   = i;
   }
   
   // Put button text in the correct format for TB_ADDSTRING.
   lpszStrList = BuildStrList(pszStrArray);

   SendMessage(hwndTB, TB_ADDSTRING, 0,(LPARAM)lpszStrList);

   // If this is a list style toolbar, add buffer pixels 
   // to make room for button text.
   iBufferPix=(dwStyle &amp; TBSTYLE_LIST)?WidestBtn(pszStrArray, hwndTB):0;

   // Add the buttons, and then set the minimum and maximum button widths.
   SendMessage(hwndTB,
               TB_ADDBUTTONS, (UINT)MAX_BUTTONS, (LPARAM)tbArray);

   SendMessage(hwndTB,
               TB_SETBUTTONWIDTH, 0, 
               (LPARAM)MAKELONG(MYICON_CX+iBufferPix,
               MYICON_CX+iBufferPix));

   return (hwndTB);
}
</PRE>
<H4><A NAME="TBSample_BuildStrList">The BuildStrList Sample Function</A></H4>
<P>The BuildStrList application-defined function creates and fills a buffer based on a static array of strings. The calling function uses the resulting buffer with the <A HREF="messages/TB_ADDSTRING.htm#TB_ADDSTRING">TB_ADDSTRING</A> message.
<PRE>// BuildStrList Function
//    Creates a list of null-terminated strings from a passed-in
//    array of strings. See the documentation about TB_ADDSTRING
//    for specific information about this format.
//
// Accepts:
//    LPTSTR *: Address of the array of strings.
//
// Returns:
//    LPTSTR to the newly created list of button text strings.

LPTSTR WINAPI BuildStrList(LPTSTR * ppszStrArray, INT iStrCount)
{
   LPTSTR pScan,
          pszStrList;

   int i;

   pScan = pszStrList = malloc((size_t)37 * sizeof(char));

   for (i=0;i&lt;iStrCount;i++){
      strcpy(pScan,ppszStrArray[i]);
      pScan += strlen(pScan)+1;
   }
   *pScan = '\0';

   return(pszStrList);
}
</PRE>
<H4><A NAME="TBSample_WidestBtn">The WidestBtn Sample Function</A></H4>
<P>The WidestBtn application-defined function calculates the button width necessary to completely display the widest button text string.
<PRE>// WidestBtn Function
//     Calculates the width, in pixels, of the widest button in the
//     toolbar. Since toolbar controls use the same width for all
//     buttons, the return value is used when sending the 
//     TB_SETBUTTONWIDTH message.
//
// Accepts:
//    LPTSTR *: Address of the array of button text strings.
//    HWND: The handle to the parent window.
//
// Returns:
//    An INT value representing the minimum width, in pixels,
//    a button must be to allow room for the button text.

INT WINAPI WidestBtn(LPTSTR *pszStrArray, HWND hwndOwner)
{
// The toolbar reserves pixels for space between buttons,
// text, and so on. This value is added to the return value
// to compensate.
#define EXTRA_PIXELS 8

   INT      i, iStrMax_cx = 0;
   SIZE     sz;
   LOGFONT  lf;
   HFONT    hFont;
   HDC      hdc;

   // Get the font used to display button text, and then select it into
   // a device context to be passed to GetTextExtentPoint32.
   SystemParametersInfo(SPI_GETICONTITLELOGFONT,sizeof(LOGFONT),&amp;lf,0);

   hdc = GetDC(hwnd);
   hFont = CreateFontIndirect(&amp;lf);
   SelectObject(hdc,hFont);

   // Loop to find the widest string.
   for(i=0;i&lt;MAX_BUTTONS;i++){
      GetTextExtentPoint32(hdc, pszStrArray[i],
                           strlen(pszStrArray[i]), &amp;sz);
      if(sz.cx &gt; iStrMax_cx) iStrMax_cx = sz.cx;
   }

   // Release the DC and font.
   ReleaseDC(hwnd, hdc);
   DeleteObject(hFont);
   
   // Return the sum of the string width, the border, and extra pixels.
   return (iStrMax_cx + GetSystemMetrics(SM_CXBORDER) + EXTRA_PIXELS);}
</PRE>
<H3><A NAME="TBSample_DropDown">Supporting Drop-Down Toolbar Buttons</A></H3>
<P>When the user clicks a toolbar button that uses the <A HREF="Styles.htm#TBSTYLE_DROPDOWN">TBSTYLE_DROPDOWN</A> style, the toolbar control sends its parent a <A HREF="notifications/TBN_DROPDOWN.htm#TBN_DROPDOWN">TBN_DROPDOWN</A> notification message. The following DoNotify application-defined function illustrates how an application can support a drop-down button in a toolbar control by responding to this notification message.

<P>If the incoming notification message is <A HREF="notifications/TBN_DROPDOWN.htm#TBN_DROPDOWN">TBN_DROPDOWN</A>, DoNotify retrieves the bounding rectangle of the button the user clicked by sending the <A HREF="messages/TB_GETRECT.htm#TB_GETRECT">TB_GETRECT</A> message. When sending the message, DoNotify specifies the command identifier of the drop-down button as the <I>wParam</I> parameter of the
<object id="hhal_33" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_33.Click()>SendMessage</A> function. (The button's command identifier was retrieved from the <B>iItem</B> member of the <A HREF="structures/TBNOTIFY.htm#TBNOTIFY">NMTOOLBAR</A> structure that <I>lParam</I> points to.) After DoNotify retrieves the bounding rectangle, it calls
<object id="hhal_34" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_34.Click()>MapWindowPoints</A> to convert the rectangle from client coordinates to screen coordinates. It then retrieves the pop-up menu from a menu resource by using the
<object id="hhal_35" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_35.Click()>GetSubMenu</A> function and calls the
<object id="hhal_36" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_36.Click()>TrackPopupMenuEx</A> function to display the menu. Note that DoNotify positions the menu under the correct button by using the rectangle it retrieved earlier. It also includes the TPM_VERTICAL flag to ensure that the menu is displayed so that it doesn't overlap the button.
<PRE>BOOL WINAPI DoNotify(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
{
#define lpnm   ((LPNMHDR)lParam)
#define lpnmTB ((LPNMTOOLBAR)lParam)

   RECT      rc;
   TPMPARAMS tpm;
   HMENU     hPopupMenu = NULL;
   BOOL      bRet = FALSE;

   switch(lpnm-&gt;code){
      case TBN_DROPDOWN:
         SendMessage(lpnmTB-&gt;hdr.hwndFrom, TB_GETRECT,
                     (WPARAM)lpnmTB-&gt;iItem, (LPARAM)&amp;rc);

         MapWindowPoints(lpnmTB-&gt;hdr.hwndFrom,
                         HWND_DESKTOP, (LPPOINT)&amp;rc, 2);                         

         tpm.cbSize = sizeof(TPMPARAMS);
         tpm.rcExclude.top    = rc.top;
         tpm.rcExclude.left   = rc.left;
         tpm.rcExclude.bottom = rc.bottom;
         tpm.rcExclude.right  = rc.right;
         
         hPopupMenu = 
           GetSubMenu( LoadMenu(g_hinst,MAKEINTRESOURCE(IDR_POPUP)),0);

         TrackPopupMenuEx(hPopupMenu,
                          TPM_LEFTALIGN|TPM_LEFTBUTTON|TPM_VERTICAL,               
                          rc.left, rc.bottom, g_hwndMain, &amp;tpm);
         
         return (FALSE);
   }

   return FALSE;
}
</PRE>

<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using List View Controls</TITLE>

<META NAME=MS-HKWD CONTENT="Using List View Controls">
<META NAME="Keywords" CONTENT="Internet Tools & Technologies, Common controls">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT, Mac">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="sec_listview_using"></A>
<!--NAV_LINKS_START-->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Using List View Controls"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../../art/headbard.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Using List View Controls"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR><TR><TD><PRE><IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="ListView.htm#ch_listview">Topic Contents</A></PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="ListView.htm">List View Controls</A>
<IMG SRC="../../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="Updates.htm">List View Updates in Internet Explorer</A></PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>Using List View Controls</H1>
<BR CLEAR=ALL>
<P>You can create a list view control by calling the
<object id="hhal_3" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_3.Click()>CreateWindowEx</A> function, specifying the WC_LISTVIEW window class. This window class is registered when the common controls dynamic-link library (DLL) is loaded. To ensure that this DLL is loaded, use the <A HREF="../common/functions/InitCommonControls.htm#InitCommonControls">InitCommonControls</A> function. 

<P>An application sends messages to a list view control to add, remove, arrange, and otherwise manipulate items. Each message has a macro that you can use instead of sending the message explicitly.

<P>Like most common controls, a list view control sends notification messages to its parent window in the form of <A HREF="../common/messages/WM_NOTIFY.htm#WM_NOTIFY">WM_NOTIFY</A> messages. For more information, see <A HREF="Using.htm#lv_notification_messages">List View Notification Messages</A>.

<H2><A NAME="lv_views_and_styles">Views and Styles</A></H2>
<P>List view controls can display their contents in four different <I>views</I>. The current view is specified by the control's window style. Additional window styles specify the alignment of items and control-specific functionality of the list view control. The following list contains more information about the four views.

<P><TABLE>
<TR><TD><B>View Name
 </B></TD><TD><B>Description
</B></TD></TR><TR><TD>Icon view
 </TD><TD>Specified by the <A HREF="Styles.htm#LVS_ICON">LVS_ICON</A> window style. Each item appears as a full-sized icon with a label below it. The user can drag the items to any location in the list view window.</TD></TR><TR><TD>Small&nbsp;icon&nbsp;view
 </TD><TD>Specified by the <A HREF="Styles.htm#LVS_SMALLICON">LVS_SMALLICON</A> window style. Each item appears as a small icon with the label to the right of it. The user can drag the items to any location.</TD></TR><TR><TD>List view
 </TD><TD>Specified by the <A HREF="Styles.htm#LVS_LIST">LVS_LIST</A> window style. Each item appears as a small icon with a label to the right of it. Items are arranged in columns and cannot be dragged to any arbitrary location by the user.</TD></TR><TR><TD>Report view
 </TD><TD>Specified by the <A HREF="Styles.htm#LVS_REPORT">LVS_REPORT</A> window style. Each item appears on its own line with information arranged in columns. The leftmost column contains the small icon and label, and subsequent columns contain subitems as specified by the application. Unless the <A HREF="Styles.htm#LVS_NOCOLUMNHEADER">LVS_NOCOLUMNHEADER</A> window style is also specified, each column has a header.</TD></TR></TABLE>
<P>You can change the view type after a list view control is created. To retrieve and change the window style, use the
<object id="hhal_4" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_4.Click()>GetWindowLong</A> and
<object id="hhal_5" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_5.Click()>SetWindowLong</A> functions. To determine the window styles that correspond to the current view, use the <A HREF="Styles.htm#LVS_TYPEMASK">LVS_TYPEMASK</A> value.

<P>You can control the way items are arranged in icon or small icon view by specifying either the <A HREF="Styles.htm#LVS_ALIGNTOP">LVS_ALIGNTOP</A> (default) or <A HREF="Styles.htm#LVS_ALIGNLEFT">LVS_ALIGNLEFT</A> window style. You can change the alignment after a list view control is created. To isolate the window styles that specify the alignment of items, use the <A HREF="Styles.htm#LVS_ALIGNMASK">LVS_ALIGNMASK</A> value.

<P>Additional window styles control other options&#151;for example, whether a user can edit labels in place, whether more than one item can be selected at a time, and so on. For a complete list of the list view window styles, see <A HREF="Styles.htm#lv_styles">List view window styles</A>. 

<P>The following example creates a list view control and then calls application-defined functions that add image lists, columns, and list view items. The window style specifies the list view control's initial view and other options. This example specifies report view, which enables the user to edit the labels of list view items.

<PRE>&#009;// CreateListView - creates a list view control. 
&#009;// Returns the handle to the new control if successful, or NULL 
&#009;//     otherwise. 
&#009;// hwndParent - handle to the control's parent window. 
&#009;// pfData - file containing list view items. 
&#009;HWND WINAPI CreateListView(HWND hwndParent, FILE *pfData) 
&#009;{ 
&#009;    HWND hwndLV; 
&#009; 
    // Force the common controls DLL to be loaded. 
    InitCommonControls(); 
 
    // Create the list view window. 
    hwndLV = CreateWindow(WC_LISTVIEW, "", 
        WS_CHILD | LVS_REPORT | LVS_EDITLABELS, 
        0, 0, CW_USEDEFAULT, CW_USEDEFAULT, 
        hwndParent, NULL, g_hinst, NULL); 
    if (hwndLV == NULL) 
        return NULL; 
 
    // Call application-defined functions to initialize the 
    // image lists, add columns, and add some items. 
    if (!InitListViewImageLists(hwndLV) || 
            !InitListViewColumns(hwndLV) || 
            !InitListViewItems(hwndLV, pfData)) { 
        DestroyWindow(hwndLV); 
        return FALSE; 
&#009;    } 
&#009;    return hwndLV;              // return the control's handle 
&#009;} 
 
</PRE>
<P>The following example changes the style bits that govern the view mode.

<PRE>
&#009;// SetView - sets a list view's window style to change the view. 
&#009;// hwndLV - handle to the list view control. 
&#009;// dwView - value specifying a view style. 
&#009; 
&#009;VOID WINAPI SetView(HWND hwndLV, DWORD dwView) 
&#009;{ 
&#009;    // Get the current window style. 
&#009;    DWORD dwStyle = GetWindowLong(hwndLV, GWL_STYLE); 
 
    // Only set the window style if the view bits have changed. 
    if ((dwStyle &amp; LVS_TYPEMASK) != dwView) 
        SetWindowLong(hwndLV, GWL_STYLE, 
            (dwStyle &amp; ~LVS_TYPEMASK) | dwView); 
&#009;} 
 
</PRE>
<H2><A NAME="lv_image_lists">List View Image Lists</A></H2>
<P>By default, a list view control does not display item images. To display item images, you must create image lists and associate them with the control. A list view control can have three image lists: 

<UL><LI>An image list that contains full-sized icons displayed when the control is in icon view. 
<LI>An image list that contains small icons displayed when the control is in small icon view, list view, or report view. 
<LI>An image list that contains state images, which are displayed to the left of the full-sized or small icon. You can use state images, such as checked and cleared check boxes, to indicate application-defined item states. State images are displayed in icon view, small icon view, list view, and report view.
</UL>
<P>For more information about icon view, small icon view, list view, and report view, see <A HREF="Using.htm#lv_views_and_styles">Views and Styles</A>.

<P>To assign an image list to a list view control, use the <A HREF="messages/LVM_SETIMAGELIST.htm#LVM_SETIMAGELIST">LVM_SETIMAGELIST</A> message, specifying whether the image list contains full-sized icons, small icons, or state images. To retrieve the handle to an image list currently assigned to a list view control, use the <A HREF="messages/LVM_GETIMAGELIST.htm#LVM_GETIMAGELIST">LVM_GETIMAGELIST</A> message. You can use the
<object id="hhal_6" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_6.Click()>GetSystemMetrics</A> function to determine appropriate dimensions for the full-sized and small icons. Use the <A HREF="../imagelist/functions/ImageList_Create.htm#ImageList_Create">ImageList_Create</A> function to create an image list, and use other image list functions to add bitmaps to the image list. For more information, see <A HREF="../imagelist/ImageList.htm#ch_il_refs">Image Lists</A>.

<P>You only need to create the image list that the control will use. For example, if the list view control will never be in icon view, you do not need to create and assign a large image list because the large images will never be used. If you create both image lists, they must contain the same images in the same order. This is because a single value is used to identify a list view item's icon in both image lists. You can associate an icon index with an item when you call the <A HREF="macros/ListView_InsertItem.htm#ListView_InsertItem">ListView_InsertItem</A> or <A HREF="macros/ListView_SetItem.htm#ListView_SetItem">ListView_SetItem</A> macro. 

<P>The full-sized and small icon image lists can also contain <I>overlay images</I>, which are designed to be drawn transparently over the item icons. 

<P>To use overlay images in a list view control:

<OL><LI>Call the <A HREF="../imagelist/functions/ImageList_SetOverlayImage.htm#ImageList_SetOverlay">ImageList_SetOverlayImage</A> function to assign an overlay image index to an image in the full-sized and small icon image lists. An overlay image is identified by a one-based index. 
<LI>You can associate an overlay image index with an item when you call the <A HREF="macros/ListView_InsertItem.htm#ListView_InsertItem">ListView_InsertItem</A> or <A HREF="macros/ListView_SetItem.htm#ListView_SetItem">ListView_SetItem</A> macro. Use the <A HREF="../imagelist/macros/INDEXTOOVERLAYMASK.htm#INDEXTOOVERLAYMASK">INDEXTOOVERLAYMASK</A> macro to specify an overlay image index in the <B>state</B> member of the item's <A HREF="structures/LVITEM.htm#LV_ITEM">LVITEM</A> structure. You must also set the LVIS_OVERLAYMASK bits in the <B>stateMask</B> member. 
</OL>
<P>If a state image list is specified, a list view control reserves space to the left of each item's icon for a state image. 

<P>To associate a state image with an item, use the <A HREF="../common/macros/INDEXTOSTATEIMAGEMASK.htm#INDEXTOSTATEIMAGEMASK">INDEXTOSTATEIMAGEMASK</A> macro to specify a state image index in the <B>state</B> member of the <A HREF="structures/LVITEM.htm#LV_ITEM">LVITEM</A> structure. The index identifies an image in the control's state image list. Although image list indexes are zero-based, the control uses one-based indexes to identify state images. A state image index of zero indicates that an item has no state image.

<P>By default, when a list view control is destroyed, it destroys the image lists assigned to it. However, if a list view control has the <A HREF="Styles.htm#LVS_SHAREIMAGELISTS">LVS_SHAREIMAGELISTS</A> window style, the application is responsible for destroying the image lists when they are no longer in use. You should specify this style if you assign the same image lists to multiple list view controls; otherwise, more than one control might try to destroy the same image list.

<P>The following example demonstrates how to create two image lists, add an icon to each, and assign them to a list view control by using the <A HREF="messages/LVM_SETIMAGELIST.htm#LVM_SETIMAGELIST">LVM_SETIMAGELIST</A> message.
<PRE>&#009;// InitListViewImageLists - creates image lists for a list view. 
&#009;// Returns TRUE if successful, or FALSE otherwise. 
&#009;// hwndLV - handle to the list view control. 
&#009;BOOL WINAPI InitListViewImageLists(HWND hwndLV) 
&#009;{ 
    HICON hiconItem;        // icon for list view items 
    HIMAGELIST himlLarge;   // image list for icon view 
    HIMAGELIST himlSmall;   // image list for other views 
 
    // Create the full-sized and small icon image lists. 
    himlLarge = ImageList_Create(GetSystemMetrics(SM_CXICON), 
        GetSystemMetrics(SM_CYICON), TRUE, 1, 1); 
    himlSmall = ImageList_Create(GetSystemMetrics(SM_CXSMICON), 
        GetSystemMetrics(SM_CYSMICON), TRUE, 1, 1); 
 
    // Add an icon to each image list. 
    hiconItem = LoadIcon(g_hinst, MAKEINTRESOURCE(IDI_ITEM)); 
    ImageList_AddIcon(himlLarge, hiconItem); 
    ImageList_AddIcon(himlSmall, hiconItem); 
    DeleteObject(hiconItem); 
 
    // Assign the image lists to the list view control. 
    ListView_SetImageList(hwndLV, himlLarge, LVSIL_NORMAL); 
    ListView_SetImageList(hwndLV, himlSmall, LVSIL_SMALL); 
    return TRUE; 
&#009;} 
 
</PRE>
<H2><A NAME="Items_and_Subitems">Items and Subitems</A></H2>
<P>Each item in a list view control has an icon, a label, a current state, and an application-defined value. By using list view messages, you can add, modify, and delete items as well as retrieve information about items. You can also find items with specific attributes.

<P>Each item can also have one or more subitems. A <I>subitem</I> is a string that, in report view, is displayed in a column to the right of an item's icon and label. To specify the text of a subitem, use the <A HREF="messages/LVM_SETITEMTEXT.htm#LVM_SETITEMTEXT">LVM_SETITEMTEXT</A> or <A HREF="messages/LVM_SETITEM.htm#LVM_SETITEM">LVM_SETITEM</A> message. All items in a list view control have the same number of subitems. The number of subitems is determined by the number of columns in the list view control. When you add a column to a list view control, you specify its associated subitem index. For more information about list view columns, see <A HREF="Using.htm#lv_columns">Columns</A>.

<P>The <A HREF="structures/LVITEM.htm#LV_ITEM">LVITEM</A> structure defines a list view item or subitem. The <B>iItem</B> member is the zero-based index of the item. The <B>iSubItem</B> member is the one-based index of a subitem or zero if the structure contains information about an item. Additional members specify the item's text, icon, state, and item data. <I>Item data</I> is an application-defined value associated with a list view item.

<P>To add an item to a list view control, use the <A HREF="messages/LVM_INSERTITEM.htm#LVM_INSERTITEM">LVM_INSERTITEM</A> message, specifying the address of an <A HREF="structures/LVITEM.htm#LV_ITEM">LVITEM</A> structure. Before adding multiple items, you can send the control an <A HREF="messages/LVM_SETITEMCOUNT.htm#LVM_SETITEMCOUNT">LVM_SETITEMCOUNT</A> message, specifying the number of items the control will ultimately contain. This message enables the list view control to reallocate its internal data structures only once rather than every time you add an item. You can determine the number of items in a list view control by using the <A HREF="messages/LVM_GETITEMCOUNT.htm#LVM_GETITEMCOUNT">LVM_GETITEMCOUNT</A> message.

<P>To change the attributes of a list view item, use the <A HREF="messages/LVM_SETITEM.htm#LVM_SETITEM">LVM_SETITEM</A> message, specifying the address of an <A HREF="structures/LVITEM.htm#LV_ITEM">LVITEM</A> structure. The <B>mask</B> member of this structure specifies the item attributes you want to change. To change only the text of an item or subitem, use the <A HREF="messages/LVM_SETITEMTEXT.htm#LVM_SETITEMTEXT">LVM_SETITEMTEXT</A> message.

<P>To retrieve information about a list view item, use the <A HREF="messages/LVM_GETITEM.htm#LVM_GETITEM">LVM_GETITEM</A> message, specifying the address of the <A HREF="structures/LVITEM.htm#LV_ITEM">LVITEM</A> structure to fill in. The <B>mask</B> member of this structure specifies the item attributes to be retrieved. To retrieve only an item or subitem's text, use the <A HREF="messages/LVM_GETITEMTEXT.htm#LVM_GETITEMTEXT">LVM_GETITEMTEXT</A> message.

<P>To delete a list view item, use the <A HREF="messages/LVM_DELETEITEM.htm#LVM_DELETEITEM">LVM_DELETEITEM</A> message. You can delete all items in a list view control by using the <A HREF="messages/LVM_DELETEALLITEMS.htm#LVM_DELETEALLITEMS">LVM_DELETEALLITEMS</A> message.

<P>The example in this section demonstrates how to add a list view item for each line in a text file. A semicolon in the source text separates the item label and the subitem strings that follow it. The example saves each item's label and subitem strings in a structure, which is defined in the application's header file, as follows.

<PRE>#define C_COLUMNS 6 
 
typedef struct myitem_tag { 
   LPSTR aCols[C_COLUMNS]; 
} MYITEM; 
</PRE>
<P>The application fills in an <A HREF="structures/LVITEM.htm#LV_ITEM">LVITEM</A> structure and adds a list view item by using the <A HREF="messages/LVM_INSERTITEM.htm#LVM_INSERTITEM">LVM_INSERTITEM</A> message. Because the application saves the item label in its own application-defined MYITEM structure, it specifies the LPSTR_TEXTCALLBACK value for the <B>pszText</B> member of the <B>LVITEM</B> structure. Specifying this value causes the control to send an <A HREF="notifications/LVN_GETDISPINFO.htm#LVN_GETDISPINFO">LVN_GETDISPINFO</A> notification message to its owner window whenever it needs to display the item. The address of the application-defined structure is saved as item data.

<PRE>&#009;// InitListViewItems - adds items and subitems to a list view. 
&#009;// Returns TRUE if successful, or FALSE otherwise. 
&#009;// hwndLV - handle to the list view control. 
&#009;// pfData - text file containing list view items with columns 
&#009;//          separated by semicolons. 
&#009;BOOL WINAPI InitListViewItems(HWND hwndLV, FILE *pfData) 
&#009;{ 
    extern char g_achTemp[256];         // temporary buffer 
    PSTR pszStart; 
    PSTR pszEnd; 
    int iItem; 
    int iSubItem; 
    LVITEM lvi; 
 
    // Initialize LVITEM members that are common to all items. 
    lvi.mask = LVIF_TEXT | LVIF_IMAGE | LVIF_PARAM | LVIF_STATE; 
    lvi.state = 0; 
    lvi.stateMask = 0; 
    lvi.pszText = LPSTR_TEXTCALLBACK;   // app. maintains text 
    lvi.iImage = 0;                     // image list index 
 
    // Read each line in the specified file. 
    for (iItem = 0; 
            fgets(g_achTemp, sizeof(g_achTemp), pfData); 
            iItem++) { 
 
        // Allocate an application-defined structure to store the 
        // item label and the text of each subitem. 
        MYITEM *pItem = LocalAlloc(LPTR, sizeof(MYITEM)); 
 
        // Copy the first string (the label). 
        pszEnd = strchr(g_achTemp, ';'); 
        *pszEnd = '\0'; 
        pItem-&gt;aCols[0] = DupString(g_achTemp); 
 
        // Copy subsequent strings (subitems). 
        for (iSubItem = 1; 
                iSubItem &lt; C_COLUMNS &amp;&amp; pszEnd != NULL; 
                iSubItem++) { 
            pszStart = pszEnd + 1; 
            if ((pszEnd = strchr(pszStart, ';')) != NULL) 
                *pszEnd = '\0'; 
            pItem-&gt;aCols[iSubItem] = DupString(pszStart); 
        } 
 
        // Initialize item-specific LVITEM members. 
        lvi.iItem = iItem; 
        lvi.iSubItem = 0; 
        lvi.lParam = (LPARAM) pItem;    // item data 
 
        // Add the item. 
        ListView_InsertItem(hwndLV, &amp;lvi); 
 
        // There is no need to set the text of the subitems. They 
        // default to LPSTR_TEXTCALLBACK. 
&#009;    } 
&#009;    return TRUE; 
&#009;} 
 
&#009;// DupString - allocates a copy of a string. 
&#009;// lpsz - address of the null-terminated string to copy. 
 
&#009;LPSTR DupString(LPSTR lpsz) 
&#009;{ 
    int cb = lstrlen(lpsz) + 1; 
    LPSTR lpszNew = LocalAlloc(LMEM_FIXED, cb); 
    if (lpszNew != NULL) 
        CopyMemory(lpszNew, lpsz, cb); 
    return lpszNew; 
&#009;} 
 
</PRE>
<H2><A NAME="Item_States">Item States</A></H2>
<P>An item's <I>state</I> is a value that specifies the item's availability, indicates user actions, or otherwise reflects the item's status. A list view control changes some state bits, such as when the user selects an item. An application might change other state bits to disable or hide the item or to specify an overlay image or state image. For more information about overlay images and state images, see <A HREF="Using.htm#lv_image_lists">List View Image Lists</A>. 

<P>An item's state is specified by the <B>state</B> member of the <A HREF="structures/LVITEM.htm#LV_ITEM">LVITEM</A> structure. When you specify or change an item's state, the <B>stateMask</B> member specifies which state bits you want to change. You can change an item's state by using the <A HREF="messages/LVM_SETITEMSTATE.htm#LVM_SETITEMSTATE">LVM_SETITEMSTATE</A> message. You can specify an item's state when you create it or when you change its attributes by using the <A HREF="messages/LVM_SETITEM.htm#LVM_SETITEM">LVM_SETITEM</A> message. To determine an item's current state, use the <A HREF="messages/LVM_GETITEMSTATE.htm#LVM_GETITEMSTATE">LVM_GETITEMSTATE</A> or <A HREF="messages/LVM_GETITEM.htm#LVM_GETITEM">LVM_GETITEM</A> message.

<P>To set an item's overlay image, the <B>stateMask</B> member of the <A HREF="structures/LVITEM.htm#LV_ITEM">LVITEM</A> structure must include the LVIS_OVERLAYMASK value, and the <B>state</B> member must include the one-based index of the overlay image shifted left 8 bits by using the <A HREF="../imagelist/macros/INDEXTOOVERLAYMASK.htm#INDEXTOOVERLAYMASK">INDEXTOOVERLAYMASK</A> macro. The index can be zero to specify no overlay image.

<P>To set an item's state image, the <B>stateMask</B> member of the <A HREF="structures/LVITEM.htm#LV_ITEM">LVITEM</A> structure must include the LVIS_STATEIMAGEMASK value, and the <B>state</B> member must include the one-based index of the state image shifted left 12 bits by using the <A HREF="../common/macros/INDEXTOSTATEIMAGEMASK.htm#INDEXTOSTATEIMAGEMASK">INDEXTOSTATEIMAGEMASK</A> macro. The index can be zero to specify no state image.

<H2><A NAME="lv_callbacks">Callback Items and the Callback Mask</A></H2>
<P>For each of its items, a list view control typically stores the label text, the image list index of the item's icons, and a set of bit flags for the item's state. You can define callback items or change the control's callback mask to indicate that the application&#151;rather than the control&#151;stores some or all of this information. You may want to use callbacks if your application already stores some of this information. 

<P>A <I>callback item</I> in a list view control is an item for which the application stores the text, icon index, or both. You can define callback items when you send the <A HREF="messages/LVM_INSERTITEM.htm#LVM_INSERTITEM">LVM_INSERTITEM</A> message to add an item to the list view control. If the application stores the text for the item or subitem, set the <B>pszText</B> member of the item's <A HREF="structures/LVITEM.htm#LV_ITEM">LVITEM</A> structure to LPSTR_TEXTCALLBACK. If the application stores the icon index for an item, set the <B>iImage</B> member of the item's <B>LVITEM</B> structure to I_IMAGECALLBACK. 

<P>The <I>callback mask</I> of a list view control is a set of bit flags that specify the item states for which the application, rather than the control, stores the current data. The callback mask applies to all of the control's items, unlike the callback item designation, which applies to a specific item. The callback mask is zero by default, meaning that the list view control stores all item state information. After creating a list view control and initializing its items, you can send the <A HREF="messages/LVM_SETCALLBACKMASK.htm#LVM_SETCALLBACKMASK">LVM_SETCALLBACKMASK</A> message to change the callback mask. To get the current callback mask, send the <A HREF="messages/LVM_GETCALLBACKMASK.htm#LVM_GETCALLBACKMASK">LVM_GETCALLBACKMASK</A> message.

<P>When a list view control must display or sort a list view item for which the application stores callback information, the control sends the <A HREF="notifications/LVN_GETDISPINFO.htm#LVN_GETDISPINFO">LVN_GETDISPINFO</A> notification message to the control's parent window. This message specifies an <A HREF="structures/NMLVDISPINFO.htm#LV_DISPINFO">NMLVDISPINFO</A> structure that specifies the type of information required and identifies the item or subitem of interest. The parent window must process <B>LVN_GETDISPINFO</B> to provide the requested data.

<P>If the list view control detects a change in an item's callback information (that is, a change in the text, icon, or state information being tracked by the application), the control sends an <A HREF="notifications/LVN_SETDISPINFO.htm#LVN_SETDISPINFO">LVN_SETDISPINFO</A> notification message to notify you of the change.

<P>If you change a callback item's attributes or state bits, you can use the <A HREF="messages/LVM_UPDATE.htm#LVM_UPDATE">LVM_UPDATE</A> message to force the control to repaint the item. This message also causes the control to arrange its items if it has the <A HREF="Styles.htm#LVS_AUTOARRANGE">LVS_AUTOARRANGE</A> style. You can use the <A HREF="messages/LVM_REDRAWITEMS.htm#LVM_REDRAWITEMS">LVM_REDRAWITEMS</A> message to redraw a range of items by invalidating the corresponding portions of the list view control's client area. 

<P>By effectively using callback items and the callback mask, you can ensure that each item attribute is maintained in only one place. Doing this can simplify your application, but the only space saved is the memory that would otherwise be required to store item labels and subitem text.

<H2><A NAME="lv_columns">Columns</A></H2>
<P>Columns control the way items and their subitems are displayed in report view. Each column has a title and width and is associated with a specific subitem (subitem zero is the item's icon and label). The attributes of a column are defined by an <A HREF="structures/LVCOLUMN.htm#LV_COLUMN">LVCOLUMN</A> structure.

<P>To add a column to a list view control, use the <A HREF="messages/LVM_INSERTCOLUMN.htm#LVM_INSERTCOLUMN">LVM_INSERTCOLUMN</A> message. To delete a column, use the <A HREF="messages/LVM_DELETECOLUMN.htm#LVM_DELETECOLUMN">LVM_DELETECOLUMN</A> message. You can retrieve and change the properties of an existing column by using the <A HREF="messages/LVM_GETCOLUMN.htm#LVM_GETCOLUMN">LVM_GETCOLUMN</A> and <A HREF="messages/LVM_SETCOLUMN.htm#LVM_SETCOLUMN">LVM_SETCOLUMN</A> messages. 

<P>To retrieve or change a column's width, use the <A HREF="messages/LVM_GETCOLUMNWIDTH.htm#LVM_GETCOLUMNWIDTH">LVM_GETCOLUMNWIDTH</A> and <A HREF="messages/LVM_SETCOLUMNWIDTH.htm#LVM_SETCOLUMNWIDTH">LVM_SETCOLUMNWIDTH</A> messages. 

<P>Unless the <A HREF="Styles.htm#LVS_NOCOLUMNHEADER">LVS_NOCOLUMNHEADER</A> window style is specified, column headers appear in report view. The user can click a column header, causing an <A HREF="notifications/LVN_COLUMNCLICK.htm#LVN_COLUMNCLICK">LVN_COLUMNCLICK</A> notification message to be sent to the parent window. Typically, the parent window sorts the list view control by the specified column when this clicking occurs. The user can also drag the column guides between the headers to size the columns.

<P>The following example adds several columns to a list view control. The column headings are defined as string resources, which are consecutively numbered starting with IDS_FIRSTCOLUMN (defined in the application's header file). The number of columns is defined in the application's header file as C_COLUMNS.

<PRE>&#009;// InitListViewColumns - adds columns to a list view control. 
&#009;// Returns TRUE if successful, or FALSE otherwise. 
&#009;// hwndLV - handle to the list view control. 
&#009;BOOL WINAPI InitListViewColumns(HWND hwndLV) 
&#009;{ 
    extern char g_achTemp[256];     // temporary buffer 
    LVCOLUMN lvc; 
    int iCol; 
 
    // Initialize the LVCOLUMN structure. 
    lvc.mask = LVCF_FMT | LVCF_WIDTH | LVCF_TEXT | LVCF_SUBITEM; 
    lvc.fmt = LVCFMT_LEFT; 
    lvc.cx = 100; 
    lvc.pszText = g_achTemp; 
 
    // Add the columns. 
    for (iCol = 0; iCol &lt; C_COLUMNS; iCol++) { 
        lvc.iSubItem = iCol; 
        LoadString(g_hinst, IDS_FIRSTCOLUMN + iCol, 
                g_achTemp, sizeof(g_achTemp)); 
        if (ListView_InsertColumn(hwndLV, iCol, &amp;lvc) == -1) 
            return FALSE; 
    } 
&#009;    return TRUE; 
&#009;} 
 
</PRE>
<H2><A NAME="_win32_lv_arranging"></A><A NAME="lv_arranging">Arranging, Sorting, and Finding</A></H2>
<P>You can use list view messages to arrange and sort items and to find items based on their attributes or positions. Arranging repositions items to align on a grid, but the indexes of the items do not change. Sorting changes the sequence of items (and their corresponding indexes) and then repositions them accordingly. You can arrange items only in icon and small icon views, but you can sort items in any view.

<P>To arrange items, use the <A HREF="messages/LVM_ARRANGE.htm#LVM_ARRANGE">LVM_ARRANGE</A> message. You can ensure that items are arranged at all times by specifying the <A HREF="Styles.htm#LVS_AUTOARRANGE">LVS_AUTOARRANGE</A> window style.

<P>To sort items, use the <A HREF="messages/LVM_SORTITEMS.htm#LVM_SORTITEMS">LVM_SORTITEMS</A> message. When you sort using this message, you specify an application-defined callback function that the list view control calls to compare the relative order of any two items. The control passes to the comparison function the item data associated with each of the two items. The item data is the value that was specified in the <B>lParam</B> member of the item's <A HREF="structures/LVITEM.htm#LV_ITEM">LVITEM</A> structure when it was inserted into the list. By specifying the appropriate item data and supplying an appropriate comparison function, you can sort items by their label, by any subitem, or by any other property. Note that sorting items does not reorder the corresponding subitems. Thus, if any subitems are not callback items, you must regenerate the subitems after sorting.

<P>You can ensure that a list view control is always sorted by specifying the <A HREF="Styles.htm#LVS_SORTASCENDING">LVS_SORTASCENDING</A> or <A HREF="Styles.htm#LVS_SORTDESCENDING">LVS_SORTDESCENDING</A> window style. Controls with these styles use the label text of the items to sort them in ascending or descending order. You cannot supply a comparison function when using these window styles. If a list view control has either of these styles, an <A HREF="messages/LVM_INSERTITEM.htm#LVM_INSERTITEM">LVM_INSERTITEM</A> message will fail if you try to insert an item that has LPSTR_TEXTCALLBACK as the <B>pszText</B> member of its <A HREF="structures/LVITEM.htm#LV_ITEM">LVITEM</A> structure.

<P>You can find a list view item with specific properties by using the <A HREF="messages/LVM_FINDITEM.htm#LVM_FINDITEM">LVM_FINDITEM</A> message. You can find a list view item that is in a specified state and bears a specified geometrical relationship to a given item by using the <A HREF="messages/LVM_GETNEXTITEM.htm#LVM_GETNEXTITEM">LVM_GETNEXTITEM</A> message. For example, you can retrieve the next selected item to the right of a specified item.

<H2><A NAME="List_View_Item_Posit">List View Item Position</A></H2>
<P>Every list view item has a position and size, which you can retrieve and set using messages. You can also determine which item, if any, is at a specified position. The position of list view items is specified in <I>view coordinates</I>, which are client coordinates offset by the scroll position.

<P>To retrieve and set an item's position, use the <A HREF="messages/LVM_GETITEMPOSITION.htm#LVM_GETITEMPOSITION">LVM_GETITEMPOSITION</A> and <A HREF="messages/LVM_SETITEMPOSITION.htm#LVM_SETITEMPOSITION">LVM_SETITEMPOSITION</A> messages. <B>LVM_GETITEMPOSITION</B> works for all views, but <B>LVM_SETITEMPOSITION</B> works only for icon and small icon views.

<P>You can determine which item, if any, is at a particular location by using the <A HREF="messages/LVM_HITTEST.htm#LVM_HITTEST">LVM_HITTEST</A> message.

<P>To get the bounding rectangle for a list item or for only its icon or label, use the <A HREF="messages/LVM_GETITEMRECT.htm#LVM_GETITEMRECT">LVM_GETITEMRECT</A> message. 

<H2><A NAME="Scroll_Position">Scroll Position</A></H2>
<P>Unless the <A HREF="Styles.htm#LVS_NOSCROLL">LVS_NOSCROLL</A> window style is specified, a list view control can be scrolled to show more items than can fit in the client area of the control. You can get a list view control's scroll position and related information, scroll a list view control by a specified amount, or scroll a list view control so that a specified list item is visible.

<P>In icon view or small icon view, the current scroll position is defined by the <I>view origin</I>. The view origin is the set of coordinates, relative to the visible area of the list view control, that correspond to the view coordinates (0, 0). To get the current view origin, use the <A HREF="messages/LVM_GETORIGIN.htm#LVM_GETORIGIN">LVM_GETORIGIN</A> message. This message should be used only in icon or small icon view; it returns an error in list or report view.

<P>In list or report view, the current scroll position is defined by the <I>top index</I>. The top index is the index of the first visible item in the list view control. To get the current top index, use the <A HREF="messages/LVM_GETTOPINDEX.htm#LVM_GETTOPINDEX">LVM_GETTOPINDEX</A> message. This message returns a valid result only in list or report view; it returns zero in icon or small icon view.

<P>You can use the <A HREF="messages/LVM_GETVIEWRECT.htm#LVM_GETVIEWRECT">LVM_GETVIEWRECT</A> message to get the bounding rectangle of all items in a list view control, relative to the visible area of the control. 

<P>The <A HREF="messages/LVM_GETCOUNTPERPAGE.htm#LVM_GETCOUNTPERPAGE">LVM_GETCOUNTPERPAGE</A> message returns the number of items that fit in one page of the list view control. This message returns a valid result only in list and report views; in icon and small icon views, it returns the total number of items.

<P>To scroll a list view control by a specific amount, use the <A HREF="messages/LVM_SCROLL.htm#LVM_SCROLL">LVM_SCROLL</A> message. Using the <A HREF="messages/LVM_ENSUREVISIBLE.htm#LVM_ENSUREVISIBLE">LVM_ENSUREVISIBLE</A> message, you can scroll the list view control, if necessary, to ensure that a specified item is visible.

<H2><A NAME="Label_Editing">Label Editing</A></H2>
<P>A list view control that has the <A HREF="Styles.htm#LVS_EDITLABELS">LVS_EDITLABELS</A> window style enables a user to edit item labels in place. The user begins editing by clicking the label of an item that has the focus. An application can begin editing automatically by using the <A HREF="messages/LVM_EDITLABEL.htm#LVM_EDITLABEL">LVM_EDITLABEL</A> message. The list view control notifies the parent window when editing begins and when it is canceled or completed. When editing is completed, the parent window is responsible for updating the item's label, if appropriate.

<P>When label editing begins, a list view control sends its parent window an <A HREF="notifications/LVN_BEGINLABELEDIT.htm#LVN_BEGINLABELEDIT">LVN_BEGINLABELEDIT</A> notification message. You can process this message to allow selective editing of specific labels; returning a nonzero value prevents label editing.

<P>When label editing is canceled or completed, a list view control sends its parent window an <A HREF="notifications/LVN_ENDLABELEDIT.htm#LVN_ENDLABELEDIT">LVN_ENDLABELEDIT</A> notification message. The <I>lParam</I> parameter is the address of an <A HREF="structures/NMLVDISPINFO.htm#LV_DISPINFO">NMLVDISPINFO</A> structure. The <B>item</B> member of this structure is an <A HREF="structures/LVITEM.htm#LV_ITEM">LVITEM</A> structure whose <B>iItem</B> member identifies the item. If editing is canceled, the <B>pszText</B> member of the <B>LVITEM</B> structure is NULL; otherwise, <B>pszText</B> is the address of the edited text. The parent window is responsible for updating the item's label if it wishes to keep the new label.

<P>During label editing, you can get the handle to the edit control used for label editing by using the <A HREF="messages/LVM_GETEDITCONTROL.htm#LVM_GETEDITCONTROL">LVM_GETEDITCONTROL</A> message. To limit the amount of text a user can enter, you can send the edit control an
<object id="hhal_7" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_7.Click()>EM_LIMITTEXT</A> message. You can even subclass the edit control to intercept and discard invalid characters. The edit control is created after the <A HREF="notifications/LVN_BEGINLABELEDIT.htm#LVN_BEGINLABELEDIT">LVN_BEGINLABELEDIT</A> notification message is sent.

<H2><A NAME="List_View_Colors">List View Colors</A></H2>
<P>An application can retrieve and set three colors for a list view control. To retrieve and set the text color, use the <A HREF="messages/LVM_GETTEXTCOLOR.htm#LVM_GETTEXTCOLOR">LVM_GETTEXTCOLOR</A> and <A HREF="messages/LVM_SETTEXTCOLOR.htm#LVM_SETTEXTCOLOR">LVM_SETTEXTCOLOR</A> messages. To retrieve and set the text background color, use the <A HREF="messages/LVM_GETTEXTBKCOLOR.htm#LVM_GETTEXTBKCOLOR">LVM_GETTEXTBKCOLOR</A> and <A HREF="messages/LVM_SETTEXTBKCOLOR.htm#LVM_SETTEXTBKCOLOR">LVM_SETTEXTBKCOLOR</A> messages. To retrieve and set the window background color, use the <A HREF="messages/LVM_GETBKCOLOR.htm#LVM_GETBKCOLOR">LVM_GETBKCOLOR</A> and <A HREF="messages/LVM_SETBKCOLOR.htm#LVM_SETBKCOLOR">LVM_SETBKCOLOR</A> messages.

<H2><A NAME="lv_notification_messages">List View Notification Messages</A></H2>
<P>A list view control sends notification messages to its parent window in the form of <A HREF="../common/messages/WM_NOTIFY.htm#WM_NOTIFY">WM_NOTIFY</A> messages. The following notification messages are sent by a list view control.


<TABLE>
<TR><TD><B>Notification message
 </B></TD><TD><B>Description
</B></TD></TR><TR><TD><A HREF="notifications/LVN_BEGINDRAG.htm#LVN_BEGINDRAG">LVN_BEGINDRAG</A>
 </TD><TD>Signals the start of a drag-and-drop operation.</TD></TR><TR><TD><A HREF="notifications/LVN_BEGINLABELEDIT.htm#LVN_BEGINLABELEDIT">LVN_BEGINLABELEDIT</A>
 </TD><TD>Signals the start of in-place label editing.</TD></TR><TR><TD><A HREF="notifications/LVN_BEGINRDRAG.htm#LVN_BEGINRDRAG">LVN_BEGINRDRAG</A>
 </TD><TD>Signals the start of a drag-and-drop operation using the right mouse button.</TD></TR><TR><TD><A HREF="notifications/LVN_COLUMNCLICK.htm#LVN_COLUMNCLICK">LVN_COLUMNCLICK</A>
 </TD><TD>Indicates that the user clicked a column header in report view.</TD></TR><TR><TD><A HREF="notifications/LVN_DELETEALLITEMS.htm#LVN_DELETEALLITEMS">LVN_DELETEALLITEMS</A>
 </TD><TD>Signals the deletion of all list view items.</TD></TR><TR><TD><A HREF="notifications/LVN_DELETEITEM.htm#LVN_DELETEITEM">LVN_DELETEITEM</A>
 </TD><TD>Signals the deletion of a specific item.</TD></TR><TR><TD><A HREF="notifications/LVN_ENDLABELEDIT.htm#LVN_ENDLABELEDIT">LVN_ENDLABELEDIT</A>
 </TD><TD>Signals the end of label editing.</TD></TR><TR><TD><A HREF="notifications/LVN_GETDISPINFO.htm#LVN_GETDISPINFO">LVN_GETDISPINFO</A>
 </TD><TD>Requests information that the list view control requires to display an item.</TD></TR><TR><TD><A HREF="notifications/LVN_INSERTITEM.htm#LVN_INSERTITEM">LVN_INSERTITEM</A>
 </TD><TD>Signals the insertion of a new list view item.</TD></TR><TR><TD><A HREF="notifications/LVN_ITEMCHANGED.htm#LVN_ITEMCHANGED">LVN_ITEMCHANGED</A>
 </TD><TD>Indicates that an item has changed.</TD></TR><TR><TD><A HREF="notifications/LVN_ITEMCHANGING.htm#LVN_ITEMCHANGING">LVN_ITEMCHANGING</A>
 </TD><TD>Indicates that an item is in the process of changing and enables the parent window to accept or deny the change.</TD></TR><TR><TD><A HREF="notifications/LVN_KEYDOWN.htm#LVN_KEYDOWN">LVN_KEYDOWN</A>
 </TD><TD>Signals a keyboard event.</TD></TR><TR><TD><A HREF="notifications/LVN_SETDISPINFO.htm#LVN_SETDISPINFO">LVN_SETDISPINFO</A>
 </TD><TD>Notifies a parent window that it must update the information it maintains for an item.</TD></TR></TABLE>
<P>The following example shows the portion of the application's window procedure that processes the <A HREF="../common/messages/WM_NOTIFY.htm#WM_NOTIFY">WM_NOTIFY</A> message.

<PRE>&#009;case WM_NOTIFY: 
 
    // Branch depending on the specific notification message. 
    switch (((LPNMHDR) lParam)-&gt;code) { 
 
        // Process LVN_GETDISPINFO to supply information about 
        // callback items. 
        case LVN_GETDISPINFO: 
            Main_OnGetDispInfo((LPNMLVDISPINFO) lParam); 
            break; 
 
        // Process LVN_ENDLABELEDIT to change item labels after 
        // in-place editing. 
        case LVN_ENDLABELEDIT: 
            return Main_OnEndLabelEdit( 
                (LPNMLVDISPINFO) lParam 
                ); 
 
        // Process LVN_COLUMNCLICK to sort items by column. 
        case LVN_COLUMNCLICK: 
            #define pnm ((LPNMLISTVIEW) lParam) 
            ListView_SortItems( 
                pnm-&gt;hdr.hwndFrom, 
                ListViewCompareFunc, 
                (LPARAM) (pnm-&gt;iSubItem) 
                ); 
            #undef pnm 
            break; 
    } 
    break; 
</PRE>
<P>The following example shows the application-defined functions that the window procedure uses to process list view notification messages.

<PRE>&#009;// Main_OnGetDispInfo - processes the LVN_GETDISPINFO 
&#009;//     notification message. 
&#009;// pnmv - value of lParam (points to an NMLVDISPINFO structure). 
&#009;VOID WINAPI Main_OnGetDispInfo(LPNMLVDISPINFO pnmv) 
&#009;{ 
&#009;    // Provide the item or subitem's text, if requested. 
    if (pnmv-&gt;item.mask &amp; LVIF_TEXT) { 
        MYITEM *pItem = (MYITEM *) (pnmv-&gt;item.lParam); 
        lstrcpy(pnmv-&gt;item.pszText, 
                pItem-&gt;aCols[pnmv-&gt;item.iSubItem]); 
    } 
&#009;} 
 
&#009;// Main_OnEndLabelEdit - processes the LVN_ENDLABELEDIT 
&#009;//     notification message. 
&#009;// Returns TRUE if the label is changed, or FALSE otherwise. 
&#009;// pnmv - value of lParam (points to an NMLVDISPINFO structure). 
&#009; 
&#009;BOOL Main_OnEndLabelEdit(LPNMLVDISPINFO pnmv) 
&#009;{ 
    MYITEM *pItem; 
 
    // The item is -1 if editing is being canceled. 
    if (pnmv-&gt;item.iItem == -1) 
        return FALSE; 
 
    // Copy the new text to the application-defined structure, 
    // a pointer to which is saved as item data. 
    pItem = (MYITEM *) (pnmv-&gt;item.lParam); 
    pItem-&gt;aCols[0] = (PSTR) LocalReAlloc( 
        (HLOCAL) (pItem-&gt;aCols[0]), 
        lstrlen(pnmv-&gt;item.pszText) + 1, 
        LMEM_MOVEABLE 
        ); 
    lstrcpy(pItem-&gt;aCols[0], pnmv-&gt;item.pszText); 
 
    // No need to set the item text because it is a callback item. 
    return TRUE; 
&#009;} 
 
&#009;// ListViewCompareFunc - sorts the list view control. It is a 
&#009;//     comparison function. 
&#009;// Returns a negative value if the first item should precede the 
&#009;//     second item, a positive value if the first item should 
&#009;//     follow the second item, and zero if the items are equivalent. 
&#009;// lParam1 and lParam2 - item data for the two items (in this 
&#009;//     case, pointers to application-defined MYITEM structures). 
&#009;// lParamSort - value specified by the LVM_SORTITEMS message 
&#009;//     (in this case, the index of the column to sort). 
&#009;int CALLBACK ListViewCompareFunc( 
&#009;    LPARAM lParam1, 
&#009;    LPARAM lParam2, 
&#009;    LPARAM lParamSort) 
&#009;{ 
    MYITEM *pItem1 = (MYITEM *) lParam1; 
    MYITEM *pItem2 = (MYITEM *) lParam2; 
 
    // Compare the specified column. 
    int iCmp = lstrcmpi(pItem1-&gt;aCols[lParamSort], 
        pItem2-&gt;aCols[lParamSort]); 
 
    // Return the result if nonzero, or compare the 
    // first column otherwise. 
    return (iCmp != 0) ? iCmp : 
        lstrcmpi(pItem1-&gt;aCols[0], pItem2-&gt;aCols[0]); 
&#009;} 
</PRE>
<H2><A NAME="Default_List_View_Me">Default List View Message Processing</A></H2>
<P>This section describes the window message processing performed by a list view control. Messages specific to list view controls are discussed in other sections of this document. 

<TABLE>
<TR><TD><B>Message
 </B></TD><TD><B>Processing performed
</B></TD></TR><TR><TD>WM_CHAR
 </TD><TD>Searches for a list view item that begins with the specified character and, if the item is found, selects and sets the focus to the item.
<P>Multiple characters received within a time-out interval are concatenated, and the list view control searches for an item that begins with the resulting string.</TD></TR><TR><TD>WM_COMMAND
 </TD><TD>Processes the EN_UPDATE and EN_KILLFOCUS notification messages and forwards all other edit control notifications to the parent window.</TD></TR><TR><TD>WM_CREATE
 </TD><TD>Performs initialization additional to WM_NCCREATE. If the <A HREF="Styles.htm#LVS_SHAREIMAGELISTS">LVS_SHAREIMAGELISTS</A> window style is not specified, the list view control creates the icon and small icon image lists at this point.</TD></TR><TR><TD>WM_DESTROY
 </TD><TD>Frees resources allocated during WM_CREATE. </TD></TR><TR><TD>WM_ERASEBKGND
 </TD><TD>Erases the window background using the current background color for the list view control. If the background color is the CLR_NONE value, the list view control forwards the message to the parent window.</TD></TR><TR><TD>WM_GETDLGCODE
 </TD><TD>Returns a combination of the DLGC_WANTTAB and DLGC_WANTARROWS values.</TD></TR><TR><TD>WM_GETFONT
 </TD><TD>Returns the handle to the current label font.</TD></TR><TR><TD>WM_HSCROLL
 </TD><TD>Scrolls the list view control horizontally.</TD></TR><TR><TD>WM_KEYDOWN
 </TD><TD>Processes the <SMALL>SPACEBAR</SMALL>, <SMALL>ENTER</SMALL>, and arrow keys and sends an <A HREF="notifications/LVN_KEYDOWN.htm#LVN_KEYDOWN">LVN_KEYDOWN</A> notification message to the parent window.</TD></TR><TR><TD>WM_KILLFOCUS
 </TD><TD>Repaints the focused list item, if any, and sends an <A HREF="../common/notifications/NM_KILLFOCUS.htm#NM_KILLFOCUS">NM_KILLFOCUS</A> notification message to the parent window.</TD></TR><TR><TD>WM_LBUTTONDBLCLK
 </TD><TD>Sends the parent window an <A HREF="../common/notifications/NM_DBLCLK.htm#NM_DBLCLK">NM_DBLCLK</A> notification message.</TD></TR><TR><TD>WM_LBUTTONDOWN
 </TD><TD>Processed in different ways depending on whether a click or drag operation is being initiated. To determine which operation is involved, the list view control enters a modal message loop until either the button is released or the mouse is moved.
<P>In the case of a click, the list view control may change which item has the focus and which items are selected, taking into account the cursor position, the state of the <SMALL>SHIFT</SMALL> and <SMALL>CTRL</SMALL> keys, and so on. Then the list view control sends its parent window an <A HREF="../common/notifications/NM_CLICK.htm#NM_CLICK">NM_CLICK</A> notification message.
<P>If dragging begins over an item, the list view control selects and sets the focus to the item. Then it sends an <A HREF="notifications/LVN_BEGINDRAG.htm#LVN_BEGINDRAG">LVN_BEGINDRAG</A> notification message to the parent window. The parent window is responsible for actually carrying out the drag operation.
<P>If dragging begins over the window background, the list view control enters another modal message loop, enabling the user to form a rectangle by dragging the mouse. Items within the rectangle are selected.</TD></TR><TR><TD>WM_NCCREATE
 </TD><TD>Allocates and initializes an internal data structure and then calls the
<object id="hhal_8" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_8.Click()>DefWindowProc</A> function.</TD></TR><TR><TD>WM_NCDESTROY
 </TD><TD>Frees resources allocated by the list view control. Unless the <A HREF="Styles.htm#LVS_SHAREIMAGELISTS">LVS_SHAREIMAGELISTS</A> style is used, this includes deleting the full-sized and small image lists.</TD></TR><TR><TD>WM_NOTIFY
 </TD><TD>Processes header control notification messages.</TD></TR><TR><TD>WM_PAINT
 </TD><TD>Displays any items in the update region. For callback items, the control first sends an <A HREF="notifications/LVN_GETDISPINFO.htm#LVN_GETDISPINFO">LVN_GETDISPINFO</A> notification message to the owner window to request display information. If the <I>wParam</I> parameter is non-NULL, the control assumes that the value is an HDC and paints using that device context.</TD></TR><TR><TD>WM_RBUTTONDOWN
 </TD><TD>Processed the same way as the WM_LBUTTONDOWN message, except that the control sends an NM_RCLICK notification message (instead of NM_CLICK) and an <A HREF="notifications/LVN_BEGINRDRAG.htm#LVN_BEGINRDRAG">LVN_BEGINRDRAG</A> notification message (instead of <A HREF="notifications/LVN_BEGINDRAG.htm#LVN_BEGINDRAG">LVN_BEGINDRAG</A>).</TD></TR><TR><TD>WM_SETFOCUS
 </TD><TD>Repaints the focused list item, if any, and sends an NM_SETFOCUS notification message to the parent window.</TD></TR><TR><TD>WM_SETFONT
 </TD><TD>Saves the specified font handle, forwards the message to the header window, if any, and repaints using the new font.</TD></TR><TR><TD>WM_SETREDRAW
 </TD><TD>Turns redrawing on or off.</TD></TR><TR><TD>WM_TIMER
 </TD><TD>Begins editing of an item label. If the user clicks the label of the focused item, the list view control sets a timer instead of entering edit mode immediately. The timer makes it possible for the list view control to <I>not</I> enter edit mode if the user double-clicks the label.</TD></TR><TR><TD>WM_VSCROLL
 </TD><TD>Scrolls the list view control vertically.</TD></TR><TR><TD>WM_WINDOWPOSCHANGED
 </TD><TD>Updates the window scroll bars. If the current view is icon or small icon view, and the <A HREF="Styles.htm#LVS_AUTOARRANGE">LVS_AUTOARRANGE</A> style is specified, the list view control will also arrange the list items. </TD></TR><TR><TD>WM_WININICHANGE
 </TD><TD>Processes changes to system metrics.</TD></TR></TABLE>

<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>LVITEM</TITLE>

<META NAME=MS-HKWD CONTENT="LVITEM">
<META NAME="Keywords" CONTENT="Internet Tools & Technologies, Common controls">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT, Mac">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="LV_ITEM"></A>
<!--NAV_LINKS_START-->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="LVITEM"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../../../art/headbard.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="LVITEM"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR><TR><TD><PRE><IMG SRC="../../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="../RefList.htm#listview_listview">Topic Contents</A></PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="LVHITTESTINFO.htm">LVHITTESTINFO</A>
<IMG SRC="../../../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="NMITEMACTIVATE.htm">NMITEMACTIVATE</A></PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>LVITEM</H1>
<BR CLEAR=ALL>
<PRE>typedef struct _LVITEM { 
    UINT   mask; 
    int    iItem; 
    int    iSubItem; 
    UINT   state; 
    UINT   stateMask; 
    LPTSTR  pszText; 
    int    cchTextMax; 
    int    iImage; 
    LPARAM lParam;
#if (_WIN32_IE &gt;= 0x0300)
    int iIndent;
#endif
} LVITEM, FAR *LPLVITEM; 
</PRE>
<P>Specifies or receives the attributes of a list view item. This structure has been updated to support a new mask value (LVIF_INDENT) that enables item indenting. This structure supersedes the <B>LV_ITEM</B> structure.

<DL><DT><B>mask</B>
 </DT><DD>Set of flags that specify which members of this structure contain data to be set or which members are being requested. This can be one or more of the following flags:
 <TABLE>
<TR><TD>LVIF_TEXT
 </TD><TD>The <B>pszText</B> member is valid or must be filled in.
 </TD></TR><TR><TD>LVIF_IMAGE
 </TD><TD>The <B>iImage</B> member is valid or must be filled in.
 </TD></TR><TR><TD>LVIF_INDENT
 </TD><TD>The <B>iIndent</B> member is valid or must be filled in.
 </TD></TR><TR><TD>LVIF_NORECOMPUTE
 </TD><TD>The control will not generate <A HREF="../notifications/LVN_GETDISPINFO.htm#LVN_GETDISPINFO">LVN_GETDISPINFO</A> to retrieve text information if it receives a <A HREF="../messages/LVM_GETITEM.htm#LVM_GETITEM">LVM_GETITEM</A> message. Instead, the <B>pszText</B> member will contain LPSTR_TEXTCALLBACK.
 </TD></TR><TR><TD>LVIF_PARAM
 </TD><TD>The <B>lParam</B> member is valid or must be filled in.
 </TD></TR><TR><TD>LVIF_STATE
 </TD><TD>The <B>state</B> member is valid or must be filled in.
 </TD></TR><TR><TD>LVIF_DI_SETITEM
 </TD><TD>The operating system should store the requested list item information and not ask for it again. This flag is used only with the <A HREF="../notifications/LVN_GETDISPINFO.htm#LVN_GETDISPINFO">LVN_GETDISPINFO</A> notification message.
 </TD></TR></TABLE>
</DD><DT><B>iItem </B>
 </DT><DD>Zero-based index of the item to which this structure refers.
</DD><DT><B>iSubItem</B>
 </DT><DD>One-based index of the subitem to which this structure refers, or zero if this structure refers to an item rather than a subitem. 
</DD><DT><B>state</B>
 </DT><DD>Indicates the item's state, state image, and overlay image. The <B>stateMask</B> member indicates the valid bits of this member. 

 <P>Bits 0 through 7 of this member contain the item state flags. This can be one or more of the <A HREF="../Item_States.htm#lv_item_states">item state</A> values. 

 <P>Bits 8 through 11 of this member specify the one-based overlay image index. Both the full-sized icon image list and the small icon image list can have overlay images. The overlay image is superimposed over the item's icon image. If these bits are zero, the item has no overlay image. To isolate these bits, use the LVIS_OVERLAYMASK mask. To set the overlay image index in this member, you should use the <A HREF="../../imagelist/macros/INDEXTOOVERLAYMASK.htm#INDEXTOOVERLAYMASK">INDEXTOOVERLAYMASK</A> macro. The image list's overlay images are set with the <A HREF="../../imagelist/functions/ImageList_SetOverlayImage.htm#ImageList_SetOverlay">ImageList_SetOverlayImage</A> function. 

 <P>Bits 12 through 15 of this member specify the state image index. The state image is displayed next to an item's icon to indicate an application-defined state. If these bits are zero, the item has no state image. To isolate these bits, use the LVIS_STATEIMAGEMASK mask. To set the state image index, you should use the <A HREF="../../common/macros/INDEXTOSTATEIMAGEMASK.htm#INDEXTOSTATEIMAGEMASK">INDEXTOSTATEIMAGEMASK</A> macro. The state image index specifies the index of the image in the state image list that should be drawn. The state image list is specified with the <A HREF="../messages/LVM_SETIMAGELIST.htm#LVM_SETIMAGELIST">LVM_SETIMAGELIST</A> message.

</DD><DT><B>stateMask</B>
 </DT><DD>Value specifying which bits of the <B>state</B> member will be retrieved or modified. For example, setting this member to LVIS_SELECTED will cause only the item's selection state to be retrieved.

<P>This member allows you to modify one or more item states without having to retrieve all of the item states first. For example, setting this member to LVIS_SELECTED and <B>state</B> to zero will cause the item's selection state to be cleared, but none of the other states will be affected.
<P>To retrieve or modify all of the states, set this member to (UINT)-1.
<P>You can use the macro <A HREF="../macros/ListView_SetItemState.htm" TITLE="Link to SetItemState macro">ListView_SetItemState</A> both to set and to clear bits. 
</DD><DT><B>pszText</B>
 </DT><DD>Address of a null-terminated string containing the item text if the structure specifies item attributes. If this member is the LPSTR_TEXTCALLBACK value, the item is a callback item. Do not set the <B>pszText</B> member to LPSTR_TEXTCALLBACK if the list view control has <A HREF="../Styles.htm#LVS_SORTASCENDING">LVS_SORTASCENDING</A> or <A HREF="../Styles.htm#LVS_SORTDESCENDING">LVS_SORTDESCENDING</A> style.
 <P>If the structure is receiving item attributes, this member is the address of the buffer that receives the item text.
</DD><DT><B>cchTextMax</B>
 </DT><DD>Size of the buffer pointed to by the <B>pszText</B> member if the structure is receiving item attributes. This member is ignored if the structure specifies item attributes.
</DD><DT><B>iImage</B>
 </DT><DD>Index of the item's icon in the control's image list. This applies to both the large and small image list. 
 <P>If this member is the I_IMAGECALLBACK value, the parent window is responsible for storing the index. In this case, the list view control sends the parent an <A HREF="../notifications/LVN_GETDISPINFO.htm#LVN_GETDISPINFO">LVN_GETDISPINFO</A> notification message to get the index when it needs to display the image.
</DD><DT><B>lParam</B>
 </DT><DD>32-bit value specific to the item. If you use the <A HREF="../messages/LVM_SORTITEMS.htm#LVM_SORTITEMS">LVM_SORTITEMS</A> message, the list view control passes this value to the application-defined comparison function. You can also use the <A HREF="../messages/LVM_FINDITEM.htm#LVM_FINDITEM">LVM_FINDITEM</A> message to search a list view control for an item with a specified <B>lParam</B> value.
</DD><DT><B>iIndent</B>
 </DT><DD><B>Version 4.70</B>. Number of image widths to indent the item. A single indentation equals the width of an item image. Therefore, the value 1 indents the item by the width of one image, the value 2 indents by two images, and so on. Note that this field is supported only for items. Attempting to set subitem indentation will cause the calling function to fail.
</DD></DL>
<P>The <B>LVITEM</B> structure is used with a number of messages, including <A HREF="../messages/LVM_GETITEM.htm#LVM_GETITEM">LVM_GETITEM</A>, <A HREF="../messages/LVM_SETITEM.htm#LVM_SETITEM">LVM_SETITEM</A>, <A HREF="../messages/LVM_INSERTITEM.htm#LVM_INSERTITEM">LVM_INSERTITEM</A>, and <A HREF="../messages/LVM_DELETEITEM.htm#LVM_DELETEITEM">LVM_DELETEITEM</A>.

<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
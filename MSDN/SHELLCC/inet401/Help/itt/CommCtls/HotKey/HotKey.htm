<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Hot Key Controls</TITLE>

<META NAME=MS-HKWD CONTENT="Hot Key Controls">
<META NAME="Keywords" CONTENT="Internet Tools & Technologies, Common controls">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT, Mac">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="Hot_Key_Controls"></A>
<!--NAV_LINKS_START-->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Hot Key Controls"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../../art/headbard.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Hot Key Controls"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR><TR><TD><PRE><IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="../CommCtls.htm#book_cc">Topic Contents</A></PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="../header/structures/NMHEADER.htm">NMHEADER</A>
<IMG SRC="../../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="RefList.htm">Hot Key Control Reference</A></PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>Hot Key Controls</H1>
<BR CLEAR=ALL>
<P>A <I>hot key control</I> is a window that enables the user to enter a combination of keystrokes to be used as a hot key. A <I>hot key</I> is a key combination that the user can press to perform an action quickly. For example, a user can create a hot key that activates a given window and brings it to the top of the z-order. The hot key control displays the user's choices and ensures that the user selects a valid key combination.
<P><A CLASS=tctop HREF="HotKey.htm#Using_Hot_Key_Contro"><IMG SRC="../../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Using Hot Key Controls</A><BR>
<P><A CLASS=tctop HREF="RefList.htm#hotkey_HotKey"><IMG SRC="../../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Hot Key Control Reference</A><BR>
<H2><A NAME="Using_Hot_Key_Contro">Using Hot Key Controls</A></H2>
<P>When the user enters a key combination to be used as a hot key, the names of the keys appear in the hot key control. A key combination can consist of a modifier key (such as <SMALL>CTRL</SMALL>, <SMALL>ALT</SMALL>, or <SMALL>SHIFT</SMALL>) and an accompanying key (such as a character key, an arrow key, a function key, and so on). 

<P>After the user has chosen a key combination, the application retrieves the key combination from the hot key control and uses it to set up a hot key in the system. The information retrieved from the hot key control includes a flag indicating the modifier key and the virtual key code of the accompanying key. 

<P>The application can use the information provided by a hot key control to set up a global hot key or a thread-specific hot key. A global hot key is associated with a particular window; it allows the user to activate the window from any part of the system. An application sets a global hot key by using the
<object id="hhal_3" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_3.Click()>WM_SETHOTKEY</A> message. Whenever the user presses a global hot key, the window specified in <B>WM_SETHOTKEY</B> receives a
<object id="hhal_4" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_4.Click()>WM_SYSCOMMAND</A> message that specifies the SC_HOTKEY value. This message activates the window that receives it. The hot key remains valid until the application that called <B>WM_SETHOTKEY</B> exits.

<P>A thread-specific hot key generates a
<object id="hhal_5" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_5.Click()>WM_HOTKEY</A> message that is posted to the beginning of a particular thread so that it is removed by the next iteration of the message loop. An application sets a thread-specific hot key by using the
<object id="hhal_6" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_6.Click()>RegisterHotKey</A> function. 

<H3><A NAME="Hot_Key_Control_Crea">Hot Key Control Creation</A></H3>
<P>You create a hot key control by using the
<object id="hhal_7" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_7.Click()>CreateWindowEx</A> function, specifying the HOTKEY_CLASS window class. When the function returns a handle to the hot key control, an application typically sets some rules about invalid hot key combinations and may provide a default key combination. If an application does not set any rules, the user can choose any key or key combination as a hot key. Most applications, however, do not allow the user to use a common key (for example, the letter A) as a hot key.

<P>The following function creates a hot key control, uses the <A HREF="messages/HKM_SETRULES.htm#HKM_SETRULES">HKM_SETRULES</A> and <A HREF="messages/HKM_SETHOTKEY.htm#HKM_SETHOTKEY">HKM_SETHOTKEY</A> messages to initialize it, and returns a handle to the control. This hot key control does not allow the user to choose a hot key that is a single unmodified key, nor does it permit the user to choose only <SMALL>SHIFT</SMALL> and a key. (These rules effectively prevent the user from choosing a hot key that might be entered accidentally while typing text.)
<PRE>// InitializeHotkey - creates a hot key control and sets rules 
//    and default settings for it. 
// Returns the handle of the hot key control. 
// hwndDlg - handle of the parent window (dialog box). 
// 
// Global variable 
//     g_hinst - handle of the application instance. 
extern HINSTANCE g_hinst; 
HWND WINAPI InitializeHotkey(HWND hwndDlg) 
{ 
    // Ensure that the common control DLL is loaded. 
    InitCommonControls(); 
 
    hwndHot = CreateWindowEx( 
        0,                             // no extended styles 
        HOTKEY_CLASS,                  // class name 
        "",                            // no title (caption) 
        WS_CHILD | WS_VISIBLE,         // style 
        10, 10,                        // position 
        200, 20,                       // size 
        hwndDlg,                       // parent window 
        NULL,                          // uses class menu 
        g_hinst,                       // instance 
        NULL                           // no WM_CREATE parameter 
        ); 
 
    SetFocus(hwndHot); 
 
    // Set rules for invalid key combinations. If the user 
    // does not supply a modifier key, use ALT as a modifier. 
    // If the user supplies SHIFT as a modifier key, use 
    // SHIFT + ALT instead. 
    SendMessage(hwndHot, HKM_SETRULES, 
        (WPARAM) HKCOMB_NONE | HKCOMB_S, // invalid key combinations 
        MAKELPARAM(HOTKEYF_ALT, 0));     // add ALT to invalid entries 
 
    // Set CTRL + ALT + A as the default hot key for this window. 
    // 0x41 is the virtual key code for 'A'. 
    SendMessage(hwndHot, HKM_SETHOTKEY, 
        MAKEWORD(0x41, HOTKEYF_CONTROL | HOTKEYF_ALT), 0); 
 
    return hwndHot; 
} 
</PRE>
<H3><A NAME="Hot_Key_Control_Mess">Hot Key Control Messages</A></H3>
<P>After creating a hot key control, an application interacts with it by using three messages: <A HREF="messages/HKM_SETRULES.htm#HKM_SETRULES">HKM_SETRULES</A>, <A HREF="messages/HKM_SETHOTKEY.htm#HKM_SETHOTKEY">HKM_SETHOTKEY</A>, and <A HREF="messages/HKM_GETHOTKEY.htm#HKM_GETHOTKEY">HKM_GETHOTKEY</A>.

<P>An application can send the <A HREF="messages/HKM_SETRULES.htm#HKM_SETRULES">HKM_SETRULES</A> message to specify a set of <SMALL>CTRL</SMALL>, <SMALL>ALT</SMALL>, and <SMALL>SHIFT</SMALL> key combinations that are considered invalid hot keys. If the application specifies an invalid key combination, it should also specify a default modifier combination to use when the user selects the invalid combination. When the user enters the invalid combination, the system performs a logical OR operation on the invalid combination and the default combination. The result is considered a valid combination; it is converted to a string and displayed in the control. 

<P>The <A HREF="messages/HKM_SETHOTKEY.htm#HKM_SETHOTKEY">HKM_SETHOTKEY</A> message allows an application to set the hot key combination for a hot key control. This message is also typically used when the hot key control is created.

<P>Applications use the <A HREF="messages/HKM_GETHOTKEY.htm#HKM_GETHOTKEY">HKM_GETHOTKEY</A> message to retrieve the virtual key code and modifier flags of the hot key chosen by the user. 

<H3><A NAME="Hot_Key_Control_Notifications">Hot Key Control Notifications</A></H3>
<P>The hot key control does not send any notification messages via the <A HREF="../common/messages/WM_NOTIFY.htm">WM_NOTIFY</A> message. It will, however, send the
<object id="hhal_8" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_8.Click()>EN_CHANGE</A> notification via the
<object id="hhal_9" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_9.Click()>WM_COMMAND</A> message when the user changes the contents of the control.

<H3><A NAME="Retrieving_and_Setti">Retrieving and Setting a Hot Key</A></H3>
<P>After the user has chosen a hot key, an application should retrieve it from the hot key control by using the <A HREF="messages/HKM_GETHOTKEY.htm#HKM_GETHOTKEY">HKM_GETHOTKEY</A> message. This message retrieves a 16-bit value that contains the virtual key code and modifier keys describing the hot key. 

<P>The following function retrieves a key combination from a hot key control and then uses the
<object id="hhal_10" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_10.Click()>WM_SETHOTKEY</A> message to set a global hot key. Note that you cannot set a global hot key for a window that has the WS_CHILD window style.


<PRE>// ProcessHotkey - retrieves the hot key from the hot key control and 
//     sets it as the hot key for the application's main window. 
// Returns TRUE if successful, or FALSE otherwise. 
// hwndHot - handle of the hot key control. 
// hwndMain - handle of the main window. 
BOOL WINAPI ProcessHotkey(HWND hwndHot, HWND hwndMain) 
{ 
WORD wHotkey; 
UINT iSetResult; 

// Retrieve the hot key (virtual key code and modifiers). 
wHotkey = SendMessage(hwndHot, HKM_GETHOTKEY, 0, 0); 

// Use the result as wParam for WM_SETHOTKEY. 
iSetResult = SendMessage(hwndMain, WM_SETHOTKEY, wHotkey, 0); 

switch (iSetResult) 
    { 
    case 2:            // WM_SETHOTKEY succeeded. 
        MessageBox(NULL, "Hot key previously assigned", 
            "Okay", MB_OK); 
        return TRUE; 

    case 1:            // WM_SETHOTKEY succeeded. 
        return TRUE; 

    case 0: 
        MessageBox(NULL, "Invalid window for hot key", 
            "Error", MB_OK); 
        return FALSE; 

    case -1: 
        MessageBox(NULL, "Invalid hot key", 
            "Error", MB_OK); 
        return FALSE; 

    default: 
        MessageBox(NULL, "Unknown error", "Error", MB_OK); 
        return FALSE; 
    } 
} 
</PRE>
<H3><A NAME="Default_Hot_Key_Mess">Default Hot Key Message Processing</A></H3>
<P>This section describes the window messages handled by the window procedure for the pre defined HOTKEY_CLASS window class used with hot key controls.


<TABLE>
<TR><TD><B>Message
 </B></TD><TD><B>Processing performed
</B></TD></TR><TR><TD>WM_CHAR
 </TD><TD>Retrieves the virtual key code.</TD></TR><TR><TD>WM_CREATE
 </TD><TD>Initializes the hot key control, clears any hot key rules, and uses the system font. </TD></TR><TR><TD>WM_ERASEBKGND
 </TD><TD>Hides the caret, calls the
<object id="hhal_11" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_11.Click()>DefWindowProc</A> function, and shows the caret again.</TD></TR><TR><TD>WM_GETDLGCODE
 </TD><TD>Returns a combination of the DLGC_WANTCHARS and DLGC_WANTARROWS values.</TD></TR><TR><TD>WM_GETFONT
 </TD><TD>Retrieves the font.</TD></TR><TR><TD>WM_KEYDOWN
 </TD><TD>Calls the
<object id="hhal_12" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_12.Click()>DefWindowProc</A> function if the key is <SMALL>ENTER</SMALL>, <SMALL>TAB</SMALL>, <SMALL>SPACE BAR</SMALL>, <SMALL>DEL</SMALL>, <SMALL>ESC</SMALL>, or <SMALL>BACKSPACE</SMALL>. If the key is <SMALL>SHIFT</SMALL>, <SMALL>CTRL</SMALL>, or <SMALL>ALT</SMALL>, it checks whether the combination is valid and, if it is, sets the hot key using the combination. All other keys are set as hot keys without their validity being checked first. </TD></TR><TR><TD>WM_KEYUP
 </TD><TD>Retrieves the virtual key code.</TD></TR><TR><TD>WM_KILLFOCUS
 </TD><TD>Destroys the caret.</TD></TR><TR><TD>WM_LBUTTONDOWN
 </TD><TD>Sets the focus to the window.</TD></TR><TR><TD>WM_NCCREATE
 </TD><TD>Sets the WS_EX_CLIENTEDGE window style.</TD></TR><TR><TD>WM_PAINT
 </TD><TD>Paints the hot key control.</TD></TR><TR><TD>WM_SETFOCUS
 </TD><TD>Creates and shows the caret.</TD></TR><TR><TD>WM_SETFONT
 </TD><TD>Sets the font.</TD></TR><TR><TD>WM_SYSCHAR
 </TD><TD>Retrieves the virtual key code.</TD></TR><TR><TD>WM_SYSKEYDOWN
 </TD><TD>Calls the
<object id="hhal_13" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_13.Click()>DefWindowProc</A> function if the key is <SMALL>ENTER</SMALL>, <SMALL>TAB</SMALL>, <SMALL>SPACE BAR</SMALL>, <SMALL>DEL</SMALL>, <SMALL>ESC</SMALL>, or <SMALL>BACKSPACE</SMALL>. If the key is <SMALL>SHIFT</SMALL>, <SMALL>CTRL</SMALL>, or <SMALL>ALT</SMALL>, it checks whether the combination is valid and, if it is, sets the hot key using the combination. All other keys are set as hot keys without their validity being checked first. </TD></TR><TR><TD>WM_SYSKEYUP
 </TD><TD>Retrieves the virtual key code.</TD></TR></TABLE>
<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
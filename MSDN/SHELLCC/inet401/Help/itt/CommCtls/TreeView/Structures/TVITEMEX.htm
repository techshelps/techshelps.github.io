<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TVITEMEX</TITLE>

<META NAME=MS-HKWD CONTENT="TVITEMEX">
<META NAME="Keywords" CONTENT="Internet Tools & Technologies, Common controls">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT, Mac">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="TVITEMEX"></A>
<!--NAV_LINKS_START-->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="TVITEMEX"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../../../art/headbard.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="TVITEMEX"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR><TR><TD><PRE><IMG SRC="../../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="../TreeView.htm#ch_treeview">Topic Contents</A></PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="TVITEM.htm">TVITEM</A>
<IMG SRC="../../../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="TVSORTCB.htm">TVSORTCB</A></PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>TVITEMEX</H1>
<BR CLEAR=ALL>
<PRE>typedef struct tagTVITEMEX{
    UINT      mask;
    HTREEITEM hItem;
    UINT      state;
    UINT      stateMask;
    LPTSTR    pszText;
    int       cchTextMax;
    int       iImage;
    int       iSelectedImage;
    int       cChildren;
    LPARAM    lParam;
    int       iIntegral;
} TVITEMEX, FAR *LPTVITEMEX;
</PRE>
<P>Specifies or receives attributes of a tree view item. This structure is an enhancement to the <A HREF="TVITEM.htm#TV_ITEM">TVITEM</A> structure. New applications should use this structure where appropriate.

<DL><DT><B>mask</B>
 </DT><DD>Array of flags that indicate which of the other structure members contain valid data. When this structure is used with the <A HREF="../messages/TVM_GETITEM.htm#TVM_GETITEM">TVM_GETITEM</A> message, the <B>mask</B> member indicates the item attributes to retrieve. This member can be one or more of the following values:
 <TABLE>
<TR><TD>TVIF_CHILDREN
 </TD><TD>The <B>cChildren</B> member is valid.
 </TD></TR><TR><TD>TVIF_HANDLE
 </TD><TD>The <B>hItem</B> member is valid.
 </TD></TR><TR><TD>TVIF_IMAGE
 </TD><TD>The <B>iImage</B> member is valid.
 </TD></TR><TR><TD>TVIF_INTEGRAL
 </TD><TD>The <B>iIntegral</B> member is valid.
 </TD></TR><TR><TD>TVIF_PARAM
 </TD><TD>The <B>lParam</B> member is valid.
 </TD></TR><TR><TD>TVIF_SELECTEDIMAGE
 </TD><TD>The <B>iSelectedImage</B> member is valid.
 </TD></TR><TR><TD>TVIF_STATE
 </TD><TD>The <B>state</B> and <B>stateMask</B> members are valid.
 </TD></TR><TR><TD>TVIF_TEXT
 </TD><TD>The <B>pszText</B> and <B>cchTextMax</B> members are valid.
 </TD></TR></TABLE>
</DD><DT><B>hItem</B>
 </DT><DD>Identifies the item to which this structure refers. 
</DD><DT><B>state</B>
 </DT><DD>Set of bit flags and image list indexes that indicate the item's state. When setting the state of an item, the <B>stateMask</B> member indicates the bits of this member that are valid. When retrieving the state of an item, this member returns the current state for the bits indicated in the <B>stateMask</B> member. 

 <P>Bits 0 through 7 of this member contain the item state flags. For a list of possible item state flags, see <A HREF="../Item_States.htm#tv_item_states">Tree View Control Item States</A>.

 <P>Bits 8 through 11 of this member specify the one-based overlay image index. The overlay image is superimposed over the item's icon image. If these bits are zero, the item has no overlay image. To isolate these bits, use the TVIS_OVERLAYMASK mask. To set the overlay image index in this member, you should use the <A HREF="../../imagelist/macros/INDEXTOOVERLAYMASK.htm#INDEXTOOVERLAYMASK">INDEXTOOVERLAYMASK</A> macro. The image list's overlay images are set with the <A HREF="../../imagelist/functions/ImageList_SetOverlayImage.htm#ImageList_SetOverlay">ImageList_SetOverlayImage</A> function. 

 <P>Bits 12 through 15 of this member specify the state image index. The state image is displayed next to an item's icon to indicate an application-defined state. If these bits are zero, the item has no state image. To isolate these bits, use the TVIS_STATEIMAGEMASK mask. To set the state image index, use the <A HREF="../../common/macros/INDEXTOSTATEIMAGEMASK.htm#INDEXTOSTATEIMAGEMASK">INDEXTOSTATEIMAGEMASK</A> macro. The state image index specifies the index of the image in the state image list that should be drawn. The state image list is specified with the <A HREF="../messages/TVM_SETIMAGELIST.htm#TVM_SETIMAGELIST">TVM_SETIMAGELIST</A> message.

</DD><DT><B>stateMask</B>
 </DT><DD>Bits of the <B>state</B> member that are valid. If you are retrieving an item's state, set the bits of the <B>stateMask</B> member to indicate the bits to be returned in the <B>state</B> member. If you are setting an item's state, set the bits of the <B>stateMask</B> member to indicate the bits of the <B>state</B> member that you want to set. To set or retrieve an item's overlay image index, set the TVIS_OVERLAYMASK bits. To set or retrieve an item's state image index, set the TVIS_STATEIMAGEMASK bits. 
</DD><DT><B>pszText</B>
 </DT><DD>Address of a null-terminated string that contains the item text if the structure specifies item attributes. If this member is the LPSTR_TEXTCALLBACK value, the parent window is responsible for storing the name. In this case, the tree view control sends the parent window a <A HREF="../notifications/TVN_GETDISPINFO.htm#TVN_GETDISPINFO">TVN_GETDISPINFO</A> notification message when it needs the item text for displaying, sorting, or editing and a <A HREF="../notifications/TVN_SETDISPINFO.htm#TVN_SETDISPINFO">TVN_SETDISPINFO</A> notification message when the item text changes. 
</DD><DD>If the structure is receiving item attributes, this member is the address of the buffer that receives the item text.
</DD><DT><B>cchTextMax</B>
 </DT><DD>Size of the buffer pointed to by the <B>pszText</B> member, in characters. If this structure is being used to set item attributes, this member is ignored.
</DD><DT><B>iImage</B>
 </DT><DD>Index in the tree view control's image list of the icon image to use when the item is in the nonselected state. 
 </DD><DD>If this member is the I_IMAGECALLBACK value, the parent window is responsible for storing the index. In this case, the tree view control sends the parent a <A HREF="../notifications/TVN_GETDISPINFO.htm#TVN_GETDISPINFO">TVN_GETDISPINFO</A> notification message to get the index when it needs to display the image.
</DD><DT><B>iSelectedImage</B>
 </DT><DD>Index in the tree view control's image list of the icon image to use when the item is in the selected state.
 </DD><DD>If this member is the I_IMAGECALLBACK value, the parent window is responsible for storing the index. In this case, the tree view control sends the parent a <A HREF="../notifications/TVN_GETDISPINFO.htm#TVN_GETDISPINFO">TVN_GETDISPINFO</A> notification message to get the index when it needs to display the image.
</DD><DT><B>cChildren</B>
 </DT><DD>Flag that indicates whether the item has associated child items. This member can be one of the following values:
 <TABLE>
<TR><TD>zero
 </TD><TD>The item has no child items.
 </TD></TR><TR><TD>one
 </TD><TD>The item has one or more child items.
 </TD></TR><TR><TD>I_CHILDRENCALLBACK
 </TD><TD>The parent window keeps track of whether the item has child items. In this case, when the tree view control needs to display the item, the control sends the parent a <A HREF="../notifications/TVN_GETDISPINFO.htm#TVN_GETDISPINFO">TVN_GETDISPINFO</A> notification message to determine whether the item has child items. 
 </TD></TR><TR><TD></TD><TD>If the tree view control has the <A HREF="../Styles.htm#TVS_HASBUTTONS">TVS_HASBUTTONS</A> style, it uses this member to determine whether to display the button indicating the presence of child items. You can use this member to force the control to display the button even though the item does not have any child items inserted. This allows you to display the button while minimizing the control's memory usage by inserting child items only when the item is visible or expanded. 
 </TD></TR></TABLE>
</DD><DT><B>lParam</B>
 </DT><DD>A 32-bit value to associate with the item.
</DD><DT><B>iIntegral</B>
 </DT><DD>Height of the item. This height is in increments of the standard item height (see <A HREF="../messages/TVM_SETITEMHEIGHT.htm#TVM_SETITEMHEIGHT">TVM_SETITEMHEIGHT</A>). By default, each item gets one increment of item height. Setting this member to two will give the item twice the standard height, setting this member to three will give the item three times the standard height, and so on. The tree view control does not draw in this extra area. This extra space can be used by the application for drawing when using <A HREF="../../custdraw/CustDraw.htm#About_CustomDraw">custom draw</A>.
</DD></DL>
<P><B>Version 4.71</B>

<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
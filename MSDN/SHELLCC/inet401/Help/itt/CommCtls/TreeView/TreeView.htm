<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tree View Controls</TITLE>

<META NAME=MS-HKWD CONTENT="Tree View Controls">
<META NAME="Keywords" CONTENT="Internet Tools & Technologies, Common controls">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT, Mac">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="ch_treeview"></A>
<!--NAV_LINKS_START-->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Tree View Controls"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../../art/headbard.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Tree View Controls"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR><TR><TD><PRE><IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="../CommCtls.htm#book_cc">Topic Contents</A></PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="../trackbar/notifications/NM_RELEASEDCAPTURE_TRACKBAR.htm">NM_RELEASEDCAPTURE (trackbar)</A>
<IMG SRC="../../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="RefList.htm">Tree View Control Reference</A></PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>Tree View Controls</H1>
<BR CLEAR=ALL>
<P>A <I>tree view control</I> is a window that displays a hierarchical list of items, such as the headings in a document, the entries in an index, or the files and directories on a disk. Each item consists of a label and an optional bitmapped image, and each item can have a list of subitems associated with it. By clicking an item, the user can expand or collapse the associated list of subitems. 

<P><A CLASS=tctop HREF="TreeView.htm#About_Tree_View_Cont"><IMG SRC="../../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">About Tree View Controls</A><BR>
<P><A CLASS=tctop HREF="TreeView.htm#Using_Tree_View_Cont"><IMG SRC="../../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Using Tree View Controls</A><BR>
<P><A CLASS=tctop HREF="TreeView.htm#Tree_View_Control_Up"><IMG SRC="../../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Tree View Control Updates in Internet Explorer</A><BR>
<P><A CLASS=tctop HREF="RefList.htm#treeview_TreeView"><IMG SRC="../../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Tree View Control Reference</A><BR>
<!--************************************************************--><H2><A NAME="About_Tree_View_Cont">About Tree View Controls</A></H2>
<P>You create a tree view control by using the
<object id="hhal_3" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_3.Click()>CreateWindowEx</A> function, specifying the WC_TREEVIEW window class. The class is registered when the common control dynamic-link library (DLL) is loaded. To ensure that this DLL is loaded, include the <A HREF="../common/functions/InitCommonControls.htm#InitCommonControls">InitCommonControls</A> function in your application. The following illustration shows a tree view control that displays a table of contents.

<P><IMG SRC="../../../art/tv_scrn.gif" WIDTH="312" HEIGHT="256" ALT="Tree view control that displays a table of contents." >

<P>After creating a tree view control, you add, remove, arrange, or otherwise manipulate items by sending messages to the control. Each message has one or more corresponding macros that you can use instead of sending the message explicitly. 

<H3><A NAME="Tree_View_Styles">Tree View Styles</A></H3>
<P>Tree view styles govern aspects of a tree view control's appearance. You set the initial styles when you create the tree view control. You can retrieve and change the styles after creating the tree view control by using the
<object id="hhal_4" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_4.Click()>GetWindowLong</A> and
<object id="hhal_5" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_5.Click()>SetWindowLong</A> functions.

<P>The <A HREF="Styles.htm#TVS_HASLINES">TVS_HASLINES</A> style enhances the graphic representation of a tree view control's hierarchy by drawing lines that link child items to their parent item. This style does not link items at the root of the hierarchy. To do so, you need to combine the <B>TVS_HASLINES</B> and <A HREF="Styles.htm#TVS_LINESATROOT">TVS_LINESATROOT</A> styles. 

<P>The user can expand or collapse a parent item's list of child items by double-clicking the parent item. A tree view control that has the <A HREF="Styles.htm#TVS_HASBUTTONS">TVS_HASBUTTONS</A> style adds a button to the left side of each parent item. The user can click the button once instead of double-clicking the parent item to expand or collapse the child. <B>TVS_HASBUTTONS</B> does not add buttons to items at the root of the hierarchy. To do so, you must combine <A HREF="Styles.htm#TVS_HASLINES">TVS_HASLINES</A>, <A HREF="Styles.htm#TVS_LINESATROOT">TVS_LINESATROOT</A>, and <B>TVS_HASBUTTONS</B>. 

<P>The <A HREF="Styles.htm#TVS_EDITLABELS">TVS_EDITLABELS</A> style makes it possible for the user to edit the labels of tree view items. For more information about editing labels, see <A HREF="TreeView.htm#tv_label_editing">Tree View Label Editing</A>.

<P>The <A HREF="Styles.htm#TVS_SHOWSELALWAYS">TVS_SHOWSELALWAYS</A> style causes a selected item to remain selected when the tree view control loses focus.

<H3><A NAME="Parent_and_Child_Ite">Parent and Child Items</A></H3>
<P>Any item in a tree view control can have a list of subitems&#151;which are called <I>child items</I>&#151;associated with it. An item that has one or more child items is called a <I>parent item</I>. A child item is displayed below its parent item and is indented to indicate that it is subordinate to the parent. An item that has no parent appears at the top of the hierarchy and is called a <I>root item</I>. 

<P>To add an item to a tree view control, send the <A HREF="messages/TVM_INSERTITEM.htm#TVM_INSERTITEM">TVM_INSERTITEM</A> message to the control. The message returns a handle to the <B>HTREEITEM</B> type, which uniquely identifies the item. When adding an item, you must specify the handle to the new item's parent item. If you specify NULL or the TVI_ROOT value instead of a parent item handle in the <A HREF="structures/TVINSERTSTRUCT.htm#TV_INSERTSTRUCT">TVINSERTSTRUCT</A> structure, the item is added as a root item. 

<P>At any given time, the state of a parent item's list of child items can be either expanded or collapsed. When the state is expanded, the child items are displayed below the parent item. When it is collapsed, the child items are not displayed. The list automatically toggles between the expanded and collapsed states when the user double-clicks the parent item or, if the parent has the <A HREF="Styles.htm#TVS_HASBUTTONS">TVS_HASBUTTONS</A> style, when the user clicks the button associated with the parent item. An application can expand or collapse the child items by using the <A HREF="messages/TVM_EXPAND.htm#TVM_EXPAND">TVM_EXPAND</A> message. 

<P>A tree view control sends the parent window a <A HREF="notifications/TVN_ITEMEXPANDING.htm#TVN_ITEMEXPANDING">TVN_ITEMEXPANDING</A> notification message when a parent item's list of child items is about to be expanded or collapsed. The notification gives an application the opportunity to prevent the change or to set any attributes of the parent item that depend on the state of the list of child items. After changing the state of the list, the tree view control sends the parent window a <A HREF="notifications/TVN_ITEMEXPANDED.htm#TVN_ITEMEXPANDED">TVN_ITEMEXPANDED</A> notification message.

<P>When a list of child items is expanded, it is indented relative to the parent item. You can set the amount of indentation by using the <A HREF="messages/TVM_SETINDENT.htm#TVM_SETINDENT">TVM_SETINDENT</A> message or retrieve the current amount by using the <A HREF="messages/TVM_GETINDENT.htm#TVM_GETINDENT">TVM_GETINDENT</A> message.

<P>A tree view control uses memory allocated from the heap of the process that creates the tree view control. The maximum number of items in a tree view is based on the amount of memory available in the heap. Each item takes 64 bytes.

<H3><A NAME="Item_Labels">Item Labels</A></H3>
<P>You typically specify the text of an item's label when adding the item to the tree view control. The <A HREF="messages/TVM_INSERTITEM.htm#TVM_INSERTITEM">TVM_INSERTITEM</A> message includes a <A HREF="structures/TVITEM.htm#TV_ITEM">TVITEM</A> structure that defines the item's properties, including a string containing the text of the label. 

<P>A tree view control allocates memory for storing each item; the text of the item labels takes up a significant portion of this memory. If your application maintains a copy of the strings in the tree view control, you can decrease the memory requirements of the control by specifying the LPSTR_TEXTCALLBACK value in the <B>pszText</B> member of <A HREF="structures/TVITEM.htm#TV_ITEM">TVITEM</A> instead of passing actual strings to the tree view. Using LPSTR_TEXTCALLBACK causes the tree view control to retrieve the text of an item's label from the parent window whenever the item needs to be redrawn. To retrieve the text, the tree view control sends a <A HREF="notifications/TVN_GETDISPINFO.htm#TVN_GETDISPINFO">TVN_GETDISPINFO</A> notification message, which includes the address of a <A HREF="structures/NMTVDISPINFO.htm#TV_DISPINFO">NMTVDISPINFO</A> structure. The parent window must fill the appropriate members of the included structure. 

<H3><A NAME="tv_label_editing">Tree View Label Editing</A></H3>
<P>The user can directly edit the labels of items in a tree view control that has the <A HREF="Styles.htm#TVS_EDITLABELS">TVS_EDITLABELS</A> style. The user begins editing by clicking the label of the item that has the focus. An application begins editing by using the <A HREF="messages/TVM_EDITLABEL.htm#TVM_EDITLABEL">TVM_EDITLABEL</A> message. The tree view control notifies the parent window when editing begins and when it is canceled or completed. When editing is completed, the parent window is responsible for updating the item's label, if appropriate. 

<P>When label editing begins, a tree view control sends its parent window a <A HREF="notifications/TVN_BEGINLABELEDIT.htm#TVN_BEGINLABELEDIT">TVN_BEGINLABELEDIT</A> notification message. By processing this notification, an application can allow editing of some labels and prevent editing of others. Returning zero allows editing, and returning nonzero prevents it. 

<P>When label editing is canceled or completed, a tree view control sends its parent window a <A HREF="notifications/TVN_ENDLABELEDIT.htm#TVN_ENDLABELEDIT">TVN_ENDLABELEDIT</A> notification message. The <I>lParam</I> parameter is the address of an <A HREF="structures/NMTVDISPINFO.htm#TV_DISPINFO">NMTVDISPINFO</A> structure. The <B>item</B> member is a <A HREF="structures/TVITEM.htm#TV_ITEM">TVITEM</A> structure that identifies the item and includes the edited text. The parent window is responsible for updating the item's label if it wishes to keep the new label. The <B>pszText</B> member of <B>TVITEM</B> is zero if editing is canceled. 

<P>During label editing, typically in response to the <A HREF="notifications/TVN_BEGINLABELEDIT.htm#TVN_BEGINLABELEDIT">TVN_BEGINLABELEDIT</A> notification message, you can get the handle to the edit control used for label editing by using the <A HREF="messages/TVM_GETEDITCONTROL.htm#TVM_GETEDITCONTROL">TVM_GETEDITCONTROL</A> message. You can send the edit control an
<object id="hhal_6" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_6.Click()>EM_SETLIMITTEXT</A> message to limit the amount of text a user can enter or subclass the edit control to intercept and discard invalid characters. Note, however, that the edit control is displayed only <I>after</I> <B>TVN_BEGINLABELEDIT</B> is sent.

<H3><A NAME="Tree_View_Item_Posit">Tree View Item Position</A></H3>
<P>An item's initial position is set when the item is added to the tree view control by using the <A HREF="messages/TVM_INSERTITEM.htm#TVM_INSERTITEM">TVM_INSERTITEM</A> message. The message includes a <A HREF="structures/TVINSERTSTRUCT.htm#TV_INSERTSTRUCT">TVINSERTSTRUCT</A> structure that specifies the handle to the parent item and the handle to the item after which the new item is to be inserted. The second handle must identify either a child item of the given parent or one of these values: TVI_FIRST, TVI_LAST, or TVI_SORT. 

<P>When TVI_FIRST or TVI_LAST is specified, the tree view control places the new item at the beginning or end of the given parent item's list of child items. When TVI_SORT is specified, the tree view control inserts the new item into the list of child items in alphabetical order based on the text of the item labels. 

<P>You can put a parent item's list of child items in alphabetical order by using the <A HREF="messages/TVM_SORTCHILDREN.htm#TVM_SORTCHILDREN">TVM_SORTCHILDREN</A> message. The message includes a parameter that specifies whether all levels of child items descending from the given parent item are also sorted in alphabetical order.

<P>The <A HREF="messages/TVM_SORTCHILDRENCB.htm#TVM_SORTCHILDRENCB">TVM_SORTCHILDRENCB</A> message allows you to sort child items based on criteria that you define. When you use this message, you specify an application-defined callback function that the tree view control can call whenever the relative order of two child items needs to be decided. The callback function receives two 32-bit application-defined values for the items being compared and a third 32-bit value that you specify when sending <B>TVM_SORTCHILDRENCB</B>. 

<H3><A NAME="tv_item_states_ovr">Tree View Item States Overview</A></H3>
<P>Each item in a tree view control has a current state. The state information for each item includes a set of bit flags as well as image list indexes that indicate the item's state image and overlay image. The bit flags indicate whether the item is selected, disabled, expanded, and so on. For the most part, a tree view control automatically sets an item's state to reflect user actions, such as selection of an item. However, you can also set an item's state by using the <A HREF="messages/TVM_SETITEM.htm#TVM_SETITEM">TVM_SETITEM</A> message, and you can retrieve the current state of an item by using the <A HREF="messages/TVM_GETITEM.htm#TVM_GETITEM">TVM_GETITEM</A> message. For a complete list of item states, see <A HREF="Item_States.htm#tv_item_states">Tree View Control Item States</A>.

<P>An item's current state is specified by the <B>state</B> member of the <A HREF="structures/TVITEM.htm#TV_ITEM">TVITEM</A> structure. A tree view control might change an item's state to reflect a user action, such as selecting the item or setting the focus to the item. In addition, an application might change an item's state to disable or hide the item or to specify an overlay image or state image.

<P>When you specify or change an item's state, the <B>stateMask</B> member of <A HREF="structures/TVITEM.htm#TV_ITEM">TVITEM</A> specifies which state bits to set, and the <B>state</B> member contains the new values for those bits. 

<P>To set an item's overlay image, <B>stateMask</B> must include the TVIS_OVERLAYMASK value, and <B>state</B> must include the one-based index of the overlay image shifted left 8 bits by using the <A HREF="../imagelist/macros/INDEXTOOVERLAYMASK.htm#INDEXTOOVERLAYMASK">INDEXTOOVERLAYMASK</A> macro. The index can be zero to specify no overlay image. 

<P>To set an item's state image, <B>stateMask</B> of <A HREF="structures/TVITEM.htm#TV_ITEM">TVITEM</A> must include the TVIS_STATEIMAGEMASK value, and <B>state</B> must include the one-based index of the state image shifted left 12 bits by using the <A HREF="../common/macros/INDEXTOSTATEIMAGEMASK.htm#INDEXTOSTATEIMAGEMASK">INDEXTOSTATEIMAGEMASK</A> macro. The index can be zero to specify no state image. For more information about overlay and state images, see <A HREF="TreeView.htm#tv_image_lists">Tree View Image Lists</A>.

<H3><A NAME="Item_Selection">Item Selection</A></H3>
<P>A tree view control notifies the parent window when the selection changes from one item to another by sending the <A HREF="notifications/TVN_SELCHANGING.htm#TVN_SELCHANGING">TVN_SELCHANGING</A> and <A HREF="notifications/TVN_SELCHANGED.htm#TVN_SELCHANGED">TVN_SELCHANGED</A> notification messages. Both notifications include a value that specifies whether the change is the result of a mouse click or a keystroke. The notifications also include information about the item that is gaining the selection and the item that is losing the selection. You can use this information to set item attributes that depend on the selection state of the item. Returning TRUE in response to <B>TVN_SELCHANGING</B> prevents the selection from changing, and returning FALSE allows the change.

<P>An application can change the selection by sending the <A HREF="messages/TVM_SELECTITEM.htm#TVM_SELECTITEM">TVM_SELECTITEM</A> message.

<H3><A NAME="Item_Information">Item Information</A></H3>
<P>Tree view controls support a number of messages that retrieve information about items in the control.

<P>The <A HREF="messages/TVM_GETITEM.htm#TVM_GETITEM">TVM_GETITEM</A> message can retrieve an item's handle and attributes. An item's attributes include its current state, the indexes in the control's image list of the item's selected and nonselected bitmapped images, a flag that indicates whether the item has child items, the address of the item's label string, and the item's application-defined 32-bit value. 

<P>The <A HREF="messages/TVM_GETNEXTITEM.htm#TVM_GETNEXTITEM">TVM_GETNEXTITEM</A> message retrieves the tree view item that bears the specified relationship to the current item. The message can retrieve an item's parent, the next or previous visible item, the first child item, and so on.

<P>The <A HREF="messages/TVM_GETITEMRECT.htm#TVM_GETITEMRECT">TVM_GETITEMRECT</A> message retrieves the bounding rectangle for a tree view item. The <A HREF="messages/TVM_GETCOUNT.htm#TVM_GETCOUNT">TVM_GETCOUNT</A> and <A HREF="messages/TVM_GETVISIBLECOUNT.htm#TVM_GETVISIBLECOUNT">TVM_GETVISIBLECOUNT</A> messages retrieve a count of the items in a tree view control and a count of the items that can be fully visible in the tree view control's window, respectively. You can ensure that a particular item is visible by using the <A HREF="messages/TVM_ENSUREVISIBLE.htm#TVM_ENSUREVISIBLE">TVM_ENSUREVISIBLE</A> message.

<H3><A NAME="tv_image_lists">Tree View Image Lists</A></H3>
<P>Each item in a tree view control can have four bitmapped images associated with it: 

<UL><LI>An image, such as an open folder, displayed when the item is selected.
<LI>An image, such as a closed folder, displayed when the item is not selected.
<LI>An overlay image that is drawn transparently over the selected or nonselected image.
<LI>A state image, which is an additional image displayed to the left of the selected or nonselected image. You can use state images, such as checked and cleared check boxes, to indicate application-defined item states. 
</UL>
<P>By default, a tree view control does not display item images. To display item images, you must create image lists and associate them with the control. For more information about image lists, see <A HREF="../imagelist/ImageList.htm#ch_il_refs">Image Lists</A>. 

<P>A tree view control can have two image lists: a normal image list and a state image list. A normal image list stores the selected, nonselected, and overlay images. A state image list stores state images. Use the <A HREF="../imagelist/functions/ImageList_Create.htm#ImageList_Create">ImageList_Create</A> function to create an image list, and use other image list functions to add bitmaps to the image list. Then, to associate the image list with the tree view control, use the <A HREF="messages/TVM_SETIMAGELIST.htm#TVM_SETIMAGELIST">TVM_SETIMAGELIST</A> message. The <A HREF="messages/TVM_GETIMAGELIST.htm#TVM_GETIMAGELIST">TVM_GETIMAGELIST</A> message retrieves a handle to one of a tree view control's image lists. This message is useful if you need to add more images to the list. 

<P>In addition to the selected and nonselected images, a tree view control's normal image list can contain up to four overlay images. Overlay images are identified by a one-based index and are designed to be drawn transparently over the selected and nonselected images. To assign an overlay mask index to an image in the normal image list, call the <A HREF="../imagelist/functions/ImageList_SetOverlayImage.htm#ImageList_SetOverlay">ImageList_SetOverlayImage</A> function. 

<P>By default, all items display the first image in the normal image list for both the selected and nonselected states. Also, by default, items do not display overlay images or state images. You can change these default behaviors for an item by sending the <A HREF="messages/TVM_INSERTITEM.htm#TVM_INSERTITEM">TVM_INSERTITEM</A> or <A HREF="messages/TVM_SETITEM.htm#TVM_SETITEM">TVM_SETITEM</A> messages. These messages use the <A HREF="structures/TVITEM.htm#TV_ITEM">TVITEM</A> structure to specify image list indexes for an item. 

<P>To specify an item's selected and nonselected images, set the TVIF_SELECTEDIMAGE and TVIF_IMAGE bits in the <B>mask</B> member of the <A HREF="structures/TVITEM.htm#TV_ITEM">TVITEM</A> structure and specify indexes from the control's normal image list in the <B>iSelectImage</B> and <B>iImage</B> members. Alternatively, you can specify the I_IMAGECALLBACK value in <B>iSelectImage</B> and <B>iImage</B> instead of specifying indexes. This causes the control to query its parent window for an image list index each time the item is about to be redrawn. The control sends the <A HREF="notifications/TVN_GETDISPINFO.htm#TVN_GETDISPINFO">TVN_GETDISPINFO</A> notification message to get the index.

<P>To associate an overlay image with an item, use the <A HREF="../imagelist/macros/INDEXTOOVERLAYMASK.htm#INDEXTOOVERLAYMASK">INDEXTOOVERLAYMASK</A> macro to specify an overlay mask index in the <B>state</B> member of the item's <A HREF="structures/TVITEM.htm#TV_ITEM">TVITEM</A> structure. You must also set the TVIS_OVERLAYMASK bits in the <B>stateMask</B> member. Overlay mask indexes are one-based; an index of zero indicates that no overlay image was specified. 

<P>To associate a state image with an item, use the <A HREF="../common/macros/INDEXTOSTATEIMAGEMASK.htm#INDEXTOSTATEIMAGEMASK">INDEXTOSTATEIMAGEMASK</A> macro to specify a state image index in the <B>state</B> member of the item's <A HREF="structures/TVITEM.htm#TV_ITEM">TVITEM</A> structure. The index identifies an image in the control's state image list. Although image list indexes are zero-based, the control uses one-based indexes to identify state images. This means that the first image in a control's state image list is at state image index one. A state image index of zero indicates that an item has no state image. For more information about a tree view item's <B>state</B> member, see <A HREF="TreeView.htm#tv_item_states_ovr">Tree View Item States Overview</A>. 

<H3><A NAME="Drag_and_Drop_Operat">Drag-and-Drop Operations</A></H3>
<P>A tree view control notifies the parent window when the user starts to drag an item. The parent window receives a <A HREF="notifications/TVN_BEGINDRAG.htm#TVN_BEGINDRAG">TVN_BEGINDRAG</A> notification message when the user begins dragging an item with the left mouse button and a <A HREF="notifications/TVN_BEGINRDRAG.htm#TVN_BEGINRDRAG">TVN_BEGINRDRAG</A> notification message when the user begins dragging with the right button. You can prevent a tree view control from sending these notifications by giving the tree view control the <A HREF="Styles.htm#TVS_DISABLEDRAGDROP">TVS_DISABLEDRAGDROP</A> style. 

<P>You obtain an image to display during a drag operation by using the <A HREF="messages/TVM_CREATEDRAGIMAGE.htm#TVM_CREATEDRAGIMAGE">TVM_CREATEDRAGIMAGE</A> message. The tree view control creates a dragging bitmap based on the label of the item being dragged. Then the tree view control creates an image list, adds the bitmap to it, and returns the handle to the image list. 

<P>You must provide the code that actually drags the item. This typically involves using the dragging capabilities of the image list functions and processing the
<object id="hhal_7" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_7.Click()>WM_MOUSEMOVE</A> and
<object id="hhal_8" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_8.Click()>WM_LBUTTONUP</A> (or
<object id="hhal_9" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_9.Click()>WM_RBUTTONUP</A>) messages sent to the parent window after the drag operation has begun. For more information, see <A HREF="TreeView.htm#tv_dragging_items">Dragging a Tree View Item</A>.

<P>If items in a tree view control are to be the targets of drag-and-drop operations, you need to know when the mouse cursor is on a target item. You can find out by using the <A HREF="messages/TVM_HITTEST.htm#TVM_HITTEST">TVM_HITTEST</A> message. You specify the address of a <A HREF="structures/TVHITTESTINFO.htm#TV_HITTESTINFO">TVHITTESTINFO</A> structure that contains the current coordinates of the mouse cursor. When the
<object id="hhal_10" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_10.Click()>SendMessage</A> function returns, the structure contains a flag indicating the location of the mouse cursor relative to the tree view control. If the cursor is over an item in the tree view control, the structure contains the handle to the item as well.

<P>You can indicate that an item is the target of a drag-and-drop operation by using the <A HREF="messages/TVM_SETITEM.htm#TVM_SETITEM">TVM_SETITEM</A> message to set the state to the TVIS_DROPHILITED value. An item that has this state is drawn in the style used to indicate a drag-and-drop target.

<H3><A NAME="About_Tree_View_Cont">About Tree View Control Notification Messages</A></H3>
<P>A tree view control sends the following notification messages to its parent window in the form of <A HREF="../common/messages/WM_NOTIFY.htm#WM_NOTIFY">WM_NOTIFY</A> messages.

<TABLE>
<TR><TD><B>Notification
 </B></TD><TD><B>Description
</B></TD></TR><TR><TD><A HREF="notifications/TVN_BEGINDRAG.htm" TITLE="Link to TVN_BEGINDRAG definition">TVN_BEGINDRAG</A>
 </TD><TD>Signals the start of a drag-and-drop operation.</TD></TR><TR><TD><A HREF="notifications/TVN_BEGINLABELEDIT.htm" TITLE="Link to TVN_BEGINLABELEDIT definition">TVN_BEGINLABELEDIT</A>&nbsp;&nbsp;&nbsp;
 </TD><TD>Signals the start of in-place label editing.</TD></TR><TR><TD><A HREF="notifications/TVN_BEGINRDRAG.htm" TITLE="Link to TVN_BEGINRDRAG definition">TVN_BEGINRDRAG</A>
 </TD><TD>Signals that the right mouse button has started a drag-and-drop operation. </TD></TR><TR><TD><A HREF="notifications/TVN_DELETEITEM.htm" TITLE="Link to TVN_DELETEITEM definition">TVN_DELETEITEM</A>
 </TD><TD>Signals the deletion of a specific item.</TD></TR><TR><TD><A HREF="notifications/TVN_ENDLABELEDIT.htm" TITLE="Link to TVN_ENDLABELEDIT definition">TVN_ENDLABELEDIT</A>
 </TD><TD>Signals the end of label editing.</TD></TR><TR><TD><A HREF="notifications/TVN_GETDISPINFO.htm" TITLE="Link to TVN_GETDISPINFO definition">TVN_GETDISPINFO</A>
 </TD><TD>Requests information that the tree view control requires to display an item.</TD></TR><TR><TD><A HREF="notifications/TVN_ITEMEXPANDED.htm" TITLE="Link to TVN_ITEMEXPANDED definition">TVN_ITEMEXPANDED</A>
 </TD><TD>Signals that a parent item's list of child items was expanded or collapsed.</TD></TR><TR><TD><A HREF="notifications/TVN_ITEMEXPANDING.htm" TITLE="Link to TVN_ITEMEXPANDING definition">TVN_ITEMEXPANDING</A>
 </TD><TD>Signals that a parent item's list of child items is about to be expanded or collapsed.</TD></TR><TR><TD><A HREF="notifications/TVN_KEYDOWN.htm" TITLE="Link to TVN_KEYDOWN definition">TVN_KEYDOWN</A>
 </TD><TD>Signals a keyboard event.</TD></TR><TR><TD><A HREF="notifications/TVN_SELCHANGED.htm" TITLE="Link to TVN_SELCHANGED definition">TVN_SELCHANGED</A>
 </TD><TD>Signals that the selection has changed from one item to another. </TD></TR><TR><TD><A HREF="notifications/TVN_SELCHANGING.htm" TITLE="Link to TVN_SELCHANGING definition">TVN_SELCHANGING</A>
 </TD><TD>Signals that the selection is about to be changed from one item to another. </TD></TR><TR><TD><A HREF="notifications/TVN_SETDISPINFO.htm" TITLE="Link to TVN_SETDISPINFO definition">TVN_SETDISPINFO</A>
 </TD><TD>Notifies a parent window that it must update the information it maintains for an item.</TD></TR></TABLE>
<H3><A NAME="Default_Tree_View_Co">Default Tree View Control Message Processing</A></H3>
<P>This section describes the window message processing performed by a tree view control. Messages specific to tree view controls are discussed in other sections of this document, so they are not included here.

<TABLE>
<TR><TD><B>Message
 </B></TD><TD><B>Processing performed

</B></TD></TR><TR><TD><object id="hhal_11" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_11.Click()>WM_COMMAND</A>
 </TD><TD>Processes the
<object id="hhal_12" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_12.Click()>EN_UPDATE</A> and
<object id="hhal_13" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_13.Click()>EN_KILLFOCUS</A> edit control notification messages and forwards all other edit control notifications to the parent window. There is no return value.</TD></TR><TR><TD><object id="hhal_14" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_14.Click()>WM_CREATE</A>
 </TD><TD>Allocates memory and initializes internal data structures. It returns zero if successful, or -1 otherwise.</TD></TR><TR><TD><object id="hhal_15" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_15.Click()>WM_DESTROY</A>
 </TD><TD>Frees all system resources associated with the control. It returns zero.</TD></TR><TR><TD><object id="hhal_16" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_16.Click()>WM_ENABLE</A>
 </TD><TD>Enables or disables the control.</TD></TR><TR><TD><object id="hhal_17" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_17.Click()>WM_ERASEBKGND</A>
 </TD><TD>Erases the window background using the current background color for the tree view control. It returns TRUE.</TD></TR><TR><TD><object id="hhal_18" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_18.Click()>WM_GETDLGCODE</A>
 </TD><TD>Returns a combination of the DLGC_WANTARROWS and DLGC_WANTCHARS values.</TD></TR><TR><TD><object id="hhal_19" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_19.Click()>WM_GETFONT</A>
 </TD><TD>Returns the handle to the current label font.</TD></TR><TR><TD><object id="hhal_20" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_20.Click()>WM_HSCROLL</A>
 </TD><TD>Scrolls the tree view control. It returns TRUE if scrolling occurs, or FALSE otherwise.</TD></TR><TR><TD><object id="hhal_21" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_21.Click()>WM_KEYDOWN</A>
 </TD><TD>Sends the <A HREF="notifications/TVN_KEYDOWN.htm#TVN_KEYDOWN">TVN_KEYDOWN</A> notification message to the parent window for all keys. Sends the <A HREF="notifications/NM_RETURN_TREEVIEW.htm#NM_RETURN_TREEVIEW">NM_RETURN</A> notification message when the user presses the <SMALL>ENTER</SMALL> key. It moves the caret when the user presses the direction keys or the <SMALL>PAGE UP</SMALL>, <SMALL>PAGE DOWN</SMALL>, <SMALL>HOME</SMALL>, <SMALL>END</SMALL>, or <SMALL>BACKSPACE</SMALL> key. It scrolls the tree view control when the user presses the <SMALL>CTRL</SMALL> key in combination with those keys. It returns TRUE if a key is processed, or FALSE otherwise.</TD></TR><TR><TD><object id="hhal_22" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_22.Click()>WM_KILLFOCUS</A>
 </TD><TD>Repaints the focused item, if any, and sends an <A HREF="notifications/NM_KILLFOCUS_TREEVIEW.htm#NM_KILLFOCUS_TREEVIEW">NM_KILLFOCUS</A> notification message to the parent window.</TD></TR><TR><TD>
<object id="hhal_23" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_23.Click()>WM_LBUTTONDBLCLK</A>
 </TD><TD>Cancels label editing and, if an item was double-clicked, sends the NM_DBLCLK notification message to the parent window. If the parent window returns TRUE, the tree view control toggles the expanded state of the item, sending the parent window the <A HREF="notifications/TVN_ITEMEXPANDING.htm#TVN_ITEMEXPANDING">TVN_ITEMEXPANDING</A> and <A HREF="notifications/TVN_ITEMEXPANDED.htm#TVN_ITEMEXPANDED">TVN_ITEMEXPANDED</A> notification messages. There is no return value.</TD></TR><TR><TD><object id="hhal_24" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_24.Click()>WM_LBUTTONDOWN</A>
 </TD><TD>Toggles the expanded state if the user clicked the button associated with a parent item. If the user clicked an item label, the tree view control selects and sets the focus to the item. If the user moves the mouse before releasing the mouse button, the tree view control begins a drag-and-drop operation. There is no return value.</TD></TR><TR><TD><object id="hhal_25" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_25.Click()>WM_PAINT</A>
 </TD><TD>Paints the invalid region of the tree view control. It returns zero. If the <I>wParam</I> parameter is non-NULL, the control assumes that the value is an HDC and paints using that device context.</TD></TR><TR><TD><object id="hhal_26" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_26.Click()>WM_RBUTTONDOWN</A>
 </TD><TD>Checks to see if an item was clicked and a drag operation was begun. If the operation has begun, it sends a <A HREF="notifications/TVN_BEGINRDRAG.htm#TVN_BEGINRDRAG">TVN_BEGINRDRAG</A> notification message to the parent window and highlights the drop target. Otherwise, it sends an NM_RCLICK notification message to the parent window. There is no return value.</TD></TR><TR><TD><object id="hhal_27" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_27.Click()>WM_SETFOCUS</A>
 </TD><TD>Repaints the focused item, if any, and sends an NM_SETFOCUS notification message to the parent window.</TD></TR><TR><TD><object id="hhal_28" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_28.Click()>WM_SETFONT</A>
 </TD><TD>Saves the specified font handle and repaints the tree view control using the new font.</TD></TR><TR><TD><object id="hhal_29" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_29.Click()>WM_SETREDRAW</A>
 </TD><TD>Sets or clears the redraw flag. The tree view control is redrawn after the redraw flag is set. It returns zero.</TD></TR><TR><TD><object id="hhal_30" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_30.Click()>WM_SIZE</A>
 </TD><TD>Recomputes internal variables that depend on the size of the tree view control's client area. It returns TRUE.</TD></TR><TR><TD><object id="hhal_31" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_31.Click()>WM_STYLECHANGED</A>
 </TD><TD>Cancels label editing and redraws the tree view control using the new styles. It returns zero.</TD></TR><TR><TD><object id="hhal_32" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_32.Click()>WM_SYSCOLORCHANGE</A>
 </TD><TD>Redraws the tree view control using the new color if the redraw flag is set. There is no return value.</TD></TR><TR><TD><object id="hhal_33" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_33.Click()>WM_TIMER</A>
 </TD><TD>Begins editing an item label. If the user clicks the label of the focused item, the tree view control sets a timer instead of entering edit mode immediately. The timer makes it possible for the tree view to avoid entering edit mode if the user double-clicks the label. It returns zero.</TD></TR><TR><TD><object id="hhal_34" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_34.Click()>WM_VSCROLL</A>
 </TD><TD>Scrolls the tree view control. It returns TRUE if scrolling occurs, or FALSE otherwise.</TD></TR></TABLE>
<H2><A NAME="Using_Tree_View_Cont">Using Tree View Controls</A></H2>
<P>This section contains examples that demonstrate the following tasks:

<UL><LI>Creating a tree view control 
<LI>Initializing the image list 
<LI>Adding tree view items 
<LI>Dragging a tree view item 
</UL>
<H3><A NAME="Creating_a_Tree_View">Creating a Tree View Control</A></H3>
<P>To create a tree view control, use the
<object id="hhal_35" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_35.Click()>CreateWindowEx</A> function, specifying the WC_TREEVIEW value for the window class. The tree view window class is registered in the application's address space when the common control dynamic-link library (DLL) is loaded. To ensure that the DLL is loaded, use the <A HREF="../common/functions/InitCommonControls.htm#InitCommonControls">InitCommonControls</A> function.

<P><B>Note:</B> When you create a treeview control, you may also send it a
<object id="hhal_36" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_36.Click()>WM_SETFONT</A> message to set the font to be used for the text in the treeview.  By default, a treeview uses
the icon title font.  Although you can customize the font on a per-item
basis (by using custom draw), the treeview control uses the dimensions
of the font specified by the
<object id="hhal_37" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_37.Click()>WM_SETFONT</A> message to determine spacing and
layout.


<P>The following example creates a tree view control that is sized to fit the client area of the parent window. It also uses application-defined functions to associate an image list with the control and add items to the control. 

<PRE>
// CreateATreeView - creates a tree view control. 
// Returns the handle to the new control if successful,
//  or NULL otherwise. 
// hwndParent - handle to the control's parent window. 
// lpszFileName - name of the file to parse for tree view items.

HWND CreateATreeView(HWND hwndParent, LPSTR lpszFileName) 
{ 
    RECT rcClient;  // dimensions of client area 
    HWND hwndTV;    // handle to tree view control 
 
    // Ensure that the common control DLL is loaded. 
    InitCommonControls(); 
 
    // Get the dimensions of the parent window's client area, and create 
    // the tree view control. 
    GetClientRect(hwndParent, &amp;rcClient); 
    hwndTV = CreateWindowEx(0, WC_TREEVIEW, "Tree View", 
        WS_VISIBLE | WS_CHILD | WS_BORDER | TVS_HASLINES, 
        0, 0, rcClient.right, rcClient.bottom, 
        hwndParent, (HMENU) ID_TREEVIEW, g_hinst, NULL); 
 
    // Initialize the image list, and add items to the control. 
    // InitTreeViewImageLists and InitTreeViewItems are application- 
    // defined functions. 
    if (!InitTreeViewImageLists(hwndTV) || 
            !InitTreeViewItems(hwndTV, lpszFileName)) { 
        DestroyWindow(hwndTV); 
        return FALSE; 
    } 
    return hwndTV;
} 
 

</PRE>
<H3><A NAME="Initializing_the_Ima">Initializing the Image List</A></H3>
<P>Every item in a tree view control can have two images associated with it. An item displays one image when it is selected and the other when it is not. To include images with tree view items, first use the image list functions to create an image list and add images to it. Then associate the image list with the tree view control by using the <A HREF="messages/TVM_SETIMAGELIST.htm#TVM_SETIMAGELIST">TVM_SETIMAGELIST</A> message. 

<P>The following example creates an image list, adds three bitmaps to the list, and associates the image list with a tree view control.

<PRE>
// InitTreeViewImageLists - creates an image list, adds three bitmaps 
// to it, and associates the image list with a tree view control. 
// Returns TRUE if successful, or FALSE otherwise. 
// hwndTV - handle to the tree view control. 
//
// Global variables and constants 
// g_nOpen, g_nClosed, and g_nDocument - integer variables for 
// indexes of the images. 
// CX_BITMAP and CY_BITMAP - width and height of an icon. 
// NUM_BITMAPS - number of bitmaps to add to the image list. 

BOOL InitTreeViewImageLists(HWND hwndTV) 
{ 
    HIMAGELIST himl;  // handle to image list 
    HBITMAP hbmp;     // handle to bitmap 

    // Create the image list. 
    if ((himl = ImageList_Create(CX_BITMAP, CY_BITMAP, 
        FALSE, NUM_BITMAPS, 0)) == NULL) 
        return FALSE; 

    // Add the open file, closed file, and document bitmaps. 
    hbmp = LoadBitmap(g_hinst, MAKEINTRESOURCE(IDB_OPEN_FILE)); 
    g_nOpen = ImageList_Add(himl, hbmp, (HBITMAP) NULL); 
    DeleteObject(hbmp); 

    hbmp = LoadBitmap(g_hinst, MAKEINTRESOURCE(IDB_CLOSED_FILE)); 
    g_nClosed = ImageList_Add(himl, hbmp, (HBITMAP) NULL); 
    DeleteObject(hbmp); 

    hbmp = LoadBitmap(g_hinst, MAKEINTRESOURCE(IDB_DOCUMENT)); 
    g_nDocument = ImageList_Add(himl, hbmp, (HBITMAP) NULL); 
    DeleteObject(hbmp); 

    // Fail if not all of the images were added. 
    if (ImageList_GetImageCount(himl) &lt; 3) 
        return FALSE; 

    // Associate the image list with the tree view control. 
    TreeView_SetImageList(hwndTV, himl, TVSIL_NORMAL); 

    return TRUE; 
} 
</PRE>
<H3><A NAME="Adding_Tree_View_Ite">Adding Tree View Items</A></H3>
<P>You add an item to a tree view control by sending the <A HREF="messages/TVM_INSERTITEM.htm#TVM_INSERTITEM">TVM_INSERTITEM</A> message to the control. The message includes the address of a <A HREF="structures/TVINSERTSTRUCT.htm#TV_INSERTSTRUCT">TVINSERTSTRUCT</A> structure, specifying the parent item, the item after which the new item is inserted, and a <A HREF="structures/TVITEM.htm#TV_ITEM">TVITEM</A> structure that defines the attributes of the item. The attributes include the item's label, its selected and nonselected images, and a 32-bit application-defined value. 

<P>The example in this section demonstrates how to create a table of contents based on the information in a text file. The example includes two functions. The first function searches a file for headings. When it finds one, it extracts the text of the heading and the value that indicates the level of the heading and then passes them to the second function. 

<P>The second function adds an item to a tree view control, using the heading text as the item's label and the heading level to determine the parent item for the new item. A level one heading is added to the root of the tree view control, a level two heading is added as a child item of the previous level one item, and so on. The function assigns an image to an item based on whether it has any child items. If an item has child items, it gets an image representing a closed folder. Otherwise, it gets an image representing a document. An item uses the same image for both the selected and nonselected states.


<PRE>
// InitTreeViewItems - extracts headings from the specified file and 
// passes them to a function that adds them to a tree view control. 
// Returns TRUE if successful, or FALSE otherwise. 
// hwndTV - handle to the tree view control. 
// lpszFileName - name of file with headings.
 
BOOL InitTreeViewItems(HWND hwndTV, LPSTR lpszFileName) 
{ 
    HANDLE hf;            // handle to file 
    char szItemText[128]; // label text of tree view item 
    int nLevel;           // heading level 
 
    // Open the file to parse. 
    if ((hf = CreateFile(lpszFileName, GENERIC_READ, 
            FILE_SHARE_READ, (LPSECURITY_ATTRIBUTES) NULL, 
            OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 
            (HANDLE) NULL)) == (HANDLE) INVALID_HANDLE_VALUE) 
        return FALSE; 
    
    // Call private function to parse the file looking for headings.
    while ( GetNextHeadingAndLevelFromFile(hf, szItemText, &amp;nLevel) )
         // Add the item to the tree view control. 
         AddItemToTree(hwndTV, szItemText, nLevel); 
 
    return TRUE; 
} 
 
// AddItemToTree - adds items to a tree view control. 
// Returns the handle to the newly added item. 
// hwndTV - handle to the tree view control. 
// lpszItem - text of the item to add. 
// nLevel - level at which to add the item. 

HTREEITEM AddItemToTree(HWND hwndTV, LPSTR lpszItem, int nLevel)
{ 
    TVITEM tvi; 
    TVINSERTSTRUCT tvins; 
    static HTREEITEM hPrev = (HTREEITEM) TVI_FIRST; 
    static HTREEITEM hPrevRootItem = NULL; 
    static HTREEITEM hPrevLev2Item = NULL; 
    HTREEITEM hti; 
 
    tvi.mask = TVIF_TEXT | TVIF_IMAGE 
        | TVIF_SELECTEDIMAGE | TVIF_PARAM; 
 
    // Set the text of the item. 
    tvi.pszText = lpszItem; 
    tvi.cchTextMax = lstrlen(lpszItem); 
 
    // Assume the item is not a parent item, so give it a 
    // document image. 
    tvi.iImage = g_nDocument; 
    tvi.iSelectedImage = g_nDocument; 
 
    // Save the heading level in the item's application-defined 
    // data area. 
    tvi.lParam = (LPARAM) nLevel; 
 
    tvins.item = tvi; 
    tvins.hInsertAfter = hPrev; 
 
    // Set the parent item based on the specified level. 
    if (nLevel == 1) 
        tvins.hParent = TVI_ROOT; 
    else if (nLevel == 2) 
        tvins.hParent = hPrevRootItem; 
    else 
        tvins.hParent = hPrevLev2Item; 
 
    // Add the item to the tree view control. 
    hPrev = (HTREEITEM) SendMessage(hwndTV, TVM_INSERTITEM, 0, 
         (LPARAM) (LPTVINSERTSTRUCT) &amp;tvins); 
 
    // Save the handle to the item. 
    if (nLevel == 1) 
        hPrevRootItem = hPrev; 
    else if (nLevel == 2) 
        hPrevLev2Item = hPrev; 
 
    // The new item is a child item. Give the parent item a 
    // closed folder bitmap to indicate it now has child items. 
    if (nLevel &gt; 1) { 
        hti = TreeView_GetParent(hwndTV, hPrev); 
        tvi.mask = TVIF_IMAGE | TVIF_SELECTEDIMAGE; 
        tvi.hItem = hti; 
        tvi.iImage = g_nClosed; 
        tvi.iSelectedImage = g_nClosed; 
        TreeView_SetItem(hwndTV, &amp;tvi); 
    } 
 
    return hPrev; 
} 
 
</PRE>
<H3><A NAME="tv_dragging_items">Dragging a Tree View Item</A></H3>
<P>Dragging a tree view item typically involves processing the <A HREF="notifications/TVN_BEGINDRAG.htm#TVN_BEGINDRAG">TVN_BEGINDRAG</A> (or <A HREF="notifications/TVN_BEGINRDRAG.htm#TVN_BEGINRDRAG">TVN_BEGINRDRAG</A>) notification message, the
<object id="hhal_38" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_38.Click()>WM_MOUSEMOVE</A> message, and the
<object id="hhal_39" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_39.Click()>WM_LBUTTONUP</A> (or
<object id="hhal_40" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_40.Click()>WM_RBUTTONUP</A>) message. It also involves using the image list functions to draw the item as it is being dragged. 

<P>The remainder of this section provides an example that demonstrates how to drag a tree view item. The example consists of three functions. The first function begins the drag operation, the second drags the image, and the third ends the drag operation.

<H4><A NAME="Beginning_the_tree_v">Beginning the tree view drag operation</A></H4>
<P>A tree view control sends the parent window a <A HREF="notifications/TVN_BEGINDRAG.htm#TVN_BEGINDRAG">TVN_BEGINDRAG</A> (or <A HREF="notifications/TVN_BEGINRDRAG.htm#TVN_BEGINRDRAG">TVN_BEGINRDRAG</A>) notification message whenever the user starts to drag an item. The parent window receives the notification in the form of a <A HREF="../common/messages/WM_NOTIFY.htm#WM_NOTIFY">WM_NOTIFY</A> message whose <I>lParam</I> parameter is the address of an <A HREF="structures/NMTREEVIEW.htm#NM_TREEVIEW">NMTREEVIEW</A> structure. The members of this structure include the screen coordinates of the mouse cursor and a <A HREF="structures/TVITEM.htm#TV_ITEM">TVITEM</A> structure that contains information about the item to be dragged.

<P>The following example shows how to process the <A HREF="../common/messages/WM_NOTIFY.htm#WM_NOTIFY">WM_NOTIFY</A> message to obtain <A HREF="notifications/TVN_BEGINDRAG.htm#TVN_BEGINDRAG">TVN_BEGINDRAG</A>.

<PRE>
case WM_NOTIFY: 
     switch (((LPNMHDR) lParam)-&gt;code) {
	    case TVN_BEGINDRAG:
		 Main_OnBeginDrag(   // application-defined function 
                         hwndTV, (LPNMTREEVIEW) lParam); 
             break; 

		// Handle other notifications here. 

	   }
	 break; 

</PRE>
<P>Beginning the drag operation involves using the <A HREF="../imagelist/functions/ImageList_BeginDrag.htm#ImageList_BeginDrag">ImageList_BeginDrag</A> function. The function's parameters include the handle to the image list containing the image to use during the drag operation and the index of the image. You can either provide your own image list and image, or you can have the tree view control create them for you by using the <A HREF="messages/TVM_CREATEDRAGIMAGE.htm#TVM_CREATEDRAGIMAGE">TVM_CREATEDRAGIMAGE</A> message. 

<P>Because the drag image replaces the mouse cursor for the duration of the drag operation, <A HREF="../imagelist/functions/ImageList_BeginDrag.htm#ImageList_BeginDrag">ImageList_BeginDrag</A> requires you to specify a hot spot within the image. The coordinates of the hot spot are relative to the upper left corner of the image. <B>ImageList_BeginDrag</B> also requires you to specify the initial location of the drag image. An application typically sets the initial location so that the hot spot of the drag image corresponds to that of the mouse cursor at the time the user began the drag operation.

<P>The following function demonstrates how to begin dragging a tree view item. It uses the drag image provided by the tree view control and obtains the bounding rectangle of the item to determine the appropriate point for the hot spot. (The dimensions of the bounding rectangle are the same as those of the image.) Note that the bounding rectangle does not account for the indentation of child items. For this reason, the function adds the amount of indentation to the x-coordinate of the hot spot. 

<P>The function captures mouse input, causing mouse messages to be sent to the parent window. The parent window needs the subsequent
<object id="hhal_41" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_41.Click()>WM_MOUSEMOVE</A> messages to determine where to drag the image and the
<object id="hhal_42" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_42.Click()>WM_LBUTTONUP</A> message to determine when to end the drag operation.


<PRE>
// Main_OnBeginDrag - begins dragging an item in a tree view control. 
// hwndTV - handle to the image list. 
// lpnmtv - address of information about the item being dragged. 

void Main_OnBeginDrag(HWND hwndTV, LPNMTREEVIEW lpnmtv) 
{ 
    HIMAGELIST himl;    // handle to image list 
    RECT rcItem;        // bounding rectangle of item 
    DWORD dwLevel;      // heading level of item 
    DWORD dwIndent;     // amount that child items are indented 
 
    // Tell the tree view control to create an image to use 
    // for dragging. 
    himl = TreeView_CreateDragImage(hwndTV, lpnmtv-&gt;itemNew.hItem); 
 
    // Get the bounding rectangle of the item being dragged. 
    TreeView_GetItemRect(hwndTV, lpnmtv-&gt;itemNew.hItem, &amp;rcItem, TRUE); 
 
    // Get the heading level and the amount that the child items are 
    // indented. 
    dwLevel = lpnmtv-&gt;itemNew.lParam; 
    dwIndent = (DWORD) SendMessage(hwndTV, TVM_GETINDENT, 0, 0); 
 
    // Start the drag operation. 
    ImageList_BeginDrag(himl, 0, 0, 0); 
 
    // Hide the mouse cursor, and direct mouse input to the 
    // parent window. 
    ShowCursor(FALSE); 
    SetCapture(GetParent(hwndTV)); 
    g_fDragging = TRUE; 
    return; 
} 
 

</PRE>
<H4><A NAME="Dragging_the_tree_vi">Dragging the tree view item</A></H4>
<P>You drag a tree view item by calling the <A HREF="../imagelist/functions/ImageList_DragMove.htm#ImageList_DragMove">ImageList_DragMove</A> function when the parent window receives a
<object id="hhal_43" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_43.Click()>WM_MOUSEMOVE</A> message, as the following example shows. The example also demonstrates how to perform hit testing during the drag operation to determine whether to highlight other items in the tree view as targets of a drag-and-drop operation.


<PRE>
// Main_OnMouseMove - drags an item in a tree view control, 
// highlighting the item that is the target. 
// hwndParent - handle to the parent window. 
// hwndTV - handle to the tree view control.
// xCur and yCur - x- and y-coordinates of the mouse cursor. 

void Main_OnMouseMove(HWND hwndParent, HWND hwndTV, LONG xCur, LONG yCur) 
{ 
    HTREEITEM htiTarget;  // handle to target item 
    TVHITTESTINFO tvht;  // hit test information 
 
    if (g_fDragging) { 
 
        // Drag the item to the current position of the mouse cursor. 
        ImageList_DragMove(xCur, yCur); 
 
        // Find out if the cursor is on the item. If it is, highlight 
        // the item as a drop target. 
        tvht.pt.x = xCur; 
        tvht.pt.y = yCur; 
        if ((htiTarget = TreeView_HitTest(hwndTV, &amp;tvht)) != NULL) { 
            TreeView_SelectDropTarget(hwndTV, htiTarget); 
        } 
    } 
    return; 
} 
 

</PRE>
<H4><A NAME="Ending_the_tree_view">Ending the tree view drag operation</A></H4>
<P>The following example shows how to end a drag operation. The <A HREF="../imagelist/functions/ImageList_EndDrag.htm#ImageList_EndDrag">ImageList_EndDrag</A> function is called when the parent window receives a
<object id="hhal_44" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_44.Click()>WM_LBUTTONUP</A> message.

<PRE>
// Main_OnLButtonUp - stops dragging a tree view item, releases the 
// mouse capture, and shows the mouse cursor.
//
// Global variable g_fDragging - indicates whether
// a drag operation is underway. 

void Main_OnLButtonUp(void) 
{ 
    if (g_fDragging) { 
        ImageList_EndDrag(); 
        ReleaseCapture(); 
        ShowCursor(TRUE); 
        g_fDragging = FALSE; 
    } 
    return; 
} 
 

</PRE>
<H4><A NAME="tv_state_image_indexes">Working with state image indexes</A></H4>
<P>There is often confusion about how to set and retrieve the state image index in a tree view control. The following examples demonstrate the proper method for setting and retrieving the state image index. The examples assume that there are only two state image indexes in the tree view control, unchecked and checked. If your application contains more than two, these functions will need to be modified to handle that case. 

<P>The following example function illustrates how to set an item's check state.
<PRE>
BOOL TreeView_SetCheckState(HWND hwndTreeView, HTREEITEM hItem, BOOL fCheck)
{
    TVITEM tvItem;

    tvItem.mask = TVIF_HANDLE | TVIF_STATE;
    tvItem.hItem = hItem;
    tvItem.stateMask = TVIS_STATEIMAGEMASK;

    /*
    Since state images are one-based, 1 in this macro turns the check off, and 
    2 turns it on.
    */
    tvItem.state = INDEXTOSTATEIMAGEMASK((fCheck ? 2 : 1));

    return TreeView_SetItem(hwndTreeView, &amp;tvItem);
}

</PRE>
<P>The following example function illustrates how to retrieve an item's check state.
<PRE>
BOOL TreeView_GetCheckState(HWND hwndTreeView, HTREEITEM hItem)
{
    TVITEM tvItem;

    // Prepare to receive the desired information.
    tvItem.mask = TVIF_HANDLE | TVIF_STATE;
    tvItem.hItem = hItem;
    tvItem.stateMask = TVIS_STATEIMAGEMASK;

    // Request the information.
    TreeView_GetItem(hwndTreeView, &amp;tvItem);

    // Return zero if it's not checked, or nonzero otherwise.
    return ((BOOL)(tvItem.state &gt;&gt; 12) -1);
}
</PRE>
<H2><A NAME="Tree_View_Control_Up">Tree View Control Updates in Internet Explorer</A></H2>
<P>Tree view controls in Microsoft&#174; Internet Explorer support the following new features.

<DL>
<DT><B>Tooltips</B>
 </DT><DD>Tree view controls now automatically display tooltips when an item is not entirely within the view area.
</DD><DT><B>New Item State</B>
 </DT><DD>Tree view controls now support a new item state for parent items, TVIS_EXPANDPARTIAL. When a parent item is set to this state, the child items are displayed and the parent's plus sign remains visible. The <A HREF="messages/TVM_EXPAND.htm#TVM_EXPAND">TVM_EXPAND</A> message and the <A HREF="macros/TreeView_Expand.htm#TreeView_Expand">TreeView_Expand</A> macro have been updated to support this feature.
</DD><DT><B>Single-Click Expansion</B>
 </DT><DD>The <A HREF="Styles.htm#TVS_SINGLEEXPAND">TVS_SINGLEEXPAND</A> style causes a tree view item to be expanded when it becomes selected and to be closed when it becomes unselected.
</DD><DT><B>Adjustable Maximum Scroll Time</B>
 </DT><DD>The <A HREF="messages/TVM_SETSCROLLTIME.htm#TVM_SETSCROLLTIME">TVM_SETSCROLLTIME</A> message allows you to set the maximum amount of time that a scroll operation can take. The <A HREF="messages/TVM_GETSCROLLTIME.htm#TVM_GETSCROLLTIME">TVM_GETSCROLLTIME</A> message allows you to retrieve the maximum scroll time.
</DD></DL>

<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
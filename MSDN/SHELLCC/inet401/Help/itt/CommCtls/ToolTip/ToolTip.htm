<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tooltip Controls</TITLE>

<META NAME=MS-HKWD CONTENT="Tooltip Controls">
<META NAME="Keywords" CONTENT="Internet Tools & Technologies, Common controls">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT, Mac">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="ch_tooltips"></A>
<!--NAV_LINKS_START-->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Tooltip Controls"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../../art/headbard.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Tooltip Controls"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR><TR><TD><PRE><IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="../CommCtls.htm#book_cc">Topic Contents</A></PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="../toolbar/structures/TBSAVEPARAMS.htm">TBSAVEPARAMS</A>
<IMG SRC="../../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="RefList.htm">Tooltip Control Reference</A></PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>Tooltip Controls</H1>
<BR CLEAR=ALL>
<P>A <I>tooltip control</I> is a small pop-up window that displays a single line of text that describes the purpose of a tool in an application. A <I>tool</I> is either a window, such as a child window or control, or an application-defined rectangular area within a window's client area. 
<P><A CLASS=tctop HREF="ToolTip.htm#About_Tooltip_Contro"><IMG SRC="../../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">About Tooltip Controls</A><BR>
<P><A CLASS=tctop HREF="ToolTip.htm#Using_Tooltip_Contro"><IMG SRC="../../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Using Tooltip Controls</A><BR>
<P><A CLASS=tctop HREF="ToolTip.htm#tt_updates"><IMG SRC="../../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Tooltip Control Update in Internet Explorer</A><BR>
<P><A CLASS=tctop HREF="RefList.htm#tooltip_ToolTip"><IMG SRC="../../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Tooltip Control Reference</A><BR>
<!--************************************************************--><H2><A NAME="About_Tooltip_Contro">About Tooltip Controls</A></H2>
<P>A tooltip control is hidden most of the time, appearing only when the user puts the cursor on a tool and leaves it there for approximately one-half second. The tooltip control appears near the cursor and disappears when the user clicks a mouse button or moves the cursor off of the tool. A single tooltip control can support any number of tools. The following illustration shows a tooltip control associated with a button in a toolbar control.

<P><IMG SRC="../../../art/tt_scrn.gif" WIDTH="392" HEIGHT="163" ALT="Tooltip control for a button in a toolbar control." >

<H3><A NAME="Tooltip_Creation">Tooltip Creation</A></H3>
<P>You create a tooltip control by using the
<object id="hhal_3" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_3.Click()>CreateWindowEx</A> function, specifying the TOOLTIPS_CLASS window class. The class is registered when the common control dynamic-link library (DLL) is loaded. To ensure that this DLL is loaded, include the <A HREF="../common/functions/InitCommonControls.htm#InitCommonControls">InitCommonControls</A> function in your application. 

<P>The window procedure for a tooltip control automatically sets the size, position, and visibility of the tooltip control. The height of the tooltip window is based on the height of the font currently selected into the device context for the tooltip control. The width varies based on the length of the string currently in the tooltip window. 

<H3><A NAME="Activation">Activation</A></H3>
<P>A tooltip control itself can be either active or inactive. When it is active, the tooltip control appears when the cursor is on a tool. When it is inactive, the tooltip control does not appear, even if the cursor is on a tool. The <A HREF="messages/TTM_ACTIVATE.htm#TTM_ACTIVATE">TTM_ACTIVATE</A> message activates and deactivates a tooltip control.

<H3><A NAME="Types_of_Tools">Types of Tools</A></H3>
<P>A tooltip control can support any number of tools. To support a particular tool, you must register the tool with the tooltip control by sending the control the <A HREF="messages/TTM_ADDTOOL.htm#TTM_ADDTOOL">TTM_ADDTOOL</A> message. The message includes the address of a <A HREF="structures/TOOLINFO.htm#TOOLINFO">TOOLINFO</A> structure, which provides information the tooltip control needs to display text for the tool. The <B>cbSize</B> member is required and must specify the size of the structure.

<P>A tooltip control supports tools implemented as windows (such as child windows or control windows) and as rectangular areas within a window's client area. When you add a tool implemented as a rectangular area, the <B>hwnd</B> member of <A HREF="structures/TOOLINFO.htm#TOOLINFO">TOOLINFO</A> must specify the handle to the window that contains the area, and the <B>rect</B> member must specify the client coordinates of the area's bounding rectangle. In addition, the <B>uId</B> member must specify the application-defined identifier for the tool.

<P>When you add a tool implemented as a window, the <B>uId</B> member of <A HREF="structures/TOOLINFO.htm#TOOLINFO">TOOLINFO</A> must contain the window handle to the tool. Also, the <B>uFlags</B> member must specify the TTF_IDISHWND value, which tells the tooltip control to interpret the <B>uId</B> member as a window handle.

<H3><A NAME="Tool_Text">Tool Text</A></H3>
<P>When you add a tool to a tooltip control, the <B>lpszText</B> member of the <A HREF="structures/TOOLINFO.htm#TOOLINFO">TOOLINFO</A> structure must specify the address of the string to display for the tool. You can change the text any time after adding the tool by using the <A HREF="messages/TTM_UPDATETIPTEXT.htm#TTM_UPDATETIPTEXT">TTM_UPDATETIPTEXT</A> message. 

<P>If the high-order word of <B>lpszText</B> is zero, the low-order word must be the identifier of a string resource. When the tooltip control needs the text, the system loads the specified string resource from the application instance identified by the <B>hinst</B> member of <A HREF="structures/TOOLINFO.htm#TOOLINFO">TOOLINFO</A>.

<P>If you specify the LPSTR_TEXTCALLBACK value in the <B>lpszText</B> member, the tooltip control notifies the window specified in the <B>hwnd</B> member of <A HREF="structures/TOOLINFO.htm#TOOLINFO">TOOLINFO</A> whenever the tooltip control needs to display text for the tool. The tooltip control sends the <A HREF="notifications/TTN_NEEDTEXT.htm#TTN_NEEDTEXT">TTN_NEEDTEXT</A> notification message to the window. The message includes the address of a <A HREF="structures/TOOLTIPTEXT.htm#TOOLTIPTEXT">TOOLTIPTEXT</A> structure, which contains the window handle as well as the application-defined identifier for the tool. The window examines the structure to determine the tool for which text is needed, and it fills the appropriate structure members with information that the tooltip control needs to display the string. 

<P>Many applications create toolbars containing tools that correspond to menu commands. For such tools, it is convenient for the tooltip control to display the same text as the corresponding menu item. The system automatically strips the ampersand (&amp;) accelerator characters from all strings passed to a tooltip control, unless the control has the <A HREF="Styles.htm#TTS_NOPREFIX">TTS_NOPREFIX</A> style.

<P>To retrieve the text for a tool, use the <A HREF="messages/TTM_GETTEXT.htm#TTM_GETTEXT">TTM_GETTEXT</A> message. 

<H3><A NAME="Relaying_Mouse_Messa">Relaying Mouse Messages to the Tooltip</A></H3>
<P>A tooltip control needs to receive mouse messages to determine when to display the tooltip window. Because Microsoft&#174; Windows&#174; sends mouse messages only to the window that contains the cursor, you must use the <A HREF="messages/TTM_RELAYEVENT.htm#TTM_RELAYEVENT">TTM_RELAYEVENT</A> message to relay mouse messages to the tooltip control. 

<P>If a tool is implemented as a rectangular area in an application-defined window, the window procedure receives mouse messages and can relay them to the tooltip control. However, if a tool is implemented as a system-defined window, the mouse messages are sent to the window and are not readily available to the application. You must use a message hook to access and relay the mouse messages, or you must subclass the window. 

<P>When a tooltip control receives a relayed
<object id="hhal_4" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_4.Click()>WM_MOUSEMOVE</A> message, it determines whether the cursor is in the bounding rectangle of a tool. If the cursor is there, the tooltip control sets a timer. At the end of the time-out duration, the tooltip control checks the position of the cursor to see whether it has moved. If it hasn't, the tooltip control retrieves the text for the tool, copies the text into the tooltip window, and shows the window. The tooltip control continues to show the window until it receives a relayed button-up or button-down message or until a relayed <B>WM_MOUSEMOVE</B> message indicates that the cursor has moved outside the bounding rectangle of the tool. 

<P>A tooltip control actually has three time-out durations associated with it. The <I>initial duration</I> is the length of time that the cursor must remain stationary within the bounding rectangle of a tool before the tooltip window is displayed. The <I>reshow duration</I> is the length of the delay before subsequent tooltip windows are displayed when the cursor moves from one tool to another. The <I>pop-up duration</I> is the length of time that the tooltip window remains displayed before it is hidden. That is, if the cursor remains stationary within the bounding rectangle after the tooltip window is displayed, the tooltip window is automatically hidden at the end of the pop-up duration. You can adjust all of the time-out durations by using the <A HREF="messages/TTM_SETDELAYTIME.htm#TTM_SETDELAYTIME">TTM_SETDELAYTIME</A> message. 

<P>If an application includes a tool implemented as a rectangular area and the size or position of the control changes, it can use the <A HREF="messages/TTM_NEWTOOLRECT.htm#TTM_NEWTOOLRECT">TTM_NEWTOOLRECT</A> message to report the change to the tooltip control. An application does not need to report size and position changes for a tool implemented as a window. This is because the tooltip control uses the window handle of a tool to determine if the cursor is on the tool, not the tool's bounding rectangle. 

<P>When it is about to be displayed, a tooltip control sends the <A HREF="notifications/TTN_SHOW.htm#TTN_SHOW">TTN_SHOW</A> notification to the owner window. A tooltip control sends the <A HREF="notifications/TTN_POP.htm#TTN_POP">TTN_POP</A> notification when it is about to be hidden. Each notification is sent in the context of a <A HREF="../common/messages/WM_NOTIFY.htm#WM_NOTIFY">WM_NOTIFY</A> message.

<H3><A NAME="Tooltip_Hit_Testing">Tooltip Hit Testing</A></H3>
<P>The <A HREF="messages/TTM_HITTEST.htm#TTM_HITTEST">TTM_HITTEST</A> message allows you to retrieve information that a tooltip control maintains about the tool occupying a particular point. The message includes a <A HREF="structures/TTHITTESTINFO.htm#TTHITTESTINFO">TTHITTESTINFO</A> structure that contains a window handle, the coordinates of a point, and the address of a <A HREF="structures/TOOLINFO.htm#TOOLINFO">TOOLINFO</A> structure. The tooltip control determines whether a tool occupies the point and, if it does, fills <B>TOOLINFO</B> with information about the tool. 

<H3><A NAME="Miscellaneous_Messag">Miscellaneous Messages</A></H3>
<P>The <A HREF="messages/TTM_GETCURRENTTOOL.htm#TTM_GETCURRENTTOOL">TTM_GETCURRENTTOOL</A> and <A HREF="messages/TTM_GETTOOLINFO.htm#TTM_GETTOOLINFO">TTM_GETTOOLINFO</A> messages fill a <A HREF="structures/TOOLINFO.htm#TOOLINFO">TOOLINFO</A> structure with information about a tool that has been registered with a tooltip control. The <A HREF="messages/TTM_SETTOOLINFO.htm#TTM_SETTOOLINFO">TTM_SETTOOLINFO</A> message allows you to change the information that a tooltip control maintains for a particular tool. The <A HREF="messages/TTM_DELTOOL.htm#TTM_DELTOOL">TTM_DELTOOL</A> message deletes a tool from a tooltip control.

<H3><A NAME="Default_Tooltip_Cont">Default Tooltip Control Message Processing</A></H3>
<P>This section describes the messages handled by the window procedure for the TOOLTIPS_CLASS window class.

<TABLE>
<TR><TD><B>Message
 </B></TD><TD><B>Default processing
</B></TD></TR><TR><TD>WM_CREATE
 </TD><TD>Ensures that the tooltip control has the WS_EX_TOOLWINDOW and WS_POPUP window styles. It also allocates memory and initializes internal variables. </TD></TR><TR><TD>WM_DESTROY
 </TD><TD>Frees resources allocated for the tooltip control.</TD></TR><TR><TD>WM_GETFONT
 </TD><TD>Returns the handle of the font that the tooltip control will use to draw text.</TD></TR><TR><TD>WM_MOUSEMOVE
 </TD><TD>Hides the tooltip window.</TD></TR><TR><TD>WM_PAINT
 </TD><TD>Draws the tooltip window. </TD></TR><TR><TD>WM_SETFONT
 </TD><TD>Sets the handle of the font that the tooltip control will use to draw text.</TD></TR><TR><TD>WM_TIMER
 </TD><TD>Hides the tooltip window if the tool has changed position or if the cursor has moved outside the tool. Otherwise, it shows the tooltip window. </TD></TR><TR><TD>WM_WININICHANGE
 </TD><TD>Resets internal variables that are based on system metrics. </TD></TR></TABLE>
<H2><A NAME="Using_Tooltip_Contro">Using Tooltip Controls</A></H2>
<P>This section provides examples that demonstrate how to create a tooltip control and use a tooltip control with a dialog box.

<H3><A NAME="Creating_a_Tooltip_C">Creating a Tooltip Control</A></H3>
<P>The following example demonstrates how to create a tooltip control and add several tools to it. The example creates a grid of rectangles in the client area of a window and then uses the <A HREF="messages/TTM_ADDTOOL.htm#TTM_ADDTOOL">TTM_ADDTOOL</A> message to add each rectangle to the tooltip control. Note that the window procedure for the owner of the tooltip control must handle mouse messages and pass them on to the tooltip control by using the <A HREF="messages/TTM_RELAYEVENT.htm#TTM_RELAYEVENT">TTM_RELAYEVENT</A> message.

<PRE>&#009;// DoCreateTooltip - creates a tooltip control and adds some tools 
&#009;//     to it. 
&#009;// Returns the handle of the tooltip control if successful, or NULL
&#009;//     otherwise. 
&#009;// hwndOwner - handle of the owner window. 
&#009;// 
&#009;// Global variable 
&#009;//     g_hinst - handle of the application instance. 
&#009;extern HINSTANCE g_hinst; 
 
&#009;HWND DoCreateTooltip(HWND hwndOwner) 
&#009;{ 
    HWND hwndTT;    // handle of tooltip 
    int row, col;   // rows and columns 
    TOOLINFO ti;    // tool information 
    int id = 0;     // offset to string identifiers 
    static char *szTips[NUM_TIPS] =   // tip text 
    { 
    "Cut", "Copy", "Paste", "Undo", "Open", "Save" 
    }; 
 
    // Ensure that the common control DLL is loaded, and create 
    // a tooltip control. 
    InitCommonControls(); 
 
    hwndTT = CreateWindow(TOOLTIPS_CLASS, (LPSTR) NULL, TTS_ALWAYSTIP, 
        CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, 
        NULL, (HMENU) NULL, g_hinst, NULL); 
 
    if (hwndTT == (HWND) NULL) 
        return (HWND) NULL; 
 
    // Divide the client area into a grid of rectangles, and add each 
    // rectangle to the tooltip. 
    for (row = 0; row &lt; MAX_ROWS ; row++ ) 
        for (col = 0; col &lt; MAX_COLS; col++) { 
            ti.cbSize = sizeof(TOOLINFO); 
            ti.uFlags = 0; 
            ti.hwnd = hwndOwner; 
            ti.hinst = g_hinst; 
            ti.uId = (UINT) id; 
            ti.lpszText = (LPSTR) szTips[id++]; 
            ti.rect.left = col * CX_COLUMN; 
            ti.rect.top = row * CY_ROW; 
            ti.rect.right = ti.rect.left + CX_COLUMN; 
            ti.rect.bottom = ti.rect.top + CY_ROW; 
 
            if (!SendMessage(hwndTT, TTM_ADDTOOL, 0, 
                    (LPARAM) (LPTOOLINFO) &amp;ti)) 
                return NULL; 
        } 
 
    return hwndTT; 
&#009;} 
 
</PRE>
<H3><A NAME="Using_a_Tooltip_Cont">Using a Tooltip Control with a Dialog Box</A></H3>
<P>The following example includes a set of application-defined functions that implement a tooltip control for a dialog box. The DoCreateDialogTooltip function creates a tooltip control and uses the EnumChildWindows function to enumerate the controls in the dialog box. The enumeration procedure, EnumChildProc, registers each control with the tooltip control. The procedure specifies the dialog box as the parent window of each tooltip control and includes the LPSTR_TEXTCALLBACK value for each tooltip control. As a result, the dialog box receives a <A HREF="../common/messages/WM_NOTIFY.htm#WM_NOTIFY">WM_NOTIFY</A> message that contains the <A HREF="notifications/TTN_NEEDTEXT.htm#TTN_NEEDTEXT">TTN_NEEDTEXT</A> notification message whenever the tooltip control needs the text for a control. The dialog box procedure calls the OnWMNotify function to process the <B>TTN_NEEDTEXT</B> notifications. OnWMNotify provides the appropriate string based on the identifier of the tooltip control. 

<P>The tooltip control needs to receive mouse messages that the system sends to the control windows. To access the messages, the DoCreateDialogTooltip function installs a hook procedure of the WH_GETMESSAGE type. The hook procedure, GetMsgProc, monitors the message stream for mouse messages intended for one of the control windows and relays the messages to the tooltip control. 

<PRE>&#009;// DoCreateDialogTooltip - creates a tooltip control for a dialog box, 
&#009;//     enumerates the child control windows, and installs a hook 
&#009;//     procedure to monitor the message stream for mouse messages posted 
&#009;//     to the control windows. 
&#009;// Returns TRUE if successful, or FALSE otherwise. 
&#009;// 
&#009;// Global variables 
&#009;// g_hinst - handle to the application instance. 
&#009;// g_hwndTT - handle to the tooltip control. 
&#009;// g_hwndDlg - handle to the dialog box. 
&#009;// g_hhk - handle to the hook procedure. 
 
&#009;BOOL DoCreateDialogTooltip(void) 
&#009;{ 
 
    // Ensure that the common control DLL is loaded, and create 
    // a tooltip control. 
    InitCommonControls(); 
    g_hwndTT = CreateWindowEx(0, TOOLTIPS_CLASS, (LPSTR) NULL, 
        TTS_ALWAYSTIP, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, 
        CW_USEDEFAULT, g_hwndDlg, (HMENU) NULL, g_hinst, NULL); 
 
    if (g_hwndTT == NULL) 
        return FALSE; 
 
    // Enumerate the child windows to register them with the tooltip
    // control. 
    if (!EnumChildWindows(g_hwndDlg, (WNDENUMPROC) EnumChildProc, 0)) 
        return FALSE; 
 
    // Install a hook procedure to monitor the message stream for mouse 
    // messages intended for the controls in the dialog box. 
    g_hhk = SetWindowsHookEx(WH_GETMESSAGE, GetMsgProc, 
        (HINSTANCE) NULL, GetCurrentThreadId()); 
 
    if (g_hhk == (HHOOK) NULL) 
        return FALSE; 
 
    return TRUE; 
&#009;} 
 
&#009;// EmumChildProc - registers control windows with a tooltip control by
&#009;//     using the TTM_ADDTOOL message to pass the address of a 
&#009;//     TOOLINFO structure. 
&#009;// Returns TRUE if successful, or FALSE otherwise. 
&#009;// hwndCtrl - handle of a control window. 
&#009;// lParam - application-defined value (not used). 
&#009;BOOL EnumChildProc(HWND hwndCtrl, LPARAM lParam) 
&#009;{ 
    TOOLINFO ti; 
    char szClass[64]; 
 
    // Skip static controls. 
    GetClassName(hwndCtrl, szClass, sizeof(szClass)); 
    if (lstrcmpi(szClass, "STATIC") { 
        ti.cbSize = sizeof(TOOLINFO); 
        ti.uFlags = TTF_IDISHWND; 
        ti.hwnd = g_hwndDlg; 
        ti.uId = (UINT) hwndCtrl; 
        ti.hinst = 0; 
        ti.lpszText = LPSTR_TEXTCALLBACK; 
        SendMessage(g_hwndTT, TTM_ADDTOOL, 0, 
            (LPARAM) (LPTOOLINFO) &amp;ti); 
    } 
    return TRUE; 
&#009;} 
 
&#009;// GetMsgProc - monitors the message stream for mouse messages intended 
&#009;//     for a control window in the dialog box. 
&#009;// Returns a message-dependent value. 
&#009;// nCode - hook code. 
&#009;// wParam - message flag (not used). 
&#009;// lParam - address of an MSG structure. 
&#009;LRESULT CALLBACK GetMsgProc(int nCode, WPARAM wParam, LPARAM lParam) 
&#009;{ 
    MSG *lpmsg; 
 
    lpmsg = (MSG *) lParam; 
    if (nCode &lt; 0 || !(IsChild(g_hwndDlg, lpmsg-&gt;hwnd))) 
        return (CallNextHookEx(g_hhk, nCode, wParam, lParam)); 
 
    switch (lpmsg-&gt;message) { 
        case WM_MOUSEMOVE: 
        case WM_LBUTTONDOWN: 
        case WM_LBUTTONUP: 
        case WM_RBUTTONDOWN: 
        case WM_RBUTTONUP: 
            if (g_hwndTT != NULL) { 
                MSG msg; 
 
                msg.lParam = lpmsg-&gt;lParam; 
                msg.wParam = lpmsg-&gt;wParam; 
                msg.message = lpmsg-&gt;message; 
                msg.hwnd = hwnd; 
                SendMessage(g_hwndTT, TTM_RELAYEVENT, 0, 
                    (LPARAM) (LPMSG) &amp;msg); 
            } 
            break; 
        default: 
            break; 
    } 
    return (CallNextHookEx(g_hhk, nCode, wParam, lParam)); 
&#009;} 
 
&#009;// OnWMNotify - provides the tooltip control with the appropriate text 
&#009;//     to display for a control window. This function is called by 
&#009;//     the dialog box procedure in response to a WM_NOTIFY message. 
&#009;// lParam - second message parameter of the WM_NOTIFY message. 
&#009;VOID OnWMNotify(LPARAM lParam) 
&#009;{ 
    LPTOOLTIPTEXT lpttt; 
    int idCtrl; 
 
    if ((((LPNMHDR) lParam)-&gt;code) == TTN_NEEDTEXT) { 
        idCtrl = GetDlgCtrlID((HWND) ((LPNMHDR) lParam)-&gt;idFrom); 
        lpttt = (LPTOOLTIPTEXT) lParam; 
 
        switch (idCtrl) { 
            case ID_HORZSCROLL: 
                lpttt-&gt;lpszText = "A horizontal scroll bar."; 
                return; 
 
            case ID_CHECK: 
                lpttt-&gt;lpszText = "A check box."; 
                return; 
 
            case ID_EDIT: 
                lpttt-&gt;lpszText = "An edit control."; 
                return; 
        } 
    } 
&#009;return; 
&#009;} 
 
</PRE>
<H2><A NAME="tt_updates">Tooltip Control Update in Internet Explorer</A></H2>
<P>Tooltip controls in Microsoft&#174; Internet Explorer support a new feature called a <I>tracking tooltip</I>. 

<H3><A NAME="tt_tracking_tooltips">Tracking Tooltips</A></H3>
<P>Tooltip controls support tracking tooltips, which are tooltip windows that you can dynamically position on the screen. By rapidly updating the position, the tooltip window appears to move smoothly, or "track." This functionality can be useful if you need tooltip text to follow the position of the pointer as it moves.
<P>To create a tracking tooltip, use the <A HREF="messages/TTM_ADDTOOL.htm#TTM_ADDTOOL">TTM_ADDTOOL</A> message, including the TTF_TRACK flag in the <B>uFlags</B> member of the accompanying <A HREF="structures/TOOLINFO.htm#TOOLINFO">TOOLINFO</A> structure. 
<P>Your application must manually activate and deactivate a tracking tooltip using the <A HREF="messages/TTM_TRACKACTIVATE.htm#TTM_TRACKACTIVATE">TTM_TRACKACTIVATE</A> message. While your tooltip is active, your application must supply the location at which the tooltip window will appear by using the <A HREF="messages/TTM_TRACKPOSITION.htm#TTM_TRACKPOSITION">TTM_TRACKPOSITION</A> message. Tracking tooltip controls do not support the TTF_SUBCLASS style, so all mouse events must be forwarded from the parent to the child using <A HREF="messages/TTM_RELAYEVENT.htm#TTM_RELAYEVENT">TTM_RELAYEVENT</A> messages.
<P>The <A HREF="messages/TTM_TRACKPOSITION.htm#TTM_TRACKPOSITION">TTM_TRACKPOSITION</A> message causes the tooltip control to display the window using one of two placement styles: 
<UL><LI>Next to the corresponding tool in a position the control chooses. The location chosen is relative to the coordinates you provide using this message. In this case, the tooltip window appears to move beside the corresponding tool. This is the default behavior.
<LI>At the pixel location you specify using this message. In this case, the control does not attempt to change the tooltip window's location from the coordinates you provide. However, you must include the TTF_ABSOLUTE value in the <B>uFlags</B> member of the <A HREF="structures/TOOLINFO.htm#TOOLINFO">TOOLINFO</A> structure when creating the tool to prompt this behavior.
</UL>
<P>For more information and implementation details, see <A HREF="ToolTip.htm#tt_creating_tracking">Creating Tracking Tooltips</A> and <A HREF="ToolTip.htm#tt_supporting_tracking">Supporting Tracking Tooltips</A>.

<!-- ************************************************** -->
<H4><A NAME="tt_creating_tracking">Creating Tracking Tooltips</A></H4>
<!-- ************************************************** --><P>The following example demonstrates how to create a tooltip control and assign a tool to it. The example specifies the main window's entire client area as the tool, but you could specify distinct portions of the client area or specify a different window altogether.
<P>The example uses the <A HREF="messages/TTM_ADDTOOL.htm#TTM_ADDTOOL">TTM_ADDTOOL</A> message to add the tool to the tooltip control. Tracking tooltips do not support the TTF_SUBCLASS flag, so the control's owner must manually forward pertinent messages (like
<object id="hhal_5" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_5.Click()>WM_MOUSEMOVE</A>) by using <A HREF="messages/TTM_RELAYEVENT.htm#TTM_RELAYEVENT">TTM_RELAYEVENT</A>.
<P>Additionally, the <B>uFlags</B> member of the <A HREF="structures/TOOLINFO.htm#TOOLINFO">TOOLINFO</A> structure used in the example includes the TTF_ABSOLUTE flag. This flag causes the tooltip control to display tooltip text at the exact coordinates the application provides when it sends the <A HREF="messages/TTM_TRACKPOSITION.htm#TTM_TRACKPOSITION">TTM_TRACKPOSITION</A> message. Without the TTF_ABSOLUTE flag, the tooltip control will choose a location to display the tooltip text based on the coordinates you provide. This causes tooltip text to appear next to the corresponding tool but not necessarily at the exact coordinates the application provided.
<P>For additional information on using the <A HREF="messages/TTM_TRACKPOSITION.htm#TTM_TRACKPOSITION">TTM_TRACKPOSITION</A> message, see <A HREF="ToolTip.htm#tt_supporting_tracking">Supporting Tracking Tooltips</A>.
<PRE>HWND WINAPI CreateTT(HWND hwndOwner)
{
    INITCOMMONCONTROLSEX icex;
    HWND        hwndTT;
    TOOLINFO    ti;

    // Load the tooltips class from the DLL.
    icex.dwSize = sizeof(icex);
    icex.dwICC  = ICC_BAR_CLASSES;

    if(!InitCommonControlsEx(&amp;icex))
       return NULL;

    // Create the tooltip control.
    hwndTT = CreateWindow(TOOLTIPS_CLASS, TEXT(""),
                          WS_POPUP,
                          CW_USEDEFAULT, CW_USEDEFAULT,
                          CW_USEDEFAULT, CW_USEDEFAULT,
                          NULL, (HMENU)NULL, g_hinst,
                          NULL);

    // Prep the TOOLINFO structure to be used for a tracking tooltip.
    ti.cbSize = sizeof(TOOLINFO);
    ti.uFlags = TTF_IDISHWND | TTF_TRACK | TTF_ABSOLUTE;
    ti.hwnd   = hwndOwner;
    ti.uId    = (UINT)g_hwndMain;
    ti.hinst  = g_hinst;
    ti.lpszText  = LPSTR_TEXTCALLBACK;
    ti.rect.left = ti.rect.top = ti.rect.bottom = ti.rect.right = 0; 
    
    // Add the tool to the control, displaying an error if needed.
    if(!SendMessage(hwndTT,TTM_ADDTOOL,0,(LPARAM)&amp;ti)){
        MessageBox(hwndOwner,"Couldn't create the tooltip control.","Error",MB_OK);
        return NULL;
    }
    
    // Activate (display) the tracking tooltip.  Then, set a global
    // flag value to indicate that the tooltip is active, so other
    // functions can check to see if it's visible.
    SendMessage(hwndTT,TTM_TRACKACTIVATE,(WPARAM)TRUE,(LPARAM)&amp;ti);
    g_bIsVisible = TRUE;

    return(hwndTT);    
}
</PRE>
<!-- ************************************************** --><H4><A NAME="tt_supporting_tracking">Supporting Tracking Tooltips</A></H4>
<!-- ************************************************** --><P>The following example is a simple window process function that supports tracking tooltips. It requests the current position of the pointer using the
<object id="hhal_6" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_6.Click()>GetCursorPos</A> function and then adds 15 pixels to the x- and y-coordinates so the tooltip appears slightly below and to the right of the pointer.
<P>Note that the example relies on the value of a global variable, g_bIsVisible, to determine whether the application should send the <A HREF="messages/TTM_TRACKPOSITION.htm#TTM_TRACKPOSITION">TTM_TRACKPOSITION</A> message. For the purpose of this example, g_bIsVisible is a BOOL variable that another function sets to TRUE upon sending the <A HREF="messages/TTM_TRACKACTIVATE.htm#TTM_TRACKACTIVATE">TTM_TRACKACTIVATE</A> message to activate the tooltip. This way, if the tooltip is inactive, the additional overhead to calculate and send a message is not incurred. 
<PRE>LRESULT CALLBACK WndProc (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
{
    HDC   hdc;
    PAINTSTRUCT ps;
    MSG   mssg;
    POINT pt;

    switch(msg){
        case WM_MOUSEMOVE:
            if(g_bIsVisible){
                mssg.hwnd    = g_hwndMain;
                mssg.message = msg;
                mssg.wParam  = wParam;
                mssg.lParam  = lParam;

                GetCursorPos(&amp;pt);
                mssg.pt.x    = pt.x;
                mssg.pt.y    = pt.y;

#define X_OFFSET 15
#define Y_OFFSET X_OFFSET
                SendMessage(g_hwndTT,
                            TTM_TRACKPOSITION,0,
                            (LPARAM)MAKELPARAM(pt.x+X_OFFSET,
                            pt.y+Y_OFFSET));
            }
            break;

/*
 *
 *  Other standard window messages can be handled here.
 *
 */
    }
    return 0;
}
</PRE>

<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
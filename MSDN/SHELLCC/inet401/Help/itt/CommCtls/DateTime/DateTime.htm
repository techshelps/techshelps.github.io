<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Date and Time Picker Controls</TITLE>

<META NAME=MS-HKWD CONTENT="Date and Time Picker Controls">
<META NAME="Keywords" CONTENT="Internet Tools & Technologies, Common controls">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT, Mac">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="ch_dtp_make"></A>
<!--NAV_LINKS_START-->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Date and Time Picker Controls"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../../art/headbard.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Date and Time Picker Controls"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR><TR><TD><PRE><IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="../CommCtls.htm#book_cc">Topic Contents</A></PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="../comboex/structures/NMCOMBOBOXEX.htm">NMCOMBOBOXEX</A>
<IMG SRC="../../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="RefList.htm">Date and Time Picker Control Reference</A></PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>Date and Time Picker Controls</H1>
<BR CLEAR=ALL>
<P>A <I>date and time picker (DTP) control</I> provides a simple and intuitive interface through which to exchange date and time information with a user. For example, with a DTP control you can ask the user to enter a date and then retrieve his or her selection with ease.
<P><A CLASS=tctop HREF="DateTime.htm#About_Date_and_Time_"><IMG SRC="../../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">About Date and Time Picker Controls</A><BR>
<P><A CLASS=tctop HREF="DateTime.htm#Using_Date_and_Time_"><IMG SRC="../../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Using Date and Time Picker Controls</A><BR>
<P><A CLASS=tctop HREF="RefList.htm#datetime_DateTime"><IMG SRC="../../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Date and Time Picker Control Reference</A><BR>
<!--************************************************************--><!-- *************************************************** --><H2><A NAME="About_Date_and_Time_">About Date and Time Picker Controls</A></H2>
<P>You can create a date and time picker control by calling the
<object id="hhal_3" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_3.Click()>CreateWindowEx</A> function and specifying DATETIMEPICK_CLASS as the window class. The class is registered when the date and time picker class is loaded from the common control dynamic-link library (DLL). Register this class by calling the <A HREF="../common/functions/InitCommonControlsEx.htm#InitEx_Function">InitCommonControlsEx</A> function, while specifying the ICC_DATE_CLASSES bit flag in the accompanying <A HREF="../common/structures/INITCOMMONCONTROLSEX.htm#InitEx_Structure">INITCOMMONCONTROLSEX</A> structure.

<P><B>Note</B>  Date and time picker controls are implemented in version 4.70 and later of Comctl32.dll.
<!-- ************************************************** --><H3><A NAME="Date_and_Time_Picker">Date and Time Picker User Interface</A></H3>
<P>The client area of a date and time picker (DTP) control displays date and time information and acts as the interface through which users modify the information. The control's display consists of fields that are defined by the control's <A HREF="DateTime.htm#Format_Strings">format string</A>. Additionally, the control will display a check box when the <A HREF="Styles.htm#DTS_SHOWNONE">DTS_SHOWNONE</A> style is in use.
<P>Each field in the control displays a portion of the date and time information that the control stores internally. The user can click a field to set keyboard focus and then provide keyboard input to change the information represented by that field. The DTP control automatically updates internal information based on the user's input. The control recognizes the following as valid input.
<TABLE>
<TR><TD><B>Input Category </B></TD><TD><B>Description
</B></TD></TR><TR><TD>Arrow Keys </TD><TD>The control accepts arrow keys to navigate the fields in the control and change values. The user can press the <SMALL>LEFT ARROW</SMALL> or <SMALL>RIGHT ARROW</SMALL> keys to move through the control. If the user attempts to move past the last field in a given direction, the keyboard focus "wraps around" to the field on the opposite side of the control. The <SMALL>UP ARROW</SMALL> and <SMALL>DOWN ARROW</SMALL> keys change values in the current field incrementally.</TD></TR><TR><TD>End and Home </TD><TD>The control accepts the VK_END and VK_HOME virtual keys to change the value within the current field to its upper and lower limits, respectively.</TD></TR><TR><TD>Function Keys </TD><TD>The <SMALL>F2</SMALL> key activates edit mode. The <SMALL>F4</SMALL> key causes the control to display a drop-down month calendar control (pressing <SMALL>ALT+DOWN ARROW</SMALL> does this as well).</TD></TR><TR><TD>Numbers </TD><TD>The control accepts numeric input in two-character segments. If the value entered by the user is invalid (like setting the month to 14), the control rejects it and resets the display to the previous value.</TD></TR><TR><TD>Plus and Minus </TD><TD>The control accepts the VK_ADD and VK_SUBTRACT virtual keys from the numeric keypad to increment and decrement the value in the current field.</TD></TR></TABLE>
<P>DTP controls that do not use the <A HREF="Styles.htm#DTS_UPDOWN">DTS_UPDOWN</A> style display an arrow button. If the user clicks this button, a month calendar control drops down. The user can select a specific date by clicking an area of the calendar.


<!-- ************************************************** -->
<H3><A NAME="Date_and_Time_Picker">Date and Time Picker Control Styles</A></H3>
<P>Date and time picker (DTP) controls have several styles that determine a control's appearance and behavior. The control styles are specified when creating the control by including the desired control styles in the <B>dwStyle</B> parameter of the
<object id="hhal_4" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_4.Click()>CreateWindowEx</A> call. You can change DTP control styles after you have created the control. To retrieve or change the window style, use the
<object id="hhal_5" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_5.Click()>GetWindowLong</A> and
<object id="hhal_6" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_6.Click()>SetWindowLong</A> functions.
<P>You can set the display format of the DTP control using styles. The control defaults to the <A HREF="Styles.htm#DTS_SHORTDATEFORMAT">DTS_SHORTDATEFORMAT</A> style, which produces output like "4/19/96". The <A HREF="Styles.htm#DTS_LONGDATEFORMAT">DTS_LONGDATEFORMAT</A> style causes the control to display date information like "Friday, April 19, 1996". Using the <A HREF="Styles.htm#DTS_TIMEFORMAT">DTS_TIMEFORMAT</A> style causes the control to display the time instead of the date in a format such as "5:31:42 PM".

<!-- ************************************************** -->
<H3><A NAME="Format_Strings">Format Strings</A></H3>
<P>A date and time picker (DTP) control relies on a format string to determine how it will display fields of information. By default, a DTP control can display information in any of three preset formats. Also, you can customize a DTP control's display using custom format strings.
<P>Custom format strings provide greater flexibility for your application. In a custom format string, you can specify the order in which the control will display fields of information or indicate specific callback fields. The <A HREF="DateTime.htm#dtp_format_chars">format characters</A> that comprise the format string define the DTP control's display and field layout.

<!-- ************************************************** -->
<H4><A NAME="_win32_dtp_preset_formats"></A><A NAME="dtp_preset_formats">Preset DTP display formats</A></H4>
<P>A DTP control can display information fields in three preset formats or according to a custom format string. Although the preset formats are format strings, they are set using the following window styles.
<TABLE>
<TR><TD><B>Style </B></TD><TD><B>Description
</B></TD></TR><TR><TD><A HREF="Styles.htm#DTS_LONGDATEFORMAT">DTS_LONGDATEFORMAT</A> </TD><TD>The control displays the date in long format. The default format string for this style is defined by <B><A NAME="LOCALE_SLONGDATEFORM">LOCALE_SLONGDATEFORMAT</A></B>, which produces output like "Friday, April 19, 1996".</TD></TR><TR><TD><A HREF="Styles.htm#DTS_SHORTDATEFORMAT">DTS_SHORTDATEFORMAT</A> </TD><TD>The control displays the date in short format, the default style setting. The default format string for this style is defined by <B><A NAME="LOCALE_SSHORTDATE">LOCALE_SSHORTDATE</A></B>, which produces output like "4/19/96".</TD></TR><TR><TD><A HREF="Styles.htm#DTS_TIMEFORMAT">DTS_TIMEFORMAT</A> </TD><TD>The control displays the time. The default format string for this style is defined by <B><A NAME="LOCALE_STIMEFORMAT">LOCALE_STIMEFORMAT</A></B>, which produces output like "5:31:42 PM".</TD></TR></TABLE>
<!-- ************************************************** --><H4><A NAME="Custom_format_string">Custom format strings</A></H4>
<P>You can customize the display of a date and time picker (DTP) control using custom format strings. DTP controls support specified <A HREF="DateTime.htm#dtp_format_chars">format characters</A> that you can combine to create a format string. To assign the format string to the DTP control, use the <A HREF="messages/DTM_SETFORMAT.htm#DTM_SETFORMAT">DTM_SETFORMAT</A> message.

<P>You can add body text to the format string. For example, if you want the control to display the current date with the format "Today is: 04:22:31 Tuesday Mar 23, 1996", the format string is "'Today is: 'hh':'m':'s ddddMMMdd', 'yyy". 

<P>Note that segments of nonformat characters in the preceding example are delimited by single quotation marks. Failure to surround body text in this way will result in unpredictable display by the DTP.

<!-- ************************************************** -->
<H4><A NAME="dtp_format_chars">Format characters</A></H4>
<P>Date and time picker (DTP) controls support the following format characters.
<TABLE>
<TR><TD><B>String Fragment</B></TD><TD><B>Description
</B></TD></TR><TR><TD>"d" </TD><TD>The one- or two-digit day.</TD></TR><TR><TD>"dd" </TD><TD>The two-digit day. Single-digit day values are preceded by a zero.</TD></TR><TR><TD>"ddd" </TD><TD>The three-character weekday abbreviation.</TD></TR><TR><TD>"dddd" </TD><TD>The full weekday name.</TD></TR><TR><TD>"h" </TD><TD>The one- or two-digit hour in 12-hour format.</TD></TR><TR><TD>"hh" </TD><TD>The two-digit hour in 12-hour format. Single-digit values are preceded by a zero.</TD></TR><TR><TD>"H" </TD><TD>The one- or two-digit hour in 24-hour format.</TD></TR><TR><TD>"HH" </TD><TD>The two-digit hour in 24-hour format. Single-digit values are preceded by a zero.</TD></TR><TR><TD>"m" </TD><TD>The one- or two-digit minute.</TD></TR><TR><TD>"mm" </TD><TD>The two-digit minute. Single-digit values are preceded by a zero.</TD></TR><TR><TD>"M" </TD><TD>The one- or two-digit month number.</TD></TR><TR><TD>"MM" </TD><TD>The two-digit month number. Single-digit values are preceded by a zero.</TD></TR><TR><TD>"MMM" </TD><TD>The three-character month abbreviation.</TD></TR><TR><TD>"MMMM" </TD><TD>The full month name.</TD></TR><TR><TD>"t" </TD><TD>The one-letter AM/PM abbreviation (that is, AM is displayed as "A").</TD></TR><TR><TD>"tt" </TD><TD>The two-letter AM/PM abbreviation (that is, AM is displayed as "AM").</TD></TR><TR><TD>"X" </TD><TD>The callback field. The control still uses the other valid format characters and queries the owner to fill in the "X" portion. So the owner must be prepared to handle the <A HREF="notifications/DTN_WMKEYDOWN.htm#DTN_WMKEYDOWN">DTN_WMKEYDOWN</A>, <A HREF="notifications/DTN_FORMAT.htm#DTN_FORMAT">DTN_FORMAT</A>, and <A HREF="notifications/DTN_FORMATQUERY.htm#DTN_FORMATQUERY">DTN_FORMATQUERY</A> notification messages. Multiple "X" characters can be used in series to signify unique callback fields.</TD></TR><TR><TD>"y" </TD><TD>The one-digit year (that is, 1996 would be displayed as "6").</TD></TR><TR><TD>"yy" </TD><TD>The last two digits of the year (that is, 1996 would be displayed as "96").</TD></TR><TR><TD>"yyy" </TD><TD>The full year (that is, 1996 would be displayed as "1996").</TD></TR></TABLE>
<!-- ************************************************** --><H4><A NAME="Callback_fields">Callback fields</A></H4>
<P>In addition to the standard <A HREF="DateTime.htm#dtp_format_chars">format characters</A> that define date and time picker (DTP) fields, you can customize your output by specifying certain parts of a format string as callback fields. To declare a callback field, include one or more "X" characters (ASCII Code 88) anywhere in the body of the format string. Like other DTP control fields, callback fields are displayed in left-to-right order based on their location in the format string.

<P>You can create callback fields that are unique to each other by repeating the "X" character. Thus, the format string "XXddddMMMdd', 'yyyXXX" contains two unique callback fields, "XX" and "XXX". Remember, callback fields are treated as valid fields, so your application must be prepared to handle <A HREF="notifications/DTN_WMKEYDOWN.htm#DTN_WMKEYDOWN">DTN_WMKEYDOWN</A> notification messages.

<P>When the DTP control parses the format string and encounters a callback field, it sends <A HREF="notifications/DTN_FORMAT.htm#DTN_FORMAT">DTN_FORMAT</A> and <A HREF="notifications/DTN_FORMATQUERY.htm#DTN_FORMATQUERY">DTN_FORMATQUERY</A> notification messages. The callback field string is included with the notifications so the receiving application can determine which callback field is being queried. The owner of the control must respond to these notifications to ensure that the custom information is properly displayed.

<!-- ************************************************** -->
<H3><A NAME="Date_and_Time_Picker">Date and Time Picker Control Notification Messages</A></H3>
<P>A date and time picker (DTP) control sends notification messages when it receives user input or processes and reacts to callback fields. The parent of the control receives these notification messages in the form of <A HREF="../common/messages/WM_NOTIFY.htm#WM_NOTIFY">WM_NOTIFY</A> messages.
<P>The following notification messages are used with DTP controls.
<TABLE>
<TR><TD><B>Notification </B></TD><TD><B>Description
</B></TD></TR><TR><TD><A HREF="notifications/DTN_CLOSEUP.htm#DTN_CLOSEUP">DTN_CLOSEUP</A> </TD><TD>Indicates that the drop-down month calendar is about to be removed.</TD></TR><TR><TD><A HREF="notifications/DTN_DATETIMECHANGE.htm#DTN_DATETIMECHANGE">DTN_DATETIMECHANGE</A> </TD><TD>Signals a change within the DTP control.</TD></TR><TR><TD><A HREF="notifications/DTN_DROPDOWN.htm#DTN_DROPDOWN">DTN_DROPDOWN</A> </TD><TD>Indicates that the drop-down month calendar is about to be displayed.</TD></TR><TR><TD><A HREF="notifications/DTN_FORMAT.htm#DTN_FORMAT">DTN_FORMAT</A> </TD><TD>Requests text to display in a portion of the format string described as a callback field.</TD></TR><TR><TD><A HREF="notifications/DTN_FORMATQUERY.htm#DTN_FORMATQUERY">DTN_FORMATQUERY</A> </TD><TD>Requests information about the maximum allowable size of the text to be displayed in a callback field.</TD></TR><TR><TD><A HREF="notifications/DTN_USERSTRING.htm#DTN_USERSTRING">DTN_USERSTRING</A> </TD><TD>Signals the end of a user's edit operation within the control. This notification is sent only by DTP controls that use the <A HREF="Styles.htm#DTS_APPCANPARSE">DTS_APPCANPARSE</A> style.</TD></TR><TR><TD><A HREF="notifications/DTN_WMKEYDOWN.htm#DTN_WMKEYDOWN">DTN_WMKEYDOWN</A> </TD><TD>Signals that the user has pressed a key in a callback field of the DTP control.</TD></TR></TABLE>
<H2><A NAME="Using_Date_and_Time_">Using Date and Time Picker Controls</A></H2>
<P>This section provides information and sample code for implementing a date and time picker control.

<!-- ************************************************** -->
<H3><A NAME="dtp_creating">Creating a Date and Time Picker Control</A></H3>
<P>To create a date and time picker (DTP) control, use the
<object id="hhal_7" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_7.Click()>CreateWindowEx</A> function, specifying DATETIMEPICK_CLASS as the window class. You must first register the window class by calling the <A HREF="../common/functions/InitCommonControlsEx.htm#InitEx_Function">InitCommonControlsEx</A> function, while specifying the ICC_DATE_CLASSES bit in the accompanying <A HREF="../common/structures/INITCOMMONCONTROLSEX.htm#InitEx_Structure">INITCOMMONCONTROLSEX</A> structure.
<P>The following example creates a DTP control in an existing modeless dialog box. It uses the <A HREF="Styles.htm#DTS_SHOWNONE">DTS_SHOWNONE</A> style to allow the user to simulate deactivation of the date within the control.
<PRE>//  CreateDatePick creates a DTP control within a dialog box.
//  Returns the handle to the new DTP control if successful, or NULL 
//  otherwise.
//
//    hwndMain - The handle to the main window.
//    g_hinst - global handle to the program instance.
HWND WINAPI CreateDatePick(hwndMain)
{
    HWND hwndDP = NULL;
    INITCOMMONCONTROLSEX icex;

    icex.dwSize = sizeof(icex);
    icex.dwICC = ICC_DATE_CLASSES;

    InitCommonControlsEx(&amp;icex);

    hwndDlg = CreateDialog  (g_hinst,
                             MAKEINTRESOURCE(IDD_DIALOG1),
                             hwndMain,
                             DlgProc);

    if(hwnDlg)
        hwndDP = CreateWindowEx(0,
                             DATETIMEPICK_CLASS,
                             "DateTime",
                             WS_BORDER|WS_CHILD|WS_VISIBLE|DTS_SHOWNONE,
                             20,50,220,20,
                             hwndDlg,
                             NULL,
                             g_hinst,
                             NULL);
    return (hwndDP);
}
</PRE>
<!-- ************************************************** --><H3><A NAME="dtp_processing_notifications">Processing Date and Time Picker Notifications</A></H3>
<P>The following example processes the <A HREF="notifications/DTN_DATETIMECHANGE.htm#DTN_DATETIMECHANGE">DTN_DATETIMECHANGE</A>, <A HREF="notifications/DTN_FORMAT.htm#DTN_FORMAT">DTN_FORMAT</A>, <A HREF="notifications/DTN_FORMATQUERY.htm#DTN_FORMATQUERY">DTN_FORMATQUERY</A>, and <A HREF="notifications/DTN_WMKEYDOWN.htm#DTN_WMKEYDOWN">DTN_WMKEYDOWN</A> notifications by calling the <A HREF="DateTime.htm#dtp_processing_DTN_DATETIMECHANGE">DoDateTimeChange</A>, <A HREF="DateTime.htm#dtp_sample_DoFormatQuery">DoFormatQuery</A>, <A HREF="DateTime.htm#dtp_sample_DoFormat">DoFormat</A>, and <A HREF="DateTime.htm#dtp_sample_DoWMKeydown">DoWMKeydown</A> application-defined functions.
<P>Other topics in this chapter provide additional information on these notifications. See <A HREF="DateTime.htm#dtp_callback_fields">Supporting Callback Fields</A> and <A HREF="DateTime.htm#dtp_processing_DTN_DATETIMECHANGE">Processing the DTN_DATETIMECHANGE Notification Message</A> for additional information.
<PRE>BOOL WINAPI DoNotify(HWND hwnd, WPARAM wParam, LPARAM lParam)
{
    LPNMHDR hdr = (LPNMHDR)lParam;

    switch(hdr-&gt;code){
        case DTN_DATETIMECHANGE:{
            LPNMDATETIMECHANGE lpChange = (LPNMDATETIMECHANGE)lParam;
            DoDateTimeChange(lpChange);
        }
        break;

        case DTN_FORMATQUERY:{
            LPNMDATETIMEFORMATQUERY lpDTFQuery = (LPNMDATETIMEFORMATQUERY)lParam;

            // Process DTN_FORMATQUERY to ensure that the control
            // displays callback information properly.
            DoFormatQuery(hdr-&gt;hwndFrom, lpDTFQuery);
        }
        break;

        case DTN_FORMAT:{
            LPNMDATETIMEFORMAT lpNMFormat = (LPNMDATETIMEFORMAT) lParam;

            // Process DTN_FORMAT to supply information about callback
            // fields (fields) in the DTP control.
            DoFormat(hdr-&gt;hwndFrom, lpNMFormat);
        }
        break;

        case DTN_WMKEYDOWN:{
            LPNMDATETIMEWMKEYDOWN lpDTKeystroke = 
                            (LPNMDATETIMEWMKEYDOWN)lParam;

            // Process DTN_WMKEYDOWN to respond to a user's keystroke in
            // a callback field.
            DoWMKeydown(hdr-&gt;hwndFrom, lpDTKeystroke);
        }
        break;
    }
    // All of the above notifications require the owner to return zero.
    return FALSE;
}
</PRE>
<P>

<!-- ************************************************** -->
<H3><A NAME="dtp_processing_DTN_DATETIMECHANGE">Processing the DTN_DATETIMECHANGE Notification</A></H3>
<P>A date and time picker (DTP) control sends the <A HREF="notifications/DTN_DATETIMECHANGE.htm#DTN_DATETIMECHANGE">DTN_DATETIMECHANGE</A> message whenever a change occurs. This message will be generated if the user changes one of the fields in the control or changes the state of the control's check box (<A HREF="Styles.htm#DTS_SHOWNONE">DTS_SHOWNONE</A> only).
<P>The following example is an application-defined function designed to update a static control within a dialog box. The text within the static control is changed to reflect the current state of the DTP control. 
<PRE>void WINAPI DoDateTimeChange(LPNMDATETIMECHANGE lpChange)
{
    // If the user has unchecked the DTP's check box, change the
    // text in a static control to show the appropriate message.
    //
    // g_hwndDlg - a program-global address of a dialog box.

    if(lpChange-&gt;dwFlags == GDT_NONE)
        SetDlgItemText(g_hwndDlg, IDC_STATUS, "Disabled");
    else
        SetDlgItemText(g_hwndDlg, IDC_STATUS, "Active");
}
</PRE>
<!-- ************************************************** --><H3><A NAME="_win32_dtp_callback_fields"></A><A NAME="dtp_callback_fields">Supporting Callback Fields in a DTP control</A></H3>
<P>If you plan to use callback fields with the date and time picker (DTP) controls in your application, you must be prepared to handle <A HREF="notifications/DTN_FORMATQUERY.htm#DTN_FORMATQUERY">DTN_FORMATQUERY</A>, <A HREF="notifications/DTN_FORMAT.htm#DTN_FORMAT">DTN_FORMAT</A>, and <A HREF="notifications/DTN_WMKEYDOWN.htm#DTN_WMKEYDOWN">DTN_WMKEYDOWN</A> notification messages. For additional information about callback fields, see <A HREF="DateTime.htm#Callback_fields">Callback fields</A>.

<P>This section contains information about how your application can process these notification messages. There are several examples of source code for application-defined functions. The following list shows notification messages with sample functions that process them.
<TABLE>
<TR><TD><B>Notification Message </B></TD><TD><B>Sample Function
</B></TD></TR><TR><TD><B>DTN_FORMATQUERY</B> </TD><TD><A HREF="DateTime.htm#dtp_sample_DoFormatQuery">DoFormatQuery</A> </TD></TR><TR><TD><B>DTN_FORMAT</B> </TD><TD><A HREF="DateTime.htm#dtp_sample_DoFormat">DoFormat</A></TD></TR><TR><TD><B>DTN_WMKEYDOWN</B> </TD><TD><A HREF="DateTime.htm#dtp_sample_DoWMKeydown">DoWMKeydown</A></TD></TR></TABLE>
<H4><A NAME="dtp_sample_DoFormatQuery">The DoFormatQuery application-defined function</A></H4>
<P>A date and time picker (DTP) control sends a <A HREF="notifications/DTN_FORMATQUERY.htm#DTN_FORMATQUERY">DTN_FORMATQUERY</A> notification message to request information about the maximum possible size of a callback field within the control. Handling this message ensures that all fields are displayed properly. The following <B>DoFormatQuery</B> application-defined function processes the <B>DTN_FORMATQUERY</B> notification message by calculating the width of the widest possible string for a given callback field.
<PRE>//
//  DoFormatQuery processes DTN_FORMATQUERY messages to ensure that the
//  DTP control displays callback fields properly.
//
void WINAPI DoFormatQuery(
 HWND hwndDP, 
 LPNMDATETIMEFORMATQUERY lpDTFQuery)
{
    HDC hdc;
    HFONT hFont, hOrigFont;

    //  Prepare the device context for GetTextExtentPoint32 call.
    hdc = GetDC(hwndDP);

    hFont = FORWARD_WM_GETFONT(hwndDP, SendMessage);

    if(!hFont)
        hFont = (HFONT)GetStockObject(DEFAULT_GUI_FONT);
    
    hOrigFont = SelectObject(hdc, hFont);
    
    // Check to see if this is the callback segment desired. If so,
    // use the longest text segment to determine the maximum 
    // width of the callback field, and then place the information into 
    // the NMDATETIMEFORMATQUERY structure.
    if(!lstrcmp("XX",lpDTFQuery-&gt;pszFormat))
    GetTextExtentPoint32 (hdc,
                          "366",  // widest date string
                          3,
                          &amp;lpDTFQuery-&gt;szMax);
    
    // Reset the font in the device context; then release the context.
    SelectObject(hdc,hOrigFont);
    ReleaseDC(hwndDP, hdc);
}
</PRE>
<H4><A NAME="dtp_sample_DoFormat">The DoFormat application-defined function</A></H4>
<P>A date and time picker (DTP) control sends the <A HREF="notifications/DTN_FORMAT.htm#DTN_FORMAT">DTN_FORMAT</A> notification to request text that will be displayed in a callback field of the control. By handling this notification message, you allow the DTP control to display information that it does not natively support.
<P>The following <B>DoFormat</B> application-defined function processes <A HREF="notifications/DTN_FORMAT.htm#DTN_FORMAT">DTN_FORMAT</A> notification messages by providing a text string for a callback field. <B>DoFormat</B> calls the <A HREF="DateTime.htm#dtp_sample_GetDayNum">GetDayNum</A> application-defined function to request the day number to be used in the callback string.
<PRE>//  DoFormat processes DTN_FORMAT to provide the text for a callback
//  field in a DTP control. In this example, the callback field
//  contains a value for the day of year. The function calls the 
//  application-defined function GetDayNum (below) to retrieve
//  the correct value.
//
void WINAPI DoFormat(HWND hwndDP, LPNMDATETIMEFORMAT lpDTFormat)
{
    wsprintf(lpDTFormat-&gt;szDisplay,"%d",GetDayNum(&amp;lpDTFormat-&gt;st));    
}
</PRE>
<H4><A NAME="dtp_sample_GetDayNum">The GetDayNum application-defined function</A></H4>
<P>The application-defined sample function <A HREF="DateTime.htm#dtp_sample_DoFormat">DoFormat</A> calls the following <B>GetDayNum</B> application-defined function to request the day number based on the current date. <B>GetDayNum</B> returns an INT value that represents the current day of the year, from 0 to 366. This function calls another application-defined function, <A HREF="DateTime.htm#dtp_sample_IsLeapYr">IsLeapYr</A>, during processing.
<PRE>//
//  GetDayNum is an application-defined function that retrieves the 
//  correct day of year value based on the contents of a given 
//  SYSTEMTIME structure. This function calls the IsLeapYr function to 
//  check if the current year is a leap year. The function returns an 
//  integer value that represents the day of year.
//
int WINAPI GetDayNum(SYSTEMTIME *st)
{
    int iNormYearAccum[] = {31,59,90,120,151,181,
                            212,243,273,304,334,365};

    int iLeapYearAccum[] = {31,60,91,121,152,182,
                            213,244,274,305,335,366};
    int iDayNum;

    if(IsLeapYr(st-&gt;wYear))
        iDayNum=iLeapYearAccum[st-&gt;wMonth-2]+st-&gt;wDay;
    else
        iDayNum=iNormYearAccum[st-&gt;wMonth-2]+st-&gt;wDay;
        
    return (iDayNum);
}
</PRE>
<H4><A NAME="dtp_sample_IsLeapYr">The IsLeapYr application-defined function</A></H4>
<P>The application-defined sample function <A HREF="DateTime.htm#dtp_sample_GetDayNum">GetDayNum</A> calls the <B>IsLeapYr</B> function to determine whether the current year is a leap year. <B>IsLeapYr</B> returns a BOOL value that is TRUE if it is a leap year and FALSE otherwise.
<PRE>//
//  IsLeapYr determines if a given year value is a leap year. The
//  function returns TRUE if the current year is a leap year, and 
//  FALSE otherwise.
//
BOOL WINAPI IsLeapYr(int iYear)
{
    int iQuotient;
    BOOL fLeapYr = FALSE;

    // If the year is evenly divisible by 4 and not by 100, then this 
    // is a leap year.
    if(!(iYear%4) &amp;&amp; (iYear%100)) 
        fLeapYr = TRUE;
    else{
        // If the year is evenly divisible by 4 and 100, then check to
        // see if the quotient of year divided by 100 is also evenly 
        // divisible by 4. If it is, then this is a leap year.
        if(!(iYear%4) &amp;&amp; !(iYear%100)){
            iQuotient = iYear/100;
            if(!(iQuotient%4)) fLeapYr = TRUE;
        }
    }
    return (fLeapYr);
}
</PRE>
<H4><A NAME="dtp_sample_DoWMKeydown">The DoWMKeydown application-defined function</A></H4>
<P>Date and time picker (DTP) controls send the <A HREF="notifications/DTN_WMKEYDOWN.htm#DTN_WMKEYDOWN">DTN_WMKEYDOWN</A> message to report that the user has typed input in a callback field. Handling this message allows you to emulate the same keyboard responses supported for standard DTP fields or provide custom responses. The following <B>DoWMKeydown</B> application-defined function provides an example of how <B>DTN_WMKEYDOWN</B> notifications can be handled.
<PRE>//
//  DoWMKeydown increments or decrements the day of month according 
//  to user keyboard input.
//
void WINAPI DoWMKeydown(
 HWND hwndDP,
 LPNMDATETIMEWMKEYDOWN lpDTKeystroke)
{
    int delta =1;
    
    if(!lstrcmp(lpDTKeystroke-&gt;pszFormat,"XX")){
        switch(lpDTKeystroke-&gt;nVirtKey){
            case VK_DOWN:
            case VK_SUBTRACT:
                delta = -1;  // fall through

            case VK_UP:
            case VK_ADD:
                lpDTKeystroke-&gt;st.wDay += delta;
                break;
        }
    }
}
</PRE>

<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
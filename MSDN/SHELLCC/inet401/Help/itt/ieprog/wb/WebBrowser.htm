<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Reusing the WebBrowser Control</TITLE>

<META NAME=MS-HKWD CONTENT="Reusing the WebBrowser Control">
<META NAME="Keywords" CONTENT="Internet Tools & Technologies">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT, Mac">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="ch_webbrowser"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Reusing the WebBrowser Control"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../../art/headbard.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Reusing the WebBrowser Control"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR>
<TR><TD><PRE><IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="../IEProg.htm#book_browsing">Topic Contents</A></PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="../htmldlgs/HTMLRes.htm">Creating an HTML Resource</A>
<IMG SRC="../../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="RefList_VB.htm">Reference for Visual Basic Developers</A></PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>Reusing the WebBrowser Control</H1>

<P>The WebBrowser control adds browsing, document viewing, and data downloading capabilities to your applications. Applications using this control will allow the user to browse sites on the Internet's World Wide Web, as well as folders in the local file system and on a network. The WebBrowser control supports Web browsing through both point-and-click hyperlinking and Uniform Resource Locator (URL) navigation. The control maintains a history list that allows the user to browse forward and backward through previously browsed sites, folders, and documents.

<P>The actual parsing and rendering of the HTML documents in the WebBrowser control is handled by the Mshtml.dll component of Microsoft&#174; Internet Explorer 4.0. The MSHTML component is an Active Document (also known as an OLE document object) that provides support for parsing and rendering with the Dynamic HTML object model, as well as for hosting ActiveX&#153; Controls and scripts. The WebBrowser control directly handles the navigation, hyperlinking, history lists, favorites, and security. Applications can also use the WebBrowser control as an Active Document container to host other Active Documents. This means that richly formatted documents, such as a Microsoft&#174; Excel spreadsheet or Microsoft&#174; Word document, can be opened and edited in-place from within the WebBrowser control. WebBrowser is also an ActiveX Control container that can host any ActiveX Control. 
<P><A CLASS=tctop HREF="WebBrowser.htm#sec_wb_whatsnew_vb"><IMG SRC="../../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Updates in Internet Explorer 4.0</A><BR>
<P><A CLASS=tctop HREF="WebBrowser.htm#wb_using_vb"><IMG SRC="../../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Using the WebBrowser Control from Visual Basic</A><BR>
<P><A CLASS=tctop HREF="WebBrowser.htm#wb_using_cpp"><IMG SRC="../../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Using the WebBrowser Control from C/C++</A><BR>
<P><A CLASS=tctop HREF="RefList_VB.htm#WB_VB_ref"><IMG SRC="../../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Reference for Visual Basic Developers</A><BR>
<P><A CLASS=tctop HREF="RefList_CPP.htm#WB_CPP_ref"><IMG SRC="../../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Reference for C/C++ Developers</A><BR>
<H2><A NAME="sec_wb_whatsnew_vb">Updates in Internet Explorer 4.0</A></H2>
<P>For Internet Explorer 4.0, the following new properties, methods, and events have been added:
<TABLE>
<TR><TD><B>Visual Basic </B></TD>
<TD><B>C/C++ </B></TD>
<TD><B>Type</B></TD>
<TD><B>Description
</B></TD>
</TR>
<TR><TD><A HREF="properties/AddressBar.htm#AddressBar">AddressBar</A> </TD>
<TD><A HREF="ifaces/iwebbrowser2/get_AddressBar.htm#IWebBrowser2__get_Ad">get_AddressBar</A> </TD>
<TD>property</TD>
<TD>Indicates whether the URL address bar is shown.</TD>
</TR>
<TR><TD><A HREF="properties/Offline.htm#Offline">Offline</A> </TD>
<TD><A HREF="ifaces/iwebbrowser2/get_Offline.htm#IWebBrowser2__get_Of">get_Offline</A> </TD>
<TD>property</TD>
<TD>Determines if the browser is in offline mode.</TD>
</TR>
<TR><TD><A HREF="properties/ReadyState.htm#ReadyState">ReadyState</A> </TD>
<TD><A HREF="ifaces/iwebbrowser2/get_ReadyState.htm#IWebBrowser2__get_Re">get_ReadyState</A> </TD>
<TD>property</TD>
<TD>Returns the OLE ReadyState bindable object.</TD>
</TR>
<TR><TD><A HREF="properties/RegisterAsBrowser.htm#RegisterAsBrowser">RegisterAsBrowser</A> </TD>
<TD><A HREF="ifaces/iwebbrowser2/get_RegisterAsBrowser.htm#IWebBrowser2__get_Re">get_RegisterAsBrowser</A> </TD>
<TD>property</TD>
<TD>Indicates whether the WebBrowser control is registered as a top-level browser.</TD>
</TR>
<TR><TD><A HREF="properties/RegisterAsDropTarget.htm#RegisterAsDropTarget">RegisterAsDropTarget</A> </TD>
<TD><A HREF="ifaces/iwebbrowser2/get_RegisterAsDropTarget.htm#IWebBrowser2__get_Re">get_RegisterAsDropTarget</A> </TD>
<TD>property</TD>
<TD>Indicates whether the WebBrowser control is registered as a drop target.</TD>
</TR>
<TR><TD><A HREF="properties/Resizable.htm#Resizable">Resizable</A> </TD>
<TD><A HREF="ifaces/iwebbrowser2/get_Resizable.htm#IWebBrowser2__get_Re">get_Resizable</A> </TD>
<TD>property</TD>
<TD>Indicates whether the Internet Explorer object can be resized. </TD>
</TR>
<TR><TD><A HREF="properties/Silent.htm#Silent">Silent</A> </TD>
<TD><A HREF="ifaces/iwebbrowser2/get_Silent.htm#IWebBrowser2__get_Si">get_Silent</A> </TD>
<TD>property</TD>
<TD>Indicates whether dialog boxes can be shown.</TD>
</TR>
<TR><TD><A HREF="properties/TheaterMode.htm#TheaterMode">TheaterMode</A> </TD>
<TD><A HREF="ifaces/iwebbrowser2/get_TheaterMode.htm#IWebBrowser2__get_Th">get_TheaterMode</A> </TD>
<TD>property</TD>
<TD>Indicates whether the browser is in "Theater Mode" or a normal browser window.
</TD>
</TR>
<TR><TD><A HREF="methods/ExecWB.htm#ExecWB">ExecWB</A> </TD>
<TD><A HREF="ifaces/iwebbrowser2/ExecWB.htm#IWebBrowser2__ExecWB">ExecWB</A> </TD>
<TD>method</TD>
<TD>Executes an IOLECommandTarget interface command.</TD>
</TR>
<TR><TD><A HREF="methods/Navigate2.htm#Navigate2">Navigate2</A> </TD>
<TD><A HREF="ifaces/iwebbrowser2/Navigate2.htm#IWebBrowser2__Naviga">Navigate2</A> </TD>
<TD>method</TD>
<TD>Navigates the WebBrowser control to a URL.</TD>
</TR>
<TR><TD><A HREF="methods/QueryStatusWB.htm#QueryStatusWB">QueryStatusWB</A> </TD>
<TD><A HREF="ifaces/iwebbrowser2/QueryStatusWB.htm#IWebBrowser2__QueryS">QueryStatusWB</A> </TD>
<TD>method</TD>
<TD>Returns the status of commands using the IOLECommandTarget interface.</TD>
</TR>
<TR><TD><A HREF="methods/ShowBrowserBar.htm#ShowBrowserBar">ShowBrowserBar</A> </TD>
<TD><A HREF="ifaces/iwebbrowser2/ShowBrowserBar.htm#IWebBrowser2__ShowBr">ShowBrowserBar</A> </TD>
<TD>method</TD>
<TD>Shows or hides a browser bar. 
</TD>
</TR>
<TR><TD><A HREF="events/BeforeNavigate2.htm#BeforeNavigate2">BeforeNavigate2</A> </TD>
<TD><A HREF="ifaces/dwebbrowserevents2/BeforeNavigate2.htm#DWebBrowserEvents2__">BeforeNavigate2</A> </TD>
<TD>event</TD>
<TD>Occurs before the WebBrowser control navigates to a new URL. (replaces BeforeNavigate and FrameBeforeNavigate) </TD>
</TR>
<TR><TD><A HREF="events/DocumentComplete.htm#DocumentComplete">DocumentComplete</A> </TD>
<TD><A HREF="ifaces/dwebbrowserevents2/DocumentComplete.htm#DWebBrowserEvents2__">DocumentComplete</A> </TD>
<TD>event</TD>
<TD>Occurs when the <A HREF="properties/ReadyState.htm#ReadyState">ReadyState</A> property is changed to READYSTATE_COMPLETE.</TD>
</TR>
<TR><TD><A HREF="events/NavigateComplete2.htm#NavigateComplete2">NavigateComplete2</A> </TD>
<TD><A HREF="ifaces/dwebbrowserevents2/NavigateComplete2.htm#DWebBrowserEvents2__">NavigateComplete2</A> </TD>
<TD>event</TD>
<TD>Occurs after the WebBrowser control navigates to a new URL (replaces NavigateComplete and FrameNavigateComplete). </TD>
</TR>
<TR><TD><A HREF="events/NewWindow2.htm#NewWindow2">NewWindow2</A> </TD>
<TD><A HREF="ifaces/dwebbrowserevents2/NewWindow2.htm#DWebBrowserEvents2__">NewWindow2</A> </TD>
<TD>event</TD>
<TD>Occurs when navigation occurs with the navOpenInNewWindow flag (replaces NewWindow and FrameNewWindow). </TD>
</TR>
<TR><TD><A HREF="events/OnFullScreen.htm#OnFullScreen">OnFullScreen</A> </TD>
<TD><A HREF="ifaces/dwebbrowserevents2/OnFullScreen.htm#DWebBrowserEvents2__">OnFullScreen</A> </TD>
<TD>event</TD>
<TD>Occurs when the <A HREF="properties/FullScreen.htm#FullScreen">FullScreen</A> property changes.</TD>
</TR>
<TR><TD><A HREF="events/OnMenuBar.htm#OnMenuBar">OnMenuBar</A> </TD>
<TD><A HREF="ifaces/dwebbrowserevents2/OnMenuBar.htm#DWebBrowserEvents2__">OnMenuBar</A> </TD>
<TD>event</TD>
<TD>Occurs when the <A HREF="properties/MenuBar.htm#MenuBar">MenuBar</A>property changes.</TD>
</TR>
<TR><TD><A HREF="events/OnQuit.htm#OnQuit">OnQuit</A> </TD>
<TD><A HREF="ifaces/dwebbrowserevents2/OnQuit.htm#DWebBrowserEvents2__">OnQuit</A> </TD>
<TD>event</TD>
<TD>Occurs before the Internet Explorer application quits.</TD>
</TR>
<TR><TD><A HREF="events/OnStatusBar.htm#OnStatusBar">OnStatusBar</A> </TD>
<TD><A HREF="ifaces/dwebbrowserevents2/OnStatusBar.htm#DWebBrowserEvents2__">OnStatusBar</A> </TD>
<TD>event</TD>
<TD>Occurs when the <A HREF="properties/StatusBar.htm#StatusBar">StatusBar</A> property changes.</TD>
</TR>
<TR><TD><A HREF="events/OnTheaterMode.htm#OnTheaterMode">OnTheaterMode</A> </TD>
<TD><A HREF="ifaces/dwebbrowserevents2/OnTheaterMode.htm#DWebBrowserEvents2__">OnTheaterMode</A> </TD>
<TD>event</TD>
<TD>Occurs when the <A HREF="properties/TheaterMode.htm#TheaterMode">TheaterMode</A> property changes.</TD>
</TR>
<TR><TD><A HREF="events/OnToolBar.htm#OnToolBar">OnToolBar</A> </TD>
<TD><A HREF="ifaces/dwebbrowserevents2/OnToolBar.htm#DWebBrowserEvents2__">OnToolBar</A> </TD>
<TD>event</TD>
<TD>Occurs when the <A HREF="properties/ToolBar.htm#ToolBar">ToolBar</A> property changes.</TD>
</TR>
<TR><TD><A HREF="events/OnVisible.htm#OnVisible">OnVisible</A> </TD>
<TD><A HREF="ifaces/dwebbrowserevents2/OnVisible.htm#DWebBrowserEvents2__">OnVisible</A> </TD>
<TD>event</TD>
<TD>Occurs when the <A HREF="properties/Visible.htm#Visible">Visible</A> property changes.</TD>
</TR>
</TABLE>
<H3><A NAME="sec_wb_ie30compatible_vb">Internet Explorer 3.0 Compatibility</A></H3>
<P>The new <B>WebBrowser_V1</B> object is now included with the WebBrowser control. This object supports the set of properties, methods, and events that exist in Internet Explorer 3.0. You can use the <B>WebBrowser_V1</B> object in a Visual Basic project to run on computers with either Internet Explorer 3.0 or 4.0 installed. The <A HREF="objects/WebBrowser.htm#WebBrowser">WebBrowser</A> object requires Internet Explorer 4.0 to access the new properties, methods, and events listed above.


<!--************************************************************-->
<!--************************************************************-->
<H2><A NAME="wb_using_vb">Using the WebBrowser Control from Visual Basic</A></H2>
<P>The WebBrowser control supports properties, methods, and events that allow developers to create a highly customized Web browser with the <A HREF="objects/WebBrowser.htm#WebBrowser">WebBrowser</A> object. Companies may want to use the WebBrowser control to create a Web browsing application that restricts navigation to a local intranet and company-approved public Web sites.

<P>An application can also create and manipulate an instance of the Internet Explorer application through OLE Automation with the <A HREF="objects/InternetExplorer.htm#InternetExplorer">InternetExplorer</A> object. In this context, additional properties and methods not supported by the <A HREF="objects/WebBrowser.htm#WebBrowser">WebBrowser</A> object are available. These additional features are indicated in the Applies To list for the <B>InternetExplorer</B> object only. If these features are used with the <B>WebBrowser</B> object, error codes will be returned. Errors can be trapped in Visual Basic with the "On Error Resume Next" statement and by accessing the <B>Err</B> object's associated properties such as Err.Number and Err.Description.

<P>To implement the <A HREF="objects/InternetExplorer.htm#InternetExplorer">InternetExplorer</A> object in a Visual Basic application, declare the object as indicated in the <A HREF="properties/Application.htm#Application">Application</A> property description. To use the <A HREF="objects/WebBrowser.htm#WebBrowser">WebBrowser</A> object, simply add the "Microsoft Internet Controls" to your Visual Basic project and place the <B>WebBrowser</B> control on a Visual Basic form. This is accomplished by selecting the "Components..." item on the Project menu in Visual Basic 5.0, or by selecting the "Custom Controls..." item on the Tools menu in Visual Basic 4.0. 

<H3><A NAME="sec_wb_info_vb">Retrieving Information About the WebBrowser Control</A></H3>
<P>Many properties can be used to retrieve information about the WebBrowser control. The <A HREF="properties/LocationName.htm#LocationName">LocationName</A> and <A HREF="properties/LocationURL.htm#LocationURL">LocationURL</A> properties can be used to retrieve information about the location that is currently displayed. If the location is an HTML page on the World Wide Web, <B>LocationName</B> retrieves the title of that page, and <B>LocationURL</B> retrieves the URL of that page. If the location is a folder or file on the network or local computer, <B>LocationName</B> and <B>LocationURL</B> both retrieve the Universal Naming Convention (UNC) name or the full path of the folder or file. 

<P>The current status of the WebBrowser control can be obtained using the <A HREF="properties/Busy.htm#Busy">Busy</A> property. This Boolean value indicates whether the control is engaged in a navigation or downloading operation. You should check the value of this property before issuing the <A HREF="methods/Stop.htm#Stop">Stop</A> method to cancel navigation or downloading operations. 

<H3><A NAME="sec_wb_customize_vb">Customizing the User Interface</A></H3>
<P>The WebBrowser control supports properties and associated events to manipulate various user interface elements of an Internet Explorer application or a custom browser. The size and position of the window used by the WebBrowser control can be read or set with the <A HREF="properties/Height.htm#Height">Height</A>, <A HREF="properties/Left.htm#Left">Left</A>, <A HREF="properties/Top.htm#Top">Top</A>, and <A HREF="properties/Width.htm#Width">Width</A> properties. Other user interface elements are enabled with individual properties such as <A HREF="properties/MenuBar.htm#MenuBar">MenuBar</A>, <A HREF="properties/FullScreen.htm#FullScreen">FullScreen</A>, <A HREF="properties/StatusBar.htm#StatusBar">StatusBar</A>, and <A HREF="properties/ToolBar.htm#ToolBar">ToolBar</A>. The associated <A HREF="events/OnMenuBar.htm#OnMenuBar">OnMenuBar</A>, <A HREF="events/OnFullScreen.htm#OnFullScreen">OnFullScreen</A>, <A HREF="events/OnStatusBar.htm#OnStatusBar">OnStatusBar</A>, and <A HREF="events/OnToolBar.htm#OnToolBar">OnToolBar</A> events are triggered when the property value changes. These events return a Boolean value to indicate the new state of the property and to provide a mechanism to respond to user actions in the <A HREF="objects/InternetExplorer.htm#InternetExplorer">InternetExplorer</A> object. 
 
<P>When using OLE Automation with the <A HREF="objects/InternetExplorer.htm#InternetExplorer">InternetExplorer</A> object, the application window can be shown or hidden by setting the value of the <A HREF="properties/Visible.htm#Visible">Visible</A> property. When changed, the associated <A HREF="events/OnVisible.htm#OnVisible">OnVisible</A> event returns the current Boolean value of the property. You may also want to retrieve information about the Internet Explorer application itself. To do so, use the <A HREF="properties/Name.htm#Name">Name</A> property to get the Internet Explorer application name, and use the <A HREF="properties/Path.htm#Path">Path</A> and <A HREF="properties/FullName.htm#FullName">FullName</A> properties to get the Internet Explorer application's path and file name. 

<H3><A NAME="sec_wb_navigating_vb">Navigating with the WebBrowser Control</A></H3>
<P>Use the <A HREF="methods/Navigate.htm#Navigate">Navigate</A> or <A HREF="methods/Navigate2.htm#Navigate2">Navigate2</A> method to browse HTML pages on the World Wide Web or any file or folder on the network or local computer. In addition to the required URL argument passed to the <B>Navigate</B> or <B>Navigate2</B> method, you can optionally include flags to specify more detailed information about the navigation, such as the HTML frame name target and the HTTP headers sent to the server. You can browse through the sites maintained in the browser's history list during each browser session by using the <A HREF="methods/GoBack.htm#GoBack">GoBack</A> and <A HREF="methods/GoForward.htm#GoForward">GoForward</A> methods. If you wish to go directly to the Internet Explorer home or search pages that have been specified in the Internet Explorer Options dialog box, use the <A HREF="methods/GoHome.htm#GoHome">GoHome</A> or <A HREF="methods/GoSearch.htm#GoSearch">GoSearch</A> method. To display the most current version of a page the browser is viewing, use the <A HREF="methods/Refresh.htm#Refresh">Refresh</A> or <A HREF="methods/Refresh2.htm#Refresh2">Refresh2</A> method. When using OLE Automation, call the <A HREF="methods/Quit.htm#Quit">Quit</A> method to close the instance of the Internet Explorer application.

<P>The WebBrowser control triggers a number of different events to notify an application of user- and browser-generated activity. When the browser is about to navigate to a new location, it triggers a <A HREF="events/BeforeNavigate2.htm#BeforeNavigate2">BeforeNavigate2</A> event that specifies the URL or path of the new location and any other data that will be transmitted to the Internet server through the HTTP transaction. The data can include the HTTP header, HTTP post data, and the URL of the referrer. The <B>BeforeNavigate2</B> event also includes a flag that can be set to cancel the pending navigation request. This event can be useful for checking the requested URL against a database of unauthorized World Wide Web sites or local and network folders, and for canceling the navigation request. The WebBrowser control fires the <A HREF="events/NavigateComplete2.htm#NavigateComplete2">NavigateComplete2</A> event after it has navigated to a new location. This event includes the same information as <B>BeforeNavigate2</B>, except <B>NavigateComplete2</B> does not include the cancel flag.

<P>Whenever the browser is about to begin a download operation, it triggers the <A HREF="events/DownloadBegin.htm#DownloadBegin">DownloadBegin</A> event. The control also generates a number of <A HREF="events/ProgressChange.htm#ProgressChange">ProgressChange</A> events as the operation progresses, and then it triggers the <A HREF="events/DownloadComplete.htm#DownloadComplete">DownloadComplete</A> event after completing the operation. Applications typically use these three events to indicate the progress of the download operation, often by displaying a progress bar. An application would show the progress bar in response to <B>DownloadBegin</B>, update the progress bar in response to <B>ProgressChange</B>, and hide the progress bar in response to <B>DownloadComplete</B>. 

<P>When an application calls the <A HREF="methods/Navigate.htm#Navigate">Navigate</A> or <A HREF="methods/Navigate2.htm#Navigate2">Navigate2</A> method with the navOpenInNewWindow flag, the <A HREF="events/NewWindow2.htm#NewWindow2">NewWindow2</A> event occurs before the new browser window is created. This event allows the application to create the new browser window or have a new instance of the Internet Explorer application created. Once the new window is created, an accompanying <A HREF="events/BeforeNavigate2.htm#BeforeNavigate2">BeforeNavigate2</A> event occurs.

<P><B>Note</B>  The events discussed in the preceding section that apply to the <A HREF="objects/InternetExplorer.htm#InternetExplorer">InternetExplorer</A> object are supported in Visual Basic version 5.0 and later.
<H3><A NAME="Creating_a_Custom_Br">Creating a Custom Browser with Limited Functionality</A></H3>
<P>Suppose you want to create a custom browser application to start and display an HTML page that is not the user's home or start page. You also want the custom browser to navigate only to HTML pages on the local domain or view files on the local hard disk. Here's how you could create this simple application:

<OL><LI>Use the <A HREF="methods/Navigate2.htm#Navigate2">Navigate2</A> method to go to the desired HTML page during form loading.

<PRE>Private Sub Form_Load()
&#009;On Error Resume Next&#009;&#009;'Don't stop execution, continue on next line
&#009;WebBrowser.Navigate2 "http:\\www.xyzcorp.com"
&#009;If Err.Number &lt;&gt; 0 Then MsgBox "Error :" &amp; Err.Description&#009;'Display error message
End Sub
</PRE>
<LI>Check the URL in the <A HREF="events/BeforeNavigate2.htm#BeforeNavigate2">BeforeNavigate2</A> event to make sure the location string contains the local domain or disk. If the location string doesn't meet the criteria, cancel the operation and display an error message to the user. 

<PRE>Private Sub WebBrowser_BeforeNavigate2(ByVal URL As String, ByVal Flags As Long, 
        ByVal TargetFrameName As String, PostData As Variant, ByVal Headers As String, 
        Cancel As Boolean)
    If (Instr(1,URL,"xyzcorp.com") = 0) And (Instr(1,URL,"C:") = 0) Then
        Cancel = True
        MsgBox "Access denied to URL: " &amp; URL
    End If
End Sub
</PRE>
</OL>
<H3><A NAME="exa_wbprint">Printing the Current Page with the WebBrowser Control</A></H3>
<P>The WebBrowser control supports several common file operations&#151;such as Print, Print Preview, Save, Save As, New, and Properties&#151;with the <A HREF="methods/QueryStatusWB.htm#QueryStatusWB">QueryStatusWB</A> and <A HREF="methods/ExecWB.htm#ExecWB">ExecWB</A> methods. These methods directly access the
<object id="hhal_3" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_IOleCommandTarget>
</object><A HREF=JavaScript:hhal_3.Click()>IOleCommandTarget</A> interface for issuing commands on the Active Document or inquiring about which commands it supports. The following example shows the implementation of a Print command button that, when clicked, checks to make sure the Print command is valid and then displays the print dialog box for the WebBrowser control. 

<PRE>Private Sub BtnPrint_Click()
&#009;Dim eQuery As OLECMDF       'return value type for QueryStatusWB

&#009;On Error Resume Next
&#009;eQuery = WebBrowser1.QueryStatusWB(OLECMDID_PRINT)  'get print command status
&#009;If Err.Number = 0 Then
    &#009;&#009;If eQuery And OLECMDF_ENABLED Then
        &#009;&#009;WebBrowser1.ExecWB OLECMDID_PRINT, OLECMDEXECOPT_PROMPTUSER, "", ""    'Ok to Print?
&#009;&#009;  Else
        &#009;&#009;MsgBox "The Print command is currently disabled."
    &#009;&#009;End If
&#009;End If
&#009;If Err.Number &lt;&gt; 0 Then MsgBox "Print command Error: " &amp; Err.Description
End Sub
</PRE>
<H3><A NAME="exa_event_sinks">Capturing Events with the InternetExplorer Object</A></H3>
<P>When using OLE Automation to control a separately running instance of an application, you will need to create a mechanism to respond to events triggered by that ActiveX object. To create this mechanism, commonly referred to as an <I>event sink</I>, use the following steps as a guideline.

<OL><LI>Create a Standard EXE project in Visual Basic version 5.0.
<LI>Select References under the Project menu, and add a reference to the "Microsoft Internet Controls" by checking the appropriate box. If this library is not available, you should browse for the Shdocvw.dll file.
<LI>Select Add Class Module under the Project menu.
<LI>In the General Declarations section of the class module, add this line of code:
<PRE>Public WithEvents m_oWbSink As SHDocVw.InternetExplorer
</PRE>
<LI>At this point, you can select the <B>m_oWbSink</B> object in the left-hand object drop-down menu of the code window. After selecting this object, the right-hand procedure drop-down window lists all of the <A HREF="events/Events.htm#sec_events">events</A> supported by this object. Select one of the events, and add the code to process the event. This example updates a text box on the form with the current browser status text.
<PRE>Private Sub m_oWbSink_StatusTextChange(ByVal Text As String)
    Form1.txtStatus.Text = Text
End Sub
</PRE>
<LI>Add the necessary declarations in the "General Declarations" section of the form, as follows:
<PRE>'Global reference to an instance of the browser
Dim g_oIE As New SHDocVw.InternetExplorer
'Global reference to an instance of a class that can sink the browser's events
Dim g_oIESink As New Class1
</PRE>
<LI>Now you can hook up the event sink to the instance of the browser by placing the following code in the form's "Form_Load" event:
<PRE>Set g_oIESink.m_oWbSink = g_oIE
</PRE>
<LI>Finally, add any additional desired controls (buttons or text boxes, for example) and code to your project. Any events you need to use will be available in your newly created class module.
</OL>
<P><B>Note</B>  The preceding steps are unnecessary when using the <A HREF="objects/WebBrowser.htm#WebBrowser">WebBrowser</A> object. Events are automatically trapped when you select the <B>WebBrowser</B> control in the Visual Basic toolbox and place it directly on a form.
<!--************************************************************--><!--************************************************************--><H2><A NAME="wb_using_cpp">Using the WebBrowser Control from C/C++</A></H2>
<P>This section describes some of the common implementations of the WebBrowser control, including:
<UL><LI><A HREF="WebBrowser.htm#add_WB_toapp">Adding Internet browsing functionality to your application</A>
<LI><A HREF="WebBrowser.htm#Print_page">Printing Web pages with the WebBrowser control</A>
<LI><A HREF="WebBrowser.htm#Chg_Font">Changing fonts with the WebBrowser control</A>
<LI><A HREF="WebBrowser.htm#Working_Events">Working with WebBrowser events</A>
</UL>
<H3><A NAME="add_WB_toapp">Adding Internet Browsing Functionality to Your Application</A></H3>
<P>One of the most common uses for the WebBrowser control is to add Internet browsing functionality to your application. Using the <A HREF="ifaces/iwebbrowser2/IWebBrowser2.htm#IWebBrowser2">IWebBrowser2</A> interface, you can browse to any location in the local file system, on the network, or on the World Wide Web. You can use the <A HREF="ifaces/iwebbrowser2/Navigate.htm#IWebBrowser2__Naviga">Navigate</A> method to tell the control which location to browse to. The first parameter is a string that contains the name of the location. To browse to a location in the local file system or on the network, specify the full path to the file system location or the Universal Naming Convention (UNC) name of the location on the network. To browse to a site on the World Wide Web, specify the URL of the site. By including a text box in your application, you can let the user specify the location to browse to and then pass the location to the <B>Navigate</B> method.

<P>In this example, the WebBrowser control was inserted into a basic Microsoft Foundation Class Library (MFC) application. A class was added to the project, and the control was dynamically created in the OnCreate handler of the application's View class.

<PRE>CRect rect;
GetClientRect (&amp;rect);

// Create the control.
m_pBrowser = new CWebBrowser;
ASSERT (m_pBrowser);
if (!m_pBrowser-&gt;Create(NULL,NULL,WS_VISIBLE,rect,this,NULL))
{
    TRACE("failed to create browser\n");
    delete m_pBrowser;
    m_pBrowser = NULL;
    return 0;
}

// Initialize the first URL.
COleVariant noArg;
m_pBrowser-&gt;Navigate("www.microsoft.com",&amp;noArg,&amp;noArg,&amp;noArg,&amp;noArg);
return 0;
</PRE>
<P>In addition, the <A HREF="ifaces/iwebbrowser2/Navigate.htm#IWebBrowser2__Naviga">Navigate</A> method allows you to target a specific frame on an HTML page, causing the WebBrowser control to display a Web site or file system location in that frame. First, you would call the <B>Navigate</B> method and specify the URL of an HTML page that contains a frame. Then, by specifying the name of the frame in subsequent calls to <B>Navigate</B>, you can direct the control to display subsequent locations within that frame.

<P>You can also use the <A HREF="ifaces/iwebbrowser2/get_LocationName.htm#IWebBrowser2__get_Lo">get_LocationName</A> and <A HREF="ifaces/iwebbrowser2/get_LocationURL.htm#IWebBrowser2__get_Lo">get_LocationURL</A> methods to retrieve information about the location that the WebBrowser control is currently displaying. If the location is an HTML page on the World Wide Web, <B>get_LocationName</B> retrieves the title of that page, and <B>get_LocationURL</B> retrieves the URL of that page. If the location is a folder or file on the network or local computer, <B>get_LocationName</B> and <B>get_LocationURL</B> both retrieve the UNC or full path of the folder or file.


<H3><A NAME="Print_page">Printing Pages with the WebBrowser Control</A></H3>
<P>Although the WebBrowser control does not support a print method, you can print its contents using one of the following methods:

<UL><LI>Set the focus to the WebBrowser control and send a key combination of <SMALL>CTRL+P</SMALL>.
<LI>Call the <A HREF="ifaces/iwebbrowser2/get_Document.htm#IWebBrowser2__get_Do">get_Document</A> method, which returns an
<object id="hhal_4" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_4.Click()>IDispatch</A> pointer. Using this <B>IDispatch</B> pointer, call
<object id="hhal_5" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_5.Click()>QueryInterface</A> on IID_IOleCommandTarget. With the object pointer returned, call <B>Exec</B> (NULL, OLECMDID_PRINT, 0, NULL, NULL).

<PRE>LPDISPATCH lpDispatch = NULL;
LPOLECOMMANDTARGET lpOleCommandTarget = NULL;

lpDispatch = m_pBrowser.get_Document();
ASSERT(lpDispatch);

lpDispatch-&gt;QueryInterface(IID_IOleCommandTarget, (void**)&amp;lpOleCommandTarget);
ASSERT(lpOleCommandTarget);

lpDispatch-&gt;Release();

// Print contents of WebBrowser control.
lpOleCommandTarget-&gt;Exec(NULL, OLECMDID_PRINT, 0, NULL,NULL);
lpOleCommandTarget-&gt;Release();
</PRE>
</UL>
<H3><A NAME="Chg_Font">Changing Fonts with the WebBrowser Control</A></H3>
<P>The WebBrowser automation model does not support a method that allows you to change the font of the text of the currently displayed page. However, the WebBrowser control exposes this functionality through the
<object id="hhal_6" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_IOleCommandTarget>
</object><A HREF=JavaScript:hhal_6.Click()>IOleCommandTarget</A> interface. Call the <A HREF="ifaces/iwebbrowser2/get_Document.htm#IWebBrowser2__get_Do">get_Document</A> method, which returns an
<object id="hhal_7" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_7.Click()>IDispatch</A> pointer. Using this <B>IDispatch</B> pointer, call
<object id="hhal_8" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_8.Click()>QueryInterface</A> on IID_IOleCommandTarget. With this <B>IOleCommandTarget</B> interface pointer, call
<object id="hhal_9" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_IOleCommandTarget_Exec>
</object><A HREF=JavaScript:hhal_9.Click()>Exec</A> with OLECMDID_ZOOM and use the <I>pvaIn</I> input argument to pass a value in the range of 0 to 5 (where 0 is smallest) indicating the desired scale of the font. This, in effect, mimics the functionality available through the Internet Explorer Fonts command on the View menu.

<PRE>LPDISPATCH pDisp = NULL;
LPOLECOMMANDTARGET pCmdTarg = NULL;

pDisp = m_pBrowser.get_Document();
ASSERT(pDisp);

pDisp-&gt;QueryInterface(IID_IOleCommandTarget, (LPVOID*)&amp;pCmdTarg);
ASSERT(pCmdTarg);

VARIANT vaZoomFactor;   // input arguments
VariantInit(&amp;vaZoomFactor);
V_VT(&amp;vaZoomFactor) = VT_I4;
V_I4(&amp;vaZoomFactor) = fontSize;

pCmdTarg-&gt;Exec(NULL,
&#009;&#009;OLECMDID_ZOOM,
&#009;&#009;OLECMDEXECOPT_DONTPROMPTUSER,
&#009;&#009;&amp;vaZoomFactor,
&#009;&#009;NULL);
VariantClear(&amp;vaZoomFactor);

if (pCmdTarg)
   pCmdTarg-&gt;Release(); // release document's command target
if (pDisp)
   pDisp-&gt;Release();    // release document's dispatch interface
</PRE>
<H3><A NAME="Working_Events">Working with WebBrowser Events</A></H3>
<P>The WebBrowser control fires a number of different events to notify an application of user- and browser-generated activity. The events are implemented using the <A HREF="ifaces/dwebbrowserevents2/DWebBrowserEvents2.htm#DWebBrowserEvents2">DWebBrowserEvents2</A> interface. When the control is about to navigate to a new location, it fires a <A HREF="ifaces/dwebbrowserevents2/BeforeNavigate2.htm#DWebBrowserEvents2__">BeforeNavigate2</A> event that specifies the URL or path of the new location and any other data that will be transmitted to the Internet server through the HTTP transaction. The data can include the HTTP header, HTTP post data, and the URL of the referrer. <B>BeforeNavigate2</B> also includes a cancel flag that you can set to FALSE to cancel the navigation. The WebBrowser control fires the <A HREF="ifaces/dwebbrowserevents2/NavigateComplete2.htm#DWebBrowserEvents2__">NavigateComplete2</A> event after it has navigated to a new location. This event includes the same information as <B>BeforeNavigate2</B>, but <B>NavigateComplete2</B> does not include the cancel flag.

<P>When the WebBrowser control is about to begin a download operation, it fires the <A HREF="ifaces/dwebbrowserevents2/DownloadBegin.htm#DWebBrowserEvents2__">DownloadBegin</A> event. The control fires a number of <A HREF="ifaces/dwebbrowserevents2/ProgressChange.htm#DWebBrowserEvents2__">ProgressChange</A> events as the operation progresses, and then it fires the <A HREF="ifaces/dwebbrowserevents2/DownloadComplete.htm#DWebBrowserEvents2__">DownloadComplete</A> event after completing the operation. Applications typically use these three events to indicate the progress of the download operation, often by displaying a progress bar. An application would show the progress bar in response to <B>DownloadBegin</B>, update the progress bar in response to <B>ProgressChange</B>, and hide it in response to <B>DownloadComplete</B>.


<P>When an application calls the <A HREF="ifaces/iwebbrowser2/Navigate.htm#IWebBrowser2__Naviga">Navigate</A> method with the <I>Flags</I> parameter set to navOpenInNewWindow, the WebBrowser control fires the <A HREF="ifaces/dwebbrowserevents2/NewWindow2.htm#DWebBrowserEvents2__">NewWindow2</A> event before navigating to the new location. The event includes information about the new location and a flag that indicates whether the application or the control is to create the new window. Set this flag to TRUE if your application will create the window or to FALSE if the WebBrowser control should create it.

<P>You will need to implement an event sink to capture and handle the various events. The Internet Client SDK includes a generic event sink class called EVTSINK. For more information, refer to the \Samples\BaseCtl\Objvw subdirectory within your SDK.


<!--************************************************************-->
<!--************************************************************--><!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Overview</TITLE>

<META NAME=MS-HKWD CONTENT="Overview">
<META NAME="Keywords" CONTENT="Internet Tools & Technologies">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT, Mac">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="ch_MSHTML_arch"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Overview"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../art/headbard.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Overview"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR>
<TR><TD><PRE><IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="IEProg.htm#book_browsing">Topic Contents</A></PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="IEProg.htm">Reusing the WebBrowser and MSHTML</A>
<IMG SRC="../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="htmldlgs/HTMLDlgs.htm">HTML Dialog Boxes</A></PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>Overview</H1>

<P>This document explains the architecture of Microsoft&#174; Internet Explorer 4.0. The document also provides information you'll find helpful when reusing these components. 
<P><A CLASS=tctop HREF="Overview.htm#Architectural_Overvi"><IMG SRC="../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Architectural Overview</A><BR>
<P><A CLASS=tctop HREF="Overview.htm#Choosing_the_Correct"><IMG SRC="../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Choosing the Correct Component For Reuse</A><BR>
<P><A CLASS=tctop HREF="Overview.htm#Providing_Extra_Cont"><IMG SRC="../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Providing Extra Control</A><BR>
<P><A CLASS=tctop HREF="Overview.htm#Controlling_the_Cont"><IMG SRC="../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Controlling the Context Menus</A><BR>
<P><A CLASS=tctop HREF="Overview.htm#Extending_the_Dynami"><IMG SRC="../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Extending the Dynamic HTML Object Model</A><BR>
<P><A CLASS=tctop HREF="Overview.htm#Download_Control"><IMG SRC="../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Download Control</A><BR>
<P><A CLASS=tctop HREF="Overview.htm#Security_Manager"><IMG SRC="../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Security Manager</A><BR>
<!--************************************************************-->

<H2><A NAME="Architectural_Overvi">Architectural Overview</A></H2>
<P>Internet Explorer 4.0 uses ActiveX&#153; Controls and Active Document interfaces to connect components. The following diagram provides a high-level overview.

<P><IMG SRC="../../art/IE4Arch.gif" WIDTH="305" HEIGHT="195" ALT="Internet Explorer 4.0 Architecture." >

<P>At the top level is IExplore.exe, a surprisingly small application that is instantiated when the Internet Explorer 4.0 browser is loaded. This executable uses Internet Explorer 4.0 components to perform the navigation, history maintenance, favorites maintenance, HTML parsing and rendering, and so on, while it supplies the toolbar and frame for the stand-alone browser. This executable directly hosts the Shdocvw.dll component.

<P>Shdocvw.dll in turn hosts the Mshtml.dll component, as well as any other Active Document component (such as a Microsoft&#174; Office application) that can be loaded in-place in the browser when the user navigates to a specific document type. Shdocvw.dll supplies the functionality associated with navigation, in-place linking, favorites and history management, and PICS support. This DLL also exposes interfaces to its host to allow it to be hosted separately as an ActiveX control. The Shdocvw.dll component is more frequently referred to as the WebBrowser control. In-place linking refers to the ability to click a link in the HTML of the loaded document and load a new HTML document in the same instance of the WebBrowser control. If only Mshtml.dll is being hosted, a click on the link will result in a new instance of the browser being instantiated.

<P>Mshtml.dll is the component that performs the HTML parsing and rendering in Internet Explorer 4.0, and also exposes the HTML document through the Dynamic HTML object model. This component hosts the scripting engines, Java VM, ActiveX Controls, Plug-Ins, and other objects that might be referenced in the HTML document that is loaded. Mshtml.dll implements the Active Document server interfaces, which allows it to be hosted using standard COM interfaces. 

<P>This architecture is recursive in that Shdocvw.dll is in turn hosted by Mshtml.dll in a frameset situation. In this case, each instance of a frame is another instance of Shdocvw.dll hosting Mshtml.dll.

<P>As this is an OLE-based architecture, the ambient properties that are commonly used by ActiveX Controls can also be applied to the Internet Explorer 4.0 components. In this way, a host of the WebBrowser control can set an ambient property that will filter down to all the frames and controls hosted in the loaded document.

 
<H2><A NAME="Choosing_the_Correct">Choosing the Correct Component for Reuse</A></H2>
<P>Because the WebBrowser control provides a rich set of functionality that a host will typically require, such as that for in-place linking, it is much more applicable for most applications to host this control instead of MSHTML for browsing or viewing HTML documents. Hosting MSHTML is recommended only for specialized applications, such as parsing HTML. The WalkAll sample in the Internet Client SDK demonstrates how to host MSHTML.

<P>It should also be noted that although hosting MSHTML is slightly more lightweight than hosting the WebBrowser control, the savings rarely justify the extra work involved in implementing functionality that is already available in the WebBrowser. It is very likely that the WebBrowser will already be loaded in memory, and navigating to a frameset page will also result in the WebBrowser being loaded as part of the standard working set.

 
<H2><A NAME="Providing_Extra_Cont">Providing Extra Control</A></H2>
<P>Hosts of the WebBrowser and MSHTML components have control over certain functionality. In the case of the WebBrowser control, this includes navigation as well as receiving events when the document is loaded. Hosts of either component can obtain extra control over functionality by implementing the <A HREF="host/ifaces/idochostuihandler/IDocHostUIHandler.htm#IDocHostUIHandler">IDocHostUIHandler</A> and <A HREF="host/ifaces/idochostshowui/IDocHostShowUI.htm#IDocHostShowUI">IDocHostShowUI</A> interfaces. A common use for these interfaces is overriding the context menus that are supplied by default for the browser (this topic is discussed separately below). Uses also include setting the 3-D border, overriding the location in the registry where options are stored, and extending the Dynamic HTML object mModel.

<P>These interfaces are obtained from the host by the component calling
<object id="hhal_3" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_3.Click()>QueryInterface</A> on the
<object id="hhal_4" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_4.Click()>IOleClientSite</A> interface implemented by the hosting application.

 
<H2><A NAME="Controlling_the_Cont">Controlling the Context Menus</A></H2>
<P>A common requirement of hosting the WebBrowser control is the ability to override or add to the context menus that are displayed as the result of a right-click in the browser window. This is of particular interest to applications that are using the WebBrowser control to view rich content but do not want the user to know that HTML is being viewed. This is also advantageous for applications that do not want the user to be able to view the HTML source for the content.

<P>There are two techniques available to achieve this. The first involves the use of the <A HREF="host/ifaces/idochostuihandler/IDocHostUIHandler.htm#IDocHostUIHandler">IDocHostUIHandler</A> interface and allows an application to disable or replace the context menus. The second technique involves the use of the registry and allows the existing context menus to be extended.

 
<H3><A NAME="Overiding_the_Contex">Overriding the context menus</A></H3>
<P>The WebBrowser control's context menus can be overridden entirely by implementing the <A HREF="host/ifaces/idochostuihandler/ShowContextMenu.htm#IDocHostUIHandler__S">IDocHostUIHandler::ShowContextMenu</A> method. Returning E_NOTIMPL or S_FALSE from this method will indicate to the WebBrowser that it should display its own standard context menu. However, returning S_OK will cause the WebBrowser not to display its menus, and it will assume that the host has performed the appropriate action. The host can disable all context menus or bring up its own context menus. The parameters supplied to the host that implements this method allow the host to identify which of the default menus will be displayed by the WebBrowser, as well as the coordinates where the menu will be displayed. This provides the host the full context for the menu. For example, the host can choose only to override the image context menus and not the standard context menus.

 
<H3><A NAME="Adding_to_the_Standa">Adding to the standard context menus</A></H3>
<P>Items can be added to the existing context menus of the WebBrowser by placing entries in the registry and linking these to URLs that execute script. To add additional items to the standard WebBrowser context menus, create or open the following key:

<PRE>HKEY_CURRENT_USER
        Software
            Microsoft
                Internet Explorer
                    MenuExt
</PRE>

<P>Under this key, you create a key whose name contains the text you want displayed in the menu. The default value for this key contains the URL that will be executed. The key name can include the ampersand (&amp;) character, which will cause the character immediately following the &amp; to be underlined. The URL will be loaded inside a hidden HTML dialog box, all the inline script will be executed, and the dialog box will be closed. The hidden HTML dialog's <B>external.menuArguments</B> property contains the <A HREF="../../dhtml/references/objects/obj_window.htm#obj_window">window</A> object of the window on which the context menu item was executed.

<P>The following registry entry will add an item with the title "My Menu Item" to the WebBrowser context menu and will execute the inline script contained in the file "c:\myscript.htm".

<PRE>HKEY_CURRENT_USER
        Software
            Microsoft
                Internet Explorer
                    MenuExt
                        My Menu Item = "file://c:\myscript.htm"
</PRE>

<P>The following are the contents of "c:\myscript.htm".

<PRE>&lt;SCRIPT LANGUAGE="JavaScript" defer&gt;
    var parentwin = external.menuArguments;
    var doc = parentwin.document;
    var sel = doc.selection;
    var rng = sel.createRange();
    var str = new String(rng.text);
    if(str.length == 0)
        rng.text = "MY INSERTED TEXT";
    else
        rng.text =  str.toUpperCase();
    &lt;/SCRIPT&gt;
</PRE>

<P>This script obtains the parent <A HREF="../../dhtml/references/objects/obj_window.htm#obj_window">window</A> object from <B>external.menuArguments</B>. The parent <B>window</B> object is the WebBrowser in which the context menu item was executed. The script then obtains the current selection and, if no selection is present, inserts the text "MY INSERTED TEXT" at the point where the context menu was executed. If there is a selection present, the selected text is changed to uppercase.

<H4>Optional keys</H4>
<P>Under the item registry key created earlier, there are a couple of optional values. One of these specifies on which context menus this item will appear. The other specifies that the script should be run as a dialog.

<P>The "Contexts" DWORD value specifies the context menus in which an item will appear. It is a bit mask consisting of the logical OR of the following values (defined in Mshtmhst.h). These values correspond to the constant passed in an <A HREF="host/ifaces/idochostuihandler/ShowContextMenu.htm">IDocHostUIHandler::ShowContextMenu</A> call. 

<PRE>(0x1 << CONTEXT_MENU_DEFAULT) (evaluates to 0x1) 
(0x1 << CONTEXT_MENU_IMAGE) (evaluates to 0x2) 
(0x1 << CONTEXT_MENU_CONTROL) (evaluates to 0x4) 
(0x1 << CONTEXT_MENU_TABLE) (evaluates to 0x8) 
(0x1 << CONTEXT_MENU_TEXTSELECT) (evaluates to 0x10) 
(0x1 << CONTEXT_MENU_ANCHOR) (evaluates to 0x20) 
(0x1 << CONTEXT_MENU_UNKNOWN) (evaluates to 0x40)
</PRE>

<P>So if, for example, you want this simple extension to appear only in the default menu and the text selection menu, you could create a DWORD value in the registry under the "My Menu Item" key called "Contexts" and set it to 0x11. From C/C++ code, this can be expressed as:

<PRE>(0x1 << CONTEXT_MENU_DEFAULT) | (0x1 << CONTEXT_MENU_TEXTSELECT)</PRE>

<P>The other optional registry DWORD value is "Flags". There is only one bit (0x1) valid for this registry value; it is defined as MENUEXT_SHOWDIALOG in Mshtmhst.h. When this bit is set, the script is run just as if it had been called through the <A HREF="../../dhtml/references/methods/showModalDialog.htm">showModalDialog</A> method. The window that runs the script is not hidden, and the dialog box is not automatically closed after inline and onload script finishes. The <B>external.menuArguments</B> value still contains the window object where the user selected the menu item. 

<H4>The context menu event</H4>
<P>Whenever a context menu extension is triggered, the event object off the main window (<B>external.menuArguments.event</B>) contains information about where the user clicked and which context menu was shown. The mouse coordinates are valid along with <B>event.srcElement</B>. The <B>event.type</B> value contains one of the following strings, indicating which context menu was shown to the user. 

<DL>
<DT>MenuExtDefault</DT>
<DT>MenuExtImage</DT>
<DT>MenuExtControl</DT>
<DT>MenuExtTable</DT>
<DT>MenuExtTextSelect</DT>
<DT>MenuExtAnchor</DT>
<DT>MenuExtUnknown</DT>
</DL>

<H4>Another example</H4>
<P>This example creates a new context menu item on the default menu. This item, called "Show in New Window", will start whatever is clicked on in a new window. So if something is deeply nested in a frameset, you can easily launch a specific frame in its own window. 

<P>Here are the contents of a .reg file that can be run to insert the correct registry settings. Call this Example2.reg. Double-clicking this file in Explorer will insert the settings in your registry. 

<PRE>REGEDIT4

    [HKEY_CURRENT_USER\Software\Microsoft\Internet Explorer\MenuExt\Show in &New Window]
    @="file://c:\\example2.htm"
    "Contexts"=dword:00000001</PRE>

<P>Here are the contents of "C:\example2.htm": 

<PRE>&lt;SCRIPT LANGUAGE="JavaScript" defer&gt;
        open(external.menuArguments.location.href);
    &lt;/SCRIPT&gt;</PRE>

 
<H2><A NAME="Extending_the_Dynami">Extending the Dynamic HTML Object Model</A></H2>
<P>It is possible for the hosting application to extend the Dynamic HTML object model so that scripts can refer to functionality implemented by the host. Such scripts refer to the host by specifying the "external" object that is available from the "window" object. For example, a reference to "window.external.speech" will call the host to resolve the name "speech". All standard script within the document will be executed normally.

<P>This extension mechanism is implemented in the host by providing an
<object id="hhal_5" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_5.Click()>IDispatch</A> interface for the object model extension that will have GetIDsofNames and Invoke called on it to resolve any references to the external object. The <B>IDispatch</B> that the host provides is obtained by the WebBrowser or MSHTML component by calling the host's <A HREF="host/ifaces/idochostuihandler/GetExternal.htm#IDocHostUIHandler__G">IDocHostUIHandler::GetExternal</A> method.

<P>For an example of how to extend the Dynamic HTML object model, see the Driller sample in the Internet Client SDK.


<H2><A NAME="Download_Control">Download Control</A></H2>
<P>Hosts can control certain aspects of downloading, such as frames, images, Java, and so on, by implementing an ambient property defined as DISPID_AMBIENT_DLCTL. When the host's
<object id="hhal_6" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_6.Click()>IDispatch::Invoke</A> method is called with <I>dispidMember</I> set to DISPID_AMBIENT_DLCTL, it should place zero or a combination of the following values in <I>pvarResult</I>:

<P><TABLE>
<TR><TD>DLCTL_DLIMAGES</TD>
<TD>The browsing component will download images from the server.</TD></TR>
<TR><TD>DLCTL_VIDEOS </TD>
<TD>The browsing component will play any video clips that are contained in the document.</TD></TR>
<TR><TD>DLCTL_BGSOUNDS</TD>
<TD>The browsing component will play background sounds associated with the document.</TD></TR>
<TR><TD>DLCTL_NO_SCRIPTS</TD>
<TD>The browsing component will not execute any scripts.</TD></TR>
<TR><TD>DLCTL_NO_JAVA </TD>
<TD>The browsing component will not execute any Java applets.</TD></TR>
<TR><TD>DLCTL_NO_RUNACTIVEXCTLS </TD>
<TD>The browsing component will not execute any ActiveX Controls in the document.</TD></TR>
<TR><TD>DLCTL_NO_DLACTIVEXCTLS </TD>
<TD>The browsing component will not download any ActiveX Controls in the document.</TD></TR>
<TR><TD>DLCTL_DOWNLOADONLY </TD>
<TD>The browsing component will download the page but not display it.</TD></TR>
<TR><TD>DLCTL_NO_FRAMEDOWNLOAD </TD>
<TD>The browsing component will not download frames but will download and parse the frameset page. The browsing component will also ignore the frameset and render no frame tags.</TD></TR>
<TR><TD>DLCTL_RESYNCHRONIZE </TD>
<TD>The browsing component will ignore what is in the cache and ask the server for updated information. The cached information will be used if the server indicates that the cached information is up to date. This causes the <A HREF="../monikers/enums/BINDF.htm#BINDF_RESYNCHRONIZE">BINDF_RESYNCHRONIZE</A> flag to be set when making requests through URLMON.</TD></TR>
<TR><TD>DLCTL_PRAGMA_NO_CACHE </TD>
<TD>The browsing component will force the request through to the server and ignore the proxy, even if the proxy indicates that the data is up to date. This causes the <A HREF="../monikers/enums/BINDF.htm#BINDF_PRAGMA_NO_CACH">BINDF_PRAGMA_NO_CACHE</A> flag to be set when making requests through URLMON.</TD></TR>
<TR><TD>DLCTL_FORCEOFFLINE </TD>
<TD>The browsing component will always operate in offline mode. This causes the <A HREF="../monikers/enums/BINDF.htm#BINDF_OFFLINEOPERATI">BINDF_OFFLINEOPERATION</A> flag to be set even if the computer is connected to the Internet when making requests through URLMON.</TD></TR>
<TR><TD>DLCTL_NO_CLIENTPULL </TD>
<TD>The browsing component will not perform any client pull operations.</TD></TR>
<TR><TD>DLCTL_SILENT </TD>
<TD>The browsing component will not display any user interface. This causes the <A HREF="../monikers/enums/BINDF.htm#BINDF_SILENTOPERATIO">BINDF_SILENTOPERATION</A> flag to be set when making requests through URLMON.</TD></TR>
<TR><TD>DLCTL_OFFLINEIFNOTCONNECTED</TD>
<TD>The browsing component will operate in offline mode if not connected to the Internet. This causes the <A HREF="../monikers/enums/BINDF.htm#BINDF_GETFROMCACHE_I">BINDF_GETFROMCACHE_IF_NET_FAIL</A> flag to be set if the computer is connected to the Internet when making requests through URLMON.</TD></TR>
<TR><TD>DLCTL_OFFLINE </TD>
<TD>Same as DLCTL_OFFLINEIFNOTCONNECTED.</TD></TR>
</TABLE>


<H2><A NAME="Security_Manager">Security Manager</A></H2>
<P>Hosts of the browsing components can implement their own security management and override the settings that exist for the WebBrowser. This is achieved by implementing the <A HREF="../zone/ifaces/iinternetsecuritymanager/IInternetSecurityManager.htm#IInternetSecurityMan">IInternetSecurityManager</A> interface. The browsing component will obtain this interface by calling the host's
<object id="hhal_7" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_7.Click()>IServiceProvider::QueryService</A> method with SID_SInternetSecurityManager. For more information on security management, see <A HREF="../zone/overview.htm#SecurityZones">About URL Security Zones</A>.
<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
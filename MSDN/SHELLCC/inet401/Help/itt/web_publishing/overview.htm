<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Web Publishing Overview</TITLE>

<META NAME=MS-HKWD CONTENT="Web Publishing Overview">
<META NAME="Keywords" CONTENT="Internet Tools & Technologies">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT, Mac">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="ch_wpsdk_ovr"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Web Publishing Overview"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../art/headbard.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Web Publishing Overview"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR>
<TR><TD><PRE><IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="wpsdk.htm">Topic Contents</A></PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="wpsdk.htm">Microsoft Web Publishing SDK</A>
<IMG SRC="../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="reference.htm">Web Publishing Programmer's Reference</A></PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>Web Publishing Overview</H1>

<P>This section describes the Microsoft&#174; Web Publishing Software Development Kit (SDK), including a description of the command-line options for the Web Publishing Wizard, Wpwiz.exe. Use this SDK to access Web Publishing functionality through your application. 
<P>For detailed descriptions of the interface methods and for code examples, see the <A HREF="reference.htm">Web Publishing Programmer's Reference</A>. Note that the examples in the Web Publishing Programmer's Reference are not complete samples and often omit most error processing.
<P><A CLASS=tctop HREF="#What_s_in_the_SDK"><IMG SRC="../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">What's in the SDK</A><BR>
<P><A CLASS=tctop HREF="#Web_Publishing_Sites"><IMG SRC="../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Web Publishing Sites</A><BR>
<P><A CLASS=tctop HREF="#sec_posting_file_info"><IMG SRC="../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">The Posting Information File</A><BR>
<P><A CLASS=tctop HREF="#wpsdk_api_ovr"><IMG SRC="../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">The Web Publishing API</A><BR>
<P><A CLASS=tctop HREF="#wpsdk_spi_ovr"><IMG SRC="../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">The Web Publishing SPI</A><BR>
<P><A CLASS=tctop HREF="#wpsdk_fileupload_ovr"><IMG SRC="../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">The File Upload Control</A><BR>
<P><A CLASS=tctop HREF="#Web_Publishing_Wizar"><IMG SRC="../../art/arrowy.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowy.gif">Web Publishing Wizard</A><BR>
<H2><A NAME="What_s_in_the_SDK">What's in the SDK</A></H2>
<P>The Web Publishing SDK includes the following:
<TABLE>
<TR><TD><A CLASS=tctop HREF="#wpsdk_api_ovr">The application programming interface (API)</A>. The API is designed for use by applications that want to include Web Publishing functionality. The API manages multiple publishing destinations (called sites) and calls the service provider interface (SPI) to do the work of transferring the files over the network. The API can support multiple service providers (implementations of the SPI), and provides mechanisms for selecting from among installed providers when setting up a new site.</TD><TR><TD><A CLASS=tctop HREF="#wpsdk_spi_ovr">The service provider interface (SPI)</A>. The SPI consists of a COM interface and several helper functions; the latter must be callable entry points in the DLL that services the COM interface. </TD><TR><TD><A CLASS=tctop HREF="#wpsdk_fileupload_ovr">The File Upload Control</A>. This control packages the Web Publishing API's functionality in an ActiveX<SMALL>(tm)</SMALL> control, which can easily be included on HTML pages.</TD></TABLE>
<H2><A NAME="Web_Publishing_Sites">Web Publishing Sites</A></H2>
<P>A site is a destination to which files can be published. Typically this is a computer connected to the Internet and running an HTTP server. The concept of a site in the Web Publishing API encompasses all information required in order to get files from the user's local computer onto the destination computer. The API handles management of the core set of information common to all varieties of sites, namely:
<UL><LI>A friendly name.
<LI>The URL from which the files will be retrievable once they have been published (called the <I>destination URL</I>).
<LI>The service provider installed on the user's local computer that is used to transfer files to the destination computer.
<LI>A <I>local base directory </I>that corresponds to the destination URL. This is an optional feature of a site; if it is set it indicates how much of the path of a local file should be preserved when publishing to the destination computer. For example, if a site "MySite" has its local base directory set to C:\MYSITE and its destination URL set to http://www.mysite.com, then these example files would be posted as follows.
<TABLE>
<TR><TD><B>Local file</B></TD>
<TD><B>Posted to
</B></TD>
</TR>
<TR><TD>c:\mysite\file.html</TD>
<TD>http://www.mysite.com/file.html</TD>
</TR>
<TR><TD>c:\mysite\images\gifs\me.gif</TD>
<TD>http://www.mysite.com/images/gifs/me.gif</TD>
</TR>
</TABLE>
<P>If a file is posted to a site with a local base directory specified, and the file is not under the local base directory tree, it is posted directly to the destination URL.
<TABLE>
<TR><TD><B>Local file</B></TD>
<TD><B>Posted to
</B></TD>
</TR>
<TR><TD>c:\site2\images\icons\redball.gif</TD>
<TD>http://www.mysite.com/redball.gif</TD>
</TR>
</TABLE>
</UL>
<P>When the preceding information is gathered and stored for a given destination computer, a site is said to be "created." <B>WpCreateSite</B> collects these four pieces of information, either from the parameters passed to it or possibly, in the case of the service provider, by querying the service providers installed on the system to see whether they can publish to the specified destination URL. The information is then stored in a registry key under HKCU\Software\Microsoft\WebPost\Sites named with the friendly name of the site.
<P>It is likely that most service providers will require more than this minimal set of information in order to get files onto the destination computer. For instance, the Microsoft<SMALL>&#174;</SMALL> FTP service provider requires the name of the FTP server, the subfolder on the server, and possibly a user name and password in order to upload files. Service providers are encouraged to store this extra information on the same site key used by the API. Aside from simple centralization, the advantage of keeping information there is that any parameter values specified in the posting information file on the destination computer (see <A HREF="#sec_posting_file_info">The Posting Information File</A>) are automatically saved under this key when the site is first configured, making those parameters easily available to the service provider and possibly eliminating the need to obtain technical information from the user.

<H2><A NAME="sec_posting_file_info">The Posting Information File</A></H2>
<P>Because of variations among Internet servers, Microsoft requests that Internet service providers (ISPs) include a posting information file on their Internet servers. This file contains details about the posting protocol and policy. The Web Publishing API uses the information in the file to help with the detection of the Web Publishing protocol.

<P>The version 1.5 release supports a new mechanism that meets with the approval of the W3C, in addition to the old postinfo.htm from version 1.1. The new mechanism allows the ISP to place a &lt;META NAME="POSTINFO" CONTENT="<I>URL</I>"&gt; tag in the default page on their server. This tag specifies a URL to the posting information file. The URL can be any path (even another machine) with any name but must be enclosed in quotation marks.

<P>The file is simply a text file with sections and keys. The version statement must be the first statement in the file, followed by section(s) defining the transfer types. Multiple protocols can be supported on the server. Each new protocol section must start with the transfer type in brackets and include keys required by that provider. The transfer types must appear in priority order. When the Web Publishing client binds to a site it will attempt to use the first protocol listed; if that is not available, then it will try the next, and so on The transfer type can be specified as either a program ID or a GUID, enclosed in brackets. The convention for a program ID is <B>Webpost.</B><I>ProviderDll</I>, where <I>ProviderDll</I> is the actual file name of the provider. A GUID must include the standard braces within the brackets. The GUIDs for the installed providers can be found in the registry under HKLM\System\CurrentControlSet\Services\Webpost\Providers.

<P>All blank lines will be ignored and the fields are not case sensitive. Case will be preserved on all quoted string values. The keys can appear in any order within a section. There is one supported parameter and that is the <B>$USERNAME</B> variable. The Web Publishing client will substitute the local user name for that value when read from the server. The following is a sample posting information file that could appear on a server:
<PRE>Version=1.5

[WebPost.FTPWPP]
ServerName="Server"
Subfolder="ftpupl/$USERNAME"
DefaultPage="default.html"

[WebPost.CRSWPP]
ServerName="Server"
</PRE>
<P>For a complete list of parameters for different service providers, including CRS, FTP, and HTTP, see <A HREF="reference/parameters.htm">Appendix C, Parameters</A>, in the <A HREF="reference.htm">Web Publishing Programmer's Reference</A>.

<H2><A NAME="wpsdk_api_ovr">The Web Publishing API</A></H2>
<P>The Web Publishing application programming interface (API) makes it possible for authoring tools to post Web pages to an Internet site with just one call to the <B>WpPost</B> function. In a typical scenario, an authoring tool's <B>File</B> menu would include a "Post to Web" command that, when clicked, causes the tool to call the <B>WpPost</B> function. This function starts a wizard that asks the user for a friendly name for the Internet site and the Uniform Resource Locator (URL) for the site. Next, the function connects to the Internet server at the given URL, determines the protocol to use for posting the Web pages, and then posts the requested files. For subsequent posting to the same site, this function remembers the details of how to connect to the site, and posts the files with little user intervention. Thus, the Web Publishing API maintains a friendly site name, remembers all the details involved in posting to that site, and allows the applications to easily post Web pages to a site or to the URL associated with that site.

<P>As an alternative to the wizard, an authoring tool can let the user choose the Web site before calling <B>WpPost</B> by displaying a list of sites (plus a "New Site" item) obtained by a call to the <B>WpListSites</B> function. The list of sites could be in a nested menu that appears when the user clicks the "Post to Web" command.

<H3><A NAME="Interface_Definition">Interface Definition</A></H3>
<P>The Web Publishing API consists of the following methods.
<TABLE>
<TR><TD><B>Method
 </B></TD><TD><B>Description
</B></TD></TR>
<TR><TD><B>WpBindToSite</B> </TD><TD>Obtains a pointer to a service provider object supporting either the <B>IWPSite</B> interface or the <B>IWPProvider</B> interface.</TD></TR>
<TR><TD><B>WpCreateSite</B> </TD><TD>Creates a new site entry in the registry.</TD></TR>
<TR><TD><B>WpCreateSiteEx</B> </TD><TD>Creates a new site entry in the registry, using a user name and password.</TD></TR>
<TR><TD><B>WpDeleteSite</B> </TD><TD>Deletes the information for a site from the registry.</TD></TR>
<TR><TD><B>WpDoesSiteExist</B> </TD><TD>Determines whether or not the specified site exists.</TD></TR>
<TR><TD><B>WpEnumProviders</B> </TD><TD>Enumerates the currently installed service providers.</TD></TR>
<TR><TD><B>WpGetErrorString</B> </TD><TD>Translates an error code.</TD></TR>
<TR><TD><B>WpListSites</B> </TD><TD>Lists the sites for which there is currently information in the registry.</TD></TR>
<TR><TD><B>WpPost</B> </TD><TD>Posts one or more files or directories to the specified site.</TD></TR>
<TR><TD><B>WpPostEx</B> </TD><TD>Posts one or more files or directories to the specified site, using a user name and password.</TD></TR>
<TR><TD><B>WpPostFile</B> </TD><TD>Posts one file or directory to the specified site.</TD></TR></TABLE>
<H2><A NAME="wpsdk_spi_ovr">The Web Publishing SPI</A></H2>
<P>The Web Publishing service provider interface (SPI) describes the interface each service provider must support to allow the core web publishing services to post content. The SPI DLLs are OLE COM servers provide the following methods and helper functions. The Web Publishing API functions and the Web Publishing Wizard route requests to a provider based on a site name or URL, and use the SPI functions to post the files. 

<H3><A NAME="Interface_Definition">Interface Definition</A></H3>
<P>The Web Publishing SPI consists of the following methods.
<TABLE>
<TR><TD><B>Helper function
 </B></TD><TD><B>Description
</B></TD></TR>
<TR><TD><B>WppBindToSite</B> </TD><TD>Retrieves the address of an interface if the provider DLL owns the site name or the URL. </TD></TR>
<TR><TD><B>WppDeleteSite</B> </TD><TD>Deletes a site name that has been configured.</TD></TR></TABLE>
<TABLE>
<TR><TD><B>Interface method
 </B></TD><TD><B>Description
</B></TD></TR>
<TR><TD><B>AddWizardPages</B> </TD><TD>Allows the provider DLLs to plug pages into the wizard invoked by the <B>WpPost</B> function.</TD></TR>
<TR><TD><B>DeleteFile</B> </TD><TD>Deletes the given file from the destination site. </TD></TR>
<TR><TD><B>FindClose</B> </TD><TD>Closes the specified search handle.</TD></TR>
<TR><TD><B>FindFirstFile</B> </TD><TD>Searches a directory for a file whose name matches the specified file name on the destination site.</TD></TR>
<TR><TD><B>FindNextFile</B> </TD><TD>Continues a file search from a previous call to the <B>FindFirstFile</B> function.</TD></TR>
<TR><TD><B>GetError</B> </TD><TD>Retrieves additional information about an error. </TD></TR>
<TR><TD><B>GetParam</B> </TD><TD>Retrieves a parameter value for this site. </TD></TR>
<TR><TD><B>GetSiteInfo</B> </TD><TD>Retrieves the site information for the current object.</TD></TR>
<TR><TD><B>NetworkConnect</B> </TD><TD>Connects to the Internet.</TD></TR>
<TR><TD><B>NetworkDisconnect</B> </TD><TD>Disconnects from the Internet.</TD></TR>
<TR><TD><B>PostFiles</B> </TD><TD>Posts files to the specified URL. </TD></TR>
<TR><TD><B>ServerLogin</B> </TD><TD>Logs the user on to the Internet server.</TD></TR>
<TR><TD><B>ServerLogout</B> </TD><TD>Logs the user out of the Internet server.</TD></TR>
<TR><TD><B>SetParam</B> </TD><TD>Sets the value of a parameter for a given site. </TD></TR>
<TR><TD><B>SetProgressUpdateProc</B> </TD><TD>Specifies the callback function.</TD></TR></TABLE>
<H3><A NAME="Helper_Functions">Helper Functions</A></H3>
<P>Each service provider DLL must export one helper function not available through the COM interface: <B>WppBindToSite</B>. This entry point will be called from <B>WpBindToSite</B> and <B>WpPost</B> in order to obtain a pointer to the service provider object. It will also be called from <B>WpCreateSite</B>.

<P>If a service provider exports a <B>WppDeleteSite</B> entry point, it will be called from <B>WpDeleteSite</B>.

<P>Note that one of the primary design changes in Web Publishing 1.5 is the shift of responsibility for maintaining site information from the individual service providers to the Web Publishing API. Providers should not maintain site-related state information independently of the Web Publishing API except when necessary. However, if separate record-keeping <I>is</I> necessary, a service provider is guaranteed under this model to be notified whenever sites are added, removed, or utilized for posting.

<H3><A NAME="Self_Registration_Re">Self-Registration Responsibilities</A></H3>
<P>Service provider DLLs are required to export a <B>DllRegisterServer</B> method that performs the following functions:
<OL><LI>Registers its object's CLSID according to standard COM procedure.
<LI>Inserts a subkey for itself under HKLM\System\CurrentControlSet\Services\WebPost\Providers named with its CLSID and containing the following values.
<TABLE>
<TR><TD><B>Value
 </B></TD><TD><B>Meaning 
</B></TD></TR>
<TR><TD><B>Provider</B> </TD><TD>A string that contains the name of the provider. This name is used in the wizard; it appears in the list box that contains the names of the providers. </TD></TR>
<TR><TD><B>Path</B> </TD><TD>A string that contains the path of the service provider DLL. </TD></TR>
<TR><TD><B>Priority</B> </TD><TD>A <B>DWORD</B> value that indicates the provider's priority. Zero is highest priority. Microsoft Web Publishing 1.5 service providers' priorities start at 0x00010000 and are 0x00000100 apart.</TD></TR>
<TR><TD><B>PostInfoRequired</B>(new) </TD><TD>If this <B>DWORD</B> value is non-zero, then this service provider requires a posting information file in order to obtain all the information necessary to post. If the posting information file cannot be retrieved, the attempt to create a site using this provider will fail.</TD></TR></TABLE>
<LI>(Optional.) Calls <B>WpCreateSite</B> to add the sites it supports to the registry. 
</OL>
<H2><A NAME="wpsdk_fileupload_ovr">The File Upload Control</A></H2>
<P>The File Upload Control is an ActiveX control that uses the Web Publishing API. It can be included on an HTML page to allow posting to a server. Typical applications would be for a file upload area, or for an ISP to allow easy uploading to a personal Web pages site. The control also provides all configuration information normally provided by the wizard.

<P>When the user sees the control on a page, he or she can simply drag files onto it to have them instantly sent, or double-click to display a dialog allowing selection of the local files to be transmitted. Right-clicking the icon will bring up a property sheet for the site, which will allow the user to edit the parameters. 

<P><B>Note</B>  If you intend to use this control from Visual Basic&#174; applications on machines where Internet Explorer is not installed, you will need the following binary files: OLEPRO32.DLL, MSVCRT40.DLL, MSVCIRT.DLL.
<H3><A NAME="Interface_Definition">Interface Definition</A></H3>
<P>The File Upload Control interface has the following methods.
<TABLE>
<TR><TD><B>Method
</B></TD><TD><B>Description
</B></TD></TR>
<TR><TD><B>AboutBox</B> </TD><TD>Displays information about the File Upload Control.</TD></TR>
<TR><TD><B>CreatePermBinding</B> </TD><TD>Creates a permanent site and binds to it.</TD></TR>
<TR><TD><B>CreateTempBinding</B> </TD><TD>Creates a temporary site and binds to it.</TD></TR>
<TR><TD><B>FoundPostInfo</B> </TD><TD>Checks whether a postinfo file was found on the target server.</TD></TR>
<TR><TD><B>SetBindingParam</B> </TD><TD>Sets binding parameters.</TD></TR></TABLE>
<P>If the site should be retained on the client machine after the post is complete, the <B>CreatePermBinding</B> method should be used. The <B>CreatePermBinding</B> method will allow the author to specify a site name, URL, and, optionally, a provider. The call will return a value indicating whether the site was created, the site already existed, or the call failed. The author also has the ability to determine whether the path information from the client will be preserved when passing the file to the server. There are three flags supported for this method: strip, preserve, and prompt. The strip option can be used in a raw file upload situation where only the files are desired. The preserve option will assume the path of the first file/directory sent will become the base directory for this site. The prompt option will display a dialog allowing the user to set the local base directory. This dialog will be preloaded with the path of the first file/directory but the user will be allowed to change it as needed.

<P>If the site definition will only be used for a single session, the <B>CreateTempBinding</B> method should be called. The only UI required of the ActiveX control is the file selection dialog, which is only displayed if the user double-clicks the icon, a transferring files dialog similar to the one used in the wizard, and a dialog indicating the completion status (success or error). There is also a dialog that can be brought up on a right-click that allows the user to set the local base directory.

<H2><A NAME="Web_Publishing_Wizar">Web Publishing Wizard</A></H2>
<P>This section describes the command-line options for the Web Publishing Wizard, Wpwiz.exe.

<P><B>Syntax</B>
<P>Wpwiz [<B>&#150;w</B> <B>"</B><I>FriendlyName</I><B>"</B>] [<B>&#150;u</B> <B>"</B><I>URL</I><B>"</B>] [<B>&#150;n</B> <B>"</B><I>UserName</I><B>"</B>] [<B>&#150;p</B> <B>"</B><I>password</I><B>"</B>] [<B>&#150;s</B> <B>"</B><I>Service</I><B>"</B>] [<B>&#150;f</B> [<I>flags</I>]] <I>path</I> [...]

<TABLE>
<TR><TD><B>Parameters
 </B></TD><TD></TD></TR>
<TR><TD>-w "<I>FriendlyName</I>" </TD><TD>The friendly name to use for the site.</TD></TR>
<TR><TD>-u "<I>URL</I>" </TD><TD>The destination URL to use for the site.</TD></TR>
<TR><TD>-n "<I>UserName</I>" </TD><TD>The username to use for the site.</TD></TR>
<TR><TD>-p "<I>Password</I>" </TD><TD>The password to use for the site.</TD></TR>
<TR><TD>-s "<I>Service</I>" </TD><TD>The service provider to use for the site.</TD></TR>
<TR><TD>-f[<I>flags</I>] </TD><TD>Force flags. By default the Wizard will skip any pages for which the required information has already been provided on the command line. These flags allow you to override this default behavior and force the Wizard to show whatever pages you specify. 

<P>There should not be a space between the "-f" and the list of page letter-identifiers. The letter-identifiers may appear in any order, and again should not be separated by spaces. The letter-identifiers are:
<TABLE>
<TR><TD>a</TD>
<TD>All pages (shorthand for "iswnup")</TD>
</TR>
<TR><TD>i</TD>
<TD>Introductory (welcome) page</TD>
</TR>
<TR><TD>s </TD>
<TD>Source paths page (where user specifies file/folder to be published)</TD>
</TR>
<TR><TD>w </TD>
<TD>Web server page (where user selects from list of existing friendly-named sites)</TD>
</TR>
<TR><TD>n </TD>
<TD>Name the web server pages (where user provides friendly name for new site)</TD>
</TR>
<TR><TD>u </TD>
<TD>URL page (where user provides URL for new site)</TD>
</TR>
<TR><TD>p </TD>
<TD>Provider-specific pages (i.e., FTP prompts for Server name and Subfolder)</TD>
</TR>
</TABLE></TD></TR>
<TR><TD>-b</TD><TD>Disable auto-binding. This only applies when a new site is being created.</TD></TR>
<TR><TD>-i</TD><TD>Don't recurse into folder being published; only publish its immediate children.</TD></TR>
<TR><TD><I>path</I> [<I>path</I> [<I>path</I> [...]]]</TD><TD>List of files to be published. Paths must be complete and absolute. Paths may be interspersed with flags.</TD></TR></TABLE>
<P><B>Example</B>

<P>The following example invokes the Web Publishing wizard with the friendly name <B>New Site</B>, the URL <B>http://myserver.com/myfolder</B>, the user name <B>anonymous</B>, the password <B>e-mail</B>, with all flags and no auto-binding on the files Index.htm and Hello.htm. Note that the final path must be enclosed in double-quote marks since it contains a space.

<PRE>C:\&gt; wpwiz -w "New Site" -u "http://myserver.com/myfolder"
-n "anonymous" -p "e-mail" -s "FTP" -fa -b -i C:\Index.htm
"C:\HTML Files\Hello.htm" 
</PRE>
<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
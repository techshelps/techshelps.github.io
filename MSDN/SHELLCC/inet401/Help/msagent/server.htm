<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Programming the Microsoft Agent Server Interface</TITLE>

<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="PLATFORM" CONTENT="Windows">
<META NAME=MS-HKWD CONTENT="Programming the Microsoft Agent Server Interface">
<META NAME="Keywords" CONTENT="Microsoft Agent, MSAgent">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT">
<META NAME="ROBOTS" CONTENT="all">

<!--@ SNIFF_START -->
<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../code/ver.js"></SCRIPT>
<!--@ SNIFF_END -->

<SCRIPT DEFER SRC="../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Microsoft Agent"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../art/headbare.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Microsoft Agent"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR>
<TR><TD><PRE><IMG SRC="../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" ID=TOC HREF="../contents.htm">Contents</A>  <IMG SRC="../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="../index.htm">Index</A>  <IMG SRC="../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="agent.htm">Topic Contents</A></PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>Programming the Microsoft Agent Server Interface</H1>
<P><H4>ActiveX&#153; Technology for Interactive Software Agents</H4>
<P><IMG SRC="art/agent.gif" WIDTH="123" HEIGHT="123" ALT="agent">

<P>August 1997
<BR>Microsoft Corporation
<p><blockquote><b>Note:</b> This document is provided for informational purposes only and Microsoft makes no warranties, either expressed or implied, in this document. The entire risk of the use or the results of this document remains with the user.</blockquote>
<P><blockquote>Information in this document is subject to change without notice. Companies, names, and data used in examples herein are fictitious unless otherwise noted. No part of this document may be reproduced or transmitted in any form or by any means, electronic or mechanical, for any purpose, without the express written permission of Microsoft Corporation.
<P>Microsoft may have patents or pending patent applications, trademarks, copyrights, or other intellectual property rights covering subject matter in this document. The furnishing of this document does not give you any license to these patents, trademarks, copyrights, or other intellectual property rights. Microsoft, MS, MS-DOS, Windows, Windows NT, and the Windows logo are either registered trademarks or trademarks of Microsoft Corporation in the U.S. and/or other countries. Other product and company names mentioned herein may be the trademarks of their respective owners.</blockquote>

<P><b>Contents</b>
<P> <A HREF="#TOPIC1">Introduction</A>
<P> <A HREF="#TOPIC2">Adding Microsoft Agent Functionality to Your Application</A>
<P> <A HREF="#TOPIC3">Loading Character and Animation Data</A>
<P> <A HREF="#TOPIC4">Creating a Notification Sink</A>
<P> <A HREF="#TOPIC5">Accessing Services Using Java</A>
<P> <A HREF="#TOPIC6">Reference</A>

<P><H3><A NAME="TOPIC1"></A>Introduction</H3>
<P>Microsoft Agent provides services that enable you to program animated characters from an application. These services are implemented as an OLE Automation server. OLE Automation enables an application to control another application's object programmatically. This document assumes an understanding of the Component Object Model (COM) and OLE. For an introduction to these services, see  the <A HREF="apiovw.htm">Programming Interface Overview</A>.
Sample programs are available from the <A HREF="samples.htm">Samples page</A>.
<P><H3><A NAME="TOPIC2"></A>Adding Microsoft Agent Functionality to Your Application</H3>
<P>To access Microsoft Agent services, create an instance of the server and request a pointer to a specific interface that the server supports using the standard COM convention. In particular, the COM library provides an API function, <b>CoCreateInstance</b>, that creates an instance of the object and returns a pointer to the requested interface of the object. Request a pointer to the <b>IAgent</b> interface in your <b>CoCreateInstance</b> call or in a subsequent call to <b>QueryInterface</b>.
<P>The following code illustrates this in C/C++:
<P><PRE>hRes = CoCreateInstance(CLSID_AgentServer,
                  NULL,
                  CLSCTX_SERVER,
                  IID_IAgent,
                  (LPVOID *)&amp;pAgent);
</PRE>
<P>If the Microsoft Agent server is running, this function connects to the server; otherwise, it starts up the server.
<P>Functions that take pointers to BSTRs allocate memory using <b>SysAllocString</b>. It is the caller's responsibility to free this memory using <b>SysFreeString</b>.
<P><H3><A NAME="TOPIC3"></A>Loading Character and Animation Data</H3>
<P>Once you have a pointer to the <b>IAgent</b> interface, you can use the <b>Load</b> method to load a character and retrieve its <b>IDispatch</b> interface:
<P><PRE>   // Create a variant to store the full path of the character to load

   VariantInit(&amp;vPath);

   vPath.vt = VT_BSTR;
   vPath.bstrVal = SysAllocString(kpwszCharacter);

   // Load the character

   hRes = pAgent-&gt;Load(vPath, &amp;lCharID, &amp;lRequestID);

   // Get its IDispatch interface

   hRes = pAgent-&gt;GetCharacter(lCharID, &amp;pdCharacter);
</PRE>
<P>You can then use this information to request a pointer to the <b>IAgentCharacter</b>:
<P><PRE>   // Query for IAgentCharacter

   hRes = pdCharacter-&gt;QueryInterface(IID_IAgentCharacter, (LPVOID *)&amp;pCharacter);
   
// Release the IDispatch

   pdCharacter-&gt;Release();
</PRE>
<P>You can use this interface to access the character's methods:
<P><PRE>   // Show the character.  The first parameter tells Microsoft
   // Agent to show the character by playing an animation.

   hRes = pCharacter-&gt;Show(FALSE, &amp;lRequestID);

   // Make the character speak

   bszSpeak = SysAllocString(L&quot;Hello World!&quot;);

   hRes = pCharacter-&gt;Speak(bszSpeak, NULL, &amp;lRequestID);

   SysFreeString(bszSpeak);
</PRE>
<P>When you no longer need Microsoft Agent services, such as when your client application shuts down, release its interfaces.  Note that releasing the character interface does not unload the character. Call the <b>Unload</b> method to do this before releasing the <b>IAgent</b> interface:
<P><PRE>// Clean up

if (pCharacter) {

   // Release the character interface

   pCharacter-&gt;Release();

   // Unload the character.  NOTE:  releasing the character
   // interface does NOT make the character go away.  You must
   // call Unload.

   pAgent-&gt;Unload(lCharID);
}
   
// Release the Agent

pAgent-&gt;Release();

VariantClear(&amp;vPath);
</PRE>
<P><H3><A NAME="TOPIC4"></A>Creating a Notification Sink</H3>
<P>To be notified of events by Microsoft Agent, you must implement the <b>IAgentNotifySink</b> interface, and create and register an object of that type following COM conventions:
<P><PRE>// Create a notification sink

pSink = new AgentNotifySink;

pSink-&gt;AddRef();

// And register it with Microsoft Agent

hRes = pAgent-&gt;Register((IUnknown *)pSink, &amp;lNotifySinkID);
</PRE>
<P>Remember to unregister your notification sink when your application shuts down and releases Microsoft Agent's interfaces.
<P><H3><A NAME="TOPIC5"></A>Accessing Services Using Java</H3>
<P>You can also access Microsoft Agent services from a Java&#153; applet. Many of the functions accessible through the Microsoft Agent interfaces return values through parameters passed by reference. In order to pass these parameters from Java, it is necessary to create single-element arrays in your code and pass them as parameters to the appropriate function. If you're using Microsoft Visual J++&#153; and have run the Java Type Library Wizard on the Microsoft Agent server, refer to the summary.txt file to review which functions require array arguments. The procedure is similar to that in C; you use the <b>IAgent</b> interface to create an instance of the server, then load the character:
<P><PRE>private IAgent            m_Agent = null;
private IAgentCharacter   m_Merlin[] = {null};
private int               m_MerlinID[] = {-1};
private int               m_RequestID[] = {0};
private final String      m_CharacterPath = &quot;c:\\agentx\\agtchared\\merlin.acs&quot;;

public void start()
{
      // Start the Microsoft Agent Server

      m_Agent = (IAgent) new AgentServer();

      try
      {
         // The filespec parameter of the Load method is a 
         // COM variant to accept alternate Agent data providers.
         // We want a standard provider so we can just specify
         // the filespec for our character.

         Variant characterPath = new Variant();
         characterPath.putString(m_CharacterPath);

         // Load the character

         m_Agent.Load(characterPath,
                   m_MerlinID,
                   m_RequestID);
      }

</PRE>
<P>Then get the <b>IAgentCharacter</b> interface that enables you to access its methods:
<P><PRE>// Get the IAgentCharacter interface for the loaded
// character by passing its ID to the Agent server.

m_Agent.GetCharacter(m_MerlinID[0], m_Merlin);

// Show the character

m_Merlin[0].Show(FALSE, m_RequestID);

// And speak hello

m_Merlin[0].Speak(&quot;Hello World!&quot;, &quot;&quot;, m_RequestID);
</PRE>
<P>Similarly, to be notified of events, you must implement the <b>IAgentNotifySink</b> interface, creating and registering an object of that type:
<P><PRE>   
...
// Declare an Agent Notify Sink so that we can get
// notification callbacks from the Agent server.

private AgentNotifySink m_Sink = null;
private int            m_SinkID[] = {-1};

public void start()
   {
   ...
   // Create and register a notify sink

   m_Sink = new AgentNotifySink();

   m_Agent.Register(m_Sink, m_SinkID);
   ...
   // Give our notify sink access to the character

   m_Sink.SetCharacter(m_Merlin[0]);
   ...
   }

</PRE>
<P><H3><A NAME="TOPIC6"></A>Reference</H3>
<P>This reference contains the following sections:
<P> <A HREF="#INTERFACES">Interfaces</A>
<P> <A HREF="#EVENTS">Events</A>
<P><H4><A NAME="INTERFACES"></A>Interfaces</H4>
<P>Microsoft Agent defines interfaces that allow applications to access its services, enabling an application to control the animation of a character, support user input events, and specify output.
<P>The AgentServer.h file defines all the Microsoft Agent interfaces.
<P><H4><A NAME="IAGENT"></A>IAgent</H4>
<P><b>IAgent</b> defines an interface that allows applications to load characters, receive events, and check the current state of the Microsoft Agent Server.
<P><H4>Methods in Vtable Order</H4>
<P>
<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>IAgent Methods</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Load</b></TD>
<TD>Loads a character's data file.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Unload</b></TD>
<TD>Unloads a character's data file.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Register</b></TD>
<TD>Registers a notification sink for the client.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Unregister</b></TD>
<TD>Unregisters a client's notification sink.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetCharacter</b></TD>
<TD>Returns the <b>IAgentCharacter</b> interface for a loaded character.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetSuspended</b></TD>
<TD>Returns whether the server is currently suspended.
</TD>
</TR>
</TABLE>
<P><b><A NAME="IAGENT::GETCHARACTER"></A></b><b>IAgent::GetCharacter</b>
<P><PRE>HRESULT GetCharacter(
   long dwCharID  // character ID
);
</PRE>
<P>Retrieves the <b>IAgentCharacter</b> for a loaded character. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>DwCharID </i>
<P><blockquote>The character's ID.</blockquote>
<P><HR>
<P><b><A NAME="IAGENT::GETSUSPENDED"></A></b><b>IAgent::GetSuspended</b>
<P><PRE>HRESULT GetSuspended(
   long * pbSuspended  // address of variable for suspended flag
);
</PRE>
<P>Retrieves whether the Microsoft Agent server is currently suspended.<UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>pbSuspended</i>
<P><blockquote>Address of a variable that receives TRUE if the Microsoft Agent server is in the suspended state and FALSE if not.</blockquote>
<P>Microsoft Agent loads in a suspended state when a client application attempts to start it up after the user has previously quit (by choosing the Exit command on the Microsoft Agent taskbar icon). In the suspended state Microsoft Agent handles connection requests, but returns failure on any animation methods. Therefore, a character cannot be displayed in this state. Client applications can advise users to restart the server (by choosing Restart on the taskbar pop-up menu), but cannot restart the server directly.
<P><HR>
<P><b><A NAME="IAGENT::LOAD"></A></b><b>IAgent::Load</b>
<P><PRE>HRESULT Load(
   VARIANT vLoadKey,  // data provider
   long * pdwCharID,  // address of a variable for character ID
   long * pdwReqID    // address of a variable for request ID
);
</PRE>
<P>Loads a character into the <b>Characters</b> collection. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>vLoadKey</i>
<P><blockquote>A variant datatype that must be one of the following:</blockquote>
<P><blockquote>
<P>
<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP>
<TD><i>filespec</i></TD>
<TD>The local file location of the specified character's definition file.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><i>URL</i></TD>
<TD>The HTTP address for the character's definition file.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><i>provider</i></TD>
<TD>An alternate character definition provider.
</TD>
</TR>
</TABLE></blockquote>
<P><i>pdwCharID</i>
<P><blockquote>Address of a variable that receives the character's ID.</blockquote>
<P><i>pdwReqID</i>
<P><blockquote>Address of a variable that receives  the <b>Load</b> request ID.</blockquote>
<P>Microsoft Agent's data provider supports loading character data stored as a single structured file (.ACS) with character data and animation data together, or as separate character data (.ACF) and animation (.AAF) files. Generally, use the single structured .ACS file to load a character that is stored on a local disk drive or network and accessed using conventional file protocol (such as UNC pathnames). Use the separate .ACF and .AAF files when you want to load the animation files individually from a remote site where they are accessed using HTTP protocol. 
<P>For .ACS files, using the <b>Load</b> method provides access a character's animations. For .ACF files, you also use the <b>Prepare</b> method to load animation data. The <b>Load</b> method does not support downloading .ACS files from an HTTP site.
<P>Loading a character does not automatically display the character. Use the <b>Show</b> method first to make the character visible.
<P>The <i>vLoadKey</i> parameter also enables you specify your own data provider (that would be loaded separately) that can have its own methods for loading animation data. You need to create a data provider object only if you supply character data in special formats.
<P><HR>
<P><b><A NAME="IAGENT::REGISTER"></A></b><b>IAgent::Register</b>
<P><PRE>HRESULT Register(
   IUnknown * punkNotifySink  // address of IUnknown for client 
);                            // notification sink
</PRE>
<P>Registers a notification sink for the client application. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>IUnknown</i>
<P><blockquote>Address of <b>IUnknown</b> for your notification sink interface.</blockquote>
<P>You need to register your notification sink (also known as a notify sink or event sink) to receive events from the Microsoft Agent server.
<P>See also <b><A HREF="#IAGENT::UNREGISTER">IAgent::Unregister</A></b>
<P><HR>
<P><b><A NAME="IAGENT::UNLOAD"></A></b><b>IAgent::UnLoad</b>
<P><PRE>HRESULT UnLoad(
   long * dwCharID  //character ID
);
</PRE>
<P>Unloads the character data for the specified character from the <b>Characters</b> collection. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>dwCharID</i>
<P><blockquote>The character's ID.</blockquote>
<P>Use this method when you no longer need a character, to free up memory used to store information about the character. If you access the character again, use the <b>Load</b> method.
<P>See also <b><A HREF="#IAGENT::LOAD">IAgent::Load</A></b>
<P><HR>
<P><b><A NAME="IAGENT::UNREGISTER"></A></b><b>IAgent::Unregister</b>
<P><PRE>HRESULT Unregister(
   long dwSinkID  //notification sink ID
);
</PRE>
<P>Unloads the character data for the specified character from the <b>Characters</b> collection. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>dwSinkID</i>
<P><blockquote>The notification sink ID.</blockquote>
<P>Use this method when you no longer need Microsoft Agent services, such as when your application shuts down.
<P>See also <b><A HREF="#IAGENT::REGISTER">IAgent::Register</A></b>
<P>
<hr>
<P>
<H4><A NAME="IAGENTCHARACTER"></A>IAgentCharacter</H4>
<P><b>IAgentCharacter</b> defines an interface that allows applications to query character properties and play animations.
<P><H4>Methods in Vtable Order</H4>
<P>
<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>IAgentCharacter Methods</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetVisible</b></TD>
<TD>Returns whether the character (frame) is currently visible.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>SetPosition</b></TD>
<TD>Sets the position of the character frame.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetPosition</b></TD>
<TD>Returns the position of the character frame.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>SetSize</b></TD>
<TD>Sets the size of the character frame.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetSize</b></TD>
<TD>Returns the size of the character frame.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetName</b></TD>
<TD>Returns the name of the character.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetDescription</b></TD>
<TD>Returns the description for the character.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetTTSSpeed</b></TD>
<TD>Returns the current TTS output speed setting for the character.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetTTSPitch</b></TD>
<TD>Returns the current TTS pitch setting for the character.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Activate</b></TD>
<TD>Sets whether a client is active or a character is topmost.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>SetInputActive</b></TD>
<TD>Sets the character to be input-active.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>SetIdleOn</b></TD>
<TD>Sets the server's idle processing.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetIdleOn</b></TD>
<TD>Returns the setting of the server's idle processing.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Prepare</b></TD>
<TD>Retrieves animation data for the character.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Play</b></TD>
<TD>Plays a specified animation.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Stop</b></TD>
<TD>Stops an animation for a character.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>StopAll</b></TD>
<TD>Stops all animations for a character.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Wait</b></TD>
<TD>Holds the character's animation queue.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Interrupt</b></TD>
<TD>Interrupts a character's animation.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Show</b></TD>
<TD>Displays the character and plays the character's <b>Showing</b> state animation.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Hide</b></TD>
<TD>Plays the character's <b>Hiding</b> state animation and hides the character's frame.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Speak</b></TD>
<TD>Plays spoken output for the character.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>MoveTo</b></TD>
<TD>Moves the character frame to the specified location.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GestureAt</b></TD>
<TD>Plays a gesturing animation based on the specified location.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetMoveCause</b></TD>
<TD>Retrieves the cause of the character's last move.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetVisibilityCause</b></TD>
<TD>Retrieves the cause of the last change to the character's visibility state.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>HasOtherClients</b></TD>
<TD>Retrieves whether the character has other current clients.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>SetSoundEffectsOn</b></TD>
<TD>Determines whether a character animation's sound effects play.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetSoundEffectsOn</b></TD>
<TD>Retrieves whether a character's sound effects setting is enabled.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>SetName</b></TD>
<TD>Sets the character's name.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>SetDescription</b></TD>
<TD>Sets the character's description.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetExtraData</b></TD>
<TD>Retrieves additional data stored with the character.
</TD>
</TR>
</TABLE>
<P>&nbsp;
<P><b><A NAME="IAGENTCHARACTER::ACTIVATE"></A></b><b>IAgentCharacter::Activate</b>
<P><PRE>HRESULT Activate(
   short sState, // topmost character or client setting
);
</PRE>
<P>Sets whether a client is active or a character is topmost.
<UL>

<LI> Returns S_OK to indicate the operation was successful.
<LI> Returns S_FALSE to indicate the operation was not successful.
</UL>
<i>sState</i>
<P><blockquote>You can specify the following values for this parameter:
<P>0&nbsp;&nbsp;&nbsp;Set as not the active client. 
<P>1&nbsp;&nbsp;&nbsp;Set as the active client.  
<P>2&nbsp;&nbsp;&nbsp;Make the topmost character.</blockquote>
<P>When multiple characters are visible, only one of the characters receives speech input at a time. Similarly, when multiple client applications share the same character, only one of the clients receives mouse input (for example, Microsoft Agent control click or drag events) at a time. The character set to receive mouse and speech input is the topmost character and the client that receives input is the character's active client. (The topmost character's window also appears at the top of the character window's z-order.) Typically, the user determines which character is topmost by explicitly selecting it. However, topmost activation also changes when a character is shown or hidden (the character becomes or is no longer topmost, respectively.) 
<P>You can also use this method to explicitly manage when your client receives input directed to the character, such as when your application itself becomes active. For example, setting <b>State</b> to 2 makes the character topmost, and your client receives all mouse and speech input events generated from user interaction with the character. Therefore, it also makes your client the input-active client of the character. However, you can also set the active client for a character without making the character topmost, by setting <b>State</b> to 1. This enables your client to receive input directed to that character when the character becomes topmost. Similarly, you can set your client to not be the active client (to not receive input) when the character becomes topmost, by setting <b>State</b> to 0. You can determine if a character has other current clients using <b>IAgentCharacter::HasOtherClients</b>.
<P>Avoid calling this method directly after a <b>Show</b> method. <b>Show</b> automatically sets the input-active client. When the character is hidden, the <b>Activate</b> call may fail if it gets processed before the <b>Show</b> method completes.
<P>If you call this method to a function, it returns a Boolean value that indicates whether the method succeeded. Attempting to call this method with the <b>State</b> parameter set to 2 when the specified character is hidden will fail. Similarly, if you set <b>State</b> to 0 and your application is the only client, this call fails because a character must always have a topmost client.
<P>See also <b><A HREF="#IAGENTCHARACTER::HASOTHERCLIENTS">IAgentCharacter::HasOtherClients</a></b>

<P><hr>
<P><b><A NAME="IAGENTCHARACTER::GESTUREAT"></A></b><b>IAgentCharacter::GestureAt</b>
<P><PRE>HRESULT GestureAt(
   short x,         // x-coordinate of specified location
   short y,         // y-coordinate of specified location
   long * pdwReqID  // address of a request ID
);
</PRE>
<P>Plays the associated <b>Gesturing</b> state animation based on the specified location. <UL>

<LI> Returns S_OK to indicate the operation was successful. When the function returns, <i>pdwReqID</i> contains the ID of the request.
</UL><i>x</i>
<P><blockquote>The x-coordinate of the specified location in pixels, relative to the screen origin (upper left). </blockquote>
<P><i>y</i>
<P><blockquote>The y-coordinate of the specified location in pixels, relative to the screen origin (upper left). </blockquote>
<P><i>pdwReqID</i>
<P><blockquote>Address of a variable that receives the <b>GestureAt</b> request ID.</blockquote>
<P>The server automatically determines and plays the appropriate gesturing animation based on the character's current position and the specified location. When using the HTTP protocol to access character and animation data, use the <b>Prepare</b> method to ensure that the animations are available before calling this method. 
<P><HR>
<P><b><A NAME="IAGENTCHARACTER::GETDESCRIPTION"></A></b><b>IAgentCharacter::GetDescription</b>
<P><PRE>HRESULT GetDescription(
   BSTR * pbszDescription   // address of buffer for character description
); 
</PRE>
<P>Retrieves the description of the character.<UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>pbszDescription</i>
<P><blockquote>The address of a BSTR that receives the value of the description for the character. A character's description is defined when it is compiled with the Microsoft Agent Character Editor. The description setting is optional and may not be supplied for all characters. </blockquote>
<P><HR>
<P><b><A NAME="IAGENTCHARACTER::GETEXTRADATA"></A></b><b>IAgentCharacter::GetExtraData</b>
<P>
<P><PRE>HRESULT GetExtraData(
   BSTR * pbszExtraData   // address of buffer for additional character data
); 
</PRE>
<P>Retrieves additional data stored as part of the character.<UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>pbszExtraData</i>
<P><blockquote>The address of a BSTR that receives the value of the additional data for the character. A character's additional data is defined when it is compiled with the Microsoft Agent Character Editor. A character developer can supply this string by editing the .ACD file for a character. The setting is optional and may not be supplied for all characters, nor can the data be defined or changed at run time. In addition, the meaning of the data supplied is defined by the character developer.</blockquote>
<P><HR>
<P><b><A NAME="IAGENTCHARACTER::GETIDLEON"></A></b>
<b>IAgentCharacter::GetIdleOn</b>
<P><PRE>HRESULT GetIdleOn(
   long * pbOn  // address of idle processing flag
);
</PRE>
<P>Indicates the automatic idle processing state for a character.<UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>pbOn</i>
<P><blockquote>Address of a variable that receives TRUE if the Microsoft Agent server automatically plays <b>Idling </b>state animations for a character and FALSE if not.</blockquote>
<P>See also <b><A HREF="#IAGENTCHARACTER::SETIDLEON">IAgentCharacter::SetIdleOn</A></b>
<P><HR>
<P><b><A NAME="IAGENTCHARACTER::GETMOVECAUSE"></A></b><b>IAgentCharacter::GetMoveCause</b>
<P><PRE>HRESULT GetMoveCause(
   long * pdwCause  // address of variable for cause of character move
);
</PRE>
<P>Retrieves the cause of the character's last move.<UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>pdwCause</i>
<P><blockquote>Address of a variable that receives the cause of the character's last move and will be one of the following:
<P>
<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP>
<TD><b>const unsigned short NeverMoved = 0;</b></TD>
<TD>Character has not been moved.</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>const unsigned short UserMoved = 1;</b></TD>
<TD>User dragged the character.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>const unsigned short ProgramMoved = 2;</b></TD>
<TD>To Your application moved the character.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>const unsigned short OtherProgramMoved = 3;</b></TD>
<TD>Another application moved the character.
</TD>
</TR>
</TABLE>
</blockquote>
<P>See also <b><A HREF="#IAGENTNOTIFYSINK::MOVE">IAgentNotifySink::Move</A></b>
<P><HR>
<P><b><A NAME="IAGENTCHARACTER::GETNAME"></A></b><b>IAgentCharacter::GetName</b>
<P><PRE>HRESULT GetName(
   BSTR * pbszName   // address of buffer for character name
);
</PRE>
<P>Retrieves the name of the character.<UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>pbszName</i>
<P><blockquote>The address of a BSTR that receives the value of the name for the character. A character's default name is defined when it is compiled with the Microsoft Agent Character Editor. The name setting is optional and may not be supported for all characters. You can also set the character's name using <b>IAgentCharacter:SetName</b>; however, this changes the name for all current clients of the character.</blockquote>
<P>See also <b><A HREF="#IAGENTCHARACTER::SETNAME">IAgentCharacter::SetName</A></b>

<P><HR>
<P><b><A NAME="IAGENTCHARACTER::GETPOSITION"></A></b><b>IAgentCharacter::GetPosition</b>
<P><PRE>HRESULT GetPosition(
   long * plLeft,  // address of variable for left edge of character 
   long * plTop    // address of variable for top edge of character 
);
</PRE>
<P>Retrieves the character's animation frame position. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>plLeft</i>
<P><blockquote>Address of a variable that receives the screen coordinate of the character animation frame's left edge in pixels, relative to the screen origin (upper left).</blockquote>
<P><i>plTop</i>
<P><blockquote>Address of a variable that receives the screen coordinate of the character animation frame's top edge in pixels, relative to the screen origin (upper left).</blockquote>
<P>Even though the character appears in an irregularly shaped region window, the location of the character is based on its rectangular animation frame.
<P>See also <b><A HREF="#IAGENTCHARACTER::SETPOSITION">IAgentCharacter::SetPosition</A></b>, <b><A HREF="#IAGENTCHARACTER::GETSIZE">IAgentCharacter::GetSize</A></b>
<P><HR>
<P><b><A NAME="IAGENTCHARACTER::GETSIZE"></A></b><b>IAgentCharacter::GetSize</b>
<P><PRE>HRESULT GetSize(
   long * plWidth,  // address of variable for character width 
   long * plHeight  // address of variable for character height
);
</PRE>
<P>Retrieves the size of the character's animation frame.<UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>plWidth</i>
<P><blockquote>Address of a variable that receives the width of the character animation frame in pixels, relative to the screen origin (upper left).</blockquote>
<P><i>plHeight</i>
<P><blockquote>Address of a variable that receives the height of the character animation frame in pixels, relative to the screen origin (upper left).</blockquote>
<P>Even though the character appears in an irregularly shaped region window, the location of the character is based on its rectangular animation frame.
<P>See also <b><A HREF="#IAGENTCHARACTER::SETSIZE">IAgentCharacter::SetSize</A></b>
<P><HR>
<P><b><A NAME="IAGENTCHARACTER::GETSOUNDEFFECTSON"></A></b><b>IAgentCharacter::GetSoundEffectsOn</b>
<P><PRE>HRESULT GetSoundEffectsOn(
   long * pbOn  // address of variable for sound effects setting 
);
</PRE>
<P>Retrieves whether the character's sound effects setting is enabled.<UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>pbOn</i>
<P><blockquote>Address of a variable that receives TRUE if the character's sound effects setting is enabled, FALSE if disabled.</blockquote>
<P>The character's sound effects setting determines whether sound effects compiled as a part of the character are played when you play an associated animation. The setting is subject to the user's global sound effects setting in <b>IAgentAudioOutputProperties::GetUsingSoundEffects</b>.
<P>See also <b><A HREF="#IAGENTCHARACTER::SETSOUNDEFFECTSON">IAgentCharacter::SetSoundEffectsOn</A></b>, <b><A HREF="#IAGENTAUDIOOUTPUTPROPERTIES::GETUSINGSOUNDEFFECTS">IAgentAudioOutputProperties::GetUsingSoundEffects</A></b>

<P><HR>
<P><b><A NAME="IAGENTCHARACTER::GETTTSPITCH"></A></b><b>IAgentCharacter::GetTTSPitch</b>
<P><PRE>HRESULT GetTTSPitch(
   long * pdwPitch  // address of variable for character TTS pitch
);
</PRE>
<P>Retrieves the character's TTS output pitch setting.<UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>pdwPitch</i>
<P><blockquote>Address of a variable that receives the character's current TTS pitch setting in Hertz. </blockquote>
<P>Although your application cannot write this value, you can include pitch tags in your output text that will temporarily increase the pitch for a particular utterance. This method applies only to characters configured for TTS output. If the speech synthesis (TTS) engine is not enabled (or installed) or the character does not support TTS output, this method returns zero (0).
<P><HR>
<P><b><A NAME="IAGENTCHARACTER::GETTTSSPEED"></A></b><b>IAgentCharacter::GetTTSSpeed</b>
<P><PRE>HRESULT GetTTSSpeed(
   long * pdwSpeed  // address of variable for character TTS output speed
);
</PRE>
<P>Retrieves the character's TTS output speed setting.<UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>pdwSpeed</i>
<P><blockquote>Address of a variable that receives the output speed of the character in words per minute. </blockquote>
<P>Although your application cannot write this value, you can include speed tags in your output text that will temporarily speed up the output for a particular utterance.
<P>This property returns the current speaking output speed setting for the character. For characters using TTS output, the property returns the actual TTS output for the character. If TTS is not enabled or the character does not support TTS output, the setting reflects the user setting for output speed. 
<P><HR>
<P><b><A NAME="IAGENTCHARACTER::GETVISIBILITYCAUSE"></A></b><b>IAgentCharacter::GetVisibilityCause</b>
<P><PRE>HRESULT GetVisibilityCause(
   long * pdwCause  // address of variable for cause of character visible state
);
</PRE>
<P>Retrieves the cause of the character's visible state.<UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>pdwCause</i>
<P><blockquote>Address of a variable that receives the cause of the character's last visibility state change and will be one of the following: 
<P>
<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP>
<TD><b>const unsigned short NeverShown = 0;</b></TD>
<TD>Character has not been shown.</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>const unsigned short UserHid = 1;</b></TD>
<TD>User hid the character.</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>const unsigned short UserShowed = 2;</b></TD>
<TD>User showed the character.</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>const unsigned short ProgramHid = 3;</b></TD>
<TD>Your application hid the character.</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>const unsigned short ProgramShowed = 4;</b></TD>
<TD>Your application showed the character.</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>const unsigned short OtherProgramHid = 5;</b></TD>
<TD>Another application hid the character.</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>const unsigned short OtherProgramShowed = 6;</b></TD>
<TD>Another application showed the character.</TD>
</TR>
</TABLE>
</blockquote>
<P>
<P>See also <b><A HREF="#IAGENTNOTIFYSINK::HIDE">IAgentNotifySink::Hide</A></b>, <b><A HREF="#IAGENTNOTIFYSINK::SHOW">IAgentNotifySink::Show</A></b>

<P><HR>
<P><b><A NAME="IAGENTCHARACTER::GETVISIBLE"></A></b><b>IAgentCharacter::GetVisible</b>
<P><PRE>HRESULT GetVisible(
   long * pbVisible  // address of variable for character Visible setting
);
</PRE>
<P>Determines whether the character's animation frame is currently visible. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>pbVisible</i>
<P><blockquote>Address of a variable that receives TRUE if the character's frame is visible and FALSE if hidden.</blockquote>
<P>You can use this method to determine whether the character's frame is currently visible. To make a character visible, use the <b>Show</b> method. To hide a character, use the <b>Hide</b> method.

<P><HR>
<P><b><A NAME="IAGENTCHARACTER::HASOTHERCLIENTS"></A></b><b>IAgentCharacter::HasOtherClients</b>
<P><PRE>HRESULT HasOtherClients(
   long * pbHasOtherClients  // address of variable for whether character has
);                           // other clients
</PRE>
<P>Retrieves whether a character has other clients.
<UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>pbHasOtherClients</i>
<P><blockquote>Address of a variable that receives TRUE if the character has other clients and FALSE if not.
</blockquote>

<P><HR>
<P><b><A NAME="IAGENTCHARACTER::HIDE"></A></b><b>IAgentCharacter::Hide</b>
<P><PRE>HRESULT Hide(
   long bFast,      // play Hiding state animation flag
   long * pdwReqID  // address of request ID
);
</PRE>
<P>Hides the character.<UL>

<LI> Returns S_OK to indicate the operation was successful. When the function returns, <i>pdwReqID</i> contains the ID of the request.
</UL><i>bFast</i>
<P><blockquote><b>Hiding</b> state animation flag. If this parameter is TRUE, the <b>Hiding</b> animation does not play before the character frame is hidden; if FALSE, the animation plays.</blockquote>
<P><i>pdwReqID</i>
<P><blockquote>Address of a variable that receives the <b>Hide</b> request ID.</blockquote>
<P>The server queues the animation associated with the <b>Hide</b> method in the character's queue. This allows you to use it to hide the character after a sequence of other animations. You can play the action immediately by using the <b>Stop</b> method before calling the <b>Hide</b> method.
<P>When using the HTTP protocol to access character and animation data, use the <b>Prepare</b> method to ensure the availability of the <b>Hiding</b> state animation before calling this method. 
<P>Hiding a character can also result in triggering the <b>ActivateInput</b> event of another visible character. 
<P>Hidden characters cannot access the audio channel. The server will pass back a failure status in the <b>RequestComplete</b> event if you generate an animation request and the character is hidden. 
<P>See also <b><A HREF="#IAGENTCHARACTER::SHOW">IAgentCharacter::Show</A></b>
<P><HR>
<P><b><A NAME="IAGENTCHARACTER::INTERRUPT"></A></b><b>IAgentCharacter::Interrupt</b>
<P><PRE>HRESULT Interrupt(
   long dwReqID,    // request ID to interrupt
   long * pdwReqID  // address of request ID
);
</PRE>
<P>Interrupts the specified animation (request) of another character. <UL>

<LI> Returns S_OK to indicate the operation was successful. When the function returns, <i>pdwReqID</i> contains the ID of the request.
</UL><i>dwReqID</i>
<P><blockquote>An ID of the request to interrupt.</blockquote>
<P><i>pdwReqID</i>
<P><blockquote>Address of a variable that receives the <b>Interrupt</b> request ID.</blockquote>
<P>You can use this method to sync up animation between characters. For example, if another character is in a looping animation, this method will stop the looping animation and start the next animation in the character's queue. 
<P><b>Interrupt</b> halts the existing animation, but does not flush the character's animation queue. It starts the next animation in the character's queue. To halt and flush a character's queue, use the <b>Stop</b> method.
<P>You cannot use this method to have a character interrupt itself because the Microsoft Agent server queues the <b>Interrupt</b> method in the character's animation queue. Therefore, you can only use <b>Interrupt</b> to halt the animation of another character you have loaded. 
<P><HR>
<P><b><A NAME="IAGENTCHARACTER::MOVETO"></A></b><b>IAgentCharacter::MoveTo</b>
<P><PRE>HRESULT MoveTo(
   short x,         // x-coordinate of new location
   short y,         // y-coordinate of new location
   long lSpeed,     // speed to move the character
   long * pdwReqID  // address of request ID
);
</PRE>
<P>Plays the associated <b>Moving</b> state animation and moves the character frame to the specified location. <UL>

<LI> Returns S_OK to indicate the operation was successful. When the function returns, this variable contains the ID of the request.
</UL><i>x</i>
<P><blockquote>The x-coordinate of the new position in pixels, relative to the screen origin (upper left). The location of a character is based on the upper left corner of its animation frame. </blockquote>
<P><i>y</i>
<P><blockquote>The y-coordinate of the new position in pixels, relative to the screen origin (upper left). The location of a character is based on the upper left corner of its animation frame. </blockquote>
<P><i>lSpeed</i>
<P><blockquote>A parameter specifying in milliseconds how quickly the character's frame moves. The recommended  value is 1000. Specifying zero (0) moves the frame without playing an animation.</blockquote>
<P><i>pdwReqID</i>
<P><blockquote>Address of a variable that receives the <b>MoveTo</b> request ID.</blockquote>
<P>When using the HTTP protocol to access character and animation data, use the <b>Prepare</b> method to ensure the availability of the <b>Moving</b> state animations before calling this method. Even if the animation is not loaded, the server still moves the frame.
<P>See also <b><A HREF="#IAGENTCHARACTER::SETPOSITION">IAgentCharacter::SetPosition</A></b>
<P><HR>
<P><b><A NAME="IAGENTCHARACTER::PLAY"></A></b><b>IAgentCharacter::Play</b>
<P><PRE>HRESULT Play(
   BSTR bszAnimation,  // name of an animation
   long * pdwReqID     // address of request ID
);
</PRE>
<P>Plays the specified animation. <UL>

<LI> Returns S_OK to indicate the operation was successful. When the function returns, <i>pdwReqID</i> contains the ID of the request.
</UL><i>bszAnimation</i>
<P><blockquote>The name of an animation.</blockquote>
<P><i>pdwReqID</i>
<P><blockquote>Address of a variable that receives the <b>Play</b> request ID.</blockquote>
<P>An animation's name is defined when the character is compiled with the Microsoft Agent Character Editor. Before playing the specified animation, the server attempts to play the <b>Return</b> animation for the previous animation (if one has been assigned).
<P>When a character's animation data is stored on the user's local machine, you can use the <b>Play</b> method and specify the name of the animation. When using the HTTP protocol to access animation data, use the <b>Prepare</b> method to ensure the availability of the animation before calling this method.
<P>See also <b><A HREF="#IAGENTCHARACTER::PREPARE">IAgentCharacter::Prepare</A></b>
<P><HR>
<P><b><A NAME="IAGENTCHARACTER::PREPARE"></A></b><b>IAgentCharacter::Prepare</b>
<P><PRE>HRESULT Prepare(
   long dwType,     // type of animation data to load
   BSTR bszName,    // name of the animation 
   long bQueue,     // queue the request
   long * pdwReqID  // address of request ID
);
</PRE>
<P>Retrieves animation data for a character. <UL>

<LI> Returns S_OK to indicate the operation was successful. When the function returns, <i>pdwReqID</i> contains the ID of the request.
</UL><i>dwType</i>
<P><blockquote>A value that indicates the animation data type to load that must be one of the following:
<P>
<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP>
<TD><b>const&nbsp;unsigned&nbsp;short&nbsp;PREPARE_ANIMATION&nbsp;=&nbsp;0;</b></TD>
<TD>A character's animation data.</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>const unsigned short PREPARE_STATE = 1;</b></TD>
<TD>A character's state data. </TD>
</TR>
<TR VALIGN=TOP>
<TD><b>const unsigned short PREPARE_WAVE = 2</b></TD>
<TD>A character's sound file (.WAV or .LWV) for spoken output. </TD>
</TR>
</table></blockquote>
<P><i>bszName</i>
<P><blockquote>The name of the animation or state. 
<P>The animation name is based on that defined for the character when it was saved using the Microsoft Agent Character Editor. 
<P>For states, the value can be one of the following:
<P>
<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP>
<TD><b>"Gesturing"</b></TD>
<TD>To retrieve all <b>Gesturing</b> state animations.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>"GesturingDown"</b></TD>
<TD>To retrieve <b>GesturingDown</b> animations.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>"GesturingLeft"</b></TD>
<TD>To retrieve <b>GesturingLeft</b> animations.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>"GesturingRight"</b></TD>
<TD>To retrieve <b>GesturingRight</b> animations.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>"GesturingUp"</b></TD>
<TD>To retrieve <b>GesturingUp</b> animations.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>"Hiding"</b></TD>
<TD>To retrieve the <b>Hiding</b> state animations.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>"Hearing"</b></TD>
<TD>To retrieve the <b>Hearing</b> state animations.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>"Idling"</b></TD>
<TD>To retrieve all <b>Idling</b> state animations.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>"IdlingLevel1"</b></TD>
<TD>To retrieve all <b>IdlingLevel1</b> animations.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>"IdlingLevel2"</b></TD>
<TD>To retrieve all <b>IdlingLevel2</b> animations.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>"IdlingLevel3"</b></TD>
<TD>To retrieve all <b>IdlingLevel3</b> animations.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>"Listening"</b></TD>
<TD>To retrieve the <b>Listening</b> state animations.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>"Moving"</b></TD>
<TD>To retrieve all <b>Moving</b> state animations.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>"MovingDown"</b></TD>
<TD>To retrieve all <b>Moving</b> animations.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>"MovingLeft"</b></TD>
<TD>To retrieve all <b>MovingLeft</b> animations.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>"MovingRight"</b></TD>
<TD>To retrieve all <b>MovingRight</b> animations.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>"MovingUp"</b></TD>
<TD>To retrieve all <b>MovingUp</b> animations.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>"Showing"</b></TD>
<TD>To retrieve the <b>Showing</b> state animations.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>"Speaking"</b></TD>
<TD>To retrieve the <b>Speaking</b> state animations.
</TD>
</TR>
</TABLE>
</blockquote>
<blockquote>
<P>For .WAV files, set <i>bszName</i> to the URL or file specification for the .WAV file. If the specification is not complete, it is interpreted as being relative to the specification used in the <b>Load</b> method. </blockquote>
<P><i>bQueue</i>
<P><blockquote>A Boolean specifying whether the server queues the <b>Prepare</b> request. TRUE queues the request and causes any animation request that follows it to wait until the animation data it specifies is loaded. FALSE retrieves the animation data asynchronously.</blockquote>
<P><i>pdwReqID</i>
<P><blockquote>Address of a variable that receives the <b>Prepare</b> request ID.</blockquote>
<P>You can specify multiple animations and states by separating them with commas. However, you cannot mix types in the same <b>Prepare</b> statement.
<P><HR>
<P><b><A NAME="IAGENTCHARACTER::SETDESCRIPTION"></A></b><b>IAgentCharacter::SetDescription</b>
<P><PRE>HRESULT SetDescription(
   BSTR bszDescription   // character description
); 
</PRE>
<P>Sets the description of the character.<UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>bszDescription</i>
<P><blockquote>A BSTR that sets the description for the character. A character's default description is defined when it is compiled with the Microsoft Agent Character Editor. The description setting is optional and may not be supplied for all characters. You can change the character's description using <b>IAgentCharacter::SetDescription</b>; however, this value is not persistent (stored permanently). The character's description reverts to its default setting whenever the character is first loaded by a client.</blockquote>
<P>See also <b><A HREF="#IAGENTCHARACTER::GETDESCRIPTION">IAgentCharacter::GetDescription</A></b>
<P><HR>
<P><b><A NAME="IAGENTCHARACTER::SETIDLEON"></A></b><b>IAgentCharacter::SetIdleOn</b>
<P><PRE>HRESULT SetIdleOn(
   long bOn  // idle processing flag
);
</PRE>
<P>Sets automatic idle processing for a character.<UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>bOn</i>
<P><blockquote>Idle processing flag. If this parameter is TRUE, the Microsoft Agent automatically plays <b>Idling</b> state animations. </blockquote>
<P>The server automatically sets a time out after the last animation played for a character. When this timer's interval is complete, the server begins the <b>Idling</b> states for a character, playing its associated <b>Idling</b> animations at regular intervals. If you want to manage the <b>Idling</b> state animations yourself, set the property to FALSE.
<P>See also <b><A HREF="#IAGENTCHARACTER::GETIDLEON">IAgentCharacter::GetIdleOn</A></b>
<P><HR>
<P><b><A NAME="IAGENTCHARACTER::SETNAME"></A></b><b>IAgentCharacter::SetName</b>
<P><PRE>HRESULT SetName(
   BSTR bszName   // character name
);
</PRE>
<P>Sets the name of the character.<UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>bszName</i>
<P><blockquote>A BSTR that sets the character's name. A character's default name is defined when it is compiled with the Microsoft Agent Character Editor. You can change it using <b>IAgentCharacter::SetName</b>; however, this changes the character name for all current clients of the character. This property is not persistent (stored permanently). The character's name reverts to its default name whenever the character is first loaded by a client.
<P>The server uses the character's name setting in parts of the Microsoft Agent's interface, such as the Commands Window title when the character is input-active and in the Microsoft Agent taskbar pop-up menu.
</blockquote>
<P>See also <b><A HREF="#IAGENTCHARACTER::GETNAME">IAgentCharacter::GetName</A></b>
<P><HR>
<P><b><A NAME="IAGENTCHARACTER::SETPOSITION"></A></b><b>IAgentCharacter::SetPosition</b>
<P><PRE>HRESULT SetPosition(
   long lLeft,  // screen coordinate of the left edge of character 
   long lTop    // screen coordinate of the top edge of character 
);
</PRE>
<P>Sets the position of the character's animation frame. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>lLeft</i>
<P><blockquote>Screen coordinate of the character animation frame's left edge in pixels, relative to the screen origin (upper left).</blockquote>
<P><i>lTop</i>
<P><blockquote>Screen coordinate of the character animation frame's top edge in pixels, relative to the screen origin (upper left).</blockquote>
<P>Even though the character appears in an irregularly shaped region window, the location of the character is based on its rectangular animation frame.
<P><blockquote><b>Note</b> Unlike the <b>MoveTo</b> method, this function is not queued.</blockquote>
<P>See also <b><A HREF="#IAGENTCHARACTER::GETPOSITION">IAgentCharacter::GetPosition</A></b>
<P><HR>
<P><b><A NAME="IAGENTCHARACTER::SETSIZE"></A></b><b>IAgentCharacter::SetSize</b>
<P><PRE>HRESULT SetSize(
   long * lWidth,  // width of the character frame
   long * lHeight  // height of the character frame
);
</PRE>
<P>Sets the size of the character's animation frame.<UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>lWidth</i>
<P><blockquote>The width of the character's animation frame in pixels.</blockquote>
<P><i>lHeight</i>
<P><blockquote>The height of the character's animation frame in pixels.</blockquote>
<P>Changing the character's frame size scales the character to the size set with this method.
<P>Even though the character appears in an irregularly shaped region window, the location of the character is based on its rectangular animation frame.
<P>See also <b><A HREF="#IAGENTCHARACTER::GETSIZE">IAgentCharacter::GetSize</A></b>
<P><HR>
<P><b><A NAME="IAGENTCHARACTER::SETSOUNDEFFECTSON"></A></b><b>IAgentCharacter::SetSoundEffectsOn</b>
<P><PRE>HRESULT SetSoundEffectsOn(
   long bOn  // character sound effects setting 
);
</PRE>
<P>Determines whether the character's sound effects are played.<UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>bOn</i>
<P><blockquote>Sound effects setting. If this parameter is TRUE, the sound effects for animations are played when the animation plays; if FALSE, sound effects are not played.</blockquote>
<P>This setting determines whether sound effects compiled as a part of the character are played when you play an associated animation. The setting is subject to the user's global sound effects setting in <b>IAgentAudioOutputProperties::GetUsingSoundEffects</b>.
<P>See also <b><A HREF="#IAGENTCHARACTER::GETSOUNDEFFECTSON">IAgentCharacter::GetSoundEffectsOn</A></b>, <b><A HREF="#IAGENTAUDIOOUTPUTPROPERTIES::GETUSINGSOUNDEFFECTS">IAgentAudioOutputProperties::GetUsingSoundEffects</A></b>

<P><HR>
<P><b><A NAME="IAGENTCHARACTER::SHOW"></A></b><b>IAgentCharacter::Show</b>
<P><PRE>HRESULT Show(
   long bFast,      // play Showing state animation flag
   long * pdwReqID  // address of request ID
);
</PRE>
<P>Displays a character.<UL>

<LI> Returns S_OK to indicate the operation was successful. When the function returns, <i>pdwReqID</i> contains the ID of the request.
</UL><i>bFast</i>
<P><blockquote>Showing state animation flag. If this parameter is TRUE, the <b>Showing</b> state animation plays after making the character visible; if FALSE, the animation does not play.</blockquote>
<P><i>pdwReqID</i>
<P><blockquote>Address of a variable that receives the <b>Show</b> request ID.</blockquote>
<P>Avoid setting the <i>bFast</i> parameter to TRUE without playing an animation beforehand, otherwise, the character frame may be displayed, but have no image to display. In particular, note that that if you call <b>MoveTo</b> when the character is not visible, it does not play any animation. Therefore, if you call the <b>Show</b> method with <i>bFast</i> set to TRUE, no image will be displayed. Similarly, if you call <b>Hide</b> then <b>Show</b> with <i>bFast</i> set to TRUE, there will be no visible image.
<P>When using the HTTP protocol to access character and animation data, use the <b>Prepare</b> method to ensure the availability of the <b>Showing</b> state animation before calling this method.
<P>See also <b><A HREF="#IAGENTCHARACTER::HIDE">IAgentCharacter::Hide</A></b>
<P><HR>
<P><b><A NAME="IAGENTCHARACTER::SPEAK"></A></b><b>IAgentCharacter::Speak</b>
<P><PRE>HRESULT Speak(
   BSTR bszText,    // text to speak
   BSTR bszURL,     // URL of a file to speak
   long * pdwReqID  // address of a request ID
);
</PRE>
<P>Speaks the <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>bszText</i>
<P><blockquote>The text the character is to speak.</blockquote>
<P><i>bszURL</i>
<P><blockquote>The URL (or file specification) of a sound file to use for spoken output. This can be a standard sound file (.WAV) or linguistically enhanced sound file (.LWV). </blockquote>
<P><i>pdwReqID</i>
<P><blockquote>Address of a variable that receives the <b>Speak</b> request ID.</blockquote>
<P>To use this method with a character configured to speak using a text-to-speech (TTS) engine; simply provide the <i>bszText</i> parameter. You can include vertical bar characters (|) in the <i>bszText</i> parameter to designate alternative strings, so that each time the server processes the method, it randomly choose a different string. Support of TTS output is defined when the character is compiled using the Microsoft Agent Character Editor. 
<P>If you want to use sound file output for the character, specify the location for the file in the <i>bszURL</i> parameter. When using the HTTP protocol to download a sound file, use the <b>Prepare</b> method to ensure the availability of the file before using this method. You can use the <i>bszText</i> parameter to specify the words that appear in the character's word balloon. If you specify a linguistically enhanced sound file (.LWV) for the <i>bszURL</i> parameter and do not specify text, the <i>bszText</i> parameter uses the text stored in the file. 
<P>The <b>Speak</b> method uses the last animation played to determine which speaking animation to play. For example, if you precede the <b>Speak</b> command with a <b>Play</b> "<b>GestureRight</b>", the server will play <b>GestureRight</b> and then the <b>GestureRight</b> speaking animation. 
<P>If you call <b>Speak</b> and the audio channel is busy, the character's audio output will not be heard, but the text will display in the word balloon. The word balloon's <b>Enabled</b> property must also be TRUE for the text to display. 
<P>See also <b><A HREF="#IAGENTCHARACTER::PLAY">IAgentCharacter::Play</A></b>,
 <b><A HREF="#IAGENTBALLOON::ENABLED">IAgentBalloon::Enabled</A></b>, <b><A HREF="#IAGENTCHARACTER::PREPARE">IAgentCharacter::Prepare</A></b>
<P><HR>
<P><b><A NAME="IAGENTCHARACTER::STOP"></A></b><b>IAgentCharacter::Stop</b>
<P><PRE>HRESULT Stop(
   long dwReqID  // request ID
);
</PRE>
<P>Stops the specified animation (request) and removes it from the character's animation queue. <UL>

<LI> Returns S_OK to indicate the operation was successful. 
</UL><i>dwReqID</i>
<P><blockquote>The ID of the request to stop.</blockquote>
<P><b>Stop</b> can also be used to halt any queued <b>Prepare</b> calls.
<P>See also <b><A HREF="#IAGENTCHARACTER::PREPARE">IAgentCharacter::Prepare</A></b>, <b><A HREF="#IAGENTCHARACTER::STOPALL">IAgentCharacter::StopAll</A></b>
<P><HR>
<P><b><A NAME="IAGENTCHARACTER::STOPALL"></A></b><b>IAgentCharacter::StopAll</b>
<P><PRE>HRESULT StopAll();
   long lType,  // request type
</PRE>
<P>Stops all animations (requests) and removes them from the character's animation queue. 
<P><i>lType</i>
<P><blockquote>A bit field that indicates the types of requests to stop (and remove from the character's queue), comprised from the following:
<P>
<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP>
<TD><b>const unsigned long STOP_TYPE_ALL = 0xFFFFFFFF;</b></TD>
<TD>Stops all animation requests, including non-queued <b>Prepare</b> requests.</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>const unsigned long STOP_TYPE_PLAY = 0x00000001;</b></TD>
<TD>Stops all <b>Play</b> requests.</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>const unsigned long STOP_TYPE_MOVE = 0x00000002;</b></TD>
<TD><b>Stops all <b>Move</b> requests.</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><b>const unsigned long STOP_TYPE_SPEAK = 0x00000004;</b></TD>
<TD><b>Stops all <b>Speak</b> requests.</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><b>const unsigned long STOP_TYPE_PREPARE = 0x00000008;</b></TD>
<TD><b>Stops all queued <b>Prepare</b> requests.</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><b>const unsigned long STOP_TYPE_NONQUEUEDPREPARE&nbsp;=&nbsp;0x00000010;</b></TD>
<TD><b>Stops all non-queued <b>Prepare</b> requests.</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><b>const unsigned long STOP_TYPE_VISIBLE = 0x00000020;</b></TD>

<TD><b>Stops all <b>Hide</b> or <b>Show</b> requests.</b></TD>
</TR>
</table>
</blockquote>
<P>See also <b><A HREF="#IAGENTCHARACTER::STOP">IAgentCharacter::Stop</A></b>
<P><HR>
<P><b><A NAME="IAGENTCHARACTER::WAIT"></A></b><b>IAgentCharacter::Wait</b>
<P><PRE>HRESULT Wait(
   long dwReqID,    // request ID
   long * pdwReqID  // address of request ID
);
</PRE>
<P>Holds the character's animation queue at the specified animation (request) until another request for another character completes. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>dwReqID</i>
<P><blockquote>The ID of the request to wait for.</blockquote>
<P><i>pdwReqID</i>
<P><blockquote>Address of a variable that receives the <b>Wait</b> request ID.</blockquote>
<P>Use this method only when you support multiple (simultaneous) characters and want to sequence their interaction (as a single client). (For a single character, each animation request is played sequentially--after the previous request completes.) If you have two characters and want one character's animation request to wait until the other character's animation completes, set the <b>Wait</b> method to the other character's animation request ID.
<P>
<hr>
<P><H4><A NAME="IAGENTCOMMANDS"></A>IAgentCommands</H4>
<P>The Microsoft Agent server maintains a list of commands that are currently available to the user. This list includes commands that the server defines for general interaction, such as Hide and Microsoft Agent Properties, the list of available (but non-input-active) clients, and the commands defined by the current active client. The first two sets of commands are global commands; that is, they are available at any time, regardless of the input-active client. Client-defined commands are available only when that client is input-active. 
<P>Retrieve an <b>IAgentCommands</b> interface by querying the <b>IAgentCharacter</b> interface for <b>IAgentCommands</b>. Each Microsoft Agent client application can define a collection of commands called a <b>Commands</b> collection. To add a <b>Command</b> to the collection, use the <b>Add</b> or <b>Insert</b> method. Although you can specify a <b>Command's</b> properties using <b>IAgentCommand</b> methods, for optimum code performance, specify all of a <b>Command</b>'s properties in the <b>IAgentCommands::Add</b> or <b>IAgentCommands::Insert</b> methods when initially setting the properties for a new <b>Command</b>. You can use the <b>IAgentCommand</b> methods to query or change the property settings.
<P>For each <b>Command</b> in the <b>Commands</b> collection, you can determine whether the command appears on the character's pop-up menu, in the Commands Window, in both, or in neither. For example, if you want a command to appear on the pop-up menu for the character, set the command's <b>Caption</b> and <b>Visible</b> properties. To display the command in the <b>Commands</b> Window, set the command's <b>Caption</b> and <b>Voice</b> properties. 
<P>A user can access the individual commands in your Commands collection only when your client application is input-active. Therefore, you will typically want to set the <b>Caption</b> and <b>Voice</b> properties for the <b>Commands</b> collection object as well as for the commands in the collection, because this places an entry for your <b>Commands</b> collection on a character's pop-up menu and in the Commands Window. When the user switches to your client by choosing its entry, the server automatically makes your client input-active and makes the <b>Commands</b> in its collection available. This enables the server to present and accept only the <b>Commands</b> that apply to the current input-active client's context. It also serves to avoid <b>Command</b>-name collisions between clients. 
<P>When a character's pop-up menu is displayed, changes to the properties of a <b>Commands</b> collection or the commands in its collection do not appear until the user redisplays the menu. However, when open, the Commands Window does display changes as they happen.
<P><b>IAgentCommands</b> defines an interface that allows applications to add, remove, set, and query properties for a <b>Commands</b> collection. A <b>Commands</b> collection can appear as a command in both the pop-up menu and the Commands Window for a character. To make the <b>Commands</b> collection appear, you must set its <b>Caption</b> property. The following table summarizes how the properties of a <b>Commands</b> collection affect its presentation.
<P>
<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Caption Property</b></TD>
<TD><b>Voice Property </b></TD>
<TD><b>Visible Property</b></TD>
<TD><b>Appears in 
<BR>Character's Pop-up Menu</b></TD>
<TD><b>Appears in 
<BR>Commands Window</b></TD>
</TR>
<TR VALIGN=TOP>
<TD>Yes</TD>
<TD>Yes</TD>
<TD>True</TD>
<TD>Yes</TD>
<TD>Yes</TD>
</TR>
<TR VALIGN=TOP>
<TD>Yes</TD>
<TD>Yes</TD>
<TD>False</TD>
<TD>No</TD>
<TD>Yes</TD>
</TR>
<TR VALIGN=TOP>
<TD>Yes</TD>
<TD>No</TD>
<TD>True</TD>
<TD>Yes</TD>
<TD>No</TD>
</TR>
<TR VALIGN=TOP>
<TD>Yes</TD>
<TD>No</TD>
<TD>False</TD>
<TD>No</TD>
<TD>No</TD>
</TR>
<TR VALIGN=TOP>
<TD>No</TD>
<TD>Yes</TD>
<TD>True</TD>
<TD>No</TD>
<TD>No*</TD>
</TR>
<TR VALIGN=TOP>
<TD>No</TD>
<TD>Yes</TD>
<TD>False</TD>
<TD>No</TD>
<TD>No*</TD>
</TR>
<TR VALIGN=TOP>
<TD>No</TD>
<TD>No</TD>
<TD>True</TD>
<TD>No</TD>
<TD>No</TD>
</TR>
<TR VALIGN=TOP>
<TD>No</TD>
<TD>No</TD>
<TD>False</TD>
<TD>No</TD>
<TD>No</TD>
</TR>
</TABLE>*The command is still voice-accessible. If the client is input-active and has <b>Commands</b> in its collection, "(command undefined)" appears in the Commands Window.
<P><H4>Methods in Vtable Order</H4>
<P>
<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>IAgentCommands Methods</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetCommand</b></TD>
<TD>Retrieves a <b>Command</b> object from the <b>Commands</b> collection.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetCount</b></TD>
<TD>Returns the value of the number of <b>Commands</b> in a <b>Commands</b> collection.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>SetCaption</b></TD>
<TD>Sets the value of the <b>Caption</b> property for a <b>Commands</b> collection.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetCaption</b></TD>
<TD>Returns the value of the <b>Caption</b> property of a <b>Commands</b> collection.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>SetVoice</b></TD>
<TD>Sets the value of the <b>Voice</b> property for a <b>Commands</b> collection.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetVoice</b></TD>
<TD>Returns the value of the <b>Voice</b> property of a <b>Commands</b> collection.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>SetVisible</b></TD>
<TD>Sets the value of the <b>Visible</b> property for a <b>Commands</b> collection.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetVisible</b></TD>
<TD>Returns the value of the <b>Visible</b> property of a <b>Commands</b> collection.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Add</b></TD>
<TD>Adds a <b>Command</b> object to a <b>Commands</b> collection.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Insert</b></TD>
<TD>Inserts a <b>Command</b> object in a <b>Commands</b> collection.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Remove</b></TD>
<TD>Removes a <b>Command</b> object in a <b>Commands</b> collection.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>RemoveAll</b></TD>
<TD>Removes all <b>Command</b> objects from a <b>Commands</b> collection.
</TD>
</TR>
</TABLE>
<P><b><A NAME="IAGENTCOMMANDS::ADD"></A></b><b>IAgentCommands::Add</b>
<P><PRE>HRESULT Add(
   BSTR bszCaption,  // Caption setting for Command
   BSTR bszVoice,    // Voice setting for Command
   long bEnabled,    // Enabled setting for Command
   long bVisible,    // Visible setting for Command
   long * pdwID      // address for variable for ID
);
</PRE>
<P>Adds a <b>Command</b> to a <b>Commands</b> collection.<UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>bszCaption</i>
<P><blockquote>A BSTR that specifies the value of the <b>Caption</b> text displayed for a <b>Command</b> in a <b>Commands</b> collection.</blockquote>
<P><i>bszVoice</i>
<P><blockquote>A BSTR that specifies the value of the <b>Voice</b> text setting for a <b>Command</b> in a <b>Commands</b> collection.</blockquote>
<P><i>bEnabled</i>
<P><blockquote>A Boolean expression that specifies the <b>Enabled</b> setting for a <b>Command</b> in a <b>Commands</b> collection. If the parameter is TRUE, the <b>Command</b> is enabled and can be selected; if FALSE, the <b>Command</b> is disabled.
</blockquote>
<P><i>bVisible</i>
<P><blockquote>A Boolean expression that specifies the <b>Visible</b> setting for a <b>Command</b> in a <b>Commands</b> collection. If the parameter is TRUE, the <b>Command</b> will be visible in the character's pop-up menu (if the <b>Caption</b> property is also set).</blockquote>
<P><i>pdwID </i>
<P><blockquote>Address of a variable that receives the ID for the added <b>Command</b>.</blockquote>
<P>See also <b><A HREF="#IAGENTCOMMAND::SETCAPTION">IAgentCommand::SetCaption</A></b>, <A HREF="#IAGENTCOMMAND::SETENABLED"><b>IAgentCommand::SetEnabled</b></a>, <A HREF="#IAGENTCOMMAND::SETVISIBLE"><b>IAgentCommand::SetVisible</b></a>, <A HREF="#IAGENTCOMMAND::SETVOICE"><b>IAgentCommand::SetVoice</b></a>, <A HREF="#IAGENTCOMMANDS::INSERT"><b>IAgentCommands::Insert</b></a>, <A HREF="#IAGENTCOMMANDS::REMOVE"><b>IAgentCommands::Remove</b></a>, <A HREF="#IAGENTCOMMANDS::REMOVEALL"> <b>IAgentCommands::RemoveAll</b></a>
<P><HR>
<P><b><A NAME="IAGENTCOMMANDS::GETCAPTION"></A></b><b>IAgentCommands::GetCaption</b>
<P><PRE>HRESULT GetCaption(
   BSTR * pbszCaption  // address of Caption text for Commands collection
);
</PRE>
<P>Retrieves the <b>Caption</b> for a <b>Commands</b> collection.<UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>pbszCaption</i>
<P><blockquote>The address of a BSTR that receives the value of the <b>Caption</b> text setting displayed for a <b>Commands</b> collection.</blockquote>
<P>See also <b><A HREF="#IAGENTCOMMAND::SETCAPTION">IAgentCommand::SetCaption</A></b>, <A HREF="#IAGENTCOMMAND::GETVISIBLE"> <b>IAgentCommand::GetVisible</b></a>, <A HREF="#IAGENTCOMMAND::GETVOICE"><b>IAgentCommand::GetVoice</b></a>
<P><HR>
<P><b><A NAME="IAGENTCOMMANDS::GETCOMMAND"></A></b><b>IAgentCommands::GetCommand</b>
<P><PRE>HRESULT GetCommand(
   long dwCommandID,         // Command ID
   IUnknown ** ppunkCommand  // address of IUnknown interface
);                    
</PRE>
<P>Retrieves a <b>Command</b> object from the <b>Commands</b> collection.<UL>

<LI> Returns S_OK to indicate the operation was successful. 
</UL><i>dwCommandID</i>
<P><blockquote>The ID of a Command object in the <b>Commands</b> collection.</blockquote>
<P><i>IUnknown</i>
<P><blockquote>The address of the <b>IUnknown</b> interface for the <b>Command</b> object.</blockquote>
<P>See also <b><A HREF="#IAGENTCOMMAND">IAgentCommand</A></b>
<P><HR>
<P><b><A NAME="IAGENTCOMMANDS::GETCOUNT"></A></b><b>IAgentCommands::GetCount</b>
<P><PRE>HRESULT GetCount(
   long * pdwCount  // address of count of commands
);                    
</PRE>
<P>Retrieves the number of <b>Command</b> objects in a <b>Commands</b> collection.<UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>pdwCount</i>
<P><blockquote>Address of a variable that receives the number of <b>Commands</b> in a <b>Commands</b> collection.</blockquote>
<P><i>pdwCount</i> includes only the number of <b>Commands</b> you define in your <b>Commands</b> collection. Server or other client entries are not included.
<P><HR>
<P><A NAME="IAGENTCOMMANDS::GETVISIBLE"></a><b>IAgentCommands::GetVisible</b>
<P><PRE>HRESULT GetVisible(
   long * pbVisible  // address of Visible setting for Commands collection
);
</PRE>
<P>Retrieves the value of the <b>Visible</b> property for a <b>Commands</b> collection.<UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>pbVisible</i>
<P><blockquote>The address of a variable that receives the value of the <b>Visible</b> property for a <b>Commands</b> collection.</blockquote>
<P>See also <A HREF="#IAGENTCOMMAND::SETVISIBLE"> <b>IAgentCommand::SetVisible</b></a>, <b><A HREF="#IAGENTCOMMANDS::SETCAPTION">IAgentCommands::SetCaption</A></b>
<P><HR>
<P><b><A NAME="IAGENTCOMMANDS::GETVOICE"></A></b><b>IAgentCommands::GetVoice</b>
<P><PRE>HRESULT GetVoice(
   BSTR * pbszVoice  // address of Voice setting for Commands collection
);
</PRE>
<P>Retrieves the value of the <b>Voice</b> property for a <b>Commands</b> collection. <UL>

<LI> Returns S_OK to indicate the operation was successful. 
</UL><i>pbszVoice</i>
<P><blockquote>The address of a BSTR that receives the value of the <b>Voice</b> text setting for a <b>Commands</b> collection.</blockquote>
<P>See also <b><A HREF="#IAGENTCOMMANDS::SETVOICE">IAgentCommands::SetVoice</A></b>, <b><A HREF="#IAGENTCOMMANDS::GETCAPTION">IAgentCommands::GetCaption</A></b>, <A HREF="#IAGENTCOMMAND::GETVISIBLE"> <b>IAgentCommand::GetVisible</b></a>
<P><HR>
<P><b><A NAME="IAGENTCOMMANDS::INSERT"></A></b><b>IAgentCommands::Insert</b>
<P><PRE>HRESULT Insert(
   BSTR bszCaption,  // Caption setting for Command
   BSTR bszVoice,    // Voice setting for Command
   long bEnabled,    // Enabled setting for Command
   long bVisible,    // Visible setting for Command
   long dwRefID,     // reference Command for insertion
   long dBefore,     // insertion position flag
   long * pdwID      // address for variable for Command ID
);
</PRE>
<P>Inserts a <b>Command</b> object in a <b>Commands</b> collection.<UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>bszCaption</i>
<P><blockquote>A BSTR that specifies the value of the <b>Caption</b> text displayed for the <b>Command</b>.</blockquote>
<P><i>bszVoice</i>
<P><blockquote>A BSTR that specifies the value of the <b>Voice</b> text setting for a <b>Command</b>.</blockquote>
<P><i>bEnabled</i>
<P><blockquote>A Boolean expression that specifies the <b>Enabled</b> setting for a <b>Command</b>. If the parameter is TRUE, the <b>Command</b> is enabled and can be selected; if FALSE, the <b>Command</b> is disabled.</blockquote>
<P><i>bVisible</i>
<P><blockquote>A Boolean expression that specifies the <b>Visible</b> setting for a <b>Command</b>. If the parameter is TRUE, the <b>Command</b> will be visible in the character's pop-up menu (if the <b>Caption</b> property is also set).</blockquote>
<P><i>dwRefID</i>
<P><blockquote>The ID of a <b>Command</b> used as a reference for the relative insertion of the new <b>Command</b>.</blockquote>
<P><i>dBefore</i>
<P><blockquote>A Boolean expression that specifies where to place the <b>Command</b>. If this parameter is TRUE, the new <b>Command</b> is inserted before the referenced <b>Command</b>; if FALSE, the new <b>Command</b> is placed after the referenced <b>Command</b>.</blockquote>
<P><i>pdwID </i>
<P><blockquote>Address of a variable that receives the ID for the inserted <b>Command</b>.</blockquote>
<P>See also <b><A HREF="#IAGENTCOMMAND::ADD">IAgentCommand::Add</A></b>, <b><A HREF="#IAGENTCOMMANDS::REMOVE">IAgentCommands::Remove</A></b>, <b><A HREF="#IAGENTCOMMANDS::REMOVEALL">IAgentCommands::RemoveAll</A></b>
<P><HR>
<P><b><A NAME="IAGENTCOMMANDS::REMOVE"></A></b><b>IAgentCommands::Remove</b>
<P><PRE>HRESULT Remove(
   long dwID  // Command ID
);
</PRE>
<P>Removes the specified <b>Command</b> from a <b>Commands</b> collection. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>dwID</i>
<P><blockquote>The ID of a <b>Command</b> to remove from the <b>Commands</b> collection. </blockquote>
<P>Removing a <b>Command</b> from a <b>Commands</b> collection also removes it from the pop-up menu and the Commands Window when your application is input-active.
<P>See also <b><A HREF="#IAGENTCOMMAND::ADD">IAgentCommand::Add</A></b>, <b><A HREF="#IAGENTCOMMANDS::INSERT">IAgentCommands::Insert</A></b>, <b><A HREF="#IAGENTCOMMANDS::REMOVEALL">IAgentCommands::RemoveAll</A></b>
<P><HR>
<P><b><A NAME="IAGENTCOMMANDS::REMOVEALL"></A></b><b>IAgentCommands::RemoveAll</b>
<P><PRE>HRESULT Remove();
</PRE>
<P>Removes all <b>Commands</b> from a <b>Commands</b> collection. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL>Removing all <b>Commands</b> from a <b>Commands</b> collection also removes them from the pop-up menu and the Commands Window when your application is input-active. <b>RemoveAll</b> does not remove server or other client's entries.
<P>See also <b><A HREF="#IAGENTCOMMAND::ADD">IAgentCommand::Add</A></b>, <b><A HREF="#IAGENTCOMMANDS::INSERT">IAgentCommands::Insert</A></b>, <b><A HREF="#IAGENTCOMMANDS::REMOVE">IAgentCommands::Remove</A></b>
<P><HR>
<P><b><A NAME="IAGENTCOMMANDS::SETCAPTION"></A></b><b>IAgentCommands::SetCaption</b>
<P><PRE>HRESULT SetCaption(
   BSTR bszCaption  // Caption setting for Commands collection
);
</PRE>
<P>Sets the <b>Caption</b> text displayed for a <b>Commands</b> collection. <UL>

<LI> Returns S_OK to indicate the operation was successful. 
</UL><i>bszCaption</i>
<P><blockquote>A BSTR that specifies the value for the <b>Caption</b> property for a <b>Commands</b> collection.</blockquote>
<P>A <b>Commands</b> collection with its <b>Caption</b> property set and its <b>Visible</b> property set to TRUE appears in the character's pop-up menu. If its <b>Voice</b> property is also set, it appears in the Commands Window. If you define commands for a <b>Commands</b> collection that have their <b>Caption</b>, <b>Enabled</b>, and <b>Voice</b> properties set, you typically also define <b>Caption</b> and <b>Voice</b> settings for the associated <b>Commands</b> collection. If the <b>Commands</b> collection has no <b>Voice</b> or no <b>Caption</b> setting and is currently input-active, but the <b>Commands</b> in its collection have <b>Caption</b> and <b>Voice</b> settings, the <b>Commands</b> appear in the <b>Commands</b> Window tree view under "(undefined command)" when your client application becomes input-active.
<P>See also <b><A HREF="#IAGENTCOMMANDS::GETCAPTION">IAgentCommands::GetCaption</A></b><b>,</b> <b><A HREF="#IAGENTCOMMANDS::SETVISIBLE">IAgentCommands::SetVisible</A></b>, <b><A HREF="#IAGENTCOMMANDS::SETVOICE">IAgentCommands::SetVoice</A></b>
<P><HR>
<P><b><A NAME="IAGENTCOMMANDS::SETVISIBLE"></A></b><b>IAgentCommands::SetVisible</b>
<P><PRE>HRESULT SetVisible(
   long bVisible  // the Visible setting for Commands collection
);
</PRE>
<P>Sets the value of the <b>Visible</b> property for a <b>Commands</b> collection. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>bVisible</i>
<P><blockquote>A Boolean value that determines the <b>Visible</b> property of a <b>Commands</b> collection. TRUE sets the <b>Commands</b> collection's <b>Caption</b> to be visible when the character's pop-up menu is displayed; FALSE does not display it.</blockquote>
<P>A <b>Commands</b> collection must have its <b>Caption</b> property set and its <b>Visible</b> property set to TRUE to appear on the character's pop-up menu. The <b>Visible</b> property must also be set to TRUE for commands in the collection to appear when your client application is input-active.
<P>See also <b><A HREF="#IAGENTCOMMANDS::GETVISIBLE">IAgentCommands::GetVisible</A></b>, <b><A HREF="#IAGENTCOMMANDS::SETCAPTION">IAgentCommands::SetCaption</A></b>
<P><HR>
<P><b><A NAME="IAGENTCOMMANDS::SETVOICE"></A></b><b>IAgentCommands::SetVoice</b>
<P><PRE>HRESULT SetVoice(
   BSTR bszVoice  // the Voice setting for Command collection
);
</PRE>
<P>Sets the <b>Voice</b> text property for a <b>Command</b>. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>bszVoice</i>
<P><blockquote>A BSTR that specifies the value for the <b>Voice</b> text property of a <b>Commands</b> collection.</blockquote>
<P>A <b>Commands</b> collection must have its <b>Voice</b> text property set to be voice-accessible. It also must have its <b>Caption</b> property set to appear in the Commands Window and its <b>Visible</b> property set to TRUE to appear on the character's pop-up menu.
<P>The BSTR expression you supply can include square bracket characters ([ ]) to indicate optional words and vertical bar characters (|) to indicate alternative strings. Alternates must be enclosed in parentheses. For example, "(hello [there] | hi)" tells the speech engine to accept "hello," "hello there," or "hi" for the command. Remember to include appropriate spaces between the text that's in brackets or parentheses and the text that's not in brackets or parentheses. 
<P>You can also use an ellipsis (&#133;) to support <i>word spotting</i>, that is, telling the speech recognition engine to ignore words spoken in this position in the phrase (sometimes called <i>garbage</i> words). When you use ellipses, the speech engine recognizes only specific words in the string regardless of when spoken with adjacent words or phrases. For example, if you set this property to "&#133;check mail&#133;" the speech recognition engine will match phrases like "please check mail" or "check mail please" to this command. Ellipses can be used anywhere within a string. However, be careful using this technique as voice settings with ellipses may increase the potential of unwanted matches. 
<P>When defining the words and grammar for your command, always make sure that you include at least one word that is required; that is, avoid supplying only optional words. In addition, make sure that the word includes only pronounceable words and letters. For numbers, it is better to spell out the word rather than using the numeric representation. Also, omit any punctuation or symbols. For example, instead of "the #1 $10 pizza!", use "the number one ten dollar pizza". Including non-pronounceable characters or symbols for one command may cause the speech engine to fail to compile the grammar for all your commands. Finally, make your voice parameter as distinct as reasonably possible from other voice commands you define. The greater the similarity between the voice grammar for commands, the more likely the speech engine will make a recognition error. You can also use the confidence scores to better distinguish between two commands that may have similar or similar-sounding voice grammar.
<P>The operation of this property depends on the state of Microsoft Agent server's speech recognition state. For example, if speech recognition is disabled or not installed, this function has no immediate effect. If speech recognition is enabled during a session, however, the command will become accessible when its client application is input-active.

<P>See also <b><A HREF="#IAGENTCOMMANDS::GETVOICE">IAgentCommands::GetVoice</A></b>, <b><A HREF="#IAGENTCOMMANDS::SETCAPTION">IAgentCommands::SetCaption</A></b>, <b><A HREF="#IAGENTCOMMANDS::SETVISIBLE">IAgentCommands::SetVisible</A></b>
<P>
<hr>
<P><H4><A NAME="IAGENTCOMMAND"></A>IAgentCommand</H4>
<P>A <b>Command</b> object is an item in a <b>Commands</b> collection. The server provides the user access to your commands your client application becomes input active. To retrieve a <b>Command</b>, call <b>IAgentCommands::GetCommand</b>.
<P><b>IAgentCommand</b> defines an interface that allows applications to set and query properties for <b>Command</b> objects that can appear in a character's pop-up menu and in the Commands Window. A <b>Command</b> object is an item in a <b>Commands</b> collection. The server provides the user access to your commands when your client application becomes input active.
<P>A <b>Command</b> may appear in either or both the character's pop-up menu and the Commands Window. To appear in the pop-up menu, it must have a <b>Caption</b> and have the <b>Visible</b> property set to TRUE. The <b>Visible</b> property for its <b>Commands</b> collection object must also be set to TRUE for the command to appear in the pop-up menu when your client application is input-active.  To appear in the Commands Window, a <b>Command</b> must have its <b>Caption</b> and <b>Voice</b> properties set. 
<P>A character's pop-up menu entries do not change while the menu is displayed. If you add or remove Commands or change their properties while the character's popup menu is displayed, the menu displays those changes when redisplayed. However, the Commands Window does display changes as you make them.
<P>The following table summarizes how the properties of a command affect its presentation.
<P>
<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Caption Property</b></TD>
<TD><b>Voice Property </b></TD>
<TD><b>Visible Property</b></TD>
<TD><b>Enabled Property</b></TD>
<TD><b>Appears in Character's Pop-up Menu</b></TD>
<TD><b>Appears in Commands Window</b></TD>
</TR>
<TR VALIGN=TOP>
<TD>Yes</TD>
<TD>Yes</TD>
<TD>True</TD>
<TD>True</TD>
<TD>Normal</TD>
<TD>Yes</TD>
</TR>
<TR VALIGN=TOP>
<TD>Yes</TD>
<TD>Yes</TD>
<TD>True</TD>
<TD>False</TD>
<TD>Disabled</TD>
<TD>No</TD>
</TR>
<TR VALIGN=TOP>
<TD>Yes</TD>
<TD>Yes</TD>
<TD>False</TD>
<TD>True</TD>
<TD>Does not appear</TD>
<TD>Yes</TD>
</TR>
<TR VALIGN=TOP>
<TD>Yes</TD>
<TD>Yes</TD>
<TD>False</TD>
<TD>False</TD>
<TD>Does not appear</TD>
<TD>No</TD>
</TR>
<TR VALIGN=TOP>
<TD>Yes</TD>
<TD>No</TD>
<TD>True</TD>
<TD>True</TD>
<TD>Normal</TD>
<TD>No</TD>
</TR>
<TR VALIGN=TOP>
<TD>Yes</TD>
<TD>No</TD>
<TD>True</TD>
<TD>False</TD>
<TD>Disabled</TD>
<TD>No</TD>
</TR>
<TR VALIGN=TOP>
<TD>Yes</TD>
<TD>No</TD>
<TD>False</TD>
<TD>True</TD>
<TD>Does not appear</TD>
<TD>No</TD>
</TR>
<TR VALIGN=TOP>
<TD>Yes</TD>
<TD>No</TD>
<TD>False</TD>
<TD>False</TD>
<TD>Does not appear</TD>
<TD>No</TD>
</TR>
<TR VALIGN=TOP>
<TD>No</TD>
<TD>Yes</TD>
<TD>True </TD>
<TD>True</TD>
<TD>Does not appear</TD>
<TD>No*</TD>
</TR>
<TR VALIGN=TOP>
<TD>No</TD>
<TD>Yes</TD>
<TD>True</TD>
<TD>False</TD>
<TD>Does not appear</TD>
<TD>No</TD>
</TR>
<TR VALIGN=TOP>
<TD>No</TD>
<TD>Yes</TD>
<TD>False</TD>
<TD>True</TD>
<TD>Does not appear</TD>
<TD>No*</TD>
</TR>
<TR VALIGN=TOP>
<TD>No</TD>
<TD>Yes</TD>
<TD>False</TD>
<TD>False</TD>
<TD>Does not appear</TD>
<TD>No</TD>
</TR>
<TR VALIGN=TOP>
<TD>No</TD>
<TD>No</TD>
<TD>True</TD>
<TD>True</TD>
<TD>Does not appear</TD>
<TD>No</TD>
</TR>
<TR VALIGN=TOP>
<TD>No</TD>
<TD>No</TD>
<TD>True</TD>
<TD>False</TD>
<TD>Does not appear</TD>
<TD>No</TD>
</TR>
<TR VALIGN=TOP>
<TD>No</TD>
<TD>No</TD>
<TD>False</TD>
<TD>True</TD>
<TD>Does not appear</TD>
<TD>No</TD>
</TR>
<TR VALIGN=TOP>
<TD>No</TD>
<TD>No</TD>
<TD>False</TD>
<TD>False</TD>
<TD>Does not appear</TD>
<TD>No</TD>
</TR>
</TABLE>*The command is still voice-accessible.
<P>Generally, if you define a <b>Command</b> with a <b>Voice</b> setting, you also define <b>Caption</b> and <b>Voice</b> settings for its associated <b>Commands</b> collection. If the <b>Commands</b> collection for a set of commands has no <b>Voice</b> or no <b>Caption</b> setting and is currently input-active, but the <b>Commands</b> have <b>Caption</b> and <b>Voice</b> settings, the <b>Commands</b> appear in the Commands Window tree view under "(undefined command)" when your client application becomes input active. 
<P>When the server receives input that matches one of the <b>Command</b> objects you defined for your <b>Commands</b> collection, it sends a <b>IAgentNotifySink::Command</b> event, and passes back the ID of the command as an attribute of the <b>IAgentUserInput</b> object. You can then use conditional statements to match and process the command.
<P><H4>Methods in Vtable Order</H4>
<P>
<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>IAgentCommand Methods</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><b>SetCaption</b></TD>
<TD>Sets the value for the <b>Caption</b> for a <b>Command</b> object.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetCaption</b></TD>
<TD>Returns the value of the <b>Caption</b> property of a <b>Command</b> object.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>SetVoice</b></TD>
<TD>Sets the value for the <b>Voice</b> text for a <b>Command</b> object.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetVoice</b></TD>
<TD>Returns the value of the <b>Caption</b> property of a <b>Command</b> object.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>SetEnabled</b></TD>
<TD>Sets the value of the <b>Enabled</b> property for a <b>Command</b> object.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetEnabled</b></TD>
<TD>Returns the value of the <b>Enabled</b> property of a <b>Command</b> object.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>SetVisible</b></TD>
<TD>Sets the value of the <b>Visible</b> property for a <b>Command</b> object.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetVisible</b></TD>
<TD>Returns the value of the <b>Visible</b> property of a <b>Command</b> object.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>SetConfidenceThreshold </b></TD>
<TD>Sets the value of the <b>Confidence</b> property for a <b>Command</b> object.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetConfidenceThreshold</b></TD>
<TD>Returns the value of the <b>Confidence</b> property of a <b>Command</b> object.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>SetConfidenceText</b></TD>
<TD>Sets the value of the <b>ConfidenceText</b> property for a <b>Command</b> object.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetConfidenceText</b></TD>
<TD>Returns the value of the <b>ConfidenceText</b> property of a <b>Command</b> object.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetID </b></TD>
<TD>Returns the ID of a <b>Command</b> object.
</TD>
</TR>
</TABLE>
<P><b><A NAME="IAGENTCOMMAND::GETCAPTION"></A></b><b>IAgentCommand::GetCaption</b>
<P><PRE>HRESULT GetCaption(
   BSTR * pbszCaption  // address of Caption for Command
);
</PRE>
<P>Retrieves the <b>Caption</b> for a <b>Command</b>.<UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>pbszCaption</i>
<P><blockquote>The address of a BSTR that receives the value of the <b>Caption</b> text displayed for a <b>Command</b>.</blockquote>
<P>See also <A HREF="#IAGENTCOMMAND::SETCAPTION"><b>IAgentCommand::SetCaption</b></a>, <A HREF="#IAGENTCOMMAND::SETENABLED"><b>IAgentCommand::SetEnabled</b></a>, <A HREF="#IAGENTCOMMAND::SETVISIBLE"><b>IAgentCommand::SetVisible</b></a>, <A HREF="#IAGENTCOMMAND::SETVOICE"><b>IAgentCommand::SetVoice</b></a>, <A HREF="#IAGENTCOMMANDS::ADD"><b>IAgentCommands::Add</b></a>, <A HREF="#IAGENTCOMMANDS::INSERT"><b>IAgentCommands::Insert</b></a>
<P><HR>
<P><b><A NAME="IAGENTCOMMAND::GETCONFIDENCETEXT"></A></b><b>IAgentCommand::GetConfidenceText</b>
<P><PRE>HRESULT GetConfidenceText(
   BSTR * pbszTipText  // address of ConfidenceText setting for Command 
);
</PRE>
<P>Retrieves the Listening Tip text previously set for a <b>Command</b>.<UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>pbszTipText</i>
<P>The address of a BSTR that receives the value of the Listening Tip text for a <b>Command</b>.
<P>See also<b> </b><b><A HREF="#IAGENTCOMMAND::SETCONFIDENCETHRESHOLD">IAgentCommand::SetConfidenceThreshold</A></b>, <b><A HREF="#IAGENTCOMMAND::GETCONFIDENCETHRESHOLD">IAgentCommand::GetConfidenceThreshold</A></b>, <b><A HREF="#IAGENTCOMMAND::SETCONFIDENCETEXT">IAgentCommand::SetConfidenceText</A></b>, <b><A HREF="#IAGENTUSERINPUT::GETITEMCONFIDENCE">IAgentUserInput::GetItemConfidence</A></b>
<P><HR>
<P><b><A NAME="IAGENTCOMMAND::GETCONFIDENCETHRESHOLD"></A></b><b>IAgentCommand::GetConfidenceThreshold</b>
<P><PRE>HRESULT GetConfidenceThreshold(
long * plConfidenceThreshold  // address of ConfidenceThreshold 
);                            // setting for Command
</PRE>
<P>Retrieves the value of the <b>ConfidenceThreshold</b> property for a <b>Command</b>. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>plConfidenceThreshold</i>
<P><blockquote>The address of a variable that receives the value of the <b>ConfidenceThreshold</b> property for a Command.</blockquote>
<P>See also <b><A HREF="#IAGENTCOMMAND::SETCONFIDENCETHRESHOLD">IAgentCommand::SetConfidenceThreshold</A></b>, <b><A HREF="#IAGENTCOMMAND::SETCONFIDENCETEXT">IAgentCommand::SetConfidenceText</A></b>, <b><A HREF="#IAGENTUSERINPUT::GETITEMCONFIDENCE">IAgentUserInput::GetItemConfidence</A></b>
<P><HR>
<P><b><A NAME="IAGENTCOMMAND::GETENABLED"></A></b><b>IAgentCommand::GetEnabled</b>
<P><PRE>HRESULT GetEnabled(
   long * pbEnabled  // address of Enabled setting for Command
);
</PRE>
<P>Retrieves the value of the <b>Enabled</b> property for a <b>Command</b>. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>pbEnabled</i>
<P><blockquote>The address of a variable that receives TRUE if the <b>Command</b> is enabled, or FALSE if it is disabled. A disabled <b>Command</b> cannot be selected.</blockquote>
<P>See also <b><A HREF="#IAGENTCOMMAND::SETCAPTION">IAgentCommand::SetCaption</A></b>, <A HREF="#IAGENTCOMMAND::SETVISIBLE"><b>IAgent::SetVisible</b></a>, <A HREF="#IAGENTCOMMAND::SETVOICE"><b>IAgentCommand::SetVoice</b></a>, <A HREF="#IAGENTCOMMANDS::ADD"><b>IAgentCommands::Add</b></a>, <A HREF="#IAGENTCOMMANDS::INSERT"><b>IAgentCommands::Insert</b></a>

<P><HR>
<P><b><A NAME="IAGENTCOMMAND::GETID"></A></b><b>IAgentCommand::GetID</b>
<P><PRE>HRESULT GetID(
   long * pdwID  // address of ID for Command
);
</PRE>
<P>Retrieves the ID for a <b>Command</b>. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>pdwID</i>
<P><blockquote>The address of a variable that receives the ID of a <b>Command</b>.</blockquote>
<P>See also <A HREF="#IAGENTCOMMANDS::ADD"><b>IAgentCommands::Add</b></a>, <A HREF="#IAGENTCOMMANDS::INSERT"> <b>IAgentCommands::Insert</b></a>, <b><A HREF="#IAGENTCOMMANDS::REMOVE">IAgentCommands::Remove</A></b>
<P><HR>
<P><b><A NAME="IAGENTCOMMAND::GETVISIBLE"></A></b><b>IAgentCommand::GetVisible</b>
<P><PRE>HRESULT GetVisible(
   long * pbVisible  // address of Visible setting for Command
);
</PRE>
<P>Retrieves the value of the <b>Visible</b> property for a <b>Command</b>. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>pbVisible</i>
<P><blockquote>The address of a variable that receives the <b>Visible</b> property for a <b>Command</b>.</blockquote>
<P>See also <b><A HREF="#IAGENTCOMMAND::SETVISIBLE">IAgentCommand::SetVisible</A></b>, <b><A HREF="#IAGENT::SETCAPTION">IAgent::SetCaption</A></b>, <A HREF="#IAGENTCOMMANDS::ADD"><b>IAgentCommands::Add</b></a>, <b><A HREF="#IAGENTCOMMANDS::INSERT">IAgentCommands::Insert</A></b>
<P><HR>
<P><b><A NAME="IAGENTCOMMAND::GETVOICE"></A></b><b>IAgentCommand::GetVoice</b>
<P><PRE>HRESULT GetVoice(
   BSTR * pbszVoice  // address of Voice setting for Command
);
</PRE>
<P>Retrieves the value of the <b>Voice</b> text property for a <b>Command</b>. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>pbszVoice</i>
<P><blockquote>The address of a BSTR that receives the <b>Voice</b> text property for a <b>Command</b>.</blockquote>
<P>A <b>Command</b> with its <b>Voice</b> property set and its <b>Enabled</b> property set to TRUE will be voice-accessible. If its <b>Caption</b> property is also set it appears in the Commands Window. If its <b>Visible</b> property is set to TRUE, it appears in the character's pop-up menu.
<P>See also <b><A HREF="#IAGENTCOMMAND::SETVOICE">IAgentCommand::SetVoice</A></b>, <A HREF="#IAGENTCOMMANDS::ADD"><b>IAgentCommands::Add</b></a>, <b><A HREF="#IAGENTCOMMANDS::INSERT">IAgentCommands::Insert</A></b>
<P><HR>
<P><b><A NAME="IAGENTCOMMAND::SETCAPTION"></A></b><b>IAgentCommand::SetCaption</b>
<P><PRE>HRESULT SetCaption(
   BSTR bszCaption  // Caption setting for Command
);
</PRE>
<P>Sets the <b>Caption</b> text displayed for a <b>Command</b>. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>bszCaption</i>
<P><blockquote>A BSTR that specifies the text for the <b>Caption</b> property for a <b>Command</b>.</blockquote>
<P>A <b>Command</b> with its <b>Caption</b> property set and its <b>Visible</b> property set to TRUE appears in the character's pop-up menu. If its <b>Voice</b> property is also set, it appears in the Commands Window. To make it accessible, you must also set its <b>Enabled</b> property to TRUE.
<P>See also <b><A HREF="#IAGENTCOMMAND::GETCAPTION">IAgentCommand::GetCaption</A></b>, <b><A HREF="#IAGENTCOMMAND::SETENABLED">IAgentCommand::SetEnabled</A></b>, <b><A HREF="#IAGENTCOMMAND::SETVISIBLE">IAgentCommand::SetVisible</A></b>, <b><A HREF="#IAGENTCOMMAND::SETVOICE">IAgentCommand::SetVoice</A></b>, <A HREF="#IAGENTCOMMANDS::ADD"><b>IAgentCommands::Add</b></a>, <b><A HREF="#IAGENTCOMMANDS::INSERT">IAgentCommands::Insert</A></b>
<P><HR>
<P><b><A NAME="IAGENTCOMMAND::SETCONFIDENCETHRESHOLD"></A></b><b>IAgentCommand::SetConfidenceThreshold</b>
<P><PRE>HRESULT SetConfidenceThreshold(
   long lConfidence  // Confidence setting for Command
);
</PRE>
<P>Sets the value of the <b>Confidence</b> property for a <b>Command</b>. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>lConfidence</i>
<P><blockquote>The value for the <b>Confidence</b> property of a <b>Command</b>.</blockquote>
<P>If the confidence value returned of the best match returned in the <b>Command</b> event does not exceed the value set for the <b>ConfidenceThreshold</b> property, the text supplied in <b>SetConfidenceText</b> is displayed in the Listening Tip.
<P>See also <b><A HREF="#IAGENTCOMMAND::GETCONFIDENCETHRESHOLD">IAgentCommand::GetConfidenceThreshold</A></b>, <b><A HREF="#IAGENTCOMMAND::SETCONFIDENCETEXT">IAgentCommand::SetConfidenceText</A></b>, <b><A HREF="#IAGENTUSERINPUT::GETITEMCONFIDENCE">IAgentUserInput::GetItemConfidence</A></b>
<P><HR>
<P><b><A NAME="IAGENTCOMMAND::SETCONFIDENCETEXT"></A></b><b>IAgentCommand::SetConfidenceText</b>
<P><PRE>HRESULT SetConfidenceText(
   BSTR bszTipText  // ConfidenceText setting for Command 
);
</PRE>
<P>Sets the value of the Listening Tip text for a <b>Command</b>. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>bszTipText</i>
<P><blockquote>A BSTR that specifies the text for the <b>ConfidenceText</b> property of a <b>Command</b>.</blockquote>
<P>If the confidence value returned of the best match returned in the <b>Command</b> event does not exceed the value set for the <b>ConfidenceThreshold</b> property, the text supplied in <i>bszTipText</i> is displayed in the Listening Tip.
<P>See also <b><A HREF="#IAGENTCOMMAND::SETCONFIDENCETHRESHOLD">IAgentCommand::SetConfidenceThreshold</A></b>, <b><A HREF="#IAGENTCOMMAND::GETCONFIDENCETHRESHOLD">IAgentCommand::GetConfidenceThreshold</A></b>, <b><A HREF="#IAGENTCOMMAND::GETCONFIDENCETEXT">IAgentCommand::GetConfidenceText</A></b>, <b><A HREF="#IAGENTUSERINPUT::GETITEMCONFIDENCE">IAgentUserInput::GetItemConfidence</A></b>
<P><HR>
<P><b><A NAME="IAGENTCOMMAND::SETENABLED"></A></b><b>IAgentCommand::SetEnabled</b>
<P><PRE>HRESULT SetEnabled(
   long bEnabled  // Enabled setting for Command
);
</PRE>
<P>Sets the <b>Enabled</b> property for a <b>Command</b>. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>bEnabled</i>
<P><blockquote>A Boolean value that sets the value of the <b>Enabled</b> setting of a <b>Command</b>. TRUE enables the <b>Command</b>; FALSE disables it. A disabled <b>Command</b> cannot be selected. </blockquote>
<P>A <b>Command</b> must have its <b>Enabled</b> property set to TRUE to be selectable. It also must have its <b>Caption</b> property set and its <b>Visible</b> property set to TRUE to appear in the character's pop-up menu. To make the <b>Command</b> appear in the <b>Commands</b> Window, you must set its <b>Voice </b>property.
<P>See also <b><A HREF="#IAGENTCOMMAND::GETCAPTION">IAgentCommand::GetCaption</A></b>, <A HREF="#IAGENTCOMMAND::SETVOICE"><b>IAgentCommand::SetVoice</b></a>, <A HREF="#IAGENTCOMMANDS::ADD"><b>IAgentCommands::Add</b></a>, <A HREF="#IAGENTCOMMANDS::INSERT"><b>IAgentCommands::Insert</b></a>
<P><HR>
<P><b><A NAME="IAGENTCOMMAND::SETVISIBLE"></A></b><b>IAgentCommand::SetVisible</b>
<P><PRE>HRESULT SetVisible(
   long bVisible  // Visible setting for Command
);
</PRE>
<P>Sets the value of the <b>Visible</b> property for a <b>Command</b>. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>bVisible</i>
<P><blockquote>A Boolean value that determines the <b>Visible</b> property of a <b>Command</b>. TRUE shows the <b>Command</b>; FALSE hides it.</blockquote>
<P>A <b>Command</b> must have its <b>Visible</b> property set to TRUE and its <b>Caption</b> property set to appear in the character's pop-up menu.
<P>See also <b><A HREF="#IAGENTCOMMANDS::SETVISIBLE">IAgentCommands::SetVisible</A></b>, <b><A HREF="#IAGENT::SETCAPTION">IAgent::SetCaption</A></b>, <A HREF="#IAGENTCOMMANDS::ADD"><b>IAgentCommands::Add</b></a>, <A HREF="#IAGENTCOMMANDS::INSERT"><b>IAgentCommands::Insert</b></a>
<P><HR>
<P><b><A NAME="IAGENTCOMMAND::SETVOICE"></A></b><b>IAgentCommand::SetVoice</b>
<P><PRE>HRESULT SetVoice(
   BSTR bszVoice  // voice text setting for Command
);
</PRE>
<P>Sets the <b>Voice</b> property for a <b>Command</b>. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>bszVoice</i>
<P><blockquote>A BSTR that specifies the text for the <b>Voice</b> property of a <b>Command</b>.</blockquote>
<P>A <b>Command</b> must have its <b>Voice</b> property and <b>Enabled</b> property set to be voice-accessible. It also must have its <b>Caption</b> property set to appear in the Commands Window.
<P>The BSTR expression you supply can include square bracket characters ([ ]) to indicate optional words and vertical bar characters (|) to indicate alternative strings. Alternates must be enclosed in parentheses. For example, "(hello [there] | hi)" tells the speech engine to accept "hello," "hello there," or "hi" for the command. Remember to include appropriate spaces between the text that's in brackets or parentheses and the text that's not in brackets or parentheses.
<P>You can also use an ellipsis (&#133;) to support <i>word spotting</i>, that is, telling the speech recognition engine to ignore words spoken in this position in the phrase (sometimes called <i>garbage</i> words). Therefore, the speech engine recognizes only specific words in the string regardless of when spoken with adjacent words or phrases. For example, if you set this property to "&#133;check mail&#133;" the speech recognition engine will match phrases like "please check mail" or "check mail please" to this command. Ellipses can be used anywhere within a string. However, be careful using this technique, because voice settings with ellipses may increase the potential of unwanted matches. 
<P>When defining the words and grammar for your command, always make sure that you include at least one word that is required; that is, avoid supplying only optional words. In addition, make sure that the word includes only pronounceable words and letters. For numbers, it is better to spell out the word rather than using the numeric representation. Also, omit any punctuation or symbols. For example, instead of "the #1 $10 pizza!", use "the number one ten dollar pizza". Including non-pronounceable characters or symbols for one command may cause the speech engine to fail to compile the grammar for all your commands. Finally, make your voice parameter as distinct as reasonably possible from other voice commands you define. The greater the similarity between the voice grammar for commands, the more likely the speech engine will make a recognition error. You can also use the confidence scores to better distinguish between two commands that may have similar or similar-sounding voice grammar.
<P>The operation of this property depends on the state of Microsoft Agent server's speech recognition state. For example, if speech recognition is disabled or not installed, this function has no immediate effect. If speech recognition is enabled during a session, however, the command will become accessible when its client application is input-active.
<P>See also <b><A HREF="#IAGENTCOMMAND::GETVOICE">IAgentCommand::GetVoice</A></b>, <b><A HREF="#IAGENT::SETCAPTION">IAgent::SetCaption</A></b>, <b><A HREF="#IAGENTCOMMAND::SETENABLED">IAgentCommand::SetEnabled</A></b>, <A HREF="#IAGENTCOMMANDS::ADD"><b>IAgentCommands::Add</b></a>, <A HREF="#IAGENTCOMMANDS::INSERT"><b>IAgentCommands::Insert</b></a>
<P>
<hr>
<P><H4><A NAME="IAGENTUSERINPUT"></A>IAgentUserInput</H4>
<P>When a <b>Command</b> event occurs, the Microsoft Agent server returns information through the <b>UserInput</b> object.
<b> IAgentUserInput</b> defines an interface that allows applications to query these values. 
<P><H4>Methods in Vtable Order</H4>
<P>
<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>IAgentUserInput Methods</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetCount</b></TD>
<TD>Returns the number of command alternatives returned in a <b>Command</b> event.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetItemId</b></TD>
<TD>Returns the ID for a specific <b>Command</b> alternative.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetItemConfidence</b></TD>
<TD>Returns the value of the <b>Confidence</b> property for a specific <b>Command</b> alternative.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetItemText</b></TD>
<TD>Returns the value of <b>Voice</b> text for a specific <b>Command</b> alternative.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetAllItemData</b></TD>
<TD>Returns the data for all <b>Command</b> alternatives.
</TD>
</TR>
</TABLE>
<P><b><A NAME="IAGENTUSERINPUT::GETALLITEMDATA"></A></b><b>IAgentUserInput::GetAllItemData</b>
<P><PRE>HRESULT GetAllItemData(
   VARIANT * pdwItemIndices,  // address of variable for alternative IDs
   VARIANT * plConfidences,   // address of variable for confidence scores
   VARIANT * pbszText         // address of variable for voice text
);
</PRE>
<P>Retrieves the data for all <b>Command</b> alternatives passed to an <b>IAgentNotifySink::Command</b> callback.<UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>pdwItemIndices</i>
<P><blockquote>Address of a variable that receives the IDs of <b>Commands</b> passed to the <b>IAgentNotifySink::Command</b> callback.</blockquote>
<P><i>plConfidences</i>
<P><blockquote>Address of a variable that receives the confidence scores for <b>Command</b> alternatives passed to the <b>IAgentNotifySink::Command</b> callback.</blockquote>
<P><i>pbszText</i>
<P><blockquote>Address of a variable that receives the voice text for <b>Command</b> alternatives passed to the <b>IAgentNotifySink::Command</b> callback.</blockquote>
<P>If voice input was not the source for the <b>Command</b>, for example, if the user selected the command from the character's pop-up menu, the Microsoft Agent server returns the ID of the <b>Command</b> selected, with a confidence score of 100 and voice text as NULL. The other alternatives return as NULL with confidence scores of zero (0) and voice text as NULL.
<P>See also <b><A HREF="#IAGENTUSERINPUT::GETITEMCONFIDENCE">IAgentUserInput::GetItemConfidence</A></b>, <b><A HREF="#IAGENTUSERINPUT::GETITEMTEXT">IAgentUserInput::GetItemText</A></b>, <b><A HREF="#IAGENTUSERINPUT::GETITEMID">IAgentUserInput::GetItemID</A></b>
<P><HR>
<P><b><A NAME="IAGENTUSERINPUT::GETCOUNT"></A></b><b>IAgentUserInput::GetCount</b>
<P><PRE>HRESULT GetCount(
   long * pdwCount  // address of a variable for number of alternatives 
);
</PRE>
<P>Retrieves the number of <b>Command</b> alternatives passed to an <b>IAgentNotifySink::Command</b> callback.<UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>pdwCount</i>
<P><blockquote>Address of a variable that receives the count of <b>Commands</b> alternatives identified by the server.</blockquote>
<P>If voice input was not the source for the command, for example, if the user selected the command from the character's pop-up menu, <b>GetCount</b> returns 1. If <b>GetCount</b> returns zero (0), the speech recognition engine detected spoken input but determined that there was no matching command.
<P><HR>
<P><b><A NAME="IAGENTUSERINPUT::GETITEMCONFIDENCE"></A></b><b>IAgentUserInput::GetItemConfidence</b>
<P><PRE>HRESULT GetItemConfidence(
   long dwItemIndex,    // index of Command alternative
   long * plConfidence  // address of confidence value for Command 
);
</PRE>
<P>Retrieves the confidence value for a <b>Command</b> passed to an <b>IAgentNotifySink::Command</b> callback.<UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>dwItemIndex</i>
<P><blockquote>The index of a <b>Command</b> alternative passed to the <b>IAgentNotifySink::Command</b> callback.</blockquote>
<P><i>plConfidence</i>
<P><blockquote>Address of a variable that receives the confidence score for a <b>Command</b> alternative passed to the <b>IAgentNotifySink::Command</b> callback.</blockquote>
<P>If voice input was not the source for the command, for example, if the user selected the command from the character's pop-up menu, the Microsoft Agent server returns the confidence value of the best match<b> </b>as 100 and the confidence values for all other alternatives as zero (0).
<P>See also <b><A HREF="#IAGENTUSERINPUT::GETITEMID">IAgentUserInput::GetItemID</A></b>, <b><A HREF="#IAGENTUSERINPUT::GETALLITEMDATA">IAgentUserInput::GetAllItemData</A></b>, <b><A HREF="#IAGENTUSERINPUT::GETITEMTEXT">IAgentUserInput::GetItemText</A></b>
<P><HR>
<P><b><A NAME="IAGENTUSERINPUT::GETITEMID"></A></b><b>IAgentUserInput::GetItemID</b>
<P><PRE>HRESULT GetItemID(
   long dwItemIndex,    // index of Command alternative
   long * pdwCommandID  // address of a variable for number of alternatives 
);
</PRE>
<P>Retrieves the identifier of a <b>Command</b> alternative passed to an <b>IAgentNotifySink::Command</b> callback.<UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>dwItemIndex</i>
<P><blockquote>The index of the <b>Command</b> alternative passed to the <b>IAgentNotifySink::Command</b> callback.</blockquote>
<P><i>pdwCommandID</i><P><blockquote>Address of a variable that receives the ID of a <b>Command</b>.</blockquote>
<P>If voice input triggers the <b>IAgentNotifySink::Command</b> callback, the server returns the IDs for any matching <b>Commands</b> defined by your application. 
<P>See also <b><A HREF="#IAGENTUSERINPUT::GETITEMCONFIDENCE">IAgentUserInput::GetItemConfidence</A></b>, <b><A HREF="#IAGENTUSERINPUT::GETITEMTEXT">IAgentUserInput::GetItemText</A></b>, <b><A HREF="#IAGENTUSERINPUT::GETALLITEMDATA">IAgentUserInput::GetAllItemData</A></b>
<P><HR>
<P><b><A NAME="IAGENTUSERINPUT::GETITEMTEXT"></A></b><b>IAgentUserInput::GetItemText</b>
<P><PRE>HRESULT GetItemText(
   Long dwItemIndex,  // index of Command alternative
   BSTR * pbszText    // address of voice text for Command 
);
</PRE>
<P>Retrieves the voice text for a <b>Command</b> alternative passed to the <b>IAgentNotifySink::Command</b> callback.<UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>dwItemIndex</i>
<P><blockquote>The index of a <b>Command</b> alternative passed to the <b>IAgentNotifySink::Command</b> callback.</blockquote>
<P><i>pbszText</i>
<P><blockquote>Address of a BSTR that receives the value of the voice text for the <b>Command</b>.</blockquote>
<P>If voice input was not the source for the command, for example, if the user selected the command from the character's pop-up menu, the server returns NULL for the <b>Command</b>'s voice text.
<P>See also <b><A HREF="#IAGENTUSERINPUT::GETITEMCONFIDENCE">IAgentUserInput::GetItemConfidence</A></b>, <b><A HREF="#IAGENTUSERINPUT::GETITEMID">IAgentUserInput::GetItemID</A></b>, <b><A HREF="#IAGENTUSERINPUT::GETALLITEMDATA">IAgentUserInput::GetAllItemData</A></b>
<P><hr>
<P><H4><A NAME="IAGENTCOMMANDWINDOW"></A>IAgentCommandWindow</H4>
<P><b>IAgentCommandWindow</b> defines an interface that allows applications to set and query the properties of the Commands Window. The Commands Window is a shared resource primarily designed for allowing users to view voice-enabled commands. If speech recognition is disabled or not installed, the Commands Window is not accessible. Attempting to set or query its properties will result in an error.
<P><H4>Methods in Vtable Order</H4>
<P>
<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>IAgentCommandWindow Methods</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><b>SetVisible</b></TD>
<TD>Sets the value of the <b>Visible</b> property of the Commands Window.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetVisible</b></TD>
<TD>Returns the value of the <b>Visible</b> property of the Commands Window.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetPosition</b></TD>
<TD>Returns the position of the Commands Window.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetSize</b></TD>
<TD>Returns the size of the Commands Window.
</TD>
</TR>
</TABLE>
<P><b><A NAME="IAGENTCOMMANDWINDOW::GETPOSITION"></A></b><b>IAgentCommandWindow::GetPosition</b>
<P><PRE>HRESULT GetPosition(
   long * plLeft,  // address of variable for left-edge of Commands Window
   long * plTop    // address of variable for top-edge of Commands Window
);
</PRE>
<P>Retrieves the Commands Windows' position.<UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>plLeft</i>
<P><blockquote>Address of a variable that receives the screen coordinate of the left edge of the Commands Window in pixels, relative to the screen origin (upper left).</blockquote>
<P><i>plTop</i>
<P><blockquote>Address of a variable that receives the screen coordinate of the top edge of the Commands Window in pixels, relative to the screen origin (upper left).</blockquote>
<P>See also <b><A HREF="#IAGENTCOMMANDWINDOW::GETSIZE">IAgentCommandWindow::GetSize</A></b>
<P><HR>
<P><b><A NAME="IAGENTCOMMANDWINDOW::GETSIZE"></A></b><b>IAgentCommandWindow::GetSize</b>
<P><PRE>HRESULT GetSize(
   long * plWidth,  // address of variable for Commands Window width
   long * plHeight  // address of variable for Commands Window height
);
</PRE>
<P>Retrieves the current size of the Commands Window.<UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>plWidth</i>
<P><blockquote>Address of a variable that receives the width of the Commands Window in pixels, relative to the screen origin (upper left).</blockquote>
<P><i>plHeight</i>
<P><blockquote>Address of a variable that receives the height of the Commands Window in pixels, relative to the screen origin (upper left).</blockquote>
<P>See also <b><A HREF="#IAGENTCOMMANDWINDOW::GETPOSITION">IAgentCommandWindow::GetPosition</A></b>
<P><HR>
<P><b><A NAME="IAGENTCOMMANDWINDOW::GETVISIBLE"></A></b><b>IAgentCommandWindow::GetVisible</b>
<P><PRE>HRESULT GetVisible(
   long * pbVisible  // address of variable for Visible setting for 
);                   // Commands Window
</PRE>
<P>Determines whether the Commands Window is visible or hidden.<UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>pbVisible</i>
<P><blockquote>Address of a variable that receives TRUE if the Commands Window is visible, or FALSE if hidden.</blockquote>
<P>See also <b><A HREF="#IAGENTCOMMANDWINDOW::SETVISIBLE">IAgentCommandWindow::SetVisible</A></b>
<P><HR>
<P><b><A NAME="IAGENTCOMMANDWINDOW::SETVISIBLE"></A></b><b>IAgentCommandWindow::SetVisible</b>
<P><PRE>HRESULT SetVisible(
   long bVisible  // Commands Window Visible setting 
);
</PRE>
<P>Set the <b>Visible</b> property for the Commands Window.<UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>bVisible</i>
<P><blockquote><b>Visible</b> property setting. A value of TRUE displays the Commands Window; FALSE hides it. </blockquote>
<P>The user can override this property.
<P>See also <b><A HREF="#IAGENTCOMMANDWINDOW::GETVISIBLE">IAgentCommandWindow::GetVisible</A></b>
<P>
<hr>
<P><H4><A NAME="IAGENTSPEECHINPUTPROPERTIES"></A>IAgentSpeechInputProperties</H4>
<P><b>IAgentSpeechInputProperties</b> provides access to the speech recognition properties maintained by the server. Most of the properties are read-only for client applications, but the user can change them in the Microsoft Agent Property Sheet. The Microsoft Agent server only returns values if a compatible speech engine has been installed and is enabled. Querying these properties attempts to start the speech engine.
<P><H4>Methods in Vtable Order</H4>
<P>
<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>IAgentSpeechInputProperties Methods</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetInstalled</b></TD>
<TD>Returns whether a compatible speech recognition engine has been installed.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetEnabled</b></TD>
<TD>Returns whether the speech recognition engine is enabled.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetHotKey</b></TD>
<TD>Returns the current key assignment of the listening hot key.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetLCID</b></TD>
<TD>Returns the locale (language) ID of the selected speech recognition engine.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetEngine</b></TD>
<TD>Returns the ID of the selected speech recognition engine.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>SetEngine</b></TD>
<TD>Sets the ID for the selected speech recognition engine.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetListeningTip</b></TD>
<TD>Returns whether the Listening Tip is enabled.
</TD>
</TR>
</TABLE>
<P><b><A NAME="IAGENTSPEECHINPUTPROPERTIES::GETENABLED"></A></b><b>IAgentSpeechInputProperties::GetEnabled</b>
<P><PRE>HRESULT GetEnabled(
   long * pbEnabled  // address of variable for speech recognition engine 
);                   // Enabled setting
</PRE>
<P>Retrieves a value indicating whether the installed speech recognition engine is enabled. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>pbEnabled</i>
<P><blockquote>Address of a variable that receives TRUE if the speech engine is currently enabled and FALSE if disabled.</blockquote>
<P>If <b>GetInstalled</b> returns FALSE, querying this setting returns an error.
<P>See also <b><A HREF="#IAGENTSPEECHINPUT::GETINSTALLED">IAgentSpeechInput::GetInstalled</A></b>
<P><HR>
<P><b><A NAME="IAGENTSPEECHINPUTPROPERTIES::GETENGINE"></A></b><b>IAgentSpeechInputProperties::GetEngine</b>
<P><PRE>HRESULT GetEngine(
BSTR * pbszEngine  // address of variable for speech engine mode ID 
);                        
</PRE>
<P>Retrieves the mode ID for the current selected speech recognition engine. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>pbszEngine</i>
<P><blockquote>Address of a BSTR that receives a string representation of the CLSID for the selected speech recognition engine.</blockquote>
<P>If <b>GetInstalled</b> and <b>GetEnabled</b> return FALSE, querying this setting returns an error.
<P>See also <b><A HREF="#IAGENTSPEECHINPUT::SETENGINE">IAgentSpeechInput::SetEngine</A></b>
<P><HR>
<P><b><A NAME="IAGENTSPEECHINPUTPROPERTIES::GETHOTKEY"></A></b><b>IAgentSpeechInputProperties::GetHotKey</b>
<P><PRE>HRESULT GetHotKey(
BSTR * pbszHotCharKey  // address of variable for listening hotkey 
);                        
</PRE>
<P>Retrieves the current keyboard assignment for the speech input listening hot key. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>pbszHotCharKey</i>
<P><blockquote>Address of a BSTR that receives the current hot key setting used to open the audio channel for speech input.</blockquote>
<P>If <b>GetInstalled</b> and <b>GetEnabled</b> return FALSE, querying this setting raises an error.
<P>See also <b><A HREF="#IAGENTSPEECHINPUT::GETENABLED">IAgentSpeechInput::GetEnabled</A></b>, <b><A HREF="#IAGENTSPEECHINPUT::GETINSTALLED">IAgentSpeechInput::GetInstalled</A></b>
<P><HR>
<P><b><A NAME="IAGENTSPEECHINPUTPROPERTIES::GETINSTALLED"></A></b><b>IAgentSpeechInputProperties::GetInstalled</b>
<P><PRE>HRESULT GetInstalled(
long * pbInstalled  // address of variable for speech recognition engine
);                  // installation flag
</PRE>
<P>Retrieves a value indicating whether a speech recognition engine has been installed. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>pbInstalled</i>
<P><blockquote>Address of a variable that receives TRUE if a compatible speech recognition engine has been installed and FALSE if no engine is installed.</blockquote>
<P>If <b>GetInstalled</b> and <b>GetEnabled</b> return FALSE, querying any other speech input properties returns an error.
<P>See also <b><A HREF="#IAGENTSPEECHINPUT::GETENABLED">IAgentSpeechInput::GetEnabled</A></b>
<P><HR>
<P><b><A NAME="IAGENTSPEECHINPUTPROPERTIES::GETLCID"></A></b><b>IAgentSpeechInputProperties::GetLCID</b>
<P><PRE>HRESULT GetLCID(
LCID * plcidCurrent  // address of variable for locale ID 
);                        
</PRE>
<P>Retrieves the current setting for the locale ID. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>plcidCurrent</i>
<P><blockquote>Address of LCID that receives the current locale setting. The locale setting determines the language of the speech recognition engine.</blockquote>
<P>If <b>GetInstalled</b> and <b>GetEnabled</b> return FALSE, querying this setting returns an error.
<P>See also <b><A HREF="#IAGENTSPEECHINPUT::GETENABLED">IAgentSpeechInput::GetEnabled</A></b>, <b><A HREF="#IAGENTSPEECHINPUT::GETINSTALLED">IAgentSpeechInput::GetInstalled</A></b>
<P><HR>
<P><b><A NAME="IAGENTSPEECHINPUTPROPERTIES::GETLISTENINGTIP"></A></b><b>IAgentSpeechInputProperties::GetListeningTip</b>
<P><PRE>HRESULT GetListeningTip(
long * pbListeningTip  // address of variable for listening tip flag
);                       
</PRE>
<P>Retrieves a value indicating whether the Listening Tip is enabled for display. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>pbInstalled</i>
<P><blockquote>Address of a variable that receives TRUE if the Listening Tip is enabled for display, or FALSE if the Listening Tip is disabled.</blockquote>
<P>If <b>GetInstalled</b> and <b>GetEnabled</b> return FALSE, querying any other speech input properties returns an error.
<P>See also <b><A HREF="#IAGENTSPEECHINPUT::GETENABLED">IAgentSpeechInput::GetEnabled</A></b>, <b><A HREF="#IAGENTSPEECHINPUT::GETINSTALLED">IAgentSpeechInput::GetInstalled</A></b>
<P><HR>
<P><b><A NAME="IAGENTSPEECHINPUTPROPERTIES::SETENGINE"></A></b><b>IAgentSpeechInputProperties::SetEngine</b>
<P><PRE>HRESULT SetEngine(
BSTR bszEngine  // speech engine mode ID 
);                        
</PRE>
<P>Sets the selected speech recognition engine. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>bszEngine</i>
<P><blockquote>A BSTR that contains a string representation of the CLSID for the desired speech recognition mode (engine).</blockquote>
<P>If <b>GetInstalled</b> and <b>GetEnabled</b> return FALSE, setting this property returns an error.

<P>See also <b><A HREF="#IAGENTSPEECHINPUT::GETENGINE">IAgentSpeechInput::GetEngine</A></b>
<P>
<hr>
<P><H4><A NAME="IAGENTAUDIOOUTPUTPROPERTIES"></A>IAgentAudioOutputProperties</H4>
<P><b>IAgentAudioOutputProperties</b> provides access to audio output properties maintained by the Microsoft Agent server. The properties are read-only, but the user can change them in the Microsoft Agent Property Sheet.
<P><H4>Methods in Vtable Order</H4>
<P>
<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>IAgentAudioOutputProperties Methods</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetEnabled</b></TD>
<TD>Returns whether audio output is enabled.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetUsingSoundEffects</b></TD>
<TD>Returns whether sound-effect output is enabled.
</TD>
</TR>
</TABLE>
<P><b><A NAME="IAGENTAUDIOOUTPUTPROPERTIES::GETENABLED"></A></b><b>IAgentAudioOutputProperties::GetEnabled</b>
<P><PRE>HRESULT GetEnabled(
long * pbEnabled  // address of variable for audio output Enabled setting 
);                      
</PRE>
<P>Retrieves a value indicating whether character speech output is enabled. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>pbEnabled</i>
<P><blockquote>Address of a variable that receives TRUE if the speech output is currently enabled and FALSE if disabled.</blockquote>
<P>Because this setting affects spoken output (TTS and sound file) for all characters, only the user can change this property in the Microsoft Agent property sheet.
<P><HR>
<P><b><A NAME="IAGENTAUDIOOUTPUTPROPERTIES::GETUSINGSOUNDEFFECTS"></A></b><b>IAgentAudioOutputProperties::GetUsingSoundEffects</b>
<P><PRE>HRESULT GetUsingSoundEffects(
long * pbUsingSoundEffects  // address of variable sound effects output 
);                          // setting 
</PRE>
<P>Retrieves a value indicating whether sound effects output is enabled. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>pbUsingSoundEffects</i>
<P><blockquote>Address of a variable that receives TRUE if the sound effects output is currently enabled and FALSE if disabled.</blockquote>
<P>Sound effects for a character's animation are assigned in the Microsoft Agent Character Editor. Because this setting affects sound effects output for all characters, only the user can change this property in the Microsoft Agent property sheet.
<P><hr>
<P><H4><A NAME="IAGENTPROPERTYSHEET"></A>IAgentPropertySheet</H4>
<P><b>IAgentPropertySheet</b> defines an interface that allows applications to set and query properties for the Microsoft Agent property sheet (window).
<P><H4>Methods in Vtable Order</H4>
<P>
<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>IAgentPropertySheet Methods</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetVisible</b></TD>
<TD>Returns whether the Microsoft Agent property sheet is visible.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>SetVisible</b></TD>
<TD>Sets the <b>Visible</b> property of the Microsoft Agent property sheet.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetPosition</b></TD>
<TD>Returns the position of the Microsoft Agent property sheet.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetSize</b></TD>
<TD>Returns the size of the Microsoft Agent property sheet.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetPage</b></TD>
<TD>Returns the current page for the Microsoft Agent property sheet.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>SetPage</b></TD>
<TD>Sets the current page for the Microsoft Agent property sheet.
</TD>
</TR>
</TABLE>
<P><b><A NAME="IAGENTPROPERTYSHEET::GETPAGE"></A></b><b>IAgentPropertySheet::GetPage</b>
<P><PRE>HRESULT GetPage(
BSTR * pbszPage  // address of variable for current property page
);
</PRE>
<P>Retrieves the current page of the Microsoft Agent property sheet.<UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>pbszPage</i>
<P><blockquote>Address of a variable that receives the current page of the property sheet (last viewed page if the window is not open). The parameter can be one of the following:</blockquote>
<P><blockquote>
<P>
<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP>
<TD><b>"Speech"</b></TD>
<TD>The Speech Recognition page.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>"Output"</b></TD>
<TD>The Output page.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>"Copyright"</b></TD>
<TD>The Copyright page.
</TD>
</TR>
</TABLE></blockquote>
<P>See also <b><A HREF="#IAGENTPROPERTYSHEET::SETPAGE">IAgentPropertySheet::SetPage</A></b>
<P><HR>
<P><b><A NAME="IAGENTPROPERTYSHEET::GETPOSITION"></A></b><b>IAgentPropertySheet::GetPosition</b>
<P><PRE>HRESULT GetPosition(
   long * plLeft,  // address of variable for left-edge of property sheet
   long * plTop    // address of variable for top-edge of property sheet
);
</PRE>
<P>Retrieves the Microsoft Agent's property sheet window position.<UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>plLeft</i>
<P><blockquote>Address of a variable that receives the screen coordinate of the left edge of the property sheet in pixels, relative to the screen origin (upper left).</blockquote>
<P><i>plTop</i>
<P><blockquote>Address of a variable that receives the screen coordinate of the top edge of the property sheet in pixels, relative to the screen origin (upper left).</blockquote>
<P>See also <b><A HREF="#IAGENTPROPERTYSHEET::GETSIZE">IAgentPropertySheet::GetSize</A></b>
<P><HR>
<P><A NAME="IAGENTPROPERTYSHEET::GETSIZE"></A><b>IAgent</b><b>PropertySheet</b><b>::GetSize</b>
<P><PRE>HRESULT GetSize(
   long * plWidth,  // address of variable for property sheet width
   long * plHeight  // address of variable for property sheet height
);
</PRE>
<P>Retrieves the size of the Microsoft Agent property sheet window.<UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>plWidth</i>
<P><blockquote>Address of a variable that receives the width of the property sheet in pixels, relative to the screen origin (upper left).</blockquote>
<P><i>plHeight</i>
<P><blockquote>Address of a variable that receives the height of the property sheet in pixels, relative to the screen origin (upper left).</blockquote>
<P>See also <b><A HREF="#IAGENTPROPERTYSHEET::GETPOSITION">IAgentPropertySheet::GetPosition</A></b>
<P><HR>
<P><b><A NAME="IAGENTPROPERTYSHEET::GETVISIBLE"></A></b><b>IAgentPropertySheet::GetVisible</b>
<P><PRE>HRESULT GetVisible(
   long * pbVisible  // address of variable for property sheet
);                   // Visible setting
</PRE>
<P>Determines whether the Microsoft Agent property sheet is visible or hidden.<UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>pbVisible</i>
<P><blockquote>Address of a variable that receives TRUE if the property sheet is visible and FALSE if hidden.</blockquote>
<P>See also <b><A HREF="#IAGENTPROPERTYSHEET::SETVISIBLE">IAgentPropertySheet::SetVisible</A></b>
<P><HR>
<P><b><A NAME="IAGENTPROPERTYSHEET::SETPAGE"></A></b><b>IAgentPropertySheet::SetPage</b>
<P><PRE>HRESULT SetPage(
   BSTR bszPage  // current property page
);
</PRE>
<P>Sets the current page of the Microsoft Agent property sheet.<UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>bszPage</i>
<P><blockquote>A BSTR that sets the current page of the property. The parameter can be one of the following.</blockquote>
<P><blockquote>
<P>
<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP>
<TD><b>&quot;Speech&quot;</b></TD>
<TD>The Speech Recognition page.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>&quot;Output&quot;</b></TD>
<TD>The Output page.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>&quot;Copyright&quot;</b></TD>
<TD>The Copyright page.
</TD>
</TR>
</TABLE></blockquote>
<P>See also <b><A HREF="#IAGENTPROPERTYSHEET::GETPAGE">IAgentPropertySheet::GetPage</A></b>
<P><HR>
<P><b><A NAME="IAGENTPROPERTYSHEET::SETVISIBLE"></A></b><b>IAgentPropertySheet::SetVisible</b>
<P><PRE>HRESULT SetVisible(
   long bVisible  // property sheet Visible setting 
);
</PRE>
<P>Sets the <b>Visible</b> property for the Microsoft Agent property sheet.<UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>bVisible</i>
<P><blockquote>Visible property setting. A value of TRUE displays the property sheet; a value of FALSE hides it. </blockquote>
<P>See also <b><A HREF="#IAGENTPROPERTYSHEET::GETVISIBLE">IAgentPropertySheet::GetVisible</A></b>
<P><hr>
<P><H4><A NAME="IAGENTBALLOON"></A>IAgentBalloon</H4>
<P><b>IAgentBalloon</b> defines an interface that allows applications to query properties for the Microsoft Agent word balloon.
<P>Initial defaults for a character's word balloon are set in the Microsoft Agent Character Editor, but once the application is running, the user may override the <b>Enabled</b> and <b>font</b> properties. If a user changes the balloon's properties, the change affects all characters.
<P><H4>Methods in Vtable Order</H4>
<P>
<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">

<TD><b>IAgentBalloon Methods</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetEnabled</b></TD>
<TD>Returns whether the word balloon is enabled.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetNumLines</b></TD>
<TD>Returns the number of lines displayed in the word balloon.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetNumCharsPerLine </b></TD>
<TD>Returns the average number of characters per line displayed in the word balloon.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetFontName</b></TD>
<TD>Returns the name of the font displayed in the word balloon.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetFontSize </b></TD>
<TD>Returns the size of the font displayed in the word balloon.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetFontBold</b></TD>
<TD>Returns whether the font displayed in the word balloon is bold.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetFontItalic</b></TD>
<TD>Returns whether the font displayed in the word balloon is italic.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetFontStrkethru</b></TD>
<TD>Returns whether the font displayed in the word balloon is displayed as strikethrough.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetFontUnderline</b></TD>
<TD>Returns whether the font displayed in the word balloon is underlined.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetForeColor  </b></TD>
<TD>Returns the foreground color displayed in the word balloon.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetBackColor  </b></TD>
<TD>Returns the background color displayed in the word balloon.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetBorderColor  </b></TD>
<TD>Returns the border color displayed in the word balloon.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>SetVisible</b></TD>
<TD>Sets the word balloon to be visible.</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetVisible </b></TD>
<TD>Returns the visibility setting for the word balloon.</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>SetFontName  </b></TD>
<TD>Sets the font used in the word balloon.</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>SetFontSize </b></TD>
<TD>Sets the font size used in the word balloon.</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>SetFontCharSet </b></TD>
<TD>Sets the character set used in the word balloon.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetFontCharSet  </b></TD>
<TD>Returns the character set used in the word balloon.
</TD>
</TR>

</TABLE>
<P><b><A NAME="IAGENTBALLOON::GETBACKCOLOR"></A></b><b>IAgentBalloon::GetBackColor</b>
<P><PRE>HRESULT GetBackColor(
   long * plBGColor  // address of variable for background color displayed
);                   // in word balloon
</PRE>
<P>Retrieves the value for the background color displayed in a word balloon. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>plBGColor</i>
<P><blockquote>The address of a variable that receives the color setting for the balloon background. </blockquote>
<P>The background color used in a character word balloon is defined in the Microsoft Agent Character Editor. It cannot be changed by an application. However, the user can change the background color of the word balloons for all characters through the Microsoft Agent property sheet.
<P>See also <b><A HREF="#IAGENTBALLOON::GETFORECOLOR">IAgentBalloon::GetForeColor</A></b>
<P><HR>
<P><b><A NAME="IAGENTBALLOON::GETBORDERCOLOR"></A></b><b>IAgentBalloon::GetBorderColor</b>
<P><PRE>HRESULT GetBorderColor (
  long * plBorderColor// address of variable for border color displayed
);                    // for word balloon
</PRE>
<P>Retrieves the value for the border color displayed for a word balloon. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>plBorderColor</i>
<P><blockquote>The address of a variable that receives the color setting for the balloon border. </blockquote>
<P>The border color for a character word balloon is defined in the Microsoft Agent Character Editor. It cannot be changed by an application. However, the user can change the border color of the word balloons for all characters through the Microsoft Agent property sheet.
<P>See also <b><A HREF="#IAGENTBALLOON::GETBACKCOLOR">IAgentBalloon::GetBackColor</A></b><b>, </b><b><A HREF="#IAGENTBALLOON::GETFORECOLOR">IAgentBalloon::GetForeColor</A></b>

<P><HR>
<P><b><A NAME="IAGENTBALLOON::GETENABLED"></A></b><b>IAgentBalloon::GetEnabled</b>
<P><PRE>HRESULT GetEnabled(
  long * pbEnabled  // address of variable for Enabled setting 
);                  // for word balloon
</PRE>
<P>Retrieves the value of the <b>Enabled</b> property for a word balloon. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>pbEnabled</i>
<P><blockquote>The address of a variable that receives TRUE when the word balloon is enabled and FALSE when it is disabled. </blockquote>
<P>The Microsoft Agent server automatically displays the word balloon for spoken output, unless it is disabled. The word balloon can be disabled for a character in the Microsoft Agent Character Editor, or for all characters by the user, in the Microsoft Agent property sheet. If the user disables the word balloon, the client cannot restore it.
<P><HR>
<P><b><A NAME="IAGENTBALLOON::GETFONTBOLD"></A></b><b>IAgentBalloon::GetFontBold</b>
<P><PRE>HRESULT GetFontBold(
   long * pbFontBold  // address of variable for bold setting for
);                    // font displayed in word balloon 
</PRE>
<P>Indicates whether the font used in a word balloon is bold. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>pbFontBold</i>
<P><blockquote>The address of a value that receives TRUE if the font is bold and FALSE if not bold. </blockquote>
<P>The font style used in a character word balloon is defined in the Microsoft Agent Character Editor. It cannot be changed by an application. However, the user can override the font settings for all characters through the Microsoft Agent property sheet.
<P><HR>
<P><b><A NAME="IAGENTBALLOON::GETFONTCHARSET"></A>IAgentBalloon::GetFontCharSet</b>
<P><PRE>HRESULT GetFontCharSet(
   short * psFontCharSet  // character set displayed in word balloon
); 
</PRE>
<P>Indicates the character set of the font displayed in a word balloon. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>psFontCharSet</i>
<P><blockquote>The address of a value that receives the font's character set. The following are some common settings for value:
<P>
<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP>
<TD>0</TD>
<TD>Standard Windows&reg; characters (ANSI).</TD>
</TR>
<TR VALIGN=TOP>
<TD>1</TD>
<TD>Default character set.</TD>
</TR>
<TR VALIGN=TOP>
<TD>2</TD>
<TD>The symbol character set.</TD>
</TR>
<TR VALIGN=TOP>
<TD>128</TD>
<TD>Double-byte character set (DBCS) unique to the Japanese version of Windows.</TD>
</TR>
<TR VALIGN=TOP>
<TD>129</TD>
<TD>Double-byte character set (DBCS) unique to the Korean version of Windows.</TD>
</TR>
<TR VALIGN=TOP>
<TD>134</TD>
<TD>Double-byte character set (DBCS) unique to the Simplified Chinese version of Windows.</TD>
</TR>
<TR VALIGN=TOP>
<TD>136</TD>
<TD>Double-byte character set (DBCS) unique to the Traditional Chinese version of Windows.</TD>
</TR>
<TR VALIGN=TOP>
<TD>255</TD>
<TD>Extended characters normally displayed by DOS applications.</TD>
</TR>
</table>
<P>For other character set values, consult the Microsoft Win32&reg; documentation.
</blockquote>
<P>The default character set used in a character's word balloon is defined in the Microsoft Agent Character Editor. You can change it using <b>IAgentBalloon::SetFontCharSet</b>. However, the user can override the character set setting for all characters using the Microsoft Agent property sheet.
<P>See also <b><A HREF="#IAGENTBALLOON::SETFONTCHARSET">IAgentBalloon::SetFontCharSet</A></b>
<P><HR>
<P><b><A NAME="IAGENTBALLOON::GETFONTITALIC"></A></b><b>IAgentBalloon::GetFontItalic</b>
<P><PRE>HRESULT GetFontItalic(
   long * pbFontItalic  // address of variable for italic setting for 
);                      // font displayed in word balloon 
</PRE>
<P>Indicates whether the font used in a word balloon is italic. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>pbFontItalic</i>
<P><blockquote>The address of a value that receives TRUE if the font is italic and FALSE if not italic. </blockquote>
<P>The font style used in a character's word balloon is defined in the Microsoft Agent Character Editor. It cannot be changed by an application. However, the user can override the font settings for all characters through the Microsoft Agent property sheet.
<P><HR>
<P><b><A NAME="IAGENTBALLOON::GETFONTNAME"></A></b><b>IAgentBalloon::GetFontName</b>
<P><PRE>HRESULT GetFontName(
   BSTR * pbszFontName  // address of variable for font displayed 
);                      // in word balloon
                   
</PRE>
<P>Retrieves the value for the font displayed in a word balloon. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>pbszFontName</i>
<P><blockquote>The address of a BSTR that receives the font name displayed in a word balloon. </blockquote>
<P>The default font used in a character word balloon is defined in the Microsoft Agent Character Editor. You can change it with <b>IAgentBalloon::SetFontName</b>. The user can override the font setting for all characters using the Microsoft Agent property sheet.
<P><HR>
<P><b><A NAME="IAGENTBALLOON::GETFONTSIZE"></A></b><b>IAgentBalloon::GetFontSize</b>
<P><PRE>HRESULT GetFontSize(
   long * plFontSize  // address of variable for font size 
);                    // for font displayed in word balloon 
</PRE>
<P>Retrieves the value for the size of the font displayed in a word balloon.<UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>plFontSize</i>
<P><blockquote>The address of a value that receives the size of the font. </blockquote>
<P>The default font size used in a character word balloon is defined in the Microsoft Agent Character Editor. You can change it with <b>IAgentBalloon::SetFontSize</b>. However, the user can override also the font-size settings for all characters using the Microsoft Agent property sheet.
<P><HR>
<P><b><A NAME="IAGENTBALLOON::GETFONTSTRIKETHRU"></A></b><b>IAgentBalloon::GetFontStrikethru</b>
<P><PRE>HRESULT GetFontStrikethru(
   long * pbFontStrikethru  // address of variable for strikethrough setting 
);                          // for font displayed in word balloon 
</PRE>
<P>Indicates whether the font used in a word balloon has the strikethrough style set. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>pbFontStrikethru</i>
<P><blockquote>The address of a value that receives TRUE if the font strikethrough style is set and FALSE if not. </blockquote>
<P>The font style used in a character word balloon is defined in the Microsoft Agent Character Editor. It cannot be changed by an application. However, the user can override the font settings for all characters using the Microsoft Agent property sheet.
<P><HR>
<P><b><A NAME="IAGENTBALLOON::GETFONTUNDERLINE"></A></b><b>IAgentBalloon::GetFontUnderline</b>
<P><PRE>HRESULT GetFontUnderline(
   long * pbFontUnderline  // address of variable for underline setting
);                         // for font displayed in word balloon 
</PRE>
<P>Indicates whether the font used in a word balloon has the underline style set. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>pbFontUnderline</i>
<P><blockquote>The address of a value that receives TRUE if the font underline style is set and FALSE if not. </blockquote>
<P>The font style used in a character word balloon is defined in the Microsoft Agent Character Editor. It cannot be changed by an application. However, the user can change the font settings for all characters using the Microsoft Agent property sheet.
<P><HR>
<P><b><A NAME="IAGENTBALLOON::GETFORECOLOR"></A></b><b>IAgentBalloon::GetForeColor</b>
<P><PRE>HRESULT GetForeColor(
   long * plFGColor // address of variable for foreground color displayed
);                  // in word balloon
</PRE>
<P>Retrieves the value for the foreground color displayed in a word balloon. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>plFGColor</i>
<P><blockquote>The address of a variable that receives the color setting for the balloon foreground. </blockquote>
<P>The foreground color used in a character word balloon is defined in the Microsoft Agent Character Editor. It cannot be changed by an application. However, the user can change the foreground color of the word balloons for all characters through the Microsoft Agent property sheet.
<P>See also <b><A HREF="#IAGENTBALLOON::GETBACKCOLOR">IAgentBalloon::GetBackColor</A></b>
<P><HR>
<P><b><A NAME="IAGENTBALLOON::GETNUMCHARSPERLINE"></A>IAgentBalloon::GetNumCharsPerLine</b>
<P><PRE>HRESULT GetNumCharsPerLine(
   long * plCharsPerLine  // address of variable for characters per line
);                        // displayed in word balloon
</PRE>
<P>Retrieves the value for the average number of characters per line displayed in a word balloon. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>pbCharsPerLine</i>
<P><blockquote>The address of a variable that receives the number of characters per line. </blockquote>
<P>The Microsoft Agent server automatically scrolls the lines displayed for spoken output in the word balloon. The average number of characters per line for a character's word balloon is defined in the Microsoft Agent Character Editor. It cannot be changed by an application.
<P>See also <b><A HREF="#IAGENTBALLOON::GETNUMLINES">IAgentBalloon::GetNumLines</A></b>
<P><HR>
<P><b><A NAME="IAGENTBALLOON::GETNUMLINES"></A></b><b>IAgentBalloon::GetNumLines</b>
<P><PRE>HRESULT GetNumLines(
   long * pbcLines  // address of variable for number of lines 
);                  // displayed in word balloon
</PRE>
<P>Retrieves the value of the number of lines displayed in a word balloon. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>pbcLines</i>
<P><blockquote>The address of a variable that receives the number of lines displayed. </blockquote>
<P>The Microsoft Agent server automatically scrolls the lines displayed for spoken output in the word balloon. The number of lines for a character word balloon is defined in the Microsoft Agent Character Editor. It cannot be changed by an application.
<P>See also <b><A HREF="#IAGENTBALLOON::GETNUMCHARSPERLINE">IAgentBalloon::GetNumCharsPerLine</A></b>
<P><HR>
<P><b><A NAME="IAGENTBALLOON::GETVISIBLE"></A></b><b>IAgentBalloon::GetVisible</b>
<P><PRE>HRESULT GetVisible(
   long * pbVisible  // address of variable for word balloon
);                   // Visible setting
</PRE>
<P>Determines whether the word balloon is visible or hidden.<UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>pbVisible</i>
<P><blockquote>Address of a variable that receives TRUE if the word balloon is visible and FALSE if hidden.
 </blockquote>
<P>See also <b><A HREF="#IAGENTBALLOON::SETVISIBLE">IAgentBalloon::SetVisible</A></b>

<P><HR>
<P><b><A NAME="IAGENTBALLOON::SETFONTCHARSET"></A></b><b>IAgentBalloon::SetFontCharSet</b>
<P><PRE>HRESULT SetFontCharSet(
   short sFontCharSet  // character set displayed in word balloon
); 
</PRE>
<P>Sets the character set of the font displayed in the word balloon.<UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>sFontCharSet</i>
<P><blockquote>The character set of the font. The following are some common settings for value:
<P>
<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP>
<TD>0</TD>
<TD>Standard Windows characters (ANSI).</TD>
</TR>
<TR VALIGN=TOP>
<TD>1</TD>
<TD>Default character set.</TD>
</TR>
<TR VALIGN=TOP>
<TD>2</TD>
<TD>The symbol character set.</TD>
</TR>
<TR VALIGN=TOP>
<TD>128</TD>
<TD>Double-byte character set (DBCS) unique to the Japanese version of Windows.</TD>
</TR>
<TR VALIGN=TOP>
<TD>129</TD>
<TD>Double-byte character set (DBCS) unique to the Korean version of Windows.</TD>
</TR>
<TR VALIGN=TOP>
<TD>134</TD>
<TD>Double-byte character set (DBCS) unique to the Simplified Chinese version of Windows.</TD>
</TR>
<TR VALIGN=TOP>
<TD>136</TD>
<TD>Double-byte character set (DBCS) unique to the Traditional Chinese version of Windows.</TD>
</TR>
<TR VALIGN=TOP>
<TD>255</TD>
<TD>Extended characters normally displayed by DOS applications.</TD>
</TR>
 </table>
<P>For other character set values, consult the Microsoft Win32 documentation.
 </blockquote>
<P>The default character set used in a character's word balloon is defined in the Microsoft Agent Character Editor. You can change it with <b>IAgentBalloon::SetFontCharSet</b>. However, the user can override the character set setting for all characters using the Microsoft Agent property sheet.
<P>See also <b><A HREF="#IAGENTBALLOON::GETFONTCHARSET">IAgentBalloon::GetFontCharSet</A></b>

<P><HR>
<P><b><A NAME="IAGENTBALLOON::SETFONTNAME"></A></b><b>IAgentBalloon::SetFontName</b>
<P><PRE>HRESULT SetFontName(
   BSTR bszFontName  // font displayed in word balloon
);                   
</PRE>
<P>Sets the font displayed in the word balloon.
<UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>bszFontName</i>
<P><blockquote>A BSTR that sets the font displayed in the word balloon.
 </blockquote>
<P>The default font used in a character's word balloon is defined in the Microsoft Agent Character Editor. You can change it with <b>IAgentBalloon::SetFontName</b>. However, the user can override the font setting for all characters using the Microsoft Agent property sheet.
<P>See also <b><A HREF="#IAGENTBALLOON::GETVISIBLE">IAgentBalloon::GetVisible</A></b>

<P><HR>
<P><b><A NAME="IAGENTBALLOON::SETFONTSIZE"></A></b><b>IAgentBalloon::SetFontSize</b>
<P><PRE>HRESULT SetFontSize(
   long lFontSize  // font size displayed in word balloon
); 
</PRE>
<P>Sets the size of the font displayed in the word balloon. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>lFontSize</i>
<P><blockquote>The size of the font. 
 </blockquote>
<P>The default font size used in a character's word balloon is defined in the Microsoft Agent Character Editor. You can change it with <b>IAgentBalloon::SetFontSize</b>. However, the user can override the font size setting for all characters using the Microsoft Agent property sheet.
<P>See also <b><A HREF="#IAGENTBALLOON::GETFONTSIZE">IAgentBalloon::GetFontSize</A></b>

<P><HR>
<P><b><A NAME="IAGENTBALLOON::SETVISIBLE"></A></b><b>IAgentBalloon::SetVisible</b>
<P><PRE>HRESULT SetVisible(
   long bVisible  // word balloon Visible setting 
);
</PRE>
<P>Sets the <b>Visible</b> property for the word balloon. <UL>

<LI> Returns S_OK to indicate the operation was successful.
</UL><i>bVisible</i>
<P><blockquote>Visible property setting. A value of TRUE displays the word balloon; a value of FALSE hides it.  </blockquote>
<P>See also <b><A HREF="#IAGENTBALLOON::GETVISIBLEEVENTS">IAgentBalloon::GetVisibleEvents</A></b>


<P>
<hr>
<P><H4><A NAME="EVENTS"></A>Events</H4>
<P>Microsoft Agent provides several events for tracking user interaction and server states. This section describes the event methods exposed by the <b>IAgentNotifySink</b> interface.
<P><H4>Methods in Vtable Order</H4>
<P>
<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>IAgentNotifySink</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Command</b></TD>
<TD>Occurs when the server processes a client-defined command.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>ActivateInputState</b></TD>
<TD>Occurs when a character becomes or ceases to be input-active.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Restart</b></TD>
<TD>Occurs when the server restarts.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Shutdown</b></TD>
<TD>Occurs when the user exits the server.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>VisibleState</b></TD>
<TD>Occurs when the character's <b>Visible</b> state changes.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Click</b></TD>
<TD>Occurs when a character is clicked.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>DblClick</b></TD>
<TD>Occurs when a character is double-clicked.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>DragStart</b></TD>
<TD>Occurs when a user starts dragging a character.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>DragComplete</b></TD>
<TD>Occurs when a user stops dragging a character. </TD>
</TR>
<TR VALIGN=TOP>
<TD><b>RequestStart</b></TD>
<TD>Occurs when the server begins processing a <b>Request</b> object.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>RequestComplete</b></TD>
<TD>Occurs when the server completes processing a <b>Request</b> object.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Bookmark</b></TD>
<TD>Occurs when the server processes a bookmark.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Idle</b></TD>
<TD>Occurs when the server starts or ends idle processing.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Move</b></TD>
<TD>Occurs when a character has been moved.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Size</b></TD>
<TD>Occurs when a character has been resized.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>BalloonVisibleState</b></TD>
<TD>Occurs when the visibility state of a character's word balloon changes.
</TD>
</TR>
</TABLE>
<P><b><A NAME="IAGENTNOTIFYSINK::ACTIVATEINPUTSTATE"></A></b><b>IAgentNotifySink::ActivateInputState</b>
<P><PRE>HRESULT ActivateInputState(
   long dwCharID,   // character ID
   long bActivated  // input activation flag
);                          
</PRE>
<P>Notifies a client application that a character's input active state changed. <UL>

<LI> No return value.
</UL><i>dwCharID</i>
<P><blockquote>Identifier of the character whose input activation state changed. </blockquote>
<P><i>bActivated</i>
<P><blockquote>Input active flag. This Boolean value is TRUE if the character referred to by <i>dwCharID</i> became input active; and FALSE if the character lost its input active state.</blockquote>
<P>See also <b><A HREF="#IAGENTCHARACTER::SETINPUTACTIVE">IAgentCharacter::SetInputActive</A></b>, <b><A HREF="#IAGENTCHARACTER::GETINPUTACTIVE">IAgentCharacter::GetInputActive</A></b>
<P>
<HR>
<P><b>

<A NAME="IAGENTNOTIFYSINK::BALLOONVISIBLESTATE"></A></b><b>IAgentNotifySink::BalloonVisibleState</b>
<P><PRE>HRESULT BalloonVisibleState(
   long dwCharID,  // character ID
   long bVisible   // visibility flag
);                          
</PRE>
<P>Notifies a client application when the visibility state of the character's word balloon changes.<UL>

<LI> No return value.
</UL><i>dwCharID</i>
<P><blockquote>Identifier of the character whose word balloon's visibility state has changed.</blockquote>
<P><i>bVisible</i>
<P><blockquote>Visibility flag. This Boolean value is TRUE when character's word balloon becomes visible; and FALSE when it becomes hidden.</blockquote>
<P>This event is sent to all clients of the character.

<P>
<HR>
<P><b>
<A NAME="IAGENTNOTIFYSINK::BOOKMARK"></A></b><b>IAgentNotifySink::Bookmark</b>
<P><PRE>HRESULT Bookmark(
   long dwBookMarkID  // bookmark ID
);                          
</PRE>
<P>Notifies a client application when its bookmark completes.<UL>

<LI> No return value.
</UL><i>dwBookMarkID</i>
<P><blockquote>Identifier of the bookmark that resulted in triggering the event. </blockquote>
<P>When you include bookmark tags in a <b>Speak</b> method, you can track when they occur with this event.
<P>See also <b><A HREF="#IAGENTCHARACTER::SPEAK">IAgentCharacter::Speak</A></b>, <A HREF="tags.htm">Speech Output Tags</A>
<P><HR>
<P><b><A NAME="IAGENTNOTIFYSINK::CLICK"></A></b><b>IAgentNotifySink::Click</b>
<P><PRE>HRESULT Click(
   long dwCharID,  // character ID
   short fwKeys,   // mouse button and modifier key state
   long x,         // x coordinate of mouse pointer
   long y          // y coordinate of mouse pointer
);                          
</PRE>
<P>Notifies a client application when the user clicks a character.<UL>

<LI> No return value.
</UL><i>dwCharID</i>
<P><blockquote>Identifier of the clicked character. </blockquote>
<P><i>fwKeys</i>
<P><blockquote>A parameter that indicates the mouse button and modifier key state. The parameter can return any combination of the following:
<P>0x0001&nbsp;&nbsp;    Left Button
<P>0x0010&nbsp;&nbsp;    Middle Button
<P>0x0002&nbsp;&nbsp;    Right Button
<P>0x0004&nbsp;&nbsp;    Shift Key Down
<P>0x0008&nbsp;&nbsp;    Control Key Down
<P>0x0020&nbsp;&nbsp;    Alt Key Down</blockquote>
<P><i>x</i>
<P><blockquote>The x-coordinate of the mouse pointer in pixels, relative to the screen origin (upper left).</blockquote>
<P><i>y</i>
<P><blockquote>The y-coordinate of the mouse pointer in pixels, relative to the screen origin (upper left).</blockquote>
<P><HR>
<P><b><A NAME="IAGENTNOTIFYSINK::COMMAND"></A></b><b>IAgentNotifySink::Command</b>
<P><PRE>HRESULT Command(
   long dwCommandID,         // Command ID of the best match
   IUnknown * punkUserInput  // address of IAgentUserInput object 
);                          
</PRE>
<P>Notifies a client application that a Command was selected by the user. <UL>

<LI> No return value.
</UL><i>dwCommandID</i>
<P><blockquote>Identifier of the best match command alternative.</blockquote>
<P><i>punkUserInput</i>
<P><blockquote>Address of the IUnknown interface for the <b>IAgentUserInput</b> object.</blockquote>
<P>Use <b>QueryInterface</b> to retrieve the <b>IAgentUserInput</b> interface. 
<P>See also <b><A HREF="#IAGENTUSERINPUT">IAgentUserInput</A></b>
<P><HR>
<P><b><A NAME="IAGENTNOTIFYSINK::DBLCLICK"></A></b><b>IAgentNotifySink::DblClick</b>
<P><PRE>HRESULT DblClick(
   long dwCharID,  // character ID
   short fwKeys,   // mouse button and modifier key state
   long x,         // x coordinate of mouse pointer
   long y          // y coordinate of mouse pointer
);                          
</PRE>
<P>Notifies a client application when the user double-clicks a character.<UL>

<LI> No return value.
</UL><i>dwCharID</i>
<P><blockquote>Identifier of the double-clicked character. </blockquote>
<P><i>fwKeys</i>
<P><blockquote>A parameter that indicates the mouse button and modifier key state. The parameter can return any combination of the following:
<P>0x0001&nbsp;&nbsp;    Left Button
<P>0x0010&nbsp;&nbsp;    Middle Button
<P>0x0002&nbsp;&nbsp;    Right Button
<P>0x0004&nbsp;&nbsp;    Shift Key Down
<P>0x0008&nbsp;&nbsp;    Control Key Down
<P>0x0020&nbsp;&nbsp;    Alt Key Down</blockquote>
<P><i>x</i>
<P><blockquote>The x-coordinate of the mouse pointer in pixels, relative to the screen origin (upper left).</blockquote>
<P><i>y</i>
<P><blockquote>The y-coordinate of the mouse pointer in pixels, relative to the screen origin (upper left).</blockquote>
<P><HR>
<P><b><A NAME="IAGENTNOTIFYSINK::DRAGCOMPLETE"></A></b><b>IAgentNotifySink::DragComplete</b>
<P><PRE>HRESULT DragComplete(
   long dwCharID,  // character ID
   short fwKeys,   // mouse button and modifier key state
   long x,         // x coordinate of mouse pointer
   long y          // y coordinate of mouse pointer
);                          
</PRE>
<P>Notifies a client application when the user stops dragging a character.<UL>

<LI> No return value.
</UL><i>dwCharID</i>
<P><blockquote>Identifier of the dragged character. </blockquote>
<P><i>fwKeys</i>
<P><blockquote>A parameter that indicates the mouse button and modifier key state. The parameter can return any combination of the following:
<P>0x0001&nbsp;&nbsp;    Left Button
<P>0x0010&nbsp;&nbsp;    Middle Button
<P>0x0002&nbsp;&nbsp;    Right Button
<P>0x0004&nbsp;&nbsp;    Shift Key Down
<P>0x0008&nbsp;&nbsp;    Control Key Down
<P>0x0020&nbsp;&nbsp;    Alt Key Down</blockquote>
<P><i>x</i>
<P><blockquote>The x-coordinate of the mouse pointer in pixels, relative to the screen origin (upper left).</blockquote>
<P><i>y</i>
<P><blockquote>The y-coordinate of the mouse pointer in pixels, relative to the screen origin (upper left).</blockquote>
<P><HR>
<P><b><A NAME="IAGENTNOTIFYSINK::DRAGSTART"></A></b><b>IAgentNotifySink::DragStart</b>
<P><PRE>HRESULT DragStart(
   long dwCharID,  // character ID
   short fwKeys,   // mouse button and modifier key state
   long x,         // x coordinate of mouse pointer
   long y          // y coordinate of mouse pointer
);                          
</PRE>
<P>Notifies a client application when the user starts dragging a character.<UL>

<LI> No return value.
</UL><i>dwCharID</i>
<P><blockquote>Identifier of the dragged character. </blockquote>
<P><i>fwKeys</i>
<P><blockquote>A parameter that indicates the mouse button and modifier key state. The parameter can return any combination of the following:
<P>0x0001&nbsp;&nbsp;    Left Button
<P>0x0010&nbsp;&nbsp;    Middle Button
<P>0x0002    Right Button
<P>0x0004&nbsp;&nbsp;    Shift Key Down
<P>0x0008&nbsp;&nbsp;    Control Key Down
<P>0x0020&nbsp;&nbsp;    Alt Key Down</blockquote>
<P><i>x</i>
<P><blockquote>The x-coordinate of the mouse pointer in pixels, relative to the screen origin (upper left).</blockquote>
<P><i>y</i>
<P><blockquote>The y-coordinate of the mouse pointer in pixels, relative to the screen origin (upper left).</blockquote>
<P><HR>
<P><b><A NAME="IAGENTNOTIFYSINK::IDLE"></A></b><b>IAgentNotifySink::Idle</b>
<P><PRE>HRESULT Idle(
   long dwCharID,  // character ID
   long bStart     // start flag
);                          
</PRE>
<P>Notifies a client application when a character's <b>Idling</b> state has changed.<UL>

<LI> No return value.
</UL><i>dwCharID</i>
<P><blockquote>Identifier of the request that started. </blockquote>
<P><i>bStart</i>
<P><blockquote>Start flag. This Boolean value is TRUE when the character begins idling and FALSE when it stops idling.</blockquote>
<P>This event enables you to track when the Microsoft Agent server starts or stops idle processing for a character.
<P>See also <b><A HREF="#IAGENTCHARACTER::GETIDLEON">IAgentCharacter::GetIdleOn</A></b>, <b><A HREF="#IAGENTCHARACTER::SETIDLEON">IAgentCharacter::SetIdleOn</A></b>
<P>
<HR>
<P><A NAME="IAGENTNOTIFYSINK::MOVE"></A><b>IAgentNotifySink::Move</b>
<P><PRE>HRESULT Move(
   long dwCharID,  // character ID
   long x,         // x-coordinate of new location
   long y          // y-coordinate of new location
   long dwCause    // cause of move state
);                          
</PRE>
<P>Notifies a client application when the character has been moved.<UL>

<LI> No return value.</UL>
<i>dwCharID</i>
<P><blockquote>Identifier of the character that has been moved.</blockquote>
<P>
<i>x</i>
<P><blockquote>The x-coordinate of the new position in pixels, relative to the screen origin (upper left). The location of a character is based on the upper left corner of its animation frame.</blockquote>
<P>
<i>y</i>
<P><blockquote>The y-coordinate of the new position in pixels, relative to the screen origin (upper left). The location of a character is based on the upper left corner of its animation frame.</blockquote>
<P>
<i>dwCause</i>
<P><blockquote>The cause of the character move. The parameter may be one of the following:
<P>
<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP>
<TD><b>const unsigned short NeverMoved = 0;</b></TD>
<TD>Character has not been moved.</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>const unsigned short UserMoved = 1;</b></TD>
<TD>User dragged the character.</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>const unsigned short ProgramMoved = 2;</b></TD>
<TD>Your application moved the character.</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>const unsigned short OtherProgramMoved = 3;</b></TD>
<TD>Another application moved the character.</TD>
</TR>
</table>
</blockquote>
<P>
<P>This event is sent to all clients of the character.
<P>See also <b><A HREF="#IAGENTCHARACTER::GETMOVECAUSE">IAgentCharacter::GetMoveCause</A></b> 
, <b><A HREF="#IAGENTCHARACTER::MOVETO">IAgentCharacter::MoveTo</A></b> 
<P>
<hr>
<P>
<b>
<A NAME="IAGENTNOTIFYSINK::REQUESTCOMPLETE"></A></b><b>IAgentNotifySink::RequestComplete</b>
<P><PRE>HRESULT RequestComplete(
   long dwRequestID,  // request ID
   long hrStatus      // status code
);                          
</PRE>
<P>Notifies a client application when a request completes.<UL>

<LI> No return value.
</UL><i>dwRequestID</i>
<P><blockquote>Identifier of the request that started. </blockquote>
<P><i>hrStatus</i>
<P><blockquote>Status code. This parameters returns the status code for the request. </blockquote>
<P>This event enables you to track when a queued method completes.
<P>See also <b><A HREF="#IAGENTNOTIFYSINK::REQUESTSTART">IAgentNotifySink::RequestStart</A></b>, <b><A HREF="#IAGENT::LOAD">IAgent::Load</A></b>, <A HREF="#IAGENTCHARACTER::GESTUREAT"><b>IAgentCharacter::GestureAt</b></a>, <b><A HREF="#IAGENTCHARACTER::HIDE">IAgentCharacter::Hide</A></b>, <b><A HREF="#IAGENTCHARACTER::INTERRUPT">IAgentCharacter::Interrupt</A></b>, <b><A HREF="#IAGENTCHARACTER::MOVETO">IAgentCharacter::MoveTo</A></b>, <b><A HREF="#IAGENTCHARACTER::PREPARE">IAgentCharacter::Prepare</A></b>, <b><A HREF="#IAGENTCHARACTER::PLAY">IAgentCharacter::Play</A></b>, <b><A HREF="#IAGENTCHARACTER::SHOW">IAgentCharacter::Show</A></b>, <b><A HREF="#IAGENTCHARACTER::SPEAK">IAgentCharacter::Speak</A></b>, <b><A HREF="#IAGENTCHARACTER::WAIT">IAgentCharacter::Wait</A></b>
<P><HR>
<P><b><A NAME="IAGENTNOTIFYSINK::REQUESTSTART"></A></b><b>IAgentNotifySink::RequestStart</b>
<P><PRE>HRESULT RequestStart(
   long dwRequestID  // request ID
);                          
</PRE>
<P>Notifies a client application when a request begins.<UL>

<LI> No return value.
</UL><i>dwRequestID</i>
<P><blockquote>Identifier of the request that started. </blockquote>
<P>This event enables you to track when a queued request begins.
<P>See also <b><A HREF="#IAGENTNOTIFYSINK::REQUESTCOMPLETE">IAgentNotifySink::RequestComplete</A></b>, <b><A HREF="#IAGENT::LOAD">IAgent::Load</A></b>, <A HREF="#IAGENTCHARACTER::GESTUREAT"><b>IAgentCharacter::GestureAt</b></a>, <b><A HREF="#IAGENTCHARACTER::HIDE">IAgentCharacter::Hide</A></b>, <b><A HREF="#IAGENTCHARACTER::INTERRUPT">IAgentCharacter::Interrupt</A></b>, <b><A HREF="#IAGENTCHARACTER::MOVETO">IAgentCharacter::MoveTo</A></b>, <b><A HREF="#IAGENTCHARACTER::PREPARE">IAgentCharacter::Prepare</A></b>, <b><A HREF="#IAGENTCHARACTER::PLAY">IAgentCharacter::Play</A></b>, <b><A HREF="#IAGENTCHARACTER::SHOW">IAgentCharacter::Show</A></b>, <b><A HREF="#IAGENTCHARACTER::SPEAK">IAgentCharacter::Speak</A></b>, <b><A HREF="#IAGENTCHARACTER::WAIT">IAgentCharacter::Wait</A></b>
<P><HR>
<P><b><A NAME="IAGENTNOTIFYSINK::RESTART"></A></b><b>IAgentNotifySink::Restart</b>
<P><PRE>HRESULT Restart();                          
</PRE>
<P>Notifies a client application that the Microsoft Agent server restarted. <UL>

<LI> No return value.
</UL>See also <b><A HREF="#IAGENTNOTIFYSINK::SHUTDOWN">IAgentNotifySink::Shutdown</A></b>
<P><HR>
<P><b><A NAME="IAGENTNOTIFYSINK::SHUTDOWN"></A></b><b>IAgentNotifySink::Shutdown</b>
<P><PRE>HRESULT Shutdown();                          
</PRE>
<P>Notifies a client application that the Microsoft Agent server shut down. <UL>

<LI> No return value.
</UL>This event fires only when the user explicitly chooses the Exit command on the pop-up menu of the Microsoft Agent taskbar icon. Requests sent after the server shuts down will fail.
<P>See also <b><A HREF="#IAGENTNOTIFYSINK::RESTART">IAgentNotifySink::Restart</A></b>
<P>
<HR>
<P>
<b><A NAME="IAGENTNOTIFYSINK::SIZE"></A></b><b>IAgentNotifySink::Size</b>
<P><PRE>HRESULT Size(
   long dwCharID,  // character ID
   long lWidth,    // new width
   long lHeight,   // new height
);                          
</PRE>
<P>Notifies a client application when the character has been resized.<UL>

<LI> No return value.</UL>
<i>dwCharID</i>
<P><blockquote>Identifier of the character that has been resized. </blockquote>
<P>
<i>lWidth</i>
<P><blockquote>The width of the character's animation frame in pixels.</blockquote>
<P>
<i>lHeight</i>
<P><blockquote>The height of the character's animation frame in pixels.</blockquote>
<P>
<P>This event is sent to all clients of the character.
<P>See also <b><A HREF="#IAGENTCHARACTER::GETSIZE">IAgentCharacter::GetSize</A></b>, <B><A HREF="#IAGENTCHARACTER::SETSIZE">IAgentCharacter::SetSize</A></b>  
<P>
<hr>
<P>

<b>
<A NAME="IAGENTNOTIFYSINK::VISIBLESTATE"></A></b><b>IAgentNotifySink::VisibleState</b>
<P><PRE>HRESULT VisibleState(
   long dwCharID,  // character ID
   long bVisible   // visibility flag
   long dwCause    // cause of visible state
);                          
</PRE>
<P>Notifies a client application when the visibility state of the character changes.<UL>

<LI> No return value.
</UL><i>dwCharID</i>
<P><blockquote>Identifier of the character whose visibility state is changed. </blockquote>
<P><i>bVisible</i>
<P><blockquote>Visibility flag.  This Boolean value is TRUE when character becomes visible and FALSE when the character becomes hidden.</blockquote>
<P><i>dwCause</i>
<P><blockquote>Cause of last change to the character's visibility state. The parameter may be one of the following:
<P>
<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP>
<TD><b>const unsigned short NeverShown = 0;</b></TD>
<TD>Character has not been shown.</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>const unsigned short UserHid = 1;</b></TD>
<TD>User hid the character.</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>const unsigned short UserShowed = 2;</b></TD>
<TD>User showed the character.</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>const unsigned short ProgramHid = 3;</b></TD>
<TD>Your application hid the character.</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>const unsigned short ProgramShowed = 4;</b></TD>
<TD>Your application showed the character.</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>const unsigned short OtherProgramHid = 5;</b></TD>
<TD>Another application hid the character.</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>const unsigned short OtherProgramShowed = 6;</b></TD>
<TD>Another application showed the character.</TD>
</TR>
</table>
</blockquote>
<P>

<P>See also <b><A HREF="#IAGENTCHARACTER::GETVISIBLE">IAgentCharacter::GetVisible</A></b>, <b><A HREF="#IAGENTCHARACTER::SETVISIBLE">IAgentCharacter::SetVisible</A></b>, <b><A HREF="#IAGENTCHARACTER::GETVISIBILITYCAUSE">IAgentCharacter::GetVisibilityCause</A></b>
<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>

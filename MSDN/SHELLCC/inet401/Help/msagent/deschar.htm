<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Designing Characters for Microsoft Agent</TITLE>

<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="PLATFORM" CONTENT="Windows">
<META NAME=MS-HKWD CONTENT="Designing Characters for Microsoft Agent">
<META NAME="Keywords" CONTENT="Microsoft Agent, MSAgent">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT">
<META NAME="ROBOTS" CONTENT="all">

<!--@ SNIFF_START -->
<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../code/ver.js"></SCRIPT>
<!--@ SNIFF_END -->

<SCRIPT DEFER SRC="../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Microsoft Agent"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../art/headbare.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Microsoft Agent"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR>
<TR><TD><PRE><IMG SRC="../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" ID=TOC HREF="../contents.htm">Contents</A>  <IMG SRC="../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="../index.htm">Index</A>  <IMG SRC="../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="agent.htm">Topic Contents</A></PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>Designing Characters for Microsoft Agent</H1>
<P><H4>ActiveX&#153; Technology for Interactive Software Agents</H4>
<P><IMG SRC="art/agent.GIF" WIDTH="123" HEIGHT="123" ALT="agent">

<P>August 1997
<br>Microsoft Corporation
 
<P><a name="top"></a><b>Contents</b>
<P> <A HREF="#TOPIC1">Abstract</A>
<p> <A HREF="#TOPIC2">Characters</A>
<p> <A HREF="#TOPIC3">Animations</A>
<p> <A HREF="#TOPIC4">Agent States</A>
<p> <A HREF="#APPENDIX">Appendix</A>
<P><blockquote><b>Note: </b>This document is provided for informational purposes only and Microsoft makes no warranties, either expressed or implied, in this document. The entire risk of the use or the results of this document remains with the user.</blockquote>
<P><blockquote>Information in this document is subject to change without notice. Companies, names, and data used in examples herein are fictitious unless otherwise noted. No part of this document may be reproduced or transmitted in any form or by any means, electronic or mechanical, for any purpose, without the express written permission of Microsoft Corporation.
<P>Microsoft may have patents or pending patent applications, trademarks, copyrights, or other intellectual property rights covering subject matter in this document. The furnishing of this document does not give you any license to these patents, trademarks, copyrights, or other intellectual property rights. Microsoft, MS, MS-DOS, Windows, Windows NT, and the Windows logo are either registered trademarks or trademarks of Microsoft Corporation in the U.S. and/or other countries. Other product and company names mentioned herein may be the trademarks of their respective owners.</blockquote>
<P><H3><A NAME="TOPIC1"></A> Abstract</H3>
<P>This document provides information that can help you design and develop a character for use with Microsoft Agent. It includes conceptual and technical information on character, image, and animation design; the size, use of color, and types of images you need to create; suggested animations; speaking animations; and agent states. The Appendix describes effective animation principles you can use to create visually convincing animated characters. 
<P>This is advanced-level information intended for experienced developers. More information on the Agent Character Editor and designing and developing characters is provided in <A HREF="ace.htm">Using the Microsoft Agent Character Editor</a>. 
<P><A HREF="#top"><IMG SRC="art/uparrow.gif"  BORDER="0" WIDTH=14 HEIGHT=10 ALT="uparrow.gif">Back to contents</A>

<P><H3><A NAME="TOPIC2"></A> Characters</H3>
<P>Human communication is fundamentally social. Microsoft Agent allows you to leverage this aspect of interaction using animated characters. How you design a character can have a dramatic effect on its success. 
<P>When designing a character, first consider the profile of your target audience and what appeals to them as well as what tasks they do. Similarly, consider how well your character's design matches its purpose in addition to the application it supports. A "dog" character might work well for a retrieval or security application, but not for a financial management application. 
<P>Also think about your character's basic personality type: dominant or submissive, emotional or reserved, sophisticated or down-to-earth; or perhaps you want to adapt its personality based on user interaction. For example, you can provide a control that enables a user to adjust whether the character volunteers more information or waits to be asked. The name you supply for your character can infer a particular type of personality. For example, "Max" and "Milton" may convey very different personalities. The Microsoft Agent Character Editor enables you to set your character's name and include a short description. These attributes can be queried at run time.
<P>In addition, decide whether you plan to use a synthetic voice (using a text-to-speech engine) or recorded voice (.WAV file). This decision may depend on the type of character you use, the languages you plan to support, and what you want the character to be able to say. For example, a synthesized voice enables your character to speak almost anything. Programming what your character will say is easy and quick: You just supply the text the character will speak. However, using a computer-generated speech engine requires some extra overhead for initial installation and will be language-specific. Further, most synthesized voices sound computer-generated. It may be difficult to simulate a voice that matches your character, particularly if you use a character that already has an established identity or one that has a very distinctive voice. In such a case, you may want to use recorded audio files for your output. Microsoft Agent also supports lip-syncing for recorded audio output. Although audio files provide a natural voice and are easier to implement in other languages, they must be copied or downloaded to local machines. Recorded audio files also limit your character to the vocabulary contained in them.
<P>You can also decide to use the word balloon for output and the default settings for the balloon's font and color. Note, however, that the user can change the font and color attributes. In addition, you cannot assume that the word balloon's state remains constant because the user can turn balloon off.
<P><A HREF="#top"><IMG SRC="art/uparrow.gif"  BORDER="0" WIDTH=14 HEIGHT=10 ALT="uparrow.gif">Back to contents</A>

<P><H3><A NAME="TOPIC3"></A> Animations</H3>
<P>A character's animations reflect its personality and behavior. The number and types of animations you create for a character depend on what your character does and how it responds to different situations. 
<P>Like traditional animations, digital animations involve creating a series of slightly differing images that, when displayed sequentially, provide the illusion of action. Creating high-quality animation images may require a skilled animator, but the style and presentation of the character you create also affect quality. Two-dimensional characters with simple shapes and features can sometimes be as effective as (or more effective than) highly rendered characters. It is not necessary to create a realistic image to portray an effective character. Many popular cartoon characters are not realistic in their presentation, yet they are effective because the animator understands how to convey action and emotion. The  <A HREF="#APPENDIX">Appendix</A> provides general information about fundamental animation design principles.
<P><H4>Frames</H4>
<P>Each animation you create for a Microsoft Agent character is composed of a timed sequence of frames. Each frame in the animation is composed of one or more bitmap images. Images can be as small as you need them or as large as the frame itself. 
<P>Animation details such as eye blinking or finger movement can be included as additional images for the frame. You can overlay several images to create a composite, and vary their position in the layers. This technique enables you to reuse images in multiple frames and vary the details that change. For example, if you want to have a character wave its hand, for each frame you could use a base image with everything but the hand and overlay the base image with a different hand image. Similarly, if you want to make the character blink, you can overlay a different set of eyes over a base image for each frame. Images can also be offset from the base image. However, only the part of the image that exists within the frame's size will be displayed.
<P>You can have as many frames in an animation as you wish; however, a typical animation averages about 14 frames so that it plays for no more than 6 seconds. This modest length of time ensures that your character appears responsive to user input. In addition, the greater the number of frames, the larger your animation file. For downloaded Web-based characters, keep the size of your animation file as small as possible while still providing a reasonably-sized set of frames, so that the character's animation does not appear jerky.
<P><H4>Image Design </H4>
<P>You can use any graphics or animation tool to create images for animation frames, provided that you store the final images in the Windows&#174; bitmap (.BMP) format. When the images are created, use the Microsoft Agent Character Editor to assemble, sequence, and time the images, supply other character information, and compile all the information into a final character file.
<P>Character images must be designed to a 256-color palette, preserving the 20 standard Windows system colors in their standard position in the palette (the first ten and last ten positions). That means your character's color palette can use the standard system colors and up to 236 other colors. When defining your palette, include any props your character uses in the animation. If your character's palette places colors in the system color positions, those character colors will be overwritten with the system colors when Microsoft Agent creates the palette. 
<P>The larger the number of colors you use in a character's color palette, the greater the possibility that part of your character's colors may get remapped for systems configured to an 8-bit (256) color setting. Consider also the palette usage of the application in which the character will be used. It's best to avoid having the character remap the colors of its host application and vice-versa. Similarly, if you plan to support multiple characters displayed at the same time, you'll probably want to maintain a consistent palette for those characters. You might consider using only the standard system colors in your character if you target users with an 8-bit color configuration. However, this still may not prevent remapping of your character's color if another application extensively redefines the color palette. On systems set to higher color resolutions, color palette remapping should not be a problem because the system manages the color palettes automatically.
<P>Using a larger number of colors in an image can also increase the overall size of your animation file. The number of colors and frequency of variation may determine how well your character file compresses. For example, a two-dimensional character that uses only a few colors will compress better than a three-dimensional, shaded character.
<P>You must use the same color palette for your entire character file. You cannot change the palette for different animations. If you attempt to support 8-bit color configurations, consider using the same palette for your application and any other characters you plan to support.
<P>The 11th position in the palette is defined by default as the transparency (or alpha) color, although you can also set the color using the Microsoft Agent Character Editor. The Microsoft Agent animation services render transparent any pixels in this color, so use the color in your images only where you want transparency. 
<P>Carefully consider the shape of your character, because it can affect animation performance. To display the character, the animation services create a region window based on the overall image. Small irregular areas often require more region data and may reduce the animation performance of your character. Therefore, when possible, avoid gaps or single-pixel elements and details.
<P>Avoid anti-aliasing the outside edge of your character. Although anti-aliasing is a good technique to reduce jagged edges, it is based on adjacent colors. Because your character may appear on top of a variety of colors, anti-aliasing the outside edge may make your character appear poorly against other backgrounds. However, you can use anti-aliasing on the inside details of your character without encountering this problem.
<P><H4>Frame Size </H4>
<P>Frame size should typically be no larger than 128 x 128 pixels. Although characters can be larger or smaller in either dimension, the Microsoft Agent Character Editor uses this as its display size, and scales character images if you define a larger frame size. The 128 x 128 frame size makes reasonable tradeoffs with the space the character will occupy on the screen. Your application can scale a character at run time.
<P><H4>Frame Duration</H4>
<P>You can use the Microsoft Agent Character Editor to set how long each frame of animation will display before moving to the next frame. Set the duration of each frame to at least 10 hundredths of a second (10 frames per second); anything less might not be perceptible on some systems. You can also set the duration longer, but avoid unnatural pauses in the action. 
<P>The Microsoft Agent Character Editor also supports branching from one frame in an animation to another, based on probability percentages that you supply. For any given frame, you can define up to three different branches. Branching enables you to create animations that vary when they are played and animations that loop. However, be careful when using branching as it may create problems when trying to play one animation after another. For example, if you play a looping or branching animation, it could continue indefinitely unless you use a <b>Stop</b> method. If you are uncertain, avoid branching.
<P>Frames that don't have images and are set to zero duration do not appear when included in an animation. You can use this feature to create frames that support branching without being visible. However, a frame that does not have images yet has a duration greater than zero will be displayed. Therefore, avoid including empty frames in your animation, because the user may not be able to distinguish an empty frame from when the character is hidden.
<P><H4>Frame Transition</H4>
<P>When designing an animation, consider how to smoothly transition from and to the animation. For example, if you create an animation in which the character gestures right, and another in which the character gestures left, you want the character to animate smoothly from one position to the other. Although you could build this into either animation, a better solution is to define a neutral or transitional position from which the character starts and returns. Animating to the neutral position can be incorporated as part of each animation or as a separate animation. In the Microsoft Agent Character Editor, you can specify a complementary <b>Return</b> animation for each animation for your character. The <b>Return</b> animation should typically be no more than 2-4 frames so the character can quickly transition to the neutral position. 
<P>For example, using the "gesturing right, then gesturing left" scenario, you can create a <b>GestureRight</b> animation, starting with a frame where the character appears in a neutral position, and add frames with images that extend the character's hand to the right. Then create its <b>Return</b> animation: a complementary animation with images that return the character to its neutral position. You can assign this as the <b>Return</b> animation for the <b>GestureRight</b> animation. Next, create the <b>GestureLeft</b> animation that starts from the neutral position and extends the character's arm to the left. Finally, create a complementary <b>Return</b> animation for this animation as well. A Return animation typically begins with an image that follows the last image of the preceding animation.
<P>Starting and returning to the same neutral position, either within an animation or by using a <b>Return</b> animation, enables you to play any animation in any order. The Microsoft Agent animation services automatically play your designated <b>Return</b> animation in many situations. For example, the services play the designated <b>Return</b> animation before playing your character's Idling state animations. It is a good idea to define and assign <b>Return</b> animations if your animations do not already end in the neutral position. 
<P>If you want to provide your own transitions between specific animations; for example, because you always play them in a well-defined order, you can avoid defining <b>Return </b>animations. However, it is still a good idea to begin and end the sequence of animations from the neutral position. 
<P><H4>Suggested Animations</H4>
<P>The following table lists the animations defined for the Microsoft Agent sample characters and can be used as a guide for designing your own characters. How you plan to use a character determines the names and number of animations you support for a character. 
<P>An asterisk after an animation indicates a speaking animation that includes mouth overlay images for the last frame of the animation.
<P>
<TABLE WIDTH="100%" BORDER=1 CELLPADDING=2 CELLSPACING=0>
<TR><TD><b><b>Animation</b></b></TD>
<TD><b>Example of Use</b></TD>
<TD><b>Example Animation</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Acknowledge</b> </TD>
<TD>When the character acknowledges the user's request.
</TD>
<TD>Character nods or flashes "OK" hand gesture.
<P>Note that this animation should return the character to its neutral position.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Alert</b>* </TD>
<TD>When the character is waiting for instructions, typically played after the user turns on listening mode.
</TD>
<TD>Character faces front, breathing, blinking occasionally, but clearly awaiting instruction.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>AlertReturn</b></TD>
<TD>When the character completes coming to the alert position.
</TD>
<TD>Character returns to its neutral position.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Announce</b>*</TD>
<TD>When the character has found information for the user.
</TD>
<TD>Character gestures by raising eyebrows and hand or opens an envelope.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>AnnounceReturn</b></TD>
<TD>When the character completes telling the user about the information it has found.
</TD>
<TD>Character returns to its neutral position.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Appearing</b></TD>
<TD>When the character starts up or returns after being summoned.
</TD>
<TD>Character pops up in a puff of smoke, beams in, or walks on-screen.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Confused</b>*</TD>
<TD>When the character doesn't understand what to do.
</TD>
<TD>Character scratches head.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>ConfusedReturn</b></TD>
<TD>When the character returns from the <b>Confused</b> animation.
</TD>
<TD>Character returns to neutral position.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Congratulate</b>*</TD>
<TD>When the character or user completes a task (a stronger form of the <b>Acknowledge</b> animation.)</TD>
<TD>Character performs congratulatory gesture, conveys "YES!"</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>CongratulateReturn</b></TD>
<TD>When the character completes a <b>Congratulate</b> animation.
</TD>
<TD>Character returns to neutral position.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Decline</b>*</TD>
<TD>When the character cannot do or declines the user's request.
</TD>
<TD>Character shakes head, conveys "no can do."</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>DeclineReturn</b></TD>
<TD>When the character completes the <b>Decline</b> animation.
</TD>
<TD>Character returns to neutral position.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>DontRecognize</b>*</TD>
<TD>When the character didn't recognize the user's request.
</TD>
<TD>Character holds hand to ear.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>DontRecognizeReturn</b></TD>
<TD>When the character completes the <b>DontRecognize</b> animation.
</TD>
<TD>Character returns to neutral position.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Explain</b>*</TD>
<TD>When the character explains something to the user.
</TD>
<TD>Character gestures as if explaining something.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>ExplainReturn</b></TD>
<TD>When the character completes the <b>Explain</b> animation.
</TD>
<TD>Character returns to neutral position.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GestureDown</b>*</TD>
<TD>When the character needs to point to something below it.
</TD>
<TD>Character points down.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GestureDownReturn</b></TD>
<TD>When the character completes gesturing down.
</TD>
<TD>Character returns to neutral position.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GestureLeft</b>*</TD>
<TD>When the character needs to point to something at its left.
</TD>
<TD>Character points with left hand.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GestureLeftReturn</b></TD>

<TD>When the character is finished gesturing left.
</TD>
<TD>Character returns to neutral position.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GestureRight</b>*</TD>
<TD>When the character needs to point to something at its right.
</TD>
<TD>Character points with right hand or morphs into an arrow pointing right.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GestureRightReturn</b></TD>
<TD>When the character is finished gesturing right.
</TD>
<TD>Character returns to neutral position.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GestureUp</b>*</TD>
<TD>When the character needs to point to something above it.
</TD>
<TD>Character points up.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GestureUpReturn</b></TD>
<TD>When the character is finished gesturing up.
</TD>
<TD>Character returns to neutral position.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetAttention</b></TD>
<TD>When the character needs to notify the user about something important.
</TD>
<TD>Character waves hands or jumps up and down.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GetAttentionReturn</b></TD>
<TD>When the character completes the <b>GetAttention</b> animation.
</TD>
<TD>Character returns to neutral position.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GlanceDown</b></TD>
<TD>When character wants to subtly direct attention below.
</TD>
<TD>Character looks briefly downward and returns to neutral position.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GlanceLeft</b></TD>
<TD>When character wants to subtly direct attention to the left.
</TD>
<TD>Character looks briefly to the left and returns to neutral position.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GlanceRight</b></TD>
<TD>When character wants to subtly direct attention to the right.
</TD>
<TD>Character looks briefly to the right and returns to neutral position.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GlanceUp</b></TD>
<TD>When character wants to subtly direct attention upward.
</TD>
<TD>Character looks briefly upward and returns to neutral position.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Greet</b>*</TD>
<TD>When the user starts up the system.
</TD>
<TD>Character smiles and waves.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GreetReturn</b></TD>
<TD>When the character completes the greeting.
</TD>
<TD>Character returns to neutral position.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Hear</b> </TD>
<TD>When the character hears the start of an spoken utterance (actively listening).
</TD>
<TD>Character leans forward and nods, or turns head showing response to speech input.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Hide</b> </TD>
<TD>When the user dismisses the character.
</TD>
<TD>Character removes self from screen.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Idle1</b> </TD>
<TD>When the character has no task and the user is not interacting with the character.
</TD>
<TD>Character blinks or looks around, remaining in or returning to the neutral position.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Idle2</b> </TD>
<TD>When the character has been idle for some time.
</TD>
<TD>Character yawns or reads magazine remaining in or returning to the neutral position.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Idle3</b></TD>
<TD>When the character has been idle for a long time. </TD>
<TD>Character sleeps or puts on headphones to listen to music.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Idle3Return</b></TD>
<TD>When the character transitions out of the Idling Level 3 state.
</TD>
<TD>Character returns to its neutral position. </TD>
</TR>
<TR VALIGN=TOP>
<TD><b>LookDown</b></TD>
<TD>When the character needs to look down.
</TD>
<TD>Character looks down. </TD>
</TR>
<TR VALIGN=TOP>
<TD><b>LookDownReturn</b></TD>
<TD>When the character completes looking down.
</TD>
<TD>Character returns to its neutral position. </TD>
</TR>
<TR VALIGN=TOP>
<TD><b>LookLeft</b></TD>
<TD>When the character needs to look left.
</TD>
<TD>Character looks to the left. </TD>
</TR>
<TR VALIGN=TOP>
<TD><b>LookLeftReturn</b></TD>
<TD>When the character completes looking left.
</TD>
<TD>Character returns to its neutral position. </TD>
</TR>
<TR VALIGN=TOP>
<TD><b>LookRight</b></TD>
<TD>When the character needs to look right.
</TD>
<TD>Character looks to the right. </TD>
</TR>
<TR VALIGN=TOP>
<TD><b>LookRightReturn</b></TD>
<TD>When the character completes looking right.
</TD>
<TD>Character returns to its neutral position. </TD>
</TR>
<TR VALIGN=TOP>
<TD><b>LookUp</b></TD>
<TD>When the character needs to look up.
</TD>
<TD>Character looks up. </TD>
</TR>
<TR VALIGN=TOP>
<TD><b>LookUpReturn</b></TD>
<TD>When the character completes looking up.
</TD>
<TD>Character returns to its neutral position. </TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Leaving</b>*</TD>
<TD>When the user dismisses the character.
</TD>
<TD>Character removes self from screen.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>MoveDown</b></TD>
<TD>When the character prepares to move down.
</TD>
<TD>Character transitions to a walking/flying down position.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>MoveDownReturn</b></TD>
<TD>When the character completes moving down.
</TD>
<TD>Character returns to its neutral position.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>MoveLeft</b></TD>
<TD>When the character prepares to move left.
</TD>
<TD>Character transitions to a walking/flying left position.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>MoveLeftReturn</b></TD>
<TD>When the character completes moving left.
</TD>
<TD>Character returns to its neutral position.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>MoveRight</b></TD>
<TD>When the character prepares to move right.
</TD>
<TD>Character transitions to a walking/flying right position.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>MoveRightReturn</b></TD>
<TD>When the character completes moving right.
</TD>
<TD>Character returns to its neutral position.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>MoveUp</b></TD>
<TD>When the character prepares to move up.
</TD>
<TD>Character transitions to a walking/flying up position.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>MoveUpReturn</b></TD>
<TD>When the character completes moving up.
</TD>
<TD>Character returns to its neutral position.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Pleased</b>*</TD>
<TD>When the character is pleased with the user's request or choice.
</TD>
<TD>Character smiles.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>PleasedReturn</b></TD>
<TD>When the character completes the <b>Pleased</b> animation.
</TD>
<TD>Character returns to neutral position.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Processing</b></TD>
<TD>When the character is busy processing a task.
</TD>
<TD>Character scribbles on pad of paper.
<P>Note: This animation loops to some intermediate frame that occurs after the character moves to an appropriate position.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>ProcessingReturn</b></TD>
<TD>When the character completes the <b>Processing</b> animation.
</TD>
<TD>Character returns to its neutral position.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Read</b>*</TD>
<TD>When the character reads something to the user.
</TD>
<TD>Character displays book or paper, reads, and  looks back at user.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>ReadContinued</b>*</TD>
<TD>When the character reads further to the user.
</TD>
<TD>Character reads again, then looks back at user. </TD>
</TR>
<TR VALIGN=TOP>
<TD><b>ReadReturn</b></TD>
<TD>When the character completes the <b>Read</b> animation.
</TD>
<TD>Character returns to its neutral position.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Reading</b></TD>
<TD>When the character reads something but cannot accept input.
</TD>
<TD>Character reads from a piece of paper.
<P>(Note: This animation loops.)</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>ReadingReturn</b></TD>
<TD>When the character completes the <b>Reading</b> animation.
</TD>
<TD>Character returns to its neutral position.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>RestPose</b>*</TD>
<TD>When the character speaks from its neutral position.
</TD>
<TD>Character stands with relaxed but attentive posture.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Sad</b>*</TD>
<TD>When the character is disappointed with the user's choice.
</TD>
<TD>Character frowns or looks disappointed.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>SadReturn</b></TD>
<TD>When the character completes the <b>Sad</b> animation.
</TD>
<TD>Character returns to neutral position.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Searching</b></TD>
<TD>When character is searching for user-specified information.
</TD>
<TD>Character shuffles through file drawer or other container looking for something.
<P>Note: This animation loops to some intermediate frame(s) that occurs after the character moves to an appropriate position.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>SearchingReturn</b></TD>
<TD>When the character completes the <b>Search</b> animation.
</TD>
<TD>Character returns to its neutral position.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Show</b></TD>
<TD>When the character starts up or returns after being summoned.
</TD>
<TD>Character pops up in a puff of smoke, beams in, or walks on-screen.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>StartListening</b>*</TD>
<TD>When the character is listening.
</TD>
<TD>Character puts hand to ear.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>StartListeningReturn</b></TD>
<TD>When the character completes the <b>StartListening</b> animation.
</TD>
<TD>Character returns to neutral position.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>StopListening</b>* </TD>
<TD>When the character stops  listening.
</TD>
<TD>Character puts hands over ears.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>StopListeningReturn</b></TD>
<TD>When the character completes the animation.
</TD>
<TD>Character returns to neutral position.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Suggest</b>*</TD>
<TD>When the character has a tip or suggestion for the user.
</TD>
<TD>Light bulb appears next to character.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>SuggestReturn</b></TD>
<TD>When the character completes the <b>Suggest </b>animation.
</TD>
<TD>Character returns to its neutral position.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Surprised</b>*</TD>
<TD>When the character is surprised by the user's action or choice.
</TD>
<TD>Character widens eyes, opens mouth.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>SurprisedReturn</b></TD>
<TD>When the character completes the <b>Surprised</b> animation.
</TD>
<TD>Character returns to its neutral position.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Think</b>*</TD>
<TD>When the character is thinking about something.
</TD>
<TD>Character looks up and holds hand on head.</TD>
<P></TR>
<TR VALIGN=TOP>
<TD><b>ThinkReturn</b></TD>
<TD>When the character completes the <b>Think</b> animation.
</TD>
<TD>Character returns to its neutral position.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Uncertain</b>*</TD>
<TD>When the character needs the user to confirm a request.
</TD>
<TD>Character looks quizzical, conveys ("are you sure?")</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>UncertainReturn</b></TD>
<TD>When the character completes the <b>Uncertain</b> animation.
</TD>
<TD>Character returns to its neutral position.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Wave</b>*</TD>
<TD>When the user chooses to shut down the server or system.
</TD>
<TD>Character waves goodbye or hello.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>WaveReturn</b></TD>
<TD>When the character completes the <b>Wave</b> animation.
</TD>
<TD>Character returns to its neutral position.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Write</b>*</TD>
<TD>When the character is listening for instructions from the user.
</TD>
<TD>Character displays paper, writes, and looks back at user.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>WriteContinued</b>*</TD>
<TD>When the character continues listening for instructions from the user.
</TD>
<TD>Character writes on a piece of paper and looks back at user.
</TD>
</TR>

<TR VALIGN=TOP>
<TD><b>WriteReturn</b> </TD>
<TD>When the character completes the <b>Write</b> animation.
</TD>
<TD>Character returns to its neutral position.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Writing</b></TD>
<TD>When the character writes out information for the user.
</TD>
<TD>Character writes on piece of paper.
<P>Note: This animation loops.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>WritingReturn</b></TD>
<TD>When the character completes the <b>Writing</b> animation.
</TD>
<TD>Character returns to its neutral position.
</TD>
</TR>
</TABLE><H4>Speaking Animation</H4>
<P>Supply mouth images for each animation during which you want the character to be able to speak, unless your character's design has no animated mouth or indication of spoken output. Mouth images allow your character to lip-sync to spoken output. You define mouth images separately and as Windows bitmap files. They must match the same color palette as the other images in your animation.  
<P>The Microsoft Agent animation services display mouth animation frames on top of the last frame of an animation, also called the <i>speaking frame</i> of the animation. For example, when the character speaks in the <b>GestureRight </b>animation, the animation services overlay the mouth animation frames on the last frame of <b>GestureRight</b>. A character cannot speak while animating, so you only supply mouth images for the last frame of an animation. In addition, the speaking frame must be the end frame of an animation, so a character cannot speak in a looping animation.
<P>Typically, you would supply the mouth images in the same size as the frame (and base image), but include only the area that animates as part of the mouth movement, and render the rest of the image in the transparent color. Design the image so that it matches the image in the speaking frame when overlaid on top of it. To have it match correctly, it is likely you'll need to create a separate set of mouth images for every animation in which the character speaks.
<P>A mouth image can include more than the mouth itself, such as the chin or other parts of the character's body while it speaks. However, if you move a hand or leg, note that it may appear to move randomly because the mouth overlay displayed will be based on the current phoneme of a spoken phrase. In addition, the server clips the mouth image to the speaking frame image's outline. Design your mouth overlay image to remain within the outline of its base speaking frame image, because the server uses the base image to create the window boundary for the character.
<P>The Microsoft Agent Character Editor enables you to define seven basic mouth positions that correspond to common phoneme mouth shapes shown in the following table: 
<P><H4>Mouth Animation Images</H4>
<P>
<TABLE WIDTH="100%" BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR><TD><b><b>Mouth Position</b></b></TD>
<TD><b>Sample Image </b></TD>
<TD><b>Representation</b></TD>
</TR>
<TR VALIGN=TOP>
<TD>Closed</TD>
<TD><IMG SRC="art/DES3112C.GIF" WIDTH="29" HEIGHT="29" ALT="[DES3112C  884 bytes ]"></TD>
<TD>Normal mouth closed shape.
<BR>Also used for phonemes such as "m" as in "mom,"  "b" as in "bob," "f" as in "fife."</TD>
</TR>
<TR VALIGN=TOP>
<TD>Open-wide 1</TD>
<TD><IMG SRC="art/DES3112D.GIF" WIDTH="29" HEIGHT="29" ALT="[DES3112D  899 bytes ]"></TD>
<TD>Mouth is slightly open, at full width. 
<BR>Used for phonemes such as &quot;g&quot; as in &quot;gag," "l" as in "lull," "ear" as in "hear."</TD>
</TR>
<TR VALIGN=TOP>
<TD>Open-wide 2</TD>
<TD><IMG SRC="art/DES3112E.GIF" WIDTH="29" HEIGHT="29" ALT="[DES3112E  912 bytes ]"></TD>
<TD>Mouth is partially open, at full width.
<BR>Used for phonemes such as &quot;n&quot; as in &quot;nun," "d" as in "dad," "t" as in "tot."</TD>
</TR>
<TR VALIGN=TOP>
<TD>Open-wide 3</TD>
<TD><IMG SRC="art/DES3112F.GIF" WIDTH="29" HEIGHT="29" ALT="[DES3112F  920 bytes ]"></TD>
<TD>Mouth is open, at full width.
<BR>Used for phonemes such as &quot;u&quot; as in &quot;hut," "ea" as in "head," "ur" as in "hurt."</TD>
</TR>
<TR VALIGN=TOP>
<TD>Open-wide 4</TD>
<TD><IMG SRC="art/DES3112G.GIF" WIDTH="29" HEIGHT="29" ALT="[DES3112G  926 bytes ]"></TD>
<TD>Mouth is completely open, at full width.
<BR>Used for phonemes such as &quot;a&quot; as in &quot;hat,&quot; "ow" as in "how."</TD>
</TR>
<TR VALIGN=TOP>
<TD>Open-medium</TD>
<TD><IMG SRC="art/DES3112H.GIF" WIDTH="29" HEIGHT="29" ALT="[DES3112H  903 bytes ]"></TD>
<TD>Mouth is open at half width.
<BR>Used for phonemes such as &quot;oy&quot; as in &quot;ahoy," "o" as in "hot."</TD>
</TR>
<TR VALIGN=TOP>
<TD>Open-narrow</TD>
<TD><IMG SRC="art/DES3112I.GIF" WIDTH="29" HEIGHT="29" ALT="[DES3112I  897 bytes ]"></TD>
<TD>Mouth is open at narrow width.
<BR>Used for phonemes such as &quot;o&quot; as in &quot;hoop&quot;, "o" as in "hope," "w" as in "wet."</TD>
</TR>
</TABLE>
<P><A HREF="#top"><IMG SRC="art/uparrow.gif"  BORDER="0" WIDTH=14 HEIGHT=10 ALT="uparrow.gif">Back to contents</A>

<P><H3><A NAME="TOPIC4"></A> Agent States</H3>
<P>The Microsoft Agent animation services automatically play certain animations for you. For example, when you use <b><A HREF="control.htm#MOVETO">MoveTo</A></b> or <b><A HREF="control.htm#GESTUREAT">GestureAt</A></b> commands, the animation services play an appropriate animation. Similarly, after the idle time out, the services automatically play animations. To support these states, you can define appropriate animations and then assign them to the states. You can still play any animation you define directly using the <b>Play</b> method, even if you assign it to a state.  
<P>You can assign multiple animations to the same state, and the animation services will randomly choose one of your animations. This enables your character to exhibit far more natural variety in its behavior. 
<P>Although animations that you assign to states can include branching frames, avoid looping animations (animations that branch forever). Otherwise, you will have to use the <b>Stop</b> method before you can play another animation.
<P>
It's important to define and assign at least one animation for each state that occurs for the character. If you do not supply these animations and state assignments, your character may not appear to behave appropriately to the user. However, if a state does not occur for a particular character, you need not assign an animation to that state. For example, if your host application never calls the <b>MoveTo</b> method, you can skip creating and assigning <b>Moving</b> state animations. 


<P>
<TABLE WIDTH="100%" BORDER=1 CELLPADDING=3 CELLSPACING=0>
<TR><TD><b><b>State&nbsp;&nbsp;&nbsp;</b></b></TD>
<TD><b>Example of Use</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GesturingDown</b></TD>
<TD>When the <b>GestureAt</b> animation method is processed.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GesturingLeft</b></TD>
<TD>When the <b>GestureAt</b> animation method is processed.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GesturingRight</b></TD>
<TD>When the <b>GestureAt</b> animation method is processed.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>GesturingUp</b></TD>
<TD>When the <b>GestureAt</b> animation method is processed.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Hearing</b></TD>
<TD>When the beginning of spoken input is detected. </TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Hiding</b></TD>
<TD>When the user or the application hides the character.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>IdlingLevel1</b> </TD>
<TD>When the character begins the <b>Idling</b> state.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>IdlingLevel2</b></TD>
<TD>When the character begins the second <b>Idling</b> level state.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>IdlingLevel3</b></TD>
<TD>When the character begins the final <b>Idling</b> level state.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Listening</b></TD>
<TD>When the character starts listening (the user first presses the speech input hot key).
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>MovingDown</b></TD>
<TD>When the <b>MoveTo</b> animation method is processed.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>MovingLeft</b></TD>
<TD>When the <b>MoveTo</b> animation method is processed.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>MovingRight</b></TD>
<TD>When the <b>MoveTo</b> animation method is processed.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>MovingUp</b></TD>
<TD>When the <b>MoveTo</b> animation method is processed.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Showing</b></TD>
<TD>When the user or the application shows the character.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Speaking</b></TD>
<TD>When the <b><A HREF="control.htm#SPEAK">Speak</A></b> animation method is processed.
</TD>
</TR>
</TABLE>
<H4>The Hearing and Listening States</H4>
The animation you assign to the <b>Listening</b> state plays when the user presses the push-to-talk hot key for speech input. Create and assign a short animation that makes the character look attentive. Similarly, define its <b>Return</b>  animation to have a short duration so that the character plays its <b>Hearing</b>  state animation when the user speaks. A <b>Hearing</b>  state animation should also be brief, and designed to let the user know that the character is actively listening to what the user says. Head tilts or other slight gestures are appropriate. To provide natural variability, provide several <b>Hearing</b>  state animations.
<H4>The Gesturing States</H4>
You need to create and assign <b>Gesturing</b>  state animations only if you plan to use the <b>GestureAt</b>  method. <b>Gesturing</b>  state animations play when Microsoft Agent processes a call to the <b>GestureAt</b>  method. If you define mouth overlays for your <b>Gesturing</b>  state animations, the character can speak as it gestures.
<P>
The animation services determine the character's location and its relation to the location of the coordinates specified in the method, and play an appropriate animation. Gesturing direction is always with respect to the character; for example, <b>GestureRight</b> should be a gesture to the character's right. 
<H4>The Showing and Hiding States</H4>
The <b>Showing</b>  and <b>Hiding</b>  states play the assigned animations when the user or the host application requests to show or hide the character. These states also appropriately set the character frame's <b>Visible</b>  state. When defining animations for these states, keep in mind that a character can appear or depart at any screen location. Because the user can show or hide any character, always support at least one animation for these states.
<P>
Animations that you assign to the <b>Showing</b>  state typically end with a frame containing the character's neutral position image. Conversely, <b>Hiding</b> state animations typically begin with the neutral position. <b>Showing</b>  and <b>Hiding</b> state animations can include an empty frame at the beginning or end, respectively, to provide a transition from the character's current state. 
<H4>The Idling States</H4>
The <b>Idling</b> states are progressive. The animation services begin using the Level 1 assignments for the first idle period, and use the Level 2 animations for the second. After this, the idle cycle progresses to the Level 3 assigned animations and remains in this state until canceled, such as when a new animation request begins.
<P>
Design animations for the <b>Idling</b> states to communicate the state of the character, but not to distract the user. The animations should appropriately reflect the responsiveness of the character in subtle but clear ways. For example, glancing around or blinking are good animations to assign to the <b>IdlingLevel1</b> state. Yawning and reading animations work well for the <b>IdlingLevel2</b> state. Sleeping or listening to music with headphones are good examples of animations to assign to the <b>IdlingLevel3</b> state. Animations that include many or large movements are not well suited for idle animations because they draw the user's attention. Because <b>Idling</b> state animations are played frequently, provide several <b>Idling</b> state animations, especially for the <b>IdlingLevel1</b> and <b>IdlingLevel2</b> states.
<P>
Note that an application can turn off the automatic idle processing for a character and manage the character's <b>Idling</b> state itself. The Agent <b>Idling</b> states are designed to help you avoid any situation where the character has no animation to play. A character image that does not change after a brief period of time is like an application displaying a wait pointer for a long time, which detracts from the sense of believability and interactivity. Maintaining the illusion does not take much: sometimes just an animated blink, visible breath, or body shift. 
<P>
<H4>The Speaking State</H4>
The animation services use the <b>Speaking</b> state when a speaking animation cannot be found for the current animation. Assign a simple speaking animation to this state. For example, you can use a single frame consisting of the character's neutral positon with mouth overlays.
<H4>The Moving States</H4>
The <b>Moving</b> states play when an application calls the <b>MoveTo</b> method. The animation services determine which animation to play based on the character's current location and the specified coordinates. Movement direction is based on the character's position. Therefore, the animation you assign to the <b>MovingLeft</b> animation should be based on the character's left. If you don't use the <b>MoveTo</b> method, you can skip creating and assigning an animation.
<P>
<b>Moving</b> state animations should animate the character into its moving position. The last frame of this animation is displayed as the character's frame is moved on the screen. There is no support for animating the character while its frame moves. 

<P><A HREF="#top"><IMG SRC="art/uparrow.gif"  BORDER="0" WIDTH=14 HEIGHT=10 ALT="uparrow.gif">Back to contents</A>

<P><H3><A NAME="APPENDIX"></A> Appendix </H3>
<P><H4>Animation Principles</H4>
<P>Effective animation design requires more than simply rendering a character. Successful animators follow a variety of principles and techniques to create "believable" characters. 
<P><b>Squash and Stretch</b>
<P>There should be a degree of distortion as an animated object moves. The amount of deformation that occurs reflects the rigidity of that object. Flattening or elongating a part of character's body as it moves helps you convey the nature and composition of the character.
<P><b>Anticipation</b>
<P>Anticipation sets the stage for an upcoming action. Without anticipatory actions, body movements look abrupt, rigid, and unnatural. This principle is based on how a body moves in the real world. Movement in one direction often begins with movement in the opposite direction. Legs contract before a jump. To exhale, you first inhale. Anticipatory action also has an important role in communicating the nature of both the character and the action and helps your audience prepare for the action. A key aspect of creating a believable character involves demonstrating that the character's actions stem from a purposeful intent. Anticipation helps communicate the character's motivation to the audience.
<P><b>Timing</b>
<P>Timing defines the nature of an action. The speed that a head moves from left to right conveys whether a character is casually looking around or giving a negative response. Timing also helps convey the weight and size of an object. Larger objects tend to take longer to accelerate and decelerate than smaller ones. In addition, the pacing of a character's movements affects how it draws attention. In a normal scenario, rapid motion draws the eye, while in a frenetic environment, stationary or slow movements may have the same effect.
<P><b>Staging</b>
<P>The background and props a character uses can also convey its mood or purpose. Staging also includes what the character wears, lighting effects, viewing angle, and the presence of other characters. These elements all contribute to reinforcing a character's personality, objectives, and actions. Effective staging involves understanding how to direct the eye to where you want to communicate.
<P><b>Follow-Through and Overlapping Action</b>
<P>Just as a golfer's follow-through communicates the result of the swing, the transition from one action to the next is important in communicating the relationship between the actions. Actions rarely come to a sudden and complete stop. So, too, follow-through and overlapping actions allow you to establish the flow of the character's motion. You can typically implement this by varying the speed at which different parts of a body move, allowing movement beyond the primary aspect of the motion. For example, the fingers of a hand typically follow the movement of the wrist in a hand gesture. This principle also emphasizes that actions should not come to a complete stop, but smoothly blend into other actions.
<P><b>Slow In-and-Out</b>
<P>Slow In-and-Out refers to moving a character smoothly from one pose to another. The character begins and ends actions slowly. You accomplish this by the number, timing, and location of "inbetween" frames. The more inbetween frames you include, the slower and smoother the transition. 
<P><b>Arcs</b>
<P>Living objects in nature rarely move in a perfectly straight line. As a result, arcs or curved paths for movement provide more natural effects. Arcs also convey speed of motion. The slower the motion, the higher the arc, and the faster the motion, the flatter the arc. 
<P><b>Exaggeration</b>
<P>Good animators often exaggerate the shape, color, emotion, or actions of a character. Making aspects of the motion "larger than life" more clearly communicates the idea of the action to the audience. For example, a character's arms may stretch to the point that they appear elastic. However, exaggeration must be balanced. If used in some situations and not others, the exaggerated action may appear unrealistic. Similarly, if you exaggerate one aspect of an image, consider what other aspects should be exaggerated to match.
<P><b>Secondary Action</b>
<P>Animation requires more than the mechanistic creation of inbetween images from one pose to the next. A primary action is typically supported by secondary actions. Secondary actions can enhance the presentation, but should not detract from or dominate the main action. Facial expressions can often be used as secondary actions to body movement. Richness comes from adding elements that support the main idea.
<P><b>Solid Drawing</b>
<P>Creating an animated character involves more than creating a series of images. Effective animation design considers how the character looks in different positions and from different angles. Even characters rendered as two-dimensional images become more realistic and believable if considered conceptually in three dimensions. Avoid twins: mirroring the position the face, arms, and legs on both sides of the body. This results in a wooden, unnatural presentation. Body movement is rarely symmetrical, but involves overall balancing of posture or reactions.
<P><b>Appeal</b>
<P>Successful implementation depends on how well you understand your audience. Your character's overall image and personality should appeal to your target audience; appeal does not require photo-realism. A character's personality can be conveyed--no matter how simple its shape--by using gestures, posture, and other mannerisms. A common assignment of beginning animators is to create a variety of expressions for a flour sack or small rug. Characters with simple shapes are often more effective than complex ones. Consider, for example, that many popular characters have only three fingers and a thumb. 
<P><A HREF="#top"><IMG SRC="art/uparrow.gif"  BORDER="0" WIDTH=14 HEIGHT=10 ALT="uparrow.gif">Back to contents</A>

<P>
<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Programming the Microsoft Agent Control</TITLE>

<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="PLATFORM" CONTENT="Windows">
<META NAME=MS-HKWD CONTENT="Programming the Microsoft Agent Control">
<META NAME="Keywords" CONTENT="Microsoft Agent, MSAgent">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT">
<META NAME="ROBOTS" CONTENT="all">

<!--@ SNIFF_START -->
<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../code/ver.js"></SCRIPT>
<!--@ SNIFF_END -->

<SCRIPT DEFER SRC="../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Microsoft Agent"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../art/headbare.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Microsoft Agent"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR>
<TR><TD><PRE><IMG SRC="../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" ID=TOC HREF="../contents.htm">Contents</A>  <IMG SRC="../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="../index.htm">Index</A>  <IMG SRC="../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="agent.htm">Topic Contents</A></PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>Programming the Microsoft Agent Control</H1>
<P><H4>ActiveX&#153; Technology for Interactive Software Agents</H4>
<P><IMG SRC="art/agent.GIF" WIDTH="123" HEIGHT="123" ALT="agent"> 

<P>August 1997
<BR>Microsoft Corporation

<P><blockquote><b>Note:  </b>This document is provided for informational purposes only and Microsoft makes no warranties, either expressed or implied, in this document. The entire risk of the use or the results of this document remains with the user.</blockquote>
<P><blockquote>Information in this document is subject to change without notice. Companies, names, and data used in examples herein are fictitious unless otherwise noted. No part of this document may be reproduced or transmitted in any form or by any means, electronic or mechanical, for any purpose, without the express written permission of Microsoft Corporation.
<P>Microsoft may have patents or pending patent applications, trademarks, copyrights, or other intellectual property rights covering subject matter in this document. The furnishing of this document does not give you any license to these patents, trademarks, copyrights, or other intellectual property rights. Microsoft, MS, MS-DOS, Windows, Windows NT, and the Windows logo are either registered trademarks or trademarks of Microsoft Corporation in the U.S. and/or other countries. Other product and company names mentioned herein may be the trademarks of their respective owners.</blockquote>
<P>&nbsp;
<P><a name="top"></a><b>Contents</b>
<P> <A HREF="#TOPIC2">Document Conventions</A>
<P> <A HREF="#TOPIC2.5">Accessing the Control in Web Pages</A>
<P> <A HREF="#TOPIC7">Accessing the Control from Visual Basic and Other Programming Languages</A>
<P> <A HREF="#TOPIC8">Accessing Microsoft Agent Services Directly</A>
<P> <A HREF="#REQUEST">The Request Object</A>
<P> <A HREF="#AGENTCONTROL">The Agent Control</A>
<P> <A HREF="#TOPIC9">The Characters Object</A>
<P> <A HREF="#TOPIC10">The AudioOutput Object</A>
<P> <A HREF="#TOPIC11">The SpeechInput Object</A>
<P> <A HREF="#TOPIC12">The CommandsWindow Object</A>
<P> <A HREF="#TOPIC13">The PropertySheet Object</A>
<P>Although applications can write directly to the Microsoft Agent services using its automation server interfaces, Microsoft Agent also includes an ActiveX&#153; (OLE) control. The control supports easy programming using a scripting language such as Microsoft&#174; Visual Basic&#174; Scripting Edition (VBScript) or other languages that support the ActiveX control interface.
<P><H3><A NAME="TOPIC2"></A>Document Conventions</H3>
<P>This documentation uses the following typographical conventions:
<P>
<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Convention</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><b>Sub, Visible, Caption</b></TD>
<TD>Words in bold with initial letter capitalized indicate keywords.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><i>agent</i>,<i> String</i>,<i> Now</i></TD>
<TD>Italic words indicate placeholders for information you supply.
</TD>
</TR>
<TR VALIGN=TOP>
<TD>ENTER, F1</TD>
<TD>Words in all capital letters indicate filenames, key names, and key sequences.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><PRE>Agent1.Commands.Enabled = True</PRE></TD>
<P>
<TD>
<P>Words in this font indicate code samples.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><PRE>' This is a comment</PRE></TD>
<P>
<TD>
<P>An apostrophe (') indicates a code comment.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><PRE>Agent1.Commands.Add &quot;Test1&quot;, _
&quot;Test 1&quot;, &quot;test one&quot;</PRE></TD>
<P>
<TD>
<P>A space and an underscore (_) continues a line of code.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><PRE>[words or expression]</PRE></TD>
<P>
<TD>
<P>Items inside square brackets are optional.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><PRE>This | That</PRE></TD>
<P>
<TD>
<P>A vertical bar indicates a choice between two or more items.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><i>agent</i></TD>
<TD>The word &quot;agent&quot; in italics represents the name of the agent control you use.
</TD>
</TR>
</TABLE>
<P>The descriptions of programming interfaces in this document follow the conventions for Microsoft VBScript. However, they should be generally applicable to other languages as well.
<P><A HREF="#top"><IMG SRC="art/uparrow.gif"  BORDER="0" WIDTH=14 HEIGHT=10 ALT="uparrow.gif">Back to contents</A>
<P><A NAME="TOPIC2.5"></A><H3>Accessing the Control in Web Pages</H3>
To access the Microsoft Agent services from a Web page, use the HTML
&lt;OBJECT&gt; tag within the &lt;HEAD&gt; or &lt;BODY&gt; element of
the page, specifying the Microsoft CLSID (class identifier) for the
control. In addition, use a CODEBASE parameter to specify the location
of the Microsoft Agent installation file and its version number. The
following example illustrates how to use the CODEBASE parameter to
autodownload the English language version 1.5 of Microsoft Agent. For
information about the current location of the Microsoft Agent
installation file for specific language versions and the current release
number available, see the <A HREF="http://www.microsoft.com/workshop/prog/agent/agentdl.htm" target="_top">Microsoft Agent download page</a>.
<PRE>&lt;OBJECT
classid="clsid:F5BE8BD2-7DE6-11D0-91FE-00C04FD701A5"
CODEBASE = "http://activex.microsoft.com/controls/agent/MSagent.exe#VERSION=1,5,0,0"
id=Agent
&gt;
&lt;/OBJECT&gt;
</PRE>
<P>Before any script on the page can access its services, Microsoft Agent must be installed on the system loading the page. If Microsoft Agent is not installed on the target system, Microsoft Internet Explorer will automatically download the Microsoft Agent server, data provider, and ActiveX control and ask the user whether to proceed with installation. Once installed, these three items do not have to be reinstalled unless the user uninstalls them. To begin using a character, you must also download its data using the <b>Load</b> and <b>Get</b> methods. For more information about the syntax for loading a character, see the <b><A HREF="#LOAD">Load</A></b> method.
<P>Note that you can also use the methods, properties, and events exposed by the browser to program the character; for example, to program its reaction to a button click. Consult the documentation for your browser to determine what features it exposes in its scripting model. For the Microsoft Internet Explorer, see the <A HREF="../dhtml/references/domrefs.htm" TARGET="_top">Document Object Model References</A> in the Internet Client SDK.
<P>Supporting Microsoft Agent from a Web page requires Microsoft Internet Explorer version 3.0 or later. For other browsers, contact the supplier for information regarding their support for ActiveX.
<P><b>Using VBScript</b>
<P>To program Microsoft Agent from VBScript, use the HTML &lt;SCRIPT&gt; tags. To access the programming interface, use the name of control you assign in the &lt;OBJECT&gt; tag, followed by the subobject (if any), the name of the method or property, and any parameters or values supported by the method or property: 
<PRE><i>agent</i>[.<i>object</i>].<i>Method parameter</i>,[<i>parameter</i>]
<i>agent</i>[.<i>object</i>].<i>Property</i> = <i>value</i>
</PRE>
<P>For events, include the name of the control followed by the name of the event and any parameters:
<PRE><b>Sub</b> <i>agent_event</i> <b>(ByVal</b> <i>parameter</i>[,<b>ByVal </b><i>parameter</i>]<b>)
</b><i>statements</i>...
<b>End Sub
</b></PRE>
<P>You can also specify an event handler using the &lt;SCRIPT&gt; tag's <b>For&#133;Event</b> syntax:
<PRE><b>&lt;SCRIPT</b><i> </i><b>LANGUAGE=VBScript For=</b><i>agent </i><b>Event=</b><i>event</i>[(<i>parameter</i>[,<i>parameter</i>])]<b>&gt;
</b><i>statements...
</i><b>&lt;/SCRIPT&gt;
</b></PRE>
<P>Although Microsoft Internet Explorer supports this latter syntax, not all browsers do. For compatibility, use only the former syntax for events.
<P>With VBScript 2.0, you can verify whether Microsoft Agent is installed by trying to create the object and checking to see if it exists.
 The following sample demonstrates how to check for the Agent control without triggering an auto-download of the control (as would happen if you included an &lt;OBJECT&gt; tag for the control on the page): 
<PRE> 
&lt;!-- WARNING - This code requires VBScript 2.0.
It will always fail to detect the Agent control
in VbScript 1.x, because CreateObject doesn't work.
--&gt;

&lt;SCRIPT LANGUAGE=VBSCRIPT&gt;
If HaveAgent() Then
  'Microsoft Agent control was found.
document.write "&lt;H2 align=center&gt;Found&lt;/H2&gt;"
Else
  'Microsoft Agent control was not found.
document.write "&lt;H2 align=center&gt;Not Found&lt;/H2&gt;"
End If

Function HaveAgent()
' This procedure attempts to create an Agent Control object.
' If it succeeds, it returns True.
'  This means the control is available on the client.
' If it fails, it returns False.
'  This means the control hasn't been installed on the client.

 Dim agent
 HaveAgent = False
 On Error Resume Next
 Set agent = CreateObject("Agent.Control.1")
 HaveAgent = IsObject(agent)

End Function

&lt;/SCRIPT&gt;
</PRE>
<P>You can download VBScript 2.0 and obtain further information on VBScript at the <A HREF="http://www.microsoft.com/vbscript/" TARGET="_top">Microsoft VBScript site</A>.

<H4>Using JavaScript and JScript
</H4>If you use JavaScript&#153; or Microsoft JScript&#153; to access Microsoft Agent's programming interface, follow the conventions for this language for specifying methods or properties: 
<PRE><i>agent.object.Method</i> (<i>parameter</i>)
<i>agent.object.Property</i> = <i>value</i>
</PRE>
<P>JavaScript does not currently have event syntax for non-HTML objects. However, with Internet Explorer you can use the &lt;SCRIPT&gt; tag's <b>For...Event</b> syntax:
<PRE>&lt;SCRIPT LANGUAGE="JScript" FOR="<i>object</i>" EVENT="<i>event</i>()"&gt;
<i>statements...
</i>&lt;/SCRIPT&gt;
</PRE>
<P>Because not all browsers currently support this event syntax, you may want to use JavaScript only for pages that support Microsoft Internet Explorer or for code that does not require event handling.
<P>The current release of JScript does not support collections. To access methods and properties of the <b>Character</b> object, use the <b><A HREF="#CHARACTERMETHOD">Character</A></b> method. Similarly, to access the properties of a <b>Command</b> object, use the <b><A HREF="#COMMANDMETHOD">Command</A></b> method. 
<b><A NAME="SPEECHSUPPORT"></A></b><H4>Accessing Speech Support for Microsoft Agent</H4>
Although Microsoft Agent's services include support for speech recognition, a compatible speech engine must be installed to access Agent's speech recognition support. Your license for Microsoft Agent includes a license for the Microsoft Command and Control Speech Engine when used as part of a Microsoft Agent client application. For information, see <A HREF="http://www.research.microsoft.com/research/srg/srproject.htm" target="_top">Microsoft Speech Research Group web site</a>. 
<P>To support automatic downloading and
installation of Microsoft Command and Control from an HTML page, include
a separate &lt;OBJECT&gt; tag specifying the CLSID of the engine. In
addition, include a CODEBASE parameter to specify the location of the
installation file as well as the version number, as shown in the
following example. For the current location and version number to use
for autodownloading the Microsoft Command and Control speech engine,
consult the information posted on the Microsoft Agent download site at
<A HREF="http://www.microsoft.com/workshop/prog/agent/agentdl.htm"
target="_top">http://www.microsoft.com/workshop/prog/agent/agentdl.htm</a>. 
<PRE>&lt;OBJECT
classid="clsid:161FA781-A52C-11d0-8D7C-00A0C9034A7E"
CODEBASE = http://www.research.microsoft.com/research/srg/actcnc.exe#VERSION=3,0,0,1831
&gt;
&lt;/OBJECT&gt;
</PRE>
<P>The license for Microsoft Command and Control does not permit redistribution of the speech engine independently. For information on licensing the engine separately from Microsoft Agent, contact the <A HREF="mailto:voicebug@microsoft.com">Microsoft Speech Research group</A>. The Microsoft Command and Control engine is currently available only for English language input; however, other speech recognition vendors supporting the Microsoft Speech API may provide support for other languages. If you use another speech engine, contact its vendor for compatibility, installation, and licensing information.
<P>Similarly, if you want to use Microsoft Agent's synthesized speech services, you must install a compatible text-to-speech (TTS) speech engine for your character's output. Your license for Microsoft Agent includes a license to use a special version of the Lernout &amp; Hauspie&#174; TruVoice engine, but only when used with Microsoft Agent. 
<P>To support automatic downloading and installation of this engine from an
HTML page, include the engine's CLSID in the &lt;OBJECT&gt; tag. In
addition, include a CODEBASE parameter to specify the location of the
installation file as well as the version number, such as shown in the
following example. For the current location and version number to use
for autodownloading the Lernout &amp; Hauspie Text to Speech Engine for
Microsoft Agent, consult the information posted on the Microsoft Agent
download site at <A HREF="http://www.microsoft.com/workshop/prog/agent/agentdl.htm"
target="_top">http://www.microsoft.com/workshop/prog/agent/agentdl.htm</a>. 


<PRE>&lt;OBJECT
classid="clsid:B8F2846E-CE36-11D0-AC83-00C04FD97575"
CODEBASE = "http://activex.microsoft.com/controls/agent/cgram.exe#VERSION=1,5,0,0"
&gt;
&lt;/OBJECT&gt;
</PRE>
<P>This speech output engine supports only English language output. However, because Microsoft Agent uses the Microsoft Speech API, other languages may be available. If you want to use another compatible speech engine, contact its vendor for further information about their installation and licensing. Note that if you want to downloaded sound (.WAV) files for your character's voice output, you do not have to install a TTS engine.
<P><A HREF="#top"><IMG SRC="art/uparrow.gif"  BORDER="0" WIDTH=14 HEIGHT=10 ALT="uparrow.gif">Back to contents</A>
<P>
<H3><A NAME="TOPIC7"></A>Accessing the Control from Visual Basic and Other Programming Languages
</H3>You can also use Microsoft Agent's control from Visual Basic&#174; and other programming languages. Make sure that the language fully supports the ActiveX control interface, and follow its conventions for adding and accessing ActiveX controls. 
<P>Accessing Microsoft Agent's control from Visual Basic requires that you first create the control. The easiest way to do this is to place an instance of the control on a form. (You may have to add the control to your toolbox before adding it to your form.) Follow Visual Basic syntax for specifying methods, properties, or events. Using Microsoft Agent's control with Visual Basic is very similar to using the control with VBScript, except that events in Visual Basic must include the data type of passed parameters. However, adding the Microsoft Agent control to a form will automatically include Microsoft Agent's events with their appropriate parameters. For more advanced scenarios, such as creating an Agent control at run time, see the <b><A HREF="#CONNECTEDPROP">Connected</A></b> property.
<P>Most programming languages that support ActiveX controls follow conventions similar to Visual Basic. For programming languages that do not support object collections, you can use the <b><A HREF="#CHARACTERMETHOD">Character</A></b> method and <b><A HREF="#COMMANDMETHOD">Command</A></b> method to access methods and properties of items in the collection.
<P><A HREF="#top"><IMG SRC="art/uparrow.gif"  BORDER="0" WIDTH=14 HEIGHT=10 ALT="uparrow.gif">Back to contents</A>
<P>
<H3><A NAME="TOPIC8"></A>Accessing Microsoft Agent Services Directly
</H3>If you are using C, C++, or Java&#153;, you can access the Microsoft Agent server directly using its ActiveX (OLE) interfaces. For more information on these interfaces, see Programming the Microsoft Agent Server Interface.
<H4>The Agent Object Model
</H4>The Microsoft Agent Object Model consists of the following objects:
<UL>

<LI> Request
<li> Agent (control)
<li> Characters (collection)
<li> Character
<li> Commands (collection)
<li> Command
<li> Balloon
<li> SpeechInput
<li> AudioOutput
<li> CommandsWindow
<li> PropertySheet 
</UL>
<P>These objects are organized in the following hierarchy. (The dotted line following an object indicates that multiple objects can exist.)
<P><IMG SRC="art/PRO3186C.GIF" WIDTH="326" HEIGHT="355" ALT="PRO3186C.GIF">
<P>
<b>Figure 3.  The Agent Object</b>
<P><A HREF="#top"><IMG SRC="art/uparrow.gif"  BORDER="0" WIDTH=14 HEIGHT=10 ALT="uparrow.gif">Back to contents</A>
 
<H3><A NAME="REQUEST"></A>The Request Object
</H3>The server processes some methods, such as <b>Load</b>, <b>Get</b>, <b>Play</b>, and <b>Speak</b>, asynchronously. This enables your application code to continue while the method is completing. When a client application calls one of these methods, the control creates and returns a <b>Request</b> object for the request. You can use the <b>Request</b> object to track the status of the method by assigning an object variable to the method. In VBScript and Visual Basic, first declare an object variable:
<PRE>   Dim MyRequest as Object
</PRE>
<P>In VBScript, you don't include the variable type in your declaration:
<PRE>   Dim MyRequest
</PRE>
<P>And use Visual Basic's Set statement to assign the variable to the method call:
<PRE>
    Set Request = agent.Characters("CharacterID").method (parameter[s])
</PRE>
<P>This adds a reference to the <b>Request</b> object. The <b>Request</b> object will be destroyed when there are no more references to it. Where you declare the <b>Request</b> object and how you use it determines its lifetime. If the object is declared local to a subroutine or function, it will be destroyed when it goes out of scope; that is, when the subroutine or function is complete. If the object is declared globally, it will not be destroyed until either the program terminates or a new value (or a value set to "empty") is assigned to the object.
<P>The <b>Request</b> object provides several properties you can query. For example, the <b>Status</b> property returns the current status of the request. You can use this property to check the status of your request:
<PRE>
 Dim MyRequest
 
 Set MyRequest = Agent.Characters.Load ("Genie", _
  "http://agent.microsoft.com/characters/genie/genie.acf")

 If (MyRequest.Status = Pending) then
  'do something

 Else If (MyRequest.Status = Complete) then
  'do something right away

 End If
</PRE>
<P>The <b>Status</b> property returns the status of a <b>Request</b> object as a Long integer value.
<P>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Status</b></TD>
<TD><b>Definition</b></TD>
</TR>
<TR VALIGN=TOP>
<TD>0</TD>
<TD>Request successfully completed.
</TD>
</TR>
<TR VALIGN=TOP>
<TD>1</TD>
<TD>Request failed.
</TD>
</TR>
<TR VALIGN=TOP>
<TD>2</TD>
<TD>Request pending (in the queue, but not complete).
</TD>
</TR>
<TR VALIGN=TOP>
<TD>3</TD>
<TD>Request interrupted.
</TD>
</TR>
<TR VALIGN=TOP>
<TD>4</TD>
<TD>Request in progress.
</TD>
</TR>
</TABLE>
<P>
The <b>Request</b> object also includes a Long integer value in the <b>Number</b> property that returns the error or cause of the <b>Status</b> code. If none, this value is zero (0). The <b>Description</b> property contains a string value that corresponds to the error number. If the string doesn't exist, <b>Description</b> contains "Application-defined or object-defined error".
<P>For the values and meaning returned by the <b>Number</b> property, see <b><A HREF="err.htm">Error Codes</A></b>. 
<P>The server places animation requests in the specified character's queue. This enables the server to play the animation on a separate thread, and your application's code can continue while animations play. If you create a <b>Request</b> object reference, the server automatically notifies you when an animation request has started or completed through the <b><A HREF="#REQUESTSTART">RequestStart</A></b> and <b><A HREF="#REQUESTCOMPLETE">RequestComplete</A></b> events. Because methods that return <b>Request</b> objects are asynchronous and may not complete during the scope of the calling function, declare your reference to the <b>Request</b> object globally.
<P>The following methods can be used to return a <b>Request</b> object: <b>GestureAt</b>, <b>Get</b>, <b>Hide</b>, <b>Interrupt</b>, <b>Load</b>, <b>MoveTo</b>, <b>Play</b>, <b>Show</b>, <b>Speak</b>, <b>Wait</b>. 

<P><hr>
<P><P><A HREF="#top"><IMG SRC="art/uparrow.gif"  BORDER="0" WIDTH=14 HEIGHT=10 ALT="uparrow.gif">Back to contents</A>

<H3><A NAME="AGENTCONTROL"></A>The Agent Control
</H3>Referencing the Agent control provides access to events and most other objects supported by Microsoft Agent. The Agent control also directly exposes its own set of properties.
<H4>Agent Control Properties
</H4>The following properties are directly accessed from the Agent control:
<P><b><A HREF="#CONNECTEDPROP">Connected</A></b>, <b><A HREF="#NAMEPROP">Name</A></b>, <b><A HREF="#SUSPENDEDPROP">Suspended</A></b>
<P>In addition, some programming environments may assign additional design-time or run-time properties. For example, Visual Basic adds <b>Left</b>, <b>Index</b>, <b>Tag</b>, and <b>Top</b> properties that define the location of the control on a form even though the control does not appear on the form's page at run time. 
<H4><A NAME="CONNECTEDPROP"></A>Connected Property
</H4><b>Description
</b><blockquote>Returns or sets whether the current control is connected to the Microsoft Agent server. 
</blockquote><b>Syntax
</b><blockquote><i>agent.</i><b>Connected </b>[= <i>boolean</i>]
</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Part</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD>boolean</TD>
<TD>A Boolean expression specifying whether the control is connected.
<b>True   </b>The control is connected.
<b>False   </b>The control is not connected.
</TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>In many situations, specifying the control automatically creates a connection with the Microsoft Agent server. For example, specifying the Microsoft Agent control's CLSID in the &lt;OBJECT&gt; tag in a Web page automatically opens a server connection and exiting the page closes the connection. Similarly, for Visual Basic or other languages that enable you to drop a control on a form, running the program automatically opens a connection and exiting the program closes the connection. If the server isn't currently running, it automatically starts.
</blockquote><blockquote>However, if you want to create an Agent control at run time, you may also need to explicitly open a new connection to the server using the <b>Connected</b> property. For example, in Visual Basic you can create an ActiveX object at run time using the Set statement with the <b>New</b> keyword (or <b>CreateObject</b> function). While this creates the object, it will not create the connection to the server, so you must use the <b>Connected </b>property before any code that calls into Microsoft Agent's programming interface, as shown in the following example:
</blockquote>
<PRE> ' Declare a global variable for the control
 Dim MyAgent as Agent

 ' Create an instance of the control using New
 Set MyAgent = New Agent

 ' Open a connection to the server
 MyAgent.Connected = True

 ' Load a character
 MyAgent.Characters.Load "Genie", "C:\Some Directory\Genie.acs"

 ' Display the character
 MyAgent.Characters("Genie").Show

</PRE>
<P><blockquote>Note that creating a control using this technique does not expose the Agent control's events. In Visual Basic 5.0, you can access the control's events by including the control in your project's references, and use the <b>WithEvents</b> keyword in your variable declaration:
</blockquote><PRE>
 Dim WithEvents <i>agent</i> as Agent

 ' Create an instance of the control using New
 Set MyAgent = New Agent
</PRE>
<P>
<blockquote>Using <b>WithEvents</b> to create an instance of the Agent control at run time automatically opens the connection with the Microsoft Agent server. Therefore, you don't need to include a <b>Connected</b> statement. 
<P>You can close your control's connection to the server at run time by setting the <b>Connected</b> property to <b>False</b>. However, you must first release all references you defined to objects created by the server. In particular, you must release any references you created to character and command objects. In Visual Basic, you can disassociate a reference to an object by setting the reference to <b>Nothing</b>:
</blockquote>
<PRE> Dim Genie as IAgentCtlCharacter
 
 Sub LoadCharacter

 ' Load the character into the Characters collection
 Agent1.Characters.Load "Genie", _
 "C:\Program Files\Microsoft Agent\Genie.acs"

 ' Create a reference to the character
 Set Genie = Agent1.Characters("Genie")

 End Sub

 Sub CloseConnection

 ' Release the reference to the character object
 Set Genie = Nothing

 ' Close the connection with the server
 Agent1.Connected = False

 End Sub
</PRE>
<P><blockquote>Although you can reopen your connection by resetting the <b>Connected</b> property to <b>True</b>, not all information established with the server in the original connection will be preserved. For example, if you loaded a character, you will have to reload it again before you can play any of its animations. 
Setting the <b>Connected</b> property to <b>False</b> does not destroy your instance of the control. You must use the syntax supported by your programming language for releasing the object. For example, in Visual Basic, you set the control to <b>Nothing</b>:
</blockquote>
<PRE> Set Agent1 = Nothing
</PRE>
<P><blockquote>Attempting to query or set the <b>Connected</b> property before creating the control will raise an error. 
</blockquote>
<P><HR>
<P>
<H4><A NAME="NAMEPROP"></A>Name Property
</H4><b>Description
</b><blockquote>Returns the name used in code to identify the control. This property is read-only at run time.
</blockquote><b>Syntax
</b><blockquote><i>agent.</i><b>Name</b> 
</blockquote><b>Remarks
</b><blockquote>In some programming environments such as Visual Basic, adding the control automatically generates a default name for the control that can be changed at design time. For HTML scripts, you can define the name in the &lt;OBJECT&gt; tag. If you define the name, follow the conventions of the programming language for defining object names.
</blockquote>
<P><HR>
<P>
<H4><A NAME="SUSPENDEDPROP"></A>Suspended Property
</H4><b>Description
</b><blockquote>Returns a Boolean indicating the Microsoft Agent server operational state. 
</blockquote><b>Syntax
</b><blockquote><i>agent.</i><b>Suspended</b> 
</blockquote><b>Remarks
</b><blockquote>The Suspended property returns <b>False </b>when the server is in its normal running state. When the property returns <b>True</b>, the server is in its "suspended" state, which indicates that the user shut down the server and implies that no character interaction is desired. Client applications can only read this property, but you can display your own message box suggesting how to restart the server.
</blockquote><b>See Also
</b><blockquote><b><A HREF="#RESTART">Restart</A></b> event, <b><A HREF="#SHUTDOWN">Shutdown</A></b> event
</blockquote>
<P><HR>
<P>
<H4>Agent Control Events
</H4>The Microsoft Agent control provides several events that enable your client application to track the state of the server:
<P>
<b><A HREF="#ACTIVATEINPUT">ActivateInput</A></b>, <b><A HREF="#BALLOONHIDEEVENT">BalloonHide</A></b>, <b><A HREF="#BALLOONSHOWEVENT">BalloonShow</A></b>, <b><A HREF="#BOOKMARK">Bookmark</A></b>, <b><A HREF="#CLICK">Click</A></b>, <b><A HREF="#COMMAND">Command</A></b>, <b><A HREF="#DBLCLICK">DblClick</A></b>, <b><A HREF="#DEACTIVATEINPUT">DeactivateInput</A></b>, <b><A HREF="#DRAGCOMPLETE">DragComplete</A></b>, <b><A HREF="#DRAGSTART">DragStart</A></b>, <b><A HREF="#HIDEEVENT">Hide</A></b>, <b><A HREF="#IDLECOMPLETE">IdleComplete</A></b>, <b><A HREF="#IDLESTART">IdleStart</A></b>, <b><A HREF="#MOVEAGENTCONTROLEVENT">Move</A></b>, <b><A HREF="#REQUESTCOMPLETE">RequestComplete</A></b>, <b><A HREF="#REQUESTSTART">RequestStart</A></b>, <b><A HREF="#RESTART">Restart</A></b>, <b><A HREF="#SHOWEVENT">Show</A></b>, <b><A HREF="#SHUTDOWN">Shutdown</A></b>, <b><A HREF="#SIZEAGENTCONTROLEVENT">Size</A></b>
<H4><A NAME="ACTIVATEINPUT"></A>ActivateInput Event
</H4><b>Description
</b><blockquote>Occurs when a client becomes input-active. 
</blockquote><b>Syntax
</b><blockquote>Sub<i> agent</i>_<b>ActivateInput</b> <b>(ByVal</b> <i>CharacterID</i><b>)
</b></blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Value</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>CharacterID </i></TD>
<TD>Returns the ID of the character through which the client becomes input-active.
</TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>The input-active client receives mouse and speech input events supplied by the server. The server sends this event only to the client that becomes input-active. 
</blockquote><blockquote>This event can occur when the user switches to your <b>Commands</b> object, for example, by choosing your <b>Commands</b> object entry in the Commands Window or in the pop-up menu for a character. It can also occur when the user selects a character (by clicking or speaking its name), when a character becomes visible, and when the character of another client application becomes hidden. You can also call the <b>Activate</b> method (with <b>State</b> set to 2) to explicitly make the character topmost, which results in your client application becoming input-active and triggers this event. However, this event does not occur if you use the <b>Activate</b> method only to specify whether your client is the active client of the character.
</blockquote><b>See Also
</b><blockquote><b><A HREF="#DEACTIVATEINPUT">DeactivateInput</A></b> event, <b><A HREF="#ActivateMethod">Activate</A></b> method
</blockquote>
<P><HR>
<P>
<H4><A NAME="BALLOONHIDEEVENT"></A>BalloonHide Event
</H4><b>Description
</b><blockquote>Occurs when a character's word balloon is hidden.  
</blockquote><b>Syntax
</b><blockquote>Sub<i> agent</i>_<b>BalloonHide</b> <b>(ByVal</b> <i>CharacterID</i><b>)
</b></blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Value</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>CharacterID </i></TD>
<TD>Returns the ID of the character associated with the word balloon.
</TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>The server sends this event only to the clients of the character (applications that have loaded the character) that uses the word balloon.
</blockquote><b>See Also
</b><blockquote><b><A HREF="#BALLOONSHOWEVENT">BalloonShow</A></b> event
</blockquote>
<P><HR>
<P>
<H4><A NAME="BALLOONSHOWEVENT"></A>BalloonShow Event
</H4><b>Description
</b><blockquote>Occurs when a character's word balloon is shown.  
</blockquote><b>Syntax
</b><blockquote>Sub<i> agent</i>_<b>BalloonShow</b> <b>(ByVal</b> <i>CharacterID</i><b>)
</b></blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Value</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>CharacterID </i></TD>
<TD>Returns the ID of the character associated with the word balloon.
</TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>The server sends this event only to the clients of the character (applications that have loaded the character) that uses the word balloon.
</blockquote><b>See Also
</b><blockquote><b><A HREF="#BALLOONHIDEEVENT">BalloonHide</A></b> event
</blockquote>
<P><HR>
<P>
<H4><A NAME="BOOKMARK"></A>Bookmark Event
</H4><b>Description
</b><blockquote>Occurs when a bookmark in a speech text string that your application defined is activated. 
</blockquote><b>Syntax
</b><blockquote><b>Sub</b><i> agent</i>_<b>Bookmark(ByVal</b> <i>BookmarkID</i><b>)
</b></blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Value</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>BookmarkID</i></TD>
<TD>A Long integer identifying the bookmark number.
</TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>To specify a bookmark event, use the <b>Speak</b> method with a <b>Mrk</b> tag in your supplied text. For more information about tags, see  <A HREF="tags.htm">Speech Output Tags</A>. 
</blockquote>
<P><HR>
<P>
<H4><A NAME="CLICK"></A>Click Event
</H4><b>Description
</b><blockquote>Occurs when the user clicks a character. 
</blockquote><b>Syntax
</b><blockquote><b>Sub</b><i> agent</i><b>_Click</b> <b>(ByVal</b> <i>CharacterID</i>, <b>ByVal</b> <i>Button</i>, <b>ByVal</b> <i>Shift</i>, <b>ByVal</b> <i>X</i>, <b>ByVal</b> <i>Y</i><b>)
</b></blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Value</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>CharacterID</i> </TD>
<TD>Returns the ID of the clicked character as a string.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><i>Button</i></TD>
<TD>Returns an integer that identifies the button that was pressed and released to cause the event. The button argument is a bit field with bits corresponding to the left button (bit 0), right button (bit 1), and middle button (bit 2). These bits correspond to the values 1, 2, and 4, respectively. Only one of the bits is set, indicating the button that caused the event. </TD>
</TR>
<TR VALIGN=TOP>
<TD><i>Shift</i></TD>
<TD>Returns an integer that corresponds to the state of the SHIFT, CTRL, and ALT keys when the button specified in the button argument is pressed or released. A bit is set if the key is down. The shift argument is a bit field with the least-significant bits corresponding to the SHIFT key (bit 0), the CTRL key (bit 1), and the ALT key (bit 2). These bits correspond to the values 1, 2, and 4, respectively. The shift argument indicates the state of these keys. Some, all, or none of the bits can be set, indicating that some, all, or none of the keys are pressed. For example, if both CTRL and ALT were pressed, the value of shift would be 6.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><i>X,Y</i></TD>
<TD>Returns an integer that specifies the current location of the mouse pointer. The X and Y values are always expressed in pixels, relative to the upper left corner of the screen.
</TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>This event is sent only to the input-active client of a character. When the user clicks a character with no input-active client, the server sets its last input-active client as the current input-active client, sending the <b><A HREF="#ACTIVATEINPUT">ActivateInput</A></b> event to that client, and then sending the <b>Click</b> event.
</blockquote>
<P><blockquote><b>Note </b>  Clicking a character does not disable all other character output (all characters). However, pressing the listening hot key does flush the input-active character's output and triggers the <b>RequestComplete</b> event, passing a <b>Request.Status</b> that indicates that the client's queue was interrupted.
</blockquote>
<P><hr>
<P>
<H4><A NAME="COMMAND"></A>Command Event
</H4><b>Description
</b><blockquote>Occurs when a (client's) command is chosen by the user. 
</blockquote><b>Syntax
</b><blockquote><b>Sub</b> <i>agent</i>_<b>Command(ByVal</b> <i>UserInput</i><b>)</b>
</blockquote><blockquote>

<TABLE WIDTH="95%" BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Value</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>UserInput</i></TD>
<TD>Identifies the <b>Command</b> object returned by the server. 
<P>The following properties can be accessed from the <b>Command</b> object:
<P><b>CharacterID</b>&nbsp;&nbsp;A string value identifying the name (ID) of the character that received the command. 
<br><b>Name</b>&nbsp;&nbsp;A string value identifying the name (ID) of the command.
<br><b>Confidence</b>&nbsp;&nbsp;A Long integer value indicating the confidence scoring for the command. 
<br><b>Voice</b>&nbsp;&nbsp;A string value identifying the voice text for the command.
<br><b>Alt1Name</b>&nbsp;&nbsp;A string value identifying the name of the next (second) best command.
<br><b>Alt1Confidence</b>&nbsp;&nbsp;A Long integer value indicating the confidence scoring for the next (second) best command.
<br><b>Alt1Voice</b>&nbsp;&nbsp;A string value identifying the voice text for the next best alternative command match.
<br><b>Alt2Name</b>&nbsp;&nbsp;A string value identifying the name of third best command match.
<br><b>Alt2Confidence</b>&nbsp;&nbsp;A Long integer identifying the confidence scoring for the third best command match.
<br><b>Alt2Voice</b>&nbsp;&nbsp;A string value identifying the voice text for the third best command match.
<br><b>Count</b>&nbsp;&nbsp;Long integer value indicating the number of alternatives returned.
</TD>
</TR>
</TABLE></blockquote>
<P><b>Remarks
</b><blockquote>The server notifies you with this event when your application is input-active and the user chooses a command you defined to appear in the Commands Window or character's pop-up menu. The event passes back the number of possible matching commands in <b>Count</b> as well as the name, confidence scoring, and voice text for those matches.
</blockquote><blockquote>If voice input triggers this event, the server returns a string that identifies the best match in the <b>Name</b> parameter, and the second- and third-best match in <b>Alt1Name</b> and <b>Alt2Name</b>. An empty string indicates that the input did not match any command your application defined; for example, it could be one of the server's defined commands. It is also possible that you may get the same command name returned in more than one entry. <b>Confidence</b>, <b>Alt1Confidence</b>, and <b>Alt2Confidence</b> parameters return the relative scores, in the range of -100 to 100, that are returned by the speech recognition engine for each respective match. <b>Voice</b>, <b>Alt1Voice</b>, and <b>Alt2Voice</b> parameters return the voice text that the speech recognition engine matched for each alternative. If <b>Count</b> returns zero (0), the server detected spoken input, but determined that there was no matching command. 
<P>
If voice input was not the source for the command, for example, if the user selected the command from the character's pop-up menu, the server returns the name (ID) of the command selected in the <b>Name </b>property. It also returns the value of the <b>Confidence</b> parameter as 100, and the value of the <b>Voice</b> parameters as the empty string (""). <b>Alt1Name</b> and <b>Alt2Name</b> also return empty strings. <b>Alt1Confidence</b> and <b>Alt2Confidence</b> return zero (0), and <b>Alt1Voice </b>and <b>Alt2Voice</b> return empty strings. <b>Count</b> returns 1.
</blockquote>
<P><blockquote><b>Note</b> The Microsoft Command and Control engine supports returning values in the parameters of this event. If you use Microsoft Agent with another speech engine, check with the supplier to determine whether their engine supports the Microsoft Speech API interface for returning alternatives and confidence scores.
</blockquote>
<P><hr>
<P>
<H4><A NAME="DBLCLICK"></A>DblClick Event
</H4><b>Description
</b><blockquote>Occurs when the user double-clicks a character. 
</blockquote><b>Syntax
</b><blockquote><b>Sub</b><i> agent</i><b>_DblClick</b> <b>(ByVal</b> <i>CharacterID</i>, <b>ByVal</b> <i>Button</i>, <b>ByVal</b> <i>Shift</i>, <b>ByVal</b> <i>X</i>, <b>ByVal</b> <i>Y</i><b>)</b>
</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Value</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>CharacterID</i> </TD>
<TD>Returns the ID of the double-clicked character as a string.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><i>Button</i></TD>
<TD>Returns an integer that identifies the button that was pressed and released to cause the event. The button argument is a bit field with bits corresponding to the left button (bit 0), right button (bit 1), and middle button (bit 2). These bits correspond to the values 1, 2, and 4, respectively. Only one of the bits is set, indicating the button that caused the event. </TD>
</TR>
<TR VALIGN=TOP>
<TD><i>Shift</i></TD>
<TD>Returns an integer that corresponds to the state of the SHIFT, CTRL, and ALT keys when the button specified in the button argument is pressed or released. A bit is set if the key is down. The shift argument is a bit field with the least-significant bits corresponding to the SHIFT key (bit 0), the CTRL key (bit 1), and the ALT key (bit 2). These bits correspond to the values 1, 2, and 4, respectively. The shift argument indicates the state of these keys. Some, all, or none of the bits can be set, indicating that some, all, or none of the keys are pressed. For example, if both CTRL and ALT were pressed, the value of shift would be 6.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><i>X,Y</i></TD>
<TD>Returns an integer that specifies the current location of the mouse pointer. The X and Y values are always expressed in pixels, relative to the upper left corner of the screen.
</TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>This event is sent only to the input-active client of a character. When the user double-clicks a character with no input-active client, the server sets its last input-active client as the current input-active client, sending the <b><A HREF="#ACTIVATEINPUT">ActivateInput</A></b> event to that client, and then sending the <b>DblClick</b> event.
</blockquote>
<P><hr>
<P>
<H4><A NAME="DEACTIVATEINPUT"></A>DeactivateInput Event 
</H4><b>Description
</b><blockquote>Occurs when a client becomes non-input-active. 
</blockquote><b>Syntax
</b><blockquote><b>Sub</b><i> agent</i><b>_DeactivateInput</b> <b>(ByVal</b> <i>CharacterID</i><b>)</b>
</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Value</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>CharacterID</i></TD>
<TD>Returns the ID of the character that makes the client become non-input-active.
</TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>A non-input-active client no longer receives mouse or speech events from the server (unless it becomes input-active again). The server sends this event only to the client that becomes non-input-active. It does not occur when you use the <b>Activate</b> method and set the <b>State</b> parameter to 0. 
</blockquote><blockquote>This event occurs when your client application is input-active and the user chooses the caption of another client in a character's pop-up menu or the Commands Window. It may also occur when the user selects the name of another character by clicking or speaking. You also get this event when your character is hidden or another character becomes visible.
</blockquote><b>See Also
</b><blockquote><b><A HREF="#ACTIVATEINPUT">ActivateInput</A></b> event
</blockquote>
<P><hr>
<P>
<H4><A NAME="DRAGCOMPLETE"></A>DragComplete Event
</H4><b>Description
</b><blockquote>Occurs when the user completes dragging a character. 
</blockquote><b>Syntax
</b><blockquote><b>Sub</b><i> agent</i><b>_DragComplete</b> <b>(ByVal</b> <i>CharacterID</i>, <b>ByVal</b> <i>Button</i>, <b>ByVal</b> <i>Shift</i>, <b>ByVal</b> <i>X</i>, <b>ByVal</b> <i>Y</i><b>)</b>
</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Value</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>CharacterID</i> </TD>
<TD>Returns the ID of the dragged character as a string.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><i>Button</i></TD>
<TD>Returns an integer that identifies the button that was pressed and released to cause the event. The button argument is a bit field with bits corresponding to the left button (bit 0), right button (bit 1), and middle button (bit 2). These bits correspond to the values 1, 2, and 4, respectively. Only one of the bits is set, indicating the button that caused the event. </TD>
</TR>
<TR VALIGN=TOP>
<TD><i>Shift</i></TD>
<TD>Returns an integer that corresponds to the state of the SHIFT, CTRL, and ALT keys when the button specified in the button argument is pressed or released. A bit is set if the key is down. The shift argument is a bit field with the least-significant bits corresponding to the SHIFT key (bit 0), the CTRL key (bit 1), and the ALT key (bit 2). These bits correspond to the values 1, 2, and 4, respectively. The shift argument indicates the state of these keys. Some, all, or none of the bits can be set, indicating that some, all, or none of the keys are pressed. For example, if both CTRL and ALT were pressed, the value of shift would be 6.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><i>X,Y</i></TD>
<TD>Returns an integer that specifies the current location of the mouse pointer. The X and Y values are always expressed in pixels, relative to the upper left corner of the screen.
</TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>This event is sent only to the input-active client of a character. When the user drags a character with no input-active client, the server sets its last input-active client as the current input-active client, sending the <b><A HREF="#ACTIVATEINPUT">ActivateInput</A></b> event to that client, and then sending the <b>DragStart</b> and <b>DragComplete</b> events.
</blockquote><b>See Also
</b><blockquote><b><A HREF="#DRAGSTART">DragStart</A></b> event
</blockquote>
<P><hr>
<P>
<H4><A NAME="DRAGSTART"></A>DragStart Event
</H4><b>Description
</b><blockquote>Occurs when the user begins dragging a character. 
</blockquote><b>Syntax
</b><blockquote><b>Sub</b><i> agent</i><b>_DragStart</b> <b>(ByVal</b> <i>CharacterID</i>, <b>ByVal</b> <i>Button</i>, <b>ByVal</b> <i>Shift</i>, <b>ByVal</b> <i>X</i>, <b>ByVal</b> <i>Y</i><b>)</b>
</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Value</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>CharacterID</i> </TD>
<TD>Returns the ID of the clicked character as a string.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><i>Button</i></TD>
<TD>Returns an integer that identifies the button that was pressed and released to cause the event. The button argument is a bit field with bits corresponding to the left button (bit 0), right button (bit 1), and middle button (bit 2). These bits correspond to the values 1, 2, and 4, respectively. Only one of the bits is set, indicating the button that caused the event. </TD>
</TR>
<TR VALIGN=TOP>
<TD><i>Shift</i></TD>
<TD>Returns an integer that corresponds to the state of the SHIFT, CTRL, and ALT keys when the button specified in the button argument is pressed or released. A bit is set if the key is down. The shift argument is a bit field with the least-significant bits corresponding to the SHIFT key (bit 0), the CTRL key (bit 1), and the ALT key (bit 2). These bits correspond to the values 1, 2, and 4, respectively. The shift argument indicates the state of these keys. Some, all, or none of the bits can be set, indicating that some, all, or none of the keys are pressed. For example, if both CTRL and ALT were pressed, the value of shift would be 6.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><i>X,Y</i></TD>
<TD>Returns an integer that specifies the current location of the mouse pointer. The X and Y values are always expressed in pixels, relative to the upper left corner of the screen.
</TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>This event is sent only to the input-active client of a character. When the user drags a character with no input-active client, the server sets its last input-active client as the current input-active client, sending the <b><A HREF="#ACTIVATEINPUT">ActivateInput</A></b> event to that client, and then sending the <b>DragStart</b> event.
</blockquote><b>See Also
</b><blockquote><b><A HREF="#DRAGCOMPLETE">DragComplete</A></b> event
</blockquote>
<P><hr>
<P>
<H4><A NAME="HIDEEVENT"></A>Hide Event
</H4><b>Description
</b><blockquote>Occurs when a character is hidden. 
</blockquote><b>Syntax
</b><blockquote><b>Sub</b><i> agent</i><b>_Hide</b> <b>(ByVal</b> <i>CharacterID</i>, <b>ByVal</b> <i>Cause</i><b>)</b>

</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Value</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>CharacterID</i></TD>
<TD>Returns the ID of the hidden character as a string.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><i>Cause</i></TD>
<TD>Returns a value that indicates what caused the characer to be hidden.
<P>1&nbsp;&nbsp;The user hid the character (using the menu or voice command).
<br>2&nbsp;&nbsp;Your client application hid the character.
<br>3&nbsp;&nbsp;Another client application hid the character.
</TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>The server sends this event to all clients of the character. To query the current state of the character, use the <b>Visible</b> property.
</blockquote><b>See Also
</b><blockquote><b><A HREF="#SHOWEVENT">Show</A></b> event, <b><A HREF="#VisibilityCauseProperty">VisibilityCause</a></b> property
</blockquote>
<P><hr>
<P>
<H4><A NAME="IDLECOMPLETE"></A>IdleComplete Event
</H4><b>Description
</b><blockquote>Occurs when the server ends the <b>Idling</b> state of a character. 
</blockquote><b>Syntax
</b><blockquote><b>Sub</b><i> agent</i><b>_IdleComplete</b> <b>(ByVal</b> <i>CharacterID</i><b>)</b>
</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Value</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>CharacterID</i></TD>
<TD>Returns the ID of the idling character as a string.
</TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>The server sends this event to all clients of the character. 
</blockquote><b>See Also
</b><blockquote><b><A HREF="#IDLESTART">IdleStart</A></b> event
</blockquote>
<P><hr>
<P>
<H4><A NAME="IDLESTART"></A>IdleStart Event
</H4><b>Description
</b><blockquote>Occurs when the server sets a character to the <b>Idling</b> state. 
</blockquote><b>Syntax
</b><blockquote><b>Sub</b><i> agent</i><b>_IdleStart</b> <b>(ByVal</b> <i>CharacterID</i><b>)</b>
</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Value</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>CharacterID</i></TD>
<TD>Returns the ID of the idling character as a string.
</TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>The server sends this event to all clients of the character. 
</blockquote><b>See Also
</b><blockquote><b><A HREF="#IDLECOMPLETE">IdleComplete</A></b> event
</blockquote>
<P><HR>
<P>
<H4><A NAME="MOVEAGENTCONTROLEVENT"></A>Move Event
</H4><b>Description
</b><blockquote>Occurs when a character is moved. 
</blockquote><b>Syntax
</b><blockquote><b>Sub</b><i> agent</i><b>_Move</b> <b>(ByVal</b> <i>CharacterID</i><b>, ByVal</b> <i>X</i>, <b>ByVal</b> <i>Y</i>, <b>ByVal</b> <i>Cause</i><b>)</b>
</blockquote><blockquote>
<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Value</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>CharacterID</i></TD>
<TD>Returns the ID of the character that moved.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><i>X</i></TD>
<TD>Returns the x-coordinate (in pixels) of the top edge of character frame's new location as an integer.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><i>Y</i></TD>
<TD>Returns the y-coordinate (in pixels) of the left edge of character frame's new location as an integer.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><i>Cause</i></TD>
<TD>Returns a value that indicates what caused the character to move.
<P>1&nbsp;&nbsp;The user dragged the character.
<br>2&nbsp;&nbsp;Your client application moved the character.
<br>3&nbsp;&nbsp;Another client application moved the character.
</TD>
</TR>

</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>This event occurs when the user or an application changes the character's position. Coordinates are relevant to the upper left corner of the screen. This event is sent only to the clients of the character (applications that have loaded the character). 
</blockquote><b>See Also
</b><blockquote><b><A HREF="#MoveCauseProperty">MoveCause</a></b> property, <b><A HREF="#SIZEAGENTCONTROLEVENT">Size</A></b> event
</blockquote>
<P><hr>
<P>
<H4><A NAME="REQUESTCOMPLETE"></A>RequestComplete Event
</H4><b>Description
</b><blockquote>Occurs when the server completes a queued request. 
</blockquote><b>Syntax
</b><blockquote><b>Sub</b><i> agent</i><b>_RequestComplete</b> <b>(ByVal</b> <i>Request</i><b>)</b>
</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Value</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>Request</i> </TD>
<TD>Returns the <b>Request</b> object. </TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>This event returns a <b><A HREF="#REQUEST">Request</A></b> object. Because requests are processed asynchronously, you can use this event to determine when the server completes processing a request (such as a <b>Get</b>, <b>Play</b>, or <b>Speak</b> method) to synchronize this event with other actions generated by your application. The server sends the event only to the client that created the reference to the <b>Request</b> object and only if you defined a global variable for the request reference:
</blockquote>
<PRE> Dim MyRequest 
 Dim Genie 

 Sub window_Onload
 
 Agent1.Characters.Load "Genie", _ 
  "http://agent.microsoft.com/characters/genie/genie.acf"

 Set Genie = Agent.Characters("Genie")

 ' This syntax will generate RequestStart and RequestComplete events.
 Set MyRequest = Genie.Get("state", "Showing")
 ' This syntax will not generate RequestStart and RequestComplete events.
 Genie.Get "state", "Hiding"
 
 End Sub

 Sub Agent1_RequestComplete(ByVal Request)

 If Request = MyRequest Then
  Status = "Showing animation is now loaded"

 End Sub
</PRE>
<P><blockquote><b>Note</b> In VBScript 1.0, this event fires even if you don't define references to a <b>Request</b> object. This has been fixed in VBScript 2.0, which can be downloaded from <a href="http://www.microsoft.com/msdownload/SCRIPTING.HTM" TARGET="_top">http://www.microsoft.com/msdownload/scripting.htm</A>.
</blockquote><p>
<P><b>See Also
</b><blockquote><b><A HREF="#REQUESTSTART">RequestStart</A></b> event
</blockquote>
<P><hr>
<P>
<H4><A NAME="REQUESTSTART"></A>RequestStart Event
</H4><b>Description
</b><blockquote>Occurs when the server begins a queued request. 
</blockquote><b>Syntax
</b><blockquote><b>Sub</b><i> agent</i><b>_RequestStart</b> <b>(ByVal</b> <i>Request</i><b>)</b>
</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Value</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>Request</i> </TD>
<TD>Returns the <b>Request</b> object. </TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>The event returns a <b><a href="#REQUEST">Request</A></b> object. Because requests are processed asynchronously, you can use this event to determine when the server begins processing a request (such as a <b>Get</b>, <b>Play</b>, or <b>Speak</b> method) and thereby synchronize this with other actions generated by your application. The event is sent only to the client that created the reference to the <b>Request</b> object and only if you defined a global variable for the request reference:
</blockquote>
<PRE> Dim MyRequest 
 Dim Genie 

 Sub window_Onload
 
 Agent1.Characters.Load "Genie", _
   "http://agent.microsoft.com/characters/genie/genie.acf" 
 Set Genie = Agent1.Characters("Genie")

 ' This syntax will generate RequestStart and RequestComplete events.
 Set MyRequest = Genie.Get("state", "Showing")

 ' This syntax will not generate RequestStart and RequestComplete events.
 Genie.Get ("state", "Hiding")
 End Sub

 Sub Agent1_RequestStart(ByVal Request)

 If Request = MyRequest Then
  Status = "Loading the Showing animation"

 End Sub

</PRE>
<P><blockquote>The <b>Status</b> returns 4 (request in progress) for the <b>Request</b> object returned. 
</blockquote>
<P><blockquote><b>Note</b> In VBScript 1.0, this event fires even if you don't define references to a <b>Request</b> object. This has been fixed in VBScript 2.0, which can be downloaded from <A HREF="http://www.microsoft.com/msdownload/SCRIPTING.HTM" TARGET="_top">http://www.microsoft.com/msdownload/scripting.htm</A>.
</blockquote>
<P><b>See Also
</b><blockquote><b><A HREF="#REQUESTCOMPLETE">RequestComplete</A></b> event
</blockquote>
<P><hr>
<P>
<H4><A NAME="RESTART"></A>Restart Event
</H4><b>Description
</b><blockquote>Occurs when the server restarts from its suspended state. 
</blockquote><b>Syntax
</b><blockquote><b>Sub</b><i> agent</i><b>_Restart</b> <b>()</b>
</blockquote>
<b>Remarks
</b><blockquote>The server sends this event to all client applications when the user chooses to restart the server from its suspended state. However, you will not get this event if you close your connection to the server when the server shuts down.
</blockquote>
<P><hr>
<P>
<H4><A NAME="SHOWEVENT"></A>Show Event
</H4><b>Description
</b><blockquote>Occurs when a character is displayed. 
</blockquote><b>Syntax
</b><blockquote><b>Sub</b><i> agent</i><b>_Show</b> <b>(ByVal</b> <i>CharacterID</i>, <b>ByVal</b> <i>Cause</i><b>)</b>
</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Value</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>CharacterID</i></TD>
<TD>Returns the ID of the character shown as a string.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><i>Cause</i></TD>
<TD>Returns a value that indicates what caused the character to display.
<P>2&nbsp;&nbsp;The user showed the character (using the menu or voice command).
<br>4&nbsp;&nbsp;Your client application showed the character.
<br>6&nbsp;&nbsp;Another client application showed the character.
</TD>
</TR>
</TABLE></blockquote>
<P><b>Remarks
</b><blockquote>The server sends this event to all clients of the character. To query the current state of the character, use the <b>Visible</b> property.
</blockquote>
<P><b>See Also
</b><blockquote><b><A HREF="#HIDEEVENT">Hide</A></b> event, <b><A HREF="#VisibilityCauseProperty">VisibilityCause</a></b> property
</blockquote>



<P><hr>
<P>
<H4><A NAME="SHUTDOWN"></A>Shutdown Event
</H4><b>Description
</b><blockquote>Occurs when the user explicitly shuts down (exits) Microsoft Agent. 
</blockquote><b>Syntax
</b><blockquote><b>Sub</b> <i>agent_</i><b>Shutdown()</b>
</blockquote><b>Remarks 
</b><blockquote>When the user explicitly chooses Exit on the pop-up menu on the Microsoft Agent taskbar icon and confirms the choice in the warning message box, the server sends this event to all connected clients and then exits. The server also sets the control's <b>Connected</b> property to <b>False</b>. Any subsequent calls you make to the server will fail. You may want to handle this error condition. 
</blockquote>
<P><HR>
<P>
<H4><A NAME="SIZEAGENTCONTROLEVENT"></A>Size Event
</H4><b>Description
</b><blockquote>Occurs when a character's size changes. 
</blockquote><b>Syntax
</b><blockquote><b>Sub</b><i> agent</i><b>_Size</b> <b>(ByVal</b> <i>CharacterID</i>, <b>ByVal</b> <i>Width</i>, <b>ByVal</b> <i>Height</i><b>)</b>
</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Value</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>CharacterID</i></TD>
<TD>Returns the ID of the character that was resized.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><i>Width</i></TD>
<TD>Returns the character frame's new width (in pixels) as an integer.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><i>Height</i></TD>
<TD>Returns the character frame's new height (in pixels) as an integer.</TD>
</TR>

</TABLE></blockquote>
<P><b>Remarks
</b><blockquote>This event occurs when an application changes the size of a character. This event is sent only to the clients of the character (applications that have loaded the character).</blockquote>
<P><b>See Also
</b><blockquote><b><A HREF="#MOVEAGENTCONTROLEVENT">Move</A></b> event
</blockquote>

<P><A HREF="#top"><IMG SRC="art/uparrow.gif"  BORDER="0" WIDTH=14 HEIGHT=10 ALT="uparrow.gif">Back to contents</A>
<H3><A NAME="TOPIC9"></A>The Characters Object
</H3>Your client application can support one or more characters. In addition, you can share a character among several applications. Microsoft Agent defines the <b>Characters</b> object as a collection of characters. To access a character, load the character's data into the <b>Characters</b> collection and specify that that item in the collection uses the methods and properties supported for that character.

<H4>Characters Object Methods
</H4>The <b>Characters</b> object supports methods for accessing, loading, and unloading characters into its collection:
<P>
<b><A HREF="#CHARACTERMETHOD">Character</A></b>,<b> </b><b><A HREF="#LOAD">Load</A></b>, <b><A HREF="#UNLOAD">Unload</A></b>
<H4><A NAME="CHARACTERMETHOD"></A>Character Method
</H4><b>Description
</b><blockquote>Returns a <b>Character</b> object in a <b>Characters</b> collection.
</blockquote><b>Syntax 
</b><blockquote><i>agent</i><b>.Characters.Character "</b><i>CharacterID</i><b>"</b> 
</blockquote><b>Remarks
</b><blockquote>You can use this method to access a <b><A HREF="#CHARACTEROBJECTMETHODS">Character</A></b> object's methods and properties.
</blockquote>
<P><blockquote><b>Note</b> This method may be required for some programming languages that do not support collections. It is not required for VBScript or Visual Basic. For further information on specifying <b>Character</b> methods, see <A HREF="#CHARACTEROBJECTMETHODS">Character Object Methods</A>.
<b>
</b></blockquote>
<P><hr>
<P>
<H4><A NAME="LOAD"></A>Load Method
</H4><b>Description
</b><blockquote>Loads a character into the <b>Characters</b> collection.
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.Characters.Load </b><i><B>"</b></i><i>CharacterID</i><i><B>", </b></i><i>Provider</i>
</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Part</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>CharacterID</i></TD>
<TD>Required. A string value that you will use to refer to the character data to be loaded.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><i>Provider</i></TD>
<TD>Required. A variant data type that must be one of the following:
<P>
<i>Filespec</i>   The local file location of the specified character's definition file. 
<br><i>URL</i>   The HTTP address for the character's definition file.
<br><i>provider</i>   An alternate character definition provider (object).
</TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>The Microsoft Agent Data Provider supports loading character data stored either as a single structured file (.ACS) with character data and animation data together or as separate character data (.ACF) and animation (.AAF) files. Use the single structured .ACS file to load a character that is stored on a local disk or network and accessed using a conventional file protocol (such as UNC pathnames). Use the separate .ACF and .AAF files when you want to load the animation files individually from a remote site where they are accessed using the HTTP protocol. 
</blockquote>
<blockquote>For .ACS files, using the <b>Load</b> method provides access a character's animations. For .ACF files, you also use the <b>Get</b> method to load animation data. The <b>Load</b> method does not support downloading .ACS files from an HTTP site.
<P>Loading a character does not automatically display the character. Use the <b>Show</b> method first to make the character visible.
<P>If you create an object reference and assign it to this method, it returns a <b><A HREF="#REQUEST">Request</A></b> object.  If you use HTTP protocol, assigning a <b>Request</b> object to the <b>Load</b> method and checking its status in the <b>RequestComplete</b> event enables you to prevent your code from failing when the character data fails to load.
<P>The <i>Provider</i> parameter also enables you to specify your own data provider (that would be loaded using a separate control) that can have its own methods for loading animation data. You only need to create a data provider object if you supply character data in special formats. 
<P>To load a character from the Microsoft Agent site,
consult the <A HREF="chars.htm">character data page</A> for the latest information on the location of the character files.
</blockquote>
<P><hr>
<P>
<H4><A NAME="UNLOAD"></A>Unload Method
</H4><b>Description
</b><blockquote>Unloads the character data for the specified character.
</blockquote><b>Syntax 
</b><blockquote><i>agent</i><b>.Characters.Unload "</b><i>CharacterID</i><b>"</b> 
</blockquote><b>Remarks
</b><blockquote>Use this method when you no longer need a character, to free up memory used to store information about the character. If you access the character again, use the <b>Load</b> method.
</blockquote><blockquote>This method does not return a <b><A HREF="#REQUEST">Request</A></b> object.
</blockquote>
<P><hr>
<P>
<H4><A NAME="CHARACTEROBJECTMETHODS"></A>Character Object Methods
</H4>The server also exposes methods for each character in a <b>Characters</b> collection. The following methods are supported:
<P>
<b><A HREF="#ActivateMethod">Activate</a></b>, <b><A HREF="#GESTUREAT">GestureAt</A></b>, <b><A HREF="#GET">Get</A></b>, <b><A HREF="#HIDEMETHOD">Hide</A></b>, <b><A HREF="#INTERRUPT">Interrupt</A></b>, <b><A HREF="#MOVETO">MoveTo</A></b>, <b><A HREF="#PLAY">Play</A></b>, <b><A HREF="#SHOWMETHOD">Show</A></b>, <b><A HREF="#SPEAK">Speak</A></b>, <b><A HREF="#STOP">Stop</A></b>, <b><A HREF="#StopAllMethod">StopAll</a></b>, <b><A HREF="#WAIT">Wait</A></b>
<P>To use a method, reference the character in the collection. In VBScript and Visual Basic, you do this by specifying the ID for a character: 
<PRE> Sub FormLoad

 'Load the genie character into the Characters collection
 Agent1.Characters.Load "Genie", 
        "C:\Program Files\Microsoft Agent\Characters\Genie.acs"


 'Display the character
 Agent1.Characters("Genie").Show
 Agent1.Characters("Genie").Play "Greet"
 Agent1.Characters("Genie").Speak "Hello. " 
 
 End Sub
</PRE>
<P>To simplify the syntax of your code, you can define an object variable and set it to reference a character object in the <b>Characters</b> collection; then you can use your variable to reference methods or properties of the character. The following example demonstrates how you can do this using the Visual Basic Set statement:
<PRE> 'Define a global object variable
 Dim Genie as Object

 Sub FormLoad

 'Load the genie character into the Characters collection
 Agent1.Characters.Load "Genie", 
     "C:\Program Files\Microsoft Agent\Characters\Genie.acs"

 'Create a reference to the character
 Set Genie = Agent1.Characters("Genie")

 'Display the character
 Genie.Show

 'Get the Restpose animation
 Genie.Get "animation", "RestPose"

 'Make the character say Hello
 Genie.Speak "Hello."

 End Sub

</PRE>
<P>In Visual Basic 5.0, you can also create your reference by declaring your variable as a <b>Character </b>object: 
<PRE> Dim Genie as IAgentCtlCharacter

 Sub FormLoad

 'Load the genie character into the Characters collection
 Agent1.Characters.Load "Genie", 
     "C:\Program Files\Microsoft Agent\Characters\Genie.acs"

 'Create a reference to the character
 Set Genie = Agent1.Characters("Genie")

 'Display the character
 Genie.Show

 End Sub
</PRE>
<P>Declaring your object of type <b>IAgentCtlCharacter</b> enables early binding on the object, which results in better performance.
<P>In VBScript, you cannot declare a reference as a particular type. However, you can simply declare the variable reference:
<PRE> &lt;OBJECT
  classid="clsid:F5BE8BD2-7DE6-11D0-91FE-00C04FD701A5"
  CODEBASE = "http://activex.microsoft.com/controls/agent/MSagent.exe#VERSION=1,5,0,0"
  id=AgentCtl&gt;

 &lt;/OBJECT&gt;

 &lt;SCRIPT LANGUAGE = VBScript&gt;

 &lt;!---

 Dim Genie
 
 SUB window_OnLoad
 
 \'Load the character
 AgentCtl.Characters.Load "Genie", _
  "http://agent.microsoft.com/characters/genie/genie.acf"

 'Create an object reference to the character in the collection
 set Genie= AgentCtl.Characters ("Genie")

 'Get the Showing state animation
 Genie.Get "state", "Showing"

 'Display the character
 Genie.Show

 'Get the RestPose animation
 Genie.Get "animation", "RestPose"

 'Make the character say Hello
 Genie.Speak "Hello."

 End Sub

 --&gt;
 
 &lt;/SCRIPT&gt;
</PRE>
<P>Some programming languages do not support collections. However, you can access a <b>Character</b> object's methods with the <b><A HREF="#CHARACTERMETHOD">Character</A></b> method:
<PRE> <i>agent</i>.Characters.Character("<i>CharacterID</i>").<i>method</i>
</PRE>
<P>In addition, you can also create a reference to the <b>Character</b> object to make your script code easier to follow:
<PRE> &lt;OBJECT
  classid = "clsid:F5BE8BD2-7DE6-11D0-91FE-00C04FD701A5"
  CODEBASE = "http://activex.microsoft.com/controls/agent/MSagent.exe#VERSION=1,5,0,0"
  id=AgentCtl&gt;

 &lt;/OBJECT&gt;

 &lt;SCRIPT LANGUAGE="JScript" FOR="window" EVENT="onLoad()"&gt;
 &lt;!--
 
 //Load the character's data
 AgentCtl.Characters.Load ("Genie", _
      "http://agent.microsoft.com/characters/genie/genie.acf"); 

 //Create a reference to this object
 Genie = AgentCtl.Characters.Character("Genie");
 
 //Get the Showing state animation
 Genie.Get("state", "Showing");

 //Display the character
 Genie.Show();

 --&gt;
 &lt;/SCRIPT&gt;

</PRE>
<P><hr>
<P>
<H4><A NAME="ActivateMethod"></A>Activate Method
</H4><b>Description
</b><blockquote>Sets the active client or character. 
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.Characters ("</b><i>CharacterID</i><b>").Activate [</b><i>State</i><b>]</b>
</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Part</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>State</i></TD>
<TD>Optional. You can specify the following values for this parameter:
<P>0&nbsp;&nbsp;Not the active client.
<br>1&nbsp;&nbsp;The active client.
<br>2&nbsp;&nbsp;(Default) The topmost character.
</TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>When multiple characters are visible, only one of the characters receives speech input at a time. Similarly, when multiple client applications share the same character, only one of the clients receives mouse input (for example, Microsoft Agent control click or drag events). The character set to receive mouse and speech input is the topmost character and the client that receives the input is the active client of that character. (The topmost character's window also appears at the top of the character windows z-order.) Typically, the user determines the topmost character by explicitly selecting the character. However, topmost activation also changes when a character is shown or hidden (the character becomes or is no longer topmost, respectively.)
<P>You can also use this method to explicitly manage when your client receives input directed to the character such as when your application itself becomes active. For example, setting <b>State</b> to 2 makes the character topmost and your client receives all mouse and speech input events generated from user interaction with the character. Therefore, it also makes your client the input-active client of the character.
<P>However, you can also set yourself to be the active client for a character without making the character topmost, by setting <b>State</b> to 1. This enables your client to receive input directed to that character when the character becomes topmost. Similarly, you can set your client to not be the active client (not to receive input) when the character becomes topmost, by setting <b>State</b> to 0.
<P>Avoid calling this method directly after a <b>Show</b> method. <b>Show</b> automatically sets the input-active client. When the character is hidden, the <b>Activate</b> call may fail if it gets processed before the <b>Show</b> method completes.
<P>If you call this method to a function, it returns a Boolean value that indicates whether the method succeeded. Attempting to call this method with the <b>State</b> parameter set to 2 when the specified character is hidden will fail. Similarly, if you set <b>State</b> to 0 and your application is the only client, this call fails because a character must always have a topmost client.
<P>
</blockquote>
<PRE>

	Dim Genie as Object

	Sub FormLoad()

	Agent1.Characters.Load "Genie", _
		"C:\Program Files\Microsoft Agent\Characters\Genie.acs"

	Set Genie = Agent1.Characters ("Genie")

	If (Genie. Activate = True) Then
		'I'm active

	Else
		'I must be hidden or something

	End If 
	
	End Sub
</PRE>
<b>See Also
</b><blockquote><b><A HREF="#ACTIVATEINPUT">ActivateInput</a></b> event,  
<b><A HREF="#DEACTIVATEINPUT">DeactivateInput</A></b> event
</blockquote>


<P><hr>
<P>
<H4><A NAME="GESTUREAT"></A>GestureAt Method
</H4><b>Description
</b><blockquote>Plays the gesturing animation for the specified character at the specified location. 
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.Characters ("</b><i>CharacterID</i><b>").GestureAt</b> <i>X,Y</i>
</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Part</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>X,Y</i></TD>
<TD>Required. An integer value that indicates the horizontal (<i>X</i>) screen coordinate and vertical (<i>Y</i>) screen coordinate to which the character will gesture. These coordinates must be specified in pixels.
</TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>The server automatically plays the appropriate animation to gesture toward the specified location. The coordinates are always relative to the screen origin (upper left).
</blockquote><blockquote>If you declare an object reference and set it to this method, it returns a <b>Request</b> object. In addition, if the associated animation has not been loaded on the local machine, the server sets the <b>Request</b> object's <b>Status</b> property to "failed" with an appropriate error number. Therefore, if you are using the HTTP protocol to access character animation data, use the <b>Get</b> method to load the <b>Gesturing</b> state animations before calling the <b>GestureAt</b> method.
</blockquote>
<P><hr>
<P>
<H4><A NAME="GET"></A>Get Method
</H4><b>Description
</b><blockquote>Retrieves specified animation data for the specified character.
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.Characters ("</b><i>CharacterID</i><b>").Get</b> <i>Type</i>, <i>Name</i>, [<i>Queue</i>]
</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Part</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>Type</i></TD>
<TD>Required. A string value that indicates the animation data type to load. 
<P><b>"Animation"</b> A character's animation data. 
<P><b>"State"</b>  A character's state data. 
<P><b>"WaveFile"</b> A character's audio (for spoken output) file. </TD>
</TR>
<TR VALIGN=TOP>
<TD><i>Name</i></TD>
<TD>Required. A string that indicates the name of the animation type.
<P>"<i>name</i>" The name of the animation or state. 
<P>For animations, the name is based on that defined for the character when saved using the Microsoft Agent Character Editor. 
<P>For states, the following values can be used:
<P>"<b>Gesturing</b>"  To get all <b>Gesturing</b> state animations.
<P>"<b>GesturingDown</b>" To get the <b>GesturingDown</b> animation.
<P>"<b>GesturingLeft</b>" To get the <b>GesturingLeft</b> animation.
<P>"<b>GesturingRight</b>" To get the <b>GesturingRight</b> animation.
<P>"<b>GesturingUp</b>"  To get the <b>GesturingUp</b> animation.
<P>"<b>Hiding</b>"  To get the <b>Hiding</b> state animation.
<P>"<b>Hearing</b>"  To get the <b>Hearing</b> state animation.
<P>"<b>Idling</b>"  To get all <b>Idling</b> state animations.
<P>"<b>IdlingLevel1</b>"  To get all <b>IdlingLevel1</b> animations.
<P>"<b>IdlingLevel2</b>"  To get all <b>IdlingLevel2</b> animations.
<P>"<b>IdlingLevel3</b>"  To get all <b>IdlingLevel3</b> animations.
<P>"<b>Listening</b>"  To get the <b>Listening</b> state animation.
<P>"<b>Moving</b>"  To get all <b>Moving</b> state animations.
<P>"<b>MovingDown</b>"  To get the <b>MovingDown</b> animation.
<P>"<b>MovingLeft</b>"  To get the <b>MovingLeft</b> animation.
<P>"<b>MovingRight</b>"  To get the <b>MovingRight</b> animation.
<P>"<b>MovingUp</b>"  To get the <b>MovingUp</b> animation.
<P>"<b>Showing</b>"  To get the <b>Showing</b> state animation.
<P>"<b>Speaking</b>"   To get the <b>Speaking</b> state animation.
<P>You can specify multiple animations and states by separating them with commas. However, you cannot mix types in the same <b>Get</b> statement.
<P>"<i>URL or</i> <i>filespec</i>" &nbsp;&nbsp;The specification for the sound (.WAV or .LWV) file. If the specification is not complete, it is interpreted as being relative to the specification used in the <b>Load</b> method. 
</TD>
</TR>
<TR VALIGN=TOP>
<TD><i>Queue</i></TD>
<TD>Optional. A Boolean expression specifying whether the server queues the <b>Get</b> request. 
<P><b>True</b> (Default) Queues the <b>Get</b> request. Any animation request that follows the <b>Get</b> request (for the same character) waits until the animation data is loaded.
<P><b>False</b>  Does not queue the <b>Get</b> request. 
 </TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>You need to use the <b>Get</b> method only to retrieve animation data using the HTTP protocol.
</blockquote><blockquote>If you declare an object reference and set it to this method, it returns a <b>Request</b> object. If the associated animation fails to load, the server sets the <b>Request</b> object's <b>Status</b> property to "failed" with an appropriate error number.
 You can use the <b>RequestComplete</b> event to check the status and determine what action to take.
<P>Animation or sound data retrieved with the <b>Get</b> method is stored in the browser's cache. Subsequent calls will check the cache, and if the animation data is already there, the control loads the data directly from the cache. Once loaded, the animation or sound data can be played with the <b>Play</b> or <b>Speak</b> methods. 
</blockquote><b>See Also
</b><blockquote><b><A HREF="#LOAD">Load</A></b> method
</blockquote>
<P><hr>
<P>
<H4><A NAME="HIDEMETHOD"></A>Hide Method
</H4><b>Description
</b><blockquote>Hides the specified character. 
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.Characters ("</b><i>CharacterID</i><b>").Hide</b><i> </i>[<i>Fast</i>]
</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Part</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>Fast</i></TD>
<TD>Optional. A Boolean value that indicates whether to skip the animation associated with the character's Hiding state
<b>True&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</b>Does not play the <b>Hiding</b> animation. 
<br><b>False&nbsp;&nbsp;</b>(Default) Plays the <b>Hiding</b> animation. </TD>
</TR>
</TABLE></blockquote>
<P><b>Remarks
</b><blockquote>The server queues the actions of the <b>Hide</b> method in the character's queue, so you can use it to hide the character after a sequence of other animations. You can play the action immediately by using the <b>Stop</b> method before calling this method.
</blockquote><blockquote>If you declare an object reference and set it to this method, it returns a <b><A HREF="#REQUEST">Request</A></b> object. In addition, if the associated <b>Hiding</b> animation has not been loaded and you have not specified the <b>Fast</b> parameter as <b>True</b>, the server sets the <b>Request</b> object <b>Status</b> property to "failed" with an appropriate error number. Therefore, if you are using the HTTP protocol to access character or animation data, use the <b>Get</b> method and specify the <b>Hiding</b> state to load the animation before calling the <b>Hide</b> method.
Hiding a character can also result in triggering the <b><A HREF="#ACTIVATEINPUT">ActivateInput</A></b> event of another client. 
</blockquote>
<P><blockquote><b>Note</b> Hidden characters cannot access the audio channel. The server will pass back a failure status in the <b><A HREF="#REQUESTCOMPLETE">RequestComplete</A></b> event if you generate an animation request and the character is hidden.
<b> 
</b></blockquote>
<P><b>See Also
</b><blockquote><b><A HREF="#SHOWMETHOD">Show</A></b> method
</blockquote>
<P><hr>
<P>
<H4><A NAME="INTERRUPT"></A>Interrupt Method
</H4><b>Description
</b><blockquote>Interrupts the animation for the specified character. 
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.Characters ("</b><i>CharacterID</i><b>").Interrupt </b><i>Request</i>
</blockquote><b>Remarks
</b><blockquote>You can use this to sync up animation between characters. For example, if another character is in a looping animation, this method will stop the loop and move to the next animation in the character's queue. You cannot interrupt a character animation that you are not using (that you have not loaded).
</blockquote><blockquote>To specify the request parameter, you must create a variable and assign the animation request you want to interrupt:
</blockquote>
<PRE> Dim GenieRequest as Object
 Dim RobbyRequest as Object
 Dim Genie as Object
 Dim Robby as Object

 Sub FormLoad()

   MyAgent1.Characters.Load "Genie", _ 
       "C:\Program Files\Microsoft Agent\Characters\Genie.acs"

   MyAgent1.Characters.Load "Robby", _
       "C:\Program Files\Microsoft Agent\Characters\Robby.acs"


   Set Genie = MyAgent1.Characters ("Genie")
   Set Robby = MyAgent1.Characters ("Robby")

   Genie.Show

   Genie.Speak "Just a moment"

   Set GenieRequest = Genie.Play ("Processing")

   Robby.Show
   Robby.Play "confused"
   Robby.Speak "Hey, Genie. What are you doing?"
   Robby.Interrupt GenieRequest

   Genie.Speak "I was just checking on something."

 End Sub
</PRE>
<P><blockquote>
You cannot interrupt the animation of the same character you specify in this method because the server queues the <b>Interrupt</b> method in that character's animation queue. Therefore, you can only use <b>Interrupt</b> to halt the animation of another character you have loaded. 
<P>If you declare an object reference and set it to this method, it returns a <b>Request</b> object.
</blockquote>
<P><blockquote><b>Note</b> <b>Interrupt</b> does not flush the character's queue; it halts the existing animation and moves on to the next animation in the character's queue. To halt and flush a character's queue, use the <b>Stop</b> method.
</blockquote>
<P><b>See Also
</b><blockquote><b><A HREF="#STOP">Stop</A></b> method
</blockquote>
<P><hr>
<P>
<H4><A NAME="MOVETO"></A>MoveTo Method
</H4><b>Description
</b><blockquote>Moves the specified character to the specified location. 
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.Characters ("</b><i>CharacterID</i><b>").MoveTo</b> <i>X,Y, </i>[<i>Speed</i>]
</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Part</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>X,Y</i></TD>
<TD>Required. An integer value that indicates the left edge (<i>X</i>) and top edge (<i>Y</i>) of the animation frame. Express these coordinates in pixels.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><i>Speed</i></TD>
<TD>Optional. A Long integer value specifying in milliseconds how quickly the character's frame moves. The default value is 1000. Specifying zero (0) moves the frame without playing an animation.
</TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>The server automatically plays the appropriate animation assigned to the <b>Moving</b> states. The location of a character is based on the upper left corner of its frame. 
</blockquote><blockquote>If you declare an object variable and set it to this method, it returns a <b>Request</b> object. In addition, if the associated animation has not been loaded on the local machine, the server sets the <b>Request</b> object's <b>Status</b> property to "failed" with an appropriate error number. Therefore, if you are using the HTTP protocol to access character or animation data, use the <b>Get</b> method to load the <b>Moving</b> state animations before calling the <b>MoveTo</b> method.
<P>Even if the animation is not loaded, the server still moves the frame.
</blockquote>
<blockquote><b>Note</b>&nbsp;&nbsp;If you call <b>MoveTo</b> with a non-zero value before the character is shown, it will return a failure status if you assigned it a <b>Request</b> object, because the non-zero value indicates that you are attempting to play an animation when the character is not visible.</blockquote>
<P><hr>
<P>
<H4><A NAME="PLAY"></A>Play Method
</H4><b>Description
</b><blockquote>Plays the specified animation for the specified character.
</blockquote><b>Syntax 
</b><blockquote><i>agent</i><b>.Characters ("</b><i>CharacterID</i><b>").Play</b> "<i>AnimationName</i>" 

</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Part</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>AnimationName</i></TD>
<TD>Required. A string that specifies the name of an animation sequence.
</TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>An animation's name is defined when the character is compiled with the Microsoft Agent Character Editor. Before playing the specified animation, the server attempts to play the <b>Return</b> animation for the previous animation, if one has been assigned.
</blockquote><blockquote>When accessing a character's animations using a conventional file protocol, you can simply use the <b>Play</b> method specifying the name of the animation. However, if you are using the HTTP protocol to access character animation data, use the <b>Get</b> method to load the animation before calling the <b>Play</b> method.
<P>For more information, see the <b><A HREF="#GET">Get</A></b> method.
<P>To simplify your syntax, you can declare an object reference and set it to reference the <b>Character</b> object in the <b>Characters</b> collection and use the reference as part of your <b>Play</b> statements:
</blockquote><PRE>
 Dim Genie 
 Agent1.Characters.Load "Genie", _  
  "http://agent.microsoft.com/characters/genie/genie.acf"

 Set Genie = Agent1.Characters ("Genie")
 
 Genie.Get "state", "Showing"
 Genie.Show

 Genie.Get "animation", "Greet, GreetReturn"
 Genie.Play "Greet"
 Genie.Speak "Hello."
</PRE>
<P><blockquote>If you declare an object reference and set it to this method, it returns a <b><A HREF="#REQUEST">Request</A></b> object. In addition, if you specify an animation that is not loaded or if the character has not been successfully loaded, the server sets the <b>Status</b> property of <b>Request</b> object to "failed" with an appropriate error number. However, if the animation does not exist and the character's data has already been successfully loaded, the server raises an error.
<P>The <b>Play</b> method does not make the character visible. If the character is not visible, the server plays the animation invisibly, and sets the <b>Status</b> property of the <b>Request</b> object. 
</blockquote>
<P><hr>
<P>
<H4><A NAME="SHOWMETHOD"></A>Show Method
</H4><b>Description
</b><blockquote>Makes the specified character visible and plays its associated <b>Showing</b> animation. 
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.Characters</b> <b>("</b><i>CharacterID</i><b>").Show</b> [<i>Fast</i>]
</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Part</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>Fast</i></TD>
<TD>Optional. A Boolean expression specifying whether the server plays the <b>Showing</b> animation. 
<b>True</b> Skips the <b>Showing</b> state animation. 
<b>False</b>  (Default) Does not skip the <b>Showing</b> state animation. </TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>If you declare an object reference and set it to this method, it returns a <b><A HREF="#REQUEST">Request</A></b> object. In addition, if the associated <b>Showing</b> animation has not been loaded and you have not specified the <b>Fast</b> parameter as <b>True</b>, the server sets the <b>Request</b> object's <b>Status</b> property to "failed" with an appropriate error number. Therefore, if you are using the HTTP protocol to access character animation data, use the <b>Get</b> method to load the <b>Showing</b> state animation before calling the <b>Show</b> method.
</blockquote><blockquote>Avoid setting the <b>Fast</b> parameter to <b>True</b> without first playing an animation beforehand; otherwise, the character frame may display with no image. In particular, note that if you call <b>MoveTo</b> when the character is not visible, it does not play any animation. Therefore, if you call the <b>Show</b> method with <b>Fast</b> set to <b>True</b>, no image will display. Similarly, if you call <b>Hide</b> then <b>Show</b> with <b>Fast</b> set to <b>True</b>, there will be no visible image.
</blockquote><b>See Also
</b><blockquote><b><A HREF="#HIDEMETHOD">Hide</A></b> method
</blockquote>
<P><hr>
<P>
<H4><A NAME="SPEAK"></A>Speak Method
</H4><b>Description
</b><blockquote>Speaks the specified text for the specified character. 
</blockquote><b>Syntax 
</b><blockquote><i>agent</i><b>.Characters ("</b><i>CharacterID</i><b>").Speak</b> [<i>Text</i>], [ <i>Url</i>]
</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Part</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>Text</i></TD>
<TD>Optional. A string that specifies what the character says.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><i>Url</i></TD>
<TD>Optional. A string expression specifying the specification for an audio file. The specification can be a file specification or URL.
</TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>Although the <i>Text</i> and <i>Url</i> parameters are optional, one of them must be supplied. To use this method with a character configured to speak only in its word balloon or using a text-to-speech (TTS) engine, simply provide the <i>Text</i> parameter. Include a space between words to define appropriate word breaks in the word balloon, even for languages that do not traditionally include spaces.
<P>You can also include vertical bar characters (|) in the <i>Text</i> parameter to designate alternative strings, so that the server randomly chooses a different string each time it processes the method.
</blockquote><blockquote>Character support of TTS output is defined when the character is compiled using the Microsoft Agent Character Editor. To generate TTS output, a compatible TTS engine must already be installed before calling this method. For further information, see  <A HREF="#SPEECHSUPPORT">Accessing Speech Support for Microsoft Agent</A>.
<P>If you use recorded sound-file output for the character, specify the file's location in the <i>Url</i> parameter. However, if you are using the HTTP protocol to access character or animation data, use the <b>Get</b> method to load the animation before calling the <b>Speak</b> method. When doing so, you still use the <i>Text</i> parameter to specify the words that appear in the character's word balloon. However, if you specify a linguistically enhanced sound file (.LWV) for the <i>Url</i> parameter and do not specify text for the word balloon, the <i>Text</i> parameter uses the text stored in the file. 
<P>You can also vary parameters of the speech output with special tags that you include in the <i>Text</i> parameter. For more information, see <A HREF="tags.htm">Speech Output Tags</A>. If you declare an object reference and set it to this method, it returns a <b><A HREF="#REQUEST">Request</A></b> object. In addition, if the file has not been loaded, the server sets the <b>Request</b> object's <b>Status</b> property to "failed" with an appropriate error code number. 
<P>The <b>Speak</b> method uses the last action played to determine which speaking animation to play. For example, if you preceded the <b>Speak</b> command with a <b>Play</b> "<b>GestureRight</b>", the server will play <b>GestureRight</b> and then the <b>GestureRight</b> speaking animation. 
<P>If you call <b>Speak</b> and the audio channel is busy, the character's audio output will not be heard, but the text will display in the word balloon.
</blockquote>
<P><blockquote><b>Note</b> The word balloon's <b>Enabled</b> property must also be <b>True</b> for text to display.
<P><b>Note</b>	If you are using a character that you did not compile, check the balloon <b>FontName</b> and <b>CharSet</b> properties for the character to determine whether they are appropriate for your locale. You may need to set these values before using the <b>Speak</b> method to ensure appropriate text display within the word balloon. 

</blockquote>


<P><hr>
<P>
<H4><A NAME="STOP"></A>Stop Method
</H4><b>Description
</b><blockquote>Stops the animation for the specified character.
</blockquote><b>Syntax 
</b><blockquote><i>agent</i><b>.Characters ("</b><i>CharacterID</i><b>").Stop</b> [<i>Request</i>]
</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Part</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>Request</i></TD>
<TD>Optional. To use this parameter, set the <b>Request</b> object in your code. 
</TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>
If you don't set the <b>Request</b> parameter, the server stops all animations for the character, including queued <b>Get</b> calls, and clears its animation queue unless the character is currently playing its <b>Hiding</b> or <b>Showing</b> animation. This method does not stop non-queued <b>Get</b> calls. 
<P>To stop a specific animation or <b>Get</b> call, declare an object variable and assign your animation request to that variable:
<PRE>
 Dim MyRequest
 Dim Genie

 Agent1.Characters.Load "Genie", _ 
  "http://agent.microsoft.com/characters/genie/genie.acf"

 Set Genie = Agent1.Characters ("Genie")

 Genie.Get "state", "Showing"
 Genie.Get "animation", "Greet, GreetReturn"

 Genie.Show
 
 'This animation will never play
 Set MyRequest = Genie.Play ("Greet")
 
 Genie.Stop MyRequest
</PRE>
<P>This method will not generate a <b>Request</b> object.
</blockquote>
<b>See Also</b>
<blockquote><b><A HREF="#StopAllMethod">StopAll</a></b> method
</blockquote>
<P><hr>
<P>
<H4><A NAME="StopAllMethod"></A>StopAll Method</H4>
<b>Description
</b><blockquote>Stops all animation requests or specified types of requests for the specified character.
</blockquote><b>Syntax 
</b><blockquote><i>agent</i><b>.Characters ("</b><i>CharacterID</i><b>").StopAll</b> [<i>Type</i>]
</blockquote><blockquote>
<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Part</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>Type</i></TD>
<TD>Optional.  To use this parameter you can use any of the following values. You can also specify multiple types by separating them with commas.
<P>"<b>Get</b>" &nbsp;&nbsp; To stop all queued Get requests.
<br>"<b>NonQueuedGet</b>" &nbsp;&nbsp; To stop all non-queued Get requests (Get 
			method with Queue parameter set to False).
<br>"<b>Move</b>" &nbsp;&nbsp; To stop all queued MoveTo requests.
<br>"<b>Play</b>" &nbsp;&nbsp; To stop all queued Play requests.
<br>"<b>Speak</b>" &nbsp;&nbsp; To stop all queued Speak requests.
 </TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>If you don't set the <b>Type</b> parameter, the server stops all animations for the character, including queued and non-queued <b>Get</b> requests, and clears its animation queue. It also stops playing a character's Hiding or Showing animation. 
This method will not generate a <b>Request</b> object.</blockquote>
<b>See Also</b>
<blockquote><b><A HREF="#STOP">Stop</a></b> method </blockquote>

<P><hr>
<P>
<H4><A NAME="WAIT"></A>Wait Method
</H4><b>Description
</b><blockquote>Causes the animation queue for the specified character to wait until the specified animation request completes.
</blockquote><b>Syntax 
</b><blockquote><i>agent</i><b>.Characters ("</b><i>CharacterID</i><b>").Wait</b> <i>Request</i>
</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Part</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>Request</i></TD>
<TD>A <b>Request</b> object specifying a particular animation. To set this parameter you must assign the <b>Request</b> object variable in your code. </TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>Use this method only when you support multiple (simultaneous) characters and are trying to sequence the interaction of characters (as a single client). (For a single character, each animation request is played sequentially--after the previous request completes.) If you have two characters and you want a character's animation request to wait until the other character's animation completes, set the <b>Wait</b> method to the other character's animation <b><A HREF="#REQUEST">Request</A></b> object, as shown in the following example:
</blockquote><PRE>
 Dim GenieRequest 
 Dim RobbyRequest 
 Dim Genie 
 Dim Robby 

 Sub window_Onload

 Agent1.Characters.Load "Genie", _ 
  "http://agent.microsoft.com/characters/genie/genie.acf"
 Agent1.Characters.Load "Robby", _
  "http://agent.microsoft.com/characters/robby/robby.acf"

 Set Genie = Agent1.Characters("Genie")
 Set Robby = Agent1.Characters("Robby")

 Genie.Get "State", "Showing"
 Robby.Get "State", "Showing"

 Genie.Get "Animation", "Announce, AnnounceReturn, Pleased, _ 
  PleasedReturn"
 
 Robby.Get "Animation", "Confused, ConfusedReturn, Sad, SadReturn"

 Set Genie = Agent1.Characters ("Genie")
 Set Robby = Agent1.Characters ("Robby")


   Genie.MoveTo 100,100
 Genie.Show

 Robby.MoveTo 250,100
 Robby.Show

 Genie.Play "Announce"
 Set GenieRequest = Genie.Speak ("Why did the chicken cross the road?")
 
 Robby.Wait GenieRequest
 Robby.Play "Confused"
 Set RobbyRequest = Robby.Speak ("I don't know. Why did the chicken _
  cross the road?")
 
 Genie.Wait RobbyRequest
 Genie.Play "Pleased"
 Set GenieRequest = Genie.Speak ("To get to the other side.")
 
 Robby.Wait GenieRequest
 Robby.Play "Sad"
 Robby.Speak "I never should have asked."

 End Sub
</PRE>
<P><hr>
<P>
<H4>Character Object Properties
</H4>The <b>Character</b> object exposes the following read-only properties:
<P>
<b><A HREF="#DESCRIPTION">Description</A></b>, <b><A HREF="#ExtraData">ExtraData</A></b>, <b><A HREF="#HasOtherClientsProperty">HasOtherClients</a></b>, <b><A HREF="#HEIGHTPROPCHAROBJ">Height</A></b>, <b><A HREF="#IDLEON">IdleOn</A></b>, <b><A HREF="#LEFTPROPCHAROBJ">Left</A></b>, <b><A HREF="#MoveCauseProperty">MoveCause</a></b>,  <b><A HREF="#NAME">Name</A></b>, <b><A HREF="#PITCH">Pitch</A></b>, <b><A HREF="#SoundEffectsOnProperty">SoundEffectsOn</a></b>, <b><A HREF="#SPEED">Speed</A></b>, <b><A HREF="#TOPPROPCHAROBJ">Top</A></b>, <b><A HREF="#VisibilityCauseProperty">VisibilityCause</a></b>, <b><A HREF="#VISIBLEPROPCHAROBJ">Visible</A></b>, <b><A HREF="#WIDTHPROPCHAROBJ">Width</A></b>
<P>Note that the <b>Height</b>, <b>Left</b>, <b>Top</b>, and <b>Width</b> properties of a character differ from those that may be supported by the programming environment for the placement of the control. The <b>Character</b> properties apply to the visible presentation of a character, not the location of the Microsoft Agent control.
<P>As with <b>Character</b> object methods, you can access a character's properties using the <b>Characters</b> collection, or simplify your syntax by declaring an object variable and setting it to a character in the collection. In the following example, Test1 and Test2 will be set to the same value:
<PRE>
 Dim Genie 
 Dim MyRequest
 
 Sub window_Onload

 Agent.Characters.Load "Genie", _ 
  "http://agent.microsoft.com/characters/genie/genie.acf"

 Set Genie = Agent.Characters("Genie")

 Genie.MoveTo 15,15
 MyRequest = Genie.Show()

 End Sub

 Sub Agent_RequestComplete(ByVal Request)

 If Request = MyRequest Then 
  Test1 = Agent.Characters("Genie").Top
  Test2 = Genie.Top
  MsgBox "Test 1 is " + cstr(Test1) + "and Test 2 is " + cstr(Test2)
 End If

 End Sub
</PRE>
<P>Because the server loads a character asynchronously, ensure that the character has been loaded before querying its properties, for example, using the <b><A HREF="#REQUESTCOMPLETE">RequestComplete</A></b> event. Otherwise, the properties may return incorrect values. 
<H4><A NAME="DESCRIPTION"></A>Description Property
</H4><b>Description
</b><blockquote>Returns or sets a string that specifies the description for the specified character. 
</blockquote><b>Syntax
</b><blockquote><i>agent</i>.
<b>Characters("</b><i>CharacterID</i><b>").Description</b>
</blockquote><b>Remarks
</b><blockquote>The default value for the <b>Description</b> property for a character is defined when the character is compiled with the Microsoft Agent Character Editor. 
</blockquote>
<P><blockquote><b>Note</b> The <b>Description</b> property setting is optional and may not be supplied for all characters.
<b> </b>
</blockquote>
<P><hr>
<P>
<H4><A NAME="ExtraData"></A>ExtraData Property
</H4><b>Description
</b><blockquote>Returns a string that specifies additional data stored as part of the character.  
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.Characters ("</b><i>CharacterID</i><b>").ExtraData</b>
</blockquote>
<P>
<b>Remarks
</b><blockquote>The default value for the ExtraData property for a character is defined when the character is compiled with the Microsoft Agent Character Editor. It cannot be changed or specified at run time.
<P><b>Note</b>&nbsp;&nbsp;The <b>ExtraData</b> property setting is optional and may not be supplied for all characters. 
</blockquote>
<P><hr>
<P>
<H4><A NAME="HasOtherClientsProperty"></A>HasOtherClients Property
</H4><b>Description
</b><blockquote>Returns whether the specified character is in use by other applications. 
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.Characters ("</b><i>CharacterID</i><b>").HasOtherClients </b>[= <i>value</i>]
</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Return</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><b>True</b></TD>
<TD>The character has other clients.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>False</b></TD>
<TD>The character does not have other clients.
</TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>You can use this property to determine whether your application is the only or last client of the character, when more than one application is sharing (has loaded) the same character. 
</blockquote>
<P><hr>
<P>
<H4><A NAME="HEIGHTPROPCHAROBJ"></A>Height Property
</H4><b>Description
</b><blockquote>Returns or sets the height of the specified character's frame. 
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.Characters ("</b><i>CharacterID</i><b>").Height </b>[= <i>value</i>]
</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Part</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>value</i></TD>
<TD>A Long integer that specifies the character's frame height.
</TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>The <b>Height</b> property is always expressed in pixels, relative to screen coordinates (upper left).
</blockquote><blockquote>Even though the character appears in an irregularly shaped region window, the height of the character is based on the external dimensions of the rectangular animation frame used when the character was compiled with the Microsoft Agent Character Editor.
</blockquote>
<P><hr>
<P>
<H4><A NAME="IDLEON"></A>IdleOn Property
</H4><b>Description
</b><blockquote>Returns or sets a Boolean value that determines whether the server manages the specified character's <b>Idling</b> state animations. 
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.Characters ("</b><i>CharacterID</i><b>").IdleOn </b>[=<i>boolean</i>]
</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Part</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><b>True</b></TD>
<TD>Server idle processing is enabled. The character's <b>Idling</b> animations are automatically played.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>False</b></TD>
<TD>Server idle processing is disabled. The character's <b>Idling</b> animations are not automatically played.
</TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>The server automatically sets a time-out after the last animation played for a character. When this timer's interval is complete, the server begins the <b>Idling</b> state for a character, playing its associated <b>Idling</b> animations at regular intervals. The default value for the <b>IdleOn</b> property is <b>True</b>, meaning that the server manages the character's <b>Idling</b> state. If you want to manage the <b>Idling</b> state animations yourself, set the property to <b>False</b>.
</blockquote>
<P><hr>
<P>
<H4><A NAME="LEFTPROPCHAROBJ"></A>Left Property
</H4><b>Description
</b><blockquote>Returns or sets the left edge of the specified character's frame. 
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.Characters ("</b><i>CharacterID</i><b>").Left </b>[= <i>value</i>]
</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Part</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>value</i></TD>
<TD>A Long integer that specifies the left edge of the character's frame.
</TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>The <b>Left</b> property is always expressed in pixels, relative to screen origin (upper left).
</blockquote><blockquote>Even though the character appears in an irregularly shaped region window, the location of the character is based on the external dimensions of the rectangular animation frame used when the character was compiled with the Microsoft Agent Character Editor.
</blockquote>
<P><hr>
<P>
<H4><A NAME="MoveCauseProperty"></A>MoveCause Property
</H4><b>Description
</b><blockquote>Returns an integer value that specifies what caused the character's last move. 
</blockquote><b>Syntax
</b><blockquote><i>agent</i><i><B>.</b></i><b>Characters ("</b><i>CharacterID</i><b>").MoveCause</b>
<P>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Return</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><b>0</b></TD>
<TD>The character has not been moved.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>1</b></TD>
<TD>The user moved the character.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>2</b></TD>
<TD>Your application moved the character.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>3</b></TD>
<TD>Another client application moved the character.
</TD>
</TR>
</TABLE></blockquote>
<P><b>Remarks
</b><blockquote>You can use this property to determine what caused the character to move, when more than one application is sharing (has loaded) the same character. These values are the same as those returned by the <b>Move</b> event.</blockquote>
<b>See Also
</b><blockquote><b><A HREF="#MOVEAGENTCONTROLEVENT">Move</A></b> event, <b><A HREF="#MOVETO">MoveTo</A></b> method
</blockquote>
<P><hr>
<P>
<H4><A NAME="NAME"></A>Name Property
</H4><b>Description
</b><blockquote>Returns or sets a string that specifies the default name of the specified character.
</blockquote><b>Syntax
</b><blockquote><i>agent</i><i><B>.</b></i><b>Characters ("</b><i>CharacterID</i><b>").Name</b>
</blockquote><b>Remarks
</b><blockquote>The default value for the <b>Name</b> property for a character is defined when the character is compiled with the Microsoft Agent Character Editor. The server uses the <b>Name</b> property to automatically create commands for hiding and showing a character.
</blockquote>
<P><hr>
<P>
<H4><A NAME="PITCH"></A>Pitch Property
</H4><b>Description 
</b><blockquote>Returns a Long integer for the specified character's current speech output (TTS) pitch setting.
</blockquote><b>Syntax
</b><blockquote><i>agent</i><i><B>.</b></i><b>Characters ("</b><i>CharacterID</i><b>").Pitch</b>
</blockquote><b>Remarks
</b><blockquote>This property applies only to characters configured for TTS output. If the speech synthesis (TTS) engine is not enabled or installed, or the character does not support TTS output, this property returns zero (0).
</blockquote><blockquote>Although your application cannot write this value, you can include <b>Pit</b> (pitch) tags in your output text that will temporarily increase the pitch for a particular utterance. For further information, see <A HREF="tags.htm">Speech Output Tags</A>.
</blockquote>
<P><hr>
<P>
<H4><A NAME="SoundEffectsOnProperty"></A>SoundEffectsOn Property
</H4><b>Description
</b><blockquote>Returns or sets whether sound effects are enabled for your character.
</blockquote><b>Syntax
</b><blockquote><i>agent</i><i><B>.</b></i><b>Characters ("</b><i>CharacterID</i><b>").SoundEffectsOn</b> [=<i>boolean</i>]
</blockquote>
<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Part</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>boolean</i></TD>
<TD>A Boolean expression specifying whether sound effects are enabled.
<p>True	Sound effects are enabled.
<br>False	Sound effects are disabled.
</TD>
</TR>
</TABLE>
<P>
<b>Remarks
</b><blockquote>This property determines whether sound effects included as a part of a character's animations will play when an animation plays.</blockquote>
<b>See Also</b>
<blockquote><b><A HREF="#SOUNDEFFECTS">SoundEffects</a></b> property</blockquote>
<P><hr>
<P>
<H4><A NAME="SPEED"></A>Speed Property
</H4><b>Description
</b><blockquote>Returns a Long integer that specifies the speed of the character's speech output.
</blockquote><b>Syntax
</b><blockquote><i>agent</i><i><B>.</b></i><b>Characters ("</b><i>CharacterID</i><b>").Speed</b>
</blockquote><b>Remarks
</b><blockquote>This property returns the current speaking output speed setting for the character. For characters using TTS output, the property returns the actual TTS output for the character. If TTS is not enabled or the character does not support TTS output, the setting reflects the user setting for output speed. 
<P>Although your application cannot write this value, you can include <b>Spd</b> (speed) tags in your output text that will temporarily speed up the output for a particular utterance. For further information, see  <A HREF="tags.htm">Speech Output Tags</A>. </blockquote>


<P><hr>
<P>
<H4><A NAME="TOPPROPCHAROBJ"></A>Top Property
</H4><b>Description
</b><blockquote>Returns or sets the top edge of the specified character's frame. 
</blockquote><b>Syntax
</b><blockquote><i>agent</i><i><B>.</b></i><b>Characters ("</b><i>CharacterID</i><b>").Top </b>[= <i>value</i>]
</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Part</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>value</i></TD>
<TD>A Long integer that specifies the character's top edge.
</TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>The <b>Top</b> property is always expressed in pixels, relative to screen origin (upper left).
</blockquote><blockquote>Even though the character appears in an irregularly shaped region window, the location of the character is based on the external dimensions of the rectangular animation frame used when the character was compiled with the Microsoft Agent Character Editor.
<P>Use the <b>MoveTo</b> method to change the character's location.
</blockquote>
<P><hr>
<P>
<H4><A NAME="VisibilityCauseProperty"></A>VisibilityCause Property 
</H4><b>Description
</b><blockquote>Returns an integer value that specifies what caused the character's visible state.  
</blockquote><b>Syntax
</b><blockquote><i>agent</i><i><B>.</b></i><b>Characters ("</b><i>CharacterID</i><b>").VisibilityCause</b>
</blockquote><blockquote>
<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Return</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><b>0</b></TD>
<TD>The character has not been shown.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>1</b></TD>
<TD>The user hid the character.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>2</b></TD>
<TD>The user showed the character.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>3</b></TD>
<TD>Your application hid the character.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>4</b></TD>
<TD>Your application showed the character.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>5</b></TD>
<TD>Another client application hid the character.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>6</b></TD>
<TD>Another client application showed the character.
</TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>To You can use this property to determine what caused the character to move when more than one application is sharing (has loaded) the same character. These values are the same as those returned by the <b>Show</b> and <b>Hide</b> events.
</blockquote>
<b>See Also</b>
<blockquote><b><A HREF="#HIDEEVENT">Hide</a></b> event, 
<b><A HREF="#SHOWEVENT">Show</a></b> event, 
<b><A HREF="#HIDEMETHOD">Hide</a></b> method, 
<b><A HREF="#SHOWMETHOD">Show</a></b> method 
</blockquote>
<P><hr>
<P>
<H4><A NAME="VISIBLEPROPCHAROBJ"></A>Visible Property 
</H4><b>Description
</b><blockquote>Returns a Boolean indicating whether the character is visible. 
</blockquote><b>Syntax
</b><blockquote><i>agent</i><i><B>.</b></i><b>Characters ("</b><i>CharacterID</i><b>").Visible</b>
</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Return</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><b>True</b></TD>
<TD>The character is displayed.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><b>False</b></TD>
<TD>The character is hidden (not visible).
</TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>To make a character visible or hidden, use the <b>Show</b> or <b>Hide</b> methods.
</blockquote>
<P><hr>
<P>
<H4><A NAME="WIDTHPROPCHAROBJ"></A>Width Property
</H4><b>Description
</b><blockquote>Returns or sets the width of the frame for the specified character.
</blockquote><b>Syntax
</b><blockquote><i>agent</i><i><B>.</b></i><b>Characters ("</b><i>CharacterID</i><b>").Width </b>[= <i>value</i>]
</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Part</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>value</i></TD>
<TD>A Long integer that specifies the character's frame width.
</TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>The <b>Width</b> property is always expressed in pixels.
</blockquote><blockquote>Even though the character appears in an irregularly shaped region window, the location of the character is based on the external dimensions of the rectangular animation frame used when the character was compiled with the Microsoft Agent Character Editor.
</blockquote>
<P><hr>
<P>
<H4><A NAME="COMMANDSOBJ"></A>The Commands Collection Object
</H4>The Microsoft Agent server maintains a list of commands that are currently available to the user. This list includes commands that the server defines for general interaction (such as Hide and Microsoft Agent Properties), the list of available (but non-input-active) clients, and the commands defined by the current active client. The first two sets of commands are global commands; that is, they are available at any time, regardless of the input-active client. Client-defined commands are available only when that client is input-active. 
<P>Each client application can define a collection of commands called the <b>Commands</b> collection. To add a command to the collection, use the <b>Add</b> or <b>Insert</b> method. Although you can specify a command's properties with separate statements, for optimum code performance, specify all of a command's properties in the <b>Add</b> or <b>Insert</b> method statement. For each command in the collection, you can determine whether user access to the command appears in the character's pop-up menu, in the Commands Window, in both, or in neither. For example, if you want a command to appear on the pop-up menu for the character, set the command's <b>Caption</b> and <b>Visible</b> properties. To display the command in the Commands Window, set the command's <b>Caption</b> and <b>Voice</b> properties. 
<P>A user can access the individual commands in your <b>Commands</b> collection only when your client application is input-active. Therefore, you'll typically want to set the <b>Caption</b> and <b>Voice</b> properties for the <b>Commands</b> collection object as well as for the commands in the collection, which places an entry for your <b>Commands</b> collection in a character's pop-up menu and in the Commands Window. When the user switches to your client by choosing its entry, the server automatically makes your client input-active and makes the commands in its collection available. This enables the server to present and accept only the commands that apply to the current input-active client's context. It also serves to avoid command-name collisions between clients. 
<P>When a character's pop-up menu displays, changes to the properties of a <b>Commands</b> collection or the commands in its collection do not appear until the user redisplays the menu. However, the Commands Window does display changes as they happen.
<H4>Commands Object Methods
</H4>The server supports the following methods for the <b>Commands</b> collection object:
<P>
<b><A HREF="#ADD">Add</A></b>, <b><A HREF="#COMMANDMETHOD">Command</A></b>, <b><A HREF="#INSERT">Insert</A></b>, <b><A HREF="#REMOVE">Remove</A></b>, <b><A HREF="#REMOVEALL">RemoveAll</A></b>
<H4><A NAME="ADD"></A>Add Method
</H4><b>Description
</b><blockquote>Adds a <b>Command</b> object to the <b>Commands</b> collection.
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.Characters ("</b><i>CharacterID</i><b>").Commands.Add</b> <i>Name</i>, <i>Caption</i>, <i>Voice, </i>_
<BR><i>Enabled, Visible </i>
</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Part</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>Name</i></TD>
<TD>Required. A string value corresponding to the ID you assign for the command.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><i>Caption</i></TD>
<TD>Optional. A string value corresponding to the name that will appear in the character's pop-up menu and in the Commands Window when the client application is input-active. For more information, see the Command object's <b><A HREF="#CAPTION">Caption</A></b> property.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><i>Voice</i></TD>
<TD>Optional. A string value corresponding to the words or phrase to be used by the speech engine for recognizing this command. For more information on formatting alternatives for the string, see the <b>Command</b> object's <b><A HREF="#VOICE">Voice</A></b> property.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><i>Enabled</i></TD>
<TD>Optional. A Boolean value indicating whether the command is enabled. The default value is <b>True</b>. For more information, see the <b>Command</b> object's <b><A HREF="#ENABLED">Enabled</A></b> property. </TD>
</TR>
<TR VALIGN=TOP>
<TD><i>Visible</i></TD>
<TD>Optional. A Boolean value indicating whether the command is visible in the character's pop-up menu for the character when the client application is input-active. The default value is <b>True</b>. For more information, see the <b>Command</b> object's <b><A HREF="#VISIBLEPROPCOM">Visible</A></b> property.
</TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>The value of a <b>Command</b> object's <b>Name</b> property must be unique within its <b>Commands</b> collection. You must remove a <b>Command</b> before you can create a new <b>Command</b> with the same <b>Name</b> property setting. Attempting to create a <b>Command</b> with a <b>Name</b> property that already exists raises an error.
</blockquote><b>See Also
</b><blockquote><b><A HREF="#INSERT">Insert</A></b> method, <b><A HREF="#REMOVE">Remove</A></b> method, <b><A HREF="#REMOVEALL">RemoveAll</A></b> method
</blockquote>
<P><hr>
<P>
<H4><A NAME="COMMANDMETHOD"></A>Command Method
</H4><b>Description
</b><blockquote>Returns a <b>Command</b> object in a <b>Commands</b> collection.  
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.Characters ("</b><i>CharacterID</i><b>").Commands.Command</b> "<i>Name</i>"<i> </i>
</blockquote><b>Remarks
</b><blockquote>You can use this method to access a <b><A HREF="#COMOBJ">Command</A></b> object's properties.
</blockquote>
<P><blockquote><b>Note</b> This method may be required for some programming languages. It is not required for VBScript or Visual Basic. For further information on specifying <b>Command</b> methods, see  <A HREF="#COMOBJPROP">Command Object Properties</A>.
<b>
</b></blockquote>
<P><hr>
<P>
<H4><A NAME="INSERT"></A>Insert Method
</H4><b>Description
</b><blockquote>Inserts a <b>Command</b> object in the <b>Commands</b> collection.
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.Characters ("</b><i>CharacterID</i><b>").Commands.Insert</b> <i>Name</i>, <i>RefName</i>, <i>Before, </i>_<i>
<BR>Caption</i>, <i>Voice, Enabled, Visible </i>
</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Part</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>Name</i></TD>
<TD>Required. A string value corresponding to the ID you assign to the <b>Command</b>.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><i>RefName</i></TD>
<TD>Required. A string value corresponding to the name (ID) of the command just above or below where you want to insert the new command.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><i>Before</i></TD>
<TD>Optional. A Boolean value indicating whether to insert the new command before the command specified by RefName.
<b>True</b> (Default). The new command will be inserted before the referenced command.
<b>False</b> The new command will be inserted after the referenced command.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><i>Caption</i></TD>
<TD>Optional. A string value corresponding to the name that will appear in the character's pop-up menu and in the Commands Window when the client application is input-active. For more information, see the Command object's <b><A HREF="#CAPTION">Caption</A></b><b> </b>property.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><i>Voice</i></TD>
<TD>Optional. A string value corresponding to the words or phrase to be used by the speech engine for recognizing this command. For more information on formatting alternatives for the string, see the <b>Command</b> object's <b><A HREF="#VOICE">Voice</A></b> property.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><i>Enabled</i></TD>
<TD>Optional. A Boolean value indicating whether the command is enabled. The default value is <b>True</b>. For more information, see the <b>Command</b> object's <b><A HREF="#ENABLED">Enabled</A></b> property.
</TD>
</TR>
<TR VALIGN=TOP>
<TD><i>Visible</i></TD>
<TD>Optional. A Boolean value indicating whether the command is visible in the Commands Window when the client application is input-active. The default value is <b>True</b>. For more information, see the <b>Command</b> object's <b><A HREF="#VISIBLEPROPCOM">Visible</A></b> property.
</TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>The value of a <b>Command</b> object's <b>Name</b> property must be unique within its <b>Commands</b> collection. You must remove a <b>Command</b> before you can create a new <b>Command</b> with the same <b>Name</b> property setting. Attempting to create a <b>Command</b> with a <b>Name</b> property that already exists raises an error.

</blockquote><b>See Also
</b><blockquote><b><A HREF="#ADD">Add</A></b> method, <b><A HREF="#REMOVE">Remove</A></b> method, <b><A HREF="#REMOVEALL">RemoveAll</A></b> method
</blockquote>
<P><hr>
<P>
<H4><A NAME="REMOVE"></A>Remove Method
</H4><b>Description
</b><blockquote>Removes a <b>Command</b> object from the <b>Commands</b> collection.  
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.Characters ("</b><i>CharacterID</i><b>").Commands.Remove</b> <i>Name </i>
</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Part</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>Name</i></TD>
<TD>Required. A string value corresponding to the ID for the command.
</TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>When a <b>Command</b> object is removed from the collection, it no longer appears when the character's pop-up menu is displayed or in the Commands Window when your client application is input-active.
</blockquote><b>See Also
</b><blockquote><b><A HREF="#REMOVEALL">RemoveAll</A></b> method
</blockquote>
<P><hr>
<P>
<H4><A NAME="REMOVEALL"></A>RemoveAll Method
</H4><b>Description
</b><blockquote>Removes all <b>Command</b> objects from the <b>Commands</b> collection. 
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.Characters ("</b><i>CharacterID</i><b>").Commands.RemoveAll</b>
</blockquote><b>Remarks
</b><blockquote>When a <b>Command</b> object is removed from the collection, it no longer appears when the character's pop-up menu is displayed or in the Commands Window when your client application is input-active.
</blockquote><b>See Also
</b><blockquote><b><A HREF="#REMOVE">Remove</A></b> method
</blockquote>
<P><hr>
<P>
<H4>Commands Object Properties
</H4>The server supports the following properties for the <b>Commands</b> collection:
<P>
<b><A HREF="#CAPTION">Caption</A></b>, <b><A HREF="#COUNT">Count</A></b>, <b><A HREF="#VISIBLEPROPCOMSOBJ">Visible</A></b>, <b><A HREF="#VOICEPROPCOMSOBJ">Voice</A></b>
<P>An entry for the <b>Commands</b> collection can appear in both the pop-up menu and the Commands Window for a character. To make this entry appear, set its <b>Caption</b> property. The following table summarizes how the properties of a <b>Commands</b> object affect the entry's presentation:
<P>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Caption Property</b></TD>
<TD><b>Voice Property </b></TD>
<TD><b>Visible Property</b></TD>
<TD><b>Appears in 
<BR>Character's Pop-up Menu</b></TD>
<TD><b>Appears in 
<BR>Commands Window</b></TD>
</TR>
<TR VALIGN=TOP>
<TD>Yes</TD>
<TD>Yes</TD>
<TD>True</TD>
<TD>Yes</TD>
<TD>Yes</TD>
</TR>
<TR VALIGN=TOP>
<TD>Yes</TD>
<TD>No</TD>
<TD>True</TD>
<TD>Yes</TD>
<TD>No</TD>
</TR>
<TR VALIGN=TOP>
<TD>Yes</TD>
<TD>Yes</TD>
<TD>False</TD>
<TD>No</TD>
<TD>Yes</TD>
</TR>
<TR VALIGN=TOP>
<TD>Yes</TD>
<TD>No</TD>
<TD>False</TD>
<TD>No</TD>
<TD>No</TD>
</TR>
<TR VALIGN=TOP>
<TD>No</TD>
<TD>Yes</TD>
<TD>True</TD>
<TD>No</TD>
<TD>No*</TD>
</TR>
<TR VALIGN=TOP>
<TD>No</TD>
<TD>Yes</TD>
<TD>False</TD>
<TD>No</TD>
<TD>No*</TD>
</TR>
<TR VALIGN=TOP>
<TD>No</TD>
<TD>No</TD>
<TD>True</TD>
<TD>No</TD>
<TD>No</TD>
</TR>
<TR VALIGN=TOP>
<TD>No</TD>
<TD>No</TD>
<TD>False</TD>
<TD>No</TD>
<TD>No</TD>
</TR>
</TABLE>*The command is still voice-accessible. If the client is input-active and has commands in its collection, "(command undefined)" appears in the Commands Window.
<P>
<H4><A NAME="CAPTION"></A>Caption Property
</H4><b>Description
</b><blockquote>Determines the text displayed for the <b>Commands</b> object in the character's pop-up menu and in the Commands Window.
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.Characters ("</b><i>CharacterID</i><b>").Commands.Caption</b> [=<i>string</i>]
</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Part</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>string</i></TD>
<TD>A string expression that evaluates to the text displayed as the caption.
</TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>If you define commands for a <b>Commands</b> collection that have their <b>Caption</b>, <b>Enabled</b>, and <b>Voice</b> properties set, you would typically also define <b>Caption</b> and <b>Voice</b> settings for the associated <b>Commands</b> collection. If the <b>Commands</b> collection has no <b>Voice</b> or no <b>Caption</b> setting and is currently input-active, but the commands in its collection have <b>Caption</b> and <b>Voice</b> settings, the commands appear in the Commands Window tree view under "(undefined command)" when your client application becomes input-active.
</blockquote>
<P><hr>
<P>
<H4><A NAME="COUNT"></A>Count Property
</H4><b>Description
</b><blockquote>Returns a Long integer (read-only property) that specifies the count of <b>Command</b> objects in the <b>Commands</b> collection.
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.Characters ("</b><i>CharacterID</i><b>").Commands.Count</b> 
</blockquote><b>Remarks
</b><blockquote><b>Count</b> includes only the number of <b>Command</b> objects you define in your <b>Commands</b> collection. Server or other client entries are not included.
</blockquote>
<P><hr>
<P>
<H4><A NAME="VISIBLEPROPCOMSOBJ"></A>Visible Property
</H4><b>Description
</b><blockquote>Returns or sets a value that determines whether your <b>Commands</b> collection's caption appears in the character's pop-up menu. 
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.Characters ("</b><i>CharacterID</i><b>").Commands.Visible </b>[= <i>boolean</i>]
</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Part</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>boolean</i></TD>
<TD>A Boolean expression specifying whether your <b>Commands</b> object appears in the character's pop-up menu.
<b>True </b>The <b>Caption</b> for your <b>Commands</b> collection appears.
<b>False</b> The <b>Caption</b> for your <b>Commands</b> collection does not appear.
</TD>
</TR>
</TABLE></blockquote>
<b>Remarks</b>
<blockquote>This property must be set to <b>True</b> for commands in your collection to appear in the pop-up menu when your application is input-active.</blockquote>

<P><hr>
<P>
<H4><A NAME="VOICEPROPCOMSOBJ"></A>Voice Property
</H4><b>Description
</b><blockquote>Returns or sets the text that is passed to the speech engine (for recognition). 
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.Characters ("</b><i>CharacterID</i><b>").Commands.Voice </b>[= <i>string</i>]
</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Part</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>string</i></TD>
<TD>A string value corresponding to the words or phrase to be used by the speech engine for recognizing this command. </TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>If you do not supply this parameter, the caption for your <b>Commands</b> object will not appear in the Commands Window.
</blockquote><P><blockquote>The string expression you supply can include square bracket characters ([ ]) to indicate optional words and vertical bar characters, (|) to indicate alternative strings. Alternates must be enclosed in parentheses. For example, "(hello [there] | hi)" tells the speech engine to accept "hello," "hello there," or "hi" for the command. Remember to include appropriate spaces between the text that's in brackets or parentheses and the text that's not in brackets or parentheses.
<P>You can also use an ellipsis (&#133;) to support <i>word spotting</i>, that is, telling the speech recognition engine to ignore words spoken in this position in the phrase (sometimes called <i>garbage</i> words). When you use ellipses, the speech engine recognizes only specific words in the string regardless of when spoken with adjacent words or phrases. For example, if you set this property to "&#133;check mail&#133;", the speech recognition engine will match phrases like "please check mail" or "check mail please" to this command. Ellipses can be used anywhere within a string. However, be careful using this technique as voice settings with ellipses may increase the potential of unwanted matches. 
<P>When defining the word grammar for your command, always make sure that you include at least one word that is required; that is, avoid supplying only optional words. In addition, make sure that the word includes only pronounceable words and letters. For numbers, it is better to spell out the word than use the numeric representation. Also, omit any punctuation or symbols. For example, instead of "the #1 $10 pizza!", use "the number one ten dollar pizza". Including non-pronounceable characters or symbols for one command may cause the speech engine to fail to compile the grammar for all your commands. Finally, make your voice parameter as distinct as reasonably possible from other voice commands you define. The greater the similarity between the voice grammar for commands, the more likely the speech engine will make a recognition error. You can also use the confidence scores to better distinguish between two commands that may have similar or similar-sounding voice grammar.

</blockquote>
<P><blockquote><b>Note</b> The operation of this property depends on the state of the server's speech recognition property. For example, if speech recognition is disabled or not installed, this parameter has no effect. If speech recognition is enabled during a session, however, the command will become accessible when its client application is input-active.
</blockquote>
<P><hr>
<P>
<H4><A NAME="COMOBJ"></A>The Command Object
</H4>A <b>Command</b> object is an item in a <b>Commands</b> collection. The server provides the user access to your <b>Command</b> objects when your client application becomes input-active.
<P>To access the property of a <b>Command</b> object, you reference it in its collection using its <b>Name</b> property. In VBScript and Visual Basic you can use the <b>Name</b> property directly:
<PRE><i> agent</i><b>.Characters(</b>"<i>CharacterID</i>"<b>).Commands(</b>"<i>Name</i>"<b>).</b><i>property</i> [= <i>value</i>]
</PRE>
<P>For programming languages that don't support collections, use the <b><A HREF="#COMMANDMETHOD">Command</A></b> method:
<PRE><i> agent</i><b>.Characters(</b>"<i>CharacterID</i>"<b>).Commands.Command(</b>"<i>Name</i>"<b>).</b><i>property</i> [= <i>value</i>]
</PRE>
<P>You can also reference a Command object by creating a reference to it. In Visual Basic, declare an object variable and use the Set statement to create the reference:
<PRE> Dim Cmd1 as Object
 ...
 Set Cmd1 = Agent.Characters("MyCharacterID").Commands("SampleCommand")
 ...
 Cmd1.Enabled = True
</PRE>
<P>In Visual Basic 5.0, you can also declare the object as type <b>IAgentCtlCommand</b> and create the reference. This convention enables early binding, which results in better performance:
<PRE> Dim Cmd1 as IAgentCtlCommand
 ...
 Set Cmd1 = Agent.Characters("MyCharacterID").Commands("SampleCommand")
 ...
 Cmd1.Enabled = True
</PRE>
<P>In VBScript, you can declare a reference as a particular type, but you can still declare the variable and set it to the <b>Command</b> in the collection:
<PRE> Dim Cmd1
 ...
 Set Cmd1 = Agent.Characters("MyCharacterID").Commands("SampleCommand")
 ...
 Cmd1.Enabled = True
</PRE>
<P>A command may appear in either the character's pop-up menu and the Commands Window, or in both. To appear in the pop-up menu it must have a caption and have the <b><A HREF="#VISIBLEPROPCOM">Visible</A></b> property set to <b>True</b>. In addition, its Commands collection object's <b>Visible</b> property must also be set to <b>True</b>. To appear in the Commands Window, a <b>Command</b> must have its <b><A HREF="#CAPTIONPROP">Caption</A></b> and <b><A HREF="#VOICE">Voice</A></b> properties set. Note that a character's pop-up menu entries do not change while the menu displays. If you add or remove commands or change their properties while the character's pop-up menu is displayed, the menu displays those changes whenever the user next displays it. However, the Commands Window dynamically reflects any changes you make.
<P>The following table summarizes how the properties of a <b>Command</b> affect its presentation:
<P>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Caption Property</b></TD>
<TD><b>Voice Property </b></TD>
<TD><b>Visible Property</b></TD>
<TD><b>Enabled Property</b></TD>
<TD><b>Appears in Character's Pop-up Menu</b></TD>
<TD><b>Appears in Commands Window</b></TD>
</TR>
<TR VALIGN=TOP>
<TD>Yes</TD>
<TD>Yes</TD>
<TD>True</TD>
<TD>True</TD>
<TD>Normal</TD>
<TD>Yes</TD>
</TR>
<TR VALIGN=TOP>
<TD>Yes</TD>
<TD>Yes</TD>
<TD>True</TD>
<TD>False</TD>
<TD>Disabled</TD>
<TD>No</TD>
</TR>
<TR VALIGN=TOP>
<TD>Yes</TD>
<TD>Yes</TD>
<TD>False</TD>
<TD>True</TD>
<TD>Does not appear</TD>
<TD>Yes</TD>
</TR>
<TR VALIGN=TOP>
<TD>Yes</TD>
<TD>Yes</TD>
<TD>False</TD>
<TD>False</TD>
<TD>Does not appear</TD>
<TD>No</TD>
</TR>
<TR VALIGN=TOP>
<TD>Yes</TD>
<TD>No</TD>
<TD>True</TD>
<TD>True</TD>
<TD>Normal</TD>
<TD>No</TD>
</TR>
<TR VALIGN=TOP>
<TD>Yes</TD>
<TD>No</TD>
<TD>True</TD>
<TD>False</TD>
<TD>Disabled</TD>
<TD>No</TD>
</TR>
<TR VALIGN=TOP>
<TD>Yes</TD>
<TD>No</TD>
<TD>False</TD>
<TD>True</TD>
<TD>Does not appear</TD>
<TD>No</TD>
</TR>
<TR VALIGN=TOP>
<TD>Yes</TD>
<TD>No</TD>
<TD>False</TD>
<TD>False</TD>
<TD>Does not appear</TD>
<TD>No</TD>
</TR>
<TR VALIGN=TOP>
<TD>No</TD>
<TD>Yes</TD>
<TD>True </TD>
<TD>True</TD>
<TD>Does not appear</TD>
<TD>No*</TD>
</TR>
<TR VALIGN=TOP>
<TD>No</TD>
<TD>Yes</TD>
<TD>True</TD>
<TD>False</TD>
<TD>Does not appear</TD>
<TD>No</TD>
</TR>
<TR VALIGN=TOP>
<TD>No</TD>
<TD>Yes</TD>
<TD>False</TD>
<TD>True</TD>
<TD>Does not appear</TD>
<TD>No*</TD>
</TR>
<TR VALIGN=TOP>
<TD>No</TD>
<TD>Yes</TD>
<TD>False</TD>
<TD>False</TD>
<TD>Does not appear</TD>
<TD>No</TD>
</TR>
<TR VALIGN=TOP>
<TD>No</TD>
<TD>No</TD>
<TD>True</TD>
<TD>True</TD>
<TD>Does not appear</TD>
<TD>No</TD>
</TR>
<TR VALIGN=TOP>
<TD>No</TD>
<TD>No</TD>
<TD>True</TD>
<TD>False</TD>
<TD>Does not appear</TD>
<TD>No</TD>
</TR>
<TR VALIGN=TOP>
<TD>No</TD>
<TD>No</TD>
<TD>False</TD>
<TD>True</TD>
<TD>Does not appear</TD>
<TD>No</TD>
</TR>
<TR VALIGN=TOP>
<TD>No</TD>
<TD>No</TD>
<TD>False</TD>
<TD>False</TD>
<TD>Does not appear</TD>
<TD>No</TD>
</TR>
</TABLE>*The command is still voice-accessible.
<P>Generally, if you define commands with <b>Voice</b> settings, you also define <b>Caption</b> and <b>Voice</b> settings for its associated <b>Commands</b> collection. If a <b>Commands</b> collection has no <b>Voice</b> or no <b>Caption</b> setting and is currently input-active, but its <b>Command </b>objects do have <b>Caption</b> and <b>Voice</b> settings and their <b>Enabled</b> properties are <b>True</b>, the <b>Command</b> objects appear in the Commands Window tree view under "(undefined command)" when your client application becomes input-active. 
<P>When the server receives input for one of your commands, it sends a <b>Command</b> event, and passes back the name of the <b>Command</b> as an attribute of the <b>UserInput</b> object. You can then use conditional statements to match and process the <b>Command</b>.
<H4><A NAME="COMOBJPROP"></A>Command Object Properties
</H4>The following <b>Command</b> properties are supported:
<P>
<b><A HREF="#CAPTIONPROP">Caption</A></b>, <b><A HREF="#CONFIDENCE">Confidence</A></b>, <b><A HREF="#CONFIDENCETEXT">ConfidenceText</A></b>, <b><A HREF="#ENABLED">Enabled</A></b>, <b><A HREF="#VISIBLEPROPCOM">Visible</A></b>, <b><A HREF="#VOICE">Voice</A></b>
<H4><A NAME="CAPTIONPROP"></A>Caption Property
</H4><b>Description
</b><blockquote>Determines the text displayed for a <b>Command</b> in the specified character's pop-up menu and the Commands Window.
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.Characters ("</b><i>CharacterID</i><b>").Commands("</b><i>name</i><b>").Caption </b>[= <i>string</i>]
</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Part</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>string</i></TD>
<TD>A string expression that evaluates to the text displayed as the caption for the <b>Command</b>.
</TD>
</TR>
</TABLE></blockquote>

<P><hr>
<P>
<H4><A NAME="CONFIDENCE"></A>Confidence Property
</H4><b>Description
</b><blockquote>Returns or sets whether the client's <b>ConfidenceText</b> appears in the Listening Tip.
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.Characters ("</b><i>CharacterID</i><b>").Commands("</b><i>name</i><b>")</b>.
<b>Confidence </b>[= <i>number</i>]
</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Part</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>number</i></TD>
<TD>A numeric expression that evaluates to a Long integer that identifies confidence value for the <b>Command</b>.
</TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>If the returned confidence value of the best match (<b>UserInput.Confidence</b>) does not exceed value you set for the <b>Confidence</b> property, the text supplied in <b>ConfidenceText</b> is displayed in the Listening Tip.
</blockquote>
<P><hr>
<P>
<H4><A NAME="CONFIDENCETEXT"></A>ConfidenceText Property
</H4><b>Description
</b><blockquote>Returns or sets the client's <b>ConfidenceText</b> that appears in the Listening Tip.
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.Characters ("</b><i>CharacterID</i><b>").Commands("</b><i>name</i><b>")</b>.
<b>ConfidenceText </b>[= <i>string</i>]
</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Part</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>string</i></TD>
<TD>A string expression that evaluates to the text for the <b>ConfidenceText</b> for the <b>Command</b>.
</TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>When the returned confidence value of the best match (<b>UserInput.Confidence</b>) does not exceed the <b>Confidence</b> setting, the server displays the text supplied in <b>ConfidenceText</b> in the Listening Tip.
</blockquote>
<P><hr>
<P>
<H4><A NAME="ENABLED"></A>Enabled Property
</H4><b>Description
</b><blockquote>Returns or sets whether the <b>Command</b> is enabled in the specified character's pop-up menu. 
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.Characters ("</b><i>CharacterID</i><b>").Commands("</b><i>name</i><b>").Enabled </b>[= <i>boolean</i>]
</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Part</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>boolean</i></TD>
<TD>A Boolean expression specifying whether the <b>Command</b> is enabled.
<b>True </b>The <b>Command</b> is enabled.
<b>False</b> The <b>Command</b> is disabled.
</TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>If the <b>Enabled</b> property is set to <b>True</b>, the <b>Command</b> object's caption appears as normal text in the character's pop-up menu when the client application is input-active. If the <b>Enabled </b>property is <b>False</b>, the caption appears as unavailable (disabled) text. A disabled <b>Command</b> is also not accessible for voice input.
</blockquote>
<P><hr>
<P>
<H4><A NAME="VISIBLEPROPCOM"></A>Visible Property
</H4><b>Description
</b><blockquote>Returns or sets whether the <b>Command</b> is visible in the character's pop-up menu.
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.Characters ("</b><i>CharacterID</i><b>").Commands("</b><i>name</i><b>").Visible</b> [= <i>boolean</i>]

</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Part</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>boolean</i></TD>
<TD>A Boolean expression specifying whether the <b>Command</b>'s caption appears in the character's pop-up menu.
<b>True</b> (Default) The caption appears.
<b>False</b> The caption does not appear.
</TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>Set this property to <b>False</b> when you want to include voice input for your own interfaces without having them appear in the pop-up menu for the character. If you set a <b>Command </b>object's <b>Caption</b> property to the empty string (""), the caption text will not appear in the pop-up menu (for example, as a blank line), regardless of its <b>Visible</b> property setting.
</blockquote><blockquote>The <b>Visible</b> property setting of a <b>Command</b> object's parent <b>Commands</b> collection does not affect the <b>Visible</b> property setting of the <b>Command</b>.
</blockquote>
<P><hr>
<P>
<H4><A NAME="VOICE"></A>Voice Property
</H4><b>Description
</b><blockquote>Returns or sets the text that is passed to the speech engine grammar (for recognition) for matching this <b>Command</b> for the character. 
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.Characters ("</b><i>CharacterID</i><b>").Commands ("</b><i>name</i><b>").Voice </b>[= <i>string</i>]
</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Part</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>string</i></TD>
<TD>A string value corresponding to the words or phrase to be used by the speech engine for recognizing this <b>Command</b>. </TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>If you do not supply this parameter, the caption for your <b>Commands</b> object will not appear in the Commands Window. If you specify a <b>Voice</b> parameter but not a <b>Caption</b>, the command will not appear in the Commands Window, but it will be voice-accessible when the client application becomes input-active.
</blockquote><blockquote>Your string expression can include square bracket characters ([ ]) to indicate optional words and vertical bar characters (|) to indicate alternative strings. Alternates must be enclosed in parentheses. For example, "(hello [there] | hi)" tells the speech engine to accept "hello," "hello there," or "hi" for the command. Remember to include appropriate spaces between the text that's in brackets or parentheses and the text that's not in brackets or parentheses.
<P>You can also use an ellipsis (&#133;) to support <i>word spotting</i>, that is, telling the speech recognition engine to ignore words spoken in this position in the phrase (sometimes called <i>garbage</i> words). Therefore, the speech engine recognizes only specific words in the string regardless of when spoken with adjacent words or phrases. For example, if you set this property to "&#133;check mail&#133;", the speech recognition engine will match phrases like "please check mail" or "check mail please" to this command. Ellipses can be used anywhere within a string. However, be careful using this technique as it may increase the potential of unwanted matches.
<P>When defining the word grammar for your command, always make sure that you include at least one word that is required; that is, avoid supplying only optional words. In addition, make sure that the word includes only pronounceable words and letters. For numbers, it is better to spell out the word rather than using the numeric representation. Also, omit any punctuation or symbols. For example, instead of "the #1 $10 pizza!", use "the number one ten dollar pizza". Including non-pronounceable characters or symbols for one command may cause the speech engine to fail to compile the grammar for all your commands. Finally, make your voice parameter as distinct as reasonably possible from other voice commands you define. The greater the similarity between the voice grammar for commands, the more likely the speech engine will make a recognition error. You can also use the confidence scores to better distinguish between two commands that may have similar or similar-sounding voice grammar.
</blockquote>
<P><blockquote><b>Note</b> The operation of this property depends on the state of the server's speech recognition property. For example, if speech recognition is disabled or not installed, this property has no effect.
</blockquote>
<P><hr>
<P>
<H4>The Balloon Object
</H4>Microsoft Agent supports textual captioning of spoken output using a cartoon word balloon. A character's initial word balloon window defaults are defined and compiled in the Microsoft Agent Character Editor. Once running, the word balloon's <b>Enabled</b> and <b>Font</b> properties may be overridden by the user. If a user changes the word balloon's properties, they affect all characters. You can access the properties for a character's word balloon through the <b>Balloon</b> object, which is a child of the <b>Characters</b> collection.
<P>The <b>Balloon</b> object supports the following properties:
<P><b><A HREF="#BACKCOLOR">BackColor</A></b>, <b><A HREF="#BORDERCOLOR">BorderColor</A></b>, <b><A HREF="#CharSetProperty">CharSet</A></b>, <b><A HREF="#CHARSPERLINE">CharsPerLine</A></b>, <b><A HREF="#ENABLEDPROP">Enabled</A></b>, <b><A HREF="#FONTNAME">FontName</A></b>, <b><A HREF="#FONTBOLD">FontBold</A></b>, <b><A HREF="#FONTITALIC">FontItalic</A></b>, <b><A HREF="#FONTSIZE">FontSize</A></b>, <b><A HREF="#FONTSTRIKETHRU">FontStrikeThru</A></b>, <b><A HREF="#FONTUNDERLINE">FontUnderline</a></b>, <b><A HREF="#FORECOLOR">ForeColor</A></b>, <b><A HREF="#NUMBEROFLINES">NumberOfLines</A></b>, <b><A HREF="#VisibleBallObjProp">Visible</A></b> 
<H4><A NAME="BACKCOLOR"></A>BackColor Property
</H4><b>Description
</b><blockquote>Returns the background color currently displayed in the word balloon window for the specified character.
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.Characters ("</b><i>CharacterID</i><b>").Balloon.BackColor</b>
</blockquote><b>Remarks
</b><blockquote>The valid range for a normal RGB color is 0 to 16,777,215 (&amp;HFFFFFF). The high byte of a number in this range equals 0; the lower 3 bytes, from least to most significant byte, determine the amount of red, green, and blue, respectively. The red, green, and blue components are each represented by a number between 0 and 255 (&amp;HFF).
</blockquote>
<P><hr>
<P>
<H4><A NAME="BORDERCOLOR"></A>BorderColor Property
</H4><b>Description
</b><blockquote>Returns the border color currently displayed for the word balloon window for the specified character.
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.Characters ("</b><i>CharacterID</i><b>").Balloon.BorderColor</b>
</blockquote><b>Remarks
</b><blockquote>The valid range for a normal RGB color is 0 to 16,777,215 (&amp;HFFFFFF). The high byte of a number in this range equals 0; the lower 3 bytes, from least to most significant byte, determine the amount of red, green, and blue, respectively. The red, green, and blue components are each represented by a number between 0 and 255 (&amp;HFF).
</blockquote>
<P><hr>
<P>
<H4><A NAME="CharSetProperty"></A>CharSet Property
</H4><b>Description
</b><blockquote>Returns or sets the character set used for the font displayed in the specified character's word balloon.
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.Characters ("</b><i>CharacterID</i><b>").Balloon.CharSet </b>= [ <i>value</i>]
</blockquote>
<blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Part</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>value</i></TD>
<TD>A integer value that specifies the character set used by the font. The following are some common settings for value:
<P>0	Standard Windows&reg; characters (ANSI).
<br>1 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  	Default character set.
<br>2 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  	The symbol character set.
<br>128 &nbsp;&nbsp; 	Double-byte character set (DBCS) unique to the Japanese version of Windows.
<br>129 &nbsp;&nbsp; 	Double-byte character set (DBCS) unique to the Korean version of Windows.
<br>134 &nbsp;&nbsp; 	Double-byte character set (DBCS) unique to the Simplified Chinese version of 	Windows.
<br>136 &nbsp;&nbsp; 	Double-byte character set (DBCS) unique to the Traditional Chinese version of 	Windows.
<br>255 &nbsp;&nbsp; 	Extended characters normally displayed by DOS applications.
<P>For other character set values, consult the Microsoft Win32&reg; documentation.
</TD>
</TR>
</TABLE></blockquote>
<P><b>Remarks
</b><blockquote>The default value for the character set of a character's word balloon is set in the Microsoft Agent Character Editor. In addition, the user can override the character-set settings for all characters in the Microsoft Agent Property Sheet.
<P><b>Note</b>	If you are using a character that you did not compile, check the <b>FontName</b> and <b>CharSet</b> properties for the character to determine whether they are appropriate for your locale. You may need to set these values before using the <b>Speak</b> method to ensure appropriate text display within the word balloon. 
</blockquote>
<b>See Also</b>
<blockquote><b><A HREF="#FONTNAME">FontName</a></b> property</blockquote>

<P><hr>
<P>
<H4><A NAME="CHARSPERLINE"></A>CharsPerLine Property
</H4><b>Description
</b><blockquote>Returns the characters per line supported for the word balloon for the specified character.
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.Characters ("</b><i>CharacterID</i><b>").Balloon.CharsPerLine </b>
</blockquote><b>Remarks
</b><blockquote>The <b>CharsPerLine</b> property returns the average number of characters (letters) being displayed in the word balloon as a Long integer value.
</blockquote>
<P><hr>
<P>
<H4><A NAME="ENABLEDPROP"></A>Enabled Property
</H4><b>Description
</b><blockquote>Returns whether the word balloon is enabled for the specified character.
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.Characters ("</b><i>CharacterID</i><b>").Balloon.Enabled </b>
</blockquote><b>Remarks
</b><blockquote>The <b>Enabled</b> property returns a Boolean value specifying whether the balloon is enabled by the user. <b>True</b> indicates the <b>Balloon</b> is enabled. <b>False</b> indicates it is not enabled (displayed). 
</blockquote><blockquote>The word balloon can also be disabled as part of a character's definition when the character is compiled in the Microsoft Agent Character Editor. If a character is defined to not support the word balloon, this property will always be <b>False</b> for the character.
</blockquote>
<P><hr>
<P>
<H4><A NAME="FONTNAME"></A>FontName Property
</H4><b>Description
</b><blockquote>Returns or sets the font used in the word balloon for the specified character.
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.Characters ("</b><i>CharacterID</i><b>").Balloon.FontName </b> [= <i>font</i>]
</blockquote>
<blockquote>
<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Part</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>font</i></TD>
<TD>A string value corresponding to the font's name. 
</TD>
</TR>
</TABLE></blockquote>
<P><b>Remarks
</b><blockquote>The <b>FontName</b> property defines the font used to display text in the word balloon window as a string. The default value for the font settings of a character's word balloon are set in the Microsoft Agent Character Editor. In addition, the user can override font settings for all characters in the Microsoft Agent Property Sheet.
<P><b>Note</b>	If you are using a character that you did not compile, check the <b>FontName</b> and <b>CharSet</b> properties for the character to determine whether they are appropriate for your locale. You may need to set these values before using the <b>Speak</b> method to ensure appropriate text display within the word balloon.
</blockquote>
<b>See Also</b>
<blockquote><b><A HREF="#CharSetProperty">CharSet</a></b> property</blockquote>
<P><hr>
<P>
<H4><A NAME="FONTBOLD"></A>FontBold Property
</H4><b>Description
</b><blockquote>Returns the font style currently displayed in the word balloon window for the specified character.
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.Characters ("</b><i>CharacterID</i><b>").Balloon.FontBold</b>

</blockquote><b>Remarks
</b><blockquote>The <b>FontBold</b> property returns a Boolean value specifying whether the font is bold. <b>True</b> indicates the font is bold. <b>False</b> indicates the font is not bold.
<P>The default value for the font settings of a character's word balloon are set in the Microsoft Agent Character Editor. In addition, the user can override font settings for all characters in the Microsoft Agent Property Sheet.
</blockquote>
<P><hr>
<P>
<H4><A NAME="FONTITALIC"></A>FontItalic Property
</H4><b>Description
</b><blockquote>Returns the font style currently displayed in the word balloon window for the specified character.
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.Characters ("</b><i>CharacterID</i><b>").Balloon.FontItalic</b>

</blockquote><b>Remarks
</b><blockquote>The <b>FontItalic</b> property returns a Boolean value specifying whether the font is italic. <b>True</b> indicates the font is italic. <b>False</b> indicates the font is not italic.
<P>The default value for the font settings of a character's word balloon are set in the Microsoft Agent Character Editor. In addition, the user can override font settings for all characters in the Microsoft Agent Property Sheet.
</blockquote>
<P><hr>
<P>
<H4><A NAME="FONTSIZE"></A>FontSize Property
</H4><b>Description
</b><blockquote>Returns or sets the font size supported for the word balloon for the specified character.
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.Characters ("</b><i>CharacterID</i><b>").Balloon.FontSize</b> [=<i> points</i>]
</blockquote>
<blockquote>
<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Part</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>points</i></TD>
<TD>A Long integer value specifying the font size in points. 
</TD>
</TR>
</TABLE></blockquote>
<P><b>Remarks
</b><blockquote>The <b>FontSize</b> property returns a Long integer value specifying the current font size in points.
The maximum value for <b>FontSize</b> is 2160 points.
<P>The default value for the font settings of a character's word balloon are set in the Microsoft Agent Character Editor. In addition, the user can override font settings for all characters in the Microsoft Agent Property Sheet.
</blockquote>
<P><hr>
<P>
<H4><A NAME="FONTSTRIKETHRU"></A>FontStrikeThru Property
</H4><b>Description
</b><blockquote>Returns the font style currently displayed in the word balloon window for the specified character.
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.Characters ("</b><i>CharacterID</i><b>").Balloon.FontStrikeThru</b>

</blockquote><b>Remarks
</b><blockquote>The <b>FontStrikeThru</b> property returns a Boolean value specifying whether the font uses the strikethrough effect. <b>True</b> indicates the font uses the strikethrough effect. <b>False</b> indicates the font does not use the strikethrough effect.
<P>The default value for the font settings of a character's word balloon are set in the Microsoft Agent Character Editor. In addition, the user can override font settings for all characters in the Microsoft Agent Property Sheet.
</blockquote>
<P><hr>
<P>
<H4><A NAME="FONTUNDERLINE"></A>FontUnderline Property
</H4><b>Description
</b><blockquote>Returns the font style currently displayed in the word balloon window for the specified character.
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.Characters ("</b><i>CharacterID</i><b>").Balloon.FontUnderline</b>

</blockquote><b>Remarks
</b><blockquote>The <b>FontUnderline</b> property returns a Boolean value specifying whether the font is underlined. <b>True</b> indicates the font is underlined. <b>False</b> indicates the font is not underlined.
<P>The default value for the font settings of a character's word balloon are set in the Microsoft Agent Character Editor. In addition, the user can override font settings for all characters in the Microsoft Agent Property Sheet.
</blockquote>
<P><hr>
<P>
<H4><A NAME="FORECOLOR"></A>ForeColor Property
</H4><b>Description
</b><blockquote>Returns the foreground color currently displayed in the word balloon window for the specified character.
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.Characters ("</b><i>CharacterID</i><b>").Balloon.ForeColor</b>

</blockquote><b>Remarks
</b><blockquote>The <b>ForeColor</b> property returns a value that specifies the color of text in the word balloon. The valid range for a normal RGB color is 0 to 16,777,215 (&amp;HFFFFFF). The high byte of a number in this range equals 0; the lower 3 bytes, from least to most significant byte, determine the amount of red, green, and blue, respectively. The red, green, and blue components are each represented by a number between 0 and 255 (&amp;HFF).
</blockquote>
<P><hr>
<P>
<H4><A NAME="NUMBEROFLINES"></A>NumberOfLines Property
</H4><b>Description
</b><blockquote>Returns the number of lines supported for the word balloon for the specified character.
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.Characters ("</b><i>CharacterID</i><b>").Balloon.NumberOfLines </b>
</blockquote><b>Remarks
</b><blockquote>The <b>NumberOfLines</b> property returns the number of lines of text as a Long integer value. 
</blockquote>
<P><hr>
<P>
<H4><A NAME="VisibleBallObjProp"></A>Visible Property
</H4><b>Description
</b><blockquote>Returns or sets the visible setting for the word balloon for the specified character.
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.Characters ("</b><i>CharacterID</i><b>").Balloon.Visible </b>[=<i>boolean</i>]
</blockquote>
<blockquote>
<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Part</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>boolean</i></TD>
<TD>A Boolean expression specifying whether the word balloon is visible.
<P><b>True</b>	The balloon is visible.
<br><b>False</b>	The balloon is hidden.
</TD>
</TR>
</TABLE></blockquote>
<P><b>Remarks
</b><blockquote>If you attempt to set this property while the character is speaking, moving, or being dragged, the property setting does not take effect until the preceding operation is completed. Calling the <b>Speak</b> method automatically makes the balloon visible, setting the <b>Visible</b> property to <b>True</b>. If the character's balloon AutoHide property is enabled, the balloon is automatically hidden after the output text is spoken. Clicking or dragging a character that is not currently speaking also automatically hides the balloon even if its AutoHide property is disabled. (A character's word-balloon AutoHide property can only be set in the Microsoft Agent Character Editor. The property is not exposed in the API.)</blockquote>
<P><A HREF="#top"><IMG SRC="art/uparrow.gif"  BORDER="0" WIDTH=14 HEIGHT=10 ALT="uparrow.gif">Back to contents</A>
<P>
<H3><A NAME="TOPIC10"></A>The AudioOutput Object
</H3>The <b>AudioOutput</b> object provides access to audio output properties maintained by the server. The properties are read-only, but the user can change them in the Microsoft Agent Property Sheet.
<P><b><A HREF="#ENABLEDPROPAUDIO">Enabled</A></b>, <b><A HREF="#SOUNDEFFECTS">SoundEffects</A></b>
<H4><A NAME="ENABLEDPROPAUDIO"></A>Enabled Property
</H4><b>Description 
</b><blockquote>Returns a Boolean indicating whether audio (spoken) output is enabled.
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.AudioOutput.Enabled</b>
</blockquote><b>Remarks
</b><blockquote>When the <b>Enabled</b> property returns <b>True</b>, the <b>Speak</b> method produces audio output. When it returns <b>False</b>, it means that speech output is not installed or has been disabled by the user. Only the user can set this property value.
</blockquote>
<P><hr>
<P>
<H4><A NAME="SOUNDEFFECTS"></A>SoundEffects Property
</H4><b>Description 
</b><blockquote>Returns a Boolean indicating whether sound effects (.WAV) files configured as part of a character's actions will play.
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.AudioOutput.SoundEffects</b>
</blockquote><b>Remarks
</b><blockquote>When the <b>SoundEffects</b> property returns <b>True</b>, sound effects included in a character's definition will be played. When <b>False</b>, the sound effects will not be played. Only the user can set this property value.
</blockquote>
<P><A HREF="#top"><IMG SRC="art/uparrow.gif"  BORDER="0" WIDTH=14 HEIGHT=10 ALT="uparrow.gif">Back to contents</A>
<P>
<H3><A NAME="TOPIC11"></A>The SpeechInput Object
</H3>The <b>SpeechInput</b> object provides access to the speech input properties maintained by the server. The properties are read-only for client applications, but the user can change them in the Microsoft Agent Property Sheet. The server returns values only if a compatible speech engine has been installed and is enabled. 
<H4>SpeechInput Properties
</H4>If a speech recognition engine is installed and enabled, accessing these properties will start the speech engine:
<P><b><A HREF="#ENABLEDPROPSPEECH">Enabled</A></b>, <b><A HREF="#ENGINE">Engine</A></b>, <b><A HREF="#HOTKEY">HotKey</A></b>, <b><A HREF="#INSTALLED">Installed</A></b>, <b><A HREF="#LANGUAGE">Language</A></b>, <b><A HREF="#LISTENINGTIP">ListeningTip</A></b>
<H4><A NAME="ENABLEDPROPSPEECH"></A>Enabled Property
</H4><b>Description 
</b><blockquote>Returns a Boolean value indicating whether speech input is enabled.
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.SpeechInput.Enabled</b>
</blockquote><b>Remarks
</b><blockquote>The <b>Enabled</b> property reflects the state of the speech recognition engine set in the <b>Engine</b> property. Values for other <b>SpeechInput</b> properties do not change when <b>Enabled</b> is set to <b>False</b>. Querying this property raises an error if no speech engine has been installed.
</blockquote>
<P><blockquote><b>Note</b> The user can override this property.
</blockquote>
<P><hr>
<P>
<H4><A NAME="ENGINE"></A>Engine Property
</H4><b>Description 
</b><blockquote>Returns or sets the speech recognition engine that is currently selected for input. 
</blockquote><b>Syntax
</b><blockquote><i>agent</i><b>.SpeechInput.Engine </b>[=<i>modeID</i>]
</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Part</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>modeID</i></TD>
<TD>A string expression specifying the mode ID of the speech engine.
</TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>The <b>Engine</b> property takes a string value specifying the mode ID of the speech engine. Querying this property raises an error if <b>Installed</b> or <b>Enabled</b> is <b>False</b>.
</blockquote>
<P><blockquote><b>Note</b> The user can override this property.
</blockquote>
<P><hr>
<P>
<H4><A NAME="HOTKEY"></A>HotKey Property
</H4><b>Description
</b><blockquote>Returns a string that specifies the user's current setting for the push-to-talk hot key.
</blockquote><b>Syntax 
</b><blockquote><i>agent</i><b>.SpeechInput.HotKey</b>
</blockquote><b>Remarks
</b><blockquote>Querying this property raises an error if <b>Installed</b> or <b>Enabled</b> is <b>False</b>.
</blockquote>
<P><hr>
<P>
<H4><A NAME="INSTALLED"></A>Installed Property
</H4><b>Description
</b><blockquote>Returns a Boolean that indicates whether a compatible speech engine is installed. 
</blockquote><b>Syntax 
</b><blockquote><i>agent</i><b>.SpeechInput.Installed</b>
</blockquote><b>Remarks
</b><blockquote>If no compatible speech engine has been installed, this property returns <b>False</b>. However, querying any other <b>SpeechInput</b> properties raises an error. Therefore, check this property before checking the values of the <b>SpeechInput</b> or <b>CommandsWindow</b> objects.
<b>
</b></blockquote>
<P><hr>
<P>
<H4><A NAME="LANGUAGE"></A>Language Property
</H4><b>Description
</b><blockquote>Returns a string that specifies what language is configured for speech input.
</blockquote><b>Syntax 
</b><blockquote><i>agent</i><b>.SpeechInput.Language</b>
</blockquote><b>Remarks
</b><blockquote>This property value is set based on the selected speech recognition engine set in the <b>Engine</b> property. Querying this property raises an error if <b>Installed</b> or <b>Enabled</b> is <b>False</b>.
</blockquote>
<P><hr>
<P>
<H4><A NAME="LISTENINGTIP"></A>ListeningTip Property
</H4><b>Description
</b><blockquote>Returns a Boolean indicating whether the server displays the Listening Tip.
</blockquote><b>Syntax 
</b><blockquote><i>agent</i><b>.SpeechInput.ListeningTip</b>
</blockquote><b>Remarks
</b><blockquote>When<b> ListeningTip</b> returns <b>True</b>, the server displays the tip window when the user presses the push-to-talk hot key. Querying this property raises an error if <b>Installed</b> or <b>Enabled</b> is <b>False</b>.
</blockquote>
<P><A HREF="#top"><IMG SRC="art/uparrow.gif"  BORDER="0" WIDTH=14 HEIGHT=10 ALT="uparrow.gif">Back to contents</A>
<P>
<H3><A NAME="TOPIC12"></A>The CommandsWindow Object
</H3>The <b>CommandsWindow</b> object provides access to properties of the Commands Window. The Commands Window is a shared resource primarily designed to enable users to view voice-enabled commands. If speech recognition is disabled, the Commands Window is also disabled, but you can still read its property settings. If no speech engine is installed or if speech is disabled, querying for the <b>CommandsWindow</b> properties raises an error.
<H4>CommandsWindow Properties
</H4><b><A HREF="#HEIGHTCOMWIN">Height</A></b>, <b><A HREF="#LEFTCOMWIN">Left</A></b>, <b><A HREF="#TOPCOMWIN">Top</A></b>, <b><A HREF="#VISIBLECOMWIN">Visible</A></b>, <b><A HREF="#WIDTHCOMWIN">Width</A></b>
<H4><A NAME="HEIGHTCOMWIN"></A>Height Property
</H4><b>Description
</b><blockquote>Returns an integer value specifying the current height, in pixels, of the Commands Window.
</blockquote><b>Syntax 
</b><blockquote><i>agent</i><b>.CommandsWindow.Height</b>
</blockquote><b>Remarks
</b><blockquote>The server displays the Commands Window based on the position and size set by the user. Querying this property raises an error if no speech engine has been installed.
</blockquote>
<P><hr>
<P>
<H4><A NAME="LEFTCOMWIN"></A>Left Property
</H4><b>Description
</b><blockquote>Returns an integer value specifying the left edge, in pixels, of the Commands Window.
</blockquote><b>Syntax 
</b><blockquote><i>agent</i><b>.CommandsWindow.Left</b>
</blockquote><b>Remarks
</b><blockquote>The server displays the Commands Window based on the position and size set by the user. Querying this property raises an error if no speech engine has been installed.
</blockquote>
<P><hr>
<P>
<H4><A NAME="TOPCOMWIN"></A>Top Property
</H4><b>Description
</b><blockquote>Returns an integer value specifying the top edge, in pixels, of the Commands Window.
</blockquote><b>Syntax 
</b><blockquote><i>agent</i><b>.CommandsWindow.Top</b>
</blockquote><b>Remarks
</b><blockquote>The server displays the Commands Window based on the position and size set by the user. Querying this property raises an error if no speech engine has been installed.
</blockquote>
<P><hr>
<P>
<H4><A NAME="VISIBLECOMWIN"></A>Visible Property
</H4><b>Description
</b><blockquote>Returns or sets whether the Commands Window is visible (open).
</blockquote><b>Syntax 
</b><blockquote><i>agent</i><b>.CommandsWindow.Visible </b>[<i>=boolean</i>]
</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Part</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>boolean</i></TD>
<TD>A Boolean expression specifying whether the Commands Window is visible.
<b>True</b> The window is visible.
<b>False</b> The window is hidden (closed).
</TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>The server displays the window based on the position and size set by the user. Querying this property raises an error if no speech engine has been installed.
</blockquote>
<P><blockquote><b>Note</b> The user can override this property.
</blockquote>
<P><hr>
<P>
<H4><A NAME="WIDTHCOMWIN"></A>Width Property
</H4><b>Description
</b><blockquote>Returns an integer value specifying the width, in pixels, of the Commands Window.
</blockquote><b>Syntax 
</b><blockquote><i>agent</i><b>.CommandsWindow.Width</b>
</blockquote><b>Remarks
</b><blockquote>The server displays the Commands Window based on the position and size set by the user. Querying this property raises an error if no speech engine has been installed.
</blockquote>
<P><A HREF="#top"><IMG SRC="art/uparrow.gif"  BORDER="0" WIDTH=14 HEIGHT=10 ALT="uparrow.gif">Back to contents</A>
<P><H3><A NAME="TOPIC13"></A>The PropertySheet Object
</H3>The <b>PropertySheet</b> object provides several properties you can use if you want to manipulate the character relative to the Microsoft Agent Property Sheet:
<P><b><A HREF="#HEIGHTPROPSHEET">Height</A></b>, <b><A HREF="#LEFTPROPSHEET">Left</A></b>, <b><A HREF="#PAGE">Page</A></b>, <b><A HREF="#TOPPROPSHEET">Top</A></b>, <b><A HREF="#VISIBLEPROPSHEET">Visible</A></b>, <b><A HREF="#WIDTHPROPSHEET">Width</A></b>
<P>If you query <b>Height</b>, <b>Left</b>, <b>Top</b>, and <b>Width</b> properties before the property sheet has ever been shown, their values return as zero (0). Once shown, these properties return the last position and size of the window (relative to your current screen resolution).

<H4><A NAME="HEIGHTPROPSHEET"></A>Height Property
</H4><b>Description
</b><blockquote>Returns an integer value specifying the current height, in pixels, of the Microsoft Agent Property Sheet window.
</blockquote><b>Syntax 
</b><blockquote><i>agent</i><b>.PropertySheet.Height</b>
</blockquote><b>Remarks
</b><blockquote>The server displays the window based on the location set by the user.
</blockquote>
<P><hr>
<P>
<H4><A NAME="LEFTPROPSHEET"></A>Left Property
</H4><b>Description
</b><blockquote>Returns an integer value specifying the current left edge, in pixels, of the Microsoft Agent Property Sheet window.
</blockquote><b>Syntax 
</b><blockquote><i>agent</i><b>.PropertySheet.Left</b>
</blockquote><b>Remarks
</b><blockquote>The server displays the window based on the location set by the user.
</blockquote>
<P><hr>
<P>
<H4><A NAME="PAGE"></A>Page Property
</H4><b>Description
</b><blockquote>Returns or sets the page displayed in the Microsoft Agent Property Sheet window.
</blockquote><b>Syntax 
</b><blockquote><i>agent</i><b>.PropertySheet.Page </b>[= <i>string</i>]
</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Part</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>string</i></TD>
<TD>A string expression with one of the following values.
<b>"Speech"</b> Displays the Speech Recognition page.
<b>"Output"</b> Displays the Output page.
<b>"Copyright"</b> Displays the Copyright page.
</TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>If no speech engine is installed, setting <b>Page</b> to <b>"Speech"</b> has no effect. Also, the window's <b>Visible</b> property must be set to <b>True</b> for the user to see the page. 
</blockquote>
<P><blockquote><b>Note</b> The user can override this property.
</blockquote>
<P><hr>
<P>
<H4><A NAME="TOPPROPSHEET"></A>Top Property
</H4><b>Description
</b><blockquote>Returns an integer value specifying the current top edge, in pixels, of the Microsoft Agent Property Sheet window.
</blockquote><b>Syntax 
</b><blockquote><i>agent</i><b>.PropertySheet.Top</b>
</blockquote><b>Remarks
</b><blockquote>The server displays the window based on the location set by the user.
</blockquote>
<P><hr>
<P>
<H4><A NAME="VISIBLEPROPSHEET"></A>Visible Property
</H4><b>Description
</b><blockquote>Returns or sets whether the Microsoft Agent property sheet window is visible (open).
</blockquote><b>Syntax 
</b><blockquote><i>agent</i><b>.PropertySheet.Visible </b>[=<i>boolean</i>]
</blockquote><blockquote>

<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Part</b></TD>
<TD><b>Description</b></TD>
</TR>
<TR VALIGN=TOP>
<TD><i>boolean</i></TD>
<TD>A Boolean expression specifying whether the window is visible.
<b>True</b> The window is visible.
<b>False</b> The window is hidden (closed).
</TD>
</TR>
</TABLE></blockquote>
<P>
<b>Remarks
</b><blockquote>The server displays the window based on the location and size set by the user.
</blockquote>
<P><blockquote><b>Note</b> The user can override this property.
</blockquote>
<P><hr>
<P>
<H4><A NAME="WIDTHPROPSHEET"></A>Width Property
</H4><b>Description
</b><blockquote>Returns an integer value specifying the current width, in pixels, of the Microsoft Agent Property Sheet window.
</blockquote><b>Syntax 
</b><blockquote><i>agent</i><b>.PropertySheet.Width</b>
</blockquote><b>Remarks
</b><blockquote>The server displays the window based on the location set by the user.
</blockquote>
<P><A HREF="#top"><IMG SRC="art/uparrow.gif"  BORDER="0" WIDTH=14 HEIGHT=10 ALT="uparrow.gif">Back to contents</A>
<P>

<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
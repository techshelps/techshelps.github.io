<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Microsoft Agent Programming Interface Overview</TITLE>

<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="PLATFORM" CONTENT="Windows">
<META NAME=MS-HKWD CONTENT="Microsoft Agent Programming Interface Overview">
<META NAME="Keywords" CONTENT="Microsoft Agent, MSAgent">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT">
<META NAME="ROBOTS" CONTENT="all">

<!--@ SNIFF_START -->
<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../code/ver.js"></SCRIPT>
<!--@ SNIFF_END -->

<SCRIPT DEFER SRC="../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Microsoft Agent"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../art/headbare.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Microsoft Agent"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR>
<TR><TD><PRE><IMG SRC="../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" ID=TOC HREF="../contents.htm">Contents</A>  <IMG SRC="../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="../index.htm">Index</A>  <IMG SRC="../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="agent.htm">Topic Contents</A></PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>Programming Interface Overview</H1>
<P><H4>ActiveX&#153; Technology for Interactive Software Agents</H4>
<P><IMG SRC="art/agent.GIF" WIDTH="123" HEIGHT="123" ALT="agent">

<P>August 1997
<BR>Microsoft Corporation
 
<P><blockquote><b>Note:</b> This document is provided for informational purposes only and Microsoft makes no warranties, either expressed or implied, in this document. The entire risk of the use or the results of this document remains with the user.</blockquote>
<P><blockquote>Information in this document is subject to change without notice. Companies, names, and data used in examples herein are fictitious unless otherwise noted. No part of this document may be reproduced or transmitted in any form or by any means, electronic or mechanical, for any purpose, without the express written permission of Microsoft Corporation.
<P>Microsoft may have patents or pending patent applications, trademarks, copyrights, or other intellectual property rights covering subject matter in this document. The furnishing of this document does not give you any license to these patents, trademarks, copyrights, or other intellectual property rights. Microsoft, MS, MS-DOS, Windows, Windows NT, and the Windows logo are either registered trademarks or trademarks of Microsoft Corporation in the U.S. and/or other countries. Other product and company names mentioned herein may be the trademarks of their respective owners.</blockquote>
<P>&nbsp;
<P><a name="top"></a><b>Contents</b>
<P> <A HREF="#TOPIC1">Introduction</A>
<P> <A HREF="#Licensing">Licensing and Distribution</A>
<P> <A HREF="#TOPIC3">Animation Services</A>
<P> <A HREF="#TOPIC4">Input Services</A>
<P> <A HREF="#TOPIC5">Output Services</A>
<P>&nbsp;
<P><H3><A NAME="TOPIC1"></A>Introduction</H3>
<P>The Microsoft Agent API provides services that support the display and animation of animated characters. Implemented as an OLE Automation (Component Object Model [COM]) server, Microsoft Agent enables multiple applications, called <i>clients </i>or <i>client applications</i>, to host and access its animation, input, and output services at the same time. A client can be any application that supports the Microsoft Agent's COM interfaces.
<P>Although you can call Microsoft Agent's COM interfaces directly, Microsoft Agent also includes an ActiveX&#153; control. This control makes it easy to access Microsoft Agent's services from programming languages that support the ActiveX control interface. For information, see  <A HREF="server.htm">Programming the Microsoft Agent Server Interface</A> and <A HREF="control.htm">Programming the Microsoft Agent Control</A>.
<P>As a COM server, Microsoft Agent starts up only when a client application requests to connect to it. It remains running until all clients close their connection. When no connected clients remain, Microsoft Agent automatically exits. Microsoft Agent also exits when a user explicitly chooses the Exit command on the pop-up menu of Microsoft Agent's taskbar icon and confirms exiting in the warning message box. This action causes the server to send a <b>Shutdown</b> event to all connected clients advising them that the server is exiting. 
<P><A HREF="#top"><IMG SRC="art/uparrow.gif"  BORDER="0" WIDTH=14 HEIGHT=10 ALT="uparrow.gif">Back to contents</A><P>
<P><H3><a name="Licensing"></a>Licensing and Distribution</H3>
<P>The Microsoft Agent self-extracting executable installs a number of system files and registry entries.  Web developers can include the CLSID in the  &lt;OBJECT&gt; tag of their HTML page, subject to the provisions of the license agreement displayed when the control is downloaded and installed.  Application developers who want to add Microsoft Agent services and any of its components (including Microsoft Agent character files) to their application must obtain a redistribution license for Microsoft Agent. For more information on redistribution of Microsoft Agent, see <A HREF="license.htm">Microsoft Agent Licensing and Redistribution</A>.

<P><A HREF="#top"><IMG SRC="art/uparrow.gif"  BORDER="0" WIDTH=14 HEIGHT=10 ALT="uparrow.gif">Back to contents</A><P>

<P><H3><A NAME="TOPIC3"></A>Animation Services</H3>
<P>Microsoft Agent's animation services manage the animation and movement of a character's image in its own window on the screen. An animation is defined as a sequence of timed and optionally branched frames, composed of one or more images. Specifying the <b>Play</b> statement with the name of an animation plays that animation. Animation names are specific to a character definition. As an animation plays, the shape of its window changes to the match the image in the frame. This results in a movable graphic image, or <i>sprite</i>, displayed on top of the desktop and all windows.
<P>Each client application can display and animate its own character. You can also share a character between multiple client applications. Microsoft Agent also supports clients using multiple characters displayed at the same time. The animation services enable you to animate characters independently or synchronize their animation.
<P>To access a character, use the <b>Load</b> method to load the character's data. Microsoft Agent's services include a data provider that supports two formats for loading character and animation data: a single structured file and separate files. Typically, you would use the single file format (.ACS) when the data can be stored locally. The multiple file format (.ACF, .AAF) works best when you want to download animations individually, such as when accessing animations from a Web page script. 
<P>Microsoft Agent provides a set of characters you can download and use, subject to the provisions of the license agreement. For information on accessing the characters, see the  <A HREF="CHARS.HTM">Microsoft Agent Character Data page</A>. 
<P>You can define your own character and its animations using any rendering tool you prefer. To compile a character's animations for use with Microsoft Agent, use the Microsoft Agent Character Editor. This tool enables you to define a character's default properties as well as define animations for the character. The Microsoft Agent Character Editor also enables you to select the appropriate file format when you create a character. For alternative formats or rendering, you can supply your own animation data provider.
<P>The animation services also play certain animations automatically. For example, when you call the <b>MoveTo</b> and <b>GestureAt</b> methods, the server determines what animation to play based on the character's current position. Similarly, the services play <b>Idling</b> animations when the user has not interacted with the character. These server-managed animations are called &quot;states,&quot; and are defined when a character is created. For more information, see  <A HREF="ace.htm">Using The Microsoft Agent Character Editor</A>.
<P>Client applications can directly hide or show a character by using the <b>Hide</b> or <b>Show</b> methods that play the animations assigned to the <b>Hiding</b> and <b>Showing</b> states and set the character's <b>Visible</b> property. This functionality enables you to display or hide a character using your own interface. 
<P>Although the server produces no output when a character is hidden, the server still queues and processes the animation request (plays the animation), but passes a request status back to the client. In the hidden state, the character cannot become input-active. However, if the user speaks the name of a hidden character (when speech input is enabled), the server automatically shows the character.
<P>Microsoft Agent queues animation requests and processes them asynchronously. This enables your application's code to continue while character animations play. However, you can still monitor and manage your character's animation queue by creating an object reference to the request. 
<P><A HREF="#top"><IMG SRC="art/uparrow.gif"  BORDER="0" WIDTH=14 HEIGHT=10 ALT="uparrow.gif">Back to contents</A><P>

<P><H3><A NAME="TOPIC4"></A>Input Services</H3>
<P>A client application provides the primary user interface for interaction with a character. You can program a character to respond to any form of input, from button-clicks to typed-in text. In addition, Microsoft Agent provides events so you can program what happens when the user clicks, double-clicks, or drags the character. The server passes the coordinates of the pointer and any modifier key state for these events.
<P><H4>Speech Input Support</H4>
<P>In addition to supporting mouse and keyboard interaction, Microsoft Agent includes support for speech input. You can use The Microsoft Command and Control Engine for supporting speech recognition. This speech recognition engine enables users to speak naturally without pausing between words. Speech recognition is speaker-independent, but it can be trained for improved performance. Because Microsoft Agent's support for speech input is based on Microsoft SAPI (Speech Application Programming Interface), you can use Microsoft Agent with other engines that are SAPI-compliant. 
<P>The user can initiate speech input by pressing and holding the push-to-talk hot key. In this mode, if the speech engine receives the beginning of spoken input, it holds the audio channel open until it detects the end of the utterance. However, when not receiving input, it does not block audio output. This enables the user to issue multiple voice commands while holding down the key, and the character can respond when the user isn't speaking. If a character attempts to speak while the user is speaking, the character's audible output fails though text may still be displayed in its word balloon. If the character has the audio channel while listening key is pressed, the server automatically transfers control back to the user after processing the text in the <b>Speak</b> method. An optional MIDI tone is played to cue the user to begin speaking. This enables the user to provide input even if the application driving the character failed to provide logical pauses in its output.
<P>Because multiple client applications can share the same character and because multiple clients can use different characters at the same time, the server designates one client as the <i>input-active</i> client and sends mouse and voice input only to that client application. This maintains the orderly management of user input, so that an appropriate client responds to the input. Typically, user interaction determines which client application becomes input-active. For example, if the user clicks a character, that character's client application becomes input-active. Similarly, if a user speaks the name of a character, it becomes input-active. Also, when the server processes a character's <b>Show</b> method, the client of that character becomes input-active. In addition, you can call the <b>Activate</b> method to make your client input-active, but you should do so only when your client application is active. For example, if the user clicks your application's window, activating your application, you can call the <b>Activate</b> method to receive and process mouse and speech input.
<P>If multiple clients use the same character, the server defines the last one shown or the last one input-active as the current input-active character. However, you can also use the <b>Activate</b> method to set your client to become input-active or remain non-input-active when the user selects that character.
<P><b><A NAME="COMMANDSWINDOW"></A></b><b>The Commands Window</b>
<P>When a speech engine is installed and enabled, Microsoft Agent also includes a special interface called the Commands Window. This window displays the voice-enabled commands defined by the client applications for a character. 
<P><IMG SRC="art/uif2.gif" WIDTH="201" HEIGHT="129" ALT="uif2.gif">

<P><b>Figure 1.  Commands Window</b>
<P>The Commands Window appears when the Open Commands Window command is chosen. Client commands appear in the Commands Window based on the <b>Caption</b> and <b>Voice</b> property settings of their <A HREF="control.htm#COMMANDSOBJ"> <b>Commands</b> collection object</A>. 
<P>The server creates a set of voice commands for general interaction and displays these under the Global Commands entry. 
<P>
<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Caption</b></TD>
<TD><b>Voice Grammar</b></TD>
</TR>
<TR VALIGN=TOP>
<TD>Open | Close Commands Window</TD>
<TD>((open | show) [the] commands [window] | what can I say [now])  
<BR>
<BR>toggles with: 
<BR>
<BR>close [the] commands [window]</TD>
</TR>
<TR VALIGN=TOP>
<TD>Repeat Last Statement</TD>
<TD>(repeat [last statement] | what did you say)</TD>
</TR>
<TR VALIGN=TOP>
<TD><i>CharacterName</i></TD>
<TD>[show] <i>CharacterName</i>*</TD>
</TR>
<TR VALIGN=TOP>
<TD>Hide All Characters</TD>
<TD>hide all [characters]</TD>
</TR>
<TR VALIGN=TOP>
<TD>Hide <i>CharacterName</i></TD>
<TD>hide <i>CharacterName</i>**</TD>
</TR>
<TR VALIGN=TOP>
<TD>Microsoft Agent Properties | Close Microsoft Agent Property Sheet</TD>
<TD>[(open | show)] [microsoft] agent (properties | property sheet)
<P>toggles with:
<P>close [microsoft] agent (properties | property sheet)</TD>
</TR>
</TABLE>* All loaded characters are listed.
<P>** A character is listed here only if it is currently visible.
<P>The server automatically displays the commands of the current input-active client and, if necessary, scrolls the window to display as many of the client's commands as possible, based on the size of the window. If the character has no client entries, the Global Commands entry is expanded. Non-input-active clients appear in the tree as single entries.
<P>Speaking the voice command for a client's <b>Commands</b> collection switches to that client and the Commands Window displays the commands of that client. No other entries are expanded. Similarly, if the user switches characters, the Commands Window changes to display the commands of its input-active client. If the client is already input-active, speaking its voice command has no effect. (However, if the user collapses the active client's subtree with the mouse, speaking the client name redisplays the client's subtree.) If a client has voice commands, but no <b>Voice</b> setting for its <b>Commands</b> object (or no <b>Caption</b>), the tree displays &quot;(command undefined)&quot; as the parent entry, but only when that client is input-active and the client has commands in its collection that have <b>Caption</b> and <b>Voice</b> settings. The server includes voice commands in the Global Commands entry ([show] [me] global commands). If the user speaks &quot;Global Commands,&quot; the Commands Window always displays its associated subtree entries. If they are already displayed, the command has no effect.
<P>Although you can also display or hide the Commands Window from your application's code using the <b>Visible</b> property, you cannot change the Commands Window size or location. The server maintains the Commands Window's properties based on the user's interaction with the window. Its initial location is immediately adjacent to the Microsoft Agent taskbar icon.
<P>The Commands Window is included in the ALT+TAB window order. This enables a user to switch to the window to scroll, resize, or reposition the window with the keyboard.
<P><b>The Listening Tip</b>
<P>When speech input is installed, Microsoft Agent includes a special tooltip window that displays when the user presses the push-to-talk hot key. The following table summarizes the display of the Listening Tip when speech recognition is enabled.
<P>
<TABLE WIDTH="87%" CELLPADDING=5 CELLSPACING=0>
<TR><TD><b>Action</b></TD>
<TD><b>Result</b></TD>
</TR>
<TR VALIGN=TOP>
<TD>User presses the listening mode hot key </TD>
<TD>The Listening Tip appears below the active client's character and displays:
<P> <center> -- <i>CharacterName </i>is listening --
<BR> for &quot;<i>InputActiveClientCaption</i>&quot; commands. </center>
<P>The first line identifying the character is centered. The second line is left justified and breaks to a third line when it exceeds the Listening Tip's maximum width.
<P>If an input-active client of the character does not have a caption or defined voice parameters for its <b>Commands</b> object, the Listening Tip displays:
<P>  <center>-- <i>CharacterName </i>is listening --
<BR> for commands. </center>
<P>If there are no visible characters, the Listening Tip appears adjacent to the Microsoft Agent taskbar icon and displays:
<P>  <center> -- All characters are hidden --
<BR> Say the name of a character to display it. </center>
<P>If the speech recognition is still initializing, the Listening Tip displays:
<P> <center> Say the name of a character to display it. </center>
<P>If the audio channel is busy, as when the character is audibly speaking or some other application is using the audio channel, the Listening Tip displays:
<P><center> -- <i>CharacterName</i> is preparing to listen --
<br>Please wait to speak.</center>
</TD>
</TR>
<TR VALIGN=TOP>
<TD>User presses the listening mode hot key and speaks a voice command</TD>
<TD>The Listening Tip appears below the active client's character and displays:
<P>   <center>-- <i>CharacterName </i>heard --
<BR> &quot;<i>CommandText</i>&quot; </center>
<P>The first line is centered. The second line is left justified and breaks to a third line when it exceeds the Listening Tip's maximum width.
</TD>
</TR>
</TABLE>
<P>The Listening Tip automatically times out after being presented. If the &quot;heard&quot; text time-out completes when the user presses the hot key, the tip reverts to the &quot;listening&quot; text unless the server receives another matching utterance. In this case, the tip displays the new &quot;heard&quot; text and begins the time-out for that tip text. If the user releases the hot key and the server is displaying the &quot;heard&quot; text, the time-out continues. However, although the server displays the &quot;listening&quot; text, it immediately removes the Listening Tip when the user releases the hot key.
<P>The Listening Tip does not appear when the pointer is over the Microsoft Agent taskbar icon. Instead, the standard notification tip window appears and displays &quot;Press the <i>name of hot key</i> key to talk to <i>InputActiveCharacterName</i>&quot; when the server is enabled. If all characters are hidden, the tip displays, &quot;Press the <i>name of hot key</i> key and say the name of a character.&quot; However, if the user presses the speaking hot key, the tip reflects the same text as the listening tip. For example, it displays, &quot;<i>CharacterName</i> is listening for <i>InputActiveClientCaption</i> commands,&quot; or, &quot;<i>CharacterName</i> is listening for commands,&quot; if the input-active client has not defined its <b>Caption</b> property; and &quot;<i>CharacterName</i> heard <i>CommandText,</i>&quot; when the speech engine processes a recognition. When the user disables speech input (or speech recognition is not installed), the icon's tooltip displays, &quot;Microsoft Agent is running.&quot; When the server is in its suspended state, the tip displays, &quot;Microsoft Agent is suspended.&quot;
<P>Clients cannot write directly to the Listening Tip, but you can specify alternative &quot;heard&quot; text that the server displays on recognition of a matching voice command. To do this, set the <b>Confidence</b> property and the new <b>ConfidenceText </b>property for the command. If spoken input matches the command, but the best match does not exceed the confidence setting, the server uses the text set in the <b>ConfidenceText</b> property in the tip window. If the client does not supply this value, the server displays the text (grammar) it matched. 
<P><H4><A NAME="POPUPMENU"></A>Pop-up Menu Support</H4>
<P>Microsoft Agent includes a pop-up menu (also known as a contextual menu) for each character that the server displays automatically when a user right-clicks the character. This menu displays some standard commands managed by the server, but it also enables you to add and remove commands that your client application defines. The current input-active client's commands appear, provided that their <b>Caption</b> and <b>Visible</b> properties have been set. If the <b>Enabled</b> property has been set to <b>True</b>, the command appears enabled; if <b>False</b>, the command appears disabled (unavailable appearance). You define the access key for the entry by including an ampersand (&amp;) before the text character of the <b>Caption</b> text setting. A separator appears before these commands. To create entries on a character's pop-up menu, define a <b>Commands</b> collection object and set the <b>Caption</b> and <b>Visible</b> properties of the commands. Note that menu entries do not change while the menu displays. If you add or remove commands or change their properties, the menu displays the changes when the user redisplays the menu. 
<P>The captions of any other clients (non-input-active) appear after another separator. To appear in the list, the <b>Caption</b> and <b>Visible</b> properties of their associated <b>Commands</b> object must be set. An ampersand in the text setting of the <b>Caption</b> property defines the access key for the entry. It is possible that access keys for menu items may be non-unique; however, this cannot be avoided. Separators appear only when there are items in the menu to separate. If no entries exist, the separator for that group does not appear. 
<P>Because the server provides the right-click pop-up menu as a standard service, avoid defining your own pop-up menu on the right-click event. However, if you define your own character, you can disable the server's pop-up menu by using the Microsoft Agent Character Editor. This enables you to support your own interface for the right-click action for your character. However, the pop-up menu cannot be disabled by a client application. 
<P>When the user selects a command from a character's pop-up menu or the Commands Window, the server triggers the <b>Command</b> event of the associated client and passes back the parameters of the input using the <b>UserInput</b> object. 
<P>The server also provides a pop-up menu for the Microsoft Agent taskbar icon. This menu provides the user access to all connected characters, and automatically assigns access keys for the characters based on the first letter of the character name. The menu also includes an entry that provides user access to the Microsoft Agent property sheet. You cannot modify the contents of the Microsoft Agent taskbar pop-up menu.
<P>When the user chooses Exit from the Microsoft Agent taskbar icon pop-up menu, the server notifies the user that applications (clients with existing connections to the server) may not operate correctly and requests confirmation. If the user confirms shutting down the server, the server sends all client applications a <b>Shutdown</b> event. Your application becomes responsible for how it handles this state. Client applications cannot stop or cancel server shutdown. 
<P>If the server gets a request to restart after being shut down, for example, because a new client connects, the server partially reloads in suspended state, displaying the &quot;suspended&quot; Microsoft Agent icon in the taskbar notification area. Microsoft Agent also displays a message box indicating that the current application has requested to restart its services and offers to restart the server. (It also includes an option for the user not to be prompted again.) If the user chooses to restart, the server restores in its full operation and sends clients the <b>Restart</b> event. If the user chooses not to restart, the server remains its suspended state until all its clients close their connections or the user explicitly chooses to exit it again.
<P><H4>The Microsoft Agent Property Sheet</H4>
<P>The Microsoft Agent property sheet provides options for users to adjust their interaction with all characters. For example, users can disable speech input or change input parameters. Users can also change the output settings for the word balloon. These settings override any that are set by a client application or set as part of the character definition. Your application cannot change or disable these options, because they apply to the general user preferences for operation of all characters. However, your application can display or close the property sheet and access the location of its window.
<P><A HREF="#top"><IMG SRC="art/uparrow.gif"  BORDER="0" WIDTH=14 HEIGHT=10 ALT="uparrow.gif">Back to contents</A><P>
<P><H3><A NAME="TOPIC5"></A>Output Services</H3>
<P>Microsoft Agent also supports audio output for the character. This includes spoken output and sound effects. For spoken output, the server lip-syncs the character's defined mouth images to the output. You can choose text-to-speech  (TTS) synthesis, recorded audio, or only word balloon text output. 
<P><H4>Synthesized Speech Support</H4>
<P>If you use synthesized speech, your character has the ability to say almost anything, which provides the greatest flexibility. With recorded audio, you can give the character a specific or unique voice. To specify output, provide the spoken text as a parameter of the <b>Speak</b> method. 
<P>Because Microsoft Agent's architecture uses Microsoft SAPI for synthesized speech output, you should be able to use any engine that conforms to this specification, and support International Phonetic Alphabet (IPA) output using the <b>Visual</b> method of the <b>ITTSNotifySinkW</b> interface. For further information on the SAPI interfaces, see the <A HREF="http://www.research.microsoft.com/research/srg/install.htm" TARGET="_top">Microsoft Speech SDK</A>.
<P><H4>Audio Output Support</H4>
<P>Microsoft Agent enables you to use audio files for a character's spoken output. You can record audio files and use the <b>Speak</b> method to play that data. Microsoft Agent animation services automatically support lip-syncing the character mouth by using the audio characteristics of the audio file. Microsoft Agent also supports a special format for audio files, which includes additional phoneme and word-break information for more enhanced lip-sync support. You can generate this special format using the Microsoft Linguistic Information Sound Editing Tool (coming soon).
<P><H4>Word Balloon Support</H4>
<P>Spoken output can also appear as textual output in the form of a cartoon word balloon. This can be used to supplement the spoken output of a character or as an alternative to audio output. 
<P><IMG SRC="art/AGE3179D.GIF" WIDTH="194" HEIGHT="91" ALT="AGE3179D.gif">
<P><b>Figure 2.  The Word Balloon</b>
<P>Word balloons support only captioned communication from the character, <i>not</i> user input. Therefore, the word balloon does not support input controls. If you want to provide user input for a character, supply those interfaces from your application or the other input services provided by Microsoft Agent, such as the pop-up menu. 
<P>When you define a character, you can specify whether to include word balloon support. However, if you use a character that includes word balloon support, you cannot disable the support.
<P><H4>Animation Sound Effects</H4>
<P>Microsoft Agent also enables you to include sound effects as a part of a character's animation. Using the Microsoft Agent Character Editor, you can specify the filename of standard Windows&#174; sound (.WAV) files to trigger on a given frame. Note that Microsoft Agent does not mix sound effects and spoken output, so spoken output does not begin until a sound effect completes. Therefore, avoid any long or looping sound effect as a part of a character's animation.
<P><A HREF="#top"><IMG SRC="art/uparrow.gif"  BORDER="0" WIDTH=14 HEIGHT=10 ALT="uparrow.gif">Back to contents</A><P>

<P>

<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ActiveMovie Control</TITLE>
<META NAME=MS-HKWD CONTENT="ActiveMovie Control">
<META NAME="Keywords" CONTENT="Component Library">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="bk_amovie"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="ActiveMovie Control"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../art/headbare.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="ActiveMovie Control"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR>
<TR><TD><PRE><IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="../complib.htm#set_complib">Topic Contents</A>
</PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="../complib.htm">Component Library</A>
<IMG SRC="../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="references/properties.htm">Control Properties</A>
</PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>ActiveMovie Control</H1>
<BR CLEAR=ALL>
<P>This section explains how to use the Microsoft&#174; ActiveMovie&#153; Control, both in HTML pages and in Visual Basic applications. It contains a description of the control properties, methods, events, property sheet, and shortcut keys.
<P><A CLASS=tctop HREF="activemovie.htm#Intro_to_DirectShow"><IMG SRC="../../art/arrowb.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowb.gif">Introduction to DirectShow</A><BR>
<P><A CLASS=tctop HREF="activemovie.htm#amocx"><IMG SRC="../../art/arrowb.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowb.gif">About the DirectShow ActiveMovie Control</A><BR>
<P><A CLASS=tctop HREF="activemovie.htm#amocx_html"><IMG SRC="../../art/arrowb.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowb.gif">Using the ActiveMovie Control in HTML Pages</A><BR>
<P><A CLASS=tctop HREF="activemovie.htm#vbocx"><IMG SRC="../../art/arrowb.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowb.gif">Using the ActiveMovie Control in Visual Basic</A><BR>
<P><A CLASS=tctop HREF="references/properties.htm#amocx_properties"><IMG SRC="../../art/arrowb.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowb.gif">Control Properties</A><BR>
<P><A CLASS=tctop HREF="references/methods.htm#amocx_methods"><IMG SRC="../../art/arrowb.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowb.gif">Control Methods</A><BR>
<P><A CLASS=tctop HREF="references/events.htm#amocx_events"><IMG SRC="../../art/arrowb.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowb.gif">Control Events</A><BR>
<P><A CLASS=tctop HREF="propsheet.htm#amocx_property_sheet"><IMG SRC="../../art/arrowb.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowb.gif">Control Property Sheet</A><BR>
<P><A CLASS=tctop HREF="shortcut_keys.htm#amocx_shortcut_keys"><IMG SRC="../../art/arrowb.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowb.gif">Control Shortcut Keys</A><BR>
<!-- ******bj: the following intro heading is for the INet build. 06/18/97 ******--><H2><A NAME="Intro_to_DirectShow">Introduction to DirectShow</A></H2>
<P>Microsoft&#174; DirectShow&#153; is an extensible media architecture that delivers high-quality audio and video playback from the Internet or an intranet. DirectShow supports the most popular media types, including MPEG audio and video, AVI video, WAV audio, MIDI audio, and Apple&#174; QuickTime&#174; video. You can access the DirectShow-supported media types quickly and easily by using the Microsoft ActiveMovie&#153; Control.
<P>The DirectShow architecture defines how applications can control and process time-stamped multimedia data using modular components called <I>filters</I> connected in a configuration called a <I>filter graph</I>. A complete filter graph consists of a number of filters, assembled in a logical progression from the data source to the media renderer or renderers.
<P>Applications assemble the filter graph and control how data moves through it by accessing the <I>filter graph manager</I> through programming interfaces, as shown in the following illustration.
<P><IMG SRC="../../art/amocx1.gif" WIDTH="287" HEIGHT="172" ALT="Diagram of how information moves between DirectShow and an application">
<P>For example, the Microsoft MPEG filter graph uses the following filters.
<UL><LI>A source filter to read the data off the disk
 <LI>A splitter transform filter to separate the video and audio
 <LI>A video transform filter to decompress the video data
 <LI>A video rendering filter to display the data on the screen
 <LI>An audio transform filter to decompress the audio data
 <LI>An audio rendering filter to send the audio data to the sound card
</UL>
<P>Default filter graphs are configured for you when you install the DirectShow software on your computer. You can also install additional filters and create your own filter graphs. For more information about creating and managing filter graphs, see <I>Filter Graph Manager and Filter Graphs</I> in the DirectShow SDK documentation.
<!--*********************************Intro Above***************************-->
<H2><A NAME="amocx">About the DirectShow ActiveMovie Control</A></H2>
<P>You can use the DirectShow ActiveMovie Control to quickly add support for multimedia to your applications. DirectShow supports the many media types, including MPEG audio and video, AVI video, WAV audio, MIDI audio, and Apple&#174; QuickTime&#174; video. The DirectShow SDK provides samples and examples that illustrate how to write programs that use the control with either Microsoft&#174; Visual Basic&#174; or Microsoft Visual C++&#174;.
<P>The ActiveMovie Control represents an easy-to-use programming interface that lets you manage multimedia using the control's properties, methods, and events. The control handles all video and audio rendering for you, which simplifies your programming tasks and makes it easy to add support for multimedia to your application. In addition to the ActiveMovie Control, you can use the DirectShow Component Object Model (COM) interfaces. (See <I>Summary of DirectShow COM Interfaces</I> in the DirectShow SDK documentation.)
<!--********************************************************************************-->
<H2><A NAME="amocx_html">Using the ActiveMovie Control in HTML Pages</A></H2>
<P>Files on a Web page are referenced using URL names and various protocols, such as HTTP, file, FTP, or Gopher. These names can be either explicit or relative.
<P>Following are two examples of explicit references. The first example uses the HTTP protocol to access the file. The second uses a network path and file name.
<P>"http://directshow/samples/web/RoadRun.avi"
<P>"file://directshow/samples/web/RoadRun.avi"
<P>Here is an example of a relative reference:
<PRE>"/samples/web/RoadRun.avi"</PRE>
<P>In the examples in this article, you can assume that either relative or explicit file names will work and any protocol for accessing these file names will also work.
<P><B>Contents of this article:</B>
<UL><LI><A HREF="activemovie.htm#Invoking_Playback">Invoking Playback on HTML Pages</A>
<LI><A HREF="activemovie.htm#Using_the_OBJECT_Tag">Using the OBJECT Tag</A>
<LI><A HREF="activemovie.htm#Using_CODEBASE">Using the OBJECT Tag with the CODEBASE Attribute</A>
<LI><A HREF="activemovie.htm#Using_EMBED">Using the EMBED Tag</A>
<LI><A HREF="activemovie.htm#Using_IMG_with_DYNSRC">Using the IMG tag with the DYNSRC= Attribute</A>
<LI><A HREF="activemovie.htm#Using_A_with_HREF">Using the A Tag with the HREF Attribute</A>
<LI><A HREF="activemovie.htm#How_Progressive_Downloading_Works">How Progressive Downloading Works</A>
<LI><A HREF="activemovie.htm#Setting_ActiveMovie_Properties_on_a_Web_Page">Setting ActiveMovie Control Properties on a Web Page</A>
</UL>
<A NAME="Invoking_Playback"></A><P><B>Invoking Playback on HTML Pages</B>
<P>You can play files in one of two ways: either embedded in a Web page, or externally in a window displayed outside or on top of the page. There are four ways of playing back media using HTML tags. Three of these result in embedded playback:
<UL><LI>OBJECT
<LI>EMBED
<LI>IMG DYNSRC=
</UL>
<P>The fourth means of implementing playback results in an external window:
<UL><LI>A HREF
</UL>
<P>Although not restricted to playback, you can use an attribute of the OBJECT tag to automatically download a file that contains required components for playback. 
<UL><LI>OBJECT CODEBASE
</UL>
<P>The following examples show how you use these tags to reference the file, but do not show all possible properties and attributes (width, height, color, and so on) that could be specified as well. See <A HREF="activemovie.htm#Setting_ActiveMovie_Properties_on_a_Web_Page">Setting ActiveMovie Control Properties on a Web Page</A> for more information.

<A NAME="Using_the_OBJECT_Tag"></A><P><B>Using the OBJECT Tag</B>
<P>When you use the OBJECT tag, you must explicitly specify the class identifier (CLSID) for the playback control, as shown in the following example.
<PRE>&lt;OBJECT CLASSID="CLSID:05589FA1-C356-11CE-BF01-00AA0055595A"&gt;
&lt;PARAM NAME="FileName" VALUE="http://www.microsoft.com//directshow/samples/web/RoadRun.avi"&gt;
&lt;/OBJECT&gt;
</PRE>
<P>The preceding CLSID is that of the ActiveMovie Control. The application loads the control and passes it the file name. The control parses the file name and downloads and plays the file. If the protocol is "file," the control instantiates the <I>File Source (async)</I> filter to play back the file. If the protocol is "http," the control instantiates the <I>File Source (URL)</I> filter instead. See the DirectShow SDK documentation for more information on these filters.
<P>Using this tag, you can play back certain media types using "progressive downloading," which allows the user to play back the downloaded portion of the file as the data is downloading. See <A HREF="activemovie.htm#How_Progressive_Downloading_Works">How Progressive Downloading Works</A> for more information.
<P>Using this tag along with the CODEBASE attribute, you can download components required for playback. See <A HREF="activemovie.htm#Using_CODEBASE">Using the OBJECT Tag with the CODEBASE Attribute</A> for more information.

<A NAME="Using_CODEBASE"></A><P><B>Using the OBJECT Tag with the CODEBASE Attribute</B>
<P>As the author of a Web page, you might find that using components such as specialized DirectShow filters can enhance playback of your media files on the user's machine. However, if the necessary components aren't already installed on the user's computer, you need a method to install those components. Internet Explorer supports using the CODEBASE attribute of the OBJECT tag for automatic file download, and cabinet (.cab) files for automatic installation. See 
<A HREF="http://www.microsoft.com/workshop/prog/cab/" TARGET="_top">http://www.microsoft.com/workshop/prog/cab/default.htm</A> for information about the Cabinet SDK and .cab files.
<P>The CODEBASE attribute works in conjunction with the OBJECT tag. See <A HREF="activemovie.htm#Using_the_OBJECT_Tag">Using the OBJECT Tag</A> for another example that uses the OBJECT tag.
<P>An example of filter download using the CODEBASE attribute and a .cab file follows:
<PRE>
&lt;OBJECT ID=GargleFilter1
CLASSID="CLSID:d616f350-d622-11ce-aac5-0020af0b99a3"
CODEBASE="http://directshow/samples/gargle.cab"&gt;
&lt;/OBJECT&gt;
</PRE>
<P>The preceding class identifier (CLSID) is the ID of the Gargle filter, which applies a "gargle" sound effect to a sound file. Internet Explorer checks the target computer's registry for the specified CLSID. If the specified CLSID is not present (indicating the filter is not installed on the machine), the browser attempts to find the file (Gargle.cab) at the site specified by the CODEBASE attribute and download it. Once downloaded, the .cab file provides the information to automatically install the filter.
<P><B>Note:</B>  The .cab file must have been properly constructed for automatic installation to work. The .cab must include the filter (Gargle.ax in this case) and an .inf file that contains installation information. The .inf file should handle copying each filter to a specific directory (such as the Windows&#174; System directory) on the user's computer and properly registering each filter. See the Platform SDK for information about .inf files.<A NAME="Using_EMBED"></A><P><B>Using the EMBED Tag</B>
<P>Netscape introduced this tag for embedding source. The following example uses this tag.
<PRE>&lt;EMBED autostart="FALSE" loop="FALSE" SRC="http://directshow/samples/web/RoadRun.avi"&gt;
</PRE>
<P>This tag works identically to the OBJECT tag, except that you don't need to specify the CLSID. Internally, DirectShow examines the HKCR/MIME/Database/Content Type registry entries, retrieves the appropriate CLSID (DirectShow automatically registers all compatible data types at install time), and launches the control with that media type.

<A NAME="Using_IMG_with_DYNSRC"></A><P><B>Using the IMG tag with the DYNSRC= Attribute</B>
<P>Internet Explorer can use the DYNSRC= attribute to play back audio-video interleaved (AVI) files. You can use this playback mechanism, but it is preferable to use the OBJECT tag. The following example demonstrates this HTML tag.
<PRE>&lt;IMG start=1 loop=0 DYNSRC="http://directshow/samples/web/RoadRun.avi"&gt;
</PRE>
<A NAME="Using_A_with_HREF"></A><P><B>Using the A Tag with the HREF Attribute</B>
<P>To play back a movie in an external movie, use the A tag with the HREF attribute. An example of this follows:
<PRE>&lt;A HREF="http://directshow/samples/web/dwad.cinepack.avi"&gt;AVI_CINEPACK&lt;/A&gt;
</PRE>
<P>The parsing steps that Internet Explorer 3.0 (or later) goes through are similar to the "EMBED SRC tag" case, in that it gets the file extension, maps it to a content type and looks in the HKCR/MIME/Database/Content Type area of the registry to get a CLSID to invoke. However, in this case the control plays in an external window. The ActiveMovie Control is in control of downloading the file.

<A NAME="How_Progressive_Downloading_Works"></A><P><B>How Progressive Downloading Works</B>
<P>The following series of steps describes what happens during progressive downloading.
<OL><LI>As soon as possible after activation, the ActiveMovie Control displays the first frame in the file (for movies). The filter graph remains in a paused state.
<LI>The control does not start to play until it determines that it has enough data to play uninterrupted while the remaining amount downloads. At this time, playback starts and downloading will continue.
<LI>The user can click the Play button during this time. In this case, the control will play until the play cursor reaches the end of the current amount downloaded and will automatically transition from the running state to the paused state.
<LI>The download of the file will not stop if the user clicks Stop. The user can stop the download by closing the control.
<LI>For most AVI or QuickTime files, you can't start playback until DirectShow has read the entire file (because the indexes are at the end of the file). However, the download bar is displayed to show how much of the file has been downloaded. The Play control button remains unavailable until the control downloads the file completely.
</OL>
<A NAME="Setting_ActiveMovie_Properties_on_a_Web_Page"></A><P><B>Setting ActiveMovie Control Properties on a Web Page</B>
<P>You can set any ActiveMovie Control property by using the PARAM tag inside an OBJECT container. For Boolean values, &#150;1 is TRUE and 0 is FALSE. All other values are set as they would be in the Microsoft&#174; Visual Basic&#174; design environment.
<P>The following example demonstrates playing a movie with most controls shown. If you have a video file and you want to try this, you can copy and paste this code onto your Web page and modify the parameters as you want. If you do this, be sure to change the movie's file name, perhaps using a relative path and file protocol (for example, PARAM NAME="FileName" VALUE="file://c:\mymovie.mpg") to play the movie from your hard drive.
<PRE>
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;ActiveMovie Embedded MPG Object Test Page&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
Scene from Stargate (MPG File)
&lt;OBJECT ID="ActiveMovie1" WIDTH=357 HEIGHT=322
CLASSID="CLSID:05589FA1-C356-11CE-BF01-00AA0055595A"&gt;
&lt;PARAM NAME="Version" VALUE="1"&gt;
&lt;PARAM NAME="EnableContextMenu" VALUE="-1"&gt;
&lt;PARAM NAME="ShowDisplay" VALUE="-1"&gt;
&lt;PARAM NAME="ShowControls" VALUE="-1"&gt;
&lt;PARAM NAME="ShowPositionControls" VALUE="0"&gt;
&lt;PARAM NAME="ShowSelectionControls" VALUE="0"&gt;
&lt;PARAM NAME="EnablePositionControls" VALUE="-1"&gt;
&lt;PARAM NAME="EnableSelectionControls" VALUE="-1"&gt;
&lt;PARAM NAME="ShowTracker" VALUE="-1"&gt;
&lt;PARAM NAME="EnableTracker" VALUE="-1"&gt;
&lt;PARAM NAME="AllowHideDisplay" VALUE="-1"&gt;
&lt;PARAM NAME="AllowHideControls" VALUE="-1"&gt;
&lt;PARAM NAME="MovieWindowSize" VALUE="0"&gt;
&lt;PARAM NAME="FullScreenMode" VALUE="0"&gt;
&lt;PARAM NAME="MovieWindowWidth" VALUE="353"&gt;
&lt;PARAM NAME="MovieWindowHeight" VALUE="318"&gt;
&lt;PARAM NAME="AutoStart" VALUE="0"&gt;
&lt;PARAM NAME="AutoRewind" VALUE="-1"&gt;
&lt;PARAM NAME="PlayCount" VALUE="1"&gt;
&lt;PARAM NAME="SelectionStart" VALUE="0"&gt;
&lt;PARAM NAME="SelectionEnd" VALUE="48.5151388"&gt;
&lt;PARAM NAME="Appearance" VALUE="1"&gt;
&lt;PARAM NAME="BorderStyle" VALUE="1"&gt;
&lt;PARAM NAME="FileName" VALUE="http://DirectShow/samples/web/stargate1.mpg"&gt;
&lt;PARAM NAME="DisplayMode" VALUE="0"&gt;
&lt;PARAM NAME="AllowChangeDisplayMode" VALUE="-1"&gt;
&lt;PARAM NAME="DisplayForeColor" VALUE="16777215"&gt;
&lt;PARAM NAME="DisplayBackColor" VALUE="0"&gt;
&lt;/OBJECT&gt;
&lt;/BODY&gt;
</PRE>
<H2><A NAME="vbocx">Using the ActiveMovie Control in Visual Basic</A></H2>
<P>This article describes how Microsoft&#174; Visual Basic&#174; applications can use the ActiveMovie Control. The ActiveMovie Control is a high-level interface that meets the needs of most multimedia application developers. Additional lower-level interfaces are also available to Visual Basic programmers. 
<P><B>Contents of this article</B>:
<UL><LI><A HREF="activemovie.htm#Quick_Start">Quick Start: Insert and Use the ActiveMovie Control</A>
<LI><A HREF="activemovie.htm#vbocx_1">The Visual Basic Ocxvb01 Sample</A>
<LI><A HREF="activemovie.htm#vbocx_2">Opening and Running DirectShow Source Files</A>
<LI><A HREF="activemovie.htm#vbocx_3">Managing the User Interface of the ActiveMovie Control</A>
<LI><A HREF="activemovie.htm#vbocx_4">Monitoring ActiveMovie Control Events</A>
</UL>
<A NAME="Quick_Start"></A><P><B>Quick Start: Insert and Use the ActiveMovie Control</B>
<P>This section describes how to insert the ActiveMovie Control and use it in a Visual Basic application. It is a simple example to get you started, and implements only playing and stopping a movie. 
<P>Follow these steps to insert the ActiveMovie Control into a Visual Basic form and play a movie:
<OL><LI>Install Internet Explorer to install the ActiveMovie Control.
<LI>Open a project or create a new project in Visual Basic.
<LI>Choose <B>Components</B> from the <B>Projects</B> menu. Choose the <B>Controls</B> tab. If the ActiveMovie Control does not appear in the list of 
<B>Controls</B>, click the <B>Browse</B> button. In the <B>Add ActiveX Control</B> dialog box that appears, navigate to the directory containing the control (by default, the \Windows\System or \Winnt\System32 directory). Double-click the Amovie.ocx file to add the ActiveMovie Control to the <B>Controls</B> list. 
<LI>Add the ActiveMovie Control to the Visual Basic toolbox by selecting the check box next to <B>Microsoft ActiveMovie Control</B> in the <B>Controls</B> list. 
<LI>Add the ActiveMovie Control to your form and size the control to the screen size you want for your movie. (Click the control in the Toolbox, and then draw its size on the form.)
<LI>In the <B>Properties</B> list for the ActiveMovie Control, initialize the <B>FileName</B> property to the movie file you want to play. The <B>FileName</B> property should contain the full path. For example:
<PRE>c:\movies\mymovie.avi
</PRE>
<LI>Set the <B>ShowControls</B> and <B>ShowDisplay</B> properties to FALSE.
<LI>Add code to start and stop the movie to two events the ActiveMovie Control supports. For example:
<PRE>Private Sub ActiveMovie1_Click()
    ActiveMovie1.Run
End Sub
Private Sub ActiveMovie1_KeyPress(KeyAscii As Integer)
     ActiveMovie1.Stop
End Sub 
</PRE>
<LI>Compile the application.
<LI>Run the application. In this example, click anywhere on the movie screen to start the movie. Press any key to stop the movie.
</OL>
<P>Follow these steps to use the ActiveMovie Control to play a movie controlled by Visual Basic controls:
<OL><LI>Follow steps 1-6 as shown earlier in this section.
<LI>Add Visual Basic controls (such as a CommandButton or ListBox) to your form to play and stop the movie. 
<LI>Add code to play and stop the movie. For example:
<PRE>Private Sub Command1_Click()
ActiveMovie1.Run
End Sub
Private Sub Command2_Click()
ActiveMovie1.Stop
End Sub
</PRE>
<LI>Compile the application.
<LI>Run the application. In this example, Click the Command1 button to start the movie. Click the Command2 button to stop the movie.
</OL>
<A NAME="vbocx_1"></A><P><B>The Visual Basic Ocxvb01 Sample</B>
<P>This section describes some of the features of the DirectShow Visual Basic sample application called Ocxvb01 in the VB\OCX directory of the DirectShow samples. The ActiveMovie Control manages most of the details of the display and playback of DirectShow files, while giving the Visual Basic developer control over the image size, playback rate, volume, balance, and position. With the control, the developer can manage a variety of standard user interface controls, such as rewind and fast forward, and a trackbar control to set positions within the media file.
<P>The Visual Basic sample application Ocxvb01 consists of two forms: the main control form frmMain (Ocxvb01.frm) and the display form frmViewer (Viewer.frm). 
 
<P>The frmMain form's menu commands call ActiveMovie Control methods to run, pause, and stop multimedia playback, set and retrieve the control's properties, and enable and disable different parts of the user interface.
<P>The frmMain form contains two command buttons that change the <B>CurrentPosition</B> property of the <B>IMediaPosition</B> object; you can use these buttons to move forward or backward through the multimedia source file, if the multimedia source type supports this functionality. The frmMain form's trackbar control sets the Playback property; its valid range is 0.5 to 1.5. This value is used as a multiplier; 1.0 is the authored speed, so 0.5 is half the authored speed and 2.0 is twice 
the authored speed. You can set this property to values outside this range, but the audio portion tends to become incomprehensible.
<P>The main control form also contains option buttons that set the display configuration to half size, full size (default), and double size. The main control form appears as shown in the following illustration.
<P><IMG SRC="../../art/vbocx01.gif" WIDTH="364" HEIGHT="238" ALT="Main control form"> 
 
<P>The display form, frmViewer, contains the ActiveMovie Control that is displayed when the DirectShow multimedia source file is active or when the source is playing. The application resizes the display form to correspond to the selected source. The display form, with all ActiveMovie Control user interface elements visible and enabled, appears as shown in the following illustration. 
 
<P><IMG SRC="../../art/vbocx02.gif" WIDTH="273" HEIGHT="131" ALT="Display form with all ActiveMovie Control elements visible and enabled"> 
 
<P>The following sections describe how to use some of the properties, methods, and events. 

<A NAME="vbocx_2"></A><P><B>Opening and Running DirectShow Source Files</B>
<P>To load and play a DirectShow file, set the ActiveMovie Control's <A HREF="references/FileName.htm#FileName">FileName</A> property. Depending on your application's requirements, you can play the file from your code by using methods like <A HREF="references/Run.htm#amocx_Run">Run</A> and <A HREF="references/Stop.htm#amocx_Stop">Stop</A>, or you can let the user interact with the user interface elements offered by the control. 
 
<P>The <A HREF="references/FileName.htm#FileName">FileName</A> property specifies the name of the multimedia source file. When you set the <B>FileName</B> property, several other properties are updated to indicate characteristics of that source file. 
 
<P>Once the <A HREF="references/FileName.htm#FileName">FileName</A> property contains a valid file name, you can call the control's <A HREF="references/Run.htm#amocx_Run">Run</A> method to play the multimedia file. Or, you can enable the control buttons on the display form and let the user play the file. 
 
<P>The sample application contains an Open command on the File menu that sets the value of the <A HREF="references/FileName.htm#FileName">FileName</A> property. It invokes the File Open common dialog box to obtain a file name:
 
<PRE> 
   Private Sub mnu_File_Open_Click() 
 
      CommonDialog1.Filter = "All files (*.*)|*.*|DirectShow files 
(*.mpg;*.mpa;*.mpv;*.mov;*.mpeg;*.enc;*.m1v;*.mp2)|*.mpg;*.mpa;*.mpv;*.mov;*.mpeg;*.enc;*.m1v;*.
mp2|Audio files (.wav)|*.wav|Video for Windows files 
(.avi)|*.avi" 
      CommonDialog1.Flags = 4 'Hide read-only check box 
      CommonDialog1.ShowOpen 
      ' only set the property if the user selected a filename from the common dialog
      If CommonDialog1.filename &lt;&gt; "" Then 
         frmViewer.ActiveMovie1.filename = CommonDialog1.filename 
         g_FileOpened = True 
         g_FileExtension = Right$(CommonDialog1.filename, Len(CommonDialog1.filename) - 
InStr(CommonDialog1.filename, ".")) 
      Else 
         GoTo err_FileOpen 
      End If 
      Call ResizeViewer 
      ... 
 </PRE>
<P>First, the subroutine prepares the common dialog box to display only movie files. After the common dialog box returns, the subroutine checks to determine if a file name was returned. 
<P>If a file name was returned, the subroutine sets the <A HREF="references/FileName.htm#FileName">FileName</A> property of the ActiveMovie Control, in addition to some other global variables: gFileOpened to determine whether or not a file has been opened, and gFileExtension to determine the type of the file. 
<P>Finally, the subroutine calls the ResizeViewer subroutine to make the dimensions of the viewer form match those of the DirectShow file. The dimensions of the Visual Basic form are expressed in twips, while the dimensions of the multimedia source are expressed in pixels. The ResizeViewer subroutine considers these differences to size the form by using the form's <B>ScaleHeight</B> and <B>ScaleWidth</B> properties:
<PRE>
' Resize form to dimensions of ActiveMovie Control + nonclient region.
    With frmViewer
        .Visible = False
        .Height = .ActiveMovie1.Height + (.Height - .ScaleHeight)
        .Width = .ActiveMovie1.Width + (.Width - .ScaleWidth)
        .Visible = True
    End With
</PRE>
<P>After the file is loaded successfully, you can play it by clicking Play on the control, or by using the <A HREF="references/Run.htm#amocx_Run">Run</A> method. 
The sample application provides a Run command on its File menu that calls the <B>Run</B> method: 
 
<PRE> 
   Private Sub mnu_File_Run_Click() 
 
      If g_FileOpened = True Then 
         frmViewer.ActiveMovie1.Run 
         frmViewer.ZOrder 0 
      End If 
</PRE>
<A NAME="vbocx_3"></A><P><B>Managing the User Interface of the ActiveMovie Control</B>
<P>The display form of the sample application (Viewer.frm) contains the ActiveMovie Control. The following illustration shows the control with the status bar visible and the control bar hidden.
 
<P><IMG SRC="../../art/vbocx04.gif" WIDTH="273" HEIGHT="93" ALT="ActiveMovie Control with status bar visible and control bar hidden"> 
 
<P>You can use the ActiveMovie Control properties to show or hide and enable or disable user interface elements of the ActiveMovie Control. The sample application includes selected menu commands that enable you to individually control each of the user interface elements. The commands on the View menu enable you to control whether the element is visible. The commands on the Enable menu enable you to control whether the element is enabled. 
<P>When the sample application loads a new file, it resets the ActiveMovie Control properties to default values and initializes the values of these selected menu commands. This fragment is from the mnu_File_Open_Click procedure: 
 
<PRE> 
   With frmViewer.ActiveMovie1 
      .EnablePositionControls = False              'Disable/Enable controls. 
      .EnableSelectionControls = False 
      .EnableTracker = False 
      .ShowPositionControls = False                'Show/don't show controls. 
      .ShowSelectionControls = False 
      .ShowTracker = True 
      mnu_Enable_PositionControls.Checked = False  'Check/uncheck menus to match 
      mnu_Enable_SelectionControls.Checked = False 'controls. 
      mnu_Enable_Tracker.Checked = False 
      mnu_View_Tracker.Checked = True 
      mnu_View_PositionControls.Checked = False 
      mnu_View_SelectionControls.Checked = False 
      ... 
   End With 
</PRE>
<P>Many of the control elements have two properties associated with them: one to enable them and another to make them visible. To use the position controls, set both the <A HREF="references/EnablePositionControls.htm#EnablePositionControls">EnablePositionControls</A> and <A HREF="references/ShowPositionControls.htm#ShowPositionControls">ShowPositionControls</A> properties. The following illustration shows the display controls and all position controls with all elements of the user interface both visible and enabled. 
<P><IMG SRC="../../art/vbocx02.gif" WIDTH="273" HEIGHT="131" ALT="Display form with all ActiveMovie Control elements visible and enabled"> 
 
<A NAME="vbocx_4"></A><P><B>Monitoring ActiveMovie Control Events</B>
<P>The ActiveMovie Control automatically monitors certain events and calls event procedures accordingly. To handle one of these events, you provide only the event handling code. For example, the <A HREF="references/StateChange.htm#StateChange">StateChange</A> event indicates a change in the state of the multimedia source, such as the change from running to stopped, or the change from paused to running. To take some action when this event occurs, the application provides code as part of the control's <B>StateChange</B> event.
<P>To demonstrate these event handlers, the sample application provides trivial code that increments a variable. The variable represents a count of the number of times the event has occurred. The current values for these counter variables are displayed at the bottom of the main form. The following example shows the code for the <A HREF="references/StateChange.htm#StateChange">StateChange</A> event.
<PRE> 
   Private Sub ActiveMovie1_StateChange(ByVal oldState As Long, ByVal newState As Long)
 
      g_cStateChange = g_cStateChange + 1
      UpdateStatusBar 
</PRE>
<P>Each event procedure passes some informational parameters too. For the <A HREF="references/StateChange.htm#StateChange">StateChange</A> event, you can determine the previous state, in addition to the control's current state, by examining the <I>oldState</I> and <I>newState</I> parameters.
<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>



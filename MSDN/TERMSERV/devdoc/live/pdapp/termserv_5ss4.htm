<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Legacy Applications in a Terminal Server Environment</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_legacy_applications_in_a_terminal_server_environment"></a>Legacy Applications in a Terminal Server Environment</h2>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The Windows NT Server operating environment has specific requirements for hosting MS-DOS®-based and 16-bit Windows-based applications. These requirements also apply to the Windows® -based Terminal Server environment. Any MS-DOS-based or 16-bit Windows-based application that does not run under Windows NT Server will not run under Terminal Server either. Terminal Server is, however, more sensitive to ill-behaved legacy applications than the traditional Windows NT Server because a single ill-behaved application can affect all of the users on the Terminal Server system.</p>
<p>
Predicting which legacy applications will work well in the Terminal Server environment and which will not is difficult. In most cases, the only real way to determine a specific application's feasibility is to test the application in the Terminal Server environment. However, there are some application behaviors and origins that typically create problems in a Terminal Server environment: 
<ul>
<li>
<b>MS-DOS-based applications that cycle on device input</b>. MS-DOS-based applications that tightly loop for keyboard input, mouse activity, or other device input operations are often too CPU-bound to run effectively in the Terminal Server environment.</li>
<li>
<b>FoxPro</b>®<b> for MS-DOS-based applications</b>. These applications often do not run well in the Terminal Server environment because they tend to be CPU interrupt-intensive and drain processor resources away from other user sessions. </li>
<li>
<b>MS-DOS-based print applications</b>. Many MS-DOS-based applications use print techniques that are not compatible with the Terminal Server environment. However, 16-bit Windows-based applications that use the standard Windows printing functions work correctly. </li>
<li>
<b>MS-DOS and 16-bit Windows-based applications that internally mount NetWare drives</b>. Programmatic NetWare drive mapping operations do not work under Terminal Server. In contrast, drive mapping using UNC names works correctly. </li>
<li>
<b>16-bit Windows applications that directly access .ini files</b>. Older Windows applications that directly access .ini files instead of using the standard functions might not work if multiple users simultaneously access an .ini file. Terminal Server handles the standard functions properly for a multi-user environment. </li>
</ul>
<p>&nbsp;</p></body>
</HTML>

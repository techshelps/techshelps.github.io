<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Terminal Server Programming Guidelines</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_terminal_server_programming_guidelines"></a>Terminal Server Programming Guidelines</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
Most existing 16-bit or 32-bit Windows-based applications run "as is" on a Microsoft® Windows®-based Terminal Server. However, some applications perform well in a Terminal Server environment; others do not perform as well. This section provides guidelines for developing applications that perform well in a Terminal Server environment. </p>
<p>
Many of the guidelines in the following sections are good programming practices that will benefit applications running in either a Terminal Server or a traditional Windows NT environment. However, some of the sections recommend optimizations, such as limiting graphic effects, that you would want only when your application is running under Terminal Server. For sample code that illustrates how to detect the Terminal Server environment, see <a href="termserv_44ms.htm">Detecting the Terminal Server Environment</a>. </p>
<p>
<b>Note</b>&nbsp;&nbsp;Following these guidelines does not limit or compromise an application's ability to function in the traditional Windows NT environment—applications optimized for Terminal Server work well in both environments. </p>
<p>&nbsp;</p></body>
</HTML>

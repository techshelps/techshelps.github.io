<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Application Setup in a Terminal Server Environment</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_application_setup_in_a_terminal_server_environment"></a>Application Setup in a Terminal Server Environment</h2>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The automated setup procedure for many existing applications assumes that the application is being installed for a single user. In a multi-user Windows®-based Terminal Server environment, this assumption can create the following problems:
<ul>
<li>
If the setup procedure updates the registry and desktop environment for just one user, additional users must reinstall the entire package or an administrator must manually copy information from the registry and desktop of one user to the other users. </li>
<li>
With some setup procedures, you can customize the application at installation time by excluding features or components. If the initial installer excludes part of the application, additional users must reinstall the application to get the excluded features.</li>
</ul>
<p>
To avoid these problems, setup procedures should use the following guidelines when installing an application on a Terminal Server.
<ul>
<li>
Install applications into the default user environment common to all users.</li>
<li>
Support user-specific customization through the use of user profiles. To do this, create a template file for the System Policy Editor so an administrator can easily configure the registry to indicate the features available to each user. Then, at run time, the application can enable or disable features depending on the settings in the current user's registry hives. For more information, see <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_system_policies">
</object><a href=JavaScript:alink_1.Click()>System Policies</a>.</li>
</ul>
<p>&nbsp;</p></body>
</HTML>

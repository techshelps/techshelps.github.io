<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Understanding How APE Works</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="veconunderstandinghowapeworks"></a>Understanding How APE Works</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconUnderstandingHowAPEWorks_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconUnderstandingHowAPEWorks_T">
</object></p>
<p>
The Application Performance Explorer models application design by using three tiers. These are:
<ul type=disc>
<li>
Clients<br><br></li>
<li>
Servers<br><br></li>
<li>
Databases</li>
</ul>
<p>
These tiers and the associated processes and services are summarized in the following illustration.</p>
<p>
<img src="ve5bnm2.gif" border=0></p>
<h2>Clients</h2>
<p>
When you click Start on the APE Manager interface, at least one client process is created. Each client then creates services by using one of the following techniques:
<ul type=disc>
<li>
Direct instantiation.<br><br></li>
<li>
Using the Pool Manager (the pooling option).<br><br></li>
<li>
Using the Job Manager (the queuing and pooling option).</li>
</ul>
<p>
Additionally, a client can directly access the Jet database, simulating a typical client/server application architecture.</p>
<p>
Client processes can pass data to the service objects with each call. In the asynchronous model, the data is passed via the job manager and a worker with each service request. In the synchronous model, data is passed only via a worker.</p>
<p>
Both the Pool Manager and Job Manager create workers that in turn create services. When the Retain Service References option is checked, the workers keep a reference to service objects as they are used. The worker then only has to instantiate a service object the first time. After that first time, the worker uses its stored reference to the service to accomplish tasks.</p>
<p>
After completing its work, the client returns its call to the APE Manager via the Logger. This logging function accepts information from many sources, including:
<ul type=disc>
<li>
Client events<br><br></li>
<li>
Job Manager events<br><br></li>
<li>
Pool Manager events<br><br></li>
<li>
Worker events<br><br></li>
<li>
MTS events<br><br></li>
<li>
Database events<br><br></li>
<li>
Expediter events<br><br></li>
<li>
Job summary information</li>
</ul>
<h2>Servers</h2>
<p>
APE supplies a set of worker services that emulate typical CPU and database access tasks. These workers are instantiated either directly by the client or via the Pool Manager (pooling) or Job Manager (queuing and pooling) services. In a manner similar to the clients, the workers return their results to APE Manager via the Logger.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information on configuring the workers, defining the resource consumption characteristics of the services, and an explanation of how queuing and pooling affect your APE test, see <a href="vecondefiningserver.htm">Defining a Server</a>.</p>
<h2>Databases</h2>
<p>
To provide a variety of database access modeling, APE supports both Jet and SQL Server databases. You can model your data access scenarios using several types of data access methods, including:
<ul type=disc>
<li>
ActiveX Data Objects (ADO)<br><br></li>
<li>
Remote Data Objects (RDO)<br><br></li>
<li>
Data Access Objects (DAO)<br><br></li>
<li>
ODBC API</li>
</ul>
<p>
For modeling typical client/server applications, the data access work flows directly between the client and the Jet database. For modeling modern distributed applications, the data access work flow is between the worker and either the Jet or SQL Server database.</p>
<p>
The data access connection and actual database events use real queries and tables to provide accurate data access modeling. You can change the database to create the exact data access events required by your application.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information on how data access technology affects the design and performance of your application, see <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconChapter5ChoosingRightDataAccessTechnology">
</object><a href=JavaScript:alink_3.Click()>Choosing the Right Data Access Technology</a>. For more information on how to change APE's database tables and queries, see <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconDefiningDatabase">
</object><a href=JavaScript:alink_4.Click()>Defining a Database</a>.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Defining a Client</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="vecondefiningclient"></a>Defining a Client</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconDefiningClient_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconDefiningClient_T">
</object></p>
<p>
The client machine is the single workstation on your desktop. The major client parameters are the number of client processes, the number of calls that each client makes, and (optionally) the size of the data to be passed. Varying the number of clients is useful for loading the system and for examining the advantages of a queue manager with extremely large numbers of clients. Note that it is often impractical to set up 100 or more workstations to test the effect of a large number of users connected to the system. It is, however, more practical to set up 10 clients and increase the call frequency to simulate high-traffic conditions.</p>
<p>
The number of calls, pooling, and service binding options are useful for examining the effect of component persistence. As the number of calls increases, you'll want to take advantage of component persistence (using the Pool Manager) to handle the workload demand. This is because when a component stays in memory between calls, the system spends less time creating and destroying objects and can support a much higher volume of work. Early service binding will improve the speed of your application. Also, varying the size and type of the data can be useful in discovering major performance problems with network throughput.</p>
<p>
If your test requires remote clients, remember that each remote machine must be properly configured with APE components. For step-by-step instructions on installing APE components on remote machines, see "Configuring Access Permissions Using DCOMCNFG" in the topic <a href="vehowinstallingapplicationperformanceexplorer.htm">Installing Application Performance Explorer</a>.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Details of Merge Behavior</title>
<style>@import url(/stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="reconthe_details_of_merge_behavior"></a>The Details of Merge Behavior</h1>
<p>
You can predict how the property values and collections in a successor version will change. <b>MergeVersion</b> modifies one object version, the successor, by combining its property values and collections with those of another version, the predecessor. <b>MergeVersion</b> compares the property values and collections of the predecessor version and the successor version to a third version, called the basis version. </p>
<p>
You invoke <b>MergeVersion</b> on the successor version of the merge; you pass a reference to the predecessor as an input parameter. You also pass an indication of which version is to be considered the primary version. The <i>primary</i> version is the version whose member values are given priority when there are merge conflicts between the two versions. For each property, <b>MergeVersion</b> uses this rule to resolve merge conflicts:
<ul>
<li>
If the primary version differs from the basis version, Repository uses the property value from the primary version.<br><br></li>
<li>
If only the secondary version differs from the basis version, Repository uses the property value from the secondary version.<br><br></li>
<li>
If neither version differs from the basis version, Repository leaves the property value in the current version unchanged.</li>
</ul>
<h4>How MergeVersion Handles Origin Collections with COLLECTION_MERGEWHOLE Flag Set</h4>
<p>
For each origin collection type whose COLLECTION_MERGEWHOLE flag is set, <b>MergeVersion</b> uses this rule: 
<ul>
<li>
If the primary version's collection differs (see "Comparing Collections") from the basis version's collection, Repository uses the collection from the primary version.<br><br></li>
<li>
If only the secondary version's collection differs from the basis version's, Repository uses the collection from the secondary version.<br><br></li>
<li>
If neither version differs from the basis version, Repository leaves the collection in the current version unchanged.</li>
</ul>
<h4>How MergeVersion Handles Origin Collections with COLLECTION_MERGEWHOLE Flag Not Set</h4>
<p>
For each origin collection type whose COLLECTION_MERGEWHOLE flag is not set, <b>MergeVersion</b> combines the items in the two collections as follows:
<ol type=1>
<li>
<b>MergeVersion</b> includes in the resulting collection each item in the basis version not changed in or deleted from either the primary version or secondary version. (See Comparing Versioned Relationships.)<br><br></li>
<li>
<b>MergeVersion</b> includes in the resulting collection each item in the primary version's collection that differs from the basis version.<br><br></li>
<li>
<b>MergeVersion</b> includes in the resulting collection each item in the secondary version's collection that differs from the basis version, provided the corresponding items in the primary version and basis version do not differ from each other.</li>
</ol>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;The resulting collection can exclude some items found in the basis object version's collection. For example, if the primary version's collection excludes the item, the resulting collection will exclude the item. Similarly, if the primary version's collection includes an item that is identical to an item in the basis version's collection, but the secondary object version excludes the item, the resulting collection will exclude the item.</p>
<p>
For some examples of Merge behavior, see <a href="reconexamples_of_merging_versions.htm">Examples of Merging Versions</a>.</p>
<h2>Calculating the Basis Version</h2>
<p>
When you invoke the <b>MergeVersion</b> method of the <b>IRepositoryObjectVersion</b> interface, Repository uses the version graph. The <b>MergeVersion</b> method compares each object version to be merged to a basis version of the same object. The basis version of the two to-be-merged object versions is the most recently created object version that is on the creation path of both the primary object version and the secondary object version of the merge. The creation path of an object version is a path through the version graph leading from the object version directly to Version 1 of the object. Each step of the path leads from an object version to its predecessor creation version.</p>
<p>
You can easily follow an object version's creation path backward from it to Version 1 by following the solid arrows in reverse. For example, the version graph in the following figure shows that the creation path of Version 11 goes through these other versions: 9, 5, 4, 2, and 1.</p>
<p>
<img src="vm_13.gif" border=0></p>
<h2>Comparing Collections</h2>
<p>
As it works, the <b>MergeVersion</b> method must compare collections to each other. (It compares each collection in the basis version to its corresponding collection in the primary version and in the secondary version.) <b>MergeVersion</b> considers two collections to be different if either of the following is true:
<ul>
<li>
One collection contains different objects from the other collection.<br><br></li>
<li>
A corresponding pair of items from the two collections differ from each other. (See "Comparing Versioned Relationships.")</li>
</ul>
<h2>Comparing Versioned Relationships</h2>
<p>
The <b>MergeVersion</b> method compares each collection of the basis version of an object to the corresponding collections of the primary version and of the secondary version. As part of these comparisons, the method must compare corresponding items – versioned relationships – of these collections. An item from the basis object version's collection corresponds to an item in the primary or secondary object version's collection if the two items use the same target object. Even if two items correspond, however, they can still differ in important ways. Repository considers two versioned relationships to differ if any of the following is true:
<ul>
<li>
The collection type is a sequenced collection and the two items have different sequence numbers.<br><br></li>
<li>
The collection type is a naming collection and the two items have different names.<br><br></li>
<li>
The two items refer to different versions of the target object.<br><br></li>
<li>
The two items use a different version of the target object as pinned version.<br><br></li>
<li>
One item has a pinned target object version and the other does not.</li>
</ul>
<p>
For example, the following figure shows two items that differ in one respect only — the top item refers to Versions 1 and 3.  The corresponding item of the second collection refers to Versions 3 and 5. </p>
<p>
<img src="vm_14.gif" border=0></p>
</BODY>
</HTML>

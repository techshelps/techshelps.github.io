<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Choosing Which Information Belongs in the Repository</title>
<style>@import url(/stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="reconchoosingwhichinformationbelongsintherepository"></a>Choosing Which Information Belongs in the Repository</h1>
<p>
You do not need to store all your tool's information in the Repository. For example, suppose your tool helps application developers and systems engineers keep track of the bugs on their software systems. Your tool maintains modules, bug reports, and test suites. Each module has a name, an author, source code, and one or more bugs reported on it. Each bug can have a description, a module on which it is reported, and a test suite used to reproduce the bug. Each test suite can have one or more bugs that it can reproduce. Because your tool maintains each test suite in a file format, you decide not to explicitly insert each test suite into the Repository. Instead, you will store in the Repository only the name of a file containing the test suite.</p>
<p>
To decide which information belongs in the Repository, consider the following questions:
<ul>
<li>
<b>Do you want to perform impact analysis on the data?</b><p>
The more information you store in the Repository, the more impact-analysis questions you can answer. Consider the example described above. Because the information model includes a class describing test suites, you can learn which test suite generates the most bugs.
<p>
Conversely, because the information model does not include a class accommodating individual tests or the persons responsible for them, you cannot use the Repository to learn which person discovers the most bugs.
</li>
<li>
<b>Is there another file format that is more appropriate for the fine details of your tool’s information?</b><p>
There are two aspects to consider:
<ol type=1>
<li>
If a tool manipulates objects whose fundamental units of storage and manipulation are large, a file format can be more efficient than the Repository. In this case, it is probably more effective to store the data objects in their native file format, and to store in the Repository a description of each data object.<br><br></li>
<li>
If an existing tool already stores its data in a file format, switching to the Repository would require rewriting the tool. To save time, you can choose to retain the existing file format and replicate some subset of the tool’s data in the Repository.</li>
</ol>
</li>
</ul>
</BODY>
</HTML>

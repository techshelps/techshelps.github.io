<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Avoiding Repository Cache Overflows</title>
<style>@import url(/stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="reconavoidingrepositorycacheoverflows"></a>Avoiding Repository Cache Overflows</h1>
<p>
To enhance performance, Repository transactions normally run in write-back mode. In write-back mode, a transaction's updates are held in the Repository cache until the transaction is committed. If a single transaction performs a large number of updates, it can cause the Repository cache for the process to overflow.</p>
<p>
By setting transaction options through the <b>SetOption</b> method, a Repository instance can operate in exclusive write-back mode, where it allows no more than one active transaction at a time for a given process and Repository database. Using exclusive write-back mode will reduce, but not eliminate, the possibility of a cache overflow. For a very large number of updates within a single transaction, or if memory is limited, the Repository cache can still overflow.</p>
<p>
To guarantee that cache overflows will not cause transactions to fail, set the exclusive write-through mode transactional option. In exclusive write-through mode, updates are immediately flushed from the Repository cache. Exclusive write-through mode does not affect your ability to cancel an active transaction using the <b>Abort</b> method.</p>
</BODY>
</HTML>

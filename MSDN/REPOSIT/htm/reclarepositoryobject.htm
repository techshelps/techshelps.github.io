<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RepositoryObject Class</title>
<style>@import url(/stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="reclarepositoryobject"></a>RepositoryObject Class</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="reclaRepositoryObjectVersion; reifcIRepositoryDispatch; reifcIRepositoryItem; reifcIRepositoryObject; reifcIRepositoryObjectStorage">
</object><a href=JavaScript:alink_1.Click()>See Also</a></p>
<p>
A Repository object is an object that is stored in the Repository database and is managed by the Repository engine. </p>
<p>
In this release of the Microsoft Repository, objects can be versioned. A Repository object version is a particular rendition of a Repository object. Each version of an object can differ from other versions of that object in its property values and collections. When you obtain a reference to a Repository object you actually are manipulating a particular version of that object. That is, you manipulate a <a href="reclarepositoryobjectversion.htm">RepositoryObjectVersion</a> object. Because you manipulate particular versions of objects, you can declare any object with the following line of Visual Basic code:</p>
<pre><code>Dim <i>newReposObject</i>   As RepositoryObjectVersion
</code></pre>
<p>
In earlier releases of the Repository, the object model included the <b>RepositoryObject</b> class, but not the <b>RepositoryObjectVersion</b> class. If you have Visual Basic programs written against earlier releases of the Microsoft Repository, those programs might include declarations like the following:</p>
<pre><code>Dim <i>oldReposObject</i>   As RepositoryObject
</code></pre>
<p>
These programs will still work, because the Repository’s object model still includes the <b>RepositoryObject</b> object. Visual Basic still recognizes preceding declaration as valid. But remember, <i>whenever</i> you manipulate an object, you actually manipulate a specific version of that object. So the object <i>oldReposObject</i>, even though it is declared as a <b>RepositoryObject</b>, must conform to the <b>RepositoryObjectVersion</b> class. </p>
<p>
To ensure that objects declared as <b>RepositoryObject</b> conform to the <b>RepositoryobjectVersion</b> class, the Repository uses the same Class Factory for both classes. In this way, any object that you declare as a Relationship implements the exact same methods as any object you declare as a <b>VersionedRelationship</b>. In effect, the following two lines of Visual Basic code are identical:</p>
<pre><code>Dim <i>myReposObject</i>   As RepositoryObjectVersion
Dim <i>myReposObject</i>   As RepositoryObject</code></pre>
</BODY>
</HTML>

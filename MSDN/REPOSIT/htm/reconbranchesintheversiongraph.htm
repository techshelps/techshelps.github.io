<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Branches in the Version Graph</title>
<style>@import url(/stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="reconbranchesintheversiongraph"></a>Branches in the Version Graph</h1>
<p>
Within the database, Repository partitions each version graph into branches. Each branch contains object versions that are especially likely to share property values and target object versions with each other.</p>
<p>
A branch of a version graph is a sequence <i>S</i> of <i>n</i> (<i>n</i> &gt; 0) object versions such that:</p>
<p>
<i>S</i>  =  <i>x</i><sub>1</sub>,  <i>x</i><sub>2</sub>,  <i>x</i><sub>3</sub>,  …, <i>x<sub>n</sub></i>   </p>
<p>
and <i>x</i><sub>1</sub> is the creation predecessor of <i>x</i><sub>2</sub><br>
and <i>x<sub>k</sub></i> is the creation predecessor of <i>x<sub>k</sub></i><sub>+1</sub> (1 &lt; <i>k</i> &lt; <i>n</i>-2 ) <br>
and <i>x<sub>n</sub></i><sub>-1</sub> is the creation predecessor of <i>x<sub>n</sub></i>.</p>
<p>
According to this definition, each object version can be in the same branch with at most one of its creation successors. For example, in the following version graph, Version 3 and Version 4 cannot be in the same branch, because they are both creation successors of Version 2.</p>
<p>
<img src="ds_01.gif" border=0></p>
<p>
In fact, this version graph has four branches, as shown in the following figure.</p>
<p>
<img src="ds_02.gif" border=0></p>
<p>
Every version graph has at least one branch — the branch beginning with the first version of the object.</p>
<p>
Each object version is a member of exactly one branch; branches do not overlap.</p>
<p>
When you create a new version of an object, Repository tries to add the newly created version to the same branch as its predecessor. If that branch already includes a successor to the creation version, however, Repository creates a new branch. The newly created object version is the only element of the new branch.</p>
<p>
For example, if you create a new version from Version 8, Repository creates the new version and adds it to the branch containing Version 8. But if you create a new version from Version 3, Repository creates a new branch for the new version, because Version 3's branch already includes a creation successor of Version 3.</p>
<p>
Each branch represents a set of object versions that are especially likely to share property values and have identical relationships. If two object versions exist on separate branches, Repository does not save any space in the database even if those versions share values for <i>all</i> of their properties and have identical collections for <i>all</i> of their collection types. For Repository to save space, the similar objects must exist on the same branch. For this reason, Repository tries during <b>CreateVersion</b> to assign the new version to an existing branch. The fewer the branches, the higher the likelihood that Repository can save space in the database.</p>
<p>
Repository never moves an object version from one branch to another. After Repository assigns an object version to a branch during the <b>CreateVersion </b>method, that object version remains on that branch until the object version is deleted.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Reading Repository Data Outside of a Transaction</title>
<style>@import url(/stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="reconreadingrepositorydataoutsideofatransaction"></a>Reading Repository Data Outside of a Transaction</h1>
<p>
A Repository method that reads data can execute outside of a transaction; however, Repository data read in this way can include partial updates from an active transaction. To ensure that data read from the Repository does not include partial updates from active transactions, put read requests into a transaction.</p>
<p>
Otherwise, if you bracket your reads within a transaction and your Repository database is a Microsoft Jet database, you risk overloading the cache. Microsoft Jet uses an in-memory cache to speed up query processing. Cached data is not released until the transaction is committed. If your Repository application is reading a large amount of data, and you are performing the reads within the scope of a transaction to isolate them from the uncommitted changes of other applications, the Microsoft Jet cache can grow so large that it causes the application to fail. To avoid this, commit your transaction periodically (even though it is a read-only transaction).</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INamedObject Interface</title>
<style>@import url(/stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="reifcinamedobject"></a>INamedObject Interface</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="remthIRepositoryItemget_Name; remthIRepositoryItemput_Name; reproINamedObjectName; remthIRepositoryDispatchget_Properties">
</object><a href=JavaScript:alink_1.Click()>See Also</a></p>
<p>
Normally, a name is associated with a Repository object through a naming relationship. The collection for such a relationship provides the scope for the name, and can require that all names in the collection be unique. This is the preferred method for naming objects, when a given object will be the destination of only one naming relationship. </p>
<p>
If your information model contains a class that is not the destination of a naming relationship type, or is the destination of multiple relationship types, but no single relationship type is the obvious choice to be the <i>naming</i> relationship type, you can attach the name property to the class. This is accomplished by defining your class to implement the <b>INamedObject</b> interface. If your class implements the <b>INamedObject</b> interface, the Repository engine will use that interface when asked to retrieve or set an object name.</p>
<h2>When to Use</h2>
<p>
Use the <b>INamedObject</b> interface to access the <b>Name</b> property of a Repository object that exposes this interface.</p>
<h2>Properties</h2>
<table cols=2>
<tr valign=top>
<td width=40%><b>Property</b></td>
<td width=60%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=40%><b>Name</b></td>
<td width=60%>The name of the object.</td>
</tr>
</table><br>
<h2>Methods</h2>
<table cols=2>
<tr valign=top>
<td width=40%><b>IUnknown Method</b></td>
<td width=60%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=40%><b>QueryInterface</b></td>
<td width=60%>Returns pointers to supported interfaces.</td>
</tr>
<tr valign=top>
<td width=40%><b>AddRef</b></td>
<td width=60%>Increments the reference count.</td>
</tr>
<tr valign=top>
<td width=40%><b>Release</b></td>
<td width=60%>Decrements the reference count.</td>
</tr>
</table><br>
<table cols=2>
<tr valign=top>
<td width=40%><b>IDispatch Method</b></td>
<td width=60%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=40%><b>GetIDsOfNames</b></td>
<td width=60%>Maps a single member and a set of argument names to a corresponding set of dispatch identifiers.</td>
</tr>
<tr valign=top>
<td width=40%><b>GetTypeInfo</b></td>
<td width=60%>Retrieves a type information object, which can be used to get the type information for an interface.</td>
</tr>
<tr valign=top>
<td width=40%><b>GetTypeInfoCount</b></td>
<td width=60%>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</td>
</tr>
<tr valign=top>
<td width=40%><b>Invoke</b></td>
<td width=60%>Provides access to properties and methods exposed by an Automation object.</td>
</tr>
</table><br>
<table cols=2>
<tr valign=top>
<td width=40%><b>IrepositoryDispatch Method</b></td>
<td width=60%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=40%><b>get_Properties</b></td>
<td width=60%>Retrieves the <b>IReposProperties</b> interface pointer. The <b>IreposProperties</b> interface provides access to the persistent members exposed by the <b>InamedObject</b> interface.</td>
</tr>
</table><br>
<h2>Remarks</h2>
<p>
None of the standard Repository engine or Type Information Model classes implement the <b>INamedObject</b> interface. However, the Repository engine does use the <b>INamedObject</b> interface, if it is exposed by a Repository object.</p>
<p>
When the <b>IRepositoryItem::get_Name</b> method is invoked for a Repository object, the Repository engine will perform these steps to retrieve the name:
<ol type=1>
<li>
If the object exposes the <b>INamedObject</b> interface, the Repository engine returns the value of the <b>Name</b> property on the <b>INamedObject</b> interface.<br><br></li>
<li>
Otherwise, the Repository engine searches for a naming relationship for which the current object is the destination object, taking the <a href="reconworkspacecontext.htm">workspace context</a> into consideration.<br><br></li>
<li>
If such a relationship is found, the Repository engine returns the name associated with that relationship.<br><br></li>
<li>
If the object is not the destination of a naming relationship, the Repository engine returns a null name.</li>
</ol>
<p>
When the <b>IRepositoryItem::put_Name</b> method is invoked for a Repository object, the Repository engine will perform these steps to set the name:
<ol type=1>
<li>
The Repository engine sets the value of the <b>Name</b> property of all naming relationships for which the object is the destination.<br><br></li>
<li>
If the object exposes the <b>INamedObject</b> interface, the Repository engine also sets the value of the <b>Name</b> property attached to that interface.</li>
</ol>
</BODY>
</HTML>

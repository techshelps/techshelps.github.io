<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Heterogeneous Collections of Objects</title>
<style>@import url(/stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="reconheterogeneouscollectionsofobjects"></a>Heterogeneous Collections of Objects</h1>
<p>
Every collection of relationships is <i>homogeneous</i>. In any relationship collection, each item is a relationship of the same relationship type. Some collections of objects, however, are <i>heterogeneous </i>— the items can have different classes.</p>
<p>
A collection of objects can be heterogeneous because:
<ul>
<li>
The Type Information Model allows each interface to be implemented by many classes.<br><br></li>
<li>
The Type Information Model expresses each relationship type as an association between two interfaces (rather than as an association between two classes).</li>
</ul>
<p>
Each relationship type describes how the objects of classes implementing <i>particular interfaces</i> can be related. Thus, if a particular interface has several implementing classes, some relationship types involving that interface could yield collections whose target objects span several classes. As you prepare programs that manipulate such collections, do not assume that the collections will contain homogeneous sets of objects.</p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;Plan for change; do not assume that your tool information model will remain unchanged. Although a particular relationship type of your tool information model might associate two interfaces that are implemented by exactly one class each, you might someday create other classes that implement those same interfaces. Enlargement of the number of classes implementing either of those interfaces by any Repository user introduces the possibility for heterogeneous collections of objects. If your programs using those collections depend upon homogeneous collections, you must rewrite them as soon as you implement the interfaces with several classes. To protect your programs from this cause of obsolescence, write them assuming that any collection of objects can be heterogeneous.</p>
</BODY>
</HTML>

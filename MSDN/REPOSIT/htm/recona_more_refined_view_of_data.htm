<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>A More Refined View of Data</title>
<style>@import url(/stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="recona_more_refined_view_of_data"></a>A More Refined View of Data</h1>
<p>
Objects in the Repository conform to classes. (See <a href="reconthedataintherepository.htm">The Data in the Repository</a>.) The following figure shows two objects that conform to the <b>CFile</b> class.</p>
<p>
<img src="vm_01.gif" border=0></p>
<p>
An individual object can change whenever any of its property values or collections change. Sometimes the new property values or collections simply replace the preceding ones.  Other times, you may want to retain both the old values and the new values. Microsoft Repository can retain the old property values and collections with an old version of the object. The following figure shows three versions of the <i>Main</i> file and two versions of the <i>Header</i> file.</p>
<p>
<img src="vm_02.gif" border=0></p>
<p>
The different versions of an object can have different property values. The following figure includes property values for the properties X, Y, and Z – properties that the File class exposes through its various interfaces. In the figure, individual versions have different values for the properties. The picture shows the property values as ordered X-Y-Z triplets.  "(22,3,4)" means X=22, Y=3, and Z=4.</p>
<p>
<img src="vm_03.gif" border=0></p>
<p>
Note how this works: Repository does <i>not</i> let you store multiple values for a particular property of an object. Instead, it lets you store multiple versions of an object – and each individual version can contain its own individual property values.</p>
<p>
The different versions of an object can also have different collections. The following figure shows one collection (of the <i>Persons-of-File</i> collection type) for each of the five object versions of the <i>File</i> class. (To save space, the X-Y-Z triplets are not shown.)</p>
<p>
<img src="vm_04.gif" border=0></p>
<p>
Here are the collections of the five object versions of the <i>Files</i> class:
<ul>
<li>
Persons-of-Version 1-of-Main:  {Alexandra,Bruce}<br><br></li>
<li>
Persons-of-Version 2-of-Main:  { } (The empty set)<br><br></li>
<li>
Persons-of-Version 3-of-Main:  {Bruce,Christoph}<br>
<br><br></li>
<li>
Persons-of-Version 1-of-Header:  { } (The empty set)<br><br></li>
<li>
Persons-of-Version 2-of-Header:  {Christoph}</li>
</ul>
<p>
Although the preceding figure shows that the three different versions of <i>Main</i> have three different values for the collection type <i>Persons-of-File</i>, at run time things are much simpler. At run time, when your program manipulates an object, it manipulates a <i>particular version</i> of that object. In other words, whenever you secure from the Repository a reference to an object, Repository actually gives you a reference to a specific version of an object. No matter how your program obtains the reference – through <b>IRepository::get_Object</b>, through navigation, or through any other technique – Repository provides you a reference to <i>one</i> version of that object.</p>
<p>
For example, suppose your program has a reference to Version 3-of-<i>Main</i> and Version 2-of-<i>Header</i>. The following figure distinguishes between object versions to which your program has current references (filled-in circles) and the other object versions (blank circles).</p>
<p>
<img src="vm_05.gif" border=0></p>
<p>
The preceding figure indicates that your program does not currently have a reference to any person. Your program merely has references to some collections that include persons. To get a reference to a specific person (say, Bruce), your program can navigate to it.</p>
<p>
The preceding figure is simplified — it shows only one version of each person. The following figure is more realistic.</p>
<p>
<img src="vm_06.gif" border=0></p>
<p>
The preceding figure shows two collections. One collection is <i>Persons-of-Version 3-of-Main</i>, which contains <i>Version 2-of-Bruce </i>and <i>Version 2-of-Christoph</i>. The other collection is <i>Persons-of-Version 2-of-Header</i>; it contains <i>Version 2-of-Christoph</i>. The figure also shows that your program already has references to <i>Version 2-of-Bruce</i> and <i>Version 2-of-Christoph</i> (because the corresponding dots are filled in).</p>
<p>
The preceding figure reflects that when you navigate along a relationship to a target object, you navigate to a specific version of that object.  The figure reflects this by showing each arrowhead pointing to a specific version of an object to which you have already navigated (a filled-in circle in the set of versions of persons).</p>
<p>
In most situations, this view is adequate. For example, you can think of a target object collection as containing a particular version of each target object. A more detailed view is sometimes useful, however, as shown in the following figure.</p>
<p>
<img src="vm_07.gif" border=0></p>
<p>
The preceding figure shows a single collection, <i>Persons-of-Version 3-Of-Main</i>. It contains two items:  <i>Bruce</i> and <i>Christoph</i>.  The figure does not indicate which particular version of <i>Bruce</i> is in the collection, because your program has not yet navigated from <i>Version 3-of-Main</i> to <i>Bruce</i>. But it does indicate that when you do navigate to <i>Bruce</i>, Repository can return a reference to any of the three versions. Similarly, the picture does not indicate which version of <i>Christoph</i> is in the collection, but it does indicate that when you navigate to <i>Christoph</i>, Repository returns a reference to Version 1 or to Version 2, but not to Version 3.</p>
</BODY>
</HTML>

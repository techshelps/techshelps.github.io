<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Object Collections vs. Relationship Collections</title>
<style>@import url(/stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="reconobjectcollectionsvs.relationshipcollections"></a>Object Collections vs. Relationship Collections</h1>
<p>
You can read each relationship in two directions. For example, you can say "Herman Melville wrote Moby Dick" or "Moby Dick was written by Herman Melville." We can paraphrase each of these two statements as follows:
<ul>
<li>
Herman Melville is in the set of persons who wrote Moby Dick.<br><br></li>
<li>
Moby Dick is in the set of books written by Herman Melville.</li>
</ul>
<p>
Although awkward, this way of articulating relationships highlights the existence of <i>collections. </i>In the following table, each collection is shown as a collection of objects.</p>
<p>
<b>Collection (inside the gray ovals)</b></p>
<p>
<img src="repgpc06.gif" border=0></p>
<p>
<b>Commentary</b></p>
<p>
The collection of books written by Herman Melville</p>
<p>
<b>Collection (inside the gray ovals)</b></p>
<p>
<img src="repgpc07.gif" border=0></p>
<p>
<b>Commentary</b></p>
<p>
The collection of books written by Kraig Brockschmidt</p>
<p>
<b>Collection (inside the gray ovals)</b></p>
<p>
<img src="repgpc08.gif" border=0></p>
<p>
<b>Commentary</b></p>
<p>
The collection of persons who wrote Moby Dick</p>
<p>
You can also think of collections as collections of <i>relationships</i>. The following table shows how every collection of objects has an equivalent collection of relationships.</p>
<p>
<b>Object collection</b></p>
<p>
<img src="repgpc06.gif" border=0></p>
<p>
<b>Commentary</b></p>
<p>
The collection of books written by Herman Melville</p>
<p>
<b>Relationship collection</b></p>
<p>
<img src="repgpc10.gif" border=0></p>
<p>
<b>Commentary</b></p>
<p>
The collection of authorships for which Herman Melville is the writer</p>
<p>
<b>Object collection</b></p>
<p>
<img src="repgpc08.gif" border=0></p>
<p>
<b>Commentary</b></p>
<p>
The collection of authors of Moby Dick</p>
<p>
<b>Relationship collection</b></p>
<p>
<img src="repgpc11.gif" border=0></p>
<p>
<b>Commentary</b></p>
<p>
The collection of authorships in which Moby Dick is the written thing</p>
<p>
As the preceding figures shows, you can think of each collection in two ways — as containing either relationships or objects. When you manipulate a collection object from a COM program, you can manipulate it with an interface called <b>ITargetObjectCol</b> or with an interface called <b>IRelationshipCol</b>. The first interface lets you manipulate a collection as if it contained objects. The second interface lets you manipulate a collection as if it contained relationships.</p>
</BODY>
</HTML>

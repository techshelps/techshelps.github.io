<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>InternetOpenUrl</TITLE>

<META NAME=MS-HKWD CONTENT="InternetOpenUrl">
<META NAME="Keywords" CONTENT="Internet Tools & Technologies">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT, Mac">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="InternetOpenUrl"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="InternetOpenUrl"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../../art/headbard.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="InternetOpenUrl"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR>
<TR><TD><PRE><IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="../reference.htm#ch_wininet">Topic Contents</A></PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="InternetCreateUrl.htm">InternetCreateUrl</A>
<IMG SRC="../../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="ftp.htm">FTP Functions</A></PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>InternetOpenUrl</H1>

<PRE>HINTERNET InternetOpenUrl(
    IN HINTERNET hInternetSession, 
    IN LPCSTR lpszUrl,
    IN LPCSTR lpszHeaders,
    IN DWORD dwHeadersLength,
    IN DWORD dwFlags,
    IN DWORD dwContext
);
</PRE>
<P>Begins reading a complete FTP, Gopher, or HTTP URL. Use <A HREF="InternetCanonicalizeUrl.htm#InternetCanonicalizeUrl">InternetCanonicalizeUrl</A> first if the URL being used contains a relative URL and a base URL separated by blank spaces.

<UL><LI>Returns a valid handle to the FTP, Gopher, or HTTP URL if the connection is successfully established, or NULL if the connection fails. To get a specific error message, call
<object id="hhal_3" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_3.Click()>GetLastError</A>. To determine why access to the service was denied, call <A HREF="InternetGetLastResponseInfo.htm#InternetGetLastRespo">InternetGetLastResponseInfo</A>.

</UL>
<DL>
<DT><I>hInternetSession</I> </DT><DD>Handle to the current Internet session. The handle must have been returned by a previous call to <A HREF="InternetOpen.htm#InternetOpen">InternetOpen</A>.
</DD><DT><I>lpszUrl</I> </DT><DD>Address of a string that contains the URL to begin reading. Only URLs beginning with ftp:, gopher:, http:, or https: are supported.
</DD><DT><I>lpszHeaders</I> </DT><DD>Address of a string that contains the headers to be sent to the HTTP server. (For more information, see the description of the <I>lpszHeaders</I> parameter in the <A HREF="HttpSendRequest.htm#HttpSendRequest">HttpSendRequest</A> function.)
</DD><DT><I>dwHeadersLength</I> </DT><DD>Length, in characters, of the additional headers. If this parameter is -1L and <I>lpszHeaders</I> is not NULL, <I>lpszHeaders</I> is assumed to be zero-terminated (ASCIIZ) and the length is calculated.
</DD><DT><I>dwFlags</I> </DT><DD>Action flags. Can be one of the following values:
<DL>
<DT><A HREF="../constants/API_Flags.htm#INTERNET_FLAG_DONT_C">INTERNET_FLAG_DONT_CACHE</A> </DT><DD>Does not cache the data, either locally or in any gateways. Identical to the preferred value, <A HREF="../constants/API_Flags.htm#INTERNET_FLAG_NO_CAC">INTERNET_FLAG_NO_CACHE_WRITE</A>.
</DD><DT>INTERNET_FLAG_EXISTING_CONNECT </DT><DD>If possible, reuses the existing connections to the server for new requests generated by <B>InternetOpenUrl</B> instead of creating a new session for each request. This flag is useful only for FTP connections, since FTP is the only protocol that typically performs multiple operations during the same session. The Win32 Internet API caches a single connection handle for each HINTERNET handle generated by <A HREF="InternetOpen.htm#InternetOpen">InternetOpen</A>. 
</DD><DT><A HREF="../constants/API_Flags.htm#INTERNET_FLAG_HYPERL">INTERNET_FLAG_HYPERLINK</A> </DT><DD>Forces a reload if there was no Expires time and no Last-Modified time returned from the server when determining whether to reload the item from the network. 
</DD><DT><A HREF="../constants/API_Flags.htm#INTERNET_FLAG_IGNORE">INTERNET_FLAG_IGNORE_CERT_CN_INVALID</A> </DT><DD>Disables Win32 Internet function checking of SSL/PCT-based certificates that are returned from the server against the host name given in the request. Win32 Internet functions use a simple check against certificates by comparing for matching host names and simple wildcarding rules for HTTP requests.
</DD><DT><A HREF="../constants/API_Flags.htm#INTERNET_FLAG_IGNORE">INTERNET_FLAG_IGNORE_CERT_DATE_INVALID</A> </DT><DD>Disables Win32 Internet function checking of SSL/PCT-based certificates for proper validity dates for HTTP requests.
</DD><DT>INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTP </DT><DD>Disables the ability of the Win32 Internet functions to detect this special type of redirect. When this flag is used, Win32 Internet functions transparently allow redirects from HTTPS to HTTP URLs. 
</DD><DT>INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTPS </DT><DD>Disables the ability of the Win32 Internet functions to detect this special type of redirect. When this flag is used, Win32 Internet functions transparently allow redirects from HTTP to HTTPS URLs. 
</DD><DT><A HREF="../constants/API_Flags.htm#INTERNET_FLAG_KEEP_C">INTERNET_FLAG_KEEP_CONNECTION</A> </DT><DD>Uses keep-alive semantics, if available, for the connection for HTTP requests. This flag is required for Microsoft Network (MSN), NT LAN Manager (NTLM), and other types of authentication.
</DD><DT><A HREF="../constants/API_Flags.htm#INTERNET_FLAG_MAKE_P">INTERNET_FLAG_MAKE_PERSISTENT</A> </DT><DD>No longer supported.
</DD><DT><A HREF="../constants/API_Flags.htm#INTERNET_FLAG_MUST_C">INTERNET_FLAG_MUST_CACHE_REQUEST</A> </DT><DD>Causes a temporary file to be created if the file cannot be cached. Identical to the preferred value, <A HREF="../constants/API_Flags.htm#INTERNET_FLAG_NEED_F">INTERNET_FLAG_NEED_FILE</A>. 
</DD><DT><A HREF="../constants/API_Flags.htm#INTERNET_FLAG_NEED_F">INTERNET_FLAG_NEED_FILE</A> </DT><DD>Causes a temporary file to be created if the file cannot be cached. 
</DD><DT><A HREF="../constants/API_Flags.htm#INTERNET_FLAG_NO_AUT">INTERNET_FLAG_NO_AUTH</A> </DT><DD>Does not attempt authentication automatically for HTTP requests.
</DD><DT><A HREF="../constants/API_Flags.htm#INTERNET_FLAG_NO_AUT">INTERNET_FLAG_NO_AUTO_REDIRECT</A> </DT><DD>Does not automatically handle redirection for HTTP requests only.
</DD><DT><A HREF="../constants/API_Flags.htm#INTERNET_FLAG_NO_CAC">INTERNET_FLAG_NO_CACHE_WRITE</A> </DT><DD>Does not cache the data, either locally or in any gateways.
</DD><DT><A HREF="../constants/API_Flags.htm#INTERNET_FLAG_NO_COO">INTERNET_FLAG_NO_COOKIES</A> </DT><DD>Does not automatically add cookie headers to requests, and does not automatically add returned cookies to the cookie database for HTTP requests. 
<!-- ************************ BRADYA: BEGIN UPDATE ************************ -->
</DD><DT><A HREF="../constants/API_Flags.htm#INTERNET_FLAG_NO_UI">INTERNET_FLAG_NO_UI</A> </DT><DD>Disables the cookie dialog box.
<!-- ************************ BRADYA: END UPDATE ************************** -->
</DD><DT>INTERNET_FLAG_PASSIVE </DT><DD>Uses passive FTP semantics for FTP files and directories.
</DD><DT>INTERNET_FLAG_RAW_DATA </DT><DD>Returns the data as a <A HREF="../structures/GOPHER_FIND_DATA.htm#GOPHER_FIND_DATA">GOPHER_FIND_DATA</A> structure when retrieving Gopher directory information, or as a
<object id="hhal_4" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_4.Click()>WIN32_FIND_DATA</A> structure when retrieving FTP directory information. If this flag is not specified or if the call was made through a CERN proxy, <B>InternetOpenUrl</B> returns an HTML version of the directory.
</DD><DT><A HREF="../constants/API_Flags.htm#INTERNET_FLAG_PRAGMA">INTERNET_FLAG_PRAGMA_NOCACHE</A> </DT><DD>Forces the request to be resolved by the origin server, even if a cached copy exists on the proxy. 
</DD><DT><A HREF="../constants/API_Flags.htm#INTERNET_FLAG_READ_P">INTERNET_FLAG_READ_PREFETCH</A>
 </DT><DD>This flag is currently disabled.
</DD><DT><A HREF="../constants/API_Flags.htm#INTERNET_FLAG_RELOAD">INTERNET_FLAG_RELOAD</A> </DT><DD>Gets the data from the wire even if it is locally cached.
</DD><DT><A HREF="../constants/API_Flags.htm#INTERNET_FLAG_RESYNC">INTERNET_FLAG_RESYNCHRONIZE</A> </DT><DD>Reloads HTTP resources if the resource has been modified since the last time it was downloaded. All FTP and Gopher resources are reloaded. 
</DD><DT><A HREF="../constants/API_Flags.htm#INTERNET_FLAG_SECURE">INTERNET_FLAG_SECURE</A> </DT><DD>Requests secure transactions on the wire with SSL or PCT. This flag applies to HTTP requests only. 
</DD></DL>
</DD><DT><I>dwContext</I> </DT><DD>Application-defined value that is passed, along with the returned handle, to any callback functions.
</DD></DL>
<P>This is a general function that an application can use to retrieve data over any of the protocols that the Win32 Internet functions support. This function is particularly useful when the application does not need to access the particulars of a protocol, but only requires the data corresponding to a URL. The <B>InternetOpenUrl</B> function parses the URL string, establishes a connection to the server, and prepares to download the data identified by the URL. The application can then use <A HREF="InternetReadFile.htm#InternetReadFile">InternetReadFile</A> (for files) or <A HREF="InternetFindNextFile.htm#InternetFindNextFile">InternetFindNextFile</A> (for directories) to retrieve the URL data. It is not necessary to call <A HREF="InternetConnect.htm#InternetConnect">InternetConnect</A> before <B>InternetOpenUrl</B>.

<P><B>InternetOpenUrl</B> disables Gopher on ports less than 1024, except for port 70 (the standard Gopher port) and port 105 (typically used for Central Services Organization [CSO] name searches).

<P>Use <A HREF="InternetCloseHandle.htm#InternetCloseHandle">InternetCloseHandle</A> to close the handle returned from <B>InternetOpenUrl</B>. However, note that closing the handle before all the URL data has been read results in the connection being terminated.
<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
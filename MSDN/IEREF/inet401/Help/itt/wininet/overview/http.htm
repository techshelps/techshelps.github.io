<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HTTP Sessions</TITLE>

<META NAME=MS-HKWD CONTENT="HTTP Sessions">
<META NAME="Keywords" CONTENT="Internet Tools & Technologies">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT, Mac">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="winineto_http"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="HTTP Sessions"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../../art/headbard.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="HTTP Sessions"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR>
<TR><TD><PRE><IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="introduction.htm#ch_winineto">Topic Contents</A></PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="gopher.htm">Gopher Sessions</A>
<IMG SRC="../../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="cookie.htm">Cookie Functions</A></PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>HTTP Sessions</H1>

<P>The Win32 Internet functions allow you to access resources on the World Wide Web (WWW). These resources can be accessed directly by using <A HREF="../functions/InternetOpenUrl.htm#InternetOpenUrl">InternetOpenUrl</A> (for more information, see <A HREF="url_functions.htm#Direct_Access">Accessing URLs directly</A>) or the HTTP functions.

<P>Resources on the WWW are accessed by using HTTP. The Win32 Internet functions include a set of stable HTTP functions that handle the underlying protocols, while allowing your application to access information on the WWW. As the HTTP protocol evolves, the underlying protocols will be updated to maintain HTTP function behavior.

<P>The following diagram shows the relationships of the Win32 Internet functions that are used for the HTTP protocol. The shaded boxes represent functions that return HINTERNET handles, while the plain boxes represent functions that use the HINTERNET handle created by the function on which they depend.

<P>
<P><IMG SRC="../../../art/AX_WNT05.gif" WIDTH="177" HEIGHT="230" ALT="Win32 Internet functions used for HTTP" >
<P>
<P>For more information on HINTERNET handles and the handle hierarchy, see <A HREF="appendix_a.htm#HINTERNET">Appendix A: HINTERNET Handles</A>.



<H2><A NAME="Using_the_Win32_Inte">Using the Win32 Internet Functions to Access the WWW</A></H2>
<P>The following functions are used during HTTP sessions to access the WWW.



<TABLE>
<TR><TD><B>Function
 </B></TD><TD><B>Description
</B></TD></TR>
<TR><TD><A HREF="../functions/HttpAddRequestHeaders.htm#HttpAddRequestHeader">HttpAddRequestHeaders</A> </TD><TD>Adds HTTP request headers to the HTTP request handle. This function requires a handle created by <A HREF="../functions/HttpOpenRequest.htm#HttpOpenRequest">HttpOpenRequest</A>.</TD></TR>
<TR><TD><A HREF="../functions/HttpOpenRequest.htm#HttpOpenRequest">HttpOpenRequest</A> </TD><TD>Opens an HTTP request handle. This function requires a handle created by <A HREF="../functions/InternetConnect.htm#InternetConnect">InternetConnect</A>.</TD></TR>
<TR><TD><A HREF="../functions/HttpQueryInfo.htm#HttpQueryInfo">HttpQueryInfo</A> </TD><TD>Queries information about an HTTP request. This function requires a handle created by the <A HREF="../functions/HttpOpenRequest.htm#HttpOpenRequest">HttpOpenRequest</A> or <A HREF="../functions/InternetOpenUrl.htm#InternetOpenUrl">InternetOpenUrl</A> function.</TD></TR>
<TR><TD><A HREF="../functions/HttpSendRequest.htm#HttpSendRequest">HttpSendRequest</A> </TD><TD>Sends the specified HTTP request to the HTTP server. This function requires a handle created by <A HREF="../functions/HttpOpenRequest.htm#HttpOpenRequest">HttpOpenRequest</A>.</TD></TR>
<TR><TD><A HREF="../functions/InternetErrorDlg.htm#InternetErrorDlg">InternetErrorDlg</A> </TD><TD>Displays predefined dialog boxes for common Internet error conditions. This function requires the handle used in the call to <A HREF="../functions/HttpSendRequest.htm#HttpSendRequest">HttpSendRequest</A>.</TD></TR></TABLE>
<H3><A NAME="Initiating_a_connect">Initiating a connection to the WWW</A></H3>
<P>To start a connection to the WWW, the application must call the <A HREF="../functions/InternetConnect.htm#InternetConnect">InternetConnect</A> function on the root HINTERNET returned by <A HREF="../functions/InternetOpen.htm#InternetOpen">InternetOpen</A>. <B>InternetConnect</B> must establish an HTTP session by declaring the INTERNET_SERVICE_HTTP service type. For more information on using <B>InternetConnect</B>, see <A HREF="enable.htm#Internet_Connect">Using InternetConnect</A>.



<H3><A NAME="Opening_a_request">Opening a request</A></H3>
<P>The <A HREF="../functions/HttpOpenRequest.htm#HttpOpenRequest">HttpOpenRequest</A> function opens an HTTP request and returns an HINTERNET handle that can be used by the other HTTP functions. Unlike the other open functions (such as <A HREF="../functions/FtpOpenFile.htm#FtpOpenFile">FtpOpenFile</A> and <A HREF="../functions/InternetOpenUrl.htm#InternetOpenUrl">InternetOpenUrl</A>), <B>HttpOpenRequest</B> does not send the request to the Internet when called. The <A HREF="../functions/HttpSendRequest.htm#HttpSendRequest">HttpSendRequest</A> function sends the request and establishes a connection over the network.

<P><A HREF="../functions/HttpOpenRequest.htm#HttpOpenRequest">HttpOpenRequest</A> takes an HTTP session handle created by <A HREF="../functions/InternetConnect.htm#InternetConnect">InternetConnect</A> and a verb, object name, version string, referrer, accept types, flags, and context value.

<P>The verb is a string to be used in the request. Common verbs used in requests include "GET", "PUT", and "POST". If this value is set to NULL, <A HREF="../functions/HttpOpenRequest.htm#HttpOpenRequest">HttpOpenRequest</A> uses the default value "GET".

<P>The object name is a string that contains the name of the specified verb's target object. This is generally a file name, an executable module, or a search specifier. If the object name supplied is an empty string, <A HREF="../functions/HttpOpenRequest.htm#HttpOpenRequest">HttpOpenRequest</A> looks for the default page.

<P>The version string should contain the HTTP version. If this parameter is set to NULL, the function uses "HTTP/1.0".

<P>The referrer specifies the address of the document from which the object name was obtained. If this parameter is NULL, no referrer is specified.

<P>The NULL-terminated string containing the accept types indicates the content types accepted by the application. Setting this parameter to NULL indicates that no content types are accepted by the application. If an empty string is supplied, the application is indicating it accepts only documents of type "text/*". The value "text/*" indicates text-only documents&#151;not pictures or other binary files.

<P>The flag values control caching, cookies, and security issues. For Microsoft Network (MSN), NTLM, and other types of authentication, set the INTERNET_FLAG_KEEP_CONNECTION flag.

<P>If the INTERNET_FLAG_ASYNC flag was set in the call to <A HREF="../functions/InternetOpen.htm#InternetOpen">InternetOpen</A>, a nonzero context value should be set for proper asynchronous operation.

<P>The following example is a sample call to <A HREF="../functions/HttpOpenRequest.htm#HttpOpenRequest">HttpOpenRequest</A>.

<PRE>hHttpRequest = HttpOpenRequest(hHttpSession, "GET", "", NULL, "", NULL, 0,0);
</PRE>
<H3><A NAME="Adding_request_heade">Adding request headers</A></H3>
<P>The Win32 Internet function <A HREF="../functions/HttpAddRequestHeaders.htm#HttpAddRequestHeader">HttpAddRequestHeaders</A> allows applications to add one or more request headers to the initial request. This function allows an application to append additional free-format headers to the HTTP request handle; it is intended for use by sophisticated applications that need precise control over the request sent to the HTTP server.

<P><A HREF="../functions/HttpAddRequestHeaders.htm#HttpAddRequestHeader">HttpAddRequestHeaders</A> needs an HTTP request handle created by <A HREF="../functions/HttpOpenRequest.htm#HttpOpenRequest">HttpOpenRequest</A>, a string containing the headers, the length of the headers, and modifiers.

<P>The following modifiers can be used with <A HREF="../functions/HttpAddRequestHeaders.htm#HttpAddRequestHeader">HttpAddRequestHeaders</A>:

<TABLE>
<TR><TD>HTTP_ADDREQ_FLAG_ADD </TD><TD>Adds the header if it does not exist. Used with HTTP_ADDREQ_FLAG_REPLACE. </TD></TR>
<TR><TD>HTTP_ADDREQ_FLAG_ADD_IF_NEW </TD><TD>Adds the header only if it does not already exist; otherwise, an error is returned.</TD></TR>
<TR><TD>HTTP_ADDREQ_FLAG_COALESCE </TD><TD>Coalesces headers of the same name.</TD></TR>
<TR><TD>HTTP_ADDREQ_FLAG_COALESCE_WITH_COMMA </TD><TD>Coalesces headers of the same name. For example, adding "Accept: text/*" followed by "Accept: audio/*" with this flag forms the single header "Accept: text/*, audio/*", causing the first header found to be coalesced. It is up to the calling application to ensure a cohesive scheme with respect to coalesced/separate headers.</TD></TR>
<TR><TD>HTTP_ADDREQ_FLAG_COALESCE_WITH_SEMICOLON </TD><TD>Coalesces headers of the same name, using a semicolon.</TD></TR>
<TR><TD>HTTP_ADDREQ_FLAG_REPLACE </TD><TD>Replaces or removes a header. If the header value is empty and the header is found, it is removed. If the header value is not empty, the header value is replaced.</TD></TR></TABLE>
<H3><A NAME="Sending_a_request">Sending a request</A></H3>
<P><A HREF="../functions/HttpSendRequest.htm#HttpSendRequest">HttpSendRequest</A> establishes a connection to the Internet and sends the request to the specified site. This function requires an HINTERNET handle created by <A HREF="../functions/HttpOpenRequest.htm#HttpOpenRequest">HttpOpenRequest</A>. <B>HttpSendRequest</B> can also send additional headers or optional information. The optional information is generally used for operations that write information to the server, such as PUT and POST.

<P>After <A HREF="../functions/HttpSendRequest.htm#HttpSendRequest">HttpSendRequest</A> sends the request, the application can use the <A HREF="../functions/InternetReadFile.htm#InternetReadFile">InternetReadFile</A>, <A HREF="../functions/InternetQueryDataAvailable.htm#InternetQueryDataAva">InternetQueryDataAvailable</A>, and <A HREF="../functions/InternetSetFilePointer.htm#InternetSetFilePoint">InternetSetFilePointer</A> functions on the HINTERNET handle created by <A HREF="../functions/HttpOpenRequest.htm#HttpOpenRequest">HttpOpenRequest</A> to download the server's resources.



<H3><A NAME="Posting_data_to_the_">Posting data to the server</A></H3>
<P>To post data to a server, the verb in the call to <A HREF="../functions/HttpOpenRequest.htm#HttpOpenRequest">HttpOpenRequest</A> must be either "POST" or "PUT". The address of the buffer containing the POST data should then be passed to the <I>lpOptional</I> parameter in <A HREF="../functions/HttpSendRequest.htm#HttpSendRequest">HttpSendRequest</A>. The <I>dwOptionalLength</I> parameter should be set to the size of the data.

<P>Using the Microsoft Internet Explorer 4.0 version of WinInet, you can also use the <A HREF="../functions/InternetWriteFile.htm#InternetWriteFile">InternetWriteFile</A> function to post data on an HINTERNET handle sent using <A HREF="../functions/HttpSendRequestEx.htm#HttpSendRequestEx">HttpSendRequestEx</A>.



<H3><A NAME="Getting_information_">Getting information about a request</A></H3>
<P><A HREF="../functions/HttpQueryInfo.htm#HttpQueryInfo">HttpQueryInfo</A> allows an application to retrieve information about an HTTP request. The function requires an HINTERNET handle created by <A HREF="../functions/HttpOpenRequest.htm#HttpOpenRequest">HttpOpenRequest</A> or <A HREF="../functions/InternetOpenUrl.htm#InternetOpenUrl">InternetOpenUrl</A>, an information level value, and a buffer length. <B>HttpQueryInfo</B> also accepts a buffer that stores the information and a zero-based header index that enumerates multiple headers with the same name. 

<P>The following information level values can be used with a modifier to control the format in which the information is stored in <I>lpvBuffer</I>:

<TABLE>
<TR><TD>HTTP_QUERY_ALLOW </TD><TD>Receives the methods supported by the server.</TD></TR>
<TR><TD>HTTP_QUERY_CONTENT_DESCRIPTION </TD><TD>Receives the content description. </TD></TR>
<TR><TD>HTTP_QUERY_CONTENT_ID </TD><TD>Receives the content identification.</TD></TR>
<TR><TD>HTTP_QUERY_CONTENT_LENGTH </TD><TD>Receives the size of the resource in bytes.</TD></TR>
<TR><TD>HTTP_QUERY_CONTENT_TRANSFER_ENCODING </TD><TD>Receives the additional content coding that has been applied to the resource.</TD></TR>
<TR><TD>HTTP_QUERY_CONTENT_TYPE </TD><TD>Receives the content type of the resource (such as text/html). </TD></TR>
<TR><TD>HTTP_QUERY_DATE </TD><TD>Receives the date and time at which the message was originated.</TD></TR>
<TR><TD>HTTP_QUERY_EXPIRES </TD><TD>Receives the date and time after which the resource should be considered outdated.</TD></TR>
<TR><TD>HTTP_QUERY_LAST_MODIFIED </TD><TD>Receives the date and time at which the server believes the resource was last modified.</TD></TR>
<TR><TD>HTTP_QUERY_MIME_VERSION </TD><TD>Receives the version of the MIME protocol that was used to construct the message.</TD></TR>
<TR><TD>HTTP_QUERY_PRAGMA </TD><TD>Receives the implementation-specific directives that might apply to any recipient along the request/response chain.</TD></TR>
<TR><TD>HTTP_QUERY_PUBLIC </TD><TD>Receives the methods available from this server.</TD></TR>
<TR><TD>HTTP_QUERY_RAW_HEADERS </TD><TD>Receives all the headers returned by the server. Each header is terminated by "\0". An additional "\0" terminates the list of headers.</TD></TR>
<TR><TD>HTTP_QUERY_RAW_HEADERS_CRLF </TD><TD>Receives all the headers returned by the server. Each header is separated by a carriage return/line feed (CR/LF) sequence.</TD></TR>
<TR><TD>HTTP_QUERY_REQUEST_METHOD </TD><TD>Receives the verb that is being used in the request, typically GET or POST.</TD></TR>
<TR><TD>HTTP_QUERY_STATUS_CODE </TD><TD>Receives the status code returned by the server.</TD></TR>
<TR><TD>HTTP_QUERY_STATUS_TEXT </TD><TD>Receives any additional text returned by the server on the response line.</TD></TR>
<TR><TD>HTTP_QUERY_URL </TD><TD>Receives some or all of the URLs by which the Request-URL resource can be identified.</TD></TR>
<TR><TD>HTTP_QUERY_VERSION </TD><TD>Receives the last response code returned by the server.</TD></TR></TABLE>
<P>The following modifiers can be used with the information values:

<TABLE>
<TR><TD>HTTP_QUERY_CUSTOM </TD><TD>Causes <A HREF="../functions/HttpQueryInfo.htm#HttpQueryInfo">HttpQueryInfo</A> to search for the ASCIIZ header name specified in <I>lpvBuffer</I> and store the header information in <I>lpvBuffer</I>.</TD></TR>
<TR><TD>HTTP_QUERY_FLAG_COALESCE </TD><TD>Combines the values from headers with the same name into the output buffer.</TD></TR>
<TR><TD>HTTP_QUERY_FLAG_NUMBER </TD><TD>Returns the data as a 32-bit number for headers whose value is a number, such as the status code.</TD></TR>
<TR><TD>HTTP_QUERY_FLAG_REQUEST_HEADERS </TD><TD>Queries request headers only.</TD></TR>
<TR><TD>HTTP_QUERY_FLAG_SYSTEMTIME </TD><TD>Returns the header value as a standard Win32
<object id="hhal_3" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Further_Reading>
</object><A HREF=JavaScript:hhal_3.Click()>SYSTEMTIME</A> structure, which does not require the application to parse the data. Use for headers whose value is a date/time string, such as "Last-Modified-Time". </TD></TR>
<TR><TD>HTTP_QUERY_INFO_NUMBER </TD><TD>Sets the data type returned by <A HREF="../functions/HttpQueryInfo.htm#HttpQueryInfo">HttpQueryInfo</A> to a DWORD.</TD></TR></TABLE>
<H3><A NAME="Downloading_resource">Downloading resources from the WWW</A></H3>
<P>After opening a request with <A HREF="../functions/HttpOpenRequest.htm#HttpOpenRequest">HttpOpenRequest</A> and sending it to the server with <A HREF="../functions/HttpSendRequest.htm#HttpSendRequest">HttpSendRequest</A>, the application can use the <A HREF="../functions/InternetReadFile.htm#InternetReadFile">InternetReadFile</A>, <A HREF="../functions/InternetQueryDataAvailable.htm#InternetQueryDataAva">InternetQueryDataAvailable</A>, and <A HREF="../functions/InternetSetFilePointer.htm#InternetSetFilePoint">InternetSetFilePointer</A> functions to download the resource from the HTTP server.

<P>The following example downloads a resource. The function accepts the handle to the current window, the identification number of an edit box, and an HINTERNET handle created by <A HREF="../functions/HttpOpenRequest.htm#HttpOpenRequest">HttpOpenRequest</A> and sent by <A HREF="../functions/HttpSendRequest.htm#HttpSendRequest">HttpSendRequest</A>. It uses <A HREF="../functions/InternetQueryDataAvailable.htm#InternetQueryDataAva">InternetQueryDataAvailable</A> to determine the size of the resource and then downloads it using <A HREF="../functions/InternetReadFile.htm#InternetReadFile">InternetReadFile</A>. The contents are then displayed in the edit box.

<!-- ************************ BRADYA: BEGIN UPDATE ************************ -->
<PRE>int WINAPI Dumper(HWND hX, int intCtrlID, HINTERNET hResource)
{
     LPSTR     lpszData;          // buffer for the data
     DWORD     dwSize;               // size of the data available
     DWORD     dwDownloaded;     // size of the downloaded data
     DWORD     dwSizeSum=0;     // size of the data in the textbox
     LPSTR     lpszHolding;     // buffer to merge the textbox data and buffer

     // Set the cursor to an hourglass.
     SetCursor(LoadCursor(NULL,IDC_WAIT));


     // This loop handles reading the data.  
     do
     {
          // The call to InternetQueryDataAvailable determines the amount of 
          // data available to download.
          if (!InternetQueryDataAvailable(hResource,&amp;dwSize,0,0))
          {
               ErrorOut(hX,GetLastError(),"InternetReadFile");
               SetCursor(LoadCursor(NULL,IDC_ARROW));
               return FALSE;
          }
          else
          {     
               // Allocates a buffer of the size returned by InternetQueryDataAvailable
               lpszData = new char[dwSize+1];

               // Reads the data from the HINTERNET handle.
               if(!InternetReadFile(hResource,(LPVOID)lpszData,dwSize,&amp;dwDownloaded))
               {
                    ErrorOut(hX,GetLastError(),"InternetReadFile");
                    delete[] lpszData;
                    break;
               }
               else
               {
                    // Adds a null terminator to the end of the data buffer
                    lpszData[dwDownloaded]='\0';

                    // Allocates the holding buffer
                    lpszHolding = new char[dwSizeSum + dwDownloaded + 1];
                    
                    // Checks if there has been any data written to the textbox
                    if (dwSizeSum != 0)
                    {
                         // Retrieves the data stored in the textbox if any
                         GetDlgItemText(hX,intCtrlID,(LPSTR)lpszHolding,dwSizeSum);
                         
                         // Adds a null terminator at the end of the textbox data
                         lpszHolding[dwSizeSum]='\0';
                    }
                    else
                    {
                         // Make the holding buffer an empty string. 
                         lpszHolding[0]='\0';
                    }

                    // Adds the new data to the holding buffer
                    strcat(lpszHolding,lpszData);

                    // Writes the holding buffer to the textbox
                    SetDlgItemText(hX,intCtrlID,(LPSTR)lpszHolding);

                    // Delete the two buffers
                    delete[] lpszHolding;
                    delete[] lpszData;

                    // Add the size of the downloaded data to the textbox data size
                    dwSizeSum = dwSizeSum + dwDownloaded + 1;

                    // Check the size of the remaining data.  If it is zero, break.
                    if (dwDownloaded == 0)
                         break;
               }
          }
     }
     while(TRUE);

     // Close the HINTERNET handle
     InternetCloseHandle(hResource);

     // Set the cursor back to an arrow
     SetCursor(LoadCursor(NULL,IDC_ARROW));

     // Return
     return TRUE;
}
</PRE>
<!-- ************************ BRADYA: BEGIN UPDATE ************************ --><!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Overview</TITLE>

<META NAME=MS-HKWD CONTENT="Overview">
<META NAME="Keywords" CONTENT="Internet Tools & Technologies">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT, Mac">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="xml_ovr"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Overview"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../../art/headbard.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Overview"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR>
<TR><TD><PRE><IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="../xmlobj.htm#ch_xmlobj">Topic Contents</A></PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="../xmlobj.htm">XML Object Model</A>
<IMG SRC="../../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="Sample_1.htm">Sample 1: Parsing an XML file</A></PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>Overview</H1>

<P>The most generic object model for an XML document will be able to take in any XML document as input and provide to the application a means of manipulating this XML document. For more information on XML, see <A HREF="http://www.microsoft.com/sitebuilder/standards/xml/" TARGET="_top">http://www.microsoft.com/sitebuilder/standards/xml/</A>.

<P><B>Note</B>  Applications should not use fibers on any thread on which the XML Object Model is created by calling <A HREF="../../monikers/ifaces/ipersistmoniker/Load.htm#IPersistMoniker__Loa">IPersistMoniker::Load</A>, since the Msxml.dll uses fibers for asynchronous downloads and they may interfere with each other.
<P>XML-based documents are currently being used for at least two different applications for Microsoft Internet Explorer 4.0: 

<UL><LI>CDF files (Channel Definition Format), where a channel is a Web site that has been enabled for Webcasting to information-receiving programs such as Internet Explorer 4.0. The mechanism that makes this possible in Internet Explorer 4.0 is the CDF file. The CDF file provides an index of resources available in the channel, and a recommended schedule for when the channel should be updated on the local computer. 



<LI>XML-based documents are also being used in Internet Explorer 4.0 for describing download modules for download of code in the form of cabinet files, Java packages, and so on. This new format is meant to supersede .inf files and is called the Open Software Description (OSD) format. 




</UL>
<P>The interfaces in the following section describe a minimal set of objects that can be used to construct an object model for XML. In the future (post Internet Explorer 4.0), this object model will be extended to allow for a richer set of methods. 
 
The goals for the design of this set of interfaces as well as the justification for those goals are, in order of priority:

<UL><LI>The object model should enable the ability to manipulate any generic XML document. However, the methods needed for manipulating a CDF were highest in priority.
<LI>The feel of the object model should mimic that of the IE4/MSHTML object model as closely as possible. This is to enable a programmer familiar with IE4/MSHTML to get started easily. 
</UL>
<H2><A NAME="Object_Model_Overvie">Object Model Overview</A></H2>
<P>The object model is free-threaded, thus no marshaling is required.

<P>An XML document can be thought of as a tree. A container tag is a nonleaf node in this tree. Tags that do not contain any other tags end up as leaf nodes of this tree. A root element whose children are all the top-level nodes is imposed.




<H2><A NAME="Samples">Samples</A></H2>
<P>This section contains some simple implementations of the XML object model. The samples are:

<UL><LI><A HREF="Sample_1.htm#Sample_1">Sample 1: Parsing an XML file</A>
<LI><A HREF="Sample_2.htm#Sample_2">Sample 2: Parsing a CDF file for specific tags</A>
<LI><A HREF="Sample_3.htm#Sample_3">Sample 3: Using IPersistMoniker::Load to load a document</A>
<LI><A HREF="Sample_4.htm#Sample_4">Sample 4: Parsing an XML file using JScript</A>
</UL>
<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
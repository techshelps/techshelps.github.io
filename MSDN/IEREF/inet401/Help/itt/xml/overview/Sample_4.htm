<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Sample 4: Parsing an XML file using JScript</TITLE>

<META NAME=MS-HKWD CONTENT="Sample 4: Parsing an XML file using JScript">
<META NAME="Keywords" CONTENT="Internet Tools & Technologies">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT, Mac">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="Sample_4"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Sample 4: Parsing an XML file using JScript"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../../art/headbard.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Sample 4: Parsing an XML file using JScript"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR>
<TR><TD><PRE><IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="../xmlobj.htm#ch_xmlobj">Topic Contents</A></PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="Sample_3.htm">Sample 3: Using IPersistMoniker::Load to load a document</A>
<IMG SRC="../../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="../reference.htm">Reference</A></PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>Sample 4: Parsing an XML file using JScript</H1>

<PRE>&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;JScript XML Sample&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BR&gt;
&lt;H1&gt;&lt;B&gt;&lt;CENTER&gt;JScript XML Sample&lt;/B&gt;&lt;/H1&gt;
&lt;P&gt;This page demonstrates using XML in JScript. Enter a valid XML or CDF file in the 
text box below and it will be parsed using MSXML and JScript. CDF is based on XML.
Information about each element in the file will be displayed in another window. For more
information on CDF, please see the &lt;A HREF="http://www.microsoft.com/ie/authors/"&gt;Internet
Explorer 4.0 authors and developers &lt;/A&gt; site.

&lt;P&gt;Enter an XML or CDF file name:&lt;BR&gt;
&lt;INPUT TYPE=TEXT NAME="cdfURL" VALUE="" size=50&gt;&lt;BR&gt;

&lt;OBJECT
    classid="clsid:CFC399AF-D876-11D0-9C10-00C04FC99C8E"
    id="MSXML"
    Name="xmlDoc"&gt;
&lt;/OBJECT&gt;

&lt;BR&gt;&lt;BR&gt;

&lt;INPUT TYPE = "BUTTON"
    NAME = "ParseCDF"     
    VALUE = "Parse The XML/CDF File"
    onClick = "WalkXMLMain(cdfURL.value)"&gt;

&lt;/CENTER&gt;

&lt;SCRIPT&gt;
var win;                                // status goes here
var doc;                                // document to write on
var knownAttrs = new Object;            // element attribute variable

//
// Display the attribute. 
//
function dumpAttrs(elem)
{
    var i, val, result = "";
  
    for (i in knownAttrs)
    {
    val = elem.getAttribute(knownAttrs[i]);
        if ((val != "") &amp;&amp; (val != null))
            result = result + knownAttrs[i] + "=" + val + " ";
    }

    return result;
}

//
// Display the element information for each element in the file. 
//
function dumpElement(elem)
{
    var children, cChildren, child
    var i, length;

    if (elem == null)
    {
        alert("elem == null");
        window = document;              //      Force a run-time error to bail
    }

    children = elem.children;
    if (children != null)
    length = children.length;
    else
    length = 0;

// Display the element information in the table.
    doc.write("&lt;TR&gt;&lt;TD&gt;" + GetTagName(elem) + "&lt;/TD&gt;");
    doc.write("&lt;TD&gt;" + GetType(elem.type) + "&lt;/TD&gt;");
    if (elem.parent != null) // skip text for root node
    doc.write("&lt;TD&gt;" + elem.text + "&lt;/TD&gt;");
    else
    doc.write("&lt;TD&gt;" + " " + "&lt;/TD&gt;");
    doc.write("&lt;TD&gt;" + dumpAttrs(elem) + "&lt;/TD&gt;");
    doc.write("&lt;TD&gt;" + GetParentTag(elem) + "&lt;/TD&gt;");        
    doc.write("&lt;TD&gt;" + length + "&lt;/TD&gt;&lt;/TR&gt;");

// If the element has children, call dumpElement again
    if (children != null)
    {

        cChildren = children.length;

        for (i = 0; i &lt; cChildren; i++)
        {
            child = children.item(i);
            dumpElement(child);
        }
    }
}

//
// Initialize the knownAttrs variable.
//
function loadKnownAttrs()
{
// Incomplete list, just for example.
    knownAttrs[0] = "HREF";
    knownAttrs[1] = "STYLE";
    knownAttrs[2] = "HOUR";
    knownAttrs[3] = "DAY";
    knownAttrs[4] = "MIN";
    knownAttrs[5] = "IsClonable";
    knownAttrs[6] = "Type";
    knownAttrs[7] = "BASE";
    knownAttrs[8] = "SELF";
}

//
// Write information to the browser status bar.
//
function setStatus(s)
{
    win.status = s;
}

//
// Main function, calls dumpElement.
//
function WalkXMLMain(cdfName)
{
    var startTime = new Date();
    var CDFFile, xmlDoc;

    win = window.open("", "XMLOutput");
    doc = win.document;

    doc.writeln("&lt;HTML&gt;");
    doc.writeln("&lt;TITLE&gt;XML Output&lt;/TITLE&gt;");
    doc.writeln("&lt;BODY&gt;");
    doc.writeln("&lt;PRE&gt;");

    setStatus("Loading known attributes...");
    loadKnownAttrs();

    setStatus("Creating XML object...");
    xmlDoc = MSXML;

    setStatus("Loading XML document...");
    xmlDoc.URL = cdfName;
    setStatus("File has been assigned to xmlDoc.URL");

// Show the document information.
    ShowDocInfo(xmlDoc);

// Initialize the table for the element information.
    MakeNodeHeader(win);

// Traverse the XML tree showing the element information.
    dumpElement(xmlDoc.root);

    doc.writeln("&lt;/TABLE&gt;");
    var stopTime = new Date();
    doc.writeln("&lt;FONT SIZE=&amp;quot+1&amp;quot&gt;&lt;P&gt;Start: " + startTime + "   Stop: " + stopTime + "&lt;/FONT&gt;");
    doc.writeln("&lt;/PRE&gt;");
    doc.writeln("&lt;/BODY&gt;");
    doc.writeln("&lt;/HTML&gt;");
    
    xmlDoc = null;
    setStatus("Done!");
}

//
// Initialize the table for the element information.
//
function MakeNodeHeader(win)
{
    doc.writeln("&lt;BR&gt;&lt;BR&gt;&lt;H2&gt;Element Information&lt;/H2&gt;&lt;/CENTER&gt;");
    doc.write("&lt;FONT SIZE=&amp;quot+1&amp;quot&gt;&lt;P&gt;The properties of each node in the XML file is listed in the following table.&lt;BR&gt;&lt;BR&gt;&lt;/FONT&gt;");

    doc.write("&lt;TABLE BORDER CELLSPACING=2 CELLPADDING=2&gt;");
    doc.write("&lt;TR&gt;&lt;TD ALIGN=LEFT&gt;&lt;B&gt;Tag Name&lt;/B&gt;&lt;/TD&gt;");
    doc.write("&lt;TD ALIGN=LEFT&gt;&lt;B&gt;Type&lt;/B&gt;&lt;/TD&gt;");
    doc.write("&lt;TD ALIGN=LEFT&gt;&lt;B&gt;Text (if any)&lt;/B&gt;&lt;/TD&gt;");
    doc.write("&lt;TD ALIGN=LEFT&gt;&lt;B&gt;Attribute&lt;/B&gt;&lt;/TD&gt;");
    doc.write("&lt;TD ALIGN=LEFT&gt;&lt;B&gt;Parent&lt;/B&gt;&lt;/TD&gt;");
    doc.write("&lt;TD ALIGN=LEFT&gt;&lt;B&gt;# of Children&lt;/B&gt;&lt;/TD&gt;&lt;/TR&gt;");
}

//
// Return the element type. 
//
function GetType(type)
{

  if (type == 0)
    return "ELEMENT";

  if (type == 1)
    return "TEXT";

  if (type == 2)
    return "COMMENT";

  if (type == 3)
    return "DOCUMENT";

  if (type == 4)
    return "DTD";
  else
    return "OTHER";
}

//
// Return the tag name.
//
function GetTagName(elem)
{
  if (elem.type == 0)
    return elem.tagName;
  else
    return " ";
}

//
// Return the parent tag name.
//
function GetParentTag(elem)
{
  if (elem.parent != null)
    return GetTagName(elem.parent);
  else
    return " ";
}

//
// Display document information about the XML file.
//
function ShowDocInfo(xmlDoc)
{
  doc.writeln("&lt;FONT FACE=&amp;quottimes&amp;quot SIZE=&amp;quot+1&amp;quot&gt;&lt;CENTER&gt;&lt;H2&gt;Document Information&lt;/H2&gt;");
  if (xmlDoc.URL != null)
    doc.writeln("&lt;P&gt;URL is: " + xmlDoc.URL);
  doc.writeln("&lt;P&gt;Version is: " + xmlDoc.version);
  if (xmlDoc.doctype != null)
    doc.writeln("&lt;P&gt;Doc Type is: " + xmlDoc.doctype);
  if (xmlDoc.readyState != null)
    doc.writeln("&lt;P&gt;Ready State is: " + GetReadyState(xmlDoc.readyState));
  if (xmlDoc.charset != null)
    doc.writeln("&lt;P&gt;Character Set is: " + xmlDoc.charset);
}

//
// Return the ready state of the document.
//
function GetReadyState(state)
{
  if (state == 0)
    return "READYSTATE_UNINTIALIZED";
  if (state == 1)
    return "READYSTATE_LOADING";
  if (state == 2)
    return "READYSTATE_LOADED";
  if (state == 3)
    return "READYSTATE_INTERACTIVE";
  if (state == 4)
    return "READYSTATE_COMPLETE";
  else
    return "undefined";
}

&lt;/SCRIPT&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>
<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
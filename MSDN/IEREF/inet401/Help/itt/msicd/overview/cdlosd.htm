<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Extending Internet Component Download Using OSD</TITLE>

<META NAME=MS-HKWD CONTENT="Extending Internet Component Download Using OSD">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="Keywords" CONTENT="OSD, Open Software Description, Internet Component Download, MSICD">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="CDL_OSD"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Extending Internet Component Download Using OSD"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../../art/headbard.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Extending Internet Component Download Using OSD"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR>
<TR><TD><PRE><IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" ID="TOPIC_CONTENTS" HREF="overview.htm">Topic Contents</A></PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" ID="PRE_TOPIC" HREF="cdlinf.htm">Internet Component Download Using INF</A>
<IMG SRC="../../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" ID="NEXT_TOPIC" ID="NEXT_TOPIC" href="../reference/reference.htm">Microsoft Internet Component Download Reference</A></PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<h1>Extending Internet Component Download Using OSD</h1>

<p>Microsoft&#174; Internet Explorer 3.0 introduced the Internet Component Download (ICD) mechanism. When visiting a Web page, ICD lets your browser pull down and install programs from the Internet automatically. This gave any software author or vendor the ability to package an application and place it on a server for download.  But Internet Component Download, as implemented in Internet Explorer 3.0, was limited for the following reasons:

<UL>
<LI>No support for Java class libraries</LI>
<LI>No support for stand-alone Java applications</LI>
<LI>INF files are not written according to any standard syntax or grammar</LI>
<LI>Old distribution units are limited in flexibility because they cannot adequately express software dependencies</LI>
</UL>

<P>Open Software Description (OSD) provides the Internet Component Download mechanism with the ability to download Java applications, Java packages, and ActiveX&#153; Controls. OSD also provides the ability to handle complex file dependencies that might be spread out over multiple distribution units on the Internet, and provides automatic installation of missing components.

<p>For more information on Internet Component Download, see the <a href="../icd.htm">Microsoft Internet Component Download</a> documentation.





<h2>Supporting the Extended Functionality</h2>

<P>Each distribution unit requires a single OSD file that contains the installation instructions for the application, just as an INF file does. The advantages of OSD are that it is more expressive than INF and it is being written in a standardized form.

<P>An OSD file is supported in the following cases:

<ul>
<LI><b>Inclusion in cabinet (CAB) files</b>

<p>Exactly one file in the CAB can be an OSD file.  The inclusion of an INF file in CAB is still supported for compatibility. Therefore, a CAB file should contain one OSD file, one INF file, or both an INF file and an OSD file. If both file types are present and your browser (for example, Microsoft Internet Explorer 4.0) knows about OSD files, the CAB is processed according to the following priorities:

<OL>
<LI>The parser looks inside the current CAB for the OSD file. If found, it is processed. It is also legal for the OSD file to reference the INF file. In this case, both files are processed, but notice that the OSD file is really in control here. </LI> 
<LI>If there is no OSD file present, the parser looks for an INF file to process.</LI>
</OL>

<P>If your browser (for example, Internet Explorer 3.0) does not know about Open Software Description, the INF file is processed first because that is the only option.</li>

<LI><b>In the <b>CODEBASE</b> attribute of the <b>OBJECT</b> element</b> 

<p>The <a href="../../../dhtml/references/html/OBJECT.htm#CODEBASE_">CODEBASE</a> attribute can now point to a stand-alone OSD file, which presents the same security/trust issue as having it point to a stand-alone INF file. Both of these are flat text and are not signable with Authenticode&#153; tools today, so component download will treat them as unsigned. Microsoft Internet Explorer will decline trust in the default browser security modes. One solution is to package the OSD file as the only file in a single CAB file and sign the CAB file.</li>
</ul>




<h3><a name="Skeleton">OSD skeleton</a></h3>

<p>All OSD files use the same basic skeleton.  Each OSD file starts out with the Extensible Markup Language (XML) version identification and the documentation type declaration.  The documentation type declaration includes the path to the OSD document type declaration (DTD) file, which describes all the elements that are supported by OSD.

<p>The following example shows the XML version identification and documentation type declaration (with the actual location of the OSD DTD file).

<pre>&lt;?XML version="1.0"?>
&lt;!DOCTYPE SOFTPKG SYSTEM "http://www.microsoft.com/standards/osd/osd.dtd">
</pre>

<p>In many instances, the OSD file requires a richer vocabulary to describe the software or its dependencies.  For example, describing native code or Java applications requires the elements defined in the Microsoft Internet Component Download DTD file.  To include the Internet Component Download DTD file, an XML name space can be created that references that DTD file.

<p>The following example shows how to create the XML name space <b>msicd</b> for the Internet Component Download DTD file.

<pre>&lt;?XML::namespace href="http://www.microsoft.com/standards/osd/msicd.dtd" as="msicd"?>
</pre>

<p>The XML name space allows any of the elements defined in the <a href="../reference/reference.htm">Microsoft Internet Component Download Reference</a> to be used in the following format:

<pre>msicd::&lt;element>
</pre>

<p>where &lt;element> is an element described in the reference.

<P>The main section of an OSD file begins and ends with the <a href="../../osd/reference/SOFTPKG.htm">SOFTPKG</a> tag. The three major sections enclosed inside <b>SOFTPKG</b> are used to express installation instructions for Java code, native code (meaning that the files are platform-dependent), and dependency code (one program is used by another). The basic OSD skeleton looks like this:

<pre>&lt;?XML version="1.0"?>
&lt;!DOCTYPE SOFTPKG SYSTEM "http://www.microsoft.com/standards/osd/osd.dtd">
&lt;?XML::namespace href="http://www.microsoft.com/standards/osd/msicd.dtd" as="msicd"?>

&lt;SOFTPKG NAME=&quot;unique name of distribution&quot; VERSION=&quot;4,0,5,0&quot; STYLE=&quot;MSICD&quot;&gt;
    &lt;MSICD::JAVA&gt; ... &lt;/MSICD::JAVA&gt;
    &lt;MSICD::NATIVECODE&gt; ... &lt;/MSICD::NATIVECODE&gt;
    &lt;DEPENDENCY&gt; ... &lt;/DEPENDENCY&gt;
&lt;/SOFTPKG&gt;
</pre>



<h4><a name="Integrate_Java">Integration with Java</a></h4>

<P>Unlike INF files, OSD files support the inclusion of Java packages and stand-alone Java applications in a distribution unit. Specifically, this is done with the <a href="../reference/JAVA.htm">JAVA</a> and <a href="../reference/PACKAGE.htm">PACKAGE</a> tags.

<pre>&lt;MSICD::JAVA&gt;
    &lt;PACKAGE NAME=&quot;com.ms.package.basic&quot; VERSION=&quot;1,1,0,0&quot;&gt;
    .
    .
    .
    &lt;/PACKAGE&gt;
&lt;/MSICD::JAVA&gt;
</pre>



<h3>Relationship between OSD and INF</h3>

<P>As mentioned previously, an OSD file is a markup tag file written according to XML syntax and grammar. An INF file is a file containing name-value pairs. Both serve the same purpose of specifying file dependency, program version number, and computer configuration information.

<P>Using OSD to describe distribution units allows a cascading model, where one distribution unit can be dependent on others, which in turn can be dependent on others, and so on. In contrast, INF can express only one level of dependency. Allowing a component to specify dependencies at a high level allows installation details of dependencies to stay within their CABs versus cluttering the main OSD.

<h4>Pointing to an INF from the OSD</h4>

<P>One can point to an INF in the same CAB as the OSD, for further processing of a subset of setup in the following manner. Setup capability, such as adding/modifying registry entries, advanced setup functionality in custom destination directories, and so on, is not available in the OSD syntax and so would require being pointed to by an accompanying INF file in the CAB.


<pre>&lt;MSICD::NATIVECODE&gt;
    &lt;CODE NAME=&quot;Adventure Works Goodbye World&quot;
    CLASSID=&quot;84D8E454-1000-1000-1000-45EA43332000&quot;
    VERSION=&quot;1,0,0,0&quot;&gt;
        &lt;IMPLEMENTATION&gt;
            &lt;OS VALUE=&quot;win95&quot; / &gt;
            &lt;CODEBASE FILENAME=&quot;goodby.inf&quot; /&gt;
        &lt;/IMPLEMENTATION&gt;
    &lt;/CODE&gt;
&lt;/MSICD::NATIVECODE&gt;
</pre>





<h3>Sample OSD file sections</h3>

<P>Building on the <a href="#Skeleton">OSD Skeleton</a> and <a href="#Integrate_Java">Integration with Java</a> sections, which contained small samples of what an OSD file looks like, this section will show examples of OSD usage.

<h4>Introducing the distribution</h4>

<P>As previously mentioned, &lt;SOFTPKG&gt; and  &lt;/SOFTPKG&gt; are the opening and closing tags in the main section of an OSD file. This is analogous to the roles that  &lt;HTML&gt; and &lt;/HTML&gt; play in an HTML file. After the opening <a href="../../osd/reference/SOFTPKG.htm">SOFTPKG</a>, the <a href="../../osd/reference/TITLE.htm">TITLE</a> and <a href="../../osd/reference/ABSTRACT.htm">ABSTRACT</a> elements are used to give a more verbose description of the distribution.

<pre>&lt;?XML version="1.0"?>
&lt;!DOCTYPE SOFTPKG SYSTEM "http://www.microsoft.com/standards/osd/osd.dtd">
&lt;?XML::namespace href="http://www.microsoft.com/standards/osd/msicd.dtd" as="msicd"?>

&lt;SOFTPKG NAME=&quot;unique name or GUID&quot; VERSION=&quot;1,0,0,0&quot; STYLE=&quot;MSICD&quot;&gt;
    &lt;TITLE&gt;My Very First Distribution!&lt;/TITLE&gt;
    &lt;ABSTRACT&gt;This software distribution will install
        my Hello World program written in C++&lt;/ABSTRACT&gt;
    .
    .
    .
&lt;/SOFTPKG&gt;
</pre>

<h4>Setting the file location</h4>

<P>Use the <a href="../../osd/reference/CODEBASE.htm">CODEBASE</a> element to tell the client browser where the files are located. The simplest case is if the files are already in the same CAB as the OSD file. If this is the case, don't use <B>CODEBASE</B> at all. Your browser will automatically look in the current CAB.

<P>If the files are somewhere on the Internet, make <B>CODEBASE</B> point to that URL.

<pre>&lt;CODEBASE HREF=&lt;A HREF="http://www.server1.com/install-me.cab">
    http://www.server1.com/install-me.cab&lt;/A> / &gt;
</pre>


<h4>Handling different computer setups</h4>

<P>Use the <a href="../../osd/reference/IMPLEMENTATION.htm">IMPLEMENTATION</a> element to indicate what type of hardware your code requires. The following example shows that the program &quot;Adventure Works Hello World&quot; version 1.1 is available for three types of computer setups: a PC running Microsoft Windows&#174; 95, a PC running Microsoft Windows NT&#174;, and a Macintosh&#174; running MacOS.

<pre>&lt;MSICD::NATIVECODE&gt;
    &lt;CODE NAME=&quot;Adventure Works Hello World&quot;
    CLASSID=&quot;84D8E454-0001-0001-0001-45EA43332000&quot;
    VERSION=&quot;1,1,0,0&quot; &gt;

        &lt;IMPLEMENTATION&gt;
            &lt;OS VALUE=&quot;win95&quot; /&gt;
            &lt;CODEBASE HREF=&quot;&lt;A HREF="http://www.programs-r-us/hello-
                95.cab">http://www.programs-r-us/hello-95.cab&lt;/A>&quot; /&gt;
        &lt;/IMPLEMENTATION&gt;

        &lt;IMPLEMENTATION&gt;
            &lt;OS VALUE=&quot;winnt&quot; /&gt;
            &lt;CODEBASE HREF=&quot;&lt;A HREF="http://www.programs-r-us/hello-
                95.cab">http://www.programs-r-us/hello-nt.cab&lt;/A>&quot; /&gt;
        &lt;/IMPLEMENTATION&gt;

        &lt;IMPLEMENTATION&gt;
            &lt;OS VALUE=&quot;mac&quot; /&gt;
            &lt;CODEBASE HREF=&quot;&lt;A HREF="http://www.programs-r-us/hello-
                95.cab">http://www.programs-r-us/hello-mac.cab&lt;/A>&quot; /&gt;
        &lt;/IMPLEMENTATION&gt;
    &lt;/CODE&gt;
&lt;/MSICD::NATIVECODE&gt;
</pre>

<P>Notice that the <b>CODEBASE</b> in each <b>IMPLEMENTATION</b> grouping actually points to different files on the server.


<h4>Setting dependencies</h4>

<P>Following the example above, what if Adventure Works comes out with a new program called &quot;Adventure Works Goodbye World.&quot; However, Goodbye World is really an extension of Hello World, so you have to have Hello World on your computer before Goodbye World works properly.

<P>The following sample instructs your computer to get Hello World from the location indicated, and then get Goodbye World.

<pre>&lt;SOFTPKG NAME=&quot;Adventure Works Goodbye World&quot; VERSION=&quot;1,0,0,0&quot; STYLE=&quot;MSICD&quot;&gt;
    &lt;MSICD::NATIVECODE&gt;
        &lt;CODE NAME=&quot;Adventure Works Goodbye World&quot;
        CLASSID=&quot;84D8E454-1000-1000-1000-45EA43332000&quot;
        VERSION=&quot;1,0,0,0&quot;&gt;

        &lt;IMPLEMENTATION&gt;
            &lt;OS VALUE=&quot;win95&quot; / &gt;
            &lt;CODEBASE HREF=&quot;&lt;A HREF="http://www.programs-r-us/hello-
                95.cab">http://www.programs-r-us/goodbye-95.cab&lt;/A>&quot; /&gt;
        &lt;/IMPLEMENTATION&gt;
        &lt;/CODE&gt;
    &lt;/MSICD::NATIVECODE&gt;

    &lt;DEPENDENCY ACTION=&quot;install&quot;&gt;
        &lt;SOFTPKG NAME=&quot;Adventure Works Hello World&quot; VERSION=&quot;1,1,0,0&quot;&gt;
            &lt;IMPLEMENTATION&gt;
                &lt;OS VALUE=&quot;win95&quot; /&gt;
            &lt;CODEBASE HREF=&quot;&lt;A HREF="http://www.programs-r-us/hello-
               95.cab">http://www.programs-r-us/hello-95.cab&lt;/A>&quot; /&gt;
            &lt;/IMPLEMENTATION&gt;
        &lt;/SOFTPKG&gt;
    &lt;/DEPENDENCY&gt;
&lt;/SOFTPKG&gt;
</pre>

<P>Letting OSD worry about all the dependencies means that users don't have to. They only know that they want the Adventure Works Goodbye World application. If there's anything that Goodbye World needs, it will be installed in the fly.

<P>There are two types of dependencies. Notice that the above example has ACTION=&quot;install&quot; as an attribute-value of <B>DEPENDENCY</B>. The other type is ACTION=&quot;assert&quot;.

<P>For example, a user might be running Goodbye World version 1.0 and like it. When version 1.1 comes out, the user decides not to install it and stays with version 1.0. When patches or updates come out specifically for version 1.1 (which the user doesn't have), how does OSD know not to bother the user with these advertisements that don't pertain to him or her? By using ACTION=&quot;assert&quot;. The following code section shows how OSD can make an advertisement of a version 1.1 patch only to those people running that version.

<pre>&lt;SOFTPKG NAME=&quot;Vocabulary Patch for Goodbye World version 1.1 only&quot; VERSION=&quot;1,0,0,0&quot;&gt;

&lt;!-- put the MSICD::NATIVECODE/CODE/IMPLEMENTATION/CODEBASE here for the Vocabulary Patch --&gt;

&lt;DEPENDENCY ACTION=&quot;assert&quot;&gt;
    &lt;SOFTPKG NAME=&quot;Adventure Works Goodbye World&quot; VERSION=&quot;1,1,0,0&quot;&gt;
        &lt;IMPLEMENTATION&gt;
            &lt;OS VALUE=&quot;win95&quot; /&gt;
        &lt;/IMPLEMENTATION&gt;
    &lt;/SOFTPKG&gt;
&lt;/DEPENDENCY&gt;
&lt;/SOFTPKG&gt;
</pre>

<P>Therefore, if a computer does not satisfy the prerequisites (having Microsoft Windows 95 and Goodbye World v1.1) indicated in the <a href="../../osd/reference/DEPENDENCY.htm">DEPENDENCY</a> section, it completely ignores this <a href="../../osd/reference/SOFTPKG.htm">SOFTPKG</a>. Thus the user is not unnecessarily bothered.

<h4>More on general OSD structure</h4>

<P>The <a href="#Skeleton">OSD Skeleton</a> section mentions that the OSD file has three main sections: Java, Nativecode, and Dependency. Not all three sections need to appear in an OSD file; only the sections that are used need to be included. For example, if a software author is distributing a stand-alone Java application, the Nativecode and Dependency sections probably won't appear in the OSD.

<P>Notice that the Java, Nativecode, and Dependency items share a similar structure when used in OSD.

<TABLE BORDER CELLSPACING=1 CELLPADDING=7 WIDTH=638>
<TR><TD WIDTH="33%" VALIGN="TOP">
<P>&lt;MSICD::JAVA&gt;
<P>   &lt;PACKAGE ...&gt;
<P>      &lt;IMPLEMENTATION&gt;
<P>         &lt;CODEBASE .../&gt;
<P>      &lt;/IMPLEMENTATION&gt;
<P>   &lt;/PACKAGE&gt;
<P>&lt;/MSICD::JAVA&gt;</TD>
<TD WIDTH="33%" VALIGN="TOP">
<P>&lt;MSICD::NATIVECODE&gt;
<P>   &lt;CODE ...&gt;
<P>      &lt;IMPLEMENTATION&gt;
<P>         &lt;CODEBASE .../&gt;
<P>      &lt;/IMPLEMENTATION&gt;
<P>   &lt;/CODE&gt;
<P>&lt;/MSICD::NATIVECODE&gt;</TD>
<TD WIDTH="33%" VALIGN="TOP">
<P>&lt;DEPENDENCY&gt;
<P>   &lt;SOFTPKG ...&gt;
<P>      &lt;IMPLEMENTATION&gt;
<P>         &lt;CODEBASE ... /&gt;
<P>      &lt;/IMPLEMENTATION&gt;
<P>   &lt;/SOFTPKG&gt;
<P>&lt;/DEPENDENCY&gt;</TD>
</TR>
</TABLE>


<h4>Processing order</h4>

<P>The <a href="../../osd/reference/DEPENDENCY.htm">DEPENDENCY</a> items to be installed are triggered in the order in which they appear in the OSD file, and they come with no guarantee on the order in which they will actually get installed. The only guarantee is that the dependencies will be installed before the main component in the <B>SOFTPKG</B> 
tag gets installed. If specific ordering dependencies are necessary, the components should be arranged in a tree fashion as dependency nodes where one can be assured that nodes deepest in the tree will get installed first.

<P><a href="../reference/CODE.htm">CODE</a> items under <a href="../reference/NATIVECODE.htm">NATIVECODE</a> get processed in the order in which they appear in the OSD, but they get installed and registered in the reverse of their order in the OSD. Thus dependent files should be placed below the <b>CODE</b> items that depend on them being available/installed. When the OSD is mixed with an INF (see Internet Component Download INF document for details),  the order of processing between <B>CODE</B> items and items in the [Add.Code] section in the INF is as if the <B>CODE</B> items appeared before items in [Add.Code]. Packages under <a href="../reference/JAVA.htm">JAVA</a> are installed before <b>CODE</b> items under <b>NATIVECODE</b>.


<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>


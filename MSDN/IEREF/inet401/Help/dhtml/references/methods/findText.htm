<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>findText</TITLE>

<META NAME=MS-HKWD CONTENT="findText">
<META NAME="Keywords" CONTENT="Dynamic HTML, DHTML, IE4, Internet Explorer 4.0">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT, Mac">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="findText"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="findText"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../../art/headbara.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="findText"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR>
<TR><TD><PRE><IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="methods.htm#om40_methods">Topic Contents</A></PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="expand.htm">expand</A>
<IMG SRC="../../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="focus.htm">focus</A></PRE></TD></TR>
</TABLE>
<!-- NAV_LINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H2>findText<BR CLEAR=ALL>
<HR></H2>

<H4>Description</H4>
<BLOCKQUOTE><P>
<P>Searches for text in the document. Positions the start and end points of the range to encompass the search string.
</BLOCKQUOTE>

<H4>Syntax</H4>
<BLOCKQUOTE><P><I>bFound</I> <B>=</B> <I>object</I><B>.findText(</B><I>sText</I><B> [,</B> <I>iSearchScope</I><B>] [,</B> <I>iFlags</I><B>])</B><BR></B></BLOCKQUOTE><P>
<BLOCKQUOTE>
<TABLE WIDTH=87% CELLPADDING=5 CELLSPACING=0>
<TR><TD><B>Parameter</B></TD><TD><B>Description</B></TD></TR>
<TR><TD><I>sText</I></TD><TD>String specifying the text to find.</TD></TR>
<TR><TD><I>iSearchScope</I></TD><TD>Optional. An integer indicating the direction to search from the starting point of the range. A positive integer indicates a forward search; a negative integer indicates a backward search.</TD></TR>

<TR><TD><I>iFlags</I></TD><TD>Optional. A combination of one or more of the following flags indicating the type of search:
<TABLE>
	<TR><TD>2</TD><TD>match whole words only.</TD></TR>
	<TR><TD>4</TD><TD>match case.</TD></TR>
</TABLE></TD></TR>
</TABLE></BLOCKQUOTE>

<H4>Return Value</H4>
<BLOCKQUOTE><P>
<P>Returns true if the search text is found, or false otherwise.
</BLOCKQUOTE>

<H4>Remarks</H4>
<BLOCKQUOTE><P>
A range has two distinct states: degenerate and non-degenerate.  
Analogous to a text editor, a degenerate range is like a text editor caret (insertion point); it does not actually select any characters. Instead it specifies a point between two characters.  
A degenerate range’s endpoints are effectively next to each other. On the other hand, a non-degenerate range is like a text editor selection. 
A certain amount of text is selected, and the end points of the range are not next to each other.  

<P>The degenerate state of the range has a significant impact on the behavior of the findText method.

The value passed for the <i>iSearchScope</i> parameter controls the part of the document, relative to the range, that is searched.  
If the range is degenerate, either a large positive or a large negative number can be passed to indicate the direction of the search.
If the range is non-degenerate, passing 0 will cause only the text <em>selected</em> by the range to be searched.  
Passing a large positive number will cause the text to the right of the start of the range to be searched.  
Passing a large negative number will cause the text to the left of the end of the range to be searched.  
For all intensive purposes, a large positive and a large negative number are 9999999 and -9999999, respectively.  
Passing anything else for iSearchScope may not be compatible with future versions of Internet Explorer.

<P>This feature might not be available on non-Win32 platforms. See article <A HREF="http://www.microsoft.com/kb/articles/q172/9/76.htm" TARGET="_top">Q172976</A> in the Microsoft Knowledge Base for the latest information on Internet Explorer cross-platform compatibility.
</BLOCKQUOTE><P>

<H4>Example</H4>
<BLOCKQUOTE><P>
<P>The following example creates a Text Range over the body of the document and searches for text with various flag combinations. The results are indicated in the code comments.
<P><PRE>
&lt;HTML&gt;
&lt;BODY&gt;
Leonardo da Vinci was one of the great masters of the High Renaissance, 
especially in painting, sculpture, architecture, engineering, and science.
&lt;/BODY&gt;
&lt;/HTML&gt;

&lt;SCRIPT&gt;
   var oRange = <A HREF="../objects/obj_document.htm#obj_document">document</A>.<A HREF="../objects/body.htm#body">body</A>.<A HREF="createtextrange.htm#createtextrange">createTextRange</A>();
   var sBookMark = oRange.<A HREF="getBookmark.htm#getBookmark">getBookmark</A>(); // record the current position in a bookmark
   oRange.findText('leo');               // true. case insensitive and partial word match.
   oRange.<A HREF="moveToBookmark.htm#moveToBookmark">moveToBookmark</A>(sBookMark);	 // reset the range using the bookmark
   oRange.findText('engineer', 0, 2);    // false. matches whole words only.
   oRange.moveToBookmark(sBookMark);
   oRange.findText('high', 0, 4);        // false. case sensitive.
   oRange.moveToBookmark(sBookMark);
   oRange.findText('Leonardo', 0, 6);    // true. case sensitive and matches whole words.

   // the degenerate case
   oRange.moveToBookmark(sBookMark);
   oRange.collapse();                    // make the range degenerate
   oRange.findText('Leonardo', 0, 6);    // false. must specify large character count in this case
   oRange.findText('Leonardo');          // true. no third parameter passed, so no count needed
   oRange.findText('Leonardo', 1000000000, 6);    // true. a large count covers the range.
&lt;/SCRIPT&gt;
</PRE>
</BLOCKQUOTE><P>


<H4>Applies To</H4>
<BLOCKQUOTE><P>
<P><A HREF="../objects/obj_TextRange.htm#obj_TextRange">TextRange</A>
</BLOCKQUOTE><P>
<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
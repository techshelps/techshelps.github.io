<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Scripting with Elements and Collections</TITLE>

<META NAME=MS-HKWD CONTENT="Scripting with Elements and Collections">
<META NAME="Keywords" CONTENT="Dynamic HTML, DHTML, IE4, Internet Explorer 4.0">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT, Mac">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="dhtml_elements"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Scripting with Elements and Collections"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../art/headbara.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Scripting with Elements and Collections"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR>
<TR><TD><PRE><IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="doc_object.htm#dom_intro">Topic Contents</A></PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="windows_frames_dialogs.htm">Working with Windows, Frames, and Dialogs</A>
<IMG SRC="../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="event_model.htm">Understanding the Event Model</A></PRE></TD></TR>
</TABLE>
<!-- NAVLINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>Scripting with Elements and Collections</H1>
<BR CLEAR=ALL>
<P>Every HTML document consists of a combination of HTML tags and their attributes. These elements define the structure of the document and determine how the content is presented. Using the Dynamic HTML object model, you can examine and modify these elements and their modifying attributes. The following topics explain how to access the elements of the document using element collections. 
<P><A CLASS=tctop HREF="scripting_elements_collections.htm#The_all_Collection_a"><IMG SRC="../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">The all Collection and the children Collection</A><BR>
<P><A CLASS=tctop HREF="scripting_elements_collections.htm#More_Collections"><IMG SRC="../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">More Collections</A><BR>
<P><A CLASS=tctop HREF="scripting_elements_collections.htm#Using_Collections"><IMG SRC="../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">Using Collections</A><BR>
<P><A CLASS=tctop HREF="scripting_elements_collections.htm#Creating_new_Collect"><IMG SRC="../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">Creating new Collections: The tags Method</A><BR>
<P><A CLASS=tctop HREF="scripting_elements_collections.htm#Accessing_Element_Pr"><IMG SRC="../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">Accessing Element Properties</A><BR>
<P><A CLASS=tctop HREF="scripting_elements_collections.htm#Examining_the_Elemen"><IMG SRC="../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">Examining the Element Hierarchy</A><BR>
<P><A CLASS=tctop HREF="scripting_elements_collections.htm#Getting_an_Element_s"><IMG SRC="../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">Getting an Element's Position and Dimensions</A><BR>
<P><A CLASS=tctop HREF="scripting_elements_collections.htm#Scrolling_Elements_i"><IMG SRC="../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">Scrolling Elements into View</A><BR>
<!-- * * * * * * * * * * * * * --><H2><A NAME="The_all_Collection_a">The all Collection and the children Collection</A></H2>
<P>An HTML document is a hierarchical construct of tags that define the contents of the document. The <A HREF="../references/collections/all.htm#all">all</A> collection on the document object represents all the elements in the document hierarchy. Each element is represented as a programmable object appearing within the collection in source order. Individual element objects are accessed by index or identifier (unique name). The following document shows how to do this. 

<PRE>&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Elements: Collecting&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE="JScript"&gt;
function showElements() {
    var tag_names = "";
    for (i=0; i&lt;document.all.length; i++)
        tag_names = tag_names + document.all(i).tagName + " ";
    alert("This document contains: " + tag_names);
}
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY onload="showElements()"&gt;
&lt;H1&gt;Welcome!&lt;/H1&gt;
&lt;P&gt;This document is &lt;B&gt;very&lt;/B&gt; short.
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<BUTTON onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/overview/elem_01.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P>When this document is loaded, the script (an event handler for the <A HREF="../references/events/onload.htm#onload">onload</A> event) displays a list of the elements in the document by stepping through the <A HREF="../references/collections/all.htm#all">all</A> collection. It displays this message:

<PRE>This document contains: HTML HEAD TITLE SCRIPT BODY H1 P B
</PRE>

<P>You can see that each HTML element in the document is represented. Notice that the list does not show the end tags for the elements. This is because each element object represents both the start and end tags. Also, the collection does not directly indicate the hierarchy of the elements; that is, you can't tell which elements contain others. The collection lists the elements in the order in which they appear in the HTML source of the document. 

<P>In many ways, the <A HREF="../references/collections/all.htm#all">all</A> collection is like an array. It contains one or more items each of the same type&#151;in this case, element objects. You access the items by using zero-based index values, or by name or identifier. The first item has index value 0, the second has 1, and so on. You can determine how many items are in the collection by using the <A HREF="../references/properties/length.htm#length">length</A> property. 

<P>Because each item in the <A HREF="../references/collections/all.htm#all">all</A> collection is an element object, you can apply properties and methods to these items. For example, you can use the <A HREF="../references/properties/tagName.htm#tagName">tagName</A> property to retrieve the HTML tag name of the element as was done in the previous example. Similarly, you can access properties and methods of the respective element by accessing this through the document.all collection.

<P>The <A HREF="../references/collections/all.htm#all">all</A> collection always represents the current state of the document and is automatically updated to reflect any changes made to the document. For example, if you retrieve the collection and add or remove document content so that the HTML structure is different, the collection will automatically reflect the new HTML content in source order.

<P>In some cases, the <A HREF="../references/collections/all.htm#all">all</A> collection might contain more elements than are actually in the document's file. In particular, the collection always contains the <A HREF="../references/objects/HTML.htm#HTML">HTML</A>, <A HREF="../references/objects/HEAD.htm#HEAD">HEAD</A>, <A HREF="../references/objects/TITLE.htm#TITLE">TITLE</A>, and <A HREF="../references/objects/BODY.htm#BODY">BODY</A> elements even if these are not present in the source. Similarly, the collection always contains a <A HREF="../references/objects/TBODY.htm#TBODY">TBODY</A> element for each <A HREF="../references/objects/TABLE.htm#TABLE">TABLE</A> regardless of whether <B>TBODY</B> was specified in the HTML source. 

<P>The <A HREF="../references/collections/all.htm#all">all</A> collection also includes comments (!) and unknown or invalid tags. The purpose is to give you an accurate picture of the content of the document. Unknown or invalid tags are typically misspelled or misplaced tags. Knowing what and where they are gives you an opportunity to replace them with valid tags. The <B>all</B> collection lists unknown and invalid start and end tags separately; it does not attempt to combine these into a single item. The following document displays the message "HTML HEAD TITLE SCRIPT BODY ! P ZZZ&gt; /ZZZ&gt; /B".

<PRE>&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Elements: Collecting&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE="JScript"&gt;
function showElements() {
    var tag_names = "";
    for (i=0; i&lt;document.all.length; i++)
        tag_names = tag_names + document.all(i).tagName + " ";
    alert("This document contains: " + tag_names);
}
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY onload="showElements()"&gt;
&lt;!-- A comment --&gt;
&lt;P&gt;This document has an &lt;ZZZ&gt;unknown&lt;/ZZZ&gt; and an invalid&lt;/B&gt; tag.
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<BUTTON onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/overview/elem_02.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P>In addition to the <A HREF="../references/collections/all.htm#all">all</A> collection on the <A HREF="../references/objects/obj_document.htm#obj_document">document</A> object, each individual element also exposes an <B>all</B> collection. Remember the hierarchical style of HTML&#151;this helps to think about the <B>all</B> collection for each element. The <B>all</B> collection for an element contains all the elements contained by that element. For example, the <B>all</B> collection for the HTML element would contain everything in the source code except the HTML element (this being the only difference between the <B>all</B> collection for the HTML element and the document.all collection).

<P>Each element also exposes a <A HREF="../references/collections/children.htm#children">children</A> collection, which contains only the elements that are direct descendants of the element in the HTML hierarchy. Another way of saying this is that the <B>children</B> collection would contain only those elements whose <A HREF="../references/properties/parentElement.htm#parentElement">parentElement</A> property would return that element. The content of the <B>children</B> collection is undefined for overlapping elements.

<P>The following example returns the length and contents of the <A HREF="../references/collections/all.htm#all">all</A> and the <A HREF="../references/collections/children.htm#children">children</A> collections of the document. Notice that there are only two elements that are children of the HTML tag&#151;HEAD and BODY. The TITLE and SCRIPT elements are children of the HEAD, not of the HTML tag.

<PRE>&lt;HTML id=theHTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt; Look at the all and the children collection&lt;/TITLE&gt;
&lt;SCRIPT&gt;
function showme() {
alert('all: ' + window.theHTML.all.length);
for (i=0; i &lt; theHTML.all.length;i++)
{
alert(theHTML.all[i].tagName); 
}
alert('children: ' + window.theHTML.children.length);
for (i=0; i &lt; theHTML.children.length;i++)
{
alert(theHTML.children[i].tagName);
}
}
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY onload=showme()&gt;
&lt;DIV&gt; Some text in a DIV. This DIV will be in 
the all collection of the HTML element&lt;/DIV&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<BUTTON onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/overview/elem_03.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><H2><A NAME="More_Collections">More Collections</A></H2>
<P>The object model provides additional collections that you can use to access the elements of the document. 
<P>

<TABLE>
<TR><TD><B>Collection  </B></TD><TD><B>Applies to  </B></TD><TD><B>Contains 
  </B></TD></TR>
<TR><TD><A HREF="../references/collections/anchors.htm#anchors">anchors</A>  </TD><TD><A HREF="../references/objects/obj_document.htm#obj_document">document</A> object  </TD><TD><A HREF="../references/objects/A.htm#A">A</A> elements having non-empty
 <A HREF="../references/properties/name_0.htm#name_0">name</A> property  </TD></TR>
<TR><TD><A HREF="../references/collections/applets.htm#applets">applets</A>  </TD><TD><A HREF="../references/objects/obj_document.htm#obj_document">document</A>  </TD><TD><A HREF="../references/objects/APPLET.htm#APPLET">APPLET</A> elements  </TD></TR>
<TR><TD><A HREF="../references/collections/areas.htm#areas">areas</A>  </TD><TD><A HREF="../references/objects/MAP.htm#MAP">MAP</A> element  </TD><TD><A HREF="../references/objects/AREA.htm#AREA">AREA</A> elements in the
 map  </TD></TR>
<TR><TD><A HREF="../references/collections/cells.htm#cells">cells</A>  </TD><TD><A HREF="../references/objects/TR.htm#TR">TR</A> element  </TD><TD><A HREF="../references/objects/TD.htm#TD">TD</A> or <A HREF="../references/objects/TH.htm#TH">TH</A> elements in the
 row  </TD></TR>
<TR><TD><A HREF="../references/collections/elements.htm#elements">elements</A>  </TD><TD><A HREF="../references/objects/FORM.htm#FORM">FORM</A> element  </TD><TD><A HREF="../references/objects/BUTTON.htm#BUTTON">BUTTON</A>, <A HREF="../references/objects/INPUT.htm#INPUT">INPUT</A>, <A HREF="../references/objects/SELECT.htm#SELECT">SELECT</A>, and /or <A HREF="../references/objects/TEXTAREA.htm#TEXTAREA">TEXTAREA</A> elements in the
 form  </TD></TR>
<TR><TD><A HREF="../references/collections/embeds.htm#embeds">embeds</A>  </TD><TD><A HREF="../references/objects/obj_document.htm#obj_document">document</A>  </TD><TD><A HREF="../references/objects/EMBED.htm#EMBED">EMBED</A> elements  </TD></TR>
<TR><TD><A HREF="../references/collections/filters.htm#filters">filters</A>  </TD><TD>all elements  </TD><TD><A HREF="../references/properties/filter.htm#filter">filter</A> objects  </TD></TR>
<TR><TD><A HREF="../references/collections/forms.htm#forms">forms</A>  </TD><TD><A HREF="../references/objects/obj_document.htm#obj_document">document</A>  </TD><TD><A HREF="../references/objects/FORM.htm#FORM">FORM</A> elements  </TD></TR>
<TR><TD><A HREF="../references/collections/frames.htm#frames">frames</A>  </TD><TD><A HREF="../references/objects/obj_document.htm#obj_document">document</A> and <A HREF="../references/objects/obj_window.htm#obj_window">window</A>  </TD><TD><A HREF="../references/objects/obj_window.htm#obj_window">window</A> objects defined
 with <A HREF="../references/objects/FRAME.htm#FRAME">FRAME</A> and <A HREF="../references/objects/IFRAME.htm#IFRAME">IFRAME</A> elements  </TD></TR>
<TR><TD><A HREF="../references/collections/images.htm#images">images</A>  </TD><TD><A HREF="../references/objects/obj_document.htm#obj_document">document</A>  </TD><TD><A HREF="../references/objects/IMG.htm#IMG">IMG</A> elements  </TD></TR>
<TR><TD><A HREF="../references/collections/links.htm#links">links</A>  </TD><TD><A HREF="../references/objects/obj_document.htm#obj_document">document</A>  </TD><TD><A HREF="../references/objects/A.htm#A">A</A> elements having non-empty
 <A HREF="../references/properties/href_0.htm#href_0">href</A> properties  </TD></TR>
<TR><TD><A HREF="../references/collections/options.htm#options">options</A>  </TD><TD><A HREF="../references/objects/SELECT.htm#SELECT">SELECT</A> element  </TD><TD><A HREF="../references/objects/OPTION.htm#OPTION">OPTION</A> elements  </TD></TR>
<TR><TD><A HREF="../references/collections/rows.htm#rows">rows</A>  </TD><TD><A HREF="../references/objects/TABLE.htm#TABLE">TABLE</A>  </TD><TD><A HREF="../references/objects/TR.htm#TR">TR</A> elements in the
 table  </TD></TR>
<TR><TD><A HREF="../references/collections/scripts.htm#scripts">scripts</A>  </TD><TD><A HREF="../references/objects/obj_document.htm#obj_document">document</A>  </TD><TD><A HREF="../references/objects/SCRIPT.htm#SCRIPT">SCRIPT</A> elements  </TD></TR>
<TR><TD><A HREF="../references/collections/tbodies.htm#tbodies">tbodies</A> </TD><TD><A HREF="../references/objects/TABLE.htm#TABLE">TABLE</A> </TD><TD><A HREF="../references/objects/TBODY.htm#TBODY">TBODY</A> elements </TD></TR>
</TABLE>
<P>Some scriptable collections are not really element collections, but collections of other scriptable objects.

<TABLE>
<TR><TD><B>Collection  </B></TD><TD><B>Applies to  </B></TD><TD><B>Contains 
 </B></TD></TR>
<TR><TD><A HREF="../references/collections/imports.htm#imports">imports</A>  </TD><TD><A HREF="../references/objects/obj_stylesheet.htm#obj_styleSheet">styleSheet</A> object  </TD><TD><A HREF="../references/css/import.htm#_import">@import</A> statements that
 are defined in a style sheet </TD></TR>
<TR><TD><A HREF="../references/collections/styleSheets.htm#styleSheets">styleSheets</A>  </TD><TD><A HREF="../references/objects/obj_document.htm#obj_document">document</A>  </TD><TD><A HREF="../references/objects/obj_stylesheet.htm#obj_styleSheet">styleSheet</A> objects&#151;
 represent instances of LINK and STYLE </TD></TR>
<TR><TD><A HREF="../references/collections/filters.htm#filters">filters</A> </TD><TD><B>element</B> </TD><TD>collection of CSS-defined filter attributes per
 element object </TD></TR>
<TR><TD><A HREF="../references/collections/rules.htm#rules">rules</A> </TD><TD><A HREF="../references/objects/obj_stylesheet.htm#obj_styleSheet">styleSheet</A> object </TD><TD>collection of style rules&#151;combination of a CSS
 contextual selector and a style </TD></TR>
</TABLE>
<P>Like the <A HREF="../references/collections/all.htm#all">all</A> collection, these collections are automatically updated as changes are made to the document.

<!-- * * * * * * * * * * * * * -->
<H2><A NAME="Using_Collections">Using Collections</A></H2>
<P>Collections in the object model are similar to an array of variables created in a programming language. You can retrieve an item from the collection by providing an name or identifier for the item, or an ordinal index that specifies the position of the item in the collection. Collections indexes are zero-based, so the first item always has an index of zero. The following JScript example displays the tag name of the <A HREF="../references/objects/P.htm#P">P</A> element, the sixth element in the collection. 

<PRE>&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Elements: Retrieving Items&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE="JScript"&gt;
function showSixth() {
    var el = document.all(5);
    alert("The sixth element is: " + el.tagName);
}
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY onload="showSixth()"&gt;
&lt;P&gt;This is a very simple document.
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<BUTTON onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/overview/elem_04.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P>Because index values for collections are zero-based, the index for the last element in a collection is always one less than the length of the collection. So a quick way to get access to the last element in a collection is to subtract one from its length and use the result as the index value, as in the following example.

<PRE>var elLast = document.all(document.all.length-1);
alert("The last element in this document is: " + elLast.tagName);
</PRE>

<P>You can also retrieve items from a collection by specifying an identifier. In this case, the element must have a valid identifier, set using the <A HREF="../references/html/A.htm#ID_">ID=</A> attribute. The following JScript example displays the tag name of the element that has the identifier "MyID".

<PRE>&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Elements: IDs as Indexes&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE="JScript"&gt;
function showElementWithID() {
    var el = document.all("MyID");
    alert("The element having the identifier MyID is: " + el.tagName);
}
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY onload="showElementWithID()"&gt;
&lt;P ID="MyID"&gt;This is a very simple document.
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<BUTTON onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/overview/elem_05.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P>Elements can also be accessed by name, but it is important to remember that the name attribute primarily applies only to the elements that participate in a form submission. The ID attribute is an identifier that applies to every element.

<P>Be careful! While in theory ID means "unique identifier," in reality the uniqueness is not enforced. If more than one element has the same identifier, the result is a collection of elements with the same ID, rather than an individual element. The subsequent collection can only be accessed ordinally. If no element has the identifier, the result is null. 

<P>When using an identifier results in another collection, the elements in the new collection have the same order as they have in the document. To get access to these elements, you can use the <A HREF="../references/methods/item.htm#item">item</A> method to apply a zero-based index to the collection, as in the following example. 

<PRE>if (document.all("MyID").length != null)
    alert("The first element that has the identifier MyID: " + document.all("MyID").item(0).tagName);
</PRE>

<P>If you already know that more than one element has the same identifier, you can skip a step and use the optional second parameter of <A HREF="../references/methods/item.htm#item">item</A> to retrieve an element without first retrieving the collection. The following JScript example displays the same message as the previous example.

<PRE>var el = document.all.item("MyID",0);
if (el != null)
    alert("The first element that has the identifier MyID: " + el.tagName);
</PRE>

<P>If you already know that more than one element has the same identifier, you can skip a step and use the optional second parameter of <A HREF="../references/methods/item.htm#item">item</A> to retrieve an element without first retrieving the collection. The following JScript example displays the same message as the previous example.

<PRE>var el = document.all.item("MyID",0);
if (el != null)
    alert("The first element that has the identifier MyID: " + el.tagName);
</PRE>

<P>When using scripting languages such as JScript and VBScript (Visual Basic&#174; Scripting Edition), you can also access elements in collections by using the indexing syntax for that language. JScript offers three ways to index an array: an integer index enclosed in square brackets, an identifier given as a string enclosed in square brackets, and an identifier prefixed with a period. The following JScript statements show how to apply these.

<PRE>var el = document.all[2];    // is the same as document.all.item(2)
var el = document.all["MyID"];   // is the same as document.all.item("MyID")
var el = document.all.MyID;      // is the same as document.all.item("MyID")
</PRE>

<P>Again, be careful when using identifiers in this way. The collection returns another collection if there is more than one element having the given identifier. Always check the return value before you use it.

<P>You can't use identifiers to access items in an <A HREF="../references/collections/imports.htm#imports">imports</A> collection&#151;the collection consists of imported style sheets rather than HTML elements, so no identifiers are available. Use integer indexes instead. Although you can use names to access items in a <A HREF="../references/collections/frames.htm#frames">frames</A> collection, you should make certain that no two windows have the same name. If you don't, only the first window with the given name will be accessible.

<!-- * * * * * * * * * * * * * -->

<H2><A NAME="Creating_new_Collect">Creating new Collections: The tags Method</A></H2>
<P>The <A HREF="../references/methods/tags.htm#tags">tags</A> method creates a collection of elements that have a given tag name. The method filters an existing collection and creates a new collection of a given tag name. For example, the following JScript code applies the <B>tags</B> method to the <A HREF="../references/collections/all.htm#all">all</A> collection to retrieve a new collection containing only the <A HREF="../references/objects/TABLE.htm#TABLE">TABLE</A> elements in the document. It then applies a border to each table.

<PRE>var doc_tables = document.all.tags("TABLE");
for (i=0; i&lt;doc_tables.length; i++)
    doc_tables(i).border = 1;
</PRE>

<P>The method searches for any tag name, even names that are not valid HTML. If it finds one or more elements having that name, it returns the collection. If it can't find an element having that name, it returns an empty collection. Use the <A HREF="../references/properties/length.htm#length">length</A> property to determine how many elements the collection contains. The collection is empty if its length is zero. 

<P>The <A HREF="../references/methods/tags.htm#tags">tags</A> method preserves the order of the elements as it creates the new collection. This means the first element in the new collection is also the first instance of the tag in the document. 

<P>Because the collection returned by the <A HREF="../references/methods/tags.htm#tags">tags</A> method is a subset of the <A HREF="../references/collections/all.htm#all">all</A> collection, the ordinal value that you use to access an element is different than you would use to access an element in the <B>all</B> collection. Sometimes it is useful to know both ordinal values. The <A HREF="../references/properties/sourceIndex.htm#sourceIndex">sourceIndex</A> property for the element returns the ordinal position of the element in the document's <B>all</B> collection. 

<!-- * * * * * * * * * * * * * -->

<H2><A NAME="Accessing_Element_Pr">Accessing Element Properties</A></H2>
<P>Many element properties are named-value pairs that correspond to the HTML attributes of the element and to other values associated with the element. You can get the value of a property to determine how the corresponding attribute is set, and in many cases change the value of this property to dynamically affect the element. This is the key concept behind manipulating dynamic styles and dynamic content. Accessing the properties that let you change styles and content is done by accessing the element object through the collections exposed in the document object model. For example, you can center an <A HREF="../references/objects/H1.htm#H1">H1</A> element by accessing the H1 element through the <A HREF="../references/collections/all.htm#all">all</A> collection on the document and then setting its <A HREF="../references/properties/align_0.htm#align_0">align</A> property to "center", the same value you would use with the <A HREF="../references/html/APPLET.htm#ALIGN_">ALIGN=</A> attribute. 

<PRE>var coll = document.all.tags("H1");
if (coll.length&gt;0)
    coll(0).align="center";
</PRE>

<P>Similarly, you can change the image file name for an <A HREF="../references/objects/IMG.htm#IMG">IMG</A> element by setting its <A HREF="../references/properties/src_2.htm#src_2">src</A> property.

<PRE>var coll = document.all.tags("IMG");
if (coll.length&gt;0)
    coll(0).src="newimage.gif";
</PRE>

<P>Most properties have the same name and take the same values as the corresponding attribute. This means most properties take strings, enumerated values, or numeric values. If a property name is different from its corresponding attribute, it is usually fairly close to the attribute name. For example, the <A HREF="../references/properties/className.htm#className">className</A> property corresponds to the <A HREF="../references/html/A.htm#CLASS_">CLASS=</A> attribute. Name changes are done to avoid conflicts with keywords in common scripting languages, or to make sure that property names don't contain characters that are invalid in common scripting languages.

<P>A few properties represent sub-objects. For example, <A HREF="../references/objects/obj_style.htm#obj_style">style</A> corresponds to the <A HREF="../references/html/A.htm#STYLE_">STYLE=</A> attribute and represents a sub-object that gives you access to all the CSS attributes that can be applied to the element as an inline style. The <B>style</B> object itself takes properties, which you can set to alter the look and formatting of the element. The following example uses the <B>style</B> object to change the CSS color attribute of all <A HREF="../references/objects/H1.htm#H1">H1</A> elements to green.

<PRE>var coll = document.all.tags("H1");
for (i=0; i&lt;coll.length; i++)
    coll[i].style.color = "green";
</PRE>

<P>Some properties do not correspond to element attributes. These properties typically give additional information about the element that isn't available through attributes. For example, the <A HREF="../references/properties/tagName.htm#tagName">tagName</A> property specifies the HTML tag name of the element, and the <A HREF="../references/properties/sourceIndex.htm#sourceIndex">sourceIndex</A> property specifies the position of the element in the document's <A HREF="../references/collections/all.htm#all">all</A> collection. 

<P>Although you can get and set the values of many properties, some properties are "read-only" in that you can get the values but not set or change them. For example, the <A HREF="../references/properties/tagName.htm#tagName">tagName</A> property is a read-only property&#151;changing the tag name of an element is not permitted. 

<P>Sometimes an HTML document will have invalid attributes, or invalid values assigned to attributes. If an invalid value is assigned to an attribute, the corresponding property is always set to its default value. For example, in the following document, "middle" is not a valid value for the <A HREF="../references/html/APPLET.htm#ALIGN_">ALIGN=</A> attribute, so the document displays the message "left", the default value for the <A HREF="../references/properties/align_3.htm#align_3">align</A> property.

<PRE>&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Elements: Using Properties&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE="JScript"&gt;
function showAlignment() {
    var coll = document.all.tags("H1");
    for (coll.length&gt;0)
        alert("The alignment for the first heading is " + coll(0).align);
}
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY onload="showAlignment()"&gt;
&lt;H1 ALIGN="middle"&gt;Welcome!&lt;/H1&gt;
&lt;P&gt;This document is &lt;B&gt;very&lt;/B&gt; short.
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<BUTTON onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/overview/elem_06.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P>The <A HREF="../references/methods/getAttribute.htm#getAttribute_0">getAttribute</A>, <A HREF="../references/methods/setAttribute.htm#setAttribute">setAttribute</A>, and <A HREF="../references/methods/removeAttribute.htm#removeAttribute">removeAttribute</A> methods give you access to the attributes of an element without using properties. You supply an attribute name, and these methods return or set the current value of the attribute, or remove the attribute. 

<P>For example, you can get and set the current value of the <A HREF="../references/html/APPLET.htm#ALIGN_">ALIGN=</A> attribute (rather than retrieve the <A HREF="../references/properties/align_0.htm#align_0">align</A> property) by using <A HREF="../references/methods/getAttribute.htm#getAttribute_0">getAttribute</A> and <A HREF="../references/methods/setAttribute.htm#setAttribute">setAttribute</A> as in the following document. The document displays the current value of the attribute ("left"), then changes that value to "center", centering the <A HREF="../references/objects/H1.htm#H1">H1</A> element. 

<PRE>&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Elements: Using Methods&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE="JScript"&gt;
function showAndSetAlignment() {
    alert(document.all.MyHeading.getAttribute("align"));
    document.all.MyHeading.setAttribute("align","center");
}
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY onload="showAndSetAlignment()"&gt;
&lt;H1 ID=MyHeading ALIGN="left"&gt;Welcome!&lt;/H1&gt;
&lt;P&gt;This a short document.
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<BUTTON onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/overview/elem_07.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P>The attribute methods are especially useful when working with unrecognized attributes and invalid values. For example, if an attribute has an invalid value, the <A HREF="../references/methods/getAttribute.htm#getAttribute_0">getAttribute</A> method retrieves that exact value rather than the default value for the attribute. This means you can use the method to examine what is really in the HTML document and make decisions based on that. The following document uses the methods to repair the alignment of the <A HREF="../references/objects/H1.htm#H1">H1</A> element ("middle" is not a valid value). 

<PRE>&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Elements: Invalid Values&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE="JScript"&gt;
function checkValues() {
    if (document.all.MyHeading.getAttribute("align")=="middle")
        document.all.MyHeading.setAttribute("align","center");
    if (document.all.MyHeading.getAttribute("xyz")!="123")
        document.all.MyHeading.setAttribute("xyz","123");
}
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY onload="checkValues()"&gt;
&lt;H1 ID=MyHeading XyZ="123" ALIGN="middle"&gt;Welcome!&lt;/H1&gt;
&lt;P&gt;This is a short document.
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<BUTTON onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/overview/elem_08.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P>By default, these attribute methods are case insensitive when looking for an unknown attribute. So in the example above, even though "xyz" isn't identical to "XyZ", the methods get and set the attribute anyway. You can force the methods to search for an exact match by setting the optional case-sensitive parameter to true. For example, the following code, if placed in the previous example, displays "Not found" because "xyz" does not match "XyZ". 

<PRE>if (document.all.MyHeading.getAttribute("xyz", true)==null)
    alert("Not found");
</PRE>

<P>If multiple matches are found for a case-sensitive usage of these methods, the actual item returned is not guaranteed to be consistent across platforms.

<!-- * * * * * * * * * * * * * -->
<H2><A NAME="Examining_the_Elemen">Examining the Element Hierarchy</A></H2>
<P>The elements of an HTML document form a hierarchy in which some elements contain others. The <A HREF="../references/objects/HTML.htm#HTML">HTML</A> element, at the top of the hierarchy, contains all other elements in the document. The <A HREF="../references/objects/BODY.htm#BODY">BODY</A> element, contained by <B>HTML</B>, represents the document. Block elements, such as <A HREF="../references/objects/P.htm#P">P</A>, contain text and inline elements, which can themselves contain text and inline elements, and so on. 

<P>You can examine this structural hierarchy by using the <A HREF="../references/methods/contains.htm#contains">contains</A> method and the <A HREF="../references/properties/parentElement.htm#parentElement">parentElement</A> property. The <A HREF="../references/collections/all.htm#all">all</A> collection and the <A HREF="../references/collections/children.htm#children">children</A> collection (discussed previously) for each element can also help determine the document structure.

<P>The <A HREF="../references/methods/contains.htm#contains">contains</A> method returns either true or false to indicate whether one element contains another. You apply the method to an element and supply another element as the parameter. For example, the following document displays the message "True!" because the <A HREF="../references/objects/BODY.htm#BODY">BODY</A> element contains <A HREF="../references/objects/P.htm#P">P</A>. 

<PRE>&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Elements: Hierarchy&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE="JScript"&gt;
function showContains() {
    var el = document.all.tags("P").item(0);
    if (document.body.contains(el)) 
        alert("True!");
    else
        alert("False!");
}
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY onload="showContains()"&gt;
&lt;P&gt;This is a very simple document.
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<BUTTON onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/overview/elem_09.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P>Note in the example above that the <A HREF="../references/objects/BODY.htm#BODY">body</A> property of the <A HREF="../references/objects/obj_document.htm#obj_document">document</A> object is used to retrieve the <A HREF="../references/objects/BODY.htm#BODY">BODY</A> object. 

<P>The <A HREF="../references/properties/parentElement.htm#parentElement">parentElement</A> property always identifies the next element in the hierarchy that contains the element. You can combine <A HREF="../references/methods/contains.htm#contains">contains</A> and <B>parentElement</B> in a more complicated script to determine the hierarchy of the elements document. The following document uses these to determine the hierarchy, then it displays a message that shows the hierarchy. 

<PRE>&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Elements: Hierarchy&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE="JScript"&gt;
function showHierarchy() {
    var depth = 0;
    var msg = document.all(0).tagName;
    for (i=1; i&lt;document.all.length; i++) {
        if (document.all(i-1).contains(document.all(i))==true) {
            depth = depth + 1;
        } else {
            var elParent = document.all(i-1).parentElement;
            for ( ; depth&gt;0; depth--) {
                if (elParent.contains(document.all(i))==true)
                    break;
                elParent = elParent.parentElement;
            }
        }
        msg = msg + "\n";
        for (j=1; j&lt;=depth; j++) 
            msg = msg + "  ";
        msg = msg + document.all(i).tagName;
    }
    alert("This document contains:\n" + msg);
}
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY onload="showHierarchy()"&gt;
&lt;H1&gt;Welcome!&lt;/H1&gt;
&lt;P&gt;This document is &lt;B&gt;very&lt;/B&gt; short.
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<BUTTON onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/overview/elem_10.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><H2><A NAME="Getting_an_Element_s">Getting an Element's Position and Dimensions</A></H2>
<P>You can determine the location, width, and height of an element by using the <A HREF="../references/properties/offsetLeft.htm#offsetLeft">offsetLeft</A>, <A HREF="../references/properties/offsetTop.htm#offsetTop">offsetTop</A>, <A HREF="../references/properties/offsetHeight.htm#offsetHeight">offsetHeight</A>, and <A HREF="../references/properties/offsetWidth.htm#offsetWidth">offsetWidth</A> properties. These numeric properties specify the physical coordinates and dimensions of the element relative to the element's offset parent. For example, the following document is a simple clock that adjusts the size of its readout to fit the current width and height of the document body.

<PRE>&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;A Simple Clock&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE="JScript"&gt;
function startClock() {
    window.setInterval("Clock_Tick()", 1000);
    Clock_Tick();
}

var ratio = 4;
function Clock_Tick()
{
    var s = Date();
    var t = s.substring(11,19);
    var doc_height = document.body.offsetHeight;
    var doc_width = document.body.offsetWidth;

    if ((doc_height*ratio)&gt;doc_width)
        doc_height = doc_width / ratio;
    document.all.MyTime.innerText = t;
    document.all.MyTime.style.fontSize = doc_height;
}
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY onload="startClock()"&gt;
&lt;P ID="MyTime"&gt;&amp;nbsp;&lt;/P&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<BUTTON onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/overview/elem_11.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P>The <A HREF="../references/properties/offsetLeft.htm#offsetLeft">offsetLeft</A> and <A HREF="../references/properties/offsetTop.htm#offsetTop">offsetTop</A> property values are relative to the element specified by the <A HREF="../references/properties/offsetParent.htm#offsetParent">offsetParent</A> property for the element. Most of the time the property returns <A HREF="../references/objects/BODY.htm#BODY">BODY</A>. For example, in the following document, even though the <A HREF="../references/objects/TD.htm#TD">TD</A> element appears to the far right in the document, its position is (0,0) because its offset parent is the <A HREF="../references/objects/TR.htm#TR">TR</A>, not the document body.

<PRE>&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Elements: Positions&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE="JScript"&gt;
function showPosition() {
    var el = document.all.MyID;
    alert("The TD element is at (" + el.offsetLeft + "," + el.offsetTop + ")\n" + 
        "The offset parent is " + el.offsetParent.tagName );
}
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY onload="showPosition()"&gt;
&lt;P&gt;This document contains a right-aligned table.
&lt;TABLE BORDER=1 ALIGN=right&gt;
&lt;TR&gt;&lt;TD ID=MyID&gt;This is a small table
&lt;/TABLE&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<BUTTON onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/overview/elem_12.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><!-- * * * * * * * * * * * * * --><H2><A NAME="Scrolling_Elements_i">Scrolling Elements into View</A></H2>
<P>Another useful method is <A HREF="../references/methods/scrollIntoView.htm#scrollIntoView">scrollIntoView</A>. This scrolls the element into view within the window, placing it at either the top or bottom of the window. The method is useful for immediately showing the user the result of some action without requiring the user to manually scroll the document to find the result. The following example underlines the content of the fifth paragraph and scrolls it into view at the top of the window.

<PRE>var coll = document.all.tags("P");
if (coll.length&gt;=5) {
    coll(4).style.textDecoration = "underline";
    coll(4).scrollIntoView(true);
}
</PRE>
<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
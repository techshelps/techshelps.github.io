<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Document Object Model</TITLE>

<META NAME=MS-HKWD CONTENT="Document Object Model">
<META NAME="Keywords" CONTENT="Dynamic HTML, DHTML, IE4, Internet Explorer 4.0">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT, Mac">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="dom_intro"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Document Object Model"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../art/headbara.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Document Object Model"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR>
<TR><TD><PRE><IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="../dhtml.htm">Topic Contents</A></PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="../content/databind/events.htm">DHTML Event Model Support for Data Binding</A>
<IMG SRC="../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="windows_frames_dialogs.htm">Working with Windows, Frames, and Dialogs</A></PRE></TD></TR>
</TABLE>
<!-- NAVLINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>Document Object Model</H1>
<BR CLEAR=ALL>
<P>The Dynamic HTML document object model allows authors direct, programmable access to the individual components of their Web documents, from individual elements to containers. This access, combined with the event model, allows the browser to react to user input, execute scripts on the fly, and display the new content without downloading additional documents from a server. The document object model puts sophisticated interactivity within easy reach of the average HTML author.

<P><B>What Is the Object Model?</B>

<P>The object model is the mechanism that makes Dynamic HTML programmable. It doesn't require that authors learn new HTML tags, and it doesn't involve any new authoring technologies. In fact, the object model builds on functionality that authors have used for creating content for previous browsers. Remember setting the value for a form element in script, or adding mouseover events to links in Internet Explorer 3.0? If so, you've been using a limited form of the object model to access your HTML with script.

<P>What's different in the current object model is that now <I>every</I> HTML element is programmable. This means that every HTML element on the page can have script behind it that can be used to interact with user actions and change the page content dynamically. This event model lets a document react when the user has done something on the page, such as move the mouse over a particular element, press a key, or enter information into a form input. Each event can be linked to a script that tells the browser to modify the content on the fly, without having to go back to the server for a new file. The advantages to this are that authors will be able to create interactive Web sites with fewer pages, and users will not have to wait for new pages to download from Web servers, increasing the speed of their browsing and the performance of the Internet as a whole.

<P><B>Accessing Elements with Script</B>

<P>Every HTML element is a scriptable object in the object model , with its own set of properties, methods, and events. However, to write script for each element object, the author must know how to get to an element. 

<P>The object model is focused around collections of elements, a hierarchy of groupings that the elements fall into. The most important of these collections are the <A HREF="../references/collections/all.htm#all">all</A> collection and the <A HREF="../references/collections/children.htm#children">children</A> collection. A Dynamic HTML document is a structured arrangement of elements&#151;for instance, in the following example, each element has a scope of influence that depends on where in the document the tags appear. 

<PRE>&lt;HTML&gt;
&lt;BODY&gt;
&lt;DIV&gt;
&lt;P&gt;Some text in a &lt;B&gt;paragraph&lt;/B&gt;
&lt;IMG id=image1 src="mygif.gif"&gt;
&lt;/DIV&gt;
&lt;IMG id=image2 src="mygif.gif"&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<P>The <A HREF="../references/objects/DIV.htm#DIV">DIV</A> element contains (and is the parent of) the <A HREF="../references/objects/P.htm#P">P</A> tag and the <A HREF="../references/objects/IMG.htm#IMG">IMG</A> called image1. Conversely, image1 and the P are children of the DIV. The IMG tag called image2, however, is a child of the <A HREF="../references/objects/BODY.htm#BODY">BODY</A> element. And all elements are children of the HTML element.

<P>For each element object, there is an <A HREF="../references/collections/all.htm#all">all</A> collection that contains all the elements that are beneath that element in the hierarchy, and a <A HREF="../references/collections/children.htm#children">children</A> collection that contains only the elements that are direct descendants of that element. In the example above, the <A HREF="../references/objects/B.htm#B">B</A> would be in the DIV's <B>all</B> collection, but would not appear in the DIV's <B>children</B> collection. Similarly, the DIV is a member of BODY's <B>children</B> collection, but the P is not.

<P>In addition to these collections for each element, the document itself (represented by the document object) has a number of element and non-element collections. The most important is an <A HREF="../references/collections/all.htm#all">all</A> collection that contains all the elements on the Web page. This collection is the primary way to access elements through script. For more information about using collections, see <A HREF="scripting_elements_collections.htm#dhtml_elements">Scripting with Elements and Collections</A>.



<P><B>Events&#151;Bubbling, Canceling, and Handling</B>

<P>Clicking a button, moving the mouse over part of the Web page, selecting some text on the page&#151;these actions all fire <I>events</I> that a DHTML author can write code to run in response to the event. This particular piece of code is generally known as an <B>event handler</B> because that's what it does, handle events. 

<P>Event handling is not particular to Internet Explorer 4.0 or even Internet Explorer 3.<I>x</I>; Netscape Navigator 3.<I>x</I> and Communicator handle events as well. However, in Internet Explorer 4.0, the HTML elements on a Web page that are the source of the events, and the types of events that are generated, have been greatly expanded. Previously, only a small set of HTML elements could generate events: anchors, image maps, form elements, applications, and objects. With the Internet Explorer 4.0 event model, every HTML element on the page can be the source for a full set of mouse and keyboard events. 

<P>The following is a set of common events that every HTML element generates in Internet Explorer 4.0. 
<P>
<TABLE>
<TR><TD><B><B>Mouse event </B> </B></TD><TD><B><B>Generated when the user:</B>
  </B></TD></TR>
<TR><TD><A HREF="../references/events/onmouseover.htm#onmouseover">onmouseover</A>  </TD><TD>Moves the mouse pointer over (that is, enters) an element.  </TD></TR>
<TR><TD><A HREF="../references/events/onmouseout.htm#onmouseout">onmouseout</A>  </TD><TD>Moves the mouse off an element.  </TD></TR>
<TR><TD><A HREF="../references/events/onmousedown.htm#onmousedown">onmousedown</A>  </TD><TD>Presses any of the mouse buttons.  </TD></TR>
<TR><TD><A HREF="../references/events/onmouseup.htm#onmouseup">onmouseup</A>  </TD><TD>Releases any of the mouse buttons.  </TD></TR>
<TR><TD><A HREF="../references/events/onmousemove.htm#onmousemove">onmousemove</A>  </TD><TD>Moves the mouse pointer within an element.  </TD></TR>
<TR><TD><A HREF="../references/events/onclick.htm#onclick">onclick</A>  </TD><TD>Clicks the left mouse button on an element.  </TD></TR>
<TR><TD><A HREF="../references/events/ondblclick.htm#ondblclick">ondblclick</A>  </TD><TD>Double-clicks the left mouse button on an element. 
 
<P> </TD></TR>
<TR><TD><B>Keyboard event</B>  </TD><TD><B>Generated when the user:</B>  </TD></TR>
<TR><TD><A HREF="../references/events/onkeypress.htm#onkeypress">onkeypress</A>  </TD><TD>Presses and releases a key (full down-and-up cycle). However, if a key is held down, multiple <A HREF="../references/events/onkeypress.htm#onkeypress">onkeypress</A>
 events are fired.  </TD></TR>
<TR><TD><A HREF="../references/events/onkeydown.htm#onkeydown">onkeydown</A>  </TD><TD>Presses a key. Only a single event will be fired, even if the key is held down.  </TD></TR>
<TR><TD><A HREF="../references/events/onkeyup.htm#onkeyup">onkeyup</A>  </TD><TD>Releases a key.  </TD></TR>
</TABLE>
<P>To help authors build code that is compact, simpler, and easier to maintain, Internet Explorer 4.0 introduces a new way to handle events&#151;<I>event bubbling</I>. Windows&#174;, OS/2, OSF Motif, and almost every other GUI platform uses this technique for processing events in their user interfaces. However, event bubbling is new to HTML and provides an efficient model for authors to incorporate event handling in their Web documents. 

<P>Previously, if an HTML element generated an event but no event handler was registered for it, the event would just vaporize, never to be seen again. Event bubbling simply passes these unhandled events to the parent element for handling. The event continues up ("bubbles up") the element hierarchy until it is handled, or until it reaches the topmost object, the <A HREF="../references/objects/obj_document.htm#obj_document">document</A> object.

<P>Event bubbling is useful because it:

<UL>
<LI>Allows multiple common actions to be handled centrally.
 <LI>Reduces the amount of overall code in the Web page.
 <LI>Reduces the number of code changes required to update a document.
</UL>

<P>The following is a simple example of event bubbling in action.

<PRE>&lt;html&gt;
&lt;body&gt;
&lt;div id=OuterDiv style="background-color: red" onmouseover="alert(window.event.srcElement.id);"&gt;
This is some text
&lt;img id=InnerImg&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</PRE>

<BUTTON onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/overview/dom_01.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P>On this page, when the user moves the mouse pointer over the text, a dialog box appears with the text "OuterDiv." If the mouse then moves over the image, another dialog box appears with the text "InnerImg". 

<P>The interesting thing here is that the <A HREF="../references/events/onmouseover.htm#onmouseover">onmouseover</A> event for the IMG element was handled even though it does not have an event handler. Why is this? The <B>onmouseover</B> event from the IMG element bubbles up to its parent element, which is the DIV element. DIV does have an event handler registered for the <B>onmouseover</B> event, so it fires and generates the specified dialog window. 

<P>Every time an event is fired, a special property on the <A HREF="../references/objects/obj_window.htm#obj_window">window</A> object is created. This special property contains the <A HREF="../references/objects/obj_event.htm#obj_event">event</A> object. The <B>event</B> object contains context information about the event that just fired, including mouse location, keyboard status, and (most importantly) the source element of the event. 

<P>The source element is the element that caused the event to fire, and can be accessed using the <A HREF="../references/properties/srcElement.htm#srcElement">srcElement</A> property on the window.event object. 

<P>In the example above, the dialog displays the <A HREF="../references/properties/id.htm#id">id</A> property of the event's <B>srcElement</B>.


<P><B>Handling Rollover Effects</B>

<P>An author creates a rollover effect to make part of a page react when the user moves the mouse over it. With Internet Explorer 4.0, the process of creating a rollover effect is greatly simplified. 

<PRE>&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
.Item {
   cursor: hand;
   font-family: verdana; 
   font-size: 20;
   font-style: normal;
   background-color: blue;
   color: white
 }
.Highlight {
   cursor: hand; 
   font-family: verdana;
   font-size: 20;
   font-style: italic;
   background-color: white;
   color: blue
 }
&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;span class=Item&gt;Milk&lt;/span&gt;
&lt;span class=Item&gt;Cookies&lt;/span&gt;
&lt;span class=Item&gt;Eggs&lt;/span&gt;
&lt;span class=Item&gt;Ham&lt;/span&gt;
&lt;span class=Item&gt;Cheese&lt;/span&gt;
&lt;span class=Item&gt;Pasta&lt;/span&gt;
&lt;span class=Item&gt;Chicken&lt;/span&gt;

&lt;script&gt;
function rollon() {
  if (window.event.srcElement.className == "Item") {
     window.event.srcElement.className = "Highlight";
  }
}

document.onmouseover = rollon;

function rolloff() {
  if (window.event.srcElement.className == "Highlight") {
     window.event.srcElement.className = "Item";
  }
}

document.onmouseout = rolloff;
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</PRE>

<BUTTON onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/overview/dom_02.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P>In this example, seven SPAN elements are initially set to use the class Item. When the mouse moves over any one of those elements, it will be changed to use the class Highlight. 

<P>Innovations in Internet Explorer 4.0 enable the following: 

<UL>
<LI>Events can now be generated from a SPAN element. Previously, an author would have had to wrap each SPAN in an anchor to get the right events.
<LI>With event bubbling, events can be captured at the <A HREF="../references/objects/obj_document.htm#obj_document">document</A> object level. You do not need to create separate event handlers for each element that will participate in the effect. For example, should the author add HTML to the page, these additional elements would participate in the event model without changing a single line of script. Note that the <B>document</B> object is the "super parent" for all elements in the document body.
</UL>

<P><B>Canceling Events</B>

<P>All events bubble to their parent element (and recursively all the way up to the <A HREF="../references/objects/obj_document.htm#obj_document">document</A> object) unless the event is canceled. To cancel an event, you must set the window.event.cancelBubble property to "true" in the event handler. Note that unless canceled, events will bubble up the hierarchy and be handled by all parent elements registered to the event, even if the event has already been handled. 

<P>Canceling event bubbling should not be confused with canceling the default action for the event. Some events (for example, the <A HREF="../references/events/onclick.htm#onclick">onclick</A> event on an anchor) have a default action. When an anchor is clicked, its default action is to navigate the current window to the URL specified in the <B>src</B> property. Returning "false" from an event handler, or setting window.event.returnValue to "false", cancels the default action but does not cancel event bubbling unless window.event.cancelBubble is also set. Conversely, canceling an event's bubbling doesn't cancel its default action. 

<P>The last example showed how you could use event bubbling to apply a common effect to a set of elements. What if you wanted to exclude an element from that effect? Simply change the line: 

<PRE>&lt;span class=Item&gt;Ham&lt;/span&gt;
</PRE>

<P>to

<PRE>&lt;span class=Item onmouseover="window.event.cancelBubble = true;" onmouseout="window.event.cancelBubble = true;"&gt;Ham&lt;/span&gt;
</PRE>

<BUTTON onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/overview/dom_03.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P>Now, no matter how many times you move your mouse over "Ham," it will not change style. This is both the <A HREF="../references/events/onmouseover.htm#onmouseover">onmouseover</A> and <A HREF="../references/events/onmouseout.htm#onmouseout">onmouseout</A> events were canceled; they did not bubble through to the <A HREF="../references/objects/obj_document.htm#obj_document">document</A>, so the <B>document</B> was never given the opportunity to handle those events for "Ham."


<P><B>Special Considerations</B>

<P>At any one time, you can have an <A HREF="../references/events/onmouseover.htm#onmouseover">onmouseover</A> event only on a single object. This means that in the following case: 

<PRE>&lt;DIV id=MyDiv&gt;
&lt;IMG id=MyImg&gt;
&lt;/DIV&gt;
</PRE>

<P>If you were to move your mouse over the IMG, the order of events would be as follows: 

<PRE>MyDiv:: onmouseover
MyDiv:: onmouseout
MyImg:: onmouseover
</PRE>

<P>Moving your mouse off the IMG fires the MyDiv::onmouseover event again.

<P>At times, the author might want to detect when the mouse moves outside a DIV to perform some special effect. It is not enough to simply trap the <A HREF="../references/events/onmouseout.htm#onmouseout">onmouseout</A> event. To make this easier, Internet Explorer 4.0 indicates the source element (<A HREF="../references/properties/fromElement.htm#fromElement">fromElement</A>) and target element (<A HREF="../references/properties/toElement.htm#toElement">toElement</A>) for the <A HREF="../references/events/onmouseover.htm#onmouseover">onmouseover</A> and <B>onmouseout</B> events. You can use these properties in combination with the <A HREF="../references/methods/contains.htm#contains">contains</A> method to tell when the mouse has moved outside a region. 

<P>The following example shows the use of these properties and methods. 

<PRE>&lt;html&gt;
&lt;body id=Body&gt;
&lt;div id=OuterDiv style="width: 100px; height: 50px; background: red" 
onmouseover="over();" onmouseout="out();"&gt;
&lt;img id=Img1&gt;
&lt;img id=Img2&gt;
&lt;img id=Img3&gt;
&lt;/div&gt;
&lt;script&gt;
function over() {
  var s;
  s = "onmouseover: "+window.event.srcElement.id+" from: "+

window.event.fromElement.id+" to: "+window.event.toElement.id;
  alert(s);
}

function out() {
  var s;
  s = "onmouseout: "+window.event.srcElement.id+" from: "+

window.event.fromElement.id+" to: "+window.event.toElement.id;
  alert(s);

  if (!(OuterDiv.contains(window.event.toElement))) {
     alert("Out Now");
  }
}
&lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;
</PRE>

<BUTTON onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/overview/dom_04.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P><B>Technical Topics</B>




<P><A CLASS=tctop HREF="windows_frames_dialogs.htm#dhtml_winframediag"><IMG SRC="../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">Working with Windows, Frames, and Dialogs</A><BR>
<P><A CLASS=tctop HREF="scripting_elements_collections.htm#dhtml_elements"><IMG SRC="../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">Scripting with Elements and Collections</A><BR>
<P><A CLASS=tctop HREF="event_model.htm#dom_event"><IMG SRC="../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">Understanding the Event Model</A><BR>
<P><A CLASS=tctop HREF="xframe_scripting_security.htm#dom_security"><IMG SRC="../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">Cross-Frame Scripting and Security</A><BR>
<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
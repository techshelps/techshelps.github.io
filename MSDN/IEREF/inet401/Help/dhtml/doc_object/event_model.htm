<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Understanding the Event Model</TITLE>

<META NAME=MS-HKWD CONTENT="Understanding the Event Model">
<META NAME="Keywords" CONTENT="Dynamic HTML, DHTML, IE4, Internet Explorer 4.0">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT, Mac">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="dom_event"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Understanding the Event Model"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../art/headbara.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Understanding the Event Model"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR>
<TR><TD><PRE><IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="doc_object.htm#dom_intro">Topic Contents</A></PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="scripting_elements_collections.htm">Scripting with Elements and Collections</A>
<IMG SRC="../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="xframe_scripting_security.htm">Cross-Frame Scripting and Security</A></PRE></TD></TR>
</TABLE>
<!-- NAVLINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>Understanding the Event Model</H1>
<BR CLEAR=ALL>
<P>An <I>event</I> is a notification that occurs in response to an action, such as a change in state or as a result of the user clicking the mouse or pressing a key while viewing the document. An <I>event handler</I> is code, typically a function or routine written in a scripting language, that receives control when the corresponding event occurs. The following topics describe events and event handlers and explain how to use them in your documents.
<P><A CLASS=tctop HREF="event_model.htm#The_Life_Cycle_of_an"><IMG SRC="../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">The Life Cycle of an Event</A><BR>
<P><A CLASS=tctop HREF="event_model.htm#Attaching_an_Event_H"><IMG SRC="../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">Attaching an Event Handler</A><BR>
<P><A CLASS=tctop HREF="event_model.htm#dom_event_bubbling"><IMG SRC="../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">More About Event Bubbling</A><BR>
<P><A CLASS=tctop HREF="event_model.htm#dom_event_canceling"><IMG SRC="../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">Returning Values and Canceling Default Actions</A><BR>
<P><A CLASS=tctop HREF="event_model.htm#Event_Handler_Scopin"><IMG SRC="../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">Event Handler Scoping</A><BR>
<P><A CLASS=tctop HREF="event_model.htm#Event_Object"><IMG SRC="../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">Event Object</A><BR>
<P><A CLASS=tctop HREF="event_model.htm#Keyboard_Events"><IMG SRC="../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">Keyboard Events</A><BR>
<P><A CLASS=tctop HREF="event_model.htm#Mouse_Events"><IMG SRC="../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">Mouse Events</A><BR>
<P><A CLASS=tctop HREF="event_model.htm#Focus_and_Selection_"><IMG SRC="../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">Focus and Selection Events</A><BR>
<P><A CLASS=tctop HREF="event_model.htm#Load_and_Readystate_"><IMG SRC="../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">Load and Readystate Events</A><BR>
<P><A CLASS=tctop HREF="event_model.htm#Other_Events"><IMG SRC="../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">Other Events</A><BR>
<H2><A NAME="The_Life_Cycle_of_an">The Life Cycle of an Event</A></H2>
<P>An event has a life cycle that begins with the action or condition that initiates the event and ends with the final response to the event by an event handler or Internet Explorer. The life cycle of a typical event has these steps:

<OL><LI>The user action or condition associated with the event occurs.
<LI>The <A HREF="../references/objects/obj_event.htm#obj_event">event</A> object is instantly updated to reflect the conditions of the event.
<LI>The event fires. This is the actual notification in response to the event.
<LI>The event handler associated with the source element is called. The event handler carries out its actions and returns. 
<LI>The event bubbles up to the next element in the hierarchy, and the event handler for that element is called. This step repeats until the event bubbles up to the window object or a handler cancels bubbling. 
<LI>The final default action (if any) is taken, but only if this action has not been canceled by a handler.
</OL>
<P>For events that bubble, if there is no event handler bound to the source element, the event handler for the next element up the hierarchy is called. 

<P>When an event handler carries out its actions, it uses the <A HREF="../references/objects/obj_event.htm#obj_event">event</A> object to retrieve information about the event, such as the position of the mouse, the state of the keyboard keys, the element in which the event occurred, and so on. 

<P>The following example defines an event handler, named "wasClicked", for the <A HREF="../references/events/onclick.htm#onclick">onclick</A> event and associates it with the <A HREF="../references/objects/BODY.htm#BODY">BODY</A> element. When the user clicks the mouse button anywhere in this document, the event fires and the event handler displays the message "I was clicked", followed by the tag name of the element in which the event occurred.

<PRE>&lt;HTML&gt;
&lt;BODY onclick="wasClicked()"&gt;
&lt;H1&gt;Welcome!&lt;/H1&gt;
&lt;P&gt;This is a very &lt;B&gt;short&lt;/B&gt; document.
&lt;SCRIPT LANGUAGE="JavaScript"&gt;
function wasClicked() {
    alert("I was clicked " + window.event.srcElement.tagName);
}
&lt;/SCRIPT&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<BUTTON onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/overview/event_01.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P>The <A HREF="../references/properties/srcElement.htm#srcElement">srcElement</A> property of the <A HREF="../references/objects/obj_event.htm#obj_event">event</A> object specifies the element object in which the event occurred. This is useful for deciding what action the event handler should take in response to the event. 

<P>Attaching another event handler, "wasAlsoClicked", to the <A HREF="../references/objects/P.htm#P">P</A> element demonstrates the parent-child relationship of document elements. 

<PRE>&lt;HTML&gt;
&lt;BODY onclick="wasClicked()"&gt;
&lt;H1&gt;Welcome!&lt;/H1&gt;
&lt;P onclick="wasAlsoClicked()"&gt;This is a very &lt;B&gt;short&lt;/B&gt; document.
&lt;SCRIPT LANGUAGE="JavaScript"&gt;
function wasClicked() {
    alert("I was clicked " + window.event.srcElement.tagName);
}
function wasAlsoClicked() {
    alert("You clicked me " + window.event.srcElement.tagName);
}
&lt;/SCRIPT&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<BUTTON onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/overview/event_02.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P>As in the previous example, if the user clicks in the heading "Welcome!", the message "I was clicked H1" appears. But if the user clicks the word "short", two messages appear: "You clicked me B" followed by "I was clicked B". In the first instance, the click in "Welcome!" fires the <A HREF="../references/events/onclick.htm#onclick">onclick</A> event, setting the <A HREF="../references/objects/H1.htm#H1">H1</A> element as the source element of the event. There is no event handler for this element, so the event bubbles up to its parent element in the hierarchy, <A HREF="../references/objects/BODY.htm#BODY">BODY</A>, and its event handler, wasClicked, is called.

<P>In the second case, when the user clicks in the word "short", the <I>onclick</I> event fires again. This time the <A HREF="../references/objects/B.htm#B">B</A> element is set as the source element. Since there is no event handler for <B>B</B>, the event bubbles up to the <A HREF="../references/objects/P.htm#P">P</A> element and its event handler, wasAlsoClicked, is called. But that's not the end of the event. After wasAlsoClicked returns, the event continues to bubble up the hierarchy to the next parent element, <A HREF="../references/objects/BODY.htm#BODY">BODY</A>, causing wasClicked to be called.

<P>In some cases, you might not want the event to bubble up in the hierarchy. You can stop bubbling by setting the <A HREF="../references/properties/cancelBubble.htm#cancelBubble">cancelBubble</A> property of the <A HREF="../references/objects/obj_event.htm#obj_event">event</A> object to true in any event handler. After the handler returns, the event stops bubbling and comes to an immediate end. Note that this cancellation affects only the current event, not subsequent events. Subsequent events will bubble unless you explicitly cancel them.

<P>Consider the following document. It defines two event handlers, setBodyStyle and setParaStyle, that are called when the user clicks in the document or in the paragraph, respectively. To ensure that only the style for the paragraph changes when the user clicks in the paragraph, the setParaStyle handler uses <A HREF="../references/properties/cancelBubble.htm#cancelBubble">cancelBubble</A> to prevent the event from bubbling up to <A HREF="../references/objects/BODY.htm#BODY">BODY</A>.

<PRE>&lt;HTML&gt;
&lt;BODY onclick="setBodyStyle()"&gt;
&lt;H1&gt;Welcome!&lt;/H1&gt;
&lt;P onclick="setParaStyle()"&gt;This is a very &lt;B&gt;short&lt;/B&gt; document.
&lt;SCRIPT LANGUAGE="JavaScript"&gt;
function setBodyStyle() { // Set all headings to green
    var coll = document.all.tags("H1");
    for (i=0; i&lt;coll.length; i++)
        coll.item(i).style.color = "green";
}
function setParaStyle() { // Underline the paragraph
    var el = window.event.srcElement;
    while ((el != null) &amp;&amp; (el.tagName != "P")) {
        el = el.parentElement;
    }
    if (el != null) el.style.textDecoration = "underline";
    window.event.cancelBubble = true;
}
&lt;/SCRIPT&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<BUTTON onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/overview/event_03.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P>Notice that the above example does not automatically assume that the source element is <A HREF="../references/objects/P.htm#P">P</A>. Because the user might have clicked in the <A HREF="../references/objects/B.htm#B">B</A> element, the event handler must check the element before applying the style. In this case, the handler uses the <A HREF="../references/properties/parentElement.htm#parentElement">parentElement</A> property to move up the element hierarchy until the <B>P</B> element is found.

<H2><A NAME="Attaching_an_Event_H">Attaching an Event Handler</A></H2>
<P>You must associate an event handler to a specific event and specific element or object in order for the handler to be called when the event fires. You can associate an event handler by using any one of the following, essentially equivalent, methods.

<P><B>Declare an event handler function</B> and assign a call to that function in the appropriate inline event attribute of an HTML tag. For example, the following defines the JScript function named "flip" and associates it to the <A HREF="../references/objects/IMG.htm#IMG">IMG</A> element as the event handler for the <A HREF="../references/events/onmouseover.htm#onmouseover">onmouseover</A> event.

<PRE>&lt;SCRIPT LANGUAGE="JavaScript"&gt;
function flip() {
    // Carry out some work
}
&lt;/SCRIPT&gt;
    .
    .
    .
&lt;IMG SRC="sample.gif" onmouseover="flip()"&gt;
</PRE>

<P>This example shows an event handler function being bound; however, any expression can be used here to be evaluated each time the event fires. Note that since this is an expression, the parentheses following the function name are required.

<P><B>Declare event handling code</B> and use the <A HREF="../references/html/LABEL.htm#FOR_">FOR=</A> and <A HREF="../references/html/SCRIPT.htm#EVENT_">EVENT=</A> attributes of the <A HREF="../references/objects/SCRIPT.htm#SCRIPT">SCRIPT</A> tag to associate the code with the event. The following example also defines JScript code and associates it as the <A HREF="../references/events/onmouseover.htm#onmouseover">onmouseover</A> event handler for the <A HREF="../references/objects/IMG.htm#IMG">IMG</A> element having the identifier "MyImage".

<PRE>&lt;SCRIPT FOR=MyImage EVENT=onmouseover LANGUAGE="JavaScript"&gt;
    // Carry out some work
&lt;/SCRIPT&gt;
    .
    .
    .
&lt;IMG ID=MyImage SRC="sample.gif"&gt;
</PRE>

<P><B>Declare an event handler function in VBScript</B> and associate it with an event by giving it a name having this form: <B>id_event</B>. The following example defines a VBScript function that handles the <A HREF="../references/objects/IMG.htm#IMG">IMG</A> element as its <A HREF="../references/events/onmouseover.htm#onmouseover">onmouseover</A> event handler.

<PRE>&lt;SCRIPT LANGUAGE="VBScript"&gt;
Function MyImage_onmouseover
    ' Carry out some work
End Function
&lt;/SCRIPT&gt;
    .
    .
    .
&lt;IMG ID=MyImage SRC="sample.gif"&gt;
</PRE>

<P>As a general rule, you should always define and associate your event handlers as early in the document as possible. Depending on the method you use, the handler can begin handling events either while the document is loading or immediately after loading, as shown in the following list.

<TABLE>
<TR><TD>JScript event handler </TD><TD>When set using an inline event attribute, associates when the element is created.</TD></TR>
<TR><TD><A HREF="../references/html/LABEL.htm#FOR_">FOR=</A> and <A HREF="../references/html/SCRIPT.htm#EVENT_">EVENT=</A> event handling code </TD><TD>Associates when the document is fully loaded.</TD></TR>
<TR><TD>VBScript event handler </TD><TD>Associates when the document and all contained objects and applications have been loaded. </TD></TR>
</TABLE>
<P>Some events can occur while the document is loading. If you need to handle events at this time, you can use JScript and an inline event attribute to associate the handler when the element is created.

<P>You can associate the same event handler with more than one element in the document. This is useful if you want the same action to occur whenever the given event occurs in any of the elements. Typically, event handlers are written to handle only one type of event, but it is possible to create event handlers that can handle more than one.

<P>You don't have to limit yourself to one event handler for each type of event. If the action you want to occur for a given event in one element is different than for the same event in another element, you can define two event handlers and associate each to its appropriate element. In general, you can define any number of event handlers for the same type of event and associate each with one or more elements in the document.

<P>If you use a combination of handling methods in a document, you can also define more than one event handler for the same event in the same element. For example, you can declare both a JScript and a VBScript event handler and associate them both with the same event and element. If you associate more than one event handler in this way and the handlers are in different languages, all handlers will receive the event, but the order in which they receive the event is not specified. 

<P>If you associate two event handlers of the same language to the same event and element, only one handler receives the event. In most cases, this will be the first handler that you bound to the element. But any handler associated using the <A HREF="../references/html/LABEL.htm#FOR_">FOR=</A> and <A HREF="../references/html/SCRIPT.htm#EVENT_">EVENT=</A> attributes always takes precedence over a handler associated using an inline event attribute. 

<P>When you associate with an inline attribute, you typically assign to the attribute a call to the event handler function, causing that function to be called when the event fires. But assigning a call to an event handler is not a requirement. You can instead assign any valid script code; this code is executed when the event fires. For example, the following <A HREF="../references/objects/BUTTON.htm#BUTTON">BUTTON</A> element displays the message "Hello World!" when you click it.

<PRE>&lt;BUTTON onclick="alert('Hello World!')" LANGUAGE="JavaScript"&gt;Click Me&lt;/BUTTON&gt;
</PRE>

<P>This method is convenient as long as the code is relatively short and uncomplicated. If you use an inline attribute in this way, you should also use the <A HREF="../references/html/A.htm#LANGUAGE_">LANGUAGE=</A> attribute to specify the scripting language for the code. If you don't specify the language, either the default language or the most recent language specified is assumed.

<H3><A NAME="Attaching_with_Event">Attaching with Event Properties</A></H3>
<P>The inline event attributes of an element are also available as properties. This means you can use the properties to dynamically change the event handling for an element at any time. For example, you can associate a handler to an element that didn't previously have one, or change the existing handler for an element to some other handler. Adding or changing event handlers is a useful way to make sure that the actions taken on an event reflect the current content of the element. 

<P>The following JScript example use the event property to associate the event handler, named setHeadStyle, to the <A HREF="../references/objects/H1.htm#H1">H1</A> element. It assigns a call to the function to the <A HREF="../references/events/onclick.htm#onclick">onclick</A> property of the element. 

<PRE>&lt;H1 id=MyHeading&gt;Welcome!&lt;/H1&gt;
    .
    .
    .
&lt;SCRIPT LANGUAGE="JavaScript"&gt;
function setHeadStyle() {
    window.event.srcElement.style.color = "green";
}

document.all.MyHeading.onclick="setHeadStyle()";
&lt;/SCRIPT&gt;
</PRE>

<P>An alternate way to associate the event handler is to assign the function pointer (rather than a function call) to the property as in the following example. VBScript does not support function pointers.

<PRE>document.all.MyHeading.onclick=setHeadStyle; 
</PRE>
<H3><A NAME="Handling_Custom_Even">Handling Custom Events or Events with Parameters</A></H3>
<P>Using the <A HREF="../references/html/LABEL.htm#FOR_">FOR=</A> and <A HREF="../references/html/SCRIPT.htm#EVENT_">EVENT=</A> attributes to associate events gives you access to custom events fired by embedded objects and to any parameters that an event generates. Unlike standard events that can be bound using attributes or properties, in the case of custom objects these are not available.

<P>You use the <A HREF="../references/html/LABEL.htm#FOR_">FOR=</A> attribute to specify which element or object to handle, assigning it an identifier or the name of an object, application, or control. If there is more than one element or object having the same identifier or name, only the first one is bound to the handler. Names take precedence over identifiers. If you don't specify this attribute, the handler is bound to the window by default. Note that JScript is case sensitive, so you must type the identifier or name exactly as it appears in the corresponding element or object.

<P>You use the <A HREF="../references/html/SCRIPT.htm#EVENT_">EVENT=</A> attribute to specify which event to associate to, assigning it an event name. If the event generates parameters (few predefined events do), you can also specify a list of comma-separated parameter names enclosed in parentheses immediately after the event name. The parameters are untyped. Because JScript is case sensitive, make sure you always spell event names in lowercase letters. Also, if you give a parameter list, VBScript requires that all parameters defined for the event be listed, even if they are not used.

<P>The following JScript example associates the event handling code with the <A HREF="../references/events/onerror_0.htm#onerror_0">onerror</A> event for the window. This event fires when an error while loading the document is detected. The event generates parameters, so a parameter list is given, and the "lineno" parameter is used in the code.

<PRE>&lt;SCRIPT FOR=window EVENT="onerror(message, url, lineno)" LANGUAGE="JavaScript"&gt;
alert("An error has occurred on line " + lineno);
&lt;/SCRIPT&gt;
</PRE>

<P>The following JScript example associates the event handling code with a custom event, named "ondatechange", that the embedded object fires. 

<PRE>&lt;OBJECT ID=myDateObject ... &gt;&lt;/OBJECT&gt;
&lt;SCRIPT FOR=myDateObject EVENT="ondatechange()" LANGUAGE="JavaScript"&gt;
    // Carries out an action when the date changes
&lt;/SCRIPT&gt;
</PRE>

<P>An alternate way to handle custom events and to receive event parameters is to associate VBScript handlers. In this case, you use VBScript's <B>id_event</B> format for the event handler name and provide a parameter list if appropriate. The following VBScript example handles the <A HREF="../references/events/onerror_0.htm#onerror_0">onerror</A> event and receives its parameters.

<PRE>&lt;SCRIPT LANGUAGE="VBScript"&gt;
Function window_onerror(message, url, lineno)
    alert "An error has occurred on line " &amp; lineno 
End Function
&lt;/SCRIPT&gt;
</PRE>

<P>Similarly, the following VBScript example handles the custom event, ondatechange, fired by the embedded object.

<PRE>&lt;OBJECT ID=myDateObject ... &gt;&lt;/OBJECT&gt;
&lt;SCRIPT LANGUAGE="VBScript"&gt;
Function myDateObject_ondatechange()
    // Carries out an action when the date changes
End Function
&lt;/SCRIPT&gt;
</PRE>
<H2><A NAME="dom_event_bubbling">More About Event Bubbling</A></H2>
<P>Event bubbling ensures that the event handlers for all elements in which an event occurs have an opportunity to respond to the event. Consider the following example.

<PRE>&lt;P onclick="doPara()"&gt;
Jump to a &lt;B&gt;sample&lt;/B&gt; document.
&lt;/P&gt;
</PRE>

<P>The user might reasonably expect that clicking the word "sample" will cause the same action, a call to the event handler named "doPara", as clicking any other word in the <A HREF="../references/objects/P.htm#P">P</A> element. But if events did not bubble up from the source element, clicking "sample" would cause no action because there is no event handler bound to the <A HREF="../references/objects/B.htm#B">B</A> element. Because events do bubble up through the element hierarchy, every event handler on the element's parent hierarchy has a chance to respond, and in this case "doPara" is called when the user clicks "sample". 

<P>Unless you keep event bubbling in mind, you might initially be baffled by some results. For example, consider a document that uses <A HREF="../references/events/onmouseover.htm#onmouseover">onmouseover</A> and <A HREF="../references/events/onmouseout.htm#onmouseout">onmouseout</A> events to show and hide a collection of paragraphs, but also uses the events inside the list to highlight paragraphs in the collection.

<PRE>&lt;DIV onmouseover="showPara()" onmouseout="hidePara()"&gt;
My Menu
&lt;P STYLE="display:none" onmouseover="highlight()" onmouseout="unhighlight()"&gt;Item 1
&lt;P STYLE="display:none" onmouseover="highlight()" onmouseout="unhighlight()"&gt;Item 2
&lt;/DIV&gt;
</PRE>

<P>In the example above, suppose the user moves the mouse over the words "My Menu", then over the words "Item 1", and finally over the words "Item 2". Here's what happens:

<OL><LI>The mouse cursor moves over "My Menu".
<LI>The <A HREF="../references/events/onmouseover.htm#onmouseover">onmouseover</A> event fires for the <A HREF="../references/objects/DIV.htm#DIV">DIV</A> element, and "showPara" is called. 
<LI>The mouse cursor moves from "My Menu".
<LI>The <A HREF="../references/events/onmouseout.htm#onmouseout">onmouseout</A> event fires for the <A HREF="../references/objects/DIV.htm#DIV">DIV</A> element, and "hidePara" is called. 
<LI>The mouse cursor moves over "Item 1".
<LI>The <A HREF="../references/events/onmouseover.htm#onmouseover">onmouseover</A> event fires for the <A HREF="../references/objects/P.htm#P">P</A> element, and "highlight" is called. 
<LI>The <A HREF="../references/events/onmouseover.htm#onmouseover">onmouseover</A> event bubbles up to the <A HREF="../references/objects/DIV.htm#DIV">DIV</A> element, and "showPara" is called with <A HREF="../references/objects/P.htm#P">P</A> as the source element.
<LI>The mouse cursor moves from "Item 1".
<LI>The <A HREF="../references/events/onmouseout.htm#onmouseout">onmouseout</A> event fires for the <A HREF="../references/objects/P.htm#P">P</A> element, and "unhighlight" is called. 
<LI>The <A HREF="../references/events/onmouseout.htm#onmouseout">onmouseout</A> event bubbles up to the <A HREF="../references/objects/DIV.htm#DIV">DIV</A> element, and "hidePara" is called with <A HREF="../references/objects/P.htm#P">P</A> as the source element.
<LI>The mouse cursor moves over "Item 2".
<LI>The <A HREF="../references/events/onmouseover.htm#onmouseover">onmouseover</A> event fires for the <A HREF="../references/objects/P.htm#P">P</A> element, and "unhighlight" is called. 
<LI>The <A HREF="../references/events/onmouseover.htm#onmouseover">onmouseover</A> event bubbles up to the <A HREF="../references/objects/DIV.htm#DIV">DIV</A> element, and "showPara" is called with the second <A HREF="../references/objects/P.htm#P">P</A> as the source element.
</OL>
<P>As you can see, whenever the user moves the mouse over and from a paragraph in the collection, the event handlers for <A HREF="../references/objects/DIV.htm#DIV">DIV</A> are called. If the handlers were written without taking this into account, the paragraphs might be hidden when they should not be.

<P>In general, whenever you use nested event handlers in this way, you need to carefully consider whether the event handler should carry out an action each time it is called. One way to control the action is to use the <A HREF="../references/properties/cancelBubble.htm#cancelBubble">cancelBubble</A> property. In the previous example, the "highlight" and "unhighlight" event handlers could set <B>cancelBubble</B> to true to prevent the event from bubbling up to the <A HREF="../references/objects/DIV.htm#DIV">DIV</A> element. Another way is to check the source element for the event, the <A HREF="../references/properties/srcElement.htm#srcElement">srcElement</A> property of the <A HREF="../references/objects/obj_event.htm#obj_event">event</A> object, and pick an action that is appropriate to that element. 

<H2><A NAME="dom_event_canceling">Returning Values and Canceling Default Actions</A></H2>
<P>Event handlers can return values to the event either by using the return value mechanism defined for the language, such as the <B>return</B> statement for JScript, or by using the <A HREF="../references/properties/returnValue_1.htm#returnValue_1">returnValue</A> property of the <A HREF="../references/objects/obj_event.htm#obj_event">event</A> object.

<P>Return values are useful for controlling the default actions associated with events. For example, clicking the <A HREF="../references/objects/A.htm#A">A</A> element causes the browser to load the document specified by the <A HREF="../references/properties/href_1.htm#href_1">href</A> attribute. You can cancel default actions such as these by returning false from your event handlers. 

<P>Not all scripting languages support return values. For these languages, you must use the <A HREF="../references/properties/returnValue_1.htm#returnValue_1">returnValue</A> property to set a return value. If a language supports return values, you can use either the language-defined method of returning a value or <B>returnValue</B>. If you use both methods, the property always takes precedence.

<P>After all event bubbling is complete, any default action associated with the event is canceled if <A HREF="../references/properties/returnValue_1.htm#returnValue_1">returnValue</A> is false or, if this property is not set, the return value of the last function is false. Note that some events do not have default actions associated with them and might use the <B>returnValue</B> (or function return value) in other ways.

<P>Canceling a default action is not the same as canceling event bubbling. You can cancel the default action and still allow the event to bubble up through the hierarchy. 

<H2><A NAME="Event_Handler_Scopin">Event Handler Scoping</A></H2>
<P>Depending upon whether a script is written inside a <A HREF="../references/objects/FORM.htm#FORM">FORM</A> container or elsewhere in the document, different scoping rules are applied for executing event handlers and the elements that are available on the <A HREF="../references/objects/obj_window.htm#obj_window">window</A> object. The different scenarios are listed below. 

<P>When events are fired, a special object reference&#151;the <B>me</B> pointer in VBScript and <B>this</B> in JScript&#151;is set to the current element firing the event.

<P>1) Event handler for a button outside a form

<P>This is the basic case. You can use any of the handling mechanisms described earlier. The only rule is that you cannot access elements within a form block directly on the window object. Instead, you can access them from the <A HREF="../references/objects/obj_document.htm#obj_document">document</A> object or the particular form's elements collection.

<P>2) Event handler not inside the <A HREF="../references/objects/FORM.htm#FORM">FORM</A> block for a button inside a form

<P>If the button has a unique identifier to the entire document, the event handler can be written anywhere within the document. If the event handler is written outside the form block, the same rules apply for accessing elements on the <A HREF="../references/objects/obj_window.htm#obj_window">window</A> object as described in 1) above. 

<P>3) Event handler inside the <A HREF="../references/objects/FORM.htm#FORM">FORM</A> block for a button inside the form

<P>If the button's identifier is not unique to the document, the event handler must be written within the form. When writing event handlers behind the form, using either inline attributes or the <A HREF="../references/html/LABEL.htm#FOR_">FOR=</A> and <A HREF="../references/html/SCRIPT.htm#EVENT_">EVENT=</A> attributes (but not the VBScript <B>id_event</B> method) changes the scoping rules of the window object. Events defined this way can access elements behind the form directly from the window object. They can also access elements that are outside the form directly as long as they do not conflict with any of the form's element names. 

<P>When using the VBScript<B>id_event</B> method of handling, only elements that are not within the form's scope can be accessed as properties of the window.

<P>If there is no unique identifier within the form, the first element with the matching identifier is bound to the event handler when using the <A HREF="../references/html/LABEL.htm#FOR_">FOR=</A> and <A HREF="../references/html/SCRIPT.htm#EVENT_">EVENT=</A> attributes of the <A HREF="../references/objects/SCRIPT.htm#SCRIPT">SCRIPT</A> element or the VBScript <B>id_event</B> mechanism of defining events. 

<P>4) Event handler inside the <A HREF="../references/objects/FORM.htm#FORM">FORM</A> block for a button outside the form

<P>The event handler executes only if the VBScript <B>id_event</B> method of handling is used. Otherwise this code will not execute.

<P>You can write an event handler for multiple elements. This can be done only when the elements are not within the same scope, where scope is defined as being inside the form or not inside the form. For example, if writing an event handler for id=genericButton in the document's scope, and adding a genericButton to the document and another within a form, the same click event is fired in both cases. The <B>me</B> pointer will point to the actual source of the event. These elements do not have to be of the same type for this to work. 

<P>If multiple elements have the same identifier and are within the same scope, only the first one fires the event.


<H2><A NAME="Event_Object">Event Object</A></H2>
<P>The <A HREF="../references/objects/obj_event.htm#obj_event">event</A> object, on the <A HREF="../references/objects/obj_window.htm#obj_window">window</A> object, is accessible to all event handlers and is the language-independent, preferred way for handlers to get and modify information about the event. For example, the following VBScript and JScript examples both use the object to display the tag name of the element in which the event occurred.

<PRE>&lt;SCRIPT LANGUAGE="VBScript"&gt;
Function document_onclick
    alert window.event.srcElement.tagName
End Function
&lt;/SCRIPT&gt;

&lt;SCRIPT LANGUAGE="JavaScript"&gt;
function doClick() {
    alert(window.event.srcElement.tagName);
}
&lt;/SCRIPT&gt;
</PRE>

<P><B>Note</B>  In VBScript, you must use the <B>window</B> keyword with <A HREF="../references/objects/obj_event.htm#obj_event">event</A> to avoid a conflict with the VBScript <B>event</B> keyword.
<P>The <A HREF="../references/properties/srcElement.htm#srcElement">srcElement</A> property is one of the most important properties on <A HREF="../references/objects/obj_event.htm#obj_event">event</A>. Many event handlers use this property to determine an action to take based on the source of the event. For example, the following JScript event handler carries out an action whenever the user clicks any of the <A HREF="../references/objects/H1.htm#H1">H1</A> elements in the document.

<PRE>&lt;SCRIPT FOR=document EVENT="onclick()" LANGUAGE="JavaScript"&gt;
    if ("H1" == event.srcElement.tagName) {
        // user clicked on a H1
    }
&lt;/SCRIPT&gt;
</PRE>

<P>Another important property is <A HREF="../references/properties/cancelBubble.htm#cancelBubble">cancelBubble</A>, which controls event bubbling for the given event and, if set to true, prevents the event from bubbling up the element hierarchy. 

<P>The <A HREF="../references/properties/returnValue_1.htm#returnValue_1">returnValue</A> property gives an event handler a language-independent way to return a value to the event. For many events, setting the return value to false cancels the default action for that event. 

<P>Some properties of the <A HREF="../references/objects/obj_event.htm#obj_event">event</A> object have meaning only for certain events. For example, the <A HREF="../references/properties/keyCode.htm#keyCode">keyCode</A> property is an integer specifying a standard numeric Unicode keycode for keyboard key events. For other events, this property is set to zero. Other examples are the <A HREF="../references/properties/toElement.htm#toElement">toElement</A> and <A HREF="../references/properties/fromElement.htm#fromElement">fromElement</A> properties, which represent the element that the mouse is going to and coming from for the <A HREF="../references/events/onmouseover.htm#onmouseover">onmouseover</A> and <A HREF="../references/events/onmouseout.htm#onmouseout">onmouseout</A> events. For other events, these properties are null.

<P>When a mouse event occurs, such as <A HREF="../references/events/onclick.htm#onclick">onclick</A>, the <A HREF="../references/properties/x.htm#x">x</A> and <A HREF="../references/properties/y.htm#y">y</A> properties specify the horizontal and vertical position of the mouse. If none of the elements containing the source element are positioned, the position of the mouse is relative to the <A HREF="../references/objects/BODY.htm#BODY">BODY</A> element. If a positioned element contains the source element, the position of the mouse is relative to that element. In addition to mouse position, the <A HREF="../references/objects/INPUT.htm#button">button</A> property indicates which mouse buttons are pressed at the time of the event. It is 0 if no buttons are pressed, 1 for the left button, 2 for the right, and 3 for both.

<P>The <A HREF="../references/properties/altKey.htm#altKey">altKey</A>, <A HREF="../references/properties/ctrlKey.htm#ctrlKey">ctrlKey</A>, and <A HREF="../references/properties/shiftKey.htm#shiftKey">shiftKey</A> properties are useful for all events. These specify whether the <SMALL>ALT</SMALL>, <SMALL>CTRL</SMALL>, and <SMALL>SHIFT</SMALL> keys were down or up at the time of the event. The property is true if the key was down. The following VBScript example cancels the default action for the <A HREF="../references/objects/A.htm#A">A</A> element if the <SMALL>SHIFT</SMALL> key is down when the event occurs. 

<PRE>&lt;SCRIPT FOR=document EVENT="onclick()" LANGUAGE="VBScript"&gt;
    If (("A" = window.event.srcElement.tagName) and (window.event.shift)) Then
        event.returnValue = false
    End If
&lt;/SCRIPT&gt;
</PRE>

<P>The <A HREF="../references/properties/clientX.htm#clientX">clientX</A> and <A HREF="../references/properties/clientY.htm#clientY">clientY</A> properties are integers specifying the coordinates relative to the size of the client area, not including window decorations. The <A HREF="../references/properties/offsetX.htm#offsetX">offsetX</A> and <A HREF="../references/properties/offsetY.htm#offsetY">offsetY</A> properties are integers specifying container relative positions. These match the <A HREF="../references/properties/offsetTop.htm#offsetTop">offsetTop</A> and <A HREF="../references/properties/offsetLeft.htm#offsetLeft">offsetLeft</A> properties of the element. Use the <A HREF="../references/properties/offsetParent.htm#offsetParent">offsetParent</A> property to find the container that defines this positioning. The <A HREF="../references/properties/screenX.htm#screenX">screenX</A> and <A HREF="../references/properties/screenY.htm#screenY">screenY</A> properties are integers specifying the coordinates relative to the physical screen.

<P>Note that properties such as <A HREF="../references/properties/returnValue_1.htm#returnValue_1">returnValue</A> and <A HREF="../references/properties/keyCode.htm#keyCode">keyCode</A> are read/write properties. This means an event handler can assign a new value to the property, overwriting the original value. The property retains this new value as the event bubbles up the element hierarchy. This makes it easy for an event handler bound at a low level in the hierarchy to modify events that are also handled at a higher level.

<P>The <A HREF="../references/objects/obj_event.htm#obj_event">event</A> object gives you detailed information about where in the document an event occurs, so it is easy to write an event handler that can adapt its action based on the source of the event. If you associate the event handler on an element or object that contains all the elements in which the event might occur, event bubbling will ensure that the handler is called whenever the event occurs. This means you don't need to associate the event handler to each element. 


<H2><A NAME="Keyboard_Events">Keyboard Events</A></H2>
<P>Keyboard events occur when the user presses or releases a keyboard key. The <A HREF="../references/events/onkeydown.htm#onkeydown">onkeydown</A> and <A HREF="../references/events/onkeyup.htm#onkeyup">onkeyup</A> events fire when a key changes state, either being pressed (down) or released (up). These events fire for all keys on the keyboard, including shift state keys such as <SMALL>SHIFT</SMALL>, <SMALL>CTRL</SMALL>, and <SMALL>ALT</SMALL>. 

<P>The <A HREF="../references/events/onkeypress.htm#onkeypress">onkeypress</A> event fires when the user's keyboard input is translated to a character. These occur, for example, when the user presses letter or number keys, or a combination of shift keys and letters and numbers.

<P>When a keyboard event occurs, the <A HREF="../references/properties/keyCode.htm#keyCode">keyCode</A> property of the <A HREF="../references/objects/obj_event.htm#obj_event">event</A> object contains the Unicode keycode of the corresponding key. The <A HREF="../references/properties/altKey.htm#altKey">altKey</A>, <A HREF="../references/properties/ctrlKey.htm#ctrlKey">ctrlKey</A>, and <A HREF="../references/properties/shiftKey.htm#shiftKey">shiftKey</A> properties specify the state of the <SMALL>ALT</SMALL>, <SMALL>CTRL</SMALL>, and <SMALL>SHIFT</SMALL> keys.

<P>You can change which key is associated with the event by either changing the value of the <A HREF="../references/properties/keyCode.htm#keyCode">keyCode</A> property or returning an integer value. You can cancel the event by returning zero or false.

<P>The <A HREF="../references/events/onhelp.htm#onhelp">onhelp</A> event is a special keyboard event that occurs when the user presses the help key (<SMALL>F1</SMALL>). 

<H2><A NAME="Mouse_Events">Mouse Events</A></H2>
<P>Mouse events occur when the user moves the mouse or clicks the left button. The <A HREF="../references/events/onmousemove.htm#onmousemove">onmousemove</A> event fires when the user moves the mouse, and <A HREF="../references/events/onmouseover.htm#onmouseover">onmouseover</A> and <A HREF="../references/events/onmouseout.htm#onmouseout">onmouseout</A> fire when the mouse moves in and out of an element. The <A HREF="../references/events/onmousedown.htm#onmousedown">onmousedown</A> and <A HREF="../references/events/onmouseup.htm#onmouseup">onmouseup</A> events fire when the left mouse button changes state, either being pressed (down) or released (up). The <A HREF="../references/events/onclick.htm#onclick">onclick</A> and <A HREF="../references/events/ondblclick.htm#ondblclick">ondblclick</A> events fire when the user single-clicks and double-clicks the button. 

<P>When a mouse event occurs, the <A HREF="../references/objects/INPUT.htm#button">button</A> property of the <A HREF="../references/objects/obj_event.htm#obj_event">event</A> object identifies which mouse button (if any) is down. The <A HREF="../references/properties/x.htm#x">x</A> and <A HREF="../references/properties/y.htm#y">y</A> properties specify the location of the mouse at the time of the event. For the <A HREF="../references/events/onmouseover.htm#onmouseover">onmouseover</A> and <A HREF="../references/events/onmouseout.htm#onmouseout">onmouseout</A> events, the <A HREF="../references/properties/toElement.htm#toElement">toElement</A> and <A HREF="../references/properties/fromElement.htm#fromElement">fromElement</A> properties specify the elements the mouse is moving to and from.

<H3><A NAME="Mouse_Clicks">Mouse Clicks</A></H3>
<P>The <A HREF="../references/events/onclick.htm#onclick">onclick</A> event fires when the user presses and releases the button. The <A HREF="../references/events/ondblclick.htm#ondblclick">ondblclick</A> event occurs when the elapsed time between two consecutive <B>onclick</B> events is within a system-defined range. 

<P>Mouse click events are interspersed with <A HREF="../references/events/onmousedown.htm#onmousedown">onmousedown</A> and <A HREF="../references/events/onmouseup.htm#onmouseup">onmouseup</A> events. For example, the <A HREF="../references/events/onclick.htm#onclick">onclick</A> event follows an <B>onmouseup</B> event. The <A HREF="../references/events/ondblclick.htm#ondblclick">ondblclick</A> event occurs at the end of this sequence:

<TABLE>
<TR><TD><A HREF="../references/events/onmousedown.htm#onmousedown">onmousedown</A></TD><TR><TD><A HREF="../references/events/onmouseup.htm#onmouseup">onmouseup</A></TD><TR><TD><A HREF="../references/events/onclick.htm#onclick">onclick</A></TD><TR><TD><A HREF="../references/events/onmouseup.htm#onmouseup">onmouseup</A></TD><TR><TD><A HREF="../references/events/ondblclick.htm#ondblclick">ondblclick</A></TD></TABLE>
<P>An <A HREF="../references/events/onclick.htm#onclick">onclick</A> event can also occur when the user presses the <SMALL>ENTER</SMALL> key on a focusable element, such as a <A HREF="../references/objects/BUTTON.htm#BUTTON">BUTTON</A> element. In this case, the event fires without a preceding <A HREF="../references/events/onmouseup.htm#onmouseup">onmouseup</A> event.

<P>You can cancel a mouse click by returning false or setting the <A HREF="../references/properties/returnValue_1.htm#returnValue_1">returnValue</A> property to false.

<P><B>Note</B>  For mice that have one button, the button is considered the left mouse button. 
<H3><A NAME="Moving_Between_Eleme">Moving Between Elements</A></H3>
<P>The <A HREF="../references/events/onmouseover.htm#onmouseover">onmouseover</A> and <A HREF="../references/events/onmouseout.htm#onmouseout">onmouseout</A> events fire whenever the mouse cursor moves from one element to another. Consider the following document fragment. 

<PRE>&lt;H1&gt;Move from here&lt;/H1&gt;
&lt;P id=myP&gt;&lt;B&gt;&lt;I&gt;To here&lt;/I&gt;&lt;/B&gt;&lt;/P&gt;
</PRE>

<P>In the above example, as the mouse moves from the <A HREF="../references/objects/H1.htm#H1">H1</A> element to the words "To here", it crosses over the boundaries of the <A HREF="../references/objects/P.htm#P">P</A>, <A HREF="../references/objects/B.htm#B">B</A>, and <A HREF="../references/objects/I.htm#I">I</A> elements. However, the event sequence is simplified to the following: <A HREF="../references/events/onmouseout.htm#onmouseout">onmouseout</A> on the <B>H1</B> (which bubbles up the hierarchy), and <A HREF="../references/events/onmouseover.htm#onmouseover">onmouseover</A> on the <B>I</B> element (again bubbling up the hierarchy). 

<P>The <A HREF="../references/properties/fromElement.htm#fromElement">fromElement</A> and <A HREF="../references/properties/toElement.htm#toElement">toElement</A> properties on the event object return the element object the mouse is coming from and going to. Through event bubbling, it is possible to determine each boundary that has been crossed by the mouse move.

<P>When moving between elements, the <A HREF="../references/events/onmouseout.htm#onmouseout">onmouseout</A> event fires first to indicate that the mouse has left the original element. Next the <A HREF="../references/events/onmousemove.htm#onmousemove">onmousemove</A> event fires, indicating that the mouse has moved. Finally, <A HREF="../references/events/onmouseover.htm#onmouseover">onmouseover</A> fires to indicate that the mouse has entered the new element.

<H2><A NAME="Focus_and_Selection_">Focus and Selection Events</A></H2>
<P>The focus and selection events give you detailed information about what actions the user is taking in the document. 

<P>The focus events occur on elements such as <A HREF="../references/objects/BUTTON.htm#BUTTON">BUTTON</A> and various types of <A HREF="../references/objects/INPUT.htm#INPUT">INPUT</A> that can receive the input focus. For these elements, the <A HREF="../references/events/onfocus.htm#onfocus">onfocus</A> event fires when an element receives the focus, and the <A HREF="../references/events/onblur.htm#onblur">onblur</A> event fires when an element loses the focus. An element receives the input focus when the user clicks it with the mouse or navigates to it using the keyboard. These events are useful for knowing when to prepare an element to receive input from the user.

<P>Note that the focus events fire whether moving the input focus between elements in the document or between frames in the window or even applications on the desktop. For example, if a control in the document has the focus and the user switches to another application, the <A HREF="../references/events/onblur.htm#onblur">onblur</A> event fires for that control. When the user switches back to the document, the <A HREF="../references/events/onfocus.htm#onfocus">onfocus</A> event fires. It is not possible to cancel the loss of focus.

<P>The selection events occur when the user selects a portion of the document by using the mouse or keyboard. The <A HREF="../references/events/onselectstart.htm#onselectstart">onselectstart</A> event fires when a selection is first initiated, for example, when the user clicks a character or object in the document. The <A HREF="../references/events/onselect.htm#onselect">onselect</A> event fires when the user changes the selection, for example, by moving the mouse over a portion of the document while holding down the mouse button. The default action for the <B>onselectstart</B> event is to move the selection to the given character or object and highlight that selection. You can cancel this default action by returning false.

<P>The <A HREF="../references/events/ondragstart.htm#ondragstart">ondragstart</A> event fires when the user first begins to drag the selection. The user can drag a selection by holding down the mouse button on the current selection and moving the mouse. The default action for this event is to prepare the selection to be copied to another element. You can cancel this default action by returning false.


<H2><A NAME="Load_and_Readystate_">Load and Readystate Events</A></H2>
<P>There are three events that signify the current state of the document: <A HREF="../content/databind/events.htm#onreadystatechange">onreadystatechange</A>, <A HREF="../references/events/onload.htm#onload">onload</A>, and <A HREF="../references/events/onunload.htm#onunload">onunload</A>.

<P>The <A HREF="../content/databind/events.htm#onreadystatechange">onreadystatechange</A> event fires when the document changes from initializing to interactive, and from interactive to loaded. A document is interactive as soon as the user can interact with it by scrolling or clicking on anchors or elements. A document is loaded when all the content has been downloaded. 

<P>The <A HREF="../references/events/onload.htm#onload">onload</A> event fires after the document is loaded and all the elements on the page have been completely downloaded. The <A HREF="../references/events/onunload.htm#onunload">onunload</A> event fires immediately prior to the document being unloaded (when navigating to another document). 

<P>Specifying code for the <A HREF="../references/events/onload.htm#onload">onload</A> and <A HREF="../references/events/onunload.htm#onunload">onunload</A> events can be done on the body object. However, these events actually occur on the window. Therefore, when handling the <B>onload</B> event using the &lt;SCRIPT FOR= EVENT=&gt; syntax, &lt;SCRIPT FOR=myBody Event=onLoad&gt; will fail. Instead, you must use &lt;SCRIPT FOR=window Event=onLoad&gt;.


<H2><A NAME="Other_Events">Other Events</A></H2>
<P>There are a number of other useful events that you can use in your document. For a complete list, see the <A HREF="../references/events/events.htm#om40_event">Events</A> reference.

<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Filters and Transitions</TITLE>

<META NAME=MS-HKWD CONTENT="Filters and Transitions">
<META NAME="Keywords" CONTENT="Dynamic HTML, DHTML, IE4, Internet Explorer 4.0, dynamic content">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT, Mac">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="dhtml_filters"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Filters and Transitions"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../art/headbara.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Filters and Transitions"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR>
<TR><TD><PRE><IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="../dhtml.htm">Topic Contents</A></PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="positioning.htm">Positioning</A>
<IMG SRC="../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="filters/reference.htm">Visual and Transition Filters Reference</A></PRE></TD></TR>
</TABLE>
<!-- NAVLINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>Filters and Transitions</H1>
<BR CLEAR=ALL>
<P>With the introduction of Microsoft&#174; Internet Explorer 4.0, Web page authors now can apply multimedia-style effects to their content through the use of visual filters and transitions. These effects are implemented in Web pages using a Cascading Style Sheets (CSS) attribute. Visual filters and transitions can be applied to standard HTML controls, such as text containers, images, and any other windowless object. Transitions are time-varying filters that can create a transition from one visual state to another. By combining filters and transitions with basic scripting, authors have a powerful tool for creating visually engaging and interactive documents. 

<P><A CLASS=tctop HREF="filters.htm#CSS_Filters"><IMG SRC="../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">Creating Multimedia Effects with Visual Filters and Transitions</A><BR>
<P><A CLASS=tctop HREF="filters.htm#Defining_Visual_Filt"><IMG SRC="../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">Defining Visual Filters</A><BR>
<P><A CLASS=tctop HREF="filters.htm#Scripting_Filters"><IMG SRC="../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">Scripting Filters</A><BR>
<P><A CLASS=tctop HREF="filters.htm#Migrating_from_OBJEC"><IMG SRC="../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">Migrating from OBJECT-based Filters</A><BR>
<P><A CLASS=tctop HREF="filters.htm#Filter_Design_Consid"><IMG SRC="../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">Filter Design Considerations</A><BR>
<P><A CLASS=tctop HREF="filters.htm#Visual_Filter_Scenar"><IMG SRC="../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">Visual Filter Scenarios</A><BR>
<P><A CLASS=tctop HREF="filters.htm#Transitions"><IMG SRC="../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">Transitions</A><BR>
<P><A CLASS=tctop HREF="filters.htm#Interpage_Transition"><IMG SRC="../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">Interpage Transitions</A><BR>
<P><A CLASS=tctop HREF="filters.htm#Transition_Design_Co"><IMG SRC="../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">Transition Design Considerations</A><BR>
<P><A CLASS=tctop HREF="filters.htm#Transition_Scenarios"><IMG SRC="../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">Transition Scenarios</A><BR>
<P><A CLASS=tctop HREF="filters/reference.htm#vis-trans_filters"><IMG SRC="../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">Visual and Transition Filters Reference</A><BR>
<P><A CLASS=tctop HREF="filters/reference2.htm#Visual_Filter_Effects"><IMG SRC="../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">Visual Filter Effects Reference</A><BR>
<P><A CLASS=tctop HREF="filters/reference3.htm#filter_methods"><IMG SRC="../../art/arrowr.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowr.gif">Properties, Methods, and Events Reference</A><BR>
<!-- ******************************************************--><H2><A NAME="CSS_Filters">Creating Multimedia Effects with Visual Filters and Transitions</A></H2>
<P>Visual filters are extensions to Internet Explorer 4.0 behavior that create onscreen effects in a document's contents. In some cases, filter effects are little more than prepackaged behavior that could have been done otherwise as script. In other cases, they go far beyond script and modify the rendered appearance of a control. Using visual filters greatly simplifies the task of incorporating sophisticated effects in Web documents. 

<P>Filters are applied to HTML controls through the <A HREF="../references/properties/filter.htm#filter">filter</A> style sheet property. The filter property is a string of filter descriptions that uses a function-like notation but does not require any knowledge of scripting. The syntax for a filter property in a style attribute is: 

<PRE>filter:filtername(parameters)
</PRE>

<P>Here's an example of how filters are written as style attributes.

<PRE>&lt;img id=sample src="sample.jpg" style="filter:blur(strength=50) flipv()"&gt;
</PRE>

<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/overview/filt_01.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P>The sample HTML above attaches two filters to the IMG control. The first causes the image to blur over a specified number of pixels. The second filter flips the image vertically.

<P>Each filter can have a set of optional parameters to define the precise nature of the effect, such as color or duration of behavior. Some filters, such as <A HREF="filters/FlipV.htm#filter_FlipV">FlipV</A> and <A HREF="filters/FlipH.htm#filter_FlipH">FlipH</A> for vertical and horizontal mirror images, have no parameters (although all filters and transitions have an <A HREF="filters/enabled.htm#filt_enabled">enabled</A> property, and all transitions have a <A HREF="filters/Duration_prop.htm#Duration_prop">Duration</A> property). Multiple filters can be applied so that in the above example the "flipv" and "blur" filters are applied in combination to the IMG.

<P>Filters often create effects that can also be generated with script. This raises the question, "Why use filters if script can do the job?" There are several reasons for using filters. Probably the most important is <I>because</I> they don't require script. For better or for worse, many HTML authors shy away (or are kept away) from scripting. Filters are a convenient package for the same functionality that scripting can provide. Another benefit of filters over script is that because they use the declarative and inherited syntax of CSS, they are easier to author and can be applied to entire classes of elements. 

<P>Another reason for using filters is because they provide a good downlevel story. Browsers that don't support the filter property or even style sheets simply ignore them. Even browsers that do support the filter property can do so in totally different ways without affecting the author. For instance, while filters in Internet Explorer 4.0 are implemented as special COM objects and can be easily extended, it is likely that the Windows&#174; 3.1 implementation will be built in and represent a subset of the Internet Explorer 4.0 functionality. 

<P>Although all the filters that ship with Internet Explorer 4.0 are "visual," it is not a requirement. An example of a nonvisual filter would be a filter that changed various style sheet attributes (such as color, font size, bold, and even position) on the filtered element. These filters can be applied to any element (not just controls).


<H3><A NAME="What_Are_HTML_Contro">What Are HTML Controls?</A></H3>
<P>Visual filters can be applied only to HTML elements that are controls. A control element defines a rectangular space within a browser window when the browser renders the Web document. Controls cannot be windowed, such as an IFRAME. Valid HTML controls are:

<TABLE>
<TR><TD><A HREF="../references/objects/BODY.htm#BODY">BODY</A></TD><TR><TD><A HREF="../references/objects/BUTTON.htm#BUTTON">BUTTON</A></TD><TR><TD><A HREF="../references/objects/DIV.htm#DIV">DIV</A> (with a defined height, width, or absolute positioning)</TD><TR><TD><A HREF="../references/objects/IMG.htm#IMG">IMG</A></TD><TR><TD><A HREF="../references/objects/INPUT.htm#INPUT">INPUT</A></TD><TR><TD><A HREF="../references/objects/MARQUEE.htm#MARQUEE">MARQUEE</A></TD><TR><TD><A HREF="../references/objects/SPAN.htm#SPAN">SPAN</A> (with a defined height, width, or absolute positioning)</TD><TR><TD><A HREF="../references/objects/TABLE.htm#TABLE">TABLE</A></TD><TR><TD><A HREF="../references/objects/TD.htm#TD">TD</A></TD><TR><TD><A HREF="../references/objects/TEXTAREA.htm#TEXTAREA">TEXTAREA</A></TD><TR><TD><A HREF="../references/objects/TFOOT.htm#TFOOT">TFOOT</A></TD><TR><TD><A HREF="../references/objects/TH.htm#TH">TH</A></TD><TR><TD><A HREF="../references/objects/THEAD.htm#THEAD">THEAD</A></TD><TR><TD><A HREF="../references/objects/TR.htm#TR">TR</A></TD></TABLE>
<P>Windowless controls, such as structured graphics and ActiveX&#153; Controls, can also apply filter attributes. Filters follow the standard CSS attribute inheritance scheme (if it exists for the object) except for the exceptions noted below.

<P>Filters are ignored for any positioned elements nested inside nonpositioned elements, such as a positioned SPAN inside a nonpositioned DIV. The simple solution is to always position or define a width for your outermost element.

<P>Elements and windowed objects that cannot have filters applied to them include Java&#153; applets, IFRAME, the SELECT and OPTION form elements, P paragraph elements, Hn headings, and EM and STRONG logical text style elements.

<H2><A NAME="Defining_Visual_Filt">Defining Visual Filters</A></H2>
<P>Visual filters modify the appearance of a control. In fact, they can totally take over the visual output of a control when applying their effect. A good example of a visual filter is the alpha filter. It blends its target into the background. The author controls the amount of blend (or opacity). Opacity is expressed as a percentage. For example, the following HTML causes the image to be 20 percent opaque: 

<PRE>&lt;img id=sample src=sample.jpg style="filter:alpha(opacity=20)"&gt;
</PRE>

<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/overview/filt_02.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P>Internet Explorer 4.0 supports a range of visual filters, shown in the following table, from the aforementioned alpha blend to a light filter that simulates colored lights shining on the control. 
 
<TABLE>
<TR><TD><B>Filter effect</B></TD><TD><B>Description</B></TD></TR>
<TR><TD><A HREF="filters/Visual_Filter.htm#Visual_Filter">Alpha</A></TD><TD>Sets a transparency level.</TD></TR>
<TR><TD><A HREF="filters/Visual_Filter.htm#Visual_Filter">Blur</A></TD><TD>Creates the impression of moving at high speed.</TD></TR>
<TR><TD><A HREF="filters/Visual_Filter.htm#Visual_Filter">Chroma</A></TD><TD> Makes a specific color transparent.</TD></TR>
<TR><TD><A HREF="filters/Visual_Filter.htm#Visual_Filter">Drop Shadow</A></TD><TD>Creates an offset solid silhouette.</TD></TR>
<TR><TD><A HREF="filters/Visual_Filter.htm#Visual_Filter">FlipH</A></TD><TD>Creates a horizontal mirror image.</TD></TR>
<TR><TD><A HREF="filters/Visual_Filter.htm#Visual_Filter">FlipV</A></TD><TD>Creates a vertical mirror image. </TD></TR>
<TR><TD><A HREF="filters/Visual_Filter.htm#Visual_Filter">Glow</A></TD><TD>Adds radiance around the outside edges of the object.</TD></TR>
<TR><TD><A HREF="filters/Visual_Filter.htm#Visual_Filter">Grayscale</A></TD><TD>Drops color information from the image.</TD></TR>
<TR><TD><A HREF="filters/Visual_Filter.htm#Visual_Filter">Invert</A></TD><TD>Reverses the hue, saturation, and brightness values.</TD></TR>
<TR><TD><A HREF="filters/Visual_Filter.htm#Visual_Filter">Light</A></TD><TD>Projects light sources onto an object.</TD></TR>
<TR><TD><A HREF="filters/Visual_Filter.htm#Visual_Filter">Mask</A></TD><TD>Creates a transparent mask from an object.</TD></TR>
<TR><TD><A HREF="filters/Visual_Filter.htm#Visual_Filter">Shadow</A></TD><TD>Creates a solid silhouette of the object.</TD></TR>
<TR><TD><A HREF="filters/Visual_Filter.htm#Visual_Filter">Wave</A></TD><TD>Creates a sine wave distortion along the x-axis and y-axis.</TD></TR>
<TR><TD><A HREF="filters/Visual_Filter.htm#Visual_Filter">XRay</A></TD><TD>Shows just the edges of the object.</TD></TR>
</TABLE>
<P>To experiment with filters use the following samples provided with the Internet Client SDK.

<a href="#" onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/filtwizard/filtwzrd.htm'); return false;} else { ALink(3, 'comp3.htm') }">Filters Wizard</a>
<BR CLEAR=ALL>
<a href="#" onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/wavewizard/wavewzrd.htm'); return false;} else { ALink(3, 'comp3.htm') }">Wave Filter Wizard</a>
<BR CLEAR=ALL><H2><A NAME="Scripting_Filters">Scripting Filters</A></H2>
<P>A <A HREF="../references/collections/filters.htm#filters">filters</A> collection is available on every element to provide script with access to their individual filters. The collection can be accessed like any other object model collection. For example, the following line of script addresses the first filter in the collection of filters on the element with id=theDiv.

<PRE>theDiv.filters.item(0).enabled = true;
</PRE>

<P>Filters are considered sub-objects of the control to which they are attached. Like other objects, they expose properties and methods for changing their internal state. Like other object model collections, the filters collection supports several kinds of access. 

<PRE>&lt;img id=sample src="sample.jpg" style="filter: alpha(opacity=50) fliph(enabled=0) blur(amount=10); position: relative"&gt;
&lt;script language="JavaScript"&gt;
function foo()
{
sample.filters.alpha        // sub object
sample.filters["alpha"]    // named index
sample.filters[0]              // numeric index
}
&lt;/SCRIPT&gt;
</PRE>

<P>The numeric access is particularly useful when more than one filter of the same type is applied or when the type of filter isn't known in advance (if it is set through script or data binding, for instance). This is particularly important for filters and transitions that have common properties and methods such as Amount, Color, and Play. 

<P>In the following example, the opacity of a control is dynamically changed by changing the opacity property on the alpha filter. 

<PRE>&lt;img id=sample src=sample.jpg style="filter: alpha(opacity=50)"&gt;
&lt;script language="javascript"&gt;
function foo()
{
     sample.filters.alpha.opacity += 10;
}
</PRE>

<P>This same syntax can be used to call the methods needed to make the transition revealTrans work in the following example.

<PRE>&lt;div id=mydiv style="height:50;width:50;filter:wave(strength=100) revealTrans(transition=3 duration=4)"&gt; This is a div &lt;/div&gt;

&lt;script language="JavaScript"&gt;
mydiv.filters.revealTrans.apply()
mydiv.innerText = "This is different text"
mydiv.filters.revealTrans.play()
&lt;/script&gt;
</PRE>

<P>Alternately, revealTrans can be accessed by index.

<PRE>&lt;script language="JavaScript"&gt;
mydiv.filters[1].apply()
mydiv.innerText = "This is different text"
mydiv.filters[1].play()
&lt;/script&gt;
</PRE>
<H3><A NAME="The_Filter_String">The Filter String</A></H3>
<P>The style object also has a filter property. This is a read/write string that can be used to manipulate the CSS filters of an element directly. For instance, using the DIV defined above, the following code:

<PRE>&lt;div id=mydiv style="height:50;width:50;filter:wave(strength=100) revealTrans(transition=3 duration=4)"&gt; This is a div &lt;/div&gt;

&lt;script&gt;
...
alert(mydiv.style.filter)
...
&lt;/script&gt;
</PRE>

<P>Would produce an alert with the following string:

<PRE>wave(strength=100) revealTrans(transition=3 duration=4)
</PRE>

<P>Writing to this property is especially useful to change an element's filters dynamically. Note that writing to this property overwrites the existing value and the browser renders the new string immediately. The following example adds a <A HREF="filters/FlipH.htm#filter_FlipH">FlipH</A> filter to a collection on the fly.

<PRE>&lt;div id=mydiv style="height:50;width:50;filter:wave(strength=100) revealTrans(transition=3 duration=4)"&gt; This is a div &lt;/div&gt;

&lt;script&gt;
...
mydiv.style.filter = mydiv.style.filter +  " fliph()"
...
&lt;/script&gt;
</PRE>

<P>After the change, the new filter string would now look like this:

<PRE>wave(strength=100) revealTrans(transition=3 duration=4) fliph()
</PRE>

<P>Any additional changes to that collection's filter string will modify the new string. For complex filter manipulation, authors need to keep track of the current states of their element filter collections.

<P><B>Note</B>  It is strongly recommended that CSS filters be accessed through the object model whenever possible, and the filter string be accessed only under special circumstances where object model functionality is not adequate. Even in the case of dynamically adding filters, it is recommended in most cases to actually add the filter in the initial filter attributes of the element's style sheet with enabled=0. When the script wants the filter to be displayed, it can then simply set that filter to enabled=1 and the filter will be displayed.
<P>This
<object id="hhal_3" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Using_Script_to_Manipulate_an_Alpha_Filter>
</object><A HREF=JavaScript:hhal_3.Click()>Web page</A> demonstrates a simple example of changing filter properties from script.
<object id="hhal_4" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_More_Complex_Filter_Manipulation>
</object><A HREF=JavaScript:hhal_4.Click()>This page</A> uses a more complex script that calls filter methods and manipulates properties.


<H2><A NAME="Migrating_from_OBJEC">Migrating from OBJECT-based Filters</A></H2>
<P>As Internet Explorer 4.0 was developed, filters were initially supported as OBJECT elements. With the release of the final version of Internet Explorer 4.0, filters made the logical switch to the CSS model for implementation. While this switch won't have any effect on new Web pages, existing documents that employed filter effects as objects are now broken. Authors who are accustomed to using objects and enjoyed the ability to apply a single object to many different controls at once must now specify the filters on each control that will use them. However, since you can change the style.filter string in script, the old-style syntax can be approximated as follows:

<PRE>&lt;object id=aFilter clsid=...&gt;&lt;param name=param-name value=param-value&gt; ... &lt;/object&gt; 
site.filter = aFilter
</PRE>

<P>This becomes:

<PRE>site.style.filter = "someFilter(param-name=param-value, ...)"
</PRE>

<P>However, this solution is hardly the best way to use filters. The new CSS syntax allows multiple filters to be attached and active at once. The <A HREF="filters/enabled.htm#filt_enabled">Enabled</A> property can be used to turn a given filter on and off.



<H2><A NAME="Filter_Design_Consid">Filter Design Considerations</A></H2>
<P>Some filters require transparency to function properly. These include <A HREF="filters/Shadow.htm#filter_Shadow">Shadow</A>, <A HREF="filters/DropShadow.htm#filter_DropShadow">DropShadow</A>, <A HREF="filters/Glow.htm#filter_Glow">Glow</A>, and <A HREF="filters/Mask.htm#filter_Mask">Mask</A>. Text automatically has "transparency," or space around the characters that shows through to the object (or page) behind it. GIF images must be in gif89a format with a transparent color to display these filters properly.

<P>Margins can affect how some filters are applied and rendered. "Clipping" can occur when a margin or DIV boundary is set too close to an object that has a filter applied to it. For instance, applying a glow to text without a margin may have some of the glow effect clipped by the DIV boundary if the text is directly next to it.

<P>Performance is an important factor to consider when designing Web pages with filters. Internet Explorer 4.0 requires processing time to calculate the visual display of filter effects, and some require more time than others to apply. It is useless to try to apply and change a filter on an element before the browser can even render it (such as manipulating a light effect quickly in a looping script function).

<P>While selecting text in the browser window, any applied filter effects are ignored. Once the mouse button is released, the browser reapplies the filter effects to the text. This operation is subject to any performance limitations that were previously experienced.

<P>It is possible to apply one or more filter effects to a group of elements by wrapping them in a DIV. Take care that the DIV itself is positioned if the enclosed elements are positioned. As noted previously, filters require that all containers be either positioned or have defined widths, and parent elements be positioned to display filter effects properly on child elements.

<P>Filters have different methods for creating their effects on elements. For example, the alpha filter affects each pixel as a function of itself (creating either a uniform or gradient effect), while with the glow filter, each pixel inherits from the pixels directly around it, creating a diminishing effect. Your choice of content might be affected by the application method a filter requires to achieve its effect. 


<H2><A NAME="Visual_Filter_Scenar">Visual Filter Scenarios</A></H2>
<P>There are unlimited uses for filters in both static and dynamic Web pages. The following scenarios explore some of the more common or interesting applications of filter styles and combinations of script and filters.


<H3><A NAME="Creating_Static_Visu">Creating Static Visual Effects</A></H3>
<P>Static visual effects are the most common use of style filters. These include simply applying a filter to a DIV or object to create a nonchanging effect, such as a text drop shadow. Static effects are an easy way to enhance a Web page's design with minimum effort and bandwidth, and often without scripting.

<H4><A NAME="No_script_example">No-script example</A></H4>
<P>The following example shows how television-style effects can be created using dynamic HTML positioning and the alpha visual filter.

<PRE>&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Static Alpha Filter Demo&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;DIV style="position:absolute; top:20; left:15; width:50%; height:35; background-color: black; filter: alpha(opacity=50)"&gt;&lt;/DIV&gt;
&lt;DIV style="color:red; position:absolute; top:20; width:50%; height:100; margin-top:5; margin-left:5;"&gt;&lt;P style="font-size:14pt; font-weight:bold; text-align:center"&gt;HERE IS CAPTION TEXT&lt;/P&gt;&lt;/DIV&gt;
&lt;IMG src="sam2.jpg"&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/overview/filt_07.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><H4><A NAME="Timer_script_example">Timer script example</A></H4>
<P>Visual effects can be "animated" using a timer script. The following sample shows two filters, alpha and glow, and two different timer methods. 

<PRE>
&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Timer Demos&lt;/TITLE&gt;
&lt;SCRIPT&gt;
function init()  {
    makeFlash(bob)
    setInterval("fred.filters.alpha.opacity = (fred.filters.alpha.opacity + 5) % 101", 100)
    setInterval("foo(dave)", 100)
}
var delta = 5
function foo(obj)  {
    if ((obj.filters.alpha.opacity + delta &gt; 100)
    ||  (obj.filters.alpha.opacity + delta &lt; 0))
        delta = - delta
    obj.filters.alpha.opacity += delta
}
function makeFlash(obj)  {
    obj.flashTimer = setInterval("bob.filters.glow.enabled = !bob.filters.glow.enabled", 1000)
}
function stopFlash(obj)  {
    clearInterval(obj.flashTimer)
}
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY onload="init()"&gt;
&lt;DIV id=bob style="width:50%; filter:glow(Color=#FAF900,Strength=2,enabled=0);" onclick="stopFlash(this)"&gt;&lt;H1&gt;Here is some text&lt;/H1&gt;&lt;/DIV&gt;
&lt;DIV id=fred style="width:50%; filter:alpha(opacity=100);"&gt;&lt;H1&gt;Here is some text&lt;/H1&gt;&lt;/DIV&gt;
&lt;DIV id=dave style="width:50%; filter:alpha(opacity=50); color: blue"&gt;&lt;H1&gt;Here is some text&lt;/H1&gt;&lt;/DIV&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/overview/filt_08.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><H3><A NAME="Creating_Dynamic_Vis">Creating Dynamic Visual Effects</A></H3>
<P>Dynamic visual effects bring a basic level of interactivity to Web documents. Dynamic effects require an event to prompt a change in the document&#151;this can be a mouse rollover or click event, a timer interval, or a sequence of script functions calling the new content states. 

<H4><A NAME="Event_script_example">Event script example</A></H4>
<P>Here an interactive step has been added to the previous "television caption" sample that displays the caption only when the mouse is over the inline image.

<PRE>&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Dynamic Alpha Filter Demo&lt;/TITLE&gt;
&lt;SCRIPT&gt;
function caption()  {
    if (bob.style.visibility == "hidden")    {
        bob.style.visibility = ""
        fred.style.visibility = ""
    }
    else  {
        bob.style.visibility = "hidden"
        fred.style.visibility = "hidden"
    }
}
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;DIV id="bob" style="visibility:hidden; position:absolute; top:20; left:15; width:50%; height:35; background-color: black; filter: alpha(opacity=50)"&gt;&lt;/DIV&gt;
&lt;DIV id="fred" style="visibility:hidden; color:red; position:absolute; top:20; width:50%; height:100; margin-top:5; margin-left:5;"&gt;&lt;P style="font-size:14pt; font-weight:bold; text-align:center"&gt;HERE IS CAPTION TEXT&lt;/P&gt;&lt;/DIV&gt;
&lt;IMG src="sam2.jpg" onmouseover="caption()" onmouseout="caption()"&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/overview/filt_09.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><H4><A NAME="Timer_script_example">Timer script example</A></H4>
<P>Timers create cyclical effects, as in the following interactive demonstration.

<P>
<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/overview/filt_10.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><H3><A NAME="Creating_a_Disabled_">Creating a Disabled UI Element Effect</A></H3>
<P>Web authors often resort to the trick of using multiple graphics to indicate a user state for a single graphic, such as a navigation bar button. With visual filters, these are no longer required&#151;any graphic can be displayed in such a manner as to indicate whether it is available for user interaction or not. Best of all, it's all done in code, and doesn't require an additional download from a server.

<H4><A NAME="No_script_example">No script example</A></H4>
<P>This page shows how both the gray and alpha filters can visually represent unavailable link states.

<P>
<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/overview/filt_11.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><H4><A NAME="Event_script_example">Event script example</A></H4>
<P>As interactive objects, links can change state in response to mouse events, as this page demonstrates.

<P>
<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/overview/filt_12.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><H3><A NAME="Creating_Complex_Vis">Creating Complex Visual Effects</A></H3>
<P>Combining visual filters, transitions, and sophisticated programming allows Web authors to create complex and compelling visual designs and interactivity. The following examples provide just a glimpse into the versatility of visual effects that are available in authoring for Internet Explorer 4.0.

<H4><A NAME="Simple_script_exampl">Simple script example</A></H4>
<P>The following Web page shows how the mask filter can be combined with a series of style changes to create an interesting effect.

<P>
<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/overview/filt_13.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><H4><A NAME="Event_script_example">Event script example</A></H4>
<P>The light filter is the most unique and complex visual filter. The following sample shows how the filter can be combined with mouse events to create a unique DHTML experience.
<P>
<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/overview/filt_14.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><H4><A NAME="Programming_example">Programming example</A></H4>
<P>The same light filter can be controlled by sophisticated programming, as the following sample shows. Watch for additional examples of sophisticated Internet Explorer 4.0-enhanced Web site design on Microsoft Site Builder.
<P>
<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/overview/filt_15.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><H2><A NAME="Transitions">Transitions</A></H2>
<P>Transitions are time-varying visual filters. Their role is to visually transition a control from one state to the next. A common example is changing the SRC of an image to change one image to another onscreen. A transition would provide some kind of animated effect to bring in the new image. Transitions can also be applied to make a control gradually fade in or fade out by changing the <A HREF="../references/css/visibility.htm#visibility">visibility</A> property.
 
<P>Transition filters have methods and events for manipulation. When the filter wants to fire an event, the <A HREF="../references/events/onfilterchange.htm#onfilterchange">onfilterchange</A> event is fired. 
This event can be used to script the <A HREF="../references/properties/srcFilter.htm#srcFilter">srcFilter</A> property on the event object, and then supplies all the necessary information about the event. In this way a script can know when a transition has completed. The methods for the filters allow a transition to be applied and played.
 
<P>The <A HREF="filters/Apply_Method.htm#Apply_Method">Apply</A> method freezes the visual appearance of the control by first applying the transition, allowing changes to be made without an immediate repaint such as specifying a new image. The <A HREF="filters/Play_Method.htm#Play_Method">Play</A> method then invokes the transition. At any time, the script can "cut to the chase" and finish the transition by calling <A HREF="filters/Stop_Method.htm#Stop_Method">Stop</A>. The following example shows how to perform an automatic slide show between images. 

<PRE>&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Transition Blend Demo&lt;/TITLE&gt;
&lt;SCRIPT language="JavaScript"&gt;
var fRunning = 0
function startTrans()
{
    if (fRunning == 0)
    {
        fRunning = 1
        SampleID.filters.blendTrans.Apply();
        SampleID.src = "sunset.jpg";
        SampleID.filters.blendTrans.Play()
    }
}
&lt;/SCRIPT&gt;
&lt;SCRIPT for="SampleID" event="onfilterchange"&gt;
fRunning = 0
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;IMG id="SampleID" src="beach.jpg" style="filter:blendTrans(duration=3)" onclick="startTrans()"&gt;&lt;BR&gt;
Click image for Transition Filter: Blend
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/overview/filt_05.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P>Two transition filters ship with Internet Explorer 4.0, blend and reveal. The blend transition allows a simple fade-in or fade-out with a specified duration, while the reveal transition specifies multiple effects such as boxin, boxout, horizontal blinds, and so on. 


<P>The following HTML is an example of a simple transition between two images. Clicking the button runs the doTrans script, which first calls <A HREF="filters/Apply_Method.htm#Apply_Method">Apply</A> on the revealTrans filter to stop painting of the image. It then sets an alternative image and calls <A HREF="filters/Play_Method.htm#Play_Method">Play</A> on the filter to proceed with the transition. In this case the transition type is set to 8, which corresponds to the vertical blinds transition effect. This is applied using an inline style on the IMG tag.
 
<PRE>&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Transition Sample&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE=JavaScript&gt;
Function doTrans()
{
    theImg.filters.item[0].Apply();
    theImg.src="circles.bmp";
    theImg.filters.item[0].Play();
}
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY style="background-color:darkblue"&gt;
&lt;IMG ID=theImg width=200 height=200
src="clouds.bmp" style="filter:revealTrans(Duration=3.3, Transition=8);"&gt;
&lt;BR&gt;
&lt;INPUT type=button value="Start Transition" onClick="doTrans()"&gt;
&lt;IMG src="clouds.bmp" style="position:relative; width:1; height:1;visibility:hidden"&gt;
&lt;IMG src="circles.bmp" style="position:relative; width:1; height:1; visibility:hidden"&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/overview/filt_06.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P>This example also demonstrates the differences between asynchronous and synchronous changes. Changing the <A HREF="../references/properties/innerText.htm#innerText">innerText</A> of an element is synchronous&#151;the action is completed by the time the statement has executed. Changing the src is effectively asynchronous. Although the actual src property changes immediately, the visual state of the IMG element isn't fully updated until the actual download of the new image is complete. A careful script would wait for the onload event on the image. "Pre-loading" graphics with separate IMG tags is a good way to avoid the synchronicity issue but it will only work if the transition is applied after all image downloads are complete.


<H2><A NAME="Interpage_Transition">Interpage Transitions</A></H2>
<P>Interpage transitions make it possible to provide visual effects to the entire window as a Web page is loaded or exited. Just as programs such as PowerPoint&#174; allow for transitions between slides, you can provide wipes, fades, and even create custom transition types. 

<P>Transitions are implemented with META tags placed in the HEAD section of Web pages. The META tag specifies the type of transition, duration, and other variables, as well as whether the transition should occur as the following page is loaded or as it is exited.

<H3><A NAME="Transition_Syntax">Transition Syntax</A></H3>
<P>The syntax for transitions consists of three parts: specifying when the event should be played, the duration of the transition, and what kind of transition effect to use. The following two examples show how to set transitions upon entry and exit of a page.

<PRE>&lt;META http-equiv="Page-Enter"
CONTENT="RevealTrans(Duration=4,Transition=1)&gt;

&lt;META http-equiv="Page-Exit"
CONTENT="RevealTrans(Duration=2.500,Transition=6)&gt;
</PRE>

<P>The first META tag causes transition 1 to play when the user enters the page, lasting 4 seconds; the second META tag causes transition 6 to play when the user leaves the page, lasting 2.5 seconds (written as 2 seconds and 500 milliseconds). 

<P>There are four events that can initiate interpage transitions: Page-Enter , Page-Exit, Site-Enter, and Site-Exit. Duration has a maximum value of 30 seconds.

<H3><A NAME="Transitions_Referenc">Transitions Reference</A></H3>
<P>The available reveal transitions that are supported in Internet Explorer 4.0 are described below. 

<TABLE>
<TR><TD><B>Transition name</B></TD><TD><B>Value </B></TD></TR>
<TR><TD>Box in</TD><TD>0 </TD></TR>
<TR><TD>Box out </TD><TD>1</TD></TR>
<TR><TD>Circle in </TD><TD>2 </TD></TR>
<TR><TD>Circle out </TD><TD>3 </TD></TR>
<TR><TD>Wipe up</TD><TD>4 </TD></TR>
<TR><TD>Wipe down</TD><TD>5 </TD></TR>
<TR><TD>Wipe right </TD><TD>6 </TD></TR>
<TR><TD>Wipe left </TD><TD>7 </TD></TR>
<TR><TD>Vertical blinds</TD><TD>8 </TD></TR>
<TR><TD>Horizontal blinds</TD><TD>9 </TD></TR>
<TR><TD>Checkerboard across</TD><TD>10 </TD></TR>
<TR><TD>Checkerboard down </TD><TD>11 </TD></TR>
<TR><TD>Random dissolve</TD><TD>12 </TD></TR>
<TR><TD>Split vertical in</TD><TD>13 </TD></TR>
<TR><TD>Split vertical out</TD><TD>14 </TD></TR>
<TR><TD>Split horizontal in</TD><TD>15 </TD></TR>
<TR><TD>Split horizontal out</TD><TD>16 </TD></TR>
<TR><TD>Strips left down</TD><TD>17 </TD></TR>
<TR><TD>Strips left up</TD><TD>18 </TD></TR>
<TR><TD>Strips right down</TD><TD>19 </TD></TR>
<TR><TD>Strips right up</TD><TD>20 </TD></TR>
<TR><TD>Random bars horizontal</TD><TD>21 </TD></TR>
<TR><TD>Random bars vertical</TD><TD> 22 </TD></TR>
<TR><TD>Random</TD><TD>23 </TD></TR>
</TABLE>
<P>To easily construct and experiment with these transitions use the following wizard distributed with the Internet Client SDK.

<li><a href="#" onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/overview/trnswzrd.htm'); return false;} else { ALink(3, 'comp3.htm') }">Transitions Wizard</a>&nbsp;&nbsp;HTML-based wizard that generates basic code for the different Transitions, based on the parameters entered by the user.
<BR CLEAR=ALL><H2><A NAME="Transition_Design_Co">Transition Design Considerations</A></H2>
<P>The primary concern of designers when implementing transitions is that, since they run asynchronously, it is necessary to track each transition state through events (<A HREF="../references/events/onfilterchange.htm#onfilterchange">onfilterchange</A>) to determine when a particular transition is finished. Remember that image downloading is asynchronous and that the visual state of IMG elements isn't fully updated until after images are completely downloaded.

<H2><A NAME="Transition_Scenarios">Transition Scenarios</A></H2>
<P>There are unlimited uses for transitions in both static and dynamic Web pages. The following scenarios explore some of the more common or interesting applications of filter styles combined with transitions and, as in the more complex demonstrations, script functions.

<H3><A NAME="Creating_Non_Event_T">Creating Non-Event Transitions</A></H3>
<P>Non-event transitions are analogous to static visual filters&#151;they are used frequently to enhance the visual appearance of a page without changing the level of interactivity of the document.

<H4><A NAME="Simple_script_exampl">Simple script example</A></H4>
<P>The following demonstration uses transitions to display information in an interesting manner as the page loads.

<P>
<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/overview/filt_16.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><H3><A NAME="Creating_Event_Drive">Creating Event-Driven Transitions</A></H3>

<H4><A NAME="Event_script_example">Event script example</A></H4>
<P>This demonstration shows how a mouse event can trigger a sequence of transitions.

<P>
<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/overview/filt_17.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><H3><A NAME="Creating_Complex_Tra">Creating Complex Transitions</A></H3>
<P>Combining visual filters and transitions allows Web authors to create complex and compelling visual designs and interactivity. The following example provides just a glimpse into the versatility of visual effects that are available in authoring for Internet Explorer 4.0.

<H4><A NAME="Event_Script_Example">Event Script Example</A></H4>
<P>Intermediate Web pages (sometimes called "logo pages") provide an opportunity to be creative with transitions.

<P>
<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/overview/filt_18.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><H4><A NAME="Timer_script_example">Timer script example</A></H4>
<P>Computer-based training applications can use timed transitions to demonstrate their subject matter, as the following example shows.

<P>
<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../samples/dhtml/overview/filt_19.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><H4><A NAME="Programming">Programming</A></H4>
<P>Transitions can be combined with visual filters and scripting to develop complex site designs. Watch for examples of sophisticated Internet Explorer 4.0-enhanced Web site design on Microsoft Site Builder.





<!-- *********** break here for reference section ***********--><!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
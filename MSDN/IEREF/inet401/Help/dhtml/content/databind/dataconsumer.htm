<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Binding HTML Elements to Data</TITLE>

<META NAME=MS-HKWD CONTENT="Binding HTML Elements to Data">
<META NAME="Keywords" CONTENT="Dynamic HTML, DHTML, IE4, Internet Explorer 4.0, dynamic content, data binding">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT, Mac">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="ch_dataconsumer"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Binding HTML Elements to Data"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../../art/headbara.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Binding HTML Elements to Data"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR>
<TR><TD><PRE><IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="../data_binding.htm#dhtml_databind">Topic Contents</A></PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="datasources.htm">Adding a Data Source Object to a Page</A>
<IMG SRC="../../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="objmodel.htm">DHTML Object Model Support for Data Binding</A></PRE></TD></TR>
</TABLE>
<!-- NAVLINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>Binding HTML Elements to Data</H1>
<BR CLEAR=ALL>

<SCRIPT>
if (parseInt(window.navigator.userAgent.substring(window.navigator.userAgent.indexOf("MSIE ")+5, window.navigator.userAgent.indexOf( ".", window.navigator.userAgent.indexOf ( "MSIE " ) ))) < 4)
    alert("Samples on this page require Microsoft Internet Explorer version 4.0 or later.")
</SCRIPT>
<BR CLEAR=ALL>
<OBJECT id=dsoElems CLASSID="clsid:333C7BC4-460F-11D0-BC04-0080C7055A83">
	<PARAM NAME="DataURL" VALUE="../../../../samples/databind/htmlelem.csv">								  
	<PARAM NAME="UseHeader" VALUE="True">
	<PARAM NAME="TextQualifier" VALUE="'">
	<PARAM NAME="Sort" VALUE="+element">
	<PARAM NAME="Filter" VALUE="Bindable=True & Repeats=False">
</OBJECT>
<BR CLEAR=ALL><P>To display the data provided by a data source object (DSO), the page author binds elements on an HTML page to the DSO. Using the <A HREF="architecture.htm#ch_databind_extensions">data binding extensions</A> or the corresponding data binding properties makes it easy. This section shows how to bind an element to data, the elements that support data binding, and the capabilities of those elements. Capabilities include support for updating the data to which an element is bound and the format in which the data is displayed&#151;HTML or plain text.

<P>Bindable HTML elements fall into two categories&#151;single-valued and tabular consumers. Single-valued consumers bind to a single field of the current record provided by a DSO. Tabular consumers bind to an entire data set and use their contained elements as a template to repeat the data. In Internet Explorer 4.0, the TABLE element is an example of a tabular data consumer, and the procedure for binding it to data is described <A HREF="dataconsumer.htm#ch_dataconsumer_tablebinding">below</A>.

<H2><A NAME="Binding_a_Single_Val">Binding a Single-Valued Element to Data</A></H2>
<P>The procedure for binding a single-valued element to data is the same regardless of the element. Elements can be bound to data at design time using the DATASRC and DATAFLD attributes or <A HREF="objmodel.htm#dynbind_add">at run time</A> using the dataSrc and dataFld properties exposed by the corresponding objects in the document object model.

<H3><A NAME="Binding_a_single_val">Binding a single-valued element to data at design time</A></H3>
<P>To specify a complete binding to a field in a data set, data-consuming elements use the DATASRC and DATAFLD attributes. Given a text box, for example, a page author can bind that element to data as follows:

<PRE>&lt;INPUT TYPE=TEXTBOX DATASRC=#dsoComposers DATAFLD=compsr_last&gt;
</PRE>

<P>The DATASRC attribute in this example specifies the ID, prefixed by a hash mark (#), of a data source object (DSO) embedded on the page. The hash mark is required. The DATAFLD attribute identifies the field in the data provided by the DSO to which the text box should be bound.

<P>Click the Show Me button to see how it works.


<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../../samples/databind/dbsingle.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><H2><A NAME="ch_dataconsumer_tablebinding">Binding a TABLE to Data</A></H2>
<P>Because the TABLE element is a tabular data consumer, it relies upon the elements that it contains to bind to the individual fields in the data set provided by the DSO. The contained elements serve as a template, and they are repeated once for each record in the data set. The TABLE specifies the DATASRC attribute. The contained elements specify the DATAFLD attribute and inherit the DATASRC from the table. Here's a simple example: 

<PRE>&lt;TABLE DATASRC=#dsoComposer&gt;
    &lt;TR&gt;&lt;TD&gt;&lt;SPAN DATAFLD=compsr_first&gt;&lt;/SPAN&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;/TABLE&gt;
</PRE>

<P>Click the Show Me button to see how it works.


<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../../samples/databind/dbtable.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P>As with single-valued consumers, a tabular data consumer can be bound to data at run time using the document object model. The procedure for accomplishing this is described <A HREF="objmodel.htm#ch_dbind_tabular_runtime">below</A>. 

<H2><A NAME="chp_databind_supported_elements">Elements that Support Data Binding</A></H2>
<P>The previous sections used a TEXTBOX, a SPAN, and a TABLE element to illustrate how to bind single-valued and tabular consumers to the data provided by a DSO. Many other HTML elements can be bound to data. Some of these elements support updating the data to which they are bound. Changes can be persisted to the back-end data set if the DSO supports update. Other elements support <A HREF="architecture.htm#ch_databind_dataformatas">rendering of the data as HTML</A> in addition to the plain text default using the DATAFORMATAS attribute.

<P>The following table presents the single-valued HTML elements that support data binding. Additional columns indicate: 

<UL>
<LI>If the element supports update. 
<LI>If the element can render its data as HTML. 
<LI>The property to which the data is applied.
</UL>

<P>Use the drop-down list to filter the elements appropriately.


<SCRIPT FOR=cboFeature EVENT=onchange>
   var oElement = window.event.srcElement;
   var cValue = cboFeature.options(cboFeature.selectedIndex).value
   if (cValue == "all")
   {
      dsoElems.object.Filter = "Bindable=True & Repeats=False";
   }
   else if (cValue == "readonly")
   {
      dsoElems.object.Filter = "Bindable=True & Repeats=False & Updatable=False";
   }
   else
   {
     dsoElems.object.Filter = cValue + "=True & Repeats=False";
   }
   dsoElems.Reset();
</SCRIPT>

<p><SELECT ID=cboFeature>
<OPTION VALUE=all SELECTED>Bindable Elements
<OPTION VALUE=updatable>Bindable elements that support update
<OPTION VALUE=readonly>Bindable Read-only elements
<OPTION VALUE=htmlformat>Bindable elements that support rendering in HTML
</SELECT>

<TABLE BORDER=1 datasrc=#dsoElems>
<THEAD><TR STYLE="font-weight:bold;font-size:12">
   <TD>Element</TD><TD>Updatable</TD><TD>Renders HTML</TD><TD>Bound Property</TD>
   </TR></THEAD>
<TBODY>
<TR STYLE="font-size:12">
   <TD><DIV datafld="Element"></DIV></TD>
   <TD><DIV datafld="Updatable"></DIV></TD>
   <TD><DIV datafld="HTMLFormat"></DIV></TD>
   <TD><DIV datafld="BoundTo"></DIV></TD></TR>
</TBODY>
</TABLE>
<BR CLEAR=ALL><H3><A NAME="Read_only_elements">Read-only elements</A></H3>
<P>Bindable HTML elements that supply read-only functionality include A (anchor), BUTTON, DIV, IMG (image), FRAME, IFRAME, LABEL, MARQUEE, and SPAN. 

<P>Additionally, the BUTTON, DIV, LABEL, MARQUEE, and SPAN elements support the usage of the DATAFORMATAS attribute and the corresponding <A HREF="../../references/properties/dataFormatAs.htm#dataFormatAs">dataFormatAs</A> property to render the data to which they are bound as plain text (default) and as HTML. The data displayed by the element is automatically updated as the record pointer maintained by the DSO moves or the underlying data to which the element is bound changes. Individual descriptions for these elements follow.

<P><B>A</B>
<P>An anchor element applies the data supplied by a DSO to the HREF attribute; thus, the supplied data should represent a URL. An example of a bound anchor is:

<PRE>&lt;A DATASRC=#dsoLinks DATAFLD=link_href&gt;&lt;SPAN DATASRC=#dsoLinks DATAFLD=link_friendly&gt;&lt;/SPAN&gt;&lt;/A&gt;
</PRE>

<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../../samples/databind/dbanchor.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P><B>BUTTON</B>
<P>A BUTTON element renders the data supplied by a DSO on its face. An example of a bound BUTTON is:

<PRE>&lt;BUTTON DATASRC=#dsoLinks DATAFLD=link_friendly&gt;&lt;/BUTTON&gt;
</PRE>

<P>Click the Show Me button to see a working example.


<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../../samples/databind/dbbutton.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P><B>DIV</B>
<P>A DIV element is useful for displaying a block of text. An example of a bound DIV is:

<PRE>&lt;DIV DATASRC=#dsoComposer DATAFLD=compsr_biography&gt;&lt;/DIV&gt;
</PRE>

<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../../samples/databind/dbdiv.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P><B>IMG</B>
<P>An IMG element applies the data supplied by a DSO to locate, load, and display the image typically pointed to by its SRC attribute. Supplying raw image data through the bound column is not supported.

<P>An example of a bound IMG tag is:

<PRE>&lt;SPAN DATASRC=#dsoImages DATAFLD=image&gt;&lt;/SPAN&gt;
</PRE>

<P>Click the Show Me button to see a working example.


<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../../samples/databind/dbimg.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P><B>FRAME</B>
<P>A FRAME element applies the data supplied by a DSO to its HREF attribute; thus, the bound value should represent a URL. So that the binding occurs successfully, the data source object supplying data to a bound frame should be present in the HEAD section of the HTML file containing the FRAMESET. An example of a bound FRAME is:

<PRE>&lt;HTML&gt;
&lt;HEAD&gt;
&lt;&lt;!-- Add DSO reference here --&gt;
&lt;/HEAD&gt;
&lt;FRAMESET&gt;
    &lt;FRAME DATASRC=#dsoFAQ DATAFLD=frame_question ...&gt;
    &lt;FRAME DATASRC=#dsoFAQ DATAFLD=frame_answer ...&gt;
&lt;/FRAMESET&gt;
&lt;/HTML&gt;
</PRE>

<P>The code behind the following Show Me button implements a frame-based FAQ. The first frame displays the question; the second frame displays the answer; the third frame contains navigation buttons. The first and second frames are bound to a two-column table. The first column in the table contains relative paths to pages containing questions. The second column contains relative paths to pages containing the answers. Since the DSO is embedded in the HEAD of the outer page containing the FRAMESET, the code behind the navigation buttons drills out of the page in which it resides using the <B>top</B> object and references the DSO by its ID. <B>top</B> returns an object reference to the outermost containing window.


<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../../samples/databind/dbfaq.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P><B>IFRAME</B>
<P>An IFRAME element applies the data supplied by a DSO to its HREF attribute; thus, the data should represent a URL. In contrast to the FRAME case, the DSO can be declared anywhere on the page. An example of a bound IFRAME is:

<PRE>&lt;IFRAME DATASRC=#DSC1 DATAFLD=iframe_url&gt;
</PRE>

<P>Click the Show Me button to see a working example.


<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../../samples/databind/dbwizfr.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P><B>LABEL</B>
<P>Use a LABEL element to describe another bound element on the page. A label applies the data supplied by a DSO to its caption. An example of a bound LABEL is:

<PRE>&lt;LABEL FOR=somecontrolid DATASRC=#DSC1 DATAFLD=label_col&gt;&lt;/LABEL&gt;
</PRE>

<P>Since a LABEL is associated with other elements indicated by its FOR attribute, using a bound LABEL within a repeated table can yield unexpected results. If the FOR attribute references another element within the repeated table, the LABEL tag will not be associated with the elements, since there will be multiple elements with the same ID/NAME as a result of the repetition.

<P><B>MARQUEE</B>
<P>A MARQUEE element uses its bound data to replace the text that appears between its opening and closing tags.

<P>An example of a bound MARQUEE is:

<PRE>&lt;MARQUEE DATASRC=#dsoComposer DATAFLD=bio DATAFORMATAS=HTML&gt;&lt;/MARQUEE&gt;
</PRE>

<P>Click the Show Me button to see a working example.


<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../../samples/databind/dbmarque.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P><B>SPAN</B>
<P>Like a DIV, a SPAN is a read-only data consumer. Use a SPAN to display inline text or limited HTML text. If the SPAN is used to display HTML text, that text should not include any HTML block elements. When the current record or the underlying value in the bound column provided by the DSO changes, the SPAN reflects the change. An example of a bound SPAN is:

<PRE>&lt;SPAN DATASRC=#dsoComposer DATAFLD=compsr_last&gt;&lt;/SPAN&gt;
</PRE>

<P>Click the Show Me button to see a working example.


<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../../samples/databind/dbspan.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><H3><A NAME="Elements_that_suppor">Elements that support update</A></H3>
<P>The APPLET, INPUT (with the exception of the button type), SELECT, TEXTAREA, and OBJECT elements support updating the data to which they are bound if the underlying DSO supports update functionality. Descriptions of these individual elements follow.

<P><B>INPUT</B>
<P>The INPUT element represents a set of HTML intrinsic controls. Each of the types that support data binding is detailed in the following sections.

<P><B>RADIO</B>
<P>Radio buttons are used to select a single value from a set of alternatives. These can be used to select the value for an enumerated field in a database. One radio button is specified for each of the alternatives using a separate INPUT. The NAME attribute on the INPUT determines the logical grouping of alternatives. One value is bound for all the INPUTs with the same NAME attribute. All members of a group must specify the corresponding DATASRC and DATAFLD attributes.

<P>An example of a bound radio button group is:

<PRE>&lt;INPUT TYPE=RADIO NAME=cards VALUE=mc 
DATASRC=#dsoOrders DATAFLD=cardname&gt;MasterCard
&lt;INPUT TYPE=RADIO NAME=cards VALUE=amex 
DATASRC=#dsoOrders DATAFLD=cardname &gt;American Express
&lt;INPUT TYPE=RADIO NAME=cards VALUE=visa 
DATASRC=#dsoOrders DATAFLD=cardname &gt;Visa
</PRE>

<P>Click the Show Me button to see a working example.


<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../../samples/databind/dbradio.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P><B>CHECKBOX</B>
<P>Although check boxes allow a value attribute that is used when submitting an HTML form on a page, IE4/MSHTML uses check boxes as simple Boolean selections. Check boxes generate the Boolean values TRUE or FALSE depending on whether they are checked or not. The binding agent coerces the values to and from the underlying data set. The following coercions are supported based on the type of the bound column.

<P>The following table describes the values that a bound check box expects a DSO to supply for various data types.


<P><TABLE BORDER=1 STYLE="font-face:verdana;font-size:12">
    <TR STYLE="font-weight:bold"><TD>Data type</TD><TD>Expected True Value</TD><TD>Expected False Value</TD></TR>        
    <TR>
        <TD>String</TD>
		<TD>"True" | "1" | &lt;non-empty string></TD>
        <TD>"False" | "0" | &lt;zero-length string></TD>
    </TR>    
    <TR>
        <TD>Integer
        <TD>non-zero
        <TD>0    
    <TR>
        <TD>Float
        <TD>non-zero
        <TD>0    
    <TR>
        <TD>Date
        <TD>invalid
        <TD>invalid    
    <TR>
        <TD>Currency
        <TD>non-zero
        <TD>0
</TABLE>
<BR CLEAR=ALL><P>An example of a bound check box is as follows:

<PRE>&lt;INPUT TYPE=CHECKBOX DATASRC=#dsoSurvey DATAFLD=us_resident&gt; U.S. Resident
</PRE>

<P>Click the Show Me button to see a working example.


<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../../samples/databind/dbchkbox.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P><B>TEXT</B>
<P>The TEXT type is used as a simple text box. The value of the text box can be bound to a field in the data source using the DATASRC and DATAFLD attributes.

<P>An example of a bound text box is:

<PRE>&lt;INPUT TYPE=TEXT DATASRC=#DSC1 DATAFLD=name&gt;
</PRE>

<P><B>HIDDEN</B>
<P>The HIDDEN type is used to store information in the page that isn't displayed to the user. The element is populated with data from the current record, but it cannot be modified.

<P>An example of a bound hidden field is:

<PRE>&lt;INPUT TYPE=HIDDEN DATASRC=#DSC1 DATAFLD=key&gt;
</PRE>

<P><B>PASSWORD</B>
<P>The PASSWORD type is basically the same as the TEXT type except that the bound text is not displayed to the user. Use this input type with care since the associated data is fully accessible to scripts through the data-binding object model, as well as directly through the element's value. 

<P>An example of a bound password is:

<PRE>&lt;INPUT TYPE=PASSWORD DATASRC=#DSC1 DATAFLD=password&gt;
</PRE>
<P><B>SELECT</B>
<P>A SELECT element supplies the functionality of a drop-down list (combo box) or a list box. Internet Explorer supports binding to a single selected element; binding to multiple selections is not supported.

<P>The items in a SELECT control are specified using
OPTION tags. The document object model defines an options
array that corresponds to the collection of OPTION tags for a
SELECT. Each OPTION has a corresponding index, text, and value.
The SELECT has a selectedIndex property that corresponds to the
index of the OPTION currently selected. If no item is selected,
the selectedIndex is set to -1. The text attribute of an OPTION
corresponds to the text following the OPTION tag and represents
the string that is displayed for that OPTION in the SELECT. The
VALUE attribute provides the value that is to be returned when
the HTML form is submitted. Value is also what is stored into the
bound column of the data source.

<P>Initially, the selectedIndex property of a bound SELECT
control will be set to the index of the value in the options
array corresponding to the field of the data source. If the value
is not a member of the options array, the index property is
set to -1 and, if the SELECT is a combo, no value is
displayed. When a user changes the selected item, the
corresponding OPTION value (attribute) is used to update the
value of the bound field of the data source. Validation events
are fired as with other controls.

<P>An example of a bound SELECT is:

<PRE>&lt;SELECT DATASRC=#DSC1 DATAFLD=cardname&gt;
&lt;OPTION VALUE=mc&gt;MasterCard
&lt;OPTION VALUE=amex&gt;American Express
&lt;OPTION VALUE=visa&gt;Visa
&lt;/SELECT&gt;
</PRE>

<P>Click the Show Me button to see a working example.


<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../../samples/databind/dbselect.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><P><B>TEXTAREA</B>
<P>A TEXTAREA is a multirow text box for data input similar to
the INPUT TYPE=text intrinsic. As such it supports the update of the data if the DSO supports the update feature.

<P>An example of a bound TEXTAREA is:

<PRE>&lt;TEXTAREA DATASRC=#dsoComposer DATAFLD=bio&gt;&lt;/TEXTAREA&gt;
</PRE>

<P>Click the Show Me button to see a working example.


<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../../samples/databind/dbtextar.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><A NAME="object_as_consumer"></A><P><B>OBJECT</B>
<P>When DATASRC and DATAFLD are specified on an OBJECT, Internet Explorer 4.0 attempts to bind to the object's default property. The defaultbind attribute specified in an object's type information uniquely identifies the default property. If a default property is not specified in this way, Internet Explorer 4.0 uses the property with DISPID 0. 

<P>An example of binding the default value on the object tag is:

<PRE>&lt;OBJECT ID=oControl1 WIDTH=100 HEIGHT=100
    CLASSID="CLSID:xxxxxxxxx-xxxxx-xxxx-xxxx-xxxxxxxxxxxxx"
    DATASRC=#DSC1 DATAFLD=controlData&gt;
&lt;/OBJECT&gt;
</PRE>

<P>Additionally, Internet Explorer 4.0 supports binding to arbitrary OBJECT properties through the object's contained PARAM tags. Apply the DATASRC and DATAFLD attributes to the PARAM tag. The property is initialized with the data supplied by the DSO.



<P>An example of binding the PARAMs on the object tag is:


<PRE>&lt;OBJECT ID="oControl1" WIDTH=100 HEIGHT=100
    CLASSID="CLSID:xxxxxxxxx-xxxxx-xxxx-xxxx-xxxxxxxxxxxxx"&gt;
&lt;PARAM NAME="ForeColor" DATASRC=#DSC1 DATAFLD=forecolor&gt;
&lt;PARAM NAME="BackColor" DATASRC=#DSC1 DATAFLD=backcolor&gt;
&lt;/OBJECT&gt;
</PRE>

<P>Bindings can be simultaneously applied to both the object's default value as well as its PARAM tags.

<P><B>APPLET</B>
<P>Internet Explorer 4.0 supports binding to the PARAM tags of an APPLET. For example, the following specifies a binding on the xyz property of the application:

<PRE>&lt;APPLET CODE=somecode&gt;
    &lt;PARAM NAME="xyz" VALUE="abc" DATASRC="#Ctrl1" DATAFLD="Column1"&gt;
    &lt;PARAM NAME="Title" VALUE="BoundApplet"&gt;
&lt;/APPLET&gt;
</PRE>
<A NAME="db_java_propres"></A><P><B>Property name resolution</B>
<P>The NAME attribute of the PARAM specifies the <I>basename</I>
of the Java methods used to get and set the value of the
property. This is termed <I>basename</I> since the method of
the Java applet to retrieve the value of the property is get&lt;<I>basename</I>&gt;.
Correspondingly, the method to set the value of the Java applet
is set&lt;<I>basename</I>&gt;. This naming convention is
consistent with the JavaBeans 1.0 specification. The applet used in the previous section is expected to have methods named getxyz and setxyz.

<P><B>Notifications</B>
<P>Notifications are not fired by the application when property values
change. Property changes are only detected when the current record is changed. During this transition, the binding agent interrogates the application and transfers a modified data value, after validation, to the data source. When values are changed directly in the data source, the binding agent is notified by the data source and transfers the value to the application immediately. See the section on <A HREF="events.htm#ch_databind_events">data binding events</A> for details about data binding extensions to the event model.



<P><B>Name space co-mingling</B>
<P>The bound PARAM in the preceding example is the most complicated
specification possible. That is, it addresses the case where
there is a binding to a property specified by the NAME attribute,
and there is a parameter to the application with the same NAME with a
corresponding VALUE attribute. This essentially co-mingles two
name spaces: the parameter name space for the application and the
binding name space, since the NAME attribute is used for both. In
such cases, the application ignores the unexpected DATASRC and
DATAFLD attributes on the PARAM when fetching a parameter
(applications explicitly fetch parameters using the getParameter 
method), and the binding agent recognizes the attributes and
attempts binding using the get and set methods specified <I>above</I>.
<P>The simplest example is one where there is no conflict between
the parameter name space and the property name space. An example
would be:


<PRE>&lt;APPLET&gt;
&lt;PARAM NAME="backcolor" DATASRC="#DSC1" DATAFLD="Color"&gt;
&lt;/APPLET&gt;
</PRE>

<P>Here, the backcolor property only has DATASRC and DATAFLD
attributes. No VALUE attribute is specified.


<!-- * * * * * * * * * * --><!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
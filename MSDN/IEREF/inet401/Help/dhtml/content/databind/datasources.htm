<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding a Data Source Object to a Page</TITLE>

<META NAME=MS-HKWD CONTENT="Adding a Data Source Object to a Page">
<META NAME="Keywords" CONTENT="Dynamic HTML, DHTML, IE4, Internet Explorer 4.0, dynamic content, data binding">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT, Mac">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">


<SCRIPT>
//<!--
var g_isIE = false, g_isNav = false, g_iMaj = 0, g_sPlat = "";
// -->
</SCRIPT>
<SCRIPT SRC="../../../code/ver.js"></SCRIPT>


<SCRIPT DEFER SRC="../../../code/common.js"></SCRIPT>
<SCRIPT DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{
		SetTOC();
	}
}
//-->
</SCRIPT>

<LINK REL="stylesheet" HREF="/msdn/sdk/inetsdk/help/basicsdkIE4.css" TYPE="text/css">
<!-- STYLE_START -->


<SCRIPT>
//<!--
   var sVR = '../../../'	// Set root for the style sheet
   var sCSS = '<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->
</HEAD>
<BODY onload="InitPage()" BGCOLOR="#FFFFFF">

<A NAME="pagetop"></A><A NAME="ch_datasources"></A>
<!-- NAV_LINKS_START -->
<TABLE class=main BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="10%"><TR><TD ROWSPAN="3" VALIGN="TOP" WIDTH="121"><IMG SRC="../../../art/headbar2.gif" WIDTH="121" HEIGHT="82" BORDER=0 ALT="Adding a Data Source Object to a Page"></TD><TD ROWSPAN="2" VALIGN="TOP" WIDTH="186"><IMG SRC="../../../art/headbara.gif" WIDTH="186" HEIGHT="44" BORDER=0 ALT="Adding a Data Source Object to a Page"></TD><TD VALIGN="TOP" WIDTH="470"><IMG SRC="../../../art/replace1.gif" WIDTH="470" HEIGHT="17" BORDER=0 ALT="*"></TD></TR>
<TR><TD><PRE><IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_1" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Contents>
</object><A STYLE="color:black" ID=TOC HREF=JavaScript:hhal_1.Click()>Contents</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><object id="hhal_2" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Index_1sz1>
</object><A STYLE="color:black" HREF=JavaScript:hhal_2.Click()>Index</A>  <IMG SRC="../../../art/arrowrht.gif" WIDTH="14" HEIGHT="14" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black" HREF="../data_binding.htm#dhtml_databind">Topic Contents</A></PRE></TD></TR>
<TR><TD COLSPAN="2"><PRE><IMG SRC="../../../art/arrowlft.gif" WIDTH="17" HEIGHT="15" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="architecture.htm">Data Binding Architecture</A>
<IMG SRC="../../../art/arrownxt.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="dataconsumer.htm">Binding HTML Elements to Data</A></PRE></TD></TR>
</TABLE>
<!-- NAVLINKS_END -->
<BLOCKQUOTE class="body">
<!-- CONTENTS_START -->
<H1>Adding a Data Source Object to a Page</H1>
<BR CLEAR=ALL>
<P>Once a Web author has identified the data that she wishes to display on a page, the next step is to choose the data source object (DSO) that will supply that data and to add a reference to that DSO to that page. Internet Explorer 4.0 ships with a number of data source objects. These include
<UL>
<LI><A HREF="datasources.htm#ch_databind_tdc_intro">Tabular Data Control (TDC)</A>
<LI><A HREF="datasources.htm#ch_databind_rds_intro">Remote Data Service (formerly ADC)</A>
<LI><A HREF="datasources.htm#ch_databind_jdbc_intro">JDBC Applet</A>
<LI><A HREF="datasources.htm#ch_databind_xml_intro">XML Data Source</A>
<LI><A HREF="datasources.htm#ch_databind_mshtml_intro">MSHTML Data Source</A>
</UL>

<P>In addition to these data providers, Microsoft maintains a <A HREF="http://www.microsoft.com/gallery/files/datasrc/" TARGET="_top">gallery of data source objects</A>. Jump to this site to learn about other data providers as they become available.

<P>A DSO can be implemented as an ActiveX control or as a Java applet. The <A HREF="../../references/html/OBJECT.htm#OBJECT">OBJECT</A> tag is used to embed an ActiveX control on the page; the <A HREF="../../references/objects/APPLET.htm#APPLET">APPLET</A> tag is used to embed a Java applet on the page. In general, Web authors can copy and paste the appropriate OBJECT or APPLET declaration corresponding to the DSO of their choosing and modify the PARAM tags appropriately. So that elements on the page can bind to the data source, the declaration should include the ID attribute.

<P>Because the data source object specification imposes no requirements on the DSO regarding the object model it exposes, Web authors should familiarize themselves with the documentation associated with the DSO they select to provide data to their page.

<H2><A NAME="ch_databind_tdc_intro">Tabular Data Control (TDC)</A></H2>
<P>The TDC is a simple DSO that provides access to delimited text files. This is the DSO used in the majority of the samples provided with this section. Consider using the TDC if:

<UL>
<LI>You have a simple data set to display. TDC supports some simple data types.
<LI>You need to browse your data offline. The file transmitted by the TDC can be cached on the client and read offline.
<LI>You want to prevent direct access to your DBMS. A server script can be written to dump data from your database into a delimited text file. In addition, most DBMSs support this feature.
</UL>

<P>The following example represents a declaration specific to the
<object id="hhal_3" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Tabular_Data_Control_TDC_>
</object><A HREF=JavaScript:hhal_3.Click()>Tabular Data Control (TDC)</A>. 

<PRE>&lt;OBJECT CLASSID="clsid:333C7BC4-460F-11D0-BC04-0080C7055A83"
    ID=dsoComposer WIDTH=0 HEIGHT=0&gt;
    &lt;PARAM NAME="DataURL" VALUE="composer.csv"&gt;
&lt;/OBJECT&gt;
</PRE>

<P><object id="hhal_4" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_DataURL>
</object><A HREF=JavaScript:hhal_4.Click()>DataURL</A> is a property specific to the TDC. The TDC uses this property to allow an author to specify the data set that should get loaded along with the page. For more information about the TDC, see the companion documentation for this component in the
<object id="hhal_5" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Component_Library>
</object><A HREF=JavaScript:hhal_5.Click()>Component Library</A> included with the Internet Client SDK.

<H2><A NAME="ch_databind_rds_intro">Remote Data Service (RDS)</A></H2>
<P>The
<object id="hhal_6" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Microsoft_Remote_Data_Service>
</object><A HREF=JavaScript:hhal_6.Click()>Remote Data Service</A> is a more sophisticated DSO that ships with Internet Explorer 4.0. RDS obtains its data from a database using OLE-DB or ODBC. Consider using RDS if:

<UL>
<LI>You have existing data in an OLE-DB or ODBC-compliant database management system (DBMS) such as SQL Server, Microsoft&#174; Access, or Oracle.
<LI>You want to specify the data using a SQL statement.
<LI>You need to provide update, insert, and delete capabilities.
<LI>You want direct, real-time access to the data.
</UL>

<P>A declaration specific to RDS follows: 

<PRE>&lt;OBJECT classid="clsid:BD96C556-65A3-11D0-983A-00C04FC29E33"
    ID=dsoComposer HEIGHT=0 WIDTH=0&gt;
    &lt;PARAM NAME="Server"  VALUE="http://musicserver"&gt;
    &lt;PARAM NAME="Connect" VALUE="dsn=music;uid=guest;pwd="&gt;
    &lt;PARAM NAME="SQL"     VALUE="select compsr_name from composer"&gt;
&lt;/OBJECT&gt;
</PRE>

<P>First, note the class identifier (CLSID) specific to RDS. Every ActiveX component requires a CLSID to differentiate it from other objects registered on the system. Next, note that the base properties exposed by RDS differ significantly from those exposed by the TDC. That's because the TDC derives its data from a flat text file, while the RDS is capable of retrieving and updating data from any OLE-DB or ODBC-compliant database. The following are the properties specified in the example declaration above:

<TABLE>
<TR><TD>Server</TD><TD>String identifying the protocol and the server that supplies the data.</TD></TR>
<TR><TD>Connect</TD><TD>Standard ODBC connection string identifying the data source name configured on the server.</TD></TR>
<TR><TD>SQL</TD><TD>SQL query identifying the table and columns to be selected from the database.</TD></TR>
</TABLE>
<P>For the specifics on how to use RDS, see the companion documentation in the
<object id="hhal_7" type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Item1" value="">
<PARAM name="Item2" value=_win32_Component_Library>
</object><A HREF=JavaScript:hhal_7.Click()>Component Library</A> of the Internet Client SDK.

<H2><A NAME="ch_databind_jdbc_intro">JDBC DataSource Applet</A></H2>
<P>The JDBC DataSource Applet is a DSO available for download from the <A HREF="http://www.microsoft.com/gallery/files/datasrc/" TARGET="_top">Microsoft Data Source Object Gallery</A>. Consider using this applet if:
<UL>
<LI>You have existing data in an ODBC-compliant database management system (DBMS) such as SQL Server, Microsoft&#174; Access, or Oracle.
<LI>You want to specify the data using a SQL statement.
<LI>You need to provide update, insert, and delete capabilities.
</UL>
<PRE>&lt;APPLET CODE=JDC.class NAME="DSA1" ID="DSA1" WIDTH=0 HEIGHT=0&gt;
    &lt;PARAM NAME=cabbase VALUE= 
        "http://www.microsoft.com/gallery/files/datasrc/jdbcapplet/jdc.cab"&gt;
    &lt;PARAM NAME=dbURL VALUE="jdbc:odbc:Northwind"&gt;
    &lt;PARAM NAME=showUI VALUE=false&gt;
    &lt;PARAM NAME=sqlStatement VALUE="select ProductName, CompanyName, 
        CategoryName from Products, Suppliers, Categories where 
        Suppliers.SupplierID=Products.SupplierID and Categories.CategoryID = 
        Products.CategoryID and Categories.CategoryID &lt; 5"&gt;
    &lt;PARAM NAME=allowInsert VALUE="true"&gt;
    &lt;PARAM NAME=allowDelete VALUE="true"&gt;
    &lt;PARAM NAME=allowUpdate VALUE="false"&gt;
    &lt;PARAM NAME=user        VALUE=""&gt;
    &lt;PARAM NAME=password    VALUE=""&gt;
&lt;/APPLET&gt;
</PRE>

<P>Instead of a CLSID, the CODE attribute uniquely identifies the DSO. Note that the basic properties exposed by this DSO differ from those exposed by the TDC or RDS. The following properties are specified in the example declaration above:
<TABLE>
<TR><TD>cabbase</TD><TD>General property, applicable to all applets, that specifies the location of the code for the applet. The code will be downloaded to the client if not already installed.</TD></TR>
<TR><TD>dbURL</TD><TD>Required string that identifies the ODBC data source name (DSN) configured in the user's control panel.</TD></TR>
<TR><TD>showUI</TD><TD>Optional Boolean value indicating whether a user interface should be displayed.</TD></TR>
<TR><TD>sqlStatement</TD><TD>SQL string identifying the table and columns to be selected from the database.</TD></TR>
<TR><TD>allowInsert</TD><TD>Boolean value indicating whether new records can be inserted into the data set.</TD></TR>
<TR><TD>allowDelete</TD><TD> Boolean value indicating whether existing records can be deleted.</TD></TR>
<TR><TD>allowUpdate</TD><TD> Boolean value indicating whether existing records can be updated.</TD></TR>
<TR><TD>user</TD><TD>Optional string identifying the user. Some ODBC data sources require authentication.</TD></TR>
<TR><TD>password</TD><TD>Optional string identifying the specified user's password.</TD></TR>
</TABLE>
<H2><A NAME="ch_databind_xml_intro">XML Data Source</A></H2>
<P>Extensible Markup Language (XML) describes data and structured text on the Web in a standard way. Internet Explorer 4.0 ships with an application that serves as an XML data provider. While the XML DSO is a read-only data provider, Web authors should consider using it to display hierarchical data. 

<P>To use the XML data source object, add an APPLET tag to your page, as in the following:

<PRE>&lt;APPLET
    CLASS=com.ms.xml.dso.XMLDSO.class 
    ID=xmldso 
    WIDTH=0
    WIDTH=0
    MAYSCRIPT=true&gt;
    &lt;PARAM NAME=URL VALUE="composer.xml"&gt;
&lt;/APPLET&gt;
</PRE>

<P>Since the DSO is implemented in Java, embedding it on the page requires the use of the APPLET tag. The CLASS attribute specifies the package in which the code is implemented. The URL property specifies the location of the data. The XML DSO retrieves the XML from this location, parses it, and provides the data to bound elements on the page. The data consuming elements are isolated from the details of XML.

<P>Click the Show Me button to see a simple example that uses the XML DSO to display an XML data set in a tabular format.


<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../../samples/databind/xmltab.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><H3><A NAME="Using_the_XML_DSO_to">Using the XML DSO to view hierarchical data</A></H3>
<P>The following example shows how the XML DSO can be used to bind nested tables to hierarchical XML data. The XML data contains a list of CUSTOMERS. Each customer contains a list of ORDERS. Each order contains a list of ITEMS yielding three levels of repetition bound to three nested tables.


<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../../samples/databind/xmlhier.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><H3><A NAME="Additional_XML_resou">Additional XML resources</A></H3>
<P>For additional information on XML, see the following resources:

<UL>
<LI><A HREF="http://www.w3c.org/pub/WWW/TR/WD-xml.html" TARGET="_top">Latest working draft published by the XML working group at the W3C</A>
<LI><A HREF="http://www.w3c.org/XML/Activity" TARGET="_top">Information on the XML standard</A>
<LI><A HREF="http://www.w3c.org/XML/" TARGET="_top">W3C XML Resources</A>
</UL>
<H2><A NAME="ch_databind_mshtml_intro">MSHTML Data Source</A></H2>
<P>In addition to using external components as data source objects, Web authors can define their data sets within an HTML document and use MSHTML itself to provide read-only data to a page. For the purposes of this section, the page supplying the data is called the data page. 

<P>When MSHTML is used as a DSO, it parses through the data page in search of elements with an ID attribute. The set of unique IDs defines the columns in the data set, and Web authors use these ID attributes as the value for the DATAFLD attribute on elements of the bound page. For example, given the following SPAN from a data page, MSHTML interprets <B>compsr_last</B> as the name of a column and <B>Mozart</B> as data in that column. 

<PRE>&lt;SPAN ID=compsr_last&gt;Mozart&lt;/SPAN&gt;
</PRE>

<P>Multiple elements on the page sharing the same ID identify additional records in the data set. A column that is not represented is given the null value in the corresponding data set. Only elements with an opening and closing tag (for example, DIV, SPAN, H1) can be used to supply data. The following example defines a two-column table consisting of three records.

<PRE>&lt;&lt;H1 ID=COMPSR_FIRST&gt;Hector&lt;/H1&gt;
&lt;MARQUEE ID=COMPSR_LAST&gt;Berlioz&lt;/MARQUEE&gt;
&lt;DIV ID=COMPSR_BIRTH&gt;1803&lt;/DIV&gt;
&lt;H2 ID=COMPSR_FIRST&gt;Modest&lt;/H2&gt;
&lt;H3 ID=COMPSR_LAST&gt;Moussorgsky&lt;/H3&gt;
&lt;BUTTON ID=COMPSR_BIRTH&gt;1839&lt;/BUTTON&gt;
&lt;TEXTAREA ID=COMPSR_FIRST&gt;Franz&lt;/TEXTAREA&gt;
&lt;XMP ID=COMPSR_LAST&gt;Liszt&lt;/XMP&gt;
&lt;SPAN ID=COMPSR_BIRTH&gt;1811&lt;/SPAN&gt;
</PRE>

<P>Observe that the MSHTML DSO disregards the lack of consistency in the elements used. In the example above, the H1, H2, and TEXTAREA elements represent the data for the first name column in the data set; the P, H3, and XMP elements represent the last name column; the DIV, BUTTON, and SPAN elements represent the date of birth column. 

<P>Once the data page is defined, use an OBJECT tag on the data bound page to supply the data as follows:

<PRE>&lt;OBJECT ID=htmlComposer DATA="compdata.htm" HEIGHT=0 WIDTH=0&gt;
&lt;/OBJECT&gt;
</PRE>

<P>The DATA attribute points to the data page and can specify a complete or relative URL.

<P>Elements on the page used to present the data can be bound using the <A HREF="architecture.htm#ch_databind_extensions">data binding extensions</A>.

<P>Click the Show Me button to see how the MSHTML DSO works.


<P><BUTTON onclick="if (CheckCAB(3)) {window.open('../../../../samples/databind/dbmshtml.htm')} else { ALink(3, 'comp3.htm') }">Show Me</BUTTON>
<BR CLEAR=ALL><H2><A NAME="Creating_Custom_Data">Creating Custom Data Source Objects</A></H2>
<P>While the components described above are implementations of data source objects (DSO) provided with Internet Explorer 4.0 and available through the DSO gallery, the specification is completely open and language independent so that independent software vendors (ISVs) can create their own data providers. For more information on creating a DSO, see the <A HREF="../../../itt/databind/databind.htm#book_data_bind">COM Objects as Data Providers</A> document.

<!-- CONTENTS_END -->
<!-- START PAGE FOOTER -->
<H6><HR size=1></H6>
<P><A ID=line HREF="#pagetop"><IMG src="../../../art/arrowup1.gif" WIDTH="17" HEIGHT="16" ALIGN="MIDDLE" BORDER="0" ALT="Up">&nbsp;Top of Page</A>
<BR><A ID=line HREF="http://www.microsoft.com/misc/cpyright.htm" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
<!-- END PAGE FOOTER -->
</BLOCKQUOTE>
</BODY>
</HTML>
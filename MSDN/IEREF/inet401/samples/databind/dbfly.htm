<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding Bound Elements and a DSO on the Fly</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">

<SCRIPT language="JavaScript">
var g_Fields = null;
var g_cDSOID = null;

// fires when data set is completely loaded
function HandleDataSetComplete()
{
	// wire up the navigation scriptlet 
	// by providing it with a reference to the DSO
	scrNavBtns.DSO = event.srcElement;
}

// Helper function that returns a PARAM statement for the TextQualifier property
// This property is specific to the TDC.
function GenTextQualifier(cTextQualifier)
{
   if (cTextQualifier == '')
      return '';
   else if (cTextQualifier == '\'')
      return '   <PARAM NAME="TextQualifier" VALUE="\'">';   
   else if (cTextQualifier == '\"')
      return '   <PARAM NAME=\'TextQualifier\' VALUE=\'\"\'>';   
   else
      return '   <PARAM NAME="TextQualifier" VALUE="' + cTextQualifier + '">';
}

// Generate a TDC object declaration
// cDSOID			- ID to be used for the DSO
// cDataUrl			- relative or absolute path to the data
// fUseHeader		- whether or not the data set begins with a header
// cTextQualifier	- optional character that qualifies each field in the data set
function GenDSO(cDSOID, cDataUrl, fUseHeader, cTextQualifier)
{
   return '<OBJECT classid="clsid:333C7BC4-460F-11D0-BC04-0080C7055A83"' +
       'ID=' + cDSOID + ' HEIGHT=0 WIDTH=0>' + 
	   '<PARAM NAME="DataURL" VALUE="' + cDataUrl + '">' + 
	   (fUseHeader ? '<PARAM NAME="UseHeader" VALUE="True">' : '') +
       GenTextQualifier(cTextQualifier) +
       '</OBJECT>'
}

// constructor for field object
// m_cCaption	- caption that accompanies bound element
// m_cField		- name of field in data set
// m_cTag		- element type to use in binding
// m_cDataFormat - format to use when displaying data. HTML or TEXT
function Field(cCaption, cField, cTag, cDataFormat)
{
	this.m_cCaption = cCaption;
	this.m_cField = cField;
	this.m_cTag = cTag;
	this.m_cDataFormat = cDataFormat;
}

// initialize the global array of field objects that describe the binding
function InitializeFields()
{
	g_Fields = new Array();

	g_Fields[0] = new Field('First Name', 'compsr_first', 'SPAN', 'TEXT');
	g_Fields[1] = new Field('Last Name', 'compsr_last', 'SPAN', 'TEXT');
	g_Fields[2] = new Field('Born', 'compsr_birth', 'SPAN', 'TEXT');
	g_Fields[3] = new Field('Died', 'compsr_death', 'SPAN', 'TEXT');
	g_Fields[4] = new Field('Origin', 'origin', 'SPAN', 'TEXT');
	g_Fields[5] = new Field('Biography', 'bio', 'DIV', 'HTML');
}

// generate the bound elements
// cDataSrc	- id of the DSO to which the elements are bound
// aFields	- array of field objects used to describe the bound elements
function GenElements(cDataSrc, aFields)
{
	var cBoundElements = '';
	for (i = 0; i < aFields.length; i++)
	{
		cBoundElements = cBoundElements + '<BR>' +
		    '<SPAN STYLE="font-weight:bold">' + aFields[i].m_cCaption + '</SPAN>&nbsp;' +
			'<' + aFields[i].m_cTag + 
			' DATASRC=' + cDataSrc + 
			' DATAFLD=' + aFields[i].m_cField + 
			(aFields[i].m_cDataFormat != '' ? ' DATAFORMATAS=' + aFields[i].m_cDataFormat : '') +
			'></' + aFields[i].m_cTag + '>';
	}	
	return cBoundElements;
}

// Add the DSO and the bound elements to the page
function Bind()
{
	if (g_Fields == null)
		InitializeFields();

	//document.body.insertAdjacentHTML('beforeEnd', GenDSO());
	divDSO.innerHTML = GenDSO('tdcComposer', 'composer.csv', true, "'");

	divElements.innerHTML = ""; // in case anything's left over from the last time
	divElements.innerHTML =  GenElements('#tdcComposer', g_Fields); 
	divNavCode.style.display = 'inline';

	// Assign id of DSO to global so that nav buttons function
	// see click handler for document
	g_cDSOID = 'tdcComposer';

	// bind the data set completion event so that the navigation scriptlet can be hooked up
	divDSO.children(0).ondatasetcomplete = HandleDataSetComplete;

	// Fix UI to allow removal of binding
	btnBind.innerText = "Remove DSO";
	btnBind.onclick = RemoveDSO; // style.display = 'none';
}

// Remove the DSO from the page. This will cause the elements to be unbound
function RemoveDSO()
{
	divDSO.innerHTML = ""; // nuke the DSO
	divNavCode.style.display = 'none'; // hide the navigation buttons
	// leave the consumers around to show they're truly unbound

	// Fix the UI to allow rebinding
	btnBind.innerText = "Add DSO and Bound Elements";
	btnBind.onclick = Bind; // style.display = 'none';

}
</SCRIPT>
</HEAD>

<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">

<BUTTON ID=btnBind onclick="Bind()">Add DSO and Bound Elements</BUTTON>
<DIV ID=divDSO></DIV>
<DIV ID=divElements></DIV>
<P>
<DIV ID=divNavCode STYLE="display:none">
<OBJECT ID=scrNavBtns TYPE="text/x-scriptlet">
	<PARAM NAME=URL VALUE="navbtns.htm">
</OBJECT>
</DIV>
</FONT>
</BODY>
</HTML>
<HTML>
<HEAD>       
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DirectAnimation JScript sample</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>

<BODY BGCOLOR=WHITE LINK="#0033CC" TOPMARGIN=15 LEFTMARGIN=20>
  
<FONT SIZE=4 FACE="Verdana,Tahoma,Arial">

<CENTER><P><FONT SIZE=6><FONT COLOR=red>D</FONT>ancing <FONT COLOR=red>T</FONT>rapezoids</FONT></P><BR>
DirectAnimation has a powerful, high-level interface for sequencing any behavior. DirectAnimation 
behaviors support methods for specifying their duration, number of repetitions, and for
sequencing two behaviors together so that one will begin when the other ends.  This 
example shows how this can be used to create very complex transformations with a 
minimum amount of scripting.
</CENTER>
</FONT>


<DIV ID=controlDiv>
<OBJECT ID="DAControl"
  STYLE="position:absolute; left:20%; top:0;width:500;height:500" 
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
</DIV>

<SCRIPT LANGUAGE="JScript">
<!--
  m = DAControl.MeterLibrary;
    
  numGeos = 5;
  speed = m.Div(m.LocalTime, m.DANumber(2.5));
  
  hue = m.Abs(m.Sin(m.Div(speed,m.DANumber(2)))); 
  offX = m.Mul(m.DANumber(.04),m.Sin(speed));
  offY = m.Mul(m.DANumber(.04),m.Sin(speed));
  rotX = m.Mul(speed, m.DANumber(2));
  rotY = m.Mul(speed, m.DANumber(2));
  rotZ = m.Mul(speed, m.DANumber(2));
  lrotX = m.Mul(m.DANumber(.02),speed);
  lrotY = m.Mul(m.DANumber(.02),speed);
  lrotZ = m.Mul(m.DANumber(.02),speed);
  scale = m.DANumber(1);

  //Create an animated color
  half = m.DANumber(0.5);
  clr = m.colorHslAnim(hue, half, half);

  xfID = m.IdentityTransform2;  
  xfsc = m.Scale2UniformAnim(scale);
  xflr = m.Compose3(m.Compose3(m.Rotate3Anim(m.xVector3,lrotX),
    m.Rotate3Anim(m.yVector3,lrotY) ), m.Rotate3Anim(m.zVector3,lrotZ) ).ParallelTransform2();
  xflt = m.Translate2Anim(offX, offY);
  xfwt = m.Compose3(m.Compose3(m.Rotate3Anim(m.xVector3,rotX), m.Rotate3Anim(m.yVector3,rotY) ),
    m.Rotate3Anim(m.zVector3,rotZ) ).ParallelTransform2();
  xf = m.Compose2(xfwt, m.Compose2(xflt, m.Compose2( xflr, xfsc ) ) );

  rect = m.RectAnim(m.DANumber(.015),m.DANumber(.015));
  recImg = m.SolidColorImage(clr).Clip(m.FillMatte(rect));

  finalImg = m.EmptyImage;
  
  for(i=0; i<numGeos; i++)  {
    wait = xfID.Duration(i*.3);
    newImg = recImg.Transform(m.Sequence(wait,xf));
    finalImg = m.Overlay(newImg,finalImg);
  }

  // Assign the animation back to the control and start it
  DAControl.Image = finalImg;
  DAControl.Start();
//-->
</SCRIPT>
</BODY>
</HTML>


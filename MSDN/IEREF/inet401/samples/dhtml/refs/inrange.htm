<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>inRange Demo</TITLE>

<META NAME=MS-HKWD CONTENT="inRange">
<META NAME="Keywords" CONTENT="Dynamic HTML, DHTML, IE4, Internet Explorer 4.0, inRange, Sample">
<META NAME="Platform" CONTENT="Windows, Win95, WinNT, Mac">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">

<SCRIPT DEFER>
function Trace(cText)
{
	txtStatus.value = txtStatus.value + '\n' + cText;
}

function CheckRange(nCase)
{
	var oRng1, oRng2, oRng3;

	var sInside = '';
	var oRng1 = document.body.createTextRange(); // create a text range
	var oRng2 = oRng1.duplicate();		// create a duplicate range base on oRng1

	switch(nCase)
	{
	case 1:
		sInside = oRng1.inRange(oRng2) ? '' : 'not '; // returns true; oRng2 is within or equal to oRng1
		Trace('Range 2 is ' + sInside + 'inside Range 1');
		break;
	case 2:
		oRng1.moveToElementText(div1); // move the range to the beginning of div1
		oRng2.moveToElementText(div2); // move the range to the beginning of div2
		sInside = oRng1.inRange(oRng2) ? '' : 'not ';  // returns false; oRng2 is outside of oRng1
		Trace('Range 2 is ' + sInside + 'inside Range 1');
		break;

	case 3:
		var oRng3 = oRng1.duplicate(); // create a duplicate range base on oRng1
		oRng3.findText('division 1'); // modify the range by looking for content
		sInside = oRng1.inRange(oRng3) ? '' : 'not ';  // returns true; oRng3 is inside of oRng1
		Trace('Range 3 is ' + sInside + 'inside Range 1');
		break;
	}
}
</SCRIPT>

<LINK REL="stylesheet" HREF="../../../help/basicsdk.css" TYPE="text/css">
</HEAD>

<BODY>

<H5>inRange Demo</H5>
<P>This example demonstrates the inRange method, a member of the TextRange object. 
The script behind this page creates several text ranges over various parts of the document.
It then calls the inRange method to determine if the respective text ranges are contained by
one another.

<DL>
<DT>Case 1
<DD>The first case defines a range (Range 1) over the entire body of the document. 
A duplicate range is created (Range 2) based on Range 1. Since Range 1 and Range 2 are identical,
inRange returns true.

<DT>Case 2
<DD>The second case moves Range 1 so that it comprises div1 below. Range 2 is moved so that it 
comprises div2 below. Since div2 is not contained within div1, inRange returns false.


<DT>Case 3
<DD>The third case defines a range (Range 3) that duplicates Range 1. It then moves the range by calling
findText. Since the text to be found is contained within the range defined by Range 1, inRange returns true.
</DL>

<P>
<DIV ID=div1>
Content for division 1.
</DIV>
<DIV ID=div2>
Content for division 2.
</DIV>
<P>
<BUTTON onclick='CheckRange(1)'>Case 1</BUTTON>
<BUTTON onclick='CheckRange(2)'>Case 2</BUTTON>
<BUTTON onclick='CheckRange(3)'>Case 3</BUTTON>
<P>
<TEXTAREA ID=txtStatus STYLE="height:150;width:300"></TEXTAREA>
</BODY>
</HTML>


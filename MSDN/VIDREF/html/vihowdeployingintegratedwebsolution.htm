<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Deploying an Integrated Web Solution</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="vihowdeployingintegratedwebsolution"></a>Deploying an Integrated Web Solution</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vihowDeployingIntegratedWebSolution_C">
</object></p>
<p>
If your Web application uses components created using other Microsoft<sup>®</sup> Visual Studio™ tools, you can add their outputs to your Web project and deploy them along with your Web files.</p>
<p>
For example, a banking application may include a .dll, .ocx, or .class file created in another type of project. You can include the project's output as part of your Web application by adding the component to the Web project. If it is a server component, you need to mark it as such. If you want the component to execute within the scope of a Microsoft Transaction Server package, you can specify a package. For more information about Microsoft<sup>®</sup> Transaction Server (MTS), see <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="asconoverviewandconcepts">
</object><a href=JavaScript:alink_2.Click()>Microsoft Transaction Server</a>.</p>
<p>
In deploying an integrated solution, you might perform the following tasks.
<ul type=disc>
<li>
<a href="#vimscregisteringservercomponents">Registering Server Components</a><br><br></li>
<li>
<a href="#vimscpackagingcomponentsformicrosofttransactionserver">Packaging Components for Microsoft Transaction Server</a><br><br></li>
<li>
<a href="#vimscdeployingapplicationwithcomponents">Deploying an Application with Components</a></li>
</ul>
<h2><a name="vimscregisteringservercomponents"></a>Registering Server Components</h2>
<p>
If your component is designed to run on the server and not on the end user’s computer, you need to make sure it is registered on the production server. You also need to register it on your master server during testing and design time.</p>
<p>
You can manually register components or specify the component as a server component within your Web project for registration when you copy them.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;In order to register components through Microsoft<sup>®</sup> Visual InterDev™ on a remote Web server, the Web server must have Microsoft<sup>® </sup>Internet Information Server (IIS) installed with the Visual InterDev RAD Remote Deployment Support option selected during custom installation.</p>
<p class=label>
<b>To specify a server component</b>
<ol>
<li>
In the <b>Project Explorer</b>, add the component to your Web project.<br><br></li>
<li>
Select the component you want to register on the server.<br><br></li>
<li>
In the <b>Properties Grid</b>, select <b>Custom</b>.<br><br></li>
<li>
In the <b>Component Installation </b>tab of the <b>Custom</b> property page, select <b>Register on server,</b> and then choose <b>OK</b>.</li>
</ol>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If your master Web server and local project are on the same computer the registry for that machine only notes the component once — not twice for the master and local version. If you remove the local copy, the registry entry for the component is also removed even though the component is marked as a server component in the project.</p>
<p>
When you use the Copy Web Application feature, the component is automatically registered on the server. If the registration fails, you need to check your permissions on the server.</p>
<h2><a name="vimscpackagingcomponentsformicrosofttransactionserver"></a>Packaging Components for Microsoft Transaction Server</h2>
<p>
If your Web application uses components or business objects that you want to be controlled using Microsoft Transaction Server, you can deploy them to the server using Visual InterDev.</p>
<p>
For example, in your banking application, three business objects work together to transfer money from one account to another. The Transfer Object calls the Debit and the Credit Objects to transfer the money. For the transfer component, you need something that makes sure both of the other objects run successfully before either committing the changes or rolling the entire transaction back in the case that one part of the transaction fails.</p>
<p>
Microsoft Transaction Server can manage your components during transaction processing. All you need to do in Visual InterDev is specify the components that make up a Microsoft Transaction Server Package and deploy them on the server.</p>
<p class=label>
<b>To package components for MTS</b>
<ol>
<li>
In the <b>Project Explorer</b>, right-click the component you want to add to the package.<br><br></li>
<li>
Choose <b>Properties</b> from the short-cut menu.<br><br></li>
<li>
In the <b>Component Installation</b> tab, choose <b>Add to Microsoft Transaction Server package</b>.<br><br></li>
<li>
In the <b>Package name </b>box, type the name of the package to add the component to.<br><br></li>
<li>
Select the <b>Transaction support</b> option appropriate for your component.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Typically the component’s objects inherit the transaction specified by the client. You can set these options to specify otherwise.</p><table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>To</b></td>
<td class=label width=50%><b>Select</b></td>
</tr>
<tr valign=top>
<td width=50%>Set the component's objects to execute within the scope of a transaction regardless of whether the client has a transaction</td>
<td width=50%><b>Requires a transaction</b></td>
</tr>
<tr valign=top>
<td width=50%>Create a new transaction for the component's objects to execute within regardless of whether the client has a transaction</td>
<td width=50%><b>Requires a new transaction</b></td>
</tr>
<tr valign=top>
<td width=50%>Set the component’s objects to execute within the scope of the client’s transaction</td>
<td width=50%><b>Supports transactions</b></td>
</tr>
<tr valign=top>
<td width=50%>Set the component's objects to run without a transaction regardless of whether the client has a transaction</td>
<td width=50%><b>Does not support transactions</b></td>
</tr>
</table><br>
</li>
</ol>
<p>
When you deploy the application, the package is provided to Microsoft Transaction Server. For more information about creating and using packages, see the <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="asconoverviewandconcpets">
</object><a href=JavaScript:alink_3.Click()>Microsoft Transaction Server</a> documentation.</p>
<h2><a name="vimscdeployingapplicationwithcomponents"></a>Deploying an Application with Components</h2>
<p>
Once you have completed marking your components within the project, you can deploy your Web application.</p>
<p>
If your production server has FrontPage Server Extensions installed, you can perform the following task. If you have a special configuration you want to use, see <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconDeploymentOfWebProject">
</object><a href=JavaScript:alink_4.Click()>Deployment of a Web Project</a>.</p>
<p class=label>
<b>To deploy a Web application with components</b>
<ol>
<li>
In the <b>Project Explorer</b>, select the project that points to the Web application you want to deploy.<br><br></li>
<li>
From the <b>Project </b>menu, choose <b>Web Project</b>, and then <b>Copy Web Application</b>.<br><br></li>
<li>
In the <b>Copy Project </b>dialog box, choose the copy of the application you want to deploy.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you work on a team, you typically deploy the master version because it includes the updated files from the team members.</p></li>
<li>
In the <b>Server name </b>box, enter the name of the Web server you want to use.<br><br></li>
<li>
In the <b>Web project</b> box, enter the name you want the users to type for the URL.<br><br></li>
<li>
Select <b>Register Server Components</b>.<br><br></li>
<li>
Choose <b>OK</b>.</li>
</ol>
<p>
A new application root is added on the destination Web server and the files in the Web application are copied to that new folder. The name you specified in the Copy Web Application dialog box becomes part of the application's URL. You can now test the application on the production server.</p>
</BODY>
</HTML>

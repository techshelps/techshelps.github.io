<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Exposing Events in DHTML Scriptlets</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="vihowexposingeventsindhtmlscriptlets"></a>Exposing Events in DHTML Scriptlets</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vihowExposingEventsInDHTMLScriptlets_C">
</object></p>
<p>
When you use a DHTML scriptlet in your host application, the application can be notified about events that occur in the scriptlet. A DHTML scriptlet can expose two types of events:
<ul type=disc>
<li>
<B><b>Standard DHTML events</b></B>, such as the onclick event and the onkeypress event.<br><br></li>
<li>
<B><b>Custom events</b></B>, which are events that you define or DHTML events not provided as standard events. For example, the scriptlet can fire an event when a property value changes.</li>
</ul>
<h2>Handling Standard Events</h2>
<p>
A DHTML scriptlet can expose these standard DHTML events:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td width=33%><a href="viproonclickeventscriptlet.htm">onclick Event</a></td>
<td width=33%><a href="viproonkeypressevent.htm">onkeypress</a></td>
<td width=34%><a href="viproonmousemoveevent.htm">onmousemove</a></td>
</tr>
<tr valign=top>
<td width=33%><a href="viproondblclickevent.htm">ondblclick</a></td>
<td width=33%><a href="viproonkeyupevent.htm">onkeyup</a></td>
<td width=34%><a href="viproonmousedownonmouseupevents.htm">onmouseup</a></td>
</tr>
<tr valign=top>
<td width=33%><a href="viproonkeydownevent.htm">onkeydown</a></td>
<td width=33%><a href="viproonmousedownonmouseupevents.htm">onmousedown</a></td>
<td width=34%></td>
</tr>
</table><br>
<p class=indent>
<B><b>Tip&nbsp;&nbsp;&nbsp;</b></B>You can define a context menu that is displayed when the user right-clicks the scriptlet at run time. For details, see the <a href="viprosetcontextmenumethod.htm">setContextMenu</a> method.</p>
<p>
Events that occur in the scriptlet are not automatically sent to the host application. To trap standard events in the host application, you must write handlers in two places: one in the scriptlet to trap and forward the event, and another in the host application to capture the event.</p>
<p class=label>
<b>To pass an event from the scriptlet to the host application</b>
<ol>
<li>
Attach an event handler script to the event that you want to pass.<br><br></li>
<li>
Within the event handler script, call the <a href="viprobubbleeventmethod.htm">bubbleEvent</a> method to forward the event to the host application.<p class=atl>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>Before passing events to the container object, you can check the scriptlet's <a href="viprofrozenproperty.htm">frozen</a> property to be sure that the container object is ready to handle events.</p></li>
</ol>
<p>
If the scriptlet does not include an event handler for a specific event, that event will not be passed to the host application. Similarly, if the scriptlet includes a handler for the event but does not call the bubbleEvent method, the event will not be visible to the host application. </p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>The scriptlet container object exposes all standard events at design time, even if the scriptlet does not contain a script that passes the standard event to the application. For example, in Microsoft<sup>®</sup> Visual Basic<sup>®</sup>, the code window for the scriptlet container lists all standard events, even if not all are available in a specific scriptlet.</p>
<p>
The following scriptlet script shows how you can pass a text box's <code>onkeyup</code> event to the host application:</p>
<pre><code>&lt;INPUT TYPE=text ONKEYUP="passKeyUp()" NAME="t1" VALUE=""&gt;
&lt;SCRIPT LANGUAGE="JavaScript"&gt;
function passKeyUp() {
 &nbsp; // script statements here if required
 &nbsp;&nbsp; window.external.bubbleEvent();
 &nbsp; // further script statements here if required
}
&lt;/SCRIPT&gt;
</code></pre>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>When a standard event occurs, the host application sees the corresponding event triggered for the scriptlet container object as a whole. For example, the scriptlet might contain several buttons. If a user clicks one of the buttons (and if the scriptlet is forwarding the event), the host application receives only a general click event. </p>
<p class=indent>
To pinpoint which control in the scriptlet triggered the event, you can create a custom event in the scriptlet that contains additional information about the event. For details, see "Creating and Handling Custom Events" below.</p>
<p>
Additional information about a standard event, such as the location of the mouse pointer or the state of keys at the time the event was triggered, is available in the script container object's <a href="viproeventproperty.htm">event</a> property. For example, the following Visual Basic subroutine shows how you would capture the scriptlet's <code>onkeypress</code> event and display the key code of a character typed in a scriptlet textbox:</p>
<pre><code>Sub ScriptContainer1_onkeyup()
 &nbsp; MsgBox "The character typed was " &amp; ScriptContainer1.event.keyCode
 &nbsp; MsgBox "The shift state was " &amp; ScriptContainer1.event.shiftKey
End Sub
</code></pre>
<p>
In Microsoft<sup>®</sup> Internet Explorer, the following script does the same thing:</p>
<pre><code>&lt;SCRIPT LANGUAGE=JavaScript FOR=document EVENT=onkeyup&gt;
 &nbsp; alert("Key code = " + window.event.keyCode)
 &nbsp; alert("Shift status&nbsp; = " + window.event.shiftKey)
&lt;/SCRIPT&gt;
</code></pre>
<h2>Creating and Handling Custom Events</h2>
<p>
You can expose custom events in either DHTML or automation scriptlets. Custom events allow you to:
<ul type=disc>
<li>
Send more detail about a standard event that occurred&nbsp;— for example, which of several buttons in the scriptlet was clicked.<br><br></li>
<li>
Notify the host application about non-standard changes in the scriptlet, such as when the value of a property changes.<br><br></li>
<li>
Notify the host application about DHTML events that are not among the standard events handled by the bubbleEvent method.</li>
</ul>
<p>
As with standard events, you must send the event from the scriptlet and capture the event in the host application. </p>
<p class=label>
<b>To send a custom event in the scriptlet</b>
<ul type=disc>
<li>
Call the scriptlet's <a href="viproraiseeventmethod.htm">raiseEvent</a> method.<p class=atl>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>Before passing events to the container object, you can check the scriptlet's <a href="viprofrozenproperty.htm">frozen</a> property to be sure that the container object is ready to handle events.</p></li>
</ul>
<p>
For example, the following shows how you can send a custom event called <code>oncolorchange</code> whenever the scriptlet's backgroundColor property is reset. The second parameter is an object reference to the window.event object, which will allow the container handler to get information about the object that fired the event.</p>
<pre><code>&lt;SCRIPT LANGUAGE="JavaScript"&gt;
function public_put_backgroundColor(value)
{
 &nbsp; window.document.bgColor = value;
 &nbsp; window.external.raiseEvent("event_onbgcolorchange",window.event);
}
&lt;/SCRIPT&gt;
</code></pre>
<p class=label>
<b>To handle a custom event in the host application</b>
<ul type=disc>
<li>
Create an event handler for the <a href="viproonscriptleteventevent.htm">onscriptletevent</a> event.</li>
</ul>
<p>
The following is an example in Visual Basic that shows how you can determine what control triggered an event:</p>
<pre><code>Sub ScriptletContainer1_onscriptletevent( ByVal txtTitle As String, _
 &nbsp;&nbsp;&nbsp;&nbsp; ByVal eventData As Variant)
 &nbsp; objName = eventData.srcElement.id
 &nbsp; MsgBox "The event " &amp; txtTitle &amp; " occurred in " &amp; objName
End Sub
</code></pre>
<p>
If your host application is Internet Explorer, use a script such as the following to capture the scriptlet event:</p>
<pre><code>&lt;SCRIPT LANGUAGE="JavaScript" 
 &nbsp;&nbsp;&nbsp;&nbsp; FOR="s1" 
 &nbsp;&nbsp;&nbsp;&nbsp; EVENT="onscriptletevent (event, obj)"&gt;
 &nbsp; msg = "Event fired in the scriptlet was " + event
 &nbsp; msg = msg + "\nand the ID of the object was " + obj.srcElement.id
 &nbsp; alert(msg);
&lt;/SCRIPT&gt;
</code></pre>
<p>
You can use a <code>Select Case</code> structure in the onscriptletevent event to take different actions based on different events.</p>
</BODY>
</HTML>

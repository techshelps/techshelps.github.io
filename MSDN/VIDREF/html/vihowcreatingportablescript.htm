<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating Portable Script</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="vihowcreatingportablescript"></a>Creating Portable Script</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vihowCreatingPortableScript_C;vihowCreatingPortableScriptC">
</object></p>
<p>
If you are writing a Web application for use on a corporate intranet or for another known environment, you can usually rely on the features of a specific Web browser. </p>
<p>
However, if your application will be accessible by users who can choose their own browser, you must be careful to write an application that works well with as many browsers as possible.</p>
<p>
When creating applications that are as browser-independent as possible, you must be able to:
<ul type=disc>
<li>
Identify the browser that the user is using and what capabilities it has.<br><br></li>
<li>
Create scripts that run on different browsers. Alternatively, you can provide a graceful way to accommodate browsers that cannot support all features in your application.</li>
</ul>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;When you create a new Web page in Microsoft<sup>®</sup> Visual InterDev™, one of the properties you can set for the page is the TargetBrowser property. This property does not perform any checking or otherwise prevent you from creating scripts that are incompatible with a specific browser.</p>
<p class=indent>
The TargetBrowser property just alerts the editor to whether you are writing scripts for Microsoft<sup>®</sup> Internet Explorer 4.0, and if so, it tells the editor to display Internet Explorer 4.0 objects when completing script statements.</p>
<h2>Identifying Browsers and Browser Capabilities</h2>
<p>
You can use various properties and objects to get information about what browser the user is currently using.</p>
<p class=label>
<b>To get browser information in client script</b>
<ul type=disc>
<li>
Query properties of the window's <code>navigator</code> object.<p class=tl>
For example, the following client script displays the name of the current browser:</P><pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
Sub Button1_OnClick()
 &nbsp; MsgBox "Current browser is " &amp; window.navigator.appname
End Sub
&lt;/SCRIPT&gt;
</code></pre>
</li>
</ul>
<p>
In server script, you can get basic information about a browser from the HTTP header and find details by using a bundled component.</p>
<p class=label>
<b>To get basic browser information from the HTTP header in server script</b>
<ul type=disc>
<li>
Use the <code>ServerVariables</code> collection of the server's <code>Request</code> object, and query the value of <code>HTTP_USER_AGENT</code>.</li>
</ul>
<p>
The value of the HTTP_USER_AGENT variable is a string that lists the compatibility, name, and version of the browser. For example, this script displays the capability of the browser that requested the page on which it appears:</p>
<pre><code>&lt;% browser = Request.ServerVariables("HTTP_USER_AGENT")%&gt;
&lt;H1&gt;Browser Identification&lt;/H1&gt;
&lt;P&gt;Your browser identifies itself as:&lt;/P&gt;
&lt;%=browser%&gt;
</code></pre>
<p class=label>
<b>To get information about specific capabilities of a browser in server script</b>
<ul type=disc>
<li>
Create an instance of the <code>BrowserType</code> object, and then query its properties.</li>
</ul>
<p>
For example, you can determine whether a browser supports frames, or whether it supports VBScript. The following example uses the <code>BrowserType</code> object component to display the current browser's capabilities.</p>
<pre><code>&lt;% Set bc = Server.CreateObject("MSWC.BrowserType") %&gt;
Browser: &lt;%= bc.browser %&gt;&lt;BR&gt;
Version: &lt;%= bc.version %&gt;&lt;BR&gt;
Supports frames?
   &lt;% If (bc.frames = "true") then %&gt;
      Yes&lt;BR&gt;
   &lt;% Else %&gt;
      No&lt;BR&gt;
   &lt;% End If %&gt;
Supports tables? 
   &lt;% If (bc.tables = "true") then %&gt;
      Yes&lt;BR&gt;
   &lt;% Else %&gt;
      No&lt;BR&gt;
   &lt;% End If %&gt;
Supports background sounds?
&lt;% If (bc.BackgroundSounds = "true") then %&gt;
      Yes&lt;BR&gt;
   &lt;% Else %&gt;
      No&lt;BR&gt;
   &lt;%   End If %&gt;
Supports VBScript?
   &lt;% If (bc.vbscript = "true") then %&gt;
      Yes&lt;BR&gt;
   &lt;% Else %&gt;
      No&lt;BR&gt;
   &lt;%   End If %&gt;
Supports JavaScript?
   &lt;% If (bc.javascript = "true") then %&gt;
      Yes&lt;BR&gt;
   &lt;% Else %&gt;
      No&lt;BR&gt;
   &lt;%   End If %&gt;
</code></pre>
<p>
Information about specific browser types is maintained on the server in the Browscap.ini file. The content of the Browscap.ini file determines what properties are available to the BrowserType object. For more information, see "<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_browscap.ini_file">
</object><a href=JavaScript:alink_2.Click()>Browscap.ini File</a>" in the Active Server Pages documentation.</p>
<h2>Creating Browser-Independent Scripts</h2>
<p>
Unless you know what types of browsers your users will be using, you should anticipate a wide variety of browsers and create scripts that run on as many browsers as possible.</p>
<p class=label>
<b>To make your scripts browser-independent</b>
<ul type=disc>
<li>
Avoid using features, such as specific objects, that are available on only certain browsers.<p class=tl>
–or–</P></li>
<li>
Allow users to specify what content they want to see.<p class=tl>
–or–</P></li>
<li>
Test for specific browser capabilities and use branches around sections of script that a specific browser might not support.</li>
</ul>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;A simple way to target specific browsers is to create two (or more) versions of your Web pages. Based on querying the user's browser (or by asking the user explicitly), you can provide separate pathways through your application, with each pathway containing pages compatible with the user's browser.</p>
<h3>Avoiding Browser-Specific Features</h3>
<p>
Specific browsers make different object models available, although there is often overlap in the object models between browsers. For example, Microsoft<sup>®</sup> Internet Explorer 4.0 supports Dynamic HTML (DHTML), which allows you to add animation and text effects to your Web pages. However, DHTML features are not necessarily available in all browsers, so if you use these features, you must ensure that users with different browsers don't try to view pages with DHTML pages.</p>
<p>
For details about what objects you can use with specific browsers, see the documentation for your browser. For information about the Microsoft Internet Explorer 4.0 object model, see <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_dynamic_html">
</object><a href=JavaScript:alink_3.Click()>Dynamic HTML</a>.</p>
<h3>Allowing Users to Specify Content</h3>
<p>
You can ascertain the capabilities of a user's browser in your script, but you cannot determine other factors, such as modem speed, that can affect a user's experience with your Web site. Allowing users to specify the type of content they want to receive has the advantage of putting control in the users' hands.</p>
<p class=label>
<b>To allow users to specify content</b>
<ol>
<li>
Use a form or dynamic link to query the user's preferences. For details, see <a href="vihowgatheringinformationusingforms.htm">Gathering Information Using Forms</a> and <a href="vihowsharingdynamicinformation.htm">Sharing Dynamic Information</a>.<br><br></li>
<li>
Store the preferences in a server session variable or cookie. For more information, see <a href="vihowsharingdynamicinformation.htm">Sharing Dynamic Information</a>.<br><br></li>
<li>
Use branches to display or include user-specific information. For more information, see <a href="vihowwritingreusablescript.htm">Writing Reusable Script</a>.</li>
</ol>
<p>
For example, the following two links allow a user to specify a display preference.</p>
<pre><code>&lt;A HREF="setpref.asp?type=basic"&gt;Basic Display&lt;A&gt;
&lt;A HREF="setpref.asp?type=rich"&gt;Rich Display&lt;A&gt;
</code></pre>
<p>
The script in Setpref.asp sets a Session object variable to the store the user's preference:</p>
<pre><code>&lt;% Session("type") = Request("type")
Response.Redirect "home.asp" %&gt;
</code></pre>
<p>
Script in your pages can check the setting of the Session object variable to determine how to display your content:</p>
<pre><code>&lt;% If Session("type") = "rich" Then %&gt;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Display Frames, Tables, and Images.
&lt;% Else %&gt;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Display text only
&lt;% End If %&gt;
</code></pre>
<h3>Testing for Browser Capabilities</h3>
<p>
You can also use logic within a script to make specific features available. For example, the following script tests whether a browser supports JavaScript. If so, it inserts a small script that jumps to the home page. Otherwise, it inserts HTML text that displays a jump for the user to click.</p>
<pre><code>&lt;% Set bc = Server.CreateObject("MSWC.BrowserType") %&gt;
&lt;% If bc.JavaScript = true then %&gt;
   &lt;SCRIPT LANGUAGE="JavaScript"&gt;
      top.location.href = "home.asp"
   &lt;/SCRIPT&gt;
&lt;%Else%&gt;
   Click &lt;A HREF="home.asp"&gt;here&lt;/A&gt; to return to the home page.   
&lt;%End If%&gt;
</code></pre>
<p>
You can combine a test of the browser with a server #INCLUDE directive to display entirely different pages to the user. The following script tests the browser. If the browser is compatible with Microsoft Internet Explorer 3.0 or higher, it includes a page with various color options. Otherwise, it includes a more generic page.</p>
<pre><code>&lt;% browser = Request.ServerVariables("HTTP_USER_AGENT")%&gt;
&lt;%If browser = "Mozilla/2.0 (compatible; MSIE 3.0B; Windows NT)" Then%&gt;
 &nbsp;&nbsp; &lt;!--#INCLUDE FILE="/myapp/ColoredTable.asp"--&gt;
&lt;%Else%&gt;
 &nbsp;&nbsp; &lt;!--#INCLUDE FILE="/myapp/PlainTable.asp"--&gt;
&lt;%End If%&gt;
</code></pre>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Debugging a Global.asa File</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="vihowdebuggingglobal.asafile"></a>Debugging a Global.asa File</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vihowDebuggingGlobal.asaFile_C;vihowDebuggingGlobal.asaFileC">
</object></p>
<p>
Debugging a <a href="vimsgglobal.asafile.htm">Global.asa</a> file differs from debugging .asp files in these ways:
<ul type=disc>
<li>
The Global.asa file cannot be a start page. To debug the Global.asa, you must request an ASP page. When the ASP page is requested, the server processes the Global.asa page.<br><br></li>
<li>
Procedures in a Global.asa file are event-driven, unlike inline script in .asp files.<br><br></li>
<li>
Procedures in a Global.asa file usually run only once per application or once per session:<ul type=disc>
<li>
The Application_OnStart procedure executes the first time that any page in an ASP-based application is accessed.<br><br></li>
<li>
The Application_OnEnd procedure executes only when the application is shut down.<br><br></li>
<li>
The Session_OnStart procedure executes only once per user session.<br><br></li>
<li>
The Session_OnEnd procedure executes only when a user’s session times out or when a script explicitly calls the Session object’s Abandon method.</li>
</ul>
</li>
</ul>
<h2>Enabling Debugging in the Global.asa File</h2>
<p>
Before you can debug script in the Global.asa file, you must enable debugging for ASP pages. You can manually enable debugging for your ASP application as described under "Enabling ASP Debugging on the Server" in the <a href="vicontroubleshooting.htm">Troubleshooting</a> topic. Alternatively, Visual InterDev can automatically enable debugging on the server as needed.</p>
<p class=label>
<b>To automatically enable script debugging in ASP pages</b>
<ol>
<li>
In the Project Explorer, right-click the project and choose <b>Properties</b> to display the <b>Property Pages</b> dialog box.<br><br></li>
<li>
Choose the <b>Launch</b> tab.<br><br></li>
<li>
Under <b>Server script</b>, make sure <b>Automatically enable ASP server-side debugging on launch</b> is checked.</li>
</ol>
<p>
When this option is set, each time you start a debugging session Visual InterDev checks that the server is configured for debugging. This includes:
<ul type=disc>
<li>
Setting the Microsoft<sup>®</sup> Internet Information Server (IIS) application to run in its own memory space (in COM terms, it runs "out of process").<br><br></li>
<li>
Enabling the IIS application's debugging options.<br><br></li>
<li>
Setting up a Microsoft<sup>®</sup> Transaction Server (MTS) package to allow you to attach the debugger to the Web application. The package's identify is set when you first start the debugging session by asking you to provide your name and password.<p class=atl>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>You can perform the first two steps manually on the server. For details, see "Enabling ASP Debugging on the Server" in the <a href="vicontroubleshooting.htm">Troubleshooting</a> topic.</p></li>
</ul>
<p>
When you quit your debugging session, Visual InterDev restores the server debugging settings and out-of-process setting to their previous values.</p>
<h2>Debugging Scripts in the Global.asa File</h2>
<p>
To debug the Global.asa file, you set up a debugger call from script in the file, and then start an ASP application.</p>
<p class=label>
<b>To call the debugger from the Global.asa file</b>
<ol>
<li>
Open the Global.asa file in the editor, and then set a breakpoint in a script.<p class=tl>
–or–</P><p class=tl>
Include a statement that starts the debugger explicitly, such as <code>Stop</code> in VBScript or <code>debugger</code> in JavaScript. Place the statement at the beginning of the procedure, before any statements that you will want to step through.</P></li>
<li>
Request an ASP page from the current project in the browser. This causes the IIS to run the Global.asa file.</li>
</ol>
<h2>Debugging the Global.asa File in Response to an Error</h2>
<p>
If there is an error in a Global.asa file (either a syntax error or run-time error), the server stops the procedure containing the error. If debugging is enabled for that ASP application, the server prompts you to start the debugger and displays an error message. If debugging is not enabled for the ASP application, an error message is sent to the client browser. In either case, the procedure containing the error stops.</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>If a debugger is installed on the server computer, the server does not pass error information through to the client. Instead, it displays an error message on the server computer's monitor. For more information, see "Just-In-Time Debugging of Server Pages" in the <a href="vicontroubleshooting.htm">Troubleshooting</a> topic.</p>
<p>
You can launch the debugger in response to an error or debugger statement only if just-in-time debugging is enabled.</p>
<p class=label>
<b>To enable just-in-time debugging</b>
<ol>
<li>
From the <b>Tools</b> menu, choose <b>Options</b>.<br><br></li>
<li>
In the <b>Options</b> dialog box, choose <b>Debugger</b>.<br><br></li>
<li>
Under <b>Script</b>, check <b>Just-In-Time debugging</b>.</li>
</ol>
<p class=label>
<b>To debug Global.asa script in response to an error</b>
<ol>
<li>
When an error message appears prompting you to start the debugger, choose <b>Yes</b>.<br><br></li>
<li>
A new instance of Visual InterDev is launched and you are prompted to open a project. If Visual InterDev is already running, a second instance is launched.<br><br></li>
<li>
Open the project containing the Global.asa file to debug. If the project is already open in another instance of Visual InterDev, you cannot open it again, and Visual InterDev creates a new solution and project instead.<p class=tl>
The Global.asa file is loaded into the editor. If necessary, get a working copy of the page. If the project was already open, the Global.asa file is loaded as read-only file in the new project.</P></li>
</ol>
<p>
If server debugging is not enabled for the application, errors are displayed in the browser as text in the page. In that case, open the project containing the page in Visual InterDev and start the debugger there, as described above.</p>
<h2>Restarting the Global.asa File</h2>
<p>
You cannot stop and restart the script by refreshing a Global.asa file. To rerun Application_OnStart or Session_OnStart procedures, you must refresh the file or trigger the events again or otherwise restart the application.</p>
<p class=label>
<b>To rerun all procedures in the Global.asa file</b>
<ul type=disc>
<li>
In the editor, change the Global.asa file, and then deploy it to the server.<p class=tl>
–or–</P></li>
<li>
Stop and restart the Web server.<p class=tl>
This restarts the application and session, which runs the procedures in the Global.asa file again.</P></li>
</ul>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Extending the Scripting Object Model Across Pages</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="vihowextendingscriptingobjectmodelacrosspages"></a>Extending the Scripting Object Model Across Pages</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vihowExtendingScriptingObjectModelAcrossPages_C">
</object></p>
<p>
Using design-time controls and the scripting object model allows you to create and script a Web page using standard object-oriented techniques. However, Web applications differ from other development environments in an essential way: they are usually constructed out of a collection of pages. </p>
<p>
In a simple application, you can simply add links to other pages. When the user clicks a link, the browser follows the link, reads the page, and displays it. More complex applications, however, use more sophisticated linking techniques. For example, your application might require links that:
<ul type=disc>
<li>
Jump conditionally to different pages.<br><br></li>
<li>
Process a specific script on another page when the user jumps to it.<br><br></li>
<li>
Navigate to pages that provide server processing (such as database lookups) for your applications.</li>
</ul>
<p>
The scripting object model extends across pages to help you design applications with these types of requirements. You can use the scripting object model to designate pages as <i>page objects</i>.</p>
<p>
A page object is an ASP page that contains server script that you use in your application. The procedures — functions or subroutines — on the page can become methods for the page object.</p>
<p>
For example, you might have an ASP page in your application that you call from a form to display a list of employees. Procedures on the target page construct different queries for displaying the list — in different order, using different fields, or with different selection criteria. When you convert the page to a page object, you can specify each of these procedures as a method. You can then invoke the methods from other pages in your application.</p>
<p>
Page objects also allow you to create properties, which maintain state over multiple round trips to the server.</p>
<p>
Page objects give you:
<ul type=disc>
<li>
<b>Simplified navigation.</b> You can navigate to other pages in your application using standard object references, without having to track the URL of the page.<br><br></li>
<li>
<b>An easy way to execute specific script on another page.</b> By exporting procedures as methods, you can jump directly to a specific procedure on another page without writing script to parse hidden form elements or query strings.<br><br></li>
<li>
<b>A means of maintaining state information.</b> You can define properties on a page object that maintain their value for the duration that you specify — page lifetime, session, or application.<br><br></li>
<li>
<b>A way to execute server script from a page displayed in the browser.</b> For more details, see <a href="vihowexecutingserverscriptremotely.htm">Executing Server Script Remotely</a>.</li>
</ul>
<p>
The basic steps in creating a page object are these:
<ul type=disc>
<li>
<a href="#vimscspecifyingpageasobject">Specify a page as a page object</a>.<br><br></li>
<li>
<a href="#vimscexportingproceduresasmethods">Export procedures on the page as methods</a>.<br><br></li>
<li>
<a href="#vimscdefiningpropertiesforpageobject">Define the properties</a> that the page object will support.<br><br></li>
<li>
<a href="#vimscreferencingotherpages">Reference any other page objects</a> that you will use in your scripts, on that page and in other pages.</li>
</ul>
<h2><a name="vimscspecifyingpageasobject"></a>Specifying a Page as an Object</h2>
<p>
You can specify any ASP page as a page object. To do so, you use the <a href="victlpageobjectcontrol.htm">PageObject design-time control</a>.</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>Page objects are implemented using script stored in the Script Library. Do not alter the contents of the library, or page objects might not work properly.</p>
<p class=label>
<b>To specify a page as an object</b>
<ol>
<li>
Create or open an .asp file in the HTML editor.<br><br></li>
<li>
Enable the scripting object model for the page. For details, see <a href="viconthescriptingobjectmodel.htm">The Scripting Object Model</a>.<p class=tl>
Make sure that you have set options to view controls graphically. From the <b>View</b> menu, choose <b>View Controls Graphically</b>. To set this option as the default, use the <b>HTML</b> node of the <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="csdlgHTMLEditorOptions(HTMLOptionsDialogBox)">
</object><a href=JavaScript:alink_2.Click()>Options</a> dialog box.</P></li>
<li>
From the <b>Design-Time Controls</b> tab of the Toolbox, drag a PageObject control onto your page. You can drag the control anywhere on the page, although it must be inside the framework of the scripting object model blocks.<br><br></li>
<li>
In the <b>Name</b> box on the PageObject control, type a name for the page object. This will be the name that you can use to reference the object in script.</li>
</ol>
<p>
The name you give your page object is registered in your Microsoft<sup>®</sup> Visual InterDev™ project so that it is available to any other page. Even if you move the page to another location, its page object name remains the same.</p>
<h2><a name="vimscexportingproceduresasmethods"></a>Exporting Procedures as Methods</h2>
<p>
One of the primary benefits of using page objects is that you can expose your application's tasks as methods that you can easily call from script. Doing so greatly simplifies the organization of your code and eliminates the time and effort required to transfer variables between pages, dispatch to the correct routine, and so on.</p>
<p>
Page objects support two types of methods:
<ul type=disc>
<li>
<i>Navigate methods</i> are called by a client page that wants to jump to the ASP page and run a procedure there, and then perhaps jump somewhere else. A common use for navigate methods is to process a form.<br><br></li>
<li>
<i>Execute methods</i> are called by a client page that wants to use remote scripting to execute a script function. A common use for execute methods is to validate a user-entered value by looking it up in a database, or to perform a database query to populate a control on a page.</li>
</ul>
<p>
All page objects have a default method called <code>show(&nbsp;)</code>, which displays the contents of the page. This is the method that is called after any other methods on the page have been processed.</p>
<p class=label>
<b>To create a method for a page object</b>
<ol>
<li>
If the page does not already have one, add a PageObject control to the page and give the PageObject control a name.<br><br></li>
<li>
Write the procedures (functions or subroutines) in a script block that has the attribute RUNAT=SERVER. The procedure can take any number of parameters, but all are passed by value.<p class=tl>
For example, the following function creates a query string:</P><pre><code>&lt;SCRIPT LANGUAGE="VBScript" RUNAT="Server"&gt;
Sub ListEmployees(sortOrder)
 &nbsp; sqlText = "SELECT lname, fname FROM Employees"
 &nbsp; sqlText = sqlText &amp; " ORDER BY " &amp; sortOrder
 &nbsp; DoQuery(sqlText)
End sub
&lt;/SCRIPT&gt;
</code></pre>
<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Parameters are converted to strings when you call a page object method so that they can be successfully passed across the Web. In your page object scripts, you should convert parameter values to the appropriate data type as required.</p></li>
<li>
Right-click the PageObject control, and then choose <b>Properties</b> to display the <b>Property Pages</b> dialog box.<br><br></li>
<li>
Determine whether the method will be available via navigation or execution. Then in the list under either <b>Navigate methods</b> or <b>Execute methods</b>, find the first blank line. From the drop-down list, select the procedure that you want to expose as a method.</li>
</ol>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;It is possible to expose the same method as both a navigate and execute method. However, the method's underlying procedure must be written to accommodate both types of calls.</p>
<h2><a name="vimscdefiningpropertiesforpageobject"></a>Defining Properties for a Page Object</h2>
<p>
Page objects allow you to expose properties, which are essentially global variables. You can scope a property to three levels: page, session, and application.
<ul type=disc>
<li>
<b>Page-scope properties</b> make a property available to scripts anywhere on the page until you navigate to another page.<br><br></li>
<li>
<b>Session-scope properties</b> are available to any page you navigate to in your project. Session values use IIS session variables to store values.<br><br></li>
<li>
<b>Application-scope properties</b> are available to any user of your application. Application values use IIS application variables to store values.</li>
</ul>
<p>
You also specify whether properties are available in client scripts, server scripts, or both. If you specify a property as a client property, you can further specify that it be either read/write or just read-only. Server properties are always read/write.</p>
<p class=label>
<b>To create a property for a page object</b>
<ol>
<li>
If the page does not already have one, add a PageObject control to the page and give the PageObject control a name.<br><br></li>
<li>
Right-click the PageObject control, choose <b>Properties</b> to display the <b>Property Pages</b> dialog box, and then choose the <b>Properties</b> tab.<br><br></li>
<li>
In the <b>Name</b> column, find the first blank line, and then enter the name of the property you want to create.<br><br></li>
<li>
Select the characteristics for the new property from the remaining columns:<ul type=disc>
<li>
<b>Lifetime</b>&nbsp;&nbsp;&nbsp;Select whether the property will be available until the page is exited, or as a session or application value.<br><br></li>
<li>
<b>Client</b>&nbsp;&nbsp;&nbsp;Select whether the property will be read-only or read/write in client script. If you choose <b>None</b>, the property will not be available in client script.<br><br></li>
<li>
<b>Server&nbsp;&nbsp;&nbsp;</b>Select <b>Read/Write</b> to make the property available in server script, or <b>None</b> if it will not be available.</li>
</ul>
</li>
</ol>
<p>
To make properties accessible to your scripts, page objects implement get(&nbsp;) and set(&nbsp;) methods for them. For example, if you define a property called Color, you can read its value using the method getColor(&nbsp;) and set it using the method setColor(&nbsp;). For more details, see "Accessing Page Object Properties" below.</p>
<h2><a name="vimscreferencingotherpages"></a>Referencing Other Pages</h2>
<p>
You can call methods and use properties on the current page using the default page object name of <code>thisPage</code>. However, if you want to access the methods or properties of another page object, you must first create a reference to that page on the current page.</p>
<p class=label>
<b>To reference another page object</b>
<ol>
<li>
If the page does not already have one, add a PageObject control to the page and give the PageObject control a name. If your scripting target is Server, the scripting object model must be enabled for the page.<br><br></li>
<li>
Right-click the PageObject control, choose <b>Properties</b> to display the <b>Property Pages</b> dialog box, and then choose the <b>References</b> tab.<br><br></li>
<li>
In the <b>Name</b> column, click the three-dot button to display the <b>Create URL</b> dialog box.<br><br></li>
<li>
Select the .asp file that you want to reference as a page object. Enter options for how the page object should be called, and then click <b>OK</b>. For assistance with the options, press F1 in the <b>Create URL</b> dialog box.</li>
</ol>
<h2>Calling Page Object Methods</h2>
<p>
You can call methods on page objects in two ways: by navigation and by execution. You call a method by navigation when you are finished with one page and want to jump to another page and process script there. This is similar in HTML scripting to navigating to a URL: a one-way jump, except that using a page object saves the current page's state before navigating. For example, you might collect query parameters from the user on one page, and then jump to another page where you actually create and execute the query.</p>
<p>
In contrast, calling methods by execution is similar to a familiar object-oriented method call — you call script somewhere else that performs a task and then returns. However, methods called by execution run asynchronously. The page that calls the method remains in the browser and the user can continue to work with it. </p>
<p>
You can call methods by execution only if you are running client script and the method to be called is on a server page. For example, while the user is filling in the form, a client script might call a method on a server page to perform a database lookup.</p>
<p class=label>
<b>To call a page object method</b>
<ol>
<li>
Create a reference on the current page to the page object you want to use. For details, see <a href="#vimscreferencingotherpages">Referencing Other Pages</a> above.<br><br></li>
<li>
In your script, call the page object method using one of these types of calls:<pre><code><i>pageObject</i>.navigate.<i>methodName</i>(<i>parameters</i>)
<i>pageObject</i>.execute.<i>methodName</i>(<i>parameters</i>)
</code></pre>
<p class=tl>
Where:</P><ul type=disc>
<li>
<i>pageObject</i> is a reference you created earlier to a page object.<br><br></li>
<li>
<code>navigate</code> and <code>execute</code> are child objects of the page object that determine how the method call will be processed.<br><br></li>
<li>
<i>methodName</i> is the name of the method on pageObject that you want to call.<br><br></li>
<li>
<i>parameters</i> is a list of parameters you are passing to the method. All parameters are passed by value.</li>
</ul>
<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Parameters are converted to strings when you call a page object method so that they can be successfully passed across the Web. In your page object scripts, you should convert parameter values to the appropriate data type as required.</p></li>
</ol>
<p>
The following script shows some simple form processing. When the user clicks a List Now button on the client page, the <code>onclick</code> handler for the button extracts the values of a list box on the page, and then calls a method on the page object poListEmployees for processing. In this instance, the user information is passed as a parameter to the page object's CreateList method.</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
Sub btnListNow_onclick()
 &nbsp; department = lstDept.gettext()
 &nbsp; poListEmployees.navigate.CreateList(department)
End Sub
&lt;/SCRIPT&gt;
</code></pre>
<h2>Accessing Page Object Properties</h2>
<p>
When you define a property for a page object, the scripting object model creates a get method and a set method that you use to access the property. For example, if you have defined a property called UserName, you can read the value of the property using the method <code>getUserName</code>, and set it using <code>setUserName</code>, as shown in the following example:</p>
<pre><code>newUser = PageObj1.Navigate.getUserName()
PageObj1.Navigate.setUserName(txtUserName.Value)
</code></pre>
<p>
When working with properties, you need to be aware of their lifetime. If you have defined the property's lifetime as "page," for example, you can get and set its value only until you leave the page and display another one. (Calling the same page again to execute a method retains property values scoped to the page.) However, after you navigate to another page, the property is reset.</p>
</BODY>
</HTML>

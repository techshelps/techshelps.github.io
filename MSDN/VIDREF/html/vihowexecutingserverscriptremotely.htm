<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Executing Server Script Remotely</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="vihowexecutingserverscriptremotely"></a>Executing Server Script Remotely</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vihowExecutingServerScriptRemotely_C">
</object></p>
<p>
If you have created ASP pages as page objects, you can call methods on those pages remotely — that is, you can execute a method on an ASP page while a client page is loaded in a browser and without navigating away from the client page. </p>
<p>
Because you do not leave the client page, its values are preserved and client scripts can continue processing without complex strategies to save values between pages. In the meantime, the server script can execute server-appropriate procedures, such as database lookups. When a procedure is finished, the server can send just the results to the client, rather than reformatting and resending an entire page. This reduces server load.</p>
<p>
You can execute server script two ways:
<ul type=disc>
<li>
<b>Synchronously</b>&nbsp;&nbsp;&nbsp;Your script calls the remote procedure and waits for it to return. This is useful if you need the results of the remote procedure before you proceed.<br><br></li>
<li>
<b>Asynchronously</b>&nbsp;&nbsp;&nbsp;Your script makes the call to a remote script, and then continues processing. The page remains available for users to work with. Asynchronous calls are useful in Web applications because a remote procedure can take a long time while the request goes to the server and back.</li>
</ul>
<h2>Making Remote Procedure Calls Synchronously</h2>
<p>
Remote scripting uses the technology of ASP page objects. The page to be called is an ASP page object on which you have exposed methods. The client page, which can be either an .htm file or .asp file, contains client scripts that call the page object's methods.</p>
<p>
To make remote scripting calls from a client page to a server page, you use the page object's <code>execute</code> child object. The <code>execute</code> child object does not return a single value from the method you call. Instead, it returns a <i>call object</i>, which is an object containing return and status information about the called procedure. </p>
<p>
The most commonly used property is the call object's <code>return_value</code> property, which contains the single value calculated or looked up by the remote procedure. Other call object properties allow you to get more information about the state of the remote procedure call, as discussed later in this topic.</p>
<p class=label>
<b>To make a synchronous remote procedure call</b>
<ol>
<li>
Create a reference on the current page to the page object you want to use. For details, see "Referencing Other Pages" in <a href="vihowextendingscriptingobjectmodelacrosspages.htm">Extending the Scripting Object Model Across Pages</a>.<br><br></li>
<li>
In your client script, call the procedure using syntax such as this:<pre><code><i>pageObject</i>.execute.<i>methodName</i>
</code></pre>
</li>
</ol>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Remote scripting is implemented using script stored in the Script Library. Do not alter the contents of the library, or remote scripting might not work properly.</p>
<p>
For example, the following function is called in client script to validate a credit card. To perform the validation, it calls the method <code>validate</code> in the page object <code>poSignIn</code>. The value returned by the remote procedure is available in the <code>return_value</code> property of the call object <code>valid</code>.</p>
<pre><code>&lt;SCRIPT LANGUAGE="JAVASCRIPT"&gt;
function checkCreditCard(){
 &nbsp; retObj = poSignIn.execute.validate(txtCC.value);
 &nbsp; if (retObj.return_value == "OK"){
 &nbsp;&nbsp;&nbsp;&nbsp; alert("Accepted");
 &nbsp; }
 &nbsp; else{
 &nbsp;&nbsp;&nbsp;&nbsp; alert("Rejected");
 &nbsp; }
}
&lt;/SCRIPT&gt;
</code></pre>
<h2>Calling Methods Asynchronously</h2>
<p>
When you call a remote scripting procedure asynchronously, you must include extra processing in the calling script to determine when the remote call has finished. To do this, you specify a <i>callback procedure</i>, which is a function that is called when the remote procedure has finished.</p>
<p>
To use a callback function, you create an additional function in the client page to process the results of the remote script. You can optionally also create an error handling process in client script that can be called if the remote script encounters an error condition.</p>
<p class=label>
<b>To make an asynchronous remote procedure call</b>
<ul type=disc>
<li>
When calling a method using the <code>execute </code>object, include the name of a callback function using syntax such as this:<pre><code>co = PageObject.execute.Method(<i>p1, p2</i>, <i>callBack</i>)
</code></pre>
<p class=tl>
where:</P><p class=tl>
<i>co</i>&nbsp;&nbsp;&nbsp;A call object.</P><p class=tl>
<i>p1, p2&nbsp;&nbsp;&nbsp;</i>Any parameters required by the called procedure. You can pass as many parameters as required.</P><p class=tl>
<i>callBack&nbsp;&nbsp;&nbsp;</i>The name of a method that will be called when the remote procedure has finished. When the remote method has finished, it jumps immediately to the process you have specified.</P></li>
</ul>
<p>
For example, the following illustrates a button whose onclick attribute specifies that it should call a remote procedure for validating a credit card. The call to the remote procedure specifies the function <code>displayResults</code> as its callback.</p>
<pre><code>&lt;BUTTON 
 &nbsp; ID="btnValidate"
 &nbsp; TYPE="button"
 &nbsp; LANGUAGE="JavaScript"
 &nbsp; ONCLICK="poSignIn.execute.validate(txtCC.value, displayResults)"&gt;
 &nbsp; "Validate Credit Card"
&lt;/BUTTON&gt;
</code></pre>
<p>
The <code>displayResults</code> function accepts the remote procedure call object as a parameter and tests it to determine whether the credit card was valid.</p>
<pre><code>&lt;SCRIPT LANGUAGE="JavaScript"&gt;
function displayResults(retObj)
{
 &nbsp; if (retObj.return_value == "OK"){
 &nbsp;&nbsp;&nbsp;&nbsp; alert ("Your order has been accepted.");
 &nbsp; }
 &nbsp; else{
 &nbsp;&nbsp;&nbsp;&nbsp; alert("Invalid credit card number, please re-enter.");
 &nbsp; }
}
&lt;/SCRIPT&gt;
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can also use remote scripting calls outside the scope of the page object's execute method. For details, and for more information about remote scripting, see the Microsoft Scripting Web site <A HREF="http://www.microsoft.com/scripting">http://www.microsoft.com/scripting</A>.</p>
</BODY>
</HTML>

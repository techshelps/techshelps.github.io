<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Scripts in Web Applications</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="viconscriptsinwebapplications"></a>Scripts in Web Applications</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="viconScriptsInWebApplications_C;viconTheProgrammingModelC">
</object>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="viconScriptsInWebApplications_T;viconTheProgrammingModelT">
</object></p>
<p>
To display text, images, or links in a page, you add text and format it with HTML tags. However, to control the way a page behaves, you create script, or programs that you embed in a Web page to perform specific functions, such as:
<ul type=disc>
<li>
Controlling what happens when a user clicks a button, enters text, or submits a form.<br><br></li>
<li>
Navigating to a specific page based on a condition such as user preference.<br><br></li>
<li>
Collecting and storing user information in order to customize Web applications dynamically.<br><br></li>
<li>
Querying a database and displaying results.</li>
</ul>
<p>
You can create script in different ways:
<ul type=disc>
<li>
Use design-time controls, which allows you to set property values and enter values in dialog boxes, and then generates script for you.<br><br></li>
<li>
Write your script in <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="csdlgSourceViewHTMLEditor">
</object><a href=JavaScript:alink_3.Click()>Source view</a> of the HTML editor.</li>
</ul>
<p>
Microsoft<sup>®</sup> Visual InterDev™ supports a complete scripting object model that allows you to use standard object-oriented techniques for creating Web pages. For details, see <a href="viconthescriptingobjectmodel.htm">The Scripting Object Model</a>.</p>
<h2><a name="vimschowscriptingworks"></a>How Scripting Works</h2>
<p>
The script's source code appears in the page, as shown in this example.</p>
<p class=label>
<b>Script source code</b></p>
<p>
<img src="vi53ud2.gif" border=0></p>
<p>
When the page is requested, the script is read along with all the other text on the page. The server or browser reads the scripts and checks for errors, and then runs the script.</p>
<p>
Because scripts are simply blocks of text, you can write a script in one page, and then include it in multiple additional pages. For details, see <a href="vihowwritingreusablescript.htm">Writing Reusable Script</a>.</p>
<h2><a name="vimscscriptinglanguages"></a>Scripting Languages</h2>
<p>
You can write scripts in any scripting language that you are comfortable with. Common scripting languages include Microsoft<sup>®</sup> Visual Basic<sup>®</sup>, Scripting Edition (VBScript) and ECMAScript, a standard scripting language. Popular implementations of ECMAScript are Microsoft JScript™ and JavaScript.</p>
<p>
Because scripting languages are interpreted, you must be sure that when the user requests a page, the user's browser (and server, if you are writing server script) can use the language in which you have scripted. For example, if you write all your scripts in VBScript, you must be sure that the user's browser can interpret VBScript. Microsoft Internet Explorer supports VBScript, but not all browsers do. For details on determining the capabilities of a browser, refer to the documentation for your browser, and see <a href="vihowcreatingportablescript.htm">Creating Portable Script</a>.</p>
<p>
You can use different scripting languages on the same page if necessary. This might be the case, for example, if you are adding your own scripts to scripts generated by a design-time control. When you use design-time controls, you specify a target scripting platform (client or server), which determines by default what language to script in. For details, see <a href="vihowcreatingformswithdesigntimecontrols.htm">Creating Forms with Design-Time Controls</a>.</p>
<p>
If you are scripting outside of design-time controls, you often work in only one language, so you can specify a default language for each new page that you create, and if you need to, for individual scripts. For details, see <a href="vihowchoosingscriptinglanguage.htm">Choosing a Scripting Language</a>.</p>

<h2><a name="vimscclientserverscripts"></a>Client and Server Scripts</h2>
<p>
If your server is Microsoft<sup>®</sup> Internet Information Server (IIS), you can create .asp files that contain both <i>client</i> and <i>server scripts</i>. Both types of scripts can appear in the same page. </p>
<p>
Client scripts are part of a page, and are sent to and run by the browser when a user requests the page. </p>
<p>
Server scripts are also part of a page, but are not sent to the browser. Instead, they are run by IIS after the page is requested but before it is passed to the browser. When the page is sent to the browser, the server has already run the server script and removed it from the page.</p>
<p class=label>
<b>Client and server script execution</b></p>
<p>
<img src="vi53ud1.gif" border=0></p>
<p>
The ability to specify that a script runs on the client or on the server is an important feature of Web scripting, which allows you to specify the right run-time environment for the task you want to perform. For example, the following are tasks typically performed using client scripts:
<ul type=disc>
<li>
Change the text or appearance of a page at the time it is loaded in the browser or in response to an event such as a button click.<br><br></li>
<li>
Perform validation on data entered into an HTML form before it is sent to the server, such as making sure that an employee ID number contains the correct number of digits. In contrast, verifying data against a database is typically a server-side task.<br><br></li>
<li>
Display information in response to a user event such as a button click.</li>
</ul>
<p>
In contrast, these are tasks that you would typically perform using server scripts:
<ul type=disc>
<li>
Query a database and feed the results to an HTML page. For details, see <a href="viovrviewingdata.htm">Viewing Data</a>.<br><br></li>
<li>
Redirect a user's request to a specific page based on a condition, such as password lookup. For in-depth information about using scripts to move between pages, see <a href="vihowextendingscriptingobjectmodelacrosspages.htm">Extending the Scripting Object Model Across Pages</a> and <a href="vihownavigatingconditionally.htm">Navigating Conditionally</a>.<br><br></li>
<li>
Process the information entered by a user on an HTML form. For in-depth information about how to create scripts for processing HTML forms, see <a href="vihowwritingscriptforscriptobjects.htm">Writing Script for Script Objects</a> and <a href="vihowgatheringinformationusingforms.htm">Gathering Information Using Forms</a>.</li>
</ul>
<p>
Although the tasks listed above are typical uses for client or server scripts, they are not rigid rules. For example, you can use Visual InterDev design-time controls to create server script that responds to a client event such as a button click. As another example, if your users use Microsoft<sup>®</sup> Internet Explorer 4.0 or another browser that supports Dynamic HTML (DHTML), you can write an application that accesses a database from the client browser. </p>
<p>
The decision to use client or server script therefore depends not just on the task you are accomplishing, but the environment in which your application runs, specific constraints (such as performance), and so on.</p>
<h3><a name="vimscclientscriptprocessing"></a>Client Script Processing</h3>
<p>
Client scripts are processed by a browser such as Microsoft<sup>®</sup> Internet Explorer, which calls the appropriate run-time module to execute the script. Client scripts are enclosed between &lt;SCRIPT&gt; and &lt;/SCRIPT&gt; tags. The following simple example shows a script that prints the current time on the page:</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
   Document.Write time
&lt;/SCRIPT&gt;
</code></pre>
<p>
Your page can contain as many script blocks as you need. You can put multiple functions and subroutines into a single script block, or put each in a separate script block.</p>
<p>
If your Web application might run on a browser that cannot process client scripts, you can embed the script within HTML comment tags so that nonscript-capable browsers ignore it. The following client script shows a script block in comments:</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
   Document.Write time
--&gt;
&lt;/SCRIPT&gt;
</code></pre>
<p>
Client scripts are processed at different times, depending on how they are written:
<ul type=disc>
<li>
Statements can appear in a script block but not as part of a procedure (function or subroutine). These are called <i>global</i> or <i>inline</i> scripts, and are processed in order when the browser reads the page. For example, the following shows a global script:<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
Document.Write time
--&gt;
&lt;/SCRIPT&gt;
</code></pre>
</li>
<li>
Statements can appear as part of a procedure, such as a function or subroutine. These are not executed immediately. Instead, they are parsed when the page is run and checked for syntax errors. However, they are not run until the procedure is called.<br><br></li>
<li>
Event-handling procedures are not executed immediately. Instead, they are executed when the user performs the event that triggers the script, such as clicking a button. For example, the following script illustrates an event-handling subroutine that is executed only when the user clicks the Submit button on a form:<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
Function btnTest_onclick
 &nbsp; If Len(Document.frmTest.txtName.value) &lt; 1 then
 &nbsp;&nbsp;&nbsp;&nbsp; Alert("You must enter a name!")
 &nbsp; End If
End Function
--&gt;
&lt;/SCRIPT&gt;
</code></pre>
</li>
</ul>
<p>
Scripts for event-handling procedures, subroutines, or functions can appear anywhere in a page, because they will be processed only when needed. However, it is common to put these types of scripts in the header of a page.</p>
<p>
When you write client scripts, you can access objects on the page to get their properties or write event handlers for them. The exact list of objects available for you to work with depends on the type of browser that your users will be using. For more information, see <a href="vicondocumentelements.htm">Document Elements</a> and <a href="viovrscriptingwithdesigntimecontrolsscriptobjects.htm">Scripting with Design-Time Controls and Script Objects</a>.</p>
<p>
Client scripts can directly interact with the user by posting message boxes for output and by using dialog boxes or forms for input. For example, if a user makes an error when entering information in a form, a client script can display an error message (as shown in the preceding example).</p>
<p>
For more information about displaying information, see <a href="vihowdisplayinginformationtouser.htm">Displaying Information to the User</a>. For information about using forms from both client and server scripts, see <a href="viovrscriptingwithdesigntimecontrolsscriptobjects.htm">Scripting with Design-Time Controls and Script Objects</a> and <a href="vihowgatheringinformationusingforms.htm">Gathering Information Using Forms</a>.</p>
<h3><a name="vimscserverscriptprocessing"></a>Server Script Processing</h3>
<p>
In Visual InterDev, you put server script in Active Server Pages (.asp files). The .asp extension on the file alerts IIS that the page can contain server script. When IIS reads the page, it looks for server script and processes it. After the server script in an .asp file has been processed, it is removed from the file, which is then sent to the browser (including any client script that might be in the file). The browser treats the .asp file as it does an ordinary .htm file.</p>
<p>
Server script can modify any aspect of a page before sending it to the browser. Typically this involves performing tasks and incorporating the output of the tasks into the HTML text of the page. However, server script can just as easily create client script, because client script is nothing more than additional text on the page.</p>
<p>
A special case of .asp file processing is the <a href="vimsgglobal.asafile.htm">Global.asa</a> file. This file contains scripts that respond to application-wide events: each time the ASP application is started or closed, and each time a new user starts a session. </p>
<p>
You can create server script in the Global.asa file for these events, which is useful for tasks such as storing application settings (for example, the default scripting language); initializing application-wide variables; maintaining counters; and so on. For details about creating event handlers in the Global.asa file to store global information, see <a href="vihowsharingdynamicinformation.htm">Sharing Dynamic Information</a>.</p>
<p>
When you write server script in an .asp file, you distinguish it from other text (including client script) in one of two ways:
<ul type=disc>
<li>
Within the delimiters <code>&lt;%</code> and <code>%&gt;</code>. Any text between these two tags is processed as inline server script by IIS. The &lt;% %&gt; delimiters are often used to enclose expressions that are evaluated and inserted into the HTML text of a page. For example, the following server script displays the current time on a page:<pre><code>&lt;% response.write time %&gt;
</code></pre>
</li>
<li>
In a &lt;SCRIPT&gt; tag (as with client scripts), but with the RUNAT=SERVER property, which is used to enclose stand-alone procedures such as functions and subroutines. The following example shows the RUNAT property:<pre><code>&lt;SCRIPT RUNAT=SERVER&gt;
 &nbsp; Function GetDate
 &nbsp;&nbsp;&nbsp;&nbsp; [some script lines here]
 &nbsp; End Function
&lt;/SCRIPT&gt;
</code></pre>
</li>
</ul>
<p>
In the Visual InterDev HTML editor, server script appears in yellow to distinguish it from client script. The following illustration shows a page that includes both server script (bracketed in yellow) and HTML text.</p>
<p class=label>
<b>Editing server script</b></p>
<p>
<img src="vi53ud3.gif" border=0></p>
<p>
Server script is generally not event-driven. Exceptions are the event handlers in the Global.asa file and server event handlers created by design-time controls. Instead, when the ASP page is requested, the server reads the page and processes all server script from top to bottom. The script performs whatever calculations and database access you write, and evaluates all expressions and variables. Stand-alone procedures are called as needed.</p>
<p>
Because the script is running on the server, it has access to the objects available on the server. For example, a server script running on IIS can reference the ASP Application, Session, Request, and Response objects. A server script could not, however, make use of the objects available in the browser&nbsp;— for example, a server script could not use the Internet Explorer Document or Window objects. </p>
<p>
When you write server script, you must be careful to use only objects that are available in the context of the server. For more information about objects that you can use in server scripts, see <a href="vicondocumentelements.htm">Document Elements</a> and <a href="viovrscriptingwithdesigntimecontrolsscriptobjects.htm">Scripting with Design-Time Controls and Script Objects</a>.</p>
<p>
If the server script produces some output — for example, if you want to display the value of a variable, or display some records retrieved from a database — you can place the output on the page using the Response.Write method (or using the abbreviated form, the "=" operator) in inline script. For example, the following simple page shows server script that calculates the current time and puts it into a variable. Later in the page, the value of the server script variables are integrated into some HTML text:</p>
<pre><code>&lt;%
vDate = date
vTime = time
%&gt;

&lt;HTML&gt;
&lt;BODY&gt;
When the script ran, it was <span class=cfe><b>&lt;%Response.Write vTime%&gt;</b></span> o'clock on <span class=cfe><b>&lt;%=vDate%&gt;</b></span>.
&lt;/BODY&gt;
&lt;/HTML&gt;
</code></pre>
<p>
When the page is processed, the server evaluates the expression following Response.Write or "=", and its value is placed at that point in the HTML page stream. When the page is displayed in the browser, it will look something like this:</p>
<pre><code>When the script ran, it was 10:46:30 o'clock on 12/31/97.
</code></pre>
<p>
If you look at the source of the page, it would look the same as the page output. You would not see the expressions &lt;%Response.Write vTime%&gt; or &lt;%=vDate%&gt; in the source, because those expressions would have been evaluated by the server before the page was sent to the browser. </p>
<p>
Server scripts can produce any type of output, including not just values for variables or expressions, but HTML tags and text and even client scripts.</p>
<p>
For more details about how to create server scripts, see <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="asp_iiwaaspw">
</object><a href=JavaScript:alink_4.Click()>Introducing Active Server Pages</a>.</p>
</BODY>
</HTML>

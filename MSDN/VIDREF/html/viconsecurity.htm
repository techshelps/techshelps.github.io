<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Security</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="viconsecurity"></a>Security</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="IDH_vedefSecuredSocketLayers(SSL);veconSecuringASPHTMLPages;veconSecuringCookies;veconSecuringYourWebApplication;veconSecuritySigningWithDeployment;veconSecuritySQLServer;viconSecurity_C;viconSecurityC">
</object>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="viconSecurity_T;viconSecurityT">
</object></p>
<p>
The World Wide Web and HTTP provide the largest imaginable audience for Web applications and a proportionately increased need for security. In addition, Web development teams can now span the globe. To control just how that audience and team work with Web application files and gain access to the system that supports them requires security.</p>
<p>
Security for Web applications is a complicated subject because it can be set at several levels in several different ways. The choices depend on the system and servers used and the needs of the Web application.</p>
<p>
Some of the considerations are:
<ul type=disc>
<li>
<a href="#vimsclocationsforsettingsecurity">Locations for Setting Security</a><br><br></li>
<li>
<a href="#vimscuserauthentication">User Authentication</a><br><br></li>
<li>
<a href="#vimscpermittingaccesstowebapplicationsfoldersfiles">Permitting Access to Web Applications, Folders, and Files</a><br><br></li>
<li>
<a href="#vimscguidelinesfordesign-timesecurity">Guidelines for Design-Time Security</a><br><br></li>
<li>
<a href="#vimscguidelinesforrun-timesecurity">Guidelines for Run-Time Security</a><br><br></li>
<li>
<a href="#vimscsecuringhttptransmissionsssl">Securing HTTP Transmissions (SSL)</a><br><br></li>
<li>
<a href="#vimscadministrationmaintenanceconsiderations">Administration and Maintenance Considerations</a></li>
</ul>
<p>
For more information about security, see <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="msdn_authentication">
</object><a href=JavaScript:alink_3.Click()>Authentication and Security for Internet Developers</a> in the MSDN Technical Articles section or see the Microsoft Security Advisor Web site at <A Href="http://www.microsoft.com/security">http://www.microsoft.com/security</a>.</p>
<h2><a name="vimsclocationsforsettingsecurity"></a>Locations for Setting Security</h2>
<p>
You can set security options in several locations depending on your system and the assumptions you can make about your visitors. For example, basic security for an intranet can be handled and maintained in parallel with the security for the network itself. For an Internet Web application, you can add security through the pages provided to the Web browser using the Web application.</p>
<p>
The following table shows a summary of many options you have for security locations. As you can see, you may need to use several interfaces to get the results you want. This table assumes you are using Microsoft<sup>®</sup> Windows NT<sup>®</sup> with Microsoft<sup>®</sup> Internet Information Server for your Web services and Microsoft<sup>®</sup> SQL Server<sup>®</sup> for your database server.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=32%><b>Location</b></td>
<td class=label width=68%><b>Example interface</b></td>
</tr>
<tr valign=top>
<td width=32%>Operating system</td>
<td width=68%>User accounts specified in Windows NT<sup>(1)</sup> User Manager</td>
</tr>
<tr valign=top>
<td width=32%>Folder</td>
<td width=68%>Sharing properties set in the Windows NT Explorer</td>
</tr>
<tr valign=top>
<td width=32%>Web server</td>
<td width=68%>User accounts and server properties set in Internet Information Server Administrator</td>
</tr>
<tr valign=top>
<td width=32%>Virtual root</td>
<td width=68%>Internet Information Server Administrator</td>
</tr>
<tr valign=top>
<td width=32%>Database</td>
<td width=68%>Permissions specified in SQL Server, Enterprise Manager</td>
</tr>
<tr valign=top>
<td width=32%>Web application</td>
<td width=68%>Web application properties set in Visual InterDev Web Permissions and stored in a session</td>
</tr>
<tr valign=top>
<td width=32%>Page</td>
<td width=68%>Server script written in Visual InterDev, Source Code Editor</td>
</tr>
<tr valign=top>
<td width=32%>Source control</td>
<td width=68%>User accounts and permissions specified in Visual SourceSafe Administrator </td>
</tr>
</table><br>
<p class=mini>
<sup>(1)</sup>&nbsp;&nbsp;&nbsp;Applies only to Web servers on Microsoft Windows NT with NTFS file system. NTFS allows you to specify per-file Access Control Lists (ACLs). Use of the FAT file system, whether on a Microsoft® Windows® 95 or Windows NT server, greatly reduces the security features available.</p>
<p>
For all interactions with your Web server, Visual InterDev uses the Microsoft<sup>®</sup> FrontPage<sup>®</sup> server extensions that may use the existing security features of your operating system and Web server. For example, the extensions are integrated with Windows NT and Internet Information Server to manage Web application security. You interact with the FrontPage extensions through the Visual InterDev user interface.</p>
<p class=label>
<b>Visual InterDev and security components</b></p>
<p>
<img src="vi3wj75.gif" border=0></p>
<p>
When planning which security options to use for your Web application and where you want to set those options, it is helpful to consider four types of access to your site. You may want to:
<ul type=disc>
<li>
Allow any Web visitor to execute ASP pages and read HTML pages at run time.<br><br></li>
<li>
Restrict access to registered Web visitors at run time.<br><br></li>
<li>
Allow Web developers and authors to write to your files at design time.<br><br></li>
<li>
Restrict Web administration to certain authorized users.</li>
</ul>
<p>
For a complete understanding of security options affecting your Web application, read about the security features of the FrontPage server extensions, Internet Information Server, and Windows NT. If you use a database in your Web application, you might want to become familiar with the security models of ODBC databases, such as Microsoft<sup>®</sup> Access or SQL Server<sup>®</sup>. For more information about setting security options for Windows NT and Internet Information Server, see the documentation for those products.</p>
<h2><a name="vimscuserauthentication"></a>User Authentication</h2>
<p>
In Web security, your central concerns are identifying a user and controlling the user's access to your Web application and its resources. You accomplish this by implementing measures to authenticate users and specify access permissions.</p>
<p>
In choosing your security options, you need to specify how the user provides an identification to your Web application, how that identity is verified, and what level of access or permissions that user is allowed. The following table provides guidelines to help you choose the appropriate options for your Web application.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Location</b></td>
<td class=label width=67%><b>Example interface</b></td>
</tr>
<tr valign=top>
<td width=33%>Operating system</td>
<td width=67%>Domain and user account specified in Windows NT</td>
</tr>
<tr valign=top>
<td width=33%>Web server</td>
<td width=67%>User accounts and server properties set in Internet Information Server Administrator</td>
</tr>
<tr valign=top>
<td width=33%>Database</td>
<td width=67%>Permissions specified in SQL Server, Enterprise Manager</td>
</tr>
<tr valign=top>
<td width=33%>Web application</td>
<td width=67%>Web application properties set in Visual InterDev Web Permissions dialog box, login pages, and variables stored in a session</td>
</tr>
</table><br>
<p>
Each of these locations provides a different feature set for implementing user identification, verification, and permission levels. Depending on the systems and software you are using, the feature sets may work together to set options at the operating system level or they may change related options at other levels. For example, if you set permissions on a file or folder in the Visual InterDev Web Permissions dialog box, you are also setting the permissions in Windows NT.</p>
<h3>Operating System Level</h3>
<p>
Security choices you make for the operating system depend on the features and options your operating system offers. For example, if you are using Windows NT, you can implement authentication for a large number of people without explicitly specifying user accounts by using a special user account, referred to as the "guest user." This account is set up by default. If you want to distinguish between individual users and track them, you need to implement security options at a different level than your operating system.</p>
<p>
In addition to authentication, the file system used by your operating system also affects the permissions you are able to grant to the user. For example, Windows NT may use either Window NT File System (NTFS) or File Allocation Table (FAT). NTFS allows you to specify an Access Control List (ACL) for files and folders so you can control access more granularly. FAT, on the other hand, does not provide the ability to specify lists and offers less control.</p>
<h3>Web Server Level</h3>
<p>
Once the operating system has verified the identity of the user, the Web server can also evaluate the user's identity. The Web server primarily controls access at run time. For example, if you are using the default configuration for Internet Information Server, the Web server processes anonymous requests as the anonymous Internet Information Server user, IUSR_&lt;<i>machinename</i>&gt;. </p>
<p>
The anonymous user set up by Internet Information Server is similar to an Internet guest account defined in Windows NT User Manager. However, password changes are not handled automatically. Changes to passwords for one requires an explicit change to the other.</p>
<p>
If you have set the anonymous account to allow access to the requested file, Internet Information Server allows access to the file and satisfies the request. Otherwise, Internet Information Server rejects the request, returns an error to the client and informs the client of the authentication methods that Internet Information Server supports.</p>
<p>
For more information, see the security topics in the documentation for the Web server you are using.</p>
<h3>Database Level</h3>
<p>
Visual InterDev allows you to connect to a wide variety of data sources. The security measures you set for your database depend on the database management system you are using. The following paragraphs provide a few tips for setting security on databases used in Web applications. For the most recent information about setting security for your database, see the security topics in your database management systems documentation.</p>
<p>
For file-based systems such as .mdb files in Microsoft<sup>®</sup> Access, you can control security through the sharing permissions available on the folders and files for the operating system. If you are using SQL Server, you can use the features for granting and revoking privileges offered within the database management system. For example, Microsoft<sup>®</sup> SQL Server has a Security Manager that allows you to specify the privileges available to a single user or a group of users.</p>
<p>
Although SQL Server for Windows NT offers three types of login security, the standard security choice is recommended. Standard login security requires a login ID and a password to access the server. Your Web application provides this information through the data connection and your users do not need to provide any additional identification.</p>
<p>
While not recommended for all systems, some Web applications might use integrated security. If you choose to use integrated security, keep in mind that SQL Server will use Windows NT security to authenticate users so the Web application and database must reside on the same server. Windows NT does not delegate security to another server.</p>
<h3>Web Application Level</h3>
<p>
In your Web application, you can take advantage of the security features provided through FrontPage server extensions and through the Global.asa file processing available with Active Server Pages.</p>
<h4>FrontPage Server Extensions</h4>
<p>
Visual InterDev works through the FrontPage server extensions to provide the ability to manage design-time Web permissions using the underlying security model of the host operating system on the master Web server.</p>
<p>
If your operating system is Windows NT with the NTFS file system, the FrontPage extensions manage access for administrators and authors using file ACLs for the DLLs in the following table. These directories are hidden to the Web server but available to the file system:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=39%><b>Function</b></td>
<td class=label width=24%><b>DLL</b></td>
<td class=label width=37%><b>Location</b></td>
</tr>
<tr valign=top>
<td width=39%>Administrative (i.e., setting Web permissions)</td>
<td width=24%>Admin.dll</td>
<td width=37%>&lt;Webdir&gt;/_vti_bin/_vti_adm</td>
</tr>
<tr valign=top>
<td width=39%>Authoring (i.e., opening a file)</td>
<td width=24%>Author.dll</td>
<td width=37%>&lt;Webdir&gt;/_vti_bin/_vti_aut</td>
</tr>
<tr valign=top>
<td width=39%>Browsing (i.e., viewing links)</td>
<td width=24%>Dvwssr.dll</td>
<td width=37%>&lt;Webdir&gt;/_vti_bin/_vti_aut</td>
</tr>
</table><br>
<p>
When you perform a function, such as changing permissions on a Web application, your request is sent over HTTP at the server and routed to one of these ISAPI DLLs. For example, a request to perform an administrative function is handled by that Web application's Admin.dll. In the request, the client provides credentials that identify the user who is logged in to the client workstation. This user must have read permission (equivalent to read and execute individual permissions) for the DLL handling the request; otherwise, the request is denied. </p>
<p>
Thus FrontPage restricts who may perform a given request by controlling read permission on the DLLs in _vti_bin. Whenever a change is made to a Web application's permissions via the Web Permissions dialog box, the FrontPage extensions on the server modify the ACLs on the DLL's _vti_adm and _vti_aut directories in that Web application's _vti_bin directory accordingly.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;FrontPage does not change ACLs on content files to manage design-time security; it only changes ACLs on the directories that contain the gatekeeper files admin.dll, author.dll, and dvwssr.dll. FrontPage manipulates content file ACLs to manage run-time security, which is the topic of the next section.</p>
<h4>Global.asa File Processing</h4>
<p>
Visual InterDev supports Web applications that make full use of Active Server Pages. One of the features of an Active Server Page is the automatic processing of a Web application's <a href="vimsgglobal.asafile.htm">Global.asa file</a>, if present, at the start of a new session with that Web application. You can use the Web application and session to control access and processing of your Web application. The user never actually sees the Global.asa file and the security provisions you add to it.</p>
<h2><a name="vimscpermittingaccesstowebapplicationsfoldersfiles"></a>Permitting Access to Web Applications, Folders, and Files</h2>
<p>
After specifying a way of identifying users, you can control access to your system resources through setting permissions. Typically, you set permissions based on files and directories. </p>
<p>
At the operating system level, you can set permissions for individual user to read, write, execute, delete, change permissions on, or take ownership of a file. </p>
<p>
In addition, Windows NT defines some standard permissions that combine one or more individual permissions. It is these standard permissions that are usually assigned to files or directories. For instance, having change permission is equivalent to having read, write, execute, and delete individual permissions. Having full control is equivalent to having all the individual permissions. Having the standard read permission is equivalent to having individual read and execute permissions. </p>
<p>
In this document, standard permissions are used unless otherwise noted.</p>
<h3>Controlling User Access to Resources with ACLs</h3>
<p>
Identity and permissions together determine a user's access to resources. The entire set of permissions assigned to a resource, for example, a file or directory, is called an Access Control List (ACL). When a user attempts to access a resource, the operating system checks the ACL of the resource to verify that the user has the proper permissions for the type of access being attempted. For instance, if a user who has read-only permission on a file attempts to delete that file, that user is denied access and cannot delete the file.</p>
<p>
Here is a simple example. A Web site manager wants to use security to protect a single file on the site, say Sample.htm, from being read by users browsing the site anonymously. By simply changing the permissions on Sample.htm so that the anonymous user account does not have read permissions for the file, anonymous users will not be able to view Sample.htm.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The permissions you set for the Windows NT group, "Everyone," also includes the anonymous user.</p>
<h3>Visual InterDev Web Applications</h3>
<p>
Visual InterDev exposes the security model defined by FrontPage for Webs hosted on a server running the FrontPage server extensions. This model is summarized here, and described in more detail in "Using the FrontPage<sup>®</sup> 97 Server Extensions with the Microsoft Internet Information Server" in the FrontPage documentation. It extends to Web applications the permissions model discussed above for files and directories.</p>
<h4>Levels of Web Access</h4>
<p>
FrontPage server extensions define three levels of access for a Web application. An individual user, or an entire group of users, is either assigned one of these three levels or has no access. Access is defined on a per-Web application basis. The operation of defining access on a Web is referred to as "setting Web permissions." The three levels of access are administer, author, and browse. These are described below.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Access level</b></td>
<td class=label width=75%><b>Permission to</b></td>
</tr>
<tr valign=top>
<td width=25%>Administer</td>
<td width=75%><ul type=disc>
<li>
Author and browse files<br><br></li>
<li>
If on a root Web, create or delete Web applications on the root Web server<br><br></li>
<li>
If on a Web application, change permissions on that Web application</li>
</ul>
</td>
</tr>
<tr valign=top>
<td width=25%>Author</td>
<td width=75%><ul type=disc>
<li>
Browse, open, and modify files in that Web application, including adding or deleting content</li>
</ul>
</td>
</tr>
<tr valign=top>
<td width=25%>Browse</td>
<td width=75%><ul type=disc>
<li>
View the content of that Web through a browser<p class=tl>
By default, when a Web application is created, browse access is granted to all users. You can restrict browse access for a Web application to specific users who have been given browse access.</P></li>
</ul>
</td>
</tr>
</table><br>
<h2><a name="vimscguidelinesfordesign-timesecurity"></a>Guidelines for Design-Time Security</h2>
<p>
Design-time security is managed by controlling which users and groups of users are granted administer and author access to Web applications.</p>
<p>
To give a user full design-time access to a Web application, the user should be granted administer access to that Web application. If you want a user to be able to create new Web applications on a server, the user needs administer privileges on the root Web of that server. To give a user enough access to fully modify an existing Web application, but not to delete it, the user should be granted author access to the Web application.</p>
<p>
During design time, you might need to provide various levels of access to members of your Web development team. Not all members need administrative privileges. Some members may need only write access to certain folders or directories. By default, Web applications inherit the same rights that the root had at the time the Web application was first created. For more information about specifying privileges for design time, see <a href="vihowsettingwebapplicationpermissions.htm">Setting Web Application Permissions</a>.</p>
<h3>Controlling Developer Access to your Development Web Application</h3>
<p>
If you want to control the privileges that members of your Web team have for changing your Web application files, you can use Visual InterDev along with settings at other locations. You can use the following tables to help you choose security settings that are appropriate for your Web applications.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Location for setting</b></td>
<td class=label width=50%><b>Typical Intranet setting</b></td>
</tr>
<tr valign=top>
<td width=50%>Operating system</td>
<td width=50%>Windows NT Challenge/Response (NTLM)</td>
</tr>
<tr valign=top>
<td width=50%>Windows Explorer folder (OS)</td>
<td width=50%>Add user group or individuals to permissions list</td>
</tr>
<tr valign=top>
<td width=50%>Web server</td>
<td width=50%>Server-specific</td>
</tr>
<tr valign=top>
<td width=50%>Database</td>
<td width=50%>In the Enterprise Manager, set security type to Standard</td>
</tr>
<tr valign=top>
<td width=50%>Visual InterDev Web project</td>
<td width=50%>Add user to Visual InterDev Web Permissions list</td>
</tr>
<tr valign=top>
<td width=50%>Visual SourceSafe</td>
<td width=50%>Add users to Visual SourceSafe Administrator</td>
</tr>
</table><br>
<p>
The following table shows typical settings for security on the Internet.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Location for setting</b></td>
<td class=label width=50%><b>Typical Internet setting</b></td>
</tr>
<tr valign=top>
<td width=50%>Operating system</td>
<td width=50%>Basic clear text</td>
</tr>
<tr valign=top>
<td width=50%>Windows Explorer folder (OS)</td>
<td width=50%>Add user group or individuals to permissions list</td>
</tr>
<tr valign=top>
<td width=50%>Web server</td>
<td width=50%>Same as operating system</td>
</tr>
<tr valign=top>
<td width=50%>Database</td>
<td width=50%>In the Enterprise Manager, set security type to Standard</td>
</tr>
<tr valign=top>
<td width=50%>Visual InterDev Web project</td>
<td width=50%>Add user to Visual InterDev Web Permissions list</td>
</tr>
<tr valign=top>
<td width=50%>Visual SourceSafe</td>
<td width=50%>Add users to Visual SourceSafe Administrator</td>
</tr>
</table><br>
<h3>Specifying Web Administrators</h3>
<p>
When you first install your Web server, you are prompted to supply a Web administrator password. You can specify that other users have the same administrator privileges for your Web applications. For example, you might want someone else to add new users or change Web permissions. </p>
<p>
You can use the following table to help you choose what security options are appropriate for your Web applications.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Location for setting</b></td>
<td class=label width=50%><b>Typical Intranet setting</b></td>
</tr>
<tr valign=top>
<td width=50%>Operating system (Windows NT)</td>
<td width=50%>Windows NT Challenge/Response(NTLM)</td>
</tr>
<tr valign=top>
<td width=50%>Windows Explorer folder (OS)</td>
<td width=50%>Add user group or individuals to permissions list</td>
</tr>
<tr valign=top>
<td width=50%>Web server</td>
<td width=50%>User groups and password settings must match the operating system</td>
</tr>
<tr valign=top>
<td width=50%>Database</td>
<td width=50%>In Enterprise Manager, provide appropriate database permissions</td>
</tr>
<tr valign=top>
<td width=50%>Web application</td>
<td width=50%>Global.asa file</td>
</tr>
<tr valign=top>
<td width=50%>Visual InterDev Web project</td>
<td width=50%>Add user to Visual InterDev Web Permissions list</td>
</tr>
</table><br>
<p>
This table shows typical settings for the Internet.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Location for setting</b></td>
<td class=label width=50%><b>Typical Internet setting</b></td>
</tr>
<tr valign=top>
<td width=50%>Operating system (Windows NT)</td>
<td width=50%>Basic clear text</td>
</tr>
<tr valign=top>
<td width=50%>Windows Explorer folder (OS)</td>
<td width=50%>Add user group or individuals to permissions list</td>
</tr>
<tr valign=top>
<td width=50%>Web server</td>
<td width=50%>Allow Anonymous</td>
</tr>
<tr valign=top>
<td width=50%>Database</td>
<td width=50%>Provide TCP/IP access and special .dll<br>
In Enterprise Manager, provide appropriate database permissions</td>
</tr>
<tr valign=top>
<td width=50%>Web application</td>
<td width=50%>Global.asa file</td>
</tr>
<tr valign=top>
<td width=50%>Visual InterDev Web project</td>
<td width=50%>Add user to Visual InterDev Web Permissions list</td>
</tr>
</table><br>
<h3>Using Source Control</h3>
<p>
Applying source control to your Web application during development is another way you can add security during design time. Visual SourceSafe added to your Web server helps control who can check out and modify files in the Web application.</p>
<h2><a name="vimscguidelinesforrun-timesecurity"></a>Guidelines for Run-Time Security</h2>
<p>
After a default installation of Microsoft Internet Information Server and FrontPage server extensions, Web applications on a FrontPage server may be read anonymously by any browser that can make an HTTP request to the server. To secure their Web applications from such unrestricted access, Visual InterDev authors use run-time security.</p>
<p>
As part of the development process, authors routinely test their Web applications by using a Web browser of their choice to read their Web pages. For this reason authors must be aware of run-time security considerations even while authoring.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you use the same Web server for production as you do for development and testing, then the run-time security becomes the same as production security. However, if a Web application is put into production on a different server, the security settings on the production server should be reviewed and adjusted as necessary. </p>
<p class=indent>
For example, if the production server has FrontPage extensions and the Web application was transferred to the production server using the Copy Web command, security settings need to be reestablished through Visual InterDev. If the production server is an Internet Information Server without FrontPage extensions, then the security should be established using Windows Explorer to manage file and directory ACLs on the Web applications content.</p>
<p>
Run-time security is managed, first, by controlling whether all users or only registered users are permitted to browse a Web application, and, second, by controlling which users are granted browse access to those Web applications that only permit registered browsers.</p>
<h3>Browsing Permissions</h3>
<p>
The FrontPage security model facilitates the use of two access levels for end users: unrestricted browsing and restricted browsing.</p>
<h4>Unrestricted Browsing</h4>
<p>
Unrestricted browsing is the default setting for new Web applications. All users may read (browse) the content of a Web application that permits unrestricted browsing. End-user requests to read Web pages are satisfied anonymously; that is, end users are not required to identify themselves before fetching pages.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Because end-users are never required to identify themselves, it makes no difference whether they have browse access to the Web application. For an explanation of how the unrestricted browsing state is implemented using the Allow Anonymous setting of Internet Information Server, see Run-Time Security Considerations, below.</p>
<h4>Restricted Browsing</h4>
<p>
Using the Web Permissions dialog box, any root Web or sub-Web application may be set to restrict browsing to only registered users. The FrontPage extensions remove read access for the anonymous user from all the content files of the Web application. An anonymous end-user's request to read a page of that Web application is then rejected by the Internet Information Server. End-users must authenticate their identity in the Windows NT domain, and the authenticated user account must have browse access to the Web application before the request will be satisfied. When a user is given browse access to a Web application, the FrontPage extensions grant the user account read access to all the content files of that Web application. (See Run-Time Security Considerations, below.)</p>
<p>
For complete control over who can browse a Web application, restrict the Web application so that only registered users can browse it, and then give specific users and/or groups browse access to the Web application.</p>
<h4>Run-Time Security Implementation Details</h4>
<p>
The FrontPage extensions manage run-time Web permissions using the underlying security model of the WWW server software. Here we consider only the case where this is Internet Information Server 3.0 running on Windows NT with the NTFS file system. Security on non-Internet Information Server servers is beyond the scope of this topic. Security features on non-NTFS file systems are severely limited.</p>
<h4>FrontPage Run-Time Security</h4>
<p>
FrontPage manages run-time security differently than design-time security. This is because run-time HTTP requests to read pages are not directed to ISAPI DLLs, as are design-time requests. Internet Information Server goes directly to the file being requested and attempts to read it, as described below. For this reason FrontPage directly alters the ACLs on content files in a Web application in order to control run-time security.</p>
<h3>Run-Time Security Considerations</h3>
<p>
At run time, you might want to allow everyone to read the Web applications pages or restrict access to certain authorized users.</p>
<h4>Allowing Access to Any Web Visitor</h4>
<p>
You can set up your system to allow access to any Web visitor. The following table shows some typical settings you can use to control security for your Web application. Other settings and combinations may produce run-time errors for certain Web visitors.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Location for setting</b></td>
<td class=label width=33%><b>Intranet setting</b></td>
<td class=label width=34%><b>Internet setting</b></td>
</tr>
<tr valign=top>
<td width=33%>Operating system (Windows NT) / Web server</td>
<td width=33%>Allow anonymous</td>
<td width=34%>Allow anonymous</td>
</tr>
<tr valign=top>
<td width=33%>Folder</td>
<td width=33%>Permissions are handled through the Web server</td>
<td width=34%>Add Anonymous ID to appropriate User Groups, also permissions are handled through the Web server</td>
</tr>
<tr valign=top>
<td width=33%>Database</td>
<td width=33%>SQL Server - Standard</td>
<td width=34%>SQL Server - Standard</td>
</tr>
<tr valign=top>
<td width=33%>Web application</td>
<td width=33%>Nothing special</td>
<td width=34%>Nothing special</td>
</tr>
<tr valign=top>
<td width=33%>Page</td>
<td width=33%>Nothing special</td>
<td width=34%>Nothing special</td>
</tr>
</table><br>
<h4>Unrestricted Browsing</h4>
<p>
When a Web application is set to allow unrestricted browsing, FrontPage grants the anonymous user account standard read access to all the content files in that Web application.</p>
<h4>Restricting Web Visitor Access</h4>
<p>
You can restrict access to your Web application by setting security options in several areas. Some developers set up a site that has one Web application with unlimited access for introductory and general content that links to another Web application that is available only to authorized visitors. Typically this second Web application requires the visitor to login so that an ID and password can be compared against a database of registered users.</p>
<p>
You can use the following table to help you choose what security options are appropriate for your Web application.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=32%><b>Location for setting</b></td>
<td class=label width=35%><b>Intranet setting</b></td>
<td class=label width=33%><b>Internet setting</b></td>
</tr>
<tr valign=top>
<td width=32%>Operating system (Windows NT)/ Web server (IIS)</td>
<td width=35%>Windows NT Challenge/Response (NTLM)<br>
Add permissions for User Groups and/or individuals; user groups and password settings must match the operating system</td>
<td width=33%>Basic clear text<br>
Add anonymous user ID to appropriate user groups</td>
</tr>
<tr valign=top>
<td width=32%>Windows Explorer folder (OS)</td>
<td width=35%>Add user group or individuals to permissions list</td>
<td width=33%>Add user group or individuals to permissions list</td>
</tr>
<tr valign=top>
<td width=32%>Database</td>
<td width=35%>Standard</td>
<td width=33%>Standard</td>
</tr>
<tr valign=top>
<td width=32%>Web application</td>
<td width=35%>Global.asa file</td>
<td width=33%>Global.asa file  identify authorized users and store session state for a user</td>
</tr>
<tr valign=top>
<td width=32%>Page</td>
<td width=35%>Use .asp files and server script</td>
<td width=33%>Use .asp files and server script</td>
</tr>
</table><br>
<h4>Registered Users</h4>
<p>
When a Web application is set to allow only registered users to browse it, FrontPage removes all anonymous user account permissions from the Web application's content files. Since Internet Information Server impersonates the anonymous user during all requests that do not contain user credentials (when Allow Anonymous is checked), this causes such requests to fail initially and begin the authentication process described above.</p>
<h2><a name="vimscsecuringhttptransmissionsssl"></a>Securing HTTP Transmissions (SSL)</h2>
<p>
SSL (Secure Sockets Layer) is a protocol that is used to protect HTTP transmissions from unwanted eavesdropping. Visual InterDev supports the optional use of SSL over the client/server link at design time and when performing a Web Copy operation. You can also use SSL during run time. You choose to use an SSL connection when you create a new Web project or initiate a Web Copy operation.</p>
<p>
When an SSL connection is in use, all HTTP requests and replies are encrypted before transmission and decrypted after receipt. This process does require additional time and slows performance.</p>
<p>
Except for this encryption/decryption step, all Visual InterDev operations take place exactly as they would over a non-SSL connection. You must obtain and install an SSL certificate on your Web server before you can initiate an SSL connection. For more information on obtaining and installing an SSL certificate on an Internet Information Server, see Securing Your Site Against Intruders in the Internet Information Server documentation.</p>
<h2><a name="vimscadministrationmaintenanceconsiderations"></a>Administration and Maintenance Considerations</h2>
<p>
In choosing which settings are appropriate for your Web application and system, you might also consider the administration requirements to maintain your security plan. </p>
<p>
For example, if you choose to use Windows NT Challenge Response, the Web permissions are based on the individuals and user groups defined for that server. This setting works well for intranets because user profiles are likely to be setup and maintained on a regular basis and the quantity of user is known. Web permissions can be provided at the same time as network permissions. </p>
<p>
If, however, your Web application is running on the Internet and you use the Windows NT Challenge Response, the number of potential requests for profiles could make user administration a full-time job for the system administrator. Also, operating systems typically have a limit on the number of user profiles you can specify.</p>
<h3>Simplifying Run-Time Security</h3>
<p>
As was the case with design-time security, you can simplify the task of managing run-time security by creating a local group, say Web_Readers, on the Web server, and giving the group browse access to the root Web application. Be sure to restrict the root Web application so that only registered users can browse it. When new sub-Web applications are created, keep their default setting of inheriting permissions from the root Web application.</p>
<p>
Now the task of permitting a new user to browse the Web applications on this server is reduced to simply adding the new user's name to the Web_Readers group using the Windows NT User Manager. For more information about adding groups, see <a href="vihowsettingwebapplicationpermissions.htm">Setting Web Application Permissions</a>.</p>
<h3>Managing Security for Multiple Web Applications</h3>
<p>
Permission settings are stored and applied on a Web-by-Web basis. You can save time by creating sub-Web applications that inherit the permissions from the root Web above it.</p>
<p>
Any changes in root Web permissions apply to all sub-Web applications that inherit from the root Web. An administrator may not change permissions directly on a sub-Web application until it is set to have its own, unique permissions.</p>
<h3>Managing Permissions Efficiently</h3>
<p>
For convenience, Windows NT permits the definition of named collections of users, called "groups". Once a group has been defined and users have been added to it, each user in the group can be granted or denied access to a resource by changing the group's permissions on that resource.</p>
</BODY>
</HTML>

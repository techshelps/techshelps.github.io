<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Script Debugging Process</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="viconthescriptdebuggingprocess"></a>The Script Debugging Process</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="viconTheScriptDebuggingProcess_C;viconTheScriptDebuggingProcessC">
</object>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="viconTheScriptDebuggingProcess_T;viconTheScriptDebuggingProcessT">
</object></p>
<p>
You can use the Microsoft<sup>®</sup> Visual InterDev<sup>™</sup> debugger to test scripts written in Microsoft Visual Basic<sup>®</sup>, Scripting Edition (VBScript) and Microsoft JScript™. Debugging Web pages can be different than debugging in traditional development environments in these ways:
<ul type=disc>
<li>
Most Web applications consist of scripts that run on the client (in .htm files) and on the server (in .asp files, the <a href="vimsgglobal.asafile.htm">Global.asa</a> file, and .cdf files).<br><br></li>
<li>
Scripts can be in different languages.<br><br></li>
<li>
Scripts can be mixed with HTML text.<br><br></li>
<li>
Many Web applications include not just scripts, but Java components such as applets and COM objects.</li>
</ul>
<p>
The Visual InterDev debugger allows you to debug in all of these scenarios. You can debug client script running in your local version of Microsoft<sup>®</sup> Internet Explorer.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;It is highly recommended that you do not use Active Desktop™ mode of Microsoft Internet Explorer 4.0 when you are debugging.</p>
<p>
To debug script running in Microsoft<sup>®</sup> Internet Information Server (IIS) 4.0, you can run the debugger on your computer and attach it to a script running on the server. If the server is running on another computer, you can use <i>remote debugging</i> to debug script running there.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;For information about debugging Java components on your Web page, see the Java documentation on <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vjhowDebuggingJavaApplet">
</object><a href=JavaScript:alink_3.Click()>debugging</a>.</p>
<h2><a name="vimsctypesoferrors"></a>Types of Errors</h2>
<p>
Debugging is about finding errors. When you work with script, you might encounter the following types of errors that require debugging:
<ul type=disc>
<li>
A <i>syntax error</i> occurs if you mistype a keyword, forget to close a multiline command (such as DO … LOOP), or introduce a similar syntax error. If a script includes a syntax error, the script will not execute and an error message is displayed as soon as the browser or server processes the page.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;In some programming environments, syntax errors are referred to as preprocessor, compilation, or compile-time errors.</p></li>
<li>
A <i>run-time error</i> occurs when a command attempts to perform an action that is invalid. For example, a run-time error occurs if you try to perform a calculation using a variable that has not been initialized. If a run-time error occurs, the script either stops or performs an exception routine.<br><br></li>
<li>
A <i>logic error</i> occurs when a script executes without syntax or run-time errors, but the results are not what you intended. For example, a script might prompt the user for a password, but then allows access to the application even if the password is wrong.</li>
</ul>
<h2><a name="vimscworkingindebugger"></a>Working in the Debugger</h2>
<p>
The basic process of debugging scripts consists of these tasks:
<ul type=disc>
<li>
Start debugging by running the document you are currently working with in your Web project, or by attaching the debugger to a document that is already running in a browser or on a server. You can also launch the debugger in response to a script error, which is called <i>just-in-time</i> debugging.<br><br></li>
<li>
Stop script execution by issuing a break command. You can also set a <i>breakpoint</i> in the script where the debugger will stop automatically. When you stop a procedure, its source is displayed.<br><br></li>
<li>
Inspect the state of the script by examining the values of variables or properties and the list of running procedures (the <i>call stack</i>).<br><br></li>
<li>
Control the execution of individual statements or procedures (<i>stepping</i>) and watch the effect both in your application and by watching the values of variables or properties.<br><br></li>
<li>
Skip over (<i>step over</i>) or walk through (<i>step into</i>) procedures called by the current procedure. If multiple procedures or threads are active, you can move to another one and proceed from there.</li>
</ul>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can't work with the debugger in Design view or Quick view of the HTML editor. To debug, switch to Source view.</p>
<p>
To allow you to perform these tasks, the debugger includes these commands and windows:
<ul type=disc>
<li>
The <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="csrgnProcessDialogBox">
</object><a href=JavaScript:alink_4.Click()>Processes</a> dialog box allows you to attach the debugger to a document that is already running in a browser or on a server, which can include scripts in pages that are not part of your Visual InterDev project. You can debug scripts running locally on your computer or attach to processes running on remote computers, such as an .asp file running on a server.<br><br></li>
<li>
The <object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="csrgnDocumentExplorer">
</object><a href=JavaScript:alink_5.Click()>Running Documents</a> window allows you to view a list of documents that are available to the debugger.<br><br></li>
<li>
<object id=alink_6 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="csdlgSourceViewHTMLEditor">
</object><a href=JavaScript:alink_6.Click()>Source view</a> in the HTML editor displays source code of the script or component you are debugging. If the script or component you are debugging is part of your current Visual InterDev project, you can fix errors, and then rerun the document to test it again.<br><br></li>
<li>
In the Visual InterDev HTML editor, you can set and clear breakpoints. After the debugger has reached a breakpoint, you can use commands on the Debug menu to step into individual lines in your script. If you reach a point in your script that calls another procedure (a function, subroutine, or applet) you enter (<i>step into</i>) the procedure or run (<i>step over)</i> it and stop at the next line. At any point, you can jump to the end (<i>step out</i>) of the current procedure and proceed to the next breakpoint.<br><br></li>
<li>
In the <object id=alink_7 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="csrgnLocalsWindow">
</object><a href=JavaScript:alink_7.Click()>Locals</a> window you can see the values of variables within the scope of the current procedure. You can also specify that you want the debugger to display the values of specific expressions, such as properties, by setting up <i>watch expressions</i> in the <object id=alink_8 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="csrgnWatchWindow">
</object><a href=JavaScript:alink_8.Click()>Watch</a> window.<br><br></li>
<li>
To set and change values, you use the <object id=alink_9 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="csrgnImmediateWindow">
</object><a href=JavaScript:alink_9.Click()>Immediate</a> window. You can evaluate any expression in the window and can enter script commands and see their effect. You can also view and change values in the Watch window.<br><br></li>
<li>
Using the <object id=alink_10 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="csrgnCallStackWindow">
</object><a href=JavaScript:alink_10.Click()>Call Stack</a> window, you can move to any currently active procedure.</li>
</ul>
<h2><a name="vimscunderstandingscriptprocessing"></a>Understanding Script Processing</h2>
<p>
Understanding how client scripts are processed and how errors are handled can help you debug client scripts successfully.</p>
<h3><a name="vimscprocessingclientscript"></a>Processing Client Script</h3>
<p>
Client script is processed by Microsoft Internet Explorer. The browser calls the appropriate run-time module to process VBScript scripts or JavaScript scripts.</p>
<p>
Client scripts are initially parsed when the Web document is loaded into the browser. During this parsing phase, the browser reports any syntax errors that it finds.</p>
<p>
After parsing a section of script, the browser executes it. <i>Global</i> or <i>inline</i> scripts, which are scripts that are not part of an event-handling subroutine or function, are executed immediately. Event-handling subroutines or functions, and procedures that are called by other procedures, are parsed immediately but are not executed until triggered by an event or called by another procedure.</p>
<p class=label>
<b>Client script processing</b></p>
<p>
<img src="vi4rzq1.gif" border=0></p>
<p>
If a run-time error occurs when a client script is executed, an error message is displayed and the script containing the error stops. Other client scripts in the document can still run (unless you start the debugger). If the script containing the error is called again, the error message is displayed again.</p>
<p>
Depending on the language you are using, you might be able to include statements in your scripts to trap run-time errors and run your own error procedures. For example, in VBScript, you can use the ON ERROR statement to establish error trapping. For more details, see the documentation for your scripting language.</p>
<h3><a name="vimscprocessingserverscript"></a>Processing Server Script</h3>
<p>
Most server script is not event-driven. Instead, when an .asp file is requested, the server reads the page and processes all server script from top to bottom. This includes script that is inline with HTML text, as shown in the following diagram.</p>
<p class=label>
<b>Server script processing</b></p>
<p>
<img src="vi4rzq2.gif" border=0></p>
<p>
Not all server script is executed immediately. As with client script, server script can include functions and subroutines that are executed only when they are called from other procedures.</p>
<p>
Global.asa files are a special case. The Application_OnStart and Session_OnStart procedures in these files are executed only once for an application and for a session. Therefore, to debug these events easily, you must embed debugging statements in the file. For details, see <a href="vihowdebuggingglobal.asafile.htm">Debugging a Global.asa File</a>.</p>
</BODY>
</HTML>

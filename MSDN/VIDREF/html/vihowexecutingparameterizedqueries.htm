<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Executing Parameterized Queries</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="vihowexecutingparameterizedqueries"></a>Executing Parameterized Queries</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vihowExecutingParameterizedQueries_C">
</object></p>
<p>
In many applications, you want to work with data sets created using conditions supplied in the application. For example, your application might display a report of all the employees in a department. You can set up a form to prompt users for the name of the department, and then execute a query based on the value they enter. This type of query is called a <i>parameterized query</i>.</p>
<p>
For parameterized queries, you use a Recordset design-time control as you would for a table or other database object. The difference is that the Recordset control is bound to a stored procedure or an SQL statement instead of a table. </p>
<p>
You can bind the control directly to the procedure or statement, or you can bind it to a data command that points to one of these types of object. For details about using data commands, see <a href="vihowgettingrecords.htm">Getting Records</a>.</p>
<p class=label>
<b>To create a parameterized query</b>
<ol>
<li>
Drag a Recordset design-time control onto the page. For details, see <a href="viovrviewingdata.htm">Viewing Data</a>.<br><br></li>
<li>
Right-click the control and choose <b>Properties</b>. In the <b>General</b> tab, set the control's name and connection.<br><br></li>
<li>
Under <b>Source of data</b>, specify the binding:<ul type=disc>
<li>
If you are binding to a data command, choose <b>Database object</b>, and then select <b>DE Commands</b>. From the <b>Object Name</b> list, choose the name of the data command to use.<br><br></li>
<li>
If you are binding directly to a stored procedure, choose <b>Database object</b>, and then select <b>Stored Procedures</b>. From the <b>Object Name</b> list, choose the name of the stored procedure to use.<br><br></li>
<li>
For SQL queries, choose <b>SQL statement</b>, and then enter the SQL text. Choose <b>SQL Builder</b> to launch the Query Designer. In the SQL statement, use a question mark (?) to indicate parameters in your query. For example, the following SQL statement creates a query in which the department name is a parameter:<pre><code>SELECT * FROM employee WHERE department = ?
</code></pre>
<p class=atl>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>Do not use named parameters. For more information about creating parameterized queries in the Query Designer, see <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvhowCreatingQueryWithUnnamedParameters">
</object><a href=JavaScript:alink_2.Click()>Creating a Query with Unnamed Parameters</a>.</p></li>
</ul>
</li>
<li>
Choose the <b>Parameters</b> tab. Under <b>Values for Parameters</b> you will see a list of the parameters specified for your query. For each parameter where the value of <b>Type</b> is <b>In</b> (a parameter that is being passed into the stored procedure or query), specify a value to be passed to the stored procedure. Values can be:<ul type=disc>
<li>
<b>Literals</b>&nbsp;&nbsp;&nbsp;Enter character values in single quotation marks and numeric values without quotation marks.<br><br></li>
<li>
<b>Variables&nbsp;&nbsp;&nbsp;</b>Enter the name of a variable defined in server code that will contain the value you want to pass.<br><br></li>
<li>
<b>Object references</b>&nbsp;&nbsp;&nbsp;Enter an object reference and property value, such as <code>Textbox1.value</code>. The object must be one that is available in server script. Be sure to use correct capitalization, because the expression will be evaluated as a JavaScript expression.<br><br></li>
<li>
<b>Expressions</b>&nbsp;&nbsp;&nbsp;Enter any combination of literals, variables, object references, and function calls. The expression is evaluated as a JavaScript expression, so use JavaScript conventions, including single quotation marks for character literals and a plus sign (+) for concatenation.</li>
</ul>
</li>
</ol>
<p>
You must make sure that the value for the parameter can be evaluated successfully when the query is run. By default, a Recordset design-time control will execute the query when the page is first loaded. In that case, the parameter value cannot be a value that is gathered or evaluated only after the page has been displayed. If you are passing the value of a variable as a query parameter, you can use two events that are processed before the recordset is opened:
<ul type=disc>
<li>
The <a href="viproonenterevent.htm">onenter</a> event for the page.<br><br></li>
<li>
The <a href="viproonbeforeopenevent.htm">onbeforeopen</a> event for the recordset.</li>
</ul>
<p>
Alternatively, you can also specify that the Recordset control does not automatically open the recordset when the page opens. This strategy is useful if you are using the same page for the data-entry form and the results.</p>
<p class=label>
<b>To prevent the Recordset control from automatically opening a recordset</b>
<ul type=disc>
<li>
Right-click the Recordset control and choose <b>Properties</b>. In the <b>Advanced</b> tab, clear the <b>Automatically open the Recordset</b> option.</li>
</ul>
<p>
You can initially display the page without the recordset and prompt for a value using a form. When the user fills in the form and clicks a button, you can open the recordset and pass it the value of a variable or control.</p>
<p class=label>
<b>To open the recordset</b>
<ul type=disc>
<li>
Call the recordset script object's <a href="viproopenmethod.htm">open</a> method.</li>
</ul>
<p>
For example, you might create a form with a textbox design-time control and a button design-time control. The user can fill in the text box with the value to search for, and then click the button. </p>
<p>
In the Parameters tab of the Recordset control's Property Pages window, specify the textbox script object's value as the parameter using this expression, substituting the name of the textbox for <i>textbox1</i>:</p>
<pre><code><i>textbox1</i>.value
</code></pre>
<p>
The onclick event handler for the button then simply calls the recordset script object's open method, as in this example:</p>
<pre><code>Function Button1_onclick
<span class=cfe><b> &nbsp; Recordset1.open()</b></span>
End Function
</code></pre>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Debugging Server Script</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="vihowdebuggingserverscript"></a>Debugging Server Script</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vihowDebuggingServerScript_C;vihowDebuggingServerScriptC">
</object></p>
<p>
From Microsoft<sup>®</sup> Visual InterDev™ you can debug server script that executes on Microsoft<sup>®</sup> Internet Information Server (IIS). If IIS is running on your computer, you can debug server script in much the same way that you debug client script. If the server is on another computer, you can use <i>remote debugging</i> from your computer to find errors in the server script. For details, see <a href="vihowdebuggingremotely.htm">Debugging Remotely</a>.</p>
<p>
You can debug server script in any of these ways:
<ul type=disc>
<li>
Run a page containing the script to debug from within your Microsoft Visual InterDev solution.<br><br></li>
<li>
Attach the Visual InterDev debugger to a process (page) already running in Microsoft<sup>®</sup> Internet Explorer.<br><br></li>
<li>
Respond to a syntax or run-time error in a script, called <i>just-in-time</i> debugging.<br><br></li>
<li>
Include a statement in script that starts the debugger.</li>
</ul>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;To debug script in ASP pages, you must be running version 4.0 or later of Microsoft Internet Information Server (IIS).</p>
<p>
If a Web page contains a mixture of client and server script, you can use the Visual InterDev debugger to debug both. For details, see <a href="vihowdebuggingmixedclientserverscript.htm">Debugging Mixed Client and Server Script</a>.</p>
<h2>Enabling Server Script Debugging for ASP Pages</h2>
<p>
Before you can debug client script in ASP pages, you must enable debugging. You can manually enable debugging for your ASP application as described under "Enabling ASP Debugging on the Server" in the <a href="vicontroubleshooting.htm">Troubleshooting</a> topic. Alternatively, Visual InterDev can automatically enable debugging on the server as needed.</p>
<p class=label>
<b>To automatically enable script debugging in ASP pages</b>
<ol>
<li>
In the Project Explorer, right-click the project and choose <b>Properties</b> to display the <b>Property Pages</b> dialog box.<br><br></li>
<li>
Choose the <b>Launch</b> tab.<br><br></li>
<li>
Under <b>Server script</b>, make sure <b>Automatically enable ASP server-side debugging on launch</b> is checked.</li>
</ol>
<p>
When this option is set, each time you start a debugging session Visual InterDev checks that the server is configured for debugging. This includes:
<ul type=disc>
<li>
Setting the IIS application to run in its own memory space (in COM terms, it runs "out of process").<br><br></li>
<li>
Enabling the IIS application's debugging options.<br><br></li>
<li>
Setting up a Microsoft<sup>®</sup> Transaction Server (MTS) package to allow you to attach the debugger to the Web application. The package's identify is set when you first start the debugging session by asking you to provide your name and password.<p class=atl>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>You can perform the first two steps manually on the server. For details, see "Enabling ASP Debugging on the Server" in the <a href="vicontroubleshooting.htm">Troubleshooting</a> topic.</p></li>
</ul>
<p>
When you quit your debugging session, Visual InterDev restores the server debugging settings and out-of-process setting to their previous values.</p>
<h2>Debugging Server Script Within a Solution</h2>
<p>
If you are working in a Visual InterDev solution, you can debug server script by launching the debugger.</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>Before debugging server script, make sure debugging is enabled as described above or under "Enabling ASP Debugging on the Server" in the <a href="vicontroubleshooting.htm">Troubleshooting</a> topic.</p>
<p class=label>
<b>To debug server script from within a solution</b>
<ol>
<li>
In Visual InterDev, open the project containing the server script you want to debug.<br><br></li>
<li>
Make the page your project's start page. In the Project Explorer, right-click the page and choose <b>Set as Start Page</b>.<br><br></li>
<li>
Set a breakpoint in the server script you want to debug.<br><br></li>
<li>
From the <b>Debug</b> menu, choose <b>Start</b> to launch the project.<p class=tl>
Visual InterDev attempts to attach the debugger to the document running on the server.</P></li>
<li>
If this is the first time you have started the debugger since opening the current project, you are prompted to provide user information used to identify the debugging process on the server. Enter your domain and name (in the form <i>domain</i>\<i>name</i>) and password.<br><br></li>
<li>
The browser opens, and you can proceed with debugging. When server script execution reaches the line with the breakpoint, the debugger displays the page in the editor with that line highlighted.<br><br></li>
<li>
Fix any errors, save the file, and then from the <b>Debug</b> menu choose <b>Restart</b>. If you do not have a working copy of the file, right-click the name of the file in the Project Explorer and choose <b>Get Latest Version</b> before you make modifications.</li>
</ol>
<h2>Debugging Server Script in a Running Document</h2>
<p>
If debugging has been enabled on the server for your project and you detect an error while the application is running, you can attach the debugger to it. For details about enabling debugging on the server, see "Enabling ASP Debugging on the Server" in the <a href="vicontroubleshooting.htm">Troubleshooting</a> topic.</p>
<p>
You can attach to a running document only if attaching is enabled.</p>
<p class=label>
<b>To enable just-in-time debugging</b>
<ol>
<li>
From the <b>Tools</b> menu, choose <b>Options</b>.<br><br></li>
<li>
In the <b>Options</b> dialog box, choose <b>Debugger</b>.<br><br></li>
<li>
Under <b>Script</b>, check <b>Attach to programs running on this machine</b>.</li>
</ol>
<p class=label>
<b>To debug a running script</b>
<ol>
<li>
In Visual InterDev, choose <b>Processes</b> from the <b>Debug</b> menu. In the <b>Processes</b> dialog box, choose <b>Active Server Pages</b>, and choose <b>Attach</b>.<br><br></li>
<li>
In the <b>Running Documents</b> window, select the script you want to debug.<br><br></li>
<li>
Set breakpoints, and then choose <b>Restart</b> from the <b>Debug</b> menu, or refresh the document in the browser.</li>
</ol>
<h2>Debugging Server Script in Response to an Error or Debugger Statement</h2>
<p>
If debugging is enabled for an IIS application on the server and the server encounters a <a href="vimsgsyntaxerror.htm">syntax error</a> or <a href="vimsgrun-timeerror.htm">run-time error</a> in a server script, you can use just-in-time debugging to find and fix it. You can also include a statement in your script, such as a <code>Stop</code> statement in VBScript or a <code>debugger</code> statement in JScript, to launch the debugger from within a script. For details about enabling debugging on the server, see "Enabling ASP Debugging on the Server" in the <a href="vicontroubleshooting.htm">Troubleshooting</a> topic.</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>If a debugger is installed on the server computer, the server does not pass error information through to the client. Instead, it displays an error message on the server computer's monitor. For more information, see "Just-in-Time Debugging of Server Pages" in the <a href="vicontroubleshooting.htm">Troubleshooting</a> topic.</p>
<p>
You can launch the debugger in response to an error or debugger statement only if just-in-time debugging is enabled.</p>
<p class=label>
<b>To enable just-in-time debugging</b>
<ol>
<li>
From the <b>Tools</b> menu, choose <b>Options</b>.<br><br></li>
<li>
In the <b>Options</b> dialog box, choose <b>Debugger</b>.<br><br></li>
<li>
Under <b>Script</b>, check <b>Just-In-Time debugging</b>.</li>
</ol>
<p class=label>
<b>To debug server script in response to an error or debugger statement</b>
<ol>
<li>
When an error message appears prompting you to start the debugger, choose <b>Yes</b>.<br><br></li>
<li>
A new instance of Visual InterDev is launched and you are prompted to open a project. If Visual InterDev is already running, a second instance is launched.<br><br></li>
<li>
Open the project containing the file to debug. If the project is already open in another instance of Visual InterDev, you cannot open it again, and Visual InterDev creates a new solution and project instead.<p class=tl>
The page to debug is loaded into the editor. If necessary, get a working copy of the page. If the project is already open, the page is loaded as read-only file in the new project.</P></li>
</ol>
<p>
If server debugging is not enabled for the application, errors are displayed in the browser as text in the page. In that case, open the project containing the page in Visual InterDev and start the debugger there, as described above.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Document Elements</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="vicondocumentelements"></a>Document Elements</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="viconDocumentElements_C;viconDocumentElementsC">
</object>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="viconDocumentElements_T;viconDocumentElementsT">
</object></p>
<p>
When you write scripts, you can manipulate various objects to perform application tasks. For example, in a client script you might:
<ul type=disc>
<li>
Test a check box, and then set the value of a text box.<br><br></li>
<li>
Navigate to another page.<br><br></li>
<li>
Display a specific graphic in a Java applet when a page is first displayed.<br><br></li>
<li>
Create multimedia effects by moving text across the screen, resizing text or graphics, and so on.</li>
</ul>
<p>
In a server script you work with different objects, which you might manipulate in order to:
<ul type=disc>
<li>
Fetch the information that a user entered into a form.<br><br></li>
<li>
Establish a connection with a database, and then run a query against it.<br><br></li>
<li>
Determine whether the current browser supports specific features that your application requires.</li>
</ul>
<p>
The objects that you can use in a script depend on the context in which the script will run. If you are working in server script, you can use only the objects available on the server. Conversely, if you are writing a client script, you can only use objects that are part of the page, are available to the browser, or that you know exist on the client computer.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you use the scripting object model and design-time controls, you can use the same script objects whether you are working with client script or server script. For details, see <a href="viovrscriptingwithdesigntimecontrolsscriptobjects.htm">Scripting with Design-Time Controls and Script Objects</a>.</p>
<h2><a name="vimscclientobjects"></a>Client Objects</h2>
<p>
In client scripts, you can get properties and call methods for objects on the page and write event handlers for them. For example, the following small script displays the title of the current document using the <code>alert</code> method of the <code>window</code> object and the <code>title</code> property of the <code>document</code> object:</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
 &nbsp; alert(document.title)
&lt;/SCRIPT&gt;
</code></pre>
<p>
Each object has its own methods and properties, which you can use as required. In client scripts, most objects also support events for which you can write handlers. For example, you can write a handler for a button's onclick event to control what happens when the button is clicked.</p>
<p>
The exact objects and events that are available in a client script depend on the object model available in the browser your users will be using. For example, in some browsers you can write a script that changes the text on the page, but not all browsers support that feature. In general, you can rely on the following:
<ul type=disc>
<li>
Most browsers, including Microsoft<sup>®</sup> Internet Explorer 3.0, support at least HTML level 3.2. In the HTML 3.2 object model, you generally cannot alter the appearance of objects already on the page. However, you can write event handlers for HTML controls such as buttons, forms, Java applets, ActiveX controls, and for the document as a whole. A list of scriptable objects in HTML 3.2 appears below.<br><br></li>
<li>
Some browsers, including Microsoft Internet Explorer 4.0, support Dynamic HTML (DHTML), which provides full complement of run-time properties, methods, and events for any named object on the page. You can also write a handler for a timer event to move or resize text or objects at specific intervals. DHTML gives you about the same level of control over an HTML page as you have over forms in Visual Basic or documents in Visual Basic<sup>®</sup> for Applications (VBA). For more information about DHTML, see <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_dynamic_html">
</object><a href=JavaScript:alink_3.Click()>Dynamic HTML</a>.<br><br></li>
<li>
Visual InterDev supports a script object model and design-time controls that allow you to script controls on the page using standard object-oriented techniques. For details, see <a href="viovrscriptingwithdesigntimecontrolsscriptobjects.htm">Scripting with Design-Time Controls and Script Objects</a>. You can use the scripting object model and design-time controls with any browser, as long as you use Microsoft Internet Information Server as your server.</li>
</ul>
<p>
When you write script, it is a good idea to limit yourself to the object model supported by your users' browsers. For example, if you know that most of your users will be using Internet Explorer 3.0 (or another browser that supports HTML 3.2), you should not make your application dependent on DHTML features. Alternatively, you can write your application to test for a particular browser and then expose features based on what browser the user has. For information about testing browser capabilities, see <a href="vihowcreatingportablescript.htm">Creating Portable Script</a>.</p>
<p>
The following table lists common client objects available in HTML 3.2.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Object</b></td>
<td class=label width=75%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=25%><code>window</code></td>
<td width=75%>Browser object that allows you to determine information about the browser, prompt the user for information, and display messages. The two commonly used events <code>onload</code> and <code>onunload</code> allow you to perform initialization tasks when a document is loaded.</td>
</tr>
<tr valign=top>
<td width=25%><code>document</code></td>
<td width=75%>Browser object that allows you to set document colors, determine the URL of the current and referring document, get the document's title, and write text into the page. For more information about writing text, see <a href="vihowdisplayinginformationtouser.htm">Displaying Information to the User</a>.</td>
</tr>
<tr valign=top>
<td width=25%><code>form</code></td>
<td width=75%>Browser object that allows you to determine information about a form's method and action, and enumerate the elements in the form. You can write handlers for the form's submit event in order to specify what happens when the user clicks the submit button. For more information about using forms, see <a href="vihowgatheringinformationusingforms.htm">Gathering Information Using Forms</a>.<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;Visual InterDev provides design-time controls and a FormManager control that allow you to create forms easily without writing scripts for the HTML &lt;form&gt; object. For details, see <a href="viovrscriptingwithdesigntimecontrolsscriptobjects.htm">Scripting with Design-Time Controls and Script Objects</a> and <a href="vihowscriptingforms.htm">Creating Event-Driven Forms</a>.</p>
</td>
</tr>
<tr valign=top>
<td width=25%><code>element</code></td>
<td width=75%>Individual form elements such as buttons, text boxes, and so on. You can write handlers for element events such as being clicked, getting or losing focus, and changing. For more information, see <a href="vihowgatheringinformationusingforms.htm">Gathering Information Using Forms</a>.<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;You can use Visual InterDev design-time controls instead. For details, see <a href="viovrscriptingwithdesigntimecontrolsscriptobjects.htm">Scripting with Design-Time Controls and Script Objects</a>.</p>
</td>
</tr>
<tr valign=top>
<td width=25%>Java Applets, ActiveX controls</td>
<td width=75%>Objects created externally and added to the page. Applets are placed onto a page in an &lt;APPLET&gt; block, and objects in an &lt;OBJECT&gt; block. Applets and ActiveX controls support their own set of properties, methods, and events for which you can write handlers.</td>
</tr>
</table><br>

<h2><a name="vimscserverobjects"></a>Server Objects</h2>
<p>
If you are writing a script that will run on Microsoft<sup>®</sup> Internet Information Server, you can use objects that are intrinsic to the server, such as the server's Request and Response objects. You can also use components that are bundled with the server, but not an inherent part of it, such as the AdRotator component, the BrowserCapability component, and ActiveX Data Objects (ADO). Finally, you can use any other object that is registered on the server, including components that you create and register yourself.</p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;You can easily create your own components using scriptlets. For details, see <a href="viconpackagingscriptasobjects.htm">Packaging Script as Objects</a>.</p>
<p>
Using server objects and components is a very powerful feature of Visual InterDev. When you create Web applications, you usually cannot control what browser the user has or what controls are registered on the user's computer. By installing controls on the server and using them in server script, you make the features of those controls available to any user, no matter what browser is in use.</p>
<p>
When you are writing server script, you cannot directly manipulate client objects such as the browser window, an HTML form, Java applets, or DHTML objects, because these objects do not reside on the server.</p>
<p>
If you are working with the server's intrinsic controls such as the Request or Response objects, you can simply reference the objects in your script, as in this example:</p>
<pre><code>&lt;%Server("starttime") = time%&gt;
</code></pre>
<p>
However, for all other objects, you create the object. You can do so by using an &lt;OBJECT&gt; tag in which you specify the attribute RUNAT=SERVER. Creating an &lt;OBJECT&gt; tag allows you to reference the object in any server script on the page, and adds the object and its members to the IntelliSense<sup>®</sup> statement completion drop-down list. For example, the following creates an object reference to an ADO connection object:</p>
<pre><code>&lt;OBJECT RUNAT="Server" ID=cn PROGID="ADODB.Connection"&gt;
&lt;/OBJECT&gt;
</code></pre>
<p>
In your script, you can reference this object using the name you assigned in the ID attribute. The following statements use the object defined in the &lt;OBJECT&gt; block:</p>
<pre><code>cn.Open Application("ConnectionString")
' other processing here
cn.Close
</code></pre>
<p>
Alternatively, you can create objects with the CreateObject method of the Server object to create an instance of the object, as in the following statement:</p>
<pre><code>&lt;%
  Set Ad = Server.CreateObject("MSWC.Adrotator")
  Ad.GetAdvertisement("/ads/adrot.txt")
%&gt;
</code></pre>
<p>
For an example, see the <a href="vismprandomadvertisement.htm">Random Advertisement Sample</a> in the Sample gallery.</p>
<p>
The following table lists common server objects and components.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Object</b></td>
<td class=label width=75%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=25%><pre><code>Request</code></pre>
</td>
<td width=75%>Intrinsic IIS object that provides access to any information passed into the script through an HTTP request, such as form information, search strings, browser information, and information stored in cookies. For more information and examples of using the Request object, see <a href="vihowgatheringinformationusingforms.htm">Gathering Information Using Forms</a>, <a href="vihowsharingdynamicinformation.htm">Sharing Dynamic Information</a>, and <a href="vihowcreatingportablescript.htm">Creating Portable Script</a>.</td>
</tr>
<tr valign=top>
<td width=25%><pre><code>Response</code></pre>
</td>
<td width=75%>Intrinsic IIS object that sends information to the user by writing information into a Web page stream or to the user's browser. For more information and examples of using the Response object, see <a href="vihownavigatingconditionally.htm">Navigating Conditionally</a> and <a href="vihowsharingdynamicinformation.htm">Sharing Dynamic Information</a>.</td>
</tr>
<tr valign=top>
<td width=25%><pre><code>Session, Application</code></pre>
</td>
<td width=75%>Intrinsic IIS objects that allow you to set and get values that persist between pages in your Web application. For more details, see <a href="vihowsharingdynamicinformation.htm">Sharing Dynamic Information</a>.</td>
</tr>
<tr valign=top>
<td width=25%><pre><code>Server</code></pre>
</td>
<td width=75%>Intrinsic IIS object that allows you to create instances of objects that are registered on the server, including bundled components and objects that you create.</td>
</tr>
<tr valign=top>
<td width=25%><pre><code>AdRotator, BrowserCapability, TextStream, and NextLink</code></pre>
</td>
<td width=75%>Components that are bundled with IIS, and allow you to display a changing set of images, store and get information about specific browsers, read and write to text files, and create an ordered path through pages. </td>
</tr>
<tr valign=top>
<td width=25%><pre><code>ActiveX Data Objects (ADO)</code></pre>
</td>
<td width=75%>Bundled components that allow you to connect to and query databases. For information and examples, see <a href="viovrdatabasetasks.htm">Database Tasks</a>, <a href="viovrdatabasesamples.htm">Database Samples</a>, and <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="adidxadooverview">
</object><a href=JavaScript:alink_4.Click()>ADO Overview</a>.</td>
</tr>
</table><br>
</BODY>
</HTML>

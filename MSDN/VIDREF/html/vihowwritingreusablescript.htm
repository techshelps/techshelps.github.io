<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Writing Reusable Script</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="vihowwritingreusablescript"></a>Writing Reusable Script</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vihowWritingReusableScript_C;vihowWritingReusableScriptC">
</object></p>
<p>
In most Web applications, you'll want to display blocks of HTML content on multiple pages or process script in multiple files.</p>
<p class=label>
<b>To use content in multiple files</b>
<ul type=disc>
<li>
Use the server-side #INCLUDE directive to dynamically insert the contents of other files into your file.</li>
</ul>
<p>
You can use the #INCLUDE directive to:
<ul type=disc>
<li>
Share HTML content between pages.<br><br></li>
<li>
Share script libraries.</li>
</ul>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;When you insert the contents of other files into your page, the <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="csdlgScriptOutlineHTMLEditor">
</object><a href=JavaScript:alink_2.Click()>Script Outline</a> window does not reflect their contents. Similarly, objects that are defined in the included file do not appear in the IntelliSense<sup>®</sup> statement completion drop-down list.</p>
<h2>Sharing HTML Content</h2>
<p>
Your application might contain HTML elements that you want to use on multiple pages: page navigation buttons (Next, Previous, Home), copyright information, a company logo, and so on. </p>
<p>
Instead of copying and pasting the text into multiple pages, you can place the information into files, and then reference the files that contain the desired text at the appropriate places in other your pages. Then if you need to update the text, you can change it in the file and all the pages that include the file automatically display the updated text.</p>
<p class=label>
<b>To reference information that is in another file</b>
<ul type=disc>
<li>
Use the server commands #INCLUDE FILE (for a path relative to the current file) or #INCLUDE VIRTUAL (for a path relative to the virtual root).</li>
</ul>
<p>
For example, the following lines include a file named Header.inc at the top of a page and a file named Footer.inc at the bottom of a page:</p>
<pre><code>&lt;!-- #INCLUDE FILE="Header.inc" --&gt;

Normal HTML text and script goes here.

&lt;!-- #INCLUDE FILE="Footer.inc" --&gt;
</code></pre>
<p>
When the file is processed by the Web server, the entire contents of the Header.inc and Footer.inc files are inserted into the file at the location of the #INCLUDE directive. Any script in Header.inc and Footer.inc is processed after all includes have been merged into the main file. You can even nest included files by including a file that contains another #INCLUDE directive.</p>
<p>
You can update an included file on your production server without stopping the Web server. However, you cannot include an #INCLUDE in a loop and you cannot recursively include files. For example, file A.inc might have the following line:</p>
<pre><code>&lt;!-- #INCLUDE FILE="B.inc" --&gt;
</code></pre>
<p>
In this case, you cannot include the following line in file B.inc</p>
<pre><code>&lt;!-- #INCLUDE FILE="A.inc" --&gt;
</code></pre>
<p>
An attempt to do so will result in an error.</p>
<h2>Sharing Script Libraries</h2>
<p>
In ASP pages, you can share script libraries using the #INCLUDE directive. This allows you to share subroutines and functions between multiple pages. For example, the following file contains a function that returns a string delimited with single quotation marks ('), and a subroutine that takes an array argument and displays the array values in an HTML table:</p>
<pre><code>&lt;!-- shared.inc --&gt;
&lt;%
Function SQLString(cString)
   SQLString = "'" &amp; cString &amp; "'"
End Function
%&gt;

&lt;% 
Sub Array2Table(aArray)
If IsArray(aArray) Then %&gt;
   &lt;TABLE&gt;
   &lt;% For i = 0 to UBound(aArray,1) - 1%&gt;
      &lt;TR&gt;
      &lt;% For j = 0 to UBound(aArray,2) - 1 %&gt;
         &lt;TD&gt; &lt;%= aArray(i,j) %&gt; &lt;/TD&gt;
      &lt;% Next %&gt;
      &lt;/TR&gt;
   &lt;% Next %&gt;
   &lt;/TABLE&gt;
&lt;%End If
End Sub %&gt;
</code></pre>
<p>
Instead of repeating this script in many of your pages, you can use the following line to make the subroutine and function available:</p>
<pre><code>&lt;!--#INCLUDE FILE="shared.inc" --&gt;
</code></pre>
<p>
Make sure that the #INCLUDE line comes before any calls to subroutines or functions in the file.</p>
<p>
Later, if you want to change some formatting options in the <code>Array2Table</code> subroutine (such as giving the table a border of 1 or a width of 100%), you can make the change in the subroutine in Shared.asp and all your pages will instantly display the table with the new characteristics.</p>
<p>
In client script, you can include references to other files in the &lt;SCRIPT&gt; block. Use the SRC attribute to specify the name of a file that contains script you want to include. For example, the following &lt;SCRIPT&gt; block includes a reference to a page containing error message routines.</p>
<pre><code>&lt;SCRIPT SRC="Errmsg.htm"&gt;&lt;/SCRIPT&gt;
</code></pre>
<p>
After you have included a reference to a file in this way, you can call script on the page as if it were in the current page.</p>
</BODY>
</HTML>

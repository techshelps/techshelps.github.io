<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Navigating Conditionally</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="vihownavigatingconditionally"></a>Navigating Conditionally</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vihowNavigatingConditionally_C;vihowNavigatingConditionallyC">
</object></p>
<p>
In static Web pages, you link pages together using the &lt;A&gt; tag, as in the following example:</p>
<pre><code>Click &lt;A HREF="home.asp"&gt;here&lt;/A&gt; to return to the home page.
</code></pre>
<p>
However, by using scripts, you can navigate through the application dynamically, specifying target pages based on conditions in the application. For example, a page in your application might ask the user for a password. If the user provides a correct password, the application displays a welcome page, otherwise it displays an error message.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can use the scripting object model and page objects to design navigation for your Web pages. For details, see <a href="vihowextendingscriptingobjectmodelacrosspages.htm">Extending the Scripting Object Model Across Pages</a>.</p>
<h2>Navigating from Client Script</h2>
<p>
If you are writing client script, you can control the page that the browser displays next by calling a method or setting a property.</p>
<p class=label>
<b>To navigate to another page in client script</b>
<ul type=disc>
<li>
In VBScript, call the <code>navigate</code> method of the browser's window object, passing it the URL of the page to go to.<p class=tl>
–or–</P></li>
<li>
In any scripting language, set the window object's location.href property to the URL of the target page.<p class=tl>
–or–</P></li>
<li>
In any scripting language, call the window object's open method, passing it the URL of the page to go to, along with other parameters. <p class=tl>
Calling this method allows you to specify an existing window or frame in which to display a page, start a new instance of the browser, and control the appearance of the browser.</P></li>
</ul>
<p>
For example, the following client script reads the value of a check box in a form, and depending on the user's preference, navigates to one of two possible pages:</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
Sub NextPage()
   ' The following reads the value of a checkbox called Checkbox1
   fReviewIntro = document.frmNavBar.Checkbox1.checked
   If fReviewIntro then
      window.navigate("http://MyServer/intro.htm")
   Else
      window.navigate("http://MyServer/page2.htm")
   End If
End Sub
&lt;/SCRIPT&gt;
</code></pre>
<p>
The following is a similar example, but sets the window object's href property to navigate:</p>
<pre><code>   If fReviewIntro Then
      window.location.href = "http://MyServer/intro.htm"
   End If
</code></pre>
<p>
For more information about using the window object, see <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_objects">
</object><a href=JavaScript:alink_2.Click()>DHTML Objects</a>.</p>
<h2>Navigating from Server Script</h2>
<p>
You can also control the next page displayed in a browser from server script. You use server script to navigate if the condition for moving to a specific page depends on information only available to the server&nbsp;— for example, information from a database, from a <code>Session</code> or <code>Application</code> object variable, and so on.</p>
<p class=label>
<b>To navigate in server script</b>
<ul type=disc>
<li>
Call the Response.Redirect method, passing the URL of the page to go to.</li>
</ul>
<p>
For example, you might want to make sure users log in to your application before viewing pages. If they attempt to navigate to a page deeper in your application without logging in first, you want to detect that and send them to the login page instead. In the following example, a Session object variable contains a flag indicating whether the user has already logged on:</p>
<pre><code>&lt;%
If Not Session("Been_to_Home_Page") Then 
 &nbsp; Response.Redirect "homepage.asp" 
End If
%&gt; 
</code></pre>
<h3>Buffering Response</h3>
<p>
By default, when the server sends a page to the browser, it streams the output as soon as it is composed. However, you can have the server buffer the output.If you do, the page is completely processed at the server before being sent. The advantage is that you can then call a method such as <code>Response.Redirect</code> to send a different page instead. If the page is not buffered, the server reports an error if you try to redirect a page after some of the current page has already been sent.</p>
<p class=label>
<b>To set buffering</b>
<ul type=disc>
<li>
Set the <code>Response</code> object's Buffer property to True or False, as in this example:<pre><code>&lt;% Response.Buffer = True %&gt;</code></pre>
</li>
</ul>
<pre></pre>
<h3>Managing Sequential Page Navigation</h3>
<p>
If you are navigating in server code, you can use a bundled component that can manage sequential navigation through a list of pages. Rather than maintaining URL references in a number of ASP pages, you can specify the sequential organization of pages in a single, easy-to-edit text file.</p>
<p class=label>
<b>To create sequential page navigation</b>
<ol>
<li>
Create a text file that contains a list of pages, one per line.<br><br></li>
<li>
Create a NextLink object.<br><br></li>
<li>
Use the NextLink object's methods to move between pages in the list.</li>
</ol>
<p>
The following example reads the link order from a text file and creates a table of contents on a single page.</p>
<pre><code>&lt;% Set NextLink=Server.CreateObject("MSWC.NextLink") %&gt;
&lt;% count=NextLink.GetListCount("/Nextlink.txt") %&gt;
&lt;% i=1 %&gt;
&lt;UL&gt;
&lt;% For i = 1 to count %&gt;
 &nbsp;&nbsp; &lt;LI&gt;&lt;A HREF="&lt;%= NextLink.GetNthUrl("/nextlink.txt",i) %&gt;"&gt;
 &nbsp;&nbsp; &lt;%= NextLink.GetNthDescription("/nextlink.txt",i) %&gt;&lt;/A&gt;
&lt;% Next %&gt;
</code></pre>
</BODY>
</HTML>

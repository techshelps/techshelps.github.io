<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Defining Properties and Methods in DHTML Scriptlets</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="vihowdefiningpropertiesmethodsindhtmlscriptlets"></a>Defining Properties and Methods in DHTML Scriptlets</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vihowDefiningPropertiesMethodsInDHTMLScriptlets_C">
</object></p>
<p>
DHTML scriptlets can expose any number of properties and methods. You can do so in two ways:
<ul type=disc>
<li>
<b>Create a JavaScript public_description object</b>&nbsp;&nbsp;&nbsp;The object's constructor function explicitly defines what properties and methods the scriptlet exposes.<br><br></li>
<li>
<b>Use default interface descriptions</b>&nbsp;&nbsp;&nbsp;You expose properties and methods by simply creating functions that follow specific naming conventions.</li>
</ul>
<p>
In general, using a public_description object is associated with using JavaScript, and using default interface descriptions with using VBScript. However, the only strict language requirement is that if you use a public_description object, the public_description object itself must be created in JavaScript. Any additional functions, such as those to define properties and methods, can be written in any scripting language. Similarly, although using default interface descriptions is associated with VBScript, you can actually write the functions in any language.</p>
<p>
Using a public_description object has several advantages. You can use any names for variables and functions that you want to expose as properties and methods, because you assign them public names in the public_description object. In addition, using the public_description object provides you with a convenient way to summarize and document the properties and methods that the scriptlet exposes.</p>
<h2>Creating a public_description Object</h2>
<p>
A public_description object is a JavaScript object that provides run-time access to the properties and methods defined by the object's constructor function. Any behavior that is not explicitly declared in the constructor is not available.</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>You must use the name public_description in lowercase characters as shown, or the scriptlet's properties and methods will not be exposed properly.</p>
<p>
A skeleton public_description with its constructor function looks like this:</p>
<pre><code>&lt;SCRIPT LANGUAGE="JavaScript"&gt;
 &nbsp; var public_description = new CreateScriptlet();
 &nbsp; Function CreateScriptlet(){
 &nbsp;&nbsp;&nbsp;&nbsp; // statements here to define properties and methods
 &nbsp; }
&lt;/SCRIPT&gt;
</code></pre>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>You do not use the constructor function to define events. For details, see <a href="vihowexposingeventsindhtmlscriptlets.htm">Exposing Events in Scriptlets</a>.</p>
<p>
When you create the public_description object, the constructor function that you assign to it can have any name, as long as the corresponding function appears somewhere in the scriptlet. In the constructor, declare the properties and methods you want to expose using the syntax listed in the following table.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=47%><b>Declaration in constructor</b></td>
<td class=label width=53%><b>Creates</b></td>
</tr>
<tr valign=top>
<td width=47%>This.<i>PropertyName</i> = <i>expression</i>; </td>
<td width=53%>Property as an expression. When the user gets the property, the value of <i>expression</i> is passed to the calling container. When the user sets the property, the value of <i>expression</i> is updated.</td>
</tr>
<tr valign=top>
<td width=47%>This.get_<i>PropertyName</i> = <i>function;</i><p>
This.put_<i>PropertyName</i> = <i>function;</i></p>
</td>
<td width=53%>Property as a function. The function called by the property definition can be in any active scripting language. To make a property read-only, do not provide the put_ function declaration; to make it write-only, do not provide the get_ function declaration.</td>
</tr>
<tr valign=top>
<td width=47%>This.<i>method </i>= <i>methodFunction</i>;</td>
<td width=53%>Method. </td>
</tr>
</table><br>
<p>
For example, the following scriptlet includes a marquee that exposes properties and methods for setting its text and color. The constructor defines two properties: version, a simple value, and marqueetext, created as a set of functions that illustrate how to get and set property values conditionally. </p>
<p>
The constructor also defines the method <code>togglecolor</code>, which calls a function in the scriptlet called setcolor:</p>
<pre><code>&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Scriptlets!&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE="JavaScript"&gt;
// public_description object used to declare scriplet
var public_description = new scriptletobject();

// general object description
function scriptletobject()
{
<span class=cfe><b> &nbsp; this.version = "1.0";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //property</b></span>
<span class=cfe><b> &nbsp; this.get_marqueetext = readtext;&nbsp;&nbsp; //property (read)</b></span>
<span class=cfe><b> &nbsp; this.put_marqueetext = writetext;&nbsp; //property (write)</b></span>
<span class=cfe><b> &nbsp; this.togglecolor = setcolor;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //method</b></span>
}

function readtext(){
 &nbsp; if (mrq1.innerText == ""){
 &nbsp;&nbsp;&nbsp;&nbsp; return "No text";}
 &nbsp; else{
 &nbsp;&nbsp;&nbsp;&nbsp; return mrq1.innerText;}
}

function writetext(newtext){
 &nbsp; if (newtext != ""){ 
 &nbsp;&nbsp;&nbsp;&nbsp; mrq1.innerText = newtext;}
}

function setcolor(){
 &nbsp; if (f1.color == "#ff0000"){
 &nbsp;&nbsp;&nbsp;&nbsp; // red, make it blue
 &nbsp;&nbsp;&nbsp;&nbsp; f1.color = "#0000ff";}
 &nbsp; else{
 &nbsp;&nbsp;&nbsp;&nbsp; // not red, make it red
 &nbsp;&nbsp;&nbsp;&nbsp; f1.color = "#ff0000";}
}
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;

&lt;BODY&gt;
&lt;B&gt;Sample scriptlet&lt;/B&gt;&lt;br&gt;

&lt;FONT ID="f1" COLOR="red"&gt;
&lt;MARQUEE ID="mrq1"&gt;Scriptlets are fun and easy!&lt;/MARQUEE&gt;
&lt;/FONT&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</code></pre>
<h2>Creating Default Interface Descriptions</h2>
<p>
If there is no public_description object defined in the scriptlet, the scriptlet container object exposes properties and methods using variables and functions in the scriptlet that follow certain naming conventions. </p>
<p>
To expose scriptlet properties and methods, use these conventions:
<ul type=disc>
<li>
To create a read/write property, declare a variable scoped at the page level (that is, not defined inside a function) and give it a <code>public_</code> prefix.<br><br></li>
<li>
To create a readable property as a function, define a function with the prefix <code>public_get_</code>.<br><br></li>
<li>
To create a writable property as a function, define a function with the prefix <code>public_put_</code>.<br><br></li>
<li>
To create a method, define a function with the prefix <code>public_</code>.</li>
</ul>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>When a property is exposed, its name in the host application does not have the <code>public_</code> prefix. For example, if you define a property called <code>public_MyTitle</code> in the scriptlet, its name in the host application is <code>MyTitle</code>.</p>
<p>
The following table shows examples of variables and functions in a scriptlet, and the resulting interface that they expose in the host application.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=41%><b>Example</b></td>
<td class=label width=25%><b>Exposed as</b></td>
<td class=label width=34%><b>Used in container</b></td>
</tr>
<tr valign=top>
<td width=41%><code>var public_Color = "red"</code></td>
<td width=25%>Property</td>
<td width=34%><code>vColor = SC1.Color</code><p>
<code>SC1.Color = "blue"</code></p>
</td>
</tr>
<tr valign=top>
<td width=41%><code>function public_get_C()</code></td>
<td width=25%>Property (read)</td>
<td width=34%><code>x = SC1.C</code></td>
</tr>
<tr valign=top>
<td width=41%><code>function public_put_C(param)</code></td>
<td width=25%>Property (write)</td>
<td width=34%><code>SC1.C = "test"</code></td>
</tr>
<tr valign=top>
<td width=41%><code>function public_look(param)</code></td>
<td width=25%>Method</td>
<td width=34%><code>SC1.look(param)</code></td>
</tr>
<tr valign=top>
<td width=41%><code>function look()</code></td>
<td width=25%>Not available<br>
(no <code>public_</code> prefix)</td>
<td width=34%></td>
</tr>
<tr valign=top>
<td width=41%><code>function get_C()</code></td>
<td width=25%>Not available<br>
(no <code>public_</code> prefix)</td>
<td width=34%></td>
</tr>
<tr valign=top>
<td width=41%><code>var Color = red;</code></td>
<td width=25%>Not available<br>
(no <code>public_</code> prefix)</td>
<td width=34%></td>
</tr>
<tr valign=top>
<td width=41%><code>var get_Color = red;</code></td>
<td width=25%>Not available<br>
(no <code>public_</code> prefix)</td>
<td width=34%></td>
</tr>
</table><br>
<p>
The following example shows a simple scriptlet containing a paragraph named "p1." The script block following the paragraph exposes a property called "text" and another called "color," which is defined using get and set functions that show how to set a property conditionally. The scriptlet also exposes a function called "settext."</p>
<pre><code>&lt;HTML&gt;&lt;HEAD&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;FONT ID="f1" color="black"&gt;
&lt;P ID="p1"&gt;This is a paragraph of text.&lt;/P&gt;
&lt;/FONT&gt;

&lt;SCRIPT LANGUAGE="JavaScript"&gt;
var public_text = p1.innerText;
<span class=cfe><b>function public_get_color()</b></span>{
 &nbsp; return f1.color;
}
<span class=cfe><b>function public_put_color(color)</b></span>{
 &nbsp; f1.color = color;
}
<span class=cfe><b>function public_settext(newtext)</b></span>{
 &nbsp; p1.innerText = newtext;
}
&lt;/SCRIPT&gt;
&lt;/BODY&gt;&lt;/HTML&gt;
</code></pre>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>The scriptlet reserves the function name prefixes <code>public_get_</code> and <code>public_put_</code> to define properties. For example, if the scriptlet contains a function named <code>public_get_MyText</code>, it will be treated as a property called <code>MyText</code>. If you attempt to call the function <code>public_get_MyText</code> as a method using the syntax <code>SC1.get_MyText()</code>, an error will result, because the function itself is exposed only as if it were a property named <code>MyText</code>.</p>
</BODY>
</HTML>

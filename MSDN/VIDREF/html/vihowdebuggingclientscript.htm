<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Debugging Client Script</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="vihowdebuggingclientscript"></a>Debugging Client Script</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vihowDebuggingClientScript_C;vihowDebuggingClientScriptC">
</object></p>
<p>
You can debug client script in any of these ways:
<ul type=disc>
<li>
Run a page containing the script to debug from within your Microsoft<sup>®</sup> Visual InterDev™ solution.<br><br></li>
<li>
Attach the Visual InterDev debugger to a process (page) already running in Microsoft<sup>®</sup> Internet Explorer.<br><br></li>
<li>
Respond to a syntax or run-time error in a script, called <i>just-in-time</i> debugging.<br><br></li>
<li>
Include a statement in script that starts the debugger.</li>
</ul>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;To debug client script in Internet Explorer, you must be using Internet Explorer 4.0. Debugging must also be enabled in Internet Explorer (this is the default). </p>
<p class=indent>
It is also highly recommended that you do not use Active Desktop™ mode of Internet Explorer when you are debugging, or set the option in Internet Explorer to launch each new instance of the browser in a new process.</p>
<p>
If a Web page contains a mixture of client and server script, you can use the Visual InterDev debugger to debug both. For details, see <a href="vihowdebuggingmixedclientserverscript.htm">Debugging Mixed Client and Server Script</a>.</p>
<h2>Enabling Client Script Debugging for ASP Pages</h2>
<p>
Before you can debug client script in ASP pages, you must enable debugging. You can manually enable debugging for your ASP application as described under "Enabling ASP Debugging on the Server" in the <a href="vicontroubleshooting.htm">Troubleshooting</a> topic. Alternatively, Visual InterDev can automatically enable debugging on the server as needed.</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>If you intend to work exclusively with client script in .htm files, you do not need to enable server debugging or perform the following procedure.</p>
<p class=label>
<b>To automatically enable client script debugging in ASP pages</b>
<ol>
<li>
In the Project Explorer, right-click the project and choose <b>Properties</b> to display the <b>Property Pages</b> dialog box.<br><br></li>
<li>
Choose the <b>Launch</b> tab.<br><br></li>
<li>
Under <b>Server script</b>, make sure that <b>Automatically enable ASP client-side debugging on launch</b> is checked.</li>
</ol>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;To debug script in ASP pages, you must be running version 4.0 or later of Microsoft<sup>®</sup> Internet Information Server (IIS).</p>
<p>
When this option is set, each time you start a debugging session Visual InterDev checks that the server is configured for debugging. This includes:
<ul type=disc>
<li>
Setting the IIS application to run in its own memory space (in COM terms, it runs "out of process").<br><br></li>
<li>
Enabling the IIS application's debugging options.<br><br></li>
<li>
Setting up a Microsoft<sup>®</sup> Transaction Server (MTS) package to allow you to attach the debugger to the Web application. The package's identify is set when you first start the debugging session by asking you to provide your name and password.</li>
</ul>
<p>
When you quit your debugging session, Visual InterDev restores the server debugging settings and out-of-process setting to their previous values.</p>
<h2>Debugging Client Script Within a Solution</h2>
<p>
If you are working in a Visual InterDev solution, you can debug a file by launching the debugger.</p>
<p class=label>
<b>To debug a script from within a solution</b>
<ol>
<li>
In Visual InterDev, open the project containing the page you want to debug and load the page into the editor.<br><br></li>
<li>
Make the page your project's start page. In the Project Explorer, right-click the page and choose <b>Set as Start Page</b>.<br><br></li>
<li>
Set a breakpoint in the script to debug. For details, see <a href="vicondebuggingscript.htm#vimscsettingbreakpoints">Setting Breakpoints</a>.<br><br></li>
<li>
From the <b>Debug</b> menu, choose <b>Start</b>.<br><br></li>
<li>
If debugging for client script in ASP pages has not been enabled as described above, Visual InterDev displays a message. Your options are:<ul type=disc>
<li>
If you are working with client script in an .htm file (not an .asp file) and you will not be navigating to an ASP page during your debugging session, choose Yes to proceed with debugging.<br><br></li>
<li>
If you are working in an .asp file, or if you will be navigating to an .asp file during your debugging session, choose Yes to proceed only if you are certain that debugging has already been manually enabled on the server for your project. Otherwise, choose No and enable debugging as described above. For details about setting debugging options in IIS, see "Performance Issues While Debugging Server Script" in the <a href="vicontroubleshooting.htm">Troubleshooting</a> topic.</li>
</ul>
</li>
<li>
If client debugging in ASP pages is enabled, and if this is the first time you have launched a debugging session since opening the project, you are prompted to provide user information that identifies the debugging process on the server. (You are prompted even if you are currently working with an .htm file, in case you navigate to an ASP page.) Enter your domain and name in the form <i>domain</i>\<i>name </i>and your password.<p class=atl>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>You might experience a delay the first time you launch a debugging session for the current project while Visual InterDev establishes the proper debugging configuration on the server.</p><p class=tl>
Visual InterDev launches Internet Explorer and loads the page into it. When Internet Explorer reaches the breakpoint, it stops and displays the source code in the editor window. If the breakpoint is in an event handler script, you must trigger the event to reach the breakpoint.</P></li>
<li>
If you find an error, fix it, and then save the file. If you do not have a working copy of the file, right-click the name of the file in the Project Explorer and choose <b>Get Latest Version</b> before you make modifications.<br><br></li>
<li>
From the <b>Debug</b> menu, choose <b>Restart</b>.</li>
</ol>
<h2>Debugging Client Script in a Running Document</h2>
<p>
If a client script is already running in Internet Explorer and you detect a problem, you can stop the script and debug it on the spot. You can debug a running document from within Visual InterDev or from within Internet Explorer.</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>If you are working with an ASP page, debugging must be enabled on the server. For details, see "Enabling ASP Debugging on the Server" in the <a href="vicontroubleshooting.htm">Troubleshooting</a> topic.</p>
<p>
You can attach to a running document only if attaching is enabled.</p>
<p class=label>
<b>To enable just-in-time debugging</b>
<ol>
<li>
From the <b>Tools</b> menu, choose <b>Options</b>.<br><br></li>
<li>
In the <b>Options</b> dialog box, choose <b>Debugger</b>.<br><br></li>
<li>
Under <b>Script</b>, check <b>Attach to programs running on this machine</b>.</li>
</ol>
<p>
You can attach to a document directly in Visual InterDev.</p>
<p class=label>
<b>To debug a running document in Visual InterDev</b>
<ul type=disc>
<li>
In Visual InterDev, choose <b>Processes</b> from the <b>Debug</b> menu. In the <b>Processes</b> dialog box, choose <b>Microsoft Internet Explorer</b>, choose <b>Attach</b>, and then choose the script you want to debug.<p class=tl>
–or–</P></li>
<li>
If you have already attached to a running document, in Visual InterDev, choose <b>Break</b> from the <b>Debug</b> menu. The debugger will stop at the next script statement that is executed.</li>
</ul>
<p>
If Visual InterDev is not already running, you can launch the debugger from Internet Explorer.</p>
<p class=label>
<b>To debug a running document from Internet Explorer</b>
<ol>
<li>
In Internet Explorer, choose <b>Script Debugger</b> from the <b>View</b> menu, and then choose <b>Break at Next Statement</b>. In the browser, trigger the event that calls the script you want to debug.<p class=tl>
–or–</P><p class=tl>
In Internet Explorer, choose <b>Script Debugger</b> from the <b>View</b> menu, and then choose <b>Open</b>.</P></li>
<li>
A new instance of Visual InterDev is launched and you are prompted to open a project. If Visual InterDev is already running, a second instance is launched.<br><br></li>
<li>
Open the project containing the file to debug. If the project is already open in another instance of Visual InterDev, you cannot open it again, so Visual InterDev creates a new solution and project instead.<br><br></li>
<li>
The page to debug is loaded into the editor. If necessary, get a working copy of the page. If the project was already open, the page is loaded as read-only file in the new project.</li>
</ol>
<p>
If you make changes to the file, save it and re-deploy it to the server. Refresh the file in Internet Explorer before running the script again.</p>
<h2>Debugging Client Script in Response to an Error or Debugger Statement</h2>
<p>
If Internet Explorer encounters a syntax or run-time error, you can use just-in-time debugging to find and fix it. You can also include a statement in your script, such as a <code>Stop</code> statement in Visual Basic<sup>®</sup>, Scripting Edition (VBScript) or a <code>debugger</code> statement in JScript™, to launch the debugger from within a script.</p>
<p>
You can launch the debugger in response to an error or debugger statement only if just-in-time debugging is enabled.</p>
<p class=label>
<b>To enable just-in-time debugging</b>
<ol>
<li>
From the <b>Tools</b> menu, choose <b>Options</b>.<br><br></li>
<li>
In the <b>Options</b> dialog box, choose <b>Debugger</b>.<br><br></li>
<li>
Under <b>Script</b>, check <b>Just-In-Time debugging</b>.</li>
</ol>
<p class=label>
<b>To debug in response to an error or debugger statement</b>
<ol>
<li>
When Internet Explorer encounters an error or a statement that starts the debugger, it displays an error message prompting you to debug. Choose <b>Yes</b>.<br><br></li>
<li>
A new instance of Visual InterDev is launched. If Visual InterDev is already running, a second instance is launched.<br><br></li>
<li>
Open the project containing the file to debug. If the project is already open in another instance of Visual InterDev, you cannot open it again, so Visual InterDev creates a new project instead.<p class=tl>
The page to debug is loaded into the editor. If necessary, get a working copy of the page. If the project was already open, the page is loaded as a read-only file in the new project.</P><p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you are debugging a client script generated by an .asp file, the line numbers reported in error messages refer to lines in the HTML document currently displayed in the browser. These usually do not correspond to line numbers in the original .asp file, because server script does not appear in the HTML output of an .asp file. For more information, see <a href="vihowdebuggingmixedclientserverscript.htm">Debugging Mixed Client and Server Script</a>.</p></li>
</ol>
<p>
If you make changes to the file, save it and re-deploy it to the server. Refresh the file in Internet Explorer before running the script again.</p>
</BODY>
</HTML>

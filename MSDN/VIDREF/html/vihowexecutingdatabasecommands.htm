<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Executing Database Commands Using the Data Environment</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="vihowexecutingdatabasecommands"></a>Executing Database Commands Using the Data Environment</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vihowExecutingDatabaseCommands_C">
</object></p>
<p>
The most convenient way to add database access to your Web pages is to use <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="victlRecordsetControl">
</object><a href=JavaScript:alink_2.Click()>Recordset</a> controls and data-bound controls. These tools are easy to add to your pages, and they expose a rich object model that provides powerful access to database functionality. For details, see <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="viovrDesign-TimeControls">
</object><a href=JavaScript:alink_3.Click()>Design-Time Controls</a>.</p>
<p>
In some cases, however, you might want to create script that executes database commands more directly. Doing so offers a few advantages: your page is smaller than if you use a Recordset control. You might also want to script database access directly if are creating your own user interface and don't want to rely on the design-time controls.</p>
<p>
You can script database access that goes through the server, or you can access databases directly from client script. For a discussion of server and client access to data, see <a href="vicondatabinding.htm">Data Binding</a>. </p>
<p>
To script server-based database access, you rely on the data environment for connection information and database commands, as described later in this topic. For client-based database access, you use Remote Data Service (RDS). For information about RDS, see the Microsoft RDS Web site at <A HREF="http://www.microsoft.com/data/rds/">http://www.microsoft.com/data/rds/</A>.</p>
<h2>Scripting the DE Object</h2>
<p>
To script server-based database access, you work with a special object — the DE object — that exposes an object model for executing commands and managing their results. The DE object model is an easier-to-use version of the <a href="vimsgado.htm">ActiveX® Data Objects (ADO)</a> model. For details about that model, see the <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dasdkadooverview">
</object><a href=JavaScript:alink_4.Click()>Microsoft ActiveX Data Objects (ADO) Overview</a>.</p>
<p>
Before scripting database access, you must add a <a href="vimsgdataconnection.htm">data connection</a> to your project's <a href="vimsgdataenvironment.htm">data environment</a>. When you do, Microsoft<sup>®</sup> Visual InterDev™ adds script to the <a href="vimsgglobal.asafile.htm">Global.asa</a> file that creates a DE object incorporating the connection information. When you write data access script in your pages, you can reference this DE object, and Visual InterDev will automatically know how to connect to the database.</p>
<p>
After adding a data connection, you add one or more <a href="vimsgdatacommand.htm">data commands</a> to the data connection. Each data command provides you with access to a database object, which can include a table or view, an SQL command, or a stored procedure.</p>
<h3>Executing a Command</h3>
<p>
You can execute database commands by referencing the corresponding command object in your script.</p>
<p class=label>
<b>To execute a database command</b>
<ol>
<li>
Be sure that the command you want to execute is defined as a data command in the data environment. For details, see <a href="vihowgettingrecords.htm">Getting Records</a>.<br><br></li>
<li>
In your Web page, use server script to reference the DE object. If you have enabled the scripting object model for the page, use this script:<pre><code>&lt;%
 &nbsp; thisPage.createDE()
%&gt;
</code></pre>
<p class=tl>
If you are not using the scripting object mode, use the following script:</P><pre><code>&lt;%
Set DE = Server.CreateObject("DERuntime.DERuntime")
DE.Init(Application("DE"))
%&gt;
</code></pre>
</li>
<li>
In server script, execute the command you want to use by referencing its name, using this syntax: <pre><code><b>DE</b>.<i>commandObjectName</i>.
</code></pre>
<p class=tl>
For example, to execute the SQL query associated with a command object called Authors, use this script:</P><pre><code>&lt;%DE.Authors%&gt;
</code></pre>
</li>
<li>
If the command takes parameters (such as a command that references a stored procedure or parameterized query), you can pass the parameters when you call it, using this syntax: <pre><code><b>DE</b>.<i>commandObjectName </i>(<i>parameter1, parameter2, </i>[...]).
</code></pre>
<p class=tl>
You can pass parameters as variables, literals (character strings should be passed using the correct quotation marks for the language you are scripting in), or any other valid expression. </P><p class=tl>
For example, to execute a stored procedure that takes two parameters, reference its corresponding command object with script such as this:</P><pre><code>&lt;%DE.updateAuthors ("A101", txtAuthorLname, 100.00, "London")%&gt;
</code></pre>
</li>
<li>
If the command returns a value, you can assign it to a variable when you execute the command, using script like this:<pre><code>&lt;%iRetValue = DE.updateAuthors ("A101", txtLname, 100.00)%&gt;
</code></pre>
</li>
</ol>
<h3>Working with Result Sets</h3>
<p>
All commands return a result set, although in some cases (as with update queries) the result set is empty. But if your command returns a useful result set, you can navigate in it and extract its contents to display on a page. </p>
<p>
To provide access to the result set, the DE object dynamically creates a result set object based on the command object, named using this syntax: </p>
<pre><code><b>DE</b>.<b>rs</b><i>commandObjectName</i>. 
</code></pre>
<p>
You can set a variable to this object, and then reference it in your scripts.</p>
<p>
When a result set is generated, it includes a pointer indicating which record is the current record. Any operations that you perform, such as displaying data, navigating, or updating, are always performed with respect to the current record. To work with a different record, you must first navigate to that record.</p>
<p>
The procedures outlined below allow you to work with a result set that is used entirely on one page. For example, you can use the procedures here to create a page that lists all the records from a result set in a table in one page.</p>
<p class=label>
<b>To extract the contents of a result set</b>
<ol>
<li>
After creating the result set, set a variable to point to the DE result set object. The DE result set object is named after your command object, but has the "rs" prefix. For example, the following two statements create the result set, and then set a variable to point to it:<pre><code>&lt;%
DE.Authors
<span class=cfe><b>Set rs = DE.rsAuthors</b></span>
%&gt;
</code></pre>
</li>
<li>
Extract individual values from the Fields collection of the result set object, using syntax such as the following:<pre><code>&lt;%
DE.Authors
Set rs = DE.rsAuthors
lname = <span class=cfe><b>rs.Fields("au_lname")</b></span>
%&gt;
</code></pre>
</li>
</ol>
<p>
To move to a different record, you use navigation methods on the recordset.</p>
<p class=label>
<b>To navigate in a result set</b>
<ol>
<li>
Call the moveNext, movePrevious, moveFirst, or moveLast methods of the result set object.<br><br></li>
<li>
To determine whether you are at the end or beginning of the result set, test the EOF or BOF properties.</li>
</ol>
<p>
The following script shows a complete example of how to script the DE object to get information from an Authors table. The script opens a recordset based on a data command object called "Authors." It then navigates from the beginning to the end of the result set, displaying for each record the contents of the <code>au_lname</code> field.</p>
<pre><code>&lt;%
Set DE = Server.CreateObject("DERuntime.DERuntime")
DE.Init(Application("DE"))
DE.Authors
set rs = DE.rsAuthors
rs.moveFirst
Do While Not rs.EOF
%&gt;
 &nbsp; Next name = &lt;%=rs.Fields("au_lname")%&gt;&lt;br&gt;
 &nbsp; &lt;%
 &nbsp; rs.moveNext
Loop
%&gt;
</code></pre>
<p>
For more information about navigation methods, see the <object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dasdkadooverview">
</object><a href=JavaScript:alink_5.Click()>Microsoft ActiveX Data Objects (ADO) Overview</a>.</p>
<h3>Paging Records</h3>
<p>
If you want to display a single record from the result set on a page and then provide navigation controls to page between records, the situation is more complex, as described in <a href="vicondatabinding.htm">Data Binding</a>. </p>
<p>
If that is your goal, you will find it more convenient to use a combination of a <object id=alink_6 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="victlRecordsetControl">
</object><a href=JavaScript:alink_6.Click()>Recordset</a> control, data-bound controls, and a <object id=alink_7 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="victlRecordsetNavBarControl">
</object><a href=JavaScript:alink_7.Click()>RecordsetNavbar</a> control. </p>
<p>
For details, see <a href="vihowdisplayingrecords.htm">Displaying Records</a> and <object id=alink_8 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="viovrDesign-TimeControls">
</object><a href=JavaScript:alink_8.Click()>Design-Time Controls</a>. </p>
<p>
For additional information about designing paging, see the Microsoft<sup>®</sup> Visual Studio™ Web site at <A HREF="http://www.microsoft.com/vinterdev/techmat/default.htm">http://www.microsoft.com/vinterdev/techmat/default.htm</A>.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating Forms with Design-Time Controls</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="vihowcreatingformswithdesigntimecontrols"></a>Creating Forms with Design-Time Controls</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vihowCreatingFormsWithDesignTimeControls_C">
</object></p>
<p>
One of the primary advantages of using the scripting object model is that it simplifies the script required to process the information in Web page forms. By using the scripting object model and design-time controls, you can create the user interface for your application in much the same way you create forms in Microsoft<sup>®</sup> Visual Basic<sup>®</sup> and Microsoft<sup>®</sup> Access.</p>
<p>
You can create a user-interface using the design-time controls listed in the following table.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td width=33%><a href="victlbuttoncontrol.htm">Button</a></td>
<td width=33%><a href="victltextboxcontrol.htm">Textbox</a></td>
<td width=34%><a href="victllistboxcontrol.htm">Listbox</a></td>
</tr>
<tr valign=top>
<td width=33%><a href="victllabelcontrol.htm">Label</a></td>
<td width=33%><a href="victlgridcontrol.htm">Grid</a></td>
<td width=34%><a href="victlcheckboxcontrol.htm">Checkbox</a></td>
</tr>
<tr valign=top>
<td width=33%><a href="victloptiongroupcontrol.htm">OptionGroup</a></td>
<td width=33%><a href="victlrecordsetcontrol.htm">Recordset</a></td>
<td width=34%><a href="victlrecordsetnavbarcontrol.htm">RecordsetNavBar</a></td>
</tr>
</table><br>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Design-time controls are implemented using script stored in the Script Library. Do not alter the contents of the library, or the controls might not work properly.</p>
<h2>Selecting a Target Platform</h2>
<p>
Before you add controls to your page, you must decide what platform you will be using for your application: server or client. Your choice determines how the design-time controls are created and where events occur. Use the following table as your guide.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=18%><b>Target platform</b></td>
<td class=label width=48%><b>Result</b></td>
<td class=label width=34%><b>Choose if</b></td>
</tr>
<tr valign=top>
<td width=18%>Server</td>
<td width=48%><ul type=disc>
<li>
Your page is an .asp file.<br><br></li>
<li>
Script objects are created in server script. Their properties, methods, and events are available only in server script.<br><br></li>
<li>
Scripting object model events (such as <code>onclick</code>) are processed in server script. For more information, see <a href="vihowwritingscriptforscriptobjects.htm">Writing Script for Script Objects</a>.<br><br></li>
<li>
Data binding occurs on the server.</li>
</ul>
</td>
<td width=34%>Your application will be used by a variety of browsers. Advantages include:<ul type=disc>
<li>
The application will run the same on all browsers.<br><br></li>
<li>
You want to be able control access to the application logic and database connection string information.</li>
</ul>
</td>
</tr>
<tr valign=top>
<td width=18%>Client</td>
<td width=48%><ul type=disc>
<li>
Your page can be either an .asp or .htm file.<br><br></li>
<li>
Script objects are created using client script. Their properties, methods, and events are available only in server script.<br><br></li>
<li>
Events are processed in client script.&nbsp; For more information, see <a href="vihowwritingscriptforscriptobjects.htm">Writing Script for Script Objects</a>.<br><br></li>
<li>
Data binding can occur on either the client or the server.</li>
</ul>
</td>
<td width=34%>The application will be used only by browsers that support Dynamic HTML (DHTML) such as Microsoft<sup>®</sup> Internet Explorer 4.0. The advantage is typically a better user experience. In addition, your application can use the DHTML object model.</td>
</tr>
</table><br>
<p>
It is important to understand that the target platform not only determines where a script object is created, but also how you can write script for it. For example, if the target platform for a control is Server, its corresponding script object is created in server script. You can only access the script object's properties, methods, and events in server script&nbsp;— the script object is not available to client script. The reverse is also true: if a control's target platform is Client, the properties, events, and methods of the corresponding script object are not available in server script.</p>
<p>
Choosing a target platform does not mean that all design-time controls generate script for that platform. The scripting platform for an individual control, and for individual scripts, will depend on how the control is used. For example, the target platform for a Save button in a form might be Server so that the script can save information to a database. But another script, even for the same button, might run on the client in order to validate the data before it is saved.</p>
<p>
You can choose a target platform for an individual page or as the default for your project.</p>
<p class=label>
<b>To specify a target platform for a page</b>
<ol>
<li>
Switch to <b>Source</b> view.<br><br></li>
<li>
Right-click the page and choose <b>Properties</b>.<br><br></li>
<li>
In the <b>Property Pages</b> window, choose the <b>General</b> tab.<br><br></li>
<li>
Under <b>DTC scripting platform</b>, choose <b>Server</b> or <b>Client</b>.</li>
</ol>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you change target platforms, existing event-handling scripts are not automatically changed to reflect the new setting, but you can do this manually. For example, when changing the target from Server to Client, event handlers in server &lt;SCRIPT RUNAT="Server"&gt; blocks need to be moved to client &lt;SCRIPT&gt; blocks. For details, see <a href="vihowwritingscriptforscriptobjects.htm">Writing Script for Script Objects</a>.</p>
<p>
If you know you want to use the same platform all the time, you can set the default target for a project. All pages you create after that will reflect your default setting.</p>
<p class=label>
<b>To specify a target platform for a project</b>
<ol>
<li>
In the Project Explorer, right-click the project, and then choose <b>Properties</b>.<br><br></li>
<li>
In the <b>Property Pages</b> window, choose the <b>Editor Defaults</b> tab.<br><br></li>
<li>
Under <b>DTC scripting platform</b>, choose <b>Server</b> or <b>Client</b>.</li>
</ol>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you already have pages with the design-time controls on them, changing the project default does not change the settings for those pages.</p>
<p>
By default, all design-time controls on the page inherit the target platform from the current page. However, you can change the target platform for an individual control. For example, some of the design-time controls on your page might be bound to a database and use the server as a target. Others might not be data-bound and use the client as a target.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Data-bound design-time controls must use the same target platform as the recordset object that they are bound to.</p>
<p class=label>
<b>To specify a target platform for an individual control</b>
<ol>
<li>
Switch to <b>Source</b> view.<br><br></li>
<li>
Right-click the control, and then choose <b>Properties</b>.<br><br></li>
<li>
In the <b>Property Pages</b> window, choose the <b>General</b> tab.<br><br></li>
<li>
Under <b>Scripting Platform</b>, select <b>Client</b> or <b>Server</b>.</li>
</ol>
<h2>Adding Controls to a Page</h2>
<p>
You add design-time controls to the page by dragging them and then setting their properties.</p>
<p class=label>
<b>To add design-time controls</b>
<ol>
<li>
Make sure that you have set options to view controls graphically. From the <b>View</b> menu, choose <b>View Controls Graphically</b>. <p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;To set this option as default, use the <b>HTML</b> node of the <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="csdlgHTMLEditorOptions(HTMLOptionsDialogBox)">
</object><a href=JavaScript:alink_2.Click()>Options</a> dialog box.</p></li>
<li>
Drag the design-time control from the <b>Design-Time Controls</b> tab of the Toolbox to your page.<p class=tl>
If the target platform for a page is Server and the scripting object model is not already enabled for the page, you are prompted to enable it now. You must enable the scripting object model for design-time controls to work properly.</P><p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Do not define forms using the HTML &lt;FORM&gt; tag. The scripting object model framework creates a form for you.</p></li>
<li>
Right-click the control, and then choose <b>Properties</b>. The custom <b>Properties</b> window for that control appears.<br><br></li>
<li>
Set options for the control as required.</li>
</ol>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;When you print a page in the HTML editor, some design-time controls might not be displayed with the values you set. If you put more than one instance of a design-time control on a page — for example, if you put multiple Textbox or Button controls on a page — the second and subsequent ones will display their default values in the printout.</p>
<p>
By default, design-time controls are displayed using their graphical representation in both Design view and Source view. For example, the Button design-time control appears as a button. </p>
<p>
You can choose to view the controls as text. However, while the control is in text mode, it cannot communicate with other controls on the page, which can cause the control not to function properly. For details, see <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="csdlgSourceViewHTMLEditor">
</object><a href=JavaScript:alink_3.Click()>Source View, HTML Editor</a>.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;ASP pages do not render properly in Quick view, because Quick view does not run server script. Therefore, Quick view does not allow you to preview script objects whose target platform is server.</p>
<p>
You can cut, copy, and paste design-time controls as well. However, you can do this successfully only if you copy the graphical version of a control, not the text version. For details about viewing controls as text or graphically, see <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="csdlgSourceViewHTMLEditor">
</object><a href=JavaScript:alink_4.Click()>Source View, HTML Editor</a>.</p>
<p>
To make it easier for you to specify options for design-time controls, you can set their properties using custom property pages.</p>
<p class=label>
<b>To set properties for design-time controls</b>
<ul type=disc>
<li>
Right-click the control, and then choose <b>Properties</b>.<p class=tl>
-or-</P></li>
<li>
In the Properties grid, move to <b>(Custom)</b> and then click the button in the value field for that property.</li>
</ul>
<p>
Each design-time control supports different options. For details about the properties you can set for each, press F1 in the Property Pages dialog box.</p>
<p>
The design-time controls generate script in the page to implement the corresponding script object. You can preview the generated text for a control.</p>
<p class=label>
<b>To preview generated text</b>
<ol>
<li>
Switch to <b>Source</b> view.<br><br></li>
<li>
Right-click the design-time control, and then choose <b>Show Run-time Text</b>.</li>
</ol>
<p>
You can permanently convert a design-time control to run-time text, which leaves the script required to create the script object, but strips the information used to communicate with other controls and to display the control graphically.</p>
<p>
You might do this if you wanted to customize the generated text, but this is not the recommended way to work with design-time controls.</p>
<p class=label>
<b>To convert a design-time control permanently to text</b>
<ul type=disc>
<li>
In Source view, right-click the design-time control, and then choose <b>Convert to Run-time Text</b>.</li>
</ul>
<p class=indent>
<B><b>Warning</b></B>&nbsp;&nbsp;&nbsp;Converting to run-time text is a one-way operation. You cannot undo the operation to return to a graphical view. You should make this conversion only if you are comfortable customizing the control's run-time text.</p>
<h2>Creating a Form with Design-Time Controls</h2>
<p>
When you use the scripting object model and design-time controls, you do not create forms using the HTML &lt;FORM&gt; tag. Instead, you drag the design-time controls that you need onto the page.</p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;An easy way to assemble a form with design-time controls is to use the FormManager. For details, see <a href="viconsimplifyingdataentrypages.htm">Simplifying Data Entry Pages</a> and <a href="vihowscriptingforms.htm">Creating Event-Driven Forms</a>.</p>
<p>
To define specific behavior for individual controls, you can write event handlers in script. Rather than adding an HTML Submit button, you can add a Save button that calls a forms-processing method, as in the following VBScript example:</p>
<pre><code>Sub btnSave_onclick
 &nbsp; ProcessForm()
End sub
</code></pre>
<p>
The forms-handling procedure can be anywhere else on the page. It can extract values from the form by requesting value of the controls on the page. The following example tests the value of a text box called txtName:</p>
<pre><code>Sub ProcessForm()
 &nbsp; If txtName.value = "" then
 &nbsp;&nbsp;&nbsp;&nbsp; txtName.value = "Please enter a name!"
 &nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp; ' etc.
 &nbsp; End if
End sub
</code></pre>
<p>
For more information, see <a href="vihowwritingscriptforscriptobjects.htm">Writing Script for Script Objects</a>.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Debugging Remotely</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="vihowdebuggingremotely"></a>Debugging Remotely</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vihowDebuggingRemotely_C">
</object></p>
<p>
In addition to debugging scripts and processes that are running on your computer, you can debug those that are running on another computer. This is referred to as <i>remote debugging</i>. In Microsoft<sup>®</sup> Visual InterDev™, remote debugging is useful for debugging server scripts running in ASP pages on Microsoft<sup>®</sup> Internet Information Server (IIS).</p>
<p>
Ordinarily, to debug server script in an ASP page, you would have to install Visual InterDev on the server and then debug scripts locally on that server. However, with remote debugging, you can attach the debugger running on your computer to a script running on the server and issue debugging commands across the network.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If IIS and Visual InterDev are running on the same computer, you can debug server scripts using that copy of Visual InterDev, without remote debugging.</p>
<p>
For the most part, remote debugging is similar to debugging locally, except for these differences:
<ul type=disc>
<li>
You must perform some extra setup steps before you can use remote debugging.<br><br></li>
<li>
Only one user can use remote debugging on a server at a time.</li>
</ul>
<p>
The information below explains how to set up remote debugging, and then how to establish a remote debugging session.</p>
<h2><a name="vimscsettingupremotedebugging"></a>Setting Up Remote Debugging</h2>
<p>
To use remote debugging, you must perform several setup steps. The first step is to be sure that the proper debugging components have been installed on the server. A full server installation of the Visual InterDev will normally load the proper components. However, if you did not perform a full server installation, or if you are not sure, you can follow the procedure below.</p>
<p class=label>
<b>To install debugging components on the server</b>
<ol>
<li>
On the server computer, start the Visual Studio Enterprise Edition setup program.<br><br></li>
<li>
Under <b>Add/Remove Options</b>, choose <b>Server Applications and Tools</b>.<br><br></li>
<li>
On the next page, select <b>Launch BackOffice Installation Wizard</b>, and then choose <b>Install</b>.<br><br></li>
<li>
When the BackOffice Business Solutions wizard is displayed, choose <b>Custom</b> and then choose <b>Next</b>.<br><br></li>
<li>
Proceed until you see the page offering you a list of components to install. Uncheck all components except the following:<ul type=disc>
<li>
<b>Remote Machine Debugging</b><br><br></li>
<li>
<b>Visual InterDev Server</b></li>
</ul>
</li>
<li>
Proceed with the installation.</li>
</ol>
<p>
To debug remotely, you must be able to provide the name and password of a Windows NT<sup>®</sup> user who has administration privileges for the server. All developers who will be using remote debugging should be established as administration-level users on the server computer. Use Windows NT facilities on the server to specify administration privileges for all users who will be debugging remotely.</p>
<p>
Remote debugging uses Distributed COM (DCOM) to communicate between the client and server computers. You must therefore configure DCOM on the server to allow a remote user to attach the debugger to a process there.</p>
<p class=label>
<b>To configure DCOM on the server for remote debugging</b>
<ol>
<li>
From the Windows<sup>®</sup> Start menu on the server, choose <b>Run</b>, and then in the <b>Open</b> box type <b>Dcomcnfg.exe</b> at the prompt.<br><br></li>
<li>
In the <b>Distributed COM Configuration Properties</b> window, select <b>Machine Debug Manager</b>, and then choose <b>Properties</b> to display the <b>Machine Debug Manager Properties</b> dialog box.<br><br></li>
<li>
In the <b>Security</b> tab, choose <b>Use custom access permissions</b>, and then choose <b>Edit</b>.<br><br></li>
<li>
In the <b>Registry Value Permissions</b> dialog box, verify that <b>Allow Access</b> is selected in the <b>Type of Access</b> list, and then choose <b>Add</b>.<br><br></li>
<li>
In the <b>Add Users and Groups</b> dialog box, select the server's name from the <b>List Names From</b> list. The server name typically is in the form \\<i>server</i> and appears at the top of the list.<br><br></li>
<li>
Under <b>Names</b>, choose <b>Administrators</b>, choose <b>Add</b>, and then choose <b>OK</b>.<br><br></li>
<li>
Return to the <b>Security</b> tab, choose <b>Use custom launch permissions</b>, and then choose <b>Edit</b>. <p class=tl>
Verify that <b>Allow Launch</b> is selected in the <b>Type of Access</b> list, choose <b>Add</b>, and then add administrators as you did in Steps 4 through 6.</P></li>
<li>
Return to the <b>Distributed COM Configuration Properties</b> window, select <b>MTS Client Export</b>, and then choose <b>Properties</b>. Repeat Steps 4 through 7.<br><br></li>
<li>
Return to the <b>Distributed COM Configuration Properties</b> window, select <b>Catalog Class</b>, and then choose <b>Properties</b>. Repeat Steps 4 through 7.</li>
</ol>
<h2>Enabling Debugging for ASP Pages</h2>
<p>
Before you can debug remotely, you must enable ASP debugging. You can manually enable debugging for your ASP application as described under "Enabling ASP Debugging on the Server" in the <a href="vicontroubleshooting.htm">Troubleshooting</a> topic. Alternatively, Visual InterDev can automatically enable debugging on the server as needed.</p>
<p class=label>
<b>To automatically enable script debugging in ASP pages</b>
<ol>
<li>
In the Project Explorer, right-click the project and choose <b>Properties</b> to display the <b>Property Pages</b> dialog box.<br><br></li>
<li>
Choose the <b>Launch</b> tab.<br><br></li>
<li>
Under <b>Server script</b>, make sure both options, <b>Automatically enable ASP server-side debugging on launch</b> and <b>Automatically enable ASP client-side debugging on launch</b>, are checked.</li>
</ol>
<p>
When this option is set for your project, each time you start a debugging session, Visual InterDev checks that the server is appropriately configured for debugging. This includes:
<ul type=disc>
<li>
Setting the IIS application to run in its own memory space (in COM terms, it runs "out of process").<br><br></li>
<li>
Enabling the IIS application's debugging options.<br><br></li>
<li>
Setting up a Microsoft Transaction Server (MTS) package to allow you to attach the debugger to the Web application. The package's identify is set when you first start the debugging session by asking you to provide your name and password.<p class=atl>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>You can perform the first two steps manually on the server. For details, see "Enabling ASP Debugging on the Server" in the <a href="vicontroubleshooting.htm">Troubleshooting</a> topic.</p></li>
</ul>
<p>
When you quit your debugging session, Visual InterDev restores the server debugging settings and out-of-process setting to their previous values.</p>
<h2><a name="vimscrunningdebuggerremotely"></a>Running the Debugger Remotely</h2>
<p>
After the server has been configured for remote debugging, you can debug on the server in much the same way you do locally.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;It is highly recommended that you do not use Active Desktop mode of Microsoft<sup>®</sup> Internet Explorer 4.0 when you are debugging.</p>
<p>
There are two ways to start remote debugging:
<ul type=disc>
<li>
<b>Launch a project using the debugger</b>&nbsp;&nbsp;&nbsp;This works just like debugging locally, except that Visual InterDev automatically attaches the debugger to the server and starts remote debugging.<br><br></li>
<li>
<b>Attach to a process that is already running on the server</b>&nbsp;&nbsp;&nbsp;This is useful if you become aware of a server script problem while the application is running. You can detect an error in server script if the server returns error text instead of your page, or if the browser appears hung when you request an .asp file.</li>
</ul>
<p>
If you launch a project using the debugger, you can start debugging at the first line of script. Otherwise, you will only be able to debug script that runs after you attach to the process. In addition, if you launch a project, you will be able to edit the files you are debugging. When you attach to a process, you can see the files you are debugging, but cannot edit them there.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Because remote debugging ties up process threads on the server, it is recommended that while a remote debugging session is in progress, other users avoid using the server.</p>
<h3>Launching Remote Debugging</h3>
<p>
You launch remote debugging from within Visual InterDev.</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>Before debugging server script, make sure you have enabled debugging as described above.</p>
<p class=label>
<b>To launch a project using the debugger</b>
<ol>
<li>
In Visual InterDev, open the file to debug, and if needed, set breakpoints.<br><br></li>
<li>
Make the page your project's start page. In the Project Explorer, right-click the page and choose <b>Set as Start Page</b>.<br><br></li>
<li>
From the <b>Debug</b> menu in Visual InterDev, choose <b>Start</b>.</li>
</ol>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>If another user is already debugging on the server, Visual InterDev displays an error message and you will not be able to start the debugger.
<ol start=4>
<li>
If this is the first time you have started the debugger since opening the current project, you are prompted to provide user information used to identify the debugging process on the server. <p class=tl>
Enter the domain and name (in the form <i>domain</i>\<i>name</i>) and password of a user with administrative privileges. For more details, see <a href="#vimscsettingupremotedebugging">Setting Up Remote Debugging</a> earlier in this topic.</P></li>
<li>
After the debugger starts and attaches to the document, proceed with debugging as normal.</li>
</ol>
<h3>Attaching to a Running Process</h3>
<p>
If debugging is already enabled on the server for your project and you detect an error while the application is running, you can attach the debugger to it.</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>For information about setting server debugging options, see "Enabling ASP Debugging on the Server" in the <a href="vicontroubleshooting.htm">Troubleshooting</a> topic.</p>
<p class=label>
<b>To attach to a running process</b>
<ol>
<li>
If it is not already open, start Visual InterDev.<br><br></li>
<li>
From the <b>Debug</b> menu, choose <b>Processes</b>.<br><br></li>
<li>
In the <b>Processes</b> dialog box, type the name of the computer to attach to. If you don't know the computer name, choose <b>Machine</b> and use the <b>Browse for Computer</b> dialog box to locate the server where you want to debug.<br><br></li>
<li>
In the machine processes list, select your project, and then choose <b>Attach</b>.<p class=tl>
The process you selected appears in the <b>Debugged Processes</b> list.</P></li>
<li>
Close the <b>Processes</b> dialog box and use the <b>Running Documents</b> window to select the ASP page to debug.<p class=tl>
You can step through scripts and test variables and expressions normally. However, to run a page you must navigate to it in your browser. In addition, you cannot edit the pages that you are debugging.</P></li>
</ol>
</BODY>
</HTML>

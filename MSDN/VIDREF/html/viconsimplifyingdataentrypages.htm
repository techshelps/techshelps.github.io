<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Simplifying Data Entry Pages</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="viconsimplifyingdataentrypages"></a>Simplifying Data Entry Pages</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="viconSimplifyingDataEntryPages_C">
</object>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="viconSimplifyingDataEntryPages_T">
</object></p>
<p>
Would you like to maintain a single page that accommodates all aspects of data entry instead of several pages, each with similar sets of labels, text boxes, and buttons? Would you like to concentrate on the functionality and leave the details of scripting and multiple object models to Microsoft<sup>®</sup> Visual InterDev™?</p>
<p>
Using the new FormManager design-time control to generate run-time script, you can create a versatile page that uses modes for displaying, editing, and adding records to your database.</p>
<p>
Instead of scripting your own HTML forms, the modes you specify for the FormManager handle property settings for controls and events on the page. Using modes, you can simplify your Web application design by creating multipurpose pages.</p>
<p>
The FormManager control makes creating a data entry page quick and simple, and later on, maintenance is easy. Just open the file and change the FormManager's properties. For more information about this control, see <a href="victlformmanagercontrol.htm">FormManager Design-Time Control</a> and <a href="vihowscriptingforms.htm">Creating Event-Driven Forms</a>.</p>
<p class=label>
<b>A Data-bound form on a Web page</b></p>
<p>
<img src="vi52f81.gif" border=0></p>
<p>
To accomplish the data entry tasks, this page has two modes:
<ul type=disc>
<li>
<b>Display mode</b> provides a read-only view of a record. This is also the mode used when the page is opened.<br><br></li>
<li>
<b>Edit mode</b> allows the user to enter and save changes to the record, add records, and delete records.</li>
</ul>
<p>
To simplify the example, this page displays a few fields for each record. In a real application, you can place as many fields as you need to accomplish your goal. The data-binding concepts are the same regardless of the number of fields. To see the FormManager in action, see the <a href="vismpadataentryform.htm">Data Entry Form Sample</a>.</p>
<p>
Before creating a data entry page, be sure you have the following items ready.</p>
<p>
<img src="vi52f82.gif" border=0></p>
<p>
For more information about creating Active Server Pages, see <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="Creating ASP Pages">
</object><a href=JavaScript:alink_3.Click()>Creating ASP Pages</a>. You can also create HTML pages using these controls. For more information, see Changing Target Platforms in <a href="vihowcreatingformswithdesigntimecontrols.htm">Creating Forms With Design-Time Controls</a>.</p>
<p>
Once you are ready to begin, you can add data entry controls and modes to your ASP page with the following steps:
<ul type=disc>
<li>
<a href="#vimsccreatingdataentryform">Creating the Data Entry Form</a><br><br></li>
<li>
<a href="#vimscsimplifyingscriptingwithformmodes">Simplifying Scripting with Form Modes</a><br><br></li>
<li>
<a href="#vimsccompletingdataentrypage">Completing the Data Entry Page</a></li>
</ul>
<h2><a name="vimsccreatingdataentryform"></a>Creating the Data Entry Form</h2>
<p>
You can create a form on a Web page using data-bound controls. You may have used HTML <code>&lt;FORM&gt;</code> and <code>&lt;INPUT&gt;</code> tags in the past, but data entry forms are most easily implemented and maintained using Recordset and data-bound controls because you get the same scripting object model in both ASP and Microsoft<sup>®</sup> Internet Explorer 4.0 DHTML.</p>
<p class=label>
<b>To add the Recordset control to your page</b>
<ul type=disc>
<li>
From the toolbox, drag the Recordset control to your page. For details, see <a href="vihowdisplayingrecords.htm">Displaying Records</a>.</li>
</ul>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>The Scripting Object Model must be enabled to use the design-time controls.</p>
<p>
For more information about the scripting object model and the Recordset control, see <a href="viovrscriptingwithdesigntimecontrolsscriptobjects.htm">Scripting with Design-Time Controls and Script Objects</a> and <a href="victlrecordsetcontrol.htm">Recordset Design-Time Control</a>.</p>
<h3>Specifying an Updateable Recordset Control</h3>
<p>
After you drag the Recordset control to the page, choose the source of data and set the lock type to anything other than read-only.</p>
<p>
In the example, the Recordset control uses the DEntry table of the Gallery database provided with the Visual InterDev samples. The type of lock used is "Optimistic" so that the form can update records.</p>
<p>
Also, make sure the recordset is based on a database object that is updateable. For example, views without a primary key or a unique index are not updateable, regardless of the cursor type you select. For more information about updating records and specifying recordsets, see <a href="viovrmodifyingdata.htm">Modifying Data</a>.</p>
<p class=label>
<b>Settings for an updateable Recordset control</b></p>
<p>
<img src="vi52fc1.gif" border=0></p>
<h3>Adding Controls for Record Display and Mode Transitions</h3>
<p>
Once you have a Recordset control on your page, you can create the form for displaying the fields you want to show the user and for making changes to the records.</p>
<p>
Using the design-time controls from the toolbox, you can quickly specify which recordset fields to appear on the page. The field is a property of the control and makes the data display easy to add and, as long as the fields in the recordset do not change, simple to maintain. For more information about using data-bound controls to display records, see <a href="vihowdisplayingrecords.htm">Displaying Records</a>.</p>
<p class=label>
<b>Forms made with data-bound controls are easy to create and maintain.</b></p>
<p>
<img src="vi52fc2.gif" border=0></p>
<p>
To finish the visual design of the page, add and format text to provide a title for the form. Also, create the row of buttons by adding a table to the page and dragging Button controls into the cells of the table.</p>
<p>
For the record display, drag Label, Textbox, and RecordsetNavbar controls to the page. In the example, the Textbox controls and the Checkbox control are bound to the recordset using the property pages to specify the field that the control displays. For a list of all of the initial property settings for the controls on this page, see <a href="#vimsccompletingdataentrypage">Completing the Data Entry Page</a> below.</p>
<h2><a name="vimscsimplifyingscriptingwithformmodes"></a>Simplifying Scripting with Form Modes</h2>
<p>
Instead of creating and maintaining several pages with variations of the same control set, the FormManager consolidates it all in a single page that can handle multiple tasks and is easy to maintain.</p>
<p>
Using the FormManager control, you can specify modes for your form without scripting the controls and changes. The modes handle changes to the controls and updates to the records.</p>
<p>
In addition, you no longer need to scroll through page after page to find the method or event you want to change. The <a href="virefformmanagerpropertiesdialogbox.htm">FormManager Properties Dialog Box</a> summarizes all of the property changes and event handling for the page in two tabs.</p>
<p>
Of course, if you have user-defined functions, you can reference them in the FormManager control as well. For example, you might have a validation function that you want to use in the form. You can use the FormManager to call the function and validate data whenever the recordset is updated.</p>
<p>
Specifying modes covers three main concepts:
<ul type=disc>
<li>
<b>Identifying each mode and specifying the property settings and methods for the controls while the mode is active.</b> In the data entry form, the modes specify when the Save, Add, and Cancel buttons are hidden.<p class=tl>
In Edit mode, the Save and Cancel button are shown, but the Add button is hidden.</P><p class=tl>
In Insert mode, the Add button is shown and the Save button is hidden.</P></li>
<li>
<b>Specifying the transition events that move between the modes or trigger specific actions.</b> For example, clicking the Edit button transitions the form from Display mode into Edit mode.<br><br></li>
<li>
<b>Adding the actions that occur after the transition event is triggered but before the transition is complete.</b> For example, clicking the Save button not only switches from Edit mode to Display mode, but also updates the recordset with changes the user made in the form.</li>
</ul>
<p class=label>
<b>To add Display and Edit modes to the data entry form</b>
<ol>
<li>
Open or create an ASP page that has controls for displaying records and buttons for switching modes.<p class=atl>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;Before adding modes, make sure you have all of the controls you need on the form. For example, you may need to add buttons, such as an Edit button for moving to the Edit mode and a Save button for triggering transition events in that mode.</p><p class=atl>
If you decide to add more controls you can do that later, but adding controls before adding the modes makes them readily available to the FormManager control. This also applies to functions and methods you want to script in the page.</p></li>
<li>
From the toolbox, add a <b>FormManager</b> control. Right-click the <b>FormManager</b> in the editor to display its property pages.<br><br></li>
<li>
Identify the modes you want and the control settings for each.<p class=label>
<b>A plan for two modes and their control settings</b>
<p>
<img src="vi52fd1.gif" border=0></P></li>
<li>
On the <b>Form Mode</b> tab, add a new mode for each mode you have identified.<p>
<img src="vi52fd2.gif" border=0></P></li>
<li>
For each mode, specify the property settings and method calls for the display controls and the form mode buttons on the <b>Form Mode</b> tab.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;For each property you want to set for a control, add a line in the Property/Value pairs grid. For example, if you want the button, btnNew, to be both visible and disabled for the mode, in one line set the disabled property to true and in another line, specify the show() method.</p><p class=atl>
If you want to call a function you created, you can leave the Object column blank and enter the functions name in the Member column and any parameters in the Value column. Be sure to include parenthesis around the parameters.</p><p class=atl>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;To ensure proper form behavior, set the properties and methods for each control in each mode. The Web environment is stateless so you can't count on any property maintaining the default value after a transition. If you want a control shown in a mode, specify the show() method for that control. If you want a control hidden, specify Hide() method.</p><p class=tl>
For a complete list of the mode settings for this form, see <a href="#vimsccompletingdataentrypage">Completing the Data Entry Page</a> below.</P><p class=label>
<b>Specify the property settings and method calls for the mode.</b>
<p>
<img src="vi52fd3.gif" border=0></P><p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Be sure that the disabled property is properly set. If you want to enable the control, its disabled property needs to be "false." These values are case sensitive. It is easy to inadvertently set it to the opposite.</p><p class=tl>
Also, to make a control visible or hidden, use the show() and hide() methods. The server will translate them into the appropriate tags and attributes when it sends the HTML to the Web browser.</P></li>
<li>
On the <b>Action tab</b>, specify transition events for each mode button on the form. For a complete list of the action settings for this form, see <a href="#vimsccompletingdataentrypage">Completing the Data Entry Page</a> below.<p class=tl>
For example, when the Edit button is clicked, the form switches from Display mode to Edit mode. Without additional scripting, the mode determines the changes to the controls’ properties as specified in the Form Mode tab.</P><p class=label>
<b>The Edit button triggers the switch to the next mode.</b>
<p>
<img src="vi52fd4.gif" border=0></P><p class=tl>
While in Display mode, the Edit button specifies only that a new mode is active. Additional actions are not required.</P><p>
<img src="vi52fd5.gif" border=0></P><p class=tl>
Some transition events require actions in order to complete the entire task intended by the mode.</P></li>
<li>
As needed, identify and specify actions to be completed between the event and the next mode.<p class=tl>
For example, in Edit mode when the Cancel button is clicked, the changes should be discarded before switching to Display mode. In contrast, when the Save button is clicked, the recordset should be updated before switching to Display mode.</P><p class=label>
<b>A plan for the transitions and actions between modes</b>
<p>
<img src="vi52fd6.gif" border=0></P><p class=tl>
On the <b>Action tab</b>, these actions are specified as shown in the following figure.</P><p class=label>
<b>The actions occur after the event happens and just before the mode switches.</b>
<p>
<img src="vi52fd7.gif" border=0></P></li>
<li>
Choose <b>Close</b>.</li>
</ol>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you add more controls and/or user-defined functions to the page, be sure to incorporate them into the modes using the FormManager control.</p>
<h2><a name="vimsccompletingdataentrypage"></a>Completing the Data Entry Page</h2>
<p>
Now that you understand the basic use of the FormManager control, you can finish specifying the modes and actions for the data entry page. You can use the tables below for additional settings you might need to complete the data entry page.
<ul type=disc>
<li>
<a href="#vimscinitialpropertysettingsforcontrols">Initial Property Settings for the Controls on the Form</a><br><br></li>
<li>
<a href="#vimsccompletingmodesettingsforcontrols">Completing the Mode Settings for Controls</a><br><br></li>
<li>
<a href="#vimscmodetransitionsactions">Mode Transitions and Actions</a></li>
</ul>
<h3><a name="vimscinitialpropertysettingsforcontrols"></a>Initial Property Settings for the Controls on the Form</h3>
<p>
You can set the initial properties for the controls on the form using the General tab of the property pages for the control.</p>
<p class=label>
<b>Example of property setting for a button</b></p>
<p>
<img src="vi52fe1.gif" border=0></p>
<p>
The following table shows the property settings for the controls on the form before you add the modes.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=43%><b>Controls for the record</b></td>
<td class=label width=57%><b>Initial settings</b></td>
</tr>
<tr valign=top>
<td width=43%>Recordset</td>
<td width=57%>Connection to the Gallery database used with the Visual InterDev samples.<br>
Database object = DEntry table<br>
Lock type = Optimistic or Batch optimistic</td>
</tr>
<tr valign=top>
<td width=43%>IDlbl</td>
<td width=57%>Visible</td>
</tr>
<tr valign=top>
<td width=43%>IDtxt</td>
<td width=57%>Disabled (read-only), visible</td>
</tr>
<tr valign=top>
<td width=43%>FNamelbl</td>
<td width=57%>Visible</td>
</tr>
<tr valign=top>
<td width=43%>FNametxt</td>
<td width=57%>Disabled (read-only), visible</td>
</tr>
<tr valign=top>
<td width=43%>LNamelbl</td>
<td width=57%>Visible</td>
</tr>
<tr valign=top>
<td width=43%>LNametxt</td>
<td width=57%>Disabled (read-only), visible</td>
</tr>
<tr valign=top>
<td width=43%>PCchk</td>
<td width=57%>Visible</td>
</tr>
<tr valign=top>
<td width=43%>RecordsetNavbar</td>
<td width=57%>Visible, set to recordsetdtc1</td>
</tr>
</table><br>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=43%><b>Controls for form modes</b></td>
<td class=label width=57%><b>Initial settings</b></td>
</tr>
<tr valign=top>
<td width=43%>Display Button</td>
<td width=57%>Name = Displaybtn<br>
Caption = Display<br>
Visible = true<br>
Disabled = true</td>
</tr>
<tr valign=top>
<td width=43%>Edit Button</td>
<td width=57%>Name = Editbtn<br>
Caption = Edit<br>
Visible = true<br>
Disabled = false</td>
</tr>
<tr valign=top>
<td width=43%>Save Button</td>
<td width=57%>Name = Savebtn<br>
Caption = Save Record<br>
Visible = false<br>
Disabled = false</td>
</tr>
<tr valign=top>
<td width=43%>New Button</td>
<td width=57%>Name = Newbtn<br>
Caption = New<br>
Visible = true<br>
Disabled = false</td>
</tr>
<tr valign=top>
<td width=43%>Delete Button</td>
<td width=57%>Name = Deletebtn<br>
Caption = Delete<br>
Visible = true<br>
Disabled = false</td>
</tr>
<tr valign=top>
<td width=43%>Cancel Button</td>
<td width=57%>Name = Cancelbtn<br>
Caption = Cancel<br>
Visible = false<br>
Disabled = false</td>
</tr>
</table><br>
<h3><a name="vimsccompletingmodesettingsforcontrols"></a>Completing the Mode Settings for Controls</h3>
<p>
You can complete the mode settings for the data entry form by adding the Property/Value pairs into the Form Mode tab.</p>
<p class=label>
<b>Use the Form Mode tab of the FormManager control to specify a mode.</b></p>
<p>
<img src="vi52fe2.gif" border=0></p>
<p>
These tables shows the entire set of Property/Value pairs needed to complete the sample data entry page.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Record display controls</b></td>
<td class=label width=33%><b>Display state</b></td>
<td class=label width=34%><b>Edit state</b></td>
</tr>
<tr valign=top>
<td width=33%>IDlbl</td>
<td width=33%>show(&nbsp;)</td>
<td width=34%>show(&nbsp;)</td>
</tr>
<tr valign=top>
<td width=33%>IDtxt</td>
<td width=33%>show(&nbsp;)<br>
disabled = true</td>
<td width=34%>show(&nbsp;)<br>
disabled = false</td>
</tr>
<tr valign=top>
<td width=33%>FNamelbl</td>
<td width=33%>show(&nbsp;)</td>
<td width=34%>show(&nbsp;)</td>
</tr>
<tr valign=top>
<td width=33%>FNametxt</td>
<td width=33%>show(&nbsp;)<br>
disabled = true</td>
<td width=34%>show(&nbsp;)<br>
disabled = false</td>
</tr>
<tr valign=top>
<td width=33%>LNamelbl</td>
<td width=33%>show(&nbsp;)</td>
<td width=34%>show(&nbsp;)</td>
</tr>
<tr valign=top>
<td width=33%>LNametxt</td>
<td width=33%>show(&nbsp;)<br>
disabled = true</td>
<td width=34%>show(&nbsp;)<br>
disabled = false</td>
</tr>
<tr valign=top>
<td width=33%>PCchk</td>
<td width=33%>show(&nbsp;)<br>
disabled = true</td>
<td width=34%>show(&nbsp;)<br>
disabled = false</td>
</tr>
<tr valign=top>
<td width=33%>RecordsetNavbar</td>
<td width=33%>show(&nbsp;)</td>
<td width=34%>hide(&nbsp;)</td>
</tr>
</table><br>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Mode event buttons</b></td>
<td class=label width=33%><b>Display mode</b></td>
<td class=label width=34%><b>Edit mode</b></td>
</tr>
<tr valign=top>
<td width=33%>Display Button</td>
<td width=33%>show(&nbsp;)<br>
disabled = true</td>
<td width=34%>show(&nbsp;)<br>
disabled = false</td>
</tr>
<tr valign=top>
<td width=33%>Edit Button</td>
<td width=33%>show(&nbsp;)<br>
disabled = false</td>
<td width=34%>show(&nbsp;)<br>
disabled = true</td>
</tr>
</table><br>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Mode action buttons</b></td>
<td class=label width=33%><b>Display mode</b></td>
<td class=label width=34%><b>Edit mode</b></td>
</tr>
<tr valign=top>
<td width=33%>Save Button</td>
<td width=33%>hide(&nbsp;)<br>
disabled = true</td>
<td width=34%>show(&nbsp;)<br>
disabled = false</td>
</tr>
<tr valign=top>
<td width=33%>Insert Button</td>
<td width=33%>hide(&nbsp;)<br>
disabled = true</td>
<td width=34%>show(&nbsp;)<br>
disabled = false</td>
</tr>
<tr valign=top>
<td width=33%>Add Button</td>
<td width=33%>hide(&nbsp;)<br>
disabled = true</td>
<td width=34%>show(&nbsp;)<br>
disabled = false</td>
</tr>
<tr valign=top>
<td width=33%>Cancel Button</td>
<td width=33%>hide(&nbsp;)<br>
disabled = true</td>
<td width=34%>show(&nbsp;)<br>
disabled = false</td>
</tr>
<tr valign=top>
<td width=33%>Delete Button</td>
<td width=33%>hide(&nbsp;)<br>
disabled = true</td>
<td width=34%>show(&nbsp;)<br>
disabled = false</td>
</tr>
</table><br>
<h3><a name="vimscmodetransitionsactions"></a>Mode Transitions and Actions</h3>
<p>
You can complete the transition and action settings for the data entry form by identifying the events you want to use to switch between modes and the actions that occur before the switch is completed.</p>
<p class=label>
<b>Use the Action tab of the FormManager control to specify transitions and actions.</b></p>
<p>
<img src="vi52fe3.gif" border=0></p>
<p>
This table shows the settings for both panels in the Action tab of the FormManager control. Remember, the mode itself specifies properties and methods on the display controls. The following settings specify events that trigger the mode and the actions that must be completed before entering the next mode.</p>
<table border=1 cellpadding=5 cols=4 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Current mode</b></td>
<td class=label width=25%><b>Object and event</b></td>
<td class=label width=25%><b>Next mode</b></td>
<td class=label width=25%><b>Button actions</b></td>
</tr>
<tr valign=top>
<td width=25%>Display</td>
<td width=25%>Editbtn</td>
<td width=25%>Edit</td>
<td width=25%>None</td>
</tr>
<tr valign=top>
<td width=25%>Edit</td>
<td width=25%>Displaybtn</td>
<td width=25%>Display</td>
<td width=25%>None</td>
</tr>
<tr valign=top>
<td width=25%>Edit</td>
<td width=25%>Savebtn</td>
<td width=25%>Display</td>
<td width=25%>Recordset.updateRecord(&nbsp;)</td>
</tr>
<tr valign=top>
<td width=25%>Edit</td>
<td width=25%>Cancelbtn</td>
<td width=25%>Display</td>
<td width=25%>Recordset.cancelUpdate(&nbsp;)<br>
Recordset.moveNext(&nbsp;)</td>
</tr>
<tr valign=top>
<td width=25%>Edit</td>
<td width=25%>Newbtn</td>
<td width=25%>Display</td>
<td width=25%>Recordset.addRecord(&nbsp;)<br>
Recordset.moveLast(&nbsp;)</td>
</tr>
<tr valign=top>
<td width=25%>Edit</td>
<td width=25%>Deletebtn</td>
<td width=25%>Display</td>
<td width=25%>Recordset.meleteRecord(&nbsp;)<br>
Recordset.moveFirst(&nbsp;)</td>
</tr>
</table><br>
</BODY>
</HTML>

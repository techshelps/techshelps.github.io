<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Gathering Information With HTML Forms</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="vihowgatheringinformationusingforms"></a>Gathering Information With HTML Forms</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vihowGatheringInformationUsingForms_C;vihowGatheringInformationUsingFormsC">
</object></p>
<p>
A common way to prompt users for information is to put a form on a page. Users can enter information or select choices using text boxes, option buttons, drop-down lists, and checkboxes. They then submit the form by clicking a button, and the information becomes available to your application.</p>
<p>
You can define forms in these ways:
<ul type=disc>
<li>
Use Microsoft<sup>®</sup> Visual InterDev™ design-time controls and then write handlers for their events. This method allows you to work visually with your form's controls and use object-oriented techniques for scripting. It also makes it easy to bind form controls to a database.<br><br></li>
<li>
Create an HTML form. This is the traditional HTML way of creating forms. You might use this method if you thought that the page might be edited using tools outside of Visual InterDev.</li>
</ul>
<p>
Using design-time controls is easier and more powerful, because it allows you to use the scripting object model for designing forms. For information about using design-time controls and the scripting object model, see <a href="vihowcreatingformswithdesigntimecontrols.htm">Creating Forms with Design-Time Controls</a>.</p>
<p>
The sections below describe how to create and work with HTML forms in the traditional HTML manner.</p>
<h2>Defining HTML Forms</h2>
<p>
You create an HTML form on a page with the &lt;FORM&gt; tag.</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>Do not add an HTML form to a page that contains Visual InterDev design-time controls, because the page already contains a form used to manage the controls. For details, see <a href="vihowcreatingformswithdesigntimecontrols.htm">Creating Forms with Design-Time Controls</a>.</p>
<p class=label>
<b>To create an HTML form</b>
<ol>
<li>
Select the text that you want to enclose in a form, and then from the <b>HTML</b> menu choose <b>Insert Form</b>.<p class=tl>
The editor puts &lt;FORM&gt; and &lt;/FORM&gt; tags around your selection. The form's ID and NAME attributes are automatically assigned unique values, which you can change if you want.</P><p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you enclose existing HTML controls in a form, they appear inside the form's node in the <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="csdlgScriptOutlineHTMLEditor">
</object><a href=JavaScript:alink_2.Click()>Script Outline</a> window.</p></li>
<li>
Specify the name of an .asp file that will be used to process the form by assigning it to the ACTION attribute:<pre><code>&lt;FORM NAME="<i>FormName</i>" ACTION="<i>ASPFileName</i>.asp"&gt;
</code></pre>
</li>
<li>
Specify how the form information will be sent to the server using the METHOD attribute:<pre><code>&lt;FORM NAME="<i>FormName</i>" ACTION="<i>ASPFileName</i>.asp" METHOD="<i>method</i>"&gt;
</code></pre>
<p class=tl>
To send the information as part of the HTTP header (so it can be extracted using the Forms collection of the server's Request object), set METHOD to "POST". </P><p class=tl>
To send the information as a search string to the .asp file (so it can be extracted using the Request object's QueryString collection), set METHOD to "GET".</P></li>
</ol>
<p>
After defining the form, you can define controls such as text boxes, buttons, and so on.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can use design-time controls to create the user interface for your application. For details, see <a href="vihowcreatingformswithdesigntimecontrols.htm">Creating Forms with Design-Time Controls</a>.</p>
<p class=label>
<b>To create controls in the form</b>
<ul type=disc>
<li>
Drag controls from the HTML tab of the Toolbox onto the form.<p class=tl>
The control's ID and NAME attributes are automatically assigned unique values. You can change these values if you want.</P></li>
</ul>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;When you drag HTML controls into an HTML form, they appear inside the form's node in the <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="csdlgScriptOutlineHTMLEditor">
</object><a href=JavaScript:alink_3.Click()>Script Outline</a> window.</p>
<p>
For example, a form that contains a text box and a Submit button might look like this after you dragged the controls from the Toolbox and edited them:</p>
<pre><code>&lt;FORM NAME="Form1" NAME="frmMyForm" ACTION="process.asp" METHOD="post"&gt;
   Enter your name:
   &lt;INPUT TYPE=text NAME=text1 ID=Text1&gt;
   &lt;INPUT TYPE="submit" VALUE="Submit" ID=Submit1 NAME=Submit1&gt;
&lt;/FORM&gt;
</code></pre>
<h2>Processing Form Information Before Submitting</h2>
<p>
In simple forms, no processing is required on the client: the user clicks the Submit button, and the browser handles the tasks of gathering the data and sending it to the server. However, you can process forms by writing client scripts to handle button clicks and so on. </p>
<p>
A typical example is to write a script that validates user input before the form is posted. But in client script you can have access to the events fired for all the form's controls, so you can write handlers for any purpose you need, including replacing server processing altogether.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The scripting object model allows you to script design-time controls easily. For details, see <a href="vihowwritingscriptforscriptobjects.htm">Writing Script for Script Objects</a>.</p>
<p class=label>
<b>To process forms in a client script</b>
<ul type=disc>
<li>
Write an event handler for the form's onsubmit event or for the events associated with individual controls, such as a button's onclick event or a text box's onblur event.</li>
</ul>
<p>
To determine the value of a specific control, you reference it using an object hierarchy that goes from document to form to control to property.</p>
<p>
The following illustrates a simple validation routine in a form's onsubmit event handler:</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
Function form1_onsubmit()
   If Len(document.form1.text1) &lt; 1 then
      MsgBox("You must enter a name!")
      form1_onsubmit = False&nbsp;&nbsp; ' This cancels the submission
   Else
      ' Information automatically sent to server
   End If
End Function
&lt;/SCRIPT&gt;
</code></pre>
<p>
To write handlers for other events, you can use the <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="csdlgScriptOutlineHTMLEditor">
</object><a href=JavaScript:alink_4.Click()>Script Outline</a> window. For more information about writing scripts for the events associated with HTML form controls, see <a href="vihowattachingscriptstoobjects.htm">Handling Events with HTML Elements</a>.</p>
<h2>Processing Forms on the Server</h2>
<p>
In Visual InterDev, forms are usually handled by an .asp file on the server.</p>
<p class=label>
<b>To process a form in server script</b>
<ul type=disc>
<li>
On the target ASP page, use the Forms collection of the server Request object to extract values from the form.<p class=tl>
The Forms collection is like an array that holds the values of all the controls in the form. You can extract the values of individual controls by referencing them by name in the Forms collection.</P></li>
</ul>
<p>
For example, the following script gets the values of several fields on the form using the names assigned in the form to the &lt;INPUT&gt; tags, and puts them into Session object variables to be used elsewhere in the application:</p>
<pre><code>&lt;%
Session("LastName") = Request.Form("LastName")
Session("BirthDate") = Request.Form("Birthdate")
%&gt;
</code></pre>
<h2>Creating Dynamic Information in a Hidden Field</h2>
<p>
If you want to pass information that is not directly entered by a user, you can use a hidden field.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you use the scripting object model and design-time controls, information is automatically available in server scripts. For details, see <a href="vihowcreatingformswithdesigntimecontrols.htm">Creating Forms with Design-Time Controls</a>.</p>
<p class=label>
<b>To create information in a hidden field</b>
<ol>
<li>
In a form, create an &lt;INPUT&gt; tag and set its TYPE attribute to HIDDEN, as in the following example:<pre><code>&lt;FORM NAME=frmEmployee METHOD=POST ACTION=process.asp&gt;
 &nbsp; [...]
 &nbsp; &lt;INPUT TYPE="Hidden" NAME="ExtraInfo"&gt;
&lt;/FORM&gt;
</code></pre>
</li>
<li>
Put information into the hidden field using a client script.<p class=tl>
For example, you can load the hidden field just before the form is submitted by writing a handler for the form's onsubmit event. The following simple example puts the current time into the hidden field:</P><pre><code>&lt;SCRIPT Language="VBScript&gt;
Function frmEmployee_onsubmit
 &nbsp; document.frmEmployee.ExtraInfo = time
End Function
&lt;/SCRIPT&gt;
</code></pre>
</li>
</ol>
<p>
When the form is submitted, you can get the information out of the hidden field using server script exactly the way you get information out of any other form element, as in the following example:</p>
<pre><code>&lt;%Session("UpdateTime") = Request.Form("ExtraInfo")
</code></pre>
<h2>Posting Information to the Same File</h2>
<p>
Instead of always creating a separate .asp file to process the contents of a form on an .htm file, you can put both on the same ASP page: the form and the script that processes the form. This can simplify your application and make it easier for users.</p>
<p>
For example, it is typical to have three or more pages associated with a form: the page with the form, another with the script that processes the form, and a third with an error message. However, if the form is posted to the file it appears on, you can send informational messages along with the context of the form and you only have to create one page.</p>
<p class=label>
<b>To post information to the same file</b>
<ol>
<li>
Create the form in an .asp file.<br><br></li>
<li>
In the ACTION attribute of the form, specify the name of the file as the target URL.<br><br></li>
<li>
In the server script at the top of the .asp file, use the Request object to check whether information is being passed to the file. If so, the form has been submitted, and you can process it. Otherwise, assume the form is being displayed for the first time.</li>
</ol>
<p>
The GetEmail.asp file below is an example of this. The script determines whether the user has entered an e-mail address, and if so, whether it is valid. In each case, the script produces an appropriate message, which then appears beneath the form as feedback to the user.</p>
<pre><code>&lt;HTML&gt;
&lt;BODY&gt;
&lt;!-- GetEmail.asp --&gt; 

&lt;% 
   If IsEmpty(Request("Email")) Then 
      Msg = "Please enter your email address." 
   ElseIf InStr(Request("Email"), "@") = 0 Then 
      Msg = "Please enter an email address" &amp; _
      " in the form username@location."
   Else
      ' In a real application, the following message
      ' would be replaced by actual processing.
      Msg = "This script could process the " &amp; _
      "valid Email address now."
   End If
%&gt;
&lt;FORM METHOD="POST" ACTION="GetEmail.asp"&gt;
&lt;PRE&gt;
Email: &lt;INPUT TYPE="TEXT" NAME="Email" SIZE=30 
   VALUE="&lt;%= Request("Email")%&gt;"&gt;
&lt;%= Msg %&gt;&lt;P&gt;
&lt;INPUT TYPE="Submit" VALUE="Submit"&gt;
&lt;/PRE&gt;
&lt;/FORM&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</code></pre>
</BODY>
</HTML>

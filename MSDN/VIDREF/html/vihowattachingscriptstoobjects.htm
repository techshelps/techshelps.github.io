<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Handling Events with HTML Elements</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="vihowattachingscriptstoobjects"></a>Handling Events with HTML Elements</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vihowAttachingScriptsToObjects_C;vihowAttachingScriptsToObjectsC">
</object></p>
<p>
You can specify how HTML elements on a page behave by writing script that responds to events. For example, you can write client script that initializes variables when a document is loaded (the window object's onload event), when a user enters text into a text box (the text box's onchange event), or when a user clicks a button (the button's onclick event).</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The easiest way to add objects to your application and write script for them is to use Microsoft<sup>®</sup> Visual InterDev™ design-time controls. For details, see <a href="vihowcreatingformswithdesigntimecontrols.htm">Creating Forms with Design-Time Controls</a> and <a href="vihowwritingscriptforscriptobjects.htm">Writing Script for Script Objects</a>.</p>
<p>
You write event handlers as procedures (functions or subroutines) that appear in &lt;SCRIPT&gt; blocks in your page. To specify that the procedure is a handler for a specific event, you can:
<ul type=disc>
<li>
Create an implicit handler by naming the procedure after the event that it is a handler for.<br><br></li>
<li>
Explicitly relate the procedure to the event using object or script attributes.</li>
</ul>
<p>
If you are using Microsoft<sup>®</sup> Visual Basic<sup>®</sup>, Scripting Edition, you can create the procedure as either a subroutine or function. You would use a function if you want to return or set a value for the procedure, which you do in some instances to cancel the effect of the event.</p>
<h2>Creating Implicit Handlers</h2>
<p>
An implicit handler uses a naming convention to link the handler to the object and event.</p>
<p class=label>
<b>To create an implicit handler</b>
<ol>
<li>
In the <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="csdlgScriptOutlineHTMLEditor">
</object><a href=JavaScript:alink_2.Click()>Script Outline</a> window, expand the node containing the object you want to script.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Objects appear in the Script Outline window only if their ID or NAME attribute is set. Objects inside a form appear only if the form's ID or NAME attribute is set.</p></li>
<li>
Expand the name of the object.<br><br></li>
<li>
Double-click the name of the event you want to write a handler for.<p class=tl>
The editor creates a skeleton handler for you in this format:</P><pre><code>function <i>objectName</i>_<i>event</i>
</code></pre>
<p class=tl>
For example, if your page contains a form that has a button called btnNext, the handler will be created with the name btnNext_onclick. If you create a JavaScript handler, the editor also adds an event attribute to the control you are scripting. For details, see "Using Attributes to Create Handlers" below.</P><p class=tl>
Handlers are created in one of the following &lt;SCRIPT&gt; blocks, depending on whether you are creating handlers for client or server objects, and what the default language is for the object:</P><ul type=disc>
<li>
clientEventHandlersJS<br><br></li>
<li>
clientEventHandlersVBS<br><br></li>
<li>
serverEventHandlersJS<br><br></li>
<li>
serverEventHandlersVBS</li>
</ul>
<p class=tl>
For details about setting a default language for generated script, see <a href="vihowchoosingscriptinglanguage.htm">Choosing a Scripting Language</a>.</P></li>
</ol>
<p>
After the skeleton has been created, you can fill it in. For example, the following client script function for a text box named txtName is called when the user tabs to or clicks it.</p>
<pre><code>Function txtName_onblur()
 &nbsp; If frmMyForm.txtName.value = "" then
 &nbsp;&nbsp;&nbsp;&nbsp; alert("Name is required!")
 &nbsp; End if
End Function
</code></pre>
<p>
If you are scripting in VBScript, you can cancel the effect of some events. For example, you can write a handler for a form's onsubmit event, which occurs when the user clicks the Submit button. Your script can check that the data is valid, and if it is not, cancel the onsubmit event. For details about whether you can cancel an event, see the documentation for the event you are working with.</p>
<p class=label>
<b>To cancel the effect of an event</b>
<ul type=disc>
<li>
Create the VBScript procedure as a function, and set the function's return value to False, as shown in the following script:<pre><code>&lt;SCRIPT LANGUAGE="VBSCRIPT"&gt;
Function frmMyForm_onsubmit()
 &nbsp; If frmMyForm.txtName.Value = "" then
 &nbsp;&nbsp;&nbsp;&nbsp; alert("You must enter a name.")
 &nbsp;&nbsp;&nbsp;&nbsp; frmMyForm_onsubmit = false
 &nbsp; End if
End function
&lt;/SCRIPT&gt;
</code></pre>
</li>
</ul>
<h2>Using Attributes to Create Handlers</h2>
<p>
Another way to link a procedure to an event is to set attributes of the object or of the script that explicitly link the two.</p>
<h3>Setting Object Attributes</h3>
<p>
When you create an object, you can set an attribute to assign a handler to it.</p>
<p class=label>
<b>To use attributes to assign a handler to an event</b>
<ul type=disc>
<li>
In the tag that creates the object, name the event and assign the procedure to it, using this syntax:<pre><code>&lt;INPUT TYPE="<i>ObjectType</i>" LANGUAGE="<i>language</i>" <b>EventName="</b><i>Procedure</i><b>"</b>&gt;
</code></pre>
<p class=tl>
–or–</P><pre><code>&lt;FORM LANGUAGE="<i>language</i>" NAME="<i>FormName</i>" <b>EventName="</b><i>Procedure</i>"&gt;
</code></pre>
</li>
</ul>
<p>
The language attribute is not required, but guarantees that the handler will work the way you want. If no language is specified, the default language for the page is assumed.</p>
<p>
For example, the following page contains a form with two buttons. Each button definition explicitly links the onclick event to a procedure:</p>
<pre><code>&lt;FORM NAME="Form1"&gt;
   &lt;INPUT TYPE="button" NAME="btnVB" VALUE="VB" onClick="pressed" 
      LANGUAGE="VBScript"&gt;
   &lt;INPUT TYPE="button" NAME="btnJS" VALUE="JS" onClick="pressed2()" 
      LANGUAGE="JavaScript"&gt;
&lt;/FORM&gt;

&lt;SCRIPT LANGUAGE="VBSCRIPT"&gt;
Sub Pressed()
   alert("Pressed the VBScript button")
End Sub
&lt;/SCRIPT&gt;

&lt;SCRIPT LANGUAGE="JavaScript"&gt;
   function pressed2(){
      alert("Pressed the JavaScript button.");
   }
&lt;/SCRIPT&gt;
</code></pre>
<p>
In client script, for an object such as the window object, which is not explicitly created using a tag, use the &lt;BODY&gt; tag, as shown in the following example:</p>
<pre><code>&lt;HTML&gt;
&lt;HEAD&gt;
&lt;SCRIPT LANGUAGE="VBScript"&gt;
Sub newWindow
 &nbsp; 'script statements here
End Sub
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;

&lt;BODY LANGUAGE="VBScript" onLoad="newWindow"&gt;
 &nbsp; [...]
&lt;/BODY&gt;
&lt;/HTML&gt;
</code></pre>
<h3>Setting Script Attributes</h3>
<p>
Another way to link objects and handlers is to set attributes of the script that assigns it to an event.</p>
<p class=label>
<b>To use script attributes to assign it to an event</b>
<ul type=disc>
<li>
In the &lt;SCRIPT&gt; tag, use the FOR attribute to identify the object and the EVENT attribute to identify the event, using this syntax:<pre><code>&lt;SCRIPT LANGUAGE="<i>language</i>" FOR="<i>object</i>" EVENT="<i>EventName</i>"&gt;
</code></pre>
</li>
</ul>
<p>
You can use this method for any named elements and for any elements inserted using the &lt;OBJECT&gt; tag. You do not need to create the script as a subroutine or function, because the script attributes specify when the script will run.</p>
<p>
The following example is similar to the previous script example, but it uses a different syntax:</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript" FOR="Button1" EVENT="onclick"&gt;
 &nbsp; alert("Button has been pressed")
 &nbsp; document.Form1.Button1.value="Pressed"
&lt;/SCRIPT&gt;

&lt;FORM NAME="Form1"&gt;
 &nbsp; &lt;INPUT TYPE="button" NAME="Button1" VALUE="Click"&gt;
&lt;/FORM&gt;
</code></pre>
</BODY>
</HTML>

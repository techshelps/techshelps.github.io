<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Sharing Dynamic Information</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="vihowsharingdynamicinformation"></a>Sharing Dynamic Information</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vihowSharingDynamicInformation_C;vihowSharingDynamicInformationC">
</object></p>
<p>
Many times in your Web applications you will need to use the same information on two or more pages. For example, your application might:
<ul type=disc>
<li>
Prompt the user for a name, and then pass it to another page to be displayed there.<br><br></li>
<li>
Display the time and date when a user last visited your site.<br><br></li>
<li>
Require users to log on. When they do, the application assigns them a security level that is checked throughout your application.</li>
</ul>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can use the scripting object model and page objects to maintain state information automatically. For details, see <a href="viconthescriptingobjectmodel.htm">The Scripting Object Model</a>.</p>
<p class=label>
<b>To share dynamic information</b>
<ul type=disc>
<li>
Store information in global variables maintained in the Application and Session objects. Information in Application and Session variables persists between pages.<p class=tl>
–or–</P></li>
<li>
Pass a query string from one page directly to another as part of the URL in a link.<p class=tl>
–or–</P></li>
<li>
Store information in a database, which allows you to store data permanently, share it with other applications, and use database capabilities to filter and analyze application data. For more information, see <a href="viovrdatabasetasks.htm">Database Tasks</a>.<p class=tl>
–or–</P></li>
<li>
Store information on the user's computer in a <a href="vimsgcookie.htm">cookie</a>. Because you can read and write cookies, you can use them to maintain user-specific information.<p class=tl>
–or–</P></li>
<li>
Store information in ASP objects.</li>
</ul>
<p>
Each method has different uses, depending on factors such as how many pages might need the information, and whether you need to keep it permanently.</p>
<h2>Storing Information Globally</h2>
<p>
You can define global variables with two Microsoft<sup>®</sup> Internet Information Services (IIS) objects:
<ul type=disc>
<li>
<b>Application object</b>&nbsp;&nbsp;&nbsp;The server maintains one Application object for each ASP-based application. The object is initialized when the application is accessed by the first user and persists until the application is shut down. <p class=tl>
When you define variables in the server's Application object, their values are available to all pages in the application. A typical example is an application hit counter that is updated each time another user starts a session.</P></li>
<li>
<b>Session object</b>&nbsp;&nbsp;&nbsp;A Session object is initialized when a user first requests a page from the server. The object persists until the session is abandoned, when the user closes and reopens the browser, manually (by calling the Session.Abandon method), or when the user's browser has not requested a page from the application for a specified period of time. <p class=tl>
Session objects are global for any one user. You might use a session object to maintain a user's security level.</P></li>
</ul>
<p class=label>
<b>To get and set values in Application and Session object variables</b>
<ul type=disc>
<li>
In a server script, use syntax such as this:<pre><code>Application("<i>VariableName</i>") = <i>value</i>
Session("<i>VariableName</i>") = <i>value</i>
variable = Applicaton("<i>VariableName</i>")
variable = Session ("<i>VariableName</i>")
</code></pre>
</li>
</ul>
<p class=label>
<b>To initialize Application and Session object variables</b>
<ul type=disc>
<li>
In the <a href="vimsgglobal.asafile.htm">Global.asa</a> file, write handlers for the Application_OnStart and Session_OnStart events, setting the initial values for each variable you want to use.</li>
</ul>
<p>
For example, you can maintain a hit counter in an Application object variable. You can initialize the counter in the Application_OnStart event using a script such as this:</p>
<pre><code>Sub Application_OnStart()
   Application("counter") = 0
End Sub
</code></pre>
<p>
Each time a user starts a new session, the counter is updated. You then also make a local copy of the counter in a Session object variable for the user. The best place to do this is in the Session_OnStart event of the Global.asa file, using script such as this:</p>
<pre><code>Sub Session_OnStart()
   iCount = Application("counter")
   iCount = iCount + 1
   Application("counter") = iCount   ' Global counter
   Session("counter") = iCount   ' User's copy of counter
End Sub
</code></pre>
<p>
The opening page of your application could display the counter in this way:</p>
<pre><code>&lt;BODY&gt;
&lt;H1&gt;Welcome&lt;/H1&gt;
You are visitor number &lt;%=Session("counter")%&gt; 
out of &lt;%=Application("Counter")%&gt;.
&lt;/BODY&gt;
</code></pre>
<p>
When the user sees the opening page the first time, the two numbers are the same. If the user revisits the page, the "out of" number (the Application object counter) might change if other users have started sessions since the user first started a session.</p>
<p>
Application and session object variables generally store dynamic information only. If you want to keep the information permanently, you must devise a way to save the information between applications and sessions. One way is to write out values in <code>Application_OnEnd</code> or <code>Session_OnEnd</code> handlers in the Global.asa file.</p>
<h2>Adding Query Strings to Links</h2>
<p>
You can pass information directly to another page as part of a link (&lt;A&gt; tag). For example, a page might display a list of employee names, each of which is a link. When the user selects one of the names, the link calls a page and passes it the corresponding employee ID.</p>
<p class=label>
<b>To add a query string to a link</b>
<ul type=disc>
<li>
In a link definition (&lt;A&gt; tag), add a query string onto the end of the target URL, using "?" as a delimiter between the URL and the search string. The syntax is:<pre><code>&lt;<i>targetURL</i>&gt; ? &lt;<i>parm1</i>&gt;=&lt;<i>value</i>&gt; &amp; &lt;<i>parm2</i>&gt;=&lt;<i>value</i>&gt; &amp; ...
</code></pre>
</li>
</ul>
<p>
The following example shows a page that displays a list of employee names. Each name is a link. All links go to the same page, but each one passes a different employee ID.</p>
<pre><code>&lt;BODY&gt;
&lt;H1&gt;List of employees&lt;/H1&gt;
&lt;P&gt;Click the name of an employee to see information about that employee.&lt;/P&gt;
&lt;A HREF=EmplInputForm.asp?empid=1&gt;Ann&lt;/A&gt;&lt;BR&gt;
&lt;A HREF=EmplInputForm.asp?empid=2&gt;John&lt;/A&gt;&lt;BR&gt;
&lt;A HREF=EmplInputForm.asp?empid=3&gt;Susan&lt;/A&gt;&lt;BR&gt;
&lt;A HREF=EmplInputForm.asp?empid=4&gt;Michael&lt;/A&gt;&lt;BR&gt;
&lt;/BODY&gt;
</code></pre>
<p>
In the EmplInputForm.asp file, you can use the QueryString collection of the server Request object to determine what value was passed:</p>
<pre><code>&lt;% vEmplID = Request.QueryString("empid") %&gt;
</code></pre>
<p>
You can create more sophisticated dynamic links by using server script to supply values. For example, the following is a single line in which both the employee ID and employee name are supplied from a database query:</p>
<pre><code>&lt;A HREF=EmplInputForm.asp?empid= <b>&lt;%=</b>RS.Fields(<b>"</b>EmpID<b>"</b>)<b>%&gt;</b> &gt; _
   &lt;%=RS.Fields(<b>"</b>EmpFName<b>"</b>)<b>%</b>&gt;<b> </b>&lt;/A&gt;
</code></pre>
<p>
For more information about getting information from a database, see the <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dasdkadooverview">
</object><a href=JavaScript:alink_2.Click()>Microsoft ActiveX Data Objects (ADO) Overview</a>.</p>
<h2>Storing Information on the User’s Computer</h2>
<p>
A convenient way to maintain information about a user is to use a <a href="vimsgcookie.htm">cookie</a>. When a session is first started, the server sends a cookie to the client browser. Each time the client browser requests a page from that server, it sends the cookie back to the server, which can then read the cookie and identify the client browser.</p>
<p>
You can use cookies to store your own application information, such as user preferences. Cookies are available until the date specified in the cookies' Expires attribute. For information about cookie persistence, see the Active Server Pages documentation.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Because cookies can potentially write to the user's hard disk, most browsers usually allow users to disable them or to display a warning before accepting a cookie. For some applications — such as public applications that might be accessed by users with a wide range of browsers and security settings — cookies can be impractical. If you do use cookies, your application must provide an alternative way to maintain dynamic information if the user's browser refuses a cookie.</p>
<p class=label>
<b>To store information in a cookie</b>
<ul type=disc>
<li>
To put information into the cookie, use the Response.Cookies collection. To get information out of a cookie, use the Request.Cookies collection. For example:<pre><code>&lt;% Response.Cookies ("FavoriteColor")="Red" %&gt;

&lt;% txtFavorite = Request.Cookies("FavoriteColor")%&gt;
</code></pre>
</li>
</ul>
<p>
Cookies can store multiple values. Each value in the cookie is assigned a key by which you identify it.</p>
<p>
To store a value in a cookie, you use the Response object, specifying the name of the cookie to update, the key to update, and the value. If the cookie does not already exist, the Response object creates it. For example, the following updates a cookie setting the key FavoriteColor to the value "Red":</p>
<pre><code>&lt;% Response.Cookies("Preferences")("FavoriteColor")="Red" %&gt;
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You must update cookies in the &lt;HEAD&gt; section of an .asp file, or an error will result.</p>
<p>
If an existing cookie has key values but the <code>Response.Cookies</code> method does not specify a key name, then the existing key values are deleted. Similarly, if an existing cookie does not have key values but the <code>Response.Cookies</code> method specifies key names and values, the existing value of the cookie is deleted and new key-value pairs are created.</p>
<p>
To retrieve the value from a cookie, you use the <code>Request</code> object with similar syntax:</p>
<pre><code>&lt;% vColor = Request.Cookies("Preferences")("FavoriteColor") %&gt;
</code></pre>
<p>
To see how you can use cookies to store information, see the <a href="vismpuserpreferences.htm">User Preferences Sample</a>.</p>
<h2>Reading from and Writing to Files</h2>
<p>
In server scripts, another way to maintain information is to store it in a text file on the server. </p>
<p class=label>
<b>To read and write text files</b>
<ol>
<li>
In a server script, create a <code>TextStream</code> object.<br><br></li>
<li>
Use the object's <code>CreateTextFile</code>, <code>WriteLine</code>, and <code>ReadLine</code> methods to manage the information in the file.</li>
</ol>
<p>
The following example creates a new file and writes a single line of text to the file:</p>
<pre><code>&lt;HTML&gt;
&lt;BODY&gt;
&lt;H3&gt;Textstream test&lt;/H3&gt;
&lt;%
  Set OutStream = Server.CreateObject("MS.TextStream")
  OutStream.CreateTextFile "tsworks.txt", , True
  OutStream.WriteLine "This line is written to the file."
%&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</code></pre>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Debugging Stored Procedures and Triggers</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="vihowdebuggingstoredprocedurestriggers"></a>Debugging Stored Procedures and Triggers</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vihowDebuggingStoredProceduresTriggers_C">
</object></p>
<p>
If you are working with the Enterprise edition of Microsoft<sup>®</sup> Visual Studio™, Microsoft<sup>®</sup> Visual InterDev™ includes an SQL debugger that you can use to debug Microsoft<sup>®</sup> SQL Server™ stored procedures and triggers in much the same way that you debug other kinds of scripts or programs. However, there are some differences in how you set up SQL debugging and how the debugger runs.</p>
<h2>Setting Up SQL Debugging</h2>
<p>
SQL debugging requires the following:
<ul type=disc>
<li>
You must have the Enterprise edition of Visual Studio.<br><br></li>
<li>
You must be running SQL Server 6.5 with Service Pack 2.<br><br></li>
<li>
SQL Server must be running Microsoft<sup>®</sup> Windows NT<sup>®</sup> 4.0 or later.<br><br></li>
<li>
Your workstation must be running Windows<sup>®</sup> 95 or Windows NT 4.0 or later.</li>
</ul>
<p>
To use SQL debugging, you must properly configure your server and workstation. You should:
<ul type=disc>
<li>
Make sure that you have installed SQL Debugging components on your SQL server.<br><br></li>
<li>
Establish a Windows NT user who has administration privileges on the server computer where SQL Server is running.<br><br></li>
<li>
Configure Distributed COM (DCOM) on the server for SQL debugging.<br><br></li>
<li>
Make sure that the DCOM configuration on the client supports SQL debugging (Windows 95 workstations only).</li>
</ul>
<h3>Installing SQL Server Debugging Components</h3>
<p>
SQL debugging requires components that you install on your SQL Server. These components are part of Visual Studio, Enterprise Edition.</p>
<p class=label>
<b>To install SQL debugging components</b>
<ol>
<li>
On the computer where SQL Server is installed, start the Visual Studio Enterprise Edition setup program.<br><br></li>
<li>
The installation wizard presents slightly different choices, depending on whether you have previously installed server components on the computer.<ul type=disc>
<li>
If the server is already installed, under <b>Add/Remove Options</b>, choose <b>Server Applications and Tools</b>.<br><br></li>
<li>
If no other components have been installed, proceed through the setup wizard until you get to the page offering you <b>Enterprise Setup Options</b>. Choose <b>Server Applications</b>.</li>
</ul>
</li>
<li>
Proceed through the setup wizard until you get to the page offering you <b>Enterprise Setup Options</b>. Choose <b>Server Applications</b>.<br><br></li>
<li>
On the next page, select <b>Launch BackOffice Installation Wizard</b>, and then choose <b>Install</b>.<br><br></li>
<li>
When the BackOffice Business Solutions wizard is displayed, choose <b>Custom</b> and then choose <b>Next</b>.<br><br></li>
<li>
Proceed until you see the page offering you a list of components to install. Uncheck all components except the following:<ul type=disc>
<li>
<b>SQL Server Debugging</b><br><br></li>
<li>
<b>MS Data Access Components</b><br><br></li>
<li>
<b>Visual InterDev Server</b></li>
</ul>
</li>
<li>
Proceed with the installation.</li>
</ol>
<h3>Setting up a Debug User</h3>
<p>
To use SQL debugging, you must be able to provide the name and password of a Windows NT user who has administration privileges on the server computer where SQL Server is running.</p>
<p class=label>
<b>To set up a user for SQL debugging</b>
<ol>
<li>
In the Windows Control Panel on the server, choose <b>Settings</b>, and then choose <b>Services</b>.<br><br></li>
<li>
Select <b>MSSQLServer</b>, and then choose <b>Startup</b>.<br><br></li>
<li>
Check the <b>Log On As</b> settings. If the option is set to <b>System Account</b>, change it to <b>This Account</b>, enter the valid domain and user account (in the form <i>domain</i>\<i>account</i>) of a user with administration privileges, and then enter the password.<br><br></li>
<li>
If you have changed the setting, restart SQL Server.</li>
</ol>
<h3>Setting up DCOM for SQL Debugging</h3>
<p>
SQL debugging uses Distributed COM (DCOM) to communicate between your client computer and the server. You must therefore configure DCOM to allow a remote user to attach the debugger to a process there. </p>
<p>
By default, the correct DCOM settings are in place when SQL Server is installed on the server. However, because of security considerations for the computer running SQL Server, you might want to restrict access to debugging. Use the following as a general procedure for setting up DCOM for the SQL server computer.</p>
<p class=label>
<b>To configure DCOM on the server for SQL debugging</b>
<ol>
<li>
From the Windows Start menu on the server, choose <b>Run</b>, and then in the <b>Open</b> box type <b>Dcomcnfg.exe</b> at the prompt.<br><br></li>
<li>
In the <b>Distributed COM Configuration Properties</b> window, choose the <b>Default Security</b> tab. Under <b>Default Access Permissions</b>, choose <b>Edit Default</b>.<br><br></li>
<li>
If the group <b>Everyone</b> does not already have permissions, choose <b>Add</b>, and then add the domain and user account (in the form <i>domain</i>\<i>account</i>) of a user with administration privileges. <br><br></li>
<li>
After adding the account, check for <b>SYSTEM</b>. If it is not already in the list, add it by choosing it from the list of users in the <b>Add Names and Groups</b> dialog box.<br><br></li>
<li>
If you have changed any of the settings described in this procedure, restart SQL Server.</li>
</ol>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>If you added your account to the remote server but the current account on the remote server has not been added, then that account cannot debug even if a user with that account name is running Visual InterDev on the server computer.</p>
<h2>Running SQL Debugging</h2>
<p>
Unlike debugging other types of processes, you don't debug stored procedures or triggers while they are running. Instead, you open the procedure in the editor and debug it from there.</p>
<p class=label>
<b>To debug a stored procedure</b>
<ul type=disc>
<li>
In the <b>Data View</b> window, right-click the stored procedure to debug, and then choose <b>Debug</b>.<p class=tl>
The editor window opens with the stored procedure text in it and the debugging commands enabled on the <b>Debug</b> menu.</P></li>
</ul>
<p>
After you've opened the editor window in Debug mode, you can use debugger commands as usual. For example, you can set breakpoints and step through the procedure. You can view the values of variables and passed parameters in the Locals window. You can also drag expressions to the Watch window to track them as you step through or run the procedure. The results of SQL PRINT statements are displayed in the Output window.</p>
<p>
However, the SQL debugger has the following differences from the debugger used for script:
<ul type=disc>
<li>
The Auto and Immediate windows are not functional while you are debugging stored procedures. Although you can display them, the Auto window will be empty and the Immediate window will not allow you to enter expressions.<br><br></li>
<li>
You cannot change the execution sequence using the Set Next Statement command.</li>
</ul>
<p>
If you are working with simple SELECT statements — ones that return only a single value — the return value is in a variable that you can inspect in the Locals window. However, if the SELECT statement returns a result set, it is not displayed in the debugger. Instead, you can view the result set in the Output window.</p>
</BODY>
</HTML>

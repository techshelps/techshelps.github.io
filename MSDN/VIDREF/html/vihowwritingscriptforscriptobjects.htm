<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Writing Script for Script Objects</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="vihowwritingscriptforscriptobjects"></a>Writing Script for Script Objects</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vihowWritingScriptForScriptObjects_C">
</object></p>
<p>
One of the primary benefits of using the scripting object model and design-time controls is the ease of writing scripts that define your application's behavior. The scripting object model makes your Web pages work like forms in Microsoft<sup>®</sup> Visual Basic<sup>®</sup> or Microsoft<sup>®</sup> Access. After dragging design-time controls onto the page, you can use familiar scripting techniques to set their properties and write handlers for events.</p>
<p>
However, there are some differences between working with the scripting object model and working with other environments. In the sections that follow, you will find information about how to write script for script objects, including information about where you need to be aware of differences from other environments.</p>
<h2>Writing Script Appropriate for the Target Platform</h2>
<p>
The target platform specifies where scripts run, and therefore dictates what your scripts can do. When the target platform is server, you can use the scripting object model and the ASP programming model, including Microsoft<sup>®</sup> Internet Information Server (IIS) objects. Conversely, if your target platform is client, the scripting object model extends the document object model provided by Dynamic HTML (DHTML).</p>
<p>
As you write script, you must be clear where it will run, so that you do not attempt procedures that are not appropriate for the context. For example, if your target platform is server, do not try to display messages directly to the user with functions like MsgBox or with the alert method. Even if the functions would work properly (generally, they result in an error), they would display the message on the server rather than to the user.</p>
<h2>Changing Target Platforms</h2>
<p>
If the target platform is server, the RUNAT attribute of the script block will be set to SERVER. If the target platform is client, there is no RUNAT attribute.</p>
<p>
If you change target platforms for a page, you must manually add or remove the RUNAT attribute of affected script blocks. For example, if you initially added design-time controls to a page when the target platform was set to client, a script block might look like this:</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
</code></pre>
<p>
If you then change the target platform to server, you must add a RUNAT attribute, as in this example:</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript" <span class=cfe><b>RUNAT=SERVER</b></span>&gt;
</code></pre>
<p>
This might not be the only adjustment required. Other platform-specific features to be aware of include:
<ul type=disc>
<li>
Client script can display messages to the user. If you switch platforms to server, you must remove or replace MsgBox or alert calls.<br><br></li>
<li>
Client script can reference objects from the DHTML object model, including window, document, and others. If your script uses these objects, you must alter it when changing to the server platform.<br><br></li>
<li>
Server script must be written in the default page language (the language specified by the @&nbsp;LANGUAGE=attribute at the top of the page) or must include a LANGUAGE attribute in the &lt;SCRIPT&gt; block.<br><br></li>
<li>
Server script cannot access return values for certain calls, such as the onkeyup event.</li>
</ul>
<h2>Testing Script Objects</h2>
<p>
Test your page in the right place. Quick View in the HTML editor runs locally, so it does not process server script. Therefore, if your target platform is server, no script objects will appear in Quick View. Instead, use the browser to view the page from the Web server.</p>
<p class=label>
<b>To test using the browser</b>
<ul type=disc>
<li>
In the Project Explorer, right-click the name of the file to test, and then choose <b>View in Browser</b>.</li>
</ul>
<h2>Referencing Script Objects and Properties</h2>
<p>
In your script, you can reference a script object using the name that you assigned to it when you created the design-time control. You read and write most properties as usual, by adding their name onto the object reference with a dot (.).</p>
<p>
For example, if you have dragged a Textbox design-time control onto the page and named it <code>txtName</code>, you can read its current contents by getting the value of its <code>value</code> property, as in the following:</p>
<pre><code>&lt;SCRIPT LANGUAGE="JAVASCRIPT"&gt;
function getLName
{
 &nbsp; fname = <span class=cfe><b>txtName.value</b></span>;
}
&lt;/SCRIPT&gt;
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Object and property names are case-sensitive in JScript™ and JavaScript.</p>
<p>
By default, when you type in the name of a script object followed by a dot (.), the IntelliSense<sup>®</sup> popup will display all the properties and methods appropriate for the script object you are working with.</p>
<p>
When the scripting object model is enabled, you can reference the current page using the object name thisPage, or if you have specified it as a page object, by its page object name. For example, the following statement sets the value of the current page's cancelEvent property:</p>
<pre><code>thisPage.cancelEvent = True
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The thisPage object does not appear in the Script Outline window or IntelliSense drop-down unless you add a PageObject design-time control to the page. However, the thisPage object is available at run time and you can write scripts against it even if you have not used a PageObject control.</p>
<p>
Some values are accessible as pairs of methods: a get method to get the property's value, and a set method to write it. For example, you can check the state of a Checkbox script object by calling its getChecked method, and set it using the setChecked method. The following example illustrates this type of property:</p>
<pre><code>Function toggleCheckBox
 &nbsp; If checkbox1.getChecked() then
 &nbsp;&nbsp;&nbsp;&nbsp; checkbox1.setChecked(0)
 &nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp; checkbox1.setChecked(1)
 &nbsp; End if
End Function
</code></pre>
<p>
For a list of properties supported by each script object, see <a href="viovrscriptobjectmodelproperties.htm">Script Object Model Properties</a>.</p>
<h2>Calling Methods and Functions</h2>
<p>
You call methods for script objects the way you do with any object. For example, if you have dragged a Listbox design-time control onto the page, you can populate it by calling its addItem method, as in the following script:</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBSCRIPT"&gt;
Function LoadListBox()
   ListBox1.<span class=cfe><b>additem</b></span> "Paris"
   ListBox1.<span class=cfe><b>additem</b></span> "London"
   ListBox1.<span class=cfe><b>additem</b></span> "Cairo"
End Function
&lt;/SCRIPT&gt;
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Method names are case-sensitive in JScript™ and JavaScript.</p>
<p>
You can also call a method to run script on a different ASP page. For details, see <a href="vihowextendingscriptingobjectmodelacrosspages.htm">Extending the Scripting Object Model Across Pages</a>.</p>
<p>
For a list of methods supported by each script object, see <a href="viovrscriptobjectmodelmethods.htm">Script Object Model Methods</a>.</p>
<h2>Responding to Script Object Events</h2>
<p>
Each script object can generate a predetermined (or <i>implicit</i>) set of events. For example, the script object for a Button design-time control can generate a click event, and the script object for a Textbox design-time control can generate an onchange event.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can also extend the set of events that an object can respond to so that it can make use of any events that the browser generates. For details, see "Extending Events for an Object" below.</p>
<p>
To write a handler for a script object, create a procedure using the object's name and the event to handle. You can write event handlers in any scripting language supported by the browsers used for your application.</p>
<p>
For example, if you create a button called btnDisplay, you can write a handler for its onclick event that might look like this in VBScript:</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBSCRIPT"&gt;
Sub btnDisplay_onclick()
 &nbsp; Textbox1.value = "Button has been clicked"
End Sub
&lt;/SCRIPT&gt;
</code></pre>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;Use the Script Outline window to create event handlers. In the Script Outline window, expand the node for the object you are working with, and then double-click the name of the event you want to write a handler for. For details, see <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="csdlgScriptOutlineHTMLEditor">
</object><a href=JavaScript:alink_2.Click()>Script Outline Window</a>.</p>
<p>
For a list of events supported by each script object, see <a href="viovrscriptobjectmodelevents.htm">Script Object Model Events</a>.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Script object events occur only in response to a user action, not in response to programmatic changes. For example, if a user selects an item in a Listbox script object, the onchange event is fired. However, if you change the selection using a script statement, no event is fired.</p>
<p>
An important feature of design-time controls is that you write event handlers for script objects in either client or server script, according to the target scripting platform. When a user clicks a button, the event actually occurs on the client. However, if your target scripting platform is server, you write a handler in server script that responds to that event as if it had occurred on the server.</p>
<p>
In reality, if your scripting platform is server, the scripting object model wraps your page in a form. To process events in server script, the scripting object model performs a round trip to the server. </p>
<p>
First, the event is captured and that, along with information such as other script object values, is sent as part of the post. Then at the server, an additional scripting object model procedure determines that it is processing an event and calls your event handler. When the server script is finished, the refreshed page is sent back to the browser. A similar round trip is performed for every event processed in server script.</p>
<p>
For the most part, this process is invisible to the user and to your scripts, with these exceptions:
<ul type=disc>
<li>
Processing events in server script is slower than doing so in client script, because it involves a round trip to the server.<br><br></li>
<li>
You must be aware of where the event handler script is running, so that you do not attempt procedures that do not work on the server or on the client. For details, see <a href="vihowcreatingformswithdesigntimecontrols.htm">Creating Forms with Design-Time Controls</a>.</li>
</ul>
<h2>Extending Events for an Object</h2>
<p>
Each scripting object has a predetermined, or implicit, set of events that it can respond to. However, you might want to take advantage of other events that the browser generates and use them with your script objects.</p>
<p>
Most typically, if you are using design-time controls and your target scripting platform is client, you might want to take advantage of the events available in the DHMTL document object model. For example, the Textbox script object supports an implicit onchange event that you can write handlers for. However, on the client you might also want to write events for the onkeypress event and others.</p>
<p>
You can extend the set of events available to an object by <i>advising</i> for an event, or registering the object to be notified when the event occurs. After you have advised for an event, you can write event handlers for that event (for that object) as you would for any other event. You can cancel event notification by unadvising for the event.</p>
<p>
Each object supports an <a href="viproadvisemethod.htm">advise</a> method that allows you to register a specific event. When you advise, you specify the name of the event and the name of a function that will be called when the event occurs — in effect, the name of the event handler for the event.</p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;In general, advising for events is practical only when your scripting target platform is client. If your platform is server and you advise for an event such as onkeypress, you will cause a round trip to the server each time the event occurs (in this case, with each keystroke).</p>
<p>
You can advise and unadvise for an event at any time. A common time to do so is when a page is loaded. For client scripting targets, you create a handler for the window object's onload event and call the advise method there.</p>
<p>
The following example shows how you would advise at page initialization time to have a DHTML onkeypress event sent to the text box called Textbox1. When the onkeypress event fires for Textbox1, it will call the function checkkeys. The result of the advise method is an advise object called adviseTextbox1 that you can use later if you need to unadvise for the event.</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
Function window_onload()
 &nbsp; objAdviseTextbox1 = Textbox1.advise("onkeypress", "checkkeys()")
End function
&lt;/SCRIPT&gt;
</code></pre>
<p>
The function you specify in the advise method works like any event handler. If the event passes parameters, you can get those using the DHTML window object's event method. The following shows the handler for the onkeypress event in the previous example. It examines each keystroke that occurs in the Textbox1 object and copies only the numbers to the object Textbox2.</p>
<pre><code>Function checkkeys()
 &nbsp; character = Chr(window.event.keycode)
 &nbsp; If character &gt;= "0" and character &lt;= "9" then
 &nbsp;&nbsp;&nbsp;&nbsp; Textbox2.value = Textbox2.value &amp; character
 &nbsp; End if
End function
</code></pre>
<p>
When you no longer need notification of the event, cancel it by calling the object's unadvise method. The unadvise method requires the advise object returned by the advise method as well as the name of the event. The following shows an example of calling unadvise:</p>
<pre><code>Textbox1.unadvise("onkeypress", objAdviseTextbox1)
</code></pre>
<h2>Trapping Events on the Client</h2>
<p>
If the target platform for a page is server, event handlers are executed as server script. In some instances, however, you might want to trap the event&nbsp;— handle the event first in client script&nbsp;— before it is passed to the server. For example, you might want to trap a Save button onclick event in client script in order to validate user information before it is sent to the server.</p>
<p>
Trapping events is useful only if the target platform is server. If events are being processed on the client already, there is no need to trap the event, as it will not be passed to the server.</p>
<p class=label>
<b>To trap an event on the server</b>
<ul type=disc>
<li>
Write a JavaScript handler for the current page's <code>onbeforeserverevent</code> event. This event is fired just before the event is forwarded to the server. The syntax of the handler is as follows:<pre><code>function thisPage_onbeforeserverevent( <i>objectName</i>, <i>eventName</i> )
</code></pre>
<p class=tl>
The <i>objectName</i> parameter contains the name of the object that fired the event, and the <i>eventName</i> parameter contains the name of the event that is being forwarded to the server.</P></li>
</ul>
<p>
In your handler, you can cancel the event (prevent if from being forwarded to the server).</p>
<p class=label>
<b>To cancel an event on the server</b>
<ul type=disc>
<li>
Set the <code>cancelEvent</code> property to <code>true</code>.</li>
</ul>
<p>
The following is an example of how to trap the button click event for a delete button. The script prompts the user to confirm the deletion before proceeding.</p>
<pre><code>&lt;SCRIPT LANGUAGE="Javascript"&gt;
function thisPage_onbeforeserverevent( obj, event ){
if (obj=="btnDelete"){
 &nbsp;&nbsp;&nbsp;&nbsp; if(evnt=="onclick"){
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (confirm("Are you sure you want to Delete?")){
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alert("Deleted per your request");
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alert("Delete cancelled");
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; thisPage.cancelEvent = true;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp; }
}
&lt;/SCRIPT&gt;
</code></pre>
<h2>Converting Parameter Values</h2>
<p>
Some event handlers and methods receive parameters with the event call. If your target scripting platform is server, and if a procedure call is the result of a round trip to the server, parameter data types are converted to strings. A round trip occurs when:
<ul type=disc>
<li>
An action on the client (such as a button click) is processed in server script.<br><br></li>
<li>
Procedure in client script calls a method that is implemented in server script.<br><br></li>
<li>
You call a page object method on another page. For details, see <a href="vihowextendingscriptingobjectmodelacrosspages.htm">Extending the Scripting Object Model Across Pages</a>.<br><br></li>
<li>
A client makes a remote scripting call to an ASP page. For details, see <a href="vihowexecutingserverscriptremotely.htm">Executing Server Script Remotely</a>.</li>
</ul>
<p>
In any of these cases, the procedure that receives the parameter must convert it to the appropriate data type as necessary. For example, Boolean values are converted to the strings "true" or "false." If you write a procedure that receives a Boolean parameter, you should test it using script such as the following:</p>
<pre><code>Sub TestValue( boolFlag )
 &nbsp; dim flag
 &nbsp; If boolFlag = "true" then
 &nbsp;&nbsp;&nbsp;&nbsp; flag = True 
 &nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp; flag = False
 &nbsp; End If
 &nbsp; If flag then
 &nbsp;&nbsp;&nbsp;&nbsp; ' processing here
 &nbsp; End If
End Sub
</code></pre>
<h2>A Script Object Example</h2>
<p>
The following example shows a complete script block that includes properties, methods, and events. The page is a simple calculator with two text boxes, named Number1 and Number2, into which the user types numbers. The user selects an operator from lstOperators. When the user clicks btnCalculate, the result of the calculation is shown in Label1 as follows:</p>
<pre><code>&lt;SCRIPT RUNAT=SERVER LANGUAGE=VBSCRIPT&gt;
Sub thisPage_onenter()
 &nbsp;&nbsp; If thisPage.firstEntered then
 &nbsp;&nbsp;&nbsp;&nbsp; txtNumber1.value = ""
 &nbsp;&nbsp;&nbsp;&nbsp; txtNumber2.value = ""
 &nbsp;&nbsp;&nbsp;&nbsp; lstOperators.addItem "+", 10
 &nbsp;&nbsp;&nbsp;&nbsp; lstOperators.addItem "-", 20
 &nbsp;&nbsp;&nbsp;&nbsp; lstOperators.addItem "÷", 30
 &nbsp;&nbsp;&nbsp;&nbsp; lstOperators.addItem "x", 40
 &nbsp;&nbsp;&nbsp;&nbsp; lstOperators.selectByValue(10)
 &nbsp; End if
End Sub

Sub btnCalculate_onclick
 &nbsp; Dim Result
 &nbsp; Dim Value1, Value2
 &nbsp; Value1 = CInt(txtNumber1.value)
 &nbsp; Value2 = CInt(txtNumber2.value)
 &nbsp; Select Case CInt(lstOperators.getValue())
 &nbsp; Case 10:
 &nbsp;&nbsp;&nbsp;&nbsp; Result = Value1 + Value2
 &nbsp;&nbsp;&nbsp;&nbsp; Operation = " plus "
 &nbsp; Case 20:
 &nbsp;&nbsp;&nbsp;&nbsp; Result = Value1 - Value2
 &nbsp;&nbsp;&nbsp;&nbsp; Operation = " minus "
 &nbsp; Case 30:
 &nbsp;&nbsp;&nbsp;&nbsp; Result = Value1 / Value2
 &nbsp;&nbsp;&nbsp;&nbsp; Operation = " divided by "
 &nbsp; Case 40:
 &nbsp;&nbsp;&nbsp;&nbsp; Result = Value1 * Value2
 &nbsp;&nbsp;&nbsp;&nbsp; Operation = " times "
 &nbsp; End Select
 &nbsp; lblResult.setCaption(Value1 &amp; Operation &amp; Value2 &amp; " is " &amp; Result)
End Sub
&lt;/SCRIPT&gt;
</code></pre>
</BODY>
</HTML>

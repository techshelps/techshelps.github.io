<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Debugging Mixed Client and Server Script</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="vihowdebuggingmixedclientserverscript"></a>Debugging Mixed Client and Server Script</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vihowDebuggingMixedClientServerScript_C">
</object></p>
<p>
Many ASP pages contain both client and server script. You can set breakpoints in both client and server script, and as each script executes, it can call the debugger at breakpoints. </p>
<p>
If the server is not running on your computer, you use <i>remote debugging</i> to debug the server script in the page. For details about how to set up remote debugging, see <a href="vihowdebuggingremotely.htm">Debugging Remotely</a>.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;It is highly recommended that you do not use Active Desktop™ mode of Microsoft<sup>®</sup> Internet Explorer 4.0 when you are debugging.</p>
<h2>Enabling Debugging for ASP Pages</h2>
<p>
Before you can debug script in ASP pages, you must enable debugging. You can manually enable debugging for your ASP application as described under "Enabling ASP Debugging on the Server" in the <a href="vicontroubleshooting.htm">Troubleshooting</a> topic. Alternatively, Microsoft<sup>®</sup> Visual InterDev™ can automatically enable debugging on the server as needed.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;To debug script in ASP pages, you must be running version 4.0 or later of Microsoft<sup>®</sup> Internet Information Server (IIS).</p>
<p class=label>
<b>To enable script debugging in ASP pages</b>
<ol>
<li>
In the Project Explorer, right-click the project and choose <b>Properties</b> to display the <b>Property Pages</b> dialog box.<br><br></li>
<li>
Choose the <b>Launch</b> tab.<br><br></li>
<li>
Under <b>Server script</b>, make sure <b>Automatically enable ASP server-side debugging on launch</b> and <b>Automatically enable ASP client-side debugging on launch</b> are checked.</li>
</ol>
<p>
When these options are set, each time you start a debugging session Visual InterDev checks that the server is configured for debugging. This includes:
<ul type=disc>
<li>
Setting the IIS application to run in its own memory space (in COM terms, it runs "out of process").<br><br></li>
<li>
Enabling the IIS application's debugging options.<br><br></li>
<li>
Setting up a Microsoft<sup>®</sup> Transaction Server (MTS) package to allow you to attach the debugger to the Web application. The package's identify is set when you first start the debugging session by asking you to provide your name and password.</li>
</ul>
<p>
When you quit your debugging session, Visual InterDev restores the server debugging settings and out-of-process setting to their previous values.</p>
<h2>Debugging Pages Containing Client and Server Script</h2>
<p>
When you set a breakpoint in client script in a page that contains both server and client script, the debugger tracks the breakpoint even though the position of the breakpoint can change significantly in the file after server script has executed. If server script causes the client script to be written several times into the page, the debugger tracks each breakpoint separately.</p>
<p>
You can set breakpoints in server script, client script, or both. If you set breakpoints in both, the debugger will stop at the server script breakpoints first. When you continue to run, the page is sent to the browser, and the debugger will then stop at breakpoints in client script.</p>
<p class=label>
<b>To debug pages containing both client and server script</b>
<ol>
<li>
In Visual InterDev, set breakpoints in the lines of client and server script that you want to debug.<br><br></li>
<li>
Make the page your project's start page. In the Project Explorer, right-click the page and choose <b>Set as Start Page</b>.<br><br></li>
<li>
From the <b>Debug</b> menu, choose <b>Start</b>.<p class=tl>
Visual InterDev attempts to attach the debugger to the document running on the server.</P></li>
<li>
If this is the first time you have started the debugger since opening the current project, you are prompted to provide user information used to identify the debugging process on the server. Enter your domain and name (in the form <i>domain</i>\<i>name</i>) and password.<br><br></li>
<li>
Proceed with debugging. When server script execution reaches the line with the breakpoint, the debugger displays the page in the editor with that line highlighted.<p class=tl>
When you step out of server script, the page will continue executing until it gets to another server script. When the debugger has finished with server script, the server sends the page to the browser, which displays it.</P></li>
<li>
If necessary, trigger the event (such as a button click) that will run the client script you want to debug.<p class=tl>
The debugger stops at the breakpoint and displays the version of the page that is being processed by the browser.</P></li>
</ol>
<p>
When you are debugging pages that contain both server and client script, remember that server script can potentially insert HTML text and client script into the page. For example, a few lines of server script can dynamically create a large table out of database information, or can write or rearrange client script on the page.</p>
<p>
After processing the page, the server removes the server script. As a consequence, the page being processed by the browser can look quite different than it does in the Visual InterDev editor with both server and client script in it. For details about how server script is processed, see <a href="viconthescriptdebuggingprocess.htm#vimscunderstandingscriptprocessing">Understanding Script Processing</a>.</p>
<h2>Debugging Embedded Server Script</h2>
<p>
A special case occurs when you want to debug server script that appears inside a block of client script. In the following, server script first extracts a value from a form and stores it in a variable. Later, inside the block of client script, a block of embedded server script dynamically inserts the value of the variable into a client statement:</p>
<pre><code>&lt;%loginName = Request.Form("loginName")%&gt;

&lt;SCRIPT LANGUAGE="VBScript"&gt;
Sub ShowWelcome
 &nbsp; txt = "<span class=cfe><b>&lt;%=loginName%&gt;</b></span>"
 &nbsp; MsgBox("Welcome, " &amp; txt)
End sub
&lt;/SCRIPT&gt;
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;When you write server script inside of client script, the editor does not follow color-coding convention for server script.</p>
<p>
If you set a breakpoint on the line with the embedded server script, it is not clear whether you want the debugger to stop on the server script (<code>&lt;%=loginName%&gt;</code>) or later in the client script (<code>txt = </code>). Visual InterDev therefore offers you two options:
<ul type=disc>
<li>
<B><b>Client breakpoint only.</b></B> The breakpoint is interpreted as a client breakpoint, and the debugger does not stop when the server is processing the embedded server script. <br><br></li>
<li>
<B><b>Server and client breakpoint.</b></B> The debugger stops twice&nbsp;— the first time when it processes the server script, and then again when it reaches the same line in client script.</li>
</ul>
<p>
The default is client breakpoint only. To stop both times, you enable a debugger option.</p>
<p class=label>
<b>To enable breakpoints for embedded server script</b>
<ol>
<li>
From the <b>Tools</b> menu, choose <b>Options</b>, and then open the <b>Debugger</b> node.<br><br></li>
<li>
Choose the option <b>Insert breakpoints in Active Server Pages for breakpoints in client script</b>.</li>
</ol>
<p>
When you are running the debugger and it breaks on embedded server script, it does not stop directly on the line containing the server script. Instead, it stops on the line of client script or HTML that immediately follows the preceding line of server script. In some cases, this can cause the breakpoint to appear many lines before the embedded server script. </p>
<p>
For example, if you set a breakpoint on the embedded server script (<code>&lt;%=loginName%&gt;</code>) in the following example, the debugger will stop on the &lt;HTML&gt; tag.</p>
<pre><code>&lt;%loginName = Request.Form("loginName")%&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;SCRIPT LANGUAGE="VBScript"&gt;
Sub ShowWelcome
 &nbsp; txt = "&lt;%=loginName%&gt;"
 &nbsp; MsgBox("Welcome, " &amp; txt)
End sub
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
</code></pre>
<p>
This behavior occurs because when the server is processing the page, it ignores anything that isn't server script. The server doesn't "see" the lines of HTML and client script that precede the embedded server script. To the server, the beginning of the line containing the embedded server script is therefore the one immediately following the preceding line of server script.</p>
<p>
To move to the embedded server script, use the debugger's Step Into command.</p>
</BODY>
</HTML>

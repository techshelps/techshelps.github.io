<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ChartData Property Example</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbprochartdatapropertyx"></a>ChartData Property Example</h1>
<p>
The following example uses a Visual Basic array to load the chart data grid directly. To try the example, draw a <b>MSChart</b> control on a form, paste the code into the <b>Form</b> object's code module, and run the project.</p>
<pre><code>Option Explicit
Option Base 1

Private Sub Form_Load()
 &nbsp;&nbsp; Dim arrData(3, 1 To 3)
 &nbsp;&nbsp; arrData(1, 1) = "Jan"   ' Set the labels in the first series.
 &nbsp;&nbsp; arrData(2, 1) = "Feb"
 &nbsp;&nbsp; arrData(3, 1) = "Mar"
 &nbsp;&nbsp; 
 &nbsp;&nbsp; arrData(1, 2) = 8
 &nbsp;&nbsp; arrData(2, 2) = 4
 &nbsp;&nbsp; arrData(3, 2) = 0.3
 &nbsp;&nbsp; 
 &nbsp;&nbsp; arrData(1, 3) = 0.2
 &nbsp;&nbsp; arrData(2, 3) = 3
 &nbsp;&nbsp; arrData(3, 3) = 6.3
 &nbsp;&nbsp; MSChart1.<span class=cfe><b>ChartData</b></span> = arrData
End Sub</code></pre>
<p>
In this example, the lower subscript bound was declared as 1 using the <b>Option Base 1</b> statement, rather than the default of 0. We use a <b>Variant</b> array where the first series values are set to string variables and the second and third series' values are set to numeric values. This allows both the chart's labels and data to be set simultaneously. Note that declaring the array as type <b>String</b> works too, as long as the second and third series contain numeric values. If you wish only to set the chart's data, the array can be of the numeric types <b>Integer</b>, <b>Long</b>, <b>Single</b> or <b>Double</b>. Note that doing this will replace the existing chart labels with default row/column labels. Also, a one-dimensional array will work as well as a two-dimensional one as long as the last values are either numeric or text representations of numeric values.</p>
<p>
The following example returns data from the chart. The example contains a loop to print out the array returned from the chart. Note the use of the <b>Lbound</b> and <b>Ubound</b> functions to determine the array bounds from the chart. To try the example, draw a <b>CommandButton </b>control onto a form with a <b>MSChart </b>control. Paste the code into the code module, run the project, and click the button.</p>
<pre><code>Option Explicit
Private Sub Command1_Click()
   Dim y() As Variant
   Dim i, j As Integer
   y = MSChart1.ChartData
   For i = LBound(y, 2) To UBound(y, 2)
      Debug.Print
      For j = LBound(y, 1) To UBound(y, 1)
         Debug.Print y(j, i)
      Next j
   Next i
End Sub</code></pre>
<p>
The returned array lower bound values are equal to 0. The returned array will always be a two-dimensional array of type <b>Variant</b>. Since <b>ChartData</b> is the default property for the chart, the object name alone, such as MSChart1, can be substituted for MSChart1.ChartData. So you could use MSChart1 = data or data = MSChart1.</p>
</BODY>
</HTML>

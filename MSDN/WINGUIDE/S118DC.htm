<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Visual States for Controls</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" >

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<H2>Visual States for Controls</H2><P>  </P>
<P>The visual design of controls includes the various states supported by the control. If you use standard Windows controls, Windows automatically provides specific appearances for these states. If you design your own controls, use the information in the previous section for the appropriate border style and information in the following sections to make your controls consistent with standard Windows controls.</P>
<P>  </P>
<P><B>Note</B>   <img src="XREF.gif"><BR>For more information about standard control behavior and appearance, see Chapter 7, "Menus, Controls, and Toolbars," and the documentation included in the Win32 SDK.</P>
<P>  </P>
<H4><A NAME="PT2"></A>Pressed Appearance</H4>
<P>When the user presses a control, it provides visual feedback on the down transition of the mouse button. (For the pen, the feedback provided is for when the pen touches the input surface and for the keyboard, upon the down transition of the key.)</P>
<P>For standard Windows check boxes and option buttons, the background of the button field is drawn using the button face color, as shown in <BR>Figure 13.9.</P>
<P><img src="13_09.gif"></P>
<P><B>Figure 13.9 Pressed appearance for check boxes and option buttons</B></P>
<P>For command buttons, the button-down border style is used and the button label moves down and to the right by one pixel, as shown in Figure 13.10.</P>
<P><img src="13_10.gif"></P>
<P><B>Figure 13.10 Pressed appearance for a command button</B></P>
<H4><A NAME="PT3"></A>Option-Set Appearance</H4>
<P>When using buttons to indicate when its associated value or state applies or is currently set, the controls provide an <I>option-set</I> <I>appearance</I>. The option-set appearance is used upon the up transition of the mouse button or pen tip, and the down transition of a key. It is visually distinct from the pressed appearance.</P>
<P>Standard check boxes and option buttons provide a special visual indicator when the option corresponding to that control is set. A check box uses a check mark, and an option button uses a dot that appears inside the button, as shown in Figure 13.11.</P>
<P><img src="13_11.gif"></P>
<P><B>Figure 13.11 Option-set appearance for check boxes and option buttons</B></P>
<P>When using command buttons to represent properties or other state information, the button face reflects when the option is set. The button continues to use the button-down border style, but a checkerboard pattern (dither) using the color of the button face and button highlight is displayed on the interior background of the button, as shown in Figure 13.12. For configurations that support 256 or more colors, if the button highlight color setting is not white, the button interior background is drawn in a halftone between button highlight color and button face color. The glyph on the button does not otherwise change from the pressed appearance.</P>
<P><img src="13_12.gif"></P>
<P><B>Figure 13.12 Option-set appearance for a command button</B></P>
<P>For well controls (shown in Figure 13.13), when a particular choice is set, place a border around the control, using the window text color and the button highlight color.</P>
<P><img src="13_13.gif"></P>
<P><B>Figure 13.13 Option-set appearance for a well</B></P>
<H4><A NAME="PT4"></A>Mixed-Value Appearance</H4>
<P>When a control represents a property or other setting that reflects a set of objects where the values are different, the control is displayed with a <I>mixed-value</I> appearance (also referred to as indeterminate appearance), as shown in Figure 13.14.</P>
<P>For most standard controls, leave the field with no indication of a current set value if it represents a mixed value. For example, for a drop-down list, the field is blank.</P>
<P>Standard check boxes support a special appearance for this state that displays the check mark, in the button shadow color, against a checkerboard background that uses the button highlight color and button face color. For configurations that support 256 or more colors, if the button highlight color setting is not white, the interior of the control is drawn in a halftone between button highlight color and button face color.</P>
<P>  </P>
<P><B>Note</B>   <img src="XREF.gif"><BR>The system defines the mixed-value states for check boxes as constants BS_3STATE and BS_AUTO3STATE when using the <B>CreateWindow </B>and <B>CreateWindowEx</B> functions. For more information about these functions, see the documentation included in the Win32 SDK.</P>
<P>  </P>
<P><img src="13_14.gif"></P>
<P><B>Figure 13.14 Mixed-value appearance for a check box</B></P>
<P>For graphical command buttons, such as those used on toolbars, the checkerboard pattern, using the button highlight color and button face color, or the halftone color, is drawn on the background of the button face, as shown in Figure 13.15. The image is converted to a monochrome presentation and drawn in the button shadow color.</P>
<P><img src="13_15.gif"></P>
<P><B>Figure 13.15 Mixed-value appearance for buttons</B></P>
<P>For check box and command button controls displaying mixed-value appearance, when the user clicks the button, the property value or state is set. Clicking a second time clears the value. As an option, you can support a third click to return the button to the mixed-value state.</P>
<H4><A NAME="PT5"></A>Unavailable Appearance</H4>
<P>When a control is unavailable (also referred to as disabled), its normal functionality is no longer available to the user (though it can still support access to contextual Help information) because the functionality represented does not apply or is inappropriate under the current circumstances. To reflect this state, the label of the control is rendered with a special <I>unavailable appearance</I>, as shown in Figure 13.16.</P>
<P><img src="13_16.gif"></P>
<P><B>Figure 13.16 Unavailable appearance for check boxes and option buttons</B></P>
<P>For graphical or text buttons, create the engraved effect by converting the label to monochrome and drawing it in the button highlight color. Then overlay it, at a small offset, with the label drawn in the button shadow color, as shown in Figure 13.17.</P>
<P><img src="13_17.gif"></P>
<P><B>Figure 13.17 Unavailable appearance for buttons</B></P>
<P>If a check box or option button is set, but the control is unavailable, then the control's label is displayed with an unavailable appearance, and its mark appears in the button shadow color, as shown in Figure 13.18.</P>
<P><img src="13_18.gif"></P>
<P><B>Figure 13.18 Unavailable appearance for check boxes and option buttons (when set)</B></P>
<P>If a graphical button needs to reflect both the set and unavailable appearance (as shown in Figure 13.19), omit the background checkerboard pattern and combine the option-set and the unavailable appearance for the button's label.</P>
<P><img src="13_19.gif"></P>
<P><B>Figure 13.19 Unavailable and option-set appearance for buttons</B></P>
<H4><A NAME="PT6"></A>Input Focus Appearance</H4>
<P>You can provide a visual indication so the user knows where the input focus is. For text boxes, the system provides a blinking cursor, or insertion point. For other controls a dotted outline is drawn around the control or the control's label, as shown in Figure 13.20.</P>
<P><img src="13_20.gif"></P>
<P><B>Figure 13.20 Example of input focus in a control</B></P>
<P>The system provides the input focus appearance for standard controls. To use it with your own custom controls, specify the rectangle to allow at least one pixel of space around the extent of the control. If the input focus indicator would be too intrusive, as an option, you can include it around the label for the control. Display the input focus when the mouse button (pen tip) is pressed while over a control; for the keyboard, display the input focus when a navigation or access key for the control is pressed.</P>
<P>  </P>
<P><B>Note</B>   <img src="XREF.gif"><BR>The system provides support for drawing the dotted outline input focus indicator using the <B>DrawFocusRect</B> function. For more information about this function, see the documentation included in the Win32 SDK.</P>
<P>  </P>
<H4><A NAME="PT7"></A>Flat Appearance</H4>
<P>When you nest controls inside of a scrollable region or control, avoid using a three-dimensional appearance because it may not work effectively against the background. Instead, use the flat appearance style, as shown in Figure 13.21.</P>
<P><img src="13_21.gif"></P>
<P><B>Figure 13.21 Flat appearance for standard controls</B></P>
<P>The system provides support for the flat appearance style for standard controls. It also includes support for drawing the edges of your own custom controls so you can match the appearance used by standard system controls.</P>
<P>  </P>
<P><B>Note</B>   <img src="XREF.gif"><BR>The <B>DrawFrameControl</B> and <B>DrawEdge</B> functions support drawing the flat appearance. For more information about these functions, see the documentation included in the Win32 SDK.</P>
<P>  </P>
<P> </P></FONT>
	</BODY>

</HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Targeting</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" >

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<H3>Targeting</H3><P>  </P>
<P>Targeting, or determining where to direct pen input, is an important design factor for pen-enabled software. For example, if the user gestures over a set of objects, which objects should be affected? If the user writes text that spans several writing areas, which text should be placed in which area? In general, you use the context of the input to determine where to apply pen input. More specifically, use the following guidelines for targeting gestures on objects:</P>
<UL><LI>If the user draws the gesture on any part of a selection, apply the gesture to the selection.</LI><LI>If the user draws the gesture on an object that is not selected, select that object, and apply the gesture to that object.</LI><LI>If the user does not draw the gesture on any object or selection, but there is a selection, apply the gesture to that selection.</LI></UL><P>If none of these guidelines applies, ignore the gesture.</P>
<P>For handwriting, you can also use context to determine where to direct the input. Figure 4.1 demonstrates how the proximity of the text to the text boxes determines the destination of the written text.</P>
<P>    <img src="04_18.gif"></P>
<P><B>Figure 4.1 Targeting handwritten input</B></P>
<P>The system's pen services provide basic support for targeting, but your application can also provide additional support. For example, your application can define a larger inking rectangle than the control usually provides. In addition, because your application often knows the type of input to expect, it can use this information to better interpret where to target the input.</P>
<P></P>
<P></P>
<P> </P></FONT>
	</BODY>

</HTML>

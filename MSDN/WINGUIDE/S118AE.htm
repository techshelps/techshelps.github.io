<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Displaying Objects</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" >

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<H1>Displaying Objects</H1><P>  </P>
<P>While a container can control whether to display an OLE embedded or linked object in its content or icon presentation, the container requests the object to display itself. In the content presentation, the object may be visually indistinguishable from native objects, as shown in Figure 11.9.</P>
<P>  </P>
<P><B>Note</B>   <img src="XREF.gif"><BR>The <B>GetSysColor</B> function provides the current settings for window text color (COLOR_WINDOW-TEXT) and grayed text color (COLOR_GRAY-TEXT). For more information about this function, see the documentation included in the Win32 SDK.</P>
<P>  </P>
<P>    <img src="11_08.gif"></P>
<P><B>Figure 11.9 A compound document containing OLE objects</B></P>
<P>You may find it preferable to enable the user to visually identify OLE embedded or linked objects without interacting with them. To do so, you can include a Show Objects command that, when chosen, displays a solid border, one pixel wide, drawn in the window text color around the extent of an OLE embedded object and a dotted border around OLE linked objects (shown in Figure 11.10). If the container application cannot guarantee that an OLE linked object is up-to-date with its source because of an unsuccessful automatic update or a manual link, the system should draw a dotted border using the system grayed text color to suggest that the OLE linked object is out of date. The border should be drawn around a container's first-level objects only, not objects nested below this level.</P>
<P>    <img src="11_09.gif"></P>
<P><B>Figure 11.10 Identifying OLE objects using borders</B></P>
<P>If these border conventions are not adequate to distinguish OLE embedded and linked objects, you can optionally include additional distinctions; however, make them clearly distinct from the appearance for any standard visual states and distinguish OLE embedded from OLE linked objects.</P>
<P>Whenever the user creates an OLE linked or embedded object with the Display As Icon check box set, display the icon using the icon of its type, unless the user explicitly changes it. A linked icon also includes the shortcut graphic. If an icon is not registered in the registry for the object, use the system-generated icon.</P>
<P>An icon includes a label. When the user creates an OLE embedded object, define the icon's label to be one of the following, based on availability:</P>
<UL><LI>The name of the object, if the object has an existing human-readable name such as a filename without its extension.</LI><LI>The object's registered short type name (for example, Picture, Worksheet, and so on), if the object does not have a name.</LI><LI>The object's registered full type name (for example, a bitmap image, a Microsoft Excel Worksheet), if the object has no name or registered short type name.</LI><LI>"Document" if an object has no name, a short type name, or a registered type name.</LI></UL><P>When an OLE linked object is displayed as an icon, define the label using the source filename as it appears in the file system, preceded by the words "Shortcut to" — for example, "Shortcut to Annual Report." The path of the source is not included. Avoid displaying the filename extension unless the user chooses the system option to display extensions or the file type is not registered.</P>
<P>  </P>
<P><B>Note</B>   <img src="NOTE.gif"><BR>The system provides support to automatically format the name correctly if you use the <B>GetIconOfFile</B> function. For more information about this function, see the OLE documentation included in the Win32 SDK.</P>
<P>  </P>
<P>When the user creates an OLE object linked to only a portion of a document (file), follow the same conventions for labeling the shortcut icon. However, because a container can include multiple links to different portions of the same file, you may want to provide further identification to differentiate linked objects. You can do this by appending a portion of the end of the link path (moniker). For example, you may want to include everything from the end of the path up to the last or next to last occurrence of a link path delimiter. OLE applications should use the exclamation point (!) character for identifying a data range. However, the link path may include other types of delimiters. Be careful when deriving an identifier from the link path to format the additional information using only valid filename characters so that if the user transfers the shortcut icon to a folder or the desktop, the name can still be used.</P>
<P> </P></FONT>
	</BODY>

</HTML>

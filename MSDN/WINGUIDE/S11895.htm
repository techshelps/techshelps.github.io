<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Registering Shell Extensions</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" >

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<H2>Registering Shell Extensions</H2><P>  </P>
<P>Your application can extend the functionality of the operational environment provided by the system, also known as the shell, in a number of ways. A shell extension enhances the system by providing additional ways to manipulate file objects, by simplifying the task of browsing through the file system, or by giving the user easier access to tools that manipulate objects in the file system.</P>
<P>  </P>
<P><B>Note</B>   <img src="XREF.gif"><BR>Support for shell extensions may depend on the version of Windows installed. For more information about specific releases, see Appendix D, "Supporting Specific Versions of Windows."</P>
<P>  </P>
<P>Every shell extension requires a <I>handler</I>, special application code (32-bit OLE InProc server implemented as a dynamic-link library) that implements subordinate functions. The types of handlers you can provide include:</P>
<UL><LI>Pop-up (context) menu handlers: these add menu items to the pop-up menu for a particular file type.</LI><LI>Drag handlers: these allow you to support the OLE data transfer conventions for drag and drop operations of a specific file type.</LI><LI>Drop handlers: these allow you to carry out some action when the user drops objects on a specific type of file.</LI><LI>Nondefault drag and drop handlers: these are pop-up menu handlers that the system calls when the user drags and drops an object by using mouse button 2.</LI><LI>Icon handlers: these can be used to add per-instance icons for file objects or to supply icons for all files of a specific type.</LI><LI>Property sheet handlers: these add pages to a property sheet that the shell displays for a file object. The pages can be specific to a class of files or to a particular file object.</LI><LI>Copy-hook handlers: these are called when a folder or printer object is about to be moved, copied, deleted, or renamed by the user. The handler can be used to allow or prevent the operation.</LI></UL><P>You register the handler for a shell extension in the <B>HKEY_ CLASSES_ROOT</B> key. The <B>CLSID</B> subkey contains a list of class identifier key values such as {00030000-0000-0000- C000-000000000046}. Each class identifier must also be a globally unique identifier.</P>
<P>  </P>
<P><B>Note</B>   <img src="XREF.gif"><BR>For more information about creating handlers and class identifiers, see the OLE documentation included in the Win32 SDK.</P>
<P>  </P>
<P>You must also create a <B>shellex</B> subkey under the application's class identification entry in the <B>HKEY_CLASSES_ROOT</B> key.</P>
<P CLASS="syn"><B>HKEY_CLASSES_ROOT</B><BR>    <B><I>ApplicationIdentifier</I></B> = <I>Type</I> <I>Name<BR></I>        <B>Shell</B> [ = <I>default</I> <I>verb</I> [,<I>verb2</I> [,..]]<I><BR></I>            ...<BR>            <B>shellex</B><BR>                <B><I>HandlerType<BR></I></B>                    <B>{</B><B><I>CLSID</I></B> <B><I>identifier</I></B><B>}</B> = <I>Handler</I> <I>Name<BR></I>                ...<BR>                <B><I>HandlerType</I></B> <I>=</I> {<I>CLSID</I> <I>identifier</I>}</P>
<P>The shell also uses several other special keys, such as <B>*</B>, <B>Folder</B>, <B>Drives</B>, and <B>Printers</B>, under <B>HKEY_CLASSES_ROOT</B>. You can use these keys to register extensions for system-supplied objects. For example, you may use the <B>*</B> key to register handlers that the shell calls whenever it creates a pop-up menu or property sheet for a file object, as in the following example.</P>
<P CLASS="syn"><B>HKEY_CLASSES_ROOT</B><BR>    <B>*</B> = *<I><BR></I>        <B>shellex</B><BR>            <B>ContextMenuHandlers</B><I><BR></I>                <B>{00000000-1111-2222-3333-0000000001}<BR></B>            <B>PropertySheetHandlers</B> <I>=</I> SummaryInfo<BR>                <B>{00000000-1111-2222-3333-0000000002}<BR></B>            <B>IconHandler</B> <B>=</B> {00000000-1111-2222-3333-000000003}</P>
<P>The shell would use these handlers to add to the pop-up menus and property sheets of every file object. (The entries are intended only as examples, not literal entries.)</P>
<P>A pop-up menu handler may add commands to the pop-up menu of a file type, but it may not delete or modify existing menu commands. You can register multiple pop-up menu handlers for a file type. The order of the subkey entries determines the order of the items in the context menu. Handler-supplied menu items always follow registered command names.</P>
<P>Keep in mind that if you want to include a command on the pop-up menu of every file of a particular type, you do not need to create and register a pop-up menu handler. You can just use the normal means of registering commands for that type. Create a pop-up menu handler only when you want to provide a command only under specific conditions, such as the length of the file or its timestamp.</P>
<P>When registering an icon handler for providing per-instance icons for a file type, set the value for the <B>DefaultIcon</B> key to %1. This denotes that each file instance of this type can have a different icon.</P>
<P> </P></FONT>
	</BODY>

</HTML>

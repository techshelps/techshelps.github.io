<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Agents Revealed: An Introduction to Microsoft Agents</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<Font face="verdana,arial,helvetica" size="2">

<h1>Agents Revealed: An Introduction to Microsoft Agents</h1>
<p class=indent>
By Shannon Lake</p>
<p>
The day has finally arrived. Using Microsoft Agent, you can now literally “tell” your computer to run a report, read a letter, or play a song. This article will describe how to make use of Agent’s text-to-speech feature. You’ll learn how to extend VBA to include an ActiveX, and how to code an application that will call Agent to read your active Word document aloud.</p>
<p>
Microsoft Agent 1.5 uses multiple characters — Genie, Merlin, and Robby, as of this writing (see FIGURE 1) — to offer a human/machine interface unlike any of its predecessors, including Microsoft Office Assistant. Each character has been three-dimensionally rendered, and has a unique set of animations.</p>
<p>
<img src="sl_fig01.gif" border=0></p>
<p>
<b>FIGURE 1: The Microsoft Agent characters: Genie, Merlin, and Robby.</b></p>
<h3>The Set Up</h3>
<p>
To get the most from Agent, however, you need to do a little prep work. You must download and install several components. They’re all available at http://www.microsoft.com/workshop/prog/agent. With each of these, download the compressed executable file and run it to perform the installation:</p>
<p>
the Microsoft Agent Control</p>
<p>
the Microsoft Command and Control speech engine</p>
<p>
the Lernout &amp; Hauspie TruVoice text-to-speech engine</p>
<p>
Then download and place the following files in the \Program Files\Microsoft Agent\Characters directory:</p>
<p>
genie.acs</p>
<p>
merlin.acs</p>
<p>
robby.acs</p>
<p>
You should also download the Agent documentation. At a minimum, you’ll need <i>Programming the Microsoft Agent Control</i>, <i>Programming the Microsoft Agent Server Interface</i>, and the documentation for each character, e.g. <i>Microsoft Agent Animations for Robby Character</i>. You’ll also need a sound card, speakers, and a microphone to dictate commands.</p>
<h3>The Agent’s First Mission: Just Show Up</h3>
<p>
In the first project, we’ll write a test procedure to verify that Agent and its components are installed correctly. We’re not asking for a lot the first time out; the Agent just needs to show up and say a few words. We’ll use Genie for the test run. </p>
<p>
Begin by launching Microsoft Word 97 and activating the Visual Basic Editor by pressing AL! (or selecting Tools | Macro | Visual Basic Editor). Next, click on the Project Explorer, or press Cr. This will give you a list of all the projects you’ve opened. Select the Normal project. (For more on Normal, see the sidebar “The Normal Template” on page XX.)</p>
<p>
<b>Creating the form.</b> Insert a form by selecting Insert | UserForm from the Project Explorer or menu. Modify the UserFform by changing the following properties in the Properties window. (It may be necessary to press 4 to display the Properties window.)</p>
<p>
<b>Caption</b>: <code>Agent Control Form</code></p>
<p>
<b>Width</b>: <code>100</code></p>
<p>
<b>Height</b>: <code>85</code></p>
<p>
Place two CommandButtons on the form. Then change their <b>Caption</b> properties to <code>Start Agent</code> and <code>Stop Agent</code> so they appear as shown in FIGURE 2. </p>
<p>
<img src="sl_fig02.gif" border=0></p>
<p>
<b>FIGURE 2: Building the first demonstration in the Visual Basic IDE: Place two buttons on a UserForm.</b></p>
<p>
<b>Controls and references.</b> With every new project, it’s important to add references to the DLLs and OCXs that contain the procedures, methods, and other code you’re referencing. Select Tools | References to activate the References dialog box. Scroll down, and select Microsoft Agent Control 1.5.</p>
<p>
Next, make sure the Toolbox is active by clicking it, or by choosing it from the View | Toolbox menu. Activate the Additional Controls dialog box by selecting Tools | Additional Controls; find the line that reads Microsoft Agent Control 1.5, and click its checkbox. When finished, you’ll see the Agent icon in the lower portion of the Toolbox (see FIGURE 3).</p>
<p>
<img src="sl_fig03.gif" border=0></p>
<p>
<b>FIGURE 3: The Visual Basic IDE with the Toolbox displayed; the Agent icon has been added to the Toolbox.</b></p>
<p>
Next, we’ll code the portion of the subroutine that will make the Genie appear and disappear. Start by double-clicking the top button, labeled Start Agent. You’ll see that the Visual Basic IDE has already started the <b>CommandButton1_Click</b> subroutine. Scroll to the top, and enter the following statements:</p>
<pre><code>Const DATAPATH = _ 
  "C:\Program Files\Microsoft Agent\Characters\genie.acs"

Dim Genie As IAgentCtlCharacter
Dim SpeakString As String</code></pre>
<p>
The full code listing appears in FIGURE 4. These statements declare the necessary variables and constant. Microsoft suggests that you install the Agent character files (.ACS files) in the directory listed, but you can put them anywhere — as long as you enter the correct path for the DATAPATH constant value.</p>
<pre><code>Option Explicit

Const DATAPATH = _
  "C:\Program Files\Microsoft Agent\Characters\genie.acs"

Dim Genie As IAgentCtlCharacter

Private Sub UserForm_Activate()
  Agent1.Characters.Load "Genie", DATAPATH
  Set Genie = Agent1.Characters("Genie")
End Sub

Private Sub CommandButton1_Click()
  Genie.Show
  Genie.MoveTo 100, 100
  Genie.Speak "My name is Genie. Your wish is my command."
End Sub

Private Sub CommandButton2_Click()
  Genie.MoveTo 350, 250
  Genie.Hide
End Sub

Private Sub UserForm_Deactivate()
  Set Genie = Nothing
End Sub</code></pre>
<p>
<b>FIGURE 4: This code demonstrates basic Genie control.</b></p>
<p>
Create the code that will be executed when the UserForm is activated:</p>
<pre><code>Private Sub UserForm_Activate()</code></pre>
<p>
Now we tell the <b>Agent</b> object to load the Genie character into its <b>Characters</b> collection, so we can access it:</p>
<pre><code>Agent1.Characters.Load "Genie", DATAPATH</code></pre>
<p>
Next, the <b>Set</b> statement is used, to simplify subsequent code:</p>
<pre><code>Set Genie = Agent1.Characters("Genie")</code></pre>
<p>
It’s not required, but later statements would need to be more elaborate. For example, this statement would be required to show the Agent:</p>
<pre><code>Agent1.Characters("Genie").Show</code></pre>
<p>
Rather than the more straightforward:</p>
<pre><code>Genie.Show</code></pre>
<p>
The next line gives the <i>SpeakString</i> variable a value. In this case, we’re telling Microsoft Agent to introduce itself, then prepare for speech-recognition input. (We won’t code that portion in this example.)</p>
<pre><code>SpeakString = "My name is Genie. Your wish is my command."</code></pre>
<p>
Let’s complete the code by calling the Genie and having it speak the value of <i>SpeakString</i>. We’ll program the <b>CommandButton1_Click</b> subroutine to accomplish that task. <b>Show</b> is the command used to make the Genie visible to the user, and <b>Speak</b> triggers the Microsoft text-to-speech engine to speak the text it precedes:</p>
<pre><code>Private Sub CommandButton1_Click()
  Genie.Show
  Genie.Speak SpeakString
End Sub</code></pre>
<p>
The <b>CommandButton2_Click</b> subroutine will hide the Genie from the user:</p>
<pre><code>Private Sub CommandButton2_Click()
  Genie.Hide
End Sub</code></pre>
<p>
Finally, we must destroy the <b>Agent</b> object when we’re done with it, by using the following statement:</p>
<pre><code>Private Sub UserForm_Deactivate()
  Set Genie = Nothing
End Sub</code></pre>
<p>
You’re now ready to start the Agent. Test to see if your machine was set up correctly by hitting the Run button, or by pressing 5. This will activate the form. The Agent server will initialize when the form is loaded, and be destroyed when the user exits the form. When the Start Agent button is pressed, the Genie will appear and say, “My name is Genie. Your wish is my command.” (as shown in FIGURE 5). It will disappear when the Stop Agent button is pressed.</p>
<p>
<img src="sl_fig05.gif" border=0></p>
<p>
<b>FIGURE 5: The demonstration application at run time: the Genie appears.</b></p>
<p>
Because we’re operating the Agent from a modal dialog box, this implementation isn’t very practical, although it’s okay for demonstrations or development. Next, we’ll do something a lot more useful; we’ll incorporate an Agent into Word 97 and have Robby read to us.</p>
<h3>The Agent’s Second Mission: Read to Me</h3>
<p>
The goal is to place a button on the Word 97 toolbar, that when pressed, invokes an Agent who will read the active document aloud — a great way to get another perspective on your writing. </p>
<p>
Let’s start with the declarations, beginning with the character-path constant:</p>
<pre><code>Const ROBBYPATH = _
  "C:\Program Files\Microsoft Agent\Characters\robby.acs"</code></pre>
<p>
and the variables for the Agent and character:</p>
<pre><code>Dim MSAgent As Agent
Dim Char As Object
</code></pre>
<p>
As before, we then instantiate an <b>Agent</b> object using the <b>New</b> keyword:</p>
<pre><code>Set MSAgent = New Agent</code></pre>
<p>
After the <b>Agent</b> object is created, we must start the Agent ActiveX server. To accomplish this, we set the <b>Agent</b> object’s <b>Connected</b> property to <b>True</b>:</p>
<pre><code>MSAgent.Connected = True</code></pre>
<p>
Then we load the character and assign it to the <i>Object</i> variable:</p>
<pre><code>MSAgent.Characters.Load "Robby", ROBBYPATH
Set Char = MSAgent.Characters("Robby")</code></pre>
<p>
The preliminary work is done. Now it’s time for our Agent to make an appearance and do something.</p>
<h3>He Walks...</h3>
<p>
Controlling an Agent’s on-screen behavior is straightforward. Most action is accomplished using the <b>Character</b> object’s <b>Play</b> function. <b>Play</b> takes one parameter — a string consisting of an <i>Animation</i> string. For example, this statement will cause Robby to wave:</p>
<pre><code>Char.Play "Wave"</code></pre>
<p>
while this will cause him to appear to be moving to the right (Robby uses a jet pack to move):</p>
<pre><code>Char.Play "MoveRight"</code></pre>
<p>
FIGURE 6 lists a small subset of <i>Animation</i> strings for Robby, while FIGURES 7 through 11 illustrate a few. As you can see, there’s a lot Robby can do. The available <i>Animation</i> strings vary from character, so you’ll need to get the documentation for each character you want to work with. Robby, for example, has 94 <i>Animation</i> strings described in the <i>Microsoft Agent Animations for Robby Character</i> document.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=blue width=116><b>Animation</b></td>
<td class=blue width=306><b>Description</b></td>
</tr>
<tr valign=top>
<td width=116>Acknowledge</td>
<td width=306>Nods head</td>
</tr>
<tr valign=top>
<td width=116>Alert</td>
<td width=306>Straightens and raises eyebrows</td>
</tr>
<tr valign=top>
<td width=116>Announce</td>
<td width=306>Prints output and reads</td>
</tr>
<tr valign=top>
<td width=116>Blink</td>
<td width=306>Blinks eyes</td>
</tr>
<tr valign=top>
<td width=116>Declines</td>
<td width=306>Raises hands and shakes head</td>
</tr>
<tr valign=top>
<td width=116>DontRecognise</td>
<td width=306>Holds hand to ear</td>
</tr>
<tr valign=top>
<td width=116>GestureLeft</td>
<td width=306>Gestures to the left</td>
</tr>
<tr valign=top>
<td width=116>GestureRight</td>
<td width=306>Gestures to the right</td>
</tr>
<tr valign=top>
<td width=116>GetAttention</td>
<td width=306>Raises and shakes arms</td>
</tr>
<tr valign=top>
<td width=116>GlanceLeft</td>
<td width=306>Looks left briefly</td>
</tr>
<tr valign=top>
<td width=116>GlanceRight</td>
<td width=306>Looks right briefly</td>
</tr>
<tr valign=top>
<td width=116>Hear_1</td>
<td width=306>Turns head left</td>
</tr>
<tr valign=top>
<td width=116>Idle2_1</td>
<td width=306>Crosses arms</td>
</tr>
<tr valign=top>
<td width=116>Idle2_2</td>
<td width=306>Removes head and makes adjustment</td>
</tr>
<tr valign=top>
<td width=116>LookLeft</td>
<td width=306>Looks to the left</td>
</tr>
<tr valign=top>
<td width=116>MoveUp</td>
<td width=306>Flies up</td>
</tr>
<tr valign=top>
<td width=116>Processing</td>
<td width=306>Presses buttons in looping animation</td>
</tr>
<tr valign=top>
<td width=116>Reading</td>
<td width=306>Reads in looping animation</td>
</tr>
<tr valign=top>
<td width=116>Sad</td>
<td width=306>Makes sad expression</td>
</tr>
<tr valign=top>
<td width=116>Searching</td>
<td width=306>Looks through toolbox in looping animation</td>
</tr>
<tr valign=top>
<td width=116>Think</td>
<td width=306>Tilts head and scratches</td>
</tr>
<tr valign=top>
<td width=116>Wave</td>
<td width=306>Waves</td>
</tr>
<tr valign=top>
<td width=116>Write</td>
<td width=306>Takes out clipboard, writes and looks up</td>
</tr>
</table><br>
<p>
<b>FIGURE 6: Selected subset of <i>Animation</i> strings for Robby character. There are 94 in all.</b></p>
<p>
Using <b>Play</b>, however, Robby will remain in the same on-screen location. To actually move an Agent about the screen, you can use the <b>Character</b> object’s <b>MoveTo</b> procedure, which takes two arguments — the <i>x </i>and <i>y </i>screen coordinates. Here’s an example:</p>
<pre><code>Char.MoveTo 200, 300</code></pre>
<p>
If you want the character to move while on screen, use <b>MoveTo</b> after <b>Show</b> has been called; if you want the character to appear in a specific location when first invoked, use <b>MoveTo</b> to position the Agent before calling <b>Show</b>. Now that we know how to make the Agent gesture and move around, let’s make Robby speak. </p>
<p>
<img src="sl_fig07.gif" border=0></p>
<p>
<b>FIGURE 7: Animation “Wave”: Robby says hello. </b></p>
<p>
<img src="sl_fig08.gif" border=0></p>
<p>
<b>FIGURE 8: Animation “MoveRight”: Robby flies to the right. </b></p>
<p>
<img src="sl_fig09.gif" border=0></p>
<p>
<b>FIGURE 9: Animation “Idle2_2”: Robby makes an internal adjustment. </b></p>
<p>
<img src="sl_fig10.gif" border=0></p>
<p>
<b>FIGURE 10: Animation “Searching”: Robby rummages through his toolbox. </b></p>
<p>
<img src="sl_fig11.gif" border=0></p>
<p>
<b>FIGURE 11: Animation “Reading ”: Robby reads to us. </b></p>
<h3>He Talks... </h3>
<p>
Having Robby speak is equally straightforward; you simply use the <b>Character</b> object’s <b>Speak</b> function. <b>Speak</b> takes one parameter — the text to read. The text can take several forms, including a literal string, a text file, or a URL. In our case, we want the Agent to read a Word document, so we’ll use the following statement:</p>
<pre><code>Char.Speak ActiveDocument.Content
</code></pre>
<p>
If you do any Word 97 VBA programming, you’ll recognize that <b>ActiveDocument.Content </b>refers to the <b>Content</b> property of the <b>ActiveDocument</b> property; in other words, the body text of the currently-selected Word document. This statement will cause Robby to read the document aloud while displaying the associated text in a word balloon. Slick!</p>
<p>
The lone Speak statement will work, but we can do better. This sequence:</p>
<pre><code>Char.Play "Read"
Char.Speak ActiveDocument.Content
Char.Play "Readreturn"
</code></pre>
<p>
will cause Robby to print some output from his chest, tear the document free when it’s completed, and begin to read before actually speaking. The “ReadReturn” <i>Animation</i> will cause Robby to return to his neutral, resting position after reading. Many animations have associated “...Return” animations, so smooth transitions can be made between actions.</p>
<p>
Now, let’s put what we’ve learned together and script a short sequence of actions for Robby to perform. We’ll place them in a script so we can call it from Word 97, as shown in FIGURE 12.</p>
<pre><code>Option Explicit

Const ROBBYPATH =
  "C:\Program Files\Microsoft Agent\Characters\robby.acs"

Dim MSAgent As Agent
Dim Char As Object

Sub Speak()

  Set MSAgent = New Agent
  MSAgent.Connected = True
  MSAgent.Characters.Load "Robby", ROBBYPATH

  Set Char = MSAgent.Characters("Robby")
  With Char
    .Top = 125
    .Left = 185
    .Show
    .Play "Greet"
    .Play "GreetReturn"
    .MoveTo 600, 400
    .Play "Read"
    .Speak ActiveDocument.Content
    .Play "ReadReturn"
    .Play "Idle2_2"
    .Play "Wave"
    .Play "WaveReturn"
    .Hide
  End With

End Sub</code></pre>
<p>
<b>FIGURE 12: This VBA code has Robby appear at specific coordinates on the screen, wave hello, fly to the lower-right corner of the screen, read the active Word 97 document, make an adjustment, wave good-bye, and vanish. </b></p>
<p>
Next, we must do a little work in Word. </p>
<h3>He Crawls on His Belly Like a Reptile</h3>
<p>
To associate the new macro with a custom toolbar, select View | Toolbars | Customize to display the Customize dialog box. Click the New button. Name the new toolbar “Agent”, and make it available to Normal.dot. The toolbar is now ready to be used. In the Customize dialog box, click the Commands page and select Macros. The Normal.NewMacros.Speak macro should be available; drag it to the toolbar, then release it when the I-beam appears. Right-click the button, change its name to “Read”, and give it an icon if you like. </p>
<p>
Call the new macro from your menu by returning to the Customize dialog box and selecting the object again. This time, drag it to the Tools menu (but don’t let go). The menu will open and scroll to the bottom. When you see the I-beam in the position you want, release the button. You can change the properties of the menu item the same way you did before — by right-clicking.</p>
<h3>Conclusion</h3>
<p>
We’ve covered the basics of Microsoft Agent, and listed the software and hardware you need to exploit Agent’s potential. Then we went on to take advantage of Agent’s speech capability to implement a useful Word macro that literally reads a document aloud. </p>
<p>
It’s also important to remember that Agent is available as an ActiveX. This means it can be used to liven up a Web site. For an example, visit Argo Technologies’ Web site at http://www.argolink.com/agent/merlinscorner/druidxicon.html (see FIGURE 13). You can link to it and other Agent-enabled sites from Microsoft’s Agent page (see FIGURE 14) — a page you’ll become familiar with as you explore Microsoft Agents.</p>
<p>
<img src="sl_fig13.gif" border=0></p>
<p>
<b>FIGURE 13: You can see Microsoft Agent in action on the Web at the Argo Technologies site.</b></p>
<p>
<img src="sl_fig14.gif" border=0></p>
<p>
<b>FIGURE 14: Get to know this site; it’s loaded with valuable tools and information. </b></p>
<p>
This article has only scratched the surface. Microsoft Agent is a major piece of technology — the <i>Programming the Microsoft Agent Control</i> document alone is 75 pages! — so you’ll need to invest some time before becoming adept. The good news is that you’ll have lots of fun along the way. </p>
<p>
The file referenced in this article is available for download from the Informant Web site at http://www.informant.com/mod/modnewupl.htm. File name: MOD9801SL.ZIP.</p>
<p>
<i>Shannon M. Lake, Sr., CET, NCT, and MCP, is CEO of The OMNIFORCE Group, an international telecommunications and software-engineering consultancy focused on designing and reinforcing companies’ new or existing information, software, telecommunication, and/or data-communication systems. Shannon is currently developing a new operating system. He can be reached at </i>lake@omniforce.com<i>, </i>http://www.omniforce.com/lake<i>, or (800) 367-9946. </i></p>
</font></BODY>
</HTML>

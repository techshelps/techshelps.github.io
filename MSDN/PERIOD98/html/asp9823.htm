<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using ActiveX and Java Applets Together </title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<Font face="verdana,arial,helvetica" size="2">
<h1><a name="usingactivexjavaappletstogether"></a>Using ActiveX and Java Applets Together </h1>
<p class=indent>
by Susie Adams</p>
<p>
Applets, like ActiveX controls, often provide the ability to accept information from the document or the user at runtime. Applets provide this ability via an interface that allows the customization of applet behavior as it's browsed in a Web browser. You can accomplish this customization in two ways: first, input parameters and second, public methods and/or instance variables. </p>
<p>
In the past, ActiveX developers using Java applets had only input parameters available to them. Unlike ActiveX controls, there was no way to call a method within an applet class with ActiveX script. The introduction of Microsoft's ActiveX Runtime for Java has changed this situation. Thanks to Internet Explorer, the ActiveX Runtime for Java allows access to public Java class methods and variables just as if the applet was an ActiveX control. As a result, your script can manipulate Java applets developed with any tool, not just those developed with Visual J++.</p>
<p>
In this article, we'll demonstrate how to create an Active Server page that calls an already existing Microsoft Applet J++ applet. In the first example, we'll call the applet and then set its parameter. In the second example, we'll use ActiveX scripting to call two of its public methods.</p>
<h3>The PARM tag</h3>
<p>
To pass the information from an HTML or ASP page to a Java applet you must use the &lt;PARAM&gt; tag. You can place this tag between the HTML &lt;APPLET&gt; and &lt;/APPLET&gt; tags. The &lt;PARAM&gt; tag has two attributes, NAME and VALUE, which are used to pass data to a Java applet. Note that Documents can pass multiple parameters.</p>
<pre><code>&lt;APPLET CODE="displaytext.class" WIDTH=100 HEIGHT=100&gt;
&lt;PARAM&gt; NAME="initialvalue" VALUE="Hi Susie"&gt;
&lt;/APPLET&gt;</code></pre>
<p>
The Java applet then retrieves the parameters with the getParameter method: </p>
<pre><code>String x=getParameter("initialvalue");</code></pre>
<p>
In the example above, we declare a variable x of type String in the .java file to hold the initialvalue parameter retrieved from the Web document. The parameter name is specified as the argument passed to getParameter in the applet code.</p>
<p>
To demonstrate the use of parameters, we'll use a sample applet created by Microsoft called displaytext.class. This applet displays text in a Web page based on either an input parameter passed by the page or by input the user enters at runtime. To begin, let's create a base folder to hold the demo applications we'll build in this article. As you can see in Figure A, we named our folder D:\Cobbsart\JavaApplets\DisplayText. </p>
<p>
<b>Figure A</b></p>
<p>
<img src="asp9823a.gif" border=0></p>
<p>
<b>First, create a folder for your project.</b></p>
<p>
To get the .class for this applet, open Visual J++ and select the Info View tab. Next, select the Samples, then Microsoft Samples, and click Scripting: VBScript Driving A Java Applet, as shown in Figure B. Follow the directions to copy the code from the J++ CD to the directory you created on your hard drive.</p>
<p>
<b>Figure B</b></p>
<p>
<img src="asp9823b.gif" border=0></p>
<p>
<b>Follow the instructions to load the sample J++ files to your hard drive.</b></p>
<p>
You'll notice a number of files, including two HTML files. Feel free to look at them—but don't cheat. We're going to create the displaytext file as an ASP file later.</p>
<p>
Now that we have our sample applet, let's begin by creating a new Web Project named DisplayTextVID. First, select the New option from Visual InterDev's file menu. In the dialog that appears, select the project tabs Web Project option and name the new Web project DisplayTextVID. Store the project in a subdirectory named DisplayTextVID under the demo directory you created earlier. In the dialogs that appear, select your web server and create the new web.</p>
<p>
Next, create a new folder in the root of the Web named DisplayText and copy the displaytext.class file into it by right-clicking on the new folder and selecting the Add Files menu option. In the resulting dialog, navigate to the DisplayText directory and select the displaytext.class file. This class doesn't require the support of any additional files.</p>
<p>
To call the displaytext.class, first create a new ActiveServer page named display.asp by selecting the Visual InterDev file menu's New option. In the dialog that appears select the file tab's Active Server Page menu option. Then add the following code to the ASP page:</p>
<pre><code>&lt;applet
    code=displaytext.class
    codebase=DisplayText
    width=600
    height=120 &gt;
    &lt;param name=initialValue value="Hello World"&gt;
&lt;/applet&gt;</code></pre>
<p>
Notice the new PARAM tag. The value of this parameter is passed as the default text to display on the page. When you browse the display.asp page, you should see the text "Hello World" in the Web browser, as shown in <b>Figure C</b>. Open the page, change the parameter value, and browse the page again. The new parameter value should be displayed in the browser.</p>
<p>
<b>Figure C</b></p>
<p>
<img src="asp9823c.gif" border=0></p>
<p>
<b>On the browser page, you'll see "Hello World," from display.asp.</b></p>
<h3>Manipulating a Java applet with VBScript</h3>
<p>
If you're familiar with scripting, you've probably already embedded an ActiveX control into a Web page and then manipulated it using VBScript. The ActiveX runtime for Java offers the same functionality for Java applets, making Java applets scriptable too. When a Java applet is running in a browser, all the public methods and variables of the applet automatically become available to VBScript or any other language supporting the ActiveX scripting protocol. </p>
<p>
For example, consider the displaytext Java applet we used in the last example:</p>
<pre><code>public class displaytext extends Applet
{
   // The value of the text to be displayed //by the applet.
   String m_phrase;

   public void setText(String string)
   { 
      //Set the text to the string. 
   }
   public void resetText()
   { 
      //reset the text to the original //value. 
   }   
}</code></pre>
<p>
&nbsp;&nbsp;</p>
<p>
In our previous example, we included the applet in the ASP page by using the APPLET tag. To refer to the applet from the ActiveX scripting language you must add the ID attribute to the APPLET tag. This allows you to refer to public classes in an applet as you would refer to methods of an ActiveX control.</p>
<pre><code>&lt;applet&gt;
    code=displaytext.class
   codebase=DisplayText
    id=TextDisplay
    width=600
    height=120 &gt;
    &lt;param name=initialValue value="Hello World"&gt;
&lt;/applet&gt;</code></pre>
<p>
&nbsp;&nbsp;</p>
<p>
Next, let's add a few user interface items. We'll start with an input field to enter the intialvalue text and two buttons—one to set the text to the input value and one to reset the text to the parameter value originally passed by the parm tag:</p>
<pre><code>&lt;input name=Phrase value="Some new text"&gt;
&lt;input type=button name=Set value="Set Display Text"&gt;
&lt;input type=button name=Reset value="Reset to Initial Values"&gt;</code></pre>
<p>
&nbsp;&nbsp;</p>
<p>
In the scripting portion of your ASP page, define OnClick handlers for each button, allowing them to manipulate the applet:</p>
<pre><code>&lt;script language=VBScript&gt;
&lt;!--

' Handle the click event for the Set button
sub Set_OnClick
   ' Call the applet setText method, 
   ' with the value in the Phrase &lt;input&gt; box
   document.TextDisplay.setText Phrase.value
end sub

' Handle the click event for the Reset button
sub Reset_OnClick
   ' Call the applet resetText method
   document.TextDisplay.resetText
end sub

--&gt;
&lt;/script&gt;</code></pre>
<p>
&nbsp;&nbsp;</p>
<p>
Whenever a user clicks a button or enters text in the input field, the appropriate VB Script handler is fired, which then allows the handler to manipulate the Java applet. Note: When you reference the applet from VBScript, you must always reference it by document.name. The complete code for display.asp is shown in Listing A.</p>
<p>
<b>Listing A:</b></p>
<p>
<b>The Display.ASP file modified to accept user input from an Input Field</b></p>
<pre><code>&lt;%@ LANGUAGE="VBSCRIPT" %&gt;

&lt;HTML&gt;
&lt;HEAD&gt;
&lt;META NAME="GENERATOR" Content="Microsoft Visual InterDev 1.0"&gt;
&lt;META HTTP-EQUIV="Content-Type" content="text/html; charset=iso-8859-1"&gt;
&lt;TITLE&gt;Document Title&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;

&lt;!-- Insert HTML here --&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Display Text&lt;/title&gt;
&lt;/head&gt;

&lt;script language=VBScript&gt;
&lt;!--

' Handle the click event for the Set button
sub Set_OnClick
   ' Call the applet setText method, 
   ' with the value in the Phrase &lt;input&gt; box
   document.TextDisplay.setText Phrase.value
end sub

' Handle the click event for the Reset button
sub Reset_OnClick
   ' Call the applet resetText method
   document.TextDisplay.resetText
end sub

--&gt;
&lt;/script&gt;

&lt;body&gt;

&lt;applet
    code=displaytext.class
   codebase=DisplayText
    id=TextDisplay
    width=600
    height=120 &gt;
    &lt;param name=initialValue value="Hello World"&gt;
&lt;/applet&gt;
&lt;p&gt;

&lt;input name=Phrase value="Some new text"&gt;
&lt;input type=button name=Set value="Set Display Text"&gt;
&lt;input type=button name=Reset value="Reset to Initial Values"&gt;

&lt;hr&gt;

&lt;/body&gt;
&lt;/html&gt;

&lt;/BODY&gt;
&lt;/HTML&gt;</code></pre>
<p>
To view the display.asp page, right-click on the page and select the Browse With menu option. You should now see the page, as displayed in Figure D.</p>
<p>
<b>Figure D</b></p>
<p>
<img src="asp9823d.gif" border=0></p>
<p>
<b>The finished display.asp file allows the user to update the text of the message.</b></p>
<p class=indent>
Note: Only the Applet-derived class is directly accessible from scripting. If your Java applet includes other classes that you want to access, you must first define public methods in your Applet-derived class that call each of those classes.</p>
<h3>Conclusion</h3>
<p>
As we've demonstrated, the addition of the ActiveX Runtime for Java takes a huge step towards making ActiveX and Java applets playground friends in the Web environment. We saw how Java applets could be driven just like ActiveX controls and how ActiveX script could read and write the public variables of the applet, as well as call its public methods. </p>
<p>
You can even implement code that facilitates communication between Java applets and ActiveX controls using event handlers to connect them. Remember, we've only touched the surface of dealing with most Web developers' needs. To accommodate some of these needs, more sophisticated ways of allowing Applets and ActiveX to communicate have been developed. However, all of these methods require a working knowledge of how to use a COM object from Java. </p>
<p>
Hopefully, we've just experienced the first wave of a flood of Java applet and ActiveX inter-operability tools that will be available in the near future to cover the gap between the two Web worlds. For now, anyway, these new tools are definitely a step in the right direction!</p>
<p>
-----------------------------</p>
<p>
<b>Susie Adams</b> is a senior consultant with Financial Dynamics, a client/server and Internet solutions consulting firm in McLean, Virginia. She has worked in the application development area for more than 11 years and currently focuses on the design and development of active content Web applications.</p>
<p>
-----------------------------</p>
<p>
This article is reproduced from the February 1998 issue of <i>Active Server Developer's Journal</i>. <i>Active Server Developer's Journal</i> is an independently produced publication of The Cobb Group. No part of this article may be used or reproduced in any fashion (except in brief quotations used in critical articles and reviews) without prior consent of The Cobb Group. To contact The Cobb Group, please call (800) 223-8720 or (502) 493-3200.</p>
<p>
Copyright © 1998 The Cobb Group, a division of Ziff-Davis Inc. The Cobb Group and The Cobb Group logo are trademarks of Ziff-Davis Inc. All rights reserved. Reproduction in whole or in part in any form or medium without express written permission of Ziff-Davis is prohibited. </p>
</font></BODY>
</HTML>

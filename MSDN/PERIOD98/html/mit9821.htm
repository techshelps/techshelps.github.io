<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating an Expanding Menu</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<Font face="verdana,arial,helvetica" size="2">
<h1><a name="creatingexpandingmenu"></a>Creating an Expanding Menu</h1>
<p class=indent>
By Jeremy Broyles</p>
<p>
Dynamic HTML is great for creating an interactive Web environment. The ability to change styles on the fly with DHTML is an important addition to the Web developer's bag of tricks. In this article, we'll show you how to use Dynamic HTML to create a menu that expands to reveal its submenus in response to a mouse click. We'll outline the technique by walking you through the code step by step. When you put it all together, you'll have a functioning expandable menu that you can customize to meet your needs.</p>
<h3>Working with style</h3>
<p>
The first step in creating our menu is to define the style of the menu items. We accomplish this by using the &lt;STYLE&gt; tag according to the Cascading Style Sheets (CSS) specification. As you can see in the following code, we define styles for DIV.Menu1, DIV.Menu2, and A (the anchor tag):</p>
<pre><code>&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Web Builder Expanding Menu&lt;/TITLE&gt;

&lt;STYLE TYPE="text/css"&gt;
&lt;!--
DIV.Menu1 {font-size: 10pt;
        font-family: "Arial";
        font-weight: bold;
        line-height: 20pt;
        margin-left: 5pt;
        color: gray;
        background-color: black;
        cursor: hand;}
DIV.Menu2 {font-size: 9pt;
        font-family: "Arial";
        line-height: 15pt;
        margin-left: 10pt;
        color: white;}
A    {font-size: 9pt;
        font-family: "Arial";
        text-decoration: none}
--&gt;
&lt;/STYLE&gt;</code></pre>
<p>
Be sure to include the style information within the &lt;HEAD&gt; tags of your document. The .Menu1 and .Menu2 variations of the DIV reference are classes. We'll talk more about them later. For the A tag, we set the text-decoration style to none. This causes anchor text to be displayed without the underline.</p>
<h3>A JavaScript toggle switch</h3>
<p>
To make our menu expand, we're going to use the display style property, which is specific to DHTML and works only with Microsoft's Internet Explorer 4.0. If you can't guarantee that people will view your site only with IE4, it's best to handle the situation gracefully, when possible. Therefore, in order to keep other browsers (including previous versions of IE) from choking on the unrecognized style, we'll use JavaScript to identify the browser and handle the situation appropriately.</p>
<p>
The display style property has two possible values: <i>“none”</i> and <i>“”</i>. When set to none, the object that the style is applied to is hidden. Otherwise, it's displayed normally. We can make text appear and disappear on the fly by changing the value in response to an event—in this case, a mouse click. Below, we've listed JavaScript that determines if the browser is IE4 and toggles the display property.</p>
<pre><code>&lt;SCRIPT LANGUAGE="JavaScript"&gt;
&lt;!--
ie4 = ((navigator.appName == "Microsoft Internet Explorer") &amp;&amp; (parseInt(navigator.appVersion) &gt;= 4 ));

function toggle( myId ){
   if (ie4){
      thisId=document.all(myId);
      if (thisId.style.display == 
      "none"){
         thisId.style.display = 
         "";} 
      else {
         thisId.style.display = 
         "none";
      }
   }
}
//--&gt;
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;</code></pre>
<p>
Note that we pass the myId parameter into the toggle() function. This parameter is the ID that we'll assign to each object that we want to show or hide. If the browser is IE4, the function checks the current value of the display style and switches it to the other value. If the browser isn't IE4, it bypasses the rest of the function without crashing.</p>
<h3>Arranging tables</h3>
<p>
For formatting purposes, we're going to create our menu inside a table—actually a table centered within a table. In order to create a solid border around our menu, we'll use an outer table with the width set to 140 pixels and cellpadding set to 2. Then within that table we'll center another table to contain the menu items. Following is the code to create both tables:</p>
<pre><code>&lt;body bgcolor="white"&gt;

&lt;!-- Page heading --&gt;
&lt;h1&gt;Web Builder Expanding Menu&lt;/h1&gt;

&lt;!-- Table to provide background color and border --&gt;
&lt;table border="0" cellpadding="2" cellspacing="0" width="140" bgcolor="black"&gt;
&lt;tr&gt;&lt;td&gt;

   &lt;!-- Table to contain our menu 
   --&gt;
   &lt;div align="center"&gt;
   &lt;table border="0"
   cellpadding="0"
   cellspacing="0" WIDTH="100%" 
   bgcolor="black"&gt;
   &lt;tr&gt;
</code></pre>
<h3>Menus with class</h3>
<p>
Now, the moment you've been waiting for—we're going to add our first menu item. Remember when we created the styles at the beginning of the article, and we briefly mentioned classes? Well, this is where classes should begin to click. </p>
<p>
We're going to enclose each menu item in its own &lt;DIV&gt; tag. The &lt;DIV&gt; tag simply stands for division and provides a convenient way to divide your document into pieces that you can format individually. Since we want to maintain a consistent style for each level of menu item, we created DIV style classes called <i>Menu1</i> and <i>Menu2</i>. To apply the styles from these classes to the contents of a division, simply use the class= statement within the &lt;DIV&gt; tag, as shown below.</p>
<pre><code>&nbsp;&nbsp;&nbsp;&lt;!-- First main menu item --&gt;
   &lt;td&gt;&lt;DIV class="Menu1" 
   onclick="toggle('wbmenu')"&gt;Web 
   Builder&lt;/DIV&gt;</code></pre>
<p>
By using the class=”Menu1” statement, we tell the browser to apply the formatting that we listed in the style section under DIV.Menu1. Since this is a top-level menu item, and we didn't set the display property to none, it will always be displayed. As you can see, we've also added an onclick event that calls the toggle function when the user clicks the first menu item, Web Builder. Notice that we passed ”wbmenu” as the function's myId parameter, which we'll discuss next.</p>
<h3>Drilling down</h3>
<p>
Now it's time to add our level two menu items that fall under the Web Builder menu heading. Once again, these menu items are contained within their own &lt;DIV&gt; tag. This time, however, we apply the formatting from the Menu2 class, as shown below: </p>
<pre><code>&nbsp;&nbsp;&nbsp;&lt;!-- submenu items 1 --&gt;
   &lt;div id="wbmenu" class="Menu2" 
   style="display: 'none';"&gt;
   &lt;a style="color: white;"
   href="dhtml.asp"&gt;Dynamic 
   HTML&lt;/a&gt;&lt;br&gt;
   &lt;a style="color: white;"
   href="scrplts.asp"&gt;Scriptlets
   &lt;/a&gt;&lt;br&gt;
   &lt;a style="color: white;" 
   href="ie4.asp"&gt;Internet 
   Explorer&lt;/a&gt;&lt;br&gt;
   &lt;/div&gt;
   &lt;/td&gt;
   &lt;/tr&gt;
</code></pre>
<p>
In order to hide the submenu items when the page loads, we set the display style to none. We also included an id property with the value of “wbmenu” within the &lt;DIV&gt; tag. Therefore, when the Web Builder menu item passes “wbmenu” to the toggle function, the toggle function displays (or hides) the contents of the wbmenu DIV.</p>
<p>
Each submenu item within the wbmenu DIV is a link; therefore, we enclosed them within anchor tags. In addition to the href property, we used the color style property to make the anchor text white, since the table backgrounds are black. To complete the first section of our menu, we closed our table cell and row tags, as well.</p>
<h3>An aesthetic touch</h3>
<p>
To make our menu more defined, we want to separate the main menu items. To do this easily when using tables, you can create a separator cell with a contrasting background color. Place a one pixel by one pixel transparent image within the cell to create the effect of a one pixel colored line that spans the width of your menu. The code to accomplish this is listed below:</p>
<pre><code>&nbsp;&nbsp;&nbsp;&lt;!-- separator cell --&gt;
   &lt;&lt;tr&gt;&lt;td bgcolor="blue"&gt; &lt;img 
   src="images/clear.gif"
   height="1" width="1"&gt; 
   &lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
</code></pre>
<h3>Adding more menu items</h3>
<p>
Finally, create the rest of your menu following the steps for creating main and submenu items. When you're finished, the rest of your document should look like this: </p>
<pre><code>&nbsp;&nbsp;&nbsp;&lt;!-- Second main menu item --&gt;
   &lt;td&gt;&lt;DIV class="Menu1" 
   onclick="toggle('aspmenu')"&gt; 
   Active Server&lt;/DIV&gt;

   &lt;!-- submenu items 2 --&gt;
   &lt;div id="aspmenu"
   class="Menu2" style="display: 
   'none';"&gt;
   &lt;a style="color: white;" 
   href="vid.asp"&gt;Visual 
   InterDev&lt;/a&gt;&lt;br&gt;
   &lt;a style="color: white;" 
   href="iis4.asp"&gt;IIS 
   4.0&lt;/a&gt;&lt;br&gt;
   &lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;

   &lt;!-- separator cell --&gt;
   &lt;tr&gt;&lt;td bgcolor="blue"&gt;&lt;img 
   src="images/clear.gif" 
   height="1" width="1"&gt; 
   &lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;

   &lt;!-- Third main menu item --&gt;
   &lt;td&gt;&lt;DIV class="Menu1" 
   onclick="toggle('fpmenu')"&gt;
   FrontPage&lt;/DIV&gt;

   &lt;!-- submenu items 3 --&gt;
   &lt;div id="fpmenu" class="Menu2" 
   style="display: 'none';"&gt;
   &lt;a style="color: white;" 
   href="temp.asp"&gt;Templates&lt;/a&gt; 
   &lt;br&gt;
   &lt;a style="color: white;" 
   href="form.asp"&gt;Easy 
   Formatting&lt;/a&gt;&lt;br&gt;
   &lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;/table&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
 
As your menu expands, text or graphics below will make room.

&lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>
When you load the menu in IE4, you'll see the compressed version of the menu, as shown in Figure A. However, as you click each main menu topic, the submenus will expand into view, as you can see in Figure B. This technique is fairly browser-friendly, too. If you view the menu in a browser other than IE4, you'll simply see the entire expanded menu.</p>
<p>
<b>Figure A</b></p>
<p>
<img src="mit9821a.gif" border=0></p>
<p>
<b>When the menu loads in IE4, it only displays the main menu items.</b></p>
<p>
<b>Figure B</b></p>
<p>
<img src="mit9821b.gif" border=0></p>
<p>
<b>When the user clicks a main menu item, the menu expands to reveal its submenu.</b></p>
<h3>Conclusion</h3>
<p>
Dynamic HTML provides Web authors with the tools to make truly interactive sites. Using these tools, we've shown you how to create a dynamic expanding menu.</p>
<p>
_______________</p>
<p>
<b>Jeremy Broyles</b> is Editor-in-Chief of Microsoft Web Builder.</p>
<p>
_________________</p>
<p>
This article is reproduced from the February 1998 issue of <i>Microsoft Web Builder</i>. <i>Microsoft Web Builder</i> is an independently produced publication of The Cobb Group. No part of this article may be used or reproduced in any fashion (except in brief quotations used in critical articles and reviews) without prior consent of The Cobb Group. To contact The Cobb Group, please call (800) 223-8720 or (502) 493-3200.</p>
<p>
Copyright © 1998 The Cobb Group, a division of Ziff-Davis Inc. The Cobb Group and The Cobb Group logo are trademarks of Ziff-Davis Inc. All rights reserved. Reproduction in whole or in part in any form or medium without express written permission of Ziff-Davis is prohibited. </p>
</font></BODY>
</HTML>

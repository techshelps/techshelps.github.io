<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a Self-Extracting Setup Executable File</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="vehowcreatingsetupexedistributionunit"></a>Creating a Self-Extracting Setup Executable File</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vehowCreatingSetupexeDistributionUnit_C">
</object></p>
<p>
There are two ways to create a distribution unit like a self-extracting setup executable file. You can create an in-place distribution unit as a part of a language-based project, like Visual J++, or you can create a packaging project.</p>
<p>
Building the project before packaging is recommended if you are going to select specific .class files to install. If necessary, it also starts the browser and loads an HTML page included in the project.</p>
<p class=label>
<b>To create a self-extracting setup executable file as a standalone packaging project</b>
<ol>
<li>
On the <b>File</b> menu, click <b>New Project</b>.<br><br></li>
<li>
Expand the <b>Visual Studio</b> node. Click <b>Distribution Units</b>.<br><br></li>
<li>
Click <b>Self-Extracting Setup</b>.<br><br></li>
<li>
Make any adjustments to the name and location, if needed. Select <b>Close current solution</b> or <b>Add to current solution</b>, as needed.<br><br></li>
<li>
Click <b>Open</b>.</li>
</ol>
<p class=label>
<b>To create an in-place setup package</b>
<ol>
<li>
In the <b>Project Explorer</b>, select the project, then right-click <b>Project Settings</b>.<br><br></li>
<li>
In the <b>Project Settings</b> dialog box, click <b>Output Format</b>. Click <b>Enable Packaging</b>, and then from the<b> Packaging Type</b> drop-down control, select <b>Self-Extracting Setup (.EXE)</b>.<br><br></li>
<li>
Click <b>Advanced</b>.<br><br></li>
<li>
In the <b>Advanced Settings </b>dialog box, you can do any of the following, as needed:<ul type=disc>
<li>
Specify the title of the application your setup distribution unit will install on the client machine. This title will appear in the user's <b>Add/Remove Programs</b> dialog box, available from the <b>Windows Control Panel</b>.<br><br></li>
<li>
Set the default installation directory, either as an absolute directory path name or as a path name relative to the <b>Program Files</b> directory.<br><br></li>
<li>
Specify that your setup distribution unit should create a <b>Start</b> menu item from which the user can run your application.</li>
</ul>
</li>
<li>
Click <b>Build</b> to build the project. When this is completed, confirm that your setup distribution unit was built in the correct location.<br><br></li>
<li>
Test the packaged setup file by running it.<p class=tl>
When testing, confirm that your distribution unit installs all of the files you included in it, such as Java .class files, HTML pages, readme files, .gif files, or others.</P><p class=tl>
Check also to see that your setup distribution unit added your application's name to the <b>Add/Remove Programs</b> dialog box, available from the <b>Windows Control Panel</b>. Once you have finished confirming the success of your installation, you should also launch the uninstaller from the <b>Add/Remove Programs</b> dialog box to check that it correctly removes your application.</P></li>
</ol>
<p>
You should now have a self-extracting setup distribution unit containing the files you specified, and an uninstaller.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Understanding Cabinet Files and .osd Files</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="veovrcreatingcustompackages"></a>Cabinet Packaging</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veovrCreatingCustomPackages_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veovrCreatingCustomPackages_T">
</object></p>
<p>
The cabinet file is an efficient way to package components on Web pages. You can use cabinet files to deploy Java classes for use through Internet Explorer 3.0 and 4.0. Cabinet files also support installation of Java classes in the Java Package Manager when used with Internet Explorer 4.0.</p>
<p>
When packaging with cabinet files, you should understand:
<ul type=disc>
<li>
Internet Explorer code download and the Java Package Manager.<br><br></li>
<li>
Cabinet files and Internet Browsers.<br><br></li>
<li>
Setting Java permissions and security levels for cabinet files.<br><br></li>
<li>
What happens when deploying a cabinet file.<br><br></li>
<li>
Cabinet file compression.</li>
</ul>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information on digital signing, see <a href="vecondistributionunitsigningsecurity.htm">Distribution Unit Signing and Security</a>.</p>
<h2>Internet Explorer Code Download and the Java Package Manager</h2>
<p>
The Java language supports the concept of Java packages to manage the namespace of classes, but does not provide for installing or managing packages. The Microsoft<sup>®</sup> Win32<sup>®</sup> Virtual Machine for Java (Microsoft VM) provides package management services with the Java Package Manager (JPM). Microsoft Internet Explorer 4.0 uses the Java Package Manager to provide code download services for Java applets. You can exploit these code download services by using the Microsoft development environment to package your Java classes into a cabinet file.</p>
<p>
In order to use Internet Explorer 4.0 and Java Package Manager code download services, all the Java classes in the cabinet file must be in a Java Package. A Java Package is a collection of classes that share a common namespace. For instance, if a class named "test.java" contains the line "package com.ms.fx", the full name of the compiled class would be "com.ms.fx.test". For further information about how to create Java packages, see the Visual J++ documentation.</p>
<h2>Cabinet Files and Internet Browsers</h2>
<p>
Cabinet files can contain an inventory file called an .osd file. The Microsoft development environment automatically creates the .osd file. This file contains a list of all the Java packages and applications in the cabinet file. The .osd file instructs Internet Explorer 4.0 to install the contents of the cabinet in the Java Package Manager. The .osd file also contains a friendly name that is displayed in the Windows Downloaded Program Files folder when the cabinet file is installed.</p>
<h2>Setting Java Permissions and Security Levels for Cabinet Files</h2>
<p>
Cabinet files can carry additional security information in the digital signature to specify Java permissions. When signing cabinet files that contain Java components, you can specify the permissions that the Java component requires, allowing the components to access more features of the local system. This brings applets equal to the capabilities of Microsoft<sup>®</sup> ActiveX<sup>®</sup> controls without sacrificing the security in the Java implementation.</p>
<p>
Signing a cabinet file with Java permissions gives developers more detailed control over the security restrictions placed on their Java component. Java permissions are optional.</p>
<p>
Setting Java permissions also cuts down on the number of dialog boxes presented to your user. Java classes may automatically receive some permissions when Microsoft Internet Explorer zones are used.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you are using only ActiveX controls in your cabinet file, do not use the Java permissions for signing security levels.</p>
<p>
Cabinet files may contain both Microsoft ActiveX Controls and Java code. Because ActiveX controls must be fully trusted to run, they are treated differently from Java code. For ActiveX controls to run when they are in a cabinet file that uses Java permission signing, you must specify that the cabinet file may contain ActiveX controls in the signature. Then, when you include ActiveX controls in the cabinet file, they will either be denied, allowed to run, or query the user, depending on the security settings of the zone.</p>
<h3>Permission Levels</h3>
<p>
With the Microsoft development environment, you can easily sign a cabinet file at four possible security levels: high, medium, low, and custom.</p>
<p>
<i>High security</i> level means lots of restriction for your Java applet or application. This level ensures that the Java code contained in the cabinet file will only run in the Java "sandbox" (a protected space that prevents the applet from accessing files and selected system services). Signing a cabinet file with the high security setting ensures that the Java code will never be able to do more than it would in the sandbox, regardless of where the code came from or what the user allows it to do. Because the Java code is so restricted, the applet or application will be allowed to run without any intervention from your user.</p>
<p>
<i>Medium security</i> level means high security with some exceptions for your Java applet or application. Applets signed with the medium security level request user-directed I/O, store data (up to 1MB) in the user's computer scratch space (storage on the client machine that an applet can safely access without needing full access to the client file system), and call user-directed file I/O routines, to ensure that all file operations are done with your user's intervention. A cabinet file signed with medium security will run without intervention in Low and Medium security zones. Zones are areas of control as defined by Microsoft Internet Explorer.</p>
<p>
<i>Low security</i> level means there are no restrictions on the Java code in the cabinet. Only a zone set at Low security can grant this much access without first asking the user. High and medium security prompt the user before running the applet.</p>
<p>
With the <i>custom</i> level, you can set the specific, individual permissions that the Java classes need.</p>
<p>
You can reach these settings in the development environment by right-clicking on your cabinet packaging project and pointing to Properties. These options are listed in the Java Permission tab of the Cabinet Properties dialog box.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information, see "Trust-Based Security for Java" in the Microsoft SDK for Java.</p>
<h2>What Happens When Deploying a Cabinet File</h2>
<p>
When Java classes are packaged into cabinet files and .zip files, the HTML tags that reference the classes in the cabinet files and .zip files must also reference the deployed cabinet files and .zip files. The Microsoft development environment deployment feature performs all required modifications to the HTML to ensure that all &lt;APPLET&gt; and &lt;OBJECT&gt; tag references to Java classes deployed in cabinet files and .zip files are properly maintained.</p>
<h2>Cabinet File Compression</h2>
<p>
As components on Web pages become larger and more complex, it is increasingly important to find a fast and effective way to download the required classes. By default, Java classes are downloaded one .class file at a time and in uncompressed format. In this case, not only is additional time needed to negotiate the transfer of each file, but extra bytes may be transferred because of the lack of compression. For feature and class-rich Java authored components, this download time can be excessive.</p>
<p>
A cabinet file can serve as a single, compressed repository for all .class files and all audio and image data required by the Java applet. Only the cabinet file is downloaded, so the time of download is whatever it takes to negotiate the transfer and download the compressed bytes. Once downloaded, the system extracts and installs the contents of the cabinet file.</p>
</BODY>
</HTML>

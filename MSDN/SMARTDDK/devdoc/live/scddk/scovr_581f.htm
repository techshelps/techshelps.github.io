<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Smart Card Callback Parameters</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_ntovr_smart_card_callback_parameters"></a>Smart Card Callback Parameters</h3>
<p>
Before the library calls a member function, it sets up the following members in the <a href="scstruct_50a6.htm"><b>SMARTCARD_EXTENSION</b></a> structure for every control request, except IOCTL_SMARTCARD_IS_ABSENT and IOCTL_SMARTCARD_IS_PRESENT.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>Members</th>
<th align=left width=52%>Description</th>
</tr>
<tr valign=top>
<td width=48%><b>IoRequest.RequestBuffer</b></td>
<td width=52%>Points to the user buffer that contains the user data to be sent to the card.</td>
</tr>
<tr valign=top>
<td width=48%><b>IoRequest.RequestBufferLength</b></td>
<td width=52%>The length of the user buffer.</td>
</tr>
<tr valign=top>
<td width=48%><b>IoRequest.ReplyBuffer</b></td>
<td width=52%>Points to the buffer that receives the data returned by the smart card.</td>
</tr>
<tr valign=top>
<td width=48%><b>IoRequest.ReplyBufferLength</b></td>
<td width=52%>The size of the reply buffer.</td>
</tr>
<tr valign=top>
<td width=48%><b>IoRequest.Information</b></td>
<td width=52%>Points to a ULONG that receives the number of bytes actually received from the card.</td>
</tr>
<tr valign=top>
<td width=48%><b>MajorIoControlCode</b></td>
<td width=52%>Contains the major I/O control code of this call.</td>
</tr>
<tr valign=top>
<td width=48%><b>MinorIoControlCode</b></td>
<td width=52%>Contains the minor I/O control code of this call (if any).</td>
</tr>
</table><br>
<p>
<b>WDM Note</b>  In addition, the structure <i>SmartcardExtension-&gt;OsData</i> will be set up as follows:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=29%>Member</th>
<th align=left width=71%>Description</th>
</tr>
<tr valign=top>
<td width=29%><b>CurrentIrp</b></td>
<td width=71%>Receives a pointer to the requesting IRP for every control request, except IOCTL_SMARTCARD_IS_ABSENT and IOCTL_SMARTCARD_IS_PRESENT.</td>
</tr>
<tr valign=top>
<td width=29%><b>NotificationIrp</b></td>
<td width=71%>Receives a pointer to the requesting IRP for the control request IOCTL_SMARTCARD_IS_ABSENT or IOCTL_SMARTCARD_IS_PRESENT.</td>
</tr>
</table><br>
<p>
The following table lists the callback function available from both libraries. Some functions are mandatory and others are optional. The driver needs to set up only mandatory functions. Every function that has not been set up will return STATUS_NOT_SUPPORTED to the smart card resource manager.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>Callback Function</th>
<th align=left width=52%>Description</th>
</tr>
<tr valign=top>
<td width=48%><a href="scclback_2knz.htm"><b>RDF_CARD_POWER</b></a></td>
<td width=52%>Resets or powers down an inserted smart card.</td>
</tr>
<tr valign=top>
<td width=48%><a href="scclback_1w0v.htm"><b>RDF_CARD_EJECT</b></a></td>
<td width=52%>Ejects an inserted smart card.</td>
</tr>
<tr valign=top>
<td width=48%><a href="scclback_75en.htm"><b>RDF_CARD_TRACKING</b></a></td>
<td width=52%>Installs an event handler to track card insertions and removals.</td>
</tr>
<tr valign=top>
<td width=48%><a href="scclback_4rj3.htm"><b>RDF_IOCTL_VENDOR</b></a></td>
<td width=52%>Performs vendor-specific IOCTL operations.</td>
</tr>
<tr valign=top>
<td width=48%><a href="scclback_8di7.htm"><b>RDF_READER_SWALLOW</b></a></td>
<td width=52%>Does a mechanical swallow.</td>
</tr>
<tr valign=top>
<td width=48%><a href="scclback_29b3.htm"><b>RDF_SET_PROTOCOL</b></a></td>
<td width=52%>Selects a transmission protocol for the currently inserted card.</td>
</tr>
<tr valign=top>
<td width=48%><a href="scclback_3rbz.htm"><b>RDF_TRANSMIT</b></a></td>
<td width=52%>Performs data transmissions.</td>
</tr>
</table><br>
<p>
When calling these functions, the driver should retrieve calling parameters from the members described under Input Values. It should store data to the members described under Output Values in each reference page.</p>
<p>
<b>VxD Note</b>  If your driver returns STATUS_PENDING to any of the callbacks except RDF_CARD_TRACKING, the smart card library will refuse any further call to the driver and will return STATUS_DEVICE_BUSY. Call <a href="scfunc_7ja7.htm"><b>SmartcardCompleteRequest</b></a> to finish a call that returned STATUS_PENDING. This function informs the caller of the completion and unlocks memory that had been locked by the smart card driver library. It also enables further requests to your driver.</p>
<p>
If you do not call <b>SmartcardCompleteRequest</b>, the library will block any further call to your driver.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IOCTL_SMARTCARD_TRANSMIT</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_ntioctls_ioctl_smartcard_transmit"></a>IOCTL_SMARTCARD_TRANSMIT</h1>
<h2>WDM driver version:</h2>
<p>
The <b>IOCTL_SMARTCARD_TRANSMIT DeviceIoControl</b> operation transmits data to and receives data from the currently inserted smart card.</p>
<h4>Input</h4>
<dl>
<dt>
<i>Irp-&gt;AssociatedIrp.SystemBuffer </i></dt>
<dd>
Points to an <b>SCARD_IO_REQUEST</b> structure followed by the data to be transmitted. An <b>SCARD_IO_REQUEST</b> structure has the following definition:
<pre><code>typedef struct _SCARD_IO_REQUEST{
    DWORD dwProtocol;   // Protocol identifier
    DWORD cbPciLength;  // Protocol Control Information Length
} SCARD_IO_REQUEST, *PSCARD_IO_REQUEST, *LPSCARD_IO_REQUEST;
 </code></pre>
</dd>
<dt>
<i>Irp-&gt;AssociatedIrp.SystemBuffer</i></dt>
<dd>
Contains the data to be transmitted to the currently inserted smart card.</dd>
<dt>
<i>Parameters.DeviceIoControl.InputBufferLength  </i></dt>
<dd>
Contains the size of the structure plus the length of trailing data bytes (if any). The member <b>dwProtocol</b> must be set to the previously selected protocol, and <b>cbPciLength</b> must be set to the size of the <b>SCARD_IO_REQUEST</b> structure itself (usually eight). The structure will be used for future protocols. Any data that is to be transmitted to the card must immediately follow this structure.</dd>
<dt>
<i>Parameters.DeviceIoControl.OutputBufferLength</i></dt>
<dd>
Contains the length of the output buffer.
</dd>
</dl>
<h4>Output</h4>
<dl>
<dt>
<i>Irp-&gt;AssociatedIrp.SystemBuffer </i></dt>
<dd>
Receives the result of the transmission. This buffer must also begin with an <b>SCARD_IO_REQUEST</b> structure. Any data that was received from the card must be stored immediately after the structure.
<p>
Since the input buffer and the output buffer are pointing to the same memory area, it is the driver's responsibility to avoid overwriting the input data. Use the Smart Card Driver Library to ensure that the input data is not overwritten.

</dd>
</dl>
<h4>I/O Status</h4>
<p>
<i>Information</i> receives the size of the <b>SCARD_IO_REQUEST</b> structure plus the number of bytes received from the card. <i>Status</i> can be:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=51%>Status</th>
<th align=left width=49%>Meaning</th>
</tr>
<tr valign=top>
<td width=51%>STATUS_SUCCESS</td>
<td width=49%>The transmission was successful.</td>
</tr>
<tr valign=top>
<td width=51%>STATUS_NO_MEDIA</td>
<td width=49%>No card in reader.</td>
</tr>
<tr valign=top>
<td width=51%>STATUS_IO_TIMEOUT</td>
<td width=49%>The operation has timed out.</td>
</tr>
<tr valign=top>
<td width=51%>STATUS_INVALID_DEVICE_STATE</td>
<td width=49%>The protocol in the header does not match the previously selected card protocol.</td>
</tr>
</table><br>
<h2>VxD driver version:</h2>
<p>
The <b>IOCTL_SMARTCARD_TRANSMIT DeviceIoControl</b> operation transmits data to and receives data from the currently inserted smart card.</p>
<h4>Input</h4>
<dl>
<dt>
<i>DiocParams-&gt;lpvInBuffer</i> </dt>
<dd>
Points to an <b>SCARD_IO_REQUEST</b> structure, which has the following definition:
<pre><code>typedef struct _SCARD_IO_REQUEST{
    DWORD dwProtocol;   // Protocol identifier
    DWORD cbPciLength;  // Protocol Control Information Length
} SCARD_IO_REQUEST, *PSCARD_IO_REQUEST, *LPSCARD_IO_REQUEST;
 </code></pre>
</dd>
<dt>
<i>DiocParams-&gt;cbInBuffer</i> </dt>
<dd>
Contains the size of the structure plus the length of trailing data bytes (if any). The member <b>dwProtocol</b> must be set to the previously selected protocol, and <b>cbPciLength</b> must be set to the size of the <b>SCARD_IO_REQUEST</b> structure itself (usually eight). The structure will be used for future protocols. Any data that is to be transmitted to the card must immediately follow this structure.</dd>
<dt>
<i>DiocParams-&gt;cbOutBuffer</i></dt>
<dd>
Contains the length of the output buffer.
</dd>
</dl>
<h4>Output</h4>
<dl>
<dt>
<i>DiocParams-&gt;lpvOutBuffer</i></dt>
<dd>
Receives the result of the transmission. This buffer must also begin with an <b>SCARD_IO_REQUEST</b> structure. Any data that was received from the card must be stored immediately after the structure.</dd>
<dt>
<i>DiocParams-&gt;lpcbBytesReturned</i></dt>
<dd>
Receives the size of the <b>SCARD_IO_REQUEST</b> structure plus the number of bytes received from the card.
</dd>
</dl>
<h4>Return Values</h4>
<p>
Following are possible return values.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=51%>Value</th>
<th align=left width=49%>Meaning</th>
</tr>
<tr valign=top>
<td width=51%>STATUS_SUCCESS</td>
<td width=49%>The transmission was successful.</td>
</tr>
<tr valign=top>
<td width=51%>STATUS_NO_MEDIA</td>
<td width=49%>No card in reader.</td>
</tr>
<tr valign=top>
<td width=51%>STATUS_IO_TIMEOUT</td>
<td width=49%>The operation has timed out.</td>
</tr>
<tr valign=top>
<td width=51%>STATUS_INVALID_DEVICE_STATE</td>
<td width=49%>The protocol in the header does not match the previously selected card protocol.</td>
</tr>
</table><br>
<p>&nbsp;</p></body>
</HTML>

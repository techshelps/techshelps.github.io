<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SCARD_CARD_CAPABILITIES</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_ntstruct_scard_card_capabilities"></a>SCARD_CARD_CAPABILITIES</h1>
<p>
The <b>SCARD_CARD_CAPABILITIES</b> structure holds all information about the currently inserted smart card.</p>
<pre><code>typedef struct _SCARD_CARD_CAPABILITIES{

     //
    // Flag that indicates that the current card uses inverse convention
    //
    BOOLEAN InversConvention;

    //
    // Calculated etu 
    //
    ULONG    etu;

    //
    // Answer To Reset string returned by card.
    //
    struct {

        UCHAR Buffer[64];
        UCHAR Length;

    } ATR;

    struct {

        UCHAR Buffer[16];
        UCHAR Length;

    } HistoricalChars;

    // !!! DO NOT MODIFY ANY OF THE BELOW VALUES
    // OTHERWISE THE LIBRARY WON'T WORK PROPERLY

    //
    // The following 2 tables are provided to give 
    // the driver access to the ISO definitions
    //
    PCLOCK_RATE_CONVERSION     ClockRateConversion;
    PBIT_RATE_ADJUSTMENT     BitRateAdjustment;

    // Clock rate conversion 
    UCHAR Fl;

    // Bit rate adjustment
    UCHAR Dl;

    // Maximum programming current
    UCHAR II;

    // Programming voltage in .1 Volts
    UCHAR P;

    // Extra guard time in etu 
    UCHAR N;

    // Calculated guard time in micro seconds
    ULONG GT;

    struct {

        // This is a bit mask of the supported protocols
        ULONG Supported;
        // The currently selected protocol
        ULONG Selected;

    } Protocol;

    //
    // T=0 specific data
    //
    struct {

        // Waiting integer
        UCHAR WI;

        // Waiting time in micro seconds
        ULONG WT;

    } T0;

    //
    // T=1 specific data
    //
    struct {

        // Information field size of card
        UCHAR IFSC;

        // Character waiting integer and block waiting integer
        UCHAR CWI;
        UCHAR BWI;

        // Error detection code
        UCHAR EDC;

        // Character and block waiting time in micro seconds
        ULONG CWT;
        ULONG BWT;

        // Block guarding time in micro seconds
        ULONG BGT;

    } T1;

    //
    // Reserved, do not use
    //
    ULONG Reserved[25];

} SCARD_CARD_CAPABILITIES, *PSCARD_CARD_CAPABILITIES;
 </code></pre>
<h4>Members</h4>
<p>
The following members must be maintained by the driver:
<dl>
<dt>
<b>ATR.Buffer</b></dt>
<dd>
Receives the ATR bytes after a warm or cold reset.</dd>
<dt>
<b>ATR.Length</b></dt>
<dd>
Receives the actual length of the ATR.</dd>
<dt>
</dt>
</dl>
<p>
The following members should be used by the driver:
<dl>
<dt>
<b>GT</b></dt>
<dd>
The guard time, in microseconds (including the extra guard time). This is the minimum delay between two consecutive characters.</dd>
<dt>
<b>T0.WT</b></dt>
<dd>
The T=0 work waiting time, in microseconds. This is the maximum delay between two consecutive characters.</dd>
<dt>
<b>T1.BWT</b></dt>
<dd>
The T=1 block waiting time, in microseconds. This is the maximum delay between the end of a block and the start of the next block sent in the opposite direction.</dd>
<dt>
<b>T1.CWT</b></dt>
<dd>
The T=1 character waiting time, in microseconds. This is the maximum delay between two consecutive characters.</dd>
<dt>
<b>T1.BGT</b></dt>
<dd>
The T=1 block guarding time, in microseconds. This is the minimum delay between the end of a block and the start of the next block sent in the opposite direction.</dd>
</dl>
<h4>Comments</h4>
<p>
<b>SCARD_CARD_CAPABILITIES</b> holds information about the currently inserted smart card. If the driver uses the Smart Card Driver Library, then <b>ATR</b> is the only member that the driver must fill in. Fill <b>ATR.Buffer</b><i> </i>with the ATR characters and <b>ATR.Length</b> with the number of ATR bytes returned by the card. The Smart Card Driver Library will automatically update all other fields when a call is made to <a href="scioctls_6f8s.htm"><b>IOCTL_SMARTCARD_SET_PROTOCOL</b></a>.</p>
<p>&nbsp;</p></body>
</HTML>

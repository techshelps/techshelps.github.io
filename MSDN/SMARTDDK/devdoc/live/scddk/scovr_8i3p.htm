<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Smart Card Driver Library Callback Function Reference</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_ntovr_smart_card_driver_library_callback_function_reference"></a>Smart Card Driver Library Callback Function Reference</h2>
<p>
The driver can set up several callback functions in the <a href="scstruct_50a6.htm"><b>SMARTCARD_EXTENSION</b></a> structure. The member <b>ReaderFunction</b> is an array of function pointers. Each array member is used for a specific callback. To set up one of these members, the driver has to assign a function pointer to the desired array member. For example:</p>
<pre><code>SmartcardExtension-&gt;ReaderFunction[RDF_CARD_POWER] = 
DriverCardPower;
 </code></pre>
<p>
This sets up a callback for the card power request. When the library receives such an IOCTL code, it sets up all parameters and then calls this function. If a member function is NULL, the driver will return STATUS_NOT_SUPPORTED to the caller. This is useful, for example, if your driver does not support card ejecting or card swallowing. If you do not set up a function for these calls, the library simply returns STATUS_NOT_SUPPORTED.</p>
<p>&nbsp;</p></body>
</HTML>

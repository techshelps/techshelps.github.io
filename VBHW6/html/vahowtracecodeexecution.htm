<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Trace Code Execution</TITLE>
<style>@import url(office.css);</style>
	<link disabled rel="stylesheet" href="msoffice.css"></HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="defprocedure">
</OBJECT>
<OBJECT ID="hhobj_4" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="defvariable">
</OBJECT>
</TD></TR></TABLE>



<H1><A NAME="vahowtracecodeexecution"></A>Trace Code Execution</H1>

<P class=ALNSR>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="Text" VALUE="Text:See Also">
	<PARAM NAME="Flags" VALUE=",,1">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="vahowTraceCodeExecutionC">
</OBJECT>&nbsp;&nbsp;&nbsp;
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="Text" VALUE="Text:Specifics">
	<PARAM NAME="Flags" VALUE=",,1">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="vahowTraceCodeExecutionS">
</OBJECT></P>

<P class=T>You trace code execution because it may not always be obvious which statement is executed first. Use these techniques to trace the execution of code:

<UL>
	<LI class=LB1><B>Step Into</B>: Traces through each line of code and steps into <A HREF="JavaScript:hhobj_3.Click()">procedures</A>. This allows you to view the effect of each statement on <A HREF="JavaScript:hhobj_4.Click()">variables</A>.<BR><BR></LI>

	<LI class=LB1><B>Step Over</B>: Executes each procedure as if it were a single statement. Use this instead of <B>Step Into</B> to step across procedure calls rather than into the called procedure.<BR><BR></LI>

	<LI class=LB1><B>Step Out</B>: Executes all remaining code in a procedure as if it were a single statement, and exits to the next statement in the procedure that caused the procedure to be called initially.<BR><BR></LI>

	<LI class=LB1><B>Run To Cursor</B>: Allows you to select a statement in your code where you want execution to stop. This allows you to "step over" sections of code, for example, large loops.</LI>
</UL>

<P class=LPROCH><B>To trace execution from the current statement</B>

<UL>
	<LI class=LB1>From the <B>Debug</B> menu, choose <B>Step Into</B> (F8), <B>Step Over</B> (SHIFT+F8), <B>Step Out</B> (CTRL+SHIFT+F8), or <B>Run To Cursor</B> (CTRL+F8).</LI>
</UL>

<P class=LPROCH><B>To trace execution from the beginning of the program</B>

<UL>
	<LI class=LB1>From the <B>Debug</B> menu, choose <B>Step Into</B> (F8), <B>Step Over</B> (SHIFT+F8), <B>Step Out</B> (CTRL+SHIFT+F8), or <B>Run To Cursor</B> (CTRL+F8).</LI>
</UL>

</BODY>
</HTML>

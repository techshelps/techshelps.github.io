<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css">
<TITLE>Working with Drives and Folders</TITLE> 

<META NAME="MS-HKWD" CONTENT="FileSystemObject object">
<META NAME=MS-HAID CONTENT="sgWorkingWithDrives">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="PRODUCT" CONTENT="Scripting Library">
<META NAME="TECHNOLOGY" CONTENT="SCRIPTING">
<META NAME="CATEGORY" CONTENT="FileSystemObject">
<META NAME="Description" CONTENT="Working with Drives and Folders">
<META NAME="Keywords" CONTENT="FileSystemObject object">

</HEAD>

<BODY BGCOLOR="#FFFFFF" LINK="#0033CC">
<!--TOOLBAR_START-->
<!--TOOLBAR_EXEMPT-->
<!--TOOLBAR_END-->
<FONT FACE="Verdana, ARIAL, HELVETICA" SIZE=2>
<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH=100%><TR VALIGN=TOP><TD WIDTH=360>
<FONT SIZE=1 COLOR="#660033">Microsoft&#174; Scripting Library - FileSystemObject</FONT><BR>
<FONT SIZE=5 COLOR="#660033"><B>Working with Drives and Folders</B></FONT><br>

</TD>
<TD ALIGN=RIGHT>
<FONT SIZE=2>&nbsp;<A HREF="sgProgrammingFileSystemObject.htm">Previous</A><br><A HREF="sgWorkingWithFiles.htm">Next</A><P></FONT>
</TD></TR>
</TABLE><p>

<hr noshade size=1>
<blockquote>
With the <B>FileSystemObject</B> (FSO) object model,  you can work with drives and folders programmatically just as you can in the Windows Explorer interactively. You can copy and move folders, get information about drives and folders, and so forth.<p>
</blockquote>

<h5>Getting Information About Drives</h5>
<blockquote>
The <b>Drive</b> object allows you to gain information about the various drives attached to a system, either physically or over a network. Its properties allow you to obtain information about:<p>
<ul>
<li>The total size of the drive in bytes (<b>TotalSize</b> property)
<li>How much space is available on the drive in bytes (<b>AvailableSpace</b> or <b>FreeSpace</b> properties)
<li>What letter is assigned to the drive (<b>DriveLetter</b> property)
<li>What type of drive it is, such as removable, fixed, network, CD-ROM, or RAM disk (<b>DriveType</b> property)
<li>The drive's serial number (<b>SerialNumber </b>property)
<li>The type of file system the drive uses, such as FAT, FAT32, NTFS, and so forth (<b>FileSystem</b> property)
<li>Whether a drive is available for use (<b>IsReady</b> property)
<li>The name of the share and/or volume (<b>ShareName</b> and <b>VolumeName</b> properties)
<li>The path or root folder of the drive (<b>Path</b> and <b>RootFolder</b> properties)
</ul>
View the <A HREF="./sgFSOSample.htm#DriveInfo">sample code</A> to see how these properties are used in <B>FileSystemObject</B>.<P>
</blockquote>
<h5>Example Usage of the Drive Object</h5>
<blockquote>
Use the <b>Drive</b> object to gather information about a drive. You won't see a reference to an actual <b>Drive</b> object in the following code; instead, use the <b>GetDrive</b> method to get a reference to an existing <b>Drive</b> object (in this case, drv).<p>
The following example demonstrates how to use the <b>Drive</b> object in VBScript:
 
<BLOCKQUOTE><pre><font face="Courier New" size=3>Sub ShowDriveInfo(drvPath)
  Dim fso, drv, s
  Set fso = CreateObject("Scripting.FileSystemObject")
  Set drv = fso.GetDrive(fso.GetDriveName(drvPath))
  s = "Drive " & UCase(drvPath) & " - "
  s = s & drv.VolumeName & "&lt;br&gt;"
  s = s & "Total Space: " & FormatNumber(drv.TotalSize / 1024, 0)
  s = s & " Kb" & "&lt;br&gt;"
  s = s & "Free Space: " & FormatNumber(drv.FreeSpace / 1024, 0)
  s = s & " Kb" & "&lt;br&gt;"
  Response.Write s
End Sub
</font></pre></BLOCKQUOTE>

The following code illustrates the same functionality in JScript:

<BLOCKQUOTE><pre><font face="Courier New" size=3>function ShowDriveInfo1(drvPath)
{
  var fso, drv, s ="";
  fso = new ActiveXObject("Scripting.FileSystemObject");
  drv = fso.GetDrive(fso.GetDriveName(drvPath));
  s += "Drive " + drvPath.toUpperCase()+ " - ";
  s += drv.VolumeName + "&lt;br&gt;";
  s += "Total Space: " + drv.TotalSize / 1024;
  s += " Kb" + "&lt;br&gt;"; 
  s += "Free Space: " + drv.FreeSpace / 1024;
  s += " Kb" + "&lt;br&gt;";
  Response.Write(s);
}
</font></pre></BLOCKQUOTE>
</blockquote>

<h5>Working with Folders</h5>
<blockquote>
Common folder tasks and the methods for performing them are described in the following table. <p>
<table width= "87%" border=1 cellpadding=5 cellspacing=0>
<tr valign=top bgcolor="#dddddd"><td><font size=2><b>Task</b></font></td><td><font size=2><b>Method</b></font></td></tr>
<tr VALIGN=TOP>
  <td><FONT SIZE=2>Create a folder.</font></td>
    <td><FONT SIZE=2><B>FileSystemObject.CreateFolder</B></font></td></tr>
<tr VALIGN=TOP>
  <td><FONT SIZE=2>Delete a folder.</font></td>
    <td><FONT SIZE=2><B>Folder.Delete</B> or <B>FileSystemObject.DeleteFolder</B></font></td></tr>
<tr VALIGN=TOP>
  <td><FONT SIZE=2>Move a folder.</font></td>
    <td><FONT SIZE=2><B>Folder.Move</B> or <B>FileSystemObject.MoveFolder</B></font></td></tr>
<tr VALIGN=TOP>
  <td><FONT SIZE=2>Copy a folder.</font></td>
    <td><FONT SIZE=2><B>Folder.Copy</B> or <B>FileSystemObject.CopyFolder</B></font></td></tr>
<tr VALIGN=TOP>
  <td><FONT SIZE=2>Retrieve the name of a folder.</font></td>
    <td><FONT SIZE=2><B>Folder.Name</B></font></td></tr>
<tr VALIGN=TOP>
  <td><FONT SIZE=2>Find out if a folder exists on a drive.</font></td>
    <td><FONT SIZE=2><B>FileSystemObject.FolderExists</B></font></td></tr>
<tr VALIGN=TOP>
  <td><FONT SIZE=2>Get an instance of an existing <B>Folder</B> object.</font></td>
    <td><FONT SIZE=2><B>FileSystemObject.GetFolder</B></font></td></tr>
<tr VALIGN=TOP>
  <td><FONT SIZE=2>Find out the name of a folder's parent folder.</font></td>
    <td><FONT SIZE=2><B>FileSystemObject.GetParentFolderName</B></font></td></tr>
<tr VALIGN=TOP>
  <td><FONT SIZE=2>Find out the path of system folders.</font></td>
    <td><FONT SIZE=2><B>FileSystemObject.GetSpecialFolder</B></font></td></tr>
</table>
<P>
View the <A HREF="./sgFSOSample.htm#FolderInfo">sample code</A> to see how many of these methods and properties are used in <B>FileSystemObject</B>.<P>

The following example demonstrates how to use the <b>Folder</b> and <b>FileSystemObject</b> objects to manipulate folders and gain information about them in VBScript:<p>
	
<BLOCKQUOTE><pre><font face="Courier New" size=3>Sub ShowFolderInfo()
  Dim fso, fldr, s
  ' Get instance of FileSystemObject.
  Set fso = CreateObject("Scripting.FileSystemObject")
  ' Get Drive object.
  Set fldr = fso.GetFolder("c:")
  ' Print parent folder name.
  Response.Write "Parent folder name is: " & fldr & "&lt;br&gt;"
  ' Print drive name.
  Response.Write "Contained on drive " & fldr.Drive & "&lt;br&gt;"
  ' Print root file name.
  If fldr.IsRootFolder = True Then
    Response.Write "This is the root folder." & ""&lt;br&gt;"&lt;br&gt;"
  Else
    Response.Write "This folder isn't a root folder." & "&lt;br&gt;&lt;br&gt;" 
  End If
  ' Create a new folder with the FileSystemObject object.
  fso.CreateFolder ("C:\Bogus")
  Response.Write "Created folder C:\Bogus" & "&lt;br&gt;"
  ' Print the base name of the folder.
  Response.Write "Basename = " & fso.GetBaseName("c:\bogus") & "&lt;br&gt;"
  ' Delete the newly created folder.
  fso.DeleteFolder ("C:\Bogus")
  Response.Write "Deleted folder C:\Bogus" & "&lt;br&gt;"
End Sub
</font></pre></BLOCKQUOTE>
This example shows how to use the <b>Folder</b> and <b>FileSystemObject</b> objects in JScript:

<BLOCKQUOTE><pre><font face="Courier New" size=3>function ShowFolderInfo()
{
  var fso, fldr, s = "";
  // Get instance of FileSystemObject.
  fso = new ActiveXObject("Scripting.FileSystemObject");
  // Get Drive object.
  fldr = fso.GetFolder("c:");
  // Print parent folder name.
  Response.Write("Parent folder name is: " + fldr + "&lt;br&gt;");
  // Print drive name.
  Response.Write("Contained on drive " + fldr.Drive + "&lt;br&gt;");
  // Print root file name.
  if (fldr.IsRootFolder)
    Response.Write("This is the root folder.");
  else
    Response.Write("This folder isn't a root folder.");
  Response.Write("&lt;br&gt;&lt;br&gt;");
  // Create a new folder with the FileSystemObject object.
  fso.CreateFolder ("C:\\Bogus");
  Response.Write("Created folder C:\\Bogus" + "&lt;br&gt;");
  // Print the base name of the folder.
  Response.Write("Basename = " + fso.GetBaseName("c:\\bogus") + "&lt;br&gt;");
  // Delete the newly created folder.
  fso.DeleteFolder ("C:\\Bogus");
  Response.Write("Deleted folder C:\\Bogus" + "&lt;br&gt;");
}
</font></pre></BLOCKQUOTE>
</blockquote>
<hr noshade size=1>
<!--COPYRIGHT BEGIN--><!--COPYRIGHT END--> 
</FONT>
</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

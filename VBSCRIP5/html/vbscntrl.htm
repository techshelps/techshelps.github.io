<HTML>
<HEAD>
<TITLE>VBScript and Forms</title><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css">
<META NAME="MS-HKWD" CONTENT="VBScript tutorial">
<META NAME="MS-HKWD" CONTENT="forms">
<META NAME="MS-HKWD" CONTENT="form processing">
<META NAME="MS-HKWD" CONTENT="validating data">
<META NAME="MS-HKWD" CONTENT="client-side validation">
<META NAME="MS-HKWD" CONTENT="controls">
<META NAME=MS-HAID CONTENT="vbscntrl"> 
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="PRODUCT" CONTENT="Visual Basic Scripting Edition">
<META NAME="TECHNOLOGY" CONTENT="SCRIPTING">
<META NAME="CATEGORY" CONTENT="Tutorial">
<META NAME="Description" CONTENT="VBScript and Forms">
<META NAME="Keywords" CONTENT="VBScript tutorial; forms; form processing; validating data; client-side validation; controls">

</HEAD>
<BODY BGCOLOR=FFFFFF LINK=#0033CC>

<!--TOOLBAR_START-->
<!--TOOLBAR_EXEMPT-->
<!--TOOLBAR_END-->
<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>
<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH=100%><TR VALIGN=TOP><TD WIDTH=360>
<FONT SIZE=1 COLOR=#660033>Microsoft&#174; Visual Basic&#174; Scripting Edition</FONT><BR>
<FONT SIZE=5 COLOR=#660033><B>VBScript and Forms</B></FONT>

</TD>
<TD ALIGN=RIGHT>
<FONT SIZE=2>&nbsp;<A HREF="vbstutor.htm">VBScript&nbsp;Tutorial</A><BR><A HREF="vbsfirst.htm">Previous</A><br><A HREF="vbsobjs.htm">Next</A><P></FONT>


</TD></TR>
</TABLE> 
&nbsp;<BR>
<HR NOSHADE SIZE=1>



<H5>Simple Validation</H5>
<BLOCKQUOTE>
You can use Visual Basic Scripting Edition to do much of the form processing that you'd usually have to do on a server. You can also do things that just can't be done on the server.<P>

Here's an example of simple client-side validation. The HTML code is for a text box and a button. If you use Microsoft&#174; Internet Explorer to view the <A HREF="vbscntrx.htm">page produced</A> by the following code, you'll see a small text box with a button next to it. 
<BLOCKQUOTE><PRE><FONT FACE="Courier New" SIZE=3>&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Simple Validation&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE="VBScript"&gt; 
&lt;!--
Sub Button1_OnClick
  Dim TheForm
  Set TheForm = Document.ValidForm
  If IsNumeric(TheForm.Text1.Value) Then
    If TheForm.Text1.Value &lt; 1 Or TheForm.Text1.Value &gt; 10 Then
      MsgBox "Please enter a number between 1 and 10."
    Else
      MsgBox "Thank you."
    End If
  Else
    MsgBox "Please enter a numeric value."
  End If
End Sub
--&gt;
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H3&gt;Simple Validation&lt;/H3&gt;&lt;HR&gt;
&lt;FORM NAME="ValidForm"&gt;
Enter a value between 1 and 10: 
&lt;INPUT NAME="Text1" TYPE="TEXT" SIZE="2"&gt;
&lt;INPUT NAME="Button1" TYPE="BUTTON" VALUE="Submit"&gt;
&lt;/FORM&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</FONT></PRE>
</BLOCKQUOTE>

The difference between this text box and the examples on <A HREF="vbsfirst.htm">A Simple VBScript Page</A> is that the <B>Value</B> property of the text box is used to check the entered value. To get the <B>Value</B> property, the code has to qualify the reference to the name of the text box.<P>
You can always write out the full reference <FONT FACE="Courier New" SIZE=2>Document.ValidForm.Text1</FONT>. However, where you have multiple references to form controls, you'll want to do what was done here. First declare a variable. Then use the <A HREF="vsstmSet.htm" ><B>Set</B></A> statement to assign the form to the variable <FONT FACE="Courier New" SIZE=2>TheForm</FONT>. A regular assignment statement, such as <A HREF="vsstmDim.htm" ><B>Dim</B></A>, doesn't work here; you must use <B>Set</B> to preserve the reference to an object.
</BLOCKQUOTE>

<H5>Using Numeric Values</H5>
<BLOCKQUOTE>
Notice that the example directly tests the value against a number: it uses the <A HREF="vsfctIsNumeric.htm"><B>IsNumeric</B> </A>function to make sure the string in the text box is a number. Although VBScript automatically converts strings and numbers, it's always a good practice to test a user-entered value for its data subtype and to use <A HREF="vsidxconversion.htm">conversion functions</A> as necessary. When doing addition with text box values, convert the values explicitly to numbers because the plus sign (<A HREF="vsoprAdd.htm"><B>+</B></A>) operator represents both addition and string concatenation. For example, if <FONT FACE="Courier New" SIZE=2>Text1</FONT> contains "1" and <FONT FACE="Courier New" SIZE=2>Text2</FONT> contains "2", you see the following results:
<BLOCKQUOTE><PRE><FONT FACE="Courier New" SIZE=3>A = Text1.Value + Text2.Value		' A is "12"
A = CDbl(Text1.Value) + Text2.Value	' A is 3
</FONT>
</PRE>
</BLOCKQUOTE></BLOCKQUOTE>

<H5>Validating and Passing Data Back to the Server</H5>
<BLOCKQUOTE>
The simple validation example uses a plain button control. If a Submit control was used, the example would never see the data to check it&#151;everything would go immediately to the server. Avoiding the Submit control lets you check the data, but it doesn't submit the data to the server. That requires an additional line of code:
<BLOCKQUOTE><PRE><FONT FACE="Courier New" SIZE=3>&lt;SCRIPT LANGUAGE="VBScript"&gt; 
&lt;!--
Sub Button1_OnClick
  Dim TheForm
  Set TheForm = Document.ValidForm
  If IsNumeric(TheForm.Text1.Value) Then
    If TheForm.Text1.Value &lt; 1 Or TheForm.Text1.Value &gt; 10 Then
      MsgBox "Please enter a number between 1 and 10."
    Else
      MsgBox "Thank you."
      TheForm.Submit	' Data correct; send to server.
    End If
  Else
    MsgBox "Please enter a numeric value."
  End If
End Sub
--&gt;
&lt;/SCRIPT&gt;</FONT></PRE></BLOCKQUOTE>

To send the data to the server, the code invokes the <B>Submit</B> method on the form object when the data is correct. From there, the server handles the data just as it otherwise would&#151;except that the data is correct before it gets there. Find complete information about the <B>Submit</B> method and other methods in the Internet Explorer Scripting Object Model documentation, which can be found on the Microsoft&#174; Web site (http://www.microsoft.com).<P>

So far, you've seen only the standard HTML &lt;FORM&gt; objects. Internet Explorer also lets you exploit the full power of ActiveX&#174; controls (formerly called OLE controls) and Java&#153; objects.

</BLOCKQUOTE>


<hr noshade size=1>
 
<!--COPYRIGHT BEGIN--><!--COPYRIGHT END-->
</FONT>
</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

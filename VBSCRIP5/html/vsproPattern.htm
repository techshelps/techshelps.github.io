<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN"><HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>Pattern Property</TITLE>
<META NAME="MS-HKWD" CONTENT="Pattern property">
<META NAME="MS-HKWD" CONTENT="RegExp object">
<META NAME="MS-HKWD" CONTENT="regular expression">
<META NAME="MS-HKWD" CONTENT="pattern matching">
<META NAME="MS-HKWD" CONTENT="regular expression syntax">
<META NAME=MS-HAID CONTENT="vsproPattern">
 
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="PRODUCT" CONTENT="Visual Basic Scripting Edition">
<META NAME="TECHNOLOGY" CONTENT="SCRIPTING">
<META NAME="CATEGORY" CONTENT="Language Reference">

<META NAME="Keywords" CONTENT="Pattern property; regular expression; pattern matching; regular expression syntax">

<META NAME="Description" CONTENT="Pattern Property">
</HEAD>
<BODY BGCOLOR="#FFFFFF" LINK="#0033CC">

<!--TOOLBAR_START-->
<!--TOOLBAR_EXEMPT-->
<!--TOOLBAR_END-->
<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>
<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH=100%><TR VALIGN=TOP><TD WIDTH=360>
<FONT SIZE=1 COLOR="#660033">Microsoft&#174; Visual Basic&#174; Scripting Edition</FONT><BR>
<FONT SIZE=5 COLOR="#660033"><B>Pattern Property</B></FONT>

</TD>
<TD ALIGN=RIGHT>
<FONT SIZE=2>&nbsp;<A HREF="vbstoc.htm">Language&nbsp;Reference</A>&nbsp;<BR>
<A HREF="vbsversion.htm">Version&nbsp;5</A>&nbsp;<P></FONT>
</TD></TR>
</TABLE>

<FONT SIZE=2><p>
<A HREF="vsproPatternC.htm">See Also</A>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<A HREF="vsproPatternA.htm">Applies to</A></FONT>
<HR noshade SIZE=1>

<H5>Description</H5>
<BLOCKQUOTE>
Sets or returns the regular expression pattern being searched for.
</BLOCKQUOTE>

<H5>Syntax</H5>
<BLOCKQUOTE>
<i>object</i><b>.Pattern</b> [= "<i>searchstring</i>"]<p>
The <b>Pattern</b> property syntax has these parts:<P>

<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT SIZE=2><b>Part</b></FONT></TD>
<TD><FONT SIZE=2><b>Description</b></FONT></TD></TR>
<TR VALIGN=TOP>
<TD><FONT SIZE=2><i>object</i></FONT></TD>
<TD><FONT SIZE=2>Required. Always a <b>RegExp</b> object variable.</FONT></TD></TR>
<TR VALIGN=TOP>
<TD><FONT SIZE=2><i>searchstring</i></FONT></TD> 
<TD><FONT SIZE=2>Optional. Regular <A HREF="glossary.htm#defStringExpression">string expression</A> being searched for. May include any of the regular expression characters defined in the table in the <B>Settings</B> section.</FONT></TD></TR></TABLE>
</BLOCKQUOTE>

<H5>Settings</H5>
<BLOCKQUOTE>
Special characters and sequences are used in writing patterns for regular expressions. The following table describes and gives an example of the characters and sequences that can be used.<P>

<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT SIZE=2><b>Character</b></FONT></TD>
<TD><FONT SIZE=2><b>Description</b></FONT></TD></TR>
<tr valign=top>
<td><font size=2><b>\</b> </font></td>
<td><font size=2>Marks the next character as either a special character or a literal. For example, "n" matches the character "n". "\n" matches a newline character. The sequence "\\" matches "\" and "\(" matches "(".</font></td>
</tr>
<tr valign=top>
<td><font size=2><b>^</b> </font></td>
<td><font size=2>Matches the beginning of input.</font></td>
</tr>
<tr valign=top>
<td><font size=2><b>$</b> </font></td>
<td><font size=2>Matches the end of input.</font></td>
</tr>
<tr valign=top>
<td><font size=2><b>*</b> </font></td>
<td><font size=2>Matches the preceding character zero or more times. For example, "zo*" matches either "z" or "zoo".</font></td>
</tr>
<tr valign=top>
<td><font size=2><b>+</b> </font></td>
<td><font size=2>Matches the preceding character one or more times. For example, "zo+" matches "zoo" but not "z".</font></td>
</tr>
<tr valign=top>
<td><font size=2><b>?</b> </font></td>
<td><font size=2>Matches the preceding character zero or one time. For example, "a?ve?" matches the "ve" in "never". </font></td>
</tr>
<tr valign=top>
<td><font size=2><b>.</b></font></td>
<td><font size=2>Matches any single character except a newline character. </font></td>
</tr>
<tr valign=top>
<td><font size=2><b>(</b><i>pattern</i><b>)</b> </font></td>
<td><font size=2>Matches <i>pattern</i> and remembers the match. The matched substring can be retrieved from the resulting <b>Matches</b> collection, using Item <b>[0]...[n]</b>. To match parentheses characters ( ), use "\(" or "\)".</font></td>
</tr>
<tr valign=top>
<td><font size=2><i>x</i><b>|</b><i>y</i></font></td>
<td><font size=2>Matches either <i>x</i> or <i>y</i>. For example, "z|food" matches "z" or "food". "(z|f)oo" matches "zoo" or "food".  </font></td>
</tr>
<tr valign=top>
<td><font size=2><b>{</b><i>n</i><b>}</b></font></td>
<td><font size=2><i>n</i> is a nonnegative integer. Matches exactly <i>n</i> times. For example, "o{2}" does not match the "o" in "Bob," but matches the first two o's in "foooood".</font></td>
</tr>
<tr valign=top>
<td><font size=2><b>{</b><i>n</i><b>,}</b> </font></td>
<td><font size=2><i>n</i> is a nonnegative integer. Matches at least <i>n</i> times.  For example, "o{2,}" does not match the "o" in "Bob" and matches all the o's in "foooood."  "o{1,}" is equivalent to "o+". "o{0,}" is equivalent to "o*".</font></td>
</tr>
<tr valign=top>
<td><font size=2><b>{</b><i>n</i><b>,</b><i>m</i><b>}</b> </font></td>
<td><font size=2><i>m</i> and <i>n</i> are nonnegative integers. Matches at least <i>n</i> and at most <i>m</i> times. For example, "o{1,3}" matches the first three o's in "fooooood." "o{0,1}" is equivalent to "o?".</font></td>
</tr>
<tr valign=top>
<td><font size=2><b>[</b><i>xyz</i><b>]</b> </font></td>
<td><font size=2>A character set. Matches any one of the enclosed characters. For example, "[abc]" matches the "a" in "plain". </font></td>
</tr>
<tr valign=top>
<td><font size=2><b>[^</b><i>xyz</i><b>]</b> </font></td>
<td><font size=2>A negative character set. Matches any character not enclosed. For example, "[^abc]" matches the "p" in "plain". </font></td>
</tr>
<tr valign=top>
<td><font size=2><b>[</b><i>a-z</i><b>]</b> </font></td>
<td><font size=2>A range of characters. Matches any character in the specified range. For example, "[a-z]" matches any lowercase alphabetic character in the range "a" through "z". </font></td>
</tr>
<tr valign=top>
<td><font size=2><b>[^</b><i>m-z</i><b>]</b> </font></td>
<td><font size=2>A negative range characters. Matches any character not in the specified range. For example, "[m-z]" matches any character not in the range "m" through "z". </font></td>
</tr>
<tr valign=top>
<td><font size=2><b>\b</b> </font></td>
<td><font size=2>Matches a word boundary, that is, the position between a word and a space. For example, "er\b" matches the "er" in "never" but not the "er" in "verb". </font></td>
</tr>
<tr valign=top>
<td><font size=2><b>\B</b> </font></td>
<td><font size=2>Matches a nonword boundary. "ea*r\B" matches the "ear" in "never early". </font></td>
</tr>
<tr valign=top>
<td><font size=2><b>\d</b> </font></td>
<td><font size=2>Matches a digit character. Equivalent to [0-9]. </font></td>
</tr>
<tr valign=top>
<td><font size=2><b>\D</b> </font></td>
<td><font size=2>Matches a nondigit character. Equivalent to [^0-9]. </font></td>
</tr>
<tr valign=top>
<td><font size=2><b>\f</b> </font></td>
<td><font size=2>Matches a form-feed character. </font></td>
</tr>
<tr valign=top>
<td><font size=2><b>\n</b> </font></td>
<td><font size=2>Matches a newline character. </font></td>
</tr>
<tr valign=top>
<td><font size=2><b>\r</b> </font></td>
<td><font size=2>Matches a carriage return character. </font></td>
</tr>
<tr valign=top>
<td><font size=2><b>\s</b> </font></td>
<td><font size=2>Matches any white space including space, tab, form-feed, etc. Equivalent to "[&nbsp;\f\n\r\t\v]".</font></td>
</tr>
<tr valign=top>
<td><font size=2><b>\S</b> </font></td>
<td><font size=2>Matches any nonwhite space character. Equivalent to "[^&nbsp;\f\n\r\t\v]". </font></td>
</tr>
<tr valign=top>
<td><font size=2><b>\t</b> </font></td>
<td><font size=2>Matches a tab character. </font></td>
</tr>
<tr valign=top>
<td><font size=2><b>\v</b> </font></td>
<td><font size=2>Matches a vertical tab character. </font></td>
</tr>
<tr valign=top>
<td><font size=2><b>\w</b> </font></td>
<td><font size=2>Matches any word character including underscore. Equivalent to "[A-Za-z0-9_]". </font></td>
</tr>
<tr valign=top>
<td><font size=2><b>\W</b> </font></td>
<td><font size=2>Matches any nonword character. Equivalent to "[^A-Za-z0-9_]". </font></td>
</tr>
<tr valign=top>
<td><font size=2><b>\</b><i>num</i> </font></td>
<td><font size=2>Matches <i>num</i>, where <i>num</i> is a positive integer. A reference back to remembered matches. For example, "(.)\1" matches two consecutive identical characters. </font></td>
</tr>
<tr valign=top>
<td><font size=2><b>\</b><i>n</i></font></td>
<td><font size=2>Matches <i>n</i>, where <i>n</i> is an octal escape value. Octal escape values must be 1, 2, or 3 digits long. For example, "\11" and "\011" both match a tab character. "\0011" is the equivalent of "\001" & "1". Octal escape values must not exceed 256. If they do, only the first two digits comprise the expression.  Allows ASCII codes to be used in regular expressions.</font></td>
</tr>
<tr valign=top>
<td><font size=2><b>\x</b><i>n</i></font></td>
<td><font size=2>Matches <i>n</i>, where <i>n</i> is a hexadecimal escape value.  Hexadecimal escape values must be exactly two digits long. For example, "\x41" matches "A". "\x041" is equivalent to "\x04" & "1". Allows ASCII codes to be used in regular expressions.</font></td>
</tr>

</TABLE>
</BLOCKQUOTE>
<H5>Remarks</H5>
<BLOCKQUOTE>
The following code illustrates the use of the <B>Pattern</B> property:

<BLOCKQUOTE><PRE><FONT FACE="Courier New" SIZE=3>Function RegExpTest(patrn, strng)
  Dim regEx, Match, Matches		' Create variable.
  Set regEx = New RegExp			' Create a regular expression.
  <FONT COLOR="#FF0000">regEx.Pattern = </FONT>patrn			' Set pattern.
  regEx.IgnoreCase = True			' Set case insensitivity.
  regEx.Global = True			' Set global applicability.
  Set Matches = regEx.Execute(strng)	' Execute search.
  For Each Match in Matches		' Iterate Matches collection.
    RetStr = RetStr & "Match found at position "
    RetStr = RetStr & Match.FirstIndex & ". Match Value is '"
    RetStr = RetStr & Match.Value & "'." & vbCRLF
  Next
  RegExpTest = RetStr
End Function

MsgBox(RegExpTest("is.", "IS1 is2 IS3 is4"))

</FONT></PRE></BLOCKQUOTE>

</BLOCKQUOTE>

<hr noshade size=1>

</FONT></BODY><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

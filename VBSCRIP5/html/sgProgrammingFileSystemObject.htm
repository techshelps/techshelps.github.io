<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css">
<TITLE>Programming the FileSystemObject</TITLE> 

<META NAME="MS-HKWD" CONTENT="FileSystemObject object">
<META NAME=MS-HAID CONTENT="sgProgrammingFileSystemObject">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="PRODUCT" CONTENT="Scripting Library">
<META NAME="TECHNOLOGY" CONTENT="SCRIPTING">
<META NAME="CATEGORY" CONTENT="FileSystemObject">
<META NAME="Description" CONTENT="Programming the FileSystemObject">
<META NAME="Keywords" CONTENT="FileSystemObject object">

</HEAD>

<BODY BGCOLOR="#FFFFFF" LINK="#0033CC">
<!--TOOLBAR_START-->
<!--TOOLBAR_EXEMPT-->
<!--TOOLBAR_END-->
<FONT FACE="Verdana, ARIAL, HELVETICA" SIZE=2>
<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH=100%><TR VALIGN=TOP><TD WIDTH=360>
<FONT SIZE=1 COLOR="#660033">Microsoft&#174; Scripting Library - FileSystemObject</FONT><BR>
<FONT SIZE=5 COLOR="#660033"><B>Programming the FileSystemObject</B></FONT><br>

</TD>
<TD ALIGN=RIGHT>
<FONT SIZE=2>&nbsp;<A HREF="sgFileSystemObjects.htm">Previous</A><br><A HREF="sgWorkingWithDrives.htm">Next</A><P></FONT>

</TD></TR>
</TABLE><p>

<hr noshade size=1>
<blockquote>
To program with the <B>FileSystemObject</B> (FSO) object model:<p>
<ul>
<li>Use the <B>CreateObject</B> method to create a <B>FileSystemObject</B> object.
<li>Use the appropriate method on the newly created object.
<li>Access the object's properties.
</ul>

The FSO object model is contained in the Scripting <A HREF="fsoglossary.htm#defTypeLibrary">type library</A>, which is located in the Scrrun.dll file. Therefore, you must have Scrrun.dll in the appropriate system directory on your Web server to use the FSO object model.<p>
</blockquote>

<h5>Creating a FileSystemObject Object</h5>
<blockquote>
First, create a <B>FileSystemObject</B> object by using the <B>CreateObject</B> method. In VBScript, use the following code to create an instance of the <B>FileSystemObject</B>: <p>

<BLOCKQUOTE><pre><font face="Courier New" size=3>Dim fso
Set fso = CreateObject("Scripting.FileSystemObject")
</font></pre></blockquote>

This <A HREF="./sgFSOSample.htm#CreateFSO">sample code</A> demonstrates how to create an instance of the <B>FileSystemObject</B>.<p>

In JScript, use this code to do the same thing:<P>

<BLOCKQUOTE><pre><font face="Courier New" size=3>var fso;
fso = new ActiveXObject("Scripting.FileSystemObject");
</font></pre></blockquote>

In both of these examples, <B>Scripting</B> is the name of the type library and <B>FileSystemObject</B> is the name of the object that you want to create. You can create only one instance of the <B>FileSystemObject</B> object, regardless of how many times you try to create another.<P>
</blockquote>
<H5>Using the Appropriate Method</H5>
<BLOCKQUOTE>
Second, use the appropriate method of the <B>FileSystemObject</B> object. For example, to create a new object, use either <B>CreateTextFile</B> or <B>CreateFolder</B> (the FSO object model doesn't support the creation or deletion of drives).<P>

To delete objects, use the <B>DeleteFile</B> and <B>DeleteFolder</B> methods of the <B>FileSystemObject</B> object, or the <B>Delete</B> method of the <B>File</B> and <B>Folder</B> objects. You can also copy and move files and folders, by using the appropriate methods. <P>

<TABLE CELLSPACING=0 CELLPADDING=0 BORDER=0 WIDTH=87%><TR><TD COLSPAN=2 VALIGN=BOTTOM><hr noshade size=1></TD></TR><TR>
<TD VALIGN=TOP><FONT SIZE=2><b>Note</b>&nbsp;&nbsp;Some functionality in the <B>FileSystemObject</B> object model is redundant. For example, you can copy a file using either the <B>CopyFile</B> method of the <B>FileSystemObject</B> object, or you can use the <B>Copy</B> method of the <B>File</B> object. The methods work the same; both exist to offer programming flexibility.</FONT></TD></TR>
<TR><TD COLSPAN=2 VALIGN=TOP><hr noshade size=1></TD></TR></TABLE><P>
</BLOCKQUOTE>
<H5>Accessing Existing Drives, Files, and Folders</H5>
<BLOCKQUOTE>
To gain access to an existing drive, file, or folder, use the appropriate "get" method of the <B>FileSystemObject</B> object:<P>

<UL>
<li><B>GetDrive</B>
<li><B>GetFolder</B>
<li><B>GetFile</B>
</UL>

To gain access to an existing file in VBScript:<P>
<BLOCKQUOTE><pre><font face="Courier New" size=3>Dim fso, f1
Set fso = CreateObject("Scripting.FileSystemObject")
Set f1 = fso.GetFile("c:\test.txt")
</font></pre></blockquote>

To do the same thing in JScript, use the following code:<P>

<BLOCKQUOTE><pre><font face="Courier New" size=3>var fso, f1;
fso = new ActiveXObject("Scripting.FileSystemObject");
f1 = fso.GetFile("c:\\test.txt");
</font></pre></blockquote>

Do not use the "get" methods for newly created objects, since the "create" functions already return a handle to that object. For example, if you create a new folder using the <B>CreateFolder</B> method, don't use the <B>GetFolder</B> method to access its properties, such as <B>Name</B>, <B>Path</B>, <B>Size</B>, and so forth. Just set a variable to the <B>CreateFolder</B> function to gain a handle to the newly created folder, then access its properties, methods, and events. To do this in VBScript, use the following code:<P>

<BLOCKQUOTE><pre><font face="Courier New" size=3>Sub CreateFolder
  Dim fso, fldr
  Set fso = CreateObject("Scripting.FileSystemObject")
  Set fldr = fso.CreateFolder("C:\MyTest")
  Response.Write "Created folder: " & fldr.Name
End Sub
</font></pre></blockquote>

To set a variable to the <B>CreateFolder</B> function in JScript, use this syntax:<P>

<BLOCKQUOTE><pre><font face="Courier New" size=3>function CreateFolder()
{
  var fso, fldr;
  fso = new ActiveXObject("Scripting.FileSystemObject");
  fldr = fso.CreateFolder("C:\\MyTest");
  Response.Write("Created folder: " + fldr.Name);
}
</font></pre></blockquote></blockquote>

<H5>Accessing the Object's Properties</H5>
<blockquote>
Once you have a handle to an object, you can access its properties. For example, to get the name of a particular folder, first create an instance of the object, then get a handle to it with the appropriate method (in this case, the <B>GetFolder</B> method, since the folder already exists).
<p>Use this code to get a handle to the <B>GetFolder</B> method in VBScript:<P>

<BLOCKQUOTE><pre><font face="Courier New" size=3>Set fldr = fso.GetFolder("c:\")
</font></pre></blockquote>
<p>To do the same thing in JScript, use the following code:<P>

<BLOCKQUOTE><pre><font face="Courier New" size=3>var fldr = fso.GetFolder("c:\\");
</font></pre></blockquote>

Now that you have a handle to a <B>Folder</B> object, you can check its <B>Name</B> property. Use the following code to check this in VBScript:<P>

<BLOCKQUOTE><pre><font face="Courier New" size=3>Response.Write "Folder name is: " & fldr.Name
</font></pre></blockquote>

To check a <B>Name</B> property in JScript, use this syntax:<P>

<BLOCKQUOTE><pre><font face="Courier New" size=3>Response.Write("Folder name is: " + fldr.Name);
</font></pre></blockquote>

To find out the last time a file was modified, use the following VBScript syntax:<P>

<BLOCKQUOTE><pre><font face="Courier New" size=3>Dim fso, f1
Set fso = CreateObject("Scripting.FileSystemObject")
' Get a File object to query.
Set f1 = fso.GetFile("c:\detlog.txt")  
' Print information.
Response.Write "File last modified: " & f1.DateLastModified 
</font></pre></blockquote>

To find out the same thing in JScript, use this code:<P>

<BLOCKQUOTE><pre><font face="Courier New" size=3>var fso, f1;
fso = new ActiveXObject("Scripting.FileSystemObject");
// Get a File object to query.
f1 = fso.GetFile("c:\\detlog.txt");  
// Print information.
Response.Write("File last modified: " + f1.DateLastModified); 
</font></pre></blockquote>
</blockquote>
<hr noshade size=1>
<!--COPYRIGHT BEGIN--><!--COPYRIGHT END--> 
</FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN"><HTML>
<HEAD><TITLE>CreateObject Function</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css">
<META NAME="MS-HKWD" CONTENT="objects">
<META NAME="MS-HKWD" CONTENT="CreateObject function">
<META NAME="MS-HKWD" CONTENT="object variable">
<META NAME="MS-HKWD" CONTENT="creating objects">
<META NAME="MS-HKWD" CONTENT="objects, creating">
<META NAME="MS-HKWD" CONTENT="variables, object">
<META NAME="MS-HKWD" CONTENT="creating OLE Automation objects">
<META NAME="MS-HKWD" CONTENT="OLE Automation objects, creating">
<META NAME="MS-HKWD" CONTENT="variables">
<META NAME="MS-HKWD" CONTENT="OLE Automation objects">
<META NAME="MS-HKWD" CONTENT="DCOM">
<META NAME="MS-HKWD" CONTENT="remote server instantiation">
<META NAME=MS-HAID CONTENT="vsfctCreateObject"> 
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="PRODUCT" CONTENT="Visual Basic Scripting Edition">
<META NAME="TECHNOLOGY" CONTENT="SCRIPTING">
<META NAME="CATEGORY" CONTENT="Language Reference">
<META NAME="Keywords" CONTENT="objects; CreateObject function; object variable; creating objects; objects, creating; variables, object; creating OLE Automation objects; OLE Automation objects, creating; variables; OLE Automation objects; DCOM; remote server instantiation">

<META NAME="Description" CONTENT="CreateObject Function"></HEAD>

<BODY BGCOLOR=FFFFFF LINK=#0033CC>

<!--TOOLBAR_START-->
<!--TOOLBAR_EXEMPT-->
<!--TOOLBAR_END-->
<FONT FACE="Verdana, Arial, Helvetica" SIZE=2>
<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH=100%><TR VALIGN=TOP><TD WIDTH=360>
<FONT SIZE=1 COLOR=#660033>Microsoft&#174; Visual Basic&#174; Scripting Edition</FONT><BR>
<FONT SIZE=5 COLOR=#660033><B>
CreateObject Function</B></FONT>

</TD>
<TD ALIGN=RIGHT>
<FONT SIZE=2>&nbsp;<A HREF="vbstoc.htm">Language&nbsp;Reference</A>&nbsp;<BR>
<A HREF="vbsversion.htm">Version&nbsp;2</A>&nbsp;<P></FONT>
</TD></TR>
</TABLE> 
<FONT SIZE=2><P>
<A HREF="vsfctCreateObjectC.htm">See Also</A></FONT>
<HR noshade SIZE=1>

<H5>Description</H5>
<BLOCKQUOTE>Creates and returns a reference to an <a href="glossary.htm#defOLEAutomationObject">Automation object</a>.</BLOCKQUOTE>

<H5>Syntax</H5>
<BLOCKQUOTE><b>CreateObject(</b><i>servername.typename</i> [<b>,</b> <I>location</I>]<b>)</b><P>
The <B>CreateObject</B> function syntax has these parts: <P>

<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>

<TR VALIGN=TOP BGCOLOR="#DDDDDD">
	<TD><FONT SIZE=2><b>Part</b></FONT></TD>
		<TD><FONT SIZE=2><b>Description</b></FONT></TD></TR>

<TR VALIGN=TOP>
	<TD><FONT SIZE=2><i>servername</i></FONT></TD>
		<TD><FONT SIZE=2>Required. The name of the application providing the object.</FONT></TD></TR>

<TR VALIGN=TOP>
	<TD><FONT SIZE=2><i>typename</i></FONT></TD><TD><FONT SIZE=2>Required.The type or class of the object to create.</FONT></TD></TR>

<TR VALIGN=TOP>
	<TD><FONT SIZE=2><i>location</i></FONT></TD><TD><FONT SIZE=2>Optional. The name of the network server where the object is to be created. This feature is available in version 5.1 or later.</FONT></TD></TR>
	
</TABLE></BLOCKQUOTE>

<H5>Remarks</H5>
<BLOCKQUOTE>Automation servers provide at least one type of object.  For example, a word-processing application may provide an application object, a document object, and a toolbar object.<P>

To create an Automation object, assign the object returned by <b>CreateObject</b> to an object variable:
<BLOCKQUOTE><PRE><FONT FACE="Courier New" SIZE=3>Dim ExcelSheet
Set ExcelSheet = <FONT COLOR="#FF0000">CreateObject(</FONT>"Excel<FONT COLOR="#FF0000">.</FONT>Sheet"<FONT COLOR="#FF0000">)</FONT>
</FONT></PRE></BLOCKQUOTE>
This code starts the application that creates the object (in this case, a Microsoft Excel spreadsheet). Once an object is created, refer to it in code using the object variable you defined. As shown in the following example, you can access properties and methods of the new object using the object variable, <FONT FACE="Courier New" SIZE=2>ExcelSheet</FONT>, and other Excel objects, including the Application object and the ActiveSheet.Cells collection:
<BLOCKQUOTE><PRE><FONT FACE="Courier New" SIZE=3>' Make Excel visible through the Application object.
ExcelSheet.Application.Visible = True
' Place some text in the first cell of the sheet.
ExcelSheet.ActiveSheet.Cells(1,1).Value = "This is column A, row 1"
' Save the sheet.
ExcelSheet.SaveAs "C:\DOCS\TEST.XLS"
' Close Excel with the Quit method on the Application object.
ExcelSheet.Application.Quit
' Release the object variable.
Set ExcelSheet = Nothing
</FONT></PRE></BLOCKQUOTE>

Creating an object on a remote server can only be accomplished when Internet security is turned off. You can create an object on a remote networked computer by passing the name of the computer to the <I>servername</I> argument of <B>CreateObject</B>. That name is the same as the machine name portion of a sharename. For a network share named "\\myserver\public", the <I>servername</I> is "myserver". In addition, you can specify <I>servername</I> using DNS format or an IP address.<P>

The following code returns the version number of an instance of Excel running on a remote network computer named "myserver":<P>

<BLOCKQUOTE><PRE><FONT FACE="Courier New" SIZE=3>Function GetVersion
  Dim XLApp
  Set XLApp = CreateObject("Excel.Application", "MyServer")
  GetVersion = XLApp.Version
End Function</FONT></PRE></BLOCKQUOTE>

An error occurs if the specified remote server does not exist or cannot be found.<P>
</BLOCKQUOTE>

<hr noshade size=1>

</FONT>
</BODY>
</HTML>


























































































<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css">
<TITLE>Working with Files</TITLE> 

<META NAME="MS-HKWD" CONTENT="FileSystemObject object">
<META NAME=MS-HAID CONTENT="sgWorkingWithFiles">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="PRODUCT" CONTENT="Scripting Library">
<META NAME="TECHNOLOGY" CONTENT="SCRIPTING">
<META NAME="CATEGORY" CONTENT="FileSystemObject">
<META NAME="Description" CONTENT="Working with Files">
<META NAME="Keywords" CONTENT="FileSystemObject object">

</HEAD>

<BODY BGCOLOR="#FFFFFF" LINK="#0033CC">
<!--TOOLBAR_START-->
<!--TOOLBAR_EXEMPT-->
<!--TOOLBAR_END-->
<FONT FACE="Verdana, ARIAL, HELVETICA" SIZE=2>
<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH=100%><TR VALIGN=TOP><TD WIDTH=360>
<FONT SIZE=1 COLOR="#660033">Microsoft&#174; Scripting Library - FileSystemObject</FONT><BR>
<FONT SIZE=5 COLOR="#660033"><B>Working with Files</B></FONT><br>

</TD>
<TD ALIGN=RIGHT>
<FONT SIZE=2>&nbsp;<A HREF="sgWorkingWithDrives.htm">Previous</A><br><A HREF="sgFSOSample.htm">Next</A><P></FONT>


</TD></TR>
</TABLE><p>

<hr noshade size=1>
<blockquote>

There are two major categories of file manipulation:<p>
<ul>
<li>Creating, adding, or removing data, and reading files
<li>Moving, copying, and deleting files
</ul>
</blockquote>

<h5>Creating Files</h5>
<blockquote>
There are three ways to create an empty text file (sometimes referred to as a "text stream").<p> The first way is to use the <b>CreateTextFile</b> method. The following example demonstrates how to create a text file using this method in VBScript:<p>

<BLOCKQUOTE><pre><font face="Courier New" size=3>Dim fso, f1
Set fso = CreateObject("Scripting.FileSystemObject")
Set f1 = fso.CreateTextFile("c:\testfile.txt", True)
</font></pre></BLOCKQUOTE>

To use this method in JScript, use this code:<p>

<BLOCKQUOTE><pre><font face="Courier New" size=3>var fso, f1;
fso = new ActiveXObject("Scripting.FileSystemObject");
f1 = fso.CreateTextFile("c:\\testfile.txt", true);
</font></pre></BLOCKQUOTE>

View this <A HREF="./sgFSOSample.htm#CreateTextFile">sample code</A> to see how the <B>CreateTextFile</B> method is used in <B>FileSystemObject</B>.<P>

The second way to create a text file is to use the <b>OpenTextFile</b> method of the <b>FileSystemObject</b> object with the <b>ForWriting</b> flag set. In VBScript, the code looks like this example: 

<BLOCKQUOTE><pre><font face="Courier New" size=3>Dim fso, ts
Const ForWriting = 2
Set fso = CreateObject("Scripting. FileSystemObject")
Set ts = fso.OpenTextFile("c:\test.txt", ForWriting, True)
</font></pre></BLOCKQUOTE>

To create a text file using this method in JScript, use this code:<p>

<BLOCKQUOTE><pre><font face="Courier New" size=3>var fso, ts;
var ForWriting= 2;
fso = new ActiveXObject("Scripting.FileSystemObject");
ts = fso.OpenTextFile("c:\\test.txt", ForWriting, true);
</font></pre></BLOCKQUOTE>

A third way to create a text file is to use the <b>OpenAsTextStream</b> method with the <b>ForWriting</b> flag set. For this method, use the following code in VBScript:<p>

<BLOCKQUOTE><pre><font face="Courier New" size=3>Dim fso, f1, ts
Const ForWriting = 2
Set fso = CreateObject("Scripting.FileSystemObject")
fso.CreateTextFile ("c:\test1.txt")
Set f1 = fso.GetFile("c:\test1.txt")
Set ts = f1.OpenAsTextStream(ForWriting, True)
</font></pre></BLOCKQUOTE>

In JScript, use the code in the following example: <p>
<BLOCKQUOTE><pre><font face="Courier New" size=3>var fso, f1, ts;
var ForWriting = 2;
fso = new ActiveXObject("Scripting.FileSystemObject");
fso.CreateTextFile ("c:\\test1.txt");
f1 = fso.GetFile("c:\\test1.txt");
ts = f1.OpenAsTextStream(ForWriting, true);
</font></pre></BLOCKQUOTE>

</blockquote>

<h5>Adding Data to the File</h5>
<blockquote>
Once the text file is created, add data to the file using the following three steps:<p>
<ol>
<li>Open the text file.
<li>Write the data.
<li>Close the file.
</ol>

To open an existing file, use either the <b>OpenTextFile</b> method of the <b>FileSystemObject</b> object or the <b>OpenAsTextStream</b> method of the <b>File</b> object.<p>

To write data to the open text file, use the <b>Write</b>, <b>WriteLine</b>, or <B>WriteBlankLines</B> methods of the <b>TextStream</b> object, according to the tasks outlined in the following table.<P>

<table width= "87%" border=1 cellpadding=5 cellspacing=0>
<tr valign=top bgcolor="#dddddd"><td><font size=2><b>Task</b></font></td><td><font size=2><b>Method</b></font></td></tr>
<tr VALIGN=TOP>
  <td><FONT SIZE=2>Write data to an open text file without a trailing newline character.</font></td>
    <td><FONT SIZE=2><B>Write</B></font></td></tr>
<tr VALIGN=TOP>
  <td><FONT SIZE=2>Write data to an open text file with a trailing newline character.</font></td>
    <td><FONT SIZE=2><B>WriteLine</B></font></td></tr>
<tr VALIGN=TOP>
  <td><FONT SIZE=2>Write one or more blank lines to an open text file.</font></td>
    <td><FONT SIZE=2><B>WriteBlankLines</B></font></td></tr>
</table><P>

View this <A HREF="./sgFSOSample.htm#WriteToFile">sample code</A> to see how the <B>Write</B>, <B>WriteLine</B>, and <B>WriteBlankLines</B> methods are used in <B>FileSystemObject</B>.<P>

To close an open file, use the <b>Close</b> method of the <b>TextStream</b> object.<p>

View this <A HREF="./sgFSOSample.htm#Close">sample code</A> to see how the <B>Close</B> method is used in <B>FileSystemObject</B>.<p>

<TABLE CELLSPACING=0 CELLPADDING=0 BORDER=0 WIDTH=87%><TR><TD COLSPAN=2 VALIGN=BOTTOM><hr noshade size=1></TD></TR><TR>
<TD VALIGN=TOP><FONT SIZE=2><b>Note</b>&nbsp;&nbsp;The newline character contains a character or characters (depending on the operating system) to advance the cursor to the beginning of the next line (carriage return/line feed). Be aware that the end of some strings may already have such nonprinting characters.</FONT></TD></TR>
<TR><TD COLSPAN=2 VALIGN=TOP><hr noshade size=1></TD></TR></TABLE><P>
The following VBScript example demonstrates how to open a file, use all three write methods to add data to the file, and then close the file:<p>

<BLOCKQUOTE><pre><font face="Courier New" size=3>Sub CreateFile()
  Dim fso, tf
  Set fso = CreateObject("Scripting.FileSystemObject")
  Set tf = fso.CreateTextFile("c:\testfile.txt", True)
  ' Write a line with a newline character.
  tf.WriteLine("Testing 1, 2, 3.") 
  ' Write three newline characters to the file.      
  tf.WriteBlankLines(3) 
  ' Write a line.
  tf.Write ("This is a test.") 
  tf.Close
End Sub</font></pre></BLOCKQUOTE>

This example demonstrates how to use the three methods in JScript:<p>

<BLOCKQUOTE><pre><font face="Courier New" size=3>function CreateFile()
{
  var fso, tf;
  fso = new ActiveXObject("Scripting.FileSystemObject");
  tf = fso.CreateTextFile("c:\\testfile.txt", true);
  // Write a line with a newline character.
  tf.WriteLine("Testing 1, 2, 3.") ;
  // Write three newline characters to the file.      
  tf.WriteBlankLines(3) ;
  // Write a line.
  tf.Write ("This is a test.");
  tf.Close();
}</font></pre></BLOCKQUOTE>
</blockquote>


<h5>Reading Files</h5>
<blockquote>

To read data from a text file, use the <B>Read</B>, <B>ReadLine</B>, or <B>ReadAll</B> method of the <B>TextStream</B> object. The following table describes which method to use for various tasks.<p>
<table width= "87%" border=1 cellpadding=5 cellspacing=0>
<tr valign=top bgcolor="#dddddd"><td><font size=2><b>Task</b></font></td><td><font size=2><b>Method</b></font></td></tr>
<tr VALIGN=TOP>
  <td><FONT SIZE=2>Read a specified number of characters from a file.</font></td>
    <td><FONT SIZE=2><B>Read</B></font></td></tr>
<tr VALIGN=TOP>
  <td><FONT SIZE=2>Read an entire line (up to, but not including, the newline character).</font></td>
    <td><FONT SIZE=2><B>ReadLine</B></font></td></tr>
<tr VALIGN=TOP>
  <td><FONT SIZE=2>Read the entire contents of a text file.</font></td>
    <td><FONT SIZE=2><B>ReadAll</B></font></td></tr>
</table><P>

View this <A HREF="./sgFSOSample.htm#ReadFromFile">sample code</A> to see how the <B>ReadAll</B> and <B>ReadLine</B> methods are used in <B>FileSystemObject</B>.<P>

If you use the <b>Read</b> or <b>ReadLine</b> method and want to skip to a particular portion of data, use the <b>Skip</b> or <b>SkipLine</b> method. The resulting text of the read methods is stored in a string which can be displayed in a control, parsed by string functions (such as <b>Left</b>, <b>Right</b>, and <b>Mid</b>), concatenated, and so forth.<p>

The following VBScript example demonstrates how to open a file, write to it, and then read from it:<P>

<BLOCKQUOTE><pre><font face="Courier New" size=3>Sub ReadFiles
  Dim fso, f1, ts, s
  Const ForReading = 1
  Set fso = CreateObject("Scripting.FileSystemObject")
  Set f1 = fso.CreateTextFile("c:\testfile.txt", True)
  ' Write a line.
  Response.Write "Writing file &lt;br&gt;"
  f1.WriteLine "Hello World"
  f1.WriteBlankLines(1)
  f1.Close
  ' Read the contents of the file.
  Response.Write "Reading file &lt;br&gt;"
  Set ts = fso.OpenTextFile("c:\testfile.txt", ForReading)
  s = ts.ReadLine
  Response.Write "File contents = '" & s & "'"
  ts.Close
End Sub
</font></pre></BLOCKQUOTE>

This code demonstrates the same thing in JScript:<P>

<BLOCKQUOTE><pre><font face="Courier New" size=3>function ReadFiles()
{
  var fso, f1, ts, s;
  var ForReading = 1;
  fso = new ActiveXObject("Scripting.FileSystemObject");
  f1 = fso.CreateTextFile("c:\\testfile.txt", true);
  // Write a line.
  Response.Write("Writing file &lt;br&gt;");
  f1.WriteLine("Hello World");
  f1.WriteBlankLines(1);
  f1.Close();
  // Read the contents of the file.
  Response.Write("Reading file &lt;br&gt;");
  ts = fso.OpenTextFile("c:\\testfile.txt", ForReading);
  s = ts.ReadLine();
  Response.Write("File contents = '" + s + "'");
  ts.Close();
}
</font></pre></BLOCKQUOTE>

</blockquote>
<h5>Moving, Copying, and Deleting Files</h5>
<blockquote>
The FSO object model has two methods each for moving, copying, and deleting files, as described in the following table.<P>

<table width= "87%" border=1 cellpadding=5 cellspacing=0>
<tr valign=top bgcolor="#dddddd"><td><font size=2><b>Task</b></font></td><td><font size=2><b>Method</b></font></td></tr>
<tr VALIGN=TOP>
  <td><FONT SIZE=2>Move a file</font></td>
    <td><FONT SIZE=2><B>File.Move</B> or <B>FileSystemObject.MoveFile</B></font></td></tr>
<tr VALIGN=TOP>
  <td><FONT SIZE=2>Copy a file</font></td>
    <td><FONT SIZE=2><B>File.Copy</B> or <B>FileSystemObject.CopyFile</B></font></td></tr>
<tr VALIGN=TOP>
  <td><FONT SIZE=2>Delete a file</font></td>
    <td><FONT SIZE=2><B>File.Delete</B> or <B>FileSystemObject.DeleteFile</B></font></td></tr>
</table><P>

View this <A HREF="./sgFSOSample.htm#DeleteFile">sample code</A> to see two ways to delete a file in <B>FileSystemObject</B>.<P>

The following VBScript example creates a text file in the root directory of drive C, writes some information to it, moves it to a directory called \tmp, makes a copy of it in a directory called \temp, then deletes the copies from both directories.<P>

To run the following example, create directories named \tmp and \temp in the root directory of drive C:<P>

<BLOCKQUOTE><pre><font face="Courier New" size=3>Sub ManipFiles
  Dim fso, f1, f2, s
  Set fso = CreateObject("Scripting.FileSystemObject")
  Set f1 = fso.CreateTextFile("c:\testfile.txt", True)
  Response.Write "Writing file &lt;br&gt;"
  ' Write a line.
  f1.Write ("This is a test.")
  ' Close the file to writing.
  f1.Close
  Response.Write "Moving file to c:\tmp &lt;br&gt;"
  ' Get a handle to the file in root of C:\.
  Set f2 = fso.GetFile("c:\testfile.txt")
  ' Move the file to \tmp directory.
  f2.Move ("c:\tmp\testfile.txt")
  Response.Write "Copying file to c:\temp &lt;br&gt;"
  ' Copy the file to \temp.
  f2.Copy ("c:\temp\testfile.txt")
  Response.Write "Deleting files &lt;br&gt;"
  ' Get handles to files' current location.
  Set f2 = fso.GetFile("c:\tmp\testfile.txt")
  Set f3 = fso.GetFile("c:\temp\testfile.txt")
  ' Delete the files.
  f2.Delete
  f3.Delete
  Response.Write "All done!"
End Sub
</font></pre></BLOCKQUOTE>

This code shows the same thing in JScript:<P>

<BLOCKQUOTE><pre><font face="Courier New" size=3>function ManipFiles()
{
  var fso, f1, f2, s;
  fso = new ActiveXObject("Scripting.FileSystemObject");
  f1 = fso.CreateTextFile("c:\\testfile.txt", true);
  Response.Write("Writing file &lt;br&gt;");
  // Write a line.
  f1.Write("This is a test.");
  // Close the file to writing.
  f1.Close();
  Response.Write("Moving file to c:\\tmp &lt;br&gt;");
  // Get a handle to the file in root of C:\.
  f2 = fso.GetFile("c:\\testfile.txt");
  // Move the file to \tmp directory.
  f2.Move ("c:\\tmp\\testfile.txt");
  Response.Write("Copying file to c:\\temp &lt;br&gt;");
  // Copy the file to \temp.
  f2.Copy ("c:\\temp\\testfile.txt");
  Response.Write("Deleting files &lt;br&gt;");
  // Get handles to files' current location.
  f2 = fso.GetFile("c:\\tmp\\testfile.txt");
  f3 = fso.GetFile("c:\\temp\\testfile.txt");
  // Delete the files.
  f2.Delete();
  f3.Delete();
  Response.Write("All done!");
}
</font></pre></BLOCKQUOTE>
</blockquote>

<hr noshade size=1>
<!--COPYRIGHT BEGIN--><!--COPYRIGHT END-->
</FONT>
</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Update and CancelUpdate Methods Example (VC++)</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/samples.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannerparthead td" nowrap>ADO 2.5 Samples</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="mdmthupdatexvc"></A>Update and CancelUpdate Methods Example (VC++)</H1>

<P>This example demonstrates the <A HREF="mdmthupdate.htm">Update</A> method in conjunction with the <A HREF="mdmthcancelupdate.htm">CancelUpdate</A> method.</P>

<PRE class="code">// BeginUpdateCpp
#import "C:\Program Files\Common Files\System\ADO\msado15.dll" \
    no_namespace rename("EOF", "EndOfFile")

#include &lt;stdio.h&gt;
#include &lt;ole2.h&gt;
#include &lt;malloc.h&gt;
#include &lt;conio.h&gt;
#include "UpdateX.h"

// Function Declartion.
inline void TESTHR(HRESULT x) {if FAILED(x) _com_issue_error(x);};
void UpdateX(void);
void UpdateX2(void);
void PrintProviderError(_ConnectionPtr pConnection);
void PrintComError(_com_error &amp;e);

void main()
{
    if(FAILED(::CoInitialize(NULL)))
        return;

     UpdateX();

     //Wait here for user to see the output..
     printf("\nPress any key to continue...");
     getch();

     //Clear the screen for the next display   
     system("cls");

     UpdateX2();

     ::CoUninitialize();
}

//////////////////////////////////////////////////////////
//                                                      //
//      UpdateX Function                                //
//                                                      //
//////////////////////////////////////////////////////////
void UpdateX(void)
{
    HRESULT hr = S_OK;

    // Define ADO object pointers.
    // Initialize pointers on define.
    // These are in the ADODB::  namespace.
    _RecordsetPtr pRstEmployees  = NULL;

    // Define string variables.
    _bstr_t strCnn("Provider='sqloledb';Data Source='MySqlServer';"
            "Initial Catalog='pubs';Integrated Security='SSPI';");

    IADORecordBinding   *picRs   = NULL;  // Interface Pointer declared
    CEmployeeRs emprs;             // C++ Class object.

    try
    {
        // Open recordset with names from Employee table.
        TESTHR(pRstEmployees.CreateInstance(__uuidof(Recordset)));
        pRstEmployees-&gt;CursorType = adOpenKeyset;
        pRstEmployees-&gt;LockType = adLockOptimistic;
        pRstEmployees-&gt;Open("SELECT fname, lname FROM Employee "
            "ORDER BY lname",strCnn,adOpenKeyset,adLockOptimistic,
            adCmdText);

        // Store original data.
        _bstr_t strOldFirst = pRstEmployees-&gt;Fields-&gt;
            GetItem("fname")-&gt;Value;
        _bstr_t strOldLast  = pRstEmployees-&gt;Fields-&gt;
            GetItem("lname")-&gt;Value;

        //Change data in edit buffer.
        pRstEmployees-&gt;Fields-&gt;GetItem("fname")-&gt;Value = 
            (_bstr_t)("Linda");
        pRstEmployees-&gt;Fields-&gt;GetItem("lname")-&gt;Value = 
            (_bstr_t)("Kobara");

        // Show contents of buffer and get user input.
        printf("\n\nEdit in progress:\n\n");

        printf("Original data =  %s %s \n",
            (LPSTR)strOldFirst,(LPSTR)strOldLast);

        printf("Data in buffer =  %s %s",
            (LPSTR)(_bstr_t) pRstEmployees-&gt;Fields-&gt;
            GetItem("fname")-&gt;Value,\
            (LPSTR) (_bstr_t) pRstEmployees-&gt;Fields-&gt;
            GetItem("lname")-&gt;Value);

        // Ask if the User wants to Update
        printf("\n\nUse Update to replace the original data with the"
               " buffered data in the Recordset? (y/n): ");
        char chKey = getch();

        if(toupper(chKey) == 'Y')
            pRstEmployees-&gt;Update();
        else 
            pRstEmployees-&gt;CancelUpdate();

        //Open an IADORecordBinding interface pointer which 
        //we'll use for binding Recordset to a class.
        TESTHR(pRstEmployees-&gt;QueryInterface(
            __uuidof(IADORecordBinding),(LPVOID*)&amp;picRs));

        //Bind the Recordset to a C++ Class here.
        TESTHR(picRs-&gt;BindToRecordset(&amp;emprs));

        pRstEmployees-&gt;MoveFirst();

        // Show the resulting data.
        printf("\nData in recordset =  %s %s", emprs.le_fnameStatus == 
            adFldOK ? emprs.m_sze_fname : "&lt;NULL&gt;",
            emprs.le_lnameStatus == adFldOK ? 
            emprs.m_sze_lname : "&lt;NULL&gt;");

        // Restore original data because this is a demonstration.
        if ((strcmp((char *)strOldFirst,emprs.m_sze_fname) &amp;&amp; 
             strcmp((char *)strOldLast,emprs.m_sze_lname)))
        {
            pRstEmployees-&gt;Fields-&gt;GetItem("fname")-&gt;Value = strOldFirst;
            pRstEmployees-&gt;Fields-&gt;GetItem("lname")-&gt;Value = strOldLast;
            pRstEmployees-&gt;Update();
        } 
    }
    catch(_com_error &amp;e)
    {    
       // Notify the user of errors if any.
       // Pass a connection pointer accessed from the Recordset.
        _variant_t vtConnect = pRstEmployees-&gt;GetActiveConnection();

        // GetActiveConnection returns connect string if connection
        // is not open, else returns Connection object.
        switch(vtConnect.vt)
        {
            case VT_BSTR:
                PrintComError(e);
                break;
            case VT_DISPATCH:
                PrintProviderError(vtConnect);
                break;
            default:
                printf("Errors occured.");
                break;
        }
    }
    
    // Clean up objects before exit.
    //Release the IADORecordset Interface here   
    if (picRs)
        picRs-&gt;Release();
        
    if (pRstEmployees)
        if (pRstEmployees-&gt;State == adStateOpen)
            pRstEmployees-&gt;Close();
}

// The next example demonstrates the Update method 
// in conjunction with the AddNew method.

//////////////////////////////////////////////////////////
//                                                      //
//           UpdateX2 Function                          //
//                                                      //
//////////////////////////////////////////////////////////
void UpdateX2(void)
{
    HRESULT hr = S_OK;

    // Define ADO object pointers.
    // Initialize pointers on define.
    // These are in the ADODB::  namespace.
    _ConnectionPtr pConnection        = NULL;
    _RecordsetPtr pRstEmployees = NULL;

    // Define string variables.
    _bstr_t strCnn("Provider='sqloledb';Data Source='MySqlServer';"
            "Initial Catalog='pubs';Integrated Security='SSPI';");

    IADORecordBinding   *picRs  = NULL;  // Interface Pointer declared
    CEmployeeRs1 emprs;            // C++ Class object.

    try 
    {
        // Open a connection.   
        TESTHR(pConnection.CreateInstance(__uuidof(Connection)));
         pConnection-&gt;Open(strCnn,"","",NULL);

        // Open recordset with data from Employee table.
        TESTHR(pRstEmployees.CreateInstance(__uuidof(Recordset)));
        pRstEmployees-&gt;CursorType = adOpenKeyset;
        pRstEmployees-&gt;LockType = adLockOptimistic;
        pRstEmployees-&gt;Open("employee",
            _variant_t((IDispatch*)pConnection,true),
            adOpenKeyset, adLockOptimistic,adCmdTable);

        pRstEmployees-&gt;AddNew();
        _bstr_t strEmpID = "B-S55555M";
        pRstEmployees-&gt;Fields-&gt;GetItem("emp_id")-&gt;Value = strEmpID;
        pRstEmployees-&gt;Fields-&gt;GetItem("fname")-&gt;Value = 
            (_bstr_t) ("Bill");
        pRstEmployees-&gt;Fields-&gt;GetItem("lname")-&gt;Value = 
            (_bstr_t) ("Sornsin");

        // Show contents of buffer and get user input.
        printf("\n\nAddNew in progress:\n\n");

        printf("Data in buffer = %s ,  %s %s",
            (LPSTR) (_bstr_t) pRstEmployees-&gt;Fields-&gt;
            GetItem("emp_id")-&gt;Value,
            (LPSTR) (_bstr_t) pRstEmployees-&gt;Fields-&gt;
            GetItem("fname")-&gt;Value,
            (LPSTR) (_bstr_t) pRstEmployees-&gt;Fields-&gt;
            GetItem("lname")-&gt;Value);

        printf("\n\nUse Update to save buffer to recordset?(y/n):");
        char chKey = getch();

        if(toupper(chKey) == 'Y')
        {
            pRstEmployees-&gt;Update();

            //Open an IADORecordBinding interface pointer which 
            //we'll use for binding Recordset to a class.
            TESTHR(pRstEmployees-&gt;QueryInterface(
                __uuidof(IADORecordBinding),(LPVOID*)&amp;picRs));

            //Bind the Recordset to a C++ Class here    
            TESTHR(picRs-&gt;BindToRecordset(&amp;emprs));

            // Go to the new record and show the resulting data.
            printf ("\n\nData in recordset =  %s ,  %s %s",
                emprs.le_empidStatus == adFldOK ? 
                emprs.m_sze_empid : "&lt;NULL&gt;",
                emprs.le_fnameStatus == adFldOK ? 
                emprs.m_sze_fname : "&lt;NULL&gt;",
                emprs.le_lnameStatus == adFldOK ? 
                emprs.m_sze_lname : "&lt;NULL&gt;");
        }
        else
        {
            pRstEmployees-&gt;CancelUpdate();
            printf("\n\nNo new record added.\n");
        }
        // Delete new data because this is a demonstration.
        _bstr_t strSQLDelete("DELETE FROM employee WHERE emp_id = '" + 
            strEmpID + "'");
        pConnection-&gt;Execute(strSQLDelete ,NULL,adExecuteNoRecords);
    }

    catch(_com_error &amp;e)
    {
        // Notify the user of errors if any.
        // Pass a connection pointer accessed from the Connection.
        PrintProviderError(pConnection);
        PrintComError(e);
    }
    
    // Clean up objects before exit.
    //Release the IADORecordset Interface here   
    if (picRs)
        picRs-&gt;Release();
        
    if (pRstEmployees)
        if (pRstEmployees-&gt;State == adStateOpen)
            pRstEmployees-&gt;Close();
    if (pConnection)
        if (pConnection-&gt;State == adStateOpen)
            pConnection-&gt;Close();
}

//////////////////////////////////////////////////////////
//                                                      //
//       PrintProviderError Function                    //
//                                                      //
//////////////////////////////////////////////////////////
void PrintProviderError(_ConnectionPtr pConnection)
{
    // Print Provider Errors from Connection object.
    // pErr is a record object in the Connection's Error collection.
    ErrorPtr    pErr  = NULL;

    if( (pConnection-&gt;Errors-&gt;Count) &gt; 0)
    {
        long nCount = pConnection-&gt;Errors-&gt;Count;
        // Collection ranges from 0 to nCount -1.
        for(long i = 0; i &lt; nCount; i++)
        {
            pErr = pConnection-&gt;Errors-&gt;GetItem(i);
            printf("Error number: %x\t%s\n", pErr-&gt;Number, 
                (LPCSTR) pErr-&gt;Description);
        }
    }
}

//////////////////////////////////////////////////////////
//                                                      //
//      PrintComError Function                          //
//                                                      //
//////////////////////////////////////////////////////////
void PrintComError(_com_error &amp;e)
{

    _bstr_t bstrSource(e.Source());
    _bstr_t bstrDescription(e.Description());
        
    // Print Com errors.  
    printf("Error\n");
    printf("\tCode = %08lx\n", e.Error());
    printf("\tCode meaning = %s\n", e.ErrorMessage());
    printf("\tSource = %s\n", (LPCSTR) bstrSource);
    printf("\tDescription = %s\n", (LPCSTR) bstrDescription);
}
// EndUpdateCpp
</PRE>

<P class="label"><B>UpdateX.h</B></P>

<PRE class="code">// BeginUpdateH
#include "icrsint.h"

//This Class extracts only fname,lname from employee table.
class CEmployeeRs : public CADORecordBinding
{
BEGIN_ADO_BINDING(CEmployeeRs)
    // fname is the 1st field in the recordset    
    ADO_VARIABLE_LENGTH_ENTRY2(1, adVarChar, m_sze_fname, 
         sizeof(m_sze_fname), le_fnameStatus, FALSE)
    // lname is the 2nd field in the recordset.
    ADO_VARIABLE_LENGTH_ENTRY2(2, adVarChar, m_sze_lname, 
         sizeof(m_sze_lname), le_lnameStatus, FALSE)   
 
END_ADO_BINDING()

public:
   CHAR   m_sze_lname[31];
   ULONG  le_lnameStatus;
   CHAR   m_sze_fname[21];
   ULONG  le_fnameStatus;
};

//This Class extracts only empid,fname,lname,from employee table.
class CEmployeeRs1 : public CADORecordBinding
{
BEGIN_ADO_BINDING(CEmployeeRs1)
    // emp_id is the 1st field in the table.    
    ADO_VARIABLE_LENGTH_ENTRY2(1, adVarChar, m_sze_empid, 
        sizeof(m_sze_empid), le_empidStatus, FALSE)
    // fname is the 2nd field in the table.
   ADO_VARIABLE_LENGTH_ENTRY2(2, adVarChar, m_sze_fname, 
         sizeof(m_sze_fname), le_fnameStatus, FALSE)
    // lname is the 4rt field in the table.
   ADO_VARIABLE_LENGTH_ENTRY2(4, adVarChar, m_sze_lname, 
         sizeof(m_sze_lname), le_lnameStatus, FALSE)   
   
END_ADO_BINDING()

public:
   CHAR   m_sze_empid[10];
   ULONG  le_empidStatus;
   CHAR   m_sze_lname[31];
   ULONG  le_lnameStatus;
   CHAR   m_sze_fname[21];
   ULONG  le_fnameStatus;   
};
// EndUpdateH
</PRE>

<H4 class="dtH4">See Also</H4>

<P><A HREF="mdmthcancelupdate.htm">CancelUpdate Method</A> | <A HREF="mdmthupdate.htm">Update Method</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
<P align="center"><A HREF="ado_sdk_copyright_and_trademarks.htm">&copy; 1998-2003 Microsoft Corporation. All rights reserved.</A></P>
</BODY>
</HTML>

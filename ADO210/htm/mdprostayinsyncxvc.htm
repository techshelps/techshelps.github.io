<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>StayInSync Property Example (VC++)</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/samples.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannerparthead td" nowrap>ADO 2.5 Samples</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="mdprostayinsyncxvc"></A>StayInSync Property Example (VC++)</H1>

<P>This example demonstrates how the <A HREF="mdprostayinsync.htm">StayInSync</A> property facilitates accessing rows in a hierarchical <A HREF="mdobjodbrec.htm">Recordset</A>.</P>

<P>The outer loop displays each author's first and last name, state, and identification. The appended <B>Recordset</B> for each row is retrieved from the <A HREF="mdcolfields.htm">Fields</A> collection and automatically assigned to <B>rstTitleAuthor</B> by the <B>StayInSync</B> property whenever the parent <B>Recordset</B> moves to a new row. The inner loop displays four fields from each row in the appended recordset.</P>

<PRE class="code">// BeginStayInSyncCpp
#import "C:\Program Files\Common Files\System\ADO\msado15.dll" \
    no_namespace rename("EOF", "EndOfFile")

#include &lt;ole2.h&gt;
#include &lt;stdio.h&gt;
#include &lt;conio.h&gt;

// Function declarations
inline void TESTHR(HRESULT x) {if FAILED(x) _com_issue_error(x);};
void StayInSyncX(void);
void PrintProviderError(_ConnectionPtr pConnection);
void PrintComError(_com_error &amp;e);

//////////////////////////////////////////////////////////
//                                                      //
//        Main Function                                 //
//                                                      //
//////////////////////////////////////////////////////////
void main()
{
    if(FAILED(::CoInitialize(NULL)))
        return;

    StayInSyncX();

    ::CoUninitialize();
}

//////////////////////////////////////////////////////////
//                                                      //
//       StayInSyncX Function                           //
//                                                      //
//////////////////////////////////////////////////////////
void StayInSyncX(void) 
{
    HRESULT  hr = S_OK;

    // Define string variables.
    _bstr_t strCnn("Provider='MSDataShape';"
        "Data Provider='sqloledb';Data Source='MySqlServer';"
        "Initial Catalog='pubs';Integrated Security='SSPI';");


    // Define ADO object pointers.
    // Initialize pointers on define.
    // These are in the ADODB::  namespace.
    _ConnectionPtr  pConnection      = NULL;
    _RecordsetPtr  pRst      = NULL;
    _RecordsetPtr  pRstTitleAuthor    = NULL;

    try
    {
        TESTHR(pRstTitleAuthor.CreateInstance(__uuidof(Recordset)));

        TESTHR(pConnection.CreateInstance(__uuidof(Connection)));

        TESTHR(pRst.CreateInstance(__uuidof(Recordset)));

        // Open connection.
        pConnection-&gt;Open (strCnn, "", "", adConnectUnspecified);
        pRst-&gt;PutStayInSync(true);

        // Open recordset with names from Author &amp; titleauthor table.
        pRst-&gt;Open("SHAPE  {select * from authors} " 
              "APPEND ({select * from titleauthor}"
              "RELATE au_id TO au_id) AS chapTitleAuthor",
              _variant_t((IDispatch*)pConnection,true), 
            adOpenStatic, adLockReadOnly, adCmdText);

        pRstTitleAuthor = pRst-&gt;GetFields()-&gt;GetItem("chapTitleAuthor")-&gt;
            Value;
        int intLineCnt=0;
        while(!(pRst-&gt;EndOfFile))
        {    
            printf("\n%s  %s  %s    %s\n", (LPCSTR)(_bstr_t)pRst-&gt;
               Fields-&gt;GetItem("au_fname")-&gt;Value,
               (LPCSTR)(_bstr_t)pRst-&gt;Fields-&gt;GetItem("au_lname")-&gt;Value,
               (LPCSTR)(_bstr_t)pRst-&gt;Fields-&gt;GetItem("state")-&gt;Value, 
               (LPCSTR)(_bstr_t)pRst-&gt;Fields-&gt;GetItem("au_id")-&gt;Value);
            intLineCnt++;

            if (intLineCnt%15 == 0)
            {
                printf("\nPress any key to continue...\n");
                getch();
            }

            _variant_t vIndex;
            while(!(pRstTitleAuthor-&gt;EndOfFile))
            {
                vIndex = (short) 0;
                printf("%s    ",(LPCSTR)(_bstr_t)pRstTitleAuthor-&gt;
                    Fields-&gt;Item[&amp;vIndex]-&gt;Value);
                vIndex = (short) 1;
                printf("%s    ",(LPCSTR)(_bstr_t)pRstTitleAuthor-&gt;
                    Fields-&gt;Item[&amp;vIndex]-&gt;Value);
                vIndex = (short) 2;
                printf("%s    ",(LPCSTR)(_bstr_t)pRstTitleAuthor-&gt;
                    Fields-&gt;Item[&amp;vIndex]-&gt;Value);
                vIndex = (short) 3;
                printf("%s\n",(LPCSTR)(_bstr_t)pRstTitleAuthor-&gt;
                    Fields-&gt;Item[&amp;vIndex]-&gt;Value);
                intLineCnt++;

                if (intLineCnt%15 == 0)
                {
                    printf("\nPress any key to continue...\n");
                    getch();
                }
                pRstTitleAuthor-&gt;MoveNext();
            }
            pRst-&gt;MoveNext();
        }
    }
    catch(_com_error &amp;e)
    {
        // Notify the user of errors if any.
        // Pass a connection pointer accessed from the Recordset.
        PrintProviderError(pConnection);
        PrintComError(e);   
    }
        
    // Clean up objects before exit.
    if (pRst)
        if (pRst-&gt;State == adStateOpen)
            pRst-&gt;Close();
    if (pConnection)
        if (pConnection-&gt;State == adStateOpen)
            pConnection-&gt;Close();
}

//////////////////////////////////////////////////////////
//                                                      //
//        PrintProviderError Function                   //
//                                                      //
//////////////////////////////////////////////////////////
void PrintProviderError(_ConnectionPtr pConnection)
{
    // Print Provider Errors from Connection object.
    // pErr is a record object in the Connection's Error collection.
    ErrorPtr    pErr  = NULL;

    if( (pConnection-&gt;Errors-&gt;Count) &gt; 0)
    {
        long nCount = pConnection-&gt;Errors-&gt;Count;
        // Collection ranges from 0 to nCount -1.
        for(long i = 0; i &lt; nCount; i++)
        {
            pErr = pConnection-&gt;Errors-&gt;GetItem(i);
            printf("Error number: %x\t%s\n", pErr-&gt;Number, 
                (LPCSTR) pErr-&gt;Description);
        }
    }
}

//////////////////////////////////////////////////////////
//                                                      //
//     PrintComError Function                           //
//                                                      //
//////////////////////////////////////////////////////////
void PrintComError(_com_error &amp;e)
{

    _bstr_t bstrSource(e.Source());
    _bstr_t bstrDescription(e.Description());
    
    // Print Com errors.  
    printf("Error\n");
    printf("\tCode = %08lx\n", e.Error());
    printf("\tCode meaning = %s\n", e.ErrorMessage());
    printf("\tSource = %s\n", (LPCSTR) bstrSource);
    printf("\tDescription = %s\n", (LPCSTR) bstrDescription);
   
}
// EndStayInSyncCpp
</PRE>

<H4 class="dtH4">See Also</H4>

<P><A HREF="mdcolfields.htm">Fields Collection</A> | <A HREF="mdobjodbrec.htm">Recordset Object</A> | <A HREF="mdprostayinsync.htm">StayInSync Property</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
<P align="center"><A HREF="ado_sdk_copyright_and_trademarks.htm">&copy; 1998-2003 Microsoft Corporation. All rights reserved.</A></P>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>OriginalValue and UnderlyingValue Properties Example (VC++)</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/samples.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannerparthead td" nowrap>ADO 2.5 Samples</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="mdprooriginalvaluexvc"></A>OriginalValue and UnderlyingValue Properties Example (VC++)</H1>

<P>This example demonstrates the <A HREF="mdprooriginalvalue.htm">OriginalValue</A> and <A HREF="mdprounderlyingvalue.htm">UnderlyingValue</A> properties by displaying a message if a record's underlying data has changed during a <A HREF="mdobjodbrec.htm">Recordset</A> batch update.</P>

<PRE class="code">// BeginOriginalValueCpp
#import "c:\Program Files\Common Files\System\ADO\msado15.dll" \
    no_namespace rename("EOF", "EndOfFile")

#include &lt;ole2.h&gt;
#include &lt;stdio.h&gt;
#include &lt;conio.h&gt;
#include "OriginalValueX.h"

// Function declarations
inline void TESTHR(HRESULT x) {if FAILED(x) _com_issue_error(x);};
void OriginalValueX(void);
void PrintProviderError(_ConnectionPtr pConnection);
void PrintComError(_com_error &amp;e);

///////////////////////////////////////////////////////////
//                                                       //
//      Main Function                                    //
//                                                       //
///////////////////////////////////////////////////////////

void main()
{
    if(FAILED(::CoInitialize(NULL)))
        return;

   OriginalValueX();

    ::CoUninitialize();
}

///////////////////////////////////////////////////////////
//                                                       //
//            OriginalValueX Function                    //
//                                                       //
///////////////////////////////////////////////////////////

void OriginalValueX(void) 
{
    // Define ADO object pointers.
    // Initialize pointers on define.
    // These are in the ADODB::  namespace.
    _ConnectionPtr   pConnection    = NULL;
     FieldPtr      pFldType   = NULL;
    _RecordsetPtr   pRstTitles   = NULL;

    // Define string variables.
    _bstr_t strSQLChange("UPDATE Titles SET Type = "
            "'sociology' WHERE Type = 'psychology'");
    _bstr_t strSQLRestore("UPDATE Titles SET Type = "
            "'psychology' WHERE Type = 'sociology'");

    // Define Other Variables
    HRESULT    hr = S_OK;
    IADORecordBinding   *picRs  = NULL;  //Interface Pointer declared
    CTitleRs titlers;        // C++ Class object

    try 
    {
        _bstr_t strCnn("Provider='sqloledb';Data Source='MySqlServer';"
            "Initial Catalog='pubs';Integrated Security='SSPI';");
        
        // Open connection.
        TESTHR(pConnection.CreateInstance(__uuidof(Connection)));
        pConnection-&gt;Open (strCnn, "", "", adConnectUnspecified);
        
        // Open Recordset for batch update.
        TESTHR(pRstTitles.CreateInstance(__uuidof(Recordset)));
        pRstTitles-&gt;PutActiveConnection(
            _variant_t((IDispatch *)pConnection,true));
        pRstTitles-&gt;CursorType = adOpenKeyset;
        pRstTitles-&gt;LockType = adLockBatchOptimistic;
        
        // Cast Connection pointer to an IDispatch type so converted 
        // to correct type of variant.
        pRstTitles-&gt;Open("Titles", 
            _variant_t((IDispatch *)pConnection,true),
            adOpenKeyset, adLockBatchOptimistic, adCmdTable);

        //Open an IADORecordBinding interface pointer which 
        //we'll use for Binding Recordset to a class.
        TESTHR(pRstTitles-&gt;QueryInterface(
            __uuidof(IADORecordBinding),(LPVOID*)&amp;picRs));

        //Bind the Recordset to a C++ Class here  
        TESTHR(picRs-&gt;BindToRecordset(&amp;titlers));

        // Set field object variable for Type field.
        pFldType = pRstTitles-&gt;Fields-&gt;GetItem("type");

        // Change the type of psychology titles.
        while(!(pRstTitles-&gt;EndOfFile))
        {
            if (!strcmp(strtok((char *)titlers.m_szau_Type," "), 
                "psychology"))
            {
                pFldType-&gt;Value = "self_help";
            }
            pRstTitles-&gt;MoveNext();
        }

        // Simulate a change by another user by updating data
        // using a command string.
        pConnection-&gt;Execute(strSQLChange,NULL,0);

        // Check for changes.
        pRstTitles-&gt;MoveFirst();
        while(!(pRstTitles-&gt;EndOfFile))
        {
            if (strcmp(pFldType-&gt;OriginalValue.pcVal,
                pFldType-&gt;UnderlyingValue.pcVal))
            {
                printf("\n\nData has changed!");

                printf("\n\nTitle ID: %s",titlers.lau_Title_idStatus == 
                    adFldOK ? titlers.m_szau_Title_id : "&lt;NULL&gt;");

                printf("\n\nCurrent Value: %s",
                    (LPCSTR) (_bstr_t) pFldType-&gt;Value);

                printf("\n\nOriginal Value: %s",
                    (LPCSTR) (_bstr_t) pFldType-&gt;OriginalValue);

                printf("\n\nUnderlying Value: %s\n\n",
                    (LPCSTR) (_bstr_t) pFldType-&gt;UnderlyingValue);

                printf("Press any key to continue...");
                getch();

                system("cls");
            }
            pRstTitles-&gt;MoveNext();
        }
    }
    catch (_com_error &amp;e)
    {
        // Notify the user of errors if any.
        // Pass a connection pointer accessed from the Connection.
        PrintProviderError(pConnection);
        PrintComError(e);
    }
    
    // Clean up objects before exit.
    //Release the IADORecordset Interface here   
    if (picRs)
        picRs-&gt;Release();

    if (pRstTitles)
        if (pRstTitles-&gt;State == adStateOpen)
        {
            // Cancel the update because this is a demonstration.
            pRstTitles-&gt;CancelBatch(adAffectAll);
            pRstTitles-&gt;Close();
        }
    if (pConnection)
        if (pConnection-&gt;State == adStateOpen)
        {
            // Restore Original Values.
            pConnection-&gt;Execute(strSQLRestore,NULL,0);
            pConnection-&gt;Close();
        }
};

///////////////////////////////////////////////////////////
//                                                       //
//      PrintProviderError Function                      //
//                                                       //
///////////////////////////////////////////////////////////
void PrintProviderError(_ConnectionPtr pConnection)
{
    // Print Provider Errors from Connection object.
    // pErr is a record object in the Connection's Error collection.
    ErrorPtr    pErr  = NULL;

    if( (pConnection-&gt;Errors-&gt;Count) &gt; 0)
    {
        long nCount = pConnection-&gt;Errors-&gt;Count;

        // Collection ranges from 0 to nCount -1.
        for(long i = 0;i &lt; nCount;i++)
        {
            pErr = pConnection-&gt;Errors-&gt;GetItem(i);
            printf("\t Error number: %x\t%s", pErr-&gt;Number,
                pErr-&gt;Description);
        }
    }
}

///////////////////////////////////////////////////////////
//                                                       //
//      PrintComError Function                           //
//                                                       //
///////////////////////////////////////////////////////////
void PrintComError(_com_error &amp;e)
{
   _bstr_t bstrSource(e.Source());
   _bstr_t bstrDescription(e.Description());

    // Print COM errors. 
   printf("Error\n");
   printf("\tCode = %08lx\n", e.Error());
   printf("\tCode meaning = %s\n", e.ErrorMessage());
   printf("\tSource = %s\n", (LPCSTR) bstrSource);
   printf("\tDescription = %s\n", (LPCSTR) bstrDescription);
}
// EndOriginalValueCpp
</PRE>

<P class="label"><B>OriginalValueX.h</B></P>

<PRE class="code">// BeginOriginalValueH
#include "icrsint.h"

//This class extracts title_id and type from titles table
class CTitleRs : public CADORecordBinding
{
BEGIN_ADO_BINDING(CTitleRs)
        // Column title_id is the 1st field in the Recordset
        ADO_VARIABLE_LENGTH_ENTRY2(1, adVarChar, m_szau_Title_id,
            sizeof(m_szau_Title_id), lau_Title_idStatus, FALSE)

        // Column type is the 3rd field in the Recordset
        ADO_VARIABLE_LENGTH_ENTRY2(3, adVarChar, m_szau_Type,
            sizeof(m_szau_Type), lau_TypeStatus, TRUE)
END_ADO_BINDING()

public:
    CHAR m_szau_Title_id[7];
    ULONG lau_Title_idStatus;
    CHAR m_szau_Type[13];
    ULONG lau_TypeStatus;
};
// EndOriginalValueH</PRE>

<H4 class="dtH4">See Also</H4>

<P><A HREF="mdprooriginalvalue.htm">OriginalValue Property</A> | <A HREF="mdobjodbrec.htm">Recordset Object</A> | <A HREF="mdprounderlyingvalue.htm">UnderlyingValue Property</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
<P align="center"><A HREF="ado_sdk_copyright_and_trademarks.htm">&copy; 1998-2003 Microsoft Corporation. All rights reserved.</A></P>
</BODY>
</HTML>

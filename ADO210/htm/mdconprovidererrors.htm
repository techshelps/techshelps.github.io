<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Provider Errors</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/ADO.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannerparthead td" nowrap>ADO 2.5</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="mdconprovidererrors"></A>Provider Errors</H1>

<P>When a provider error occurs, a run-time error of -2147467259 is returned. When you receive this error, check the active <B>Connection</B> object's <B>Errors</B> collection, which will contain one or more errors describing what happened.</P>

<H2 class="dtH2">The ADO Errors Collection</H2>

<P>Because a particular ADO operation can produce multiple provider errors, ADO exposes a collection of error objects through the <B>Connection</B> object. This collection contains no objects if an operation concludes successfully and contains one or more <B>Error</B> objects if something went wrong and the provider raised one or more errors. Examine each individual error object in order to determine the exact cause of the error.</P>

<P>Once you have finished handling any errors that have occurred, you can clear the collection by calling the <B>Clear</B> method. It is particularly important to explicitly clear the <B>Errors</B> collection before you call the <B>Resync</B>, <B>UpdateBatch</B>, or <B>CancelBatch</B> method on a <B>Recordset</B> object, the <B>Open</B> method on a <B>Connection</B> object, or set the <B>Filter</B> property on a <B>Recordset</B> object. By clearing the collection explicitly, you can be certain that any <B>Error</B> objects in the collection are not left over from a previous operation.</P>

<P>Some operations can generate warnings as well as errors. Warnings are also represented by <B>Error</B> objects in the <B>Errors</B> collection. When a provider adds a warning to the collection, it does not generate a run-time error. Check the <B>Count</B> property of the <B>Errors</B> collection to determine if a warning was produced by a particular operation. If the count is one or greater, an <B>Error</B> object has been added to the collection. Once you have determined that the <B>Errors</B> collection contains errors or warnings, you can iterate through the collection and retrieve information about each of the <B>Error</B> objects it contains. The following short Visual Basic example demonstrates this:</P>

<PRE class="code">' BeginErrorHandlingVB02
Private Function DeleteCustomer(ByVal CompanyName As String) As Long
    On Error GoTo DeleteCustomerError
    
    rst.Find "CompanyName='" &amp; CompanyName &amp; "'"
    
DeleteCustomerError:

    Dim objError As ADODB.Error
    Dim strError As String

    If cnn.Errors.Count &gt; 0 Then
        For Each objError In cnn.Errors
            strError = strError &amp; "Error #" &amp; objError.Number &amp; _
                " " &amp; objError.Description &amp; vbCrLf &amp; _
                "NativeError: " &amp; objError.NativeError &amp; vbCrLf &amp; _
                "SQLState: " &amp; objError.SQLState &amp; vbCrLf &amp; _
                "Reported by: " &amp; objError.Source &amp; vbCrLf &amp; _
                "Help file: " &amp; objError.HelpFile &amp; vbCrLf &amp; _
                "Help Context ID: " &amp; objError.HelpContext
        Next
        MsgBox strError
    End If
End Function
' EndErrorHandlingVB02</PRE>

<P>The error-handling routine includes a <B>For Each</B> loop that examines each object in the <B>Errors</B> collection. In this example, it simply accumulates a message for display. In a working program, you would write code to perform an appropriate task for each error, such as closing all open files and shutting down the program in an orderly fashion.</P>

<H2 class="dtH2">The Error Object</H2>

<P>By examining an <B>Error</B> object you can determine what error occurred, and more importantly, what application or what object caused the error. The <B>Error</B> object has the following properties:</P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TH width=50%>Property name</TH>
<TH width=50%>Description</TH>
</TR>

<TR VALIGN="top">
<TD width=50%><B>Description</B></TD>
<TD width=50%>A text description of the error that occurred.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%><B>HelpContext, HelpFile</B></TD>
<TD width=50%>Refers to the help topic and help file that contain a description of the error that occurred.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%><B>NativeError</B></TD>
<TD width=50%>The provider-specific error number.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%><B>Number</B></TD>
<TD width=50%>A Long Integer that represents the number (listed in the <B>ErrorValueEnum</B>) of the error that occurred.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%><B>Source</B></TD>
<TD width=50%>Indicates the name of the object or application that generated an error.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%><B>SQLState</B></TD>
<TD width=50%>A five-character error code that the provider returns during the process of a SQL statement.</TD>
</TR>
</table></div>

<P>The ADO <B>Error</B> object is quite similar to the standard Visual Basic <B>Err</B> object. Its properties describe the error that occurred. In addition to the number of the error, you also receive two related pieces of information. The <B>NativeError</B> property contains an error number specific to the provider you are using. In the previous example, the provider is the Microsoft OLE DB Provider for SQL Server, so <B>NativeError</B> will contain errors specific to SQL Server. The <B>SQLState</B> property has a five-letter code that describes an error in a SQL statement.</P>

<H2 class="dtH2">Event-Related Errors</H2>

<P>The <B>Error</B> object is also used when event-related errors occur. You can determine if an error occurred in the process that raised an ADO event by checking the <B>Error</B> object passed as an event parameter.</P>

<P>If the operation that causes an event is concluded successfully, the <I>adStatus</I> parameter of the event handler will be set to <I>adStatusOK</I>. On the other hand, if the operation that raised the event was unsuccessful, the <I>adStatus</I> parameter is set to <I>adStatusErrorsOccurred</I>. In that case, the <I>pError</I> parameter will contain an <B>Error</B> object that describes the error.</P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
<P align="center"><A HREF="ado_sdk_copyright_and_trademarks.htm">&copy; 1998-2003 Microsoft Corporation. All rights reserved.</A></P>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Using Visual C++ Extensions</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/ADO.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannerparthead td" nowrap>ADO 2.5 Appendixes</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="mdmscusingadovcextensions"></A>Using Visual C++ Extensions</H1>

<H2 class="dtH2">The IADORecordBinding Interface</H2>

<P>The Microsoft Visual C++ Extensions for ADO associate, or bind, fields of a <A HREF="mdobjodbrec.htm">Recordset</A> object to C/C++ variables. Whenever the current row of the bound <B>Recordset</B> changes, all the bound fields in the <B>Recordset</B> are copied to the C/C++ variables. If necessary, the copied data is converted to the declared data type of the C/C++ variable.</P>

<P>The <B>BindToRecordset</B> method of the <B>IADORecordBinding</B> interface binds fields to C/C++ variables. The <B>AddNew</B> method adds a new row to the bound <B>Recordset</B>. The <B>Update</B> method populates fields in new rows of the <B>Recordset</B>, or updates fields in existing rows, with the value of the C/C++ variables.</P>

<P>The <B>IADORecordBinding</B> interface is implemented by the <B>Recordset</B> object. You do not code the implementation yourself.</P>

<H2 class="dtH2">Binding Entries</H2>

<P>The Visual C++ Extensions for ADO map fields of a <A HREF="mdobjodbrec.htm">Recordset</A> object to C/C++ variables. The definition of a mapping between a field and a variable is called a <I>binding entry</I>. Macros provide binding entries for numeric, fixed-length, and variable-length data. The binding entries and C/C++ variables are declared in a class derived from the Visual C++ Extensions class, <B>CADORecordBinding</B>. The <B>CADORecordBinding</B> class is defined internally by the binding entry macros.</P>

<P>ADO internally maps the parameters in these macros to an OLE DB <B>DBBINDING</B> structure and creates an OLE DB <B>Accessor</B> object to manage the movement and conversion of data between fields and variables. OLE DB defines data as consisting of three parts: A <I>buffer</I> where the data is stored; a <I>status</I> that indicates whether a field was successfully stored in the buffer, or how the variable should be restored to the field; and the <I>length</I> of the data. (See the <I>OLE DB Programmer's Reference</I>, Chapter 6: Getting and Setting Data for more information.)</P>

<H2 class="dtH2">Header File</H2>

<P>Include the following file in your application in order to use the Visual C++ Extensions for ADO:</P>

<PRE class="code">#include &lt;icrsint.h&gt;</PRE>

<H2 class="dtH2">Binding Recordset Fields</H2>

<P class="labelproc"><B>To Bind Recordset Fields to C/C++ Variables</B>

<OL type="1">
	<LI>Create a class derived from the <B>CADORecordBinding</B> class.</li>

	<LI>Specify binding entries and corresponding C/C++ variables in the derived class. Bracket the binding entries between <B>BEGIN_ADO_BINDING</B> and <B>END_ADO_BINDING</B> macros. Do not terminate the macros with commas or semicolons. Appropriate delimiters are specified automatically by each macro.
<P>Specify one binding entry for each field to be mapped to a C/C++ variable. Use an appropriate member from the <B>ADO_FIXED_LENGTH_ENTRY</B>, <B>ADO_NUMERIC_ENTRY</B>, or <B>ADO_VARIABLE_LENGTH_ENTRY</B> family of macros.
</li>

	<LI>In your application, create an instance of the class derived from <B>CADORecordBinding</B>. Get the <B>IADORecordBinding</B> interface from the <B>Recordset</B>. Then call the <B>BindToRecordset</B> method to bind the <B>Recordset</B> fields to the C/C++ variables.</li>
</OL>

<P><A HREF="mdmscexampleadowithextensions.htm">See the Visual C++ Extensions Example</A> for more information.</P>

<H2 class="dtH2">Interface Methods</H2>

<P>The <B>IADORecordBinding</B> interface has three methods: <B>BindToRecordset</B>, <B>AddNew</B>, and <B>Update</B>. The sole argument to each method is a pointer to an instance of the class derived from <B>CADORecordBinding</B>. Therefore, the <B>AddNew</B> and <B>Update</B> methods cannot specify any of the parameters of their ADO method namesakes.</P>

<P class="label"><B>Syntax</B></P>

<P>The <B>BindToRecordset</B> method associates the <B>Recordset</B> fields with C/C++ variables.</P>

<PRE class="syntax"><B>BindToRecordset</B>(CADORecordBinding<I> *binding</I>)</PRE>

<P>The <B>AddNew</B> method invokes its namesake, the ADO <A HREF="mdmthaddnew.htm">AddNew</A> method, to add a new row to the <B>Recordset</B>.</P>

<PRE class="syntax"><B>AddNew</B>(CADORecordBinding *<I>binding</I>)</PRE>

<P>The <B>Update</B> method invokes its namesake, the ADO <A HREF="mdmthupdate.htm">Update</A> method, to update the <B>Recordset</B>.</P>

<PRE class="syntax"><B>Update</B>(CADORecordBinding *<I>binding</I>)</PRE>

<H2 class="dtH2">Binding Entry Macros</H2>

<P>Binding entry macros define the association of a <B>Recordset</B> field and a variable. A beginning and ending macro delimits the set of binding entries.</P>

<P>Families of macros are provided for fixed-length data, such as <B>adDate</B> or <B>adBoolean</B>; numeric data, such as <B>adTinyInt</B>, <B>adInteger</B>, or <B>adDouble</B>; and variable-length data, such as <B>adChar</B>, <B>adVarChar</B> or <B>adVarBinary</B>. All numeric types, except for <B>adVarNumeric</B>, are also fixed-length types. Each family has differing sets of parameters so that you can exclude binding information that is of no interest.</P>

<P>See the <I>OLE DB Programmer's Reference, </I>Appendix A: Data Types for additional information.</P>

<P class="label"><B><I>Begin Binding Entries</I></B></P>

<P><B>BEGIN_ADO_BINDING</B>(<I>Class</I>)</P>

<P class="label"><B><I>Fixed-Length Data</I></B></P>

<P><B>ADO_FIXED_LENGTH_ENTRY</B>(<I>Ordinal, DataType, Buffer, Status, Modify</I>)<BR>
<B>ADO_FIXED_LENGTH_ENTRY2</B>(<I>Ordinal, DataType, Buffer, Modify</I>)</P>

<P class="label"><B><I>Numeric Data</I></B></P>

<P><B>ADO_NUMERIC_ENTRY</B>(<I>Ordinal, DataType, Buffer, Precision, Scale, Status,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Modify</I>)<BR>
<B>ADO_NUMERIC_ENTRY2</B>(<I>Ordinal, DataType, Buffer, Precision, Scale, Modify</I>)</P>

<P class="label"><B><I>Variable-Length Data</I></B></P>

<P><B>ADO_VARIABLE_LENGTH_ENTRY</B>(<I>Ordinal, DataType, Buffer, Size, Status,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Length, Modify</I>)<BR>
<B>ADO_VARIABLE_LENGTH_ENTRY2</B>(<I>Ordinal, DataType, Buffer, Size, Status,<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Modify</I>)<BR>
<B>ADO_VARIABLE_LENGTH_ENTRY3</B>(<I>Ordinal, DataType, Buffer, Size, Length, <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Modify</I>)<BR>
<B>ADO_VARIABLE_LENGTH_ENTRY4</B>(<I>Ordinal, DataType, Buffer, Size, Modify</I>)</P>

<P class="label"><B><I>End Binding Entries</I></B></P>

<P><B>END_ADO_BINDING</B>()</P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TH width=23%>Parameter</TH>
<TH width=77%>Description</TH>
</TR>

<TR VALIGN="top">
<TD width=23%><I>Class</I></TD>
<TD width=77%>Class in which the binding entries and C/C++ variables are defined. </TD>
</TR>

<TR VALIGN="top">
<TD width=23%><I>Ordinal</I></TD>
<TD width=77%>Ordinal number, counting from one, of the <B>Recordset</B> field corresponding to your C/C++ variable.</TD>
</TR>

<TR VALIGN="top">
<TD width=23%><I>DataType</I></TD>
<TD width=77%>Equivalent ADO data type of the C/C++ variable (see <A HREF="mdcstdatatypeenum.htm">DataTypeEnum</A> for a list of valid data types). The value of the <B>Recordset</B> field will be converted to this data type if necessary.</TD>
</TR>

<TR VALIGN="top">
<TD width=23%><I>Buffer</I></TD>
<TD width=77%>Name of the C/C++ variable where the <B>Recordset</B> field will be stored.</TD>
</TR>

<TR VALIGN="top">
<TD width=23%><I>Size</I></TD>
<TD width=77%>Maximum size in bytes of <I>Buffer</I>. If <I>Buffer </I>will contain a variable-length string, allow room for a terminating zero.</TD>
</TR>

<TR VALIGN="top">
<TD width=23%><I>Status</I></TD>
<TD width=77%>Name of a variable that will indicate whether the contents of <I>Buffer </I>are valid, and whether the conversion of the field to <I>DataType </I>was successful.
<P>The two most important values for this variable are <B>adFldOK</B>, which means the conversion was successful; and <B>adFldNull</B>, which means the value of the field would be a VARIANT of type VT_NULL and not merely empty.</P>

<P>Possible values for <I>Status </I>are listed in the next table, "Status Values."</P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=23%><I>Modify</I></TD>
<TD width=77%>Boolean flag; if TRUE, indicates ADO is allowed to update the corresponding <B>Recordset</B> field with the value contained in <I>Buffer</I>.
<P>Set the Boolean <I>modify</I> parameter to TRUE to enable ADO to update the bound field, and FALSE if you want to examine the field but not change it.</P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=23%><I>Precision</I></TD>
<TD width=77%>Number of digits that can be represented in a numeric variable.</TD>
</TR>

<TR VALIGN="top">
<TD width=23%><I>Scale</I></TD>
<TD width=77%>Number of decimal places in a numeric variable.</TD>
</TR>

<TR VALIGN="top">
<TD width=23%><I>Length</I></TD>
<TD width=77%>Name of a four-byte variable that will contain the actual length of the data in <I>Buffer</I>.</TD>
</TR>
</table></div>

<H2 class="dtH2">Status Values</H2>

<P>The value of the <I>Status</I> variable indicates whether a field was successfully copied to a variable.</P>

<P>When setting data, <I>Status </I>may be set to <B>adFldNull</B> to indicate the <B>Recordset</B> field should be set to null.</P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TH width=35%>Constant </TH>
<TH width=14%>Value</TH>
<TH width=51%>Description</TH>
</TR>

<TR VALIGN="top">
<TD width=35%><B>adFldOK</B></TD>
<TD width=14%>0</TD>
<TD width=51%>A non-null field value was returned.</TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>adFldBadAccessor</B></TD>
<TD width=14%>1</TD>
<TD width=51%>Binding was invalid.</TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>adFldCantConvertValue</B></TD>
<TD width=14%>2</TD>
<TD width=51%>Value couldn't be converted for reasons other than sign mismatch or data overflow.</TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>adFldNull</B></TD>
<TD width=14%>3</TD>
<TD width=51%>When getting a field, indicates a null value was returned.
<P>When setting a field, indicates the field should be set to <B>NULL</B> when the field cannot encode <B>NULL</B> itself (for example, a character array or an integer).</P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>adFldTruncated</B></TD>
<TD width=14%>4</TD>
<TD width=51%>Variable-length data or numeric digits were truncated.</TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>adFldSignMismatch</B></TD>
<TD width=14%>5</TD>
<TD width=51%>Value is signed and variable data type is unsigned.</TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>adFldDataOverFlow</B></TD>
<TD width=14%>6</TD>
<TD width=51%>Value is larger than could be stored in the variable data type.</TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>adFldCantCreate</B></TD>
<TD width=14%>7</TD>
<TD width=51%>Unknown column type and field already open.</TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>adFldUnavailable</B></TD>
<TD width=14%>8</TD>
<TD width=51%>Field value could not be determined&#0151;for example, on a new, unassigned field with no default value.</TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>adFldPermissionDenied</B></TD>
<TD width=14%>9</TD>
<TD width=51%>When updating, no permission to write data.</TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>adFldIntegrityViolation</B></TD>
<TD width=14%>10</TD>
<TD width=51%>When updating, field value would violate column integrity.</TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>adFldSchemaViolation</B></TD>
<TD width=14%>11</TD>
<TD width=51%>When updating, field value would violate column schema.</TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>adFldBadStatus</B></TD>
<TD width=14%>12</TD>
<TD width=51%>When updating, invalid status parameter.</TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>adFldDefault</B></TD>
<TD width=14%>13</TD>
<TD width=51%>When updating, a default value was used.</TD>
</TR>
</table></div>

<H4 class="dtH4">See Also</H4>

<P><A HREF="mdmscexampleadowithextensions.htm">ADO with Visual C++ Extensions Example</A> | <A HREF="mdmscvcextensionsheaderindetail.htm">Visual C++ Extensions Header</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
<P align="center"><A HREF="ado_sdk_copyright_and_trademarks.htm">&copy; 1998-2003 Microsoft Corporation. All rights reserved.</A></P>
</BODY>
</HTML>

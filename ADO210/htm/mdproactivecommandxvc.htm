<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>ActiveCommand Property Example (VC++)</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/samples.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannerparthead td" nowrap>ADO 2.5 Samples</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="mdproactivecommandxvc"></A>ActiveCommand Property Example (VC++)</H1>

<P>This example demonstrates the <A HREF="mdproactivecommand.htm">ActiveCommand</A> property.</P>

<P>A subroutine is given a <A HREF="mdobjodbrec.htm">Recordset</A> object whose <B>ActiveCommand</B> property is used to display the command text and parameter that created the <B>Recordset</B>.</P>

<PRE class="code">// BeginActiveCommandCpp
#import "C:\Program Files\Common Files\System\ADO\msado15.dll" \
    no_namespace rename("EOF", "EndOfFile")


#include &lt;ole2.h&gt;
#include &lt;stdio.h&gt;
#include &lt;conio.h&gt;
#include "ActiveCommandX.h"

// Function declarations
inline void TESTHR(HRESULT x) {if FAILED(x) _com_issue_error(x);};
void ActiveCommandX(void);
void ActiveCommandXprint(_RecordsetPtr pRst);
void PrintProviderError(_ConnectionPtr pConnection);
void PrintComError(_com_error &amp;e);
inline char* mygets(char* strDest, int n) 
{    
    char strExBuff[10];
    char* pstrRet = fgets(strDest, n, stdin);

    if (pstrRet == NULL)
        return NULL;

    if (!strrchr(strDest, '\n'))
        // Exhaust the input buffer.
        do
        {
            fgets(strExBuff, sizeof(strExBuff), stdin);
        }while (!strrchr(strExBuff, '\n'));
    else
        // Replace '\n' with '\0'
        strDest[strrchr(strDest, '\n') - strDest] = '\0';

    return pstrRet;
}

//////////////////////////////////////////////////////////
//                                                      //
//        Main Function                                 //
//                                                      //
//////////////////////////////////////////////////////////

void main()
{
    if(FAILED(::CoInitialize(NULL)))
        return;
    
    ActiveCommandX();
    
    ::CoUninitialize();
}

//////////////////////////////////////////////////////////
//                                                      //
//            ActiveCommandX Function                   //
//                                                      //
//////////////////////////////////////////////////////////

void ActiveCommandX(void) 
{

    HRESULT    hr = S_OK;

    // Define ADO object pointers.
    // Initialize pointers on define.
    // These are in the ADODB::  namespace.
    _ConnectionPtr  pConnection      = NULL;
    _CommandPtr    pCmd      = NULL;
    _RecordsetPtr  pRstAuthors    = NULL;
   
    //Definitions of other variables
    _bstr_t strCnn("Provider='sqloledb';Data Source='MySqlServer';"
        "Initial Catalog='pubs';Integrated Security='SSPI';");
    _bstr_t      strPrompt;
    _bstr_t      strName;
    CHAR strcharName[50];
    

    try
    {
        // Open connection.
        TESTHR(pConnection.CreateInstance(__uuidof(Connection)));
    
        TESTHR(pRstAuthors.CreateInstance(__uuidof(Recordset)));

        TESTHR(pCmd.CreateInstance(__uuidof(Command)));

        printf ("ActiveCommandX Example\n\n");
        strPrompt = "Enter an author's name (e.g., Ringer): ";
        printf(strPrompt);
        mygets(strcharName, 50);
        char *tempStr = strtok(strcharName, " \t");
        strName = tempStr;
        
        pCmd-&gt;CommandText = "SELECT * FROM authors WHERE au_lname = ?";
        pCmd-&gt;Parameters-&gt;Append(pCmd-&gt;CreateParameter("LastName", adChar, adParamInput, 20, strName));

        pConnection-&gt;Open (strCnn, "", "", adConnectUnspecified);

        pCmd-&gt;PutActiveConnection(_variant_t((IDispatch*)pConnection));

        pRstAuthors = pCmd-&gt;Execute(NULL,NULL,adCmdText);

        ActiveCommandXprint(pRstAuthors);

    }    // End Try statement.
    catch(_com_error &amp;e)
    {
        // Notify the user of errors if any.
        // Pass a connection pointer accessed from the Recordset.
        PrintProviderError(pConnection);
        PrintComError(e);  
    }

    // Clean up objects before exit.
    if (pRstAuthors)
        if (pRstAuthors-&gt;State == adStateOpen)
            pRstAuthors-&gt;Close();
    if (pConnection)
        if (pConnection-&gt;State == adStateOpen)
            pConnection-&gt;Close();
}


//////////////////////////////////////////////////////////
//                                                      //
//              ActiveCommandXprint Function            //
//                                                      //
//////////////////////////////////////////////////////////

void ActiveCommandXprint(_RecordsetPtr    pRst = NULL)
{
    // Varible Declaraion &amp; initialization
    IADORecordBinding   *picRs  = NULL;  //Interface Pointer declared. 
    CAuthorsRs autrs;           //C++ class object
    _bstr_t strName;
    
    //Open an IADORecordBinding interface pointer which 
    //we'll use for Binding Recordset to a class    
    TESTHR(pRst-&gt;QueryInterface(__uuidof(IADORecordBinding),(LPVOID*)&amp;picRs));
    
    //Bind the Recordset to a C++ Class here    
    TESTHR(picRs-&gt;BindToRecordset(&amp;autrs));
    
    strName = ((_CommandPtr)pRst-&gt;GetActiveCommand())-&gt;GetParameters()-&gt;GetItem("LastName")-&gt;Value;
    printf("Command text = '%s'\n", (LPCSTR)((_CommandPtr)pRst-&gt;GetActiveCommand())-&gt;CommandText);
    printf("Parameter = '%s'\n", (LPCSTR)strName);

    if (pRst-&gt;BOF)
        printf("Name = '%s'not found.", (LPCSTR)strName);
    else
    {
        printf ("Name = '%s  %s' author ID = '%s'",
            autrs.lau_fnameStatus == adFldOK ? autrs.m_au_fname : "&lt;NULL&gt;",
            autrs.lau_lnameStatus == adFldOK ? autrs.m_au_lname : "&lt;NULL&gt;",
            autrs.lau_idStatus == adFldOK ? autrs.m_au_id : "&lt;NULL&gt;");
    }

    //Release IADORecordset Interface    
    if (picRs)
        picRs-&gt;Release();

}

//////////////////////////////////////////////////////////
//                                                      //
//        PrintProviderError Function                   //
//                                                      //
//////////////////////////////////////////////////////////

void PrintProviderError(_ConnectionPtr pConnection)
{
    // Print Provider Errors from Connection object.
    // pErr is a record object in the Connection's Error collection.
    ErrorPtr    pErr  = NULL;
    long      nCount  = 0;    
    long      i     = 0;

    if( (pConnection-&gt;Errors-&gt;Count) &gt; 0)
    {
        nCount = pConnection-&gt;Errors-&gt;Count;
        // Collection ranges from 0 to nCount -1.
        for(i = 0; i &lt; nCount; i++)
        {
            pErr = pConnection-&gt;Errors-&gt;GetItem(i);
            printf("\t Error number: %x\t%s\n", pErr-&gt;Number, (LPCSTR)pErr-&gt;Description);
        }
    }
}

//////////////////////////////////////////////////////////
//                                                      //
//       PrintComError Function                         //
//                                                      //
//////////////////////////////////////////////////////////

void PrintComError(_com_error &amp;e)
{
   _bstr_t bstrSource(e.Source());
   _bstr_t bstrDescription(e.Description());
    
    // Print Com errors.  
   printf("Error\n");
   printf("\tCode = %08lx\n", e.Error());
   printf("\tCode meaning = %s\n", e.ErrorMessage());
   printf("\tSource = %s\n", (LPCSTR) bstrSource);
   printf("\tDescription = %s\n", (LPCSTR) bstrDescription);
   
}
// EndActiveCommandCpp

ActiveCommandX.h
// BeginActiveCommandH
#include "icrsint.h"


// This Class extracts id, fname, lname from authors table.

class CAuthorsRs : public CADORecordBinding
{
BEGIN_ADO_BINDING(CAuthorsRs)
    
    // Column au_id is the 1st field in the recordset   
    ADO_VARIABLE_LENGTH_ENTRY2(1, adVarChar, m_au_id, 
         sizeof(m_au_id), lau_idStatus, TRUE)

    // Column au_fname is the 2nd field in the recordset   
    ADO_VARIABLE_LENGTH_ENTRY2(2, adVarChar, m_au_fname, 
         sizeof(m_au_fname), lau_fnameStatus, TRUE)
    
    // Column au_lname is the 3rd field in the recordset   
    ADO_VARIABLE_LENGTH_ENTRY2(3, adVarChar, m_au_lname, 
         sizeof(m_au_lname), lau_lnameStatus, TRUE)
    
END_ADO_BINDING()

public:

   char     m_au_id[21];
   ULONG    lau_idStatus;
   char     m_au_fname[41];
   ULONG    lau_fnameStatus;
   char     m_au_lname[41];
   ULONG    lau_lnameStatus;

};
// EndActiveCommandH</PRE>

<H4 class="dtH4">See Also</H4>

<P><A HREF="mdproactivecommand.htm">ActiveCommand Property</A> | <A HREF="mdobjodbrec.htm">Recordset Object</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
<P align="center"><A HREF="ado_sdk_copyright_and_trademarks.htm">&copy; 1998-2003 Microsoft Corporation. All rights reserved.</A></P>
</BODY>
</HTML>

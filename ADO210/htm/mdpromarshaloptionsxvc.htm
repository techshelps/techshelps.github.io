<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>MarshalOptions Property Example (VC++)</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/samples.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannerparthead td" nowrap>ADO 2.5 Samples</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="mdpromarshaloptionsxvc"></A>MarshalOptions Property Example (VC++)</H1>

<P>This example uses the <A HREF="mdpromarshaloptions.htm">MarshalOptions</A> property to specify what rows are sent back to the server&#0151;All Rows or only Modified Rows.</P>

<PRE class="code">// BeginMarshalOptionsCpp
#import "C:\Program Files\Common Files\System\ADO\msado15.dll" \
    no_namespace rename("EOF", "EndOfFile")

#include &lt;stdio.h&gt;
#include &lt;ole2.h&gt;
#include &lt;conio.h&gt;
#include &lt;malloc.h&gt;
#include "MarshalOptionsX.h"

// Function declarations
inline void TESTHR(HRESULT x) {if FAILED(x) _com_issue_error(x);};
void MarshalOptionsX(void);
void PrintProviderError(_ConnectionPtr pConnection);
void PrintComError(_com_error &amp;e);

///////////////////////////////////////////////////////////
//                                                       //
//               Main Function                           //
//                                                       //
///////////////////////////////////////////////////////////

void main()
{
    if(FAILED(::CoInitialize(NULL)))
        return;

      MarshalOptionsX();

    printf("Press any key to continue...");
    getch();
    ::CoUninitialize();
}

///////////////////////////////////////////////////////////
//                                                       //
//      Marshal Options Function                         //
//                                                       //
///////////////////////////////////////////////////////////

void   MarshalOptionsX(void)
{

    // Define string variables
    _bstr_t strCnn("Provider='sqloledb';Data Source='MySqlServer';"
            "Initial Catalog='pubs';Integrated Security='SSPI';");

    // Define ADO object pointers.
    // Initialize pointers on define.
    // These are in the ADODB::  namespace
    _RecordsetPtr pRstEmployees = NULL;

    // Define Other Variables
    IADORecordBinding   *picRs  = NULL;  //Interface Pointer declared
    CEmployeeRs emprs;               //C++ Class Object
    HRESULT hr = S_OK;
    LPSTR strOldFirst = NULL;
    LPSTR strOldLast = NULL;

    try 
    {                
        // Open recordset with names from Employee table.
        TESTHR(pRstEmployees.CreateInstance(__uuidof(Recordset)));
        pRstEmployees-&gt;CursorType = adOpenKeyset;
        pRstEmployees-&gt;LockType = adLockOptimistic;
        pRstEmployees-&gt;CursorLocation = adUseClient;
        pRstEmployees-&gt;Open("SELECT fname, lname FROM Employee "
            "ORDER BY lname",strCnn, 
            adOpenKeyset, adLockOptimistic,adCmdText);

        // Open an IADORecordBinding interface pointer which 
        // we'll use for Binding Recordset to a class.
        TESTHR(pRstEmployees-&gt;QueryInterface(
            __uuidof(IADORecordBinding),(LPVOID*)&amp;picRs));

        // Bind the Recordset to a C++ Class here.
        TESTHR(picRs-&gt;BindToRecordset(&amp;emprs));

        // Store Original Data
        strOldFirst = (LPSTR) malloc(sizeof(emprs.m_szemp_fname));
        strOldLast  = (LPSTR) malloc(sizeof(emprs.m_szemp_lname));
        // Set the final character of the destination string to NULL.
        strOldFirst[sizeof(emprs.m_szemp_fname)-1] = '\0';
        // The source string will get truncated if its length is 
        // longer than the length of the destination string minus one.
        strncpy(strOldFirst,strtok(emprs.m_szemp_fname," "),
            sizeof(emprs.m_szemp_fname)-1);
        // Set the final character of the destination string to NULL.
        strOldLast[sizeof(emprs.m_szemp_lname)-1] = '\0';
        // The source string will get truncated if its length is 
        // longer than the length of the destination string minus one.
        strncpy(strOldLast,strtok(emprs.m_szemp_lname," "),
            sizeof(emprs.m_szemp_lname)-1); 
        
        //Change Data in Edit Buffer
        // Set the final character of the destination string to NULL.
        emprs.m_szemp_fname[sizeof(emprs.m_szemp_fname)-1] = '\0';
        // The source string will get truncated if its length is 
        // longer than the length of the destination string minus one.
        strncpy(emprs.m_szemp_fname,"Linda",sizeof(emprs.m_szemp_fname)-1);
        // Set the final character of the destination string to NULL.
        emprs.m_szemp_lname[sizeof(emprs.m_szemp_lname)-1] = '\0';
        // The source string will get truncated if its length is 
        // longer than the length of the destination string minus one.
        strncpy(emprs.m_szemp_lname,"Kobara",sizeof(emprs.m_szemp_lname)-1);

        // Show contents of buffer and get user input
        printf("Edit in Progress:\n");
        printf("Original Data = %s  %s \n",strOldFirst,strOldLast);
        printf("Data in buffer = %s  %s \n", emprs.lemp_fnameStatus == 
            adFldOK ? emprs.m_szemp_fname : "&lt;NULL&gt;",
            emprs.lemp_lnameStatus == adFldOK ? 
            emprs.m_szemp_lname : "&lt;NULL&gt;");
        printf("Use Update to replace the original data with the "
            "buffered data in the Recordset?\nEnter (y/n) :?");
        char opt1=getch();

        if(toupper(opt1)=='Y')
        {
                printf("\nWould you like to send all the rows in "
                    "the recordset back to the server?\nEnter (y/n):");
                char opt2 = getch();
                if(toupper(opt2) == 'Y')
                {
                    {
                        pRstEmployees-&gt;MarshalOptions = adMarshalAll;
                        picRs-&gt;Update(&amp;emprs);
                    }
                }
                else 
                {
                    printf("\nWould you like to send only modified "
                        "rows back to the server?\nEnter (y/n):");
                    char opt3=getch();
                    if(toupper(opt3) == 'Y')
                        {
                            pRstEmployees-&gt;MarshalOptions = 
                                adMarshalModifiedOnly;
                            picRs-&gt;Update(&amp;emprs);
                        }
                }
        }
        // Show the resulting data
        printf("\nData In the Recordset = %s  %s\n",
            emprs.lemp_fnameStatus == adFldOK ? 
            emprs.m_szemp_fname : "&lt;NULL&gt;",
            emprs.lemp_lnameStatus == adFldOK ? 
            emprs.m_szemp_lname : "&lt;NULL&gt;");

        // Restore original data because this is a demonstration  
        if((strcmp(strOldFirst,emprs.m_szemp_fname)) &amp;&amp; 
           (strcmp(strOldLast,emprs.m_szemp_lname)))
        {
            // Set the final character of the destination string to NULL.
            emprs.m_szemp_fname[sizeof(emprs.m_szemp_fname)-1] = '\0';
            // The source string will get truncated if its length is 
            // longer than the length of the destination string minus one.
            strncpy(emprs.m_szemp_fname,strOldFirst,
                sizeof(emprs.m_szemp_fname)-1); 
            // Set the final character of the destination string to NULL.
            emprs.m_szemp_lname[sizeof(emprs.m_szemp_lname)-1] = '\0';
            // The source string will get truncated if its length is 
            // longer than the length of the destination string minus one.
            strncpy(emprs.m_szemp_lname,strOldLast,
                sizeof(emprs.m_szemp_lname)-1); 
            picRs-&gt;Update(&amp;emprs);
        }
    }
    catch(_com_error &amp;e)
    {
       // Notify the user of errors if any.
       // Pass a connection pointer accessed from the Recordset.
        _variant_t vtConnect = pRstEmployees-&gt;GetActiveConnection();

        // GetActiveConnection returns connect string if connection
        // is not open, else returns Connection object.
        switch(vtConnect.vt)
        {
            case VT_BSTR:
                PrintComError(e);
                break;
            case VT_DISPATCH:
                PrintProviderError(vtConnect);
                break;
            default:
                printf("Errors occured.");
                break;
        }
    }

    // Clean up objects before exit.
    // Deallocate memory
    if (strOldFirst)
        free(strOldFirst);
    if (strOldLast)
        free(strOldLast);

    //Release the IADORecordset Interface here   
    if (picRs)
        picRs-&gt;Release();
        
    if (pRstEmployees)
        if (pRstEmployees-&gt;State == adStateOpen)
            pRstEmployees-&gt;Close();    
}

///////////////////////////////////////////////////////////
//                                                       //
//      PrintProviderError Function                      //
//                                                       //
///////////////////////////////////////////////////////////

void PrintProviderError(_ConnectionPtr pConnection)
{
    // Print Provider Errors from Connection object.
    // pErr is a record object in the Connection's Error collection.
    ErrorPtr     pErr   = NULL;

    if( (pConnection-&gt;Errors-&gt;Count) &gt; 0)
    {
        long nCount = pConnection-&gt;Errors-&gt;Count;
        // Collection ranges from 0 to nCount -1.
        for(long i = 0; i &lt; nCount; i++)
        {
            pErr = pConnection-&gt;Errors-&gt;GetItem(i);
            printf("\t Error number: %x\t%s", pErr-&gt;Number,
                (LPCSTR) pErr-&gt;Description);
        }
    }
}

///////////////////////////////////////////////////////////
//                                                       //
//      PrintComError Function                           //
//                                                       //
///////////////////////////////////////////////////////////

void PrintComError(_com_error &amp;e)
{
    _bstr_t bstrSource(e.Source());
    _bstr_t bstrDescription(e.Description());

     // Print Com errors.
    printf("Error\n");
    printf("\tCode = %08lx\n", e.Error());
    printf("\tCode meaning = %s\n", e.ErrorMessage());
    printf("\tSource = %s\n", (LPCSTR) bstrSource);
    printf("\tDescription = %s\n", (LPCSTR) bstrDescription);
}
// EndMarshalOptionsCpp
</PRE>

<P class="label"><B>MarshalOptionsX.h</B></P>

<PRE class="code">// BeginMarshalOptionsH

#include "icrsint.h"

//This Class extracts only fname,lname from employees table  
class CEmployeeRs : public CADORecordBinding
{
BEGIN_ADO_BINDING(CEmployeeRs)

    //Column fname is the 1st field in the recordset
    ADO_VARIABLE_LENGTH_ENTRY2(1, adVarChar, m_szemp_fname, 
         sizeof(m_szemp_fname), lemp_fnameStatus, TRUE)
   
     //Column lname is the 2nd field in the recordset
    ADO_VARIABLE_LENGTH_ENTRY2(2, adVarChar, m_szemp_lname, 
         sizeof(m_szemp_lname), lemp_lnameStatus, TRUE)

END_ADO_BINDING()

public:
   CHAR   m_szemp_fname[21];
   ULONG   lemp_fnameStatus;
   CHAR   m_szemp_lname[31];
   ULONG   lemp_lnameStatus;
};
// EndMarshalOptionsH</PRE>

<H4 class="dtH4">See Also</H4>

<P><A HREF="mdpromarshaloptions.htm">MarshalOptions Property</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
<P align="center"><A HREF="ado_sdk_copyright_and_trademarks.htm">&copy; 1998-2003 Microsoft Corporation. All rights reserved.</A></P>
</BODY>
</HTML>

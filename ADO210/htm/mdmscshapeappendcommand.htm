<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Shape Append Clause</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/ADO.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannerparthead td" nowrap>ADO 2.5</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="mdmscshapeappendcommand"></A>Shape APPEND Clause</H1>

<P>The shape command APPEND clause appends a column or columns to a <B>Recordset</B>. Often these columns are chapter columns, which refer to a <A HREF="mddefglossary.htm#mddefchild">child</A> <B>Recordset</B>.</P>

<H4 class="dtH4">Syntax</H4>

<PRE class="syntax">SHAPE [<I>parent-command</I> [[AS] <I>parent-alias</I>]] APPEND <I>column-list</I></PRE>

<H4 class="dtH4">Description</H4>

<P>The parts of this clause are as follows:

<DL>
<DT><I>parent-command</I></DT>

<DD>Zero or one of the following (you may omit the <I>parent-command</I> entirely):

<UL type="disc">
	<LI>A provider command within curly braces ("{}") that returns a <B>Recordset</B> object. The command is issued to the underlying <A HREF="mddefglossary.htm#mddefdataprovider">data provider</A>, and its syntax depends on the requirements of that provider. This will typically be the SQL language, although ADO does not require any particular query language.</li>

	<LI>Another shape command embedded in parentheses.</li>

	<LI>The TABLE keyword, followed by the name of a table in the data provider.</li>
</UL>
</dd>

<DT><I>parent-alias</I></DT>

<DD>An optional alias that refers to the parent <B>Recordset</B>.</dd>

<DT><I>column-list</I></DT>

<DD>One or more of the following:

<UL type="disc">
	<LI>An aggregate column.</li>

	<LI>A calculated column.</li>

	<LI>A new column created with the NEW clause.</li>

	<LI>A chapter column. A chapter column definition is enclosed in parentheses ("()"). See syntax below:</li>
</UL>
</dd>
</DL>

<PRE class="syntax">SHAPE [<I>parent-command</I> [[AS] <I>parent-alias</I>]]
&nbsp;&nbsp;&nbsp;APPEND (<I>child-recordset</I> [ [[AS] <I>child-alias</I>] 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RELATE <I>parent-column</I> TO <I>child-column</I> | PARAMETER <I>param-number</I>, <B>...</B> ])
&nbsp;&nbsp;&nbsp;[[AS] <I>chapter-alias</I>] 
&nbsp;&nbsp;&nbsp;[, <B>...</B> ]</PRE>

<DL>
<DT><I>child-recordset</I></DT>

<DD>

<UL type="disc">
	<LI>A provider command within curly braces ("{}") that returns a <B>Recordset</B> object. The command is issued to the underlying <A HREF="mddefglossary.htm#mddefdataprovider">data provider</A>, and its syntax depends on the requirements of that provider. This will typically be the SQL language, although ADO does not require any particular query language.</li>

	<LI>Another shape command embedded in parentheses.</li>

	<LI>The name of an existing shaped <B>Recordset</B>.</li>

	<LI>The TABLE keyword, followed by the name of a table in the data provider.</li>
</UL>
</dd>

<DT><I>child-alias</I></DT>

<DD>An alias that refers to the child <B>Recordset</B>.</dd>

<DT><I>parent-column</I></DT>

<DD>A column in the <B>Recordset</B> returned by the <I>parent-command.</I></dd>

<DT><I>child-column</I></DT>

<DD>A column in the <B>Recordset</B> returned by the <I>child-command</I>.</dd>

<DT><I>param-number</I></DT>

<DD>See <A HREF="mdconoperationofparameterizedcommands.htm">Operation of Parameterized Commands</A>.</dd>

<DT><I>chapter-alias</I></DT>

<DD>An alias that refers to the chapter column appended to the parent.</dd>
</DL>

<BLOCKQUOTE class="dtBlock">
<B>Note</B>&nbsp;&nbsp;&nbsp;The <I>"parent-column </I>TO <I>child-column" </I>clause is actually a list, where each relation defined is separated by a comma.</BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
<B>Note</B>&nbsp;&nbsp;&nbsp;The clause after the APPEND keyword is actually a list, where each clause is separated by a comma and defines another column to be appended to the parent.</BLOCKQUOTE>

<H4 class="dtH4">Remarks</H4>

<P>When you construct provider commands from user input as part of a SHAPE command, SHAPE will treat the user-supplied a provider command as an opaque string and pass them faithfully to the provider. For example, in the following SHAPE command,</P>

<PRE class="code">SHAPE {select * from t1} APPEND ({select * from t2} RELATE k1 TO k2)</PRE>

<P>SHAPE will execute two commands: <code class="ce">select * from t1</code> and (<code class="ce">select * from t2 RELATE k1 TO k2)</code>. If the user supplies a compound command consisting of multiple provider commands separated by semicolons, SHAPE is not able to discern the difference. So in the following SHAPE command,</P>

<PRE class="code">SHAPE {select * from t1; drop table t1} APPEND ({select * from t2} RELATE k1 TO k2)</PRE>

<P>SHAPE executes <code class="ce">select * from t1; drop table t1</code> and (<code class="ce">select * from t2 RELATE k1 TO k2), </code>not realizing that <code class="ce">drop table t1</code> is a separate and in this case, dangerous, provider command. Applications must always validate the user input to prevent such potential hacker attacks from happening.</P>

<H4 class="dtH4">Remarks</H4>

<P>When you construct provider commands from user input as part of a SHAPE command, SHAPE will treat the user-supplied a provider command as an opaque string and pass them faithfully to the provider. For example, in the following SHAPE command,</P>

<PRE class="code">SHAPE {select * from t1} APPEND ({select * from t2} RELATE k1 TO k2)</PRE>

<P>SHAPE will execute two commands: <code class="ce">select * from t1</code> and (<code class="ce">select * from t2 RELATE k1 TO k2)</code>. If the user supplies a compound command consisting of multiple provider commands separated by semicolons, SHAPE is not able to discern the difference. So in the following SHAPE command,</P>

<PRE class="code">SHAPE {select * from t1; drop table t1} APPEND ({select * from t2} RELATE k1 TO k2)</PRE>

<P>SHAPE executes <code class="ce">select * from t1; drop table t1</code> and (<code class="ce">select * from t2 RELATE k1 TO k2), </code>not realizing that <code class="ce">drop table t1</code> is a separate and in this case, dangerous, provider command. Applications must always validate the user input to prevent such potential hacker attacks from happening.</P>

<H4 class="dtH4">See Also</H4>

<P><A HREF="mdhowdatashaping.htm">Data Shaping</A> | <A HREF="mdmscformalshapegrammar.htm">Formal Shape Grammar</A> | <A HREF="mdmscshapecommandsingeneral.htm">Shape Commands in General</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
<P align="center"><A HREF="ado_sdk_copyright_and_trademarks.htm">&copy; 1998-2003 Microsoft Corporation. All rights reserved.</A></P>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Handler Property Example (VC++)</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/ADO.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannerparthead td" nowrap>RDS 2.5 API Reference</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="mdprohandlerxvc"></A>Handler Property Example (VC++)</H1>

<P>This example demonstrates the <A HREF="mdobjdatacontrol.htm">RDS DataControl</A> object <A HREF="mdprohandlerpropertyrds.htm">Handler</A> property. (See <A HREF="mdmscdatafactorycustomization.htm">DataFactory Customization</A> for more details.)</P>

<P>Assume the following sections in the parameter file, Msdfmap.ini, located on the server:</P>

<PRE class="code">[connect AuthorDataBase]
Access=ReadWrite
Connect="DSN=Pubs"
[sql AuthorById]
SQL="SELECT * FROM Authors WHERE au_id = ?"</PRE>

<P>Your code looks like the following. The command assigned to the <A HREF="mdprosqlprop.htm">SQL</A> property will match the <B><I>AuthorById</I></B> identifier and will retrieve a row for author Michael O'Leary. Although the <A HREF="mdproconnectprop.htm">Connect</A> property in your code specifies the Northwind data source, that data source will be overwritten by the Msdfmap.ini <I>connect</I> section. The <B>DataControl</B> object <A HREF="mdprorecordset.htm">Recordset</A> property is assigned to a disconnected <A HREF="mdobjodbrec.htm">Recordset</A> object purely as a coding convenience.</P>

<P class="normal"><CODE>// BeginHandlerCpp</CODE></P>

<P class="normal"><CODE>#import "c:\Program Files\Common Files\System\ADO\msado15.dll" \</CODE></P>

<P class="normal"><CODE>no_namespace rename("EOF", "EndOfFile")</CODE></P>

<P class="normal"><CODE>#import "C:\Program Files\Common Files\System\MSADC\msadco.dll"</CODE></P>

<P class="normal"></P>

<P class="normal"><CODE>#include &lt;ole2.h&gt;</CODE></P>

<P class="normal"><CODE>#include &lt;stdio.h&gt;</CODE></P>

<P class="normal"><CODE>#include &lt;conio.h&gt;</CODE></P>

<P class="normal"></P>

<P class="normal"><CODE>// Function declarations</CODE></P>

<P class="normal"><CODE>inline void TESTHR(HRESULT x) {if FAILED(x) _com_issue_error(x);};</CODE></P>

<P class="normal"><CODE>void HandlerX(void);</CODE></P>

<P class="normal"><CODE>void PrintProviderError(_ConnectionPtr pConnection);</CODE></P>

<P class="normal"><CODE>void PrintComError(_com_error &amp;e);</CODE></P>

<P class="normal"></P>

<P class="normal"><CODE>//////////////////////////////////////////////////////////</CODE></P>

<P class="normal"><CODE>//                                                      //</CODE></P>

<P class="normal"><CODE>//     Main Function                                    //</CODE></P>

<P class="normal"><CODE>//                                                      //</CODE></P>

<P class="normal"><CODE>//////////////////////////////////////////////////////////</CODE></P>

<P class="normal"></P>

<P class="normal"><CODE>void main()</CODE></P>

<P class="normal"><CODE>{</CODE></P>

<P class="normal"><CODE>HRESULT  hr = S_OK;</CODE></P>

<P class="normal"><CODE>hr = ::CoInitialize(NULL);</CODE></P>

<P class="normal"><CODE>if (SUCCEEDED(hr))</CODE></P>

<P class="normal"><CODE>{</CODE></P>

<P class="normal"><CODE>HandlerX();</CODE></P>

<P class="normal"><CODE>printf("Press any key to continue...");</CODE></P>

<P class="normal"><CODE>getch();</CODE></P>

<P class="normal"><CODE>::CoUninitialize();</CODE></P>

<P class="normal"><CODE>}</CODE></P>

<P class="normal"><CODE>}</CODE></P>

<P class="normal"></P>

<P class="normal"><CODE>//////////////////////////////////////////////////////////</CODE></P>

<P class="normal"><CODE>//                                                      //</CODE></P>

<P class="normal"><CODE>//          HandlerX Function                           //</CODE></P>

<P class="normal"><CODE>//                                                      //</CODE></P>

<P class="normal"><CODE>//////////////////////////////////////////////////////////</CODE></P>

<P class="normal"></P>

<P class="normal"><CODE>void HandlerX(void) </CODE></P>

<P class="normal"><CODE>{</CODE></P>

<P class="normal"><CODE>HRESULT  hr = S_OK;</CODE></P>

<P class="normal"></P>

<P class="normal"><CODE>// Define ADO object pointers.</CODE></P>

<P class="normal"><CODE>// Initialize pointers on define.</CODE></P>

<P class="normal"><CODE>// These are in the ADODB::  namespace.   </CODE></P>

<P class="normal"><CODE>_RecordsetPtr  pRst  = NULL;</CODE></P>

<P class="normal"></P>

<P class="normal"><CODE>//Define RDS object pointers.</CODE></P>

<P class="normal"><CODE>RDS::IBindMgrPtr dc;</CODE></P>

<P class="normal"></P>

<P class="normal"><CODE>try</CODE></P>

<P class="normal"><CODE>{</CODE></P>

<P class="normal"><CODE>TESTHR(hr = dc.CreateInstance(__uuidof(RDS::DataControl)));</CODE></P>

<P class="normal"><CODE>dc-&gt;Handler = "MSDFMAP.Handler";</CODE></P>

<P class="normal"><CODE>dc-&gt;Server = "http://MyServer";</CODE></P>

<P class="normal"><CODE>dc-&gt;Connect = "Data Source=AuthorDatabase";</CODE></P>

<P class="normal"><CODE>dc-&gt;SQL = "AuthorById('267-41-2394')";</CODE></P>

<P class="normal"></P>

<P class="normal"><CODE>// Retrieve the record.</CODE></P>

<P class="normal"><CODE>dc-&gt;Refresh();</CODE></P>

<P class="normal"></P>

<P class="normal"><CODE>// Use another Recordset as a convenience.</CODE></P>

<P class="normal"><CODE>pRst = dc-&gt;GetRecordset();</CODE></P>

<P class="normal"><CODE>printf("Author is %s %s",(LPSTR) (_bstr_t) pRst-&gt;Fields-&gt;GetItem("au_fname")-&gt;Value,\</CODE></P>

<P class="normal"><CODE>(LPSTR) (_bstr_t) pRst-&gt;Fields-&gt;GetItem("au_lname")-&gt;Value);</CODE></P>

<P class="normal"><CODE>pRst-&gt;Close();</CODE></P>

<P class="normal"><CODE></CODE></P>

<P class="normal"><CODE>}  // End Try statement.</CODE></P>

<P class="normal"><CODE>catch (_com_error &amp;e)</CODE></P>

<P class="normal"><CODE>{</CODE></P>

<P class="normal"><CODE>PrintProviderError(pRst-&gt;GetActiveConnection());</CODE></P>

<P class="normal"><CODE>PrintComError(e);</CODE></P>

<P class="normal"><CODE>}</CODE></P>

<P class="normal"></P>

<P class="normal"><CODE>}</CODE></P>

<P class="normal"></P>

<P class="normal"><CODE>//////////////////////////////////////////////////////////</CODE></P>

<P class="normal"><CODE>//                                                      //</CODE></P>

<P class="normal"><CODE>//      PrintProviderError Function                     //</CODE></P>

<P class="normal"><CODE>//                                                      //</CODE></P>

<P class="normal"><CODE>//////////////////////////////////////////////////////////</CODE></P>

<P class="normal"></P>

<P class="normal"><CODE>void PrintProviderError(_ConnectionPtr pConnection)</CODE></P>

<P class="normal"><CODE>{</CODE></P>

<P class="normal"><CODE>// Print Provider Errors from Connection object.</CODE></P>

<P class="normal"><CODE>// pErr is a record object in the Connection's Error collection.</CODE></P>

<P class="normal"><CODE>ErrorPtr    pErr  = NULL;</CODE></P>

<P class="normal"><CODE>long      nCount  = 0;     </CODE></P>

<P class="normal"><CODE>long      i  = 0;</CODE></P>

<P class="normal"></P>

<P class="normal"><CODE>if( (pConnection-&gt;Errors-&gt;Count) &gt; 0)</CODE></P>

<P class="normal"><CODE>{</CODE></P>

<P class="normal"><CODE>nCount = pConnection-&gt;Errors-&gt;Count;</CODE></P>

<P class="normal"><CODE>// Collection ranges from 0 to nCount -1.</CODE></P>

<P class="normal"><CODE>for(i = 0; i &lt; nCount; i++)</CODE></P>

<P class="normal"><CODE>{</CODE></P>

<P class="normal"><CODE>pErr = pConnection-&gt;Errors-&gt;GetItem(i);</CODE></P>

<P class="normal"><CODE>printf("\t Error number: %x\t%s", pErr-&gt;Number, pErr-&gt;Description);</CODE></P>

<P class="normal"><CODE>}</CODE></P>

<P class="normal"><CODE>}</CODE></P>

<P class="normal"><CODE>}</CODE></P>

<P class="normal"></P>

<P class="normal"><CODE>//////////////////////////////////////////////////////////</CODE></P>

<P class="normal"><CODE>//                                                        </CODE></P>

<P class="normal"><CODE>//      PrintComError Function                          //</CODE></P>

<P class="normal"><CODE>//                                                      //</CODE></P>

<P class="normal"><CODE>//////////////////////////////////////////////////////////</CODE></P>

<P class="normal"></P>

<P class="normal"><CODE>void PrintComError(_com_error &amp;e)</CODE></P>

<P class="normal"><CODE>{</CODE></P>

<P class="normal"><CODE>_bstr_t bstrSource(e.Source());</CODE></P>

<P class="normal"><CODE>_bstr_t bstrDescription(e.Description());</CODE></P>

<P class="normal"><CODE></CODE></P>

<P class="normal"><CODE>// Print Com errors.  </CODE></P>

<P class="normal"><CODE>printf("Error\n");</CODE></P>

<P class="normal"><CODE>printf("\tCode = %08lx\n", e.Error());</CODE></P>

<P class="normal"><CODE>printf("\tCode meaning = %s\n", e.ErrorMessage());</CODE></P>

<P class="normal"><CODE>printf("\tSource = %s\n", (LPCSTR) bstrSource);</CODE></P>

<P class="normal"><CODE>printf("\tDescription = %s\n", (LPCSTR) bstrDescription);</CODE></P>

<P class="normal"><CODE></CODE></P>

<P class="normal"><CODE>}</CODE></P>

<P class="normal"></P>

<P class="normal"><CODE>// EndHandlerCpp</CODE></P>

<H4 class="dtH4">See Also</H4>

<P><A HREF="mdobjdatacontrol.htm">DataControl Object (RDS)</A> | <A HREF="mdprohandlerpropertyrds.htm">Handler Property (RDS)</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
<P align="center"><A HREF="ado_sdk_copyright_and_trademarks.htm">&copy; 1998-2003 Microsoft Corporation. All rights reserved.</A></P>
</BODY>
</HTML>

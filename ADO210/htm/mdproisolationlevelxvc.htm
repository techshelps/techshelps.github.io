<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>IsolationLevel and Mode Properties Example (VC++)</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/samples.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannerparthead td" nowrap>ADO 2.5 Samples</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="mdproisolationlevelxvc"></A>IsolationLevel and Mode Properties Example (VC++)</H1>

<P>This example uses the <A HREF="mdpromode.htm">Mode</A> property to open an exclusive connection, and the <A HREF="mdproisolationlevel.htm">IsolationLevel</A> property to open a transaction that is conducted in isolation of other transactions.</P>

<PRE class="code">// BeginIsolationLevelCpp
#import "C:\Program Files\Common Files\System\ADO\msado15.dll"\
    no_namespace rename("EOF","EndOfFile")

#include &lt;ole2.h&gt;
#include &lt;stdio.h&gt;
#include &lt;conio.h&gt;
#include "IsolationLevelX.h"

// Function Declarations
inline void TESTHR(HRESULT x) {if FAILED(x) _com_issue_error(x);};
void IsolationLevelX(void);
void PrintProviderError(_ConnectionPtr pConnection);
void PrintComError(_com_error &amp;e);

/////////////////////////////////////////////////////////////////
//                                                             //
//                                                             //
//                        Main Function                        //
//                                                             //
//                                                             //
/////////////////////////////////////////////////////////////////

void main()
{
    if(FAILED(::CoInitialize(NULL)))
        return;

    IsolationLevelX();
    
    printf("Press any key to continue...");
    getch();
    ::CoUninitialize();
}

/////////////////////////////////////////////////////////////////
//                                                             //
//      IsolationLevelX()  Function                            //
//                                                             //
/////////////////////////////////////////////////////////////////

void IsolationLevelX(void)
{
    // Define ADO ObjectPointers
    // Initialize Pointers on define
    // These are in the ADODB :: namespace
    _RecordsetPtr  pRstTitles  = NULL;
    _ConnectionPtr pConnection = NULL;

    // Define other Variables
    HRESULT hr = S_OK;
    IADORecordBinding *picRs  = NULL;  // Interface Pointer Declared
    CTitleRs titlers;                  // C++ Class Object
    LPSTR p_TempStr = NULL;
        
    //Assign Connection String to Variable
    _bstr_t strCnn("Provider='sqloledb';Data Source='MySqlServer';"
                    "Initial Catalog='pubs';Integrated Security='SSPI';");

    try
    {
        // Open Connection and Titles Table
        TESTHR(pConnection.CreateInstance(__uuidof(Connection)));
        pConnection-&gt;Mode = adModeShareExclusive;
        pConnection-&gt;IsolationLevel = adXactIsolated;
        pConnection-&gt;Open(strCnn,"","",adConnectUnspecified);

        TESTHR(pRstTitles.CreateInstance(__uuidof(Recordset)));
        pRstTitles-&gt;CursorType = adOpenDynamic;
        pRstTitles-&gt;LockType = adLockPessimistic;

        pRstTitles-&gt;Open("titles",_variant_t((IDispatch*) pConnection,
            true),adOpenDynamic,adLockPessimistic,adCmdTable);

        pConnection-&gt;BeginTrans();

        // Display Connection Mode
        if(pConnection-&gt;Mode == adModeShareExclusive)
        {
            printf("Connection Mode Is Exclusive");
        }
        else
        {
            printf("Connection Mode Is Not Exclusive");      
        }

        // Display Isolation Level 
        if(pConnection-&gt;IsolationLevel == adXactIsolated)
        {
            printf("\n\nTransaction is Isolated");
            printf("\n\nPress any key to continue...\n\n");
            getch();
        }
        else
        {
            printf("\n\nTransaction is not Isolated");
            printf("\n\nPress any key to continue...\n\n");
            getch();
        }

        // Open an IADORecordBinding interface pointer which 
        // we will use for binding Recordset to a class
        TESTHR(pRstTitles-&gt;QueryInterface(
            __uuidof(IADORecordBinding),(LPVOID*)&amp;picRs));

        // Bind the Recordset to a C++ class here
        TESTHR(picRs-&gt;BindToRecordset(&amp;titlers));

        // Change the type of psychology titles.
        p_TempStr = (LPSTR) malloc(sizeof(titlers.m_szau_Type));

        while (!(pRstTitles-&gt;EndOfFile))
        {
            // Set the final character of the destination string to NULL.
            p_TempStr[sizeof(titlers.m_szau_Type)-1] = '\0';
            // The source string will get truncated if its length is 
            // longer than the length of the destination string minus one.
            strncpy(p_TempStr,strtok(titlers.m_szau_Type," "),sizeof(titlers.m_szau_Type)-1);
            
            // Compare type with psychology
            if (!strcmp(p_TempStr,"psychology")) 
            {
                // Set the final character of the destination string to NULL.
                titlers.m_szau_Type[sizeof(titlers.m_szau_Type)-1] = '\0';
                // Copy "self_help" title field
                // The source string will get truncated if its length is 
                // longer than the length of the destination string minus one.
                strncpy(titlers.m_szau_Type,"self_help",sizeof(titlers.m_szau_Type)-1);
                picRs-&gt;Update(&amp;titlers);
            }
            pRstTitles-&gt;MoveNext();
        }
        // Print current data in recordset.
        pRstTitles-&gt;Requery(adOptionUnspecified);

        // Open again IADORecordBinding interface pointer for Binding 
        // Recordset to a class.
        TESTHR(pRstTitles-&gt;QueryInterface(
            __uuidof(IADORecordBinding),(LPVOID*)&amp;picRs));

        // ReBinding the Recordset to a C++ Class
        TESTHR(picRs-&gt;BindToRecordset(&amp;titlers));

        // Move to the first record of the title table
        pRstTitles-&gt;MoveFirst();

        //Clear the screen for the next display
        system("cls");

        while (!pRstTitles-&gt;EndOfFile)
        {
            printf("%s -  %s\n",titlers.lau_TitleStatus == adFldOK ? 
                titlers.m_szau_Title :"&lt;NULL&gt;",
                titlers.lau_TypeStatus == adFldOK ? 
                titlers.m_szau_Type :"&lt;NULL&gt;");
            pRstTitles-&gt;MoveNext();
        }
    }
    catch(_com_error &amp;e)
    {
        // Notify the user of errors if any.
        PrintProviderError(pConnection);
        PrintComError(e);
    }
    
    // Clean up objects before exit.
    //Release the IADORecordset Interface here   
    if (picRs)
        picRs-&gt;Release();
        
    if (pRstTitles)
        if (pRstTitles-&gt;State == adStateOpen)
            pRstTitles-&gt;Close();
    if (pConnection)
        if (pConnection-&gt;State == adStateOpen)
        {
            // Restore Original Data
            pConnection-&gt;RollbackTrans();

            pConnection-&gt;Close();
        }

    // Deallocate the memory
    if (p_TempStr)
        free(p_TempStr);
}

/////////////////////////////////////////////////////////////////
//                                                             //
//                  PrintProviderError Function                //
//                                                             //
/////////////////////////////////////////////////////////////////

void PrintProviderError(_ConnectionPtr pConnection)
{
    //Print Provider Errors from Connection object
    //pErr is a record object in the Connection's Error collection
    ErrorPtr    pErr = NULL;

    if((pConnection-&gt;Errors-&gt;Count)&gt;0)
    {
        long nCount = pConnection-&gt;Errors-&gt;Count;

        //Collection ranges from 0 to nCount-1
        for(long i = 0;i &lt; nCount;i++)
        {
            pErr = pConnection-&gt;Errors-&gt;GetItem(i);
            printf("\t Error Number :%x \t %s",pErr-&gt;Number,
                (LPCSTR) pErr-&gt;Description);
        }
    }
}

///////////////////////////////////////////////////////////
//                                                       //
//      PrintComError Function                           //
//                                                       //
///////////////////////////////////////////////////////////

void PrintComError(_com_error &amp;e)
{
   _bstr_t bstrSource(e.Source());
   _bstr_t bstrDescription(e.Description());

    // Print Com errors.
    printf("Error\n");
    printf("\tCode = %08lx\n", e.Error());
    printf("\tCode meaning = %s\n", e.ErrorMessage());
    printf("\tSource = %s\n", (LPCSTR) bstrSource);
    printf("\tDescription = %s\n", (LPCSTR) bstrDescription);
}
// EndIsolationLevelCpp
</PRE>

<P class="label"><B>IsolationLevelX.h</B></P>

<PRE class="code">// BeginIsolationLevelH

#include "icrsint.h"

//This class extracts titles and type from Title table

class CTitleRs : public CADORecordBinding
{
BEGIN_ADO_BINDING(CTitleRs)
        // Column title is the 2nd field in the table
        ADO_VARIABLE_LENGTH_ENTRY2(2,adVarChar,m_szau_Title,
            sizeof(m_szau_Title),lau_TitleStatus,FALSE)
        // Column type is the 3rd field in the table
        ADO_VARIABLE_LENGTH_ENTRY2(3,adVarChar,m_szau_Type,
            sizeof(m_szau_Type),lau_TypeStatus,TRUE)
END_ADO_BINDING()

public:
    CHAR  m_szau_Title[81];
    ULONG lau_TitleStatus;
    CHAR  m_szau_Type[13];
    ULONG lau_TypeStatus;
};
// EndIsolationLevelH</PRE>

<H4 class="dtH4">See Also</H4>

<P><A HREF="mdproisolationlevel.htm">IsolationLevel Property</A> | <A HREF="mdpromode.htm">Mode Property</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
<P align="center"><A HREF="ado_sdk_copyright_and_trademarks.htm">&copy; 1998-2003 Microsoft Corporation. All rights reserved.</A></P>
</BODY>
</HTML>

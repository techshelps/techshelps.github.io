<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>MarshalOptions Property Example (VJ++)</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/samples.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannerparthead td" nowrap>ADO 2.5 Samples</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="mdpromarshaloptionsxvj"></A>MarshalOptions Property Example (VJ++)</H1>

<P>This example uses the <A HREF="mdpromarshaloptions.htm">MarshalOptions</A> property to specify what rows are sent back to the server&#0151;All Rows or only Modified Rows.</P>

<PRE class="code">// BeginMarshalOptionsJ
import java.io.*;
import com.ms.wfc.data.*;

public class MarshalOptionsX
{
   // The main entry point for the application.
   public static void main (String[] args)
   {
      MarshalOptionsX();
      System.exit(0);
   }
   // MarshalX Function

   static void MarshalOptionsX()
   {
      // Define ADO Objects
      Recordset rstEmployees = null;

      // Declarations
      BufferedReader in = 
         new BufferedReader(new InputStreamReader(System.in));
      String line = null;

      try
      {

         // Open Recordset with names from Employees Table.
         String strCnn = " Provider='sqloledb';Data Source='MySqlServer';" +
                "Initial Catalog='Pubs';Integrated Security='SSPI';";

         rstEmployees = new Recordset();
         rstEmployees.setCursorType(AdoEnums.CursorType.KEYSET);
         rstEmployees.setLockType(AdoEnums.LockType.OPTIMISTIC);
         rstEmployees.setCursorLocation(AdoEnums.CursorLocation.CLIENT);

         rstEmployees.open(
            "SELECT fname,lname from Employee ORDER BY lname", 
            strCnn,AdoEnums.CursorType.KEYSET, 
            AdoEnums.LockType.OPTIMISTIC, AdoEnums.CommandType.TEXT);

         // Store original data
         String strOldFirst = rstEmployees.getField("fname").getString();
         String strOldLast = rstEmployees.getField("lname").getString();

         // Change data in edit buffer
         rstEmployees.getField("fname").setString("Linda");
         rstEmployees.getField("lname").setString("Kobara");

         // Show contents of buffer and get user input
         String strMessage = "Edit in progress: "+ "\n"+
                   "Original Data  = \t"+ strOldFirst +" "+
                   strOldLast + "\n" + "Data in Buffer = \t"+
                   rstEmployees.getField("fname").getString()+ " " +
                   rstEmployees.getField("lname").getString()+"\n"+"\n"+
                   "Use Update to replace the original data with " +
                   "the buffered data in the recordset";
         String strMarshalAll = "Would you like to send all the rows" +
                     " in the recordset back to the server";
         String strMarshalModified = "Would you like to send only "+
                         " modified rows back to the server";

         System.out.println(strMessage + "\nEnter (Y/N)...");

         if (in.readLine().equalsIgnoreCase("Y"))
         {
            System.out.println(strMarshalAll);
            System.out.println("\nEnter (Y/N)...");

            if(in.readLine().equalsIgnoreCase("Y"))
            {
               rstEmployees.setMarshalOptions(AdoEnums.MarshalOptions.ALL);
               rstEmployees.update();
            }
            else
            {
               System.out.println(strMarshalModified);
               System.out.println("\nEnter (Y/N)...");

               if (in.readLine().equalsIgnoreCase("Y"))
               {
                  rstEmployees.setMarshalOptions(
                     AdoEnums.MarshalOptions.MODIFIEDONLY);
                  rstEmployees.update();
               }
            }

         }

         // Show the resulting data
         System.out.println("\nData in recordset = " + 
            rstEmployees.getField("fname").getString() + 
            " " + rstEmployees.getField("lname").getString());

         // Restore original data because this is a demonstration
         if (!((strOldFirst.equals(rstEmployees.getField("fname")))
            &amp;&amp;(strOldLast.equals(rstEmployees.getField("lname")))))
         {
            rstEmployees.getField("fname").setString(strOldFirst);
            rstEmployees.getField("lname").setString(strOldLast);
            rstEmployees.update();
         }
         
         System.out.println("\n\nPress &lt;Enter&gt; to continue..");
         in.readLine();
      }

      catch(AdoException ae)
      {
         // Notify the user of any errors that result from ADO

         // As passing a connection, check for null pointer first
         if(rstEmployees!= null)
         {
            PrintProviderError(rstEmployees.getActiveConnection());
         }
         else
         {
            System.out.println("Exception: " + ae.getLocalizedMessage());
         }
      }

      // System Read requires this catch
      catch(java.io.IOException je)
      {
         PrintIOError(je);
      }   
      
      finally
      {
         // Cleanup objects before exit.   
         if (rstEmployees != null)
            if (rstEmployees.getState() == 1)
               rstEmployees.close();
      }
   }

   // PrintProviderError Function

   static void PrintProviderError( Connection Cnn1 )
   {
      // Print Provider errors from Connection object.
      // ErrItem is an item object in the Connections Errors collection.
      com.ms.wfc.data.Error  ErrItem = null;
      long nCount = 0;
      int  i      = 0;

      nCount = Cnn1.getErrors().getCount();

      // If there are any errors in the collection, print them.
      if( nCount &gt; 0);
      {
         // Collection ranges from 0 to nCount - 1
         for (i = 0; i&lt; nCount; i++)
         {
            ErrItem = Cnn1.getErrors().getItem(i);
            System.out.println("\t Error number: " + ErrItem.getNumber()
               + "\t" + ErrItem.getDescription() );
         }
      }

   }

   // PrintIOError Function

   static void PrintIOError( java.io.IOException je)
   {
      System.out.println("Error \n");
      System.out.println("\tSource = " + je.getClass() + "\n");
      System.out.println("\tDescription = " + je.getMessage() + "\n");
   }
}
// EndMarshalOptionsJ</PRE>

<H4 class="dtH4">See Also</H4>

<P><A HREF="mdpromarshaloptions.htm">MarshalOptions Property</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
<P align="center"><A HREF="ado_sdk_copyright_and_trademarks.htm">&copy; 1998-2003 Microsoft Corporation. All rights reserved.</A></P>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Visual C++ Extensions for ADO</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/ADO.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannerparthead td" nowrap>ADO 2.5 Appendixes</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="mdmscadovcextensions"></A>Visual C++ Extensions for ADO</H1>

<P>The preferred method of programming ADO with Visual C++ is using the <B>#import</B> directive, as discussed in <A HREF="mdhowhowvcusersshouldreadadodocumentation.htm">Microsoft Visual C++ ADO Programming</A>. However, earlier versions of ADO shipped with an alternate method of programming using Visual C++: the Visual C++ Extensions. This section documents this feature for those who must maintain Visual C++ Extensions code, but new ADO code should be written using #<B>import</B>.</P>

<P>One of the most tedious jobs Visual C++ programmers face when retrieving data with ADO is converting data returned as a VARIANT data type into a C++ data type, and then storing the converted data in a class or structure. In addition to being cumbersome, retrieving C++ data through a VARIANT data type diminishes performance.</P>

<P>ADO provides an interface that supports retrieving data into native C/C++ data types without going through a VARIANT, and also provides preprocessor macros that simplify using the interface. The result is a flexible tool that is easier to use and has great performance.</P>

<P>A common C/C++ client scenario is to bind a record in a <A HREF="mdobjodbrec.htm">Recordset</A> to a C/C++ struct or class containing native C/C++ types. When going through VARIANTs, this involves writing conversion code from VARIANT to C/C++ native types. The Visual C++ Extensions for ADO are targeted at making this scenario much easier for the Visual C++ programmer.</P>

<P>See the following topics to learn more about the Visual C++ Extensions for ADO.

<UL type="disc">
	<LI><A HREF="mdmscusingadovcextensions.htm">Using Visual C++ Extensions for ADO</A></li>

	<LI><A HREF="mdmscvcextensionsheaderindetail.htm">Visual C++ Extensions Header</A></li>

	<LI><A HREF="mdmscexampleadowithextensions.htm">ADO with Visual C++ Extensions Example</A></li>
</UL>

<H4 class="dtH4">See Also</H4>

<P><A HREF="mdidxadoforvcppsyntax.htm">ADO for Visual C++ Syntax Index for COM</A> | <A HREF="mdmscexampleadowithextensions.htm">ADO with Visual C++ Extensions Example</A> | <A HREF="mdmscusingadovcextensions.htm">Using Visual C++ Extensions for ADO</A> | <A HREF="mdmscvcextensionsheaderindetail.htm">Visual C++ Extensions Header</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
<P align="center"><A HREF="ado_sdk_copyright_and_trademarks.htm">&copy; 1998-2003 Microsoft Corporation. All rights reserved.</A></P>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Groups and Users Append, ChangePassword Methods Example (VC++)</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/samples.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannerparthead td" nowrap>ADOX 2.5</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="admthgroupsusersappendxvc"></A>Groups and Users Append, ChangePassword Methods Example (VC++)</H1>

<P>This example demonstrates the <A HREF="admthappendgroups.htm">Append</A> method of <A HREF="adcolgroups.htm">Groups</A>, as well as the <A HREF="admthappendusers.htm">Append</A> method of <A HREF="adcolusers.htm">Users</A> by adding a new <A HREF="adobjgroup.htm">Group</A> and a new <A HREF="adobjuser.htm">User</A> to the system. The new <B>Group</B> is appended to the <B>Groups</B> collection of the new <B>User</B>. Consequently, the new <B>User</B> is added to the <B>Group</B>. Also, the <A HREF="admthchangepassword.htm">ChangePassword</A> method is used to specify the <B>User</B> password.</P>

<PRE class="code">// BeginGroupCpp
#import "c:\Program Files\Common Files\system\ado\msadox.dll" no_namespace

#include "iostream.h"
#include "stdio.h"
#include "conio.h"

//Function declarations
void GroupX(void);
inline void TESTHR(HRESULT x) {if FAILED(x) _com_issue_error(x);};

//////////////////////////////////////////////////////////
//                                                      //
//      Main Function                                   //
//                                                      //
//////////////////////////////////////////////////////////
void main()
{
    if(FAILED(::CoInitialize(NULL)))
        return; 

    GroupX();

    ::CoUninitialize();
}

//////////////////////////////////////////////////////////
//                                                      //
//         GroupX Function                              //
//                                                      //
//////////////////////////////////////////////////////////
void GroupX(void)
{
    HRESULT hr = S_OK;

    // Define ADOX object pointers.
    // Initialize pointers on define.
    // These are in the ADOX::  namespace.
    _CatalogPtr m_pCatalog   = NULL;
    _UserPtr m_pUserNew   = NULL;
    _UserPtr m_pUser  = NULL;
    _GroupPtr m_pGroup = NULL;

    // Define String Variables.
    _bstr_t strCnn("Provider='Microsoft.JET.OLEDB.4.0';"
        "Data source = 'c:\\Program Files\\Microsoft Office\\"
        "Office\\Samples\\Northwind.mdb';"
        "jet oledb:system database='c:\\Program Files\\Microsoft Office\\"
        "Office\\system.mdw'");

    try
    {
        TESTHR(hr = m_pCatalog.CreateInstance(__uuidof (Catalog)));
        m_pCatalog-&gt;PutActiveConnection(strCnn);

        // Create and append new group with a string.
        m_pCatalog-&gt;Groups-&gt;Append("Accounting");

        // Create and append new user with an object.
        TESTHR(hr = m_pUserNew.CreateInstance(__uuidof(User)));
        m_pUserNew-&gt;PutName("Pat Smith");
        m_pUserNew-&gt;ChangePassword("","Password1");
        m_pCatalog-&gt;Users-&gt;Append(
            _variant_t((IDispatch *)m_pUserNew),"");

        // Make the user Pat Smith a member of the 
        // Accounting group by creating and adding the
        // appropriate Group object to the user's Groups 
        // collection.The same is accomplished if a User
        // object representing Pat Smith is created and 
        // appended to the Accounting group Users collection 
        m_pUserNew-&gt;Groups-&gt;Append("Accounting");

        // Enumerate all User objects in the 
        // catalog's Users collection.
        long lUsrIndex;
        long lGrpIndex;
        _variant_t vIndex;
        for (lUsrIndex=0; lUsrIndex&lt;m_pCatalog-&gt;Users-&gt;Count; lUsrIndex++)
        {
            vIndex = lUsrIndex;
            m_pUser = m_pCatalog-&gt;Users-&gt;GetItem(vIndex);
            cout&lt;&lt;"  "&lt;&lt;m_pUser-&gt;Name &lt;&lt;endl;
            cout&lt;&lt;"   Belongs to these groups:"&lt;&lt;endl;

            // Enumerate all Group objects in each User
            // object's Groups collection.
            if(m_pUser-&gt;Groups-&gt;Count != 0)
            {
                for(lGrpIndex=0;lGrpIndex&lt;m_pUser-&gt;Groups-&gt;Count;lGrpIndex++)
                {
                    vIndex = lGrpIndex;
                    m_pGroup = m_pUser-&gt;Groups-&gt;GetItem(vIndex);
                    cout&lt;&lt;"     "&lt;&lt; m_pGroup-&gt;Name&lt;&lt;endl;
                }
            }
            else
                cout&lt;&lt;"       [None]"&lt;&lt;endl;
        }

        // Enumerate all Group objects in the default 
        // workspace's Groups collection.
        for (lGrpIndex=0; lGrpIndex&lt;m_pCatalog-&gt;Groups-&gt;Count; lGrpIndex++)
        {
            vIndex = lGrpIndex;
            m_pGroup = m_pCatalog-&gt;Groups-&gt;GetItem(vIndex);
            cout&lt;&lt;"   "&lt;&lt; m_pGroup-&gt;Name &lt;&lt;endl;
            cout&lt;&lt;"    Has as its members:"&lt;&lt;endl;
            
            // Enumerate all User objects in each Group
            // object's Users Collection.
            if(m_pGroup-&gt;Users-&gt;Count != 0)
            {
                for (lUsrIndex=0; lUsrIndex&lt;m_pGroup-&gt;Users-&gt;Count; lUsrIndex++)
                {
                    vIndex = lUsrIndex;
                    m_pUser = m_pGroup-&gt;Users-&gt;GetItem(vIndex);
                    cout&lt;&lt;"    "&lt;&lt;m_pUser-&gt;Name&lt;&lt;endl;
                }
            }
            else
                cout&lt;&lt;"      [None]"&lt;&lt;endl;
        }

        // Delete new User and Group object because this 
        // is only a demonstration.
        m_pCatalog-&gt;Users-&gt;Delete("Pat Smith");
        m_pCatalog-&gt;Groups-&gt;Delete("Accounting");
    }
    catch(_com_error &amp;e)
    {
        // Notify the user of errors if any.
        _bstr_t bstrSource(e.Source());
        _bstr_t bstrDescription(e.Description());
          
        printf("\n\tSource :  %s \n\tdescription : %s \n ",
             (LPCSTR)bstrSource,(LPCSTR)bstrDescription);
    }
    catch(...)
    {
        cout &lt;&lt; "Error occured in include files...."&lt;&lt; endl;
    }
}
// EndGroupCpp</PRE>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
<P align="center"><A HREF="ado_sdk_copyright_and_trademarks.htm">&copy; 1998-2003 Microsoft Corporation. All rights reserved.</A></P>
</BODY>
</HTML>

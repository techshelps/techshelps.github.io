<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>The Recordset Object Open Method</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/ADO.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannerparthead td" nowrap>ADO 2.5</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="mdconrecordsetopen"></A>The Recordset Object Open Method</H1>

<P>Everything you need to open an ADO <B>Recordset</B> is built into the <B>Open</B> method. You can use it without explicitly creating any other objects. The syntax of this method is as follows:</P>

<PRE class="syntax"><I>recordset</I>.<B>Open</B> <I>Source, ActiveConnection, CursorType, LockType, Options</I></PRE>

<P>All arguments are optional because the information they pass can be communicated to ADO in other ways. However, understanding each argument will help you to understand many important ADO concepts. The following topics will examine each argument of this method in more detail.</P>

<H2 class="dtH2">Source and Options Arguments</H2>

<P>The <I>Source</I> and <I>Options</I> arguments appear in the same topic because they are closely related.</P>

<PRE class="syntax"><I>recordset</I>.Open <I><B>Source</B>, ActiveConnection, CursorType, LockType, <B>Options</B></I></PRE>

<P>The <I>Source</I> argument is a <B>Variant</B> that evaluates to a valid <B>Command</B> object, a text command (e.g., a SQL statement), a table name, a stored procedure call, a URL, or the name of a file or <B>Stream</B> object containing a persistently stored <B>Recordset</B>. If <I>Source</I> is a file path name, it can be a full path ("C:\dir\file.rst"), a relative path ("..\file.rst"), or a URL ("http://files/file.rst"). You can also specify this information in the <B>Recordset</B> object <B>Source</B> property and leave the <I>Source </I>argument blank.</P>

<P>The <I>Options</I> argument is a <B>Long</B> value that indicates either or both of the following:

<UL type="disc">
	<LI>How the provider should evaluate the <I>Source</I> argument if it represents something other than a <B>Command</B> object.</li>

	<LI>That the <B>Recordset</B> should be restored from a file where it was previously saved.</li>
</UL>

<P>This argument can contain a bitmask of <B>CommandTypeEnum</B> or <B>ExecuteOptionEnum</B> values. A <B>CommandTypeEnum</B> passed in the <I>Options</I> argument sets the <B>CommandType</B> property of the <B>Recordset</B>.</P>

<BLOCKQUOTE class="dtBlock">
<b class="le">Note&nbsp;&nbsp;&nbsp;</b>The <B>ExecuteOpenEnum</B> values of <B>adExecuteNoRecords</B> and <B>adExecuteStream</B> cannot be used with <B>Open</B>.</BLOCKQUOTE>

<P>If the <B>CommandType</B> property value equals <B>adCmdUnknown</B> (the default value), you might experience diminished performance, because ADO must make calls to the provider to determine whether the <B>CommandText</B> property is a SQL statement, a stored procedure, or a table name. If you know what type of command you are using, setting the <B>CommandType</B> property instructs ADO to go directly to the relevant code. If the <B>CommandType</B> property does not match the type of command in the <B>CommandText</B> property, an error occurs when you call the <B>Open</B> method.</P>

<P>For more information about using these enumerated constants for <I>Options</I> and with other ADO methods and properties, see <A HREF="mdcstcommandtypeenum.htm">CommandTypeEnum</A> and <A HREF="mdcstexecuteoptionenum.htm">ExecuteOptionEnum</A>.</P>

<H2 class="dtH2">ActiveConnection Argument</H2>

<P>You can pass in either a <B>Connection</B> object or a connection string as the <I>ActiveConnection</I> argument. </P>

<PRE class="syntax"><I>recordset</I>.Open <I>Source, <B>ActiveConnection</B>, CursorType, LockType, Options</I></PRE>

<P>The <I>ActiveConnection</I> argument corresponds to the <B>ActiveConnection</B> property and specifies in which connection to open the <B>Recordset</B> object. If you pass a connection definition for this argument, ADO opens a new connection using the specified parameters. After opening the <B>Recordset</B> with a client-side cursor (<B>CursorLocation</B> = <B>adUseClient</B>), you can change the value of this property to send updates to another provider. Or you can set this property to Nothing (in Microsoft Visual Basic) or NULL to disconnect the <B>Recordset</B> from any provider. Changing <B>ActiveConnection</B> for a server-side cursor generates an error, however.</P>

<P>If you pass a <B>Command</B> object in the <I>Source</I> argument and also pass an <I>ActiveConnection</I> argument, an error occurs because the <B>ActiveConnection</B> property of the <B>Command</B> object must already be set to a valid <B>Connection</B> object or connection string.</P>

<H2 class="dtH2">CursorType Argument</H2>

<PRE class="syntax"><I>recordset</I>.Open <I>Source, ActiveConnection, <B>CursorType</B>, LockType, Options</I></PRE>

<P>As discussed in <A HREF="mdconcursorlocationsignificance.htm">The Significance of Cursor Location</A>, the type of cursor that your application uses will determine which capabilities are available to the resultant <B>Recordset</B> (if any). For a detailed examination of cursor types, see <A HREF="mdconcursorsandlocks.htm">Chapter 8: Understanding Cursors and Locks</A>.</P>

<P>The <I>CursorType</I> argument can accept any of the <B>CursorTypeEnum</B> values.</P>

<H2 class="dtH2">LockType Argument</H2>

<PRE class="syntax"><I>recordset</I>.Open <I>Source, ActiveConnection, CursorType, <B>LockType</B>, Options</I></PRE>

<P>Set the <I>LockType</I> argument to specify what type of locking the provider should use when opening the <B>Recordset</B>. The different types of locking are discussed in <A HREF="mdconcursorsandlocks.htm">Chapter 8: Understanding Cursors and Locks</A>.</P>

<P>The <I>LockType</I> argument can accept any of the <B>LockTypeEnum</B> values.</P>

<H2 class="dtH2">Retrieving Multiple Recordsets</H2>

<P>You might occasionally need to execute a command that will return more than one result set. A common example is a stored procedure that runs against a SQL Server database, as in the following example. The stored procedure contains a COMPUTE clause to return the average price of all products in the table. The definition of the stored procedure is as follows:</P>

<PRE class="code">CREATE PROCEDURE ProductsWithAvgPrice 
AS
SELECT ProductID, ProductName, UnitPrice 
  FROM PRODUCTS 
  COMPUTE AVG(UnitPrice)</PRE>

<P>The <A HREF="mdrefsqlprovspec.htm">Microsoft OLE DB Provider for SQL Server</A> returns multiple result sets to ADO when the command contains a COMPUTE clause. Therefore, the ADO code must use the <B>NextRecordset</B> method to access the data in the second result set, as shown here:</P>

<PRE class="code">'BeginNextRs
    On Error GoTo ErrHandler:
    
    Dim objConn As New ADODB.Connection
    Dim objCmd As New ADODB.Command
    Dim objRs As New ADODB.Recordset

    Set objConn = GetNewConnection
    objCmd.ActiveConnection = objConn
    
    objCmd.CommandText = "ProductsWithAvgPrice"
    objCmd.CommandType = adCmdStoredProc
    
    Set objRs = objCmd.Execute
    
    Do While Not objRs.EOF
        Debug.Print objRs(0) &amp; vbTab &amp; objRs(1) &amp; vbTab &amp; _
                    objRs(2)
        objRs.MoveNext
    Loop
    
    Set objRs = objRs.NextRecordset
    
    Debug.Print "AVG. PRICE = $ " &amp; objRs(0)

    'clean up
    objRs.Close
    objConn.Close
    Set objRs = Nothing
    Set objConn = Nothing
    Set objCmd = Nothing
    Exit Sub
    
ErrHandler:
    'clean up
    If objRs.State = adStateOpen Then
        objRs.Close
    End If
    
    If objConn.State = adStateOpen Then
        objConn.Close
    End If
    
    Set objRs = Nothing
    Set objConn = Nothing
    Set objCmd = Nothing
    
    If Err &lt;&gt; 0 Then
        MsgBox Err.Source &amp; "--&gt;" &amp; Err.Description, , "Error"
    End If
'EndNextRs</PRE>

<P>For more information, see <A HREF="mdmthnextrec.htm">NextRecordset</A>.</P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
<P align="center"><A HREF="ado_sdk_copyright_and_trademarks.htm">&copy; 1998-2003 Microsoft Corporation. All rights reserved.</A></P>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Find Method Example (VC++)</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/samples.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannerparthead td" nowrap>ADO 2.5 Samples</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="mdmthfindxvc"></A>Find Method Example (VC++)</H1>

<P>This example uses the <A HREF="mdobjodbrec.htm">Recordset</A> object's <A HREF="mdmthfindmethodado.htm">Find</A> method to locate and count the number of business titles in the <B><I>Pubs</I></B> database. The example assumes the underlying <A HREF="mddefglossary.htm#mddefdataprovider">provider</A> does not support similar functionality.</P>

<PRE class="code">// BeginFindCpp
#import "C:\Program Files\Common Files\System\ADO\msado15.dll" \
    no_namespace rename("EOF", "EndOfFile")

#include &lt;ole2.h&gt;
#include &lt;stdio.h&gt;
#include &lt;conio.h&gt;
#include "FindX.h"

// Function declarations
inline void TESTHR(HRESULT x) {if FAILED(x) _com_issue_error(x);};
void FindX(void);
void PrintProviderError(_ConnectionPtr pConnection);
void PrintComError(_com_error &amp;e);

//////////////////////////////////////////////////////////
//                                                      //
//      Main Function                                   //
//                                                      //
//////////////////////////////////////////////////////////

void main()
{
    if(FAILED(::CoInitialize(NULL)))
        return;

    FindX();

    //Wait here for the user to see the output.
    printf("Press any key to continue...");
    getch();
    ::CoUninitialize();
}

//////////////////////////////////////////////////////////
//                                                      //
//             FindX Function                           //
//                                                      //
//////////////////////////////////////////////////////////

void FindX(void) 
{
    HRESULT    hr = S_OK;

    // Define ADO object pointers.
    // Initialize pointers on define.
    // These are in the ADODB::  namespace.
    _ConnectionPtr    pConnection  = NULL;
    _RecordsetPtr     pRstTitles   = NULL;
    IADORecordBinding   *picRs     = NULL;  //Interface Pointer declared.
    CTitlesRs titlers;                      //C++ class object

    _bstr_t strCnn("Provider='sqloledb';Data Source='MySqlServer';"
            "Initial Catalog='pubs';Integrated Security='SSPI';");

    try
    {
        // Open connection.
        TESTHR(pConnection.CreateInstance(__uuidof(Connection)));
        pConnection-&gt;Open (strCnn, "", "", adConnectUnspecified);

        // Open title Table
        TESTHR(pRstTitles.CreateInstance(__uuidof(Recordset)));
        
        pRstTitles-&gt;Open("SELECT title_id FROM titles",
            _variant_t((IDispatch *)pConnection), 
            adOpenStatic, adLockReadOnly, adCmdText);

        // The default parameters are sufficient to search forward
        // through a Recordset.

        pRstTitles-&gt;Find ("title_id LIKE 'BU%'",0,adSearchForward,"");

        //Open an IADORecordBinding interface pointer which 
        //we'll use for Binding Recordset to a class    
        TESTHR(pRstTitles-&gt;QueryInterface(
            __uuidof(IADORecordBinding),(LPVOID*)&amp;picRs));

        //Bind the Recordset to a C++ Class here    
        TESTHR(picRs-&gt;BindToRecordset(&amp;titlers));

        // Skip the current record to avoid finding the same 
        // row repeatedly. The bookmark is redundant because Find 
        // searches from the current position.
        int count = 0;

        //Continue if last find succeeded.
        while (!(pRstTitles-&gt;EndOfFile)) 
        {
            printf("Title ID: %s\n",titlers.lt_titleidStatus == adFldOK ?
                titlers.m_szt_titleid : "&lt;NULL&gt;");
            count++;                       //Count the last title found.

            _variant_t mark = pRstTitles-&gt;Bookmark;  //Note current pos.
            pRstTitles-&gt;Find("title_id LIKE 'BU%'", 1, adSearchForward, 
                mark);
        }
        printf("The number of business titles is %d\n",count);
    }
    catch(_com_error &amp;e)
    {
       // Notify the user of errors if any.
       // Pass a connection pointer accessed from the Recordset.
       PrintProviderError(pConnection);
       PrintComError(e);
    }    
   
    // Clean up objects before exit.
    //Release the IADORecordset Interface here   
    if (picRs)
        picRs-&gt;Release();
        
    if (pRstTitles)
        if (pRstTitles-&gt;State == adStateOpen)
            pRstTitles-&gt;Close();
    if (pConnection)
        if (pConnection-&gt;State == adStateOpen)
            pConnection-&gt;Close();
}

//////////////////////////////////////////////////////////
//                                                      //
//       PrintProviderError Function                    //
//                                                      //
//////////////////////////////////////////////////////////

void PrintProviderError(_ConnectionPtr pConnection)
{
    // Print Provider Errors from Connection object.
    // pErr is a record object in the Connection's Error collection.
    ErrorPtr    pErr  = NULL;

    if( (pConnection-&gt;Errors-&gt;Count) &gt; 0)
    {
        long nCount = pConnection-&gt;Errors-&gt;Count;
        // Collection ranges from 0 to nCount -1.
        for(long i = 0; i &lt; nCount; i++)
        {
            pErr = pConnection-&gt;Errors-&gt;GetItem(i);
            printf("\t Error number: %x\t%s", pErr-&gt;Number, 
                (LPCSTR)pErr-&gt;Description);
        }
    }
}

//////////////////////////////////////////////////////////
//                                                      //
//       PrintComError Function                         //
//                                                      //
//////////////////////////////////////////////////////////

void PrintComError(_com_error &amp;e)
{
   _bstr_t bstrSource(e.Source());
   _bstr_t bstrDescription(e.Description());

    // Print Com errors.
   printf("Error\n");
   printf("\tCode = %08lx\n", e.Error());
   printf("\tCode meaning = %s\n", e.ErrorMessage());
   printf("\tSource = %s\n", (LPCSTR) bstrSource);
   printf("\tDescription = %s\n", (LPCSTR) bstrDescription);
}
// EndFindCpp
</PRE>

<P class="label"><B>FindX.h</B></P>

<PRE class="code">// BeginFindH
#include "icrsint.h"

//This Class extracts only titleId from Titles table.
class CTitlesRs : public CADORecordBinding
{
BEGIN_ADO_BINDING(CTitlesRs)

    // Column title_id is the 1st field in the recordset 
    // from Titles table.
    ADO_VARIABLE_LENGTH_ENTRY2(1, adVarChar, m_szt_titleid, 
         sizeof(m_szt_titleid), lt_titleidStatus, FALSE)

END_ADO_BINDING()

public:
   CHAR   m_szt_titleid[150];
   ULONG   lt_titleidStatus;
};
// EndFindH</PRE>

<H4 class="dtH4">See Also</H4>

<P><A HREF="mdmthfindmethodado.htm">Find Method</A> | <A HREF="mdobjodbrec.htm">Recordset Object</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
<P align="center"><A HREF="ado_sdk_copyright_and_trademarks.htm">&copy; 1998-2003 Microsoft Corporation. All rights reserved.</A></P>
</BODY>
</HTML>

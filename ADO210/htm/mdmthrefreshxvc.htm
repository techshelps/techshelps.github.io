<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Refresh Method Example (VC++)</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/samples.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannerparthead td" nowrap>ADO 2.5 Samples</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="mdmthrefreshxvc"></A>Refresh Method Example (VC++)</H1>

<P>This example demonstrates using the <A HREF="mdmthadorefresh.htm">Refresh</A> method to refresh the <A HREF="mdcolparameters.htm">Parameters</A> collection for a stored procedure <A HREF="mdobjcommand.htm">Command</A> object.</P>

<PRE class="code">// BeginRefreshCpp
#import "c:\Program Files\Common Files\System\ADO\msado15.dll" \
    no_namespace rename("EOF", "EndOfFile")

#include &lt;ole2.h&gt;
#include &lt;stdio.h&gt;
#include &lt;conio.h&gt;
#include "RefreshX.h"

// Function declarations
inline void TESTHR(HRESULT x) {if FAILED(x) _com_issue_error(x);};
void RefreshX(void);
void PrintProviderError(_ConnectionPtr pConnection);
void PrintComError(_com_error &amp;e);
inline char* mygets(char* strDest, int n) 
{    
    char strExBuff[10];
    char* pstrRet = fgets(strDest, n, stdin);

    if (pstrRet == NULL)
        return NULL;

    if (!strrchr(strDest, '\n'))
        // Exhaust the input buffer.
        do
        {
            fgets(strExBuff, sizeof(strExBuff), stdin);
        }while (!strrchr(strExBuff, '\n'));
    else
        // Replace '\n' with '\0'
        strDest[strrchr(strDest, '\n') - strDest] = '\0';

    return pstrRet;
}

//////////////////////////////
//                          //
//    Main Function         //
//                          //
//////////////////////////////
void main()
{
    if(FAILED(::CoInitialize(NULL)))
        return;

    RefreshX();

    ::CoUninitialize();
}

////////////////////////////////////////////
//                                        //
//             RefreshX Function          //
//                                        //
////////////////////////////////////////////

void RefreshX(void) 
{
    HRESULT  hr = S_OK;

    // Define string variables.
    _bstr_t strCnn("Provider='sqloledb';Data Source='MySqlServer';"
            "Initial Catalog='pubs';Integrated Security='SSPI';");

    // Define ADO object pointers.
    // Initialize pointers on define.
    // These are in the ADODB::  namespace.
    _ConnectionPtr    pConnection      = NULL;
    _CommandPtr     pCmdByRoyalty  = NULL;
    _RecordsetPtr  pRstByRoyalty  = NULL;
    _RecordsetPtr  pRstAuthors    = NULL;
    IADORecordBinding   *picRs    = NULL;  //Interface Pointer declared. 
    CAuthorsRs authorsrs;            //C++ class object

    try
    {
        // Open connection.
        TESTHR(pConnection.CreateInstance(__uuidof(Connection)));
        pConnection-&gt;Open (strCnn, "", "", adConnectUnspecified);

        // Open a command object for a stored procedure, 
        // with one parameter.
        TESTHR(pCmdByRoyalty.CreateInstance(__uuidof(Command)));
        pCmdByRoyalty-&gt;ActiveConnection = pConnection;
        pCmdByRoyalty-&gt;CommandText = "byroyalty";
        pCmdByRoyalty-&gt;CommandType = adCmdStoredProc;
        pCmdByRoyalty-&gt;Parameters-&gt;Refresh();

        // Get parameter value and execute the command,
        // storing the results in a recordset.
        char *strRoyalty;
        char strTemp[5];
        do
        {
            printf("\n\nEnter royalty : ");
            mygets(strTemp, 5);

            strRoyalty = strtok(strTemp," \t");
            if(strRoyalty == NULL)
            {
                exit(1);
            }
            
            // if the input is not numeric then notify the user.
            if(!atoi(strRoyalty)) 
            {
                printf("\nExpecting numeric value...");
                continue;
            }
        }while(!atoi(strRoyalty));

        _variant_t vtroyal;
        vtroyal.vt = VT_I2;
        vtroyal.iVal = atoi(strRoyalty);
        _variant_t Index;
        Index.vt = VT_I2;
        Index.iVal = 1;
        pCmdByRoyalty-&gt;GetParameters()-&gt;GetItem(Index)-&gt;
            PutValue(vtroyal);
        pRstByRoyalty = pCmdByRoyalty-&gt;
            Execute(NULL,NULL,adCmdStoredProc);

        // Open the Authors table to get author names for display.
        TESTHR(pRstAuthors.CreateInstance(__uuidof(Recordset)));
        pRstAuthors-&gt;Open ("authors", 
            _variant_t((IDispatch *) pConnection, true),
            adOpenForwardOnly, adLockReadOnly, adCmdTable);

        //Open an IADORecordBinding interface pointer which we'll use for 
        //Binding Recordset to a class.
        TESTHR(pRstAuthors-&gt;QueryInterface(
            __uuidof(IADORecordBinding),(LPVOID*)&amp;picRs));

        //Bind the Recordset to a C++ Class here.
        TESTHR(picRs-&gt;BindToRecordset(&amp;authorsrs));

        // Print current data in the recordset,adding 
        // author names from Authors table.
        printf("\n\nAuthors with %s percent royalty\n\n",strRoyalty);
        while(!(pRstByRoyalty-&gt;EndOfFile))
        {
            _bstr_t strAuthorID = pRstByRoyalty-&gt;Fields-&gt;GetItem(
                "au_id")-&gt;Value;

            printf("  %s",(LPCSTR) (_bstr_t) pRstByRoyalty-&gt;Fields-&gt;
                GetItem("au_id")-&gt;Value);

            pRstAuthors-&gt;Filter = "au_id ='"+strAuthorID+"'";
            printf(", %s %s\n\n",authorsrs.lau_fnameStatus == adFldOK ? 
                authorsrs.m_szau_fname : "&lt;NULL&gt;",
                authorsrs.lau_lnameStatus == adFldOK ? 
                authorsrs.m_szau_lname : "&lt;NULL&gt;");
            pRstByRoyalty-&gt;MoveNext();
        }
    }
    catch (_com_error &amp;e)
    {
        PrintProviderError(pConnection);
        PrintComError(e);
    }

    if (pRstByRoyalty)
        if (pRstByRoyalty-&gt;State == adStateOpen)
            pRstByRoyalty-&gt;Close();
    if (pRstAuthors)
        if (pRstAuthors-&gt;State == adStateOpen)
            pRstAuthors-&gt;Close();
    if (pConnection)
        if (pConnection-&gt;State == adStateOpen)
            pConnection-&gt;Close();
}

///////////////////////////////////////////////////////////
//                                                       //
//      PrintProviderError Function                      //
//                                                       //
///////////////////////////////////////////////////////////
void PrintProviderError(_ConnectionPtr pConnection)
{
    // Print Provider Errors from Connection object.
    // pErr is a record object in the Connection's Error collection.
    ErrorPtr    pErr  = NULL;

    if( (pConnection-&gt;Errors-&gt;Count) &gt; 0)
    {
        long nCount = pConnection-&gt;Errors-&gt;Count;

        // Collection ranges from 0 to nCount -1.
        for(long i = 0;i &lt; nCount;i++)
        {
            pErr = pConnection-&gt;Errors-&gt;GetItem(i);
            printf("\t Error number: %x\t%s", pErr-&gt;Number,
                pErr-&gt;Description);
        }
    }
}

///////////////////////////////////////////////////////////
//                                                       //
//      PrintComError Function                           //
//                                                       //
///////////////////////////////////////////////////////////
void PrintComError(_com_error &amp;e)
{
   _bstr_t bstrSource(e.Source());
   _bstr_t bstrDescription(e.Description());

    // Print COM errors. 
   printf("Error\n");
   printf("\tCode = %08lx\n", e.Error());
   printf("\tCode meaning = %s\n", e.ErrorMessage());
   printf("\tSource = %s\n", (LPCSTR) bstrSource);
   printf("\tDescription = %s\n", (LPCSTR) bstrDescription);
}
// EndRefreshCpp
</PRE>

<P class="label"><B>RefreshX.h</B></P>

<PRE class="code">// BeginRefreshH
#include "icrsint.h"

//This Class extracts  lname,fname from authors table. 
class CAuthorsRs : public CADORecordBinding
{
BEGIN_ADO_BINDING(CAuthorsRs)    
    // Column lname is the 2nd field in the recordset
     ADO_VARIABLE_LENGTH_ENTRY2(2, adVarChar, m_szau_lname, 
         sizeof(m_szau_lname), lau_lnameStatus, TRUE)
    // Column fname is the 3rd field in the recordset.
   ADO_VARIABLE_LENGTH_ENTRY2(3, adVarChar, m_szau_fname, 
         sizeof(m_szau_fname), lau_fnameStatus, TRUE)
   
END_ADO_BINDING()

public:
    CHAR m_szau_fname[21];
    ULONG lau_fnameStatus;    
    CHAR   m_szau_lname[41];
    ULONG  lau_lnameStatus;
};
// EndRefreshH</PRE>

<H4 class="dtH4">See Also</H4>

<P><A HREF="mdobjcommand.htm">Command Object</A> | <A HREF="mdcolparameters.htm">Parameters Collection</A> | <A HREF="mdmthadorefresh.htm">Refresh Method</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
<P align="center"><A HREF="ado_sdk_copyright_and_trademarks.htm">&copy; 1998-2003 Microsoft Corporation. All rights reserved.</A></P>
</BODY>
</HTML>

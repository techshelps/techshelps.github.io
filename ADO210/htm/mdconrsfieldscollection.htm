<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>The Fields Collection</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/ADO.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannerparthead td" nowrap>ADO 2.5</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="mdconrsfieldscollection"></A>The Fields Collection</H1>

<P>The <B>Fields</B> collection is one of ADO's intrinsic collections. A collection is an ordered set of items that can be referred to as a unit. For more information about ADO collections, see <A HREF="mdconadoobjectmodel.htm">The ADO Object Model</A> in Chapter 1.</P>

<P>The <B>Fields</B> collection contains a <B>Field</B> object for every field (column) in the <B>Recordset</B>. Like all ADO collections, it has <B>Count</B> and <B>Item</B> properties, as well as <B>Append</B> and <B>Refresh</B> methods. It also has <B>CancelUpdate</B>, <B>Delete</B>, <B>Resync</B>, and <B>Update</B> methods, which are not available to other ADO collections.</P>

<H2 class="dtH2">Examining the Fields Collection</H2>

<P>Consider the <B>Fields</B> collection of the sample <B>Recordset</B> introduced in this chapter. The sample <B>Recordset</B> was derived from the SQL statement</P>

<PRE class="code"><code class="ce">SELECT ProductID, ProductName, UnitPrice FROM Products WHERE CategoryID = 7</code></PRE>

<P>Thus, you should find that the <B>Recordset</B> <B>Fields</B> collection contains three fields.</P>

<PRE class="code">'BeginWalkFields
    Dim objFields As ADODB.Fields
    
    objRs.Open strSQL, strConnStr, adOpenForwardOnly, adLockReadOnly, adCmdText
    
    Set objFields = objRs.Fields
    
    For intLoop = 0 To (objFields.Count - 1)
        Debug.Print objFields.Item(intLoop).Name
    Next
'EndWalkFields</PRE>

<P>This code simply determines the number of <B>Field</B> objects in the <B>Fields</B> collection using the <B>Count</B> property and loops through the collection, returning the value of the <B>Name</B> property for each <B>Field</B> object. You can use many more <B>Field</B> properties to get information about a field. For more information about querying a <B>Field</B>, see <A HREF="mdconfieldobject.htm">The Field Object</A>.</P>

<H2 class="dtH2">Counting Columns</H2>

<P>As you might expect, the <B>Count</B> property returns the actual number of <B>Field</B> objects in the <B>Fields</B> collection. Because numbering for members of a collection begins with zero, you should always code loops starting with the zero member and ending with the value of the <B>Count</B> property minus 1. If you are using Microsoft Visual Basic and want to loop through the members of a collection without checking the <B>Count</B> property, use the <B>For</B> <B>Each...Next</B> command.</P>

<P>If the <B>Count</B> property is zero, there are no objects in the collection.</P>

<H2 class="dtH2">Getting to the Field</H2>

<P>As with any ADO collection, the <B>Item</B> property is the default property of the collection. It returns the individual <B>Field</B> object specified by the name or index passed to it. Therefore, the following statements are equivalent for the sample <B>Recordset</B>:</P>

<PRE class="code">objField = objRecordset.Fields.Item("ProductID")
objField = objRecordset.Fields("ProductID")
objField = objRecordset.Fields.Item(0)
objField = objRecordset.Fields(0)</PRE>

<P>If these methods are equivalent, which is best? It depends. Using an index to retrieve a <B>Field</B> from the collection is faster because it accesses the <B>Field</B> directly without having to perform a string lookup. On the other hand, the order of <B>Fields</B> within the collection must be known, and if the order changes, the reference to the <B>Field's</B> index will have to be changed wherever it occurs. Although slightly slower, using the name of the <B>Field</B> is more flexible because it doesn't depend on the order of the <B>Fields</B> in the collection.</P>

<H2 class="dtH2">Using the Refresh Method</H2>

<P>Unlike some other ADO collections, using the <B>Refresh</B> method on the <B>Fields</B> collection has no visible effect. To retrieve changes from the underlying database structure, you must use either the <B>Requery</B> method, or if the <B>Recordset</B> object does not support bookmarks, the <B>MoveFirst</B> method, which will cause the command to be executed against the provider again.</P>

<H2 class="dtH2">Adding Fields to a Recordset</H2>

<P>The <B>Append</B> method is used to add fields to a <B>Recordset</B>.</P>

<P>You can use the <B>Append</B> method to fabricate a <B>Recordset</B> programmatically without opening a connection to a data source. A run-time error will occur if the <B>Append</B> method is called on the <B>Fields</B> collection of an open <B>Recordset</B> or on a <B>Recordset</B> where the <B>ActiveConnection</B> property has been set. You can append fields only to a <B>Recordset</B> that is not open and has not yet been connected to a data source. However, to specify values for the newly appended <B>Fields</B>, the <B>Recordset</B> must first be opened.</P>

<P>Developers often need a place to temporarily store some data, or want some data to act as if it came from a server so it can participate in data binding in a user interface. ADO (in conjunction with the <A HREF="mdrefcursorengine.htm">Microsoft Cursor Service for OLE DB</A>) enables the developer to build an empty <B>Recordset</B> object by specifying column information and calling <B>Open</B>. In the following example, three new fields are appended to a new <B>Recordset</B> object. Then the <B>Recordset</B> is opened, two new records are added, and the <B>Recordset</B> is persisted to a file. (For more information about <B>Recordset</B> persistence, see <A HREF="mdconupdatepersistdata.htm">Chapter 5: Updating and Persisting Data</A>.)</P>

<PRE class="code">    'BeginFabricate
    Dim objRs As New ADODB.Recordset
    
    With objRs.Fields
        .Append "StudentID", adChar, 11, adFldUpdatable
        .Append "FullName", adVarChar, 50, adFldUpdatable
        .Append "PhoneNmbr", adVarChar, 20, adFldUpdatable
    End With
    
    With objRs
        .Open
        
        .AddNew
        .Fields(0) = "123-45-6789"
        .Fields(1) = "John Doe"
        .Fields(2) = "(425) 555-5555"
        .Update
        
        .AddNew
        .Fields(0) = "123-45-6780"
        .Fields(1) = "Jane Doe"
        .Fields(2) = "(615) 555-1212"
        .Update
    End With
            
    objRs.Save App.Path &amp; "\FabriTest.adtg", adPersistADTG
    
    objRs.Close
    'EndFabricate</PRE>

<P>The usage of the <B>Fields</B> <B>Append</B> method differs between the <B>Recordset</B> object and the <B>Record</B> object. For more information about the <B>Record</B> object, see <A HREF="mdmscadofordocuments.htm">Chapter 10: Records and Streams</A>.</P>

<H4 class="dtH4">See Also</H4>

<P><A HREF="mdobjfabricatinghierarchicalrecordsets.htm">Fabricating Hierarchical Recordsets</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
<P align="center"><A HREF="ado_sdk_copyright_and_trademarks.htm">&copy; 1998-2003 Microsoft Corporation. All rights reserved.</A></P>
</BODY>
</HTML>

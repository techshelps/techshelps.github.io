<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Item Property Example (VC++)</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/samples.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannerparthead td" nowrap>ADO 2.5 Samples</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="mdmthitemxvc"></A>Item Property Example (VC++)</H1>

<P>This example demonstrates how the <A HREF="mdproitem.htm">Item</A> property accesses members of a collection. The example opens the <B><I>Authors</I></B> table of the <B><I>Pubs</I></B> database with a parameterized command.</P>

<P>The parameter in the command issued against the database is accessed from the <A HREF="mdobjcommand.htm">Command</A> object's <A HREF="mdcolparameters.htm">Parameters</A> collection by index and name. Then the fields of the returned <A HREF="mdobjodbrec.htm">Recordset</A> are accessed from that object's <A HREF="mdcolfields.htm">Fields</A> collection by index and name.</P>

<PRE class="code">// BeginItemCpp
#import "C:\Program Files\Common Files\System\ADO\msado15.dll" \
    no_namespace rename("EOF", "EndOfFile")

#include &lt;ole2.h&gt;
#include &lt;stdio.h&gt;
#include &lt;conio.h&gt;

// Function declarations
inline void TESTHR(HRESULT x) {if FAILED(x) _com_issue_error(x);};
void ItemX(void);
void PrintProviderError(_ConnectionPtr pConnection);
void PrintComError(_com_error &amp;e);

//////////////////////////////////////////////////////////
//                                                      //
//       Main Function                                  //
//                                                      //
//////////////////////////////////////////////////////////

void main()
{
    if(FAILED(::CoInitialize(NULL)))
        return;

        ItemX();

     //Wait here for the user to see the output
     printf("Press any key to continue...");
     getch();
    ::CoUninitialize();
}

//////////////////////////////////////////////////////////
//                                                      //
//       ItemX Function                                 //
//                                                      //
//////////////////////////////////////////////////////////

void ItemX(void) 
{
    HRESULT  hr = S_OK;

    // Define ADO object pointers.
    // Initialize pointers on define.
    // These are in the ADODB::  namespace.
   _ConnectionPtr  pConnection  = NULL;
   _RecordsetPtr   pRst     = NULL;
   _CommandPtr     pCmd     = NULL;
   _ParameterPtr   pPrm     = NULL;
    FieldPtr       pFld     = NULL;

    // Other Variables.
    _bstr_t strCnn("Provider='sqloledb';Data Source='MySqlServer';"
            "Initial Catalog='pubs';Integrated Security='SSPI';");
    _variant_t    Column[9];
    _variant_t    vIndex;

    try
    {
       // Open connection.
        TESTHR(pConnection.CreateInstance(__uuidof(Connection)));

        TESTHR(pRst.CreateInstance(__uuidof(Recordset)));

        TESTHR(pCmd.CreateInstance(__uuidof(Command)));

        //Set the array with the authors table field (column) names
        Column[0] = "au_id";
        Column[1] = "au_lname";
        Column[2] = "au_fname";
        Column[3] = "phone";
        Column[4] = "address";
        Column[5] = "city";
        Column[6] = "state";
        Column[7] = "zip";
        Column[8] = "contract";

        _bstr_t strText("SELECT * FROM authors WHERE state = ?");
        pCmd-&gt;CommandText = strText;

        pPrm = pCmd-&gt;CreateParameter("ItemXparm", adChar, adParamInput,
            2, "CA");
        pCmd-&gt;Parameters-&gt;Append(pPrm);

        pConnection-&gt;Open(strCnn, "", "", adConnectUnspecified);
        pCmd-&gt;ActiveConnection = pConnection;

        // Connection and CommandType are omitted because 
        // a Command object is provided.
        _variant_t Conn;
        Conn.vt = VT_ERROR;
        Conn.scode = DISP_E_PARAMNOTFOUND;

        pRst-&gt;Open((_variant_t((IDispatch *) pCmd)),Conn,adOpenStatic,
            adLockReadOnly, -1);

        printf("The Parameters collection accessed by index...\n");

        vIndex = (short) 0;
        pPrm = pCmd-&gt;Parameters-&gt;GetItem(&amp;vIndex);
        printf("Parameter name = '%s', value = '%s'\n",
            (LPCSTR)pPrm-&gt;Name, (LPSTR)(_bstr_t)pPrm-&gt;Value);

        printf("\nThe Parameters collection accessed by name...\n");
        pPrm = pCmd-&gt;Parameters-&gt;Item["ItemXparm"];
        printf("Parameter name = '%s', value = '%s'\n",
            (LPCSTR)pPrm-&gt;Name, (LPSTR)(_bstr_t)pPrm-&gt;Value);

        printf("\nThe Fields collection accessed by index...\n");
        pRst-&gt;MoveFirst();
        long limit = 0;
        limit = ((pRst-&gt;Fields-&gt;Count) - 1);
        int intLineCnt = 8; 
        for (short iIndex = 0; iIndex &lt;= limit; iIndex++)
        {
            vIndex = iIndex;
            intLineCnt++;
            if (intLineCnt%15 == 0)
            {
                printf("\nPress any key to continue...\n");
                getch();
            }
            pFld = pRst-&gt;Fields-&gt;GetItem(&amp;vIndex);
            printf("Field %d : Name =  '%s', ", iIndex,
                (LPCSTR)pFld-&gt;GetName());
            _variant_t FldVal = pFld-&gt;GetValue();  

            // Because Value is the default property of a
            // Property object,the use of the actual keyword
            // here is optional.
            switch(FldVal.vt)
            {
                case (VT_BOOL):
                    if(FldVal.boolVal)
                    {
                        printf("Value = 'True'");
                    }
                    else
                    {
                        printf("Value = 'False'");
                    }
                    printf("\n");
                    break;
                case (VT_BSTR):
                    printf("Value = '%s'",
                        (LPCSTR)(_bstr_t)FldVal.bstrVal);
                    printf("\n");
                    break;
                case (VT_I4):
                    printf("Value = '%s'",(LPCSTR)FldVal.iVal);
                    printf("\n");
                    break;
                case (VT_EMPTY):
                    printf("Value = '%s'",(LPCSTR)FldVal.lVal);
                    printf("\n");
                    break;
                default:
                    break;
            }
        }

        printf("\nThe Fields collection accessed by name...\n");
        pRst-&gt;MoveFirst();
        for (iIndex = 0; iIndex &lt;= 8; iIndex++)
        {
            intLineCnt++;
            if (intLineCnt%15 == 0)
            {
                printf("\nPress any key to continue...\n");
                getch();
            }
            pFld = pRst-&gt;Fields-&gt;GetItem(Column[iIndex]);
            printf("Field name = '%s', ",(LPCSTR)pFld-&gt;GetName());
            _variant_t FldVal = pFld-&gt;GetValue();

            // Because Value is the default property of a
            // Property object,the use of the actual keyword
            // here is optional.
            switch(FldVal.vt)
            {
                case (VT_BOOL):
                    if(FldVal.boolVal)
                    {
                        printf("Value = 'True'");
                    }
                    else
                    {
                        printf("Value = 'False'");
                    }
                    printf("\n");
                    break;
                case (VT_BSTR):
                    printf("Value = '%s'",
                        (LPCSTR)(_bstr_t)FldVal.bstrVal);
                    printf("\n");
                    break;
                case (VT_I4):
                    printf("Value = '%s'",(LPCSTR)FldVal.iVal);
                    printf("\n");
                    break;
                case (VT_EMPTY):
                    printf("Value = '%s'",(LPCSTR)FldVal.lVal);
                    printf("\n");
                    break;
                default:
                    break;
            }
        }
    }
    catch(_com_error &amp;e)
    {
       // Notify the user of errors if any.
       // Pass a connection pointer accessed from the Recordset.
       PrintProviderError(pConnection);
       PrintComError(e);
    }

    // Clean up objects before exit.
    if (pRst)
        if (pRst-&gt;State == adStateOpen)
            pRst-&gt;Close();
    if (pConnection)
        if (pConnection-&gt;State == adStateOpen)
            pConnection-&gt;Close();
}

//////////////////////////////////////////////////////////
//                                                      //
//      PrintProviderError Function                     //
//                                                      //
//////////////////////////////////////////////////////////

void PrintProviderError(_ConnectionPtr pConnection)
{
    // Print Provider Errors from Connection object.
    // pErr is a record object in the Connection's Error collection.
    ErrorPtr    pErr  = NULL;

    if( (pConnection-&gt;Errors-&gt;Count) &gt; 0)
    {
        long nCount = pConnection-&gt;Errors-&gt;Count;
        // Collection ranges from 0 to nCount -1.
        for(long i = 0; i &lt; nCount; i++)
        {
            pErr = pConnection-&gt;Errors-&gt;GetItem(i);
            printf("\t Error number: %x\t%s", pErr-&gt;Number, 
                pErr-&gt;Description);
        }
    }
}

//////////////////////////////////////////////////////////
//                                                      //
//       PrintComError Function                         //
//                                                      //
//////////////////////////////////////////////////////////

void PrintComError(_com_error &amp;e)
{
   _bstr_t bstrSource(e.Source());
   _bstr_t bstrDescription(e.Description());

    // Print Com errors.
   printf("Error\n");
   printf("\tCode = %08lx\n", e.Error());
   printf("\tCode meaning = %s\n", e.ErrorMessage());
   printf("\tSource = %s\n", (LPCSTR) bstrSource);
   printf("\tDescription = %s\n", (LPCSTR) bstrDescription);
}
// EndItemCpp</PRE>

<H4 class="dtH4">See Also</H4>

<P><A HREF="mdobjcommand.htm">Command Object</A> | <A HREF="mdcolfields.htm">Fields Collection</A> | <A HREF="mdproitem.htm">Item Property</A> | <A HREF="mdcolparameters.htm">Parameters Collection</A> | <A HREF="mdobjodbrec.htm">Recordset Object</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
<P align="center"><A HREF="ado_sdk_copyright_and_trademarks.htm">&copy; 1998-2003 Microsoft Corporation. All rights reserved.</A></P>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>BeginTrans, CommitTrans, and RollbackTrans Methods Example (VC++)</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/samples.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannerparthead td" nowrap>ADO 2.5 Samples</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="mdmthbegintransxvc"></A>BeginTrans, CommitTrans, and RollbackTrans Methods Example (VC++)</H1>

<P>This example changes the book type of all psychology books in the <B><I>Titles</I></B> table of the database. After the <A HREF="mdmthbegintrans.htm">BeginTrans</A> method starts a transaction that isolates all the changes made to the <B><I>Titles</I></B> table, the <A HREF="mdmthbegintrans.htm">CommitTrans</A> method saves the changes. You can use the <A HREF="mdmthbegintrans.htm">Rollback</A> method to undo changes that you saved using the <A HREF="mdmthupdate.htm">Update</A> method.</P>

<PRE class="code">// BeginBeginTransCpp
#import "C:\Program Files\Common Files\System\ADO\msado15.dll" \
    no_namespace rename("EOF", "EndOfFile")

#include &lt;stdio.h&gt;
#include &lt;ole2.h&gt;
#include &lt;conio.h&gt;
#include &lt;assert.h&gt;
#include &lt;malloc.h&gt;
#include "BeginTransX.h"

inline void TESTHR(HRESULT x) {if FAILED(x) _com_issue_error(x);};
void BeginTransX(void);
void PrintProviderError(_ConnectionPtr pConnection);

void main()
{
    if(FAILED(::CoInitialize(NULL)))
        return;

    BeginTransX();

    //Wait here for user to see the output.
    printf("\nPress any key to continue...");
    getch();

    ::CoUninitialize();
}

///////////////////////////////////////////////////////////
//                                                       //
//      BeginTransX Function                             //
//                                                       //
///////////////////////////////////////////////////////////

void BeginTransX()
{
    // Define ADO object pointers.
    // Initialize pointers on define.
    // These are in the ADODB::  namespace.
    _RecordsetPtr rstTitles = NULL;
    _ConnectionPtr pConnection = NULL;

    //Define Other Variables
    HRESULT hr = S_OK;  
    IADORecordBinding   *picRs = NULL;  //Interface Pointer declared...
    CTitlesRs titlrs;
    _bstr_t strTitle; 
    _bstr_t strMessage;
    LPSTR p_TempStr = NULL;
    char chKey;
    int i = 0;

    try 
    {
        // open connection.
        _bstr_t strCnn("Provider='sqloledb';Data Source='MySqlServer';"
            "Initial Catalog='pubs';Integrated Security='SSPI';");

        TESTHR(pConnection.CreateInstance(__uuidof(Connection)));

        TESTHR(pConnection-&gt;Open(strCnn,"","",adConnectUnspecified));

        rstTitles.CreateInstance(__uuidof(Recordset));  

        rstTitles-&gt;CursorType = adOpenDynamic;
        rstTitles-&gt;LockType = adLockPessimistic;

        // open Titles table
        TESTHR(rstTitles-&gt;Open("titles",
            _variant_t((IDispatch*)pConnection,true),
            adOpenDynamic, adLockPessimistic,adCmdTable));

        rstTitles-&gt;MoveFirst();
        pConnection-&gt;BeginTrans();

        //Open an IADORecordBinding interface pointer which 
        //we'll use for Binding Recordset to a class    
        TESTHR(rstTitles-&gt;QueryInterface(
            __uuidof(IADORecordBinding), (LPVOID*)&amp;picRs));

        //Bind the Recordset to a C++ Class here    
        TESTHR(picRs-&gt;BindToRecordset(&amp;titlrs));

        // Loop through recordset and ask user if he wants
        // to change the type for a specified title.
        // Allocate memory to p_TempStr string pointer.
        p_TempStr = (LPSTR) malloc(sizeof(titlrs.m_szT_type));

        // Check for null string.
        assert(p_TempStr != NULL);
        while (VARIANT_FALSE == rstTitles-&gt;EndOfFile)
        {
            // Set the final character of the destination string to NULL.
            p_TempStr[sizeof(titlrs.m_szT_type)-1] = '\0';
            // The source string will get truncated if its length is 
            // longer than the length of the destination string minus one.
            strncpy(p_TempStr,strtok(titlrs.m_szT_type," "),sizeof(titlrs.m_szT_type)-1);
            
            // Compare type with psychology
            if (!strcmp(p_TempStr,"psychology")) 
            { 
                strTitle = titlrs.m_szT_title;
                strMessage = "Title: " + strTitle + 
                        "\n Change type to Self help?(y/n)";

                // Change the title for specified employee
                printf("%s\n",(LPCSTR)strMessage);
                do
                {
                    chKey = getch();
                }while(chKey != 'y' &amp;&amp; chKey !='n');
                if(chKey == 'y')
                {
                    // Set the final character of the destination string to NULL.
                    titlrs.m_szT_type[sizeof(titlrs.m_szT_type)-1] = '\0';
                    // Copy "self_help" title field.
                    // The source string will get truncated if its length is 
                    // longer than the length of the destination string minus one.
                    strncpy(titlrs.m_szT_type,"self_help", sizeof(titlrs.m_szT_type)-1);
                    picRs-&gt;Update(&amp;titlrs);
                }
            }
            rstTitles-&gt;MoveNext();
        }
        // Ask if the User wants to commit to all the 
        // changes made above
        printf("\n\n Save all changes(y/n)?");
        do
        {
            chKey = getch();
        }while(chKey != 'y' &amp;&amp; chKey !='n');
    
        if(chKey == 'y')
            
            // Save the changes to the title table
            pConnection-&gt;CommitTrans();
        else
            // Unsave the changes to the title table
            pConnection-&gt;RollbackTrans();

        // Print current data in recordset.
        rstTitles-&gt;Requery(0);

        // Move to the first record of the title table
        rstTitles-&gt;MoveFirst();
        printf("\n\nPress any key to continue...");
        getch();

        // Clear the screen for the next display   
        //system("cls"); 

        // Open IADORecordBinding interface pointer again 
        // for binding Recordset to a class.
        TESTHR(rstTitles-&gt;QueryInterface(
            __uuidof(IADORecordBinding),
            (LPVOID*)&amp;picRs));

        // Rebind the Recordset to a C++ Class.
        TESTHR(picRs-&gt;BindToRecordset(&amp;titlrs));

        while (!rstTitles-&gt;EndOfFile)
        {
            i= i+1;
            if (i % 23 == 0)
            {
                printf("\nPress any key to continue...");
                getch();

                //Clear the screen for the next display   
                //system("cls"); 
            }
            printf("%s -  %s\n",titlrs.m_szT_title,titlrs.m_szT_type);
            rstTitles-&gt;MoveNext();
        }
        // Restore original data becasue this is a demonstration.
        rstTitles-&gt;MoveFirst();

        while (VARIANT_FALSE == rstTitles-&gt;EndOfFile)
        {
            // Set the final character of the destination string to NULL.
            p_TempStr[sizeof(titlrs.m_szT_type)-1] = '\0';
            // The source string will get truncated if its length is 
            // longer than the length of the destination string minus one.
            strncpy(p_TempStr,titlrs.m_szT_type,sizeof(titlrs.m_szT_type)-1);
            p_TempStr = strtok(p_TempStr," ");

            if (!strcmp(p_TempStr,"self_help")) 
            {
                // Set the final character of the destination string to NULL.
                titlrs.m_szT_type[sizeof(titlrs.m_szT_type)-1] = '\0';
                // The source string will get truncated if its length is 
                // longer than the length of the destination string minus one.
                strncpy(titlrs.m_szT_type,"psychology",sizeof(titlrs.m_szT_type)-1);
                picRs-&gt;Update(&amp;titlrs);           
            }
            rstTitles-&gt;MoveNext();  
        }
    }
    catch(_com_error &amp;e)
    {
        // Notify the user of errors if any.
        _bstr_t bstrSource(e.Source());
        _bstr_t bstrDescription(e.Description());

        PrintProviderError(pConnection);

        printf("Source : %s\n",(LPCSTR)bstrSource);
        printf("Description : %s\n",(LPCSTR)bstrDescription);
    }

    // Deallocate the memory
    if (p_TempStr)
        free(p_TempStr);
    // Clean up objects before exit.
    //Release the IADORecordset Interface here   
    if (picRs)
        picRs-&gt;Release();
        
    if (rstTitles)
        if (rstTitles-&gt;State == adStateOpen)
            rstTitles-&gt;Close();
    if (pConnection)
        if (pConnection-&gt;State == adStateOpen)
            pConnection-&gt;Close();
};

///////////////////////////////////////////////////////////
//                                                       //
//      PrintProviderError Function                      //
//                                                       //
///////////////////////////////////////////////////////////

void PrintProviderError(_ConnectionPtr pConnection)
{
    // Print Provider Errors from Connection object.
    // pErr is a record object in the Connection's Error collection.
    ErrorPtr  pErr    = NULL;
    long      nCount  = 0;
    long      i       = 0;

    if( (pConnection-&gt;Errors-&gt;Count) &gt; 0)
    {
        nCount = pConnection-&gt;Errors-&gt;Count;
        // Collection ranges from 0 to nCount -1.
        for(i = 0; i &lt; nCount; i++)
        {
            pErr = pConnection-&gt;Errors-&gt;GetItem(i);
            printf("Error number: %x\t%s\n", pErr-&gt;Number,(LPCSTR) pErr-&gt;Description);
        }
    }
}
// EndBeginTransCpp
</PRE>

<P class="label"><B>BeginTransX.h</B></P>

<PRE class="code">// BeginBeginTransH
#include "icrsint.h"

//This Class extracts only title and type 
class CTitlesRs : public CADORecordBinding
{
BEGIN_ADO_BINDING(CTitlesRs)
    //Column title is the 2nd field in the recordset  
    ADO_VARIABLE_LENGTH_ENTRY2(2, adVarChar, m_szT_title, 
         sizeof(m_szT_title), lT_titleStatus, FALSE)

    //Column type is the 3rd field in the recordset  
    ADO_VARIABLE_LENGTH_ENTRY2(3, adVarChar, m_szT_type, 
         sizeof(m_szT_type), lT_typeStatus, TRUE)
END_ADO_BINDING()

public:
   CHAR   m_szT_title[150];
   ULONG  lT_titleStatus;
   CHAR   m_szT_type[40];
   ULONG  lT_typeStatus;
};
// EndBeginTransH</PRE>

<H4 class="dtH4">See Also</H4>

<P><A HREF="mdmthbegintrans.htm">BeginTrans, CommitTrans, and RollbackTrans Methods</A> | <A HREF="mdmthupdate.htm">Update Method</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
<P align="center"><A HREF="ado_sdk_copyright_and_trademarks.htm">&copy; 1998-2003 Microsoft Corporation. All rights reserved.</A></P>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Attributes and Name Properties Example (VC++)</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/samples.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannerparthead td" nowrap>ADO 2.5 Samples</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="mdproattributesxvc"></A>Attributes and Name Properties Example (VC++)</H1>

<P>This example displays the value of the <A HREF="mdproattributes.htm">Attributes</A> property for <A HREF="mdobjconnection.htm">Connection</A>, <A HREF="mdobjfield.htm">Field</A>, and <A HREF="mdobjproperty.htm">Property</A> objects. It uses the <A HREF="mdproname.htm">Name</A> property to display the name of each <B>Field</B> and <B>Property</B> object.</P>

<PRE class="code">// BeginAttributesCpp
#import "C:\Program Files\Common Files\System\ADO\msado15.dll" \
    no_namespace rename("EOF", "EndOfFile")

#include &lt;ole2.h&gt;
#include &lt;stdio.h&gt;
#include &lt;conio.h&gt;

// Function declarations
inline void TESTHR(HRESULT x) {if FAILED(x) _com_issue_error(x);};
void AttributesX();
void PrintProviderError(_ConnectionPtr pConnection);
void PrintComError(_com_error &amp;e);

///////////////////////////////////////////////////////////
//                                                       //
//      Main Function                                    //
//                                                       //
///////////////////////////////////////////////////////////

void main()
{
    if(FAILED(::CoInitialize(NULL))) 
        return;

    AttributesX();

    //Wait here for user to see the output..
    printf("\nPress any key to continue...");
    getch();

    ::CoUninitialize();
}


///////////////////////////////////////////////////////////
//                                                       //
//      AttributesX Function                             //
//                                                       //
///////////////////////////////////////////////////////////

void AttributesX()
{
    // Define ADO object pointers.
    // Initialize pointers on define.
    // These are in the ADODB::  namespace
    _RecordsetPtr pRstEmployee  = NULL;
    _ConnectionPtr pConnection = NULL;
    FieldsPtr fldLoop = NULL;    
    PropertiesPtr proLoop = NULL;

    //Define Other Variables
    HRESULT  hr = S_OK;
    _variant_t Index;
    Index.vt = VT_I2;
    int j=0;      
    //Open a recordset using a Client Cursor
    //For the Employee Table
    _bstr_t strCnn("Provider='sqloledb';Data Source='MySqlServer';"
    "Initial Catalog='pubs';Integrated Security='SSPI';");

    try
    {
        // open connection and record set
        TESTHR(pConnection.CreateInstance(__uuidof(Connection)));
        pConnection-&gt;Open(strCnn,"","",adConnectUnspecified);
        
        TESTHR(pRstEmployee.CreateInstance(__uuidof(Recordset)));
        pRstEmployee-&gt;Open("Employee", _variant_t((IDispatch *)pConnection,true), adOpenForwardOnly,
            adLockReadOnly, adCmdTable);
    
        // Display the attributes of Connection.
        printf("Connection attributes: %d \n", pConnection-&gt;Attributes);
   
        // Display the attribute of the employee table's 
        //fields
        printf("\nFields attributes:\n");
        fldLoop = pRstEmployee-&gt;GetFields();
    
        for (int i = 0; i &lt; (int)fldLoop-&gt;GetCount(); i++)
        {
            Index.iVal=i;
            printf ("   %s = %d \n",(LPSTR)fldLoop-&gt;GetItem(Index)-&gt;GetName(),
                (int)fldLoop-&gt;GetItem(Index)-&gt;GetAttributes());
        }
        
        // Display Fields of the Employee table which are NULLBALE
        printf("\nNULLABLE Fields :");
        
        for (int i1 = 0; i1 &lt; (int)fldLoop-&gt;GetCount(); i1++)
        {
            Index.iVal = i1;
            
            if (fldLoop-&gt;GetItem(Index)-&gt;GetAttributes()  &amp; adFldIsNullable)
                {
                    printf ("%s  \n", (LPSTR)fldLoop-&gt;GetItem(Index)-&gt;GetName());    
                }
        }

        // Display the attributes of the Employee tables's 
        // properties
        printf("\nProperty attributes:\n");
        proLoop = pRstEmployee-&gt;GetProperties();
      
        for (int i2 = 0; i2 &lt; (int)proLoop-&gt;GetCount(); i2++)
        {
            j= j+1;
            Index.iVal=i2;
            printf (" %s = %d \n", (LPSTR)(_bstr_t)proLoop-&gt;GetItem(Index)-&gt;GetName()
            ,(int)proLoop-&gt;GetItem(Index)-&gt;GetAttributes()); 
        
            if (((j % 23) == 0) || ( i2==6))
            {
                printf("\nPress any key to continue...");
                getch();
    
                //Clear the screen for the next display   
                system("cls"); 
                j=0;
            }
    
        }
    }
    catch(_com_error &amp;e)
    {
        // Notify the user of errors if any.
        
        PrintProviderError(pConnection);
        PrintComError(e);
    }
    
    // Clean up objects before exit.
    if (pRstEmployee)
        if (pRstEmployee-&gt;State == adStateOpen)
            pRstEmployee-&gt;Close();
    if (pConnection)
        if (pConnection-&gt;State == adStateOpen)
            pConnection-&gt;Close();
}


///////////////////////////////////////////////////////////
//                                                       //
//      PrintProviderError Function                      //
//                                                       //
///////////////////////////////////////////////////////////

void PrintProviderError(_ConnectionPtr pConnection)
{
    // Print Provider Errors from Connection object.
    
    // pErr is a record object in the Connection's Error collection.
    ErrorPtr    pErr  = NULL;      
    long      nCount  = 0;    
    long       i    = 0;

    if( (pConnection-&gt;Errors-&gt;Count) &gt; 0)
    {
        nCount = pConnection-&gt;Errors-&gt;Count;

        // Collection ranges from 0 to nCount -1.
        for(i = 0; i &lt; nCount; i++)    
        {
            pErr = pConnection-&gt;Errors-&gt;GetItem(i);
            printf("\t Error number: %x\t%s", (LPCSTR) pErr-&gt;Number, (LPCSTR) pErr-&gt;Description);
        }
    }
}

///////////////////////////////////////////////////////////
//                                                       //
//      PrintComError Function                           //
//                                                       //
///////////////////////////////////////////////////////////

VOID PrintComError(_com_error &amp;e)
{
    _bstr_t bstrSource(e.Source());
    _bstr_t bstrDescription(e.Description());

    // Print Com errors.  
    printf("\nError\n");
    printf("Code = %08lx\n", e.Error());
    printf("Code meaning = %s\n", e.ErrorMessage());
    printf("Source = %s\n", (LPCSTR) bstrSource);
    printf("Description = %s\n", (LPCSTR) bstrDescription);  
}
// EndAttributesCpp
</PRE>

<P class="label"><B>AttributesX.h</B></P>

<PRE class="code">// BeginAttributesH
#include "icrsint.h"

//This class extracts LastName, FirstName, FaxPhone from Employees table

class CEmployeeRs : public CADORecordBinding
{
BEGIN_ADO_BINDING(CEmployeeRs)

        // Column LastName is the 2nd field in the table
        ADO_VARIABLE_LENGTH_ENTRY2(2,adVarChar,m_szemp_LastName,
            sizeof(m_szemp_LastName),lemp_LastNameStatus,TRUE)

        // Column FirstName is the 17th field in the table
        ADO_VARIABLE_LENGTH_ENTRY2(17,adVarChar,m_szemp_FirstName,
            sizeof(m_szemp_FirstName),lemp_FirstNameStatus,TRUE)

        // Column FaxPhone is the 18th field in the table
        ADO_VARIABLE_LENGTH_ENTRY2(18,adVarChar,m_szemp_Faxphone,
            sizeof(m_szemp_Faxphone),lemp_FaxphoneStatus,TRUE)

END_ADO_BINDING()

public:
    CHAR  m_szemp_LastName[21];
    ULONG lemp_LastNameStatus;
    CHAR  m_szemp_FirstName[11];
    ULONG lemp_FirstNameStatus;
    CHAR  m_szemp_Faxphone[25];
    ULONG lemp_FaxphoneStatus;
};

// EndAttributesH</PRE>

<H4 class="dtH4">See Also</H4>

<P><A HREF="mdproattributes.htm">Attributes Property</A> | <A HREF="mdobjconnection.htm">Connection Object</A> | <A HREF="mdobjfield.htm">Field Object</A> | <A HREF="mdproname.htm">Name Property</A> | <A HREF="mdobjproperty.htm">Property Object</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
<P align="center"><A HREF="ado_sdk_copyright_and_trademarks.htm">&copy; 1998-2003 Microsoft Corporation. All rights reserved.</A></P>
</BODY>
</HTML>

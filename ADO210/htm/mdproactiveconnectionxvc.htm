<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>ActiveConnection, CommandText, CommandTimeout, CommandType, Size, and Direction Properties Example (VC++)</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/samples.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannerparthead td" nowrap>ADO 2.5 Samples</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="mdproactiveconnectionxvc"></A>ActiveConnection, CommandText, CommandTimeout, CommandType, Size, and Direction Properties Example (VC++)</H1>

<P>This example uses the <A HREF="mdproactivecon.htm">ActiveConnection</A>, <A HREF="mdprocommandtext.htm">CommandText</A>, <A HREF="mdprocommandtimeout.htm">CommandTimeout</A>, <A HREF="mdprocommandtype.htm">CommandType</A>, <A HREF="mdprosize.htm">Size</A>, and <A HREF="mdprodirection.htm">Direction</A> properties to execute a stored procedure.</P>

<PRE class="code">// BeginActiveConnectionCpp
#import "C:\Program Files\Common Files\System\ADO\msado15.dll" \
    no_namespace rename("EOF", "EndOfFile")

#define TESTHR(x) if FAILED(x) _com_issue_error(x)

#include &lt;stdio.h&gt;
#include &lt;ole2.h&gt;
#include "conio.h"
#include "ActiveConnectionX.h"

//Function declaration
void ActiveConnectionX(VOID);
void PrintProviderError(_ConnectionPtr pConnection);

///////////////////////////////////////////////////////////
//                                                       //
//      Main Function                                    //
//                                                       //
///////////////////////////////////////////////////////////
void main()
{
    if(FAILED(::CoInitialize(NULL)))
        return;
    
    ActiveConnectionX();
        
    //Wait here for user to see the output..
    printf("\n\nPress any key to continue..");
    getch();  
    
    ::CoUninitialize();
}



///////////////////////////////////////////////////////////
//                                                       //
//      ActiveConnectionX Function                       //
//                                                       //
///////////////////////////////////////////////////////////
VOID ActiveConnectionX(VOID)
{
    HRESULT hr = S_OK;  

    // Define ADO object pointers.
    // Initialize pointers on define.
    // These are in the ADODB::  namespace.
    _ConnectionPtr  pConnection      = NULL;
    _CommandPtr     pCmdByRoyalty  = NULL;
    _RecordsetPtr  pRstByRoyalty  = NULL;
    _RecordsetPtr  pRstAuthors   = NULL;
    _ParameterPtr    pPrmByRoyalty  = NULL;


    //Define Other variables
    IADORecordBinding   *picRs = NULL;  //Interface Pointer declared.(VC++ Extensions)  TCS(SPA)
    CEmployeeRs emprs;          //C++ class object  TCS(SPA)
    _bstr_t strAuthorId;
    int intRoyalty;
    VARIANT vtroyal ; 

    _bstr_t strCnn("Provider='sqloledb';Data Source='MySqlServer';"
            "Initial Catalog='pubs';Integrated Security='SSPI';");

    try
    {
        //Define a command object for a stored procedure. 

        TESTHR(pConnection.CreateInstance(__uuidof(Connection)));      
        hr = pConnection-&gt;Open(strCnn,"","",adConnectUnspecified);  
        
        TESTHR(pCmdByRoyalty.CreateInstance(__uuidof(Command)));
        
        pCmdByRoyalty-&gt;ActiveConnection = pConnection;
        pCmdByRoyalty-&gt;CommandText = "byRoyalty";
        pCmdByRoyalty-&gt;CommandType = adCmdStoredProc;
        pCmdByRoyalty-&gt;CommandTimeout = 15;

        //Define stored procedure's input parameter. 
        printf("Enter Royalty :  ");
        scanf("%d",&amp;intRoyalty);

        //Assign Integer value 
        vtroyal.vt = VT_I2;
        vtroyal.iVal  = intRoyalty;

        TESTHR(pPrmByRoyalty.CreateInstance(__uuidof(Parameter)));
        pPrmByRoyalty-&gt;Type = adInteger;
        pPrmByRoyalty-&gt;Size = 3;
        pPrmByRoyalty-&gt;Direction = adParamInput;
        pPrmByRoyalty-&gt;Value = vtroyal;
        pCmdByRoyalty-&gt;Parameters-&gt;Append(pPrmByRoyalty);
        
        //Create a recordset by executing a command. 
        pRstByRoyalty = pCmdByRoyalty-&gt;Execute(NULL,NULL,adCmdStoredProc); 

        //Open the authors table to get author names for display. 

        TESTHR(pRstAuthors.CreateInstance(__uuidof(Recordset)));
        hr = pRstAuthors-&gt;Open("authors",strCnn,adOpenForwardOnly,adLockReadOnly,adCmdTable);

        //Open an IADORecordBinding interface pointer which we'll use for Binding Recordset to a class    
        TESTHR(pRstAuthors-&gt;QueryInterface(__uuidof(IADORecordBinding),(LPVOID*)&amp;picRs));

        //Bind the Recordset to a C++ Class here    
        TESTHR(picRs-&gt;BindToRecordset(&amp;emprs));


        //Print current data in the recordset ,adding author names from author table. 
        printf("Authors With  %d  Percent Royalty",intRoyalty);

        while(!(pRstByRoyalty-&gt;EndOfFile))
        {
            strAuthorId = pRstByRoyalty-&gt;Fields-&gt;Item["au_id"]-&gt;Value;
            pRstAuthors-&gt;Filter = "au_id = '"+strAuthorId+"'";
         
            printf("\n\t%s, %s %s",emprs.lau_idStatus == adFldOK ? emprs.m_szau_id : "&lt;NULL&gt;",\
            emprs.lau_fnameStatus == adFldOK ? emprs.m_szau_fname : "&lt;NULL&gt;",\
                    emprs.lau_lnameStatus == adFldOK ? emprs.m_szau_lname : "&lt;NULL&gt;");

            pRstByRoyalty-&gt;MoveNext(); 
        }
    }
    catch(_com_error &amp;e)
    {
        // Notify the user of errors if any.
        _bstr_t bstrSource(e.Source());
        _bstr_t bstrDescription(e.Description());

         PrintProviderError(pConnection);
         printf("Source : %s \n Description : %s \n",(LPCSTR)bstrSource,(LPCSTR)bstrDescription);
    }

    // Clean up objects before exit.
    //Release the IADORecordset Interface here
    if (picRs) 
        picRs-&gt;Release();

    if (pRstByRoyalty)
        if (pRstByRoyalty-&gt;State == adStateOpen)
            pRstByRoyalty-&gt;Close();
    if (pRstAuthors)
        if (pRstAuthors-&gt;State == adStateOpen)
            pRstAuthors-&gt;Close();
    if (pConnection)
        if (pConnection-&gt;State == adStateOpen)
            pConnection-&gt;Close();
}



///////////////////////////////////////////////////////////
//                                                       //
//      PrintProviderError Function                      //
//                                                       //
///////////////////////////////////////////////////////////

VOID PrintProviderError(_ConnectionPtr pConnection)
{
    // Print Provider Errors from Connection object.
    // pErr is a record object in the Connection's Error collection.
    ErrorPtr    pErr  = NULL;
    long      nCount  = 0;    
    long      i     = 0;

    if( (pConnection-&gt;Errors-&gt;Count) &gt; 0)
    {
        nCount = pConnection-&gt;Errors-&gt;Count;
        // Collection ranges from 0 to nCount -1.
        for(i = 0; i &lt; nCount; i++)
        {
            pErr = pConnection-&gt;Errors-&gt;GetItem(i);
            printf("Error number: %x\t%s", pErr-&gt;Number,(LPCSTR)pErr-&gt;Description);
        }
    }
}

// EndActiveConnectionCpp
</PRE>

<P class="label"><B>ActiveConnectionX.h</B></P>

<PRE class="code">// BeginActiveConnectionH
#include "icrsint.h"


//This Class extracts  fname,lastname    

class CEmployeeRs : public CADORecordBinding
{
BEGIN_ADO_BINDING(CEmployeeRs)
    
    //Column au_id is the 1st field in the recordset   
    ADO_VARIABLE_LENGTH_ENTRY2(1, adVarChar, m_szau_id, 
         sizeof(m_szau_id), lau_idStatus, TRUE)

    ADO_VARIABLE_LENGTH_ENTRY2(2, adVarChar, m_szau_lname, 
         sizeof(m_szau_lname), lau_lnameStatus, TRUE)

    ADO_VARIABLE_LENGTH_ENTRY2(3, adVarChar, m_szau_fname, 
         sizeof(m_szau_fname), lau_fnameStatus, TRUE)
   
END_ADO_BINDING()

public:

    CHAR m_szau_id[20];
    ULONG lau_idStatus;

    CHAR m_szau_fname[40];
    ULONG lau_fnameStatus;
    
    CHAR   m_szau_lname[40];
    ULONG  lau_lnameStatus;

};
// EndActiveConnectionH</PRE>

<H4 class="dtH4">See Also</H4>

<P><A HREF="mdproactivecon.htm">ActiveConnection Property</A> | <A HREF="mdprocommandtext.htm">CommandText Property</A> | <A HREF="mdprocommandtimeout.htm">CommandTimeout Property</A> | <A HREF="mdprocommandtype.htm">CommandType Property</A> | <A HREF="mdprodirection.htm">Direction Property</A> | <A HREF="mdprosize.htm">Size Property</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
<P align="center"><A HREF="ado_sdk_copyright_and_trademarks.htm">&copy; 1998-2003 Microsoft Corporation. All rights reserved.</A></P>
</BODY>
</HTML>

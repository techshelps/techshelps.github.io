<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Attributes Property Example (VC++)</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/samples.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannerparthead td" nowrap>ADOX 2.5</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="adproattributesxvc"></A>Attributes Property Example (VC++)</H1>

<P>This example demonstrates the <A HREF="adproattributes.htm">Attributes</A> property of a <A HREF="adobjcolumn.htm">Column</A>. Setting it to <B>adColNullable</B> allows the user to set the value of a <A HREF="mdobjodbrec.htm">Recordset</A> <A HREF="mdobjfield.htm">Field</A> to an empty string. In this situation, the user can distinguish between a record where data is not known and a record where the data does not apply.</P>

<PRE class="code">// BeginAttributesCpp
#import "c:\Program Files\Common Files\system\ado\msado15.dll"
#import "c:\Program Files\Common Files\system\ado\msadox.dll" \
    no_namespace

#include "iostream.h"
#include "stdio.h"
#include "conio.h"
#include "ADOXAttributesX.h"

//Function declarations
inline void TESTHR(HRESULT x) {if FAILED(x) _com_issue_error(x);};
void AttributesX(void);
inline char* mygets(char* strDest, int n) 
{    
    char strExBuff[10];
    char* pstrRet = fgets(strDest, n, stdin);

    if (pstrRet == NULL)
        return NULL;

    if (!strrchr(strDest, '\n'))
        // Exhaust the input buffer.
        do
        {
            fgets(strExBuff, sizeof(strExBuff), stdin);
        }while (!strrchr(strExBuff, '\n'));
    else
        // Replace '\n' with '\0'
        strDest[strrchr(strDest, '\n') - strDest] = '\0';

    return pstrRet;
}

//////////////////////////////////////////////////////////
//                                                      //
//         Main Function                                //
//                                                      //
//////////////////////////////////////////////////////////
void main()
{
    if(FAILED(::CoInitialize(NULL)))
        return;

    AttributesX();

    ::CoUninitialize();
}

//////////////////////////////////////////////////////////
//                                                      //
//        AttributesX Function                          //
//                                                      //
//////////////////////////////////////////////////////////
void AttributesX(void)
{
    HRESULT hr = S_OK;

    // Define ADOX object pointers.
    // Initialize pointers on define.
    // These are in the ADOX::  namespace.
    _CatalogPtr m_pCatalog  = NULL;
    _ColumnPtr m_pColumn  = NULL;
    _TablePtr m_pTable  = NULL;

    // Define ADODB object pointers
    ADODB::_ConnectionPtr m_pCnn         = NULL;
    ADODB::_RecordsetPtr m_pRstEmployees  = NULL;

    IADORecordBinding *picRs  = NULL;   // Interface Pointer Declared
    CEmployeeRs emprs;            // C++ Class Object

    // Define string variables.
    _bstr_t strcnn("Provider='Microsoft.JET.OLEDB.4.0';"
        "Data Source= 'c:\\Program Files\\Microsoft Office\\"
        "Office\\Samples\\Northwind.mdb';");

    try
    {
        // Connect the catalog.
        TESTHR(hr = m_pCnn.CreateInstance(__uuidof (ADODB::Connection)));
        TESTHR(hr = m_pCatalog.CreateInstance(__uuidof (Catalog)));
        TESTHR(hr = m_pColumn.CreateInstance(__uuidof(Column)));
        TESTHR(hr = m_pRstEmployees.CreateInstance(__uuidof(ADODB::Recordset)));

        m_pCnn-&gt;Open(strcnn,"","",NULL);
        m_pCatalog-&gt;PutActiveConnection(
            _variant_t((IDispatch *) m_pCnn));
        m_pTable= m_pCatalog-&gt;Tables-&gt;GetItem("Employees");

        // Create a new Field object and append it to the Fields
        // collection of the Employees table.
        m_pColumn-&gt;Name = "FaxPhone";
        m_pColumn-&gt;Type = adVarWChar;
        m_pColumn-&gt;DefinedSize = 24;
        m_pColumn-&gt;Attributes = adColNullable;

        m_pCatalog-&gt;Tables-&gt;GetItem("Employees")-&gt;Columns-&gt;
            Append(m_pColumn-&gt;Name, adVarWChar, 24);
            //Append("FaxPhone",adVarWChar,24);

        // Open the Employees table for updating as a Recordset.
        m_pRstEmployees-&gt;Open("Employees",
            _variant_t((IDispatch *) m_pCnn),
            ADODB::adOpenKeyset,ADODB::adLockOptimistic,
            ADODB::adCmdTable);

        // Get user input.
        printf("Enter fax number for : %s %s\n",(LPSTR) (_bstr_t) 
            m_pRstEmployees-&gt;Fields-&gt;GetItem("LastName")-&gt;Value,
           (LPSTR) (_bstr_t) m_pRstEmployees-&gt;Fields-&gt;
            GetItem("FirstName")-&gt;Value);
        printf("[? - unknown, X - has no fax] : \n");
        char strInput[10];
        mygets(strInput, 10);
        char* strTemp = strtok(strInput," \t");
        _variant_t vNull;
        vNull.vt = VT_BSTR;
        vNull.bstrVal = NULL;
        if(strTemp!=NULL)
        {
            if(strcmp(strTemp,"?") == 0)
            {
                m_pRstEmployees-&gt;Fields-&gt;GetItem("FaxPhone")-&gt;
                    PutValue(vNull);
            }
            else if( (strcmp(strTemp,"X") == 0) | (strcmp(strTemp,"x") == 0) )
            {
                m_pRstEmployees-&gt;Fields-&gt;GetItem("FaxPhone")-&gt;
                    PutValue("");
            }
            else
            {
                m_pRstEmployees-&gt;Fields-&gt;GetItem("FaxPhone")-&gt;
                    PutValue(strTemp);
            }
            m_pRstEmployees-&gt;Update();

            // Open an IADORecordBinding interface pointer which 
            // we will use for binding Recordset to a class
            TESTHR(hr = m_pRstEmployees-&gt;QueryInterface(
                __uuidof(IADORecordBinding),(LPVOID*)&amp;picRs));

            // Bind the Recordset to a C++ class here
            TESTHR(hr = picRs-&gt;BindToRecordset(&amp;emprs));

            // Print report.
            printf("\nName - Fax number\n");
            printf("%s %s ",emprs.lemp_LastNameStatus == adFldOK ? 
                emprs.m_szemp_LastName : "&lt;NULL&gt;",
                emprs.lemp_FirstNameStatus == adFldOK ? 
                emprs.m_szemp_FirstName : "&lt;NULL&gt;");

            if (emprs.lemp_FaxphoneStatus == adFldNull)
                printf("- [Unknown]\n");
            else if (strcmp((LPSTR)emprs.m_szemp_Faxphone,"") == 0)
                printf("- [Has no fax]\n");
            else
                printf("- %s\n",emprs.m_szemp_Faxphone);
                
        }

        // Delete new field because this is a demonstration.
        //m_pTable-&gt;Columns-&gt;Delete(m_pColumn-&gt;Name);
    }
    catch(_com_error &amp;e)
    {
        // Notify the user of errors if any.
        _bstr_t bstrSource(e.Source());
        _bstr_t bstrDescription(e.Description());
          
        printf("\n\tSource :  %s \n\tdescription : %s \n ",
            (LPCSTR)bstrSource,(LPCSTR)bstrDescription);
    }
    catch(...)
    {
        cout &lt;&lt; "Error occured in AttributesX...."&lt;&lt; endl;
    }

  
    if (m_pRstEmployees)
        if (m_pRstEmployees-&gt;State == 1)
            m_pRstEmployees-&gt;Close();

    // Delete new field because this is a demonstration.
    if (m_pTable != NULL)
        m_pTable-&gt;Columns-&gt;Delete(m_pColumn-&gt;Name);

    if (m_pCnn)
        if (m_pCnn-&gt;State == 1)
            m_pCnn-&gt;Close();

    // Release the IADORecordset Interface here
    if(picRs)
        picRs-&gt;Release();

}
// EndAttributesCpp</PRE>

<P class="label"><B>ADOXAttributesX.h</B></P>

<PRE class="code"><B>// BeginAttributesH
</B>#include "icrsint.h"

//This class extracts LastName, FirstName, FaxPhone from Employees table

class CEmployeeRs : public CADORecordBinding
{
BEGIN_ADO_BINDING(CEmployeeRs)

        // Column LastName is the 2nd field in the table
        ADO_VARIABLE_LENGTH_ENTRY2(2,adVarChar,m_szemp_LastName,
            sizeof(m_szemp_LastName),lemp_LastNameStatus,TRUE)

        // Column FirstName is the 17th field in the table
        ADO_VARIABLE_LENGTH_ENTRY2(17,adVarChar,m_szemp_FirstName,
            sizeof(m_szemp_FirstName),lemp_FirstNameStatus,TRUE)

        // Column FaxPhone is the 18th field in the table
        ADO_VARIABLE_LENGTH_ENTRY2(18,adVarChar,m_szemp_Faxphone,
            sizeof(m_szemp_Faxphone),lemp_FaxphoneStatus,TRUE)

END_ADO_BINDING()

public:
    CHAR  m_szemp_LastName[21];
    ULONG lemp_LastNameStatus;
    CHAR  m_szemp_FirstName[11];
    ULONG lemp_FirstNameStatus;
    CHAR  m_szemp_Faxphone[25];
    ULONG lemp_FaxphoneStatus;
};
// EndAttributesH</PRE>

<H4 class="dtH4">See Also</H4>

<P><A HREF="adproattributes.htm">Attributes Property</A> | <A HREF="adobjcolumn.htm">Column Object</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
<P align="center"><A HREF="ado_sdk_copyright_and_trademarks.htm">&copy; 1998-2003 Microsoft Corporation. All rights reserved.</A></P>
</BODY>
</HTML>

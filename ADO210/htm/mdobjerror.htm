<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Error Object (ADO)</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/ADO.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannerparthead td" nowrap>ADO 2.5 API Reference</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="mdobjerror"></A>Error Object</H1>

<P>Contains details about data access errors that pertain to a single operation involving the provider.</P>

<PRE class="code"><A HREF="mdobjconnection.htm"><IMG SRC="objconn.gif" ALT="" BORDER=0></A>
<IMG SRC="parchild.gif" ALT="" BORDER=0><A HREF="mdcolerrors.htm"><IMG SRC="colerror.gif" ALT="" BORDER=0></A><IMG SRC="paracros.gif" ALT="" BORDER=0><IMG SRC="objerror.gif" ALT="" BORDER=0>
</PRE>

<H4 class="dtH4">Remarks</H4>

<P>Any operation involving ADO objects can generate one or more provider errors. As each error occurs, one or more <B>Error</B> objects are placed in the <A HREF="mdcolerrors.htm">Errors</A> collection of the <A HREF="mdobjconnection.htm">Connection</A> object. When another ADO operation generates an error, the <B>Errors</B> collection is cleared, and the new set of <B>Error</B> objects is placed in the <B>Errors</B> collection.</P>

<BLOCKQUOTE class="dtBlock">
<b class="le">Note</b>&nbsp;&nbsp;&nbsp;Each <B>Error</B> object represents a specific provider error, not an ADO error. ADO errors are exposed to the run-time exception-handling mechanism. For example, in Microsoft Visual Basic, the occurrence of an ADO-specific error will trigger an <B>On Error</B> event and appear in the <B>Error</B> object. For a complete list of ADO errors, see the <A HREF="mdcsterrorvalueenum.htm">ErrorValueEnum</A> topic.</BLOCKQUOTE>

<P>You can read an <B>Error</B> object's properties to obtain specific details about each error, including the following:

<UL type="disc">
	<LI>The <A HREF="mdprodescription.htm">Description</A> property, which contains the text of the error. This is the default property.</li>

	<LI>The <A HREF="mdpronumber.htm">Number</A> property, which contains the <B>Long</B> integer value of the error constant.</li>

	<LI>The <A HREF="mdproerrsource.htm">Source</A> property, which identifies the object that raised the error. This is particularly useful when you have several <B>Error</B> objects in the <B>Errors</B> collection following a request to a data source.</li>

	<LI>The <A HREF="mdprosqlstate.htm">SQLState</A> and <A HREF="mdpronativeerror.htm">NativeError</A> properties, which provide information from SQL data sources.</li>
</UL>

<P>When a provider error occurs, it is placed in the <B>Errors</B> collection of the <B>Connection</B> object. ADO supports the return of multiple errors by a single ADO operation to allow for error information specific to the provider. To obtain this rich error information in an error handler, use the appropriate error-trapping features of the language or environment you are working with, then use nested loops to enumerate the properties of each <B>Error</B> object in the <B>Errors</B> collection.</P>

<BLOCKQUOTE class="dtBlock">
<b class="le">Microsoft Visual Basic and VBScript Users</b>&nbsp;&nbsp;&nbsp;If there is no valid <B>Connection</B> object, you will need to retrieve error information from the <B>Error</B> object.</BLOCKQUOTE>

<P>Just as providers do, ADO clears the <B>OLE Error Info</B> object before making a call that could potentially generate a new provider error. However, the <B>Errors</B> collection on the <B>Connection</B> object is cleared and populated only when the provider generates a new error, or when the <A HREF="mdmthclear.htm">Clear</A> method is called.</P>

<P>Some properties and methods return warnings that appear as <B>Error</B> objects in the <B>Errors</B> collection but do not halt a program's execution. Before you call the <A HREF="mdmthadoresync.htm">Resync</A>, <A HREF="mdmthupdatebatch.htm">UpdateBatch</A>, or <A HREF="mdmthcancelbatch.htm">CancelBatch</A> methods on a <A HREF="mdobjodbrec.htm">Recordset</A> object; the <A HREF="mdmthcnnopen.htm">Open</A> method on a <B>Connection</B> object; or set the <A HREF="mdprofilter.htm">Filter</A> property on a <B>Recordset</B> object, call the <B>Clear</B> method on the <B>Errors</B> collection. That way, you can read the <A HREF="mdprocount.htm">Count</A> property of the <B>Errors</B> collection to test for returned warnings.</P>

<H4 class="dtH4">See Also</H4>

<P><A HREF="mdprodescriptionx.htm">Visual Basic Example</A> | <A HREF="mdprodescriptionxvc.htm">Visual C++ Example</A> | <A HREF="mdprodescriptionxvj.htm">Visual J++ Example</A></P>

<P><A HREF="mdobjerrorpme.htm">Error Object Properties, Methods, and Events</A> | <A HREF="mdobjconnection.htm">Connection Object</A> | <A HREF="mdcolerrors.htm">Errors Collection</A> | <A HREF="mdrefadoprovinfo.htm">Appendix A: Providers</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
<P align="center"><A HREF="ado_sdk_copyright_and_trademarks.htm">&copy; 1998-2003 Microsoft Corporation. All rights reserved.</A></P>
</BODY>
</HTML>

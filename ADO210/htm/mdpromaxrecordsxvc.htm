<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>MaxRecords Property Example (VC++)</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/samples.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannerparthead td" nowrap>ADO 2.5 Samples</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="mdpromaxrecordsxvc"></A>MaxRecords Property Example (VC++)</H1>

<P>This example uses the <A HREF="mdpromaxrecords.htm">MaxRecords</A> property to open a <A HREF="mdobjodbrec.htm">Recordset</A> containing the 10 most expensive titles in the <B><I>Titles</I></B> table.</P>

<PRE class="code">// BeginMaxRecordsCpp
#import "C:\Program Files\Common Files\System\ADO\msado15.dll"\
    no_namespace rename("EOF","EndOfFile")

#include &lt;ole2.h&gt;
#include &lt;stdio.h&gt;
#include &lt;conio.h&gt;
#include "MaxRecordsX.h"

// Function Declarations
inline void TESTHR(HRESULT x) {if FAILED(x) _com_issue_error(x);};
void MaxRecordsX(void);
void PrintProviderError(_ConnectionPtr pConnection);
void PrintComError(_com_error &amp;e);

//////////////////////////////////////////////////////////////
//                                                          //
//                        Main Function                     //
//                                                          //
//////////////////////////////////////////////////////////////

void main()
{
    if(FAILED(::CoInitialize(NULL)))
        return;

    MaxRecordsX();

    printf("Press any key to continue...");
    getch();
    ::CoUninitialize();
}

//   MaxRecordsX()  Function
void  MaxRecordsX(void)
{
    // Define ADO ObjectPointers
    // Initialize Pointers on define
    // These are in the ADODB :: namespace
    _RecordsetPtr pRstTemp    = NULL;

    // Define Other Variables
    IADORecordBinding *picRs  = NULL;   // Interface Pointer Declared  
    CTitleRs titlers;            // C++ Class Object
    HRESULT hr = S_OK;

    try
    {
        //Assign Connection String to Variable
        _bstr_t strCnn("Provider='sqloledb';Data Source='MySqlServer';"
                    "Initial Catalog='pubs';Integrated Security='SSPI';");
        
        // Open Recordset containing the 10 most expensive titles in the 
        // Titles table.
        TESTHR(pRstTemp.CreateInstance(__uuidof(Recordset)));

        pRstTemp-&gt;MaxRecords=10;

        pRstTemp-&gt;Open("SELECT title,price FROM Titles "
            "ORDER BY Price DESC",strCnn,adOpenForwardOnly,
            adLockReadOnly,adCmdText);

        // Open an IADORecordBinding interface pointer which 
        // we will use for binding Recordset to a class
        TESTHR(pRstTemp-&gt;QueryInterface(
            __uuidof(IADORecordBinding),(LPVOID*)&amp;picRs));

        // Bind the Recordset to a C++ class here
        TESTHR(picRs-&gt;BindToRecordset(&amp;titlers));

        // Display the contents of the Recordset
        printf("Top Ten Titles by Price:\n\n");

        while(!(pRstTemp-&gt;EndOfFile))
        {
            printf("%s ---  %6.2lf\n\n",titlers.lau_TitleStatus == 
                adFldOK ? titlers.m_szau_Title : "&lt;NULL&gt;",
                    titlers.lau_PriceStatus == adFldOK ? 
                    titlers.m_szau_Price : 0.00);
            pRstTemp-&gt;MoveNext();
        }
    }
    catch(_com_error &amp;e)
    {
       // Notify the user of errors if any.
       // Pass a connection pointer accessed from the Recordset.
        _variant_t vtConnect = pRstTemp-&gt;GetActiveConnection();

        // GetActiveConnection returns connect string if connection
        // is not open, else returns Connection object.
        switch(vtConnect.vt)
        {
            case VT_BSTR:
                PrintComError(e);
                break;
            case VT_DISPATCH:
                PrintProviderError(vtConnect);
                break;
            default:
                printf("Errors occured.");
                break;
        }
    }
    
    // Clean up objects before exit.
    //Release the IADORecordset Interface here   
    if (picRs)
        picRs-&gt;Release();
        
    if (pRstTemp)
        if (pRstTemp-&gt;State == adStateOpen)
            pRstTemp-&gt;Close();
};

//////////////////////////////////////////////////////////////
//                                                          //
//                  PrintProviderError Function             //
//                                                          //
//////////////////////////////////////////////////////////////

void PrintProviderError(_ConnectionPtr pConnection)
{
    //Print Provider Errors from Connection object
    //pErr is a record object in the Connection's Error collection
    ErrorPtr    pErr = NULL;

    if((pConnection-&gt;Errors-&gt;Count)&gt;0)
    {
        long nCount = pConnection-&gt;Errors-&gt;Count;
        
        //Collection ranges from 0 to nCount-1
        for(long i = 0;i &lt; nCount;i++)
        {
            pErr = pConnection-&gt;Errors-&gt;GetItem(i);
            printf("\t Error Number :%x \t %s",pErr-&gt;Number,
                pErr-&gt;Description);
        }
    }
}

///////////////////////////////////////////////////////////
//                                                       //
//      PrintComError Function                           //
//                                                       //
///////////////////////////////////////////////////////////

void PrintComError(_com_error &amp;e)
{
    _bstr_t bstrSource(e.Source());
    _bstr_t bstrDescription(e.Description());

    // Print Com errors.  
    printf("Error\n");
    printf("\tCode = %08lx\n", e.Error());
    printf("\tCode meaning = %s\n", e.ErrorMessage());
    printf("\tSource = %s\n", (LPCSTR) bstrSource);
    printf("\tDescription = %s\n", (LPCSTR) bstrDescription);
}
// EndMaxRecordsCpp</PRE>

<H4 class="dtH4">See Also</H4>

<P><A HREF="mdpromaxrecords.htm">MaxRecords Property</A> | <A HREF="mdobjodbrec.htm">Recordset Object</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
<P align="center"><A HREF="ado_sdk_copyright_and_trademarks.htm">&copy; 1998-2003 Microsoft Corporation. All rights reserved.</A></P>
</BODY>
</HTML>

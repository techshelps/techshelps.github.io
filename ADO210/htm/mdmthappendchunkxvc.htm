<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>AppendChunk and GetChunk Methods Example (VC++)</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/samples.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannerparthead td" nowrap>ADO 2.5 Samples</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="mdmthappendchunkxvc"></A>AppendChunk and GetChunk Methods Example (VC++)</H1>

<P>This example uses the <A HREF="mdmthappchunk.htm">AppendChunk</A> and <A HREF="mdmthgetchunk.htm">GetChunk</A> methods to fill an image field with data from another record.</P>

<PRE class="code">// BeginAppendChunkCpp
#import "C:\Program Files\Common Files\System\ADO\msado15.dll" \
    no_namespace rename("EOF", "EndOfFile")

#define ChunkSize    100

#include &lt;ole2.h&gt;
#include &lt;stdio.h&gt;
#include "conio.h"
#include "malloc.h"
#include "AppendChunkX.h"

//Function declarations
inline void TESTHR(HRESULT x) {if FAILED(x) _com_issue_error(x);};
void AppendChunkX(VOID);
void PrintProviderError(_ConnectionPtr pConnection);
inline int myscanf(char* strDest, int n) 
{    
    char strExBuff[10];
    char* pstrRet = fgets(strDest, n, stdin);

    if (pstrRet == NULL)
        return 0;

    if (!strrchr(strDest, '\n'))
        // Exhaust the input buffer.
        do
        {
            fgets(strExBuff, sizeof(strExBuff), stdin);
        }while (!strrchr(strExBuff, '\n'));
    else
        // Replace '\n' with '\0'
        strDest[strrchr(strDest, '\n') - strDest] = '\0';

    return strlen(strDest);
}
inline char* mygets(char* strDest, int n) 
{    
    char strExBuff[10];
    char* pstrRet = fgets(strDest, n, stdin);

    if (pstrRet == NULL)
        return NULL;

    if (!strrchr(strDest, '\n'))
        // Exhaust the input buffer.
        do
        {
            fgets(strExBuff, sizeof(strExBuff), stdin);
        }while (!strrchr(strExBuff, '\n'));
    else
        // Replace '\n' with '\0'
        strDest[strrchr(strDest, '\n') - strDest] = '\0';

    return pstrRet;
}

///////////////////////////////////////////////////////////
//                                                       //
//      Main Function                                    //
//                                                       //
///////////////////////////////////////////////////////////
void main()
{
    HRESULT  hr = S_OK;

    if(FAILED(::CoInitialize(NULL)))
        return;
    
    AppendChunkX();
        
    //Wait here for the user to see the output
    printf("\n\nPress any key to continue..");
    getch();
    ::CoUninitialize();
}


///////////////////////////////////////////////////////////
//                                                       //
//      AppendChunkX Function                            //
//                                                       //
///////////////////////////////////////////////////////////
VOID  AppendChunkX(VOID)
{
    // Define ADO object pointers.
    // Initialize pointers on define.
    // These are in the ADODB::  namespace.
    _RecordsetPtr pRstPubInfo = NULL;
    _ConnectionPtr pConnection = NULL;

    //Define other variables
    IADORecordBinding   *picRs = NULL;  //Interface Pointer declared.(VC++ Extensions)   
    CPubInfoRs pubrs;          //C++ class object   

    HRESULT hr = S_OK;
    _bstr_t strCnn("Provider='sqloledb';Data Source='MySqlServer';"
        "Initial Catalog='pubs';Integrated Security='SSPI';");

    _bstr_t strMessage,strPubID,strPRInfo;
    _variant_t varChunk;
    long lngOffSet,lngLogoSize;
    char pubId[50];
    lngOffSet = 0;    

    UCHAR chData;
    SAFEARRAY FAR *psa;
    SAFEARRAYBOUND rgsabound[1];
    rgsabound[0].lLbound = 0;
    rgsabound[0].cElements = ChunkSize;

    try
    {
        //Open a Connection.
        TESTHR(pConnection.CreateInstance(__uuidof(Connection)));
        hr = pConnection-&gt;Open(strCnn,"","",adConnectUnspecified);

        TESTHR(hr= pRstPubInfo.CreateInstance(__uuidof(Recordset)));  

        pRstPubInfo-&gt;CursorType = adOpenKeyset;
        pRstPubInfo-&gt;LockType = adLockOptimistic;

        hr = pRstPubInfo-&gt;Open("pub_info",
            _variant_t((IDispatch*)pConnection,true),
            adOpenKeyset,adLockOptimistic,adCmdTable);

        //Open an IADORecordBinding interface pointer which we'll use 
        //for Binding Recordset to a class    
        TESTHR(pRstPubInfo-&gt;QueryInterface(
            __uuidof(IADORecordBinding),(LPVOID*)&amp;picRs));

        //Bind the Recordset to a C++ Class here    
        TESTHR(picRs-&gt;BindToRecordset(&amp;pubrs));

        //Display the available logos here
        strMessage = "Available logos are: " + (_bstr_t)"\n\n";
        printf(strMessage);
        int Counter = 0;
        while(!(pRstPubInfo-&gt;EndOfFile))
        { 
            printf("\n%s",pubrs.m_sz_pubid);
            printf("\n%s",strtok(pubrs.m_sz_prinfo,","));

            //Display 5 records at a time and wait for user to continue..
            if (++Counter &gt;= 5)
            {
                Counter = 0;
                printf("\nPress any key to continue...");
                getch();
            }
            pRstPubInfo-&gt;MoveNext(); 
        }

        //Prompt For a Logo to Copy
        printf("\nEnter the ID of a logo to copy: ");
        myscanf(pubId, sizeof(pubId));
        strPubID = pubId;

        //Copy the logo to a variable in chunks

        pRstPubInfo-&gt;Filter = "pub_id = '"  + strPubID + "'";
        lngLogoSize = pRstPubInfo-&gt;Fields-&gt;Item["logo"]-&gt;ActualSize;

        //Create a safe array to store the array of BYTES  
        rgsabound[0].cElements = lngLogoSize;
        psa = SafeArrayCreate(VT_UI1,1,rgsabound);

        long index1 = 0;
        while(lngOffSet &lt; lngLogoSize)
        {
            varChunk = pRstPubInfo-&gt;Fields-&gt;
                        Item["logo"]-&gt;GetChunk(ChunkSize);

            //Copy the data only upto the Actual Size of Field.  
            for(long index=0;index&lt;=(ChunkSize-1);index++)
            {
                hr= SafeArrayGetElement(varChunk.parray,&amp;index,&amp;chData);
                if(SUCCEEDED(hr))
                {
                    //Take BYTE by BYTE and advance Memory Location
                    hr = SafeArrayPutElement(psa,&amp;index1,&amp;chData); 
                    index1++;
                }
                else
                    break;
            }
            lngOffSet = lngOffSet + ChunkSize;
        }
        lngOffSet = 0;

        printf("Enter a new Pub Id: ");
        myscanf(pubrs.m_sz_pubid, sizeof(pubrs.m_sz_pubid));
        strPubID = pubrs.m_sz_pubid;
        printf("Enter descriptive text: " );
        mygets(pubrs.m_sz_prinfo, sizeof(pubrs.m_sz_prinfo));
        
        pRstPubInfo-&gt;AddNew();
        pRstPubInfo-&gt;Fields-&gt;GetItem("pub_id")-&gt;PutValue(strPubID);
        pRstPubInfo-&gt;Fields-&gt;GetItem("pr_info")-&gt;
            PutValue(pubrs.m_sz_prinfo);

        //Assign the Safe array  to a variant. 
        varChunk.vt = VT_ARRAY|VT_UI1;
        varChunk.parray = psa;
        hr = pRstPubInfo-&gt;Fields-&gt;GetItem("logo")-&gt;
                AppendChunk(varChunk); 

        //Update the table 
        pRstPubInfo-&gt;Update();

        lngLogoSize = pRstPubInfo-&gt;Fields-&gt;Item["logo"]-&gt;ActualSize;

        //Show the newly added record.
        printf("New Record : %s\n Description : %s\n Logo Size : %s",
            pubrs.m_sz_pubid,
            pubrs.m_sz_prinfo,(LPCSTR)(_bstr_t)pRstPubInfo-&gt;Fields-&gt;
            Item["logo"]-&gt;ActualSize);

        //Delete new record because this is demonstration.
        pConnection-&gt;Execute("DELETE FROM PUB_INFO WHERE pub_id = '"
                        + strPubID +"'",NULL,adCmdText);
    }
    catch(_com_error &amp;e)
    {
         // Notify the user of errors if any.
        _bstr_t bstrSource(e.Source());
        _bstr_t bstrDescription(e.Description());

        PrintProviderError(pConnection);
        printf("Source : %s \n Description : %s\n",(LPCSTR)bstrSource,
            (LPCSTR)bstrDescription);
    }
    
    // Clean up objects before exit.
    if (pRstPubInfo)
        if (pRstPubInfo-&gt;State == adStateOpen)
            pRstPubInfo-&gt;Close();
    if (pConnection)
        if (pConnection-&gt;State == adStateOpen)
            pConnection-&gt;Close();
}


///////////////////////////////////////////////////////////
//                                                       //
//      PrintProviderError Function                      //
//                                                       //
///////////////////////////////////////////////////////////

VOID PrintProviderError(_ConnectionPtr pConnection)
{
    // Print Provider Errors from Connection object.
    // pErr is a record object in the Connection's Error collection.
    ErrorPtr    pErr = NULL;
    long        nCount = 0;    
    long        i = 0;

    if( (pConnection-&gt;Errors-&gt;Count) &gt; 0)
    {
        nCount = pConnection-&gt;Errors-&gt;Count;
        // Collection ranges from 0 to nCount -1.
        for(i = 0; i &lt; nCount; i++)
        {
            pErr = pConnection-&gt;Errors-&gt;GetItem(i);
            printf("\t Error number: %x\t%s", pErr-&gt;Number,(LPCSTR) pErr-&gt;Description);
        }
    }
}

// EndAppendChunkCpp
</PRE>

<P class="label"><B>AppendChunkX.h</B></P>

<PRE class="code">// BeginAppendChunkH
#include "icrsint.h"

//This Class extracts pubid,prinfo.

class CPubInfoRs : public CADORecordBinding
{
    BEGIN_ADO_BINDING(CPubInfoRs)
        
        ADO_VARIABLE_LENGTH_ENTRY2(1, adVarChar, m_sz_pubid, 
         sizeof(m_sz_pubid), l_pubid, TRUE)
        
        ADO_VARIABLE_LENGTH_ENTRY2(3, adVarChar, m_sz_prinfo, 
         sizeof(m_sz_prinfo), l_prinfo, TRUE)
   
    END_ADO_BINDING()

public:
   CHAR   m_sz_pubid[10];
   ULONG  l_pubid;
   CHAR   m_sz_prinfo[200];
   ULONG l_prinfo;    
};
// EndAppendChunkH</PRE>

<H4 class="dtH4">See Also</H4>

<P><A HREF="mdmthappchunk.htm">AppendChunk Method</A> | <A HREF="mdobjfield.htm">Field Object</A> | <A HREF="mdmthgetchunk.htm">GetChunk Method</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
<P align="center"><A HREF="ado_sdk_copyright_and_trademarks.htm">&copy; 1998-2003 Microsoft Corporation. All rights reserved.</A></P>
</BODY>
</HTML>

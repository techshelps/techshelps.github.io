<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>ADO Events Model Example (VC++)</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/samples.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannerparthead td" nowrap>ADO 2.5 Samples</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="mdevteventmodelxvc"></A>ADO Events Model Example (VC++)</H1>

<P>The Visual C++ section of <A HREF="mdmscadoeventinstantiation.htm">ADO Event Instantiation by Language</A> gives a general description of how to instantiate the ADO event model. The following is a specific example of instantiating the event model within the environment created by the <B>#import</B> directive.</P>

<P>The general description uses <B>adoint.h</B> as a reference for method signatures. However, a few details in the general description change slightly as a result of using the <B>#import</B> directive:

<UL type="disc">
	<LI>The <B>#import</B> directive resolves <B>typedef</B>'s, and method signature data types and modifiers to their fundamental forms.</li>

	<LI>The pure virtual methods that must be overwritten are all prefixed by "<B>raw_</B>".</li>
</UL>

<P>Some of the code simply reflects coding style.

<UL type="disc">
	<LI>The pointer to <B>IUnknown</B> used by the <B>Advise</B> method is obtained explicitly with a call to <B>QueryInterface</B>.</li>

	<LI>You don't need to explicitly code a destructor in the class definitions.</li>

	<LI>You may want to code more robust implementations of QueryInterface, AddRef, and Release.</li>

	<LI>The <B>__uuidof()</B> directive is used extensively to obtain interface IDs.</li>
</UL>

<P>Finally, the example contains some working code.

<UL type="disc">
	<LI>The example is written as a console application.</li>

	<LI>You should insert your own code under the comment, "<code class="ce">// Do some work</code>".</li>

	<LI>All the event handlers default to doing nothing, and canceling further notifications. You should insert the appropriate code for your application, and allow notifications if required.</li>
</UL>

<PRE class="code">// eventmodel.cpp : Defines the entry point for the console application.
//

#import "c:\Program Files\Common Files\System\ADO\msado15.dll" \
&nbsp;&nbsp;&nbsp;no_namespace rename("EOF", "EndOfFile")
#include &lt;comdef.h&gt;
#include &lt;stdio.h&gt;

//----The Connection events----------------------------------------------

class CConnEvent : public ConnectionEventsVt
{
private:
      ULONG&nbsp;&nbsp;&nbsp;m_cRef;
   public:
      CConnEvent() { m_cRef = 0; };
      ~CConnEvent() {};


      STDMETHODIMP QueryInterface(REFIID riid, void ** ppv);
      STDMETHODIMP_(ULONG) AddRef(void);
      STDMETHODIMP_(ULONG) Release(void);

      STDMETHODIMP raw_InfoMessage( 
         struct Error *pError,
         EventStatusEnum *adStatus,
         struct _Connection *pConnection);
      
      STDMETHODIMP raw_BeginTransComplete( 
         LONG TransactionLevel,
         struct Error *pError,
         EventStatusEnum *adStatus,
         struct _Connection *pConnection);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
   STDMETHODIMP raw_CommitTransComplete( 
         struct Error *pError,
         EventStatusEnum *adStatus,
         struct _Connection *pConnection);
      
      STDMETHODIMP raw_RollbackTransComplete( 
         struct Error *pError,
         EventStatusEnum *adStatus,
         struct _Connection *pConnection);
      
      STDMETHODIMP raw_WillExecute( 
         BSTR *Source,
         CursorTypeEnum *CursorType,
         LockTypeEnum *LockType,
         long *Options,
         EventStatusEnum *adStatus,
         struct _Command *pCommand,
         struct _Recordset *pRecordset,
         struct _Connection *pConnection);
      
      STDMETHODIMP raw_ExecuteComplete( 
         LONG RecordsAffected,
         struct Error *pError,
         EventStatusEnum *adStatus,
         struct _Command *pCommand,
         struct _Recordset *pRecordset,
         struct _Connection *pConnection);
      
   STDMETHODIMP raw_WillConnect( 
         BSTR *ConnectionString,
         BSTR *UserID,
         BSTR *Password,
         long *Options,
         EventStatusEnum *adStatus,
         struct _Connection *pConnection);
      
      STDMETHODIMP raw_ConnectComplete( 
         struct Error *pError,
         EventStatusEnum *adStatus,
         struct _Connection *pConnection);
      
      STDMETHODIMP raw_Disconnect( 
         EventStatusEnum *adStatus,
         struct _Connection *pConnection);
};

//-----The Recordset events----------------------------------------------

class CRstEvent : public RecordsetEventsVt
    {
   private:
      ULONG m_cRef;&nbsp;&nbsp;&nbsp;
    public:
      CRstEvent() { m_cRef = 0; };
      ~CRstEvent() {};

         STDMETHODIMP QueryInterface(REFIID riid, void ** ppv);
         STDMETHODIMP_(ULONG) AddRef(void);
         STDMETHODIMP_(ULONG) Release(void);

         STDMETHODIMP raw_WillChangeField( 
         LONG cFields,
         VARIANT Fields,
         EventStatusEnum *adStatus,
         struct _Recordset *pRecordset);
      
      STDMETHODIMP raw_FieldChangeComplete( 
         LONG cFields,
         VARIANT Fields,
         struct Error *pError,
         EventStatusEnum *adStatus,
         struct _Recordset *pRecordset);
      
      STDMETHODIMP raw_WillChangeRecord( 
         EventReasonEnum adReason,
         LONG cRecords,
         EventStatusEnum *adStatus,
         struct _Recordset *pRecordset);
      
      STDMETHODIMP raw_RecordChangeComplete( 
         EventReasonEnum adReason,
         LONG cRecords,
         struct Error *pError,
         EventStatusEnum *adStatus,
         struct _Recordset *pRecordset);
      
      STDMETHODIMP raw_WillChangeRecordset( 
         EventReasonEnum adReason,
         EventStatusEnum *adStatus,
         struct _Recordset *pRecordset);
      
      STDMETHODIMP raw_RecordsetChangeComplete( 
         EventReasonEnum adReason,
         struct Error *pError,
         EventStatusEnum *adStatus,
         struct _Recordset *pRecordset);
      
      STDMETHODIMP raw_WillMove( 
         EventReasonEnum adReason,
         EventStatusEnum *adStatus,
         struct _Recordset *pRecordset);
      
      STDMETHODIMP raw_MoveComplete( 
         EventReasonEnum adReason,
         struct Error *pError,
         EventStatusEnum *adStatus,
         struct _Recordset *pRecordset);
      
      STDMETHODIMP raw_EndOfRecordset( 
         VARIANT_BOOL *fMoreData,
         EventStatusEnum *adStatus,
         struct _Recordset *pRecordset);
      
      STDMETHODIMP raw_FetchProgress( 
         long Progress,
         long MaxProgress,
         EventStatusEnum *adStatus,
         struct _Recordset *pRecordset);
      
      STDMETHODIMP raw_FetchComplete( 
         struct Error *pError,
         EventStatusEnum *adStatus,
         struct _Recordset *pRecordset);
};


//-----Implement each connection method----------------------------------

      STDMETHODIMP CConnEvent::raw_InfoMessage( 
         struct Error *pError,
         EventStatusEnum *adStatus,
         struct _Connection *pConnection)
         {
         *adStatus = adStatusUnwantedEvent;
         return S_OK;
         };
      
      STDMETHODIMP CConnEvent::raw_BeginTransComplete( 
         LONG TransactionLevel,
         struct Error *pError,
         EventStatusEnum *adStatus,
         struct _Connection *pConnection)
         {
         *adStatus = adStatusUnwantedEvent;
         return S_OK;
         };
      
      STDMETHODIMP CConnEvent::raw_CommitTransComplete( 
         struct Error *pError,
         EventStatusEnum *adStatus,
         struct _Connection *pConnection)
         {
         *adStatus = adStatusUnwantedEvent;
         return S_OK;
         };
      
      STDMETHODIMP CConnEvent::raw_RollbackTransComplete( 
         struct Error *pError,
         EventStatusEnum *adStatus,
         struct _Connection *pConnection)
         {
         *adStatus = adStatusUnwantedEvent;
         return S_OK;
         };
      
   STDMETHODIMP CConnEvent::raw_WillExecute( 
         BSTR *Source,
         CursorTypeEnum *CursorType,
         LockTypeEnum *LockType,
         long *Options,
         EventStatusEnum *adStatus,
         struct _Command *pCommand,
         struct _Recordset *pRecordset,
         struct _Connection *pConnection)
         {
         *adStatus = adStatusUnwantedEvent;
         return S_OK;
         };
      
      STDMETHODIMP CConnEvent::raw_ExecuteComplete( 
         LONG RecordsAffected,
         struct Error *pError,
         EventStatusEnum *adStatus,
         struct _Command *pCommand,
         struct _Recordset *pRecordset,
         struct _Connection *pConnection)
         {
         *adStatus = adStatusUnwantedEvent;
         return S_OK;
         };
      
      STDMETHODIMP CConnEvent::raw_WillConnect( 
         BSTR *ConnectionString,
         BSTR *UserID,
         BSTR *Password,
         long *Options,
         EventStatusEnum *adStatus,
         struct _Connection *pConnection)
         {
         *adStatus = adStatusUnwantedEvent;
         return S_OK;
         };
      
      STDMETHODIMP CConnEvent::raw_ConnectComplete( 
         struct Error *pError,
         EventStatusEnum *adStatus,
         struct _Connection *pConnection)
         {
         *adStatus = adStatusUnwantedEvent;
         return S_OK;
         };
      
      STDMETHODIMP CConnEvent::raw_Disconnect( 
         EventStatusEnum *adStatus,
         struct _Connection *pConnection)
         {
         *adStatus = adStatusUnwantedEvent;
         return S_OK;
         };


//-----Implement each recordset method-----------------------------------

      STDMETHODIMP CRstEvent::raw_WillChangeField( 
         LONG cFields,
         VARIANT Fields,
         EventStatusEnum *adStatus,
         struct _Recordset *pRecordset)
         {
         *adStatus = adStatusUnwantedEvent;
         return S_OK;
         };
      
      STDMETHODIMP CRstEvent::raw_FieldChangeComplete( 
         LONG cFields,
         VARIANT Fields,
         struct Error *pError,
         EventStatusEnum *adStatus,
         struct _Recordset *pRecordset)
         {
         *adStatus = adStatusUnwantedEvent;
         return S_OK;
         };
      
      STDMETHODIMP CRstEvent::raw_WillChangeRecord( 
         EventReasonEnum adReason,
         LONG cRecords,
         EventStatusEnum *adStatus,
         struct _Recordset *pRecordset)
         {
         *adStatus = adStatusUnwantedEvent;
         return S_OK;
         };
      
      STDMETHODIMP CRstEvent::raw_RecordChangeComplete( 
         EventReasonEnum adReason,
         LONG cRecords,
         struct Error *pError,
         EventStatusEnum *adStatus,
         struct _Recordset *pRecordset)
         {
         *adStatus = adStatusUnwantedEvent;
         return S_OK;
         };
      
      STDMETHODIMP CRstEvent::raw_WillChangeRecordset( 
         EventReasonEnum adReason,
         EventStatusEnum *adStatus,
         struct _Recordset *pRecordset)
         {
         *adStatus = adStatusUnwantedEvent;
         return S_OK;
         };
      
      STDMETHODIMP CRstEvent::raw_RecordsetChangeComplete( 
         EventReasonEnum adReason,
         struct Error *pError,
         EventStatusEnum *adStatus,
         struct _Recordset *pRecordset)
         {
         *adStatus = adStatusUnwantedEvent;
         return S_OK;
         };
      
      STDMETHODIMP CRstEvent::raw_WillMove( 
         EventReasonEnum adReason,
         EventStatusEnum *adStatus,
         struct _Recordset *pRecordset)
         {
         *adStatus = adStatusUnwantedEvent;
         return S_OK;
         };
      
      STDMETHODIMP CRstEvent::raw_MoveComplete( 
         EventReasonEnum adReason,
         struct Error *pError,
         EventStatusEnum *adStatus,
         struct _Recordset *pRecordset)
         {
         *adStatus = adStatusUnwantedEvent;
         return S_OK;
         };
      
      STDMETHODIMP CRstEvent::raw_EndOfRecordset( 
         VARIANT_BOOL *fMoreData,
         EventStatusEnum *adStatus,
         struct _Recordset *pRecordset)
         {
         *adStatus = adStatusUnwantedEvent;
         return S_OK;
         };
      
      STDMETHODIMP CRstEvent::raw_FetchProgress( 
         long Progress,
         long MaxProgress,
         EventStatusEnum *adStatus,
         struct _Recordset *pRecordset)
         {
         *adStatus = adStatusUnwantedEvent;
         return S_OK;
         };
      
      STDMETHODIMP CRstEvent::raw_FetchComplete( 
         struct Error *pError,
         EventStatusEnum *adStatus,
         struct _Recordset *pRecordset)
         {
         *adStatus = adStatusUnwantedEvent;
         return S_OK;
         };


//-----Implement QueryInterface, AddRef, and Release---------------------

   STDMETHODIMP CRstEvent::QueryInterface(REFIID riid, void ** ppv) 
   {
      *ppv = NULL;
      if (riid == __uuidof(IUnknown) || 
&nbsp;&nbsp;&nbsp;&nbsp;          riid == __uuidof(RecordsetEventsVt)) *ppv = this;
      if (*ppv == NULL)
         return ResultFromScode(E_NOINTERFACE);
      AddRef();
      return NOERROR;
   }
   STDMETHODIMP_(ULONG) CRstEvent::AddRef(void) { return ++m_cRef; };
   STDMETHODIMP_(ULONG) CRstEvent::Release()&nbsp;&nbsp;&nbsp;
                              { 
                              if (0 != --m_cRef) return m_cRef;
                              delete this;
                              return 0;
                              }

   STDMETHODIMP CConnEvent::QueryInterface(REFIID riid, void ** ppv) 
      
   {
      *ppv = NULL;
      if (riid == __uuidof(IUnknown) || 
          riid == __uuidof(ConnectionEventsVt)) *ppv = this;
      if (*ppv == NULL)
         return ResultFromScode(E_NOINTERFACE);
      AddRef();
      return NOERROR;
   }
   STDMETHODIMP_(ULONG) CConnEvent::AddRef() { return ++m_cRef; };
   STDMETHODIMP_(ULONG) CConnEvent::Release() &nbsp;&nbsp;&nbsp;
                              { 
                              if (0 != --m_cRef) return m_cRef;
                              delete this;
                              return 0;
                              }

//-----Write your main block of code-------------------------------------

int main(int argc, char* argv[])
{
   HRESULT hr;
   DWORD&nbsp;&nbsp;&nbsp;dwConnEvt;
   DWORD&nbsp;&nbsp;&nbsp;dwRstEvt;
   IConnectionPointContainer&nbsp;&nbsp;&nbsp;*pCPC = NULL;
   IConnectionPoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*pCP = NULL;
   IUnknown&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*pUnk = NULL;
   CRstEvent&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*pRstEvent = NULL;
   CConnEvent&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*pConnEvent= NULL;
   int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rc = 0;
   _RecordsetPtr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pRst; 
   _ConnectionPtr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pConn;

   ::CoInitialize(NULL);
   
   hr = pConn.CreateInstance(__uuidof(Connection));
   if (FAILED(hr)) return rc;
   
   hr = pRst.CreateInstance(__uuidof(Recordset));
   if (FAILED(hr)) return rc;

   // Start using the Connection events

   hr = pConn-&gt;QueryInterface(__uuidof(IConnectionPointContainer), 
      (void **)&amp;pCPC);
   if (FAILED(hr)) return rc;
   hr = pCPC-&gt;FindConnectionPoint(__uuidof(ConnectionEvents), &amp;pCP);
   pCPC-&gt;Release();
   if (FAILED(hr)) return rc;

   pConnEvent = new CConnEvent();
   hr = pConnEvent-&gt;QueryInterface(__uuidof(IUnknown), (void **) &amp;pUnk);
   if (FAILED(hr)) return rc;
   hr = pCP-&gt;Advise(pUnk, &amp;dwConnEvt);
   pCP-&gt;Release();
   if (FAILED(hr)) return rc;

   // Start using the Recordset events

   hr = pRst-&gt;QueryInterface(__uuidof(IConnectionPointContainer), 
      (void **)&amp;pCPC);
   if (FAILED(hr)) return rc;
   hr = pCPC-&gt;FindConnectionPoint(__uuidof(RecordsetEvents), &amp;pCP);
   pCPC-&gt;Release();
   if (FAILED(hr)) return rc;

   pRstEvent = new CRstEvent();
   hr = pRstEvent-&gt;QueryInterface(__uuidof(IUnknown), (void **) &amp;pUnk);
   if (FAILED(hr)) return rc;
   hr = pCP-&gt;Advise(pUnk, &amp;dwRstEvt);
   pCP-&gt;Release();
   if (FAILED(hr)) return rc;

   // Do some work

   pConn-&gt;Open("dsn=Pubs;", "MyUserName", "MyPassword", adConnectUnspecified);
   pRst-&gt;Open("SELECT * FROM authors", (IDispatch *) pConn, 
         adOpenStatic, adLockReadOnly, adCmdText);
   pRst-&gt;MoveFirst();
   while (pRst-&gt;EndOfFile == FALSE)
   {
      wprintf(L"Name = '%s'\n", (wchar_t*) 
         ((_bstr_t) pRst-&gt;Fields-&gt;GetItem("au_lname")-&gt;Value));
      pRst-&gt;MoveNext();
   }

   pRst-&gt;Close();
   pConn-&gt;Close();

   // Stop using the Connection events

   hr = pConn-&gt;QueryInterface(__uuidof(IConnectionPointContainer), 
      (void **) &amp;pCPC);
   if (FAILED(hr)) return rc;
   hr = pCPC-&gt;FindConnectionPoint(__uuidof(ConnectionEvents), &amp;pCP);
   pCPC-&gt;Release();
   if (FAILED(hr)) return rc;
   hr = pCP-&gt;Unadvise( dwConnEvt );
   pCP-&gt;Release();
   if (FAILED(hr)) return rc;

   // Stop using the Recordset events
   hr = pRst-&gt;QueryInterface(__uuidof(IConnectionPointContainer), 
      (void **) &amp;pCPC);
   if (FAILED(hr)) return rc;
   hr = pCPC-&gt;FindConnectionPoint(__uuidof(RecordsetEvents), &amp;pCP);
   pCPC-&gt;Release();
   if (FAILED(hr)) return rc;
   hr = pCP-&gt;Unadvise( dwRstEvt );
   pCP-&gt;Release();
   if (FAILED(hr)) return rc;

   CoUninitialize();
   return 1;
}</PRE>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
<P align="center"><A HREF="ado_sdk_copyright_and_trademarks.htm">&copy; 1998-2003 Microsoft Corporation. All rights reserved.</A></P>
</BODY>
</HTML>

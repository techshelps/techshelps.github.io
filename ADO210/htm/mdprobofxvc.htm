<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>BOF, EOF, and Bookmark Properties Example (VC++)</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/samples.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannerparthead td" nowrap>ADO 2.5 Samples</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="mdprobofxvc"></A>BOF, EOF, and Bookmark Properties Example (VC++)</H1>

<P>The first function in this example uses the <A HREF="mdprobof.htm">BOF</A> and <A HREF="mdprobof.htm">EOF</A> properties to display a message if a user tries to move past the first or last record of a <A HREF="mdobjodbrec.htm">Recordset</A>. It uses the <A HREF="mdprobookmark.htm">Bookmark</A> property to let the user flag a record in a <B>Recordset</B> and return to it later.</P>

<P>The second function uses the Bookmark property to place the <B>Bookmark</B> of every other record from a <B>Recordset</B> into an array, and then filters the Recordset using the array.</P>

<PRE class="code">// BeginBOFCpp
#import "C:\Program Files\Common Files\System\ADO\msado15.dll" \
    no_namespace rename("EOF", "EndOfFile")

#include &lt;ole2.h&gt;
#include &lt;stdio.h&gt;
#include &lt;conio.h&gt;
#include "BofEofBookmark.h"

// Function declarations
inline void TESTHR(HRESULT x) {if FAILED(x) _com_issue_error(x);};
void BOFX(void);
void BookmarkX(void);
void PrintProviderError(_ConnectionPtr pConnection);
void PrintComError(_com_error &amp;e);

///////////////////////////////////////////////////////////
//                                                       //
//      BOFX Function                                    //
//                                                       //
///////////////////////////////////////////////////////////

void main()
{
    if(FAILED(::CoInitialize(NULL))) 
        return;

    BOFX();

    //Clear the screen for the next display   
    system("cls"); 

    BookmarkX();

    printf("Press any key to continue...");
    getch();

    ::CoUninitialize();
}

///////////////////////////////////////////////////////////
//                                                       //
//      BOFX Function                                    //
//                                                       //
///////////////////////////////////////////////////////////

void BOFX(void) 
{
    // Define ADO object pointers.
    // Initialize pointers on define.
    // These are in the ADODB::  namespace
    _RecordsetPtr rstPublishers = NULL;

    //Define Other Variables
    HRESULT hr = S_OK;
    IADORecordBinding  *picRs = NULL;    //Interface Pointer declared.
    CPublishers Publs;

    bstr_t strCnn("Provider='sqloledb';Data Source='MySqlServer';"
        "Initial Catalog='pubs';Integrated Security='SSPI';");
    _bstr_t strMessage;
    _variant_t VarBookmark;
    int intCommand = 0;
    _variant_t TempPublisher;

    try
    {
        // Open recordset with data from Publishers table.
        TESTHR(rstPublishers.CreateInstance(__uuidof(Recordset)));  
        rstPublishers-&gt;CursorType = adOpenStatic;

        // Use client cursor to enable absolutePosition property.
        rstPublishers-&gt;CursorLocation = adUseClient;
        rstPublishers-&gt;Open("select pub_id, pub_name from publishers"
            " order by pub_name", strCnn, adOpenStatic, 
            adLockBatchOptimistic, adCmdText);

        //Open an IADORecordBinding interface pointer 
        //which will be used for Binding Recordset to a class
        TESTHR(rstPublishers-&gt;QueryInterface(
            __uuidof(IADORecordBinding), (LPVOID*)&amp;picRs));

        //Bind the Recordset to a C++ Class here
        TESTHR(picRs-&gt;BindToRecordset(&amp;Publs));

        rstPublishers-&gt;MoveFirst();

         while (true)    // Continuous loop.
        {
            // Display information about the current record
            // and get user input
            printf("Publisher:%s \n Record %d of %d\n\n",
                Publs.lP_pubnameStatus  == adFldOK ? 
                Publs.m_szP_pubname : "&lt;NULL&gt;",
                rstPublishers-&gt;AbsolutePosition, 
                rstPublishers-&gt;RecordCount);
            printf("Enter command:\n ");
            printf("[1 - next          /  2 - previous       /\n");
            printf(" 3 - set bookmark  /  4 - go to bookmark /\n");
            printf(" 5 - quit                                ]\n");

            scanf("%d", &amp;intCommand);
            if ((intCommand &lt; 1) || (intCommand &gt; 4))
                break;    // Out of range entry exits program loop.

            switch(intCommand) 
            {
                // Move forward or backward, trapping for BOF or EOF
                case 1:
                    rstPublishers-&gt;MoveNext();
                    if (rstPublishers-&gt;EndOfFile)
                    {
                        printf("\nCannot move past the last record."
                               " Try again...\n");
                        rstPublishers-&gt;MoveLast();
                    }
                    break;

                case 2:
                    rstPublishers-&gt;MovePrevious();
                    if (rstPublishers-&gt;BOF)
                    {
                        printf("\nCannot move before the first record."
                               " Try again...\n");
                        rstPublishers-&gt;MoveFirst();
                    }
                    break;

                // store the bookmark of the current record.
                case 3:
                    VarBookmark = rstPublishers-&gt;Bookmark;
                    // Go to the record indicated by the 
                    // stored bookmark
                    break;

                case 4:
                    // Check for whether bookmark set for a record
                    if (VarBookmark.vt == VT_EMPTY)
                        printf("No Bookmark set!\n");
                    else 
                        rstPublishers-&gt;Bookmark = VarBookmark;
                    break;

                default:
                    break;
            }
        }
    }
    catch (_com_error &amp;e)
    {
        printf("Error in BOFx...\n");
        // Notify the user of errors if any.
        _variant_t vtConnect = rstPublishers-&gt;GetActiveConnection();

        // GetActiveConnection returns connect string if connection
        // is not open, else returns Connection object.
        switch(vtConnect.vt)
        {
            case VT_BSTR:
                printf("Error:\n");
                printf("Code = %08lx\n", e.Error());
                printf("Message = %s\n", e.ErrorMessage());
                printf("Source = %s\n", (LPCSTR) e.Source());
                printf("Description = %s\n", (LPCSTR) e.Description());
                break;
            case VT_DISPATCH:
                PrintProviderError(vtConnect);
                break;
            default:
                printf("Errors occured.");
                break;
        }
        printf("Press any key to continue...");
        getch();
    }
    

    // Clean up objects before exit.
    //Release the IADORecordset Interface here   
    if (picRs)
        picRs-&gt;Release();
        
    if (rstPublishers)
        if (rstPublishers-&gt;State == adStateOpen)
            rstPublishers-&gt;Close();
}

///////////////////////////////////////////////////////////
//                                                       //
//      BookmarkX Function                               //
//                                                       //
///////////////////////////////////////////////////////////

void BookmarkX(void)
{
    // Define ADO object pointers.
    // Initialize pointers on define.
    // These are in the ADODB::  namespace.
    _RecordsetPtr rstAuthors = NULL;

    //Define Other Variables
    IADORecordBinding *picRs = NULL; //Interface Pointer declared.
    CAuthors Authrs;
    HRESULT  hr = S_OK;
    _bstr_t  strCnn("Provider='sqloledb';Data Source='MySqlServer';"
              "Initial Catalog='pubs';Integrated Security='SSPI';");
    _variant_t vBookmark;

    // Variable declaration for safe arrays.
    SAFEARRAY FAR* psa; 

    // define ARRAY/ VARIANT variant.
    vBookmark.vt = VT_ARRAY|VT_VARIANT; 
    SAFEARRAYBOUND rgsabound[1];
    rgsabound[0].lLbound = 0;     
    rgsabound[0].cElements = 11;
    long ii = 0;

    try
    {
        rstAuthors.CreateInstance(__uuidof(Recordset));  
        // Set The Cursor Location
        rstAuthors-&gt;CursorLocation  = adUseClient;
        rstAuthors-&gt;PutActiveConnection((_variant_t)strCnn);    

        // Open Authors table
        TESTHR(rstAuthors-&gt;Open("select * from authors",strCnn, 
            adOpenStatic,adLockBatchOptimistic,adCmdText));

        //Open an IADORecordBinding interface pointer 
        //which we'll use for binding Recordset to a class   
        TESTHR(rstAuthors-&gt;QueryInterface(__uuidof(IADORecordBinding), 
                (LPVOID*)&amp;picRs));

        //Bind the Recordset to a C++ Class here 
        TESTHR(picRs-&gt;BindToRecordset(&amp;Authrs));

        printf("Number of Records before filtering:  %d\n", 
                rstAuthors-&gt;RecordCount);

        // Create safearrays to store array of variant 
        psa = SafeArrayCreate(VT_VARIANT,1,rgsabound);

        // Store bookmark of every other record into an array.
        while ((!rstAuthors-&gt;EndOfFile) &amp;&amp; (ii &lt; 11))
        {
            SafeArrayPutElement(psa,&amp;ii,&amp;rstAuthors-&gt;Bookmark);
            //ii = ii +1;
            ii++;
            rstAuthors-&gt;Move(2);
        }

        vBookmark.parray = psa;

        // Filter the Record with the array of bookmarks.
        rstAuthors-&gt;put_Filter(vBookmark);
        printf("Number of Records after filtering:  %d\n", 
            rstAuthors-&gt;RecordCount);
        rstAuthors-&gt;MoveFirst();

        while (!rstAuthors-&gt;EndOfFile)
        {
            printf("%d    %s\n",rstAuthors-&gt;AbsolutePosition, 
                Authrs.lau_lnameStatus == adFldOK ? 
                Authrs.m_szau_lname : "&lt;NULL&gt;");
            rstAuthors-&gt;MoveNext();
        }
    }
    catch (_com_error &amp;e)
    {
        // Notify the user of errors if any.
        _variant_t vtConnect = rstAuthors-&gt;GetActiveConnection();

        // GetActiveConnection returns connect string if connection
        // is not open, else returns Connection object.
        switch(vtConnect.vt)
        {
            case VT_BSTR:
                printf("Error:\n");
                printf("Code    = %08lx\n", e.Error());
                printf("Message = %s\n", e.ErrorMessage());
                printf("Source  = %s\n", (LPCSTR) e.Source());
                printf("Description = %s\n", (LPCSTR) e.Description());
                break;
            case VT_DISPATCH:
                PrintProviderError(vtConnect);
                break;
            default:
                printf("Errors occured.");
                break;
        }
    }

    // Clean up objects before exit.
    //Release the IADORecordset Interface here   
    if (picRs)
        picRs-&gt;Release();
        
    if (rstAuthors)
        if (rstAuthors-&gt;State == adStateOpen)
            rstAuthors-&gt;Close();
}

///////////////////////////////////////////////////////////
//                                                       //
//      PrintProviderError Function                      //
//                                                       //
///////////////////////////////////////////////////////////

void PrintProviderError(_ConnectionPtr pConnection)
{
    // Print Provider Errors from Connection object.
    // pErr is a record object in the Connection's Error collection.
    ErrorPtr  pErr    = NULL;
    long      nCount  = 0;
    long      i       = 0;

    if( (pConnection-&gt;Errors-&gt;Count) &gt; 0)
    {
        nCount = pConnection-&gt;Errors-&gt;Count;
        // Collection ranges from 0 to nCount -1.
        for(i = 0; i &lt; nCount; i++)
        {
            pErr = pConnection-&gt;Errors-&gt;GetItem(i);
            printf("Error number: %x\t%s\n", pErr-&gt;Number,
                (LPCSTR) pErr-&gt;Description);
        }
    }
}
// EndBOFCpp
</PRE>

<P class="label"><B>BofEofBookmark.h</B></P>

<PRE class="code">// BeginBOFEOFH
#include "icrsint.h"

//This Class extracts only pubid,lastname and hire_date
class CPublishers : public CADORecordBinding
{
BEGIN_ADO_BINDING(CPublishers)

    //Column title is the 2nd field in the recordset
    ADO_VARIABLE_LENGTH_ENTRY2(1, adVarChar, m_szP_pubid, 
        sizeof(m_szP_pubid), lP_pubidStatus, FALSE)

    //Column type is the 3rd field in the recordset
    ADO_VARIABLE_LENGTH_ENTRY2(2, adVarChar, m_szP_pubname, 
        sizeof(m_szP_pubname), lP_pubnameStatus, TRUE)

END_ADO_BINDING()

public:
    CHAR    m_szP_pubid;
    ULONG   lP_pubidStatus;
    CHAR    m_szP_pubname[40];
    ULONG   lP_pubnameStatus;
};

//This Class extracts only authorlastname

class CAuthors : public CADORecordBinding
{
BEGIN_ADO_BINDING(CAuthors)

    //Column authorlname is the 2nd field in the recordset
    ADO_VARIABLE_LENGTH_ENTRY2(2, adVarChar,  m_szau_lname, 
         sizeof(m_szau_lname), lau_lnameStatus, FALSE)

END_ADO_BINDING()

public:
    CHAR    m_szau_lname[40];
    ULONG   lau_lnameStatus;
};
// EndBOFEOFH</PRE>

<H4 class="dtH4">See Also</H4>

<P><A HREF="mdprobof.htm">BOF, EOF Properties</A> | <A HREF="mdprobookmark.htm">Bookmark Property</A> | <A HREF="mdobjodbrec.htm">Recordset Object</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
<P align="center"><A HREF="ado_sdk_copyright_and_trademarks.htm">&copy; 1998-2003 Microsoft Corporation. All rights reserved.</A></P>
</BODY>
</HTML>

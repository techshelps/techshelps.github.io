<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>PrimaryKey and Unique Properties Example (VC++)</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/samples.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannerparthead td" nowrap>ADOX 2.5</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="adproprimarykeyxvc"></A>PrimaryKey and Unique Properties Example (VC++)</H1>

<P>This example demonstrates the <A HREF="adproprimarykey.htm">PrimaryKey</A> and <A HREF="adprounique.htm">Unique</A> properties of an <A HREF="adobjindex.htm">Index</A>. The code creates a new table with two columns. The <B>PrimaryKey</B> and <B>Unique</B> properties are used to make one column the primary key for which duplicate values are not allowed.</P>

<PRE class="code">// BeginPrimaryKeyCpp
#import "c:\program files\common files\system\ado\msadox.dll" \
    no_namespace
#import "c:\program files\common files\system\ado\msado15.dll" 

#include "iostream.h"
#include "stdio.h"
#include "conio.h"

//Function Declarations
inline void TESTHR(HRESULT x) {if FAILED(x) _com_issue_error(x);};
void PrimaryKeyX(void);

//////////////////////////////////////////////////////////
//                                                      //
//    Main Function                                     //
//                                                      //
//////////////////////////////////////////////////////////
void main()
{
    if(FAILED(::CoInitialize(NULL)))
        return; 

    PrimaryKeyX();

    ::CoUninitialize();
}

//////////////////////////////////////////////////////////
//                                                      //
//        PrimaryKeyX Function                          //
//                                                      //
//////////////////////////////////////////////////////////
void PrimaryKeyX()
{
    HRESULT hr = S_OK;

    // Define ADOX object pointers.
    // Initialize pointers on define.
    // These are in the ADOX::  namespace.
    _CatalogPtr m_pCatalog = NULL;
    _TablePtr m_pTableNew = NULL;
    _IndexPtr m_pIndexNew  = NULL;
    _IndexPtr m_pIndex  = NULL;
    _ColumnPtr m_pColumn = NULL;

    //Define string variable
    _bstr_t strcnn("Provider='Microsoft.JET.OLEDB.4.0';"
        "Data Source = 'c:\\Program Files\\"
        "Microsoft Office\\Office\\Samples\\Northwind.mdb';");

    try
    {
        TESTHR(hr = m_pCatalog.CreateInstance(__uuidof(Catalog)));
        TESTHR(hr = m_pTableNew.CreateInstance(__uuidof(Table)));
        TESTHR(hr = m_pIndexNew.CreateInstance(__uuidof(Index)));
        TESTHR(hr = m_pIndex.CreateInstance(__uuidof(Index)));
        TESTHR(hr = m_pColumn.CreateInstance(__uuidof(Column)));

        // Connect the catalog
        m_pCatalog-&gt;PutActiveConnection(strcnn);

        // Name new table
        m_pTableNew-&gt;Name = "NewTable";

        // Append a numeric and a text field to new table.
        m_pTableNew-&gt;Columns-&gt;Append("NumField", adInteger, 20);
        m_pTableNew-&gt;Columns-&gt;Append("TextField", adVarWChar, 20);

        // Append new Primary Key index on NumField column
        // to new table
        m_pIndexNew-&gt;Name = "NumIndex";
        m_pIndexNew-&gt;Columns-&gt;Append("NumField",adInteger,0);
        // here "-1" is required instead of "true".
        m_pIndexNew-&gt;PutPrimaryKey(-1);
        m_pIndexNew-&gt;PutUnique(-1);
        m_pTableNew-&gt;Indexes-&gt;Append(
            _variant_t ((IDispatch*)m_pIndexNew));

        // Append an index on Textfield to new table.
        // Note the different technique: Specifying index and
        // column name as parameters of the Append method
        m_pTableNew-&gt;Indexes-&gt;Append("TextIndex", "TextField");

        // Append the new table
        m_pCatalog-&gt;Tables-&gt;Append(_variant_t ((IDispatch*)m_pTableNew));

        cout &lt;&lt; m_pTableNew-&gt;Indexes-&gt;Count &lt;&lt; " Indexes in " 
            &lt;&lt; m_pTableNew-&gt;Name &lt;&lt; " Table" &lt;&lt; endl;
        m_pCatalog-&gt;Tables-&gt;Refresh();

        _variant_t vIndex;
        // Enumerate Indexes collection.
        for (long lIndex = 0;lIndex &lt; m_pTableNew-&gt;Indexes-&gt;Count;
             lIndex++)
        {
            vIndex = lIndex;
            m_pIndex = m_pTableNew-&gt;Indexes-&gt;GetItem(vIndex);
            cout &lt;&lt; "Index " &lt;&lt; m_pIndex-&gt;Name &lt;&lt; endl;
            cout &lt;&lt; "   Primary key = " &lt;&lt; (m_pIndex-&gt;GetPrimaryKey() ? 
                "True" : "False") &lt;&lt; endl;
            cout &lt;&lt; "   Unique = "  &lt;&lt; (m_pIndex-&gt;GetUnique() ? "True" : 
                "False") &lt;&lt; endl;

            // Enumerate Columns collection of each Index
            // object.
            cout &lt;&lt; "    Columns" &lt;&lt; endl;

            for (long lIndex = 0;lIndex &lt; m_pIndex-&gt;Columns-&gt;Count;
                 lIndex++)
            {
                vIndex = lIndex  ;
                m_pColumn = m_pIndex-&gt;Columns-&gt;GetItem(vIndex);
                cout &lt;&lt; "       " &lt;&lt; m_pColumn-&gt;Name &lt;&lt; endl;
            }
        }

        // Delete new table as this is a demonstration
        m_pCatalog-&gt;Tables-&gt;Delete(m_pTableNew-&gt;Name);
    }
    catch(_com_error &amp;e)
    {
        // Notify the user of errors if any.
        _bstr_t bstrSource(e.Source());
        _bstr_t bstrDescription(e.Description());

        printf("\n\tSource :  %s \n\tdescription : %s \n ",
              (LPCSTR)bstrSource,(LPCSTR)bstrDescription);
    }
    catch(...)
    {
        cout &lt;&lt; "Error occured in PrimaryKeyX...."&lt;&lt; endl;
    }
    
    m_pCatalog = NULL;
}
// EndPrimaryKeyCpp</PRE>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
<P align="center"><A HREF="ado_sdk_copyright_and_trademarks.htm">&copy; 1998-2003 Microsoft Corporation. All rights reserved.</A></P>
</BODY>
</HTML>

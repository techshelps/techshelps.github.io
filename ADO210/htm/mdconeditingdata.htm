<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Chapter 4: Editing Data</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/ADO.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannerparthead td" nowrap>ADO 2.5</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="mdconeditingdata"></A>Chapter 4: Editing Data</H1>

<P>The preceding two chapters explained how use ADO to connect to a data source, execute a command, get the results in a <B>Recordset</B> object, and navigate within the <B>Recordset</B>. This chapter focuses on the next fundamental ADO operation: editing data.</P>

<P>This chapter continues to use the sample <B>Recordset</B> introduced in Chapter 3&#0151;with one important change. The following code is used to open the <B>Recordset</B>:</P>

<PRE class="code">    . . .
'BeginEditIntro
    Dim strSQL As String
    Dim objRs1 As ADODB.Recordset
    
    strSQL = "SELECT * FROM Shippers"
    
    Set objRs1 = New ADODB.Recordset
    
    objRs1.Open strSQL, GetNewConnection, adOpenStatic, _
                adLockBatchOptimistic, adCmdText
    
    ' Disconnect the Recordset from the Connection object.
    Set objRs1.ActiveConnection = Nothing
'EndEditIntro


    . . .</PRE>

<P>The important change to the code involves setting the <B>Connection</B> object's <B>CursorLocation</B> property equal to <B>adUseClient</B> in the GetNewConnection function (shown below), which indicates the use of a client cursor. For more information about the differences between client-side and server-side cursors, see <A HREF="mdconcursorsandlocks.htm">Chapter 8: Understanding Cursors and Locks</A>.</P>

<P>The <B>CursorLocation</B> property's <B>adUseClient</B> setting moves the location of the cursor from the data source (the SQL Server, in this case) to the location of the client code (the desktop workstation). This setting forces ADO to invoke the Client Cursor Engine for OLE DB on the client in order to create and manage the cursor.</P>

<P>You might also have noticed that the <B>LockType</B> parameter of the <B>Open</B> method changed to <B>adLockBatchOptimistic</B>. This opens the cursor in batch mode. (The provider caches multiple changes and writes them to the underlying data source only when you call the <B>UpdateBatch</B> method.) Changes made to the <B>Recordset</B> will not be updated in the database until the <B>UpdateBatch</B> method is called.</P>

<P>Finally, the code in this chapter uses a modified version of the GetNewConnection function, introduced in Chapter 2. This version of the function now returns a client-side cursor. The function looks like this:</P>

<PRE class="code">'BeginNewConnection
Public Function GetNewConnection() As ADODB.Connection
    Dim objConn1 As ADODB.Connection
    Set objConn1 = New ADODB.Connection
    
    strConnStr = "Provider=SQLOLEDB;Initial Catalog=Northwind;" &amp; _
                 "Data Source=MySrvr;Integrated Security=SSPI;"
             
    objConn1.ConnectionString = strConnStr
    objConn1.CursorLocation = adUseClient
    objConn1.Open
    
    Set GetNewConnection = objConn1
End Function
'EndNewConnection</PRE>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
<P align="center"><A HREF="ado_sdk_copyright_and_trademarks.htm">&copy; 1998-2003 Microsoft Corporation. All rights reserved.</A></P>
</BODY>
</HTML>

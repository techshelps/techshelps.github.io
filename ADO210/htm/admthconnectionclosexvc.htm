<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Connection Close Method, Table Type Property Example (VC++)</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/samples.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannerparthead td" nowrap>ADOX 2.5</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="admthconnectionclosexvc"></A>Connection Close Method, Table Type Property Example (VC++)</H1>

<P>Setting the <A HREF="adproactiveconnection.htm">ActiveConnection</A> property to <B>Nothing</B> should "close" the catalog. Associated collections will be empty. Any objects that were created from schema objects in the catalog will be orphaned. Any properties on those objects that have been cached will still be available, but attempting to read properties that require a call to the provider will fail.</P>

<PRE class="code">// BeginCloseConnectionCpp
#import "c:\Program Files\Common Files\system\ado\msadox.dll" \
    no_namespace
#import "c:\Program Files\Common Files\system\ado\msado15.dll"

#include "iostream.h"
#include "stdio.h"
#include "conio.h"

//Function declarations
inline void TESTHR(HRESULT x) {if FAILED(x) _com_issue_error(x);};
void CloseConnectionByNothingX(void);
void CloseConnectionX(void);

//////////////////////////////////////////////////////////
//                                                      //
//     Main Function                                    //
//                                                      //
//////////////////////////////////////////////////////////
void main()
{
    if(FAILED(::CoInitialize(NULL)))
        return;

    CloseConnectionByNothingX();
    CloseConnectionX();

    ::CoUninitialize();
}

//////////////////////////////////////////////////////////
//                                                      //
//        CloseConnectionByNothingX Function            //
//                                                      //
//////////////////////////////////////////////////////////
void CloseConnectionByNothingX(void)
{
    HRESULT hr = S_OK;

    // Define ADOX object pointers.
    // Initialize pointers on define.
    // These are in the ADOX::  namespace.

    _CatalogPtr m_pCatalog = NULL;
    _TablePtr m_pTable = NULL;

    //Define ADODB object pointers
    ADODB::_ConnectionPtr m_pCnn = NULL;

    //Define other variables
    _variant_t vIndex = (short) 0;

    try
    {         
        TESTHR(hr = m_pCnn.CreateInstance(__uuidof(ADODB::Connection)));

        TESTHR(hr = m_pCatalog.CreateInstance(__uuidof(Catalog)));
        
        m_pCnn-&gt;Open("Provider='Microsoft.JET.OLEDB.4.0';"
            "Data Source= 'c:\\Program Files\\Microsoft Office\\"
            "Office\\Samples\\Northwind.mdb';","","",NULL);

        m_pCatalog-&gt;PutActiveConnection(_variant_t((IDispatch *)m_pCnn));

        m_pTable = m_pCatalog-&gt;Tables-&gt;GetItem(vIndex);

        // Cache m_pTable.Type info
        cout &lt;&lt; m_pTable-&gt;Type &lt;&lt; endl; 

        _variant_t vCnn;
        vCnn.vt = VT_DISPATCH;
        vCnn.pdispVal = NULL;
        m_pCatalog-&gt;PutActiveConnection(vCnn);

        // m_pTable is orphaned
        cout &lt;&lt; m_pTable-&gt;Type &lt;&lt; endl; 
        // Previous line will succeed if this was cached

        cout &lt;&lt; m_pTable-&gt;Columns-&gt;GetItem(vIndex)-&gt;DefinedSize &lt;&lt; endl;
        // Previous line will fail if this info has not been cached
    }
    catch(_com_error &amp;e)
    {
        // Notify the user of errors if any.
        _bstr_t bstrSource(e.Source());
        _bstr_t bstrDescription(e.Description());

        printf("\nError\n\tSource :  %s \n\tdescription : %s \n",
            (LPCSTR)bstrSource,(LPCSTR)bstrDescription);
    }
    catch(...)
    {
        cout &lt;&lt; "Error occured in CloseConnectionByNothingX...."&lt;&lt; endl;
    }
}

//////////////////////////////////////////////////////////
//                                                      //
//     CloseConnectionX Function                        //
//                                                      //
//////////////////////////////////////////////////////////
void CloseConnectionX()
{
    HRESULT hr = S_OK;

    // Define ADOX object pointers.
    // Initialize pointers on define.
    // These are in the ADOX::  namespace.

    _CatalogPtr m_pCatalog = NULL;
    _TablePtr m_pTable = NULL;

    //Define ADODB object pointers
    ADODB::_ConnectionPtr m_pCnn = NULL;

    //Define other variables
    _variant_t vIndex = (short) 0;
    try
    {
        TESTHR(hr = m_pCnn.CreateInstance(__uuidof(ADODB::Connection)));
        m_pCnn-&gt;Open("Provider='Microsoft.JET.OLEDB.4.0';"
            "Data Source= 'c:\\Program Files\\Microsoft Office\\"
            "Office\\Samples\\Northwind.mdb';","","",NULL);

        TESTHR(hr = m_pCatalog.CreateInstance(__uuidof(Catalog)));
        m_pCatalog-&gt;PutActiveConnection(_variant_t((IDispatch *)m_pCnn));

        m_pTable = m_pCatalog-&gt;Tables-&gt;GetItem(vIndex);

        // Cache m_pTable.Type info
        cout &lt;&lt; m_pTable-&gt;Type &lt;&lt; endl;

        m_pCnn-&gt;Close();

        // m_pTable is orphaned
        cout &lt;&lt; m_pTable-&gt;Type &lt;&lt; endl;
        // Previous line will succeed if this was cached

        cout &lt;&lt; m_pTable-&gt;Columns-&gt;GetItem(vIndex)-&gt;DefinedSize &lt;&lt; endl;
        // Previous line will fail if this info has not been cached
    }
    catch(_com_error &amp;e)
    {
        // Notify the user of errors if any.
        _bstr_t bstrSource(e.Source());
        _bstr_t bstrDescription(e.Description());

        printf("\nError\n\tSource :  %s \n\tdescription : %s \n",
            (LPCSTR)bstrSource,(LPCSTR)bstrDescription);
    }
    catch(...)
    {
        cout &lt;&lt; "Error occured in CloseConnectionX...."&lt;&lt; endl;
    }
}
// EndCloseConnectionCpp</PRE>

<H4 class="dtH4">See Also</H4>

<P><A HREF="adproactiveconnection.htm">ActiveConnection Property</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
<P align="center"><A HREF="ado_sdk_copyright_and_trademarks.htm">&copy; 1998-2003 Microsoft Corporation. All rights reserved.</A></P>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Visual Basic</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/ADO.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannerparthead td" nowrap>ADO 2.5</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="mdconeventsvb"></A>Visual Basic</H1>

<P>In order to handle ADO events in Microsoft Visual Basic, you must declare a module-level variable using the <B>WithEvents</B> keyword. The variable can be declared only as part of a class module and must be declared at the module level. This is not as restrictive as it seems, however, because Visual Basic <B>Form</B> objects are also classes. The simplest way to handle ADO events is to declare a variable using <B>WithEvents</B>. The following example handles the <B>ConnectComplete</B> event for a <B>Connection</B> object:</P>

<PRE class="code">' BeginEventExampleVB02
Dim WithEvents connEvent As Connection
Attribute connEvent.VB_VarHelpID = -1
Dim strMsg As String

Private Sub Form_Load()
    On Error GoTo ErrHandler:
    
    Dim strConn As String
    
    ' Create a new object with event
    ' handling enabled.
    strConn = "Provider='sqloledb';" &amp; _
        "Data Source='MySqlServer';" &amp; _
        "Initial Catalog='Northwind';" &amp; _
        "Integrated Security='SSPI';"
    Set connEvent = New ADODB.Connection
    connEvent.Open strConn
    
    Exit Sub
    
ErrHandler:
    MsgBox strMsg
End Sub

Private Sub connEvent_ConnectComplete(ByVal pError As ADODB.Error, _
    adStatus As ADODB.EventStatusEnum, _
    ByVal pConnection As ADODB.Connection)
    
    If adStatus = adStatusErrorsOccurred Then
        If Not pError Is Nothing Then
            Select Case pError.Number
                Case adErrOperationCancelled
                    ' The operation was cancelled in the
                    ' Will event. Notify the user and exit.
                    strMsg = "I'm sorry you can't connect right now." &amp; vbCrLf
                    strMsg = strMsg &amp; " Click OK to exit."
                    Unload Me
                Case Else
                    strMsg = "Error " &amp; Format(pError.Number) &amp; vbCrLf
                    strMsg = strMsg &amp; pError.Description
                    strMsg = strMsg &amp; " Click OK to exit."
                    Unload Me
            End Select
        Else
            strMsg = "Error occured. Click OK to exit."
            Unload Me
        End If
    End If
    'frmWait.btnOK.Enabled = True
End Sub
' EndEventExampleVB02</PRE>

<P>The <B>Connection</B> object is declared at the <B>Form</B> level using the <B>WithEvents</B> keyword to enable event handling. The Form_Load event handler actually creates the object by assigning a new <B>Connection</B> object to <I>connEvent</I> and then opens the connection. Of course, a real application would do more processing in the Form_Load event handler than is shown here.</P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
<P align="center"><A HREF="ado_sdk_copyright_and_trademarks.htm">&copy; 1998-2003 Microsoft Corporation. All rights reserved.</A></P>
</BODY>
</HTML>

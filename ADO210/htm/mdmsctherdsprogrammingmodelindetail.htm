<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="ltr">
	<HEAD>
		<TITLE>RDS Programming Model in Detail</TITLE>
		<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
		<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
		<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
		<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/ADO.js"></SCRIPT>
	</HEAD>
	<body topmargin="0" id="bodyID" class="dtBODY">
		
		<div id="scrbanner">
			<div id="bannerrow1">
				<TABLE CLASS="bannerparthead" CELLSPACING="0">
					<TR ID="hdr">
						<TD CLASS="bannerparthead td" nowrap>RDS 2.5</TD>
						<TD valign="center"><a href="#Feedback"><IMG name="feedb" onclick="startFeedback(SDKFeedB)" style="CURSOR: hand" hspace="15" alt="" src="../stylesheets/mailto.gif" align="right"></a></TD>
					</TR>
				</TABLE>
			</div>
		</div>
		<DIV id="scrtext" valign="bottom">
			<H1 class="dtH1"><A NAME="mdmsctherdsprogrammingmodelindetail"></A>RDS Programming 
				Model in Detail</H1>
			<P>The following are key elements of the RDS programming model:
				<UL type="disc">
					<LI>
					RDS.DataSpace
					<LI>
					RDSServer.DataFactory
					<LI>
					RDS.DataControl
					<LI>
						Event</LI>
				</UL>
				<H2 class="dtH2">RDS.DataSpace</H2>
			<P>Your client application must specify the server and the server program to 
				invoke. In return, your application receives a reference to the server program 
				and can treat the reference as if it were the server program itself.</P>
			<P>The RDS object model embodies this functionality with the <A HREF="mdobjdataspace.htm">
					RDS.DataSpace</A> object.</P>
			<P>The server program is specified with a program identifier, or <I>ProgID</I>. The 
				server uses the <I>ProgID</I> and the server machine's registry to locate 
				information about the actual program to initiate.</P>
			<P>RDS makes a distinction internally depending on whether the server program is on 
				a remote server across the Internet or an intranet; a server on a local area 
				network; or not on a server at all, but instead on a local dynamic-link library 
				(<A HREF="mddefglossary.htm#mddefdll">DLL</A>). This distinction determines how 
				information is exchanged between the client and the server, and makes a 
				tangible difference in the type of reference returned to your client 
				application. However, from your point of view, this distinction has no special 
				meaning. All that matters is that you receive a usable program reference.</P>
			<H2 class="dtH2">RDSServer.DataFactory</H2>
			<P>RDS provides a default server program that can either perform a SQL query 
				against the data source and return a <A HREF="mdobjodbrec.htm">Recordset</A> object 
				or take a <B>Recordset</B> object and update the data source.</P>
			<P>The RDS object model embodies this functionality with the <A HREF="mdobjdatafactory.htm">
					RDSServer.DataFactory</A> object.</P>
			<P>In addition, this object has a method for creating an empty <B>Recordset</B> object 
				that you can fill programmatically (<A HREF="mdmthcreaterec.htm">CreateRecordset</A>), 
				and another method for converting a <B>Recordset</B> object into a text string 
				to build a Web page (<A HREF="mdmthconvstring.htm">ConvertToString</A>).</P>
			<P>With ADO, you can override some of the standard connection and command behavior 
				of the <B>RDSServer.DataFactory</B> with a <B>DataFactory</B> handler and a 
				customization file that contains connection, command, and security parameters.</P>
			<P>The server program is sometimes called a <I>business object</I>. You can write 
				your own custom business object that can perform complicated data access, 
				validity checks, and so on. Even when writing a custom business object, you can 
				create an instance of an <B>RDSServer.DataFactory</B> object and use some of 
				its methods to accomplish your own tasks.</P>
			<H2 class="dtH2">RDS.DataControl</H2>
			<P>RDS provides a means to combine the functionality of the <B>RDS.DataSpace</B> and
				<B>RDSServer.DataFactory</B>, and also enable visual controls to easily use the <B>Recordset</B>
				object returned by a query from a data source. RDS attempts, for the most 
				common case, to do as much as possible to automatically gain access to 
				information on a server and display it in a visual control.</P>
			<P>The RDS object model embodies this functionality with the <A HREF="mdobjdatacontrol.htm">
					RDS.DataControl</A> object.</P>
			<P>The <B>RDS.DataControl</B> has two aspects. One aspect pertains to the data 
				source. If you set the command and connection information using the <B>Connect</B>
				and <B>SQL</B> properties of the <B>RDS.DataControl</B>, it will automatically 
				use the <B>RDS.DataSpace</B> to create a reference to the default <B>RDSServer.DataFactory</B>
				object. Then the <B>RDSServer.DataFactory</B> will use the <B>Connect</B> property 
				value to connect to the data source, use the <B>SQL</B> property value to 
				obtain a <B>Recordset</B> from the data source, and return the <B>Recordset</B> 
				object to the <B>RDS.DataControl</B>.</P>
			<P>The second aspect pertains to the display of returned <B>Recordset</B> information 
				in a visual control. You can associate a visual control with the <B>RDS.DataControl</B>
				(in a process called binding) and gain access to the information in the 
				associated <B>Recordset</B> object, displaying query results on a Web page in 
				Microsoft® Internet Explorer. Each <B>RDS.DataControl</B> object binds one <B>Recordset</B>
				object, representing the results of a single query, to one or more visual 
				controls (for example, a text box, combo box, grid control, and so forth). 
				There may be more than one <B>RDS.DataControl</B> object on each page. Each <B>RDS.DataControl</B>
				object can be connected to a different data source and contain the results of a 
				separate query.</P>
			<P>The <B>RDS.DataControl</B> object also has its own methods for navigating, 
				sorting, and filtering the rows of the associated <B>Recordset</B> object. 
				These methods are similar, but not the same as the methods on the ADO <B>Recordset</B>
				object.</P>
			<H2 class="dtH2">Events</H2>
			<P>RDS supports two of its own events, which are independent of the ADO event 
				model. The <A HREF="mdevtonreadystatechange.htm">onReadyStateChange</A> event 
				is called whenever the <B>RDS.DataControl</B> <A HREF="mdproreadystate.htm">ReadyState</A>
				property changes, thus notifying you when an asynchronous operation has 
				successfully completed, terminated, or experienced an error. The <A HREF="mdevtonerror.htm">
					onError</A> event is called whenever an error occurs, even if the error 
				occurs during an <A HREF="mddefglossary.htm#mddefasynchronous">asynchronous 
					operation</A>.</P>
			<BLOCKQUOTE class="dtBlock"> <b class="le">Note&nbsp;&nbsp;&nbsp;</b>Microsoft 
				Internet Explorer provides two additional events to RDS—<B>onDataSetChanged</B> 
				(the <B>Recordset</B> is functional but still retrieving rows) and <B>onDataSetComplete</B>
				(the <B>Recordset</B> has finished retrieving rows).</BLOCKQUOTE>
			<H4 class="dtH4">See Also</H4>
			<P><A HREF="mdmscrdsprogrammingmodelwithobjects.htm">RDS Programming Model with Objects</A>
				| <A HREF="mdobjdatacontrol.htm">DataControl Object (RDS)</A> | <A HREF="mdobjdatafactory.htm">
					DataFactory Object (RDSServer)</A> | <A HREF="mdobjdataspace.htm">DataSpace 
					Object (RDS)</A> | <A HREF="mdhowrdstutorial.htm">RDS Tutorial</A> | <A HREF="mdhowoverview.htm">
					Using RDS</A></P>
			<H4><A NAME="feedback"></A></H4>
			<SPAN id="SDKFeedB"></SPAN>
		</DIV>
		<P align="center"><A HREF="ado_sdk_copyright_and_trademarks.htm">© 1998-2003 Microsoft 
				Corporation. All rights reserved.</A></P>
	</body>
</HTML>

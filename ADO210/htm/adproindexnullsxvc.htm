<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>IndexNulls Property Example (VC++)</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/samples.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannerparthead td" nowrap>ADOX 2.5</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="adproindexnullsxvc"></A>IndexNulls Property Example (VC++)</H1>

<P>This example demonstrates the <A HREF="adproindexnulls.htm">IndexNulls</A> property of an <A HREF="adobjindex.htm">Index</A>. The code creates a new index and sets the value of <B>IndexNulls</B> based on user input. Then, the <B>Index</B> is appended to the <B>Employees</B> <A HREF="adobjtable.htm">Table</A> in the <I>Northwind</I> <A HREF="adobjcatalog.htm">Catalog</A>. The new <B>Index</B> is applied to a <A HREF="mdobjodbrec.htm">Recordset</A> based on the <B>Employees</B> table, and the <B>Recordset</B> is opened. A new record is added to the <B>Employees</B> table, with a <B>Null</B> value in the indexed field. Whether this new record is displayed depends on the setting of the <B>IndexNulls</B> property.</P>

<PRE class="code">// BeignIndexNullCpp
#import "C:\Program Files\Common Files\System\ADO\msado15.dll" \
    rename("EOF", "EndOfFile")
#import "c:\Program Files\Common Files\system\ado\msadox.dll" \
    no_namespace

#include "iostream.h"
#include "stdio.h"
#include "conio.h"
#include "ADOXIndexNullsX.h"

// Function declarations
inline void TESTHR(HRESULT x) {if FAILED(x) _com_issue_error(x);};
void IndexNullsX(_bstr_t);

//////////////////////////////////////////////////////////
//                                                      //
//      Main Function                                   //
//                                                      //
//////////////////////////////////////////////////////////
void main()
{
    if(FAILED(::CoInitialize(NULL)))
        return; 

    printf("\nShow records having indexed field value = NULL? (Y/N):");
    char input = getche();

    if(toupper(input)=='Y')
    {
        IndexNullsX("Allow");
    }
    else if(toupper(input)=='N')
    {
        IndexNullsX("Ignore");
    }
    else
    {
       exit(0);
    }

    ::CoUninitialize();
}

//////////////////////////////////////////////////////////
//                                                      //
//      IndexNullsX Function                            //
//                                                      //
//////////////////////////////////////////////////////////
void IndexNullsX(_bstr_t strSel)
{
    HRESULT hr = S_OK;
 
    // Define ADOX object pointers.
    // Initialize pointers on define.
    // These are in the ADOX::  namespace.
    _CatalogPtr m_pCatalog     = NULL;
    _IndexPtr m_pIndexNew      = NULL;
        
    // Define ADODB object pointers
    ADODB::_ConnectionPtr m_pCnn           = NULL;
    ADODB::_RecordsetPtr  m_pRstEmployees  = NULL;

    // Define other variables
    IADORecordBinding *picRs  = NULL;  // Interface Pointer Declared
    CEmployeeRs emprs;          // C++ Class Object

    // Define string variable.
    _bstr_t strCnn("Provider='Microsoft.JET.OLEDB.4.0';"
        "data source='c:\\Program Files\\Microsoft Office\\Office\\"
        "Samples\\Northwind.mdb';");

    try
    {
        TESTHR(hr = m_pCnn.CreateInstance(__uuidof(ADODB::Connection)));
        TESTHR(hr = m_pCatalog.CreateInstance(__uuidof (Catalog)));
        TESTHR(hr = m_pIndexNew.CreateInstance(__uuidof(Index)));
        TESTHR(hr = m_pRstEmployees.CreateInstance(
            __uuidof(ADODB::Recordset)));

        // Connect the catalog.
        m_pCnn-&gt;Open(strCnn,"","",NULL);
        m_pCatalog-&gt;PutActiveConnection(_variant_t((IDispatch *)m_pCnn));

        // Append Country column to new index.
        m_pIndexNew-&gt;Columns-&gt;Append("Country",adVarWChar,0);
        m_pIndexNew-&gt;Name = "NewIndex";

        // Set IndexNulls based on user input
        if(strcmp((LPSTR)strSel,"Allow")==0)
        {
            m_pIndexNew-&gt;IndexNulls = adIndexNullsAllow;
        }
        else if(strcmp((LPSTR)strSel,"Ignore")==0)
        {
            m_pIndexNew-&gt;IndexNulls = adIndexNullsIgnore;
        }

        // Append new index to Employees table
        m_pCatalog-&gt;Tables-&gt;GetItem("Employees")-&gt;Indexes-&gt;Append(
            _variant_t((IDispatch *)m_pIndexNew));
        m_pRstEmployees-&gt;Index = m_pIndexNew-&gt;Name;
        m_pRstEmployees-&gt;Open("Employees",
            _variant_t((IDispatch *)m_pCnn),
            ADODB::adOpenKeyset,ADODB::adLockOptimistic,
            ADODB::adCmdTableDirect);

        // Add a new record to the Employees table.
        m_pRstEmployees-&gt;AddNew();
        m_pRstEmployees-&gt;Fields-&gt;GetItem("FirstName")-&gt;Value = 
             (_bstr_t) "Gary";
        m_pRstEmployees-&gt;Fields-&gt;GetItem("LastName")-&gt;Value = 
             (_bstr_t) "Haarsager";
        m_pRstEmployees-&gt;Update();

        // Bookmark the newly added record.
        _variant_t varBookmark = m_pRstEmployees-&gt;Bookmark;

        // Use the new index to set the order of the records.
        m_pRstEmployees-&gt;MoveFirst();
        printf("\n\nIndex = %s,",(LPSTR) m_pRstEmployees-&gt;Index);
        printf("IndexNulls = %d\n\n",m_pIndexNew-&gt;IndexNulls);
        cout&lt;&lt;"Country            -        Name"&lt;&lt;endl;

        // Open an IADORecordBinding interface pointer which 
        // we will use for binding Recordset to a class
        TESTHR(hr = m_pRstEmployees-&gt;QueryInterface(
            __uuidof(IADORecordBinding),(LPVOID*)&amp;picRs));
 
        // Bind the Recordset to a C++ class here 
        TESTHR(hr = picRs-&gt;BindToRecordset(&amp;emprs));

        // Enumerate the Recordset.The value of the 
        // IndexNulls property will determine if the newly
        // added record appears in the output.
        while(!(m_pRstEmployees-&gt;EndOfFile))
        {
            printf("%s    -    %s %s\n",
                emprs.lemp_CountryStatus == adFldOK ?
                emprs.m_szemp_Country :"[Null]",
                emprs.lemp_FirstNameStatus == adFldOK ? 
                emprs.m_szemp_FirstName :"&lt;NULL&gt;",
                emprs.lemp_LastNameStatus == adFldOK ? 
                emprs.m_szemp_LastName :"&lt;NULL&gt;");
            m_pRstEmployees-&gt;MoveNext();
        }

        // Delete new record because this is a demonstration.
        m_pRstEmployees-&gt;Bookmark = varBookmark;
        m_pRstEmployees-&gt;Delete(ADODB::adAffectCurrent);
    }
    catch(_com_error &amp;e)
    {
        // Notify the user of errors if any.
        _bstr_t bstrSource(e.Source());
        _bstr_t bstrDescription(e.Description());
 
        printf("\n\tSource :  %s \n\tdescription : %s \n ",
             (LPCSTR)bstrSource,(LPCSTR)bstrDescription);
    }
    catch(...)
    {
        cout &lt;&lt; "Error occured in include files...."&lt;&lt; endl;
    }
    
    if (m_pRstEmployees)
    {
        if (m_pRstEmployees-&gt;State == 1)
        {
            m_pRstEmployees-&gt;Close();
            m_pRstEmployees = NULL;
        }
    }

    // Delete new Index because this is a demonstration.
    if (m_pCatalog)
        m_pCatalog-&gt;Tables-&gt;GetItem("Employees")-&gt;Indexes-&gt;
            Delete(m_pIndexNew-&gt;Name);

    if (m_pCnn)
    {
        if (m_pCnn-&gt;State == 1)
        {
            m_pCnn-&gt;Close();
            m_pCnn = NULL;
        }
    }
    
    m_pCatalog = NULL;
}
// EndIndexNullCpp</PRE>

<P class="label"><B>IndexNullX.h</B></P>

<PRE class="code"><B>// BeginIndexNullsH
</B>// IndexNullsX.h

#include "icrsint.h"

//This class extracts LastName,Country,FirstName from Employees table

class CEmployeeRs : public CADORecordBinding
{
BEGIN_ADO_BINDING(CEmployeeRs)
        // Column LastName is the 2nd field in the table
        ADO_VARIABLE_LENGTH_ENTRY2(2,adVarChar,m_szemp_LastName,
            sizeof(m_szemp_LastName),lemp_LastNameStatus,TRUE)
        // Column Country is the 11th field in the table
        ADO_VARIABLE_LENGTH_ENTRY2(11,adVarChar,m_szemp_Country,
            sizeof(m_szemp_Country),lemp_CountryStatus,TRUE)
            // Column Country is the 17th field in the table
        ADO_VARIABLE_LENGTH_ENTRY2(17,adVarChar,m_szemp_FirstName,
            sizeof(m_szemp_FirstName),lemp_FirstNameStatus,TRUE)
END_ADO_BINDING()

public:
    CHAR m_szemp_LastName[21];
    ULONG lemp_LastNameStatus;
    CHAR m_szemp_Country[16];
    ULONG lemp_CountryStatus;
    CHAR m_szemp_FirstName[11];
    ULONG lemp_FirstNameStatus;
};
// EndIndexNullsH</PRE>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
<P align="center"><A HREF="ado_sdk_copyright_and_trademarks.htm">&copy; 1998-2003 Microsoft Corporation. All rights reserved.</A></P>
</BODY>
</HTML>

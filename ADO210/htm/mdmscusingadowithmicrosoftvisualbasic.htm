<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="ltr">
	<HEAD>
		<TITLE>Using ADO with Microsoft Visual Basic</TITLE>
		<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
		<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
		<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
		<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/ADO.js"></SCRIPT>
	</HEAD>
	<body topmargin="0" id="bodyID" class="dtBODY">
		
		<div id="scrbanner">
			<div id="bannerrow1">
				<TABLE CLASS="bannerparthead" CELLSPACING="0">
					<TR ID="hdr">
						<TD CLASS="bannerparthead td" nowrap>ADO 2.5 Appendixes</TD>
						<TD valign="center"><a href="#Feedback"><IMG name="feedb" onclick="startFeedback(SDKFeedB)" style="CURSOR: hand" hspace="15" alt="" src="../stylesheets/mailto.gif" align="right"></a></TD>
					</TR>
				</TABLE>
			</div>
		</div>
		<DIV id="scrtext" valign="bottom">
			<H1 class="dtH1"><A NAME="mdmscusingadowithmicrosoftvisualbasic"></A>Using ADO with 
				Microsoft Visual Basic</H1>
			<P>Setting up an ADO project and writing ADO code is similar whether you use Visual 
				Basic or Visual Basic for Applications. This topic addresses using ADO with 
				both Visual Basic and Visual Basic for Applications and notes any differences.</P>
			<H2 class="dtH2">Referencing the ADO Library</H2>
			<P>The ADO library must be referenced by your project.</P>
			<P class="labelproc"><B>To reference ADO from Microsoft Visual Basic</B>
				<OL type="1">
					<LI>
						In Visual Basic, from the <B>Project</B> menu, select <B>References...</B>.
					<LI>
						Select <B>Microsoft ActiveX Data Objects x.x Library</B> from the list. Verify 
						that at least the following libraries are also selected:
						<UL type="disc">
							<LI>
							Visual Basic for Applications
							<LI>
							Visual Basic runtime objects and procedures
							<LI>
							Visual Basic objects and procedures
							<LI>
								OLE Automation</LI>
						</UL>
					<LI>
						Click <B>OK</B>.</LI>
				</OL>
			<P>You can use ADO just as easily with Visual Basic for Applications, using 
				Microsoft Access, for example.</P>
			<P class="labelproc"><B>To reference ADO from Microsoft Access</B>
				<OL type="1">
					<LI>
						In Microsoft Access, select or create a module from the <B>Modules</B> tab in 
						the <B>Database</B>
					window.
					<LI>
						From the <B>Tools</B> menu, select <B>References...</B>.
					<LI>
						Select <B>Microsoft ActiveX Data Objects x.x Library</B> from the list. Verify 
						that at least the following libraries are also selected:
						<UL type="disc">
							<LI>
							Visual Basic for Applications
							<LI>
								Microsoft Access 11.0 Object Library (or later)</LI>
						</UL>
					<LI>
						Click <B>OK</B>.</LI>
				</OL>
				<H2 class="dtH2">Creating ADO Objects in Visual Basic</H2>
			<P>To create an automation variable and an instance of an object for that variable, 
				you can use two methods: <B>Dim</B> or <B>CreateObject</B>.</P>
			<H3 class="dtH3">Dim</H3>
			<P>You can use the <B>New</B> keyword with <B>Dim</B> to declare and instantiate 
				ADO objects in one step:</P>
			<PRE class="code">Dim conn As New ADODB.Connection</PRE>
			<P>Alternately, the <B>Dim</B> statement declaration and object instantiation can 
				also be two steps:</P>
			<PRE class="code">Dim conn As ADODB.Connection
Set conn = New ADODB.Connection</PRE>
			<BLOCKQUOTE class="dtBlock"> <b class="le">Note&nbsp;&nbsp;&nbsp;</b>It is not 
				required to explicitly use the <code class="ce">ADODB</code> progid with the <B>Dim</B>
				statement, assuming you have properly referenced the ADO library in your 
				project. However, using it ensures that you won't have naming conflicts with 
				other libraries.</BLOCKQUOTE><BLOCKQUOTE class="dtBlock"> For example, if you 
				include references to both ADO and DAO in the same project, you should include 
				a qualifier to specify which object model to use when instantiating <B>Recordset</B>
				objects, as in the following code:<BR>
				<code class="ce">Dim adoRS As ADODB.Recordset</code><BR>
				<code class="ce">Dim daoRS As DAO.Recordset</code></BLOCKQUOTE>
			<H3 class="dtH3">CreateObject</H3>
			<P>With the <B>CreateObject</B> method, the declaration and object instantiation 
				must be two discrete steps:</P>
			<PRE class="code">Dim conn1
Set conn1 = CreateObject("ADODB.Connection") As Object</PRE>
			<P>Objects instantiated with <B>CreateObject</B> are late-bound, which means that 
				they are not strongly typed and command-line completion is disabled. However, 
				it does allow you to skip referencing the ADO library from your project, and 
				enables you to instantiate specific versions of objects. For example:</P>
			<PRE class="code">Set conn1 = CreateObject("ADODB.Connection.2.0") As Object</PRE>
			<P>You could also accomplish this by specifically creating a reference to the ADO 
				version 2.0 type library and creating the object.</P>
			<P>Instantiating objects with the <B>CreateObject</B> method is typically slower 
				than using the <B>Dim</B> statement.</P>
			<H2 class="dtH2">Handling Events</H2>
			<P>In order to handle ADO events in Microsoft Visual Basic, you must declare a 
				module-level variable using the <B>WithEvents</B> keyword. The variable can be 
				declared only as part of a class module and must be declared at the module 
				level. For a more complete discussion of handling ADO events, see <A HREF="mdmscadoeventmodelasynchronousoperations.htm">
					Chapter 7: Handling ADO Events</A>.</P>
			<H2 class="dtH2">Visual Basic Examples</H2>
			<P>Many Visual Basic examples are included with the ADO documentation. For more 
				information, see <A HREF="mdmscadocodeexamplesinvisualbasic.htm">ADO Code Examples 
					in Microsoft Visual Basic</A>.</P>
			<H4 class="dtH4">See Also</H4>
			<P><A HREF="dasdkadooverview.htm">ActiveX Data Objects Start Page</A> | <A HREF="mdmscusingadowithmicrosoftvisualc.htm">
					Using ADO with Microsoft Visual C++</A> | <A HREF="mdmscusingadowithmicrosoftvisualj.htm">
					Using ADO with Microsoft Visual J++</A> | <A HREF="mdmscusingadowithmicrosoftvisualbasicscriptingedition.htm">
					Using ADO with Scripting Languages</A></P>
			<H4><A NAME="feedback"></A></H4>
			<SPAN id="SDKFeedB"></SPAN>
		</DIV>
		<P align="center"><A HREF="ado_sdk_copyright_and_trademarks.htm">© 1998-2002 Microsoft 
				Corporation. All rights reserved.</A></P>
	</body>
</HTML>

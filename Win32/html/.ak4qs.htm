<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>RegEnumKeyEx</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME=".ak4qs"></A><B>RegEnumKeyEx  <A HREF="15d_ffa.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="1y7hnby.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="vm.h_d.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>RegEnumKeyEx</B> function enumerates subkeys of the specified open registry key. The function retrieves information about one subkey each time it is called. Unlike the <A HREF="toz4vb.htm"><B>RegEnumKey</B></A> function, <B>RegEnumKeyEx</B> retrieves the class name of the subkey and the time it was last modified. </P>

<P><B>LONG RegEnumKeyEx(</B></P>

<TABLE cols=2 width=482>

<TR VALIGN="top">
<TD width=47%><B>HKEY</B> <I>hKey</I><B>,</B></TD>
<TD width=53%>// handle of key to enumerate </TD>
</TR>

<TR VALIGN="top">
<TD width=47%><B>    DWORD</B> <I>dwIndex</I><B>,</B></TD>
<TD width=53%>// index of subkey to enumerate </TD>
</TR>

<TR VALIGN="top">
<TD width=47%><B>    LPTSTR</B> <I>lpName</I><B>,</B></TD>
<TD width=53%>// address of buffer for subkey name </TD>
</TR>

<TR VALIGN="top">
<TD width=47%><B>    LPDWORD</B> <I>lpcbName</I><B>,</B></TD>
<TD width=53%>// address for size of subkey buffer </TD>
</TR>

<TR VALIGN="top">
<TD width=47%><B>    LPDWORD</B> <I>lpReserved</I><B>,</B></TD>
<TD width=53%>// reserved </TD>
</TR>

<TR VALIGN="top">
<TD width=47%><B>    LPTSTR</B> <I>lpClass</I><B>,</B></TD>
<TD width=53%>// address of buffer for class string </TD>
</TR>

<TR VALIGN="top">
<TD width=47%><B>    LPDWORD</B> <I>lpcbClass</I><B>,</B></TD>
<TD width=53%>// address for size of class buffer </TD>
</TR>

<TR VALIGN="top">
<TD width=47%><B>    PFILETIME</B> <I>lpftLastWriteTime</I> </TD>
<TD width=53%>// address for time key last written to </TD>
</TR>

<TR VALIGN="top">
<TD width=47%><B>   );</B></TD>
<TD width=53%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hKey</I></P>

<P>Identifies a currently open key or any of the following predefined reserved handle values: </P>

<P><B>HKEY_CLASSES_ROOT</B><BR>
<B>HKEY_CURRENT_USER</B><BR>
<B>HKEY_LOCAL_MACHINE</B><BR>
<B>HKEY_USERS</B></P>

<P>The enumerated keys are subkeys of the key identified by <I>hKey</I>. </P>

<P><I>dwIndex</I></P>

<P>Specifies the index of the subkey to retrieve. This parameter should be zero for the first call to the <B>RegEnumKeyEx</B> function and then incremented for subsequent calls. </P>

<P>Because subkeys are not ordered, any new subkey will have an arbitrary index. This means that the function may return subkeys in any order. </P>

<P><I>lpName</I></P>

<P>Points to a buffer that receives the name of the subkey, including the terminating null character. The function copies only the name of the subkey, not the full key hierarchy, to the buffer. </P>

<P><I>lpcbName</I></P>

<P>Points to a variable that specifies the size, in characters, of the buffer specified by the <I>lpName</I> parameter. This size should include the terminating null character. When the function returns, the variable pointed to by <I>lpcbName</I> contains the number of characters stored in the buffer. The count returned does not include the terminating null character. </P>

<P><I>lpReserved</I></P>

<P>Reserved; must be NULL. </P>

<P><I>lpClass</I></P>

<P>Points to a buffer that contains the class of the enumerated subkey when the function returns. This parameter can be NULL if the class is not required. </P>

<P><I>lpcbClass</I></P>

<P>Points to a variable that specifies the size, in characters, of the buffer specified by the <I>lpClass</I> parameter. The size should include the terminating null character. When the function returns, <I>lpcbClass</I> contains the number of characters stored in the buffer. The count returned does not include the terminating null character. This parameter can be NULL only if <I>lpClass</I> is NULL. </P>

<P><I>lpftLastWriteTime</I></P>

<P>Points to a variable that receives the time the enumerated subkey was last written to. </P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is ERROR_SUCCESS.</P>

<P>If the function fails, the return value is a nonzero error code defined in WINERROR.H. You can use the <A HREF="n7qrmp.htm"><B>FormatMessage</B></A> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</P>

<P><B>Remarks</B></P>

<P>To enumerate subkeys, an application should initially call the <B>RegEnumKeyEx</B> function with the <I>dwIndex</I> parameter set to zero. The application should then increment the <I>dwIndex</I> parameter and call <B>RegEnumKeyEx</B> until there are no more subkeys (until the function returns ERROR_NO_MORE_ITEMS). </P>

<P>The application can also set <I>dwIndex</I> to the index of the last subkey on the first call to the function and decrement the index until the subkey with the index 0 is enumerated. To retrieve the index of the last subkey, use the <A HREF="crty9k.htm"><B>RegQueryInfoKey</B></A> function. </P>

<P>While an application is using the <B>RegEnumKeyEx</B> function, it should not make calls to any registration functions that might change the key being enumerated. </P>

<P>The key identified by <I>hKey</I> must have been opened with KEY_ENUMERATE_SUB_KEYS access (KEY_READ includes KEY_ENUMERATE_SUB_KEYS). Use the <B>RegCreateKeyEx</B> or <B>RegOpenKeyEx</B> function to open the key. </P>

<P><B>See Also</B></P>

<P><A HREF=".5u9k7.htm"><B>RegCreateKeyEx</B></A>, <A HREF="kr5n7j.htm"><B>RegDeleteKey</B></A>, <A HREF="toz4vb.htm"><B>RegEnumKey</B></A>, <A HREF="rz_3fo.htm"><B>RegOpenKeyEx</B></A>, <A HREF="crty9k.htm"><B>RegQueryInfoKey</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

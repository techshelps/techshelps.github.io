<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Using a Multithreaded Multiple Document Interface Application</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="63hcv0"></A><B>Using a Multithreaded Multiple Document Interface Application</B></P>

<P>The example in this topic shows how to use multiple threads in a multiple document interface (MDI) process. The process has a single main window, but can have any number of child windows. The primary thread of the process performs initialization and also handles messages to all windows through the application-defined MainWndProc and ChildWndProc functions. </P>

<P>Each time a child window is created, a new thread is also created. In the example, the new thread continually checks a global variable to see if it is time to terminate. </P>

<P>The ThreadFunc function is specified in the <A HREF="70ts0y.htm"><B>CreateThread</B></A> function as the code for the new thread to execute. The handle of the child window associated with the thread is passed as a parameter to ThreadFunc. The child window's handle is also a parameter to ChildWndProc when a message is dispatched to the child window. A handle is necessary for any communication between a child window and its corresponding thread. Both ThreadFunc and ChildWndProc use the window handle in the <A HREF="d2okir.htm"><B>SetWindowLong</B></A> function to access the value that is reserved for application use in each window structure. In the example, the value is a termination flag. When ChildWndProc gets the <A HREF="esa43n.htm">WM_CLOSE</A> message, it sets the flag; ThreadFunc checks the flag each time through its loop. </P>

<P>The example demonstrates how to use normal priority for the primary thread and below-normal priority for the other threads. Because the primary thread handles all messages for both the main window and the child windows, its higher relative priority ensures responsiveness to user input. </P>

<P>When the user terminates the process by closing the main window, the primary thread sets the global parameter to indicate that worker threads should terminate. The primary thread waits for each child thread to terminate before proceeding. This is necessary only if you want the threads to clean up, save changes to a file, or detach from DLLs before closing. If the primary thread does not wait, no other threads will be able to execute, because they have a lower priority. </P>

<P>#include &lt;windows.h&gt;  </P>

<P>#include &lt;stdio.h&gt; </P>

<P>#include &lt;stdlib.h&gt; </P>

<P></P>

<P>#define MM_NEWWIN       8001 </P>

<P>typedef struct _PTHREADLIST </P>

<P>{ </P>

<P>HANDLE hThread; </P>

<P>LPVOID lpvNext; </P>

<P>} THREADLIST, *PTHREADLIST; </P>

<P></P>

<P>HANDLE hModule;            // handle to .EXE file for this process </P>

<P>HWND   hwndMain = NULL;    // handle to main window </P>

<P>BOOL fKillAll = FALSE;     // sets TRUE to terminate all threads </P>

<P>PTHREADLIST pHead = NULL;  // head of thread information linked list </P>

<P></P>

<P>BOOL InitializeApp(VOID); </P>

<P>LRESULT CALLBACK MainWndProc(HWND, UINT, WPARAM, LPARAM); </P>

<P>LRESULT CALLBACK ChildWndProc(HWND, UINT, WPARAM, LPARAM); </P>

<P>DWORD ThreadFunc(HWND); </P>

<P>VOID AddThreadToList(HANDLE); </P>

<P>VOID ErrorExit(LPSTR); </P>

<P></P>

<P>// Primary thread:  Initialize the application and dispatch messages. </P>

<P></P>

<P>int WINAPI WinMain( HINSTANCE hInst, </P>

<P>HINSTANCE hPrevInst, </P>

<P>LPSTR lpszCmdLn, </P>

<P>int nShowCmd) </P>

<P>{ </P>

<P>MSG msg; </P>

<P>hModule = GetModuleHandle(NULL); </P>

<P>if (! InitializeApp()) </P>

<P>ErrorExit("InitializeApp failure!"); </P>

<P>while (GetMessage(&amp;msg, NULL, 0, 0)) </P>

<P>{ </P>

<P>TranslateMessage(&amp;msg); </P>

<P>DispatchMessage(&amp;msg); </P>

<P>} </P>

<P>return 1; </P>

<P>UNREFERENCED_PARAMETER(hInst); </P>

<P>UNREFERENCED_PARAMETER(hPrevInst); </P>

<P>UNREFERENCED_PARAMETER(lpszCmdLn); </P>

<P>UNREFERENCED_PARAMETER(nShowCmd); </P>

<P>} </P>

<P></P>

<P>// Register window classes and create the main window. </P>

<P></P>

<P>BOOL InitializeApp(VOID) </P>

<P>{ </P>

<P>HMENU hmenuMain, hmenuPopup; </P>

<P>WNDCLASS wc; </P>

<P></P>

<P>// Register a window class for the main window. </P>

<P></P>

<P>wc.style            = CS_OWNDC; </P>

<P>wc.lpfnWndProc      = MainWndProc; </P>

<P>wc.cbClsExtra       = 0; </P>

<P>wc.cbWndExtra       = 0; </P>

<P>wc.hInstance        = hModule; </P>

<P>wc.hIcon            = LoadIcon(NULL,IDI_APPLICATION); </P>

<P>wc.hCursor          = LoadCursor(NULL, IDC_ARROW); </P>

<P>wc.hbrBackground    = (HBRUSH)(COLOR_BACKGROUND+1); </P>

<P>wc.lpszMenuName     = NULL; </P>

<P>wc.lpszClassName    = "MainWindowClass"; </P>

<P>if (! RegisterClass(&amp;wc)) </P>

<P>return FALSE; </P>

<P></P>

<P>// Register a window class for child windows. </P>

<P></P>

<P>wc.lpfnWndProc      = ChildWndProc; </P>

<P>wc.lpszClassName    = "ThreadWindowClass"; </P>

<P>if (! RegisterClass(&amp;wc)) </P>

<P>return FALSE; </P>

<P>// Create a menu for the main window. </P>

<P></P>

<P>hmenuMain = CreateMenu(); </P>

<P>hmenuPopup = CreateMenu(); </P>

<P>if (!AppendMenu(hmenuPopup, MF_STRING, MM_NEWWIN, "&amp;New Window")) </P>

<P>return FALSE; </P>

<P>if (!AppendMenu(hmenuMain, MF_POPUP, (UINT)hmenuPopup, "&amp;Threads")) </P>

<P>return FALSE; </P>

<P></P>

<P>// Create the main window. </P>

<P></P>

<P>hwndMain = CreateWindow("MainWindowClass", "Primary Window", </P>

<P>WS_OVERLAPPED | WS_CAPTION | WS_BORDER | WS_THICKFRAME | </P>

<P>WS_MAXIMIZEBOX | WS_MINIMIZEBOX | WS_CLIPCHILDREN | </P>

<P>WS_VISIBLE | WS_SYSMENU, CW_USEDEFAULT, CW_USEDEFAULT, </P>

<P>CW_USEDEFAULT, CW_USEDEFAULT, NULL, hmenuMain, hModule, </P>

<P>NULL); </P>

<P>if (hwndMain == NULL) </P>

<P>return FALSE; </P>

<P></P>

<P>// Set the initial focus. </P>

<P></P>

<P>SetFocus(hwndMain); </P>

<P>return TRUE; </P>

<P>} </P>

<P></P>

<P>// Main window procedure: Handle messages for the main window. </P>

<P></P>

<P>LRESULT CALLBACK MainWndProc(HWND hwnd, UINT uiMessage, </P>

<P>WPARAM wParam, LPARAM lParam) </P>

<P>{ </P>

<P>static HWND hwndClient; </P>

<P>static DWORD dwCount = 1; </P>

<P>CLIENTCREATESTRUCT ccsClientCreate; </P>

<P>HWND hwndChildWnd; </P>

<P>DWORD IDThread; </P>

<P>PTHREADLIST pNode; </P>

<P></P>

<P>switch (uiMessage) </P>

<P>{ </P>

<P>// Create a client window to receive child window messages. </P>

<P>case WM_CREATE: </P>

<P>ccsClientCreate.hWindowMenu = NULL; </P>

<P>ccsClientCreate.idFirstChild = 1; </P>

<P>hwndClient = CreateWindow("MDICLIENT", NULL, </P>

<P>WS_CHILD | WS_CLIPCHILDREN | WS_VISIBLE, 0, 0, 0, 0, </P>

<P>hwnd, NULL, hModule, (LPVOID)&amp;ccsClientCreate); </P>

<P>return 0L; </P>

<P></P>

<P>// Close the main window. First set fKillAll to TRUE to </P>

<P>// terminate all threads. Then wait for the threads to exit </P>

<P>// before passing a close message to a default handler.  If you </P>

<P>// don't wait for threads to terminate, the process terminates </P>

<P>// with no chance for thread cleanup. </P>

<P></P>

<P>case WM_CLOSE: </P>

<P>fKillAll = TRUE; </P>

<P>pNode = pHead; </P>

<P>while (pNode) </P>

<P>{ </P>

<P>DWORD dwRes; </P>

<P>SetThreadPriority(pNode-&gt;hThread, </P>

<P>THREAD_PRIORITY_HIGHEST); </P>

<P>dwRes = WaitForSingleObject(pNode-&gt;hThread, </P>

<P>INFINITE); </P>

<P>pNode = (PTHREADLIST) pNode-&gt;lpvNext; </P>

<P>} </P>

<P>return DefFrameProc(hwnd, hwndClient, uiMessage, </P>

<P>wParam, lParam); </P>

<P></P>

<P>// Terminate the process. </P>

<P></P>

<P>case WM_DESTROY: </P>

<P>PostQuitMessage(0); </P>

<P>return 0L; </P>

<P></P>

<P>// Handle the menu commands. </P>

<P></P>

<P>case WM_COMMAND: </P>

<P>switch (LOWORD(wParam)) </P>

<P>{ </P>

<P>// Create a child window and start a thread for it. </P>

<P>case MM_NEWWIN: </P>

<P>HANDLE hThrd; </P>

<P>MDICREATESTRUCT mdicCreate; </P>

<P>TCHAR tchTitleBarText[32]; </P>

<P>LONG lPrev; </P>

<P></P>

<P>sprintf(tchTitleBarText, "Thread Window %d", dwCount); </P>

<P>mdicCreate.szClass = "ThreadWindowClass"; </P>

<P>mdicCreate.szTitle = tchTitleBarText; </P>

<P>mdicCreate.hOwner  = hModule; </P>

<P>mdicCreate.x = mdicCreate.y = </P>

<P>mdicCreate.cx = mdicCreate.cy = CW_USEDEFAULT; </P>

<P>mdicCreate.style = mdicCreate.lParam = 0L; </P>

<P></P>

<P>// Send a "create child window" message to the </P>

<P>// client window. </P>

<P></P>

<P>hwndChildWnd = (HWND) SendMessage(hwndClient, </P>

<P>WM_MDICREATE, 0L, (LONG)&amp;mdicCreate); </P>

<P>if (hwndChildWnd == NULL) </P>

<P>ErrorExit("Failed in Creating Thread Window!"); </P>

<P></P>

<P>// Window structure used to pass a quit message to </P>

<P>// the thread. </P>

<P></P>

<P>lPrev = SetWindowLong(hwndChildWnd, GWL_USERDATA, 0); </P>

<P></P>

<P>// Create a suspended thread; alter its priority before </P>

<P>// calling ResumeThread. </P>

<P></P>

<P>hThrd = CreateThread(NULL,  // no security attributes </P>

<P>0,                // use default stack size </P>

<P>(LPTHREAD_START_ROUTINE) ThreadFunc, </P>

<P>(LPVOID)hwndChildWnd, // param to thread func </P>

<P>CREATE_SUSPENDED, // creation flag </P>

<P>&amp;IDThread);       // thread identifier </P>

<P>if (hThrd == NULL) </P>

<P>ErrorExit("CreateThread Failed!"); </P>

<P>AddThreadToList(hThrd); </P>

<P>dwCount++; </P>

<P></P>

<P>// Set the priority lower than the primary (input) </P>

<P>// thread, so the process is responsive to user </P>

<P>// input.  Then resume the thread. </P>

<P></P>

<P>if (!SetThreadPriority(hThrd, </P>

<P>THREAD_PRIORITY_BELOW_NORMAL)) </P>

<P>ErrorExit("SetThreadPriority failed!"); </P>

<P>if ((ResumeThread(hThrd)) == -1) </P>

<P>ErrorExit("ResumeThread failed!"); </P>

<P>return 0L; </P>

<P></P>

<P>default: </P>

<P>return DefFrameProc(hwnd, hwndClient, uiMessage, </P>

<P>wParam, lParam); </P>

<P>} </P>

<P></P>

<P>default: </P>

<P>return DefFrameProc(hwnd, hwndClient, uiMessage, </P>

<P>wParam, lParam); </P>

<P>} </P>

<P>} </P>

<P></P>

<P>// Process messages for the child windows. </P>

<P></P>

<P>LRESULT CALLBACK ChildWndProc(HWND hwnd, UINT uiMessage, WPARAM </P>

<P>wParam, LPARAM lParam) </P>

<P>{ </P>

<P>LONG lPrevLong; </P>

<P>switch (uiMessage) </P>

<P>{ </P>

<P>// Use a window structure to pass "close" message to thread. </P>

<P></P>

<P>case WM_CLOSE: </P>

<P>lPrevLong = SetWindowLong(hwnd, GWL_USERDATA, 1); </P>

<P>return DefMDIChildProc(hwnd, uiMessage, wParam, lParam); </P>

<P></P>

<P>case WM_DESTROY: </P>

<P>return 0L; </P>

<P></P>

<P>default: </P>

<P>return DefMDIChildProc(hwnd, uiMessage, wParam, lParam); </P>

<P>} </P>

<P>} </P>

<P></P>

<P>// Each child window has a thread that can be used to perform tasks </P>

<P>// associated with that window--for example, drawing its contents. </P>

<P></P>

<P>DWORD ThreadFunc(HWND hwnd) </P>

<P>{ </P>

<P>LONG lKillMe = 0L; </P>

<P>while (TRUE) </P>

<P>{ </P>

<P>lKillMe = GetWindowLong(hwnd, GWL_USERDATA); </P>

<P>if (fKillAll || lKillMe) break; </P>

<P></P>

<P>// Perform tasks. </P>

<P></P>

<P>} </P>

<P></P>

<P>// Perform actions needed before thread termination. </P>

<P></P>

<P>return 0; </P>

<P>} </P>

<P></P>

<P>VOID AddThreadToList(HANDLE hThread) </P>

<P>{ </P>

<P>PTHREADLIST pNode; </P>

<P>pNode = (PTHREADLIST) LocalAlloc(LPTR, sizeof(PTHREADLIST)); </P>

<P>if (pNode == NULL) </P>

<P>ErrorExit("malloc Failed!"); </P>

<P>pNode-&gt;hThread = hThread; </P>

<P>pNode-&gt;lpvNext = (LPVOID) pHead; </P>

<P>pHead = pNode; </P>

<P>} </P>

<P></P>

<P>VOID ErrorExit(LPSTR lpszMessage) </P>

<P>{ </P>

<P>MessageBox(hwndMain, lpszMessage, "Error", MB_OK); </P>

<P>ExitProcess(0); </P>

<P>} </P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

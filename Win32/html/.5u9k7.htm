<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>RegCreateKeyEx</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME=".5u9k7"></A><B>RegCreateKeyEx  <A HREF="69slty.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="1y7hnby.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="vm.h_d.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>RegCreateKeyEx</B> function creates the specified key. If the key already exists in the registry, the function opens it.</P>

<P><B>LONG RegCreateKeyEx(</B></P>

<TABLE cols=2 width=610>

<TR VALIGN="top">
<TD width=56%><B>HKEY</B> <I>hKey</I><B>,</B></TD>
<TD width=44%>// handle of an open key </TD>
</TR>

<TR VALIGN="top">
<TD width=56%><B>    LPCTSTR</B> <I>lpSubKey</I><B>,</B></TD>
<TD width=44%>// address of subkey name </TD>
</TR>

<TR VALIGN="top">
<TD width=56%><B>    DWORD</B> <I>Reserved</I><B>,</B></TD>
<TD width=44%>// reserved </TD>
</TR>

<TR VALIGN="top">
<TD width=56%><B>    LPTSTR</B> <I>lpClass</I><B>,</B></TD>
<TD width=44%>// address of class string </TD>
</TR>

<TR VALIGN="top">
<TD width=56%><B>    DWORD</B> <I>dwOptions</I><B>,</B></TD>
<TD width=44%>// special options flag </TD>
</TR>

<TR VALIGN="top">
<TD width=56%><B>    REGSAM</B> <I>samDesired</I><B>,</B></TD>
<TD width=44%>// desired security access </TD>
</TR>

<TR VALIGN="top">
<TD width=56%><B>    LPSECURITY_ATTRIBUTES</B> <I>lpSecurityAttributes</I><B>,</B></TD>
<TD width=44%>// address of key security structure </TD>
</TR>

<TR VALIGN="top">
<TD width=56%><B>    PHKEY</B> <I>phkResult</I><B>,</B></TD>
<TD width=44%>// address of buffer for opened handle  </TD>
</TR>

<TR VALIGN="top">
<TD width=56%><B>    LPDWORD</B> <I>lpdwDisposition</I> </TD>
<TD width=44%>// address of disposition value buffer </TD>
</TR>

<TR VALIGN="top">
<TD width=56%><B>   );</B></TD>
<TD width=44%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hKey</I></P>

<P>Identifies a currently open key or any of the following predefined reserved handle values: </P>

<P><B>HKEY_CLASSES_ROOT</B><BR>
<B>HKEY_CURRENT_USER</B><BR>
<B>HKEY_LOCAL_MACHINE</B><BR>
<B>HKEY_USERS</B></P>

<P>The key opened or created by the <B>RegCreateKeyEx</B> function is a subkey of the key identified by the <I>hKey</I> parameter. </P>

<P><I>lpSubKey</I></P>

<P>Points to a null-terminated string specifying the name of a subkey that this function opens or creates. The subkey specified must be a subkey of the key identified by the <I>hKey</I> parameter. This subkey must not begin with the backslash character ('\'). This parameter cannot be NULL. </P>

<P><I>Reserved</I></P>

<P>Reserved; must be zero. </P>

<P><I>lpClass</I></P>

<P>Points to a null-terminated string that specifies the class (object type) of this key. This parameter is ignored if the key already exists. </P>

<P><I>dwOptions</I></P>

<P>Specifies special options for the key. This parameter can be one of the following values. </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=53%><B>Value</B></TD>
<TD width=47%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=53%>REG_OPTION_NON_VOLATILE</TD>
<TD width=47%>This key is not volatile; this is the default. The information is stored in a file and is preserved when the system is restarted. The <A HREF="2_uq_4o.htm"><B>RegSaveKey</B></A> function saves keys that are not volatile. </TD>
</TR>

<TR VALIGN="top">
<TD width=53%>REG_OPTION_VOLATILE</TD>
<TD width=47%><B>Windows NT:</B> This key is volatile; the information is stored in memory and is not preserved when the system is restarted. The <B>RegSaveKey</B> function does not save volatile keys. This flag is ignored if the key already exists. 
<P><B>Windows 95:</B> This value is ignored in Windows 95. If REG_OPTION_VOLATILE is specified, the <B>RegCreateKeyEx</B> function creates a nonvolatile key and returns ERROR_SUCCESS.</P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=53%>REG_OPTION_BACKUP_RESTORE </TD>
<TD width=47%><B>Windows NT:</B> If this flag is set, the function ignores the <I>samDesired</I> parameter and attempts to open the key with the access required to backup or restore the key. If the calling thread has the SE_BACKUP_NAME privilege enabled, the key is opened with ACCESS_SYSTEM_SECURITY and KEY_READ access. If the calling thread has the SE_RESTORE_NAME privilege enabled, the key is opened with ACCESS_SYSTEM_SECURITY and KEY_WRITE access. If both privileges are enabled, the key has the combined accesses for both privileges. 
<P><B>Windows 95:</B> This flag is ignored. Windows 95 does not support security in its registry.</P>
</TD>
</TR>
</TABLE><BR>

<P></P>

<P><I>samDesired</I></P>

<P>Specifies an access mask that specifies the desired security access for the new key. This parameter can be a combination of the following values: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=48%><B>Value</B></TD>
<TD width=52%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=48%>KEY_ALL_ACCESS</TD>
<TD width=52%>Combination of KEY_QUERY_VALUE, KEY_ENUMERATE_SUB_KEYS, KEY_NOTIFY, KEY_CREATE_SUB_KEY, KEY_CREATE_LINK, and KEY_SET_VALUE access.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>KEY_CREATE_LINK</TD>
<TD width=52%>Permission to create a symbolic link.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>KEY_CREATE_SUB_KEY</TD>
<TD width=52%>Permission to create subkeys.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>KEY_ENUMERATE_SUB_KEYS</TD>
<TD width=52%>Permission to enumerate subkeys.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>KEY_EXECUTE</TD>
<TD width=52%>Permission for read access.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>KEY_NOTIFY</TD>
<TD width=52%>Permission for change notification.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>KEY_QUERY_VALUE</TD>
<TD width=52%>Permission to query subkey data.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>KEY_READ</TD>
<TD width=52%>Combination of KEY_QUERY_VALUE, KEY_ENUMERATE_SUB_KEYS, and KEY_NOTIFY access.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>KEY_SET_VALUE</TD>
<TD width=52%>Permission to set subkey data.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>KEY_WRITE</TD>
<TD width=52%>Combination of KEY_SET_VALUE and KEY_CREATE_SUB_KEY access.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><I>lpSecurityAttributes</I></P>

<P>Pointer to a <A HREF="be53kg.htm"><B>SECURITY_ATTRIBUTES</B></A> structure that determines whether the returned handle can be inherited by child processes. If <I>lpSecurityAttributes</I> is NULL, the handle cannot be inherited. </P>

<P><B>Windows NT: </B>The <B>lpSecurityDescriptor</B> member of the structure specifies a security descriptor for the new key. If <I>lpSecurityAttributes</I> is NULL, the key gets a default security descriptor.</P>

<P><B>Windows 95: </B>The <B>lpSecurityDescriptor</B> member of the structure is ignored.</P>

<P><I>phkResult</I></P>

<P>Points to a variable that receives the handle of the opened or created key. </P>

<P><I>lpdwDisposition</I></P>

<P>Points to a variable that receives one of the following disposition values: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=47%><B>Value</B></TD>
<TD width=53%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=47%>REG_CREATED_NEW_KEY</TD>
<TD width=53%>The key did not exist and was created.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>REG_OPENED_EXISTING_KEY</TD>
<TD width=53%>The key existed and was simply opened without being changed.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is ERROR_SUCCESS.</P>

<P>If the function fails, the return value is a nonzero error code defined in WINERROR.H. You can use the <A HREF="n7qrmp.htm"><B>FormatMessage</B></A> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</P>

<P><B>Remarks</B></P>

<P>The key that the <B>RegCreateKeyEx</B> function creates has no values. An application can use the <A HREF="10hyuh_.htm"><B>RegSetValue</B></A> or <A HREF="43bp0ka.htm"><B>RegSetValueEx</B></A> function to set key values. </P>

<P>The key identified by the <I>hKey</I> parameter must have been opened with KEY_CREATE_SUB_KEY access. To open the key, use the <B>RegCreateKeyEx</B> or <B>RegOpenKeyEx</B> function. </P>

<P>An application cannot create a key under HKEY_USERS or HKEY_LOCAL_MACHINE. </P>

<P>An application can use <B>RegCreateKeyEx</B> to temporarily lock a portion of the registry. When the locking process creates a new key, it receives the disposition value REG_CREATED_NEW_KEY, indicating that it "owns" the lock. Another process attempting to create the same key receives the disposition value REG_OPENED_EXISTING_KEY, indicating that another process already owns the lock. </P>

<P><B>See Also</B></P>

<P><A HREF="0f79.0.htm"><B>RegCloseKey</B></A>, <A HREF="ioabqx.htm"><B>RegCreateKey</B></A>, <A HREF="kr5n7j.htm"><B>RegDeleteKey</B></A>, <A HREF="wg.8d.htm"><B>RegOpenKey</B></A>, <A HREF="rz_3fo.htm"><B>RegOpenKeyEx</B></A>, <A HREF="2_uq_4o.htm"><B>RegSaveKey</B></A>, <A HREF="be53kg.htm"><B>SECURITY_ATTRIBUTES</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

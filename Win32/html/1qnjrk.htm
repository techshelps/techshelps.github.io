<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Allowing Access</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="1qnjrk"></A><B>Allowing Access</B></P>

<P>You can allow all access to an object by adding a NULL discretionary access-control list (DACL) to the object's security descriptor. Unlike an empty DACL that denies all access, a NULL DACL grants everyone full access to the object. You can also grant access to a specified trustee by using a DACL that has one or more access-allowed ACEs. </P>

<P>This topic includes examples that use the high-level access-control functions provided by Windows NT version 4.0. For an example that uses the older low-level access control functions, see <A HREF="21cgi3i.htm">Allowing Access Using the Low-Level Functions</A>.</P>

<P>The first example uses the <A HREF="a0hpj_.htm"><B>SetNamedSecurityInfo</B></A> function to attach a NULL DACL to a file. The <A HREF="a0hpj_.htm"><B>SetNamedSecurityInfo</B></A> call specifies the DACL_SECURITY_INFORMATION flag to indicate that it is setting the file's DACL; and it passes a NULL pointer for the <I>pDacl</I> parameter.</P>

<P>// grant full access to everyone with a NULL DACL</P>

<P></P>

<P>dwRes = SetNamedSecurityInfo(TEXT("myfile"), SE_FILE_OBJECT, </P>

<P>DACL_SECURITY_INFORMATION, </P>

<P>NULL, NULL, NULL, NULL);</P>

<P>The second example adds an access-allowed ACE to the DACL of an object. The example uses the <A HREF="322nkdh.htm"><B>GetNamedSecurityInfo</B></A> function to get the existing DACL. Then it uses the <A HREF="9gxqlm.htm"><B>BuildExplicitAccessWithName</B></A> and <A HREF="0lyb0g.htm"><B>SetEntriesInAcl</B></A> functions to merge a new ACE with any existing ACEs in the DACL. Finally, the example calls the <A HREF="a0hpj_.htm"><B>SetNamedSecurityInfo</B></A> function to attach the new DACL to the object's security descriptor.</P>

<P>DWORD AddAceToAcl (LPTSTR lpObjectName, SE_OBJECT_TYPE ObjectType)  </P>

<P>{</P>

<P>DWORD dwRes;</P>

<P>PACL pOldDACL, pNewDACL;</P>

<P>PSECURITY_DESCRIPTOR pSD;</P>

<P>EXPLICIT_ACCESS ea;</P>

<P>if (NULL == lpObjectName) </P>

<P>return ERROR_INVALID_PARAMETER;</P>

<P>// get a pointer to the existing DACL</P>

<P>dwRes = GetNamedSecurityInfo(lpObjectName, ObjectType, </P>

<P>DACL_SECURITY_INFORMATION,  </P>

<P>NULL, NULL, &amp;pOldDACL, NULL, &amp;pSD);</P>

<P>if (ERROR_SUCCESS != dwRes) </P>

<P>return dwRes;</P>

<P>// initialize an EXPLICIT_ACCESS structure to allow access</P>

<P>ZeroMemory(&amp;ea, sizeof(EXPLICIT_ACCESS));</P>

<P>BuildExplicitAccessWithName(&amp;ea, "duke", GENERIC_READ, </P>

<P>SET_ACCESS, NO_INHERITANCE);</P>

<P>// create an new ACL by merging the EXPLICIT_ACCESS structure</P>

<P>// with the existing DACL</P>

<P>dwRes = SetEntriesInAcl(1, &amp;ea, pOldDACL, &amp;pNewDACL);</P>

<P>if (ERROR_SUCCESS != dwRes) </P>

<P>goto Cleanup;</P>

<P>// attach the new ACL as the object's DACL</P>

<P>dwRes = SetNamedSecurityInfo(lpObjectName, ObjectType, </P>

<P>DACL_SECURITY_INFORMATION,  </P>

<P>NULL, NULL, pNewDACL, NULL);</P>

<P>// free the buffers returned by SetEntriesInAcl </P>

<P>//   and GetNamedSecurityInfo</P>

<P>Cleanup: </P>

<P>if(pSD != NULL) </P>

<P>LocalFree((HLOCAL) pSD); </P>

<P>if(pNewDACL != NULL) </P>

<P>LocalFree((HLOCAL) pNewDACL); </P>

<P>return dwRes;</P>

<P>}</P>

<P></P>

</BODY>
</HTML>

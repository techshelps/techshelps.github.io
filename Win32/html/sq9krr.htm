<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>CryptDestroyKey [New - Windows NT] [New - Windows 95, OEM Service Release 2]</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="sq9krr"></A><B>CryptDestroyKey  <A HREF=".5kony.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="2jdzwvi.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="sx1q_k.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>[New - Windows NT]</P>

<P>[New - Windows 95, OEM Service Release 2]</P>

<P>The <B>CryptDestroyKey</B> function releases the handle referenced by the <I>hKey</I> parameter. Once a key handle has been released, it becomes invalid and cannot be used again.</P>

<P>If the handle refers to a session key, or to a public key that has been imported into the CSP through <A HREF="8mc1bn.htm"><B>CryptImportKey</B></A>, this function destroys the key and frees the memory that the key occupied. Many CSPs will scrub the memory where the key was held before freeing it.</P>

<P>On the other hand, if the handle refers to a public/private key pair (obtained from <A HREF="j58xzp.htm"><B>CryptGetUserKey</B></A>), the underlying key pair is not destroyed by this function. Only the handle is destroyed.</P>

<P><B>BOOL CRYPTFUNC CryptDestroyKey(</B></P>

<TABLE cols=2 width=197>

<TR VALIGN="top">
<TD width=83%><B>HCRYPTKEY </B><I>hKey</I></TD>
<TD width=17%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=83%><B>   );</B></TD>
<TD width=17%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hKey</I></P>

<P>[in] A handle to the key to be destroyed.</P>

<P></P>

<P><B>Remarks</B></P>

<P>Keys take up memory in both the operating system's memory space and the CSP's memory space. Some CSPs will be implemented in hardware with very limited memory resources. For this reason, it is important that applications destroy all keys with the <B>CryptDestroyKey</B> function when they are finished with them.</P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is nonzero.</P>

<P>If the function fails, the return value is zero. To retrieve extended error information, use the <A HREF="11c2vs7.htm"><B>GetLastError</B></A> function.</P>

<P>The following table lists the error codes most commonly returned by the <B>GetLastError</B> function. The error codes prefaced by "NTE" are generated by the particular CSP you are using.</P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=43%><B>Error</B></TD>
<TD width=57%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=43%>ERROR_INVALID_HANDLE</TD>
<TD width=57%>One of the parameters specifies an invalid handle. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>ERROR_INVALID_PARAMETER</TD>
<TD width=57%>One of the parameters contains an invalid value. This is most often an illegal pointer.</TD>
</TR>

<TR VALIGN="top">
<TD width=43%>NTE_BAD_KEY</TD>
<TD width=57%>The <I>hKey</I> parameter does not contain a valid handle to a key.</TD>
</TR>

<TR VALIGN="top">
<TD width=43%>NTE_BAD_UID</TD>
<TD width=57%>The CSP context that was specified when the key was created cannot be found.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Example</B></P>

<P>See the "Example" section in the <B>CryptGenKey</B> function.</P>

<P><B>See Also</B></P>

<P><A HREF="ioh0._.htm"><B>CryptDeriveKey</B></A>, <A HREF="dnbayj.htm"><B>CryptGenKey</B></A>, <A HREF="j58xzp.htm"><B>CryptGetUserKey</B></A>, <A HREF="8mc1bn.htm"><B>CryptImportKey</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

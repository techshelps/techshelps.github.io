<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>Named Pipe Operations</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="ym.f53"></A><B>Named Pipe Operations</B></P>

<P>The first time the server calls <A HREF="21dzyt.htm"><B>CreateNamedPipe</B></A>, the function specifies the maximum number of instances of the pipe that can exist simultaneously. Limited by this maximum, the server can call <B>CreateNamedPipe</B> repeatedly to create additional instances of the pipe. If the function succeeds, each call returns a handle to the server end of a named pipe instance. </P>

<P>As soon as a pipe instance is created, a client process can connect to it by calling the <A HREF="xn35yd.htm"><B>CreateFile</B></A> or <A HREF="6xlg_2.htm"><B>CallNamedPipe</B></A> function. If a pipe instance is available, <B>CreateFile</B> returns a handle to the client end of the pipe instance. If no instances of the pipe are available, a client process can use the <A HREF="1xsezn8.htm"><B>WaitNamedPipe</B></A> function to wait for one to become available. </P>

<P>A client process can also use <B>CallNamedPipe</B> to combine into a single operation the functions that connect to a pipe instance (waiting for one to be available, if necessary), write a message, read a message, and close its pipe handle. <B>CallNamedPipe</B> can be used only by a client process and only with a message-type pipe. </P>

<P>A server process specifies a handle to a pipe instance in a call to the <A HREF="ksa3sm.htm"><B>ConnectNamedPipe</B></A> function to determine when a client process is connected to it. If the pipe handle is in blocking mode, the <B>ConnectNamedPipe</B> operation does not return until a client is connected. </P>

<P>Client and server processes can call one of several functions ¾ in addition to <B>CallNamedPipe</B> ¾ to read from and write to a named pipe. The behavior of these functions depends on the type of pipe and the modes in effect for the specified pipe handle, as follows: </P>

<P>·The <A HREF="cjnd8p.htm"><B>ReadFile</B></A> and <A HREF="g0sox_.htm"><B>WriteFile</B></A> functions can be used with either byte-type or message-type pipes. </P>

<P>·The <A HREF="fm7wz7.htm"><B>ReadFileEx</B></A> and <A HREF="12g2wey.htm"><B>WriteFileEx</B></A> functions can be used with either byte-type or message-type pipes if the pipe handle was opened for overlapped operations. </P>

<P>·The <A HREF="3ie31.htm"><B>PeekNamedPipe</B></A> function can be used to read without removing the contents of either a byte-type pipe or a message-type pipe. <B>PeekNamedPipe</B> can also return additional information about the pipe instance. </P>

<P>·The <A HREF="1nuxhmk.htm"><B>TransactNamedPipe</B></A> function can be used with message-type pipes if the pipe handle of the calling process is set to message-read mode. The function writes a request message and reads a reply message in a single operation, enhancing network performance. </P>

<P></P>

<P>For a pipe handle in byte-read mode, a read operation is completed successfully when all available bytes in the pipe are read or when the specified number of bytes is read. </P>

<P>For a pipe handle in message-read mode, a <A HREF="cjnd8p.htm"><B>ReadFile</B></A> or <A HREF="fm7wz7.htm"><B>ReadFileEx</B></A> operation is completed successfully only when the entire message is read. If the specified number of bytes to read is less than the size of the next message, the function reads as much of the message as possible before returning FALSE (with the <A HREF="11c2vs7.htm"><B>GetLastError</B></A> function returning ERROR_MORE_DATA). However, the remainder of the message can be read by making additional calls to <B>ReadFile</B>, <B>ReadFileEx</B>, or <A HREF="3ie31.htm"><B>PeekNamedPipe</B></A>. Note that <B>PeekNamedPipe</B> returns TRUE after reading a complete or partial message, and it reports the number of bytes remaining in a partially read message. </P>

<P>For a message-type pipe with multiple unread messages, a read operation using a message-read pipe handle returns after reading one message. An operation using a byte-read handle does not distinguish between the messages ¾ it reads all available bytes up to the specified number. </P>

<P>When a client and server finish using a pipe instance, the server calls the <A HREF="2ay12gp.htm"><B>DisconnectNamedPipe</B></A> function to close the connection to the client process. This function makes the client's handle invalid (if it has not already been closed). Any unread data in the pipe is discarded. To ensure that all bytes or messages written to the pipe are read by the client, the server first calls the <A HREF="3oca9w0.htm"><B>FlushFileBuffers</B></A> function, which does not return until the client has read all data from the pipe. After the client is disconnected, the server calls the <A HREF="ngwwie.htm"><B>CloseHandle</B></A> function to close its handle to the pipe instance. Alternatively, the server can use <A HREF="ksa3sm.htm"><B>ConnectNamedPipe</B></A> to enable a new client to connect to this instance of the pipe. </P>

<P>A process can retrieve information about a named pipe by calling the <A HREF="10rtvv5.htm"><B>GetNamedPipeInfo</B></A> function, which returns the type of the pipe, the size of the input and output buffers, and the maximum number of pipe instances that can be created. The <A HREF="842lr_.htm"><B>GetNamedPipeHandleState</B></A> function reports on the read and wait modes of a pipe handle, the current number of pipe instances, and additional relevant information for pipes that communicate over a network. The <A HREF="ap5lb1.htm"><B>SetNamedPipeHandleState</B></A> function sets the read mode and wait modes of a pipe handle. For client processes communicating with a remote server, the function also controls the maximum number of bytes to collect or the maximum time to wait before transmitting a message (assuming the client's handle was not opened with write-through mode enabled). </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

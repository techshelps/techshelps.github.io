<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Example of a Clipboard Viewer</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="y39_mt"></A><B>Example of a Clipboard Viewer</B></P>

<P>The following example shows a simple clipboard viewer application. </P>

<P>HINSTANCE hinst;  </P>

<P>UINT uFormat = (UINT)(-1); </P>

<P>BOOL fAuto = TRUE; </P>

<P></P>

<P>LRESULT APIENTRY MainWndProc(hwnd, uMsg, wParam, lParam) </P>

<P>HWND hwnd; </P>

<P>UINT uMsg; </P>

<P>WPARAM wParam; </P>

<P>LPARAM lParam; </P>

<P>{ </P>

<P>static HWND hwndNextViewer; </P>

<P></P>

<P>HDC hdc; </P>

<P>HDC hdcMem; </P>

<P>PAINTSTRUCT ps; </P>

<P>LPPAINTSTRUCT lpps; </P>

<P>RECT rc; </P>

<P>LPRECT lprc; </P>

<P>HGLOBAL hglb; </P>

<P>LPSTR lpstr; </P>

<P>HBITMAP hbm; </P>

<P>HENHMETAFILE hemf; </P>

<P>HWND hwndOwner; </P>

<P></P>

<P>switch (uMsg) </P>

<P>{ </P>

<P>case WM_PAINT: </P>

<P>hdc = BeginPaint(hwnd, &amp;ps); </P>

<P></P>

<P>// Branch depending on the clipboard format. </P>

<P></P>

<P>switch (uFormat) </P>

<P>{ </P>

<P>case CF_OWNERDISPLAY: </P>

<P>hwndOwner = GetClipboardOwner(); </P>

<P>hglb = GlobalAlloc(GMEM_DDESHARE, </P>

<P>sizeof(PAINTSTRUCT)); </P>

<P>lpps = GlobalLock(hglb); </P>

<P>memcpy(lpps, &amp;ps, sizeof(PAINTSTRUCT)); </P>

<P>GlobalUnlock(hglb); </P>

<P></P>

<P>SendMessage(hwndOwner, WM_PAINTCLIPBOARD, </P>

<P>(WPARAM) hwnd, (LPARAM) hglb); </P>

<P></P>

<P>GlobalFree(hglb); </P>

<P>break; </P>

<P></P>

<P>case CF_BITMAP: </P>

<P>hdcMem = CreateCompatibleDC(hdc); </P>

<P>if (hdcMem != NULL) </P>

<P>{ </P>

<P>if (OpenClipboard(hwnd)) </P>

<P>{ </P>

<P>hbm = (HBITMAP) </P>

<P>GetClipboardData(uFormat); </P>

<P>SelectObject(hdcMem, hbm); </P>

<P>GetClientRect(hwnd, &amp;rc); </P>

<P></P>

<P>BitBlt(hdc, 0, 0, rc.right, rc.bottom, </P>

<P>hdcMem, 0, 0, SRCCOPY); </P>

<P>CloseClipboard(); </P>

<P>} </P>

<P>DeleteDC(hdcMem); </P>

<P>} </P>

<P>break; </P>

<P></P>

<P>case CF_TEXT: </P>

<P>if (OpenClipboard(hwnd)) </P>

<P>{ </P>

<P>hglb = GetClipboardData(uFormat); </P>

<P>lpstr = GlobalLock(hglb); </P>

<P></P>

<P>GetClientRect(hwnd, &amp;rc); </P>

<P>DrawText(hdc, lpstr, -1, &amp;rc, DT_LEFT); </P>

<P></P>

<P>GlobalUnlock(hglb); </P>

<P>CloseClipboard(); </P>

<P>} </P>

<P>break; </P>

<P></P>

<P>case CF_ENHMETAFILE: </P>

<P>if (OpenClipboard(hwnd)) </P>

<P>{ </P>

<P>hemf = GetClipboardData(uFormat); </P>

<P>GetClientRect(hwnd, &amp;rc); </P>

<P>PlayEnhMetaFile(hdc, hemf, &amp;rc); </P>

<P>CloseClipboard(); </P>

<P>} </P>

<P>break; </P>

<P></P>

<P>case 0: </P>

<P>GetClientRect(hwnd, &amp;rc); </P>

<P>DrawText(hdc, "The clipboard is empty.", -1, </P>

<P>&amp;rc, DT_CENTER | DT_SINGLELINE | </P>

<P>DT_VCENTER); </P>

<P>break; </P>

<P></P>

<P>default: </P>

<P>GetClientRect(hwnd, &amp;rc); </P>

<P>DrawText(hdc, "Unable to display format.", -1, </P>

<P>&amp;rc, DT_CENTER | DT_SINGLELINE | </P>

<P>DT_VCENTER); </P>

<P>} </P>

<P>EndPaint(hwnd, &amp;ps); </P>

<P>break; </P>

<P></P>

<P>case WM_SIZE: </P>

<P>if (uFormat == CF_OWNERDISPLAY) </P>

<P>{ </P>

<P>hwndOwner = GetClipboardOwner(); </P>

<P>hglb = GlobalAlloc(GMEM_DDESHARE, sizeof(RECT)); </P>

<P>lprc = GlobalLock(hglb); </P>

<P>GetClientRect(hwnd, lprc); </P>

<P>GlobalUnlock(hglb); </P>

<P></P>

<P>SendMessage(hwndOwner, WM_SIZECLIPBOARD, </P>

<P>(WPARAM) hwnd, (LPARAM) hglb); </P>

<P></P>

<P>GlobalFree(hglb); </P>

<P>} </P>

<P>break; </P>

<P></P>

<P>case WM_CREATE: </P>

<P></P>

<P>// Add the window to the clipboard viewer chain. </P>

<P></P>

<P>hwndNextViewer = SetClipboardViewer(hwnd); </P>

<P>break; </P>

<P></P>

<P>case WM_CHANGECBCHAIN: </P>

<P></P>

<P>// If the next window is closing, repair the chain. </P>

<P></P>

<P>if ((HWND) wParam == hwndNextViewer) </P>

<P>hwndNextViewer = (HWND) lParam; </P>

<P></P>

<P>// Otherwise, pass the message to the next link. </P>

<P></P>

<P>else if (hwndNextViewer != NULL) </P>

<P>SendMessage(hwndNextViewer, uMsg, wParam, lParam); </P>

<P></P>

<P>break; </P>

<P></P>

<P>case WM_DESTROY: </P>

<P>ChangeClipboardChain(hwnd, hwndNextViewer); </P>

<P>PostQuitMessage(0); </P>

<P>break; </P>

<P></P>

<P>case WM_DRAWCLIPBOARD:  // clipboard contents changed. </P>

<P></P>

<P>// Update the window by using Auto clipboard format. </P>

<P></P>

<P>SetAutoView(hwnd); </P>

<P></P>

<P>// Pass the message to the next window in clipboard </P>

<P>// viewer chain. </P>

<P></P>

<P>SendMessage(hwndNextViewer, uMsg, wParam, lParam); </P>

<P>break; </P>

<P></P>

<P>case WM_INITMENUPOPUP: </P>

<P>if (!HIWORD(lParam)) </P>

<P>InitMenu(hwnd, (HMENU) wParam); </P>

<P>break; </P>

<P></P>

<P>case WM_COMMAND: </P>

<P>switch (LOWORD(wParam)) </P>

<P>{ </P>

<P>case IDM_EXIT: </P>

<P>DestroyWindow(hwnd); </P>

<P>break; </P>

<P></P>

<P>case IDM_AUTO: </P>

<P>SetAutoView(hwnd); </P>

<P>break; </P>

<P></P>

<P>default: </P>

<P>fAuto = FALSE; </P>

<P>uFormat = LOWORD(wParam); </P>

<P>InvalidateRect(hwnd, NULL, TRUE); </P>

<P>} </P>

<P>break; </P>

<P></P>

<P>default: </P>

<P>return DefWindowProc(hwnd, uMsg, wParam, lParam); </P>

<P>} </P>

<P>return (LRESULT) NULL; </P>

<P>} </P>

<P></P>

<P>void WINAPI SetAutoView(HWND hwnd) </P>

<P>{ </P>

<P>static UINT auPriorityList[] = { </P>

<P>CF_OWNERDISPLAY, </P>

<P>CF_TEXT, </P>

<P>CF_ENHMETAFILE, </P>

<P>CF_BITMAP </P>

<P>}; </P>

<P></P>

<P>uFormat = GetPriorityClipboardFormat(auPriorityList, 4); </P>

<P>fAuto = TRUE; </P>

<P></P>

<P>InvalidateRect(hwnd, NULL, TRUE); </P>

<P>UpdateWindow(hwnd); </P>

<P>} </P>

<P></P>

<P>void WINAPI InitMenu(HWND hwnd, HMENU hmenu) </P>

<P>{ </P>

<P>UINT uFormat; </P>

<P>char szFormatName[80]; </P>

<P>LPCSTR lpFormatName; </P>

<P>UINT fuFlags; </P>

<P>UINT idMenuItem; </P>

<P></P>

<P>// If a menu is not the display menu, no initialization is necessary. </P>

<P></P>

<P>if (GetMenuItemID(hmenu, 0) != IDM_AUTO) </P>

<P>return; </P>

<P></P>

<P>// Delete all menu items except the first. </P>

<P></P>

<P>while (GetMenuItemCount(hmenu) &gt; 1) </P>

<P>DeleteMenu(hmenu, 1, MF_BYPOSITION); </P>

<P></P>

<P>// Check or uncheck the Auto menu item. </P>

<P></P>

<P>fuFlags = fAuto ? MF_BYCOMMAND | MF_CHECKED : </P>

<P>MF_BYCOMMAND | MF_UNCHECKED; </P>

<P>CheckMenuItem(hmenu, IDM_AUTO, fuFlags); </P>

<P></P>

<P>// If there are no clipboard formats, return. </P>

<P></P>

<P>if (CountClipboardFormats() == 0) </P>

<P>return; </P>

<P></P>

<P>// Open the clipboard. </P>

<P></P>

<P>if (!OpenClipboard(hwnd)) </P>

<P>return; </P>

<P></P>

<P>// Add a separator and then a menu item for each format. </P>

<P></P>

<P>AppendMenu(hmenu, MF_SEPARATOR, 0, NULL); </P>

<P>uFormat = EnumClipboardFormats(0); </P>

<P></P>

<P>while (uFormat) </P>

<P>{ </P>

<P>// Call an application-defined function to get the name </P>

<P>// of the clipboard format. </P>

<P></P>

<P>lpFormatName = GetPredefinedClipboardFormatName(uFormat); </P>

<P></P>

<P>// For registered formats, get the registered name. </P>

<P></P>

<P>if (lpFormatName == NULL) </P>

<P>{ </P>

<P>if (GetClipboardFormatName(uFormat, szFormatName, </P>

<P>sizeof(szFormatName))) </P>

<P>lpFormatName = szFormatName; </P>

<P>else </P>

<P>lpFormatName = "(unknown)"; </P>

<P>} </P>

<P></P>

<P>// Add a menu item for the format. For displayable </P>

<P>// formats, use the format ID for the menu ID. </P>

<P></P>

<P>if (IsDisplayableFormat(uFormat)) </P>

<P>{ </P>

<P>fuFlags = MF_STRING; </P>

<P>idMenuItem = uFormat; </P>

<P>} </P>

<P>else </P>

<P>{ </P>

<P>fuFlags = MF_STRING | MF_GRAYED; </P>

<P>idMenuItem = 0; </P>

<P>} </P>

<P>AppendMenu(hmenu, fuFlags, idMenuItem, lpFormatName); </P>

<P></P>

<P>uFormat = EnumClipboardFormats(uFormat); </P>

<P>} </P>

<P>CloseClipboard(); </P>

<P></P>

<P>} </P>

<P></P>

<P>BOOL WINAPI IsDisplayableFormat(UINT uFormat) </P>

<P>{ </P>

<P>switch (uFormat) </P>

<P>{ </P>

<P>case CF_OWNERDISPLAY: </P>

<P>case CF_TEXT: </P>

<P>case CF_ENHMETAFILE: </P>

<P>case CF_BITMAP: </P>

<P>return TRUE; </P>

<P>} </P>

<P>return FALSE; </P>

<P>} </P>

<P></P>

</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>Example of Scrolling Text</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="sdks7w"></A><B>Example of Scrolling Text</B></P>

<P>The following example shows how to have your application scroll text in response to input from the horizontal and vertical scroll bars. </P>

<P>HDC hdc;  </P>

<P>PAINTSTRUCT ps; </P>

<P>TEXTMETRIC tm; </P>

<P>SCROLLINFO si; </P>

<P></P>

<P>/* These variables are required to display text. */ </P>

<P></P>

<P>static int xClient;     /* width of client area                  */ </P>

<P>static int yClient;     /* height of client area                 */ </P>

<P>static int xClientMax;  /* maximum width of client area          */ </P>

<P></P>

<P>static int xChar;       /* horizontal scrolling unit             */ </P>

<P>static int yChar;       /* vertical scrolling unit               */ </P>

<P>static int xUpper;      /* average width of uppercase letters    */ </P>

<P></P>

<P>static int xPos;        /* current horizontal scrolling position */ </P>

<P>static int yPos;        /* current vertical scrolling position   */ </P>

<P></P>

<P>static int xMax;        /* maximum horiz. scrolling position     */ </P>

<P>static int yMax;        /* maximum vert. scrolling position      */ </P>

<P></P>

<P>int xInc;               /* horizontal scrolling increment        */ </P>

<P>int yInc;               /* vertical scrolling increment          */ </P>

<P></P>

<P>int i;                  /* loop counter                          */ </P>

<P>int x, y;               /* horiz. and vert. printing coords      */ </P>

<P></P>

<P>int FirstLine;          /* first line in the invalidated area    */ </P>

<P>int LastLine;           /* last line in the invalidated area     */ </P>

<P></P>

<P>/* Create an array of lines to display. */ </P>

<P></P>

<P>#define LINES 27 </P>

<P>static char *abc[] = { "anteater", "bear", "cougar", "dingo", </P>

<P>"elephant", "frog", "gazelle", "hyena", "iguana", "jackal", </P>

<P>"kangaroo", "llama", "moose", "newt", "octopus", "penguin", </P>

<P>"quail", "rat", "squid", "tortoise", "urus", "vole", </P>

<P>"walrus", "xylophone", "yak", "zebra", </P>

<P>"This line contains many words, but no character. Go figure." }; </P>

<P></P>

<P>switch (uMsg) { </P>

<P></P>

<P>case WM_CREATE : </P>

<P></P>

<P>/* Get the handle of the client area's device context. */ </P>

<P></P>

<P>hdc = GetDC (hwnd); </P>

<P></P>

<P>/* Extract font dimensions from the text metrics. */ </P>

<P></P>

<P>GetTextMetrics (hdc, &amp;tm); </P>

<P>xChar = tm.tmAveCharWidth; </P>

<P>xUpper = (tm.tmPitchAndFamily &amp; 1 ? 3 : 2) * xChar/2; </P>

<P>yChar = tm.tmHeight + tm.tmExternalLeading; </P>

<P></P>

<P>/* Free the device context. */ </P>

<P></P>

<P>ReleaseDC (hwnd, hdc); </P>

<P></P>

<P>/* </P>

<P>* Set an arbitrary maximum width for client area. </P>

<P>* (xClientMax is the sum of the widths of 48 average </P>

<P>* lowercase letters and 12 uppercase letters.) </P>

<P>*/ </P>

<P></P>

<P>xClientMax = 48 * xChar + 12 * xUpper; </P>

<P></P>

<P>return 0; </P>

<P></P>

<P>case WM_SIZE: </P>

<P></P>

<P>/* Retrieve the dimensions of the client area. */ </P>

<P></P>

<P>yClient = HIWORD (lParam); </P>

<P>xClient = LOWORD (lParam); </P>

<P></P>

<P>/* </P>

<P>* Determine the maximum vertical scrolling position. </P>

<P>* The two is added for extra space below the lines </P>

<P>* of text. </P>

<P>*/ </P>

<P></P>

<P>yMax = max (0, LINES + 2 - yClient/yChar); </P>

<P></P>

<P>/* </P>

<P>* Make sure the current vertical scrolling position </P>

<P>* does not exceed the maximum. </P>

<P>*/ </P>

<P></P>

<P>yPos = min (yPos, yMax); </P>

<P></P>

<P>/* </P>

<P>* Adjust the vertical scrolling range and scroll box </P>

<P>* position to reflect the new yMax and yPos values. </P>

<P>*/ </P>

<P></P>

<P>si.cbSize = sizeof(si); </P>

<P>si.fMask  = SIF_RANGE | SIF_PAGE | SIF_POS; </P>

<P>si.nMin   = 0; </P>

<P>si.nMax   = yMax; </P>

<P>si.nPage  = yClient / yChar; </P>

<P>si.nPos   = yPos; </P>

<P>SetScrollInfo(hwnd, SB_VERT, &amp;si, TRUE); </P>

<P></P>

<P>/* </P>

<P>* Determine the maximum horizontal scrolling position. </P>

<P>* The two is added for extra space to the right of the </P>

<P>* lines of text. </P>

<P>*/ </P>

<P></P>

<P>xMax = max (0, 2 + (xClientMax - xClient)/xChar); </P>

<P></P>

<P>/* </P>

<P>* Make sure the current horizontal scrolling position </P>

<P>* does not exceed the maximum. </P>

<P>*/ </P>

<P></P>

<P>xPos = min (xPos, xMax); </P>

<P></P>

<P>/* </P>

<P>* Adjust the horizontal scrolling range and scroll box </P>

<P>* position to reflect the new xMax and xPos values. </P>

<P>*/ </P>

<P></P>

<P>si.cbSize = sizeof(si); </P>

<P>si.fMask  = SIF_RANGE | SIF_PAGE | SIF_POS; </P>

<P>si.nMin   = 0; </P>

<P>si.nMax   = xMax; </P>

<P>si.nPage  = xClient / xChar; </P>

<P>si.nPos   = xPos; </P>

<P>SetScrollInfo(hwnd, SB_HORZ, &amp;si, TRUE); </P>

<P></P>

<P>return 0; </P>

<P></P>

<P>case WM_PAINT: </P>

<P></P>

<P>/* Prepare the window for painting. */ </P>

<P></P>

<P>hdc = BeginPaint(hwnd, &amp;ps); </P>

<P></P>

<P>/* </P>

<P>* Use the current vertical scrolling position and </P>

<P>* coordinates of the invalid rectangle to determine </P>

<P>* the range of new lines that should be drawn in the </P>

<P>* client area. </P>

<P>*/ </P>

<P></P>

<P>FirstLine = max (0, yPos + ps.rcPaint.top/yChar - 1); </P>

<P>LastLine = min (LINES, yPos + ps.rcPaint.bottom/yChar); </P>

<P></P>

<P>/* Display these lines. */ </P>

<P></P>

<P>for (i = FirstLine;i &lt; LastLine;i++) { </P>

<P>x = xChar * (1 - xPos); </P>

<P>y = yChar * (1 - yPos + i); </P>

<P></P>

<P>TextOut (hdc, x, y, abc[i], lstrlen(abc[i])); </P>

<P>} </P>

<P></P>

<P>/* Indicate that painting is finished. */ </P>

<P></P>

<P>EndPaint(hwnd, &amp;ps); </P>

<P>break; </P>

<P></P>

<P>case WM_HSCROLL: </P>

<P>switch(LOWORD (wParam)) { </P>

<P></P>

<P>/* User clicked shaft left of the scroll box. */ </P>

<P></P>

<P>case SB_PAGEUP: </P>

<P>xInc = -8; </P>

<P>break; </P>

<P></P>

<P>/* User clicked shaft right of the scroll box. */ </P>

<P></P>

<P>case SB_PAGEDOWN: </P>

<P>xInc = 8; </P>

<P>break; </P>

<P></P>

<P>/* User clicked the left arrow. */ </P>

<P></P>

<P>case SB_LINEUP: </P>

<P>xInc = -1; </P>

<P>break; </P>

<P></P>

<P>/* User clicked the right arrow. */ </P>

<P></P>

<P>case SB_LINEDOWN: </P>

<P>xInc = 1; </P>

<P>break; </P>

<P></P>

<P>/* User dragged the scroll box. */ </P>

<P></P>

<P>case SB_THUMBTRACK: </P>

<P>xInc = HIWORD(wParam) - xPos; </P>

<P>break; </P>

<P></P>

<P>default: </P>

<P>xInc = 0; </P>

<P></P>

<P>} </P>

<P></P>

<P>/* </P>

<P>* If applying the horizontal scrolling increment does not </P>

<P>* take the scrolling position out of the scrolling range, </P>

<P>* increment the scrolling position, adjust the position </P>

<P>* of the scroll box, and update the window. </P>

<P>*/ </P>

<P></P>

<P>if (xInc = max (-xPos, min (xInc, xMax - xPos))) { </P>

<P>xPos += xInc; </P>

<P>ScrollWindowEx (hwnd, -xChar * xInc, 0, </P>

<P>(CONST RECT *) NULL, (CONST RECT *) NULL, </P>

<P>(HRGN) NULL, (LPRECT) NULL, SW_INVALIDATE); </P>

<P>si.cbSize = sizeof(si); </P>

<P>si.fMask  = SIF_POS; </P>

<P>si.nPos   = xPos; </P>

<P>SetScrollInfo(hwnd, SB_HORZ, &amp;si, TRUE); </P>

<P>UpdateWindow (hwnd); </P>

<P>} </P>

<P></P>

<P>return 0; </P>

<P></P>

<P>case WM_VSCROLL: </P>

<P>switch(LOWORD (wParam)) { </P>

<P></P>

<P>/* User clicked the shaft above the scroll box. */ </P>

<P></P>

<P>case SB_PAGEUP: </P>

<P>yInc = min(-1, -yClient / yChar); </P>

<P>break; </P>

<P></P>

<P>/* User clicked the shaft below the scroll box. */ </P>

<P></P>

<P>case SB_PAGEDOWN: </P>

<P>yInc = max(1, yClient / yChar); </P>

<P>break; </P>

<P></P>

<P>/* User clicked the top arrow. */ </P>

<P></P>

<P>case SB_LINEUP: </P>

<P>yInc = -1; </P>

<P>break; </P>

<P></P>

<P>/* User clicked the bottom arrow. */ </P>

<P></P>

<P>case SB_LINEDOWN: </P>

<P>yInc = 1; </P>

<P>break; </P>

<P></P>

<P>/* User dragged the scroll box. */ </P>

<P></P>

<P>case SB_THUMBTRACK: </P>

<P>yInc = HIWORD(wParam) - yPos; </P>

<P>break; </P>

<P></P>

<P>default: </P>

<P>yInc = 0; </P>

<P></P>

<P>} </P>

<P></P>

<P>/* </P>

<P>* If applying the vertical scrolling increment does not </P>

<P>* take the scrolling position out of the scrolling range, </P>

<P>* increment the scrolling position, adjust the position </P>

<P>* of the scroll box, and update the window. UpdateWindow </P>

<P>* sends the WM_PAINT message. </P>

<P>*/ </P>

<P></P>

<P>if (yInc = max(-yPos, min(yInc, yMax - yPos))) { </P>

<P>yPos += yInc; </P>

<P>ScrollWindow(hwnd, 0, -yChar * yInc, </P>

<P>(CONST RECT *) NULL, (CONST RECT *) NULL, </P>

<P>(HRGN) NULL, (LPRECT) NULL, SW_INVALIDATE); </P>

<P>si.cbSize = sizeof(si); </P>

<P>si.fMask  = SIF_POS; </P>

<P>si.nPos   = YPos; </P>

<P>SetScrollInfo(hwnd, SB_VERT, &amp;si, TRUE); </P>

<P>UpdateWindow (hwnd); </P>

<P>} </P>

<P></P>

<P>return 0; </P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

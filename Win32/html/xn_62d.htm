<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>CreatePipe</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="xn_62d"></A><B>CreatePipe  <A HREF="76cc9o.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="qxj_so.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="1p87g2.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>CreatePipe</B> function creates an anonymous pipe, and returns handles to the read and write ends of the pipe. </P>

<P><B>BOOL CreatePipe(</B></P>

<TABLE cols=2 width=581>

<TR VALIGN="top">
<TD width=55%><B>PHANDLE</B> <I>hReadPipe</I><B>,</B></TD>
<TD width=45%>// address of variable for read handle </TD>
</TR>

<TR VALIGN="top">
<TD width=55%><B>    PHANDLE</B> <I>hWritePipe</I><B>,</B></TD>
<TD width=45%>// address of variable for write handle  </TD>
</TR>

<TR VALIGN="top">
<TD width=55%><B>    LPSECURITY_ATTRIBUTES</B> <I>lpPipeAttributes</I><B>,</B></TD>
<TD width=45%>// pointer to security attributes </TD>
</TR>

<TR VALIGN="top">
<TD width=55%><B>    DWORD</B> <I>nSize</I> </TD>
<TD width=45%>// number of bytes reserved for pipe </TD>
</TR>

<TR VALIGN="top">
<TD width=55%><B>   );</B></TD>
<TD width=45%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hReadPipe</I></P>

<P>Points to the variable that receives the read handle for the pipe. </P>

<P><I>hWritePipe</I></P>

<P>Points to the variable that receives the write handle for the pipe. </P>

<P><I>lpPipeAttributes</I></P>

<P>Pointer to a <A HREF="be53kg.htm"><B>SECURITY_ATTRIBUTES</B></A> structure that determines whether the returned handle can be inherited by child processes. If <I>lpPipeAttributes</I> is NULL, the handle cannot be inherited. </P>

<P><B>Windows NT:</B> The <B>lpSecurityDescriptor</B> member of the structure specifies a security descriptor for the new pipe. If <I>lpPipeAttributes</I> is NULL, the pipe gets a default security descriptor. </P>

<P><B>Windows 95:</B> The <B>lpSecurityDescriptor</B> member of the structure is ignored.</P>

<P><I>nSize</I></P>

<P>Specifies the buffer size for the pipe. The size is only a suggestion; the system uses the value to calculate an appropriate buffering mechanism. If this parameter is zero, the system uses the default buffer size. </P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is nonzero.</P>

<P>If the function fails, the return value is zero. To get extended error information, call <A HREF="11c2vs7.htm"><B>GetLastError</B></A>. </P>

<P><B>Remarks</B></P>

<P><B>CreatePipe</B> creates the pipe, assigning the specified pipe size to the storage buffer. <B>CreatePipe</B> also creates handles that the process uses to read from and write to the buffer in subsequent calls to the <B>ReadFile</B> and <B>WriteFile </B>functions. </P>

<P>To read from the pipe, a process uses the read handle in a call to the<B> ReadFile </B>function.<B> ReadFile</B> returns when one of the following is true: a write operation completes on the write end of the pipe, the number of bytes requested has been read, or an error occurs.</P>

<P>When a process uses <B>WriteFile</B> to write to an anonymous pipe, the write operation is not completed until all bytes are written. If the pipe buffer is full before all bytes are written, <B>WriteFile</B> does not return until another process or thread uses <B>ReadFile</B> to make more buffer space available. </P>

<P><B>See Also</B></P>

<P><A HREF="cjnd8p.htm"><B>ReadFile</B></A>, <A HREF="be53kg.htm"><B>SECURITY_ATTRIBUTES</B></A>, <A HREF="g0sox_.htm"><B>WriteFile</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

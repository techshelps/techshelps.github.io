<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Beginning the Tree-View Drag Operation</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="6zh7i4"></A><B>Beginning the Tree-View Drag Operation</B></P>

<P>A tree-view control sends the parent window a <A HREF="2mlkc5e.htm">TVN_BEGINDRAG</A> (or <A HREF="1fn._21.htm">TVN_BEGINRDRAG</A>) notification message whenever the user starts to drag an item. The parent window receives the notification in the form of a <A HREF="1mzt7br.htm">WM_NOTIFY</A> message whose <I>lParam</I> parameter is the address of an <A HREF="53ii_3v.htm"><B>NM_TREEVIEW</B></A> structure. The members of this structure include the screen coordinates of the mouse cursor and a <A HREF="2ihaq35.htm"><B>TV_ITEM</B></A> structure that contains information about the item to be dragged.</P>

<P>The following example shows how to process the WM_NOTIFY message to obtain TVN_BEGINDRAG.</P>

<P>case WM_NOTIFY:  </P>

<P>switch (((LPNMHDR) lParam)-&gt;code) { </P>

<P>case TVN_BEGINDRAG: </P>

<P>Main_OnBeginDrag(hwndTV,    // application-defined function </P>

<P>(NM_TREEVIEW *) lParam); </P>

<P>break; </P>

<P>. </P>

<P>.  // Handle other notifications here. </P>

<P>. </P>

<P>} </P>

<P>break; </P>

<P></P>

<P>Beginning the drag operation involves using the <A HREF="12ohw6o.htm"><B>ImageList_BeginDrag</B></A> function. The function's parameters include the handle of the image list containing the image to use during the drag operation and the index of the image. You can either provide your own image list and image, or you can have the tree-view control create them for you by using the <A HREF="ltyrp_.htm">TVM_CREATEDRAGIMAGE</A> message. </P>

<P>Because the drag image replaces the mouse cursor for the duration of the drag operation, <B>ImageList_BeginDrag</B> requires you to specify a hot spot within the image. The coordinates of the hot spot are relative to the upper left corner of the image. <B>ImageList_BeginDrag</B> also requires you to specify the initial location of the drag image. An application typically sets the initial location so that the hot spot of the drag image corresponds to that of the mouse cursor at the time the user began the drag operation.</P>

<P>The following function demonstrates how to begin dragging a tree-view item. It uses the drag image provided by the tree-view control and obtains the bounding rectangle of the item to determine the appropriate point for the hot spot. (The dimensions of the bounding rectangle are the same as those of the image.) Note that the bounding rectangle does not account for the indentation of child items. For this reason, the function adds the amount of indentation to the x-coordinate of the hot spot. </P>

<P>The function captures mouse input, causing mouse messages to be sent to the parent window. The parent window needs the subsequent <A HREF="1mq_iq2.htm">WM_MOUSEMOVE</A> messages to determine where to drag the image and the <A HREF="yl9yek.htm">WM_LBUTTONUP</A> message to determine when to end the drag operation.</P>

<P>// Main_OnBeginDrag - begins dragging an item in a tree-view control.  </P>

<P>// hwndTV - handle of the image list </P>

<P>// lpnmtv - address of information about the item being dragged </P>

<P>void Main_OnBeginDrag(HWND hwndTV, NM_TREEVIEW *lpnmtv) </P>

<P>{ </P>

<P>HIMAGELIST himl;    // handle of image list </P>

<P>RECT rcItem;        // bounding rectangle of item </P>

<P>DWORD dwLevel;      // heading level of item </P>

<P>DWORD dwIndent;     // amount that child items are indented </P>

<P></P>

<P>// Tell the tree-view control to create an image to use </P>

<P>// for dragging. </P>

<P>himl = TreeView_CreateDragImage(hwndTV, lpnmtv-&gt;itemNew.hItem); </P>

<P></P>

<P>// Get the bounding rectangle of the item being dragged. </P>

<P>TreeView_GetItemRect(hwndTV, lpnmtv-&gt;itemNew.hItem, &amp;rcItem, TRUE); </P>

<P></P>

<P>// Get the heading level and the amount that the child items are </P>

<P>// indented. </P>

<P>dwLevel = lpnmtv-&gt;itemNew.lParam; </P>

<P>dwIndent = (DWORD) SendMessage(hwndTV, TVM_GETINDENT, 0, 0); </P>

<P></P>

<P>// Start the drag operation. </P>

<P>ImageList_BeginDrag(himl, 0, 0, 0); </P>

<P></P>

<P>// Hide the mouse cursor, and direct mouse input to the </P>

<P>// parent window. </P>

<P>ShowCursor(FALSE); </P>

<P>SetCapture(GetParent(hwndTV)); </P>

<P>g_fDragging = TRUE; </P>

<P>return; </P>

<P>} </P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

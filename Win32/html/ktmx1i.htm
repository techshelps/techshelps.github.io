<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Using an Exception Handler</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="ktmx1i"></A><B>Using an Exception Handler</B></P>

<P>The following example shows a version of the standard C <B>strcpy</B> function that can handle an invalid pointer and return NULL if one is encountered. </P>

<P>Note that this exception handler is intended to handle an access-violation exception, but is inappropriate if some other type of exception occurs. Therefore, the filter expression in the example uses the <A HREF="x5ka_k.htm"><B>GetExceptionCode</B></A> function to check the exception type before executing the handler. This enables the system to continue its search for an appropriate handler if some other type of exception occurs. </P>

<P>Note also that there is no problem with using a <B>return</B> statement in the <B>try</B> block of a <B>try</B>-<B>except</B> statement. This differs from the use of <B>return</B> in the <B>try</B> block of a <B>try</B>-<B>finally</B> statement, which causes an abnormal termination of the <B>try</B> block. </P>

<P>LPTSTR SafeStrcpy(LPTSTR lpszString1, LPTSTR lpszString2) {  </P>

<P>try { </P>

<P>return strcpy(string1, string2); </P>

<P>} </P>

<P>except (GetExceptionCode() == EXCEPTION_ACCESS_VIOLATION ? </P>

<P>EXCEPTION_EXECUTE_HANDLER : </P>

<P>EXCEPTION_CONTINUE_SEARCH ) { </P>

<P>return NULL; </P>

<P>} </P>

<P>} </P>

<P></P>

<P>The following example shows the interaction of nested <B>try</B>-<B>finally</B> and <B>try</B>-<B>except</B> statements. The <A HREF="3wwjv5.htm"><B>RaiseException</B></A> function causes an exception in the guarded body of a <B>try</B>-<B>finally</B> termination handler that is inside the guarded body of a <B>try</B>-<B>except</B> exception handler. The exception causes the system to evaluate the FilterFunction function, whose return value in turn causes the exception handler to be invoked. However, before the exception-handler block is executed, the <B>finally</B> block of the termination handler is executed because the flow of control has left the <B>try</B> block of the termination handler. </P>

<P></P>

<P>DWORD FilterFunction() { </P>

<P>printf("1 ");                     // printed first </P>

<P>return EXCEPTION_EXECUTE_HANDLER; </P>

<P>} </P>

<P></P>

<P>VOID main(VOID) { </P>

<P>try { </P>

<P>try { </P>

<P>RaiseException(1,         // exception code </P>

<P>0,                    // continuable exception </P>

<P>0, NULL);             // no arguments </P>

<P>} </P>

<P>finally { </P>

<P>printf("2 ")              // this is printed second </P>

<P>} </P>

<P>} </P>

<P>except ( FilterFunction() ) { </P>

<P>printf("3\n");                // this is printed last </P>

<P>} </P>

<P>} </P>

<P></P>

</BODY>
</HTML>

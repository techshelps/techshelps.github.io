<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>CreateNamedPipe</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="21dzyt"></A><B>CreateNamedPipe  <A HREF="8kx73u.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="qxj_so.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="1p87g2.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>CreateNamedPipe</B> function creates an instance of a named pipe and returns a handle for subsequent pipe operations. A named pipe server process uses this function either to create the first instance of a specific named pipe and establish its basic attributes or to create a new instance of an existing named pipe. </P>

<P><B>HANDLE CreateNamedPipe(</B></P>

<TABLE cols=2 width=613>

<TR VALIGN="top">
<TD width=56%><B>LPCTSTR</B> <I>lpName</I><B>,</B></TD>
<TD width=44%>// pointer to pipe name </TD>
</TR>

<TR VALIGN="top">
<TD width=56%><B>    DWORD</B> <I>dwOpenMode</I><B>,</B></TD>
<TD width=44%>// pipe open mode </TD>
</TR>

<TR VALIGN="top">
<TD width=56%><B>    DWORD</B> <I>dwPipeMode</I><B>,</B></TD>
<TD width=44%>// pipe-specific modes </TD>
</TR>

<TR VALIGN="top">
<TD width=56%><B>    DWORD</B> <I>nMaxInstances</I><B>,</B></TD>
<TD width=44%>// maximum number of instances  </TD>
</TR>

<TR VALIGN="top">
<TD width=56%><B>    DWORD</B> <I>nOutBufferSize</I><B>,</B></TD>
<TD width=44%>// output buffer size, in bytes </TD>
</TR>

<TR VALIGN="top">
<TD width=56%><B>    DWORD</B> <I>nInBufferSize</I><B>,</B></TD>
<TD width=44%>// input buffer size, in bytes </TD>
</TR>

<TR VALIGN="top">
<TD width=56%><B>    DWORD</B> <I>nDefaultTimeOut</I><B>,</B></TD>
<TD width=44%>// time-out time, in milliseconds </TD>
</TR>

<TR VALIGN="top">
<TD width=56%><B>    LPSECURITY_ATTRIBUTES</B> <I>lpSecurityAttributes</I> </TD>
<TD width=44%>// pointer to security attributes structure </TD>
</TR>

<TR VALIGN="top">
<TD width=56%><B>   );</B></TD>
<TD width=44%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>lpName</I></P>

<P>Points to the null-terminated string that uniquely identifies the pipe. The string must have the following form: </P>

<P></P>

<P><B>\\.\pipe\</B><I>pipename</I></P>

<P>The <I>pipename</I> part of the name can include any character other than a backslash, including numbers and special characters. The entire pipe name string can be up to 256 characters long. Pipe names are not case sensitive. </P>

<P><I>dwOpenMode</I></P>

<P>Specifies the pipe access mode, the overlapped mode, the write-through mode, and the security access mode of the pipe handle. </P>

<P>This parameter must specify one of the following pipe access mode flags. The same mode must be specified for each instance of the pipe: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=42%><B>Mode</B></TD>
<TD width=58%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=42%>PIPE_ACCESS_DUPLEX</TD>
<TD width=58%>The pipe is bidirectional; both server and client processes can read from and write to the pipe. This mode gives the server the equivalent of GENERIC_READ | GENERIC_WRITE access to the pipe. The client can specify GENERIC_READ or GENERIC_WRITE, or both, when it connects to the pipe using the <A HREF="xn35yd.htm"><B>CreateFile</B></A> function.</TD>
</TR>

<TR VALIGN="top">
<TD width=42%>PIPE_ACCESS_INBOUND</TD>
<TD width=58%>The flow of data in the pipe goes from client to server only. This mode gives the server the equivalent of GENERIC_READ access to the pipe. The client must specify GENERIC_WRITE access when connecting to the pipe.</TD>
</TR>

<TR VALIGN="top">
<TD width=42%>PIPE_ACCESS_OUTBOUND</TD>
<TD width=58%>The flow of data in the pipe goes from server to client only. This mode gives the server the equivalent of GENERIC_WRITE access to the pipe. The client must specify GENERIC_READ access when connecting to the pipe.</TD>
</TR>
</TABLE><BR>

<P></P>

<P>This parameter can also include either or both of the following flags, which enable write-through mode and overlapped mode. These modes can be different for different instances of the same pipe. </P>

<TABLE cols=6>

<TR VALIGN="top">
<TD colspan=2 width=14%><B>Mode</B></TD>
<TD colspan=3 width=73%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD colspan=3 width=16%>FILE_FLAG_WRITE_THROUGH</TD>
<TD colspan=3 width=84%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=12%>&nbsp;</TD>
<TD colspan=3 width=63%>Write-through mode is enabled. This mode affects only write operations on byte-type pipes and, then, only when the client and server processes are on different computers. If this mode is enabled, functions writing to a named pipe do not return until the data written is transmitted across the network and is in the pipe's buffer on the remote computer. If this mode is not enabled, the system enhances the efficiency of network operations by buffering data until a minimum number of bytes accumulate or until a maximum time elapses.</TD>
</TR>

<TR VALIGN="top">
<TD colspan=3 width=16%>FILE_FLAG_OVERLAPPED</TD>
<TD colspan=3 width=84%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=12%>&nbsp;</TD>
<TD colspan=3 width=63%>Overlapped mode is enabled. If this mode is enabled, functions performing read, write, and connect operations that may take a significant time to be completed can return immediately. This mode enables the thread that started the operation to perform other operations while the time-consuming operation executes in the background. For example, in overlapped mode, a thread can handle simultaneous input and output (I/O) operations on multiple instances of a pipe or perform simultaneous read and write operations on the same pipe handle. If overlapped mode is not enabled, functions performing read, write, and connect operations on the pipe handle do not return until the operation is finished. The <A HREF="fm7wz7.htm"><B>ReadFileEx</B></A> and <A HREF="12g2wey.htm"><B>WriteFileEx</B></A> functions can only be used with a pipe handle in overlapped mode. The <A HREF="cjnd8p.htm"><B>ReadFile</B></A>, <A HREF="g0sox_.htm"><B>WriteFile</B></A>, <A HREF="ksa3sm.htm"><B>ConnectNamedPipe</B></A>, and <A HREF="1nuxhmk.htm"><B>TransactNamedPipe</B></A> functions can execute either synchronously or as overlapped operations.</TD>
</TR>
</TABLE><BR>

<P></P>

<P>This parameter can include any combination of the following security access mode flags. These modes can be different for different instances of the same pipe. They can be specified without concern for what other <I>dwOpenMode</I> modes have been specified. </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=47%><B>Mode</B></TD>
<TD width=53%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=47%>WRITE_DAC</TD>
<TD width=53%>The caller will have write access to the named pipe's discretionary access control list (ACL).</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>WRITE_OWNER</TD>
<TD width=53%>The caller will have write access to the named pipe's owner.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>ACCESS_SYSTEM_SECURITY</TD>
<TD width=53%>The caller will have write access to the named pipe's system ACL.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><I>dwPipeMode</I></P>

<P>Specifies the type, read, and wait modes of the pipe handle. </P>

<P>One of the following type mode flags can be specified. The same type mode must be specified for each instance of the pipe. If you specify zero, the parameter defaults to byte-type mode. </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=41%><B>Mode</B></TD>
<TD width=59%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=41%>PIPE_TYPE_BYTE</TD>
<TD width=59%>Data is written to the pipe as a stream of bytes. This mode cannot be used with PIPE_READMODE_MESSAGE.</TD>
</TR>

<TR VALIGN="top">
<TD width=41%>PIPE_TYPE_MESSAGE</TD>
<TD width=59%>Data is written to the pipe as a stream of messages. This mode can be used with either PIPE_READMODE_MESSAGE or PIPE_READMODE_BYTE.</TD>
</TR>
</TABLE><BR>

<P></P>

<P>One of the following read mode flags can be specified. Different instances of the same pipe can specify different read modes. If you specify zero, the parameter defaults to byte-read mode. </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=47%><B>Mode</B></TD>
<TD width=53%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=47%>PIPE_READMODE_BYTE</TD>
<TD width=53%>Data is read from the pipe as a stream of bytes. This mode can be used with either PIPE_TYPE_MESSAGE or PIPE_TYPE_BYTE.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>PIPE_READMODE_MESSAGE</TD>
<TD width=53%>Data is read from the pipe as a stream of messages. This mode can be only used if PIPE_TYPE_MESSAGE is also specified.</TD>
</TR>
</TABLE><BR>

<P></P>

<P>One of the following wait mode flags can be specified. Different instances of the same pipe can specify different wait modes. If you specify zero, the parameter defaults to blocking mode. </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=26%><B>Mode</B></TD>
<TD width=74%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=26%>PIPE_WAIT</TD>
<TD width=74%>Blocking mode is enabled. When the pipe handle is specified in the <A HREF="cjnd8p.htm"><B>ReadFile</B></A>, <A HREF="g0sox_.htm"><B>WriteFile</B></A>, or <A HREF="ksa3sm.htm"><B>ConnectNamedPipe</B></A> function, the operations are not completed until there is data to read, all data is written, or a client is connected. Use of this mode can mean waiting indefinitely in some situations for a client process to perform an action.</TD>
</TR>

<TR VALIGN="top">
<TD width=26%>PIPE_NOWAIT</TD>
<TD width=74%>Nonblocking mode is enabled. In this mode, <B>ReadFile</B>, <B>WriteFile</B>, and <B>ConnectNamedPipe</B> always return immediately. Note that nonblocking mode is supported for compatibility with Microsoft LAN Manager version 2.0 and should not be used to achieve asynchronous I/O with named pipes.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><I>nMaxInstances</I></P>

<P>Specifies the maximum number of instances that can be created for this pipe. The same number must be specified for all instances. Acceptable values are in the range 1 through PIPE_UNLIMITED_INSTANCES. If this parameter is PIPE_UNLIMITED_INSTANCES, the number of pipe instances that can be created is limited only by the availability of system resources. </P>

<P><I>nOutBufferSize</I></P>

<P>Specifies the number of bytes to reserve for the output buffer. For a discussion on sizing named pipe buffers, see the following Remarks section. </P>

<P><I>nInBufferSize</I></P>

<P>Specifies the number of bytes to reserve for the input buffer. For a discussion on sizing named pipe buffers, see the following Remarks section. </P>

<P><I>nDefaultTimeOut</I></P>

<P>Specifies the default time-out value, in milliseconds, if the <A HREF="1xsezn8.htm"><B>WaitNamedPipe</B></A> function specifies NMPWAIT_USE_DEFAULT_WAIT. Each instance of a named pipe must specify the same value. </P>

<P><I>lpSecurityAttributes</I></P>

<P>Pointer to a <A HREF="be53kg.htm"><B>SECURITY_ATTRIBUTES</B></A> structure that specifies a security descriptor for the new named pipe and determines whether child processes can inherit the returned handle. If <I>lpSecurityAttributes</I> is NULL, the named pipe gets a default security descriptor and the handle cannot be inherited.</P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is a handle to the server end of a named pipe instance. </P>

<P>If the function fails, the return value is INVALID_HANDLE_VALUE. To get extended error information, call <A HREF="11c2vs7.htm"><B>GetLastError</B></A>. The return value is ERROR_INVALID_PARAMETER if <I>nMaxInstances</I> is greater than PIPE_UNLIMITED_INSTANCES. </P>

<P><B>Remarks</B></P>

<P>To create an instance of a named pipe by using <B>CreateNamedPipe</B>, the user must have FILE_CREATE_PIPE_INSTANCE access to the named pipe object. If a new named pipe is being created, the access control list (ACL) from the security attributes parameter defines the discretionary access control for the named pipe. </P>

<P>All instances of a named pipe must specify the same pipe type (byte-type or message-type), pipe access (duplex, inbound, or outbound), instance count, and time-out value. If different values are used, this function fails and <B>GetLastError</B> returns ERROR_ACCESS_DENIED. </P>

<P>The input and output buffer sizes are advisory. The actual buffer size reserved for each end of the named pipe is either the system default, the system minimum or maximum, or the specified size rounded up to the next allocation boundary. </P>

<P>An instance of a named pipe is always deleted when the last handle to the instance of the named pipe is closed. </P>

<P><B>See Also</B></P>

<P><A HREF="ksa3sm.htm"><B>ConnectNamedPipe</B></A>, <A HREF="xn35yd.htm"><B>CreateFile</B></A>, <A HREF="cjnd8p.htm"><B>ReadFile</B></A>, <A HREF="fm7wz7.htm"><B>ReadFileEx</B></A>, <A HREF="be53kg.htm"><B>SECURITY_ATTRIBUTES</B></A>, <A HREF="1nuxhmk.htm"><B>TransactNamedPipe</B></A>, <A HREF="1xsezn8.htm"><B>WaitNamedPipe</B></A>, <A HREF="g0sox_.htm"><B>WriteFile</B></A>, <A HREF="12g2wey.htm"><B>WriteFileEx</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>TabbedTextOut</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="2mcwnzm"></A><B>TabbedTextOut  <A HREF=".vjw.3.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="4jd_z5i.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="1xkvu5n.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>TabbedTextOut</B> function writes a character string at a specified location, expanding tabs to the values specified in an array of tab-stop positions. Text is written in the currently selected font. </P>

<P><B>LONG TabbedTextOut(</B></P>

<TABLE cols=2 width=465>

<TR VALIGN="top">
<TD width=46%><B>HDC</B> <I>hDC</I><B>,</B></TD>
<TD width=54%>// handle of device context </TD>
</TR>

<TR VALIGN="top">
<TD width=46%><B>    int</B> <I>X</I><B>,</B></TD>
<TD width=54%>// x-coordinate of starting position </TD>
</TR>

<TR VALIGN="top">
<TD width=46%><B>    int</B> <I>Y</I><B>,</B></TD>
<TD width=54%>// y-coordinate of starting position </TD>
</TR>

<TR VALIGN="top">
<TD width=46%><B>    LPCTSTR</B> <I>lpString</I><B>,</B></TD>
<TD width=54%>// address of string </TD>
</TR>

<TR VALIGN="top">
<TD width=46%><B>    int</B> <I>nCount</I><B>,</B></TD>
<TD width=54%>// number of characters in string </TD>
</TR>

<TR VALIGN="top">
<TD width=46%><B>    int</B> <I>nTabPositions</I><B>,</B></TD>
<TD width=54%>// number of tabs in array </TD>
</TR>

<TR VALIGN="top">
<TD width=46%><B>    LPINT</B> <I>lpnTabStopPositions</I><B>,</B></TD>
<TD width=54%>// address of array for tab positions  </TD>
</TR>

<TR VALIGN="top">
<TD width=46%><B>    int</B> <I>nTabOrigin</I> </TD>
<TD width=54%>// x-coordinate for tab expansion </TD>
</TR>

<TR VALIGN="top">
<TD width=46%><B>   );</B></TD>
<TD width=54%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hDC</I></P>

<P>Identifies the device context. </P>

<P><I>X</I></P>

<P>Specifies the x-coordinate of the starting point of the string, in logical units. </P>

<P><I>Y</I></P>

<P>Specifies the y-coordinate of the starting point of the string, in logical units. </P>

<P><I>lpString</I></P>

<P>Points to the character string to draw. The string does not need to be zero-terminated, since <I>nCount</I> specifies the length of the string. </P>

<P><I>nCount</I></P>

<P>Specifies the number of characters in the string. </P>

<P><I>nTabPositions</I></P>

<P>Specifies the number of values in the array of tab-stop positions. </P>

<P><I>lpnTabStopPositions</I></P>

<P>Points to an array containing the tab-stop positions, in device units. The tab stops must be sorted in increasing order; the smallest x-value should be the first item in the array. </P>

<P><B>Windows 95:</B> A tab stop can be specified as a negative value, which causes text to be right-aligned on the tab stop rather than left-aligned. </P>

<P><I>nTabOrigin</I></P>

<P>Specifies the x-coordinate of the starting position from which tabs are expanded, in logical units. </P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is the dimensions, in logical units, of the string. The height is in the high-order word and the width is in the low-order word. </P>

<P><B>Remarks</B></P>

<P>If the <I>nTabPositions</I> parameter is zero and the <I>lpnTabStopPositions</I> parameter is NULL, tabs are expanded to eight times the average character width. </P>

<P>If <I>nTabPositions</I> is 1, the tab stops are separated by the distance specified by the first value in the <I>lpnTabStopPositions</I> array. </P>

<P>If the <I>lpnTabStopPositions</I> array contains more than one value, a tab stop is set for each value in the array, up to the number specified by <I>nTabPositions</I>. </P>

<P>The <I>nTabOrigin</I> parameter allows an application to call the <B>TabbedTextOut</B> function several times for a single line. If the application calls <B>TabbedTextOut</B> more than once with the <I>nTabOrigin</I> set to the same value each time, the function expands all tabs relative to the position specified by <I>nTabOrigin</I>. </P>

<P>By default, the current position is not used or updated by the <B>TabbedTextOut</B> function. If an application needs to update the current position when it calls <B>TabbedTextOut</B>, the application can call the <B>SetTextAlign</B> function with the <I>wFlags</I> parameter set to TA_UPDATECP. When this flag is set, Windows ignores the <I>X</I> and <I>Y</I> parameters on subsequent calls to the <B>TabbedTextOut</B> function, using the current position instead. </P>

<P><B>See Also</B></P>

<P><A HREF="g6q7on.htm"><B>DrawText</B></A>, <A HREF="80sybt.htm"><B>GetTabbedTextExtent</B></A>, <A HREF="xhskts.htm"><B>GrayString</B></A>, <A HREF="237ozu5.htm"><B>SetTextAlign</B></A>, <A HREF="mwueko.htm"><B>TextOut</B></A> </P>

<P></P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

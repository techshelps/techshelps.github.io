<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>WNDCLASS</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="1onjoi2"></A><B>WNDCLASS  <A HREF="28j7fcr.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="2lm.0ad.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="1auc_lt.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>WNDCLASS</B> structure contains the window class attributes that are registered by the <A HREF="6v_00hu.htm"><B>RegisterClass</B></A> function. </P>

<P>typedef struct _WNDCLASS {    // wc  </P>

<P>UINT    style; </P>

<P>WNDPROC lpfnWndProc; </P>

<P>int     cbClsExtra; </P>

<P>int     cbWndExtra; </P>

<P>HANDLE  hInstance; </P>

<P>HICON   hIcon; </P>

<P>HCURSOR hCursor; </P>

<P>HBRUSH  hbrBackground; </P>

<P>LPCTSTR lpszMenuName; </P>

<P>LPCTSTR lpszClassName; </P>

<P>} WNDCLASS; </P>

<P></P>

<P><B>Members</B></P>

<P><B>style</B></P>

<P>Specifies the class style(s). Styles can be combined by using the bitwise OR (|) operator. This member can be any combination of the following values: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=42%><B>Value</B></TD>
<TD width=58%><B>Action</B></TD>
</TR>

<TR VALIGN="top">
<TD width=42%>CS_BYTEALIGNCLIENT</TD>
<TD width=58%>Aligns the window's client area on the byte boundary (in the x direction) to enhance performance during drawing operations. This style affects the width of the window and its horizontal position on the display.</TD>
</TR>

<TR VALIGN="top">
<TD width=42%>CS_BYTEALIGNWINDOW</TD>
<TD width=58%>Aligns a window on a byte boundary (in the x direction) to enhance performance during operations that involve moving or sizing the window. This style affects the width of the window and its horizontal position on the display.</TD>
</TR>

<TR VALIGN="top">
<TD width=42%>CS_CLASSDC</TD>
<TD width=58%>Allocates one device context to be shared by all windows in the class. Because window classes are process specific, it is possible for multiple threads of a multithreaded application to create a window of the same class. It is also possible for the threads to attempt to use the device context simultaneously. When this happens, the operating system allows only one of the threads to successfully finish its drawing operation.</TD>
</TR>

<TR VALIGN="top">
<TD width=42%>CS_DBLCLKS</TD>
<TD width=58%>Sends double-click messages to the window procedure when the user double-clicks the mouse while the cursor is within a window belonging to the class.</TD>
</TR>

<TR VALIGN="top">
<TD width=42%>CS_GLOBALCLASS</TD>
<TD width=58%>Allows an application to create a window of the class regardless of the value of the <I>hInstance</I> parameter passed to the <A HREF="we1r5q.htm"><B>CreateWindow</B></A> or <A HREF="rpk.pc.htm"><B>CreateWindowEx</B></A> function. If you do not specify this style, the <I>hInstance</I> parameter passed to the <B>CreateWindow</B> (or <B>CreateWindowEx</B>) function must be the same as the <I>hInstance</I> parameter passed to the <A HREF="6v_00hu.htm"><B>RegisterClass</B></A> function.</TD>
</TR>

<TR VALIGN="top">
<TD width=42%>&nbsp;</TD>
<TD width=58%>You can create a global class by creating the window class in a dynamic-link library (DLL) and listing the name of the DLL in the registry under the following keys:</TD>
</TR>

<TR VALIGN="top">
<TD width=42%> </TD>
<TD width=58%><B>HKEY_LOCAL_MACHINE</B>\<B>Software<BR>
</B>\<B>Microsoft</B>\<B>Windows NT</B>\<BR>
<B>CurrentVersion</B>\<B>Windows</B>\<B>APPINIT_DLLS</B></TD>
</TR>

<TR VALIGN="top">
<TD width=42%>&nbsp;</TD>
<TD width=58%>Whenever a process starts, the operating system loads the specified DLLs in the context of the newly started process before calling the <B>main</B> function in that process. The DLL must register the class during its initialization procedure and must specify the CS_GLOBALCLASS style.</TD>
</TR>

<TR VALIGN="top">
<TD width=42%>CS_HREDRAW</TD>
<TD width=58%>Redraws the entire window if a movement or size adjustment changes the width of the client area.</TD>
</TR>

<TR VALIGN="top">
<TD width=42%>CS_NOCLOSE</TD>
<TD width=58%>Disables the Close command on the System menu.</TD>
</TR>

<TR VALIGN="top">
<TD width=42%>CS_OWNDC</TD>
<TD width=58%>Allocates a unique device context for each window in the class.</TD>
</TR>

<TR VALIGN="top">
<TD width=42%>CS_PARENTDC</TD>
<TD width=58%>Sets the clipping region of the child window to that of the parent window so that the child can draw on the parent. A window with the CS_PARENTDC style bit receives a regular device context from the system's cache of device contexts. It does not give the child the parent's device context or device context settings. Specifying CS_PARENTDC enhances an application's performance. </TD>
</TR>

<TR VALIGN="top">
<TD width=42%>CS_SAVEBITS</TD>
<TD width=58%>Saves, as a bitmap, the portion of the screen image obscured by a window. Windows uses the saved bitmap to re-create the screen image when the window is removed. Windows displays the bitmap at its original location and does not send <A HREF="f55xz2.htm">WM_PAINT</A> messages to windows obscured by the window if the memory used by the bitmap has not been discarded and if other screen actions have not invalidated the stored image. This style is useful for small windows (for example, menus or dialog boxes) that are displayed briefly and then removed before other screen activity takes place. This style increases the time required to display the window, because the operating system must first allocate memory to store the bitmap.</TD>
</TR>

<TR VALIGN="top">
<TD width=42%>CS_VREDRAW</TD>
<TD width=58%>Redraws the entire window if a movement or size adjustment changes the height of the client area.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>lpfnWndProc</B></P>

<P>Points to the window procedure. For more information, see <A HREF="3nlh53.htm"><B>WindowProc</B></A>. </P>

<P><B>cbClsExtra</B></P>

<P>Specifies the number of extra bytes to allocate following the window-class structure. The operating system initializes the bytes to zero. </P>

<P><B>cbWndExtra</B></P>

<P>Specifies the number of extra bytes to allocate following the window instance. The operating system initializes the bytes to zero. If an application uses the <B>WNDCLASS</B> structure to register a dialog box created by using the <B>CLASS</B> directive in the resource file, it must set this member to DLGWINDOWEXTRA. </P>

<P><B>hInstance</B></P>

<P>Identifies the instance that the window procedure of this class is within. </P>

<P><B>hIcon</B></P>

<P>Identifies the class icon. This member must be a handle of an icon resource. If this member is NULL, an application must draw an icon whenever the user minimizes the application's window. </P>

<P><B>hCursor</B></P>

<P>Identifies the class cursor. This member must be a handle of a cursor resource. If this member is NULL, an application must explicitly set the cursor shape whenever the mouse moves into the application's window. </P>

<P><B>hbrBackground</B></P>

<P>Identifies the class background brush. This member can be a handle to the physical brush to be used for painting the background, or it can be a color value. A color value must be one of the following standard system colors (the value 1 must be added to the chosen color). If a color value is given, you must convert it to one of the following <B>HBRUSH</B> types: </P>

<P>COLOR_ACTIVEBORDER<BR>
COLOR_ACTIVECAPTION<BR>
COLOR_APPWORKSPACE<BR>
COLOR_BACKGROUND<BR>
COLOR_BTNFACE<BR>
COLOR_BTNSHADOW<BR>
COLOR_BTNTEXT<BR>
COLOR_CAPTIONTEXT<BR>
COLOR_GRAYTEXT<BR>
COLOR_HIGHLIGHT<BR>
COLOR_HIGHLIGHTTEXT<BR>
COLOR_INACTIVEBORDER<BR>
COLOR_INACTIVECAPTION<BR>
COLOR_MENU<BR>
COLOR_MENUTEXT<BR>
COLOR_SCROLLBAR<BR>
COLOR_WINDOW<BR>
COLOR_WINDOWFRAME<BR>
COLOR_WINDOWTEXT</P>

<P></P>

<P>The operating system automatically deletes class background brushes when the class is freed. An application should not delete these brushes, because a class may be used by multiple instances of an application. </P>

<P>When this member is NULL, an application must paint its own background whenever it is requested to paint in its client area. To determine whether the background must be painted, an application can either process the WM_ERASEBKGND message or test the <B>fErase</B> member of the <A HREF="hrqqxj.htm"><B>PAINTSTRUCT</B></A> structure filled by the <A HREF="f7ytuy.htm"><B>BeginPaint</B></A> function. </P>

<P><B>lpszMenuName</B></P>

<P>Points to a null-terminated character string that specifies the resource name of the class menu, as the name appears in the resource file. If you use an integer to identify the menu, use the <A HREF="xfoy9_.htm"><B>MAKEINTRESOURCE</B></A> macro. If this member is NULL, windows belonging to this class have no default menu. </P>

<P><B>lpszClassName</B></P>

<P>Points to a null-terminated string or is an atom. If this parameter is an atom, it must be a global atom created by a previous call to the <B>GlobalAddAtom</B> function. The atom, a 16-bit value, must be in the low-order word of <B>lpszClassName</B>; the high-order word must be zero. </P>

<P>If <B>lpszClassName</B> is a string, it specifies the window class name. </P>

<P></P>

<P><B>See Also</B></P>

<P><A HREF="f7ytuy.htm"><B>BeginPaint</B></A>, <A HREF="we1r5q.htm"><B>CreateWindow</B></A>, <A HREF="rpk.pc.htm"><B>CreateWindowEx</B></A>, <A HREF="4f0b0z.htm"><B>GetDC</B></A>, <A HREF="1qh2cm4.htm"><B>GlobalAddAtom</B></A>, <A HREF="xfoy9_.htm"><B>MAKEINTRESOURCE</B></A>, <A HREF="hrqqxj.htm"><B>PAINTSTRUCT</B></A>, <A HREF="6v_00hu.htm"><B>RegisterClass</B></A>, <A HREF="2d0j0kl.htm"><B>WNDCLASSEX</B></A>, <A HREF="3nlh53.htm"><B>WindowProc</B></A>, <A HREF="f55xz2.htm">WM_PAINT</A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

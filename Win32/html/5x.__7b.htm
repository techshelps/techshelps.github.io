<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>ChangeServiceConfig</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="5x.__7b"></A><B>ChangeServiceConfig  <A HREF="e42lfy.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="12c8zrk.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="we4jtq.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>ChangeServiceConfig</B> function changes the configuration parameters of a service. </P>

<P><B>BOOL ChangeServiceConfig(</B></P>

<TABLE cols=2 width=521>

<TR VALIGN="top">
<TD width=45%><B>SC_HANDLE</B> <I>hService</I><B>,</B></TD>
<TD width=55%>// handle to service </TD>
</TR>

<TR VALIGN="top">
<TD width=45%><B>    DWORD</B> <I>dwServiceType</I><B>,</B></TD>
<TD width=55%>// type of service </TD>
</TR>

<TR VALIGN="top">
<TD width=45%><B>    DWORD</B> <I>dwStartType</I><B>,</B></TD>
<TD width=55%>// when to start service </TD>
</TR>

<TR VALIGN="top">
<TD width=45%><B>    DWORD</B> <I>dwErrorControl</I><B>,</B></TD>
<TD width=55%>// severity if service fails to start </TD>
</TR>

<TR VALIGN="top">
<TD width=45%><B>    LPCTSTR</B> <I>lpBinaryPathName</I><B>,</B></TD>
<TD width=55%>// pointer to service binary file name </TD>
</TR>

<TR VALIGN="top">
<TD width=45%><B>    LPCTSTR</B> <I>lpLoadOrderGroup</I><B>,</B></TD>
<TD width=55%>// pointer to load ordering group name </TD>
</TR>

<TR VALIGN="top">
<TD width=45%><B>    LPDWORD</B> <I>lpdwTagId</I><B>,</B></TD>
<TD width=55%>// pointer to variable to get tag identifier </TD>
</TR>

<TR VALIGN="top">
<TD width=45%><B>    LPCTSTR</B> <I>lpDependencies</I><B>,</B></TD>
<TD width=55%>// pointer to array of dependency names </TD>
</TR>

<TR VALIGN="top">
<TD width=45%><B>    LPCTSTR</B> <I>lpServiceStartName</I><B>,</B></TD>
<TD width=55%>// pointer to account name of service </TD>
</TR>

<TR VALIGN="top">
<TD width=45%><B>    LPCTSTR</B> <I>lpPassword</I><B>,</B></TD>
<TD width=55%>// pointer to password for service account  </TD>
</TR>

<TR VALIGN="top">
<TD width=45%><B>    LPCTSTR</B> <I>lpDisplayName</I> </TD>
<TD width=55%>// pointer to display name </TD>
</TR>

<TR VALIGN="top">
<TD width=45%><B>   );</B></TD>
<TD width=55%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hService</I></P>

<P>Identifies the service. This handle is returned by the <A HREF="20gsky6.htm"><B>OpenService</B></A> or <A HREF="2wng26.htm"><B>CreateService</B></A> function and must have SERVICE_CHANGE_CONFIG access. </P>

<P><I>dwServiceType</I></P>

<P>A set of bit flags that specify the type of service. Specify SERVICE_NO_CHANGE if you are not changing the existing service type; otherwise, specify one of the following service type flags to indicate the service type. In addition, if you specify either of the SERVICE_WIN32 flags, you can also specify the SERVICE_INTERACTIVE_PROCESS flag to enable the service process to interact with the desktop.</P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=54%><B>Value</B></TD>
<TD width=46%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=54%>SERVICE_WIN32_OWN_PROCESS</TD>
<TD width=46%>A service type flag that specifies a Win32 service that runs in its own process.</TD>
</TR>

<TR VALIGN="top">
<TD width=54%>SERVICE_WIN32_SHARE_PROCESS</TD>
<TD width=46%>A service type flag that specifies a Win32 service that shares a process with other services.</TD>
</TR>

<TR VALIGN="top">
<TD width=54%>SERVICE_KERNEL_DRIVER</TD>
<TD width=46%>A service type flag that specifies a Windows NT device driver.</TD>
</TR>

<TR VALIGN="top">
<TD width=54%>SERVICE_FILE_SYSTEM_DRIVER</TD>
<TD width=46%>A service type flag that specifies a Windows NT file system driver.</TD>
</TR>

<TR VALIGN="top">
<TD width=54%>SERVICE_INTERACTIVE_PROCESS </TD>
<TD width=46%>A flag that enables a Win32 service process to interact with the desktop.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><I>dwStartType</I></P>

<P>Specifies when to start the service. This value can be the service type SERVICE_NO_CHANGE if the existing start type is not modified, or one of the following values can be specified: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=47%><B>Value</B></TD>
<TD width=53%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=47%>SERVICE_BOOT_START</TD>
<TD width=53%>Specifies a device driver started by the operating system loader. This value is valid only if the service type is SERVICE_KERNEL_DRIVER or SERVICE_FILE_SYSTEM_DRIVER.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>SERVICE_SYSTEM_START</TD>
<TD width=53%>Specifies a device driver started by the <B>IoInitSystem</B> function. This value is valid only if the service type is SERVICE_KERNEL_DRIVER or SERVICE_FILE_SYSTEM_DRIVER.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>SERVICE_AUTO_START</TD>
<TD width=53%>Specifies a device driver or Win32 service started by the service control manager automatically during system startup.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>SERVICE_DEMAND_START</TD>
<TD width=53%>Specifies a device driver or Win32 service started by the service control manager when a process calls the <A HREF="1osmk1p.htm"><B>StartService</B></A> function.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>SERVICE_DISABLED</TD>
<TD width=53%>Specifies a device driver or Win32 service that can no longer be started.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><I>dwErrorControl</I></P>

<P>Specifies the severity of the error if this service fails to start during startup, and determines the action taken by the startup program if failure occurs. One of the following values can be specified: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=47%><B>Value</B></TD>
<TD width=53%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=47%>SERVICE_ERROR_IGNORE</TD>
<TD width=53%>The startup (boot) program logs the error but continues the startup operation.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>SERVICE_ERROR_NORMAL</TD>
<TD width=53%>The startup program logs the error and puts up a message box pop-up but continues the startup operation.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>SERVICE_ERROR_SEVERE</TD>
<TD width=53%>The startup program logs the error. If the last-known-good configuration is being started, the startup operation continues. Otherwise, the system is restarted with the last-known-good configuration.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>SERVICE_ERROR_CRITICAL</TD>
<TD width=53%>The startup program logs the error, if possible. If the last-known-good configuration is being started, the startup operation fails. Otherwise, the system is restarted with the last-known good configuration.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>SERVICE_NO_CHANGE</TD>
<TD width=53%>The existing StartType value is not to be changed.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><I>lpBinaryPathName</I></P>

<P>Pointer to a null-terminated string that contains the fully qualified path to the service binary file. If the pointer is NULL, the path is not modified. </P>

<P><I>lpLoadOrderGroup</I></P>

<P>Pointer to a null-terminated string that names the load ordering group of which this service is a member. If the pointer is NULL, the group is not modified. If it points to an empty string, the service does not belong to a group. </P>

<P>The registry has a list of load ordering groups located at</P>

<P>HKEY_LOCAL_MACHINES\System\CurrentControlSet<BR>
\Control\ServiceGroupOrder. </P>

<P>The startup program uses this list to load groups of services in a specified order with respect to the other groups in the list. You can place a service in a group so that another service can depend on the group. </P>

<P>The order in which a service starts is determined by the following criteria: </P>

<P>1.The order of groups in the registry's load-ordering group list. Services in groups in the load-ordering group list are started first, followed by services in groups not in the load-ordering group list, and then services that do not belong to a group. </P>

<P>2.The service's dependencies listed in the <I>lpDependencies</I> parameter and the dependencies of other services dependent on the service. </P>

<P><I>lpdwTagId</I></P>

<P>Pointer to a 32-bit variable that receives a unique tag value for this service in the group specified in the <I>lpLoadOrderGroup</I> parameter. If no tag is requested, this parameter can be NULL. </P>

<P>You can use a tag for ordering service startup within a load ordering group by specifying a tag order vector in the registry located at</P>

<P>HKEY_LOCAL_MACHINE\System\CurrentControlSet<BR>
\Control\GroupOrderList. </P>

<P>Tags are only evaluated for SERVICE_KERNEL_DRIVER and SERVICE_FILE_SYSTEM_DRIVER type services that have SERVICE_BOOT_START or SERVICE_SYSTEM_START start types. </P>

<P><I>lpDependencies</I></P>

<P>Pointer to an array of null-separated names of services or load ordering groups that must start before this service. The array is double null-terminated. If the pointer is NULL, the dependencies are not modified. If it points to an empty string, the service has no dependencies. If a group name is specified, it must be prefixed by the SC_GROUP_IDENTIFIER character (defined in the WINSVC.H files) to differentiate it from a service name, because services and service groups share the same name space. Dependency on a service means that this service can only run if the service it depends on is running. Dependency on a group means that this service can run if at least one member of the group is running after an attempt to start all members of the group. </P>

<P><I>lpServiceStartName</I></P>

<P>Pointer to a null-terminated string. If NULL is specified, the name is not modified. If the service type is SERVICE_WIN32_OWN_PROCESS, this name is the account name in the form of "DomainName\Username", which the service process will be logged on as when it runs. If the account belongs to the built-in domain, ".\Username" can be specified. Services of type SERVICE_WIN32_SHARE_PROCESS are not allowed to specify an account other than LocalSystem. </P>

<P>If the service type is SERVICE_KERNEL_DRIVER or SERVICE_FILE_SYSTEM_DRIVER, this name is the Windows NT driver object name (that is, \FileSystem\Rdr or \Driver\Xns), which the input and output (I/O) system uses to load the device driver. If NULL is specified, the driver is run with a default object name created by the I/O system, based on the service name. </P>

<P><I>lpPassword</I></P>

<P>Pointer to a null-terminated string that contains the password to the account name specified by the <I>lpServiceStartName</I> parameter if the service type is SERVICE_WIN32_OWN_PROCESS or SERVICE_WIN32_SHARE_PROCESS. If the pointer is NULL, the password is not modified. If it points to an empty string, the service has no password. If the service type is SERVICE_KERNEL_DRIVER or SERVICE_FILE_SYSTEM_DRIVER, this parameter is ignored. </P>

<P><I>lpDisplayName</I></P>

<P>Pointer to a null-terminated string that is to be used by user interface programs to identify the service. This string has a maximum length of 256 characters. The name is case-preserved in the Service Control Manager. Display name comparisons are always case-insensitive. </P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is nonzero.</P>

<P>If the function fails, the return value is zero. To get extended error information, call <A HREF="11c2vs7.htm"><B>GetLastError</B></A>. </P>

<P><B>Errors</B></P>

<P>The following error codes may be set by the service control manager. Other error codes may be set by the registry functions that are called by the service control manager. </P>

<TABLE cols=4>

<TR VALIGN="top">
<TD colspan=2 width=13%><B>Value</B></TD>
<TD width=74%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=12%>ERROR_ACCESS_DENIED</TD>
<TD colspan=3 width=88%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD colspan=2 width=13%>&nbsp;</TD>
<TD width=74%>The specified handle was not opened with SERVICE_CHANGE_CONFIG access.</TD>
</TR>

<TR VALIGN="top">
<TD width=12%>ERROR_CIRCULAR_DEPENDENCY</TD>
<TD colspan=3 width=88%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD colspan=2 width=13%>&nbsp;</TD>
<TD width=74%>A circular service dependency was specified.</TD>
</TR>

<TR VALIGN="top">
<TD width=12%>ERROR_DUP_NAME</TD>
<TD colspan=3 width=88%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD colspan=2 width=13%>&nbsp;</TD>
<TD width=74%>The display name already exists in the service controller's database, either as a service name or as another display name.</TD>
</TR>

<TR VALIGN="top">
<TD width=12%>ERROR_INVALID_HANDLE</TD>
<TD colspan=3 width=88%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD colspan=2 width=13%>&nbsp;</TD>
<TD width=74%>The specified handle is invalid.</TD>
</TR>

<TR VALIGN="top">
<TD width=12%>ERROR_INVALID_PARAMETER</TD>
<TD colspan=3 width=88%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD colspan=2 width=13%>&nbsp;</TD>
<TD width=74%>A parameter that was specified is invalid.</TD>
</TR>

<TR VALIGN="top">
<TD colspan=4 width=100%>ERROR_INVALID_SERVICE_ACCOUNT</TD>
<TD colspan=20 width=1798278751%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD colspan=2 width=13%>&nbsp;</TD>
<TD width=74%>The account name does not exist, or a service is specified to share the same binary file as an already installed service but with an account name that is not the same as the installed service.</TD>
</TR>

<TR VALIGN="top">
<TD colspan=4 width=100%>ERROR_SERVICE_MARKED_FOR_DELETE</TD>
<TD colspan=20 width=1798278751%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD colspan=2 width=13%>&nbsp;</TD>
<TD width=74%>The service has been marked for deletion.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Remarks</B></P>

<P>The <B>ChangeServiceConfig</B> function changes the configuration information for the specified service in the service control manager database. This configuration information is initially specified by the <B>CreateService</B> function and can be queried (except for the password parameter) by using the <B>QueryServiceConfig</B> function. </P>

<P>Any of the configuration parameters specified for this function can be left unchanged by specifying NULL for a string parameter or SERVICE_NO_CHANGE for a doubleword parameter. </P>

<P>If the configuration is changed for a service that is running, with the exception of <I>lpDisplayName</I>, the changes do not take effect until the service is stopped. </P>

<P><B>See Also</B></P>

<P><A HREF="2wng26.htm"><B>CreateService</B></A>, <A HREF="20gsky6.htm"><B>OpenService</B></A>, <A HREF="1j3lx3w.htm"><B>QueryServiceConfig</B></A>, <A HREF="1osmk1p.htm"><B>StartService</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Backing Up and Restoring POSIX File Links</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="xxrkd6"></A><B>Backing Up and Restoring POSIX File Links</B></P>

<P>A backup application can use the <A HREF="sif7n1.htm"><B>BackupWrite</B></A> function to recreate POSIX file links. </P>

<P>The <A HREF="8z2gtt.htm"><B>BackupRead</B></A> function does not return POSIX file link data. A backup application must maintain the link information itself. The following pseudocode presents algorithms for backing up and restoring POSIX file link data along with other file information.</P>

<P><B>PseudoCode Algorithm for Backing Up POSIX File Links</B> </P>

<P>1.  Initialize and empty a list of known links.  </P>

<P>2.  While there are more files to back up </P>

<P>3.     Read the disk and get the next file. </P>

<P>4.     Open the file for read. </P>

<P>5.     Call GetFileInformationByHandle() to get the </P>

<P>NumberOfLinks and the FileIndex. </P>

<P>6.     If the NumberOfLinks is greater than 1 </P>

<P>7.        Search the list of know links looking for </P>

<P>the same FileIndex. </P>

<P>8.           If a match is NOT found </P>

<P>9.              add the full path of the file and the </P>

<P>FileIndex to the list. </P>

<P>10.             Call BackupRead() to copy all data to </P>

<P>your backup media. </P>

<P>10.          Else </P>

<P>11.             Mark the data as a LINK on your backup media </P>

<P>11.             store the full path from the list </P>

<P>to your backup media. </P>

<P>12.          Endif </P>

<P>13.    Else </P>

<P>14.       Call BackupRead() to copy all data to your </P>

<P>backup media. </P>

<P>15.    Endif </P>

<P>16. EndWhile </P>

<P></P>

<P><B>PseudoCode Algorithm for Restoring POSIX File Links</B> </P>

<P>1.  While there are more files to restore  </P>

<P>2.     If the file is a LINK </P>

<P>3.        use the full path which was saved as data </P>

<P>to open the file. </P>

<P>4.        Initialize a WIN32_STREAM_ID structure with </P>

<P>dwStreamId equal to BACKUP_LINK. </P>

<P>5.        Initialize the dwStreamAttributes to 0. </P>

<P>6.        Initialize the dwStreamNameSize to 0. </P>

<P>7.        Initialize a buffer containing the full path </P>

<P>of the file you are restoring in UNICODE. </P>

<P>8.        Initialize the dwStreamSizeHigh to 0. </P>

<P>9.        Initialize the dwStreamSizeLow to the size </P>

<P>in bytes of the buffer     containing the full path. </P>

<P>10.       Call BackupWrite() with the WIN32_STREAM_ID </P>

<P>11.       Call BackupWrite() with the buffer containing </P>

<P>the full path. </P>

<P>13.          Else </P>

<P>14.       Call BackupWrite() with the data stored on </P>

<P>your backup media. </P>

<P>15.    Endif </P>

<P>16. EndWhile </P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

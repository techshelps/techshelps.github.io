<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Console Handles</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="3ol5xwj"></A><B>Console Handles</B></P>

<P>A console process uses handles to access the input and screen buffers of its console. A process can use the <A HREF="1b8l_fr.htm"><B>GetStdHandle</B></A>, <A HREF="xn35yd.htm"><B>CreateFile</B></A>, or <A HREF="1n6839e.htm"><B>CreateConsoleScreenBuffer</B></A> function to open one of these handles. </P>

<P>The <B>GetStdHandle</B> function provides a mechanism for retrieving the standard input (STDIN), standard output (STDOUT), and standard error (STDERR) handles associated with a process. During console creation, the system creates these handles. Initially, STDIN is a handle of the console's input buffer, and STDOUT and STDERR are handles of the console's active screen buffer. However, the <A HREF="1crxpv2.htm"><B>SetStdHandle</B></A> function can redirect the standard handles by changing the handle associated with STDIN, STDOUT, or STDERR. Because the parent's standard handles are inherited by any child process, subsequent calls to <B>GetStdHandle</B> return the redirected handle. A handle returned by <B>GetStdHandle</B> may, therefore,  refer to something other than console I/O. For example, before creating a child process, a parent process can use <B>SetStdHandle</B> to set a pipe handle to be the STDIN handle that is inherited by the child process. When the child process calls <B>GetStdHandle</B>, it gets the pipe handle. This means that the parent process can control the standard handles of the child process. The handles returned by <B>GetStdHandle</B> have GENERIC_READ | GENERIC_WRITE access unless <B>SetStdHandle</B> has been used to set the standard handle to have lesser access. </P>

<P>The value of the handles returned by <B>GetStdHandle</B> will not be 0, 1, and 2, so the standard predefined stream constants in the STDIO.H header file (STDIN, STDOUT, and STDERR) cannot be used in functions that require a console handle. </P>

<P>The <B>CreateFile</B> function enables a process to get a handle of its console's input buffer and active screen buffer, even if STDIN and STDOUT have been redirected. To open a handle of a console's input buffer, specify the CONIN$ value in a call to <B>CreateFile</B>. Specify the CONOUT$ value in a call to <B>CreateFile</B> to open a handle of a console's active screen buffer. <B>CreateFile</B> enables you to specify the read-write access of the handle that it returns. </P>

<P>The <A HREF="1n6839e.htm"><B>CreateConsoleScreenBuffer</B></A> function creates a new screen buffer and returns a handle, which can be used in any function that accepts a handle of console output. The new screen buffer is not active until its handle is specified in a call to the <A HREF="4n5s_56.htm"><B>SetConsoleActiveScreenBuffer</B></A> function. Note that changing the active screen buffer does not affect the handle returned by <A HREF="1b8l_fr.htm"><B>GetStdHandle</B></A>. Similarly, using <B>SetStdHandle</B> to change the STDOUT handle does not affect the active screen buffer. </P>

<P>Console handles returned by <A HREF="xn35yd.htm"><B>CreateFile</B></A> and <B>CreateConsoleScreenBuffer</B> can be used in any of the console functions that require a handle of a console's input buffer or of a console screen buffer. Handles returned by <B>GetStdHandle</B> can be used by the console functions if they have not been redirected to refer to something other than console I/O. If a standard handle has been redirected to refer to a file or a pipe, however, the handle can only be used by the <A HREF="cjnd8p.htm"><B>ReadFile</B></A> and <A HREF="g0sox_.htm"><B>WriteFile</B></A> functions. </P>

<P>A process can use the <A HREF="1ojqkwy.htm"><B>DuplicateHandle</B></A> function to create a duplicate console handle that has different access or inheritability from the original handle. Note, however, that a process can create a duplicate console handle only for its own use. This differs from other handle types (such as file, pipe, or mutex objects), for which <B>DuplicateHandle</B> can create a duplicate that is valid for a different process. </P>

<P>To close a console handle, a process can use the <A HREF="ngwwie.htm"><B>CloseHandle</B></A> function. </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

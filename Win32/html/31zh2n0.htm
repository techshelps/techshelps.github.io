<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>SnmpExtensionQuery</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="31zh2n0"></A><B>SnmpExtensionQuery  <A HREF="_2dvyt.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="3ol8_pd.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="qj0.0j.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The extensible agent calls the <B>SnmpExtensionQuery</B> function in the extension agent DLL to resolve SNMP requests that contain variables within one or more of the extension agent's registered MIB subtrees. </P>

<P><B>BOOL  SnmpExtensionQuery(</B></P>

<TABLE cols=2 width=385>

<TR VALIGN="top">
<TD width=91%><B>BYTE</B> <I>requestType</I><B>,</B></TD>
<TD width=9%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=91%><B>    RFC1157VarBindList </B><I>*variableBindings<B>,</B></I></TD>
<TD width=9%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=91%><B>    AsnInteger </B><I>*errorStatus</I><B>,</B></TD>
<TD width=9%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=91%><B>    AsnInteger </B><I>*errorIndex</I></TD>
<TD width=9%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=91%><B>   );</B></TD>
<TD width=9%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>requestType</I></P>

<P>[in] Specifies the SNMP request type. This parameter can be one of the following values:</P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=56%><B>Value</B></TD>
<TD width=44%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=56%>ASN_RFC1157_GETREQUEST</TD>
<TD width=44%>Search and receive a value from a specified variable.</TD>
</TR>

<TR VALIGN="top">
<TD width=56%>ASN_RFC1157_GETNEXTREQUEST</TD>
<TD width=44%>Search and receive a value from a variable without knowing the name of the variable.</TD>
</TR>

<TR VALIGN="top">
<TD width=56%>ASN_RFC1157_SETREQUEST</TD>
<TD width=44%>Store a value within a specific variable.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><I>variableBindings</I></P>

<P>[in/out] Points to the variable bindings list.</P>

<P><I>errorStatus</I></P>

<P>[out] Points to a variable in which the error status result will be returned. This parameter can be one of the following values:</P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=60%><B>Value</B></TD>
<TD width=40%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=60%>SNMP_ERRORSTATUS_NOERROR</TD>
<TD width=40%>The agent reports that no errors occurred during transmission. </TD>
</TR>

<TR VALIGN="top">
<TD width=60%>SNMP_ERRORSTATUS_TOOBIG</TD>
<TD width=40%>The agent could not place the results of the requested operation into a single SNMP message.</TD>
</TR>

<TR VALIGN="top">
<TD width=60%>SNMP_ERRORSTATUS_NOSUCHNAME</TD>
<TD width=40%>The requested operation identified an unknown variable.</TD>
</TR>

<TR VALIGN="top">
<TD width=60%>SNMP_ERRORSTATUS_BADVALUE</TD>
<TD width=40%>The requested operation tried to change a variable but it specified either a syntax or value error.</TD>
</TR>

<TR VALIGN="top">
<TD width=60%>SNMP_ERRORSTATUS_READONLY</TD>
<TD width=40%>The requested operation tried to change a variable that was not allowed to change according to the community profile of the variable.</TD>
</TR>

<TR VALIGN="top">
<TD width=60%>SNMP_ERRORSTATUS_GENERR</TD>
<TD width=40%>An error other than one of those listed here occurred during the requested operation.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><I>errorIndex</I></P>

<P>[out] Points to a variable in which the error index result will be returned. </P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is TRUE. </P>

<P>If the function fails, the return value is FALSE. </P>

<P><B>Remarks</B></P>

<P>When the extensible agent must resolve a <B>Get</B>, <B>Get</B><I> </I><B>Next</B>, or <B>Set</B> command within the subtree indicated by the <A HREF="9sy827.htm"><B>SnmpExtensionInit</B></A> function, it must call the <B>SnmpExtensionQuery </B>function. For <B>Get</B> or <B>Set </B>commands, the extension agent must follow the rules in <A HREF="1zw8pcn.htm">RFC 1157</A> to either resolve the variable bindings request or generate an error. </P>

<P>A <B>Get Next </B>command is more complicated to process because the extension agent may not be able to resolve the requested variable binding. If the variable binding can be resolved, the extension agent must follow the rules in RFC 1157 to either resolve the variable bindings request or generate an error. If the extension agent cannot resolve the variable binding, it must change the <B>name</B> field of the <A HREF="2_6kc47.htm"><B>RFC1157VarBind</B></A><B> </B>structure to the value following the MIB subtree value specified in the <I>supportedView </I>parameter of the <B>SnmpExtensionInit</B> function. For example, if the agent supports view ".1.3.6.1.4.1.77.1", a <B>Get Next </B>command on ".1.3.6.1.4.1.77.1.5.1" would result in a modified <B>name</B> field of ".1.3.6.1.4.1.77.2". This signals the extensible agent to continue the attempt to resolve the variable bindings with other extension agents.</P>

<P>It is important to note that the extensible agent and the extension agent may need to exchange dynamically allocated memory during a call to the <B>SnmpExtensionQuery</B> function. The extensible agent dynamically allocates the object identifier in each <B>RFC1157VarBind</B> structure it passes to the extension agent. However, the extension agent must release this memory in order to replace the object identifier when it processes a <B>Get</B><I> </I><B>Next</B> request. The extension agent allocates dynamic memory for variable-length object types. The extensible agent needs to release this memory after the object is placed in the response. </P>

<P>In order to avoid heap corruption and memory leaks, both the extensible agent and the extension agent must use memory allocation routines that resolve to the same heap. Extension agents should use the <B>SnmpUtilMemAlloc</B> function to allocate memory and the <B>SnmpUtilMemFree</B> function to release memory. These functions are located in the utility dynamic-link library SNMPAPI.DLL. </P>

<P><B>See Also </B></P>

<P><A HREF="2_6kc47.htm"><B>RFC1157VarBind</B></A>, <A HREF="9sy827.htm"><B>SnmpExtensionInit</B></A>, <A HREF="1pppkv9.htm"><B>SnmpUtilMemAlloc</B></A>, <A HREF="5t7haw.htm"><B>SnmpUtilMemFree</B></A></P>

<P></P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

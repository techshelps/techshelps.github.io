<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>CryptImportKey [New - Windows NT] [New - Windows 95, OEM Service Release 2]</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="8mc1bn"></A><B>CryptImportKey  <A HREF="z.y3g.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="2jdzwvi.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="sx1q_k.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>[New - Windows NT]</P>

<P>[New - Windows 95, OEM Service Release 2]</P>

<P>The <B>CryptImportKey</B> function is used to transfer a cryptographic key from a key blob to the CSP.</P>

<P><B>BOOL CRYPTFUNC CryptImportKey(</B></P>

<TABLE cols=2 width=223>

<TR VALIGN="top">
<TD width=85%><B>HCRYPTPROV </B><I>hProv</I><B>,</B></TD>
<TD width=15%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=85%><B>    BYTE *</B><I>pbData</I><B>,</B></TD>
<TD width=15%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=85%><B>    DWORD </B><I>dwDataLen</I><B>,</B></TD>
<TD width=15%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=85%><B>    HCRYPTKEY </B><I>hImpKey</I><B>,</B></TD>
<TD width=15%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=85%><B>    DWORD </B><I>dwFlags</I><B>,</B></TD>
<TD width=15%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=85%><B>    HCRYPTKEY *</B><I>phKey</I></TD>
<TD width=15%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=85%><B>   );</B></TD>
<TD width=15%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hProv</I></P>

<P>[in] A handle to the application's CSP. An application obtains this handle using the <A HREF="b4q7j2.htm"><B>CryptAcquireContext</B></A> function.</P>

<P><I>pbData</I></P>

<P>[in] The buffer containing the key blob. This key blob was generated by the <A HREF="2n8dsnc.htm"><B>CryptExportKey</B></A> function, either by this same application or by another application running on a distant computer.</P>

<P>This key blob consists of a standard header followed by the encrypted key.</P>

<P><I>dwDataLen</I></P>

<P>[in] The length, in bytes, of the key blob.</P>

<P><I>hImpKey</I></P>

<P>[in] The meaning of this parameter differs, depending on the CSP type and the type of key blob being imported.</P>

<P>If the key blob is not encrypted (for example, a PUBLICKEYBLOB) or if the key blob is encrypted with the key exchange key pair (for example, a SIMPLEBLOB), then this parameter is not used, and should be zero.</P>

<P>If a <I>signed</I> key blob is being imported, this key is used to validate the signature of the key blob. In this case, this parameter should contain a handle to the key exchange public key of the party that created the key blob.</P>

<P>If the key blob is encrypted with a session key (for example, an encrypted PRIVATEKEYBLOB), then this parameter should contain a handle to this session key.</P>

<P><I>dwFlags</I></P>

<P>[in] The flag values. This parameter is currently only used when a public/private key pair is being imported into the CSP (in the form of a PRIVATEKEYBLOB). In this case, if the CRYPT_EXPORTABLE flag is set then subsequent applications will be permitted to export the private key back out of the CSP.</P>

<P><I>phKey</I></P>

<P>[out] The address to which the function copies a handle to the key that was imported.</P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is nonzero.</P>

<P>If the function fails, the return value is zero. To retrieve extended error information, use the <A HREF="11c2vs7.htm"><B>GetLastError</B></A> function.</P>

<P>The following table lists the error codes most commonly returned by the <B>GetLastError</B> function. The error codes prefaced by "NTE" are generated by the particular CSP you are using.</P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=47%><B>Error</B></TD>
<TD width=53%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=47%>ERROR_INVALID_HANDLE</TD>
<TD width=53%>One of the parameters specifies an invalid handle. </TD>
</TR>

<TR VALIGN="top">
<TD width=47%>ERROR_INVALID_PARAMETER</TD>
<TD width=53%>One of the parameters contains an invalid value. This is most often an illegal pointer.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>NTE_BAD_ALGID</TD>
<TD width=53%>The simple key blob you are trying to import is not encrypted with the expected key exchange algorithm.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>NTE_BAD_DATA</TD>
<TD width=53%>The algorithm that works with the public key you are trying to import is not supported by this CSP.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>NTE_BAD_FLAGS</TD>
<TD width=53%>The <I>dwFlags</I> parameter is nonzero.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>NTE_BAD_TYPE</TD>
<TD width=53%>The key blob type is not supported by this CSP and is possibly invalid.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>NTE_BAD_UID</TD>
<TD width=53%>The <I>hProv</I> parameter does not contain a valid context handle.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>NTE_BAD_VER</TD>
<TD width=53%>The key blob's version number does not match the CSP version. This usually indicates that the CSP needs to be upgraded. </TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Example</B></P>

<P>#include &lt;wincrypt.h&gt;</P>

<P></P>

<P>FILE *hSourceFile = NULL;</P>

<P>HCRYPTPROV hProv = 0;</P>

<P>HCRYPTKEY hKey = 0;</P>

<P>BYTE *pbKeyBlob = NULL;</P>

<P>DWORD dwBlobLen;</P>

<P>// Open file, getting file handle 'hSourceFile'.</P>

<P>...</P>

<P></P>

<P>// Get handle to the default provider.</P>

<P>if(!CryptAcquireContext(&amp;hProv, NULL, NULL, PROV_RSA_FULL, 0)) {</P>

<P>printf("Error %x during CryptAcquireContext!\n", GetLastError());</P>

<P>goto done;</P>

<P>}</P>

<P>// Read key blob length from file and allocate memory.</P>

<P>fread(&amp;dwBlobLen, sizeof(DWORD), 1, hSourceFile);</P>

<P>pbKeyBlob = malloc(dwBlobLen);</P>

<P>// Read key blob from file.</P>

<P>fread(pbKeyBlob, 1, dwBlobLen, hSourceFile);</P>

<P>// Import key blob into CSP.</P>

<P>if(!CryptImportKey(hProv, pbKeyBlob, dwBlobLen, 0, 0, &amp;hKey)) {</P>

<P>printf("Error %x during CryptImportKey!\n", GetLastError());</P>

<P>free(pbKeyBlob);</P>

<P>goto done;</P>

<P>}</P>

<P>// Free memory.</P>

<P>free(pbKeyBlob);</P>

<P>// Use 'hKey' to perform cryptographic operations.</P>

<P>...</P>

<P></P>

<P>done:</P>

<P>// Destroy session key.</P>

<P>if(hKey) CryptDestroyKey(hKey);</P>

<P>// Release provider handle.</P>

<P>if(hProv) CryptReleaseContext(hProv, 0);</P>

<P></P>

<P><B>See Also</B></P>

<P><A HREF="b4q7j2.htm"><B>CryptAcquireContext</B></A>, <A HREF="sq9krr.htm"><B>CryptDestroyKey</B></A>, <A HREF="2n8dsnc.htm"><B>CryptExportKey</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

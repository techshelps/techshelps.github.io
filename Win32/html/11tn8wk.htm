<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>StackWalk</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="11tn8wk"></A><B>StackWalk  <A HREF="yim29v.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>StackWalk</B> function provides a portable method for obtaining a stack trace.</P>

<P><B>BOOL StackWalk(</B></P>

<TABLE cols=2 width=538>

<TR VALIGN="top">
<TD width=93%><B>IN DWORD </B><I>MachineType</I><B>,</B></TD>
<TD width=7%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=93%><B>    IN HANDLE </B><I>hProcess</I><B>,</B></TD>
<TD width=7%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=93%><B>    IN HANDLE </B><I>hThread</I><B>,</B></TD>
<TD width=7%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=93%><B>    IN OUT LPSTACKFRAME </B><I>StackFrame</I><B>,</B></TD>
<TD width=7%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=93%><B>    IN OUT LPVOID </B><I>ContextRecord</I><B>,</B></TD>
<TD width=7%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=93%><B>    IN PREAD_PROCESS_MEMORY_ROUTINE </B><I>ReadMemoryRoutine</I><B>,</B></TD>
<TD width=7%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=93%><B>    IN PFUNCTION_TABLE_ACCESS_ROUTINE </B><I>FunctionTableAccessRoutine</I><B>,</B></TD>
<TD width=7%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=93%><B>    IN PGET_MODULE_BASE_ROUTINE </B><I>GetModuleBaseRoutine</I><B>,</B></TD>
<TD width=7%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=93%><B>    IN PTRANSLATE_ADDRESS_ROUTINE </B><I>TranslateAddress</I></TD>
<TD width=7%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=93%><B>   );</B></TD>
<TD width=7%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>MachineType</I></P>

<P>The architecture type of the machine for which the stack trace is generated. This can be one of the following values:</P>

<P>텶MAGE_FILE_MACHINE_I386</P>

<P>텶MAGE_FILE_MACHINE_R4000</P>

<P>텶MAGE_FILE_MACHINE_R10000</P>

<P>텶MAGE_FILE_MACHINE_ALPHA</P>

<P>텶MAGE_FILE_MACHINE_POWERPC</P>

<P><I>hProcess</I></P>

<P>The process handle for which the stack trace is generated. If the caller supplies a valid callback pointer for <I>ReadMemoryRoutine</I>, then this value does not have to be a valid Win32 process handle. It can be a token that is unique and consistently the same for all calls to the <B>StackWalk</B> function. If IMAGEHLP's symbol handler is used with <B>StackWalk</B>, the process handles used should be the same for the calls to each function.</P>

<P><I>hThread</I></P>

<P>The thread handle for which the stack trace is generated. If the caller supplies a valid callback pointer for <I>ReadMemoryRoutine</I>, then this value does not have to be a valid Win32 thread handle. It can be a token that is unique and consistently the same for all calls to the <B>StackWalk</B> function.</P>

<P><I>StackFrame</I></P>

<P>A pointer to a STACKFRAME structure. This structure is filled with the next frame's information, if the function call succeeds.</P>

<P><I>ContextRecord</I></P>

<P>A pointer to a CONTEXT record. This parameter is required only when <I>MachineType</I> is <I>not</I> equal to IMAGE_FILE_MACHINE_I386.</P>

<P><I>ReadMemoryRoutine</I></P>

<P>A pointer to a callback routine that provides memory read services. When the <B>StackWalk</B> function needs to read memory from the process's address space, this callback is used. If NULL is passed, then the Win32 <B>ReadProcessMemory</B> function is used. In this case, the <I>hProcess</I> parameter <I>must</I> be a valid Win32 process handle.</P>

<P><I>FunctionTableAccessRoutine</I></P>

<P>A pointer to a callback routine that provides access to the run-time function table for the process. For RISC machines, this function accesses the <I>pdata</I> table, while on X86 machines this function accesses the <I>fpo</I> table. This parameter is required because the <B>StackWalk</B> function does not have access to the process's run-time function table.</P>

<P>The symbol handler in IMAGEHLP provides functions that load and access the run-time table. If these functions are used, then <I>SymFunctionTableAccess</I> can be passed as a valid parameter.</P>

<P><I>GetModuleBaseRoutine</I></P>

<P>A pointer to a callback routine that provides a module base for any given virtual address. This parameter is required. The symbol handler in IMAGEHLP provides functions that load and maintain module information. If these functions are used, then <I>SymGetModuleBase</I> can be passed as a valid parameter.</P>

<P><I>TranslateAddress</I></P>

<P>A pointer to a callback routine that provides address translation for 16-bit addresses. Most, if not all, callers of <B>StackWalk </B>can safely pass NULL for this parameter.</P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is TRUE.</P>

<P>If the function fails, then the return value is FALSE. To retrieve extended error information, call <B>GetLastError</B>.</P>

<P><B>Remarks</B></P>

<P>The <B>StackWalk</B> function provides a portable method for obtaining a stack trace. This function is used by all Microsoft Win32 debuggers and tools that require stack trace facilities. Using IMAGEHLP's <B>StackWalk</B> function is recommended over writing your own function because of all the complexities associated with stack walking on the various Win32 platforms. In addition, the various compiler options that cause the stack to appear differently, depending on how the module is compiled, complicate the problem even more. By using this function, your application has a portable stack trace that continues to work when the compiler and operating system change.</P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

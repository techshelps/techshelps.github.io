<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>Setting Privileges</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="5egvh7"></A><B>Setting Privileges</B></P>

<P>The following example removes the discretionary ACL from a file. If necessary, ownership of the file is given to the Administrator account. If required, the SE_TAKE_OWNERSHIP_NAME privilege is enabled for the account. </P>

<P>LPSTR lpszOwnFile = "d:\\ntfs_sample_file";  </P>

<P>PSID pSIDAliasAdmins = NULL; </P>

<P></P>

<P>static SID_IDENTIFIER_AUTHORITY </P>

<P>siaNTAuthority = SECURITY_NT_AUTHORITY; </P>

<P></P>

<P>BOOL FAR PASCAL TakeOwnership() </P>

<P>{ </P>

<P>SECURITY_DESCRIPTOR sd; </P>

<P></P>

<P>/* </P>

<P>* Initialize a security descriptor and assign it a NULL </P>

<P>* discretionary ACL to allow unrestricted access. </P>

<P>* Assign the security descriptor to a file. </P>

<P>*/ </P>

<P></P>

<P>if (!InitializeSecurityDescriptor(&amp;sd, </P>

<P>SECURITY_DESCRIPTOR_REVISION)) { </P>

<P>ErrorHandler("InitializeSecurityDescriptor"); </P>

<P>return FALSE; </P>

<P>} </P>

<P></P>

<P>if (!SetSecurityDescriptorDacl(&amp;sd, </P>

<P>TRUE, </P>

<P>(PACL) NULL, </P>

<P>FALSE)) { </P>

<P>ErrorHandler("SetSecurityDescriptorDacl"); </P>

<P>return FALSE; </P>

<P>} </P>

<P></P>

<P>if (SetFileSecurity(lpszOwnFile, </P>

<P>DACL_SECURITY_INFORMATION, </P>

<P>&amp;sd)) </P>

<P>return TRUE; </P>

<P>else </P>

<P>ErrorHandler("SetFileSecurity1"); </P>

<P></P>

<P>/* </P>

<P>* If the preceding call to SetFileSecurity fails, create </P>

<P>* an Administrator SID and use it to set the owner of </P>

<P>* the security descriptor. </P>

<P>*/ </P>

<P></P>

<P>if (!AllocateAndInitializeSid(&amp;siaNTAuthority, </P>

<P>2,                     /* subauthority count  */ </P>

<P>/* first subauthority */ </P>

<P>SECURITY_BUILTIN_DOMAIN_RID, </P>

<P>/* second subauthority */ </P>

<P>DOMAIN_ALIAS_RID_ADMINS, </P>

<P>0, 0, 0, 0, 0, 0, </P>

<P>&amp;pSIDAliasAdmins)) { </P>

<P>ErrorHandler("AllocateAndInitializeSid"); </P>

<P>return FALSE; </P>

<P>} </P>

<P></P>

<P>if (!SetSecurityDescriptorOwner(&amp;sd, </P>

<P>pSIDAliasAdmins, </P>

<P>FALSE)) { </P>

<P>ErrorHandler("SetSecurityDescriptorOwner"); </P>

<P>FreeSid(pSIDAliasAdmins); </P>

<P>return FALSE; </P>

<P>} </P>

<P></P>

<P>/* </P>

<P>* If the following call to SetFileSecurity fails, </P>

<P>* enable SE_TAKE_OWNERSHIP_NAME in the access token for </P>

<P>* the current process and try again. </P>

<P>*/ </P>

<P></P>

<P>if (!SetFileSecurity(lpszOwnFile, </P>

<P>OWNER_SECURITY_INFORMATION, </P>

<P>&amp;sd)) { </P>

<P>ErrorHandler("SetFileSecurity2"); </P>

<P>if (!AssertTakeOwnership(TRUE)) {   /* local */ </P>

<P>MessageBox(NULL, "Must be logged on as Administrator", </P>

<P>"AssertTakeOwnership", MB_OK); </P>

<P>FreeSid(pSIDAliasAdmins); </P>

<P>return FALSE; </P>

<P>} </P>

<P>if (!SetFileSecurity(lpszOwnFile, </P>

<P>OWNER_SECURITY_INFORMATION, </P>

<P>&amp;sd)) { </P>

<P>MessageBox(NULL, "Must be logged on as Administrator", </P>

<P>"SetFileSecurity", MB_OK); </P>

<P>FreeSid(pSIDAliasAdmins); </P>

<P>return FALSE; </P>

<P>} </P>

<P>} </P>

<P></P>

<P>/* </P>

<P>* The Administrator is now the owner of the file. </P>

<P>* Try again to assign a NULL ACL. </P>

<P>*/ </P>

<P></P>

<P>if (SetFileSecurity(lpszOwnFile, </P>

<P>DACL_SECURITY_INFORMATION, </P>

<P>&amp;sd)) { </P>

<P>MessageBox(NULL, "Added NULL DACL; protection removed", </P>

<P>"SetFileSecurity", MB_OK); </P>

<P>AssertTakeOwnership(FALSE); </P>

<P>return TRUE; </P>

<P>} </P>

<P></P>

<P>else { </P>

<P>AssertTakeOwnership(FALSE); </P>

<P>ErrorHandler("SetFileSecurity3"); </P>

<P>return FALSE; </P>

<P>} </P>

<P>} </P>

<P></P>

<P>BOOL FAR PASCAL AssertTakeOwnership(BOOL fEnable) </P>

<P>{ </P>

<P>HANDLE hToken; </P>

<P>LUID TakeOwnershipValue; </P>

<P>TOKEN_PRIVILEGES tkp; </P>

<P></P>

<P>/* Retrieve a handle of the access token.           */ </P>

<P></P>

<P>if (!OpenProcessToken(GetCurrentProcess(), </P>

<P>TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, </P>

<P>&amp;hToken)) { </P>

<P>ErrorHandler("OpenProcessToken"); </P>

<P>return FALSE; </P>

<P>} </P>

<P></P>

<P>/* </P>

<P>* Enable the SE_TAKE_OWNERSHIP_NAME privilege or </P>

<P>* disable all privileges, depending on the fEnable </P>

<P>* flag. </P>

<P>*/ </P>

<P></P>

<P>if(fEnable) { </P>

<P>if (!LookupPrivilegeValue((LPSTR) NULL, </P>

<P>SE_TAKE_OWNERSHIP_NAME, </P>

<P>&amp;TakeOwnershipValue)) { </P>

<P>ErrorHandler("LookupPrivilegeValue"); </P>

<P>return FALSE; </P>

<P>} </P>

<P></P>

<P>tkp.PrivilegeCount = 1; </P>

<P>tkp.Privileges[0].Luid = TakeOwnershipValue; </P>

<P>tkp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED; </P>

<P></P>

<P>AdjustTokenPrivileges(hToken, </P>

<P>FALSE, </P>

<P>&amp;tkp, </P>

<P>sizeof(TOKEN_PRIVILEGES), </P>

<P>(PTOKEN_PRIVILEGES) NULL, </P>

<P>(PDWORD) NULL); </P>

<P></P>

<P>/* </P>

<P>* The return value of AdjustTokenPrivileges cannot </P>

<P>* be tested. </P>

<P>*/ </P>

<P></P>

<P>if (GetLastError() != ERROR_SUCCESS) { </P>

<P>ErrorHandler("AdjustTokenPrivileges"); </P>

<P>return FALSE; </P>

<P>} </P>

<P>} </P>

<P>else { </P>

<P>AdjustTokenPrivileges(hToken, </P>

<P>TRUE,               /* disable all privileges */ </P>

<P>(PTOKEN_PRIVILEGES) NULL, </P>

<P>(DWORD) 0, </P>

<P>(PTOKEN_PRIVILEGES) NULL, </P>

<P>(PDWORD) NULL); </P>

<P></P>

<P>/* </P>

<P>* The return value of AdjustTokenPrivileges cannot </P>

<P>* be tested. </P>

<P>*/ </P>

<P></P>

<P>if (GetLastError() != ERROR_SUCCESS) { </P>

<P>ErrorHandler("AdjustTokenPrivileges"); </P>

<P>return FALSE; </P>

<P>} </P>

<P>} </P>

<P></P>

<P>return TRUE; </P>

<P>} </P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

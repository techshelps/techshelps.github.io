<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>StartService</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="1osmk1p"></A><B>StartService  <A HREF="u7kwzv.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="12c8zrk.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="we4jtq.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>StartService</B> function starts the execution of a service. </P>

<P><B>BOOL StartService(</B></P>

<TABLE cols=2 width=557>

<TR VALIGN="top">
<TD width=43%><B>SC_HANDLE</B> <I>hService</I><B>,</B></TD>
<TD width=57%>// handle of service </TD>
</TR>

<TR VALIGN="top">
<TD width=43%><B>    DWORD</B> <I>dwNumServiceArgs</I><B>,</B></TD>
<TD width=57%>// number of arguments </TD>
</TR>

<TR VALIGN="top">
<TD width=43%><B>    LPCTSTR</B> <B>*</B><I>lpServiceArgVectors</I> </TD>
<TD width=57%>// address of array of argument string pointers  </TD>
</TR>

<TR VALIGN="top">
<TD width=43%><B>   );</B></TD>
<TD width=57%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hService</I></P>

<P>Identifies the service. This handle is returned by the <A HREF="20gsky6.htm"><B>OpenService</B></A> or <A HREF="2wng26.htm"><B>CreateService</B></A> function, and it must have SERVICE_START access. </P>

<P><I>dwNumServiceArgs</I></P>

<P>Specifies the number of argument strings in the <I>lpServiceArgVectors</I> array. If <I>lpServiceArgVectors</I> is NULL, this parameter can be zero. </P>

<P><I>lpServiceArgVectors</I></P>

<P>Points to an array of pointers that point to null-terminated argument strings passed to a service. Driver services do not receive these arguments. If no arguments are passed to the service being started, this parameter can be NULL. The service accesses these arguments through its <A HREF="y7r.4o.htm"><B>ServiceMain</B></A> function. Note that in the array of arguments passed to the <B>ServiceMain</B> function, the first argument (argv[0]) is the name of the service by default, followed by the arguments, if any, in the <I>lpServiceArgVectors</I> array. </P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is nonzero.</P>

<P>If the function fails, the return value is zero. To get extended error information, call <A HREF="11c2vs7.htm"><B>GetLastError</B></A>. </P>

<P><B>Errors</B></P>

<P>The following error codes can be set by the service control manager. Others can be set by the registry functions that are called by the service control manager. </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=64%><B>Value</B></TD>
<TD width=36%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=64%>ERROR_ACCESS_DENIED</TD>
<TD width=36%>The specified handle was not opened with SERVICE_START access.</TD>
</TR>

<TR VALIGN="top">
<TD width=64%>ERROR_INVALID_HANDLE</TD>
<TD width=36%>The specified handle is invalid.</TD>
</TR>

<TR VALIGN="top">
<TD width=64%>ERROR_PATH_NOT_FOUND</TD>
<TD width=36%>The service binary file could not be found.</TD>
</TR>

<TR VALIGN="top">
<TD width=64%>ERROR_SERVICE_ALREADY_RUNNING</TD>
<TD width=36%>An instance of the service is already running.</TD>
</TR>

<TR VALIGN="top">
<TD width=64%>ERROR_SERVICE_DATABASE_LOCKED</TD>
<TD width=36%>The database is locked.</TD>
</TR>

<TR VALIGN="top">
<TD width=64%>ERROR_SERVICE_DEPENDENCY_DELETED</TD>
<TD width=36%>The service depends on a service that does not exist or has been marked for deletion.</TD>
</TR>

<TR VALIGN="top">
<TD width=64%>ERROR_SERVICE_DEPENDENCY_FAIL</TD>
<TD width=36%>The service depends on another service that has failed to start.</TD>
</TR>

<TR VALIGN="top">
<TD width=64%>ERROR_SERVICE_DISABLED</TD>
<TD width=36%>The service has been disabled.</TD>
</TR>

<TR VALIGN="top">
<TD width=64%>ERROR_SERVICE_LOGON_FAILED</TD>
<TD width=36%>The service could not be logged on.</TD>
</TR>

<TR VALIGN="top">
<TD width=64%>ERROR_SERVICE_MARKED_FOR_DELETE</TD>
<TD width=36%>The service has been marked for deletion.</TD>
</TR>

<TR VALIGN="top">
<TD width=64%>ERROR_SERVICE_NO_THREAD</TD>
<TD width=36%>A thread could not be created for the Win32 service.</TD>
</TR>

<TR VALIGN="top">
<TD width=64%>ERROR_SERVICE_REQUEST_TIMEOUT</TD>
<TD width=36%>The service did not respond to the start request in a timely fashion.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Remarks</B></P>

<P>When a driver service is started, the <B>StartService</B> function does not return until the device driver has finished initializing. </P>

<P>When a service is started, the service control manager spawns the service process, if necessary. If the specified service shares a process with other services, the required process may already exist. The <B>StartService</B> function does not wait for the first status update from the new service (which may take a while). Instead, it returns when the service control manager receives notification from the service control dispatcher that the <A HREF="y7r.4o.htm"><B>ServiceMain</B></A> thread for this service was created successfully. </P>

<P>The service control manager sets the following default status values before returning from <B>StartService</B>: </P>

<P>·Current state of the service is set to SERVICE_START_PENDING. </P>

<P>·Controls accepted is set to none (zero). </P>

<P>·The CheckPoint value is set to zero. </P>

<P>·The WaitHint time is set to 2 seconds. </P>

<P></P>

<P>The calling process can determine if the new service has finished its initialization by calling the <B>QueryServiceStatus</B> function periodically to query the service's status. </P>

<P>A service cannot call <B>StartService</B> during initialization. The reason is that the Service Control Manager locks the service control database during initialization, so a call to <B>StartService</B> will block. Once the service reports to the Service Control Manager that it has successfully started, it can call <B>StartService</B>. </P>

<P><B>See Also</B></P>

<P><A HREF="2nu_3f.htm"><B>ControlService</B></A>, <A HREF="2wng26.htm"><B>CreateService</B></A>, <A HREF="20gsky6.htm"><B>OpenService</B></A>, <A HREF="jps..c.htm"><B>QueryServiceStatus</B></A>, <A HREF="y7r.4o.htm"><B>ServiceMain</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

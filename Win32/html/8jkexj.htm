<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Using Clipping</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="8jkexj"></A><B>Using Clipping</B></P>

<P>This section contains example code that shows how to generate a clip path consisting of a character string. The example creates a logical font and uses it to draw a string within a clip path, then fills the path by drawing horizontal and vertical lines. </P>

<P></P>

<P>/* </P>

<P>* DoClipPat - Draws a clip path using the specified string </P>

<P>* Return value - TRUE if successful; FALSE otherwise </P>

<P>* lplf - address of a LOGFONT structure that defines the font to </P>

<P>*        use to draw the clip path </P>

<P>* lpsz - address of a string to use for the clip path </P>

<P>*/ </P>

<P></P>

<P>BOOL DoClipPath(LPLOGFONT lplf, LPSTR lpsz) </P>

<P>{ </P>

<P>LOGFONT lf;         /* logical font structure                    */ </P>

<P>HFONT hfont;        /* new logical font handle                   */ </P>

<P>HFONT hfontOld;     /* original logical font handle              */ </P>

<P>HDC hdc;            /* display DC handle                         */ </P>

<P>int nXStart, nYStart; /* drawing coordinates                     */ </P>

<P>RECT rc;            /* rectangle structure for painting window   */ </P>

<P>SIZE sz;            /* size structure that receives text extents */ </P>

<P>int nStrLen;        /* length of the string                      */ </P>

<P>int i;              /* loop counter                              */ </P>

<P></P>

<P>/* Retrieve a cached DC for the window. */ </P>

<P></P>

<P>hdc = GetDC(hwnd); </P>

<P></P>

<P>/* Erase the current window contents. */ </P>

<P></P>

<P>GetClientRect(hwnd, &amp;rc); </P>

<P>FillRect(hdc, &amp;rc, GetStockObject(WHITE_BRUSH)); </P>

<P></P>

<P>/* </P>

<P>* Use the specified font to create a logical font and select it </P>

<P>* into the DC. </P>

<P>*/ </P>

<P></P>

<P>hfont = CreateFontIndirect(lplf); </P>

<P>if (hfont == NULL) </P>

<P>return FALSE; </P>

<P>hfontOld = SelectObject(hdc, hfont); </P>

<P></P>

<P>/* Create a clip path. */ </P>

<P></P>

<P>nStrLen = lstrlen(lpsz); </P>

<P>BeginPath(hdc); </P>

<P>TextOut(hdc, nXStart, nYStart, lpsz, nStrLen); </P>

<P>EndPath(hdc); </P>

<P>SelectClipPath(hdc, RGN_DIFF); </P>

<P></P>

<P>/* </P>

<P>* Retrieve the dimensions of the rectangle surrounding </P>

<P>* the text. </P>

<P>*/ </P>

<P></P>

<P>GetTextExtentPoint32(hdc, lpsz, nStrLen, &amp;sz); </P>

<P></P>

<P>/* Draw horizontal lines through the clip path. */ </P>

<P></P>

<P>for (i = nYStart + 1; i &lt; (nYStart + sz.cy); i += 3) { </P>

<P>MoveToEx(hdc, nXStart, i, (LPPOINT) NULL); </P>

<P>LineTo(hdc, (nXStart + sz.cx), i); </P>

<P>} </P>

<P></P>

<P>/* Draw vertical lines through the clip path. */ </P>

<P></P>

<P>for (i = nXStart + 1; i &lt; (nXStart + sz.cx); i += 3){ </P>

<P>MoveToEx(hdc, i, nYStart, (LPPOINT) NULL); </P>

<P>LineTo(hdc, i, (nYStart + sz.cy)); </P>

<P>} </P>

<P></P>

<P>/* Select the original font into the DC and release the DC. */ </P>

<P></P>

<P>SelectObject(hdc, hfontOld); </P>

<P>DeleteObject(hfont); </P>

<P>ReleaseDC(hwnd, hdc); </P>

<P></P>

<P>return TRUE; </P>

<P>} </P>

<P></P>

<P>For an example that demonstrates how an application creates a rectangular clipping region, see <A HREF="1y7dhc.htm">Regions</A>. </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

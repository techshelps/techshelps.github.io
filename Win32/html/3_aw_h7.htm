<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>Creating Named Shared Memory</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="3_aw_h7"></A><B>Creating Named Shared Memory</B></P>

<P>The first process calls the <A HREF="3lck_3.htm"><B>CreateFileMapping</B></A> function to create a file-mapping object and give it the name MyFileMappingObject. By using the PAGE_READWRITE flag, the processes will have read/write permission to the memory through any file views that are created. </P>

<P>HANDLE hMapFile;</P>

<P></P>

<P>hMapFile = CreateFileMapping(hFile,    // Current file handle. </P>

<P>NULL,                              // Default security. </P>

<P>PAGE_READWRITE,                    // Read/write permission. </P>

<P>0,                                 // Max. object size. </P>

<P>0,                                 // Size of hFile. </P>

<P>"MyFileMappingObject");            // Name of mapping object. </P>

<P></P>

<P>if (hMapFile == NULL) { </P>

<P>ErrorHandler("Could not create file-mapping object."); </P>

<P>} </P>

<P></P>

<P>The process then uses the file-mapping object handle returned by <A HREF="3lck_3.htm"><B>CreateFileMapping</B></A> in the call to <A HREF="2a9rvat.htm"><B>MapViewOfFile</B></A> to create a view of the file in the process's address space. The <B>MapViewOfFile</B> function returns a pointer to the file view.</P>

<P>LPVOID lpMapAddress;</P>

<P>lpMapAddress = MapViewOfFile(hMapFile, // Handle to mapping object.  </P>

<P>FILE_MAP_ALL_ACCESS,               // Read/write permission </P>

<P>0,                                 // Max. object size. </P>

<P>0,                                 // Size of hFile. </P>

<P>0);                                // Map entire file. </P>

<P></P>

<P>if (lpMapAddress == NULL) { </P>

<P>ErrorHandler("Could not map view of file."); </P>

<P>} </P>

<P></P>

<P>The second process calls the <A HREF="68g5u2.htm"><B>OpenFileMapping</B></A> function with the name MyFileMappingObject to use the same file-mapping object as the first process. Like the first process, the second process uses the <B>MapViewOfFile</B> function to obtain a pointer to the file view. </P>

<P>HANDLE hMapFile;</P>

<P>LPVOID lpMapAddress;</P>

<P></P>

<P>hMapFile = OpenFileMapping(FILE_MAP_ALL_ACCESS, // Read/write permission. </P>

<P>FALSE,                             // Do not inherit the name</P>

<P>"MyFileMappingObject");            // of the mapping object. </P>

<P></P>

<P>if (hMapFile == NULL) { </P>

<P>ErrorHandler("Could not open file-mapping object."); </P>

<P>} </P>

<P></P>

<P>lpMapAddress = MapViewOfFile(hMapFile, // Handle to mapping object. </P>

<P>FILE_MAP_ALL_ACCESS,               // Read/write permission. </P>

<P>0,                                 // Max. object size. </P>

<P>0,                                 // Size of hFile. </P>

<P>0);                                // Map entire file. </P>

<P></P>

<P>if (lpMapAddress == NULL) { </P>

<P>ErrorHandler("Could not map view of file."); </P>

<P>} </P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

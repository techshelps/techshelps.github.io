<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Format Specifications</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="wzgdat"></A><B>Format Specifications</B></P>

<P><B>%</B>[<B>-</B>][<B>#</B>][<B>0</B>][<I>width</I>][<B>.</B><I>precision</I>]<I>type</I></P>

<P>Format specifications always begin with a percent sign (%). Each field is a single character or a number signifying a particular format option. The simplest format specification contains only the percent sign and a type character (for example, <B>%s</B>). The optional fields control other aspects of the formatting. </P>

<P><B>%</B></P>

<P>Required. Marks the beginning of the format specification. If the percent sign is followed by a character that has no meaning as a format field, the character is not formatted (for example, %% produces a single percent-sign character). </P>

<P><B>-</B></P>

<P>Optional. Pads the output with blanks or zeros to the right to fill the field width, justifying output to the left. If this field is omitted, the output is padded to the left, justifying it to the right.</P>

<P><B>#</B></P>

<P>Optional. Prefix hexadecimal values with 0x (lowercase) or 0X (uppercase).</P>

<P><B>0</B></P>

<P>Optional. Pad the output value with zeros to fill the field width. If this field is omitted, the output value is padded with blank spaces.</P>

<P><I>width</I></P>

<P>Optional. Copy the specified minimum number of characters to the output buffer. The <I>width</I> field is a nonnegative integer. The width specification never causes a value to be truncated; if the number of characters in the output value is greater than the specified width, or if the <I>width</I> field is not present, all characters of the value are printed, subject to the precision specification.</P>

<P><B>.</B><I>precision</I></P>

<P>Optional. For numbers, copy the specified minimum number of digits to the output buffer. If the number of digits in the argument is less than the specified precision, the output value is padded on the left with zeros. The value is not truncated when the number of digits exceeds the specified precision. If the specified precision is 0 or omitted entirely, or if the period (<B>.</B>) appears without a number following it, the precision is set to 1.</P>

<P>For strings, copy the specified maximum number of characters to the output buffer.</P>

<P><I>type</I></P>

<P>Required. Determines whether the associated argument is interpreted as a character, a string, or a number. Can be one of these character sequences:</P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=17%><B>c</B></TD>
<TD width=83%>A single character. The functions ignore character arguments with a numeric value of zero. This sequence is interpreted as type <B>WCHAR</B> when the calling application uses the <B>#define</B> <B>UNICODE</B> compile flag and as type <B>CHAR</B> otherwise.</TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>C</B></TD>
<TD width=83%>A single character. This sequence is interpreted as type <B>CHAR</B> when the calling application uses the <B>#define</B> <B>UNICODE</B> compile flag and as type <B>WCHAR</B> otherwise.</TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>d</B></TD>
<TD width=83%>A signed decimal integer argument. This sequence is equivalent to the <B>i</B> sequence.</TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>hc</B>, <B>hC</B></TD>
<TD width=83%>A single character. The functions ignore character arguments with a numeric value of zero. This sequence is always interpreted as type <B>CHAR</B>, even when the calling application uses the <B>#define</B> <B>UNICODE</B> compile flag.</TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>hs</B>, <B>hS</B></TD>
<TD width=83%>A string. This sequence is always interpreted as type <B>LPSTR</B>, even when the calling application uses the <B>#define</B> <B>UNICODE</B> compile flag.</TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>i</B></TD>
<TD width=83%>A signed decimal integer. This sequence is equivalent to the <B>d</B> sequence.</TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>lc</B>, <B>lC</B></TD>
<TD width=83%>A single character. The functions ignore character arguments with a numeric value of zero. This sequence is always interpreted as type <B>WCHAR</B>, even when the calling application does not use the <B>#define</B> <B>UNICODE</B> compile flag.</TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>ld</B></TD>
<TD width=83%>A long signed decimal integer. This sequence is equivalent to the <B>li</B> sequence.</TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>li</B></TD>
<TD width=83%>A long signed decimal integer. This sequence is equivalent to the <B>ld</B> sequence.</TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>ls</B>, <B>lS</B></TD>
<TD width=83%>A string. This sequence is always interpreted as type <B>LPWSTR</B>, even when the calling application does not use the <B>#define</B> <B>UNICODE</B> compile flag. This sequence is equivalent to the <B>ws</B> sequence.</TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>lu</B></TD>
<TD width=83%>A long unsigned integer.</TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>lx</B>, <B>lX</B></TD>
<TD width=83%>A long unsigned hexadecimal integer in lowercase or uppercase.</TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>s</B></TD>
<TD width=83%>A string. This sequence is interpreted as type <B>LPWSTR</B> when the calling application uses the <B>#define</B> <B>UNICODE</B> compile flag and as type <B>LPSTR</B> otherwise.</TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>S</B></TD>
<TD width=83%>A string. This sequence is interpreted as type <B>LPSTR</B> when the calling application uses the <B>#define</B> <B>UNICODE</B> compile flag and as type <B>LPWSTR</B> otherwise.</TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>u</B></TD>
<TD width=83%>An unsigned integer argument.</TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>x</B>, <B>X</B></TD>
<TD width=83%>An unsigned hexadecimal integer in lowercase or uppercase.</TD>
</TR>
</TABLE><BR>

<P></P>

<P></P>

<P></P>

</BODY>
</HTML>

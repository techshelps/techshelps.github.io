<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>CryptSetHashParam [New - Windows NT] [New - Windows 95, OEM Service Release 2]</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="_ge6q6"></A><B>CryptSetHashParam  <A HREF="19m3_c.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="41b3l2.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="rkgz3o.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>[New - Windows NT]</P>

<P>[New - Windows 95, OEM Service Release 2]</P>

<P>The <B>CryptSetHashParam</B> function, in theory, allows applications to customize the operations of a hash object. Currently, only a single parameter is defined for this function.</P>

<P><B>BOOL CRYPTFUNC CryptSetHashParam(</B></P>

<TABLE cols=2 width=219>

<TR VALIGN="top">
<TD width=84%><B>HCRYPTHASH </B><I>hHash</I><B>,</B></TD>
<TD width=16%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=84%><B>    DWORD </B><I>dwParam</I><B>,</B></TD>
<TD width=16%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=84%><B>    BYTE *</B><I>pbData</I><B>,</B></TD>
<TD width=16%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=84%><B>    DWORD </B><I>dwFlags</I></TD>
<TD width=16%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=84%><B>   );</B></TD>
<TD width=16%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hHash</I></P>

<P>[in] A handle to the hash object on which to set parameters.</P>

<P><I>dwParam</I></P>

<P>[in] The parameter number. See the "Remarks" section for a list of valid parameters.</P>

<P><I>pbData</I></P>

<P>[in] The parameter data buffer. Place the parameter data in this buffer before calling <B>CryptSetHashParam</B>. The form of this data will vary, depending on the parameter number.</P>

<P><I>dwFlags</I></P>

<P>[in] The flag values. This parameter is reserved for future use and should always be zero.</P>

<P></P>

<P><B>Remarks</B></P>

<P>The <I>dwParam</I> parameter can be set to one of the following values:</P>

<P>HP_HASHVAL</P>

<P>Hash value. The <I>pbData</I> buffer should contain a byte array containing a hash value to place directly into the hash object. Before setting this parameter, the size of the hash value should be determined by reading the HP_HASHSIZE parameter with the <A HREF="51c6k9e.htm"><B>CryptGetHashParam</B></A> function.</P>

<P>Normal applications should never set this parameter. In fact, some CSPs may not even support this capability. Occasionally though, it is convenient to sign a hash value that has been generated elsewhere. This is the usual sequence of operations:</P>

<P>1.The application creates a hash object with <A HREF="4hq3.7.htm"><B>CryptCreateHash</B></A>.</P>

<P>2.It specifies a hash value by setting the HP_HASHVAL parameter.</P>

<P>3.It signs the hash value using <A HREF="bod3zd.htm"><B>CryptSignHash</B></A>, obtaining a digital signature block. </P>

<P>Because the binding between the hashed data and the signature is fairly tenuous, no description string can be passed into <B>CryptSignHash</B> in this situation.</P>

<P>4.It destroys the hash object using <A HREF="1rbk0dy.htm"><B>CryptDestroyHash</B></A>.</P>

<P></P>

<P>Note that some CSP types may add additional parameters that can be set with this function.</P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is nonzero.</P>

<P>If the function fails, the return value is zero. To retrieve extended error information, use the <A HREF="11c2vs7.htm"><B>GetLastError</B></A> function.</P>

<P>The following table lists the error codes most commonly returned by the <B>GetLastError</B> function. The error codes prefaced by "NTE" are generated by the particular CSP you are using.</P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=47%><B>Error</B></TD>
<TD width=53%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=47%>ERROR_INVALID_HANDLE</TD>
<TD width=53%>One of the parameters specifies an invalid handle. </TD>
</TR>

<TR VALIGN="top">
<TD width=47%>ERROR_BUSY</TD>
<TD width=53%>The CSP context is currently being used by another process.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>ERROR_INVALID_PARAMETER</TD>
<TD width=53%>One of the parameters contains an invalid value. This is most often an illegal pointer.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>NTE_BAD_FLAGS</TD>
<TD width=53%>The <I>dwFlags</I> parameter is nonzero or the <I>pbData</I> buffer contains an invalid value.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>NTE_BAD_HASH</TD>
<TD width=53%>The hash object specified by the <I>hHash</I> parameter is invalid.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>NTE_BAD_TYPE</TD>
<TD width=53%>The <I>dwParam</I> parameter specifies an unknown parameter.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>NTE_BAD_UID</TD>
<TD width=53%>The CSP context that was specified when the <I>hKey</I> key was created cannot be found.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>NTE_FAIL</TD>
<TD width=53%>The function failed in some unexpected way.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Example</B></P>

<P>This function is used in a way similar to the <B>CryptSetKeyParam</B> function.</P>

<P><B>See Also</B></P>

<P><A HREF="4hq3.7.htm"><B>CryptCreateHash</B></A>, <A HREF="1rbk0dy.htm"><B>CryptDestroyHash</B></A>, <A HREF="51c6k9e.htm"><B>CryptGetHashParam</B></A>, <A HREF="1smrhzn.htm"><B>CryptSetKeyParam</B></A>, <A HREF="bod3zd.htm"><B>CryptSignHash</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

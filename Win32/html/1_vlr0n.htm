<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Copying Information to the Clipboard</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="1_vlr0n"></A><B>Copying Information to the Clipboard</B></P>

<P>In the Label application, the application-defined EditCopy function copies the current selection to the clipboard. This function does the following: </P>

<P>1.Opens the clipboard by calling the <A HREF="1hcr0ta.htm"><B>OpenClipboard</B></A> function. </P>

<P>2.Empties the clipboard by calling the <A HREF="14ciyh4.htm"><B>EmptyClipboard</B></A> function. </P>

<P>3.Calls the <A HREF="1uhxs93.htm"><B>SetClipboardData</B></A> function once for each clipboard format the application provides. </P>

<P>4.Closes the clipboard by calling the <A HREF="1xiizdf.htm"><B>CloseClipboard</B></A> function. </P>

<P></P>

<P>Depending on the current selection, the EditCopy function either copies a range of text or copies an application-defined structure representing an entire label. The structure, called LABELBOX, is defined as follows. </P>

<P>#define BOX_ELLIPSE  0  </P>

<P>#define BOX_RECT     1 </P>

<P></P>

<P>#define CCH_MAXLABEL 80 </P>

<P>#define CX_MARGIN    12 </P>

<P></P>

<P>typedef struct tagLABELBOX {  // box </P>

<P>RECT rcText;    // coordinates of rectangle containing text </P>

<P>BOOL fSelected; // TRUE if the label is selected </P>

<P>BOOL fEdit;     // TRUE if text is selected </P>

<P>int nType;      // rectangular or elliptical </P>

<P>int ichCaret;   // caret position </P>

<P>int ichSel;     // with ichCaret, delimits selection </P>

<P>int nXCaret;    // window position corresponding to ichCaret </P>

<P>int nXSel;      // window position corresponding to ichSel </P>

<P>int cchLabel;   // length of text in atchLabel </P>

<P>TCHAR atchLabel[CCH_MAXLABEL]; </P>

<P>} LABELBOX, *PLABELBOX; </P>

<P></P>

<P>Following is the EditCopy function. </P>

<P>BOOL WINAPI EditCopy(VOID)  </P>

<P>{ </P>

<P>PLABELBOX pbox; </P>

<P>LPTSTR  lptstrCopy; </P>

<P>HGLOBAL hglbCopy; </P>

<P>int ich1, ich2, cch; </P>

<P></P>

<P>if (hwndSelected == NULL) </P>

<P>return FALSE; </P>

<P></P>

<P>// Open the clipboard, and empty it. </P>

<P></P>

<P>if (!OpenClipboard(hwndMain)) </P>

<P>return FALSE; </P>

<P>EmptyClipboard(); </P>

<P></P>

<P>// Get a pointer to the structure for the selected label. </P>

<P></P>

<P>pbox = (PLABELBOX) GetWindowLong(hwndSelected, 0); </P>

<P></P>

<P>// If text is selected, copy it using the CF_TEXT format. </P>

<P></P>

<P>if (pbox-&gt;fEdit) </P>

<P>{ </P>

<P>if (pbox-&gt;ichSel == pbox-&gt;ichCaret)     // zero length</P>

<P>{   </P>

<P>CloseClipboard();                   // selection </P>

<P>return FALSE; </P>

<P>} </P>

<P></P>

<P>if (pbox-&gt;ichSel &lt; pbox-&gt;ichCaret) </P>

<P>{ </P>

<P>ich1 = pbox-&gt;ichSel; </P>

<P>ich2 = pbox-&gt;ichCaret; </P>

<P>} </P>

<P>else </P>

<P>{ </P>

<P>ich1 = pbox-&gt;ichCaret; </P>

<P>ich2 = pbox-&gt;ichSel; </P>

<P>} </P>

<P>cch = ich2 - ich1; </P>

<P></P>

<P>// Allocate a global memory object for the text. </P>

<P></P>

<P>hglbCopy = GlobalAlloc(GMEM_DDESHARE, </P>

<P>(cch + 1) * sizeof(TCHAR)); </P>

<P>if (hglbCopy == NULL) </P>

<P>{ </P>

<P>CloseClipboard(); </P>

<P>return FALSE; </P>

<P>} </P>

<P></P>

<P>// Lock the handle and copy the text to the buffer. </P>

<P></P>

<P>lptstrCopy = GlobalLock(hglbCopy); </P>

<P>memcpy(lptstrCopy, &amp;pbox-&gt;atchLabel[ich1], </P>

<P>cch * sizeof(TCHAR)); </P>

<P>lptstrCopy[cch] = (TCHAR) 0;    // null character </P>

<P>GlobalUnlock(hglbCopy); </P>

<P></P>

<P>// Place the handle on the clipboard. </P>

<P></P>

<P>SetClipboardData(CF_TEXT, hglbCopy); </P>

<P>} </P>

<P></P>

<P>// If no text is selected, the label as a whole is copied. </P>

<P></P>

<P>else </P>

<P>{ </P>

<P>// Save a copy of the selected label as a local memory </P>

<P>// object. This copy is used to render data on request. </P>

<P>// It is freed in response to the WM_DESTROYCLIPBOARD </P>

<P>// message. </P>

<P></P>

<P>pboxLocalClip = (PLABELBOX) LocalAlloc( </P>

<P>LMEM_FIXED, </P>

<P>sizeof(LABELBOX) </P>

<P>); </P>

<P>if (pboxLocalClip == NULL) </P>

<P>{ </P>

<P>CloseClipboard(); </P>

<P>return FALSE; </P>

<P>} </P>

<P>memcpy(pboxLocalClip, pbox, sizeof(LABELBOX)); </P>

<P>pboxLocalClip-&gt;fSelected = FALSE; </P>

<P>pboxLocalClip-&gt;fEdit = FALSE; </P>

<P></P>

<P>// Place a registered clipboard format, the owner-display </P>

<P>// format, and the CF_TEXT format on the clipboard using </P>

<P>// delayed rendering. </P>

<P></P>

<P>SetClipboardData(uLabelFormat, NULL); </P>

<P>SetClipboardData(CF_OWNERDISPLAY, NULL); </P>

<P>SetClipboardData(CF_TEXT, NULL); </P>

<P>} </P>

<P></P>

<P>// Close the clipboard. </P>

<P></P>

<P>CloseClipboard(); </P>

<P></P>

<P>return TRUE; </P>

<P>} </P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

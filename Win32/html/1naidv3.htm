<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>SetFileApisToOEM</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="1naidv3"></A><B>SetFileApisToOEM  <A HREF="ydaxo_.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="qnj9so.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="1f83g2.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>SetFileApisToOEM</B> function causes a set of Win32 file functions to use the OEM character set code page. This function is useful for 8-bit console input and output operations.</P>

<P><B>VOID SetFileApisToOEM(VOID)<BR>
 </B></P>

<P><B>Parameters</B></P>

<P>This function has no parameters.</P>

<P><B>Return Values</B></P>

<P>This function has no return value.</P>

<P><B>Remarks</B></P>

<P>The <B>SetFileApisToOEM </B>function is complemented by the <A HREF="1.20fa.htm"><B>SetFileApisToANSI</B></A> function, which causes the same set of Win32 file functions to use the ANSI character set code page.</P>

<P>The 8-bit console functions use the OEM code page by default. All other functions use the ANSI code page by default. This means that strings returned by the console functions may not be processed correctly by other functions, and vice versa. For example, if the<B> <A HREF="2a0z0q6.htm">FindFirstFileA</A></B> function returns a string that contains certain extended ANSI characters, and the 8-bit console functions are set to use the OEM code page, then the <A HREF="5_0w_r1.htm"><B>WriteConsoleA</B></A> function will not display the string properly. </P>

<P>Use the <A HREF="2n249.n.htm"><B>AreFileApisANSI</B></A> function to determine which code page the set of file functions is currently using. Use the <A HREF="4lxo_mt.htm"><B>SetConsoleCP</B></A> and <A HREF=".pz.au.htm"><B>SetConsoleOutputCP</B></A> functions to set the code page for the 8-bit console functions.</P>

<P>To solve the problem of code page incompatibility, it is best to use Unicode for console applications. Console applications that use Unicode are much more versatile than those that use 8-bit console functions. Barring that solution, a console application can call the <B>SetFileApisToOEM</B> function to cause the set of Win32 file functions to use OEM character set strings rather than ANSI character set strings. Use the <B>SetFileApisToANSI </B>function to set those functions back to the ANSI code page.</P>

<P><B>SetFileApisToANSI</B> and <B>SetFileApisToOEM</B> affect these Win32 functions: </P>

<TABLE cols=3>

<TR VALIGN="top">
<TD width=32%><A HREF="94kiqd.htm"><B>_lopen</B></A></TD>
<TD width=32%><A HREF="1vis91..htm"><B>GetDriveType</B></A></TD>
<TD width=36%><A HREF="1vghbf8.htm"><B>LoadLibrary</B></A> </TD>
</TR>

<TR VALIGN="top">
<TD width=32%><A HREF="al5gu..htm"><B>CopyFile</B></A></TD>
<TD width=32%><A HREF="3pqdmo.htm"><B>GetFileAttributes</B></A></TD>
<TD width=36%><A HREF="lyqytx.htm"><B>LoadLibraryEx</B></A> </TD>
</TR>

<TR VALIGN="top">
<TD width=32%><A HREF="f6nd8.htm"><B>CreateDirectory</B></A></TD>
<TD width=32%><A HREF="8n6hyc.htm"><B>GetFullPathName</B></A></TD>
<TD width=36%><A HREF="1s180ve.htm"><B>MoveFile</B></A> </TD>
</TR>

<TR VALIGN="top">
<TD width=32%><A HREF="xn35yd.htm"><B>CreateFile</B></A></TD>
<TD width=32%><A HREF="3oo70x8.htm"><B>GetModuleFileName</B></A></TD>
<TD width=36%><A HREF="5n2wfg.htm"><B>MoveFileEx</B></A> </TD>
</TR>

<TR VALIGN="top">
<TD width=32%><A HREF="5fbj_xx.htm"><B>CreateProcess</B></A></TD>
<TD width=32%><A HREF="18vfc_p.htm"><B>GetModuleHandle</B></A></TD>
<TD width=36%><A HREF="47xk05.htm"><B>OpenFile</B></A> </TD>
</TR>

<TR VALIGN="top">
<TD width=32%><A HREF=".h9hcz.htm"><B>DeleteFile</B></A></TD>
<TD width=32%><A HREF="3oj42sv.htm"><B>GetSystemDirectory</B></A></TD>
<TD width=36%><A HREF="9i2c9v.htm"><B>RemoveDirectory</B></A> </TD>
</TR>

<TR VALIGN="top">
<TD width=32%><A HREF="2a0z0q6.htm"><B>FindFirstFile</B></A></TD>
<TD width=32%><A HREF="xpkip.htm"><B>GetTempFileName</B></A></TD>
<TD width=36%><A HREF="1fba0sq.htm"><B>SearchPath</B></A> </TD>
</TR>

<TR VALIGN="top">
<TD width=32%><A HREF="jkcucc.htm"><B>FindNextFile</B></A></TD>
<TD width=32%><A HREF="lzzs8y.htm"><B>GetTempPath</B></A></TD>
<TD width=36%><A HREF="hwnghc.htm"><B>SetCurrentDirectory</B></A> </TD>
</TR>

<TR VALIGN="top">
<TD width=32%><A HREF="lwy0ba.htm"><B>GetCurrentDirectory</B></A></TD>
<TD width=32%><A HREF="cjnvcw.htm"><B>GetVolumeInformation</B></A></TD>
<TD width=36%><A HREF="ha1.i7.htm"><B>SetFileAttributes</B></A> </TD>
</TR>

<TR VALIGN="top">
<TD width=32%><A HREF="3028bbk.htm"><B>GetDiskFreeSpace</B></A></TD>
<TD width=32%><A HREF="1b6tycn.htm"><B>GetWindowsDirectory</B></A></TD>
<TD width=36%>  </TD>
</TR>
</TABLE><BR>

<P></P>

<P>When dealing with command lines, a console application should obtain the command line in Unicode form, and then convert it to OEM form using the relevant character-to-OEM functions. Note also that the <B>argv</B> function uses the ANSI character set. </P>

<P><B>See Also</B></P>

<P><A HREF="2n249.n.htm"><B>AreFileApisANSI</B></A>,<B> <A HREF="2a0z0q6.htm">FindFirstFileA</A></B>, <A HREF="4lxo_mt.htm"><B>SetConsoleCP</B></A>,<B> <A HREF="4lxo_mt.htm">SetConsoleCP</A></B>, <A HREF=".pz.au.htm"><B>SetConsoleOutputCP</B></A>, <A HREF="1.20fa.htm"><B>SetFileApisToANSI</B></A>, <A HREF="5_0w_r1.htm"><B>WriteConsoleA</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

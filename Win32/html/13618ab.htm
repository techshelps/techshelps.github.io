<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>FRHookProc</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="13618ab"></A><B>FRHookProc  <A HREF="1bh4_.h.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="y3i0nj.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="_grvj7.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>An <B>FRHookProc</B> hook procedure is an application-defined or library-defined callback procedure that is used with the Find and Replace common dialog boxes. The hook procedure receives messages or notifications intended for the default dialog box procedure.</P>

<P><B>UINT APIENTRY FRHookProc(</B></P>

<TABLE cols=2 width=395>

<TR VALIGN="top">
<TD width=41%><B>HWND</B> <I>hdlg</I><B>,</B></TD>
<TD width=59%>// handle to the dialog box window</TD>
</TR>

<TR VALIGN="top">
<TD width=41%><B>    UINT</B> <I>uiMsg</I></TD>
<TD width=59%>// message identifier</TD>
</TR>

<TR VALIGN="top">
<TD width=41%><B>    WPARAM</B> <I>wParam</I><B>,</B></TD>
<TD width=59%>// message parameter</TD>
</TR>

<TR VALIGN="top">
<TD width=41%><B>    LPARAM</B> <I>lParam</I> </TD>
<TD width=59%>// message parameter</TD>
</TR>

<TR VALIGN="top">
<TD width=41%><B>   );</B></TD>
<TD width=59%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hdlg</I></P>

<P>Handle to the Find or Replace common dialog box window for which the message is intended. </P>

<P><I>uiMsg</I></P>

<P>Identifies the message being received.</P>

<P><I>wParam</I></P>

<P>Specifies additional information about the message. The exact meaning depends on the value of the <I>uiMsg </I>parameter.</P>

<P><I>lParam</I></P>

<P>Specifies additional information about the message. The exact meaning depends on the value of the <I>uiMsg</I> parameter.</P>

<P>If the <I>uiMsg</I> parameter indicates the <A HREF="ii1w.b.htm">WM_INITDIALOG</A> message, <I>lParam</I> is a pointer to a <A HREF="1de83do.htm"><B>FINDREPLACE</B></A> structure containing the values specified when the common dialog box was created.</P>

<P></P>

<P><B>Return Values</B></P>

<P>If the hook procedure returns zero, the default dialog box procedure processes the message.</P>

<P>If the hook procedure returns a nonzero value, the default dialog box procedure ignores the message.</P>

<P><B>Remarks</B></P>

<P>When you use the <A HREF="55jx_hv.htm"><B>FindText</B></A> or <A HREF="1s0xwwr.htm"><B>ReplaceText</B></A> functions to create a Find or Replace common dialog box, you can provide an <B>FRHookProc</B> hook procedure to process messages or notifications intended for the dialog box procedure. To enable the hook procedure, use the <A HREF="1de83do.htm"><B>FINDREPLACE</B></A> structure that you passed to the dialog creation function. Specify the address of the hook procedure in the <B>lpfnHook</B> member and specify the FR_ENABLEHOOK flag in the <B>Flags</B> member.</P>

<P>The default dialog box procedure processes the WM_INITDIALOG message before passing it to the hook procedure. For all other messages, the hook procedure receives the message first. Then, the return value of the hook procedure determines whether the default dialog procedure processes the message or ignores it.</P>

<P>If the hook procedure processes the <A HREF="jye6cz.htm">WM_CTLCOLORDLG</A> message, it must return a valid brush handle for painting the background of the dialog box. In general, if the hook procedure processes any WM_CTLCOLOR* message, it must return a valid brush handle for painting the background of the specified control.</P>

<P>Do not call the <A HREF="nyk21c.htm"><B>EndDialog</B></A> function from the hook procedure. Instead, the hook procedure can call the <A HREF="fixdt_.htm"><B>PostMessage</B></A> function to post a WM_COMMAND message with the IDABORT value to the dialog box procedure. Posting IDABORT closes the dialog box and causes the dialog box function to return FALSE. If you need to know why the hook procedure closed the dialog box, you must provide your own communication mechanism between the hook procedure and your application.</P>

<P>You can subclass the standard controls of the common dialog box. However, the common dialog box procedure may also subclass the controls. Because of this, you should subclass controls when your hook procedure processes the WM_INITDIALOG message. This ensures that your subclass procedure receives the control-specific messages before the subclass procedure set by the dialog box procedure. </P>

<P><B>FRHookProc</B> is a placeholder for the application-defined or library-defined function name. The <B>LPFRHOOKPROC</B> type is a pointer to an <B>FRHookProc</B> hook procedure.</P>

<P><B>See Also</B></P>

<P><A HREF="nyk21c.htm"><B>EndDialog</B></A>, <A HREF="1de83do.htm"><B>FINDREPLACE</B></A>, <A HREF="55jx_hv.htm"><B>FindText</B></A>, <A HREF="fixdt_.htm"><B>PostMessage</B></A>, <A HREF="1s0xwwr.htm"><B>ReplaceText</B></A>, <A HREF="ii1w.b.htm">WM_INITDIALOG</A>, <A HREF="jye6cz.htm">WM_CTLCOLORDLG</A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

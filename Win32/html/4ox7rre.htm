<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>Clipping Regions</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="4ox7rre"></A><B>Clipping Regions</B></P>

<P>A clipping region is one of the graphic objects that an application can select into a device context (DC). It is typically rectangular. Some device contexts provide a predefined or default clipping region while others do not. For example, if you obtain a device context handle from the <A HREF="f7ytuy.htm"><B>BeginPaint</B></A> function, the DC contains a predefined rectangular clipping region that corresponds to the invalid rectangle that requires repainting. However, if you obtain a device context handle by calling the <A HREF="14cje25.htm"><B>CreateDC</B></A> or <A HREF="4f0b0z.htm"><B>GetDC</B></A> function, the DC does not contain a default clipping region. For more information about device contexts returned by the <B>BeginPaint</B> function, see <A HREF="1mptrl8.htm">Painting and Drawing</A>. For more information about device contexts returned by the <B>CreateDC</B> and <B>GetDC</B> functions, see <A HREF="2fduzal.htm">Device Contexts</A>. </P>

<P>Applications can perform a variety of operations on clipping regions. Some of these operations require a handle identifying the region and some do not. For example, an application can perform the following operations directly on a device context's clipping region: </P>

<P>·Determine whether graphics output appears within the region's borders by passing coordinates of the corresponding line, arc, bitmap, text, or filled shape to the <A HREF="1211veo.htm"><B>PtVisible</B></A> function. </P>

<P>·Determine whether part of the client area intersects a region by calling the <A HREF="3i9nz4..htm"><B>RectVisible</B></A> function. </P>

<P>·Move the existing region by a specified offset by calling the <A HREF="326_kq3.htm"><B>OffsetClipRgn</B></A> function. </P>

<P>·Exclude a rectangular part of the client area from the current clipping region by calling the <A HREF="1j1x7x..htm"><B>ExcludeClipRect</B></A> function. </P>

<P>·Combine a rectangular part of the client area with the current clipping region by calling the <A HREF="1nh16vf.htm"><B>IntersectClipRect</B></A> function. </P>

<P></P>

<P>After obtaining a handle identifying the clipping region, an application can perform any operation that is common with regions; for example: </P>

<P>·Combining a copy of the current clipping region with a second region by calling the <A HREF="cyo37b.htm"><B>CombineRgn</B></A> function. </P>

<P>·Compare a copy of the current clipping region to a second region by calling the <A HREF="821645.htm"><B>EqualRgn</B></A> function. </P>

<P>·Determine whether a point lies within the interior of a copy of the current clipping region by calling the <A HREF="hr5djq.htm"><B>PtInRegion</B></A> function. </P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>BitBlt</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="31vu054"></A><B>BitBlt  <A HREF="149e86e.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="15l9v8p.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="1z.4d3.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>BitBlt</B> function performs a bit-block transfer of the color data corresponding to a rectangle of pixels from the specified source device context into a destination device context. </P>

<P><B>BOOL BitBlt(</B></P>

<TABLE cols=2 width=519>

<TR VALIGN="top">
<TD width=29%><B>HDC</B> <I>hdcDest</I><B>,</B></TD>
<TD width=71%>// handle to destination device context </TD>
</TR>

<TR VALIGN="top">
<TD width=29%><B>    int</B> <I>nXDest</I><B>,</B></TD>
<TD width=71%>// x-coordinate of destination rectangle's upper-left corner</TD>
</TR>

<TR VALIGN="top">
<TD width=29%><B>    int</B> <I>nYDest</I><B>,</B></TD>
<TD width=71%>// y-coordinate of destination rectangle's upper-left corner</TD>
</TR>

<TR VALIGN="top">
<TD width=29%><B>    int</B> <I>nWidth</I><B>,</B></TD>
<TD width=71%>// width of destination rectangle </TD>
</TR>

<TR VALIGN="top">
<TD width=29%><B>    int</B> <I>nHeight</I><B>,</B></TD>
<TD width=71%>// height of destination rectangle </TD>
</TR>

<TR VALIGN="top">
<TD width=29%><B>    HDC</B> <I>hdcSrc</I><B>,</B></TD>
<TD width=71%>// handle to source device context </TD>
</TR>

<TR VALIGN="top">
<TD width=29%><B>    int</B> <I>nXSrc</I><B>,</B></TD>
<TD width=71%>// x-coordinate of source rectangle's upper-left corner  </TD>
</TR>

<TR VALIGN="top">
<TD width=29%><B>    int</B> <I>nYSrc</I><B>,</B></TD>
<TD width=71%>// y-coordinate of source rectangle's upper-left corner</TD>
</TR>

<TR VALIGN="top">
<TD width=29%><B>    DWORD</B> <I>dwRop</I> </TD>
<TD width=71%>// raster operation code </TD>
</TR>

<TR VALIGN="top">
<TD width=29%><B>   );</B></TD>
<TD width=71%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hdcDest</I></P>

<P>Identifies the destination device context. </P>

<P><I>nXDest</I></P>

<P>Specifies the logical x-coordinate of the upper-left corner of the destination rectangle.</P>

<P><I>nYDest</I></P>

<P>Specifies the logical y-coordinate of the upper-left corner of the destination rectangle. </P>

<P><I>nWidth</I></P>

<P>Specifies the logical width of the source and destination rectangles. </P>

<P><I>nHeight</I></P>

<P>Specifies the logical height of the source and the destination rectangles. </P>

<P><I>hdcSrc</I></P>

<P>Identifies the source device context. </P>

<P><I>nXSrc</I></P>

<P>Specifies the logical x-coordinate of the upper-left corner of the source rectangle. </P>

<P><I>nYSrc</I></P>

<P>Specifies the logical y-coordinate of the upper-left corner of the source rectangle. </P>

<P><I>dwRop</I></P>

<P>Specifies a raster-operation code. These codes define how the color data for the source rectangle is to be combined with the color data for the destination rectangle to achieve the final color. </P>

<P>The following list shows some common raster operation codes: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=29%><B>Value</B></TD>
<TD width=71%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=29%>BLACKNESS</TD>
<TD width=71%>Fills the destination rectangle using the color associated with index 0 in the physical palette. (This color is black for the default physical palette.)</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>DSTINVERT</TD>
<TD width=71%>Inverts the destination rectangle.</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>MERGECOPY</TD>
<TD width=71%>Merges the colors of the source rectangle with the specified pattern by using the Boolean AND operator.</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>MERGEPAINT</TD>
<TD width=71%>Merges the colors of the inverted source rectangle with the colors of the destination rectangle by using the Boolean OR operator.</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>NOTSRCCOPY</TD>
<TD width=71%>Copies the inverted source rectangle to the destination.</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>NOTSRCERASE</TD>
<TD width=71%>Combines the colors of the source and destination rectangles by using the Boolean OR operator and then inverts the resultant color.</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>PATCOPY</TD>
<TD width=71%>Copies the specified pattern into the destination bitmap.</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>PATINVERT</TD>
<TD width=71%>Combines the colors of the specified pattern with the colors of the destination rectangle by using the Boolean XOR operator.</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>PATPAINT</TD>
<TD width=71%>Combines the colors of the pattern with the colors of the inverted source rectangle by using the Boolean OR operator. The result of this operation is combined with the colors of the destination rectangle by using the Boolean OR operator.</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>SRCAND</TD>
<TD width=71%>Combines the colors of the source and destination rectangles by using the Boolean AND operator.</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>SRCCOPY</TD>
<TD width=71%>Copies the source rectangle directly to the destination rectangle.</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>SRCERASE</TD>
<TD width=71%>Combines the inverted colors of the destination rectangle with the colors of the source rectangle by using the Boolean AND operator.</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>SRCINVERT</TD>
<TD width=71%>Combines the colors of the source and destination rectangles by using the Boolean XOR operator.</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>SRCPAINT</TD>
<TD width=71%>Combines the colors of the source and destination rectangles by using the Boolean OR operator.</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>WHITENESS</TD>
<TD width=71%>Fills the destination rectangle using the color associated with index 1 in the physical palette. (This color is white for the default physical palette.)</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is nonzero.</P>

<P>If the function fails, the return value is zero. To get extended error information, call <A HREF="11c2vs7.htm"><B>GetLastError</B></A>. </P>

<P><B>Remarks</B></P>

<P>If a rotation or shear transformation is in effect in the source device context, <B>BitBlt</B> returns an error. If other transformations exist in the source device context (and a matching transformation is <I>not</I> in effect in the destination device context), the rectangle in the destination device context is stretched, compressed, or rotated as necessary. </P>

<P>If the color formats of the source and destination device contexts do not match, the <B>BitBlt</B> function converts the source color format to match the destination format. </P>

<P>When an enhanced metafile is being recorded, an error occurs if the source device context identifies an enhanced-metafile device context. </P>

<P>Not all devices support the <B>BitBlt</B> function. For more information, see the RC_BITBLT raster capability entry in <B>GetDeviceCaps</B>. </P>

<P><B>BitBlt</B> returns an error if the source and destination device contexts represent different devices. </P>

<P><B>See Also</B></P>

<P><A HREF="19irwll.htm"><B>GetDeviceCaps</B></A>, <A HREF="137o3as.htm"><B>MaskBlt</B></A>, <A HREF="2mp.0ho.htm"><B>PlgBlt</B></A>, <A HREF="474t_r.htm"><B>StretchBlt</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

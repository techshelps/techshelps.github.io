<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Anonymous Pipes</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="gw06sy"></A><B>Anonymous Pipes</B></P>

<P>An <I>anonymous pipe</I> is an unnamed, one-way pipe that transfers data between a parent process and a child process or between two child processes of the same parent process. Although it is possible to use anonymous pipes for communication between unrelated processes, it is easier to use named pipes for that purpose (for more information, see <A HREF="1p9xp84.htm">Named Pipes</A>). Anonymous pipes are always local; they cannot be used for communication over a network. </P>

<P>The <A HREF="xn_62d.htm"><B>CreatePipe</B></A> function creates an anonymous pipe and returns two handles, one to the read end and one to the write end of the pipe. The read handle has only read access to the pipe, and the write handle has only write access to the pipe. To communicate through the pipe, a handle to one of the ends must be passed to another process. Usually, this is done through inheritance; that is, a child process inherits a handle from its parent process. The inheritability of these handles is controlled by the creating process in the following ways: </P>

<P>·The <B>CreatePipe</B> function specifies a <A HREF="be53kg.htm"><B>SECURITY_ATTRIBUTES</B></A> structure. If the <B>bInheritHandle</B> member of this structure is TRUE, the handles can be inherited. </P>

<P>·The <A HREF="1ojqkwy.htm"><B>DuplicateHandle</B></A> function can change the inheritability of a pipe handle. This function enables a process to create a noninheritable duplicate of an inheritable pipe handle or to create an inheritable duplicate of a noninheritable pipe handle. </P>

<P>·The <A HREF="5fbj_xx.htm"><B>CreateProcess</B></A> function enables a parent process to specify whether the new child process will inherit all or none of the parent's inheritable handles. </P>

<P></P>

<P>When a child process inherits a handle, the system enables the process to access the pipe referred to by that handle. However, the parent process must communicate the handle value to the child process. Typically, this is done by using the <A HREF="1crxpv2.htm"><B>SetStdHandle</B></A> and <A HREF="1b8l_fr.htm"><B>GetStdHandle</B></A> functions, which set and retrieve the standard handles (standard input, standard output, or standard error) of a process. The parent process can specify a pipe handle in a call to <B>SetStdHandle</B> before the child process is created. The current standard handles of the parent process are inherited by the child process. So, when the child process starts up, it can use the <B>GetStdHandle</B> function to retrieve the handle value. The parent process can change its own standard handles without affecting the standard handles of its existing child processes. </P>

<P>To read from the pipe, a process uses the read handle in a call to the <A HREF="cjnd8p.htm"><B>ReadFile</B></A> function. When a write operation of any number of bytes completes, the <B>ReadFile</B> call returns. The <B>ReadFile</B> call also returns when all handles to the write end of the pipe have been closed or if any errors occur before the read operation completes normally.</P>

<P>To write to the pipe, a process uses the write handle in a call to the <A HREF="g0sox_.htm"><B>WriteFile</B></A> function. <B>WriteFile</B> does not return until the specified number of bytes has been written or an error occurs. If the pipe's buffer is full and bytes remain to be written, <B>WriteFile</B> does not return until some other process or thread reads from the pipe, making more buffer space available. <A HREF="xn_62d.htm"><B>CreatePipe</B></A> enables the creating process to specify a buffer size for the pipe, or it can use the default buffer size. </P>

<P>Asynchronous (overlapped) read and write operations are not supported for anonymous pipes. This means that the <A HREF="fm7wz7.htm"><B>ReadFileEx</B></A> and <A HREF="12g2wey.htm"><B>WriteFileEx</B></A> functions cannot be used with anonymous pipes. The <I>lpOverLapped</I> parameter of the <B>ReadFile</B> and <B>WriteFile</B> functions is ignored when used with an anonymous pipe. </P>

<P>An anonymous pipe exists until all handles to both read and write ends of the pipe are closed by the <A HREF="ngwwie.htm"><B>CloseHandle</B></A> function. </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

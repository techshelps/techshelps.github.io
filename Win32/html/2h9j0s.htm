<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>Creating a Spell Dialog Box</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="2h9j0s"></A><B>Creating a Spell Dialog Box</B></P>

<P>Following are the dialog box procedure and supporting functions for the spelling checker dialog box. </P>

<P>HWND hwndMain;  </P>

<P>HWND hwndEdit; </P>

<P>char achTemp[256];       /* temporary buffer            */ </P>

<P></P>

<P>LPSTR lpstrDict;         /* buffer for dictionary file  */ </P>

<P>LPSTR *paLpDict;         /* array of pointers to words  */ </P>

<P>UINT  cWords;            /* number of words             */ </P>

<P></P>

<P>/******************************************************** </P>

<P></P>

<P>FUNCTION:   SpellDlgProc </P>

<P></P>

<P>PURPOSE:    Dialog procedure for Spell dialog box. </P>

<P></P>

<P>*********************************************************/ </P>

<P></P>

<P>BOOL CALLBACK SpellDlgProc(hwndDlg, msg, wParam, lParam) </P>

<P>HWND hwndDlg; </P>

<P>UINT msg; </P>

<P>WPARAM wParam; </P>

<P>LPARAM lParam; </P>

<P>{ </P>

<P>switch (msg) { </P>

<P>case WM_INITDIALOG: </P>

<P>if (!OpenDictionary()) { </P>

<P>EndDialog(hwndDlg, 0); </P>

<P>break; </P>

<P>} </P>

<P>SendMessage(hwndEdit, EM_SETSEL, 0, 0); </P>

<P>do </P>

<P>if (!SelectNextWord(hwndEdit, achTemp)) { </P>

<P>GlobalFree((HGLOBAL) lpstrDict); </P>

<P>LocalFree((HLOCAL) paLpDict); </P>

<P>EndDialog(hwndDlg, 0); </P>

<P>break; </P>

<P>} </P>

<P>while (!InitSpellList( </P>

<P>GetDlgItem(hwndDlg, IDCOMBO), achTemp)); </P>

<P>break; </P>

<P></P>

<P>case WM_COMMAND: </P>

<P>switch (LOWORD(wParam)) { </P>

<P>case IDCOMBO: </P>

<P>if (HIWORD(wParam) != CBN_DBLCLK) </P>

<P>break; </P>

<P></P>

<P>/* For a double-click, process the OK case. */ </P>

<P></P>

<P>case IDOK: </P>

<P>SendDlgItemMessage(hwndDlg, IDCOMBO, </P>

<P>WM_GETTEXT, sizeof(achTemp), </P>

<P>(LPARAM) achTemp); </P>

<P>SendMessage(hwndEdit, EM_REPLACESEL, 0, </P>

<P>(LPARAM) achTemp); </P>

<P></P>

<P>/* Fall through to get the next word. */ </P>

<P></P>

<P>case IDIGNORE: </P>

<P>do </P>

<P>if (!SelectNextWord(hwndEdit, achTemp)) { </P>

<P>EndDialog(hwndDlg, 0); </P>

<P>break; </P>

<P>} </P>

<P>while (!InitSpellList(GetDlgItem(hwndDlg, </P>

<P>IDCOMBO), achTemp)); </P>

<P>break; </P>

<P></P>

<P>case IDCANCEL: </P>

<P>EndDialog(hwndDlg, 0); </P>

<P>} </P>

<P>break; </P>

<P></P>

<P>case WM_DESTROY: </P>

<P>GlobalFree((HGLOBAL) lpstrDict); </P>

<P>LocalFree((HLOCAL) paLpDict); </P>

<P>break; </P>

<P></P>

<P>default: </P>

<P>return FALSE; </P>

<P>} </P>

<P>return TRUE; </P>

<P>} </P>

<P></P>

<P></P>

<P>/******************************************************** </P>

<P></P>

<P>FUNCTION:   InitSpellList </P>

<P></P>

<P>PURPOSE:    Initializes the selection field and list </P>

<P>of suggestions for the specified word, if </P>

<P>it is not in the dictionary. </P>

<P></P>

<P>RETURNS:    If the list is initialized, the return </P>

<P>value is TRUE. If an error occurs or the </P>

<P>word is in the dictionary, the return </P>

<P>value is FALSE. </P>

<P></P>

<P>*********************************************************/ </P>

<P></P>

<P>BOOL PASCAL InitSpellList(HWND hwndCombo, LPSTR lpszWord) </P>

<P>{ </P>

<P>int min = 0;        /* beginning of search range */ </P>

<P>int max = cWords;   /* end of search range       */ </P>

<P>int n;              /* index of word             */ </P>

<P>int cmp;            /* result of comparison      */ </P>

<P>char ch;            /* first character in word   */ </P>

<P></P>

<P>ch = *lpszWord; </P>

<P>CharLowerBuff(&amp;ch, 1); </P>

<P></P>

<P>/* </P>

<P>* Perform a binary search for the word. </P>

<P>* </P>

<P>* The global array paLpDict contains pointers to words </P>

<P>* in the global array lpstrDict. These two variables are </P>

<P>* initialized by the OpenDictionary function. </P>

<P>*/ </P>

<P></P>

<P>n = max / 2; </P>

<P>while (min &lt; max) { </P>

<P>cmp = lstrcmpi(lpszWord, paLpDict[n]); </P>

<P>if (cmp == 0) </P>

<P>return FALSE;       /* not misspelled */ </P>

<P></P>

<P>if (cmp &lt; 0) </P>

<P>max = n; </P>

<P>else </P>

<P>min = n + 1; </P>

<P>n = (min + max) / 2; </P>

<P>} </P>

<P></P>

<P>/* List words beginning with the same letter as lpszWord. */ </P>

<P></P>

<P>SendMessage(hwndCombo, CB_RESETCONTENT, 0, 0); </P>

<P>while (n &gt; 0 &amp;&amp; *paLpDict[n - 1] == ch) </P>

<P>n--; </P>

<P>while (*paLpDict[n] == ch) </P>

<P>SendMessage(hwndCombo, CB_ADDSTRING, </P>

<P>0, (LPARAM) paLpDict[n++]); </P>

<P></P>

<P>/* Place the word in the selection field. */ </P>

<P></P>

<P>SendMessage(hwndCombo, WM_SETTEXT, 0, (LPARAM) lpszWord); </P>

<P></P>

<P>return TRUE; </P>

<P>} </P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

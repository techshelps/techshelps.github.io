<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>CryptHashSessionKey [New - Windows NT] [New - Windows 95, OEM Service Release 2]</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="21hhdd_"></A><B>CryptHashSessionKey  <A HREF="99q09x0.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="41b3l2.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="rkgz3o.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>[New - Windows NT]</P>

<P>[New - Windows 95, OEM Service Release 2]</P>

<P>The <B>CryptHashSessionKey</B> function is used to compute the cryptographic hash on a key object. This function can be called multiple times with the same hash handle to compute the hash on multiple keys. Calls to <B>CryptHashSessionKey</B> can be interspersed with calls to <A HREF="46c7fgj.htm"><B>CryptHashData</B></A>.</P>

<P>Before calling this function the <A HREF="4hq3.7.htm"><B>CryptCreateHash</B></A> function must be called to get a handle to a hash object. </P>

<P><B>BOOL CRYPTFUNC CryptHashSessionKey(</B></P>

<TABLE cols=2 width=219>

<TR VALIGN="top">
<TD width=84%><B>HCRYPTHASH </B><I>hHash</I><B>,</B></TD>
<TD width=16%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=84%><B>    HCRYPTKEY </B><I>hKey</I><B>,</B></TD>
<TD width=16%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=84%><B>    DWORD </B><I>dwFlags</I></TD>
<TD width=16%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=84%><B>   );</B></TD>
<TD width=16%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hHash</I></P>

<P>[in] A handle to the hash object. An application obtains this handle using the <A HREF="4hq3.7.htm"><B>CryptCreateHash</B></A> function.</P>

<P><I>hKey</I></P>

<P>[in] A handle to the key object to be hashed.</P>

<P><I>dwFlags</I></P>

<P>[in] The flag values. This parameter is reserved for future use and should always be zero.</P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is nonzero.</P>

<P>If the function fails, the return value is zero. To retrieve extended error information, use the <A HREF="11c2vs7.htm"><B>GetLastError</B></A> function.</P>

<P>The following table lists the error codes most commonly returned by the <B>GetLastError</B> function. The error codes prefaced by "NTE" are generated by the particular CSP you are using.</P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=47%><B>Error</B></TD>
<TD width=53%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=47%>ERROR_INVALID_HANDLE</TD>
<TD width=53%>One of the parameters specifies an invalid handle.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>ERROR_INVALID_PARAMETER</TD>
<TD width=53%>One of the parameters contains an invalid value. This is most often an illegal pointer.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>NTE_BAD_ALGID</TD>
<TD width=53%>The <I>hHash</I> handle specifies an algorithm that this CSP does not support.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>NTE_BAD_FLAGS</TD>
<TD width=53%>The <I>dwFlags</I> parameter is nonzero.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>NTE_BAD_HASH</TD>
<TD width=53%>The hash object specified by the <I>hHash</I> parameter is invalid.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>NTE_BAD_HASH_STATE</TD>
<TD width=53%>An attempt was made to add data to a hash object that is already marked "finished."</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>NTE_BAD_KEY</TD>
<TD width=53%>A keyed hash algorithm is being used, but the session key is no longer valid. This error will be generated if the session key is destroyed before the hashing operating is complete.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>NTE_BAD_UID</TD>
<TD width=53%>The CSP context that was specified when the hash object was created cannot be found.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>NTE_FAIL</TD>
<TD width=53%>The function failed in some unexpected way.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Example</B></P>

<P>#include &lt;wincrypt.h&gt;</P>

<P></P>

<P>HCRYPTPROV hProv = 0;</P>

<P>HCRYPTHASH hHash = 0;</P>

<P>HCRYPTKEY hKey   = 0;</P>

<P>// Get handle to the default provider.</P>

<P>if(!CryptAcquireContext(&amp;hProv, NULL, NULL, PROV_RSA_FULL, 0)) {</P>

<P>printf("Error %x during CryptAcquireContext!\n", GetLastError());</P>

<P>goto done;</P>

<P>}</P>

<P>// Create hash object.</P>

<P>if(!CryptCreateHash(hProv, CALG_MD5, 0, 0, &amp;hHash)) {</P>

<P>printf("Error %x during CryptBeginHash!\n", GetLastError());</P>

<P>goto done;</P>

<P>}</P>

<P>// Create random session key.</P>

<P>if(!CryptGenKey(hProv, CALG_RC2, CRYPT_EXPORTABLE, &amp;hKey)) {</P>

<P>printf("Error %x during CryptGenKey!\n", GetLastError());</P>

<P>goto done;</P>

<P>}</P>

<P>// Hash session key.</P>

<P>if(!CryptHashSessionKey(hHash, hKey, 0)) {</P>

<P>printf("Error %x during CryptHashSessionKey!\n", GetLastError());</P>

<P>goto done;</P>

<P>}</P>

<P>// Use the hash object for something.</P>

<P>...</P>

<P>done:</P>

<P>// Destroy hash object.</P>

<P>if(hHash) CryptDestroyHash(hHash);</P>

<P>// Destroy session key.</P>

<P>if(hKey) CryptDestroyKey(hKey);</P>

<P>// Release CSP handle.</P>

<P>if(hProv) CryptReleaseContext(hProv,0);</P>

<P></P>

<P><B>See Also</B></P>

<P><A HREF="4hq3.7.htm"><B>CryptCreateHash</B></A>, <A HREF="dnbayj.htm"><B>CryptGenKey</B></A>, <A HREF="46c7fgj.htm"><B>CryptHashData</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

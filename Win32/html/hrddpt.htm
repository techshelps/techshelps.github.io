<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>PROCESS_HEAP_ENTRY</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="hrddpt"></A><B>PROCESS_HEAP_ENTRY  <A HREF="mb1klo.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="7gqv3r.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="3ejc.0.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>PROCESS_HEAP_ENTRY</B> structure contains information about a heap element. The <A HREF="19nugrr.htm"><B>HeapWalk</B></A> function uses a <B>PROCESS_HEAP_ENTRY </B>structure to enumerate the elements of a heap.</P>

<P>typedef struct _PROCESS_HEAP_ENTRY {</P>

<P>PVOID lpData;</P>

<P>DWORD cbData;</P>

<P>BYTE cbOverhead;</P>

<P>BYTE iRegionIndex;</P>

<P>WORD wFlags;</P>

<P>union {</P>

<P>struct {</P>

<P>HANDLE hMem;</P>

<P>DWORD dwReserved[ 3 ];</P>

<P>} Block;</P>

<P>struct {</P>

<P>DWORD dwCommittedSize;</P>

<P>DWORD dwUnCommittedSize;</P>

<P>LPVOID lpFirstBlock;</P>

<P>LPVOID lpLastBlock;</P>

<P>} Region;</P>

<P>};</P>

<P>} PROCESS_HEAP_ENTRY;  </P>

<P></P>

<P><B>Members</B></P>

<P><B>lpData</B></P>

<P>Points to the data portion of the heap element. </P>

<P>To initiate a <B>HeapWalk</B> heap enumeration, set <B>lpData</B> to NULL.</P>

<P>If the PROCESS_HEAP_REGION bit flag is set in the <B>wFlags</B> member, <B>lpData</B> points to the first virtual address used by the region. </P>

<P>If the PROCESS_HEAP_UNCOMMITTED_RANGE bit flag is set in <B>wFlags</B>, <B>lpData</B> points to the beginning of the range of uncommitted memory. </P>

<P><B>cbData</B></P>

<P>Specifies the size, in bytes, of the data portion of the heap element.</P>

<P>If the PROCESS_HEAP_REGION bit flag is set in <B>wFlags</B>, <B>cbData</B> specifies the total size, in bytes, of the address space that is reserved for this region. </P>

<P>If the PROCESS_HEAP_UNCOMMITTED_RANGE bit flag is set in <B>wFlags</B>, <B>cbData</B> specifies the size, in bytes, of the range of uncommitted memory. </P>

<P><B>cbOverhead</B></P>

<P>Specifies the size, in bytes, of the data used by the system to maintain information about the heap element. These overhead bytes are in addition to the <B>cbData</B> bytes of the data portion of the heap element.</P>

<P>If the PROCESS_HEAP_REGION bit flag is set in <B>wFlags</B>, <B>cbOverhead</B> specifies the size, in bytes, of the heap control structures that describe the region. </P>

<P>If the PROCESS_HEAP_UNCOMMITTED_RANGE bit flag is set in <B>wFlags</B>, <B>cbOverhead</B> specifies the size, in bytes, of the control structures that describe this uncommitted range. </P>

<P><B>iRegionIndex</B></P>

<P>Identifies the heap region that contains the heap element. A heap consists of one or more regions of virtual memory, each with a unique region index.</P>

<P>In the first heap entry returned for most heap regions, <B>HeapWalk</B> sets the PROCESS_HEAP_REGION flag in the <B>wFlags</B> member. When this flag is set, the members of the <B>Region</B> structure contain additional information about the region.</P>

<P>The <A HREF="12yjji7.htm"><B>HeapAlloc</B></A> function sometimes uses the <A HREF="1m7v8go.htm"><B>VirtualAlloc</B></A> function to allocate large blocks from a growable heap. The heap manager treats such a large block allocation as a separate region with a unique region index. <B>HeapWalk</B> does not set the PROCESS_HEAP_REGION flag in the heap entry returned for a large block region, so the members of the <B>Region</B> structure are not valid. You can use the <A HREF="1mh41k0.htm"><B>VirtualQuery</B></A> function to get additional information about a large block region.</P>

<P><B>wFlags</B></P>

<P>A set of bit flags that specify properties of the heap element. Some of these flags affect the meaning of other members of this <B>PROCESS_HEAP_ENTRY</B> data structure. The following bit-flag constants are defined: </P>

<P></P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=56%><B>Value</B></TD>
<TD width=44%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=56%>PROCESS_HEAP_REGION</TD>
<TD width=44%>If this flag is set, the heap element is located at the beginning of a region of contiguous virtual memory in use by the heap. 
<P>If this flag is set, the <B>lpData</B> member of the structure points to the first virtual address used by the region; the <B>cbData</B> member specifies the total size, in bytes, of the address space that is reserved for this region; and the <B>cbOverhead</B> member specifies the size, in bytes, of the heap control structures that describe the region.</P>

<P>If this flag is set, the <B>Region</B> structure becomes valid. The <B>dwCommittedSize</B>, <B>dwUnCommittedSize</B>, <B>lpFirstBlock</B>, and <B>lpLastBlock</B> members of the structure contain additional information about the region.</P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=56%>PROCESS_HEAP_UNCOMMITTED_RANGE</TD>
<TD width=44%>If this flag is set, the heap element is located in a range of uncommitted memory within the heap region. 
<P>If this flag is set, the <B>lpData</B> member points to the beginning of the range of uncommitted memory; the <B>cbData</B> member specifies the size, in bytes, of the range of uncommitted memory; and the <B>cbOverhead</B> member specifies the size, in bytes, of the control structures that describe this uncommitted range.</P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=56%>PROCESS_HEAP_ENTRY_BUSY</TD>
<TD width=44%>If this flag is set, the heap element is an allocated block. 
<P>If both this flag and the PROCESS_HEAP_ENTRY_MOVEABLE flag are set, the <B>Block</B> structure becomes valid. The <B>hMem</B> member of the <B>Block</B> structure contains a handle to the allocated, moveable memory block. </P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=56%>PROCESS_HEAP_ENTRY_MOVEABLE</TD>
<TD width=44%>This flag is only valid if the PROCESS_HEAP_ENTRY_BUSY flag is set, indicating that the heap element is an allocated block.
<P>If this flag is valid and set, the block was allocated with the LMEM_MOVEABLE or GMEM_MOVEABLE flag, and the <B>Block</B> structure becomes valid. The <B>hMem</B> member of the <B>Block</B> structure contains a handle to the allocated, moveable memory block. </P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=56%>PROCESS_HEAP_ENTRY_DDESHARE</TD>
<TD width=44%>This flag is only valid if the PROCESS_HEAP_ENTRY_BUSY flag is set, indicating that the heap element is an allocated block.
<P>If this flag is valid and set, the block was allocated with the GMEM_DDESHARE flag. For a discussion of the GMEM_DDESHARE flag, see <A HREF="f12w9..htm"><B>GlobalAlloc</B></A> .</P>
</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Block</B></P>

<P>This structure is valid only if both the PROCESS_HEAP_ENTRY_BUSY and PROCESS_HEAP_ENTRY_MOVEABLE flags in <B>wFlags</B> are set. </P>

<P>The members of the <B>Block</B> structure are as follows: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=34%><B>Member</B></TD>
<TD width=66%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=34%><B>hMem</B></TD>
<TD width=66%>Contains a handle to the allocated, moveable memory block.</TD>
</TR>

<TR VALIGN="top">
<TD width=34%><B>dwReserved</B></TD>
<TD width=66%>Reserved; not used.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Region</B></P>

<P>This structure is valid only if the PROCESS_HEAP_REGION flag is set in the <B>wFlags</B> member. </P>

<P>The members of the <B>Region</B> structure are as follows: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=34%><B>Member</B></TD>
<TD width=66%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=34%><B>dwCommittedSize</B></TD>
<TD width=66%>Specifies the number of bytes in the heap region that are currently committed as free memory blocks, busy memory blocks, or heap control structures.
<P>This is an optional field that is set to zero if the number of committed bytes is not available.</P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=34%><B>dwUnCommittedSize</B></TD>
<TD width=66%>Specifies the number of bytes in the heap region that are currently uncommitted.
<P>This is an optional field that is set to zero if the number of uncommitted bytes is not available.  </P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=34%><B>lpFirstBlock</B></TD>
<TD width=66%>Pointer to the first valid memory block in this heap region.</TD>
</TR>

<TR VALIGN="top">
<TD width=34%><B>lpLastBlock</B></TD>
<TD width=66%>Pointer to the first invalid memory block in thisheap region. </TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>See Also</B></P>

<P><A HREF="f12w9..htm"><B>GlobalAlloc</B></A>, <A HREF="12yjji7.htm"><B>HeapAlloc</B></A>, <A HREF="19nugrr.htm"><B>HeapWalk</B></A>, <A HREF="1m7v8go.htm"><B>VirtualAlloc</B></A>, <A HREF="1mh41k0.htm"><B>VirtualQuery</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

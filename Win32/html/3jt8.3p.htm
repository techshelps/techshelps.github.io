<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Using Cursor Functions to Create a Mousetrap</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="3jt8.3p"></A><B>Using Cursor Functions to Create a Mousetrap</B></P>

<P>The following example uses the <A HREF="1mr5nzr.htm"><B>SetCursorPos</B></A>, <A HREF=".p..gr.htm"><B>GetCursorPos</B></A>, <A HREF="cq665l.htm"><B>CreateCursor</B></A>, <A HREF="14g7vvz.htm"><B>LoadCursor</B></A>, and <A HREF="5j4u25.htm"><B>SetCursor</B></A> functions to create a simple mousetrap. It also uses cursor and timer functions to monitor the cursor's position every 10 seconds. If the cursor position has not changed in the last 10 seconds and the application's main window is minimized, the application changes the cursor and moves it to the mousetrap icon. </P>

<P>An example for a similar mousetrap is included in <A HREF="qqd_1o.htm">Icons</A>. It uses the <B>LoadCursor</B> and <A HREF="15isc96.htm"><B>LoadIcon</B></A> functions instead of the more device-dependent <B>CreateCursor</B> and <A HREF="1jwazi2.htm"><B>CreateIcon</B></A><B> </B>functions. </P>

<P>HICON hIcon1;               // icon handles  </P>

<P>POINT ptOld;                // previous cursor location </P>

<P>HCURSOR hCurs1;             // cursor handle </P>

<P></P>

<P></P>

<P>// The following cursor bitmasks are defined in a code </P>

<P>// example that appears earlier in this topic. </P>

<P></P>

<P>// Yin cursor AND and XOR bitmasks </P>

<P></P>

<P>BYTE ANDmaskCursor[] = ... </P>

<P>BYTE XORmaskCursor[] = ... </P>

<P></P>

<P>// Yang icon AND bitmask </P>

<P></P>

<P>BYTE ANDmaskIcon[] = {0xFF, 0xFF, 0xFF, 0xFF,  // line 1 </P>

<P>0xFF, 0xFF, 0xC3, 0xFF,  // line 2 </P>

<P>0xFF, 0xFF, 0x00, 0xFF,  // line 3 </P>

<P>0xFF, 0xFE, 0x00, 0x7F,  // line 4 </P>

<P></P>

<P>0xFF, 0xFC, 0x00, 0x1F,  // line 5 </P>

<P>0xFF, 0xF8, 0x00, 0x0F,  // line 6 </P>

<P>0xFF, 0xF8, 0x00, 0x0F,  // line 7 </P>

<P>0xFF, 0xF0, 0x00, 0x07,  // line 8 </P>

<P></P>

<P>0xFF, 0xF0, 0x00, 0x03,  // line 9 </P>

<P>0xFF, 0xE0, 0x00, 0x03,  // line 10 </P>

<P>0xFF, 0xE0, 0x00, 0x01,  // line 11 </P>

<P>0xFF, 0xE0, 0x00, 0x01,  // line 12 </P>

<P></P>

<P>0xFF, 0xF0, 0x00, 0x01,  // line 13 </P>

<P>0xFF, 0xF0, 0x00, 0x00,  // line 14 </P>

<P>0xFF, 0xF8, 0x00, 0x00,  // line 15 </P>

<P>0xFF, 0xFC, 0x00, 0x00,  // line 16 </P>

<P></P>

<P>0xFF, 0xFF, 0x00, 0x00,  // line 17 </P>

<P>0xFF, 0xFF, 0x80, 0x00,  // line 18 </P>

<P>0xFF, 0xFF, 0xE0, 0x00,  // line 19 </P>

<P>0xFF, 0xFF, 0xE0, 0x01,  // line 20 </P>

<P></P>

<P>0xFF, 0xFF, 0xF0, 0x01,  // line 21 </P>

<P>0xFF, 0xFF, 0xF0, 0x01,  // line 22 </P>

<P>0xFF, 0xFF, 0xF0, 0x03,  // line 23 </P>

<P>0xFF, 0xFF, 0xE0, 0x03,  // line 24 </P>

<P></P>

<P>0xFF, 0xFF, 0xE0, 0x07,  // line 25 </P>

<P>0xFF, 0xFF, 0xC0, 0x0F,  // line 26 </P>

<P>0xFF, 0xFF, 0xC0, 0x0F,  // line 27 </P>

<P>0xFF, 0xFF, 0x80, 0x1F,  // line 28 </P>

<P></P>

<P>0xFF, 0xFF, 0x00, 0x7F,  // line 29 </P>

<P>0xFF, 0xFC, 0x00, 0xFF,  // line 30 </P>

<P>0xFF, 0xF8, 0x03, 0xFF,  // line 31 </P>

<P>0xFF, 0xFC, 0x3F, 0xFF}; // line 32 </P>

<P></P>

<P>// Yang icon XOR bitmask </P>

<P></P>

<P>BYTE XORmaskIcon[] = {0x00, 0x00, 0x00, 0x00,  // line 1 </P>

<P>0x00, 0x00, 0x00, 0x00,  // line 2 </P>

<P>0x00, 0x00, 0x00, 0x00,  // line 3 </P>

<P>0x00, 0x00, 0x00, 0x00,  // line 4 </P>

<P></P>

<P>0x00, 0x00, 0x00, 0x00,  // line 5 </P>

<P>0x00, 0x00, 0x00, 0x00,  // line 6 </P>

<P>0x00, 0x00, 0x00, 0x00,  // line 7 </P>

<P>0x00, 0x00, 0x38, 0x00,  // line 8 </P>

<P></P>

<P>0x00, 0x00, 0x7C, 0x00,  // line 9 </P>

<P>0x00, 0x00, 0x7C, 0x00,  // line 10 </P>

<P>0x00, 0x00, 0x7C, 0x00,  // line 11  </P>

<P>0x00, 0x00, 0x38, 0x00,  // line 12 </P>

<P></P>

<P>0x00, 0x00, 0x00, 0x00,  // line 13 </P>

<P>0x00, 0x00, 0x00, 0x00,  // line 14 </P>

<P>0x00, 0x00, 0x00, 0x00,  // line 15 </P>

<P>0x00, 0x00, 0x00, 0x00,  // line 16 </P>

<P></P>

<P>0x00, 0x00, 0x00, 0x00,  // line 17 </P>

<P>0x00, 0x00, 0x00, 0x00,  // line 18 </P>

<P>0x00, 0x00, 0x00, 0x00,  // line 19 </P>

<P>0x00, 0x00, 0x00, 0x00,  // line 20 </P>

<P></P>

<P>0x00, 0x00, 0x00, 0x00,  // line 21 </P>

<P>0x00, 0x00, 0x00, 0x00,  // line 22 </P>

<P>0x00, 0x00, 0x00, 0x00,  // line 23 </P>

<P>0x00, 0x00, 0x00, 0x00,  // line 24 </P>

<P></P>

<P>0x00, 0x00, 0x00, 0x00,  // line 25 </P>

<P>0x00, 0x00, 0x00, 0x00,  // line 26 </P>

<P>0x00, 0x00, 0x00, 0x00,  // line 27 </P>

<P>0x00, 0x00, 0x00, 0x00,  // line 28 </P>

<P></P>

<P>0x00, 0x00, 0x00, 0x00,  // line 29 </P>

<P>0x00, 0x00, 0x00, 0x00,  // line 30 </P>

<P>0x00, 0x00, 0x00, 0x00,  // line 31 </P>

<P>0x00, 0x00, 0x00, 0x00}; // line 32 </P>

<P></P>

<P>hIcon1 = CreateIcon(hinst, // handle of app instance </P>

<P>32,           // icon width </P>

<P>32,           // icon height </P>

<P>1,            // number of XOR planes </P>

<P>1,            // number of bits per pixel </P>

<P>ANDmaskIcon,  // AND bitmask </P>

<P>XORmaskIcon); // XOR bitmask </P>

<P></P>

<P>hCurs1 = CreateCursor(hinst, // handle of app instance</P>

<P>19,         // horizontal position of hot spot </P>

<P>2,          // vertical position of hot spot </P>

<P>32,         // cursor width </P>

<P>32,         // cursor height </P>

<P>ANDmaskCursor,            // AND bitmask </P>

<P>XORmaskCursor);           // XOR bitmask </P>

<P></P>

<P>// Fill in the window class structure. </P>

<P></P>

<P>WNDCLASS  wc; </P>

<P></P>

<P>wc.hIcon = hIcon1;                        // class icon </P>

<P>wc.hCursor = LoadCursor(NULL, IDC_ARROW); // class cursor </P>

<P></P>

<P>//</P>

<P>// Register the window class and perform </P>

<P>// other application initialization. </P>

<P>//</P>

<P></P>

<P>// Set a timer for the mousetrap. </P>

<P></P>

<P>GetCursorPos(&amp;ptOld); </P>

<P></P>

<P>SetTimer(hwnd, IDT_CURSOR, 10000, (TIMERPROC) NULL); </P>

<P></P>

<P>LONG APIENTRY MainWndProc( </P>

<P>HWND hwnd,          // window handle </P>

<P>UINT message,       // type of message </P>

<P>UINT wParam,        // additional information </P>

<P>LONG lParam)        // additional information </P>

<P>{ </P>

<P></P>

<P>HDC hdc;            // handle of device context </P>

<P>POINT pt;           // current cursor location </P>

<P>RECT rc;            // iconized window location </P>

<P></P>

<P>switch (message) </P>

<P>{ </P>

<P>//</P>

<P>// Process other messages. </P>

<P>// </P>

<P>case WM_TIMER: </P>

<P>// If the window is minimized, compare the </P>

<P>// current cursor position with the one 10 </P>

<P>// seconds before. If the cursor position has </P>

<P>// not changed, move the cursor to the icon. </P>

<P></P>

<P>if (IsIconic(hwnd)) </P>

<P>{ </P>

<P>GetCursorPos(&amp;pt); </P>

<P></P>

<P>if ((pt.x == ptOld.x) &amp;&amp; (pt.y == ptOld.y)) </P>

<P>{ </P>

<P>GetWindowRect(hwnd, &amp;rc); </P>

<P>SetCursorPos(rc.left + 20, rc.top + 4); </P>

<P></P>

<P>// Note that the additional constants </P>

<P>// (20 and 4) are application-specific </P>

<P>// values to align the yin-shaped cursor </P>

<P>// and the yang-shaped icon. </P>

<P></P>

<P>} </P>

<P>else </P>

<P>{ </P>

<P>ptOld.x = pt.x; </P>

<P>ptOld.y = pt.y; </P>

<P>} </P>

<P>} </P>

<P></P>

<P>return 0; </P>

<P></P>

<P>case WM_SETCURSOR: </P>

<P>// If the window is minimized, draw hCurs1. </P>

<P>// If the window is not minimized, draw the </P>

<P>// default cursor (class cursor). </P>

<P></P>

<P>if (IsIconic(hwnd)) </P>

<P>{ </P>

<P>SetCursor(hCurs1); </P>

<P>break; </P>

<P>} </P>

<P></P>

<P>case WM_DESTROY: </P>

<P>// Destroy timer. </P>

<P></P>

<P>KillTimer(hwnd, IDT_CURSOR); </P>

<P></P>

<P>PostQuitMessage(0); </P>

<P>break; </P>

<P>} </P>

<P>} </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Virtual Memory Functions</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="kxdgbv"></A><B>Virtual Memory Functions</B></P>

<P>The Win32 API provides a set of virtual memory functions that enable a process to manipulate or determine the status of pages in its virtual address space. Many applications are able to satisfy their memory needs by using the standard allocation functions (<A HREF="f12w9..htm"><B>GlobalAlloc</B></A>, <A HREF="2_d2ee.htm"><B>LocalAlloc</B></A>, <B>malloc</B>, and so on). However, virtual memory functions provide some capabilities not available to the standard allocation functions. They can perform the following operations: </P>

<P>·Reserve a range of a process's virtual address space. Reserving address space does not allocate any physical storage, but it prevents other allocation operations from using the specified range. It does not affect the virtual address spaces of other processes. Reserving pages prevents needless consumption of physical storage, while enabling a process to reserve a range of its address space into which a dynamic data structure can grow. The process can allocate physical storage for this space, as needed. </P>

<P>·Commit a range of reserved pages in a process's virtual address space so that physical storage (either in RAM or on disk) is accessible only to the allocating process. </P>

<P>·Specify read-write, read-only, or no access for a range of committed pages. This differs from the standard allocation functions that always allocate pages with read-write access. </P>

<P>·Free a range of reserved pages, making the range of virtual addresses available for subsequent allocation operations by the calling process. </P>

<P>·Decommit a range of committed pages, releasing their physical storage and making it available for subsequent allocation by any process. </P>

<P>·Lock one or more pages of committed memory into physical memory (RAM) so that the system cannot swap the pages out to the paging file. </P>

<P>·Obtain information about a range of pages in the virtual address space of the calling process or a specified process. </P>

<P>·Change the access protection for a specified range of committed pages in the virtual address space of the calling process or a specified process. </P>

<P></P>

<P>The virtual memory functions manipulate pages of memory. The functions use the size of a page on the current computer to round off specified sizes and addresses.  </P>

<P>To determine the size of a page on the current computer, use the <A HREF="nh29xo.htm"><B>GetSystemInfo</B></A> function. </P>

<P>The <A HREF="1m7v8go.htm"><B>VirtualAlloc</B></A> function performs one of the following operations: </P>

<P>·Reserves one or more free pages. </P>

<P>·Commits one or more reserved pages. </P>

<P>·Reserves and commits one or more free pages. </P>

<P></P>

<P>You can specify the starting address of the pages to be reserved or committed, or you can allow the system to determine the address. The function rounds the specified address to the appropriate page boundary. Reserved pages are not accessible, but committed pages can be allocated with the PAGE_READWRITE, PAGE_READONLY, or PAGE_NOACCESS flag. When pages are committed, storage is allocated in the paging file, but each page is initialized and loaded into physical memory only at the first attempt to read from or write to that page. You can use normal pointer references to access memory committed by the <A HREF="1m7v8go.htm"><B>VirtualAlloc</B></A> function. </P>

<P>The <A HREF="8dcrwp.htm"><B>VirtualFree</B></A> function performs one of the following operations: </P>

<P>·Decommits one or more committed pages, changing the state of the pages to reserved. Decommitting pages releases the physical storage associated with the pages, making it available to be allocated by any process. Any block of committed pages can be decommitted. </P>

<P>·Releases a block of one or more reserved pages, changing the state of the pages to free. Releasing a block of pages makes the range of reserved addresses available to be allocated by the process. Reserved pages can be released only by freeing the entire block that was initially reserved by <B>VirtualAlloc</B>. </P>

<P>·Decommits and releases a block of one or more committed pages simultaneously, changing the state of the pages to free. The specified block must include the entire block initially reserved by <A HREF="1m7v8go.htm"><B>VirtualAlloc</B></A>, and all of the pages must be currently committed. </P>

<P></P>

<P>The <A HREF="8diouv.htm"><B>VirtualLock</B></A> function enables a process to lock one or more pages of committed memory into physical memory (RAM), preventing the system from swapping the pages out to the paging file. It can be used to ensure that critical data is accessible without disk access. Locking pages into memory is dangerous because it restricts the system's ability to manage memory. Excessive use of <B>VirtualLock</B> can degrade system performance by causing executable code to be swapped out to the paging file. The <A HREF="k2km58.htm"><B>VirtualUnlock</B></A> function unlocks memory locked by <B>VirtualLock</B>. </P>

<P>The <A HREF="1mh41k0.htm"><B>VirtualQuery</B></A> and <A HREF="1dhsym1.htm"><B>VirtualQueryEx</B></A> functions return information about a region of consecutive pages beginning at a specified address in the address space of a process. <B>VirtualQuery</B> returns information about memory in the calling process. <B>VirtualQueryEx</B> returns information about memory in a specified process and is used to support debuggers that need information about a process being debugged. The region of pages is bounded by the specified address rounded down to the nearest page boundary. It extends through all subsequent pages with the following attributes in common: </P>

<P>·The state of all pages is the same: either committed, reserved, or free. </P>

<P>·If the initial page is not free, all pages in the region are part of the same initial allocation of pages that were reserved by a call to <A HREF="1m7v8go.htm"><B>VirtualAlloc</B></A>. </P>

<P>·The access protection of all pages is the same (that is, the PAGE_READONLY, PAGE_READWRITE, or PAGE_NOACCESS flag). </P>

<P></P>

<P>The <A HREF="aruejx.htm"><B>VirtualProtect</B></A> function enables a process to modify the access protection of any committed page in the address space of a process. For example, a process can allocate read-write pages to store sensitive data, and then it can change the access to read only or no access to protect against accidental overwriting. <B>VirtualProtect</B> is typically used with pages allocated by <B>VirtualAlloc</B>, but it also works with pages committed by any of the other allocation functions. However, <B>VirtualProtect</B> changes the protection of entire pages, and pointers returned by the other functions are not necessarily aligned on page boundaries. The <A HREF="sflvdy.htm"><B>VirtualProtectEx</B></A> function is similar to <B>VirtualProtect</B>, except it changes the protection of memory in a specified process. Changing the protection is useful to debuggers in accessing the memory of a process being debugged. </P>

</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>Examining a Message Queue</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="t1rp4n"></A><B>Examining a Message Queue</B></P>

<P>Occasionally, an application needs to examine the contents of a thread's message queue from outside the thread's message loop. For example, if an application's window procedure performs a lengthy drawing operation, you may want the user to be able to interrupt the operation. Unless your application periodically examines the message queue during the operation for mouse and keyboard messages, it will not respond to user input until after the operation has completed. The reason for this is that the <A HREF="20gx08e.htm"><B>DispatchMessage</B></A> function in the thread's message loop does not return until the window procedure finishes processing a message. </P>

<P>You can use the <A HREF="0x9xxx.htm"><B>PeekMessage</B></A> function to examine a message queue during a lengthy operation. <B>PeekMessage</B> is similar to the <A HREF="ixkdtp.htm"><B>GetMessage</B></A> function; both check a message queue for a message that matches the filter criteria and then copy the message to an <A HREF="5ctef1.htm"><B>MSG</B></A> structure. The main difference between the two functions is that <B>GetMessage</B> does not return until a message matching the filter criteria is placed in the queue, whereas <B>PeekMessage</B> returns immediately regardless of whether a message is in the queue. </P>

<P>The following example shows how to use <B>PeekMessage</B> to examine a message queue for mouse clicks and keyboard input during a lengthy operation. </P>

<P>HWND hwnd;  </P>

<P>BOOL fDone; </P>

<P>MSG msg; </P>

<P></P>

<P>// Begin the operation and continue until it is complete </P>

<P>// or until the user clicks the mouse or presses a key. </P>

<P></P>

<P>fDone = FALSE; </P>

<P>while (!fDone) </P>

<P>{ </P>

<P>fDone = DoLengthyOperation(); // application-defined function </P>

<P></P>

<P>// Remove any messages that may be in the queue. If the </P>

<P>// queue contains any mouse or keyboard </P>

<P>// messages, end the operation. </P>

<P></P>

<P>while (PeekMessage(&amp;msg, hwnd,  0, 0, PM_REMOVE)) </P>

<P>{ </P>

<P>switch(msg.message) </P>

<P>{ </P>

<P>case WM_LBUTTONDOWN: </P>

<P>case WM_RBUTTONDOWN: </P>

<P>case WM_KEYDOWN: </P>

<P>// </P>

<P>// Perform any required cleanup. </P>

<P>// </P>

<P>fDone = TRUE; </P>

<P>} </P>

<P>} </P>

<P>} </P>

<P></P>

<P>Other functions, including <A HREF="18e1eu3.htm"><B>GetQueueStatus</B></A> and <A HREF="_wq5_9.htm"><B>GetInputState</B></A>, also allow you to examine the contents of a thread's message queue. <B>GetQueueStatus</B> returns an array of flags that indicates the types of messages in the queue; using it is the fastest way to discover whether the queue contains any messages. <B>GetInputState</B> returns TRUE if the queue contains mouse or keyboard messages. Both of these functions can be used to determine whether the queue contains messages that need to be processed. </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>GetDCEx</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="4m9cxu5"></A><B>GetDCEx  <A HREF="4unf_ib.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="2fduzal.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="de09ns.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>GetDCEx</B> function retrieves the handle of a display device (DC) context for the specified window. The display device context can be used in subsequent GDI functions to draw in the client area. </P>

<P>This function is an extension to the <A HREF="4f0b0z.htm"><B>GetDC</B></A> function that gives an application more control over how and whether clipping occurs in the client area. </P>

<P><B>HDC GetDCEx(</B></P>

<TABLE cols=2 width=361>

<TR VALIGN="top">
<TD width=40%><B>HWND</B> <I>hWnd</I><B>,</B></TD>
<TD width=60%>// handle of window </TD>
</TR>

<TR VALIGN="top">
<TD width=40%><B>    HRGN</B> <I>hrgnClip</I><B>,</B></TD>
<TD width=60%>// handle of clip region  </TD>
</TR>

<TR VALIGN="top">
<TD width=40%><B>    DWORD</B> <I>flags</I> </TD>
<TD width=60%>// device-context creation flags </TD>
</TR>

<TR VALIGN="top">
<TD width=40%><B>   );</B></TD>
<TD width=60%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hWnd</I></P>

<P>Identifies the window where drawing will occur. </P>

<P><I>hrgnClip</I></P>

<P>Specifies a clipping region that may be combined with the visible region of the client window. </P>

<P><I>flags</I></P>

<P>Specifies how the device context is created. This parameter can be a combination of the following values: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=47%><B>Value</B></TD>
<TD width=53%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=47%>DCX_WINDOW</TD>
<TD width=53%>Returns a device context corresponding to the window rectangle rather than the client rectangle.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>DCX_CACHE</TD>
<TD width=53%>Returns a device context from the cache, rather than the OWNDC or CLASSDC window. Essentially overrides CS_OWNDC and CS_CLASSDC.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>DCX_PARENTCLIP</TD>
<TD width=53%>Uses the visible region of the parent window. The parent's WS_CLIPCHILDREN and CS_PARENTDC style bits are ignored. The device context origin is set to the upper-left corner of the window identified by <I>hWnd</I>.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>DCX_CLIPSIBLINGS</TD>
<TD width=53%>Excludes the visible regions of all sibling windows above the window identified by <I>hWnd</I>.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>DCX_CLIPCHILDREN</TD>
<TD width=53%>Excludes the visible regions of all child windows below the window identified by <I>hWnd</I>.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>DCX_NORESETATTRS</TD>
<TD width=53%>Does not reset the attributes of this device context to the default attributes when this device context is released.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>DCX_LOCKWINDOWUPDATE</TD>
<TD width=53%>Allows drawing even if there is a <A HREF="6bbz47.htm"><B>LockWindowUpdate</B></A> call in effect that would otherwise exclude this window. Used for drawing during tracking.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>DCX_EXCLUDERGN</TD>
<TD width=53%>The clipping region identified by <I>hrgnClip</I> is excluded from the visible region of the returned device context.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>DCX_INTERSECTRGN</TD>
<TD width=53%>The clipping region identified by <I>hrgnClip</I> is intersected with the visible region of the returned device context.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>DCX_VALIDATE</TD>
<TD width=53%>When specified with DCX_INTERSECTUPDATE, causes the device context to be completely validated. Using this function with both DCX_INTERSECTUPDATE and DCX_VALIDATE is identical to using the <B>BeginPaint</B> function.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is the handle of the device context for the given window.</P>

<P>If the function fails, the return value is NULL. An invalid value for the <I>hWnd</I> parameter will cause the function to fail. </P>

<P><B>Remarks</B></P>

<P>Unless the display device context belongs to a window class, the <B>ReleaseDC</B> function must be called to release the device context after painting. Because only five common device contexts are available at any given time, failure to release a device context can prevent other applications from accessing a device context. </P>

<P>A device context belonging to the window's class is returned by the <B>GetDC</B> function if CS_CLASSDC, CS_OWNDC or CS_PARENTDC was specified as a style in the <B>WNDCLASS</B> structure when the class was registered. </P>

<P><B>See Also</B></P>

<P><A HREF="f7ytuy.htm"><B>BeginPaint</B></A>, <A HREF="4f0b0z.htm"><B>GetDC</B></A>, <A HREF="5y6h_kv.htm"><B>GetWindowDC</B></A>, <A HREF="p4bes3.htm"><B>ReleaseDC</B></A>, <A HREF="1onjoi2.htm"><B>WNDCLASS</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

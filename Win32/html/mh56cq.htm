<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>Using Mutex Objects</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="mh56cq"></A><B>Using Mutex Objects</B></P>

<P>You can use a mutex object to protect a shared resource from simultaneous access by multiple threads or processes. Each thread must wait for ownership of the mutex before it can execute the code that accesses the shared resource. For example, if several threads share access to a database, the threads can use a mutex object to permit only one thread at a time to write to the database. </P>

<P>In the following example, a process uses the <A HREF="jeyqaz.htm"><B>CreateMutex</B></A> function to create a named mutex object or open a handle of an existing mutex object. </P>

<P>HANDLE hMutex;  </P>

<P>// Create a mutex with no initial owner.</P>

<P>hMutex = CreateMutex( </P>

<P>NULL,                       // no security attributes</P>

<P>FALSE,                      // initially not owned</P>

<P>"MutexToProtectDatabase");  // name of mutex</P>

<P>if (hMutex == NULL) </P>

<P>{</P>

<P>// Check for error.</P>

<P>}</P>

<P>When a thread of this process writes to the database, as in the next example, it first requests ownership of the mutex. If it gets ownership, the thread writes to the database and then releases its ownership. </P>

<P>The example uses the <B>try</B>-<B>finally</B> structured exception-handling syntax to ensure that the thread properly releases the mutex object. The <B>finally</B> block of code is executed no matter how the <B>try</B> block terminates (unless the <B>try</B> block includes a call to the <A HREF="0tmwd4.htm"><B>TerminateThread</B></A> function). This prevents the mutex object from being abandoned inadvertently.</P>

<P>BOOL FunctionToWriteToDatabase(HANDLE hMutex)  </P>

<P>{ </P>

<P>DWORD dwWaitResult; </P>

<P>// Request ownership of mutex.</P>

<P></P>

<P>dwWaitResult = WaitForSingleObject( </P>

<P>hMutex,   // handle of mutex</P>

<P>5000L);   // five-second time-out interval</P>

<P></P>

<P>switch (dwWaitResult) </P>

<P>{</P>

<P>// The thread got mutex ownership.</P>

<P>case WAIT_OBJECT_0: </P>

<P>try { </P>

<P>// Write to the database.</P>

<P>} </P>

<P>finally { </P>

<P>// Release ownership of the mutex object.</P>

<P>if (! ReleaseMutex(hMutex)) { </P>

<P>// Deal with error.</P>

<P>} </P>

<P>break; </P>

<P>} </P>

<P>// Cannot get mutex ownership due to time-out.</P>

<P>case WAIT_TIMEOUT: </P>

<P>return FALSE; </P>

<P>// Got ownership of the abandoned mutex object.</P>

<P>case WAIT_ABANDONED: </P>

<P>return FALSE; </P>

<P>}</P>

<P>return TRUE; </P>

<P>}</P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

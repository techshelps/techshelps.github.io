<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>WriteConsole</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="5_0w_r1"></A><B>WriteConsole  <A HREF=".4psjr.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="7re1xz.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF=".hu4wz.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>WriteConsole</B> function writes a character string to a console screen buffer beginning at the current cursor location. </P>

<P><B>BOOL WriteConsole(</B></P>

<TABLE cols=2 width=554>

<TR VALIGN="top">
<TD width=50%><B>HANDLE</B> <I>hConsoleOutput</I><B>,</B></TD>
<TD width=50%>// handle to a console screen buffer </TD>
</TR>

<TR VALIGN="top">
<TD width=50%><B>    CONST VOID</B> <B>*</B><I>lpBuffer</I><B>,</B></TD>
<TD width=50%>// pointer to buffer to write from </TD>
</TR>

<TR VALIGN="top">
<TD width=50%><B>    DWORD</B> <I>nNumberOfCharsToWrite</I><B>,</B></TD>
<TD width=50%>// number of characters to write </TD>
</TR>

<TR VALIGN="top">
<TD width=50%><B>    LPDWORD</B> <I>lpNumberOfCharsWritten</I><B>,</B></TD>
<TD width=50%>// pointer to number of characters written </TD>
</TR>

<TR VALIGN="top">
<TD width=50%><B>    LPVOID</B> <I>lpReserved</I> </TD>
<TD width=50%>// reserved </TD>
</TR>

<TR VALIGN="top">
<TD width=50%><B>   );</B></TD>
<TD width=50%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hConsoleOutput</I></P>

<P>Identifies the console screen buffer to be written to. The handle must have GENERIC_WRITE access. </P>

<P><I>lpBuffer</I></P>

<P>Points to a buffer that contains characters to be written to the screen buffer. </P>

<P><I>nNumberOfCharsToWrite</I></P>

<P>Specifies the number of characters to write. </P>

<P><I>lpNumberOfCharsWritten</I></P>

<P>Points to a 32-bit variable that receives the number of characters actually written. </P>

<P><I>lpReserved</I></P>

<P>Reserved; must be NULL. </P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is nonzero.</P>

<P>If the function fails, the return value is zero. To get extended error information, call <B>GetLastError</B>. </P>

<P><B>Remarks</B></P>

<P><B>WriteConsole</B> writes characters to a console screen buffer. It behaves like the <A HREF="g0sox_.htm"><B>WriteFile</B></A> function, except it can write in either Unicode (wide-character) or ANSI mode. To create an application that maintains a single set of sources compatible with both modes, use <B>WriteConsole</B> rather than <B>WriteFile</B>. Although <B>WriteConsole</B> can be used only with a console screen buffer handle, <B>WriteFile</B> can be used with other handles (such as files or pipes). <B>WriteConsole</B> fails if used with a standard handle that has been redirected to be something other than a console handle. </P>

<P>Although an application can use <B>WriteConsole</B> in ANSI mode to write ANSI characters, consoles do not support ANSI escape sequences. However, some Win32 functions provide equivalent functionality: for example, <A HREF="1mr5nzr.htm"><B>SetCursorPos</B></A>, <A HREF=".nbq2p.htm"><B>SetConsoleTextAttribute</B></A>, and <A HREF="lxegt2.htm"><B>GetConsoleCursorInfo</B></A>. </P>

<P><B>WriteConsole</B> writes characters to the screen buffer at the current cursor position. The cursor position advances as characters are written. The <A HREF="patuu.htm"><B>SetConsoleCursorPosition</B></A> function sets the current cursor position. </P>

<P>Characters are written using the foreground and background color attributes associated with the screen buffer. The <B>SetConsoleTextAttribute</B> function changes these colors. To determine the current color attributes and the current cursor position, use <B>GetConsoleScreenBufferInfo</B>. </P>

<P>All of the input modes that affect the behavior of <B>WriteFile</B> have the same effect on <B>WriteConsole</B>. To retrieve and set the output modes of a console screen buffer, use the <B>GetConsoleMode</B> and <B>SetConsoleMode</B> functions. </P>

<P><B>Windows NT:</B> This function uses either Unicode characters or 8-bit characters from the console's current codepage. The console's codepage defaults initially to the system's OEM codepage. To change the console's codepage, use the <B>SetConsoleCP</B> or <B>SetConsoleOutputCP</B> functions, or use the <B>chcp</B> or <B>mode con cp select=</B> commands.</P>

<P><B>See Also</B></P>

<P><A HREF="lxegt2.htm"><B>GetConsoleCursorInfo</B></A>, <A HREF="1n6qct..htm"><B>GetConsoleMode</B></A>, <A HREF="h61zfu.htm"><B>GetConsoleScreenBufferInfo</B></A>, <A HREF="4z7f5n.htm"><B>ReadConsole</B></A>, <A HREF="4lxo_mt.htm"><B>SetConsoleCP</B></A>, <A HREF="patuu.htm"><B>SetConsoleCursorPosition</B></A>, <A HREF="3210qe3.htm"><B>SetConsoleMode</B></A>, <A HREF=".pz.au.htm"><B>SetConsoleOutputCP</B></A>, <A HREF=".nbq2p.htm"><B>SetConsoleTextAttribute</B></A>, <A HREF="1mr5nzr.htm"><B>SetCursorPos</B></A>, <A HREF="g0sox_.htm"><B>WriteFile</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

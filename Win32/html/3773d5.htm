<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>SECURITY_DESCRIPTOR_CONTROL</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="3773d5"></A><B>SECURITY_DESCRIPTOR_CONTROL  <A HREF="1pyx_zx.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="1966ja.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="m5jqg6.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>SECURITY_DESCRIPTOR_CONTROL</B> structure contains a set of bit flags that qualify the meaning of a security descriptor or its individual members. </P>

<P>typedef WORD SECURITY_DESCRIPTOR_CONTROL;  </P>

<P></P>

<P>Each security descriptor has an associated <B>SECURITY_DESCRIPTOR_CONTROL</B> structure. Applications can use the Win32 API functions to set and retrieve a security descriptor's <B>SECURITY_DESCRIPTOR_CONTROL</B> values. These functions are listed in the See Also section. </P>

<P>The following constants are defined for setting and retrieving <B>SECURITY_DESCRIPTOR_CONTROL</B> bit flags: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=38%><B>Value</B></TD>
<TD width=62%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=38%>SE_OWNER_DEFAULTED</TD>
<TD width=62%>Instead of the original provider of the security descriptor, a default mechanism provided the security descriptor's owner security identifier (SID). This can affect the treatment of the SID with respect to inheritance of an owner. This flag is ignored if the owner member is NULL. The <A HREF="113ijot.htm"><B>SetSecurityDescriptorOwner</B></A> function sets this flag.</TD>
</TR>

<TR VALIGN="top">
<TD width=38%>SE_GROUP_DEFAULTED</TD>
<TD width=62%>Instead of the the original provider of the security descriptor, a default mechanism provided the security descriptor's group SID. This can affect the treatment of the SID with respect to inheritance of a primary group. This flag is ignored if the group member is NULL. The <A HREF="1n4pkl7.htm"><B>SetSecurityDescriptorGroup</B></A> function sets this flag.</TD>
</TR>

<TR VALIGN="top">
<TD width=38%>SE_DACL_PRESENT</TD>
<TD width=62%>The security descriptor contains a discretionary access-control list (ACL). If this flag is set and the discretionary ACL is NULL, an empty ACL is being explicitly specified. An empty ACL has a size but no access-control entries (ACEs). A NULL ACL has no pointer to an ACL. This flag allows functions to determine whether a security descriptor points to a NULL ACL or no ACL at all. The <A HREF="y4gfoy.htm"><B>SetSecurityDescriptorDacl</B></A> function sets this flag.</TD>
</TR>

<TR VALIGN="top">
<TD width=38%>SE_DACL_DEFAULTED</TD>
<TD width=62%>Instead of the the original provider of the security descriptor, a default mechanism provided the discretionary ACL. This can affect the treatment of the ACL with respect to inheritance of an ACL. If the SE_DACL_PRESENT flag is not set, this flag is ignored. The <B>SetSecurityDescriptorDacl</B> function sets this flag.</TD>
</TR>

<TR VALIGN="top">
<TD width=38%>SE_SACL_PRESENT</TD>
<TD width=62%>The security descriptor contains a system ACL. If this flag is set and the Sacl member is NULL, an empty ACL is being explicitly specified. This flag allows functions to determine whether a security descriptor points to a NULL ACL or no ACL at all. The <A HREF="y4vfoy.htm"><B>SetSecurityDescriptorSacl</B></A> function sets this flag.</TD>
</TR>

<TR VALIGN="top">
<TD width=38%>SE_SACL_DEFAULTED</TD>
<TD width=62%>Instead of the the original provider of the security descriptor, a default mechanism provided the ACL. This can affect the treatment of the ACL with respect to inheritance of an ACL. If the SE_SACL_PRESENT flag is not set, this flag is ignored. The <A HREF="y4vfoy.htm"><B>SetSecurityDescriptorSacl</B></A> function sets this flag.</TD>
</TR>

<TR VALIGN="top">
<TD width=38%>SE_SELF_RELATIVE</TD>
<TD width=62%>The security descriptor is in self-relative form and all members of the security descriptor are contiguous in memory. All pointer members are expressed as offsets from the beginning of the security descriptor. This form is useful for treating security descriptors as opaque structures for transmission in a communications protocol or for storage on secondary media.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>See Also</B></P>

<P><A HREF="jgwoa7.htm"><B>GetSecurityDescriptorControl</B></A>, <A HREF="32j5.db.htm"><B>GetSecurityDescriptorDacl</B></A>, <A HREF="dgurox.htm"><B>GetSecurityDescriptorGroup</B></A>, <A HREF="1t7gpco.htm"><B>GetSecurityDescriptorOwner</B></A>, <A HREF="32jd.db.htm"><B>GetSecurityDescriptorSacl</B></A>, <A HREF="y4gfoy.htm"><B>SetSecurityDescriptorDacl</B></A>, <A HREF="1n4pkl7.htm"><B>SetSecurityDescriptorGroup</B></A>, <A HREF="113ijot.htm"><B>SetSecurityDescriptorOwner</B></A>, <A HREF="y4vfoy.htm"><B>SetSecurityDescriptorSacl</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Creating a Tabbed Dialog Box</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME=".l5_ou"></A><B>Creating a Tabbed Dialog Box</B></P>

<P>The example in this section creates a dialog box that uses tabs to provide multiple pages of controls. The main dialog box is a modal dialog box. Each page of controls is defined by a dialog box template that specifies the WS_CHILD style. When a tab is selected, the example creates a modeless dialog box for the incoming page and destroys the dialog box for the outgoing page.</P>

<P></P>

<P><B>Note</B>  In many cases, you can implement multiple-page dialog boxes more easily by using property sheets. For more information about property sheets, see <A HREF="6h_u.7.htm">Property Sheets</A>. </P>

<P></P>

<P>The template for the main dialog box simply defines two button controls. When processing the <A HREF="ii1w.b.htm">WM_INITDIALOG</A> message, the dialog box procedure creates a tab control and loads the dialog template resources for each of the child dialog boxes.</P>

<P>The information is saved in an application-defined structure called DLGHDR. A pointer to this structure is associated with the dialog box window by using the <A HREF="d2okir.htm"><B>SetWindowLong</B></A> function. The structure is defined in the application's header file, as follows.</P>

<P>#define C_PAGES 3  </P>

<P></P>

<P>typedef struct tag_dlghdr { </P>

<P>HWND hwndTab;       // tab control </P>

<P>HWND hwndDisplay;   // current child dialog box </P>

<P>RECT rcDisplay;     // display rectangle for the tab control </P>

<P>DLGTEMPLATE *apRes[C_PAGES]; </P>

<P>} DLGHDR; </P>

<P></P>

<P>The following function processes the <A HREF="ii1w.b.htm">WM_INITDIALOG</A> message for the main dialog box. The function allocates the DLGHDR structure, loads the dialog template resources for the child dialog boxes, and creates the tab control.</P>

<P>The size of each child dialog box is specified by the <A HREF="xaubx..htm"><B>DLGTEMPLATE</B></A> structure. The function examines the size of each dialog box and uses the macro for the <A HREF="hycvxu.htm">TCM_ADJUSTRECT</A> message to calculate an appropriate size for the tab control. Then it sizes the dialog box and positions the two buttons accordingly. This example sends TCM_ADJUSTRECT by using the <B>TabCtrl_AdjustRect</B> macro.</P>

<P>VOID WINAPI OnTabbedDialogInit(HWND hwndDlg)  </P>

<P>{ </P>

<P>DLGHDR *pHdr = (DLGHDR *) LocalAlloc(LPTR, sizeof(DLGHDR)); </P>

<P>DWORD dwDlgBase = GetDialogBaseUnits(); </P>

<P>int cxMargin = LOWORD(dwDlgBase) / 4; </P>

<P>int cyMargin = HIWORD(dwDlgBase) / 8; </P>

<P>TC_ITEM tie; </P>

<P>RECT rcTab; </P>

<P>HWND hwndButton; </P>

<P>RECT rcButton; </P>

<P>int i; </P>

<P></P>

<P>// Save a pointer to the DLGHDR structure. </P>

<P>SetWindowLong(hwndDlg, GWL_USERDATA, (LONG) pHdr); </P>

<P></P>

<P>// Create the tab control. </P>

<P>InitCommonControls(); </P>

<P>pHdr-&gt;hwndTab = CreateWindow( </P>

<P>WC_TABCONTROL, "", </P>

<P>WS_CHILD | WS_CLIPSIBLINGS | WS_VISIBLE, </P>

<P>0, 0, 100, 100, </P>

<P>hwndDlg, NULL, g_hinst, NULL </P>

<P>); </P>

<P>if (pHdr-&gt;hwndTab == NULL) {</P>

<P>// handle error</P>

<P>}</P>

<P></P>

<P>// Add a tab for each of the three child dialog boxes. </P>

<P>tie.mask = TCIF_TEXT | TCIF_IMAGE; </P>

<P>tie.iImage = -1; </P>

<P>tie.pszText = "First"; </P>

<P>TabCtrl_InsertItem(pHdr-&gt;hwndTab, 0, &amp;tie); </P>

<P>tie.pszText = "Second"; </P>

<P>TabCtrl_InsertItem(pHdr-&gt;hwndTab, 1, &amp;tie); </P>

<P>tie.pszText = "Third"; </P>

<P>TabCtrl_InsertItem(pHdr-&gt;hwndTab, 2, &amp;tie); </P>

<P></P>

<P>// Lock the resources for the three child dialog boxes. </P>

<P>pHdr-&gt;apRes[0] = DoLockDlgRes(MAKEINTRESOURCE(DLG_FIRST)); </P>

<P>pHdr-&gt;apRes[1] = DoLockDlgRes(MAKEINTRESOURCE(DLG_SECOND)); </P>

<P>pHdr-&gt;apRes[2] = DoLockDlgRes(MAKEINTRESOURCE(DLG_THIRD)); </P>

<P></P>

<P>// Determine the bounding rectangle for all child dialog boxes. </P>

<P>SetRectEmpty(&amp;rcTab); </P>

<P>for (i = 0; i &lt; C_PAGES; i++) { </P>

<P>if (pHdr-&gt;apRes[i]-&gt;cx &gt; rcTab.right) </P>

<P>rcTab.right = pHdr-&gt;apRes[i]-&gt;cx; </P>

<P>if (pHdr-&gt;apRes[i]-&gt;cy &gt; rcTab.bottom) </P>

<P>rcTab.bottom = pHdr-&gt;apRes[i]-&gt;cy; </P>

<P>} </P>

<P>rcTab.right = rcTab.right * LOWORD(dwDlgBase) / 4; </P>

<P>rcTab.bottom = rcTab.bottom * HIWORD(dwDlgBase) / 8; </P>

<P></P>

<P>// Calculate how large to make the tab control, so </P>

<P>// the display area can accomodate all the child dialog boxes. </P>

<P>TabCtrl_AdjustRect(pHdr-&gt;hwndTab, TRUE, &amp;rcTab); </P>

<P>OffsetRect(&amp;rcTab, cxMargin - rcTab.left, </P>

<P>cyMargin - rcTab.top); </P>

<P></P>

<P>// Calculate the display rectangle. </P>

<P>CopyRect(&amp;pHdr-&gt;rcDisplay, &amp;rcTab); </P>

<P>TabCtrl_AdjustRect(pHdr-&gt;hwndTab, FALSE, &amp;pHdr-&gt;rcDisplay); </P>

<P></P>

<P>// Set the size and position of the tab control, buttons, </P>

<P>// and dialog box. </P>

<P>SetWindowPos(pHdr-&gt;hwndTab, NULL, rcTab.left, rcTab.top, </P>

<P>rcTab.right - rcTab.left, rcTab.bottom - rcTab.top, </P>

<P>SWP_NOZORDER); </P>

<P></P>

<P>// Move the first button below the tab control. </P>

<P>hwndButton = GetDlgItem(hwndDlg, BTN_CLOSE); </P>

<P>SetWindowPos(hwndButton, NULL, </P>

<P>rcTab.left, rcTab.bottom + cyMargin, 0, 0, </P>

<P>SWP_NOSIZE | SWP_NOZORDER); </P>

<P></P>

<P>// Determine the size of the button. </P>

<P>GetWindowRect(hwndButton, &amp;rcButton); </P>

<P>rcButton.right -= rcButton.left; </P>

<P>rcButton.bottom -= rcButton.top; </P>

<P></P>

<P>// Move the second button to the right of the first. </P>

<P>hwndButton = GetDlgItem(hwndDlg, BTN_TEST); </P>

<P>SetWindowPos(hwndButton, NULL, </P>

<P>rcTab.left + rcButton.right + cxMargin, </P>

<P>rcTab.bottom + cyMargin, 0, 0, </P>

<P>SWP_NOSIZE | SWP_NOZORDER); </P>

<P></P>

<P>// Size the dialog box. </P>

<P>SetWindowPos(hwndDlg, NULL, 0, 0, </P>

<P>rcTab.right + cyMargin + </P>

<P>2 * GetSystemMetrics(SM_CXDLGFRAME), </P>

<P>rcTab.bottom + rcButton.bottom + 2 * cyMargin + </P>

<P>2 * GetSystemMetrics(SM_CYDLGFRAME) + </P>

<P>GetSystemMetrics(SM_CYCAPTION), </P>

<P>SWP_NOMOVE | SWP_NOZORDER); </P>

<P></P>

<P>// Simulate selection of the first item. </P>

<P>OnSelChanged(hwndDlg); </P>

<P>} </P>

<P></P>

<P>// DoLockDlgRes - loads and locks a dialog template resource. </P>

<P>// Returns a pointer to the locked resource. </P>

<P>// lpszResName - name of the resource </P>

<P></P>

<P>DLGTEMPLATE * WINAPI DoLockDlgRes(LPCSTR lpszResName) </P>

<P>{ </P>

<P>HRSRC hrsrc = FindResource(NULL, lpszResName, RT_DIALOG); </P>

<P>HGLOBAL hglb = LoadResource(g_hinst, hrsrc); </P>

<P>return (DLGTEMPLATE *) LockResource(hglb); </P>

<P>} </P>

<P></P>

<P>The following function processes the <A HREF="10e142..htm">TCN_SELCHANGE</A> notification message for the main dialog box. The function destroys the dialog box for the outgoing page, if any. Then it uses the <A HREF="1.e6cp6.htm"><B>CreateDialogIndirect</B></A> function to create a modeless dialog box for the incoming page.</P>

<P>// OnSelChanged - processes the TCN_SELCHANGE notification.  </P>

<P>// hwndDlg - handle of the parent dialog box </P>

<P></P>

<P>VOID WINAPI OnSelChanged(HWND hwndDlg) </P>

<P>{ </P>

<P>DLGHDR *pHdr = (DLGHDR *) GetWindowLong( </P>

<P>hwndDlg, GWL_USERDATA); </P>

<P>int iSel = TabCtrl_GetCurSel(pHdr-&gt;hwndTab); </P>

<P></P>

<P>// Destroy the current child dialog box, if any. </P>

<P>if (pHdr-&gt;hwndDisplay != NULL) </P>

<P>DestroyWindow(pHdr-&gt;hwndDisplay); </P>

<P></P>

<P>// Create the new child dialog box. </P>

<P>pHdr-&gt;hwndDisplay = CreateDialogIndirect(g_hinst, </P>

<P>pHdr-&gt;apRes[iSel], hwndDlg, ChildDialogProc); </P>

<P>} </P>

<P></P>

<P>The following function processes the <A HREF="ii1w.b.htm">WM_INITDIALOG</A> message for each of the child dialog boxes. You cannot specify the position of a dialog box created using the <A HREF="1.e6cp6.htm"><B>CreateDialogIndirect</B></A> function. This function uses the <A HREF="4557_v1.htm"><B>SetWindowPos</B></A> function to position the child dialog within the tab control's display area.</P>

<P>// OnChildDialogInit - Positions the child dialog box to fall  </P>

<P>//     within the display area of the tab control. </P>

<P></P>

<P>VOID WINAPI OnChildDialogInit(HWND hwndDlg) </P>

<P>{ </P>

<P>HWND hwndParent = GetParent(hwndDlg); </P>

<P>DLGHDR *pHdr = (DLGHDR *) GetWindowLong( </P>

<P>hwndParent, GWL_USERDATA); </P>

<P>SetWindowPos(hwndDlg, HWND_TOP, </P>

<P>pHdr-&gt;rcDisplay.left, pHdr-&gt;rcDisplay.top, </P>

<P>0, 0, SWP_NOSIZE); </P>

<P>} </P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

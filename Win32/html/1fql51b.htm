<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>SetProcessWorkingSetSize</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="1fql51b"></A><B>SetProcessWorkingSetSize  <A HREF="s1y.h5.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="glns2h.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="7wnz9r.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>SetProcessWorkingSetSize</B> function sets the minimum and maximum working set sizes for a specified process. </P>

<P>The working set of a process is the set of memory pages currently visible to the process in physical RAM memory. These pages are resident and available for an application to use without triggering a page fault. The size of the working set of a process is specified in bytes. The minimum and maximum working set sizes affect the virtual memory paging behavior of a process.</P>

<P><B>BOOL SetProcessWorkingSetSize(</B></P>

<TABLE cols=2 width=545>

<TR VALIGN="top">
<TD width=51%><B>HANDLE</B> <I>hProcess</I><B>,</B></TD>
<TD width=49%>// open handle to the process of interest</TD>
</TR>

<TR VALIGN="top">
<TD width=51%><B>    DWORD</B> <I>dwMinimumWorkingSetSize</I><B>,</B></TD>
<TD width=49%>// specifies minimum working set size</TD>
</TR>

<TR VALIGN="top">
<TD width=51%><B>    DWORD</B> <I>dwMaximumWorkingSetSize</I> </TD>
<TD width=49%>// specifies maximum working set size</TD>
</TR>

<TR VALIGN="top">
<TD width=51%><B>   );</B></TD>
<TD width=49%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hProcess</I></P>

<P>An open handle to the process whose working set sizes will be set. </P>

<P><B>Windows NT:</B> The handle must have PROCESS_SET_QUOTA access rights. For more information, see <A HREF="pditn2.htm">Process Objects</A>.</P>

<P><I>dwMinimumWorkingSetSize</I></P>

<P>Specifies a minimum working set size for the process. The virtual memory manager attempts to keep at least this much memory resident in the process whenever the process is active. </P>

<P>If both <I>dwMinimumWorkingSetSize</I> and <I>dwMaximumWorkingSetSize</I> have the value 0xffffffff, the function temporarily trims the working set of the specified process to zero. This essentially swaps the process out of physical RAM memory.</P>

<P><I>dwMaximumWorkingSetSize</I></P>

<P>Specifies a maximum working set size for the process. The virtual memory manager attempts to keep no more than this much memory resident in the process whenever the process is active and memory is in short supply. </P>

<P>If both <I>dwMinimumWorkingSetSize</I> and <I>dwMaximumWorkingSetSize</I> have the value 0xffffffff, the function temporarily trims the working set of the specified process to zero. This essentially swaps the process out of physical RAM memory.</P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is nonzero.</P>

<P>If the function fails, the return value is zero. Call <B>GetLastError</B> to obtain extended error information.</P>

<P><B>Remarks</B></P>

<P>The working set of the specified process can be emptied by specifying the value 0xffffffff for both the minimum and maximum working set sizes.</P>

<P>If the values of either <I>dwMinimumWorkingSetSize</I> or <I>dwMaximumWorkingSetSize</I> are greater than the process' current working set sizes, the specified process must have the SE_INC_BASE_PRIORITY_NAME privilege. Users in the Administrators and Power Users groups generally have this privilege. For more information about security privileges, see <A HREF="134kpv4.htm">Privileges</A>. </P>

<P>The operating system allocates working set sizes on a first-come, first-served basis. For example, if an application successfully sets 40 megabytes as its minimum working set size on a 64-megabyte system, and a second application requests a 40-megabyte working set size, the operating system denies the second application's request. </P>

<P>Using the <B>SetProcessWorkingSetSize</B> function to set an application's minimum and maximum working set sizes does not guarantee that the requested memory will be reserved, or that it will remain resident at all times. When the application is idle, or a low-memory situation causes a demand for memory, the operating system can reduce the application's working set. An application can use the <B>VirtualLock</B> function to lock ranges of the application's virtual address space in memory; however, that can potentially degrade the performance of the system.</P>

<P>When you increase the working set size of an application, you are taking away physical memory from the rest of the system. This can degrade the performance of other applications and the system as a whole. It can also lead to failures of operations that require physical memory to be present; for example, creating processes, threads, and kernel pool. Thus, you must use the <B>SetProcessWorkingSetSize</B> function carefully. You must always consider the performance of the whole system when you are designing an application. </P>

<P><B>See Also</B></P>

<P><A HREF="44im_45.htm"><B>GetProcessWorkingSetSize</B></A>, <A HREF="8diouv.htm"><B>VirtualLock</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

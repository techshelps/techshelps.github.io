<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Dynamic-Link Library Entry-Point Function</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="dq9bkm"></A><B>Dynamic-Link Library Entry-Point Function</B></P>

<P>Every DLL must have an entry point, just as an application does. The operating system calls the entry-point function whenever processes and threads load or unload the DLL. If you are linking your DLL with a library, such as the C run-time library, it may provide an entry-point function for you, and allow you to provide a separate initialization function. Check the documentation for your runtime library for more information.</P>

<P>If you are providing your own entry-point, see the <A HREF="82sdq5.htm"><B>DllEntryPoint</B></A> function. The name <B>DllEntryPoint</B> is a placeholder for a user-defined function. Generally, you specify an entry point for your DLL using the linker. Check your linker documentation for more information.</P>

<P><B>Calling the Entry-Point Function</B></P>

<P>The operating system calls the entry-point function whenever any one of the following events occurs: </P>

<P>유 process loads the DLL. For processes using load-time dynamic linking, the DLL is loaded during process initialization. For processes using run-time linking, the DLL is loaded before <A HREF="1vghbf8.htm"><B>LoadLibrary</B></A> or <A HREF="lyqytx.htm"><B>LoadLibraryEx</B></A> returns. </P>

<P>유 process unloads the DLL. The DLL is unloaded when the process terminates or calls the <A HREF="3mcs_pm.htm"><B>FreeLibrary</B></A> function and the reference count becomes zero. If the process terminates as a result of the <A HREF=".d3m14.htm"><B>TerminateProcess</B></A> or <A HREF="0tmwd4.htm"><B>TerminateThread</B></A> function, the system does not call the DLL entry-point function. </P>

<P>유 new thread is created in a process that has loaded the DLL. You can use the <A HREF="m3pje0.htm"><B>DisableThreadLibraryCalls</B></A> function to disable notification when threads are created.</P>

<P>유 thread of a process that has loaded the DLL terminates normally, not using <B>TerminateThread</B> or <B>TerminateProcess</B>. When a process unloads the DLL, the entry-point function is called only once for the entire process, rather than once for each existing thread of the process. You can use <B>DisableThreadLibraryCalls </B>to disable notification when threads are terminated.</P>

<P></P>

<P>Only one thread at a time can call the entry-point function.</P>

<P>The system calls the entry-point function in the context of the process or thread that caused the function to be called. This allows a DLL to use its entry-point function for allocating memory in the virtual address space of the calling process or to open handles accessible to the process.The entry-point function can also allocate memory that is private to a new thread by using thread local storage (TLS). For more information about thread local storage, see <A HREF="gr8f0v.htm">Thread Local Storage</A>.</P>

<P><B>Entry-Point Function Definition</B></P>

<P>The DLL entry-point function must be declared with the standard-call calling convention. </P>

<P><B>Windows NT:</B> If the DLL entry point is not declared correctly, the DLL is not loaded, and the system displays a message indicating that the DLL entry point must be declared with WINAPI.</P>

<P><B>Windows 95:</B> If the DLL entry point is not declared correctly, the DLL is not loaded and the system displays a message titled "Error starting program," which instructs the user to check the file to determine the problem.</P>

<P>In the body of the function, you may handle any combination of the following scenarios in which the DLL entry point has been called:</P>

<P>유 process loads the DLL (DLL_PROCESS_ATTACH). </P>

<P>윲he current process creates a new thread (DLL_THREAD_ATTACH). </P>

<P>유 thread exits normally (DLL_THREAD_DETACH). </P>

<P>유 process unloads the DLL (DLL_PROCESS_DETACH).</P>

<P></P>

<P>The following example demonstrates how to structure the DLL entry-point function.</P>

<P>BOOL WINAPI DllEntryPoint(</P>

<P>HINSTANCE hinstDLL,  // handle to DLL module</P>

<P>DWORD fdwReason,     // reason for calling function</P>

<P>LPVOID lpReserved )  // reserved</P>

<P>{</P>

<P>// Perform actions based on the reason for calling.</P>

<P>switch( fdwReason )   </P>

<P>{ </P>

<P>case DLL<U>_</U>PROCESS<U>_</U>ATTACH:</P>

<P>// Initialize once for each new process.</P>

<P>// Return FALSE to fail DLL load.</P>

<P>break;</P>

<P>case DLL<U>_</U>THREAD<U>_</U>ATTACH:</P>

<P>// Do thread-specific initialization.</P>

<P>break;</P>

<P>case DLL<U>_</U>THREAD<U>_</U>DETACH:</P>

<P>// Do thread-specific cleanup.</P>

<P>break;</P>

<P>case DLL<U>_</U>PROCESS<U>_</U>DETACH:</P>

<P>// Perform any necessary cleanup.</P>

<P>break;</P>

<P>}</P>

<P>return TRUE;  // Successful DLL_PROCESS_ATTACH.</P>

<P>}</P>

<P><B>Entry-Point Function Return Value</B></P>

<P>When a DLL entry-point function is called because a process is loading, the function returns TRUE to indicate success. For processes using load-time linking, a return value of FALSE causes the process initialization to fail and the process terminates. For processes using run-time linking, a return value of FALSE causes the <A HREF="1vghbf8.htm"><B>LoadLibrary</B></A> or <A HREF="lyqytx.htm"><B>LoadLibraryEx</B></A> function to return NULL, indicating failure. The return value of the entry-point function is disregarded when the function is called for any other reason. </P>

</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Creating a Main Window</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="4cvl_4c"></A><B>Creating a Main Window</B></P>

<P>The first window an application creates is typically the <I>main window</I>. You create the main window by using the <A HREF="rpk.pc.htm"><B>CreateWindowEx</B></A> function, specifying the window class, window name, window styles, size, position, menu handle, instance handle, and creation data. A main window belongs to an application-defined window class, so you must register the window class and provide a window procedure for the class before creating the main window. </P>

<P>Most applications typically use the WS_OVERLAPPEDWINDOW style to create the main window. This style gives the window a title bar, a window menu, a sizing border, and minimize and maximize buttons. The <B>CreateWindowEx</B> function returns a handle that uniquely identifies the window. </P>

<P>The following example creates a main window belonging to an application-defined window class. The window name, "Main Window", will appear in the window's title bar. By combining the WS_VSCROLL and WS_HSCROLL styles with the WS_OVERLAPPEDWINDOW style, the application creates a main window with horizontal and vertical scroll bars in addition to the components provided by the WS_OVERLAPPEDWINDOW style. The four occurrences of the CW_USEDEFAULT constant set the initial size and position of the window to the system-defined default values. By specifying NULL instead of a menu handle, the window will have the menu defined for the window class. </P>

<P>HINSTANCE hinst;  </P>

<P>HWND hwndMain; </P>

<P></P>

<P>// Create the main window. </P>

<P></P>

<P>hwndMain = CreateWindowEx( </P>

<P>0,                      // no extended styles           </P>

<P>"MainWClass",           // class name                   </P>

<P>"Main Window",          // window name                  </P>

<P>WS_OVERLAPPEDWINDOW |   // overlapped window            </P>

<P>WS_HSCROLL |        // horizontal scroll bar        </P>

<P>WS_VSCROLL,         // vertical scroll bar          </P>

<P>CW_USEDEFAULT,          // default horizontal position  </P>

<P>CW_USEDEFAULT,          // default vertical position    </P>

<P>CW_USEDEFAULT,          // default width                </P>

<P>CW_USEDEFAULT,          // default height               </P>

<P>(HWND) NULL,            // no parent or owner window    </P>

<P>(HMENU) NULL,           // class menu used              </P>

<P>hinstance,              // instance handle              </P>

<P>NULL);                  // no window creation data      </P>

<P></P>

<P>if (!hwndMain) </P>

<P>return FALSE; </P>

<P></P>

<P>// Show the window using the flag specified by the program </P>

<P>// that started the application, and send the application </P>

<P>// a WM_PAINT message. </P>

<P></P>

<P>ShowWindow(hwndMain, SW_SHOWDEFAULT); </P>

<P>UpdateWindow(hwndMain); </P>

<P></P>

<P>Notice that the preceding example calls the <A HREF="3mejbzs.htm"><B>ShowWindow</B></A> function after creating the main window. This is done because Windows does not automatically display the main window after creating it. By passing the SW_SHOWDEFAULT flag to <B>ShowWindow</B>, the application allows the program that started the application to set the initial show state of the main window. The <A HREF="19g_54e.htm"><B>UpdateWindow</B></A> function sends the window its first <A HREF="f55xz2.htm">WM_PAINT</A> message. </P>

</BODY>
</HTML>

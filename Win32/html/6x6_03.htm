<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Processing Commands and Messages from File Manager</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="6x6_03"></A><B>Processing Commands and Messages from File Manager</B></P>

<P>The following code shows the <B>FMExtensionProc</B> function for a sample extension DLL. It demonstrates how an extension processes the menu commands and notification messages sent by File Manager. </P>

<P>HINSTANCE hinst;  </P>

<P>HMENU hmenu; </P>

<P>WORD wMenuDelta; </P>

<P>BOOL fMultiple = FALSE; </P>

<P>BOOL fLFN = FALSE; </P>

<P></P>

<P>LONG WINAPI FMExtensionProc(hwnd, wMsg, lParam) </P>

<P>HWND hwnd; </P>

<P>WORD wMsg; </P>

<P>LONG lParam; </P>

<P></P>

<P>{ </P>

<P>CHAR szBuf[200]; </P>

<P>INT count; </P>

<P></P>

<P>switch (wMsg) { </P>

<P>case FMEVENT_LOAD: </P>

<P></P>

<P>#define lpload  ((LPFMS_LOAD) lParam) </P>

<P></P>

<P>/* Save the menu-item delta value. */ </P>

<P></P>

<P>wMenuDelta = lpload-&gt;wMenuDelta; </P>

<P></P>

<P>/* Fill the FMS_LOAD structure. */ </P>

<P></P>

<P>lpload-&gt;dwSize = sizeof(FMS_LOAD); </P>

<P>lstrcpy(lpload-&gt;szMenuName, "&amp;Extension"); </P>

<P></P>

<P>/* Return the handle of the menu. */ </P>

<P></P>

<P>hinst = GetModuleHandle("ext.dll"); </P>

<P>lpload-&gt;hMenu = GetSubMenu(LoadMenu(hinst, </P>

<P>MAKEINTRESOURCE(MYMENU)), 0); </P>

<P></P>

<P>return (LONG)TRUE; </P>

<P></P>

<P>case FMEVENT_UNLOAD: </P>

<P></P>

<P>/* Perform any cleanup procedures here. */ </P>

<P></P>

<P>break; </P>

<P></P>

<P>case FMEVENT_INITMENU: </P>

<P></P>

<P>/* Copy the menu handle. */ </P>

<P></P>

<P>hmenu = (HMENU) lParam; </P>

<P></P>

<P>/* </P>

<P>* Add check marks to menu items as appropriate. </P>

<P>* Add menu-item delta values to menu-item </P>

<P>* identifiers to specify the menu items to check. </P>

<P>*/ </P>

<P></P>

<P>CheckMenuItem(hmenu, </P>

<P>wMenuDelta + IDM_MULTIPLE, </P>

<P>fMultiple ? MF_BYCOMMAND | MF_CHECKED : </P>

<P>MF_BYCOMMAND | MF_UNCHECKED); </P>

<P>CheckMenuItem(hmenu, </P>

<P>wMenuDelta + IDM_LFN, </P>

<P>fLFN ? MF_BYCOMMAND | MF_CHECKED : </P>

<P>MF_BYCOMMAND | MF_UNCHECKED); </P>

<P>break; </P>

<P></P>

<P>case FMEVENT_TOOLBARLOAD: </P>

<P>{ </P>

<P>static EXT_BUTTON extbtn[] = { </P>

<P>{1, 0, 0}, </P>

<P>}; </P>

<P></P>

<P>/* Fill the FMS_TOOLBARLOAD structure. */ </P>

<P></P>

<P>#define lptbld ((LPFMS_TOOLBARLOAD) lParam) </P>

<P></P>

<P>lptbld-&gt;dwSize = sizeof(FMS_TOOLBARLOAD); </P>

<P>lptbld-&gt;lpButtons = (LPEXT_BUTTON) &amp;extbtn; </P>

<P>lptbld-&gt;cButtons = 1; </P>

<P>lptbld-&gt;cBitmaps = 1; </P>

<P>lptbld-&gt;idBitmap = ID_BUTTONBITMAP; </P>

<P></P>

<P>return (LONG)TRUE; </P>

<P></P>

<P>} </P>

<P></P>

<P>case FMEVENT_USER_REFRESH: </P>

<P>MessageBox(hwnd, "User refresh event", </P>

<P>"Hey!", MB_OK); </P>

<P>break; </P>

<P></P>

<P>case FMEVENT_SELCHANGE: </P>

<P>break; </P>

<P></P>

<P>/* </P>

<P>* The following messages are generated when the user </P>

<P>* chooses items from the extension menu. </P>

<P>*/ </P>

<P></P>

<P>case FMEVENT_HELPSTRING: </P>

<P></P>

<P>#define lphs ((LPFMS_HELPSTRING)lParam) </P>

<P></P>

<P>if (lphs-&gt;idCommand == -1) </P>

<P>lstrcpy(lphs-&gt;szHelp, "Help for extension menu"); </P>

<P>else </P>

<P>wsprintf(lphs-&gt;szHelp, "Help for item %d", lphs-&gt;idCommand); </P>

<P></P>

<P>break; </P>

<P></P>

<P>case FMEVENT_HELPMENUITEM: </P>

<P></P>

<P>wsprintf(szBuf, "Help for %d", lParam); </P>

<P>MessageBox(hwnd, szBuf, "WinHelp call", MB_OK); </P>

<P></P>

<P>/* </P>

<P>* Use: WinHelp(hwnd, "ExtHelp.hlp", HELP_CONTEXT, lParam); </P>

<P>*/ </P>

<P></P>

<P>break; </P>

<P></P>

<P>case IDM_GETFOCUS: </P>

<P>wsprintf(szBuf, "Focus %d", </P>

<P>(INT) SendMessage(hwnd, FM_GETFOCUS, 0, 0)); </P>

<P>MessageBox(hwnd, szBuf, "Focus", MB_OK); </P>

<P>break; </P>

<P></P>

<P>case IDM_GETCOUNT: </P>

<P>count = (INT) SendMessage(hwnd, </P>

<P>fLFN ? FM_GETSELCOUNTLFN : FM_GETSELCOUNT, </P>

<P>0, 0); </P>

<P></P>

<P>wsprintf(szBuf, "%d files selected", count); </P>

<P>MessageBox(hwnd, szBuf, "Selection Count", MB_OK); </P>

<P>break; </P>

<P></P>

<P>case IDM_GETFILE: </P>

<P>{ </P>

<P>FMS_GETFILESEL file; </P>

<P></P>

<P>count = (INT) SendMessage(hwnd, </P>

<P>fLFN ? FM_GETSELCOUNTLFN : FM_GETSELCOUNT, </P>

<P>FMFOCUS_DIR, </P>

<P>0); </P>

<P></P>

<P>while (count &gt;= 1) { </P>

<P>/* </P>

<P>* Selection indices are zero-based (0 is </P>

<P>* first). </P>

<P>*/ </P>

<P></P>

<P>count--; </P>

<P>SendMessage(hwnd, FM_GETFILESEL, count, </P>

<P>(LONG) (LPFMS_GETFILESEL) &amp;file); </P>

<P>wsprintf(szBuf, "file %s\nSize %ld", </P>

<P>(LPSTR) file.szName, file.dwSize); </P>

<P>MessageBox(hwnd, szBuf, "File Information", </P>

<P>MB_OK); </P>

<P></P>

<P>if (!fMultiple) </P>

<P>break; </P>

<P>} </P>

<P>break; </P>

<P>} </P>

<P></P>

<P>case IDM_GETDRIVE: </P>

<P>{ </P>

<P>FMS_GETDRIVEINFO drive; </P>

<P></P>

<P>SendMessage(hwnd, FM_GETDRIVEINFO, 0, </P>

<P>(LONG) (LPFMS_GETDRIVEINFO)&amp;drive); </P>

<P>wsprintf(szBuf, </P>

<P>"%s\nFree %ld\nTotal %ld\nVolume %s\nShare %s", </P>

<P>(LPSTR) drive.szPath, drive.dwFreeSpace, </P>

<P>drive.dwTotalSpace, (LPSTR) drive.szVolume, </P>

<P>(LPSTR) drive.szShare); </P>

<P>MessageBox(hwnd, szBuf, "Drive Info", MB_OK); </P>

<P>break; </P>

<P>} </P>

<P></P>

<P>case IDM_LFN: </P>

<P>MessageBox(hwnd, "IDM_LFN", "Hi", MB_OK); </P>

<P>fLFN = !fLFN; </P>

<P>break; </P>

<P></P>

<P>case IDM_MULTIPLE: </P>

<P>MessageBox(hwnd, "IDM_MULTIPLE", "Hi", MB_OK); </P>

<P>fMultiple = !fMultiple; </P>

<P>break; </P>

<P></P>

<P>case IDM_REFRESH: </P>

<P>case IDM_REFRESHALL: </P>

<P>SendMessage(hwnd, FM_REFRESH_WINDOWS, </P>

<P>wMsg == IDM_REFRESHALL, 0); </P>

<P>break; </P>

<P></P>

<P>case IDM_RELOAD: </P>

<P>PostMessage(hwnd, FM_RELOAD_EXTENSIONS, 0, 0); </P>

<P>break; </P>

<P>} </P>

<P>return 0L; </P>

<P>} </P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

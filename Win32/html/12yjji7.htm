<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>HeapAlloc</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="12yjji7"></A><B>HeapAlloc  <A HREF="2h7.zy.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="7gqv3r.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="9cqndc.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>HeapAlloc</B> function allocates a block of memory from a heap. The allocated memory is not movable. </P>

<P><B>LPVOID HeapAlloc(</B></P>

<TABLE cols=2 width=395>

<TR VALIGN="top">
<TD width=40%><B>HANDLE</B> <I>hHeap</I><B>,</B></TD>
<TD width=60%>// handle to the private heap block </TD>
</TR>

<TR VALIGN="top">
<TD width=40%><B>    DWORD</B> <I>dwFlags</I><B>,</B></TD>
<TD width=60%>// heap allocation control flags </TD>
</TR>

<TR VALIGN="top">
<TD width=40%><B>    DWORD</B> <I>dwBytes</I> </TD>
<TD width=60%>// number of bytes to allocate </TD>
</TR>

<TR VALIGN="top">
<TD width=40%><B>   );</B></TD>
<TD width=60%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hHeap</I></P>

<P>Specifies the heap from which the memory will be allocated. This parameter is a handle returned by the <A HREF="e.pz6h.htm"><B>HeapCreate</B></A> or <A HREF="26hfdb.htm"><B>GetProcessHeap</B></A> function. </P>

<P><I>dwFlags</I></P>

<P>Specifies several controllable aspects of heap allocation. Specifying any of these flags will override the corresponding flag specified when the heap was created with <B>HeapCreate</B>. You can specify one or more of the following flags: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=50%><B>Flag</B></TD>
<TD width=50%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=50%>HEAP_GENERATE_EXCEPTIONS</TD>
<TD width=50%>Specifies that the operating system will raise an exception to indicate a function failure, such as an out-of-memory condition, instead of returning NULL.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%>HEAP_NO_SERIALIZE</TD>
<TD width=50%>Specifies that mutual exclusion will not be used while this function is accessing the heap. For more information about HEAP_NO_SERIALIZE, see the Remarks section of <A HREF="e.pz6h.htm"><B>HeapCreate</B></A>.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%>HEAP_ZERO_MEMORY</TD>
<TD width=50%>Specifies that the allocated memory will be initialized to zero.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><I>dwBytes</I></P>

<P>Specifies the number of bytes to be allocated. </P>

<P>If the heap specified by the <I>hHeap</I> parameter is a "non-growable" heap, dwBytes must be less than 0x7FFF8. You create a non-growable heap by calling the HeapCreate function with a nonzero value.</P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is a pointer to the allocated memory block. </P>

<P>If the function fails and you have not specified HEAP_GENERATE_EXCEPTIONS, the return value is NULL. </P>

<P>If the function fails and you have specified HEAP_GENERATE_EXCEPTIONS, the function may generate the following exceptions:</P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=45%><B>Value</B></TD>
<TD width=55%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=45%>STATUS_NO_MEMORY</TD>
<TD width=55%>The allocation attempt failed because of a lack of available memory or heap corruption.</TD>
</TR>

<TR VALIGN="top">
<TD width=45%>STATUS_ACCESS_VIOLATION</TD>
<TD width=55%>The allocation attempt failed because of heap corruption or improper function parameters.</TD>
</TR>
</TABLE><BR>

<P></P>

<P>Note that heap corruption can lead to either exception. It depends upon the nature of the heap corruption.</P>

<P>If the function fails, it does not call <A HREF="34n8_rg.htm"><B>SetLastError</B></A>. An application cannot call <A HREF="11c2vs7.htm"><B>GetLastError</B></A> for extended error information.</P>

<P><B>Remarks</B></P>

<P>If <B>HeapAlloc</B> succeeds, it allocates at least the amount of memory requested. If the actual amount allocated is greater than the amount requested, the process can use the entire amount. To determine the actual size of the allocated block, use the <B>HeapSize</B> function. </P>

<P>To free a block of memory allocated by <B>HeapAlloc</B>, use the <B>HeapFree</B> function. </P>

<P>Memory allocated by <B>HeapAlloc</B> is not movable. Since the memory is not movable, it is possible for the heap to become fragmented. </P>

<P>Note that if HEAP_ZERO_MEMORY is not specified, the allocated memory will not be initialized to zero. </P>

<P><B>See Also</B></P>

<P><A HREF="26hfdb.htm"><B>GetProcessHeap</B></A>, <A HREF="e.pz6h.htm"><B>HeapCreate</B></A>, <A HREF="xaqbyb.htm"><B>HeapDestroy</B></A>, <A HREF="ge8y4..htm"><B>HeapFree</B></A>, <A HREF="lcofg4.htm"><B>HeapReAlloc</B></A>, <A HREF="geepi..htm"><B>HeapSize</B></A>, <A HREF="34n8_rg.htm"><B>SetLastError</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

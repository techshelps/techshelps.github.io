<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Using a Termination Handler</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="3tc.9s9"></A><B>Using a Termination Handler</B></P>

<P>The following example shows how a <B>try</B>-<B>finally</B> statement is used to ensure that resources are released when execution of a guarded body of code terminates. In this case, a thread uses the <A HREF="15hqm5b.htm"><B>EnterCriticalSection</B></A> function to wait for ownership of a critical section object. When the thread is finished executing the code that is protected by the critical section, it must call the <A HREF="2wz._0v.htm"><B>LeaveCriticalSection</B></A> function to make the critical section object available to other threads. Using a <B>try</B>-<B>finally</B> statement guarantees that this will happen. </P>

<P>For more information about critical section objects, see <A HREF="36dp5f5.htm">Synchronization</A>. </P>

<P>LPTSTR lpBuffer = NULL;  </P>

<P>CRITICAL_SECTION csCriticalSection; </P>

<P></P>

<P>try { </P>

<P></P>

<P>// EnterCriticalSection synchronizes code </P>

<P>// with other threads. </P>

<P></P>

<P>EnterCriticalSection(&amp;CriticalSection); </P>

<P></P>

<P>// Perform a task that may cause an exception. </P>

<P></P>

<P>lpBuffer = (LPTSTR) LocalAlloc(LPTR, 10); </P>

<P>strcpy(lpBuffer,"Hello");  // possible access violation </P>

<P>printf("%s\n",lpBuffer); </P>

<P>LocalFree(lpBuffer); </P>

<P>} </P>

<P></P>

<P>// LeaveCriticalSection is called even if </P>

<P>// an exception occurred. </P>

<P></P>

<P>finally { </P>

<P>LeaveCriticalSection(&amp;CriticalSection); </P>

<P>} </P>

<P></P>

</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>SetWindowLong</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="d2okir"></A><B>SetWindowLong  <A HREF="114euy8.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="2lm.0ad.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="14dadmj.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>SetWindowLong</B> function changes an attribute of the specified window. The function also sets a 32-bit (long) value at the specified offset into the extra window memory of a window. </P>

<P><B>LONG SetWindowLong(</B></P>

<TABLE cols=2 width=329>

<TR VALIGN="top">
<TD width=50%><B>HWND</B> <I>hWnd</I><B>,</B></TD>
<TD width=50%>// handle of window</TD>
</TR>

<TR VALIGN="top">
<TD width=50%><B>    int</B> <I>nIndex</I><B>,</B></TD>
<TD width=50%>// offset of value to set</TD>
</TR>

<TR VALIGN="top">
<TD width=50%><B>    LONG</B> <I>dwNewLong</I> </TD>
<TD width=50%>// new value</TD>
</TR>

<TR VALIGN="top">
<TD width=50%><B>   );</B></TD>
<TD width=50%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hWnd</I></P>

<P>Identifies the window and, indirectly, the class to which the window belongs. </P>

<P><I>nIndex</I></P>

<P>Specifies the zero-based offset to the value to be set. Valid values are in the range zero through the number of bytes of extra window memory, minus 4; for example, if you specified 12 or more bytes of extra memory, a value of 8 would be an index to the third 32-bit integer. To set any other value, specify one of the following values: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=33%><B>Value</B></TD>
<TD width=67%><B>Action</B></TD>
</TR>

<TR VALIGN="top">
<TD width=33%>GWL_EXSTYLE</TD>
<TD width=67%>Sets a new extended window style.</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>GWL_STYLE</TD>
<TD width=67%>Sets a new window style.</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>GWL_WNDPROC</TD>
<TD width=67%>Sets a new address for the window procedure.</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>GWL_HINSTANCE</TD>
<TD width=67%>Sets a new application instance handle.</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>GWL_ID</TD>
<TD width=67%>Sets a new identifier of the window.</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>GWL_USERDATA</TD>
<TD width=67%>Sets the 32-bit value associated with the window. Each window has a corresponding 32-bit value intended for use by the application that created the window.</TD>
</TR>
</TABLE><BR>

<P></P>

<P>The following values are also available when the <I>hWnd</I> parameter identifies a dialog box: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=34%><B>Value</B></TD>
<TD width=66%><B>Action</B></TD>
</TR>

<TR VALIGN="top">
<TD width=34%>DWL_DLGPROC</TD>
<TD width=66%>Sets the new address of the dialog box procedure.</TD>
</TR>

<TR VALIGN="top">
<TD width=34%>DWL_MSGRESULT</TD>
<TD width=66%>Sets the return value of a message processed in the dialog box procedure.</TD>
</TR>

<TR VALIGN="top">
<TD width=34%>DWL_USER</TD>
<TD width=66%>Sets new extra information that is private to the application, such as handles or pointers.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><I>dwNewLong</I></P>

<P>Specifies the replacement value. </P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is the previous value of the specified 32-bit integer.</P>

<P>If the function fails, the return value is zero. To get extended error information, call <B>GetLastError</B>. </P>

<P>If the previous value of the specified 32-bit integer is zero, and the function succeeds, the return value is zero, but the function does not clear the last error information. This makes it difficult to determine success or failure. To deal with this, you should clear the last error information by calling <A HREF="34n8_rg.htm"><B>SetLastError</B></A>(0) before calling <B>SetWindowLong</B>. Then, function failure will be indicated by a return value of zero and a <B>GetLastError</B> result that is nonzero.</P>

<P><B>Remarks</B></P>

<P>The <B>SetWindowLong</B> function fails if the window specified by the <I>hWnd</I> parameter does not belong to the same process as the calling thread.</P>

<P>If you use the <B>SetWindowLong</B> function and the GWL_WNDPROC index to replace the window procedure, the window procedure must conform to the guidelines specified in the description of the <A HREF="3nlh53.htm"><B>WindowProc</B></A> callback function. </P>

<P>Calling <B>SetWindowLong</B> with the GWL_WNDPROC index creates a subclass of the window class used to create the window. An application should not subclass a window created by another process. The <B>SetWindowLong</B> function creates the window subclass by changing the window procedure associated with a particular window, causing Windows to call the new window procedure instead of the previous one. An application must pass any messages not processed by the new window procedure to the previous window procedure by calling <A HREF="ncd2vj.htm"><B>CallWindowProc</B></A>. This allows the application to create a chain of window procedures. </P>

<P>Reserve extra window memory by specifying a nonzero value in the <B>cbWndExtra</B> member of the <A HREF="1onjoi2.htm"><B>WNDCLASS</B></A> structure used with the <B>RegisterClass</B> function. </P>

<P>You must not call <B>SetWindowLong</B> with the GWL_HWNDPARENT index to change the parent of a child window. Instead, use the <B>SetParent</B> function. </P>

<P><B>See Also</B></P>

<P><A HREF="ncd2vj.htm"><B>CallWindowProc</B></A>, <A HREF="vb50yw.htm"><B>GetWindowLong</B></A>, <A HREF="1hkl0j9.htm"><B>GetWindowWord</B></A>, <A HREF="6v_00hu.htm"><B>RegisterClass</B></A>, <A HREF="b64g17.htm"><B>SetParent</B></A>, <A HREF="d2zkmo.htm"><B>SetWindowWord</B></A>, <A HREF="3nlh53.htm"><B>WindowProc</B></A>, <A HREF="1onjoi2.htm"><B>WNDCLASS</B></A> </P>

<P></P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

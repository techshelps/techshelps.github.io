<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Example of Using Custom Check-mark Bitmaps</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="1mrdove"></A><B>Example of Using Custom Check-mark Bitmaps</B></P>

<P>The example in this topic assigns custom check-mark bitmaps to menu items in two menus. The menu items in the first menu specify character attributes: bold, italic, and underline. Each menu item can be either checked or unchecked. For these menu items, the example uses check-mark bitmaps that resemble the checked and unchecked states of a check box control.</P>

<P>The menu items in the second menu specify paragraph alignment settings: left, centered, and right. Only one of these menu items is checked at any given time. For these menu items, the example uses check-mark bitmaps that resemble the checked and unchecked states of a radio button control.</P>

<P>The window procedure processes the <A HREF="2re1yt3.htm">WM_CREATE</A> message by calling the application-defined OnCreate function. OnCreate creates the four check-mark bitmaps and then assigns them to their appropriate menu items by using the <A HREF="1nuq_v9.htm"><B>SetMenuItemBitmaps</B></A> function.</P>

<P>To create each bitmap, OnCreate calls the application-defined CreateMenuBitmaps function, specifying a pointer to a bitmap-specific drawing function. CreateMenuBitmaps creates a monochrome bitmap of the required size, selects it into a memory device context, and erases the background. Then it calls the specified drawing function to fill in the foreground.</P>

<P>The four application-defined drawing functions are DrawCheck, DrawUncheck, DrawRadioCheck, and DrawRadioUncheck. They draw a rectangle with an X, an empty rectangle, an ellipse containing a smaller filled ellipse, and an empty ellipse, respectively.</P>

<P>The window procedure processes the <A HREF="0yqmho.htm">WM_DESTROY</A> message by deleting the check-mark bitmaps. It retrieves each bitmap handle by using the <A HREF="q9mp7k.htm"><B>GetMenuItemInfo</B></A> function and then passes the handle to the <A HREF="y31ava.htm"><B>DeleteObject</B></A> function.</P>

<P>When the user chooses a menu item, a <A HREF="71v.3j.htm">WM_COMMAND</A> message is sent to the owner window. For menu items on the Character menu, the window procedure calls the application-defined CheckCharacterItem function. For items on the Paragraph menu, the window procedure calls the application-defined CheckParagraphItem function.</P>

<P>Each item on the Character menu can be checked and unchecked independently. Therefore, CheckCharacterItem simply switches the specified menu item's check state. First, the function calls the <A HREF="q9mp7k.htm"><B>GetMenuItemInfo</B></A> function to get the current menu item state. Then it switches the MFS_CHECKED state flag and sets the new state by calling the <A HREF="961_9k.htm"><B>SetMenuItemInfo</B></A> function.</P>

<P>Unlike character attributes, only one paragraph alignment can be selected at a time. Therefore, CheckParagraphItem checks the specified menu item and removes the check mark from all other items on the menu. To do so, it calls the <A HREF="1m.ghs4.htm"><B>CheckMenuRadioItem</B></A> function.</P>

<P>Following are the relevant portions of the application's header file.</P>

<P>// Menu-item identifiers for the Character menu  </P>

<P></P>

<P>#define IDM_CHARACTER 10 </P>

<P>#define IDM_BOLD      11 </P>

<P>#define IDM_ITALIC    12 </P>

<P>#define IDM_UNDERLINE 13 </P>

<P></P>

<P>// Menu-item identifiers for the Paragraph menu </P>

<P></P>

<P>#define IDM_PARAGRAPH 20 </P>

<P>#define IDM_LEFT      21 </P>

<P>#define IDM_CENTER    22 </P>

<P>#define IDM_RIGHT     23 </P>

<P></P>

<P>// Function-pointer type for drawing functions </P>

<P></P>

<P>typedef VOID (WINAPI * DRAWFUNC)(HDC hdc, SIZE size); </P>

<P></P>

<P>Following are the relevant portions of the application's window procedure and related functions.</P>

<P>LRESULT CALLBACK MainWindowProc(  </P>

<P>HWND hwnd, </P>

<P>UINT uMsg, </P>

<P>WPARAM wParam, </P>

<P>LPARAM lParam </P>

<P>) </P>

<P>{ </P>

<P>switch (uMsg) { </P>

<P>case WM_CREATE: </P>

<P>if (!OnCreate(hwnd)) </P>

<P>return -1; </P>

<P>break; </P>

<P></P>

<P>case WM_DESTROY: </P>

<P>OnDestroy(hwnd); </P>

<P>PostQuitMessage(0); </P>

<P>break; </P>

<P></P>

<P>case WM_COMMAND: </P>

<P>switch (LOWORD(wParam)) { </P>

<P></P>

<P>case IDM_BOLD: </P>

<P>case IDM_ITALIC: </P>

<P>case IDM_UNDERLINE: </P>

<P>CheckCharacterItem(hwnd, LOWORD(wParam)); </P>

<P>break; </P>

<P></P>

<P>case IDM_LEFT: </P>

<P>case IDM_CENTER: </P>

<P>case IDM_RIGHT: </P>

<P>CheckParagraphItem(hwnd, LOWORD(wParam)); </P>

<P>break; </P>

<P></P>

<P>. </P>

<P>. // Process other commands here. </P>

<P>. </P>

<P></P>

<P>} </P>

<P>break; </P>

<P></P>

<P>. </P>

<P>. // Process other messages here. </P>

<P>. </P>

<P></P>

<P>default: </P>

<P>return DefWindowProc(hwnd, uMsg, wParam, lParam); </P>

<P>} </P>

<P>return 0; </P>

<P>} </P>

<P></P>

<P>VOID WINAPI CheckCharacterItem(HWND hwnd, UINT uID) </P>

<P>{ </P>

<P>HMENU hmenuBar = GetMenu(hwnd); </P>

<P>HMENU hmenuPopup; </P>

<P>MENUITEMINFO mii; </P>

<P></P>

<P>// Get the handle of the Character menu. </P>

<P></P>

<P>mii.fMask = MIIM_SUBMENU;  // information to get </P>

<P>GetMenuItemInfo(hmenuBar, IDM_CHARACTER, FALSE, &amp;mii); </P>

<P>hmenuPopup = mii.hSubMenu; </P>

<P></P>

<P>// Get the state of the specified menu item. </P>

<P></P>

<P>mii.fMask = MIIM_STATE;    // information to get </P>

<P>GetMenuItemInfo(hmenuPopup, uID, FALSE, &amp;mii); </P>

<P></P>

<P>// Toggle the checked state. </P>

<P></P>

<P>mii.fState ^= MFS_CHECKED; </P>

<P>SetMenuItemInfo(hmenuPopup, uID, FALSE, &amp;mii); </P>

<P>} </P>

<P></P>

<P>VOID WINAPI CheckParagraphItem(HWND hwnd, UINT uID) </P>

<P>{ </P>

<P>HMENU hmenuBar = GetMenu(hwnd); </P>

<P>HMENU hmenuPopup; </P>

<P>MENUITEMINFO mii; </P>

<P></P>

<P>// Get the handle of the Paragraph menu. </P>

<P></P>

<P>mii.fMask = MIIM_SUBMENU;  // information to get </P>

<P>GetMenuItemInfo(hmenuBar, IDM_PARAGRAPH, FALSE, &amp;mii); </P>

<P>hmenuPopup = mii.hSubMenu; </P>

<P></P>

<P>// Check the specified item and uncheck all the others. </P>

<P></P>

<P>CheckMenuRadioItem( </P>

<P>hmenuPopup,         // handle of menu </P>

<P>IDM_LEFT,           // first item in range </P>

<P>IDM_RIGHT,          // last item in range </P>

<P>uID,                // item to check </P>

<P>MF_BYCOMMAND        // IDs, not positions </P>

<P>); </P>

<P>} </P>

<P></P>

<P>BOOL WINAPI OnCreate(HWND hwnd) </P>

<P>{ </P>

<P>HMENU hmenuBar = GetMenu(hwnd); </P>

<P>HMENU hmenuPopup; </P>

<P>MENUITEMINFO mii; </P>

<P>UINT uID; </P>

<P>HBITMAP hbmChecked; </P>

<P>HBITMAP hbmUnchecked; </P>

<P></P>

<P>// Get the handle of the Character menu. </P>

<P></P>

<P>mii.fMask = MIIM_SUBMENU;     // information to get </P>

<P>GetMenuItemInfo(hmenuBar, IDM_CHARACTER, FALSE, &amp;mii); </P>

<P>hmenuPopup = mii.hSubMenu; </P>

<P></P>

<P>// Create the checked and unchecked bitmaps. </P>

<P></P>

<P>hbmChecked = CreateMenuBitmap(DrawCheck); </P>

<P>hbmUnchecked = CreateMenuBitmap(DrawUncheck); </P>

<P></P>

<P>// Set the checkmark bitmaps for each menu item. </P>

<P></P>

<P>for (uID = IDM_BOLD; uID &lt;= IDM_UNDERLINE; uID++) { </P>

<P>SetMenuItemBitmaps(hmenuPopup, uID, MF_BYCOMMAND, </P>

<P>hbmUnchecked, hbmChecked); </P>

<P>} </P>

<P></P>

<P>// Get the handle of the Paragraph pop-up menu. </P>

<P></P>

<P>mii.fMask = MIIM_SUBMENU;     // information to get </P>

<P>GetMenuItemInfo(hmenuBar, IDM_PARAGRAPH, FALSE, &amp;mii); </P>

<P>hmenuPopup = mii.hSubMenu; </P>

<P></P>

<P>// Create the checked and unchecked bitmaps. </P>

<P></P>

<P>hbmChecked = CreateMenuBitmap(DrawRadioCheck); </P>

<P>hbmUnchecked = CreateMenuBitmap(DrawRadioUncheck); </P>

<P></P>

<P>// Set the checkmark bitmaps for each menu item. </P>

<P></P>

<P>for (uID = IDM_LEFT; uID &lt;= IDM_RIGHT; uID++) { </P>

<P>SetMenuItemBitmaps(hmenuPopup, uID, MF_BYCOMMAND, </P>

<P>hbmUnchecked, hbmChecked); </P>

<P>} </P>

<P></P>

<P>// Initially check the IDM_LEFT paragraph item. </P>

<P></P>

<P>CheckMenuRadioItem(hmenuPopup, IDM_LEFT, IDM_RIGHT, </P>

<P>IDM_LEFT, MF_BYCOMMAND); </P>

<P>return TRUE; </P>

<P>} </P>

<P></P>

<P>HBITMAP WINAPI CreateMenuBitmap(DRAWFUNC lpfnDraw) </P>

<P>{ </P>

<P>// Create a DC compatible with the desktop window's DC. </P>

<P></P>

<P>HWND hwndDesktop = GetDesktopWindow(); </P>

<P>HDC hdcDesktop = GetDC(hwndDesktop); </P>

<P>HDC hdcMem = CreateCompatibleDC(hdcDesktop); </P>

<P></P>

<P>// Determine the required bitmap size. </P>

<P></P>

<P>DWORD dwExt = GetMenuCheckMarkDimensions(); </P>

<P>SIZE size = { LOWORD(dwExt), HIWORD(dwExt) }; </P>

<P></P>

<P>// Create a monochrome bitmap and select it. </P>

<P></P>

<P>HBITMAP hbm = CreateBitmap(size.cx, size.cy, 1, 1, NULL); </P>

<P>HBITMAP hbmOld = SelectObject(hdcMem, hbm); </P>

<P></P>

<P>// Erase the background and call the drawing function. </P>

<P></P>

<P>PatBlt(hdcMem, 0, 0, size.cx, size.cy, WHITENESS); </P>

<P>(*lpfnDraw)(hdcMem, size); </P>

<P></P>

<P>// Clean up. </P>

<P></P>

<P>SelectObject(hdcMem, hbmOld); </P>

<P>DeleteDC(hdcMem); </P>

<P>ReleaseDC(hwndDesktop, hdcDesktop); </P>

<P>return hbm; </P>

<P>} </P>

<P></P>

<P>VOID WINAPI DrawCheck(HDC hdc, SIZE size) </P>

<P>{ </P>

<P>HBRUSH hbrOld; </P>

<P>hbrOld = SelectObject(hdc, GetStockObject(NULL_BRUSH)); </P>

<P>Rectangle(hdc, 0, 0, size.cx, size.cy); </P>

<P>MoveToEx(hdc, 0, 0, NULL); </P>

<P>LineTo(hdc, size.cx, size.cy); </P>

<P>MoveToEx(hdc, 0, size.cy - 1, NULL); </P>

<P>LineTo(hdc, size.cx - 1, 0); </P>

<P>SelectObject(hdc, hbrOld); </P>

<P>} </P>

<P></P>

<P>VOID WINAPI DrawUncheck(HDC hdc, SIZE size) </P>

<P>{ </P>

<P>HBRUSH hbrOld; </P>

<P>hbrOld = SelectObject(hdc, GetStockObject(NULL_BRUSH)); </P>

<P>Rectangle(hdc, 0, 0, size.cx, size.cy); </P>

<P>SelectObject(hdc, hbrOld); </P>

<P>} </P>

<P></P>

<P>VOID WINAPI DrawRadioCheck(HDC hdc, SIZE size) </P>

<P>{ </P>

<P>HBRUSH hbrOld; </P>

<P>hbrOld = SelectObject(hdc, GetStockObject(NULL_BRUSH)); </P>

<P>Ellipse(hdc, 0, 0, size.cx, size.cy); </P>

<P>SelectObject(hdc, GetStockObject(BLACK_BRUSH)); </P>

<P>Ellipse(hdc, 2, 2, size.cx - 2, size.cy - 2); </P>

<P>SelectObject(hdc, hbrOld); </P>

<P>} </P>

<P></P>

<P>VOID WINAPI DrawRadioUncheck(HDC hdc, SIZE size) </P>

<P>{ </P>

<P>HBRUSH hbrOld; </P>

<P>hbrOld = SelectObject(hdc, GetStockObject(NULL_BRUSH)); </P>

<P>Ellipse(hdc, 0, 0, size.cx, size.cy); </P>

<P>SelectObject(hdc, hbrOld); </P>

<P>} </P>

<P></P>

<P>VOID WINAPI OnDestroy(HWND hwnd) </P>

<P>{ </P>

<P>HMENU hmenuBar = GetMenu(hwnd); </P>

<P>HMENU hmenuPopup; </P>

<P>MENUITEMINFO mii; </P>

<P></P>

<P>// Get the handle of the Character menu. </P>

<P></P>

<P>mii.fMask = MIIM_SUBMENU;     // information to get </P>

<P>GetMenuItemInfo(hmenuBar, IDM_CHARACTER, FALSE, &amp;mii); </P>

<P>hmenuPopup = mii.hSubMenu; </P>

<P></P>

<P>// Get the check-mark bitmaps and delete them. </P>

<P></P>

<P>mii.fMask = MIIM_CHECKMARKS; </P>

<P>GetMenuItemInfo(hmenuPopup, IDM_BOLD, FALSE, &amp;mii); </P>

<P>DeleteObject(mii.hbmpChecked); </P>

<P>DeleteObject(mii.hbmpUnchecked); </P>

<P></P>

<P>// Get the handle of the Paragraph menu. </P>

<P></P>

<P>mii.fMask = MIIM_SUBMENU;     // information to get </P>

<P>GetMenuItemInfo(hmenuBar, IDM_PARAGRAPH, FALSE, &amp;mii); </P>

<P>hmenuPopup = mii.hSubMenu; </P>

<P></P>

<P>// Get the check-mark bitmaps and delete them. </P>

<P></P>

<P>mii.fMask = MIIM_CHECKMARKS; </P>

<P>GetMenuItemInfo(hmenuPopup, IDM_LEFT, FALSE, &amp;mii); </P>

<P>DeleteObject(mii.hbmpChecked); </P>

<P>DeleteObject(mii.hbmpUnchecked); </P>

<P>} </P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

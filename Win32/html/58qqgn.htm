<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>GetProcessTimes</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="58qqgn"></A><B>GetProcessTimes  <A HREF="1rcvh5o.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="glns2h.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="7wnz9r.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>GetProcessTimes</B> function obtains timing information about a specified process. </P>

<P><B>BOOL GetProcessTimes(</B></P>

<TABLE cols=2 width=518>

<TR VALIGN="top">
<TD width=43%><B>HANDLE</B> <I>hProcess</I><B>,</B></TD>
<TD width=57%>// specifies the process of interest </TD>
</TR>

<TR VALIGN="top">
<TD width=43%><B>    LPFILETIME</B> <I>lpCreationTime</I><B>,</B></TD>
<TD width=57%>// when the process was created</TD>
</TR>

<TR VALIGN="top">
<TD width=43%><B>    LPFILETIME</B> <I>lpExitTime</I><B>,</B></TD>
<TD width=57%>// when the process exited </TD>
</TR>

<TR VALIGN="top">
<TD width=43%><B>    LPFILETIME</B> <I>lpKernelTime</I><B>,</B></TD>
<TD width=57%>// time the process has spent in kernel mode </TD>
</TR>

<TR VALIGN="top">
<TD width=43%><B>    LPFILETIME</B> <I>lpUserTime</I> </TD>
<TD width=57%>// time the process has spent in user mode </TD>
</TR>

<TR VALIGN="top">
<TD width=43%><B>   );</B></TD>
<TD width=57%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hProcess</I></P>

<P>An open handle that specifies the process whose timing information is sought. This handle must be created with PROCESS_QUERY_INFORMATION access. For more information, see <A HREF="pditn2.htm">Process Objects</A>. </P>

<P><I>lpCreationTime</I></P>

<P>Points to a <A HREF="a44m8h.htm"><B>FILETIME</B></A> structure that receives the creation time of the process. </P>

<P><I>lpExitTime</I></P>

<P>Points to a <B>FILETIME</B> structure that receives the exit time of the process. If the process has not exited, the content of this structure is undefined. </P>

<P><I>lpKernelTime</I></P>

<P>Points to a <A HREF="a44m8h.htm"><B>FILETIME</B></A> structure that receives the amount of time that the process has executed in kernel mode. The time that each of the threads of the process has executed in kernel mode is determined, and then all of those times are summed together to obtain this value. </P>

<P><I>lpUserTime</I></P>

<P>Points to a <B>FILETIME</B> structure that receives the amount of time that the process has executed in user mode. The time that each of the threads of the process has executed in user mode is determined, and then all of those times are summed together to obtain this value. </P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is nonzero.</P>

<P>If the function fails, the return value is zero. To get extended error information, call <A HREF="11c2vs7.htm"><B>GetLastError</B></A>. </P>

<P><B>Remarks</B></P>

<P>All times are expressed using <B>FILETIME</B> data structures. Such a structure contains two 32-bit values that combine to form a 64-bit count of 100-nanosecond time units. </P>

<P>Process creation and exit times are points in time expressed as the amount of time that has elapsed since midnight on January 1, 1601 at Greenwich, England. The Win32 API provides several functions that an application can use to convert such values to more generally useful forms. </P>

<P>Process kernel mode and user mode times are amounts of time. For example, if a process has spent one second in kernel mode, this function will fill the <B>FILETIME</B> structure specified by <I>lpKernelTime</I> with a 64-bit value of ten million. That is the number of 100-nanosecond units in one second. </P>

<P><B>See Also</B></P>

<P><A HREF="a44m8h.htm"><B>FILETIME</B></A>, <A HREF="ftyw_5.htm"><B>FileTimeToDosDateTime</B></A>, <A HREF="dv17jo.htm"><B>FileTimeToLocalFileTime</B></A>, <A HREF="hxp8r1.htm"><B>FileTimeToSystemTime</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

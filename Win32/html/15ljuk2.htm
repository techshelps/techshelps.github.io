<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>Creating a Backup Application</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="15ljuk2"></A><B>Creating a Backup Application</B></P>

<P>To perform any input or output on a tape, a backup application must first obtain a handle of the tape device. The following code sample shows how to use the <A HREF="xn35yd.htm"><B>CreateFile</B></A> function to open a tape device. </P>

<P>HANDLE hTape;   /* handle to tape device */  </P>

<P></P>

<P>hTape = CreateFile( </P>

<P>"\\\\.\\TAPE0",     /* name of tape device to open */ </P>

<P>GENERIC_READ | GENERIC_WRITE, /* read-write access */ </P>

<P>0,                    /* not used                  */ </P>

<P>0,                    /* not used                  */ </P>

<P>OPEN_EXISTING,        /* required for tape devices */ </P>

<P>0,                    /* not used                  */ </P>

<P>NULL);                /* not used                  */ </P>

<P></P>

<P>To back up a directory tree to a tape, an application must use the <A HREF="2a0z0q6.htm"><B>FindFirstFile</B></A> and <A HREF="jkcucc.htm"><B>FindNextFile</B></A> functions to traverse the directory tree. Each time a file is found, the application should get the file's attributes by using the <A HREF="3pqdmo.htm"><B>GetFileAttributes</B></A> function. If there are hard links, the application should determine the number of links and save the file's unique identifier in a table for future comparisons. The first time a file is found, the application should use <A HREF="xn35yd.htm"><B>CreateFile</B></A> to open the file and the <A HREF="8z2gtt.htm"><B>BackupRead</B></A> function to begin the backup. Then it can use the <A HREF="g0sox_.htm"><B>WriteFile</B></A> function repeatedly to transfer all the information in the buffer filled by <B>BackupRead</B> to the tape. The second time a file is found (checked against the table of file identifiers when there are hard links), the application can simply write the general file information to the tape, followed by a stream whose identifier is BACKUP_LINK. </P>

<P>When restoring files from tape to disk, an application must use the <B>CreateFile</B>, <A HREF="sif7n1.htm"><B>BackupWrite</B></A>, and <A HREF="cjnd8p.htm"><B>ReadFile</B></A> functions. For each file on the tape, the application should use <B>CreateFile</B> to create a new file on disk and <B>BackupWrite</B> to begin restoring the file. Then it should use <B>ReadFile</B> repeatedly until all the information for the file has been read from the tape into the buffer filled by <B>BackupWrite</B>. If one of the streams in the <B>BackupWrite</B> buffer has a BACKUP_LINK stream identifier, the application must establish a hard link. If the data needed to establish the link does not exist, <B>BackupWrite</B> fails. The application can use a preexisting catalog to locate and restore the original data, or it can notify the user that the file data to be restored is in a different location. </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

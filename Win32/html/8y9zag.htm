<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Terminating a Thread</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="8y9zag"></A><B>Terminating a Thread</B></P>

<P>A thread executes until one of the following events occurs: </P>

<P>·The thread calls the <A HREF="c.xq03.htm"><B>ExitThread</B></A><B> </B>function. </P>

<P>·Any thread of the process calls the <A HREF="i5ihdk.htm"><B>ExitProcess</B></A> function. </P>

<P>·The thread function returns. </P>

<P>·Any thread calls the <A HREF="0tmwd4.htm"><B>TerminateThread</B></A> function with a handle to the thread. </P>

<P>·Any thread calls the <A HREF=".d3m14.htm"><B>TerminateProcess</B></A> function with a handle to the process. </P>

<P></P>

<P>The <A HREF="3yyt_hx.htm"><B>GetExitCodeThread</B></A> function returns the termination status of a thread. While a thread is executing, its termination status is STILL_ACTIVE. When a thread terminates, its termination status changes from STILL_ACTIVE to the exit code of the thread. The exit code is either the value specified in the call to <B>ExitThread</B>, <B>ExitProcess</B>, <B>TerminateThread</B>, or <B>TerminateProcess</B>, or the value returned by the thread function. </P>

<P>When a thread terminates, the state of the thread object changes to signaled, releasing any other threads that had been waiting for the thread to terminate. For more about synchronization, see <A HREF="2n3h_7u.htm">Synchronizing Execution of Multiple Threads</A>. </P>

<P>If a thread is terminated by <A HREF="c.xq03.htm"><B>ExitThread</B></A>, the system calls the entry-point function of each attached DLL with a value indicating that the thread is detaching from the DLL (unless you call the <A HREF="m3pje0.htm"><B>DisableThreadLibraryCalls</B></A> function). If a thread is terminated by <A HREF="i5ihdk.htm"><B>ExitProcess</B></A>, the DLL entry-point functions are invoked once, to indicate that the process is detaching. DLLs are not notified when a thread is terminated by <A HREF="0tmwd4.htm"><B>TerminateThread</B></A> or <A HREF=".d3m14.htm"><B>TerminateProcess</B></A>. For more information about DLLs, see <A HREF="ad.gsp.htm">Dynamic-Link Libraries</A>. </P>

<P><B>Warning</B>  The <B>TerminateThread</B> and <B>TerminateProcess</B> functions should be used only in extreme circumstances, since they do not allow threads to clean up, do not notify attached DLLs, and do not free the initial stack. The following steps provide a better solution: </P>

<P>·Create an event object using the <A HREF="j_zbjv.htm"><B>CreateEvent</B></A> function. </P>

<P>·Create the threads. </P>

<P>·Each thread monitors the event state by calling the <A HREF="j9iq2g.htm"><B>WaitForSingleObject</B></A> function. Use a wait time-out interval of zero. </P>

<P>·Each thread terminates its own execution when the event is set to the signaled state (<B>WaitForSingleObject</B> returns WAIT_OBJECT_0). </P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

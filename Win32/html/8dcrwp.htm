<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>VirtualFree</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="8dcrwp"></A><B>VirtualFree  <A HREF="lntd.z.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="7gqv3r.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="9cqndc.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>VirtualFree</B> function releases or decommits (or both) a region of pages within the virtual address space of the calling process. </P>

<P><B>BOOL VirtualFree(</B></P>

<TABLE cols=2 width=457>

<TR VALIGN="top">
<TD width=40%><B>LPVOID</B> <I>lpAddress</I><B>,</B></TD>
<TD width=60%>// address of region of committed pages  </TD>
</TR>

<TR VALIGN="top">
<TD width=40%><B>    DWORD</B> <I>dwSize</I><B>,</B></TD>
<TD width=60%>// size of region </TD>
</TR>

<TR VALIGN="top">
<TD width=40%><B>    DWORD</B> <I>dwFreeType</I> </TD>
<TD width=60%>// type of free operation </TD>
</TR>

<TR VALIGN="top">
<TD width=40%><B>   );</B></TD>
<TD width=60%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>lpAddress</I></P>

<P>Points to the base address of the region of pages to be freed. If the <I>dwFreeType</I> parameter includes the MEM_RELEASE flag, this parameter must be the base address returned by the <A HREF="1m7v8go.htm"><B>VirtualAlloc</B></A> function when the region of pages was reserved. </P>

<P><I>dwSize</I></P>

<P>Specifies the size, in bytes, of the region to be freed. If the <I>dwFreeType</I> parameter includes the MEM_RELEASE flag, this parameter must be zero. Otherwise, the region of affected pages includes all pages containing one or more bytes in the range from the <I>lpAddress</I> parameter to (<I>lpAddress</I>+<I>dwSize</I>). This means that a 2-byte range straddling a page boundary causes both pages to be freed. </P>

<P><I>dwFreeType</I></P>

<P>Specifies the type of free operation. One, but not both, of the following flags can be specified: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=33%><B>Flag</B></TD>
<TD width=67%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=33%>MEM_DECOMMIT</TD>
<TD width=67%>Decommits the specified region of committed pages.</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>&nbsp;</TD>
<TD width=67%>An attempt to decommit an uncommitted page will not cause the function to fail. This means that a range of committed or uncommitted pages can be decommitted without having to worry about a failure.</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>MEM_RELEASE</TD>
<TD width=67%>Releases the specified region of reserved pages. If this flag is specified, the <I>dwSize</I> parameter must be zero, or the function fails.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is nonzero.</P>

<P>If the function fails, the return value is zero. To get extended error information, call <A HREF="11c2vs7.htm"><B>GetLastError</B></A>. </P>

<P><B>Remarks</B></P>

<P><B>VirtualFree</B> can perform one of the following operations: </P>

<P>·Decommit a region of committed or uncommitted pages. </P>

<P>·Release a region of reserved pages. </P>

<P>·Decommit and release a region of committed or uncommitted pages. </P>

<P></P>

<P>To release a region of pages, the entire range of pages must be in the same state (all reserved or all committed) and the entire region originally reserved by the <B>VirtualAlloc</B> function must be released at the same time. If only part of the pages in the original reserved region are committed, you must first call <B>VirtualFree</B> to decommit the committed pages and then call <B>VirtualFree</B> again to release the entire block. </P>

<P>Pages that have been released are free pages available for subsequent allocation operations. Attempting to read from or write to a free page results in an access violation exception. </P>

<P><B>VirtualFree</B> can decommit an uncommitted page; this means that a range of committed or uncommitted pages can be decommitted without having to worry about a failure. Decommitting a page releases its physical storage, either in memory or in the paging file on disk. If a page is decommitted but not released, its state changes to reserved, and it can be committed again by a subsequent call to <B>VirtualAlloc</B>. Attempting to read from or write to a reserved page results in an access violation exception. </P>

<P>The current state of the entire range of pages must be compatible with the type of free operation specified by the <I>dwFreeType</I> parameter. Otherwise, the function fails and no pages are released or decommitted. </P>

<P><B>See Also</B></P>

<P><A HREF="f12w9..htm"><B>GlobalAlloc</B></A>, <A HREF="dvjhb..htm"><B>GlobalFree</B></A>, <A HREF="1m7v8go.htm"><B>VirtualAlloc</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

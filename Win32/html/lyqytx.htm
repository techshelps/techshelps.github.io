<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>LoadLibraryEx</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="lyqytx"></A><B>LoadLibraryEx  <A HREF="6z1pcq.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="ad.gsp.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="14bc1rp.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>LoadLibraryEx</B> function maps a specified executable module into the address space of the calling process. The executable module can be a .DLL or an .EXE file. The specified module may cause other modules to be mapped into the address space.</P>

<P><B>HINSTANCE LoadLibraryEx(</B></P>

<TABLE cols=2 width=459>

<TR VALIGN="top">
<TD width=44%><B>LPCTSTR</B> <I>lpLibFileName</I><B>,</B></TD>
<TD width=56%>// points to name of executable module</TD>
</TR>

<TR VALIGN="top">
<TD width=44%><B>    HANDLE</B> <I>hFile</I><B>,</B></TD>
<TD width=56%>// reserved, must be NULL </TD>
</TR>

<TR VALIGN="top">
<TD width=44%><B>    DWORD</B> <I>dwFlags</I> </TD>
<TD width=56%>// entry-point execution flag </TD>
</TR>

<TR VALIGN="top">
<TD width=44%><B>   );</B></TD>
<TD width=56%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>lpLibFileName</I></P>

<P>Points to a null-terminated string that names a Win32 executable module (either a .DLL or an .EXE file). The name specified is the filename of the executable module. This name is not related to the name stored in a library module itself, as specified by the <B>LIBRARY</B> keyword in the module-definition (.DEF) file. </P>

<P>If the string specifies a path, but the file does not exist in the specified directory, the function fails. </P>

<P>If the string does not specify a path, and the filename extension is omitted, the function appends the default library extension .DLL to the filename. However, the filename string can include a trailing point character (.) to indicate that the module name has no extension. </P>

<P>If the string does not specify a path, the function uses a standard search strategy to find the file. See the <B>Remarks</B> for more information.</P>

<P>If mapping the specified module into the address space causes the operating system to map in other, associated executable modules, the function can use either the standard search strategy or an alternate search strategy to find those modules. See the <B>Remarks</B> for more information.</P>

<P>Once the function obtains a fully qualified path to a library module file, the path is compared (in a case-independent manner) to the full paths of library modules that are currently loaded into the calling process. That set of libraries includes those that were loaded when the process was starting up, as well as those previously loaded by calls to <B>LoadLibrary </B>or <B>LoadLibraryEx</B> but not yet unloaded by calls to <B>FreeLibrary</B>. If the path matches the path of an already loaded module, the function just increments the reference count for the module, and returns the module handle for that library. </P>

<P><I>hFile</I></P>

<P>This parameter is reserved for future use. It must be NULL. </P>

<P><I>dwFlags</I></P>

<P>Specifies the action to take when loading the module. This parameter can be one of the following values:</P>

<TABLE cols=6>

<TR VALIGN="top">
<TD colspan=2 width=13%><B>Flag</B></TD>
<TD colspan=3 width=74%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD colspan=3 width=15%>DONT_RESOLVE_DLL_REFERENCES</TD>
<TD colspan=3 width=85%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=11%>&nbsp;</TD>
<TD colspan=3 width=64%><B>Windows NT only:</B> 
<P>If this value is given, and the executable module is a dynamic-link library (DLL), the operating system does not call the <A HREF="82sdq5.htm"><B>DllEntryPoint</B></A> function for process and thread initialization and termination. Also, the system does not load additional executable modules that are referenced by the specified module.</P>

<P>If this value is not given, and the executable module is a DLL, the operating system calls the <B>DllEntryPoint</B> function for process and thread initialization and termination. The system loads additional executable modules that are referenced by the specified module. The behavior of the function is then identical to that of <B>LoadLibrary<I> </I></B>in this regard. </P>
</TD>
</TR>

<TR VALIGN="top">
<TD colspan=3 width=15%>LOAD_LIBRARY_AS_DATAFILE</TD>
<TD colspan=3 width=85%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=11%>&nbsp;</TD>
<TD colspan=3 width=64%>If this value is given, the function does a simple mapping of the file into the address space. Nothing is done relative to executing or preparing to execute the code in the mapped file. The function loads the module as if it were a data file. You can use the module handle that the function returns in this case with the Win32 functions that operate on resources. Use this flag when you want to load a DLL in order to extract messages or resources from it, and have no intention of executing its code.
<P>If this value is not given, the function maps the file into the address space in the manner that is normal for an executable module. The behavior of the function is then identical to that of <B>LoadLibrary</B> in this regard.</P>
</TD>
</TR>

<TR VALIGN="top">
<TD colspan=3 width=15%>LOAD_WITH_ALTERED_SEARCH_PATH</TD>
<TD colspan=3 width=85%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=11%>&nbsp;</TD>
<TD colspan=3 width=64%>If this value is given, and <I>lpLibFileName</I> specifies a path, the function uses the alternate file search strategy discussed in the <B>Remarks</B> section following to find associated executable modules that the specified module causes to be loaded.
<P>If this value is not given, or if <I>lpLibFileName</I> does not specify a path, the function uses the standard search strategy discussed in the <B>Remarks</B> section following to find associated executable modules that the specified module causes to be loaded. The behavior of the function is then identical to that of <B>LoadLibrary</B> in this regard.</P>
</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is a handle to the mapped executable module.</P>

<P>If the function fails, the return value is NULL. To get extended error information, call <A HREF="11c2vs7.htm"><B>GetLastError</B></A>. </P>

<P><B>Remarks</B></P>

<P>Note that the DONT_RESOLVE_DLL_REFERENCES flag is only implemented on the Windows NT platform. It is not implemented on the Windows 95 platform.</P>

<P>The calling process can use the handle returned by this function to identify the module in calls to the <A HREF="c_pcn4.htm"><B>GetProcAddress</B></A>, <A HREF="4m9xmzg.htm"><B>FindResource</B></A>, and <A HREF=".w6p7m.htm"><B>LoadResource</B></A> functions. </P>

<P>The<B> LoadLibraryEx</B> function is very similar to the <A HREF="1vghbf8.htm"><B>LoadLibrary</B></A> function. The differences consist of a set of optional behaviors that <B>LoadLibraryEx</B> provides. First, <B>LoadLibraryEx</B> can map a DLL module without calling the <A HREF="82sdq5.htm"><B>DllEntryPoint</B></A> function of the DLL. Second, <B>LoadLibraryEx</B> can use either of two file search strategies to find executable modules that are associated with the specified module. Third, <B>LoadLibraryEx </B>can load a module in a way that is optimized for the case where the module will never be executed, loading the module as if it were a data file. You select these optional behaviors by setting the <I>dwFlags</I> parameter; if <I>dwFlags</I> is zero, <B>LoadLibraryEx</B> behaves identically to <B>LoadLibrary.</B></P>

<P>If no path is specified, the <B>LoadLibraryEx</B> function uses the same standard file search strategy that <A HREF="1vghbf8.htm"><B>LoadLibrary</B></A>, <A HREF="1fba0sq.htm"><B>SearchPath</B></A>, and <A HREF="47xk05.htm"><B>OpenFile</B></A> use to find the executable module and any associated executable modules that it causes to be loaded. This standard strategy searches for a file in the following sequence: </P>

<P>1.The directory from which the application loaded. </P>

<P>2.The current directory. </P>

<P>3.<B>Windows 95:</B> The Windows system directory. Use the <A HREF="3oj42sv.htm"><B>GetSystemDirectory</B></A> function to get the path of this directory.</P>

<P><B>Windows NT:</B> The 32-bit Windows system directory. Use the <B>GetSystemDirectory</B> function to get the path of this directory. The name of this directory is SYSTEM32.</P>

<P>4.<B>Windows NT:</B> The 16-bit Windows system directory. There is no Win32 function that obtains the path of this directory, but it is searched. The name of this directory is SYSTEM.</P>

<P>5.The Windows directory. Use the <A HREF="1b6tycn.htm"><B>GetWindowsDirectory</B></A> function to get the path of this directory. </P>

<P>6.The directories that are listed in the PATH environment variable. </P>

<P></P>

<P>If a path is specified, and the <I>dwFlags</I> parameter is set to LOAD_WITH_ALTERED_SEARCH_PATH, the <B>LoadLibraryEx</B> function uses an alternate file search strategy to find any executable modules that the specified module causes to be loaded. This alternate strategy searches for a file in the following sequence: </P>

<P>1.The directory specified by the <I>lpLibFileName</I> path. In other words, the directory that the specified executable module is in. </P>

<P>2.The current directory. </P>

<P>3.<B>Windows 95:</B> The Windows system directory. Use the <A HREF="3oj42sv.htm"><B>GetSystemDirectory</B></A> function to get the path of this directory.</P>

<P><B>Windows NT:</B> The 32-bit Windows system directory. Use the <B>GetSystemDirectory</B> function to get the path of this directory. The name of this directory is SYSTEM32.</P>

<P>4.<B>Windows NT:</B> The 16-bit Windows system directory. There is no Win32 function that obtains the path of this directory, but it is searched. The name of this directory is SYSTEM.</P>

<P>5.The Windows directory. Use the <A HREF="1b6tycn.htm"><B>GetWindowsDirectory</B></A> function to get the path of this directory. </P>

<P>6.The directories that are listed in the PATH environment variable. </P>

<P></P>

<P>Note that the standard file search strategy and the alternate search strategy differ in just one way: the standard strategy starts its search in the calling application's directory, and the alternate strategy starts its search in the directory of the executable module that <B>LoadLibraryEx</B> is loading.</P>

<P>If you specify the alternate search strategy, its behavior continues until all associated executable modules have been located. Once the system starts processing DLL initialization routines, the system reverts to the standard search strategy.</P>

<P><B>See Also</B></P>

<P><A HREF="82sdq5.htm"><B>DllEntryPoint</B></A>, <A HREF="4m9xmzg.htm"><B>FindResource</B></A>, <A HREF="3mcs_pm.htm"><B>FreeLibrary</B></A>, <A HREF="c_pcn4.htm"><B>GetProcAddress</B></A>, <A HREF="3oj42sv.htm"><B>GetSystemDirectory</B></A>, <A HREF="1b6tycn.htm"><B>GetWindowsDirectory</B></A>, <A HREF="1vghbf8.htm"><B>LoadLibrary</B></A>, <A HREF=".w6p7m.htm"><B>LoadResource</B></A>, <A HREF="47xk05.htm"><B>OpenFile</B></A>, <A HREF="1fba0sq.htm"><B>SearchPath</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

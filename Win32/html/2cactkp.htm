<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>Modeless Dialog Boxes</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="2cactkp"></A><B>Modeless Dialog Boxes</B></P>

<P>A modeless dialog box should be a pop-up window having a System menu, a title bar, and a thin border; that is, the dialog box template should specify the WS_POPUP, WS_CAPTION, WS_BORDER, and WS_SYSMENU styles. Windows does <I>not</I> automatically display the dialog box unless the template specifies the WS_VISIBLE style. </P>

<P>An application creates a modeless dialog box by using the <A HREF="ddoz5a.htm"><B>CreateDialog</B></A> or <A HREF="1.e6cp6.htm"><B>CreateDialogIndirect</B></A> function. <B>CreateDialog</B> requires the name or identifier of a resource containing a dialog box template; <B>CreateDialogIndirect</B> requires the handle of a memory object containing a dialog box template. Two other functions, <A HREF="1nwk5oe.htm"><B>CreateDialogParam</B></A> and <A HREF="2gx9rco.htm"><B>CreateDialogIndirectParam</B></A>, also create modeless dialog boxes; they pass a specified parameter to the dialog box procedure when the dialog box is created. </P>

<P><B>CreateDialog</B> and other creation functions return a window handle for the dialog box. The application and the dialog box procedure can use this handle to manage the dialog box. For example, if WS_VISIBLE is not specified in the dialog box template, the application can display the dialog box by passing the window handle to the <A HREF="3mejbzs.htm"><B>ShowWindow</B></A> function. </P>

<P>A modeless dialog box neither disables the owner window nor sends messages to it. When creating the dialog box, Windows makes it the active window, but the user or the application can change the active window at any time. If the dialog box does become inactive, it remains above the owner window in the Z order, even if the owner window is active. </P>

<P>The application is responsible for retrieving and dispatching input messages to the dialog box. Most applications use the main message loop for this. To permit the user to move to and select controls by using the keyboard, however, the application must call the <A HREF="3mdxb3e.htm"><B>IsDialogMessage</B></A> function. For more information about this function, see <A HREF="1n40c32.htm">Dialog Box Keyboard Interface</A>. </P>

<P>A modeless dialog box cannot return a value to the application as a modal dialog box does, but the dialog box procedure can send information to the owner window by using the <A HREF="1724msn.htm"><B>SendMessage</B></A> function. </P>

<P>An application must destroy all modeless dialog boxes before terminating. It can destroy a modeless dialog box by using the <A HREF="1vrgccm.htm"><B>DestroyWindow</B></A> function. In most cases, the dialog box procedure calls <B>DestroyWindow</B> in response to user input, such as choosing the Cancel button. If the user never closes the dialog box in this way, the application must call <B>DestroyWindow</B>. </P>

<P><B>DestroyWindow</B> invalidates the window handle for the dialog box, so any subsequent calls to functions that use the handle return error values. To prevent errors, the dialog box procedure should notify the owner that the dialog box has been destroyed. Many applications maintain a global variable containing the handle for the dialog box. When the dialog box procedure destroys the dialog box, it also sets the global variable to NULL, indicating that the dialog box is no longer valid. </P>

<P>The dialog box procedure must not call the <A HREF="nyk21c.htm"><B>EndDialog</B></A> function to destroy a modeless dialog box. </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

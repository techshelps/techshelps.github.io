<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>Using Coordinate Spaces and Transformations</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="97mrvh"></A><B>Using Coordinate Spaces and Transformations</B></P>

<P>This section contains an example that demonstrates the following tasks: </P>

<P>·Drawing graphics with predefined units.</P>

<P>·Centering graphics in the application's client area.</P>

<P>·Scaling graphics output to half its original size.</P>

<P>·Translating graphics output 3/4 of an inch to the right.</P>

<P>·Rotating graphics 30 degrees.</P>

<P>·Shearing graphics output along the x-axis.</P>

<P>·Reflecting graphics output about an imaginary horizontal axis drawn through its midpoint.</P>

<P>The following example was used to create the illustrations that appear earlier in this topic. </P>

<P>void TransformAndDraw(int iTransform, HWND hWnd)  </P>

<P>{  </P>

<P></P>

<P>HDC hDC; </P>

<P>XFORM xForm; </P>

<P>RECT rect; </P>

<P></P>

<P>/* Retrieve a DC handle for the application's window. */ </P>

<P></P>

<P>hDC = GetDC(hWnd); </P>

<P></P>

<P></P>

<P>/* </P>

<P>* Set the mapping mode to LOENGLISH. This moves the </P>

<P>* client area origin from the upper left corner of the </P>

<P>* window to the lower left corner (this also reorients </P>

<P>* the y-axis so that drawing operations occur in a true </P>

<P>* Cartesian space). It guarantees portability so that </P>

<P>* the object drawn retains its dimensions on any </P>

<P>* display running Windows. </P>

<P>*/ </P>

<P></P>

<P>SetMapMode(hDC, MM_LOENGLISH); </P>

<P></P>

<P>/* </P>

<P>* Set the appropriate world transformation (based on the </P>

<P>* user's menu selection). </P>

<P>*/ </P>

<P></P>

<P>switch (iTransform) { </P>

<P>case SCALE:        /* Scale to 1/2 of the original size. */ </P>

<P>xForm.eM11 = (FLOAT) 0.5; </P>

<P>xForm.eM12 = (FLOAT) 0.0; </P>

<P>xForm.eM21 = (FLOAT) 0.0; </P>

<P>xForm.eM22 = (FLOAT) 0.5; </P>

<P>xForm.eDx  = (FLOAT) 0.0; </P>

<P>xForm.eDy  = (FLOAT) 0.0; </P>

<P>SetWorldTransform(hDC, &amp;xForm); </P>

<P>break; </P>

<P></P>

<P>case TRANSLATE:   /* Translate right by 3/4 inch. */ </P>

<P>xForm.eM11 = (FLOAT) 1.0; </P>

<P>xForm.eM12 = (FLOAT) 0.0; </P>

<P>xForm.eM21 = (FLOAT) 0.0; </P>

<P>xForm.eM22 = (FLOAT) 1.0; </P>

<P>xForm.eDx  = (FLOAT) 75.0; </P>

<P>xForm.eDy  = (FLOAT) 0.0; </P>

<P>SetWorldTransform(hDC, &amp;xForm); </P>

<P>break; </P>

<P></P>

<P>case ROTATE:      /* Rotate 30 degrees counterclockwise. */ </P>

<P>xForm.eM11 = (FLOAT) 0.8660; </P>

<P>xForm.eM12 = (FLOAT) 0.5000; </P>

<P>xForm.eM21 = (FLOAT) -0.5000; </P>

<P>xForm.eM22 = (FLOAT) 0.8660; </P>

<P>xForm.eDx  = (FLOAT) 0.0; </P>

<P>xForm.eDy  = (FLOAT) 0.0; </P>

<P>SetWorldTransform(hDC, &amp;xForm); </P>

<P>break; </P>

<P></P>

<P>case SHEAR:       /* Shear along the x-axis with a    */ </P>

<P>/* proportionality constant of 1.0. */ </P>

<P>xForm.eM11 = (FLOAT) 1.0; </P>

<P>xForm.eM12 = (FLOAT) 1.0; </P>

<P>xForm.eM21 = (FLOAT) 0.0; </P>

<P>xForm.eM22 = (FLOAT) 1.0; </P>

<P>xForm.eDx  = (FLOAT) 0.0; </P>

<P>xForm.eDy  = (FLOAT) 0.0; </P>

<P>SetWorldTransform(hDC, &amp;xForm); </P>

<P>break; </P>

<P></P>

<P>case REFLECT:     /* Reflect about a horizontal axis. */ </P>

<P>xForm.eM11 = (FLOAT) 1.0; </P>

<P>xForm.eM12 = (FLOAT) 0.0; </P>

<P>xForm.eM21 = (FLOAT) 0.0; </P>

<P>xForm.eM22 = (FLOAT) -1.0; </P>

<P>xForm.eDx  = (FLOAT) 0.0; </P>

<P>xForm.eDy  = (FLOAT) 0.0; </P>

<P>SetWorldTransform(hDC, &amp;xForm); </P>

<P>break; </P>

<P></P>

<P>case NORMAL:      /* Set the unity transformation. */ </P>

<P>xForm.eM11 = (FLOAT) 1.0; </P>

<P>xForm.eM12 = (FLOAT) 0.0; </P>

<P>xForm.eM21 = (FLOAT) 0.0; </P>

<P>xForm.eM22 = (FLOAT) 1.0; </P>

<P>xForm.eDx  = (FLOAT) 0.0; </P>

<P>xForm.eDy  = (FLOAT) 0.0; </P>

<P>SetWorldTransform(hDC, &amp;xForm); </P>

<P>break; </P>

<P></P>

<P>} </P>

<P></P>

<P>/* Find the midpoint of the client area. */ </P>

<P></P>

<P>GetClientRect(hWnd, (LPRECT) &amp;rect); </P>

<P>DPtoLP(hDC, (LPPOINT) &amp;rect, 2); </P>

<P></P>

<P>/* Select a hollow brush. */ </P>

<P></P>

<P>SelectObject(hDC, GetStockObject(HOLLOW_BRUSH)); </P>

<P></P>

<P></P>

<P>/* Draw the exterior circle. */ </P>

<P></P>

<P>Ellipse(hDC, (rect.right / 2 - 100), (rect.bottom / 2 + 100), </P>

<P>(rect.right / 2 + 100), (rect.bottom / 2 - 100)); </P>

<P></P>

<P>/* Draw the interior circle. */ </P>

<P></P>

<P>Ellipse(hDC, (rect.right / 2 -94), (rect.bottom / 2 + 94), </P>

<P>(rect.right / 2 + 94), (rect.bottom / 2 - 94)); </P>

<P></P>

<P>/* Draw the key. */ </P>

<P></P>

<P>Rectangle(hDC, (rect.right / 2 - 13), (rect.bottom / 2 + 113), </P>

<P>(rect.right / 2 + 13), (rect.bottom / 2 + 50)); </P>

<P>Rectangle(hDC, (rect.right / 2 - 13), (rect.bottom / 2 + 96), </P>

<P>(rect.right / 2 + 13), (rect.bottom / 2 + 50)); </P>

<P></P>

<P></P>

<P>/* Draw the horizontal lines. */ </P>

<P></P>

<P></P>

<P>MoveToEx(hDC, (rect.right / 2 - 150), (rect.bottom / 2 + 0), NULL); </P>

<P>LineTo(hDC, (rect.right / 2 - 16), (rect.bottom / 2 + 0)); </P>

<P></P>

<P>MoveToEx(hDC, (rect.right / 2 - 13), (rect.bottom / 2 + 0), NULL); </P>

<P>LineTo(hDC, (rect.right / 2 + 13), (rect.bottom / 2 + 0)); </P>

<P></P>

<P>MoveToEx(hDC, (rect.right / 2 + 16), (rect.bottom / 2 + 0), NULL); </P>

<P>LineTo(hDC, (rect.right / 2 + 150), (rect.bottom / 2 + 0)); </P>

<P></P>

<P></P>

<P></P>

<P>/* Draw the vertical lines. */ </P>

<P></P>

<P>MoveToEx(hDC, (rect.right / 2 + 0), (rect.bottom / 2 - 150), NULL); </P>

<P>LineTo(hDC, (rect.right / 2 + 0), (rect.bottom / 2 - 16)); </P>

<P></P>

<P>MoveToEx(hDC, (rect.right / 2 + 0), (rect.bottom / 2 - 13), NULL); </P>

<P>LineTo(hDC, (rect.right / 2 + 0), (rect.bottom / 2 + 13)); </P>

<P></P>

<P>MoveToEx(hDC, (rect.right / 2 + 0), (rect.bottom / 2 + 16), NULL); </P>

<P>LineTo(hDC, (rect.right / 2 + 0), (rect.bottom / 2 + 150)); </P>

<P></P>

<P>ReleaseDC(hWnd, hDC); </P>

<P></P>

<P>} </P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

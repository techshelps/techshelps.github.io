<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>MultiByteToWideChar</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="2dr2_sz"></A><B>MultiByteToWideChar  <A HREF="1lxf0kx.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="1r0c_vq.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="21act6p.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>MultiByteToWideChar</B> function maps a character string to a wide-character (Unicode) string. The character string mapped by this function is not necessarily from a multibyte character set. </P>

<P><B>int MultiByteToWideChar(</B></P>

<TABLE cols=2 width=443>

<TR VALIGN="top">
<TD width=45%><B>UINT</B> <I>CodePage</I><B>,</B></TD>
<TD width=55%>// code page </TD>
</TR>

<TR VALIGN="top">
<TD width=45%><B>    DWORD</B> <I>dwFlags</I><B>,</B></TD>
<TD width=55%>// character-type options </TD>
</TR>

<TR VALIGN="top">
<TD width=45%><B>    LPCSTR</B> <I>lpMultiByteStr</I><B>,</B></TD>
<TD width=55%>// address of string to map </TD>
</TR>

<TR VALIGN="top">
<TD width=45%><B>    int</B> <I>cchMultiByte</I><B>,</B></TD>
<TD width=55%>// number of characters in string </TD>
</TR>

<TR VALIGN="top">
<TD width=45%><B>    LPWSTR</B> <I>lpWideCharStr</I><B>,</B></TD>
<TD width=55%>// address of wide-character buffer </TD>
</TR>

<TR VALIGN="top">
<TD width=45%><B>    int</B> <I>cchWideChar</I> </TD>
<TD width=55%>// size of buffer </TD>
</TR>

<TR VALIGN="top">
<TD width=45%><B>   );</B></TD>
<TD width=55%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>CodePage</I></P>

<P>Specifies the code page to be used to perform the conversion. This parameter can be given the value of any codepage that is installed or available in the system. The following values may be used to specify one of the system default code pages: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=24%><B>Value</B></TD>
<TD width=76%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=24%>CP_ACP</TD>
<TD width=76%>ANSI code page</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>CP_MACCP</TD>
<TD width=76%>Macintosh code page</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>CP_OEMCP</TD>
<TD width=76%>OEM code page</TD>
</TR>
</TABLE><BR>

<P></P>

<P><I>dwFlags</I></P>

<P>A set of bit flags that indicate whether to translate to precomposed or composite wide characters (if a composite form exists), whether to use glyph characters in place of control characters, and how to deal with invalid characters. You can specify a combination of the following flag constants:</P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=40%><B>Value</B></TD>
<TD width=60%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=40%>MB_PRECOMPOSED</TD>
<TD width=60%>Always use precomposed characters ¾ that is, characters in which a base character and a nonspacing character have a single character value. This is the default translation option. Cannot be used with MB_COMPOSITE.</TD>
</TR>

<TR VALIGN="top">
<TD width=40%>MB_COMPOSITE</TD>
<TD width=60%>Always use composite characters ¾ that is, characters in which a base character and a nonspacing character have different character values. Cannot be used with MB_PRECOMPOSED.</TD>
</TR>

<TR VALIGN="top">
<TD width=40%>MB_ERR_INVALID_CHARS</TD>
<TD width=60%>If the function encounters an invalid input character, it fails and <B>GetLastError</B> returns ERROR_NO_UNICODE_TRANSLATION. </TD>
</TR>

<TR VALIGN="top">
<TD width=40%>MB_USEGLYPHCHARS</TD>
<TD width=60%>Use glyph characters instead of control characters.</TD>
</TR>
</TABLE><BR>

<P></P>

<P>A composite character consists of a base character and a nonspacing character, each having different character values. A precomposed character has a single character value for a base/non-spacing character combination. In the character <I>è</I>, the <I>e</I> is the base character and the accent grave mark is the nonspacing character. </P>

<P>The function's default behavior is to translate to the precomposed form. If a precomposed form does not exist, the function attempts to translate to a composite form.</P>

<P>The flags MB_PRECOMPOSED and MB_COMPOSITE are mutually exclusive. The MB_USEGLYPHCHARS flag and the MB_ERR_INVALID_CHARS can be set regardless of the state of the other flags.</P>

<P><I>lpMultiByteStr</I></P>

<P>Points to the character string to be converted. </P>

<P><I>cchMultiByte</I></P>

<P>Specifies the size in bytes of the string pointed to by the <I>lpMultiByteStr</I> parameter. If this value is -1, the string is assumed to be null terminated and the length is calculated automatically. </P>

<P><I>lpWideCharStr</I></P>

<P>Points to a buffer that receives the translated string. </P>

<P><I>cchWideChar</I></P>

<P>Specifies the size, in wide characters, of the buffer pointed to by the <I>lpWideCharStr</I> parameter. If this value is zero, the function returns the required buffer size, in wide characters, and makes no use of the <I>lpWideCharStr</I> buffer. </P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, and <I>cchWideChar</I> is nonzero, the return value is the number of wide characters written to the buffer pointed to by <I>lpWideCharStr</I>. </P>

<P>If the function succeeds, and <I>cchWideChar</I> is zero, the return value is the required size, in wide characters, for a buffer that can receive the translated string. </P>

<P>If the function fails, the return value is zero. To get extended error information, call <A HREF="11c2vs7.htm"><B>GetLastError</B></A>. <B>GetLastError</B> may return one of the following error codes:</P>

<TABLE cols=1>

<TR VALIGN="top">
<TD width=100%>ERROR_INSUFFICIENT_BUFFER</TD>
</TR>

<TR VALIGN="top">
<TD width=100%>ERROR_INVALID_FLAGS</TD>
</TR>

<TR VALIGN="top">
<TD width=100%>ERROR_INVALID_PARAMETER</TD>
</TR>

<TR VALIGN="top">
<TD width=100%>ERROR_NO_UNICODE_TRANSLATION</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Remarks</B></P>

<P>The <I>lpMultiByteStr</I> and <I>lpWideCharStr</I> pointers must not be the same. If they are the same, the function fails, and <B>GetLastError</B> returns the value ERROR_INVALID_PARAMETER. </P>

<P>The function fails if MB_ERR_INVALID_CHARS is set and it encounters an invalid character in the source string.  An invalid character is one that would translate to the default character if MB_ERR_INVALID_CHARS was not set, but is not the default character in the source string, or when a lead byte is found in a string and there is no valid trail byte for DBCS strings. When an invalid character is found, and MB_ERR_INVALID_CHARS is set, the function returns 0 and sets <B>GetLastError </B>with the error ERROR_NO_UNICODE_TRANSLATION.</P>

<P><B>See Also</B></P>

<P><A HREF="17gxpkx.htm"><B>WideCharToMultiByte</B></A> </P>

</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>Synchronous and Asynchronous Transactions</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="78r6y9"></A><B>Synchronous and Asynchronous Transactions</B></P>

<P>A client can send either synchronous or asynchronous transactions. In a synchronous transaction, the client specifies a time-out value that indicates the maximum amount of time it will wait for the server to process the transaction. <A HREF="1u9wm4r.htm"><B>DdeClientTransaction</B></A> does not return until the server processes the transaction, the transaction fails, or the time-out value expires. The client specifies the time-out value when it calls <B>DdeClientTransaction</B>. </P>

<P>During a synchronous transaction, the client enters a modal loop while waiting for the transaction to be processed. The client can still process user input but cannot send another synchronous transaction until <B>DdeClientTransaction</B> returns. </P>

<P>A client sends an asynchronous transaction by specifying the TIMEOUT_ASYNC flag in <B>DdeClientTransaction</B>. The function returns after the transaction has begun, passing a transaction identifier to the client. When the server finishes processing the asynchronous transaction, the DDEML sends an <A HREF="sfspgt.htm">XTYP_XACT_COMPLETE</A> transaction to the client. One of the parameters that the DDEML passes to the client during the XTYP_XACT_COMPLETE transaction is the transaction identifier. By comparing this transaction identifier with the identifier returned by <B>DdeClientTransaction</B>, the client identifies which asynchronous transaction the server has finished processing. </P>

<P>A client can use the <A HREF="1kl314o.htm"><B>DdeSetUserHandle</B></A> function as an aid in processing an asynchronous transaction. This function makes it possible for a client to associate an application-defined doubleword value with a conversation handle and a transaction identifier. The client can use the <A HREF="14336h1.htm"><B>DdeQueryConvInfo</B></A> function during the XTYP_XACT_COMPLETE transaction to obtain the application-defined doubleword value. Because of this function, an application need not maintain a list of active transaction identifiers. </P>

<P>When a client successfully completes a request for data using a synchronous transaction, the DDEML has no way to tell when the client has finished using the data received. The client application must pass the data handle received to the <A HREF="16wlv6r.htm"><B>DdeFreeDataHandle</B></A> function, notifying the DDEML that the handle will no longer be used. Data handles returned by synchronous transactions are effectively owned by the client. </P>

<P>If a server does not process an asynchronous transaction in a timely manner, the client can abandon the transaction by calling the <A HREF="pem5gi.htm"><B>DdeAbandonTransaction</B></A> function. The DDEML releases all resources associated with the transaction and discards the results of the transaction when the server finishes processing it. A time-out during a synchronous transaction effectively cancels the transaction. </P>

<P>The asynchronous transaction method is provided for applications that must send a high volume of DDE transactions while simultaneously performing a substantial amount of processing, such as performing calculations. The asynchronous method is also useful in applications that must stop processing DDE transactions temporarily so they can complete other tasks without interruption. In most other situations, an application should use the synchronous method. </P>

<P>Synchronous transactions are simpler to maintain and are faster than asynchronous transactions. However, only one synchronous transaction can be performed at a time, whereas many asynchronous transactions can be performed simultaneously. With synchronous transactions, a slow server can cause a client to remain idle while it is waiting for a response. Also, synchronous transactions cause the client to enter a modal loop that could bypass message filtering in the application's own message loop. </P>

<P>If the client has installed a hook procedure to filter messages (that is, specified the WH_MSGFILTER hook type in a call to the <A HREF="2d7__i2.htm"><B>SetWindowsHookEx</B></A> function), a synchronous transaction will not cause the system to bypass the hook procedure. When an input event occurs while the client is waiting for a synchronous transaction to end, the hook procedure receives an MSGF_DDEMGR hook code. The main danger of using a synchronous transaction modal loop is that a modal loop created by a dialog box can interfere with its operation. Asynchronous transactions should always be used when the DDEML is being used by a dynamic-link library (DLL). </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Adding Lines and Graphs to a Menu</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="1k1rlur"></A><B>Adding Lines and Graphs to a Menu</B></P>

<P>The following code sample shows how to create a menu that contains menu-item bitmaps. It creates two menus. The first is a Chart menu that contains three menu-item bitmaps: a pie chart, a line chart, and a bar chart. The example demonstrates how to load these bitmaps from the application's resource file, and then use the <A HREF="gok5np.htm"><B>CreatePopupMenu</B></A> and <A HREF="12z._0t.htm"><B>AppendMenu</B></A> functions to create the menu and menu items. </P>

<P>The second menu is a Lines menu. It contains bitmaps showing the line styles provided by the predefined pen in Windows. The line-style bitmaps are created at run time by using GDI functions. </P>

<P>Here are the definitions of the bitmap resources in the application's resource-definition file. </P>

<P>PIE BITMAP pie.bmp  </P>

<P>LINE BITMAP line.bmp </P>

<P>BAR BITMAP bar.bmp </P>

<P></P>

<P>Here are the relevant portions of the application's header file. </P>

<P>// Menu-item identifiers  </P>

<P></P>

<P>#define IDM_SOLID       PS_SOLID </P>

<P>#define IDM_DASH        PS_DASH </P>

<P>#define IDM_DASHDOT     PS_DASHDOT </P>

<P>#define IDM_DASHDOTDOT  PS_DASHDOTDOT </P>

<P></P>

<P>#define IDM_PIE  1 </P>

<P>#define IDM_LINE 2 </P>

<P>#define IDM_BAR  3 </P>

<P></P>

<P>// Line-type flags  </P>

<P></P>

<P>#define SOLID       0 </P>

<P>#define DOT         1 </P>

<P>#define DASH        2 </P>

<P>#define DASHDOT     3 </P>

<P>#define DASHDOTDOT  4 </P>

<P></P>

<P>//Count of pens  </P>

<P></P>

<P>#define CPENS 5 </P>

<P></P>

<P>// Chart-type flags  </P>

<P></P>

<P>#define PIE  1 </P>

<P>#define LINE 2 </P>

<P>#define BAR  3 </P>

<P></P>

<P>// Function prototypes  </P>

<P></P>

<P>LRESULT APIENTRY MainWndProc(HWND, UINT, WPARAM, LPARAM); </P>

<P>VOID MakeChartMenu(HWND); </P>

<P>VOID MakeLineMenu(HWND, HPEN, HBITMAP); </P>

<P></P>

<P>The following example shows how menus and menu-item bitmaps are created in an application. </P>

<P>LRESULT APIENTRY MainWndProc(hwnd, uMsg, wParam, lParam)  </P>

<P>HWND hwnd; </P>

<P>UINT uMsg; </P>

<P>WPARAM wParam; </P>

<P>LPARAM lParam; </P>

<P>{ </P>

<P></P>

<P>static HPEN hpen[CPENS]; </P>

<P>static HBITMAP hbmp[CPENS]; </P>

<P>int i; </P>

<P></P>

<P>switch (uMsg) { </P>

<P>case WM_CREATE: </P>

<P></P>

<P>// Create the Chart and Line menus.  </P>

<P></P>

<P>MakeChartMenu(hwnd); </P>

<P>MakeLineMenu(hwnd, hpen, hbmp); </P>

<P>return 0; </P>

<P></P>

<P>. </P>

<P>. // Process other window messages. </P>

<P>. </P>

<P></P>

<P>case WM_DESTROY: </P>

<P></P>

<P>for (i = 0; i &lt; CPENS; i++) { </P>

<P>DeleteObject(hbmp[i]); </P>

<P>DeleteObject(hpen[i]); </P>

<P>} </P>

<P></P>

<P>PostQuitMessage(0); </P>

<P>break; </P>

<P></P>

<P>default: </P>

<P>return DefWindowProc(hwnd, uMsg, wParam, lParam); </P>

<P>} </P>

<P>return NULL; </P>

<P>} </P>

<P></P>

<P>VOID MakeChartMenu(hwnd) </P>

<P>HWND hwnd;              // handle of owner window       </P>

<P>{ </P>

<P>HBITMAP hbmpPie;    // handle of pie chart bitmap   </P>

<P>HBITMAP hbmpLine;   // handle of line chart bitmap  </P>

<P>HBITMAP hbmpBar;    // handle of bar chart bitmap   </P>

<P>HMENU hmenuMain;    // handle of main menu          </P>

<P>HMENU hmenuChart;   // handle of Chart menu  </P>

<P></P>

<P>// Load the pie, line, and bar chart bitmaps from the </P>

<P>// resource-definition file. </P>

<P></P>

<P>hbmpPie = LoadBitmap(hinst, MAKEINTRESOURCE(PIE)); </P>

<P>hbmpLine = LoadBitmap(hinst, MAKEINTRESOURCE(LINE)); </P>

<P>hbmpBar = LoadBitmap(hinst, MAKEINTRESOURCE(BAR)); </P>

<P></P>

<P>// Create the Chart menu and add it to the menu bar. </P>

<P>// Append the Pie, Line, and Bar menu items to the Chart </P>

<P>// menu. </P>

<P></P>

<P>hmenuMain = GetMenu(hwnd); </P>

<P>hmenuChart = CreatePopupMenu(); </P>

<P>AppendMenu(hmenuMain, MF_STRING | MF_POPUP, (UINT) hmenuChart, </P>

<P>"Chart"); </P>

<P>AppendMenu(hmenuChart, MF_BITMAP, IDM_PIE, (LPCTSTR) hbmpPie); </P>

<P>AppendMenu(hmenuChart, MF_BITMAP, IDM_LINE, </P>

<P>(LPCTSTR) hbmpLine); </P>

<P>AppendMenu(hmenuChart, MF_BITMAP, IDM_BAR, (LPCTSTR) hbmpBar); </P>

<P></P>

<P>return; </P>

<P>} </P>

<P></P>

<P>VOID MakeLineMenu(hwnd, phpen, phbmp) </P>

<P>HWND hwnd; </P>

<P>HPEN *phpen; </P>

<P>HBITMAP *phbmp; </P>

<P>{ </P>

<P>HMENU hmenuLines;       // handle of Lines menu      </P>

<P>HMENU hmenu;            // handle of main menu              </P>

<P>COLORREF crMenuClr;     // menu-item background color       </P>

<P>HBRUSH hbrBackground;   // handle of background brush       </P>

<P>HBRUSH hbrOld;          // handle of previous brush         </P>

<P>LONG lCheckXY;          // dimensions of check-mark bitmap  </P>

<P>WORD wLineX;            // width of line bitmaps            </P>

<P>WORD wLineY;            // height of line bitmaps           </P>

<P>HDC hdcMain;            // handle of main window's DC       </P>

<P>HDC hdcLines;           // handle of compatible DC          </P>

<P>HBITMAP hbmpOld;        // handle of previous bitmap        </P>

<P>int i;                  // loop counter                     </P>

<P></P>

<P>// Create the Lines menu. Add it to the menu bar.  </P>

<P></P>

<P>hmenu = GetMenu(hwnd); </P>

<P>hmenuLines = CreatePopupMenu(); </P>

<P>AppendMenu(hmenu, MF_STRING | MF_POPUP, </P>

<P>(UINT) hmenuLines, "&amp;Lines"); </P>

<P></P>

<P>// Create a brush for the menu-item background color.  </P>

<P></P>

<P>crMenuClr = GetSysColor(COLOR_MENU); </P>

<P>hbrBackground = CreateSolidBrush(crMenuClr); </P>

<P></P>

<P>// Create a compatible device context for the line bitmaps, </P>

<P>// and then select the background brush into it. </P>

<P></P>

<P>hdcMain = GetDC(hwnd); </P>

<P>hdcLines = CreateCompatibleDC(hdcMain); </P>

<P>hbrOld = SelectObject(hdcLines, hbrBackground); </P>

<P></P>

<P>// Get the dimensions of the check-mark bitmap. The width of </P>

<P>// the line bitmaps will be five times the width of the </P>

<P>// check-mark bitmap. </P>

<P></P>

<P>lCheckXY = GetMenuCheckMarkDimensions(); </P>

<P>wLineX = LOWORD(lCheckXY) * (WORD) 5; </P>

<P>wLineY = HIWORD(lCheckXY); </P>

<P></P>

<P>// Create the bitmaps and select them, one at a time, into the </P>

<P>// compatible device context. Initialize each bitmap by </P>

<P>// filling it with the menu-item background color. </P>

<P></P>

<P>for (i = 0; i &lt; CPENS; i++) { </P>

<P>phbmp[i] = CreateCompatibleBitmap(hdcMain, wLineX, wLineY); </P>

<P>if (i == 0) </P>

<P>hbmpOld = SelectObject(hdcLines, phbmp[i]); </P>

<P>else </P>

<P>SelectObject(hdcLines, phbmp[i]); </P>

<P>ExtFloodFill(hdcLines, 0, 0, crMenuClr, FLOODFILLBORDER); </P>

<P>} </P>

<P></P>

<P>// Create the pens.  </P>

<P></P>

<P>phpen[0] = CreatePen(PS_SOLID, 1, RGB(0, 0, 0)); </P>

<P>phpen[1] = CreatePen(PS_DOT, 1, RGB(0, 0, 0)); </P>

<P>phpen[2] = CreatePen(PS_DASH, 1, RGB(0, 0, 0)); </P>

<P>phpen[3] = CreatePen(PS_DASHDOT, 1, RGB(0, 0, 0)); </P>

<P>phpen[4] = CreatePen(PS_DASHDOTDOT, 1, RGB(0, 0, 0)); </P>

<P></P>

<P>// Select a pen and a bitmap into the compatible device </P>

<P>// context, draw a line into the bitmap, and then append </P>

<P>// the bitmap as an item in the Lines menu. </P>

<P></P>

<P>for (i = 0; i &lt; CPENS; i++) { </P>

<P>SelectObject(hdcLines, phbmp[i]); </P>

<P>SelectObject(hdcLines, phpen[i]); </P>

<P>MoveToEx(hdcLines, 0, wLineY / 2, NULL); </P>

<P>LineTo(hdcLines, wLineX, wLineY / 2); </P>

<P>AppendMenu(hmenuLines, MF_BITMAP, i + 1, </P>

<P>(LPCTSTR) phbmp[i]); </P>

<P>} </P>

<P></P>

<P>// Release the main window's device context and destroy the </P>

<P>// compatible device context. Also, destroy the background </P>

<P>// brush. </P>

<P></P>

<P>ReleaseDC(hwnd, hdcMain); </P>

<P>SelectObject(hdcLines, hbrOld); </P>

<P>DeleteObject(hbrBackground); </P>

<P>SelectObject(hdcLines, hbmpOld); </P>

<P>DeleteDC(hdcLines); </P>

<P></P>

<P>return; </P>

<P>} </P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

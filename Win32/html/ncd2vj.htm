<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>CallWindowProc</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="ncd2vj"></A><B>CallWindowProc  <A HREF="1z390kk.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="1k62v6p.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="k63qjd.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>CallWindowProc</B> function passes message information to the specified window procedure. </P>

<P><B>LRESULT CallWindowProc(</B></P>

<TABLE cols=2 width=441>

<TR VALIGN="top">
<TD width=50%><B>WNDPROC</B> <I>lpPrevWndFunc</I><B>,</B></TD>
<TD width=50%>// pointer to previous procedure</TD>
</TR>

<TR VALIGN="top">
<TD width=50%><B>    HWND</B> <I>hWnd</I><B>,</B></TD>
<TD width=50%>// handle to window</TD>
</TR>

<TR VALIGN="top">
<TD width=50%><B>    UINT</B> <I>Msg</I><B>,</B></TD>
<TD width=50%>// message</TD>
</TR>

<TR VALIGN="top">
<TD width=50%><B>    WPARAM</B> <I>wParam</I><B>,</B></TD>
<TD width=50%>// first message parameter</TD>
</TR>

<TR VALIGN="top">
<TD width=50%><B>    LPARAM</B> <I>lParam</I> </TD>
<TD width=50%>// second message parameter</TD>
</TR>

<TR VALIGN="top">
<TD width=50%><B>   );</B></TD>
<TD width=50%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>lpPrevWndFunc</I></P>

<P>Pointer to the previous window procedure. </P>

<P>If this value is obtained by calling the <A HREF="vb50yw.htm"><B>GetWindowLong</B></A> function with the <I>nIndex</I> parameter set to GWL_WNDPROC or DWL_DLGPROC, it is actually either the address of a window or dialog box procedure, or a handle representing that address.</P>

<P><I>hWnd</I></P>

<P>Identifies the window procedure to receive the message. </P>

<P><I>Msg</I></P>

<P>Specifies the message. </P>

<P><I>wParam</I></P>

<P>Specifies additional message-specific information. The contents of this parameter depend on the value of the <I>Msg</I> parameter.</P>

<P><I>lParam</I></P>

<P>Specifies additional message-specific information. The contents of this parameter depend on the value of the <I>Msg</I> parameter.</P>

<P></P>

<P><B>Return Values</B></P>

<P>The return value specifies the result of the message processing and depends on the message sent. </P>

<P><B>Remarks</B></P>

<P>Use the <B>CallWindowProc</B> function for window subclassing. Usually, all windows with the same class share one window procedure. A subclass is a window or set of windows with the same class whose messages are intercepted and processed by another window procedure (or procedures) before being passed to the window procedure of the class. </P>

<P>The <A HREF="d2okir.htm"><B>SetWindowLong</B></A> function creates the subclass by changing the window procedure associated with a particular window, causing Windows to call the new window procedure instead of the previous one. An application must pass any messages not processed by the new window procedure to the previous window procedure by calling <B>CallWindowProc</B>. This allows the application to create a chain of window procedures. </P>

<P>If STRICT is defined, the <I>lpPrevWndFunc</I> parameter has the data type <A HREF="14lg1og.htm"><B>WNDPROC</B></A>. The <B>WNDPROC</B> type is declared as follows: </P>

<P>LRESULT (CALLBACK* WNDPROC) (HWND, UINT, WPARAM, LPARAM);  </P>

<P></P>

<P>If STRICT is not defined, the <I>lpPrevWndFunc</I> parameter has the data type <A HREF="14lg1og.htm"><B>FARPROC</B></A>. The <B>FARPROC</B> type is declared as follows: </P>

<P>int (FAR WINAPI * FARPROC) ()  </P>

<P></P>

<P>In C, the <B>FARPROC</B> declaration indicates a callback function that has an unspecified parameter list. In C++, however, the empty parameter list in the declaration indicates that a function has no parameters. This subtle distinction can break careless code. Following is one way to handle this situation: </P>

<P>#ifdef STRICT  </P>

<P>WNDPROC MyWindowProcedure </P>

<P>#else </P>

<P>FARPROC MyWindowProcedure </P>

<P>#endif </P>

<P>... </P>

<P>lResult = CallWindowProc(MyWindowProcedure, ...) ; </P>

<P></P>

<P>For further information about functions declared with empty argument lists, refer to <I>The C++ Programming Language, Second Edition,</I> by Bjarne Stroustrup. </P>

<P><B>Windows NT: </B>The <B>CallWindowProc</B> function handles Unicode-to-ANSI conversion. You don't get the conversion if you call the window procedure directly. </P>

<P><B>See Also</B></P>

<P><A HREF="14lg1og.htm"><B>FARPROC</B></A>, <A HREF="vb50yw.htm"><B>GetWindowLong</B></A>, <A HREF="61hh_k6.htm"><B>SetClassLong</B></A>, <A HREF="d2okir.htm"><B>SetWindowLong</B></A>, <A HREF="14lg1og.htm"><B>WNDPROC</B></A></P>

</BODY>
</HTML>

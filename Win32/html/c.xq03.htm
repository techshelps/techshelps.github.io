<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>ExitThread</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="c.xq03"></A><B>ExitThread  <A HREF="46pnih.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="glns2h.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="7wnz9r.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>ExitThread</B> function ends a thread. </P>

<P><B>VOID ExitThread(</B></P>

<TABLE cols=2 width=367>

<TR VALIGN="top">
<TD width=49%><B>DWORD</B> <I>dwExitCode</I> </TD>
<TD width=51%>// exit code for this thread </TD>
</TR>

<TR VALIGN="top">
<TD width=49%><B>   );</B></TD>
<TD width=51%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>dwExitCode</I></P>

<P>Specifies the exit code for the calling thread. Use the <A HREF="3yyt_hx.htm"><B>GetExitCodeThread</B></A> function to retrieve a thread's exit code. </P>

<P></P>

<P><B>Return Values</B></P>

<P>This function does not return a value. </P>

<P><B>Remarks</B></P>

<P><B>ExitThread</B> is the preferred method of exiting a thread. When this function is called (either explicitly or by returning from a thread procedure), the current thread's stack is deallocated and the thread terminates. The entry-point function of all attached dynamic-link libraries (DLLs) is invoked with a value indicating that the thread is detaching from the DLL. </P>

<P>If the thread is the last thread in the process when this function is called, the thread's process is also terminated. </P>

<P>The state of the thread object becomes signaled, releasing any other threads that had been waiting for the thread to terminate. The thread's termination status changes from STILL_ACTIVE to the value of the <I>dwExitCode</I> parameter. </P>

<P>Terminating a thread does not necessarily remove the thread object from the operating system. A thread object is deleted when the last handle to the thread is closed. </P>

<P>The <A HREF="i5ihdk.htm"><B>ExitProcess</B></A>, <B>ExitThread</B>, <A HREF="70ts0y.htm"><B>CreateThread</B></A>, <A HREF="19iu6kt.htm"><B>CreateRemoteThread</B></A> functions, and a process that is starting (as the result of a <A HREF="5fbj_xx.htm"><B>CreateProcess</B></A> call) are serialized between each other within a process. Only one of these events can happen in an address space at a time. This means the following restrictions hold: </P>

<P>·During process startup and DLL initialization routines, new threads can be created, but they do not begin execution until DLL initialization is done for the process. </P>

<P>·Only one thread in a process can be in a DLL initialization or detach routine at a time. </P>

<P>·<B>ExitProcess</B> does not return until no threads are in their DLL initialization or detach routines. </P>

<P></P>

<P>A thread that uses functions from the C run-time libraries should use the <B>_beginthread</B> and <B>_endthread </B>C run-time functions for thread management rather than <B>CreateThread</B> and <B>ExitThread</B>. Failure to do so results in small memory leaks when <B>ExitThread</B> is called. </P>

<P><B>See Also</B></P>

<P><A HREF="5fbj_xx.htm"><B>CreateProcess</B></A>, <A HREF="19iu6kt.htm"><B>CreateRemoteThread</B></A>, <A HREF="70ts0y.htm"><B>CreateThread</B></A>, <A HREF="i5ihdk.htm"><B>ExitProcess</B></A>, <A HREF="5190.pp.htm"><B>FreeLibraryAndExitThread</B></A>, <A HREF="3yyt_hx.htm"><B>GetExitCodeThread</B></A>, <A HREF="0tmwd4.htm"><B>TerminateThread</B></A> </P>

</BODY>
</HTML>

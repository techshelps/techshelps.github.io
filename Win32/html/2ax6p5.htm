<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>Dynamic-Link Library Data</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="2ax6p5"></A><B>Dynamic-Link Library Data</B></P>

<P>Win32-based DLLs can contain global data or local data.</P>

<P><B>Variable Scope</B></P>

<P>The default scope of DLL variables is the same as that of variables declared in the application. Global variables in a DLL source code file are global to each process using the DLL. Static variables have scope limited to the block in which they are declared. As a result, each process has its own instance of the DLL global and static variables by default. </P>

<P>Your development tools may allow you to override the default scope of global and static variables. For more information, see the documentation included with your development tools. </P>

<P><B>Dynamic Memory Allocation</B></P>

<P>When a DLL allocates memory using any of the memory allocation functions (<A HREF="f12w9..htm"><B>GlobalAlloc</B></A>, <A HREF="2_d2ee.htm"><B>LocalAlloc</B></A>, <A HREF="12yjji7.htm"><B>HeapAlloc</B></A>, and <A HREF="1m7v8go.htm"><B>VirtualAlloc</B></A>), the memory is allocated in the virtual address space of the calling process and is accessible only to the threads of that process. </P>

<P>A DLL can use file mapping to allocate memory that can be shared among processes. For a general discussion of how to use file mapping to create named shared memory, see <A HREF="_0t27t.htm">File Mapping</A>. For an example that uses the <A HREF="82sdq5.htm"><B>DllEntryPoint</B></A> function to set up shared memory using file mapping, see <A HREF="wzrpsp.htm">Using Shared Memory in a Dynamic-Link Library</A>. </P>

<P><B>Thread Local Storage </B></P>

<P>The thread local storage (TLS) functions enable a DLL to allocate an index for storing and retrieving a different value for each thread of a multithreaded process. For example, a spreadsheet application can create a new instance of the same thread each time the user opens a new spreadsheet. A DLL providing the functions for various spreadsheet operations can use TLS to save information about the current state of each spreadsheet (row, column, and so on). For a general discussion of thread local storage, see <A HREF="gr8f0v.htm">Thread Local Storage</A>. For an example that uses the <B>DllEntryPoint</B> function to set up thread local storage, see <A HREF="_s8zo0.htm">Using Thread Local Storage in a Dynamic-Link Library</A>. </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

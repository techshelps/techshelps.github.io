<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>ICopyHook</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="m15cmy"></A><B>ICopyHook  <A HREF="aezfl..htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="1erm.gm.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>ICopyHook</B> interface is a COM-based interface used to create a copy hook handler, a shell extension, that determines whether it is all right to move, copy, rename, or delete a shell folder or printer object. The shell calls <A HREF="1qis53e.htm"><B>ICopyHook::CopyCallback</B></A> prior to performing one of these operations. </P>

<P>The copy hook handler, which is an OLE in-process server (a DLL), does not perform the task itself, but does approve or disapprove the action. If the shell receives approval from the copy hook handler, it performs the file system operation. Copy hook handlers are not informed about the success of an operation, so cannot monitor actions taken on folder objects, except via <B>FindFirstChangeNotify</B>. </P>

<P>A folder object can have multiple copy hook handlers. For example, even if the shell already has a copy hook handler registered for a particular folder object, you can still register one of your own. If two or more copy hook handlers are registered for an object, the shell simply calls each of them before performing one the specified file system operations. </P>

<P>The shell initializes <B>ICopyHook</B> directly, without using the <A HREF="ehqr2a.htm"><B>IShellExtInit</B></A> or <B>IPersistFile</B> interfaces first. </P>

<P><B>CopyCallback</B> returns an integer value that indicates whether or not the shell should perform the operation. The shell will call each copy hook handler registered for a folder object until either all the handlers have been called or one of them has returned a value other than IDYES. The handler can also return IDYES to specify that the operation should be performed, or IDNO or IDCANCEL to specify that the operation should be discontinued. </P>

<P><B>When to Implement</B></P>

<P>Implement a copy hook handler, for example for shared folders, when you want to be able to control when, or if. these file system operations are performed on a given object. </P>

<P><B>When to Use</B></P>

<P>You don't call this shell extension directly. <B>ICopyHook::CopyCallback</B> is called by the shell prior to moving, copying, renaming, or deleting a shell folder object.</P>

<P><B>Methods in Vtable Order</B></P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=46%><B>IUnknown Methods</B></TD>
<TD width=54%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=46%><B>QueryInterface</B></TD>
<TD width=54%>Returns pointers to supported interfaces.</TD>
</TR>

<TR VALIGN="top">
<TD width=46%><B>AddRef</B></TD>
<TD width=54%>Increments reference count.</TD>
</TR>

<TR VALIGN="top">
<TD width=46%><B>Release</B></TD>
<TD width=54%>Decrements reference count.</TD>
</TR>
</TABLE><BR>

<P></P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=45%><B>ICopyHook Methods</B></TD>
<TD width=55%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=45%><A HREF="1qis53e.htm"><B>CopyCallback</B></A></TD>
<TD width=55%>Determines whether a move, copy, delete, or rename operation on a folder object should be allowed or disallowed. </TD>
</TR>
</TABLE><BR>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>Printing a Document</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="11f.b19"></A><B>Printing a Document</B></P>

<P>Once the application initializes the necessary variables, registers its <A HREF="ga5p.2.htm"><B>AbortProc</B></A><B> </B>function, and displays its modeless Cancel dialog box, it can start the print job by calling the <A HREF="231v06s.htm"><B>StartDoc</B></A> function. </P>

<P>After the application begins a print job, it can define individual pages in the document by calling the <A HREF="1jz9np.htm"><B>StartPage</B></A> and <A HREF="6zjxo8.htm"><B>EndPage</B></A> functions and embedding the appropriate calls to GDI drawing functions within this bracket. After the application has defined the last page, it can close the document and end the print job by calling the <A HREF="1phx_3y.htm"><B>EndDoc</B></A> function. </P>

<P>The following example shows the code required to print a string of text and a bitmapped image. The string of text, centered at the top of the page, identifies the path and filename for the file that contains the bitmapped image. The bitmapped image, centered vertically and horizontally on the page, is drawn so that the same proportions used to draw the image in the application's window are maintained. </P>

<P>/*  </P>

<P>* Initialize the members of a DOCINFO  </P>

<P>* structure. </P>

<P>*/ </P>

<P></P>

<P>di.cbSize = sizeof(DOCINFO); </P>

<P>di.lpszDocName = "Bitmap Printing Test"; </P>

<P>di.lpszOutput = (LPTSTR) NULL; </P>

<P>di.lpszDataType = (LPTSTR) NULL; </P>

<P>di.fwType = 0; </P>

<P></P>

<P>/* </P>

<P>* Begin a print job by calling the StartDoc </P>

<P>* function. </P>

<P>*/ </P>

<P></P>

<P>nError = StartDoc(pd.hDC, &amp;di); </P>

<P>if (nError == SP_ERROR) { </P>

<P>errhandler("StartDoc", hwnd); </P>

<P>goto Error; </P>

<P>} </P>

<P></P>

<P>/* </P>

<P>* Inform the driver that the application is </P>

<P>* about to begin sending data. </P>

<P>*/ </P>

<P></P>

<P>nError = StartPage(pd.hDC); </P>

<P>if (nError &lt;= 0) { </P>

<P>errhandler("StartPage", hwnd); </P>

<P>goto Error; </P>

<P>} </P>

<P></P>

<P>/* </P>

<P>* Retrieve the number of pixels-per-logical-inch </P>

<P>* in the horizontal and vertical directions </P>

<P>* for the display upon which the bitmap </P>

<P>* was created. </P>

<P>*/ </P>

<P></P>

<P>fLogPelsX1 = (float) GetDeviceCaps(pd.hDC, LOGPIXELSX);  </P>

<P>fLogPelsY1 = (float) GetDeviceCaps(pd.hDC, LOGPIXELSY); </P>

<P></P>

<P></P>

<P>/* </P>

<P>* Retrieve the number of pixels-per-logical-inch </P>

<P>* in the horizontal and vertical directions </P>

<P>* for the printer upon which the bitmap </P>

<P>* will be printed. </P>

<P>*/ </P>

<P></P>

<P>fLogPelsX2 = (float) GetDeviceCaps(pd.hDC, </P>

<P>LOGPIXELSX); </P>

<P>fLogPelsY2 = (float) GetDeviceCaps(pd.hDC, </P>

<P>LOGPIXELSY); </P>

<P></P>

<P>/* </P>

<P>* Determine the scaling factors required to </P>

<P>* print the bitmap and retain its original </P>

<P>* proportions. </P>

<P>*/ </P>

<P></P>

<P>if (fLogPelsX1 &gt; fLogPelsX2) </P>

<P>fScaleX = (fLogPelsX1 / fLogPelsX2); </P>

<P>else </P>

<P>fScaleX = (fLogPelsX2 / fLogPelsX1); </P>

<P></P>

<P>if (fLogPelsY1 &gt; fLogPelsY2) </P>

<P>fScaleY = (fLogPelsY1 / fLogPelsY2); </P>

<P>else </P>

<P>fScaleY = (fLogPelsY2 / fLogPelsY1); </P>

<P></P>

<P>/* </P>

<P>* Compute the coordinate of the upper left </P>

<P>* corner of the centered bitmap. </P>

<P>*/ </P>

<P></P>

<P>cWidthPels = GetDeviceCaps(pd.hDC, HORZRES); </P>

<P>xLeft = ((cWidthPels / 2) - </P>

<P>((int) (((float) bmih.biWidth) </P>

<P>* fScaleX)) / 2); </P>

<P>cHeightPels = GetDeviceCaps(pd.hDC, VERTRES); </P>

<P>yTop = ((cHeightPels / 2) - </P>

<P>((int) (((float) bmih.biHeight) </P>

<P>* fScaleY)) / 2); </P>

<P></P>

<P>/* </P>

<P>* Create a memory DC that is compatible with </P>

<P>* the printer and select the bitmap (which </P>

<P>* the user requested) into this DC. </P>

<P>*/ </P>

<P></P>

<P>hdcMem = CreateCompatibleDC(pd.hDC); </P>

<P></P>

<P>if (!SelectObject(hdcMem, hbm)) </P>

<P>errhandler("SelectObject Failed", hwnd); </P>

<P></P>

<P></P>

<P>/* </P>

<P>* Use the StretchBlt function to scale the </P>

<P>* bitmap and maintain its original proportions </P>

<P>* (that is, if the bitmap was square when it </P>

<P>* appeared in the application's client area, </P>

<P>* it should also appear square on the page). </P>

<P>*/ </P>

<P></P>

<P></P>

<P>if (!StretchBlt(pd.hDC, xLeft, yTop, </P>

<P>(int) ((float) bmih.biWidth * fScaleX), </P>

<P>(int) ((float) bmih.biHeight * fScaleY), </P>

<P>hdcMem, 0, 0, </P>

<P>bmih.biWidth, bmih.biHeight, </P>

<P>SRCCOPY)) </P>

<P>errhandler("StretchBlt Failed", hwnd); </P>

<P></P>

<P></P>

<P>/* Delete the memory DC. */ </P>

<P></P>

<P>DeleteDC(hdcMem); </P>

<P></P>

<P>/* </P>

<P>* Retrieve the width of the string that </P>

<P>* specifies the full path and filename for the </P>

<P>* file that contains the bitmap. </P>

<P>*/ </P>

<P></P>

<P>GetTextExtentPoint32(pd.hDC, ofn.lpstrFile, </P>

<P>ofn.nFileExtension + 3, </P>

<P>&amp;szMetric); </P>

<P></P>

<P>/* </P>

<P>* Compute the starting point for the </P>

<P>* text-output operation. The string will </P>

<P>* be centered horizontally and positioned </P>

<P>* three-lines down from the top of the page. </P>

<P>*/ </P>

<P></P>

<P>xLeft = ((cWidthPels / 2) - (szMetric.cx / 2)); </P>

<P>yTop = (szMetric.cy * 3); </P>

<P></P>

<P>/* </P>

<P>* Print the path and filename for the bitmap, </P>

<P>* centered at the top of the page. </P>

<P>*/ </P>

<P></P>

<P>TextOut(pd.hDC, xLeft, yTop, ofn.lpstrFile, </P>

<P>ofn.nFileExtension + 3); </P>

<P></P>

<P>/* </P>

<P>* Determine whether the user has pressed </P>

<P>* the Cancel button in the AbortPrintJob </P>

<P>* dialog box; if the button has been pressed, </P>

<P>* call the AbortDoc function. Otherwise, inform </P>

<P>* the spooler that the page is complete. </P>

<P>*/ </P>

<P></P>

<P>nError = EndPage(pd.hDC); </P>

<P></P>

<P>if (nError &lt;= 0) { </P>

<P>errhandler("EndPage", hwnd); </P>

<P>goto Error; </P>

<P>} </P>

<P></P>

<P>/* Inform the driver that document has ended. */ </P>

<P></P>

<P>nError = EndDoc(pd.hDC); </P>

<P>if (nError &lt;= 0) </P>

<P>errhandler("EndDoc", hwnd); </P>

<P></P>

<P>Error: </P>

<P>/* Enable the application's window. */ </P>

<P></P>

<P>EnableWindow(hwnd, TRUE); </P>

<P></P>

<P>/* Remove the AbortPrintJob dialog box. */ </P>

<P></P>

<P>DestroyWindow(hdlgCancel); </P>

<P></P>

<P>/* Delete the printer DC. */ </P>

<P></P>

<P>DeleteDC(pd.hDC); </P>

<P></P>

<P>Because the pixels on a screen typically have different dimensions than the dots on a printer, it is necessary to scale bitmapped images to obtain a WYSIWYG effect. This is done by obtaining horizontal and vertical scaling factors and then applying those factors to the width and height values passed to the <A HREF="474t_r.htm"><B>StretchBlt</B></A> function. In the sample application, the scaling factors were obtained by retrieving the horizontal and vertical logical-pixel count for the two devices. Once the scaling factors were obtained, they were used to adjust the bitmap width and height. </P>

<P>To center the bitmap on the page, the application first computed the width and height of the scaled bitmap. (The bitmap was scaled to maintain the original proportions of the image.) These values were divided by two and then subtracted from half of the width and height of the page. The result defines the coordinates of the upper left corner of the bitmap. </P>

<P>To center the text at the top of the page, the application called the <A HREF="101r0q.htm"><B>GetTextExtentPoint32</B></A> function to retrieve the width and height of the string specifying the path names and filenames. Once these values were obtained, the application used the height to position the string three lines down the page and the width to position the string horizontally centered on the page. </P>

<P>The following illustration shows a representation of the page that appeared when the application printed the bitmapped image in the WINLOGO.BMP file. This illustration also depicts the variables used to position the text and to position and scale the bitmap. </P>

<P><IMG SRC="../images/bm96.gif" ALT="" BORDER=0></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

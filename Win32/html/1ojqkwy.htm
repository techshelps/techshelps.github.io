<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>DuplicateHandle</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="1ojqkwy"></A><B>DuplicateHandle  <A HREF="xjpk0m.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="20rnkvp.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="lcjaxy.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>DuplicateHandle</B> function duplicates an object handle. </P>

<P><B>BOOL DuplicateHandle(</B></P>

<TABLE cols=2 width=538>

<TR VALIGN="top">
<TD width=45%><B>HANDLE</B> <I>hSourceProcessHandle</I><B>,</B></TD>
<TD width=55%>// handle to process with handle to duplicate </TD>
</TR>

<TR VALIGN="top">
<TD width=45%><B>    HANDLE</B> <I>hSourceHandle</I><B>,</B></TD>
<TD width=55%>// handle to duplicate </TD>
</TR>

<TR VALIGN="top">
<TD width=45%><B>    HANDLE</B> <I>hTargetProcessHandle</I><B>,</B></TD>
<TD width=55%>// handle to process to duplicate to </TD>
</TR>

<TR VALIGN="top">
<TD width=45%><B>    LPHANDLE</B> <I>lpTargetHandle</I><B>,</B></TD>
<TD width=55%>// pointer to duplicate handle </TD>
</TR>

<TR VALIGN="top">
<TD width=45%><B>    DWORD</B> <I>dwDesiredAccess</I><B>,</B></TD>
<TD width=55%>// access for duplicate handle </TD>
</TR>

<TR VALIGN="top">
<TD width=45%><B>    BOOL</B> <I>bInheritHandle</I><B>,</B></TD>
<TD width=55%>// handle inheritance flag</TD>
</TR>

<TR VALIGN="top">
<TD width=45%><B>    DWORD</B> <I>dwOptions</I> </TD>
<TD width=55%>// optional actions </TD>
</TR>

<TR VALIGN="top">
<TD width=45%><B>   );</B></TD>
<TD width=55%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hSourceProcessHandle</I></P>

<P>Identifies the process containing the handle to duplicate. The handle must have <A HREF="pditn2.htm">PROCESS_DUP_HANDLE</A> access. For more information, see <A HREF="pditn2.htm">Process Objects</A>. </P>

<P><I>hSourceHandle</I></P>

<P>Identifies the handle to duplicate. This is an open object handle that is valid in the context of the source process. For a list of objects whose handles can be duplicated, see the following Remarks section. </P>

<P><I>hTargetProcessHandle</I></P>

<P>Identifies the process that is to receive the duplicated handle. The handle must have PROCESS_DUP_HANDLE access. </P>

<P><I>lpTargetHandle</I></P>

<P>Points to a variable receiving the value of the duplicate handle. This handle value is valid in the context of the target process. If <I>lpTargetHandle</I> is NULL, the function duplicates the handle, but does not return the duplicate handle value to the caller.</P>

<P><I>dwDesiredAccess</I></P>

<P>Specifies the access requested for the new handle. This parameter is ignored if the <I>dwOptions</I> parameter specifies the DUPLICATE_SAME_ACCESS flag. Otherwise, the flags that can be specified depend on the type of object whose handle is being duplicated. For the flags that can be specified for each object type, see the following Remarks section. Note that the new handle can have more access than the original handle. </P>

<P><I>bInheritHandle</I></P>

<P>Indicates whether the handle is inheritable. If TRUE, the duplicate handle can be inherited by new processes created by the target process. If FALSE, the new handle cannot be inherited. </P>

<P><I>dwOptions</I></P>

<P>Specifies optional actions. This parameter can be zero, or any combination of the following flags: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=48%><B>Value</B></TD>
<TD width=52%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=48%>DUPLICATE_CLOSE_SOURCE</TD>
<TD width=52%>Closes the source handle. This occurs regardless of any error status returned.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>DUPLICATE_SAME_ACCESS</TD>
<TD width=52%>Ignores the <I>dwDesiredAccess</I> parameter. The duplicate handle has the same access as the source handle.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is nonzero.</P>

<P>If the function fails, the return value is zero. To get extended error information, call <A HREF="11c2vs7.htm"><B>GetLastError</B></A>. </P>

<P><B>Remarks</B></P>

<P><B>DuplicateHandle</B> can be called by either the source process or the target process. It can also be invoked where the source and target process are the same. For example, a process can use <B>DuplicateHandle</B> to create a noninheritable duplicate of an inheritable handle, or a handle with different access than the original handle. </P>

<P>The duplicating process uses the <A HREF="jiu.65.htm"><B>GetCurrentProcess</B></A> function to get a handle of itself. To get the other process handle, it may be necessary to use some form of interprocess communication (for example, named pipe or shared memory) to communicate the process identifier to the duplicating process. This identifier is then used in the <A HREF="9mlgut.htm"><B>OpenProcess</B></A> function to open a handle. </P>

<P>If the process that calls <B>DuplicateHandle</B> is not the target process, the duplicating process must use interprocess communication to pass the value of the duplicate handle to the target process. </P>

<P>The duplicate handle is the same object handle as the source handle. This means that the state of the object is the same for both handles. For example, the current file mark for a file handle is always the same for both handles. </P>

<P><B>DuplicateHandle</B> can duplicate handles to the following types of objects: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=49%><B>Object</B></TD>
<TD width=51%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=49%>Console input</TD>
<TD width=51%>The handle is returned by the <A HREF="xn35yd.htm"><B>CreateFile</B></A> function when CONIN$ is specified, or by the <A HREF="1b8l_fr.htm"><B>GetStdHandle</B></A> function when STD_INPUT_HANDLE is specified. Console handles can be duplicated for use only in the same process.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>Console screen buffer</TD>
<TD width=51%>The handle is returned by the <B>CreateFile</B> function when CONOUT$ is specified, or by the <B>GetStdHandle</B> function when STD_OUTPUT_HANDLE is specified. Console handles can be duplicated for use only in the same process.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>Event</TD>
<TD width=51%>The handle is returned by the <A HREF="j_zbjv.htm"><B>CreateEvent</B></A> or <A HREF="qtg5jz.htm"><B>OpenEvent</B></A> function.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>File or communications device</TD>
<TD width=51%>The handle is returned by the <A HREF="xn35yd.htm"><B>CreateFile</B></A> function.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>File mapping</TD>
<TD width=51%>The handle is returned by the <A HREF="3lck_3.htm"><B>CreateFileMapping</B></A> function.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>Mutex</TD>
<TD width=51%>The handle is returned by the <A HREF="jeyqaz.htm"><B>CreateMutex</B></A> or <A HREF="4s0dun.htm"><B>OpenMutex</B></A> function.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>Pipe</TD>
<TD width=51%>A named pipe handle is returned by the <A HREF="21dzyt.htm"><B>CreateNamedPipe</B></A> or <A HREF="xn35yd.htm"><B>CreateFile</B></A> function. An anonymous pipe handle is returned by the <A HREF="xn_62d.htm"><B>CreatePipe</B></A> function.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>Process</TD>
<TD width=51%>The handle is returned by the <A HREF="5fbj_xx.htm"><B>CreateProcess</B></A>, <A HREF="jiu.65.htm"><B>GetCurrentProcess</B></A>, or <A HREF="9mlgut.htm"><B>OpenProcess</B></A> function.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>Registry key</TD>
<TD width=51%>The handle is returned by the <A HREF="ioabqx.htm"><B>RegCreateKey</B></A>, <A HREF=".5u9k7.htm"><B>RegCreateKeyEx</B></A>, <A HREF="wg.8d.htm"><B>RegOpenKey</B></A>, or <A HREF="rz_3fo.htm"><B>RegOpenKeyEx</B></A> function. Note that registry key handles returned by the <A HREF="5.7d_uj.htm"><B>RegConnectRegistry</B></A> function cannot be used in a call to <B>DuplicateHandle</B>.  </TD>
</TR>

<TR VALIGN="top">
<TD width=49%>Semaphore</TD>
<TD width=51%>The handle is returned by the <A HREF="41re8tu.htm"><B>CreateSemaphore</B></A> or <A HREF="b3n75z.htm"><B>OpenSemaphore</B></A> function.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>Thread</TD>
<TD width=51%>The handle is returned by the <A HREF="5fbj_xx.htm"><B>CreateProcess</B></A>, <A HREF="70ts0y.htm"><B>CreateThread</B></A>, <A HREF="19iu6kt.htm"><B>CreateRemoteThread</B></A>, or <A HREF="12sswfx.htm"><B>GetCurrentThread</B></A> function</TD>
</TR>
</TABLE><BR>

<P></P>

<P>In addition to STANDARD_RIGHTS_REQUIRED, the following access flags can be specified in the <I>dwDesiredAccess</I> parameter for the different object types. Note that the new handle can have more access than the original handle. However, in some cases <B>DuplicateHandle</B> cannot create a duplicate handle with more access permission than the original handle. For example, a file handle created with GENERIC_READ access cannot be duplicated so that it has both GENERIC_READ and GENERIC_WRITE access. </P>

<P>Any combination of the following access flags is valid for handles to communications devices, console input, console screen buffers, files, and pipes: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=49%><B>Access</B></TD>
<TD width=51%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=49%>GENERIC_READ</TD>
<TD width=51%>Enables read access.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>GENERIC_WRITE</TD>
<TD width=51%>Enables write access.</TD>
</TR>
</TABLE><BR>

<P></P>

<P>Any combination of the following access flags is valid for file-mapping objects: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=49%><B>Access</B></TD>
<TD width=51%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=49%>FILE_MAP_ALL_ACCESS</TD>
<TD width=51%>Specifies all possible access flags for the file-mapping object.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>FILE_MAP_READ</TD>
<TD width=51%>Enables mapping the object into memory that permits read access.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>FILE_MAP_WRITE</TD>
<TD width=51%>Enables mapping the object into memory that permits write access. For write access, PAGE_READWRITE protection must have been specified when the file-mapping object was created by the <A HREF="3lck_3.htm"><B>CreateFileMapping</B></A> function.</TD>
</TR>
</TABLE><BR>

<P></P>

<P>Any combination of the following access flags is valid for mutex objects: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=49%><B>Access</B></TD>
<TD width=51%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=49%>MUTEX_ALL_ACCESS</TD>
<TD width=51%>Specifies all possible access flags for the mutex object.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>SYNCHRONIZE</TD>
<TD width=51%><B>Windows NT only</B>: Enables use of the mutex handle in any of the <A HREF="y2tc_3.htm">wait functions</A> to acquire ownership of the mutex, or in the <A HREF="82b0xa.htm"><B>ReleaseMutex</B></A> function to release ownership.</TD>
</TR>
</TABLE><BR>

<P></P>

<P>Any combination of the following access flags is valid for semaphore objects: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=49%><B>Access</B></TD>
<TD width=51%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=49%>SEMAPHORE_ALL_ACCESS</TD>
<TD width=51%>Specifies all possible access flags for the semaphore object.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>SEMAPHORE_MODIFY_STATE</TD>
<TD width=51%>Enables use of the semaphore handle in the <A HREF="j17uy..htm"><B>ReleaseSemaphore</B></A> function to modify the semaphore's count.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>SYNCHRONIZE</TD>
<TD width=51%><B>Windows NT only</B>: Enables use of the semaphore handle in any of the <A HREF="y2tc_3.htm">wait functions</A> to wait for the semaphore's state to be signaled.</TD>
</TR>
</TABLE><BR>

<P></P>

<P>Any combination of the following access flags is valid for event objects: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=49%><B>Access</B></TD>
<TD width=51%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=49%>EVENT_ALL_ACCESS</TD>
<TD width=51%>Specifies all possible access flags for the event object.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>EVENT_MODIFY_STATE</TD>
<TD width=51%>Enables use of the event handle in the <A HREF="at02d..htm"><B>SetEvent</B></A> and <A HREF="1.ih1gv.htm"><B>ResetEvent</B></A> functions to modify the event's state.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>SYNCHRONIZE</TD>
<TD width=51%><B>Windows NT only</B>: Enables use of the event handle in any of the <A HREF="y2tc_3.htm">wait functions</A> to wait for the event's state to be signaled.</TD>
</TR>
</TABLE><BR>

<P></P>

<P>Any combination of the following access flags is valid for handles to registry keys: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=49%><B>Value</B></TD>
<TD width=51%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=49%>KEY_ALL_ACCESS</TD>
<TD width=51%>Specifies all possible flags for the registry key.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>KEY_CREATE_LINK</TD>
<TD width=51%>Enables using the handle to create a link to a registry-key object.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>KEY_CREATE_SUB_KEY</TD>
<TD width=51%>Enables using the handle to create a subkey of a registry-key object.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>KEY_ENUMERATE_SUB_KEYS</TD>
<TD width=51%>Enables using the handle to enumerate the subkeys of a registry-key object.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>KEY_EXECUTE</TD>
<TD width=51%>Equivalent to KEY_READ.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>KEY_NOTIFY</TD>
<TD width=51%>Enables using the handle to request change notifications for a registry key or for subkeys of a registry key.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>KEY_QUERY_VALUE</TD>
<TD width=51%>Enables using the handle to query a value of a registry-key object.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>KEY_READ</TD>
<TD width=51%>Combines the STANDARD_RIGHTS_READ, KEY_QUERY_VALUE, KEY_ENUMERATE_SUB_KEYS, and KEY_NOTIFY values.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>KEY_SET_VALUE</TD>
<TD width=51%>Enables using the handle to create or set a value of a registry-key object.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>KEY_WRITE</TD>
<TD width=51%>Combines the STANDARD_RIGHTS_WRITE, KEY_SET_VALUE, and KEY_CREATE_SUB_KEY values.</TD>
</TR>
</TABLE><BR>

<P></P>

<P>Any combination of the following access flags is valid for process objects: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=49%><B>Access</B></TD>
<TD width=51%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=49%>PROCESS_ALL_ACCESS</TD>
<TD width=51%>Specifies all possible access flags for the process object.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>PROCESS_CREATE_PROCESS</TD>
<TD width=51%>Used internally.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>PROCESS_CREATE_THREAD</TD>
<TD width=51%>Enables using the process handle in the <A HREF="19iu6kt.htm"><B>CreateRemoteThread</B></A> function to create a thread in the process.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>PROCESS_DUP_HANDLE</TD>
<TD width=51%>Enables using the process handle as either the source or target process in the <B>DuplicateHandle</B> function to duplicate a handle.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>PROCESS_QUERY_INFORMATION</TD>
<TD width=51%>Enables using the process handle in the <A HREF="2mm.i..htm"><B>GetExitCodeProcess</B></A> and <A HREF="f6uwf_.htm"><B>GetPriorityClass</B></A> functions to read information from the process object.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>PROCESS_SET_INFORMATION</TD>
<TD width=51%>Enables using the process handle in the <A HREF="1hdphk3.htm"><B>SetPriorityClass</B></A> function to set the process's priority class.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>PROCESS_TERMINATE</TD>
<TD width=51%>Enables using the process handle in the <A HREF=".d3m14.htm"><B>TerminateProcess</B></A> function to terminate the process.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>PROCESS_VM_OPERATION</TD>
<TD width=51%>Enables using the process handle in the <A HREF="sflvdy.htm"><B>VirtualProtectEx</B></A> and <A HREF="_4c4hp.htm"><B>WriteProcessMemory</B></A> functions to modify the virtual memory of the process.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>PROCESS_VM_READ</TD>
<TD width=51%>Enables using the process handle in the <A HREF="2rlm_kf.htm"><B>ReadProcessMemory</B></A> function to read from the virtual memory of the process.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>PROCESS_VM_WRITE</TD>
<TD width=51%>Enables using the process handle in the <A HREF="_4c4hp.htm"><B>WriteProcessMemory</B></A> function to write to the virtual memory of the process.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>SYNCHRONIZE</TD>
<TD width=51%><B>Windows NT only</B>: Enables using the process handle in any of the <A HREF="y2tc_3.htm">wait functions</A> to wait for the process to terminate.</TD>
</TR>
</TABLE><BR>

<P></P>

<P>Any combination of the following access flags is valid for thread objects: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=49%><B>Access</B></TD>
<TD width=51%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=49%>SYNCHRONIZE</TD>
<TD width=51%><B>Windows NT only</B>: Enables using the thread handle in any of the <A HREF="y2tc_3.htm">wait functions</A> to wait for the thread to terminate.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>THREAD_ALL_ACCESS</TD>
<TD width=51%>Specifies all possible access flags for the thread object.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>THREAD_DIRECT_IMPERSONATION</TD>
<TD width=51%>Used internally.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>THREAD_GET_CONTEXT</TD>
<TD width=51%>Enables using the thread handle in the <A HREF="h1g8jb.htm"><B>GetThreadContext</B></A> function to read the thread's context.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>THREAD_IMPERSONATE</TD>
<TD width=51%>Used internally.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>THREAD_QUERY_INFORMATION</TD>
<TD width=51%>Enables using the thread handle in the <A HREF="3yyt_hx.htm"><B>GetExitCodeThread</B></A>, <A HREF="0b6aw9.htm"><B>GetThreadPriority</B></A>, and <A HREF="1lj7t0p.htm"><B>GetThreadSelectorEntry</B></A> functions to read information from the thread object.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>THREAD_SET_CONTEXT</TD>
<TD width=51%>Enables using the thread handle in the <A HREF="0wtukc.htm"><B>SetThreadContext</B></A> function to set the thread's context.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>THREAD_SET_INFORMATION</TD>
<TD width=51%>Enables using the thread handle in the <A HREF="o2a9rl.htm"><B>SetThreadPriority</B></A> function to set the thread's priority.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>THREAD_SET_THREAD_TOKEN</TD>
<TD width=51%>Used internally.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>THREAD_SUSPEND_RESUME</TD>
<TD width=51%>Enables using the thread handle in the <A HREF="0pf8eh.htm"><B>SuspendThread</B></A> or <A HREF="5kez_mi.htm"><B>ResumeThread</B></A> functions to suspend or resume a thread.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>THREAD_TERMINATE</TD>
<TD width=51%>Enables using the thread handle in the <A HREF="0tmwd4.htm"><B>TerminateThread</B></A> function to terminate the thread.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>See Also</B></P>

<P><A HREF="ngwwie.htm"><B>CloseHandle</B></A>, <A HREF="j_zbjv.htm"><B>CreateEvent</B></A>, <A HREF="xn35yd.htm"><B>CreateFile</B></A>, <A HREF="3lck_3.htm"><B>CreateFileMapping</B></A>, <A HREF="jeyqaz.htm"><B>CreateMutex</B></A>, <A HREF="21dzyt.htm"><B>CreateNamedPipe</B></A>, <A HREF="xn_62d.htm"><B>CreatePipe</B></A>, <A HREF="5fbj_xx.htm"><B>CreateProcess</B></A>, <A HREF="19iu6kt.htm"><B>CreateRemoteThread</B></A>, <A HREF="41re8tu.htm"><B>CreateSemaphore</B></A>, <A HREF="70ts0y.htm"><B>CreateThread</B></A>, <A HREF="jiu.65.htm"><B>GetCurrentProcess</B></A>, <A HREF="2mm.i..htm"><B>GetExitCodeProcess</B></A>, <A HREF="3yyt_hx.htm"><B>GetExitCodeThread</B></A>, <A HREF="f6uwf_.htm"><B>GetPriorityClass</B></A>, <A HREF="1b8l_fr.htm"><B>GetStdHandle</B></A>, <A HREF="h1g8jb.htm"><B>GetThreadContext</B></A>, <A HREF="0b6aw9.htm"><B>GetThreadPriority</B></A>, <A HREF="1lj7t0p.htm"><B>GetThreadSelectorEntry</B></A>, <A HREF="qtg5jz.htm"><B>OpenEvent</B></A>, <A HREF="4s0dun.htm"><B>OpenMutex</B></A>, <A HREF="9mlgut.htm"><B>OpenProcess</B></A>, <A HREF="b3n75z.htm"><B>OpenSemaphore</B></A>, <A HREF="2rlm_kf.htm"><B>ReadProcessMemory</B></A>, <A HREF="5.7d_uj.htm"><B>RegConnectRegistry</B></A>, <A HREF="ioabqx.htm"><B>RegCreateKey</B></A>, <A HREF=".5u9k7.htm"><B>RegCreateKeyEx</B></A>, <A HREF="wg.8d.htm"><B>RegOpenKey</B></A>, <A HREF="rz_3fo.htm"><B>RegOpenKeyEx</B></A>, <A HREF="82b0xa.htm"><B>ReleaseMutex</B></A>, <A HREF="j17uy..htm"><B>ReleaseSemaphore</B></A>, <A HREF="1.ih1gv.htm"><B>ResetEvent</B></A>, <A HREF="5kez_mi.htm"><B>ResumeThread</B></A>, <A HREF="at02d..htm"><B>SetEvent</B></A>, <A HREF="1hdphk3.htm"><B>SetPriorityClass</B></A>, <A HREF="0wtukc.htm"><B>SetThreadContext</B></A>, <A HREF="o2a9rl.htm"><B>SetThreadPriority</B></A>, <A HREF="0pf8eh.htm"><B>SuspendThread</B></A>, <A HREF=".d3m14.htm"><B>TerminateProcess</B></A>, <A HREF="0tmwd4.htm"><B>TerminateThread</B></A>, <A HREF="sflvdy.htm"><B>VirtualProtectEx</B></A>, <A HREF="_4c4hp.htm"><B>WriteProcessMemory</B></A> </P>

</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Supporting the Screen Saver Window Procedure</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="ofg4iy"></A><B>Supporting the Screen Saver Window Procedure</B></P>

<P>Each screen saver must support a window procedure named <A HREF="199utf2.htm"><B>ScreenSaverProc</B></A>. Like most window procedures, <B>ScreenSaverProc</B> processes a set of specific messages and passes any unprocessed messages to a default procedure. However, instead of passing them to the <A HREF="32d1nbh.htm"><B>DefWindowProc</B></A> function, <B>ScreenSaverProc</B> passes unprocessed messages to the <A HREF="1.nv3w..htm"><B>DefScreenSaverProc</B></A> function. Another difference between <B>ScreenSaverProc</B> and a normal window procedure is that the handle passed to <B>ScreenSaverProc</B> identifies the entire desktop rather than a client window. The following example shows the <B>ScreenSaverProc</B> window procedure for the sample screen saver. </P>

<P>LONG WINAPI ScreenSaverProc(hwnd, message, wParam, lParam)  </P>

<P>HWND  hwnd; </P>

<P>UINT  message; </P>

<P>DWORD wParam; </P>

<P>LONG  lParam; </P>

<P>{ </P>

<P>static HDC          hdc;    /* device-context handle */ </P>

<P>static RECT         rc;     /* RECT structure */ </P>

<P>static UINT         uTimer; /* timer identifier */ </P>

<P></P>

<P>switch(message) </P>

<P>{ </P>

<P>case WM_CREATE: </P>

<P></P>

<P>/* Retrieve the application name from the .RC file. */ </P>

<P></P>

<P>LoadString(hMainInstance, idsAppName, szAppName, 40); </P>

<P></P>

<P>/* Retrieve the .INI (or registry) filename. */ </P>

<P></P>

<P>LoadString(hMainInstance, idsIniFile, szIniFile, </P>

<P>MAXFILELEN); </P>

<P></P>

<P>/* Retrieve any redraw-speed data from the registry. */ </P>

<P></P>

<P>lSpeed = GetPrivateProfileInt(szAppName, szRedrawSpeed, </P>

<P>DEFVEL, szIniFile); </P>

<P></P>

<P>/* </P>

<P>* Set a timer for the screen saver window using the </P>

<P>* redraw-rate stored in REGEDIT.INI. </P>

<P>*/ </P>

<P></P>

<P>uTimer = SetTimer(hwnd, 1, lSpeed * 1000, NULL); </P>

<P>break; </P>

<P></P>

<P>case WM_ERASEBKGND: </P>

<P></P>

<P>/* </P>

<P>* The WM_ERASEBKGND message is issued before the </P>

<P>* WM_TIMER message, allowing the screen saver to </P>

<P>* paint the background as appropriate. </P>

<P>*/ </P>

<P></P>

<P>hdc = GetDC(hwnd); </P>

<P>GetClientRect (hwnd, &amp;rc); </P>

<P>FillRect (hdc, &amp;rc, GetStockObject(BLACK_BRUSH)); </P>

<P>ReleaseDC(hwnd,hdc); </P>

<P>break; </P>

<P></P>

<P>case WM_TIMER: </P>

<P></P>

<P>/* </P>

<P>* The WM_TIMER message is issued at (lSpeed * 1000) </P>

<P>* intervals, where lSpeed == .001 seconds. This </P>

<P>* code repaints the entire desktop with a white, </P>

<P>* light gray, dark gray, or black brush each </P>

<P>* time a WM_TIMER message is issued. </P>

<P>*/ </P>

<P></P>

<P>hdc = GetDC(hwnd); </P>

<P>GetClientRect(hwnd, &amp;rc); </P>

<P>if (i++ &lt;= 4) </P>

<P>FillRect(hdc, &amp;rc, GetStockObject(i)); </P>

<P>else </P>

<P>(i = 0); </P>

<P>ReleaseDC(hwnd,hdc); </P>

<P>break; </P>

<P></P>

<P>case WM_DESTROY: </P>

<P></P>

<P>/* </P>

<P>* When the WM_DESTROY message is issued, the screen saver </P>

<P>* must destroy any of the timers that were set at WM_CREATE </P>

<P>* time. </P>

<P>*/ </P>

<P></P>

<P>if (uTimer) </P>

<P>KillTimer(hwnd, uTimer); </P>

<P>break; </P>

<P>} </P>

<P></P>

<P>/* </P>

<P>* DefScreenSaverProc processes any messages </P>

<P>* ignored by ScreenSaverProc. </P>

<P>*/ </P>

<P></P>

<P>return DefScreenSaverProc(hwnd, message, wParam, lParam); </P>

<P>} </P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>CryptGenRandom [New - Windows NT] [New - Windows 95, OEM Service Release 2]</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="1k3aluu"></A><B>CryptGenRandom  <A HREF="19o1kdo.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="2jdzwvi.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="sx1q_k.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>[New - Windows NT]</P>

<P>[New - Windows 95, OEM Service Release 2]</P>

<P>The <B>CryptGenRandom</B> function fills a buffer with random bytes.</P>

<P><B>BOOL CRYPTFUNC CryptGenRandom(</B></P>

<TABLE cols=2 width=265>

<TR VALIGN="top">
<TD width=69%><B>HCRYPTPROV </B><I>hProv</I><B>,</B></TD>
<TD width=31%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=69%><B>    DWORD </B><I>dwLen</I><B>,</B></TD>
<TD width=31%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=69%><B>    BYTE *</B><I>pbBuffer</I></TD>
<TD width=31%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=69%><B>   );</B></TD>
<TD width=31%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hProv</I></P>

<P>[in] A handle to the application's CSP. An application obtains this handle using the <A HREF="b4q7j2.htm"><B>CryptAcquireContext</B></A> function.</P>

<P><I>dwLen</I></P>

<P>[in] The number of bytes of random data to be generated.</P>

<P><I>pbBuffer</I></P>

<P>[in/out] The buffer the function is to copy the random data to. This buffer must be at least <I>dwLen</I> bytes in length.</P>

<P>Optionally, the application can fill this buffer with data to use as an auxiliary random seed. This is explained further in the "Remarks" section.</P>

<P></P>

<P><B>Remarks</B></P>

<P>The data produced by this function is "cryptographically random." It is far more random than the data generated by the typical random number generator such as the one shipped with your "C" compiler.</P>

<P>This function is often used to generate random initialization vectors and salt values.</P>

<P><B>Seeding the Random Number Generator</B></P>

<P>All software random number generators work in fundamentally the same way. They start with one truly random number, known as the "seed," and then use an algorithm to generate a pseudo-random sequence of bits based on it. The most difficult part of this process is to get a seed that is truly random. This is usually based on user input latency, or the jitter from one or more hardware components. </P>

<P>If your application has access to a good random source, then it can fill the <I>pbBuffer</I> buffer with some amount of random data before calling <B>CryptGenRandom</B>. The CSP will then use this data to further randomize its internal seed. Failing to initialize the <I>pbBuffer</I> buffer before calling <A HREF="#1k3aluu"><B>CryptGenRandom</B></A> is acceptable.</P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is nonzero.</P>

<P>If the function fails, the return value is zero. To retrieve extended error information, use the <A HREF="11c2vs7.htm"><B>GetLastError</B></A> function.</P>

<P>The following table lists the error codes most commonly returned by the <B>GetLastError</B> function. The error codes prefaced by "NTE" are generated by the particular CSP you are using.</P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=43%><B>Error</B></TD>
<TD width=57%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=43%>ERROR_INVALID_HANDLE</TD>
<TD width=57%>One of the parameters specifies an invalid handle. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>ERROR_INVALID_PARAMETER</TD>
<TD width=57%>One of the parameters contains an invalid value. This is most often an illegal pointer.</TD>
</TR>

<TR VALIGN="top">
<TD width=43%>NTE_BAD_UID</TD>
<TD width=57%>The <I>hProv</I> parameter does not contain a valid context handle.</TD>
</TR>

<TR VALIGN="top">
<TD width=43%>NTE_FAIL</TD>
<TD width=57%>The function failed in some unexpected way.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Example</B></P>

<P>See the "Example" section in the <B>CryptSetKeyParam</B> function.</P>

<P><B>See Also</B></P>

<P><A HREF="b4q7j2.htm"><B>CryptAcquireContext</B></A>, <A HREF="#1k3aluu"><B>CryptGenRandom</B></A>, <A HREF="1smrhzn.htm"><B>CryptSetKeyParam</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

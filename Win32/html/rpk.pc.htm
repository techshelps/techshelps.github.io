<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>CreateWindowEx</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="rpk.pc"></A><B>CreateWindowEx  <A HREF="31cenp.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="1p1lg2i.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="3fix.ad.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>CreateWindowEx</B> function creates an overlapped, pop-up, or child window with an extended style; otherwise, this function is identical to the <B>CreateWindow</B> function. For more information about creating a window and for full descriptions of the other parameters of <B>CreateWindowEx</B>, see <A HREF="we1r5q.htm"><B>CreateWindow</B></A>. </P>

<P><B>HWND CreateWindowEx(</B></P>

<TABLE cols=2 width=499>

<TR VALIGN="top">
<TD width=42%><B>DWORD</B> <I>dwExStyle</I><B>,</B></TD>
<TD width=58%>// extended window style</TD>
</TR>

<TR VALIGN="top">
<TD width=42%><B>    LPCTSTR</B> <I>lpClassName</I><B>,</B></TD>
<TD width=58%>// pointer to registered class name</TD>
</TR>

<TR VALIGN="top">
<TD width=42%><B>    LPCTSTR</B> <I>lpWindowName</I><B>,</B></TD>
<TD width=58%>// pointer to window name</TD>
</TR>

<TR VALIGN="top">
<TD width=42%><B>    DWORD</B> <I>dwStyle</I><B>,</B></TD>
<TD width=58%>// window style</TD>
</TR>

<TR VALIGN="top">
<TD width=42%><B>    int</B> <I>x</I><B>,</B></TD>
<TD width=58%>// horizontal position of window</TD>
</TR>

<TR VALIGN="top">
<TD width=42%><B>    int</B> <I>y</I><B>,</B></TD>
<TD width=58%>// vertical position of window</TD>
</TR>

<TR VALIGN="top">
<TD width=42%><B>    int</B> <I>nWidth</I><B>,</B></TD>
<TD width=58%>// window width</TD>
</TR>

<TR VALIGN="top">
<TD width=42%><B>    int</B> <I>nHeight</I><B>,</B></TD>
<TD width=58%>// window height</TD>
</TR>

<TR VALIGN="top">
<TD width=42%><B>    HWND</B> <I>hWndParent</I><B>,</B></TD>
<TD width=58%>// handle to parent or owner window</TD>
</TR>

<TR VALIGN="top">
<TD width=42%><B>    HMENU</B> <I>hMenu</I><B>,</B></TD>
<TD width=58%>// handle to menu, or child-window identifier</TD>
</TR>

<TR VALIGN="top">
<TD width=42%><B>    HINSTANCE</B> <I>hInstance</I><B>,</B></TD>
<TD width=58%>// handle to application instance</TD>
</TR>

<TR VALIGN="top">
<TD width=42%><B>    LPVOID</B> <I>lpParam</I> </TD>
<TD width=58%>// pointer to window-creation data</TD>
</TR>

<TR VALIGN="top">
<TD width=42%><B>   );</B></TD>
<TD width=58%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>dwExStyle</I></P>

<P>Specifies the extended style of the window. This parameter can be one of the following values: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=48%><B>Style</B></TD>
<TD width=52%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=48%>WS_EX_ACCEPTFILES</TD>
<TD width=52%>Specifies that a window created with this style accepts drag-drop files.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>WS_EX_APPWINDOW</TD>
<TD width=52%>Forces a top-level window onto the taskbar when the window is minimized. </TD>
</TR>

<TR VALIGN="top">
<TD width=48%>WS_EX_CLIENTEDGE</TD>
<TD width=52%>Specifies that a window has a border with a sunken edge.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>WS_EX_CONTEXTHELP</TD>
<TD width=52%>Includes a question mark in the title bar of the window. When the user clicks the question mark, the cursor changes to a question mark with a pointer. If the user then clicks a child window, the child receives a WM_HELP message. The child window should pass the message to the parent window procedure, which should call the <B>WinHelp</B> function using the HELP_WM_HELP command. The Help application displays a pop-up window that typically contains help for the child window.
<P>WS_EX_CONTEXTHELP cannot be used with the WS_MAXIMIZEBOX or WS_MINIMIZEBOX styles.</P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>WS_EX_CONTROLPARENT</TD>
<TD width=52%>Allows the user to navigate among the child windows of the window by using the TAB key.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>WS_EX_DLGMODALFRAME</TD>
<TD width=52%>Creates a window that has a double border; the window can, optionally, be created with a title bar by specifying the WS_CAPTION style in the <I>dwStyle</I> parameter.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>WS_EX_LEFT</TD>
<TD width=52%>Window has generic "left-aligned" properties. This is the default.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>WS_EX_LEFTSCROLLBAR</TD>
<TD width=52%>If the shell language is Hebrew, Arabic, or another language that supports reading order alignment, the vertical scroll bar (if present) is to the left of the client area. For other languages, the style is ignored and not treated as an error.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>WS_EX_LTRREADING</TD>
<TD width=52%>The window text is displayed using Left to Right reading-order properties. This is the default.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>WS_EX_MDICHILD</TD>
<TD width=52%>Creates an MDI child window.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>WS_EX_NOPARENTNOTIFY</TD>
<TD width=52%>Specifies that a child window created with this style does not send the <A HREF="0ohj0ye.htm">WM_PARENTNOTIFY</A> message to its parent window when it is created or destroyed.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>WS_EX_OVERLAPPEDWINDOW</TD>
<TD width=52%>Combines the WS_EX_CLIENTEDGE and WS_EX_WINDOWEDGE styles.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>WS_EX_PALETTEWINDOW</TD>
<TD width=52%>Combines the WS_EX_WINDOWEDGE, WS_EX_TOOLWINDOW, and WS_EX_TOPMOST styles.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>WS_EX_RIGHT</TD>
<TD width=52%>Window has generic "right-aligned" properties. This depends on the window class. This style has an effect only if the shell language is Hebrew, Arabic, or another language that supports reading order alignment; otherwise, the style is ignored and not treated as an error.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>WS_EX_RIGHTSCROLLBAR</TD>
<TD width=52%>Vertical scroll bar (if present) is to the right of the client area. This is the default.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>WS_EX_RTLREADING</TD>
<TD width=52%>If the shell language is Hebrew, Arabic, or another language that supports reading order alignment, the window text is displayed using Right to Left reading-order properties. For other languages, the style is ignored and not treated as an error.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>WS_EX_STATICEDGE</TD>
<TD width=52%>Creates a window with a three-dimensional border style intended to be used for items that do not accept user input.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>WS_EX_TOOLWINDOW</TD>
<TD width=52%>Creates a tool window; that is, a window intended to be used as a floating toolbar. A tool window has a title bar that is shorter than a normal title bar, and the window title is drawn using a smaller font. A tool window does not appear in the taskbar or in the dialog that appears when the user presses ALT+TAB.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>WS_EX_TOPMOST</TD>
<TD width=52%>Specifies that a window created with this style should be placed above all non-topmost windows and should stay above them, even when the window is deactivated. To add or remove this style, use the <A HREF="4557_v1.htm"><B>SetWindowPos</B></A> function.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>WS_EX_TRANSPARENT</TD>
<TD width=52%>Specifies that a window created with this style is to be transparent. That is, any windows that are beneath the window are not obscured by the window. A window created with this style receives <A HREF="f55xz2.htm">WM_PAINT</A> messages only after all sibling windows beneath it have been updated.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>WS_EX_WINDOWEDGE</TD>
<TD width=52%>Specifies that a window has a border with a raised edge.</TD>
</TR>
</TABLE><BR>

<P></P>

<P>Using the WS_EX_RIGHT style for static or edit controls has the same effect as using the SS_RIGHT or ES_RIGHT style, respectively. Using this style with button controls has the same effect as using BS_RIGHT and BS_RIGHTBUTTON styles.</P>

<P><I>lpClassName</I></P>

<P>Points to a null-terminated string or is an integer atom. If <I>lpClassName</I> is an atom, it must be a global atom created by a previous call to <A HREF="1qh2cm4.htm"><B>GlobalAddAtom</B></A>. The atom, a 16-bit value less than 0xC000, must be in the low-order word of <I>lpClassName</I>; the high-order word must be zero. </P>

<P>If <I>lpClassName</I> is a string, it specifies the window class name. The class name can be any name registered with the <A HREF="6v_00hu.htm"><B>RegisterClass</B></A> function or any of the predefined control-class names. </P>

<P><I>lpWindowName</I></P>

<P>Points to a null-terminated string that specifies the window name. </P>

<P><I>dwStyle</I></P>

<P>Specifies the style of the window being created. For a list of the window styles that can be specified in <I>dwStyle</I>, see <A HREF="we1r5q.htm"><B>CreateWindow</B></A>. </P>

<P><I>x</I></P>

<P>Specifies the initial horizontal position of the window. For an overlapped or pop-up window, the <I>x</I> parameter is the initial x-coordinate of the window's upper-left corner, in screen coordinates. For a child window, <I>x</I> is the x-coordinate of the upper-left corner of the window relative to the upper-left corner of the parent window's client area. </P>

<P>If <I>x</I> is set to CW_USEDEFAULT, Windows selects the default position for the window's upper-left corner and ignores the <I>y</I> parameter. CW_USEDEFAULT is valid only for overlapped windows; if it is specified for a pop-up or child window, the <I>x</I> and <I>y</I> parameters are set to zero. </P>

<P><I>y</I></P>

<P>Specifies the initial vertical position of the window. For an overlapped or pop-up window, the <I>y</I> parameter is the initial y-coordinate of the window's upper-left corner, in screen coordinates. For a child window, <I>y</I> is the initial y-coordinate of the upper-left corner of the child window relative to the upper-left corner of the parent window's client area. For a list box, <I>y</I> is the initial y-coordinate of the upper-left corner of the list box's client area relative to the upper-left corner of the parent window's client area. </P>

<P>If an overlapped window is created with the WS_VISIBLE style bit set and the <I>x</I> parameter is set to CW_USEDEFAULT, Windows ignores the <I>y</I> parameter. </P>

<P><I>nWidth</I></P>

<P>Specifies the width, in device units, of the window. For overlapped windows, <I>nWidth</I> is the window's width, in screen coordinates, or CW_USEDEFAULT. If <I>nWidth</I> is CW_USEDEFAULT, Windows selects a default width and height for the window; the default width extends from the initial x-coordinates to the right edge of the screen; the default height extends from the initial y-coordinate to the top of the icon area. CW_USEDEFAULT is valid only for overlapped windows; if CW_USEDEFAULT is specified for a pop-up or child window, the <I>nWidth</I> and <I>nHeight</I> parameter are set to zero. </P>

<P><I>nHeight</I></P>

<P>Specifies the height, in device units, of the window. For overlapped windows, <I>nHeight</I> is the window's height, in screen coordinates. If the <I>nWidth</I> parameter is set to CW_USEDEFAULT, Windows ignores <I>nHeight</I>. </P>

<P><I>hWndParent</I></P>

<P>Identifies the parent or owner window of the window being created. A valid window handle must be supplied when a child window or an owned window is created. A child window is confined to the client area of its parent window. An owned window is an overlapped window that is destroyed when its owner window is destroyed or hidden when its owner is minimized; it is always displayed on top of its owner window. Although this parameter must specify a valid handle if the <I>dwStyle</I> parameter includes the WS_CHILD style, it is optional if <I>dwStyle</I> includes the WS_POPUP style. </P>

<P><I>hMenu</I></P>

<P>Identifies a menu, or specifies a child-window identifier, depending on the window style. For an overlapped or pop-up window, <I>hMenu</I> identifies the menu to be used with the window; it can be NULL if the class menu is to be used. For a child window, <I>hMenu</I> specifies the child-window identifier, an integer value used by a dialog box control to notify its parent about events. The application determines the child-window identifier; it must be unique for all child windows with the same parent window. </P>

<P><I>hInstance</I></P>

<P>Identifies the instance of the module to be associated with the window. </P>

<P><I>lpParam</I></P>

<P>Points to a value passed to the window through the <A HREF="19uxhwn.htm"><B>CREATESTRUCT</B></A> structure referenced by the <I>lParam</I> parameter of the WM_CREATE message. If an application calls <B>CreateWindow</B> to create a multiple document interface client window, <I>lpParam</I> must point to a <A HREF="1s_jdbh.htm"><B>CLIENTCREATESTRUCT</B></A> structure. </P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is the handle to the new window.</P>

<P>If the function fails, the return value is NULL. </P>

<P><B>Remarks</B></P>

<P>The <B>CreateWindowEx</B> function sends WM_NCCREATE, WM_NCCALCSIZE, and WM_CREATE messages to the window being created. </P>

<P>For information about the window control classes, window styles, and control styles used with this function, see the description of the <B>CreateWindow</B> function. </P>

<P><B>Windows 95:</B> The system can support a maximum of 16,364 window handles.</P>

<P><B>See Also</B></P>

<P><A HREF="1s_jdbh.htm"><B>CLIENTCREATESTRUCT</B></A>, <A HREF="19uxhwn.htm"><B>CREATESTRUCT</B></A>, <A HREF="we1r5q.htm"><B>CreateWindow</B></A>, <A HREF="1qh2cm4.htm"><B>GlobalAddAtom</B></A>, <A HREF="6v_00hu.htm"><B>RegisterClass</B></A>, <A HREF="4557_v1.htm"><B>SetWindowPos</B></A>, <A HREF="2re1yt3.htm">WM_CREATE</A>, <A HREF="58jqol.htm">WM_NCCALCSIZE</A>, <A HREF="11ps3hu.htm">WM_NCCREATE</A>, <A HREF="f55xz2.htm">WM_PAINT</A>, <A HREF="0ohj0ye.htm">WM_PARENTNOTIFY</A> </P>

</BODY>
</HTML>

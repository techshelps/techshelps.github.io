<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>Creating an Owner-Drawn List Box</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="v0q0kv"></A><B>Creating an Owner-Drawn List Box</B></P>

<P>The following example shows how to draw a list box that contains five owner-drawn items: four drawing implements and a fork. Each list item appears as a bitmap followed by the name of the object. A button prompts the user to select one item that is not like the others. Choosing the button with the fork selected displays a "You're right!" message and closes the dialog box. Choosing the button with any other list item selected displays a "Try again!" message.</P>

<P>The list box has the LBS_OWNERDRAW and LBS_HASSTRINGS styles, in addition to the standard list box styles. The code initializes the list box by sending the <A HREF="aidyjg.htm">LB_ADDSTRING</A> message to set the text, and then sends the <A HREF="nurmqn.htm">LB_SETITEMDATA</A> message to associate a bitmap with each list box item. The code also sets the height of each list box item by processing the <A HREF=".a2o7n.htm">WM_MEASUREITEM</A> message and draws the text and bitmap for each item by processing the <A HREF="70lqx9p.htm">WM_DRAWITEM</A> message. </P>

<P>#define XBITMAP 80  </P>

<P>#define YBITMAP 20 </P>

<P></P>

<P>#define BUFFER MAX_PATH </P>

<P></P>

<P>HBITMAP hbmpPencil, hbmpCrayon, hbmpMarker, hbmpPen, hbmpFork; </P>

<P>HBITMAP hbmpPicture, hbmpOld; </P>

<P></P>

<P>void AddItem(HWND hwnd, LPSTR lpstr, HBITMAP hbmp) </P>

<P>{ </P>

<P>int nItem; </P>

<P></P>

<P>nItem = SendMessage(hwndList, LB_ADDSTRING, 0, lpstr); </P>

<P>SendMessage(hwndList, LB_SETITEMDATA, nItem, hbmp); </P>

<P>} </P>

<P></P>

<P>DWORD APIENTRY DlgDrawProc( </P>

<P>HWND hDlg,            /* window handle of dialog box     */ </P>

<P>UINT message,         /* type of message                 */ </P>

<P>UINT wParam,          /* message-specific information    */ </P>

<P>LONG lParam) </P>

<P>{ </P>

<P>int nItem; </P>

<P>TCHAR tchBuffer[BUFFER]; </P>

<P>HBITMAP hbmp; </P>

<P>HWND hListBox; </P>

<P>TEXTMETRIC tm; </P>

<P>int y; </P>

<P>HDC hdcMem; </P>

<P>LPMEASUREITEMSTRUCT lpmis; </P>

<P>LPDRAWITEMSTRUCT lpdis; </P>

<P>RECT rcBitmap; </P>

<P></P>

<P>switch (message) { </P>

<P></P>

<P>case WM_INITDIALOG: </P>

<P></P>

<P>/* Load bitmaps. */ </P>

<P></P>

<P>hbmpPencil = LoadBitmap(hinst, MAKEINTRESOURCE(700)); </P>

<P>hbmpCrayon = LoadBitmap(hinst, MAKEINTRESOURCE(701)); </P>

<P>hbmpMarker = LoadBitmap(hinst, MAKEINTRESOURCE(702)); </P>

<P>hbmpPen = LoadBitmap(hinst, MAKEINTRESOURCE(703)); </P>

<P>hbmpFork = LoadBitmap(hinst, MAKEINTRESOURCE(704)); </P>

<P></P>

<P>/* Retrieve list box handle. */ </P>

<P></P>

<P>hListBox = GetDlgItem(hDlg, IDL_STUFF); </P>

<P></P>

<P>/* </P>

<P>* Initialize the list box text and associate a bitmap </P>

<P>* with each list box item. </P>

<P>*/ </P>

<P></P>

<P>AddItem(hListBox, "pencil", hbmpPencil); </P>

<P>AddItem(hListBox, "crayon", hbmpCrayon); </P>

<P>AddItem(hListBox, "marker", hbmpMarker); </P>

<P>AddItem(hListBox, "pen",    hbmpPen); </P>

<P>AddItem(hListBox, "fork",   hbmpFork); </P>

<P></P>

<P>SetFocus(hListBox); </P>

<P>SendMessage(hListBox, LB_SETCURSEL, 0, 0); </P>

<P>return TRUE; </P>

<P></P>

<P>case WM_MEASUREITEM: </P>

<P></P>

<P>lpmis = (LPMEASUREITEMSTRUCT) lParam; </P>

<P></P>

<P>/* Set the height of the list box items. */ </P>

<P></P>

<P>lpmis-&gt;itemHeight = 20; </P>

<P>return TRUE; </P>

<P></P>

<P>case WM_DRAWITEM: </P>

<P></P>

<P>lpdis = (LPDRAWITEMSTRUCT) lParam; </P>

<P></P>

<P>/* If there are no list box items, skip this message. */ </P>

<P></P>

<P>if (lpdis-&gt;itemID == -1) { </P>

<P>break; </P>

<P>} </P>

<P></P>

<P>/* </P>

<P>* Draw the bitmap and text for the list box item. Draw a </P>

<P>* rectangle around the bitmap if it is selected. </P>

<P>*/ </P>

<P></P>

<P>switch (lpdis-&gt;itemAction) { </P>

<P></P>

<P>case ODA_SELECT: </P>

<P>case ODA_DRAWENTIRE: </P>

<P></P>

<P>/* Display the bitmap associated with the item. */ </P>

<P></P>

<P>hbmpPicture = (HBITMAP) SendMessage(lpdis-&gt;hwndItem, </P>

<P>LB_GETITEMDATA, lpdis-&gt;itemID, (LPARAM) 0); </P>

<P></P>

<P>hdcMem = CreateCompatibleDC(lpdis-&gt;hDC); </P>

<P>hbmpOld = SelectObject(hdcMem, hbmpPicture); </P>

<P></P>

<P>BitBlt(lpdis-&gt;hDC, </P>

<P>lpdis-&gt;rcItem.left, lpdis-&gt;rcItem.top, </P>

<P>lpdis-&gt;rcItem.right - lpdis-&gt;rcItem.left, </P>

<P>lpdis-&gt;rcItem.bottom - lpdis-&gt;rcItem.top, </P>

<P>hdcMem, 0, 0, SRCCOPY); </P>

<P></P>

<P>/* Display the text associated with the item. */ </P>

<P></P>

<P>SendMessage(lpdis-&gt;hwndItem, LB_GETTEXT, </P>

<P>lpdis-&gt;itemID, (LPARAM) tchBuffer); </P>

<P></P>

<P>GetTextMetrics(lpdis-&gt;hDC, &amp;tm); </P>

<P></P>

<P>y = (lpdis-&gt;rcItem.bottom + lpdis-&gt;rcItem.top - </P>

<P>tm.tmHeight) / 2; </P>

<P></P>

<P>TextOut(lpdis-&gt;hDC, </P>

<P>XBITMAP + 6, </P>

<P>y, </P>

<P>tchBuffer, </P>

<P>strlen(tchBuffer)); </P>

<P></P>

<P>SelectObject(hdcMem, hbmpOld); </P>

<P>DeleteDC(hdcMem); </P>

<P></P>

<P>/* Is the item selected? */ </P>

<P></P>

<P>if (lpdis-&gt;itemState &amp; ODS_SELECTED) { </P>

<P></P>

<P>/* </P>

<P>* Set RECT coordinates to surround only the </P>

<P>* bitmap. </P>

<P>*/ </P>

<P></P>

<P>rcBitmap.left = lpdis-&gt;rcItem.left; </P>

<P>rcBitmap.top = lpdis-&gt;rcItem.top; </P>

<P>rcBitmap.right = lpdis-&gt;rcItem.left + XBITMAP; </P>

<P>rcBitmap.bottom = lpdis-&gt;rcItem.top + YBITMAP; </P>

<P></P>

<P>/* </P>

<P>* Draw a rectangle around bitmap to indicate </P>

<P>* the selection. </P>

<P>*/ </P>

<P></P>

<P>DrawFocusRect(lpdis-&gt;hDC, &amp;rcBitmap); </P>

<P>} </P>

<P>break; </P>

<P></P>

<P>case ODA_FOCUS: </P>

<P></P>

<P>/* </P>

<P>* Do not process focus changes. The focus caret </P>

<P>* (outline rectangle) indicates the selection. </P>

<P>* The Which one? (IDOK) button indicates the final </P>

<P>* selection. </P>

<P>*/ </P>

<P></P>

<P>break; </P>

<P>} </P>

<P>return TRUE; </P>

<P></P>

<P>case WM_COMMAND: </P>

<P></P>

<P>switch (LOWORD(wParam)) { </P>

<P>case IDOK: </P>

<P></P>

<P>/* Get the selected item's text. */ </P>

<P></P>

<P>nItem = SendMessage(GetDlgItem(hDlg, IDL_STUFF), </P>

<P>LB_GETCURSEL, 0, (LPARAM) 0); </P>

<P>hbmp = SendMessage(GetDlgItem(hDlg, IDL_STUFF), </P>

<P>LB_GETITEMDATA, nItem, 0); </P>

<P></P>

<P>/* </P>

<P>* If the item is not the correct answer, tell the </P>

<P>* user to try again. </P>

<P>* </P>

<P>* If the item is the correct answer, congratulate </P>

<P>* the user and destroy the dialog box. </P>

<P>*/ </P>

<P></P>

<P>if (hbmp != hbmpFork) { </P>

<P>MessageBox(hDlg, "Try again!", "Oops.", MB_OK); </P>

<P>return FALSE; </P>

<P>} </P>

<P>else { </P>

<P>MessageBox(hDlg, "You're right!", </P>

<P>"Congratulations.", MB_OK); </P>

<P></P>

<P>/* Fall through. */ </P>

<P></P>

<P>} </P>

<P></P>

<P>case IDCANCEL: </P>

<P></P>

<P>/* Destroy the dialog box. */ </P>

<P></P>

<P>EndDialog(hDlg, TRUE); </P>

<P>return TRUE; </P>

<P></P>

<P>default: </P>

<P></P>

<P>return FALSE; </P>

<P>} </P>

<P></P>

<P>case WM_DESTROY: </P>

<P></P>

<P>/* Free any resources used by the bitmaps. */ </P>

<P></P>

<P>DeleteObject(hbmpPencil); </P>

<P>DeleteObject(hbmpCrayon); </P>

<P>DeleteObject(hbmpMarker); </P>

<P>DeleteObject(hbmpPen); </P>

<P>DeleteObject(hbmpFork); </P>

<P></P>

<P>return TRUE; </P>

<P></P>

<P>default: </P>

<P>return FALSE; </P>

<P></P>

<P>} </P>

<P>return FALSE; </P>

<P>} </P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

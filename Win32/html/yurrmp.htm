<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>RegEnumValue</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="yurrmp"></A><B>RegEnumValue  <A HREF="lx_b1k.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="1y7hnby.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="vm.h_d.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>RegEnumValue</B> function enumerates the values for the specified open registry key. The function copies one indexed value name and data block for the key each time it is called. </P>

<P><B>LONG RegEnumValue(</B></P>

<TABLE cols=2 width=459>

<TR VALIGN="top">
<TD width=47%><B>HKEY</B> <I>hKey</I><B>,</B></TD>
<TD width=53%>// handle of key to query </TD>
</TR>

<TR VALIGN="top">
<TD width=47%><B>    DWORD</B> <I>dwIndex</I><B>,</B></TD>
<TD width=53%>// index of value to query </TD>
</TR>

<TR VALIGN="top">
<TD width=47%><B>    LPTSTR</B> <I>lpValueName</I><B>,</B></TD>
<TD width=53%>// address of buffer for value string </TD>
</TR>

<TR VALIGN="top">
<TD width=47%><B>    LPDWORD</B> <I>lpcbValueName</I><B>,</B></TD>
<TD width=53%>// address for size of value buffer </TD>
</TR>

<TR VALIGN="top">
<TD width=47%><B>    LPDWORD</B> <I>lpReserved</I><B>,</B></TD>
<TD width=53%>// reserved </TD>
</TR>

<TR VALIGN="top">
<TD width=47%><B>    LPDWORD</B> <I>lpType</I><B>,</B></TD>
<TD width=53%>// address of buffer for type code </TD>
</TR>

<TR VALIGN="top">
<TD width=47%><B>    LPBYTE</B> <I>lpData</I><B>,</B></TD>
<TD width=53%>// address of buffer for value data </TD>
</TR>

<TR VALIGN="top">
<TD width=47%><B>    LPDWORD</B> <I>lpcbData</I> </TD>
<TD width=53%>// address for size of data buffer </TD>
</TR>

<TR VALIGN="top">
<TD width=47%><B>   );</B></TD>
<TD width=53%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hKey</I></P>

<P>Identifies a currently open key or any of the following predefined reserved handle values: </P>

<P><B>HKEY_CLASSES_ROOT</B><BR>
<B>HKEY_CURRENT_USER</B><BR>
<B>HKEY_LOCAL_MACHINE</B><BR>
<B>HKEY_USERS</B></P>

<P>The enumerated values are associated with the key identified by <I>hKey</I>. </P>

<P><I>dwIndex</I></P>

<P>Specifies the index of the value to retrieve. This parameter should be zero for the first call to the <B>RegEnumValue</B> function and then be incremented for subsequent calls. </P>

<P>Because values are not ordered, any new value will have an arbitrary index. This means that the function may return values in any order. </P>

<P><I>lpValueName</I></P>

<P>Points to a buffer that receives the name of the value, including the terminating null character. </P>

<P><I>lpcbValueName</I></P>

<P>Points to a variable that specifies the size, in characters, of the buffer pointed to by the <I>lpValueName</I> parameter. This size should include the terminating null character. When the function returns, the variable pointed to by <I>lpcbValueName</I> contains the number of characters stored in the buffer. The count returned does not include the terminating null character. </P>

<P><I>lpReserved</I></P>

<P>Reserved; must be NULL. </P>

<P><I>lpType</I></P>

<P>Points to a variable that receives the type code for the value entry. The type code can be one of the following values: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=49%><B>Value</B></TD>
<TD width=51%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=49%>REG_BINARY</TD>
<TD width=51%>Binary data in any form.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>REG_DWORD</TD>
<TD width=51%>A 32-bit number.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>REG_DWORD_LITTLE_ENDIAN</TD>
<TD width=51%>A 32-bit number in little-endian format (same as REG_DWORD). In little-endian format, the most significant byte of a word is the high-order byte. This is the most common format for computers running Windows NT and Windows 95.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>REG_DWORD_BIG_ENDIAN</TD>
<TD width=51%>A 32-bit number in big-endian format. In big-endian format, the most significant byte of a word is the low-order byte.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>REG_EXPAND_SZ</TD>
<TD width=51%>A null-terminated string that contains unexpanded references to environment variables (for example, "%PATH%"). It will be a Unicode or ANSI string depending on whether you use the Unicode or ANSI functions.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>REG_LINK</TD>
<TD width=51%>A Unicode symbolic link.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>REG_MULTI_SZ</TD>
<TD width=51%>An array of null-terminated strings, terminated by two null characters.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>REG_NONE</TD>
<TD width=51%>No defined value type.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>REG_RESOURCE_LIST</TD>
<TD width=51%>A device-driver resource list.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>REG_SZ</TD>
<TD width=51%>A null-terminated string. It will be a Unicode or ANSI string, depending on whether you use the Unicode or ANSI functions.</TD>
</TR>
</TABLE><BR>

<P></P>

<P>The <I>lpType</I> parameter can be NULL if the type code is not required. </P>

<P><I>lpData</I></P>

<P>Points to a buffer that receives the data for the value entry. This parameter can be NULL if the data is not required. </P>

<P><I>lpcbData</I></P>

<P>Points to a variable that specifies the size, in bytes, of the buffer pointed to by the <I>lpData</I> parameter. When the function returns, the variable pointed to by the <I>lpcbData</I> parameter contains the number of bytes stored in the buffer. This parameter can be NULL, only if <I>lpData</I> is NULL. </P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is ERROR_SUCCESS.</P>

<P>If the function fails, the return value is a nonzero error code defined in WINERROR.H. You can use the <A HREF="n7qrmp.htm"><B>FormatMessage</B></A> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</P>

<P><B>Remarks</B></P>

<P>To enumerate values, an application should initially call the <B>RegEnumValue</B> function with the <I>dwIndex</I> parameter set to zero. The application should then increment <I>dwIndex</I> and call the <B>RegEnumValue</B> function until there are no more values (until the function returns ERROR_NO_MORE_ITEMS). </P>

<P>The application can also set <I>dwIndex</I> to the index of the last value on the first call to the function and decrement the index until the value with index 0 is enumerated. To retrieve the index of the last value, use the <A HREF="crty9k.htm"><B>RegQueryInfoKey</B></A> function. </P>

<P>While using <B>RegEnumValue</B>, an application should not call any registration functions that might change the key being queried. </P>

<P>The key identified by the <I>hKey</I> parameter must have been opened with KEY_QUERY_VALUE access. To open the key, use the <B>RegCreateKeyEx</B> or <B>RegOpenKeyEx</B> function. </P>

<P>To determine the maximum size of the name and data buffers, use the <B>RegQueryInfoKey</B> function. </P>

<P><B>See Also</B></P>

<P><A HREF=".5u9k7.htm"><B>RegCreateKeyEx</B></A>, <A HREF="toz4vb.htm"><B>RegEnumKey</B></A>, <A HREF=".ak4qs.htm"><B>RegEnumKeyEx</B></A>, <A HREF="rz_3fo.htm"><B>RegOpenKeyEx</B></A>, <A HREF="crty9k.htm"><B>RegQueryInfoKey</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

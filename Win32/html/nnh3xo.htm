<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>Audit Functions</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="nnh3xo"></A><B>Audit Functions</B></P>

<P>The auditing functions are obsolete on Windows NT. Windows NT uses an integrated <A HREF="ejmiui.htm">event logging</A> mechanism for reporting both audits and errors. The NetAudit and NetErrorLog functions are provided to access LAN Manager 2.x logs. They will report ERROR_NOT_SUPPORTED if called to a Windows NT system.</P>

<P>The auditing functions are:</P>

<P><A HREF="1cgb353.htm"><B>NetAuditClear</B></A> <BR>
<A HREF="4xpzym9.htm"><B>NetAuditRead</B></A> </P>

<P></P>

<P>Auditing functions control the audit log on a LAN Manager computer. Auditing functions monitor operations on the specified server. If auditing is enabled, each monitored operation generates an audit entry. For example, when a user establishes a connection to the server, a single audit entry is generated.</P>

<P>Audit entries are stored in a binary file called an audit trail or audit log. All Auditing functions perform their operations on this file. LAN Manager defines many types of audit entries.</P>

<P><A HREF="4xpzym9.htm"><B>NetAuditRead</B></A> reads the audit log. <A HREF="1cgb353.htm"><B>NetAuditClear</B></A> clears the audit log.</P>

<P><B>Data Structures</B></P>

<P>All audit entries include a fixed-length header used in conjunction with variable-length data specific to the entry type. Because of the variable lengths and structures of the <B>ae_data</B> element of the audit entry (it is possible for <B>ae_data</B> to be zero bytes), only the fixed header is defined in the <A HREF="amna..htm"><B>AUDIT_ENTRY</B></A> structure.</P>

<P>The variable-length portion of the audit entry can contain an offset to a variable-length Unicode string. The offset values are DWORDs. To determine the value of the pointer to this string, add the offset value to the address of <B>ae_data</B>.</P>

<P>The following example illustrates this procedure. Assume that <B>pAE</B> points to a buffer that contains a complete audit entry and that the <B>ae_type</B> member of the <B>AUDIT_ENTRY</B> structure contains the value AE_CONNSTOP, which specifies the predefined <B>AE_CONNSTOP</B> structure. To point the variable <B>pszComputerName</B> to the Unicode string that contains the name of the client whose connection was stopped, an application would perform the following algorithm:</P>

<P>PAUDIT_ENTRY  pAE<B>;             </B>// Fixed part of audit entry </P>

<P>LPAE_CONNSTOP pAEvar;          // Variable-length structure </P>

<P>LPWSTR        pszComputerName; // Pointer to var-length string </P>

<P>// Calculate the offset to the variable-length structure. </P>

<P>pAEvar = (_LPAE_CONNSTOP) (((LPBYTE) pAE) + pAE-&gt;ae_data_offset);</P>

<P>// Calculate the offset to the computername. </P>

<P>pszComputerName = ((LPBYTE) pAEvar) + pAEvar-&gt;ae_cp_compname;</P>

<P></P>

<P>The following structures are specific to the audit entry type The structures follow the <A HREF="amna..htm"><B>AUDIT_ENTRY</B></A> header, but they are not necessarily contiguous.</P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Example of Owner-Drawn Menu Items</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="djwawn"></A><B>Example of Owner-Drawn Menu Items</B></P>

<P>The example in this topic uses owner-drawn menu items in a menu. The menu items select specific font attributes, and the application displays each menu item using a font that has the corresponding attribute. For example, the Italic menu item is displayed in an italic font. The Character menu name on the menu bar opens the menu.</P>

<P>The menu bar and drop-down menu are defined initially by an extended menu-template resource. Because a menu template cannot specify owner-drawn items, the menu initially contains four text menu items with the following strings: "Regular," "Bold," "Italic," and "Underline." The application's window procedure changes these to owner-drawn items when it processes the <A HREF="2re1yt3.htm">WM_CREATE</A> message. When it receives the WM_CREATE message, the window procedure calls the application-defined OnCreate function, which performs the following steps for each menu item:</P>

<P>1.Allocates an application-defined MYITEM structure.</P>

<P>2.Gets the text of the menu item and saves it in the application-defined MYITEM structure.</P>

<P>3.Creates the font used to display the menu item and saves its handle in the application-defined MYITEM structure.</P>

<P>4.Changes the menu item type to MFT_OWNERDRAW and saves a pointer to the application-defined MYITEM structure as item data.</P>

<P></P>

<P>Because a pointer to each application-defined MYITEM structure is saved as item data, it is passed to the window procedure in conjunction with the <A HREF=".a2o7n.htm">WM_MEASUREITEM</A> and <A HREF="70lqx9p.htm">WM_DRAWITEM</A> messages for the corresponding menu item. The pointer is contained in the <B>itemData</B> member of both the <A HREF="5k1k_8r.htm"><B>MEASUREITEMSTRUCT</B></A> and <A HREF="1sswtgp.htm"><B>DRAWITEMSTRUCT</B></A> structures.</P>

<P>A WM_MEASUREITEM message is sent for each owner-drawn menu item the first time it is displayed. The application processes this message by selecting the font for the menu item into a device context and then determining the space required to display the menu item text in that font. The font and menu item text are both specified by the menu item's MYITEM structure (the structure defined by the application). The application determines the size of the text by using the <A HREF="101r0q.htm"><B>GetTextExtentPoint32</B></A> function.</P>

<P>The window procedure processes the <A HREF="70lqx9p.htm">WM_DRAWITEM</A> message by displaying the menu item text in the appropriate font. The font and menu item text are both specified by the menu item's MYITEM structure. The application selects text and background colors appropriate to the menu item's state.</P>

<P>The window procedure processes the <A HREF="0yqmho.htm">WM_DESTROY</A> message to destroy fonts and free memory. The application deletes the font and frees the application-defined MYITEM structure for each menu item.</P>

<P>Following are the relevant portions of the application's header file.</P>

<P>// Menu-item identifiers for the Character menu  </P>

<P></P>

<P>#define IDM_CHARACTER 10 </P>

<P>#define IDM_REGULAR   11 </P>

<P>#define IDM_BOLD      12 </P>

<P>#define IDM_ITALIC    13 </P>

<P>#define IDM_UNDERLINE 14 </P>

<P></P>

<P>// Structure associated with menu items </P>

<P></P>

<P>typedef struct tagMYITEM { </P>

<P>HFONT hfont; </P>

<P>int   cchItemText; </P>

<P>char  szItemText[1]; </P>

<P>} MYITEM; </P>

<P></P>

<P>#define CCH_MAXITEMTEXT 256 </P>

<P></P>

<P>Following are the relevant portions of the application's window procedure and its associated functions.</P>

<P>LRESULT CALLBACK MainWindowProc(  </P>

<P>HWND hwnd, </P>

<P>UINT uMsg, </P>

<P>WPARAM wParam, </P>

<P>LPARAM lParam </P>

<P>) </P>

<P>{ </P>

<P>switch (uMsg) { </P>

<P>case WM_CREATE: </P>

<P>if (!OnCreate(hwnd)) </P>

<P>return -1; </P>

<P>break; </P>

<P></P>

<P>case WM_DESTROY: </P>

<P>OnDestroy(hwnd); </P>

<P>PostQuitMessage(0); </P>

<P>break; </P>

<P></P>

<P>case WM_MEASUREITEM: </P>

<P>OnMeasureItem(hwnd, (LPMEASUREITEMSTRUCT) lParam); </P>

<P>return TRUE; </P>

<P></P>

<P>case WM_DRAWITEM: </P>

<P>OnDrawItem(hwnd, (LPDRAWITEMSTRUCT) lParam); </P>

<P>return TRUE; </P>

<P></P>

<P>. </P>

<P>. // Additional message processing goes here. </P>

<P>. </P>

<P></P>

<P>default: </P>

<P>return DefWindowProc(hwnd, uMsg, wParam, lParam); </P>

<P>} </P>

<P>return 0; </P>

<P>} </P>

<P></P>

<P></P>

<P>BOOL WINAPI OnCreate(HWND hwnd) </P>

<P>{ </P>

<P>HMENU hmenuBar = GetMenu(hwnd); </P>

<P>HMENU hmenuPopup; </P>

<P>MENUITEMINFO mii; </P>

<P>UINT uID; </P>

<P>MYITEM *pMyItem; </P>

<P></P>

<P>// Get the handle of the pop-up menu. </P>

<P></P>

<P>mii.fMask = MIIM_SUBMENU;     // information to get </P>

<P>GetMenuItemInfo(hmenuBar, IDM_CHARACTER, FALSE, &amp;mii); </P>

<P>hmenuPopup = mii.hSubMenu; </P>

<P></P>

<P>// Modify each menu item. Assume that the IDs IDM_REGULAR </P>

<P>// through IDM_UNDERLINE are consecutive numbers. </P>

<P></P>

<P>for (uID = IDM_REGULAR; uID &lt;= IDM_UNDERLINE; uID++) { </P>

<P></P>

<P>// Allocate an item structure, leaving space for a </P>

<P>// string of up to CCH_MAXITEMTEXT characters. </P>

<P></P>

<P>pMyItem = (MYITEM *) LocalAlloc(LMEM_FIXED, </P>

<P>sizeof(MYITEM) + CCH_MAXITEMTEXT); </P>

<P></P>

<P>// Save the item text in the item structure. </P>

<P></P>

<P>mii.fMask = MIIM_TYPE; </P>

<P>mii.dwTypeData = pMyItem-&gt;szItemText; </P>

<P>mii.cch = CCH_MAXITEMTEXT; </P>

<P>GetMenuItemInfo(hmenuPopup, uID, FALSE, &amp;mii); </P>

<P>pMyItem-&gt;cchItemText = mii.cch; </P>

<P></P>

<P>// Reallocate the structure to the minimum required size. </P>

<P></P>

<P>pMyItem = (MYITEM *) LocalReAlloc(pMyItem, </P>

<P>sizeof(MYITEM) + mii.cch, LMEM_MOVEABLE); </P>

<P></P>

<P>// Create the font used to draw the item. </P>

<P></P>

<P>pMyItem-&gt;hfont = CreateMenuItemFont(uID); </P>

<P></P>

<P>// Change the item to an owner-drawn item, and save </P>

<P>// the address of the item structure as item data. </P>

<P></P>

<P>mii.fMask = MIIM_TYPE | MIIM_DATA; </P>

<P>mii.fType = MFT_OWNERDRAW; </P>

<P>mii.dwItemData = (DWORD) pMyItem; </P>

<P>SetMenuItemInfo(hmenuPopup, uID, FALSE, &amp;mii); </P>

<P>} </P>

<P>return TRUE; </P>

<P>} </P>

<P></P>

<P>HFONT CreateMenuItemFont(UINT uID) </P>

<P>{ </P>

<P>LOGFONT lf; </P>

<P></P>

<P>ZeroMemory(&amp;lf, sizeof(lf)); </P>

<P>lf.lfHeight = 20; </P>

<P>lstrcpy(lf.lfFaceName, "Times New Roman"); </P>

<P></P>

<P>switch (uID) { </P>

<P>case IDM_BOLD: </P>

<P>lf.lfWeight = FW_HEAVY; </P>

<P>break; </P>

<P></P>

<P>case IDM_ITALIC: </P>

<P>lf.lfItalic = TRUE; </P>

<P>break; </P>

<P></P>

<P>case IDM_UNDERLINE: </P>

<P>lf.lfUnderline = TRUE; </P>

<P>break; </P>

<P>} </P>

<P>return CreateFontIndirect(&amp;lf); </P>

<P>} </P>

<P></P>

<P>VOID WINAPI OnDestroy(HWND hwnd) </P>

<P>{ </P>

<P>HMENU hmenuBar = GetMenu(hwnd); </P>

<P>HMENU hmenuPopup; </P>

<P>MENUITEMINFO mii; </P>

<P>UINT uID; </P>

<P>MYITEM *pMyItem; </P>

<P></P>

<P>// Get the handle of the menu. </P>

<P></P>

<P>mii.fMask = MIIM_SUBMENU;     // information to get  </P>

<P>GetMenuItemInfo(hmenuBar, IDM_CHARACTER, FALSE, &amp;mii); </P>

<P>hmenuPopup = mii.hSubMenu; </P>

<P></P>

<P>// Free resources associated with each menu item. </P>

<P></P>

<P>for (uID = IDM_REGULAR; uID &lt;= IDM_UNDERLINE; uID++) { </P>

<P></P>

<P>// Get the item data. </P>

<P></P>

<P>mii.fMask = MIIM_DATA; </P>

<P>GetMenuItemInfo(hmenuPopup, uID, FALSE, &amp;mii); </P>

<P>pMyItem = (MYITEM *) mii.dwItemData; </P>

<P></P>

<P>// Destroy the font and free the item structure. </P>

<P></P>

<P>DeleteObject(pMyItem-&gt;hfont); </P>

<P>LocalFree(pMyItem); </P>

<P>} </P>

<P>} </P>

<P></P>

<P>VOID WINAPI OnMeasureItem(HWND hwnd, LPMEASUREITEMSTRUCT lpmis) </P>

<P>{ </P>

<P>MYITEM *pMyItem = (MYITEM *) lpmis-&gt;itemData; </P>

<P>HDC hdc = GetDC(hwnd); </P>

<P>HFONT hfntOld = SelectObject(hdc, pMyItem-&gt;hfont); </P>

<P>SIZE size; </P>

<P></P>

<P>GetTextExtentPoint32(hdc, pMyItem-&gt;szItemText, </P>

<P>pMyItem-&gt;cchItemText, &amp;size); </P>

<P></P>

<P>lpmis-&gt;itemWidth = size.cx; </P>

<P>lpmis-&gt;itemHeight = size.cy; </P>

<P></P>

<P>SelectObject(hdc, hfntOld); </P>

<P>ReleaseDC(hwnd, hdc); </P>

<P>} </P>

<P></P>

<P>VOID WINAPI OnDrawItem(HWND hwnd, LPDRAWITEMSTRUCT lpdis) </P>

<P>{ </P>

<P>MYITEM *pMyItem = (MYITEM *) lpdis-&gt;itemData; </P>

<P>COLORREF clrPrevText, clrPrevBkgnd; </P>

<P>HFONT hfntPrev; </P>

<P>int x, y; </P>

<P></P>

<P>// Set the appropriate foreground and background colors. </P>

<P></P>

<P>if (lpdis-&gt;itemState &amp; ODS_SELECTED) { </P>

<P>clrPrevText = SetTextColor(lpdis-&gt;hDC, </P>

<P>GetSysColor(COLOR_HIGHLIGHTTEXT)); </P>

<P>clrPrevBkgnd = SetBkColor(lpdis-&gt;hDC, </P>

<P>GetSysColor(COLOR_HIGHLIGHT)); </P>

<P>} </P>

<P>else { </P>

<P>clrPrevText = SetTextColor(lpdis-&gt;hDC, </P>

<P>GetSysColor(COLOR_MENUTEXT)); </P>

<P>clrPrevBkgnd = SetBkColor(lpdis-&gt;hDC, </P>

<P>GetSysColor(COLOR_MENU)); </P>

<P>} </P>

<P></P>

<P>// Determine where to draw and leave space for a check-mark. </P>

<P></P>

<P>x = lpdis-&gt;rcItem.left; </P>

<P>y = lpdis-&gt;rcItem.top; </P>

<P>x += LOWORD(GetMenuCheckMarkDimensions()); </P>

<P></P>

<P>// Select the font and draw the text. </P>

<P></P>

<P>hfntPrev = SelectObject(lpdis-&gt;hDC, pMyItem-&gt;hfont); </P>

<P>ExtTextOut(lpdis-&gt;hDC, x, y, ETO_OPAQUE, </P>

<P>&amp;lpdis-&gt;rcItem, pMyItem-&gt;szItemText, </P>

<P>pMyItem-&gt;cchItemText, NULL); </P>

<P></P>

<P>// Restore the original font and colors. </P>

<P></P>

<P>SelectObject(lpdis-&gt;hDC, hfntPrev); </P>

<P>SetTextColor(lpdis-&gt;hDC, clrPrevText); </P>

<P>SetBkColor(lpdis-&gt;hDC, clrPrevBkgnd); </P>

<P>} </P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

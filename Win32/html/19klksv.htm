<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Open and Save As Dialog Boxes</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="19klksv"></A><B>Open and Save As Dialog Boxes</B></P>

<P>The Open dialog box lets the user specify the drive, directory, and the name of a file or set of files to open. You create and display an Open dialog box by initializing an <A HREF="2wivnae.htm"><B>OPENFILENAME</B></A> structure and passing the structure to the <A HREF="fzgrjg.htm"><B>GetOpenFileName</B></A> function. </P>

<P>The Save As dialog box lets the user specify the drive, directory, and name of a file to save. You create and display a Save As dialog box by initializing an <A HREF="2wivnae.htm"><B>OPENFILENAME</B></A> structure and passing the structure to the <A HREF="182.5be.htm"><B>GetSaveFileName</B></A> function. </P>

<P>Beginning with Windows 95 and Windows NT version 4.0, there is a new version of the Open and Save As dialog boxes that provides user-interface features that are similar to the Windows Explorer. However, Win32 continues to support the old-style Open and Save As dialog boxes for applications that must maintain a user interface consistent with earlier versions of Windows.</P>

<P>In addition to the difference in appearance, the Explorer-style and old-style dialog boxes differ in their use of custom templates and hook procedures for customizing the dialog boxes. However, the Explorer-style and old-style dialog boxes have the same behavior for most basic operations, such as specifying a filename filter, validating the user's input, and getting the filename specified by the user. For more information about the Explorer-style and old-style dialog boxes, see Open and Save As Customization.The following illustration shows a typical Explorer-style Open dialog box.</P>

<P><IMG SRC="../images/bm11.gif" ALT="" BORDER=0></P>

<P>The following illustration shows a typical Explorer-style Save As dialog box.</P>

<P><IMG SRC="../images/bm12.gif" ALT="" BORDER=0></P>

<P>If the user specifies a filename and clicks the OK button, <A HREF="fzgrjg.htm"><B>GetOpenFileName</B></A> or <A HREF="182.5be.htm"><B>GetSaveFileName</B></A> returns TRUE. The buffer pointed to by the <B>lpstrFile</B> member of the <A HREF="2wivnae.htm"><B>OPENFILENAME</B></A> structure contains the full path and filename specified by the user. </P>

<P>If the user cancels the Open or Save As dialog box or an error occurs, the function returns FALSE. To determine the cause of the error, call the <A HREF="12gq63s.htm"><B>CommDlgExtendedError</B></A> function to retrieve the extended error value. If the <B>lpstrFile</B> buffer is too small to receive the full name, <B>CommDlgExtendedError</B> returns FNERR_BUFFERTOOSMALL and the first 2 bytes of the buffer pointed to by the <B>lpstrFile</B> member are set to an integer value specifying the size required to receive the full name. </P>

<P>Explorer style dialog boxes are only available to 32-bit applications. 16-bit applications cannot use thunking to display an Explorer-style dialog box. </P>

<P><B>Windows 95:</B> 32-bit applications that use the old-style dialog boxes do so using a thunk. This means that any pointer passed to your hook procedure is a non-persistent copy of the data. For example, the <B>OPENFILENAME</B> pointer passed in the WM_INITDIALOG message is not a pointer to the buffer that you originally specified. If you need to pass private data to your hook procedure, bundle it in a structure and store a pointer to the structure in the <B>lCustData</B> member of the <B>OPENFILENAME</B> structure. </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

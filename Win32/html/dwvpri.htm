<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Using Run-Time Dynamic Linking</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="dwvpri"></A><B>Using Run-Time Dynamic Linking</B></P>

<P>You can use the same DLL in both load-time and run-time dynamic linking. The following source code produces the same output as the load-time example in the previous section. The program uses the <A HREF="1vghbf8.htm"><B>LoadLibrary</B></A> function to get a handle of MYPUTS.DLL. If <B>LoadLibrary</B> succeeds, the program uses the returned handle in the <A HREF="c_pcn4.htm"><B>GetProcAddress</B></A> function to get the address of the DLL's myPuts function. After calling the DLL function, the program calls the <A HREF="3mcs_pm.htm"><B>FreeLibrary</B></A> function to unload the DLL. </P>

<P>The following example illustrates an important difference between run-time and load-time dynamic linking. If the MYPUTS.DLL file is not available, the application using load-time dynamic linking simply terminates. The run-time dynamic linking example, however, can respond to the error. </P>

<P>// File:  RUNTIME.C</P>

<P>// A simple program that uses LoadLibrary and   </P>

<P>// GetProcAddress to access myPuts from MYPUTS.DLL. </P>

<P></P>

<P>#include &lt;stdio.h&gt; </P>

<P>#include &lt;windows.h&gt; </P>

<P></P>

<P>typedef VOID (*MYPROC)(LPTSTR); </P>

<P></P>

<P>VOID main(VOID) </P>

<P>{ </P>

<P>HINSTANCE hinstLib; </P>

<P>MYPROC ProcAdd; </P>

<P>BOOL fFreeResult, fRunTimeLinkSuccess = FALSE; </P>

<P></P>

<P>// Get a handle to the DLL module.</P>

<P></P>

<P>hinstLib = LoadLibrary("myputs"); </P>

<P></P>

<P>// If the handle is valid, try to get the function address.</P>

<P></P>

<P>if (hinstLib != NULL) </P>

<P>{ </P>

<P>ProcAdd = (MYPROC) GetProcAddress(hinstLib, "myPuts"); </P>

<P></P>

<P>// If the function address is valid, call the function.</P>

<P></P>

<P>if (fRunTimeLinkSuccess = (ProcAdd != NULL)) </P>

<P>(ProcAdd) ("message via DLL function\n"); </P>

<P></P>

<P>// Free the DLL module.</P>

<P></P>

<P>fFreeResult = FreeLibrary(hinstLib); </P>

<P>} </P>

<P></P>

<P>// If unable to call the DLL function, use an alternative.</P>

<P></P>

<P>if (! fRunTimeLinkSuccess) </P>

<P>printf("message via alternative method\n"); </P>

<P>} </P>

<P></P>

<P>Because the program uses run-time dynamic linking, you should not link with the import library when creating the program module. </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

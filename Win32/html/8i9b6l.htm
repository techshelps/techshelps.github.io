<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Using Debugging Support</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="8i9b6l"></A><B>Using Debugging Support</B></P>

<P>The following example uses the <A HREF="2bhs1hv.htm"><B>WaitForDebugEvent</B></A> and <A HREF="1ims3jn.htm"><B>ContinueDebugEvent</B></A> functions to illustrate how a simple debugger might be organized. </P>

<P>DEBUG_EVENT DebugEv;                   // debugging event information  </P>

<P>DWORD dwContinueStatus = DBG_CONTINUE; // exception continuation </P>

<P></P>

<P>for(;;) </P>

<P>{ </P>

<P></P>

<P>// Wait for a debugging event to occur. The second parameter indicates </P>

<P>// that the function does not return until a debugging event occurs. </P>

<P></P>

<P>WaitForDebugEvent(&amp;DebugEv, INFINITE); </P>

<P></P>

<P>// Process the debugging event code. </P>

<P></P>

<P>switch (DebugEv.dwDebugEventCode) </P>

<P>{ </P>

<P>case EXCEPTION_DEBUG_EVENT: </P>

<P>// Process the exception code. When handling </P>

<P>// exceptions, remember to set the continuation </P>

<P>// status parameter (dwContinueStatus). This value </P>

<P>// is used by the ContinueDebugEvent function. </P>

<P></P>

<P>switch (DebugEv.u.Exception.ExceptionRecord.ExceptionCode) </P>

<P>{ </P>

<P>case EXCEPTION_ACCESS_VIOLATION: </P>

<P>// First chance: Pass this on to the kernel. </P>

<P>// Last chance: Display an appropriate error. </P>

<P></P>

<P>case EXCEPTION_BREAKPOINT: </P>

<P>// First chance: Display the current </P>

<P>// instruction and register values. </P>

<P></P>

<P>case EXCEPTION_DATATYPE_MISALIGNMENT: </P>

<P>// First chance: Pass this on to the kernel. </P>

<P>// Last chance: Display an appropriate error. </P>

<P></P>

<P>case EXCEPTION_SINGLE_STEP: </P>

<P>// First chance: Update the display of the </P>

<P>// current instruction and register values. </P>

<P></P>

<P>case DBG_CONTROL_C: </P>

<P>// First chance: Pass this on to the kernel. </P>

<P>// Last chance: Display an appropriate error. </P>

<P></P>

<P>// Handle other exceptions. </P>

<P>} </P>

<P></P>

<P>case CREATE_THREAD_DEBUG_EVENT: </P>

<P>// As needed, examine or change the thread's registers </P>

<P>// with the GetThreadContext and SetThreadContext functions; </P>

<P>// and suspend and resume thread execution with the </P>

<P>// SuspendThread and ResumeThread functions. </P>

<P></P>

<P>case CREATE_PROCESS_DEBUG_EVENT: </P>

<P>// As needed, examine or change the registers of the </P>

<P>// process's initial thread with the GetThreadContext and </P>

<P>// SetThreadContext functions; read from and write to the </P>

<P>// process's virtual memory with the ReadProcessMemory and </P>

<P>// WriteProcessMemory functions; and suspend and resume </P>

<P>// thread execution with the SuspendThread and ResumeThread </P>

<P>// functions. </P>

<P></P>

<P>case EXIT_THREAD_DEBUG_EVENT: </P>

<P>// Display the thread's exit code. </P>

<P></P>

<P>case EXIT_PROCESS_DEBUG_EVENT: </P>

<P>// Display the process's exit code. </P>

<P></P>

<P>case LOAD_DLL_DEBUG_EVENT: </P>

<P>// Read the debugging information included in the newly </P>

<P>// loaded DLL. </P>

<P></P>

<P>case UNLOAD_DLL_DEBUG_EVENT: </P>

<P>// Display a message that the DLL has been unloaded. </P>

<P></P>

<P>case OUTPUT_DEBUG_STRING_EVENT: </P>

<P>// Display the output debugging string. </P>

<P></P>

<P>} </P>

<P></P>

<P>// Resume executing the thread that reported the debugging event. </P>

<P></P>

<P>ContinueDebugEvent(DebugEv.dwProcessId, </P>

<P>DebugEv.dwThreadId, dwContinueStatus); </P>

<P></P>

<P>} </P>

<P></P>

</BODY>
</HTML>

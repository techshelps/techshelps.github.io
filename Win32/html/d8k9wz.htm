<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Creating a Class Menu</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="d8k9wz"></A><B>Creating a Class Menu</B></P>

<P>The following example shows how to create a class menu for an application, create a window that uses the class menu, and process menu commands in the window procedure. </P>

<P>Following is the relevant portion of the application's header file: </P>

<P>// Menu-template resource identifier  </P>

<P></P>

<P>#define IDM_MYMENURESOURCE   3</P>

<P>Following are the relevant portions of the application itself:</P>

<P>HINSTANCE hinst;  </P>

<P></P>

<P>int APIENTRY WinMain(hinstance, hPrevInstance, lpCmdLine, nCmdShow) </P>

<P>HINSTANCE hinstance; </P>

<P>HINSTANCE hPrevInstance; </P>

<P>LPSTR lpCmdLine; </P>

<P>int nCmdShow; </P>

<P>{ </P>

<P>MSG msg;        // message </P>

<P>WNDCLASS wc;    // windowclass data </P>

<P>HWND hwnd;      // handle to the main window </P>

<P></P>

<P>// Create the window class for the main window. Specify </P>

<P>// the identifier of the menu-template resource as the </P>

<P>// lpszMenuName member of the WNDCLASS structure to create </P>

<P>// the class menu. </P>

<P></P>

<P>wc.style = 0; </P>

<P>wc.lpfnWndProc = (WNDPROC) MainWndProc; </P>

<P>wc.cbClsExtra = 0; </P>

<P>wc.cbWndExtra = 0; </P>

<P>wc.hInstance = hinstance; </P>

<P>wc.hIcon = LoadIcon(NULL, IDI_APPLICATION); </P>

<P>wc.hCursor = LoadCursor(NULL, IDC_ARROW); </P>

<P>wc.hbrBackground = GetStockObject(WHITE_BRUSH); </P>

<P>wc.lpszMenuName =  MAKEINTRESOURCE(IDM_MYMENURESOURCE); </P>

<P>wc.lpszClassName = "MainWClass"; </P>

<P></P>

<P>if (!RegisterClass(&amp;wc)) </P>

<P>return FALSE; </P>

<P></P>

<P>hinst = hinstance; </P>

<P></P>

<P>// Create the main window. Set the hmenu parameter to NULL so </P>

<P>// that Windows uses the class menu for the window. </P>

<P></P>

<P>hwnd = CreateWindow("MainWClass", "Sample Application", </P>

<P>WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, CW_USEDEFAULT, </P>

<P>CW_USEDEFAULT, CW_USEDEFAULT, NULL, NULL, hinstance, </P>

<P>NULL); </P>

<P></P>

<P>if (hwnd == NULL) </P>

<P>return FALSE; </P>

<P></P>

<P>// Make the window visible and send a WM_PAINT message to the </P>

<P>// window procedure. </P>

<P></P>

<P>ShowWindow(hwnd, nCmdShow); </P>

<P>UpdateWindow(hwnd); </P>

<P></P>

<P>// Start the main message loop. </P>

<P></P>

<P>while (GetMessage(&amp;msg, NULL, 0, 0)) { </P>

<P>TranslateMessage(&amp;msg); </P>

<P>DispatchMessage(&amp;msg); </P>

<P>} </P>

<P>return msg.wParam; </P>

<P>UNREFERENCED_PARAMETER(hPrevInstance); </P>

<P>} </P>

<P></P>

<P></P>

<P>LRESULT APIENTRY MainWndProc(hwnd, uMsg, wParam, lParam) </P>

<P>HWND hwnd; </P>

<P>UINT uMsg; </P>

<P>WPARAM wParam; </P>

<P>LPARAM lParam; </P>

<P>{ </P>

<P></P>

<P>switch (uMsg) { </P>

<P>. </P>

<P>. // Process other window messages. </P>

<P>. </P>

<P></P>

<P>case WM_COMMAND: </P>

<P></P>

<P>// Test for the identifier of a command item. </P>

<P></P>

<P>switch(LOWORD(wParam)) { </P>

<P>case IDM_FI_OPEN: </P>

<P>DoFileOpen();   // application-defined </P>

<P>break; </P>

<P></P>

<P>case IDM_FI_CLOSE: </P>

<P>DoFileClose();  // application-defined </P>

<P>break; </P>

<P>. </P>

<P>. // Process other menu commands. </P>

<P>. </P>

<P></P>

<P>default: </P>

<P>break; </P>

<P></P>

<P>} </P>

<P>return 0; </P>

<P></P>

<P>. </P>

<P>. // Process other window messages. </P>

<P>. </P>

<P></P>

<P>default: </P>

<P>return DefWindowProc(hwnd, uMsg, wParam, lParam); </P>

<P>} </P>

<P>return NULL; </P>

<P>} </P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

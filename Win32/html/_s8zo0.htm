<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Using Thread Local Storage in a Dynamic-Link Library</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="_s8zo0"></A><B>Using Thread Local Storage in a Dynamic-Link Library</B></P>

<P>This section shows the use of a DLL entry-point function to set up a thread local storage (TLS) index to provide private storage for each thread of a multithreaded process. </P>

<P>The entry-point function uses the <A HREF="qzkzro.htm"><B>TlsAlloc</B></A> function to allocate a TLS index whenever a process loads the DLL. Each thread can then use this index to store a pointer to its own block of memory. </P>

<P>When the entry-point function is called with the DLL_PROCESS_ATTACH value, the code performs the following actions: </P>

<P>1.Uses the <B>TlsAlloc</B> function to allocate a TLS index. </P>

<P>2.Allocates a block of memory to be used exclusively by the initial thread of the process. </P>

<P>3.Uses the TLS index in a call to the <A HREF="d9lju_.htm"><B>TlsSetValue</B></A> function to store a pointer to the allocated memory. </P>

<P></P>

<P>Each time the process creates a new thread, the entry-point function is called with the DLL_THREAD_ATTACH value. The entry-point function then allocates a block of memory for the new thread and stores a pointer to it by using the TLS index. Each thread can use the TLS index in a call to <A HREF="t9hgy4.htm"><B>TlsGetValue</B></A> to retrieve the pointer to its own block of memory. </P>

<P>When a thread terminates, the entry-point function is called with the DLL_THREAD_DETACH value and the memory for that thread is freed. When a process terminates, the entry-point function is called with the DLL_PROCESS_DETACH value and the memory referenced by the pointer in the TLS index is freed. </P>

<P>The TLS index is stored in a global variable, making it available to all of the DLL functions. The following example assumes that the DLL's global data is not shared, because the TLS index is not necessarily the same for each process that loads the DLL. </P>

<P>static DWORD dwTlsIndex; // address of shared memory</P>

<P></P>

<P>// DllMain() is the entry-point function for this DLL. </P>

<P></P>

<P>BOOL DllEntryPoint(HINSTANCE hinstDLL,  // DLL module handle</P>

<P>DWORD fdwReason,                    // reason called</P>

<P>LPVOID lpvReserved)                 // reserved</P>

<P>{ </P>

<P>LPVOID lpvData; </P>

<P>BOOL fIgnore; </P>

<P></P>

<P>switch (fdwReason) { </P>

<P></P>

<P>// The DLL is loading due to process </P>

<P>// initialization or a call to LoadLibrary. </P>

<P></P>

<P>case DLL<U>_</U>PROCESS<U>_</U>ATTACH: </P>

<P></P>

<P>// Allocate a TLS index.</P>

<P></P>

<P>if ((dwTlsIndex = TlsAlloc()) == 0xFFFFFFFF) </P>

<P>return FALSE; </P>

<P></P>

<P>// No break: Initialize the index for first thread.</P>

<P></P>

<P>// The attached process creates a new thread. </P>

<P></P>

<P>case DLL<U>_</U>THREAD<U>_</U>ATTACH: </P>

<P></P>

<P>// Initialize the TLS index for this thread.</P>

<P></P>

<P>lpvData = (LPVOID) LocalAlloc(LPTR, 256); </P>

<P>if (lpvData != NULL) </P>

<P>fIgnore = TlsSetValue(dwTlsIndex, lpvData); </P>

<P></P>

<P>break; </P>

<P></P>

<P>// The thread of the attached process terminates.</P>

<P></P>

<P>case DLL<U>_</U>THREAD<U>_</U>DETACH: </P>

<P></P>

<P>// Release the allocated memory for this thread.</P>

<P></P>

<P>lpvData = TlsGetValue(dwTlsIndex); </P>

<P>if (lpvData != NULL) </P>

<P>LocalFree((HLOCAL) lpvData); </P>

<P></P>

<P>break; </P>

<P></P>

<P>// The DLL unloading due to process termination or call to FreeLibrary.  </P>

<P></P>

<P>case DLL<U>_</U>PROCESS<U>_</U>DETACH: </P>

<P></P>

<P>// Release the allocated memory for this thread.</P>

<P></P>

<P>lpvData = TlsGetValue(dwTlsIndex); </P>

<P>if (lpvData != NULL) </P>

<P>LocalFree((HLOCAL) lpvData); </P>

<P></P>

<P>// Release the TLS index.</P>

<P></P>

<P>TlsFree(dwTlsIndex); </P>

<P>break; </P>

<P></P>

<P>default: </P>

<P>break; </P>

<P>} </P>

<P></P>

<P>return TRUE; </P>

<P>UNREFERENCED_PARAMETER(hinstDLL); </P>

<P>UNREFERENCED_PARAMETER(lpvReserved); </P>

<P>} </P>

<P></P>

<P>When a process uses load-time linking with this DLL, the entry-point function is sufficient to manage the thread local storage. Problems can occur with a process that uses run-time linking because the entry-point function is not called for threads that exist before the <A HREF="1vghbf8.htm"><B>LoadLibrary</B></A> function is called, so TLS memory is not allocated for these threads. The following example solves this problem by checking the value returned by the <A HREF="t9hgy4.htm"><B>TlsGetValue</B></A> function and allocating memory if the value indicates that the TLS slot for this thread is not set. </P>

<P>LPVOID lpvData;  </P>

<P></P>

<P>// Retrieve a data pointer for the current thread.</P>

<P></P>

<P>lpvData = TlsGetValue(dwTlsIndex); </P>

<P></P>

<P>// If NULL, allocate memory for this thread.</P>

<P></P>

<P>if (lpvData == NULL) { </P>

<P>lpvData = (LPVOID) LocalAlloc(LPTR, 256); </P>

<P>if (lpvData != NULL) </P>

<P>TlsSetValue(dwTlsIndex, lpvData); </P>

<P>} </P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>VirtualFreeEx [New - Windows NT]</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME=".6dc7e"></A><B>VirtualFreeEx  <A HREF="2g940pq.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="7gqv3r.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="9cqndc.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>[New - Windows NT]</P>

<P>The <B>VirtualFreeEx</B> function releases, decommits, or both, a region of memory within the virtual address space of a specified process. </P>

<P>The difference between the <B>VirtualFreeEx</B> function and the <A HREF="8dcrwp.htm"><B>VirtualFree</B></A> function is that <B>VirtualFree</B> frees memory within the address space of the calling process, while <B>VirtualFreeEx</B> lets you specify a process. </P>

<P><B>BOOL VirtualFreeEx(</B></P>

<TABLE cols=2 width=457>

<TR VALIGN="top">
<TD width=40%><B>HANDLE</B> <I>hProcess</I><B>,</B></TD>
<TD width=60%>// process within which to free memory  </TD>
</TR>

<TR VALIGN="top">
<TD width=40%><B>    LPVOID</B> <I>lpAddress</I><B>,</B></TD>
<TD width=60%>// starting address of memory region to free </TD>
</TR>

<TR VALIGN="top">
<TD width=40%><B>    DWORD</B> <I>dwSize</I><B>,</B></TD>
<TD width=60%>// size, in bytes, of memory region to free</TD>
</TR>

<TR VALIGN="top">
<TD width=40%><B>    DWORD</B> <I>dwFreeType</I> </TD>
<TD width=60%>// type of free operation </TD>
</TR>

<TR VALIGN="top">
<TD width=40%><B>   );</B></TD>
<TD width=60%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hProcess</I></P>

<P>Handle to a process. The function frees memory within the virtual address space of this process. </P>

<P>You must have PROCESS_VM_OPERATION access to this process. If you do not, the function fails.</P>

<P><I>lpAddress</I></P>

<P>Pointer to the starting address of the region of memory to free. </P>

<P>If the MEM_RELEASE flag is set in the <I>dwFreeType</I> parameter, <I>lpAddress</I> must be the base address returned by the <A HREF="9dv9k9.htm"><B>VirtualAllocEx</B></A> function when the region was reserved. </P>

<P><I>dwSize</I></P>

<P>Specifies the size, in bytes, of the region of memory to free.</P>

<P>If the MEM_RELEASE flag is set in the <I>dwFreeType</I> parameter, <I>dwSize</I> must be zero. The function frees the entire region that was reserved in the initial allocation call to <B>VirtualAllocEx</B>.</P>

<P>If the MEM_DECOMMIT flag is set, the function decommits all memory pages that contain one or more bytes in the range from the <I>lpAddress</I> parameter to (<I>lpAddress</I>+<I>dwSize</I>). This means, for example, that a 2-byte region of memory that straddles a page boundary causes both pages to be decommitted. </P>

<P>The function decommits the entire region that was reserved by <A HREF="9dv9k9.htm"><B>VirtualAllocEx</B></A>. If the following three conditions are met:</P>

<P>·the MEM_DECOMMIT flag is set</P>

<P>·<I>lpAddress</I> is the base address returned by the <B>VirtualAllocEx</B> function when the region was reserved</P>

<P>·<I>dwSize</I> is zero </P>

<P></P>

<P>The entire region the enters the reserved state. </P>

<P><I>dwFreeType</I></P>

<P>Set of bit flags that specifies the type of free operation. You must set one of the following two flags: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=33%><B>Flag</B></TD>
<TD width=67%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=33%>MEM_DECOMMIT</TD>
<TD width=67%>The function decommits the specified region of pages. The pages enter the reserved state. </TD>
</TR>

<TR VALIGN="top">
<TD width=33%>&nbsp;</TD>
<TD width=67%>The function does not fail if you attempt to decommit an uncommitted page. This means that you can decommit a range of pages without first determining their current commitment state.</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>MEM_RELEASE</TD>
<TD width=67%>The function releases the specified region of pages. The pages enter the free state.
<P>If you specify this flag, <I>dwSize</I> must be zero, and <I>lpAddress</I> must point to the base address returned by the <A HREF="9dv9k9.htm"><B>VirtualAllocEx</B></A> function when the region was reserved. The function fails if either of these conditions is not met.</P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>&nbsp;</TD>
<TD width=67%>If any pages in the region are currently committed, the function first decommits and then releases them. 
<P>The function does not fail if you attempt to release pages that are in different states, some reserved and some committed. This means that you can release a range of pages without first determining their current commitment state.  </P>
</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is a nonzero value.</P>

<P>If the function fails, the return value is zero. To get extended error information, call <A HREF="11c2vs7.htm"><B>GetLastError</B></A>. </P>

<P><B>Remarks</B></P>

<P>Each page of memory in a process's virtual address space is in one of three states: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=18%><B>State</B></TD>
<TD width=82%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=18%>Free</TD>
<TD width=82%>The page is neither committed nor reserved. The page is not accessible to the process. Attempting to read from or write to a free page results in an access violation exception.
<P>You can use the <B>VirtualFreeEx</B> function to put reserved or committed memory pages into the free state. </P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=18%>Reserved</TD>
<TD width=82%>The page is reserved. The range of addresses cannot be used by other allocation functions. The page is not accessible and has no physical storage associated with it.  Attempting to read from or write to a free page results in an access violation exception.
<P>You can use the <B>VirtualFreeEx</B> function to put committed memory pages into the reserved state, and to put reserved memory pages into the free state. </P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=18%>Committed</TD>
<TD width=82%>The page is committed. Physical storage in memory or in the paging file on disk is allocated for the page, and access is controlled by a protection code. 
<P>The operating system initializes and loads each committed page into physical memory only at the first attempt to read from or write to that page. </P>

<P>When a process terminates, the operating system releases all storage for committed pages. </P>

<P>You can use the <A HREF="9dv9k9.htm"><B>VirtualAllocEx</B></A> function to put committed memory pages into either the reserved or free state. </P>
</TD>
</TR>
</TABLE><BR>

<P></P>

<P>The <B>VirtualFreeEx</B> function can perform the following operations: </P>

<P>·Decommit a region of committed or uncommitted pages. After this operation, the pages are in the reserved state.</P>

<P>·Release a region of reserved pages. After this operation, the pages are in the free state.</P>

<P>·Decommit and release a region of committed or uncommitted pages. After this operation, the pages are in the free state.</P>

<P></P>

<P>The <B>VirtualFreeEx</B> function can decommit a range of pages that are in different states, some committed and some uncommitted. This means that you can decommit a range of pages without first determining the current commitment state of each page. Decommitting a page releases its physical storage, either in memory or in the paging file on disk. </P>

<P>If a page is decommitted but not released, its state changes to reserved. You can subsequently call <A HREF="9dv9k9.htm"><B>VirtualAllocEx</B></A> to commit it, or <B>VirtualFreeEx </B>to release it. Attempting to read from or write to a reserved page results in an access violation exception. </P>

<P>The <B>VirtualFreeEx</B> function can release a range of pages that are in different states, some reserved and some committed. This means that you can release a range of pages without first determining the current commitment state of each page.  The entire range of pages originally reserved by the <B>VirtualAllocEx</B> function must be released at the same time. </P>

<P>If a page is released, its state changes to free, and it is available for subsequent allocation operations. Attempting to read from or write to a free page results in an access violation exception. </P>

<P><B>See Also</B></P>

<P><A HREF="f12w9..htm"><B>GlobalAlloc</B></A>, <A HREF="dvjhb..htm"><B>GlobalFree</B></A>, <A HREF="1m7v8go.htm"><B>VirtualAlloc</B></A>, <A HREF="9dv9k9.htm"><B>VirtualAllocEx</B></A>, <A HREF="8dcrwp.htm"><B>VirtualFree</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

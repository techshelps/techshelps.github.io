<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>Vector Object Values</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="jlncv."></A><B>Vector Object Values</B></P>

<P></P>

<P>SO_ARC</P>

<P>Draws an arc. <I>dwDataSize</I> must be 4* <B>sizeof</B>(<B>SOPOINT</B>), and <I>pData</I> must be the address of four <B>SOPOINT</B> structures.</P>

<P>SO_ARCCLOCKWISE</P>

<P>Draws an arc in the clockwise direction. <I>dwDataSize</I> must be 4* <B>sizeof</B>(<B>SOPOINT</B>), and <I>pData</I> must be the address of four <B>SOPOINT</B> structures. </P>

<P>SO_ARCANGLE</P>

<P>Draws an arc by defining the angles of the two points on the ellipse that locate the start and end of the arc. <I>dwDataSize</I> must be <B>sizeof</B>(<B>SOARCINFO</B>), and <I>pData</I> must be the address of a <B>SOARCINFO</B> structure that defines the arc. </P>

<P>SO_ARCANGLECLOCKWISE</P>

<P>Draws an arc in the clockwise direction by defining the angles of the two points on the ellipse that locate the start and end of the arc. <I>dwDataSize</I> must be <B>sizeof</B>(<B>SOARCINFO</B>), and <I>pData</I> must be the address of a <B>SOARCINFO</B> structure.</P>

<P>SO_CHORD</P>

<P>Draws a chord. <I>dwDataSize</I> must be 4 * <B>sizeof</B>(<B>SOPOINT</B>), and <I>pData</I> must be the address of four <B>SOPOINT</B> structures.</P>

<P>SO_CHORDANGLE</P>

<P>Draws a chord by defining the angles of the two points on the ellipse that locate the start and end of the chord. <I>dwDataSize</I> must be <B>sizeof</B>(<B>SOARCINFO</B>), and <I>pData</I> must be the address of a <B>SOARCINFO</B> structure that defines the chord in terms of the arc located on the chord. </P>

<P>SO_TEXTINRECT</P>

<P>Draws text in a rectangle. <I>dwDataSize</I> must be <B>sizeof</B>(<B>SOTEXTINRECT</B>) added to the length of the text string, and <I>pData</I> must be the address of a <B>SOTEXTINRECT</B> structure followed by the text string.</P>

<P>SO_ELLIPSE</P>

<P>Draws an ellipse. <I>dwDataSize</I> must be 2 * <B>sizeof</B>(<B>SOPOINT</B>), and <I>pData</I> must be the address of two <B>SOPOINT</B> structures.</P>

<P>SO_FLOODFILL</P>

<P>Fills the area with the given color. <I>dwDataSize</I> must be <B>sizeof</B>(<B>SOPOINT</B>) added to <B>sizeof</B>(<B>SOCOLORREF</B>), and <I>pData</I> must be the address of a variable containing the coordinates of the point to start at followed by the RGB color value to use to fill the area.</P>

<P>SO_LINE</P>

<P>Draws a line from point 1 to point 2 using the current pen. <I>dwDataSize</I> must be 2 * <B>sizeof</B>(<B>SOPOINT</B>), and <I>pData</I> must be the address of two <B>SOPOINT</B> structures. </P>

<P>SO_PIE</P>

<P>Draws a pie shape. <I>dwDataSize</I> must be 4 * <B>sizeof</B>(<B>SOPOINT</B>), and <I>pData</I> must be the address of four <B>SOPOINT</B> structures.</P>

<P>SO_PIEANGLE</P>

<P>Draws a pie by defining the angles of the two points on the ellipse that locate the start and end of the pie. <I>dwDataSize</I> must be <B>sizeof</B>(<B>SOARCINFO</B>), and <I>pData</I> must be the address of a <B>SOARCINFO</B> structure that defines the pie in terms of the arc located on the pie. </P>

<P>SO_STARTPOLY</P>

<P>Starts drawing of a polygon. <I>dwDataSize</I> must be <B>sizeof</B>(<B>SOPOLYINFO</B>), and <I>pData</I> must be the address of a <B>SOPOLYINFO</B> structure.</P>

<P>SO_POINTS</P>

<P>Specifies vertices of a polygon. <I>dwDataSize</I> must be N * <B>sizeof</B>(<B>SOPOINT</B>), and <I>pData</I> must be the address of consecutively stored <B>SOPOINT</B> structures. At most, <B>SOMAXPOINTS</B> can be passed in a single SO_POINTS object. Multiple SO_POINTS objects can be generated to define all of the points associated with a polygon object. The number of points defined in SO_STARTPOLY must be defined using SO_POINTS before the object is closed with SO_ENDPOLY.</P>

<P>SO_ENDPOLY</P>

<P>Ends drawing of a polygon. <I>dwDataSize</I> must be zero, and <I>pData</I> must be NULL. </P>

<P>SO_RECTANGLE</P>

<P>Draws a rectangle. <I>dwDataSize</I> must be 2 * <B>sizeof</B>(<B>SOPOINT</B>), and <I>pData</I> must be the address of two <B>SOPOINT</B> structures.</P>

<P>SO_ROUNDRECT</P>

<P>Draws a rectangle with rounded corners. <I>dwDataSize</I> must be 3 * <B>sizeof</B>(<B>SOPOINT</B>), and <I>pData</I> must be address of the three <B>SOPOINT</B> structures.</P>

<P>SO_SETPIXEL</P>

<P>Sets the color of a pixel. <I>dwDataSize</I> must be <B>sizeof</B>(<B>SOPOINT</B>) added to <B>sizeof</B>(<B>SOCOLORREF</B>), and <I>pData</I> must be the address of a variable containing the pixel point followed by the RGB color value to set.</P>

<P>SO_TEXTATPOINT</P>

<P>Draws text at the given point. <I>dwDataSize</I> must be <B>sizeof</B>(<B>SOTEXTATPOINT</B>) added to the length of the text string, and <I>pData</I> must be the address of a <B>SOTEXTATPOINT</B> structure followed by the text string.</P>

<P>SO_TEXTATARCANGLE</P>

<P>Draws text at the given location. <I>dwDataSize</I> must be <B>sizeof</B>(<B>SOTEXTATARCANGLE</B>) added to the length of the text string, and <I>pData</I> must be the address of a <B>SOTEXTATARCANGLE</B> structure followed by the text string.</P>

<P>SO_BEGINPATH</P>

<P>Starts the definition of a path. <I>dwDataSize</I> must be <B>sizeof</B>(<B>SOPATHINFO</B>) added to <B>GroupInfo.nTransforms</B>*<B>sizeof</B>(<B>SOTRANSFORM</B>), and <I>pData</I> must be the address of a <B>SOPATHINFO</B> structure followed by the number of <B>SOTRANSFORM</B> structures defined in the <B>nTransforms</B> member of the <B>SOPATHINFO</B> structure. The transformations will occur to all objects in the path in the order supplied. For more information, see the SO_OBJECTTRANSFORM vector attribute value.</P>

<P>This item is used to begin the definition of a path. Paths are a collection of points connected by lines that form opened or closed objects. Multiple subpaths may be created using SO_CLOSESUBPATH while defining a path. Note that the current object and group transformations will also apply during creation of a path. This allows maximum flexibility with transforming paths. Any object can be rendered to create the path. However, due to current limitations, text objects will not be added to the path. Multiple levels of paths are also allowed.</P>

<P>SO_ENDPATH</P>

<P>Ends the definition of a path. <I>dwDataSize</I> must be zero, and <I>pData</I> must be NULL.</P>

<P>SO_CLOSESUBPATH</P>

<P>Closes the current subpath. <I>dwDataSize</I> must be zero, and <I>pData</I> must be NULL.</P>

<P>SO_DRAWPATH</P>

<P>Strokes, fills, or both strokes and fills the current path with the current pen and brush. Since the group, path, and object transformations were applied when the path was created, they are not applied again. <I>dwDataSize</I> must be <B>sizeof</B>(<B>WORD</B>), and <I>pData</I> must be the address of a variable containing the SODP_STROKE or SODP_FILL value, or both.</P>

<P>SO_BEGINGROUP</P>

<P>Starts the definition of a group. <I>dwDataSize</I> must be <B>sizeof</B>(<B>SOGROUPINFO</B>) added to <B>GroupInfo.nTransforms</B>*<B>sizeof</B>(<B>SOTRANSFORM</B>), and <I>pData</I> must be the address of a <B>SOGROUPINFO</B> structure followed by the number of <B>SOTRANSFORM</B> structures defined in the <B>nTransforms</B> member of the <B>SOGROUPINFO</B> structure. The transformations will occur to all objects in the group in the order supplied. For more information, see the SO_OBJECTTRANSFORM vector attribute value.</P>

<P>SO_ENDGROUP</P>

<P>Ends the definition of a group. <I>dwDataSize</I> must be zero, and <I>pData</I> must be NULL. </P>

<P>SO_CPSET</P>

<P>Moves the current pen position to this point. <I>dwDataSize</I> must be <B>sizeof</B>(<B>SOPOINT</B>), and <I>pData</I> must be the address of the variable containing the point.</P>

<P>SO_CPLINE</P>

<P>Draws a line from the current pen position. <I>dwDataSize</I> must be <B>sizeof</B>(<B>SOPOINT</B>), and <I>pData</I> must be the address of a variable containing the point to draw to.</P>

<P>SO_CPRECTANGLE</P>

<P>Draws a rectangle starting at the current pen position. <I>dwDataSize</I> must be <B>sizeof</B>(<B>SOPOINT</B>), and <I>pData</I> must be the address of a variable containing the point to be the opposite corner of the rectangle.</P>

<P>SO_CPELLIPSE</P>

<P>Draws an ellipse around the current point with an x- and y-radius described by the <B>SOPOINT</B> data. <I>dwDataSize</I> must be <B>sizeof</B>(<B>SOPOINT</B>), and <I>pData</I> must be the address of a variable containing the x- and y-radius values.</P>

<P>SO_CPARCTRIPLE</P>

<P>Draws a circle arc from the current point through the first point and ending at the second point. <I>dwDataSize</I> must be 2*(<B>sizeof</B>(<B>SOPOINT</B>), and <I>pData</I> must be the address of two <B>SOPOINT</B> structures. </P>

<P>SO_CPARCANGLE</P>

<P>Draws an arc from the current point pivoting around the center point of the specified sweep angle. <I>dwDataSize</I> must be <B>sizeof</B>(<B>SOCPARCANGLE</B>), and <I>pData</I> must be the address of a <B>SOCPARCANGLE</B> structure that gives the center point of the arc and the sweep angle. </P>

<P>SO_CPPIEANGLE</P>

<P>Draws a pie with the current position as the center and with the given start and sweep angles. <I>dwDataSize</I> must be <B>sizeof</B>(<B>SOCPPIECANGLE</B>), and <I>pData</I> must be the address of a <B>SOCPPIEANGLE</B> structure that gives the radius of the circle.</P>

<P>SO_BEGINSYMBOL</P>

<P>Starts the definition of a symbol. A symbol is collection of vector commands that together make up a single symbol. Symbols are considered in the wrapping algorithm of frame text. <I>dwDataSize</I> must be <B>sizeof</B>(<B>SORECT</B>), and <I>pData</I> must be the address of a <B>SORECT</B> structure that identifies the bounding rectangle of all commands used within the symbol. </P>

<P>SO_ENDSYMBOL</P>

<P>Ends the definition of a symbol. <I>dwDataSize</I> must be zero, and <I>pData</I> must be NULL.</P>

<P>SO_BEGINTEXTFRAME</P>

<P>Starts the definition of a text frame. A text frame is used in conjunction with SO_TEXTINPARA to wrap text within a frame. Text is wrapped according to the SO_PARAINDENTS vector attribute value. Symbols are included in the wrapping algorithm. <I>dwDataSize</I> must be <B>sizeof</B>(<B>SORECT</B>), and <I>pData</I> must be the address of a <B>SORECT</B> structure that identifies the bounding rectangle of the text frame. </P>

<P>SO_ENDTEXTFRAME</P>

<P>Ends the definition of a text frame. <I>dwDataSize</I> must be zero, and <I>pData</I> must be NULL.</P>

<P>SO_TEXTINPARA</P>

<P>Draws the text string in the current font and text attributes at the current wrap location. The wrap location is moved by the text extent. Any words that would extend beyond the right indent of the frame are wrapped. This object is only valid within a text frame. <I>dwDataSize</I> must be <B>sizeof</B>(<B>INT</B>) added to the length of the text string, and <I>pData</I> must be the address of a integer variable containing the size of the text string that follows. </P>

<P>SO_PARAEND</P>

<P>Ends a paragraph. <I>dwDataSize</I> must be zero, and <I>pData</I> must be NULL.</P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>BITMAPINFOHEADER</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="05za4g"></A><B>BITMAPINFOHEADER  <A HREF="e.roc8.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="15l9v8p.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="1brk.z3.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>BITMAPINFOHEADER</B> structure contains information about the dimensions and color format of a device-independent bitmap (DIB). </P>

<P>typedef struct tagBITMAPINFOHEADER{ // bmih  </P>

<P>DWORD  biSize; </P>

<P>LONG   biWidth; </P>

<P>LONG   biHeight; </P>

<P>WORD   biPlanes; </P>

<P>WORD   biBitCount </P>

<P>DWORD  biCompression; </P>

<P>DWORD  biSizeImage; </P>

<P>LONG   biXPelsPerMeter; </P>

<P>LONG   biYPelsPerMeter; </P>

<P>DWORD  biClrUsed; </P>

<P>DWORD  biClrImportant; </P>

<P>} BITMAPINFOHEADER; </P>

<P></P>

<P><B>Members</B></P>

<P><B>biSize</B></P>

<P>Specifies the number of bytes required by the structure. </P>

<P><B>biWidth</B></P>

<P>Specifies the width of the bitmap, in pixels. </P>

<P><B>biHeight</B></P>

<P>Specifies the height of the bitmap, in pixels. If <B>biHeight</B> is positive, the bitmap is a bottom-up DIB and its origin is the lower left corner. If <B>biHeight</B> is negative, the bitmap is a top-down DIB and its origin is the upper left corner. </P>

<P><B>biPlanes</B></P>

<P>Specifies the number of planes for the target device. This value must be set to 1. </P>

<P><B>biBitCount</B></P>

<P>Specifies the number of bits per pixel. This value must be 1, 4, 8, 16, 24, or 32. </P>

<P><B>biCompression</B></P>

<P>Specifies the type of compression for a compressed bottom-up bitmap (top-down DIBs cannot be compressed). It can be one of the following values: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=27%><B>Value</B></TD>
<TD width=73%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=27%>BI_RGB</TD>
<TD width=73%>An uncompressed format.</TD>
</TR>

<TR VALIGN="top">
<TD width=27%>BI_RLE8</TD>
<TD width=73%>A run-length encoded (RLE) format for bitmaps with 8 bits per pixel. The compression format is a two-byte format consisting of a count byte followed by a byte containing a color index. For more information, see the following Remarks section.</TD>
</TR>

<TR VALIGN="top">
<TD width=27%>BI_RLE4</TD>
<TD width=73%>An RLE format for bitmaps with 4 bits per pixel. The compression format is a two-byte format consisting of a count byte followed by two word-length color indices. For more information, see the following Remarks section.</TD>
</TR>

<TR VALIGN="top">
<TD width=27%>BI_BITFIELDS</TD>
<TD width=73%>Specifies that the bitmap is not compressed and that the color table consists of three doubleword color masks that specify the red, green, and blue components, respectively, of each pixel. This is valid when used with 16- and 32-bits-per-pixel bitmaps.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>biSizeImage</B></P>

<P>Specifies the size, in bytes, of the image. This may be set to 0 for BI_RGB bitmaps. </P>

<P><B>biXPelsPerMeter</B></P>

<P>Specifies the horizontal resolution, in pixels per meter, of the target device for the bitmap. An application can use this value to select a bitmap from a resource group that best matches the characteristics of the current device. </P>

<P><B>biYPelsPerMeter</B></P>

<P>Specifies the vertical resolution, in pixels per meter, of the target device for the bitmap. </P>

<P><B>biClrUsed</B></P>

<P>Specifies the number of color indices in the color table that are actually used by the bitmap. If this value is zero, the bitmap uses the maximum number of colors corresponding to the value of the <B>biBitCount</B> member for the compression mode specified by <B>biCompression</B>. </P>

<P>If <B>biClrUsed</B> is nonzero and the <B>biBitCount</B> member is less than 16, the <B>biClrUsed</B> member specifies the actual number of colors the graphics engine or device driver accesses. If <B>biBitCount</B> is 16 or greater, then <B>biClrUsed</B> member specifies the size of the color table used to optimize performance of Windows color palettes. If <B>biBitCount</B> equals 16 or 32, the optimal color palette starts immediately following the three doubleword masks. </P>

<P>If the bitmap is a packed bitmap (a bitmap in which the bitmap array immediately follows the <A HREF=".2pxnh.htm"><B>BITMAPINFO</B></A> header and which is referenced by a single pointer), the <B>biClrUsed</B> member must be either 0 or the actual size of the color table. </P>

<P><B>biClrImportant</B></P>

<P>Specifies the number of color indices that are considered important for displaying the bitmap. If this value is zero, all colors are important. </P>

<P></P>

<P><B>Remarks</B></P>

<P>The <B>BITMAPINFO</B> structure combines the <B>BITMAPINFOHEADER</B> structure and a color table to provide a complete definition of the dimensions and colors of a DIB. For more information about DIBs, see the description of the <A HREF=".2pxnh.htm"><B>BITMAPINFO</B></A> data structure. </P>

<P>An application should use the information stored in the <B>biSize</B> member to locate the color table in a <B>BITMAPINFO</B> structure, as follows: </P>

<P>pColor = ((LPSTR)pBitmapInfo +  </P>

<P>(WORD)(pBitmapInfo-&gt;bmiHeader.biSize)); </P>

<P></P>

<P>Windows supports formats for compressing bitmaps that define their colors with eight or four bits per pixel. Compression reduces the disk and memory storage required for the bitmap. The following paragraphs describe these formats. </P>

<P>When the <B>biCompression</B> member is BI_RLE8, the bitmap is compressed by using a run-length encoding (RLE) format for an 8-bit bitmap. This format can be compressed in encoded or absolute modes. Both modes can occur anywhere in the same bitmap. </P>

<P>·Encoded mode consists of two bytes: the first byte specifies the number of consecutive pixels to be drawn using the color index contained in the second byte. In addition, the first byte of the pair can be set to zero to indicate an escape that denotes an end of line, end of bitmap, or delta. The interpretation of the escape depends on the value of the second byte of the pair, which can be one of the following: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=17%><B>Value</B></TD>
<TD width=83%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=17%>0</TD>
<TD width=83%>End of line.</TD>
</TR>

<TR VALIGN="top">
<TD width=17%>1</TD>
<TD width=83%>End of bitmap.</TD>
</TR>

<TR VALIGN="top">
<TD width=17%>2</TD>
<TD width=83%>Delta. The two bytes following the escape contain unsigned values indicating the horizontal and vertical offsets of the next pixel from the current position.</TD>
</TR>
</TABLE><BR>

<P></P>

<P>·In absolute mode, the first byte is zero and the second byte is a value in the range 03H through FFH. The second byte represents the number of bytes that follow, each of which contains the color index of a single pixel. When the second byte is 2 or less, the escape has the same meaning as in encoded mode. In absolute mode, each run must be aligned on a word boundary. </P>

<P></P>

<P>The following example shows the hexadecimal values of an 8-bit compressed bitmap. </P>

<P>03 04 05 06 00 03 45 56 67 00 02 78 00 02 05 01  </P>

<P>02 78 00 00 09 1E 00 01 </P>

<P></P>

<P>This bitmap would expand as follows (two-digit values represent a color index for a single pixel): </P>

<P>04 04 04  </P>

<P>06 06 06 06 06 </P>

<P>45 56 67 </P>

<P>78 78 </P>

<P>move current position 5 right and 1 down </P>

<P>78 78 </P>

<P>end of line </P>

<P>1E 1E 1E 1E 1E 1E 1E 1E 1E </P>

<P>end of RLE bitmap </P>

<P></P>

<P>When the <B>biCompression</B> member is BI_RLE4, the bitmap is compressed by using a run-length encoding format for a 4-bit bitmap, which also uses encoded and absolute modes: </P>

<P>·In encoded mode, the first byte of the pair contains the number of pixels to be drawn using the color indices in the second byte. The second byte contains two color indices, one in its high-order four bits and one in its low-order four bits. The first of the pixels is drawn using the color specified by the high-order four bits, the second is drawn using the color in the low-order four bits, the third is drawn using the color in the high-order four bits, and so on, until all the pixels specified by the first byte have been drawn. </P>

<P>·In absolute mode, the first byte is zero, the second byte contains the number of color indices that follow, and subsequent bytes contain color indices in their high- and low-order four bits, one color index for each pixel. In absolute mode, each run must be aligned on a word boundary. The end-of-line, end-of-bitmap, and delta escapes described for BI_RLE8 also apply to BI_RLE4 compression. </P>

<P>The following example shows the hexadecimal values of a 4-bit compressed bitmap. </P>

<P>03 04 05 06 00 06 45 56 67 00 04 78 00 02 05 01  </P>

<P>04 78 00 00 09 1E 00 01 </P>

<P></P>

<P>This bitmap would expand as follows (single-digit values represent a color index for a single pixel): </P>

<P>0 4 0  </P>

<P>0 6 0 6 0 </P>

<P>4 5 5 6 6 7 </P>

<P>7 8 7 8 </P>

<P>move current position 5 right and 1 down </P>

<P>7 8 7 8 </P>

<P>end of line </P>

<P>1 E 1 E 1 E 1 E 1 </P>

<P>end of RLE bitmap </P>

<P></P>

<P></P>

<P>If <B>biHeight</B> is negative, indicating a top-down DIB, <B>biCompression</B> must be either BI_RGB or BI_BITFIELDS. Top-down DIBs cannot be compressed.</P>

<P><B>See Also</B></P>

<P><A HREF=".2pxnh.htm"><B>BITMAPINFO</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

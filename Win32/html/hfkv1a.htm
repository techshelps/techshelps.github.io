<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>DebugActiveProcess</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="hfkv1a"></A><B>DebugActiveProcess  <A HREF="lnqy1l.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="1txdzye.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="19cj0x..htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>DebugActiveProcess</B> function allows a debugger to attach to an active process and then debug it. </P>

<P><B>BOOL DebugActiveProcess(</B></P>

<TABLE cols=2 width=382>

<TR VALIGN="top">
<TD width=49%><B>DWORD</B> <I>dwProcessId</I> </TD>
<TD width=51%>// process to be debugged  </TD>
</TR>

<TR VALIGN="top">
<TD width=49%><B>   );</B></TD>
<TD width=51%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>dwProcessId</I></P>

<P>Specifies the identifier for the process to be debugged. The debugger gets debugging access to the process as if it created the process with the DEBUG_ONLY_THIS_PROCESS flag. </P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is nonzero.</P>

<P>If the function fails, the return value is zero. To get extended error information, call <A HREF="11c2vs7.htm"><B>GetLastError</B></A>. </P>

<P><B>Remarks</B></P>

<P>The debugger must have appropriate access to the target process; it must be able to open the process for PROCESS_ALL_ACCESS access. In the Win32 application programming interface (API) for Windows 95, this is always true if the process identifier is valid. However, in the Win32 API for Windows NT, <B>DebugActiveProcess</B> can fail if the target process was created with a security descriptor that denies the debugger appropriate access. </P>

<P>After the system checks the process identifier and determines that a valid debugging attachment is being made, the function returns TRUE. The debugger is then expected to wait for debugging events by using the <A HREF="2bhs1hv.htm"><B>WaitForDebugEvent</B></A> function. The system suspends all threads in the process and sends the debugger events representing the current state of the process. </P>

<P>The system sends the debugger a single CREATE_PROCESS_DEBUG_EVENT debugging event representing the process specified by the <I>dwProcessId</I> parameter. The <B>lpStartAddress</B> member of the <A HREF="12r9ao0.htm"><B>CREATE_PROCESS_DEBUG_INFO</B></A> structure is NULL. </P>

<P>For each thread currently part of the process, the system sends a CREATE_THREAD_DEBUG_EVENT debugging event. The <B>lpStartAddress</B> member of the <A HREF="3nllrse.htm"><B>CREATE_THREAD_DEBUG_INFO</B></A> structure is NULL. </P>

<P>For each dynamic-link library (DLL) currently loaded into the address space of the target process, the system sends a LOAD_DLL_DEBUG_EVENT debugging event. The system arranges for the first thread in the process to execute a breakpoint instruction after it resumes. Continuing this thread causes it to return to whatever it was doing before the debugger was attached. </P>

<P>After all of this has been done, the system resumes all threads in the process. When the first thread in the process resumes, it executes a breakpoint instruction that causes an EXCEPTION_DEBUG_EVENT debugging event to be sent to the debugger. All future debugging events are sent to the debugger by using the normal mechanism and rules. </P>

<P><B>See Also</B></P>

<P><A HREF="5fbj_xx.htm"><B>CreateProcess</B></A>, <A HREF="12r9ao0.htm"><B>CREATE_PROCESS_DEBUG_INFO</B></A>, <A HREF="3nllrse.htm"><B>CREATE_THREAD_DEBUG_INFO</B></A>, <A HREF="2bhs1hv.htm"><B>WaitForDebugEvent</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>CryptGetUserKey [New - Windows NT] [New - Windows 95, OEM Service Release 2]</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="j58xzp"></A><B>CryptGetUserKey  <A HREF="1mmafja.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="2jdzwvi.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="sx1q_k.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>[New - Windows NT]</P>

<P>[New - Windows 95, OEM Service Release 2]</P>

<P>The <B>CryptGetUserKey</B> function retrieves a handle to a permanent user key pair, such as the user's signature key pair.</P>

<P><B>BOOL CRYPTFUNC CryptGetUserKey(</B></P>

<TABLE cols=2 width=239>

<TR VALIGN="top">
<TD width=86%><B>HCRYPTPROV </B><I>hProv</I><B>,</B></TD>
<TD width=14%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=86%><B>    DWORD </B><I>dwKeySpec</I><B>,</B></TD>
<TD width=14%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=86%><B>    HCRYPTKEY *</B><I>phUserKey</I></TD>
<TD width=14%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=86%><B>   );</B></TD>
<TD width=14%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hProv</I></P>

<P>[in] A handle to the application's CSP. An application obtains this handle using the <A HREF="b4q7j2.htm"><B>CryptAcquireContext</B></A> function.</P>

<P><I>dwKeySpec</I></P>

<P>[in] The specification of the key to retrieve. The following keys are retrievable from almost all providers:</P>

<P>·AT_KEYEXCHANGE ¾ Exchange public key</P>

<P>·AT_SIGNATURE ¾ Signature public key</P>

<P>Additionally, some providers allow access to other user specific keys through this function. See the documentation on the specific provider for details.</P>

<P><I>phUserKey</I></P>

<P>[out] The address that the function copies the handle of the retrieved key to.</P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is nonzero.</P>

<P>If the function fails, the return value is zero. To retrieve extended error information, use the <A HREF="11c2vs7.htm"><B>GetLastError</B></A> function.</P>

<P>The following table lists the error codes most commonly returned by the <B>GetLastError</B> function. The error codes prefaced by "NTE" are generated by the particular CSP you are using.</P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=47%><B>Error</B></TD>
<TD width=53%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=47%>ERROR_INVALID_HANDLE</TD>
<TD width=53%>One of the parameters specifies an invalid handle. </TD>
</TR>

<TR VALIGN="top">
<TD width=47%>ERROR_INVALID_PARAMETER</TD>
<TD width=53%>One of the parameters contains an invalid value. This is most often an illegal pointer.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>NTE_BAD_KEY</TD>
<TD width=53%>The <I>dwKeySpec</I> parameter contains an invalid value.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>NTE_BAD_UID</TD>
<TD width=53%>The <I>hProv</I> parameter does not contain a valid context handle.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>NTE_NO_KEY</TD>
<TD width=53%>The key requested by the <I>dwKeySpec</I> parameter does not exist.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Example</B></P>

<P>#include &lt;wincrypt.h&gt;</P>

<P></P>

<P>HCRYPTPROV hProv = 0;</P>

<P>HCRYPTKEY hSignKey = 0;</P>

<P>HCRYPTKEY hXchgKey = 0;</P>

<P>// Get handle to user default provider.</P>

<P>if(!CryptAcquireContext(&amp;hProv, NULL, NULL, PROV_RSA_FULL, 0)) {</P>

<P>printf("Error %x during CryptAcquireContext!\n", GetLastError());</P>

<P>goto done;</P>

<P>}</P>

<P>// Get handle to signature key.</P>

<P>if(!CryptGetUserKey(hProv, AT_SIGNATURE, &amp;hSignKey)) {</P>

<P>printf("Error %x during CryptGetUserKey!\n", GetLastError());</P>

<P>goto done;</P>

<P>}</P>

<P>// Get handle to key exchange key.</P>

<P>if(!CryptGetUserKey(hProv, AT_KEYEXCHANGE, &amp;hXchgKey)) {</P>

<P>printf("Error %x during CryptGetUserKey!\n", GetLastError());</P>

<P>goto done;</P>

<P>}</P>

<P>// Do something with 'hSignKey' and 'hXchgKey'.</P>

<P>...</P>

<P>done:</P>

<P>// Destroy signature key handle.</P>

<P>if(hSignKey != 0) CryptDestroyKey(hSignKey);</P>

<P>// Destroy key exchange key handle.</P>

<P>if(hXchgKey != 0) CryptDestroyKey(hXchgKey);</P>

<P>// Release provider handle.</P>

<P>if(hProv != 0) CryptReleaseContext(hProv, 0);</P>

<P></P>

<P><B>See Also</B></P>

<P><A HREF="b4q7j2.htm"><B>CryptAcquireContext</B></A>, <A HREF="sq9krr.htm"><B>CryptDestroyKey</B></A>, <A HREF="dnbayj.htm"><B>CryptGenKey</B></A> </P>

</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>Using Timer Functions to Create a Mousetrap</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="x2ls22"></A><B>Using Timer Functions to Create a Mousetrap</B></P>

<P>Sometimes it is necessary to prevent more input while you have a cursor on the screen. One way to accomplish this is to create a special routine that traps mouse input until a specific event occurs. Many developers refer to this routine as "building a mousetrap." </P>

<P>The following example uses the <A HREF="14a99rj.htm"><B>SetTimer</B></A> and <A HREF="jcy77..htm"><B>KillTimer</B></A> functions to create a simple mousetrap. <B>SetTimer</B> creates a timer that sends a <A HREF="303bzxe.htm">WM_TIMER</A> message every 10 seconds. Each time the application receives a WM_TIMER message, it records the cursor location. If the current location is the same as the previous location and the application's main window is minimized, the application moves the cursor to the icon. When the application closes, <B>KillTimer</B> stops the timer. </P>

<P>HICON hIcon1;               // icon handle  </P>

<P>POINT ptOld;                // previous cursor location  </P>

<P>UINT uResult;               // SetTimer's return value </P>

<P>HINSTANCE hinstance;        // handle of current instance </P>

<P></P>

<P>//</P>

<P>// Perform application initialization here. </P>

<P>//</P>

<P></P>

<P>wc.hIcon = LoadIcon(hinstance, MAKEINTRESOURCE(400)); </P>

<P>wc.hCursor = LoadCursor(hinstance, MAKEINTRESOURCE(200)); </P>

<P></P>

<P>// Record the initial cursor position. </P>

<P></P>

<P>GetCursorPos(&amp;ptOld); </P>

<P></P>

<P>// Set the timer for the mousetrap. </P>

<P></P>

<P>uResult = SetTimer(hwnd,             // handle of main window </P>

<P>IDT_MOUSETRAP,                   // timer identifier </P>

<P>10000,                           // 10-second interval </P>

<P>(TIMERPROC) NULL);               // no timer callback </P>

<P></P>

<P>if (uResult == 0) </P>

<P>{ </P>

<P>ErrorHandler("No timer is available."); </P>

<P>} </P>

<P></P>

<P>LONG APIENTRY MainWndProc( </P>

<P>HWND hwnd,          // handle of main window </P>

<P>UINT message,       // type of message </P>

<P>UINT wParam,        // additional information </P>

<P>LONG lParam)        // additional information </P>

<P>{ </P>

<P></P>

<P>HDC hdc;        // handle of device context </P>

<P>POINT pt;       // current cursor location </P>

<P>RECT rc;        // location of minimized window </P>

<P></P>

<P>switch (message) </P>

<P>{ </P>

<P>//</P>

<P>// Process other messages. </P>

<P>// </P>

<P></P>

<P>case WM_TIMER: </P>

<P>// If the window is minimized, compare the current </P>

<P>// cursor position with the one from 10 seconds </P>

<P>// earlier. If the cursor position has not changed, </P>

<P>// move the cursor to the icon. </P>

<P></P>

<P>if (IsIconic(hwnd)) </P>

<P>{ </P>

<P>GetCursorPos(&amp;pt); </P>

<P></P>

<P>if ((pt.x == ptOld.x) &amp;&amp; (pt.y == ptOld.y)) </P>

<P>{ </P>

<P>GetWindowRect(hwnd, &amp;rc); </P>

<P>SetCursorPos(rc.left, rc.top); </P>

<P>} </P>

<P>else </P>

<P>{ </P>

<P>ptOld.x = pt.x; </P>

<P>ptOld.y = pt.y; </P>

<P>} </P>

<P>} </P>

<P></P>

<P>return 0; </P>

<P></P>

<P>case WM_DESTROY: </P>

<P></P>

<P>// Destroy the timer. </P>

<P></P>

<P>KillTimer(hwnd, IDT_MOUSETRAP); </P>

<P>PostQuitMessage(0); </P>

<P>break; </P>

<P></P>

<P>//</P>

<P>// Process other messages. </P>

<P>// </P>

<P></P>

<P>} </P>

<P></P>

<P>Although the following example also creates a mousetrap, it processes the <A HREF="303bzxe.htm">WM_TIMER</A> message through the application-defined callback function MyTimerProc, rather than through the application's message queue. </P>

<P>UINT uResult;               // SetTimer's return value  </P>

<P>HICON hIcon1;               // icon handle  </P>

<P>POINT ptOld;                // previous cursor location </P>

<P>HINSTANCE hinstance;        // handle of current instance </P>

<P></P>

<P>//</P>

<P>// Perform application initialization here. </P>

<P>//</P>

<P></P>

<P>wc.hIcon = LoadIcon(hinstance, MAKEINTRESOURCE(400)); </P>

<P>wc.hCursor = LoadCursor(hinstance, MAKEINTRESOURCE(200)); </P>

<P></P>

<P>// Record the current cursor position. </P>

<P></P>

<P>GetCursorPos(&amp;ptOld); </P>

<P></P>

<P>// Set the timer for the mousetrap. </P>

<P></P>

<P>uResult = SetTimer(hwnd,      // handle of main window </P>

<P>IDT_MOUSETRAP,            // timer identifier </P>

<P>10000,                    // 10-second interval </P>

<P>(TIMERPROC) MyTimerProc); // timer callback </P>

<P></P>

<P>if (uResult == 0) </P>

<P>{ </P>

<P>ErrorHandler("No timer is available."); </P>

<P>} </P>

<P></P>

<P>LONG APIENTRY MainWndProc( </P>

<P>HWND hwnd,          // handle of main window </P>

<P>UINT message,       // type of message </P>

<P>UINT wParam,        // additional information </P>

<P>LONG lParam)        // additional information </P>

<P>{ </P>

<P></P>

<P>HDC hdc;        // handle of device context </P>

<P></P>

<P>switch (message) </P>

<P>{ </P>

<P>// </P>

<P>// Process other messages. </P>

<P>// </P>

<P></P>

<P>case WM_DESTROY: </P>

<P>// Destroy the timer. </P>

<P></P>

<P>KillTimer(hwnd, IDT_MOUSETRAP); </P>

<P>PostQuitMessage(0); </P>

<P>break; </P>

<P></P>

<P>//</P>

<P>// Process other messages. </P>

<P>// </P>

<P></P>

<P>} </P>

<P></P>

<P>// MyTimerProc is an application-defined callback function that </P>

<P>// processes WM_TIMER messages. </P>

<P></P>

<P>VOID CALLBACK MyTimerProc( </P>

<P>HWND hwnd,        // handle of window for timer messages </P>

<P>UINT message,     // WM_TIMER message </P>

<P>UINT idTimer,     // timer identifier </P>

<P>DWORD dwTime)     // current system time </P>

<P>{ </P>

<P></P>

<P>RECT rc; </P>

<P>POINT pt; </P>

<P></P>

<P>// If the window is minimized, compare the current </P>

<P>// cursor position with the one from 10 seconds earlier. </P>

<P>// If the cursor position has not changed, move the </P>

<P>// cursor to the icon. </P>

<P></P>

<P>if (IsIconic(hwnd)) </P>

<P>{ </P>

<P>GetCursorPos(&amp;pt); </P>

<P></P>

<P>if ((pt.x == ptOld.x) &amp;&amp; (pt.y == ptOld.y)) </P>

<P>{ </P>

<P>GetWindowRect(hwnd, &amp;rc); </P>

<P>SetCursorPos(rc.left, rc.top); </P>

<P>} </P>

<P>else </P>

<P>{ </P>

<P>ptOld.x = pt.x; </P>

<P>ptOld.y = pt.y; </P>

<P>} </P>

<P>} </P>

<P>} </P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

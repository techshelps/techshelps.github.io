<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>SnmpMgrGetTrap</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="5_2__vt"></A><B>SnmpMgrGetTrap  <A HREF="pzy0k4.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="3ol8_pd.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="qj0.0j.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>SnmpMgrGetTrap</B> function returns outstanding trap data that the caller has not received if trap reception is enabled. </P>

<P><B>BOOL SnmpMgrGetTrap(</B></P>

<TABLE cols=2 width=505>

<TR VALIGN="top">
<TD width=65%><B>AsnObjectIdentifier </B><I>*enterprise</I><B>, </B></TD>
<TD width=35%>// generating enterprise</TD>
</TR>

<TR VALIGN="top">
<TD width=65%><B>    AsnNetworkAddress </B><I>*IPAddress</I><B>, </B></TD>
<TD width=35%>// generating IP address</TD>
</TR>

<TR VALIGN="top">
<TD width=65%><B>    AsnInteger </B><I>*genericTrap</I><B>, </B></TD>
<TD width=35%>// generic trap type</TD>
</TR>

<TR VALIGN="top">
<TD width=65%><B>    AsnInteger </B><I>*specificTrap</I><B>, </B></TD>
<TD width=35%>// enterprise-specific type</TD>
</TR>

<TR VALIGN="top">
<TD width=65%><B>    AsnTimeticks </B><I>*timeStamp</I><B>, </B></TD>
<TD width=35%>// time stamp</TD>
</TR>

<TR VALIGN="top">
<TD width=65%><B>    RFC1157VarBindList </B><I>*variableBindings</I></TD>
<TD width=35%>// variable bindings</TD>
</TR>

<TR VALIGN="top">
<TD width=65%><B>   );</B></TD>
<TD width=35%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>enterprise</I></P>

<P>[out] Points to an object identifier that specifies the enterprise that generated the SNMP trap.</P>

<P><I>IPAddress</I></P>

<P>[out] Points to the IP address of the enterprise that generated the SNMP trap. </P>

<P><I>genericTrap</I></P>

<P>[out] Points to an indicator of the generic trap. This parameter can be one of the following values:</P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=59%><B>Value</B></TD>
<TD width=41%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=59%>SNMP_GENERICTRAP_COLDSTART</TD>
<TD width=41%>The agent is initializing protocol entities on the managed mode. It may alter objects in its view.</TD>
</TR>

<TR VALIGN="top">
<TD width=59%>SNMP_GENERICTRAP_WARMSTART</TD>
<TD width=41%>The agent is re-initializing itself but it will not alter objects in its view.</TD>
</TR>

<TR VALIGN="top">
<TD width=59%>SNMP_GENERICTRAP_LINKDOWN</TD>
<TD width=41%>An attached interface has changed from the <B>up</B> state to the <B>down</B> state. The first variable in the variable bindings list identifies the interface.</TD>
</TR>

<TR VALIGN="top">
<TD width=59%>SNMP_GENERICTRAP_LINKUP</TD>
<TD width=41%>An attached interface has changed from the <B>down</B> state to the <B>up</B> state. The first variable in the variable bindings list identifies the interface.</TD>
</TR>

<TR VALIGN="top">
<TD width=59%>SNMP_GENERICTRAP_AUTHFAILURE</TD>
<TD width=41%>An SNMP entity has sent an SNMP message, but it has falsely claimed to belong to a known community.</TD>
</TR>

<TR VALIGN="top">
<TD width=59%>SNMP_GENERICTRAP_EGPNEIGHLOSS</TD>
<TD width=41%>An EGP peer has changed to the <B>down</B> state. The first variable in the variable bindings list identifies the IP address of the EGP peer.</TD>
</TR>

<TR VALIGN="top">
<TD width=59%>SNMP_GENERICTRAP_ENTERSPECIFIC</TD>
<TD width=41%>An extraordinary event has occurred and it is identified in the <I>specificTrap</I> parameter with an enterprise-specific value.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><I>specificTrap</I></P>

<P>[out] Points to an indication of the specific trap generated.</P>

<P><I>timeStamp</I></P>

<P>[out] Points to a variable to receive the time stamp.</P>

<P><I>variableBindings</I></P>

<P>[out] Points to the variable bindings list. </P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function returns a trap, the return value is TRUE.</P>

<P>You should call the <B>SnmpMgrGetTrap</B> function repeatedly until <A HREF="11c2vs7.htm"><B>GetLastError</B></A><B> </B>returns a value of FALSE. <B>GetLastError</B> may also return the following error codes:</P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=57%><B>Error Code</B></TD>
<TD width=43%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=57%>SNMP_MGMTAPI_TRAP_ERRORS</TD>
<TD width=43%>Indicates errors were encountered; traps are not accessible.</TD>
</TR>

<TR VALIGN="top">
<TD width=57%>SNMP_MGMTAPI_NOTRAPS</TD>
<TD width=43%>Indicates no traps are available.</TD>
</TR>

<TR VALIGN="top">
<TD width=57%>SNMP_MEM_ALLOC_ERROR</TD>
<TD width=43%>Indicates a memory allocation error.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Remarks</B></P>

<P>You must allocate memory for the <B>list</B> member of the <A HREF="1wxgrc0.htm"><B>RFC1157VarBindList</B></A> structure with the <A HREF="1pppkv9.htm"><B>SnmpUtilMemAlloc</B></A> function but you do not need to free it. </P>

<P>Once an operating system completes a task, it sends a trap signal. An internal SNMP signal checks for the trap signal to notify the SNMP manager of the completed task. The event that the <I>phTrapAvailable</I> parameter of the <A HREF="3r09_5e.htm"><B>SnmpMgrTrapListen</B></A> function points to allows event-driven acquisition of SNMP traps. You can ignore the trap and poll the <B>SnmpMgrGetTrap</B> function for traps at regular intervals instead.</P>

<P>Another method to acquire traps is to create a thread to wait on the event using the <A HREF="j9iq2g.htm"><B>WaitForSingleObject</B></A> function. When the event occurs, the thread should clear the event using the <A HREF="1.ih1gv.htm"><B>ResetEvent</B></A> function. Then the thread should repeatedly call <B>SnmpMgrGetTrap</B> until it returns a value of FALSE.</P>

<P>Always call the <B>SnmpMgrTrapListen</B> function <I>before</I> calling <B>SnmpMgrGetTrap</B> to receive traps. If an SNMP manager application calls <B>SnmpMgrGetTrap</B> <I>first</I> to receive traps, it returns a value of FALSE, even if there are traps available. If the application calls <A HREF="11c2vs7.htm"><B>GetLastError</B></A> before calling <B>SnmpMgrTrapListen</B>, <B>GetLastError</B> returns the error code SNMP_MGMTAPI_TRAP_ERRORS.</P>

<P><B>See Also </B></P>

<P><A HREF="3r09_5e.htm"><B>SnmpMgrTrapListen</B></A>, <A HREF="1pppkv9.htm"><B>SnmpUtilMemAlloc</B></A>, <A HREF="j9iq2g.htm"><B>WaitForSingleObject</B></A>,<B> <A HREF="1wxgrc0.htm">RFC1157VarBindList</A></B>, <A HREF="1.ih1gv.htm"><B>ResetEvent</B></A></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

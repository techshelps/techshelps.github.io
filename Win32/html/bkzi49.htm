<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Terminating a Process</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="bkzi49"></A><B>Terminating a Process</B></P>

<P>A process executes until one of the following events occurs: </P>

<P>·Any thread of the process calls the <A HREF="i5ihdk.htm"><B>ExitProcess</B></A> function. This terminates all threads of the process. </P>

<P>·The primary thread of the process returns. The primary thread can avoid terminating other threads by explicitly calling <A HREF="c.xq03.htm"><B>ExitThread</B></A> before it returns. One of the remaining threads can still call <B>ExitProcess</B> to ensure that all threads are terminated. </P>

<P>·The last thread of the process terminates. </P>

<P>·Any thread calls the <A HREF=".d3m14.htm"><B>TerminateProcess</B></A> function with a handle to the process. This terminates all threads of the process, without allowing them to clean up or save data. </P>

<P>·For console processes, the default handler function calls <A HREF="i5ihdk.htm"><B>ExitProcess</B></A> when the console receives a CTRL+C or CTRL+BREAK signal. All console processes attached to the console receive these signals. Detached processes and GUI processes are not affected by CTRL+C or CTRL+BREAK signals. For more information, see <A HREF="6gcpc8.htm"><B>SetConsoleCtrlHandler</B></A>. </P>

<P>·The user shuts down the system or logs off. Use the <A HREF="645nbc.htm"><B>SetProcessShutdownParameters</B></A> function to specify shutdown parameters, such as when a process should terminate relative to the other processes in the system. The <A HREF="2yi701.htm"><B>GetProcessShutdownParameters</B></A> function retrieves the current shutdown priority of the process and other shutdown flags. </P>

<P></P>

<P>When a process is terminated, all threads of the process are terminated immediately with no chance to run additional code. This means that the process does not execute code in termination handler blocks. For more information, see <A HREF="atyjkk.htm">Structured Exception Handling</A>. </P>

<P>The <A HREF="2mm.i..htm"><B>GetExitCodeProcess</B></A> function returns the termination status of a process. While a process is executing, its termination status is STILL_ACTIVE. When a process terminates, its termination status changes from STILL_ACTIVE to the exit code of the process. The exit code is either the value specified in the call to <A HREF="i5ihdk.htm"><B>ExitProcess</B></A> or <A HREF=".d3m14.htm"><B>TerminateProcess</B></A>, or the value returned by the main or <A HREF="12si984.htm"><B>WinMain</B></A> function of the process. If a process is terminated due to a fatal exception, the exit code is the value of the exception that caused the termination. In addition, this value is used as the exit code for all the threads that were executing when the exception occurred. </P>

<P>When a process terminates, the state of the process object becomes signaled, releasing any threads that had been waiting for the process to terminate. For more about synchronization, see <A HREF="2n3h_7u.htm">Synchronizing Execution of Multiple Threads</A>. </P>

<P>Open handles to files or other resources are closed automatically when a process terminates. However, the objects themselves exist until all open handles to them are closed. This means that an object remains valid after a process closes, if another process has a handle to it. </P>

<P>If a process is terminated by <A HREF="i5ihdk.htm"><B>ExitProcess</B></A>, the system calls the entry-point function of each attached DLL with a value indicating that the process is detaching from the DLL. DLLs are not notified when a process is terminated by <A HREF=".d3m14.htm"><B>TerminateProcess</B></A>. For more information about DLLs, see <A HREF="ad.gsp.htm">Dynamic-Link Libraries</A>. </P>

<P><B>Warning</B>  The <B>TerminateProcess</B> function should be used only in extreme circumstances, since it does not allow threads to clean up or save data and does not notify attached DLLs. If you need to have one process terminate another process, the following steps provide a better solution:</P>

<P>·Have both processes call the <A HREF="xkgsv4.htm"><B>RegisterWindowMessage</B></A> function to create a private message.</P>

<P>·One process can terminate the other process by broadcasting the private message using the <A HREF="mk.ky2.htm"><B>BroadcastSystemMessage</B></A> function as follows:</P>

<P>BroadcastSystemMessage( </P>

<P>BSF_IGNORECURRENTTASK, // do not send message to this process</P>

<P>BSM_APPLICATIONS,      // broadcast only to applications</P>

<P><I>private message,</I>       // message registered in previous step</P>

<P>wParam,                // message-specific value</P>

<P>lParam );              // message-specific value</P>

<P>·The process receiving the private message calls <A HREF="i5ihdk.htm"><B>ExitProcess</B></A> to terminate its execution. </P>

<P></P>

<P><B>Note</B>  When the system is terminating a process, it does not terminate any child processes that the process has created. </P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

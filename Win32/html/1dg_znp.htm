<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>Writing a Control Handler Function</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="1dg_znp"></A><B>Writing a Control Handler Function</B></P>

<P>The MyServiceCtrlHandler function in the following example is the <A HREF="1eqr9ip.htm"><B>Handler</B></A> function. When this function is called by the dispatcher thread, it handles the control code passed in the <I>Opcode</I> parameter and then calls the <A HREF="u71xdk.htm"><B>SetServiceStatus</B></A> function to update the service's status. Every time a <B>Handler</B> function receives a control code, it is appropriate to return status with a call to <B>SetServiceStatus</B> regardless of whether the service acts on the control.</P>

<P>When the pause control is received, MyServiceCtrlHandler simply sets the <I>dwCurrentState</I> field in the SERVICE_STATUS structure to SERVICE_PAUSED. Likewise, when the continue control is received, the state is set to SERVICE_RUNNING. Therefore, MyServiceCtrlHandler is not a good example of how to handle the pause and continue controls. Because MyServiceCtrlHandler is a template for a <B>Handler</B> function, code for the pause and continue controls is included for completeness. A service that supports either the pause or continue control should handle these controls in a way that makes sense. Many services support neither the pause or continue control. If the service indicates that it does not support pause or continue with the <I>dwControlsAccepted</I> parameter, then the SCM will not send pause or continue controls to the service's <B>Handler</B> function. </P>

<P>To output debugging information, MyServiceCtrlHandler calls SvcDebugOut. The source code SvcDebugOut is listed in <A HREF="bx1i8w.htm">Writing a Service Program's main Function</A>.</P>

<P>VOID MyServiceCtrlHandler (DWORD Opcode)  </P>

<P>{ </P>

<P>DWORD status; </P>

<P></P>

<P>switch(Opcode) </P>

<P>{ </P>

<P>case SERVICE_CONTROL_PAUSE: </P>

<P>// Do whatever it takes to pause here. </P>

<P>MyServiceStatus.dwCurrentState = SERVICE_PAUSED; </P>

<P>break; </P>

<P></P>

<P>case SERVICE_CONTROL_CONTINUE: </P>

<P>// Do whatever it takes to continue here. </P>

<P>MyServiceStatus.dwCurrentState = SERVICE_RUNNING; </P>

<P>break; </P>

<P></P>

<P>case SERVICE_CONTROL_STOP: </P>

<P>// Do whatever it takes to stop here. </P>

<P>MyServiceStatus.dwWin32ExitCode = 0; </P>

<P>MyServiceStatus.dwCurrentState  = SERVICE_STOPPED_PENDING; </P>

<P>MyServiceStatus.dwCheckPoint    = 0; </P>

<P>MyServiceStatus.dwWaitHint      = 0; </P>

<P></P>

<P>if (!SetServiceStatus (MyServiceStatusHandle, </P>

<P>&amp;MyServiceStatus))</P>

<P>{ </P>

<P>status = GetLastError(); </P>

<P>SvcDebugOut(" [MY_SERVICE] SetServiceStatus error </P>

<P>%ld\n",status); </P>

<P>} </P>

<P></P>

<P>SvcDebugOut(" [MY_SERVICE] Leaving MyService \n",0); </P>

<P>return; </P>

<P></P>

<P>case SERVICE_CONTROL_INTERROGATE: </P>

<P>// Fall through to send current status. </P>

<P>break; </P>

<P></P>

<P>default: </P>

<P>SvcDebugOut(" [MY_SERVICE] Unrecognized opcode %ld\n", </P>

<P>Opcode); </P>

<P>} </P>

<P></P>

<P>// Send current status. </P>

<P>if (!SetServiceStatus (MyServiceStatusHandle,  &amp;MyServiceStatus)) </P>

<P>{ </P>

<P>status = GetLastError(); </P>

<P>SvcDebugOut(" [MY_SERVICE] SetServiceStatus error </P>

<P>%ld\n",status); </P>

<P>} </P>

<P>return; </P>

<P>} </P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

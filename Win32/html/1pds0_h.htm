<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>DrawTextEx [Now Supported on Windows NT]</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="1pds0_h"></A><B>DrawTextEx  <A HREF="flki2m.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="4jd_z5i.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="1xkvu5n.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>[Now Supported on Windows NT]</P>

<P>The <B>DrawTextEx</B> function draws formatted text in the specified rectangle.</P>

<P><B>int DrawTextEx(</B></P>

<TABLE cols=2 width=527>

<TR VALIGN="top">
<TD width=51%><B>HDC </B><I>hdc</I><B>,</B></TD>
<TD width=49%>// handle to device context</TD>
</TR>

<TR VALIGN="top">
<TD width=51%><B>    LPTSTR </B><I>lpchText</I><B>,</B></TD>
<TD width=49%>// pointer to string to draw</TD>
</TR>

<TR VALIGN="top">
<TD width=51%><B>    int </B><I>cchText</I><B>,</B></TD>
<TD width=49%>// length of string to draw</TD>
</TR>

<TR VALIGN="top">
<TD width=51%><B>    LPRECT </B><I>lprc</I><B>,</B></TD>
<TD width=49%>// pointer to rectangle coordinates</TD>
</TR>

<TR VALIGN="top">
<TD width=51%><B>    UINT </B><I>dwDTFormat</I><B>,</B></TD>
<TD width=49%>// formatting options</TD>
</TR>

<TR VALIGN="top">
<TD width=51%><B>    LPDRAWTEXTPARAMS </B><I>lpDTParams</I></TD>
<TD width=49%>// pointer to structure for more options </TD>
</TR>

<TR VALIGN="top">
<TD width=51%><B>   );</B></TD>
<TD width=49%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hdc</I></P>

<P>Identifies the device context to draw in.</P>

<P><I>lpchText</I></P>

<P>Points to the string to draw. The string must be null-terminated if the <I>cchText</I> parameter is  -1.</P>

<P><I>cchText</I></P>

<P>Specifies the length, in characters, of the string specified by the <I>lpchText</I> parameter. If the string is null-terminated, this parameter can be  -1 to calculate the length.</P>

<P><I>lprc</I></P>

<P>Points to a <A HREF="ezena2.htm"><B>RECT</B></A> structure that contains the rectangle, in logical coordinates, in which the text is to be formatted. </P>

<P><I>dwDTFormat</I></P>

<P>Specifies formatting options. This parameter can be one or more of these values:</P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=36%><B>Value</B></TD>
<TD width=64%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=36%>DT_BOTTOM</TD>
<TD width=64%>Justifies the text to the bottom of the rectangle. This value must be combined with DT_SINGLELINE.</TD>
</TR>

<TR VALIGN="top">
<TD width=36%>DT_CALCRECT</TD>
<TD width=64%>Determines the width and height of the rectangle. If there are multiple lines of text, <B>DrawTextEx</B> uses the width of the rectangle pointed to by the <I>lprc</I> parameter and extends the base of the rectangle to bound the last line of text. If there is only one line of text, <B>DrawTextEx</B> modifies the right side of the rectangle so that it bounds the last character in the line. In either case, <B>DrawTextEx</B> returns the height of the formatted text, but does not draw the text.</TD>
</TR>

<TR VALIGN="top">
<TD width=36%>DT_CENTER</TD>
<TD width=64%>Centers text horizontally in the rectangle.</TD>
</TR>

<TR VALIGN="top">
<TD width=36%>DT_EDITCONTROL</TD>
<TD width=64%>Duplicates the text-displaying characteristics of a multiline edit control. Specifically, the average character width is calculated in the same manner as for an edit control, and the function does not display a partially visible last line.</TD>
</TR>

<TR VALIGN="top">
<TD width=36%>DT_END_ELLIPSIS or DT_PATH_ELLIPSIS</TD>
<TD width=64%>Replaces part of the given string with ellipses, if necessary, so that the result fits in the specified  rectangle. The given string is not modified unless the DT_MODIFYSTRING flag is specified.
<P>You can specify DT_END_ELLIPSIS to replace characters at the end of the string, or DT_PATH_ELLIPSIS to replace characters in the middle of the string. If the string contains backslash (\) characters, DT_PATH_ELLIPSIS preserves as much as possible of the text after the last backslash.</P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=36%>DT_EXPANDTABS</TD>
<TD width=64%>Expands tab characters. The default number of characters per tab is eight.</TD>
</TR>

<TR VALIGN="top">
<TD width=36%>DT_EXTERNALLEADING</TD>
<TD width=64%>Includes the font external leading in line height. Normally, external leading is not included in the height of a line of text.</TD>
</TR>

<TR VALIGN="top">
<TD width=36%>DT_LEFT</TD>
<TD width=64%>Aligns text to the left.</TD>
</TR>

<TR VALIGN="top">
<TD width=36%>DT_MODIFYSTRING</TD>
<TD width=64%>Modifies the given string to match the displayed text. This flag has no effect unless the DT_END_ELLIPSIS or DT_PATH_ELLIPSIS flag is specified.</TD>
</TR>

<TR VALIGN="top">
<TD width=36%>DT_NOCLIP</TD>
<TD width=64%>Draws without clipping. <B>DrawTextEx</B> is somewhat faster when DT_NOCLIP is used.</TD>
</TR>

<TR VALIGN="top">
<TD width=36%>DT_NOPREFIX</TD>
<TD width=64%>Turns off processing of prefix characters. Normally, <B>DrawTextEx</B> interprets the ampersand (&amp;) mnemonic-prefix character as a directive to underscore the character that follows, and the double ampersand (&amp;&amp;) mnemonic-prefix characters as a directive to print a single ampersand. By specifying DT_NOPREFIX, this processing is turned off.</TD>
</TR>

<TR VALIGN="top">
<TD width=36%>DT_RIGHT</TD>
<TD width=64%>Aligns text to the right.</TD>
</TR>

<TR VALIGN="top">
<TD width=36%>DT_RTLREADING</TD>
<TD width=64%>Layout in right to left reading order for bi-directional text when the font selected into the <I>hdc</I> is a Hebrew or Arabic font. The default reading order for all text is left to right.</TD>
</TR>

<TR VALIGN="top">
<TD width=36%>DT_SINGLELINE</TD>
<TD width=64%>Displays text on a single line only. Carriage returns and linefeeds do not break the line.</TD>
</TR>

<TR VALIGN="top">
<TD width=36%>DT_TABSTOP</TD>
<TD width=64%>Sets tab stops. The <A HREF="25geaw5.htm"><B>DRAWTEXTPARAMS</B></A> structure pointed to by the <I>lpDTParams</I> parameter specifies the number of average character widths per tab stop.</TD>
</TR>

<TR VALIGN="top">
<TD width=36%>DT_TOP</TD>
<TD width=64%>Top justifies text (single line only).</TD>
</TR>

<TR VALIGN="top">
<TD width=36%>DT_VCENTER</TD>
<TD width=64%>Centers text vertically (single line only).</TD>
</TR>

<TR VALIGN="top">
<TD width=36%>DT_WORDBREAK</TD>
<TD width=64%>Breaks words. Lines are automatically broken between words if a word extends past the edge of the rectangle specified by the <I>lprc</I> parameter. A carriage return-linefeed sequence also breaks the line.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><I>dwDTParams</I></P>

<P>Points to a <A HREF="25geaw5.htm"><B>DRAWTEXTPARAMS</B></A> structure that specifies additional formatting options. This parameter can be NULL. </P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is the text height.</P>

<P>If the function fails, the return value is zero.</P>

<P><B>See Also</B></P>

<P><A HREF="g6q7on.htm"><B>DrawText</B></A>, <A HREF="25geaw5.htm"><B>DRAWTEXTPARAMS</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

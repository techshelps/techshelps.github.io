<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>DllEntryPoint</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="82sdq5"></A><B>DllEntryPoint  <A HREF="1aglzs9.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="ad.gsp.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="14bc1rp.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>DllEntryPoint</B> function is an optional method of entry into a dynamic-link library (DLL). If the function is used, it is called by the system when processes and threads are initialized and terminated, or upon calls to the <A HREF="1vghbf8.htm"><B>LoadLibrary</B></A> and <A HREF="3mcs_pm.htm"><B>FreeLibrary</B></A> functions. <B>DllEntryPoint</B> is a placeholder for the library-defined function name. The actual name must be specified at build time. For more information, see the documentation included with your development tools. </P>

<P><B>BOOL WINAPI DllEntryPoint(</B></P>

<TABLE cols=2 width=387>

<TR VALIGN="top">
<TD width=48%><B>HINSTANCE</B> <I>hinstDLL</I><B>,</B></TD>
<TD width=52%>// handle to DLL module </TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>    DWORD</B> <I>fdwReason</I><B>,</B></TD>
<TD width=52%>// reason for calling function </TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>    LPVOID</B> <I>lpvReserved</I> </TD>
<TD width=52%>// reserved </TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>   );</B></TD>
<TD width=52%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hinstDLL</I></P>

<P>A handle to the DLL. The value is the base address of the DLL. The HINSTANCE of a DLL is the same as the HMODULE of the DLL, so <I>hinstDLL</I> can be used in subsequent calls to the <A HREF="3oo70x8.htm"><B>GetModuleFileName</B></A> function and other functions that require a module handle. </P>

<P><I>fdwReason</I></P>

<P>Specifies a flag indicating why the DLL entry-point function is being called. This parameter can be one of the following values: </P>

<TABLE cols=6>

<TR VALIGN="top">
<TD colspan=2 width=14%><B>Value</B></TD>
<TD colspan=3 width=73%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD colspan=3 width=16%>DLL_PROCESS_ATTACH</TD>
<TD colspan=3 width=84%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=12%>&nbsp;</TD>
<TD colspan=3 width=63%>Indicates that the DLL is attaching to the address space of the current process as a result of the process starting up or as a result of a call to <B>LoadLibrary</B>. DLLs can use this opportunity to initialize any instance data or to use the <A HREF="qzkzro.htm"><B>TlsAlloc</B></A> function to allocate a thread local storage (TLS) index.</TD>
</TR>

<TR VALIGN="top">
<TD width=12%>&nbsp;</TD>
<TD colspan=3 width=63%>During initial process startup or after a call to <B>LoadLibrary</B>, the operating system scans the list of loaded DLLs for the process. For each DLL that has not already been called with the DLL_PROCESS_ATTACH value, the system calls the DLL's entry-point function. This call is made in the context of the thread that caused the process address space to change, such as the primary thread of the process or the thread that called <B>LoadLibrary</B>.</TD>
</TR>

<TR VALIGN="top">
<TD colspan=3 width=16%>DLL_THREAD_ATTACH</TD>
<TD colspan=3 width=84%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=12%>&nbsp;</TD>
<TD colspan=3 width=63%>Indicates that the current process is creating a new thread. When this occurs, the system calls the entry-point function of all DLLs currently attached to the process. The call is made in the context of the new thread. DLLs can use this opportunity to initialize a TLS slot for the thread. A thread calling the DLL entry-point function with the DLL_PROCESS_ATTACH value does not call the DLL entry-point function with the DLL_THREAD_ATTACH value.</TD>
</TR>

<TR VALIGN="top">
<TD width=12%>&nbsp;</TD>
<TD colspan=3 width=63%>Note that a DLL's entry-point function is called with this value only by threads created after the DLL is attached to the process. When a DLL is attached by <A HREF="1vghbf8.htm"><B>LoadLibrary</B></A>, existing threads do not call the entry-point function of the newly loaded DLL.</TD>
</TR>

<TR VALIGN="top">
<TD colspan=3 width=16%>DLL_THREAD_DETACH</TD>
<TD colspan=3 width=84%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=12%>&nbsp;</TD>
<TD colspan=3 width=63%>Indicates that a thread is exiting cleanly. If the DLL has stored a pointer to allocated memory in a TLS slot, it uses this opportunity to free the memory. The operating system calls the entry-point function of all currently loaded DLLs with this value. The call is made in the context of the exiting thread. There are cases in which the entry-point function is called for a terminating thread even if the DLL never attached to the thread ¾ for example, the entry-point function was never called with the DLL_THREAD_ATTACH value in the context of the thread in either of these two situations:
<P>·The thread was the initial thread in the process, so the system called the entry-point function with the DLL_PROCESS_ATTACH value. </P>

<P>·The thread was already running when a call to the <B>LoadLibrary</B> function was made, so the system never called the entry-point function for it. </P>
</TD>
</TR>
</TABLE><BR>

<P></P>

<TABLE cols=4>

<TR VALIGN="top">
<TD colspan=2 width=16%>DLL_PROCESS_DETACH</TD>
<TD colspan=2 width=84%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=12%>&nbsp;</TD>
<TD colspan=2 width=63%>Indicates that the DLL is detaching from the address space of the calling process as a result of either a clean process exit or of a call to <A HREF="3mcs_pm.htm"><B>FreeLibrary</B></A>. The DLL can use this opportunity to call the <A HREF="3hllfbu.htm"><B>TlsFree</B></A> function to free any TLS indices allocated by using <B>TlsAlloc</B> and to free any thread local data. When a DLL detaches from a process as a result of process termination or as a result of a call to <B>FreeLibrary</B>, the operating system does not call the DLL's entry-point function with the DLL_THREAD_DETACH value for the individual threads of the process. The DLL is only given DLL_PROCESS_DETACH notification. DLLs can take this opportunity to clean up all resources for all threads attached and known to the DLL.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><I>lpvReserved</I></P>

<P>Specifies further aspects of DLL initialization and cleanup. </P>

<P>If <I>fdwReason</I> is DLL_PROCESS_ATTACH, <I>lpvReserved</I> is NULL for dynamic loads and non-NULL for static loads. </P>

<P>If <I>fdwReason</I> is DLL_PROCESS_DETACH, <I>lpvReserved</I> is NULL if <B>DllEntryPoint</B> has been called by using <B>FreeLibrary</B> and non-NULL if <B>DllEntryPoint</B> has been called during process termination. </P>

<P></P>

<P><B>Return Values</B></P>

<P>When the system calls the <B>DllEntryPoint</B> function with the DLL_PROCESS_ATTACH value, the function returns TRUE if it succeeds or FALSE if initialization fails. If the return value is FALSE when <B>DllEntryPoint</B> is called because the process uses the <B>LoadLibrary</B> function, <B>LoadLibrary</B> returns NULL. If the return value is FALSE when <B>DllEntryPoint</B> is called during process initialization, the process terminates with an error. To get extended error information, call <A HREF="11c2vs7.htm"><B>GetLastError</B></A>. </P>

<P>When the system calls the <B>DllEntryPoint</B> function with any value other than DLL_PROCESS_ATTACH, the return value is ignored. </P>

<P><B>See Also</B></P>

<P><A HREF="3mcs_pm.htm"><B>FreeLibrary</B></A>, <A HREF="3oo70x8.htm"><B>GetModuleFileName</B></A>, <A HREF="1vghbf8.htm"><B>LoadLibrary</B></A>, <A HREF="qzkzro.htm"><B>TlsAlloc</B></A>, <A HREF="3hllfbu.htm"><B>TlsFree</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

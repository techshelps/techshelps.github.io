<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Anonymous Pipes Overview</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="5bqe_j0"></A><B>Anonymous Pipes Overview</B></P>

<P>A typical use of an anonymous pipe is to create a channel for communication between a parent process and its child process by redirecting the standard input or standard output handles of the child process. To redirect the standard output handle of a child process, the parent process performs the following steps: </P>

<P>1.Call the <A HREF="1b8l_fr.htm"><B>GetStdHandle</B></A> function to get the current standard output handle; save the handle for later use. </P>

<P>2.Call the <A HREF="xn_62d.htm"><B>CreatePipe</B></A> function to create an anonymous pipe. This function returns handles to the read and write ends of the pipe. </P>

<P>3.Call the <A HREF="1crxpv2.htm"><B>SetStdHandle</B></A> function to set its standard output to be the write handle of the pipe. </P>

<P>4.Call the <A HREF="5fbj_xx.htm"><B>CreateProcess</B></A> function to create the child process. The child process inherits the inheritable handles of the parent process. It also inherits the values of the standard handles of its parent process, which it can retrieve using the <A HREF="1b8l_fr.htm"><B>GetStdHandle</B></A> function. </P>

<P>5.Call the <A HREF="ngwwie.htm"><B>CloseHandle</B></A> function to close the parent's handle to the write end of the pipe. After the child process inherits this handle, the parent process no longer needs its copy of the handle. </P>

<P>6.Call the <A HREF="cjnd8p.htm"><B>ReadFile</B></A> function to read from the pipe. This operation enables the parent process to read the data written to standard output by the child process. </P>

<P></P>

<P>The child process uses the <A HREF="1b8l_fr.htm"><B>GetStdHandle</B></A> function to get its standard output handle, which is actually a handle to the write end of the pipe. The child process then uses the <A HREF="g0sox_.htm"><B>WriteFile</B></A> function to write its output to the pipe. </P>

<P>Data is written to an anonymous pipe as a stream of bytes. This means that a process reading from a pipe cannot distinguish between the bytes written in separate write operations, unless both reading and writing processes use some protocol that lets the reading process know how many bytes to read. Typically, there is no protocol, so the reading process reads from the pipe until all write handles to the pipe are closed, which causes the <B>ReadFile</B> function to return FALSE. When a child process's standard output is redirected, the child process calls <A HREF="ngwwie.htm"><B>CloseHandle</B></A> or terminates (which automatically closes the handle). Note that it is important for the parent process to close its handle to the write end of the pipe before trying to read from the pipe. Otherwise, its <B>ReadFile</B> operation cannot return FALSE because there is still an open handle to the write end of the pipe. </P>

<P>The procedure for redirecting standard input is similar to that for redirecting standard output, except that the pipe's read handle is used for the child's standard input. In this case, the parent process must ensure that the child process does not inherit the pipe's write handle. Otherwise, the <A HREF="cjnd8p.htm"><B>ReadFile</B></A> operation of the child process cannot return FALSE because the child process has an open handle to the write end of the pipe. </P>

<P>The parent process typically creates the read and write handles to the pipe so that they can be inherited by a child process. It does this by using <A HREF="xn_62d.htm"><B>CreatePipe</B></A>, specifying a <A HREF="be53kg.htm"><B>SECURITY_ATTRIBUTES</B></A> structure with the <B>bInheritHandle</B> member set to TRUE. When a child's standard input is redirected, the child process should not inherit the pipe's write handle. The parent process prevents inheritance by using the <A HREF="1ojqkwy.htm"><B>DuplicateHandle</B></A> function to create a noninheritable duplicate of the handle and then using <B>CloseHandle</B> to close the inheritable handle. </P>

<P>For an example program that uses anonymous pipes to redirect the standard handles of a child process, see <A HREF="glns2h.htm">Processes and Threads</A>. </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

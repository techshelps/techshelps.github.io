<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>LS_CHALLDATA</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="12kqvfr"></A><B>LS_CHALLDATA  <A HREF="4adcmca.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="r.l425.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="x03l1c.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P><B>Notice:</B>This is preliminary documentation for technology that will be supported in future releases of Microsoft Windows.</P>

<P>The <B>LS_CHALLDATA</B> structure is passed in the <A HREF="121wpy..htm"><B>LS_CHALLENGE</B></A> structure. The <B>LS_CHALLDATA</B> structure passes the challenge from the application to the license system, and passes the response from the license system back to the application. </P>

<P>typedef struct _LS_CHALLDATA {  </P>

<P>LS_ULONG SecretIndex; </P>

<P>LS_ULONG Random; </P>

<P>LS_MSG_DIGEST MsgDigest; </P>

<P>} LS_CHALLDATA; </P>

<P></P>

<P><B>Members</B></P>

<P><B>SecretIndex</B></P>

<P>Specifies the index of the secret value to be challenged. Note: The secret index is 1-based, so the first secret must have an index of 1. </P>

<P><B>Random</B></P>

<P>Specifies a random 32-bit value. </P>

<P><B>MsgDigest</B></P>

<P>Structure that contains the message digest that is computed by the MD4 Message-Digest Algorithm from RSA Data Security, Inc. </P>

<P></P>

<P><B>Remarks</B></P>

<P>In the basic challenge protocol, the application must choose the index of the secret to be challenged, and it must generate a random number. It must then compute a message digest using the MD4 Message-Digest Algorithm. The input to the algorithm is formed by concatenating the input parameters to the function being called, the random number, the index of the secret to be challenged, and the actual secret value. The first input parameter should be the name of the license service function being called, either <A HREF="engmhz.htm"><B>LSRequest</B></A> or <A HREF="76ddyy.htm"><B>LSUpdate</B></A>. All parameters should be in the order specified in the prototypes for those functions, and you should exclude the values of the <I>Challenge</I> and <I>LicenseHandle </I>parameters. Copy string parameters without null terminators. The application then passes the algorithm output to the license system. </P>

<P>The license system authenticates the message digest and computes a new message digest consisting of the input parameters to the license service function, the output parameters, the random number, the index of the secret to be challenged<I>,</I> and the actual secret value. The last output parameter should be the returned status. This new message digest is passed back to the application, which, in turn, authenticates it. All parameters should be in the order specified in the prototypes for the <A HREF="engmhz.htm"><B>LSRequest</B></A> or <A HREF="76ddyy.htm"><B>LSUpdate</B></A> function, and you should exclude the values of the <I>Challenge</I> and <I>LicenseHandle </I>parameters. Note that the actual secret value never passes between the application and the license system in plain text. </P>

<P>If the function <I>h(x)</I> is the algorithm that, given input <I>x</I>, returns the output of the MD4 Message-Digest Algorithm, then the following briefly illustrates the basic protocol.</P>

<P>The application passes the<B> LS_CHALLDATA </B>structure to the license system: </P>

<P><I>R, X,</I> <I>h</I>(<I>in</I> + <I>R </I>+ <I>X </I>+ <I>S (X) </I>) </P>

<P>The license system passes a new<B> <A HREF="7eg8nz.htm">LS_MSG_DIGEST</A> </B>to the application: </P>

<P><I>h</I>(<I>in </I>+<I> out </I>+ <I>R </I>+ <I>X </I>+<I> S (X) </I>) </P>

<P>where <I>R</I> is the random number, <I>X</I> is the index of the secret to be challenged, <I>in</I> is a byte stream that encodes the input parameters, <I>S</I> indicates a secret, <I>S (X) </I> is the actual secret value, <I>out</I> is a byte stream that encodes the output parameters, and + denotes concatenation. </P>

<P>This data format can be invalid if the <B>Protocol</B> specified in the <B>LS_CHALLENGE</B> structure is not LS_BASIC_PROTOCOL. Other protocols may define their own <B>LS_CHALLDATA</B> format. </P>

<P><B>See Also</B></P>

<P><A HREF="121wpy..htm"><B>LS_CHALLENGE</B></A>,<B> <A HREF="7eg8nz.htm">LS_MSG_DIGEST</A></B> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

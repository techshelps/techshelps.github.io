<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Designing a Window Procedure</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME=".ko5sh"></A><B>Designing a Window Procedure</B></P>

<P>The following example shows the structure of a typical window procedure. The window procedure uses the message argument in a <B>switch</B> statement with individual messages handled by separate <B>case</B> statements. Notice that each case returns a specific value for each message. For messages that it does not process, the window procedure calls the <A HREF="32d1nbh.htm"><B>DefWindowProc</B></A> function. </P>

<P>LRESULT CALLBACK MainWndProc(</P>

<P>HWND hwnd,        // handle of window</P>

<P>UINT uMsg,        // message identifier</P>

<P>WPARAM wParam,    // first message parameter</P>

<P>LPARAM lParam)    // second message parameter</P>

<P>{   </P>

<P></P>

<P>switch (uMsg) </P>

<P>{ </P>

<P>case WM_CREATE: </P>

<P>// Initialize the window. </P>

<P>return 0; </P>

<P></P>

<P>case WM_PAINT: </P>

<P>// Paint the window's client area. </P>

<P>return 0; </P>

<P></P>

<P>case WM_SIZE: </P>

<P>// Set the size and position of the window. </P>

<P>return 0; </P>

<P></P>

<P>case WM_DESTROY: </P>

<P>// Clean up window-specific data objects. </P>

<P>return 0; </P>

<P></P>

<P>// </P>

<P>// Process other messages. </P>

<P>// </P>

<P></P>

<P>default: </P>

<P>return DefWindowProc(hwnd, uMsg, wParam, lParam); </P>

<P>} </P>

<P>return 0; </P>

<P>} </P>

<P></P>

<P>The <A HREF="11ps3hu.htm">WM_NCCREATE</A> messageis sent just after your window is created, but if an application responds to this message by returning FALSE, <A HREF="rpk.pc.htm"><B>CreateWindowEx</B></A> function fails. The <A HREF="2re1yt3.htm">WM_CREATE</A> message is sent after your window is already created.</P>

<P>The <A HREF="0yqmho.htm">WM_DESTROY</A> message is sent when your window is about to be destroyed. The <A HREF="1vrgccm.htm"><B>DestroyWindow</B></A> function takes care of destroying any child windows of the window being destroyed. The <A HREF="jw500a.htm">WM_NCDESTROY</A> message is sent just before a window is destroyed.</P>

<P>At the very least, a window procedure should process the <A HREF="f55xz2.htm">WM_PAINT</A> message to draw itself. Typically, it should handle mouse and keyboard messages as well. Consult the descriptions of individual messages to determine whether your window procedure should handle them. </P>

<P>Your application can call the <A HREF="32d1nbh.htm"><B>DefWindowProc</B></A> function as part of the processing of a message. In such a case, the application can modify the message parameters before passing the message to <B>DefWindowProc</B>, or it can continue with the default processing after performing its own operations. </P>

<P>A dialog box procedure receives a <A HREF="ii1w.b.htm">WM_INITDIALOG</A> message instead of a <A HREF="2re1yt3.htm">WM_CREATE</A> message and does not pass unprocessed messages to the <A HREF="l1yo73.htm"><B>DefDlgProc</B></A> function. Otherwise, a dialog box procedure is exactly the same as a window procedure. </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>RasDialFunc1</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="2xbtbfx"></A><B>RasDialFunc1  <A HREF=".z032s.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="35kj_0r.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="lrsi7i.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>A <B>RasDialFunc1</B> function is an application-defined or library-defined callback function that the <A HREF="1zuv.va.htm"><B>RasDial</B></A> function calls when a change of state occurs during a remote access connection process. A <B>RasDialFunc1</B> function is comparable to a <A HREF="0arw_f.htm"><B>RasDialFunc</B></A> function, but is enhanced by the addition of two parameters: a handle to the RAS connection, and an extended error code.</P>

<P><B>VOID WINAPI RasDialFunc1(</B></P>

<TABLE cols=2 width=504>

<TR VALIGN="top">
<TD width=40%><B>HRASCONN</B> <I>hrasconn</I><B>,</B></TD>
<TD width=60%>// handle to RAS connection</TD>
</TR>

<TR VALIGN="top">
<TD width=40%><B>    UINT</B> <I>unMsg</I><B>,</B></TD>
<TD width=60%>// type of event that has occurred</TD>
</TR>

<TR VALIGN="top">
<TD width=40%><B>    RASCONNSTATE</B> <I>rascs</I><B>,</B></TD>
<TD width=60%>// connection state about to be entered</TD>
</TR>

<TR VALIGN="top">
<TD width=40%><B>    DWORD</B> <I>dwError</I><B>,</B></TD>
<TD width=60%>// error that may have occurred</TD>
</TR>

<TR VALIGN="top">
<TD width=40%><B>    DWORD</B> <I>dwExtendedError</I></TD>
<TD width=60%>// extended error information for some errors</TD>
</TR>

<TR VALIGN="top">
<TD width=40%><B>   );</B></TD>
<TD width=60%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hrasconn</I></P>

<P>Provides a handle to the RAS connection, as returned by <B>RasDial</B>.</P>

<P><I>unMsg</I></P>

<P>Specifies the type of event that has occurred. Currently, the only event defined is WM_RASDIALEVENT.</P>

<P><I>rascs</I></P>

<P>Specifies a <A HREF="244j07_.htm"><B>RASCONNSTATE</B></A> enumerator value that indicates the state the <B>RasDial</B> remote access connection process is about to enter. </P>

<P><I>dwError</I></P>

<P>Specifies the error that has occurred. If no error has occurred, <I>dwError</I> is zero.</P>

<P><A HREF="1zuv.va.htm"><B>RasDial</B></A> calls <B>RasDialFunc1</B> with <I>dwError</I> set to zero upon entry to each connection state. If an error occurs within a state, <B>RasDial</B> calls <B>RasDialFunc1</B> again with a nonzero <I>dwError</I> value. </P>

<P>In some error cases, the <I>dwExtendedError</I> parameter contains extended error information.</P>

<P><I>dwExtendedError</I></P>

<P>Specifies extended error information for certain nonzero values of <I>dwError</I>. For all other values of <I>dwError, dwExtendedError</I> is zero.</P>

<P>The contents of <I>dwExtendedError</I> are defined for values of <I>dwError</I> as follows:</P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=59%><B><I>dwError</I></B></TD>
<TD width=41%><B><I>dwExtendedError</I></B></TD>
</TR>

<TR VALIGN="top">
<TD width=59%>ERROR_SERVER_NOT_RESPONDING</TD>
<TD width=41%>Specifies the NetBIOS error that occurred.</TD>
</TR>

<TR VALIGN="top">
<TD width=59%>ERROR_NETBIOS_ERROR</TD>
<TD width=41%>Specifies the NetBIOS error that occurred.</TD>
</TR>

<TR VALIGN="top">
<TD width=59%>ERROR_AUTH_INTERNAL</TD>
<TD width=41%>Specifies an internal diagnostics code. </TD>
</TR>

<TR VALIGN="top">
<TD width=59%>ERROR_CANNOT_GET_LANA</TD>
<TD width=41%>Specifies a routing error code, which is a RAS error. </TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Return Values</B></P>

<P>None.</P>

<P><B>Remarks</B></P>

<P>A <B>RasDial</B> connection operation is suspended during a call to a <B>RasDialFunc1</B> callback function. For that reason, your <B>RasDialFunc1</B> implementation should generally return as quickly as possible. There are two exceptions to that rule. Asynchronous (slow) devices such as modems often have time-out periods measured in seconds rather than milliseconds; a less-than-prompt return from a <B>RasDialFunc1</B> function is generally not a problem. The prompt return requirement also does not apply when <I>dwError</I> is nonzero, indicating that an error has occurred. It is safe, for example, to put up an error dialog box and wait for user input. </P>

<P>Your <B>RasDialFunc1</B> implementation should not depend on the order or occurrence of particular <B>RASCONNSTATE</B> connection states, because this may vary between platforms.</P>

<P>Do not call the <B>RasDial</B> function from within a <B>RasDialFunc1</B> callback function. You can call the <A HREF="11ewq3o.htm"><B>RasGetConnectStatus</B></A>, <A HREF="q.5n8n.htm"><B>RasEnumEntries</B></A>, <A HREF="lydo7.htm"><B>RasEnumConnections</B></A>, <A HREF="1n0y6uk.htm"><B>RasGetErrorString</B></A>, and <A HREF="0_qzpb.htm"><B>RasHangUp</B></A> functions from within the callback function. For example, calling <B>RasGetConnectStatus</B> from within a callback function would be useful for determining the name and type of the connecting device. </P>

<P>Note that, for convenience, <B>RasHangUp</B> can be called from within a <B>RasDialFunc1</B> callback function. However, much of the hang-up processing occurs after the <B>RasDialFunc1</B> callback function has returned. </P>

<P><B>RasDialFunc1</B> is a placeholder for the application-defined or library-defined function name. </P>

<P><B>See Also</B></P>

<P><A HREF="1zuv.va.htm"><B>RasDial</B></A>, <A HREF="0arw_f.htm"><B>RasDialFunc</B></A>, <A HREF="2xbtbfy.htm"><B>RasDialFunc2</B></A>, <A HREF="244j07_.htm"><B>RASCONNSTATE</B></A>, <A HREF="lydo7.htm"><B>RasEnumConnections</B></A>, <A HREF="q.5n8n.htm"><B>RasEnumEntries</B></A>, <A HREF="11ewq3o.htm"><B>RasGetConnectStatus</B></A>, <A HREF="1n0y6uk.htm"><B>RasGetErrorString</B></A>, <A HREF="0_qzpb.htm"><B>RasHangUp</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>MsgWaitForMultipleObjects</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="12rbmac"></A><B>MsgWaitForMultipleObjects  <A HREF="9vnp05.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="36dp5f5.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="24h9od3.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>MsgWaitForMultipleObjects</B> function returns when one of the following occurs: </P>

<P>·Either any one or all of the specified objects are in the signaled state. The objects can include input event objects, which you specify using the <I>dwWakeMask</I> parameter. </P>

<P>·The time-out interval elapses. </P>

<P></P>

<P>Note that <B>MsgWaitForMultipleObjects</B> doesn't return if there was previously unread input of the specified type in the queue. It only wakes up when input arrives. </P>

<P><B>DWORD MsgWaitForMultipleObjects(</B></P>

<TABLE cols=2 width=515>

<TR VALIGN="top">
<TD width=39%><B>DWORD</B> <I>nCount</I><B>,</B></TD>
<TD width=61%>// number of handles in the object handle array  </TD>
</TR>

<TR VALIGN="top">
<TD width=39%><B>    LPHANDLE</B> <I>pHandles</I><B>,</B></TD>
<TD width=61%>// pointer to the object-handle array </TD>
</TR>

<TR VALIGN="top">
<TD width=39%><B>    BOOL</B> <I>fWaitAll</I><B>,</B></TD>
<TD width=61%>// wait for all or wait for one </TD>
</TR>

<TR VALIGN="top">
<TD width=39%><B>    DWORD</B> <I>dwMilliseconds</I><B>,</B></TD>
<TD width=61%>// time-out interval in milliseconds </TD>
</TR>

<TR VALIGN="top">
<TD width=39%><B>    DWORD</B> <I>dwWakeMask</I> </TD>
<TD width=61%>// type of input events to wait for </TD>
</TR>

<TR VALIGN="top">
<TD width=39%><B>   );</B></TD>
<TD width=61%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>nCount</I></P>

<P>Specifies the number of object handles in the array pointed to by <I>pHandles</I>. The maximum number of object handles is MAXIMUM_WAIT_OBJECTS minus one. </P>

<P><I>pHandles</I></P>

<P>Points to an array of object handles. For a list of the object types whose handles can be specified, see the following Remarks section. The array can contain handles of objects of different types. </P>

<P><B>Windows NT:</B> The handles must have SYNCHRONIZE access. </P>

<P><I>fWaitAll</I></P>

<P>Specifies the wait type. If TRUE, the function returns when the states of all objects in the <I>pHandles</I> array, including input events, have been set to signaled. If FALSE, the function returns when the state of any one of the objects is set to signaled. In the latter case, the return value indicates the object whose state caused the function to return. </P>

<P><I>dwMilliseconds</I></P>

<P>Specifies the time-out interval, in milliseconds. The function returns if the interval elapses, even if the criteria specified by the <I>fWaitAll</I> or <I>dwWakeMask</I> parameter have not been met. If <I>dwMilliseconds</I> is zero, the function tests the states of the specified objects and returns immediately. If <I>dwMilliseconds</I> is INFINITE, the function's time-out interval never elapses. </P>

<P><I>dwWakeMask</I></P>

<P>Specifies input types for which an input event object handle will be added to the array of object handles. This parameter can be any combination of the following values: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=36%><B>Value</B></TD>
<TD width=64%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=36%>QS_ALLINPUT</TD>
<TD width=64%>Any message is in the queue.</TD>
</TR>

<TR VALIGN="top">
<TD width=36%>QS_HOTKEY</TD>
<TD width=64%>A WM_HOTKEY message is in the queue.</TD>
</TR>

<TR VALIGN="top">
<TD width=36%>QS_INPUT</TD>
<TD width=64%>An input message is in the queue.</TD>
</TR>

<TR VALIGN="top">
<TD width=36%>QS_KEY</TD>
<TD width=64%>A WM_KEYUP, WM_KEYDOWN, WM_SYSKEYUP, or WM_SYSKEYDOWN message is in the queue.</TD>
</TR>

<TR VALIGN="top">
<TD width=36%>QS_MOUSE</TD>
<TD width=64%>A WM_MOUSEMOVE message or mouse-button message (WM_LBUTTONUP, WM_RBUTTONDOWN, and so on).</TD>
</TR>

<TR VALIGN="top">
<TD width=36%>QS_MOUSEBUTTON</TD>
<TD width=64%>A mouse-button message (WM_LBUTTONUP, WM_RBUTTONDOWN, and so on).</TD>
</TR>

<TR VALIGN="top">
<TD width=36%>QS_MOUSEMOVE</TD>
<TD width=64%>A WM_MOUSEMOVE message is in the queue.</TD>
</TR>

<TR VALIGN="top">
<TD width=36%>QS_PAINT</TD>
<TD width=64%>A WM_PAINT message is in the queue.</TD>
</TR>

<TR VALIGN="top">
<TD width=36%>QS_POSTMESSAGE</TD>
<TD width=64%>A posted message (other than those just listed) is in the queue.</TD>
</TR>

<TR VALIGN="top">
<TD width=36%>QS_SENDMESSAGE</TD>
<TD width=64%>A message sent by another thread or application is in the queue.</TD>
</TR>

<TR VALIGN="top">
<TD width=36%>QS_TIMER</TD>
<TD width=64%>A WM_TIMER message is in the queue.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value indicates the event that caused the function to return. The successful return value is one of the following: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=62%><B>Value</B></TD>
<TD width=38%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=62%>WAIT_OBJECT_0 to <BR>
(WAIT_OBJECT_0 + <I>nCount</I> - 1)</TD>
<TD width=38%>If <I>fWaitAll</I> is TRUE, the return value indicates that the state of all specified objects is signaled. If <I>fWaitAll</I> is FALSE, the return value minus WAIT_OBJECT_0 indicates the <I>pHandles</I> array index of the object that satisfied the wait.</TD>
</TR>

<TR VALIGN="top">
<TD width=62%>WAIT_OBJECT_0 + <I>nCount</I></TD>
<TD width=38%>Input of the type specified in the <I>dwWakeMask</I> parameter is available in the thread's input queue.</TD>
</TR>

<TR VALIGN="top">
<TD width=62%>WAIT_ABANDONED_0 to <BR>
(WAIT_ABANDONED_0 + <I>nCount</I> - 1)</TD>
<TD width=38%>If <I>fWaitAll</I> is TRUE, the return value indicates that the state of all specified objects is signaled and at least one of the objects is an abandoned mutex object. If <I>fWaitAll</I> is FALSE, the return value minus WAIT_ABANDONED_0 indicates the <I>pHandles</I> array index of an abandoned mutex object that satisfied the wait.</TD>
</TR>

<TR VALIGN="top">
<TD width=62%>WAIT_TIMEOUT</TD>
<TD width=38%>The time-out interval elapsed and the conditions specified by the <I>fWaitAll</I> and <I>dwWakeMask</I> parameters were not satisfied.</TD>
</TR>
</TABLE><BR>

<P></P>

<P>If the function fails, the return valueis 0xFFFFFFFF. To get extended error information, call <A HREF="11c2vs7.htm"><B>GetLastError</B></A>. </P>

<P><B>Remarks</B></P>

<P>The <B>MsgWaitForMultipleObjects</B> function determines whether the wait criteria have been met. If the criteria have not been met, the calling thread enters an efficient wait state, using very little processor time while waiting for the conditions of the wait criteria to be met. </P>

<P>The function does not modify the states of the specified objects until the states of all objects have been set to signaled. For example, a mutex can be signaled, but the thread does not get ownership until the states of the other objects have also been set to signaled. In the meantime, some other thread may get ownership of the mutex, thereby setting its state to nonsignaled. </P>

<P>When <I>fWaitAll</I> is TRUE, the function's wait is completed only when the states of all objects have been set to signaled, including the input events specified by <I>dwWaskMask</I>. Therefore, setting <I>fWaitAll</I> to TRUE prevents input from being processed until the state of all objects in the <I>pHandles</I> array have been set to signaled. For this reason, if you set <I>fWaitAll</I> to TRUE, you should use a short timeout value in <I>dwMilliseconds</I>. If you have a thread that creates windows waiting for all objects in the <I>pHandles</I> array, including input events specified by <I>dwWakeMask</I>, with no timeout interval, the system will deadlock. This is because threads that create windows must process messages. DDE sends message to all windows in the system. Therefore, if a thread creates windows, do not set the <I>fWaitAll</I> parameter to TRUE in calls to <B>MsgWaitForMultipleObjects</B> made from that thread.</P>

<P>Before returning, a wait function modifies the state of some types of synchronization objects. Modification occurs only for the object or objects whose signaled state caused the function to return. For example, the count of a semaphore object is decreased by one. </P>

<P>The <B>MsgWaitForMultipleObjects</B> function can specify handles of any of the following object types in the <I>pHandles</I> array: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=28%><B>Object</B></TD>
<TD width=72%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=28%>Change notification</TD>
<TD width=72%>The <A HREF="pu4_hm.htm"><B>FindFirstChangeNotification</B></A> function returns the handle. The state of a change notification object is set to signaled when a specified type of change occurs within a specified directory or directory tree.</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>Console input</TD>
<TD width=72%>The <A HREF="xn35yd.htm"><B>CreateFile</B></A> function returns the handle when the CONIN$ value is specified, or the <A HREF="1b8l_fr.htm"><B>GetStdHandle</B></A> function returns the handle. The state of the object is set to signaled when there is unread input in the console's input buffer and nonsignaled when the input buffer is empty.</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>Event</TD>
<TD width=72%>The <A HREF="j_zbjv.htm"><B>CreateEvent</B></A> or <A HREF="qtg5jz.htm"><B>OpenEvent</B></A> function returns the handle. The state of an event object is set explicitly to signaled by the <A HREF="at02d..htm"><B>SetEvent</B></A> or <A HREF="7d.l0zu.htm"><B>PulseEvent</B></A> function. The state of a manual-reset event object must be reset explicitly to nonsignaled by the <A HREF="1.ih1gv.htm"><B>ResetEvent</B></A> function. For an auto-reset event object, the wait function resets the object state to nonsignaled before returning. Event objects are also used in overlapped operations, in which the state is set by the system.</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>Mutex</TD>
<TD width=72%>The <A HREF="jeyqaz.htm"><B>CreateMutex</B></A> or <A HREF="4s0dun.htm"><B>OpenMutex</B></A> function returns the handle. The state of a mutex object is signaled when it is not owned by any thread. The wait function requests ownership of the mutex for the calling thread, changing the mutex state to nonsignaled when ownership is granted.</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>Process</TD>
<TD width=72%>The <A HREF="5fbj_xx.htm"><B>CreateProcess</B></A> or <A HREF="9mlgut.htm"><B>OpenProcess</B></A> function returns the handle. The state of a process object is set to signaled when the process terminates.</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>Semaphore</TD>
<TD width=72%>The <A HREF="41re8tu.htm"><B>CreateSemaphore</B></A> or <A HREF="b3n75z.htm"><B>OpenSemaphore</B></A> function returns the handle. A semaphore object maintains a count between zero and the maximum count specified during its creation. Its state is set to signaled when its count is greater than zero and nonsignaled when its count is zero. If the current state of the semaphore is signaled, the wait function decreases the count by one.</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>Thread</TD>
<TD width=72%>The <A HREF="5fbj_xx.htm"><B>CreateProcess</B></A>, <A HREF="70ts0y.htm"><B>CreateThread</B></A>, or <A HREF="19iu6kt.htm"><B>CreateRemoteThread</B></A> function returns the handle. The state of a thread object is set to signaled when the thread terminates.</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>Timer</TD>
<TD width=72%>The <A HREF="12bp5e6.htm"><B>CreateWaitableTimer</B></A> or <A HREF="2z5sbu.htm"><B>OpenWaitableTimer</B></A> function returns the handle. Activate the timer by calling the <A HREF="c26jbn.htm"><B>SetWaitableTimer</B></A> function. The state of an active timer is set to signaled when it reaches its due time. You can deactivate the timer by calling the <A HREF="w6gyxd.htm"><B>CancelWaitableTimer</B></A> function.</TD>
</TR>
</TABLE><BR>

<P></P>

<P>In some circumstances, you can specify a handle of a file, named pipe, or communications device as a synchronization object in <I>lpHandles</I>. However, their use for this purpose is discouraged.</P>

<P><B>See Also</B></P>

<P><A HREF="w6gyxd.htm"><B>CancelWaitableTimer</B></A>, <A HREF="j_zbjv.htm"><B>CreateEvent</B></A>, <A HREF="xn35yd.htm"><B>CreateFile</B></A>, <A HREF="jeyqaz.htm"><B>CreateMutex</B></A>, <A HREF="5fbj_xx.htm"><B>CreateProcess</B></A>, <A HREF="19iu6kt.htm"><B>CreateRemoteThread</B></A>, <A HREF="41re8tu.htm"><B>CreateSemaphore</B></A>, <A HREF="70ts0y.htm"><B>CreateThread</B></A>, <A HREF="pu4_hm.htm"><B>FindFirstChangeNotification</B></A>, <A HREF="1b8l_fr.htm"><B>GetStdHandle</B></A>, <A HREF="14gl8uz.htm"><B>MsgWaitForMultipleObjectsEx</B></A> <A HREF="qtg5jz.htm"><B>OpenEvent</B></A>, <A HREF="4s0dun.htm"><B>OpenMutex</B></A>, <A HREF="9mlgut.htm"><B>OpenProcess</B></A>, <A HREF="b3n75z.htm"><B>OpenSemaphore</B></A>, <A HREF="2z5sbu.htm"><B>OpenWaitableTimer</B></A>, <A HREF="7d.l0zu.htm"><B>PulseEvent</B></A>, <A HREF="1.ih1gv.htm"><B>ResetEvent</B></A>, <A HREF="at02d..htm"><B>SetEvent</B></A></P>

<P></P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

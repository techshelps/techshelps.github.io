<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>Data Handlers</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="y7.fiv"></A><B>Data Handlers</B></P>

<P>When a file is dragged from the shell (or copied to the clipboard from the shell), the shell creates a default <B>IDataObject</B> interface that supports standard clipboard formats (CF_HDROP, "Shell IDList Array", and so on). An application can add more clipboard formats by providing a data handler for the file type. A data handler must support both the <B>IPersistFile</B> and <B>IDataObject</B> interfaces. The shell initializes a data handler by calling the <B>IPersistFile::Load</B> member function. When a data handler is provided, the default <B>IDataObject</B> interface delegates some member function calls to the data handler so that the additional clipboard data formats become available to the drop target. </P>

<P>You register a data handler by adding a <B>DataHandler</B> key and class identifier for the handler under the <B>shellex</B> key for the file type as shown in the following example.</P>

<P>shellex  </P>

<P>DataHandler = {00000000-1111-2222-3333-00000000000003} </P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

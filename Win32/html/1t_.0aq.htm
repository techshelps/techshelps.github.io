<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>Allocating a Text Buffer</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="1t_.0aq"></A><B>Allocating a Text Buffer</B></P>

<P>When Windows creates an edit control, it automatically creates a text buffer, sets its initial size, and increases the size as necessary. The size can be up to a predefined limit of approximately 32 kilobytes for single-line edit controls. Because this limit can change, it is called a soft limit. An application can set a hard limit to the buffer size by sending an <A HREF="116_reb.htm">EM_SETLIMITTEXT</A> message to the edit control. If the buffer exceeds either limit, Windows sends the application an <A HREF="yixn8..htm">EN_ERRSPACE</A> message. An application can retrieve the current text limit by sending an <A HREF="317u_q..htm">EM_GETLIMITTEXT</A> message.</P>

<P>Windows typically creates an edit control buffer in a dialog box, using memory outside the application's data segment. An application can suppress this default allocation behavior and create the buffer from its local heap by using the DS_LOCALEDIT style when creating the edit control. An application that uses the DS_LOCALEDIT style is responsible for all buffer allocations. To make the initial allocation, an application can call the <A HREF="2_d2ee.htm"><B>LocalAlloc</B></A> function and pass the returned buffer handle to the edit control by sending it an <A HREF="1.ngpog.htm">EM_SETHANDLE</A> message. To make subsequent allocations (in response to an EN_ERRSPACE message, for example), an application should save the current buffer content (if necessary) and obtain a new buffer as follows: </P>

<P>1.Retrieve the handle of the memory currently allocated for the text in a multiline edit control by sending the control an <A HREF="_9f4x0.htm">EM_GETHANDLE</A> message. </P>

<P>2.Free the buffer by calling the <A HREF="0wv2ny.htm"><B>LocalFree</B></A> function. </P>

<P>3.Obtain a new buffer (and buffer handle) by calling <B>LocalAlloc</B>. </P>

<P>4.Give the buffer handle to Windows by sending the control an <A HREF="1.ngpog.htm">EM_SETHANDLE</A> message. </P>

<P></P>

<P>The EM_SETHANDLE and <A HREF="_9f4x0.htm">EM_GETHANDLE</A> messages apply only to multiline edit controls. </P>

<P>An application that uses the default allocation behavior (that is, does not use the DS_LOCALEDIT style) must not send EM_SETHANDLE and EM_GETHANDLE messages to the edit control. </P>

<P>Sending an <A HREF="1.ngpog.htm">EM_SETHANDLE</A> message has several side effects: it clears the undo flag (making the <A HREF="_acuq1.htm">EM_CANUNDO</A> message return zero), it clears the modify flag (making the <A HREF="bg.9rn.htm">EM_GETMODIFY</A> message return zero), and it redraws the edit control window. </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

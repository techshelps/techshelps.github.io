<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Creating a Combo-box Toolbar</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="bnfxpg"></A><B>Creating a Combo-box Toolbar</B></P>

<P>Following are the window procedure for the toolbar and the subclass procedure for the two combo boxes. </P>

<P>#define WM_TAB (WM_USER)  </P>

<P>#define WM_ESC (WM_USER + 1) </P>

<P>#define WM_ENTER (WM_USER + 2) </P>

<P></P>

<P>HWND hwndMain; </P>

<P>HWND hwndEdit; </P>

<P>WNDPROC lpfnEditWndProc; /* original window procedure for */ </P>

<P>/*   the combo box edit windows  */ </P>

<P></P>

<P>int cyToolbar;           /* toolbar window height        */ </P>

<P></P>

<P>/******************************************************** </P>

<P></P>

<P>FUNCTION:   ToolbarWindowProc </P>

<P></P>

<P>PURPOSE:    Window procedure for the toolbar window </P>

<P></P>

<P>*********************************************************/ </P>

<P></P>

<P>LRESULT CALLBACK ToolbarWindowProc(hwnd, msg, wParam, lParam) </P>

<P>HWND hwnd; </P>

<P>UINT msg; </P>

<P>WPARAM wParam; </P>

<P>LPARAM lParam; </P>

<P>{ </P>

<P>static HWND   hwndEdit1; </P>

<P>static HWND   hwndEdit2; </P>

<P>static HWND   hwndCombo1; </P>

<P>static HWND   hwndCombo2; </P>

<P>. </P>

<P>. </P>

<P>. </P>

<P>POINT       pt; </P>

<P>DWORD       dwBaseUnits; </P>

<P>HWND        hwndCombo; </P>

<P>DWORD       dwIndex; </P>

<P></P>

<P>switch (msg) { </P>

<P>case WM_CREATE: </P>

<P></P>

<P>/* Create two combo box child windows. */ </P>

<P></P>

<P>dwBaseUnits = GetDialogBaseUnits(); </P>

<P></P>

<P>hwndCombo1 = CreateWindow("COMBOBOX", "", </P>

<P>CBS_DROPDOWN | WS_CHILD | WS_VISIBLE, </P>

<P>(6 * LOWORD(dwBaseUnits)) / 4, </P>

<P>(2 * HIWORD(dwBaseUnits)) / 8, </P>

<P>(100 * LOWORD(dwBaseUnits)) / 4, </P>

<P>(50 * HIWORD(dwBaseUnits)) / 8, </P>

<P>hwnd, NULL, hinst, NULL); </P>

<P></P>

<P>hwndCombo2 = CreateWindow("COMBOBOX", "", </P>

<P>CBS_DROPDOWN | WS_CHILD | WS_VISIBLE, </P>

<P>(112 * LOWORD(dwBaseUnits)) / 4, </P>

<P>(2 * HIWORD(dwBaseUnits)) / 8, </P>

<P>(100 * LOWORD(dwBaseUnits)) / 4, </P>

<P>(50 * HIWORD(dwBaseUnits)) / 8, </P>

<P>hwnd, NULL, hinst, NULL); </P>

<P></P>

<P>/* Get the edit window handle for each combo box. */ </P>

<P></P>

<P>pt.x = 1; </P>

<P>pt.y = 1; </P>

<P>hwndEdit1 = ChildWindowFromPoint(hwndCombo1, pt); </P>

<P>hwndEdit2 = ChildWindowFromPoint(hwndCombo2, pt); </P>

<P></P>

<P>/* </P>

<P>* Change the window procedure for both edit windows </P>

<P>* to the subclass procedure. </P>

<P>*/ </P>

<P></P>

<P></P>

<P>lpfnEditWndProc = (WNDPROC) SetWindowLong(hwndEdit1, </P>

<P>GWL_WNDPROC, (DWORD) SubClassProc); </P>

<P></P>

<P>SetWindowLong(hwndEdit2, GWL_WNDPROC, </P>

<P>(DWORD) SubClassProc); </P>

<P></P>

<P>break; </P>

<P></P>

<P>case WM_SETFOCUS: </P>

<P>SetFocus(hwndCombo1); </P>

<P>break; </P>

<P></P>

<P>case WM_TAB: </P>

<P>if (GetFocus() == hwndEdit1) </P>

<P>SetFocus(hwndCombo2); </P>

<P>else </P>

<P>SetFocus(hwndCombo1); </P>

<P>break; </P>

<P></P>

<P>case WM_ESC: </P>

<P></P>

<P>hwndCombo = GetFocus() == hwndEdit1 ? </P>

<P>hwndCombo1 : hwndCombo2; </P>

<P></P>

<P>/* Clear the current selection. */ </P>

<P></P>

<P>SendMessage(hwndCombo, CB_SETCURSEL, </P>

<P>(WPARAM) (-1), 0); </P>

<P></P>

<P>/* Set the focus to the main window. */ </P>

<P></P>

<P>SetFocus(hwndMain); </P>

<P>break; </P>

<P></P>

<P>case WM_ENTER: </P>

<P>hwndCombo = GetFocus() == hwndEdit1 ? </P>

<P>hwndCombo1 : hwndCombo2; </P>

<P>SetFocus(hwndMain); </P>

<P></P>

<P>/* If there is no current selection, set one. */ </P>

<P></P>

<P>if (SendMessage(hwndCombo, CB_GETCURSEL, 0, 0) </P>

<P>== CB_ERR) { </P>

<P>if (SendMessage(hwndCombo, WM_GETTEXT, </P>

<P>sizeof(achTemp), (LPARAM) achTemp) == 0) </P>

<P>break;      /* empty selection field */ </P>

<P>dwIndex = SendMessage(hwndCombo, </P>

<P>CB_FINDSTRINGEXACT, (WPARAM) (-1), </P>

<P>(LPARAM) achTemp); </P>

<P></P>

<P>/* Add the string, if necessary, and select it. */ </P>

<P></P>

<P>if (dwIndex == CB_ERR) </P>

<P>dwIndex = SendMessage(hwndCombo, CB_ADDSTRING, </P>

<P>0, (LPARAM) achTemp); </P>

<P>if (dwIndex != CB_ERR) </P>

<P>SendMessage(hwndCombo, CB_SETCURSEL, </P>

<P>dwIndex, 0); </P>

<P>} </P>

<P>break; </P>

<P></P>

<P>. </P>

<P>.   /* Process additional messages. */ </P>

<P>. </P>

<P></P>

<P>default: </P>

<P>return DefWindowProc(hwnd, msg, wParam, lParam); </P>

<P>} </P>

<P>return 0; </P>

<P>} </P>

<P></P>

<P></P>

<P>/******************************************************** </P>

<P></P>

<P>FUNCTION:   SubClassProc </P>

<P></P>

<P>PURPOSE:    Process TAB and ESCAPE keys, and pass all </P>

<P>other messages to the class window </P>

<P>procedure. </P>

<P></P>

<P>*********************************************************/ </P>

<P></P>

<P>LRESULT CALLBACK SubClassProc(hwnd, msg, wParam, lParam) </P>

<P>HWND hwnd; </P>

<P>UINT msg; </P>

<P>WPARAM wParam; </P>

<P>LPARAM lParam; </P>

<P>{ </P>

<P>switch (msg) { </P>

<P>case WM_KEYDOWN: </P>

<P>switch (wParam) { </P>

<P>case VK_TAB: </P>

<P>SendMessage(hwndToolbar, WM_TAB, 0, 0); </P>

<P>return 0; </P>

<P>case VK_ESCAPE: </P>

<P>SendMessage(hwndToolbar, WM_ESC, 0, 0); </P>

<P>return 0; </P>

<P>case VK_RETURN: </P>

<P>SendMessage(hwndToolbar, WM_ENTER, 0, 0); </P>

<P>return 0; </P>

<P>} </P>

<P>break; </P>

<P></P>

<P>case WM_KEYUP: </P>

<P>case WM_CHAR: </P>

<P>switch (wParam) { </P>

<P>case VK_TAB: </P>

<P>case VK_ESCAPE: </P>

<P>case VK_RETURN: </P>

<P>return 0; </P>

<P>} </P>

<P>} </P>

<P></P>

<P>/* </P>

<P>* Call the original window procedure for default </P>

<P>* processing. </P>

<P>*/ </P>

<P></P>

<P>return CallWindowProc(lpfnEditWndProc, hwnd, </P>

<P>msg, wParam, lParam); </P>

<P>} </P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

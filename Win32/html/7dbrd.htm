<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>Using the Owner-Display Clipboard Format</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="7dbrd"></A><B>Using the Owner-Display Clipboard Format</B></P>

<P>If a window places information on the clipboard by using the CF_OWNERDISPLAY clipboard format, it must do the following: </P>

<P>感rocess the <A HREF="7e1fm0.htm">WM_PAINTCLIPBOARD</A> message. This message is sent to the clipboard owner when a portion of the clipboard viewer window must be repainted. </P>

<P>感rocess the <A HREF="_65qs7.htm">WM_SIZECLIPBOARD</A> message. This message is sent to the clipboard owner when the clipboard viewer window has been resized or its content has changed. </P>

<P>Typically, a window responds to this message by setting the scroll positions and ranges for the clipboard viewer window. In response to this message, the Label application also updates a <A HREF="1sygbbp.htm"><B>SIZE</B></A> structure for the clipboard viewer window. </P>

<P>感rocess the <A HREF="14zkvvi.htm">WM_HSCROLLCLIPBOARD</A> and <A HREF="uha87t.htm">WM_VSCROLLCLIPBOARD</A> messages. These messages are sent to the clipboard owner when a scroll bar event occurs in the clipboard viewer window. </P>

<P>感rocess the <A HREF="kbdr1j.htm">WM_ASKCBFORMATNAME</A> message. The clipboard viewer window sends this message to an application to retrieve the name of the owner-display format. </P>

<P></P>

<P>The window procedure for the Label application processes these messages, as follows. </P>

<P>LRESULT CALLBACK MainWindowProc(hwnd, msg, wParam, lParam)  </P>

<P>HWND hwnd; </P>

<P>UINT msg; </P>

<P>WPARAM wParam; </P>

<P>LPARAM lParam; </P>

<P>{ </P>

<P>static RECT rcViewer; </P>

<P></P>

<P>RECT rc; </P>

<P>LPRECT lprc; </P>

<P>LPPAINTSTRUCT lpps; </P>

<P></P>

<P>switch (msg) </P>

<P>{ </P>

<P>//</P>

<P>// Handle other messages.</P>

<P>//</P>

<P>case WM_PAINTCLIPBOARD: </P>

<P>// Determine the dimensions of the label. </P>

<P></P>

<P>SetRect(&amp;rc, 0, 0, </P>

<P>pboxLocalClip-&gt;rcText.right + CX_MARGIN, </P>

<P>pboxLocalClip-&gt;rcText.top * 2 + cyText </P>

<P>); </P>

<P></P>

<P>// Center the image in the clipboard viewer window. </P>

<P></P>

<P>if (rc.right &lt; rcViewer.right) </P>

<P>{ </P>

<P>rc.left = (rcViewer.right - rc.right) / 2; </P>

<P>rc.right += rc.left; </P>

<P>} </P>

<P>if (rc.bottom &lt; rcViewer.bottom) </P>

<P>{ </P>

<P>rc.top = (rcViewer.bottom - rc.bottom) / 2; </P>

<P>rc.bottom += rc.top; </P>

<P>} </P>

<P></P>

<P>// Paint the image, using the specified PAINTSTRUCT </P>

<P>// structure, by calling the application-defined </P>

<P>// PaintLabel function. </P>

<P></P>

<P>lpps = (LPPAINTSTRUCT) GlobalLock((HGLOBAL) lParam); </P>

<P>PaintLabel(lpps, pboxLocalClip, &amp;rc); </P>

<P>GlobalUnlock((HGLOBAL) lParam); </P>

<P>break; </P>

<P></P>

<P>case WM_SIZECLIPBOARD: </P>

<P>// Save the dimensions of the window in a static </P>

<P>// RECT structure. </P>

<P></P>

<P>lprc = (LPRECT) GlobalLock((HGLOBAL) lParam); </P>

<P>memcpy(&amp;rcViewer, lprc, sizeof(RECT)); </P>

<P>GlobalUnlock((HGLOBAL) lParam); </P>

<P></P>

<P>// Set the scroll ranges to zero (thus eliminating </P>

<P>// the need to process the WM_HSCROLLCLIPBOARD and </P>

<P>// WM_VSCROLLCLIPBOARD messages). </P>

<P></P>

<P>SetScrollRange((HWND) wParam, SB_HORZ, 0, 0, TRUE); </P>

<P>SetScrollRange((HWND) wParam, SB_VERT, 0, 0, TRUE); </P>

<P></P>

<P>break; </P>

<P></P>

<P>case WM_ASKCBFORMATNAME: </P>

<P>LoadString(hinst, IDS_OWNERDISPLAY, </P>

<P>(LPSTR) lParam, wParam); </P>

<P>break; </P>

<P></P>

<P>default: </P>

<P>return DefWindowProc(hwnd, msg, wParam, lParam); </P>

<P>} </P>

<P>return 0; </P>

<P>} </P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

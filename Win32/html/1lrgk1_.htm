<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>EXTLOGPEN</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="1lrgk1_"></A><B>EXTLOGPEN  <A HREF="82oac0.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="udihne.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="f63o87.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>EXTLOGPEN</B> structure defines the pen style, width, and brush attributes for an extended pen. This structure is used by the <A HREF="3v6uf0.htm"><B>GetObject</B></A> function when it retrieves a description of a pen that was created when an application called the <A HREF="6kg3d6.htm"><B>ExtCreatePen</B></A> function. </P>

<P>typedef struct tagEXTLOGPEN { // exlp  </P>

<P>UINT     elpPenStyle; </P>

<P>UINT     elpWidth; </P>

<P>UINT     elpBrushStyle; </P>

<P>COLORREF elpColor; </P>

<P>LONG     elpHatch; </P>

<P>DWORD    elpNumEntries; </P>

<P>DWORD    elpStyleEntry[1]; </P>

<P>} EXTLOGPEN; </P>

<P></P>

<P><B>Members</B></P>

<P><B>elpPenStyle</B></P>

<P>Specifies a combination of pen type, style, end cap style, and join style. The values from each category can be retrieved by using a bitwise AND with the appropriate mask. </P>

<P>The <B>elpPenStyle</B> member masked with PS_TYPE_MASK has one of the following pen type values: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=30%><B>Value</B></TD>
<TD width=70%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=30%>PS_GEOMETRIC</TD>
<TD width=70%>The pen is geometric.</TD>
</TR>

<TR VALIGN="top">
<TD width=30%>PS_COSMETIC</TD>
<TD width=70%>The pen is cosmetic.</TD>
</TR>
</TABLE><BR>

<P></P>

<P>The <B>elpPenStyle</B> member masked with PS_STYLE_MASK has one of the following pen styles values: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=33%><B>Value</B></TD>
<TD width=67%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=33%>PS_SOLID</TD>
<TD width=67%>The pen is solid.</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>PS_DASH</TD>
<TD width=67%>The pen is dashed.</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>PS_DOT</TD>
<TD width=67%>The pen is dotted.</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>PS_DASHDOT</TD>
<TD width=67%>The pen has alternating dashes and dots.</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>PS_DASHDOTDOT</TD>
<TD width=67%>The pen has alternating dashes and double dots.</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>PS_NULL</TD>
<TD width=67%>The pen is invisible.</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>PS_USERSTYLE</TD>
<TD width=67%>The pen will use a styling array supplied by the user.</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>PS_INSIDEFRAME</TD>
<TD width=67%>The pen is solid. When this pen is used in any GDI drawing function that takes a bounding rectangle, the dimensions of the figure are shrunk so that it fits entirely in the bounding rectangle, taking into account the width of the pen. This applies only to PS_GEOMETRIC pens.</TD>
</TR>
</TABLE><BR>

<P></P>

<P>The following category applies only to PS_GEOMETRIC pens. The <B>elpPenStyle</B> member masked with PS_ENDCAP_MASK has one of the following end cap values: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=38%><B>Value</B></TD>
<TD width=62%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=38%>PS_ENDCAP_ROUND</TD>
<TD width=62%>Line end caps are round.</TD>
</TR>

<TR VALIGN="top">
<TD width=38%>PS_ENDCAP_SQUARE</TD>
<TD width=62%>Line end caps are square.</TD>
</TR>

<TR VALIGN="top">
<TD width=38%>PS_ENDCAP_FLAT</TD>
<TD width=62%>Line end caps are flat.</TD>
</TR>
</TABLE><BR>

<P></P>

<P>The following category applies only to PS_GEOMETRIC pens. The <B>elpPenStyle</B> member masked with PS_JOIN_STYLE has one of the following join values: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=31%><B>Value</B></TD>
<TD width=69%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=31%>PS_JOIN_BEVEL</TD>
<TD width=69%>Line joins are beveled.</TD>
</TR>

<TR VALIGN="top">
<TD width=31%>PS_JOIN_MITER</TD>
<TD width=69%>Line joins are mitered when they are within the current <B>SetMiterLimit</B> limit. A join is beveled when it would exceed the limit.</TD>
</TR>

<TR VALIGN="top">
<TD width=31%>PS_JOIN_ROUND</TD>
<TD width=69%>Line joins are round.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>elpWidth</B></P>

<P>Specifies the width of the pen. If the <B>elpPenStyle</B> member specifies geometric lines, this value is the width, in logical units, of the line. Otherwise, the lines are cosmetic and this value is 1. </P>

<P><B>elpBrushStyle</B></P>

<P>Specifies the brush style of the pen. The <B>elpBrushStyle</B> member values can be one of the following: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=35%><B>Value</B></TD>
<TD width=65%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=35%>BS_DIBPATTERN</TD>
<TD width=65%>Specifies a pattern brush defined by a device-independent bitmap (DIB) specification. If <B>elpBrushStyle</B> is BS_DIBPATTERN, the <B>elpHatch</B> member contains a handle to a packed DIB.</TD>
</TR>

<TR VALIGN="top">
<TD width=35%>BS_DIBPATTERNPT</TD>
<TD width=65%>Specifies a pattern brush defined by a device-independent bitmap (DIB) specification. If <B>elpBrushStyle</B> is BS_DIBPATTERNPT, the <B>elpHatch</B> member contains a pointer to a packed DIB.</TD>
</TR>

<TR VALIGN="top">
<TD width=35%>BS_HATCHED</TD>
<TD width=65%>Specifies a hatched brush.</TD>
</TR>

<TR VALIGN="top">
<TD width=35%>BS_HOLLOW</TD>
<TD width=65%>Specifies a hollow or NULL brush.</TD>
</TR>

<TR VALIGN="top">
<TD width=35%>BS_PATTERN</TD>
<TD width=65%>Specifies a pattern brush defined by a memory bitmap.</TD>
</TR>

<TR VALIGN="top">
<TD width=35%>BS_SOLID</TD>
<TD width=65%>Specifies a solid brush.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>elpColor</B></P>

<P>If <B>elpBrushStyle</B> is BS_SOLID or BS_HATCHED, <B>elpColor</B> specifies the color in which the pen is to be drawn. For BS_HATCHED, the <A HREF="1crgouh.htm"><B>SetBkMode</B></A> and <A HREF=".d41rh.htm"><B>SetBkColor</B></A> functions determine the background color. </P>

<P>If <B>elpBrushStyle</B> is BS_HOLLOW or BS_PATTERN, <B>elpColor</B> is ignored. </P>

<P>If <B>elpBrushStyle</B> is BS_DIBPATTERN or BS_DIBPATTERNPT, the low-order word of <B>elpColor</B> specifies whether the <B>bmiColors</B> members of the <A HREF=".2pxnh.htm"><B>BITMAPINFO</B></A> structure contain explicit red, green, blue (RGB) values or indexes into the currently realized logical palette. The <B>elpColor</B> value must be one of the following: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=33%><B>Value</B></TD>
<TD width=67%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=33%>DIB_PAL_COLORS</TD>
<TD width=67%>The color table consists of an array of 16-bit indexes into the currently realized logical palette.</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>DIB_RGB_COLORS</TD>
<TD width=67%>The color table contains literal RGB values.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>elpHatch</B></P>

<P>If <B>elpBrushStyle</B> is BS_PATTERN, <B>elpHatch</B> is a handle to the bitmap that defines the pattern. </P>

<P>If <B>elpBrushStyle</B> is BS_SOLID or BS_HOLLOW, <B>elpHatch</B> is ignored. </P>

<P>If <B>elpBrushStyle</B> is BS_DIBPATTERN, the <B>elpHatch</B> member is a handle to a packed DIB. To obtain this handle, an application calls the <A HREF="f12w9..htm"><B>GlobalAlloc</B></A> function to allocate a block of global memory and then fills the memory with the packed DIB. A packed DIB consists of a <B>BITMAPINFO</B> structure immediately followed by the array of bytes that define the pixels of the bitmap. </P>

<P>If <B>elpBrushStyle</B> is BS_DIBPATTERNPT, the <B>elpHatch</B> member is a pointer to a packed DIB. </P>

<P>If <B>elpBrushStyle</B> is BS_HATCHED, the <B>elpHatch</B> member specifies the orientation of the lines used to create the hatch. It can be any one of the following values: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=33%><B>Value</B></TD>
<TD width=67%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=33%>HS_BDIAGONAL</TD>
<TD width=67%>45-degree upward hatch (left to right)</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>HS_CROSS</TD>
<TD width=67%>Horizontal and vertical crosshatch</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>HS_DIAGCROSS</TD>
<TD width=67%>45-degree crosshatch</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>HS_FDIAGONAL</TD>
<TD width=67%>45-degree downward hatch (left to right)</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>HS_HORIZONTAL</TD>
<TD width=67%>Horizontal hatch</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>HS_VERTICAL</TD>
<TD width=67%>Vertical hatch</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>elpNumEntries</B></P>

<P>Specifies the number of entries in the style array in the <B>elpStyleEntry</B> member. This value is zero if <B>elpPenStyle</B> does not specify PS_USERSTYLE. </P>

<P><B>elpStyleEntry</B></P>

<P>Specifies a user-supplied style array. The array is specified with a finite length, but it is used as if it repeated indefinitely. The first entry in the array specifies the length of the first dash. The second entry specifies the length of the first gap. Thereafter, lengths of dashes and gaps alternate. </P>

<P>If <B>elpWidth</B> specifies geometric lines, the lengths are in logical units. Otherwise, the lines are cosmetic and lengths are in device units. </P>

<P></P>

<P><B>See Also</B></P>

<P><A HREF=".2pxnh.htm"><B>BITMAPINFO</B></A>, <A HREF="6kg3d6.htm"><B>ExtCreatePen</B></A>, <A HREF="3v6uf0.htm"><B>GetObject</B></A>, <A HREF="f12w9..htm"><B>GlobalAlloc</B></A>, <A HREF=".d41rh.htm"><B>SetBkColor</B></A>, <A HREF="1crgouh.htm"><B>SetBkMode</B></A> </P>

</BODY>
</HTML>

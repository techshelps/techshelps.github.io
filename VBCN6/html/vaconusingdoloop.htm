<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Using Do...Loop Statements</TITLE>
<style>@import url(office.css);</style>
	<link disabled rel="stylesheet" href="msoffice.css"></HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="defstatement">
</OBJECT>
<OBJECT ID="hhobj_4" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="defkeyword">
</OBJECT>
</TD></TR></TABLE>



<H1><A NAME="vaconusingdoloop"></A>Using Do...Loop Statements</H1>

<P class=ALNSR>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="Text" VALUE="Text:See Also">
	<PARAM NAME="Flags" VALUE=",,1">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="12;30;31;35">
</OBJECT>&nbsp;&nbsp;&nbsp;
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="Text" VALUE="Text:Specifics">
	<PARAM NAME="Flags" VALUE=",,1">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="vaconUsingDoLoopS">
</OBJECT></P>

<P class=T>You can use <B>Do...Loop</B> statements to run a block of <A HREF="JavaScript:hhobj_3.Click()">statements</A> an indefinite number of times. The statements are repeated either while a condition is <B>True</B> or until a condition becomes <B>True</B>.</P>

<H4>Repeating Statements While a Condition is True</H4>

<P class=T>There are two ways to use the <B>While</B> <A HREF="JavaScript:hhobj_4.Click()">keyword</A> to check a condition in a <B>Do...Loop</B> statement. You can check the condition before you enter the loop , or you can check it after the loop has run at least once.</P>

<P class=T>In the following <CODE>ChkFirstWhile</CODE> procedure, you check the condition before you enter the loop. If <CODE>myNum</CODE> is set to 9 instead of 20, the statements inside the loop will never run. In the <CODE>ChkLastWhile</CODE> procedure, the statements inside the loop run only once before the condition becomes <B>False</B>.</P>

<PRE class=CT><CODE>Sub ChkFirstWhile()
    counter = 0
    myNum = 20
    Do While myNum &gt; 10
        myNum = myNum - 1
        counter = counter + 1
    Loop
    MsgBox "The loop made " &amp; counter &amp; " repetitions."
End Sub

Sub ChkLastWhile()
    counter = 0
    myNum = 9
    Do
        myNum = myNum - 1
        counter = counter + 1
    Loop While myNum &gt; 10
    MsgBox "The loop made " &amp; counter &amp; " repetitions."
End Sub
</CODE></PRE>

<H4>Repeating Statements Until a Condition Becomes True</H4>

<P class=T>There are two ways to use the <B>Until</B> keyword to check a condition in a <B>Do...Loop</B> statement. You can check the condition before you enter the loop (as shown in the <CODE>ChkFirstUntil</CODE> procedure), or you can check it after the loop has run at least once (as shown in the <CODE>ChkLastUntil</CODE> procedure). Looping continues while the condition remains <B>False</B>.</P>

<PRE class=CT><CODE>Sub ChkFirstUntil()
    counter = 0
    myNum = 20
    Do Until myNum = 10
        myNum = myNum - 1
        counter = counter + 1
    Loop
    MsgBox "The loop made " &amp; counter &amp; " repetitions."
End Sub

Sub ChkLastUntil()
    counter = 0
    myNum = 1
    Do
        myNum = myNum + 1
        counter = counter + 1
    Loop Until myNum = 10
    MsgBox "The loop made " &amp; counter &amp; " repetitions."
End Sub
</CODE></PRE>

<H4>Exiting a Do...Loop Statement from Inside the Loop</H4>

<P class=T>You can exit a <B>Do...Loop</B> using the <B>Exit Do</B> statement. For example, to exit an endless loop, use the <B>Exit Do</B> statement in the <B>True</B> statement block of either an <B>If...Then...Else</B> statement or a <B>Select Case</B> statement. If the condition is <B>False</B>, the loop will run as usual.</P>

<P class=T>In the following example, <CODE>myNum</CODE> is assigned a value that creates an endless loop. The <B>If...Then...Else</B> statement checks for this condition, and then exits, preventing endless looping.</P>

<PRE class=CT><CODE>Sub ExitExample()
    counter = 0
    myNum = 9
    Do Until myNum = 10
        myNum = myNum - 1
        counter = counter + 1
        If myNum &lt; 10 Then Exit Do
    Loop
    MsgBox "The loop made " &amp; counter &amp; " repetitions."
End Sub
</CODE></PRE>

<P class=NT><B>Note</B>&nbsp;&nbsp;&nbsp;To stop an endless loop, press ESC or CTRL+BREAK.</P>

</BODY>
</HTML>

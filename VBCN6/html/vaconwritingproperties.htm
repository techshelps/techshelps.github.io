<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Writing a Property Procedure</TITLE>
<style>@import url(office.css);</style>
	<link disabled rel="stylesheet" href="msoffice.css"></HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="defstatement">
</OBJECT>
<OBJECT ID="hhobj_4" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="defform">
</OBJECT>
<OBJECT ID="hhobj_5" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="defstandardmodule">
</OBJECT>
<OBJECT ID="hhobj_6" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="defclassmodule">
</OBJECT>
<OBJECT ID="hhobj_7" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="defobjectbrowser">
</OBJECT>
<OBJECT ID="hhobj_8" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="defmodule">
</OBJECT>
<OBJECT ID="hhobj_9" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="defobjecttype">
</OBJECT>
</TD></TR></TABLE>



<H1><A NAME="vaconwritingproperties"></A>Writing a Property Procedure</H1>

<P class=ALNSR>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="Text" VALUE="Text:See Also">
	<PARAM NAME="Flags" VALUE=",,1">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="11;25;38;40;45">
</OBJECT>&nbsp;&nbsp;&nbsp;
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="Text" VALUE="Text:Specifics">
	<PARAM NAME="Flags" VALUE=",,1">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="vaconWritingPropertiesS">
</OBJECT></P>

<P class=T>A <B>Property</B> procedure is a series of Visual Basic <A HREF="JavaScript:hhobj_3.Click()">statements</A> that allow a programmer to create and manipulate custom properties.

<UL>
	<LI class=LB1><B>Property</B> procedures can be used to create read-only properties for <A HREF="JavaScript:hhobj_4.Click()">forms</A>, <A HREF="JavaScript:hhobj_5.Click()">standard modules</A>, and <A HREF="JavaScript:hhobj_6.Click()">class modules</A>.<BR><BR></LI>

	<LI class=LB1><B>Property </B>procedures should be used instead of <B>Public</B> variables in code that must be executed when the property value is set.<BR><BR></LI>

	<LI class=LB1>Unlike <B>Public</B> variables, <B>Property</B> procedures can have Help strings assigned to them in the <A HREF="JavaScript:hhobj_7.Click()">Object Browser</A>.</LI>
</UL>

<P class=T>When you create a <B>Property</B> procedure, it becomes a property of the <A HREF="JavaScript:hhobj_8.Click()">module</A> containing the procedure. Visual Basic provides the following three types of <B>Property</B> procedures:</P>

<TABLE cellpadding=4 cellspacing=4 cols=2>

<TR VALIGN="top">
<TH width=21%>Procedure</TH>
<TH width=79%>Description</TH>
</TR>

<TR VALIGN="top">
<TD class=T width=21%><B>Property Let</B></TD>
<TD class=T width=79%>A procedure that sets the value of a property.</TD>
</TR>

<TR VALIGN="top">
<TD class=T width=21%><B>Property Get</B></TD>
<TD class=T width=79%>A procedure that returns the value a property.</TD>
</TR>

<TR VALIGN="top">
<TD class=T width=21%><B>Property Set</B></TD>
<TD class=T width=79%>A procedure that sets a reference to an object.</TD>
</TR>
</TABLE><BR>

<P class=FIXP></P>

<P class=T>The syntax for declaring a <B>Property</B> procedure is:</P>

<P class=SYN>[<B>Public </B>| <B>Private</B>] [<B>Static</B>] <B>Property</B> {<B>Get</B> | <B>Let</B> | <B>Set</B>} <I>propertyname_ </I>[(<I>arguments</I>)] [<B>As</B> <I>type</I>]</P>

<P class=SYN><I>statements</I></P>

<P class=SYN><B>End Property</B></P>

<P class=T><B>Property</B> procedures are usually used in pairs: <B>Property Let</B> with <B>Property Get</B> and <B>Property Set</B> with <B>Property Get</B>. Declaring a <B>Property Get</B> procedure alone is like declaring a read-only property. Using all three <B>Property</B> procedure types together is only useful for <B>Variant</B> variables, since only a <B>Variant</B> can contain either an object or other data type information. <B>Property Set</B> is intended for use with objects; <B>Property Let</B> isn't.</P>

<P class=T>The required arguments in <B>Property</B> procedure declarations are shown in the following table:</P>

<TABLE cellpadding=4 cellspacing=4 cols=2>

<TR VALIGN="top">
<TH width=21%>Procedure</TH>
<TH width=79%>Declaration Syntax</TH>
</TR>

<TR VALIGN="top">
<TD class=T width=21%><B>Property Get</B></TD>
<TD class=SYN width=79%><B>Property Get</B> <I>propname</I>(1, …, <I>n</I>) <B>As</B> <I>type</I></TD>
</TR>

<TR VALIGN="top">
<TD class=T width=21%><B>Property Let</B></TD>
<TD class=SYN width=79%><B>Property Let</B> <I>propname</I>(1, …,,,, <I>n</I>, <I>n</I>+1)</TD>
</TR>

<TR VALIGN="top">
<TD class=T width=21%><B>Property Set</B></TD>
<TD class=SYN width=79%><B>Property Set</B> <I>propname</I>(1, …, <I>n</I>, <I>n</I>+1)</TD>
</TR>
</TABLE><BR>

<P class=FIXP></P>

<P class=T>The first argument through the next to last argument (1, …, <I>n</I>) must share the same names and data types in all <B>Property</B> procedures with the same name.</P>

<P class=T>A <B>Property Get</B> procedure declaration takes one less argument than the related <B>Property Let</B> and <B>Property Set</B> declarations. The data type of the <B>Property Get</B> procedure must be the same as the data type as the data type of the last argument (<I>n</I>+1) in the related <B>Property Let</B> and <B>Property Set</B> declarations. For example, if you declare the following <B>Property Let</B> procedure, the <B>Property Get</B> declaration must use arguments with the same name and data type as the arguments in the <B>Property Let</B> procedure.</P>

<PRE class=CT><CODE>Property Let Names(intX As Integer, intY As Integer, varZ As Variant)
    ‘ Statement here.
End Property

Property Get Names(intX As Integer, intY As Integer) As Variant
    ‘ Statement here.
End Property
</CODE></PRE>

<P class=T>The data type of the final argument in a <B>Property Set</B> declaration must be either an <A HREF="JavaScript:hhobj_9.Click()">object type</A> or a <B>Variant</B>.</P>

</BODY>
</HTML>

<html><head>
      <meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">
   <title>Controlling Foliage with MAXScript</title><link rel="stylesheet" type="text/css" href="./style/cpm.css"><link rel="stylesheet" type="text/css" href="./style/isd.css"><link rel="stylesheet" type="text/css" href="./style/commons.css"><link rel="stylesheet" type="text/css" href="./style/contents.css"><link rel="stylesheet" type="text/css" href="./style/header.css"><link rel="stylesheet" type="text/css" href="./style/indexes.css"><link rel="stylesheet" type="text/css" href="./style/search.css"><link rel="stylesheet" type="text/css" href="./style/med.css"><script type="text/javascript" src="./scripts/ac.strings.js"></script><script type="text/javascript" src="./ac_common.js"></script><script type="text/javascript" src="./scripts/acmap.js"></script><script type="text/javascript" src="./scripts/ac.acad_ak.js"></script><script type="text/javascript" src="./scripts/index-processing.js"></script><script type="text/javascript" src="./scripts/search-processing.js"></script><script type="text/javascript" src="./scripts/toc-processing.js"></script><script type="text/javascript" src="./scripts/highlight.js"></script><script type="text/javascript" src="./scripts/favorites.js"></script><script type="text/javascript" src="./scripts/commons-processing.js"></script><script language="javascript">
            function hideInfo() {
                info = document.getElementById('infoline');
                info.innerHTML = ' ';
                info.style.visibility = 'hidden';
            }
            function showInfo(title) {
                info = document.getElementById('infoline');
                info.innerHTML = title;
                info.style.visibility='visible';
            }
        </script><meta name="description" content="Controlling Foliage with MAXScript"><meta name="keywords" content="billboard, MAXScript script, script, billboard control, foliage:and MAXScript, script for foliage, MAXScript, controlling foliage,"><meta name="topic-type" content="concept"></head><body><!--
							Name = Topic;
							Class =  CPM-Topic ISD-Topic ;
							Url = WS1a9193826455f5ff13cfd6e1136132a36f-7b3a.htm--><div class="head"><div class="head-block"><div class="nav-group"><!--browse buttons--><div class="browse"><nobr><!--No Additional browse buttons are defined--><div id="prevTitle" style="display:none">Creating the Animation</div><a href="WSf742dab04106313315bef0fb112a19e466a-7fd3.htm" class="headNavLink" onmouseover="showInfo(document.getElementById('prevTitle').innerHTML);" onmouseout="hideInfo();"><img src="./images/nav-prev-xp.gif" border="0"></a><div id="parentTitle" style="display:none">Special Effects</div><a href="WS73099cc142f4875514c01ac112a7acef16-73a2.htm" class="headNavLink" onmouseover="showInfo(document.getElementById('parentTitle').innerHTML);" onmouseout="hideInfo();"><img src="./images/nav-up-xp.gif" border="0"></a><div id="nextTitle" style="display:none">Project Management</div><a href="WS73099cc142f4875514c01ac112a7acef16-753a.htm" class="headNavLink" onmouseover="showInfo(document.getElementById('nextTitle').innerHTML);" onmouseout="hideInfo();"><img src="./images/nav-next-xp.gif" border="0"></a></nobr></div><!--end browse buttons--></div><div class="button-info"><span id="infoline">&nbsp;</span></div><div class="ancestry"><a href="welcome.htm">Autodesk 3ds Max Tutorials</a>&nbsp;&gt;&nbsp;<a href="WS73099cc142f4875514c01ac112a7acef16-73a2.htm">Special Effects</a>&nbsp;&gt;&nbsp;</div><div class="head-text"><span>Controlling Foliage with MAXScript</span></div></div></div><div class="head-margin">&nbsp;</div><div style="line-height: 0pt">&nbsp;</div><div class="head-margin">&nbsp;</div><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b3a"></a></span>

<!--Body-->
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b39"></a></span>




In
this tutorial, you will use a technique that pastes images of trees
on flat planes. You will create and modify a script that creates
a <em class="mild">billboard</em> effect,
where one object is made to face another object throughout the animation.
The facing object will rotate only about the world Z-axis. This
effect is useful for trees, people, and scene elements that use
a bitmap on a plane object, to force them to always face the camera.</p>
<div><span style="display:none"><a name="WS73099cc142f487551face55114134b88b1-7d6d"></a></span><div class="note-note"><span class="label">Note</span>This tutorial is designed for those who
want to learn how MAXScript can be used to enhance architectural
models. You should do this tutorial only if you are interested in
learning about MAXScript.</div></div>
<span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b33"></a></span><div class="figure-anchor">
<p><img src="./images/MED/3dsMaxTut/English/il/il_billboard_projector.png"></p>
</div>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b32"></a></span>You will create the script from a template,
and you will modify the script by adding a ready-made function.
Then you will modify the script to make object selection more flexible.</p>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b31"></a></span>The purpose of these steps is to show you how
to modify existing scripts to incorporate the functions you need
for your own projects. In the process, you will learn to use 2D
tree objects as an alternative to 3D trees.</p>
<div class="section"><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b2e"></a></span>
<p><span style="display:none"><a name="WS73099cc142f487551face55114134b88b1-7942"></a></span>In this tutorial, you will learn how to:</p>
<!--UList--><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b2d"></a></span>
<ul><li>Create
a script with MAXScript.</li><li>Use
a pre-made MAXScript function.</li><li>Create
shadows with a light's Multiplier parameter.</li></ul>



</div>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b30"></a></span>Skill level: Advanced</p>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b2f"></a></span>Time to complete: 1 hour</p>
<div class="section"><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b2c"></a></span>
<p class="section_title_h1"><a name="TOC_ENTRY__d0e90123"></a>Files for This Tutorial</p>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b2b"></a></span>All the files necessary to do the tutorials
can be found in the <em class="mild">\tutorials</em> folder on the DVD that
shipped with 3ds Max. Before doing the tutorials, copy the <em class="mild">\tutorials</em> directory
from the disc to your local program installation.</p>
<!--OList--><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b2a"></a></span>
<p class="list-intro"><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b29"></a></span>Open
the test file for the script:</p>
<ol type="1" start="1"><li>From
the <em class="mild">\tutorials\scripting_fx\</em>
 folder,
open the file <span class="filePath">tut_billboard_start.max</span>.<div><span style="display:none"><a name="WS73099cc142f487551face55114134b88b1-7d6c"></a></span><div class="note-note"><span class="label">Note</span>If you see the <a href="ms-its:3dsmax.chm::/WSf742dab041063133-5029f504112a1ce7dbd-7faf.htm">File Units: Mismatch dialog</a>
,
use the default option: Adopt The File Unit's Scale.</div></div>
<span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b28"></a></span><div class="figure-anchor">
<p><img src="./images/MED/3dsMaxTut/English/tut/tut_billboard_start.png"></p>
</div>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b27"></a></span>This scene has planes (billboards) placed in
front of the building rather than tree models. Images of oak trees
have been placed on the billboards. Each image has an alpha channel
that is used as an opacity map to make the image background transparent.
All objects have been frozen except the billboards, the light, and
the camera. </p>
</li><li>Render
the Camera01 viewport at frame 0.<span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b26"></a></span><div class="figure-anchor">
<p><img src="./images/MED/3dsMaxTut/English/il/il_billboard_frame0.png"></p>
</div>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b25"></a></span>The scene renders faster than it would if 3D
trees were present, and the billboard trees look reasonably good
from the current camera angle. Because the scene uses ray-traced
shadows, the shadows from the tree maps are rendered accurately,
with the transparent areas casting no shadows.</p>
</li><li>Drag
the time slider to see the animation. <p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b24"></a></span>The camera is animated, but the billboards do
not turn to face the camera as it moves. </p>
</li><li>Go
to frame 100, and render the Camera01 viewport.<span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b23"></a></span><div class="figure-anchor">
<p><img src="./images/MED/3dsMaxTut/English/il/il_billboard_frame100.png"></p>
</div>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b22"></a></span>From this angle, it is obvious that the trees
are simply pasted onto flat boards. You could solve this problem
by manually animating the billboards to follow the camera. However,
if you had numerous trees, people, and other objects that needed
to face the camera, the animation process would quickly become unwieldy.</p>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b21"></a></span>Instead, you will use a script to add a script
controller to each billboard that forces it to face the camera at
all times, even when the camera is animated.</p>
</li></ol>




<!--OList--><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b20"></a></span>
<p class="list-intro"><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b1f"></a></span>Try
out the script:</p>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b1e"></a></span>First, you will run a finished version of the
script to see how it works. Later in this tutorial, you will learn
to write this script yourself. </p>
<ol type="1" start="1"><li>
<img src="./images/MED/3dsMaxTut/English/tab/tab_util.png"> Go to
the Utilities panel.</li><li>Click
MAXScript.<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b1d"></a></span>The MAXScript rollout is displayed.</p>
</li><li>On
the MAXScript rollout, click Run Script.</li><li>On
the Choose Editor File dialog, choose the script <span class="filePath">tut_billboard_01.ms</span>.<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b1c"></a></span>A Billboard dialog appears with one button labeled
Set Billboard Effect.</p>
<span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b1b"></a></span><div class="figure-anchor">
<p><img src="./images/MED/3dsMaxTut/English/tut/tut_billboard_script1.png"></p>
</div>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b1a"></a></span>The script works with selected objects. You
select the objects to look at the camera, and the camera itself.
The script figures out which object is the camera, and forces the
other objects&#8217; local Z-axes to face the camera.</p>
</li><li>In
the Top viewport, select the camera and the four billboards. <div><span style="display:none"><a name="WS73099cc142f487551face55114134b88b1-7d6b"></a></span><div class="note-note"><span class="label">Note</span>If you prefer to use the Select From Scene
dialog to select objects, press <span class="keyCaps">H</span> and
use the dialog to select <span class="charspan-special">
<em class="mild">Billboard01</em>
</span>, <span class="charspan-special">
<em class="mild">Billboard02</em>
</span>, <span class="charspan-special">
<em class="mild">Billboard03</em>
</span>, <span class="charspan-special">
<em class="mild">Billboard04</em>
</span>, and <span class="charspan-special">
<em class="mild">Camera01</em>
</span>. </div></div>
</li><li>On
the Billboard dialog, click Set Billboard Effect.<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b19"></a></span>The planes on the current frame turn to face
the camera.</p>
<span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b18"></a></span><div class="figure-anchor">
<p><img src="./images/MED/3dsMaxTut/English/tut/tut_billboard_facing.png"></p>
</div>
</li><li>Drag
the time slider to see the animation. <p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b17"></a></span>The planes now face the camera wherever it goes.</p>
</li><li>In
the Top viewport, move the camera while watching the planes, then
right-click to undo any movement you have made.<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b16"></a></span>As you move the camera, the planes turn to face
its location. </p>
<div><span style="display:none"><a name="WS73099cc142f487551face55114134b88b1-7d6a"></a></span><div class="note-note"><span class="label">Note</span>The shadows cast by the billboards will
change when the billboards turn, which creates an unrealistic effect
in a rendered animation. You will fix this problem later in this
tutorial.</div></div>
</li></ol>








<!--OList--><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b15"></a></span>
<p class="list-intro"><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b14"></a></span>Inspect
the script:</p>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b13"></a></span>Next, you will look at the contents of the script
to see what it contains.</p>
<ol type="1" start="1"><li>On
the MAXScript rollout, click Open Script. Choose the file <span class="filePath">tut_billboard_01.ms</span>.<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b12"></a></span>The script appears in a MAXScript window. In
this window, you can read and edit the script.</p>
</li><li>Look
through the script and identify these general sections of code:<!--UList--><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b11"></a></span>
<ul><li> Header<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b10"></a></span>The first part of the script is called the header.
This part contains basic information such as the script file name,
script name, script version number, 3ds Max version number(s),
author&#8217;s name, date, and purpose. This information is in comment
form, which means the program ignores this information when looking
for code to execute. Comments that span several lines are located
between the symbols <em class="strong">/*</em> and <em class="strong">*/</em>, while single-line comments
are preceded by double hyphens (--). The entire script contains occasional
comments to inform you of the purpose of each line or section.</p>
</li></ul>

<!--UList--><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b0f"></a></span>
<ul><li>
<em class="strong">makeBillboard</em> function definition<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b0e"></a></span>After the header, the <em class="strong">makeBillboard</em> function
is defined, but not executed. This function assigns a script controller
to the rotation of each billboard object. The script controller
calculates the world Z rotation required to keep the billboard looking
at the camera. The billboard&#8217;s local Z-axis defines the front of
the object. This convention is chosen to match the orientation of
objects created in the Front viewport. </p>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b0d"></a></span>When the script is run, the function is loaded,
but not executed. It is ready to be called later in the script.</p>
</li></ul>

<!--UList--><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b0c"></a></span>
<ul><li>Close
the dialog<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b0b"></a></span>The first task that the script performs is to
check if a Billboard dialog is already open, and if so, it closes
it. This prevents multiple copies of the dialog from being created. </p>
</li></ul>

<!--UList--><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b0a"></a></span>
<ul><li>Rollout
definition<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b09"></a></span>The rollout is defined, and given a name. Within
this definition, variables are set, and a UI control item (a button)
and its associated event are defined. The variable for the camera
is called <em class="strong">laObj</em> (for look-at object), while
the array for holding the billboard objects is called <em class="strong">bbObjsArr</em> (for
billboard objects array).</p>
</li></ul>

<!--UList--><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b08"></a></span>
<ul><li>Look
through selected objects<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b07"></a></span>Next, the script looks at all the selected objects.
The camera is identified by checking the superClass of each object.
It places the camera in the <em class="mild">laObj</em> variable,
and puts the remaining objects in the <em class="strong">bbObjsArr</em> array. </p>
</li></ul>

<!--UList--><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b06"></a></span>
<ul><li>Call
makeBillboard function<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b05"></a></span>The script then loops through the <em class="strong">bbObjsArr</em> array
and calls the <em class="strong">makeBillboard</em> function for each
object listed in it.</p>
</li></ul>

<!--UList--><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b04"></a></span>
<ul><li>Create
dialog<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b03"></a></span>At the end, the script creates the dialog and
waits for you to click the button.</p>
</li></ul>

</li></ol>


<!--OList--><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b02"></a></span>
<p class="list-intro"><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b01"></a></span>Inspect
the makeBillboard function:</p>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7b00"></a></span>The makeBillboard function is the one that does
the actual work of creating the script controllers for the objects
that look at the camera. It contains several sections that perform
different tasks.</p>
<ol type="1" start="1"><li>Locate
the following section of code:<div class="codeBlock">
<pre class="codeLine">fn makeBillboard</pre>
<pre class="codeLine"> obj	-- The billboard object.</pre>
<pre class="codeLine"> targ	-- The lookat object.</pre>
</div>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7aff"></a></span>The two variables that follow <em class="strong">fn
makeBillboard</em>, <em class="strong">obj</em> and <em class="strong">targ</em>,
are arguments for the function. <em class="mild">Arguments</em> are
values that are passed to the function so it can perform an operation
on them. The arguments could appear on the same line as <em class="strong">fn
makeBillboard</em>, but placing them on separate lines allows
you to include comments after each one.</p>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7afe"></a></span>Immediately after the function name and arguments
is an equals sign, and open parenthesis. The code that defines the
function begins after the open parenthesis.</p>
</li><li>Place
your cursor anywhere on the same line as the open parenthesis that
precedes the <em class="strong">setWaitCursor()</em> line, and press <span class="keyCaps">Ctrl+Shift+B</span>.<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7afd"></a></span>This action highlights the entire function definition
within the opening and closing parentheses. The opening parenthesis
is just after <em class="strong">fn makeBillboard</em> declaration and
its equals sign, while the closing parenthesis occurs many lines
later.</p>
<div><span style="display:none"><a name="WS73099cc142f487551face55114134b88b1-7d69"></a></span><div class="note-tip"><span class="label">Tip</span>For the script to work without errors, every
open parenthesis must have a corresponding closing parenthesis.
To quickly find out what part of the code is inside a specific set
of parentheses, place the cursor on the same line as any open or
closed parenthesis and press <span class="keyCaps">Ctrl+Shift+B</span>.
The bracketed code is selected, including the parentheses. </div></div>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7afc"></a></span>The function <em class="strong">setWaitCursor()</em> is called
at the beginning of the function to cause the Windows hourglass
to display while the function is processing. The function <em class="strong">setArrowCursor()</em> is
called at the end to restore the arrow cursor. Both these functions
are built into MAXScript.</p>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7afb"></a></span>The rest of the function is contained in an <em class="strong">if...then...</em> clause.
This provides error handling to ensure that valid objects have been
passed to the function. The following line prevents the script from
attempting to process deleted or nonexistent objects which would
cause the script to fail.</p>
<div class="codeBlock">
<pre class="codeLine">if obj!=undefined AND (NOT isDeleted obj) AND targ!=undefined AND (NOT isDeleted targ) then</pre>
</div>
<div><span style="display:none"><a name="WS73099cc142f487551face55114134b88b1-7d68"></a></span><div class="note-note"><span class="label">Note</span>The operand <span class="charspan-special">
<em class="strong">!=</em>
</span> means &#8220;not equal
to&#8221;.</div></div>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7afa"></a></span>The body of the <em class="strong">if...then...</em> clause builds
a string, <em class="strong">scriptStr</em>, that comprises the actual
script for the script controller. The script uses basic trigonometry
to calculate the rotation angle required. When using a ready-made
function within a script, you don&#8217;t have to know the details of
the function. It is sufficient to know the arguments and the value
returned by the function. </p>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7af9"></a></span>At the end of this clause, the script controller
is assigned, and the script&#8217;s time range is expanded. For a script
controller, the active time range is automatically set to the current
animation range. If you decide to increase the number of frames
in your animation after you run this script, you will have to manually
expand the range for the controller. The script avoids this situation
by setting the controller&#8217;s time range to a very large interval. </p>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7af8"></a></span>The code that performs this step is as follows:</p>
<div class="codeBlock">
<pre class="codeLine">-- Assign rotation script controller.</pre>
<pre class="codeLine">ctrl=obj.rotation.controller=rotation_script() </pre>
<pre class="codeLine">-- Set time range wide in case user expands it later.</pre>
<pre class="codeLine">setTimeRange ctrl (interval -1000 10000) </pre>
<pre class="codeLine">-- Put script string into script controller.ctrl.</pre>
<pre class="codeLine">script=scriptStr </pre>
</div>
</li></ol>


<!--OList--><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7af7"></a></span>
<p class="list-intro"><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7af6"></a></span>Open
the template:</p>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7af5"></a></span>Next, you will recreate the script from a template.
This will introduce you to the tools you can use to create your
own scripts. </p>
<ol type="1" start="1"><li>Open
the file <span class="filePath">tut_billboard_start.max</span> again
to start with the original scene. Do not save your changes.</li><li>Choose
MAXScript menu &gt; Open Script, and open the file <span class="filePath">Template_Dialog.ms</span>.<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7af4"></a></span>This template has placeholders for all the elements
needed to create a script. </p>
</li><li>Look
over the code and locate the parts of the template. <!--UList--><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7af3"></a></span>
<ul><li>Header </li></ul>

<!--UList--><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7af2"></a></span>
<ul><li>Functions</li></ul>

<!--UList--><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7af1"></a></span>
<ul><li>Close
dialog</li></ul>

<!--UList--><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7af0"></a></span>
<ul><li>Define
rollout: Variables, UI control items, events</li></ul>

<!--UList--><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7aef"></a></span>
<ul><li>Create
dialog</li></ul>

<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7aee"></a></span>The template saves time when you're creating
a new script. Writing the script is simply a matter of filling in
each of the placeholders.</p>
</li><li>Save
the script as <em class="strong">my_billboard_01.ms</em>.<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7aed"></a></span>Changing the file name now will prevent you
from overwriting the template.</p>
</li></ol>




<!--OList--><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7aec"></a></span>
<p class="list-intro"><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7aeb"></a></span>Fill
in the header:</p>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7aea"></a></span>The template&#8217;s header provides a basic layout
for a header, with entries for file name, version, and other details.</p>
<ol type="1" start="1"><li>In
the MAXScript window, replace <em class="strong">FILENAME</em> with
the text <em class="strong">my_billboard_01.ms</em>.</li><li>Replace <em class="strong">SCRIPT_NAME</em> with
the name <em class="strong">Billboard</em>.</li><li>Replace <em class="strong">##</em> with <em class="strong">01</em>.</li><li>Replace <em class="strong">AUTHOR_NAME</em> with
your name.</li><li>Replace <em class="strong">MM.DD.YY</em> with
the current date.</li><li>Replace <em class="strong">INSERT_PURPOSE</em> with
a brief description of the script's purpose, in your own words. </li></ol>






<!--OList--><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7ae9"></a></span>
<p class="list-intro"><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7ae8"></a></span>Add
a function to the template:</p>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7ae7"></a></span>You can add the <em class="strong">makeBillboard</em> function
to the template with a simple copy-and-paste operation.</p>
<ol type="1" start="1"><li>On
the MAXScript window, choose File menu &gt; Open, and open <span class="filePath">fn_makeBillboard.ms</span>.</li><li>Select
all the text. You can do this by positioning the cursor within the
text then pressing <span class="keyCaps">Ctrl+A</span>.</li><li>Copy
the text to the clipboard with <span class="keyCaps">Ctrl+C</span>.</li><li>Click
the <em class="mild">my_billboard_01.ms</em> tab, highlight <em class="mild">--
INSERT_FUNCTION</em> and press <span class="keyCaps">Ctrl+V</span> to
replace the text.</li><li>Close
the <span class="filePath">fn_makeBillboard.ms</span> script window.</li></ol>





<!--OList--><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7ae6"></a></span>
<p class="list-intro"><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7ae5"></a></span>Fill
in the rollout information:</p>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7ae4"></a></span>The rollout declaration has a place for the
rollout title that appears when you run the script. It also has
an internal rollout name that you can replace with a more descriptive
name.</p>
<ol type="1" start="1"><li>Replace <em class="mild">ROLL_TITLE</em> with <em class="strong">My
Billboard</em>.</li><li>Replace
all occurrences of <em class="mild">rol_RNAME</em> with <em class="strong">rol_myBB</em>.<div><span style="display:none"><a name="WS73099cc142f487551face55114134b88b1-7d67"></a></span><div class="note-tip"><span class="label">Tip</span>To automate this process, select the text <span class="charspan-special">
<em class="mild">rol_RNAME</em>
</span>, press <span class="keyCaps">Ctrl+H</span> to access the Replace dialog,
type <span class="charspan-special">
<em class="strong">rol_myBB</em>
</span> in the
Replace With Text field, then click Replace All.</div></div>
</li><li>After <em class="strong">--VARIABLES</em>,
add the following: <div class="codeBlock">
<pre class="codeLine">local bbObjsArr -- Declare billboard objects array.</pre>
<pre class="codeLine">local laObj -- Declare look-at object. </pre>
</div>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7ae3"></a></span>The local declaration sets the scope of the
variables. In a script, a variable can be available to the entire
script, or only to a specific area of the code within the parentheses
where the declaration is made. In this case, the <em class="strong">local</em> command
indicates that these variables should be available only to this
section. In this case, the local declaration ensures that these
variables are available only to the rollout. This prevents name
conflicts with other portions of the code, and protects the variables&#8217;
values from being overwritten by code that shouldn&#8217;t access them.</p>
</li><li>After <em class="strong">--
UI CONTROL ITEMS</em>, add: <div class="codeBlock">
<pre class="codeLine">button but_setBBEffect "Set Billboard Effect" width:125 height:40\</pre>
<pre class="codeLine"> tooltip:"Select billboard objects and camera, then click button"</pre>
</div>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7ae2"></a></span>A button is created on the rollout, and its
value is assigned to the variable <em class="strong">but_setBBEffect</em>.
The text appearing on the button is set to Set Billboard Effect.
The button&#8217;s width and height are set, and a mouse-over tooltip
is provided. </p>
<div><span style="display:none"><a name="WS73099cc142f487551face55114134b88b1-7d66"></a></span><div class="note-tip"><span class="label">Tip</span>The backslash character at the end of a
line indicates the continuation of the code on another line. This
makes long lines of code easier to read. </div></div>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7ae1"></a></span>The rollout definition is also the place where
you define what will happen when one of the rollout UI control items
is clicked. This information goes in the EVENTS section.</p>
</li><li>After <em class="strong">--
EVENTS</em>, add:<div class="codeBlock">
<pre class="codeLine">-- Set the billboard effect.</pre>
<pre class="codeLine">on but_setBBEffect pressed do</pre>
<pre class="codeLine">(</pre>
<pre class="codeLine">) </pre>
</div>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7ae0"></a></span>This declares the event that will occur when
the button is pressed. All event code goes between the parentheses.</p>
</li><li>After
the first parenthesis, add:<div class="codeBlock">
<pre class="codeLine">bbObjsArr=#() -- Initialize billboard objects array to null array.</pre>
<pre class="codeLine">laObj=undefined -- Initialize lookat object variable to 'undefined'. </pre>
</div>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7adf"></a></span>With the local commands you created earlier,
these two variables were declared, meaning they were established
as future placeholders for data. However, no data was put in them
at that time. In the two previous lines, the two variables are <em class="mild">initialized</em>,
meaning a set of starting data is placed in them. </p>
<!--UList--><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7ade"></a></span>
<ul><li>The
variable <em class="strong">bbObjsArr</em> is set up as an <em class="mild">array</em>.
An array is a list or matrix that can hold several values. In this
case, you want the array to hold all the objects that will be forced
to look at the camera.</li></ul>

<!--UList--><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7add"></a></span>
<ul><li>The
variable <em class="strong">laObj</em> is set up with the value
&#8220;undefined&#8221;. This variable will hold the camera only.</li></ul>

<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7adc"></a></span>If you use the script properly by selecting
a camera and other objects then clicking the Set Billboard Effect
button, these variables will get filled with the names of the objects. </p>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7adb"></a></span>Initializing these variables now, rather than
in the part of the script that sets the billboard effect, provides
a means for error-checking later in the script. For example, if <em class="strong">laObj</em> is
still &#8220;undefined&#8221; after you click Set Billboard Effect, it means
no camera was selected, and the script should not try to perform
the billboard effect.</p>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7ada"></a></span>Next, you will create a loop. A loop executes
a series of instructions multiple times. In this case, the loop
goes through each selected object and tests to see whether it is
the camera or another type of object. It also tests whether the
object is a target such as a camera target, and does not add these
to the list of objects that will look at the camera.</p>
</li><li>Add
the following, including the blank line as the first line:<div class="codeBlock">
<pre class="codeLine"></pre>
<pre class="codeLine">-- Note: User must manually select objects in viewport, or via 'Select by Name' dialog.</pre>
<pre class="codeLine">-- Selection should include the billboard objects AND one camera.</pre>
<pre class="codeLine">-- Loop through selected objects.</pre>
<pre class="codeLine">for obj in selection do</pre>
<pre class="codeLine">(</pre>
<pre class="codeLine">if superClassOf obj==camera -- Check if object is the camera.</pre>
<pre class="codeLine"> then laObj=obj -- Assign camera object to 'laObj' variable.</pre>
<pre class="codeLine"> else if classOf obj!=targetObject then append bbObjsArr obj -- Append object to billboard objects array, but exclude target objects. </pre>
<pre class="codeLine">) </pre>
</div>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7ad9"></a></span>When the loop has finished going through the
selection, the objects that will look at the camera are all in the
array <em class="strong">bbObjsArr</em>. The only task left
is to set up a loop to go through the <em class="strong"> bbObjsArr</em> array
and call the <em class="strong">makeBillboard</em> function for each object
in the array. Just before the second loop, you need to test that
there was a camera in the selection, and at least one object to
look at the camera. If the camera variable and object array pass
this test, the code goes on to call the <em class="strong">makeBillboard</em> function
for each item in the array.</p>
</li><li>Add
the following lines immediately after the lines you just entered:<div class="codeBlock">
<pre class="codeLine"></pre>
<pre class="codeLine">-- Finally, set billboard effect: loop through billboard objects and call 'makeBillboard' fn.</pre>
<pre class="codeLine">-- This assigns a script controller to the billboard objects' rotation.</pre>
<pre class="codeLine">if bbObjsArr.count!=0 AND laObj!=undefined then -- Check to ensure objects have been selected.</pre>
<pre class="codeLine">(</pre>
<pre class="codeLine">for obj in bbObjsArr do makeBillboard obj laObj</pre>
<pre class="codeLine">)</pre>
</div>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7ad8"></a></span>This loop should be run only if a camera and
billboards are detected. Recall that <em class="strong">bbObjsArr</em> was
initialized to the null array <em class="strong">#()</em>, so it had
no elements in it at the start of the script. The value of <em class="strong">bbObjsArr.count</em> tells
you the number of elements in the array. If no billboard objects
were detected in the selected objects (<em class="strong">bbObjsArr.count</em> is
0), then this check will prevent the loop from being run. And if
no camera object is detected, then the loop will also not be run. </p>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7ad7"></a></span>This completes the creation of the script.</p>
</li></ol>








<!--OList--><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7ad6"></a></span>
<p class="list-intro"><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7ad5"></a></span>Test
the script:</p>
<ol type="1" start="1"><li>On
the MAXScript window, press <span class="keyCaps">Ctrl+E</span> to
run the script.<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7ad4"></a></span>If the script is working properly, the Billboard
dialog appears.</p>
<span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7ad3"></a></span><div class="figure-anchor">
<p><img src="./images/MED/3dsMaxTut/English/tut/tut_billboard_script1.png"></p>
</div>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7ad2"></a></span>Select the billboards and the camera, and click
Set Billboard Effect.</p>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7ad1"></a></span>The billboards should rotate to face the camera.
If you move the camera, the billboards should continue to face it.</p>
<span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7ad0"></a></span><div class="figure-anchor">
<p><img src="./images/MED/3dsMaxTut/English/tut/tut_billboard_facing.png"></p>
</div>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7acf"></a></span>If the Billboard dialog did not appear, or if
you see an error message, this means the script has an error. Check
your script against this tutorial to see if you can spot the problem.
You can find a finished version of the script by clicking the <span class="filePath">tut_billboard_01.ms</span> tab in the
script editor window.</p>
</li><li>Save
the script as <em class="strong">my_billboard_01.ms</em>.</li></ol>


<!--OList--><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7ace"></a></span>
<p class="list-intro"><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7acd"></a></span>Modify
the script:</p>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7acc"></a></span>Now you will modify the script to make object
selection more flexible. You will add two buttons to aid in the
selection process. One button will allow selection of the billboard
objects with the Select By Name dialog. The other will allow selection
of the look-at object with the Select By Name dialog. In addition,
the look-at object will not be restricted to a camera object as in
the previous script.</p>
<ol type="1" start="1"><li>In
the header, update the file name to <em class="strong">my_billboard_02.ms</em>.</li><li>Save
the script as <em class="strong">my_billboard_02.ms</em>.<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7acb"></a></span>Saving the file now will prevent you from accidentally
saving over the previous version.</p>
</li><li>After <em class="strong">--
UI CONTROL ITEMS</em>, add two lines so the code looks like
the following:<div class="codeBlock">
<pre class="codeLine">-- UI CONTROL ITEMS.</pre>
<pre class="codeLine">button but_bbObjs "Select Billboard Objects"</pre>
<pre class="codeLine">button but_laObj "Select LookAt Object"</pre>
<pre class="codeLine">button but_setBBEffect "Set Billboard Effect" width:125 height:40</pre>
</div>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7aca"></a></span>Now you will add the event that will occur when
you press the first button.</p>
</li><li>To
set the functionality of the first button, enter this text after <em class="strong">--
EVENTS</em>:<div class="codeBlock">
<pre class="codeLine">-- Select billboard objects, and put into array.</pre>
<pre class="codeLine">on but_bbObjs pressed do</pre>
<pre class="codeLine">(</pre>
<pre class="codeLine">bbObjsArr=selectByName title:"Select Billboard Objects"</pre>
<pre class="codeLine">) </pre>
</div>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7ac9"></a></span>This button event displays the Select By Name
dialog, then accepts the selections from this dialog and places
them in <em class="strong">bbObjsArr</em>, the billboard objects
array. If you click Cancel or close the dialog without making a
selection, a value of &#8220;undefined&#8221; is returned. </p>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7ac8"></a></span>Now you will add the functionality for the second
new button.</p>
</li><li>Enter
this text after the code for the first button: <div class="codeBlock">
<pre class="codeLine">-- Select lookat object, and put into variable.</pre>
<pre class="codeLine">on but_laObj pressed do</pre>
<pre class="codeLine">(</pre>
<pre class="codeLine">laObj=selectByName title:"Select LookAt Object" single:true</pre>
<pre class="codeLine">) </pre>
</div>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7ac7"></a></span>This button event displays the Select By Name
dialog, accepts the selection from this dialog, and assigns it to <em class="strong">laObj</em>,
the look-at object. If you click Cancel or close the dialog without
making a selection, a value of &#8220;undefined&#8221; is returned.</p>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7ac6"></a></span>Next, you must remove the existing code that
identifies the objects and places them in the variable and array. </p>
</li><li>In
the event for <em class="strong">setBBEffect</em>, in the code that
begins with <em class="strong">on but_setBBEffect pressed do</em>,
delete everything starting from <em class="strong">bbObjsArr=#()</em> to
just before <em class="strong">-- Finally, set billboard effect.</em>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7ac5"></a></span>The modified script is complete.</p>
</li><li>Save
the script as <em class="strong">my_billboard_02.ms</em>.<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7ac4"></a></span>You can find a finished version of the modified
script in the file <span class="filePath">tut_billboard_02.ms</span>.</p>
</li></ol>







<!--OList--><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7ac3"></a></span>
<p class="list-intro"><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7ac2"></a></span>Test
the modified script:</p>
<ol type="1" start="1"><li>On
the MAXScript window, press <span class="keyCaps">Ctrl+E</span> to
evaluate the script.<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7ac1"></a></span>A dialog appears with three buttons: Select
Billboard Objects, Select LookAt Object, Set Billboard Effect.</p>
<span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7ac0"></a></span><div class="figure-anchor">
<p><img src="./images/MED/3dsMaxTut/English/tut/tut_billboard_3buttons.png"></p>
</div>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7abf"></a></span>If an error occurs, check the instructions in
this tutorial against your script to see if you can find the problem.
Correct as necessary.</p>
</li><li>Click
Select Billboard Objects.<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7abe"></a></span>The Select By Name dialog appears. </p>
</li><li>Select
the billboards.</li><li>Click
Select LookAt Object.<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7abd"></a></span>The Select By Name dialog appears again. </p>
</li><li>Select <em class="mild">Camera01</em>.</li><li>Click
Set Billboard Effect to create the effect.</li><li>Drag
the time slider to see the animation. <p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7abc"></a></span>The planes continually face the camera throughout
the animation.</p>
</li><li>Save
the scene as <em class="mild">my_billboard_facing.max</em>.<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7abb"></a></span>You can find this scene in the file <span class="filePath">tut_billboard_facing.max</span>.</p>
</li></ol>








<!--OList--><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7aba"></a></span>
<p class="list-intro"><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7ab9"></a></span>Fix
the shadows:</p>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7ab8"></a></span>When the billboards turn, the shadows change.
You can fix this problem by using individual lights to cast shadows
for each billboard. This approach has the benefit of taking less
time to render than ray traced shadows.</p>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7ab7"></a></span>First, you will remove the shadows cast by the
direct light on the tree billboards.</p>
<ol type="1" start="1"><li>Select
all the billboards.</li><li>Right-click
any viewport. From the quad menu, choose Object Properties.</li><li>On
the Object Properties dialog &gt; General tab &gt; Rendering Control
group, turn off Cast Shadows. Click OK to close the dialog. <p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7ab6"></a></span>If you render the camera view, you will find
that the trees no longer cast shadows.</p>
</li><li>Right-click
any viewport and choose Unhide All from the quad menu.<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7ab5"></a></span>A spotlight has been placed at the center of
each billboard, pointing in the same direction as the direct light.
The lights are currently turned off. All the spot lights are instanced,
so you only have to turn on one of them to turn on all of them.</p>
</li><li>Select
one of the spot lights.</li><li>In
the Modify panel &gt; General Parameters rollout &gt; Light Type group,
turn on On.<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7ab4"></a></span>All four of the spot lights are now turned on.
In the Intensity/Color/Attenuation rollout, you can also see that
the light has a negative Multiplier value. This will cause the light
to remove light wherever it hits, creating a shadow effect.</p>
</li><li>On
the Modify panel, scroll down to the Advanced Effects rollout.<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7ab3"></a></span>On this rollout, you can see that a Noise map
has been applied to the lights as a projector map. This will project
a noisy black-and-white pattern to simulate a pattern of leaves.
If you press <span class="keyCaps">M</span> to open the
Material Editor, you can see this map in the first slot.</p>
</li><li>Render
the Camera01 viewport.<span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7ab2"></a></span><div class="figure-anchor">
<p><img src="./images/MED/3dsMaxTut/English/il/il_billboard_projector.png"></p>
</div>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7ab1"></a></span>The shadows are not as crisp as the ray-traced
shadows, but they are sufficient to fool the eye in a fly-by. You
can see the resulting animation in the animation file <span class="filePath">tut_billboards.mov</span>. The stationary
shadows contribute to the illusion that the trees are not turning billboards,
but three-dimensional objects.</p>
</li><li>Save
the scene as <em class="mild">my_billboard_shadows.max</em>.<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7ab0"></a></span>You can find the finished scene in the file <span class="filePath">tut_billboard_shadows.max</span>.</p>
</li></ol>









<!--OList--><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7aaf"></a></span>
<p class="list-intro"><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7aae"></a></span>View
the script in the script controller:</p>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7aad"></a></span>The billboard script writes a script which it
places in a script controller for the Rotation track.</p>
<ol type="1" start="1"><li>Select
one of the billboards.</li><li>Go
to the Motion panel.</li><li>On
the Assign Controller rollout, in the list of transform tracks, click
to highlight the Rotation track, and then right-click it. Choose
Properties from the pop-up menu.<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7aac"></a></span>The Script Controller dialog displays, showing
the script generated by the <em class="strong">makeBillboard</em> function.</p>
<span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7aab"></a></span><div class="figure-anchor">
<p><img src="./images/MED/3dsMaxTut/English/dlg/dlg_Foliage_Script_Cont_rot.png"></p>
</div>
</li></ol>



<!--OList--><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7aaa"></a></span>
<p class="list-intro"><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7aa9"></a></span>Paste
the script into a new window:</p>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7aa8"></a></span>Now you will paste the script into a new window
to see its color-coding. The colors will make it easier to see the
various script functions.</p>
<ol type="1" start="1"><li>Highlight
all the text in the Script Controller dialog, and copy it using <span class="keyCaps">Ctrl+C</span>.</li><li>Choose
MAXScript &gt; New Script to open a new script window.</li><li>Paste
the text into the new script using <span class="keyCaps">Ctrl+V</span>.</li><li>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7aa7"></a></span>The body of the script is wrapped in a <em class="strong">try...catch...</em> clause.
This provides error handling. If there are no errors, the last expression
evaluated is <em class="strong">(eulerAngles 90 0 z_rot) as quat</em>.
If an error occurs, the last expression evaluated is <em class="strong">(eulerAngles
90 0 0) as quat</em>. The script calculates using Euler angles,
but casts them as (converts them to) quaternions using the command <em class="strong">as
quat</em>. For information on quaternion rotations,<span class="charspan-special"> </span>consult the MAXScript documentation.</p>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7aa6"></a></span>The script is evaluated every time the frame
changes, but not necessarily when object controllers change. The
command <em class="strong">dependsOn</em> causes the script to
be evaluated when any of the referenced objects change. In this
case, when Camera01 changes position, the script is re-evaluated
to cause the planes to look at the camera in real time. On the <em class="strong">dependsOn</em> line,
the camera&#8217;s object name is surrounded by single quotes to prevent an
error if the name contains spaces, dashes, or other problematic
characters.</p>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7aa5"></a></span>The rest of the code uses basic trigonometry
to calculate the rotation angle required to achieve the billboard
effect. The vector from the billboard object to the target object
is projected onto the world XY plane. A right triangle is constructed
with the projected vector as the hypotenuse. The angle between the
hypotenuse and the X axis is the required world Z rotation angle. </p>
<span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7aa4"></a></span><div class="figure-anchor">
<p><img src="./images/MED/3dsMaxTut/English/ill/ill_billboard_angle_labeled.png"></p>
</div>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7aa3"></a></span>The sine of the angle is positive if the end
point of the projected vector is in the third or fourth quadrant,
and negative if it is in the first or second quadrant. But the plane&#8217;s
local axes are not aligned to the world axes, so a factor of &#8211;90
degrees must be included, and the X axis must be rotated by 90 degrees.</p>
</li></ol>




</div>
<div class="section"><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7aa2"></a></span>
<p class="section_title_h1"><a name="TOC_ENTRY__d0e91405"></a>Summary</p>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7aa1"></a></span>In this tutorial, you learned how to create
a custom MAXScript from a template using a predefined function.
You also learned how to create a dialog with buttons for controlling
the script.</p>
<p><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7aa0"></a></span>If you are interested in learning more about
MAXScript, you can:</p>
<!--UList--><span style="display:none"><a name="WS1a9193826455f5ff13cfd6e1136132a36f-7a9f"></a></span>
<ul><li>Do
the tutorial.</li><li>See <a href="ms-its:maxscript.chm::/learning_maxscript.htm">Learning MAXScript</a> in
the MAXScript Reference.</li></ul>


</div>

<!----><div class="footer-block"><a href="javascript:doComments('./html/ac.cmtdialog.htm');"><span class="comments-link">Please send us your comment about this page</span></a></div><br></body><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script></html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
   <title>Create self-extracting archive with raw image</title>
   <meta name="generator" content="Help &amp; Manual" />
   <meta name="keywords" content="" />
   <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
   <meta http-equiv="Content-Style-Type" content="text/css" />
   <link type="text/css" href="default.css" rel="stylesheet" />

<script type="text/javascript" src="helpman_topicinit.js"></script>
</head>
<body style="margin: 0px 0px 0px 0px; background: #FFFFFF;">


<table width="100%" border="0" cellspacing="0" cellpadding="5" bgcolor="#B8CDE5">
  <tr valign="middle">
    <td align="left">
      <p class="p_Heading1"><span class="f_Heading1">Create self-extracting archive with raw image</span></p>

    </td>
    <td align="right">
     <span style="font-size: 9pt">
     <a href="introduction.htm">Top</a>&nbsp;
     <a href="createntfssfx.htm">Previous</a>&nbsp;
     <a href="quickformat.htm">Next</a>
     </span>
    </td>
  </tr>
</table>


<br>

<!-- Placeholder for topic body. -->
<table width="100%" border="0" cellspacing="0" cellpadding="5"><tr valign="top"><td align="left">
<p>FlashBoot can create standalone self-extracting EXE file (USB formatter) with predefined contents. This file will run in end-user environment under Windows XP or any later version of Windows and extract its content to USB storage device specified by end user without asking any additional questions. This USB thumbdrive will contain fixed-sized image with any filesystem(s) and, if necessary, will be bootable. Self-extracting archive can have customized icon, title, description text, and commands to run after extraction.</p>
<p>&nbsp;</p>
<p>Let's take Raspbian, operating system of choice for Raspberry Pi, to demonstrate how FlashBoot can create self-extracting archives with fixed-sized filesystem: <a href="https://www.raspberrypi.org/downloads/raspbian/" target="_blank" class="weblink">https://www.raspberrypi.org/downloads/raspbian/</a></p>
<p>&nbsp;</p>
<p>The Raspberry Pi is a credit-card sized computer manufactured by Raspberry PI Foundation that plugs into your TV and a keyboard. It's a capable little PC which can be used for many of the things that your desktop PC does, like spreadsheets, word-processing and games.</p>
<p>&nbsp;</p>
<p>Raspberry Pi is also very useful for DIY hobbysts and can be a hardware platform for embedded appliances like TV set top box or supermarket checkout terminal or maybe even ATM.</p>
<p>&nbsp;</p>
<p>1) Run FlashBoot Pro, click Next</p>
<p><a href="welcome_pro.png"><img id="TOGGLE0186A1" class="image-toggle" src="welcome_pro.zoom25.png" border="0" alt=""></a></p>
<p>&nbsp;</p>
<p>2) Choose &quot;USB imaging and duplication&quot; in the the Main Menu</p>
<p><a href="mainmenu3_pro.png"><img id="TOGGLE0186A2" class="image-toggle" src="mainmenu3_pro.zoom25.png" border="0" alt=""></a></p>
<p>&nbsp;</p>
<p>3) Choose &quot;Create self-extracting EXE file (USB formatter) with predefined content&quot; in this menu and click Next</p>
<p><a href="fat_sfx_03.png"><img id="TOGGLE0186A3" class="image-toggle" src="fat_sfx_03.zoom25.png" border="0" alt=""></a></p>
<p>&nbsp;</p>
<p>4) Choose &quot;fixed-size image with any filesystem(s)&quot; in this menu and click Next</p>
<p><a href="raw_sfx_04.png"><img id="TOGGLE0186A4" class="image-toggle" src="raw_sfx_04.zoom25.png" border="0" alt=""></a></p>
<p>&nbsp;</p>
<p>5) Specify source image file and click Next</p>
<p><a href="raw_sfx_05.png"><img id="TOGGLE0186A5" class="image-toggle" src="raw_sfx_05.zoom25.png" border="0" alt=""></a></p>
<p>&nbsp;</p>
<p>6) Customize self-extracting archive: set icon, title and description text for end user. Then click Next.</p>
<p><a href="raw_sfx_06.png"><img id="TOGGLE0186A6" class="image-toggle" src="raw_sfx_06.zoom25.png" border="0" alt=""></a></p>
<p>&nbsp;</p>
<p>7) Specify target EXE file:</p>
<p><a href="raw_sfx_07.png"><img id="TOGGLE0186A7" class="image-toggle" src="raw_sfx_07.zoom25.png" border="0" alt=""></a></p>
<p>&nbsp;</p>
<p>6) Check summary information and click Compress Now</p>
<p><a href="raw_sfx_08.png"><img id="TOGGLE0186A8" class="image-toggle" src="raw_sfx_08.zoom25.png" border="0" alt=""></a></p>
<p>&nbsp;</p>
<p>7) Wait for process completion</p>
<p><a href="raw_sfx_09.png"><img id="TOGGLE0186A9" class="image-toggle" src="raw_sfx_09.zoom25.png" border="0" alt=""></a></p>
<p>&nbsp;</p>
<p>8) Self-extracting EXE file is ready to use. Click OK to exit</p>
<p><a href="raw_sfx_10.png"><img id="TOGGLE0186AA" class="image-toggle" src="raw_sfx_10.zoom25.png" border="0" alt=""></a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>Let's test just created self-extracting archive. Here's now it looks like:</p>
<p><a href="raw_sfx_11.png"><img id="TOGGLE0186AB" class="image-toggle" src="raw_sfx_11.zoom25.png" border="0" alt=""></a></p>
<p>&nbsp;</p>
<p>Progress window looks like this:</p>
<p><a href="raw_sfx_12.png"><img id="TOGGLE0186AC" class="image-toggle" src="raw_sfx_12.zoom25.png" border="0" alt=""></a></p>
<p>&nbsp;</p>
<p>When extraction is finished, message like this is displayed:</p>
<p><a href="raw_sfx_13.png"><img id="TOGGLE0186AD" class="image-toggle" src="raw_sfx_13.zoom25.png" border="0" alt=""></a></p>

</td></tr></table>

<script type="text/javascript">
if (window.topicInitScriptAvailable) {
HMInitToggle('TOGGLE0186A1','hm.type','picture','hm.state','0','hm.src0','welcome_pro.zoom25.png','hm.src1','welcome_pro.png');
HMInitToggle('TOGGLE0186A2','hm.type','picture','hm.state','0','hm.src0','mainmenu3_pro.zoom25.png','hm.src1','mainmenu3_pro.png');
HMInitToggle('TOGGLE0186A3','hm.type','picture','hm.state','0','hm.src0','fat_sfx_03.zoom25.png','hm.src1','fat_sfx_03.png');
HMInitToggle('TOGGLE0186A4','hm.type','picture','hm.state','0','hm.src0','raw_sfx_04.zoom25.png','hm.src1','raw_sfx_04.png');
HMInitToggle('TOGGLE0186A5','hm.type','picture','hm.state','0','hm.src0','raw_sfx_05.zoom25.png','hm.src1','raw_sfx_05.png');
HMInitToggle('TOGGLE0186A6','hm.type','picture','hm.state','0','hm.src0','raw_sfx_06.zoom25.png','hm.src1','raw_sfx_06.png');
HMInitToggle('TOGGLE0186A7','hm.type','picture','hm.state','0','hm.src0','raw_sfx_07.zoom25.png','hm.src1','raw_sfx_07.png');
HMInitToggle('TOGGLE0186A8','hm.type','picture','hm.state','0','hm.src0','raw_sfx_08.zoom25.png','hm.src1','raw_sfx_08.png');
HMInitToggle('TOGGLE0186A9','hm.type','picture','hm.state','0','hm.src0','raw_sfx_09.zoom25.png','hm.src1','raw_sfx_09.png');
HMInitToggle('TOGGLE0186AA','hm.type','picture','hm.state','0','hm.src0','raw_sfx_10.zoom25.png','hm.src1','raw_sfx_10.png');
HMInitToggle('TOGGLE0186AB','hm.type','picture','hm.state','0','hm.src0','raw_sfx_11.zoom25.png','hm.src1','raw_sfx_11.png');
HMInitToggle('TOGGLE0186AC','hm.type','picture','hm.state','0','hm.src0','raw_sfx_12.zoom25.png','hm.src1','raw_sfx_12.png');
HMInitToggle('TOGGLE0186AD','hm.type','picture','hm.state','0','hm.src0','raw_sfx_13.zoom25.png','hm.src1','raw_sfx_13.png');
}
</script>
</body>
</html>

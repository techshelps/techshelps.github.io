<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>OpenResultset Method (Remote Data)</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="rdmthopenresultset"></a>OpenResultset Method (Remote Data)</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdmthOpenResultset_C;rdmthOpenResultsetC;vbproBooksOnlineJumpTopic">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Example">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdmthOpenResultset_X;rdmthOpenResultsetX">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Applies To">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdmthOpenResultset_A;rdmthOpenResultsetA">
</object></p>
<p>
Creates a new <b>rdoResultset</b> object.</p>
<p class=label>
<b>Syntax</b></p>
<p>
Set <i>variable</i> = <i>connection</i>.<b>OpenResultset</b>(<i>name</i> [,<i>type</i> [,<i>locktype</i> [,<i>option</i>]]])</p>
<p>
Set <i>variable</i> = <i>object</i>.<b>OpenResultset</b>([<i>type</i> [,<i>locktype</i> [, <i>option</i>]]])</p>
<p>
The <b>OpenResultset</b> method syntax has these parts:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=30%><b>Part</b></td>
<td class=label width=70%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=30%><i>variable</i></td>
<td width=70%>An <a href="rddefobjectexpression.htm">object expression</a> that evaluates to an <b>rdoResultset</b> object.</td>
</tr>
<tr valign=top>
<td width=30%><i>connection</i></td>
<td width=70%>An object expression that evaluates to an existing <b>rdoConnection</b> object you want to use to create the new <b>rdoResultset</b>.</td>
</tr>
<tr valign=top>
<td width=30%><i>object</i></td>
<td width=70%>An object expression that evaluates to an existing <b>rdoQuery</b> or <b>rdoTable</b> object you want to use to create the new <b>rdoResultset</b>.</td>
</tr>
<tr valign=top>
<td width=30%><i>name</i></td>
<td width=70%>A <a href="rddefstringdatatype.htm">String</a> that specifies the source of the <a href="rddefrow.htm">rows</a> for the new <b>rdoResultset</b>. This argument can specify the name of an <b>rdoTable</b> object, the name of an <b>rdoQuery</b>, or an <a href="rddefsqlstatement.htm">SQL statement</a> that might return rows.</td>
</tr>
<tr valign=top>
<td width=30%><i>type</i></td>
<td width=70%>A <a href="rddefvariantdatatype.htm">Variant</a> or constant that specifies the type of <a href="rddefcursor.htm">cursor</a> to create as indicated in Settings.</td>
</tr>
<tr valign=top>
<td width=30%><i>locktype</i></td>
<td width=70%>A <a href="rddefvariantdatatype.htm">Variant</a> or constant that<b> </b>specifies the type of concurrency control. If you don’t specify a <i>locktype</i>, <b>rdConcurReadOnly</b> is assumed.</td>
</tr>
<tr valign=top>
<td width=30%><i>option</i></td>
<td width=70%>A <a href="rddefvariantdatatype.htm">Variant</a> or constant that specifies characteristics of the new <b>rdoResultset</b>. </td>
</tr>
</table><br>
<p class=label>
<b>Settings</b>
<ul type=disc>
<li>
<b><i>name</i></b><p class=tl>
The <b><i>name</i></b> argument is used when the <b>OpenResultset</b> method is used against the <b>rdoConnection</b> object, and no query has been pre-defined. In this case, name typically contains a row-returning SQL query. The query can contain more than one SELECT statement, or a combination of action queries and SELECT statements, but not just action queries, or a trappable error will result. See the <b>SQL</b> property for additional details.</P></li>
<li>
Cursor <b><i>type</i></b><p class=atl>
<B><b>Note</b></B> &nbsp; Not all types of cursors and concurrency are supported by every ODBC data source driver. See <b>rdoResultset</b> for more information. In addition, not all types of cursor drivers support SQL statements that return more than one set of results. For example, server-side cursors do not support queries that contain more than one SELECT statement.</p><p class=tl>
The <b><i>type</i></b> argument specifies the type of cursor used to manage the result set. If you don’t specify a type, <b>OpenResultset</b> creates a forward-only <b>rdoResultset</b>. Not all ODBC data sources or drivers can implement all of the cursor types. If your driver cannot implement the type chosen, a warning message is generated and placed in the <b>rdoErrors</b> collection. Use one of the following result set type constants that defines the cursor type of the new <b>rdoResultset</b> object. For additional details on types of cursors, see the <b>CursorType</b> property.</P></li>
</ul>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b><i>type</i> Constant</b></td>
<td class=label width=12%><b>Value</b></td>
<td class=label width=55%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=33%><b>rdOpenForwardOnly</b></td>
<td width=12%>0</td>
<td width=55%>(Default) Opens a <a href="rddefforwardscrollingresultset.htm">forward-only-type</a> <b>rdoResultset</b> object.</td>
</tr>
<tr valign=top>
<td width=33%><b>rdOpenKeyset</b></td>
<td width=12%>1</td>
<td width=55%>Opens a <a href="rddefkeysetresultset.htm">keyset-type</a> <b>rdoResultset</b> object.</td>
</tr>
<tr valign=top>
<td width=33%><b>rdOpenDynamic</b></td>
<td width=12%>2</td>
<td width=55%>Opens a <a href="rddefdynamicresultset.htm">dynamic-type</a> <b>rdoResultset</b> object. </td>
</tr>
<tr valign=top>
<td width=33%><b>rdOpenStatic</b></td>
<td width=12%>3</td>
<td width=55%>Opens a <a href="rddefstaticresultset.htm">static-type</a> <b>rdoResultset</b> object.</td>
</tr>
</table><br>
<ul type=disc>
<li>
Concurrency <b><i>LockType</i></b><p class=tl>
In order to maintain adequate control over the data being updated, RDO provides a number of concurrency options that control how other users are granted, or refused access to the data being updated. In many cases, when you lock a particular row using one of the <b>LockType</b> settings, the remote engine might also lock the entire page containing the row. If too many pages are locked, the remote engine might also escalate the page lock to a table lock to improve overall system performance.</P><p class=tl>
Not all lock types are supported on all data sources. For example, for SQL Server and Oracle servers, <a href="rddefstaticresultset.htm">static-type</a> <b>rdoResultset</b> objects can only support <b>rdConcurValues</b> or <b>rdConcurReadOnly</b>. For additional details on the types of concurrency, see the <b>LockType</b> property.</P></li>
</ul>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b><i>locktype</i> Constant</b></td>
<td class=label width=12%><b>Value</b></td>
<td class=label width=55%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=33%><b>rdConcurReadOnly</b></td>
<td width=12%>1</td>
<td width=55%>(Default) Read-only .</td>
</tr>
<tr valign=top>
<td width=33%><b>rdConcurLock</b></td>
<td width=12%>2</td>
<td width=55%><a href="rddefpessimistic.htm">Pessimistic</a> concurrency. </td>
</tr>
<tr valign=top>
<td width=33%><b>rdConcurRowVer</b></td>
<td width=12%>3</td>
<td width=55%><a href="rddefoptimistic.htm">Optimistic</a> concurrency based on row ID.</td>
</tr>
<tr valign=top>
<td width=33%><b>rdConcurValues</b></td>
<td width=12%>4</td>
<td width=55%>Optimistic concurrency based on row values. </td>
</tr>
<tr valign=top>
<td width=33%><b>rdConcurBatch</b></td>
<td width=12%>5</td>
<td width=55%>Optimistic concurrency using batch mode updates. <b>Status</b> values returned for each row successfully updated.</td>
</tr>
</table><br>
<ul type=disc>
<li>
Other<b><i> options</i></b><p class=tl>
If you use the <b>rdAsyncEnable</b> option, control returns to your application as soon as the query is begun, but before a <a href="idh_rddefresultset.htm">result set</a> is available. To test for completion of the query, use the <b>StillExecuting</b> property. The <b>rdoResultset</b> object is not valid until <b>StillExecuting</b> returns <b>False</b>. You can also use the QueryComplete event to determine when the query is ready to process. Until the <b>StillExecuting</b> property returns <b>True</b>, you cannot reference any other property of the uninitialized <b>rdoResultset</b> object and only the <b>Cancel</b> and <b>Close</b> methods are valid.</P><p class=tl>
If you use the <b>rdExecDirect</b> option, RDO uses the <i>SQLExecDirect</i> ODBC API function to execute the query. In this case, no temporary stored procedure is created to execute the query. This option can save time if you don’t expect to execute the query more than a few times in the course of your application. In addition, when working with queries that should not be run as stored procedures but executed directly, this option is mandatory. For example, in queries that create temporary tables for use by subsequent queries, you must use the <b>rdExecDirect</b> option.</P><p class=tl>
You can use the following constants for the <b><i>options</i></b> argument:</P></li>
</ul>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Constant</b></td>
<td class=label width=18%><b>Value</b></td>
<td class=label width=49%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=33%><b>rdAsyncEnable</b></td>
<td width=18%>32</td>
<td width=49%>Execute operation <a href="rddefasynchronous.htm">asynchronously</a>.</td>
</tr>
<tr valign=top>
<td width=33%><b>rdExecDirect</b></td>
<td width=18%>64</td>
<td width=49%>(Default.) Bypass creation of a stored procedure to execute the query. Uses SQLExecDirect instead of SQLPrepare and SQLExecute.</td>
</tr>
</table><br>
<p class=label>
<b>Remarks</b></p>
<p>
If the <b>OpenResultset</b> method succeeds, RDO instantiates a new <b>rdoResultset</b> object and appends it to the <b>rdoResultsets</b> collection – even if no rows are returned by the query. If the query fails to compile or execute due to a syntax error, permissions problem or other error, the <b>rdoResultset</b> is not created and a trappable error is fired. The <b>rdoResultset</b> topic contains additional details on <b>rdoResultset</b> behavior and managing the <b>rdoResultsets</b> collection.</p>
<p class=indent>
<B><b>Note</b></B> &nbsp; RDO 2.0 behaves differently than RDO 1.0 in how it handles orphaned references to <b>rdoResultset</b> objects. When you Set a variable already assigned to an <b>rdoResultset</b> object with another <b>rdoResultset</b> object using the <b>OpenResultset</b> method, the existing <b>rdoResultset</b> object is closed and dropped from the <b>rdoResultsets</b> collection. In RDO 1.0, the existing object remained open and was left in the <b>rdoResultsets</b> collection.</p>
<p class=indent>
<B><b>Note</b></B> &nbsp; Before you can use the name of a base table in the <b><i>name</i></b> argument, you must first use the <b>Refresh</b> method against the <b>rdoTables</b> collection to populate it. You can also populate the <b>rdoTables</b> collection by referencing one of its members by its ordinal number. For example, referencing <b>rdoTables</b>(0) will populate the entire collection.</p>
<p class=label>
<b>Executing Multiple Operations on a Connection</b></p>
<p>
If there is an unpopulated <b>rdoResultset</b> pending on a data source that can only support a single operation on an <b>rdoConnection</b> object, you cannot create additional <b>rdoQuery</b> or <b>rdoResultset </b>objects using the <b>OpenResultset</b> method<b>,</b> or use the <b>Refresh</b> method on the <b>rdoTable</b> object until the <b>rdoResultset</b> is flushed, closed, or fully populated. For example, when using SQL Server 4.2 as a data source, you cannot create an additional <b>rdoResultset</b> object until you move to the last row of the last result set of the current <b>rdoResultset</b> object. To populate the result set, use the <b>MoreResults</b> method to move through all pending result sets, or use the <b>Cancel</b> or <b>Close</b> method on the <b>rdoResultset</b> to flush all pending result sets.</p>
</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

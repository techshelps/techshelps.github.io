<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<title>Execute Method (Remote Data)</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="rdmthexecute"></a>Execute Method (Remote Data)</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdmthExecute_C;rdmthExecuteC;vbproBooksOnlineJumpTopic">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Example">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdmthExecute_X;rdmthExecuteX">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Applies To">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdmthExecute_A;rdmthExecuteA">
</object></p>
<p>
Runs an <a href="rddefactionquery.htm">action query</a> or executes an <a href="rddefsqlstatement.htm">SQL statement</a> that does not return rows.</p>
<p class=label>
<b>Syntax</b></p>
<p>
<i>connection</i><b>.Execute </b><i>source</i>[, <i>options</i>]</p>
<p>
<i>query</i><b>.Execute </b>[<i>options</i>]</p>
<p>
The <b>Execute</b> method syntax has these parts:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=20%><b>Part</b></td>
<td class=label width=80%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=20%><i>connection</i></td>
<td width=80%>An <a href="rddefobjectexpression.htm">object expression</a> that evaluates to the <b>rdoConnection</b> object on which the query will run.</td>
</tr>
<tr valign=top>
<td width=20%><i>query</i></td>
<td width=80%>An object expression that evaluates to the <b>rdoQuery</b> object whose <b>SQL</b> property setting specifies the SQL statement to execute.</td>
</tr>
<tr valign=top>
<td width=20%><i>source</i></td>
<td width=80%>A <a href="rddefstringexpression.htm">string expression</a> that contains the action query to execute or the name of an <b>rdoQuery</b>.</td>
</tr>
<tr valign=top>
<td width=20%><i>options</i></td>
<td width=80%>A <a href="rddefvariantdatatype.htm">Variant</a> or constant that determines how the query is run, as specified in Settings.</td>
</tr>
</table><br>
<p class=label>
<b>Settings</b></p>
<p>
You can use the following constants for the <b><i>options</i></b> argument:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=30%><b>Constant</b></td>
<td class=label width=19%><b>Value</b></td>
<td class=label width=51%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=30%><b>rdAsyncEnable</b></td>
<td width=19%>32</td>
<td width=51%>Execute operation <a href="rddefasynchronous.htm">asynchronously</a>.</td>
</tr>
<tr valign=top>
<td width=30%><b>rdExecDirect</b></td>
<td width=19%>64</td>
<td width=51%>(Default.) Bypass creation of a stored procedure to execute the query. Uses SQLExecDirect instead of SQLPrepare and SQLExecute.</td>
</tr>
</table><br>
<p class=label>
<b>Remarks</b></p>
<p>
It is recommended that you use the <b>Execute</b> method only for action queries. Because an action query doesn’t return any rows, Execute doesn’t return an <b>rdoResultset</b>. You can use the <b>Execute</b> method on queries that execute multiple statements, but none of these batched statements should return rows. To execute multiple result set queries that are a combination of action and SELECT queries, use the <b>OpenResultset</b> method.</p>
<p>
Use the <b>RowsAffected</b> property of the <b>rdoConnection</b> or <b>rdoQuery</b> object to determine the number of rows affected by the most recent <b>Execute</b> method. <b>RowsAffected</b> contains the number of rows deleted, updated, or inserted when executing an action query. When you use the <b>Execute</b> method to run an <b>rdoQuery</b>, the <b>RowsAffected</b> property of the <b>rdoQuery</b> object is set to the number of rows affected.</p>
<p class=label>
<b>Options</b></p>
<p>
To execute the query asynchronously, use the <b>rdAsyncEnable</b> option (which is set by default). If set, the <a href="rddefdatasource.htm">data source</a> query processor immediately begins to process the query and returns to your application before the query is complete. Use the <b>StillExecuting</b> property to determine when the query processor is ready to return the results from the query. Use the <b>Cancel</b> method to terminate processing of an asynchronous query.</p>
<p>
To bypass creation of a temporary stored procedure to execute the query, use the <b>rdExecDirect</b> option. This option is required when the query contains references to transactions or temporary tables that only exist in the context of a single operation. For example, if you include a Begin Transaction TSQL statement in your query or reference a temporary table, you must use <b>rdExecDirect</b> to ensure that the remote engine is not confused when these objects are left pending at the end of the query.</p>
<p>
While it is possible to execute stored procedures using the <b>Execute</b> method, it is not recommended because the procedure’s return value and output parameters are discarded and the procedure cannot return rows. Use the <b>OpenResultset</b> method against an <b>rdoQuery</b> to execute <a href="rddefstoredprocedure.htm">stored procedures</a>.</p>
<p class=indent>
<B><b>Note</b></B> &nbsp; When executing stored procedures that do not require parameters, do not include the parenthesis in the SQL statement. For example, to execute the "MySP" procedure use the following syntax:<code> {Call MySP }</code>.</p>
<p>
Also, a call like:</p>
<pre><code>&nbsp;&nbsp;&nbsp;rCn.Execute SqlStatement, rdAsyncEnable +&nbsp; 
 &nbsp; rdExecDirect
</code></pre>
<p>
allows only one outstanding request and allows Visual Basic code to overlap with SQL Server processing, but doesn't allow multiple outstanding SQL Server requests.</p>
</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

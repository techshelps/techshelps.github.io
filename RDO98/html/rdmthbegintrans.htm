<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<title>BeginTrans, CommitTrans, RollbackTrans Methods (Remote Data)</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="rdmthbegintrans"></a>BeginTrans, CommitTrans, RollbackTrans Methods (Remote Data)</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdmthBeginTrans_C;rdmthBeginTransC;vbproBooksOnlineJumpTopic">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Example">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdmthBeginTrans_X;rdmthBeginTransX">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Applies To">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdmthBeginTrans_A;rdmthBeginTransA">
</object></p>
<p>
The transaction methods manage <a href="rddeftransaction.htm">transaction</a> processing during a <a href="rddefsession.htm">session</a> represented by the <i>object</i> placeholder as follows:
<ul type=disc>
<li>
<b>BeginTrans</b> begins a new transaction.<br><br></li>
<li>
<b>CommitTrans</b> ends the <a href="rddefcurrenttransaction.htm">current transaction</a> and saves the changes.<br><br></li>
<li>
<b>RollbackTrans</b> ends the current transaction and restores the <a href="rddefdatabase.htm">databases</a> in the <b>rdoEnvironment</b> object to the state they were in when the current transaction began.</li>
</ul>
<p>
You can use the transaction methods with an <b>rdoConnection</b> object — but in this case, the transaction scope only includes <b>rdoResultset</b> and <b>rdoQuery</b> objects created under the <b>rdoConnection</b>.</p>
<p class=label>
<b>Syntax</b></p>
<p>
<i>object</i><b>.BeginTrans | CommitTrans | RollbackTrans</b></p>
<p>
The <i>object</i> placeholder represents an <a href="rddefobjectexpression.htm">object expression</a> that evaluates to an object in the Applies To list.</p>
<p class=label>
<b>Remarks</b></p>
<p>
You use the transaction methods with an <b>rdoEnvironment</b> or <b>rdoConnection</b> object when you want to treat a series of changes made to the databases in a session as one logical unit. That is, either the set of operations completes as a set, or is rolled back as a set. This way if any operation in the set fails, the entire transaction fails. Transactions also permit you to make <i>temporary</i> changes to the database – changes that can be undone with the <b>RollbackTrans</b> method.</p>
<p>
Typically, ODBC drivers work in one of two modes:
<ul type=disc>
<li>
<B><b>Auto-commit Mode:</b></B> When you have not explicitly started a transaction using the BeginTrans method, every operation executed is immediately committed to the database upon completion.<br><br></li>
<li>
<B><b>Manual-commit Mode:</b></B> When you explicitly start a transaction using the <b>BeginTrans</b> method or use the ODBC <b>SQLSetStmtOption</b> function to disable the SQL_AUTO_COMMIT mode, or send an SQL statement to begin a transaction (BEGIN TRANS), operations are part of a transaction and no changes are committed to the database until you use the <b>CommitTrans</b> method. If the connection fails before <b>CommitTrans</b> is executed, or you use the <b>RollbackTrans</b> method, the operations are undone — rolled back.</li>
</ul>
<p class=indent>
<B><b>Note</b></B> &nbsp; When working with remote servers that support a Distributed Transaction Coordinator (DTC) like Microsoft SQL Server, you can initiate and control transactions that span more than one server. That is, if you invoke a procedure on the remote server that invokes a remote procedure call, the DTC service can ensure that this operation is included in the initial transaction. </p>
<p>
Typically, you use transactions to maintain the integrity of your data when you must <a href="rddefupdate.htm">update</a> <a href="rddefrow.htm">rows</a> in two or more <a href="rddeftable.htm">tables</a> and ensure that changes made are completed (committed) in all tables or none at all (rolled back). For example, if you transfer money from one account to another, you might subtract an amount from one and add the amount to another. If either update fails, the accounts no longer balance. Use the <b>BeginTrans</b> method before updating the first row, and then, if any subsequent update fails, you can use the <b>RollbackTrans</b> method to undo all of the updates. Use the <b>CommitTrans</b> method after you successfully update the last row.</p>
<p class=indent>
<B><b>Caution</b></B> &nbsp; Within one <b>rdoEnvironment</b> object, transactions are always global to the <b>rdoEnvironment</b> and aren’t limited to only one database or <a href="idh_rddefresultset.htm">result set</a>. If you perform operations on more than one database or result set within an <b>rdoEnvironment</b> transaction, the <b>RollbackTrans</b> method restores all operations on those databases and result sets.</p>
<p>
Once you use <b>CommitTrans</b>, you can’t undo changes made during that transaction unless the transaction is nested within another transaction that is itself rolled back. You cannot nest transactions unless you use an <a href="rddefactionquery.htm">action query</a> to directly execute <a href="rddefstructuredquerylanguagesql.htm">SQL</a> transaction management statements. If you want to have simultaneous transactions with overlapping, non-nested scopes, you can create additional <b>rdoEnvironment</b> objects to contain the concurrent transactions.</p>
<p class=indent>
<B><b>Note</b></B> &nbsp; You can use SQL action queries that contain transaction statements. For example, with Microsoft SQL Server, you can use SQL statements like BEGIN TRANSACTION, COMMIT TRANSACTION, or ROLLBACK TRANSACTION. This technique supports nested transactions which may not be supported by the <a href="rddefodbcdriver.htm">ODBC driver</a>.</p>
<p>
If you close an <b>rdoEnvironment</b> object without saving or rolling back any pending transactions, the transactions are automatically rolled back.</p>
<p>
No error occurs If you use the <b>CommitTrans</b> or <b>RollbackTrans</b> method without first using the <b>BeginTrans</b> method.</p>
<p>
Some databases may not support transactions, in which case the<b> Transactions</b> property of the <b>rdoConnection</b> object or <b>rdoResultset</b> object is <b>False</b>. To make sure that the database supports transactions, check the value of the <b>Transactions</b> property of the <b>rdoConnection</b> object before using the <b>BeginTrans</b> method. If you are using an <b>rdoResultset</b> object based on more than one database, check the <b>Transactions</b> property of the <b>rdoResultset</b> object. If the <b>rdoConnection </b>or <b>rdoResultset</b> doesn’t support transactions, the methods are ignored and no error occurs.</p>
</BODY>
</HTML>

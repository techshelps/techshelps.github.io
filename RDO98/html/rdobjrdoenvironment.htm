<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<title>rdoEnvironment Object</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="rdobjrdoenvironment"></a>rdoEnvironment Object</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdobjrdoEnvironment_C;rdobjrdoEnvironmentC;vbproBooksOnlineJumpTopic">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Example">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdobjrdoEnvironment_X;rdobjrdoEnvironmentX">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Properties">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdidxrdoEnvironmentP;rdobjrdoEnvironment_P">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Methods">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdidxrdoEnvironmentM;rdobjrdoEnvironment_M;vamthAdd;vamthRemove">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Events">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdobjrdoEnvironment_E;rdobjrdoEnvironmentE">
</object></p>
<p>
An <b>rdoEnvironment</b> object defines a logical set of <a href="rddefconnection.htm">connections</a> and transaction scope for a particular user name. It contains both open and allocated but unopened connections, provides mechanisms for simultaneous <a href="rddeftransaction.htm">transactions</a>, and provides a security context for <a href="rddefdatamanipulationlanguage.htm">data manipulation language</a> (DML) operations on the <a href="rddefdatabase.htm">database</a>.</p>
<p>
<a href="rdobjrdoengine.htm"><img src="rdoeng3.gif" border=0></a><br>
<img src="parchild.gif" border=0><a href="rdobjrdoenvironmentscollection.htm"><img src="rdoenvs.gif" border=0></a><br>
<img src="space.gif" border=0><img src="parchild.gif" border=0><img src="rdoenv.gif" border=0><br>
<img src="space.gif" border=0><img src="space.gif" border=0><img src="parchild.gif" border=0><a href="rdobjrdoconnectionscollection.htm"><img src="rdoconns.gif" border=0></a></p>
<p class=label>
<b>Remarks</b></p>
<p>
Generally, an <b>rdoEnvironment</b> object corresponds to an <a href="rddefodbc.htm">ODBC</a> environment that can be referred to by the <b>rdoEnvironment</b> object's <b>hEnv</b> property. However, if the <i>Name</i> argument is <i>not</i> provided when the <b>rdoEnvironment</b> object is created by the <b>rdoCreateEnvironment</b> method, a stand-alone <b>rdoEnvironment</b> is created that is not added to the <b>rdoEnvironments</b> collection. Stand-alone <b>rdoEnvironment</b> objects are not exposed to other in-process DLLs unless specifically designated as public. If the reference count for any private <b>rdoEnvironment</b> is reduced to zero, all <b>rdoConnections</b> associated with the <b>rdoEnvironment</b> are closed.</p>
<p>
Once you set the properties of an <b>rdoEnvironment</b> object, you can use the <b>Add</b> method to append it to the <b>rdoEnvironments</b> collection or the <b>Remove</b> method to detach and deallocate the object. The <b>Name </b>property is read-only and is determined by the specific remote data object.</p>
<p>
The default <b>rdoEnvironment</b> is created automatically when the <b>RemoteData</b> control is initialized, or the first r<a href="rddefremotedataobject.htm">emote data object</a> is referenced in code. The <b>Name</b> property of <b>rdoEnvironments</b>(0) is "Default_Environment". The user name and password for <b>rdoEnvironments</b>(0) are both "".</p>
<p>
<b>rdoEnvironment</b> objects can be created with the <b>rdoCreateEnvironment</b> method of the <b>rdoEngine</b> object which automatically appends the new object to the <b>rdoEnvironments</b> collection. All <b>rdoEnvironment</b> objects created in this manner are assigned properties based on the default properties set in the <b>rdoEngine</b> object.</p>
<p>
The user name and password information from the <b>rdoEnvironment</b> is used to establish the connection if these values are not supplied in the <b><i>connect</i></b> argument of the <b>OpenConnection</b> method, or in the <b>Connect</b> property of the <a href="rddefdata.htm">RemoteData control</a>.</p>
<p>
All <b>rdoEnvironment</b> objects share a common <b>hEnv</b> value that is created on an application basis. Use the <b>rdoEnvironment</b> object to manage the current ODBC environment, or to start an additional connection. In an <b>rdoEnvironment</b>, you can open multiple connections, manage transactions, and establish security based on user names and passwords. For example, you can:
<ul type=disc>
<li>
Create an <b>rdoEnvironment</b> object using the <b>Name</b>, <b>Password</b>, and <b>UserName</b> properties to establish a named, password-protected environment. The environment creates a scope in which you can open multiple connections and conduct one instance of coordinated transactions.<br><br></li>
<li>
Use the <b>CursorDriver</b> property to determine which cursor driver library is used to build <b>rdoResultset</b> objects. You can choose one of four types of cursors, or set the <b>CursorDriver</b> property to <b>rdUseNone</b> to indicate that no cursor is to be used to manage result sets.<br><br></li>
<li>
Use the <b>OpenConnection</b> method to open one or more existing connections in that <b>rdoEnvironment</b>.<br><br></li>
<li>
Use the <b>LoginTimeout</b> property to determine how long the ODBC drivers should wait before abandoning the connection attempt.<br><br></li>
<li>
Use the <b>BeginTrans</b>, <b>CommitTrans</b>, and <b>RollbackTrans</b> methods to manage transaction processing within an <b>rdoEnvironment</b> across several connections.<br><br></li>
<li>
Use several <b>rdoEnvironment</b> objects to conduct multiple, simultaneous, independent, and overlapping transactions.<br><br></li>
<li>
Use the <b>Close</b> method to terminate an environment and the connection and remove the <b>rdoEnvironment</b> object from the <b>rdoEnvironments</b> collection. This also closes all connections associated with the object.</li>
</ul>
<p class=label>
<b>Managing Transactions</b></p>
<p>
The <b>rdoEnvironment</b> also determines transaction scope. Committing an <b>rdoEnvironment</b> transaction commits all open <b>rdoConnection</b> databases and their corresponding open <b>rdoResultset</b> objects. This does not imply a <a href="rddeftwophasecommit.htm">two-phase commit</a> operation — simply that individual <b>rdoConnection</b> objects are instructed to commit any pending operations — one at a time.</p>
<p>
For Microsoft SQL Server databases, the Distributed Transaction Coordinator (DTC) can be used to manage blocks of transactions simply by introducing the SQL query with the BEGIN DISTRIBUTED TRANSACTION statement. DTC facilitates the creation of network-wide database updates through its own two-phase commit protocol. Whenever SQL Server commits a transaction, the DTC ensures all related resources also commit the transaction. If any part of the transaction fails, the DTC ensures that the entire transaction is rolled back across all enlisted servers.</p>
<p>
When you use transactions, all databases in the specified <b>rdoEnvironment</b> are affected – even if multiple <b>rdoConnection</b> objects are opened in the <b>rdoEnvironment</b>. For example, suppose you use a <b>BeginTrans</b> method against one of the databases visible from the connection, update several <a href="rddefrow.htm">rows</a> in the database, and then delete rows in another <b>rdoConnection</b> object's database. When you use the <b>RollbackTrans</b> method, both the update and delete operations are rolled back. To avoid this problem, you can create additional <b>rdoEnvironment</b> objects to manage transactions independently across <b>rdoConnection</b> objects. Note that transactions executed by multiple <b>rdoEnvironment</b> objects are serialized and are not atomic operations. Because of this, their success or failure is not interdependent. This is an example of batched transactions.</p>
<p>
You can execute nested transactions <i>only</i> if your data source supports them. For example, on a single connection, you can execute a BEGIN TRANS SQL statement, execute several UPDATE queries, and another BEGIN TRANS statement. Any operations executed after the second BEGIN TRANS SQL statement can be rolled back independently of the statements executed after the first BEGIN TRANS. This is an example of nested transactions. To commit the first set of UPDATE statements, you must execute a COMMIT TRANS statement, or a ROLLBACK TRANS statement for each BEGIN TRANS executed.</p>
<p class=label>
<b>rdoEnvironment Events</b></p>
<p>
The following events are fired as the <b>rdoEnvironment</b> object is manipulated. These can be used to micro-manage RDO transactions associated with the <b>rdoEnvironment</b> or to synchronize some other process with the transaction.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Event Name</b></td>
<td class=label width=75%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=25%>BeginTrans</td>
<td width=75%>Fired after the BeginTrans method has completed.</td>
</tr>
<tr valign=top>
<td width=25%>CommitTrans</td>
<td width=75%>Fired after the CommitTrans method has completed.</td>
</tr>
<tr valign=top>
<td width=25%>RollbackTrans</td>
<td width=75%>Fired after the RollbackTrans method has completed.</td>
</tr>
</table><br>
<p class=label>
<b>Addressing rdoEnvironment Objects</b></p>
<p>
The <b>Name</b> property of <b>rdoEnvironment</b> objects is set from the <i>name</i> argument passed to the <b>rdoCreateEnvironment</b> method. You can refer to any other <b>rdoEnvironment</b> object by specifying its <b>Name</b> property setting using this syntax:</p>
<p>
<b>rdoEnvironments</b>("MyEnvName")</p>
<p>
or simply:</p>
<p>
<b>rdoEnvironments</b>!<i>MyEnvName</i></p>
<p>
You can also refer to <b>rdoEnvironment</b> objects by their position in the <b>rdoEnvironments</b> collection using this syntax (where <i>n</i> is the <i>n</i>th member of the zero-based <b>rdoEnvironments</b> collection):</p>
<p>
<b>rdoEngine.rdoEnvironments</b>(<i>n</i>)</p>
<p>
or simply:</p>
<p>
<b>rdoEnvironments</b>(<i>n</i>)</p>
</BODY>
</HTML>

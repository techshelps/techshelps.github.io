<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<title>GetChunk Method (Remote Data)</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="rdmthgetchunk"></a>GetChunk Method (Remote Data)</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdmthGetChunk_C;rdmthGetChunkC;vbproBooksOnlineJumpTopic">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Example">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdmthGetChunk_X;rdmthGetChunkX">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Applies To">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdmthGetChunk_A;rdmthGetChunkA">
</object></p>
<p>
Returns all or a portion of the contents of an <b>rdoColumn</b> object with a <a href="rddefdatatype.htm">data type</a> of <b>rdTypeLONGVARBINARY</b> or <b>rdTypeLONGVARCHAR</b>.</p>
<p class=label>
<b>Syntax</b></p>
<p>
<i>varname</i> = <i>object</i> <b>!</b> <i>column</i><b>.GetChunk(</b><i>numbytes</i><b>)</b></p>
<p>
The <b>GetChunk</b> method syntax has these parts:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=20%><b>Part</b></td>
<td class=label width=80%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=20%><i>varname</i></td>
<td width=80%>The name of a <a href="rddefvariantdatatype.htm">Variant</a> that receives the data from the <b>rdoColumn</b> object named by <i>column.</i></td>
</tr>
<tr valign=top>
<td width=20%><i>object</i></td>
<td width=80%>An <a href="rddefobjectexpression.htm">object expression</a> that evaluates to an <b>rdoResultset</b> object containing the <b>rdoColumns</b> collection.</td>
</tr>
<tr valign=top>
<td width=20%><i>column</i></td>
<td width=80%>An object expression that evaluates to an <b>rdoColumn</b> object whose <b>ChunkRequired</b> property is <b>True</b>. </td>
</tr>
<tr valign=top>
<td width=20%><i>numbytes</i></td>
<td width=80%>A <a href="rddefnumericexpression.htm">numeric expression</a> that is the number of bytes you want to return.</td>
</tr>
</table><br>
<p class=label>
<b>Remarks</b></p>
<p>
<b><i>Chunk</i></b> data columns are designed to store binary or text values that can range in size from a few characters to over 1.2GB and are stored in the <a href="rddefdatabase.htm">database</a> on successive <a href="rddefdatapage.htm">data pages</a>. In most cases, chunk data cannot be managed with a single operation so you must use the chunk methods to save and write data a piece at a time. If the <b>ChunkRequired</b> property is <b>True</b> for a <a href="rddefcolumn.htm">column</a>, you should use the <b>GetChunk </b>and <b>AppendChunk</b> methods to manipulate column data. The <b>BindThreshold</b> property determines the largest size block that is automatically bound and precludes the need to use the chunk methods.</p>
<p>
If the <b>ChunkRequired</b> property is <b>True</b> for a column, you must use the <b>GetChunk</b> method to retrieve the data. The <b>GetChunk</b> method moves a portion of the data from a chunk column to a variable. The total number of bytes in the column is determined by executing the <b>ColumnSize</b> method.</p>
<p>
The <b>GetChunk</b> method is used iteratively, copying column data to a variable, one segment or chunk at a time. The chunk size is set by <b><i>numbytes</i></b>. The starting point of the copy operation is initially 0, which causes data to be copied from the first byte of the column being read. Subsequent calls to <b>GetChunk</b> get data from the first position after the previously read chunk.</p>
<p>
The bytes returned by <b>GetChunk</b> are assigned to <i>varname</i>. Due to memory requirements for the returned data and temporary storage, <i>numbytes</i> might be limited, but with 32-bit systems this limitation is over 1.2GB, or more practically the memory and disk capacity of your virtual memory system.</p>
<p>
If <i>numbytes</i> is greater than the number of bytes in the column, the actual number of bytes in the column is returned. After assigning the results of <b>GetChunk</b> to a <b>Variant</b> variable, you can use the <b>Len</b> function to determine the number of bytes returned.</p>
<p>
Use the <b>AppendChunk</b> method to write successive blocks of data to the column and <b>GetChunk</b> to extract data from the column. Certain operations (copying, for example) involve temporary strings. If string space is limited, you may need to work with smaller segments of a <i>chunk</i> column instead of the entire column.</p>
<p>
Use the <b>BindThreshold</b> property to specify the largest column size that will be automatically bound.</p>
<p class=indent>
<B><b>Note</b></B> &nbsp; Because the size of a chunk data column can exceed 1.2GB, you should assign the value returned by the <b>GetChunk</b> method to a variable large enough to store the data returned based on the size returned by the <b>ColumnSize</b> method.</p>
</BODY>
</HTML>

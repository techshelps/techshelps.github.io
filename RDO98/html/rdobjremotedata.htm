<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<title>RemoteData Control</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="rdobjremotedata"></a>RemoteData Control</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdobjRemoteData_C;rdobjRemoteDataC;vbproBooksOnlineJumpTopic">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Example">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdobjRemoteData_X;rdobjRemoteDataX">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Properties">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdobjRemoteData_P;rdobjRemoteDataP">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Methods">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdobjRemoteData_M;rdobjRemoteDataM">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Events">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdobjRemoteData_E;rdobjRemoteDataE">
</object></p>
<p>
Provides access to data stored in a remote <a href="rddefodbcdatasource.htm">ODBC data source</a> through bound controls. The <b>RemoteData</b> control enables you to move from <a href="rddefrow.htm">row</a> to row in a <a href="idh_rddefresultset.htm">result set</a> and to display and manipulate data from the rows in <a href="rddefboundcontrol.htm">bound controls</a>.</p>
<p class=label>
<b>Syntax</b></p>
<p>
<b>RemoteData</b></p>
<p class=label>
<b>Remarks</b></p>
<p>
The <b>RemoteData</b> control provides an interface between <a href="rddefremotedataobjectsrdo.htm">Remote Data Objects (RDO)</a> and data-aware bound controls. With the <b>RemoteData</b> control, you can:
<ul type=disc>
<li>
Establish a connection to a data source based on its properties.<br><br></li>
<li>
Create an <b>rdoResultset</b>.<br><br></li>
<li>
Pass the current row's data to corresponding bound controls.<br><br></li>
<li>
Permit the user to position the current row pointer.<br><br></li>
<li>
Pass any changes made to the bound controls back to the data source. </li>
</ul>
<p class=label>
<b>Overview</b></p>
<p>
Without a <b>RemoteData</b> control, a <b>Data</b> control or its equivalent, data-aware (bound) controls on a form can't automatically access data. The RemoteData and Data controls are examples of <i>DataSource Controls</i>. You can perform most remote data access operations using the DataSource controls without writing any code at all. Data-aware controls bound to a DataSource control automatically display data from one or more columns for the <a href="rddefcurrentrow.htm">current row</a> or, in some cases, for a set of rows on either side of the current row. DataSource controls perform all operations on the current row.</p>
<p class=label>
<b>The RemoteData DataSource Control</b></p>
<p>
If the <b>RemoteData</b> control is instructed to move to a different row, all bound controls automatically pass any changes to the <b>RemoteData</b> control to be saved to the ODBC data source. The <b>RemoteData</b> control then moves to the requested row and passes back data from the current row to the bound controls where it's displayed. </p>
<p>
The <b>RemoteData</b> control automatically handles a number of contingencies including empty result sets, adding new rows, editing and updating existing rows, converting and displaying complex data types, and handling some types of errors. However, in more sophisticated applications, you must trap some error conditions that the <b>RemoteData</b> control can't handle. For example, if the remote <a href="rddefserver.htm">server</a> has a problem accessing the data source, the user doesn't have <a href="rddefpermission.htm">permission</a>, or the query can't be executed as coded, a trappable error results. If the error occurs <i>before</i> your application procedures start, or as a result of some internal errors, the Error event is triggered.</p>
<p class=label>
<b>Operation</b></p>
<p>
Use the <b>RemoteData</b> control properties to describe the data source, establish a connection, and specify the type of cursor to create. If you alter these properties once the result set is created, use the <b>Refresh</b> method to rebuild the underlying <b>rdoResultset</b> based on the new property settings. </p>
<p>
The <b>RemoteData</b> control behaves like the Jet-driven <b>Data</b> control in most respects. The following guidelines illustrate a few differences that apply when setting the <b>SQL</b> property.</p>
<p>
You can treat the <b>RemoteData</b> control's <b>SQL</b> property like the <b>Data</b> control's <b>RecordSource </b>property except that it cannot accept the name of a table by itself, unless you populate the <b>rdoTables</b> collection first. Generally, the <b>SQL</b> property specifies an SQL query. For example, instead of just "Authors", you would code "SELECT * FROM AUTHORS" which provides the same functionality. However, specifying a table in this manner is not a good programming practice as it tends to return too many rows and can easily exhaust workstation resources or lock large segments of the database.</p>
<p>
The result set created by the <b>RemoteData</b> control might not be in the same order as the <b>Recordset</b> created by the <b>Data</b> control. For example, if the <b>Data</b> control's <b>RecordSource</b> property is set to "Authors" and the <b>RemoteData</b> control's <b>SQL</b> property is set to "SELECT * FROM AUTHORS", the first record returned by Jet to the <b>Data</b> control is based on the first available index on the Authors table. The <b>RemoteData</b> control, however, returns the first row returned by the remote database engine based on the physical sequence of the rows in the database, regardless of any indexes. In some cases, the order of the records could be identical, but not always.</p>
<p>
This difference in behavior can affect how bound controls handle the resulting rows — especially multiple-row bound controls like the <b>DataGrid</b> control. You can manipulate the <b>RemoteData</b> control with the mouse — to move the current row pointer from row to row, or to the beginning or end of the <b>rdoResultset </b>by clicking the control. As you manipulate the <b>RemoteData</b> control buttons, the current row pointer is repositioned in the <b>rdoResultset</b>. You cannot move off either end of the <b>rdoResultset</b> using the mouse. You also can't set focus to the <b>RemoteData</b> control. </p>
<p class=label>
<b>Other Features</b></p>
<p>
You can use the objects created by the <b>RemoteData</b> control to create additional <b>rdoConnection, </b> <b>rdoResultset</b>, or <b>rdoQuery</b>objects. </p>
<p>
You can set the <b>RemoteData</b> control <b>Resultset</b> property to an <b>rdoResultset</b> created independently of the control. If this is done, the <b>RemoteData </b>control properties are reset based on the new <b>rdoResultset</b> and <b>rdoConnection</b>.</p>
<p>
You can set the <b>Options</b> property to enable asynchronous creation of the <b>rdoResultset</b> (<b>rdAsyncEnable</b>) or to execute the query without creating a temporary stored procedure (<b>rdExecDirect</b>).</p>
<p>
The Validate event is triggered before each reposition of the current row pointer. You can choose to accept the changes made to bound controls or cancel the operation using the Validate event's <i>action</i> argument.</p>
<p>
The <b>RemoteData</b> control can also manage what happens when you encounter an <b>rdoResultset</b> with no rows. By changing the <b>EOFAction</b> property, you can program the <b>RemoteData</b> control to enter <b>AddNew</b> mode automatically. </p>
<p class=indent>
<B><b>Note</b></B>  If you have an <b>Image</b> control bound to an image-containing field in a <b>RemoteData</b> control, and the <b>RemoteData</b> control uses batch cursors (that is, <i>CursorDriver</i> = <i>rdUseClientBatch</i>), the <b>Image</b> control doesn't display the image.</p>
<h3>Programmatic Operation</h3>
<p>
To create an <b>rdoResultset</b> programmatically with the <b>RemoteData</b> control:
<ul type=disc>
<li>
Set the <b>RemoteData</b> control properties to describe the desired characteristics of the <b>rdoResultset</b>.<br><br></li>
<li>
Use the <b>Refresh</b> method to begin the automated process or to create the new <b>rdoResultset</b>. Any existing <b>rdoResultset</b> is discarded.</li>
</ul>
<p>
All of the <b>RemoteData</b> control properties and the new <b>rdoResultset</b> object may be manipulated independently of the <b>RemoteData</b> control<img src="emdash.gif" border=0>with or without bound controls. The <b>rdoConnection</b> and <b>rdoResultset</b> objects each have properties and methods of their own that can be used with procedures that you write.</p>
<p>
For example, the <b>MoveNext</b> method of an <b>rdoResultset</b> object moves the current row to the next row in the <b>rdoResultset</b>. To invoke this method with an <b>rdoResultset</b> created by a <b>RemoteData</b> control, you could use this code:</p>
<pre><code>RemoteData1.Resultset.MoveNext
</code></pre>
<h3>Resultset Does Not Automatically Update Bound Controls</h3>
<p>
Assigning a resultset to a <b>RemoteData </b>Control (<b>RDC</b>) doesn't update bound controls. When you bind a control to the resultset of an <b>RDC</b>, the resultset doesn't automatically display in the control. To illustrate this:
<ol>
<li>
Start Visual Basic and open a Standard EXE project.<br><br></li>
<li>
Reference the <b>RDC</b>.<br><br></li>
<li>
Place an <b>RDC</b> on the form.<br><br></li>
<li>
Place a <b>TextBox</b> control on the form.<br><br></li>
<li>
Set the following <b>TextBox</b> properties:<p class=tl>
DataSource: MSRDC1</P><p class=tl>
DataField: au_lname</P></li>
<li>
Place a <b>CommandButton</b> control on the form and add the following code to its Click event:<pre><code>Dim cn As New rdoConnection
cn.Connect = _
"dsn=pinkpearl;database=rdobugs;uid=rdo;pwd="
cn.EstablishConnection
Set MSRDC1.Resultset = cn.OpenResultset("select * _
from authors]")
</code></pre>
</li>
<li>
Run the project (F5).<br><br></li>
<li>
Click the <b>CommandButton</b>.</li>
</ol>
<p>
Notice that the bound control does not populate with data as you would expect. You must issue the command <code>MSRDC1.Refresh</code> for the bound control to populate, which causes the server to send the entire resultset again. (Note that this can take a long time in some situations.)</p>
<p>
To work around this problem, set any bound control's datafield after setting the resultset in code. For example, after the line:</p>
<pre><code>Set MSRDC1.Resultset = cn.OpenResultset("select * _
from authors]")
</code></pre>
<p>
you would add:</p>
<pre><code>Text1.DataField = "au_lname"
</code></pre>
<p>
which forces the binding manager to set and update the bindings, which populates the bound control with data.</p>
<h3>Bound Image or PictureBox Control Doesn't Display Picture When RDC Uses Batch Cursors</h3>
<p>
When you are using an <b>Image</b> or <b>PictureBox </b>control bound to an image-containing field in an <b>RDC</b>, and the <b>RDC </b>uses batch cursors (<b>CursorDriver</b> = <i>rdUseClientBatch</i>), be aware that the <b>Image </b>or <b>PictureBox </b>control doesn't display the image. To correctly display the image, either set the <b>RDC</b>'s <b>Options</b> property to 128 (<i>rdFetchLongColumns</i>), or use a different cursor.</p>
<h3>Do Not Use Forward-only Resultsets</h3>
<p>
When you attempt to assign a forward-only resultset to an <b>RDC</b>, you get an "invalid object" error. To illustrate this situation:
<ol>
<li>
Start Visual Basic.<br><br></li>
<li>
Place a <b>RemoteData</b> control on Form1.<br><br></li>
<li>
Add a reference to <b>RDO</b> through the References command on the Project menu.<br><br></li>
<li>
Add the following code to the Form_Load event:<pre><code>Dim x as new rdoConnection
Dim y as rdoQuery
x.Connect = "DSN=Union;UID=rdo;PWD="
x.EstablishConnection
Set y = x.CreateQuery("Query1", "SELECT * FROM _
authors")
x.Query1
' invalid object error occurs on next line
Set MSRDC1.Resultset = x.LastQueryResults</code></pre>
</li>
<li>
Press F5.</li>
</ol>
<p>
The reason this error occurs is that it uses a forward-only resultset which cannot be assigned to the <b>RDC</b>. In order to assign a resultset to an <b>RDC</b>, it must be either keyset or static. For example:</p>
<pre><code>Dim x As New rdoConnection
Dim y As rdoQuery
x.Connect = "DSN=Union;database=rdobugs;UID=rdo;PWD="
  x.EstablishConnection
Set y = x.CreateQuery("Query1", "SELECT * FROM _
  authors")
y.CursorType = rdOpenKeyset
y.LockType = rdConcurRowVer
x.Query1
Set MSRDC1.Resultset = x.LastQueryResults
</code></pre>
</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>rdoQuery Object</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="rdobjrdoquery"></a>rdoQuery Object</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdobjrdoQuery_C;rdobjrdoQueryC;vbproBooksOnlineJumpTopic">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Example">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdobjrdoQuery_X;rdobjrdoQueryX">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Properties">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdidxrdoQueryP;rdobjrdoQuery_P">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Methods">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdidxrdoQueryM;rdobjrdoQuery_M">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Events">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdobjrdoQuery_E;rdobjrdoQueryE">
</object></p>
<p>
An <b>rdoQuery</b> object is a <a href="rddefquery.htm">query</a> definition that can include zero or more parameters.</p>
<p>
<img src="parchild.gif" border=0><a href="rdobjrdoconnection.htm"><img src="rdoconn.gif" border=0></a><br>
<img src="space.gif" border=0><img src="parchild.gif" border=0><a href="rdobjrdoqueriescollection.htm"><img src="rdoquers.gif" border=0></a><br>
<img src="space.gif" border=0><img src="space.gif" border=0><img src="parchild.gif" border=0><img src="rdoquer.gif" border=0><br>
<img src="space.gif" border=0><img src="space.gif" border=0><img src="space.gif" border=0><img src="parchild.gif" border=0><a href="rdobjrdoparameterscollection.htm"><img src="rdopars.gif" border=0></a></p>
<p class=label>
<b>Remarks</b></p>
<p>
The <b>rdoQuery</b> object is used to manage SQL queries requiring the use of input, output or input/output parameters. Basically, an <b>rdoQuery</b> functions as a compiled <a href="rddefsqlstatement.htm">SQL statement</a>. When working with stored procedures or queries that require use of arguments that change from execution to execution, you can create an <b>rdoQuery</b> object to manage the query parameters. If your stored procedure returns output parameters or a return value, or you wish to use <b>rdoParameter</b> objects to handle the parameters, you <i>must</i> use an <b>rdoQuery</b> object to manage it. For example, if you submit a query that includes information provided by the user such as a date range or part number, RDO can substitute these values automatically into the SQL statement when the query is executed.</p>
<p class=indent>
<B><b>Note</b></B> &nbsp; The <b>rdoQuery</b> object replaces the outdated <b>rdoPreparedStatement</b> object. The <b>rdoQuery</b> object remains similar to the <b>rdoPreparedStatement</b> in its interface, but adds the ability to be persisted into a Visual Basic project, allowing you to create and manipulate it at design time. Additionally, the <b>rdoQuery</b> objects can be prepared or not, allowing the you to choose the most appropriate use of the query.</p>
<p class=label>
<b>Creating rdoQuery Objects</b></p>
<p>
To create an <b>rdoQuery</b> object, use the <b>CreateQuery</b> method which associates the <b>rdoQuery</b> with a specific <b>rdoConnection</b> object and adds it to the <b>rdoQueries</b> collection. Once created, you must fill in required parameters using the <b>rdoParameters</b> collection, and then use the <b>OpenResultset</b> method to create resultsets from the query, or the <b>Execute</b> method to simply run the query if it does not return rows.</p>
<p>
You can also use the User Connection Designer (CQD) to create <b>rdoQuery</b> objects in your project. The CQD takes your SQL query and permits you to specify the data types for each parameter. It then inserts appropriate code in your application to expose these procedures very much like methods off of the <b>rdoQuery</b> object.</p>
<p class=indent>
<B><b>Note</b></B> &nbsp; Due to the extra overhead involved in creating and managing <b>rdoQuery</b> objects and the <b>rdoParameters</b> collection, you should not use parameter queries for SQL statements that do not change from execution to execution — especially those that are executed only once or infrequently.</p>
<p class=label>
<b>Stand Alone rdoQuery Objects</b></p>
<p>
You can declare a stand-alone <b>rdoQuery</b> object using the <b>Dim</b> statement as follows:</p>
<pre><code><b>Dim</b> MyQuery as New <b>rdoQuery</b>
</code></pre>
<p>
Stand-alone <b>rdoQuery</b> objects are not assigned to a specific <b>rdoConnection</b> object, so you must set the <b>ActiveConnection</b> property before attempting to execute the query, or to use the <b>OpenResultset</b> object against it. The <b>CursorType</b> and <b>ErrorThreshold</b> properties are set from default values established by the <b>rdoEngine</b> default settings. In addition, new <b>rdoQuery</b> objects are not automatically appended to the <b>rdoQueries</b> collection until you use the <b>Add</b> method.</p>
<p>
For example, the code shown below creates an <b>rdoQuery</b> object, associates it with a connection, and executes it. Next, the <b>rdoQuery</b> object is associated with a different connection and executed again. The query object becomes more of an encapsulation of any kind of query, and thus can be executed against any kind of connection, provided the SQL statement would be appropriate for the connection.</p>
<pre><code>Dim MyQuery As rdoQuery '
MyQuery.SQL = "Update customers " _
   &amp; " Set LastTouched = GetDate()"
MyQuery.Prepared = False    'don't prepare it, 
                           'just SQLExecDirect
'assume that cnSomeConnection 
'is an rdoConnection or stand-alone object
MyQuery.ActiveConnection = cnSomeConnection
MyQuery.Execute

MyQuery.ActiveConnection = cnOtherConnection
'the cnOtherConnection is over a WAN, so I can increase
'my query timeout to compensate
MYQuery.QueryTimeout = 120
MyQuery.Execute
</code></pre>
<p class=label>
<b>Choosing the right SQL Syntax</b></p>
<p>
When coding the SQL property of an <b>rdoQuery</b> object, you can choose between one of three syntax styles to code your parameter query:
<ul type=disc>
<li>
<u>Concatenated Strings</u>: Your code builds up the SQL statement and its parameters using the Visual Basic concatenation (&amp;) operator. This statement can be passed to the <b><i>SQL</i></b> argument of the <b>OpenResultset</b> method or the <b>rdoQuery</b> object's <b>SQL</b> property. In this case, a parameter query might look like this:</li>
</ul>
<pre><code>   sSQL = "Select Name, Age From Animals " _
   &amp; " Where Weight &gt; " &amp; WeightWanted.Text _
   &amp; " and Type = ' &amp; TypeWanted.Text &amp; "'"
</code></pre>
<ul type=disc>
<li>
<u>Native SQL syntax</u>: The SQL syntax used by the remote server. In this case you can execute your own query or stored procedure, and pass in parameters by concatenation, or using placeholders, or both. The parameters marked with placeholders are managed by RDO as <b>rdoParameter</b> objects. A parameter query might look like this:<pre><code>sSQL = "Select Au_LName from Authors" _
    &amp; " Where Au_Fname = ?"</code></pre>
<p class=tl>
– Or –</P><pre><code>sSQL = "Execute MyStoredProc 'Arg1', 450, '"&nbsp; _
    &amp; Text1</code></pre>
<p class=tl>
– Or –</P><pre><code>sSQL = "Execute MyStoredProc ?, ?, ?"
</code></pre>
</li>
<li>
<u>ODBC CALL syntax</u>: Designed to call stored procedures that return a return status or output parameters. In this case, a placeholder can be defined for each input, output, or input/output parameter which is automatically mapped to <b>rdoParameter</b> objects. You can also mix in concatenated operators as needed. In this case, a parameter query might look like this:<pre><code>sSQL = "{call ParameterTest (?,?,?) }"</code></pre>
<p class=tl>
– Or –</P></li>
</ul>
<pre><code>   sSQL = "{? = call ParameterTest (?,?,?) }"</code></pre>
<p class=tl>
– Or –</P><pre><code>sSQL = "{? = call CountAnimals (?, ?, 14, 'Pig')}
</code></pre>
<p>
The <b>rdoQuery</b> object is managed by setting the following properties and methods.
<ul type=disc>
<li>
Use the <b>SQL</b> property to specify a parameterized SQL statement to execute. The <b><i>name</i></b> argument of the <b>CreateQuery</b> method can also be used to provide the SQL query string.<br><br></li>
<li>
Set query <a href="rddefparameter.htm">parameters</a> by using the <b>rdoQuery</b> object's <b>rdoParameters</b> collection.<br><br></li>
<li>
Use the <b>Prepared</b> property to indicate if the <b>rdoQuery</b> object should be prepared by the ODBC <b>SQLPrepare</b> function. If <b>False</b>, the query is executed using the <b>SQLExecDirect</b> function.<br><br></li>
<li>
Use the <b>Type</b> property to determine whether the query selects <a href="rddefrow.htm">rows</a> from an existing <a href="rddeftable.htm">table</a> (<a href="rddefselectquery.htm">select query</a>), performs an action (an <a href="rddefactionquery.htm">action query</a>), contains both action and select operations, or represents a stored procedure.<br><br></li>
<li>
Use the <b>RowsetSize</b> property setting to determine how many rows are buffered internally when building a <a href="rddefcursor.htm">cursor</a> and locked when using pessimistic locking.<br><br></li>
<li>
Use the <b>KeysetSize</b> property to indicate the size of the <a href="rddefkeyset.htm">keyset</a> buffer when creating cursors.<br><br></li>
<li>
Use the <b>MaxRows</b> property to indicate the maximum number of rows to be returned by a query.<br><br></li>
<li>
Use the <b>RowsAffected</b> property to indicate how many rows are affected by an action query.<br><br></li>
<li>
Use the <b>QueryTimeout</b> property to indicate how long the driver manager waits before pausing a query and firing the QueryTimeout event.<br><br></li>
<li>
Use the <b>BindThreshold</b> property to indicate the largest <a href="rddefcolumn.htm">column</a> to be automatically bound.<br><br></li>
<li>
Use the <b>ErrorThreshold</b> property to indicate the error level that constitutes a trappable error.<br><br></li>
<li>
Use the <b>Updatable</b> property to see if the result set generated by an <b>rdoQuery</b> can be updated.<br><br></li>
<li>
Use the <b>OpenResultset</b> method to create an <b>rdoResultset</b> based on the <b>OpenResultset</b> arguments and properties of the <b>rdoQuery</b>.<br><br></li>
<li>
Use the <b>Execute</b> method to run an action query using <b>SQL</b> and other <b>rdoQuery</b> properties, including any values specified in the <b>rdoParameters</b> collection.<br><br></li>
<li>
Use the <b>LogMessages</b> property to activate <a href="rddefodbc.htm">ODBC</a> tracing.</li>
</ul>
<p class=label>
<b>rdoQuery Object Events</b></p>
<p>
The following events are fired as the <b>rdoQuery</b> object is manipulated. These can be used to micro-manage queries associated with the <b>rdoQuery</b> or coordinate other processes in your application.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Event Name</b></td>
<td class=label width=75%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=25%>QueryComplete</td>
<td width=75%>Fired when a query has completed.</td>
</tr>
<tr valign=top>
<td width=25%>QueryTimeout</td>
<td width=75%>Fired when the <b>QueryTimeout</b> period has elapsed and the query has not begun to return rows.</td>
</tr>
<tr valign=top>
<td width=25%>WillExecute</td>
<td width=75%>Fired before the query is executed permitting last-minute changes to the SQL, or to prevent the query from executing.</td>
</tr>
</table><br>
<p class=label>
<b>Closing the rdoQuery Object</b></p>
<p>
Use the <b>Close</b> method to close an <b>rdoQuery</b> object, set its <b>ActiveConnection</b> property to <b>Nothing</b>, and remove it from the <b>rdoQueries</b> collection. However, you can still re-associate the <b>rdoQuery</b> object with another <b>rdoConnection</b> object by setting its <b>ActiveConnection</b> property to another <b>rdoConnection</b> object. Using the <b>Execute</b> method or <b>OpenResultset</b> method against an <b>rdoQuery</b> object that has its <b>ActiveConnection</b> property set to <b>Nothing</b> or an invalid <b>rdoConnection</b> causes a trappable error.</p>
<p class=label>
<b>Addressing rdoQuery Objects</b></p>
<p>
<b>rdoQuery</b> objects are the preferred way to submit parameter queries to the external server. For example, you can create a&nbsp; parameterized Transact SQL query (as used on Microsoft SQL Server) and store it in an <b>rdoQuery</b> object.</p>
<p>
You refer to an <b>rdoQuery</b> object by its <b>Name</b> property setting using the following syntax. Since the <b>rdoQuery</b> object's default collection is the <b>rdoParameters</b> collection, all unqualified references to the <b>rdoQuery</b> object refer to the <b>rdoParameters</b> collection. In these examples, assume we have created an <b>rdoQuery</b> object named <code>rdoQo</code> using the syntax <code>Dim rdoQo as rdoQueries</code>. The first two examples refer to the <b>rdoQuery</b> object named "MyQuery".</p>
<p>
<b>rdoQo("MyQuery")</b></p>
<p>
– Or –</p>
<p>
<b>rdoQo!</b><i>MyQuery</i></p>
<p>
You can also refer to <b>rdoQuery</b> objects (and the <b>rdoPreparedStatements</b> collection) by their position in the <b>rdoQueries</b> collection using this syntax (where <i>n</i> is the <i>n</i>th member of the zero-based <b>rdoQueries</b> collection):</p>
<p>
<b>rdoQo</b>(<i>n</i>)</p>
</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

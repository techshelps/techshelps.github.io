<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<title>rdoConnection Object</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="rdobjrdoconnection"></a>rdoConnection Object</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdobjrdoConnection_C;rdobjrdoConnectionC;vbproBooksOnlineJumpTopic">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Example">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdobjrdoConnection_X;rdobjrdoConnectionX">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Properties">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdidxrdoConnectionP;rdobjrdoConnection_P">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Methods">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdidxrdoConnectionM;rdobjrdoConnection_M">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Events">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdobjrdoConnection_E;rdobjrdoConnectionE">
</object></p>
<p>
An <b>rdoConnection</b> object represents an open connection to a remote <a href="rddefdatasource.htm">data source</a> and a specific database on that data source, or an allocated but as yet unconnected object, which can be used to subsequently establish a connection.</p>
<p>
<img src="parchild.gif" border=0><a href="rdobjrdoenvironment.htm"><img src="rdoenv.gif" border=0></a><br>
<img src="space.gif" border=0><img src="parchild.gif" border=0><a href="rdobjrdoconnectionscollection.htm"><img src="rdoconns.gif" border=0></a><br>
<img src="space.gif" border=0><img src="space.gif" border=0><img src="parchild.gif" border=0><a href="#rdobjrdoconnection"><img src="rdoconn.gif" border=0></a><br>
<img src="space.gif" border=0><img src="space.gif" border=0><img src="space.gif" border=0><img src="parmult.gif" border=0><a href="rdobjrdoqueriescollection.htm"><img src="rdoquers.gif" border=0></a><br>
<img src="space.gif" border=0><img src="space.gif" border=0><img src="space.gif" border=0><img src="parmult.gif" border=0><a href="rdobjrdoresultsetscollection.htm"><img src="rdorslts.gif" border=0></a><br>
<img src="space.gif" border=0><img src="space.gif" border=0><img src="space.gif" border=0><img src="parmult.gif" border=0><a href="rdobjrdotablescollection.htm"><img src="rdotbls.gif" border=0></a></p>
<p class=label>
<b>Remarks</b></p>
<p>
Generally, an <b>rdoConnection</b> object represents a physical connection to the remote data source and corresponds to a single ODBC <b>hDbc</b> handle. A connection to a remote data source is required before you can access its data. You can open connections to remote <a href="rddefodbcdatasource.htm">ODBC data sources</a> and create <b>rdoConnection</b> objects with either the <b>RemoteData</b> control or the <b>OpenConnection</b> method of an <b>rdoEnvironment</b> object.</p>
<p>
To establish a connection to a remote server using the <b>rdoConnection</b> object, you can use the <b>OpenConnection</b> method to gather the <b><i>connect</i></b>, <b><i>dsname</i></b>, <b><i>readonly</i></b> and <b><i>prompt</i></b> arguments and open the connection. These arguments are then applied to the newly created <b>rdoConnection</b> object. You can also establish connections using the <b>RemoteData</b> control.</p>
<p class=label>
<b>Creating Stand Alone rdoConnection Objects</b></p>
<p>
You can also create a new <b>rdoConnection</b> object that is <i>not</i> immediately linked with a specific physical connection to a data source. For example, the following code creates a new stand-alone <b>rdoConnection</b> object:</p>
<pre><code>Dim X as new <b>rdoConnection</b>.
</code></pre>
<p>
Once created, you can set the properties of a stand-alone <b>rdoConnection</b> object and subsequently use the <b>EstablishConnection</b> method. This method determines how users are prompted — based on the <b><i>prompt</i></b> argument, and sets the read-only status of the connection based on the <b><i>readonly</i></b> argument.</p>
<p>
When using this technique, RDO sets the following properties based on <b>rdoEngine</b> default values: <b>CursorDriver</b>, <b>LoginTimeout</b>, <b>UserName</b>, <b>Password</b> and <b>ErrorThreshold</b>. The <b>CursorDriver</b> and <b>LoginTimeout</b> properties can be set in the <b>rdoConnection</b> object itself and the <b>UserName</b> and <b>Password</b> can be set through arguments in the connect string. Once the connection is open, all of these properties are read-only.</p>
<p>
When you declare a stand-alone <b>rdoConnection</b> object or use the <b>EstablishConnection</b> method, the object is not automatically appended to the <b>rdoConnections</b> collection. Use the <b>Add</b> or <b>Remove</b> methods to add or delete stand-alone <b>rdoConnection</b> objects to or from the <b>rdoConnections</b> collection. It is not necessary, however to add&nbsp; an <b>rdoConnection</b> object to the <b>rdoConnections</b> collection before it can be used to establish a connection.</p>
<p class=indent>
<B><b>Note</b></B> &nbsp; RDO 1.0 collections behave differently than Data Access Object (DAO) collections. When you <b>Set</b> a variable containing a reference to a RDO object like <b>rdoResultset</b>, the existing <b>rdoResultset</b> is <i>not</i> closed and removed from the <b>rdoResultsets</b> collection. The existing object remains open and a member of its respective collection.</p>
<p class=indent>
In contrast, RDO 2.0 collections do not behave in this manner. When you use the Set statement to assign a variable containing a reference to an RDO object, the existing object <i>is</i> closed and removed from the associated collection. This change is designed to make RDO more compatible with DAO.</p>
<p class=label>
<b>Asynchronous Operations</b></p>
<p>
Both the <b>EstablishConnection</b> and <b>OpenConnection</b> methods support synchronous, asynchronous, and event-managed operations. By setting the <b>rdAsyncEnable</b> option, control returns to your application <i>before</i> the connection is established. Once the <b>StillConnecting</b> property returns <b>False</b>, and the <b>Connect</b> event fires, the connection has either been made or failed to complete. You can check the success or failure of this operation by examining errors returned through the <b>rdoErrors</b> collection.</p>
<p class=label>
<b>Opening Connections without Data Source Names</b></p>
<p>
In many situations, it is difficult to ensure that a registered Data Source Name (DSN) exists on the target system, and in some cases it is not advisable to create one. Actually, a DSN is not needed to establish a connection if you are using the default network protocol (named pipes) and you know the name of the server and ODBC driver. If this is the case, you can establish a <i>DSN-less </i>connection by following these steps:
<ol>
<li>
Set the <b><i>DSN</i></b> argument of the connect string to an empty string (DSN='').<br><br></li>
<li>
Include the server name in the connect string.<br><br></li>
<li>
Include the ODBC driver name in the connect string. Since many driver names have more than one word, enclose the name in curly braces { }.</li>
</ol>
<p class=indent>
<B><b>Note</b></B> &nbsp; This option is not available if you need to use other than the named pipes network protocol or one of the other DSN-set options such as OEMTOANSI conversion.</p>
<p>
For example, the following code opens a read-only ODBC cursor connection against the SQL Server "SEQUEL" and includes a simple error handler:</p>
<pre><code>Sub MakeConnection()
Dim rdoCn As New rdoConnection
On Error GoTo CnEh
With rdoCn
 &nbsp;&nbsp; .Connect = "UID=;PWD=;Database=WorkDB;" _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp; "Server=SEQUEL;Driver={SQL Server}" _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp; "DSN='';"
 &nbsp;&nbsp; .LoginTimeout = 5
    .CursorDriver = rdUseODBC
 &nbsp;&nbsp; .EstablishConnection rdDriverNoPrompt, True
End With
Exit Sub
CnEh:
Dim er As rdoError
 &nbsp;&nbsp; Debug.Print Err, Error
 &nbsp;&nbsp; For Each er In rdoErrors
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Debug.Print er.Description, er.Number
 &nbsp;&nbsp; Next er
 &nbsp;&nbsp; Resume Next
End Sub
</code></pre>
<p class=label>
<b>Choosing a Specific Database</b></p>
<p>
Once a connection is established, you can manipulate a <a href="rddefdatabase.htm">database</a> associated with the <b>rdoConnection</b> using the <b>rdoConnection</b> object and its methods and properties. For servers that support more than one database per connection, the default database is:
<ul type=disc>
<li>
Assigned to the user name by the database system administrator<br><br></li>
<li>
Specified with the DATABASE connect argument used when the <b>rdoConnection</b> is created.<br><br></li>
<li>
Specified in the registered ODBC data source entry.<br><br></li>
<li>
Selected by using an SQL statement such as USE &lt;database&gt; submitted with an action query.</li>
</ul>
<p>
All queries executed against the server assume this default database unless another database is specifically referenced in your SQL query.</p>
<p class=label>
<b>Preparing for Errors when Connecting</b></p>
<p>
There are a variety of reasons why you might be unable to connect to your remote database. Consider the following conditions that can typically prevent connections from completing:
<ul type=disc>
<li>
Your server might not have sufficient connection resources due to administrative settings or licensing restrictions.<br><br></li>
<li>
Your user might not have permission to access the network, server, or database with the password provided.<br><br></li>
<li>
The server, network or WAN bridges might be down or simply running slower than expected.</li>
</ul>
<p class=label>
<b>Closing the rdoConnection</b></p>
<p>
When you use the <b>Close</b> method against an <b>rdoConnection</b> object, any open <b>rdoResultset,</b> or <b>rdoQuery</b> objects are closed. However, if the <b>rdoConnection</b> object simply loses scope, these objects remain open until the <b>rdoConnection</b> or the objects are explicitly closed. Closing a connection is not recommended when there are incomplete queries or uncommitted transactions pending.</p>
<p>
Closing a connection also removes it from the <b>rdoConnections</b> collection. However, the <b>rdoConnection</b> object itself is not destroyed. If needed, you can use the <b>EstablishConnection</b> method to re-connect to the same server using the same settings, or change the <b>rdoConnection</b> object's properties and then use <b>EstablishConnection</b> to connect to another server.</p>
<p>
Closing a connection also instructs the remote server to discard any instance-specific objects associated with the connection. For example, server-side cursors, temporary tables or any other objects created in the <i>TempDB</i> database on SQL Server are all dropped.</p>
<p class=label>
<b>Working with rdoConnection Methods and Properties</b></p>
<p>
You can manipulate the connection, databases, and queries associated with them using the methods and properties of the <b>rdoConnection</b> object. For example, you can:
<ul type=disc>
<li>
Use the <b>CursorDriver</b> property to determine the type of cursor requested by result sets created against the connection.<br><br></li>
<li>
Use the <b>OpenResultset</b> method to create a new <b>rdoResultset</b> object.<br><br></li>
<li>
Use the <b>LastQueryResults</b> to reference the last <b>rdoResultset</b> created against this connection.<br><br></li>
<li>
Use the <b>QueryTimeout</b> or <b>LoginTimeout</b> properties to specify how long the <a href="rddefodbcdrivermanager.htm">ODBC driver manager</a> should wait before abandoning a query or connection attempt.<br><br></li>
<li>
Use the <b>RowsAffected</b> property to determine how many <a href="rddefrow.htm">rows</a> were affected by the last action query.<br><br></li>
<li>
Use the <b>Execute</b> method to run an <a href="rddefactionquery.htm">action query</a> or pass an <a href="rddefsqlstatement.htm">SQL statement</a> to a database for execution.<br><br></li>
<li>
Use the <b>CreateQuery</b> method to create a new <b>rdoQuery </b>object.<br><br></li>
<li>
Use the <b>Close</b> method to close an open connection, remove the <b>rdoConnection</b> object from the <b>rdoConnections</b> collection, deallocate the connection handle, and terminate the connection.<br><br></li>
<li>
Use the <b>Transactions</b> property to determine if the connection supports <a href="rddeftransaction.htm">transactions</a>, which you can implement using the <b>BeginTrans</b>, <b>CommitTrans</b>, and <b>RollbackTrans</b> methods.<br><br></li>
<li>
Use the <b>AsyncCheckInterval</b> property to determine how often RDO should poll for a completed asynchronous operation.<br><br></li>
<li>
Use the ODBC API with the <b>hDbc</b> property to set connection options.<br><br></li>
<li>
Use the <b>Connect</b> property to determine the <b><i>connect</i></b> argument used in the <b>OpenConnection</b> method, or the <b>Connect</b> property of the <b>RemoteData</b> control.</li>
</ul>
<p class=label>
<b>rdoConnection Events</b></p>
<p>
The following events are fired as the <b>rdoConnection</b> object is manipulated. These can be used to micro-manage the process of connecting and disconnecting and provide additional retry handling in query timeout situations.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Event Name</b></td>
<td class=label width=75%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=25%>BeforeConnect</td>
<td width=75%>Fired before ODBC is called to establish the connection.</td>
</tr>
<tr valign=top>
<td width=25%>Connect</td>
<td width=75%>Fired after a connection is established.</td>
</tr>
<tr valign=top>
<td width=25%>Disconnect</td>
<td width=75%>Fired after a connection has been closed</td>
</tr>
<tr valign=top>
<td width=25%>QueryComplete</td>
<td width=75%>Fired after a query run against this connection is complete</td>
</tr>
<tr valign=top>
<td width=25%>QueryTimeout</td>
<td width=75%>Fired after the QueryTimeout period is exhausted.</td>
</tr>
</table><br>
<p class=label>
<b>Addressing the rdoConnection Object</b></p>
<p>
The <b>Name</b> property setting of an <b>rdoConnection</b> specifies the data source name (DSN) parameter used to open the connection. This property is often empty as it is not used when making a DSN-less connection. In cases where you specify a different DSN to open each connection, you can refer to any <b>rdoConnection</b> object by its <b>Name</b> property setting using the following syntax. This code Refers to the connection opened against the <i>Accounting</i> DSN:</p>
<pre><code>rdoConnections("Accounting") 
</code></pre>
<p>
You can also refer to the object by its ordinal number using this syntax (which refers to the first member of the <b>rdoConnections</b> collection):</p>
<pre><code>rdoConnections(0)
</code></pre>
</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

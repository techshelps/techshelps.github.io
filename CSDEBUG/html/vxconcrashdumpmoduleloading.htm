<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Crash Dump Module Loading</TITLE>
<LINK REL="Stylesheet" HREF="../scripts/Office10.css"></HEAD>
<BODY>



<H1><A NAME="vxconcrashdumpmoduleloading"></A>Crash Dump Module Loading</H1>

<P class=T>When Visual Studio loads a crash dump, it loads the binaries (modules) for the crash dump by matching the module name, linker timestamp, and file size. The module name is the base name, so exmpl will match either exmpl.exe or exmpl.dll. When Visual Studio loads a minidump, the name is the basename and the extension, so exmpl.dll will match exmpl.dll only.</P>

<P class=T>Visual Studio assumes that modules are located in the same location as the crash dump and begins searching from that location. Suppose the crash dump exmpl.dmp is found in this location:</P>

<PRE class=CT><CODE>C:\qa\dumps\exmpl.dmp</CODE></PRE>

<P class=T>Visual Studio searches the following locations:</P>

<PRE class=CT><CODE>C:\qa\dumps\exmpl.exe
C:\qa\dumps\exmpl\exmpl.exe
C:\qa\dumps\qa\exmpl\exmpl.exe
D:\qa\exmpl\exmpl.exe
C:\qa\dumps\exmpl.dll
C:\qa\dumps\exmpl\exmpl.dll
C:\qa\dumps\qa\exmpl\exmpl.dll
D:\qa\exmpl\exmpl.dll
C:\qa\dumps\kernel32.dll
C:\qa\dumps\system32\kernel32.dll
C:\qa\dumps\win2k\system32\kernel32.dll
D:\win32\system32\system32\kernel32.dll</CODE></PRE>

<H2>Additional Module Search Paths</H2>

<P class=T>You can specify additional module search paths for a specific crash dump. </P>

<P class=T>To tell Visual Studio about a nonstandard extension, you must specify it in the Command Arguments grid of the <B>Property Pages</B> dialog box. The syntax looks like this:</P>

<PRE class=CT><CODE>MODPATH =c:\temp\xyz,d:\temp, f:\abc\temp</CODE></PRE>

<P class=T>When you load a crash dump, arguments specified in Command Arguments affect the loading of the crash dump. They do not affect the program being debugged. Most command arguments are ignored. MODPATH affects the loading of crash dump modules but does not affect the loading of files by the program being debugged.</P>

<P class=T>The MODPATH example tells Visual Studio to look for modules in the these directories:</P>

<PRE class=CT><CODE>C:\temp\xyz\ntdll.dll
D:\temp\ntdll.dll
F:\abc\temp\ntdll.dll   
C:\qa\dumps\ntdll.dll
C:\qa\dumps\system32\ntdll.dll
C:\qa\dumps\win2k\system32\ntdll.dll
D:\win32\system32\system32\ntdll.dll</CODE></PRE>

<H2>Nonstandard Extensions </H2>

<P class=T>When reading a crash dump, Visual Studio automatically loads modules with standard extensions (DLL or EXE), but you must tell it about any nonstandard extensions that need to be loaded. For example, if xyz.pkg was loaded in memory when the crash occurred, you must tell Visual Studio about the nonstandard extension PKG.</P>

<P class=T>To tell Visual Studio about a nonstandard extension, you must specify it in the Command Arguments grid of the <B>Property Pages</B> dialog box. The syntax looks like this:</P>

<PRE class=CT><CODE>EXTS=.pkg,.drv,.xyz</CODE></PRE>

<P class=T>This example specifies three nonstandard extensions, pkg, drv, and xyz. The period or dot before the extension name is required. Visual Studio searches for modules in the order specified. So, if you have both exmpl.pkg and exmpl.drv, Visual studio will find and load exmpl.pkg rather than exmpl.drv.</P>

<P class=T>You can use MODPATH with EXTS, as show here:</P>

<PRE class=CT><CODE>MODPATH=c:\xyz, a:\xyz;EXTS=.pkg,.drv</CODE></PRE>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

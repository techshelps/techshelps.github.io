<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Edit and Continue</TITLE>
<LINK REL="Stylesheet" HREF="../scripts/Office10.css"></HEAD>
<BODY>



<H1><A NAME="vchowusingeditcontinue"></A>Edit and Continue </H1>

<P class=T>Edit and Continue enables you to change your source code and apply those changes (with some <A HREF="vchowlimitationsofeditcontinue.htm">limitations</A>) while your program is running under the Visual Studio debugger (or in <A HREF="_asug_halting_a_program.htm">break mode</A>). Not only does this save time, it also gives you the chance to see the effect of changes during the current conditions under which your program is running. When you install Visual Studio, Edit and Continue is turned on by default. You can turn it off if you prefer. </P>

<P><B>To enable/disable Edit and Continue </B>

<OL>
	<LI class=LPROC>From the <B>Tools</B> Menu, click <B>Options</B>.</LI>

	<LI class=LPROC>In the <B>Options</B> dialog box, select the <B>Debugging</B> folder.</LI>

	<LI class=LPROC>In the <B>Edit and Continue</B> group, select or clear the <B>Enable Edit and Continue</B> check box.</LI>

	<LI class=LPROC>Click <B>OK</B>.</LI>
</OL>

<P class=T>When you edit code during you are debugging, Edit and Continue can apply the changes:

<UL>
	<LI class=LB1>Explicitly, when you select <B>Apply Code Changes</B> from the <B>Debug</B> menu
<P class=LT1>-or-
</LI>

	<LI class=LB1>Automatically, when you select a <B>Go</B> or <B>Step</B> command. </LI>
</UL>

<P class=T>When you apply code changes explicitly, Edit and Continue updates the compiled code you are debugging, but does not step or resume execution.</P>

<P class=T>If you prefer, you can disable the automatic invocation of Edit and Continue by <B>Go</B> and <B>Step</B> commands. You might do this if you are making edits to the code that you do not want applied during the current debugging session. </P>

<P><B>To enable/disable automatic invocation of Edit and Continue </B>

<OL>
	<LI class=LPROC>From the <B>Tools</B> Menu, click <B>Options</B>.</LI>

	<LI class=LPROC>In the <B>Options</B> dialog box, select the <B>Debugging</B> folder.</LI>

	<LI class=LPROC>In the <B>Edit and Continue</B> group, select or clear the <B>Invoked by debug commands</B> check box. 
<P class=LNT><B>Note</B>&nbsp;&nbsp;&nbsp;You also have the option of having the debugger ask you before applying code changes prior to a debug command. If you want to be asked, select the <B>Ask me first</B> check box. 
</LI>

	<LI class=LPROC>Click <B>OK</B>.</LI>
</OL>

<P class=T>Because <B>Invoked by debug commands</B> is a tools option, altering this setting affects all projects you work on. You do not need to rebuild your application after changing this setting. You can change the setting even while debugging. If you build your application from the command line or from a makefile but debug in the Visual C++ environment, you can still use Edit and Continue if you set the /ZI option.</P>

<P class=NT><B>Caution</B>&nbsp;&nbsp;&nbsp;Do not enable Edit and Continue (/ZI) if you are debugging optimized code. Edit and Continue is incompatible with compiler optimizations. The result is a compiler error.</P>

<P class=T>Some code changes cause the point of execution to move to a new location when Edit and Continue applies the changes. Edit and Continue places the point of execution as accurately as possible, but the results may not be correct in all cases. A dialog box informs you when the point of execution changes. You should verify that the location is correct before you continue debugging. If it is not correct, use the Set Next Statement, as described in <A HREF="vchowsettingexecutionpoint.htm">Setting the Execution Point</A>.</P>

</BODY>
</HTML>

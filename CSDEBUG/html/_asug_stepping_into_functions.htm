<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Stepping</TITLE>
<LINK REL="Stylesheet" HREF="../scripts/Office10.css"></HEAD>
<BODY>



<H1><A NAME="_asug_stepping_into_functions"></A>Stepping</H1>

<P class=T>One of the most common debugging procedures is stepping &#0151; executing code one unit (statement or line) at a time. With the debugger, you can choose the step unit you want to use &#0151; a language statement, a source line, or a machine instruction.</P>

<P><B>To change the step unit</B>

<UL>
	<LI class=LB1>From the <B>Debug</B> menu, choose <B>Step By</B> and select <B>Statement</B>, <B>Line</B>, or <B>Instruction</B>.</LI>
</UL>

<P class=T>The <B>Debug</B> menu provides three commands for stepping through code:

<UL>
	<LI class=LB1><B>Step Into</B></LI>

	<LI class=LB1><B>Step Over</B></LI>

	<LI class=LB1><B>Step Out</B></LI>
</UL>

<P class=T><B>Step Into</B> and <B>Step Over</B> differ in only one respect &#0151; the way they handle function calls. Either command instructs the debugger to execute the next unit of code. If the next unit contains a function call, <B>Step Into</B> executes only the call itself, then halts at the first unit of code inside the function. <B>Step Over</B> executes the entire function, then halts at the first unit outside the function. Use <B>Step Into</B> if you want to look inside the function call. Use <B>Step Over</B> if you want to avoid stepping into functions.</P>

<P class=T>On a nested function call, <B>Step Into</B> steps into the most deeply nested function. If you use <B>Step Into</B> on a call like <CODE>Func1(Func2),</CODE> the debugger steps into the function <CODE>Func2</CODE>. If you want to select which nested function to step into, use the <B>Step Into Specific Function</B> command from the shortcut menu.</P>

<P class=T>Use <B>Step Out</B> when you are inside a function call and want to return to the calling function. <B>Step Out</B> resumes execution of your code until the function returns, then breaks at the return point in the calling function.</P>

<P class=T>You cannot access the <B>Step</B> commands if your application is running. <B>Step</B> commands are valid only in break mode or before you start the application.</P>

<P><B>To step into a program that is not yet executing</B>

<UL>
	<LI class=LB1>From the <B>Debug</B> menu, choose <B>Step Into</B>.</LI>
</UL>

<P><B>To step while debugging</B>

<OL>
	<LI class=LPROC>The debugger must be in break mode.</LI>

	<LI class=LPROC>From the <B>Debug</B> menu, choose <B>Step Into</B>, <B>Step Out</B>, or <B>Step Over</B>.</LI>
</OL>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

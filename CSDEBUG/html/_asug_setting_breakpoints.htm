<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Breakpoints</TITLE>
<LINK REL="Stylesheet" HREF="../scripts/Office10.css"></HEAD>
<BODY>



<H1><A NAME="_asug_setting_breakpoints"></A>Breakpoints</H1>

<P class=T>A breakpoint tells the debugger that an application should break (pause execution) at a certain point or when a certain condition occurs. When a break occurs, your program and the debugger are said to be in break mode.</P>

<P class=T>The debugger has three types of breakpoints:

<UL>
	<LI class=LB1>A <I>function breakpoint</I> causes the program to break when execution reaches a specified location within a specified function.</LI>

	<LI class=LB1>A <I>file breakpoint</I> causes the program to break when execution reaches a specified location within a specified file. </LI>

	<LI class=LB1>An <I>address breakpoint</I> causes the program to break when execution reaches a specified memory address. </LI>

	<LI class=LB1>To provide greater power and flexibility, you can modify the behavior of a breakpoint by adding these properties: </LI>

	<LI class=LB1>A Hit Count property, which determines how many times a breakpoint must be hit before execution breaks. (By default, execution breaks every time a breakpoint is hit.)</LI>

	<LI class=LB1>A Condition, which is an expression that determines whether the breakpoint is hit or skipped. </LI>
</UL>

<P class=T>The Breakpoints window lists all breakpoints currently set in your program and displays their properties. In the Breakpoints window, you can set (create) new breakpoints, delete breakpoints, enable or disable breakpoints, edit a breakpoint's properties, or go to the source code corresponding to a breakpoint. </P>

<P class=T>The source windows show the location of a breakpoint by coloring the text where the breakpoint is located and displaying a symbol or <I>glyph</I> in the left margin.</P>

<P class=FIXP></P>

<TABLE cellpadding=4 cellspacing=4 cols=3 width=100%>

<TR VALIGN="top">
<TH>Glyph</TH>
<TH>State</TH>
<TH>Meaning</TH>
</TR>

<TR VALIGN="top">
<TD class=A><IMG SRC="normalbp.gif" ALT="" BORDER=0></TD>
<TD class=T>Enabled</TD>
<TD class=T>A normal or active breakpoint. This is where execution will break if the breakpoint condition and hit count settings are met.</TD>
</TR>

<TR VALIGN="top">
<TD class=A><IMG SRC="disabledbp.gif" ALT="" BORDER=0></TD>
<TD class=T>Disabled</TD>
<TD class=T>A breakpoint that will be ignored by the debugger. It does not affect execution until reenabled.</TD>
</TR>

<TR VALIGN="top">
<TD class=A><IMG SRC="errorbp.gif" ALT="" BORDER=0></TD>
<TD class=T>Error</TD>
<TD class=T>A breakpoint cannot be set because the location or condition is not valid.</TD>
</TR>

<TR VALIGN="top">
<TD class=A><IMG SRC="warningbp.gif" ALT="" BORDER=0></TD>
<TD class=T>Warning</TD>
<TD class=T>A breakpoint cannot be set because the code at this location is not loaded. If the code is loaded in the future (for example, when a class or DLL is loaded), the breakpoint becomes an enabled breakpoint.</TD>
</TR>

<TR VALIGN="top">
<TD class=A><IMG SRC="mappedbp.gif" ALT="" BORDER=0></TD>
<TD class=T>Mapped</TD>
<TD class=T>A breakpoint is set in ASP code, and a corresponding breakpoint is set in the generated HTML page.</TD>
</TR>
</TABLE><BR>

<P class=FIXP></P>

<P class=T>A breakpoint that is set and enabled appears as a solid red disk. A breakpoint that is disabled appears as an empty red circle. A breakpoint that is currently unavailable to the debugger (such as a breakpoint in a DLL that is not loaded) appears as a solid gray dot. You can set, enable, disable, edit, or delete these breakpoints in the source window. For details, see Breakpoint Operations in a Source Window. </P>

<P class=T>You can remove all breakpoints from the <B>Debug</B> menu.</P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

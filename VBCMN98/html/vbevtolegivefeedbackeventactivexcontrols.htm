<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<title>OLEGiveFeedback Event (ActiveX Controls)</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbevtolegivefeedbackeventactivexcontrols"></a>OLEGiveFeedback Event (ActiveX Controls)</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbevtOLEGiveFeedbackEventActiveXControls_C;vbevtOLEGiveFeedbackEventActiveXControlsC;vbproBooksOnlineJumpTopic">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Example">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbevtOLEGiveFeedbackEventActiveXControls_X;vbevtOLEGiveFeedbackEventActiveXControlsX">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Applies To">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbevtOLEGiveFeedbackEventActiveXControls_A;vbevtOLEGiveFeedbackEventActiveXControlsA">
</object></p>
<p>
Occurs after every OLEDragOver event. OLEGiveFeedback allows the source component to provide visual feedback to the user, such as changing the mouse cursor to indicate what will happen if the user drops the object, or provide visual feedback on the selection (in the source component) to indicate what will happen.</p>
<p class=label>
<b>Syntax</b></p>
<p>
<b>Private Sub</b> <i>object</i><b>_OLEGiveFeedback</b>(<i>effect</i> <b>As Long</b>, <i>defaultcursors</i> <b>As Boolean</b>) </p>
<p>
The OLEGiveFeedback event syntax has these parts:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=21%><b>Part</b></td>
<td class=label width=79%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=21%><i>object</i></td>
<td width=79%>An <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="defobjectexpression">
</object><a href=JavaScript:alink_4.Click()>object expression</a> that evaluates to an object in the Applies To list.</td>
</tr>
<tr valign=top>
<td width=21%><i>effect</i></td>
<td width=79%>A long integer set by the target component in the OLEDragOver event specifying the action to be performed if the user drops the selection on it. This allows the source to take the appropriate action (such as giving visual feedback). The possible values are listed in Settings.</td>
</tr>
<tr valign=top>
<td width=21%><i>defaultcursors</i></td>
<td width=79%>A boolean value which determines whether Visual Basic uses the default mouse cursor provided by the component, or uses a user-defined mouse cursor.</td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=79%><b>True</b> (default) = use default mouse cursor.</td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=79%><b>False</b> = do not use default cursor. Mouse cursor must be set with the <b>MousePointer</b> property of the <b>Screen</b> object.</td>
</tr>
</table><br>
<p class=label>
<b>Settings</b></p>
<p>
The settings for <i>effect</i> are:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Constant</b></td>
<td class=label width=24%><b>Value</b></td>
<td class=label width=43%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=33%><b>vbDropEffectNone</b></td>
<td width=24%>0</td>
<td width=43%>Drop target cannot accept the data.</td>
</tr>
<tr valign=top>
<td width=33%><b>vbDropEffectCopy</b></td>
<td width=24%>1</td>
<td width=43%>Drop results in a copy of data from the source to the target. The original data is unaltered by the drag operation.</td>
</tr>
<tr valign=top>
<td width=33%><b>vbDropEffectMove</b></td>
<td width=24%>2</td>
<td width=43%>Drop results in data being moved from drag source to drop source. The drag source should remove the data from itself after the move.</td>
</tr>
<tr valign=top>
<td width=33%><b>vbDropEffectScroll</b></td>
<td width=24%>-2147483648<p>
(&amp;H80000000)</p>
</td>
<td width=43%>Scrolling is occurring or about to occur in the target component. This value is used in conjunction with the other values.<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Use only if you are performing your own scrolling in the target component.</p>
</td>
</tr>
</table><br>
<p class=label>
<b>Remarks</b></p>
<p>
If there is no code in the OLEGiveFeedback event, or if the <i>defaultcursors</i> parameter is set to <b>True</b>, then Visual Basic automatically sets the mouse cursor to the default cursor provided by the component.</p>
<p>
The source component should always mask values from the <i>effect</i> parameter to ensure compatibility with future implementations of components. Presently, only three of the 32 bits in the <i>effect</i> parameter are used. In future versions of Visual Basic, however, these other bits may be used. Therefore, as a precaution against future problems, drag sources and drop targets should mask these values appropriately before performing any comparisons.</p>
<p>
For example, a source component should not compare an <i>effect</i><b> </b>against, for example, <b>vbDropEffectCopy</b>, such as:</p>
<pre><code>If Effect = vbDropEffectCopy... 
</code></pre>
<p>
Instead, the source component should mask for the value or values being sought, as here:</p>
<pre><code>If Effect And vbDropEffectCopy = vbDropEffectCopy... 
</code></pre>
<p class=tl>
-or-</P><pre><code>If (Effect And vbDropEffectCopy)... 
</code></pre>
<p>
This allows for the definition of new drop effects in future versions of Visual Basic while preserving backwards compatibility with your existing code.</p>
<p>
Most components support manual OLE drag and drop events, and some support automatic OLE drag and drop events.</p>
</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

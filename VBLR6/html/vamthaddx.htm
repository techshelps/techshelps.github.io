<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Add Method Example</TITLE>
<style>@import url(office.css);</style>
	<link disabled rel="stylesheet" href="msoffice.css"></HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">



<H2><A NAME="vamthaddx"></A>Add Method Example</H2>

<P class=T>This example uses the <B>Add</B> method to add <CODE>Inst</CODE> objects (instances of a class called <CODE>Class1</CODE> containing a <B>Public </B>variable <CODE>InstanceName</CODE>) to a collection called <CODE>MyClasses</CODE>. To see how this works, insert a class module and declare a public variable called <CODE>InstanceName</CODE> at module level of <CODE>Class1</CODE> (type <B>Public</B> <CODE>InstanceName)</CODE> to hold the names of each instance. Leave the default name as <CODE>Class1</CODE>. Copy and paste the following code into the Form_Load event procedure of a form module.</P>

<PRE class=CT><CODE>Dim MyClasses As New Collection    ' Create a Collection object.
Dim Num As Integer    ' Counter for individualizing keys.
Dim Msg
Dim TheName    ' Holder for names user enters.
Do
    Dim Inst As New Class1    ' Create a new instance of Class1.
    Num = Num + 1    ' Increment Num, then get a name.
    Msg = "Please enter a name for this object." &amp; Chr(13) _
     &amp; "Press Cancel to see names in collection."
    TheName = InputBox(Msg, "Name the Collection Items")
    Inst.InstanceName = TheName    ' Put name in object instance.
    ' If user entered name, add it to the collection.
    If Inst.InstanceName &lt;&gt; "" Then
        ' Add the named object to the collection.
        MyClasses.<B>Add</B> <B>item := </B>Inst, <B>key :=</B> CStr(Num)
    End If
    ' Clear the current reference in preparation for next one.
    Set Inst = Nothing
Loop Until TheName = ""
For Each x In MyClasses
    MsgBox x.instancename, , "Instance Name"
Next
</CODE></PRE>

</BODY>
</HTML>

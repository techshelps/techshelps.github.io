<html dir="ltr" xmlns:MSHelp="urn:schemas-microsoft-com:mshelp"><head>
<META http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="assetid" content="HP10355326"><!--cstransform awsenduserCHM.xsl date 2007-01-17 --><!--csautotext date 2009-09-29 number --><!--csglossary date 2009-09-30 number --><!--csglobalstrings date 2009-09-14 number --><META NAME="lcid" CONTENT="1033"><title>IF</title><link rel="stylesheet" type="text/css" href="office10.css"><script type="text/javascript" language="Javascript" src="ExpCollapse.js"></script></head><body><h1>IF</h1><p>Returns one value if a condition you specify evaluates to TRUE and another value if it evaluates to FALSE.</p><p>Use IF to conduct conditional tests on values and formulas.</p><p><b class="bterm">Syntax</b></p><p><b class="bterm">IF</b>(<b class="bterm">logical_test</b>,<b class="bterm">value_if_true</b>,value_if_false)</p><p><b class="runinhead">Logical_test</b>&nbsp;&nbsp; is any value or expression that can be evaluated to TRUE or FALSE. For example, [Quarter1]=100 is a logical expression; if the value in one row of the column, [Quarter1], is equal to 100, the expression evaluates to TRUE. Otherwise, the expression evaluates to FALSE. This argument can use any comparison calculation operator.</p><p><b class="runinhead">Value_if_true</b>&nbsp;&nbsp; is the value that is returned if logical_test is TRUE. For example, if this argument is the text string "Within budget" and the logical_test argument evaluates to TRUE, then the IF function displays the text "Within budget". If logical_test is TRUE and value_if_true is blank, this argument returns 0 (zero). To display the word TRUE, use the logical value TRUE for this argument. Value_if_true can be another formula.</p><p><b class="runinhead">Value_if_false</b>&nbsp;&nbsp; is the value that is returned if logical_test is FALSE. For example, if this argument is the text string "Over budget" and the logical_test argument evaluates to FALSE, then the IF function displays the text "Over budget". If logical_test is FALSE and value_if_false is omitted, (that is, after value_if_true, there is no comma), then the logical value FALSE is returned. If logical_test is FALSE and value_if_false is blank (that is, after value_if_true, there is a comma followed by the closing parenthesis), then the value 0 (zero) is returned. Value_if_false can be another formula.</p><p><b class="bterm">Remarks</b></p><ul>
			<li>Up to seven IF functions can be nested as value_if_true and value_if_false arguments to construct more elaborate tests. See the last of the following examples.</li>
			<li>When the value_if_true and value_if_false arguments are evaluated, IF returns the value returned by those statements.</li>
			<li>If any of the arguments to IF are arrays, every element of the array is evaluated when the IF statement is carried out.</li>
			
		</ul><p><b class="bterm">Example 1</b></p><table>
			
			
			<tr>
				<th>Col1</th><th>Col2</th><th>Col3</th><th>Expense</th><th>Formula</th>
				<th>Description (Result)</th>
			</tr>
			<tr>
				<td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>50</td><td>=IF([Expense]&lt;=100,"Within budget","Over budget")</td>
				<td>If the number is less than or equal to 100, then the formula displays "Within budget". Otherwise, the function displays "Over budget". (Within budget)</td>
			</tr>
			<tr>
				<td>23</td><td>45</td><td>89</td><td>50</td><td>=IF([Expense]=100,SUM([Col1],[Col2],[Col3]),"")</td>
				<td>If the number is 100, then the three values are added. Otherwise, empty text ("") is returned. ()</td>
			</tr>
		</table><p><b class="bterm">Example 2</b></p><table>
			
			
			
			
			<tr>
				<th>ActualExpenses</th><th>PredictedExpenses</th><th>Formula</th>
				<th>Description (Result)</th>
			</tr>
			<tr>
				<td>1500</td><td>900</td><td>=IF([ActualExpenses]&gt;[PredictedExpenses],"Over Budget","OK")</td>
				<td>Checks whether the first row is over budget (Over Budget)</td>
			</tr>
			<tr>
				<td>500</td><td>900</td><td>=IF([ActualExpenses]&gt;[PredictedExpenses],"Over Budget","OK")</td>
				<td>Checks whether the second row is over budget (OK)</td>
			</tr>
		</table><p><b class="bterm">Example 3</b></p><table>
			
			
			
			
			<tr>
				<th>Score</th><th>Formula</th>
				<th>Description (Result)</th>
			</tr>
			<tr>
				<td>45</td><td>=IF([Score]&gt;89,"A",IF([Score]&gt;79,"B", IF([Score]&gt;69,"C",IF([Score]&gt;59,"D","F"))))</td>
				<td>Assigns a letter grade to the first score (F)</td>
			</tr>
			<tr>
				<td>90</td><td>=IF([Score]&gt;89,"A",IF([Score]&gt;79,"B", IF([Score]&gt;69,"C",IF([Score]&gt;59,"D","F"))))</td>
				<td>Assigns a letter grade to the second score (A)</td>
			</tr>
			<tr>
				<td>78</td><td>=IF([Score]&gt;89,"A",IF([Score]&gt;79,"B", IF([Score]&gt;69,"C",IF([Score]&gt;59,"D","F"))))</td>
				<td>Assigns a letter grade to the third score (C)</td>
			</tr>
		</table><p>In the preceding example, the second IF statement is also the value_if_false argument to the first IF statement. Similarly, the third IF statement is the value_if_false argument to the second IF statement. For example, if the first logical_test ([Score]&gt;89) is TRUE, "A" is returned. If the first logical_test is FALSE, the second IF statement is evaluated, and so on.</p><p>The letter grades are assigned to numbers using the following key (assuming use of integers only).</p><table>
			<tr>
				<th>If Score is</th>
				<th>Then return</th>
			</tr>
			<tr>
				<td>Greater than 89</td>
				<td>A</td>
			</tr>
			<tr>
				<td>From 80 to 89</td>
				<td>B</td>
			</tr>
			<tr>
				<td>From 70 to 79</td>
				<td>C</td>
			</tr>
			<tr>
				<td>From 60 to 69</td>
				<td>D</td>
			</tr>
			<tr>
				<td>Less than 60</td>
				<td>F</td>
			</tr>
		</table><META NAME="CreationDate" CONTENT="2003-08-15"></body></html>